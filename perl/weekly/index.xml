<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-02T01:52:59Z</updated>
  <subtitle>Weekly Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>curl/stats</title>
    <updated>2024-06-02T01:52:59Z</updated>
    <id>tag:github.com,2024-06-02:/curl/stats</id>
    <link href="https://github.com/curl/stats" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Scripts for generating project statistics and for plotting them as graphs.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Stats&lt;/h1&gt; &#xA;&lt;p&gt;This repository is collection of scripts for generating project statistics and data.&lt;/p&gt; &#xA;&lt;p&gt;Stats generated by these scripts have been, are and will be used in curl related blog posts and presentations and by providing the scripts in a public repository everyone can reproduce the results and can verify the correctness of them.&lt;/p&gt; &#xA;&lt;p&gt;And it allows everyone to help out to improve the script and to provide new ones that generate even more, better and more interesting project stats.&lt;/p&gt; &#xA;&lt;h2&gt;How to run the scripts&lt;/h2&gt; &#xA;&lt;h3&gt;Check out the main curl git repository&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/curl/curl.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Check out this repository as a subdirectory&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd curl&#xA;git clone https://github.com/curl/stats.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run the stats scripts&lt;/h3&gt; &#xA;&lt;p&gt;The scripts are (primarily) written in perl and are intended to be run from the curl source code root.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perl stats/CI-jobs-over-time.pl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Output&lt;/h2&gt; &#xA;&lt;p&gt;The scripts are written to output CSV data, usually having data and/or curl release versions included in each line.&lt;/p&gt; &#xA;&lt;h1&gt;Scripts&lt;/h1&gt; &#xA;&lt;h2&gt;API-calls-over-time&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over git tags. Extracts the number of function calls as mentioned in the RELEASE-NOTES of the tag moment. Outputs version, date and a counter.&lt;/p&gt; &#xA;&lt;h2&gt;CI-jobs-over-time&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over all git tags. It then counts how many CI jobs that seems to have been enabled at that time. Outputs version, date, total count, travis count, cirrus count, appveyor count, azure count and the github count.&lt;/p&gt; &#xA;&lt;h2&gt;CI-platforms&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over all git tags. It then counts how many CI jobs that seems to have been enabled at that time. Outputs date, total count, Linux count, macOS count, Windows count and FreeBSD count.&lt;/p&gt; &#xA;&lt;h2&gt;authors&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over the git log. Counts how many comits each author did and when, then lists all dates when a new author appeared in the project. Date, single-commiter count, total authors count and a single/total share.&lt;/p&gt; &#xA;&lt;h2&gt;authors-per-month&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over the git log. Counts number of differenth authors every month, then for all years after 2009, outputs: year, first-commiters, unique authors, drive-by count and total uniues. The &lt;em&gt;drive-by&lt;/em&gt; count is an author with less than three commits done within that month.&lt;/p&gt; &#xA;&lt;h2&gt;authors-per-year&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over the git log. Counts number of differenth authors every year, then outputs date (as &#34;$year-01-01&#34;), total count and first-timer count. The latter being the number of authors who did their first commit that year.&lt;/p&gt; &#xA;&lt;h2&gt;bugbounty-over-time&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over all vulnerabilities in &lt;code&gt;vuln.pm&lt;/code&gt; (in the curl-www repo). Outputs cve, date, the accumulated amount and the individual payout amount. Amounts in USD. Note that this then does not include CVE reports that received payout but have since been retracted from the list of vulnerabilities.&lt;/p&gt; &#xA;&lt;h2&gt;bugfix-frequency&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over all releases in &lt;code&gt;releases.csv&lt;/code&gt; (built in the curl-www repo). For each release, it outputs version release date, total number of bugfixes in that release and then the averaged bugs per day count for the last 5 releases. The first 5 lines obviously then have less releases for the average.&lt;/p&gt; &#xA;&lt;h2&gt;cmdline-options-over-time&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over all git tags. Extracs the counter from the &lt;code&gt;RELEASES-NOTES&lt;/code&gt; from each tag. This script also contains a bunch of manually added lines from the times before the &lt;code&gt;RELEASES-NOTES&lt;/code&gt; file contained the necessary information. Outputs version, date and a counter.&lt;/p&gt; &#xA;&lt;h2&gt;commits-per-month&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over the git log. Counts number of commits done per month. Outputs date (&#34;$y-$m-01&#34;) and a counter.&lt;/p&gt; &#xA;&lt;h2&gt;commits-per-year&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over the git log. Counts number of commits done per year. Outputs date (&#34;$y-01-01&#34;) and a counter.&lt;/p&gt; &#xA;&lt;h2&gt;contributors-over-time&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over all git tags. Extracs the counter from the &lt;code&gt;RELEASES-NOTES&lt;/code&gt; from each tag. The script contains a set of manually added numbers from the time before the number was added to &lt;code&gt;RELEASES-NOTES&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;coreteam-over-time&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over the git log. Counts how many authors that have done 10 commits or more within the same calendar year, count them as &#34;core team&#34; members and outputs information about them.&lt;/p&gt; &#xA;&lt;h2&gt;cve-age&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over &lt;code&gt;vuln.pm&lt;/code&gt; and &lt;code&gt;releases.csv&lt;/code&gt; (from curl-www). Outputs CVE, date, flaw period, project age at that point, days since previous CVE, total CVE count to that point.&lt;/p&gt; &#xA;&lt;h2&gt;cve-plot&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over &lt;code&gt;vuln.pm&lt;/code&gt; and &lt;code&gt;releases.csv&lt;/code&gt; (from curl-www). Outputs CVE, total count, flaw period, project age at that point.&lt;/p&gt; &#xA;&lt;h2&gt;daniel-per-year&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over the git log. Counts how many commits Daniel did and how many others did each year. Outputs date (&#34;$year-12-31&#34;) and a share for that year.&lt;/p&gt; &#xA;&lt;h2&gt;daniel-vs-rest&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over the git log. Outputs date, total commit count, Daniel&#39;s share of all commits, the others&#39;s share of all commits.&lt;/p&gt; &#xA;&lt;h2&gt;days-per-release&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over &lt;code&gt;releases.csv&lt;/code&gt; (from curl-www). Outputs version, date and number of days between this release and the previous.&lt;/p&gt; &#xA;&lt;h2&gt;docs-over-time&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over the git log and all commits done to the &lt;code&gt;docs/&lt;/code&gt; folder. Outputs date and number of lines.&lt;/p&gt; &#xA;&lt;h2&gt;gh-monthly&lt;/h2&gt; &#xA;&lt;p&gt;Uses the generated github.csv file to generate graphs on github activity.&lt;/p&gt; &#xA;&lt;h2&gt;gh-age&lt;/h2&gt; &#xA;&lt;p&gt;Uses the generated github.csv file to generate graphs on github issue ages.&lt;/p&gt; &#xA;&lt;h2&gt;lines-over-time&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over the git log and all commits done to the &lt;code&gt;src/&lt;/code&gt;, &lt;code&gt;lib/&lt;/code&gt; and &lt;code&gt;include/&lt;/code&gt; folders. Outputs date and number of lines. The script contains a set of versions and LOC counts, manually counted from the time before the git repo.&lt;/p&gt; &#xA;&lt;h2&gt;mail&lt;/h2&gt; &#xA;&lt;p&gt;Downloads the server-side CSV and generates a mailing list activity graph.&lt;/p&gt; &#xA;&lt;h2&gt;protocols-over-time&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over &lt;code&gt;protocol-history.md&lt;/code&gt;, which is a human maintained input source. Outputs date, protocol, total count. The protocol being the one that was added at that particular moment in time. The initial protocols were added &lt;em&gt;before&lt;/em&gt; the first curl release...&lt;/p&gt; &#xA;&lt;h2&gt;setopts-over-time&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over all git tags. Extracs the setopt counter from the &lt;code&gt;RELEASES-NOTES&lt;/code&gt; from each tag. The script contains a set of manually added numbers from the time before the number was added to &lt;code&gt;RELEASES-NOTES&lt;/code&gt;. Outputs version, date and counter.&lt;/p&gt; &#xA;&lt;h2&gt;files-over-time&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over all git tags. Counts the number of files in the repository at the time of each tag. Outputs version, date and counter.&lt;/p&gt; &#xA;&lt;h2&gt;tests-over-time&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over all git tags. Counts the number of files matching &lt;code&gt;tests/data/test[num]&lt;/code&gt; at the time of each tag. Outputs version, date and counter.&lt;/p&gt; &#xA;&lt;h2&gt;tls-over-time&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over &lt;code&gt;tls-history.md&lt;/code&gt;, which is a human maintained input source. Outputs date, backend, total count. The &#34;backend&#34; being the TLS library that was added (or removed) at that particular moment in time. Removed backends are prefixed with a minus.&lt;/p&gt; &#xA;&lt;h2&gt;vulns-over-time&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over all vulnerabilities in &lt;code&gt;vuln.pm&lt;/code&gt; (in the curl-www repo). Outputs cve, date, the total CVE count.&lt;/p&gt; &#xA;&lt;h2&gt;vulns-per-year&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over all vulnerabilities in &lt;code&gt;vuln.pm&lt;/code&gt; (in the curl-www repo). Outputs date (&#34;$year-01-01;, CVEs that year and the total CVE count up and including that year.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;The scripts are provided under &lt;a href=&#34;https://raw.githubusercontent.com/curl/stats/master/LICENSE&#34;&gt;MIT&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Interlocutor/dazeus-legacyd</title>
    <updated>2024-06-02T01:52:59Z</updated>
    <id>tag:github.com,2024-06-02:/Interlocutor/dazeus-legacyd</id>
    <link href="https://github.com/Interlocutor/dazeus-legacyd" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Perl daemon that runs the DaZeus 1 legacy plugins as DaZeus 2 modules&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>mkosola/JSON</title>
    <updated>2024-06-02T01:52:59Z</updated>
    <id>tag:github.com,2024-06-02:/mkosola/JSON</id>
    <link href="https://github.com/mkosola/JSON" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JSON version 2.57&lt;/h1&gt; &#xA;&lt;p&gt;JSON::PP was included in JSON distribution (CPAN module). It comes to be a perl core module in Perl 5.14. And JSON::PP will be split away it.&lt;/p&gt; &#xA;&lt;p&gt;This developer-version is for the preparation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;* JSON distribution will include yet another JSON::PP modules.&#xA;  They are JSON::backportPP. So JSON.pm should work as it did at all!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;=================&lt;/p&gt; &#xA;&lt;p&gt;INSTALLATION&lt;/p&gt; &#xA;&lt;p&gt;To install this module type the following:&lt;/p&gt; &#xA;&lt;p&gt;perl Makefile.PL make make test make install&lt;/p&gt; &#xA;&lt;p&gt;NAME JSON - JSON (JavaScript Object Notation) encoder/decoder&lt;/p&gt; &#xA;&lt;p&gt;SYNOPSIS use JSON; # imports encode_json, decode_json, to_json and from_json.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; # simple and fast interfaces (expect/generate UTF-8)&#xA;&#xA; $utf8_encoded_json_text = encode_json $perl_hash_or_arrayref;&#xA; $perl_hash_or_arrayref  = decode_json $utf8_encoded_json_text;&#xA;&#xA; # OO-interface&#xA;&#xA; $json = JSON-&amp;gt;new-&amp;gt;allow_nonref;&#xA;&#xA; $json_text   = $json-&amp;gt;encode( $perl_scalar );&#xA; $perl_scalar = $json-&amp;gt;decode( $json_text );&#xA;&#xA; $pretty_printed = $json-&amp;gt;pretty-&amp;gt;encode( $perl_scalar ); # pretty-printing&#xA;&#xA; # If you want to use PP only support features, call with &#39;-support_by_pp&#39;&#xA; # When XS unsupported feature is enable, using PP (de|en)code instead of XS ones.&#xA;&#xA; use JSON -support_by_pp;&#xA;&#xA; # option-acceptable interfaces (expect/generate UNICODE by default)&#xA;&#xA; $json_text   = to_json( $perl_scalar, { ascii =&amp;gt; 1, pretty =&amp;gt; 1 } );&#xA; $perl_scalar = from_json( $json_text, { utf8  =&amp;gt; 1 } );&#xA;&#xA; # Between (en|de)code_json and (to|from)_json, if you want to write&#xA; # a code which communicates to an outer world (encoded in UTF-8),&#xA; # recommend to use (en|de)code_json.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;VERSION 2.57&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;This version is compatible with JSON::XS 2.27 and later.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE JSON::PP was earlier included in the &#34;JSON&#34; distribution, but has since Perl 5.14 been a core module. For this reason, JSON::PP was removed from the JSON distribution and can now be found also in the Perl5 repository at&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;*   &amp;lt;http://perl5.git.perl.org/perl.git&amp;gt;&#xA;&#xA;(The newest JSON::PP version still exists in CPAN.)&#xA;&#xA;Instead, the &#34;JSON&#34; distribution will include JSON::backportPP for&#xA;backwards computability. JSON.pm should thus work as it did before.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;DESCRIPTION ************************** CAUTION ******************************** * This is &#39;JSON module version 2&#39; and there are many differences * * to version 1.xx * * Please check your applications using old version. * * See to &#39;INCOMPATIBLE CHANGES TO OLD VERSION&#39; * *******************************************************************&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;JSON (JavaScript Object Notation) is a simple data format. See to&#xA;&amp;lt;http://www.json.org/&amp;gt; and&#xA;&#34;RFC4627&#34;(&amp;lt;http://www.ietf.org/rfc/rfc4627.txt&amp;gt;).&#xA;&#xA;This module converts Perl data structures to JSON and vice versa using&#xA;either JSON::XS or JSON::PP.&#xA;&#xA;JSON::XS is the fastest and most proper JSON module on CPAN which must&#xA;be compiled and installed in your environment. JSON::PP is a pure-Perl&#xA;module which is bundled in this distribution and has a strong&#xA;compatibility to JSON::XS.&#xA;&#xA;This module try to use JSON::XS by default and fail to it, use JSON::PP&#xA;instead. So its features completely depend on JSON::XS or JSON::PP.&#xA;&#xA;See to &#34;BACKEND MODULE DECISION&#34;.&#xA;&#xA;To distinguish the module name &#39;JSON&#39; and the format type JSON, the&#xA;former is quoted by C&amp;lt;&amp;gt; (its results vary with your using media), and&#xA;the latter is left just as it is.&#xA;&#xA;Module name : &#34;JSON&#34;&#xA;&#xA;Format type : JSON&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;FEATURES * correct unicode handling&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    This module (i.e. backend modules) knows how to handle Unicode,&#xA;    documents how and when it does so, and even documents what &#34;correct&#34;&#xA;    means.&#xA;&#xA;    Even though there are limitations, this feature is available since&#xA;    Perl version 5.6.&#xA;&#xA;    JSON::XS requires Perl 5.8.2 (but works correctly in 5.8.8 or&#xA;    later), so in older versions &#34;JSON&#34; should call JSON::PP as the&#xA;    backend which can be used since Perl 5.005.&#xA;&#xA;    With Perl 5.8.x JSON::PP works, but from 5.8.0 to 5.8.2, because of&#xA;    a Perl side problem, JSON::PP works slower in the versions. And in&#xA;    5.005, the Unicode handling is not available. See to &#34;UNICODE&#xA;    HANDLING ON PERLS&#34; in JSON::PP for more information.&#xA;&#xA;    See also to &#34;A FEW NOTES ON UNICODE AND PERL&#34; in JSON::XS and&#xA;    &#34;ENCODING/CODESET_FLAG_NOTES&#34; in JSON::XS.&#xA;&#xA;*   round-trip integrity&#xA;&#xA;    When you serialise a perl data structure using only data types&#xA;    supported by JSON and Perl, the deserialised data structure is&#xA;    identical on the Perl level. (e.g. the string &#34;2.0&#34; doesn&#39;t suddenly&#xA;    become &#34;2&#34; just because it looks like a number). There *are* minor&#xA;    exceptions to this, read the &#34;MAPPING&#34; section below to learn about&#xA;    those.&#xA;&#xA;*   strict checking of JSON correctness&#xA;&#xA;    There is no guessing, no generating of illegal JSON texts by&#xA;    default, and only JSON is accepted as input by default (the latter&#xA;    is a security feature).&#xA;&#xA;    See to &#34;FEATURES&#34; in JSON::XS and &#34;FEATURES&#34; in JSON::PP.&#xA;&#xA;*   fast&#xA;&#xA;    This module returns a JSON::XS object itself if available. Compared&#xA;    to other JSON modules and other serialisers such as Storable,&#xA;    JSON::XS usually compares favorably in terms of speed, too.&#xA;&#xA;    If not available, &#34;JSON&#34; returns a JSON::PP object instead of&#xA;    JSON::XS and it is very slow as pure-Perl.&#xA;&#xA;*   simple to use&#xA;&#xA;    This module has both a simple functional interface as well as an&#xA;    object oriented interface interface.&#xA;&#xA;*   reasonably versatile output formats&#xA;&#xA;    You can choose between the most compact guaranteed-single-line&#xA;    format possible (nice for simple line-based protocols), a pure-ASCII&#xA;    format (for when your transport is not 8-bit clean, still supports&#xA;    the whole Unicode range), or a pretty-printed format (for when you&#xA;    want to read that stuff). Or you can combine those features in&#xA;    whatever way you like.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;FUNCTIONAL INTERFACE Some documents are copied and modified from &#34;FUNCTIONAL INTERFACE&#34; in JSON::XS. &#34;to_json&#34; and &#34;from_json&#34; are additional functions.&lt;/p&gt; &#xA;&lt;p&gt;encode_json $json_text = encode_json $perl_scalar&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Converts the given Perl data structure to a UTF-8 encoded, binary&#xA;string.&#xA;&#xA;This function call is functionally identical to:&#xA;&#xA;    $json_text = JSON-&amp;gt;new-&amp;gt;utf8-&amp;gt;encode($perl_scalar)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;decode_json $perl_scalar = decode_json $json_text&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;The opposite of &#34;encode_json&#34;: expects an UTF-8 (binary) string and&#xA;tries to parse that as an UTF-8 encoded JSON text, returning the&#xA;resulting reference.&#xA;&#xA;This function call is functionally identical to:&#xA;&#xA;    $perl_scalar = JSON-&amp;gt;new-&amp;gt;utf8-&amp;gt;decode($json_text)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to_json $json_text = to_json($perl_scalar)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Converts the given Perl data structure to a json string.&#xA;&#xA;This function call is functionally identical to:&#xA;&#xA;   $json_text = JSON-&amp;gt;new-&amp;gt;encode($perl_scalar)&#xA;&#xA;Takes a hash reference as the second.&#xA;&#xA;   $json_text = to_json($perl_scalar, $flag_hashref)&#xA;&#xA;So,&#xA;&#xA;   $json_text = to_json($perl_scalar, {utf8 =&amp;gt; 1, pretty =&amp;gt; 1})&#xA;&#xA;equivalent to:&#xA;&#xA;   $json_text = JSON-&amp;gt;new-&amp;gt;utf8(1)-&amp;gt;pretty(1)-&amp;gt;encode($perl_scalar)&#xA;&#xA;If you want to write a modern perl code which communicates to outer&#xA;world, you should use &#34;encode_json&#34; (supposed that JSON data are encoded&#xA;in UTF-8).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;from_json $perl_scalar = from_json($json_text)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;The opposite of &#34;to_json&#34;: expects a json string and tries to parse it,&#xA;returning the resulting reference.&#xA;&#xA;This function call is functionally identical to:&#xA;&#xA;    $perl_scalar = JSON-&amp;gt;decode($json_text)&#xA;&#xA;Takes a hash reference as the second.&#xA;&#xA;    $perl_scalar = from_json($json_text, $flag_hashref)&#xA;&#xA;So,&#xA;&#xA;    $perl_scalar = from_json($json_text, {utf8 =&amp;gt; 1})&#xA;&#xA;equivalent to:&#xA;&#xA;    $perl_scalar = JSON-&amp;gt;new-&amp;gt;utf8(1)-&amp;gt;decode($json_text)&#xA;&#xA;If you want to write a modern perl code which communicates to outer&#xA;world, you should use &#34;decode_json&#34; (supposed that JSON data are encoded&#xA;in UTF-8).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;JSON::is_bool $is_boolean = JSON::is_bool($scalar)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Returns true if the passed scalar represents either JSON::true or&#xA;JSON::false, two constants that act like 1 and 0 respectively and are&#xA;also used to represent JSON &#34;true&#34; and &#34;false&#34; in Perl strings.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;JSON::true Returns JSON true value which is blessed object. It &#34;isa&#34; JSON::Boolean object.&lt;/p&gt; &#xA;&lt;p&gt;JSON::false Returns JSON false value which is blessed object. It &#34;isa&#34; JSON::Boolean object.&lt;/p&gt; &#xA;&lt;p&gt;JSON::null Returns &#34;undef&#34;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;See MAPPING, below, for more information on how JSON values are mapped&#xA;to Perl.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;HOW DO I DECODE A DATA FROM OUTER AND ENCODE TO OUTER This section supposes that your perl version is 5.8 or later.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;If you know a JSON text from an outer world - a network, a file content,&#xA;and so on, is encoded in UTF-8, you should use &#34;decode_json&#34; or &#34;JSON&#34;&#xA;module object with &#34;utf8&#34; enable. And the decoded result will contain&#xA;UNICODE characters.&#xA;&#xA;  # from network&#xA;  my $json        = JSON-&amp;gt;new-&amp;gt;utf8;&#xA;  my $json_text   = CGI-&amp;gt;new-&amp;gt;param( &#39;json_data&#39; );&#xA;  my $perl_scalar = $json-&amp;gt;decode( $json_text );&#xA;&#xA;  # from file content&#xA;  local $/;&#xA;  open( my $fh, &#39;&amp;lt;&#39;, &#39;json.data&#39; );&#xA;  $json_text   = &amp;lt;$fh&amp;gt;;&#xA;  $perl_scalar = decode_json( $json_text );&#xA;&#xA;If an outer data is not encoded in UTF-8, firstly you should &#34;decode&#34;&#xA;it.&#xA;&#xA;  use Encode;&#xA;  local $/;&#xA;  open( my $fh, &#39;&amp;lt;&#39;, &#39;json.data&#39; );&#xA;  my $encoding = &#39;cp932&#39;;&#xA;  my $unicode_json_text = decode( $encoding, &amp;lt;$fh&amp;gt; ); # UNICODE&#xA;&#xA;  # or you can write the below code.&#xA;  #&#xA;  # open( my $fh, &#34;&amp;lt;:encoding($encoding)&#34;, &#39;json.data&#39; );&#xA;  # $unicode_json_text = &amp;lt;$fh&amp;gt;;&#xA;&#xA;In this case, $unicode_json_text is of course UNICODE string. So you&#xA;cannot use &#34;decode_json&#34; nor &#34;JSON&#34; module object with &#34;utf8&#34; enable.&#xA;Instead of them, you use &#34;JSON&#34; module object with &#34;utf8&#34; disable or&#xA;&#34;from_json&#34;.&#xA;&#xA;  $perl_scalar = $json-&amp;gt;utf8(0)-&amp;gt;decode( $unicode_json_text );&#xA;  # or&#xA;  $perl_scalar = from_json( $unicode_json_text );&#xA;&#xA;Or &#34;encode &#39;utf8&#39;&#34; and &#34;decode_json&#34;:&#xA;&#xA;  $perl_scalar = decode_json( encode( &#39;utf8&#39;, $unicode_json_text ) );&#xA;  # this way is not efficient.&#xA;&#xA;And now, you want to convert your $perl_scalar into JSON data and send&#xA;it to an outer world - a network or a file content, and so on.&#xA;&#xA;Your data usually contains UNICODE strings and you want the converted&#xA;data to be encoded in UTF-8, you should use &#34;encode_json&#34; or &#34;JSON&#34;&#xA;module object with &#34;utf8&#34; enable.&#xA;&#xA;  print encode_json( $perl_scalar ); # to a network? file? or display?&#xA;  # or&#xA;  print $json-&amp;gt;utf8-&amp;gt;encode( $perl_scalar );&#xA;&#xA;If $perl_scalar does not contain UNICODE but $encoding-encoded strings&#xA;for some reason, then its characters are regarded as latin1 for perl&#xA;(because it does not concern with your $encoding). You cannot use&#xA;&#34;encode_json&#34; nor &#34;JSON&#34; module object with &#34;utf8&#34; enable. Instead of&#xA;them, you use &#34;JSON&#34; module object with &#34;utf8&#34; disable or &#34;to_json&#34;.&#xA;Note that the resulted text is a UNICODE string but no problem to print&#xA;it.&#xA;&#xA;  # $perl_scalar contains $encoding encoded string values&#xA;  $unicode_json_text = $json-&amp;gt;utf8(0)-&amp;gt;encode( $perl_scalar );&#xA;  # or &#xA;  $unicode_json_text = to_json( $perl_scalar );&#xA;  # $unicode_json_text consists of characters less than 0x100&#xA;  print $unicode_json_text;&#xA;&#xA;Or &#34;decode $encoding&#34; all string values and &#34;encode_json&#34;:&#xA;&#xA;  $perl_scalar-&amp;gt;{ foo } = decode( $encoding, $perl_scalar-&amp;gt;{ foo } );&#xA;  # ... do it to each string values, then encode_json&#xA;  $json_text = encode_json( $perl_scalar );&#xA;&#xA;This method is a proper way but probably not efficient.&#xA;&#xA;See to Encode, perluniintro.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;COMMON OBJECT-ORIENTED INTERFACE new $json = JSON-&amp;gt;new&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Returns a new &#34;JSON&#34; object inherited from either JSON::XS or JSON::PP&#xA;that can be used to de/encode JSON strings.&#xA;&#xA;All boolean flags described below are by default *disabled*.&#xA;&#xA;The mutators for flags all return the JSON object again and thus calls&#xA;can be chained:&#xA;&#xA;   my $json = JSON-&amp;gt;new-&amp;gt;utf8-&amp;gt;space_after-&amp;gt;encode({a =&amp;gt; [1,2]})&#xA;   =&amp;gt; {&#34;a&#34;: [1, 2]}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ascii $json = $json-&amp;gt;ascii([$enable])&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    $enabled = $json-&amp;gt;get_ascii&#xA;&#xA;If $enable is true (or missing), then the encode method will not&#xA;generate characters outside the code range 0..127. Any Unicode&#xA;characters outside that range will be escaped using either a single&#xA;\uXXXX or a double \uHHHH\uLLLLL escape sequence, as per RFC4627.&#xA;&#xA;If $enable is false, then the encode method will not escape Unicode&#xA;characters unless required by the JSON syntax or other flags. This&#xA;results in a faster and more compact format.&#xA;&#xA;This feature depends on the used Perl version and environment.&#xA;&#xA;See to &#34;UNICODE HANDLING ON PERLS&#34; in JSON::PP if the backend is PP.&#xA;&#xA;  JSON-&amp;gt;new-&amp;gt;ascii(1)-&amp;gt;encode([chr 0x10401])&#xA;  =&amp;gt; [&#34;\ud801\udc01&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;latin1 $json = $json-&amp;gt;latin1([$enable])&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    $enabled = $json-&amp;gt;get_latin1&#xA;&#xA;If $enable is true (or missing), then the encode method will encode the&#xA;resulting JSON text as latin1 (or iso-8859-1), escaping any characters&#xA;outside the code range 0..255.&#xA;&#xA;If $enable is false, then the encode method will not escape Unicode&#xA;characters unless required by the JSON syntax or other flags.&#xA;&#xA;  JSON-&amp;gt;new-&amp;gt;latin1-&amp;gt;encode ([&#34;\x{89}\x{abc}&#34;]&#xA;  =&amp;gt; [&#34;\x{89}\\u0abc&#34;]    # (perl syntax, U+abc escaped, U+89 not)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;utf8 $json = $json-&amp;gt;utf8([$enable])&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    $enabled = $json-&amp;gt;get_utf8&#xA;&#xA;If $enable is true (or missing), then the encode method will encode the&#xA;JSON result into UTF-8, as required by many protocols, while the decode&#xA;method expects to be handled an UTF-8-encoded string. Please note that&#xA;UTF-8-encoded strings do not contain any characters outside the range&#xA;0..255, they are thus useful for bytewise/binary I/O.&#xA;&#xA;In future versions, enabling this option might enable autodetection of&#xA;the UTF-16 and UTF-32 encoding families, as described in RFC4627.&#xA;&#xA;If $enable is false, then the encode method will return the JSON string&#xA;as a (non-encoded) Unicode string, while decode expects thus a Unicode&#xA;string. Any decoding or encoding (e.g. to UTF-8 or UTF-16) needs to be&#xA;done yourself, e.g. using the Encode module.&#xA;&#xA;Example, output UTF-16BE-encoded JSON:&#xA;&#xA;  use Encode;&#xA;  $jsontext = encode &#34;UTF-16BE&#34;, JSON::XS-&amp;gt;new-&amp;gt;encode ($object);&#xA;&#xA;Example, decode UTF-32LE-encoded JSON:&#xA;&#xA;  use Encode;&#xA;  $object = JSON::XS-&amp;gt;new-&amp;gt;decode (decode &#34;UTF-32LE&#34;, $jsontext);&#xA;&#xA;See to &#34;UNICODE HANDLING ON PERLS&#34; in JSON::PP if the backend is PP.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;pretty $json = $json-&amp;gt;pretty([$enable])&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;This enables (or disables) all of the &#34;indent&#34;, &#34;space_before&#34; and&#xA;&#34;space_after&#34; (and in the future possibly more) flags in one call to&#xA;generate the most readable (or most compact) form possible.&#xA;&#xA;Equivalent to:&#xA;&#xA;   $json-&amp;gt;indent-&amp;gt;space_before-&amp;gt;space_after&#xA;&#xA;The indent space length is three and JSON::XS cannot change the indent&#xA;space length.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;indent $json = $json-&amp;gt;indent([$enable])&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    $enabled = $json-&amp;gt;get_indent&#xA;&#xA;If $enable is true (or missing), then the &#34;encode&#34; method will use a&#xA;multiline format as output, putting every array member or object/hash&#xA;key-value pair into its own line, identifying them properly.&#xA;&#xA;If $enable is false, no newlines or indenting will be produced, and the&#xA;resulting JSON text is guaranteed not to contain any &#34;newlines&#34;.&#xA;&#xA;This setting has no effect when decoding JSON texts.&#xA;&#xA;The indent space length is three. With JSON::PP, you can also access&#xA;&#34;indent_length&#34; to change indent space length.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;space_before $json = $json-&amp;gt;space_before([$enable])&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    $enabled = $json-&amp;gt;get_space_before&#xA;&#xA;If $enable is true (or missing), then the &#34;encode&#34; method will add an&#xA;extra optional space before the &#34;:&#34; separating keys from values in JSON&#xA;objects.&#xA;&#xA;If $enable is false, then the &#34;encode&#34; method will not add any extra&#xA;space at those places.&#xA;&#xA;This setting has no effect when decoding JSON texts.&#xA;&#xA;Example, space_before enabled, space_after and indent disabled:&#xA;&#xA;   {&#34;key&#34; :&#34;value&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;space_after $json = $json-&amp;gt;space_after([$enable])&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    $enabled = $json-&amp;gt;get_space_after&#xA;&#xA;If $enable is true (or missing), then the &#34;encode&#34; method will add an&#xA;extra optional space after the &#34;:&#34; separating keys from values in JSON&#xA;objects and extra whitespace after the &#34;,&#34; separating key-value pairs&#xA;and array members.&#xA;&#xA;If $enable is false, then the &#34;encode&#34; method will not add any extra&#xA;space at those places.&#xA;&#xA;This setting has no effect when decoding JSON texts.&#xA;&#xA;Example, space_before and indent disabled, space_after enabled:&#xA;&#xA;   {&#34;key&#34;: &#34;value&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;relaxed $json = $json-&amp;gt;relaxed([$enable])&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    $enabled = $json-&amp;gt;get_relaxed&#xA;&#xA;If $enable is true (or missing), then &#34;decode&#34; will accept some&#xA;extensions to normal JSON syntax (see below). &#34;encode&#34; will not be&#xA;affected in anyway. *Be aware that this option makes you accept invalid&#xA;JSON texts as if they were valid!*. I suggest only to use this option to&#xA;parse application-specific files written by humans (configuration files,&#xA;resource files etc.)&#xA;&#xA;If $enable is false (the default), then &#34;decode&#34; will only accept valid&#xA;JSON texts.&#xA;&#xA;Currently accepted extensions are:&#xA;&#xA;*   list items can have an end-comma&#xA;&#xA;    JSON *separates* array elements and key-value pairs with commas.&#xA;    This can be annoying if you write JSON texts manually and want to be&#xA;    able to quickly append elements, so this extension accepts comma at&#xA;    the end of such items not just between them:&#xA;&#xA;       [&#xA;          1,&#xA;          2, &amp;lt;- this comma not normally allowed&#xA;       ]&#xA;       {&#xA;          &#34;k1&#34;: &#34;v1&#34;,&#xA;          &#34;k2&#34;: &#34;v2&#34;, &amp;lt;- this comma not normally allowed&#xA;       }&#xA;&#xA;*   shell-style &#39;#&#39;-comments&#xA;&#xA;    Whenever JSON allows whitespace, shell-style comments are&#xA;    additionally allowed. They are terminated by the first&#xA;    carriage-return or line-feed character, after which more white-space&#xA;    and comments are allowed.&#xA;&#xA;      [&#xA;         1, # this comment not allowed in JSON&#xA;            # neither this one...&#xA;      ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;canonical $json = $json-&amp;gt;canonical([$enable])&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    $enabled = $json-&amp;gt;get_canonical&#xA;&#xA;If $enable is true (or missing), then the &#34;encode&#34; method will output&#xA;JSON objects by sorting their keys. This is adding a comparatively high&#xA;overhead.&#xA;&#xA;If $enable is false, then the &#34;encode&#34; method will output key-value&#xA;pairs in the order Perl stores them (which will likely change between&#xA;runs of the same script).&#xA;&#xA;This option is useful if you want the same data structure to be encoded&#xA;as the same JSON text (given the same overall settings). If it is&#xA;disabled, the same hash might be encoded differently even if contains&#xA;the same data, as key-value pairs have no inherent ordering in Perl.&#xA;&#xA;This setting has no effect when decoding JSON texts.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;allow_nonref $json = $json-&amp;gt;allow_nonref([$enable])&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    $enabled = $json-&amp;gt;get_allow_nonref&#xA;&#xA;If $enable is true (or missing), then the &#34;encode&#34; method can convert a&#xA;non-reference into its corresponding string, number or null JSON value,&#xA;which is an extension to RFC4627. Likewise, &#34;decode&#34; will accept those&#xA;JSON values instead of croaking.&#xA;&#xA;If $enable is false, then the &#34;encode&#34; method will croak if it isn&#39;t&#xA;passed an arrayref or hashref, as JSON texts must either be an object or&#xA;array. Likewise, &#34;decode&#34; will croak if given something that is not a&#xA;JSON object or array.&#xA;&#xA;   JSON-&amp;gt;new-&amp;gt;allow_nonref-&amp;gt;encode (&#34;Hello, World!&#34;)&#xA;   =&amp;gt; &#34;Hello, World!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;allow_unknown $json = $json-&amp;gt;allow_unknown ([$enable])&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    $enabled = $json-&amp;gt;get_allow_unknown&#xA;&#xA;If $enable is true (or missing), then &#34;encode&#34; will *not* throw an&#xA;exception when it encounters values it cannot represent in JSON (for&#xA;example, filehandles) but instead will encode a JSON &#34;null&#34; value. Note&#xA;that blessed objects are not included here and are handled separately by&#xA;c&amp;lt;allow_nonref&amp;gt;.&#xA;&#xA;If $enable is false (the default), then &#34;encode&#34; will throw an exception&#xA;when it encounters anything it cannot encode as JSON.&#xA;&#xA;This option does not affect &#34;decode&#34; in any way, and it is recommended&#xA;to leave it off unless you know your communications partner.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;allow_blessed $json = $json-&amp;gt;allow_blessed([$enable])&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    $enabled = $json-&amp;gt;get_allow_blessed&#xA;&#xA;If $enable is true (or missing), then the &#34;encode&#34; method will not barf&#xA;when it encounters a blessed reference. Instead, the value of the&#xA;convert_blessed option will decide whether &#34;null&#34; (&#34;convert_blessed&#34;&#xA;disabled or no &#34;TO_JSON&#34; method found) or a representation of the object&#xA;(&#34;convert_blessed&#34; enabled and &#34;TO_JSON&#34; method found) is being encoded.&#xA;Has no effect on &#34;decode&#34;.&#xA;&#xA;If $enable is false (the default), then &#34;encode&#34; will throw an exception&#xA;when it encounters a blessed object.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;convert_blessed $json = $json-&amp;gt;convert_blessed([$enable])&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    $enabled = $json-&amp;gt;get_convert_blessed&#xA;&#xA;If $enable is true (or missing), then &#34;encode&#34;, upon encountering a&#xA;blessed object, will check for the availability of the &#34;TO_JSON&#34; method&#xA;on the object&#39;s class. If found, it will be called in scalar context and&#xA;the resulting scalar will be encoded instead of the object. If no&#xA;&#34;TO_JSON&#34; method is found, the value of &#34;allow_blessed&#34; will decide what&#xA;to do.&#xA;&#xA;The &#34;TO_JSON&#34; method may safely call die if it wants. If &#34;TO_JSON&#34;&#xA;returns other blessed objects, those will be handled in the same way.&#xA;&#34;TO_JSON&#34; must take care of not causing an endless recursion cycle (==&#xA;crash) in this case. The name of &#34;TO_JSON&#34; was chosen because other&#xA;methods called by the Perl core (== not by the user of the object) are&#xA;usually in upper case letters and to avoid collisions with the &#34;to_json&#34;&#xA;function or method.&#xA;&#xA;This setting does not yet influence &#34;decode&#34; in any way.&#xA;&#xA;If $enable is false, then the &#34;allow_blessed&#34; setting will decide what&#xA;to do when a blessed object is found.&#xA;&#xA;convert_blessed_universally mode&#xA;    If use &#34;JSON&#34; with &#34;-convert_blessed_universally&#34;, the&#xA;    &#34;UNIVERSAL::TO_JSON&#34; subroutine is defined as the below code:&#xA;&#xA;       *UNIVERSAL::TO_JSON = sub {&#xA;           my $b_obj = B::svref_2object( $_[0] );&#xA;           return    $b_obj-&amp;gt;isa(&#39;B::HV&#39;) ? { %{ $_[0] } }&#xA;                   : $b_obj-&amp;gt;isa(&#39;B::AV&#39;) ? [ @{ $_[0] } ]&#xA;                   : undef&#xA;                   ;&#xA;       }&#xA;&#xA;    This will cause that &#34;encode&#34; method converts simple blessed objects&#xA;    into JSON objects as non-blessed object.&#xA;&#xA;       JSON -convert_blessed_universally;&#xA;       $json-&amp;gt;allow_blessed-&amp;gt;convert_blessed-&amp;gt;encode( $blessed_object )&#xA;&#xA;    This feature is experimental and may be removed in the future.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;filter_json_object $json = $json-&amp;gt;filter_json_object([$coderef])&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;When $coderef is specified, it will be called from &#34;decode&#34; each time it&#xA;decodes a JSON object. The only argument passed to the coderef is a&#xA;reference to the newly-created hash. If the code references returns a&#xA;single scalar (which need not be a reference), this value (i.e. a copy&#xA;of that scalar to avoid aliasing) is inserted into the deserialised data&#xA;structure. If it returns an empty list (NOTE: *not* &#34;undef&#34;, which is a&#xA;valid scalar), the original deserialised hash will be inserted. This&#xA;setting can slow down decoding considerably.&#xA;&#xA;When $coderef is omitted or undefined, any existing callback will be&#xA;removed and &#34;decode&#34; will not change the deserialised hash in any way.&#xA;&#xA;Example, convert all JSON objects into the integer 5:&#xA;&#xA;   my $js = JSON-&amp;gt;new-&amp;gt;filter_json_object (sub { 5 });&#xA;   # returns [5]&#xA;   $js-&amp;gt;decode (&#39;[{}]&#39;); # the given subroutine takes a hash reference.&#xA;   # throw an exception because allow_nonref is not enabled&#xA;   # so a lone 5 is not allowed.&#xA;   $js-&amp;gt;decode (&#39;{&#34;a&#34;:1, &#34;b&#34;:2}&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;filter_json_single_key_object $json = $json-&amp;gt;filter_json_single_key_object($key [=&amp;gt; $coderef])&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Works remotely similar to &#34;filter_json_object&#34;, but is only called for&#xA;JSON objects having a single key named $key.&#xA;&#xA;This $coderef is called before the one specified via&#xA;&#34;filter_json_object&#34;, if any. It gets passed the single value in the&#xA;JSON object. If it returns a single value, it will be inserted into the&#xA;data structure. If it returns nothing (not even &#34;undef&#34; but the empty&#xA;list), the callback from &#34;filter_json_object&#34; will be called next, as if&#xA;no single-key callback were specified.&#xA;&#xA;If $coderef is omitted or undefined, the corresponding callback will be&#xA;disabled. There can only ever be one callback for a given key.&#xA;&#xA;As this callback gets called less often then the &#34;filter_json_object&#34;&#xA;one, decoding speed will not usually suffer as much. Therefore,&#xA;single-key objects make excellent targets to serialise Perl objects&#xA;into, especially as single-key JSON objects are as close to the&#xA;type-tagged value concept as JSON gets (it&#39;s basically an ID/VALUE&#xA;tuple). Of course, JSON does not support this in any way, so you need to&#xA;make sure your data never looks like a serialised Perl hash.&#xA;&#xA;Typical names for the single object key are &#34;__class_whatever__&#34;, or&#xA;&#34;$__dollars_are_rarely_used__$&#34; or &#34;}ugly_brace_placement&#34;, or even&#xA;things like &#34;__class_md5sum(classname)__&#34;, to reduce the risk of&#xA;clashing with real hashes.&#xA;&#xA;Example, decode JSON objects of the form &#34;{ &#34;__widget__&#34; =&amp;gt; &amp;lt;id&amp;gt; }&#34; into&#xA;the corresponding $WIDGET{&amp;lt;id&amp;gt;} object:&#xA;&#xA;   # return whatever is in $WIDGET{5}:&#xA;   JSON&#xA;      -&amp;gt;new&#xA;      -&amp;gt;filter_json_single_key_object (__widget__ =&amp;gt; sub {&#xA;            $WIDGET{ $_[0] }&#xA;         })&#xA;      -&amp;gt;decode (&#39;{&#34;__widget__&#34;: 5&#39;)&#xA;&#xA;   # this can be used with a TO_JSON method in some &#34;widget&#34; class&#xA;   # for serialisation to json:&#xA;   sub WidgetBase::TO_JSON {&#xA;      my ($self) = @_;&#xA;&#xA;      unless ($self-&amp;gt;{id}) {&#xA;         $self-&amp;gt;{id} = ..get..some..id..;&#xA;         $WIDGET{$self-&amp;gt;{id}} = $self;&#xA;      }&#xA;&#xA;      { __widget__ =&amp;gt; $self-&amp;gt;{id} }&#xA;   }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;shrink $json = $json-&amp;gt;shrink([$enable])&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    $enabled = $json-&amp;gt;get_shrink&#xA;&#xA;With JSON::XS, this flag resizes strings generated by either &#34;encode&#34; or&#xA;&#34;decode&#34; to their minimum size possible. This can save memory when your&#xA;JSON texts are either very very long or you have many short strings. It&#xA;will also try to downgrade any strings to octet-form if possible: perl&#xA;stores strings internally either in an encoding called UTF-X or in&#xA;octet-form. The latter cannot store everything but uses less space in&#xA;general (and some buggy Perl or C code might even rely on that internal&#xA;representation being used).&#xA;&#xA;With JSON::PP, it is noop about resizing strings but tries&#xA;&#34;utf8::downgrade&#34; to the returned string by &#34;encode&#34;. See to utf8.&#xA;&#xA;See to &#34;OBJECT-ORIENTED INTERFACE&#34; in JSON::XS and &#34;METHODS&#34; in&#xA;JSON::PP.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;max_depth $json = $json-&amp;gt;max_depth([$maximum_nesting_depth])&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    $max_depth = $json-&amp;gt;get_max_depth&#xA;&#xA;Sets the maximum nesting level (default 512) accepted while encoding or&#xA;decoding. If a higher nesting level is detected in JSON text or a Perl&#xA;data structure, then the encoder and decoder will stop and croak at that&#xA;point.&#xA;&#xA;Nesting level is defined by number of hash- or arrayrefs that the&#xA;encoder needs to traverse to reach a given point or the number of &#34;{&#34; or&#xA;&#34;[&#34; characters without their matching closing parenthesis crossed to&#xA;reach a given character in a string.&#xA;&#xA;If no argument is given, the highest possible setting will be used,&#xA;which is rarely useful.&#xA;&#xA;Note that nesting is implemented by recursion in C. The default value&#xA;has been chosen to be as large as typical operating systems allow&#xA;without crashing. (JSON::XS)&#xA;&#xA;With JSON::PP as the backend, when a large value (100 or more) was set&#xA;and it de/encodes a deep nested object/text, it may raise a warning&#xA;&#39;Deep recursion on subroutine&#39; at the perl runtime phase.&#xA;&#xA;See &#34;SECURITY CONSIDERATIONS&#34; in JSON::XS for more info on why this is&#xA;useful.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;max_size $json = $json-&amp;gt;max_size([$maximum_string_size])&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    $max_size = $json-&amp;gt;get_max_size&#xA;&#xA;Set the maximum length a JSON text may have (in bytes) where decoding is&#xA;being attempted. The default is 0, meaning no limit. When &#34;decode&#34; is&#xA;called on a string that is longer then this many bytes, it will not&#xA;attempt to decode the string but throw an exception. This setting has no&#xA;effect on &#34;encode&#34; (yet).&#xA;&#xA;If no argument is given, the limit check will be deactivated (same as&#xA;when 0 is specified).&#xA;&#xA;See &#34;SECURITY CONSIDERATIONS&#34; in JSON::XS, below, for more info on why&#xA;this is useful.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;encode $json_text = $json-&amp;gt;encode($perl_scalar)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Converts the given Perl data structure (a simple scalar or a reference&#xA;to a hash or array) to its JSON representation. Simple scalars will be&#xA;converted into JSON string or number sequences, while references to&#xA;arrays become JSON arrays and references to hashes become JSON objects.&#xA;Undefined Perl values (e.g. &#34;undef&#34;) become JSON &#34;null&#34; values.&#xA;References to the integers 0 and 1 are converted into &#34;true&#34; and&#xA;&#34;false&#34;.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;decode $perl_scalar = $json-&amp;gt;decode($json_text)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;The opposite of &#34;encode&#34;: expects a JSON text and tries to parse it,&#xA;returning the resulting simple scalar or reference. Croaks on error.&#xA;&#xA;JSON numbers and strings become simple Perl scalars. JSON arrays become&#xA;Perl arrayrefs and JSON objects become Perl hashrefs. &#34;true&#34; becomes 1&#xA;(&#34;JSON::true&#34;), &#34;false&#34; becomes 0 (&#34;JSON::false&#34;) and &#34;null&#34; becomes&#xA;&#34;undef&#34;.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;decode_prefix ($perl_scalar, $characters) = $json-&amp;gt;decode_prefix($json_text)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;This works like the &#34;decode&#34; method, but instead of raising an exception&#xA;when there is trailing garbage after the first JSON object, it will&#xA;silently stop parsing there and return the number of characters consumed&#xA;so far.&#xA;&#xA;   JSON-&amp;gt;new-&amp;gt;decode_prefix (&#34;[1] the tail&#34;)&#xA;   =&amp;gt; ([], 3)&#xA;&#xA;See to &#34;OBJECT-ORIENTED INTERFACE&#34; in JSON::XS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;property $boolean = $json-&amp;gt;property($property_name)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Returns a boolean value about above some properties.&#xA;&#xA;The available properties are &#34;ascii&#34;, &#34;latin1&#34;, &#34;utf8&#34;,&#xA;&#34;indent&#34;,&#34;space_before&#34;, &#34;space_after&#34;, &#34;relaxed&#34;, &#34;canonical&#34;,&#xA;&#34;allow_nonref&#34;, &#34;allow_unknown&#34;, &#34;allow_blessed&#34;, &#34;convert_blessed&#34;,&#xA;&#34;shrink&#34;, &#34;max_depth&#34; and &#34;max_size&#34;.&#xA;&#xA;   $boolean = $json-&amp;gt;property(&#39;utf8&#39;);&#xA;    =&amp;gt; 0&#xA;   $json-&amp;gt;utf8;&#xA;   $boolean = $json-&amp;gt;property(&#39;utf8&#39;);&#xA;    =&amp;gt; 1&#xA;&#xA;Sets the property with a given boolean value.&#xA;&#xA;    $json = $json-&amp;gt;property($property_name =&amp;gt; $boolean);&#xA;&#xA;With no argument, it returns all the above properties as a hash&#xA;reference.&#xA;&#xA;    $flag_hashref = $json-&amp;gt;property();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;INCREMENTAL PARSING Most of this section are copied and modified from &#34;INCREMENTAL PARSING&#34; in JSON::XS.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;In some cases, there is the need for incremental parsing of JSON texts.&#xA;This module does allow you to parse a JSON stream incrementally. It does&#xA;so by accumulating text until it has a full JSON object, which it then&#xA;can decode. This process is similar to using &#34;decode_prefix&#34; to see if a&#xA;full JSON object is available, but is much more efficient (and can be&#xA;implemented with a minimum of method calls).&#xA;&#xA;The backend module will only attempt to parse the JSON text once it is&#xA;sure it has enough text to get a decisive result, using a very simple&#xA;but truly incremental parser. This means that it sometimes won&#39;t stop as&#xA;early as the full parser, for example, it doesn&#39;t detect parenthesis&#xA;mismatches. The only thing it guarantees is that it starts decoding as&#xA;soon as a syntactically valid JSON text has been seen. This means you&#xA;need to set resource limits (e.g. &#34;max_size&#34;) to ensure the parser will&#xA;stop parsing in the presence if syntax errors.&#xA;&#xA;The following methods implement this incremental parser.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;incr_parse $json-&amp;gt;incr_parse( [$string] ) # void context&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    $obj_or_undef = $json-&amp;gt;incr_parse( [$string] ) # scalar context&#xA;&#xA;    @obj_or_empty = $json-&amp;gt;incr_parse( [$string] ) # list context&#xA;&#xA;This is the central parsing function. It can both append new text and&#xA;extract objects from the stream accumulated so far (both of these&#xA;functions are optional).&#xA;&#xA;If $string is given, then this string is appended to the already&#xA;existing JSON fragment stored in the $json object.&#xA;&#xA;After that, if the function is called in void context, it will simply&#xA;return without doing anything further. This can be used to add more text&#xA;in as many chunks as you want.&#xA;&#xA;If the method is called in scalar context, then it will try to extract&#xA;exactly *one* JSON object. If that is successful, it will return this&#xA;object, otherwise it will return &#34;undef&#34;. If there is a parse error,&#xA;this method will croak just as &#34;decode&#34; would do (one can then use&#xA;&#34;incr_skip&#34; to skip the erroneous part). This is the most common way of&#xA;using the method.&#xA;&#xA;And finally, in list context, it will try to extract as many objects&#xA;from the stream as it can find and return them, or the empty list&#xA;otherwise. For this to work, there must be no separators between the&#xA;JSON objects or arrays, instead they must be concatenated back-to-back.&#xA;If an error occurs, an exception will be raised as in the scalar context&#xA;case. Note that in this case, any previously-parsed JSON texts will be&#xA;lost.&#xA;&#xA;Example: Parse some JSON arrays/objects in a given string and return&#xA;them.&#xA;&#xA;    my @objs = JSON-&amp;gt;new-&amp;gt;incr_parse (&#34;[5][7][1,2]&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;incr_text $lvalue_string = $json-&amp;gt;incr_text&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;This method returns the currently stored JSON fragment as an lvalue,&#xA;that is, you can manipulate it. This *only* works when a preceding call&#xA;to &#34;incr_parse&#34; in *scalar context* successfully returned an object.&#xA;Under all other circumstances you must not call this function (I mean&#xA;it. although in simple tests it might actually work, it *will* fail&#xA;under real world conditions). As a special exception, you can also call&#xA;this method before having parsed anything.&#xA;&#xA;This function is useful in two cases: a) finding the trailing text after&#xA;a JSON object or b) parsing multiple JSON objects separated by non-JSON&#xA;text (such as commas).&#xA;&#xA;    $json-&amp;gt;incr_text =~ s/\s*,\s*//;&#xA;&#xA;In Perl 5.005, &#34;lvalue&#34; attribute is not available. You must write codes&#xA;like the below:&#xA;&#xA;    $string = $json-&amp;gt;incr_text;&#xA;    $string =~ s/\s*,\s*//;&#xA;    $json-&amp;gt;incr_text( $string );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;incr_skip $json-&amp;gt;incr_skip&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;This will reset the state of the incremental parser and will remove the&#xA;parsed text from the input buffer. This is useful after &#34;incr_parse&#34;&#xA;died, in which case the input buffer and incremental parser state is&#xA;left unchanged, to skip the text parsed so far and to reset the parse&#xA;state.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;incr_reset $json-&amp;gt;incr_reset&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;This completely resets the incremental parser, that is, after this call,&#xA;it will be as if the parser had never parsed anything.&#xA;&#xA;This is useful if you want to repeatedly parse JSON objects and want to&#xA;ignore any trailing data, which means you have to reset the parser after&#xA;each successful decode.&#xA;&#xA;See to &#34;INCREMENTAL PARSING&#34; in JSON::XS for examples.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;JSON::PP SUPPORT METHODS The below methods are JSON::PP own methods, so when &#34;JSON&#34; works with JSON::PP (i.e. the created object is a JSON::PP object), available. See to &#34;JSON::PP OWN METHODS&#34; in JSON::PP in detail.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;If you use &#34;JSON&#34; with additional &#34;-support_by_pp&#34;, some methods are&#xA;available even with JSON::XS. See to &#34;USE PP FEATURES EVEN THOUGH XS&#xA;BACKEND&#34;.&#xA;&#xA;   BEING { $ENV{PERL_JSON_BACKEND} = &#39;JSON::XS&#39; }&#xA;&#xA;   use JSON -support_by_pp;&#xA;&#xA;   my $json = JSON-&amp;gt;new;&#xA;   $json-&amp;gt;allow_nonref-&amp;gt;escape_slash-&amp;gt;encode(&#34;/&#34;);&#xA;&#xA;   # functional interfaces too.&#xA;   print to_json([&#34;/&#34;], {escape_slash =&amp;gt; 1});&#xA;   print from_json(&#39;[&#34;foo&#34;]&#39;, {utf8 =&amp;gt; 1});&#xA;&#xA;If you do not want to all functions but &#34;-support_by_pp&#34;, use&#xA;&#34;-no_export&#34;.&#xA;&#xA;   use JSON -support_by_pp, -no_export;&#xA;   # functional interfaces are not exported.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;allow_singlequote $json = $json-&amp;gt;allow_singlequote([$enable])&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;If $enable is true (or missing), then &#34;decode&#34; will accept any JSON&#xA;strings quoted by single quotations that are invalid JSON format.&#xA;&#xA;    $json-&amp;gt;allow_singlequote-&amp;gt;decode({&#34;foo&#34;:&#39;bar&#39;});&#xA;    $json-&amp;gt;allow_singlequote-&amp;gt;decode({&#39;foo&#39;:&#34;bar&#34;});&#xA;    $json-&amp;gt;allow_singlequote-&amp;gt;decode({&#39;foo&#39;:&#39;bar&#39;});&#xA;&#xA;As same as the &#34;relaxed&#34; option, this option may be used to parse&#xA;application-specific files written by humans.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;allow_barekey $json = $json-&amp;gt;allow_barekey([$enable])&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;If $enable is true (or missing), then &#34;decode&#34; will accept bare keys of&#xA;JSON object that are invalid JSON format.&#xA;&#xA;As same as the &#34;relaxed&#34; option, this option may be used to parse&#xA;application-specific files written by humans.&#xA;&#xA;    $json-&amp;gt;allow_barekey-&amp;gt;decode(&#39;{foo:&#34;bar&#34;}&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;allow_bignum $json = $json-&amp;gt;allow_bignum([$enable])&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;If $enable is true (or missing), then &#34;decode&#34; will convert the big&#xA;integer Perl cannot handle as integer into a Math::BigInt object and&#xA;convert a floating number (any) into a Math::BigFloat.&#xA;&#xA;On the contrary, &#34;encode&#34; converts &#34;Math::BigInt&#34; objects and&#xA;&#34;Math::BigFloat&#34; objects into JSON numbers with &#34;allow_blessed&#34; enable.&#xA;&#xA;   $json-&amp;gt;allow_nonref-&amp;gt;allow_blessed-&amp;gt;allow_bignum;&#xA;   $bigfloat = $json-&amp;gt;decode(&#39;2.000000000000000000000000001&#39;);&#xA;   print $json-&amp;gt;encode($bigfloat);&#xA;   # =&amp;gt; 2.000000000000000000000000001&#xA;&#xA;See to MAPPING about the conversion of JSON number.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;loose $json = $json-&amp;gt;loose([$enable])&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;The unescaped [\x00-\x1f\x22\x2f\x5c] strings are invalid in JSON&#xA;strings and the module doesn&#39;t allow to &#34;decode&#34; to these (except for&#xA;\x2f). If $enable is true (or missing), then &#34;decode&#34; will accept these&#xA;unescaped strings.&#xA;&#xA;    $json-&amp;gt;loose-&amp;gt;decode(qq|[&#34;abc&#xA;                                   def&#34;]|);&#xA;&#xA;See to &#34;JSON::PP OWN METHODS&#34; in JSON::PP.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;escape_slash $json = $json-&amp;gt;escape_slash([$enable])&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;According to JSON Grammar, *slash* (U+002F) is escaped. But by default&#xA;JSON backend modules encode strings without escaping slash.&#xA;&#xA;If $enable is true (or missing), then &#34;encode&#34; will escape slashes.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;indent_length $json = $json-&amp;gt;indent_length($length)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;With JSON::XS, The indent space length is 3 and cannot be changed. With&#xA;JSON::PP, it sets the indent space length with the given $length. The&#xA;default is 3. The acceptable range is 0 to 15.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;sort_by $json = $json-&amp;gt;sort_by($function_name) $json = $json-&amp;gt;sort_by($subroutine_ref)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;If $function_name or $subroutine_ref are set, its sort routine are used.&#xA;&#xA;   $js = $pc-&amp;gt;sort_by(sub { $JSON::PP::a cmp $JSON::PP::b })-&amp;gt;encode($obj);&#xA;   # is($js, q|{&#34;a&#34;:1,&#34;b&#34;:2,&#34;c&#34;:3,&#34;d&#34;:4,&#34;e&#34;:5,&#34;f&#34;:6,&#34;g&#34;:7,&#34;h&#34;:8,&#34;i&#34;:9}|);&#xA;&#xA;   $js = $pc-&amp;gt;sort_by(&#39;own_sort&#39;)-&amp;gt;encode($obj);&#xA;   # is($js, q|{&#34;a&#34;:1,&#34;b&#34;:2,&#34;c&#34;:3,&#34;d&#34;:4,&#34;e&#34;:5,&#34;f&#34;:6,&#34;g&#34;:7,&#34;h&#34;:8,&#34;i&#34;:9}|);&#xA;&#xA;   sub JSON::PP::own_sort { $JSON::PP::a cmp $JSON::PP::b }&#xA;&#xA;As the sorting routine runs in the JSON::PP scope, the given subroutine&#xA;name and the special variables $a, $b will begin with &#39;JSON::PP::&#39;.&#xA;&#xA;If $integer is set, then the effect is same as &#34;canonical&#34; on.&#xA;&#xA;See to &#34;JSON::PP OWN METHODS&#34; in JSON::PP.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;MAPPING This section is copied from JSON::XS and modified to &#34;JSON&#34;. JSON::XS and JSON::PP mapping mechanisms are almost equivalent.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;See to &#34;MAPPING&#34; in JSON::XS.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;JSON -&amp;gt; PERL object A JSON object becomes a reference to a hash in Perl. No ordering of object keys is preserved (JSON does not preserver object key ordering itself).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;array&#xA;    A JSON array becomes a reference to an array in Perl.&#xA;&#xA;string&#xA;    A JSON string becomes a string scalar in Perl - Unicode codepoints&#xA;    in JSON are represented by the same codepoints in the Perl string,&#xA;    so no manual decoding is necessary.&#xA;&#xA;number&#xA;    A JSON number becomes either an integer, numeric (floating point) or&#xA;    string scalar in perl, depending on its range and any fractional&#xA;    parts. On the Perl level, there is no difference between those as&#xA;    Perl handles all the conversion details, but an integer may take&#xA;    slightly less memory and might represent more values exactly than&#xA;    floating point numbers.&#xA;&#xA;    If the number consists of digits only, &#34;JSON&#34; will try to represent&#xA;    it as an integer value. If that fails, it will try to represent it&#xA;    as a numeric (floating point) value if that is possible without loss&#xA;    of precision. Otherwise it will preserve the number as a string&#xA;    value (in which case you lose roundtripping ability, as the JSON&#xA;    number will be re-encoded to a JSON string).&#xA;&#xA;    Numbers containing a fractional or exponential part will always be&#xA;    represented as numeric (floating point) values, possibly at a loss&#xA;    of precision (in which case you might lose perfect roundtripping&#xA;    ability, but the JSON number will still be re-encoded as a JSON&#xA;    number).&#xA;&#xA;    Note that precision is not accuracy - binary floating point values&#xA;    cannot represent most decimal fractions exactly, and when converting&#xA;    from and to floating point, &#34;JSON&#34; only guarantees precision up to&#xA;    but not including the least significant bit.&#xA;&#xA;    If the backend is JSON::PP and &#34;allow_bignum&#34; is enable, the big&#xA;    integers and the numeric can be optionally converted into&#xA;    Math::BigInt and Math::BigFloat objects.&#xA;&#xA;true, false&#xA;    These JSON atoms become &#34;JSON::true&#34; and &#34;JSON::false&#34;,&#xA;    respectively. They are overloaded to act almost exactly like the&#xA;    numbers 1 and 0. You can check whether a scalar is a JSON boolean by&#xA;    using the &#34;JSON::is_bool&#34; function.&#xA;&#xA;    If &#34;JSON::true&#34; and &#34;JSON::false&#34; are used as strings or compared as&#xA;    strings, they represent as &#34;true&#34; and &#34;false&#34; respectively.&#xA;&#xA;       print JSON::true . &#34;\n&#34;;&#xA;        =&amp;gt; true&#xA;       print JSON::true + 1;&#xA;        =&amp;gt; 1&#xA;&#xA;       ok(JSON::true eq &#39;true&#39;);&#xA;       ok(JSON::true eq  &#39;1&#39;);&#xA;       ok(JSON::true == 1);&#xA;&#xA;    &#34;JSON&#34; will install these missing overloading features to the&#xA;    backend modules.&#xA;&#xA;null&#xA;    A JSON null atom becomes &#34;undef&#34; in Perl.&#xA;&#xA;    &#34;JSON::null&#34; returns &#34;undef&#34;.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;PERL -&amp;gt; JSON The mapping from Perl to JSON is slightly more difficult, as Perl is a truly typeless language, so we can only guess which JSON type is meant by a Perl value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;hash references&#xA;    Perl hash references become JSON objects. As there is no inherent&#xA;    ordering in hash keys (or JSON objects), they will usually be&#xA;    encoded in a pseudo-random order that can change between runs of the&#xA;    same program but stays generally the same within a single run of a&#xA;    program. &#34;JSON&#34; optionally sort the hash keys (determined by the&#xA;    *canonical* flag), so the same data structure will serialise to the&#xA;    same JSON text (given same settings and version of JSON::XS), but&#xA;    this incurs a runtime overhead and is only rarely useful, e.g. when&#xA;    you want to compare some JSON text against another for equality.&#xA;&#xA;    In future, the ordered object feature will be added to JSON::PP&#xA;    using &#34;tie&#34; mechanism.&#xA;&#xA;array references&#xA;    Perl array references become JSON arrays.&#xA;&#xA;other references&#xA;    Other unblessed references are generally not allowed and will cause&#xA;    an exception to be thrown, except for references to the integers 0&#xA;    and 1, which get turned into &#34;false&#34; and &#34;true&#34; atoms in JSON. You&#xA;    can also use &#34;JSON::false&#34; and &#34;JSON::true&#34; to improve readability.&#xA;&#xA;       to_json [\0,JSON::true]      # yields [false,true]&#xA;&#xA;JSON::true, JSON::false, JSON::null&#xA;    These special values become JSON true and JSON false values,&#xA;    respectively. You can also use &#34;\1&#34; and &#34;\0&#34; directly if you want.&#xA;&#xA;    JSON::null returns &#34;undef&#34;.&#xA;&#xA;blessed objects&#xA;    Blessed objects are not directly representable in JSON. See the&#xA;    &#34;allow_blessed&#34; and &#34;convert_blessed&#34; methods on various options on&#xA;    how to deal with this: basically, you can choose between throwing an&#xA;    exception, encoding the reference as if it weren&#39;t blessed, or&#xA;    provide your own serialiser method.&#xA;&#xA;    With &#34;convert_blessed_universally&#34; mode, &#34;encode&#34; converts blessed&#xA;    hash references or blessed array references (contains other blessed&#xA;    references) into JSON members and arrays.&#xA;&#xA;       use JSON -convert_blessed_universally;&#xA;       JSON-&amp;gt;new-&amp;gt;allow_blessed-&amp;gt;convert_blessed-&amp;gt;encode( $blessed_object );&#xA;&#xA;    See to convert_blessed.&#xA;&#xA;simple scalars&#xA;    Simple Perl scalars (any scalar that is not a reference) are the&#xA;    most difficult objects to encode: JSON::XS and JSON::PP will encode&#xA;    undefined scalars as JSON &#34;null&#34; values, scalars that have last been&#xA;    used in a string context before encoding as JSON strings, and&#xA;    anything else as number value:&#xA;&#xA;       # dump as number&#xA;       encode_json [2]                      # yields [2]&#xA;       encode_json [-3.0e17]                # yields [-3e+17]&#xA;       my $value = 5; encode_json [$value]  # yields [5]&#xA;&#xA;       # used as string, so dump as string&#xA;       print $value;&#xA;       encode_json [$value]                 # yields [&#34;5&#34;]&#xA;&#xA;       # undef becomes null&#xA;       encode_json [undef]                  # yields [null]&#xA;&#xA;    You can force the type to be a string by stringifying it:&#xA;&#xA;       my $x = 3.1; # some variable containing a number&#xA;       &#34;$x&#34;;        # stringified&#xA;       $x .= &#34;&#34;;    # another, more awkward way to stringify&#xA;       print $x;    # perl does it for you, too, quite often&#xA;&#xA;    You can force the type to be a number by numifying it:&#xA;&#xA;       my $x = &#34;3&#34;; # some variable containing a string&#xA;       $x += 0;     # numify it, ensuring it will be dumped as a number&#xA;       $x *= 1;     # same thing, the choice is yours.&#xA;&#xA;    You can not currently force the type in other, less obscure, ways.&#xA;&#xA;    Note that numerical precision has the same meaning as under Perl (so&#xA;    binary to decimal conversion follows the same rules as in Perl,&#xA;    which can differ to other languages). Also, your perl interpreter&#xA;    might expose extensions to the floating point numbers of your&#xA;    platform, such as infinities or NaN&#39;s - these cannot be represented&#xA;    in JSON, and it is an error to pass those in.&#xA;&#xA;Big Number&#xA;    If the backend is JSON::PP and &#34;allow_bignum&#34; is enable, &#34;encode&#34;&#xA;    converts &#34;Math::BigInt&#34; objects and &#34;Math::BigFloat&#34; objects into&#xA;    JSON numbers.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;JSON and ECMAscript See to &#34;JSON and ECMAscript&#34; in JSON::XS.&lt;/p&gt; &#xA;&lt;p&gt;JSON and YAML JSON is not a subset of YAML. See to &#34;JSON and YAML&#34; in JSON::XS.&lt;/p&gt; &#xA;&lt;p&gt;BACKEND MODULE DECISION When you use &#34;JSON&#34;, &#34;JSON&#34; tries to &#34;use&#34; JSON::XS. If this call failed, it will &#34;uses&#34; JSON::PP. The required JSON::XS version is &lt;em&gt;2.2&lt;/em&gt; or later.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;The &#34;JSON&#34; constructor method returns an object inherited from the&#xA;backend module, and JSON::XS object is a blessed scalar reference while&#xA;JSON::PP is a blessed hash reference.&#xA;&#xA;So, your program should not depend on the backend module, especially&#xA;returned objects should not be modified.&#xA;&#xA; my $json = JSON-&amp;gt;new; # XS or PP?&#xA; $json-&amp;gt;{stash} = &#39;this is xs object&#39;; # this code may raise an error!&#xA;&#xA;To check the backend module, there are some methods - &#34;backend&#34;, &#34;is_pp&#34;&#xA;and &#34;is_xs&#34;.&#xA;&#xA;  JSON-&amp;gt;backend; # &#39;JSON::XS&#39; or &#39;JSON::PP&#39;&#xA;&#xA;  JSON-&amp;gt;backend-&amp;gt;is_pp: # 0 or 1&#xA;&#xA;  JSON-&amp;gt;backend-&amp;gt;is_xs: # 1 or 0&#xA;&#xA;  $json-&amp;gt;is_xs; # 1 or 0&#xA;&#xA;  $json-&amp;gt;is_pp; # 0 or 1&#xA;&#xA;If you set an environment variable &#34;PERL_JSON_BACKEND&#34;, the calling&#xA;action will be changed.&#xA;&#xA;PERL_JSON_BACKEND = 0 or PERL_JSON_BACKEND = &#39;JSON::PP&#39;&#xA;    Always use JSON::PP&#xA;&#xA;PERL_JSON_BACKEND == 1 or PERL_JSON_BACKEND = &#39;JSON::XS,JSON::PP&#39;&#xA;    (The default) Use compiled JSON::XS if it is properly compiled &amp;amp;&#xA;    installed, otherwise use JSON::PP.&#xA;&#xA;PERL_JSON_BACKEND == 2 or PERL_JSON_BACKEND = &#39;JSON::XS&#39;&#xA;    Always use compiled JSON::XS, die if it isn&#39;t properly compiled &amp;amp;&#xA;    installed.&#xA;&#xA;PERL_JSON_BACKEND = &#39;JSON::backportPP&#39;&#xA;    Always use JSON::backportPP. JSON::backportPP is JSON::PP back port&#xA;    module. &#34;JSON&#34; includes JSON::backportPP instead of JSON::PP.&#xA;&#xA;These ideas come from DBI::PurePerl mechanism.&#xA;&#xA;example:&#xA;&#xA; BEGIN { $ENV{PERL_JSON_BACKEND} = &#39;JSON::PP&#39; }&#xA; use JSON; # always uses JSON::PP&#xA;&#xA;In future, it may be able to specify another module.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;USE PP FEATURES EVEN THOUGH XS BACKEND Many methods are available with either JSON::XS or JSON::PP and when the backend module is JSON::XS, if any JSON::PP specific (i.e. JSON::XS unsupported) method is called, it will &#34;warn&#34; and be noop.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;But If you &#34;use&#34; &#34;JSON&#34; passing the optional string &#34;-support_by_pp&#34;, it&#xA;makes a part of those unsupported methods available. This feature is&#xA;achieved by using JSON::PP in &#34;de/encode&#34;.&#xA;&#xA;   BEGIN { $ENV{PERL_JSON_BACKEND} = 2 } # with JSON::XS&#xA;   use JSON -support_by_pp;&#xA;   my $json = JSON-&amp;gt;new;&#xA;   $json-&amp;gt;allow_nonref-&amp;gt;escape_slash-&amp;gt;encode(&#34;/&#34;);&#xA;&#xA;At this time, the returned object is a &#34;JSON::Backend::XS::Supportable&#34;&#xA;object (re-blessed XS object), and by checking JSON::XS unsupported&#xA;flags in de/encoding, can support some unsupported methods - &#34;loose&#34;,&#xA;&#34;allow_bignum&#34;, &#34;allow_barekey&#34;, &#34;allow_singlequote&#34;, &#34;escape_slash&#34; and&#xA;&#34;indent_length&#34;.&#xA;&#xA;When any unsupported methods are not enable, &#34;XS de/encode&#34; will be used&#xA;as is. The switch is achieved by changing the symbolic tables.&#xA;&#xA;&#34;-support_by_pp&#34; is effective only when the backend module is JSON::XS&#xA;and it makes the de/encoding speed down a bit.&#xA;&#xA;See to &#34;JSON::PP SUPPORT METHODS&#34;.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;INCOMPATIBLE CHANGES TO OLD VERSION There are big incompatibility between new version (2.00) and old (1.xx). If you use old &#34;JSON&#34; 1.xx in your code, please check it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;See to &#34;Transition ways from 1.xx to 2.xx.&#34;&#xA;&#xA;jsonToObj and objToJson are obsoleted.&#xA;    Non Perl-style name &#34;jsonToObj&#34; and &#34;objToJson&#34; are obsoleted (but&#xA;    not yet deleted from the source). If you use these functions in your&#xA;    code, please replace them with &#34;from_json&#34; and &#34;to_json&#34;.&#xA;&#xA;Global variables are no longer available.&#xA;    &#34;JSON&#34; class variables - $JSON::AUTOCONVERT, $JSON::BareKey, etc...&#xA;    - are not available any longer. Instead, various features can be&#xA;    used through object methods.&#xA;&#xA;Package JSON::Converter and JSON::Parser are deleted.&#xA;    Now &#34;JSON&#34; bundles with JSON::PP which can handle JSON more properly&#xA;    than them.&#xA;&#xA;Package JSON::NotString is deleted.&#xA;    There was &#34;JSON::NotString&#34; class which represents JSON value&#xA;    &#34;true&#34;, &#34;false&#34;, &#34;null&#34; and numbers. It was deleted and replaced by&#xA;    &#34;JSON::Boolean&#34;.&#xA;&#xA;    &#34;JSON::Boolean&#34; represents &#34;true&#34; and &#34;false&#34;.&#xA;&#xA;    &#34;JSON::Boolean&#34; does not represent &#34;null&#34;.&#xA;&#xA;    &#34;JSON::null&#34; returns &#34;undef&#34;.&#xA;&#xA;    &#34;JSON&#34; makes JSON::XS::Boolean and JSON::PP::Boolean is-a relation&#xA;    to JSON::Boolean.&#xA;&#xA;function JSON::Number is obsoleted.&#xA;    &#34;JSON::Number&#34; is now needless because JSON::XS and JSON::PP have&#xA;    round-trip integrity.&#xA;&#xA;JSONRPC modules are deleted.&#xA;    Perl implementation of JSON-RPC protocol - &#34;JSONRPC &#34;,&#xA;    &#34;JSONRPC::Transport::HTTP&#34; and &#34;Apache::JSONRPC &#34; are deleted in&#xA;    this distribution. Instead of them, there is JSON::RPC which&#xA;    supports JSON-RPC protocol version 1.1.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Transition ways from 1.xx to 2.xx. You should set &#34;suport_by_pp&#34; mode firstly, because it is always successful for the below codes even with JSON::XS.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    use JSON -support_by_pp;&#xA;&#xA;Exported jsonToObj (simple)&#xA;      from_json($json_text);&#xA;&#xA;Exported objToJson (simple)&#xA;      to_json($perl_scalar);&#xA;&#xA;Exported jsonToObj (advanced)&#xA;      $flags = {allow_barekey =&amp;gt; 1, allow_singlequote =&amp;gt; 1};&#xA;      from_json($json_text, $flags);&#xA;&#xA;    equivalent to:&#xA;&#xA;      $JSON::BareKey = 1;&#xA;      $JSON::QuotApos = 1;&#xA;      jsonToObj($json_text);&#xA;&#xA;Exported objToJson (advanced)&#xA;      $flags = {allow_blessed =&amp;gt; 1, allow_barekey =&amp;gt; 1};&#xA;      to_json($perl_scalar, $flags);&#xA;&#xA;    equivalent to:&#xA;&#xA;      $JSON::BareKey = 1;&#xA;      objToJson($perl_scalar);&#xA;&#xA;jsonToObj as object method&#xA;      $json-&amp;gt;decode($json_text);&#xA;&#xA;objToJson as object method&#xA;      $json-&amp;gt;encode($perl_scalar);&#xA;&#xA;new method with parameters&#xA;    The &#34;new&#34; method in 2.x takes any parameters no longer. You can set&#xA;    parameters instead;&#xA;&#xA;       $json = JSON-&amp;gt;new-&amp;gt;pretty;&#xA;&#xA;$JSON::Pretty, $JSON::Indent, $JSON::Delimiter&#xA;    If &#34;indent&#34; is enable, that means $JSON::Pretty flag set. And&#xA;    $JSON::Delimiter was substituted by &#34;space_before&#34; and&#xA;    &#34;space_after&#34;. In conclusion:&#xA;&#xA;       $json-&amp;gt;indent-&amp;gt;space_before-&amp;gt;space_after;&#xA;&#xA;    Equivalent to:&#xA;&#xA;      $json-&amp;gt;pretty;&#xA;&#xA;    To change indent length, use &#34;indent_length&#34;.&#xA;&#xA;    (Only with JSON::PP, if &#34;-support_by_pp&#34; is not used.)&#xA;&#xA;      $json-&amp;gt;pretty-&amp;gt;indent_length(2)-&amp;gt;encode($perl_scalar);&#xA;&#xA;$JSON::BareKey&#xA;    (Only with JSON::PP, if &#34;-support_by_pp&#34; is not used.)&#xA;&#xA;      $json-&amp;gt;allow_barekey-&amp;gt;decode($json_text)&#xA;&#xA;$JSON::ConvBlessed&#xA;    use &#34;-convert_blessed_universally&#34;. See to convert_blessed.&#xA;&#xA;$JSON::QuotApos&#xA;    (Only with JSON::PP, if &#34;-support_by_pp&#34; is not used.)&#xA;&#xA;      $json-&amp;gt;allow_singlequote-&amp;gt;decode($json_text)&#xA;&#xA;$JSON::SingleQuote&#xA;    Disable. &#34;JSON&#34; does not make such a invalid JSON string any longer.&#xA;&#xA;$JSON::KeySort&#xA;      $json-&amp;gt;canonical-&amp;gt;encode($perl_scalar)&#xA;&#xA;    This is the ascii sort.&#xA;&#xA;    If you want to use with your own sort routine, check the &#34;sort_by&#34;&#xA;    method.&#xA;&#xA;    (Only with JSON::PP, even if &#34;-support_by_pp&#34; is used currently.)&#xA;&#xA;      $json-&amp;gt;sort_by($sort_routine_ref)-&amp;gt;encode($perl_scalar)&#xA;&#xA;      $json-&amp;gt;sort_by(sub { $JSON::PP::a &amp;lt;=&amp;gt; $JSON::PP::b })-&amp;gt;encode($perl_scalar)&#xA;&#xA;    Can&#39;t access $a and $b but $JSON::PP::a and $JSON::PP::b.&#xA;&#xA;$JSON::SkipInvalid&#xA;      $json-&amp;gt;allow_unknown&#xA;&#xA;$JSON::AUTOCONVERT&#xA;    Needless. &#34;JSON&#34; backend modules have the round-trip integrity.&#xA;&#xA;$JSON::UTF8&#xA;    Needless because &#34;JSON&#34; (JSON::XS/JSON::PP) sets the UTF8 flag on&#xA;    properly.&#xA;&#xA;        # With UTF8-flagged strings&#xA;&#xA;        $json-&amp;gt;allow_nonref;&#xA;        $str = chr(1000); # UTF8-flagged&#xA;&#xA;        $json_text  = $json-&amp;gt;utf8(0)-&amp;gt;encode($str);&#xA;        utf8::is_utf8($json_text);&#xA;        # true&#xA;        $json_text  = $json-&amp;gt;utf8(1)-&amp;gt;encode($str);&#xA;        utf8::is_utf8($json_text);&#xA;        # false&#xA;&#xA;        $str = &#39;&#34;&#39; . chr(1000) . &#39;&#34;&#39;; # UTF8-flagged&#xA;&#xA;        $perl_scalar  = $json-&amp;gt;utf8(0)-&amp;gt;decode($str);&#xA;        utf8::is_utf8($perl_scalar);&#xA;        # true&#xA;        $perl_scalar  = $json-&amp;gt;utf8(1)-&amp;gt;decode($str);&#xA;        # died because of &#39;Wide character in subroutine&#39;&#xA;&#xA;    See to &#34;A FEW NOTES ON UNICODE AND PERL&#34; in JSON::XS.&#xA;&#xA;$JSON::UnMapping&#xA;    Disable. See to MAPPING.&#xA;&#xA;$JSON::SelfConvert&#xA;    This option was deleted. Instead of it, if a given blessed object&#xA;    has the &#34;TO_JSON&#34; method, &#34;TO_JSON&#34; will be executed with&#xA;    &#34;convert_blessed&#34;.&#xA;&#xA;      $json-&amp;gt;convert_blessed-&amp;gt;encode($blessed_hashref_or_arrayref)&#xA;      # if need, call allow_blessed&#xA;&#xA;    Note that it was &#34;toJson&#34; in old version, but now not &#34;toJson&#34; but&#xA;    &#34;TO_JSON&#34;.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;TODO example programs&lt;/p&gt; &#xA;&lt;p&gt;THREADS No test with JSON::PP. If with JSON::XS, See to &#34;THREADS&#34; in JSON::XS.&lt;/p&gt; &#xA;&lt;p&gt;BUGS Please report bugs relevant to &#34;JSON&#34; to &amp;lt;makamaka[at]cpan.org&amp;gt;.&lt;/p&gt; &#xA;&lt;p&gt;SEE ALSO Most of the document is copied and modified from JSON::XS doc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;JSON::XS, JSON::PP&#xA;&#xA;&#34;RFC4627&#34;(&amp;lt;http://www.ietf.org/rfc/rfc4627.txt&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;AUTHOR Makamaka Hannyaharamitu, &amp;lt;makamaka[at]cpan.org&amp;gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;JSON::XS was written by Marc Lehmann &amp;lt;schmorp[at]schmorp.de&amp;gt;&#xA;&#xA;The release of this new version owes to the courtesy of Marc Lehmann.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;COPYRIGHT AND LICENSE Copyright 2005-2013 by Makamaka Hannyaharamitu&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;This library is free software; you can redistribute it and/or modify it&#xA;under the same terms as Perl itself.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>