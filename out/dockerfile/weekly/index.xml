<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-05-29T02:08:06Z</updated>
  <subtitle>Weekly Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>aws-amplify/amplify-hosting</title>
    <updated>2022-05-29T02:08:06Z</updated>
    <id>tag:github.com,2022-05-29:/aws-amplify/amplify-hosting</id>
    <link href="https://github.com/aws-amplify/amplify-hosting" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AWS Amplify Hosting provides a Git-based workflow for deploying and hosting fullstack serverless web applications.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://aws.amazon.com/amplify/hosting/&#34;&gt; &lt;img alt=&#34;Amplify&#34; src=&#34;https://github.com/aws-amplify/community/raw/master/src/assets/images/logo-dark.png&#34; width=&#34;60&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; Amplify Hosting &lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/jWVbPfC&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/308323056592486420?logo=discord%22&#34; alt=&#34;DiscordChat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;AWS Amplify Hosting provides a Git-based workflow for deploying and hosting fullstack serverless web applications. This repository provides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://github.com/aws-amplify/amplify-hosting/raw/master/FAQ.md&#34;&gt;FAQ&lt;/a&gt; for common issues&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aws-amplify/amplify-hosting/raw/master/CHANGELOG.md&#34;&gt;Release history&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Tools and &lt;a href=&#34;https://github.com/aws-amplify/amplify-hosting/tree/master/images&#34;&gt;build images&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;RFCs for new feature launches&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aws-amplify/amplify-hosting/issues&#34;&gt;Issue tracking&lt;/a&gt; - we also maintain an &lt;a href=&#34;https://forums.aws.amazon.com/forum.jspa?forumID=314&#34;&gt;AWS Forum&lt;/a&gt; but use this GitHub repository as our primary issue tracker.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Report a bug 🐛or feature request 💡&lt;a href=&#34;https://github.com/aws-amplify/amplify-hosting/issues/new/choose&#34;&gt;here&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;Bookmarks&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://console.amplify.aws&#34;&gt;Connect your app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html&#34;&gt;Official documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/amplify/console/getting-started/&#34;&gt;Example projects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://amplify.aws/community/posts&#34;&gt;Community posts&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Other Amplify projects&lt;/h3&gt; &#xA;&lt;p&gt;Looking for one of our other projects?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aws-amplify/amplify-adminui&#34;&gt;Amplify Admin UI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aws-amplify/amplify-js/issues&#34;&gt;Amplify JS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aws-amplify/amplify-ios/issues&#34;&gt;Amplify iOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aws-amplify/amplify-android/issues&#34;&gt;Amplify Android&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aws-amplify/amplify-cli/issues&#34;&gt;Amplify CLI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://amplify.aws/community&#34;&gt;Amplify Community&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>kelseyhightower/nocode</title>
    <updated>2022-05-29T02:08:06Z</updated>
    <id>tag:github.com,2022-05-29:/kelseyhightower/nocode</id>
    <link href="https://github.com/kelseyhightower/nocode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The best way to write secure and reliable applications. Write nothing; deploy nowhere.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;No Code&lt;/h1&gt; &#xA;&lt;p&gt;No code is the best way to write secure and reliable applications. Write nothing; deploy nowhere.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Start by not writing any code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is just an example application, but imagine it doing anything you want. Adding new features is easy too:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The possibilities are endless.&lt;/p&gt; &#xA;&lt;h3&gt;Building the Application&lt;/h3&gt; &#xA;&lt;p&gt;Now that you have not done anything it&#39;s time to build your application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Yep. That&#39;s it. You should see the following output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Deploying&lt;/h3&gt; &#xA;&lt;p&gt;While you still have not done anything it&#39;s time to deploy your application. By running the following command you can deploy your application absolutely nowhere.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s that simple. And when it comes time to scale the application, all you have to do is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;I know right?&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;You don&#39;t.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Gladtbam/ms365_e5_renewx</title>
    <updated>2022-05-29T02:08:06Z</updated>
    <id>tag:github.com,2022-05-29:/Gladtbam/ms365_e5_renewx</id>
    <link href="https://github.com/Gladtbam/ms365_e5_renewx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Microsoft365 E5 Renew X Docker 镜像&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;前言&lt;/h1&gt; &#xA;&lt;p&gt;本Docker基于&lt;a href=&#34;https://blog.csdn.net/qq_33212020?type=blog&#34;&gt;SundayRX&lt;/a&gt; &lt;a href=&#34;https://blog.csdn.net/qq_33212020/article/details/119747634&#34;&gt;E5 Renew X&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;链接&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gladtbam.top/posts/22256/&#34;&gt;Microsoft 365 E5 Renew X Docker 部署&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gladtbam.top/posts/37680/&#34;&gt;Microsoft 365 E5 Renew X 部署记录&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_33212020/article/details/119747634&#34;&gt;SundayRX博客&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/gladtbam/ms365_e5_renewx&#34;&gt;Docker Hub&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;支持版本&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;CPU架构&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;是否支持&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Linux/amd64 v3&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;是&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Linux/amd64 v2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;是&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Linux/amd64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;是&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Linux/arm64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;是&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Linux/arm v7&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;是&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;部署&lt;/h2&gt; &#xA;&lt;p&gt;拉取镜像&lt;br&gt; &lt;code&gt;docker pull gladtbam/ms365_e5_renewx:latest&lt;/code&gt;&lt;br&gt; 或者&lt;br&gt; &lt;code&gt;docker pull ghcr.io/gladtbam/ms365_e5_renewx:latest&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;使用默认配置部署&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -d \&#xA;    -p 1066:1066 \&#xA;    --name RnewX \&#xA;gladtbam/ms365_e5_renewx:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;自定义配置&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;下载&lt;a href=&#34;https://sundayrx.lanzoui.com/aW09Lsss75g&#34;&gt;E5 Renew X&lt;/a&gt; 的配置文件&lt;code&gt;Config.xml&lt;/code&gt;，按照Config.xml文件说明进行修改&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;启动容器&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -d \&#xA;    -p 1066:1066 \&#xA;    -v $PWD/Deploy:/renewx/Deploy \&#xA;    -v $PWD/appdata:/renewx/appdata \&#xA;    --name RnewX \&#xA;gladtbam/ms365_e5_renewx:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Deploy内放置Config.xml文件&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;自行构建&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Gladtbam/ms365_e5_renewx_docker&#34;&gt;Github下载Dockerfile&lt;/a&gt;文件&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build -f Dockerfile -t ms365_e5_renewx . --no-cache&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Nginx反向代理&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;location ~ / {&#xA;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;&#xA;        proxy_set_header Host $http_host;&#xA;        proxy_redirect off;&#xA;        proxy_pass https://127.0.0.1:1066;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>techno-tim/launchpad</title>
    <updated>2022-05-29T02:08:06Z</updated>
    <id>tag:github.com,2022-05-29:/techno-tim/launchpad</id>
    <link href="https://github.com/techno-tim/launchpad" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A collection of quick starters for ansible, kubernetes, docker, linux, windows, and more. Great for HomeLabs!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;launchpad 🚀&lt;/h1&gt; &#xA;&lt;h2&gt;Info&lt;/h2&gt; &#xA;&lt;p&gt;A collection of quick starters for ansible, kubernetes, docker, linux, windows, and more. Great for HomeLabs, learning, and automation!&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t forget to ⭐ this repo and fork it too! 👆&lt;/p&gt; &#xA;&lt;p&gt;See each folder for details 📁&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Created by &lt;a href=&#34;https://technotim.live&#34;&gt;TechnoTim&lt;/a&gt; and updated by the community with 💛&lt;/p&gt; &#xA;&lt;p&gt;► YouTube &lt;a href=&#34;https://www.youtube.com/technotimlive&#34;&gt;https://www.youtube.com/technotimlive&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;► Twitch &lt;a href=&#34;https://www.twitch.tv/TechnoTim&#34;&gt;https://www.twitch.tv/TechnoTim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;► Twitter &lt;a href=&#34;https://twitter.com/TechnoTimLive&#34;&gt;https://twitter.com/TechnoTimLive&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;► Discord &lt;a href=&#34;https://l.technotim.live/discord&#34;&gt;https://l.technotim.live/discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;► GitHub &lt;a href=&#34;https://github.com/timothystewart6&#34;&gt;https://github.com/timothystewart6&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hongyonghan/Docker_Microsoft365_E5_Renew_X</title>
    <updated>2022-05-29T02:08:06Z</updated>
    <id>tag:github.com,2022-05-29:/hongyonghan/Docker_Microsoft365_E5_Renew_X</id>
    <link href="https://github.com/hongyonghan/Docker_Microsoft365_E5_Renew_X" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Docker版本的E5调用API续订服务：Microsoft 365 E5 Renew X&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;制作不易，欢迎Star!!!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;切记不要浪费公共资源，如果不需要或者不使用，请一定不要搭建该服务！请一定要做好资料备份工作！&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;本文是基于作者SundayRX提出的E5 调用API续订服务：Microsoft 365 E5 Renew X的基础上提出的Docker版本的E5调用API续订服务。&lt;/p&gt; &#xA;&lt;p&gt;基础的账号注册等过程见SundayRX的博客：&lt;a href=&#34;https://blog.csdn.net/qq_33212020/article/details/119747634&#34;&gt;https://blog.csdn.net/qq_33212020/article/details/119747634&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;本文主要是让小白轻松部署自己的E5续订服务。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;镜像小，仅仅225M，可以轻松部署在任何配置的服务器上，占用资源小&lt;/li&gt; &#xA; &lt;li&gt;部署方便，仅仅使用一行命令即可完成部署。&lt;/li&gt; &#xA; &lt;li&gt;等等。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;你需要有：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;有Docker的环境，了解Docker的基本命令（没有也没有关系，可以很快学会）。&lt;/li&gt; &#xA; &lt;li&gt;有一个服务器/群晖NAS等。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;一些Docker环境安装的教程：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docker环境搭建：&lt;a href=&#34;https://www.jianshu.com/p/996e08b7976d&#34;&gt;https://www.jianshu.com/p/996e08b7976d&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;史上最全Docker环境安装指南：&lt;a href=&#34;https://zhuanlan.zhihu.com/p/82269806&#34;&gt;https://zhuanlan.zhihu.com/p/82269806&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;为了使得容器更加稳定且好用（小白专用），latest版本中添加了vim等软件，并且更换了基础镜像，会有点大。如果介意，请使用slim版本&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull hanhongyong/ms365-e5-renew-x:slim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;下面部署命令时版本也改为slim版本即可。slim版本仅为225M。 建议使用latest版本，这个版本持续修改完善下去，slim版本仅为资源受限的主机使用。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;部署步骤&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;安装Docker环境后，下载MS365 E5 Renew X镜像。&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hongyonghan/Docker_Microsoft365_E5_Renew_X/main/README.assets/image-20220211202818966.png&#34; alt=&#34;image-20220211202818966&#34;&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;docker pull hanhongyong/ms365-e5-renew-x:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;运行MS365 E5 Renew X镜像，得到容器。&lt;/p&gt; &lt;pre&gt;&lt;code&gt;docker run -d -p 1066:1066 -e TZ=Asia/Shanghai --name ms365  hanhongyong/ms365-e5-renew-x:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;默认管理员密码为：123456&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;进入容器内部，修改登录密码。 进入容器命令：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;docker exec -it ms365 /bin/bash&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;进入Deploy文件夹：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cd Deploy&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;修改密码：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;vim Config.xml&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;键盘敲入i键，移动上下左右光标，将123456修改为你想修改的密码。键盘敲入esc键，退出编辑模式，输入:wq!键退出编辑模式。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;服务访问：输入ip:1066.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hongyonghan/Docker_Microsoft365_E5_Renew_X/main/README.assets/image-20220211205438949.png&#34; alt=&#34;image-20220211205438949&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;以上就完成了部署。&lt;/p&gt; &lt;p&gt;&lt;strong&gt;定制版&lt;/strong&gt;（定制版为高级操作，主要是为了高级用户分享自己的站点给别人、方便迁移等操作。小白无需使用。）：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;docker run -d -p 1066:1066 -v /root/Docker_Microsoft365_E5_Renew_X/Microsoft365_E5_Renew_X/Deploy:/app/Deploy  hanhongyong/ms365-e5-renew-x:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;其中-p为暴露服务器的端口（前面的1066，可以自行修改）和暴露容器的端口（后面的1066，可以自行修改，这个端口是在Config.xml中指定的开放的端口）；-v为数据卷的挂载，前面的Deploy指的是服务器中的Deploy文件夹（可以修改，但是必须是绝对路径），/app/Deploy指的是容器内的文件夹（不能修改）；--name为容器的名字。&lt;/p&gt; &#xA;&lt;p&gt;备份和迁移：&lt;/p&gt; &#xA;&lt;p&gt;所有的配置文件都放在/app文件路径下，如果您以后有迁移的需要可以用命令将容器中/app路径下的文件复制出来。或者在一开始的时候就可以挂载数据卷到您的之前的全部文件中。如：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -d -p 1066:1066 -v /root/Docker_Microsoft365_E5_Renew_X/Microsoft365_E5_Renew_X/:/app/ hanhongyong/ms365-e5-renew-x:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如此便可以实现您所要求的配置文件备份的功能，且您的容器中的文件和服务器主机中文件是一样的。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;ARM64版本镜像&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull hanhongyong/ms365-e5-renew-x:arm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -d -p 1066:1066 -e TZ=Asia/Shanghai --name ms365  hanhongyong/ms365-e5-renew-x:arm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Serverless部署&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;没有服务器的同学们，可以使用koyeb进行部署。点击下面按钮一键部署:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://app.koyeb.com/deploy?type=docker&amp;amp;image=docker.io/hanhongyong/ms365-e5-renew-x&amp;amp;name=web-renew&amp;amp;ports=1066;http;/&#34;&gt;&lt;img src=&#34;https://www.koyeb.com/static/images/deploy/button.svg?sanitize=true&#34; alt=&#34;Deploy to Koyeb&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;koyeb部署:感谢&lt;a href=&#34;https://github.com/hongyonghan/Docker_Microsoft365_E5_Renew_X/issues/5&#34;&gt;gd1214b&lt;/a&gt;提出的解决方案。 具体见文件: &lt;a href=&#34;https://raw.githubusercontent.com/hongyonghan/Docker_Microsoft365_E5_Renew_X/main/ReadMe_Serverless.md&#34;&gt;ReadMe_Serverless.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;注意：类似于heroku和koyeb等云容器平台，都会有重启实例的现象，不过heroku是每天强制重启，koyeb是隔几天重启一次。每次重启都会丢失实例在部署后的所有更改，造成数据丢失。请大家注意。感谢&lt;a href=&#34;https://github.com/hongyonghan/Docker_Microsoft365_E5_Renew_X/issues/15&#34;&gt;ChirmyRam&lt;/a&gt;给出的提醒。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;开发相关的命令（与部署无关）：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;##构建镜像&#xA;docker build -t ms365-e5-renew-x .&#xA;docker tag ms365-e5-renew-x:latest hanhongyong/ms365-e5-renew-x:latest&#xA;&#xA;#上传镜像&#xA;docker push hanhongyong/ms365-e5-renew-x:latest&#xA;#登录dockerhub&#xA;docker login&#xA;#使用buildx编译arm架构的镜像&#xA;docker buildx build --push --tag hanhongyong/ms365-e5-renew-x:arm --platform linux/arm64/v8 -f Dockerfile_arm .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;制作不易，欢迎Star!!!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;GitHub:&lt;a href=&#34;https://github.com/hongyonghan/Docker_Microsoft365_E5_Renew_X&#34;&gt;https://github.com/hongyonghan/Docker_Microsoft365_E5_Renew_X&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Dockerhub:&lt;a href=&#34;https://hub.docker.com/r/hanhongyong/ms365-e5-renew-x&#34;&gt;https://hub.docker.com/r/hanhongyong/ms365-e5-renew-x&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;CSDN:&lt;a href=&#34;https://blog.csdn.net/qq_40605167/article/details/122888580&#34;&gt;https://blog.csdn.net/qq_40605167/article/details/122888580&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jenkinsci/docker</title>
    <updated>2022-05-29T02:08:06Z</updated>
    <id>tag:github.com,2022-05-29:/jenkinsci/docker</id>
    <link href="https://github.com/jenkinsci/docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Docker official jenkins repo&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Official Jenkins Docker image&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/jenkins/jenkins/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/stars/jenkins/jenkins.svg?sanitize=true&#34; alt=&#34;Docker Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/jenkins/jenkins/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/jenkins/jenkins.svg?sanitize=true&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/jenkinsci/docker?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/jenkinsci/docker.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/jenkinsci/docker&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Jenkins Continuous Integration and Delivery server &lt;a href=&#34;https://hub.docker.com/r/jenkins/jenkins&#34;&gt;available on Docker Hub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is a fully functional Jenkins server. &lt;a href=&#34;https://jenkins.io/&#34;&gt;https://jenkins.io/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;img src=&#34;https://jenkins.io/sites/default/files/jenkins_logo.png&#34;&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -p 8080:8080 -p 50000:50000 --restart=on-failure jenkins/jenkins:lts-jdk11&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE: read the section &lt;a href=&#34;https://raw.githubusercontent.com/jenkinsci/docker/master/#connecting-agents&#34;&gt;&lt;em&gt;Connecting agents&lt;/em&gt;&lt;/a&gt; below for the role of the &lt;code&gt;50000&lt;/code&gt; port mapping.&lt;/p&gt; &#xA;&lt;p&gt;This will store the workspace in &lt;code&gt;/var/jenkins_home&lt;/code&gt;. All Jenkins data lives in there - including plugins and configuration. You will probably want to make that an explicit volume so you can manage it and attach to another container for upgrades :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -p 8080:8080 -p 50000:50000 --restart=on-failure -v jenkins_home:/var/jenkins_home jenkins/jenkins:lts-jdk11&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will automatically create a &#39;jenkins_home&#39; &lt;a href=&#34;https://docs.docker.com/storage/volumes/&#34;&gt;docker volume&lt;/a&gt; on the host machine. Docker volumes retain their content even when the container is stopped, started, or deleted.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: Avoid using a &lt;a href=&#34;https://docs.docker.com/storage/bind-mounts/&#34;&gt;bind mount&lt;/a&gt; from a folder on the host machine into &lt;code&gt;/var/jenkins_home&lt;/code&gt;, as this might result in file permission issues (the user used inside the container might not have rights to the folder on the host machine). If you &lt;em&gt;really&lt;/em&gt; need to bind mount jenkins_home, ensure that the directory on the host is accessible by the jenkins user inside the container (jenkins user - uid 1000) or use &lt;code&gt;-u some_other_user&lt;/code&gt; parameter with &lt;code&gt;docker run&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -d -v jenkins_home:/var/jenkins_home -p 8080:8080 -p 50000:50000 --restart=on-failure jenkins/jenkins:lts-jdk11&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;this will run Jenkins in detached mode with port forwarding and volume added. You can access logs with command &#39;docker logs CONTAINER_ID&#39; in order to check first login token. ID of container will be returned from output of command above.&lt;/p&gt; &#xA;&lt;h2&gt;Backing up data&lt;/h2&gt; &#xA;&lt;p&gt;If you bind mount in a volume - you can simply back up that directory (which is jenkins_home) at any time.&lt;/p&gt; &#xA;&lt;p&gt;This is highly recommended. Treat the jenkins_home directory as you would a database - in Docker you would generally put a database on a volume.&lt;/p&gt; &#xA;&lt;p&gt;If your volume is inside a container - you can use &lt;code&gt;docker cp $ID:/var/jenkins_home&lt;/code&gt; command to extract the data, or other options to find where the volume data is. Note that some symlinks on some OSes may be converted to copies (this can confuse jenkins with lastStableBuild links etc)&lt;/p&gt; &#xA;&lt;p&gt;For more info check Docker docs section on &lt;a href=&#34;https://docs.docker.com/storage/volumes/&#34;&gt;Use volumes&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Setting the number of executors&lt;/h1&gt; &#xA;&lt;p&gt;You can define the number of executors on the Jenkins built-in node using a groovy script. By default it is set to 2 executors, but you can extend the image and change it to your desired number of executors (recommended 0 executors on the built-in node) :&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;executors.groovy&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import jenkins.model.*&#xA;Jenkins.instance.setNumExecutors(0) // Recommended to not run builds on the built-in node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and &lt;code&gt;Dockerfile&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;FROM jenkins/jenkins:lts&#xA;COPY --chown=jenkins:jenkins executors.groovy /usr/share/jenkins/ref/init.groovy.d/executors.groovy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Connecting agents&lt;/h1&gt; &#xA;&lt;p&gt;You can run builds on the controller out of the box. The Jenkins project recommends that no executors be enabled on the controller.&lt;/p&gt; &#xA;&lt;p&gt;In order to connect agents &lt;strong&gt;through an inbound TCP connection&lt;/strong&gt;, map the port: &lt;code&gt;-p 50000:50000&lt;/code&gt;. That port will be used when you connect agents to the controller.&lt;/p&gt; &#xA;&lt;p&gt;If you are only using &lt;a href=&#34;https://plugins.jenkins.io/ssh-slaves/&#34;&gt;SSH (outbound) build agents&lt;/a&gt;, this port is not required, as connections are established from the controller. If you connect agents using web sockets (since Jenkins 2.217), the TCP agent port is not used either.&lt;/p&gt; &#xA;&lt;h1&gt;Passing JVM parameters&lt;/h1&gt; &#xA;&lt;p&gt;You might need to customize the JVM running Jenkins, typically to adjust &lt;a href=&#34;https://www.jenkins.io/doc/book/managing/system-properties/&#34;&gt;system properties&lt;/a&gt; or tweak heap memory settings. Use the &lt;code&gt;JAVA_OPTS&lt;/code&gt; or &lt;code&gt;JENKINS_JAVA_OPTS&lt;/code&gt; environment variables for this purpose :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --name myjenkins -p 8080:8080 -p 50000:50000 --restart=on-failure --env JAVA_OPTS=-Dhudson.footerURL=http://mycompany.com jenkins/jenkins:lts-jdk11&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;JVM options specifically for the Jenkins controller should be set through &lt;code&gt;JENKINS_JAVA_OPTS&lt;/code&gt;, as other tools might also respond to the &lt;code&gt;JAVA_OPTS&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;h1&gt;Configuring logging&lt;/h1&gt; &#xA;&lt;p&gt;Jenkins logging can be configured through a properties file and &lt;code&gt;java.util.logging.config.file&lt;/code&gt; Java property. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir data&#xA;cat &amp;gt; data/log.properties &amp;lt;&amp;lt;EOF&#xA;handlers=java.util.logging.ConsoleHandler&#xA;jenkins.level=FINEST&#xA;java.util.logging.ConsoleHandler.level=FINEST&#xA;EOF&#xA;docker run --name myjenkins -p 8080:8080 -p 50000:50000 --restart=on-failure --env JAVA_OPTS=&#34;-Djava.util.logging.config.file=/var/jenkins_home/log.properties&#34; -v `pwd`/data:/var/jenkins_home jenkins/jenkins:lts-jdk11&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Configuring reverse proxy&lt;/h1&gt; &#xA;&lt;p&gt;If you want to install Jenkins behind a reverse proxy with a prefix, example: mysite.com/jenkins, you need to add environment variable &lt;code&gt;JENKINS_OPTS=&#34;--prefix=/jenkins&#34;&lt;/code&gt; and then follow the below procedures to configure your reverse proxy, which will depend if you have Apache or Nginx:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jenkins.io/doc/book/system-administration/reverse-proxy-configuration-apache/&#34;&gt;Apache&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jenkins.io/doc/book/system-administration/reverse-proxy-configuration-nginx/&#34;&gt;Nginx&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Passing Jenkins launcher parameters&lt;/h1&gt; &#xA;&lt;p&gt;Arguments you pass to docker running the Jenkins image are passed to jenkins launcher, so for example you can run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run jenkins/jenkins:lts-jdk11 --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will show the Jenkins version, the same as when you run Jenkins from an executable war.&lt;/p&gt; &#xA;&lt;p&gt;You can also define Jenkins arguments via &lt;code&gt;JENKINS_OPTS&lt;/code&gt;. This is useful for customizing arguments to the jenkins launcher in a derived Jenkins image. The following sample Dockerfile uses this option to force use of HTTPS with a certificate included in the image.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;FROM jenkins/jenkins:lts-jdk11&#xA;&#xA;COPY --chown=jenkins:jenkins https.pem /var/lib/jenkins/cert&#xA;COPY --chown=jenkins:jenkins https.key /var/lib/jenkins/pk&#xA;ENV JENKINS_OPTS --httpPort=-1 --httpsPort=8083 --httpsCertificate=/var/lib/jenkins/cert --httpsPrivateKey=/var/lib/jenkins/pk&#xA;EXPOSE 8083&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also change the default agent port for Jenkins by defining &lt;code&gt;JENKINS_SLAVE_AGENT_PORT&lt;/code&gt; in a sample Dockerfile.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;FROM jenkins/jenkins:lts-jdk11&#xA;ENV JENKINS_SLAVE_AGENT_PORT 50001&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or as a parameter to docker,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --name myjenkins -p 8080:8080 -p 50001:50001 --restart=on-failure --env JENKINS_SLAVE_AGENT_PORT=50001 jenkins/jenkins:lts-jdk11&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This environment variable will be used to set the &lt;a href=&#34;https://www.jenkins.io/doc/book/managing/system-properties/&#34;&gt;system property&lt;/a&gt; &lt;code&gt;jenkins.model.Jenkins.slaveAgentPort&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If this property is already set in &lt;strong&gt;JAVA_OPTS&lt;/strong&gt; or &lt;strong&gt;JENKINS_JAVA_OPTS&lt;/strong&gt;, then the value of &lt;code&gt;JENKINS_SLAVE_AGENT_PORT&lt;/code&gt; will be ignored.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Installing more tools&lt;/h1&gt; &#xA;&lt;p&gt;You can run your container as root - and install via apt-get, install as part of build steps via jenkins tool installers, or you can create your own Dockerfile to customise, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;FROM jenkins/jenkins:lts-jdk11&#xA;# if we want to install via apt&#xA;USER root&#xA;RUN apt-get update &amp;amp;&amp;amp; apt-get install -y ruby make more-thing-here&#xA;# drop back to the regular jenkins user - good practice&#xA;USER jenkins&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In such a derived image, you can customize your jenkins instance with hook scripts or additional plugins. For this purpose, use &lt;code&gt;/usr/share/jenkins/ref&lt;/code&gt; as a place to define the default JENKINS_HOME content you wish the target installation to look like :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;FROM jenkins/jenkins:lts-jdk11&#xA;COPY --chown=jenkins:jenkins custom.groovy /usr/share/jenkins/ref/init.groovy.d/custom.groovy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Preinstalling plugins&lt;/h2&gt; &#xA;&lt;h3&gt;Install plugins script&lt;/h3&gt; &#xA;&lt;p&gt;You can rely on the plugin manager CLI to pass a set of plugins to download with their dependencies. This tool will perform downloads from update centers, and internet access is required for the default update centers.&lt;/p&gt; &#xA;&lt;h3&gt;Setting update centers&lt;/h3&gt; &#xA;&lt;p&gt;During the download, the script will use update centers defined by the following environment variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;JENKINS_UC&lt;/code&gt; - Main update center. This update center may offer plugin versions depending on the Jenkins LTS Core versions. Default value: &lt;a href=&#34;https://updates.jenkins.io&#34;&gt;https://updates.jenkins.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;JENKINS_UC_EXPERIMENTAL&lt;/code&gt; - &lt;a href=&#34;https://jenkins.io/blog/2013/09/23/experimental-plugins-update-center/&#34;&gt;Experimental Update Center&lt;/a&gt;. This center offers Alpha and Beta versions of plugins. Default value: &lt;a href=&#34;https://updates.jenkins.io/experimental&#34;&gt;https://updates.jenkins.io/experimental&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;JENKINS_INCREMENTALS_REPO_MIRROR&lt;/code&gt; - Defines Maven mirror to be used to download plugins from the &lt;a href=&#34;https://jenkins.io/blog/2018/05/15/incremental-deployment/&#34;&gt;Incrementals repo&lt;/a&gt;. Default value: &lt;a href=&#34;https://repo.jenkins-ci.org/incrementals&#34;&gt;https://repo.jenkins-ci.org/incrementals&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;JENKINS_UC_DOWNLOAD&lt;/code&gt; - Download url of the Update Center. Default value: &lt;code&gt;$JENKINS_UC/download&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is possible to override the environment variables in images.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;❗&lt;/span&gt; Note that changing update center variables &lt;strong&gt;will not&lt;/strong&gt; change the Update Center being used by Jenkins runtime.&lt;/p&gt; &#xA;&lt;h3&gt;Installing Custom Plugins&lt;/h3&gt; &#xA;&lt;p&gt;Installing prebuilt, custom plugins can be accomplished by copying the plugin HPI file into &lt;code&gt;/usr/share/jenkins/ref/plugins/&lt;/code&gt; within the &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;COPY --chown=jenkins:jenkins path/to/custom.hpi /usr/share/jenkins/ref/plugins/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;You can run the CLI manually in Dockerfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM jenkins/jenkins:lts-jdk11&#xA;RUN jenkins-plugin-cli --plugins pipeline-model-definition github-branch-source:1.8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Furthermore it is possible to pass a file that contains this set of plugins (with or without line breaks).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM jenkins/jenkins:lts-jdk11&#xA;COPY --chown=jenkins:jenkins plugins.txt /usr/share/jenkins/ref/plugins.txt&#xA;RUN jenkins-plugin-cli -f /usr/share/jenkins/ref/plugins.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When jenkins container starts, it will check &lt;code&gt;JENKINS_HOME&lt;/code&gt; has this reference content, and copy them there if required. It will not override such files, so if you upgraded some plugins from UI they won&#39;t be reverted on next start.&lt;/p&gt; &#xA;&lt;p&gt;In case you &lt;em&gt;do&lt;/em&gt; want to override, append &#39;.override&#39; to the name of the reference file. E.g. a file named &lt;code&gt;/usr/share/jenkins/ref/config.xml.override&lt;/code&gt; will overwrite an existing &lt;code&gt;config.xml&lt;/code&gt; file in JENKINS_HOME.&lt;/p&gt; &#xA;&lt;p&gt;Also see &lt;a href=&#34;https://issues.jenkins.io/browse/JENKINS-24986&#34;&gt;JENKINS-24986&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here is an example to get the list of plugins from an existing server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;JENKINS_HOST=username:password@myhost.com:port&#xA;curl -sSL &#34;http://$JENKINS_HOST/pluginManager/api/xml?depth=1&amp;amp;xpath=/*/*/shortName|/*/*/version&amp;amp;wrapper=plugins&#34; | perl -pe &#39;s/.*?&amp;lt;shortName&amp;gt;([\w-]+).*?&amp;lt;version&amp;gt;([^&amp;lt;]+)()(&amp;lt;\/\w+&amp;gt;)+/\1 \2\n/g&#39;|sed &#39;s/ /:/&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example Output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cucumber-testresult-plugin:0.8.2&#xA;pam-auth:1.1&#xA;matrix-project:1.4.1&#xA;script-security:1.13&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For 2.x-derived images, you may also want to&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;RUN echo 2.0 &amp;gt; /usr/share/jenkins/ref/jenkins.install.UpgradeWizard.state&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to indicate that this Jenkins installation is fully configured. Otherwise a banner will appear prompting the user to install additional plugins, which may be inappropriate.&lt;/p&gt; &#xA;&lt;h3&gt;Updating plugins file&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/jenkinsci/plugin-installation-manager-tool&#34;&gt;plugin-installation-manager-tool&lt;/a&gt; supports updating the plugin file for you.&lt;/p&gt; &#xA;&lt;p&gt;Example command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-command&#34;&gt;JENKINS_IMAGE=jenkins/jenkins:lts-jdk11&#xA;docker run -it ${JENKINS_IMAGE} bash -c &#34;stty -onlcr &amp;amp;&amp;amp; jenkins-plugin-cli -f /usr/share/jenkins/ref/plugins.txt --available-updates --output txt&#34; &amp;gt;  plugins2.txt&#xA;mv plugins2.txt plugins.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Upgrading&lt;/h2&gt; &#xA;&lt;p&gt;All the data needed is in the /var/jenkins_home directory - so depending on how you manage that - depends on how you upgrade. Generally - you can copy it out - and then &#34;docker pull&#34; the image again - and you will have the latest LTS - you can then start up with -v pointing to that data (/var/jenkins_home) and everything will be as you left it.&lt;/p&gt; &#xA;&lt;p&gt;As always - please ensure that you know how to drive docker - especially volume handling!&lt;/p&gt; &#xA;&lt;h3&gt;Upgrading plugins&lt;/h3&gt; &#xA;&lt;p&gt;By default, plugins will be upgraded if they haven&#39;t been upgraded manually and if the version from the docker image is newer than the version in the container. Versions installed by the docker image are tracked through a marker file.&lt;/p&gt; &#xA;&lt;p&gt;To force upgrades of plugins that have been manually upgraded, run the docker image with &lt;code&gt;-e PLUGINS_FORCE_UPGRADE=true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The default behaviour when upgrading from a docker image that didn&#39;t write marker files is to leave existing plugins in place. If you want to upgrade existing plugins without marker you may run the docker image with &lt;code&gt;-e TRY_UPGRADE_IF_NO_MARKER=true&lt;/code&gt;. Then plugins will be upgraded if the version provided by the docker image is newer.&lt;/p&gt; &#xA;&lt;h3&gt;Hacking&lt;/h3&gt; &#xA;&lt;p&gt;If you wish to contribute fixes to this repository, please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/jenkinsci/docker/master/HACKING.adoc&#34;&gt;dedicated documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Questions?&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;re on Gitter, &lt;a href=&#34;https://gitter.im/jenkinsci/docker&#34;&gt;https://gitter.im/jenkinsci/docker&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>yankils/Simple-DevOps-Project</title>
    <updated>2022-05-29T02:08:06Z</updated>
    <id>tag:github.com,2022-05-29:/yankils/Simple-DevOps-Project</id>
    <link href="https://github.com/yankils/Simple-DevOps-Project" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Simple DevOps Project&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.udemy.com/course/valaxy-devops/?referralCode=8147A5CF4C8C7D9E253F&#34;&gt;&lt;img src=&#34;https://github.com/yankils/Simple-DevOps-Project/raw/master/Devops_course.PNG&#34; alt=&#34;Image&#34; title=&#34;DevOps Project - CI/CD with Jenkins Ansible Docker Kubernetes &#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This Repository is a collection of Implementation documents.&lt;/p&gt; &#xA;&lt;h3&gt;Purpose:&lt;/h3&gt; &#xA;&lt;p&gt;By following this repository you can able to setup a DevOps CI/CD Pipeline using&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;git&lt;/li&gt; &#xA; &lt;li&gt;Jenkins&lt;/li&gt; &#xA; &lt;li&gt;Maven&lt;/li&gt; &#xA; &lt;li&gt;Ansible&lt;/li&gt; &#xA; &lt;li&gt;Docker &amp;amp;&lt;/li&gt; &#xA; &lt;li&gt;Kubernetes&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/vscode-remote-try-node</title>
    <updated>2022-05-29T02:08:06Z</updated>
    <id>tag:github.com,2022-05-29:/microsoft/vscode-remote-try-node</id>
    <link href="https://github.com/microsoft/vscode-remote-try-node" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Node.js sample project for trying out the VS Code Remote - Containers extension&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Try Out Development Containers: Node.js&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/microsoft/vscode-remote-try-node&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Remote%20-%20Containers&amp;amp;message=Open&amp;amp;color=blue&amp;amp;logo=visualstudiocode&#34; alt=&#34;Open in Remote - Containers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A &lt;strong&gt;development container&lt;/strong&gt; is a running &lt;a href=&#34;https://www.docker.com&#34;&gt;Docker&lt;/a&gt; container with a well-defined tool/runtime stack and its prerequisites. You can try out development containers with &lt;strong&gt;&lt;a href=&#34;https://github.com/features/codespaces&#34;&gt;GitHub Codespaces&lt;/a&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;a href=&#34;https://aka.ms/vscode-remote/containers&#34;&gt;Visual Studio Code Remote - Containers&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is a sample project that lets you try out either option in a few easy steps. We have a variety of other &lt;a href=&#34;https://github.com/search?q=org%3Amicrosoft+vscode-remote-try-&amp;amp;type=Repositories&#34;&gt;vscode-remote-try-*&lt;/a&gt; sample projects, too.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you already have a Codespace or dev container, you can jump to the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/vscode-remote-try-node/main/#things-to-try&#34;&gt;Things to try&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Setting up the development container&lt;/h2&gt; &#xA;&lt;h3&gt;GitHub Codespaces&lt;/h3&gt; &#xA;&lt;p&gt;Follow these steps to open this sample in a Codespace:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Click the Code drop-down menu and select the &lt;strong&gt;Open with Codespaces&lt;/strong&gt; option.&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;strong&gt;+ New codespace&lt;/strong&gt; at the bottom on the pane.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For more info, check out the &lt;a href=&#34;https://docs.github.com/en/free-pro-team@latest/github/developing-online-with-codespaces/creating-a-codespace#creating-a-codespace&#34;&gt;GitHub documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;VS Code Remote - Containers&lt;/h3&gt; &#xA;&lt;p&gt;If you already have VS Code and Docker installed, you can click the badge above or &lt;a href=&#34;https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/microsoft/vscode-remote-try-node&#34;&gt;here&lt;/a&gt; to get started. Clicking these links will cause VS Code to automatically install the Remote - Containers extension if needed, clone the source code into a container volume, and spin up a dev container for use.&lt;/p&gt; &#xA;&lt;p&gt;Follow these steps to open this sample in a container using the VS Code Remote - Containers extension:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;If this is your first time using a development container, please ensure your system meets the pre-reqs (i.e. have Docker installed) in the &lt;a href=&#34;https://aka.ms/vscode-remote/containers/getting-started&#34;&gt;getting started steps&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To use this repository, you can either open the repository in an isolated Docker volume:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Press &lt;kbd&gt;F1&lt;/kbd&gt; and select the &lt;strong&gt;Remote-Containers: Try a Sample...&lt;/strong&gt; command.&lt;/li&gt; &#xA;   &lt;li&gt;Choose the &#34;Node&#34; sample, wait for the container to start, and try things out! &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Under the hood, this will use the &lt;strong&gt;Remote-Containers: Clone Repository in Container Volume...&lt;/strong&gt; command to clone the source code in a Docker volume instead of the local filesystem. &lt;a href=&#34;https://docs.docker.com/storage/volumes/&#34;&gt;Volumes&lt;/a&gt; are the preferred mechanism for persisting container data.&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;Or open a locally cloned copy of the code:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Clone this repository to your local filesystem.&lt;/li&gt; &#xA;   &lt;li&gt;Press &lt;kbd&gt;F1&lt;/kbd&gt; and select the &lt;strong&gt;Remote-Containers: Open Folder in Container...&lt;/strong&gt; command.&lt;/li&gt; &#xA;   &lt;li&gt;Select the cloned copy of this folder, wait for the container to start, and try things out!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Things to try&lt;/h2&gt; &#xA;&lt;p&gt;Once you have this sample opened, you&#39;ll be able to work with it like you would locally.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This container runs as a non-root user with sudo access by default. Comment out &lt;code&gt;&#34;remoteUser&#34;: &#34;node&#34;&lt;/code&gt; in &lt;code&gt;.devcontainer/devcontainer.json&lt;/code&gt; if you&#39;d prefer to run as root.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Some things to try:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Open &lt;code&gt;server.js&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Try adding some code and check out the language features.&lt;/li&gt; &#xA;   &lt;li&gt;Notice that &lt;code&gt;eslint&lt;/code&gt; and the &lt;code&gt;vscode-eslint&lt;/code&gt; extension are already installed in the container since the &lt;code&gt;.devcontainer/devcontainer.json&lt;/code&gt; lists &lt;code&gt;&#34;dbaeumer.vscode-eslint&#34;&lt;/code&gt; as an extension to install automatically when the container is created.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Terminal:&lt;/strong&gt; Press &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;`&lt;/kbd&gt; and type &lt;code&gt;uname&lt;/code&gt; and other Linux commands from the terminal window.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Build, Run, and Debug:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Open &lt;code&gt;server.js&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Add a breakpoint (e.g. on line 20).&lt;/li&gt; &#xA;   &lt;li&gt;Press &lt;kbd&gt;F5&lt;/kbd&gt; to launch the app in the container.&lt;/li&gt; &#xA;   &lt;li&gt;Once the breakpoint is hit, try hovering over variables, examining locals, and more.&lt;/li&gt; &#xA;   &lt;li&gt;Continue (&lt;kbd&gt;F5&lt;/kbd&gt;). You can connect to the server in the container by either: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Clicking on &lt;code&gt;Open in Browser&lt;/code&gt; in the notification telling you: &lt;code&gt;Your service running on port 3000 is available&lt;/code&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;Clicking the globe icon in the &#39;Ports&#39; view. The &#39;Ports&#39; view gives you an organized table of your forwarded ports, and you can access it with the command &lt;strong&gt;Ports: Focus on Ports View&lt;/strong&gt;.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Notice port 3000 in the &#39;Ports&#39; view is labeled &#34;Hello Remote World.&#34; In &lt;code&gt;devcontainer.json&lt;/code&gt;, you can set &lt;code&gt;&#34;portsAttributes&#34;&lt;/code&gt;, such as a label for your forwarded ports and the action to be taken when the port is autoforwarded. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;If we didn&#39;t know the port was 3000, we could&#39;ve used a regex instead of &#34;3000&#34; in the &lt;code&gt;&#34;portsAttributes&#34;&lt;/code&gt;, such as &#34;.+/server.js&#34;.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In Remote - Containers, you can access your app at &lt;code&gt;http://localhost:3000&lt;/code&gt; in a local browser. But in a browser-based Codespace, you must click the link from the notification or the &lt;code&gt;Ports&lt;/code&gt; view so that the service handles port forwarding in the browser and generates the correct URL.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Rebuild or update your container&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;You may want to make changes to your container, such as installing a different version of a software or forwarding a new port. You&#39;ll rebuild your container for your changes to take effect.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Open browser automatically:&lt;/strong&gt; As an example change, let&#39;s update the &lt;code&gt;portsAttributes&lt;/code&gt; in the &lt;code&gt;.devcontainer/devcontainer.json&lt;/code&gt; file to open a browser when our port is automatically forwarded.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Open the &lt;code&gt;.devcontainer/devcontainer.json&lt;/code&gt; file.&lt;/li&gt; &#xA;   &lt;li&gt;Modify the &lt;code&gt;&#34;onAutoForward&#34;&lt;/code&gt; attribute in your &lt;code&gt;portsAttributes&lt;/code&gt; from &lt;code&gt;&#34;notify&#34;&lt;/code&gt; to &lt;code&gt;&#34;openBrowser&#34;&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Press &lt;kbd&gt;F1&lt;/kbd&gt; and select the &lt;strong&gt;Remote-Containers: Rebuild Container&lt;/strong&gt; or &lt;strong&gt;Codespaces: Rebuild Container&lt;/strong&gt; command so the modifications are picked up.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.microsoft.com&#34;&gt;https://cla.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright © Microsoft Corporation All rights reserved.&lt;br&gt; Licensed under the MIT License. See LICENSE in the project root for license information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>linuxserver/docker-swag</title>
    <updated>2022-05-29T02:08:06Z</updated>
    <id>tag:github.com,2022-05-29:/linuxserver/docker-swag</id>
    <link href="https://github.com/linuxserver/docker-swag" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Nginx webserver and reverse proxy with php support and a built-in Certbot (Let&#39;s Encrypt) client. It also contains fail2ban for intrusion prevention.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://linuxserver.io&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/linuxserver_medium.png&#34; alt=&#34;linuxserver.io&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://blog.linuxserver.io&#34; title=&#34;all the things you can do with our containers including How-To guides, opinions and much more!&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=Blog&#34; alt=&#34;Blog&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/YWrKVTn&#34; title=&#34;realtime support / chat with the community and the team.&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/354974912613449730.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=Discord&amp;amp;logo=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discourse.linuxserver.io&#34; title=&#34;post on our community forum.&#34;&gt;&lt;img src=&#34;https://img.shields.io/discourse/https/discourse.linuxserver.io/topics.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;logo=discourse&#34; alt=&#34;Discourse&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://fleet.linuxserver.io&#34; title=&#34;an online web interface which displays all of our maintained images.&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=Fleet&#34; alt=&#34;Fleet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linuxserver&#34; title=&#34;view the source for all of our repositories.&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=GitHub&amp;amp;logo=github&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/linuxserver&#34; title=&#34;please consider helping us by either donating or contributing to our budget&#34;&gt;&lt;img src=&#34;https://img.shields.io/opencollective/all/linuxserver.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=Supporters&amp;amp;logo=open%20collective&#34; alt=&#34;Open Collective&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://linuxserver.io&#34;&gt;LinuxServer.io&lt;/a&gt; team brings you another container release featuring:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;regular and timely application updates&lt;/li&gt; &#xA; &lt;li&gt;easy user mappings (PGID, PUID)&lt;/li&gt; &#xA; &lt;li&gt;custom base image with s6 overlay&lt;/li&gt; &#xA; &lt;li&gt;weekly base OS updates with common layers across the entire LinuxServer.io ecosystem to minimise space usage, down time and bandwidth&lt;/li&gt; &#xA; &lt;li&gt;regular security updates&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Find us at:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.linuxserver.io&#34;&gt;Blog&lt;/a&gt; - all the things you can do with our containers including How-To guides, opinions and much more!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/YWrKVTn&#34;&gt;Discord&lt;/a&gt; - realtime support / chat with the community and the team.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discourse.linuxserver.io&#34;&gt;Discourse&lt;/a&gt; - post on our community forum.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fleet.linuxserver.io&#34;&gt;Fleet&lt;/a&gt; - an online web interface which displays all of our maintained images.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/linuxserver&#34;&gt;GitHub&lt;/a&gt; - view the source for all of our repositories.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://opencollective.com/linuxserver&#34;&gt;Open Collective&lt;/a&gt; - please consider helping us by either donating or contributing to our budget&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://github.com/linuxserver/docker-swag&#34;&gt;linuxserver/swag&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://scarf.sh/gateway/linuxserver-ci/docker/linuxserver%2Fswag&#34;&gt;&lt;img src=&#34;https://scarf.sh/installs-badge/linuxserver-ci/linuxserver%2Fswag?color=94398d&amp;amp;label-color=555555&amp;amp;logo-color=ffffff&amp;amp;style=for-the-badge&amp;amp;package-type=docker&#34; alt=&#34;Scarf.io pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linuxserver/docker-swag&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/linuxserver/docker-swag.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;logo=github&#34; alt=&#34;GitHub Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linuxserver/docker-swag/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/linuxserver/docker-swag.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;logo=github&#34; alt=&#34;GitHub Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linuxserver/docker-swag/packages&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=GitHub%20Package&amp;amp;logo=github&#34; alt=&#34;GitHub Package Repository&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitlab.com/linuxserver.io/docker-swag/container_registry&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=GitLab%20Registry&amp;amp;logo=gitlab&#34; alt=&#34;GitLab Container Registry&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://quay.io/repository/linuxserver.io/swag&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=Quay.io&#34; alt=&#34;Quay.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/linuxserver/swag&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/linuxserver/swag.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=pulls&amp;amp;logo=docker&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/linuxserver/swag&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/stars/linuxserver/swag.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=stars&amp;amp;logo=docker&#34; alt=&#34;Docker Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.linuxserver.io/job/Docker-Pipeline-Builders/job/docker-swag/job/master/&#34;&gt;&lt;img src=&#34;https://img.shields.io/jenkins/build?labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;jobUrl=https%3A%2F%2Fci.linuxserver.io%2Fjob%2FDocker-Pipeline-Builders%2Fjob%2Fdocker-swag%2Fjob%2Fmaster%2F&amp;amp;logo=jenkins&#34; alt=&#34;Jenkins Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci-tests.linuxserver.io/linuxserver/swag/latest/index.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/yaml?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=CI&amp;amp;query=CI&amp;amp;url=https%3A%2F%2Fci-tests.linuxserver.io%2Flinuxserver%2Fswag%2Flatest%2Fci-status.yml&#34; alt=&#34;LSIO CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;SWAG - Secure Web Application Gateway (formerly known as letsencrypt, no relation to Let&#39;s Encrypt™) sets up an Nginx webserver and reverse proxy with php support and a built-in certbot client that automates free SSL server certificate generation and renewal processes (Let&#39;s Encrypt and ZeroSSL). It also contains fail2ban for intrusion prevention.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://linuxserver.io&#34;&gt;&lt;img src=&#34;https://github.com/linuxserver/docker-templates/raw/master/linuxserver.io/img/swag.gif&#34; alt=&#34;swag&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supported Architectures&lt;/h2&gt; &#xA;&lt;p&gt;We utilise the docker manifest for multi-platform awareness. More information is available from docker &lt;a href=&#34;https://github.com/docker/distribution/raw/master/docs/spec/manifest-v2-2.md#manifest-list&#34;&gt;here&lt;/a&gt; and our announcement &lt;a href=&#34;https://blog.linuxserver.io/2019/02/21/the-lsio-pipeline-project/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Simply pulling &lt;code&gt;lscr.io/linuxserver/swag:latest&lt;/code&gt; should retrieve the correct image for your arch, but you can also pull specific arch images via tags.&lt;/p&gt; &#xA;&lt;p&gt;The architectures supported by this image are:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Architecture&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Available&lt;/th&gt; &#xA;   &lt;th&gt;Tag&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;x86-64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;amd64-&amp;lt;version tag&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;arm64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;arm64v8-&amp;lt;version tag&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;armhf&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;arm32v7-&amp;lt;version tag&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Application Setup&lt;/h2&gt; &#xA;&lt;h3&gt;Validation and initial setup&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Before running this container, make sure that the url and subdomains are properly forwarded to this container&#39;s host, and that port 443 (and/or 80) is not being used by another service on the host (NAS gui, another webserver, etc.).&lt;/li&gt; &#xA; &lt;li&gt;For &lt;code&gt;http&lt;/code&gt; validation, port 80 on the internet side of the router should be forwarded to this container&#39;s port 80&lt;/li&gt; &#xA; &lt;li&gt;For &lt;code&gt;dns&lt;/code&gt; validation, make sure to enter your credentials into the corresponding ini (or json for some plugins) file under &lt;code&gt;/config/dns-conf&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Cloudflare provides free accounts for managing dns and is very easy to use with this image. Make sure that it is set up for &#34;dns only&#34; instead of &#34;dns + proxy&#34;&lt;/li&gt; &#xA;   &lt;li&gt;Google dns plugin is meant to be used with &#34;Google Cloud DNS&#34;, a paid enterprise product, and not for &#34;Google Domains DNS&#34;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;For &lt;code&gt;duckdns&lt;/code&gt; validation, either leave the &lt;code&gt;SUBDOMAINS&lt;/code&gt; variable empty or set it to &lt;code&gt;wildcard&lt;/code&gt;, and set the &lt;code&gt;DUCKDNSTOKEN&lt;/code&gt; variable with your duckdns token. Due to a limitation of duckdns, the resulting cert will only cover either main subdomain (ie. &lt;code&gt;yoursubdomain.duckdns.org&lt;/code&gt;), or sub-subdomains (ie. &lt;code&gt;*.yoursubdomain.duckdns.org&lt;/code&gt;), but will not both at the same time. You can use our &lt;a href=&#34;https://hub.docker.com/r/linuxserver/duckdns/&#34;&gt;duckdns image&lt;/a&gt; to update your IP on duckdns.org.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--cap-add=NET_ADMIN&lt;/code&gt; is required for fail2ban to modify iptables&lt;/li&gt; &#xA; &lt;li&gt;If you need a dynamic dns provider, you can use the free provider duckdns.org where the &lt;code&gt;URL&lt;/code&gt; will be &lt;code&gt;yoursubdomain.duckdns.org&lt;/code&gt; and the &lt;code&gt;SUBDOMAINS&lt;/code&gt; can be &lt;code&gt;www,ftp,cloud&lt;/code&gt; with http validation, or &lt;code&gt;wildcard&lt;/code&gt; with dns validation.&lt;/li&gt; &#xA; &lt;li&gt;After setup, navigate to &lt;code&gt;https://yourdomain.url&lt;/code&gt; to access the default homepage (http access through port 80 is disabled by default, you can enable it by editing the default site config at &lt;code&gt;/config/nginx/site-confs/default&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Certs are checked nightly and if expiration is within 30 days, renewal is attempted. If your cert is about to expire in less than 30 days, check the logs under &lt;code&gt;/config/log/letsencrypt&lt;/code&gt; to see why the renewals have been failing. It is recommended to input your e-mail in docker parameters so you receive expiration notices from Let&#39;s Encrypt in those circumstances.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Security and password protection&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The container detects changes to url and subdomains, revokes existing certs and generates new ones during start.&lt;/li&gt; &#xA; &lt;li&gt;Per &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc7919&#34;&gt;RFC7919&lt;/a&gt;, the container is shipping &lt;a href=&#34;https://ssl-config.mozilla.org/ffdhe4096.txt&#34;&gt;ffdhe4096&lt;/a&gt; as the &lt;code&gt;dhparams.pem&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;d like to password protect your sites, you can use htpasswd. Run the following command on your host to generate the htpasswd file &lt;code&gt;docker exec -it swag htpasswd -c /config/nginx/.htpasswd &amp;lt;username&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;You can add multiple user:pass to &lt;code&gt;.htpasswd&lt;/code&gt;. For the first user, use the above command, for others, use the above command without the &lt;code&gt;-c&lt;/code&gt; flag, as it will force deletion of the existing &lt;code&gt;.htpasswd&lt;/code&gt; and creation of a new one&lt;/li&gt; &#xA; &lt;li&gt;You can also use ldap auth for security and access control. A sample, user configurable ldap.conf is provided, and it requires the separate image &lt;a href=&#34;https://hub.docker.com/r/linuxserver/ldap-auth/&#34;&gt;linuxserver/ldap-auth&lt;/a&gt; to communicate with an ldap server.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Site config and reverse proxy&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The default site config resides at &lt;code&gt;/config/nginx/site-confs/default&lt;/code&gt;. Feel free to modify this file, and you can add other conf files to this directory. However, if you delete the &lt;code&gt;default&lt;/code&gt; file, a new default will be created on container start.&lt;/li&gt; &#xA; &lt;li&gt;Preset reverse proxy config files are added for popular apps. See the &lt;code&gt;README.md&lt;/code&gt; file under &lt;code&gt;/config/nginx/proxy_confs&lt;/code&gt; for instructions on how to enable them. The preset confs reside in and get imported from &lt;a href=&#34;https://github.com/linuxserver/reverse-proxy-confs&#34;&gt;this repo&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you wish to hide your site from search engine crawlers, you may find it useful to add this configuration line to your site config, within the server block, above the line where ssl.conf is included &lt;code&gt;add_header X-Robots-Tag &#34;noindex, nofollow, nosnippet, noarchive&#34;;&lt;/code&gt; This will &lt;em&gt;ask&lt;/em&gt; Google et al not to index and list your site. Be careful with this, as you will eventually be de-listed if you leave this line in on a site you wish to be present on search engines&lt;/li&gt; &#xA; &lt;li&gt;If you wish to redirect http to https, you must expose port 80&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using certs in other containers&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This container includes auto-generated pfx and private-fullchain-bundle pem certs that are needed by other apps like Emby and Znc. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;To use these certs in other containers, do either of the following:&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;em&gt;(Easier)&lt;/em&gt; Mount the container&#39;s config folder in other containers (ie. &lt;code&gt;-v /path-to-le-config:/le-ssl&lt;/code&gt;) and in the other containers, use the cert location &lt;code&gt;/le-ssl/keys/letsencrypt/&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;(More secure)&lt;/em&gt; Mount the SWAG folder &lt;code&gt;etc&lt;/code&gt; that resides under &lt;code&gt;/config&lt;/code&gt; in other containers (ie. &lt;code&gt;-v /path-to-le-config/etc:/le-ssl&lt;/code&gt;) and in the other containers, use the cert location &lt;code&gt;/le-ssl/letsencrypt/live/&amp;lt;your.domain.url&amp;gt;/&lt;/code&gt; (This is more secure because the first method shares the entire SWAG config folder with other containers, including the www files, whereas the second method only shares the ssl certs)&lt;/li&gt; &#xA;  &lt;/ol&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;These certs include:&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;code&gt;cert.pem&lt;/code&gt;, &lt;code&gt;chain.pem&lt;/code&gt;, &lt;code&gt;fullchain.pem&lt;/code&gt; and &lt;code&gt;privkey.pem&lt;/code&gt;, which are generated by Certbot and used by nginx and various other apps&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;privkey.pfx&lt;/code&gt;, a format supported by Microsoft and commonly used by dotnet apps such as Emby Server (no password)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;priv-fullchain-bundle.pem&lt;/code&gt;, a pem cert that bundles the private key and the fullchain, used by apps like ZNC&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using fail2ban&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This container includes fail2ban set up with 5 jails by default: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;nginx-http-auth&lt;/li&gt; &#xA;   &lt;li&gt;nginx-badbots&lt;/li&gt; &#xA;   &lt;li&gt;nginx-botsearch&lt;/li&gt; &#xA;   &lt;li&gt;nginx-deny&lt;/li&gt; &#xA;   &lt;li&gt;nginx-unauthorized&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;To enable or disable other jails, modify the file &lt;code&gt;/config/fail2ban/jail.local&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;To modify filters and actions, instead of editing the &lt;code&gt;.conf&lt;/code&gt; files, create &lt;code&gt;.local&lt;/code&gt; files with the same name and edit those because .conf files get overwritten when the actions and filters are updated. &lt;code&gt;.local&lt;/code&gt; files will append whatever&#39;s in the &lt;code&gt;.conf&lt;/code&gt; files (ie. &lt;code&gt;nginx-http-auth.conf&lt;/code&gt; --&amp;gt; &lt;code&gt;nginx-http-auth.local&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;You can check which jails are active via &lt;code&gt;docker exec -it swag fail2ban-client status&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;You can check the status of a specific jail via &lt;code&gt;docker exec -it swag fail2ban-client status &amp;lt;jail name&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;You can unban an IP via &lt;code&gt;docker exec -it swag fail2ban-client set &amp;lt;jail name&amp;gt; unbanip &amp;lt;IP&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;A list of commands can be found here: &lt;a href=&#34;https://www.fail2ban.org/wiki/index.php/Commands&#34;&gt;https://www.fail2ban.org/wiki/index.php/Commands&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Updating configs&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This container creates a number of configs for nginx, proxy samples, etc.&lt;/li&gt; &#xA; &lt;li&gt;Config updates are noted in the changelog but not automatically applied to your files.&lt;/li&gt; &#xA; &lt;li&gt;If you have modified a file with noted changes in the changelog: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Keep your existing configs as is (not broken, don&#39;t fix)&lt;/li&gt; &#xA;   &lt;li&gt;Review our repository commits and apply the new changes yourself&lt;/li&gt; &#xA;   &lt;li&gt;Delete the modified config file with listed updates, restart the container, reapply your changes&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;If you have NOT modified a file with noted changes in the changelog: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Delete the config file with listed updates, restart the container&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Proxy sample updates are not listed in the changelog. See the changes here: &lt;a href=&#34;https://github.com/linuxserver/reverse-proxy-confs/commits/master&#34;&gt;https://github.com/linuxserver/reverse-proxy-confs/commits/master&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Proxy sample files WILL be updated, however your renamed (enabled) proxy files will not.&lt;/li&gt; &#xA; &lt;li&gt;You can check the new sample and adjust your active config as needed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Migration from the old &lt;code&gt;linuxserver/letsencrypt&lt;/code&gt; image&lt;/h3&gt; &#xA;&lt;p&gt;Please follow the instructions &lt;a href=&#34;https://www.linuxserver.io/blog/2020-08-21-introducing-swag#migrate&#34;&gt;on this blog post&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Here are some example snippets to help you get started creating a container.&lt;/p&gt; &#xA;&lt;h3&gt;docker-compose (recommended, &lt;a href=&#34;https://docs.linuxserver.io/general/docker-compose&#34;&gt;click here for more info&lt;/a&gt;)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---&#xA;version: &#34;2.1&#34;&#xA;services:&#xA;  swag:&#xA;    image: lscr.io/linuxserver/swag:latest&#xA;    container_name: swag&#xA;    cap_add:&#xA;      - NET_ADMIN&#xA;    environment:&#xA;      - PUID=1000&#xA;      - PGID=1000&#xA;      - TZ=Europe/London&#xA;      - URL=yourdomain.url&#xA;      - VALIDATION=http&#xA;      - SUBDOMAINS=www, #optional&#xA;      - CERTPROVIDER= #optional&#xA;      - DNSPLUGIN=cloudflare #optional&#xA;      - PROPAGATION= #optional&#xA;      - DUCKDNSTOKEN= #optional&#xA;      - EMAIL= #optional&#xA;      - ONLY_SUBDOMAINS=false #optional&#xA;      - EXTRA_DOMAINS= #optional&#xA;      - STAGING=false #optional&#xA;    volumes:&#xA;      - /path/to/appdata/config:/config&#xA;    ports:&#xA;      - 443:443&#xA;      - 80:80 #optional&#xA;    restart: unless-stopped&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;docker cli (&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/cli/&#34;&gt;click here for more info&lt;/a&gt;)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d \&#xA;  --name=swag \&#xA;  --cap-add=NET_ADMIN \&#xA;  -e PUID=1000 \&#xA;  -e PGID=1000 \&#xA;  -e TZ=Europe/London \&#xA;  -e URL=yourdomain.url \&#xA;  -e VALIDATION=http \&#xA;  -e SUBDOMAINS=www, `#optional` \&#xA;  -e CERTPROVIDER= `#optional` \&#xA;  -e DNSPLUGIN=cloudflare `#optional` \&#xA;  -e PROPAGATION= `#optional` \&#xA;  -e DUCKDNSTOKEN= `#optional` \&#xA;  -e EMAIL= `#optional` \&#xA;  -e ONLY_SUBDOMAINS=false `#optional` \&#xA;  -e EXTRA_DOMAINS= `#optional` \&#xA;  -e STAGING=false `#optional` \&#xA;  -p 443:443 \&#xA;  -p 80:80 `#optional` \&#xA;  -v /path/to/appdata/config:/config \&#xA;  --restart unless-stopped \&#xA;  lscr.io/linuxserver/swag:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Parameters&lt;/h2&gt; &#xA;&lt;p&gt;Container images are configured using parameters passed at runtime (such as those above). These parameters are separated by a colon and indicate &lt;code&gt;&amp;lt;external&amp;gt;:&amp;lt;internal&amp;gt;&lt;/code&gt; respectively. For example, &lt;code&gt;-p 8080:80&lt;/code&gt; would expose port &lt;code&gt;80&lt;/code&gt; from inside the container to be accessible from the host&#39;s IP on port &lt;code&gt;8080&lt;/code&gt; outside the container.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-p 443&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Https port&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-p 80&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Http port (required for http validation and http -&amp;gt; https redirect)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e PUID=1000&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for UserID - see below for explanation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e PGID=1000&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for GroupID - see below for explanation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e TZ=Europe/London&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Specify a timezone to use EG Europe/London.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e URL=yourdomain.url&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Top url you have control over (&lt;code&gt;customdomain.com&lt;/code&gt; if you own it, or &lt;code&gt;customsubdomain.ddnsprovider.com&lt;/code&gt; if dynamic dns).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e VALIDATION=http&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Certbot validation method to use, options are &lt;code&gt;http&lt;/code&gt;, &lt;code&gt;dns&lt;/code&gt; or &lt;code&gt;duckdns&lt;/code&gt; (&lt;code&gt;dns&lt;/code&gt; method also requires &lt;code&gt;DNSPLUGIN&lt;/code&gt; variable set) (&lt;code&gt;duckdns&lt;/code&gt; method requires &lt;code&gt;DUCKDNSTOKEN&lt;/code&gt; variable set, and the &lt;code&gt;SUBDOMAINS&lt;/code&gt; variable must be either empty or set to &lt;code&gt;wildcard&lt;/code&gt;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e SUBDOMAINS=www,&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Subdomains you&#39;d like the cert to cover (comma separated, no spaces) ie. &lt;code&gt;www,ftp,cloud&lt;/code&gt;. For a wildcard cert, set this &lt;em&gt;exactly&lt;/em&gt; to &lt;code&gt;wildcard&lt;/code&gt; (wildcard cert is available via &lt;code&gt;dns&lt;/code&gt; and &lt;code&gt;duckdns&lt;/code&gt; validation only)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e CERTPROVIDER=&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Optionally define the cert provider. Set to &lt;code&gt;zerossl&lt;/code&gt; for ZeroSSL certs (requires existing &lt;a href=&#34;https://app.zerossl.com/signup&#34;&gt;ZeroSSL account&lt;/a&gt; and the e-mail address entered in &lt;code&gt;EMAIL&lt;/code&gt; env var). Otherwise defaults to Let&#39;s Encrypt.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e DNSPLUGIN=cloudflare&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Required if &lt;code&gt;VALIDATION&lt;/code&gt; is set to &lt;code&gt;dns&lt;/code&gt;. Options are &lt;code&gt;aliyun&lt;/code&gt;, &lt;code&gt;azure&lt;/code&gt;, &lt;code&gt;cloudflare&lt;/code&gt;, &lt;code&gt;cloudxns&lt;/code&gt;, &lt;code&gt;cpanel&lt;/code&gt;, &lt;code&gt;desec&lt;/code&gt;, &lt;code&gt;digitalocean&lt;/code&gt;, &lt;code&gt;directadmin&lt;/code&gt;, &lt;code&gt;dnsimple&lt;/code&gt;, &lt;code&gt;dnsmadeeasy&lt;/code&gt;, &lt;code&gt;dnspod&lt;/code&gt;, &lt;code&gt;domeneshop&lt;/code&gt;, &lt;code&gt;gandi&lt;/code&gt;, &lt;code&gt;gehirn&lt;/code&gt;, &lt;code&gt;google&lt;/code&gt;, &lt;code&gt;he&lt;/code&gt;, &lt;code&gt;hetzner&lt;/code&gt;, &lt;code&gt;infomaniak&lt;/code&gt;, &lt;code&gt;inwx&lt;/code&gt;, &lt;code&gt;ionos&lt;/code&gt;, &lt;code&gt;linode&lt;/code&gt;, &lt;code&gt;loopia&lt;/code&gt;, &lt;code&gt;luadns&lt;/code&gt;, &lt;code&gt;netcup&lt;/code&gt;, &lt;code&gt;njalla&lt;/code&gt;, &lt;code&gt;nsone&lt;/code&gt;, &lt;code&gt;ovh&lt;/code&gt;, &lt;code&gt;rfc2136&lt;/code&gt;, &lt;code&gt;route53&lt;/code&gt;, &lt;code&gt;sakuracloud&lt;/code&gt;, &lt;code&gt;standalone&lt;/code&gt;, &lt;code&gt;transip&lt;/code&gt; and &lt;code&gt;vultr&lt;/code&gt;. Also need to enter the credentials into the corresponding ini (or json for some plugins) file under &lt;code&gt;/config/dns-conf&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e PROPAGATION=&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Optionally override (in seconds) the default propagation time for the dns plugins.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e DUCKDNSTOKEN=&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Required if &lt;code&gt;VALIDATION&lt;/code&gt; is set to &lt;code&gt;duckdns&lt;/code&gt;. Retrieve your token from &lt;a href=&#34;https://www.duckdns.org&#34;&gt;https://www.duckdns.org&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e EMAIL=&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Optional e-mail address used for cert expiration notifications (Required for ZeroSSL).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e ONLY_SUBDOMAINS=false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If you wish to get certs only for certain subdomains, but not the main domain (main domain may be hosted on another machine and cannot be validated), set this to &lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e EXTRA_DOMAINS=&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Additional fully qualified domain names (comma separated, no spaces) ie. &lt;code&gt;extradomain.com,subdomain.anotherdomain.org,*.anotherdomain.org&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e STAGING=false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set to &lt;code&gt;true&lt;/code&gt; to retrieve certs in staging mode. Rate limits will be much higher, but the resulting cert will not pass the browser&#39;s security test. Only to be used for testing purposes.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-v /config&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;All the config files including the webroot reside here.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Portainer notice&lt;/h3&gt; &#xA;&lt;p&gt;This image utilises &lt;code&gt;cap_add&lt;/code&gt; or &lt;code&gt;sysctl&lt;/code&gt; to work properly. This is not implemented properly in some versions of Portainer, thus this image may not work if deployed through Portainer.&lt;/p&gt; &#xA;&lt;h2&gt;Environment variables from files (Docker secrets)&lt;/h2&gt; &#xA;&lt;p&gt;You can set any environment variable from a file by using a special prepend &lt;code&gt;FILE__&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-e FILE__PASSWORD=/run/secrets/mysecretpassword&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will set the environment variable &lt;code&gt;PASSWORD&lt;/code&gt; based on the contents of the &lt;code&gt;/run/secrets/mysecretpassword&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Umask for running applications&lt;/h2&gt; &#xA;&lt;p&gt;For all of our images we provide the ability to override the default umask settings for services started within the containers using the optional &lt;code&gt;-e UMASK=022&lt;/code&gt; setting. Keep in mind umask is not chmod it subtracts from permissions based on it&#39;s value it does not add. Please read up &lt;a href=&#34;https://en.wikipedia.org/wiki/Umask&#34;&gt;here&lt;/a&gt; before asking for support.&lt;/p&gt; &#xA;&lt;h2&gt;User / Group Identifiers&lt;/h2&gt; &#xA;&lt;p&gt;When using volumes (&lt;code&gt;-v&lt;/code&gt; flags) permissions issues can arise between the host OS and the container, we avoid this issue by allowing you to specify the user &lt;code&gt;PUID&lt;/code&gt; and group &lt;code&gt;PGID&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Ensure any volume directories on the host are owned by the same user you specify and any permissions issues will vanish like magic.&lt;/p&gt; &#xA;&lt;p&gt;In this instance &lt;code&gt;PUID=1000&lt;/code&gt; and &lt;code&gt;PGID=1000&lt;/code&gt;, to find yours use &lt;code&gt;id user&lt;/code&gt; as below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ id username&#xA;    uid=1000(dockeruser) gid=1000(dockergroup) groups=1000(dockergroup)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Docker Mods&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://mods.linuxserver.io/?mod=swag&#34; title=&#34;view available mods for this container.&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/yaml?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=swag&amp;amp;query=%24.mods%5B%27swag%27%5D.mod_count&amp;amp;url=https%3A%2F%2Fraw.githubusercontent.com%2Flinuxserver%2Fdocker-mods%2Fmaster%2Fmod-list.yml&#34; alt=&#34;Docker Mods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://mods.linuxserver.io/?mod=universal&#34; title=&#34;view available universal mods.&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/yaml?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=universal&amp;amp;query=%24.mods%5B%27universal%27%5D.mod_count&amp;amp;url=https%3A%2F%2Fraw.githubusercontent.com%2Flinuxserver%2Fdocker-mods%2Fmaster%2Fmod-list.yml&#34; alt=&#34;Docker Universal Mods&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We publish various &lt;a href=&#34;https://github.com/linuxserver/docker-mods&#34;&gt;Docker Mods&lt;/a&gt; to enable additional functionality within the containers. The list of Mods available for this image (if any) as well as universal mods that can be applied to any one of our images can be accessed via the dynamic badges above.&lt;/p&gt; &#xA;&lt;h2&gt;Support Info&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Shell access whilst the container is running: &lt;code&gt;docker exec -it swag /bin/bash&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;To monitor the logs of the container in realtime: &lt;code&gt;docker logs -f swag&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;container version number &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;docker inspect -f &#39;{{ index .Config.Labels &#34;build_version&#34; }}&#39; swag&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;image version number &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;docker inspect -f &#39;{{ index .Config.Labels &#34;build_version&#34; }}&#39; lscr.io/linuxserver/swag:latest&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Updating Info&lt;/h2&gt; &#xA;&lt;p&gt;Most of our images are static, versioned, and require an image update and container recreation to update the app inside. With some exceptions (ie. nextcloud, plex), we do not recommend or support updating apps inside the container. Please consult the &lt;a href=&#34;https://raw.githubusercontent.com/linuxserver/docker-swag/master/#application-setup&#34;&gt;Application Setup&lt;/a&gt; section above to see if it is recommended for the image.&lt;/p&gt; &#xA;&lt;p&gt;Below are the instructions for updating containers:&lt;/p&gt; &#xA;&lt;h3&gt;Via Docker Compose&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Update all images: &lt;code&gt;docker-compose pull&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;or update a single image: &lt;code&gt;docker-compose pull swag&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Let compose update all containers as necessary: &lt;code&gt;docker-compose up -d&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;or update a single container: &lt;code&gt;docker-compose up -d swag&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;You can also remove the old dangling images: &lt;code&gt;docker image prune&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Via Docker Run&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Update the image: &lt;code&gt;docker pull lscr.io/linuxserver/swag:latest&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Stop the running container: &lt;code&gt;docker stop swag&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Delete the container: &lt;code&gt;docker rm swag&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Recreate a new container with the same docker run parameters as instructed above (if mapped correctly to a host folder, your &lt;code&gt;/config&lt;/code&gt; folder and settings will be preserved)&lt;/li&gt; &#xA; &lt;li&gt;You can also remove the old dangling images: &lt;code&gt;docker image prune&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Via Watchtower auto-updater (only use if you don&#39;t remember the original parameters)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Pull the latest image at its tag and replace it with the same env variables in one run:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm \&#xA;-v /var/run/docker.sock:/var/run/docker.sock \&#xA;containrrr/watchtower \&#xA;--run-once swag&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can also remove the old dangling images: &lt;code&gt;docker image prune&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; We do not endorse the use of Watchtower as a solution to automated updates of existing Docker containers. In fact we generally discourage automated updates. However, this is a useful tool for one-time manual updates of containers where you have forgotten the original parameters. In the long term, we highly recommend using &lt;a href=&#34;https://docs.linuxserver.io/general/docker-compose&#34;&gt;Docker Compose&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Image Update Notifications - Diun (Docker Image Update Notifier)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We recommend &lt;a href=&#34;https://crazymax.dev/diun/&#34;&gt;Diun&lt;/a&gt; for update notifications. Other tools that automatically update containers unattended are not recommended or supported.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building locally&lt;/h2&gt; &#xA;&lt;p&gt;If you want to make local modifications to these images for development purposes or just to customize the logic:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/linuxserver/docker-swag.git&#xA;cd docker-swag&#xA;docker build \&#xA;  --no-cache \&#xA;  --pull \&#xA;  -t lscr.io/linuxserver/swag:latest .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The ARM variants can be built on x86_64 hardware using &lt;code&gt;multiarch/qemu-user-static&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm --privileged multiarch/qemu-user-static:register --reset&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once registered you can define the dockerfile to use with &lt;code&gt;-f Dockerfile.aarch64&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Versions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;18.05.22:&lt;/strong&gt; - Added support for Azure DNS validation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;09.04.22:&lt;/strong&gt; - Added certbot-dns-loopia for DNS01 validation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;05.04.22:&lt;/strong&gt; - Added support for standalone DNS validation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;28.03.22:&lt;/strong&gt; - created a logfile for fail2ban nginx-unauthorized in /etc/cont-init.d/50-config&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;09.01.22:&lt;/strong&gt; - Added a fail2ban jail for nginx unauthorized&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;21.12.21:&lt;/strong&gt; - Fixed issue with iptables not working as expected&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;30.11.21:&lt;/strong&gt; - Move maxmind to a &lt;a href=&#34;https://github.com/linuxserver/docker-mods/tree/swag-maxmind&#34;&gt;new mod&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;22.11.21:&lt;/strong&gt; - Added support for Infomaniak DNS for certificate generation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;20.11.21:&lt;/strong&gt; - Added support for dnspod validation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;15.11.21:&lt;/strong&gt; - Added support for deSEC DNS for wildcard certificate generation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;26.10.21:&lt;/strong&gt; - &lt;a href=&#34;https://github.com/linuxserver/docker-swag/raw/master/README.md#updating-configs&#34;&gt;Existing users should update:&lt;/a&gt; proxy.conf - Mitigate &lt;a href=&#34;https://httpoxy.org/&#34;&gt;https://httpoxy.org/&lt;/a&gt; vulnerabilities. Ref: &lt;a href=&#34;https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx#Defeating-the-Attack-using-NGINX-and-NGINX-Plus&#34;&gt;https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx#Defeating-the-Attack-using-NGINX-and-NGINX-Plus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;23.10.21:&lt;/strong&gt; - Fix Hurricane Electric (HE) DNS validation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;12.10.21:&lt;/strong&gt; - Fix deprecated LE root cert check to fix failures when using &lt;code&gt;STAGING=true&lt;/code&gt;, and failures in revoking.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;06.10.21:&lt;/strong&gt; - Added support for Hurricane Electric (HE) DNS validation. Added lxml build deps.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;01.10.21:&lt;/strong&gt; - Check if the cert uses the old LE root cert, revoke and regenerate if necessary. &lt;a href=&#34;https://twitter.com/letsencrypt/status/1443621997288767491&#34;&gt;Here&#39;s more info&lt;/a&gt; on LE root cert expiration&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;19.09.21:&lt;/strong&gt; - Add an optional header to opt out of Google FLoC in &lt;code&gt;ssl.conf&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;17.09.21:&lt;/strong&gt; - Mark &lt;code&gt;SUBDOMAINS&lt;/code&gt; var as optional.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;01.08.21:&lt;/strong&gt; - Add support for ionos dns validation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;15.07.21:&lt;/strong&gt; - Fix libmaxminddb issue due to upstream change.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;07.07.21:&lt;/strong&gt; - Rebase to alpine 3.14.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;24.06.21:&lt;/strong&gt; - Update default nginx conf folder.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;28.05.21:&lt;/strong&gt; - &lt;a href=&#34;https://github.com/linuxserver/docker-swag/raw/master/README.md#updating-configs&#34;&gt;Existing users should update:&lt;/a&gt; authelia-server.conf - Use &lt;code&gt;resolver.conf&lt;/code&gt; and patch for &lt;code&gt;CVE-2021-32637&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;20.05.21:&lt;/strong&gt; - Modify resolver.conf generation to detect and ignore ipv6.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;14.05.21:&lt;/strong&gt; - &lt;a href=&#34;https://github.com/linuxserver/docker-swag/raw/master/README.md#updating-configs&#34;&gt;Existing users should update:&lt;/a&gt; nginx.conf, ssl.conf, proxy.conf, and the default site-conf - Rework nginx.conf to be inline with alpine upstream and relocate lines from other files. Use linuxserver.io wheel index for pip packages. Switch to using &lt;a href=&#34;https://ssl-config.mozilla.org/ffdhe4096.txt&#34;&gt;ffdhe4096&lt;/a&gt; for &lt;code&gt;dhparams.pem&lt;/code&gt; per &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc7919&#34;&gt;RFC7919&lt;/a&gt;. Added &lt;code&gt;worker_processes.conf&lt;/code&gt;, which sets the number of nginx workers, and &lt;code&gt;resolver.conf&lt;/code&gt;, which sets the dns resolver. Both conf files are auto-generated only on first start and can be user modified later.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;21.04.21:&lt;/strong&gt; - &lt;a href=&#34;https://github.com/linuxserver/docker-swag/raw/master/README.md#updating-configs&#34;&gt;Existing users should update:&lt;/a&gt; authelia-server.conf and authelia-location.conf - Add remote name/email headers and pass http method.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;12.04.21:&lt;/strong&gt; - Add php7-gmp and php7-pecl-mailparse.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;12.04.21:&lt;/strong&gt; - Add support for vultr dns validation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;14.03.21:&lt;/strong&gt; - Add support for directadmin dns validation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;12.02.21:&lt;/strong&gt; - Clean up rust/cargo cache, which ballooned the image size in the last couple of builds.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;10.02.21:&lt;/strong&gt; - Fix aliyun, domeneshop, inwx and transip dns confs for existing users.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;09.02.21:&lt;/strong&gt; - Rebasing to alpine 3.13. Add nginx mods brotli and dav-ext. Remove nginx mods lua and lua-upstream (due to regression over the last couple of years).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;26.01.21:&lt;/strong&gt; - Add support for hetzner dns validation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;20.01.21:&lt;/strong&gt; - Add check for ZeroSSL EAB retrieval.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;08.01.21:&lt;/strong&gt; - Add support for getting certs from &lt;a href=&#34;https://zerossl.com/&#34;&gt;ZeroSSL&lt;/a&gt; via optional &lt;code&gt;CERTPROVIDER&lt;/code&gt; env var. Update aliyun, domeneshop, inwx and transip dns plugins with the new plugin names. Hide &lt;code&gt;donoteditthisfile.conf&lt;/code&gt; because users were editing it despite its name. Suppress harmless error when no proxy confs are enabled.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;03.01.21:&lt;/strong&gt; - &lt;a href=&#34;https://github.com/linuxserver/docker-swag/raw/master/README.md#updating-configs&#34;&gt;Existing users should update:&lt;/a&gt; /config/nginx/site-confs/default - Add helper pages to aid troubleshooting&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;10.12.20:&lt;/strong&gt; - Add support for njalla dns validation&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;09.12.20:&lt;/strong&gt; - Check for template/conf updates and notify in the log. Add support for gehirn and sakuracloud dns validation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;01.11.20:&lt;/strong&gt; - Add support for netcup dns validation&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;29.10.20:&lt;/strong&gt; - &lt;a href=&#34;https://github.com/linuxserver/docker-swag/raw/master/README.md#updating-configs&#34;&gt;Existing users should update:&lt;/a&gt; ssl.conf - Add frame-ancestors to Content-Security-Policy.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;04.10.20:&lt;/strong&gt; - &lt;a href=&#34;https://github.com/linuxserver/docker-swag/raw/master/README.md#updating-configs&#34;&gt;Existing users should update:&lt;/a&gt; nginx.conf, proxy.conf, and ssl.conf - Minor cleanups and reordering.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;20.09.20:&lt;/strong&gt; - &lt;a href=&#34;https://github.com/linuxserver/docker-swag/raw/master/README.md#updating-configs&#34;&gt;Existing users should update:&lt;/a&gt; nginx.conf - Added geoip2 configs. Added MAXMINDDB_LICENSE_KEY variable to readme.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;08.09.20:&lt;/strong&gt; - Add php7-xsl.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;01.09.20:&lt;/strong&gt; - &lt;a href=&#34;https://github.com/linuxserver/docker-swag/raw/master/README.md#updating-configs&#34;&gt;Existing users should update:&lt;/a&gt; nginx.conf, proxy.conf, and various proxy samples - Global websockets across all configs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;03.08.20:&lt;/strong&gt; - Initial release.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>crazy-max/docker-jetbrains-license-server</title>
    <updated>2022-05-29T02:08:06Z</updated>
    <id>tag:github.com,2022-05-29:/crazy-max/docker-jetbrains-license-server</id>
    <link href="https://github.com/crazy-max/docker-jetbrains-license-server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;JetBrains License Server Docker image&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/crazy-max/docker-jetbrains-license-server&#34; target=&#34;_blank&#34;&gt;&lt;img height=&#34;128&#34; src=&#34;https://raw.githubusercontent.com/crazy-max/docker-jetbrains-license-server/master/.github/docker-jetbrains-license-server.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://hub.docker.com/r/crazymax/jetbrains-license-server/tags?page=1&amp;amp;ordering=last_updated&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/tag/crazy-max/docker-jetbrains-license-server?label=version&amp;amp;style=flat-square&#34; alt=&#34;Latest Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/crazy-max/docker-jetbrains-license-server/actions?workflow=build&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/crazy-max/docker-jetbrains-license-server/build?label=build&amp;amp;logo=github&amp;amp;style=flat-square&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/crazymax/jetbrains-license-server/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/stars/crazymax/jetbrains-license-server.svg?style=flat-square&amp;amp;logo=docker&#34; alt=&#34;Docker Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/crazymax/jetbrains-license-server/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/crazymax/jetbrains-license-server.svg?style=flat-square&amp;amp;logo=docker&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;br&gt;&lt;a href=&#34;https://github.com/sponsors/crazy-max&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/sponsor-crazy--max-181717.svg?logo=github&amp;amp;style=flat-square&#34; alt=&#34;Become a sponsor&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.paypal.me/crazyws&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/donate-paypal-00457c.svg?logo=paypal&amp;amp;style=flat-square&#34; alt=&#34;Donate Paypal&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.jetbrains.com/help/license_server/getting_started.html&#34;&gt;JetBrains License Server&lt;/a&gt; Docker image based on Alpine Linux.&lt;br&gt; If you are interested, &lt;a href=&#34;https://hub.docker.com/r/crazymax/&#34;&gt;check out&lt;/a&gt; my other Docker images!&lt;/p&gt; &#xA;&lt;p&gt;💡 Want to be notified of new releases? Check out 🔔 &lt;a href=&#34;https://github.com/crazy-max/diun&#34;&gt;Diun (Docker Image Update Notifier)&lt;/a&gt; project!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crazy-max/docker-jetbrains-license-server/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crazy-max/docker-jetbrains-license-server/master/#build-locally&#34;&gt;Build locally&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crazy-max/docker-jetbrains-license-server/master/#image&#34;&gt;Image&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crazy-max/docker-jetbrains-license-server/master/#environment-variables&#34;&gt;Environment variables&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crazy-max/docker-jetbrains-license-server/master/#volumes&#34;&gt;Volumes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crazy-max/docker-jetbrains-license-server/master/#ports&#34;&gt;Ports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crazy-max/docker-jetbrains-license-server/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crazy-max/docker-jetbrains-license-server/master/#docker-compose&#34;&gt;Docker Compose&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crazy-max/docker-jetbrains-license-server/master/#command-line&#34;&gt;Command line&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crazy-max/docker-jetbrains-license-server/master/#upgrade&#34;&gt;Upgrade&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crazy-max/docker-jetbrains-license-server/master/#notes&#34;&gt;Notes&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crazy-max/docker-jetbrains-license-server/master/#error-403-passed-value-of-header-host-is-not-allowed&#34;&gt;Error 403 Passed value of header &#34;Host&#34; is not allowed&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crazy-max/docker-jetbrains-license-server/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crazy-max/docker-jetbrains-license-server/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run as non-root user&lt;/li&gt; &#xA; &lt;li&gt;Multi-platform image&lt;/li&gt; &#xA; &lt;li&gt;License server completely customizable via environment variables&lt;/li&gt; &#xA; &lt;li&gt;Registration data and configuration in a single directory&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/crazy-max/docker-msmtpd&#34;&gt;msmtpd SMTP relay&lt;/a&gt; image to send emails&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/containous/traefik-library-image&#34;&gt;Traefik&lt;/a&gt; as reverse proxy and creation/renewal of Let&#39;s Encrypt certificates (see &lt;a href=&#34;https://raw.githubusercontent.com/crazy-max/docker-jetbrains-license-server/master/examples/traefik&#34;&gt;this template&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build locally&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/crazy-max/docker-jetbrains-license-server.git&#xA;cd docker-jetbrains-license-server&#xA;&#xA;# Build image and output to docker (default)&#xA;docker buildx bake&#xA;&#xA;# Build multi-platform image&#xA;docker buildx bake image-all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Image&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Registry&lt;/th&gt; &#xA;   &lt;th&gt;Image&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/crazymax/jetbrains-license-server/&#34;&gt;Docker Hub&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;crazymax/jetbrains-license-server&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/users/crazy-max/packages/container/package/jetbrains-license-server&#34;&gt;GitHub Container Registry&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ghcr.io/crazy-max/jetbrains-license-server&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Environment variables&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;TZ&lt;/code&gt;: The timezone assigned to the container (default &lt;code&gt;UTC&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PUID&lt;/code&gt;: JLS UID (default &lt;code&gt;1000&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PGID&lt;/code&gt;: JLS GID (default &lt;code&gt;1000&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;JLS_VIRTUAL_HOSTS&lt;/code&gt;: &lt;a href=&#34;https://www.jetbrains.com/help/license_server/setting_host_and_port.html#d1010e63&#34;&gt;Virtual hosts&lt;/a&gt; where license server will be available (comma delimited for several hosts)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;JLS_CONTEXT&lt;/code&gt;: &lt;a href=&#34;https://www.jetbrains.com/help/license_server/setting_host_and_port.html#d1010e63&#34;&gt;Context path&lt;/a&gt; used by the license server (default &lt;code&gt;/&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;JLS_PROXY_TYPE&lt;/code&gt;: Type of &lt;a href=&#34;https://www.jetbrains.com/help/license_server/configuring_proxy_settings.html&#34;&gt;proxy&lt;/a&gt; to use. Can be &lt;code&gt;http&lt;/code&gt; or &lt;code&gt;https&lt;/code&gt; (default &lt;code&gt;https&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;JLS_PROXY_HOST&lt;/code&gt;: The host name of your proxy server&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;JLS_PROXY_PORT&lt;/code&gt;: The port number that the proxy server listens to&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;JLS_PROXY_USER&lt;/code&gt;: Username to connect to the proxy server (no auth if empty)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;JLS_PROXY_PASSWORD&lt;/code&gt;: Password to connect to the proxy server (no auth if empty)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;JLS_ACCESS_CONFIG&lt;/code&gt;: JSON file to configure &lt;a href=&#34;https://www.jetbrains.com/help/license_server/configuring_user_restrictions.html&#34;&gt;user restrictions&lt;/a&gt; (default &lt;code&gt;/data/access-config.json&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;JLS_STATS_RECIPIENTS&lt;/code&gt;: &lt;a href=&#34;https://www.jetbrains.com/help/license_server/detailed_server_usage_statistics.html#d461e40&#34;&gt;Reports recipients&lt;/a&gt; email addresses for stats (comma delimited)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;JLS_REPORT_OUT_OF_LICENSE&lt;/code&gt;: &lt;a href=&#34;https://www.jetbrains.com/help/license_server/detailed_server_usage_statistics.html#d461e40&#34;&gt;Warn about lack of licenses&lt;/a&gt; every hour following the percentage threshold (default &lt;code&gt;0&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;JLS_SMTP_SERVER&lt;/code&gt;: SMTP server host to use for sending &lt;a href=&#34;https://www.jetbrains.com/help/license_server/detailed_server_usage_statistics.html&#34;&gt;stats&lt;/a&gt; (stats disabled if empty)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;JLS_SMTP_PORT&lt;/code&gt;: SMTP server port (default &lt;code&gt;25&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;JLS_SMTP_USERNAME&lt;/code&gt;: SMTP username (auth disabled if empty)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;JLS_SMTP_PASSWORD&lt;/code&gt;: SMTP password (auth disabled if empty)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;JLS_STATS_FROM&lt;/code&gt;: &lt;a href=&#34;https://www.jetbrains.com/help/license_server/detailed_server_usage_statistics.html#d461e40&#34;&gt;From address&lt;/a&gt; for stats emails&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;JLS_STATS_TOKEN&lt;/code&gt;: Enables an auth token for the &lt;a href=&#34;https://www.jetbrains.com/help/license_server/detailed_server_usage_statistics.html#d461e312&#34;&gt;stats API&lt;/a&gt; at &lt;code&gt;/reportApi&lt;/code&gt; (HTTP POST)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;JLS_SERVICE_LOGLEVEL&lt;/code&gt;: Logging of IDE requests and responses (default &lt;code&gt;warn&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;JLS_REPORTING_LOGLEVEL&lt;/code&gt;: Logging of actions on a server: tickets obtaining and revoking with user and license information (default &lt;code&gt;warn&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;JLS_TICKETS_LOGLEVEL&lt;/code&gt;: Logging of actions with tickets. For example, manual ticket revoking (default &lt;code&gt;warn&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Volumes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/data&lt;/code&gt;: Contains &lt;a href=&#34;https://www.jetbrains.com/help/license_server/migrate.html&#34;&gt;registration data&lt;/a&gt; and configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; Note that the volumes should be owned by the user/group with the specified &lt;code&gt;PUID&lt;/code&gt; and &lt;code&gt;PGID&lt;/code&gt;. If you don&#39;t give the volume correct permissions, the container may not start.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Ports&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;8000&lt;/code&gt;: Jetbrains License Server HTTP port&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Docker Compose&lt;/h3&gt; &#xA;&lt;p&gt;Docker compose is the recommended way to run this image. Copy the content of folder &lt;a href=&#34;https://raw.githubusercontent.com/crazy-max/docker-jetbrains-license-server/master/examples/compose&#34;&gt;examples/compose&lt;/a&gt; in &lt;code&gt;/var/jls/&lt;/code&gt; on your host for example. Edit the compose and env files with your preferences and run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up -d&#xA;docker-compose logs -f&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Command line&lt;/h3&gt; &#xA;&lt;p&gt;You can also use the following minimal command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d -p 8000:8000 --name jetbrains_license_server \&#xA;  -e TZ=&#34;Europe/Paris&#34; \&#xA;  -e JLS_VIRTUAL_HOSTS=jls.example.com \&#xA;  -v $(pwd)/data:/data \&#xA;  crazymax/jetbrains-license-server:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Upgrade&lt;/h2&gt; &#xA;&lt;p&gt;Recreate the container whenever I push an update:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose pull&#xA;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;p&gt;If you have any trouble using the license server, check the official &lt;a href=&#34;https://www.jetbrains.com/help/license_server/troubleshooting.html&#34;&gt;Troubleshooting page&lt;/a&gt; of Jetbrains.&lt;/p&gt; &#xA;&lt;h3&gt;Error 403 Passed value of header &#34;Host&#34; is not allowed&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;ve got the following message :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Passed value of header &#34;Host&#34; is not allowed. Please contact your license server administrator.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s because the license server is running behind a reverse proxy. Please configure virtual hosts using the &lt;code&gt;JLS_VIRTUAL_HOSTS&lt;/code&gt; variable.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Want to contribute? Awesome! The most basic way to show your support is to star the project, or to raise issues. You can also support this project by &lt;a href=&#34;https://github.com/sponsors/crazy-max&#34;&gt;&lt;strong&gt;becoming a sponsor on GitHub&lt;/strong&gt;&lt;/a&gt; or by making a &lt;a href=&#34;https://www.paypal.me/crazyws&#34;&gt;Paypal donation&lt;/a&gt; to ensure this journey continues indefinitely!&lt;/p&gt; &#xA;&lt;p&gt;Thanks again for your support, it is much appreciated! &lt;span&gt;🙏&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT. See &lt;code&gt;LICENSE&lt;/code&gt; for more details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/vscode-remote-try-python</title>
    <updated>2022-05-29T02:08:06Z</updated>
    <id>tag:github.com,2022-05-29:/microsoft/vscode-remote-try-python</id>
    <link href="https://github.com/microsoft/vscode-remote-try-python" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Python sample project for trying out the VS Code Remote - Containers extension&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Try Out Development Containers: Python&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/microsoft/vscode-remote-try-python&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Remote%20-%20Containers&amp;amp;message=Open&amp;amp;color=blue&amp;amp;logo=visualstudiocode&#34; alt=&#34;Open in Remote - Containers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A &lt;strong&gt;development container&lt;/strong&gt; is a running &lt;a href=&#34;https://www.docker.com&#34;&gt;Docker&lt;/a&gt; container with a well-defined tool/runtime stack and its prerequisites. You can try out development containers with &lt;strong&gt;&lt;a href=&#34;https://github.com/features/codespaces&#34;&gt;GitHub Codespaces&lt;/a&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;a href=&#34;https://aka.ms/vscode-remote/containers&#34;&gt;Visual Studio Code Remote - Containers&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is a sample project that lets you try out either option in a few easy steps. We have a variety of other &lt;a href=&#34;https://github.com/search?q=org%3Amicrosoft+vscode-remote-try-&amp;amp;type=Repositories&#34;&gt;vscode-remote-try-*&lt;/a&gt; sample projects, too.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you already have a codespace or dev container, you can jump to the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/vscode-remote-try-python/main/#things-to-try&#34;&gt;Things to try&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Setting up the development container&lt;/h2&gt; &#xA;&lt;h3&gt;GitHub Codespaces&lt;/h3&gt; &#xA;&lt;p&gt;Follow these steps to open this sample in a Codespace:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Click the Code drop-down menu and select the &lt;strong&gt;Open with Codespaces&lt;/strong&gt; option.&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;strong&gt;+ New codespace&lt;/strong&gt; at the bottom on the pane.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For more information on creating your codespace, visit the &lt;a href=&#34;https://docs.github.com/en/free-pro-team@latest/github/developing-online-with-codespaces/creating-a-codespace#creating-a-codespace&#34;&gt;GitHub documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;VS Code Remote - Containers&lt;/h3&gt; &#xA;&lt;p&gt;If you already have VS Code and Docker installed, you can click the badge above or &lt;a href=&#34;https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/microsoft/vscode-remote-try-python&#34;&gt;here&lt;/a&gt; to get started. Clicking these links will cause VS Code to automatically install the Remote - Containers extension if needed, clone the source code into a container volume, and spin up a dev container for use.&lt;/p&gt; &#xA;&lt;p&gt;Follow these steps to open this sample in a container using the VS Code Remote - Containers extension:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;If this is your first time using a development container, please ensure your system meets the prerequisites (i.e. have Docker installed) in the &lt;a href=&#34;https://aka.ms/vscode-remote/containers/getting-started&#34;&gt;getting started steps&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To use this repository, you can either open the repository in an isolated Docker volume:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Press &lt;kbd&gt;F1&lt;/kbd&gt; and select the &lt;strong&gt;Remote-Containers: Try a Sample...&lt;/strong&gt; command.&lt;/li&gt; &#xA;   &lt;li&gt;Choose the &#34;Python&#34; sample, wait for the container to start, and try things out! &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Under the hood, this will use the &lt;strong&gt;Remote-Containers: Clone Repository in Container Volume...&lt;/strong&gt; command to clone the source code in a Docker volume instead of the local filesystem. &lt;a href=&#34;https://docs.docker.com/storage/volumes/&#34;&gt;Volumes&lt;/a&gt; are the preferred mechanism for persisting container data.&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;Or open a locally cloned copy of the code:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Clone this repository to your local filesystem.&lt;/li&gt; &#xA;   &lt;li&gt;Press &lt;kbd&gt;F1&lt;/kbd&gt; and select the &lt;strong&gt;Remote-Containers: Open Folder in Container...&lt;/strong&gt; command.&lt;/li&gt; &#xA;   &lt;li&gt;Select the cloned copy of this folder, wait for the container to start, and try things out!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Things to try&lt;/h2&gt; &#xA;&lt;p&gt;Once you have this sample opened, you&#39;ll be able to work with it like you would locally.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This container runs as a non-root user with sudo access by default. Comment out &lt;code&gt;&#34;remoteUser&#34;: &#34;vscode&#34;&lt;/code&gt; in &lt;code&gt;.devcontainer/devcontainer.json&lt;/code&gt; if you&#39;d prefer to run as root.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Some things to try:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Open &lt;code&gt;app.py&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Try adding some code and check out the language features.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Terminal:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Press &lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;shift&lt;/kbd&gt;+&lt;kbd&gt;`&lt;/kbd&gt; to open a terminal window.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Type &lt;code&gt;python -m flask run --port 9000 --no-debugger --no-reload&lt;/code&gt; to run the app.&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;The terminal will say your app is &lt;code&gt;Running on http://127.0.0.1:9000/&lt;/code&gt;. Click on the link in the terminal to view your app running in the browser.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Notice that the Python extension is already installed in the container since the &lt;code&gt;.devcontainer/devcontainer.json&lt;/code&gt; lists &lt;code&gt;&#34;ms-python.python&#34;&lt;/code&gt; as an extension to install automatically when the container is created.&lt;/p&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; If you use this container outside of VS Code via &lt;code&gt;docker run&lt;/code&gt; with &lt;code&gt;-p 9000&lt;/code&gt;, you may need to append &lt;code&gt;--host 0.0.0.0&lt;/code&gt; to the command above. The &lt;code&gt;-p&lt;/code&gt; option &#34;publishes&#34; the port rather than forwarding it. It therefore will not work if the application only listens to localhost. The &lt;code&gt;forwardPorts&lt;/code&gt; property in &lt;code&gt;devcontainer.json&lt;/code&gt; does not have this limitation, but you can use &lt;code&gt;appPort&lt;/code&gt; property instead if you want to mirror the &lt;code&gt;docker run&lt;/code&gt; behavior.&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Build, Run, and Debug:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Open &lt;code&gt;app.py&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Add a breakpoint (e.g. on line 9).&lt;/li&gt; &#xA;   &lt;li&gt;Press &lt;kbd&gt;F5&lt;/kbd&gt; to launch the app in the container.&lt;/li&gt; &#xA;   &lt;li&gt;Once the breakpoint is hit, try hovering over variables (e.g. the app variable on line 7), examining locals, and more.&lt;/li&gt; &#xA;   &lt;li&gt;Continue (&lt;kbd&gt;F5&lt;/kbd&gt;). You can connect to the server in the container by either: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Clicking on &lt;code&gt;Open in Browser&lt;/code&gt; in the notification telling you: &lt;code&gt;Your service running on port 9000 is available&lt;/code&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;Clicking the globe icon in the &#39;Ports&#39; view. The &#39;Ports&#39; view gives you an organized table of your forwarded ports, and you can access it with the command &lt;strong&gt;Ports: Focus on Ports View&lt;/strong&gt;.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Notice port 9000 in the &#39;Ports&#39; view is labeled &#34;Hello Remote World.&#34; In &lt;code&gt;devcontainer.json&lt;/code&gt;, you can set &lt;code&gt;&#34;portsAttributes&#34;&lt;/code&gt;, such as a label for your forwarded ports and the action to be taken when the port is autoforwarded.&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In Remote - Containers, you can access your app at &lt;code&gt;http://localhost:9000&lt;/code&gt; in a local browser. But in a browser-based Codespace, you must click the link from the notification or the &lt;code&gt;Ports&lt;/code&gt; view so that the service handles port forwarding in the browser and generates the correct URL.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Rebuild or update your container&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;You may want to make changes to your container, such as installing a different version of a software or forwarding a new port. You&#39;ll rebuild your container for your changes to take effect.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Open browser automatically:&lt;/strong&gt; As an example change, let&#39;s update the &lt;code&gt;portsAttributes&lt;/code&gt; in the &lt;code&gt;.devcontainer/devcontainer.json&lt;/code&gt; file to open a browser when our port is automatically forwarded.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Open the &lt;code&gt;.devcontainer/devcontainer.json&lt;/code&gt; file.&lt;/li&gt; &#xA;   &lt;li&gt;Modify the &lt;code&gt;&#34;onAutoForward&#34;&lt;/code&gt; attribute in your &lt;code&gt;portsAttributes&lt;/code&gt; from &lt;code&gt;&#34;notify&#34;&lt;/code&gt; to &lt;code&gt;&#34;openBrowser&#34;&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Press &lt;kbd&gt;F1&lt;/kbd&gt; and select the &lt;strong&gt;Remote-Containers: Rebuild Container&lt;/strong&gt; or &lt;strong&gt;Codespaces: Rebuild Container&lt;/strong&gt; command so the modifications are picked up.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;More samples&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/python-sample-tweeterapp&#34;&gt;Tweeter App - Python and Django&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.microsoft.com&#34;&gt;https://cla.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright © Microsoft Corporation All rights reserved.&lt;br&gt; Licensed under the MIT License. See LICENSE in the project root for license information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>saha-rajdeep/kubernetescode</title>
    <updated>2022-05-29T02:08:06Z</updated>
    <id>tag:github.com,2022-05-29:/saha-rajdeep/kubernetescode</id>
    <link href="https://github.com/saha-rajdeep/kubernetescode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;What this does?&lt;/h2&gt; &#xA;&lt;p&gt;This repo along with &lt;a href=&#34;https://github.com/saha-rajdeep/kubernetesmanifest&#34;&gt;https://github.com/saha-rajdeep/kubernetesmanifest&lt;/a&gt; creates a Jenkins pipeline with GitOps to deploy code into a Kubernetes cluster. CI part is done via Jenkins and CD part via ArgoCD (GitOps).&lt;/p&gt; &#xA;&lt;h2&gt;Jenkins installation&lt;/h2&gt; &#xA;&lt;p&gt;Jenkins is installed on EC2. Follow the instructions on &lt;a href=&#34;https://www.jenkins.io/doc/tutorials/tutorial-for-installing-jenkins-on-AWS/&#34;&gt;https://www.jenkins.io/doc/tutorials/tutorial-for-installing-jenkins-on-AWS/&lt;/a&gt; . You can skip &#34;Configure a Cloud&#34; part for this demo. Please note some commands from this link might give errors, below are the workarounds:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;If you get daemonize error while running the command &lt;code&gt;sudo yum install jenkins java-1.8.0-openjdk-devel -y&lt;/code&gt; then , run the commands from the answer of &lt;a href=&#34;https://stackoverflow.com/questions/68806741/how-to-fix-yum-update-of-jenkins&#34;&gt;https://stackoverflow.com/questions/68806741/how-to-fix-yum-update-of-jenkins&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Docker on the EC2 after Jenkins is installed by following the instructions on &lt;a href=&#34;https://serverfault.com/questions/836198/how-to-install-docker-on-aws-ec2-instance-with-ami-ce-ee-update&#34;&gt;https://serverfault.com/questions/836198/how-to-install-docker-on-aws-ec2-instance-with-ami-ce-ee-update&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;sudo chmod 666 /var/run/docker.sock&lt;/code&gt; on the EC2 after Docker is installed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Git on the EC2 by running &lt;code&gt;sudo yum install git&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Jenkins plugins&lt;/h3&gt; &#xA;&lt;p&gt;Install the following plugins for the demo.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Amazon EC2 plugin (No need to set up Configure Cloud after)&lt;/li&gt; &#xA; &lt;li&gt;Docker plugin&lt;/li&gt; &#xA; &lt;li&gt;Docker Pipeline&lt;/li&gt; &#xA; &lt;li&gt;GitHub Integration Plugin&lt;/li&gt; &#xA; &lt;li&gt;Parameterized trigger Plugin&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ArgoCD installation&lt;/h2&gt; &#xA;&lt;p&gt;Install ArgoCD in your Kubernetes cluster following this link - &lt;a href=&#34;https://argo-cd.readthedocs.io/en/stable/getting_started/&#34;&gt;https://argo-cd.readthedocs.io/en/stable/getting_started/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to run!&lt;/h2&gt; &#xA;&lt;p&gt;Follow along with my Udemy Kubernetes course lectures (GitOps Chapter) to understand how it works, detailed setup instructions, with step by step demo. My highest rated Kubernetes EKS discounted Udemy course link in &lt;a href=&#34;http://www.cloudwithraj.com&#34;&gt;www.cloudwithraj.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>aschmelyun/docker-compose-laravel</title>
    <updated>2022-05-29T02:08:06Z</updated>
    <id>tag:github.com,2022-05-29:/aschmelyun/docker-compose-laravel</id>
    <link href="https://github.com/aschmelyun/docker-compose-laravel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A docker-compose workflow for local Laravel development&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;docker-compose-laravel&lt;/h1&gt; &#xA;&lt;p&gt;A pretty simplified Docker Compose workflow that sets up a LEMP network of containers for local Laravel development. You can view the full article that inspired this repo &lt;a href=&#34;https://dev.to/aschmelyun/the-beauty-of-docker-for-local-laravel-development-13c0&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitnft.quine.sh/app/commits/list/repo/docker-compose-laravel&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%94%AE-Open%20in%20GitNFT-darkviolet?style=flat&#34; alt=&#34;GitNFT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To get started, make sure you have &lt;a href=&#34;https://docs.docker.com/docker-for-mac/install/&#34;&gt;Docker installed&lt;/a&gt; on your system, and then clone this repository.&lt;/p&gt; &#xA;&lt;p&gt;Next, navigate in your terminal to the directory you cloned this, and spin up the containers for the web server by running &lt;code&gt;docker-compose up -d --build site&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After that completes, follow the steps from the &lt;a href=&#34;https://raw.githubusercontent.com/aschmelyun/docker-compose-laravel/main/src/README.md&#34;&gt;src/README.md&lt;/a&gt; file to get your Laravel project added in (or create a new blank one).&lt;/p&gt; &#xA;&lt;p&gt;Bringing up the Docker Compose network with &lt;code&gt;site&lt;/code&gt; instead of just using &lt;code&gt;up&lt;/code&gt;, ensures that only our site&#39;s containers are brought up at the start, instead of all of the command containers as well. The following are built for our web server, with their exposed ports detailed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;nginx&lt;/strong&gt; - &lt;code&gt;:80&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;mysql&lt;/strong&gt; - &lt;code&gt;:3306&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;php&lt;/strong&gt; - &lt;code&gt;:9000&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;redis&lt;/strong&gt; - &lt;code&gt;:6379&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;mailhog&lt;/strong&gt; - &lt;code&gt;:8025&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Three additional containers are included that handle Composer, NPM, and Artisan commands &lt;em&gt;without&lt;/em&gt; having to have these platforms installed on your local computer. Use the following command examples from your project root, modifying them to fit your particular use case.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;docker-compose run --rm composer update&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docker-compose run --rm npm run dev&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docker-compose run --rm artisan migrate&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Permissions Issues&lt;/h2&gt; &#xA;&lt;p&gt;If you encounter any issues with filesystem permissions while visiting your application or running a container command, try completing one of the sets of steps below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you are using your server or local environment as the root user:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bring any container(s) down with &lt;code&gt;docker-compose down&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rename &lt;code&gt;docker-compose.root.yml&lt;/code&gt; file to &lt;code&gt;docker-compose.root.yml&lt;/code&gt;, replacing the previous one&lt;/li&gt; &#xA; &lt;li&gt;Re-build the containers by running &lt;code&gt;docker-compose build --no-cache&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you are using your server or local environment as a user that is not root:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bring any container(s) down with &lt;code&gt;docker-compose down&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;In your terminal, run &lt;code&gt;export UID=$(id -u)&lt;/code&gt; and then &lt;code&gt;export GID=$(id -g)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;If you see any errors about readonly variables from the above step, you can ignore them and continue&lt;/li&gt; &#xA; &lt;li&gt;Re-build the containers by running &lt;code&gt;docker-compose build --no-cache&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then, either bring back up your container network or re-run the command you were trying before, and see if that fixes it.&lt;/p&gt; &#xA;&lt;h2&gt;Persistent MySQL Storage&lt;/h2&gt; &#xA;&lt;p&gt;By default, whenever you bring down the Docker network, your MySQL data will be removed after the containers are destroyed. If you would like to have persistent data that remains after bringing containers down and back up, do the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a &lt;code&gt;mysql&lt;/code&gt; folder in the project root, alongside the &lt;code&gt;nginx&lt;/code&gt; and &lt;code&gt;src&lt;/code&gt; folders.&lt;/li&gt; &#xA; &lt;li&gt;Under the mysql service in your &lt;code&gt;docker-compose.yml&lt;/code&gt; file, add the following lines:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;volumes:&#xA;  - ./mysql:/var/lib/mysql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using BrowserSync with Laravel Mix&lt;/h2&gt; &#xA;&lt;p&gt;If you want to enable the hot-reloading that comes with Laravel Mix&#39;s BrowserSync option, you&#39;ll have to follow a few small steps. First, ensure that you&#39;re using the updated &lt;code&gt;docker-compose.yml&lt;/code&gt; with the &lt;code&gt;:3000&lt;/code&gt; and &lt;code&gt;:3001&lt;/code&gt; ports open on the npm service. Then, add the following to the end of your Laravel project&#39;s &lt;code&gt;webpack.mix.js&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;.browserSync({&#xA;    proxy: &#39;site&#39;,&#xA;    open: false,&#xA;    port: 3000,&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From your terminal window at the project root, run the following command to start watching for changes with the npm container and its mapped ports:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose run --rm --service-ports npm run watch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That should keep a small info pane open in your terminal (which you can exit with Ctrl + C). Visiting &lt;a href=&#34;http://localhost:3000&#34;&gt;localhost:3000&lt;/a&gt; in your browser should then load up your Laravel application with BrowserSync enabled and hot-reloading active.&lt;/p&gt; &#xA;&lt;h2&gt;MailHog&lt;/h2&gt; &#xA;&lt;p&gt;The current version of Laravel (8 as of today) uses MailHog as the default application for testing email sending and general SMTP work during local development. Using the provided Docker Hub image, getting an instance set up and ready is simple and straight-forward. The service is included in the &lt;code&gt;docker-compose.yml&lt;/code&gt; file, and spins up alongside the webserver and database services.&lt;/p&gt; &#xA;&lt;p&gt;To see the dashboard and view any emails coming through the system, visit &lt;a href=&#34;http://localhost:8025&#34;&gt;localhost:8025&lt;/a&gt; after running &lt;code&gt;docker-compose up -d site&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sou6av/raganork-md-deploy</title>
    <updated>2022-05-29T02:08:06Z</updated>
    <id>tag:github.com,2022-05-29:/sou6av/raganork-md-deploy</id>
    <link href="https://github.com/sou6av/raganork-md-deploy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Just fork this. No need of editing files :)&lt;/h1&gt;</summary>
  </entry>
  <entry>
    <title>lightrun-platform/koolkits</title>
    <updated>2022-05-29T02:08:06Z</updated>
    <id>tag:github.com,2022-05-29:/lightrun-platform/koolkits</id>
    <link href="https://github.com/lightrun-platform/koolkits" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🧰 Opinionated, language-specific, batteries-included debug container images for Kubernetes.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lightrun-platform/koolkits/main/assets/logo.png&#34; alt=&#34;KoolKits logo&#34;&gt; &#xA;&lt;h1&gt;🧰 KoolKits 🧰&lt;/h1&gt; &#xA;&lt;p&gt;Opinionated, language-specific, batteries-included debug container images for Kubernetes.&lt;/p&gt; &#xA;&lt;p&gt;Available for:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/lightrun-platform/koolkits/tree/main/nodejs&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/node.js-6DA55F?style=for-the-badge&amp;amp;logo=node.js&amp;amp;logoColor=white&#34; alt=&#34;NodeJS&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/lightrun-platform/koolkits/tree/main/python&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/python-3670A0?style=for-the-badge&amp;amp;logo=python&amp;amp;logoColor=ffdd54&#34; alt=&#34;Python&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/lightrun-platform/koolkits/tree/main/jvm&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/java-%23ED8B00.svg?style=for-the-badge&amp;amp;logo=java&amp;amp;logoColor=white&#34; alt=&#34;Java&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/lightrun-platform/koolkits/tree/main/golang&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/go-%2300ADD8.svg?style=for-the-badge&amp;amp;logo=go&amp;amp;logoColor=white&#34; alt=&#34;Go&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;KoolKits (&lt;strong&gt;K&lt;/strong&gt;ubernetes t&lt;strong&gt;oolkits&lt;/strong&gt;) are language-specific container images that contain a (highly-opinionated) set of tools for debugging applications running in Kubernetes pods. You can read more about the motivation behind this project &lt;a href=&#34;https://raw.githubusercontent.com/lightrun-platform/koolkits/main/#Motivation&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Prefer video to reading? We have you covered:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=xRsdA4EGUlE&#34;&gt;&lt;img src=&#34;https://i.imgur.com/UZvVnT9.png&#34; alt=&#34;Watch the video&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Those images are intended for use with the new &lt;code&gt;kubectl debug&lt;/code&gt; feature, which spins up &lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/pods/ephemeral-containers/&#34;&gt;Ephemeral containers&lt;/a&gt; for interactive troubleshooting. A KoolKit will be pulled by &lt;code&gt;kubectl debug&lt;/code&gt;, spun up as a container in your pod, and have the ability to access the same process namespace as your original container.&lt;/p&gt; &#xA;&lt;p&gt;Since production containers are usually &lt;strong&gt;&lt;a href=&#34;https://cloud.google.com/architecture/best-practices-for-building-containers#remove_unnecessary_tools&#34;&gt;rather bare&lt;/a&gt;&lt;/strong&gt;, using a KoolKit enables you to &lt;strong&gt;troubleshoot with power tools&lt;/strong&gt; instead of relying on what was left behind due to the generosity (or carelessness) of whoever originally built the production image.&lt;/p&gt; &#xA;&lt;h2&gt;🏁 Quickstart 🏁&lt;/h2&gt; &#xA;&lt;p&gt;Run a Node.js KoolKit in your production cluster (Kubernetes v1.23 and above):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;kubectl debug -it &amp;lt;POD-NAME&amp;gt; --image=lightrun-platform/koolkits/koolkit-node --image-pull-policy=Never --target=&amp;lt;DEPLOYMENT-NAME&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run a JVM KoolKit in MiniKube (Kubernetes v1.23 and above):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;minikube kubectl -- debug -it &amp;lt;POD-NAME&amp;gt; --image=lightrun-platform/koolkits/koolkit-jvm --image-pull-policy=Never --target=&amp;lt;DEPLOYMENT-NAME&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Adding to &lt;code&gt;.bashrc&lt;/code&gt;/&lt;code&gt;.zshrc&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;You can use KoolKits faster by adding the following function to your &lt;code&gt;.bashrc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#34;## KoolKits - Shorthand&#xA;kk() {&#xA;&#x9;kubectl debug -it $1 --image=lightruncom/koolkits:$2 --image-pull-policy=Never --target=$3&#xA;}&#34; &amp;gt;&amp;gt; ~/.bashrc&#xA;source ~/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or into your &lt;code&gt;.zshrc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;echo &#34;## KoolKits - Shorthand&#xA;kk() { &#xA;&#x9;kubectl debug -it $1 --image=lightruncom/koolkits:$2 --image-pull-policy=Never --target=$3&#xA;}&#34; &amp;gt;&amp;gt; ~/.zshrc&#xA;source ~/.zshrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;kk&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kk demo-123123-qweqwe2 jvm demo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where the full syntax is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;kk &amp;lt;POD-NAME&amp;gt; &amp;lt;LANGUAGE&amp;gt; &amp;lt;DEPLOYMENT-NAME&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;👇 Available KoolKits 👇&lt;/h2&gt; &#xA;&lt;p&gt;Each of the folders in this repo contains the Dockerfile - and a short explanation of - the debug image. All KoolKits are based on the &lt;a href=&#34;https://hub.docker.com/layers/ubuntu/library/ubuntu/20.04/images/sha256-57df66b9fc9ce2947e434b4aa02dbe16f6685e20db0c170917d4a1962a5fe6a9?context=explore&#34;&gt;&lt;code&gt;ubuntu:20.04&lt;/code&gt;&lt;/a&gt; base image, since real people need real shells.&lt;/p&gt; &#xA;&lt;p&gt;The list:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lightrun-platform/koolkits/main/jvm/README.md&#34;&gt;&lt;code&gt;koolkit-jvm&lt;/code&gt;&lt;/a&gt; - AdoptOpenJDK 17.0.2 &amp;amp; related tooling (including &lt;code&gt;jabba&lt;/code&gt; for easy version management and Maven 3.8.4)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lightrun-platform/koolkits/main/nodejs/README.md&#34;&gt;&lt;code&gt;koolkit-node&lt;/code&gt;&lt;/a&gt; - Node 16.13.1 &amp;amp; related tooling (including &lt;code&gt;nvm&lt;/code&gt; for easy version management)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lightrun-platform/koolkits/main/python/README.md&#34;&gt;&lt;code&gt;koolkit-python&lt;/code&gt;&lt;/a&gt; - Python 3.10.2 &amp;amp; related tooling (including &lt;code&gt;pyenv&lt;/code&gt; for easy version management)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lightrun-platform/koolkits/main/golang/README.md&#34;&gt;&lt;code&gt;koolkit-golang&lt;/code&gt;&lt;/a&gt; - Go 1.17.6 &amp;amp; related tooling (including &lt;code&gt;gvm&lt;/code&gt; for easy version management)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Note that you don&#39;t actually have to build them yourselves - all KoolKits are hosted publicly on &lt;a href=&#34;https://hub.docker.com/repository/docker/lightruncom/koolkits&#34;&gt;Docker Hub&lt;/a&gt; and available free of charge.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Got a suggestion for improvements?&lt;/strong&gt; We&#39;d be happy to hear all about it - just open an issue with the requested tooling.&lt;/p&gt; &#xA;&lt;h2&gt;🚧 Coming up / WIP 🚧&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; A whole new, Go 1.17.7 KoolKit &lt;em&gt;(released on March 2022)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; JVM KoolKit - &lt;a href=&#34;https://github.com/uber-common/jvm-profiler&#34;&gt;&lt;code&gt;jvm-profiler&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/giltene/jHiccup&#34;&gt;&lt;code&gt;jHiccup&lt;/code&gt;&lt;/a&gt; support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Node.js KoolKit - &lt;a href=&#34;https://github.com/nodejs/llnode&#34;&gt;&lt;code&gt;llnode&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/sfninja/thetool&#34;&gt;&lt;code&gt;thetool&lt;/code&gt;&lt;/a&gt; support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Python KoolKit - &lt;a href=&#34;https://github.com/CCExtractor/vardbg&#34;&gt;&lt;code&gt;vardbg&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/jmdana/memprof&#34;&gt;&lt;code&gt;memprof&lt;/code&gt;&lt;/a&gt; support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🏃 Motivation 🏃&lt;/h2&gt; &#xA;&lt;p&gt;There&#39;s a &lt;a href=&#34;https://cloud.google.com/blog/products/containers-kubernetes/kubernetes-best-practices-how-and-why-to-build-small-container-images&#34;&gt;well-known Kubernetes best practice&lt;/a&gt; that states that one should build &lt;strong&gt;small&lt;/strong&gt; container images. This makes sense for a few different reasons:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Building the image will consume less resources (aka CI hours)&lt;/li&gt; &#xA; &lt;li&gt;Pulling the image will take less time (who wants to pay for so much ingress anyways?)&lt;/li&gt; &#xA; &lt;li&gt;Less stuff means less surface area exposed to security vulnerabilities, in a &lt;a href=&#34;https://en.wikipedia.org/wiki/Log4Shell&#34;&gt;world where even no-op logging isn&#39;t safe anymore&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;There&#39;s also a lot of tooling in existence that helps you get there without doing too much heavy lifting:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/alpine&#34;&gt;Alpine Linux&lt;/a&gt; base images are super small&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GoogleContainerTools/distroless&#34;&gt;DistroLess Docker images&lt;/a&gt; go a step further and remove everything but the runtime&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/develop/develop-images/multistage-build/&#34;&gt;Docker multi-stage builds&lt;/a&gt; help create thin final production images&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The problem starts when you&#39;re trying to debug what&#39;s happening inside those containers. By using a small production image you&#39;re forsaking a large amount of tools that are &lt;strong&gt;invaluable&lt;/strong&gt; when wrapping your head around a problem in your application.&lt;/p&gt; &#xA;&lt;p&gt;By using a KoolKit, you&#39;re allowing yourself the benefits of a small production image without compromising on quality tools - each KoolKit contains hand-picked tools for the specific runtime it represents, in addition to a more generic set of tooling for Linux-based systems.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;P.S. KoolKits was inspired by &lt;a href=&#34;https://github.com/huazhihao/kubespy&#34;&gt;&lt;code&gt;kubespy&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/nicolaka/netshoot&#34;&gt;&lt;code&gt;netshoot&lt;/code&gt;&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🗯️ Considerations 🗯️&lt;/h2&gt; &#xA;&lt;h3&gt;Size of Images&lt;/h3&gt; &#xA;&lt;p&gt;KoolKits Docker images tend to run, uhm, rather &lt;strong&gt;large&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;KoolKits are intended to be downloaded once, kept in the cluster&#39;s Docker registry, and then spun up immediately on demand as containers. Since they&#39;re not intended for constant pulling, and since they&#39;re intended to be packed with goodies, this is a side effect we&#39;re willing to endure.&lt;/p&gt; &#xA;&lt;h3&gt;Using Ubuntu base images&lt;/h3&gt; &#xA;&lt;p&gt;Part of the reason it&#39;s hard to create a really slim image is due to our decision to go with a full Ubuntu 20.04 system as the basis for each KoolKit. This mainly came from our desire to replicate the same environment you would debug with locally inside your clusters.&lt;/p&gt; &#xA;&lt;p&gt;For example, this means no messing around with Alpine alternatives to normal Ubuntu packages you&#39;re used to working with. Actually, this means we have a way of including tools &lt;strong&gt;that have no Alpine versions&lt;/strong&gt; in each KoolKit.&lt;/p&gt; &#xA;&lt;h3&gt;Using language version managers&lt;/h3&gt; &#xA;&lt;p&gt;Each KoolKit uses (wherever possible) a language version manager instead of relying on language-specific distros. This is done to allow you to install older runtime versions easily, and in order to allow you to swap between runtime versions at will (for example, to get specific versions of tooling that only exist for specific runtime versions), as need be.&lt;/p&gt; &#xA;&lt;h2&gt;💗 Contribution 💗&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;d be more than happy to add tools we missed to any image - just &lt;a href=&#34;https://github.com/lightrun-platform/koolkits/pulls&#34;&gt;open a pull request&lt;/a&gt; or &lt;a href=&#34;https://github.com/lightrun-platform/koolkits/issues&#34;&gt;an issue&lt;/a&gt; to suggest one.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>remote-android/redroid-doc</title>
    <updated>2022-05-29T02:08:06Z</updated>
    <id>tag:github.com,2022-05-29:/remote-android/redroid-doc</id>
    <link href="https://github.com/remote-android/redroid-doc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ReDroid (Remote-Android) is a multi-arch, GPU enabled, Android in Container solution. Track issues / docs here&lt;/p&gt;&lt;hr&gt;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/remote-android/redroid-doc/master/README.zh-cn.md&#34;&gt;简体中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Table of contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remote-android/redroid-doc/master/#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remote-android/redroid-doc/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remote-android/redroid-doc/master/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remote-android/redroid-doc/master/#native-bridge-support&#34;&gt;Native Bridge Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remote-android/redroid-doc/master/#gms-support&#34;&gt;GMS Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remote-android/redroid-doc/master/#webrtc-streaming&#34;&gt;WebRTC Streaming&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remote-android/redroid-doc/master/#how-to-build&#34;&gt;How To Build&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remote-android/redroid-doc/master/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remote-android/redroid-doc/master/#note&#34;&gt;Note&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remote-android/redroid-doc/master/#contact-me&#34;&gt;Contact Me&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remote-android/redroid-doc/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;ReDroid&lt;/strong&gt; (&lt;em&gt;Re&lt;/em&gt;mote an&lt;em&gt;Droid&lt;/em&gt;) is a GPU accelerated AIC (Android In Container) solution. You can boot many instances in Linux host (&lt;code&gt;Docker&lt;/code&gt;, &lt;code&gt;podman&lt;/code&gt;, &lt;code&gt;k8s&lt;/code&gt; etc.). &lt;em&gt;ReDroid&lt;/em&gt; supports both &lt;code&gt;arm64&lt;/code&gt; and &lt;code&gt;amd64&lt;/code&gt; architectures. &lt;em&gt;ReDroid&lt;/em&gt; is suitable for Cloud Gaming, VMI (Virtual Mobile Infrastructure), Automation Test and more.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/remote-android/redroid-doc/master/assets/redroid11.png&#34; alt=&#34;Screenshot of ReDroid 11&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Currently supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android 13 Preview (&lt;code&gt;redroid/redroid:13.0.0-latest&lt;/code&gt;, &lt;code&gt;redroid/redroid:13.0.0-amd64&lt;/code&gt;, &lt;code&gt;redroid/redroid:13.0.0-arm64&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Android 12 (&lt;code&gt;redroid/redroid:12.0.0-latest&lt;/code&gt;, &lt;code&gt;redroid/redroid:12.0.0-amd64&lt;/code&gt;, &lt;code&gt;redroid/redroid:12.0.0-arm64&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Android 12 64bit only (&lt;code&gt;redroid/redroid:12.0.0_64only-latest&lt;/code&gt;, &lt;code&gt;redroid/redroid:12.0.0_64only-amd64&lt;/code&gt;, &lt;code&gt;redroid/redroid:12.0.0_64only-arm64&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Android 11 (&lt;code&gt;redroid/redroid:11.0.0-latest&lt;/code&gt;, &lt;code&gt;redroid/redroid:11.0.0-amd64&lt;/code&gt;, &lt;code&gt;redroid/redroid:11.0.0-arm64&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Android 10 (&lt;code&gt;redroid/redroid:10.0.0-latest&lt;/code&gt;, &lt;code&gt;redroid/redroid:10.0.0-amd64&lt;/code&gt;, &lt;code&gt;redroid/redroid:10.0.0-arm64&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Android 9 (&lt;code&gt;redroid/redroid:9.0.0-latest&lt;/code&gt;, &lt;code&gt;redroid/redroid:9.0.0-amd64&lt;/code&gt;, &lt;code&gt;redroid/redroid:9.0.0-arm64&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Android 8.1 (&lt;code&gt;redroid/redroid:8.1.0-latest&lt;/code&gt;, &lt;code&gt;redroid/redroid:8.1.0-amd64&lt;/code&gt;, &lt;code&gt;redroid/redroid:8.1.0-arm64&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Tested Platforms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ubuntu 16.04 / 18.04 / 20.04 (amd64 / arm64)&lt;/li&gt; &#xA; &lt;li&gt;Amazon Linux 2 (amd64 / arm64)&lt;/li&gt; &#xA; &lt;li&gt;Alibaba Cloud Linux 2 (amd64)&lt;/li&gt; &#xA; &lt;li&gt;Alibaba Cloud Linux 3 (amd64 / arm64)&lt;/li&gt; &#xA; &lt;li&gt;WSL 2 (Ubuntu) (amd64)&lt;/li&gt; &#xA; &lt;li&gt;CentOS (amd64*, arm64*)&lt;/li&gt; &#xA; &lt;li&gt;OpenEuler 20.03 (amd64, arm64*)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;* customized kernel required&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;ReDroid&lt;/em&gt; requires some kernel modules (&lt;code&gt;binderfs&lt;/code&gt;, &lt;code&gt;ashmem&lt;/code&gt; etc.). &lt;strong&gt;Check &lt;a href=&#34;https://github.com/remote-android/redroid-modules&#34;&gt;kernel modules&lt;/a&gt; to install these modules.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# start and connect via `scrcpy`&#xA;docker run -itd --rm --memory-swappiness=0 --privileged \&#xA;    --pull always \&#xA;    -v ~/data:/data \&#xA;    -p 5555:5555 \&#xA;    redroid/redroid:11.0.0-latest&#xA;&#xA;adb connect &amp;lt;IP&amp;gt;:5555&#xA;scrcpy --serial &amp;lt;IP&amp;gt;:5555&#xA;&#xA;## Explanation:&#xA;##   --pull always    -- be sure to use the latest image&#xA;##   -v ~/data:/data  -- mount data partition&#xA;##   -p 5555:5555     -- expose adb port, you can connect via `adb connect &amp;lt;HOST-IP&amp;gt;`&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;required params (already added in docker image)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;qemu=1&lt;/li&gt; &#xA; &lt;li&gt;androidboot.hardware=redroid&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;display params&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;redroid.width=720&lt;/li&gt; &#xA; &lt;li&gt;redroid.height=1280&lt;/li&gt; &#xA; &lt;li&gt;redroid.fps=15&lt;/li&gt; &#xA; &lt;li&gt;ro.sf.lcd_density=320&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Network:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;net.eth0.dns1=&#xA;  &lt;ip&gt;&lt;/ip&gt;&lt;/li&gt; &#xA; &lt;li&gt;net.eth0.proxy.type=[static|pac|none|unassigned]&lt;/li&gt; &#xA; &lt;li&gt;net.eth0.proxy.host=&#xA;  &lt;ip&gt;&lt;/ip&gt;&lt;/li&gt; &#xA; &lt;li&gt;net.eth0.proxy.port=&#xA;  &lt;port&gt;&lt;/port&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;GPU accelerating &lt;em&gt;ReDroid&lt;/em&gt; use mesa3d to accelerate 3D rendering. Currently tested platforms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;AMD (arm64, amd64 with &lt;code&gt;amdgpu&lt;/code&gt; driver)&lt;/li&gt; &#xA; &lt;li&gt;Intel (amd64 with &lt;code&gt;i915&lt;/code&gt; driver)&lt;/li&gt; &#xA; &lt;li&gt;virtio-gpu (vendor agnostic, arm64 and amd64)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;params:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;redroid.gpu.mode=[auto|host|guest]&lt;/li&gt; &#xA; &lt;li&gt;redroid.gpu.node=[/dev/dri/renderDxxx]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;NOTE: you can override system props prefixed with &lt;code&gt;qemu.&lt;/code&gt; or &lt;code&gt;ro.&lt;/code&gt;. for example, you can set &lt;code&gt;ro.secure=0&lt;/code&gt;, then you can get root adb shell by default.&lt;/p&gt; &#xA;&lt;h2&gt;Native Bridge Support&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s possible to run &lt;code&gt;arm&lt;/code&gt; Apps in &lt;code&gt;x86&lt;/code&gt; &lt;em&gt;ReDroid&lt;/em&gt; instance via &lt;code&gt;libhoudini&lt;/code&gt;, &lt;code&gt;libndk_translator&lt;/code&gt; or &lt;code&gt;QEMU translator&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Take &lt;code&gt;libndk_translator&lt;/code&gt; as an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# grab libndk_translator libs from Android 11 Emulator&#xA;find /system \( -name &#39;libndk_translation*&#39; -o -name &#39;*arm*&#39; -o -name &#39;ndk_translation*&#39; \) | tar -cf native-bridge.tar -T -&#xA;&#xA;# example structure, be careful the file owner and mode&#xA;&#xA;system/&#xA;├── bin&#xA;│&amp;nbsp;&amp;nbsp; ├── arm&#xA;│&amp;nbsp;&amp;nbsp; └── arm64&#xA;├── etc&#xA;│&amp;nbsp;&amp;nbsp; ├── binfmt_misc&#xA;│&amp;nbsp;&amp;nbsp; └── init&#xA;├── lib&#xA;│&amp;nbsp;&amp;nbsp; ├── arm&#xA;│&amp;nbsp;&amp;nbsp; └── libnb.so&#xA;└── lib64&#xA;    ├── arm64&#xA;    └── libnb.so&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;# Dockerfile&#xA;FROM redroid/redroid:11.0.0-amd64&#xA;&#xA;ADD native-bridge.tar /&#xA;&#xA;COPY factory.prop /factory/factory.prop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;# factory.prop&#xA;ro.product.cpu.abilist=x86_64,arm64-v8a,x86,armeabi-v7a,armeabi&#xA;ro.product.cpu.abilist64=x86_64,arm64-v8a&#xA;ro.product.cpu.abilist32=x86,armeabi-v7a,armeabi&#xA;ro.dalvik.vm.isa.arm=x86&#xA;ro.dalvik.vm.isa.arm64=x86_64&#xA;ro.enable.native.bridge.exec=1&#xA;ro.dalvik.vm.native.bridge=libndk_translation.so&#xA;ro.ndk_translation.version=0.2.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# build docker image&#xA;docker build . -t redroid:11.0.0-amd64-nb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Take a look at &lt;a href=&#34;https://gitlab.com/android-generic/android_vendor_google_emu-x86&#34;&gt;https://gitlab.com/android-generic/android_vendor_google_emu-x86&lt;/a&gt; to extract automatically libndk_translator from the Android 11 emulator images.&lt;/p&gt; &#xA;&lt;p&gt;After following the guide on &#34;Building&#34; section, you will get native-bridge.tar under vendor/google/emu-x86/proprietary.&lt;/p&gt; &#xA;&lt;p&gt;If you find errors in using libndk_translator, please try the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;YOU MUST HAVE binfmt_misc kernel module loaded for supporting other binaries formats! If you have not loaded it already:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo modprobe binfmt_misc&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or add binfmt_misc to /etc/modules to autoload it at boot (for example in Ubuntu).&lt;/p&gt; &lt;p&gt;Check your specific distribution wiki/docs if you don&#39;t have binfmt_misc module and you want to install it, or how to autoload the module at boot.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Extract the native bridge archive, preserving the permissions, set specific permissions for allowing init file to be executed and traverse of important dirs:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir native-bridge&#xA;cd native-bridge&#xA;sudo tar -xpf ../native-bridge.tar `#or path to your actual native bridge tarball`&#xA;sudo chmod 0644 system/etc/init/ndk_translation_arm64.rc&#xA;sudo chmod 0755 system/bin/arm&#xA;sudo chmod 0755 system/bin/arm64&#xA;sudo chmod 0755 system/lib/arm&#xA;sudo chmod 0755 system/lib64/arm64&#xA;sudo chmod 0644 system/etc/binfmt_misc/*&#xA;sudo tar -cpf native-bridge.tar system&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Move or copy your new native-bridge.tar into the dir where you have written your Dockerfile, and rebuild again the new image with native bridge support.&lt;/p&gt; &lt;p&gt;You must use sudo or a root shell to preserve the permissions and owners of the files.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;GMS Support&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s possible to add GMS (Google Mobile Service) support in &lt;em&gt;ReDroid&lt;/em&gt; via &lt;a href=&#34;https://opengapps.org/&#34;&gt;Open GApps&lt;/a&gt;, &lt;a href=&#34;https://microg.org/&#34;&gt;MicroG&lt;/a&gt; or &lt;a href=&#34;https://gitlab.com/MindTheGapps/vendor_gapps&#34;&gt;MindTheGapps&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;WebRTC Streaming&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;CALL FOR HELP&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Plan to port &lt;code&gt;WebRTC&lt;/code&gt; solutions from &lt;code&gt;cuttlefish&lt;/code&gt;, including frontend (HTML5), backend and many virtual HALs.&lt;/p&gt; &#xA;&lt;h2&gt;How To Build&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s Same as AOSP building process. But I suggest to use &lt;code&gt;docker&lt;/code&gt; to build.&lt;/p&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://raw.githubusercontent.com/remote-android/redroid-doc/master/android-builder-docker&#34;&gt;android-builder-docker&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Container disappeared immediately&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;make sure the required kernel modules are installed; run &lt;code&gt;dmesg -T&lt;/code&gt; for detailed logs&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Container running, but adb cannot connect (device offline etc.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;run &lt;code&gt;docker exec -it &amp;lt;container&amp;gt; sh&lt;/code&gt;, then check &lt;code&gt;ps -A&lt;/code&gt; and &lt;code&gt;logcat&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;try &lt;code&gt;dmesg -T&lt;/code&gt; if cannot get a container shell&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Note&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Kernel 5.7+, need enable &lt;code&gt;binderfs&lt;/code&gt; / &lt;code&gt;ashmem&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;redroid&lt;/code&gt; require &lt;code&gt;pid_max&lt;/code&gt; less than 65535, or else may run into problems. Change in host OS, or add &lt;code&gt;pid_max&lt;/code&gt; separation support in PID namespace&lt;/li&gt; &#xA; &lt;li&gt;SElinux is disabled in &lt;em&gt;ReDroid&lt;/em&gt;; possible enabled with &lt;a href=&#34;http://namei.org/presentations/selinux_namespacing_lca2018.pdf&#34;&gt;selinuxns POC&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sdcardfs&lt;/code&gt; currently not implemented, use &lt;code&gt;fuse&lt;/code&gt; instead; may need run &lt;code&gt;modprobe fuse&lt;/code&gt; first in some OS (AmazonLinux2 ?)&lt;/li&gt; &#xA; &lt;li&gt;CGroups errors ignored; some (&lt;code&gt;stune&lt;/code&gt; for example) not supported in generic linux.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;procfs&lt;/code&gt; not fully seperated with host OS; Community use &lt;code&gt;lxcfs&lt;/code&gt; and some cloud vendor (&lt;a href=&#34;https://github.com/Tencent/TencentOS-kernel&#34;&gt;TencentOS&lt;/a&gt;) enhanced in their own kernel.&lt;/li&gt; &#xA; &lt;li&gt;vintf verify disabled (since no kernel)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contact Me&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;mailto:ziyang.zhou@outlook.com&#34;&gt;ziyang.zhou@outlook.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;remote-android.slack.com (invite link: &lt;a href=&#34;https://join.slack.com/t/remote-android/shared_invite/zt-q40byk2o-YHUgWXmNIUC1nweQj0L9gA&#34;&gt;https://join.slack.com/t/remote-android/shared_invite/zt-q40byk2o-YHUgWXmNIUC1nweQj0L9gA&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;ReDroid&lt;/em&gt; itself is under &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License&lt;/a&gt;, since &lt;em&gt;ReDroid&lt;/em&gt; includes many 3rd party modules, you may need to examine license carefully.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;ReDroid&lt;/em&gt; kernel modules are under &lt;a href=&#34;https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html&#34;&gt;GPL v2&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Gusto/ruby</title>
    <updated>2022-05-29T02:08:06Z</updated>
    <id>tag:github.com,2022-05-29:/Gusto/ruby</id>
    <link href="https://github.com/Gusto/ruby" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Docker images for ruby (and ubuntu)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ruby&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/docker-library/ruby&#34;&gt;Docker Library&lt;/a&gt; doesn&#39;t &lt;a href=&#34;https://github.com/docker-library/ruby/issues/258&#34;&gt;support&lt;/a&gt; ruby + ubuntu, so we will build them for Gusto here&lt;/p&gt; &#xA;&lt;h1&gt;Details&lt;/h1&gt; &#xA;&lt;p&gt;You can find additional details in the &lt;a href=&#34;https://github.com/Gusto/ruby/raw/master/DESCRIPTION.md&#34;&gt;DESCRIPTION.md&lt;/a&gt; file&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>vulhub/vulhub</title>
    <updated>2022-05-29T02:08:06Z</updated>
    <id>tag:github.com,2022-05-29:/vulhub/vulhub</id>
    <link href="https://github.com/vulhub/vulhub" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Pre-Built Vulnerable Environments Based on Docker-Compose&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/vulhub/vulhub/master/.github/assets/logo.svg?sanitize=true&#34; alt=&#34;Vulhub&#34; height=&#34;300&#34;&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/vulhub/vulhub/raw/master/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/vulhub/vulhub.svg?sanitize=true&#34; alt=&#34;GitHub&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.wangan.com/vulhub&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Official-Community-blue.svg?sanitize=true&#34; alt=&#34;Official Community&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.gg/GhMB3Z&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/485505185167179778.svg?sanitize=true&#34; alt=&#34;Chat on Discord&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/phith0n&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/sponsor-patreon-73d6a1.svg?sanitize=true&#34; alt=&#34;Backers and sponors on Patreon&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vulhub#backer&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/backer-opencollective-f89a76.svg?sanitize=true&#34; alt=&#34;Backers and sponors on Opencollective&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;Vulhub is an open-source collection of pre-built vulnerable docker environments. No pre-existing knowledge of docker is required, just execute two simple commands and you have a vulnerable environment.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vulhub/vulhub/master/README.zh-cn.md&#34;&gt;中文版本(Chinese version)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the docker/docker-compose on Ubuntu 20.04:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install pip&#xA;curl -s https://bootstrap.pypa.io/get-pip.py | python3&#xA;&#xA;# Install the latest version docker&#xA;curl -s https://get.docker.com/ | sh&#xA;&#xA;# Run docker service&#xA;systemctl start docker&#xA;&#xA;# Install docker compose&#xA;pip install docker-compose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The installation steps of docker and docker-compose for other operating systems might be slightly different, please refer to the &lt;a href=&#34;https://docs.docker.com/&#34;&gt;docker documentation&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Download project&#xA;wget https://github.com/vulhub/vulhub/archive/master.zip -O vulhub-master.zip&#xA;unzip vulhub-master.zip&#xA;cd vulhub-master&#xA;&#xA;# Enter the directory of vulnerability/environment&#xA;cd flask/ssti&#xA;&#xA;# Compile environment&#xA;docker-compose build&#xA;&#xA;# Run environment&#xA;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is a &lt;strong&gt;README&lt;/strong&gt; document in each environment directory, please read this file for vulnerability/environment testing and usage.&lt;/p&gt; &#xA;&lt;p&gt;After the test, delete the environment with the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker-compose down -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is recommended to use a VPS of at least 1GB memory to build a vulnerability environment. The &lt;code&gt;your-ip&lt;/code&gt; mentioned in the documentation refers to the IP address of your VPS. If you are using a virtual machine, it refers to your virtual machine IP, not the IP inside the docker container.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;All environments in this project are for testing purposes only and should not be used as a production environment!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Notice&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;To prevent permission errors, it is best to use the root user to execute the docker and docker-compose commands.&lt;/li&gt; &#xA; &lt;li&gt;Some docker images do not support running on ARM machines.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;This project relies on docker. So any error during compilation and running are thrown by docker and related programs. Please find the cause of the error by yourself first. If it is determined that the dockerfile is written incorrectly (or the code is wrong in vulhub), then submit the issue. More details please 👉&lt;a href=&#34;https://github.com/phith0n/vulhub/wiki/%E7%BC%96%E8%AF%91%E5%A4%B1%E8%B4%A5%E7%9A%84%E5%8E%9F%E5%9B%A0&#34;&gt;Common reasons for compilation failure&lt;/a&gt;, hope it can help you.&lt;/p&gt; &#xA;&lt;p&gt;For more question, please contact:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.wangan.com/vulhub&#34;&gt;Chinese Community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/GhMB3Z&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/vulhub&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thanks for the following contributors:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/vulhub/vulhub/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/vulhub/contributors.svg?width=890&amp;amp;button=false&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;More contributors：&lt;a href=&#34;https://raw.githubusercontent.com/vulhub/vulhub/master/contributors.md&#34;&gt;Contributors List&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Partner&lt;/h2&gt; &#xA;&lt;p&gt;Our Partners and users:&lt;/p&gt; &#xA;&lt;p&gt; &lt;a href=&#34;https://www.wangan.com/vulhub&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://vulhub.org/img/sponsor/wangan.png&#34; width=&#34;200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.cvebase.com&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://vulhub.org/img/sponsor/cvebase.png&#34; width=&#34;200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.huoxian.cn&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://vulhub.org/img/sponsor/huoxian.png&#34; width=&#34;200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.chaitin.cn&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://vulhub.org/img/sponsor/chaitin.png&#34; width=&#34;200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://xianzhi.aliyun.com/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://vulhub.org/img/sponsor/aliyun.svg?sanitize=true&#34; width=&#34;200&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Sponsor vulhub on patreon 🙏&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.patreon.com/bePatron?u=12677520&#34;&gt;&lt;img src=&#34;https://vulhub.org/img/sponsor/patreon.png&#34; width=&#34;150&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sponsor vulhub on opencollective 🙏&lt;/p&gt; &#xA;&lt;p&gt; &lt;a href=&#34;https://opencollective.com/vulhub#backer&#34;&gt;&lt;img src=&#34;https://opencollective.com/vulhub/backers.svg?width=138&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vulhub#sponsor&#34;&gt;&lt;img src=&#34;https://opencollective.com/vulhub/sponsors.svg?width=138&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;More &lt;a href=&#34;http://vulhub.org/#/docs/donate/&#34;&gt;Donate&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Vulhub is licensed under the MIT License. See &lt;a href=&#34;https://raw.githubusercontent.com/vulhub/vulhub/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for the full license text.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>aws/aws-codebuild-docker-images</title>
    <updated>2022-05-29T02:08:06Z</updated>
    <id>tag:github.com,2022-05-29:/aws/aws-codebuild-docker-images</id>
    <link href="https://github.com/aws/aws-codebuild-docker-images" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official AWS CodeBuild repository for managed Docker images http://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref.html&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AWS CodeBuild curated Docker images&lt;/h1&gt; &#xA;&lt;p&gt;This repository holds Dockerfiles of official AWS CodeBuild curated Docker images. Please refer to &lt;a href=&#34;http://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref.html&#34;&gt;the AWS CodeBuild User Guide&lt;/a&gt; for list of environments supported by AWS CodeBuild.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://codebuild.us-west-2.amazonaws.com/badges?uuid=eyJlbmNyeXB0ZWREYXRhIjoiSkJibVVQVEpvUms1cmw3YVlnU1hSdkpBQ0c5SFgyTkJXMFBFdEU2SWtySHREcUlUVlRhbW4zMEd3NlhsOWIzUWgvRkxhUWVSSTFPZGNNakNHRVNLalY0PSIsIml2UGFyYW1ldGVyU3BlYyI6IlV0QjBRZXRvS0F5dE5vbTciLCJtYXRlcmlhbFNldFNlcmlhbCI6MX0%3D&amp;amp;branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The master branch will sometimes have changes that are still in the process of being released in AWS CodeBuild. See the latest released versions of the Dockerfiles &lt;a href=&#34;https://github.com/aws/aws-codebuild-docker-images/releases&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;How to build Docker images&lt;/h3&gt; &#xA;&lt;p&gt;Steps to build Standard 5.0 image&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;git clone https://github.com/aws/aws-codebuild-docker-images.git&lt;/code&gt; to download this repository to your local machine&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;cd ubuntu/standard/5.0&lt;/code&gt; to change the directory in your local workspace. This is the location of the Standard 5.0 Dockerfile with Ubuntu base.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;docker build -t aws/codebuild/standard:5.0 .&lt;/code&gt; to build Docker image locally&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To poke around in the image interactively, build it and run: &lt;code&gt;docker run -it --entrypoint sh aws/codebuild/standard:5.0 -c bash&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To let the Docker daemon start up in the container, build it and run: &lt;code&gt;docker run -it --privileged aws/codebuild/standard:5.0 bash&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/aws/aws-codebuild-docker-images.git&#xA;$ cd aws-codebuild-docker-images&#xA;$ cd ubuntu/standard/5.0&#xA;$ docker build -t aws/codebuild/standard:5.0 .&#xA;$ docker run -it --entrypoint sh aws/codebuild/standard:5.0 -c bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Image maintenance&lt;/h3&gt; &#xA;&lt;p&gt;Some of the images in this repository are no longer actively maintained by AWS CodeBuild and may no longer build successfully. These images will not receive any further updates. They remain in this repository as a reference for the contents of these images that were previously released by CodeBuild.&lt;/p&gt; &#xA;&lt;p&gt;The following images are actively maintained by AWS CodeBuild, and are listed in the CodeBuild console.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/aws-codebuild-docker-images/master/ubuntu/standard/3.0&#34;&gt;standard 3.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/aws-codebuild-docker-images/master/ubuntu/standard/4.0&#34;&gt;standard 4.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/aws-codebuild-docker-images/master/ubuntu/standard/5.0&#34;&gt;standard 5.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/aws-codebuild-docker-images/master/al2/x86_64/standard/2.0&#34;&gt;amazonlinux2-x86_64-standard:2.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/aws-codebuild-docker-images/master/al2/x86_64/standard/3.0&#34;&gt;amazonlinux2-x86_64-standard:3.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/aws-codebuild-docker-images/master/al2/aarch64/standard/1.0&#34;&gt;amazonlinux2-aarch64-standard:1.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/aws-codebuild-docker-images/master/al2/aarch64/standard/2.0&#34;&gt;amazonlinux2-aarch64-standard:2.0&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>dunglas/symfony-docker</title>
    <updated>2022-05-29T02:08:06Z</updated>
    <id>tag:github.com,2022-05-29:/dunglas/symfony-docker</id>
    <link href="https://github.com/dunglas/symfony-docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Docker-based installer and runtime for Symfony. Install: download and `docker-compose up`.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Symfony Docker&lt;/h1&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;-based installer and runtime for the &lt;a href=&#34;https://symfony.com&#34;&gt;Symfony&lt;/a&gt; web framework, with full &lt;a href=&#34;https://symfony.com/doc/current/weblink.html&#34;&gt;HTTP/2&lt;/a&gt;, HTTP/3 and HTTPS support.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dunglas/symfony-docker/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If not already done, &lt;a href=&#34;https://docs.docker.com/compose/install/&#34;&gt;install Docker Compose&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;docker-compose build --pull --no-cache&lt;/code&gt; to build fresh images&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;docker-compose up&lt;/code&gt; (the logs will be displayed in the current shell)&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;https://localhost&lt;/code&gt; in your favorite web browser and &lt;a href=&#34;https://stackoverflow.com/a/15076602/1352334&#34;&gt;accept the auto-generated TLS certificate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;docker-compose down --remove-orphans&lt;/code&gt; to stop the Docker containers.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Production, development and CI ready&lt;/li&gt; &#xA; &lt;li&gt;Automatic HTTPS (in dev and in prod!)&lt;/li&gt; &#xA; &lt;li&gt;HTTP/2, HTTP/3 and &lt;a href=&#34;https://symfony.com/doc/current/web_link.html&#34;&gt;Preload&lt;/a&gt; support&lt;/li&gt; &#xA; &lt;li&gt;Built-in &lt;a href=&#34;https://symfony.com/doc/current/mercure.html&#34;&gt;Mercure&lt;/a&gt; hub&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vulcain.rocks&#34;&gt;Vulcain&lt;/a&gt; support&lt;/li&gt; &#xA; &lt;li&gt;Just 2 services (PHP FPM and Caddy server)&lt;/li&gt; &#xA; &lt;li&gt;Super-readable configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Enjoy!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Docs&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dunglas/symfony-docker/main/docs/build.md&#34;&gt;Build options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dunglas/symfony-docker/main/docs/existing-project.md&#34;&gt;Using Symfony Docker with an existing project&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dunglas/symfony-docker/main/docs/extra-services.md&#34;&gt;Support for extra services&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dunglas/symfony-docker/main/docs/production.md&#34;&gt;Deploying in production&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dunglas/symfony-docker/main/docs/xdebug.md&#34;&gt;Installing Xdebug&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dunglas/symfony-docker/main/docs/makefile.md&#34;&gt;Using a Makefile&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dunglas/symfony-docker/main/docs/troubleshooting.md&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Created by &lt;a href=&#34;https://dunglas.fr&#34;&gt;Kévin Dunglas&lt;/a&gt;, co-maintained by &lt;a href=&#34;https://twitter.com/maxhelias&#34;&gt;Maxime Helias&lt;/a&gt; and sponsored by &lt;a href=&#34;https://les-tilleuls.coop&#34;&gt;Les-Tilleuls.coop&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sprintcube/docker-compose-lamp</title>
    <updated>2022-05-29T02:08:06Z</updated>
    <id>tag:github.com,2022-05-29:/sprintcube/docker-compose-lamp</id>
    <link href="https://github.com/sprintcube/docker-compose-lamp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A basic LAMP stack environment built using Docker Compose.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LAMP stack built with Docker Compose&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/43859895/141092846-905eae39-0169-4fd7-911f-9ff32c48b7e8.png&#34; alt=&#34;Landing Page&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A basic LAMP stack environment built using Docker Compose. It consists of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PHP&lt;/li&gt; &#xA; &lt;li&gt;Apache&lt;/li&gt; &#xA; &lt;li&gt;MySQL&lt;/li&gt; &#xA; &lt;li&gt;phpMyAdmin&lt;/li&gt; &#xA; &lt;li&gt;Redis&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As of now, we have several different PHP versions. Use appropriate php version as needed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;5.4.x&lt;/li&gt; &#xA; &lt;li&gt;5.6.x&lt;/li&gt; &#xA; &lt;li&gt;7.1.x&lt;/li&gt; &#xA; &lt;li&gt;7.2.x&lt;/li&gt; &#xA; &lt;li&gt;7.3.x&lt;/li&gt; &#xA; &lt;li&gt;7.4.x&lt;/li&gt; &#xA; &lt;li&gt;8.0.x&lt;/li&gt; &#xA; &lt;li&gt;8.1.x&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone this repository on your local computer&lt;/li&gt; &#xA; &lt;li&gt;configure .env as needed&lt;/li&gt; &#xA; &lt;li&gt;Run the &lt;code&gt;docker-compose up -d&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/sprintcube/docker-compose-lamp.git&#xA;cd docker-compose-lamp/&#xA;cp sample.env .env&#xA;// modify sample.env as needed&#xA;docker-compose up -d&#xA;// visit localhost&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your LAMP stack is now ready!! You can access it via &lt;code&gt;http://localhost&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration and Usage&lt;/h2&gt; &#xA;&lt;h3&gt;General Information&lt;/h3&gt; &#xA;&lt;p&gt;This Docker Stack is build for local development and not for production usage.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;This package comes with default configuration options. You can modify them by creating &lt;code&gt;.env&lt;/code&gt; file in your root directory. To make it easy, just copy the content from &lt;code&gt;sample.env&lt;/code&gt; file and update the environment variable values as per your need.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration Variables&lt;/h3&gt; &#xA;&lt;p&gt;There are following configuration variables available and you can customize them by overwritting in your own &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;PHP&lt;/h4&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;PHPVERSION&lt;/strong&gt;&lt;/em&gt; Is used to specify which PHP Version you want to use. Defaults always to latest PHP Version.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;PHP_INI&lt;/strong&gt;&lt;/em&gt; Define your custom &lt;code&gt;php.ini&lt;/code&gt; modification to meet your requirments.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Apache&lt;/h4&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;DOCUMENT_ROOT&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;It is a document root for Apache server. The default value for this is &lt;code&gt;./www&lt;/code&gt;. All your sites will go here and will be synced automatically.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;APACHE_DOCUMENT_ROOT&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Apache config file value. The default value for this is /var/www/html.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;VHOSTS_DIR&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is for virtual hosts. The default value for this is &lt;code&gt;./config/vhosts&lt;/code&gt;. You can place your virtual hosts conf files here.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Make sure you add an entry to your system&#39;s &lt;code&gt;hosts&lt;/code&gt; file for each virtual host.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;APACHE_LOG_DIR&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will be used to store Apache logs. The default value for this is &lt;code&gt;./logs/apache2&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Database&lt;/h4&gt; &#xA;&lt;hr&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For Apple Silicon Users: Please select Mariadb as Database. Oracle doesn&#39;t build their SQL Containers for the arm Architecure&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;DATABASE&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Define which MySQL or MariaDB Version you would like to use.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;MYSQL_INITDB_DIR&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;When a container is started for the first time files in this directory with the extensions &lt;code&gt;.sh&lt;/code&gt;, &lt;code&gt;.sql&lt;/code&gt;, &lt;code&gt;.sql.gz&lt;/code&gt; and &lt;code&gt;.sql.xz&lt;/code&gt; will be executed in alphabetical order. &lt;code&gt;.sh&lt;/code&gt; files without file execute permission are sourced rather than executed. The default value for this is &lt;code&gt;./config/initdb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;MYSQL_DATA_DIR&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is MySQL data directory. The default value for this is &lt;code&gt;./data/mysql&lt;/code&gt;. All your MySQL data files will be stored here.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;MYSQL_LOG_DIR&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will be used to store Apache logs. The default value for this is &lt;code&gt;./logs/mysql&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Web Server&lt;/h2&gt; &#xA;&lt;p&gt;Apache is configured to run on port 80. So, you can access it via &lt;code&gt;http://localhost&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Apache Modules&lt;/h4&gt; &#xA;&lt;p&gt;By default following modules are enabled.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;rewrite&lt;/li&gt; &#xA; &lt;li&gt;headers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you want to enable more modules, just update &lt;code&gt;./bin/phpX/Dockerfile&lt;/code&gt;. You can also generate a PR and we will merge if seems good for general purpose. You have to rebuild the docker image by running &lt;code&gt;docker-compose build&lt;/code&gt; and restart the docker containers.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Connect via SSH&lt;/h4&gt; &#xA;&lt;p&gt;You can connect to web server using &lt;code&gt;docker-compose exec&lt;/code&gt; command to perform various operation on it. Use below command to login to container via ssh.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker-compose exec webserver bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;PHP&lt;/h2&gt; &#xA;&lt;p&gt;The installed version of php depends on your &lt;code&gt;.env&lt;/code&gt;file.&lt;/p&gt; &#xA;&lt;h4&gt;Extensions&lt;/h4&gt; &#xA;&lt;p&gt;By default following extensions are installed. May differ for PHP Versions &amp;lt;7.x.x&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;mysqli&lt;/li&gt; &#xA; &lt;li&gt;pdo_sqlite&lt;/li&gt; &#xA; &lt;li&gt;pdo_mysql&lt;/li&gt; &#xA; &lt;li&gt;mbstring&lt;/li&gt; &#xA; &lt;li&gt;zip&lt;/li&gt; &#xA; &lt;li&gt;intl&lt;/li&gt; &#xA; &lt;li&gt;mcrypt&lt;/li&gt; &#xA; &lt;li&gt;curl&lt;/li&gt; &#xA; &lt;li&gt;json&lt;/li&gt; &#xA; &lt;li&gt;iconv&lt;/li&gt; &#xA; &lt;li&gt;xml&lt;/li&gt; &#xA; &lt;li&gt;xmlrpc&lt;/li&gt; &#xA; &lt;li&gt;gd&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you want to install more extension, just update &lt;code&gt;./bin/webserver/Dockerfile&lt;/code&gt;. You can also generate a PR and we will merge if it seems good for general purpose. You have to rebuild the docker image by running &lt;code&gt;docker-compose build&lt;/code&gt; and restart the docker containers.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;phpMyAdmin&lt;/h2&gt; &#xA;&lt;p&gt;phpMyAdmin is configured to run on port 8080. Use following default credentials.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://localhost:8080/&#34;&gt;http://localhost:8080/&lt;/a&gt;&lt;br&gt; username: root&lt;br&gt; password: tiger&lt;/p&gt; &#xA;&lt;h2&gt;Xdebug&lt;/h2&gt; &#xA;&lt;p&gt;Xdebug comes installed by default and it&#39;s version depends on the PHP version chosen in the &lt;code&gt;&#34;.env&#34;&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Xdebug versions:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;PHP &amp;lt;= 7.3: Xdebug 2.X.X&lt;/p&gt; &#xA;&lt;p&gt;PHP &amp;gt;= 7.4: Xdebug 3.X.X&lt;/p&gt; &#xA;&lt;p&gt;To use Xdebug you need to enable the settings in the &lt;code&gt;./config/php/php.ini&lt;/code&gt; file according to the chosen version PHP.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Xdebug 2&#xA;#xdebug.remote_enable=1&#xA;#xdebug.remote_autostart=1&#xA;#xdebug.remote_connect_back=1&#xA;#xdebug.remote_host = host.docker.internal&#xA;#xdebug.remote_port=9000&#xA;&#xA;# Xdebug 3&#xA;#xdebug.mode=debug&#xA;#xdebug.start_with_request=yes&#xA;#xdebug.client_host=host.docker.internal&#xA;#xdebug.client_port=9003&#xA;#xdebug.idekey=VSCODE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Xdebug VS Code: you have to install the Xdebug extension &#34;PHP Debug&#34;. After installed, go to Debug and create the launch file so that your IDE can listen and work properly.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;VERY IMPORTANT:&lt;/strong&gt; the &lt;code&gt;pathMappings&lt;/code&gt; depends on how you have opened the folder in VS Code. Each folder has your own configurations launch, that you can view in &lt;code&gt;.vscode/launch.json&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;version&#34;: &#34;0.2.0&#34;,&#xA;    &#34;configurations&#34;: [&#xA;        {&#xA;            &#34;name&#34;: &#34;Listen for Xdebug&#34;,&#xA;            &#34;type&#34;: &#34;php&#34;,&#xA;            &#34;request&#34;: &#34;launch&#34;,&#xA;            // &#34;port&#34;: 9000, // Xdebug 2&#xA;            &#34;port&#34;: 9003, // Xdebug 3&#xA;            &#34;pathMappings&#34;: {&#xA;                // &#34;/var/www/html&#34;: &#34;${workspaceFolder}/www&#34; // if you have opened VSCODE in root folder&#xA;                &#34;/var/www/html&#34;: &#34;${workspaceFolder}&#34; // if you have opened VSCODE in ./www folder&#xA;            }&#xA;        }&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, make a breakpoint and run debug.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tip!&lt;/strong&gt; After theses configurations, you may need to restart container.&lt;/p&gt; &#xA;&lt;h2&gt;Redis&lt;/h2&gt; &#xA;&lt;p&gt;It comes with Redis. It runs on default port &lt;code&gt;6379&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We are happy if you want to create a pull request or help people with their issues. If you want to create a PR, please remember that this stack is not built for production usage, and changes should be good for general purpose and not overspecialized.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Please note that we simplified the project structure from several branches for each php version, to one centralized master branch. Please create your PR against master branch.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Thank you!&lt;/p&gt; &#xA;&lt;h2&gt;Why you shouldn&#39;t use this stack unmodified in production&lt;/h2&gt; &#xA;&lt;p&gt;We want to empower developers to quickly create creative Applications. Therefore we are providing an easy to set up a local development environment for several different Frameworks and PHP Versions. In Production you should modify at a minimum the following subjects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;php handler: mod_php=&amp;gt; php-fpm&lt;/li&gt; &#xA; &lt;li&gt;secure mysql users with proper source IP limitations&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>xuiv/v2ray-heroku</title>
    <updated>2022-05-29T02:08:06Z</updated>
    <id>tag:github.com,2022-05-29:/xuiv/v2ray-heroku</id>
    <link href="https://github.com/xuiv/v2ray-heroku" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;v2ray-heroku&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;部署&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;点击 &lt;a href=&#34;https://heroku.com/deploy?template=https://github.com/xuiv/v2ray-heroku&#34;&gt;&lt;img src=&#34;https://www.herokucdn.com/deploy/button.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;，&lt;a href=&#34;https://heroku.com/deploy?template=https://github.com/xuiv/v2ray-heroku&#34;&gt;一键部署到heroku&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;客户端config.json设置如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;log&#34;: {&#xA;    &#34;loglevel&#34;: &#34;warning&#34;&#xA;  },&#xA;  &#34;inbound&#34;: {&#xA;    &#34;port&#34;: 1080,&#xA;    &#34;listen&#34;: &#34;127.0.0.1&#34;,&#xA;    &#34;protocol&#34;: &#34;socks&#34;,&#xA;    &#34;domainOverride&#34;: [&#34;tls&#34;,&#34;http&#34;],&#xA;    &#34;settings&#34;: {&#xA;      &#34;auth&#34;: &#34;noauth&#34;,&#xA;      &#34;udp&#34;: true&#xA;    }&#xA;  },&#xA;  &#34;outbound&#34;: {&#xA;    &#34;protocol&#34;: &#34;vmess&#34;,&#xA;    &#34;settings&#34;: {&#xA;      &#34;vnext&#34;: [{&#xA;        &#34;address&#34;: &#34;xxxx.herokuapp.com&#34;,&#xA;        &#34;port&#34;: 443,&#xA;        &#34;users&#34;: [{&#xA;          &#34;id&#34;: &#34;b831381d-6324-4d53-ad4f-8cda48b30811&#34;,&#xA;          &#34;alterId&#34;: 64&#xA;        }]&#xA;      }]&#xA;    },&#xA;    &#34;streamSettings&#34;: {&#xA;      &#34;network&#34;: &#34;ws&#34;,&#xA;      &#34;security&#34;: &#34;tls&#34;,&#xA;      &#34;tlsSettings&#34;: {&#xA;        &#34;allowInsecure&#34;: true,&#xA;        &#34;serverName&#34;: null&#xA;      }&#xA;    },&#xA;    &#34;mux&#34;: {&#xA;      &#34;enabled&#34;: true,&#xA;      &#34;concurrency&#34;: 8&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>Gusto/aptible-cli-docker</title>
    <updated>2022-05-29T02:08:06Z</updated>
    <id>tag:github.com,2022-05-29:/Gusto/aptible-cli-docker</id>
    <link href="https://github.com/Gusto/aptible-cli-docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple container containing the aptible cli&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://buildkite.com/gusto/aptible-cli&#34;&gt;&lt;img src=&#34;https://badge.buildkite.com/3636ee445e2b22471da318cfc17d25534c30adb687ec5d54fb.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;aptible-cli-docker&lt;/h1&gt; &#xA;&lt;p&gt;Simple container containing the aptible cli&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>olxbr/X9Containers</title>
    <updated>2022-05-29T02:08:06Z</updated>
    <id>tag:github.com,2022-05-29:/olxbr/X9Containers</id>
    <link href="https://github.com/olxbr/X9Containers" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Docker containers to finger pointing pesky breaches from your running images&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;X9Containers&lt;/h1&gt; &#xA;&lt;p&gt;Docker containers to finger pointing pesky breaches from your running images.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s nothing really new: X9Containers use existing tools to find malwares and vulnerabilities using &lt;a href=&#34;https://github.com/aquasecurity/trivy&#34;&gt;Trivy&lt;/a&gt; and &lt;a href=&#34;https://github.com/Cisco-Talos/clamav&#34;&gt;ClamAV&lt;/a&gt; in a &lt;a href=&#34;https://docs.docker.com/develop/develop-images/multistage-build/&#34;&gt;multi-stage building approach&lt;/a&gt;, copying the whole filesystem to be analyzed at each stage - at &lt;code&gt;distroless.&lt;/code&gt; suffix.&lt;/p&gt; &#xA;&lt;p&gt;But the analysis can also occur during building, so it can run into the intermediate container, where we hope to find things dynamically - at non &lt;code&gt;distroless.&lt;/code&gt; suffix.&lt;/p&gt; &#xA;&lt;p&gt;&#34;X9&#34; it is a popular slang among Brazilians which means &#34;whistleblower&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Said that...&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/olxbr/X9Containers/main/point.png&#34; width=&#34;380&#34; height=&#34;313&#34;&gt; ... let&#39;s point!&lt;/p&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;Intended to just print each vulnerability scanner output to the standard output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# You need to choose the appropriate Dockerfile which will run on top of the target image container&#xA;curl https://raw.githubusercontent.com/olxbr/X9Containers/main/debian.clamav.trivy.X9.Dockerfile --output X9.Dockerfile&#xA;&#xA;# Where IMAGE=${TARGET_IMAGE}:${VERSION} is the target image for scanning&#xA;# and TRIVY_SEVERITY=${TRIVY_SEVERITY} is a Trivy comma separated threat levels to consider&#xA;docker build -f X9.Dockerfile -t suspectimage --build-arg IMAGE=${TARGET_IMAGE}:${VERSION} --build-arg TRIVY_SEVERITY=${TRIVY_SEVERITY} --quiet .&#xA;docker create --name suspectcontainer suspectimage&#xA;docker cp suspectcontainer:/scans ./scans&#xA;&#xA;# Do whatever you need with the artifacts, in this case it will only be printed in console:&#xA;for i in scans/* ; do \&#xA;  cat $i ; \&#xA;  echo &#34;********** END OF $i ********** ; \&#xA;done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Usage with GitHub Actions&lt;/h4&gt; &#xA;&lt;p&gt;If you feel lazy and just want to blow up some pipeline across GitHub neighborhood, read below.&lt;/p&gt; &#xA;&lt;p&gt;First, build your Docker image as usual inside your pipeline:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- name: Check out repository&#xA;  uses: actions/checkout@v2&#xA;&#xA;...&#xA;&#xA;- name: Build Docker Image&#xA;  run: docker build -t myleetimage .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then give a try with Actions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- name: Perform X9Containers Scan&#xA;  uses: olxbr/X9Containers@main&#xA;  timeout-minutes: 6&#xA;  with:&#xA;    image: myleetimage:latest&#xA;    distro: distroless.clamav.trivy&#xA;    trivy_severity: CRITICAL&#xA;    ignore_threats: false&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>darinpope/jenkins-example-docker</title>
    <updated>2022-05-29T02:08:06Z</updated>
    <id>tag:github.com,2022-05-29:/darinpope/jenkins-example-docker</id>
    <link href="https://github.com/darinpope/jenkins-example-docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;jenkins-example-docker&lt;/h1&gt;</summary>
  </entry>
</feed>