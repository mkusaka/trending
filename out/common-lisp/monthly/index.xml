<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-05-29T02:34:33Z</updated>
  <subtitle>Monthly Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>joaotavora/sly</title>
    <updated>2022-05-29T02:34:33Z</updated>
    <id>tag:github.com,2022-05-29:/joaotavora/sly</id>
    <link href="https://github.com/joaotavora/sly" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Sylvester the Cat&#39;s Common Lisp IDE&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/joaotavora/sly&#34;&gt;&lt;img src=&#34;https://travis-ci.org/joaotavora/sly.png?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://melpa.org/#/sly&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/sly-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;          _____    __   __  __        &#xA;         / ___/   / /   \ \/ /               |\      _,,,---,,_&#xA;         \__ \   / /     \  /                /,`.-&#39;`&#39;    -.  ;-;;,_&#xA;        ___/ /  / /___   / /                |,4-  ) )-,_..;\ (  `&#39;-&#39;&#xA;       /____/  /_____/  /_/                &#39;---&#39;&#39;(_/--&#39;  `-&#39;\_)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;SLY is Sylvester the Cat&#39;s Common Lisp IDE for Emacs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ü§î Read &lt;a href=&#34;http://joaotavora.github.io/sly/#A-SLY-tour-for-SLIME-users&#34;&gt;a short illustrated guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üìΩÔ∏è Scroll down this README for some &lt;a href=&#34;https://raw.githubusercontent.com/joaotavora/sly/master/#animated_gifs&#34;&gt;pretty gifs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üì£ Read the &lt;a href=&#34;https://github.com/joaotavora/sly/raw/master/NEWS.md&#34;&gt;NEWS&lt;/a&gt; file&lt;/li&gt; &#xA; &lt;li&gt;üìö Read the &lt;a href=&#34;http://joaotavora.github.io/sly&#34;&gt;manual&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;SLY&#39;s highlights are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/joaotavora/sly/master/#repl&#34;&gt;full-featured REPL&lt;/a&gt; based on Emacs&#39;s &lt;code&gt;comint.el&lt;/code&gt;. Everything can be copied to the REPL;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/joaotavora/sly/master/#stickers&#34;&gt;Stickers&lt;/a&gt;, or live code annotations that record values as code traverses them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/joaotavora/sly/master/#company-flex-completion&#34;&gt;Flex-style completion&lt;/a&gt; out-of-the-box, using Emacs&#39;s completion API. Company, Helm, and other &lt;a href=&#34;https://raw.githubusercontent.com/joaotavora/sly/master/#completion&#34;&gt;supported natively&lt;/a&gt;, no plugin required;&lt;/li&gt; &#xA; &lt;li&gt;An interactive &lt;a href=&#34;http://joaotavora.github.io/sly/#Trace-Dialog&#34;&gt;Trace Dialog&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;Cleanly ASDF-loaded by default, including contribs, enabled out-of-the-box;&lt;/li&gt; &#xA; &lt;li&gt;Multiple inspectors and multiple REPLs;&lt;/li&gt; &#xA; &lt;li&gt;&#34;Presentations&#34; replaced by &lt;a href=&#34;https://raw.githubusercontent.com/joaotavora/sly/master/#repl&#34;&gt;interactive backreferences&lt;/a&gt; which highlight the object and remain stable throughout the REPL session;&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;a href=&#34;https://github.com/joaotavora/sly-named-readtables&#34;&gt;NAMED-READTABLES&lt;/a&gt;, &lt;a href=&#34;https://github.com/joaotavora/sly-macrostep&#34;&gt;macrostep.el&lt;/a&gt; and &lt;a href=&#34;https://github.com/joaotavora/sly-quicklisp&#34;&gt;quicklisp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://zenodo.org/record/3742759&#34;&gt;portable, annotation-based stepper&lt;/a&gt; in &lt;a href=&#34;https://github.com/joaotavora/sly-stepper&#34;&gt;early&lt;/a&gt; but functional prototype stage.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;SLY is a fork of &lt;a href=&#34;http://www.common-lisp.net/project/slime/&#34;&gt;SLIME&lt;/a&gt;. We tracks its bugfixes, particularly to the implementation backends. All SLIME&#39;s familar features (debugger, inspector, xref, etc...) are still available, with improved overall UX.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Ensure that &lt;a href=&#34;https://github.com/milkypostman/melpa&#34;&gt;MELPA&lt;/a&gt; is setup as usual and ask &lt;code&gt;M-x package-install&lt;/code&gt; to install the package &lt;code&gt;sly&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;That&#39;s it&lt;/em&gt;. &lt;code&gt;sly-mode&lt;/code&gt; will automatically come up in every &lt;code&gt;.lisp&lt;/code&gt; file. To fire up SLY, connect to a Lisp and get a friendly REPL, use &lt;code&gt;M-x sly&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Even if you already have SLIME installed, SLY will ask you and temporarily disable it for the Emacs session.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;animated_gifs&#34;&gt;&lt;/a&gt; &lt;em&gt;Obligatory animated gif section&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a name=&#34;company-flex-completion&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://joaotavora.github.io/sly/#Completion&#34;&gt;Flex completion&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joaotavora/sly/master/doc/animations/company-flex-completion.gif&#34; alt=&#34;company-flex-completion&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;repl&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://joaotavora.github.io/sly/#REPL-backreferences&#34;&gt;Backreferences&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joaotavora/sly/master/doc/animations/backreferences.gif&#34; alt=&#34;backreferences&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://joaotavora.github.io/sly/#REPL-commands&#34;&gt;Reverse i-search&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joaotavora/sly/master/doc/animations/reverse-isearch.gif&#34; alt=&#34;reverse-isearch&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;stickers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://joaotavora.github.io/sly/#Stickers&#34;&gt;Stickers&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joaotavora/sly/master/doc/animations/stickers-example.gif&#34; alt=&#34;stickers-example&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install from git&lt;/h2&gt; &#xA;&lt;p&gt;Clone this repository, add this to your &lt;code&gt;~/.emacs&lt;/code&gt; file and fill in the appropriate file names:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(add-to-list &#39;load-path &#34;~/dir/to/cloned/sly&#34;)&#xA;(require &#39;sly-autoloads)&#xA;(setq inferior-lisp-program &#34;/opt/sbcl/bin/sbcl&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you wish to byte-compile SLY yourself (not needed generally) you can do &lt;code&gt;make compile compile-contrib&lt;/code&gt; in the dir where you cloned SLY.&lt;/p&gt; &#xA;&lt;h2&gt;Running the server standalone&lt;/h2&gt; &#xA;&lt;p&gt;This also works&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sbcl&#xA;...&#xA;* (push #p&#34;~/dir/to/sly&#34; asdf:*central-registry*)&#xA;* (asdf:load-system :slynk)&#xA;* (slynk:create-server :port 4008)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now in Emacs you can do &lt;code&gt;sly-connect&lt;/code&gt; and give it the host and the 4008 port as a destination.&lt;/p&gt; &#xA;&lt;h2&gt;Faster startup&lt;/h2&gt; &#xA;&lt;p&gt;If the Lisp program doesn&#39;t start fast enough for you, look in &lt;a href=&#34;http://joaotavora.github.io/sly/#Loading-Slynk-faster&#34;&gt;the manual&lt;/a&gt;, for ways to make it faster.&lt;/p&gt; &#xA;&lt;h2&gt;Additional Contribs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joaotavora/sly-quicklisp&#34;&gt;https://github.com/joaotavora/sly-quicklisp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joaotavora/sly-named-readtables&#34;&gt;https://github.com/joaotavora/sly-named-readtables&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joaotavora/sly-macrostep&#34;&gt;https://github.com/joaotavora/sly-macrostep&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joaotavora/sly-stepper&#34;&gt;https://github.com/joaotavora/sly-stepper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mmgeorge/sly-asdf&#34;&gt;https://github.com/mmgeorge/sly-asdf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/40ants/sly-package-inferred&#34;&gt;https://github.com/40ants/sly-package-inferred&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;completion&#34;&gt;&lt;/a&gt; Completion UIs&lt;/h2&gt; &#xA;&lt;p&gt;SLY works with most Emacs &#34;completion UIs&#34; out of the box, providing completion in source files and inputting Common Lisp symbol names from the minibuffer. &lt;a href=&#34;https://github.com/company-mode/company-mode&#34;&gt;Company&lt;/a&gt;, Emacs 27&#39;s Fido-mode, and Helm are well-supported, as is &#34;vanilla&#34; completion. For consistency, SLY defaults to its own UI, &lt;code&gt;sly-symbol-completion-mode&lt;/code&gt;, useful if you don&#39;t have or like any of those. You can turn it off. Also, if you use Helm and wish to have even more Helm-based fanciness, you can use &lt;a href=&#34;https://github.com/emacs-helm/helm-sly&#34;&gt;helm-sly&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;SLY is free software. All files, unless explicitly stated otherwise, are public domain. ASCII artwork is copyright by Felix Lee, Joan G. Stark and Hayley Jane Wakenshaw.&lt;/p&gt; &#xA;&lt;h2&gt;Fork&lt;/h2&gt; &#xA;&lt;p&gt;SLIME is the work of Eric Marsden, Luke Gorrie, Helmut Eller, Tobias C. Rittweiler and &lt;a href=&#34;http://common-lisp.net/project/slime/doc/html/Credits.html#Credits&#34;&gt;many others&lt;/a&gt;. I forked SLIME because I used it daily, for work, had a long list of hacks developed for myself, and wanted to share them with others.&lt;/p&gt; &#xA;&lt;p&gt;In 2013, SLIME development was stalling, patches and issues rotting. In early 2014, Lu√≠s Oliveira and myself moved SLIME to Github and set up its Travis CI system. I brought in the old bug reports from the Launchpad tracker, fixed long-standing problems and submitted many changes, particularly to the under-curated but popular &#34;contrib&#34; section.&lt;/p&gt; &#xA;&lt;p&gt;Now, the changes that SLY brings to the table are too deep at the Elisp and Lisp level to be accepted to SLIME, given its current focus on stability (for the record, I find this perfectly reasonable). The new features, such as stickers or multiple inspectors, cannot be realized well using only the existing &#34;contrib&#34; system. Finally, SLY frees itself from the shackles of Emacs 23 and supports Emacs 24.3+ only, allowing for much cleaner code and liberal use of lexical binding.&lt;/p&gt; &#xA;&lt;p&gt;The list of technical reasons is bigger than this though, and you can read up on them in the &lt;a href=&#34;https://github.com/joaotavora/sly/raw/master/CONTRIBUTING.md#architecture&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/joaotavora/sly/issues&#34;&gt;Open an issue or a pull request&lt;/a&gt;, but at least have a quick look at the first part &lt;a href=&#34;https://github.com/joaotavora/sly/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file for instructions on how to contribute.&lt;/p&gt; &#xA;&lt;!-- Local Variables: --&gt; &#xA;&lt;!-- fill-column: 80 --&gt; &#xA;&lt;!-- End: --&gt;</summary>
  </entry>
  <entry>
    <title>dimitri/pgloader</title>
    <updated>2022-05-29T02:34:33Z</updated>
    <id>tag:github.com,2022-05-29:/dimitri/pgloader</id>
    <link href="https://github.com/dimitri/pgloader" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Migrate to PostgreSQL in a single command!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PGLoader&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/dimitri/pgloader&#34;&gt;&lt;img src=&#34;https://travis-ci.org/dimitri/pgloader.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/dimitri/pgloader?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/dimitri/pgloader&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cloud.docker.com/repository/docker/dimitri/pgloader&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/cloud/build/dimitri/pgloader.svg?sanitize=true&#34; alt=&#34;Docker Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://pgloader.readthedocs.io/en/latest/&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/pgloader/badge/?version=latest&amp;amp;style=plastic&#34; alt=&#34;Read The Docs Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;pgloader is a data loading tool for PostgreSQL, using the &lt;code&gt;COPY&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;Its main advantage over just using &lt;code&gt;COPY&lt;/code&gt; or &lt;code&gt;\copy&lt;/code&gt;, and over using a &lt;em&gt;Foreign Data Wrapper&lt;/em&gt;, is its transaction behaviour, where &lt;em&gt;pgloader&lt;/em&gt; will keep a separate file of rejected data, but continue trying to &lt;code&gt;copy&lt;/code&gt; good data in your database.&lt;/p&gt; &#xA;&lt;p&gt;The default PostgreSQL behaviour is transactional, which means that &lt;em&gt;any&lt;/em&gt; erroneous line in the input data (file or remote database) will stop the entire bulk load for the table.&lt;/p&gt; &#xA;&lt;p&gt;pgloader also implements data reformatting, a typical example of that being the transformation of MySQL datestamps &lt;code&gt;0000-00-00&lt;/code&gt; and &lt;code&gt;0000-00-00 00:00:00&lt;/code&gt; to PostgreSQL &lt;code&gt;NULL&lt;/code&gt; value (because our calendar never had a &lt;em&gt;year zero&lt;/em&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;pgloader version 1.x is quite old and was developed in &lt;code&gt;TCL&lt;/code&gt;. When faced with maintaining that code, the new emerging development team (hi!) picked &lt;code&gt;python&lt;/code&gt; instead because that made sense at the time. So pgloader version 2.x was written in python.&lt;/p&gt; &#xA;&lt;p&gt;The current version of pgloader is the 3.x series, which is written in &lt;a href=&#34;http://cliki.net/&#34;&gt;Common Lisp&lt;/a&gt; for better development flexibility, runtime performance, and support of real threading.&lt;/p&gt; &#xA;&lt;p&gt;The versioning is now following the Emacs model, where any X.0 release number means you&#39;re using a development version (alpha, beta, or release candidate). The next stable versions are going to be &lt;code&gt;3.1&lt;/code&gt; then &lt;code&gt;3.2&lt;/code&gt; etc.&lt;/p&gt; &#xA;&lt;p&gt;When using a development snapshot rather than a released version the version number includes the git hash (in its abbreviated form):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;pgloader version &#34;3.0.99&#34;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Release candidate 9 for pgloader version 3.1, with a &lt;em&gt;git tag&lt;/em&gt; named &lt;code&gt;v3.0.99&lt;/code&gt; so that it&#39;s easy to checkout the same sources as the released code.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;pgloader version &#34;3.0.fecae2c&#34;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Development snapshot again &lt;em&gt;git hash&lt;/em&gt; &lt;code&gt;fecae2c&lt;/code&gt;. It&#39;s possible to have the same sources on another setup with using the git command &lt;code&gt;git checkout fecae2c&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;pgloader version &#34;3.1.0&#34;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Stable release.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;LICENCE&lt;/h2&gt; &#xA;&lt;p&gt;pgloader is available under &lt;a href=&#34;http://www.postgresql.org/about/licence/&#34;&gt;The PostgreSQL Licence&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;INSTALL&lt;/h2&gt; &#xA;&lt;p&gt;You can install pgloader directly from &lt;a href=&#34;https://wiki.postgresql.org/wiki/Apt&#34;&gt;apt.postgresql.org&lt;/a&gt; and from official debian repositories, see &lt;a href=&#34;https://packages.debian.org/search?keywords=pgloader&#34;&gt;packages.debian.org/pgloader&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ apt-get install pgloader&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use a &lt;strong&gt;docker&lt;/strong&gt; image for pgloader at &lt;a href=&#34;https://hub.docker.com/r/dimitri/pgloader/&#34;&gt;https://hub.docker.com/r/dimitri/pgloader/&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker pull dimitri/pgloader&#xA;$ docker run --rm --name pgloader dimitri/pgloader:latest pgloader --version&#xA;$ docker run --rm --name pgloader dimitri/pgloader:latest pgloader --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build from sources&lt;/h2&gt; &#xA;&lt;p&gt;pgloader is now a Common Lisp program, tested using the &lt;a href=&#34;http://sbcl.org/&#34;&gt;SBCL&lt;/a&gt; (&amp;gt;= 1.2.5) and &lt;a href=&#34;http://ccl.clozure.com/&#34;&gt;Clozure CL&lt;/a&gt; implementations with &lt;a href=&#34;http://www.quicklisp.org/beta/&#34;&gt;Quicklisp&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When building from sources, you should always build from the current git &lt;code&gt;HEAD&lt;/code&gt; as it&#39;s basically the only source that is managed in a way to ensure it builds aginst current set of dependencies versions.&lt;/p&gt; &#xA;&lt;h3&gt;Building from sources on debian&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ apt-get install sbcl unzip libsqlite3-dev make curl gawk freetds-dev libzip-dev&#xA;$ cd /path/to/pgloader&#xA;$ make pgloader&#xA;$ ./build/bin/pgloader --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building from sources on RedHat/CentOS&lt;/h3&gt; &#xA;&lt;p&gt;See &#34;Redhat / CentOS&#34; in &lt;a href=&#34;https://raw.githubusercontent.com/dimitri/pgloader/master/INSTALL.md#redhat--centos&#34;&gt;INSTALL.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Building from sources on macOS&lt;/h3&gt; &#xA;&lt;p&gt;When using &lt;a href=&#34;https://brew.sh&#34;&gt;brew&lt;/a&gt;, it should be a simple &lt;code&gt;brew install --HEAD pgloader&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When using &lt;a href=&#34;https://www.macports.org&#34;&gt;macports&lt;/a&gt;, then we have a situation to deal with with shared objects pgloader depends on, as reported in issue #161 at &lt;a href=&#34;https://github.com/dimitri/pgloader/issues/161#issuecomment-201162647&#34;&gt;https://github.com/dimitri/pgloader/issues/161#issuecomment-201162647&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;I was able to get a clean build without having to disable compression after symlinking /usr/local/lib to /opt/local/lib. Note that I did not have anything installed to /usr/local/lib so I didn&#39;t lose anything here.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Building from sources on Windows&lt;/h3&gt; &#xA;&lt;p&gt;Building pgloader on Windows is supported, thanks to Common Lisp implementations being available on that platform, and to the Common Lisp Standard for making it easy to write actually portable code.&lt;/p&gt; &#xA;&lt;p&gt;It is recommended to have a look at the issues labelled with &lt;em&gt;Windows support&lt;/em&gt; if you run into trouble when building pgloader:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dimitri/pgloader/issues?utf8=%E2%9C%93&amp;amp;q=label%3A%22Windows%20support%22%20&#34;&gt;https://github.com/dimitri/pgloader/issues?utf8=‚úì&amp;amp;q=label%3A%22Windows%20support%22%20&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Building Docker image from sources&lt;/h3&gt; &#xA;&lt;p&gt;You can build a Docker image from source using SBCL by default:&lt;/p&gt; &#xA;&lt;p&gt;$ docker build .&lt;/p&gt; &#xA;&lt;p&gt;Or Clozure CL (CCL):&lt;/p&gt; &#xA;&lt;p&gt;$ docker build -f Dockerfile.ccl .&lt;/p&gt; &#xA;&lt;h2&gt;More options when building from source&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;Makefile&lt;/code&gt; target &lt;code&gt;pgloader&lt;/code&gt; knows how to produce a Self Contained Binary file for pgloader, found at &lt;code&gt;./build/bin/pgloader&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make pgloader&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, the &lt;code&gt;Makefile&lt;/code&gt; uses &lt;a href=&#34;http://sbcl.org/&#34;&gt;SBCL&lt;/a&gt; to compile your binary image, though it&#39;s possible to build using &lt;a href=&#34;http://ccl.clozure.com/&#34;&gt;CCL&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make CL=ccl pgloader&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If using &lt;code&gt;SBCL&lt;/code&gt; and it supports core compression, the make process will use it to generate a smaller binary. To force disabling core compression, you may use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make COMPRESS_CORE=no pgloader&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;--compress-core&lt;/code&gt; is unique to SBCL, so not used when &lt;code&gt;CC&lt;/code&gt; is different from the &lt;code&gt;sbcl&lt;/code&gt; value.&lt;/p&gt; &#xA;&lt;p&gt;You can also tweak the default amount of memory that the &lt;code&gt;pgloader&lt;/code&gt; image will allow itself using when running through your data (don&#39;t ask for more than your current RAM tho):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make DYNSIZE=8192 pgloader&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;make pgloader&lt;/code&gt; command when successful outputs a &lt;code&gt;./build/bin/pgloader&lt;/code&gt; file for you to use.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;You can either give a command file to pgloader or run it all from the command line, see the &lt;a href=&#34;https://pgloader.readthedocs.io/en/latest/tutorial/tutorial.html#pgloader-quick-start&#34;&gt;pgloader quick start&lt;/a&gt; on &lt;a href=&#34;https://pgloader.readthedocs.io&#34;&gt;https://pgloader.readthedocs.io&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./build/bin/pgloader --help&#xA;$ ./build/bin/pgloader &amp;lt;file.load&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, for a full migration from SQLite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ createdb newdb&#xA;$ pgloader ./test/sqlite/sqlite.db postgresql:///newdb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or for a full migration from MySQL, including schema definition (tables, indexes, foreign keys, comments) and parallel loading of the corrected data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ createdb pagila&#xA;$ pgloader mysql://user@localhost/sakila postgresql:///pagila&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>stumpwm/stumpwm</title>
    <updated>2022-05-29T02:34:33Z</updated>
    <id>tag:github.com,2022-05-29:/stumpwm/stumpwm</id>
    <link href="https://github.com/stumpwm/stumpwm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Stump Window Manager&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://stumpwm.github.io/images/stumpwm-logo-stripe.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;The Stump Window Manager&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://travis-ci.org/stumpwm/stumpwm.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://gitter.im/stumpwm/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/stumpwm/community.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;StumpWM is a window manager written entirely in Common Lisp. It attempts to be highly customizable while relying entirely on the keyboard for input. You will not find buttons, icons, title bars, tool bars, or any of the other conventional GUI widgets.&lt;/p&gt; &#xA;&lt;p&gt;These design decisions reflect the growing popularity of productive, customizable lisp based systems.&lt;/p&gt; &#xA;&lt;h2&gt;Philosophy&lt;/h2&gt; &#xA;&lt;p&gt;StumpWM is a &#34;everything-and-the-kitchen-sink WM&#34; or &#34;the Emacs of WMs.&#34;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;StumpWM:Windows::Emacs:Text&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;StumpWM is &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Hackable&lt;/li&gt; &#xA;   &lt;li&gt;Written in Common Lisp&lt;/li&gt; &#xA;   &lt;li&gt;A multi paradigm window manager&lt;/li&gt; &#xA;   &lt;li&gt;A Superior window managing experience&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;StumpWM is &lt;em&gt;not&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Minimalist&lt;/li&gt; &#xA;   &lt;li&gt;Narrow scope&lt;/li&gt; &#xA;   &lt;li&gt;Configured by editing the source directly&lt;/li&gt; &#xA;   &lt;li&gt;A full blown desktop environment&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want a minimalist tiling window manager, then StumpWM is &lt;em&gt;not&lt;/em&gt; what you&#39;re looking for. The code base is ~15k lines, the binaries produced are ~60mb.&lt;/p&gt; &#xA;&lt;p&gt;StumpWM manages windows the way emacs manages buffers, or the way screen manages terminals. If you want a flexible, customizable, hackable desktop experience, look no further.&lt;/p&gt; &#xA;&lt;h1&gt;Build &amp;amp; Start Stumpwm&lt;/h1&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://sbcl.org&#34;&gt;SBCL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;quicklisp (for obtaining the following dependencies; not needed if you use your distribution&#39;s package manager.)&lt;/li&gt; &#xA; &lt;li&gt;clx&lt;/li&gt; &#xA; &lt;li&gt;cl-ppcre&lt;/li&gt; &#xA; &lt;li&gt;alexandria&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The recommended way to install the dependencies is using Quicklisp. Follow the instructions at &lt;a href=&#34;http://www.quicklisp.org/&#34;&gt;http://www.quicklisp.org/&lt;/a&gt; to install it. In short:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ curl -O https://beta.quicklisp.org/quicklisp.lisp&#xA;$ sbcl --load quicklisp.lisp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then at the REPL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(quicklisp-quickstart:install)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure you have added it to your lisp init file using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt; (ql:add-to-init-file)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, in a repl:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt; (ql:quickload &#34;clx&#34;)&#xA; (ql:quickload &#34;cl-ppcre&#34;)&#xA; (ql:quickload &#34;alexandria&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: The recommended way to install SBCL is by downloading one of their pre-built binaries available in their &lt;a href=&#34;http://sbcl.org/platform-table.html&#34;&gt;web page&lt;/a&gt; or build it from source. Please do &lt;em&gt;not&lt;/em&gt; install SBCL using your distributions package manager, especially Ubuntu. If you do so it is likely that you&#39;ll run into problems when building StumpWM due to using obsolete versions of the dependencies.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;Building stumpwm from git requires that you build the configure script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; ./autogen.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; ./configure&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now build it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If all goes well, you should have a stumpwm binary now. You can run the binary from where it is (starting it with X) or install it, along with the .info documentation, with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now that you have a binary, call it from your ~/.xinitrc file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; # The default path is /usr/local/bin/stumpwm&#xA; echo /path/to/stumpwm &amp;gt;&amp;gt; ~/.xinitrc&#xA; startx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hopefully that will put you in X running stumpwm! See &lt;a href=&#34;https://github.com/sabetts/stumpwm/wiki/StartUp&#34;&gt;StartUp on the wiki&lt;/a&gt; for more examples.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Pull requests are always welcome! Here are some guidelines to ensure that your contribution gets merged in a timely manner:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Do&#39;s &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Add your name to the list of AUTHORS with your pull request.&lt;/li&gt; &#xA;   &lt;li&gt;Preserve comments or docstrings explaining what code does, and update them if your patch changes them in a significant way&lt;/li&gt; &#xA;   &lt;li&gt;Try to follow an &#34;80 column rule.&#34; The current code base does not follow this all the time, so don&#39;t use it as an example&lt;/li&gt; &#xA;   &lt;li&gt;If you export a symbol, you &lt;em&gt;must&lt;/em&gt; add it to the manual.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stumpwm/stumpwm/master/(http://web.archive.org/web/20160101153032/http://people.ace.ed.ac.uk/staff/medward2/class/moz/cm/doc/contrib/lispstyle.html)&#34;&gt;Use lisp idioms&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;If you are working on a major change to the internals, keep us informed on stumpwm-devel! Also, it will probably help if the changes are made and then incrementally applied to the codebase in order to avoid introducing show-stopping bugs.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Do not&#39;s &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Include Emacs local variables&lt;/li&gt; &#xA;   &lt;li&gt;Change whitespace&lt;/li&gt; &#xA;   &lt;li&gt;Write lots of code without supporting comments/documentation&lt;/li&gt; &#xA;   &lt;li&gt;Delete comments or docstrings (yes this is a duplicate of above!)&lt;/li&gt; &#xA;   &lt;li&gt;Export symbols from packages that aren&#39;t widely useful (many times a little more thought will reveal how to implement your internal change without having to export/break encapsulation)&lt;/li&gt; &#xA;   &lt;li&gt;Make stylistic changes that suit your coding style/way of thinking&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you aren&#39;t a lisp hacker, you can contribute in the form of documenting and organizing the wiki. There&#39;s a lot of information floating around; if you find it where you didn&#39;t expect it, move or link to it in a more logical place.&lt;/p&gt; &#xA;&lt;h1&gt;Wishlist&lt;/h1&gt; &#xA;&lt;p&gt;Fancy yourself a lisp hacker? Here&#39;s a wishlist of features for the StumpWM universe (in no particular order):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;float-splits (ie allow floating windows over tiled ones)&lt;/li&gt; &#xA; &lt;li&gt;Float windows within parent applications (specifically dialogs in gimp or firefox).&lt;/li&gt; &#xA; &lt;li&gt;tab-list showing the contents of the current frame at the side, top, or bottom of the frame&lt;/li&gt; &#xA; &lt;li&gt;Emacs&#39; iswitchb function implemented in emacs &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Re-arranging windows between groups&lt;/li&gt; &#xA;   &lt;li&gt;Killing windows&lt;/li&gt; &#xA;   &lt;li&gt;Marking windows for batch operations&lt;/li&gt; &#xA;   &lt;li&gt;Deleting/adding groups&lt;/li&gt; &#xA;   &lt;li&gt;Import data from stumpwm to emacs, use an emacs minor mode to implement the above features, then export the data back to stumpwm and let stumpwm perform the appropriate actions&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Emacs&#39; completing-read-multiple function&lt;/li&gt; &#xA; &lt;li&gt;Dynamic tiling&lt;/li&gt; &#xA; &lt;li&gt;Lock Screen (with support for leaving notes, bonus points if emacs is involved)&lt;/li&gt; &#xA; &lt;li&gt;Wallpapers! (support pulling from remote sources, changing based on timers, and other hacky features)&lt;/li&gt; &#xA; &lt;li&gt;Shutdown, restart, suspend, and hibernate functions that don&#39;t require root access&lt;/li&gt; &#xA; &lt;li&gt;Revamped, mouse-friendly mode-line. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Support fixed number of chars for window titles&lt;/li&gt; &#xA;   &lt;li&gt;Dynamically trim window titles to fit them all on the mode-line&lt;/li&gt; &#xA;   &lt;li&gt;Split the mode-line into multiple cells for containing different information&lt;/li&gt; &#xA;   &lt;li&gt;Implement widget icons to indicate system status (new mail, low battery, network etc)&lt;/li&gt; &#xA;   &lt;li&gt;Support raising windows when left-clicked, closing/killing when right-clicked&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Help&lt;/h1&gt; &#xA;&lt;p&gt;There&#39;s a texinfo manual, stumpwm.texi. The build scripts generate an info file you can read in emacs or with the `info&#39; program. The manual for the latest git version (may be slightly out of date) is available to read online at: &lt;a href=&#34;https://stumpwm.github.io/&#34;&gt;The Manual&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;And, as in Emacs, you can always get documentation with:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Key&lt;/th&gt; &#xA;   &lt;th&gt;Help&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-t h v&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Variables&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-t h f&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Functions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-t h k&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Key sequences&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-t h c&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Commands&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-t h w&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Find key sequences for a command&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For other stuff (tips tricks and examples) visit the &lt;a href=&#34;https://github.com/stumpwm/stumpwm/wiki&#34;&gt;stumpwm wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s a &lt;strong&gt;#stumpwm&lt;/strong&gt; channel on &lt;a href=&#34;https://libera.chat&#34;&gt;irc.libera.chat&lt;/a&gt;, too.&lt;/p&gt; &#xA;&lt;p&gt;Finally, there&#39;s our mailing list (click to sign up) &lt;a href=&#34;https://lists.nongnu.org/mailman/listinfo/stumpwm-devel&#34;&gt;stumpwm-devel@nongnu.org&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>aleksandr-vin/Google-Code-Jam-Practice</title>
    <updated>2022-05-29T02:34:33Z</updated>
    <id>tag:github.com,2022-05-29:/aleksandr-vin/Google-Code-Jam-Practice</id>
    <link href="https://github.com/aleksandr-vin/Google-Code-Jam-Practice" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Source codes for Google Code Jam practicing&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This is a repository for practicing for Google Code Jam 2010.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>inconvergent/weird</title>
    <updated>2022-05-29T02:34:33Z</updated>
    <id>tag:github.com,2022-05-29:/inconvergent/weird</id>
    <link href="https://github.com/inconvergent/weird" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Generative art in Common Lisp&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WEIRD-A Generative Art System&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE: This code is likely to change with little or no warning. You should not use this for anything remotely important. Make sure to clone the repo if you need it to remain stable.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;weird&lt;/code&gt; is the next iteration of &lt;a href=&#34;https://github.com/inconvergent/weir&#34;&gt;weir&lt;/a&gt;, which was the next iteration of &lt;a href=&#34;https://github.com/inconvergent/snek&#34;&gt;snek&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The library is written to be useful for a broad range of ways in which I create art using generative algorithms. Almost everything I have made over the past several years has been made using some version of this system.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/inconvergent/weird/master/img/web.png&#34; alt=&#34;Elastic Web&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Components&lt;/h2&gt; &#xA;&lt;p&gt;Here are the main components:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;2d/3d vector mathematics via &lt;a href=&#34;https://github.com/inconvergent/cl-veq&#34;&gt;cl-veq&lt;/a&gt;. See &lt;a href=&#34;https://github.com/inconvergent/cl-veq/raw/master/examples/ex.lisp&#34;&gt;examples&lt;/a&gt; in veq for more details.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A simple (undirected) graph data structure called &lt;code&gt;weir&lt;/code&gt;. The structure can be manipulated directly, or via &lt;code&gt;alterations&lt;/code&gt;. The latter is described in more detail below. Here is a simple example of how you can manipulate the structure directly:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(in-package :weir)&#xA;(let ((wer (make)))&#xA;  ; add three edges&#xA;  (loop repeat 3&#xA;        do (add-edge! wer&#xA;             (2add-vert! wer&#xA;               (rnd:2in-circ 200.0))&#xA;             (2add-vert! wer&#xA;               (veq:f2+ (veq:2rep 500.0)&#xA;                        (rnd:2in-circ 200.0))))&#xA;  ; iterate verts&#xA;  (itr-verts (wer v)&#xA;    ; prints vert coordinates&#xA;    (veq:vpr (2get-vert wer v)))&#xA;&#xA;  ; iterate edges&#xA;  (itr-edges (wer vv)&#xA;    (veq:vpr (2get-verts wer vv)))&#xA;&#xA;  ; move a vert relativ to current position:&#xA;  (2move-vert! wer 0 1.0 2.0)&#xA;  ; or to an absolute position&#xA;  (2move-vert! wer 1 1.0 2.0 :rel nil)&#xA;&#xA;  ; edges are represented as lists of verts, and they are always&#xA;  ; sorted with the smallest vert index first, so both of these&#xA;  ; return t:&#xA;  (edge-exists wer &#39;(0 1))&#xA;  (edge-exists wer &#39;(1 0))&#xA;&#xA;  ; get edges incident to vert 0&#xA;  (get-incident-edges wer 0))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/inconvergent/weird/master/examples/draw.lisp&#34;&gt;examples/draw.lisp&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/inconvergent/weird/master/examples/ex.lisp&#34;&gt;examples/ex.lisp&lt;/a&gt; for more.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Random numbers, some examples:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(in-package :rnd)&#xA;(rnd a) ; in range [0.0, a), defaults to a=1.0.&#xA;(rnd* a) ; in range [-a, a), defaults to a=1.0.&#xA;(rndrng a b) ; in range [a, b)&#xA;(rndi 10) ; random fixnum&#xA;(rndspace n a b) ; n numbers in [a, b)&#xA;(norm :mu 0.0 :sigma 1.0) ; normal distribution&#xA;(2in-circ a) ; in circle of radius a&#xA;(2in-rect w h) ; in a rectangle&#xA;(2nin-rect n w h) ; n in rectangle.&#xA;(2on-line ax ay bx by) ; point between points a and b&#xA;&#xA;; do something with probability 0.1, second form is optional&#xA;(prob 0.1 (print &#34;10% hi&#34;) (print &#34;90% oh no&#34;))&#xA;&#xA;; perform either form 1 or (optionally) 2&#xA;(either (print &#34;form 1&#34;) (print &#34;form 2&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/inconvergent/weird/master/src/rnd/rnd.lisp&#34;&gt;rnd.lisp&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/inconvergent/weird/master/src/rnd/2rnd.lisp&#34;&gt;2rnd.lisp&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/inconvergent/weird/master/src/rnd/3rnd.lisp&#34;&gt;3rnd.lisp&lt;/a&gt;, for all available functions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A tool for drawing &lt;code&gt;svg&lt;/code&gt; files: &lt;code&gt;wsvg&lt;/code&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/inconvergent/weird/master/examples/draw.lisp&#34;&gt;draw.lisp&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;In addition the library contains a number of useful tools for dealing with (predominantly) vector graphics.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/inconvergent/weird/master/img/sun.png&#34; alt=&#34;Sun&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Weir Graphs and Alterations&lt;/h2&gt; &#xA;&lt;p&gt;In my opinion, the most interesting part of the &lt;code&gt;weir&lt;/code&gt; graph structure is &lt;code&gt;alterations&lt;/code&gt;. An &lt;code&gt;alteration&lt;/code&gt; is a change that will be applied to the structure at the end of a given context, provided it is valid.&lt;/p&gt; &#xA;&lt;p&gt;The main motivation behind this is that this makes it possible to gather up a number of changes that will be applied to the graph at a later time. This makes it possible to access the state in the &lt;code&gt;weir&lt;/code&gt; instance while you are creating the alterations. Without there being any changes made to the state of the &lt;code&gt;weir&lt;/code&gt; instance while the alterations are being created. Once all alterations are created, the valid ones will be applied.&lt;/p&gt; &#xA;&lt;p&gt;Existing alterations in &lt;code&gt;weir&lt;/code&gt; are postfixed with &lt;code&gt;?&lt;/code&gt;. It might look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(weir:with (wer %)&#xA;  (% (add-vert? (veq:f2 100.0 740.0))&#xA;  (% (add-edge? 1 4)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;(% ...)&lt;/code&gt; is used to collect alterations. They will be executed at the end of the &lt;code&gt;with&lt;/code&gt; context. If an &lt;code&gt;alteration&lt;/code&gt; evaluates to &lt;code&gt;nil&lt;/code&gt;, nothing will happen.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example of how the forces are calculated in my &lt;a href=&#34;https://inconvergent.net/2019/a-tangle-of-webs/&#34;&gt;Tangle of Webs simulation&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(veq:vdef* reciprocal-edge-forces (wer &amp;amp;key (stp 0.1))&#xA;  (weir:with (wer %)&#xA;    ; state of wer is unaltered&#xA;    (weir:itr-edges (wer e) ; edge (v0 v1)&#xA;      ; vector from v0 to v1&#xA;      ; force is proportional to this &#34;oriented distance&#34;&#xA;      (veq:f2let ((force (veq:f2-&#xA;                           (veq:f2$ (weir:2get-verts wer e)&#xA;                                    1 0))))&#xA;        (loop for i in e and s in &#39;(-1.0 1.0)&#xA;              ; alteration is created, but nothing happens&#xA;              do (% (2move-vert? i&#xA;                      (veq:f2scale force (* s stp)))))))))&#xA;    ; alterations are applied at the end&#xA;    ; of the context&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The important thing to note here is that for the forces to be calculated correctly, all edge lengths must be calculated &lt;em&gt;before&lt;/em&gt; the forces are applied to the vertices.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/inconvergent/weird/master/img/symbols.png&#34; alt=&#34;Symbols&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Futures and Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;You can assign a name to the result of an alteration using&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(% (add-edge? 1 3) :res :some-name?)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This makes it possible to create alterations that depend on the result of other alterations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(in-package :weir)&#xA;(with (wer %)&#xA;  (veq:f2let ((pt (veq:f2 1f0 3f0)))&#xA;    (% (2add-vert? pt) :res :a?) ; alteration result is named :a?&#xA;    (% (2add-vert? (veq:f2 1.0 2.0)) :res :b?) ; result named :b?&#xA;    (% (add-edge? :a? :b?)))) ; depends on :a? and :b?&#xA;&#xA;; all alteration results:&#xA;(print (get-alteration-result-list wer))&#xA;; or as a `hash-map`:&#xA;(print (get-alteration-result-map wer))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;alteration&lt;/code&gt; names must be &lt;code&gt;keywords&lt;/code&gt; that end with &lt;code&gt;?&lt;/code&gt;. (There is an exception, see &lt;a href=&#34;https://raw.githubusercontent.com/inconvergent/weird/master/#Looping&#34;&gt;Looping&lt;/a&gt; below.) And using the same name for multiple alterations &lt;em&gt;will&lt;/em&gt; result in undefined behaviour.&lt;/p&gt; &#xA;&lt;p&gt;As you can see, a named alteration is akin to a &lt;em&gt;future&lt;/em&gt;; a reference to a result that may or may not exist eventually. For this to work, any alteration that depends on a future that fails (or returns &lt;code&gt;nil&lt;/code&gt;) will be skipped.&lt;/p&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;(weir:with (wer % :bd t) ...)&lt;/code&gt; to see how an alteration is expanded. This might make it easier to see what is going on.&lt;/p&gt; &#xA;&lt;p&gt;As en example. The &lt;code&gt;alteration&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(% (2move-vert? :vert?&#xA;     (veq:f2scale&#xA;       (veq:f2- (veq:f2$ (weir:2get-verts wer &#39;(1 3)) 1 0))&#xA;       1f0)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will be expanded to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(VEQ:F2LET&#xA; ((#:OUT-F2!P53&#xA;   (VEQ:F2SCALE (VEQ:F2- (VEQ:F2$ (WEIR:2GET-VERTS WER &#39;(1 3)) 1 0)) 1.0)))&#xA; (LET ((#:OUT-REL54 T))&#xA;   (LAMBDA (#:WER541)&#xA;     (CASE (WEIR::-IF-ALL-RESOLVED #:ALT-RES29 (LIST :VERT?))&#xA;       (:OK&#xA;        (VALUES T&#xA;                (PROGN&#xA;                 (WHEN&#xA;                     (WEIR::-VALID-VERT #:WER541&#xA;                                        (VALUES (GETHASH :VERT? #:ALT-RES29)))&#xA;                   (PROGN&#xA;                    (WEIR:2MOVE-VERT! #:WER541&#xA;                                      (VALUES (GETHASH :VERT? #:ALT-RES29))&#xA;                                      (WEIR::VAL* #:OUT-F2!P53)&#xA;                                      :REL #:OUT-REL54)&#xA;                    (VALUES (GETHASH :VERT? #:ALT-RES29)))))))&#xA;       (:BAIL (PROGN NIL (VALUES T NIL)))&#xA;       (T (VALUES NIL NIL))))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which won&#39;t work in its own unless &lt;code&gt;:VERT?&lt;/code&gt; is also defined. But you can see how the promise resolution is handled. And how values (&lt;code&gt;#:OUT-REL54&lt;/code&gt;, &lt;code&gt;#:OUT-F2!P53&lt;/code&gt;) are defined in the surrounding closure.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/inconvergent/weird/master/img/scribble.png&#34; alt=&#34;Scribbles&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Looping&lt;/h3&gt; &#xA;&lt;p&gt;It is possible to use &lt;code&gt;alterations&lt;/code&gt; inside loops as well. but it requires a bit more careful consideration. Here is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(in-package :weir)&#xA;(with (wer % :db t)&#xA;  (loop for x in (math:linspace 20 -20.0 20.0) do&#xA;    (loop for z in (list 1.0 2.0) do&#xA;      (veq:f3let ((xy (veq:f3 x y z)))&#xA;        ; create a distinct name&#xA;        (let ((g? (gensym &#34;g&#34;)))&#xA;          (% (add-grp? :name (gensym &#34;line&#34;)) :res g?)&#xA;          (% (2add-path?&#xA;               (veq:f$_ (list (veq:f3-&#xA;                                xy (veq:f3 1.0 8.0 (rnd:rnd)))&#xA;                              (veq:f3+&#xA;                                xy (veq:f3 1.0 2.0 (rnd:rnd)))))&#xA;               :g g?)))))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Writing&lt;/h2&gt; &#xA;&lt;p&gt;I have written about things related to this code at:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://inconvergent.net/2017/snek-is-not-an-acronym/&#34;&gt;https://inconvergent.net/2017/snek-is-not-an-acronym/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://inconvergent.net/2017/a-method-for-mistakes/&#34;&gt;https://inconvergent.net/2017/a-method-for-mistakes/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://inconvergent.net/2017/arbitrary-alterations/&#34;&gt;https://inconvergent.net/2017/arbitrary-alterations/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://inconvergent.net/2017/grains-of-sand/&#34;&gt;https://inconvergent.net/2017/grains-of-sand/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://inconvergent.net/2017/a-propensity-for-mistakes/&#34;&gt;https://inconvergent.net/2017/a-propensity-for-mistakes/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://inconvergent.net/2020/future-alterations/&#34;&gt;https://inconvergent.net/2020/future-alterations/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://inconvergent.net/2021/future-alterations-and-loops/&#34;&gt;https://inconvergent.net/2021/future-alterations-and-loops/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that these posts refer to older iterations of the code. So some of the things will be out of date.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/inconvergent/weird/master/img/boxes.png&#34; alt=&#34;Boxes&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;On Use and Contributions&lt;/h2&gt; &#xA;&lt;p&gt;This code is written for my personal use, and parts of it is rather experimental. Also, it is likely to change at my whim. For this reason I don&#39;t recommend depending on this library for anything.&lt;/p&gt; &#xA;&lt;p&gt;I release it publicly in case people find it useful or interesting. It is not, however, intended as a collaboration/Open Source project. As such I am unlikely to accept PRs, reply to issues, or take requests.&lt;/p&gt; &#xA;&lt;h2&gt;Installation and Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;weird&lt;/code&gt; depends on &lt;a href=&#34;https://github.com/inconvergent/cl-veq&#34;&gt;cl-veq&lt;/a&gt;, and it requires Quicklisp to install dependencies (which are listed in &lt;code&gt;weird.asd&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;To install and load &lt;code&gt;weird&lt;/code&gt;, do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(ql:quickload :weird)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If this does not work, &lt;code&gt;weird&lt;/code&gt; may not be in a place Quicklisp or ASDF can see them. To fix this, either:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(load &#34;weird.asd&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a long term solution, add the following to &lt;code&gt;.sbclrc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+quicklisp&#xA;(push &#34;/path/to/dir/containing/weird&#34; ql:*local-project-directories*)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will have to make sure &lt;code&gt;cl-veq&lt;/code&gt; is also available in the same fashion for any of this to work.&lt;/p&gt; &#xA;&lt;h3&gt;Versions and Compatability&lt;/h3&gt; &#xA;&lt;p&gt;Weird version 6.1.0 requires version &lt;code&gt;cl-veq&lt;/code&gt; 2.2.0.&lt;/p&gt; &#xA;&lt;h3&gt;Tests&lt;/h3&gt; &#xA;&lt;p&gt;Tests can be executed using: &lt;code&gt;(asdf:test-system :weird)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;I would like to thank:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/RainerJoswig&#34;&gt;https://twitter.com/RainerJoswig&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/jackrusher&#34;&gt;https://twitter.com/jackrusher&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/paulg&#34;&gt;https://twitter.com/paulg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/porglezomp&#34;&gt;https://twitter.com/porglezomp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/stylewarning&#34;&gt;https://twitter.com/stylewarning&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Hellseher&#34;&gt;https://github.com/Hellseher&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Who have provided me with useful hints and code feedback.&lt;/p&gt; &#xA;&lt;p&gt;The ASDF config and test setup was kindly suggested and implemented by Robert Smith (&lt;a href=&#34;https://twitter.com/stylewarning&#34;&gt;https://twitter.com/stylewarning&lt;/a&gt;). Although I have made some changes since then.&lt;/p&gt; &#xA;&lt;p&gt;Also, many thanks to &lt;a href=&#34;https://twitter.com/xach&#34;&gt;https://twitter.com/xach&lt;/a&gt; for making Quicklisp.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>atlas-engineer/nyxt</title>
    <updated>2022-05-29T02:34:33Z</updated>
    <id>tag:github.com,2022-05-29:/atlas-engineer/nyxt</id>
    <link href="https://github.com/atlas-engineer/nyxt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Nyxt - the hacker&#39;s power-browser.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+html: &lt;img src=&#34;https://nyxt.atlas.engineer/static/image/nyxt_256x256.png&#34; align=&#34;right&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Nyxt browser&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Nyxt&lt;/em&gt; is a keyboard-driven web browser designed for power users. Inspired by Emacs and Vim, it has familiar keybindings ([[https://en.wikipedia.org/wiki/Emacs][Emacs]], [[https://en.wikipedia.org/wiki/Vim_(text_editor)][vi]], [[https://en.wikipedia.org/wiki/IBM_Common_User_Access][CUA]]), and is infinitely extensible in Lisp.&lt;/p&gt; &#xA;&lt;p&gt;If you like Nyxt and you would like to help future development, please give us a star, spread the word, and support us on [[https://www.patreon.com/nyxt][Patreon]], thank you!&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Attention:&lt;/em&gt; Nyxt is under active development. Feel free to [[https://github.com/atlas-engineer/nyxt/issues][report]] bugs, instabilities or feature wishes.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;#+html: &lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;http://nyxt.atlas.engineer/&#34;&gt;Homepage&lt;/a&gt; | &#xA; &lt;a href=&#34;https://nyxt.atlas.engineer/download&#34;&gt;Downloads&lt;/a&gt; | &#xA; &lt;a href=&#34;https://nyxt.atlas.engineer/articles&#34;&gt;Articles&lt;/a&gt; | &#xA; &lt;a href=&#34;https://store.nyxt.atlas.engineer/&#34;&gt;Store&lt;/a&gt; | &#xA; &lt;a href=&#34;https://github.com/atlas-engineer/nyxt/raw/master/documents/README.org&#34;&gt;Developer&#39;s Manual&lt;/a&gt; | &#xA; &lt;a href=&#34;https://discourse.atlas.engineer/&#34;&gt;Forum&lt;/a&gt; | &#xA; &lt;a href=&#34;https://kiwiirc.com/nextclient/irc.libera.chat/nyxt&#34;&gt;Chat&lt;/a&gt; &#xA;&lt;/div&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Features For an exhaustive description of all of the features, please refer to the manual.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Fast tab switching&lt;/p&gt; &#xA;&lt;p&gt;Switch easily between your open tabs via fuzzy search. If you are looking for &lt;del&gt;&lt;a href=&#34;https://www.example.com&#34;&gt;https://www.example.com&lt;/a&gt;&lt;/del&gt;, you could type in &lt;del&gt;ele&lt;/del&gt;, &lt;del&gt;exa&lt;/del&gt;, &lt;del&gt;epl&lt;/del&gt;, or any other matching series of letters.&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;img src=&#34;https://nyxt.atlas.engineer/static/image/switch-buffer.png?&#34; align=&#34;center&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Multiple selection&lt;/p&gt; &#xA;&lt;p&gt;Commands can accept multiple inputs, allowing you to quickly perform an operation against multiple objects. In the example below we search for cactuses, and open up several images simultaneously:&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;img src=&#34;https://nyxt.atlas.engineer/static/image/multi-select.png?&#34; align=&#34;center&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Powerful bookmarks&lt;/p&gt; &#xA;&lt;p&gt;Bookmark a page with tags. Search bookmarks with compound queries. Capture more data about your bookmarks, and group and wrangle them in any way you like.&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;img src=&#34;https://nyxt.atlas.engineer/static/image/bookmark.png?&#34; align=&#34;center&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Multi tab search&lt;/p&gt; &#xA;&lt;p&gt;Search multiple tabs at the same time, and view all the results in a single window. Jump quickly through your open tabs to find what you need.&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;img src=&#34;https://nyxt.atlas.engineer/static/image/multi-search.png?&#34; align=&#34;center&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;** History as a tree&lt;/p&gt; &#xA;&lt;p&gt;History is represented as a tree that you can traverse. Smarter than the &#34;forwards-backwards&#34; abstraction found in other browsers, the tree makes sure you never lose track of where you&#39;ve been.&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;img src=&#34;https://nyxt.atlas.engineer/static/image/history.png?&#34; align=&#34;center&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Getting started ** Install Nyxt&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Nyxt supports:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GNU/Linux&lt;/li&gt; &#xA; &lt;li&gt;macOS (unofficial)&lt;/li&gt; &#xA; &lt;li&gt;FreeBSD (unofficial)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Nyxt has engine support for WebKit and &lt;em&gt;experimental support&lt;/em&gt; for WebEngine/Blink.&lt;/p&gt; &#xA;&lt;p&gt;Please find pre-built binaries at [[https://nyxt.atlas.engineer/download][Nyxt&#39;s downloads page]]. Nyxt is available on the following platforms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alpine.&lt;/li&gt; &#xA; &lt;li&gt;Debian and derivatives such as Ubuntu and Linux Mint.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/atlas-engineer/ports][MacPorts]].&lt;/li&gt; &#xA; &lt;li&gt;[[https://archlinux.org/][Arch Linux]]: Install with =pacman -Syu nyxt=.&lt;/li&gt; &#xA; &lt;li&gt;[[https://nixos.org/nix/][Nix]]: Install with =nix-env --install nyxt=.&lt;/li&gt; &#xA; &lt;li&gt;[[https://guix.gnu.org][Guix]]: Install with =guix install nyxt=.&lt;/li&gt; &#xA; &lt;li&gt;[[https://voidlinux.org/][Void]]: Install with =xbps-install nyxt=.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To install from source, please refer to the [[file:documents/README.org][developer&#39;s manual]].&lt;/p&gt; &#xA;&lt;p&gt;** Documentation &amp;amp; Customization&lt;/p&gt; &#xA;&lt;p&gt;For full documentation about Nyxt, how it works, and how to extend it please refer to the embedded manual. To get started, run the =manual= command (press =control= + =space=, type =manual= and confirm with =return=).&lt;/p&gt; &#xA;&lt;p&gt;If you want to help with development, or build Nyxt from source, read the developer&#39;s documentation at [[file:documents/README.org][documents/README.org]].&lt;/p&gt; &#xA;&lt;p&gt;** History of changes&lt;/p&gt; &#xA;&lt;p&gt;If you are running a recent version of Nyxt please run the =changelog= command. For older versions, please refer to the [[https://github.com/atlas-engineer/nyxt/blob/2.2.1/documents/CHANGELOG.org][CHANGELOG]].&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rabbibotton/clog</title>
    <updated>2022-05-29T02:34:33Z</updated>
    <id>tag:github.com,2022-05-29:/rabbibotton/clog</id>
    <link href="https://github.com/rabbibotton/clog" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CLOG - The Common Lisp Omnificent GUI&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CLOG - The Common Lisp Omnificent GUI&lt;/h1&gt; &#xA;&lt;h2&gt;David Botton &lt;a href=&#34;mailto:david@botton.com&#34;&gt;david@botton.com&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;License BSD 3-Clause License&lt;/h3&gt; &#xA;&lt;p&gt;View the HTML Documentation:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rabbibotton.github.io/clog/clog-manual.html&#34;&gt;https://rabbibotton.github.io/clog/clog-manual.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;View a short video on reddit about CLOG Builder&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.reddit.com/r/lisp/comments/sd9wf1/clog_builder_cl_web_3_awesome_lang_awesome_tool/&#34;&gt;https://www.reddit.com/r/lisp/comments/sd9wf1/clog_builder_cl_web_3_awesome_lang_awesome_tool/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/LEARN.md&#34;&gt;LEARN COMMON-LISP AND CLOG - LEARN.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://rabbibotton.github.io/images/clog.png&#34; alt=&#34;Image of CLOG&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Common Lisp Omnificent GUI, CLOG for short, uses web technology to produce graphical user interfaces for applications locally or remotely. CLOG can take the place, or work alongside, most cross-platform GUI frameworks and website frameworks. The CLOG package starts up the connectivity to the browser or other websocket client (often a browser embedded in a native template application.)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/CONCEPT.md&#34;&gt;CLOG - Technical Overview and Purpose&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;STATUS: CLOG 1.2 and CLOG Builder 1.1 released.&lt;/p&gt; &#xA;&lt;p&gt;CLOG is actually based on GNOGA, a framework I wrote for Ada in 2013 and used in commercial production code for the last 9+ years, i.e. the techiniques CLOG uses are solid and proven.&lt;/p&gt; &#xA;&lt;p&gt;CLOG is being actively extended daily. Check the github discussion boards for the latest.&lt;/p&gt; &#xA;&lt;p&gt;Some potential applications for CLOG:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cross-platform GUIs and Reports&lt;/li&gt; &#xA; &lt;li&gt;Secure websites and complex interactive web applications&lt;/li&gt; &#xA; &lt;li&gt;Mobile software (CLOG Runs native on Android and iOS)&lt;/li&gt; &#xA; &lt;li&gt;Massive multiplayer online games&lt;/li&gt; &#xA; &lt;li&gt;Monitoring software for embedded systems&lt;/li&gt; &#xA; &lt;li&gt;A fun way to teach programming and advanced multi-tasking parallel programming techniques. (CLOG is a parallel GUI)&lt;/li&gt; &#xA; &lt;li&gt;And the list goes on&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The key to CLOG is the relationship it forms with a Browser window or Browser control compiled to native code. CLOG uses websockets for communications and the browser to render a GUI that maintains an active soft realtime connection. For most CLOG applications all programming logic, events and decisions are done on the server which can be local, or remote over the web.&lt;/p&gt; &#xA;&lt;p&gt;CLOG is developed with ECL and SBCL, it is tested fairly regulary on Linux, Windows, Rasberry Pi (running Ubuntu), M1 and Intel Mac. It should in theory work out of the box on any system with Quicklisp (although you could hand install) and CLACK (easily switched out and the ecl Android/iPhone branch doesn&#39;t use).&lt;/p&gt; &#xA;&lt;p&gt;CLOG is in QuickLisp (ql:quickload :clog), but you likely want to live on the bleeding edge and use UltraLisp or clone the github repo into ~/common-lisp directory [or other quicklisp/asdf findable directory (push &#34;path/to/dir/of/projects&#34; ql:&lt;em&gt;local-project-directories&lt;/em&gt;) ]:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ~/common-lisp&#xA;git clone https://github.com/rabbibotton/clog.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To load this package and work through tutorials (assuming you have Quicklisp configured.)&lt;/p&gt; &#xA;&lt;p&gt;Note: If using portacle for Windows you will need to update Quicklisp use (ql:update-dist &#34;quicklisp&#34;) You will also likely need to copy the sqlite3 dll from &lt;a href=&#34;https://www.sqlite.org/download.html&#34;&gt;https://www.sqlite.org/download.html&lt;/a&gt; to portacle\win\lib Consider a custom &lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/WINDOWS.md&#34;&gt;install on windows&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start emacs then M-x slime&lt;/li&gt; &#xA; &lt;li&gt;In the REPL, run:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;CL-USER&amp;gt; (ql:quickload :clog)&#xA;CL-USER&amp;gt; (clog:run-tutorial 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Tip for Windows WSL linux user. Install &#34;sudo apt install xdg-utils&#34; to install xdg-open so that run-tutorial uses the windows browser.&lt;/p&gt; &#xA;&lt;p&gt;To see where the source, tutorial and demo files are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CL-USER&amp;gt; (clog:clog-install-dir)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can the run the demos with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CL-USER&amp;gt; (ql:quickload :clog)&#xA;CL-USER&amp;gt; (clog:run-demo 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The clog-db-admin tool can be run with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CL-USER&amp;gt; (ql:quickload :clog/tools)&#xA;CL-USER&amp;gt; (clog-tools:clog-db-admin)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The CLOG Builder tool can be run with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CL-USER&amp;gt; (ql:quickload :clog/tools)&#xA;CL-USER&amp;gt; (clog-tools:clog-builder)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also open a &#34;clog-repl&#34; window in your browser to play from the common-lisp repl:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CL-USER&amp;gt; (in-package clog-user)&#xA;CLOG-USER&amp;gt; (clog-repl)&#xA;CLOG-USER&amp;gt; (setf (background-color *body*) &#34;beige&#34;)&#xA;CLOG-USER&amp;gt; (create-div *body* :content &#34;Hello World!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The clog-repl URL is &lt;a href=&#34;http://127.0.0.1:8080/repl&#34;&gt;http://127.0.0.1:8080/repl&lt;/a&gt; &lt;em&gt;body&lt;/em&gt; will always refer to the last access of that URL.&lt;/p&gt; &#xA;&lt;p&gt;To open a browser with the CLOG manual:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CL-USER&amp;gt; (clog:open-manual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Work your way through the tutorials. You will see how quick and easy it is to be a CLOGer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://rabbibotton.github.io/images/clog-builder.png&#34; alt=&#34;Image of clog-builder&#34;&gt; &lt;img src=&#34;https://rabbibotton.github.io/images/cb-web.png&#34; alt=&#34;Image of clog-builder-web&#34;&gt; &lt;img src=&#34;https://rabbibotton.github.io/images/clog-demo1.png&#34; alt=&#34;Image of demo1&#34;&gt; &lt;img src=&#34;https://rabbibotton.github.io/images/clog-demo2.png&#34; alt=&#34;Image of demo2&#34;&gt; &lt;img src=&#34;https://rabbibotton.github.io/images/clog-demo3.png&#34; alt=&#34;Image of demo3&#34;&gt; &lt;img src=&#34;https://rabbibotton.github.io/images/clog-db-admin.png&#34; alt=&#34;Image of clog-db-admin&#34;&gt; &lt;img src=&#34;https://rabbibotton.github.io/images/clog-web-containers.png&#34; alt=&#34;Image of clog-web-containers&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here is a sample CLOG app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defpackage #:clog-user               ; Setup a package for our work to exist in&#xA;  (:use #:cl #:clog)                  ; Use the Common Lisp language and CLOG&#xA;  (:export start-tutorial))           ; Export as public the start-tutorial function&#xA;&#xA;(in-package :clog-user)               ; Tell the &#34;reader&#34; we are in the clog-user package&#xA;&#xA;&#xA;;; Define our CLOG application&#xA;(defun on-new-window (body)           ; Define the function called on-new-window&#xA;  &#34;On-new-window handler.&#34;            ; Optional docstring to describe function&#xA;&#xA;  (let ((hello-element                ; hello-element is a local variable that&#xA;                                      ; will be bound to our new CLOG-Element&#xA;&#xA;      ;; This application simply creates a CLOG-Element as a child to the&#xA;      ;; CLOG-body object in the browser window.&#xA;&#xA;      ;; A CLOG-Element represents a block of HTML (we will later see ways to&#xA;      ;; directly create buttons and all sorts of HTML elements in more&#xA;      ;; lisp-like ways with no knowledge of HTML or JavaScript.&#xA;      (create-child body &#34;&amp;lt;h1&amp;gt;Hello World! (click me!)&amp;lt;/h1&amp;gt;&#34;)))&#xA;&#xA;    (set-on-click hello-element      ; Now we set a function to handle clicks&#xA;          (lambda (obj)              ; In this case we use an anonymous function&#xA;            (setf (color hello-element) &#34;green&#34;))))))&#xA;&#xA;;; To see all the events one can set and the many properties and styles that&#xA;;; exist, refer to the CLOG manual or the file clog-element.lisp&#xA;&#xA;&#xA;(defun start-tutorial ()   ; Define the function called start-tutorial&#xA;  &#34;Start tutorial.&#34;        ; Optional docstring to describe function&#xA;&#xA;  ;; Initialize the CLOG system&#xA;  (initialize #&#39;on-new-window)&#xA;  ;; Set the function on-new-window to execute&#xA;  ;; every time a browser connection to our app.&#xA;  ;; #&#39; tells Common Lisp to pass the function&#xA;  ;; to intialize and not to execute it.&#xA;&#xA;&#xA;  ;; Open a browser to http://12.0.0.1:8080 - the default for CLOG apps&#xA;  (open-browser))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other samples of CLOG on the web:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/byulparan/clog-collider-experience&#34;&gt;CLOG + cl-collider&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/lisp/comments/tl46of/would_it_be_cool_to_run_a_clog_app_on_mobile_you/&#34;&gt;CLOG on iOS and Android&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/mmontone/3a5a8a57675750e99ffb7fa64f40bc39#file-clog-learn-lisp&#34;&gt;Learn CLOG Dashboard&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;CLOG Builder Tutorials&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Chat App &lt;a href=&#34;https://www.reddit.com/r/lisp/comments/sj1tv5/clog_builder_tutorial_1_a_chat_app_from_start_to/&#34;&gt;https://www.reddit.com/r/lisp/comments/sj1tv5/clog_builder_tutorial_1_a_chat_app_from_start_to/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Building a Web Page &lt;a href=&#34;https://www.reddit.com/r/lisp/comments/sn8j77/clog_builder_tutorial_2_building_a_web_page/&#34;&gt;https://www.reddit.com/r/lisp/comments/sn8j77/clog_builder_tutorial_2_building_a_web_page/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Importing HTML in to Builder, Adding Pages and Hand Coding &lt;a href=&#34;https://www.reddit.com/r/lisp/comments/snvv0w/clog_builder_tutorial_3_importing_html_adding/&#34;&gt;https://www.reddit.com/r/lisp/comments/snvv0w/clog_builder_tutorial_3_importing_html_adding/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CLOS-CONTACT - Using database controls demos a contact manager app in clog. &lt;a href=&#34;https://www.reddit.com/r/lisp/comments/t61sib/clog_builder_tutorial_4_a_complete_database_app/&#34;&gt;https://www.reddit.com/r/lisp/comments/t61sib/clog_builder_tutorial_4_a_complete_database_app/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;CLOG Tutorials&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/01-tutorial.lisp&#34;&gt;01-tutorial.lisp&lt;/a&gt; - Hello World&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/02-tutorial.lisp&#34;&gt;02-tutorial.lisp&lt;/a&gt; - Closures in CLOG&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/03-tutorial.lisp&#34;&gt;03-tutorial.lisp&lt;/a&gt; - Events fire in parallel&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/04-tutorial.lisp&#34;&gt;04-tutorial.lisp&lt;/a&gt; - The event target, reusing event handlers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/05-tutorial.lisp&#34;&gt;05-tutorial.lisp&lt;/a&gt; - Using connection-data-item&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/06-tutorial.lisp&#34;&gt;06-tutorial.lisp&lt;/a&gt; - Tasking and events&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/07-tutorial.lisp&#34;&gt;07-tutorial.lisp&lt;/a&gt; - My first CLOG video game (and handling disconnects)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/08-tutorial.lisp&#34;&gt;08-tutorial.lisp&lt;/a&gt; - Mice Love Containers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/09-tutorial.lisp&#34;&gt;09-tutorial.lisp&lt;/a&gt; - Tabs, panels, and forms&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/10-tutorial.lisp&#34;&gt;10-tutorial.lisp&lt;/a&gt; - Canvas&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/11-tutorial.lisp&#34;&gt;11-tutorial.lisp&lt;/a&gt; - Attaching to existing HTML&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/12-tutorial.lisp&#34;&gt;12-tutorial.lisp&lt;/a&gt; - Running a website in CLOG (routing)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/13-tutorial&#34;&gt;13-tutorial/&lt;/a&gt; - Flying Solo - A minimalist CLOG project&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/14-tutorial.lisp&#34;&gt;14-tutorial.lisp&lt;/a&gt; - Local (persistent) and Session client-side storage&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/15-tutorial.lisp&#34;&gt;15-tutorial.lisp&lt;/a&gt; - Multi-media&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/16-tutorial.lisp&#34;&gt;16-tutorial.lisp&lt;/a&gt; - Bootstrap 4, Loading css files and javascript&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/17-tutorial.lisp&#34;&gt;17-tutorial.lisp&lt;/a&gt; - W3.CSS layout example and Form submit methods&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/18-tutorial.lisp&#34;&gt;18-tutorial.lisp&lt;/a&gt; - Drag and Drop&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/19-tutorial.lisp&#34;&gt;19-tutorial.lisp&lt;/a&gt; - Using JavaScript components&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/20-tutorial.lisp&#34;&gt;20-tutorial.lisp&lt;/a&gt; - New CLOG plugin from JavaScript component&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/21-tutorial.lisp&#34;&gt;21-tutorial.lisp&lt;/a&gt; - New CLOG plugin in Common-Lisp&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/22-tutorial.lisp&#34;&gt;22-tutorial.lisp&lt;/a&gt; - CLOG GUI Menus and Desktop Look and Feel&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/23-tutorial.lisp&#34;&gt;23-tutorial.lisp&lt;/a&gt; - Using semaphores to wait for input&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/24-tutorial.lisp&#34;&gt;24-tutorial.lisp&lt;/a&gt; - CLOG WEB containers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/25-tutorial.lisp&#34;&gt;25-tutorial.lisp&lt;/a&gt; - A &#34;local&#34; web app using CLOG WEB&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/26-tutorial.lisp&#34;&gt;26-tutorial.lisp&lt;/a&gt; - A web page and form with CLOG WEB&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/27-tutorial.lisp&#34;&gt;27-tutorial.lisp&lt;/a&gt; - Panel Box Layouts&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/28-tutorial&#34;&gt;28-tutorial/&lt;/a&gt; - CLOG Builder Hello - A minimalist CLOG Builder project&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/29-tutorial.lisp&#34;&gt;29-tutorial.lisp&lt;/a&gt; - Presentations (and jQuery) - linking lisp objects to clog objects&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/30-tutorial.lisp&#34;&gt;30-tutorial.lisp&lt;/a&gt; - Instant websites - clog-web-site&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/31-tutorial.lisp&#34;&gt;31-tutorial.lisp&lt;/a&gt; - Database and Authority based websites - clog-web-dbi and clog-auth&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/32-tutorial.lisp&#34;&gt;32-tutorial.lisp&lt;/a&gt; - Database Managed Content websites - clog-web-content&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/33-tutorial.lisp&#34;&gt;33-tutorial.lisp&lt;/a&gt; - with-clog-create - Using a declartive syntax for GUIs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;CLOG Demos&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/demos/01-demo.lisp&#34;&gt;01-demo.lisp&lt;/a&gt; - Sparkey the Snake Game&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/demos/02-demo.lisp&#34;&gt;02-demo.lisp&lt;/a&gt; - Chat - Private instant messenger&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/demos/03-demo.lisp&#34;&gt;03-demo.lisp&lt;/a&gt; - IDE - A very simple common lisp IDE&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/demos/04-demo.lisp&#34;&gt;04-demo.lisp&lt;/a&gt; - CMS Website - A very simple database driven website&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Tool Summary&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;clog-db-admin - SQLite3 admin tool&lt;/li&gt; &#xA; &lt;li&gt;clog-builder - Rapid visual interactive development for Web and GUIs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;High Order Extensions to CLOG&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;clog-gui - Desktop over the web&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Menus&lt;/li&gt; &#xA;   &lt;li&gt;Windowing system&lt;/li&gt; &#xA;   &lt;li&gt;Modal windows, Keep-on-top windows&lt;/li&gt; &#xA;   &lt;li&gt;File Load / Save dialogs&lt;/li&gt; &#xA;   &lt;li&gt;Alert, Input and Confirmation dialogs&lt;/li&gt; &#xA;   &lt;li&gt;Form dialogs&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;clog-web - Webpage creation&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Auto column layouts&lt;/li&gt; &#xA;   &lt;li&gt;12 Point Grid System layouts&lt;/li&gt; &#xA;   &lt;li&gt;Content containers&lt;/li&gt; &#xA;   &lt;li&gt;Panels&lt;/li&gt; &#xA;   &lt;li&gt;Sidebar menus&lt;/li&gt; &#xA;   &lt;li&gt;Compositor containers&lt;/li&gt; &#xA;   &lt;li&gt;Menus&lt;/li&gt; &#xA;   &lt;li&gt;Alerts&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;clog-web-site - Instant themed websites with plugins:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;clog-web-page - create a theme based page&lt;/li&gt; &#xA;   &lt;li&gt;clog-web-dbi - database driven websites (uses clog-auth)&lt;/li&gt; &#xA;   &lt;li&gt;clog-web-forms - Instant web forms&lt;/li&gt; &#xA;   &lt;li&gt;clog-web-themes - basic themes for clog based websites&lt;/li&gt; &#xA;   &lt;li&gt;clog-web-content - database driven content,tags, comments (in progress)&lt;/li&gt; &#xA;   &lt;li&gt;clog-web-blog - instant blogs (in progress)&lt;/li&gt; &#xA;   &lt;li&gt;clog-web-cart - instant shopping carts (future)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;clog-panels - Quick application layouts&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;clog-presentations - bi-directional linking of Lisp Objects and CLOG Objects&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;clog-jquery - DOM queries&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;clog-data - Move data to and from groups of controls&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;SQL writer helpers for basic SQL&lt;/li&gt; &#xA;   &lt;li&gt;CLOG-Database - Database control for CLOG Builder&lt;/li&gt; &#xA;   &lt;li&gt;CLOG-One-Row - One row at a time table access auto binds to controls in CLOG Builder&lt;/li&gt; &#xA;   &lt;li&gt;CLOG-Lookup - Version of the select control (dropdown and listbox) that are database connected&lt;/li&gt; &#xA;   &lt;li&gt;CLOG-DB-Table - Version of html table that are database connected&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;clog-auth - Authentication and authorization framework&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(See &lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/FUTURE.md&#34;&gt;FUTURE.md&lt;/a&gt; for future plans)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>google/lisp-koans</title>
    <updated>2022-05-29T02:34:33Z</updated>
    <id>tag:github.com,2022-05-29:/google/lisp-koans</id>
    <link href="https://github.com/google/lisp-koans" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Common Lisp Koans is a language learning exercise in the same vein as the ruby koans, python koans and others. It is a port of the prior koans with some modifications to highlight lisp-specific features. Structured as ordered groups of broken unit tests, the project guides the learner progressively through many Common Lisp language features.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lisp Koans&lt;/h1&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;One-time Method&lt;/h3&gt; &#xA;&lt;p&gt;From a terminal, execute your lisp interpreter on the file &#39;contemplate.lisp&#39; e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;abcl --noinform --noinit --load contemplate.lisp --eval &#39;(quit)&#39;&#xA;ccl -n -l contemplate.lisp -e &#39;(quit)&#39;&#xA;clisp -q -norc -ansi contemplate.lisp&#xA;ecl -norc -load contemplate.lisp -eval &#39;(quit)&#39;&#xA;sbcl --script contemplate.lisp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Watching the Koans&lt;/h3&gt; &#xA;&lt;p&gt;On Linux and MacOS systems, the shell scripts &lt;code&gt;meditate-linux.sh&lt;/code&gt; and &lt;code&gt;meditate-macos.sh&lt;/code&gt; can be used to automatically evaluate &#39;contemplate.lisp&#39; whenever the koan files are modified, providing immediate feedback on changes to the koans. To run the MacOS version you need to have &lt;a href=&#34;https://github.com/emcrisostomo/fswatch&#34;&gt;&lt;code&gt;fswatch&lt;/code&gt;&lt;/a&gt; installed. From a terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd lisp-koans&#xA;$ sh meditate-linux.sh # on Linux&#xA;$ sh meditate-macos.sh # on MacOS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Results of Contemplation&lt;/h2&gt; &#xA;&lt;p&gt;Running on a fresh version should output the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Thinking about ASSERTS&#xA;    FILL-IN-THE-BLANKS requires more meditation.&#xA;&#xA;You have not yet reached enlightenment.&#xA;    A koan is incomplete.&#xA;Please meditate on the following code:&#xA;    File &#34;koans/asserts.lisp&#34;&#xA;    Koan &#34;FILL-IN-THE-BLANKS&#34;&#xA;    Current koan assert status is &#34;(INCOMPLETE INCOMPLETE INCOMPLETE)&#34;&#xA;&#xA;You are now 0/198 koans and 0/31 lessons closer to reaching enlightenment.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This indicates that the script has completed, and that the learner should look to asserts.lisp to locate and fix the problem. The problem will be within a define-test expression such as&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;;; In order to progress, fill in the blanks, denoted via ____ in source code.&#xA;;;; Sometimes, you will be asked to provide values that are equal to something.&#xA;&#xA;(define-test fill-in-the-blanks&#xA;  (assert-equal ____ 2)&#xA;  (assert-equal ____ 3.14)&#xA;  (assert-equal ____ &#34;Hello World&#34;))&#xA;&#xA;;;; Sometimes, you will be asked to say whether something is true or false,&#xA;;;; In Common Lisp, the canonical values for truth and falsehood are T and NIL.&#xA;&#xA;(define-test assert-true&#xA;  (assert-true ____))&#xA;&#xA;(define-test assert-false&#xA;  (assert-false ____))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case, the test is incomplete, and the student should fill in the blank (____) with appropriate lisp code to make the assert pass.&lt;/p&gt; &#xA;&lt;p&gt;In order to test code, or evaluate tests interactively, students may copy and paste code into the lisp command line REPL.&lt;/p&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;p&gt;To test the koans, execute your lisp interpreter on the file &#39;contemplate.lisp&#39; e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;abcl --noinform --noinit --load test.lisp --eval &#39;(quit)&#39;&#xA;ccl -n -l test.lisp -e &#39;(quit)&#39;&#xA;clisp -q -norc -ansi test.lisp&#xA;ecl -norc -load test.lisp -eval &#39;(quit)&#39;&#xA;sbcl --script test.lisp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quoting the Ruby Koans instructions&lt;/h2&gt; &#xA;&lt;p&gt;&#34;In test-driven development the mantra has always been, red, green, refactor. Write a failing test and run it (red), make the test pass (green), then refactor it (that is look at the code and see if you can make it any better). In this case you will need to run the koan and see it fail (red), make the test pass (green), then take a moment and reflect upon the test to see what it is teaching you and improve the code to better communicate its intent (refactor).&#34;&lt;/p&gt; &#xA;&lt;h2&gt;Content&lt;/h2&gt; &#xA;&lt;p&gt;The Common Lisp koans are based on the Python koans and Ruby koans projects. Additionally, many of the tests are based on new material that is special to Common Lisp.&lt;/p&gt; &#xA;&lt;p&gt;Note that the unit on threads uses bordeaux-threads and bt-semaphore. The user must have Quicklisp installed and loaded or a reader macro will remove the instructions to run :threads. For information and instructions on installing Quicklisp please see: &lt;a href=&#34;https://www.quicklisp.org/beta/&#34;&gt;https://www.quicklisp.org/beta/&lt;/a&gt; The user can either remove #+quicklisp and uncomment (load &#34;~/.quicklisp/setup.lisp&#34;) in threads.lisp, or if they know quicklisp will be loaded while running contemplate.lisp do nothing.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mirkov/verbose-calcs</title>
    <updated>2022-05-29T02:34:33Z</updated>
    <id>tag:github.com,2022-05-29:/mirkov/verbose-calcs</id>
    <link href="https://github.com/mirkov/verbose-calcs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Provide environment that prints computation results as they are performed&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: &lt;del&gt;verbose-calcs&lt;/del&gt; package&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Introduction and Background This package provides functionality for defining calculations that at the same time generate textual output with their results. It provides two sets commands:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;vlet&lt;/del&gt; and &lt;del&gt;vlet*&lt;/del&gt; establish and prints out bindings, and then evaluate the body&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;defvfun&lt;/del&gt; is a &lt;del&gt;defun&lt;/del&gt; that prints out argument values and a header prior to executing the body&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;vlet&lt;/del&gt; and &lt;del&gt;vlet*&lt;/del&gt; This is a &lt;del&gt;let(*)&lt;/del&gt;-like environment. It establishes bindings. As each binding is established, its value is printed out.&lt;/p&gt; &lt;p&gt;If no bindings are established, &lt;del&gt;body&lt;/del&gt; is executed inside a &lt;del&gt;progn&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;defvfun&lt;/del&gt; Defines a function with keyword arguments only. The defaults can be specified when the function is defined.&lt;/p&gt; &lt;p&gt;Upon execution, the function prints its header and values of all arguments.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To do&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Improve &lt;del&gt;defvfun&lt;/del&gt;&#39;s documentation handling&lt;/li&gt; &#xA;   &lt;li&gt;Modify &lt;del&gt;defvfun&lt;/del&gt; to print out the calculation result&lt;/li&gt; &#xA;   &lt;li&gt;Consider adding a preamble to &lt;del&gt;vlet&lt;/del&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>