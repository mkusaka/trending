<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-05-29T02:04:57Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hathach/tinyusb</title>
    <updated>2022-05-29T02:04:57Z</updated>
    <id>tag:github.com,2022-05-29:/hathach/tinyusb</id>
    <link href="https://github.com/hathach/tinyusb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open source cross-platform USB stack for embedded system&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. figure:: docs/assets/logo.svg :alt: TinyUSB&lt;/p&gt; &#xA;&lt;p&gt;|Build Status| |Documentation Status| |License|&lt;/p&gt; &#xA;&lt;p&gt;TinyUSB is an open-source cross-platform USB Host/Device stack for embedded system, designed to be memory-safe with no dynamic allocation and thread-safe with all interrupt events are deferred then handled in the non-ISR task function.&lt;/p&gt; &#xA;&lt;p&gt;Please take a look at the online &lt;code&gt;documentation &amp;lt;https://docs.tinyusb.org/&amp;gt;&lt;/code&gt;__.&lt;/p&gt; &#xA;&lt;p&gt;.. figure:: docs/assets/stack.svg :width: 500px :alt: stackup&lt;/p&gt; &#xA;&lt;p&gt;::&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.&#xA;├── docs            # Documentation&#xA;├── examples        # Sample with Makefile build support&#xA;├── hw&#xA;│&amp;nbsp;&amp;nbsp; ├── bsp         # Supported boards source files&#xA;│&amp;nbsp;&amp;nbsp; └── mcu         # Low level mcu core &amp;amp; peripheral drivers&#xA;├── lib             # Sources from 3rd party such as freeRTOS, fatfs ...&#xA;├── src             # All sources files for TinyUSB stack itself.&#xA;├── test            # Unit tests for the stack&#xA;└── tools           # Files used internally&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Supported MCUs&lt;/h1&gt; &#xA;&lt;p&gt;The stack supports the following MCUs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Allwinner:&lt;/strong&gt; F1C100s/F1C200s&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Broadcom:&lt;/strong&gt; BCM2837, BCM2711&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Dialog:&lt;/strong&gt; DA1469x&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Espressif:&lt;/strong&gt; ESP32-S2, ESP32-S3&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;GigaDevice:&lt;/strong&gt; GD32VF103&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Infineon:&lt;/strong&gt; XMC4500&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;MicroChip:&lt;/strong&gt; SAMD11, SAMD21, SAMD51, SAME5x, SAMG55, SAML21, SAML22, SAME7x&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;NordicSemi:&lt;/strong&gt; nRF52833, nRF52840, nRF5340&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Nuvoton:&lt;/strong&gt; NUC120, NUC121/NUC125, NUC126, NUC505&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;NXP:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;iMX RT Series: RT1011, RT1015, RT1021, RT1052, RT1062, RT1064&lt;/li&gt; &#xA;   &lt;li&gt;Kinetis: KL25, K32L2&lt;/li&gt; &#xA;   &lt;li&gt;LPC Series: 11u, 13, 15, 17, 18, 40, 43, 51u, 54, 55&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Raspberry Pi:&lt;/strong&gt; RP2040&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Renesas:&lt;/strong&gt; RX63N, RX65N, RX72N&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Silabs:&lt;/strong&gt; EFM32GG&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Sony:&lt;/strong&gt; CXD56&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ST:&lt;/strong&gt; STM32 series: F0, F1, F2, F3, F4, F7, H7, G4, L0, L1, L4, L4+&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;TI:&lt;/strong&gt; MSP430, MSP432E4, TM4C123&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ValentyUSB:&lt;/strong&gt; eptri&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here is the list of &lt;code&gt;Supported Devices&lt;/code&gt;_ that can be used with provided examples.&lt;/p&gt; &#xA;&lt;h1&gt;Device Stack&lt;/h1&gt; &#xA;&lt;p&gt;Supports multiple device configurations by dynamically changing USB descriptors, low power functions such like suspend, resume, and remote wakeup. The following device classes are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Audio Class 2.0 (UAC2)&lt;/li&gt; &#xA; &lt;li&gt;Bluetooth Host Controller Interface (BTH HCI)&lt;/li&gt; &#xA; &lt;li&gt;Communication Device Class (CDC)&lt;/li&gt; &#xA; &lt;li&gt;Device Firmware Update (DFU): DFU mode (WIP) and Runtime&lt;/li&gt; &#xA; &lt;li&gt;Human Interface Device (HID): Generic (In &amp;amp; Out), Keyboard, Mouse, Gamepad etc ...&lt;/li&gt; &#xA; &lt;li&gt;Mass Storage Class (MSC): with multiple LUNs&lt;/li&gt; &#xA; &lt;li&gt;Musical Instrument Digital Interface (MIDI)&lt;/li&gt; &#xA; &lt;li&gt;Network with RNDIS, Ethernet Control Model (ECM), Network Control Model (NCM)&lt;/li&gt; &#xA; &lt;li&gt;Test and Measurement Class (USBTMC)&lt;/li&gt; &#xA; &lt;li&gt;Video class 1.5 (UVC): work in progress&lt;/li&gt; &#xA; &lt;li&gt;Vendor-specific class support with generic In &amp;amp; Out endpoints. Can be used with MS OS 2.0 compatible descriptor to load winUSB driver without INF file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WebUSB &amp;lt;https://github.com/WICG/webusb&amp;gt;&lt;/code&gt;__ with vendor-specific class&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you have a special requirement, &lt;code&gt;usbd_app_driver_get_cb()&lt;/code&gt; can be used to write your own class driver without modifying the stack. Here is how the RPi team added their reset interface &lt;code&gt;raspberrypi/pico-sdk#197 &amp;lt;https://github.com/raspberrypi/pico-sdk/pull/197&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;h1&gt;Host Stack&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Human Interface Device (HID): Keyboard, Mouse, Generic&lt;/li&gt; &#xA; &lt;li&gt;Mass Storage Class (MSC)&lt;/li&gt; &#xA; &lt;li&gt;Hub currently only supports 1 level of hub (due to my laziness)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;OS Abstraction layer&lt;/h1&gt; &#xA;&lt;p&gt;TinyUSB is completely thread-safe by pushing all Interrupt Service Request (ISR) events into a central queue, then processing them later in the non-ISR context task function. It also uses semaphore/mutex to access shared resources such as Communication Device Class (CDC) FIFO. Therefore the stack needs to use some of the OS&#39;s basic APIs. Following OSes are already supported out of the box.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;No OS&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FreeRTOS&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;RT-Thread &amp;lt;https://github.com/RT-Thread/rt-thread&amp;gt;&lt;/code&gt;&lt;em&gt;: &lt;code&gt;repo &amp;lt;https://github.com/RT-Thread-packages/tinyusb&amp;gt;&lt;/code&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mynewt&lt;/strong&gt; Due to the newt package build system, Mynewt examples are better to be on its &lt;code&gt;own repo &amp;lt;https://github.com/hathach/mynewt-tinyusb-example&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Local Docs&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Info&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Uses&lt;/code&gt;_&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Changelog&lt;/code&gt;_&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Contributors&lt;/code&gt;_&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Reference&lt;/code&gt;_&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Supported Devices&lt;/code&gt;_&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Getting Started&lt;/code&gt;_&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Concurrency&lt;/code&gt;_&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Contributing&lt;/code&gt;_&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Code of Conduct&lt;/code&gt;_&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Structure&lt;/code&gt;_&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Porting&lt;/code&gt;_&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;All TinyUSB sources in the &lt;code&gt;src&lt;/code&gt; folder are licensed under MIT license, the &lt;code&gt;Full license is here &amp;lt;LICENSE&amp;gt;&lt;/code&gt;__. However, each file can be individually licensed especially those in &lt;code&gt;lib&lt;/code&gt; and &lt;code&gt;hw/mcu&lt;/code&gt; folder. Please make sure you understand all the license term for files you use in your project.&lt;/p&gt; &#xA;&lt;p&gt;.. |Build Status| image:: &lt;a href=&#34;https://github.com/hathach/tinyusb/workflows/Build/badge.svg&#34;&gt;https://github.com/hathach/tinyusb/workflows/Build/badge.svg&lt;/a&gt; :target: &lt;a href=&#34;https://github.com/hathach/tinyusb/actions&#34;&gt;https://github.com/hathach/tinyusb/actions&lt;/a&gt; .. |Documentation Status| image:: &lt;a href=&#34;https://readthedocs.org/projects/tinyusb/badge/?version=latest&#34;&gt;https://readthedocs.org/projects/tinyusb/badge/?version=latest&lt;/a&gt; :target: &lt;a href=&#34;https://docs.tinyusb.org/en/latest/?badge=latest&#34;&gt;https://docs.tinyusb.org/en/latest/?badge=latest&lt;/a&gt; .. |License| image:: &lt;a href=&#34;https://img.shields.io/badge/license-MIT-brightgreen.svg&#34;&gt;https://img.shields.io/badge/license-MIT-brightgreen.svg&lt;/a&gt; :target: &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;https://opensource.org/licenses/MIT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. _Uses: docs/info/uses.rst .. _Changelog: docs/info/changelog.rst .. _Contributors: CONTRIBUTORS.rst .. _Reference: docs/reference/index.rst .. _Supported Devices: docs/reference/supported.rst .. _Getting Started: docs/reference/getting_started.rst .. _Concurrency: docs/reference/concurrency.rst .. _Contributing: docs/contributing/index.rst .. _Code of Conduct: CODE_OF_CONDUCT.rst .. _Structure: docs/contributing/structure.rst .. _Porting: docs/contributing/porting.rst&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>raysan5/raylib</title>
    <updated>2022-05-29T02:04:57Z</updated>
    <id>tag:github.com,2022-05-29:/raysan5/raylib</id>
    <link href="https://github.com/raysan5/raylib" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple and easy-to-use library to enjoy videogames programming&lt;/p&gt;&lt;hr&gt;&lt;img align=&#34;left&#34; src=&#34;https://github.com/raysan5/raylib/raw/master/logo/raylib_logo_animation.gif&#34; width=&#34;288px&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;raylib is a simple and easy-to-use library to enjoy videogames programming.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;raylib is highly inspired by Borland BGI graphics lib and by XNA framework and it&#39;s specially well suited for prototyping, tooling, graphical applications, embedded systems and education.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE for ADVENTURERS: raylib is a programming library to enjoy videogames programming; no fancy interface, no visual helpers, no debug button... just coding in the most pure spartan-programmers way.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ready to learn? Jump to &lt;a href=&#34;https://www.raylib.com/examples.html&#34;&gt;code examples!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/raysan5/raylib&#34; alt=&#34;GitHub Contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/raysan5/raylib/total&#34; alt=&#34;GitHub Releases Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/raysan5/raylib?style=flat&amp;amp;label=stars&#34; alt=&#34;GitHub Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/commits/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/commits-since/raysan5/raylib/4.0.0&#34; alt=&#34;GitHub commits since tagged version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/project/raylib/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/tiny-repos/raylib.svg?sanitize=true&#34; alt=&#34;Packaging Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/raysan5/raylib/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-zlib%2Flibpng-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/raylib&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/426912293134270465.svg?label=Discord&amp;amp;logo=discord&#34; alt=&#34;Discord Members&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.reddit.com/r/raylib/&#34;&gt;&lt;img src=&#34;https://img.shields.io/reddit/subreddit-subscribers/raylib?label=reddit%20r%2Fraylib&amp;amp;logo=reddit&#34; alt=&#34;Subreddit Subscribers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/c/raylib&#34;&gt;&lt;img src=&#34;https://img.shields.io/youtube/channel/subscribers/UC8WIBkhYb5sBNqXO1mZ7WSQ?style=flat&amp;amp;label=Youtube&amp;amp;logo=youtube&#34; alt=&#34;Youtube Subscribers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.twitch.tv/raysan5&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitch/status/raysan5?style=flat&amp;amp;label=Twitch&amp;amp;logo=twitch&#34; alt=&#34;Twitch Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/raysan5&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/raysan5?style=flat&amp;amp;label=@raysan5&amp;amp;color=1da1f2&amp;amp;logo=twitter&#34; alt=&#34;Twitter Followers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/actions?query=workflow%3AWindows&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/workflows/Windows/badge.svg?sanitize=true&#34; alt=&#34;Windows&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/actions?query=workflow%3ALinux&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/workflows/Linux/badge.svg?sanitize=true&#34; alt=&#34;Linux&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/actions?query=workflow%3AmacOS&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/workflows/macOS/badge.svg?sanitize=true&#34; alt=&#34;macOS&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/actions?query=workflow%3AAndroid&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/workflows/Android/badge.svg?sanitize=true&#34; alt=&#34;Android&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/actions?query=workflow%3AWebAssembly&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/workflows/WebAssembly/badge.svg?sanitize=true&#34; alt=&#34;WebAssembly&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/actions?query=workflow%3ACMakeBuilds&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/workflows/CMakeBuilds/badge.svg?sanitize=true&#34; alt=&#34;CMakeBuilds&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/actions/workflows/windows_examples.yml&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/actions/workflows/windows_examples.yml/badge.svg?sanitize=true&#34; alt=&#34;Windows Examples&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/actions/workflows/linux_examples.yml&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/actions/workflows/linux_examples.yml/badge.svg?sanitize=true&#34; alt=&#34;Linux Examples&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;NO external dependencies&lt;/strong&gt;, all required libraries are &lt;a href=&#34;https://github.com/raysan5/raylib/tree/master/src/external&#34;&gt;bundled into raylib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Multiple platforms supported: &lt;strong&gt;Windows, Linux, MacOS, RPI, Android, HTML5... and more!&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Written in plain C code (C99) in PascalCase/camelCase notation&lt;/li&gt; &#xA; &lt;li&gt;Hardware accelerated with OpenGL (&lt;strong&gt;1.1, 2.1, 3.3, 4.3 or ES 2.0&lt;/strong&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Unique OpenGL abstraction layer&lt;/strong&gt; (usable as standalone module): &lt;a href=&#34;https://github.com/raysan5/raylib/raw/master/src/rlgl.h&#34;&gt;rlgl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Multiple &lt;strong&gt;Fonts&lt;/strong&gt; formats supported (TTF, XNA fonts, AngelCode fonts)&lt;/li&gt; &#xA; &lt;li&gt;Multiple texture formats supported, including &lt;strong&gt;compressed formats&lt;/strong&gt; (DXT, ETC, ASTC)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Full 3D support&lt;/strong&gt;, including 3D Shapes, Models, Billboards, Heightmaps and more!&lt;/li&gt; &#xA; &lt;li&gt;Flexible Materials system, supporting classic maps and &lt;strong&gt;PBR maps&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Animated 3D models&lt;/strong&gt; supported (skeletal bones animation) (IQM)&lt;/li&gt; &#xA; &lt;li&gt;Shaders support, including model and &lt;strong&gt;postprocessing&lt;/strong&gt; shaders.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Powerful math module&lt;/strong&gt; for Vector, Matrix and Quaternion operations: &lt;a href=&#34;https://github.com/raysan5/raylib/raw/master/src/raymath.h&#34;&gt;raymath&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Audio loading and playing with streaming support (WAV, OGG, MP3, FLAC, XM, MOD)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;VR stereo rendering&lt;/strong&gt; support with configurable HMD device parameters&lt;/li&gt; &#xA; &lt;li&gt;Huge examples collection with &lt;a href=&#34;https://github.com/raysan5/raylib/tree/master/examples&#34;&gt;+120 code examples&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;Bindings to &lt;a href=&#34;https://github.com/raysan5/raylib/raw/master/BINDINGS.md&#34;&gt;+50 programming languages&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Free and open source&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;basic example&lt;/h2&gt; &#xA;&lt;p&gt;This is a basic raylib example, it creates a window and it draws the text &lt;code&gt;&#34;Congrats! You created your first window!&#34;&lt;/code&gt; in the middle of the screen. Check this example &lt;a href=&#34;https://www.raylib.com/examples/core/loader.html?name=core_basic_window&#34;&gt;running live on web here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &#34;raylib.h&#34;&#xA;&#xA;int main(void)&#xA;{&#xA;    InitWindow(800, 450, &#34;raylib [core] example - basic window&#34;);&#xA;&#xA;    while (!WindowShouldClose())&#xA;    {&#xA;        BeginDrawing();&#xA;            ClearBackground(RAYWHITE);&#xA;            DrawText(&#34;Congrats! You created your first window!&#34;, 190, 200, 20, LIGHTGRAY);&#xA;        EndDrawing();&#xA;    }&#xA;&#xA;    CloseWindow();&#xA;&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;build and installation&lt;/h2&gt; &#xA;&lt;p&gt;raylib binary releases for Windows, Linux, macOS, Android and HTML5 are available at the &lt;a href=&#34;https://github.com/raysan5/raylib/releases&#34;&gt;Github Releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;raylib is also available via multiple &lt;a href=&#34;https://github.com/raysan5/raylib/issues/613&#34;&gt;package managers&lt;/a&gt; on multiple OS distributions.&lt;/p&gt; &#xA;&lt;h4&gt;Installing and building raylib on multiple platforms&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki#development-platforms&#34;&gt;raylib Wiki&lt;/a&gt; contains detailed instructions on building and usage on multiple platforms.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-on-Windows&#34;&gt;Working on Windows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-on-macOS&#34;&gt;Working on macOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-on-GNU-Linux&#34;&gt;Working on GNU Linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-on-Chrome-OS&#34;&gt;Working on Chrome OS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-on-FreeBSD&#34;&gt;Working on FreeBSD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-on-Raspberry-Pi&#34;&gt;Working on Raspberry Pi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-for-Android&#34;&gt;Working for Android&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-for-Web-(HTML5)&#34;&gt;Working for Web (HTML5)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-with-CMake&#34;&gt;Working anywhere with CMake&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Note that Wiki is open for edit, if you find some issue while building raylib for your target platform, feel free to edit the Wiki or open and issue related to it.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Setup raylib with multiple IDEs&lt;/h4&gt; &#xA;&lt;p&gt;raylib has been developed on Windows platform using &lt;a href=&#34;https://notepad-plus-plus.org/&#34;&gt;Notepad++&lt;/a&gt; and &lt;a href=&#34;https://www.mingw-w64.org/&#34;&gt;MinGW GCC&lt;/a&gt; compiler but it can be used with other IDEs on multiple platforms.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/tree/master/projects&#34;&gt;Projects directory&lt;/a&gt; contains several ready-to-use &lt;strong&gt;project templates&lt;/strong&gt; to build raylib and code examples with multiple IDEs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note that there are lots of IDEs supported, some of the provided templates could require some review, please, if you find some issue with some template or you think they could be improved, feel free to send a PR or open a related issue.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;learning and docs&lt;/h2&gt; &#xA;&lt;p&gt;raylib is designed to be learned using &lt;a href=&#34;https://github.com/raysan5/raylib/tree/master/examples&#34;&gt;the examples&lt;/a&gt; as the main reference. There is no standard API documentation but there is a &lt;a href=&#34;https://www.raylib.com/cheatsheet/cheatsheet.html&#34;&gt;&lt;strong&gt;cheatsheet&lt;/strong&gt;&lt;/a&gt; containing all the functions available on the library and a short description of each one of them, input parameters and result value names should be intuitive enough to understand how each function works.&lt;/p&gt; &#xA;&lt;p&gt;Some additional documentation about raylib design can be found in raylib GitHub Wiki. Here the more relevant links:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.raylib.com/cheatsheet/cheatsheet.html&#34;&gt;raylib cheatsheet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/raylib-architecture&#34;&gt;raylib architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki&#34;&gt;raylib library design&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/tree/master/examples&#34;&gt;raylib examples collection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib-games&#34;&gt;raylib games collection&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;contact and networks&lt;/h2&gt; &#xA;&lt;p&gt;raylib is present in several networks and raylib community is growing everyday. If you are using raylib and enjoying it, feel free to join us in any of these networks. The most active network is our &lt;a href=&#34;https://discord.gg/raylib&#34;&gt;Discord server&lt;/a&gt;! :)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Webpage: &lt;a href=&#34;https://www.raylib.com&#34;&gt;https://www.raylib.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Discord: &lt;a href=&#34;https://discord.gg/raylib&#34;&gt;https://discord.gg/raylib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitter: &lt;a href=&#34;https://www.twitter.com/raysan5&#34;&gt;https://www.twitter.com/raysan5&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitch: &lt;a href=&#34;https://www.twitch.tv/raysan5&#34;&gt;https://www.twitch.tv/raysan5&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Reddit: &lt;a href=&#34;https://www.reddit.com/r/raylib&#34;&gt;https://www.reddit.com/r/raylib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Patreon: &lt;a href=&#34;https://www.patreon.com/raylib&#34;&gt;https://www.patreon.com/raylib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;YouTube: &lt;a href=&#34;https://www.youtube.com/c/raylib&#34;&gt;https://www.youtube.com/channel/raylib&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;license&lt;/h2&gt; &#xA;&lt;p&gt;raylib is licensed under an unmodified zlib/libpng license, which is an OSI-certified, BSD-like license that allows static linking with closed source software. Check &lt;a href=&#34;https://raw.githubusercontent.com/raysan5/raylib/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for further details.&lt;/p&gt; &#xA;&lt;p&gt;raylib uses internally some libraries for window/graphics/inputs management and also to support different fileformats loading, all those libraries are embedded with and are available in &lt;a href=&#34;https://github.com/raysan5/raylib/tree/master/src/external&#34;&gt;src/external&lt;/a&gt; directory. Check &lt;a href=&#34;https://github.com/raysan5/raylib/wiki/raylib-dependencies&#34;&gt;raylib dependencies LICENSES&lt;/a&gt; on raylib Wiki for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jimgraygit/Onion</title>
    <updated>2022-05-29T02:04:57Z</updated>
    <id>tag:github.com,2022-05-29:/jimgraygit/Onion</id>
    <link href="https://github.com/jimgraygit/Onion" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Stock OS overhaul for Miyoo Mini&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Onion (and Eggs)&lt;/h1&gt; &#xA;&lt;h4&gt;A performant and straightforward retro gaming museum in your pocket.&lt;/h4&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/jimgraygit/Onion/releases&#34;&gt;Download newest release here&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/16885275/166160523-67b6d683-5360-4786-ba87-c612eea32acd.png&#34; width=&#34;600&#34;&gt; &#xA;&lt;h4&gt;This release was made possible by Totofaki, Eggs, JimGray, Pixelshift, Shauninman and many more from the Onion community.&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jimgraygit/Onion/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jimgraygit/Onion/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jimgraygit/Onion/main/#shortcuts&#34;&gt;Shortcuts&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/jimgraygit/Onion/wiki&#34;&gt;Check our wiki for additional documentation!&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Firmware 20220419 is needed for Onion v3.10 and above.&lt;br&gt; (You can check your current version in Settings - Device info - Version)&lt;br&gt; If you can&#39;t or don&#39;t want to update, there are other solutions like older Onion versions and MiniUI.&lt;br&gt; We can&#39;t take responsibility if your device is bricked in the process.&lt;br&gt; Update instructions : &lt;a href=&#34;https://user-images.githubusercontent.com/16885275/170205258-8add4be7-1a1e-4ae5-a8f2-cb13c6703e06.png&#34;&gt;Here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Installation (Fresh Install):&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Format your SD card as FAT32. (Use a fast, trusted brand. The SD card sent with your Miyoo Mini is slow, and will likely ruin your experience and data.)&lt;/li&gt; &#xA; &lt;li&gt;Unzip the &lt;code&gt;.tmp_update&lt;/code&gt; folder and its contents to the root of your SD.&lt;/li&gt; &#xA; &lt;li&gt;Boot up your Miyoo Mini and follow the on-screen instructions to get started.&lt;/li&gt; &#xA; &lt;li&gt;Your Mini will turn off once installation is complete. (Don&#39;t delete the .tmp_update folder, it is now part of the Onion installation.)&lt;/li&gt; &#xA; &lt;li&gt;Copy your Bios files into the &lt;code&gt;BIOS&lt;/code&gt; folder.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Installation (Upgrade):&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(If coming from &amp;lt;= V3.09, backup your saves (retroarch / .retroarch / saves | states), you will have to copy them afterwards in the &lt;code&gt;Saves&lt;/code&gt; folder of your SD)&lt;/li&gt; &#xA; &lt;li&gt;Delete all folders from your SD except &lt;code&gt;BIOS&lt;/code&gt;, &lt;code&gt;Roms&lt;/code&gt;, &lt;code&gt;Saves&lt;/code&gt; and &lt;code&gt;Themes&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Note : Save your &lt;code&gt;Saves&lt;/code&gt; folder to copy it back if you want to keep your custom emulator settings.&lt;/li&gt; &#xA; &lt;li&gt;Unzip the &lt;code&gt;.tmp_update&lt;/code&gt; folder to the root of your SD.&lt;/li&gt; &#xA; &lt;li&gt;Boot up your Miyoo Mini and follow the on-screen instructions to get started.&lt;/li&gt; &#xA; &lt;li&gt;Your Mini will turn off once installation is complete. (Don&#39;t delete the &lt;code&gt;.tmp_update&lt;/code&gt; folder, it is now part of the Onion installation.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/16885275/164891118-efbcfc2e-bd25-4b88-8851-34862f550690.png&#34; width=&#34;456&#34;&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;h3&gt;Theme Switcher App and Custom Themes&lt;/h3&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/16885275/164838712-d45b3779-b30f-491c-b5ff-0bbc2a10865b.png&#34; width=&#34;350&#34;&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/16885275/164838718-326f5590-96c2-4644-8fa2-1dd56f36a9bc.png&#34; width=&#34;350&#34;&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/16885275/154789504-84253d41-373d-4c84-b194-547c6343f904.png&#34; width=&#34;350&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Preview and change themes on the fly, no reboot required.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jimgraygit/Onion/wiki/4.-Theme-Repository&#34;&gt;Check themes from our community&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Onion Installer&lt;/h2&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/16885275/162589315-1d127c72-d404-4487-b379-3bde8179f566.png&#34; width=&#34;350&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install/uninstall only the systems and apps you need. All actions are reversible.&lt;/li&gt; &#xA; &lt;li&gt;Community presets, homebrews and more.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Play Activity&lt;/h3&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/16885275/162589339-e779c6dd-4e9d-47f0-8543-4646d84fc748.png&#34; width=&#34;350&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Track your game play times.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Onion Launcher&lt;/h3&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/16885275/164890313-c83dfc84-a684-416b-bd40-9f54c9f4e7db.png&#34; width=&#34;350&#34;&gt; &#xA;&lt;p&gt;Although it&#39;s optional, we consider the launcher to be central to the Onion OS experience.&lt;br&gt; The Onion Launcher is a user interface designed to be triggered when the Miyoo Mini starts.&lt;br&gt; It allows you to launch the last game played in a few seconds, and, with a simple press of a button, save your progress and turn off the console.&lt;br&gt; It also allows you to quickly change games and many other features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Quick boot your last game played.&lt;/li&gt; &#xA; &lt;li&gt;Quickly switch games from your history.&lt;/li&gt; &#xA; &lt;li&gt;Full overlay with accurate brightness, battery readings and playtimes.&lt;/li&gt; &#xA; &lt;li&gt;Improved Sleep Mode with full game suspension (menu + power).&lt;/li&gt; &#xA; &lt;li&gt;Custom charging screen that prevents screen burn-in.&lt;/li&gt; &#xA; &lt;li&gt;Removed low bat flickering icon.&lt;/li&gt; &#xA; &lt;li&gt;Large new low battery (&amp;lt;10%) indicator with periodic warning rumble.&lt;/li&gt; &#xA; &lt;li&gt;When the battery goes below 4%, the game is automatically saved to prevent losing progress, and the handheld is turned off.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;RetroArch Rebuilt From Scratch&lt;/h3&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/16885275/154791260-d1a4d0b2-5582-45cc-a291-bead843a5171.png&#34; width=&#34;350&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Compiled and partially rebuilt by Eggs (Discord user no 968407509364772924) for precision and performance. Custom audio driver. Custom scalers. New display driver. New input driver.&lt;/li&gt; &#xA; &lt;li&gt;Minimal input and audio lag.&lt;/li&gt; &#xA; &lt;li&gt;Customs cores.&lt;/li&gt; &#xA; &lt;li&gt;Fine-tuned with optimal best settings for the Miyoo Mini in mind.&lt;/li&gt; &#xA; &lt;li&gt;Crisp 640*480 resolution.&lt;/li&gt; &#xA; &lt;li&gt;Lag free.&lt;/li&gt; &#xA; &lt;li&gt;Also a game launcher (cores embedded, playlists and favorites unlocked).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Others&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Many additional systems supported.&lt;/li&gt; &#xA; &lt;li&gt;Experimental Arduboy support (credit: JMARoeder).&lt;/li&gt; &#xA; &lt;li&gt;Updated PICO emulator to Fake08 standalone (credit: Supergrom).&lt;/li&gt; &#xA; &lt;li&gt;Updated screenshot tool to v4 (credit: eggs).&lt;/li&gt; &#xA; &lt;li&gt;Support for Icon Packs. Drag and drop custom icons into the &#34;Icons&#34; folder at the root of your SD.&lt;/li&gt; &#xA; &lt;li&gt;Boxart moved to /Roms/&lt;em&gt;systemname&lt;/em&gt;/Imgs for easier scraping.&lt;/li&gt; &#xA; &lt;li&gt;Various bug fixes and optimizations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Shortcuts&lt;/h3&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/16885275/165266775-63e24f1b-d734-4eee-99c5-8bad502cd87e.png&#34; width=&#34;500&#34;&gt; &#xA;&lt;p&gt;Menu button: Exit Game&lt;/p&gt; &#xA;&lt;p&gt;Select + R2: Brightness up&lt;br&gt; Select + L2: Brightness down&lt;/p&gt; &#xA;&lt;p&gt;Power button: Save progress and shutdown&lt;br&gt; Menu + Power: Light sleep&lt;/p&gt; &#xA;&lt;p&gt;Menu + R2: Save state&lt;br&gt; Menu + L2: Load state&lt;/p&gt; &#xA;&lt;p&gt;Menu + R: Fast forward&lt;br&gt; Menu + L: Rewind (if enabled)&lt;/p&gt; &#xA;&lt;p&gt;Menu + X: Toggle FPS display&lt;/p&gt; &#xA;&lt;p&gt;R2/L2: Change palette (Game Boy only)&lt;/p&gt; &#xA;&lt;p&gt;Start + Select + R2 + L2: Force turn off&lt;br&gt; Menu + Select : Retroarch menu.&lt;/p&gt; &#xA;&lt;p&gt;Start + Select + Menu + R2 + L2: Force disable the launcher&lt;/p&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/16885275/164891039-665fffcf-b454-4b3c-87c6-13a92cb88a8b.png&#34; width=&#34;500&#34;&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/16885275/164891137-2bbdcfb5-e2c2-4658-8049-79b01d57dfed.png&#34; width=&#34;500&#34;&gt;</summary>
  </entry>
  <entry>
    <title>deepmind/mujoco</title>
    <updated>2022-05-29T02:04:57Z</updated>
    <id>tag:github.com,2022-05-29:/deepmind/mujoco</id>
    <link href="https://github.com/deepmind/mujoco" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Multi-Joint dynamics with Contact. A general purpose physics simulator.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MuJoCo Physics&lt;/h1&gt; &#xA;&lt;p&gt; &lt;a href=&#34;https://github.com/deepmind/mujoco/actions/workflows/build.yml?query=branch%3Amain&#34; alt=&#34;GitHub Actions&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/workflow/status/deepmind/mujoco/build/main&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;MuJoCo&lt;/strong&gt; stands for &lt;strong&gt;Mu&lt;/strong&gt;lti-&lt;strong&gt;Jo&lt;/strong&gt;int dynamics with &lt;strong&gt;Co&lt;/strong&gt;ntact. It is a general purpose physics engine that aims to facilitate research and development in robotics, biomechanics, graphics and animation, machine learning, and other areas which demand fast and accurate simulation of articulated structures interacting with their environment.&lt;/p&gt; &#xA;&lt;p&gt;This repository is maintained by DeepMind, please see our &lt;a href=&#34;https://www.deepmind.com/blog/opening-up-a-physics-simulator-for-robotics&#34;&gt;acquisition&lt;/a&gt; and &lt;a href=&#34;https://www.deepmind.com/blog/open-sourcing-mujoco&#34;&gt;open sourcing&lt;/a&gt; announcements.&lt;/p&gt; &#xA;&lt;p&gt;MuJoCo has a C API and is intended for researchers and developers. The runtime simulation module is tuned to maximize performance and operates on low-level data structures that are preallocated by the built-in XML compiler. The library includes interactive visualization with a native GUI, rendered in OpenGL. MuJoCo further exposes a large number of utility functions for computing physics-related quantities. We also provide Python bindings and a plug-in for the &lt;a href=&#34;https://unity.com/&#34;&gt;Unity&lt;/a&gt; game engine.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;MuJoCo&#39;s documentation is available at &lt;a href=&#34;https://mujoco.readthedocs.io&#34;&gt;mujoco.readthedocs.io&lt;/a&gt;, which serves webpages derived from the &lt;a href=&#34;https://github.com/deepmind/mujoco/tree/main/doc&#34;&gt;documentation source files&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;Versioned releases are available as precompiled binaries from the GitHub &lt;a href=&#34;https://github.com/deepmind/mujoco/releases&#34;&gt;releases page&lt;/a&gt;, built for Linux (x86-64 and AArch64), Windows (x86-64 only), and macOS (universal). This is the recommended way to use the software.&lt;/p&gt; &#xA;&lt;p&gt;Users who wish to build MuJoCo from source, please consult the &lt;a href=&#34;https://mujoco.readthedocs.io/en/latest/programming.html#building-mujoco-from-source&#34;&gt;build from source&lt;/a&gt; section of the documentation. However, please note that the commit at the tip of the &lt;code&gt;main&lt;/code&gt; branch may be unstable.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;There are two easy ways to get started with MuJoCo:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Run &lt;code&gt;simulate&lt;/code&gt; on your machine.&lt;/strong&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=0ORsj_E17B0&#34;&gt;This video&lt;/a&gt; shows a screen capture of &lt;code&gt;simulate&lt;/code&gt;, MuJoCo&#39;s native interactive viewer. Follow the steps described in the &lt;a href=&#34;https://mujoco.readthedocs.io/en/latest/programming.html#getting-started&#34;&gt;Getting Started&lt;/a&gt; section of the documentation to get &lt;code&gt;simulate&lt;/code&gt; running on your machine.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Explore our online IPython notebooks.&lt;/strong&gt; If you are a Python user, you might want to start with our tutorial notebooks, running on Google Colab:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The first tutorial focuses on the basic MuJoCo Python bindings: &lt;a href=&#34;https://colab.research.google.com/github/deepmind/dm_control/blob/main/dm_control/mujoco/tutorial.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The second tutorial includes more examples of &lt;code&gt;dm_control&lt;/code&gt;-specific functionality: &lt;a href=&#34;https://colab.research.google.com/github/deepmind/dm_control/blob/main/tutorial.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you use MuJoCo for published research, please cite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@inproceedings{todorov2012mujoco,&#xA;  title={MuJoCo: A physics engine for model-based control},&#xA;  author={Todorov, Emanuel and Erez, Tom and Tassa, Yuval},&#xA;  booktitle={2012 IEEE/RSJ International Conference on Intelligent Robots and Systems},&#xA;  pages={5026--5033},&#xA;  year={2012},&#xA;  organization={IEEE},&#xA;  doi={10.1109/IROS.2012.6386109}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License and Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2021 DeepMind Technologies Limited.&lt;/p&gt; &#xA;&lt;p&gt;Box collision code (&lt;a href=&#34;https://github.com/deepmind/mujoco/tree/main/src/engine/engine_collision_box.c&#34;&gt;&lt;code&gt;engine_collision_box.c&lt;/code&gt;&lt;/a&gt;) is Copyright 2016 Svetoslav Kolev.&lt;/p&gt; &#xA;&lt;p&gt;ReStructuredText documents, images, and videos in the &lt;code&gt;doc&lt;/code&gt; directory are made available under the terms of the Creative Commons Attribution 4.0 (CC BY 4.0) license. You may obtain a copy of the License at &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/legalcode&#34;&gt;https://creativecommons.org/licenses/by/4.0/legalcode&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Source code is licensed under the Apache License, Version 2.0. You may obtain a copy of the License at &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;https://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is not an officially supported Google product.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>obsproject/obs-studio</title>
    <updated>2022-05-29T02:04:57Z</updated>
    <id>tag:github.com,2022-05-29:/obsproject/obs-studio</id>
    <link href="https://github.com/obsproject/obs-studio" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OBS Studio - Free and open source software for live streaming and screen recording&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OBS Studio &lt;a href=&#34;https://obsproject.com&#34;&gt;https://obsproject.com&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://github.com/obsproject/obs-studio/actions/workflows/main.yml/badge.svg?branch=master&amp;amp;event=push&#34;&gt;https://github.com/obsproject/obs-studio/actions/workflows/main.yml/badge.svg?branch=master&amp;amp;event=push&lt;/a&gt; :alt: OBS Studio Build Status - GitHub Actions :target: &lt;a href=&#34;https://github.com/obsproject/obs-studio/actions/workflows/main.yml?query=event%3Apush+branch%3Amaster&#34;&gt;https://github.com/obsproject/obs-studio/actions/workflows/main.yml?query=event%3Apush+branch%3Amaster&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://d322cqt584bo4o.cloudfront.net/obs-studio/localized.svg&#34;&gt;https://d322cqt584bo4o.cloudfront.net/obs-studio/localized.svg&lt;/a&gt; :alt: OBS Studio Translation Project Progress :target: &lt;a href=&#34;https://crowdin.com/project/obs-studio&#34;&gt;https://crowdin.com/project/obs-studio&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://img.shields.io/discord/348973006581923840.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2&#34;&gt;https://img.shields.io/discord/348973006581923840.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2&lt;/a&gt; :alt: OBS Studio Discord Server :target: &lt;a href=&#34;https://obsproject.com/discord&#34;&gt;https://obsproject.com/discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is OBS Studio?&lt;/h2&gt; &#xA;&lt;p&gt;OBS Studio is software designed for capturing, compositing, encoding, recording, and streaming video content, efficiently.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s distributed under the GNU General Public License v2 (or any later version) - see the accompanying COPYING file for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Website: &lt;a href=&#34;https://obsproject.com&#34;&gt;https://obsproject.com&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Help/Documentation/Guides: &lt;a href=&#34;https://github.com/obsproject/obs-studio/wiki&#34;&gt;https://github.com/obsproject/obs-studio/wiki&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Forums: &lt;a href=&#34;https://obsproject.com/forum/&#34;&gt;https://obsproject.com/forum/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build Instructions: &lt;a href=&#34;https://github.com/obsproject/obs-studio/wiki/Install-Instructions&#34;&gt;https://github.com/obsproject/obs-studio/wiki/Install-Instructions&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Developer/API Documentation: &lt;a href=&#34;https://obsproject.com/docs&#34;&gt;https://obsproject.com/docs&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Donating/backing/sponsoring: &lt;a href=&#34;https://obsproject.com/contribute&#34;&gt;https://obsproject.com/contribute&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Bug Tracker: &lt;a href=&#34;https://github.com/obsproject/obs-studio/issues&#34;&gt;https://github.com/obsproject/obs-studio/issues&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you would like to help fund or sponsor the project, you can do so via &lt;code&gt;Patreon &amp;lt;https://www.patreon.com/obsproject&amp;gt;&lt;/code&gt;&lt;em&gt;, &lt;code&gt;OpenCollective &amp;lt;https://opencollective.com/obsproject&amp;gt;&lt;/code&gt;&lt;/em&gt;, or &lt;code&gt;PayPal &amp;lt;https://www.paypal.me/obsproject&amp;gt;&lt;/code&gt;&lt;em&gt;. See our &lt;code&gt;contribute page &amp;lt;https://obsproject.com/contribute&amp;gt;&lt;/code&gt;&lt;/em&gt; for more information.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you wish to contribute code to the project, please make sure to read the coding and commit guidelines: &lt;a href=&#34;https://github.com/obsproject/obs-studio/raw/master/CONTRIBUTING.rst&#34;&gt;https://github.com/obsproject/obs-studio/blob/master/CONTRIBUTING.rst&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Developer/API documentation can be found here: &lt;a href=&#34;https://obsproject.com/docs&#34;&gt;https://obsproject.com/docs&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you wish to contribute translations, do not submit pull requests. Instead, please use Crowdin. For more information read this thread: &lt;a href=&#34;https://obsproject.com/forum/threads/how-to-contribute-translations-for-obs.16327/&#34;&gt;https://obsproject.com/forum/threads/how-to-contribute-translations-for-obs.16327/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Other ways to contribute are by helping people out with support on our forums or in our community chat. Please limit support to topics you fully understand -- bad advice is worse than no advice. When it comes to something that you don&#39;t fully know or understand, please defer to the official help or official channels.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>littlefs-project/littlefs</title>
    <updated>2022-05-29T02:04:57Z</updated>
    <id>tag:github.com,2022-05-29:/littlefs-project/littlefs</id>
    <link href="https://github.com/littlefs-project/littlefs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A little fail-safe filesystem designed for microcontrollers&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;littlefs&lt;/h2&gt; &#xA;&lt;p&gt;A little fail-safe filesystem designed for microcontrollers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;   | | |     .---._____&#xA;  .-----.   |          |&#xA;--|o    |---| littlefs |&#xA;--|     |---|          |&#xA;  &#39;-----&#39;   &#39;----------&#39;&#xA;   | | |&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Power-loss resilience&lt;/strong&gt; - littlefs is designed to handle random power failures. All file operations have strong copy-on-write guarantees and if power is lost the filesystem will fall back to the last known good state.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Dynamic wear leveling&lt;/strong&gt; - littlefs is designed with flash in mind, and provides wear leveling over dynamic blocks. Additionally, littlefs can detect bad blocks and work around them.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bounded RAM/ROM&lt;/strong&gt; - littlefs is designed to work with a small amount of memory. RAM usage is strictly bounded, which means RAM consumption does not change as the filesystem grows. The filesystem contains no unbounded recursion and dynamic memory is limited to configurable buffers that can be provided statically.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a simple example that updates a file named &lt;code&gt;boot_count&lt;/code&gt; every time main runs. The program can be interrupted at any time without losing track of how many times it has been booted and without corrupting the filesystem:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &#34;lfs.h&#34;&#xA;&#xA;// variables used by the filesystem&#xA;lfs_t lfs;&#xA;lfs_file_t file;&#xA;&#xA;// configuration of the filesystem is provided by this struct&#xA;const struct lfs_config cfg = {&#xA;    // block device operations&#xA;    .read  = user_provided_block_device_read,&#xA;    .prog  = user_provided_block_device_prog,&#xA;    .erase = user_provided_block_device_erase,&#xA;    .sync  = user_provided_block_device_sync,&#xA;&#xA;    // block device configuration&#xA;    .read_size = 16,&#xA;    .prog_size = 16,&#xA;    .block_size = 4096,&#xA;    .block_count = 128,&#xA;    .cache_size = 16,&#xA;    .lookahead_size = 16,&#xA;    .block_cycles = 500,&#xA;};&#xA;&#xA;// entry point&#xA;int main(void) {&#xA;    // mount the filesystem&#xA;    int err = lfs_mount(&amp;amp;lfs, &amp;amp;cfg);&#xA;&#xA;    // reformat if we can&#39;t mount the filesystem&#xA;    // this should only happen on the first boot&#xA;    if (err) {&#xA;        lfs_format(&amp;amp;lfs, &amp;amp;cfg);&#xA;        lfs_mount(&amp;amp;lfs, &amp;amp;cfg);&#xA;    }&#xA;&#xA;    // read current count&#xA;    uint32_t boot_count = 0;&#xA;    lfs_file_open(&amp;amp;lfs, &amp;amp;file, &#34;boot_count&#34;, LFS_O_RDWR | LFS_O_CREAT);&#xA;    lfs_file_read(&amp;amp;lfs, &amp;amp;file, &amp;amp;boot_count, sizeof(boot_count));&#xA;&#xA;    // update boot count&#xA;    boot_count += 1;&#xA;    lfs_file_rewind(&amp;amp;lfs, &amp;amp;file);&#xA;    lfs_file_write(&amp;amp;lfs, &amp;amp;file, &amp;amp;boot_count, sizeof(boot_count));&#xA;&#xA;    // remember the storage is not updated until the file is closed successfully&#xA;    lfs_file_close(&amp;amp;lfs, &amp;amp;file);&#xA;&#xA;    // release any resources we were using&#xA;    lfs_unmount(&amp;amp;lfs);&#xA;&#xA;    // print the boot count&#xA;    printf(&#34;boot_count: %d\n&#34;, boot_count);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Detailed documentation (or at least as much detail as is currently available) can be found in the comments in &lt;a href=&#34;https://raw.githubusercontent.com/littlefs-project/littlefs/master/lfs.h&#34;&gt;lfs.h&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;littlefs takes in a configuration structure that defines how the filesystem operates. The configuration struct provides the filesystem with the block device operations and dimensions, tweakable parameters that tradeoff memory usage for performance, and optional static buffers if the user wants to avoid dynamic memory.&lt;/p&gt; &#xA;&lt;p&gt;The state of the littlefs is stored in the &lt;code&gt;lfs_t&lt;/code&gt; type which is left up to the user to allocate, allowing multiple filesystems to be in use simultaneously. With the &lt;code&gt;lfs_t&lt;/code&gt; and configuration struct, a user can format a block device or mount the filesystem.&lt;/p&gt; &#xA;&lt;p&gt;Once mounted, the littlefs provides a full set of POSIX-like file and directory functions, with the deviation that the allocation of filesystem structures must be provided by the user.&lt;/p&gt; &#xA;&lt;p&gt;All POSIX operations, such as remove and rename, are atomic, even in event of power-loss. Additionally, file updates are not actually committed to the filesystem until sync or close is called on the file.&lt;/p&gt; &#xA;&lt;h2&gt;Other notes&lt;/h2&gt; &#xA;&lt;p&gt;Littlefs is written in C, and specifically should compile with any compiler that conforms to the &lt;code&gt;C99&lt;/code&gt; standard.&lt;/p&gt; &#xA;&lt;p&gt;All littlefs calls have the potential to return a negative error code. The errors can be either one of those found in the &lt;code&gt;enum lfs_error&lt;/code&gt; in &lt;a href=&#34;https://raw.githubusercontent.com/littlefs-project/littlefs/master/lfs.h&#34;&gt;lfs.h&lt;/a&gt;, or an error returned by the user&#39;s block device operations.&lt;/p&gt; &#xA;&lt;p&gt;In the configuration struct, the &lt;code&gt;prog&lt;/code&gt; and &lt;code&gt;erase&lt;/code&gt; function provided by the user may return a &lt;code&gt;LFS_ERR_CORRUPT&lt;/code&gt; error if the implementation already can detect corrupt blocks. However, the wear leveling does not depend on the return code of these functions, instead all data is read back and checked for integrity.&lt;/p&gt; &#xA;&lt;p&gt;If your storage caches writes, make sure that the provided &lt;code&gt;sync&lt;/code&gt; function flushes all the data to memory and ensures that the next read fetches the data from memory, otherwise data integrity can not be guaranteed. If the &lt;code&gt;write&lt;/code&gt; function does not perform caching, and therefore each &lt;code&gt;read&lt;/code&gt; or &lt;code&gt;write&lt;/code&gt; call hits the memory, the &lt;code&gt;sync&lt;/code&gt; function can simply return 0.&lt;/p&gt; &#xA;&lt;h2&gt;Design&lt;/h2&gt; &#xA;&lt;p&gt;At a high level, littlefs is a block based filesystem that uses small logs to store metadata and larger copy-on-write (COW) structures to store file data.&lt;/p&gt; &#xA;&lt;p&gt;In littlefs, these ingredients form a sort of two-layered cake, with the small logs (called metadata pairs) providing fast updates to metadata anywhere on storage, while the COW structures store file data compactly and without any wear amplification cost.&lt;/p&gt; &#xA;&lt;p&gt;Both of these data structures are built out of blocks, which are fed by a common block allocator. By limiting the number of erases allowed on a block per allocation, the allocator provides dynamic wear leveling over the entire filesystem.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;                    root&#xA;                   .--------.--------.&#xA;                   | A&#39;| B&#39;|         |&#xA;                   |   |   |-&amp;gt;       |&#xA;                   |   |   |         |&#xA;                   &#39;--------&#39;--------&#39;&#xA;                .----&#39;   &#39;--------------.&#xA;       A       v                 B       v&#xA;      .--------.--------.       .--------.--------.&#xA;      | C&#39;| D&#39;|         |       | E&#39;|new|         |&#xA;      |   |   |-&amp;gt;       |       |   | E&#39;|-&amp;gt;       |&#xA;      |   |   |         |       |   |   |         |&#xA;      &#39;--------&#39;--------&#39;       &#39;--------&#39;--------&#39;&#xA;      .-&#39;   &#39;--.                  |   &#39;------------------.&#xA;     v          v              .-&#39;                        v&#xA;.--------.  .--------.        v                       .--------.&#xA;|   C    |  |   D    |   .--------.       write       | new E  |&#xA;|        |  |        |   |   E    |        ==&amp;gt;        |        |&#xA;|        |  |        |   |        |                   |        |&#xA;&#39;--------&#39;  &#39;--------&#39;   |        |                   &#39;--------&#39;&#xA;                         &#39;--------&#39;                   .-&#39;    |&#xA;                         .-&#39;    &#39;-.    .-------------|------&#39;&#xA;                        v          v  v              v&#xA;                   .--------.  .--------.       .--------.&#xA;                   |   F    |  |   G    |       | new F  |&#xA;                   |        |  |        |       |        |&#xA;                   |        |  |        |       |        |&#xA;                   &#39;--------&#39;  &#39;--------&#39;       &#39;--------&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More details on how littlefs works can be found in &lt;a href=&#34;https://raw.githubusercontent.com/littlefs-project/littlefs/master/DESIGN.md&#34;&gt;DESIGN.md&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/littlefs-project/littlefs/master/SPEC.md&#34;&gt;SPEC.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/littlefs-project/littlefs/master/DESIGN.md&#34;&gt;DESIGN.md&lt;/a&gt; - A fully detailed dive into how littlefs works. I would suggest reading it as the tradeoffs at work are quite interesting.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/littlefs-project/littlefs/master/SPEC.md&#34;&gt;SPEC.md&lt;/a&gt; - The on-disk specification of littlefs with all the nitty-gritty details. May be useful for tooling development.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;The littlefs comes with a test suite designed to run on a PC using the &lt;a href=&#34;https://raw.githubusercontent.com/littlefs-project/littlefs/master/bd/lfs_testbd.h&#34;&gt;emulated block device&lt;/a&gt; found in the &lt;code&gt;bd&lt;/code&gt; directory. The tests assume a Linux environment and can be started with make:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The littlefs is provided under the &lt;a href=&#34;https://spdx.org/licenses/BSD-3-Clause.html&#34;&gt;BSD-3-Clause&lt;/a&gt; license. See &lt;a href=&#34;https://raw.githubusercontent.com/littlefs-project/littlefs/master/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt; for more information. Contributions to this project are accepted under the same license.&lt;/p&gt; &#xA;&lt;p&gt;Individual files contain the following tag instead of the full license text.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;SPDX-License-Identifier:    BSD-3-Clause&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This enables machine processing of license information based on the SPDX License Identifiers that are here available: &lt;a href=&#34;http://spdx.org/licenses/&#34;&gt;http://spdx.org/licenses/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Related projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/geky/littlefs-fuse&#34;&gt;littlefs-fuse&lt;/a&gt; - A &lt;a href=&#34;https://github.com/libfuse/libfuse&#34;&gt;FUSE&lt;/a&gt; wrapper for littlefs. The project allows you to mount littlefs directly on a Linux machine. Can be useful for debugging littlefs if you have an SD card handy.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/geky/littlefs-js&#34;&gt;littlefs-js&lt;/a&gt; - A javascript wrapper for littlefs. I&#39;m not sure why you would want this, but it is handy for demos. You can see it in action &lt;a href=&#34;http://littlefs.geky.net/demo.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://pypi.org/project/littlefs-python/&#34;&gt;littlefs-python&lt;/a&gt; - A Python wrapper for littlefs. The project allows you to create images of the filesystem on your PC. Check if littlefs will fit your needs, create images for a later download to the target memory or inspect the content of a binary image of the target memory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/whitecatboard/Lua-RTOS-ESP32/tree/master/components/mklfs/src&#34;&gt;mklfs&lt;/a&gt; - A command line tool built by the &lt;a href=&#34;https://github.com/whitecatboard/Lua-RTOS-ESP32&#34;&gt;Lua RTOS&lt;/a&gt; guys for making littlefs images from a host PC. Supports Windows, Mac OS, and Linux.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/armmbed/mbed-os&#34;&gt;Mbed OS&lt;/a&gt; - The easiest way to get started with littlefs is to jump into Mbed which already has block device drivers for most forms of embedded storage. littlefs is available in Mbed OS as the &lt;a href=&#34;https://os.mbed.com/docs/mbed-os/v5.12/apis/littlefilesystem.html&#34;&gt;LittleFileSystem&lt;/a&gt; class.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/pellepl/spiffs&#34;&gt;SPIFFS&lt;/a&gt; - Another excellent embedded filesystem for NOR flash. As a more traditional logging filesystem with full static wear-leveling, SPIFFS will likely outperform littlefs on small memories such as the internal flash on microcontrollers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/dlbeer/dhara&#34;&gt;Dhara&lt;/a&gt; - An interesting NAND flash translation layer designed for small MCUs. It offers static wear-leveling and power-resilience with only a fixed &lt;em&gt;O(|address|)&lt;/em&gt; pointer structure stored on each block and in RAM.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>zephyrproject-rtos/zephyr</title>
    <updated>2022-05-29T02:04:57Z</updated>
    <id>tag:github.com,2022-05-29:/zephyrproject-rtos/zephyr</id>
    <link href="https://github.com/zephyrproject-rtos/zephyr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Primary Git Repository for the Zephyr Project. Zephyr is a new generation, scalable, optimized, secure RTOS for multiple hardware architectures.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. raw:: html&lt;/p&gt; &#xA;&lt;a href=&#34;https://www.zephyrproject.org&#34;&gt; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/zephyrproject-rtos/zephyr/main/doc/_static/images/logo-readme.svg?sanitize=true&#34;&gt; &lt;/p&gt; &lt;/a&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/74&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/74/badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zephyrproject-rtos/zephyr/actions/workflows/twister.yaml?query=branch%3Amain&#34;&gt; &lt;img src=&#34;https://github.com/zephyrproject-rtos/zephyr/actions/workflows/twister.yaml/badge.svg?event=push&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Zephyr Project is a scalable real-time operating system (RTOS) supporting multiple hardware architectures, optimized for resource constrained devices, and built with security in mind.&lt;/p&gt; &#xA;&lt;p&gt;The Zephyr OS is based on a small-footprint kernel designed for use on resource-constrained systems: from simple embedded environmental sensors and LED wearables to sophisticated smart watches and IoT wireless gateways.&lt;/p&gt; &#xA;&lt;p&gt;The Zephyr kernel supports multiple architectures, including ARM (Cortex-A, Cortex-R, Cortex-M), Intel x86, ARC, Nios II, Tensilica Xtensa, and RISC-V, SPARC, MIPS, and a large number of &lt;code&gt;supported boards&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;.. below included in doc/introduction/introduction.rst&lt;/p&gt; &#xA;&lt;p&gt;Getting Started&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Welcome to Zephyr! See the &lt;code&gt;Introduction to Zephyr&lt;/code&gt;_ for a high-level overview, and the documentation&#39;s &lt;code&gt;Getting Started Guide&lt;/code&gt;_ to start developing.&lt;/p&gt; &#xA;&lt;p&gt;.. start_include_here&lt;/p&gt; &#xA;&lt;p&gt;Community Support&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Community support is provided via mailing lists and Discord; see the Resources below for details.&lt;/p&gt; &#xA;&lt;p&gt;.. _project-resources:&lt;/p&gt; &#xA;&lt;p&gt;Resources&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Here&#39;s a quick summary of resources to help you find your way around:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Help&lt;/strong&gt;: &lt;code&gt;Asking for Help Tips&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Documentation&lt;/strong&gt;: &lt;a href=&#34;http://docs.zephyrproject.org&#34;&gt;http://docs.zephyrproject.org&lt;/a&gt; (&lt;code&gt;Getting Started Guide&lt;/code&gt;_)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Source Code&lt;/strong&gt;: &lt;a href=&#34;https://github.com/zephyrproject-rtos/zephyr&#34;&gt;https://github.com/zephyrproject-rtos/zephyr&lt;/a&gt; is the main repository; &lt;a href=&#34;https://elixir.bootlin.com/zephyr/latest/source&#34;&gt;https://elixir.bootlin.com/zephyr/latest/source&lt;/a&gt; contains a searchable index&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Releases&lt;/strong&gt;: &lt;a href=&#34;https://github.com/zephyrproject-rtos/zephyr/releases&#34;&gt;https://github.com/zephyrproject-rtos/zephyr/releases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Samples and example code&lt;/strong&gt;: see &lt;code&gt;Sample and Demo Code Examples&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mailing Lists&lt;/strong&gt;: &lt;a href=&#34;mailto:users@lists.zephyrproject.org&#34;&gt;users@lists.zephyrproject.org&lt;/a&gt; and &lt;a href=&#34;mailto:devel@lists.zephyrproject.org&#34;&gt;devel@lists.zephyrproject.org&lt;/a&gt; are the main user and developer mailing lists, respectively. You can join the developer&#39;s list and search its archives at &lt;code&gt;Zephyr Development mailing list&lt;/code&gt;&lt;em&gt;. The other &lt;code&gt;Zephyr mailing list subgroups&lt;/code&gt;&lt;/em&gt; have their own archives and sign-up pages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Nightly CI Build Status&lt;/strong&gt;: &lt;a href=&#34;https://lists.zephyrproject.org/g/builds&#34;&gt;https://lists.zephyrproject.org/g/builds&lt;/a&gt; The &lt;a href=&#34;mailto:builds@lists.zephyrproject.org&#34;&gt;builds@lists.zephyrproject.org&lt;/a&gt; mailing list archives the CI nightly build results.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chat&lt;/strong&gt;: Real-time chat happens in Zephyr&#39;s Discord Server. Use this &lt;code&gt;Discord Invite&lt;/code&gt;_ to register.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Contributing&lt;/strong&gt;: see the &lt;code&gt;Contribution Guide&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Wiki&lt;/strong&gt;: &lt;code&gt;Zephyr GitHub wiki&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Issues&lt;/strong&gt;: &lt;a href=&#34;https://github.com/zephyrproject-rtos/zephyr/issues&#34;&gt;https://github.com/zephyrproject-rtos/zephyr/issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Security Issues&lt;/strong&gt;: Email &lt;a href=&#34;mailto:vulnerabilities@zephyrproject.org&#34;&gt;vulnerabilities@zephyrproject.org&lt;/a&gt; to report security issues; also see our &lt;code&gt;Security&lt;/code&gt;_ documentation. Security issues are tracked separately at &lt;a href=&#34;https://zephyrprojectsec.atlassian.net&#34;&gt;https://zephyrprojectsec.atlassian.net&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Zephyr Project Website&lt;/strong&gt;: &lt;a href=&#34;https://zephyrproject.org&#34;&gt;https://zephyrproject.org&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;.. _Discord Invite: &lt;a href=&#34;https://chat.zephyrproject.org&#34;&gt;https://chat.zephyrproject.org&lt;/a&gt; .. _supported boards: &lt;a href=&#34;http://docs.zephyrproject.org/latest/boards/index.html&#34;&gt;http://docs.zephyrproject.org/latest/boards/index.html&lt;/a&gt; .. _Zephyr Documentation: &lt;a href=&#34;http://docs.zephyrproject.org&#34;&gt;http://docs.zephyrproject.org&lt;/a&gt; .. _Introduction to Zephyr: &lt;a href=&#34;http://docs.zephyrproject.org/latest/introduction/index.html&#34;&gt;http://docs.zephyrproject.org/latest/introduction/index.html&lt;/a&gt; .. _Getting Started Guide: &lt;a href=&#34;http://docs.zephyrproject.org/latest/getting_started/index.html&#34;&gt;http://docs.zephyrproject.org/latest/getting_started/index.html&lt;/a&gt; .. _Contribution Guide: &lt;a href=&#34;http://docs.zephyrproject.org/latest/contribute/index.html&#34;&gt;http://docs.zephyrproject.org/latest/contribute/index.html&lt;/a&gt; .. _Zephyr GitHub wiki: &lt;a href=&#34;https://github.com/zephyrproject-rtos/zephyr/wiki&#34;&gt;https://github.com/zephyrproject-rtos/zephyr/wiki&lt;/a&gt; .. _Zephyr Development mailing list: &lt;a href=&#34;https://lists.zephyrproject.org/g/devel&#34;&gt;https://lists.zephyrproject.org/g/devel&lt;/a&gt; .. _Zephyr mailing list subgroups: &lt;a href=&#34;https://lists.zephyrproject.org/g/main/subgroups&#34;&gt;https://lists.zephyrproject.org/g/main/subgroups&lt;/a&gt; .. _Sample and Demo Code Examples: &lt;a href=&#34;http://docs.zephyrproject.org/latest/samples/index.html&#34;&gt;http://docs.zephyrproject.org/latest/samples/index.html&lt;/a&gt; .. _Security: &lt;a href=&#34;http://docs.zephyrproject.org/latest/security/index.html&#34;&gt;http://docs.zephyrproject.org/latest/security/index.html&lt;/a&gt; .. _Asking for Help Tips: &lt;a href=&#34;https://docs.zephyrproject.org/latest/getting_started/index.html#asking-for-help&#34;&gt;https://docs.zephyrproject.org/latest/getting_started/index.html#asking-for-help&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>linux-rdma/rdma-core</title>
    <updated>2022-05-29T02:04:57Z</updated>
    <id>tag:github.com,2022-05-29:/linux-rdma/rdma-core</id>
    <link href="https://github.com/linux-rdma/rdma-core" rel="alternate"></link>
    <summary type="html">&lt;p&gt;RDMA core userspace libraries and daemons&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/ucfconsort/rdma-core/_build/latest?definitionId=2&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/ucfconsort/rdma-core/_apis/build/status/linux-rdma.rdma-core?branchName=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;RDMA Core Userspace Libraries and Daemons&lt;/h1&gt; &#xA;&lt;p&gt;This is the userspace components for the Linux Kernel&#39;s drivers/infiniband subsystem. Specifically this contains the userspace libraries for the following device nodes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;/dev/infiniband/uverbsX (libibverbs)&lt;/li&gt; &#xA; &lt;li&gt;/dev/infiniband/rdma_cm (librdmacm)&lt;/li&gt; &#xA; &lt;li&gt;/dev/infiniband/umadX (libibumad)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The userspace component of the libibverbs RDMA kernel drivers are included under the providers/ directory. Support for the following Kernel RDMA drivers is included:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;efa.ko&lt;/li&gt; &#xA; &lt;li&gt;iw_cxgb4.ko&lt;/li&gt; &#xA; &lt;li&gt;hfi1.ko&lt;/li&gt; &#xA; &lt;li&gt;hns-roce.ko&lt;/li&gt; &#xA; &lt;li&gt;irdma.ko&lt;/li&gt; &#xA; &lt;li&gt;ib_qib.ko&lt;/li&gt; &#xA; &lt;li&gt;mlx4_ib.ko&lt;/li&gt; &#xA; &lt;li&gt;mlx5_ib.ko&lt;/li&gt; &#xA; &lt;li&gt;ib_mthca.ko&lt;/li&gt; &#xA; &lt;li&gt;ocrdma.ko&lt;/li&gt; &#xA; &lt;li&gt;qedr.ko&lt;/li&gt; &#xA; &lt;li&gt;rdma_rxe.ko&lt;/li&gt; &#xA; &lt;li&gt;siw.ko&lt;/li&gt; &#xA; &lt;li&gt;vmw_pvrdma.ko&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additional service daemons are provided for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;srp_daemon (ib_srp.ko)&lt;/li&gt; &#xA; &lt;li&gt;iwpmd (for iwarp kernel providers)&lt;/li&gt; &#xA; &lt;li&gt;ibacm (for InfiniBand communication management assistant)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;p&gt;This project uses a cmake based build system. Quick start:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ bash build.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;build/bin&lt;/em&gt; will contain the sample programs and &lt;em&gt;build/lib&lt;/em&gt; will contain the shared libraries. The build is configured to run all the programs &#39;in-place&#39; and cannot be installed.&lt;/p&gt; &#xA;&lt;h3&gt;Debian Derived&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ apt-get install build-essential cmake gcc libudev-dev libnl-3-dev libnl-route-3-dev ninja-build pkg-config valgrind python3-dev cython3 python3-docutils pandoc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Supported releases:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Debian 9 (stretch) or newer&lt;/li&gt; &#xA; &lt;li&gt;Ubuntu 16.04 LTS (xenial) or newer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Fedora, CentOS 8&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ dnf builddep redhat/rdma-core.spec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE: Fedora Core uses the name &#39;ninja-build&#39; for the &#39;ninja&#39; command.&lt;/p&gt; &#xA;&lt;h3&gt;openSUSE&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ zypper install cmake gcc libnl3-devel libudev-devel ninja pkg-config valgrind-devel python3-devel python3-Cython python3-docutils pandoc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building on CentOS 6/7, Amazon Linux 1/2&lt;/h2&gt; &#xA;&lt;p&gt;Install required packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ yum install cmake gcc libnl3-devel libudev-devel make pkgconfig valgrind-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Developers on CentOS 7 or Amazon Linux 2 are suggested to install more modern tooling for the best experience.&lt;/p&gt; &#xA;&lt;p&gt;CentOS 7:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ yum install epel-release&#xA;$ yum install cmake3 ninja-build pandoc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Amazon Linux 2:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ amazon-linux-extras install epel&#xA;$ yum install cmake3 ninja-build pandoc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE: EPEL uses the name &#39;ninja-build&#39; for the &#39;ninja&#39; command, and &#39;cmake3&#39; for the &#39;cmake&#39; command.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;To set up software RDMA on an existing interface with either of the available drivers, use the following commands, substituting &lt;code&gt;&amp;lt;DRIVER&amp;gt;&lt;/code&gt; with the name of the driver of your choice (&lt;code&gt;rdma_rxe&lt;/code&gt; or &lt;code&gt;siw&lt;/code&gt;) and &lt;code&gt;&amp;lt;TYPE&amp;gt;&lt;/code&gt; with the type corresponding to the driver (&lt;code&gt;rxe&lt;/code&gt; or &lt;code&gt;siw&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# modprobe &amp;lt;DRIVER&amp;gt;&#xA;# rdma link add &amp;lt;NAME&amp;gt; type &amp;lt;TYPE&amp;gt; netdev &amp;lt;DEVICE&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that you need version of &lt;code&gt;iproute2&lt;/code&gt; recent enough is required for the command above to work.&lt;/p&gt; &#xA;&lt;p&gt;You can use either &lt;code&gt;ibv_devices&lt;/code&gt; or &lt;code&gt;rdma link&lt;/code&gt; to verify that the device was successfully added.&lt;/p&gt; &#xA;&lt;h1&gt;Reporting bugs&lt;/h1&gt; &#xA;&lt;p&gt;Bugs should be reported to the &lt;a href=&#34;mailto:linux-rdma@vger.kernel.org&#34;&gt;linux-rdma@vger.kernel.org&lt;/a&gt; mailing list In your bug report, please include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Information about your system:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Linux distribution and version&lt;/li&gt; &#xA;   &lt;li&gt;Linux kernel and version&lt;/li&gt; &#xA;   &lt;li&gt;InfiniBand hardware and firmware version&lt;/li&gt; &#xA;   &lt;li&gt;... any other relevant information&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How to reproduce the bug.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If the bug is a crash, the exact output printed out when the crash occurred, including any kernel messages produced.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Submitting patches&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/linux-rdma/rdma-core/master/Documentation/contributing.md&#34;&gt;Contributing to rdma-core&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>vedderb/bldc</title>
    <updated>2022-05-29T02:04:57Z</updated>
    <id>tag:github.com,2022-05-29:/vedderb/bldc</id>
    <link href="https://github.com/vedderb/bldc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The VESC motor control firmware&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;VESC firmware&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPLv3-blue.svg?sanitize=true&#34; alt=&#34;License: GPL v3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.com/vedderb/bldc&#34;&gt;&lt;img src=&#34;https://travis-ci.com/vedderb/bldc.svg?branch=master&#34; alt=&#34;Travis CI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codacy.com/app/vedderb/bldc?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=vedderb/bldc&amp;amp;utm_campaign=Badge_Grade&#34;&gt;&lt;img src=&#34;https://api.codacy.com/project/badge/Grade/75e90ffbd46841a3a7be2a9f7a94c242&#34; alt=&#34;Codacy Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/vedderb/bldc/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/vedderb/bldc.svg?sanitize=true&#34; alt=&#34;Contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/vedderb/bldc/watchers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/watchers/vedderb/bldc.svg?sanitize=true&#34; alt=&#34;Watchers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/vedderb/bldc/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/vedderb/bldc.svg?sanitize=true&#34; alt=&#34;Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/vedderb/bldc/network/members&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/vedderb/bldc.svg?sanitize=true&#34; alt=&#34;Forks&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An open source motor controller firmware.&lt;/p&gt; &#xA;&lt;p&gt;This is the source code for the VESC DC/BLDC/FOC controller. Read more at &lt;a href=&#34;https://vesc-project.com/&#34;&gt;https://vesc-project.com/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supported boards&lt;/h2&gt; &#xA;&lt;p&gt;All of them!&lt;/p&gt; &#xA;&lt;p&gt;Check the supported boards by typing &lt;code&gt;make&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[Firmware]&#xA;     fw   - Build firmware for default target&#xA;                            supported boards are: 100_250 100_250_no_limits 100_500...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are also many other options that can be changed in &lt;a href=&#34;https://raw.githubusercontent.com/vedderb/bldc/master/conf_general.h&#34;&gt;conf_general.h&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;h3&gt;On Ubuntu (Linux)/macOS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tools: &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;wget&lt;/code&gt;, and &lt;code&gt;make&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Additional Linux requirements: &lt;code&gt;libgl-dev&lt;/code&gt; and &lt;code&gt;libxcb-xinerama0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Helpful Ubuntu commands:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install git build-essential libgl-dev libxcb-xinerama0 wget git-gui&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Helpful macOS tools:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install stlink&#xA;brew install openocd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On Windows&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chocolately: &lt;a href=&#34;https://chocolatey.org/install&#34;&gt;https://chocolatey.org/install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Git: &lt;a href=&#34;https://git-scm.com/download/win&#34;&gt;https://git-scm.com/download/win&lt;/a&gt;. Make sure to click any boxes to add Git to your Environment (aka PATH)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install Dev environment and build&lt;/h2&gt; &#xA;&lt;h3&gt;On Ubuntu (Linux)/MacOS&lt;/h3&gt; &#xA;&lt;p&gt;Open up a terminal&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone http://github.com/vedderb/bldc.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd bldc&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Continue with &lt;a href=&#34;https://raw.githubusercontent.com/vedderb/bldc/master/#on-all-platforms&#34;&gt;On all platforms&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;On Windows&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open up a Windows Powershell terminal (Resist the urge to run Powershell as administrator, that will break things)&lt;/li&gt; &#xA; &lt;li&gt;Type &lt;code&gt;choco install make&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone http://github.com/vedderb/bldc&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd bldc&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Continue with &lt;a href=&#34;https://raw.githubusercontent.com/vedderb/bldc/master/#on-all-platforms&#34;&gt;On all platforms&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;On all platforms&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;git checkout origin/master&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make arm_sdk_install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make&lt;/code&gt; &amp;lt;-- Pick out the name of your target device from the supported boards list. For instance, I have a Trampa &lt;strong&gt;VESC 100/250&lt;/strong&gt;, so my target is &lt;code&gt;100_250&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make 100_250&lt;/code&gt; &amp;lt;-- This will build the &lt;strong&gt;VESC 100/250&lt;/strong&gt; firmware and place it into the &lt;code&gt;bldc/builds/100_250/&lt;/code&gt; directory&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Other tools&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Linux Optional - Add udev rules to use the stlink v2 programmer without being root&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget vedder.se/Temp/49-stlinkv2.rules&#xA;sudo mv 49-stlinkv2.rules /etc/udev/rules.d/&#xA;sudo udevadm trigger&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;IDE&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;h4&gt;On macOS/Linux&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;python3&lt;/code&gt;, and &lt;code&gt;pip&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;On Windows&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python 3: &lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;https://www.python.org/downloads/&lt;/a&gt;. Make sure to click the box to add Python3 to your Environment.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;All platforms&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;pip install aqtinstall&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make qt_install&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Upload to VESC&lt;/h2&gt; &#xA;&lt;h3&gt;Method 1 - Flash it using an STLink SWD debugger&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Build and flash the &lt;a href=&#34;https://github.com/vedderb/bldc-bootloader&#34;&gt;bootloader&lt;/a&gt; first&lt;/li&gt; &#xA; &lt;li&gt;Then &lt;code&gt;_flash&lt;/code&gt; to the target of your choice. So for instance, for the VESC 100/250:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make 100_250_flash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Method 2 - Upload Firmware via VESC tool through USB&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone and build the firmware in &lt;strong&gt;.bin&lt;/strong&gt; format as in the above Build instructions&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;In VESC tool&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Connect to the VESC&lt;/li&gt; &#xA; &lt;li&gt;Navigate to the Firmware tab on the left side menu&lt;/li&gt; &#xA; &lt;li&gt;Click on Custom file tab&lt;/li&gt; &#xA; &lt;li&gt;Click on the folder icon to select the built firmware in .bin format (e.g. &lt;code&gt;build/100_250/100_250.bin&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;[ Reminder : It is normal to see VESC disconnects during the firmware upload process ]&lt;/h5&gt; &#xA;&lt;h5&gt;&lt;strong&gt;[ Warning : DO NOT DISCONNECT POWER/USB to VESC during the upload process, or you will risk bricking your VESC ]&lt;/strong&gt;&lt;/h5&gt; &#xA;&lt;h5&gt;&lt;strong&gt;[ Warning : ONLY DISCONNECT your VESC 10s after the upload loading bar completed and &#34;FW Upload DONE&#34; ]&lt;/strong&gt;&lt;/h5&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Press the upload firmware button (downward arrow) on the bottom right to start upload the selected firmware.&lt;/li&gt; &#xA; &lt;li&gt;Wait for &lt;strong&gt;10s&lt;/strong&gt; after the loading bar completed (Warning: unplug sooner will risk bricking your VESC)&lt;/li&gt; &#xA; &lt;li&gt;The VESC will disconnect itself after new firmware is uploaded.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;In case you bricked your VESC&lt;/h2&gt; &#xA;&lt;p&gt;you will need to upload a new working firmware to the VESC.&lt;br&gt; However, to upload a firmware to a bricked VESC, you have to use a SWD Debugger.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Head to the &lt;a href=&#34;https://vesc-project.com/forum&#34;&gt;forums&lt;/a&gt; to get involved and improve this project. Join the &lt;a href=&#34;https://discord.gg/JgvV5NwYts&#34;&gt;Discord&lt;/a&gt; for real-time support and chat&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The software is released under the GNU General Public License version 3.0&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cesanta/mongoose</title>
    <updated>2022-05-29T02:04:57Z</updated>
    <id>tag:github.com,2022-05-29:/cesanta/mongoose</id>
    <link href="https://github.com/cesanta/mongoose" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Embedded Web Server&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mongoose - Embedded Web Server / Embedded Networking Library&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/gpl-2.0.php&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPLv2%20or%20Commercial-green.svg?sanitize=true&#34; alt=&#34;License: GPLv2/Commercial&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/cesanta/mongoose/actions&#34;&gt;&lt;img src=&#34;https://github.com/cesanta/mongoose/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/cesanta/mongoose&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/cesanta/mongoose/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Code Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&amp;amp;can=1&amp;amp;q=proj:mongoose&#34;&gt;&lt;img src=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/badges/mongoose.svg?sanitize=true&#34; alt=&#34;Fuzzing Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Mongoose is a networking library for C/C++. It implements event-driven non-blocking APIs for TCP, UDP, HTTP, WebSocket, MQTT. It is designed for connecting devices and bringing them online. On the market since 2004, used by vast number of open source and commercial products - it even runs on the International Space Station! Mongoose makes embedded network programming fast, robust, and easy. Features include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cross-platform: works on Linux/UNIX, MacOS, Windows, Android, FreeRTOS, etc.&lt;/li&gt; &#xA; &lt;li&gt;Supported embedded architectures: ESP32, NRF52, STM32, NXP, and more&lt;/li&gt; &#xA; &lt;li&gt;Built-in protocols: plain TCP/UDP, HTTP, MQTT, Websocket&lt;/li&gt; &#xA; &lt;li&gt;SSL/TLS support: mbedTLS, OpenSSL or custom (via API)&lt;/li&gt; &#xA; &lt;li&gt;Asynchronous DNS resolver&lt;/li&gt; &#xA; &lt;li&gt;Tiny static and run-time footprint&lt;/li&gt; &#xA; &lt;li&gt;Source code is both ISO C and ISO C++ compliant&lt;/li&gt; &#xA; &lt;li&gt;Works with any network stack with socket API, like LwIP or FreeRTOS-Plus-TCP&lt;/li&gt; &#xA; &lt;li&gt;Very easy to integrate: just copy &lt;code&gt;mongoose.c&lt;/code&gt; and &lt;code&gt;mongoose.h&lt;/code&gt; files to your build tree&lt;/li&gt; &#xA; &lt;li&gt;Detailed &lt;a href=&#34;https://mongoose.ws/documentation/&#34;&gt;documentation&lt;/a&gt; and &lt;a href=&#34;https://mongoose.ws/tutorials/&#34;&gt;tutorials&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Commercial use&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mongoose is used by hundreds of businesses, from Fortune500 giants like Siemens, Schneider Electric, Broadcom, Bosch, Google, Samsung, Qualcomm, Caterpillar to the small businesses&lt;/li&gt; &#xA; &lt;li&gt;Used to solve a wide range of business needs, like implementing Web UI interface on devices, RESTful API services, telemetry data exchange, remote control for a product, remote software updates, remote monitoring, and others&lt;/li&gt; &#xA; &lt;li&gt;Deployed to hundreds of millions devices in production environment worldwide&lt;/li&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://mongoose.ws/case-studies/&#34;&gt;Case Studies&lt;/a&gt; from our respected customers like &lt;a href=&#34;https://mongoose.ws/case-studies/schneider-electric/&#34;&gt;Schneider Electric&lt;/a&gt; (industrial automation), &lt;a href=&#34;https://mongoose.ws/case-studies/broadcom/&#34;&gt;Broadcom&lt;/a&gt; (semiconductors), &lt;a href=&#34;https://mongoose.ws/case-studies/pilz/&#34;&gt;Pilz&lt;/a&gt; (industrial automation), and others&lt;/li&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://mongoose.ws/testimonials/&#34;&gt;Testimonials&lt;/a&gt; from engineers that integrated Mongoose in their commercial products&lt;/li&gt; &#xA; &lt;li&gt;We provide &lt;a href=&#34;https://mongoose.ws/licensing/&#34;&gt;Evaluation and Commercial licensing&lt;/a&gt;, &lt;a href=&#34;https://mongoose.ws/support/&#34;&gt;support&lt;/a&gt;, consultancy and integration assistance - don&#39;t hesitate to &lt;a href=&#34;https://mongoose.ws/contact/&#34;&gt;contact us&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Security&lt;/h1&gt; &#xA;&lt;p&gt;We take security seriously:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Mongoose repository runs a &lt;a href=&#34;https://github.com/cesanta/mongoose/actions&#34;&gt;continuous integration test powered by GitHub&lt;/a&gt;, which runs through hundreds of unit tests on every commit to the repository. Our &lt;a href=&#34;https://github.com/cesanta/mongoose/tree/master/test&#34;&gt;unit tests&lt;/a&gt; are built with modern address sanitizer technologies, which help to find security vulnerabilities early&lt;/li&gt; &#xA; &lt;li&gt;Mongoose repository is integrated into Google&#39;s &lt;a href=&#34;https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&amp;amp;can=1&amp;amp;q=proj:mongoose&#34;&gt;oss-fuzz continuous fuzzer&lt;/a&gt; which scans for potential vulnerabilities continuously&lt;/li&gt; &#xA; &lt;li&gt;We receive periodic vulnerability reports from the independent security groups like &lt;a href=&#34;https://www.cisco.com/c/en/us/products/security/talos.html&#34;&gt;Cisco Talos&lt;/a&gt;, &lt;a href=&#34;https://www.microsoft.com/en-us/msrc&#34;&gt;Microsoft Security Response Center&lt;/a&gt;, &lt;a href=&#34;https://www.mitre.org/&#34;&gt;MITRE Corporation&lt;/a&gt;, &lt;a href=&#34;https://www.compass-security.com/en/&#34;&gt;Compass Security&lt;/a&gt; and others. In case of the vulnerability found, we act according to the industry best practice: hold on to the publication, fix the software and notify all our customers that have an appropriate subscription&lt;/li&gt; &#xA; &lt;li&gt;Some of our customers (for example NASA) have specific security requirements and run independent security audits, of which we get notified and in case of any issue, act similar to (3).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Supplement software&lt;/h1&gt; &#xA;&lt;p&gt;This software is often used together with Mongoose:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cesanta/mjson&#34;&gt;mjson&lt;/a&gt; - a JSON parser, emitter and JSON-RPC engine. Used to implement RESTful APIs that use JSON, or implement data exchange (e.g. over MQTT or Websocket) that use JSON for data encapsulation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cesanta/elk&#34;&gt;elk&lt;/a&gt; - a tiny JavaScript engine. Used to implement scripting support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contributions&lt;/h1&gt; &#xA;&lt;p&gt;Contributions are welcome! Please follow the guidelines below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sign &lt;a href=&#34;https://cesanta.com/cla.html&#34;&gt;Cesanta CLA&lt;/a&gt; and send GitHub pull request&lt;/li&gt; &#xA; &lt;li&gt;Make sure that PRs have only one commit, and deal with one issue only&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>espressif/arduino-esp32</title>
    <updated>2022-05-29T02:04:57Z</updated>
    <id>tag:github.com,2022-05-29:/espressif/arduino-esp32</id>
    <link href="https://github.com/espressif/arduino-esp32" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Arduino core for the ESP32&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Arduino core for the ESP32, ESP32-S2, ESP32-S3 and ESP32-C3&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/espressif/arduino-esp32/workflows/ESP32%20Arduino%20CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt; &lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/?badge=latest&#34;&gt;&lt;img src=&#34;https://readthedocs.com/projects/espressif-arduino-esp32/badge/?version=latest&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Need help or have a question? Join the chat at &lt;a href=&#34;https://gitter.im/espressif/arduino-esp32?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/espressif/arduino-esp32.svg?sanitize=true&#34; alt=&#34;https://gitter.im/espressif/arduino-esp32&#34;&gt;&lt;/a&gt; or &lt;a href=&#34;https://github.com/espressif/arduino-esp32/discussions&#34;&gt;open a new Discussion&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/espressif/arduino-esp32/master/#development-status&#34;&gt;Development Status&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/espressif/arduino-esp32/master/#development-planning&#34;&gt;Development Planning&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/espressif/arduino-esp32/master/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/espressif/arduino-esp32/master/#supported-chips&#34;&gt;Supported Chips&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/espressif/arduino-esp32/master/#decoding-exceptions&#34;&gt;Decoding exceptions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/espressif/arduino-esp32/master/#issuebug-report-template&#34;&gt;Issue/Bug report template&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/espressif/arduino-esp32/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Development Status&lt;/h3&gt; &#xA;&lt;p&gt;Latest Stable Release &lt;a href=&#34;https://github.com/espressif/arduino-esp32/releases/latest/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/espressif/arduino-esp32.svg?style=plastic&#34; alt=&#34;Release Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/espressif/arduino-esp32/releases/latest/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release-date/espressif/arduino-esp32.svg?style=plastic&#34; alt=&#34;Release Date&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/espressif/arduino-esp32/releases/latest/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/espressif/arduino-esp32/latest/total.svg?style=plastic&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Latest Development Release &lt;a href=&#34;https://github.com/espressif/arduino-esp32/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/espressif/arduino-esp32/all.svg?style=plastic&#34; alt=&#34;Release Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/espressif/arduino-esp32/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release-date-pre/espressif/arduino-esp32.svg?style=plastic&#34; alt=&#34;Release Date&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/espressif/arduino-esp32/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads-pre/espressif/arduino-esp32/latest/total.svg?style=plastic&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Development Planning&lt;/h3&gt; &#xA;&lt;p&gt;Our Development is fully tracked on this public &lt;strong&gt;&lt;a href=&#34;https://github.com/orgs/espressif/projects/3&#34;&gt;Roadmap 🎉&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;For even more information you can take a look at &lt;a href=&#34;https://github.com/espressif/arduino-esp32/discussions/categories/sprints-meeting-notes&#34;&gt;Sprint Meeting notes&lt;/a&gt; or join &lt;a href=&#34;https://github.com/espressif/arduino-esp32/discussions/categories/monthly-community-meetings&#34;&gt;Monthly Community Meetings 🔔&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;p&gt;You can use the &lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/&#34;&gt;Arduino-ESP32 Online Documentation&lt;/a&gt; to get all information about this project.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/getting_started.html&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/installing.html&#34;&gt;Installing (Windows, Linux and macOS)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/libraries.html&#34;&gt;Libraries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/esp-idf_component.html&#34;&gt;ESP-IDF as Component&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/faq.html&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/troubleshooting.html&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Supported Chips&lt;/h3&gt; &#xA;&lt;p&gt;Visit the &lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/getting_started.html#supported-soc-s&#34;&gt;supported chips&lt;/a&gt; documentation to see the list of current supported ESP32 SoCs.&lt;/p&gt; &#xA;&lt;h3&gt;Decoding exceptions&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://github.com/me-no-dev/EspExceptionDecoder&#34;&gt;EspExceptionDecoder&lt;/a&gt; to get meaningful call trace.&lt;/p&gt; &#xA;&lt;h3&gt;Issue/Bug report template&lt;/h3&gt; &#xA;&lt;p&gt;Before reporting an issue, make sure you&#39;ve searched for similar one that was already created. Also make sure to go through all the issues labelled as &lt;a href=&#34;https://github.com/espressif/arduino-esp32/issues?q=is%3Aissue+label%3A%22Type%3A+For+reference%22+&#34;&gt;Type: For reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Finally, if you are sure no one else had the issue, follow the &lt;strong&gt;Issue template&lt;/strong&gt; or &lt;strong&gt;Feature request template&lt;/strong&gt; while reporting any &lt;a href=&#34;https://github.com/espressif/arduino-esp32/issues/new/choose&#34;&gt;new Issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;We welcome contributions to the Arduino ESP32 project!&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/contributing.html&#34;&gt;contributing&lt;/a&gt; in the documentation for more information on how to contribute to the project.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>libuv/libuv</title>
    <updated>2022-05-29T02:04:57Z</updated>
    <id>tag:github.com,2022-05-29:/libuv/libuv</id>
    <link href="https://github.com/libuv/libuv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cross-platform asynchronous I/O&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/libuv/libuv/master/img/banner.png&#34; alt=&#34;libuv&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;libuv is a multi-platform support library with a focus on asynchronous I/O. It was primarily developed for use by &lt;a href=&#34;http://nodejs.org/&#34;&gt;Node.js&lt;/a&gt;, but it&#39;s also used by &lt;a href=&#34;http://luvit.io/&#34;&gt;Luvit&lt;/a&gt;, &lt;a href=&#34;http://julialang.org/&#34;&gt;Julia&lt;/a&gt;, &lt;a href=&#34;https://github.com/MagicStack/uvloop&#34;&gt;uvloop&lt;/a&gt;, and &lt;a href=&#34;https://github.com/libuv/libuv/raw/v1.x/LINKS.md&#34;&gt;others&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Feature highlights&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Full-featured event loop backed by epoll, kqueue, IOCP, event ports.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Asynchronous TCP and UDP sockets&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Asynchronous DNS resolution&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Asynchronous file and file system operations&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;File system events&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ANSI escape code controlled TTY&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;IPC with socket sharing, using Unix domain sockets or named pipes (Windows)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Child processes&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Thread pool&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Signal handling&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;High resolution clock&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Threading and synchronization primitives&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;Starting with version 1.0.0 libuv follows the &lt;a href=&#34;http://semver.org/&#34;&gt;semantic versioning&lt;/a&gt; scheme. The API change and backwards compatibility rules are those indicated by SemVer. libuv will keep a stable ABI across major releases.&lt;/p&gt; &#xA;&lt;p&gt;The ABI/API changes can be tracked &lt;a href=&#34;http://abi-laboratory.pro/tracker/timeline/libuv/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;libuv is licensed under the MIT license. Check the &lt;a href=&#34;https://raw.githubusercontent.com/libuv/libuv/v1.x/LICENSE&#34;&gt;LICENSE file&lt;/a&gt;. The documentation is licensed under the CC BY 4.0 license. Check the &lt;a href=&#34;https://raw.githubusercontent.com/libuv/libuv/v1.x/LICENSE-docs&#34;&gt;LICENSE-docs file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/libuv/libuv/discussions&#34;&gt;Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://groups.google.com/group/libuv&#34;&gt;Mailing list&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;h3&gt;Official documentation&lt;/h3&gt; &#xA;&lt;p&gt;Located in the docs/ subdirectory. It uses the &lt;a href=&#34;http://sphinx-doc.org/&#34;&gt;Sphinx&lt;/a&gt; framework, which makes it possible to build the documentation in multiple formats.&lt;/p&gt; &#xA;&lt;p&gt;Show different supported building options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build documentation as HTML:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build documentation as HTML and live reload it when it changes (this requires sphinx-autobuild to be installed and is only supported on Unix):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make livehtml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build documentation as man pages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make man&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build documentation as ePub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make epub&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE: Windows users need to use make.bat instead of plain &#39;make&#39;.&lt;/p&gt; &#xA;&lt;p&gt;Documentation can be browsed online &lt;a href=&#34;http://docs.libuv.org&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/libuv/libuv/tree/master/test&#34;&gt;tests and benchmarks&lt;/a&gt; also serve as API specification and usage examples.&lt;/p&gt; &#xA;&lt;h3&gt;Other resources&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=nGn60vDSxQ4&#34;&gt;LXJS 2012 talk&lt;/a&gt; — High-level introductory talk about libuv.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thlorenz/libuv-dox&#34;&gt;libuv-dox&lt;/a&gt; — Documenting types and methods of libuv, mostly by reading uv.h.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thlorenz/learnuv&#34;&gt;learnuv&lt;/a&gt; — Learn uv for fun and profit, a self guided workshop to libuv.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These resources are not handled by libuv maintainers and might be out of date. Please verify it before opening new issues.&lt;/p&gt; &#xA;&lt;h2&gt;Downloading&lt;/h2&gt; &#xA;&lt;p&gt;libuv can be downloaded either from the &lt;a href=&#34;https://github.com/libuv/libuv&#34;&gt;GitHub repository&lt;/a&gt; or from the &lt;a href=&#34;http://dist.libuv.org/dist/&#34;&gt;downloads site&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Before verifying the git tags or signature files, importing the relevant keys is necessary. Key IDs are listed in the &lt;a href=&#34;https://github.com/libuv/libuv/raw/master/MAINTAINERS.md&#34;&gt;MAINTAINERS&lt;/a&gt; file, but are also available as git blob objects for easier use.&lt;/p&gt; &#xA;&lt;p&gt;Importing a key the usual way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ gpg --keyserver pool.sks-keyservers.net --recv-keys AE9BC059&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Importing a key from a git blob object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git show pubkey-saghul | gpg --import&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Verifying releases&lt;/h3&gt; &#xA;&lt;p&gt;Git tags are signed with the developer&#39;s key, they can be verified as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git verify-tag v1.6.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Starting with libuv 1.7.0, the tarballs stored in the &lt;a href=&#34;http://dist.libuv.org/dist/&#34;&gt;downloads site&lt;/a&gt; are signed and an accompanying signature file sit alongside each. Once both the release tarball and the signature file are downloaded, the file can be verified as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ gpg --verify libuv-1.7.0.tar.gz.sign&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build Instructions&lt;/h2&gt; &#xA;&lt;p&gt;For UNIX-like platforms, including macOS, there are two build methods: autotools or &lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For Windows, &lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt; is the only supported build method and has the following prerequisites:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;One of: &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://visualstudio.microsoft.com/visual-cpp-build-tools/&#34;&gt;Visual C++ Build Tools&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://www.visualstudio.com/vs/older-downloads/&#34;&gt;Visual Studio 2015 Update 3&lt;/a&gt;, all editions including the Community edition (remember to select &#34;Common Tools for Visual C++ 2015&#34; feature during installation).&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://www.visualstudio.com/downloads/&#34;&gt;Visual Studio 2017&lt;/a&gt;, any edition (including the Build Tools SKU). &lt;strong&gt;Required Components:&lt;/strong&gt; &#34;MSbuild&#34;, &#34;VC++ 2017 v141 toolset&#34; and one of the Windows SDKs (10 or 8.1).&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Basic Unix tools required for some tests, &lt;a href=&#34;http://git-scm.com/download/win&#34;&gt;Git for Windows&lt;/a&gt; includes Git Bash and tools which can be included in the global &lt;code&gt;PATH&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;To build with autotools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sh autogen.sh&#xA;$ ./configure&#xA;$ make&#xA;$ make check&#xA;$ make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build with &lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir -p build&#xA;&#xA;$ (cd build &amp;amp;&amp;amp; cmake .. -DBUILD_TESTING=ON) # generate project with tests&#xA;$ cmake --build build                       # add `-j &amp;lt;n&amp;gt;` with cmake &amp;gt;= 3.12&#xA;&#xA;# Run tests:&#xA;$ (cd build &amp;amp;&amp;amp; ctest -C Debug --output-on-failure)&#xA;&#xA;# Or manually run tests:&#xA;$ build/uv_run_tests                        # shared library build&#xA;$ build/uv_run_tests_a                      # static library build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To cross-compile with &lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt; (unsupported but generally works):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cmake ../..                 \&#xA;  -DCMAKE_SYSTEM_NAME=Windows \&#xA;  -DCMAKE_SYSTEM_VERSION=6.1  \&#xA;  -DCMAKE_C_COMPILER=i686-w64-mingw32-gcc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install with Homebrew&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew install --HEAD libuv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note to OS X users:&lt;/p&gt; &#xA;&lt;p&gt;Make sure that you specify the architecture you wish to build for in the &#34;ARCHS&#34; flag. You can specify more than one by delimiting with a space (e.g. &#34;x86_64 i386&#34;).&lt;/p&gt; &#xA;&lt;h3&gt;Running tests&lt;/h3&gt; &#xA;&lt;p&gt;Some tests are timing sensitive. Relaxing test timeouts may be necessary on slow or overloaded machines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ env UV_TEST_TIMEOUT_MULTIPLIER=2 build/uv_run_tests # 10s instead of 5s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Run one test&lt;/h4&gt; &#xA;&lt;p&gt;The list of all tests is in &lt;code&gt;test/test-list.h&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This invocation will cause the test driver to fork and execute &lt;code&gt;TEST_NAME&lt;/code&gt; in a child process:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ build/uv_run_tests_a TEST_NAME&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This invocation will cause the test driver to execute the test in the same process:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ build/uv_run_tests_a TEST_NAME TEST_NAME&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Debugging tools&lt;/h4&gt; &#xA;&lt;p&gt;When running the test from within the test driver process (&lt;code&gt;build/uv_run_tests_a TEST_NAME TEST_NAME&lt;/code&gt;), tools like gdb and valgrind work normally.&lt;/p&gt; &#xA;&lt;p&gt;When running the test from a child of the test driver process (&lt;code&gt;build/uv_run_tests_a TEST_NAME&lt;/code&gt;), use these tools in a fork-aware manner.&lt;/p&gt; &#xA;&lt;h5&gt;Fork-aware gdb&lt;/h5&gt; &#xA;&lt;p&gt;Use the &lt;a href=&#34;https://sourceware.org/gdb/onlinedocs/gdb/Forks.html&#34;&gt;follow-fork-mode&lt;/a&gt; setting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gdb --args build/uv_run_tests_a TEST_NAME&#xA;&#xA;(gdb) set follow-fork-mode child&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Fork-aware valgrind&lt;/h5&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;--trace-children=yes&lt;/code&gt; parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ valgrind --trace-children=yes -v --tool=memcheck --leak-check=full --track-origins=yes --leak-resolution=high --show-reachable=yes --log-file=memcheck-%p.log build/uv_run_tests_a TEST_NAME&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running benchmarks&lt;/h3&gt; &#xA;&lt;p&gt;See the section on running tests. The benchmark driver is &lt;code&gt;./uv_run_benchmarks_a&lt;/code&gt; and the benchmarks are listed in &lt;code&gt;test/benchmark-list.h&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://raw.githubusercontent.com/libuv/libuv/v1.x/SUPPORTED_PLATFORMS.md&#34;&gt;SUPPORTED_PLATFORMS file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;-fno-strict-aliasing&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;It is recommended to turn on the &lt;code&gt;-fno-strict-aliasing&lt;/code&gt; compiler flag in projects that use libuv. The use of ad hoc &#34;inheritance&#34; in the libuv API may not be safe in the presence of compiler optimizations that depend on strict aliasing.&lt;/p&gt; &#xA;&lt;p&gt;MSVC does not have an equivalent flag but it also does not appear to need it at the time of writing (December 2019.)&lt;/p&gt; &#xA;&lt;h3&gt;AIX Notes&lt;/h3&gt; &#xA;&lt;p&gt;AIX compilation using IBM XL C/C++ requires version 12.1 or greater.&lt;/p&gt; &#xA;&lt;p&gt;AIX support for filesystem events requires the non-default IBM &lt;code&gt;bos.ahafs&lt;/code&gt; package to be installed. This package provides the AIX Event Infrastructure that is detected by &lt;code&gt;autoconf&lt;/code&gt;. &lt;a href=&#34;http://www.ibm.com/developerworks/aix/library/au-aix_event_infrastructure/&#34;&gt;IBM documentation&lt;/a&gt; describes the package in more detail.&lt;/p&gt; &#xA;&lt;h3&gt;z/OS Notes&lt;/h3&gt; &#xA;&lt;p&gt;z/OS compilation requires &lt;a href=&#34;https://github.com/ibmruntimes/zoslib&#34;&gt;ZOSLIB&lt;/a&gt; to be installed. When building with &lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt;, use the flag &lt;code&gt;-DZOSLIB_DIR&lt;/code&gt; to specify the path to &lt;a href=&#34;https://github.com/ibmruntimes/zoslib&#34;&gt;ZOSLIB&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ (cd build &amp;amp;&amp;amp; cmake .. -DBUILD_TESTING=ON -DZOSLIB_DIR=/path/to/zoslib)&#xA;$ cmake --build build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;z/OS creates System V semaphores and message queues. These persist on the system after the process terminates unless the event loop is closed.&lt;/p&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;ipcrm&lt;/code&gt; command to manually clear up System V resources.&lt;/p&gt; &#xA;&lt;h2&gt;Patches&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/libuv/libuv/raw/master/CONTRIBUTING.md&#34;&gt;guidelines for contributing&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cilium/tetragon</title>
    <updated>2022-05-29T02:04:57Z</updated>
    <id>tag:github.com,2022-05-29:/cilium/tetragon</id>
    <link href="https://github.com/cilium/tetragon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;eBPF-based Security Observability and Runtime Enforcement&lt;/p&gt;&lt;hr&gt;&lt;picture&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://github.com/cilium/tetragon/releases/download/tetragon-cli/logo.png&#34; width=&#34;400&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/cilium/tetragon/releases/download/tetragon-cli/logo-dark.png&#34; width=&#34;400&#34;&gt; &#xA;&lt;/picture&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache_2.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Cilium’s new Tetragon component enables powerful realtime, eBPF-based Security Observability and Runtime Enforcement.&lt;/p&gt; &#xA;&lt;p&gt;Tetragon detects and is able to react to security-significant events, such as&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Process execution events&lt;/li&gt; &#xA; &lt;li&gt;System call activity&lt;/li&gt; &#xA; &lt;li&gt;I/O activity including network &amp;amp; file access&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When used in a Kubernetes environment, Tetragon is Kubernetes-aware - that is, it understands Kubernetes identities such as namespaces, pods and so-on - so that security event detection can be configured in relation to individual workloads.&lt;/p&gt; &#xA;&lt;h2&gt;Functionality Overview&lt;/h2&gt; &#xA;&lt;h3&gt;eBPF Real-Time&lt;/h3&gt; &#xA;&lt;p&gt;Tetragon is a runtime security enforcement and observability tool. What this means is Tetragon applies policy and filtering directly in eBPF in the kernel. It performs the filtering, blocking, and reacting to events directly in the kernel instead of sending events to a user space agent.&lt;/p&gt; &#xA;&lt;p&gt;For an observability use case, applying filters directly in the kernel drastically reduces observation overhead. By avoiding expensive context switching and wakeups, especially for high frequency events, such as send, read, or write operations, eBPF reduces required resources. Instead, Tetragon provides rich filters (file, socket, binary names, namespace/capabilities, etc.) in eBPF, which allows users to specify the important and relevant events in their specific context, and pass only those to the user-space agent.&lt;/p&gt; &#xA;&lt;h3&gt;eBPF Flexibility&lt;/h3&gt; &#xA;&lt;p&gt;Tetragon can hook into any function in the Linux kernel and filter on its arguments, return value, associated metadata that Tetragon collects about processes (e.g., executable names), files, and other properties. By writing tracing policies users can solve various security and observability use cases. We provide a number of examples for these in the repository and highlight some below in the &#39;Getting Started Guide&#39;, but users are encouraged to create new policies that match their use cases. The examples are just that, jumping off points that users can then use to create new and specific policy deployments even potentially tracing kernel functions we did not consider. None of the specifics about which functions are traced and what filters are applied are hard-coded in the engine itself.&lt;/p&gt; &#xA;&lt;p&gt;Critically, Tetragon allows hooking deep in the kernel where data structures can not be manipulated by user space applications avoiding common issues with syscall tracing where data is incorrectly read, maliciously altered by attackers, or missing due to page faults and other user/kernel boundary errors.&lt;/p&gt; &#xA;&lt;p&gt;Many of the Tetragon developers are also kernel developers. By leveraging this knowledge base Tetragon has created a set of tracing policies that can solve many common observability and security use cases.&lt;/p&gt; &#xA;&lt;h3&gt;eBPF Kernel Aware&lt;/h3&gt; &#xA;&lt;p&gt;Tetragon, through eBPF, has access to the Linux kernel state. Tetragon can then join this kernel state with Kubernetes awareness or user policy to create rules enforced by the kernel in real time. This allows annotating and enforcing process namespace and capabilities, sockets to processes, process file descriptor to filenames and so on. For example, when an application changes its privileges we can create a policy to trigger an alert or even kill the process before it has a chance to complete the syscall and potentially run additional syscalls.&lt;/p&gt; &#xA;&lt;h2&gt;Local Development&lt;/h2&gt; &#xA;&lt;p&gt;For getting started with local development, you can refer to the &lt;a href=&#34;https://raw.githubusercontent.com/cilium/tetragon/main/docs/contributing/development/README.md&#34;&gt;Development Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart Guide&lt;/h2&gt; &#xA;&lt;p&gt;This Quickstart guide uses a Kind cluster and a helm-based installation to provide a simple way to get a hands on experience with Tetragon and the generated events. These events include monitoring process execution, network sockets, and file access to see what binaries are executing and making network connections or writing to sensitive files.&lt;/p&gt; &#xA;&lt;p&gt;In this scenario, we are going to install a demo application,&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;observe all process execution happening inside a Kubernetes workload&lt;/li&gt; &#xA; &lt;li&gt;detect file access and writes&lt;/li&gt; &#xA; &lt;li&gt;observe network connections that a Kubernetes workload is making&lt;/li&gt; &#xA; &lt;li&gt;detect privileged processes inside a Kubernetes workload&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;While, we use a Kubernetes Kind cluster in this guide, users can also apply the same concepts in other Kubernetes platforms, bare-metal, or VM environments.&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;The base kernel should support &lt;a href=&#34;https://raw.githubusercontent.com/cilium/tetragon/main/#btf-requirement&#34;&gt;BTF&lt;/a&gt; or the BTF file should be placed where Tetragon can read it.&lt;/p&gt; &#xA;&lt;p&gt;For reference, the examples below use this &lt;a href=&#34;https://raw.githubusercontent.com/cilium/tetragon/main/#btf-requirement&#34;&gt;Vagrantfile&lt;/a&gt; and we created our &lt;a href=&#34;https://kind.sigs.k8s.io/docs/user/quick-start/&#34;&gt;Kind&lt;/a&gt; cluster using the defaults options.&lt;/p&gt; &#xA;&lt;h3&gt;Create a cluster&lt;/h3&gt; &#xA;&lt;p&gt;Create a Kubernetes cluster using Kind or GKE.&lt;/p&gt; &#xA;&lt;h4&gt;Kind&lt;/h4&gt; &#xA;&lt;p&gt;Run the following command to create the Kubernetes cluster:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;kind create cluster&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;GKE&lt;/h4&gt; &#xA;&lt;p&gt;Run the following command to create a GKE cluster:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export NAME=&#34;$(whoami)-$RANDOM&#34;&#xA;gcloud container clusters create &#34;${NAME}&#34; \&#xA;  --zone us-west2-a \&#xA;  --release-channel rapid \&#xA;  --num-nodes 1 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Deploy Tetragon&lt;/h3&gt; &#xA;&lt;p&gt;To install and deploy Tetragon, run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;helm repo add cilium https://helm.cilium.io&#xA;helm repo update&#xA;helm install tetragon cilium/tetragon -n kube-system&#xA;kubectl rollout status -n kube-system ds/tetragon -w&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default kube-system pods are filtered for the examples below we use the demo deployment from &lt;a href=&#34;https://docs.cilium.io/en/v1.11/gettingstarted/http/#gs-http&#34;&gt;Cilium&lt;/a&gt; to generate events.&lt;/p&gt; &#xA;&lt;h3&gt;Deploy Demo Application&lt;/h3&gt; &#xA;&lt;p&gt;Once Tetragon is installed, you can use our Demo Application to explore the Security Observability Events:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl create -f https://raw.githubusercontent.com/cilium/cilium/v1.11/examples/minikube/http-sw-app.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Before going forward, verify that all pods are up and running - it might take several seconds for some pods until they satisfy all the dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl get pods&#xA;NAME                         READY   STATUS    RESTARTS   AGE&#xA;deathstar-6c94dcc57b-7pr8c   1/1     Running   0          10s&#xA;deathstar-6c94dcc57b-px2vw   1/1     Running   0          10s&#xA;tiefighter                   1/1     Running   0          10s&#xA;xwing                        1/1     Running   0          10s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Explore Security Observability Events&lt;/h3&gt; &#xA;&lt;p&gt;After Tetragon and the Demo Application is up and running you can examine the security and observability events produced by Tetragon in different ways.&lt;/p&gt; &#xA;&lt;h4&gt;Raw JSON events&lt;/h4&gt; &#xA;&lt;p&gt;The first way is to observe the raw json output from the stdout container log:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;kubectl logs -n kube-system ds/tetragon -c export-stdout -f&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If you&#39;re running more than one &lt;code&gt;tetragon&lt;/code&gt; pod then the command above will only print the logs from one of those pods. To print out the logs on all &lt;code&gt;tetragon&lt;/code&gt; pods, you will need to use a filter/selector such as &lt;code&gt;-l app.kubernetes.io/name=tetragon&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;kubectl logs -n kube-system -l app.kubernetes.io/name=tetragon -c export-stdout -f&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The raw JSON events provide Kubernetes API, identity metadata, and OS level process visibility about the executed binary, its parent and the execution time.&lt;/p&gt; &#xA;&lt;h4&gt;Tetragon CLI&lt;/h4&gt; &#xA;&lt;p&gt;A second way is to pretty print the events using the &lt;a href=&#34;https://github.com/cilium/tetragon/releases/tag/tetragon-cli&#34;&gt;Tetragon CLI&lt;/a&gt;. The tool also allows filtering by process, pod, and other fields.&lt;/p&gt; &#xA;&lt;p&gt;You can download and install it by the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GOOS=$(go env GOOS)&#xA;GOARCH=$(go env GOARCH)&#xA;curl -L --remote-name-all https://github.com/cilium/tetragon/releases/download/tetragon-cli/tetragon-${GOOS}-${GOARCH}.tar.gz{,.sha256sum}&#xA;sha256sum --check tetragon-${GOOS}-${GOARCH}.tar.gz.sha256sum&#xA;sudo tar -C /usr/local/bin -xzvf tetragon-${GOOS}-${GOARCH}.tar.gz&#xA;rm tetragon-${GOOS}-${GOARCH}.tar.gz{,.sha256sum}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(see &lt;a href=&#34;https://github.com/cilium/tetragon/releases/tag/tetragon-cli&#34;&gt;https://github.com/cilium/tetragon/releases/tag/tetragon-cli&lt;/a&gt; for supported &lt;code&gt;GOOS&lt;/code&gt;/&lt;code&gt;GOARCH&lt;/code&gt; binary releases)&lt;/p&gt; &#xA;&lt;p&gt;To start printing events run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;kubectl logs -n kube-system ds/tetragon -c export-stdout -f | tetragon observe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Tetragon is able to observe several events, here we provide a few small samples that can be used as a starting point:&lt;/p&gt; &#xA;&lt;h3&gt;Process Execution&lt;/h3&gt; &#xA;&lt;p&gt;This first use case is monitoring process execution, which can be observed with the Tetragon &lt;code&gt;process_exec&lt;/code&gt; and &lt;code&gt;process_exit&lt;/code&gt; JSON events. These events contain the full lifecycle of processes, from fork/exec to exit, including metadata such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Binary name: Defines the name of an executable file&lt;/li&gt; &#xA; &lt;li&gt;Parent process: Helps to identify process execution anomalies (e.g., if a nodejs app forks a shell, this is suspicious)&lt;/li&gt; &#xA; &lt;li&gt;Command-line argument: Defines the program runtime behavior&lt;/li&gt; &#xA; &lt;li&gt;Current working directory: Helps to identify hidden malware execution from a temporary folder, which is a common pattern used in malwares&lt;/li&gt; &#xA; &lt;li&gt;Kubernetes metadata: Contains pods, labels, and Kubernetes namespaces, which are critical to identify service owners, particularly in a multitenant environments&lt;/li&gt; &#xA; &lt;li&gt;exec_id: A unique process identifier that correlates all recorded activity of a process&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As a first step, let&#39;s start monitoring the events from the &lt;code&gt;xwing&lt;/code&gt; pod:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl logs -n kube-system ds/tetragon -c export-stdout -f | tetragon observe --namespace default --pod xwing&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then in another terminal, let&#39;s &lt;code&gt;kubectl exec&lt;/code&gt; into the &lt;code&gt;xwing&lt;/code&gt; pod and execute some example commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl exec -it xwing -- /bin/bash&#xA;whoami&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you observe, the output in the first terminal should be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;🚀 process default/xwing /bin/bash&#xA;🚀 process default/xwing /usr/bin/whoami&#xA;💥 exit    default/xwing /usr/bin/whoami 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here you can see the binary names along with its arguments, the pod info, and return codes. For a compact one line view of the events.&lt;/p&gt; &#xA;&lt;p&gt;For more details use the raw JSON events to get detailed information, you can stop the Tetragon CLI by &lt;code&gt;Crl-C&lt;/code&gt; and parse the &lt;code&gt;tetragon.log&lt;/code&gt; file by executing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl logs -n kube-system ds/tetragon -c export-stdout -f | jq &#39;select(.process_exec.process.pod.name==&#34;xwing&#34; or .process_exit.process.pod.name==&#34;xwing&#34;)&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example &lt;code&gt;process_exec&lt;/code&gt; and &lt;code&gt;process_exit&lt;/code&gt; events can be:&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt; Process Exec Event &lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;process_exec&#34;: {&#xA;    &#34;process&#34;: {&#xA;      &#34;exec_id&#34;: &#34;a2luZC1jb250cm9sLXBsYW5lOjExNDI4NjE1NjM2OTAxOjUxNTgz&#34;,&#xA;      &#34;pid&#34;: 51583,&#xA;      &#34;uid&#34;: 0,&#xA;      &#34;cwd&#34;: &#34;/&#34;,&#xA;      &#34;binary&#34;: &#34;/usr/bin/whoami&#34;,&#xA;      &#34;arguments&#34;: &#34;--version&#34;,&#xA;      &#34;flags&#34;: &#34;execve rootcwd clone&#34;,&#xA;      &#34;start_time&#34;: &#34;2022-05-11T12:54:45.615Z&#34;,&#xA;      &#34;auid&#34;: 4294967295,&#xA;      &#34;pod&#34;: {&#xA;        &#34;namespace&#34;: &#34;default&#34;,&#xA;        &#34;name&#34;: &#34;xwing&#34;,&#xA;        &#34;container&#34;: {&#xA;          &#34;id&#34;: &#34;containerd://1fb931d2f6e5e4cfdbaf30fdb8e2fdd81320bdb3047ded50120a4f82838209ce&#34;,&#xA;          &#34;name&#34;: &#34;spaceship&#34;,&#xA;          &#34;image&#34;: {&#xA;            &#34;id&#34;: &#34;docker.io/tgraf/netperf@sha256:8e86f744bfea165fd4ce68caa05abc96500f40130b857773186401926af7e9e6&#34;,&#xA;            &#34;name&#34;: &#34;docker.io/tgraf/netperf:latest&#34;&#xA;          },&#xA;          &#34;start_time&#34;: &#34;2022-05-11T10:07:33Z&#34;,&#xA;          &#34;pid&#34;: 50&#xA;        }&#xA;      },&#xA;      &#34;docker&#34;: &#34;1fb931d2f6e5e4cfdbaf30fdb8e2fdd&#34;,&#xA;      &#34;parent_exec_id&#34;: &#34;a2luZC1jb250cm9sLXBsYW5lOjkwNzkyMjU2MjMyNjk6NDM4NzI=&#34;,&#xA;      &#34;refcnt&#34;: 1&#xA;    },&#xA;    &#34;parent&#34;: {&#xA;      &#34;exec_id&#34;: &#34;a2luZC1jb250cm9sLXBsYW5lOjkwNzkyMjU2MjMyNjk6NDM4NzI=&#34;,&#xA;      &#34;pid&#34;: 43872,&#xA;      &#34;uid&#34;: 0,&#xA;      &#34;cwd&#34;: &#34;/&#34;,&#xA;      &#34;binary&#34;: &#34;/bin/bash&#34;,&#xA;      &#34;flags&#34;: &#34;execve rootcwd clone&#34;,&#xA;      &#34;start_time&#34;: &#34;2022-05-11T12:15:36.225Z&#34;,&#xA;      &#34;auid&#34;: 4294967295,&#xA;      &#34;pod&#34;: {&#xA;        &#34;namespace&#34;: &#34;default&#34;,&#xA;        &#34;name&#34;: &#34;xwing&#34;,&#xA;        &#34;container&#34;: {&#xA;          &#34;id&#34;: &#34;containerd://1fb931d2f6e5e4cfdbaf30fdb8e2fdd81320bdb3047ded50120a4f82838209ce&#34;,&#xA;          &#34;name&#34;: &#34;spaceship&#34;,&#xA;          &#34;image&#34;: {&#xA;            &#34;id&#34;: &#34;docker.io/tgraf/netperf@sha256:8e86f744bfea165fd4ce68caa05abc96500f40130b857773186401926af7e9e6&#34;,&#xA;            &#34;name&#34;: &#34;docker.io/tgraf/netperf:latest&#34;&#xA;          },&#xA;          &#34;start_time&#34;: &#34;2022-05-11T10:07:33Z&#34;,&#xA;          &#34;pid&#34;: 43&#xA;        }&#xA;      },&#xA;      &#34;docker&#34;: &#34;1fb931d2f6e5e4cfdbaf30fdb8e2fdd&#34;,&#xA;      &#34;parent_exec_id&#34;: &#34;a2luZC1jb250cm9sLXBsYW5lOjkwNzkxODU5NTMzOTk6NDM4NjE=&#34;,&#xA;      &#34;refcnt&#34;: 1&#xA;    }&#xA;  },&#xA;  &#34;node_name&#34;: &#34;kind-control-plane&#34;,&#xA;  &#34;time&#34;: &#34;2022-05-11T12:54:45.615Z&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt; Process Exit Event &lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;process_exit&#34;: {&#xA;    &#34;process&#34;: {&#xA;      &#34;exec_id&#34;: &#34;a2luZC1jb250cm9sLXBsYW5lOjExNDI4NjE1NjM2OTAxOjUxNTgz&#34;,&#xA;      &#34;pid&#34;: 51583,&#xA;      &#34;uid&#34;: 0,&#xA;      &#34;cwd&#34;: &#34;/&#34;,&#xA;      &#34;binary&#34;: &#34;/usr/bin/whoami&#34;,&#xA;      &#34;arguments&#34;: &#34;--version&#34;,&#xA;      &#34;flags&#34;: &#34;execve rootcwd clone&#34;,&#xA;      &#34;start_time&#34;: &#34;2022-05-11T12:54:45.615Z&#34;,&#xA;      &#34;auid&#34;: 4294967295,&#xA;      &#34;pod&#34;: {&#xA;        &#34;namespace&#34;: &#34;default&#34;,&#xA;        &#34;name&#34;: &#34;xwing&#34;,&#xA;        &#34;container&#34;: {&#xA;          &#34;id&#34;: &#34;containerd://1fb931d2f6e5e4cfdbaf30fdb8e2fdd81320bdb3047ded50120a4f82838209ce&#34;,&#xA;          &#34;name&#34;: &#34;spaceship&#34;,&#xA;          &#34;image&#34;: {&#xA;            &#34;id&#34;: &#34;docker.io/tgraf/netperf@sha256:8e86f744bfea165fd4ce68caa05abc96500f40130b857773186401926af7e9e6&#34;,&#xA;            &#34;name&#34;: &#34;docker.io/tgraf/netperf:latest&#34;&#xA;          },&#xA;          &#34;start_time&#34;: &#34;2022-05-11T10:07:33Z&#34;,&#xA;          &#34;pid&#34;: 50&#xA;        }&#xA;      },&#xA;      &#34;docker&#34;: &#34;1fb931d2f6e5e4cfdbaf30fdb8e2fdd&#34;,&#xA;      &#34;parent_exec_id&#34;: &#34;a2luZC1jb250cm9sLXBsYW5lOjkwNzkyMjU2MjMyNjk6NDM4NzI=&#34;&#xA;    },&#xA;    &#34;parent&#34;: {&#xA;      &#34;exec_id&#34;: &#34;a2luZC1jb250cm9sLXBsYW5lOjkwNzkyMjU2MjMyNjk6NDM4NzI=&#34;,&#xA;      &#34;pid&#34;: 43872,&#xA;      &#34;uid&#34;: 0,&#xA;      &#34;cwd&#34;: &#34;/&#34;,&#xA;      &#34;binary&#34;: &#34;/bin/bash&#34;,&#xA;      &#34;flags&#34;: &#34;execve rootcwd clone&#34;,&#xA;      &#34;start_time&#34;: &#34;2022-05-11T12:15:36.225Z&#34;,&#xA;      &#34;auid&#34;: 4294967295,&#xA;      &#34;pod&#34;: {&#xA;        &#34;namespace&#34;: &#34;default&#34;,&#xA;        &#34;name&#34;: &#34;xwing&#34;,&#xA;        &#34;container&#34;: {&#xA;          &#34;id&#34;: &#34;containerd://1fb931d2f6e5e4cfdbaf30fdb8e2fdd81320bdb3047ded50120a4f82838209ce&#34;,&#xA;          &#34;name&#34;: &#34;spaceship&#34;,&#xA;          &#34;image&#34;: {&#xA;            &#34;id&#34;: &#34;docker.io/tgraf/netperf@sha256:8e86f744bfea165fd4ce68caa05abc96500f40130b857773186401926af7e9e6&#34;,&#xA;            &#34;name&#34;: &#34;docker.io/tgraf/netperf:latest&#34;&#xA;          },&#xA;          &#34;start_time&#34;: &#34;2022-05-11T10:07:33Z&#34;,&#xA;          &#34;pid&#34;: 43&#xA;        }&#xA;      },&#xA;      &#34;docker&#34;: &#34;1fb931d2f6e5e4cfdbaf30fdb8e2fdd&#34;,&#xA;      &#34;parent_exec_id&#34;: &#34;a2luZC1jb250cm9sLXBsYW5lOjkwNzkxODU5NTMzOTk6NDM4NjE=&#34;&#xA;    }&#xA;  },&#xA;  &#34;node_name&#34;: &#34;kind-control-plane&#34;,&#xA;  &#34;time&#34;: &#34;2022-05-11T12:54:45.616Z&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;For the rest of the use cases we will use the Tetragon CLI to give the output.&lt;/p&gt; &#xA;&lt;h3&gt;File Access&lt;/h3&gt; &#xA;&lt;p&gt;The second use case is file access, which can be observed with the Tetragon &lt;code&gt;process_kprobe&lt;/code&gt; JSON events. By using kprobe hook points, these events are able to observe arbitrary kernel calls and file descriptors in the Linux kernel, giving you the ability to monitor every file a process opens, reads, writes, and closes throughout its lifecycle. To be able to observe arbitrary kernel calls, Tetragon can be extended with &lt;code&gt;TracingPolicies&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;TracingPolicy&lt;/code&gt; is a user-configurable Kubernetes custom resource definition (CRD) that allows users to trace arbitrary events in the kernel and define actions to take on a match. For bare metal or VM use cases without Kubernetes a YAML configuration file can be used.&lt;/p&gt; &#xA;&lt;p&gt;In this example, we can monitor if a process inside a Kubernetes workload performs an open, close, read or write in the &lt;code&gt;/etc/&lt;/code&gt; directory. The policy may further specify additional directories or specific files if needed.&lt;/p&gt; &#xA;&lt;p&gt;As a first step, let&#39;s apply the following &lt;code&gt;TracingPolicy&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl apply -f ./crds/examples/sys_write_follow_fd_prefix.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As a second step, let&#39;s start monitoring the events from the &lt;code&gt;xwing&lt;/code&gt; pod:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl logs -n kube-system ds/tetragon -c export-stdout -f | tetragon observe --namespace default --pod xwing&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In another terminal, &lt;code&gt;kubectl exec&lt;/code&gt; into the &lt;code&gt;xwing&lt;/code&gt; pod:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl exec -it xwing -- /bin/bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and edit the &lt;code&gt;/etc/passwd&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vi /etc/passwd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you observe, the output in the first terminal should be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;🚀 process default/xwing /usr/bin/vi /etc/passwd&#xA;📬 open    default/xwing /usr/bin/vi /etc/passwd&#xA;📚 read    default/xwing /usr/bin/vi /etc/passwd 1269 bytes&#xA;📪 close   default/xwing /usr/bin/vi /etc/passwd&#xA;📬 open    default/xwing /usr/bin/vi /etc/passwd&#xA;📝 write   default/xwing /usr/bin/vi /etc/passwd 1277 bytes&#xA;💥 exit    default/xwing /usr/bin/vi /etc/passwd 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note, that open and close are only generated for &lt;code&gt;/etc/&lt;/code&gt; files because of eBPF in kernel filtering. The default CRD additionally filters events associated with the pod init process to filter init noise from pod start.&lt;/p&gt; &#xA;&lt;p&gt;Similarly to the previous example, reviewing the JSON events provides additional data. An example &lt;code&gt;process_kprobe&lt;/code&gt; event observing a write can be:&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt; Process Kprobe Event &lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;   &#34;process_kprobe&#34;:{&#xA;      &#34;process&#34;:{&#xA;         &#34;exec_id&#34;:&#34;a2luZC1jb250cm9sLXBsYW5lOjE1MDA0MzM3MDE1MDI6MTkxNjM=&#34;,&#xA;         &#34;pid&#34;:19163,&#xA;         &#34;uid&#34;:0,&#xA;         &#34;cwd&#34;:&#34;/&#34;,&#xA;         &#34;binary&#34;:&#34;/usr/bin/vi&#34;,&#xA;         &#34;arguments&#34;:&#34;/etc/passwd&#34;,&#xA;         &#34;flags&#34;:&#34;execve rootcwd clone&#34;,&#xA;         &#34;start_time&#34;:&#34;2022-05-26T22:05:13.894Z&#34;,&#xA;         &#34;auid&#34;:4294967295,&#xA;         &#34;pod&#34;:{&#xA;            &#34;namespace&#34;:&#34;default&#34;,&#xA;            &#34;name&#34;:&#34;xwing&#34;,&#xA;            &#34;container&#34;:{&#xA;               &#34;id&#34;:&#34;containerd://4b0df5a137260a6b95cbf6443bb2f4b0c9309e6ccb3d8afdbc3da8fff40c0778&#34;,&#xA;               &#34;name&#34;:&#34;spaceship&#34;,&#xA;               &#34;image&#34;:{&#xA;                  &#34;id&#34;:&#34;docker.io/tgraf/netperf@sha256:8e86f744bfea165fd4ce68caa05abc96500f40130b857773186401926af7e9e6&#34;,&#xA;                  &#34;name&#34;:&#34;docker.io/tgraf/netperf:latest&#34;&#xA;               },&#xA;               &#34;start_time&#34;:&#34;2022-05-26T21:58:11Z&#34;,&#xA;               &#34;pid&#34;:25&#xA;            }&#xA;         },&#xA;         &#34;docker&#34;:&#34;4b0df5a137260a6b95cbf6443bb2f4b&#34;,&#xA;         &#34;parent_exec_id&#34;:&#34;a2luZC1jb250cm9sLXBsYW5lOjEyMDQ1NTIzMTUwNjY6MTc1NDI=&#34;,&#xA;         &#34;refcnt&#34;:1&#xA;      },&#xA;      &#34;parent&#34;:{&#xA;         &#xA;      },&#xA;      &#34;function_name&#34;:&#34;__x64_sys_write&#34;,&#xA;      &#34;args&#34;:[&#xA;         {&#xA;            &#34;file_arg&#34;:{&#xA;               &#34;path&#34;:&#34;/etc/passwd&#34;&#xA;            }&#xA;         },&#xA;         {&#xA;            &#34;bytes_arg&#34;:&#34;cm9vdDp4OjA6MDpyb290Oi9yb290Oi9iaW4vYXNoCm5hdGFsaWEKYmluOng6MToxOmJpbjovYmluOi9zYmluL25vbG9naW4KZGFlbW9uOng6MjoyOmRhZW1vbjovc2Jpbjovc2Jpbi9ub2xvZ2luCmFkbTp4OjM6NDphZG06L3Zhci9hZG06L3NiaW4vbm9sb2dpbgpscDp4OjQ6NzpscDovdmFyL3Nwb29sL2xwZDovc2Jpbi9ub2xvZ2luCnN5bmM6eDo1OjA6c3luYzovc2JpbjovYmluL3N5bmMKc2h1dGRvd246eDo2OjA6c2h1dGRvd246L3NiaW46L3NiaW4vc2h1dGRvd24KaGFsdDp4Ojc6MDpoYWx0Oi9zYmluOi9zYmluL2hhbHQKbWFpbDp4Ojg6MTI6bWFpbDovdmFyL3Nwb29sL21haWw6L3NiaW4vbm9sb2dpbgpuZXdzOng6OToxMzpuZXdzOi91c3IvbGliL25ld3M6L3NiaW4vbm9sb2dpbgp1dWNwOng6MTA6MTQ6dXVjcDovdmFyL3Nwb29sL3V1Y3BwdWJsaWM6L3NiaW4vbm9sb2dpbgpvcGVyYXRvcjp4OjExOjA6b3BlcmF0b3I6L3Jvb3Q6L2Jpbi9zaAptYW46eDoxMzoxNTptYW46L3Vzci9tYW46L3NiaW4vbm9sb2dpbgpwb3N0bWFzdGVyOng6MTQ6MTI6cG9zdG1hc3RlcjovdmFyL3Nwb29sL21haWw6L3NiaW4vbm9sb2dpbgpjcm9uOng6MTY6MTY6Y3JvbjovdmFyL3Nwb29sL2Nyb246L3NiaW4vbm9sb2dpbgpmdHA6eDoyMToyMTo6L3Zhci9saWIvZnRwOi9zYmluL25vbG9naW4Kc3NoZDp4OjIyOjIyOnNzaGQ6L2Rldi9udWxsOi9zYmluL25vbG9naW4KYXQ6eDoyNToyNTphdDovdmFyL3Nwb29sL2Nyb24vYXRqb2JzOi9zYmluL25vbG9naW4Kc3F1aWQ6eDozMTozMTpTcXVpZDovdmFyL2NhY2hlL3NxdWlkOi9zYmluL25vbG9naW4KeGZzOng6MzM6MzM6WCBGb250IFNlcnZlcjovZXRjL1gxMS9mczovc2Jpbi9ub2xvZ2luCmdhbWVzOng6MzU6MzU6Z2FtZXM6L3Vzci9nYW1lczovc2Jpbi9ub2xvZ2luCnBvc3RncmVzOng6NzA6NzA6Oi92YXIvbGliL3Bvc3RncmVzcWw6L2Jpbi9zaApudXQ6eDo4NDo4NDpudXQ6L3Zhci9zdGF0ZS9udXQ6L3NiaW4vbm9sb2dpbgpjeXJ1czp4Ojg1OjEyOjovdXNyL2N5cnVzOi9zYmluL25vbG9naW4KdnBvcG1haWw6eDo4OTo4OTo6L3Zhci92cG9wbWFpbDovc2Jpbi9ub2xvZ2luCm50cDp4OjEyMzoxMjM6TlRQOi92YXIvZW1wdHk6L3NiaW4vbm9sb2dpbgpzbW1zcDp4OjIwOToyMDk6c21tc3A6L3Zhci9zcG9vbC9tcXVldWU6L3NiaW4vbm9sb2dpbgpndWVzdDp4OjQwNToxMDA6Z3Vlc3Q6L2Rldi9udWxsOi9zYmluL25vbG9naW4Kbm9ib2R5Ong6NjU1MzQ6NjU1MzQ6bm9ib2R5Oi86L3NiaW4vbm9sb2dpbgo=&#34;&#xA;         },&#xA;         {&#xA;            &#34;size_arg&#34;:&#34;1277&#34;&#xA;         }&#xA;      ],&#xA;      &#34;action&#34;:&#34;KPROBE_ACTION_POST&#34;&#xA;   },&#xA;   &#34;node_name&#34;:&#34;kind-control-plane&#34;,&#xA;   &#34;time&#34;:&#34;2022-05-26T22:05:25.962Z&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;/p&gt;&#xA;&lt;/details&gt; &#xA;&lt;p&gt;In addition to the Kubernetes Identity and process metadata from exec events, &lt;code&gt;process_kprobe&lt;/code&gt; events contain the arguments of the observed system call. In the above case they are&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;path&lt;/code&gt;: the observed file path&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bytes_arg&lt;/code&gt;: content of the observed file encoded in base64&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;size_arg&lt;/code&gt;: size of the observed file in bytes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To disable the &lt;code&gt;TracingPolicy&lt;/code&gt; run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl delete -f ./crds/examples/sys_write_follow_fd_prefix.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Network Observability&lt;/h3&gt; &#xA;&lt;p&gt;To view TCP connect events apply the example TCP connect &lt;code&gt;TracingPolicy&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl apply -f ./crds/examples/tcp-connect.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To start monitoring events in the &lt;code&gt;xwing&lt;/code&gt; pod run the Tetragon CLI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl logs -n kube-system ds/tetragon -c export-stdout -f | tetragon observe --namespace default --pod xwing&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In another terminal, start generate a TCP connection. Here we use curl.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl exec -it xwing -- curl http://cilium.io&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The output in the first terminal will capture the new connect and write,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;🚀 process default/xwing /usr/bin/curl http://cilium.io&#xA;🔌 connect default/xwing /usr/bin/curl tcp 10.244.0.6:34965 -&amp;gt; 104.198.14.52:80&#xA;📤 sendmsg default/xwing /usr/bin/curl tcp 10.244.0.6:34965 -&amp;gt; 104.198.14.52:80 bytes 73&#xA;🧹 close   default/xwing /usr/bin/curl tcp 10.244.0.6:34965 -&amp;gt; 104.198.14.52:80&#xA;💥 exit    default/xwing /usr/bin/curl http://cilium.io 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To disable the TracingPolicy run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl delete -f ./crds/examples/tcp-connect.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Privileged Execution&lt;/h3&gt; &#xA;&lt;p&gt;Tetragon also provides the ability to check process capabilities and kernel namespaces.&lt;/p&gt; &#xA;&lt;p&gt;As a first step let&#39;s enable visibility to capability and namespace changes via the configmap by setting &lt;code&gt;enable-process-cred&lt;/code&gt; and &lt;code&gt;enable-process-ns&lt;/code&gt; from &lt;code&gt;false&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl edit cm -n kube-system tetragon-config&#xA;# change &#34;enable-process-cred&#34; from &#34;false&#34; to &#34;true&#34;&#xA;# change &#34;enable-process-ns&#34; from &#34;false&#34; to &#34;true&#34;&#xA;# then save and exit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Restart the Tetragon daemonset:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;kubectl rollout restart -n kube-system ds/tetragon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As a second step, let&#39;s start monitoring the Security Observability events from the privileged &lt;code&gt;test-pod&lt;/code&gt; workload:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl logs -n kube-system ds/tetragon -c export-stdout -f | tetragon observe --namespace default --pod test-pod&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In another terminal let&#39;s apply the privileged PodSpec:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl apply -f ./testdata/specs/testpod.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you observe the output in the first terminal, you can see the container start with &lt;code&gt;CAP_SYS_ADMIN&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;🚀 process default/test-pod /bin/sleep 365d                🛑 CAP_SYS_ADMIN&#xA;🚀 process default/test-pod /usr/bin/jq -r .bundle         🛑 CAP_SYS_ADMIN&#xA;🚀 process default/test-pod /usr/bin/cp /kind/product_name /kind/product_uuid /run/containerd/io.containerd.runtime.v2.task/k8s.io/7c7e513cd4d506417bc9d97dd9af670d94d9e84161c8c8 fdc9fa3a678289a59/rootfs/ 🛑 CAP_SYS_ADMIN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;BTF Requirement&lt;/h2&gt; &#xA;&lt;p&gt;Tetragon repository provides a &lt;a href=&#34;https://raw.githubusercontent.com/cilium/tetragon/main/Vagrantfile&#34;&gt;Vagrantfile&lt;/a&gt; that can be use to install a vagrant box for running Tetragon with BTF requirement. Other VM solutions work as well and many common Linux distributions now ship with BTF and do not require any extra work. To check if BTF is enabled on your Linux system check for the BTF file in the standard location,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ls /sys/kernel/btf/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run with &lt;a href=&#34;https://learn.hashicorp.com/tutorials/vagrant/getting-started-index?in=vagrant/getting-started&#34;&gt;vagrant&lt;/a&gt; we provide a standard VagrantFile with the required components enabled. Simply run,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; $ vagrant up&#xA; $ vagrant ssh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This should be sufficient to create a Kind cluster and run Tetragon.&lt;/p&gt; &#xA;&lt;h1&gt;Additional Resources&lt;/h1&gt; &#xA;&lt;h3&gt;Conference talks&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=bohnofE_dvw&#34;&gt;Uncovering a Sophisticated Kubernetes Attack in Real-Time&lt;/a&gt; - Jed Salazar &amp;amp; Natália Réka Ivánkó, KubeCon EU, 2020&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.oreilly.com/library/view/infrastructure-ops/0636920625377/video335775.html&#34;&gt;Uncovering a Sophisticated Kubernetes Attack in Real Time Part II.&lt;/a&gt; - Jed Salazar &amp;amp; Natália Réka Ivánkó, O&#39;Reilly Superstream Series, Infrastructure &amp;amp; Ops, 2021&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=agN68U8x1go&#34;&gt;Keeping your cluster safe from attacks with eBPF&lt;/a&gt; - Jed Salazar &amp;amp; Natália Réka Ivánkó, eBPF Summit, 2021&lt;/p&gt; &#xA;&lt;h3&gt;Book&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://isovalent.com/ebpf-security/&#34;&gt;Security Observability with eBPF&lt;/a&gt; - Jed Salazar &amp;amp; Natália Réka Ivánkó, OReilly, 2022&lt;/p&gt; &#xA;&lt;h3&gt;Blog posts&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://isovalent.com/blog/post/2021-11-container-escape&#34;&gt;Detecting a Container Escape with Cilium and eBPF&lt;/a&gt; - Natália Réka Ivánkó, 2021&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://isovalent.com/blog/post/2021-12-log4shell&#34;&gt;Detecting and Blocking log4shell with Isovalent Cilium Enterprise&lt;/a&gt; - Jed Salazar, 2021&lt;/p&gt; &#xA;&lt;h3&gt;Hands-on lab&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://isovalent.com/labs/&#34;&gt;Security Observability with eBPF and Tetragon&lt;/a&gt; - Natália Réka Ivánkó, Roland Wolters, Raphaël Pinson&lt;/p&gt; &#xA;&lt;h1&gt;Community&lt;/h1&gt; &#xA;&lt;h2&gt;Slack&lt;/h2&gt; &#xA;&lt;p&gt;Join the Tetragon &lt;a href=&#34;https://cilium.herokuapp.com/&#34;&gt;Slack channel&lt;/a&gt; to chat with developers, maintainers, and other users. This is a good first stop to ask questions and share your experiences.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>VirusTotal/yara</title>
    <updated>2022-05-29T02:04:57Z</updated>
    <id>tag:github.com,2022-05-29:/VirusTotal/yara</id>
    <link href="https://github.com/VirusTotal/yara" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The pattern matching swiss knife&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://gitter.im/VirusTotal/yara?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/VirusTotal/yara&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/plusvic/yara&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/7glqg19w4oolm7pr?svg=true&#34; alt=&#34;AppVeyor build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scan.coverity.com/projects/plusvic-yara&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/9057/badge.svg?flat=1&#34; alt=&#34;Coverity status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;YARA in a nutshell&lt;/h2&gt; &#xA;&lt;p&gt;YARA is a tool aimed at (but not limited to) helping malware researchers to identify and classify malware samples. With YARA you can create descriptions of malware families (or whatever you want to describe) based on textual or binary patterns. Each description, a.k.a. rule, consists of a set of strings and a boolean expression which determine its logic. Let&#39;s see an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yara&#34;&gt;rule silent_banker : banker&#xA;{&#xA;    meta:&#xA;        description = &#34;This is just an example&#34;&#xA;        threat_level = 3&#xA;        in_the_wild = true&#xA;&#xA;    strings:&#xA;        $a = {6A 40 68 00 30 00 00 6A 14 8D 91}&#xA;        $b = {8D 4D B0 2B C1 83 C0 27 99 6A 4E 59 F7 F9}&#xA;        $c = &#34;UVODFRYSIHLNWPEJXQZAKCBGMT&#34;&#xA;&#xA;    condition:&#xA;        $a or $b or $c&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above rule is telling YARA that any file containing one of the three strings must be reported as &lt;em&gt;silent_banker&lt;/em&gt;. This is just a simple example, more complex and powerful rules can be created by using wild-cards, case-insensitive strings, regular expressions, special operators and many other features that you&#39;ll find explained in &lt;a href=&#34;https://yara.readthedocs.org/&#34;&gt;YARA&#39;s documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;YARA is multi-platform, running on Windows, Linux and Mac OS X, and can be used through its command-line interface or from your own Python scripts with the yara-python extension.&lt;/p&gt; &#xA;&lt;h2&gt;Additional resources&lt;/h2&gt; &#xA;&lt;p&gt;Do you use GitHub for storing your YARA rules? &lt;a href=&#34;https://yara-ci.cloud.virustotal.com&#34;&gt;YARA-CI&lt;/a&gt; may be a useful addition to your toolbelt. This is GitHub application that provides continuous testing for your rules, helping you to identify common mistakes and false positives.&lt;/p&gt; &#xA;&lt;p&gt;If you plan to use YARA to scan compressed files (.zip, .tar, etc) you should take a look at &lt;a href=&#34;https://github.com/BayshoreNetworks/yextend&#34;&gt;yextend&lt;/a&gt;, a very helpful extension to YARA developed and open-sourced by Bayshore Networks.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, the guys from &lt;a href=&#34;https://inquest.net/&#34;&gt;InQuest&lt;/a&gt; have curated an awesome list of &lt;a href=&#34;https://github.com/InQuest/awesome-yara&#34;&gt;YARA-related stuff&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Who&#39;s using YARA&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://activecanopy.com/&#34;&gt;ActiveCanopy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.adlice.com/&#34;&gt;Adlice&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://otx.alienvault.com/&#34;&gt;AlienVault&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.avast.com/&#34;&gt;Avast&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.baesystems.com/home?r=ai&#34;&gt;BAE Systems&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.bayshorenetworks.com&#34;&gt;Bayshore Networks, Inc.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/airbnb/binaryalert&#34;&gt;BinaryAlert&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.blueliv.com&#34;&gt;Blueliv&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://talosintelligence.com/&#34;&gt;Cisco Talos Intelligence Group&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://claroty.com/continuous-threat-detection&#34;&gt;Claroty&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cloudina.co.uk&#34;&gt;Cloudina Security&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cofense.com&#34;&gt;Cofense&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.conix.fr&#34;&gt;Conix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.countercraft.eu&#34;&gt;CounterCraft&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cuckoosandbox/cuckoo&#34;&gt;Cuckoo Sandbox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cybertriage.com&#34;&gt;Cyber Triage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cybereason.com&#34;&gt;Cybereason&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://digitasecurity.com/product/uxprotect&#34;&gt;Digita Security&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dragos.com/platform/&#34;&gt;Dragos Platform&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dtexsystems.com&#34;&gt;Dtex Systems&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.eset.com&#34;&gt;ESET&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.estsecurity.com&#34;&gt;ESTsecurity&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.fidelissecurity.com/network-security-appliance/Fidelis-XPS&#34;&gt;Fidelis XPS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.fireeye.com&#34;&gt;FireEye, Inc.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.forcepoint.com&#34;&gt;Forcepoint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.fox-it.com&#34;&gt;Fox-IT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/EmersonElectricCo/fsf&#34;&gt;FSF&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.guidancesoftware.com/endpointsecurity&#34;&gt;Guidance Software&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://heroku.com&#34;&gt;Heroku&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hornetsecurity.com/en/&#34;&gt;Hornetsecurity&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://icsdefense.net/&#34;&gt;ICS Defense&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.inquest.net/&#34;&gt;InQuest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.joesecurity.org&#34;&gt;Joe Security&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.kaspersky.com&#34;&gt;Kaspersky Lab&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.knowbe4.com&#34;&gt;KnowBe4&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://koodous.com/&#34;&gt;Koodous&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lmco/laikaboss&#34;&gt;Laika BOSS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.lastline.com&#34;&gt;Lastline, Inc.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.libguestfs.org/&#34;&gt;libguestfs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://limacharlie.io/&#34;&gt;LimaCharlie&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://malpedia.caad.fkie.fraunhofer.de/&#34;&gt;Malpedia&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://malwation.com/&#34;&gt;Malwation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mcafee.com/atd&#34;&gt;McAfee Advanced Threat Defense&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.metaflows.com&#34;&gt;Metaflows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nbs-system.com/&#34;&gt;NBS System&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nextron-systems.com&#34;&gt;Nextron Systems&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nozominetworks.com&#34;&gt;Nozomi Networks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.osquery.io&#34;&gt;osquery&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.payload-security.com&#34;&gt;Payload Security&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://phishme.com/&#34;&gt;PhishMe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.picussecurity.com/&#34;&gt;Picus Security&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rada.re&#34;&gt;Radare2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.raytheoncyber.com/capabilities/products/sureview-threatprotection/&#34;&gt;Raytheon Cyber Products, Inc.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://redsocks.eu/&#34;&gt;RedSocks Security&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reversinglabs.com&#34;&gt;ReversingLabs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.emc.com/security/rsa-ecat.htm&#34;&gt;RSA ECAT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://scanii.com&#34;&gt;Scanii&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.secondwrite.com&#34;&gt;SecondWrite&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sonicwall.com/&#34;&gt;SonicWall&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.spamstopshere.com&#34;&gt;SpamStopsHere&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/spyre-project/spyre&#34;&gt;Spyre&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stoq.punchcyber.com&#34;&gt;stoQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sumologic.com&#34;&gt;SumoLogic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.tanium.com/&#34;&gt;Tanium&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.tenable.com/&#34;&gt;Tenable Network Security&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.digitrustgroup.com/&#34;&gt;The DigiTrust Group&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.threatconnect.com/&#34;&gt;ThreatConnect&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.threatstream.com&#34;&gt;ThreatStream, Inc.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/buffer/thug&#34;&gt;Thug&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.touchweb.fr&#34;&gt;TouchWeb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.trendmicro.com&#34;&gt;Trend Micro&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.virustotal.com/intelligence/&#34;&gt;VirusTotal Intelligence&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.vmray.com/&#34;&gt;VMRay&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.volexity.com/products-overview/volcano/&#34;&gt;Volexity&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.wewatchyourwebsite.com/&#34;&gt;We Watch Your Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://x64dbg.com&#34;&gt;x64dbg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Masood-M/YALIH&#34;&gt;YALIH&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Are you using it? Want to see your site listed here?&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>flipperdevices/flipperzero-firmware</title>
    <updated>2022-05-29T02:04:57Z</updated>
    <id>tag:github.com,2022-05-29:/flipperdevices/flipperzero-firmware</id>
    <link href="https://github.com/flipperdevices/flipperzero-firmware" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flipper Zero Firmware&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flipper Zero Firmware&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://flipperzero.one/discord&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/740930220399525928.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://habrastorage.org/webt/eo/m0/e4/eom0e4btudte7nrhnyic-laiog0.png&#34; alt=&#34;Show me the code&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Welcome to &lt;a href=&#34;https://flipperzero.one/&#34;&gt;Flipper Zero&lt;/a&gt;&#39;s Firmware repo! Our goal is to create nice and clean code with good documentation, to make it a pleasure for everyone to work with.&lt;/p&gt; &#xA;&lt;h1&gt;Clone the Repository&lt;/h1&gt; &#xA;&lt;p&gt;You should clone with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git clone --recursive https://github.com/flipperdevices/flipperzero-firmware.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Update firmware&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://update.flipperzero.one/&#34;&gt;Get Latest Firmware from Update Server&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Flipper Zero&#39;s firmware consists of two components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Core2 firmware set - proprietary components by ST: FUS + radio stack. FUS is flashed at factory and you should never update it.&lt;/li&gt; &#xA; &lt;li&gt;Core1 Firmware - HAL + OS + Drivers + Applications.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;They both must be flashed in order described.&lt;/p&gt; &#xA;&lt;h2&gt;With STLink&lt;/h2&gt; &#xA;&lt;h3&gt;Core1 Firmware&lt;/h3&gt; &#xA;&lt;p&gt;Prerequisites:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux / macOS&lt;/li&gt; &#xA; &lt;li&gt;Terminal&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-rm/downloads&#34;&gt;arm-gcc-none-eabi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;openocd&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;One liner: &lt;code&gt;make flash&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Core2 flashing procedures&lt;/h3&gt; &#xA;&lt;p&gt;Prerequisites:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux / macOS&lt;/li&gt; &#xA; &lt;li&gt;Terminal&lt;/li&gt; &#xA; &lt;li&gt;STM32_Programmer_CLI (v2.5.0) added to $PATH&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;One liner: &lt;code&gt;make flash_radio&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;With USB DFU&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download latest &lt;a href=&#34;https://update.flipperzero.one&#34;&gt;Firmware&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Reboot Flipper to Bootloader&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Press and hold &lt;code&gt;← Left&lt;/code&gt; + &lt;code&gt;↩ Back&lt;/code&gt; for reset&lt;/li&gt; &#xA; &lt;li&gt;Release &lt;code&gt;↩ Back&lt;/code&gt; and keep holding &lt;code&gt;← Left&lt;/code&gt; until blue LED lights up&lt;/li&gt; &#xA; &lt;li&gt;Release &lt;code&gt;← Left&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- ![Switch to DFU sequence](https://habrastorage.org/webt/uu/c3/g2/uuc3g2n36f2sju19rskcvjzjf6w.png) --&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Run &lt;code&gt;dfu-util -D full.dfu -a 0&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Build with Docker&lt;/h1&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://www.docker.com/get-started&#34;&gt;Docker Engine and Docker Compose&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Prepare the container:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compile everything&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker-compose exec dev make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check &lt;code&gt;dist/&lt;/code&gt; for build outputs.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;strong&gt;&lt;code&gt;flipper-z-{target}-full-{suffix}.dfu&lt;/code&gt;&lt;/strong&gt; to flash your device.&lt;/p&gt; &#xA;&lt;p&gt;If compilation fails, make sure all submodules are all initialized. Either clone with &lt;code&gt;--recursive&lt;/code&gt; or use &lt;code&gt;git submodule update --init --recursive&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Build on Linux/macOS&lt;/h1&gt; &#xA;&lt;h2&gt;macOS Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;Make sure you have &lt;a href=&#34;https://brew.sh&#34;&gt;brew&lt;/a&gt; and install all the dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew bundle --verbose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Linux Prerequisites&lt;/h2&gt; &#xA;&lt;h3&gt;gcc-arm-none-eabi&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;toolchain=&#34;gcc-arm-none-eabi-10.3-2021.10&#34;&#xA;toolchain_package=&#34;$toolchain-$(uname -m)-linux&#34;&#xA;&#xA;wget -P /opt &#34;https://developer.arm.com/-/media/Files/downloads/gnu-rm/10.3-2021.10/$toolchain_package.tar.bz2&#34;&#xA;&#xA;tar xjf /opt/$toolchain_package.tar.bz2 -C /opt&#xA;rm /opt/$toolchain_package.tar.bz2&#xA;&#xA;for file in /opt/$toolchain/bin/* ; do ln -s &#34;${file}&#34; &#34;/usr/bin/$(basename ${file})&#34; ; done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Optional dependencies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;openocd (debugging/flashing over SWD)&lt;/li&gt; &#xA; &lt;li&gt;heatshrink (compiling image assets)&lt;/li&gt; &#xA; &lt;li&gt;clang-format (code formatting)&lt;/li&gt; &#xA; &lt;li&gt;dfu-util (flashing over USB DFU)&lt;/li&gt; &#xA; &lt;li&gt;protobuf (compiling proto sources)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, to install them on Debian, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;apt update&#xA;apt install openocd clang-format-13 dfu-util protobuf-compiler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;heatshrink has to be compiled &lt;a href=&#34;https://github.com/atomicobject/heatshrink&#34;&gt;from sources&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Compile everything&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check &lt;code&gt;dist/&lt;/code&gt; for build outputs.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;strong&gt;&lt;code&gt;flipper-z-{target}-full-{suffix}.dfu&lt;/code&gt;&lt;/strong&gt; to flash your device.&lt;/p&gt; &#xA;&lt;h2&gt;Flash everything&lt;/h2&gt; &#xA;&lt;p&gt;Connect your device via ST-Link and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make whole&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Links&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Discord: &lt;a href=&#34;https://flipp.dev/discord&#34;&gt;flipp.dev/discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Website: &lt;a href=&#34;https://flipperzero.one&#34;&gt;flipperzero.one&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Kickstarter page: &lt;a href=&#34;https://www.kickstarter.com/projects/flipper-devices/flipper-zero-tamagochi-for-hackers&#34;&gt;kickstarter.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Forum: &lt;a href=&#34;https://forum.flipperzero.one/&#34;&gt;forum.flipperzero.one&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Project structure&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;applications&lt;/code&gt; - Applications and services used in firmware&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;assets&lt;/code&gt; - Assets used by applications and services&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;core&lt;/code&gt; - Furi Core: os level primitives and helpers&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;debug&lt;/code&gt; - Debug tool: GDB-plugins, SVD-file and etc&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docker&lt;/code&gt; - Docker image sources (used for firmware build automation)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;documentation&lt;/code&gt; - Documentation generation system configs and input files&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;firmware&lt;/code&gt; - Firmware source code&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lib&lt;/code&gt; - Our and 3rd party libraries, drivers and etc...&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make&lt;/code&gt; - Make helpers&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scripts&lt;/code&gt; - Supplementary scripts and python libraries home&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also pay attention to &lt;code&gt;ReadMe.md&lt;/code&gt; files inside of those directories.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Klipper3d/klipper</title>
    <updated>2022-05-29T02:04:57Z</updated>
    <id>tag:github.com,2022-05-29:/Klipper3d/klipper</id>
    <link href="https://github.com/Klipper3d/klipper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Klipper is a 3d-printer firmware&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Welcome to the Klipper project!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.klipper3d.org/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Klipper3d/klipper/master/docs/img/klipper-logo-small.png&#34; alt=&#34;Klipper&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.klipper3d.org/&#34;&gt;https://www.klipper3d.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Klipper is a 3d-Printer firmware. It combines the power of a general purpose computer with one or more micro-controllers. See the &lt;a href=&#34;https://www.klipper3d.org/Features.html&#34;&gt;features document&lt;/a&gt; for more information on why you should use Klipper.&lt;/p&gt; &#xA;&lt;p&gt;To begin using Klipper start by &lt;a href=&#34;https://www.klipper3d.org/Installation.html&#34;&gt;installing&lt;/a&gt; it.&lt;/p&gt; &#xA;&lt;p&gt;Klipper is Free Software. See the &lt;a href=&#34;https://raw.githubusercontent.com/Klipper3d/klipper/master/COPYING&#34;&gt;license&lt;/a&gt; or read the &lt;a href=&#34;https://www.klipper3d.org/Overview.html&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>MaJerle/stm32-usart-uart-dma-rx-tx</title>
    <updated>2022-05-29T02:04:57Z</updated>
    <id>tag:github.com,2022-05-29:/MaJerle/stm32-usart-uart-dma-rx-tx</id>
    <link href="https://github.com/MaJerle/stm32-usart-uart-dma-rx-tx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;STM32 examples for USART using DMA for efficient RX and TX transmission&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;STM32 UART DMA RX and TX&lt;/h1&gt; &#xA;&lt;p&gt;This application note contains explanation with examples for &lt;code&gt;2&lt;/code&gt; distinct topics:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Data reception with UART and DMA when application does not know size of bytes to receive in advance&lt;/li&gt; &#xA; &lt;li&gt;Data transmission with UART and DMA to avoid CPU stalling and use CPU for other purposes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;p&gt;Github supports ToC by default. It is available in the top-left corner of this document.&lt;/p&gt; &#xA;&lt;h2&gt;Abbreviations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DMA: Direct Memory Access controller in STM32&lt;/li&gt; &#xA; &lt;li&gt;UART: Universal Asynchronous Receiver Transmitter&lt;/li&gt; &#xA; &lt;li&gt;USART: Universal Synchronous Asynchronous Receiver Transmitter&lt;/li&gt; &#xA; &lt;li&gt;TX: Transmit&lt;/li&gt; &#xA; &lt;li&gt;RX: Receive&lt;/li&gt; &#xA; &lt;li&gt;HT: Half-Transfer Complete DMA event/flag&lt;/li&gt; &#xA; &lt;li&gt;TC: Transfer Complete DMA event/flag&lt;/li&gt; &#xA; &lt;li&gt;RTO: Receiver Timeout UART event/flag&lt;/li&gt; &#xA; &lt;li&gt;IRQ: Interrupt&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;General about UART&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;STM32 has peripherals such as USART, UART or LPUART. Difference between them is not relevant for this purpose since concept can be applied to all of them. In few words, USART supports synchronous operation on top of asynchronous (UART) and LPUART supports Low-Power operation in STOP mode. When synchronous mode or low-power mode is not used, USART, UART and LPUART can be consideted identical. For complete set of details, check product&#39;s reference manual and datasheet.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For the sake of this application note, we will only use term &lt;strong&gt;UART&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;UART in STM32 allows configurion using different transmit (&lt;code&gt;TX&lt;/code&gt;) and receive (&lt;code&gt;RX&lt;/code&gt;) modes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Polling mode (no DMA, no IRQ) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;P: Application is polling for status bits to check if any character has been transmitted/received and read it fast enough in order to not-miss any byte&lt;/li&gt; &#xA;   &lt;li&gt;P: Easy to implement, simply few code lines&lt;/li&gt; &#xA;   &lt;li&gt;C: Can easiy miss received data in complex application if CPU cannot read registers quickly enough&lt;/li&gt; &#xA;   &lt;li&gt;C: Works only for low baudrates, &lt;code&gt;9600&lt;/code&gt; or lower&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Interrupt mode (no DMA) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;P: UART triggers interrupt and CPU jumps to service routine to handle each received byte separately&lt;/li&gt; &#xA;   &lt;li&gt;P: Commonly used approach in embedded applications&lt;/li&gt; &#xA;   &lt;li&gt;P: Works well with common baudrates, &lt;code&gt;115200&lt;/code&gt;, up to &lt;code&gt;~921600&lt;/code&gt; bauds&lt;/li&gt; &#xA;   &lt;li&gt;C: Interrupt service routine is executed for every received character&lt;/li&gt; &#xA;   &lt;li&gt;C: May decrease system performance if interrupts are triggered for every character for high-speed baudrates&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;DMA mode &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;DMA is used to transfer data from USART RX data register to user memory on hardware level. No application interaction is needed at this point except processing received data by application once necessary&lt;/li&gt; &#xA;   &lt;li&gt;P: Transfer from USART peripheral to memory is done on hardware level without CPU interaction&lt;/li&gt; &#xA;   &lt;li&gt;P: Can work very easily with operating systems&lt;/li&gt; &#xA;   &lt;li&gt;P: Optimized for highest baudrates &lt;code&gt;&amp;gt; 1Mbps&lt;/code&gt; and low-power applications&lt;/li&gt; &#xA;   &lt;li&gt;P: In case of big bursts of data, increasing data buffer size can improve functionality&lt;/li&gt; &#xA;   &lt;li&gt;C: Number of bytes to transfer must be known in advance by DMA hardware&lt;/li&gt; &#xA;   &lt;li&gt;C: If communication fails, DMA may not notify application about all bytes transferred&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This article focuses only on &lt;em&gt;DMA mode&lt;/em&gt; for RX operation and explain how to handle unknown data length&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Every STM32 has at least one (&lt;code&gt;1&lt;/code&gt;) UART IP and at least one (&lt;code&gt;1&lt;/code&gt;) DMA controller available in its DNA. This is all we need for successful data transmission. Application uses default features to implement very efficient transmit system using DMA.&lt;/p&gt; &#xA;&lt;p&gt;While implementation happens to be pretty straight-forward for TX (set pointer to data, define its length and go) operation, this may not be the case for receive. Implementing DMA receive, application should understand number of received bytes to process by DMA before its considered &lt;em&gt;done&lt;/em&gt;. However, UART protocol does not offer such information (it could work with higher-level protocol, but that&#39;s way another story that we don&#39;t touch here. We assume we have to implement very reliable low-level communication protocol).&lt;/p&gt; &#xA;&lt;h2&gt;Idle Line or Receiver Timeout events&lt;/h2&gt; &#xA;&lt;p&gt;STM32s have capability in UART to detect when &lt;em&gt;RX&lt;/em&gt; line has not been active for period of time. This is achieved using &lt;code&gt;2&lt;/code&gt; methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;IDLE LINE event&lt;/em&gt;: Triggered when RX line has been in idle state (normally high state) for &lt;code&gt;1&lt;/code&gt; frame time, after last received byte. Frame time is based on baudrate. Higher baudrate means lower frame time for single byte.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;RTO (Receiver Timeout) event&lt;/em&gt;: Triggered when line has been in idle state for programmable time. It is fully configured by firmware.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Both events can trigger an interrupt which is an essential feature to allow effective receive operation&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Not all STM32 have &lt;em&gt;IDLE LINE&lt;/em&gt; or &lt;em&gt;RTO&lt;/em&gt; features available. When not available, examples concerning these features may not be used.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;An example: To transmit &lt;code&gt;1&lt;/code&gt; byte at &lt;code&gt;115200&lt;/code&gt; bauds, it takes approximately (for easier estimation) &lt;code&gt;~100us&lt;/code&gt;; for &lt;code&gt;3 bytes&lt;/code&gt; it would be &lt;code&gt;~300us&lt;/code&gt; in total. IDLE line event triggers an interrupt when line has been in idle state for &lt;code&gt;1&lt;/code&gt; frame time (in this case &lt;code&gt;100us&lt;/code&gt;), after third byte has been received.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MaJerle/stm32-usart-uart-dma-rx-tx/main/docs/idle_line_demo.png&#34; alt=&#34;IDLE LINE DEMO&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a real experiment demo using &lt;em&gt;STM32F4&lt;/em&gt; and &lt;em&gt;IDLE LINE&lt;/em&gt; event. After &lt;em&gt;IDLE event&lt;/em&gt; is triggered, data are echoed back (loopback mode):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Application receives &lt;code&gt;3&lt;/code&gt; bytes, takes approx &lt;code&gt;~300us&lt;/code&gt; at &lt;code&gt;115200&lt;/code&gt; bauds&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;RX&lt;/em&gt; goes to high state (yellow rectangle) and &lt;em&gt;UART RX&lt;/em&gt; detects it has been idle for at least &lt;code&gt;1&lt;/code&gt; frame time (approx &lt;code&gt;100us&lt;/code&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Width of yellow rectangle represents &lt;code&gt;1&lt;/code&gt; frame time&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;IDLE line&lt;/em&gt; interrupt is triggered at green arrow&lt;/li&gt; &#xA; &lt;li&gt;Application echoes data back from interrupt context&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;General about DMA&lt;/h2&gt; &#xA;&lt;p&gt;DMA in STM32 can be configured in &lt;code&gt;normal&lt;/code&gt; or &lt;code&gt;circular&lt;/code&gt; mode. For each mode, &lt;em&gt;DMA&lt;/em&gt; requires number of &lt;em&gt;elements&lt;/em&gt; to transfer before its events (half-transfer complete, transfer complete) are triggered.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Normal mode&lt;/em&gt;: DMA starts with data transfer, once it transfers all elements, it stops and sets enable bit to &lt;code&gt;0&lt;/code&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Application is using this mode when transmitting data&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Circular mode&lt;/em&gt;: DMA starts with transfer, once it transfers all elements (as written in corresponding length register), it starts from beginning of memory and transfers more &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Applicaton is using this mode when receiving data&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;While transfer is active, &lt;code&gt;2&lt;/code&gt; (among others) interrupts may be triggered:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Half-Transfer complete &lt;code&gt;HT&lt;/code&gt;&lt;/em&gt;: Triggers when DMA transfers half count of elements&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Transfer-Complete &lt;code&gt;TC&lt;/code&gt;&lt;/em&gt;: Triggers when DMA transfers all elements&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;When DMA operates in &lt;em&gt;circular&lt;/em&gt; mode, these interrupts are triggered periodically&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Number of elements to transfer by DMA hardware must be written to relevant DMA register before start of transfer&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Combine UART + DMA for data reception&lt;/h3&gt; &#xA;&lt;p&gt;Now it is time to understand which features to use to receive data with UART and DMA to offload CPU. As for the sake of this example, we use memory buffer array of &lt;code&gt;20&lt;/code&gt; bytes. DMA will transfer data received from UART to this buffer.&lt;/p&gt; &#xA;&lt;p&gt;Listed are steps to begin. Initial assumption is that UART has been initialized prior reaching this step, same for basic DMA setup, the rest:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Application writes &lt;code&gt;20&lt;/code&gt; to relevant DMA register for data length&lt;/li&gt; &#xA; &lt;li&gt;Application writes memory &amp;amp; peripheral addresses to relevant DMA registers&lt;/li&gt; &#xA; &lt;li&gt;Application sets DMA direction to &lt;em&gt;peripheral-to-memory&lt;/em&gt; mode&lt;/li&gt; &#xA; &lt;li&gt;Application puts DMA to &lt;em&gt;circular&lt;/em&gt; mode. This is to assure DMA does not stop transferring data after it reaches end of memory. Instead, it will roll over and continue with transferring possible more data from UART to memory&lt;/li&gt; &#xA; &lt;li&gt;Application enables DMA &amp;amp; UART in reception mode. Receive can not start &amp;amp; DMA will wait UART to receive first character and transmit it to array. This is done for every received byte&lt;/li&gt; &#xA; &lt;li&gt;Application is notified by DMA &lt;code&gt;HT&lt;/code&gt; event (or interrupt) after first &lt;code&gt;10&lt;/code&gt; have been transferred from UART to memory&lt;/li&gt; &#xA; &lt;li&gt;Application is notified by DMA &lt;code&gt;TC&lt;/code&gt; event (or interrupt) after &lt;code&gt;20&lt;/code&gt; bytes are transferred from UART to memory&lt;/li&gt; &#xA; &lt;li&gt;Application is notified by UART IDLE line (or RTO) in case of IDLE line or timeout detected on RX line&lt;/li&gt; &#xA; &lt;li&gt;Application needs to reach on all of these events for most efficient receive&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This configuration is important as we do not know length in advance. Application needs to assume it may be endless number of bytes received, therefore DMA must be operational endlessly.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;We have used &lt;code&gt;20&lt;/code&gt; bytes long array for demonstration purposes. In real app this size may need to be increased. It all depends on UART baudrate (higher speed, more data may be received in fixed window) and how fast application can process the received data (either using interrupt notification, RTOS, or polling mode)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Combine UART + DMA for data transmission&lt;/h3&gt; &#xA;&lt;p&gt;Everything gets simplier when application transmits data, length of data is known in advance and memory to transmit is ready. For the sake of this example, we use memory for &lt;code&gt;Helloworld&lt;/code&gt; message. In &lt;em&gt;C language&lt;/em&gt; it would be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;const char&#xA;hello_world_arr[] = &#34;HelloWorld&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Application writes number of bytes to transmit to relevant DMA register, that would be &lt;code&gt;strlen(hello_world_arr)&lt;/code&gt; or &lt;code&gt;10&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Application writes memory &amp;amp; peripheral addresses to relevant DMA registers&lt;/li&gt; &#xA; &lt;li&gt;Application sets DMA direction to &lt;em&gt;memory-to-peripheral&lt;/em&gt; mode&lt;/li&gt; &#xA; &lt;li&gt;Application sets DMA to &lt;em&gt;normal&lt;/em&gt; mode. This effectively disables DMA once all the bytes are successfully transferred&lt;/li&gt; &#xA; &lt;li&gt;Application enables DMA &amp;amp; UART in transmitter mode. Transmit starts immediately when UART requests first byte via DMA to be shifted to UART TX register&lt;/li&gt; &#xA; &lt;li&gt;Application is notified by &lt;code&gt;TC&lt;/code&gt; event (or interrupt) after all bytes have been transmitted from memory to UART via DMA&lt;/li&gt; &#xA; &lt;li&gt;DMA is stopped and application may prepare next transfer immediately&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Please note that &lt;code&gt;TC&lt;/code&gt; event is triggered before last UART byte has been fully transmitted over UART. That&#39;s because &lt;code&gt;TC&lt;/code&gt; event is part of DMA and not part of UART. It is triggered when DMA transfers all the bytes from point &lt;em&gt;A&lt;/em&gt; to point &lt;em&gt;B&lt;/em&gt;. That is, point &lt;em&gt;A&lt;/em&gt; for DMA is memory, point &lt;em&gt;B&lt;/em&gt; is UART data register. Now it is up to UART to clock out byte to GPIO pin&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;DMA HT/TC and UART IDLE combination details&lt;/h3&gt; &#xA;&lt;p&gt;This section describes &lt;code&gt;4&lt;/code&gt; possible cases and one additional which explains why &lt;em&gt;HT/TC&lt;/em&gt; events are necessary by application&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MaJerle/stm32-usart-uart-dma-rx-tx/master/docs/dma_events.svg?sanitize=true&#34; alt=&#34;DMA events&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Abbrevations used for the image:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;R&lt;/code&gt;: &lt;code&gt;R&lt;/code&gt;ead pointer, used by application to read data from memory. Later also used as &lt;code&gt;old_ptr&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;W&lt;/code&gt;: &lt;code&gt;W&lt;/code&gt;rite pointer, used by DMA to write next byte to. Increased every time DMA writes new byte. Later also used as &lt;code&gt;new_ptr&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;HT&lt;/code&gt;: &lt;code&gt;H&lt;/code&gt;alf-&lt;code&gt;T&lt;/code&gt;ransfer Complete event triggered by DMA&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TC&lt;/code&gt;: &lt;code&gt;T&lt;/code&gt;ransfer-&lt;code&gt;C&lt;/code&gt;omplete event - triggered by DMA&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;I&lt;/code&gt;: &lt;code&gt;I&lt;/code&gt;DLE line event - triggered by USART&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;DMA configuration:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Circular mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;20&lt;/code&gt; bytes data length &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Consequently &lt;code&gt;HT&lt;/code&gt; event gets triggered at &lt;code&gt;10&lt;/code&gt; bytes being transmitted&lt;/li&gt; &#xA;   &lt;li&gt;Consequently &lt;code&gt;TC&lt;/code&gt; event gets triggered at &lt;code&gt;20&lt;/code&gt; bytes being transmitted&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Possible cases during real-life execution:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Case &lt;em&gt;A&lt;/em&gt;: DMA transfers &lt;code&gt;10&lt;/code&gt; bytes. Application gets notification with &lt;code&gt;HT&lt;/code&gt; event and may process received data&lt;/li&gt; &#xA; &lt;li&gt;Case &lt;em&gt;B&lt;/em&gt;: DMA transfers next &lt;code&gt;10&lt;/code&gt; bytes. Application gets notification thanks to &lt;code&gt;TC&lt;/code&gt; event. Processing now starts from last known position until the end of memory &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;DMA is in circular mode, thus it will continue right from beginning of the buffer, on top of the picture&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Case &lt;em&gt;C&lt;/em&gt;: DMA transfers &lt;code&gt;10&lt;/code&gt; bytes, but not aligned with &lt;code&gt;HT&lt;/code&gt; nor &lt;code&gt;TC&lt;/code&gt; events &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Application gets notified with &lt;code&gt;HT&lt;/code&gt; event when first &lt;code&gt;6&lt;/code&gt; bytes are transfered. Processing may start from last known read location&lt;/li&gt; &#xA;   &lt;li&gt;Application receives &lt;code&gt;IDLE&lt;/code&gt; line event after next &lt;code&gt;4&lt;/code&gt; bytes are successfully transfered to memory&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Case &lt;em&gt;D&lt;/em&gt;: DMA transfers &lt;code&gt;10&lt;/code&gt; bytes in &lt;em&gt;overflow&lt;/em&gt; mode and but not aligned with &lt;code&gt;HT&lt;/code&gt; nor &lt;code&gt;TC&lt;/code&gt; events &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Application gets notification by &lt;code&gt;TC&lt;/code&gt; event when first &lt;code&gt;4&lt;/code&gt; bytes are transfered. Processing may start from last known read location&lt;/li&gt; &#xA;   &lt;li&gt;Application gets notification by &lt;code&gt;IDLE&lt;/code&gt; event after next &lt;code&gt;6&lt;/code&gt; bytes are transfered. Processing may start from beginning of buffer&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Case &lt;em&gt;E&lt;/em&gt;: Example what may happen when application relies only on &lt;code&gt;IDLE&lt;/code&gt; event &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If application receives &lt;code&gt;30&lt;/code&gt; bytes in burst, &lt;code&gt;10&lt;/code&gt; bytes get overwritten by DMA as application did not process it quickly enough&lt;/li&gt; &#xA;   &lt;li&gt;Application gets &lt;code&gt;IDLE&lt;/code&gt; line event once there is steady RX line for &lt;code&gt;1&lt;/code&gt; byte timeframe&lt;/li&gt; &#xA;   &lt;li&gt;Red part of data represents first &lt;code&gt;10&lt;/code&gt; received bytes from burst which were overwritten by last &lt;code&gt;10&lt;/code&gt; bytes in burst&lt;/li&gt; &#xA;   &lt;li&gt;Option to avoid such scenario is to poll for DMA changes quicker than burst of &lt;code&gt;20&lt;/code&gt; bytes take; or by using &lt;code&gt;TC&lt;/code&gt; and &lt;code&gt;HT&lt;/code&gt; events&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example code to read data from memory and process it, for cases &lt;em&gt;A-D&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;/**&#xA; * \brief           Check for new data received with DMA&#xA; *&#xA; * User must select context to call this function from:&#xA; * - Only interrupts (DMA HT, DMA TC, UART IDLE) with same preemption priority level&#xA; * - Only thread context (outside interrupts)&#xA; *&#xA; * If called from both context-es, exclusive access protection must be implemented&#xA; * This mode is not advised as it usually means architecture design problems&#xA; *&#xA; * When IDLE interrupt is not present, application must rely only on thread context,&#xA; * by manually calling function as quickly as possible, to make sure&#xA; * data are read from raw buffer and processed.&#xA; *&#xA; * Not doing reads fast enough may cause DMA to overflow unread received bytes,&#xA; * hence application will lost useful data.&#xA; *&#xA; * Solutions to this are:&#xA; * - Improve architecture design to achieve faster reads&#xA; * - Increase raw buffer size and allow DMA to write more data before this function is called&#xA; */&#xA;void&#xA;usart_rx_check(void) {&#xA;    /*&#xA;     * Set old position variable as static.&#xA;     *&#xA;     * Linker should (with default C configuration) set this variable to `0`.&#xA;     * It is used to keep latest read start position,&#xA;     * transforming this function to not being reentrant or thread-safe&#xA;     */&#xA;    static size_t old_pos;&#xA;    size_t pos;&#xA;&#xA;    /* Calculate current position in buffer and check for new data available */&#xA;    pos = ARRAY_LEN(usart_rx_dma_buffer) - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_5);&#xA;    if (pos != old_pos) {                       /* Check change in received data */&#xA;        if (pos &amp;gt; old_pos) {                    /* Current position is over previous one */&#xA;            /*&#xA;             * Processing is done in &#34;linear&#34; mode.&#xA;             *&#xA;             * Application processing is fast with single data block,&#xA;             * length is simply calculated by subtracting pointers&#xA;             *&#xA;             * [   0   ]&#xA;             * [   1   ] &amp;lt;- old_pos |------------------------------------|&#xA;             * [   2   ]            |                                    |&#xA;             * [   3   ]            | Single block (len = pos - old_pos) |&#xA;             * [   4   ]            |                                    |&#xA;             * [   5   ]            |------------------------------------|&#xA;             * [   6   ] &amp;lt;- pos&#xA;             * [   7   ]&#xA;             * [ N - 1 ]&#xA;             */&#xA;            usart_process_data(&amp;amp;usart_rx_dma_buffer[old_pos], pos - old_pos);&#xA;        } else {&#xA;            /*&#xA;             * Processing is done in &#34;overflow&#34; mode..&#xA;             *&#xA;             * Application must process data twice,&#xA;             * since there are 2 linear memory blocks to handle&#xA;             *&#xA;             * [   0   ]            |---------------------------------|&#xA;             * [   1   ]            | Second block (len = pos)        |&#xA;             * [   2   ]            |---------------------------------|&#xA;             * [   3   ] &amp;lt;- pos&#xA;             * [   4   ] &amp;lt;- old_pos |---------------------------------|&#xA;             * [   5   ]            |                                 |&#xA;             * [   6   ]            | First block (len = N - old_pos) |&#xA;             * [   7   ]            |                                 |&#xA;             * [ N - 1 ]            |---------------------------------|&#xA;             */&#xA;            usart_process_data(&amp;amp;usart_rx_dma_buffer[old_pos], ARRAY_LEN(usart_rx_dma_buffer) - old_pos);&#xA;            if (pos &amp;gt; 0) {&#xA;                usart_process_data(&amp;amp;usart_rx_dma_buffer[0], pos);&#xA;            }&#xA;        }&#xA;        old_pos = pos;                          /* Save current position as old for next transfers */&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Interrupt priorities are important&lt;/h3&gt; &#xA;&lt;p&gt;Thanks to Cortex-M NVIC&#39;s (Nested Vectored Interrupt Controller) flexibility, user can configure priority level for each of the NVIC interrupt lines; it has full control over execution profile for each of the interrupt lines separately.&lt;/p&gt; &#xA;&lt;p&gt;There are &lt;code&gt;2&lt;/code&gt; priority types in Cortex-M:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Preemption priority: Interrupt with higher logical priority level can preempt already running lower priority interrupt&lt;/li&gt; &#xA; &lt;li&gt;Subpriority: Interrupt with higher subpriority (but same preemption priority) will execute first when &lt;code&gt;2&lt;/code&gt; (or more) interrupt lines become active at the same time; such interrupt will also never stop currently executed interrupt (if any) by the CPU.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;STM32s have different interrupt lines (interrupt service routines later too) for DMA and UART, one for each peripheral and its priority could be software configurable.&lt;/p&gt; &#xA;&lt;p&gt;Function that gets called to process received data must keep position of &lt;em&gt;last read value&lt;/em&gt;, hence processing function is not thread-safe or reentrant and requires special attention.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Application must assure, DMA and UART interrupts utilize same preemption priority level. This is the only configuration to guarantee processing function never gets preempted by itself (DMA interrupt to preempty UART, or opposite), otherwise last-known read position may get corrupted and application will operate with wrong data.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Examples&lt;/h1&gt; &#xA;&lt;p&gt;Examples can be used as reference code to implement your own DMA TX and RX functionality.&lt;/p&gt; &#xA;&lt;p&gt;There are 2 sets of examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Examples for RX only &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Available in &lt;code&gt;projects&lt;/code&gt; folder with &lt;code&gt;usart_rx_&lt;/code&gt; prefix&lt;/li&gt; &#xA;   &lt;li&gt;DMA is used to receive data, polling is used to echo data back&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Examples for RX &amp;amp; TX &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;DMA is used to receive data and to transmit data back&lt;/li&gt; &#xA;   &lt;li&gt;It uses ring buffer to copy data from DMA buffer to application before it is sent back&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Common for all examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Developed in &lt;a href=&#34;https://www.st.com/en/development-tools/stm32cubeide.html&#34;&gt;STM32CubeIDE&lt;/a&gt; for easier evaluation on STM32 boards&lt;/li&gt; &#xA; &lt;li&gt;Fully developed using LL drivers for various STM32 families&lt;/li&gt; &#xA; &lt;li&gt;UART common configuration: &lt;code&gt;115200&lt;/code&gt; bauds, &lt;code&gt;1&lt;/code&gt; stop bit, no-parity&lt;/li&gt; &#xA; &lt;li&gt;DMA RX common configuration: Circular mode, &lt;code&gt;TC&lt;/code&gt; and &lt;code&gt;HT&lt;/code&gt; events enabled&lt;/li&gt; &#xA; &lt;li&gt;DMA TX common configuration: Normal mode, &lt;code&gt;TC&lt;/code&gt; event enabled&lt;/li&gt; &#xA; &lt;li&gt;All RX examples implement loop-back functionality. Every character received by UART and transfered by DMA is sent back to same UART&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;STM32 family&lt;/th&gt; &#xA;   &lt;th&gt;Board name&lt;/th&gt; &#xA;   &lt;th&gt;USART&lt;/th&gt; &#xA;   &lt;th&gt;STM32 TX&lt;/th&gt; &#xA;   &lt;th&gt;STM32 RX&lt;/th&gt; &#xA;   &lt;th&gt;RX DMA settings&lt;/th&gt; &#xA;   &lt;th&gt;TX DMA settings&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;STM32F1xx&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;BluePill-F103C8&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;USART1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PA9&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PA10&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;&lt;code&gt;DMA1&lt;/code&gt;, &lt;code&gt;Channel 5&lt;/code&gt;&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;STM32F4xx&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;NUCLEO-F413ZH&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;USART3&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PD8&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PD9&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;&lt;code&gt;DMA1&lt;/code&gt;, &lt;code&gt;Stream 1&lt;/code&gt;, &lt;code&gt;Channel 4&lt;/code&gt;&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;&lt;code&gt;DMA1&lt;/code&gt;, &lt;code&gt;Stream 3&lt;/code&gt;, &lt;code&gt;Channel 4&lt;/code&gt;&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;STM32G0xx&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;NUCLEO-G071RB&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;USART2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PA2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PA3&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;&lt;code&gt;DMA1&lt;/code&gt;, &lt;code&gt;Channel 1&lt;/code&gt;&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;STM32G4xx&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;NUCLEO-G474RE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;LPUART1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PA2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PA3&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;&lt;code&gt;DMA1&lt;/code&gt;, &lt;code&gt;Channel 1&lt;/code&gt;&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;STM32L4xx&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;NUCLEO-L432KC&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;USART2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PA2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PA15&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;&lt;code&gt;DMA1&lt;/code&gt;, &lt;code&gt;Channel 6&lt;/code&gt;, &lt;code&gt;Request 2&lt;/code&gt;&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;STM32H7xx&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;NUCLEO-H743ZI2*&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;USART3&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PD8&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PD9&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;&lt;code&gt;DMA1&lt;/code&gt;, &lt;code&gt;Stream 0&lt;/code&gt;&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;&lt;code&gt;DMA1&lt;/code&gt;, &lt;code&gt;Stream 1&lt;/code&gt;&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;STM32U5xx&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;NUCLEO-U575ZI-Q*&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;USART1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PA9&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PA10&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;&lt;code&gt;GPDMA1&lt;/code&gt;, &lt;code&gt;Channel 0&lt;/code&gt;&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;&lt;code&gt;GPDMA1&lt;/code&gt;, &lt;code&gt;Channel 1&lt;/code&gt;&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;It is possible to run H743 (single-core) examples on dual-core STM32H7 Nucleo boards, NUCLEO-H745 or NUCLEO-H755. Special care needs to be taken as dual-core H7 Nucleo boards use DCDC for MCU power hence application must check clock configuration in main file and uncomment code to enable SMPS.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Examples demonstrate different use cases for RX only or RX&amp;amp;TX combined.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Demos part of this repository are all based on Low-Level (LL) drivers to maximize user understanding - how to convert theory into practice. Some STM32Cube firmware packages include same example using HAL drivers too. Some of them are (with link to example; list is not exhausted) listed below. All examples are identified as &lt;em&gt;UART_ReceptionToIdle_CircularDMA&lt;/em&gt; - you can search for it in your local Cube firmware repository.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/STMicroelectronics/STM32CubeU5/tree/main/Projects/NUCLEO-U575ZI-Q/Examples/UART/UART_ReceptionToIdle_CircularDMA&#34;&gt;STM32U5 UART_ReceptionToIdle_CircularDMA&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/STMicroelectronics/STM32CubeL5/tree/master/Projects/NUCLEO-L552ZE-Q/Examples/UART/UART_ReceptionToIdle_CircularDMA&#34;&gt;STM32L5 UART_ReceptionToIdle_CircularDMA&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/STMicroelectronics/STM32CubeG4/tree/master/Projects/NUCLEO-G474RE/Examples/UART/UART_ReceptionToIdle_CircularDMA&#34;&gt;STM32G4 UART_ReceptionToIdle_CircularDMA&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/STMicroelectronics/STM32CubeF4/tree/master/Projects/STM32446E-Nucleo/Examples/UART/UART_ReceptionToIdle_CircularDMA&#34;&gt;STM32F4 UART_ReceptionToIdle_CircularDMA&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/STMicroelectronics/STM32CubeG0/tree/master/Projects/STM32G0C1E-EV/Examples/UART/UART_ReceptionToIdle_CircularDMA&#34;&gt;STM32G0 UART_ReceptionToIdle_CircularDMA&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/STMicroelectronics/STM32CubeL4/tree/master/Projects/NUCLEO-L476RG/Examples/UART/UART_ReceptionToIdle_CircularDMA&#34;&gt;STM32L4 UART_ReceptionToIdle_CircularDMA&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/STMicroelectronics/STM32CubeWB/tree/master/Projects/P-NUCLEO-WB55.Nucleo/Examples/UART/UART_ReceptionToIdle_CircularDMA&#34;&gt;STM32WB UART_ReceptionToIdle_CircularDMA&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Projects/NUCLEO-WL55JC/Examples/UART/UART_ReceptionToIdle_CircularDMA&#34;&gt;STM32WL UART_ReceptionToIdle_CircularDMA&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Examples for UART + DMA RX&lt;/h2&gt; &#xA;&lt;h3&gt;Polling for changes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DMA hardware takes care to transfer received data to memory&lt;/li&gt; &#xA; &lt;li&gt;Application must constantly poll for new changes in DMA registers and read received data quick enough to make sure DMA will not overwrite data in buffer&lt;/li&gt; &#xA; &lt;li&gt;Processing of received data is in thread mode (not in interrupt)&lt;/li&gt; &#xA; &lt;li&gt;P: Easy to implement&lt;/li&gt; &#xA; &lt;li&gt;P: No interrupts, no consideration of priority and race conditions&lt;/li&gt; &#xA; &lt;li&gt;P: Fits for devices without &lt;em&gt;USART IDLE&lt;/em&gt; line detection&lt;/li&gt; &#xA; &lt;li&gt;C: Application takes care of data periodically&lt;/li&gt; &#xA; &lt;li&gt;C: Not possible to put application to low-power mode (sleep mode)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Polling for changes with operating system&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Same as polling for changes but with dedicated thread in operating system to process data&lt;/li&gt; &#xA; &lt;li&gt;P: Easy to implement to RTOS systems, uses single thread without additional RTOS features (no mutexes, semaphores, memory queues)&lt;/li&gt; &#xA; &lt;li&gt;P: No interrupts, no consideration of priority and race conditions&lt;/li&gt; &#xA; &lt;li&gt;P: Data processing always &lt;em&gt;on-time&lt;/em&gt; with maximum delay given by thread delay, thus with known maximum latency between received character and processed time &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Unless system has higher priority threads&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;P: Fits for devices without &lt;em&gt;UART IDLE&lt;/em&gt; line detection&lt;/li&gt; &#xA; &lt;li&gt;C: Application takes care of data periodically&lt;/li&gt; &#xA; &lt;li&gt;C: Uses memory resources dedicated for separate thread for data processing&lt;/li&gt; &#xA; &lt;li&gt;C: Not possible to put application to low-power mode (sleep mode)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;UART IDLE line detection + DMA HT&amp;amp;TC interrupts&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Application gets notification by IDLE line detection or DMA TC/HT events&lt;/li&gt; &#xA; &lt;li&gt;Application has to process data only when it receives any of the &lt;code&gt;3&lt;/code&gt; interrupts&lt;/li&gt; &#xA; &lt;li&gt;P: Application does not need to poll for new changes&lt;/li&gt; &#xA; &lt;li&gt;P: Application receives interrupts on events&lt;/li&gt; &#xA; &lt;li&gt;P: Application may enter low-power modes to increase battery life (if operated on battery)&lt;/li&gt; &#xA; &lt;li&gt;C: Data are read (processed) in the interrupt. We strive to execute interrupt routine as fast as possible&lt;/li&gt; &#xA; &lt;li&gt;C: Long interrupt execution may break other compatibility in the application&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Processing of incoming data is from 2 interrupt vectors, hence it is important that they do not preempt each-other. Set both to the same preemption priority!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;USART Idle line detection + DMA HT&amp;amp;TC interrupts with RTOS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Application gets notification by IDLE line detection or DMA TC/HT events&lt;/li&gt; &#xA; &lt;li&gt;Application uses separate thread to process the data only when notified in one of interrupts&lt;/li&gt; &#xA; &lt;li&gt;P: Processing is not in the interrupt but in separate thread&lt;/li&gt; &#xA; &lt;li&gt;P: Interrupt only informs processing thread to process (or to wakeup)&lt;/li&gt; &#xA; &lt;li&gt;P: Operating system may put processing thread to blocked state while waiting for event&lt;/li&gt; &#xA; &lt;li&gt;C: Memory usage for separate thread + message queue (or semaphore)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This is the most preferred way to use and process UART received character&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Examples for UART DMA for TX (and optionally included RX)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Application is using DMA in normal mode to transfer data&lt;/li&gt; &#xA; &lt;li&gt;Application is always using ringbuffer between high-level write and low-level transmit operation&lt;/li&gt; &#xA; &lt;li&gt;DMA TC interrupt is triggered when transfer has finished. Application can then send more data&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Demo application for debug messages&lt;/h3&gt; &#xA;&lt;p&gt;This is a demo application available in &lt;code&gt;projects&lt;/code&gt; folder. Its purpose is to show how can application implement output of debug messages without drastically affect CPU performance. It is using DMA to transfer data (no CPU to wait for UART flags) and can achieve very high or very low data rates&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All debug messages from application are written to intermediate ringbuffer&lt;/li&gt; &#xA; &lt;li&gt;Application will try to start &amp;amp; configure DMA after every successfive write to ringbuffer&lt;/li&gt; &#xA; &lt;li&gt;If transfer is on-going, next start is configured from DMA TC interrupt&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As a result of this demo application for STM32F413-Nucleo board, observations are as following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Demo code sends &lt;code&gt;1581&lt;/code&gt; bytes every second at &lt;code&gt;115200&lt;/code&gt; bauds, which is approx &lt;code&gt;142ms&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;With DMA disabled, CPU load was &lt;code&gt;14%&lt;/code&gt;, in-line with time to transmit the data&lt;/li&gt; &#xA; &lt;li&gt;With DMA enabled, CPU load was &lt;code&gt;0%&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;DMA can be enabled/disabled with &lt;code&gt;USE_DMA_TX&lt;/code&gt; macro configuration in &lt;code&gt;main.c&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to use this repository&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;run &lt;code&gt;git clone --recurse-submodules https://github.com/MaJerle/stm32-usart-dma-rx-tx&lt;/code&gt; to clone repository including submodules&lt;/li&gt; &#xA; &lt;li&gt;run examples from &lt;code&gt;projects&lt;/code&gt; directory using &lt;a href=&#34;https://www.st.com/en/development-tools/stm32cubeide.html&#34;&gt;STM32CubeIDE IDE&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>AdAway/AdAway</title>
    <updated>2022-05-29T02:04:57Z</updated>
    <id>tag:github.com,2022-05-29:/AdAway/AdAway</id>
    <link href="https://github.com/AdAway/AdAway" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AdAway is a free and open source ad blocker for Android.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AdAway/AdAway/master/app/src/main/res/mipmap-mdpi/icon.png&#34; alt=&#34;AdAway logo&#34;&gt; AdAway&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/AdAway/AdAway/actions/workflows/android-ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/adaway/adaway/actions/workflows/android-ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/project/overview?id=org.adaway&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=org.adaway&amp;amp;metric=security_rating&#34; alt=&#34;Sonarcloud Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/AdAway/AdAway/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/adaway/adaway/total?logo=github&#34; alt=&#34;GitHub Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sponsors/PerfectSlayer&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/sponsors/perfectslayer?logo=github&#34; alt=&#34;GitHub Sponsors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AdAway/AdAway/master/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPL%20v3-blue.svg?sanitize=true&#34; alt=&#34;License: GPL v3&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;AdAway is an open source ad blocker for Android using the hosts file and local vpn.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AdAway/AdAway/master/metadata/en-US/phoneScreenshots/screenshot1.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AdAway/AdAway/master/metadata/en-US/phoneScreenshots/screenshot1.png&#34; alt=&#34;Home screen&#34; height=&#34;256&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AdAway/AdAway/master/metadata/en-US/phoneScreenshots/screenshot2.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AdAway/AdAway/master/metadata/en-US/phoneScreenshots/screenshot2.png&#34; alt=&#34;Preferences screen&#34; height=&#34;256&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AdAway/AdAway/master/metadata/en-US/phoneScreenshots/screenshot3.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AdAway/AdAway/master/metadata/en-US/phoneScreenshots/screenshot3.png&#34; alt=&#34;Root based ad blocker screen&#34; height=&#34;256&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AdAway/AdAway/master/metadata/en-US/phoneScreenshots/screenshot4.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AdAway/AdAway/master/metadata/en-US/phoneScreenshots/screenshot4.png&#34; alt=&#34;Backup and restore screen&#34; height=&#34;256&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AdAway/AdAway/master/metadata/en-US/phoneScreenshots/screenshot5.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AdAway/AdAway/master/metadata/en-US/phoneScreenshots/screenshot5.png&#34; alt=&#34;Help screen&#34; height=&#34;256&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For more information visit &lt;a href=&#34;https://adaway.org&#34;&gt;https://adaway.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;There are two kinds of release:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The preview builds: on the bleeding edge of development - for testers or adventurous&lt;/li&gt; &#xA; &lt;li&gt;The stable builds: ready for every day usage - for end users&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Preview builds&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Requirements:&lt;/strong&gt; Android 8 &lt;em&gt;Oreo&lt;/em&gt; or above&lt;/p&gt; &#xA;&lt;p&gt;For users with bugs, there may be preview builds available from the &lt;a href=&#34;https://forum.xda-developers.com/showthread.php?t=2190753&#34;&gt;XDA development thread&lt;/a&gt; and &lt;a href=&#34;https://app.adaway.org/beta.apk&#34;&gt;AdAway official website&lt;/a&gt;. It is recommended to try those builds to see if your issue is resolved before creating an issue. The preview builds may contain bug fixes or new features for new android versions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.adaway.org/beta.apk&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AdAway/AdAway/master/Resources/get-it-on-adaway.png&#34; alt=&#34;Get it on official AdAway website&#34; height=&#34;80&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://forum.xda-developers.com/showthread.php?t=2190753&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AdAway/AdAway/master/Resources/XDADevelopers.png&#34; raw=&#34;true&#34; alt=&#34;Get it on XDA forum&#34; height=&#34;60&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Stable builds&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Requirements:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android Android 8 &lt;em&gt;Oreo&lt;/em&gt; or above&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After preview builds have been tested by the more technical or responsive community within the forums, we will then post the stable build to F-Droid.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.adaway.org/adaway.apk&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AdAway/AdAway/master/Resources/get-it-on-adaway.png&#34; alt=&#34;Get it on official AdAway website&#34; height=&#34;80&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://f-droid.org/app/org.adaway&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AdAway/AdAway/master/Resources/get-it-on-fdroid.png&#34; raw=&#34;true&#34; alt=&#34;Get it on F-Droid&#34; height=&#34;80&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For devices older than Android 8 &lt;em&gt;Oreo&lt;/em&gt;, use the version 4 of AdAway.&lt;/p&gt; &#xA;&lt;h2&gt;Get Host File Sources&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/AdAway/AdAway/wiki&#34;&gt;Wiki&lt;/a&gt;, in particular the page &lt;a href=&#34;https://github.com/AdAway/AdAway/wiki/HostsSources&#34;&gt;HostsSources&lt;/a&gt; for an assorted list of sources you can use in AdAway. Add the ones you like to the AdAway &#34;Hosts sources&#34; section.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Help&lt;/h2&gt; &#xA;&lt;p&gt;You can post &lt;a href=&#34;https://github.com/AdAway/AdAway/issues&#34;&gt;Issues&lt;/a&gt; here or obtain more detailed community support via the &lt;a href=&#34;http://forum.xda-developers.com/showthread.php?t=2190753&#34;&gt;XDA developer thread&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;You want to be involved in the project? Welcome onboard!&lt;br&gt; Check &lt;a href=&#34;https://raw.githubusercontent.com/AdAway/AdAway/master/CONTRIBUTING.md&#34;&gt;the contributing guide&lt;/a&gt; to learn how to report bugs, suggest features and make you first code contribution &lt;span&gt;👍&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are looking for translating the application in your language, &lt;a href=&#34;https://raw.githubusercontent.com/AdAway/AdAway/master/TRANSLATING.md&#34;&gt;the translating guide&lt;/a&gt; is for you.&lt;/p&gt; &#xA;&lt;h2&gt;Project Status&lt;/h2&gt; &#xA;&lt;p&gt;AdAway is actively developed by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bruce Bujon (&lt;a href=&#34;https://github.com/PerfectSlayer&#34;&gt;@PerfectSlayer&lt;/a&gt;) - Developer&lt;br&gt; &lt;a href=&#34;https://paypal.me/BruceBUJON&#34;&gt;PayPal&lt;/a&gt; | &lt;a href=&#34;https://github.com/sponsors/PerfectSlayer&#34;&gt;GitHub Sponsorship&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Daniel Mönch (&lt;a href=&#34;https://github.com/Vankog&#34;&gt;@Vankog&lt;/a&gt;) - Translations&lt;/li&gt; &#xA; &lt;li&gt;Jawz101 (&lt;a href=&#34;https://github.com/jawz101&#34;&gt;@jawz101&lt;/a&gt;) - Hosts list&lt;/li&gt; &#xA; &lt;li&gt;Anxhelo Lushka (&lt;a href=&#34;https://github.com/AnXh3L0&#34;&gt;@AnXh3L0&lt;/a&gt;) - Web site&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We do not forget the past maintainers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dāvis Mošenkovs (&lt;a href=&#34;https://github.com/DavisNT&#34;&gt;@DavisNT&lt;/a&gt;) - Developer&lt;br&gt; &lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;amp;business=5GUHNXYE58RZS&amp;amp;lc=US&amp;amp;item_name=AdAway%20Donation&amp;amp;no_note=0&amp;amp;no_shipping=1&#34;&gt;Paypal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0-kaladin&#34;&gt;@0-kaladin&lt;/a&gt; - Developer and XDA OP&lt;/li&gt; &#xA; &lt;li&gt;Sanjay Govind (&lt;a href=&#34;https://github.com/sanjay900&#34;&gt;@sanjay900&lt;/a&gt;) - Developer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And we thanks a lot the original author:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dominik Schürmann (&lt;a href=&#34;https://github.com/dschuermann&#34;&gt;@dschuermann&lt;/a&gt;) - Original developer&lt;br&gt; &lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;amp;business=android%40schuermann.eu&amp;amp;lc=US&amp;amp;item_name=AdAway%20Donation&amp;amp;no_note=0&amp;amp;no_shipping=1&amp;amp;currency_code=EUR&#34;&gt;Paypal&lt;/a&gt; | &lt;a href=&#34;https://flattr.com/thing/369138/AdAway-Ad-blocker-for-Android&#34;&gt;Flattr&lt;/a&gt; | BTC: &lt;code&gt;173kZxbkKuvnF5fa5b7t21kqU5XfEvvwTs&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Permissions&lt;/h2&gt; &#xA;&lt;p&gt;AdAway requires the following permissions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;INTERNET&lt;/code&gt; to download hosts files and application updates. It can send bug reports and telemetry &lt;a href=&#34;https://github.com/AdAway/AdAway/wiki/Telemetry&#34;&gt;if the user wants to (opt-in only)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ACCESS_NETWORK_STATE&lt;/code&gt; to restart VPN on network connection change&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;RECEIVE_BOOT_COMPLETED&lt;/code&gt; to start the VPN on boot&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FOREGROUND_SERVICE&lt;/code&gt; to run the VPN service in foreground&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;REQUEST_INSTALL_PACKAGES&lt;/code&gt; to update the application using the builtin updater&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;QUERY_ALL_PACKAGES&lt;/code&gt; to let the user pick the applications to exclude from VPN&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Licenses&lt;/h2&gt; &#xA;&lt;p&gt;AdAway is licensed under the GPLv3+.&lt;br&gt; The file LICENSE includes the full license text. For more details, check &lt;a href=&#34;https://raw.githubusercontent.com/AdAway/AdAway/master/LICENSE.md&#34;&gt;the license notes&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>valinet/ExplorerPatcher</title>
    <updated>2022-05-29T02:04:57Z</updated>
    <id>tag:github.com,2022-05-29:/valinet/ExplorerPatcher</id>
    <link href="https://github.com/valinet/ExplorerPatcher" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This project aims to enhance the working environment on Windows&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ExplorerPatcher&lt;/h1&gt; &#xA;&lt;p&gt;This project aims to enhance the working environment on Windows.&lt;/p&gt; &#xA;&lt;p&gt;PayPal donations: &lt;a href=&#34;https://www.paypal.com/donate?business=valentingabrielradu%40gmail.com&amp;amp;no_recurring=0&amp;amp;item_name=ExplorerPatcher&amp;amp;currency_code=EUR&#34;&gt;here&lt;/a&gt; or using e-mail address &lt;a href=&#34;mailto:valentingabrielradu@gmail.com&#34;&gt;valentingabrielradu@gmail.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/valinet/ExplorerPatcher/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Feature summary&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Choose between Windows 11 or Windows 10 taskbar (with labels support, small icons and lots of customization).&lt;/li&gt; &#xA; &lt;li&gt;Disable Windows 11 context menu and command bar in File Explorer and more.&lt;/li&gt; &#xA; &lt;li&gt;Open Start to All apps by default, choose number of frequent apps to show, display on active monitor and more.&lt;/li&gt; &#xA; &lt;li&gt;Choose between the Windows 11, Windows 10 and Windows NT Alt-Tab window switcher with customization.&lt;/li&gt; &#xA; &lt;li&gt;Lots of quality of life improvements for the shell, like: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Skin tray menus to match Windows style, make them behave like flyouts and center them relative to the icon.&lt;/li&gt; &#xA;   &lt;li&gt;Choose action when left and/or right clicking the network icon.&lt;/li&gt; &#xA;   &lt;li&gt;Revert to the Windows 7 search box in File Explorer, or disable Windows Search altogether.&lt;/li&gt; &#xA;   &lt;li&gt;Disable immersive menus and use mitigations that help you run the real classic theme without glitches.&lt;/li&gt; &#xA;   &lt;li&gt;Learn more about all the functionality offered by this program starting with this article in the wiki, &lt;a href=&#34;https://github.com/valinet/ExplorerPatcher/wiki/All-features&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some features may not be available on Windows 10.&lt;/p&gt; &#xA;&lt;h2&gt;How to?&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the latest version of the &lt;a href=&#34;https://github.com/valinet/ExplorerPatcher/releases/latest/download/ep_setup.exe&#34;&gt;setup program&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run the installer. It will automatically prompt for elevation, after which it will install the necessary files.&lt;/li&gt; &#xA; &lt;li&gt;When done, you will be greeted with the familiar Windows 10 taskbar. To customize the options offered by the program, right click the taskbar and choose &#34;Properties&#34;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;That&#39;s it. It&#39;s that simple.&lt;/p&gt; &#xA;&lt;h2&gt;What next?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Consult the &lt;a href=&#34;https://github.com/valinet/ExplorerPatcher/wiki&#34;&gt;wiki&lt;/a&gt; - this is highly recommended. There you will find information about more advanced tasks, modes of operation and features offered by this patcher.&lt;/li&gt; &#xA; &lt;li&gt;Get familiar with most of the features offered by this patcher &lt;a href=&#34;https://github.com/valinet/ExplorerPatcher/wiki/All-features&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Learn how to manage updates and what to expect from new versions and new Windows builds &lt;a href=&#34;https://github.com/valinet/ExplorerPatcher/wiki/Configure-updates&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Have a question? Consult the &lt;a href=&#34;https://github.com/valinet/ExplorerPatcher/wiki/Frequently-asked-questions&#34;&gt;Frequently Asked Questions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Some other question? Open a thread in &lt;a href=&#34;https://github.com/valinet/ExplorerPatcher/discussions&#34;&gt;Discussions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Found a bug, have an issue or a problem with the application? Read &lt;a href=&#34;https://github.com/valinet/ExplorerPatcher/wiki/Reporting-problems&#34;&gt;here&lt;/a&gt; what to do next.&lt;/li&gt; &#xA; &lt;li&gt;I highly encourage you to check out the &lt;a href=&#34;https://github.com/valinet/ExplorerPatcher/tree/master&#34;&gt;source code&lt;/a&gt; and tinker with it. I am open to merging new features, enhancements and fixes; also, I think it provides good insights on topics of interests in this area.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Known issues&lt;/h2&gt; &#xA;&lt;p&gt;Items marked with &#34;bug&#34; that are still &#34;Open&#34; represent known issues. Active work is undergone regarding an item if it is additionally marked with &#34;investigating&#34;. Help is especially required for items marked with &#34;help wanted&#34;. Consult the list in &lt;a href=&#34;https://github.com/valinet/ExplorerPatcher/issues&#34;&gt;Issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Uninstalling&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &#34;Programs and Features&#34; in Control Panel, or &#34;Apps and features&#34; in the Settings app or&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;ep_setup.exe /uninstall&lt;/code&gt; or&lt;/li&gt; &#xA; &lt;li&gt;Rename &lt;code&gt;ep_setup.exe&lt;/code&gt; to &lt;code&gt;ep_uninstall.exe&lt;/code&gt; and run that.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Updating&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The program features built-in updates: go to &#34;Properties&#34; - &#34;Updates&#34; to configure, check for and install the latest updates. Learn more &lt;a href=&#34;https://github.com/valinet/ExplorerPatcher/wiki/Configure-updates&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Download the latest version&#39;s setup file and simply run it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;More information&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/valinet/ExplorerPatcher/wiki/How-does-it-work&#34;&gt;How does this work?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/valinet/ExplorerPatcher/wiki/Antivirus-false-positives&#34;&gt;About antivirus false positives&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/valinet/ExplorerPatcher/wiki/Compiling&#34;&gt;Compiling&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>curl/curl</title>
    <updated>2022-05-29T02:04:57Z</updated>
    <id>tag:github.com,2022-05-29:/curl/curl</id>
    <link href="https://github.com/curl/curl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A command line tool and library for transferring data with URL syntax, supporting DICT, FILE, FTP, FTPS, GOPHER, GOPHERS, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, MQTT, POP3, POP3S, RTMP, RTMPS, RTSP, SCP, SFTP, SMB, SMBS, SMTP, SMTPS, TELNET and TFTP. libcurl offers a myriad of powerful features&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://curl.se/logo/curl-logo.svg?sanitize=true&#34; alt=&#34;curl logo&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/63&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/63/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scan.coverity.com/projects/curl&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/curl/badge.svg?sanitize=true&#34; alt=&#34;Coverity passed&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/curlorg/curl&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/l1vv31029huhf4g4?svg=true&#34; alt=&#34;AppVeyor Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/daniel0244/curl/_build/latest?definitionId=1&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/daniel0244/curl/_apis/build/status/curl.curl?branchName=master&#34; alt=&#34;Azure DevOps Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cirrus-ci.com/github/curl/curl&#34;&gt;&lt;img src=&#34;https://api.cirrus-ci.com/github/curl/curl.svg?branch=master&#34; alt=&#34;Cirrus Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/curl/curl/master/#backers&#34;&gt;&lt;img src=&#34;https://opencollective.com/curl/backers/badge.svg?sanitize=true&#34; alt=&#34;Backers on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/curl/curl/master/#sponsors&#34;&gt;&lt;img src=&#34;https://opencollective.com/curl/sponsors/badge.svg?sanitize=true&#34; alt=&#34;Sponsors on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/curl/curl/context:cpp&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/grade/cpp/g/curl/curl.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;Language Grade: C/C++&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&amp;amp;can=1&amp;amp;q=proj:curl&#34;&gt;&lt;img src=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/badges/curl.svg?sanitize=true&#34; alt=&#34;Fuzzing Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Curl is a command-line tool for transferring data specified with URL syntax. Find out how to use curl by reading &lt;a href=&#34;https://curl.se/docs/manpage.html&#34;&gt;the curl.1 man page&lt;/a&gt; or &lt;a href=&#34;https://curl.se/docs/manual.html&#34;&gt;the MANUAL document&lt;/a&gt;. Find out how to install Curl by reading &lt;a href=&#34;https://curl.se/docs/install.html&#34;&gt;the INSTALL document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;libcurl is the library curl is using to do its job. It is readily available to be used by your software. Read &lt;a href=&#34;https://curl.se/libcurl/c/libcurl.html&#34;&gt;the libcurl.3 man page&lt;/a&gt; to learn how.&lt;/p&gt; &#xA;&lt;p&gt;You can find answers to the most frequent questions we get in &lt;a href=&#34;https://curl.se/docs/faq.html&#34;&gt;the FAQ document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Study &lt;a href=&#34;https://curl.se/docs/copyright.html&#34;&gt;the COPYING file&lt;/a&gt; for distribution terms.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;If you have problems, questions, ideas or suggestions, please contact us by posting to a suitable &lt;a href=&#34;https://curl.se/mail/&#34;&gt;mailing list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;All contributors to the project are listed in &lt;a href=&#34;https://curl.se/docs/thanks.html&#34;&gt;the THANKS document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Commercial support&lt;/h2&gt; &#xA;&lt;p&gt;For commercial support, maybe private and dedicated help with your problems or applications using (lib)curl visit &lt;a href=&#34;https://curl.se/support.html&#34;&gt;the support page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Website&lt;/h2&gt; &#xA;&lt;p&gt;Visit the &lt;a href=&#34;https://curl.se/&#34;&gt;curl website&lt;/a&gt; for the latest news and downloads.&lt;/p&gt; &#xA;&lt;h2&gt;Git&lt;/h2&gt; &#xA;&lt;p&gt;To download the latest source from the Git server do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/curl/curl.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(you will get a directory named curl created, filled with the source code)&lt;/p&gt; &#xA;&lt;h2&gt;Security problems&lt;/h2&gt; &#xA;&lt;p&gt;Report suspected security problems via &lt;a href=&#34;https://hackerone.com/curl&#34;&gt;our HackerOne page&lt;/a&gt; and not in public!&lt;/p&gt; &#xA;&lt;h2&gt;Notice&lt;/h2&gt; &#xA;&lt;p&gt;Curl contains pieces of source code that is Copyright (c) 1998, 1999 Kungliga Tekniska Högskolan. This notice is included here to comply with the distribution terms.&lt;/p&gt; &#xA;&lt;h2&gt;Backers&lt;/h2&gt; &#xA;&lt;p&gt;Thank you to all our backers! 🙏 [&lt;a href=&#34;https://opencollective.com/curl#backer&#34;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/curl#backers&#34;&gt;&lt;img src=&#34;https://opencollective.com/curl/backers.svg?width=890&#34; alt=&#34;Open Collective Backers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Support this project by becoming a sponsor. Your logo will show up here with a link to your website. [&lt;a href=&#34;https://opencollective.com/curl#sponsor&#34;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;!-- markdown-link-check-disable --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/curl/sponsor/0/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/curl/sponsor/0/avatar.svg?sanitize=true&#34; alt=&#34;Open Collective Sponsor 0&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/curl/sponsor/1/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/curl/sponsor/1/avatar.svg?sanitize=true&#34; alt=&#34;Open Collective Sponsor 1&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/curl/sponsor/2/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/curl/sponsor/2/avatar.svg?sanitize=true&#34; alt=&#34;Open Collective Sponsor 2&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/curl/sponsor/3/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/curl/sponsor/3/avatar.svg?sanitize=true&#34; alt=&#34;Open Collective Sponsor 3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/curl/sponsor/4/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/curl/sponsor/4/avatar.svg?sanitize=true&#34; alt=&#34;Open Collective Sponsor 4&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/curl/sponsor/5/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/curl/sponsor/5/avatar.svg?sanitize=true&#34; alt=&#34;Open Collective Sponsor 5&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/curl/sponsor/6/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/curl/sponsor/6/avatar.svg?sanitize=true&#34; alt=&#34;Open Collective Sponsor 6&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/curl/sponsor/7/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/curl/sponsor/7/avatar.svg?sanitize=true&#34; alt=&#34;Open Collective Sponsor 7&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/curl/sponsor/8/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/curl/sponsor/8/avatar.svg?sanitize=true&#34; alt=&#34;Open Collective Sponsor 8&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/curl/sponsor/9/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/curl/sponsor/9/avatar.svg?sanitize=true&#34; alt=&#34;Open Collective Sponsor 9&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>simh/simh</title>
    <updated>2022-05-29T02:04:57Z</updated>
    <id>tag:github.com,2022-05-29:/simh/simh</id>
    <link href="https://github.com/simh/simh" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Computer History Simulation Project&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SIMH v4.0 - 19-01 Current&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://scan.coverity.com/projects/simh&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/11982/badge.svg?sanitize=true&#34; alt=&#34;Coverity Scan Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/simh/simh&#34;&gt;&lt;img src=&#34;https://travis-ci.org/simh/simh.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/simh/simh/history&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/github/simh/simh&#34; alt=&#34;AppVeyor&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simh/simh/master/#whats-new-since-simh-v39&#34;&gt;WHAT&#39;S NEW since simh v3.9&lt;/a&gt;&lt;br&gt; . . &lt;a href=&#34;https://raw.githubusercontent.com/simh/simh/master/#new-simulators&#34;&gt;New Simulators&lt;/a&gt;&lt;br&gt; . . &lt;a href=&#34;https://raw.githubusercontent.com/simh/simh/master/#simulator-front-panel-api&#34;&gt;Simulator Front Panel API&lt;/a&gt;&lt;br&gt; . . &lt;a href=&#34;https://raw.githubusercontent.com/simh/simh/master/#new-functionality&#34;&gt;New Functionality&lt;/a&gt;&lt;br&gt; . . . . &lt;a href=&#34;https://raw.githubusercontent.com/simh/simh/master/#ddcmp-synchronous-host-physical-device-support---framer&#34;&gt;DDCMP Synchronous host physical device support - framer&lt;/a&gt;&lt;br&gt; . . . . &lt;a href=&#34;https://raw.githubusercontent.com/simh/simh/master/#remote-console-facility&#34;&gt;Remote Console Facility&lt;/a&gt;&lt;br&gt; . . . . &lt;a href=&#34;https://raw.githubusercontent.com/simh/simh/master/#vaxpdp11-enhancements&#34;&gt;VAX/PDP11 Enhancements&lt;/a&gt;&lt;br&gt; . . . . &lt;a href=&#34;https://raw.githubusercontent.com/simh/simh/master/#pdp11-specific-enhancements&#34;&gt;PDP11 Specific Enhancements&lt;/a&gt;&lt;br&gt; . . . . &lt;a href=&#34;https://raw.githubusercontent.com/simh/simh/master/#pdp10-enhancements&#34;&gt;PDP10 Enhancements&lt;/a&gt;&lt;br&gt; . . . . &lt;a href=&#34;https://raw.githubusercontent.com/simh/simh/master/#sds-940-enhancements&#34;&gt;SDS 940 Enhancements&lt;/a&gt;&lt;br&gt; . . . . &lt;a href=&#34;https://raw.githubusercontent.com/simh/simh/master/#terminal-multiplexer-additions&#34;&gt;Terminal Multiplexer additions&lt;/a&gt;&lt;br&gt; . . . . &lt;a href=&#34;https://raw.githubusercontent.com/simh/simh/master/#video-display-capabilities&#34;&gt;Video Display Capabilities&lt;/a&gt;&lt;br&gt; . . . . &lt;a href=&#34;https://raw.githubusercontent.com/simh/simh/master/#asynchronous-io&#34;&gt;Asynchronous I/O&lt;/a&gt;&lt;br&gt; . . . . &lt;a href=&#34;https://raw.githubusercontent.com/simh/simh/master/#clocktimer-enhancements&#34;&gt;Clock/Timer Enhancements&lt;/a&gt;&lt;br&gt; . . . . &lt;a href=&#34;https://raw.githubusercontent.com/simh/simh/master/#ethernet-transport-enhancements&#34;&gt;Ethernet Transport Enhancements&lt;/a&gt;&lt;br&gt; . . . . &lt;a href=&#34;https://raw.githubusercontent.com/simh/simh/master/#disk-extensions&#34;&gt;Disk Extensions&lt;/a&gt;&lt;br&gt; . . . . &lt;a href=&#34;https://raw.githubusercontent.com/simh/simh/master/#embedded-rom-support&#34;&gt;Embedded ROM support&lt;/a&gt;&lt;br&gt; . . . . &lt;a href=&#34;https://raw.githubusercontent.com/simh/simh/master/#control-flow&#34;&gt;Control Flow&lt;/a&gt;&lt;br&gt; . . . . &lt;a href=&#34;https://raw.githubusercontent.com/simh/simh/master/#scriptable-interactions-with-running-simulators&#34;&gt;Scriptable interactions with running simulators&lt;/a&gt;&lt;br&gt; . . . . &lt;a href=&#34;https://raw.githubusercontent.com/simh/simh/master/#help&#34;&gt;Help&lt;/a&gt;&lt;br&gt; . . . . &lt;a href=&#34;https://raw.githubusercontent.com/simh/simh/master/#generic-scp-support-clock-coscheduling-as-opposed-to-per-simulator-implementations&#34;&gt;Generic SCP support Clock Coscheduling as opposed to per simulator implementations&lt;/a&gt;&lt;br&gt; . . . . &lt;a href=&#34;https://raw.githubusercontent.com/simh/simh/master/#new-scp-commands&#34;&gt;New SCP Commands&lt;/a&gt;&lt;br&gt; . . . . &lt;a href=&#34;https://raw.githubusercontent.com/simh/simh/master/#command-processing-enhancements&#34;&gt;Command Processing Enhancements&lt;/a&gt;&lt;br&gt; . . . . . . &lt;a href=&#34;https://raw.githubusercontent.com/simh/simh/master/#environment-variable-insertion&#34;&gt;Environment variable insertion&lt;/a&gt;&lt;br&gt; . . . . . . &lt;a href=&#34;https://raw.githubusercontent.com/simh/simh/master/#command-aliases&#34;&gt;Command aliases&lt;/a&gt;&lt;br&gt; . . . . . . &lt;a href=&#34;https://raw.githubusercontent.com/simh/simh/master/#do-command-argument-manipulation&#34;&gt;Do command argument manipulation&lt;/a&gt;&lt;br&gt; . . &lt;a href=&#34;https://raw.githubusercontent.com/simh/simh/master/#building-and-running-a-simulator&#34;&gt;Building and running a simulator&lt;/a&gt;&lt;br&gt; . . . . &lt;a href=&#34;https://raw.githubusercontent.com/simh/simh/master/#use-prebuilt-windows-simulators&#34;&gt;Use Prebuilt Windows Simulators&lt;/a&gt;&lt;br&gt; . . . . &lt;a href=&#34;https://raw.githubusercontent.com/simh/simh/master/#building-simulators-yourself&#34;&gt;Building simulators yourself&lt;/a&gt;&lt;br&gt; . . . . . . &lt;a href=&#34;https://raw.githubusercontent.com/simh/simh/master/#linuxosx-other-nix-platforms&#34;&gt;Linux/OSX other *nix platforms&lt;/a&gt;&lt;br&gt; . . . . . . . . &lt;a href=&#34;https://raw.githubusercontent.com/simh/simh/master/#build-dependencies&#34;&gt;Build Dependencies&lt;/a&gt;&lt;br&gt; . . . . . . . . . . &lt;a href=&#34;https://raw.githubusercontent.com/simh/simh/master/#os-x---dependencies&#34;&gt;OS X - Dependencies&lt;/a&gt;&lt;br&gt; . . . . . . . . . . &lt;a href=&#34;https://raw.githubusercontent.com/simh/simh/master/#linux---dependencies&#34;&gt;Linux - Dependencies&lt;/a&gt;&lt;br&gt; . . . . . . &lt;a href=&#34;https://raw.githubusercontent.com/simh/simh/master/#windows&#34;&gt;Windows&lt;/a&gt;&lt;br&gt; . . . . . . . . &lt;a href=&#34;https://raw.githubusercontent.com/simh/simh/master/#required-related-files&#34;&gt;Required related files&lt;/a&gt;&lt;br&gt; . . . . . . . . &lt;a href=&#34;https://raw.githubusercontent.com/simh/simh/master/#visual-studio-standard-or-express-2008-2010-2012-2013-or-visual-studio-community-2015-2017-2019&#34;&gt;Visual Studio (Standard or Express) 2008, 2010, 2012, 2013 or Visual Studio Community 2015, 2017, 2019&lt;/a&gt;&lt;br&gt; . . . . . . . . &lt;a href=&#34;https://raw.githubusercontent.com/simh/simh/master/#mingw32&#34;&gt;MinGW32&lt;/a&gt;&lt;br&gt; . . . . . . &lt;a href=&#34;https://raw.githubusercontent.com/simh/simh/master/#vms&#34;&gt;VMS&lt;/a&gt;&lt;br&gt; . . &lt;a href=&#34;https://raw.githubusercontent.com/simh/simh/master/#problem-reports&#34;&gt;Problem Reports&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;WHAT&#39;S NEW since simh v3.9&lt;/h2&gt; &#xA;&lt;h3&gt;New Simulators&lt;/h3&gt; &#xA;&lt;h4&gt;Seth Morabito has implemented a AT&amp;amp;T 3B2 simulator.&lt;/h4&gt; &#xA;&lt;h4&gt;Leonid Broukhis and Serge Vakulenko have implemented a simulator for the Soviet mainframe BESM-6 computer.&lt;/h4&gt; &#xA;&lt;h4&gt;Matt Burke has implemented new VAX model simulators:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;VAX-11/730&#xA;VAX-11/750&#xA;VAX 8200/8250&#xA;VAX 8600/8650&#xA;MicroVAX I &amp;amp; VAXstation I&#xA;MicroVAX II &amp;amp; VAXstation II &amp;amp; VAXstation II/GPX&#xA;rtVAX 1000 (or Industrial VAX 620)&#xA;MicroVAX 2000 &amp;amp; VAXstation 2000&#xA;MicroVAX 3100 M10/M20&#xA;MicroVAX 3100 M10e/M20e&#xA;InfoServer 100&#xA;InfoServer 150 VXT&#xA;VAXstation 3100 M30&#xA;VAXstation 3100 M38&#xA;VAXstation 3100 M76&#xA;VAXstation 4000 VLC&#xA;VAXstation 4000 M60&#xA;MicroVAX 3100 M80&#xA;InfoServer 1000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Howard Harte has implemented a Lincoln Labs TX-0 simulator.&lt;/h4&gt; &#xA;&lt;h4&gt;Gerardo Ospina has implemented a Manchester University SSEM (Small Scale Experimental Machine) simulator.&lt;/h4&gt; &#xA;&lt;h4&gt;Richard Cornwell has implemented a Burroughs B5500.&lt;/h4&gt; &#xA;&lt;h4&gt;Richard Cornwell has implemented the IBM 701, IBM 704, IBM 7010/1410, IBM 7070/7074, IBM 7080/702/705/7053 and IBM 7090/7094/709/704 simulators.&lt;/h4&gt; &#xA;&lt;h4&gt;Richard Cornwell has implemented the PDP6, PDP10-KA, PDP10-KI, PDP10-KL and PDP10-KS simulators. With the differences merely being some device name changes, the PDP10-KS should be compatible with Bob Supnik&#39;s original PDP10 simulator.&lt;/h4&gt; &#xA;&lt;h4&gt;Dave Bryan has implemented an HP-3000 Series III simulator.&lt;/h4&gt; &#xA;&lt;h4&gt;Updated AltairZ80 simulator from Peter Schorn.&lt;/h4&gt; &#xA;&lt;h4&gt;Updated HP2100 simulator from Dave Bryan.&lt;/h4&gt; &#xA;&lt;h4&gt;Sigma 5, 6 &amp;amp; 7 simulator from Bob Supnik&lt;/h4&gt; &#xA;&lt;h4&gt;Beta SAGE-II and PDQ-3 simulators from Holger Veit&lt;/h4&gt; &#xA;&lt;h4&gt;Intel Systems 8010 and 8020 simulators from Bill Beech&lt;/h4&gt; &#xA;&lt;h4&gt;CDC 1700 simulator from John Forecast&lt;/h4&gt; &#xA;&lt;h4&gt;Hans-Åke Lund has implemented an SCELBI (SCientic-ELectronics-BIology) simulator.&lt;/h4&gt; &#xA;&lt;h4&gt;IBM 650 simulator from Roberto Sancho Villa&lt;/h4&gt; &#xA;&lt;h4&gt;Jim Bevier has implemented a SEL32 simulator.&lt;/h4&gt; &#xA;&lt;h3&gt;New Host Platform support - HP-UX and AIX&lt;/h3&gt; &#xA;&lt;h3&gt;Simulator Front Panel API&lt;/h3&gt; &#xA;&lt;p&gt;The sim_frontpanel API provides a programmatic interface to start and control any simulator without any special additions to the simulator code.&lt;/p&gt; &#xA;&lt;h3&gt;New Functionality&lt;/h3&gt; &#xA;&lt;h4&gt;DDCMP Synchronous host physical device support - framer&lt;/h4&gt; &#xA;&lt;p&gt;Paul Koning has implemented a USB hardware device which can interface transport DDCMP packets across a synchronous line to physical host systems with native synchronous devices or other simulators using framer devices.&lt;/p&gt; &#xA;&lt;h4&gt;Remote Console Facility&lt;/h4&gt; &#xA;&lt;p&gt;A new capability has been added which allows a TELNET Connection to a user designated port so that some out of band commands can be entered to manipulate and/or adjust a running simulator. The commands which enable and control this capability are SET REMOTE TELNET=port, SET REMOTE CONNECTIONS=n, SET REMOTE TIMEOUT=seconds, and SHOW REMOTE.&lt;/p&gt; &#xA;&lt;p&gt;The remote console facility has two modes of operation: 1) single command mode. and 2) multiple command mode.&lt;br&gt; In single command mode you enter one command at a time and aren&#39;t concerned about what the simulated system is doing while you enter that command. The command is executed once you&#39;ve hit return. In multiple command mode you initiate your activities by entering the WRU character (usually ^E). This will suspend the current simulator execution. You then enter commands as needed and when you are done you enter a CONTINUE command. While entering Multiple Command commands, if you fail to enter a complete command before the timeout (specified by &#34;SET REMOTE TIMEOUT=seconds&#34;), a CONTINUE command is automatically processed and simulation proceeds.&lt;/p&gt; &#xA;&lt;p&gt;A subset of normal simh commands are available for use in remote console sessions. The Single Command Mode commands are: ATTACH, DETACH, PWD, SHOW, DIR, LS, ECHO, HELP The Multiple Command Mode commands are: EXAMINE, IEXAMINE, DEPOSIT, EVALUATE, ATTACH, DETACH, ASSIGN, DEASSIGN, STEP, CONTINUE, PWD, SAVE, SET, SHOW, DIR, LS, ECHO, HELP&lt;/p&gt; &#xA;&lt;p&gt;A remote console session will close when an EOF character is entered (i.e. ^D or ^Z).&lt;/p&gt; &#xA;&lt;h4&gt;VAX/PDP11 Enhancements&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;RQ has new disk types: RC25, RCF25, RA80&#xA;RQ device has a settable controller type (RQDX3, UDA50, KLESI, RUX50)&#xA;RQ disks default to Autosize without regard to disk type&#xA;RQ disks on PDP11 can have RAUSER size beyond 2GB&#xA;DMC11/DMR11 DDCMP DECnet device simulation.  Up to 8 DMC devices are supported.  Packet transport is via TCP or UDP connections.&#xA;KDP11 on PDP11 for DECnet&#xA;DUP11 on PDP11 for DECnet connectivity to talk to DMC, KDP or other DUP devices&#xA;CH11 on PDP11 and VAX780 for Chaosnet (from Lars Brinkhoff)&#xA;DZ on Unibus systems can have up to 256 ports (default of 32), on &#xA;    Qbus systems 128 port limit (default of 16).&#xA;DZ devices optionally support full modem control (and port speed settings &#xA;    when connected to serial ports).&#xA;TU58 device support for all PDP11 and VAX systems.&#xA;DHU11 (device VH) on Unibus systems now has 16 ports per multiplexer.&#xA;XQ devices (DEQNA, DELQA and DELQA-T) are bootable on Qbus PDP11 simulators&#xA;XQ and XU devices (DEQNA, DELQA, DELQA-T, DEUNA and DELQA) devices can now &#xA;    directly communicate to a remote device via UDP (i.e. a built-in HECnet bridge).&#xA;XQ and XU devices (DEQNA, DELQA, DELQA-T, DEUNA and DELQA) devices can now &#xA;    optionally throttle outgoing packets which is useful when communicating with&#xA;    legacy systems (real hardware) on a local LAN which can easily get over run &#xA;    when packets arrive too fast.&#xA;MicroVAX 3900 has QVSS (VCB01) board available.&#xA;MicroVAX 3900 and MicroVAX II have SET CPU AUTOBOOT option&#xA;MicroVAX 3900 has a SET CPU MODEL=(MicroVAX|VAXserver|VAXstation) command to change between system types&#xA;MicroVAX I has a SET CPU MODEL=(MicroVAX|VAXSTATION) command to change between system types&#xA;MicroVAX II has a SET CPU MODEL=(MicroVAX|VAXSTATION) command to change between system types&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;PDP11 Specific Enhancements&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;ROM (from Lars Brinkhoff) I/O page ROM support&#xA;NG (from Lars Brinkhoff) Knight vector display&#xA;DAZ (from Lars Brinkhoff) Dazzle Dart Input device&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;PDP10 Enhancements&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;KDP11 (from Timothe Litt) for DECnet connectivity to simulators with DMC, DUP or KDP devices&#xA;DMR11 for DECnet connectivity to simulators with DMC, DUP or KDP devices on TOPS10.&#xA;CH11 (from Lars Brinkhoff) Chaosnet interface.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;SDS 940 Enhancements&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;Support for SDS internal ASCII character encoding during display and data entry.&#xA;Allow breakpoints to be qualified by normal, monitor or user mode.&#xA;Fix CPU, RAD, MUX and I/O bugs that prevented SDS Time Share System Monitor and Executive from executing properly.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Terminal Multiplexer additions&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;Added support for TCP connections using IPv4 and/or IPv6.&#xA;Logging - Traffic going out individual lines can be optionally logged to &#xA;        files&#xA;Buffering - Traffic going to a multiplexor (or Console) line can &#xA;        optionally be buffered while a telnet session is not connected&#xA;        and the buffered contents will be sent out a newly connecting &#xA;        telnet session.  This allows a user to review what may have &#xA;        happened before they connect to that session.&#xA;&#xA;Serial Port support based on work by J David Bryan and Holger Veit&#xA;Serial Console Support&#xA;Separate TCP listening ports per line&#xA;Outgoing connections per line (virtual Null Modem cable).&#xA;Packet sending and reception semantics for simulated network device support using either TCP or UDP transport.&#xA;Input character rates reflect the natural character arrival time based on the line speed.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Video Display Capabilities&lt;/h4&gt; &#xA;&lt;p&gt;Added support for monochrome and color displays with optional keyboards and mice.&lt;br&gt; The VAXstation QVSS device (VCB01) and QDSS device (VCB02) simulations use these capabilities. Host platforms which have libSDL2 available can leverage this functionality.&lt;/p&gt; &#xA;&lt;h4&gt;Asynchronous I/O&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;* Disk and Tape I/O can be asynchronous.  Asynchronous support exists &#xA;  for pdp11_rq, pdp11_rp and pdp11_tq devices (used by VAX and PDP11 &#xA;  simulators).&#xA;* Multiplexer I/O (Telnet and/or Serial) can be asynchronous.  &#xA;  Asynchronous support exists for console I/O and most multiplexer &#xA;  devices.  (Still experimental - not currently by default)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Clock/Timer Enhancements&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;* Asynchronous clocks ticks exist to better support modern processors &#xA;  that have variable clock speeds.  The initial clock calibration model &#xA;  presumed a constant simulated instruction execution rate.  &#xA;  Modern processors have variable processor speeds which breaks this &#xA;  key assumption.  &#xA;* Strategies to make up for missed clock ticks are now available&#xA;  (independent of asynchronous tick generation).  These strategies&#xA;  generate catch-up clock ticks to keep the simulator passage of &#xA;  time consistent with wall clock time.  Simulator time while idling &#xA;  or throttling is now consistent.  Reasonable idling behavior is &#xA;  now possible without requiring that the host system clock tick be&#xA;  10ms or less.&#xA;* Simulator writers have access to timing services and explicit wall &#xA;  clock delays where appropriate.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Ethernet Transport Enhancements&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;* UDP packet transport.  Direct simulator connections to HECnet can be &#xA;  made without running a local packet bridge program.&#xA;* NAT packet transport.  Simulators which only speak TCP/IP (No DECnet)&#xA;  and want to communicate with their host systems and/or directly to &#xA;  the Internet can use NAT packet transport.  This also works for WiFi &#xA;  connected host systems.&#xA;* Packet Transmission Throttling.  When connected to a LAN which has &#xA;  legacy network adapters (DEQNA, DEUNA) on legacy systems, it is very&#xA;  easy for a simulated system to overrun the receiving capacity of the&#xA;  older systems.  Throttling of simulated traffic delivered to the LAN &#xA;  can be used to mitigate this problem.&#xA;* Reliable MAC address conflict detection.  &#xA;* Automatic unique default MAC address assignment.  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Disk Extensions&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;RAW Disk Access (including CDROM)&#xA;Virtual Disk Container files, including differencing disks&#xA;File System type detection to accurately autosize disks.&#xA;Recognized file systems are: DEC ODS1, DEC ODS2, DEC RT11, DEC RSTS, DEC RSX11, Ultrix Partitions, ISO 9660&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Tape Extensions&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;AWS format tape support&#xA;TAR format tape support&#xA;ANSI-VMS, ANSI-RSX11, ANSI-RSTS, ANSI-RT11 format tape support&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Embedded ROM support&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;Simulators which have boot commands which load constant files as part of &#xA;booting have those files imbedded into the simulator executable.  The &#xA;imbedded files are used if the normal boot file isn&#39;t found when the &#xA;simulator boots.  Specific examples are:&#xA;&#xA;&#x9;VAX (MicroVAX 3900 - ka655x.bin)&#xA;&#x9;VAX8600 (VAX 8600 - vmb.exe)&#xA;&#x9;VAX780 (VAX 11/780 - vmb.exe)&#xA;&#x9;VAX750 (VAX 11/750 - vmb.exe, ka750_old.bin, ka750_new.bin), &#xA;&#x9;VAX730 (VAX 11/730 - vmb.exe)&#xA;&#x9;VAX610 (MicroVAX I - ka610.bin)&#xA;&#x9;VAX620 (rtVAX 1000 - ka620.bin)&#xA;&#x9;VAX630 (MicroVAX II - ka630.bin)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Control Flow&lt;/h4&gt; &#xA;&lt;p&gt;The following extensions to the SCP command language without affecting prior behavior:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GOTO &amp;lt;Label&amp;gt;                 Command is now available.  Labels are lines &#xA;                             in which the first non whitespace character &#xA;                             is a &#34;:&#34;.  The target of a goto is the first &#xA;                             matching label in the current do command &#xA;                             file which is encountered.  Since labels &#xA;                             don&#39;t do anything else besides being the &#xA;                             targets of goto&#39;s, they could be used to &#xA;                             provide comments in do command files, for &#xA;                             example (&#34;:: This is a comment&#34;)&#xA;RETURN {status}              Return from the current do command file &#xA;                             execution with the specified status or&#xA;                             the status from the last executed command &#xA;                             if no status is specified.  Status can be&#xA;                             a number or a SCPE_&amp;lt;conditionname&amp;gt; name &#xA;                             string.&#xA;SET ON                       Enables error trapping for currently defined &#xA;                             traps (by ON commands)&#xA;SET NOON                     Disables error trapping for currently &#xA;                             defined traps (by ON commands)&#xA;ON &amp;lt;statusvalue&amp;gt; commandtoprocess{; additionalcommandtoprocess}&#xA;                             Sets the action(s) to take when the specific &#xA;                             error status is returned by a command in the &#xA;                             currently running do command file.  Multiple &#xA;                             actions can be specified with each delimited &#xA;                             by a semicolon character (just like &#xA;                             breakpoint action commands).&#xA;ON ERROR commandtoprocess{; additionalcommandtoprocess}&#xA;                             Sets the default action(s) to take when any &#xA;                             otherwise unspecified error status is returned &#xA;                             by a command in the currently running do &#xA;                             command file.  Multiple actions can be &#xA;                             specified with each delimited by a semicolon &#xA;                             character (just like breakpoint action &#xA;                             commands).&#xA;ON CONTROL_C commandtoprocess{; additionalcommandtoprocess}&#xA;                             Specifies particular actions to perform when&#xA;                             the operator enters CTRL+C while a command&#xA;                             procedure is running.  The default action is &#xA;                             to exit the current and any nested command &#xA;                             procedures and return to the sim&amp;gt; input prompt.&#xA;ON &amp;lt;statusvalue&amp;gt;             Clears the action(s) to take when condition occurs&#xA;ON ERROR                     Clears the default actions to take when any &#xA;                             otherwise unspecified error status is &#xA;                             returned by a command in the currently &#xA;                             running do command file.&#xA;ON CONTROL_C&#xA;                             Restores the default CTRL+C behavior for the&#xA;                             currently running command procedure.&#xA;&#xA;DO &amp;lt;stdin&amp;gt;&#xA;                             Invokes a nested DO command with input from the &#xA;                             running console.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Error traps can be taken for any command which returns a status other than SCPE_STEP, SCPE_OK, and SCPE_EXIT.&lt;/p&gt; &#xA;&lt;p&gt;ON Traps can specify any status value from the following list: NXM, UNATT, IOERR, CSUM, FMT, NOATT, OPENERR, MEM, ARG, STEP, UNK, RO, INCOMP, STOP, TTIERR, TTOERR, EOF, REL, NOPARAM, ALATT, TIMER, SIGERR, TTYERR, SUB, NOFNC, UDIS, NORO, INVSW, MISVAL, 2FARG, 2MARG, NXDEV, NXUN, NXREG, NXPAR, NEST, IERR, MTRLNT, LOST, TTMO, STALL, AFAIL, NOTATT, AMBREG. These values can be indicated by name or by their internal numeric value (not recommended).&lt;/p&gt; &#xA;&lt;p&gt;Interactions with ASSERT command and &#34;DO -e&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;DO -e&#x9;&#x9;is equivalent to SET ON, which by itself it equivalent &#xA;            to &#34;SET ON; ON ERROR RETURN&#34;.&#xA;ASSERT&#x9;&#x9;failure have several different actions:&#xA;   * If error trapping is not enabled then AFAIL causes exit from &#xA;     the current do command file.&#xA;   * If error trapping is enabled and an explicit &#34;ON AFAIL&#34; &#xA;     action is defined, then the specified action is performed.&#xA;   * If error trapping is enabled and no &#34;ON AFAIL&#34; action is &#xA;     defined, then an AFAIL causes exit from the current do &#xA;     command file.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other related changes/extensions: The &#34;!&#34; command (execute a command on the local OS), now returns the command&#39;s exit status as the status from the &#34;!&#34; command. This allows ON conditions to handle error status responses from OS commands and act as desired.&lt;/p&gt; &#xA;&lt;h4&gt;Scriptable interactions with running simulators&lt;/h4&gt; &#xA;&lt;p&gt;The EXPECT command now exists to provide a means of reacting to simulator output and the SEND command exists to inject data into programs running within a simulator.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;EXPECT {HALTAFTER=n,}&#34;\r\nPassword: &#34;&#xA;SEND {AFTER=n,}{DELAY=m,}&#34;mypassword\r&#34;&#xA;&#xA;or&#xA;&#xA;EXPECT {HALTAFTER=n,}&#34;\r\nPassword: &#34; SEND {AFTER=n,}{DELAY=m,}&#34;mypassword\r&#34;; GO&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Help&lt;/h4&gt; &#xA;&lt;p&gt;The built-in help system provides a heirarchical oriented help command interface.&lt;br&gt; In addition, there is explicit support for per device help:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;HELP dev&#xA;HELP dev ATTACH&#xA;HELP dev SET  (aka HELP SET dev)&#xA;HELP dev SHOW (aka HELP SHOW dev)&#xA;HELP dev REGISTERS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Generic SCP support Clock Coscheduling as opposed to per simulator implementations&lt;/h4&gt; &#xA;&lt;p&gt;Device simulator authors can easily schedule their device polling activities to allow for efficient simulator execution when polling for device activity while still being well behaved when their simulated system is actually idle.&lt;/p&gt; &#xA;&lt;h4&gt;New SCP Commands:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;SCREENSHOT filename.bmp          Save video window to the specified file&#xA;SET ENV Name=Value               Set Environment variable&#xA;SET ENV -p &#34;Prompt&#34; Name=Default Gather User input into an Environment Variable&#xA;SET ENV -a Name=Expression       Evaluate an expression and store result in an Environment Variable&#xA;SET ASYNCH                       Enable Asynchronous I/O&#xA;SET NOASYNCH                     Disable Asynchronous I/O&#xA;SET VERIFY                       Enable command display while processing DO command files&#xA;SET NOVERIFY                     Enable command display while processing DO command files&#xA;SET MESSAGE                      Enable error message output when commands complete (default)&#xA;SET NOMESSAGE                    Disable error message output when commands complete&#xA;SET QUIET                        Set minimal output mode for command execution&#xA;SET NOQUIET                      Set normal output mode for command execution&#xA;SET PROMPT                       Change the prompt used by the simulator (default sim&amp;gt;)&#xA;SET THROTTLE x/t                 Throttle t ms every x cycles&#xA;SET REMOTE TELNET=port           Specify remote console telnet port&#xA;SET REMOTE NOTELNET              Disables remote console&#xA;SET REMOTE CONNECTIONS=n         Specify the number of concurrent remote console sessions&#xA;SHOW FEATURES                    Displays the devices descriptions and features&#xA;SHOW ASYNCH                      Display the current Asynchronous I/O status&#xA;SHOW SERIAL                      Display the available and/or open serial ports&#xA;SHOW ETHERNET                    Display the available and/or open ethernet connections&#xA;SHOW MULTIPLEXER                 Display the details about open multiplexer devices&#xA;SHOW CLOCKS                      Display the details about calibrated timers&#xA;SHOW REMOTE                      Display the remote console configuration&#xA;SHOW ON                          Display ON condition dispatch actions&#xA;SET ON                           Enable ON condition error dispatching&#xA;SET NOON                         Disable ON condition error dispatching&#xA;GOTO                             Transfer to label in the current DO command file&#xA;CALL                             Call subroutine at indicated label&#xA;RETURN                           Return from subroutine call&#xA;SHIFT                            Slide argument parameters %1 thru %9 left 1&#xA;NOOP                             A no-op command&#xA;ON                               Establish or cancel an ON condition dispatch&#xA;IF                               Test some simulator state and conditionally execute commands&#xA;IF (C-style-expression)          Test some simulator state and conditionally execute commands&#xA;ELSE                             commands to execute when the previous IF wasn&#39;t true&#xA;CD                               Change working directory&#xA;SET DEFAULT                      Change working directory&#xA;PWD                              Show working directory&#xA;SHOW DEFAULT                     Show working directory&#xA;DIR {path|file}                  Display file listing&#xA;LS {path|file}                   Display file listing&#xA;NEXT                             Step across a subroutine call or step a single instruction.&#xA;EXPECT                           React to output produced by a simulated system&#xA;SEND                             Inject input to a simulated system&#39;s console&#xA;SLEEP time                       Pause command execution for specified time&#xA;SCREENSHOT                       Snapshot the current video display window&#xA;RUN UNTIL breakpoint             Establish the breakpoint specified and run until it is encountered&#xA;RUN UNTIL &#34;output-string&#34; ...    Establish the specified &#34;output-string&#34; as an EXPECT and run until it is encountered.&#xA;GO UNTIL breakpoint              Establish the breakpoint specified and go until it is encountered&#xA;GO UNTIL &#34;output-string&#34; ...     Establish the specified &#34;output-string&#34; as an EXPECT and go until it is encountered.&#xA;RUNLIMIT&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; Bound simulator execution time&#xA;TAR                              Manipulate file archives&#xA;CURL                             Access URLs from the web&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Command Processing Enhancements&lt;/h4&gt; &#xA;&lt;h5&gt;Environment variable insertion&lt;/h5&gt; &#xA;&lt;p&gt;Built In variables %DATE%, %TIME%, %DATETIME%, %LDATE%, %LTIME%, %CTIME%, %DATE_YYYY%, %DATE_YY%, %DATE_YC%, %DATE_MM%, %DATE_MMM%, %DATE_MONTH%, %DATE_DD%, %DATE_D%, %DATE_WYYYY%, %DATE_WW%, %TIME_HH%, %TIME_MM%, %TIME_SS%, %STATUS%, %TSTATUS%, %SIM_VERIFY%, %SIM_QUIET%, %SIM_MESSAGE%&lt;/p&gt; &#xA;&lt;p&gt;Token &#34;%0&#34; expands to the command file name. Token %n (n being a single digit) expands to the n&#39;th argument Token %* expands to the whole set of arguments (%1 ... %9)&lt;/p&gt; &#xA;&lt;p&gt;The input sequence &#34;%%&#34; represents a literal &#34;%&#34;. All other character combinations are rendered literally.&lt;/p&gt; &#xA;&lt;p&gt;Omitted parameters result in null-string substitutions.&lt;/p&gt; &#xA;&lt;p&gt;Tokens preceded and followed by % characters are expanded as environment variables, and if an environment variable isn&#39;t found then it can be one of several special variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;      %DATE%              yyyy-mm-dd&#xA;      %TIME%              hh:mm:ss&#xA;      %DATETIME%          yyyy-mm-ddThh:mm:ss&#xA;      %LDATE%             mm/dd/yy (Locale Formatted)&#xA;      %LTIME%             hh:mm:ss am/pm (Locale Formatted)&#xA;      %CTIME%             Www Mmm dd hh:mm:ss yyyy (Locale Formatted)&#xA;      %UTIME%             nnnn (Unix time - seconds since 1/1/1970)&#xA;      %DATE_YYYY%         yyyy        (0000-9999)&#xA;      %DATE_YY%           yy          (00-99)&#xA;      %DATE_MM%           mm          (01-12)&#xA;      %DATE_MMM%          mmm         (JAN-DEC)&#xA;      %DATE_MONTH%        month       (January-December)&#xA;      %DATE_DD%           dd          (01-31)&#xA;      %DATE_WW%           ww          (01-53)     ISO 8601 week number&#xA;      %DATE_WYYYY%        yyyy        (0000-9999) ISO 8601 week year number&#xA;      %DATE_D%            d           (1-7)       ISO 8601 day of week&#xA;      %DATE_JJJ%          jjj         (001-366) day of year&#xA;      %DATE_19XX_YY%      yy          A year prior to 2000 with the same&#xA;                                      calendar days as the current year&#xA;      %DATE_19XX_YYYY%    yyyy        A year prior to 2000 with the same &#xA;                                      calendar days as the current year&#xA;      %TIME_HH%           hh          (00-23)&#xA;      %TIME_MM%           mm          (00-59)&#xA;      %TIME_SS%           ss          (00-59)&#xA;      %STATUS%            Status value from the last command executed&#xA;      %TSTATUS%           The text form of the last status value&#xA;      %SIM_VERIFY%        The Verify/Verbose mode of the current Do command file&#xA;      %SIM_VERBOSE%       The Verify/Verbose mode of the current Do command file&#xA;      %SIM_QUIET%         The Quiet mode of the current Do command file&#xA;      %SIM_MESSAGE%       The message display status of the current Do command file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Environment variable lookups are done first with the precise name between the % characters and if that fails, then the name between the % characters is upcased and a lookup of that values is attempted.&lt;/p&gt; &#xA;&lt;p&gt;The first Space delimited token on the line is extracted in uppercase and then looked up as an environment variable. If found it the value is substituted for the original string before expanding everything else. If it is not found, then the original beginning token on the line is left untouched.&lt;/p&gt; &#xA;&lt;h5&gt;Command aliases&lt;/h5&gt; &#xA;&lt;p&gt;Commands can be aliases with environment variables. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  sim&amp;gt; set env say=echo&#xA;  sim&amp;gt; say Hello there&#xA;  Hello there&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Do command argument manipulation&lt;/h5&gt; &#xA;&lt;p&gt;The SHIFT command will shift the %1 thru %9 arguments to the left one position.&lt;/p&gt; &#xA;&lt;h2&gt;Building and running a simulator&lt;/h2&gt; &#xA;&lt;h3&gt;Use Prebuilt Windows Simulators&lt;/h3&gt; &#xA;&lt;p&gt;Simulators for the Windows platform are built and made available on a regular basis (at least once a week if substantive changes have been made to the codebase).&lt;/p&gt; &#xA;&lt;p&gt;The prebuilt Windows binaries will run on all versions of Microsoft Windows from Windows XP onward.&lt;/p&gt; &#xA;&lt;p&gt;They can be accessed at &lt;a href=&#34;https://github.com/simh/Win32-Development-Binaries&#34;&gt;https://github.com/simh/Win32-Development-Binaries&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Several relatively recent versions should be available which you can download and use directly.&lt;/p&gt; &#xA;&lt;h3&gt;Building simulators yourself&lt;/h3&gt; &#xA;&lt;p&gt;First download the latest source code from the github repository&#39;s master branch at &lt;a href=&#34;https://github.com/simh/simh/archive/master.zip&#34;&gt;https://github.com/simh/simh/archive/master.zip&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Depending on your host platform one of the following steps should be followed:&lt;/p&gt; &#xA;&lt;h4&gt;Linux/OSX other *nix platforms&lt;/h4&gt; &#xA;&lt;p&gt;If you are interested in using a simulator with Ethernet networking support (i.e. one of the VAX simulators or the PDP11), then you should make sure you have the correct networking components available. The instructions in &lt;a href=&#34;https://github.com/simh/simh/raw/master/0readme_ethernet.txt&#34;&gt;https://github.com/simh/simh/blob/master/0readme_ethernet.txt&lt;/a&gt; describe the required steps to get ethernet networking components installed and how to configure your environment.&lt;/p&gt; &#xA;&lt;p&gt;See the 0readme_ethernet.txt file for details about the required network components for your platform. Once your operating system build environment has the correct networking components available the following command will build working simulators:&lt;/p&gt; &#xA;&lt;p&gt;$ make {simulator-name (i.e. vax)}&lt;/p&gt; &#xA;&lt;p&gt;The makefile provided requires GNU make, which is the default make facility for most systems these days. Any host system which doesn&#39;t have GNU make available as the default make facility may have it installed as &#39;gmake&#39;. GNU make (gmake) is generally available an installation package for all current operating systems which have a package installation system.&lt;/p&gt; &#xA;&lt;h5&gt;Build Dependencies&lt;/h5&gt; &#xA;&lt;p&gt;Some simulators depend on external packages to provide the full scope of functionality they may be simulating. These additional external packages may or may not be included in as part of the standard Operating System distributions. If simulators are being built that could provide more functionality than the currently installed packages will provide, the build will succeed with reduced functionality (i.e. limited network or no video support), but suggestions will be provided as to what could provide full functionality.&lt;/p&gt; &#xA;&lt;h6&gt;OS X - Dependencies&lt;/h6&gt; &#xA;&lt;p&gt;The MacPorts package manager is available to provide these external packages. Once MacPorts is installed, these commands will install the required dependent packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# port install vde2&#xA;# port install libsdl2&#xA;# port install libsdl2_ttf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;OR&lt;/p&gt; &#xA;&lt;p&gt;The HomeBrew package manager can be used to provide these packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ brew install vde&#xA;$ brew install sdl2&#xA;$ brew install sdl2_ttf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Linux - Dependencies&lt;/h6&gt; &#xA;&lt;p&gt;Different Linux distributions have different package management systems:&lt;/p&gt; &#xA;&lt;p&gt;Ubuntu:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# apt-get install libpcap-dev&#xA;# apt-get install libpcre3-dev&#xA;# apt-get install vde2&#xA;# apt-get install libsdl2-dev&#xA;# apt-get install libsdl2_ttf-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;p&gt;Compiling on windows is supported with recent versions of Microsoft Visual Studio (Standard or Express) and using GCC via the MinGW32 environment. Things may also work under Cygwin, but that is not the preferred windows environment. Not all features will be available as well as with either Visual Studio or MinGW32.&lt;/p&gt; &#xA;&lt;h5&gt;Required related files&lt;/h5&gt; &#xA;&lt;p&gt;The file &lt;a href=&#34;https://github.com/simh/simh/raw/master/Visual%20Studio%20Projects/0ReadMe_Projects.txt&#34;&gt;https://github.com/simh/simh/blob/master/Visual%20Studio%20Projects/0ReadMe_Projects.txt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Visual Studio (Standard or Express) 2008, 2010, 2012, 2013 or Visual Studio Community 2015, 2017, 2019&lt;/h5&gt; &#xA;&lt;p&gt;The file &lt;a href=&#34;https://github.com/simh/simh/raw/master/Visual%20Studio%20Projects/0ReadMe_Projects.txt&#34;&gt;https://github.com/simh/simh/blob/master/Visual%20Studio%20Projects/0ReadMe_Projects.txt&lt;/a&gt; describes the required steps to use the setup your environment to build using Visual Studio.&lt;/p&gt; &#xA;&lt;h5&gt;MinGW32&lt;/h5&gt; &#xA;&lt;p&gt;Building with MinGW32 requires the same directory organization and the dependent package support described for Visual Studio in the file &lt;a href=&#34;https://github.com/simh/simh/raw/master/Visual%20Studio%20Projects/0ReadMe_Projects.txt&#34;&gt;https://github.com/simh/simh/blob/master/Visual%20Studio%20Projects/0ReadMe_Projects.txt&lt;/a&gt;. Building with MinGW64 is not supported.&lt;/p&gt; &#xA;&lt;h4&gt;VMS&lt;/h4&gt; &#xA;&lt;p&gt;Download the latest source code as a zip file from: &lt;a href=&#34;https://github.com/simh/simh/archive/master.zip&#34;&gt;https://github.com/simh/simh/archive/master.zip&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unzip it in the directory that you want SIMH to reside in. Unpack it and set the file attributes as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ unzip simh-master.zip&#xA;$ set default [.simh-master]&#xA;$ set file/attri=RFM:STM makefile,*.mms,[...]*.c,[...]*.h,[...]*.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Simulators with ethernet network devices (All the VAX simulators and the PDP11) can have functioning networking when running on Alpha or IA64 OpenVMS.&lt;/p&gt; &#xA;&lt;p&gt;In order to build and run simulators with networking support, the VMS-PCAP package must be available while building your simulator. The simh-vms-pcap.zip file can be downloaded from &lt;a href=&#34;https://github.com/simh/simh/archive/vms-pcap.zip&#34;&gt;https://github.com/simh/simh/archive/vms-pcap.zip&lt;/a&gt;&lt;br&gt; This link will return a file called simh-vms-pcap.zip which should be unpacked as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ unzip -a simh-vms-pcap.zip&#xA;$ rename [.simh-vms-pcap]pcap-vms.dir []&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The PCAP-VMS components are presumed (by the descript.mms file) to be located in a directory at the same level as the directory containing the simh source files. For example, if these exist here:&lt;/p&gt; &#xA;&lt;p&gt;[]descrip.mms []scp.c etc.&lt;/p&gt; &#xA;&lt;p&gt;Then the following should exist: [-.PCAP-VMS]BUILD_ALL.COM [-.PCAP-VMS.PCAP-VCI] [-.PCAP-VMS.PCAPVCM] etc.&lt;/p&gt; &#xA;&lt;p&gt;To build simulators:&lt;/p&gt; &#xA;&lt;p&gt;On a VAX use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ MMx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On a Alpha &amp;amp; IA64 hosts use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ MMx                        ! With Ethernet support&#xA;$ MMx/MACRO=(NONETWORK=1)    ! Without Ethernet support&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;UNZIP can be found on the VMS freeware CDs, or from &lt;a href=&#34;http://www.info-zip.org&#34;&gt;www.info-zip.org&lt;/a&gt; MMS (Module Management System) can be licensed from HP/Compaq/Digital as part of the VMS Hobbyist program (it is a component of the DECSET product). MMK can be found on the VMS freeware CDs, or from &lt;a href=&#34;http://www.kednos.com/kednos/Open_Source/MMK&#34;&gt;http://www.kednos.com/kednos/Open_Source/MMK&lt;/a&gt; DEC C can be licensed from HP/Compaq/Digital as part of the VMS Hobbyist program.&lt;/p&gt; &#xA;&lt;h2&gt;Problem Reports&lt;/h2&gt; &#xA;&lt;p&gt;If you find problems or have suggestions relating to any simulator or the simh package as a whole, please report these using the github &#34;Issue&#34; interface at &lt;a href=&#34;https://github.com/simh/simh/issues&#34;&gt;https://github.com/simh/simh/issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Problem reports should contain;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a description of the problem&lt;/li&gt; &#xA; &lt;li&gt;the simulator you experience the problem with&lt;/li&gt; &#xA; &lt;li&gt;your host platform (and OS version)&lt;/li&gt; &#xA; &lt;li&gt;how you built the simulator or that you&#39;re using prebuilt binaries&lt;/li&gt; &#xA; &lt;li&gt;the simulator build description should include the output produced by while building the simulator&lt;/li&gt; &#xA; &lt;li&gt;the output of SHOW VERSION while running the simulator which is having an issue&lt;/li&gt; &#xA; &lt;li&gt;the simulator configuration file (or commands) which were used when the problem occurred.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>git/git</title>
    <updated>2022-05-29T02:04:57Z</updated>
    <id>tag:github.com,2022-05-29:/git/git</id>
    <link href="https://github.com/git/git" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Git Source Code Mirror - This is a publish-only repository but pull requests can be turned into patches to the mailing list via GitGitGadget (https://gitgitgadget.github.io/). Please follow Documentation/SubmittingPatches procedure for any of your improvements.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/git/git/actions?query=branch%3Amaster+event%3Apush&#34;&gt;&lt;img src=&#34;https://github.com/git/git/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Git - fast, scalable, distributed revision control system&lt;/h1&gt; &#xA;&lt;p&gt;Git is a fast, scalable, distributed revision control system with an unusually rich command set that provides both high-level operations and full access to internals.&lt;/p&gt; &#xA;&lt;p&gt;Git is an Open Source project covered by the GNU General Public License version 2 (some parts of it are under different licenses, compatible with the GPLv2). It was originally written by Linus Torvalds with help of a group of hackers around the net.&lt;/p&gt; &#xA;&lt;p&gt;Please read the file &lt;a href=&#34;https://raw.githubusercontent.com/git/git/master/INSTALL&#34;&gt;INSTALL&lt;/a&gt; for installation instructions.&lt;/p&gt; &#xA;&lt;p&gt;Many Git online resources are accessible from &lt;a href=&#34;https://git-scm.com/&#34;&gt;https://git-scm.com/&lt;/a&gt; including full documentation and Git related tools.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/git/git/master/Documentation/gittutorial.txt&#34;&gt;Documentation/gittutorial.txt&lt;/a&gt; to get started, then see &lt;a href=&#34;https://raw.githubusercontent.com/git/git/master/Documentation/giteveryday.txt&#34;&gt;Documentation/giteveryday.txt&lt;/a&gt; for a useful minimum set of commands, and &lt;code&gt;Documentation/git-&amp;lt;commandname&amp;gt;.txt&lt;/code&gt; for documentation of each command. If git has been correctly installed, then the tutorial can also be read with &lt;code&gt;man gittutorial&lt;/code&gt; or &lt;code&gt;git help tutorial&lt;/code&gt;, and the documentation of each command with &lt;code&gt;man git-&amp;lt;commandname&amp;gt;&lt;/code&gt; or &lt;code&gt;git help &amp;lt;commandname&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;CVS users may also want to read &lt;a href=&#34;https://raw.githubusercontent.com/git/git/master/Documentation/gitcvs-migration.txt&#34;&gt;Documentation/gitcvs-migration.txt&lt;/a&gt; (&lt;code&gt;man gitcvs-migration&lt;/code&gt; or &lt;code&gt;git help cvs-migration&lt;/code&gt; if git is installed).&lt;/p&gt; &#xA;&lt;p&gt;The user discussion and development of Git take place on the Git mailing list -- everyone is welcome to post bug reports, feature requests, comments and patches to &lt;a href=&#34;mailto:git@vger.kernel.org&#34;&gt;git@vger.kernel.org&lt;/a&gt; (read &lt;a href=&#34;https://raw.githubusercontent.com/git/git/master/Documentation/SubmittingPatches&#34;&gt;Documentation/SubmittingPatches&lt;/a&gt; for instructions on patch submission and &lt;a href=&#34;https://raw.githubusercontent.com/git/git/master/Documentation/CodingGuidelines&#34;&gt;Documentation/CodingGuidelines&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Those wishing to help with error message, usage and informational message string translations (localization l10) should see &lt;a href=&#34;https://raw.githubusercontent.com/git/git/master/po/README.md&#34;&gt;po/README.md&lt;/a&gt; (a &lt;code&gt;po&lt;/code&gt; file is a Portable Object file that holds the translations).&lt;/p&gt; &#xA;&lt;p&gt;To subscribe to the list, send an email with just &#34;subscribe git&#34; in the body to &lt;a href=&#34;mailto:majordomo@vger.kernel.org&#34;&gt;majordomo@vger.kernel.org&lt;/a&gt; (not the Git list). The mailing list archives are available at &lt;a href=&#34;https://lore.kernel.org/git/&#34;&gt;https://lore.kernel.org/git/&lt;/a&gt;, &lt;a href=&#34;http://marc.info/?l=git&#34;&gt;http://marc.info/?l=git&lt;/a&gt; and other archival sites.&lt;/p&gt; &#xA;&lt;p&gt;Issues which are security relevant should be disclosed privately to the Git Security mailing list &lt;a href=&#34;mailto:git-security@googlegroups.com&#34;&gt;git-security@googlegroups.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The maintainer frequently sends the &#34;What&#39;s cooking&#34; reports that list the current status of various development topics to the mailing list. The discussion following them give a good reference for project status, development direction and remaining tasks.&lt;/p&gt; &#xA;&lt;p&gt;The name &#34;git&#34; was given by Linus Torvalds when he wrote the very first version. He described the tool as &#34;the stupid content tracker&#34; and the name as (depending on your mood):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;random three-letter combination that is pronounceable, and not actually used by any common UNIX command. The fact that it is a mispronunciation of &#34;get&#34; may or may not be relevant.&lt;/li&gt; &#xA; &lt;li&gt;stupid. contemptible and despicable. simple. Take your pick from the dictionary of slang.&lt;/li&gt; &#xA; &lt;li&gt;&#34;global information tracker&#34;: you&#39;re in a good mood, and it actually works for you. Angels sing, and a light suddenly fills the room.&lt;/li&gt; &#xA; &lt;li&gt;&#34;goddamn idiotic truckload of sh*t&#34;: when it breaks&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>iovisor/bcc</title>
    <updated>2022-05-29T02:04:57Z</updated>
    <id>tag:github.com,2022-05-29:/iovisor/bcc</id>
    <link href="https://github.com/iovisor/bcc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;BCC - Tools for BPF-based Linux IO analysis, networking, monitoring, and more&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/images/logo2.png&#34; alt=&#34;BCC Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;BPF Compiler Collection (BCC)&lt;/h1&gt; &#xA;&lt;p&gt;BCC is a toolkit for creating efficient kernel tracing and manipulation programs, and includes several useful tools and examples. It makes use of extended BPF (Berkeley Packet Filters), formally known as eBPF, a new feature that was first added to Linux 3.15. Much of what BCC uses requires Linux 4.1 and above.&lt;/p&gt; &#xA;&lt;p&gt;eBPF was &lt;a href=&#34;https://lkml.org/lkml/2015/4/14/232&#34;&gt;described by&lt;/a&gt; Ingo Molnár as:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;One of the more interesting features in this cycle is the ability to attach eBPF programs (user-defined, sandboxed bytecode executed by the kernel) to kprobes. This allows user-defined instrumentation on a live kernel image that can never crash, hang or interfere with the kernel negatively.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;BCC makes BPF programs easier to write, with kernel instrumentation in C (and includes a C wrapper around LLVM), and front-ends in Python and lua. It is suited for many tasks, including performance analysis and network traffic control.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshot&lt;/h2&gt; &#xA;&lt;p&gt;This example traces a disk I/O kernel function, and populates an in-kernel power-of-2 histogram of the I/O size. For efficiency, only the histogram summary is returned to user-level.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;# ./bitehist.py&#xA;Tracing... Hit Ctrl-C to end.&#xA;^C&#xA;     kbytes          : count     distribution&#xA;       0 -&amp;gt; 1        : 3        |                                      |&#xA;       2 -&amp;gt; 3        : 0        |                                      |&#xA;       4 -&amp;gt; 7        : 211      |**********                            |&#xA;       8 -&amp;gt; 15       : 0        |                                      |&#xA;      16 -&amp;gt; 31       : 0        |                                      |&#xA;      32 -&amp;gt; 63       : 0        |                                      |&#xA;      64 -&amp;gt; 127      : 1        |                                      |&#xA;     128 -&amp;gt; 255      : 800      |**************************************|&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above output shows a bimodal distribution, where the largest mode of 800 I/O was between 128 and 255 Kbytes in size.&lt;/p&gt; &#xA;&lt;p&gt;See the source: &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/bitehist.py&#34;&gt;bitehist.py&lt;/a&gt;. What this traces, what this stores, and how the data is presented, can be entirely customized. This shows only some of many possible capabilities.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/INSTALL.md&#34;&gt;INSTALL.md&lt;/a&gt; for installation steps on your platform.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/FAQ.txt&#34;&gt;FAQ.txt&lt;/a&gt; for the most common troubleshoot questions.&lt;/p&gt; &#xA;&lt;h2&gt;Reference guide&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/docs/reference_guide.md&#34;&gt;docs/reference_guide.md&lt;/a&gt; for the reference guide to the bcc and bcc/BPF APIs.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;p&gt;Some of these are single files that contain both C and Python, others have a pair of .c and .py files, and some are directories of files.&lt;/p&gt; &#xA;&lt;h3&gt;Tracing&lt;/h3&gt; &#xA;&lt;h4&gt;Examples:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/bitehist.py&#34;&gt;bitehist.py&lt;/a&gt;: Block I/O size histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/bitehist_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/disksnoop.py&#34;&gt;disksnoop.py&lt;/a&gt;: Trace block device I/O latency. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/disksnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;examples/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/hello_world.py&#34;&gt;hello_world.py&lt;/a&gt;: Prints &#34;Hello, World!&#34; for new processes.&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/mysqld_query.py&#34;&gt;mysqld_query.py&lt;/a&gt;: Trace MySQL server queries using USDT probes. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/mysqld_query_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/nodejs_http_server.py&#34;&gt;nodejs_http_server.py&lt;/a&gt;: Trace Node.js HTTP server requests using USDT probes. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/nodejs_http_server_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/stacksnoop.py&#34;&gt;stacksnoop&lt;/a&gt;: Trace a kernel function and print all kernel stack traces. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/stacksnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/statsnoop.py&#34;&gt;statsnoop&lt;/a&gt;: Trace stat() syscalls. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/statsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/task_switch.py&#34;&gt;task_switch.py&lt;/a&gt;: Count task switches with from and to PIDs.&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/tcpv4connect.py&#34;&gt;tcpv4connect.py&lt;/a&gt;: Trace TCP IPv4 active connections. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/tcpv4connect_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/trace_fields.py&#34;&gt;trace_fields.py&lt;/a&gt;: Simple example of printing fields from traced events.&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/undump.py&#34;&gt;undump.py&lt;/a&gt;: Dump UNIX socket packets. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/undump_example.txt&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/urandomread.py&#34;&gt;urandomread.py&lt;/a&gt;: A kernel tracepoint example, which traces random:urandom_read. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/urandomread_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/vfsreadlat.py&#34;&gt;vfsreadlat.py&lt;/a&gt; examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/vfsreadlat.c&#34;&gt;vfsreadlat.c&lt;/a&gt;: VFS read latency distribution. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/vfsreadlat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/kvm_hypercall.py&#34;&gt;kvm_hypercall.py&lt;/a&gt;: Conditional static kernel tracepoints for KVM entry, exit and hypercall &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/kvm_hypercall.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Tools:&lt;/h4&gt; &#xA;&lt;center&gt;&#xA; &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/images/bcc_tracing_tools_2019.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/images/bcc_tracing_tools_2019.png&#34; border=&#34;0&#34; width=&#34;700&#34;&gt;&lt;/a&gt;&#xA;&lt;/center&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/argdist.py&#34;&gt;argdist&lt;/a&gt;: Display function parameter values as a histogram or frequency count. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/argdist_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bashreadline.py&#34;&gt;bashreadline&lt;/a&gt;: Print entered bash commands system wide. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bashreadline_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bindsnoop.py&#34;&gt;bindsnoop&lt;/a&gt;: Trace IPv4 and IPv6 bind() system calls (bind()). &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bindsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biolatency.py&#34;&gt;biolatency&lt;/a&gt;: Summarize block device I/O latency as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biolatency_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biotop.py&#34;&gt;biotop&lt;/a&gt;: Top for disks: Summarize block device I/O by process. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biotop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biopattern.py&#34;&gt;biopattern&lt;/a&gt;: Identify random/sequential disk access patterns. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biopattern_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biosnoop.py&#34;&gt;biosnoop&lt;/a&gt;: Trace block device I/O with PID and latency. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biosnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bitesize.py&#34;&gt;bitesize&lt;/a&gt;: Show per process I/O size histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bitesize_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bpflist.py&#34;&gt;bpflist&lt;/a&gt;: Display processes with active BPF programs and maps. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bpflist_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/btrfsdist.py&#34;&gt;btrfsdist&lt;/a&gt;: Summarize btrfs operation latency distribution as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/btrfsdist_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/btrfsslower.py&#34;&gt;btrfsslower&lt;/a&gt;: Trace slow btrfs operations. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/btrfsslower_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/capable.py&#34;&gt;capable&lt;/a&gt;: Trace security capability checks. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/capable_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cachestat.py&#34;&gt;cachestat&lt;/a&gt;: Trace page cache hit/miss ratio. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cachestat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cachetop.py&#34;&gt;cachetop&lt;/a&gt;: Trace page cache hit/miss ratio by processes. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cachetop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/compactsnoop.py&#34;&gt;compactsnoop&lt;/a&gt;: Trace compact zone events with PID and latency. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/compactsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cpudist.py&#34;&gt;cpudist&lt;/a&gt;: Summarize on- and off-CPU time per task as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cpudist_example.txt&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cpuunclaimed.py&#34;&gt;cpuunclaimed&lt;/a&gt;: Sample CPU run queues and calculate unclaimed idle CPU. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cpuunclaimed_example.txt&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/criticalstat.py&#34;&gt;criticalstat&lt;/a&gt;: Trace and report long atomic critical sections in the kernel. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/criticalstat_example.txt&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dbslower.py&#34;&gt;dbslower&lt;/a&gt;: Trace MySQL/PostgreSQL queries slower than a threshold. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dbslower_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dbstat.py&#34;&gt;dbstat&lt;/a&gt;: Summarize MySQL/PostgreSQL query latency as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dbstat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dcsnoop.py&#34;&gt;dcsnoop&lt;/a&gt;: Trace directory entry cache (dcache) lookups. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dcsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dcstat.py&#34;&gt;dcstat&lt;/a&gt;: Directory entry cache (dcache) stats. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dcstat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/deadlock.py&#34;&gt;deadlock&lt;/a&gt;: Detect potential deadlocks on a running process. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/deadlock_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dirtop.py&#34;&gt;dirtop&lt;/a&gt;: File reads and writes by directory. Top for directories. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dirtop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/drsnoop.py&#34;&gt;drsnoop&lt;/a&gt;: Trace direct reclaim events with PID and latency. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/drsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/execsnoop.py&#34;&gt;execsnoop&lt;/a&gt;: Trace new processes via exec() syscalls. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/execsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/exitsnoop.py&#34;&gt;exitsnoop&lt;/a&gt;: Trace process termination (exit and fatal signals). &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/exitsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/ext4dist.py&#34;&gt;ext4dist&lt;/a&gt;: Summarize ext4 operation latency distribution as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/ext4dist_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/ext4slower.py&#34;&gt;ext4slower&lt;/a&gt;: Trace slow ext4 operations. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/ext4slower_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/filelife.py&#34;&gt;filelife&lt;/a&gt;: Trace the lifespan of short-lived files. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/filelife_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/fileslower.py&#34;&gt;fileslower&lt;/a&gt;: Trace slow synchronous file reads and writes. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/fileslower_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/filetop.py&#34;&gt;filetop&lt;/a&gt;: File reads and writes by filename and process. Top for files. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/filetop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funccount.py&#34;&gt;funccount&lt;/a&gt;: Count kernel function calls. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funccount_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funcinterval.py&#34;&gt;funcinterval&lt;/a&gt;: Time interval between the same function as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funcinterval_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funclatency.py&#34;&gt;funclatency&lt;/a&gt;: Time functions and show their latency distribution. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funclatency_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funcslower.py&#34;&gt;funcslower&lt;/a&gt;: Trace slow kernel or user function calls. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funcslower_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/gethostlatency.py&#34;&gt;gethostlatency&lt;/a&gt;: Show latency for getaddrinfo/gethostbyname[2] calls. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/gethostlatency_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/hardirqs.py&#34;&gt;hardirqs&lt;/a&gt;: Measure hard IRQ (hard interrupt) event time. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/hardirqs_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/inject.py&#34;&gt;inject&lt;/a&gt;: Targeted error injection with call chain and predicates &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/inject_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/killsnoop.py&#34;&gt;killsnoop&lt;/a&gt;: Trace signals issued by the kill() syscall. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/killsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/klockstat.py&#34;&gt;klockstat&lt;/a&gt;: Traces kernel mutex lock events and display locks statistics. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/klockstat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/kvmexit.py&#34;&gt;kvmexit&lt;/a&gt;: Display the exit_reason and its statistics of each vm exit. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/kvmexit_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/llcstat.py&#34;&gt;llcstat&lt;/a&gt;: Summarize CPU cache references and misses by process. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/llcstat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/mdflush.py&#34;&gt;mdflush&lt;/a&gt;: Trace md flush events. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/mdflush_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/memleak.py&#34;&gt;memleak&lt;/a&gt;: Display outstanding memory allocations to find memory leaks. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/memleak_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/mountsnoop.py&#34;&gt;mountsnoop&lt;/a&gt;: Trace mount and umount syscalls system-wide. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/mountsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/mysqld_qslower.py&#34;&gt;mysqld_qslower&lt;/a&gt;: Trace MySQL server queries slower than a threshold. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/mysqld_qslower_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/netqtop.py&#34;&gt;netqtop&lt;/a&gt; tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/netqtop.c&#34;&gt;netqtop.c&lt;/a&gt;: Trace and display packets distribution on NIC queues. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/netqtop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/nfsslower.py&#34;&gt;nfsslower&lt;/a&gt;: Trace slow NFS operations. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/nfsslower_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/nfsdist.py&#34;&gt;nfsdist&lt;/a&gt;: Summarize NFS operation latency distribution as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/nfsdist_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/offcputime.py&#34;&gt;offcputime&lt;/a&gt;: Summarize off-CPU time by kernel stack trace. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/offcputime_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/offwaketime.py&#34;&gt;offwaketime&lt;/a&gt;: Summarize blocked time by kernel off-CPU stack and waker stack. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/offwaketime_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/oomkill.py&#34;&gt;oomkill&lt;/a&gt;: Trace the out-of-memory (OOM) killer. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/oomkill_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/opensnoop.py&#34;&gt;opensnoop&lt;/a&gt;: Trace open() syscalls. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/opensnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/pidpersec.py&#34;&gt;pidpersec&lt;/a&gt;: Count new processes (via fork). &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/pidpersec_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/profile.py&#34;&gt;profile&lt;/a&gt;: Profile CPU usage by sampling stack traces at a timed interval. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/profile_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/readahead.py&#34;&gt;readahead&lt;/a&gt;: Show performance of read-ahead cache &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/readahead_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/reset-trace.sh&#34;&gt;reset-trace&lt;/a&gt;: Reset the state of tracing. Maintenance tool only. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/reset-trace_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/runqlat.py&#34;&gt;runqlat&lt;/a&gt;: Run queue (scheduler) latency as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/runqlat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/runqlen.py&#34;&gt;runqlen&lt;/a&gt;: Run queue length as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/runqlen_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/runqslower.py&#34;&gt;runqslower&lt;/a&gt;: Trace long process scheduling delays. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/runqslower_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/shmsnoop.py&#34;&gt;shmsnoop&lt;/a&gt;: Trace System V shared memory syscalls. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/shmsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/sofdsnoop.py&#34;&gt;sofdsnoop&lt;/a&gt;: Trace FDs passed through unix sockets. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/sofdsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/slabratetop.py&#34;&gt;slabratetop&lt;/a&gt;: Kernel SLAB/SLUB memory cache allocation rate top. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/slabratetop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/softirqs.py&#34;&gt;softirqs&lt;/a&gt;: Measure soft IRQ (soft interrupt) event time. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/softirqs_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/solisten.py&#34;&gt;solisten&lt;/a&gt;: Trace TCP socket listen. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/solisten_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/sslsniff.py&#34;&gt;sslsniff&lt;/a&gt;: Sniff OpenSSL written and readed data. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/sslsniff_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/stackcount.py&#34;&gt;stackcount&lt;/a&gt;: Count kernel function calls and their stack traces. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/stackcount_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/syncsnoop.py&#34;&gt;syncsnoop&lt;/a&gt;: Trace sync() syscall. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/syncsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/syscount.py&#34;&gt;syscount&lt;/a&gt;: Summarize syscall counts and latencies. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/syscount_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpaccept.py&#34;&gt;tcpaccept&lt;/a&gt;: Trace TCP passive connections (accept()). &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpaccept_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpconnect.py&#34;&gt;tcpconnect&lt;/a&gt;: Trace TCP active connections (connect()). &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpconnect_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpconnlat.py&#34;&gt;tcpconnlat&lt;/a&gt;: Trace TCP active connection latency (connect()). &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpconnlat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpdrop.py&#34;&gt;tcpdrop&lt;/a&gt;: Trace kernel-based TCP packet drops with details. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpdrop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcplife.py&#34;&gt;tcplife&lt;/a&gt;: Trace TCP sessions and summarize lifespan. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcplife_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpretrans.py&#34;&gt;tcpretrans&lt;/a&gt;: Trace TCP retransmits and TLPs. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpretrans_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcprtt.py&#34;&gt;tcprtt&lt;/a&gt;: Trace TCP round trip time. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcprtt_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpstates.py&#34;&gt;tcpstates&lt;/a&gt;: Trace TCP session state changes with durations. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpstates_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpsubnet.py&#34;&gt;tcpsubnet&lt;/a&gt;: Summarize and aggregate TCP send by subnet. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpsubnet_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpsynbl.py&#34;&gt;tcpsynbl&lt;/a&gt;: Show TCP SYN backlog. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpsynbl_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcptop.py&#34;&gt;tcptop&lt;/a&gt;: Summarize TCP send/recv throughput by host. Top for TCP. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcptop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcptracer.py&#34;&gt;tcptracer&lt;/a&gt;: Trace TCP established connections (connect(), accept(), close()). &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcptracer_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpcong.py&#34;&gt;tcpcong&lt;/a&gt;: Trace TCP socket congestion control status duration. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpcong_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/threadsnoop.py&#34;&gt;threadsnoop&lt;/a&gt;: List new thread creation. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/threadsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tplist.py&#34;&gt;tplist&lt;/a&gt;: Display kernel tracepoints or USDT probes and their formats. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tplist_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/trace.py&#34;&gt;trace&lt;/a&gt;: Trace arbitrary functions, with filters. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/trace_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/ttysnoop.py&#34;&gt;ttysnoop&lt;/a&gt;: Watch live output from a tty or pts device. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/ttysnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/ucalls.py&#34;&gt;ucalls&lt;/a&gt;: Summarize method calls or Linux syscalls in high-level languages. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/ucalls_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/uflow.py&#34;&gt;uflow&lt;/a&gt;: Print a method flow graph in high-level languages. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/uflow_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/ugc.py&#34;&gt;ugc&lt;/a&gt;: Trace garbage collection events in high-level languages. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/ugc_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/uobjnew.py&#34;&gt;uobjnew&lt;/a&gt;: Summarize object allocation events by object type and number of bytes allocated. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/uobjnew_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/ustat.py&#34;&gt;ustat&lt;/a&gt;: Collect events such as GCs, thread creations, object allocations, exceptions and more in high-level languages. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/ustat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/uthreads.py&#34;&gt;uthreads&lt;/a&gt;: Trace thread creation events in Java and raw pthreads. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/uthreads_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/vfscount.py&#34;&gt;vfscount&lt;/a&gt;: Count VFS calls. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/vfscount_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/vfsstat.py&#34;&gt;vfsstat&lt;/a&gt;: Count some VFS calls, with column output. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/vfsstat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/virtiostat.py&#34;&gt;virtiostat&lt;/a&gt;: Show VIRTIO device IO statistics. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/virtiostat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/wakeuptime.py&#34;&gt;wakeuptime&lt;/a&gt;: Summarize sleep to wakeup time by waker kernel stack. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/wakeuptime_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/xfsdist.py&#34;&gt;xfsdist&lt;/a&gt;: Summarize XFS operation latency distribution as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/xfsdist_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/xfsslower.py&#34;&gt;xfsslower&lt;/a&gt;: Trace slow XFS operations. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/xfsslower_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/zfsdist.py&#34;&gt;zfsdist&lt;/a&gt;: Summarize ZFS operation latency distribution as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/zfsdist_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/zfsslower.py&#34;&gt;zfsslower&lt;/a&gt;: Trace slow ZFS operations. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/zfsslower_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Networking&lt;/h3&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;examples/networking/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/distributed_bridge&#34;&gt;distributed_bridge/&lt;/a&gt;: Distributed bridge example.&lt;/li&gt; &#xA; &lt;li&gt;examples/networking/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/http_filter&#34;&gt;http_filter/&lt;/a&gt;: Simple HTTP filter example.&lt;/li&gt; &#xA; &lt;li&gt;examples/networking/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/simple_tc.py&#34;&gt;simple_tc.py&lt;/a&gt;: Simple traffic control example.&lt;/li&gt; &#xA; &lt;li&gt;examples/networking/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/simulation.py&#34;&gt;simulation.py&lt;/a&gt;: Simulation helper.&lt;/li&gt; &#xA; &lt;li&gt;examples/networking/neighbor_sharing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/neighbor_sharing/tc_neighbor_sharing.py&#34;&gt;tc_neighbor_sharing.py&lt;/a&gt; examples/networking/neighbor_sharing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/neighbor_sharing/tc_neighbor_sharing.c&#34;&gt;tc_neighbor_sharing.c&lt;/a&gt;: Per-IP classification and rate limiting.&lt;/li&gt; &#xA; &lt;li&gt;examples/networking/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/tunnel_monitor&#34;&gt;tunnel_monitor/&lt;/a&gt;: Efficiently monitor traffic flows.&lt;/li&gt; &#xA; &lt;li&gt;examples/networking/vlan_learning/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/vlan_learning/vlan_learning.py&#34;&gt;vlan_learning.py&lt;/a&gt; examples/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/vlan_learning/vlan_learning.c&#34;&gt;vlan_learning.c&lt;/a&gt;: Demux Ethernet traffic into worker veth+namespaces.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;BPF Introspection:&lt;/h3&gt; &#xA;&lt;p&gt;Tools that help to introspect BPF programs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;introspection/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/introspection/bps.c&#34;&gt;bps.c&lt;/a&gt;: List all BPF programs loaded into the kernel. &#39;ps&#39; for BPF programs. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/introspection/bps_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;BPF guarantees that the programs loaded into the kernel cannot crash, and cannot run forever, but yet BPF is general purpose enough to perform many arbitrary types of computation. Currently, it is possible to write a program in C that will compile into a valid BPF program, yet it is vastly easier to write a C program that will compile into invalid BPF (C is like that). The user won&#39;t know until trying to run the program whether it was valid or not.&lt;/p&gt; &#xA;&lt;p&gt;With a BPF-specific frontend, one should be able to write in a language and receive feedback from the compiler on the validity as it pertains to a BPF backend. This toolkit aims to provide a frontend that can only create valid BPF programs while still harnessing its full flexibility.&lt;/p&gt; &#xA;&lt;p&gt;Furthermore, current integrations with BPF have a kludgy workflow, sometimes involving compiling directly in a linux kernel source tree. This toolchain aims to minimize the time that a developer spends getting BPF compiled, and instead focus on the applications that can be written and the problems that can be solved with BPF.&lt;/p&gt; &#xA;&lt;p&gt;The features of this toolkit include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;End-to-end BPF workflow in a shared library &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A modified C language for BPF backends&lt;/li&gt; &#xA;   &lt;li&gt;Integration with llvm-bpf backend for JIT&lt;/li&gt; &#xA;   &lt;li&gt;Dynamic (un)loading of JITed programs&lt;/li&gt; &#xA;   &lt;li&gt;Support for BPF kernel hooks: socket filters, tc classifiers, tc actions, and kprobes&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Bindings for Python&lt;/li&gt; &#xA; &lt;li&gt;Examples for socket filters, tc classifiers, and kprobes&lt;/li&gt; &#xA; &lt;li&gt;Self-contained tools for tracing a running system&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In the future, more bindings besides python will likely be supported. Feel free to add support for the language of your choice and send a pull request!&lt;/p&gt; &#xA;&lt;h2&gt;Tutorials&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/docs/tutorial.md&#34;&gt;docs/tutorial.md&lt;/a&gt;: Using bcc tools to solve performance, troubleshooting, and networking issues.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/docs/tutorial_bcc_python_developer.md&#34;&gt;docs/tutorial_bcc_python_developer.md&lt;/a&gt;: Developing new bcc programs using the Python interface.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Networking&lt;/h3&gt; &#xA;&lt;p&gt;At Red Hat Summit 2015, BCC was presented as part of a &lt;a href=&#34;http://www.devnation.org/#7784f1f7513e8542e4db519e79ff5eec&#34;&gt;session on BPF&lt;/a&gt;. A multi-host vxlan environment is simulated and a BPF program used to monitor one of the physical interfaces. The BPF program keeps statistics on the inner and outer IP addresses traversing the interface, and the userspace component turns those statistics into a graph showing the traffic distribution at multiple granularities. See the code &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/tunnel_monitor&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Already pumped up to commit some code? Here are some resources to join the discussions in the &lt;a href=&#34;https://www.iovisor.org/&#34;&gt;IOVisor&lt;/a&gt; community and see what you want to work on.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Mailing List:&lt;/em&gt; &lt;a href=&#34;https://lists.iovisor.org/mailman/listinfo/iovisor-dev&#34;&gt;https://lists.iovisor.org/mailman/listinfo/iovisor-dev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;IRC:&lt;/em&gt; #iovisor at irc.oftc.net&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;BCC Issue Tracker:&lt;/em&gt; &lt;a href=&#34;https://github.com/iovisor/bcc/issues&#34;&gt;Github Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;A guide for contributing scripts:&lt;/em&gt; &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/CONTRIBUTING-SCRIPTS.md&#34;&gt;CONTRIBUTING-SCRIPTS.md&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;External links&lt;/h2&gt; &#xA;&lt;p&gt;Looking for more information on BCC and how it&#39;s being used? You can find links to other BCC content on the web in &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/LINKS.md&#34;&gt;LINKS.md&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Genymobile/scrcpy</title>
    <updated>2022-05-29T02:04:57Z</updated>
    <id>tag:github.com,2022-05-29:/Genymobile/scrcpy</id>
    <link href="https://github.com/Genymobile/scrcpy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Display and control your Android device&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;scrcpy (v1.24)&lt;/h1&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/app/data/icon.svg?sanitize=true&#34; width=&#34;128&#34; height=&#34;128&#34; alt=&#34;scrcpy&#34; align=&#34;right&#34;&gt; &#xA;&lt;p&gt;&lt;em&gt;pronounced &#34;&lt;strong&gt;scr&lt;/strong&gt;een &lt;strong&gt;c&lt;/strong&gt;o&lt;strong&gt;py&lt;/strong&gt;&#34;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#translations&#34;&gt;Read in another language&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This application provides display and control of Android devices connected via USB or &lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#tcpip-wireless&#34;&gt;over TCP/IP&lt;/a&gt;. It does not require any &lt;em&gt;root&lt;/em&gt; access. It works on &lt;em&gt;GNU/Linux&lt;/em&gt;, &lt;em&gt;Windows&lt;/em&gt; and &lt;em&gt;macOS&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/assets/screenshot-debian-600.jpg&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;It focuses on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;lightness&lt;/strong&gt;: native, displays only the device screen&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;performance&lt;/strong&gt;: 30~120fps, depending on the device&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;quality&lt;/strong&gt;: 1920×1080 or above&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;low latency&lt;/strong&gt;: &lt;a href=&#34;https://github.com/Genymobile/scrcpy/pull/646&#34;&gt;35~70ms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;low startup time&lt;/strong&gt;: ~1 second to display the first image&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;non-intrusiveness&lt;/strong&gt;: nothing is left installed on the Android device&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;user benefits&lt;/strong&gt;: no account, no ads, no internet required&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;freedom&lt;/strong&gt;: free and open source software&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Its features include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#recording&#34;&gt;recording&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;mirroring with &lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#turn-screen-off&#34;&gt;Android device screen off&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#copy-paste&#34;&gt;copy-paste&lt;/a&gt; in both directions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#capture-configuration&#34;&gt;configurable quality&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Android device &lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#v4l2loopback&#34;&gt;as a webcam (V4L2)&lt;/a&gt; (Linux-only)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#physical-keyboard-simulation-hid&#34;&gt;physical keyboard simulation (HID)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#physical-mouse-simulation-hid&#34;&gt;physical mouse simulation (HID)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#otg&#34;&gt;OTG mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;and more…&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;The Android device requires at least API 21 (Android 5.0).&lt;/p&gt; &#xA;&lt;p&gt;Make sure you &lt;a href=&#34;https://developer.android.com/studio/command-line/adb.html#Enabling&#34;&gt;enable adb debugging&lt;/a&gt; on your device(s).&lt;/p&gt; &#xA;&lt;p&gt;On some devices, you also need to enable &lt;a href=&#34;https://github.com/Genymobile/scrcpy/issues/70#issuecomment-373286323&#34;&gt;an additional option&lt;/a&gt; to control it using a keyboard and mouse.&lt;/p&gt; &#xA;&lt;h2&gt;Get the app&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/scrcpy/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/vertical-allrepos/scrcpy.svg?sanitize=true&#34; alt=&#34;Packaging status&#34; align=&#34;right&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Summary&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux: &lt;code&gt;apt install scrcpy&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Windows: &lt;a href=&#34;https://github.com/Genymobile/scrcpy/releases/download/v1.24/scrcpy-win64-v1.24.zip&#34;&gt;download&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;macOS: &lt;code&gt;brew install scrcpy&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Build from sources: &lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/BUILD.md&#34;&gt;BUILD&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/BUILD.md#simple&#34;&gt;simplified process&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;On Debian and Ubuntu:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;apt install scrcpy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Arch Linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pacman -S scrcpy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://en.wikipedia.org/wiki/Snappy_(package_manager)&#34;&gt;Snap&lt;/a&gt; package is available: &lt;a href=&#34;https://snapstats.org/snaps/scrcpy&#34;&gt;&lt;code&gt;scrcpy&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For Fedora, a &lt;a href=&#34;https://fedoraproject.org/wiki/Category:Copr&#34;&gt;COPR&lt;/a&gt; package is available: &lt;a href=&#34;https://copr.fedorainfracloud.org/coprs/zeno/scrcpy/&#34;&gt;&lt;code&gt;scrcpy&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For Gentoo, an &lt;a href=&#34;https://wiki.gentoo.org/wiki/Ebuild&#34;&gt;Ebuild&lt;/a&gt; is available: &lt;a href=&#34;https://github.com/maggu2810/maggu2810-overlay/tree/master/app-mobilephone/scrcpy&#34;&gt;&lt;code&gt;scrcpy/&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also &lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/BUILD.md&#34;&gt;build the app manually&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/BUILD.md#simple&#34;&gt;simplified process&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;For Windows, a prebuilt archive with all the dependencies (including &lt;code&gt;adb&lt;/code&gt;) is available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Genymobile/scrcpy/releases/download/v1.24/scrcpy-win64-v1.24.zip&#34;&gt;&lt;code&gt;scrcpy-win64-v1.24.zip&lt;/code&gt;&lt;/a&gt;&lt;br&gt; &lt;sub&gt;SHA-256: &lt;code&gt;6ccb64cba0a3e75715e85a188daeb4f306a1985f8ce123eba92ba74fc9b27367&lt;/code&gt;&lt;/sub&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is also available in &lt;a href=&#34;https://chocolatey.org/&#34;&gt;Chocolatey&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;choco install scrcpy&#xA;choco install adb    # if you don&#39;t have it yet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And in &lt;a href=&#34;https://scoop.sh&#34;&gt;Scoop&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scoop install scrcpy&#xA;scoop install adb    # if you don&#39;t have it yet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also &lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/BUILD.md&#34;&gt;build the app manually&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;p&gt;The application is available in &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;. Just install it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install scrcpy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You need &lt;code&gt;adb&lt;/code&gt;, accessible from your &lt;code&gt;PATH&lt;/code&gt;. If you don&#39;t have it yet:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install android-platform-tools&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s also available in &lt;a href=&#34;https://www.macports.org/&#34;&gt;MacPorts&lt;/a&gt;, which sets up &lt;code&gt;adb&lt;/code&gt; for you:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo port install scrcpy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also &lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/BUILD.md&#34;&gt;build the app manually&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Run&lt;/h2&gt; &#xA;&lt;p&gt;Plug an Android device into your computer, and execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It accepts command-line arguments, listed by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Capture configuration&lt;/h3&gt; &#xA;&lt;h4&gt;Reduce size&lt;/h4&gt; &#xA;&lt;p&gt;Sometimes, it is useful to mirror an Android device at a lower resolution to increase performance.&lt;/p&gt; &#xA;&lt;p&gt;To limit both the width and height to some value (e.g. 1024):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --max-size 1024&#xA;scrcpy -m 1024  # short version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The other dimension is computed so that the Android device aspect ratio is preserved. That way, a device in 1920×1080 will be mirrored at 1024×576.&lt;/p&gt; &#xA;&lt;h4&gt;Change bit-rate&lt;/h4&gt; &#xA;&lt;p&gt;The default bit-rate is 8 Mbps. To change the video bitrate (e.g. to 2 Mbps):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --bit-rate 2M&#xA;scrcpy -b 2M  # short version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Limit frame rate&lt;/h4&gt; &#xA;&lt;p&gt;The capture frame rate can be limited:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --max-fps 15&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is officially supported since Android 10, but may work on earlier versions.&lt;/p&gt; &#xA;&lt;p&gt;The actual capture framerate may be printed to the console:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;scrcpy --print-fps&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It may also be enabled or disabled at any time with &lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;i&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Crop&lt;/h4&gt; &#xA;&lt;p&gt;The device screen may be cropped to mirror only part of the screen.&lt;/p&gt; &#xA;&lt;p&gt;This is useful, for example, to mirror only one eye of the Oculus Go:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --crop 1224:1440:0:0   # 1224x1440 at offset (0,0)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;--max-size&lt;/code&gt; is also specified, resizing is applied after cropping.&lt;/p&gt; &#xA;&lt;h4&gt;Lock video orientation&lt;/h4&gt; &#xA;&lt;p&gt;To lock the orientation of the mirroring:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --lock-video-orientation     # initial (current) orientation&#xA;scrcpy --lock-video-orientation=0   # natural orientation&#xA;scrcpy --lock-video-orientation=1   # 90° counterclockwise&#xA;scrcpy --lock-video-orientation=2   # 180°&#xA;scrcpy --lock-video-orientation=3   # 90° clockwise&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This affects recording orientation.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#rotation&#34;&gt;window may also be rotated&lt;/a&gt; independently.&lt;/p&gt; &#xA;&lt;h4&gt;Encoder&lt;/h4&gt; &#xA;&lt;p&gt;Some devices have more than one encoder, and some of them may cause issues or crash. It is possible to select a different encoder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --encoder OMX.qcom.video.encoder.avc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To list the available encoders, you can pass an invalid encoder name; the error will give the available encoders:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --encoder _&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Capture&lt;/h3&gt; &#xA;&lt;h4&gt;Recording&lt;/h4&gt; &#xA;&lt;p&gt;It is possible to record the screen while mirroring:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --record file.mp4&#xA;scrcpy -r file.mkv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To disable mirroring while recording:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --no-display --record file.mp4&#xA;scrcpy -Nr file.mkv&#xA;# interrupt recording with Ctrl+C&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&#34;Skipped frames&#34; are recorded, even if they are not displayed in real time (for performance reasons). Frames are &lt;em&gt;timestamped&lt;/em&gt; on the device, so &lt;a href=&#34;https://en.wikipedia.org/wiki/Packet_delay_variation&#34;&gt;packet delay variation&lt;/a&gt; does not impact the recorded file.&lt;/p&gt; &#xA;&lt;h4&gt;v4l2loopback&lt;/h4&gt; &#xA;&lt;p&gt;On Linux, it is possible to send the video stream to a v4l2 loopback device, so that the Android device can be opened like a webcam by any v4l2-capable tool.&lt;/p&gt; &#xA;&lt;p&gt;The module &lt;code&gt;v4l2loopback&lt;/code&gt; must be installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install v4l2loopback-dkms&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To create a v4l2 device:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo modprobe v4l2loopback&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a new video device in &lt;code&gt;/dev/videoN&lt;/code&gt;, where &lt;code&gt;N&lt;/code&gt; is an integer (more &lt;a href=&#34;https://github.com/umlaeute/v4l2loopback#options&#34;&gt;options&lt;/a&gt; are available to create several devices or devices with specific IDs).&lt;/p&gt; &#xA;&lt;p&gt;To list the enabled devices:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# requires v4l-utils package&#xA;v4l2-ctl --list-devices&#xA;&#xA;# simple but might be sufficient&#xA;ls /dev/video*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To start &lt;code&gt;scrcpy&lt;/code&gt; using a v4l2 sink:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --v4l2-sink=/dev/videoN&#xA;scrcpy --v4l2-sink=/dev/videoN --no-display  # disable mirroring window&#xA;scrcpy --v4l2-sink=/dev/videoN -N            # short version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(replace &lt;code&gt;N&lt;/code&gt; with the device ID, check with &lt;code&gt;ls /dev/video*&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Once enabled, you can open your video stream with a v4l2-capable tool:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ffplay -i /dev/videoN&#xA;vlc v4l2:///dev/videoN   # VLC might add some buffering delay&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, you could capture the video within &lt;a href=&#34;https://obsproject.com/&#34;&gt;OBS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Buffering&lt;/h4&gt; &#xA;&lt;p&gt;It is possible to add buffering. This increases latency, but reduces jitter (see &lt;a href=&#34;https://github.com/Genymobile/scrcpy/issues/2464&#34;&gt;#2464&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The option is available for display buffering:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --display-buffer=50  # add 50 ms buffering for display&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and V4L2 sink:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --v4l2-buffer=500    # add 500 ms buffering for v4l2 sink&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Connection&lt;/h3&gt; &#xA;&lt;h4&gt;TCP/IP (wireless)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;Scrcpy&lt;/em&gt; uses &lt;code&gt;adb&lt;/code&gt; to communicate with the device, and &lt;code&gt;adb&lt;/code&gt; can &lt;a href=&#34;https://developer.android.com/studio/command-line/adb.html#wireless&#34;&gt;connect&lt;/a&gt; to a device over TCP/IP. The device must be connected on the same network as the computer.&lt;/p&gt; &#xA;&lt;h5&gt;Automatic&lt;/h5&gt; &#xA;&lt;p&gt;An option &lt;code&gt;--tcpip&lt;/code&gt; allows to configure the connection automatically. There are two variants.&lt;/p&gt; &#xA;&lt;p&gt;If the device (accessible at 192.168.1.1 in this example) already listens on a port (typically 5555) for incoming &lt;em&gt;adb&lt;/em&gt; connections, then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --tcpip=192.168.1.1       # default port is 5555&#xA;scrcpy --tcpip=192.168.1.1:5555&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;em&gt;adb&lt;/em&gt; TCP/IP mode is disabled on the device (or if you don&#39;t know the IP address), connect the device over USB, then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --tcpip    # without arguments&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will automatically find the device IP address, enable TCP/IP mode, then connect to the device before starting.&lt;/p&gt; &#xA;&lt;h5&gt;Manual&lt;/h5&gt; &#xA;&lt;p&gt;Alternatively, it is possible to enable the TCP/IP connection manually using &lt;code&gt;adb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Plug the device into a USB port on your computer.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Connect the device to the same Wi-Fi network as your computer.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Get your device IP address, in Settings → About phone → Status, or by executing this command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb shell ip route | awk &#39;{print $9}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable &lt;code&gt;adb&lt;/code&gt; over TCP/IP on your device: &lt;code&gt;adb tcpip 5555&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Unplug your device.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Connect to your device: &lt;code&gt;adb connect DEVICE_IP:5555&lt;/code&gt; &lt;em&gt;(replace &lt;code&gt;DEVICE_IP&lt;/code&gt; with the device IP address you found)&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;scrcpy&lt;/code&gt; as usual.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Since Android 11, a &lt;a href=&#34;https://developer.android.com/studio/command-line/adb#connect-to-a-device-over-wi-fi-android-11+&#34;&gt;Wireless debugging option&lt;/a&gt; allows to bypass having to physically connect your device directly to your computer.&lt;/p&gt; &#xA;&lt;p&gt;If the connection randomly drops, run your &lt;code&gt;scrcpy&lt;/code&gt; command to reconnect. If it says there are no devices/emulators found, try running &lt;code&gt;adb connect DEVICE_IP:5555&lt;/code&gt; again, and then &lt;code&gt;scrcpy&lt;/code&gt; as usual. If it still says there are none found, try running &lt;code&gt;adb disconnect&lt;/code&gt;, and then run those two commands again.&lt;/p&gt; &#xA;&lt;p&gt;It may be useful to decrease the bit-rate and the resolution:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --bit-rate 2M --max-size 800&#xA;scrcpy -b2M -m800  # short version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Multi-devices&lt;/h4&gt; &#xA;&lt;p&gt;If several devices are listed in &lt;code&gt;adb devices&lt;/code&gt;, you can specify the &lt;em&gt;serial&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --serial 0123456789abcdef&#xA;scrcpy -s 0123456789abcdef  # short version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The serial may also be provided via the environment variable &lt;code&gt;ANDROID_SERIAL&lt;/code&gt; (also used by &lt;code&gt;adb&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;If the device is connected over TCP/IP:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --serial 192.168.0.1:5555&#xA;scrcpy -s 192.168.0.1:5555  # short version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If only one device is connected via either USB or TCP/IP, it is possible to select it automatically:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Select the only device connected via USB&#xA;scrcpy -d             # like adb -d&#xA;scrcpy --select-usb   # long version&#xA;&#xA;# Select the only device connected via TCP/IP&#xA;scrcpy -e             # like adb -e&#xA;scrcpy --select-tcpip # long version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can start several instances of &lt;em&gt;scrcpy&lt;/em&gt; for several devices.&lt;/p&gt; &#xA;&lt;h4&gt;Autostart on device connection&lt;/h4&gt; &#xA;&lt;p&gt;You could use &lt;a href=&#34;https://github.com/rom1v/autoadb&#34;&gt;AutoAdb&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;autoadb scrcpy -s &#39;{}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Tunnels&lt;/h4&gt; &#xA;&lt;p&gt;To connect to a remote device, it is possible to connect a local &lt;code&gt;adb&lt;/code&gt; client to a remote &lt;code&gt;adb&lt;/code&gt; server (provided they use the same version of the &lt;em&gt;adb&lt;/em&gt; protocol).&lt;/p&gt; &#xA;&lt;h5&gt;Remote ADB server&lt;/h5&gt; &#xA;&lt;p&gt;To connect to a remote &lt;em&gt;adb server&lt;/em&gt;, make the server listen on all interfaces:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb kill-server&#xA;adb -a nodaemon server start&#xA;# keep this open&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning: all communications between clients and the &lt;em&gt;adb server&lt;/em&gt; are unencrypted.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Suppose that this server is accessible at 192.168.1.2. Then, from another terminal, run &lt;code&gt;scrcpy&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export ADB_SERVER_SOCKET=tcp:192.168.1.2:5037&#xA;scrcpy --tunnel-host=192.168.1.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;scrcpy&lt;/code&gt; uses the local port used for &lt;code&gt;adb forward&lt;/code&gt; tunnel establishment (typically &lt;code&gt;27183&lt;/code&gt;, see &lt;code&gt;--port&lt;/code&gt;). It is also possible to force a different tunnel port (it may be useful in more complex situations, when more redirections are involved):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;scrcpy --tunnel-port=1234&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;SSH tunnel&lt;/h5&gt; &#xA;&lt;p&gt;To communicate with a remote &lt;em&gt;adb server&lt;/em&gt; securely, it is preferable to use an SSH tunnel.&lt;/p&gt; &#xA;&lt;p&gt;First, make sure the &lt;em&gt;adb server&lt;/em&gt; is running on the remote computer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb start-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, establish an SSH tunnel:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# local  5038 --&amp;gt; remote  5037&#xA;# local 27183 &amp;lt;-- remote 27183&#xA;ssh -CN -L5038:localhost:5037 -R27183:localhost:27183 your_remote_computer&#xA;# keep this open&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From another terminal, run &lt;code&gt;scrcpy&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export ADB_SERVER_SOCKET=tcp:localhost:5038&#xA;scrcpy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To avoid enabling remote port forwarding, you could force a forward connection instead (notice the &lt;code&gt;-L&lt;/code&gt; instead of &lt;code&gt;-R&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# local  5038 --&amp;gt; remote  5037&#xA;# local 27183 --&amp;gt; remote 27183&#xA;ssh -CN -L5038:localhost:5037 -L27183:localhost:27183 your_remote_computer&#xA;# keep this open&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From another terminal, run &lt;code&gt;scrcpy&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export ADB_SERVER_SOCKET=tcp:localhost:5038&#xA;scrcpy --force-adb-forward&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Like for wireless connections, it may be useful to reduce quality:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;scrcpy -b2M -m800 --max-fps 15&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Window configuration&lt;/h3&gt; &#xA;&lt;h4&gt;Title&lt;/h4&gt; &#xA;&lt;p&gt;By default, the window title is the device model. It can be changed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --window-title &#39;My device&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Position and size&lt;/h4&gt; &#xA;&lt;p&gt;The initial window position and size may be specified:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --window-x 100 --window-y 100 --window-width 800 --window-height 600&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Borderless&lt;/h4&gt; &#xA;&lt;p&gt;To disable window decorations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --window-borderless&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Always on top&lt;/h4&gt; &#xA;&lt;p&gt;To keep the &lt;em&gt;scrcpy&lt;/em&gt; window always on top:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --always-on-top&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Fullscreen&lt;/h4&gt; &#xA;&lt;p&gt;The app may be started directly in fullscreen:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --fullscreen&#xA;scrcpy -f  # short version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Fullscreen can then be toggled dynamically with &lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;f&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Rotation&lt;/h4&gt; &#xA;&lt;p&gt;The window may be rotated:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --rotation 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Possible values:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;0&lt;/code&gt;: no rotation&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;1&lt;/code&gt;: 90 degrees counterclockwise&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;2&lt;/code&gt;: 180 degrees&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;3&lt;/code&gt;: 90 degrees clockwise&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The rotation can also be changed dynamically with &lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;←&lt;/kbd&gt; &lt;em&gt;(left)&lt;/em&gt; and &lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;→&lt;/kbd&gt; &lt;em&gt;(right)&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;em&gt;scrcpy&lt;/em&gt; manages 3 different rotations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;r&lt;/kbd&gt; requests the device to switch between portrait and landscape (the current running app may refuse, if it does not support the requested orientation).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#lock-video-orientation&#34;&gt;&lt;code&gt;--lock-video-orientation&lt;/code&gt;&lt;/a&gt; changes the mirroring orientation (the orientation of the video sent from the device to the computer). This affects the recording.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--rotation&lt;/code&gt; (or &lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;←&lt;/kbd&gt;/&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;→&lt;/kbd&gt;) rotates only the window content. This affects only the display, not the recording.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Other mirroring options&lt;/h3&gt; &#xA;&lt;h4&gt;Read-only&lt;/h4&gt; &#xA;&lt;p&gt;To disable controls (everything which can interact with the device: input keys, mouse events, drag&amp;amp;drop files):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --no-control&#xA;scrcpy -n&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Display&lt;/h4&gt; &#xA;&lt;p&gt;If several displays are available, it is possible to select the display to mirror:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --display 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The list of display ids can be retrieved by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb shell dumpsys display   # search &#34;mDisplayId=&#34; in the output&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The secondary display may only be controlled if the device runs at least Android 10 (otherwise it is mirrored as read-only).&lt;/p&gt; &#xA;&lt;h4&gt;Stay awake&lt;/h4&gt; &#xA;&lt;p&gt;To prevent the device from sleeping after a delay when the device is plugged in:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --stay-awake&#xA;scrcpy -w&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The initial state is restored when &lt;em&gt;scrcpy&lt;/em&gt; is closed.&lt;/p&gt; &#xA;&lt;h4&gt;Turn screen off&lt;/h4&gt; &#xA;&lt;p&gt;It is possible to turn the device screen off while mirroring on start with a command-line option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --turn-screen-off&#xA;scrcpy -S&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or by pressing &lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;o&lt;/kbd&gt; at any time.&lt;/p&gt; &#xA;&lt;p&gt;To turn it back on, press &lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;o&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On Android, the &lt;code&gt;POWER&lt;/code&gt; button always turns the screen on. For convenience, if &lt;code&gt;POWER&lt;/code&gt; is sent via &lt;em&gt;scrcpy&lt;/em&gt; (via right-click or &lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;p&lt;/kbd&gt;), it will force to turn the screen off after a small delay (on a best effort basis). The physical &lt;code&gt;POWER&lt;/code&gt; button will still cause the screen to be turned on.&lt;/p&gt; &#xA;&lt;p&gt;It can also be useful to prevent the device from sleeping:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --turn-screen-off --stay-awake&#xA;scrcpy -Sw&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Power off on close&lt;/h4&gt; &#xA;&lt;p&gt;To turn the device screen off when closing &lt;em&gt;scrcpy&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --power-off-on-close&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Power on on start&lt;/h4&gt; &#xA;&lt;p&gt;By default, on start, the device is powered on.&lt;/p&gt; &#xA;&lt;p&gt;To prevent this behavior:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --no-power-on&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Show touches&lt;/h4&gt; &#xA;&lt;p&gt;For presentations, it may be useful to show physical touches (on the physical device).&lt;/p&gt; &#xA;&lt;p&gt;Android provides this feature in &lt;em&gt;Developers options&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Scrcpy&lt;/em&gt; provides an option to enable this feature on start and restore the initial value on exit:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --show-touches&#xA;scrcpy -t&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that it only shows &lt;em&gt;physical&lt;/em&gt; touches (by a finger on the device).&lt;/p&gt; &#xA;&lt;h4&gt;Disable screensaver&lt;/h4&gt; &#xA;&lt;p&gt;By default, &lt;em&gt;scrcpy&lt;/em&gt; does not prevent the screensaver from running on the computer.&lt;/p&gt; &#xA;&lt;p&gt;To disable it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --disable-screensaver&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Input control&lt;/h3&gt; &#xA;&lt;h4&gt;Rotate device screen&lt;/h4&gt; &#xA;&lt;p&gt;Press &lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;r&lt;/kbd&gt; to switch between portrait and landscape modes.&lt;/p&gt; &#xA;&lt;p&gt;Note that it rotates only if the application in foreground supports the requested orientation.&lt;/p&gt; &#xA;&lt;h4&gt;Copy-paste&lt;/h4&gt; &#xA;&lt;p&gt;Any time the Android clipboard changes, it is automatically synchronized to the computer clipboard.&lt;/p&gt; &#xA;&lt;p&gt;Any &lt;kbd&gt;Ctrl&lt;/kbd&gt; shortcut is forwarded to the device. In particular:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;c&lt;/kbd&gt; typically copies&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;x&lt;/kbd&gt; typically cuts&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;v&lt;/kbd&gt; typically pastes (after computer-to-device clipboard synchronization)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This typically works as you expect.&lt;/p&gt; &#xA;&lt;p&gt;The actual behavior depends on the active application though. For example, &lt;em&gt;Termux&lt;/em&gt; sends SIGINT on &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;c&lt;/kbd&gt; instead, and &lt;em&gt;K-9 Mail&lt;/em&gt; composes a new message.&lt;/p&gt; &#xA;&lt;p&gt;To copy, cut and paste in such cases (but only supported on Android &amp;gt;= 7):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;c&lt;/kbd&gt; injects &lt;code&gt;COPY&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;x&lt;/kbd&gt; injects &lt;code&gt;CUT&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;v&lt;/kbd&gt; injects &lt;code&gt;PASTE&lt;/code&gt; (after computer-to-device clipboard synchronization)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In addition, &lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;v&lt;/kbd&gt; injects the computer clipboard text as a sequence of key events. This is useful when the component does not accept text pasting (for example in &lt;em&gt;Termux&lt;/em&gt;), but it can break non-ASCII content.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING:&lt;/strong&gt; Pasting the computer clipboard to the device (either via &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;v&lt;/kbd&gt; or &lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;v&lt;/kbd&gt;) copies the content into the Android clipboard. As a consequence, any Android application could read its content. You should avoid pasting sensitive content (like passwords) that way.&lt;/p&gt; &#xA;&lt;p&gt;Some Android devices do not behave as expected when setting the device clipboard programmatically. An option &lt;code&gt;--legacy-paste&lt;/code&gt; is provided to change the behavior of &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;v&lt;/kbd&gt; and &lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;v&lt;/kbd&gt; so that they also inject the computer clipboard text as a sequence of key events (the same way as &lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;v&lt;/kbd&gt;).&lt;/p&gt; &#xA;&lt;p&gt;To disable automatic clipboard synchronization, use &lt;code&gt;--no-clipboard-autosync&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Pinch-to-zoom&lt;/h4&gt; &#xA;&lt;p&gt;To simulate &#34;pinch-to-zoom&#34;: &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;em&gt;click-and-move&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;More precisely, hold down &lt;kbd&gt;Ctrl&lt;/kbd&gt; while pressing the left-click button. Until the left-click button is released, all mouse movements scale and rotate the content (if supported by the app) relative to the center of the screen.&lt;/p&gt; &#xA;&lt;p&gt;Technically, &lt;em&gt;scrcpy&lt;/em&gt; generates additional touch events from a &#34;virtual finger&#34; at a location inverted through the center of the screen.&lt;/p&gt; &#xA;&lt;h4&gt;Physical keyboard simulation (HID)&lt;/h4&gt; &#xA;&lt;p&gt;By default, &lt;em&gt;scrcpy&lt;/em&gt; uses Android key or text injection: it works everywhere, but is limited to ASCII.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, &lt;code&gt;scrcpy&lt;/code&gt; can simulate a physical USB keyboard on Android to provide a better input experience (using &lt;a href=&#34;https://source.android.com/devices/accessories/aoa2#hid-support&#34;&gt;USB HID over AOAv2&lt;/a&gt;): the virtual keyboard is disabled and it works for all characters and IME.&lt;/p&gt; &#xA;&lt;p&gt;However, it only works if the device is connected via USB.&lt;/p&gt; &#xA;&lt;p&gt;Note: On Windows, it may only work in &lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#otg&#34;&gt;OTG mode&lt;/a&gt;, not while mirroring (it is not possible to open a USB device if it is already open by another process like the &lt;em&gt;adb daemon&lt;/em&gt;).&lt;/p&gt; &#xA;&lt;p&gt;To enable this mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --hid-keyboard&#xA;scrcpy -K  # short version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If it fails for some reason (for example because the device is not connected via USB), it automatically fallbacks to the default mode (with a log in the console). This allows using the same command line options when connected over USB and TCP/IP.&lt;/p&gt; &#xA;&lt;p&gt;In this mode, raw key events (scancodes) are sent to the device, independently of the host key mapping. Therefore, if your keyboard layout does not match, it must be configured on the Android device, in Settings → System → Languages and input → &lt;a href=&#34;https://github.com/Genymobile/scrcpy/pull/2632#issuecomment-923756915&#34;&gt;Physical keyboard&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This settings page can be started directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb shell am start -a android.settings.HARD_KEYBOARD_SETTINGS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, the option is only available when the HID keyboard is enabled (or when a physical keyboard is connected).&lt;/p&gt; &#xA;&lt;h4&gt;Physical mouse simulation (HID)&lt;/h4&gt; &#xA;&lt;p&gt;Similarly to the physical keyboard simulation, it is possible to simulate a physical mouse. Likewise, it only works if the device is connected by USB.&lt;/p&gt; &#xA;&lt;p&gt;By default, &lt;em&gt;scrcpy&lt;/em&gt; uses Android mouse events injection with absolute coordinates. By simulating a physical mouse, a mouse pointer appears on the Android device, and relative mouse motion, clicks and scrolls are injected.&lt;/p&gt; &#xA;&lt;p&gt;To enable this mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --hid-mouse&#xA;scrcpy -M  # short version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also add &lt;code&gt;--forward-all-clicks&lt;/code&gt; to &lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#right-click-and-middle-click&#34;&gt;forward all mouse buttons&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When this mode is enabled, the computer mouse is &#34;captured&#34; (the mouse pointer disappears from the computer and appears on the Android device instead).&lt;/p&gt; &#xA;&lt;p&gt;Special capture keys, either &lt;kbd&gt;Alt&lt;/kbd&gt; or &lt;kbd&gt;Super&lt;/kbd&gt;, toggle (disable or enable) the mouse capture. Use one of them to give the control of the mouse back to the computer.&lt;/p&gt; &#xA;&lt;h4&gt;OTG&lt;/h4&gt; &#xA;&lt;p&gt;It is possible to run &lt;em&gt;scrcpy&lt;/em&gt; with only physical keyboard and mouse simulation (HID), as if the computer keyboard and mouse were plugged directly to the device via an OTG cable.&lt;/p&gt; &#xA;&lt;p&gt;In this mode, &lt;code&gt;adb&lt;/code&gt; (USB debugging) is not necessary, and mirroring is disabled.&lt;/p&gt; &#xA;&lt;p&gt;To enable OTG mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --otg&#xA;# Pass the serial if several USB devices are available&#xA;scrcpy --otg -s 0123456789abcdef&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is possible to enable only HID keyboard or HID mouse:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --otg --hid-keyboard              # keyboard only&#xA;scrcpy --otg --hid-mouse                 # mouse only&#xA;scrcpy --otg --hid-keyboard --hid-mouse  # keyboard and mouse&#xA;# for convenience, enable both by default&#xA;scrcpy --otg                             # keyboard and mouse&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Like &lt;code&gt;--hid-keyboard&lt;/code&gt; and &lt;code&gt;--hid-mouse&lt;/code&gt;, it only works if the device is connected by USB.&lt;/p&gt; &#xA;&lt;h4&gt;Text injection preference&lt;/h4&gt; &#xA;&lt;p&gt;Two kinds of &lt;a href=&#34;https://blog.rom1v.com/2018/03/introducing-scrcpy/#handle-text-input&#34;&gt;events&lt;/a&gt; are generated when typing text:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;key events&lt;/em&gt;, signaling that a key is pressed or released;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;text events&lt;/em&gt;, signaling that a text has been entered.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By default, letters are injected using key events, so that the keyboard behaves as expected in games (typically for WASD keys).&lt;/p&gt; &#xA;&lt;p&gt;But this may &lt;a href=&#34;https://github.com/Genymobile/scrcpy/issues/650#issuecomment-512945343&#34;&gt;cause issues&lt;/a&gt;. If you encounter such a problem, you can avoid it by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --prefer-text&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(but this will break keyboard behavior in games)&lt;/p&gt; &#xA;&lt;p&gt;On the contrary, you could force to always inject raw key events:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --raw-key-events&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These options have no effect on HID keyboard (all key events are sent as scancodes in this mode).&lt;/p&gt; &#xA;&lt;h4&gt;Key repeat&lt;/h4&gt; &#xA;&lt;p&gt;By default, holding a key down generates repeated key events. This can cause performance problems in some games, where these events are useless anyway.&lt;/p&gt; &#xA;&lt;p&gt;To avoid forwarding repeated key events:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --no-key-repeat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This option has no effect on HID keyboard (key repeat is handled by Android directly in this mode).&lt;/p&gt; &#xA;&lt;h4&gt;Right-click and middle-click&lt;/h4&gt; &#xA;&lt;p&gt;By default, right-click triggers BACK (or POWER on) and middle-click triggers HOME. To disable these shortcuts and forward the clicks to the device instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --forward-all-clicks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;File drop&lt;/h3&gt; &#xA;&lt;h4&gt;Install APK&lt;/h4&gt; &#xA;&lt;p&gt;To install an APK, drag &amp;amp; drop an APK file (ending with &lt;code&gt;.apk&lt;/code&gt;) to the &lt;em&gt;scrcpy&lt;/em&gt; window.&lt;/p&gt; &#xA;&lt;p&gt;There is no visual feedback, a log is printed to the console.&lt;/p&gt; &#xA;&lt;h4&gt;Push file to device&lt;/h4&gt; &#xA;&lt;p&gt;To push a file to &lt;code&gt;/sdcard/Download/&lt;/code&gt; on the device, drag &amp;amp; drop a (non-APK) file to the &lt;em&gt;scrcpy&lt;/em&gt; window.&lt;/p&gt; &#xA;&lt;p&gt;There is no visual feedback, a log is printed to the console.&lt;/p&gt; &#xA;&lt;p&gt;The target directory can be changed on start:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --push-target=/sdcard/Movies/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Audio forwarding&lt;/h3&gt; &#xA;&lt;p&gt;Audio is not forwarded by &lt;em&gt;scrcpy&lt;/em&gt;. Use &lt;a href=&#34;https://github.com/rom1v/sndcpy&#34;&gt;sndcpy&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Also see &lt;a href=&#34;https://github.com/Genymobile/scrcpy/issues/14&#34;&gt;issue #14&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Shortcuts&lt;/h2&gt; &#xA;&lt;p&gt;In the following list, &lt;kbd&gt;MOD&lt;/kbd&gt; is the shortcut modifier. By default, it&#39;s (left) &lt;kbd&gt;Alt&lt;/kbd&gt; or (left) &lt;kbd&gt;Super&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It can be changed using &lt;code&gt;--shortcut-mod&lt;/code&gt;. Possible keys are &lt;code&gt;lctrl&lt;/code&gt;, &lt;code&gt;rctrl&lt;/code&gt;, &lt;code&gt;lalt&lt;/code&gt;, &lt;code&gt;ralt&lt;/code&gt;, &lt;code&gt;lsuper&lt;/code&gt; and &lt;code&gt;rsuper&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# use RCtrl for shortcuts&#xA;scrcpy --shortcut-mod=rctrl&#xA;&#xA;# use either LCtrl+LAlt or LSuper for shortcuts&#xA;scrcpy --shortcut-mod=lctrl+lalt,lsuper&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;kbd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Super_key_(keyboard_button)&#34;&gt;Super&lt;/a&gt;&lt;/kbd&gt; is typically the &lt;kbd&gt;Windows&lt;/kbd&gt; or &lt;kbd&gt;Cmd&lt;/kbd&gt; key.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Action&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Shortcut&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Switch fullscreen mode&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;f&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rotate display left&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;←&lt;/kbd&gt; &lt;em&gt;(left)&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rotate display right&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;→&lt;/kbd&gt; &lt;em&gt;(right)&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Resize window to 1:1 (pixel-perfect)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;g&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Resize window to remove black borders&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;w&lt;/kbd&gt; | &lt;em&gt;Double-left-click¹&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Click on &lt;code&gt;HOME&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;h&lt;/kbd&gt; | &lt;em&gt;Middle-click&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Click on &lt;code&gt;BACK&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;b&lt;/kbd&gt; | &lt;em&gt;Right-click²&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Click on &lt;code&gt;APP_SWITCH&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;s&lt;/kbd&gt; | &lt;em&gt;4th-click³&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Click on &lt;code&gt;MENU&lt;/code&gt; (unlock screen)⁴&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;m&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Click on &lt;code&gt;VOLUME_UP&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;↑&lt;/kbd&gt; &lt;em&gt;(up)&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Click on &lt;code&gt;VOLUME_DOWN&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;↓&lt;/kbd&gt; &lt;em&gt;(down)&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Click on &lt;code&gt;POWER&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;p&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Power on&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;em&gt;Right-click²&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Turn device screen off (keep mirroring)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;o&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Turn device screen on&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;o&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rotate device screen&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;r&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Expand notification panel&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;n&lt;/kbd&gt; | &lt;em&gt;5th-click³&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Expand settings panel&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;n&lt;/kbd&gt;+&lt;kbd&gt;n&lt;/kbd&gt; | &lt;em&gt;Double-5th-click³&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Collapse panels&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;n&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Copy to clipboard⁵&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;c&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Cut to clipboard⁵&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;x&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Synchronize clipboards and paste⁵&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;v&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Inject computer clipboard text&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;v&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Enable/disable FPS counter (on stdout)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;i&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Pinch-to-zoom&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;em&gt;click-and-move&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Drag &amp;amp; drop APK file&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Install APK from computer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Drag &amp;amp; drop non-APK file&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#push-file-to-device&#34;&gt;Push file to device&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;em&gt;¹Double-click on black borders to remove them.&lt;/em&gt;&lt;br&gt; &lt;em&gt;²Right-click turns the screen on if it was off, presses BACK otherwise.&lt;/em&gt;&lt;br&gt; &lt;em&gt;³4th and 5th mouse buttons, if your mouse has them.&lt;/em&gt;&lt;br&gt; &lt;em&gt;⁴For react-native apps in development, &lt;code&gt;MENU&lt;/code&gt; triggers development menu.&lt;/em&gt;&lt;br&gt; &lt;em&gt;⁵Only on Android &amp;gt;= 7.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Shortcuts with repeated keys are executed by releasing and pressing the key a second time. For example, to execute &#34;Expand settings panel&#34;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Press and keep pressing &lt;kbd&gt;MOD&lt;/kbd&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Then double-press &lt;kbd&gt;n&lt;/kbd&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Finally, release &lt;kbd&gt;MOD&lt;/kbd&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;All &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;em&gt;key&lt;/em&gt; shortcuts are forwarded to the device, so they are handled by the active application.&lt;/p&gt; &#xA;&lt;h2&gt;Custom paths&lt;/h2&gt; &#xA;&lt;p&gt;To use a specific &lt;code&gt;adb&lt;/code&gt; binary, configure its path in the environment variable &lt;code&gt;ADB&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ADB=/path/to/adb scrcpy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To override the path of the &lt;code&gt;scrcpy-server&lt;/code&gt; file, configure its path in &lt;code&gt;SCRCPY_SERVER_PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To override the icon, configure its path in &lt;code&gt;SCRCPY_ICON_PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Why the name &lt;em&gt;scrcpy&lt;/em&gt;?&lt;/h2&gt; &#xA;&lt;p&gt;A colleague challenged me to find a name as unpronounceable as &lt;a href=&#34;https://github.com/Genymobile/gnirehtet&#34;&gt;gnirehtet&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://man7.org/linux/man-pages/man3/strcpy.3.html&#34;&gt;&lt;code&gt;strcpy&lt;/code&gt;&lt;/a&gt; copies a &lt;strong&gt;str&lt;/strong&gt;ing; &lt;code&gt;scrcpy&lt;/code&gt; copies a &lt;strong&gt;scr&lt;/strong&gt;een.&lt;/p&gt; &#xA;&lt;h2&gt;How to build?&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/BUILD.md&#34;&gt;BUILD&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Common issues&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/FAQ.md&#34;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Developers&lt;/h2&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/DEVELOP.md&#34;&gt;developers page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Licence&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright (C) 2018 Genymobile&#xA;Copyright (C) 2018-2022 Romain Vimont&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;    http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Articles&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.rom1v.com/2018/03/introducing-scrcpy/&#34;&gt;Introducing scrcpy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.genymotion.com/blog/open-source-project-scrcpy-now-works-wirelessly/&#34;&gt;Scrcpy now works wirelessly&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;If you encounter a bug, please read the &lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/FAQ.md&#34;&gt;FAQ&lt;/a&gt; first, then open an &lt;a href=&#34;https://github.com/Genymobile/scrcpy/issues&#34;&gt;issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For general questions or discussions, you can also use:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Reddit: &lt;a href=&#34;https://www.reddit.com/r/scrcpy&#34;&gt;&lt;code&gt;r/scrcpy&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitter: &lt;a href=&#34;https://twitter.com/scrcpy_app&#34;&gt;&lt;code&gt;@scrcpy_app&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Translations&lt;/h2&gt; &#xA;&lt;p&gt;This README is available in other languages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/README.de.md&#34;&gt;Deutsch (German, &lt;code&gt;de&lt;/code&gt;) - v1.22&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/README.id.md&#34;&gt;Indonesian (Indonesia, &lt;code&gt;id&lt;/code&gt;) - v1.16&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/README.it.md&#34;&gt;Italiano (Italiano, &lt;code&gt;it&lt;/code&gt;) - v1.23&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/README.jp.md&#34;&gt;日本語 (Japanese, &lt;code&gt;jp&lt;/code&gt;) - v1.19&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/README.ko.md&#34;&gt;한국어 (Korean, &lt;code&gt;ko&lt;/code&gt;) - v1.11&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/README.pt-br.md&#34;&gt;Português Brasileiro (Brazilian Portuguese, &lt;code&gt;pt-BR&lt;/code&gt;) - v1.19&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/README.sp.md&#34;&gt;Español (Spanish, &lt;code&gt;sp&lt;/code&gt;) - v1.21&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/README.zh-Hans.md&#34;&gt;简体中文 (Simplified Chinese, &lt;code&gt;zh-Hans&lt;/code&gt;) - v1.22&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/README.zh-Hant.md&#34;&gt;繁體中文 (Traditional Chinese, &lt;code&gt;zh-Hant&lt;/code&gt;) - v1.15&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/README.tr.md&#34;&gt;Turkish (Turkish, &lt;code&gt;tr&lt;/code&gt;) - v1.18&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Only this README file is guaranteed to be up-to-date.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>openresty/lua-nginx-module</title>
    <updated>2022-05-29T02:04:57Z</updated>
    <id>tag:github.com,2022-05-29:/openresty/lua-nginx-module</id>
    <link href="https://github.com/openresty/lua-nginx-module" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Embed the Power of Lua into NGINX HTTP servers&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Name&lt;/h1&gt; &#xA;&lt;p&gt;ngx_http_lua_module - Embed the power of Lua into Nginx HTTP Servers.&lt;/p&gt; &#xA;&lt;p&gt;This module is a core component of &lt;a href=&#34;https://openresty.org&#34;&gt;OpenResty&lt;/a&gt;. If you are using this module, then you are essentially using OpenResty.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;This module is not distributed with the Nginx source.&lt;/em&gt; See &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#installation&#34;&gt;the installation instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is a core component of OpenResty. If you are using this module, then you are essentially using OpenResty :)&lt;/p&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#name&#34;&gt;Name&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#status&#34;&gt;Status&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#version&#34;&gt;Version&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#videos&#34;&gt;Videos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#typical-uses&#34;&gt;Typical Uses&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-compatibility&#34;&gt;Nginx Compatibility&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#building-as-a-dynamic-module&#34;&gt;Building as a dynamic module&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#c-macro-configurations&#34;&gt;C Macro Configurations&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#community&#34;&gt;Community&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#english-mailing-list&#34;&gt;English Mailing List&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#chinese-mailing-list&#34;&gt;Chinese Mailing List&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#code-repository&#34;&gt;Code Repository&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#bugs-and-patches&#34;&gt;Bugs and Patches&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#luajit-bytecode-support&#34;&gt;LuaJIT bytecode support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#system-environment-variable-support&#34;&gt;System Environment Variable Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#http-10-support&#34;&gt;HTTP 1.0 support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#statically-linking-pure-lua-modules&#34;&gt;Statically Linking Pure Lua Modules&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#data-sharing-within-an-nginx-worker&#34;&gt;Data Sharing within an Nginx Worker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#known-issues&#34;&gt;Known Issues&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcp-socket-connect-operation-issues&#34;&gt;TCP socket connect operation issues&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua-coroutine-yieldingresuming&#34;&gt;Lua Coroutine Yielding/Resuming&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua-variable-scope&#34;&gt;Lua Variable Scope&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#locations-configured-by-subrequest-directives-of-other-modules&#34;&gt;Locations Configured by Subrequest Directives of Other Modules&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#cosockets-not-available-everywhere&#34;&gt;Cosockets Not Available Everywhere&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#special-escaping-sequences&#34;&gt;Special Escaping Sequences&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#mixing-with-ssi-not-supported&#34;&gt;Mixing with SSI Not Supported&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#spdy-mode-not-fully-supported&#34;&gt;SPDY Mode Not Fully Supported&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#missing-data-on-short-circuited-requests&#34;&gt;Missing data on short circuited requests&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#todo&#34;&gt;TODO&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#changes&#34;&gt;Changes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#test-suite&#34;&gt;Test Suite&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#copyright-and-license&#34;&gt;Copyright and License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#see-also&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Directives&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Nginx API for Lua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#obsolete-sections&#34;&gt;Obsolete Sections&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#special-pcre-sequences&#34;&gt;Special PCRE Sequences&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lualuajit-bytecode-support&#34;&gt;Lua/LuaJIT bytecode support&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Status&lt;/h1&gt; &#xA;&lt;p&gt;Production ready.&lt;/p&gt; &#xA;&lt;h1&gt;Version&lt;/h1&gt; &#xA;&lt;p&gt;This document describes ngx_lua &lt;a href=&#34;https://github.com/openresty/lua-nginx-module/tags&#34;&gt;v0.10.19&lt;/a&gt;, which was released on 3 Nov, 2020.&lt;/p&gt; &#xA;&lt;h1&gt;Videos&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;YouTube video &#34;&lt;a href=&#34;https://youtu.be/eSfYLvVQMxw&#34;&gt;Hello World HTTP Example with OpenResty/Lua&lt;/a&gt;&#34;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://youtu.be/eSfYLvVQMxw&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/eSfYLvVQMxw/0.jpg&#34; alt=&#34;Hello World HTTP Example with OpenResty/Lua&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;YouTube video &#34;&lt;a href=&#34;https://youtu.be/vfYxOMl5LVY&#34;&gt;Write Your Own Lua Modules in OpenResty/Nginx Applications&lt;/a&gt;&#34;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://youtu.be/vfYxOMl5LVY&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/vfYxOMl5LVY/0.jpg&#34; alt=&#34;Write Your Own Lua Modules in OpenResty/Nginx Applications&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;YouTube video &#34;&lt;a href=&#34;https://youtu.be/L1c7aw4mSOo&#34;&gt;OpenResty&#39;s resty Command-Line Utility Demo&lt;/a&gt;&#34;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://youtu.be/L1c7aw4mSOo&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/L1c7aw4mSOo/0.jpg&#34; alt=&#34;OpenResty&#39;s resty Command-Line Utility Demo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;YouTube video &#34;&lt;a href=&#34;https://youtu.be/VkRYW_qLoME&#34;&gt;Measure Execution Time of Lua Code Correctly in OpenResty&lt;/a&gt;&#34;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://youtu.be/VkRYW_qLoME&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/VkRYW_qLoME/0.jpg&#34; alt=&#34;Measure Execution Time of Lua Code Correctly in OpenResty&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;YouTube video &#34;&lt;a href=&#34;https://youtu.be/EP7c0BM2yNo&#34;&gt;Precompile Lua Modules into LuaJIT Bytecode to Speedup OpenResty Startup&lt;/a&gt;&#34;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://youtu.be/EP7c0BM2yNo&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/EP7c0BM2yNo/0.jpg&#34; alt=&#34;Precompile Lua Modules into LuaJIT Bytecode to Speedup OpenResty Startup&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You are welcome to subscribe to our &lt;a href=&#34;https://www.youtube.com/channel/UCXVmwF-UCScv2ftsGoMqxhw&#34;&gt;official YouTube channel, OpenResty&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Synopsis&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; # set search paths for pure Lua external libraries (&#39;;;&#39; is the default path):&#xA; lua_package_path &#39;/foo/bar/?.lua;/blah/?.lua;;&#39;;&#xA;&#xA; # set search paths for Lua external libraries written in C (can also use &#39;;;&#39;):&#xA; lua_package_cpath &#39;/bar/baz/?.so;/blah/blah/?.so;;&#39;;&#xA;&#xA; server {&#xA;     location /lua_content {&#xA;         # MIME type determined by default_type:&#xA;         default_type &#39;text/plain&#39;;&#xA;&#xA;         content_by_lua_block {&#xA;             ngx.say(&#39;Hello,world!&#39;)&#xA;         }&#xA;     }&#xA;&#xA;     location /nginx_var {&#xA;         # MIME type determined by default_type:&#xA;         default_type &#39;text/plain&#39;;&#xA;&#xA;         # try access /nginx_var?a=hello,world&#xA;         content_by_lua_block {&#xA;             ngx.say(ngx.var.arg_a)&#xA;         }&#xA;     }&#xA;&#xA;     location = /request_body {&#xA;         client_max_body_size 50k;&#xA;         client_body_buffer_size 50k;&#xA;&#xA;         content_by_lua_block {&#xA;             ngx.req.read_body()  -- explicitly read the req body&#xA;             local data = ngx.req.get_body_data()&#xA;             if data then&#xA;                 ngx.say(&#34;body data:&#34;)&#xA;                 ngx.print(data)&#xA;                 return&#xA;             end&#xA;&#xA;             -- body may get buffered in a temp file:&#xA;             local file = ngx.req.get_body_file()&#xA;             if file then&#xA;                 ngx.say(&#34;body is in file &#34;, file)&#xA;             else&#xA;                 ngx.say(&#34;no body found&#34;)&#xA;             end&#xA;         }&#xA;     }&#xA;&#xA;     # transparent non-blocking I/O in Lua via subrequests&#xA;     # (well, a better way is to use cosockets)&#xA;     location = /lua {&#xA;         # MIME type determined by default_type:&#xA;         default_type &#39;text/plain&#39;;&#xA;&#xA;         content_by_lua_block {&#xA;             local res = ngx.location.capture(&#34;/some_other_location&#34;)&#xA;             if res then&#xA;                 ngx.say(&#34;status: &#34;, res.status)&#xA;                 ngx.say(&#34;body:&#34;)&#xA;                 ngx.print(res.body)&#xA;             end&#xA;         }&#xA;     }&#xA;&#xA;     location = /foo {&#xA;         rewrite_by_lua_block {&#xA;             res = ngx.location.capture(&#34;/memc&#34;,&#xA;                 { args = { cmd = &#34;incr&#34;, key = ngx.var.uri } }&#xA;             )&#xA;         }&#xA;&#xA;         proxy_pass http://blah.blah.com;&#xA;     }&#xA;&#xA;     location = /mixed {&#xA;         rewrite_by_lua_file /path/to/rewrite.lua;&#xA;         access_by_lua_file /path/to/access.lua;&#xA;         content_by_lua_file /path/to/content.lua;&#xA;     }&#xA;&#xA;     # use nginx var in code path&#xA;     # CAUTION: contents in nginx var must be carefully filtered,&#xA;     # otherwise there&#39;ll be great security risk!&#xA;     location ~ ^/app/([-_a-zA-Z0-9/]+) {&#xA;         set $path $1;&#xA;         content_by_lua_file /path/to/lua/app/root/$path.lua;&#xA;     }&#xA;&#xA;     location / {&#xA;        client_max_body_size 100k;&#xA;        client_body_buffer_size 100k;&#xA;&#xA;        access_by_lua_block {&#xA;            -- check the client IP address is in our black list&#xA;            if ngx.var.remote_addr == &#34;132.5.72.3&#34; then&#xA;                ngx.exit(ngx.HTTP_FORBIDDEN)&#xA;            end&#xA;&#xA;            -- check if the URI contains bad words&#xA;            if ngx.var.uri and&#xA;                   string.match(ngx.var.request_body, &#34;evil&#34;)&#xA;            then&#xA;                return ngx.redirect(&#34;/terms_of_use.html&#34;)&#xA;            end&#xA;&#xA;            -- tests passed&#xA;        }&#xA;&#xA;        # proxy_pass/fastcgi_pass/etc settings&#xA;     }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Description&lt;/h1&gt; &#xA;&lt;p&gt;This module embeds &lt;a href=&#34;https://luajit.org/luajit.html&#34;&gt;LuaJIT 2.0/2.1&lt;/a&gt; into Nginx. It is a core component of &lt;a href=&#34;https://openresty.org&#34;&gt;OpenResty&lt;/a&gt;. If you are using this module, then you are essentially using OpenResty.&lt;/p&gt; &#xA;&lt;p&gt;Since version &lt;code&gt;v0.10.16&lt;/code&gt; of this module, the standard Lua interpreter (also known as &#34;PUC-Rio Lua&#34;) is not supported anymore. This document interchangeably uses the terms &#34;Lua&#34; and &#34;LuaJIT&#34; to refer to the LuaJIT interpreter.&lt;/p&gt; &#xA;&lt;p&gt;By leveraging Nginx&#39;s subrequests, this module allows the integration of the powerful Lua threads (known as Lua &#34;coroutines&#34;) into the Nginx event model.&lt;/p&gt; &#xA;&lt;p&gt;Unlike &lt;a href=&#34;https://httpd.apache.org/docs/trunk/mod/mod_lua.html&#34;&gt;Apache&#39;s mod_lua&lt;/a&gt; and &lt;a href=&#34;http://redmine.lighttpd.net/wiki/1/Docs:ModMagnet&#34;&gt;Lighttpd&#39;s mod_magnet&lt;/a&gt;, Lua code executed using this module can be &lt;em&gt;100% non-blocking&lt;/em&gt; on network traffic as long as the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Nginx API for Lua&lt;/a&gt; provided by this module is used to handle requests to upstream services such as MySQL, PostgreSQL, Memcached, Redis, or upstream HTTP web services.&lt;/p&gt; &#xA;&lt;p&gt;At least the following Lua libraries and Nginx modules can be used with this module:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openresty/lua-resty-memcached&#34;&gt;lua-resty-memcached&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openresty/lua-resty-mysql&#34;&gt;lua-resty-mysql&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openresty/lua-resty-redis&#34;&gt;lua-resty-redis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openresty/lua-resty-dns&#34;&gt;lua-resty-dns&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openresty/lua-resty-upload&#34;&gt;lua-resty-upload&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openresty/lua-resty-websocket&#34;&gt;lua-resty-websocket&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openresty/lua-resty-lock&#34;&gt;lua-resty-lock&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cloudflare/lua-resty-logger-socket&#34;&gt;lua-resty-logger-socket&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openresty/lua-resty-lrucache&#34;&gt;lua-resty-lrucache&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openresty/lua-resty-string&#34;&gt;lua-resty-string&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/openresty/memc-nginx-module&#34;&gt;ngx_memc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FRiCKLE/ngx_postgres&#34;&gt;ngx_postgres&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/openresty/redis2-nginx-module&#34;&gt;ngx_redis2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://wiki.nginx.org/HttpRedisModule&#34;&gt;ngx_redis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_proxy_module.html&#34;&gt;ngx_proxy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html&#34;&gt;ngx_fastcgi&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Almost any Nginx modules can be used with this ngx_lua module by means of &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxlocationcapture&#34;&gt;ngx.location.capture&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxlocationcapture_multi&#34;&gt;ngx.location.capture_multi&lt;/a&gt; but it is recommended to use those &lt;code&gt;lua-resty-*&lt;/code&gt; libraries instead of creating subrequests to access the Nginx upstream modules because the former is usually much more flexible and memory-efficient.&lt;/p&gt; &#xA;&lt;p&gt;The Lua interpreter (also known as &#34;Lua State&#34; or &#34;LuaJIT VM instance&#34;) is shared across all the requests in a single Nginx worker process to minimize memory use. Request contexts are segregated using lightweight Lua coroutines.&lt;/p&gt; &#xA;&lt;p&gt;Loaded Lua modules persist in the Nginx worker process level resulting in a small memory footprint in Lua even when under heavy loads.&lt;/p&gt; &#xA;&lt;p&gt;This module is plugged into Nginx&#39;s &#34;http&#34; subsystem so it can only speaks downstream communication protocols in the HTTP family (HTTP 0.9/1.0/1.1/2.0, WebSockets, etc...). If you want to do generic TCP communications with the downstream clients, then you should use the &lt;a href=&#34;https://github.com/openresty/stream-lua-nginx-module#readme&#34;&gt;ngx_stream_lua&lt;/a&gt; module instead, which offers a compatible Lua API.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Typical Uses&lt;/h1&gt; &#xA;&lt;p&gt;Just to name a few:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mashup&#39;ing and processing outputs of various Nginx upstream outputs (proxy, drizzle, postgres, redis, memcached, and etc) in Lua,&lt;/li&gt; &#xA; &lt;li&gt;doing arbitrarily complex access control and security checks in Lua before requests actually reach the upstream backends,&lt;/li&gt; &#xA; &lt;li&gt;manipulating response headers in an arbitrary way (by Lua)&lt;/li&gt; &#xA; &lt;li&gt;fetching backend information from external storage backends (like redis, memcached, mysql, postgresql) and use that information to choose which upstream backend to access on-the-fly,&lt;/li&gt; &#xA; &lt;li&gt;coding up arbitrarily complex web applications in a content handler using synchronous but still non-blocking access to the database backends and other storage,&lt;/li&gt; &#xA; &lt;li&gt;doing very complex URL dispatch in Lua at rewrite phase,&lt;/li&gt; &#xA; &lt;li&gt;using Lua to implement advanced caching mechanism for Nginx&#39;s subrequests and arbitrary locations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The possibilities are unlimited as the module allows bringing together various elements within Nginx as well as exposing the power of the Lua language to the user. The module provides the full flexibility of scripting while offering performance levels comparable with native C language programs both in terms of CPU time as well as memory footprint thanks to LuaJIT 2.x.&lt;/p&gt; &#xA;&lt;p&gt;Other scripting language implementations typically struggle to match this performance level.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Nginx Compatibility&lt;/h1&gt; &#xA;&lt;p&gt;The latest version of this module is compatible with the following versions of Nginx:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;1.19.x (last tested: 1.19.3)&lt;/li&gt; &#xA; &lt;li&gt;1.17.x (last tested: 1.17.8)&lt;/li&gt; &#xA; &lt;li&gt;1.15.x (last tested: 1.15.8)&lt;/li&gt; &#xA; &lt;li&gt;1.14.x&lt;/li&gt; &#xA; &lt;li&gt;1.13.x (last tested: 1.13.6)&lt;/li&gt; &#xA; &lt;li&gt;1.12.x&lt;/li&gt; &#xA; &lt;li&gt;1.11.x (last tested: 1.11.2)&lt;/li&gt; &#xA; &lt;li&gt;1.10.x&lt;/li&gt; &#xA; &lt;li&gt;1.9.x (last tested: 1.9.15)&lt;/li&gt; &#xA; &lt;li&gt;1.8.x&lt;/li&gt; &#xA; &lt;li&gt;1.7.x (last tested: 1.7.10)&lt;/li&gt; &#xA; &lt;li&gt;1.6.x&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Nginx cores older than 1.6.0 (exclusive) are &lt;em&gt;not&lt;/em&gt; supported.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;It is &lt;em&gt;highly&lt;/em&gt; recommended to use &lt;a href=&#34;https://openresty.org&#34;&gt;OpenResty releases&lt;/a&gt; which bundle Nginx, ngx_lua (this module), LuaJIT, as well as other powerful companion Nginx modules and Lua libraries.&lt;/p&gt; &#xA;&lt;p&gt;It is discouraged to build this module with Nginx yourself since it is tricky to set up exactly right.&lt;/p&gt; &#xA;&lt;p&gt;Note that Nginx, LuaJIT, and OpenSSL official releases have various limitations and long standing bugs that can cause some of this module&#39;s features to be disabled, not work properly, or run slower. Official OpenResty releases are recommended because they bundle &lt;a href=&#34;https://github.com/openresty/luajit2&#34;&gt;OpenResty&#39;s optimized LuaJIT 2.1 fork&lt;/a&gt; and &lt;a href=&#34;https://github.com/openresty/openresty/tree/master/patches&#34;&gt;Nginx/OpenSSL patches&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, ngx_lua can be manually compiled into Nginx:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;LuaJIT can be downloaded from the &lt;a href=&#34;https://github.com/openresty/luajit2/releases&#34;&gt;latest release of OpenResty&#39;s LuaJIT fork&lt;/a&gt;. The official LuaJIT 2.x releases are also supported, although performance will be significantly lower for reasons elaborated above&lt;/li&gt; &#xA; &lt;li&gt;Download the latest version of the ngx_devel_kit (NDK) module &lt;a href=&#34;https://github.com/simplresty/ngx_devel_kit/tags&#34;&gt;HERE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Download the latest version of ngx_lua &lt;a href=&#34;https://github.com/openresty/lua-nginx-module/tags&#34;&gt;HERE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Download the latest supported version of Nginx &lt;a href=&#34;https://nginx.org/&#34;&gt;HERE&lt;/a&gt; (See &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-compatibility&#34;&gt;Nginx Compatibility&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Download the latest version of the lua-resty-core &lt;a href=&#34;https://github.com/openresty/lua-resty-core&#34;&gt;HERE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Download the latest version of the lua-resty-lrucache &lt;a href=&#34;https://github.com/openresty/lua-resty-lrucache&#34;&gt;HERE&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Build the source with this module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA; wget &#39;https://openresty.org/download/nginx-1.19.3.tar.gz&#39;&#xA; tar -xzvf nginx-1.19.3.tar.gz&#xA; cd nginx-1.19.3/&#xA;&#xA; # tell nginx&#39;s build system where to find LuaJIT 2.0:&#xA; export LUAJIT_LIB=/path/to/luajit/lib&#xA; export LUAJIT_INC=/path/to/luajit/include/luajit-2.0&#xA;&#xA; # tell nginx&#39;s build system where to find LuaJIT 2.1:&#xA; export LUAJIT_LIB=/path/to/luajit/lib&#xA; export LUAJIT_INC=/path/to/luajit/include/luajit-2.1&#xA;&#xA; # Here we assume Nginx is to be installed under /opt/nginx/.&#xA; ./configure --prefix=/opt/nginx \&#xA;         --with-ld-opt=&#34;-Wl,-rpath,/path/to/luajit/lib&#34; \&#xA;         --add-module=/path/to/ngx_devel_kit \&#xA;         --add-module=/path/to/lua-nginx-module&#xA;&#xA; # Note that you may also want to add `./configure` options which are used in your&#xA; # current nginx build.&#xA; # You can get usually those options using command nginx -V&#xA;&#xA; # you can change the parallelism number 2 below to fit the number of spare CPU cores in your&#xA; # machine.&#xA; make -j2&#xA; make install&#xA;&#xA; # Note that this version of lug-nginx-module not allow to set `lua_load_resty_core off;` any more.&#xA; # So, you have to install `lua-resty-core` and `lua-resty-lrucache` manually as below.&#xA;&#xA; cd lua-resty-core&#xA; make install PREFIX=/opt/nginx&#xA; cd lua-resty-lrucache&#xA; make install PREFIX=/opt/nginx&#xA;&#xA; # add necessary `lua_package_path` directive to `nginx.conf`, in the http context&#xA;&#xA; lua_package_path &#34;/opt/nginx/lib/lua/?.lua;;&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building as a dynamic module&lt;/h2&gt; &#xA;&lt;p&gt;Starting from NGINX 1.9.11, you can also compile this module as a dynamic module, by using the &lt;code&gt;--add-dynamic-module=PATH&lt;/code&gt; option instead of &lt;code&gt;--add-module=PATH&lt;/code&gt; on the &lt;code&gt;./configure&lt;/code&gt; command line above. And then you can explicitly load the module in your &lt;code&gt;nginx.conf&lt;/code&gt; via the &lt;a href=&#34;https://nginx.org/en/docs/ngx_core_module.html#load_module&#34;&gt;load_module&lt;/a&gt; directive, for example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; load_module /path/to/modules/ndk_http_module.so;  # assuming NDK is built as a dynamic module too&#xA; load_module /path/to/modules/ngx_http_lua_module.so;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;C Macro Configurations&lt;/h2&gt; &#xA;&lt;p&gt;While building this module either via OpenResty or with the Nginx core, you can define the following C macros via the C compiler options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;NGX_LUA_USE_ASSERT&lt;/code&gt; When defined, will enable assertions in the ngx_lua C code base. Recommended for debugging or testing builds. It can introduce some (small) runtime overhead when enabled. This macro was first introduced in the &lt;code&gt;v0.9.10&lt;/code&gt; release.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NGX_LUA_ABORT_AT_PANIC&lt;/code&gt; When the LuaJIT VM panics, ngx_lua will instruct the current nginx worker process to quit gracefully by default. By specifying this C macro, ngx_lua will abort the current nginx worker process (which usually result in a core dump file) immediately. This option is useful for debugging VM panics. This option was first introduced in the &lt;code&gt;v0.9.8&lt;/code&gt; release.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To enable one or more of these macros, just pass extra C compiler options to the &lt;code&gt;./configure&lt;/code&gt; script of either Nginx or OpenResty. For instance,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure --with-cc-opt=&#34;-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Community&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;English Mailing List&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://groups.google.com/group/openresty-en&#34;&gt;openresty-en&lt;/a&gt; mailing list is for English speakers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Chinese Mailing List&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://groups.google.com/group/openresty&#34;&gt;openresty&lt;/a&gt; mailing list is for Chinese speakers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Code Repository&lt;/h1&gt; &#xA;&lt;p&gt;The code repository of this project is hosted on GitHub at &lt;a href=&#34;https://github.com/openresty/lua-nginx-module&#34;&gt;openresty/lua-nginx-module&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Bugs and Patches&lt;/h1&gt; &#xA;&lt;p&gt;Please submit bug reports, wishlists, or patches by&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;creating a ticket on the &lt;a href=&#34;https://github.com/openresty/lua-nginx-module/issues&#34;&gt;GitHub Issue Tracker&lt;/a&gt;,&lt;/li&gt; &#xA; &lt;li&gt;or posting to the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#community&#34;&gt;OpenResty community&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;LuaJIT bytecode support&lt;/h1&gt; &#xA;&lt;p&gt;Watch YouTube video &#34;&lt;a href=&#34;https://youtu.be/VkRYW_qLoME&#34;&gt;Measure Execution Time of Lua Code Correctly in OpenResty&lt;/a&gt;&#34;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/EP7c0BM2yNo&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/EP7c0BM2yNo/0.jpg&#34; alt=&#34;Precompile Lua Modules into LuaJIT Bytecode to Speedup OpenResty Startup&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;As from the &lt;code&gt;v0.5.0rc32&lt;/code&gt; release, all &lt;code&gt;*_by_lua_file&lt;/code&gt; configure directives (such as &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#content_by_lua_file&#34;&gt;content_by_lua_file&lt;/a&gt;) support loading LuaJIT 2.0/2.1 raw bytecode files directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA; /path/to/luajit/bin/luajit -b /path/to/input_file.lua /path/to/output_file.ljbc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;-bg&lt;/code&gt; option can be used to include debug information in the LuaJIT bytecode file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA; /path/to/luajit/bin/luajit -bg /path/to/input_file.lua /path/to/output_file.ljbc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please refer to the official LuaJIT documentation on the &lt;code&gt;-b&lt;/code&gt; option for more details:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://luajit.org/running.html#opt_b&#34;&gt;https://luajit.org/running.html#opt_b&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that the bytecode files generated by LuaJIT 2.1 is &lt;em&gt;not&lt;/em&gt; compatible with LuaJIT 2.0, and vice versa. The support for LuaJIT 2.1 bytecode was first added in ngx_lua v0.9.3.&lt;/p&gt; &#xA;&lt;p&gt;Attempts to load standard Lua 5.1 bytecode files into ngx_lua instances linked to LuaJIT 2.0/2.1 (or vice versa) will result in an Nginx error message such as the one below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[error] 13909#0: *1 failed to load Lua inlined code: bad byte-code header in /path/to/test_file.luac&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Loading bytecode files via the Lua primitives like &lt;code&gt;require&lt;/code&gt; and &lt;code&gt;dofile&lt;/code&gt; should always work as expected.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;System Environment Variable Support&lt;/h1&gt; &#xA;&lt;p&gt;If you want to access the system environment variable, say, &lt;code&gt;foo&lt;/code&gt;, in Lua via the standard Lua API &lt;a href=&#34;https://www.lua.org/manual/5.1/manual.html#pdf-os.getenv&#34;&gt;os.getenv&lt;/a&gt;, then you should also list this environment variable name in your &lt;code&gt;nginx.conf&lt;/code&gt; file via the &lt;a href=&#34;https://nginx.org/en/docs/ngx_core_module.html#env&#34;&gt;env directive&lt;/a&gt;. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; env foo;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;HTTP 1.0 support&lt;/h1&gt; &#xA;&lt;p&gt;The HTTP 1.0 protocol does not support chunked output and requires an explicit &lt;code&gt;Content-Length&lt;/code&gt; header when the response body is not empty in order to support the HTTP 1.0 keep-alive. So when a HTTP 1.0 request is made and the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_http10_buffering&#34;&gt;lua_http10_buffering&lt;/a&gt; directive is turned &lt;code&gt;on&lt;/code&gt;, ngx_lua will buffer the output of &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsay&#34;&gt;ngx.say&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxprint&#34;&gt;ngx.print&lt;/a&gt; calls and also postpone sending response headers until all the response body output is received. At that time ngx_lua can calculate the total length of the body and construct a proper &lt;code&gt;Content-Length&lt;/code&gt; header to return to the HTTP 1.0 client. If the &lt;code&gt;Content-Length&lt;/code&gt; response header is set in the running Lua code, however, this buffering will be disabled even if the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_http10_buffering&#34;&gt;lua_http10_buffering&lt;/a&gt; directive is turned &lt;code&gt;on&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For large streaming output responses, it is important to disable the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_http10_buffering&#34;&gt;lua_http10_buffering&lt;/a&gt; directive to minimise memory usage.&lt;/p&gt; &#xA;&lt;p&gt;Note that common HTTP benchmark tools such as &lt;code&gt;ab&lt;/code&gt; and &lt;code&gt;http_load&lt;/code&gt; issue HTTP 1.0 requests by default. To force &lt;code&gt;curl&lt;/code&gt; to send HTTP 1.0 requests, use the &lt;code&gt;-0&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Statically Linking Pure Lua Modules&lt;/h1&gt; &#xA;&lt;p&gt;With LuaJIT 2.x, it is possible to statically link the bytecode of pure Lua modules into the Nginx executable.&lt;/p&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;luajit&lt;/code&gt; executable to compile &lt;code&gt;.lua&lt;/code&gt; Lua module files to &lt;code&gt;.o&lt;/code&gt; object files containing the exported bytecode data, and then link the &lt;code&gt;.o&lt;/code&gt; files directly in your Nginx build.&lt;/p&gt; &#xA;&lt;p&gt;Below is a trivial example to demonstrate this. Consider that we have the following &lt;code&gt;.lua&lt;/code&gt; file named &lt;code&gt;foo.lua&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; -- foo.lua&#xA; local _M = {}&#xA;&#xA; function _M.go()&#xA;     print(&#34;Hello from foo&#34;)&#xA; end&#xA;&#xA; return _M&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then we compile this &lt;code&gt;.lua&lt;/code&gt; file to &lt;code&gt;foo.o&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA; /path/to/luajit/bin/luajit -bg foo.lua foo.o&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;What matters here is the name of the &lt;code&gt;.lua&lt;/code&gt; file, which determines how you use this module later on the Lua land. The file name &lt;code&gt;foo.o&lt;/code&gt; does not matter at all except the &lt;code&gt;.o&lt;/code&gt; file extension (which tells &lt;code&gt;luajit&lt;/code&gt; what output format is used). If you want to strip the Lua debug information from the resulting bytecode, you can just specify the &lt;code&gt;-b&lt;/code&gt; option above instead of &lt;code&gt;-bg&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then when building Nginx or OpenResty, pass the &lt;code&gt;--with-ld-opt=&#34;foo.o&#34;&lt;/code&gt; option to the &lt;code&gt;./configure&lt;/code&gt; script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA; ./configure --with-ld-opt=&#34;/path/to/foo.o&#34; ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, you can just do the following in any Lua code run by ngx_lua:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local foo = require &#34;foo&#34;&#xA; foo.go()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And this piece of code no longer depends on the external &lt;code&gt;foo.lua&lt;/code&gt; file any more because it has already been compiled into the &lt;code&gt;nginx&lt;/code&gt; executable.&lt;/p&gt; &#xA;&lt;p&gt;If you want to use dot in the Lua module name when calling &lt;code&gt;require&lt;/code&gt;, as in&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local foo = require &#34;resty.foo&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then you need to rename the &lt;code&gt;foo.lua&lt;/code&gt; file to &lt;code&gt;resty_foo.lua&lt;/code&gt; before compiling it down to a &lt;code&gt;.o&lt;/code&gt; file with the &lt;code&gt;luajit&lt;/code&gt; command-line utility.&lt;/p&gt; &#xA;&lt;p&gt;It is important to use exactly the same version of LuaJIT when compiling &lt;code&gt;.lua&lt;/code&gt; files to &lt;code&gt;.o&lt;/code&gt; files as building nginx + ngx_lua. This is because the LuaJIT bytecode format may be incompatible between different LuaJIT versions. When the bytecode format is incompatible, you will see a Lua runtime error saying that the Lua module is not found.&lt;/p&gt; &#xA;&lt;p&gt;When you have multiple &lt;code&gt;.lua&lt;/code&gt; files to compile and link, then just specify their &lt;code&gt;.o&lt;/code&gt; files at the same time in the value of the &lt;code&gt;--with-ld-opt&lt;/code&gt; option. For instance,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA; ./configure --with-ld-opt=&#34;/path/to/foo.o /path/to/bar.o&#34; ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have too many &lt;code&gt;.o&lt;/code&gt; files, then it might not be feasible to name them all in a single command. In this case, you can build a static library (or archive) for your &lt;code&gt;.o&lt;/code&gt; files, as in&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA; ar rcus libmyluafiles.a *.o&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then you can link the &lt;code&gt;myluafiles&lt;/code&gt; archive as a whole to your nginx executable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA; ./configure \&#xA;     --with-ld-opt=&#34;-L/path/to/lib -Wl,--whole-archive -lmyluafiles -Wl,--no-whole-archive&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where &lt;code&gt;/path/to/lib&lt;/code&gt; is the path of the directory containing the &lt;code&gt;libmyluafiles.a&lt;/code&gt; file. It should be noted that the linker option &lt;code&gt;--whole-archive&lt;/code&gt; is required here because otherwise our archive will be skipped because no symbols in our archive are mentioned in the main parts of the nginx executable.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Data Sharing within an Nginx Worker&lt;/h1&gt; &#xA;&lt;p&gt;To globally share data among all the requests handled by the same Nginx worker process, encapsulate the shared data into a Lua module, use the Lua &lt;code&gt;require&lt;/code&gt; builtin to import the module, and then manipulate the shared data in Lua. This works because required Lua modules are loaded only once and all coroutines will share the same copy of the module (both its code and data).&lt;/p&gt; &#xA;&lt;p&gt;Note that the use of global Lua variables is &lt;em&gt;strongly discouraged&lt;/em&gt;, as it may lead to unexpected race conditions between concurrent requests.&lt;/p&gt; &#xA;&lt;p&gt;Here is a small example on sharing data within an Nginx worker via a Lua module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; -- mydata.lua&#xA; local _M = {}&#xA;&#xA; local data = {&#xA;     dog = 3,&#xA;     cat = 4,&#xA;     pig = 5,&#xA; }&#xA;&#xA; function _M.get_age(name)&#xA;     return data[name]&#xA; end&#xA;&#xA; return _M&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then accessing it from &lt;code&gt;nginx.conf&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; location /lua {&#xA;     content_by_lua_block {&#xA;         local mydata = require &#34;mydata&#34;&#xA;         ngx.say(mydata.get_age(&#34;dog&#34;))&#xA;     }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;mydata&lt;/code&gt; module in this example will only be loaded and run on the first request to the location &lt;code&gt;/lua&lt;/code&gt;, and all subsequent requests to the same Nginx worker process will use the reloaded instance of the module as well as the same copy of the data in it, until a &lt;code&gt;HUP&lt;/code&gt; signal is sent to the Nginx master process to force a reload. This data sharing technique is essential for high performance Lua applications based on this module.&lt;/p&gt; &#xA;&lt;p&gt;Note that this data sharing is on a &lt;em&gt;per-worker&lt;/em&gt; basis and not on a &lt;em&gt;per-server&lt;/em&gt; basis. That is, when there are multiple Nginx worker processes under an Nginx master, data sharing cannot cross the process boundary between these workers.&lt;/p&gt; &#xA;&lt;p&gt;It is usually recommended to share read-only data this way. You can also share changeable data among all the concurrent requests of each Nginx worker process as long as there is &lt;em&gt;no&lt;/em&gt; nonblocking I/O operations (including &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsleep&#34;&gt;ngx.sleep&lt;/a&gt;) in the middle of your calculations. As long as you do not give the control back to the Nginx event loop and ngx_lua&#39;s light thread scheduler (even implicitly), there can never be any race conditions in between. For this reason, always be very careful when you want to share changeable data on the worker level. Buggy optimizations can easily lead to hard-to-debug race conditions under load.&lt;/p&gt; &#xA;&lt;p&gt;If server-wide data sharing is required, then use one or more of the following approaches:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt; API provided by this module.&lt;/li&gt; &#xA; &lt;li&gt;Use only a single Nginx worker and a single server (this is however not recommended when there is a multi core CPU or multiple CPUs in a single machine).&lt;/li&gt; &#xA; &lt;li&gt;Use data storage mechanisms such as &lt;code&gt;memcached&lt;/code&gt;, &lt;code&gt;redis&lt;/code&gt;, &lt;code&gt;MySQL&lt;/code&gt; or &lt;code&gt;PostgreSQL&lt;/code&gt;. &lt;a href=&#34;https://openresty.org&#34;&gt;The OpenResty official releases&lt;/a&gt; come with a set of companion Nginx modules and Lua libraries that provide interfaces with these data storage mechanisms.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Known Issues&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;TCP socket connect operation issues&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsockconnect&#34;&gt;tcpsock:connect&lt;/a&gt; method may indicate &lt;code&gt;success&lt;/code&gt; despite connection failures such as with &lt;code&gt;Connection Refused&lt;/code&gt; errors.&lt;/p&gt; &#xA;&lt;p&gt;However, later attempts to manipulate the cosocket object will fail and return the actual error status message generated by the failed connect operation.&lt;/p&gt; &#xA;&lt;p&gt;This issue is due to limitations in the Nginx event model and only appears to affect Mac OS X.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Lua Coroutine Yielding/Resuming&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Because Lua&#39;s &lt;code&gt;dofile&lt;/code&gt; and &lt;code&gt;require&lt;/code&gt; builtins are currently implemented as C functions in LuaJIT 2.0/2.1, if the Lua file being loaded by &lt;code&gt;dofile&lt;/code&gt; or &lt;code&gt;require&lt;/code&gt; invokes &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxlocationcapture&#34;&gt;ngx.location.capture*&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxexec&#34;&gt;ngx.exec&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxexit&#34;&gt;ngx.exit&lt;/a&gt;, or other API functions requiring yielding in the &lt;em&gt;top-level&lt;/em&gt; scope of the Lua file, then the Lua error &#34;attempt to yield across C-call boundary&#34; will be raised. To avoid this, put these calls requiring yielding into your own Lua functions in the Lua file instead of the top-level scope of the file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Lua Variable Scope&lt;/h2&gt; &#xA;&lt;p&gt;Care must be taken when importing modules, and this form should be used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local xxx = require(&#39;xxx&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;instead of the old deprecated form:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; require(&#39;xxx&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is the reason: by design, the global environment has exactly the same lifetime as the Nginx request handler associated with it. Each request handler has its own set of Lua global variables and that is the idea of request isolation. The Lua module is actually loaded by the first Nginx request handler and is cached by the &lt;code&gt;require()&lt;/code&gt; built-in in the &lt;code&gt;package.loaded&lt;/code&gt; table for later reference, and the &lt;code&gt;module()&lt;/code&gt; builtin used by some Lua modules has the side effect of setting a global variable to the loaded module table. But this global variable will be cleared at the end of the request handler, and every subsequent request handler all has its own (clean) global environment. So one will get Lua exception for accessing the &lt;code&gt;nil&lt;/code&gt; value.&lt;/p&gt; &#xA;&lt;p&gt;The use of Lua global variables is a generally inadvisable in the ngx_lua context as:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;the misuse of Lua globals has detrimental side effects on concurrent requests when such variables should instead be local in scope,&lt;/li&gt; &#xA; &lt;li&gt;Lua global variables require Lua table look-ups in the global environment which is computationally expensive, and&lt;/li&gt; &#xA; &lt;li&gt;some Lua global variable references may include typing errors which make such difficult to debug.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;It is therefore &lt;em&gt;highly&lt;/em&gt; recommended to always declare such within an appropriate local scope instead.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; -- Avoid&#xA; foo = 123&#xA; -- Recommended&#xA; local foo = 123&#xA;&#xA; -- Avoid&#xA; function foo() return 123 end&#xA; -- Recommended&#xA; local function foo() return 123 end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To find all instances of Lua global variables in your Lua code, run the &lt;a href=&#34;https://github.com/openresty/nginx-devel-utils/raw/master/lua-releng&#34;&gt;lua-releng tool&lt;/a&gt; across all &lt;code&gt;.lua&lt;/code&gt; source files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ lua-releng&#xA;Checking use of Lua global variables in file lib/foo/bar.lua ...&#xA;        1       [1489]  SETGLOBAL       7 -1    ; contains&#xA;        55      [1506]  GETGLOBAL       7 -3    ; setvar&#xA;        3       [1545]  GETGLOBAL       3 -4    ; varexpand&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The output says that the line 1489 of file &lt;code&gt;lib/foo/bar.lua&lt;/code&gt; writes to a global variable named &lt;code&gt;contains&lt;/code&gt;, the line 1506 reads from the global variable &lt;code&gt;setvar&lt;/code&gt;, and line 1545 reads the global &lt;code&gt;varexpand&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This tool will guarantee that local variables in the Lua module functions are all declared with the &lt;code&gt;local&lt;/code&gt; keyword, otherwise a runtime exception will be thrown. It prevents undesirable race conditions while accessing such variables. See &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#data-sharing-within-an-nginx-worker&#34;&gt;Data Sharing within an Nginx Worker&lt;/a&gt; for the reasons behind this.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Locations Configured by Subrequest Directives of Other Modules&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxlocationcapture&#34;&gt;ngx.location.capture&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxlocationcapture_multi&#34;&gt;ngx.location.capture_multi&lt;/a&gt; directives cannot capture locations that include the &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_addition_module.html#add_before_body&#34;&gt;add_before_body&lt;/a&gt;, &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_addition_module.html#add_after_body&#34;&gt;add_after_body&lt;/a&gt;, &lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_auth_request_module.html#auth_request&#34;&gt;auth_request&lt;/a&gt;, &lt;a href=&#34;http://github.com/openresty/echo-nginx-module#echo_location&#34;&gt;echo_location&lt;/a&gt;, &lt;a href=&#34;http://github.com/openresty/echo-nginx-module#echo_location_async&#34;&gt;echo_location_async&lt;/a&gt;, &lt;a href=&#34;http://github.com/openresty/echo-nginx-module#echo_subrequest&#34;&gt;echo_subrequest&lt;/a&gt;, or &lt;a href=&#34;http://github.com/openresty/echo-nginx-module#echo_subrequest_async&#34;&gt;echo_subrequest_async&lt;/a&gt; directives.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; location /foo {&#xA;     content_by_lua_block {&#xA;         res = ngx.location.capture(&#34;/bar&#34;)&#xA;     }&#xA; }&#xA; location /bar {&#xA;     echo_location /blah;&#xA; }&#xA; location /blah {&#xA;     echo &#34;Success!&#34;;&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; $ curl -i http://example.com/foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will not work as expected.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Cosockets Not Available Everywhere&lt;/h2&gt; &#xA;&lt;p&gt;Due to internal limitations in the Nginx core, the cosocket API is disabled in the following contexts: &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#set_by_lua&#34;&gt;set_by_lua*&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#log_by_lua&#34;&gt;log_by_lua*&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#header_filter_by_lua&#34;&gt;header_filter_by_lua*&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#body_filter_by_lua&#34;&gt;body_filter_by_lua&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The cosockets are currently also disabled in the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#init_by_lua&#34;&gt;init_by_lua*&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#init_worker_by_lua&#34;&gt;init_worker_by_lua*&lt;/a&gt; directive contexts but we may add support for these contexts in the future because there is no limitation in the Nginx core (or the limitation might be worked around).&lt;/p&gt; &#xA;&lt;p&gt;There exists a workaround, however, when the original context does &lt;em&gt;not&lt;/em&gt; need to wait for the cosocket results. That is, creating a zero-delay timer via the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxtimerat&#34;&gt;ngx.timer.at&lt;/a&gt; API and do the cosocket results in the timer handler, which runs asynchronously as to the original context creating the timer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Special Escaping Sequences&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; Following the &lt;code&gt;v0.9.17&lt;/code&gt; release, this pitfall can be avoided by using the &lt;code&gt;*_by_lua_block {}&lt;/code&gt; configuration directives.&lt;/p&gt; &#xA;&lt;p&gt;PCRE sequences such as &lt;code&gt;\d&lt;/code&gt;, &lt;code&gt;\s&lt;/code&gt;, or &lt;code&gt;\w&lt;/code&gt;, require special attention because in string literals, the backslash character, &lt;code&gt;\&lt;/code&gt;, is stripped out by both the Lua language parser and by the Nginx config file parser before processing if not within a &lt;code&gt;*_by_lua_block {}&lt;/code&gt; directive. So the following snippet will not work as expected:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; # nginx.conf&#xA; ? location /test {&#xA; ?     content_by_lua &#39;&#xA; ?         local regex = &#34;\d+&#34;  -- THIS IS WRONG OUTSIDE OF A *_by_lua_block DIRECTIVE&#xA; ?         local m = ngx.re.match(&#34;hello, 1234&#34;, regex)&#xA; ?         if m then ngx.say(m[0]) else ngx.say(&#34;not matched!&#34;) end&#xA; ?     &#39;;&#xA; ? }&#xA; # evaluates to &#34;not matched!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To avoid this, &lt;em&gt;double&lt;/em&gt; escape the backslash:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; # nginx.conf&#xA; location /test {&#xA;     content_by_lua &#39;&#xA;         local regex = &#34;\\\\d+&#34;&#xA;         local m = ngx.re.match(&#34;hello, 1234&#34;, regex)&#xA;         if m then ngx.say(m[0]) else ngx.say(&#34;not matched!&#34;) end&#xA;     &#39;;&#xA; }&#xA; # evaluates to &#34;1234&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here, &lt;code&gt;\\\\d+&lt;/code&gt; is stripped down to &lt;code&gt;\\d+&lt;/code&gt; by the Nginx config file parser and this is further stripped down to &lt;code&gt;\d+&lt;/code&gt; by the Lua language parser before running.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, the regex pattern can be presented as a long-bracketed Lua string literal by encasing it in &#34;long brackets&#34;, &lt;code&gt;[[...]]&lt;/code&gt;, in which case backslashes have to only be escaped once for the Nginx config file parser.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; # nginx.conf&#xA; location /test {&#xA;     content_by_lua &#39;&#xA;         local regex = [[\\d+]]&#xA;         local m = ngx.re.match(&#34;hello, 1234&#34;, regex)&#xA;         if m then ngx.say(m[0]) else ngx.say(&#34;not matched!&#34;) end&#xA;     &#39;;&#xA; }&#xA; # evaluates to &#34;1234&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here, &lt;code&gt;[[\\d+]]&lt;/code&gt; is stripped down to &lt;code&gt;[[\d+]]&lt;/code&gt; by the Nginx config file parser and this is processed correctly.&lt;/p&gt; &#xA;&lt;p&gt;Note that a longer from of the long bracket, &lt;code&gt;[=[...]=]&lt;/code&gt;, may be required if the regex pattern contains &lt;code&gt;[...]&lt;/code&gt; sequences. The &lt;code&gt;[=[...]=]&lt;/code&gt; form may be used as the default form if desired.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; # nginx.conf&#xA; location /test {&#xA;     content_by_lua &#39;&#xA;         local regex = [=[[0-9]+]=]&#xA;         local m = ngx.re.match(&#34;hello, 1234&#34;, regex)&#xA;         if m then ngx.say(m[0]) else ngx.say(&#34;not matched!&#34;) end&#xA;     &#39;;&#xA; }&#xA; # evaluates to &#34;1234&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An alternative approach to escaping PCRE sequences is to ensure that Lua code is placed in external script files and executed using the various &lt;code&gt;*_by_lua_file&lt;/code&gt; directives. With this approach, the backslashes are only stripped by the Lua language parser and therefore only need to be escaped once each.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; -- test.lua&#xA; local regex = &#34;\\d+&#34;&#xA; local m = ngx.re.match(&#34;hello, 1234&#34;, regex)&#xA; if m then ngx.say(m[0]) else ngx.say(&#34;not matched!&#34;) end&#xA; -- evaluates to &#34;1234&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Within external script files, PCRE sequences presented as long-bracketed Lua string literals do not require modification.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; -- test.lua&#xA; local regex = [[\d+]]&#xA; local m = ngx.re.match(&#34;hello, 1234&#34;, regex)&#xA; if m then ngx.say(m[0]) else ngx.say(&#34;not matched!&#34;) end&#xA; -- evaluates to &#34;1234&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As noted earlier, PCRE sequences presented within &lt;code&gt;*_by_lua_block {}&lt;/code&gt; directives (available following the &lt;code&gt;v0.9.17&lt;/code&gt; release) do not require modification.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; # nginx.conf&#xA; location /test {&#xA;     content_by_lua_block {&#xA;         local regex = [[\d+]]&#xA;         local m = ngx.re.match(&#34;hello, 1234&#34;, regex)&#xA;         if m then ngx.say(m[0]) else ngx.say(&#34;not matched!&#34;) end&#xA;     }&#xA; }&#xA; # evaluates to &#34;1234&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; You are recommended to use &lt;code&gt;by_lua_file&lt;/code&gt; when the Lua code is very long.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Mixing with SSI Not Supported&lt;/h2&gt; &#xA;&lt;p&gt;Mixing SSI with ngx_lua in the same Nginx request is not supported at all. Just use ngx_lua exclusively. Everything you can do with SSI can be done atop ngx_lua anyway and it can be more efficient when using ngx_lua.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;SPDY Mode Not Fully Supported&lt;/h2&gt; &#xA;&lt;p&gt;Certain Lua APIs provided by ngx_lua do not work in Nginx&#39;s SPDY mode yet: &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxlocationcapture&#34;&gt;ngx.location.capture&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxlocationcapture_multi&#34;&gt;ngx.location.capture_multi&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqsocket&#34;&gt;ngx.req.socket&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Missing data on short circuited requests&lt;/h2&gt; &#xA;&lt;p&gt;Nginx may terminate a request early with (at least):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;400 (Bad Request)&lt;/li&gt; &#xA; &lt;li&gt;405 (Not Allowed)&lt;/li&gt; &#xA; &lt;li&gt;408 (Request Timeout)&lt;/li&gt; &#xA; &lt;li&gt;413 (Request Entity Too Large)&lt;/li&gt; &#xA; &lt;li&gt;414 (Request URI Too Large)&lt;/li&gt; &#xA; &lt;li&gt;494 (Request Headers Too Large)&lt;/li&gt; &#xA; &lt;li&gt;499 (Client Closed Request)&lt;/li&gt; &#xA; &lt;li&gt;500 (Internal Server Error)&lt;/li&gt; &#xA; &lt;li&gt;501 (Not Implemented)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This means that phases that normally run are skipped, such as the rewrite or access phase. This also means that later phases that are run regardless, e.g. &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#log_by_lua&#34;&gt;log_by_lua&lt;/a&gt;, will not have access to information that is normally set in those phases.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;TODO&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;cosocket: implement LuaSocket&#39;s unconnected UDP API.&lt;/li&gt; &#xA; &lt;li&gt;cosocket: add support in the context of &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#init_by_lua&#34;&gt;init_by_lua*&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;cosocket: implement the &lt;code&gt;bind()&lt;/code&gt; method for stream-typed cosockets.&lt;/li&gt; &#xA; &lt;li&gt;cosocket: review and merge aviramc&#39;s &lt;a href=&#34;https://github.com/openresty/lua-nginx-module/pull/290&#34;&gt;patch&lt;/a&gt; for adding the &lt;code&gt;bsdrecv&lt;/code&gt; method.&lt;/li&gt; &#xA; &lt;li&gt;cosocket: add configure options for different strategies of handling the cosocket connection exceeding in the pools.&lt;/li&gt; &#xA; &lt;li&gt;review and apply vadim-pavlov&#39;s patch for &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxlocationcapture&#34;&gt;ngx.location.capture&lt;/a&gt;&#39;s &lt;code&gt;extra_headers&lt;/code&gt; option&lt;/li&gt; &#xA; &lt;li&gt;use &lt;code&gt;ngx_hash_t&lt;/code&gt; to optimize the built-in header look-up process for &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqset_header&#34;&gt;ngx.req.set_header&lt;/a&gt;, and etc.&lt;/li&gt; &#xA; &lt;li&gt;add &lt;code&gt;ignore_resp_headers&lt;/code&gt;, &lt;code&gt;ignore_resp_body&lt;/code&gt;, and &lt;code&gt;ignore_resp&lt;/code&gt; options to &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxlocationcapture&#34;&gt;ngx.location.capture&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxlocationcapture_multi&#34;&gt;ngx.location.capture_multi&lt;/a&gt; methods, to allow micro performance tuning on the user side.&lt;/li&gt; &#xA; &lt;li&gt;add automatic Lua code time slicing support by yielding and resuming the Lua VM actively via Lua&#39;s debug hooks.&lt;/li&gt; &#xA; &lt;li&gt;add &lt;code&gt;stat&lt;/code&gt; mode similar to &lt;a href=&#34;https://httpd.apache.org/docs/trunk/mod/mod_lua.html&#34;&gt;mod_lua&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Changes&lt;/h1&gt; &#xA;&lt;p&gt;The changes made in every release of this module are listed in the change logs of the OpenResty bundle:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://openresty.org/#Changes&#34;&gt;https://openresty.org/#Changes&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Test Suite&lt;/h1&gt; &#xA;&lt;p&gt;The following dependencies are required to run the test suite:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Nginx version &amp;gt;= 1.4.2&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Perl modules:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Test::Nginx: &lt;a href=&#34;https://github.com/openresty/test-nginx&#34;&gt;https://github.com/openresty/test-nginx&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Nginx modules:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/simplresty/ngx_devel_kit&#34;&gt;ngx_devel_kit&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/openresty/set-misc-nginx-module&#34;&gt;ngx_set_misc&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://mdounin.ru/files/ngx_http_auth_request_module-0.2.tar.gz&#34;&gt;ngx_auth_request&lt;/a&gt; (this is not needed if you&#39;re using Nginx 1.5.4+.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/openresty/echo-nginx-module&#34;&gt;ngx_echo&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/openresty/memc-nginx-module&#34;&gt;ngx_memc&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/openresty/srcache-nginx-module&#34;&gt;ngx_srcache&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;ngx_lua (i.e., this module)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/openresty/lua-upstream-nginx-module&#34;&gt;ngx_lua_upstream&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/openresty/headers-more-nginx-module&#34;&gt;ngx_headers_more&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/openresty/drizzle-nginx-module&#34;&gt;ngx_drizzle&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/openresty/rds-json-nginx-module&#34;&gt;ngx_rds_json&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/FRiCKLE/ngx_coolkit&#34;&gt;ngx_coolkit&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/openresty/redis2-nginx-module&#34;&gt;ngx_redis2&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The order in which these modules are added during configuration is important because the position of any filter module in the filtering chain determines the final output, for example. The correct adding order is shown above.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;3rd-party Lua libraries:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://www.kyne.com.au/~mark/software/lua-cjson.php&#34;&gt;lua-cjson&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Applications:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;mysql: create database &#39;ngx_test&#39;, grant all privileges to user &#39;ngx_test&#39;, password is &#39;ngx_test&#39;&lt;/li&gt; &#xA;   &lt;li&gt;memcached: listening on the default port, 11211.&lt;/li&gt; &#xA;   &lt;li&gt;redis: listening on the default port, 6379.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See also the &lt;a href=&#34;https://github.com/openresty/lua-nginx-module/raw/master/util/build.sh&#34;&gt;developer build script&lt;/a&gt; for more details on setting up the testing environment.&lt;/p&gt; &#xA;&lt;p&gt;To run the whole test suite in the default testing mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd /path/to/lua-nginx-module&#xA;export PATH=/path/to/your/nginx/sbin:$PATH&#xA;prove -I/path/to/test-nginx/lib -r t&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run specific test files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd /path/to/lua-nginx-module&#xA;export PATH=/path/to/your/nginx/sbin:$PATH&#xA;prove -I/path/to/test-nginx/lib t/002-content.t t/003-errors.t&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run a specific test block in a particular test file, add the line &lt;code&gt;--- ONLY&lt;/code&gt; to the test block you want to run, and then use the &lt;code&gt;prove&lt;/code&gt; utility to run that &lt;code&gt;.t&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;There are also various testing modes based on mockeagain, valgrind, and etc. Refer to the &lt;a href=&#34;https://search.cpan.org/perldoc?Test::Nginx&#34;&gt;Test::Nginx documentation&lt;/a&gt; for more details for various advanced testing modes. See also the test reports for the Nginx test cluster running on Amazon EC2: &lt;a href=&#34;https://qa.openresty.org&#34;&gt;https://qa.openresty.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Copyright and License&lt;/h1&gt; &#xA;&lt;p&gt;This module is licensed under the BSD license.&lt;/p&gt; &#xA;&lt;p&gt;Copyright (C) 2009-2017, by Xiaozhe Wang (chaoslawful) &lt;a href=&#34;mailto:chaoslawful@gmail.com&#34;&gt;chaoslawful@gmail.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Copyright (C) 2009-2019, by Yichun &#34;agentzh&#34; Zhang (章亦春) &lt;a href=&#34;mailto:agentzh@gmail.com&#34;&gt;agentzh@gmail.com&lt;/a&gt;, OpenResty Inc.&lt;/p&gt; &#xA;&lt;p&gt;All rights reserved.&lt;/p&gt; &#xA;&lt;p&gt;Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;See Also&lt;/h1&gt; &#xA;&lt;p&gt;Blog posts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.openresty.com/en/lua-cpu-flame-graph/?src=gh_ngxlua&#34;&gt;Introduction to Lua-Land CPU Flame Graphs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.openresty.com/en//how-or-alloc-mem?src=gh_ngxlua&#34;&gt;How OpenResty and Nginx Allocate and Manage Memory&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.openresty.com/en/how-nginx-shm-consume-ram/?src=gh_ngxlua&#34;&gt;How OpenResty and Nginx Shared Memory Zones Consume RAM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.openresty.com/en/nginx-shm-frag/?src=gh_ngxlua&#34;&gt;Memory Fragmentation in OpenResty and Nginx&#39;s Shared Memory Zones&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Other related modules and libraries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openresty/stream-lua-nginx-module#readme&#34;&gt;ngx_stream_lua_module&lt;/a&gt; for an official port of this module for the Nginx &#34;stream&#34; subsystem (doing generic downstream TCP communications).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openresty/lua-resty-memcached&#34;&gt;lua-resty-memcached&lt;/a&gt; library based on ngx_lua cosocket.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openresty/lua-resty-redis&#34;&gt;lua-resty-redis&lt;/a&gt; library based on ngx_lua cosocket.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openresty/lua-resty-mysql&#34;&gt;lua-resty-mysql&lt;/a&gt; library based on ngx_lua cosocket.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openresty/lua-resty-upload&#34;&gt;lua-resty-upload&lt;/a&gt; library based on ngx_lua cosocket.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openresty/lua-resty-dns&#34;&gt;lua-resty-dns&lt;/a&gt; library based on ngx_lua cosocket.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openresty/lua-resty-websocket&#34;&gt;lua-resty-websocket&lt;/a&gt; library for both WebSocket server and client, based on ngx_lua cosocket.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openresty/lua-resty-string&#34;&gt;lua-resty-string&lt;/a&gt; library based on &lt;a href=&#34;https://luajit.org/ext_ffi.html&#34;&gt;LuaJIT FFI&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openresty/lua-resty-lock&#34;&gt;lua-resty-lock&lt;/a&gt; library for a nonblocking simple lock API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cloudflare/lua-resty-cookie&#34;&gt;lua-resty-cookie&lt;/a&gt; library for HTTP cookie manipulation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openresty.org/#RoutingMySQLQueriesBasedOnURIArgs&#34;&gt;Routing requests to different MySQL queries based on URI arguments&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openresty.org/#DynamicRoutingBasedOnRedis&#34;&gt;Dynamic Routing Based on Redis and Lua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openresty.org/#UsingLuaRocks&#34;&gt;Using LuaRocks with ngx_lua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openresty/lua-nginx-module/wiki/Introduction&#34;&gt;Introduction to ngx_lua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/simplresty/ngx_devel_kit&#34;&gt;ngx_devel_kit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/openresty/echo-nginx-module&#34;&gt;echo-nginx-module&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/openresty/drizzle-nginx-module&#34;&gt;drizzle-nginx-module&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FRiCKLE/ngx_postgres&#34;&gt;postgres-nginx-module&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/openresty/memc-nginx-module&#34;&gt;memc-nginx-module&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openresty.org&#34;&gt;The OpenResty bundle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openresty/nginx-systemtap-toolkit&#34;&gt;Nginx Systemtap Toolkit&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Directives&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_load_resty_core&#34;&gt;lua_load_resty_core&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_capture_error_log&#34;&gt;lua_capture_error_log&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_use_default_type&#34;&gt;lua_use_default_type&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_malloc_trim&#34;&gt;lua_malloc_trim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_code_cache&#34;&gt;lua_code_cache&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_thread_cache_max_entries&#34;&gt;lua_thread_cache_max_entries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_regex_cache_max_entries&#34;&gt;lua_regex_cache_max_entries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_regex_match_limit&#34;&gt;lua_regex_match_limit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_package_path&#34;&gt;lua_package_path&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_package_cpath&#34;&gt;lua_package_cpath&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#init_by_lua&#34;&gt;init_by_lua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#init_by_lua_block&#34;&gt;init_by_lua_block&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#init_by_lua_file&#34;&gt;init_by_lua_file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#init_worker_by_lua&#34;&gt;init_worker_by_lua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#init_worker_by_lua_block&#34;&gt;init_worker_by_lua_block&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#init_worker_by_lua_file&#34;&gt;init_worker_by_lua_file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#exit_worker_by_lua_block&#34;&gt;exit_worker_by_lua_block&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#exit_worker_by_lua_file&#34;&gt;exit_worker_by_lua_file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#set_by_lua&#34;&gt;set_by_lua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#set_by_lua_block&#34;&gt;set_by_lua_block&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#set_by_lua_file&#34;&gt;set_by_lua_file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#content_by_lua&#34;&gt;content_by_lua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#content_by_lua_block&#34;&gt;content_by_lua_block&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#content_by_lua_file&#34;&gt;content_by_lua_file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#server_rewrite_by_lua_block&#34;&gt;server_rewrite_by_lua_block&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#server_rewrite_by_lua_file&#34;&gt;server_rewrite_by_lua_file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#rewrite_by_lua&#34;&gt;rewrite_by_lua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#rewrite_by_lua_block&#34;&gt;rewrite_by_lua_block&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#rewrite_by_lua_file&#34;&gt;rewrite_by_lua_file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#access_by_lua&#34;&gt;access_by_lua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#access_by_lua_block&#34;&gt;access_by_lua_block&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#access_by_lua_file&#34;&gt;access_by_lua_file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#header_filter_by_lua&#34;&gt;header_filter_by_lua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#header_filter_by_lua_block&#34;&gt;header_filter_by_lua_block&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#header_filter_by_lua_file&#34;&gt;header_filter_by_lua_file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#body_filter_by_lua&#34;&gt;body_filter_by_lua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#body_filter_by_lua_block&#34;&gt;body_filter_by_lua_block&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#body_filter_by_lua_file&#34;&gt;body_filter_by_lua_file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#log_by_lua&#34;&gt;log_by_lua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#log_by_lua_block&#34;&gt;log_by_lua_block&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#log_by_lua_file&#34;&gt;log_by_lua_file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#balancer_by_lua_block&#34;&gt;balancer_by_lua_block&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#balancer_by_lua_file&#34;&gt;balancer_by_lua_file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_need_request_body&#34;&gt;lua_need_request_body&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ssl_client_hello_by_lua_block&#34;&gt;ssl_client_hello_by_lua_block&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ssl_client_hello_by_lua_file&#34;&gt;ssl_client_hello_by_lua_file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ssl_certificate_by_lua_block&#34;&gt;ssl_certificate_by_lua_block&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ssl_certificate_by_lua_file&#34;&gt;ssl_certificate_by_lua_file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ssl_session_fetch_by_lua_block&#34;&gt;ssl_session_fetch_by_lua_block&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ssl_session_fetch_by_lua_file&#34;&gt;ssl_session_fetch_by_lua_file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ssl_session_store_by_lua_block&#34;&gt;ssl_session_store_by_lua_block&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ssl_session_store_by_lua_file&#34;&gt;ssl_session_store_by_lua_file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_shared_dict&#34;&gt;lua_shared_dict&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_socket_connect_timeout&#34;&gt;lua_socket_connect_timeout&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_socket_send_timeout&#34;&gt;lua_socket_send_timeout&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_socket_send_lowat&#34;&gt;lua_socket_send_lowat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_socket_read_timeout&#34;&gt;lua_socket_read_timeout&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_socket_buffer_size&#34;&gt;lua_socket_buffer_size&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_socket_pool_size&#34;&gt;lua_socket_pool_size&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_socket_keepalive_timeout&#34;&gt;lua_socket_keepalive_timeout&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_socket_log_errors&#34;&gt;lua_socket_log_errors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_ssl_ciphers&#34;&gt;lua_ssl_ciphers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_ssl_crl&#34;&gt;lua_ssl_crl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_ssl_protocols&#34;&gt;lua_ssl_protocols&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_ssl_trusted_certificate&#34;&gt;lua_ssl_trusted_certificate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_ssl_verify_depth&#34;&gt;lua_ssl_verify_depth&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_ssl_conf_command&#34;&gt;lua_ssl_conf_command&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_http10_buffering&#34;&gt;lua_http10_buffering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#rewrite_by_lua_no_postpone&#34;&gt;rewrite_by_lua_no_postpone&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#access_by_lua_no_postpone&#34;&gt;access_by_lua_no_postpone&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_transform_underscores_in_response_headers&#34;&gt;lua_transform_underscores_in_response_headers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_check_client_abort&#34;&gt;lua_check_client_abort&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_max_pending_timers&#34;&gt;lua_max_pending_timers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_max_running_timers&#34;&gt;lua_max_running_timers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_sa_restart&#34;&gt;lua_sa_restart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_worker_thread_vm_pool_size&#34;&gt;lua_worker_thread_vm_pool_size&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The basic building blocks of scripting Nginx with Lua are directives. Directives are used to specify when the user Lua code is run and how the result will be used. Below is a diagram showing the order in which directives are executed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/2137369/15272097/77d1c09e-1a37-11e6-97ef-d9767035fc3e.png&#34; alt=&#34;Lua Nginx Modules Directives&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;lua_load_resty_core&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;lua_load_resty_core on|off&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;default:&lt;/strong&gt; &lt;em&gt;lua_load_resty_core on&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This directive is deprecated since the &lt;code&gt;v0.10.16&lt;/code&gt; release of this module. The &lt;code&gt;resty.core&lt;/code&gt; module from &lt;a href=&#34;https://github.com/openresty/lua-resty-core&#34;&gt;lua-resty-core&lt;/a&gt; is now mandatorily loaded during the Lua VM initialization. Specifying this directive will have no effect.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.10.15&lt;/code&gt; release and used to optionally load the &lt;code&gt;resty.core&lt;/code&gt; module.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;lua_capture_error_log&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;lua_capture_error_log size&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;default:&lt;/strong&gt; &lt;em&gt;none&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Enables a buffer of the specified &lt;code&gt;size&lt;/code&gt; for capturing all the Nginx error log message data (not just those produced by this module or the Nginx http subsystem, but everything) without touching files or disks.&lt;/p&gt; &#xA;&lt;p&gt;You can use units like &lt;code&gt;k&lt;/code&gt; and &lt;code&gt;m&lt;/code&gt; in the &lt;code&gt;size&lt;/code&gt; value, as in&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; lua_capture_error_log 100k;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As a rule of thumb, a 4KB buffer can usually hold about 20 typical error log messages. So do the maths!&lt;/p&gt; &#xA;&lt;p&gt;This buffer never grows. If it is full, new error log messages will replace the oldest ones in the buffer.&lt;/p&gt; &#xA;&lt;p&gt;The size of the buffer must be bigger than the maximum length of a single error log message (which is 4K in OpenResty and 2K in stock NGINX).&lt;/p&gt; &#xA;&lt;p&gt;You can read the messages in the buffer on the Lua land via the &lt;a href=&#34;https://github.com/openresty/lua-resty-core/raw/master/lib/ngx/errlog.md#get_logs&#34;&gt;get_logs()&lt;/a&gt; function of the &lt;a href=&#34;https://github.com/openresty/lua-resty-core/raw/master/lib/ngx/errlog.md#readme&#34;&gt;ngx.errlog&lt;/a&gt; module of the &lt;a href=&#34;https://github.com/openresty/lua-resty-core/raw/master/lib/ngx/errlog.md#readme&#34;&gt;lua-resty-core&lt;/a&gt; library. This Lua API function will return the captured error log messages and also remove these already read from the global capturing buffer, making room for any new error log data. For this reason, the user should not configure this buffer to be too big if the user read the buffered error log data fast enough.&lt;/p&gt; &#xA;&lt;p&gt;Note that the log level specified in the standard &lt;a href=&#34;https://nginx.org/r/error_log&#34;&gt;error_log&lt;/a&gt; directive &lt;em&gt;does&lt;/em&gt; have effect on this capturing facility. It only captures log messages of a level no lower than the specified log level in the &lt;a href=&#34;https://nginx.org/r/error_log&#34;&gt;error_log&lt;/a&gt; directive. The user can still choose to set an even higher filtering log level on the fly via the Lua API function &lt;a href=&#34;https://github.com/openresty/lua-resty-core/raw/master/lib/ngx/errlog.md#set_filter_level&#34;&gt;errlog.set_filter_level&lt;/a&gt;. So it is more flexible than the static &lt;a href=&#34;https://nginx.org/r/error_log&#34;&gt;error_log&lt;/a&gt; directive.&lt;/p&gt; &#xA;&lt;p&gt;It is worth noting that there is no way to capture the debugging logs without building OpenResty or Nginx with the &lt;code&gt;./configure&lt;/code&gt; option &lt;code&gt;--with-debug&lt;/code&gt;. And enabling debugging logs is strongly discouraged in production builds due to high overhead.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.10.9&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;lua_use_default_type&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;lua_use_default_type on | off&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;default:&lt;/strong&gt; &lt;em&gt;lua_use_default_type on&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server, location, location if&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Specifies whether to use the MIME type specified by the &lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_core_module.html#default_type&#34;&gt;default_type&lt;/a&gt; directive for the default value of the &lt;code&gt;Content-Type&lt;/code&gt; response header. Deactivate this directive if a default &lt;code&gt;Content-Type&lt;/code&gt; response header for Lua request handlers is not desired.&lt;/p&gt; &#xA;&lt;p&gt;This directive is turned on by default.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.9.1&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;lua_malloc_trim&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;lua_malloc_trim &amp;lt;request-count&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;default:&lt;/strong&gt; &lt;em&gt;lua_malloc_trim 1000&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Asks the underlying &lt;code&gt;libc&lt;/code&gt; runtime library to release its cached free memory back to the operating system every &lt;code&gt;N&lt;/code&gt; requests processed by the Nginx core. By default, &lt;code&gt;N&lt;/code&gt; is 1000. You can configure the request count by using your own numbers. Smaller numbers mean more frequent releases, which may introduce higher CPU time consumption and smaller memory footprint while larger numbers usually lead to less CPU time overhead and relatively larger memory footprint. Just tune the number for your own use cases.&lt;/p&gt; &#xA;&lt;p&gt;Configuring the argument to &lt;code&gt;0&lt;/code&gt; essentially turns off the periodical memory trimming altogether.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; lua_malloc_trim 0;  # turn off trimming completely&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The current implementation uses an Nginx log phase handler to do the request counting. So the appearance of the &lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_core_module.html#log_subrequest&#34;&gt;log_subrequest on&lt;/a&gt; directives in &lt;code&gt;nginx.conf&lt;/code&gt; may make the counting faster when subrequests are involved. By default, only &#34;main requests&#34; count.&lt;/p&gt; &#xA;&lt;p&gt;Note that this directive does &lt;em&gt;not&lt;/em&gt; affect the memory allocated by LuaJIT&#39;s own allocator based on the &lt;code&gt;mmap&lt;/code&gt; system call.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.10.7&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;lua_code_cache&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;lua_code_cache on | off&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;default:&lt;/strong&gt; &lt;em&gt;lua_code_cache on&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server, location, location if&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Enables or disables the Lua code cache for Lua code in &lt;code&gt;*_by_lua_file&lt;/code&gt; directives (like &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#set_by_lua_file&#34;&gt;set_by_lua_file&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#content_by_lua_file&#34;&gt;content_by_lua_file&lt;/a&gt;) and Lua modules.&lt;/p&gt; &#xA;&lt;p&gt;When turning off, every request served by ngx_lua will run in a separate Lua VM instance, starting from the &lt;code&gt;0.9.3&lt;/code&gt; release. So the Lua files referenced in &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#set_by_lua_file&#34;&gt;set_by_lua_file&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#content_by_lua_file&#34;&gt;content_by_lua_file&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#access_by_lua_file&#34;&gt;access_by_lua_file&lt;/a&gt;, and etc will not be cached and all Lua modules used will be loaded from scratch. With this in place, developers can adopt an edit-and-refresh approach.&lt;/p&gt; &#xA;&lt;p&gt;Please note however, that Lua code written inlined within nginx.conf such as those specified by &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#set_by_lua&#34;&gt;set_by_lua&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#content_by_lua&#34;&gt;content_by_lua&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#access_by_lua&#34;&gt;access_by_lua&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#rewrite_by_lua&#34;&gt;rewrite_by_lua&lt;/a&gt; will not be updated when you edit the inlined Lua code in your &lt;code&gt;nginx.conf&lt;/code&gt; file because only the Nginx config file parser can correctly parse the &lt;code&gt;nginx.conf&lt;/code&gt; file and the only way is to reload the config file by sending a &lt;code&gt;HUP&lt;/code&gt; signal or just to restart Nginx.&lt;/p&gt; &#xA;&lt;p&gt;Even when the code cache is enabled, Lua files which are loaded by &lt;code&gt;dofile&lt;/code&gt; or &lt;code&gt;loadfile&lt;/code&gt; in *_by_lua_file cannot be cached (unless you cache the results yourself). Usually you can either use the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#init_by_lua&#34;&gt;init_by_lua&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#init-by_lua_file&#34;&gt;init_by_lua_file&lt;/a&gt; directives to load all such files or just make these Lua files true Lua modules and load them via &lt;code&gt;require&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The ngx_lua module does not support the &lt;code&gt;stat&lt;/code&gt; mode available with the Apache &lt;code&gt;mod_lua&lt;/code&gt; module (yet).&lt;/p&gt; &#xA;&lt;p&gt;Disabling the Lua code cache is strongly discouraged for production use and should only be used during development as it has a significant negative impact on overall performance. For example, the performance of a &#34;hello world&#34; Lua example can drop by an order of magnitude after disabling the Lua code cache.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;lua_thread_cache_max_entries&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;lua_thread_cache_max_entries &amp;lt;num&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;default:&lt;/strong&gt; &lt;em&gt;lua_thread_cache_max_entries 1024&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Specifies the maximum number of entries allowed in the worker process level lua thread object cache.&lt;/p&gt; &#xA;&lt;p&gt;This cache recycles the lua thread GC objects among all our &#34;light threads&#34;.&lt;/p&gt; &#xA;&lt;p&gt;A zero value of &lt;code&gt;&amp;lt;num&amp;gt;&lt;/code&gt; disables the cache.&lt;/p&gt; &#xA;&lt;p&gt;Note that this feature requires OpenResty&#39;s LuaJIT with the new C API &lt;code&gt;lua_resetthread&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This feature was first introduced in verson &lt;code&gt;v0.10.9&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;lua_regex_cache_max_entries&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;lua_regex_cache_max_entries &amp;lt;num&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;default:&lt;/strong&gt; &lt;em&gt;lua_regex_cache_max_entries 1024&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Specifies the maximum number of entries allowed in the worker process level compiled regex cache.&lt;/p&gt; &#xA;&lt;p&gt;The regular expressions used in &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxrematch&#34;&gt;ngx.re.match&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxregmatch&#34;&gt;ngx.re.gmatch&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxresub&#34;&gt;ngx.re.sub&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxregsub&#34;&gt;ngx.re.gsub&lt;/a&gt; will be cached within this cache if the regex option &lt;code&gt;o&lt;/code&gt; (i.e., compile-once flag) is specified.&lt;/p&gt; &#xA;&lt;p&gt;The default number of entries allowed is 1024 and when this limit is reached, new regular expressions will not be cached (as if the &lt;code&gt;o&lt;/code&gt; option was not specified) and there will be one, and only one, warning in the &lt;code&gt;error.log&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;2011/08/27 23:18:26 [warn] 31997#0: *1 lua exceeding regex cache max entries (1024), ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using the &lt;code&gt;ngx.re.*&lt;/code&gt; implementation of &lt;a href=&#34;https://github.com/openresty/lua-resty-core&#34;&gt;lua-resty-core&lt;/a&gt; by loading the &lt;code&gt;resty.core.regex&lt;/code&gt; module (or just the &lt;code&gt;resty.core&lt;/code&gt; module), then an LRU cache is used for the regex cache being used here.&lt;/p&gt; &#xA;&lt;p&gt;Do not activate the &lt;code&gt;o&lt;/code&gt; option for regular expressions (and/or &lt;code&gt;replace&lt;/code&gt; string arguments for &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxresub&#34;&gt;ngx.re.sub&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxregsub&#34;&gt;ngx.re.gsub&lt;/a&gt;) that are generated &lt;em&gt;on the fly&lt;/em&gt; and give rise to infinite variations to avoid hitting the specified limit.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;lua_regex_match_limit&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;lua_regex_match_limit &amp;lt;num&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;default:&lt;/strong&gt; &lt;em&gt;lua_regex_match_limit 0&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Specifies the &#34;match limit&#34; used by the PCRE library when executing the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxrematch&#34;&gt;ngx.re API&lt;/a&gt;. To quote the PCRE manpage, &#34;the limit ... has the effect of limiting the amount of backtracking that can take place.&#34;&lt;/p&gt; &#xA;&lt;p&gt;When the limit is hit, the error string &#34;pcre_exec() failed: -8&#34; will be returned by the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxrematch&#34;&gt;ngx.re API&lt;/a&gt; functions on the Lua land.&lt;/p&gt; &#xA;&lt;p&gt;When setting the limit to 0, the default &#34;match limit&#34; when compiling the PCRE library is used. And this is the default value of this directive.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.8.5&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;lua_package_path&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;lua_package_path &amp;lt;lua-style-path-str&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;default:&lt;/strong&gt; &lt;em&gt;The content of LUA_PATH environment variable or Lua&#39;s compiled-in defaults.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sets the Lua module search path used by scripts specified by &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#set_by_lua&#34;&gt;set_by_lua&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#content_by_lua&#34;&gt;content_by_lua&lt;/a&gt; and others. The path string is in standard Lua path form, and &lt;code&gt;;;&lt;/code&gt; can be used to stand for the original search paths.&lt;/p&gt; &#xA;&lt;p&gt;As from the &lt;code&gt;v0.5.0rc29&lt;/code&gt; release, the special notation &lt;code&gt;$prefix&lt;/code&gt; or &lt;code&gt;${prefix}&lt;/code&gt; can be used in the search path string to indicate the path of the &lt;code&gt;server prefix&lt;/code&gt; usually determined by the &lt;code&gt;-p PATH&lt;/code&gt; command-line option while starting the Nginx server.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;lua_package_cpath&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;lua_package_cpath &amp;lt;lua-style-cpath-str&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;default:&lt;/strong&gt; &lt;em&gt;The content of LUA_CPATH environment variable or Lua&#39;s compiled-in defaults.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sets the Lua C-module search path used by scripts specified by &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#set_by_lua&#34;&gt;set_by_lua&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#content_by_lua&#34;&gt;content_by_lua&lt;/a&gt; and others. The cpath string is in standard Lua cpath form, and &lt;code&gt;;;&lt;/code&gt; can be used to stand for the original cpath.&lt;/p&gt; &#xA;&lt;p&gt;As from the &lt;code&gt;v0.5.0rc29&lt;/code&gt; release, the special notation &lt;code&gt;$prefix&lt;/code&gt; or &lt;code&gt;${prefix}&lt;/code&gt; can be used in the search path string to indicate the path of the &lt;code&gt;server prefix&lt;/code&gt; usually determined by the &lt;code&gt;-p PATH&lt;/code&gt; command-line option while starting the Nginx server.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;init_by_lua&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;init_by_lua &amp;lt;lua-script-str&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;loading-config&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; Use of this directive is &lt;em&gt;discouraged&lt;/em&gt; following the &lt;code&gt;v0.9.17&lt;/code&gt; release. Use the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#init_by_lua_block&#34;&gt;init_by_lua_block&lt;/a&gt; directive instead.&lt;/p&gt; &#xA;&lt;p&gt;Similar to the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#init_by_lua_block&#34;&gt;init_by_lua_block&lt;/a&gt; directive, but accepts the Lua source directly in an Nginx string literal (which requires special character escaping).&lt;/p&gt; &#xA;&lt;p&gt;For instance,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; init_by_lua &#39;&#xA;     print(&#34;I need no extra escaping here, for example: \r\nblah&#34;)&#xA; &#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.5.5&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;init_by_lua_block&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;init_by_lua_block { lua-script }&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;loading-config&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;When Nginx receives the &lt;code&gt;HUP&lt;/code&gt; signal and starts reloading the config file, the Lua VM will also be re-created and &lt;code&gt;init_by_lua_block&lt;/code&gt; will run again on the new Lua VM. In case that the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_code_cache&#34;&gt;lua_code_cache&lt;/a&gt; directive is turned off (default on), the &lt;code&gt;init_by_lua_block&lt;/code&gt; handler will run upon every request because in this special mode a standalone Lua VM is always created for each request.&lt;/p&gt; &#xA;&lt;p&gt;Usually you can pre-load Lua modules at server start-up by means of this hook and take advantage of modern operating systems&#39; copy-on-write (COW) optimization. Here is an example for pre-loading Lua modules:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; # this runs before forking out nginx worker processes:&#xA; init_by_lua_block { require &#34;cjson&#34; }&#xA;&#xA; server {&#xA;     location = /api {&#xA;         content_by_lua_block {&#xA;             -- the following require() will just  return&#xA;             -- the already loaded module from package.loaded:&#xA;             ngx.say(require &#34;cjson&#34;.encode{dog = 5, cat = 6})&#xA;         }&#xA;     }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also initialize the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_shared_dict&#34;&gt;lua_shared_dict&lt;/a&gt; shm storage at this phase. Here is an example for this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; lua_shared_dict dogs 1m;&#xA;&#xA; init_by_lua_block {&#xA;     local dogs = ngx.shared.dogs&#xA;     dogs:set(&#34;Tom&#34;, 56)&#xA; }&#xA;&#xA; server {&#xA;     location = /api {&#xA;         content_by_lua_block {&#xA;             local dogs = ngx.shared.dogs&#xA;             ngx.say(dogs:get(&#34;Tom&#34;))&#xA;         }&#xA;     }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But note that, the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_shared_dict&#34;&gt;lua_shared_dict&lt;/a&gt;&#39;s shm storage will not be cleared through a config reload (via the &lt;code&gt;HUP&lt;/code&gt; signal, for example). So if you do &lt;em&gt;not&lt;/em&gt; want to re-initialize the shm storage in your &lt;code&gt;init_by_lua_block&lt;/code&gt; code in this case, then you just need to set a custom flag in the shm storage and always check the flag in your &lt;code&gt;init_by_lua_block&lt;/code&gt; code.&lt;/p&gt; &#xA;&lt;p&gt;Because the Lua code in this context runs before Nginx forks its worker processes (if any), data or code loaded here will enjoy the &lt;a href=&#34;https://en.wikipedia.org/wiki/Copy-on-write&#34;&gt;Copy-on-write (COW)&lt;/a&gt; feature provided by many operating systems among all the worker processes, thus saving a lot of memory.&lt;/p&gt; &#xA;&lt;p&gt;Do &lt;em&gt;not&lt;/em&gt; initialize your own Lua global variables in this context because use of Lua global variables have performance penalties and can lead to global namespace pollution (see the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua-variable-scope&#34;&gt;Lua Variable Scope&lt;/a&gt; section for more details). The recommended way is to use proper &lt;a href=&#34;https://www.lua.org/manual/5.1/manual.html#5.3&#34;&gt;Lua module&lt;/a&gt; files (but do not use the standard Lua function &lt;a href=&#34;https://www.lua.org/manual/5.1/manual.html#pdf-module&#34;&gt;module()&lt;/a&gt; to define Lua modules because it pollutes the global namespace as well) and call &lt;a href=&#34;https://www.lua.org/manual/5.1/manual.html#pdf-require&#34;&gt;require()&lt;/a&gt; to load your own module files in &lt;code&gt;init_by_lua_block&lt;/code&gt; or other contexts (&lt;a href=&#34;https://www.lua.org/manual/5.1/manual.html#pdf-require&#34;&gt;require()&lt;/a&gt; does cache the loaded Lua modules in the global &lt;code&gt;package.loaded&lt;/code&gt; table in the Lua registry so your modules will only loaded once for the whole Lua VM instance).&lt;/p&gt; &#xA;&lt;p&gt;Only a small set of the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Nginx API for Lua&lt;/a&gt; is supported in this context:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Logging APIs: &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxlog&#34;&gt;ngx.log&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#print&#34;&gt;print&lt;/a&gt;,&lt;/li&gt; &#xA; &lt;li&gt;Shared Dictionary API: &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More Nginx APIs for Lua may be supported in this context upon future user requests.&lt;/p&gt; &#xA;&lt;p&gt;Basically you can safely use Lua libraries that do blocking I/O in this very context because blocking the master process during server start-up is completely okay. Even the Nginx core does blocking I/O (at least on resolving upstream&#39;s host names) at the configure-loading phase.&lt;/p&gt; &#xA;&lt;p&gt;You should be very careful about potential security vulnerabilities in your Lua code registered in this context because the Nginx master process is often run under the &lt;code&gt;root&lt;/code&gt; account.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.9.17&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;See also the following blog posts for more details on OpenResty and Nginx&#39;s shared memory zones:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.openresty.com/en/how-nginx-shm-consume-ram/?src=gh_ngxlua&#34;&gt;How OpenResty and Nginx Shared Memory Zones Consume RAM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.openresty.com/en/nginx-shm-frag/?src=gh_ngxlua&#34;&gt;Memory Fragmentation in OpenResty and Nginx&#39;s Shared Memory Zones&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;init_by_lua_file&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;init_by_lua_file &amp;lt;path-to-lua-script-file&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;loading-config&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Equivalent to &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#init_by_lua_block&#34;&gt;init_by_lua_block&lt;/a&gt;, except that the file specified by &lt;code&gt;&amp;lt;path-to-lua-script-file&amp;gt;&lt;/code&gt; contains the Lua code or &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#luajit-bytecode-support&#34;&gt;LuaJIT bytecode&lt;/a&gt; to be executed.&lt;/p&gt; &#xA;&lt;p&gt;When a relative path like &lt;code&gt;foo/bar.lua&lt;/code&gt; is given, they will be turned into the absolute path relative to the &lt;code&gt;server prefix&lt;/code&gt; path determined by the &lt;code&gt;-p PATH&lt;/code&gt; command-line option while starting the Nginx server.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.5.5&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;init_worker_by_lua&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;init_worker_by_lua &amp;lt;lua-script-str&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;starting-worker&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; Use of this directive is &lt;em&gt;discouraged&lt;/em&gt; following the &lt;code&gt;v0.9.17&lt;/code&gt; release. Use the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#init_worker_by_lua_block&#34;&gt;init_worker_by_lua_block&lt;/a&gt; directive instead.&lt;/p&gt; &#xA;&lt;p&gt;Similar to the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#init_worker_by_lua_block&#34;&gt;init_worker_by_lua_block&lt;/a&gt; directive, but accepts the Lua source directly in an Nginx string literal (which requires special character escaping).&lt;/p&gt; &#xA;&lt;p&gt;For instance,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; init_worker_by_lua &#39;&#xA;     print(&#34;I need no extra escaping here, for example: \r\nblah&#34;)&#xA; &#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.9.5&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;This hook no longer runs in the cache manager and cache loader processes since the &lt;code&gt;v0.10.12&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;init_worker_by_lua_block&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;init_worker_by_lua_block { lua-script }&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;starting-worker&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Runs the specified Lua code upon every Nginx worker process&#39;s startup when the master process is enabled. When the master process is disabled, this hook will just run after &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#init_by_lua_block&#34;&gt;init_by_lua*&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This hook is often used to create per-worker reoccurring timers (via the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxtimerat&#34;&gt;ngx.timer.at&lt;/a&gt; Lua API), either for backend health-check or other timed routine work. Below is an example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; init_worker_by_lua_block {&#xA;     local delay = 3  -- in seconds&#xA;     local new_timer = ngx.timer.at&#xA;     local log = ngx.log&#xA;     local ERR = ngx.ERR&#xA;     local check&#xA;&#xA;     check = function(premature)&#xA;         if not premature then&#xA;             -- do the health check or other routine work&#xA;             local ok, err = new_timer(delay, check)&#xA;             if not ok then&#xA;                 log(ERR, &#34;failed to create timer: &#34;, err)&#xA;                 return&#xA;             end&#xA;         end&#xA;&#xA;         -- do something in timer&#xA;     end&#xA;&#xA;     local hdl, err = new_timer(delay, check)&#xA;     if not hdl then&#xA;         log(ERR, &#34;failed to create timer: &#34;, err)&#xA;         return&#xA;     end&#xA;&#xA;     -- other job in init_worker_by_lua&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.9.17&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;This hook no longer runs in the cache manager and cache loader processes since the &lt;code&gt;v0.10.12&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;init_worker_by_lua_file&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;init_worker_by_lua_file &amp;lt;lua-file-path&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;starting-worker&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Similar to &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#init_worker_by_lua_block&#34;&gt;init_worker_by_lua_block&lt;/a&gt;, but accepts the file path to a Lua source file or Lua bytecode file.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.9.5&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;This hook no longer runs in the cache manager and cache loader processes since the &lt;code&gt;v0.10.12&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;exit_worker_by_lua_block&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;exit_worker_by_lua_block { lua-script }&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;exiting-worker&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Runs the specified Lua code upon every Nginx worker process&#39;s exit when the master process is enabled. When the master process is disabled, this hook will run before the Nginx process exits.&lt;/p&gt; &#xA;&lt;p&gt;This hook is often used to release resources allocated by each worker (e.g. resources allocated by &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#init_worker_by_lua_block&#34;&gt;init_worker_by_lua*&lt;/a&gt;), or to prevent workers from exiting abnormally.&lt;/p&gt; &#xA;&lt;p&gt;For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; exit_worker_by_lua_block {&#xA;     print(&#34;log from exit_worker_by_lua_block&#34;)&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s not allowed to create a timer (even a 0-delay timer) here since it runs after all timers have been processed.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.10.18&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;exit_worker_by_lua_file&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;exit_worker_by_lua_file &amp;lt;path-to-lua-script-file&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;exiting-worker&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Similar to &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#exit_worker_by_lua_block&#34;&gt;exit_worker_by_lua_block&lt;/a&gt;, but accepts the file path to a Lua source file or Lua bytecode file.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.10.18&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;set_by_lua&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;set_by_lua $res &amp;lt;lua-script-str&amp;gt; [$arg1 $arg2 ...]&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;server, server if, location, location if&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;rewrite&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; Use of this directive is &lt;em&gt;discouraged&lt;/em&gt; following the &lt;code&gt;v0.9.17&lt;/code&gt; release. Use the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#set_by_lua_block&#34;&gt;set_by_lua_block&lt;/a&gt; directive instead.&lt;/p&gt; &#xA;&lt;p&gt;Similar to the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#set_by_lua_block&#34;&gt;set_by_lua_block&lt;/a&gt; directive, but accepts the Lua source directly in an Nginx string literal (which requires special character escaping), and&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;this directive support extra arguments after the Lua script.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; set_by_lua $res &#39; return 32 + math.cos(32) &#39;;&#xA; # $res now has the value &#34;32.834223360507&#34; or alike.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As from the &lt;code&gt;v0.5.0rc29&lt;/code&gt; release, Nginx variable interpolation is disabled in the &lt;code&gt;&amp;lt;lua-script-str&amp;gt;&lt;/code&gt; argument of this directive and therefore, the dollar sign character (&lt;code&gt;$&lt;/code&gt;) can be used directly.&lt;/p&gt; &#xA;&lt;p&gt;This directive requires the &lt;a href=&#34;https://github.com/simplresty/ngx_devel_kit&#34;&gt;ngx_devel_kit&lt;/a&gt; module.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;set_by_lua_block&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;set_by_lua_block $res { lua-script }&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;server, server if, location, location if&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;rewrite&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Executes code specified inside a pair of curly braces (&lt;code&gt;{}&lt;/code&gt;), and returns string output to &lt;code&gt;$res&lt;/code&gt;. The code inside a pair of curly braces (&lt;code&gt;{}&lt;/code&gt;) can make &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;API calls&lt;/a&gt; and can retrieve input arguments from the &lt;code&gt;ngx.arg&lt;/code&gt; table (index starts from &lt;code&gt;1&lt;/code&gt; and increases sequentially).&lt;/p&gt; &#xA;&lt;p&gt;This directive is designed to execute short, fast running code blocks as the Nginx event loop is blocked during code execution. Time consuming code sequences should therefore be avoided.&lt;/p&gt; &#xA;&lt;p&gt;This directive is implemented by injecting custom commands into the standard &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_rewrite_module.html&#34;&gt;ngx_http_rewrite_module&lt;/a&gt;&#39;s command list. Because &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_rewrite_module.html&#34;&gt;ngx_http_rewrite_module&lt;/a&gt; does not support nonblocking I/O in its commands, Lua APIs requiring yielding the current Lua &#34;light thread&#34; cannot work in this directive.&lt;/p&gt; &#xA;&lt;p&gt;At least the following API functions are currently disabled within the context of &lt;code&gt;set_by_lua_block&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Output API functions (e.g., &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsay&#34;&gt;ngx.say&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsend_headers&#34;&gt;ngx.send_headers&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Control API functions (e.g., &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxexit&#34;&gt;ngx.exit&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Subrequest API functions (e.g., &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxlocationcapture&#34;&gt;ngx.location.capture&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxlocationcapture_multi&#34;&gt;ngx.location.capture_multi&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Cosocket API functions (e.g., &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsockettcp&#34;&gt;ngx.socket.tcp&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqsocket&#34;&gt;ngx.req.socket&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Sleeping API function &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsleep&#34;&gt;ngx.sleep&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In addition, note that this directive can only write out a value to a single Nginx variable at a time. However, a workaround is possible using the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxvarvariable&#34;&gt;ngx.var.VARIABLE&lt;/a&gt; interface.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; location /foo {&#xA;     set $diff &#39;&#39;; # we have to predefine the $diff variable here&#xA;&#xA;     set_by_lua_block $sum {&#xA;         local a = 32&#xA;         local b = 56&#xA;&#xA;         ngx.var.diff = a - b  -- write to $diff directly&#xA;         return a + b          -- return the $sum value normally&#xA;     }&#xA;&#xA;     echo &#34;sum = $sum, diff = $diff&#34;;&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This directive can be freely mixed with all directives of the &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_rewrite_module.html&#34;&gt;ngx_http_rewrite_module&lt;/a&gt;, &lt;a href=&#34;http://github.com/openresty/set-misc-nginx-module&#34;&gt;set-misc-nginx-module&lt;/a&gt;, and &lt;a href=&#34;http://github.com/openresty/array-var-nginx-module&#34;&gt;array-var-nginx-module&lt;/a&gt; modules. All of these directives will run in the same order as they appear in the config file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; set $foo 32;&#xA; set_by_lua_block $bar { return tonumber(ngx.var.foo) + 1 }&#xA; set $baz &#34;bar: $bar&#34;;  # $baz == &#34;bar: 33&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;No special escaping is required in the Lua code block.&lt;/p&gt; &#xA;&lt;p&gt;This directive requires the &lt;a href=&#34;https://github.com/simplresty/ngx_devel_kit&#34;&gt;ngx_devel_kit&lt;/a&gt; module.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.9.17&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;set_by_lua_file&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;set_by_lua_file $res &amp;lt;path-to-lua-script-file&amp;gt; [$arg1 $arg2 ...]&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;server, server if, location, location if&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;rewrite&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Equivalent to &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#set_by_lua_block&#34;&gt;set_by_lua_block&lt;/a&gt;, except that the file specified by &lt;code&gt;&amp;lt;path-to-lua-script-file&amp;gt;&lt;/code&gt; contains the Lua code, or, as from the &lt;code&gt;v0.5.0rc32&lt;/code&gt; release, the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#luajit-bytecode-support&#34;&gt;LuaJIT bytecode&lt;/a&gt; to be executed.&lt;/p&gt; &#xA;&lt;p&gt;Nginx variable interpolation is supported in the &lt;code&gt;&amp;lt;path-to-lua-script-file&amp;gt;&lt;/code&gt; argument string of this directive. But special care must be taken for injection attacks.&lt;/p&gt; &#xA;&lt;p&gt;When a relative path like &lt;code&gt;foo/bar.lua&lt;/code&gt; is given, they will be turned into the absolute path relative to the &lt;code&gt;server prefix&lt;/code&gt; path determined by the &lt;code&gt;-p PATH&lt;/code&gt; command-line option while starting the Nginx server.&lt;/p&gt; &#xA;&lt;p&gt;When the Lua code cache is turned on (by default), the user code is loaded once at the first request and cached and the Nginx config must be reloaded each time the Lua source file is modified. The Lua code cache can be temporarily disabled during development by switching &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_code_cache&#34;&gt;lua_code_cache&lt;/a&gt; &lt;code&gt;off&lt;/code&gt; in &lt;code&gt;nginx.conf&lt;/code&gt; to avoid reloading Nginx.&lt;/p&gt; &#xA;&lt;p&gt;This directive requires the &lt;a href=&#34;https://github.com/simplresty/ngx_devel_kit&#34;&gt;ngx_devel_kit&lt;/a&gt; module.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;content_by_lua&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;content_by_lua &amp;lt;lua-script-str&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;location, location if&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;content&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; Use of this directive is &lt;em&gt;discouraged&lt;/em&gt; following the &lt;code&gt;v0.9.17&lt;/code&gt; release. Use the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#content_by_lua_block&#34;&gt;content_by_lua_block&lt;/a&gt; directive instead.&lt;/p&gt; &#xA;&lt;p&gt;Similar to the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#content_by_lua_block&#34;&gt;content_by_lua_block&lt;/a&gt; directive, but accepts the Lua source directly in an Nginx string literal (which requires special character escaping).&lt;/p&gt; &#xA;&lt;p&gt;For instance,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; content_by_lua &#39;&#xA;     ngx.say(&#34;I need no extra escaping here, for example: \r\nblah&#34;)&#xA; &#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;content_by_lua_block&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;content_by_lua_block { lua-script }&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;location, location if&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;content&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;For instance,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; content_by_lua_block {&#xA;     ngx.say(&#34;I need no extra escaping here, for example: \r\nblah&#34;)&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Acts as a &#34;content handler&#34; and executes Lua code string specified in &lt;code&gt;{ lua-script }&lt;/code&gt; for every request. The Lua code may make &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;API calls&lt;/a&gt; and is executed as a new spawned coroutine in an independent global environment (i.e. a sandbox).&lt;/p&gt; &#xA;&lt;p&gt;Do not use this directive and other content handler directives in the same location. For example, this directive and the &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass&#34;&gt;proxy_pass&lt;/a&gt; directive should not be used in the same location.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.9.17&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;content_by_lua_file&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;content_by_lua_file &amp;lt;path-to-lua-script-file&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;location, location if&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;content&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Equivalent to &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#content_by_lua_block&#34;&gt;content_by_lua_block&lt;/a&gt;, except that the file specified by &lt;code&gt;&amp;lt;path-to-lua-script-file&amp;gt;&lt;/code&gt; contains the Lua code, or, as from the &lt;code&gt;v0.5.0rc32&lt;/code&gt; release, the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#luajit-bytecode-support&#34;&gt;LuaJIT bytecode&lt;/a&gt; to be executed.&lt;/p&gt; &#xA;&lt;p&gt;If the file is not found, a &lt;code&gt;404 Not Found&lt;/code&gt; status code will be returned, and a &lt;code&gt;503 Service Temporarily Unavailable&lt;/code&gt; status code will be returned in case of errors in reading other files.&lt;/p&gt; &#xA;&lt;p&gt;Nginx variables can be used in the &lt;code&gt;&amp;lt;path-to-lua-script-file&amp;gt;&lt;/code&gt; string to provide flexibility. This however carries some risks and is not ordinarily recommended.&lt;/p&gt; &#xA;&lt;p&gt;When a relative path like &lt;code&gt;foo/bar.lua&lt;/code&gt; is given, they will be turned into the absolute path relative to the &lt;code&gt;server prefix&lt;/code&gt; path determined by the &lt;code&gt;-p PATH&lt;/code&gt; command-line option while starting the Nginx server.&lt;/p&gt; &#xA;&lt;p&gt;When the Lua code cache is turned on (by default), the user code is loaded once at the first request and cached and the Nginx config must be reloaded each time the Lua source file is modified. The Lua code cache can be temporarily disabled during development by switching &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_code_cache&#34;&gt;lua_code_cache&lt;/a&gt; &lt;code&gt;off&lt;/code&gt; in &lt;code&gt;nginx.conf&lt;/code&gt; to avoid reloading Nginx.&lt;/p&gt; &#xA;&lt;p&gt;Nginx variables are supported in the file path for dynamic dispatch, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; # CAUTION: contents in nginx var must be carefully filtered,&#xA; # otherwise there&#39;ll be great security risk!&#xA; location ~ ^/app/([-_a-zA-Z0-9/]+) {&#xA;     set $path $1;&#xA;     content_by_lua_file /path/to/lua/app/root/$path.lua;&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But be very careful about malicious user inputs and always carefully validate or filter out the user-supplied path components.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;server_rewrite_by_lua_block&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;server_rewrite_by_lua_block { lua-script }&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;server rewrite&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Acts as a server rewrite phase handler and executes Lua code string specified in &lt;code&gt;{ lua-script }&lt;/code&gt; for every request. The Lua code may make &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;API calls&lt;/a&gt; and is executed as a new spawned coroutine in an independent global environment (i.e. a sandbox).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; server {&#xA;     ...&#xA;&#xA;     server_rewrite_by_lua_block {&#xA;         ngx.ctx.a = &#34;server_rewrite_by_lua_block in http&#34;&#xA;     }&#xA;&#xA;     location /lua {&#xA;         content_by_lua_block {&#xA;             ngx.say(ngx.ctx.a)&#xA;             ngx.log(ngx.INFO, ngx.ctx.a)&#xA;        &#x9;}&#xA;     }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Just as any other rewrite phase handlers, &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#server_rewrite_by_lua_block&#34;&gt;server_rewrite_by_lua_block&lt;/a&gt; also runs in subrequests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; server {&#xA;     server_rewrite_by_lua_block {&#xA;         ngx.log(ngx.INFO, &#34;is_subrequest:&#34;, ngx.is_subrequest)&#xA;     }&#xA;&#xA;     location /lua {&#xA;         content_by_lua_block {&#xA;             local res = ngx.location.capture(&#34;/sub&#34;)&#xA;             ngx.print(res.body)&#xA;         }&#xA;     }&#xA;&#xA;     location /sub {&#xA;         content_by_lua_block {&#xA;             ngx.say(&#34;OK&#34;)&#xA;         }&#xA;     }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that when calling &lt;code&gt;ngx.exit(ngx.OK)&lt;/code&gt; within a &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#server_rewrite_by_lua_block&#34;&gt;server_rewrite_by_lua_block&lt;/a&gt; handler, the Nginx request processing control flow will still continue to the content handler. To terminate the current request from within a &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#server_rewrite_by_lua_block&#34;&gt;server_rewrite_by_lua_block&lt;/a&gt; handler, call &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxexit&#34;&gt;ngx.exit&lt;/a&gt; with status &amp;gt;= 200 (&lt;code&gt;ngx.HTTP_OK&lt;/code&gt;) and status &amp;lt; 300 (&lt;code&gt;ngx.HTTP_SPECIAL_RESPONSE&lt;/code&gt;) for successful quits and &lt;code&gt;ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)&lt;/code&gt; (or its friends) for failures.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; server_rewrite_by_lua_block {&#xA;     ngx.exit(503)&#xA; }&#xA;&#xA; location /bar {&#xA;     ...&#xA;     # never exec&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;server_rewrite_by_lua_file&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;server_rewrite_by_lua_file &amp;lt;path-to-lua-script-file&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;server rewrite&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Equivalent to &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#server_rewrite_by_lua_block&#34;&gt;server_rewrite_by_lua_block&lt;/a&gt;, except that the file specified by &lt;code&gt;&amp;lt;path-to-lua-script-file&amp;gt;&lt;/code&gt; contains the Lua code, or, as from the &lt;code&gt;v0.10.22&lt;/code&gt; release, the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#luajit-bytecode-support&#34;&gt;LuaJIT bytecode&lt;/a&gt; to be executed.&lt;/p&gt; &#xA;&lt;p&gt;Nginx variables can be used in the &lt;code&gt;&amp;lt;path-to-lua-script-file&amp;gt;&lt;/code&gt; string to provide flexibility. This however carries some risks and is not ordinarily recommended.&lt;/p&gt; &#xA;&lt;p&gt;When a relative path like &lt;code&gt;foo/bar.lua&lt;/code&gt; is given, they will be turned into the absolute path relative to the &lt;code&gt;server prefix&lt;/code&gt; path determined by the &lt;code&gt;-p PATH&lt;/code&gt; command-line option while starting the Nginx server.&lt;/p&gt; &#xA;&lt;p&gt;When the Lua code cache is turned on (by default), the user code is loaded once at the first request and cached and the Nginx config must be reloaded each time the Lua source file is modified. The Lua code cache can be temporarily disabled during development by switching &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_code_cache&#34;&gt;lua_code_cache&lt;/a&gt; &lt;code&gt;off&lt;/code&gt; in &lt;code&gt;nginx.conf&lt;/code&gt; to avoid reloading Nginx.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;rewrite_by_lua&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua &amp;lt;lua-script-str&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server, location, location if&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;rewrite tail&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; Use of this directive is &lt;em&gt;discouraged&lt;/em&gt; following the &lt;code&gt;v0.9.17&lt;/code&gt; release. Use the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#rewrite_by_lua_block&#34;&gt;rewrite_by_lua_block&lt;/a&gt; directive instead.&lt;/p&gt; &#xA;&lt;p&gt;Similar to the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#rewrite_by_lua_block&#34;&gt;rewrite_by_lua_block&lt;/a&gt; directive, but accepts the Lua source directly in an Nginx string literal (which requires special character escaping).&lt;/p&gt; &#xA;&lt;p&gt;For instance,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; rewrite_by_lua &#39;&#xA;     do_something(&#34;hello, world!\nhiya\n&#34;)&#xA; &#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;rewrite_by_lua_block&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua_block { lua-script }&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server, location, location if&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;rewrite tail&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Acts as a rewrite phase handler and executes Lua code string specified in &lt;code&gt;{ lua-script }&lt;/code&gt; for every request. The Lua code may make &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;API calls&lt;/a&gt; and is executed as a new spawned coroutine in an independent global environment (i.e. a sandbox).&lt;/p&gt; &#xA;&lt;p&gt;Note that this handler always runs &lt;em&gt;after&lt;/em&gt; the standard &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_rewrite_module.html&#34;&gt;ngx_http_rewrite_module&lt;/a&gt;. So the following will work as expected:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; location /foo {&#xA;     set $a 12; # create and initialize $a&#xA;     set $b &#34;&#34;; # create and initialize $b&#xA;     rewrite_by_lua_block {&#xA;         ngx.var.b = tonumber(ngx.var.a) + 1&#xA;     }&#xA;     echo &#34;res = $b&#34;;&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;because &lt;code&gt;set $a 12&lt;/code&gt; and &lt;code&gt;set $b &#34;&#34;&lt;/code&gt; run &lt;em&gt;before&lt;/em&gt; &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#rewrite_by_lua_block&#34;&gt;rewrite_by_lua_block&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On the other hand, the following will not work as expected:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; ?  location /foo {&#xA; ?      set $a 12; # create and initialize $a&#xA; ?      set $b &#39;&#39;; # create and initialize $b&#xA; ?      rewrite_by_lua_block {&#xA; ?          ngx.var.b = tonumber(ngx.var.a) + 1&#xA; ?      }&#xA; ?      if ($b = &#39;13&#39;) {&#xA; ?         rewrite ^ /bar redirect;&#xA; ?         break;&#xA; ?      }&#xA; ?&#xA; ?      echo &#34;res = $b&#34;;&#xA; ?  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;because &lt;code&gt;if&lt;/code&gt; runs &lt;em&gt;before&lt;/em&gt; &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#rewrite_by_lua_block&#34;&gt;rewrite_by_lua_block&lt;/a&gt; even if it is placed after &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#rewrite_by_lua_block&#34;&gt;rewrite_by_lua_block&lt;/a&gt; in the config.&lt;/p&gt; &#xA;&lt;p&gt;The right way of doing this is as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; location /foo {&#xA;     set $a 12; # create and initialize $a&#xA;     set $b &#39;&#39;; # create and initialize $b&#xA;     rewrite_by_lua_block {&#xA;         ngx.var.b = tonumber(ngx.var.a) + 1&#xA;         if tonumber(ngx.var.b) == 13 then&#xA;             return ngx.redirect(&#34;/bar&#34;)&#xA;         end&#xA;     }&#xA;&#xA;     echo &#34;res = $b&#34;;&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the &lt;a href=&#34;http://www.grid.net.ru/nginx/eval.en.html&#34;&gt;ngx_eval&lt;/a&gt; module can be approximated by using &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#rewrite_by_lua_block&#34;&gt;rewrite_by_lua_block&lt;/a&gt;. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; location / {&#xA;     eval $res {&#xA;         proxy_pass http://foo.com/check-spam;&#xA;     }&#xA;&#xA;     if ($res = &#39;spam&#39;) {&#xA;         rewrite ^ /terms-of-use.html redirect;&#xA;     }&#xA;&#xA;     fastcgi_pass ...;&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;can be implemented in ngx_lua as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; location = /check-spam {&#xA;     internal;&#xA;     proxy_pass http://foo.com/check-spam;&#xA; }&#xA;&#xA; location / {&#xA;     rewrite_by_lua_block {&#xA;         local res = ngx.location.capture(&#34;/check-spam&#34;)&#xA;         if res.body == &#34;spam&#34; then&#xA;             return ngx.redirect(&#34;/terms-of-use.html&#34;)&#xA;         end&#xA;     }&#xA;&#xA;     fastcgi_pass ...;&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Just as any other rewrite phase handlers, &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#rewrite_by_lua_block&#34;&gt;rewrite_by_lua_block&lt;/a&gt; also runs in subrequests.&lt;/p&gt; &#xA;&lt;p&gt;Note that when calling &lt;code&gt;ngx.exit(ngx.OK)&lt;/code&gt; within a &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#rewrite_by_lua_block&#34;&gt;rewrite_by_lua_block&lt;/a&gt; handler, the Nginx request processing control flow will still continue to the content handler. To terminate the current request from within a &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#rewrite_by_lua_block&#34;&gt;rewrite_by_lua_block&lt;/a&gt; handler, call &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxexit&#34;&gt;ngx.exit&lt;/a&gt; with status &amp;gt;= 200 (&lt;code&gt;ngx.HTTP_OK&lt;/code&gt;) and status &amp;lt; 300 (&lt;code&gt;ngx.HTTP_SPECIAL_RESPONSE&lt;/code&gt;) for successful quits and &lt;code&gt;ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)&lt;/code&gt; (or its friends) for failures.&lt;/p&gt; &#xA;&lt;p&gt;If the &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_rewrite_module.html&#34;&gt;ngx_http_rewrite_module&lt;/a&gt;&#39;s &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#rewrite&#34;&gt;rewrite&lt;/a&gt; directive is used to change the URI and initiate location re-lookups (internal redirections), then any &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#rewrite_by_lua_block&#34;&gt;rewrite_by_lua_block&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#rewrite_by_lua_file_block&#34;&gt;rewrite_by_lua_file_block&lt;/a&gt; code sequences within the current location will not be executed. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; location /foo {&#xA;     rewrite ^ /bar;&#xA;     rewrite_by_lua_block {&#xA;         ngx.exit(503)&#xA;     }&#xA; }&#xA; location /bar {&#xA;     ...&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here the Lua code &lt;code&gt;ngx.exit(503)&lt;/code&gt; will never run. This will be the case if &lt;code&gt;rewrite ^ /bar last&lt;/code&gt; is used as this will similarly initiate an internal redirection. If the &lt;code&gt;break&lt;/code&gt; modifier is used instead, there will be no internal redirection and the &lt;code&gt;rewrite_by_lua_block&lt;/code&gt; code will be executed.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;rewrite_by_lua_block&lt;/code&gt; code will always run at the end of the &lt;code&gt;rewrite&lt;/code&gt; request-processing phase unless &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#rewrite_by_lua_no_postpone&#34;&gt;rewrite_by_lua_no_postpone&lt;/a&gt; is turned on.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.9.17&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;rewrite_by_lua_file&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua_file &amp;lt;path-to-lua-script-file&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server, location, location if&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;rewrite tail&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Equivalent to &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#rewrite_by_lua_block&#34;&gt;rewrite_by_lua_block&lt;/a&gt;, except that the file specified by &lt;code&gt;&amp;lt;path-to-lua-script-file&amp;gt;&lt;/code&gt; contains the Lua code, or, as from the &lt;code&gt;v0.5.0rc32&lt;/code&gt; release, the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#luajit-bytecode-support&#34;&gt;LuaJIT bytecode&lt;/a&gt; to be executed.&lt;/p&gt; &#xA;&lt;p&gt;Nginx variables can be used in the &lt;code&gt;&amp;lt;path-to-lua-script-file&amp;gt;&lt;/code&gt; string to provide flexibility. This however carries some risks and is not ordinarily recommended.&lt;/p&gt; &#xA;&lt;p&gt;When a relative path like &lt;code&gt;foo/bar.lua&lt;/code&gt; is given, they will be turned into the absolute path relative to the &lt;code&gt;server prefix&lt;/code&gt; path determined by the &lt;code&gt;-p PATH&lt;/code&gt; command-line option while starting the Nginx server.&lt;/p&gt; &#xA;&lt;p&gt;When the Lua code cache is turned on (by default), the user code is loaded once at the first request and cached and the Nginx config must be reloaded each time the Lua source file is modified. The Lua code cache can be temporarily disabled during development by switching &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_code_cache&#34;&gt;lua_code_cache&lt;/a&gt; &lt;code&gt;off&lt;/code&gt; in &lt;code&gt;nginx.conf&lt;/code&gt; to avoid reloading Nginx.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;rewrite_by_lua_file&lt;/code&gt; code will always run at the end of the &lt;code&gt;rewrite&lt;/code&gt; request-processing phase unless &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#rewrite_by_lua_no_postpone&#34;&gt;rewrite_by_lua_no_postpone&lt;/a&gt; is turned on.&lt;/p&gt; &#xA;&lt;p&gt;Nginx variables are supported in the file path for dynamic dispatch just as in &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#content_by_lua_file&#34;&gt;content_by_lua_file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;access_by_lua&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;access_by_lua &amp;lt;lua-script-str&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server, location, location if&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;access tail&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; Use of this directive is &lt;em&gt;discouraged&lt;/em&gt; following the &lt;code&gt;v0.9.17&lt;/code&gt; release. Use the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#access_by_lua_block&#34;&gt;access_by_lua_block&lt;/a&gt; directive instead.&lt;/p&gt; &#xA;&lt;p&gt;Similar to the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#access_by_lua_block&#34;&gt;access_by_lua_block&lt;/a&gt; directive, but accepts the Lua source directly in an Nginx string literal (which requires special character escaping).&lt;/p&gt; &#xA;&lt;p&gt;For instance,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; access_by_lua &#39;&#xA;     do_something(&#34;hello, world!\nhiya\n&#34;)&#xA; &#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;access_by_lua_block&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;access_by_lua_block { lua-script }&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server, location, location if&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;access tail&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Acts as an access phase handler and executes Lua code string specified in &lt;code&gt;{ &amp;lt;lua-script }&lt;/code&gt; for every request. The Lua code may make &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;API calls&lt;/a&gt; and is executed as a new spawned coroutine in an independent global environment (i.e. a sandbox).&lt;/p&gt; &#xA;&lt;p&gt;Note that this handler always runs &lt;em&gt;after&lt;/em&gt; the standard &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_access_module.html&#34;&gt;ngx_http_access_module&lt;/a&gt;. So the following will work as expected:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; location / {&#xA;     deny    192.168.1.1;&#xA;     allow   192.168.1.0/24;&#xA;     allow   10.1.1.0/16;&#xA;     deny    all;&#xA;&#xA;     access_by_lua_block {&#xA;         local res = ngx.location.capture(&#34;/mysql&#34;, { ... })&#xA;         ...&#xA;     }&#xA;&#xA;     # proxy_pass/fastcgi_pass/...&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That is, if a client IP address is in the blacklist, it will be denied before the MySQL query for more complex authentication is executed by &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#access_by_lua_block&#34;&gt;access_by_lua_block&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that the &lt;a href=&#34;http://mdounin.ru/hg/ngx_http_auth_request_module/&#34;&gt;ngx_auth_request&lt;/a&gt; module can be approximated by using &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#access_by_lua_block&#34;&gt;access_by_lua_block&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; location / {&#xA;     auth_request /auth;&#xA;&#xA;     # proxy_pass/fastcgi_pass/postgres_pass/...&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;can be implemented in ngx_lua as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; location / {&#xA;     access_by_lua_block {&#xA;         local res = ngx.location.capture(&#34;/auth&#34;)&#xA;&#xA;         if res.status == ngx.HTTP_OK then&#xA;             return&#xA;         end&#xA;&#xA;         if res.status == ngx.HTTP_FORBIDDEN then&#xA;             ngx.exit(res.status)&#xA;         end&#xA;&#xA;         ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)&#xA;     }&#xA;&#xA;     # proxy_pass/fastcgi_pass/postgres_pass/...&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As with other access phase handlers, &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#access_by_lua_block&#34;&gt;access_by_lua_block&lt;/a&gt; will &lt;em&gt;not&lt;/em&gt; run in subrequests.&lt;/p&gt; &#xA;&lt;p&gt;Note that when calling &lt;code&gt;ngx.exit(ngx.OK)&lt;/code&gt; within a &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#access_by_lua_block&#34;&gt;access_by_lua_block&lt;/a&gt; handler, the Nginx request processing control flow will still continue to the content handler. To terminate the current request from within a &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#access_by_lua_block&#34;&gt;access_by_lua_block&lt;/a&gt; handler, call &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxexit&#34;&gt;ngx.exit&lt;/a&gt; with status &amp;gt;= 200 (&lt;code&gt;ngx.HTTP_OK&lt;/code&gt;) and status &amp;lt; 300 (&lt;code&gt;ngx.HTTP_SPECIAL_RESPONSE&lt;/code&gt;) for successful quits and &lt;code&gt;ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)&lt;/code&gt; (or its friends) for failures.&lt;/p&gt; &#xA;&lt;p&gt;Starting from the &lt;code&gt;v0.9.20&lt;/code&gt; release, you can use the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#access_by_lua_no_postpone&#34;&gt;access_by_lua_no_postpone&lt;/a&gt; directive to control when to run this handler inside the &#34;access&#34; request-processing phase of Nginx.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.9.17&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;access_by_lua_file&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;access_by_lua_file &amp;lt;path-to-lua-script-file&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server, location, location if&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;access tail&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Equivalent to &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#access_by_lua_block&#34;&gt;access_by_lua_block&lt;/a&gt;, except that the file specified by &lt;code&gt;&amp;lt;path-to-lua-script-file&amp;gt;&lt;/code&gt; contains the Lua code, or, as from the &lt;code&gt;v0.5.0rc32&lt;/code&gt; release, the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#luajit-bytecode-support&#34;&gt;LuaJIT bytecode&lt;/a&gt; to be executed.&lt;/p&gt; &#xA;&lt;p&gt;Nginx variables can be used in the &lt;code&gt;&amp;lt;path-to-lua-script-file&amp;gt;&lt;/code&gt; string to provide flexibility. This however carries some risks and is not ordinarily recommended.&lt;/p&gt; &#xA;&lt;p&gt;When a relative path like &lt;code&gt;foo/bar.lua&lt;/code&gt; is given, they will be turned into the absolute path relative to the &lt;code&gt;server prefix&lt;/code&gt; path determined by the &lt;code&gt;-p PATH&lt;/code&gt; command-line option while starting the Nginx server.&lt;/p&gt; &#xA;&lt;p&gt;When the Lua code cache is turned on (by default), the user code is loaded once at the first request and cached and the Nginx config must be reloaded each time the Lua source file is modified. The Lua code cache can be temporarily disabled during development by switching &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_code_cache&#34;&gt;lua_code_cache&lt;/a&gt; &lt;code&gt;off&lt;/code&gt; in &lt;code&gt;nginx.conf&lt;/code&gt; to avoid repeatedly reloading Nginx.&lt;/p&gt; &#xA;&lt;p&gt;Nginx variables are supported in the file path for dynamic dispatch just as in &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#content_by_lua_file&#34;&gt;content_by_lua_file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;header_filter_by_lua&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;header_filter_by_lua &amp;lt;lua-script-str&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server, location, location if&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;output-header-filter&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; Use of this directive is &lt;em&gt;discouraged&lt;/em&gt; following the &lt;code&gt;v0.9.17&lt;/code&gt; release. Use the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#header_filter_by_lua_block&#34;&gt;header_filter_by_lua_block&lt;/a&gt; directive instead.&lt;/p&gt; &#xA;&lt;p&gt;Similar to the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#header_filter_by_lua_block&#34;&gt;header_filter_by_lua_block&lt;/a&gt; directive, but accepts the Lua source directly in an Nginx string literal (which requires special character escaping).&lt;/p&gt; &#xA;&lt;p&gt;For instance,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; header_filter_by_lua &#39;&#xA;     ngx.header[&#34;content-length&#34;] = nil&#xA; &#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.2.1rc20&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;header_filter_by_lua_block&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;header_filter_by_lua_block { lua-script }&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server, location, location if&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;output-header-filter&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Uses Lua code specified in &lt;code&gt;{ lua-script }&lt;/code&gt; to define an output header filter.&lt;/p&gt; &#xA;&lt;p&gt;Note that the following API functions are currently disabled within this context:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Output API functions (e.g., &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsay&#34;&gt;ngx.say&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsend_headers&#34;&gt;ngx.send_headers&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Control API functions (e.g., &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxredirect&#34;&gt;ngx.redirect&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxexec&#34;&gt;ngx.exec&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Subrequest API functions (e.g., &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxlocationcapture&#34;&gt;ngx.location.capture&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxlocationcapture_multi&#34;&gt;ngx.location.capture_multi&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Cosocket API functions (e.g., &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsockettcp&#34;&gt;ngx.socket.tcp&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqsocket&#34;&gt;ngx.req.socket&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here is an example of overriding a response header (or adding one if absent) in our Lua header filter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; location / {&#xA;     proxy_pass http://mybackend;&#xA;     header_filter_by_lua_block {&#xA;         ngx.header.Foo = &#34;blah&#34;&#xA;     }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.9.17&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;header_filter_by_lua_file&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;header_filter_by_lua_file &amp;lt;path-to-lua-script-file&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server, location, location if&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;output-header-filter&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Equivalent to &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#header_filter_by_lua_block&#34;&gt;header_filter_by_lua_block&lt;/a&gt;, except that the file specified by &lt;code&gt;&amp;lt;path-to-lua-script-file&amp;gt;&lt;/code&gt; contains the Lua code, or as from the &lt;code&gt;v0.5.0rc32&lt;/code&gt; release, the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#luajit-bytecode-support&#34;&gt;LuaJIT bytecode&lt;/a&gt; to be executed.&lt;/p&gt; &#xA;&lt;p&gt;When a relative path like &lt;code&gt;foo/bar.lua&lt;/code&gt; is given, they will be turned into the absolute path relative to the &lt;code&gt;server prefix&lt;/code&gt; path determined by the &lt;code&gt;-p PATH&lt;/code&gt; command-line option while starting the Nginx server.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.2.1rc20&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;body_filter_by_lua&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;body_filter_by_lua &amp;lt;lua-script-str&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server, location, location if&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;output-body-filter&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; Use of this directive is &lt;em&gt;discouraged&lt;/em&gt; following the &lt;code&gt;v0.9.17&lt;/code&gt; release. Use the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#body_filter_by_lua_block&#34;&gt;body_filter_by_lua_block&lt;/a&gt; directive instead.&lt;/p&gt; &#xA;&lt;p&gt;Similar to the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#body_filter_by_lua_block&#34;&gt;body_filter_by_lua_block&lt;/a&gt; directive, but accepts the Lua source directly in an Nginx string literal (which requires special character escaping).&lt;/p&gt; &#xA;&lt;p&gt;For instance,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; body_filter_by_lua &#39;&#xA;     local data, eof = ngx.arg[1], ngx.arg[2]&#xA; &#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.5.0rc32&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;body_filter_by_lua_block&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;body_filter_by_lua_block { lua-script-str }&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server, location, location if&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;output-body-filter&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Uses Lua code specified in &lt;code&gt;{ lua-script }&lt;/code&gt; to define an output body filter.&lt;/p&gt; &#xA;&lt;p&gt;The input data chunk is passed via &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxarg&#34;&gt;ngx.arg&lt;/a&gt;[1] (as a Lua string value) and the &#34;eof&#34; flag indicating the end of the response body data stream is passed via &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxarg&#34;&gt;ngx.arg&lt;/a&gt;[2] (as a Lua boolean value).&lt;/p&gt; &#xA;&lt;p&gt;Behind the scene, the &#34;eof&#34; flag is just the &lt;code&gt;last_buf&lt;/code&gt; (for main requests) or &lt;code&gt;last_in_chain&lt;/code&gt; (for subrequests) flag of the Nginx chain link buffers. (Before the &lt;code&gt;v0.7.14&lt;/code&gt; release, the &#34;eof&#34; flag does not work at all in subrequests.)&lt;/p&gt; &#xA;&lt;p&gt;The output data stream can be aborted immediately by running the following Lua statement:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; return ngx.ERROR&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will truncate the response body and usually result in incomplete and also invalid responses.&lt;/p&gt; &#xA;&lt;p&gt;The Lua code can pass its own modified version of the input data chunk to the downstream Nginx output body filters by overriding &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxarg&#34;&gt;ngx.arg&lt;/a&gt;[1] with a Lua string or a Lua table of strings. For example, to transform all the lowercase letters in the response body, we can just write:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; location / {&#xA;     proxy_pass http://mybackend;&#xA;     body_filter_by_lua_block {&#xA;         ngx.arg[1] = string.upper(ngx.arg[1])&#xA;     }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When setting &lt;code&gt;nil&lt;/code&gt; or an empty Lua string value to &lt;code&gt;ngx.arg[1]&lt;/code&gt;, no data chunk will be passed to the downstream Nginx output filters at all.&lt;/p&gt; &#xA;&lt;p&gt;Likewise, new &#34;eof&#34; flag can also be specified by setting a boolean value to &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxarg&#34;&gt;ngx.arg&lt;/a&gt;[2]. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; location /t {&#xA;     echo hello world;&#xA;     echo hiya globe;&#xA;&#xA;     body_filter_by_lua_block {&#xA;         local chunk = ngx.arg[1]&#xA;         if string.match(chunk, &#34;hello&#34;) then&#xA;             ngx.arg[2] = true  -- new eof&#xA;             return&#xA;         end&#xA;&#xA;         -- just throw away any remaining chunk data&#xA;         ngx.arg[1] = nil&#xA;     }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then &lt;code&gt;GET /t&lt;/code&gt; will just return the output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;hello world&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That is, when the body filter sees a chunk containing the word &#34;hello&#34;, then it will set the &#34;eof&#34; flag to true immediately, resulting in truncated but still valid responses.&lt;/p&gt; &#xA;&lt;p&gt;When the Lua code may change the length of the response body, then it is required to always clear out the &lt;code&gt;Content-Length&lt;/code&gt; response header (if any) in a header filter to enforce streaming output, as in&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; location /foo {&#xA;     # fastcgi_pass/proxy_pass/...&#xA;&#xA;     header_filter_by_lua_block {&#xA;         ngx.header.content_length = nil&#xA;     }&#xA;     body_filter_by_lua_block {&#xA;         ngx.arg[1] = string.len(ngx.arg[1]) .. &#34;\n&#34;&#xA;     }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the following API functions are currently disabled within this context due to the limitations in Nginx output filter&#39;s current implementation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Output API functions (e.g., &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsay&#34;&gt;ngx.say&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsend_headers&#34;&gt;ngx.send_headers&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Control API functions (e.g., &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxexit&#34;&gt;ngx.exit&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxexec&#34;&gt;ngx.exec&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Subrequest API functions (e.g., &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxlocationcapture&#34;&gt;ngx.location.capture&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxlocationcapture_multi&#34;&gt;ngx.location.capture_multi&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Cosocket API functions (e.g., &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsockettcp&#34;&gt;ngx.socket.tcp&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqsocket&#34;&gt;ngx.req.socket&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Nginx output filters may be called multiple times for a single request because response body may be delivered in chunks. Thus, the Lua code specified by in this directive may also run multiple times in the lifetime of a single HTTP request.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.9.17&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;body_filter_by_lua_file&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;body_filter_by_lua_file &amp;lt;path-to-lua-script-file&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server, location, location if&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;output-body-filter&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Equivalent to &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#body_filter_by_lua_block&#34;&gt;body_filter_by_lua_block&lt;/a&gt;, except that the file specified by &lt;code&gt;&amp;lt;path-to-lua-script-file&amp;gt;&lt;/code&gt; contains the Lua code, or, as from the &lt;code&gt;v0.5.0rc32&lt;/code&gt; release, the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#luajit-bytecode-support&#34;&gt;LuaJIT bytecode&lt;/a&gt; to be executed.&lt;/p&gt; &#xA;&lt;p&gt;When a relative path like &lt;code&gt;foo/bar.lua&lt;/code&gt; is given, they will be turned into the absolute path relative to the &lt;code&gt;server prefix&lt;/code&gt; path determined by the &lt;code&gt;-p PATH&lt;/code&gt; command-line option while starting the Nginx server.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.5.0rc32&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;log_by_lua&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;log_by_lua &amp;lt;lua-script-str&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server, location, location if&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;log&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; Use of this directive is &lt;em&gt;discouraged&lt;/em&gt; following the &lt;code&gt;v0.9.17&lt;/code&gt; release. Use the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#log_by_lua_block&#34;&gt;log_by_lua_block&lt;/a&gt; directive instead.&lt;/p&gt; &#xA;&lt;p&gt;Similar to the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#log_by_lua_block&#34;&gt;log_by_lua_block&lt;/a&gt; directive, but accepts the Lua source directly in an Nginx string literal (which requires special character escaping).&lt;/p&gt; &#xA;&lt;p&gt;For instance,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; log_by_lua &#39;&#xA;     print(&#34;I need no extra escaping here, for example: \r\nblah&#34;)&#xA; &#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.5.0rc31&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;log_by_lua_block&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;log_by_lua_block { lua-script }&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server, location, location if&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;log&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Runs the Lua source code inlined as the &lt;code&gt;{ lua-script }&lt;/code&gt; at the &lt;code&gt;log&lt;/code&gt; request processing phase. This does not replace the current access logs, but runs before.&lt;/p&gt; &#xA;&lt;p&gt;Note that the following API functions are currently disabled within this context:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Output API functions (e.g., &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsay&#34;&gt;ngx.say&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsend_headers&#34;&gt;ngx.send_headers&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Control API functions (e.g., &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxexit&#34;&gt;ngx.exit&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Subrequest API functions (e.g., &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxlocationcapture&#34;&gt;ngx.location.capture&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxlocationcapture_multi&#34;&gt;ngx.location.capture_multi&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Cosocket API functions (e.g., &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsockettcp&#34;&gt;ngx.socket.tcp&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqsocket&#34;&gt;ngx.req.socket&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here is an example of gathering average data for &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_upstream_module.html#var_upstream_response_time&#34;&gt;$upstream_response_time&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; lua_shared_dict log_dict 5M;&#xA;&#xA; server {&#xA;     location / {&#xA;         proxy_pass http://mybackend;&#xA;&#xA;         log_by_lua_block {&#xA;             local log_dict = ngx.shared.log_dict&#xA;             local upstream_time = tonumber(ngx.var.upstream_response_time)&#xA;&#xA;             local sum = log_dict:get(&#34;upstream_time-sum&#34;) or 0&#xA;             sum = sum + upstream_time&#xA;             log_dict:set(&#34;upstream_time-sum&#34;, sum)&#xA;&#xA;             local newval, err = log_dict:incr(&#34;upstream_time-nb&#34;, 1)&#xA;             if not newval and err == &#34;not found&#34; then&#xA;                 log_dict:add(&#34;upstream_time-nb&#34;, 0)&#xA;                 log_dict:incr(&#34;upstream_time-nb&#34;, 1)&#xA;             end&#xA;         }&#xA;     }&#xA;&#xA;     location = /status {&#xA;         content_by_lua_block {&#xA;             local log_dict = ngx.shared.log_dict&#xA;             local sum = log_dict:get(&#34;upstream_time-sum&#34;)&#xA;             local nb = log_dict:get(&#34;upstream_time-nb&#34;)&#xA;&#xA;             if nb and sum then&#xA;                 ngx.say(&#34;average upstream response time: &#34;, sum / nb,&#xA;                         &#34; (&#34;, nb, &#34; reqs)&#34;)&#xA;             else&#xA;                 ngx.say(&#34;no data yet&#34;)&#xA;             end&#xA;         }&#xA;     }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.9.17&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;log_by_lua_file&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;log_by_lua_file &amp;lt;path-to-lua-script-file&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server, location, location if&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;log&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Equivalent to &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#log_by_lua_block&#34;&gt;log_by_lua_block&lt;/a&gt;, except that the file specified by &lt;code&gt;&amp;lt;path-to-lua-script-file&amp;gt;&lt;/code&gt; contains the Lua code, or, as from the &lt;code&gt;v0.5.0rc32&lt;/code&gt; release, the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#luajit-bytecode-support&#34;&gt;LuaJIT bytecode&lt;/a&gt; to be executed.&lt;/p&gt; &#xA;&lt;p&gt;When a relative path like &lt;code&gt;foo/bar.lua&lt;/code&gt; is given, they will be turned into the absolute path relative to the &lt;code&gt;server prefix&lt;/code&gt; path determined by the &lt;code&gt;-p PATH&lt;/code&gt; command-line option while starting the Nginx server.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.5.0rc31&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;balancer_by_lua_block&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;balancer_by_lua_block { lua-script }&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;upstream&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;content&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This directive runs Lua code as an upstream balancer for any upstream entities defined by the &lt;code&gt;upstream {}&lt;/code&gt; configuration block.&lt;/p&gt; &#xA;&lt;p&gt;For instance,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; upstream foo {&#xA;     server 127.0.0.1;&#xA;     balancer_by_lua_block {&#xA;         -- use Lua to do something interesting here&#xA;         -- as a dynamic balancer&#xA;     }&#xA; }&#xA;&#xA; server {&#xA;     location / {&#xA;         proxy_pass http://foo;&#xA;     }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The resulting Lua load balancer can work with any existing Nginx upstream modules like &lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_proxy_module.html&#34;&gt;ngx_proxy&lt;/a&gt; and &lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html&#34;&gt;ngx_fastcgi&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Also, the Lua load balancer can work with the standard upstream connection pool mechanism, i.e., the standard &lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_upstream_module.html#keepalive&#34;&gt;keepalive&lt;/a&gt; directive. Just ensure that the &lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_upstream_module.html#keepalive&#34;&gt;keepalive&lt;/a&gt; directive is used &lt;em&gt;after&lt;/em&gt; this &lt;code&gt;balancer_by_lua_block&lt;/code&gt; directive in a single &lt;code&gt;upstream {}&lt;/code&gt; configuration block.&lt;/p&gt; &#xA;&lt;p&gt;The Lua load balancer can totally ignore the list of servers defined in the &lt;code&gt;upstream {}&lt;/code&gt; block and select peer from a completely dynamic server list (even changing per request) via the &lt;a href=&#34;https://github.com/openresty/lua-resty-core/raw/master/lib/ngx/balancer.md&#34;&gt;ngx.balancer&lt;/a&gt; module from the &lt;a href=&#34;https://github.com/openresty/lua-resty-core&#34;&gt;lua-resty-core&lt;/a&gt; library.&lt;/p&gt; &#xA;&lt;p&gt;The Lua code handler registered by this directive might get called more than once in a single downstream request when the Nginx upstream mechanism retries the request on conditions specified by directives like the &lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_next_upstream&#34;&gt;proxy_next_upstream&lt;/a&gt; directive.&lt;/p&gt; &#xA;&lt;p&gt;This Lua code execution context does not support yielding, so Lua APIs that may yield (like cosockets and &#34;light threads&#34;) are disabled in this context. One can usually work around this limitation by doing such operations in an earlier phase handler (like &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#access_by_lua&#34;&gt;access_by_lua*&lt;/a&gt;) and passing along the result into this context via the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxctx&#34;&gt;ngx.ctx&lt;/a&gt; table.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.10.0&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;balancer_by_lua_file&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;balancer_by_lua_file &amp;lt;path-to-lua-script-file&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;upstream&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;content&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Equivalent to &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#balancer_by_lua_block&#34;&gt;balancer_by_lua_block&lt;/a&gt;, except that the file specified by &lt;code&gt;&amp;lt;path-to-lua-script-file&amp;gt;&lt;/code&gt; contains the Lua code, or, as from the &lt;code&gt;v0.5.0rc32&lt;/code&gt; release, the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#luajit-bytecode-support&#34;&gt;LuaJIT bytecode&lt;/a&gt; to be executed.&lt;/p&gt; &#xA;&lt;p&gt;When a relative path like &lt;code&gt;foo/bar.lua&lt;/code&gt; is given, they will be turned into the absolute path relative to the &lt;code&gt;server prefix&lt;/code&gt; path determined by the &lt;code&gt;-p PATH&lt;/code&gt; command-line option while starting the Nginx server.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.10.0&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;lua_need_request_body&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;lua_need_request_body &amp;lt;on|off&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;default:&lt;/strong&gt; &lt;em&gt;off&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server, location, location if&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;depends on usage&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Determines whether to force the request body data to be read before running rewrite/access/content_by_lua* or not. The Nginx core does not read the client request body by default and if request body data is required, then this directive should be turned &lt;code&gt;on&lt;/code&gt; or the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqread_body&#34;&gt;ngx.req.read_body&lt;/a&gt; function should be called within the Lua code.&lt;/p&gt; &#xA;&lt;p&gt;To read the request body data within the &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_core_module.html#var_request_body&#34;&gt;$request_body&lt;/a&gt; variable, &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_buffer_size&#34;&gt;client_body_buffer_size&lt;/a&gt; must have the same value as &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_core_module.html#client_max_body_size&#34;&gt;client_max_body_size&lt;/a&gt;. Because when the content length exceeds &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_buffer_size&#34;&gt;client_body_buffer_size&lt;/a&gt; but less than &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_core_module.html#client_max_body_size&#34;&gt;client_max_body_size&lt;/a&gt;, Nginx will buffer the data into a temporary file on the disk, which will lead to empty value in the &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_core_module.html#var_request_body&#34;&gt;$request_body&lt;/a&gt; variable.&lt;/p&gt; &#xA;&lt;p&gt;If the current location includes &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#rewrite_by_lua&#34;&gt;rewrite_by_lua*&lt;/a&gt; directives, then the request body will be read just before the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#rewrite_by_lua&#34;&gt;rewrite_by_lua*&lt;/a&gt; code is run (and also at the &lt;code&gt;rewrite&lt;/code&gt; phase). Similarly, if only &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#content_by_lua&#34;&gt;content_by_lua&lt;/a&gt; is specified, the request body will not be read until the content handler&#39;s Lua code is about to run (i.e., the request body will be read during the content phase).&lt;/p&gt; &#xA;&lt;p&gt;It is recommended however, to use the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqread_body&#34;&gt;ngx.req.read_body&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqdiscard_body&#34;&gt;ngx.req.discard_body&lt;/a&gt; functions for finer control over the request body reading process instead.&lt;/p&gt; &#xA;&lt;p&gt;This also applies to &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#access_by_lua&#34;&gt;access_by_lua*&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ssl_client_hello_by_lua_block&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ssl_client_hello_by_lua_block { lua-script }&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;right-after-client-hello-message-was-processed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This directive runs user Lua code when Nginx is about to post-process the SSL client hello message for the downstream SSL (https) connections.&lt;/p&gt; &#xA;&lt;p&gt;It is particularly useful for dynamically setting the SSL protocols according to the SNI.&lt;/p&gt; &#xA;&lt;p&gt;It is also useful to do some custom operations according to the per-connection information in the client hello message.&lt;/p&gt; &#xA;&lt;p&gt;For example, one can parse custom client hello extension and do the corresponding handling in pure Lua.&lt;/p&gt; &#xA;&lt;p&gt;This Lua handler will always run whether the SSL session is resumed (via SSL session IDs or TLS session tickets) or not. While the &lt;code&gt;ssl_certificate_by_lua*&lt;/code&gt; Lua handler will only runs when initiating a full SSL handshake.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/openresty/lua-resty-core/raw/master/lib/ngx/ssl/clienthello.md&#34;&gt;ngx.ssl.clienthello&lt;/a&gt; Lua modules provided by the &lt;a href=&#34;https://github.com/openresty/lua-resty-core/#readme&#34;&gt;lua-resty-core&lt;/a&gt; library are particularly useful in this context.&lt;/p&gt; &#xA;&lt;p&gt;Note that this handler runs in extremely early stage of SSL handshake, before the SSL client hello extensions are parsed. So you can not use some Lua API like &lt;code&gt;ssl.server_name()&lt;/code&gt; which is dependent on the later stage&#39;s processing.&lt;/p&gt; &#xA;&lt;p&gt;Also note that only the directive in default server is valid for several virtual servers with the same IP address and port.&lt;/p&gt; &#xA;&lt;p&gt;Below is a trivial example using the &lt;a href=&#34;https://github.com/openresty/lua-resty-core/raw/master/lib/ngx/ssl/clienthello.md&#34;&gt;ngx.ssl.clienthello&lt;/a&gt; module at the same time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; server {&#xA;     listen 443 ssl;&#xA;     server_name   test.com;&#xA;     ssl_certificate /path/to/cert.crt;&#xA;     ssl_certificate_key /path/to/key.key;&#xA;     ssl_client_hello_by_lua_block {&#xA;         local ssl_clt = require &#34;ngx.ssl.clienthello&#34;&#xA;         local host, err = ssl_clt.get_client_hello_server_name()&#xA;         if host == &#34;test.com&#34; then&#xA;             ssl_clt.set_protocols({&#34;TLSv1&#34;, &#34;TLSv1.1&#34;})&#xA;         elseif host == &#34;test2.com&#34; then&#xA;             ssl_clt.set_protocols({&#34;TLSv1.2&#34;, &#34;TLSv1.3&#34;})&#xA;         elseif not host then&#xA;             ngx.log(ngx.ERR, &#34;failed to get the SNI name: &#34;, err)&#xA;             ngx.exit(ngx.ERROR)&#xA;         else&#xA;             ngx.log(ngx.ERR, &#34;unknown SNI name: &#34;, host)&#xA;             ngx.exit(ngx.ERROR)&#xA;         end&#xA;     }&#xA;     ...&#xA; }&#xA; server {&#xA;     listen 443 ssl;&#xA;     server_name   test2.com;&#xA;     ssl_certificate /path/to/cert.crt;&#xA;     ssl_certificate_key /path/to/key.key;&#xA;     ...&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See more information in the &lt;a href=&#34;https://github.com/openresty/lua-resty-core/raw/master/lib/ngx/ssl/clienthello.md&#34;&gt;ngx.ssl.clienthello&lt;/a&gt; Lua modules&#39; official documentation.&lt;/p&gt; &#xA;&lt;p&gt;Uncaught Lua exceptions in the user Lua code immediately abort the current SSL session, so does the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxexit&#34;&gt;ngx.exit&lt;/a&gt; call with an error code like &lt;code&gt;ngx.ERROR&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This Lua code execution context &lt;em&gt;does&lt;/em&gt; support yielding, so Lua APIs that may yield (like cosockets, sleeping, and &#34;light threads&#34;) are enabled in this context&lt;/p&gt; &#xA;&lt;p&gt;Note, you need to configure the &lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_certificate&#34;&gt;ssl_certificate&lt;/a&gt; and &lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_certificate_key&#34;&gt;ssl_certificate_key&lt;/a&gt; to avoid the following error while starting NGINX:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nginx: [emerg] no ssl configured for the server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This directive requires OpenSSL 1.1.1 or greater.&lt;/p&gt; &#xA;&lt;p&gt;If you are using the &lt;a href=&#34;https://openresty.org/en/linux-packages.html&#34;&gt;official pre-built packages&lt;/a&gt; for &lt;a href=&#34;https://openresty.org/&#34;&gt;OpenResty&lt;/a&gt; 1.21.4.1 or later, then everything should work out of the box.&lt;/p&gt; &#xA;&lt;p&gt;If you are not using the Nginx core shipped with &lt;a href=&#34;https://openresty.org&#34;&gt;OpenResty&lt;/a&gt; 1.21.4.1 or later, you will need to apply patches to the standard Nginx core:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://openresty.org/en/nginx-ssl-patches.html&#34;&gt;https://openresty.org/en/nginx-ssl-patches.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.10.21&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ssl_client_hello_by_lua_file&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ssl_client_hello_by_lua_file &amp;lt;path-to-lua-script-file&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;right-after-client-hello-message-was-processed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Equivalent to &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ssl_client_hello_by_lua_block&#34;&gt;ssl_client_hello_by_lua_block&lt;/a&gt;, except that the file specified by &lt;code&gt;&amp;lt;path-to-lua-script-file&amp;gt;&lt;/code&gt; contains the Lua code, or, as from the &lt;code&gt;v0.5.0rc32&lt;/code&gt; release, the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#luajit-bytecode-support&#34;&gt;LuaJIT bytecode&lt;/a&gt; to be executed.&lt;/p&gt; &#xA;&lt;p&gt;When a relative path like &lt;code&gt;foo/bar.lua&lt;/code&gt; is given, they will be turned into the absolute path relative to the &lt;code&gt;server prefix&lt;/code&gt; path determined by the &lt;code&gt;-p PATH&lt;/code&gt; command-line option while starting the Nginx server.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.10.21&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ssl_certificate_by_lua_block&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ssl_certificate_by_lua_block { lua-script }&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;server&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;right-before-SSL-handshake&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This directive runs user Lua code when Nginx is about to start the SSL handshake for the downstream SSL (https) connections.&lt;/p&gt; &#xA;&lt;p&gt;It is particularly useful for setting the SSL certificate chain and the corresponding private key on a per-request basis. It is also useful to load such handshake configurations nonblockingly from the remote (for example, with the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsockettcp&#34;&gt;cosocket&lt;/a&gt; API). And one can also do per-request OCSP stapling handling in pure Lua here as well.&lt;/p&gt; &#xA;&lt;p&gt;Another typical use case is to do SSL handshake traffic control nonblockingly in this context, with the help of the &lt;a href=&#34;https://github.com/openresty/lua-resty-limit-traffic&#34;&gt;lua-resty-limit-traffic#readme&lt;/a&gt; library, for example.&lt;/p&gt; &#xA;&lt;p&gt;One can also do interesting things with the SSL handshake requests from the client side, like rejecting old SSL clients using the SSLv3 protocol or even below selectively.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/openresty/lua-resty-core/raw/master/lib/ngx/ssl.md&#34;&gt;ngx.ssl&lt;/a&gt; and &lt;a href=&#34;https://github.com/openresty/lua-resty-core/raw/master/lib/ngx/ocsp.md&#34;&gt;ngx.ocsp&lt;/a&gt; Lua modules provided by the &lt;a href=&#34;https://github.com/openresty/lua-resty-core/#readme&#34;&gt;lua-resty-core&lt;/a&gt; library are particularly useful in this context. You can use the Lua API offered by these two Lua modules to manipulate the SSL certificate chain and private key for the current SSL connection being initiated.&lt;/p&gt; &#xA;&lt;p&gt;This Lua handler does not run at all, however, when Nginx/OpenSSL successfully resumes the SSL session via SSL session IDs or TLS session tickets for the current SSL connection. In other words, this Lua handler only runs when Nginx has to initiate a full SSL handshake.&lt;/p&gt; &#xA;&lt;p&gt;Below is a trivial example using the &lt;a href=&#34;https://github.com/openresty/lua-resty-core/raw/master/lib/ngx/ssl.md&#34;&gt;ngx.ssl&lt;/a&gt; module at the same time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; server {&#xA;     listen 443 ssl;&#xA;     server_name   test.com;&#xA;&#xA;     ssl_certificate_by_lua_block {&#xA;         print(&#34;About to initiate a new SSL handshake!&#34;)&#xA;     }&#xA;&#xA;     location / {&#xA;         root html;&#xA;     }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See more complicated examples in the &lt;a href=&#34;https://github.com/openresty/lua-resty-core/raw/master/lib/ngx/ssl.md&#34;&gt;ngx.ssl&lt;/a&gt; and &lt;a href=&#34;https://github.com/openresty/lua-resty-core/raw/master/lib/ngx/ocsp.md&#34;&gt;ngx.ocsp&lt;/a&gt; Lua modules&#39; official documentation.&lt;/p&gt; &#xA;&lt;p&gt;Uncaught Lua exceptions in the user Lua code immediately abort the current SSL session, so does the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxexit&#34;&gt;ngx.exit&lt;/a&gt; call with an error code like &lt;code&gt;ngx.ERROR&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This Lua code execution context &lt;em&gt;does&lt;/em&gt; support yielding, so Lua APIs that may yield (like cosockets, sleeping, and &#34;light threads&#34;) are enabled in this context.&lt;/p&gt; &#xA;&lt;p&gt;Note, however, you still need to configure the &lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_certificate&#34;&gt;ssl_certificate&lt;/a&gt; and &lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_certificate_key&#34;&gt;ssl_certificate_key&lt;/a&gt; directives even though you will not use this static certificate and private key at all. This is because the NGINX core requires their appearance otherwise you are seeing the following error while starting NGINX:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nginx: [emerg] no ssl configured for the server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This directive requires OpenSSL 1.0.2e or greater.&lt;/p&gt; &#xA;&lt;p&gt;If you are using the &lt;a href=&#34;https://openresty.org/en/linux-packages.html&#34;&gt;official pre-built packages&lt;/a&gt; for &lt;a href=&#34;https://openresty.org/&#34;&gt;OpenResty&lt;/a&gt; 1.9.7.2 or later, then everything should work out of the box.&lt;/p&gt; &#xA;&lt;p&gt;If you are not using the Nginx core shipped with &lt;a href=&#34;https://openresty.org&#34;&gt;OpenResty&lt;/a&gt; 1.9.7.2 or later, you will need to apply patches to the standard Nginx core:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://openresty.org/en/nginx-ssl-patches.html&#34;&gt;https://openresty.org/en/nginx-ssl-patches.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.10.0&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ssl_certificate_by_lua_file&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ssl_certificate_by_lua_file &amp;lt;path-to-lua-script-file&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;server&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;right-before-SSL-handshake&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Equivalent to &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ssl_certificate_by_lua_block&#34;&gt;ssl_certificate_by_lua_block&lt;/a&gt;, except that the file specified by &lt;code&gt;&amp;lt;path-to-lua-script-file&amp;gt;&lt;/code&gt; contains the Lua code, or, as from the &lt;code&gt;v0.5.0rc32&lt;/code&gt; release, the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#luajit-bytecode-support&#34;&gt;LuaJIT bytecode&lt;/a&gt; to be executed.&lt;/p&gt; &#xA;&lt;p&gt;When a relative path like &lt;code&gt;foo/bar.lua&lt;/code&gt; is given, they will be turned into the absolute path relative to the &lt;code&gt;server prefix&lt;/code&gt; path determined by the &lt;code&gt;-p PATH&lt;/code&gt; command-line option while starting the Nginx server.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.10.0&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ssl_session_fetch_by_lua_block&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ssl_session_fetch_by_lua_block { lua-script }&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;right-before-SSL-handshake&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This directive runs Lua code to look up and load the SSL session (if any) according to the session ID provided by the current SSL handshake request for the downstream.&lt;/p&gt; &#xA;&lt;p&gt;The Lua API for obtaining the current session ID and loading a cached SSL session data is provided in the &lt;a href=&#34;https://github.com/openresty/lua-resty-core/raw/master/lib/ngx/ssl/session.md&#34;&gt;ngx.ssl.session&lt;/a&gt; Lua module shipped with the &lt;a href=&#34;https://github.com/openresty/lua-resty-core#readme&#34;&gt;lua-resty-core&lt;/a&gt; library.&lt;/p&gt; &#xA;&lt;p&gt;Lua APIs that may yield, like &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsleep&#34;&gt;ngx.sleep&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsockettcp&#34;&gt;cosockets&lt;/a&gt;, are enabled in this context.&lt;/p&gt; &#xA;&lt;p&gt;This hook, together with the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ssl_session_store_by_lua_block&#34;&gt;ssl_session_store_by_lua*&lt;/a&gt; hook, can be used to implement distributed caching mechanisms in pure Lua (based on the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsockettcp&#34;&gt;cosocket&lt;/a&gt; API, for example). If a cached SSL session is found and loaded into the current SSL connection context, SSL session resumption can then get immediately initiated and bypass the full SSL handshake process which is very expensive in terms of CPU time.&lt;/p&gt; &#xA;&lt;p&gt;Please note that TLS session tickets are very different and it is the clients&#39; responsibility to cache the SSL session state when session tickets are used. SSL session resumptions based on TLS session tickets would happen automatically without going through this hook (nor the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ssl_session_store_by_lua_block&#34;&gt;ssl_session_store_by_lua*&lt;/a&gt; hook). This hook is mainly for older or less capable SSL clients that can only do SSL sessions by session IDs.&lt;/p&gt; &#xA;&lt;p&gt;When &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ssl_certificate_by_lua_block&#34;&gt;ssl_certificate_by_lua*&lt;/a&gt; is specified at the same time, this hook usually runs before &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ssl_certificate_by_lua_block&#34;&gt;ssl_certificate_by_lua*&lt;/a&gt;. When the SSL session is found and successfully loaded for the current SSL connection, SSL session resumption will happen and thus bypass the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ssl_certificate_by_lua_block&#34;&gt;ssl_certificate_by_lua*&lt;/a&gt; hook completely. In this case, Nginx also bypasses the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ssl_session_store_by_lua_block&#34;&gt;ssl_session_store_by_lua*&lt;/a&gt; hook, for obvious reasons.&lt;/p&gt; &#xA;&lt;p&gt;To easily test this hook locally with a modern web browser, you can temporarily put the following line in your https server block to disable the TLS session ticket support:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ssl_session_tickets off;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But do not forget to comment this line out before publishing your site to the world.&lt;/p&gt; &#xA;&lt;p&gt;If you are using the &lt;a href=&#34;https://openresty.org/en/linux-packages.html&#34;&gt;official pre-built packages&lt;/a&gt; for &lt;a href=&#34;https://openresty.org/&#34;&gt;OpenResty&lt;/a&gt; 1.11.2.1 or later, then everything should work out of the box.&lt;/p&gt; &#xA;&lt;p&gt;If you are not using one of the &lt;a href=&#34;https://openresty.org/en/linux-packages.html&#34;&gt;OpenSSL packages&lt;/a&gt; provided by &lt;a href=&#34;https://openresty.org&#34;&gt;OpenResty&lt;/a&gt;, you will need to apply patches to OpenSSL in order to use this directive:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://openresty.org/en/openssl-patches.html&#34;&gt;https://openresty.org/en/openssl-patches.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Similarly, if you are not using the Nginx core shipped with &lt;a href=&#34;https://openresty.org&#34;&gt;OpenResty&lt;/a&gt; 1.11.2.1 or later, you will need to apply patches to the standard Nginx core:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://openresty.org/en/nginx-ssl-patches.html&#34;&gt;https://openresty.org/en/nginx-ssl-patches.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.10.6&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;Note that this directive can only be used in the &lt;strong&gt;http context&lt;/strong&gt; starting with the &lt;code&gt;v0.10.7&lt;/code&gt; release since SSL session resumption happens before server name dispatch.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ssl_session_fetch_by_lua_file&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ssl_session_fetch_by_lua_file &amp;lt;path-to-lua-script-file&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;right-before-SSL-handshake&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Equivalent to &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ssl_session_fetch_by_lua_block&#34;&gt;ssl_session_fetch_by_lua_block&lt;/a&gt;, except that the file specified by &lt;code&gt;&amp;lt;path-to-lua-script-file&amp;gt;&lt;/code&gt; contains the Lua code, or rather, the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#luajit-bytecode-support&#34;&gt;LuaJIT bytecode&lt;/a&gt; to be executed.&lt;/p&gt; &#xA;&lt;p&gt;When a relative path like &lt;code&gt;foo/bar.lua&lt;/code&gt; is given, they will be turned into the absolute path relative to the &lt;code&gt;server prefix&lt;/code&gt; path determined by the &lt;code&gt;-p PATH&lt;/code&gt; command-line option while starting the Nginx server.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.10.6&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;Note that: this directive is only allowed to used in &lt;strong&gt;http context&lt;/strong&gt; from the &lt;code&gt;v0.10.7&lt;/code&gt; release (because SSL session resumption happens before server name dispatch).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ssl_session_store_by_lua_block&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ssl_session_store_by_lua_block { lua-script }&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;right-after-SSL-handshake&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This directive runs Lua code to fetch and save the SSL session (if any) according to the session ID provided by the current SSL handshake request for the downstream. The saved or cached SSL session data can be used for future SSL connections to resume SSL sessions without going through the full SSL handshake process (which is very expensive in terms of CPU time).&lt;/p&gt; &#xA;&lt;p&gt;Lua APIs that may yield, like &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsleep&#34;&gt;ngx.sleep&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsockettcp&#34;&gt;cosockets&lt;/a&gt;, are &lt;em&gt;disabled&lt;/em&gt; in this context. You can still, however, use the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxtimerat&#34;&gt;ngx.timer.at&lt;/a&gt; API to create 0-delay timers to save the SSL session data asynchronously to external services (like &lt;code&gt;redis&lt;/code&gt; or &lt;code&gt;memcached&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The Lua API for obtaining the current session ID and the associated session state data is provided in the &lt;a href=&#34;https://github.com/openresty/lua-resty-core/raw/master/lib/ngx/ssl/session.md#readme&#34;&gt;ngx.ssl.session&lt;/a&gt; Lua module shipped with the &lt;a href=&#34;https://github.com/openresty/lua-resty-core#readme&#34;&gt;lua-resty-core&lt;/a&gt; library.&lt;/p&gt; &#xA;&lt;p&gt;To easily test this hook locally with a modern web browser, you can temporarily put the following line in your https server block to disable the TLS session ticket support:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ssl_session_tickets off;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But do not forget to comment this line out before publishing your site to the world.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.10.6&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;Note that: this directive is only allowed to used in &lt;strong&gt;http context&lt;/strong&gt; from the &lt;code&gt;v0.10.7&lt;/code&gt; release (because SSL session resumption happens before server name dispatch).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ssl_session_store_by_lua_file&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ssl_session_store_by_lua_file &amp;lt;path-to-lua-script-file&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;right-after-SSL-handshake&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Equivalent to &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ssl_session_store_by_lua_block&#34;&gt;ssl_session_store_by_lua_block&lt;/a&gt;, except that the file specified by &lt;code&gt;&amp;lt;path-to-lua-script-file&amp;gt;&lt;/code&gt; contains the Lua code, or rather, the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#luajit-bytecode-support&#34;&gt;LuaJIT bytecode&lt;/a&gt; to be executed.&lt;/p&gt; &#xA;&lt;p&gt;When a relative path like &lt;code&gt;foo/bar.lua&lt;/code&gt; is given, they will be turned into the absolute path relative to the &lt;code&gt;server prefix&lt;/code&gt; path determined by the &lt;code&gt;-p PATH&lt;/code&gt; command-line option while starting the Nginx server.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.10.6&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;Note that: this directive is only allowed to used in &lt;strong&gt;http context&lt;/strong&gt; from the &lt;code&gt;v0.10.7&lt;/code&gt; release (because SSL session resumption happens before server name dispatch).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;lua_shared_dict&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;lua_shared_dict &amp;lt;name&amp;gt; &amp;lt;size&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;default:&lt;/strong&gt; &lt;em&gt;no&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;depends on usage&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Declares a shared memory zone, &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt;, to serve as storage for the shm based Lua dictionary &lt;code&gt;ngx.shared.&amp;lt;name&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Shared memory zones are always shared by all the Nginx worker processes in the current Nginx server instance.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;&amp;lt;size&amp;gt;&lt;/code&gt; argument accepts size units such as &lt;code&gt;k&lt;/code&gt; and &lt;code&gt;m&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; http {&#xA;     lua_shared_dict dogs 10m;&#xA;     ...&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The hard-coded minimum size is 8KB while the practical minimum size depends on actual user data set (some people start with 12KB).&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.3.1rc22&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;lua_socket_connect_timeout&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;lua_socket_connect_timeout &amp;lt;time&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;default:&lt;/strong&gt; &lt;em&gt;lua_socket_connect_timeout 60s&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server, location&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This directive controls the default timeout value used in TCP/unix-domain socket object&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsockconnect&#34;&gt;connect&lt;/a&gt; method and can be overridden by the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksettimeout&#34;&gt;settimeout&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksettimeouts&#34;&gt;settimeouts&lt;/a&gt; methods.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; argument can be an integer, with an optional time unit, like &lt;code&gt;s&lt;/code&gt; (second), &lt;code&gt;ms&lt;/code&gt; (millisecond), &lt;code&gt;m&lt;/code&gt; (minute). The default time unit is &lt;code&gt;s&lt;/code&gt;, i.e., &#34;second&#34;. The default setting is &lt;code&gt;60s&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.5.0rc1&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;lua_socket_send_timeout&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;lua_socket_send_timeout &amp;lt;time&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;default:&lt;/strong&gt; &lt;em&gt;lua_socket_send_timeout 60s&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server, location&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Controls the default timeout value used in TCP/unix-domain socket object&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksend&#34;&gt;send&lt;/a&gt; method and can be overridden by the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksettimeout&#34;&gt;settimeout&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksettimeouts&#34;&gt;settimeouts&lt;/a&gt; methods.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; argument can be an integer, with an optional time unit, like &lt;code&gt;s&lt;/code&gt; (second), &lt;code&gt;ms&lt;/code&gt; (millisecond), &lt;code&gt;m&lt;/code&gt; (minute). The default time unit is &lt;code&gt;s&lt;/code&gt;, i.e., &#34;second&#34;. The default setting is &lt;code&gt;60s&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.5.0rc1&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;lua_socket_send_lowat&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;lua_socket_send_lowat &amp;lt;size&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;default:&lt;/strong&gt; &lt;em&gt;lua_socket_send_lowat 0&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server, location&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Controls the &lt;code&gt;lowat&lt;/code&gt; (low water) value for the cosocket send buffer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;lua_socket_read_timeout&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;lua_socket_read_timeout &amp;lt;time&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;default:&lt;/strong&gt; &lt;em&gt;lua_socket_read_timeout 60s&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server, location&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;phase:&lt;/strong&gt; &lt;em&gt;depends on usage&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This directive controls the default timeout value used in TCP/unix-domain socket object&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsockreceive&#34;&gt;receive&lt;/a&gt; method and iterator functions returned by the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsockreceiveuntil&#34;&gt;receiveuntil&lt;/a&gt; method. This setting can be overridden by the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksettimeout&#34;&gt;settimeout&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksettimeouts&#34;&gt;settimeouts&lt;/a&gt; methods.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; argument can be an integer, with an optional time unit, like &lt;code&gt;s&lt;/code&gt; (second), &lt;code&gt;ms&lt;/code&gt; (millisecond), &lt;code&gt;m&lt;/code&gt; (minute). The default time unit is &lt;code&gt;s&lt;/code&gt;, i.e., &#34;second&#34;. The default setting is &lt;code&gt;60s&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.5.0rc1&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;lua_socket_buffer_size&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;lua_socket_buffer_size &amp;lt;size&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;default:&lt;/strong&gt; &lt;em&gt;lua_socket_buffer_size 4k/8k&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server, location&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Specifies the buffer size used by cosocket reading operations.&lt;/p&gt; &#xA;&lt;p&gt;This buffer does not have to be that big to hold everything at the same time because cosocket supports 100% non-buffered reading and parsing. So even &lt;code&gt;1&lt;/code&gt; byte buffer size should still work everywhere but the performance could be terrible.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.5.0rc1&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;lua_socket_pool_size&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;lua_socket_pool_size &amp;lt;size&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;default:&lt;/strong&gt; &lt;em&gt;lua_socket_pool_size 30&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server, location&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Specifies the size limit (in terms of connection count) for every cosocket connection pool associated with every remote server (i.e., identified by either the host-port pair or the unix domain socket file path).&lt;/p&gt; &#xA;&lt;p&gt;Default to 30 connections for every pool.&lt;/p&gt; &#xA;&lt;p&gt;When the connection pool exceeds the available size limit, the least recently used (idle) connection already in the pool will be closed to make room for the current connection.&lt;/p&gt; &#xA;&lt;p&gt;Note that the cosocket connection pool is per Nginx worker process rather than per Nginx server instance, so size limit specified here also applies to every single Nginx worker process.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.5.0rc1&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;lua_socket_keepalive_timeout&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;lua_socket_keepalive_timeout &amp;lt;time&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;default:&lt;/strong&gt; &lt;em&gt;lua_socket_keepalive_timeout 60s&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server, location&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This directive controls the default maximal idle time of the connections in the cosocket built-in connection pool. When this timeout reaches, idle connections will be closed and removed from the pool. This setting can be overridden by cosocket objects&#39; &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksetkeepalive&#34;&gt;setkeepalive&lt;/a&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; argument can be an integer, with an optional time unit, like &lt;code&gt;s&lt;/code&gt; (second), &lt;code&gt;ms&lt;/code&gt; (millisecond), &lt;code&gt;m&lt;/code&gt; (minute). The default time unit is &lt;code&gt;s&lt;/code&gt;, i.e., &#34;second&#34;. The default setting is &lt;code&gt;60s&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.5.0rc1&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;lua_socket_log_errors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;lua_socket_log_errors on|off&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;default:&lt;/strong&gt; &lt;em&gt;lua_socket_log_errors on&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server, location&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This directive can be used to toggle error logging when a failure occurs for the TCP or UDP cosockets. If you are already doing proper error handling and logging in your Lua code, then it is recommended to turn this directive off to prevent data flushing in your Nginx error log files (which is usually rather expensive).&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.5.13&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;lua_ssl_ciphers&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;lua_ssl_ciphers &amp;lt;ciphers&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;default:&lt;/strong&gt; &lt;em&gt;lua_ssl_ciphers DEFAULT&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server, location&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Specifies the enabled ciphers for requests to a SSL/TLS server in the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksslhandshake&#34;&gt;tcpsock:sslhandshake&lt;/a&gt; method. The ciphers are specified in the format understood by the OpenSSL library.&lt;/p&gt; &#xA;&lt;p&gt;The full list can be viewed using the “openssl ciphers” command.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.9.11&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;lua_ssl_crl&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;lua_ssl_crl &amp;lt;file&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;default:&lt;/strong&gt; &lt;em&gt;no&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server, location&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Specifies a file with revoked certificates (CRL) in the PEM format used to verify the certificate of the SSL/TLS server in the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksslhandshake&#34;&gt;tcpsock:sslhandshake&lt;/a&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.9.11&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;lua_ssl_protocols&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;lua_ssl_protocols [SSLv2] [SSLv3] [TLSv1] [TLSv1.1] [TLSv1.2] [TLSv1.3]&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;default:&lt;/strong&gt; &lt;em&gt;lua_ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server, location&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Enables the specified protocols for requests to a SSL/TLS server in the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksslhandshake&#34;&gt;tcpsock:sslhandshake&lt;/a&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;The support for the &lt;code&gt;TLSv1.3&lt;/code&gt; parameter requires version &lt;code&gt;v0.10.12&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; OpenSSL 1.1.1.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.9.11&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;lua_ssl_trusted_certificate&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;lua_ssl_trusted_certificate &amp;lt;file&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;default:&lt;/strong&gt; &lt;em&gt;no&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server, location&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Specifies a file path with trusted CA certificates in the PEM format used to verify the certificate of the SSL/TLS server in the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksslhandshake&#34;&gt;tcpsock:sslhandshake&lt;/a&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.9.11&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_ssl_verify_depth&#34;&gt;lua_ssl_verify_depth&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;lua_ssl_verify_depth&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;lua_ssl_verify_depth &amp;lt;number&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;default:&lt;/strong&gt; &lt;em&gt;lua_ssl_verify_depth 1&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server, location&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sets the verification depth in the server certificates chain.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.9.11&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_ssl_trusted_certificate&#34;&gt;lua_ssl_trusted_certificate&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;lua_ssl_conf_command&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;lua_ssl_conf_command &amp;lt;command&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;default:&lt;/strong&gt; &lt;em&gt;no&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server, location&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sets arbitrary OpenSSL configuration &lt;a href=&#34;https://www.openssl.org/docs/man1.1.1/man3/SSL_CONF_cmd.html&#34;&gt;commands&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The directive is supported when using OpenSSL 1.0.2 or higher and nginx 1.19.4 or higher. According to the specify command, higher OpenSSL version may be needed.&lt;/p&gt; &#xA;&lt;p&gt;Several &lt;code&gt;lua_ssl_conf_command&lt;/code&gt; directives can be specified on the same level:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; lua_ssl_conf_command Options PrioritizeChaCha;&#xA; lua_ssl_conf_command Ciphersuites TLS_CHACHA20_POLY1305_SHA256;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configuration commands are applied after OpenResty own configuration for SSL, so they can be used to override anything set by OpenResty.&lt;/p&gt; &#xA;&lt;p&gt;Note though that configuring OpenSSL directly with &lt;code&gt;lua_ssl_conf_command&lt;/code&gt; might result in a behaviour OpenResty does not expect, and should be done with care.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.10.21&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;lua_http10_buffering&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;lua_http10_buffering on|off&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;default:&lt;/strong&gt; &lt;em&gt;lua_http10_buffering on&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server, location, location-if&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Enables or disables automatic response buffering for HTTP 1.0 (or older) requests. This buffering mechanism is mainly used for HTTP 1.0 keep-alive which relies on a proper &lt;code&gt;Content-Length&lt;/code&gt; response header.&lt;/p&gt; &#xA;&lt;p&gt;If the Lua code explicitly sets a &lt;code&gt;Content-Length&lt;/code&gt; response header before sending the headers (either explicitly via &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsend_headers&#34;&gt;ngx.send_headers&lt;/a&gt; or implicitly via the first &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsay&#34;&gt;ngx.say&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxprint&#34;&gt;ngx.print&lt;/a&gt; call), then the HTTP 1.0 response buffering will be disabled even when this directive is turned on.&lt;/p&gt; &#xA;&lt;p&gt;To output very large response data in a streaming fashion (via the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxflush&#34;&gt;ngx.flush&lt;/a&gt; call, for example), this directive MUST be turned off to minimize memory usage.&lt;/p&gt; &#xA;&lt;p&gt;This directive is turned &lt;code&gt;on&lt;/code&gt; by default.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.5.0rc19&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;rewrite_by_lua_no_postpone&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua_no_postpone on|off&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;default:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua_no_postpone off&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Controls whether or not to disable postponing &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#rewrite_by_lua&#34;&gt;rewrite_by_lua*&lt;/a&gt; directives to run at the end of the &lt;code&gt;rewrite&lt;/code&gt; request-processing phase. By default, this directive is turned off and the Lua code is postponed to run at the end of the &lt;code&gt;rewrite&lt;/code&gt; phase.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.5.0rc29&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;access_by_lua_no_postpone&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;access_by_lua_no_postpone on|off&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;default:&lt;/strong&gt; &lt;em&gt;access_by_lua_no_postpone off&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Controls whether or not to disable postponing &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#access_by_lua&#34;&gt;access_by_lua*&lt;/a&gt; directives to run at the end of the &lt;code&gt;access&lt;/code&gt; request-processing phase. By default, this directive is turned off and the Lua code is postponed to run at the end of the &lt;code&gt;access&lt;/code&gt; phase.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.9.20&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;lua_transform_underscores_in_response_headers&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;lua_transform_underscores_in_response_headers on|off&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;default:&lt;/strong&gt; &lt;em&gt;lua_transform_underscores_in_response_headers on&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server, location, location-if&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Controls whether to transform underscores (&lt;code&gt;_&lt;/code&gt;) in the response header names specified in the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxheaderheader&#34;&gt;ngx.header.HEADER&lt;/a&gt; API to hyphens (&lt;code&gt;-&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.5.0rc32&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;lua_check_client_abort&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;lua_check_client_abort on|off&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;default:&lt;/strong&gt; &lt;em&gt;lua_check_client_abort off&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server, location, location-if&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This directive controls whether to check for premature client connection abortion.&lt;/p&gt; &#xA;&lt;p&gt;When this directive is on, the ngx_lua module will monitor the premature connection close event on the downstream connections and when there is such an event, it will call the user Lua function callback (registered by &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxon_abort&#34;&gt;ngx.on_abort&lt;/a&gt;) or just stop and clean up all the Lua &#34;light threads&#34; running in the current request&#39;s request handler when there is no user callback function registered.&lt;/p&gt; &#xA;&lt;p&gt;According to the current implementation, however, if the client closes the connection before the Lua code finishes reading the request body data via &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqsocket&#34;&gt;ngx.req.socket&lt;/a&gt;, then ngx_lua will neither stop all the running &#34;light threads&#34; nor call the user callback (if &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxon_abort&#34;&gt;ngx.on_abort&lt;/a&gt; has been called). Instead, the reading operation on &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqsocket&#34;&gt;ngx.req.socket&lt;/a&gt; will just return the error message &#34;client aborted&#34; as the second return value (the first return value is surely &lt;code&gt;nil&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;When TCP keepalive is disabled, it is relying on the client side to close the socket gracefully (by sending a &lt;code&gt;FIN&lt;/code&gt; packet or something like that). For (soft) real-time web applications, it is highly recommended to configure the &lt;a href=&#34;http://tldp.org/HOWTO/TCP-Keepalive-HOWTO/overview.html&#34;&gt;TCP keepalive&lt;/a&gt; support in your system&#39;s TCP stack implementation in order to detect &#34;half-open&#34; TCP connections in time.&lt;/p&gt; &#xA;&lt;p&gt;For example, on Linux, you can configure the standard &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_core_module.html#listen&#34;&gt;listen&lt;/a&gt; directive in your &lt;code&gt;nginx.conf&lt;/code&gt; file like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; listen 80 so_keepalive=2s:2s:8;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On FreeBSD, you can only tune the system-wide configuration for TCP keepalive, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# sysctl net.inet.tcp.keepintvl=2000&#xA;# sysctl net.inet.tcp.keepidle=2000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.7.4&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxon_abort&#34;&gt;ngx.on_abort&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;lua_max_pending_timers&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;lua_max_pending_timers &amp;lt;count&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;default:&lt;/strong&gt; &lt;em&gt;lua_max_pending_timers 1024&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Controls the maximum number of pending timers allowed.&lt;/p&gt; &#xA;&lt;p&gt;Pending timers are those timers that have not expired yet.&lt;/p&gt; &#xA;&lt;p&gt;When exceeding this limit, the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxtimerat&#34;&gt;ngx.timer.at&lt;/a&gt; call will immediately return &lt;code&gt;nil&lt;/code&gt; and the error string &#34;too many pending timers&#34;.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.8.0&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;lua_max_running_timers&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;lua_max_running_timers &amp;lt;count&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;default:&lt;/strong&gt; &lt;em&gt;lua_max_running_timers 256&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Controls the maximum number of &#34;running timers&#34; allowed.&lt;/p&gt; &#xA;&lt;p&gt;Running timers are those timers whose user callback functions are still running.&lt;/p&gt; &#xA;&lt;p&gt;When exceeding this limit, Nginx will stop running the callbacks of newly expired timers and log an error message &#34;N lua_max_running_timers are not enough&#34; where &#34;N&#34; is the current value of this directive.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.8.0&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;lua_sa_restart&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;lua_sa_restart on|off&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;default:&lt;/strong&gt; &lt;em&gt;lua_sa_restart on&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;When enabled, this module will set the &lt;code&gt;SA_RESTART&lt;/code&gt; flag on Nginx workers signal dispositions.&lt;/p&gt; &#xA;&lt;p&gt;This allows Lua I/O primitives to not be interrupted by Nginx&#39;s handling of various signals.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.10.14&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;lua_worker_thread_vm_pool_size&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;lua_worker_thread_vm_pool_size &amp;lt;size&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;default:&lt;/strong&gt; &lt;em&gt;lua_worker_thread_vm_pool_size 100&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Specifies the size limit of the Lua VM pool (default 100) that will be used in the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxrun_worker_thread&#34;&gt;ngx.run_worker_thread&lt;/a&gt; API.&lt;/p&gt; &#xA;&lt;p&gt;Also, it is not allowed to create Lua VMs that exceeds the pool size limit.&lt;/p&gt; &#xA;&lt;p&gt;The Lua VM in the VM pool is used to execute Lua code in separate thread.&lt;/p&gt; &#xA;&lt;p&gt;The pool is global at Nginx worker level. And it is used to reuse Lua VMs between requests.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#directives&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Nginx API for Lua&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxarg&#34;&gt;ngx.arg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxvarvariable&#34;&gt;ngx.var.VARIABLE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#core-constants&#34;&gt;Core constants&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#http-method-constants&#34;&gt;HTTP method constants&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#http-status-constants&#34;&gt;HTTP status constants&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-log-level-constants&#34;&gt;Nginx log level constants&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#print&#34;&gt;print&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxctx&#34;&gt;ngx.ctx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxlocationcapture&#34;&gt;ngx.location.capture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxlocationcapture_multi&#34;&gt;ngx.location.capture_multi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxstatus&#34;&gt;ngx.status&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxheaderheader&#34;&gt;ngx.header.HEADER&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxrespget_headers&#34;&gt;ngx.resp.get_headers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqis_internal&#34;&gt;ngx.req.is_internal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqstart_time&#34;&gt;ngx.req.start_time&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqhttp_version&#34;&gt;ngx.req.http_version&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqraw_header&#34;&gt;ngx.req.raw_header&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqget_method&#34;&gt;ngx.req.get_method&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqset_method&#34;&gt;ngx.req.set_method&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqset_uri&#34;&gt;ngx.req.set_uri&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqset_uri_args&#34;&gt;ngx.req.set_uri_args&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqget_uri_args&#34;&gt;ngx.req.get_uri_args&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqget_post_args&#34;&gt;ngx.req.get_post_args&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqget_headers&#34;&gt;ngx.req.get_headers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqset_header&#34;&gt;ngx.req.set_header&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqclear_header&#34;&gt;ngx.req.clear_header&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqread_body&#34;&gt;ngx.req.read_body&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqdiscard_body&#34;&gt;ngx.req.discard_body&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqget_body_data&#34;&gt;ngx.req.get_body_data&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqget_body_file&#34;&gt;ngx.req.get_body_file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqset_body_data&#34;&gt;ngx.req.set_body_data&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqset_body_file&#34;&gt;ngx.req.set_body_file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqinit_body&#34;&gt;ngx.req.init_body&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqappend_body&#34;&gt;ngx.req.append_body&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqfinish_body&#34;&gt;ngx.req.finish_body&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqsocket&#34;&gt;ngx.req.socket&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxexec&#34;&gt;ngx.exec&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxredirect&#34;&gt;ngx.redirect&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsend_headers&#34;&gt;ngx.send_headers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxheaders_sent&#34;&gt;ngx.headers_sent&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxprint&#34;&gt;ngx.print&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsay&#34;&gt;ngx.say&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxlog&#34;&gt;ngx.log&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxflush&#34;&gt;ngx.flush&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxexit&#34;&gt;ngx.exit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxeof&#34;&gt;ngx.eof&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsleep&#34;&gt;ngx.sleep&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxescape_uri&#34;&gt;ngx.escape_uri&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxunescape_uri&#34;&gt;ngx.unescape_uri&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxencode_args&#34;&gt;ngx.encode_args&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxdecode_args&#34;&gt;ngx.decode_args&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxencode_base64&#34;&gt;ngx.encode_base64&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxdecode_base64&#34;&gt;ngx.decode_base64&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxcrc32_short&#34;&gt;ngx.crc32_short&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxcrc32_long&#34;&gt;ngx.crc32_long&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxhmac_sha1&#34;&gt;ngx.hmac_sha1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxmd5&#34;&gt;ngx.md5&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxmd5_bin&#34;&gt;ngx.md5_bin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsha1_bin&#34;&gt;ngx.sha1_bin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxquote_sql_str&#34;&gt;ngx.quote_sql_str&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxtoday&#34;&gt;ngx.today&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxtime&#34;&gt;ngx.time&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxnow&#34;&gt;ngx.now&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxupdate_time&#34;&gt;ngx.update_time&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxlocaltime&#34;&gt;ngx.localtime&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxutctime&#34;&gt;ngx.utctime&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxcookie_time&#34;&gt;ngx.cookie_time&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxhttp_time&#34;&gt;ngx.http_time&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxparse_http_time&#34;&gt;ngx.parse_http_time&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxis_subrequest&#34;&gt;ngx.is_subrequest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxrematch&#34;&gt;ngx.re.match&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxrefind&#34;&gt;ngx.re.find&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxregmatch&#34;&gt;ngx.re.gmatch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxresub&#34;&gt;ngx.re.sub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxregsub&#34;&gt;ngx.re.gsub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictget&#34;&gt;ngx.shared.DICT.get&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictget_stale&#34;&gt;ngx.shared.DICT.get_stale&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictset&#34;&gt;ngx.shared.DICT.set&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictsafe_set&#34;&gt;ngx.shared.DICT.safe_set&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictadd&#34;&gt;ngx.shared.DICT.add&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictsafe_add&#34;&gt;ngx.shared.DICT.safe_add&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictreplace&#34;&gt;ngx.shared.DICT.replace&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictdelete&#34;&gt;ngx.shared.DICT.delete&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictincr&#34;&gt;ngx.shared.DICT.incr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictlpush&#34;&gt;ngx.shared.DICT.lpush&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictrpush&#34;&gt;ngx.shared.DICT.rpush&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictlpop&#34;&gt;ngx.shared.DICT.lpop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictrpop&#34;&gt;ngx.shared.DICT.rpop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictllen&#34;&gt;ngx.shared.DICT.llen&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictttl&#34;&gt;ngx.shared.DICT.ttl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictexpire&#34;&gt;ngx.shared.DICT.expire&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictflush_all&#34;&gt;ngx.shared.DICT.flush_all&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictflush_expired&#34;&gt;ngx.shared.DICT.flush_expired&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictget_keys&#34;&gt;ngx.shared.DICT.get_keys&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictcapacity&#34;&gt;ngx.shared.DICT.capacity&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictfree_space&#34;&gt;ngx.shared.DICT.free_space&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsocketudp&#34;&gt;ngx.socket.udp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#udpsocksetpeername&#34;&gt;udpsock:setpeername&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#udpsocksend&#34;&gt;udpsock:send&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#udpsockreceive&#34;&gt;udpsock:receive&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#udpsockclose&#34;&gt;udpsock:close&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#udpsocksettimeout&#34;&gt;udpsock:settimeout&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsocketstream&#34;&gt;ngx.socket.stream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsockettcp&#34;&gt;ngx.socket.tcp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsockconnect&#34;&gt;tcpsock:connect&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksetclientcert&#34;&gt;tcpsock:setclientcert&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksslhandshake&#34;&gt;tcpsock:sslhandshake&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksend&#34;&gt;tcpsock:send&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsockreceive&#34;&gt;tcpsock:receive&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsockreceiveany&#34;&gt;tcpsock:receiveany&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsockreceiveuntil&#34;&gt;tcpsock:receiveuntil&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsockclose&#34;&gt;tcpsock:close&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksettimeout&#34;&gt;tcpsock:settimeout&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksettimeouts&#34;&gt;tcpsock:settimeouts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksetoption&#34;&gt;tcpsock:setoption&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksetkeepalive&#34;&gt;tcpsock:setkeepalive&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsockgetreusedtimes&#34;&gt;tcpsock:getreusedtimes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsocketconnect&#34;&gt;ngx.socket.connect&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxget_phase&#34;&gt;ngx.get_phase&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxthreadspawn&#34;&gt;ngx.thread.spawn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxthreadwait&#34;&gt;ngx.thread.wait&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxthreadkill&#34;&gt;ngx.thread.kill&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxon_abort&#34;&gt;ngx.on_abort&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxtimerat&#34;&gt;ngx.timer.at&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxtimerevery&#34;&gt;ngx.timer.every&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxtimerrunning_count&#34;&gt;ngx.timer.running_count&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxtimerpending_count&#34;&gt;ngx.timer.pending_count&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxconfigsubsystem&#34;&gt;ngx.config.subsystem&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxconfigdebug&#34;&gt;ngx.config.debug&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxconfigprefix&#34;&gt;ngx.config.prefix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxconfignginx_version&#34;&gt;ngx.config.nginx_version&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxconfignginx_configure&#34;&gt;ngx.config.nginx_configure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxconfigngx_lua_version&#34;&gt;ngx.config.ngx_lua_version&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxworkerexiting&#34;&gt;ngx.worker.exiting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxworkerpid&#34;&gt;ngx.worker.pid&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxworkercount&#34;&gt;ngx.worker.count&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxworkerid&#34;&gt;ngx.worker.id&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsemaphore&#34;&gt;ngx.semaphore&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxbalancer&#34;&gt;ngx.balancer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxssl&#34;&gt;ngx.ssl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxocsp&#34;&gt;ngx.ocsp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ndkset_vardirective&#34;&gt;ndk.set_var.DIRECTIVE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#coroutinecreate&#34;&gt;coroutine.create&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#coroutineresume&#34;&gt;coroutine.resume&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#coroutineyield&#34;&gt;coroutine.yield&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#coroutinewrap&#34;&gt;coroutine.wrap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#coroutinerunning&#34;&gt;coroutine.running&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#coroutinestatus&#34;&gt;coroutine.status&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxrun_worker_thread&#34;&gt;ngx.run_worker_thread&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;The various &lt;code&gt;*_by_lua&lt;/code&gt;, &lt;code&gt;*_by_lua_block&lt;/code&gt; and &lt;code&gt;*_by_lua_file&lt;/code&gt; configuration directives serve as gateways to the Lua API within the &lt;code&gt;nginx.conf&lt;/code&gt; file. The Nginx Lua API described below can only be called within the user Lua code run in the context of these configuration directives.&lt;/p&gt; &#xA;&lt;p&gt;The API is exposed to Lua in the form of two standard packages &lt;code&gt;ngx&lt;/code&gt; and &lt;code&gt;ndk&lt;/code&gt;. These packages are in the default global scope within ngx_lua and are always available within ngx_lua directives.&lt;/p&gt; &#xA;&lt;p&gt;The packages can be introduced into external Lua modules like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local say = ngx.say&#xA;&#xA; local _M = {}&#xA;&#xA; function _M.foo(a)&#xA;     say(a)&#xA; end&#xA;&#xA; return _M&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use of the &lt;a href=&#34;https://www.lua.org/manual/5.1/manual.html#pdf-package.seeall&#34;&gt;package.seeall&lt;/a&gt; flag is strongly discouraged due to its various bad side-effects.&lt;/p&gt; &#xA;&lt;p&gt;It is also possible to directly require the packages in external Lua modules:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local ngx = require &#34;ngx&#34;&#xA; local ndk = require &#34;ndk&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The ability to require these packages was introduced in the &lt;code&gt;v0.2.1rc19&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;Network I/O operations in user code should only be done through the Nginx Lua API calls as the Nginx event loop may be blocked and performance drop off dramatically otherwise. Disk operations with relatively small amount of data can be done using the standard Lua &lt;code&gt;io&lt;/code&gt; library but huge file reading and writing should be avoided wherever possible as they may block the Nginx process significantly. Delegating all network and disk I/O operations to Nginx&#39;s subrequests (via the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxlocationcapture&#34;&gt;ngx.location.capture&lt;/a&gt; method and similar) is strongly recommended for maximum performance.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.arg&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;val = ngx.arg[index]&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, body_filter_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;When this is used in the context of the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#set_by_lua&#34;&gt;set_by_lua*&lt;/a&gt; directives, this table is read-only and holds the input arguments to the config directives:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; value = ngx.arg[n]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is an example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; location /foo {&#xA;     set $a 32;&#xA;     set $b 56;&#xA;&#xA;     set_by_lua $sum&#xA;         &#39;return tonumber(ngx.arg[1]) + tonumber(ngx.arg[2])&#39;&#xA;         $a $b;&#xA;&#xA;     echo $sum;&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;that writes out &lt;code&gt;88&lt;/code&gt;, the sum of &lt;code&gt;32&lt;/code&gt; and &lt;code&gt;56&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When this table is used in the context of &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#body_filter_by_lua&#34;&gt;body_filter_by_lua*&lt;/a&gt;, the first element holds the input data chunk to the output filter code and the second element holds the boolean flag for the &#34;eof&#34; flag indicating the end of the whole output data stream.&lt;/p&gt; &#xA;&lt;p&gt;The data chunk and &#34;eof&#34; flag passed to the downstream Nginx output filters can also be overridden by assigning values directly to the corresponding table elements. When setting &lt;code&gt;nil&lt;/code&gt; or an empty Lua string value to &lt;code&gt;ngx.arg[1]&lt;/code&gt;, no data chunk will be passed to the downstream Nginx output filters at all.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.var.VARIABLE&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ngx.var.VAR_NAME&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, balancer_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Read and write Nginx variable values.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; value = ngx.var.some_nginx_variable_name&#xA; ngx.var.some_nginx_variable_name = value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that only already defined Nginx variables can be written to. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; location /foo {&#xA;     set $my_var &#39;&#39;; # this line is required to create $my_var at config time&#xA;     content_by_lua_block {&#xA;         ngx.var.my_var = 123&#xA;         ...&#xA;     }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That is, Nginx variables cannot be created on-the-fly.&lt;/p&gt; &#xA;&lt;p&gt;Some special Nginx variables like &lt;code&gt;$args&lt;/code&gt; and &lt;code&gt;$limit_rate&lt;/code&gt; can be assigned a value, many others are not, like &lt;code&gt;$query_string&lt;/code&gt;, &lt;code&gt;$arg_PARAMETER&lt;/code&gt;, and &lt;code&gt;$http_NAME&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Nginx regex group capturing variables &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt;, &lt;code&gt;$3&lt;/code&gt;, and etc, can be read by this interface as well, by writing &lt;code&gt;ngx.var[1]&lt;/code&gt;, &lt;code&gt;ngx.var[2]&lt;/code&gt;, &lt;code&gt;ngx.var[3]&lt;/code&gt;, and etc.&lt;/p&gt; &#xA;&lt;p&gt;Setting &lt;code&gt;ngx.var.Foo&lt;/code&gt; to a &lt;code&gt;nil&lt;/code&gt; value will unset the &lt;code&gt;$Foo&lt;/code&gt; Nginx variable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; ngx.var.args = nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;CAUTION&lt;/strong&gt; When reading from an Nginx variable, Nginx will allocate memory in the per-request memory pool which is freed only at request termination. So when you need to read from an Nginx variable repeatedly in your Lua code, cache the Nginx variable value to your own Lua variable, for example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local val = ngx.var.some_var&#xA; --- use the val repeatedly later&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to prevent (temporary) memory leaking within the current request&#39;s lifetime. Another way of caching the result is to use the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxctx&#34;&gt;ngx.ctx&lt;/a&gt; table.&lt;/p&gt; &#xA;&lt;p&gt;Undefined Nginx variables are evaluated to &lt;code&gt;nil&lt;/code&gt; while uninitialized (but defined) Nginx variables are evaluated to an empty Lua string.&lt;/p&gt; &#xA;&lt;p&gt;This API requires a relatively expensive metamethod call and it is recommended to avoid using it on hot code paths.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Core constants&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, *log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA;   ngx.OK (0)&#xA;   ngx.ERROR (-1)&#xA;   ngx.AGAIN (-2)&#xA;   ngx.DONE (-4)&#xA;   ngx.DECLINED (-5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that only three of these constants are utilized by the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Nginx API for Lua&lt;/a&gt; (i.e., &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxexit&#34;&gt;ngx.exit&lt;/a&gt; accepts &lt;code&gt;ngx.OK&lt;/code&gt;, &lt;code&gt;ngx.ERROR&lt;/code&gt;, and &lt;code&gt;ngx.DECLINED&lt;/code&gt; as input).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA;   ngx.null&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;ngx.null&lt;/code&gt; constant is a &lt;code&gt;NULL&lt;/code&gt; light userdata usually used to represent nil values in Lua tables etc and is similar to the &lt;a href=&#34;http://www.kyne.com.au/~mark/software/lua-cjson.php&#34;&gt;lua-cjson&lt;/a&gt; library&#39;s &lt;code&gt;cjson.null&lt;/code&gt; constant. This constant was first introduced in the &lt;code&gt;v0.5.0rc5&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;ngx.DECLINED&lt;/code&gt; constant was first introduced in the &lt;code&gt;v0.5.0rc19&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;HTTP method constants&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  ngx.HTTP_GET&#xA;  ngx.HTTP_HEAD&#xA;  ngx.HTTP_PUT&#xA;  ngx.HTTP_POST&#xA;  ngx.HTTP_DELETE&#xA;  ngx.HTTP_OPTIONS   (added in the v0.5.0rc24 release)&#xA;  ngx.HTTP_MKCOL     (added in the v0.8.2 release)&#xA;  ngx.HTTP_COPY      (added in the v0.8.2 release)&#xA;  ngx.HTTP_MOVE      (added in the v0.8.2 release)&#xA;  ngx.HTTP_PROPFIND  (added in the v0.8.2 release)&#xA;  ngx.HTTP_PROPPATCH (added in the v0.8.2 release)&#xA;  ngx.HTTP_LOCK      (added in the v0.8.2 release)&#xA;  ngx.HTTP_UNLOCK    (added in the v0.8.2 release)&#xA;  ngx.HTTP_PATCH     (added in the v0.8.2 release)&#xA;  ngx.HTTP_TRACE     (added in the v0.8.2 release)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These constants are usually used in &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxlocationcapture&#34;&gt;ngx.location.capture&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxlocationcapture_multi&#34;&gt;ngx.location.capture_multi&lt;/a&gt; method calls.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;HTTP status constants&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA;   value = ngx.HTTP_CONTINUE (100) (first added in the v0.9.20 release)&#xA;   value = ngx.HTTP_SWITCHING_PROTOCOLS (101) (first added in the v0.9.20 release)&#xA;   value = ngx.HTTP_OK (200)&#xA;   value = ngx.HTTP_CREATED (201)&#xA;   value = ngx.HTTP_ACCEPTED (202) (first added in the v0.9.20 release)&#xA;   value = ngx.HTTP_NO_CONTENT (204) (first added in the v0.9.20 release)&#xA;   value = ngx.HTTP_PARTIAL_CONTENT (206) (first added in the v0.9.20 release)&#xA;   value = ngx.HTTP_SPECIAL_RESPONSE (300)&#xA;   value = ngx.HTTP_MOVED_PERMANENTLY (301)&#xA;   value = ngx.HTTP_MOVED_TEMPORARILY (302)&#xA;   value = ngx.HTTP_SEE_OTHER (303)&#xA;   value = ngx.HTTP_NOT_MODIFIED (304)&#xA;   value = ngx.HTTP_TEMPORARY_REDIRECT (307) (first added in the v0.9.20 release)&#xA;   value = ngx.HTTP_PERMANENT_REDIRECT (308)&#xA;   value = ngx.HTTP_BAD_REQUEST (400)&#xA;   value = ngx.HTTP_UNAUTHORIZED (401)&#xA;   value = ngx.HTTP_PAYMENT_REQUIRED (402) (first added in the v0.9.20 release)&#xA;   value = ngx.HTTP_FORBIDDEN (403)&#xA;   value = ngx.HTTP_NOT_FOUND (404)&#xA;   value = ngx.HTTP_NOT_ALLOWED (405)&#xA;   value = ngx.HTTP_NOT_ACCEPTABLE (406) (first added in the v0.9.20 release)&#xA;   value = ngx.HTTP_REQUEST_TIMEOUT (408) (first added in the v0.9.20 release)&#xA;   value = ngx.HTTP_CONFLICT (409) (first added in the v0.9.20 release)&#xA;   value = ngx.HTTP_GONE (410)&#xA;   value = ngx.HTTP_UPGRADE_REQUIRED (426) (first added in the v0.9.20 release)&#xA;   value = ngx.HTTP_TOO_MANY_REQUESTS (429) (first added in the v0.9.20 release)&#xA;   value = ngx.HTTP_CLOSE (444) (first added in the v0.9.20 release)&#xA;   value = ngx.HTTP_ILLEGAL (451) (first added in the v0.9.20 release)&#xA;   value = ngx.HTTP_INTERNAL_SERVER_ERROR (500)&#xA;   value = ngx.HTTP_NOT_IMPLEMENTED (501)&#xA;   value = ngx.HTTP_METHOD_NOT_IMPLEMENTED (501) (kept for compatibility)&#xA;   value = ngx.HTTP_BAD_GATEWAY (502) (first added in the v0.9.20 release)&#xA;   value = ngx.HTTP_SERVICE_UNAVAILABLE (503)&#xA;   value = ngx.HTTP_GATEWAY_TIMEOUT (504) (first added in the v0.3.1rc38 release)&#xA;   value = ngx.HTTP_VERSION_NOT_SUPPORTED (505) (first added in the v0.9.20 release)&#xA;   value = ngx.HTTP_INSUFFICIENT_STORAGE (507) (first added in the v0.9.20 release)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Nginx log level constants&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_by_lua*, init_worker_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, exit_worker_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA;   ngx.STDERR&#xA;   ngx.EMERG&#xA;   ngx.ALERT&#xA;   ngx.CRIT&#xA;   ngx.ERR&#xA;   ngx.WARN&#xA;   ngx.NOTICE&#xA;   ngx.INFO&#xA;   ngx.DEBUG&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These constants are usually used by the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxlog&#34;&gt;ngx.log&lt;/a&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;print&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;print(...)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_by_lua*, init_worker_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, exit_worker_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Writes argument values into the Nginx &lt;code&gt;error.log&lt;/code&gt; file with the &lt;code&gt;ngx.NOTICE&lt;/code&gt; log level.&lt;/p&gt; &#xA;&lt;p&gt;It is equivalent to&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; ngx.log(ngx.NOTICE, ...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Lua &lt;code&gt;nil&lt;/code&gt; arguments are accepted and result in literal &lt;code&gt;&#34;nil&#34;&lt;/code&gt; strings while Lua booleans result in literal &lt;code&gt;&#34;true&#34;&lt;/code&gt; or &lt;code&gt;&#34;false&#34;&lt;/code&gt; strings. And the &lt;code&gt;ngx.null&lt;/code&gt; constant will yield the &lt;code&gt;&#34;null&#34;&lt;/code&gt; string output.&lt;/p&gt; &#xA;&lt;p&gt;There is a hard coded &lt;code&gt;2048&lt;/code&gt; byte limitation on error message lengths in the Nginx core. This limit includes trailing newlines and leading time stamps. If the message size exceeds this limit, Nginx will truncate the message text accordingly. This limit can be manually modified by editing the &lt;code&gt;NGX_MAX_ERROR_STR&lt;/code&gt; macro definition in the &lt;code&gt;src/core/ngx_log.h&lt;/code&gt; file in the Nginx source tree.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.ctx&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_worker_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, exit_worker_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This table can be used to store per-request Lua context data and has a life time identical to the current request (as with the Nginx variables).&lt;/p&gt; &#xA;&lt;p&gt;Consider the following example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; location /test {&#xA;     rewrite_by_lua_block {&#xA;         ngx.ctx.foo = 76&#xA;     }&#xA;     access_by_lua_block {&#xA;         ngx.ctx.foo = ngx.ctx.foo + 3&#xA;     }&#xA;     content_by_lua_block {&#xA;         ngx.say(ngx.ctx.foo)&#xA;     }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then &lt;code&gt;GET /test&lt;/code&gt; will yield the output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA; 79&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That is, the &lt;code&gt;ngx.ctx.foo&lt;/code&gt; entry persists across the rewrite, access, and content phases of a request.&lt;/p&gt; &#xA;&lt;p&gt;Every request, including subrequests, has its own copy of the table. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; location /sub {&#xA;     content_by_lua_block {&#xA;         ngx.say(&#34;sub pre: &#34;, ngx.ctx.blah)&#xA;         ngx.ctx.blah = 32&#xA;         ngx.say(&#34;sub post: &#34;, ngx.ctx.blah)&#xA;     }&#xA; }&#xA;&#xA; location /main {&#xA;     content_by_lua_block {&#xA;         ngx.ctx.blah = 73&#xA;         ngx.say(&#34;main pre: &#34;, ngx.ctx.blah)&#xA;         local res = ngx.location.capture(&#34;/sub&#34;)&#xA;         ngx.print(res.body)&#xA;         ngx.say(&#34;main post: &#34;, ngx.ctx.blah)&#xA;     }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then &lt;code&gt;GET /main&lt;/code&gt; will give the output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA; main pre: 73&#xA; sub pre: nil&#xA; sub post: 32&#xA; main post: 73&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here, modification of the &lt;code&gt;ngx.ctx.blah&lt;/code&gt; entry in the subrequest does not affect the one in the parent request. This is because they have two separate versions of &lt;code&gt;ngx.ctx.blah&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Internal redirects (triggered by nginx configuration directives like &lt;code&gt;error_page&lt;/code&gt;, &lt;code&gt;try_files&lt;/code&gt;, &lt;code&gt;index&lt;/code&gt; and etc) will destroy the original request &lt;code&gt;ngx.ctx&lt;/code&gt; data (if any) and the new request will have an empty &lt;code&gt;ngx.ctx&lt;/code&gt; table. For instance,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; location /new {&#xA;     content_by_lua_block {&#xA;         ngx.say(ngx.ctx.foo)&#xA;     }&#xA; }&#xA;&#xA; location /orig {&#xA;     content_by_lua_block {&#xA;         ngx.ctx.foo = &#34;hello&#34;&#xA;         ngx.exec(&#34;/new&#34;)&#xA;     }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then &lt;code&gt;GET /orig&lt;/code&gt; will give&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA; nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;rather than the original &lt;code&gt;&#34;hello&#34;&lt;/code&gt; value.&lt;/p&gt; &#xA;&lt;p&gt;Because HTTP request is created after SSL handshake, the &lt;code&gt;ngx.ctx&lt;/code&gt; created in &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ssl_certificate_by_lua&#34;&gt;ssl_certificate_by_lua*&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ssl_session_store_by_lua&#34;&gt;ssl_session_store_by_lua*&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ssl_session_fetch_by_lua&#34;&gt;ssl_session_fetch_by_lua*&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ssl_client_hello_by_lua&#34;&gt;ssl_client_hello_by_lua*&lt;/a&gt; is not available in the following phases like &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#rewrite_by_lua&#34;&gt;rewrite_by_lua*&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Since &lt;code&gt;dev&lt;/code&gt;, the &lt;code&gt;ngx.ctx&lt;/code&gt; created during a SSL handshake will be inherited by the requests which share the same TCP connection established by the handshake. Note that overwrite values in &lt;code&gt;ngx.ctx&lt;/code&gt; in the http request phases (like &lt;code&gt;rewrite_by_lua*&lt;/code&gt;) will only take affect in the current http request.&lt;/p&gt; &#xA;&lt;p&gt;Arbitrary data values, including Lua closures and nested tables, can be inserted into this &#34;magic&#34; table. It also allows the registration of custom meta methods.&lt;/p&gt; &#xA;&lt;p&gt;Overriding &lt;code&gt;ngx.ctx&lt;/code&gt; with a new Lua table is also supported, for example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; ngx.ctx = { foo = 32, bar = 54 }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When being used in the context of &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#init_worker_by_lua&#34;&gt;init_worker_by_lua*&lt;/a&gt;, this table just has the same lifetime of the current Lua handler.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;ngx.ctx&lt;/code&gt; lookup requires relatively expensive metamethod calls and it is much slower than explicitly passing per-request data along by your own function arguments. So do not abuse this API for saving your own function arguments because it usually has quite some performance impact.&lt;/p&gt; &#xA;&lt;p&gt;Because of the metamethod magic, never &#34;local&#34; the &lt;code&gt;ngx.ctx&lt;/code&gt; table outside your Lua function scope on the Lua module level due to &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#data-sharing-within-an-nginx-worker&#34;&gt;worker-level data sharing&lt;/a&gt;. For example, the following is bad:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; -- mymodule.lua&#xA; local _M = {}&#xA;&#xA; -- the following line is bad since ngx.ctx is a per-request&#xA; -- data while this &amp;lt;code&amp;gt;ctx&amp;lt;/code&amp;gt; variable is on the Lua module level&#xA; -- and thus is per-nginx-worker.&#xA; local ctx = ngx.ctx&#xA;&#xA; function _M.main()&#xA;     ctx.foo = &#34;bar&#34;&#xA; end&#xA;&#xA; return _M&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the following instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; -- mymodule.lua&#xA; local _M = {}&#xA;&#xA; function _M.main(ctx)&#xA;     ctx.foo = &#34;bar&#34;&#xA; end&#xA;&#xA; return _M&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That is, let the caller pass the &lt;code&gt;ctx&lt;/code&gt; table explicitly via a function argument.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.location.capture&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;res = ngx.location.capture(uri, options?)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Issues a synchronous but still non-blocking &lt;em&gt;Nginx Subrequest&lt;/em&gt; using &lt;code&gt;uri&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Nginx&#39;s subrequests provide a powerful way to make non-blocking internal requests to other locations configured with disk file directory or &lt;em&gt;any&lt;/em&gt; other Nginx C modules like &lt;code&gt;ngx_proxy&lt;/code&gt;, &lt;code&gt;ngx_fastcgi&lt;/code&gt;, &lt;code&gt;ngx_memc&lt;/code&gt;, &lt;code&gt;ngx_postgres&lt;/code&gt;, &lt;code&gt;ngx_drizzle&lt;/code&gt;, and even ngx_lua itself and etc etc etc.&lt;/p&gt; &#xA;&lt;p&gt;Also note that subrequests just mimic the HTTP interface but there is &lt;em&gt;no&lt;/em&gt; extra HTTP/TCP traffic &lt;em&gt;nor&lt;/em&gt; IPC involved. Everything works internally, efficiently, on the C level.&lt;/p&gt; &#xA;&lt;p&gt;Subrequests are completely different from HTTP 301/302 redirection (via &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxredirect&#34;&gt;ngx.redirect&lt;/a&gt;) and internal redirection (via &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxexec&#34;&gt;ngx.exec&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;You should always read the request body (by either calling &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqread_body&#34;&gt;ngx.req.read_body&lt;/a&gt; or configuring &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_need_request_body&#34;&gt;lua_need_request_body&lt;/a&gt; on) before initiating a subrequest.&lt;/p&gt; &#xA;&lt;p&gt;This API function (as well as &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxlocationcapture_multi&#34;&gt;ngx.location.capture_multi&lt;/a&gt;) always buffers the whole response body of the subrequest in memory. Thus, you should use &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsockettcp&#34;&gt;cosockets&lt;/a&gt; and streaming processing instead if you have to handle large subrequest responses.&lt;/p&gt; &#xA;&lt;p&gt;Here is a basic example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; res = ngx.location.capture(uri)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Returns a Lua table with 4 slots: &lt;code&gt;res.status&lt;/code&gt;, &lt;code&gt;res.header&lt;/code&gt;, &lt;code&gt;res.body&lt;/code&gt;, and &lt;code&gt;res.truncated&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;res.status&lt;/code&gt; holds the response status code for the subrequest response.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;res.header&lt;/code&gt; holds all the response headers of the subrequest and it is a normal Lua table. For multi-value response headers, the value is a Lua (array) table that holds all the values in the order that they appear. For instance, if the subrequest response headers contain the following lines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA; Set-Cookie: a=3&#xA; Set-Cookie: foo=bar&#xA; Set-Cookie: baz=blah&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then &lt;code&gt;res.header[&#34;Set-Cookie&#34;]&lt;/code&gt; will be evaluated to the table value &lt;code&gt;{&#34;a=3&#34;, &#34;foo=bar&#34;, &#34;baz=blah&#34;}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;res.body&lt;/code&gt; holds the subrequest&#39;s response body data, which might be truncated. You always need to check the &lt;code&gt;res.truncated&lt;/code&gt; boolean flag to see if &lt;code&gt;res.body&lt;/code&gt; contains truncated data. The data truncation here can only be caused by those unrecoverable errors in your subrequests like the cases that the remote end aborts the connection prematurely in the middle of the response body data stream or a read timeout happens when your subrequest is receiving the response body data from the remote.&lt;/p&gt; &#xA;&lt;p&gt;URI query strings can be concatenated to URI itself, for instance,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; res = ngx.location.capture(&#39;/foo/bar?a=3&amp;amp;b=4&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Named locations like &lt;code&gt;@foo&lt;/code&gt; are not allowed due to a limitation in the Nginx core. Use normal locations combined with the &lt;code&gt;internal&lt;/code&gt; directive to prepare internal-only locations.&lt;/p&gt; &#xA;&lt;p&gt;An optional option table can be fed as the second argument, which supports the options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;method&lt;/code&gt; specify the subrequest&#39;s request method, which only accepts constants like &lt;code&gt;ngx.HTTP_POST&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;body&lt;/code&gt; specify the subrequest&#39;s request body (string value only).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;args&lt;/code&gt; specify the subrequest&#39;s URI query arguments (both string value and Lua tables are accepted)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ctx&lt;/code&gt; specify a Lua table to be the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxctx&#34;&gt;ngx.ctx&lt;/a&gt; table for the subrequest. It can be the current request&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxctx&#34;&gt;ngx.ctx&lt;/a&gt; table, which effectively makes the parent and its subrequest to share exactly the same context table. This option was first introduced in the &lt;code&gt;v0.3.1rc25&lt;/code&gt; release.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vars&lt;/code&gt; take a Lua table which holds the values to set the specified Nginx variables in the subrequest as this option&#39;s value. This option was first introduced in the &lt;code&gt;v0.3.1rc31&lt;/code&gt; release.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;copy_all_vars&lt;/code&gt; specify whether to copy over all the Nginx variable values of the current request to the subrequest in question. modifications of the Nginx variables in the subrequest will not affect the current (parent) request. This option was first introduced in the &lt;code&gt;v0.3.1rc31&lt;/code&gt; release.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;share_all_vars&lt;/code&gt; specify whether to share all the Nginx variables of the subrequest with the current (parent) request. modifications of the Nginx variables in the subrequest will affect the current (parent) request. Enabling this option may lead to hard-to-debug issues due to bad side-effects and is considered bad and harmful. Only enable this option when you completely know what you are doing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;always_forward_body&lt;/code&gt; when set to true, the current (parent) request&#39;s request body will always be forwarded to the subrequest being created if the &lt;code&gt;body&lt;/code&gt; option is not specified. The request body read by either &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqread_body&#34;&gt;ngx.req.read_body()&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_need_request_body&#34;&gt;lua_need_request_body on&lt;/a&gt; will be directly forwarded to the subrequest without copying the whole request body data when creating the subrequest (no matter the request body data is buffered in memory buffers or temporary files). By default, this option is &lt;code&gt;false&lt;/code&gt; and when the &lt;code&gt;body&lt;/code&gt; option is not specified, the request body of the current (parent) request is only forwarded when the subrequest takes the &lt;code&gt;PUT&lt;/code&gt; or &lt;code&gt;POST&lt;/code&gt; request method.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Issuing a POST subrequest, for example, can be done as follows&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; res = ngx.location.capture(&#xA;     &#39;/foo/bar&#39;,&#xA;     { method = ngx.HTTP_POST, body = &#39;hello, world&#39; }&#xA; )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See HTTP method constants methods other than POST. The &lt;code&gt;method&lt;/code&gt; option is &lt;code&gt;ngx.HTTP_GET&lt;/code&gt; by default.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;args&lt;/code&gt; option can specify extra URI arguments, for instance,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; ngx.location.capture(&#39;/foo?a=1&#39;,&#xA;     { args = { b = 3, c = &#39;:&#39; } }&#xA; )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;is equivalent to&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; ngx.location.capture(&#39;/foo?a=1&amp;amp;b=3&amp;amp;c=%3a&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;that is, this method will escape argument keys and values according to URI rules and concatenate them together into a complete query string. The format for the Lua table passed as the &lt;code&gt;args&lt;/code&gt; argument is identical to the format used in the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxencode_args&#34;&gt;ngx.encode_args&lt;/a&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;args&lt;/code&gt; option can also take plain query strings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; ngx.location.capture(&#39;/foo?a=1&#39;,&#xA;     { args = &#39;b=3&amp;amp;c=%3a&#39; }&#xA; )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is functionally identical to the previous examples.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;share_all_vars&lt;/code&gt; option controls whether to share Nginx variables among the current request and its subrequests. If this option is set to &lt;code&gt;true&lt;/code&gt;, then the current request and associated subrequests will share the same Nginx variable scope. Hence, changes to Nginx variables made by a subrequest will affect the current request.&lt;/p&gt; &#xA;&lt;p&gt;Care should be taken in using this option as variable scope sharing can have unexpected side effects. The &lt;code&gt;args&lt;/code&gt;, &lt;code&gt;vars&lt;/code&gt;, or &lt;code&gt;copy_all_vars&lt;/code&gt; options are generally preferable instead.&lt;/p&gt; &#xA;&lt;p&gt;This option is set to &lt;code&gt;false&lt;/code&gt; by default&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; location /other {&#xA;     set $dog &#34;$dog world&#34;;&#xA;     echo &#34;$uri dog: $dog&#34;;&#xA; }&#xA;&#xA; location /lua {&#xA;     set $dog &#39;hello&#39;;&#xA;     content_by_lua_block {&#xA;         res = ngx.location.capture(&#34;/other&#34;,&#xA;             { share_all_vars = true })&#xA;&#xA;         ngx.print(res.body)&#xA;         ngx.say(ngx.var.uri, &#34;: &#34;, ngx.var.dog)&#xA;     }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Accessing location &lt;code&gt;/lua&lt;/code&gt; gives&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/other dog: hello world&#xA;/lua: hello world&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;copy_all_vars&lt;/code&gt; option provides a copy of the parent request&#39;s Nginx variables to subrequests when such subrequests are issued. Changes made to these variables by such subrequests will not affect the parent request or any other subrequests sharing the parent request&#39;s variables.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; location /other {&#xA;     set $dog &#34;$dog world&#34;;&#xA;     echo &#34;$uri dog: $dog&#34;;&#xA; }&#xA;&#xA; location /lua {&#xA;     set $dog &#39;hello&#39;;&#xA;     content_by_lua_block {&#xA;         res = ngx.location.capture(&#34;/other&#34;,&#xA;             { copy_all_vars = true })&#xA;&#xA;         ngx.print(res.body)&#xA;         ngx.say(ngx.var.uri, &#34;: &#34;, ngx.var.dog)&#xA;     }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Request &lt;code&gt;GET /lua&lt;/code&gt; will give the output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/other dog: hello world&#xA;/lua: hello&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that if both &lt;code&gt;share_all_vars&lt;/code&gt; and &lt;code&gt;copy_all_vars&lt;/code&gt; are set to true, then &lt;code&gt;share_all_vars&lt;/code&gt; takes precedence.&lt;/p&gt; &#xA;&lt;p&gt;In addition to the two settings above, it is possible to specify values for variables in the subrequest using the &lt;code&gt;vars&lt;/code&gt; option. These variables are set after the sharing or copying of variables has been evaluated, and provides a more efficient method of passing specific values to a subrequest over encoding them as URL arguments and unescaping them in the Nginx config file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; location /other {&#xA;     content_by_lua_block {&#xA;         ngx.say(&#34;dog = &#34;, ngx.var.dog)&#xA;         ngx.say(&#34;cat = &#34;, ngx.var.cat)&#xA;     }&#xA; }&#xA;&#xA; location /lua {&#xA;     set $dog &#39;&#39;;&#xA;     set $cat &#39;&#39;;&#xA;     content_by_lua_block {&#xA;         res = ngx.location.capture(&#34;/other&#34;,&#xA;             { vars = { dog = &#34;hello&#34;, cat = 32 }})&#xA;&#xA;         ngx.print(res.body)&#xA;     }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Accessing &lt;code&gt;/lua&lt;/code&gt; will yield the output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dog = hello&#xA;cat = 32&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;ctx&lt;/code&gt; option can be used to specify a custom Lua table to serve as the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxctx&#34;&gt;ngx.ctx&lt;/a&gt; table for the subrequest.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; location /sub {&#xA;     content_by_lua_block {&#xA;         ngx.ctx.foo = &#34;bar&#34;;&#xA;     }&#xA; }&#xA; location /lua {&#xA;     content_by_lua_block {&#xA;         local ctx = {}&#xA;         res = ngx.location.capture(&#34;/sub&#34;, { ctx = ctx })&#xA;&#xA;         ngx.say(ctx.foo)&#xA;         ngx.say(ngx.ctx.foo)&#xA;     }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then request &lt;code&gt;GET /lua&lt;/code&gt; gives&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bar&#xA;nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is also possible to use this &lt;code&gt;ctx&lt;/code&gt; option to share the same &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxctx&#34;&gt;ngx.ctx&lt;/a&gt; table between the current (parent) request and the subrequest:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; location /sub {&#xA;     content_by_lua_block {&#xA;         ngx.ctx.foo = &#34;bar&#34;&#xA;     }&#xA; }&#xA; location /lua {&#xA;     content_by_lua_block {&#xA;         res = ngx.location.capture(&#34;/sub&#34;, { ctx = ngx.ctx })&#xA;         ngx.say(ngx.ctx.foo)&#xA;     }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Request &lt;code&gt;GET /lua&lt;/code&gt; yields the output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that subrequests issued by &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxlocationcapture&#34;&gt;ngx.location.capture&lt;/a&gt; inherit all the request headers of the current request by default and that this may have unexpected side effects on the subrequest responses. For example, when using the standard &lt;code&gt;ngx_proxy&lt;/code&gt; module to serve subrequests, an &#34;Accept-Encoding: gzip&#34; header in the main request may result in gzipped responses that cannot be handled properly in Lua code. Original request headers should be ignored by setting &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass_request_headers&#34;&gt;proxy_pass_request_headers&lt;/a&gt; to &lt;code&gt;off&lt;/code&gt; in subrequest locations.&lt;/p&gt; &#xA;&lt;p&gt;When the &lt;code&gt;body&lt;/code&gt; option is not specified and the &lt;code&gt;always_forward_body&lt;/code&gt; option is false (the default value), the &lt;code&gt;POST&lt;/code&gt; and &lt;code&gt;PUT&lt;/code&gt; subrequests will inherit the request bodies of the parent request (if any).&lt;/p&gt; &#xA;&lt;p&gt;There is a hard-coded upper limit on the number of subrequests possible for every main request. In older versions of Nginx, the limit was &lt;code&gt;50&lt;/code&gt; concurrent subrequests and in more recent versions, Nginx &lt;code&gt;1.9.5&lt;/code&gt; onwards, the same limit is changed to limit the depth of recursive subrequests. When this limit is exceeded, the following error message is added to the &lt;code&gt;error.log&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[error] 13983#0: *1 subrequests cycle while processing &#34;/uri&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The limit can be manually modified if required by editing the definition of the &lt;code&gt;NGX_HTTP_MAX_SUBREQUESTS&lt;/code&gt; macro in the &lt;code&gt;nginx/src/http/ngx_http_request.h&lt;/code&gt; file in the Nginx source tree.&lt;/p&gt; &#xA;&lt;p&gt;Please also refer to restrictions on capturing locations configured by &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#locations-configured-by-subrequest-directives-of-other-modules&#34;&gt;subrequest directives of other modules&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.location.capture_multi&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;res1, res2, ... = ngx.location.capture_multi({ {uri, options?}, {uri, options?}, ... })&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Just like &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxlocationcapture&#34;&gt;ngx.location.capture&lt;/a&gt;, but supports multiple subrequests running in parallel.&lt;/p&gt; &#xA;&lt;p&gt;This function issues several parallel subrequests specified by the input table and returns their results in the same order. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; res1, res2, res3 = ngx.location.capture_multi{&#xA;     { &#34;/foo&#34;, { args = &#34;a=3&amp;amp;b=4&#34; } },&#xA;     { &#34;/bar&#34; },&#xA;     { &#34;/baz&#34;, { method = ngx.HTTP_POST, body = &#34;hello&#34; } },&#xA; }&#xA;&#xA; if res1.status == ngx.HTTP_OK then&#xA;     ...&#xA; end&#xA;&#xA; if res2.body == &#34;BLAH&#34; then&#xA;     ...&#xA; end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This function will not return until all the subrequests terminate. The total latency is the longest latency of the individual subrequests rather than the sum.&lt;/p&gt; &#xA;&lt;p&gt;Lua tables can be used for both requests and responses when the number of subrequests to be issued is not known in advance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; -- construct the requests table&#xA; local reqs = {}&#xA; table.insert(reqs, { &#34;/mysql&#34; })&#xA; table.insert(reqs, { &#34;/postgres&#34; })&#xA; table.insert(reqs, { &#34;/redis&#34; })&#xA; table.insert(reqs, { &#34;/memcached&#34; })&#xA;&#xA; -- issue all the requests at once and wait until they all return&#xA; local resps = {&#xA;     ngx.location.capture_multi(reqs)&#xA; }&#xA;&#xA; -- loop over the responses table&#xA; for i, resp in ipairs(resps) do&#xA;     -- process the response table &#34;resp&#34;&#xA; end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxlocationcapture&#34;&gt;ngx.location.capture&lt;/a&gt; function is just a special form of this function. Logically speaking, the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxlocationcapture&#34;&gt;ngx.location.capture&lt;/a&gt; can be implemented like this&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; ngx.location.capture =&#xA;     function (uri, args)&#xA;         return ngx.location.capture_multi({ {uri, args} })&#xA;     end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please also refer to restrictions on capturing locations configured by &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#locations-configured-by-subrequest-directives-of-other-modules&#34;&gt;subrequest directives of other modules&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.status&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Read and write the current request&#39;s response status. This should be called before sending out the response headers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; ngx.status = ngx.HTTP_CREATED&#xA; status = ngx.status&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Setting &lt;code&gt;ngx.status&lt;/code&gt; after the response header is sent out has no effect but leaving an error message in your Nginx&#39;s error log file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;attempt to set ngx.status after sending out response headers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.header.HEADER&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ngx.header.HEADER = VALUE&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;value = ngx.header.HEADER&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Set, add to, or clear the current request&#39;s &lt;code&gt;HEADER&lt;/code&gt; response header that is to be sent.&lt;/p&gt; &#xA;&lt;p&gt;Underscores (&lt;code&gt;_&lt;/code&gt;) in the header names will be replaced by hyphens (&lt;code&gt;-&lt;/code&gt;) by default. This transformation can be turned off via the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_transform_underscores_in_response_headers&#34;&gt;lua_transform_underscores_in_response_headers&lt;/a&gt; directive.&lt;/p&gt; &#xA;&lt;p&gt;The header names are matched case-insensitively.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; -- equivalent to ngx.header[&#34;Content-Type&#34;] = &#39;text/plain&#39;&#xA; ngx.header.content_type = &#39;text/plain&#39;&#xA;&#xA; ngx.header[&#34;X-My-Header&#34;] = &#39;blah blah&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Multi-value headers can be set this way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; ngx.header[&#39;Set-Cookie&#39;] = {&#39;a=32; path=/&#39;, &#39;b=4; path=/&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will yield&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA; Set-Cookie: a=32; path=/&#xA; Set-Cookie: b=4; path=/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;in the response headers.&lt;/p&gt; &#xA;&lt;p&gt;Only Lua tables are accepted (Only the last element in the table will take effect for standard headers such as &lt;code&gt;Content-Type&lt;/code&gt; that only accept a single value).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; ngx.header.content_type = {&#39;a&#39;, &#39;b&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;is equivalent to&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; ngx.header.content_type = &#39;b&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Setting a slot to &lt;code&gt;nil&lt;/code&gt; effectively removes it from the response headers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; ngx.header[&#34;X-My-Header&#34;] = nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The same applies to assigning an empty table:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; ngx.header[&#34;X-My-Header&#34;] = {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Setting &lt;code&gt;ngx.header.HEADER&lt;/code&gt; after sending out response headers (either explicitly with &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsend_headers&#34;&gt;ngx.send_headers&lt;/a&gt; or implicitly with &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxprint&#34;&gt;ngx.print&lt;/a&gt; and similar) will log an error message.&lt;/p&gt; &#xA;&lt;p&gt;Reading &lt;code&gt;ngx.header.HEADER&lt;/code&gt; will return the value of the response header named &lt;code&gt;HEADER&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Underscores (&lt;code&gt;_&lt;/code&gt;) in the header names will also be replaced by dashes (&lt;code&gt;-&lt;/code&gt;) and the header names will be matched case-insensitively. If the response header is not present at all, &lt;code&gt;nil&lt;/code&gt; will be returned.&lt;/p&gt; &#xA;&lt;p&gt;This is particularly useful in the context of &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#header_filter_by_lua&#34;&gt;header_filter_by_lua*&lt;/a&gt;, for example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; location /test {&#xA;     set $footer &#39;&#39;;&#xA;&#xA;     proxy_pass http://some-backend;&#xA;&#xA;     header_filter_by_lua_block {&#xA;         if ngx.header[&#34;X-My-Header&#34;] == &#34;blah&#34; then&#xA;             ngx.var.footer = &#34;some value&#34;&#xA;         end&#xA;     }&#xA;&#xA;     echo_after_body $footer;&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For multi-value headers, all of the values of header will be collected in order and returned as a Lua table. For example, response headers&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Foo: bar&#xA;Foo: baz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will result in&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; {&#34;bar&#34;, &#34;baz&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to be returned when reading &lt;code&gt;ngx.header.Foo&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;ngx.header&lt;/code&gt; is not a normal Lua table and as such, it is not possible to iterate through it using the Lua &lt;code&gt;ipairs&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;Note: this function throws a Lua error if &lt;code&gt;HEADER&lt;/code&gt; or &lt;code&gt;VALUE&lt;/code&gt; contain unsafe characters (control characters).&lt;/p&gt; &#xA;&lt;p&gt;For reading &lt;em&gt;request&lt;/em&gt; headers, use the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqget_headers&#34;&gt;ngx.req.get_headers&lt;/a&gt; function instead.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.resp.get_headers&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;headers, err = ngx.resp.get_headers(max_headers?, raw?)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, balancer_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns a Lua table holding all the current response headers for the current request.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local h, err = ngx.resp.get_headers()&#xA;&#xA; if err == &#34;truncated&#34; then&#xA;     -- one can choose to ignore or reject the current response here&#xA; end&#xA;&#xA; for k, v in pairs(h) do&#xA;     ...&#xA; end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This function has the same signature as &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqget_headers&#34;&gt;ngx.req.get_headers&lt;/a&gt; except getting response headers instead of request headers.&lt;/p&gt; &#xA;&lt;p&gt;Note that a maximum of 100 response headers are parsed by default (including those with the same name) and that additional response headers are silently discarded to guard against potential denial of service attacks. Since &lt;code&gt;v0.10.13&lt;/code&gt;, when the limit is exceeded, it will return a second value which is the string &lt;code&gt;&#34;truncated&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This API was first introduced in the &lt;code&gt;v0.9.5&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.req.is_internal&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;is_internal = ngx.req.is_internal()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns a boolean indicating whether the current request is an &#34;internal request&#34;, i.e., a request initiated from inside the current Nginx server instead of from the client side.&lt;/p&gt; &#xA;&lt;p&gt;Subrequests are all internal requests and so are requests after internal redirects.&lt;/p&gt; &#xA;&lt;p&gt;This API was first introduced in the &lt;code&gt;v0.9.20&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.req.start_time&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;secs = ngx.req.start_time()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns a floating-point number representing the timestamp (including milliseconds as the decimal part) when the current request was created.&lt;/p&gt; &#xA;&lt;p&gt;The following example emulates the &lt;code&gt;$request_time&lt;/code&gt; variable value (provided by &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_log_module.html&#34;&gt;ngx_http_log_module&lt;/a&gt;) in pure Lua:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local request_time = ngx.now() - ngx.req.start_time()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This function was first introduced in the &lt;code&gt;v0.7.7&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxnow&#34;&gt;ngx.now&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxupdate_time&#34;&gt;ngx.update_time&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.req.http_version&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;num = ngx.req.http_version()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns the HTTP version number for the current request as a Lua number.&lt;/p&gt; &#xA;&lt;p&gt;Current possible values are 2.0, 1.0, 1.1, and 0.9. Returns &lt;code&gt;nil&lt;/code&gt; for unrecognized values.&lt;/p&gt; &#xA;&lt;p&gt;This method was first introduced in the &lt;code&gt;v0.7.17&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.req.raw_header&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;str = ngx.req.raw_header(no_request_line?)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns the original raw HTTP protocol header received by the Nginx server.&lt;/p&gt; &#xA;&lt;p&gt;By default, the request line and trailing &lt;code&gt;CR LF&lt;/code&gt; terminator will also be included. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; ngx.print(ngx.req.raw_header())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;gives something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET /t HTTP/1.1&#xA;Host: localhost&#xA;Connection: close&#xA;Foo: bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can specify the optional &lt;code&gt;no_request_line&lt;/code&gt; argument as a &lt;code&gt;true&lt;/code&gt; value to exclude the request line from the result. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; ngx.print(ngx.req.raw_header(true))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;outputs something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Host: localhost&#xA;Connection: close&#xA;Foo: bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This method was first introduced in the &lt;code&gt;v0.7.17&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;This method does not work in HTTP/2 requests yet.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.req.get_method&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;method_name = ngx.req.get_method()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, balancer_by_lua*, log_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Retrieves the current request&#39;s request method name. Strings like &lt;code&gt;&#34;GET&#34;&lt;/code&gt; and &lt;code&gt;&#34;POST&#34;&lt;/code&gt; are returned instead of numerical &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#http-method-constants&#34;&gt;method constants&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If the current request is an Nginx subrequest, then the subrequest&#39;s method name will be returned.&lt;/p&gt; &#xA;&lt;p&gt;This method was first introduced in the &lt;code&gt;v0.5.6&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqset_method&#34;&gt;ngx.req.set_method&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.req.set_method&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ngx.req.set_method(method_id)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Overrides the current request&#39;s request method with the &lt;code&gt;method_id&lt;/code&gt; argument. Currently only numerical &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#http-method-constants&#34;&gt;method constants&lt;/a&gt; are supported, like &lt;code&gt;ngx.HTTP_POST&lt;/code&gt; and &lt;code&gt;ngx.HTTP_GET&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If the current request is an Nginx subrequest, then the subrequest&#39;s method will be overridden.&lt;/p&gt; &#xA;&lt;p&gt;This method was first introduced in the &lt;code&gt;v0.5.6&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqget_method&#34;&gt;ngx.req.get_method&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.req.set_uri&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ngx.req.set_uri(uri, jump?, binary?)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Rewrite the current request&#39;s (parsed) URI by the &lt;code&gt;uri&lt;/code&gt; argument. The &lt;code&gt;uri&lt;/code&gt; argument must be a Lua string and cannot be of zero length, or a Lua exception will be thrown.&lt;/p&gt; &#xA;&lt;p&gt;The optional boolean &lt;code&gt;jump&lt;/code&gt; argument can trigger location rematch (or location jump) as &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_rewrite_module.html&#34;&gt;ngx_http_rewrite_module&lt;/a&gt;&#39;s &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#rewrite&#34;&gt;rewrite&lt;/a&gt; directive, that is, when &lt;code&gt;jump&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; (default to &lt;code&gt;false&lt;/code&gt;), this function will never return and it will tell Nginx to try re-searching locations with the new URI value at the later &lt;code&gt;post-rewrite&lt;/code&gt; phase and jumping to the new location.&lt;/p&gt; &#xA;&lt;p&gt;Location jump will not be triggered otherwise, and only the current request&#39;s URI will be modified, which is also the default behavior. This function will return but with no returned values when the &lt;code&gt;jump&lt;/code&gt; argument is &lt;code&gt;false&lt;/code&gt; or absent altogether.&lt;/p&gt; &#xA;&lt;p&gt;For example, the following Nginx config snippet&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; rewrite ^ /foo last;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;can be coded in Lua like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; ngx.req.set_uri(&#34;/foo&#34;, true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similarly, Nginx config&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; rewrite ^ /foo break;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;can be coded in Lua as&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; ngx.req.set_uri(&#34;/foo&#34;, false)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or equivalently,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; ngx.req.set_uri(&#34;/foo&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;jump&lt;/code&gt; argument can only be set to &lt;code&gt;true&lt;/code&gt; in &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#rewrite_by_lua&#34;&gt;rewrite_by_lua*&lt;/a&gt;. Use of jump in other contexts is prohibited and will throw out a Lua exception.&lt;/p&gt; &#xA;&lt;p&gt;A more sophisticated example involving regex substitutions is as follows&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; location /test {&#xA;     rewrite_by_lua_block {&#xA;         local uri = ngx.re.sub(ngx.var.uri, &#34;^/test/(.*)&#34;, &#34;/$1&#34;, &#34;o&#34;)&#xA;         ngx.req.set_uri(uri)&#xA;     }&#xA;     proxy_pass http://my_backend;&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which is functionally equivalent to&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; location /test {&#xA;     rewrite ^/test/(.*) /$1 break;&#xA;     proxy_pass http://my_backend;&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: this function throws a Lua error if the &lt;code&gt;uri&lt;/code&gt; argument contains unsafe characters (control characters).&lt;/p&gt; &#xA;&lt;p&gt;Note that it is not possible to use this interface to rewrite URI arguments and that &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqset_uri_args&#34;&gt;ngx.req.set_uri_args&lt;/a&gt; should be used for this instead. For instance, Nginx config&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; rewrite ^ /foo?a=3? last;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;can be coded as&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; ngx.req.set_uri_args(&#34;a=3&#34;)&#xA; ngx.req.set_uri(&#34;/foo&#34;, true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; ngx.req.set_uri_args({a = 3})&#xA; ngx.req.set_uri(&#34;/foo&#34;, true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Starting from &lt;code&gt;0.10.16&lt;/code&gt; of this module, this function accepts an optional boolean &lt;code&gt;binary&lt;/code&gt; argument to allow arbitrary binary URI data. By default, this &lt;code&gt;binary&lt;/code&gt; argument is false and this function will throw out a Lua error such as the one below when the &lt;code&gt;uri&lt;/code&gt; argument contains any control characters (ASCII Code 0 ~ 0x08, 0x0A ~ 0x1F and 0x7F).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[error] 23430#23430: *1 lua entry thread aborted: runtime error:&#xA;content_by_lua(nginx.conf:44):3: ngx.req.set_uri unsafe byte &#34;0x00&#34;&#xA;in &#34;\x00foo&#34; (maybe you want to set the &#39;binary&#39; argument?)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This interface was first introduced in the &lt;code&gt;v0.3.1rc14&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.req.set_uri_args&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ngx.req.set_uri_args(args)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Rewrite the current request&#39;s URI query arguments by the &lt;code&gt;args&lt;/code&gt; argument. The &lt;code&gt;args&lt;/code&gt; argument can be either a Lua string, as in&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; ngx.req.set_uri_args(&#34;a=3&amp;amp;b=hello%20world&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or a Lua table holding the query arguments&#39; key-value pairs, as in&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; ngx.req.set_uri_args({ a = 3, b = &#34;hello world&#34; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the former case, i.e., when the whole query-string is provided directly, the input Lua string should already be well-formed with the URI encoding. For security considerations, this method will automatically escape any control and whitespace characters (ASCII code 0x00 ~ 0x20 and 0x7F) in the Lua string.&lt;/p&gt; &#xA;&lt;p&gt;In the latter case, this method will escape argument keys and values according to the URI escaping rule.&lt;/p&gt; &#xA;&lt;p&gt;Multi-value arguments are also supported:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; ngx.req.set_uri_args({ a = 3, b = {5, 6} })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which will result in a query string like &lt;code&gt;a=3&amp;amp;b=5&amp;amp;b=6&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This interface was first introduced in the &lt;code&gt;v0.3.1rc13&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqset_uri&#34;&gt;ngx.req.set_uri&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.req.get_uri_args&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;args, err = ngx.req.get_uri_args(max_args?, tab?)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, balancer_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns a Lua table holding all the current request URL query arguments. An optional &lt;code&gt;tab&lt;/code&gt; argument can be used to reuse the table returned by this method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; location = /test {&#xA;     content_by_lua_block {&#xA;         local args, err = ngx.req.get_uri_args()&#xA;&#xA;         if err == &#34;truncated&#34; then&#xA;             -- one can choose to ignore or reject the current request here&#xA;         end&#xA;&#xA;         for key, val in pairs(args) do&#xA;             if type(val) == &#34;table&#34; then&#xA;                 ngx.say(key, &#34;: &#34;, table.concat(val, &#34;, &#34;))&#xA;             else&#xA;                 ngx.say(key, &#34;: &#34;, val)&#xA;             end&#xA;         end&#xA;     }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then &lt;code&gt;GET /test?foo=bar&amp;amp;bar=baz&amp;amp;bar=blah&lt;/code&gt; will yield the response body&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA; foo: bar&#xA; bar: baz, blah&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Multiple occurrences of an argument key will result in a table value holding all the values for that key in order.&lt;/p&gt; &#xA;&lt;p&gt;Keys and values are unescaped according to URI escaping rules. In the settings above, &lt;code&gt;GET /test?a%20b=1%61+2&lt;/code&gt; will yield:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA; a b: 1a 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Arguments without the &lt;code&gt;=&amp;lt;value&amp;gt;&lt;/code&gt; parts are treated as boolean arguments. &lt;code&gt;GET /test?foo&amp;amp;bar&lt;/code&gt; will yield:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA; foo: true&#xA; bar: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That is, they will take Lua boolean values &lt;code&gt;true&lt;/code&gt;. However, they are different from arguments taking empty string values. &lt;code&gt;GET /test?foo=&amp;amp;bar=&lt;/code&gt; will give something like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA; foo:&#xA; bar:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Empty key arguments are discarded. &lt;code&gt;GET /test?=hello&amp;amp;=world&lt;/code&gt; will yield an empty output for instance.&lt;/p&gt; &#xA;&lt;p&gt;Updating query arguments via the Nginx variable &lt;code&gt;$args&lt;/code&gt; (or &lt;code&gt;ngx.var.args&lt;/code&gt; in Lua) at runtime is also supported:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; ngx.var.args = &#34;a=3&amp;amp;b=42&#34;&#xA; local args, err = ngx.req.get_uri_args()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here the &lt;code&gt;args&lt;/code&gt; table will always look like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; {a = 3, b = 42}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;regardless of the actual request query string.&lt;/p&gt; &#xA;&lt;p&gt;Note that a maximum of 100 request arguments are parsed by default (including those with the same name) and that additional request arguments are silently discarded to guard against potential denial of service attacks. Since &lt;code&gt;v0.10.13&lt;/code&gt;, when the limit is exceeded, it will return a second value which is the string &lt;code&gt;&#34;truncated&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;However, the optional &lt;code&gt;max_args&lt;/code&gt; function argument can be used to override this limit:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local args, err = ngx.req.get_uri_args(10)&#xA; if err == &#34;truncated&#34; then&#xA;     -- one can choose to ignore or reject the current request here&#xA; end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This argument can be set to zero to remove the limit and to process all request arguments received:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local args, err = ngx.req.get_uri_args(0)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Removing the &lt;code&gt;max_args&lt;/code&gt; cap is strongly discouraged.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.req.get_post_args&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;args, err = ngx.req.get_post_args(max_args?)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns a Lua table holding all the current request POST query arguments (of the MIME type &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;). Call &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqread_body&#34;&gt;ngx.req.read_body&lt;/a&gt; to read the request body first or turn on the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_need_request_body&#34;&gt;lua_need_request_body&lt;/a&gt; directive to avoid errors.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; location = /test {&#xA;     content_by_lua_block {&#xA;         ngx.req.read_body()&#xA;         local args, err = ngx.req.get_post_args()&#xA;&#xA;         if err == &#34;truncated&#34; then&#xA;             -- one can choose to ignore or reject the current request here&#xA;         end&#xA;&#xA;         if not args then&#xA;             ngx.say(&#34;failed to get post args: &#34;, err)&#xA;             return&#xA;         end&#xA;         for key, val in pairs(args) do&#xA;             if type(val) == &#34;table&#34; then&#xA;                 ngx.say(key, &#34;: &#34;, table.concat(val, &#34;, &#34;))&#xA;             else&#xA;                 ngx.say(key, &#34;: &#34;, val)&#xA;             end&#xA;         end&#xA;     }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA; # Post request with the body &#39;foo=bar&amp;amp;bar=baz&amp;amp;bar=blah&#39;&#xA; $ curl --data &#39;foo=bar&amp;amp;bar=baz&amp;amp;bar=blah&#39; localhost/test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will yield the response body like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA; foo: bar&#xA; bar: baz, blah&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Multiple occurrences of an argument key will result in a table value holding all of the values for that key in order.&lt;/p&gt; &#xA;&lt;p&gt;Keys and values will be unescaped according to URI escaping rules.&lt;/p&gt; &#xA;&lt;p&gt;With the settings above,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA; # POST request with body &#39;a%20b=1%61+2&#39;&#xA; $ curl -d &#39;a%20b=1%61+2&#39; localhost/test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will yield:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA; a b: 1a 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Arguments without the &lt;code&gt;=&amp;lt;value&amp;gt;&lt;/code&gt; parts are treated as boolean arguments. &lt;code&gt;POST /test&lt;/code&gt; with the request body &lt;code&gt;foo&amp;amp;bar&lt;/code&gt; will yield:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA; foo: true&#xA; bar: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That is, they will take Lua boolean values &lt;code&gt;true&lt;/code&gt;. However, they are different from arguments taking empty string values. &lt;code&gt;POST /test&lt;/code&gt; with request body &lt;code&gt;foo=&amp;amp;bar=&lt;/code&gt; will return something like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA; foo:&#xA; bar:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Empty key arguments are discarded. &lt;code&gt;POST /test&lt;/code&gt; with body &lt;code&gt;=hello&amp;amp;=world&lt;/code&gt; will yield empty outputs for instance.&lt;/p&gt; &#xA;&lt;p&gt;Note that a maximum of 100 request arguments are parsed by default (including those with the same name) and that additional request arguments are silently discarded to guard against potential denial of service attacks. Since &lt;code&gt;v0.10.13&lt;/code&gt;, when the limit is exceeded, it will return a second value which is the string &lt;code&gt;&#34;truncated&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;However, the optional &lt;code&gt;max_args&lt;/code&gt; function argument can be used to override this limit:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local args, err = ngx.req.get_post_args(10)&#xA; if err == &#34;truncated&#34; then&#xA;     -- one can choose to ignore or reject the current request here&#xA; end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This argument can be set to zero to remove the limit and to process all request arguments received:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local args, err = ngx.req.get_post_args(0)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Removing the &lt;code&gt;max_args&lt;/code&gt; cap is strongly discouraged.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.req.get_headers&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;headers, err = ngx.req.get_headers(max_headers?, raw?)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns a Lua table holding all the current request headers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local h, err = ngx.req.get_headers()&#xA;&#xA; if err == &#34;truncated&#34; then&#xA;     -- one can choose to ignore or reject the current request here&#xA; end&#xA;&#xA; for k, v in pairs(h) do&#xA;     ...&#xA; end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To read an individual header:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; ngx.say(&#34;Host: &#34;, ngx.req.get_headers()[&#34;Host&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxvarvariable&#34;&gt;ngx.var.HEADER&lt;/a&gt; API call, which uses core &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_core_module.html#var_http_&#34;&gt;$http_HEADER&lt;/a&gt; variables, may be more preferable for reading individual request headers.&lt;/p&gt; &#xA;&lt;p&gt;For multiple instances of request headers such as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA; Foo: foo&#xA; Foo: bar&#xA; Foo: baz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;the value of &lt;code&gt;ngx.req.get_headers()[&#34;Foo&#34;]&lt;/code&gt; will be a Lua (array) table such as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; {&#34;foo&#34;, &#34;bar&#34;, &#34;baz&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that a maximum of 100 request headers are parsed by default (including those with the same name) and that additional request headers are silently discarded to guard against potential denial of service attacks. Since &lt;code&gt;v0.10.13&lt;/code&gt;, when the limit is exceeded, it will return a second value which is the string &lt;code&gt;&#34;truncated&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;However, the optional &lt;code&gt;max_headers&lt;/code&gt; function argument can be used to override this limit:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local headers, err = ngx.req.get_headers(10)&#xA;&#xA; if err == &#34;truncated&#34; then&#xA;     -- one can choose to ignore or reject the current request here&#xA; end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This argument can be set to zero to remove the limit and to process all request headers received:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local headers, err = ngx.req.get_headers(0)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Removing the &lt;code&gt;max_headers&lt;/code&gt; cap is strongly discouraged.&lt;/p&gt; &#xA;&lt;p&gt;Since the &lt;code&gt;0.6.9&lt;/code&gt; release, all the header names in the Lua table returned are converted to the pure lower-case form by default, unless the &lt;code&gt;raw&lt;/code&gt; argument is set to &lt;code&gt;true&lt;/code&gt; (default to &lt;code&gt;false&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Also, by default, an &lt;code&gt;__index&lt;/code&gt; metamethod is added to the resulting Lua table and will normalize the keys to a pure lowercase form with all underscores converted to dashes in case of a lookup miss. For example, if a request header &lt;code&gt;My-Foo-Header&lt;/code&gt; is present, then the following invocations will all pick up the value of this header correctly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; ngx.say(headers.my_foo_header)&#xA; ngx.say(headers[&#34;My-Foo-Header&#34;])&#xA; ngx.say(headers[&#34;my-foo-header&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;__index&lt;/code&gt; metamethod will not be added when the &lt;code&gt;raw&lt;/code&gt; argument is set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.req.set_header&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ngx.req.set_header(header_name, header_value)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Set the current request&#39;s request header named &lt;code&gt;header_name&lt;/code&gt; to value &lt;code&gt;header_value&lt;/code&gt;, overriding any existing ones.&lt;/p&gt; &#xA;&lt;p&gt;The input Lua string &lt;code&gt;header_name&lt;/code&gt; and &lt;code&gt;header_value&lt;/code&gt; should already be well-formed with the URI encoding. For security considerations, this method will automatically escape &#34; &#34;, &#34;&#34;&#34;, &#34;(&#34;, &#34;)&#34;, &#34;,&#34;, &#34;/&#34;, &#34;:&#34;, &#34;;&#34;, &#34;?&#34;, &#34;&amp;lt;&#34;, &#34;=&#34;, &#34;&amp;gt;&#34;, &#34;?&#34;, &#34;@&#34;, &#34;[&#34;, &#34;]&#34;, &#34;&#34;, &#34;{&#34;, &#34;}&#34;, 0x00-0x1F, 0x7F-0xFF in &lt;code&gt;header_name&lt;/code&gt; and automatically escape &#34;0x00-0x08, 0x0A-0x0F, 0x7F in &lt;code&gt;header_value&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By default, all the subrequests subsequently initiated by &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxlocationcapture&#34;&gt;ngx.location.capture&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxlocationcapture_multi&#34;&gt;ngx.location.capture_multi&lt;/a&gt; will inherit the new header.&lt;/p&gt; &#xA;&lt;p&gt;It is not a Lua&#39;s equivalent of nginx &lt;code&gt;proxy_set_header&lt;/code&gt; directive (same is true about &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqclear_header&#34;&gt;ngx.req.clear_header&lt;/a&gt;). &lt;code&gt;proxy_set_header&lt;/code&gt; only affects the upstream request while &lt;code&gt;ngx.req.set_header&lt;/code&gt; change the incoming request. Record the http headers in the access log file will show the difference. But you still can use it as an alternative of nginx &lt;code&gt;proxy_set_header&lt;/code&gt; directive as long as you know the difference.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example of setting the &lt;code&gt;Content-Type&lt;/code&gt; header:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; ngx.req.set_header(&#34;Content-Type&#34;, &#34;text/css&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;header_value&lt;/code&gt; can take an array list of values, for example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; ngx.req.set_header(&#34;Foo&#34;, {&#34;a&#34;, &#34;abc&#34;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will produce two new request headers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA; Foo: a&#xA; Foo: abc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and old &lt;code&gt;Foo&lt;/code&gt; headers will be overridden if there is any.&lt;/p&gt; &#xA;&lt;p&gt;When the &lt;code&gt;header_value&lt;/code&gt; argument is &lt;code&gt;nil&lt;/code&gt;, the request header will be removed. So&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; ngx.req.set_header(&#34;X-Foo&#34;, nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;is equivalent to&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; ngx.req.clear_header(&#34;X-Foo&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: this function throws a Lua error if &lt;code&gt;header_name&lt;/code&gt; or &lt;code&gt;header_value&lt;/code&gt; contain unsafe characters (control characters).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.req.clear_header&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ngx.req.clear_header(header_name)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Clears the current request&#39;s request header named &lt;code&gt;header_name&lt;/code&gt;. None of the current request&#39;s existing subrequests will be affected but subsequently initiated subrequests will inherit the change by default.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.req.read_body&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ngx.req.read_body()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Reads the client request body synchronously without blocking the Nginx event loop.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; ngx.req.read_body()&#xA; local args = ngx.req.get_post_args()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the request body is already read previously by turning on &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_need_request_body&#34;&gt;lua_need_request_body&lt;/a&gt; or by using other modules, then this function does not run and returns immediately.&lt;/p&gt; &#xA;&lt;p&gt;If the request body has already been explicitly discarded, either by the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqdiscard_body&#34;&gt;ngx.req.discard_body&lt;/a&gt; function or other modules, this function does not run and returns immediately.&lt;/p&gt; &#xA;&lt;p&gt;In case of errors, such as connection errors while reading the data, this method will throw out a Lua exception &lt;em&gt;or&lt;/em&gt; terminate the current request with a 500 status code immediately.&lt;/p&gt; &#xA;&lt;p&gt;The request body data read using this function can be retrieved later via &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqget_body_data&#34;&gt;ngx.req.get_body_data&lt;/a&gt; or, alternatively, the temporary file name for the body data cached to disk using &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqget_body_file&#34;&gt;ngx.req.get_body_file&lt;/a&gt;. This depends on&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;whether the current request body is already larger than the &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_buffer_size&#34;&gt;client_body_buffer_size&lt;/a&gt;,&lt;/li&gt; &#xA; &lt;li&gt;and whether &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_in_file_only&#34;&gt;client_body_in_file_only&lt;/a&gt; has been switched on.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;In cases where current request may have a request body and the request body data is not required, The &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqdiscard_body&#34;&gt;ngx.req.discard_body&lt;/a&gt; function must be used to explicitly discard the request body to avoid breaking things under HTTP 1.1 keepalive or HTTP 1.1 pipelining.&lt;/p&gt; &#xA;&lt;p&gt;This function was first introduced in the &lt;code&gt;v0.3.1rc17&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.req.discard_body&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ngx.req.discard_body()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Explicitly discard the request body, i.e., read the data on the connection and throw it away immediately (without using the request body by any means).&lt;/p&gt; &#xA;&lt;p&gt;This function is an asynchronous call and returns immediately.&lt;/p&gt; &#xA;&lt;p&gt;If the request body has already been read, this function does nothing and returns immediately.&lt;/p&gt; &#xA;&lt;p&gt;This function was first introduced in the &lt;code&gt;v0.3.1rc17&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqread_body&#34;&gt;ngx.req.read_body&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.req.get_body_data&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;data = ngx.req.get_body_data()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*, log_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Retrieves in-memory request body data. It returns a Lua string rather than a Lua table holding all the parsed query arguments. Use the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqget_post_args&#34;&gt;ngx.req.get_post_args&lt;/a&gt; function instead if a Lua table is required.&lt;/p&gt; &#xA;&lt;p&gt;This function returns &lt;code&gt;nil&lt;/code&gt; if&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;the request body has not been read,&lt;/li&gt; &#xA; &lt;li&gt;the request body has been read into disk temporary files,&lt;/li&gt; &#xA; &lt;li&gt;or the request body has zero size.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If the request body has not been read yet, call &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqread_body&#34;&gt;ngx.req.read_body&lt;/a&gt; first (or turn on &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_need_request_body&#34;&gt;lua_need_request_body&lt;/a&gt; to force this module to read the request body. This is not recommended however).&lt;/p&gt; &#xA;&lt;p&gt;If the request body has been read into disk files, try calling the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqget_body_file&#34;&gt;ngx.req.get_body_file&lt;/a&gt; function instead.&lt;/p&gt; &#xA;&lt;p&gt;To force in-memory request bodies, try setting &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_buffer_size&#34;&gt;client_body_buffer_size&lt;/a&gt; to the same size value in &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_core_module.html#client_max_body_size&#34;&gt;client_max_body_size&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that calling this function instead of using &lt;code&gt;ngx.var.request_body&lt;/code&gt; or &lt;code&gt;ngx.var.echo_request_body&lt;/code&gt; is more efficient because it can save one dynamic memory allocation and one data copy.&lt;/p&gt; &#xA;&lt;p&gt;This function was first introduced in the &lt;code&gt;v0.3.1rc17&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqget_body_file&#34;&gt;ngx.req.get_body_file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.req.get_body_file&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;file_name = ngx.req.get_body_file()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Retrieves the file name for the in-file request body data. Returns &lt;code&gt;nil&lt;/code&gt; if the request body has not been read or has been read into memory.&lt;/p&gt; &#xA;&lt;p&gt;The returned file is read only and is usually cleaned up by Nginx&#39;s memory pool. It should not be manually modified, renamed, or removed in Lua code.&lt;/p&gt; &#xA;&lt;p&gt;If the request body has not been read yet, call &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqread_body&#34;&gt;ngx.req.read_body&lt;/a&gt; first (or turn on &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_need_request_body&#34;&gt;lua_need_request_body&lt;/a&gt; to force this module to read the request body. This is not recommended however).&lt;/p&gt; &#xA;&lt;p&gt;If the request body has been read into memory, try calling the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqget_body_data&#34;&gt;ngx.req.get_body_data&lt;/a&gt; function instead.&lt;/p&gt; &#xA;&lt;p&gt;To force in-file request bodies, try turning on &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_in_file_only&#34;&gt;client_body_in_file_only&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This function was first introduced in the &lt;code&gt;v0.3.1rc17&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqget_body_data&#34;&gt;ngx.req.get_body_data&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.req.set_body_data&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ngx.req.set_body_data(data)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Set the current request&#39;s request body using the in-memory data specified by the &lt;code&gt;data&lt;/code&gt; argument.&lt;/p&gt; &#xA;&lt;p&gt;If the request body has not been read yet, call &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqread_body&#34;&gt;ngx.req.read_body&lt;/a&gt; first (or turn on &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_need_request_body&#34;&gt;lua_need_request_body&lt;/a&gt; to force this module to read the request body. This is not recommended however). Additionally, the request body must not have been previously discarded by &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqdiscard_body&#34;&gt;ngx.req.discard_body&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Whether the previous request body has been read into memory or buffered into a disk file, it will be freed or the disk file will be cleaned up immediately, respectively.&lt;/p&gt; &#xA;&lt;p&gt;This function was first introduced in the &lt;code&gt;v0.3.1rc18&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqset_body_file&#34;&gt;ngx.req.set_body_file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.req.set_body_file&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ngx.req.set_body_file(file_name, auto_clean?)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Set the current request&#39;s request body using the in-file data specified by the &lt;code&gt;file_name&lt;/code&gt; argument.&lt;/p&gt; &#xA;&lt;p&gt;If the request body has not been read yet, call &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqread_body&#34;&gt;ngx.req.read_body&lt;/a&gt; first (or turn on &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_need_request_body&#34;&gt;lua_need_request_body&lt;/a&gt; to force this module to read the request body. This is not recommended however). Additionally, the request body must not have been previously discarded by &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqdiscard_body&#34;&gt;ngx.req.discard_body&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If the optional &lt;code&gt;auto_clean&lt;/code&gt; argument is given a &lt;code&gt;true&lt;/code&gt; value, then this file will be removed at request completion or the next time this function or &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqset_body_data&#34;&gt;ngx.req.set_body_data&lt;/a&gt; are called in the same request. The &lt;code&gt;auto_clean&lt;/code&gt; is default to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please ensure that the file specified by the &lt;code&gt;file_name&lt;/code&gt; argument exists and is readable by an Nginx worker process by setting its permission properly to avoid Lua exception errors.&lt;/p&gt; &#xA;&lt;p&gt;Whether the previous request body has been read into memory or buffered into a disk file, it will be freed or the disk file will be cleaned up immediately, respectively.&lt;/p&gt; &#xA;&lt;p&gt;This function was first introduced in the &lt;code&gt;v0.3.1rc18&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqset_body_data&#34;&gt;ngx.req.set_body_data&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.req.init_body&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ngx.req.init_body(buffer_size?)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Creates a new blank request body for the current request and initializes the buffer for later request body data writing via the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqappend_body&#34;&gt;ngx.req.append_body&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqfinish_body&#34;&gt;ngx.req.finish_body&lt;/a&gt; APIs.&lt;/p&gt; &#xA;&lt;p&gt;If the &lt;code&gt;buffer_size&lt;/code&gt; argument is specified, then its value will be used for the size of the memory buffer for body writing with &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqappend_body&#34;&gt;ngx.req.append_body&lt;/a&gt;. If the argument is omitted, then the value specified by the standard &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_buffer_size&#34;&gt;client_body_buffer_size&lt;/a&gt; directive will be used instead.&lt;/p&gt; &#xA;&lt;p&gt;When the data can no longer be hold in the memory buffer for the request body, then the data will be flushed onto a temporary file just like the standard request body reader in the Nginx core.&lt;/p&gt; &#xA;&lt;p&gt;It is important to always call the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqfinish_body&#34;&gt;ngx.req.finish_body&lt;/a&gt; after all the data has been appended onto the current request body. Also, when this function is used together with &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqsocket&#34;&gt;ngx.req.socket&lt;/a&gt;, it is required to call &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqsocket&#34;&gt;ngx.req.socket&lt;/a&gt; &lt;em&gt;before&lt;/em&gt; this function, or you will get the &#34;request body already exists&#34; error message.&lt;/p&gt; &#xA;&lt;p&gt;The usage of this function is often like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; ngx.req.init_body(128 * 1024)  -- buffer is 128KB&#xA; for chunk in next_data_chunk() do&#xA;     ngx.req.append_body(chunk) -- each chunk can be 4KB&#xA; end&#xA; ngx.req.finish_body()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This function can be used with &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqappend_body&#34;&gt;ngx.req.append_body&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqfinish_body&#34;&gt;ngx.req.finish_body&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqsocket&#34;&gt;ngx.req.socket&lt;/a&gt; to implement efficient input filters in pure Lua (in the context of &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#rewrite_by_lua&#34;&gt;rewrite_by_lua*&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#access_by_lua&#34;&gt;access_by_lua*&lt;/a&gt;), which can be used with other Nginx content handler or upstream modules like &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_proxy_module.html&#34;&gt;ngx_http_proxy_module&lt;/a&gt; and &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html&#34;&gt;ngx_http_fastcgi_module&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This function was first introduced in the &lt;code&gt;v0.5.11&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.req.append_body&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ngx.req.append_body(data_chunk)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Append new data chunk specified by the &lt;code&gt;data_chunk&lt;/code&gt; argument onto the existing request body created by the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqinit_body&#34;&gt;ngx.req.init_body&lt;/a&gt; call.&lt;/p&gt; &#xA;&lt;p&gt;When the data can no longer be hold in the memory buffer for the request body, then the data will be flushed onto a temporary file just like the standard request body reader in the Nginx core.&lt;/p&gt; &#xA;&lt;p&gt;It is important to always call the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqfinish_body&#34;&gt;ngx.req.finish_body&lt;/a&gt; after all the data has been appended onto the current request body.&lt;/p&gt; &#xA;&lt;p&gt;This function can be used with &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqinit_body&#34;&gt;ngx.req.init_body&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqfinish_body&#34;&gt;ngx.req.finish_body&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqsocket&#34;&gt;ngx.req.socket&lt;/a&gt; to implement efficient input filters in pure Lua (in the context of &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#rewrite_by_lua&#34;&gt;rewrite_by_lua*&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#access_by_lua&#34;&gt;access_by_lua*&lt;/a&gt;), which can be used with other Nginx content handler or upstream modules like &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_proxy_module.html&#34;&gt;ngx_http_proxy_module&lt;/a&gt; and &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html&#34;&gt;ngx_http_fastcgi_module&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This function was first introduced in the &lt;code&gt;v0.5.11&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqinit_body&#34;&gt;ngx.req.init_body&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.req.finish_body&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ngx.req.finish_body()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Completes the construction process of the new request body created by the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqinit_body&#34;&gt;ngx.req.init_body&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqappend_body&#34;&gt;ngx.req.append_body&lt;/a&gt; calls.&lt;/p&gt; &#xA;&lt;p&gt;This function can be used with &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqinit_body&#34;&gt;ngx.req.init_body&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqappend_body&#34;&gt;ngx.req.append_body&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqsocket&#34;&gt;ngx.req.socket&lt;/a&gt; to implement efficient input filters in pure Lua (in the context of &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#rewrite_by_lua&#34;&gt;rewrite_by_lua*&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#access_by_lua&#34;&gt;access_by_lua*&lt;/a&gt;), which can be used with other Nginx content handler or upstream modules like &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_proxy_module.html&#34;&gt;ngx_http_proxy_module&lt;/a&gt; and &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html&#34;&gt;ngx_http_fastcgi_module&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This function was first introduced in the &lt;code&gt;v0.5.11&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqinit_body&#34;&gt;ngx.req.init_body&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.req.socket&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;tcpsock, err = ngx.req.socket()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;tcpsock, err = ngx.req.socket(raw)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns a read-only cosocket object that wraps the downstream connection. Only &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsockreceive&#34;&gt;receive&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsockreceiveany&#34;&gt;receiveany&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsockreceiveuntil&#34;&gt;receiveuntil&lt;/a&gt; methods are supported on this object.&lt;/p&gt; &#xA;&lt;p&gt;In case of error, &lt;code&gt;nil&lt;/code&gt; will be returned as well as a string describing the error.&lt;/p&gt; &#xA;&lt;p&gt;The socket object returned by this method is usually used to read the current request&#39;s body in a streaming fashion. Do not turn on the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_need_request_body&#34;&gt;lua_need_request_body&lt;/a&gt; directive, and do not mix this call with &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqread_body&#34;&gt;ngx.req.read_body&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqdiscard_body&#34;&gt;ngx.req.discard_body&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If any request body data has been pre-read into the Nginx core request header buffer, the resulting cosocket object will take care of this to avoid potential data loss resulting from such pre-reading. Chunked request bodies are not yet supported in this API.&lt;/p&gt; &#xA;&lt;p&gt;Since the &lt;code&gt;v0.9.0&lt;/code&gt; release, this function accepts an optional boolean &lt;code&gt;raw&lt;/code&gt; argument. When this argument is &lt;code&gt;true&lt;/code&gt;, this function returns a full-duplex cosocket object wrapping around the raw downstream connection socket, upon which you can call the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsockreceive&#34;&gt;receive&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsockreceiveany&#34;&gt;receiveany&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsockreceiveuntil&#34;&gt;receiveuntil&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksend&#34;&gt;send&lt;/a&gt; methods.&lt;/p&gt; &#xA;&lt;p&gt;When the &lt;code&gt;raw&lt;/code&gt; argument is &lt;code&gt;true&lt;/code&gt;, it is required that no pending data from any previous &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsay&#34;&gt;ngx.say&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxprint&#34;&gt;ngx.print&lt;/a&gt;, or &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsend_headers&#34;&gt;ngx.send_headers&lt;/a&gt; calls exists. So if you have these downstream output calls previously, you should call &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxflush&#34;&gt;ngx.flush(true)&lt;/a&gt; before calling &lt;code&gt;ngx.req.socket(true)&lt;/code&gt; to ensure that there is no pending output data. If the request body has not been read yet, then this &#34;raw socket&#34; can also be used to read the request body.&lt;/p&gt; &#xA;&lt;p&gt;You can use the &#34;raw request socket&#34; returned by &lt;code&gt;ngx.req.socket(true)&lt;/code&gt; to implement fancy protocols like &lt;a href=&#34;https://en.wikipedia.org/wiki/WebSocket&#34;&gt;WebSocket&lt;/a&gt;, or just emit your own raw HTTP response header or body data. You can refer to the &lt;a href=&#34;https://github.com/openresty/lua-resty-websocket&#34;&gt;lua-resty-websocket library&lt;/a&gt; for a real world example.&lt;/p&gt; &#xA;&lt;p&gt;This function was first introduced in the &lt;code&gt;v0.5.0rc1&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.exec&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ngx.exec(uri, args?)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Does an internal redirect to &lt;code&gt;uri&lt;/code&gt; with &lt;code&gt;args&lt;/code&gt; and is similar to the &lt;a href=&#34;http://github.com/openresty/echo-nginx-module#echo_exec&#34;&gt;echo_exec&lt;/a&gt; directive of the &lt;a href=&#34;http://github.com/openresty/echo-nginx-module&#34;&gt;echo-nginx-module&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; ngx.exec(&#39;/some-location&#39;)&#xA; ngx.exec(&#39;/some-location&#39;, &#39;a=3&amp;amp;b=5&amp;amp;c=6&#39;)&#xA; ngx.exec(&#39;/some-location?a=3&amp;amp;b=5&#39;, &#39;c=6&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The optional second &lt;code&gt;args&lt;/code&gt; can be used to specify extra URI query arguments, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; ngx.exec(&#34;/foo&#34;, &#34;a=3&amp;amp;b=hello%20world&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, a Lua table can be passed for the &lt;code&gt;args&lt;/code&gt; argument for ngx_lua to carry out URI escaping and string concatenation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; ngx.exec(&#34;/foo&#34;, { a = 3, b = &#34;hello world&#34; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The result is exactly the same as the previous example.&lt;/p&gt; &#xA;&lt;p&gt;The format for the Lua table passed as the &lt;code&gt;args&lt;/code&gt; argument is identical to the format used in the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxencode_args&#34;&gt;ngx.encode_args&lt;/a&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;Named locations are also supported but the second &lt;code&gt;args&lt;/code&gt; argument will be ignored if present and the querystring for the new target is inherited from the referring location (if any).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;GET /foo/file.php?a=hello&lt;/code&gt; will return &#34;hello&#34; and not &#34;goodbye&#34; in the example below&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; location /foo {&#xA;     content_by_lua_block {&#xA;         ngx.exec(&#34;@bar&#34;, &#34;a=goodbye&#34;)&#xA;     }&#xA; }&#xA;&#xA; location @bar {&#xA;     content_by_lua_block {&#xA;         local args = ngx.req.get_uri_args()&#xA;         for key, val in pairs(args) do&#xA;             if key == &#34;a&#34; then&#xA;                 ngx.say(val)&#xA;             end&#xA;         end&#xA;     }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;ngx.exec&lt;/code&gt; method is different from &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxredirect&#34;&gt;ngx.redirect&lt;/a&gt; in that it is purely an internal redirect and that no new external HTTP traffic is involved.&lt;/p&gt; &#xA;&lt;p&gt;Also note that this method call terminates the processing of the current request and that it &lt;em&gt;must&lt;/em&gt; be called before &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsend_headers&#34;&gt;ngx.send_headers&lt;/a&gt; or explicit response body outputs by either &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxprint&#34;&gt;ngx.print&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsay&#34;&gt;ngx.say&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is recommended that a coding style that combines this method call with the &lt;code&gt;return&lt;/code&gt; statement, i.e., &lt;code&gt;return ngx.exec(...)&lt;/code&gt; be adopted when this method call is used in contexts other than &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#header_filter_by_lua&#34;&gt;header_filter_by_lua*&lt;/a&gt; to reinforce the fact that the request processing is being terminated.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.redirect&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ngx.redirect(uri, status?)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Issue an &lt;code&gt;HTTP 301&lt;/code&gt; or &lt;code&gt;302&lt;/code&gt; redirection to &lt;code&gt;uri&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note: this function throws a Lua error if the &lt;code&gt;uri&lt;/code&gt; argument contains unsafe characters (control characters).&lt;/p&gt; &#xA;&lt;p&gt;The optional &lt;code&gt;status&lt;/code&gt; parameter specifies the HTTP status code to be used. The following status codes are supported right now:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;301&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;302&lt;/code&gt; (default)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;303&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;307&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;308&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is &lt;code&gt;302&lt;/code&gt; (&lt;code&gt;ngx.HTTP_MOVED_TEMPORARILY&lt;/code&gt;) by default.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example assuming the current server name is &lt;code&gt;localhost&lt;/code&gt; and that it is listening on port 1984:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; return ngx.redirect(&#34;/foo&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which is equivalent to&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; return ngx.redirect(&#34;/foo&#34;, ngx.HTTP_MOVED_TEMPORARILY)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Redirecting arbitrary external URLs is also supported, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; return ngx.redirect(&#34;http://www.google.com&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can also use the numerical code directly as the second &lt;code&gt;status&lt;/code&gt; argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; return ngx.redirect(&#34;/foo&#34;, 301)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This method is similar to the &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#rewrite&#34;&gt;rewrite&lt;/a&gt; directive with the &lt;code&gt;redirect&lt;/code&gt; modifier in the standard &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_rewrite_module.html&#34;&gt;ngx_http_rewrite_module&lt;/a&gt;, for example, this &lt;code&gt;nginx.conf&lt;/code&gt; snippet&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; rewrite ^ /foo? redirect;  # nginx config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;is equivalent to the following Lua code&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; return ngx.redirect(&#39;/foo&#39;)  -- Lua code&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;while&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; rewrite ^ /foo? permanent;  # nginx config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;is equivalent to&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; return ngx.redirect(&#39;/foo&#39;, ngx.HTTP_MOVED_PERMANENTLY)  -- Lua code&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;URI arguments can be specified as well, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; return ngx.redirect(&#39;/foo?a=3&amp;amp;b=4&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that this method call terminates the processing of the current request and that it &lt;em&gt;must&lt;/em&gt; be called before &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsend_headers&#34;&gt;ngx.send_headers&lt;/a&gt; or explicit response body outputs by either &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxprint&#34;&gt;ngx.print&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsay&#34;&gt;ngx.say&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is recommended that a coding style that combines this method call with the &lt;code&gt;return&lt;/code&gt; statement, i.e., &lt;code&gt;return ngx.redirect(...)&lt;/code&gt; be adopted when this method call is used in contexts other than &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#header_filter_by_lua&#34;&gt;header_filter_by_lua*&lt;/a&gt; to reinforce the fact that the request processing is being terminated.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.send_headers&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ok, err = ngx.send_headers()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Explicitly send out the response headers.&lt;/p&gt; &#xA;&lt;p&gt;Since &lt;code&gt;v0.8.3&lt;/code&gt; this function returns &lt;code&gt;1&lt;/code&gt; on success, or returns &lt;code&gt;nil&lt;/code&gt; and a string describing the error otherwise.&lt;/p&gt; &#xA;&lt;p&gt;Note that there is normally no need to manually send out response headers as ngx_lua will automatically send headers out before content is output with &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsay&#34;&gt;ngx.say&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxprint&#34;&gt;ngx.print&lt;/a&gt; or when &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#content_by_lua&#34;&gt;content_by_lua*&lt;/a&gt; exits normally.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.headers_sent&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;value = ngx.headers_sent&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns &lt;code&gt;true&lt;/code&gt; if the response headers have been sent (by ngx_lua), and &lt;code&gt;false&lt;/code&gt; otherwise.&lt;/p&gt; &#xA;&lt;p&gt;This API was first introduced in ngx_lua v0.3.1rc6.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.print&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ok, err = ngx.print(...)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Emits arguments concatenated to the HTTP client (as response body). If response headers have not been sent, this function will send headers out first and then output body data.&lt;/p&gt; &#xA;&lt;p&gt;Since &lt;code&gt;v0.8.3&lt;/code&gt; this function returns &lt;code&gt;1&lt;/code&gt; on success, or returns &lt;code&gt;nil&lt;/code&gt; and a string describing the error otherwise.&lt;/p&gt; &#xA;&lt;p&gt;Lua &lt;code&gt;nil&lt;/code&gt; values will output &lt;code&gt;&#34;nil&#34;&lt;/code&gt; strings and Lua boolean values will output &lt;code&gt;&#34;true&#34;&lt;/code&gt; and &lt;code&gt;&#34;false&#34;&lt;/code&gt; literal strings respectively.&lt;/p&gt; &#xA;&lt;p&gt;Nested arrays of strings are permitted and the elements in the arrays will be sent one by one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local table = {&#xA;     &#34;hello, &#34;,&#xA;     {&#34;world: &#34;, true, &#34; or &#34;, false,&#xA;         {&#34;: &#34;, nil}}&#xA; }&#xA; ngx.print(table)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will yield the output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA; hello, world: true or false: nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Non-array table arguments will cause a Lua exception to be thrown.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;ngx.null&lt;/code&gt; constant will yield the &lt;code&gt;&#34;null&#34;&lt;/code&gt; string output.&lt;/p&gt; &#xA;&lt;p&gt;This is an asynchronous call and will return immediately without waiting for all the data to be written into the system send buffer. To run in synchronous mode, call &lt;code&gt;ngx.flush(true)&lt;/code&gt; after calling &lt;code&gt;ngx.print&lt;/code&gt;. This can be particularly useful for streaming output. See &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxflush&#34;&gt;ngx.flush&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;Please note that both &lt;code&gt;ngx.print&lt;/code&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsay&#34;&gt;ngx.say&lt;/a&gt; will always invoke the whole Nginx output body filter chain, which is an expensive operation. So be careful when calling either of these two in a tight loop; buffer the data yourself in Lua and save the calls.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.say&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ok, err = ngx.say(...)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Just as &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxprint&#34;&gt;ngx.print&lt;/a&gt; but also emit a trailing newline.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.log&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ngx.log(log_level, ...)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_by_lua*, init_worker_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, exit_worker_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Log arguments concatenated to error.log with the given logging level.&lt;/p&gt; &#xA;&lt;p&gt;Lua &lt;code&gt;nil&lt;/code&gt; arguments are accepted and result in literal &lt;code&gt;&#34;nil&#34;&lt;/code&gt; string while Lua booleans result in literal &lt;code&gt;&#34;true&#34;&lt;/code&gt; or &lt;code&gt;&#34;false&#34;&lt;/code&gt; string outputs. And the &lt;code&gt;ngx.null&lt;/code&gt; constant will yield the &lt;code&gt;&#34;null&#34;&lt;/code&gt; string output.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;log_level&lt;/code&gt; argument can take constants like &lt;code&gt;ngx.ERR&lt;/code&gt; and &lt;code&gt;ngx.WARN&lt;/code&gt;. Check out &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-log-level-constants&#34;&gt;Nginx log level constants&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;There is a hard coded &lt;code&gt;2048&lt;/code&gt; byte limitation on error message lengths in the Nginx core. This limit includes trailing newlines and leading time stamps. If the message size exceeds this limit, Nginx will truncate the message text accordingly. This limit can be manually modified by editing the &lt;code&gt;NGX_MAX_ERROR_STR&lt;/code&gt; macro definition in the &lt;code&gt;src/core/ngx_log.h&lt;/code&gt; file in the Nginx source tree.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.flush&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ok, err = ngx.flush(wait?)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Flushes response output to the client.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ngx.flush&lt;/code&gt; accepts an optional boolean &lt;code&gt;wait&lt;/code&gt; argument (Default: &lt;code&gt;false&lt;/code&gt;) first introduced in the &lt;code&gt;v0.3.1rc34&lt;/code&gt; release. When called with the default argument, it issues an asynchronous call (Returns immediately without waiting for output data to be written into the system send buffer). Calling the function with the &lt;code&gt;wait&lt;/code&gt; argument set to &lt;code&gt;true&lt;/code&gt; switches to synchronous mode.&lt;/p&gt; &#xA;&lt;p&gt;In synchronous mode, the function will not return until all output data has been written into the system send buffer or until the &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_core_module.html#send_timeout&#34;&gt;send_timeout&lt;/a&gt; setting has expired. Note that using the Lua coroutine mechanism means that this function does not block the Nginx event loop even in the synchronous mode.&lt;/p&gt; &#xA;&lt;p&gt;When &lt;code&gt;ngx.flush(true)&lt;/code&gt; is called immediately after &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxprint&#34;&gt;ngx.print&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsay&#34;&gt;ngx.say&lt;/a&gt;, it causes the latter functions to run in synchronous mode. This can be particularly useful for streaming output.&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;ngx.flush&lt;/code&gt; is not functional when in the HTTP 1.0 output buffering mode. See &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#http-10-support&#34;&gt;HTTP 1.0 support&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Since &lt;code&gt;v0.8.3&lt;/code&gt; this function returns &lt;code&gt;1&lt;/code&gt; on success, or returns &lt;code&gt;nil&lt;/code&gt; and a string describing the error otherwise.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.exit&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ngx.exit(status)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;When &lt;code&gt;status &amp;gt;= 200&lt;/code&gt; (i.e., &lt;code&gt;ngx.HTTP_OK&lt;/code&gt; and above), it will interrupt the execution of the current request and return status code to Nginx.&lt;/p&gt; &#xA;&lt;p&gt;When &lt;code&gt;status == 0&lt;/code&gt; (i.e., &lt;code&gt;ngx.OK&lt;/code&gt;), it will only quit the current phase handler (or the content handler if the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#content_by_lua&#34;&gt;content_by_lua*&lt;/a&gt; directive is used) and continue to run later phases (if any) for the current request.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;status&lt;/code&gt; argument can be &lt;code&gt;ngx.OK&lt;/code&gt;, &lt;code&gt;ngx.ERROR&lt;/code&gt;, &lt;code&gt;ngx.HTTP_NOT_FOUND&lt;/code&gt;, &lt;code&gt;ngx.HTTP_MOVED_TEMPORARILY&lt;/code&gt;, or other &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#http-status-constants&#34;&gt;HTTP status constants&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To return an error page with custom contents, use code snippets like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; ngx.status = ngx.HTTP_GONE&#xA; ngx.say(&#34;This is our own content&#34;)&#xA; -- to cause quit the whole request rather than the current phase handler&#xA; ngx.exit(ngx.HTTP_OK)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The effect in action:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA; $ curl -i http://localhost/test&#xA; HTTP/1.1 410 Gone&#xA; Server: nginx/1.0.6&#xA; Date: Thu, 15 Sep 2011 00:51:48 GMT&#xA; Content-Type: text/plain&#xA; Transfer-Encoding: chunked&#xA; Connection: keep-alive&#xA;&#xA; This is our own content&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Number literals can be used directly as the argument, for instance,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; ngx.exit(501)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that while this method accepts all &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#http-status-constants&#34;&gt;HTTP status constants&lt;/a&gt; as input, it only accepts &lt;code&gt;ngx.OK&lt;/code&gt; and &lt;code&gt;ngx.ERROR&lt;/code&gt; of the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#core-constants&#34;&gt;core constants&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Also note that this method call terminates the processing of the current request and that it is recommended that a coding style that combines this method call with the &lt;code&gt;return&lt;/code&gt; statement, i.e., &lt;code&gt;return ngx.exit(...)&lt;/code&gt; be used to reinforce the fact that the request processing is being terminated.&lt;/p&gt; &#xA;&lt;p&gt;When being used in the contexts of &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#header_filter_by_lua&#34;&gt;header_filter_by_lua*&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#balancer_by_lua_block&#34;&gt;balancer_by_lua*&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ssl_session_store_by_lua_block&#34;&gt;ssl_session_store_by_lua*&lt;/a&gt;, &lt;code&gt;ngx.exit()&lt;/code&gt; is an asynchronous operation and will return immediately. This behavior may change in future and it is recommended that users always use &lt;code&gt;return&lt;/code&gt; in combination as suggested above.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.eof&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ok, err = ngx.eof()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Explicitly specify the end of the response output stream. In the case of HTTP 1.1 chunked encoded output, it will just trigger the Nginx core to send out the &#34;last chunk&#34;.&lt;/p&gt; &#xA;&lt;p&gt;When you disable the HTTP 1.1 keep-alive feature for your downstream connections, you can rely on well written HTTP clients to close the connection actively for you when you call this method. This trick can be used do back-ground jobs without letting the HTTP clients to wait on the connection, as in the following example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; location = /async {&#xA;     keepalive_timeout 0;&#xA;     content_by_lua_block {&#xA;         ngx.say(&#34;got the task!&#34;)&#xA;         ngx.eof()  -- well written HTTP clients will close the connection at this point&#xA;         -- access MySQL, PostgreSQL, Redis, Memcached, and etc here...&#xA;     }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But if you create subrequests to access other locations configured by Nginx upstream modules, then you should configure those upstream modules to ignore client connection abortions if they are not by default. For example, by default the standard &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_proxy_module.html&#34;&gt;ngx_http_proxy_module&lt;/a&gt; will terminate both the subrequest and the main request as soon as the client closes the connection, so it is important to turn on the &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_ignore_client_abort&#34;&gt;proxy_ignore_client_abort&lt;/a&gt; directive in your location block configured by &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_proxy_module.html&#34;&gt;ngx_http_proxy_module&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; proxy_ignore_client_abort on;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A better way to do background jobs is to use the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxtimerat&#34;&gt;ngx.timer.at&lt;/a&gt; API.&lt;/p&gt; &#xA;&lt;p&gt;Since &lt;code&gt;v0.8.3&lt;/code&gt; this function returns &lt;code&gt;1&lt;/code&gt; on success, or returns &lt;code&gt;nil&lt;/code&gt; and a string describing the error otherwise.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.sleep&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ngx.sleep(seconds)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*, ngx.timer.*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sleeps for the specified seconds without blocking. One can specify time resolution up to 0.001 seconds (i.e., one millisecond).&lt;/p&gt; &#xA;&lt;p&gt;Behind the scene, this method makes use of the Nginx timers.&lt;/p&gt; &#xA;&lt;p&gt;Since the &lt;code&gt;0.7.20&lt;/code&gt; release, The &lt;code&gt;0&lt;/code&gt; time argument can also be specified.&lt;/p&gt; &#xA;&lt;p&gt;This method was introduced in the &lt;code&gt;0.5.0rc30&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.escape_uri&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;newstr = ngx.escape_uri(str, type?)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_by_lua*, init_worker_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, exit_worker_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Since &lt;code&gt;v0.10.16&lt;/code&gt;, this function accepts an optional &lt;code&gt;type&lt;/code&gt; argument. It accepts the following values (defaults to &lt;code&gt;2&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;0&lt;/code&gt;: escapes &lt;code&gt;str&lt;/code&gt; as a full URI. And the characters &lt;code&gt; &lt;/code&gt; (space), &lt;code&gt;#&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;?&lt;/code&gt;, 0x00 ~ 0x1F, 0x7F ~ 0xFF will be escaped.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;2&lt;/code&gt;: escape &lt;code&gt;str&lt;/code&gt; as a URI component. All characters except alphabetic characters, digits, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;_&lt;/code&gt;, &lt;code&gt;~&lt;/code&gt; will be encoded as &lt;code&gt;%XX&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.unescape_uri&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;newstr = ngx.unescape_uri(str)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_by_lua*, init_worker_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, exit_worker_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unescape &lt;code&gt;str&lt;/code&gt; as an escaped URI component.&lt;/p&gt; &#xA;&lt;p&gt;For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; ngx.say(ngx.unescape_uri(&#34;b%20r56+7&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;gives the output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;b r56 7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Invalid escaping sequences are handled in a conventional way: &lt;code&gt;%&lt;/code&gt;s are left unchanged. Also, characters that should not appear in escaped string are simply left unchanged.&lt;/p&gt; &#xA;&lt;p&gt;For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; ngx.say(ngx.unescape_uri(&#34;try %search%%20%again%&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;gives the output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;try %search% %again%&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(Note that &lt;code&gt;%20&lt;/code&gt; following &lt;code&gt;%&lt;/code&gt; got unescaped, even it can be considered a part of invalid sequence.)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.encode_args&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;str = ngx.encode_args(table)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Encode the Lua table to a query args string according to the URI encoded rules.&lt;/p&gt; &#xA;&lt;p&gt;For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; ngx.encode_args({foo = 3, [&#34;b r&#34;] = &#34;hello world&#34;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;yields&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;foo=3&amp;amp;b%20r=hello%20world&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The table keys must be Lua strings.&lt;/p&gt; &#xA;&lt;p&gt;Multi-value query args are also supported. Just use a Lua table for the argument&#39;s value, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; ngx.encode_args({baz = {32, &#34;hello&#34;}})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;gives&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;baz=32&amp;amp;baz=hello&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the value table is empty and the effect is equivalent to the &lt;code&gt;nil&lt;/code&gt; value.&lt;/p&gt; &#xA;&lt;p&gt;Boolean argument values are also supported, for instance,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; ngx.encode_args({a = true, b = 1})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;yields&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;a&amp;amp;b=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the argument value is &lt;code&gt;false&lt;/code&gt;, then the effect is equivalent to the &lt;code&gt;nil&lt;/code&gt; value.&lt;/p&gt; &#xA;&lt;p&gt;This method was first introduced in the &lt;code&gt;v0.3.1rc27&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.decode_args&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;table, err = ngx.decode_args(str, max_args?)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Decodes a URI encoded query-string into a Lua table. This is the inverse function of &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxencode_args&#34;&gt;ngx.encode_args&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The optional &lt;code&gt;max_args&lt;/code&gt; argument can be used to specify the maximum number of arguments parsed from the &lt;code&gt;str&lt;/code&gt; argument. By default, a maximum of 100 request arguments are parsed (including those with the same name) and that additional URI arguments are silently discarded to guard against potential denial of service attacks. Since &lt;code&gt;v0.10.13&lt;/code&gt;, when the limit is exceeded, it will return a second value which is the string &lt;code&gt;&#34;truncated&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This argument can be set to zero to remove the limit and to process all request arguments received:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local args = ngx.decode_args(str, 0)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Removing the &lt;code&gt;max_args&lt;/code&gt; cap is strongly discouraged.&lt;/p&gt; &#xA;&lt;p&gt;This method was introduced in the &lt;code&gt;v0.5.0rc29&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.encode_base64&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;newstr = ngx.encode_base64(str, no_padding?)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Encodes &lt;code&gt;str&lt;/code&gt; to a base64 digest.&lt;/p&gt; &#xA;&lt;p&gt;Since the &lt;code&gt;0.9.16&lt;/code&gt; release, an optional boolean-typed &lt;code&gt;no_padding&lt;/code&gt; argument can be specified to control whether the base64 padding should be appended to the resulting digest (default to &lt;code&gt;false&lt;/code&gt;, i.e., with padding enabled).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.decode_base64&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;newstr = ngx.decode_base64(str)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Decodes the &lt;code&gt;str&lt;/code&gt; argument as a base64 digest to the raw form. Returns &lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;str&lt;/code&gt; is not well formed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.crc32_short&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;intval = ngx.crc32_short(str)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Calculates the CRC-32 (Cyclic Redundancy Code) digest for the &lt;code&gt;str&lt;/code&gt; argument.&lt;/p&gt; &#xA;&lt;p&gt;This method performs better on relatively short &lt;code&gt;str&lt;/code&gt; inputs (i.e., less than 30 ~ 60 bytes), as compared to &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxcrc32_long&#34;&gt;ngx.crc32_long&lt;/a&gt;. The result is exactly the same as &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxcrc32_long&#34;&gt;ngx.crc32_long&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Behind the scene, it is just a thin wrapper around the &lt;code&gt;ngx_crc32_short&lt;/code&gt; function defined in the Nginx core.&lt;/p&gt; &#xA;&lt;p&gt;This API was first introduced in the &lt;code&gt;v0.3.1rc8&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.crc32_long&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;intval = ngx.crc32_long(str)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Calculates the CRC-32 (Cyclic Redundancy Code) digest for the &lt;code&gt;str&lt;/code&gt; argument.&lt;/p&gt; &#xA;&lt;p&gt;This method performs better on relatively long &lt;code&gt;str&lt;/code&gt; inputs (i.e., longer than 30 ~ 60 bytes), as compared to &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxcrc32_short&#34;&gt;ngx.crc32_short&lt;/a&gt;. The result is exactly the same as &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxcrc32_short&#34;&gt;ngx.crc32_short&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Behind the scene, it is just a thin wrapper around the &lt;code&gt;ngx_crc32_long&lt;/code&gt; function defined in the Nginx core.&lt;/p&gt; &#xA;&lt;p&gt;This API was first introduced in the &lt;code&gt;v0.3.1rc8&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.hmac_sha1&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;digest = ngx.hmac_sha1(secret_key, str)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Computes the &lt;a href=&#34;https://en.wikipedia.org/wiki/HMAC&#34;&gt;HMAC-SHA1&lt;/a&gt; digest of the argument &lt;code&gt;str&lt;/code&gt; and turns the result using the secret key &lt;code&gt;&amp;lt;secret_key&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The raw binary form of the &lt;code&gt;HMAC-SHA1&lt;/code&gt; digest will be generated, use &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxencode_base64&#34;&gt;ngx.encode_base64&lt;/a&gt;, for example, to encode the result to a textual representation if desired.&lt;/p&gt; &#xA;&lt;p&gt;For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local key = &#34;thisisverysecretstuff&#34;&#xA; local src = &#34;some string we want to sign&#34;&#xA; local digest = ngx.hmac_sha1(key, src)&#xA; ngx.say(ngx.encode_base64(digest))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;yields the output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;R/pvxzHC4NLtj7S+kXFg/NePTmk=&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This API requires the OpenSSL library enabled in the Nginx build (usually by passing the &lt;code&gt;--with-http_ssl_module&lt;/code&gt; option to the &lt;code&gt;./configure&lt;/code&gt; script).&lt;/p&gt; &#xA;&lt;p&gt;This function was first introduced in the &lt;code&gt;v0.3.1rc29&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.md5&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;digest = ngx.md5(str)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns the hexadecimal representation of the MD5 digest of the &lt;code&gt;str&lt;/code&gt; argument.&lt;/p&gt; &#xA;&lt;p&gt;For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; location = /md5 {&#xA;     content_by_lua_block {&#xA;         ngx.say(ngx.md5(&#34;hello&#34;))&#xA;     }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;yields the output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;5d41402abc4b2a76b9719d911017c592&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxmd5_bin&#34;&gt;ngx.md5_bin&lt;/a&gt; if the raw binary MD5 digest is required.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.md5_bin&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;digest = ngx.md5_bin(str)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns the binary form of the MD5 digest of the &lt;code&gt;str&lt;/code&gt; argument.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxmd5&#34;&gt;ngx.md5&lt;/a&gt; if the hexadecimal form of the MD5 digest is required.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.sha1_bin&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;digest = ngx.sha1_bin(str)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns the binary form of the SHA-1 digest of the &lt;code&gt;str&lt;/code&gt; argument.&lt;/p&gt; &#xA;&lt;p&gt;This function requires SHA-1 support in the Nginx build. (This usually just means OpenSSL should be installed while building Nginx).&lt;/p&gt; &#xA;&lt;p&gt;This function was first introduced in the &lt;code&gt;v0.5.0rc6&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.quote_sql_str&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;quoted_value = ngx.quote_sql_str(raw_value)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns a quoted SQL string literal according to the MySQL quoting rules.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.today&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;str = ngx.today()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_worker_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, exit_worker_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns current date (in the format &lt;code&gt;yyyy-mm-dd&lt;/code&gt;) from the Nginx cached time (no syscall involved unlike Lua&#39;s date library).&lt;/p&gt; &#xA;&lt;p&gt;This is the local time.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.time&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;secs = ngx.time()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_worker_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, exit_worker_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns the elapsed seconds from the epoch for the current time stamp from the Nginx cached time (no syscall involved unlike Lua&#39;s date library).&lt;/p&gt; &#xA;&lt;p&gt;Updates of the Nginx time cache can be forced by calling &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxupdate_time&#34;&gt;ngx.update_time&lt;/a&gt; first.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.now&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;secs = ngx.now()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_worker_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, exit_worker_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns a floating-point number for the elapsed time in seconds (including milliseconds as the decimal part) from the epoch for the current time stamp from the Nginx cached time (no syscall involved unlike Lua&#39;s date library).&lt;/p&gt; &#xA;&lt;p&gt;You can forcibly update the Nginx time cache by calling &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxupdate_time&#34;&gt;ngx.update_time&lt;/a&gt; first.&lt;/p&gt; &#xA;&lt;p&gt;This API was first introduced in &lt;code&gt;v0.3.1rc32&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.update_time&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ngx.update_time()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_worker_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, exit_worker_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Forcibly updates the Nginx current time cache. This call involves a syscall and thus has some overhead, so do not abuse it.&lt;/p&gt; &#xA;&lt;p&gt;This API was first introduced in &lt;code&gt;v0.3.1rc32&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.localtime&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;str = ngx.localtime()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_worker_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, exit_worker_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns the current time stamp (in the format &lt;code&gt;yyyy-mm-dd hh:mm:ss&lt;/code&gt;) of the Nginx cached time (no syscall involved unlike Lua&#39;s &lt;a href=&#34;https://www.lua.org/manual/5.1/manual.html#pdf-os.date&#34;&gt;os.date&lt;/a&gt; function).&lt;/p&gt; &#xA;&lt;p&gt;This is the local time.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.utctime&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;str = ngx.utctime()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_worker_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, exit_worker_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns the current time stamp (in the format &lt;code&gt;yyyy-mm-dd hh:mm:ss&lt;/code&gt;) of the Nginx cached time (no syscall involved unlike Lua&#39;s &lt;a href=&#34;https://www.lua.org/manual/5.1/manual.html#pdf-os.date&#34;&gt;os.date&lt;/a&gt; function).&lt;/p&gt; &#xA;&lt;p&gt;This is the UTC time.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.cookie_time&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;str = ngx.cookie_time(sec)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_worker_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, exit_worker_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns a formatted string can be used as the cookie expiration time. The parameter &lt;code&gt;sec&lt;/code&gt; is the time stamp in seconds (like those returned from &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxtime&#34;&gt;ngx.time&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; ngx.say(ngx.cookie_time(1290079655))&#xA;     -- yields &#34;Thu, 18-Nov-10 11:27:35 GMT&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.http_time&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;str = ngx.http_time(sec)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_worker_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, exit_worker_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns a formated string can be used as the http header time (for example, being used in &lt;code&gt;Last-Modified&lt;/code&gt; header). The parameter &lt;code&gt;sec&lt;/code&gt; is the time stamp in seconds (like those returned from &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxtime&#34;&gt;ngx.time&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; ngx.say(ngx.http_time(1290079655))&#xA;     -- yields &#34;Thu, 18 Nov 2010 11:27:35 GMT&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.parse_http_time&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;sec = ngx.parse_http_time(str)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_worker_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, exit_worker_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Parse the http time string (as returned by &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxhttp_time&#34;&gt;ngx.http_time&lt;/a&gt;) into seconds. Returns the seconds or &lt;code&gt;nil&lt;/code&gt; if the input string is in bad forms.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; local time = ngx.parse_http_time(&#34;Thu, 18 Nov 2010 11:27:35 GMT&#34;)&#xA; if time == nil then&#xA;     ...&#xA; end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.is_subrequest&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;value = ngx.is_subrequest&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns &lt;code&gt;true&lt;/code&gt; if the current request is an Nginx subrequest, or &lt;code&gt;false&lt;/code&gt; otherwise.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.re.match&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;captures, err = ngx.re.match(subject, regex, options?, ctx?, res_table?)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_worker_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, exit_worker_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Matches the &lt;code&gt;subject&lt;/code&gt; string using the Perl compatible regular expression &lt;code&gt;regex&lt;/code&gt; with the optional &lt;code&gt;options&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Only the first occurrence of the match is returned, or &lt;code&gt;nil&lt;/code&gt; if no match is found. In case of errors, like seeing a bad regular expression or exceeding the PCRE stack limit, &lt;code&gt;nil&lt;/code&gt; and a string describing the error will be returned.&lt;/p&gt; &#xA;&lt;p&gt;When a match is found, a Lua table &lt;code&gt;captures&lt;/code&gt; is returned, where &lt;code&gt;captures[0]&lt;/code&gt; holds the whole substring being matched, and &lt;code&gt;captures[1]&lt;/code&gt; holds the first parenthesized sub-pattern&#39;s capturing, &lt;code&gt;captures[2]&lt;/code&gt; the second, and so on.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local m, err = ngx.re.match(&#34;hello, 1234&#34;, &#34;[0-9]+&#34;)&#xA; if m then&#xA;     -- m[0] == &#34;1234&#34;&#xA;&#xA; else&#xA;     if err then&#xA;         ngx.log(ngx.ERR, &#34;error: &#34;, err)&#xA;         return&#xA;     end&#xA;&#xA;     ngx.say(&#34;match not found&#34;)&#xA; end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local m, err = ngx.re.match(&#34;hello, 1234&#34;, &#34;([0-9])[0-9]+&#34;)&#xA; -- m[0] == &#34;1234&#34;&#xA; -- m[1] == &#34;1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Named captures are also supported since the &lt;code&gt;v0.7.14&lt;/code&gt; release and are returned in the same Lua table as key-value pairs as the numbered captures.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local m, err = ngx.re.match(&#34;hello, 1234&#34;, &#34;([0-9])(?&amp;lt;remaining&amp;gt;[0-9]+)&#34;)&#xA; -- m[0] == &#34;1234&#34;&#xA; -- m[1] == &#34;1&#34;&#xA; -- m[2] == &#34;234&#34;&#xA; -- m[&#34;remaining&#34;] == &#34;234&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unmatched subpatterns will have &lt;code&gt;false&lt;/code&gt; values in their &lt;code&gt;captures&lt;/code&gt; table fields.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local m, err = ngx.re.match(&#34;hello, world&#34;, &#34;(world)|(hello)|(?&amp;lt;named&amp;gt;howdy)&#34;)&#xA; -- m[0] == &#34;hello&#34;&#xA; -- m[1] == false&#xA; -- m[2] == &#34;hello&#34;&#xA; -- m[3] == false&#xA; -- m[&#34;named&#34;] == false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Specify &lt;code&gt;options&lt;/code&gt; to control how the match operation will be performed. The following option characters are supported:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;a             anchored mode (only match from the beginning)&#xA;&#xA;d             enable the DFA mode (or the longest token match semantics).&#xA;              this requires PCRE 6.0+ or else a Lua exception will be thrown.&#xA;              first introduced in ngx_lua v0.3.1rc30.&#xA;&#xA;D             enable duplicate named pattern support. This allows named&#xA;              subpattern names to be repeated, returning the captures in&#xA;              an array-like Lua table. for example,&#xA;                local m = ngx.re.match(&#34;hello, world&#34;,&#xA;                                       &#34;(?&amp;lt;named&amp;gt;\w+), (?&amp;lt;named&amp;gt;\w+)&#34;,&#xA;                                       &#34;D&#34;)&#xA;                -- m[&#34;named&#34;] == {&#34;hello&#34;, &#34;world&#34;}&#xA;              this option was first introduced in the v0.7.14 release.&#xA;              this option requires at least PCRE 8.12.&#xA;&#xA;i             case insensitive mode (similar to Perl&#39;s /i modifier)&#xA;&#xA;j             enable PCRE JIT compilation, this requires PCRE 8.21+ which&#xA;              must be built with the --enable-jit option. for optimum performance,&#xA;              this option should always be used together with the &#39;o&#39; option.&#xA;              first introduced in ngx_lua v0.3.1rc30.&#xA;&#xA;J             enable the PCRE Javascript compatible mode. this option was&#xA;              first introduced in the v0.7.14 release. this option requires&#xA;              at least PCRE 8.12.&#xA;&#xA;m             multi-line mode (similar to Perl&#39;s /m modifier)&#xA;&#xA;o             compile-once mode (similar to Perl&#39;s /o modifier),&#xA;              to enable the worker-process-level compiled-regex cache&#xA;&#xA;s             single-line mode (similar to Perl&#39;s /s modifier)&#xA;&#xA;u             UTF-8 mode. this requires PCRE to be built with&#xA;              the --enable-utf8 option or else a Lua exception will be thrown.&#xA;&#xA;U             similar to &#34;u&#34; but disables PCRE&#39;s UTF-8 validity check on&#xA;              the subject string. first introduced in ngx_lua v0.8.1.&#xA;&#xA;x             extended mode (similar to Perl&#39;s /x modifier)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These options can be combined:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; local m, err = ngx.re.match(&#34;hello, world&#34;, &#34;HEL LO&#34;, &#34;ix&#34;)&#xA; -- m[0] == &#34;hello&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; local m, err = ngx.re.match(&#34;hello, 美好生活&#34;, &#34;HELLO, (.{2})&#34;, &#34;iu&#34;)&#xA; -- m[0] == &#34;hello, 美好&#34;&#xA; -- m[1] == &#34;美好&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;o&lt;/code&gt; option is useful for performance tuning, because the regex pattern in question will only be compiled once, cached in the worker-process level, and shared among all requests in the current Nginx worker process. The upper limit of the regex cache can be tuned via the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_regex_cache_max_entries&#34;&gt;lua_regex_cache_max_entries&lt;/a&gt; directive.&lt;/p&gt; &#xA;&lt;p&gt;The optional fourth argument, &lt;code&gt;ctx&lt;/code&gt;, can be a Lua table holding an optional &lt;code&gt;pos&lt;/code&gt; field. When the &lt;code&gt;pos&lt;/code&gt; field in the &lt;code&gt;ctx&lt;/code&gt; table argument is specified, &lt;code&gt;ngx.re.match&lt;/code&gt; will start matching from that offset (starting from 1). Regardless of the presence of the &lt;code&gt;pos&lt;/code&gt; field in the &lt;code&gt;ctx&lt;/code&gt; table, &lt;code&gt;ngx.re.match&lt;/code&gt; will always set this &lt;code&gt;pos&lt;/code&gt; field to the position &lt;em&gt;after&lt;/em&gt; the substring matched by the whole pattern in case of a successful match. When match fails, the &lt;code&gt;ctx&lt;/code&gt; table will be left intact.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local ctx = {}&#xA; local m, err = ngx.re.match(&#34;1234, hello&#34;, &#34;[0-9]+&#34;, &#34;&#34;, ctx)&#xA;      -- m[0] = &#34;1234&#34;&#xA;      -- ctx.pos == 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local ctx = { pos = 2 }&#xA; local m, err = ngx.re.match(&#34;1234, hello&#34;, &#34;[0-9]+&#34;, &#34;&#34;, ctx)&#xA;      -- m[0] = &#34;234&#34;&#xA;      -- ctx.pos == 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;ctx&lt;/code&gt; table argument combined with the &lt;code&gt;a&lt;/code&gt; regex modifier can be used to construct a lexer atop &lt;code&gt;ngx.re.match&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that, the &lt;code&gt;options&lt;/code&gt; argument is not optional when the &lt;code&gt;ctx&lt;/code&gt; argument is specified and that the empty Lua string (&lt;code&gt;&#34;&#34;&lt;/code&gt;) must be used as placeholder for &lt;code&gt;options&lt;/code&gt; if no meaningful regex options are required.&lt;/p&gt; &#xA;&lt;p&gt;This method requires the PCRE library enabled in Nginx (&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#special-escaping-sequences&#34;&gt;Known Issue With Special Escaping Sequences&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;To confirm that PCRE JIT is enabled, activate the Nginx debug log by adding the &lt;code&gt;--with-debug&lt;/code&gt; option to Nginx or OpenResty&#39;s &lt;code&gt;./configure&lt;/code&gt; script. Then, enable the &#34;debug&#34; error log level in &lt;code&gt;error_log&lt;/code&gt; directive. The following message will be generated if PCRE JIT is enabled:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pcre JIT compiling result: 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Starting from the &lt;code&gt;0.9.4&lt;/code&gt; release, this function also accepts a 5th argument, &lt;code&gt;res_table&lt;/code&gt;, for letting the caller supply the Lua table used to hold all the capturing results. Starting from &lt;code&gt;0.9.6&lt;/code&gt;, it is the caller&#39;s responsibility to ensure this table is empty. This is very useful for recycling Lua tables and saving GC and table allocation overhead.&lt;/p&gt; &#xA;&lt;p&gt;This feature was introduced in the &lt;code&gt;v0.2.1rc11&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.re.find&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;from, to, err = ngx.re.find(subject, regex, options?, ctx?, nth?)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_worker_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, exit_worker_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Similar to &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxrematch&#34;&gt;ngx.re.match&lt;/a&gt; but only returns the beginning index (&lt;code&gt;from&lt;/code&gt;) and end index (&lt;code&gt;to&lt;/code&gt;) of the matched substring. The returned indexes are 1-based and can be fed directly into the &lt;a href=&#34;https://www.lua.org/manual/5.1/manual.html#pdf-string.sub&#34;&gt;string.sub&lt;/a&gt; API function to obtain the matched substring.&lt;/p&gt; &#xA;&lt;p&gt;In case of errors (like bad regexes or any PCRE runtime errors), this API function returns two &lt;code&gt;nil&lt;/code&gt; values followed by a string describing the error.&lt;/p&gt; &#xA;&lt;p&gt;If no match is found, this function just returns a &lt;code&gt;nil&lt;/code&gt; value.&lt;/p&gt; &#xA;&lt;p&gt;Below is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local s = &#34;hello, 1234&#34;&#xA; local from, to, err = ngx.re.find(s, &#34;([0-9]+)&#34;, &#34;jo&#34;)&#xA; if from then&#xA;     ngx.say(&#34;from: &#34;, from)&#xA;     ngx.say(&#34;to: &#34;, to)&#xA;     ngx.say(&#34;matched: &#34;, string.sub(s, from, to))&#xA; else&#xA;     if err then&#xA;         ngx.say(&#34;error: &#34;, err)&#xA;         return&#xA;     end&#xA;     ngx.say(&#34;not matched!&#34;)&#xA; end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This example produces the output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;from: 8&#xA;to: 11&#xA;matched: 1234&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Because this API function does not create new Lua strings nor new Lua tables, it is much faster than &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxrematch&#34;&gt;ngx.re.match&lt;/a&gt;. It should be used wherever possible.&lt;/p&gt; &#xA;&lt;p&gt;Since the &lt;code&gt;0.9.3&lt;/code&gt; release, an optional 5th argument, &lt;code&gt;nth&lt;/code&gt;, is supported to specify which (submatch) capture&#39;s indexes to return. When &lt;code&gt;nth&lt;/code&gt; is 0 (which is the default), the indexes for the whole matched substring is returned; when &lt;code&gt;nth&lt;/code&gt; is 1, then the 1st submatch capture&#39;s indexes are returned; when &lt;code&gt;nth&lt;/code&gt; is 2, then the 2nd submatch capture is returned, and so on. When the specified submatch does not have a match, then two &lt;code&gt;nil&lt;/code&gt; values will be returned. Below is an example for this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local str = &#34;hello, 1234&#34;&#xA; local from, to = ngx.re.find(str, &#34;([0-9])([0-9]+)&#34;, &#34;jo&#34;, nil, 2)&#xA; if from then&#xA;     ngx.say(&#34;matched 2nd submatch: &#34;, string.sub(str, from, to))  -- yields &#34;234&#34;&#xA; end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This API function was first introduced in the &lt;code&gt;v0.9.2&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.re.gmatch&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;iterator, err = ngx.re.gmatch(subject, regex, options?)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_worker_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, exit_worker_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Similar to &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxrematch&#34;&gt;ngx.re.match&lt;/a&gt;, but returns a Lua iterator instead, so as to let the user programmer iterate all the matches over the &lt;code&gt;&amp;lt;subject&amp;gt;&lt;/code&gt; string argument with the PCRE &lt;code&gt;regex&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In case of errors, like seeing an ill-formed regular expression, &lt;code&gt;nil&lt;/code&gt; and a string describing the error will be returned.&lt;/p&gt; &#xA;&lt;p&gt;Here is a small example to demonstrate its basic usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local iterator, err = ngx.re.gmatch(&#34;hello, world!&#34;, &#34;([a-z]+)&#34;, &#34;i&#34;)&#xA; if not iterator then&#xA;     ngx.log(ngx.ERR, &#34;error: &#34;, err)&#xA;     return&#xA; end&#xA;&#xA; local m&#xA; m, err = iterator()    -- m[0] == m[1] == &#34;hello&#34;&#xA; if err then&#xA;     ngx.log(ngx.ERR, &#34;error: &#34;, err)&#xA;     return&#xA; end&#xA;&#xA; m, err = iterator()    -- m[0] == m[1] == &#34;world&#34;&#xA; if err then&#xA;     ngx.log(ngx.ERR, &#34;error: &#34;, err)&#xA;     return&#xA; end&#xA;&#xA; m, err = iterator()    -- m == nil&#xA; if err then&#xA;     ngx.log(ngx.ERR, &#34;error: &#34;, err)&#xA;     return&#xA; end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More often we just put it into a Lua loop:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local it, err = ngx.re.gmatch(&#34;hello, world!&#34;, &#34;([a-z]+)&#34;, &#34;i&#34;)&#xA; if not it then&#xA;     ngx.log(ngx.ERR, &#34;error: &#34;, err)&#xA;     return&#xA; end&#xA;&#xA; while true do&#xA;     local m, err = it()&#xA;     if err then&#xA;         ngx.log(ngx.ERR, &#34;error: &#34;, err)&#xA;         return&#xA;     end&#xA;&#xA;     if not m then&#xA;         -- no match found (any more)&#xA;         break&#xA;     end&#xA;&#xA;     -- found a match&#xA;     ngx.say(m[0])&#xA;     ngx.say(m[1])&#xA; end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The optional &lt;code&gt;options&lt;/code&gt; argument takes exactly the same semantics as the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxrematch&#34;&gt;ngx.re.match&lt;/a&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;The current implementation requires that the iterator returned should only be used in a single request. That is, one should &lt;em&gt;not&lt;/em&gt; assign it to a variable belonging to persistent namespace like a Lua package.&lt;/p&gt; &#xA;&lt;p&gt;This method requires the PCRE library enabled in Nginx (&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#special-escaping-sequences&#34;&gt;Known Issue With Special Escaping Sequences&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;This feature was first introduced in the &lt;code&gt;v0.2.1rc12&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.re.sub&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;newstr, n, err = ngx.re.sub(subject, regex, replace, options?)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_worker_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, exit_worker_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Substitutes the first match of the Perl compatible regular expression &lt;code&gt;regex&lt;/code&gt; on the &lt;code&gt;subject&lt;/code&gt; argument string with the string or function argument &lt;code&gt;replace&lt;/code&gt;. The optional &lt;code&gt;options&lt;/code&gt; argument has exactly the same meaning as in &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxrematch&#34;&gt;ngx.re.match&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This method returns the resulting new string as well as the number of successful substitutions. In case of failures, like syntax errors in the regular expressions or the &lt;code&gt;&amp;lt;replace&amp;gt;&lt;/code&gt; string argument, it will return &lt;code&gt;nil&lt;/code&gt; and a string describing the error.&lt;/p&gt; &#xA;&lt;p&gt;When the &lt;code&gt;replace&lt;/code&gt; is a string, then it is treated as a special template for string replacement. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local newstr, n, err = ngx.re.sub(&#34;hello, 1234&#34;, &#34;([0-9])[0-9]&#34;, &#34;[$0][$1]&#34;)&#xA; if not newstr then&#xA;     ngx.log(ngx.ERR, &#34;error: &#34;, err)&#xA;     return&#xA; end&#xA;&#xA; -- newstr == &#34;hello, [12][1]34&#34;&#xA; -- n == 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where &lt;code&gt;$0&lt;/code&gt; referring to the whole substring matched by the pattern and &lt;code&gt;$1&lt;/code&gt; referring to the first parenthesized capturing substring.&lt;/p&gt; &#xA;&lt;p&gt;Curly braces can also be used to disambiguate variable names from the background string literals:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local newstr, n, err = ngx.re.sub(&#34;hello, 1234&#34;, &#34;[0-9]&#34;, &#34;${0}00&#34;)&#xA; -- newstr == &#34;hello, 100234&#34;&#xA; -- n == 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Literal dollar sign characters (&lt;code&gt;$&lt;/code&gt;) in the &lt;code&gt;replace&lt;/code&gt; string argument can be escaped by another dollar sign, for instance,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local newstr, n, err = ngx.re.sub(&#34;hello, 1234&#34;, &#34;[0-9]&#34;, &#34;$$&#34;)&#xA; -- newstr == &#34;hello, $234&#34;&#xA; -- n == 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Do not use backlashes to escape dollar signs; it will not work as expected.&lt;/p&gt; &#xA;&lt;p&gt;When the &lt;code&gt;replace&lt;/code&gt; argument is of type &#34;function&#34;, then it will be invoked with the &#34;match table&#34; as the argument to generate the replace string literal for substitution. The &#34;match table&#34; fed into the &lt;code&gt;replace&lt;/code&gt; function is exactly the same as the return value of &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxrematch&#34;&gt;ngx.re.match&lt;/a&gt;. Here is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local func = function (m)&#xA;     return &#34;[&#34; .. m[0] .. &#34;][&#34; .. m[1] .. &#34;]&#34;&#xA; end&#xA;&#xA; local newstr, n, err = ngx.re.sub(&#34;hello, 1234&#34;, &#34;( [0-9] ) [0-9]&#34;, func, &#34;x&#34;)&#xA; -- newstr == &#34;hello, [12][1]34&#34;&#xA; -- n == 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The dollar sign characters in the return value of the &lt;code&gt;replace&lt;/code&gt; function argument are not special at all.&lt;/p&gt; &#xA;&lt;p&gt;This method requires the PCRE library enabled in Nginx (&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#special-escaping-sequences&#34;&gt;Known Issue With Special Escaping Sequences&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;This feature was first introduced in the &lt;code&gt;v0.2.1rc13&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.re.gsub&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;newstr, n, err = ngx.re.gsub(subject, regex, replace, options?)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_worker_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, exit_worker_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Just like &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxresub&#34;&gt;ngx.re.sub&lt;/a&gt;, but does global substitution.&lt;/p&gt; &#xA;&lt;p&gt;Here is some examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local newstr, n, err = ngx.re.gsub(&#34;hello, world&#34;, &#34;([a-z])[a-z]+&#34;, &#34;[$0,$1]&#34;, &#34;i&#34;)&#xA; if not newstr then&#xA;     ngx.log(ngx.ERR, &#34;error: &#34;, err)&#xA;     return&#xA; end&#xA;&#xA; -- newstr == &#34;[hello,h], [world,w]&#34;&#xA; -- n == 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local func = function (m)&#xA;     return &#34;[&#34; .. m[0] .. &#34;,&#34; .. m[1] .. &#34;]&#34;&#xA; end&#xA; local newstr, n, err = ngx.re.gsub(&#34;hello, world&#34;, &#34;([a-z])[a-z]+&#34;, func, &#34;i&#34;)&#xA; -- newstr == &#34;[hello,h], [world,w]&#34;&#xA; -- n == 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This method requires the PCRE library enabled in Nginx (&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#special-escaping-sequences&#34;&gt;Known Issue With Special Escaping Sequences&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;This feature was first introduced in the &lt;code&gt;v0.2.1rc15&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.shared.DICT&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;dict = ngx.shared.DICT&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;dict = ngx.shared[name_var]&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_by_lua*, init_worker_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, exit_worker_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Fetching the shm-based Lua dictionary object for the shared memory zone named &lt;code&gt;DICT&lt;/code&gt; defined by the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_shared_dict&#34;&gt;lua_shared_dict&lt;/a&gt; directive.&lt;/p&gt; &#xA;&lt;p&gt;Shared memory zones are always shared by all the Nginx worker processes in the current Nginx server instance.&lt;/p&gt; &#xA;&lt;p&gt;The resulting object &lt;code&gt;dict&lt;/code&gt; has the following methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictget&#34;&gt;get&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictget_stale&#34;&gt;get_stale&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictset&#34;&gt;set&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictsafe_set&#34;&gt;safe_set&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictadd&#34;&gt;add&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictsafe_add&#34;&gt;safe_add&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictreplace&#34;&gt;replace&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictdelete&#34;&gt;delete&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictincr&#34;&gt;incr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictlpush&#34;&gt;lpush&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictrpush&#34;&gt;rpush&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictlpop&#34;&gt;lpop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictrpop&#34;&gt;rpop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictllen&#34;&gt;llen&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictttl&#34;&gt;ttl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictexpire&#34;&gt;expire&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictflush_all&#34;&gt;flush_all&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictflush_expired&#34;&gt;flush_expired&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictget_keys&#34;&gt;get_keys&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictcapacity&#34;&gt;capacity&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictfree_space&#34;&gt;free_space&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All these methods are &lt;em&gt;atomic&lt;/em&gt; operations, that is, safe from concurrent accesses from multiple Nginx worker processes for the same &lt;code&gt;lua_shared_dict&lt;/code&gt; zone.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; http {&#xA;     lua_shared_dict dogs 10m;&#xA;     server {&#xA;         location /set {&#xA;             content_by_lua_block {&#xA;                 local dogs = ngx.shared.dogs&#xA;                 dogs:set(&#34;Jim&#34;, 8)&#xA;                 ngx.say(&#34;STORED&#34;)&#xA;             }&#xA;         }&#xA;         location /get {&#xA;             content_by_lua_block {&#xA;                 local dogs = ngx.shared.dogs&#xA;                 ngx.say(dogs:get(&#34;Jim&#34;))&#xA;             }&#xA;         }&#xA;     }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let us test it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA; $ curl localhost/set&#xA; STORED&#xA;&#xA; $ curl localhost/get&#xA; 8&#xA;&#xA; $ curl localhost/get&#xA; 8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The number &lt;code&gt;8&lt;/code&gt; will be consistently output when accessing &lt;code&gt;/get&lt;/code&gt; regardless of how many Nginx workers there are because the &lt;code&gt;dogs&lt;/code&gt; dictionary resides in the shared memory and visible to &lt;em&gt;all&lt;/em&gt; of the worker processes.&lt;/p&gt; &#xA;&lt;p&gt;The shared dictionary will retain its contents through a server config reload (either by sending the &lt;code&gt;HUP&lt;/code&gt; signal to the Nginx process or by using the &lt;code&gt;-s reload&lt;/code&gt; command-line option).&lt;/p&gt; &#xA;&lt;p&gt;The contents in the dictionary storage will be lost, however, when the Nginx server quits.&lt;/p&gt; &#xA;&lt;p&gt;This feature was first introduced in the &lt;code&gt;v0.3.1rc22&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.shared.DICT.get&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;value, flags = ngx.shared.DICT:get(key)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Retrieving the value in the dictionary &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt; for the key &lt;code&gt;key&lt;/code&gt;. If the key does not exist or has expired, then &lt;code&gt;nil&lt;/code&gt; will be returned.&lt;/p&gt; &#xA;&lt;p&gt;In case of errors, &lt;code&gt;nil&lt;/code&gt; and a string describing the error will be returned.&lt;/p&gt; &#xA;&lt;p&gt;The value returned will have the original data type when they were inserted into the dictionary, for example, Lua booleans, numbers, or strings.&lt;/p&gt; &#xA;&lt;p&gt;The first argument to this method must be the dictionary object itself, for example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local cats = ngx.shared.cats&#xA; local value, flags = cats.get(cats, &#34;Marry&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or use Lua&#39;s syntactic sugar for method calls:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local cats = ngx.shared.cats&#xA; local value, flags = cats:get(&#34;Marry&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These two forms are fundamentally equivalent.&lt;/p&gt; &#xA;&lt;p&gt;If the user flags is &lt;code&gt;0&lt;/code&gt; (the default), then no flags value will be returned.&lt;/p&gt; &#xA;&lt;p&gt;This feature was first introduced in the &lt;code&gt;v0.3.1rc22&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.shared.DICT.get_stale&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;value, flags, stale = ngx.shared.DICT:get_stale(key)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Similar to the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictget&#34;&gt;get&lt;/a&gt; method but returns the value even if the key has already expired.&lt;/p&gt; &#xA;&lt;p&gt;Returns a 3rd value, &lt;code&gt;stale&lt;/code&gt;, indicating whether the key has expired or not.&lt;/p&gt; &#xA;&lt;p&gt;Note that the value of an expired key is not guaranteed to be available so one should never rely on the availability of expired items.&lt;/p&gt; &#xA;&lt;p&gt;This method was first introduced in the &lt;code&gt;0.8.6&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.shared.DICT.set&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;success, err, forcible = ngx.shared.DICT:set(key, value, exptime?, flags?)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unconditionally sets a key-value pair into the shm-based dictionary &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt;. Returns three values:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;success&lt;/code&gt;: boolean value to indicate whether the key-value pair is stored or not.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;err&lt;/code&gt;: textual error message, can be &lt;code&gt;&#34;no memory&#34;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;forcible&lt;/code&gt;: a boolean value to indicate whether other valid items have been removed forcibly when out of storage in the shared memory zone.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;value&lt;/code&gt; argument inserted can be Lua booleans, numbers, strings, or &lt;code&gt;nil&lt;/code&gt;. Their value type will also be stored into the dictionary and the same data type can be retrieved later via the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictget&#34;&gt;get&lt;/a&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;The optional &lt;code&gt;exptime&lt;/code&gt; argument specifies expiration time (in seconds) for the inserted key-value pair. The time resolution is &lt;code&gt;0.001&lt;/code&gt; seconds. If the &lt;code&gt;exptime&lt;/code&gt; takes the value &lt;code&gt;0&lt;/code&gt; (which is the default), then the item will never expire.&lt;/p&gt; &#xA;&lt;p&gt;The optional &lt;code&gt;flags&lt;/code&gt; argument specifies a user flags value associated with the entry to be stored. It can also be retrieved later with the value. The user flags is stored as an unsigned 32-bit integer internally. Defaults to &lt;code&gt;0&lt;/code&gt;. The user flags argument was first introduced in the &lt;code&gt;v0.5.0rc2&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;When it fails to allocate memory for the current key-value item, then &lt;code&gt;set&lt;/code&gt; will try removing existing items in the storage according to the Least-Recently Used (LRU) algorithm. Note that, LRU takes priority over expiration time here. If up to tens of existing items have been removed and the storage left is still insufficient (either due to the total capacity limit specified by &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_shared_dict&#34;&gt;lua_shared_dict&lt;/a&gt; or memory segmentation), then the &lt;code&gt;err&lt;/code&gt; return value will be &lt;code&gt;no memory&lt;/code&gt; and &lt;code&gt;success&lt;/code&gt; will be &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If the sizes of items in the dictionary are not multiples or even powers of a certain value (like 2), it is easier to encounter &lt;code&gt;no memory&lt;/code&gt; error because of memory fragmentation. It is recommended to use different dictionaries for different sizes of items.&lt;/p&gt; &#xA;&lt;p&gt;When you encounter &lt;code&gt;no memory&lt;/code&gt; error, you can also evict more least-recently-used items by retrying this method call more times to to make room for the current item.&lt;/p&gt; &#xA;&lt;p&gt;If this method succeeds in storing the current item by forcibly removing other not-yet-expired items in the dictionary via LRU, the &lt;code&gt;forcible&lt;/code&gt; return value will be &lt;code&gt;true&lt;/code&gt;. If it stores the item without forcibly removing other valid items, then the return value &lt;code&gt;forcible&lt;/code&gt; will be &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The first argument to this method must be the dictionary object itself, for example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local cats = ngx.shared.cats&#xA; local succ, err, forcible = cats.set(cats, &#34;Marry&#34;, &#34;it is a nice cat!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or use Lua&#39;s syntactic sugar for method calls:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local cats = ngx.shared.cats&#xA; local succ, err, forcible = cats:set(&#34;Marry&#34;, &#34;it is a nice cat!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These two forms are fundamentally equivalent.&lt;/p&gt; &#xA;&lt;p&gt;This feature was first introduced in the &lt;code&gt;v0.3.1rc22&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;Please note that while internally the key-value pair is set atomically, the atomicity does not go across the method call boundary.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.shared.DICT.safe_set&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ok, err = ngx.shared.DICT:safe_set(key, value, exptime?, flags?)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Similar to the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictset&#34;&gt;set&lt;/a&gt; method, but never overrides the (least recently used) unexpired items in the store when running out of storage in the shared memory zone. In this case, it will immediately return &lt;code&gt;nil&lt;/code&gt; and the string &#34;no memory&#34;.&lt;/p&gt; &#xA;&lt;p&gt;This feature was first introduced in the &lt;code&gt;v0.7.18&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.shared.DICT.add&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;success, err, forcible = ngx.shared.DICT:add(key, value, exptime?, flags?)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Just like the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictset&#34;&gt;set&lt;/a&gt; method, but only stores the key-value pair into the dictionary &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt; if the key does &lt;em&gt;not&lt;/em&gt; exist.&lt;/p&gt; &#xA;&lt;p&gt;If the &lt;code&gt;key&lt;/code&gt; argument already exists in the dictionary (and not expired for sure), the &lt;code&gt;success&lt;/code&gt; return value will be &lt;code&gt;false&lt;/code&gt; and the &lt;code&gt;err&lt;/code&gt; return value will be &lt;code&gt;&#34;exists&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This feature was first introduced in the &lt;code&gt;v0.3.1rc22&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.shared.DICT.safe_add&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ok, err = ngx.shared.DICT:safe_add(key, value, exptime?, flags?)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Similar to the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictadd&#34;&gt;add&lt;/a&gt; method, but never overrides the (least recently used) unexpired items in the store when running out of storage in the shared memory zone. In this case, it will immediately return &lt;code&gt;nil&lt;/code&gt; and the string &#34;no memory&#34;.&lt;/p&gt; &#xA;&lt;p&gt;This feature was first introduced in the &lt;code&gt;v0.7.18&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.shared.DICT.replace&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;success, err, forcible = ngx.shared.DICT:replace(key, value, exptime?, flags?)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Just like the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictset&#34;&gt;set&lt;/a&gt; method, but only stores the key-value pair into the dictionary &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt; if the key &lt;em&gt;does&lt;/em&gt; exist.&lt;/p&gt; &#xA;&lt;p&gt;If the &lt;code&gt;key&lt;/code&gt; argument does &lt;em&gt;not&lt;/em&gt; exist in the dictionary (or expired already), the &lt;code&gt;success&lt;/code&gt; return value will be &lt;code&gt;false&lt;/code&gt; and the &lt;code&gt;err&lt;/code&gt; return value will be &lt;code&gt;&#34;not found&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This feature was first introduced in the &lt;code&gt;v0.3.1rc22&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.shared.DICT.delete&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ngx.shared.DICT:delete(key)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unconditionally removes the key-value pair from the shm-based dictionary &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is equivalent to &lt;code&gt;ngx.shared.DICT:set(key, nil)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This feature was first introduced in the &lt;code&gt;v0.3.1rc22&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.shared.DICT.incr&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;newval, err, forcible? = ngx.shared.DICT:incr(key, value, init?, init_ttl?)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;optional requirement:&lt;/strong&gt; &lt;code&gt;resty.core.shdict&lt;/code&gt; or &lt;code&gt;resty.core&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Increments the (numerical) value for &lt;code&gt;key&lt;/code&gt; in the shm-based dictionary &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt; by the step value &lt;code&gt;value&lt;/code&gt;. Returns the new resulting number if the operation is successfully completed or &lt;code&gt;nil&lt;/code&gt; and an error message otherwise.&lt;/p&gt; &#xA;&lt;p&gt;When the key does not exist or has already expired in the shared dictionary,&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;if the &lt;code&gt;init&lt;/code&gt; argument is not specified or takes the value &lt;code&gt;nil&lt;/code&gt;, this method will return &lt;code&gt;nil&lt;/code&gt; and the error string &lt;code&gt;&#34;not found&#34;&lt;/code&gt;, or&lt;/li&gt; &#xA; &lt;li&gt;if the &lt;code&gt;init&lt;/code&gt; argument takes a number value, this method will create a new &lt;code&gt;key&lt;/code&gt; with the value &lt;code&gt;init + value&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Like the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictadd&#34;&gt;add&lt;/a&gt; method, it also overrides the (least recently used) unexpired items in the store when running out of storage in the shared memory zone.&lt;/p&gt; &#xA;&lt;p&gt;The optional &lt;code&gt;init_ttl&lt;/code&gt; argument specifies expiration time (in seconds) of the value when it is initialized via the &lt;code&gt;init&lt;/code&gt; argument. The time resolution is &lt;code&gt;0.001&lt;/code&gt; seconds. If &lt;code&gt;init_ttl&lt;/code&gt; takes the value &lt;code&gt;0&lt;/code&gt; (which is the default), then the item will never expire. This argument cannot be provided without providing the &lt;code&gt;init&lt;/code&gt; argument as well, and has no effect if the value already exists (e.g., if it was previously inserted via &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictset&#34;&gt;set&lt;/a&gt; or the likes).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Usage of the &lt;code&gt;init_ttl&lt;/code&gt; argument requires the &lt;code&gt;resty.core.shdict&lt;/code&gt; or &lt;code&gt;resty.core&lt;/code&gt; modules from the &lt;a href=&#34;https://github.com/openresty/lua-resty-core&#34;&gt;lua-resty-core&lt;/a&gt; library. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; require &#34;resty.core&#34;&#xA;&#xA; local cats = ngx.shared.cats&#xA; local newval, err = cats:incr(&#34;black_cats&#34;, 1, 0, 0.1)&#xA;&#xA; print(newval) -- 1&#xA;&#xA; ngx.sleep(0.2)&#xA;&#xA; local val, err = cats:get(&#34;black_cats&#34;)&#xA; print(val) -- nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;forcible&lt;/code&gt; return value will always be &lt;code&gt;nil&lt;/code&gt; when the &lt;code&gt;init&lt;/code&gt; argument is not specified.&lt;/p&gt; &#xA;&lt;p&gt;If this method succeeds in storing the current item by forcibly removing other not-yet-expired items in the dictionary via LRU, the &lt;code&gt;forcible&lt;/code&gt; return value will be &lt;code&gt;true&lt;/code&gt;. If it stores the item without forcibly removing other valid items, then the return value &lt;code&gt;forcible&lt;/code&gt; will be &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If the original value is not a valid Lua number in the dictionary, it will return &lt;code&gt;nil&lt;/code&gt; and &lt;code&gt;&#34;not a number&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;value&lt;/code&gt; argument and &lt;code&gt;init&lt;/code&gt; argument can be any valid Lua numbers, like negative numbers or floating-point numbers.&lt;/p&gt; &#xA;&lt;p&gt;This method was first introduced in the &lt;code&gt;v0.3.1rc22&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;The optional &lt;code&gt;init&lt;/code&gt; parameter was first added in the &lt;code&gt;v0.10.6&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;The optional &lt;code&gt;init_ttl&lt;/code&gt; parameter was introduced in the &lt;code&gt;v0.10.12rc2&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.shared.DICT.lpush&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;length, err = ngx.shared.DICT:lpush(key, value)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Inserts the specified (numerical or string) &lt;code&gt;value&lt;/code&gt; at the head of the list named &lt;code&gt;key&lt;/code&gt; in the shm-based dictionary &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt;. Returns the number of elements in the list after the push operation.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;key&lt;/code&gt; does not exist, it is created as an empty list before performing the push operation. When the &lt;code&gt;key&lt;/code&gt; already takes a value that is not a list, it will return &lt;code&gt;nil&lt;/code&gt; and &lt;code&gt;&#34;value not a list&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It never overrides the (least recently used) unexpired items in the store when running out of storage in the shared memory zone. In this case, it will immediately return &lt;code&gt;nil&lt;/code&gt; and the string &#34;no memory&#34;.&lt;/p&gt; &#xA;&lt;p&gt;This feature was first introduced in the &lt;code&gt;v0.10.6&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.shared.DICT.rpush&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;length, err = ngx.shared.DICT:rpush(key, value)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Similar to the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictlpush&#34;&gt;lpush&lt;/a&gt; method, but inserts the specified (numerical or string) &lt;code&gt;value&lt;/code&gt; at the tail of the list named &lt;code&gt;key&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This feature was first introduced in the &lt;code&gt;v0.10.6&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.shared.DICT.lpop&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;val, err = ngx.shared.DICT:lpop(key)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Removes and returns the first element of the list named &lt;code&gt;key&lt;/code&gt; in the shm-based dictionary &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;key&lt;/code&gt; does not exist, it will return &lt;code&gt;nil&lt;/code&gt;. When the &lt;code&gt;key&lt;/code&gt; already takes a value that is not a list, it will return &lt;code&gt;nil&lt;/code&gt; and &lt;code&gt;&#34;value not a list&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This feature was first introduced in the &lt;code&gt;v0.10.6&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.shared.DICT.rpop&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;val, err = ngx.shared.DICT:rpop(key)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Removes and returns the last element of the list named &lt;code&gt;key&lt;/code&gt; in the shm-based dictionary &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;key&lt;/code&gt; does not exist, it will return &lt;code&gt;nil&lt;/code&gt;. When the &lt;code&gt;key&lt;/code&gt; already takes a value that is not a list, it will return &lt;code&gt;nil&lt;/code&gt; and &lt;code&gt;&#34;value not a list&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This feature was first introduced in the &lt;code&gt;v0.10.6&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.shared.DICT.llen&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;len, err = ngx.shared.DICT:llen(key)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns the number of elements in the list named &lt;code&gt;key&lt;/code&gt; in the shm-based dictionary &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If key does not exist, it is interpreted as an empty list and 0 is returned. When the &lt;code&gt;key&lt;/code&gt; already takes a value that is not a list, it will return &lt;code&gt;nil&lt;/code&gt; and &lt;code&gt;&#34;value not a list&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This feature was first introduced in the &lt;code&gt;v0.10.6&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.shared.DICT.ttl&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ttl, err = ngx.shared.DICT:ttl(key)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;requires:&lt;/strong&gt; &lt;code&gt;resty.core.shdict&lt;/code&gt; or &lt;code&gt;resty.core&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Retrieves the remaining TTL (time-to-live in seconds) of a key-value pair in the shm-based dictionary &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt;. Returns the TTL as a number if the operation is successfully completed or &lt;code&gt;nil&lt;/code&gt; and an error message otherwise.&lt;/p&gt; &#xA;&lt;p&gt;If the key does not exist (or has already expired), this method will return &lt;code&gt;nil&lt;/code&gt; and the error string &lt;code&gt;&#34;not found&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The TTL is originally determined by the &lt;code&gt;exptime&lt;/code&gt; argument of the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictset&#34;&gt;set&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictadd&#34;&gt;add&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictreplace&#34;&gt;replace&lt;/a&gt; (and the likes) methods. It has a time resolution of &lt;code&gt;0.001&lt;/code&gt; seconds. A value of &lt;code&gt;0&lt;/code&gt; means that the item will never expire.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; require &#34;resty.core&#34;&#xA;&#xA; local cats = ngx.shared.cats&#xA; local succ, err = cats:set(&#34;Marry&#34;, &#34;a nice cat&#34;, 0.5)&#xA;&#xA; ngx.sleep(0.2)&#xA;&#xA; local ttl, err = cats:ttl(&#34;Marry&#34;)&#xA; ngx.say(ttl) -- 0.3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This feature was first introduced in the &lt;code&gt;v0.10.11&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This method requires the &lt;code&gt;resty.core.shdict&lt;/code&gt; or &lt;code&gt;resty.core&lt;/code&gt; modules from the &lt;a href=&#34;https://github.com/openresty/lua-resty-core&#34;&gt;lua-resty-core&lt;/a&gt; library.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.shared.DICT.expire&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;success, err = ngx.shared.DICT:expire(key, exptime)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;requires:&lt;/strong&gt; &lt;code&gt;resty.core.shdict&lt;/code&gt; or &lt;code&gt;resty.core&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Updates the &lt;code&gt;exptime&lt;/code&gt; (in second) of a key-value pair in the shm-based dictionary &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt;. Returns a boolean indicating success if the operation completes or &lt;code&gt;nil&lt;/code&gt; and an error message otherwise.&lt;/p&gt; &#xA;&lt;p&gt;If the key does not exist, this method will return &lt;code&gt;nil&lt;/code&gt; and the error string &lt;code&gt;&#34;not found&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;exptime&lt;/code&gt; argument has a resolution of &lt;code&gt;0.001&lt;/code&gt; seconds. If &lt;code&gt;exptime&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;, then the item will never expire.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; require &#34;resty.core&#34;&#xA;&#xA; local cats = ngx.shared.cats&#xA; local succ, err = cats:set(&#34;Marry&#34;, &#34;a nice cat&#34;, 0.1)&#xA;&#xA; succ, err = cats:expire(&#34;Marry&#34;, 0.5)&#xA;&#xA; ngx.sleep(0.2)&#xA;&#xA; local val, err = cats:get(&#34;Marry&#34;)&#xA; ngx.say(val) -- &#34;a nice cat&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This feature was first introduced in the &lt;code&gt;v0.10.11&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This method requires the &lt;code&gt;resty.core.shdict&lt;/code&gt; or &lt;code&gt;resty.core&lt;/code&gt; modules from the &lt;a href=&#34;https://github.com/openresty/lua-resty-core&#34;&gt;lua-resty-core&lt;/a&gt; library.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.shared.DICT.flush_all&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ngx.shared.DICT:flush_all()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Flushes out all the items in the dictionary. This method does not actually free up all the memory blocks in the dictionary but just marks all the existing items as expired.&lt;/p&gt; &#xA;&lt;p&gt;This feature was first introduced in the &lt;code&gt;v0.5.0rc17&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictflush_expired&#34;&gt;ngx.shared.DICT.flush_expired&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.shared.DICT.flush_expired&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;flushed = ngx.shared.DICT:flush_expired(max_count?)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Flushes out the expired items in the dictionary, up to the maximal number specified by the optional &lt;code&gt;max_count&lt;/code&gt; argument. When the &lt;code&gt;max_count&lt;/code&gt; argument is given &lt;code&gt;0&lt;/code&gt; or not given at all, then it means unlimited. Returns the number of items that have actually been flushed.&lt;/p&gt; &#xA;&lt;p&gt;Unlike the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictflush_all&#34;&gt;flush_all&lt;/a&gt; method, this method actually frees up the memory used by the expired items.&lt;/p&gt; &#xA;&lt;p&gt;This feature was first introduced in the &lt;code&gt;v0.6.3&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddictflush_all&#34;&gt;ngx.shared.DICT.flush_all&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.shared.DICT.get_keys&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;keys = ngx.shared.DICT:get_keys(max_count?)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Fetch a list of the keys from the dictionary, up to &lt;code&gt;&amp;lt;max_count&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By default, only the first 1024 keys (if any) are returned. When the &lt;code&gt;&amp;lt;max_count&amp;gt;&lt;/code&gt; argument is given the value &lt;code&gt;0&lt;/code&gt;, then all the keys will be returned even there is more than 1024 keys in the dictionary.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;CAUTION&lt;/strong&gt; Avoid calling this method on dictionaries with a very large number of keys as it may lock the dictionary for significant amount of time and block Nginx worker processes trying to access the dictionary.&lt;/p&gt; &#xA;&lt;p&gt;This feature was first introduced in the &lt;code&gt;v0.7.3&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.shared.DICT.capacity&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;capacity_bytes = ngx.shared.DICT:capacity()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;requires:&lt;/strong&gt; &lt;code&gt;resty.core.shdict&lt;/code&gt; or &lt;code&gt;resty.core&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Retrieves the capacity in bytes for the shm-based dictionary &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt; declared with the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_shared_dict&#34;&gt;lua_shared_dict&lt;/a&gt; directive.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; require &#34;resty.core.shdict&#34;&#xA;&#xA; local cats = ngx.shared.cats&#xA; local capacity_bytes = cats:capacity()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This feature was first introduced in the &lt;code&gt;v0.10.11&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This method requires the &lt;code&gt;resty.core.shdict&lt;/code&gt; or &lt;code&gt;resty.core&lt;/code&gt; modules from the &lt;a href=&#34;https://github.com/openresty/lua-resty-core&#34;&gt;lua-resty-core&lt;/a&gt; library.&lt;/p&gt; &#xA;&lt;p&gt;This feature requires at least Nginx core version &lt;code&gt;0.7.3&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.shared.DICT.free_space&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;free_page_bytes = ngx.shared.DICT:free_space()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;requires:&lt;/strong&gt; &lt;code&gt;resty.core.shdict&lt;/code&gt; or &lt;code&gt;resty.core&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Retrieves the free page size in bytes for the shm-based dictionary &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The memory for ngx.shared.DICT is allocated via the Nginx slab allocator which has each slot for data size ranges like ~8, 9~16, 17~32, ..., 1025~2048, 2048~ bytes. And pages are assigned to a slot if there is no room in already assigned pages for the slot.&lt;/p&gt; &#xA;&lt;p&gt;So even if the return value of the &lt;code&gt;free_space&lt;/code&gt; method is zero, there may be room in already assigned pages, so you may successfully set a new key value pair to the shared dict without getting &lt;code&gt;true&lt;/code&gt; for &lt;code&gt;forcible&lt;/code&gt; or non nil &lt;code&gt;err&lt;/code&gt; from the &lt;code&gt;ngx.shared.DICT.set&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On the other hand, if already assigned pages for a slot are full and a new key value pair is added to the slot and there is no free page, you may get &lt;code&gt;true&lt;/code&gt; for &lt;code&gt;forcible&lt;/code&gt; or non nil &lt;code&gt;err&lt;/code&gt; from the &lt;code&gt;ngx.shared.DICT.set&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; require &#34;resty.core.shdict&#34;&#xA;&#xA; local cats = ngx.shared.cats&#xA; local free_page_bytes = cats:free_space()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This feature was first introduced in the &lt;code&gt;v0.10.11&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This method requires the &lt;code&gt;resty.core.shdict&lt;/code&gt; or &lt;code&gt;resty.core&lt;/code&gt; modules from the &lt;a href=&#34;https://github.com/openresty/lua-resty-core&#34;&gt;lua-resty-core&lt;/a&gt; library.&lt;/p&gt; &#xA;&lt;p&gt;This feature requires at least Nginx core version &lt;code&gt;1.11.7&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.socket.udp&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;udpsock = ngx.socket.udp()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*, ngx.timer.*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Creates and returns a UDP or datagram-oriented unix domain socket object (also known as one type of the &#34;cosocket&#34; objects). The following methods are supported on this object:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#udpsocksetpeername&#34;&gt;setpeername&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#udpsocksend&#34;&gt;send&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#udpsockreceive&#34;&gt;receive&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#udpsockclose&#34;&gt;close&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#udpsocksettimeout&#34;&gt;settimeout&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is intended to be compatible with the UDP API of the &lt;a href=&#34;http://w3.impa.br/~diego/software/luasocket/udp.html&#34;&gt;LuaSocket&lt;/a&gt; library but is 100% nonblocking out of the box.&lt;/p&gt; &#xA;&lt;p&gt;This feature was first introduced in the &lt;code&gt;v0.5.7&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsockettcp&#34;&gt;ngx.socket.tcp&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;udpsock:setpeername&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ok, err = udpsock:setpeername(host, port)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ok, err = udpsock:setpeername(&#34;unix:/path/to/unix-domain.socket&#34;)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*, ngx.timer.*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Attempts to connect a UDP socket object to a remote server or to a datagram unix domain socket file. Because the datagram protocol is actually connection-less, this method does not really establish a &#34;connection&#34;, but only just set the name of the remote peer for subsequent read/write operations.&lt;/p&gt; &#xA;&lt;p&gt;Both IP addresses and domain names can be specified as the &lt;code&gt;host&lt;/code&gt; argument. In case of domain names, this method will use Nginx core&#39;s dynamic resolver to parse the domain name without blocking and it is required to configure the &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_core_module.html#resolver&#34;&gt;resolver&lt;/a&gt; directive in the &lt;code&gt;nginx.conf&lt;/code&gt; file like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; resolver 8.8.8.8;  # use Google&#39;s public DNS nameserver&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the nameserver returns multiple IP addresses for the host name, this method will pick up one randomly.&lt;/p&gt; &#xA;&lt;p&gt;In case of error, the method returns &lt;code&gt;nil&lt;/code&gt; followed by a string describing the error. In case of success, the method returns &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example for connecting to a UDP (memcached) server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; location /test {&#xA;     resolver 8.8.8.8;&#xA;&#xA;     content_by_lua_block {&#xA;         local sock = ngx.socket.udp()&#xA;         local ok, err = sock:setpeername(&#34;my.memcached.server.domain&#34;, 11211)&#xA;         if not ok then&#xA;             ngx.say(&#34;failed to connect to memcached: &#34;, err)&#xA;             return&#xA;         end&#xA;         ngx.say(&#34;successfully connected to memcached!&#34;)&#xA;         sock:close()&#xA;     }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since the &lt;code&gt;v0.7.18&lt;/code&gt; release, connecting to a datagram unix domain socket file is also possible on Linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local sock = ngx.socket.udp()&#xA; local ok, err = sock:setpeername(&#34;unix:/tmp/some-datagram-service.sock&#34;)&#xA; if not ok then&#xA;     ngx.say(&#34;failed to connect to the datagram unix domain socket: &#34;, err)&#xA;     return&#xA; end&#xA;&#xA; -- do something after connect&#xA; -- such as sock:send or sock:receive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;assuming the datagram service is listening on the unix domain socket file &lt;code&gt;/tmp/some-datagram-service.sock&lt;/code&gt; and the client socket will use the &#34;autobind&#34; feature on Linux.&lt;/p&gt; &#xA;&lt;p&gt;Calling this method on an already connected socket object will cause the original connection to be closed first.&lt;/p&gt; &#xA;&lt;p&gt;This method was first introduced in the &lt;code&gt;v0.5.7&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;udpsock:send&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ok, err = udpsock:send(data)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*, ngx.timer.*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sends data on the current UDP or datagram unix domain socket object.&lt;/p&gt; &#xA;&lt;p&gt;In case of success, it returns &lt;code&gt;1&lt;/code&gt;. Otherwise, it returns &lt;code&gt;nil&lt;/code&gt; and a string describing the error.&lt;/p&gt; &#xA;&lt;p&gt;The input argument &lt;code&gt;data&lt;/code&gt; can either be a Lua string or a (nested) Lua table holding string fragments. In case of table arguments, this method will copy all the string elements piece by piece to the underlying Nginx socket send buffers, which is usually optimal than doing string concatenation operations on the Lua land.&lt;/p&gt; &#xA;&lt;p&gt;This feature was first introduced in the &lt;code&gt;v0.5.7&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;udpsock:receive&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;data, err = udpsock:receive(size?)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*, ngx.timer.*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Receives data from the UDP or datagram unix domain socket object with an optional receive buffer size argument, &lt;code&gt;size&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This method is a synchronous operation and is 100% nonblocking.&lt;/p&gt; &#xA;&lt;p&gt;In case of success, it returns the data received; in case of error, it returns &lt;code&gt;nil&lt;/code&gt; with a string describing the error.&lt;/p&gt; &#xA;&lt;p&gt;If the &lt;code&gt;size&lt;/code&gt; argument is specified, then this method will use this size as the receive buffer size. But when this size is greater than &lt;code&gt;8192&lt;/code&gt;, then &lt;code&gt;8192&lt;/code&gt; will be used instead.&lt;/p&gt; &#xA;&lt;p&gt;If no argument is specified, then the maximal buffer size, &lt;code&gt;8192&lt;/code&gt; is assumed.&lt;/p&gt; &#xA;&lt;p&gt;Timeout for the reading operation is controlled by the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_socket_read_timeout&#34;&gt;lua_socket_read_timeout&lt;/a&gt; config directive and the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#udpsocksettimeout&#34;&gt;settimeout&lt;/a&gt; method. And the latter takes priority. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; sock:settimeout(1000)  -- one second timeout&#xA; local data, err = sock:receive()&#xA; if not data then&#xA;     ngx.say(&#34;failed to read a packet: &#34;, err)&#xA;     return&#xA; end&#xA; ngx.say(&#34;successfully read a packet: &#34;, data)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is important here to call the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#udpsocksettimeout&#34;&gt;settimeout&lt;/a&gt; method &lt;em&gt;before&lt;/em&gt; calling this method.&lt;/p&gt; &#xA;&lt;p&gt;This feature was first introduced in the &lt;code&gt;v0.5.7&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;udpsock:close&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ok, err = udpsock:close()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*, ngx.timer.*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Closes the current UDP or datagram unix domain socket. It returns the &lt;code&gt;1&lt;/code&gt; in case of success and returns &lt;code&gt;nil&lt;/code&gt; with a string describing the error otherwise.&lt;/p&gt; &#xA;&lt;p&gt;Socket objects that have not invoked this method (and associated connections) will be closed when the socket object is released by the Lua GC (Garbage Collector) or the current client HTTP request finishes processing.&lt;/p&gt; &#xA;&lt;p&gt;This feature was first introduced in the &lt;code&gt;v0.5.7&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;udpsock:settimeout&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;udpsock:settimeout(time)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*, ngx.timer.*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Set the timeout value in milliseconds for subsequent socket operations (like &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#udpsockreceive&#34;&gt;receive&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Settings done by this method takes priority over those config directives, like &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_socket_read_timeout&#34;&gt;lua_socket_read_timeout&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This feature was first introduced in the &lt;code&gt;v0.5.7&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.socket.stream&lt;/h2&gt; &#xA;&lt;p&gt;Just an alias to &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsockettcp&#34;&gt;ngx.socket.tcp&lt;/a&gt;. If the stream-typed cosocket may also connect to a unix domain socket, then this API name is preferred.&lt;/p&gt; &#xA;&lt;p&gt;This API function was first added to the &lt;code&gt;v0.10.1&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.socket.tcp&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;tcpsock = ngx.socket.tcp()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*, ngx.timer.*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Creates and returns a TCP or stream-oriented unix domain socket object (also known as one type of the &#34;cosocket&#34; objects). The following methods are supported on this object:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsockconnect&#34;&gt;connect&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksetclientcert&#34;&gt;setclientcert&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksslhandshake&#34;&gt;sslhandshake&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksend&#34;&gt;send&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsockreceive&#34;&gt;receive&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsockclose&#34;&gt;close&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksettimeout&#34;&gt;settimeout&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksettimeouts&#34;&gt;settimeouts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksetoption&#34;&gt;setoption&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsockreceiveany&#34;&gt;receiveany&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsockreceiveuntil&#34;&gt;receiveuntil&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksetkeepalive&#34;&gt;setkeepalive&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsockgetreusedtimes&#34;&gt;getreusedtimes&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is intended to be compatible with the TCP API of the &lt;a href=&#34;http://w3.impa.br/~diego/software/luasocket/tcp.html&#34;&gt;LuaSocket&lt;/a&gt; library but is 100% nonblocking out of the box. Also, we introduce some new APIs to provide more functionalities.&lt;/p&gt; &#xA;&lt;p&gt;The cosocket object created by this API function has exactly the same lifetime as the Lua handler creating it. So never pass the cosocket object to any other Lua handler (including ngx.timer callback functions) and never share the cosocket object between different Nginx requests.&lt;/p&gt; &#xA;&lt;p&gt;For every cosocket object&#39;s underlying connection, if you do not explicitly close it (via &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsockclose&#34;&gt;close&lt;/a&gt;) or put it back to the connection pool (via &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksetkeepalive&#34;&gt;setkeepalive&lt;/a&gt;), then it is automatically closed when one of the following two events happens:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the current request handler completes, or&lt;/li&gt; &#xA; &lt;li&gt;the Lua cosocket object value gets collected by the Lua GC.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Fatal errors in cosocket operations always automatically close the current connection (note that, read timeout error is the only error that is not fatal), and if you call &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsockclose&#34;&gt;close&lt;/a&gt; on a closed connection, you will get the &#34;closed&#34; error.&lt;/p&gt; &#xA;&lt;p&gt;Starting from the &lt;code&gt;0.9.9&lt;/code&gt; release, the cosocket object here is full-duplex, that is, a reader &#34;light thread&#34; and a writer &#34;light thread&#34; can operate on a single cosocket object simultaneously (both &#34;light threads&#34; must belong to the same Lua handler though, see reasons above). But you cannot have two &#34;light threads&#34; both reading (or writing or connecting) the same cosocket, otherwise you might get an error like &#34;socket busy reading&#34; when calling the methods of the cosocket object.&lt;/p&gt; &#xA;&lt;p&gt;This feature was first introduced in the &lt;code&gt;v0.5.0rc1&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsocketudp&#34;&gt;ngx.socket.udp&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;tcpsock:connect&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ok, err = tcpsock:connect(host, port, options_table?)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ok, err = tcpsock:connect(&#34;unix:/path/to/unix-domain.socket&#34;, options_table?)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*, ngx.timer.*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Attempts to connect a TCP socket object to a remote server or to a stream unix domain socket file without blocking.&lt;/p&gt; &#xA;&lt;p&gt;Before actually resolving the host name and connecting to the remote backend, this method will always look up the connection pool for matched idle connections created by previous calls of this method (or the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsocketconnect&#34;&gt;ngx.socket.connect&lt;/a&gt; function).&lt;/p&gt; &#xA;&lt;p&gt;Both IP addresses and domain names can be specified as the &lt;code&gt;host&lt;/code&gt; argument. In case of domain names, this method will use Nginx core&#39;s dynamic resolver to parse the domain name without blocking and it is required to configure the &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_core_module.html#resolver&#34;&gt;resolver&lt;/a&gt; directive in the &lt;code&gt;nginx.conf&lt;/code&gt; file like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; resolver 8.8.8.8;  # use Google&#39;s public DNS nameserver&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the nameserver returns multiple IP addresses for the host name, this method will pick up one randomly.&lt;/p&gt; &#xA;&lt;p&gt;In case of error, the method returns &lt;code&gt;nil&lt;/code&gt; followed by a string describing the error. In case of success, the method returns &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example for connecting to a TCP server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; location /test {&#xA;     resolver 8.8.8.8;&#xA;&#xA;     content_by_lua_block {&#xA;         local sock = ngx.socket.tcp()&#xA;         local ok, err = sock:connect(&#34;www.google.com&#34;, 80)&#xA;         if not ok then&#xA;             ngx.say(&#34;failed to connect to google: &#34;, err)&#xA;             return&#xA;         end&#xA;         ngx.say(&#34;successfully connected to google!&#34;)&#xA;         sock:close()&#xA;     }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Connecting to a Unix Domain Socket file is also possible:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local sock = ngx.socket.tcp()&#xA; local ok, err = sock:connect(&#34;unix:/tmp/memcached.sock&#34;)&#xA; if not ok then&#xA;     ngx.say(&#34;failed to connect to the memcached unix domain socket: &#34;, err)&#xA;     return&#xA; end&#xA;&#xA; -- do something after connect&#xA; -- such as sock:send or sock:receive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;assuming memcached (or something else) is listening on the unix domain socket file &lt;code&gt;/tmp/memcached.sock&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Timeout for the connecting operation is controlled by the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_socket_connect_timeout&#34;&gt;lua_socket_connect_timeout&lt;/a&gt; config directive and the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksettimeout&#34;&gt;settimeout&lt;/a&gt; method. And the latter takes priority. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local sock = ngx.socket.tcp()&#xA; sock:settimeout(1000)  -- one second timeout&#xA; local ok, err = sock:connect(host, port)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is important here to call the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksettimeout&#34;&gt;settimeout&lt;/a&gt; method &lt;em&gt;before&lt;/em&gt; calling this method.&lt;/p&gt; &#xA;&lt;p&gt;Calling this method on an already connected socket object will cause the original connection to be closed first.&lt;/p&gt; &#xA;&lt;p&gt;An optional Lua table can be specified as the last argument to this method to specify various connect options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;pool&lt;/code&gt; specify a custom name for the connection pool being used. If omitted, then the connection pool name will be generated from the string template &lt;code&gt;&#34;&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;&#34;&lt;/code&gt; or &lt;code&gt;&#34;&amp;lt;unix-socket-path&amp;gt;&#34;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;pool_size&lt;/code&gt; specify the size of the connection pool. If omitted and no &lt;code&gt;backlog&lt;/code&gt; option was provided, no pool will be created. If omitted but &lt;code&gt;backlog&lt;/code&gt; was provided, the pool will be created with a default size equal to the value of the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_socket_pool_size&#34;&gt;lua_socket_pool_size&lt;/a&gt; directive. The connection pool holds up to &lt;code&gt;pool_size&lt;/code&gt; alive connections ready to be reused by subsequent calls to &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsockconnect&#34;&gt;connect&lt;/a&gt;, but note that there is no upper limit to the total number of opened connections outside of the pool. If you need to restrict the total number of opened connections, specify the &lt;code&gt;backlog&lt;/code&gt; option. When the connection pool would exceed its size limit, the least recently used (kept-alive) connection already in the pool will be closed to make room for the current connection. Note that the cosocket connection pool is per Nginx worker process rather than per Nginx server instance, so the size limit specified here also applies to every single Nginx worker process. Also note that the size of the connection pool cannot be changed once it has been created. This option was first introduced in the &lt;code&gt;v0.10.14&lt;/code&gt; release.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;backlog&lt;/code&gt; if specified, this module will limit the total number of opened connections for this pool. No more connections than &lt;code&gt;pool_size&lt;/code&gt; can be opened for this pool at any time. If the connection pool is full, subsequent connect operations will be queued into a queue equal to this option&#39;s value (the &#34;backlog&#34; queue). If the number of queued connect operations is equal to &lt;code&gt;backlog&lt;/code&gt;, subsequent connect operations will fail and return &lt;code&gt;nil&lt;/code&gt; plus the error string &lt;code&gt;&#34;too many waiting connect operations&#34;&lt;/code&gt;. The queued connect operations will be resumed once the number of connections in the pool is less than &lt;code&gt;pool_size&lt;/code&gt;. The queued connect operation will abort once they have been queued for more than &lt;code&gt;connect_timeout&lt;/code&gt;, controlled by &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksettimeouts&#34;&gt;settimeouts&lt;/a&gt;, and will return &lt;code&gt;nil&lt;/code&gt; plus the error string &lt;code&gt;&#34;timeout&#34;&lt;/code&gt;. This option was first introduced in the &lt;code&gt;v0.10.14&lt;/code&gt; release.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The support for the options table argument was first introduced in the &lt;code&gt;v0.5.7&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;This method was first introduced in the &lt;code&gt;v0.5.0rc1&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;tcpsock:setclientcert&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ok, err = tcpsock:setclientcert(cert, pkey)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*, ngx.timer.*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Set client certificate chain and corresponding private key to the TCP socket object. The certificate chain and private key provided will be used later by the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksslhandshake&#34;&gt;tcpsock:sslhandshake&lt;/a&gt; method.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cert&lt;/code&gt; specify a client certificate chain cdata object that will be used while handshaking with remote server. These objects can be created using &lt;a href=&#34;https://github.com/openresty/lua-resty-core/raw/master/lib/ngx/ssl.md#parse_pem_cert&#34;&gt;ngx.ssl.parse_pem_cert&lt;/a&gt; function provided by lua-resty-core. Note that specifying the &lt;code&gt;cert&lt;/code&gt; option requires corresponding &lt;code&gt;pkey&lt;/code&gt; be provided too. See below.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pkey&lt;/code&gt; specify a private key corresponds to the &lt;code&gt;cert&lt;/code&gt; option above. These objects can be created using &lt;a href=&#34;https://github.com/openresty/lua-resty-core/raw/master/lib/ngx/ssl.md#parse_pem_priv_key&#34;&gt;ngx.ssl.parse_pem_priv_key&lt;/a&gt; function provided by lua-resty-core.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If both of &lt;code&gt;cert&lt;/code&gt; and &lt;code&gt;pkey&lt;/code&gt; are &lt;code&gt;nil&lt;/code&gt;, this method will clear any existing client certificate and private key that was previously set on the cosocket object.&lt;/p&gt; &#xA;&lt;p&gt;This method was first introduced in the &lt;code&gt;v0.10.22&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;tcpsock:sslhandshake&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;session, err = tcpsock:sslhandshake(reused_session?, server_name?, ssl_verify?, send_status_req?)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*, ngx.timer.*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Does SSL/TLS handshake on the currently established connection.&lt;/p&gt; &#xA;&lt;p&gt;The optional &lt;code&gt;reused_session&lt;/code&gt; argument can take a former SSL session userdata returned by a previous &lt;code&gt;sslhandshake&lt;/code&gt; call for exactly the same target. For short-lived connections, reusing SSL sessions can usually speed up the handshake by one order by magnitude but it is not so useful if the connection pool is enabled. This argument defaults to &lt;code&gt;nil&lt;/code&gt;. If this argument takes the boolean &lt;code&gt;false&lt;/code&gt; value, no SSL session userdata would return by this call and only a Lua boolean will be returned as the first return value; otherwise the current SSL session will always be returned as the first argument in case of successes.&lt;/p&gt; &#xA;&lt;p&gt;The optional &lt;code&gt;server_name&lt;/code&gt; argument is used to specify the server name for the new TLS extension Server Name Indication (SNI). Use of SNI can make different servers share the same IP address on the server side. Also, when SSL verification is enabled, this &lt;code&gt;server_name&lt;/code&gt; argument is also used to validate the server name specified in the server certificate sent from the remote.&lt;/p&gt; &#xA;&lt;p&gt;The optional &lt;code&gt;ssl_verify&lt;/code&gt; argument takes a Lua boolean value to control whether to perform SSL verification. When set to &lt;code&gt;true&lt;/code&gt;, the server certificate will be verified according to the CA certificates specified by the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_ssl_trusted_certificate&#34;&gt;lua_ssl_trusted_certificate&lt;/a&gt; directive. You may also need to adjust the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_ssl_verify_depth&#34;&gt;lua_ssl_verify_depth&lt;/a&gt; directive to control how deep we should follow along the certificate chain. Also, when the &lt;code&gt;ssl_verify&lt;/code&gt; argument is true and the &lt;code&gt;server_name&lt;/code&gt; argument is also specified, the latter will be used to validate the server name in the server certificate.&lt;/p&gt; &#xA;&lt;p&gt;The optional &lt;code&gt;send_status_req&lt;/code&gt; argument takes a boolean that controls whether to send the OCSP status request in the SSL handshake request (which is for requesting OCSP stapling).&lt;/p&gt; &#xA;&lt;p&gt;For connections that have already done SSL/TLS handshake, this method returns immediately.&lt;/p&gt; &#xA;&lt;p&gt;This method was first introduced in the &lt;code&gt;v0.9.11&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;tcpsock:send&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;bytes, err = tcpsock:send(data)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*, ngx.timer.*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sends data without blocking on the current TCP or Unix Domain Socket connection.&lt;/p&gt; &#xA;&lt;p&gt;This method is a synchronous operation that will not return until &lt;em&gt;all&lt;/em&gt; the data has been flushed into the system socket send buffer or an error occurs.&lt;/p&gt; &#xA;&lt;p&gt;In case of success, it returns the total number of bytes that have been sent. Otherwise, it returns &lt;code&gt;nil&lt;/code&gt; and a string describing the error.&lt;/p&gt; &#xA;&lt;p&gt;The input argument &lt;code&gt;data&lt;/code&gt; can either be a Lua string or a (nested) Lua table holding string fragments. In case of table arguments, this method will copy all the string elements piece by piece to the underlying Nginx socket send buffers, which is usually optimal than doing string concatenation operations on the Lua land.&lt;/p&gt; &#xA;&lt;p&gt;Timeout for the sending operation is controlled by the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_socket_send_timeout&#34;&gt;lua_socket_send_timeout&lt;/a&gt; config directive and the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksettimeout&#34;&gt;settimeout&lt;/a&gt; method. And the latter takes priority. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; sock:settimeout(1000)  -- one second timeout&#xA; local bytes, err = sock:send(request)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is important here to call the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksettimeout&#34;&gt;settimeout&lt;/a&gt; method &lt;em&gt;before&lt;/em&gt; calling this method.&lt;/p&gt; &#xA;&lt;p&gt;In case of any connection errors, this method always automatically closes the current connection.&lt;/p&gt; &#xA;&lt;p&gt;This feature was first introduced in the &lt;code&gt;v0.5.0rc1&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;tcpsock:receive&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;data, err, partial = tcpsock:receive(size)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;data, err, partial = tcpsock:receive(pattern?)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*, ngx.timer.*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Receives data from the connected socket according to the reading pattern or size.&lt;/p&gt; &#xA;&lt;p&gt;This method is a synchronous operation just like the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksend&#34;&gt;send&lt;/a&gt; method and is 100% nonblocking.&lt;/p&gt; &#xA;&lt;p&gt;In case of success, it returns the data received; in case of error, it returns &lt;code&gt;nil&lt;/code&gt; with a string describing the error and the partial data received so far.&lt;/p&gt; &#xA;&lt;p&gt;If a number-like argument is specified (including strings that look like numbers), then it is interpreted as a size. This method will not return until it reads exactly this size of data or an error occurs.&lt;/p&gt; &#xA;&lt;p&gt;If a non-number-like string argument is specified, then it is interpreted as a &#34;pattern&#34;. The following patterns are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&#39;*a&#39;&lt;/code&gt;: reads from the socket until the connection is closed. No end-of-line translation is performed;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&#39;*l&#39;&lt;/code&gt;: reads a line of text from the socket. The line is terminated by a &lt;code&gt;Line Feed&lt;/code&gt; (LF) character (ASCII 10), optionally preceded by a &lt;code&gt;Carriage Return&lt;/code&gt; (CR) character (ASCII 13). The CR and LF characters are not included in the returned line. In fact, all CR characters are ignored by the pattern.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If no argument is specified, then it is assumed to be the pattern &lt;code&gt;&#39;*l&#39;&lt;/code&gt;, that is, the line reading pattern.&lt;/p&gt; &#xA;&lt;p&gt;Timeout for the reading operation is controlled by the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_socket_read_timeout&#34;&gt;lua_socket_read_timeout&lt;/a&gt; config directive and the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksettimeout&#34;&gt;settimeout&lt;/a&gt; method. And the latter takes priority. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; sock:settimeout(1000)  -- one second timeout&#xA; local line, err, partial = sock:receive()&#xA; if not line then&#xA;     ngx.say(&#34;failed to read a line: &#34;, err)&#xA;     return&#xA; end&#xA; ngx.say(&#34;successfully read a line: &#34;, line)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is important here to call the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksettimeout&#34;&gt;settimeout&lt;/a&gt; method &lt;em&gt;before&lt;/em&gt; calling this method.&lt;/p&gt; &#xA;&lt;p&gt;Since the &lt;code&gt;v0.8.8&lt;/code&gt; release, this method no longer automatically closes the current connection when the read timeout error happens. For other connection errors, this method always automatically closes the connection.&lt;/p&gt; &#xA;&lt;p&gt;This feature was first introduced in the &lt;code&gt;v0.5.0rc1&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;tcpsock:receiveany&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;data, err = tcpsock:receiveany(max)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*, ngx.timer.*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns any data received by the connected socket, at most &lt;code&gt;max&lt;/code&gt; bytes.&lt;/p&gt; &#xA;&lt;p&gt;This method is a synchronous operation just like the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksend&#34;&gt;send&lt;/a&gt; method and is 100% nonblocking.&lt;/p&gt; &#xA;&lt;p&gt;In case of success, it returns the data received; in case of error, it returns &lt;code&gt;nil&lt;/code&gt; with a string describing the error.&lt;/p&gt; &#xA;&lt;p&gt;If the received data is more than this size, this method will return with exactly this size of data. The remaining data in the underlying receive buffer could be returned in the next reading operation.&lt;/p&gt; &#xA;&lt;p&gt;Timeout for the reading operation is controlled by the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_socket_read_timeout&#34;&gt;lua_socket_read_timeout&lt;/a&gt; config directive and the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksettimeouts&#34;&gt;settimeouts&lt;/a&gt; method. And the latter takes priority. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; sock:settimeouts(1000, 1000, 1000)  -- one second timeout for connect/read/write&#xA; local data, err = sock:receiveany(10 * 1024) -- read any data, at most 10K&#xA; if not data then&#xA;     ngx.say(&#34;failed to read any data: &#34;, err)&#xA;     return&#xA; end&#xA; ngx.say(&#34;successfully read: &#34;, data)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This method doesn&#39;t automatically close the current connection when the read timeout error occurs. For other connection errors, this method always automatically closes the connection.&lt;/p&gt; &#xA;&lt;p&gt;This feature was first introduced in the &lt;code&gt;v0.10.14&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;tcpsock:receiveuntil&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;iterator = tcpsock:receiveuntil(pattern, options?)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*, ngx.timer.*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This method returns an iterator Lua function that can be called to read the data stream until it sees the specified pattern or an error occurs.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example for using this method to read a data stream with the boundary sequence &lt;code&gt;--abcedhb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local reader = sock:receiveuntil(&#34;\r\n--abcedhb&#34;)&#xA; local data, err, partial = reader()&#xA; if not data then&#xA;     ngx.say(&#34;failed to read the data stream: &#34;, err)&#xA; end&#xA; ngx.say(&#34;read the data stream: &#34;, data)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When called without any argument, the iterator function returns the received data right &lt;em&gt;before&lt;/em&gt; the specified pattern string in the incoming data stream. So for the example above, if the incoming data stream is &lt;code&gt;&#39;hello, world! -agentzh\r\n--abcedhb blah blah&#39;&lt;/code&gt;, then the string &lt;code&gt;&#39;hello, world! -agentzh&#39;&lt;/code&gt; will be returned.&lt;/p&gt; &#xA;&lt;p&gt;In case of error, the iterator function will return &lt;code&gt;nil&lt;/code&gt; along with a string describing the error and the partial data bytes that have been read so far.&lt;/p&gt; &#xA;&lt;p&gt;The iterator function can be called multiple times and can be mixed safely with other cosocket method calls or other iterator function calls.&lt;/p&gt; &#xA;&lt;p&gt;The iterator function behaves differently (i.e., like a real iterator) when it is called with a &lt;code&gt;size&lt;/code&gt; argument. That is, it will read that &lt;code&gt;size&lt;/code&gt; of data on each invocation and will return &lt;code&gt;nil&lt;/code&gt; at the last invocation (either sees the boundary pattern or meets an error). For the last successful invocation of the iterator function, the &lt;code&gt;err&lt;/code&gt; return value will be &lt;code&gt;nil&lt;/code&gt; too. The iterator function will be reset after the last successful invocation that returns &lt;code&gt;nil&lt;/code&gt; data and &lt;code&gt;nil&lt;/code&gt; error. Consider the following example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local reader = sock:receiveuntil(&#34;\r\n--abcedhb&#34;)&#xA;&#xA; while true do&#xA;     local data, err, partial = reader(4)&#xA;     if not data then&#xA;         if err then&#xA;             ngx.say(&#34;failed to read the data stream: &#34;, err)&#xA;             break&#xA;         end&#xA;&#xA;         ngx.say(&#34;read done&#34;)&#xA;         break&#xA;     end&#xA;     ngx.say(&#34;read chunk: [&#34;, data, &#34;]&#34;)&#xA; end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then for the incoming data stream &lt;code&gt;&#39;hello, world! -agentzh\r\n--abcedhb blah blah&#39;&lt;/code&gt;, we shall get the following output from the sample code above:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;read chunk: [hell]&#xA;read chunk: [o, w]&#xA;read chunk: [orld]&#xA;read chunk: [! -a]&#xA;read chunk: [gent]&#xA;read chunk: [zh]&#xA;read done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that, the actual data returned &lt;em&gt;might&lt;/em&gt; be a little longer than the size limit specified by the &lt;code&gt;size&lt;/code&gt; argument when the boundary pattern has ambiguity for streaming parsing. Near the boundary of the data stream, the data string actually returned could also be shorter than the size limit.&lt;/p&gt; &#xA;&lt;p&gt;Timeout for the iterator function&#39;s reading operation is controlled by the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_socket_read_timeout&#34;&gt;lua_socket_read_timeout&lt;/a&gt; config directive and the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksettimeout&#34;&gt;settimeout&lt;/a&gt; method. And the latter takes priority. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local readline = sock:receiveuntil(&#34;\r\n&#34;)&#xA;&#xA; sock:settimeout(1000)  -- one second timeout&#xA; line, err, partial = readline()&#xA; if not line then&#xA;     ngx.say(&#34;failed to read a line: &#34;, err)&#xA;     return&#xA; end&#xA; ngx.say(&#34;successfully read a line: &#34;, line)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is important here to call the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksettimeout&#34;&gt;settimeout&lt;/a&gt; method &lt;em&gt;before&lt;/em&gt; calling the iterator function (note that the &lt;code&gt;receiveuntil&lt;/code&gt; call is irrelevant here).&lt;/p&gt; &#xA;&lt;p&gt;As from the &lt;code&gt;v0.5.1&lt;/code&gt; release, this method also takes an optional &lt;code&gt;options&lt;/code&gt; table argument to control the behavior. The following options are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;inclusive&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;inclusive&lt;/code&gt; takes a boolean value to control whether to include the pattern string in the returned data string. Default to &lt;code&gt;false&lt;/code&gt;. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local reader = tcpsock:receiveuntil(&#34;_END_&#34;, { inclusive = true })&#xA; local data = reader()&#xA; ngx.say(data)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then for the input data stream &lt;code&gt;&#34;hello world _END_ blah blah blah&#34;&lt;/code&gt;, then the example above will output &lt;code&gt;hello world _END_&lt;/code&gt;, including the pattern string &lt;code&gt;_END_&lt;/code&gt; itself.&lt;/p&gt; &#xA;&lt;p&gt;Since the &lt;code&gt;v0.8.8&lt;/code&gt; release, this method no longer automatically closes the current connection when the read timeout error happens. For other connection errors, this method always automatically closes the connection.&lt;/p&gt; &#xA;&lt;p&gt;This method was first introduced in the &lt;code&gt;v0.5.0rc1&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;tcpsock:close&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ok, err = tcpsock:close()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*, ngx.timer.*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Closes the current TCP or stream unix domain socket. It returns the &lt;code&gt;1&lt;/code&gt; in case of success and returns &lt;code&gt;nil&lt;/code&gt; with a string describing the error otherwise.&lt;/p&gt; &#xA;&lt;p&gt;Note that there is no need to call this method on socket objects that have invoked the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksetkeepalive&#34;&gt;setkeepalive&lt;/a&gt; method because the socket object is already closed (and the current connection is saved into the built-in connection pool).&lt;/p&gt; &#xA;&lt;p&gt;Socket objects that have not invoked this method (and associated connections) will be closed when the socket object is released by the Lua GC (Garbage Collector) or the current client HTTP request finishes processing.&lt;/p&gt; &#xA;&lt;p&gt;This feature was first introduced in the &lt;code&gt;v0.5.0rc1&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;tcpsock:settimeout&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;tcpsock:settimeout(time)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*, ngx.timer.*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Set the timeout value in milliseconds for subsequent socket operations (&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsockconnect&#34;&gt;connect&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsockreceive&#34;&gt;receive&lt;/a&gt;, and iterators returned from &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsockreceiveuntil&#34;&gt;receiveuntil&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Settings done by this method take priority over those specified via config directives (i.e. &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_socket_connect_timeout&#34;&gt;lua_socket_connect_timeout&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_socket_send_timeout&#34;&gt;lua_socket_send_timeout&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_socket_read_timeout&#34;&gt;lua_socket_read_timeout&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Note that this method does &lt;em&gt;not&lt;/em&gt; affect the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_socket_keepalive_timeout&#34;&gt;lua_socket_keepalive_timeout&lt;/a&gt; setting; the &lt;code&gt;timeout&lt;/code&gt; argument to the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksetkeepalive&#34;&gt;setkeepalive&lt;/a&gt; method should be used for this purpose instead.&lt;/p&gt; &#xA;&lt;p&gt;This feature was first introduced in the &lt;code&gt;v0.5.0rc1&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;tcpsock:settimeouts&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;tcpsock:settimeouts(connect_timeout, send_timeout, read_timeout)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*, ngx.timer.*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Respectively sets the connect, send, and read timeout thresholds (in milliseconds) for subsequent socket operations (&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsockconnect&#34;&gt;connect&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksend&#34;&gt;send&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsockreceive&#34;&gt;receive&lt;/a&gt;, and iterators returned from &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsockreceiveuntil&#34;&gt;receiveuntil&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Settings done by this method take priority over those specified via config directives (i.e. &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_socket_connect_timeout&#34;&gt;lua_socket_connect_timeout&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_socket_send_timeout&#34;&gt;lua_socket_send_timeout&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_socket_read_timeout&#34;&gt;lua_socket_read_timeout&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;It is recommended to use &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksettimeouts&#34;&gt;settimeouts&lt;/a&gt; instead of &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksettimeout&#34;&gt;settimeout&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that this method does &lt;em&gt;not&lt;/em&gt; affect the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_socket_keepalive_timeout&#34;&gt;lua_socket_keepalive_timeout&lt;/a&gt; setting; the &lt;code&gt;timeout&lt;/code&gt; argument to the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksetkeepalive&#34;&gt;setkeepalive&lt;/a&gt; method should be used for this purpose instead.&lt;/p&gt; &#xA;&lt;p&gt;This feature was first introduced in the &lt;code&gt;v0.10.7&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;tcpsock:setoption&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ok, err = tcpsock:setoption(option, value?)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*, ngx.timer.*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This function is added for &lt;a href=&#34;http://w3.impa.br/~diego/software/luasocket/tcp.html&#34;&gt;LuaSocket&lt;/a&gt; API compatibility and does nothing for now. Its functionality is implemented &lt;code&gt;v0.10.18&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This feature was first introduced in the &lt;code&gt;v0.5.0rc1&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;In case of success, it returns &lt;code&gt;true&lt;/code&gt;. Otherwise, it returns nil and a string describing the error.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;option&lt;/code&gt; is a string with the option name, and the value depends on the option being set:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;keepalive&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Setting this option to true enables sending of keep-alive messages on connection-oriented sockets. Make sure the &lt;code&gt;connect&lt;/code&gt; function had been called before, for example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA;local ok, err = tcpsock:setoption(&#34;keepalive&#34;, true)&#xA;if not ok then&#xA;    ngx.say(&#34;setoption keepalive failed: &#34;, err)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;reuseaddr&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Enabling this option indicates that the rules used in validating addresses supplied in a call to bind should allow reuse of local addresses. Make sure the &lt;code&gt;connect&lt;/code&gt; function had been called before, for example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA;local ok, err = tcpsock:setoption(&#34;reuseaddr&#34;, 0)&#xA;if not ok then&#xA;    ngx.say(&#34;setoption reuseaddr failed: &#34;, err)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;tcp-nodelay&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Setting this option to true disables the Nagle&#39;s algorithm for the connection. Make sure the &lt;code&gt;connect&lt;/code&gt; function had been called before, for example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA;local ok, err = tcpsock:setoption(&#34;tcp-nodelay&#34;, true)&#xA;if not ok then&#xA;    ngx.say(&#34;setoption tcp-nodelay failed: &#34;, err)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;sndbuf&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Sets the maximum socket send buffer in bytes. The kernel doubles this value (to allow space for bookkeeping overhead) when it is set using setsockopt(). Make sure the &lt;code&gt;connect&lt;/code&gt; function had been called before, for example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA;local ok, err = tcpsock:setoption(&#34;sndbuf&#34;, 1024 * 10)&#xA;if not ok then&#xA;    ngx.say(&#34;setoption sndbuf failed: &#34;, err)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;rcvbuf&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Sets the maximum socket receive buffer in bytes. The kernel doubles this value (to allow space for bookkeeping overhead) when it is set using setsockopt. Make sure the &lt;code&gt;connect&lt;/code&gt; function had been called before, for example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA;local ok, err = tcpsock:setoption(&#34;rcvbuf&#34;, 1024 * 10)&#xA;if not ok then&#xA;    ngx.say(&#34;setoption rcvbuf failed: &#34;, err)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;NOTE: Once the option is set, it will become effective until the connection is closed. If you know the connection is from the connection pool and all the in-pool connections already have called the setoption() method with the desired socket option state, then you can just skip calling setoption() again to avoid the overhead of repeated calls, for example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local count, err = tcpsock:getreusedtimes()&#xA; if not count then&#xA;     ngx.say(&#34;getreusedtimes failed: &#34;, err)&#xA;     return&#xA; end&#xA;&#xA; if count == 0 then&#xA;     local ok, err = tcpsock:setoption(&#34;rcvbuf&#34;, 1024 * 10)&#xA;     if not ok then&#xA;         ngx.say(&#34;setoption rcvbuf failed: &#34;, err)&#xA;         return&#xA;     end&#xA; end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These options described above are supported in &lt;code&gt;v0.10.18&lt;/code&gt;, and more options will be implemented in future.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;tcpsock:setkeepalive&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ok, err = tcpsock:setkeepalive(timeout?, size?)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*, ngx.timer.*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Puts the current socket&#39;s connection immediately into the cosocket built-in connection pool and keep it alive until other &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsockconnect&#34;&gt;connect&lt;/a&gt; method calls request it or the associated maximal idle timeout is expired.&lt;/p&gt; &#xA;&lt;p&gt;The first optional argument, &lt;code&gt;timeout&lt;/code&gt;, can be used to specify the maximal idle timeout (in milliseconds) for the current connection. If omitted, the default setting in the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_socket_keepalive_timeout&#34;&gt;lua_socket_keepalive_timeout&lt;/a&gt; config directive will be used. If the &lt;code&gt;0&lt;/code&gt; value is given, then the timeout interval is unlimited.&lt;/p&gt; &#xA;&lt;p&gt;The second optional argument &lt;code&gt;size&lt;/code&gt; is considered deprecated since the &lt;code&gt;v0.10.14&lt;/code&gt; release of this module, in favor of the &lt;code&gt;pool_size&lt;/code&gt; option of the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsockconnect&#34;&gt;connect&lt;/a&gt; method. Since the &lt;code&gt;v0.10.14&lt;/code&gt; release, this option will only take effect if the call to &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsockconnect&#34;&gt;connect&lt;/a&gt; did not already create a connection pool. When this option takes effect (no connection pool was previously created by &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsockconnect&#34;&gt;connect&lt;/a&gt;), it will specify the size of the connection pool, and create it. If omitted (and no pool was previously created), the default size is the value of the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_socket_pool_size&#34;&gt;lua_socket_pool_size&lt;/a&gt; directive. The connection pool holds up to &lt;code&gt;size&lt;/code&gt; alive connections ready to be reused by subsequent calls to &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsockconnect&#34;&gt;connect&lt;/a&gt;, but note that there is no upper limit to the total number of opened connections outside of the pool. When the connection pool would exceed its size limit, the least recently used (kept-alive) connection already in the pool will be closed to make room for the current connection. Note that the cosocket connection pool is per Nginx worker process rather than per Nginx server instance, so the size limit specified here also applies to every single Nginx worker process. Also note that the size of the connection pool cannot be changed once it has been created. If you need to restrict the total number of opened connections, specify both the &lt;code&gt;pool_size&lt;/code&gt; and &lt;code&gt;backlog&lt;/code&gt; option in the call to &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsockconnect&#34;&gt;connect&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In case of success, this method returns &lt;code&gt;1&lt;/code&gt;; otherwise, it returns &lt;code&gt;nil&lt;/code&gt; and a string describing the error.&lt;/p&gt; &#xA;&lt;p&gt;When the system receive buffer for the current connection has unread data, then this method will return the &#34;connection in dubious state&#34; error message (as the second return value) because the previous session has unread data left behind for the next session and the connection is not safe to be reused.&lt;/p&gt; &#xA;&lt;p&gt;This method also makes the current cosocket object enter the &#34;closed&#34; state, so there is no need to manually call the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsockclose&#34;&gt;close&lt;/a&gt; method on it afterwards.&lt;/p&gt; &#xA;&lt;p&gt;This feature was first introduced in the &lt;code&gt;v0.5.0rc1&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;tcpsock:getreusedtimes&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;count, err = tcpsock:getreusedtimes()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*, ngx.timer.*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This method returns the (successfully) reused times for the current connection. In case of error, it returns &lt;code&gt;nil&lt;/code&gt; and a string describing the error.&lt;/p&gt; &#xA;&lt;p&gt;If the current connection does not come from the built-in connection pool, then this method always returns &lt;code&gt;0&lt;/code&gt;, that is, the connection has never been reused (yet). If the connection comes from the connection pool, then the return value is always non-zero. So this method can also be used to determine if the current connection comes from the pool.&lt;/p&gt; &#xA;&lt;p&gt;This feature was first introduced in the &lt;code&gt;v0.5.0rc1&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.socket.connect&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;tcpsock, err = ngx.socket.connect(host, port)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;tcpsock, err = ngx.socket.connect(&#34;unix:/path/to/unix-domain.socket&#34;)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*, ngx.timer.*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This function is a shortcut for combining &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsockettcp&#34;&gt;ngx.socket.tcp()&lt;/a&gt; and the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsockconnect&#34;&gt;connect()&lt;/a&gt; method call in a single operation. It is actually implemented like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local sock = ngx.socket.tcp()&#xA; local ok, err = sock:connect(...)&#xA; if not ok then&#xA;     return nil, err&#xA; end&#xA; return sock&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is no way to use the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsocksettimeout&#34;&gt;settimeout&lt;/a&gt; method to specify connecting timeout for this method and the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_socket_connect_timeout&#34;&gt;lua_socket_connect_timeout&lt;/a&gt; directive must be set at configure time instead.&lt;/p&gt; &#xA;&lt;p&gt;This feature was first introduced in the &lt;code&gt;v0.5.0rc1&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.get_phase&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;str = ngx.get_phase()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_by_lua*, init_worker_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, exit_worker_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Retrieves the current running phase name. Possible return values are&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;init&lt;/code&gt; for the context of &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#init_by_lua&#34;&gt;init_by_lua*&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;init_worker&lt;/code&gt; for the context of &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#init_worker_by_lua&#34;&gt;init_worker_by_lua*&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ssl_cert&lt;/code&gt; for the context of &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ssl_certificate_by_lua_block&#34;&gt;ssl_certificate_by_lua*&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ssl_session_fetch&lt;/code&gt; for the context of &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ssl_session_fetch_by_lua_block&#34;&gt;ssl_session_fetch_by_lua*&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ssl_session_store&lt;/code&gt; for the context of &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ssl_session_store_by_lua_block&#34;&gt;ssl_session_store_by_lua*&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ssl_client_hello&lt;/code&gt; for the context of &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ssl_client_hello_by_lua_block&#34;&gt;ssl_client_hello_by_lua*&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;set&lt;/code&gt; for the context of &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#set_by_lua&#34;&gt;set_by_lua*&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rewrite&lt;/code&gt; for the context of &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#rewrite_by_lua&#34;&gt;rewrite_by_lua*&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;balancer&lt;/code&gt; for the context of &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#balancer_by_lua_block&#34;&gt;balancer_by_lua*&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;access&lt;/code&gt; for the context of &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#access_by_lua&#34;&gt;access_by_lua*&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;content&lt;/code&gt; for the context of &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#content_by_lua&#34;&gt;content_by_lua*&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;header_filter&lt;/code&gt; for the context of &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#header_filter_by_lua&#34;&gt;header_filter_by_lua*&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;body_filter&lt;/code&gt; for the context of &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#body_filter_by_lua&#34;&gt;body_filter_by_lua*&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;log&lt;/code&gt; for the context of &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#log_by_lua&#34;&gt;log_by_lua*&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;timer&lt;/code&gt; for the context of user callback functions for &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxtimerat&#34;&gt;ngx.timer.*&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;exit_worker&lt;/code&gt; for the context of &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#exit_worker_by_lua&#34;&gt;exit_worker_by_lua*&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This API was first introduced in the &lt;code&gt;v0.5.10&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.thread.spawn&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;co = ngx.thread.spawn(func, arg1, arg2, ...)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*, ngx.timer.*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Spawns a new user &#34;light thread&#34; with the Lua function &lt;code&gt;func&lt;/code&gt; as well as those optional arguments &lt;code&gt;arg1&lt;/code&gt;, &lt;code&gt;arg2&lt;/code&gt;, and etc. Returns a Lua thread (or Lua coroutine) object represents this &#34;light thread&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&#34;Light threads&#34; are just a special kind of Lua coroutines that are scheduled by the ngx_lua module.&lt;/p&gt; &#xA;&lt;p&gt;Before &lt;code&gt;ngx.thread.spawn&lt;/code&gt; returns, the &lt;code&gt;func&lt;/code&gt; will be called with those optional arguments until it returns, aborts with an error, or gets yielded due to I/O operations via the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Nginx API for Lua&lt;/a&gt; (like &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsockreceive&#34;&gt;tcpsock:receive&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;After &lt;code&gt;ngx.thread.spawn&lt;/code&gt; returns, the newly-created &#34;light thread&#34; will keep running asynchronously usually at various I/O events.&lt;/p&gt; &#xA;&lt;p&gt;All the Lua code chunks running by &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#rewrite_by_lua&#34;&gt;rewrite_by_lua&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#access_by_lua&#34;&gt;access_by_lua&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#content_by_lua&#34;&gt;content_by_lua&lt;/a&gt; are in a boilerplate &#34;light thread&#34; created automatically by ngx_lua. Such boilerplate &#34;light thread&#34; are also called &#34;entry threads&#34;.&lt;/p&gt; &#xA;&lt;p&gt;By default, the corresponding Nginx handler (e.g., &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#rewrite_by_lua&#34;&gt;rewrite_by_lua&lt;/a&gt; handler) will not terminate until&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;both the &#34;entry thread&#34; and all the user &#34;light threads&#34; terminates,&lt;/li&gt; &#xA; &lt;li&gt;a &#34;light thread&#34; (either the &#34;entry thread&#34; or a user &#34;light thread&#34;) aborts by calling &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxexit&#34;&gt;ngx.exit&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxexec&#34;&gt;ngx.exec&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxredirect&#34;&gt;ngx.redirect&lt;/a&gt;, or &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqset_uri&#34;&gt;ngx.req.set_uri(uri, true)&lt;/a&gt;, or&lt;/li&gt; &#xA; &lt;li&gt;the &#34;entry thread&#34; terminates with a Lua error.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;When the user &#34;light thread&#34; terminates with a Lua error, however, it will not abort other running &#34;light threads&#34; like the &#34;entry thread&#34; does.&lt;/p&gt; &#xA;&lt;p&gt;Due to the limitation in the Nginx subrequest model, it is not allowed to abort a running Nginx subrequest in general. So it is also prohibited to abort a running &#34;light thread&#34; that is pending on one ore more Nginx subrequests. You must call &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxthreadwait&#34;&gt;ngx.thread.wait&lt;/a&gt; to wait for those &#34;light thread&#34; to terminate before quitting the &#34;world&#34;. A notable exception here is that you can abort pending subrequests by calling &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxexit&#34;&gt;ngx.exit&lt;/a&gt; with and only with the status code &lt;code&gt;ngx.ERROR&lt;/code&gt; (-1), &lt;code&gt;408&lt;/code&gt;, &lt;code&gt;444&lt;/code&gt;, or &lt;code&gt;499&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &#34;light threads&#34; are not scheduled in a pre-emptive way. In other words, no time-slicing is performed automatically. A &#34;light thread&#34; will keep running exclusively on the CPU until&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;a (nonblocking) I/O operation cannot be completed in a single run,&lt;/li&gt; &#xA; &lt;li&gt;it calls &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#coroutineyield&#34;&gt;coroutine.yield&lt;/a&gt; to actively give up execution, or&lt;/li&gt; &#xA; &lt;li&gt;it is aborted by a Lua error or an invocation of &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxexit&#34;&gt;ngx.exit&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxexec&#34;&gt;ngx.exec&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxredirect&#34;&gt;ngx.redirect&lt;/a&gt;, or &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqset_uri&#34;&gt;ngx.req.set_uri(uri, true)&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For the first two cases, the &#34;light thread&#34; will usually be resumed later by the ngx_lua scheduler unless a &#34;stop-the-world&#34; event happens.&lt;/p&gt; &#xA;&lt;p&gt;User &#34;light threads&#34; can create &#34;light threads&#34; themselves. And normal user coroutines created by &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#coroutinecreate&#34;&gt;coroutine.create&lt;/a&gt; can also create &#34;light threads&#34;. The coroutine (be it a normal Lua coroutine or a &#34;light thread&#34;) that directly spawns the &#34;light thread&#34; is called the &#34;parent coroutine&#34; for the &#34;light thread&#34; newly spawned.&lt;/p&gt; &#xA;&lt;p&gt;The &#34;parent coroutine&#34; can call &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxthreadwait&#34;&gt;ngx.thread.wait&lt;/a&gt; to wait on the termination of its child &#34;light thread&#34;.&lt;/p&gt; &#xA;&lt;p&gt;You can call coroutine.status() and coroutine.yield() on the &#34;light thread&#34; coroutines.&lt;/p&gt; &#xA;&lt;p&gt;The status of the &#34;light thread&#34; coroutine can be &#34;zombie&#34; if&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;the current &#34;light thread&#34; already terminates (either successfully or with an error),&lt;/li&gt; &#xA; &lt;li&gt;its parent coroutine is still alive, and&lt;/li&gt; &#xA; &lt;li&gt;its parent coroutine is not waiting on it with &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxthreadwait&#34;&gt;ngx.thread.wait&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The following example demonstrates the use of coroutine.yield() in the &#34;light thread&#34; coroutines to do manual time-slicing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local yield = coroutine.yield&#xA;&#xA; function f()&#xA;     local self = coroutine.running()&#xA;     ngx.say(&#34;f 1&#34;)&#xA;     yield(self)&#xA;     ngx.say(&#34;f 2&#34;)&#xA;     yield(self)&#xA;     ngx.say(&#34;f 3&#34;)&#xA; end&#xA;&#xA; local self = coroutine.running()&#xA; ngx.say(&#34;0&#34;)&#xA; yield(self)&#xA;&#xA; ngx.say(&#34;1&#34;)&#xA; ngx.thread.spawn(f)&#xA;&#xA; ngx.say(&#34;2&#34;)&#xA; yield(self)&#xA;&#xA; ngx.say(&#34;3&#34;)&#xA; yield(self)&#xA;&#xA; ngx.say(&#34;4&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then it will generate the output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;0&#xA;1&#xA;f 1&#xA;2&#xA;f 2&#xA;3&#xA;f 3&#xA;4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&#34;Light threads&#34; are mostly useful for making concurrent upstream requests in a single Nginx request handler, much like a generalized version of &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxlocationcapture_multi&#34;&gt;ngx.location.capture_multi&lt;/a&gt; that can work with all the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Nginx API for Lua&lt;/a&gt;. The following example demonstrates parallel requests to MySQL, Memcached, and upstream HTTP services in a single Lua handler, and outputting the results in the order that they actually return (similar to Facebook&#39;s BigPipe model):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; -- query mysql, memcached, and a remote http service at the same time,&#xA; -- output the results in the order that they&#xA; -- actually return the results.&#xA;&#xA; local mysql = require &#34;resty.mysql&#34;&#xA; local memcached = require &#34;resty.memcached&#34;&#xA;&#xA; local function query_mysql()&#xA;     local db = mysql:new()&#xA;     db:connect{&#xA;                 host = &#34;127.0.0.1&#34;,&#xA;                 port = 3306,&#xA;                 database = &#34;test&#34;,&#xA;                 user = &#34;monty&#34;,&#xA;                 password = &#34;mypass&#34;&#xA;               }&#xA;     local res, err, errno, sqlstate =&#xA;             db:query(&#34;select * from cats order by id asc&#34;)&#xA;     db:set_keepalive(0, 100)&#xA;     ngx.say(&#34;mysql done: &#34;, cjson.encode(res))&#xA; end&#xA;&#xA; local function query_memcached()&#xA;     local memc = memcached:new()&#xA;     memc:connect(&#34;127.0.0.1&#34;, 11211)&#xA;     local res, err = memc:get(&#34;some_key&#34;)&#xA;     ngx.say(&#34;memcached done: &#34;, res)&#xA; end&#xA;&#xA; local function query_http()&#xA;     local res = ngx.location.capture(&#34;/my-http-proxy&#34;)&#xA;     ngx.say(&#34;http done: &#34;, res.body)&#xA; end&#xA;&#xA; ngx.thread.spawn(query_mysql)      -- create thread 1&#xA; ngx.thread.spawn(query_memcached)  -- create thread 2&#xA; ngx.thread.spawn(query_http)       -- create thread 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This API was first enabled in the &lt;code&gt;v0.7.0&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.thread.wait&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ok, res1, res2, ... = ngx.thread.wait(thread1, thread2, ...)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*, ngx.timer.*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Waits on one or more child &#34;light threads&#34; and returns the results of the first &#34;light thread&#34; that terminates (either successfully or with an error).&lt;/p&gt; &#xA;&lt;p&gt;The arguments &lt;code&gt;thread1&lt;/code&gt;, &lt;code&gt;thread2&lt;/code&gt;, and etc are the Lua thread objects returned by earlier calls of &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxthreadspawn&#34;&gt;ngx.thread.spawn&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The return values have exactly the same meaning as &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#coroutineresume&#34;&gt;coroutine.resume&lt;/a&gt;, that is, the first value returned is a boolean value indicating whether the &#34;light thread&#34; terminates successfully or not, and subsequent values returned are the return values of the user Lua function that was used to spawn the &#34;light thread&#34; (in case of success) or the error object (in case of failure).&lt;/p&gt; &#xA;&lt;p&gt;Only the direct &#34;parent coroutine&#34; can wait on its child &#34;light thread&#34;, otherwise a Lua exception will be raised.&lt;/p&gt; &#xA;&lt;p&gt;The following example demonstrates the use of &lt;code&gt;ngx.thread.wait&lt;/code&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxlocationcapture&#34;&gt;ngx.location.capture&lt;/a&gt; to emulate &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxlocationcapture_multi&#34;&gt;ngx.location.capture_multi&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local capture = ngx.location.capture&#xA; local spawn = ngx.thread.spawn&#xA; local wait = ngx.thread.wait&#xA; local say = ngx.say&#xA;&#xA; local function fetch(uri)&#xA;     return capture(uri)&#xA; end&#xA;&#xA; local threads = {&#xA;     spawn(fetch, &#34;/foo&#34;),&#xA;     spawn(fetch, &#34;/bar&#34;),&#xA;     spawn(fetch, &#34;/baz&#34;)&#xA; }&#xA;&#xA; for i = 1, #threads do&#xA;     local ok, res = wait(threads[i])&#xA;     if not ok then&#xA;         say(i, &#34;: failed to run: &#34;, res)&#xA;     else&#xA;         say(i, &#34;: status: &#34;, res.status)&#xA;         say(i, &#34;: body: &#34;, res.body)&#xA;     end&#xA; end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here it essentially implements the &#34;wait all&#34; model.&lt;/p&gt; &#xA;&lt;p&gt;And below is an example demonstrating the &#34;wait any&#34; model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; function f()&#xA;     ngx.sleep(0.2)&#xA;     ngx.say(&#34;f: hello&#34;)&#xA;     return &#34;f done&#34;&#xA; end&#xA;&#xA; function g()&#xA;     ngx.sleep(0.1)&#xA;     ngx.say(&#34;g: hello&#34;)&#xA;     return &#34;g done&#34;&#xA; end&#xA;&#xA; local tf, err = ngx.thread.spawn(f)&#xA; if not tf then&#xA;     ngx.say(&#34;failed to spawn thread f: &#34;, err)&#xA;     return&#xA; end&#xA;&#xA; ngx.say(&#34;f thread created: &#34;, coroutine.status(tf))&#xA;&#xA; local tg, err = ngx.thread.spawn(g)&#xA; if not tg then&#xA;     ngx.say(&#34;failed to spawn thread g: &#34;, err)&#xA;     return&#xA; end&#xA;&#xA; ngx.say(&#34;g thread created: &#34;, coroutine.status(tg))&#xA;&#xA; ok, res = ngx.thread.wait(tf, tg)&#xA; if not ok then&#xA;     ngx.say(&#34;failed to wait: &#34;, res)&#xA;     return&#xA; end&#xA;&#xA; ngx.say(&#34;res: &#34;, res)&#xA;&#xA; -- stop the &#34;world&#34;, aborting other running threads&#xA; ngx.exit(ngx.OK)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And it will generate the following output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;f thread created: running&#xA;g thread created: running&#xA;g: hello&#xA;res: g done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This API was first enabled in the &lt;code&gt;v0.7.0&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.thread.kill&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ok, err = ngx.thread.kill(thread)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*, ngx.timer.*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Kills a running &#34;light thread&#34; created by &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxthreadspawn&#34;&gt;ngx.thread.spawn&lt;/a&gt;. Returns a true value when successful or &lt;code&gt;nil&lt;/code&gt; and a string describing the error otherwise.&lt;/p&gt; &#xA;&lt;p&gt;According to the current implementation, only the parent coroutine (or &#34;light thread&#34;) can kill a thread. Also, a running &#34;light thread&#34; with pending Nginx subrequests (initiated by &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxlocationcapture&#34;&gt;ngx.location.capture&lt;/a&gt; for example) cannot be killed due to a limitation in the Nginx core.&lt;/p&gt; &#xA;&lt;p&gt;This API was first enabled in the &lt;code&gt;v0.9.9&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.on_abort&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ok, err = ngx.on_abort(callback)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Registers a user Lua function as the callback which gets called automatically when the client closes the (downstream) connection prematurely.&lt;/p&gt; &#xA;&lt;p&gt;Returns &lt;code&gt;1&lt;/code&gt; if the callback is registered successfully or returns &lt;code&gt;nil&lt;/code&gt; and a string describing the error otherwise.&lt;/p&gt; &#xA;&lt;p&gt;All the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Nginx API for Lua&lt;/a&gt; can be used in the callback function because the function is run in a special &#34;light thread&#34;, just as those &#34;light threads&#34; created by &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxthreadspawn&#34;&gt;ngx.thread.spawn&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The callback function can decide what to do with the client abortion event all by itself. For example, it can simply ignore the event by doing nothing and the current Lua request handler will continue executing without interruptions. And the callback function can also decide to terminate everything by calling &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxexit&#34;&gt;ngx.exit&lt;/a&gt;, for example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local function my_cleanup()&#xA;     -- custom cleanup work goes here, like cancelling a pending DB transaction&#xA;&#xA;     -- now abort all the &#34;light threads&#34; running in the current request handler&#xA;     ngx.exit(499)&#xA; end&#xA;&#xA; local ok, err = ngx.on_abort(my_cleanup)&#xA; if not ok then&#xA;     ngx.log(ngx.ERR, &#34;failed to register the on_abort callback: &#34;, err)&#xA;     ngx.exit(500)&#xA; end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_check_client_abort&#34;&gt;lua_check_client_abort&lt;/a&gt; is set to &lt;code&gt;off&lt;/code&gt; (which is the default), then this function call will always return the error message &#34;lua_check_client_abort is off&#34;.&lt;/p&gt; &#xA;&lt;p&gt;According to the current implementation, this function can only be called once in a single request handler; subsequent calls will return the error message &#34;duplicate call&#34;.&lt;/p&gt; &#xA;&lt;p&gt;This API was first introduced in the &lt;code&gt;v0.7.4&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_check_client_abort&#34;&gt;lua_check_client_abort&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.timer.at&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;hdl, err = ngx.timer.at(delay, callback, user_arg1, user_arg2, ...)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_worker_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Creates an Nginx timer with a user callback function as well as optional user arguments.&lt;/p&gt; &#xA;&lt;p&gt;The first argument, &lt;code&gt;delay&lt;/code&gt;, specifies the delay for the timer, in seconds. One can specify fractional seconds like &lt;code&gt;0.001&lt;/code&gt; to mean 1 millisecond here. &lt;code&gt;0&lt;/code&gt; delay can also be specified, in which case the timer will immediately expire when the current handler yields execution.&lt;/p&gt; &#xA;&lt;p&gt;The second argument, &lt;code&gt;callback&lt;/code&gt;, can be any Lua function, which will be invoked later in a background &#34;light thread&#34; after the delay specified. The user callback will be called automatically by the Nginx core with the arguments &lt;code&gt;premature&lt;/code&gt;, &lt;code&gt;user_arg1&lt;/code&gt;, &lt;code&gt;user_arg2&lt;/code&gt;, and etc, where the &lt;code&gt;premature&lt;/code&gt; argument takes a boolean value indicating whether it is a premature timer expiration or not, and &lt;code&gt;user_arg1&lt;/code&gt;, &lt;code&gt;user_arg2&lt;/code&gt;, and etc, are those (extra) user arguments specified when calling &lt;code&gt;ngx.timer.at&lt;/code&gt; as the remaining arguments.&lt;/p&gt; &#xA;&lt;p&gt;Premature timer expiration happens when the Nginx worker process is trying to shut down, as in an Nginx configuration reload triggered by the &lt;code&gt;HUP&lt;/code&gt; signal or in an Nginx server shutdown. When the Nginx worker is trying to shut down, one can no longer call &lt;code&gt;ngx.timer.at&lt;/code&gt; to create new timers with nonzero delays and in that case &lt;code&gt;ngx.timer.at&lt;/code&gt; will return a &#34;conditional false&#34; value and a string describing the error, that is, &#34;process exiting&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Starting from the &lt;code&gt;v0.9.3&lt;/code&gt; release, it is allowed to create zero-delay timers even when the Nginx worker process starts shutting down.&lt;/p&gt; &#xA;&lt;p&gt;When a timer expires, the user Lua code in the timer callback is running in a &#34;light thread&#34; detached completely from the original request creating the timer. So objects with the same lifetime as the request creating them, like &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsockettcp&#34;&gt;cosockets&lt;/a&gt;, cannot be shared between the original request and the timer user callback function.&lt;/p&gt; &#xA;&lt;p&gt;Here is a simple example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; location / {&#xA;     ...&#xA;     log_by_lua_block {&#xA;         local function push_data(premature, uri, args, status)&#xA;             -- push the data uri, args, and status to the remote&#xA;             -- via ngx.socket.tcp or ngx.socket.udp&#xA;             -- (one may want to buffer the data in Lua a bit to&#xA;             -- save I/O operations)&#xA;         end&#xA;         local ok, err = ngx.timer.at(0, push_data,&#xA;                                      ngx.var.uri, ngx.var.args, ngx.header.status)&#xA;         if not ok then&#xA;             ngx.log(ngx.ERR, &#34;failed to create timer: &#34;, err)&#xA;             return&#xA;         end&#xA;&#xA;         -- other job in log_by_lua_block&#xA;     }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;One can also create infinite re-occurring timers, for instance, a timer getting triggered every &lt;code&gt;5&lt;/code&gt; seconds, by calling &lt;code&gt;ngx.timer.at&lt;/code&gt; recursively in the timer callback function. Here is such an example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local delay = 5&#xA; local handler&#xA; handler = function (premature)&#xA;     -- do some routine job in Lua just like a cron job&#xA;     if premature then&#xA;         return&#xA;     end&#xA;     local ok, err = ngx.timer.at(delay, handler)&#xA;     if not ok then&#xA;         ngx.log(ngx.ERR, &#34;failed to create the timer: &#34;, err)&#xA;         return&#xA;     end&#xA;&#xA;     -- do something in timer&#xA; end&#xA;&#xA; local ok, err = ngx.timer.at(delay, handler)&#xA; if not ok then&#xA;     ngx.log(ngx.ERR, &#34;failed to create the timer: &#34;, err)&#xA;     return&#xA; end&#xA;&#xA; -- do other jobs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is recommended, however, to use the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxtimerevery&#34;&gt;ngx.timer.every&lt;/a&gt; API function instead for creating recurring timers since it is more robust.&lt;/p&gt; &#xA;&lt;p&gt;Because timer callbacks run in the background and their running time will not add to any client request&#39;s response time, they can easily accumulate in the server and exhaust system resources due to either Lua programming mistakes or just too much client traffic. To prevent extreme consequences like crashing the Nginx server, there are built-in limitations on both the number of &#34;pending timers&#34; and the number of &#34;running timers&#34; in an Nginx worker process. The &#34;pending timers&#34; here mean timers that have not yet been expired and &#34;running timers&#34; are those whose user callbacks are currently running.&lt;/p&gt; &#xA;&lt;p&gt;The maximal number of pending timers allowed in an Nginx worker is controlled by the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_max_pending_timers&#34;&gt;lua_max_pending_timers&lt;/a&gt; directive. The maximal number of running timers is controlled by the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_max_running_timers&#34;&gt;lua_max_running_timers&lt;/a&gt; directive.&lt;/p&gt; &#xA;&lt;p&gt;According to the current implementation, each &#34;running timer&#34; will take one (fake) connection record from the global connection record list configured by the standard &lt;a href=&#34;http://nginx.org/en/docs/ngx_core_module.html#worker_connections&#34;&gt;worker_connections&lt;/a&gt; directive in &lt;code&gt;nginx.conf&lt;/code&gt;. So ensure that the &lt;a href=&#34;http://nginx.org/en/docs/ngx_core_module.html#worker_connections&#34;&gt;worker_connections&lt;/a&gt; directive is set to a large enough value that takes into account both the real connections and fake connections required by timer callbacks (as limited by the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_max_running_timers&#34;&gt;lua_max_running_timers&lt;/a&gt; directive).&lt;/p&gt; &#xA;&lt;p&gt;A lot of the Lua APIs for Nginx are enabled in the context of the timer callbacks, like stream/datagram cosockets (&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsockettcp&#34;&gt;ngx.socket.tcp&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsocketudp&#34;&gt;ngx.socket.udp&lt;/a&gt;), shared memory dictionaries (&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt;), user coroutines (&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#coroutinecreate&#34;&gt;coroutine.*&lt;/a&gt;), user &#34;light threads&#34; (&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxthreadspawn&#34;&gt;ngx.thread.*&lt;/a&gt;), &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxexit&#34;&gt;ngx.exit&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxnow&#34;&gt;ngx.now&lt;/a&gt;/&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxtime&#34;&gt;ngx.time&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxmd5&#34;&gt;ngx.md5&lt;/a&gt;/&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsha1_bin&#34;&gt;ngx.sha1_bin&lt;/a&gt;, are all allowed. But the subrequest API (like &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxlocationcapture&#34;&gt;ngx.location.capture&lt;/a&gt;), the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqstart_time&#34;&gt;ngx.req.*&lt;/a&gt; API, the downstream output API (like &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsay&#34;&gt;ngx.say&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxprint&#34;&gt;ngx.print&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxflush&#34;&gt;ngx.flush&lt;/a&gt;) are explicitly disabled in this context.&lt;/p&gt; &#xA;&lt;p&gt;You must notice that each timer will be based on a fake request (this fake request is also based on a fake connection). Because Nginx&#39;s memory release is based on the connection closure, if you run a lot of APIs that apply for memory resources in a timer, such as &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#tcpsockconnect&#34;&gt;tcpsock:connect&lt;/a&gt;, will cause the accumulation of memory resources. So it is recommended to create a new timer after running several times to release memory resources.&lt;/p&gt; &#xA;&lt;p&gt;You can pass most of the standard Lua values (nils, booleans, numbers, strings, tables, closures, file handles, and etc) into the timer callback, either explicitly as user arguments or implicitly as upvalues for the callback closure. There are several exceptions, however: you &lt;em&gt;cannot&lt;/em&gt; pass any thread objects returned by &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#coroutinecreate&#34;&gt;coroutine.create&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxthreadspawn&#34;&gt;ngx.thread.spawn&lt;/a&gt; or any cosocket objects returned by &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsockettcp&#34;&gt;ngx.socket.tcp&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxsocketudp&#34;&gt;ngx.socket.udp&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxreqsocket&#34;&gt;ngx.req.socket&lt;/a&gt; because these objects&#39; lifetime is bound to the request context creating them while the timer callback is detached from the creating request&#39;s context (by design) and runs in its own (fake) request context. If you try to share the thread or cosocket objects across the boundary of the creating request, then you will get the &#34;no co ctx found&#34; error (for threads) or &#34;bad request&#34; (for cosockets). It is fine, however, to create all these objects inside your timer callback.&lt;/p&gt; &#xA;&lt;p&gt;Please note that the timer Lua handler has its own copy of the &lt;code&gt;ngx.ctx&lt;/code&gt; magic table. It won&#39;t share the same &lt;code&gt;ngx.ctx&lt;/code&gt; with the Lua handler creating the timer. If you need to pass data from the timer creator to the timer handler, please use the extra parameters of &lt;code&gt;ngx.timer.at()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This API was first introduced in the &lt;code&gt;v0.8.0&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.timer.every&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;hdl, err = ngx.timer.every(delay, callback, user_arg1, user_arg2, ...)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_worker_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Similar to the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxtimerat&#34;&gt;ngx.timer.at&lt;/a&gt; API function, but&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;delay&lt;/code&gt; &lt;em&gt;cannot&lt;/em&gt; be zero,&lt;/li&gt; &#xA; &lt;li&gt;timer will be created every &lt;code&gt;delay&lt;/code&gt; seconds until the current Nginx worker process starts exiting.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Like &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxtimerat&#34;&gt;ngx.timer.at&lt;/a&gt;, the &lt;code&gt;callback&lt;/code&gt; argument will be called automatically with the arguments &lt;code&gt;premature&lt;/code&gt;, &lt;code&gt;user_arg1&lt;/code&gt;, &lt;code&gt;user_arg2&lt;/code&gt;, etc.&lt;/p&gt; &#xA;&lt;p&gt;When success, returns a &#34;conditional true&#34; value (but not a &lt;code&gt;true&lt;/code&gt;). Otherwise, returns a &#34;conditional false&#34; value and a string describing the error.&lt;/p&gt; &#xA;&lt;p&gt;This API also respect the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_max_pending_timers&#34;&gt;lua_max_pending_timers&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_max_running_timers&#34;&gt;lua_max_running_timers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This API was first introduced in the &lt;code&gt;v0.10.9&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.timer.running_count&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;count = ngx.timer.running_count()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_worker_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, exit_worker_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns the number of timers currently running.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.9.20&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.timer.pending_count&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;count = ngx.timer.pending_count()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_worker_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, exit_worker_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns the number of pending timers.&lt;/p&gt; &#xA;&lt;p&gt;This directive was first introduced in the &lt;code&gt;v0.9.20&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.config.subsystem&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;subsystem = ngx.config.subsystem&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, init_by_lua*, init_worker_by_lua*, exit_worker_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This string field indicates the Nginx subsystem the current Lua environment is based on. For this module, this field always takes the string value &lt;code&gt;&#34;http&#34;&lt;/code&gt;. For &lt;a href=&#34;https://github.com/openresty/stream-lua-nginx-module#readme&#34;&gt;ngx_stream_lua_module&lt;/a&gt;, however, this field takes the value &lt;code&gt;&#34;stream&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This field was first introduced in the &lt;code&gt;0.10.1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.config.debug&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;debug = ngx.config.debug&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, init_by_lua*, init_worker_by_lua*, exit_worker_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This boolean field indicates whether the current Nginx is a debug build, i.e., being built by the &lt;code&gt;./configure&lt;/code&gt; option &lt;code&gt;--with-debug&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This field was first introduced in the &lt;code&gt;0.8.7&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.config.prefix&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;prefix = ngx.config.prefix()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, init_by_lua*, init_worker_by_lua*, exit_worker_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns the Nginx server &#34;prefix&#34; path, as determined by the &lt;code&gt;-p&lt;/code&gt; command-line option when running the Nginx executable, or the path specified by the &lt;code&gt;--prefix&lt;/code&gt; command-line option when building Nginx with the &lt;code&gt;./configure&lt;/code&gt; script.&lt;/p&gt; &#xA;&lt;p&gt;This function was first introduced in the &lt;code&gt;0.9.2&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.config.nginx_version&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ver = ngx.config.nginx_version&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, init_by_lua*, init_worker_by_lua*, exit_worker_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This field take an integral value indicating the version number of the current Nginx core being used. For example, the version number &lt;code&gt;1.4.3&lt;/code&gt; results in the Lua number 1004003.&lt;/p&gt; &#xA;&lt;p&gt;This API was first introduced in the &lt;code&gt;0.9.3&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.config.nginx_configure&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;str = ngx.config.nginx_configure()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, init_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This function returns a string for the Nginx &lt;code&gt;./configure&lt;/code&gt; command&#39;s arguments string.&lt;/p&gt; &#xA;&lt;p&gt;This API was first introduced in the &lt;code&gt;0.9.5&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.config.ngx_lua_version&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ver = ngx.config.ngx_lua_version&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, init_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This field take an integral value indicating the version number of the current &lt;code&gt;ngx_lua&lt;/code&gt; module being used. For example, the version number &lt;code&gt;0.9.3&lt;/code&gt; results in the Lua number 9003.&lt;/p&gt; &#xA;&lt;p&gt;This API was first introduced in the &lt;code&gt;0.9.3&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.worker.exiting&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;exiting = ngx.worker.exiting()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, init_by_lua*, init_worker_by_lua*, exit_worker_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This function returns a boolean value indicating whether the current Nginx worker process already starts exiting. Nginx worker process exiting happens on Nginx server quit or configuration reload (aka HUP reload).&lt;/p&gt; &#xA;&lt;p&gt;This API was first introduced in the &lt;code&gt;0.9.3&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.worker.pid&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;pid = ngx.worker.pid()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, init_by_lua*, init_worker_by_lua*, exit_worker_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This function returns a Lua number for the process ID (PID) of the current Nginx worker process. This API is more efficient than &lt;code&gt;ngx.var.pid&lt;/code&gt; and can be used in contexts where the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxvarvariable&#34;&gt;ngx.var.VARIABLE&lt;/a&gt; API cannot be used (like &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#init_worker_by_lua&#34;&gt;init_worker_by_lua&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;This API was first introduced in the &lt;code&gt;0.9.5&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.worker.count&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;count = ngx.worker.count()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, init_by_lua*, init_worker_by_lua*, exit_worker_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns the total number of the Nginx worker processes (i.e., the value configured by the &lt;a href=&#34;https://nginx.org/en/docs/ngx_core_module.html#worker_processes&#34;&gt;worker_processes&lt;/a&gt; directive in &lt;code&gt;nginx.conf&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;This API was first introduced in the &lt;code&gt;0.9.20&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.worker.id&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;id = ngx.worker.id()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, init_worker_by_lua*, exit_worker_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns the ordinal number of the current Nginx worker processes (starting from number 0).&lt;/p&gt; &#xA;&lt;p&gt;So if the total number of workers is &lt;code&gt;N&lt;/code&gt;, then this method may return a number between 0 and &lt;code&gt;N - 1&lt;/code&gt; (inclusive).&lt;/p&gt; &#xA;&lt;p&gt;This function returns meaningful values only for Nginx 1.9.1+. With earlier versions of Nginx, it always returns &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ngxworkercount&#34;&gt;ngx.worker.count&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This API was first introduced in the &lt;code&gt;0.9.20&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.semaphore&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;local semaphore = require &#34;ngx.semaphore&#34;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a Lua module that implements a classic-style semaphore API for efficient synchronizations among different &#34;light threads&#34;. Sharing the same semaphore among different &#34;light threads&#34; created in different (request) contexts are also supported as long as the &#34;light threads&#34; reside in the same Nginx worker process and the &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#lua_code_cache&#34;&gt;lua_code_cache&lt;/a&gt; directive is turned on (which is the default).&lt;/p&gt; &#xA;&lt;p&gt;This Lua module does not ship with this ngx_lua module itself rather it is shipped with the &lt;a href=&#34;https://github.com/openresty/lua-resty-core&#34;&gt;lua-resty-core&lt;/a&gt; library.&lt;/p&gt; &#xA;&lt;p&gt;Please refer to the &lt;a href=&#34;https://github.com/openresty/lua-resty-core/raw/master/lib/ngx/semaphore.md&#34;&gt;documentation&lt;/a&gt; for this &lt;code&gt;ngx.semaphore&lt;/code&gt; Lua module in &lt;a href=&#34;https://github.com/openresty/lua-resty-core&#34;&gt;lua-resty-core&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;This feature requires at least ngx_lua &lt;code&gt;v0.10.0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.balancer&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;local balancer = require &#34;ngx.balancer&#34;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a Lua module that provides a Lua API to allow defining completely dynamic load balancers in pure Lua.&lt;/p&gt; &#xA;&lt;p&gt;This Lua module does not ship with this ngx_lua module itself rather it is shipped with the &lt;a href=&#34;https://github.com/openresty/lua-resty-core&#34;&gt;lua-resty-core&lt;/a&gt; library.&lt;/p&gt; &#xA;&lt;p&gt;Please refer to the &lt;a href=&#34;https://github.com/openresty/lua-resty-core/raw/master/lib/ngx/balancer.md&#34;&gt;documentation&lt;/a&gt; for this &lt;code&gt;ngx.balancer&lt;/code&gt; Lua module in &lt;a href=&#34;https://github.com/openresty/lua-resty-core&#34;&gt;lua-resty-core&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;This feature requires at least ngx_lua &lt;code&gt;v0.10.0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.ssl&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;local ssl = require &#34;ngx.ssl&#34;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This Lua module provides API functions to control the SSL handshake process in contexts like &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ssl_certificate_by_lua_block&#34;&gt;ssl_certificate_by_lua*&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This Lua module does not ship with this ngx_lua module itself rather it is shipped with the &lt;a href=&#34;https://github.com/openresty/lua-resty-core&#34;&gt;lua-resty-core&lt;/a&gt; library.&lt;/p&gt; &#xA;&lt;p&gt;Please refer to the &lt;a href=&#34;https://github.com/openresty/lua-resty-core/raw/master/lib/ngx/ssl.md&#34;&gt;documentation&lt;/a&gt; for this &lt;code&gt;ngx.ssl&lt;/code&gt; Lua module for more details.&lt;/p&gt; &#xA;&lt;p&gt;This feature requires at least ngx_lua &lt;code&gt;v0.10.0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.ocsp&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;local ocsp = require &#34;ngx.ocsp&#34;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This Lua module provides API to perform OCSP queries, OCSP response validations, and OCSP stapling planting.&lt;/p&gt; &#xA;&lt;p&gt;Usually, this module is used together with the &lt;a href=&#34;https://github.com/openresty/lua-resty-core/raw/master/lib/ngx/ssl.md&#34;&gt;ngx.ssl&lt;/a&gt; module in the context of &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#ssl_certificate_by_lua_block&#34;&gt;ssl_certificate_by_lua*&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This Lua module does not ship with this ngx_lua module itself rather it is shipped with the &lt;a href=&#34;https://github.com/openresty/lua-resty-core&#34;&gt;lua-resty-core&lt;/a&gt; library.&lt;/p&gt; &#xA;&lt;p&gt;Please refer to the &lt;a href=&#34;https://github.com/openresty/lua-resty-core/raw/master/lib/ngx/ocsp.md&#34;&gt;documentation&lt;/a&gt; for this &lt;code&gt;ngx.ocsp&lt;/code&gt; Lua module for more details.&lt;/p&gt; &#xA;&lt;p&gt;This feature requires at least ngx_lua &lt;code&gt;v0.10.0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ndk.set_var.DIRECTIVE&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;res = ndk.set_var.DIRECTIVE_NAME&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_worker_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, exit_worker_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This mechanism allows calling other Nginx C modules&#39; directives that are implemented by &lt;a href=&#34;https://github.com/simplresty/ngx_devel_kit&#34;&gt;Nginx Devel Kit&lt;/a&gt; (NDK)&#39;s set_var submodule&#39;s &lt;code&gt;ndk_set_var_value&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, the following &lt;a href=&#34;http://github.com/openresty/set-misc-nginx-module&#34;&gt;set-misc-nginx-module&lt;/a&gt; directives can be invoked this way:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/openresty/set-misc-nginx-module#set_quote_sql_str&#34;&gt;set_quote_sql_str&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/openresty/set-misc-nginx-module#set_quote_pgsql_str&#34;&gt;set_quote_pgsql_str&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/openresty/set-misc-nginx-module#set_quote_json_str&#34;&gt;set_quote_json_str&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/openresty/set-misc-nginx-module#set_unescape_uri&#34;&gt;set_unescape_uri&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/openresty/set-misc-nginx-module#set_escape_uri&#34;&gt;set_escape_uri&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/openresty/set-misc-nginx-module#set_encode_base32&#34;&gt;set_encode_base32&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/openresty/set-misc-nginx-module#set_decode_base32&#34;&gt;set_decode_base32&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/openresty/set-misc-nginx-module#set_encode_base64&#34;&gt;set_encode_base64&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/openresty/set-misc-nginx-module#set_decode_base64&#34;&gt;set_decode_base64&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/openresty/set-misc-nginx-module#set_encode_base64&#34;&gt;set_encode_hex&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/openresty/set-misc-nginx-module#set_decode_base64&#34;&gt;set_decode_hex&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/openresty/set-misc-nginx-module#set_encode_base64&#34;&gt;set_sha1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/openresty/set-misc-nginx-module#set_decode_base64&#34;&gt;set_md5&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For instance,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local res = ndk.set_var.set_escape_uri(&#39;a/b&#39;)&#xA; -- now res == &#39;a%2fb&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similarly, the following directives provided by &lt;a href=&#34;http://github.com/openresty/encrypted-session-nginx-module&#34;&gt;encrypted-session-nginx-module&lt;/a&gt; can be invoked from within Lua too:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/openresty/encrypted-session-nginx-module#set_encrypt_session&#34;&gt;set_encrypt_session&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/openresty/encrypted-session-nginx-module#set_decrypt_session&#34;&gt;set_decrypt_session&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This feature requires the &lt;a href=&#34;https://github.com/simplresty/ngx_devel_kit&#34;&gt;ngx_devel_kit&lt;/a&gt; module.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;coroutine.create&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;co = coroutine.create(f)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*, init_by_lua*, ngx.timer.*, header_filter_by_lua*, body_filter_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Creates a user Lua coroutines with a Lua function, and returns a coroutine object.&lt;/p&gt; &#xA;&lt;p&gt;Similar to the standard Lua &lt;a href=&#34;https://www.lua.org/manual/5.1/manual.html#pdf-coroutine.create&#34;&gt;coroutine.create&lt;/a&gt; API, but works in the context of the Lua coroutines created by ngx_lua.&lt;/p&gt; &#xA;&lt;p&gt;This API was first usable in the context of &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#init_by_lua&#34;&gt;init_by_lua*&lt;/a&gt; since the &lt;code&gt;0.9.2&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This API was first introduced in the &lt;code&gt;v0.6.0&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;coroutine.resume&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ok, ... = coroutine.resume(co, ...)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*, init_by_lua*, ngx.timer.*, header_filter_by_lua*, body_filter_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Resumes the execution of a user Lua coroutine object previously yielded or just created.&lt;/p&gt; &#xA;&lt;p&gt;Similar to the standard Lua &lt;a href=&#34;https://www.lua.org/manual/5.1/manual.html#pdf-coroutine.resume&#34;&gt;coroutine.resume&lt;/a&gt; API, but works in the context of the Lua coroutines created by ngx_lua.&lt;/p&gt; &#xA;&lt;p&gt;This API was first usable in the context of &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#init_by_lua&#34;&gt;init_by_lua*&lt;/a&gt; since the &lt;code&gt;0.9.2&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This API was first introduced in the &lt;code&gt;v0.6.0&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;coroutine.yield&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;... = coroutine.yield(...)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*, init_by_lua*, ngx.timer.*, header_filter_by_lua*, body_filter_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Yields the execution of the current user Lua coroutine.&lt;/p&gt; &#xA;&lt;p&gt;Similar to the standard Lua &lt;a href=&#34;https://www.lua.org/manual/5.1/manual.html#pdf-coroutine.yield&#34;&gt;coroutine.yield&lt;/a&gt; API, but works in the context of the Lua coroutines created by ngx_lua.&lt;/p&gt; &#xA;&lt;p&gt;This API was first usable in the context of &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#init_by_lua&#34;&gt;init_by_lua*&lt;/a&gt; since the &lt;code&gt;0.9.2&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This API was first introduced in the &lt;code&gt;v0.6.0&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;coroutine.wrap&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;co = coroutine.wrap(f)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*, init_by_lua*, ngx.timer.*, header_filter_by_lua*, body_filter_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Similar to the standard Lua &lt;a href=&#34;https://www.lua.org/manual/5.1/manual.html#pdf-coroutine.wrap&#34;&gt;coroutine.wrap&lt;/a&gt; API, but works in the context of the Lua coroutines created by ngx_lua.&lt;/p&gt; &#xA;&lt;p&gt;This API was first usable in the context of &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#init_by_lua&#34;&gt;init_by_lua*&lt;/a&gt; since the &lt;code&gt;0.9.2&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This API was first introduced in the &lt;code&gt;v0.6.0&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;coroutine.running&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;co = coroutine.running()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*, init_by_lua*, ngx.timer.*, header_filter_by_lua*, body_filter_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Identical to the standard Lua &lt;a href=&#34;https://www.lua.org/manual/5.1/manual.html#pdf-coroutine.running&#34;&gt;coroutine.running&lt;/a&gt; API.&lt;/p&gt; &#xA;&lt;p&gt;This API was first usable in the context of &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#init_by_lua&#34;&gt;init_by_lua*&lt;/a&gt; since the &lt;code&gt;0.9.2&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This API was first enabled in the &lt;code&gt;v0.6.0&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;coroutine.status&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;status = coroutine.status(co)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*, init_by_lua*, ngx.timer.*, header_filter_by_lua*, body_filter_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*, ssl_client_hello_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Identical to the standard Lua &lt;a href=&#34;https://www.lua.org/manual/5.1/manual.html#pdf-coroutine.status&#34;&gt;coroutine.status&lt;/a&gt; API.&lt;/p&gt; &#xA;&lt;p&gt;This API was first usable in the context of &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#init_by_lua&#34;&gt;init_by_lua*&lt;/a&gt; since the &lt;code&gt;0.9.2&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This API was first enabled in the &lt;code&gt;v0.6.0&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ngx.run_worker_thread&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ok, res1, res2, ... = ngx.run_worker_thread(threadpool, module_name, func_name, arg1, arg2, ...)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This API is still experimental and may change in the future without notice.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This API is available only for Linux.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Wrap the &lt;a href=&#34;http://nginx.org/en/docs/dev/development_guide.html#threads&#34;&gt;nginx worker thread&lt;/a&gt; to execute lua function. The caller coroutine would yield until the function returns.&lt;/p&gt; &#xA;&lt;p&gt;Only the following ngx_lua APIs could be used in &lt;code&gt;function_name&lt;/code&gt; function of the &lt;code&gt;module&lt;/code&gt; module:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ngx.encode_base64&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ngx.decode_base64&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ngx.hmac_sha1&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ngx.encode_args&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ngx.decode_args&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ngx.quote_sql_str&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ngx.re.match&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ngx.re.find&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ngx.re.gmatch&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ngx.re.sub&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ngx.re.gsub&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ngx.crc32_short&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ngx.crc32_long&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ngx.hmac_sha1&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ngx.md5_bin&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ngx.md5&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ngx.config.subsystem&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ngx.config.debug&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ngx.config.prefix&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ngx.config.nginx_version&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ngx.config.nginx_configure&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ngx.config.ngx_lua_version&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The first argument &lt;code&gt;threadpool&lt;/code&gt; specifies the Nginx thread pool name defined by &lt;a href=&#34;https://nginx.org/en/docs/ngx_core_module.html#thread_pool&#34;&gt;thread_pool&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The second argument &lt;code&gt;module_name&lt;/code&gt; specifies the lua module name to execute in the worker thread, which would return a lua table. The module must be inside the package path, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; lua_package_path &#39;/opt/openresty/?.lua;;&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The third argument &lt;code&gt;func_name&lt;/code&gt; specifies the function field in the module table as the second argument.&lt;/p&gt; &#xA;&lt;p&gt;The type of &lt;code&gt;arg&lt;/code&gt;s must be one of type below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;boolean&lt;/li&gt; &#xA; &lt;li&gt;number&lt;/li&gt; &#xA; &lt;li&gt;string&lt;/li&gt; &#xA; &lt;li&gt;nil&lt;/li&gt; &#xA; &lt;li&gt;table (the table may be recursive, and contains members of types above.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;ok&lt;/code&gt; is in boolean type, which indicate the C land error (failed to get thread from thread pool, pcall the module function failed, .etc). If &lt;code&gt;ok&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, the &lt;code&gt;res1&lt;/code&gt; is the error string.&lt;/p&gt; &#xA;&lt;p&gt;The return values (res1, ...) are returned by invocation of the module function. Normally, the &lt;code&gt;res1&lt;/code&gt; should be in boolean type, so that the caller could inspect the error.&lt;/p&gt; &#xA;&lt;p&gt;This API is useful when you need to execute the below types of tasks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CPU bound task, e.g. do md5 calculation&lt;/li&gt; &#xA; &lt;li&gt;File I/O task&lt;/li&gt; &#xA; &lt;li&gt;Call &lt;code&gt;os.execute()&lt;/code&gt; or blocking C API via &lt;code&gt;ffi&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Call external Lua library not based on cosocket or nginx&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example1: do md5 calculation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; location /calc_md5 {&#xA;     default_type &#39;text/plain&#39;;&#xA;&#xA;     content_by_lua_block {&#xA;         local ok, ret, md5_or_err = ngx.run_worker_thread(&#34;testpool&#34;, &#34;calc_md5&#34;, &#34;md5&#34;, ngx.var.arg_str)&#xA;         if not ok then&#xA;             ngx.say(ret)&#xA;             return&#xA;         end&#xA;         if not ret then&#xA;             ngx.say(md5_or_err)&#xA;             return&#xA;         end&#xA;         ngx.say(md5_or_err)&#xA;     }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;calc_md5.lua&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local resty_md5 = require &#34;resty.md5&#34;&#xA; local resty_str = require &#34;resty.string&#34;&#xA;&#xA; local function md5(str)&#xA;     local md5 = resty_md5:new()&#xA;     if not md5 then&#xA;         return false, &#34;md5 new error&#34;&#xA;     end&#xA;&#xA;     local ok = md5:update(str)&#xA;     if not ok then&#xA;         return false, &#34;md5 update error&#34;&#xA;     end&#xA;&#xA;     local digest = md5:final()&#xA;     return true, resty_str.to_hex(digest)&#xA; end&#xA; return {md5=md5}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example2: write logs into the log file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;&#xA; location /write_log_file {&#xA;     default_type &#39;text/plain&#39;;&#xA;&#xA;     content_by_lua_block {&#xA;         local ok, err = ngx.run_worker_thread(&#34;testpool&#34;, &#34;write_log_file&#34;, &#34;log&#34;, ngx.var.arg_str)&#xA;         if not ok then&#xA;             ngx.say(ok, &#34; : &#34;, err)&#xA;             return&#xA;         end&#xA;         ngx.say(ok)&#xA;     }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;write_log_file.lua&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; local function log(str)&#xA;     local file, err = io.open(&#34;/tmp/tmp.log&#34;, &#34;a&#34;)&#xA;     if not file then&#xA;         return false, err&#xA;     end&#xA;     file:write(str)&#xA;     file:flush()&#xA;     file:close()&#xA;     return true&#xA; end&#xA; return {log=log}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#nginx-api-for-lua&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Obsolete Sections&lt;/h1&gt; &#xA;&lt;p&gt;This section is just holding obsolete documentation sections that have been either renamed or removed so that existing links over the web are still valid.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Special PCRE Sequences&lt;/h2&gt; &#xA;&lt;p&gt;This section has been renamed to &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#special-escaping-sequences&#34;&gt;Special Escaping Sequences&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Lua/LuaJIT bytecode support&lt;/h2&gt; &#xA;&lt;p&gt;This section has been renamed to &lt;a href=&#34;https://raw.githubusercontent.com/openresty/lua-nginx-module/master/#luajit-bytecode-support&#34;&gt;LuaJIT bytecode support&lt;/a&gt;. As of version &lt;code&gt;v0.10.16&lt;/code&gt; of this module, the standard Lua interpreter (also known as &#34;PUC-Rio Lua&#34;) is not supported anymore.&lt;/p&gt;</summary>
  </entry>
</feed>