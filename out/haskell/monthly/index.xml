<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-05-29T02:40:28Z</updated>
  <subtitle>Monthly Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>simonmichael/hledger</title>
    <updated>2022-05-29T02:40:28Z</updated>
    <id>tag:github.com,2022-05-29:/simonmichael/hledger</id>
    <link href="https://github.com/simonmichael/hledger" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A reliable, user-friendly Plain Text Accounting tool with command line, terminal and web interfaces.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;hledger&lt;/h1&gt; &#xA;&lt;h2&gt;Robust, intuitive plain text accounting&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/licenses/gpl.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPLv3+-brightgreen.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hackage.haskell.org/package/hledger&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/hledger.svg?label=hackage&amp;amp;colorB=green&#34; alt=&#34;on hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/metapackage/hledger&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/stackage_nighly/hledger.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/metapackage/hledger&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/stackage_lts/hledger.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://bugs.hledger.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/simonmichael/hledger.svg?sanitize=true&#34; alt=&#34;github issues&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Welcome! This a brief intro to hledger. For a more detailed version, see the home page: &lt;strong&gt;&lt;a href=&#34;https://hledger.org&#34;&gt;https://hledger.org&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;hledger is lightweight, cross platform, multi-currency, double-entry accounting software. It lets you track money, investments, cryptocurrencies, invoices, time, inventory and more, in a safe, future-proof plain text data format with full version control and privacy.&lt;/p&gt; &#xA;&lt;p&gt;hledger aims to help both computer experts and regular folks gain clarity in their finances and time management. Though the UIs are basic, hledger can model any accounting situation and provide precise, clear reports. It is reliable, quick, and backed by the highly supportive &lt;a href=&#34;https://plaintextaccounting.org&#34;&gt;Plain Text Accounting&lt;/a&gt; ecosystem. Using it is an excellent way to learn double entry accounting.&lt;/p&gt; &#xA;&lt;p&gt;Compared to &lt;a href=&#34;https://plaintextaccounting.org/#software&#34;&gt;other PTA apps&lt;/a&gt;, hledger is actively maintained, with regular releases, and a strong focus on being easy to use and practical for everyday accounting.&lt;/p&gt; &#xA;&lt;p&gt;More features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installs easily on unix, mac or windows&lt;/li&gt; &#xA; &lt;li&gt;Complete, built-in documentation in multiple formats, beginner videos, tutorials etc.&lt;/li&gt; &#xA; &lt;li&gt;Multiple UIs: command-line, terminal, web, mobile, editors/IDEs&lt;/li&gt; &#xA; &lt;li&gt;Good at importing and exporting CSV; also outputs text/HTML/JSON/SQL&lt;/li&gt; &#xA; &lt;li&gt;A robust, general, well-specified multi-currency accounting engine&lt;/li&gt; &#xA; &lt;li&gt;Fast, analysing 25k transactions per second on a macbook air m1&lt;/li&gt; &#xA; &lt;li&gt;Accurate to 255 decimal places&lt;/li&gt; &#xA; &lt;li&gt;Supports your preferred account names, currencies, number formats&lt;/li&gt; &#xA; &lt;li&gt;Inspired by and partly compatible with Ledger CLI; interconvertible with Beancount&lt;/li&gt; &#xA; &lt;li&gt;Scriptable by CLI, HTTP or API, with plenty of examples&lt;/li&gt; &#xA; &lt;li&gt;Clean Haskell codebase, continually improved since 2007, with $100 regression bounties&lt;/li&gt; &#xA; &lt;li&gt;Free software licensed under GPLv3+.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;I use hledger to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;track income and spending, sometimes with budgets&lt;/li&gt; &#xA; &lt;li&gt;see time reports by day/week/month/project&lt;/li&gt; &#xA; &lt;li&gt;track reimbursables, invoices and payments&lt;/li&gt; &#xA; &lt;li&gt;predict cashflow and account balances&lt;/li&gt; &#xA; &lt;li&gt;get accurate numbers for tax filing&lt;/li&gt; &#xA; &lt;li&gt;research past events&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here&#39;s an example of the journal file format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-journal&#34;&gt;2022-01-01 opening balances as of this date&#xA;    assets&lt;span&gt;üè¶&lt;/span&gt;checking                $1000&#xA;    assets&lt;span&gt;üè¶&lt;/span&gt;savings                 $2000&#xA;    assets:cash                          $100&#xA;    liabilities:creditcard               $-50&#xA;    equity:opening/closing balances&#xA;&#xA;2022-01-15 market&#xA;    expenses:food             $50&#xA;    assets:cash              $-50&#xA;&#xA;2022-02-01 GOODWORKS CORP&#xA;    assets&lt;span&gt;üè¶&lt;/span&gt;checking           $1000&#xA;    income:salary                 $-1000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and some simple reports:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cli&#34;&gt;$ hledger bs&#xA;Balance Sheet 2022-02-15&#xA;&#xA;                        || 2022-02-15 &#xA;========================++============&#xA; Assets                 ||            &#xA;------------------------++------------&#xA; assets&lt;span&gt;üè¶&lt;/span&gt;checking   ||      $2000 &#xA; assets&lt;span&gt;üè¶&lt;/span&gt;savings    ||      $2000 &#xA; assets:cash            ||        $50 &#xA;------------------------++------------&#xA;                        ||      $4050 &#xA;========================++============&#xA; Liabilities            ||            &#xA;------------------------++------------&#xA; liabilities:creditcard ||        $50 &#xA;------------------------++------------&#xA;                        ||        $50 &#xA;========================++============&#xA; Net:                   ||      $4000 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cli&#34;&gt;$ hledger is --monthly                                            &#xA;Income Statement 2022-01-01..2022-02-28                                               &#xA;                                                                                      &#xA;               ||  Jan    Feb                                                         &#xA;===============++=============                                                        &#xA; Revenues      ||                                                                     &#xA;---------------++-------------                                                        &#xA; income:salary ||    0  $1000                                                         &#xA;---------------++-------------                                                        &#xA;               ||    0  $1000                                                         &#xA;===============++=============                                                        &#xA; Expenses      ||                                                                     &#xA;---------------++-------------                                                        &#xA; expenses:food ||  $50      0                                                         &#xA;---------------++-------------                                                        &#xA;               ||  $50      0                                                         &#xA;===============++=============                                                        &#xA; Net:          || $-50  $1000                                                         &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More examples and screenshots: &lt;a href=&#34;https://hledger.org/#how-to-get-started&#34;&gt;https://hledger.org/#how-to-get-started&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Funding&lt;/h2&gt; &#xA;&lt;p&gt;hledger is brought to you by &lt;a href=&#34;http://joyful.com&#34;&gt;Simon Michael&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/simonmichael/hledger/master/CREDITS.html&#34;&gt;140+ contributors&lt;/a&gt;, and the generous financial sponsors below.&lt;/p&gt; &#xA;&lt;p&gt;After enjoying some personal or organisational success with hledger, you might want to become one of them, to help support this work. It&#39;s easy! Please see &lt;a href=&#34;https://hledger.org/sponsor.html&#34;&gt;https://hledger.org/sponsor.html&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;!-- keep synced with sponsor.md: --&gt; &#xA;&lt;h3&gt;Organisational sponsors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/hledger/organization/0/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/0/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/1/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/1/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/2/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/2/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/3/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/3/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/4/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/4/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/5/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/5/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/6/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/6/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/7/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/7/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/8/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/8/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/9/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/9/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/10/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/10/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/11/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/11/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/12/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/12/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/13/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/13/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/14/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/14/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/15/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/15/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/16/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/16/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/17/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/17/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/18/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/18/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/19/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/19/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Individual sponsors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/hledger/individual/0/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/0/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/1/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/1/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/2/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/2/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/3/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/3/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/4/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/4/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/5/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/5/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/6/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/6/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/7/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/7/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/8/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/8/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/9/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/9/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/10/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/10/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/11/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/11/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/12/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/12/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/13/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/13/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/14/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/14/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/15/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/15/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/16/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/16/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/17/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/17/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/18/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/18/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/19/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/19/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/20/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/20/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/21/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/21/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/22/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/22/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/23/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/23/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/24/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/24/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/25/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/25/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/26/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/26/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/27/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/27/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/28/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/28/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/29/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/29/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/30/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/30/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/31/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/31/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/32/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/32/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/33/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/33/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/34/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/34/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/35/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/35/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/36/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/36/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/37/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/37/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/38/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/38/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/39/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/39/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If your logo/avatar needs to be added, &lt;a href=&#34;mailto:webmaster@hledger.org&#34;&gt;let me know&lt;/a&gt;!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>imsut/starthaskell</title>
    <updated>2022-05-29T02:40:28Z</updated>
    <id>tag:github.com,2022-05-29:/imsut/starthaskell</id>
    <link href="https://github.com/imsut/starthaskell" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>kmonad/kmonad</title>
    <updated>2022-05-29T02:40:28Z</updated>
    <id>tag:github.com,2022-05-29:/kmonad/kmonad</id>
    <link href="https://github.com/kmonad/kmonad" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An advanced keyboard manager&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;img alt=&#34;KMonad&#34; title=&#34;KMonad&#34; height=&#34;32&#34; src=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/kmonad.svg?sanitize=true&#34;&gt; &lt;/h1&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt;The Onion of Keyboard Management Tools, available on GNU/Linux, Windows, and MacOS!&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/#features&#34;&gt;Features&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/#installation&#34;&gt;Installation&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/#configuration&#34;&gt;Configuration&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/#disclaimer&#34;&gt;Disclaimer&lt;/a&gt; ‚Ä¢ &lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;KMonad is an advanced tool that lets you infinitely customize and extend the functionalities of almost any keyboard. For a detailed list of features, see &lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/#features&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to get started with the latest, stable binary release, please check out the master branch, if you are interested in the latest additions and tweaks, switch on over to develop and compile your own binary.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, if you need any help or just want to say hi, you can join our &lt;a href=&#34;https://discord.gg/3tFfWmnahN&#34;&gt;Discord server&lt;/a&gt; or jump into our &lt;a href=&#34;https://web.libera.chat/#kmonad&#34;&gt;IRC channel&lt;/a&gt; (&lt;code&gt;#kmonad@irc.libera.chat&lt;/code&gt;), which is also bridged with matrix (&lt;code&gt;#kmonad:libera.chat&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;KMonad offers advanced customization features such as &lt;strong&gt;layers&lt;/strong&gt;, &lt;strong&gt;multi-tap&lt;/strong&gt;, &lt;strong&gt;tap-hold&lt;/strong&gt;, and much more. These features are usually available at the hardware level on the QMK-firmware enabled keyboards. However, KMonad allows you to enjoy such features in virtually any keyboard by low-level system manipulations.&lt;/p&gt; &#xA;&lt;p&gt;For a good introduction to KMonad, have a look at &lt;a href=&#34;https://www.youtube.com/watch?v=Dhj1eauljwU&#34;&gt;this Youtube video&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Key Customizations&lt;/h4&gt; &#xA;&lt;p&gt;KMonad lets you map any keyboard button to any keymap. Want to swap the useless &lt;strong&gt;Caps Lock&lt;/strong&gt; key with the &lt;strong&gt;Escape&lt;/strong&gt; key? Want to have your modifiers such as &lt;strong&gt;Shift&lt;/strong&gt; and &lt;strong&gt;Control&lt;/strong&gt; on your home row, without breaking your normal typing flow? Want a modifier that is combination of &lt;strong&gt;Alt + Ctrl + Super + Shift&lt;/strong&gt;? You can do all of those and much more!&lt;/p&gt; &#xA;&lt;h4&gt;Layers&lt;/h4&gt; &#xA;&lt;p&gt;A layer is a set of keymaps assigned to your keyboard&#39;s buttons. You can have as many layers on top of your base layer as you want. For instance, you can have your regular QWERTY layout, a Colemak/ Dvorak layout, a numbers and symbols layer, a function keys layer, a layer for mouse navigation and system controls --- all in a 60% keyboard. When a particular layer is active, any keypress is interpreted according to the layout defined in that layer. With proper configurations, you can jump to a specific layer or switch to one for the next keypress, or do various other complex manipulations.&lt;/p&gt; &#xA;&lt;h4&gt;Multi-Use and Multi-Tap Buttons&lt;/h4&gt; &#xA;&lt;p&gt;One of the distinguishing features of KMonad is the vast capabilities with Multi-Use Buttons. You can have a single button do different things based on whether it is pressed quickly in succession, or pressed once, or held. For example, you can configure the &lt;strong&gt;Caps Lock&lt;/strong&gt; key to act as an &lt;strong&gt;Escape&lt;/strong&gt; button when pressed once and released, a &lt;strong&gt;Ctrl&lt;/strong&gt; modifier when held-down, and a button to jump to a layer when pressed twice quickly in succession. You can make the left and right &lt;strong&gt;Shift&lt;/strong&gt; keys to act like left and right parentheses (like the Space Cadet Shift keys) when tapped once, and regular &lt;strong&gt;Shift&lt;/strong&gt; keys when held down. The possibilities are infinite!&lt;/p&gt; &#xA;&lt;h4&gt;Command Buttons&lt;/h4&gt; &#xA;&lt;p&gt;With Command Buttons you can trigger shell commands with a tap of any button.&lt;/p&gt; &#xA;&lt;h4&gt;And More!&lt;/h4&gt; &#xA;&lt;p&gt;There are many more exciting features of KMonad that you can find in the &lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/keymap/tutorial.kbd&#34;&gt;configuration tutorial&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;For more information on how to install KMonad, please refer to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/doc/installation.md&#34;&gt;installation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;For information on how to configure KMonad, please refer you to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/keymap/tutorial.kbd&#34;&gt;the configuration tutorial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kmonad/kmonad-contrib&#34;&gt;user configurations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Want to add your own keyboard configuration to &lt;a href=&#34;https://github.com/kmonad/kmonad-contrib&#34;&gt;kmonad-contrib&lt;/a&gt;? Just fork the repository, create a new subdirectory using your GitHub username and submit a pull request!&lt;/p&gt; &#xA;&lt;h3&gt;Editor Support for the Configuration Language&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kmonad/kbd-mode&#34;&gt;Emacs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kmonad/kmonad-vim&#34;&gt;Vim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/canadaduane/vscode-kmonad&#34;&gt;VSCode&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Startup&lt;/h3&gt; &#xA;&lt;p&gt;There are startup scripts available for different init systems in &lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/startup/&#34;&gt;startup&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;For several commonly asked questions regarding various configuration issues, please see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/doc/faq.md&#34;&gt;the FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;The original maintainer is chronically ill and currently unable to work on KMonad. Luckily we have a very helpful and pleasant community that is happy to be of assistance. When energy and circumstance permits, the core developer will labour to make progress, but for now this will be sporadically and unpredictably.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hasura/graphql-engine</title>
    <updated>2022-05-29T02:40:28Z</updated>
    <id>tag:github.com,2022-05-29:/hasura/graphql-engine</id>
    <link href="https://github.com/hasura/graphql-engine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Blazing fast, instant realtime GraphQL APIs on your DB with fine grained access control, also trigger webhooks on database events.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hasura GraphQL Engine&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hasura/graphql-engine/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/hasura/graphql-engine&#34; alt=&#34;Latest release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hasura.io/docs&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-v2.x-brightgreen.svg?style=flat&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/vBPpJkS&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-discord-brightgreen.svg?logo=discord&amp;amp;style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=HasuraHQ&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Follow-HasuraHQ-blue.svg?style=flat&amp;amp;logo=twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hasura.io/newsletter/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/newsletter-subscribe-yellow.svg?style=flat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Hasura is an open source product that accelerates API development by 10x by giving you &lt;a href=&#34;https://hasura.io/graphql/&#34;&gt;GraphQL&lt;/a&gt; or REST APIs with built in authorization on your data, instantly.&lt;/p&gt; &#xA;&lt;p&gt;Read more at &lt;a href=&#34;https://hasura.io&#34;&gt;hasura.io&lt;/a&gt; and the &lt;a href=&#34;https://hasura.io/docs/&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/assets/demo.gif&#34; alt=&#34;Hasura GraphQL Engine Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/assets/realtime.gif&#34; alt=&#34;Hasura GraphQL Engine Realtime Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Make powerful queries&lt;/strong&gt;: Built-in filtering, pagination, pattern search, bulk insert, update, delete mutations&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Works with existing, live databases&lt;/strong&gt;: Point it to an existing database to instantly get a ready-to-use GraphQL API&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Realtime&lt;/strong&gt;: Convert any GraphQL query to a live query by using subscriptions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Merge remote schemas&lt;/strong&gt;: Access custom GraphQL schemas for business logic via a single GraphQL Engine endpoint. &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/remote-schemas.md&#34;&gt;&lt;strong&gt;Read more&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Extend with Actions&lt;/strong&gt;: Write REST APIs to extend Hasura‚Äôs schema with custom business logic.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Trigger webhooks or serverless functions&lt;/strong&gt;: On Postgres insert/update/delete events (&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/event-triggers.md&#34;&gt;read more&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Scheduled Triggers&lt;/strong&gt;: Execute custom business logic at specific points in time using a cron config or a one-off event.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fine-grained access control&lt;/strong&gt;: Dynamic access control that integrates with your auth system (eg: auth0, firebase-auth)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Admin UI &amp;amp; Migrations&lt;/strong&gt;: Admin UI &amp;amp; Rails-inspired schema migrations&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Supported Databases&lt;/strong&gt;: Supports PostgreSQL (and its flavours), MS SQL Server and Big Query. Support for more &lt;a href=&#34;https://hasura.io/graphql/database/&#34;&gt;databases&lt;/a&gt; coming soon.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Read more at &lt;a href=&#34;https://hasura.io&#34;&gt;hasura.io&lt;/a&gt; and the &lt;a href=&#34;https://hasura.io/docs/&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-refresh-toc --&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#quickstart&#34;&gt;Quickstart:&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#one-click-deployment-on-hasura-cloud&#34;&gt;One-click deployment on Hasura Cloud&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#other-one-click-deployment-options&#34;&gt;Other one-click deployment options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#other-deployment-methods&#34;&gt;Other deployment methods&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#architecture&#34;&gt;Architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#client-side-tooling&#34;&gt;Client-side tooling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#add-business-logic&#34;&gt;Add business logic&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#remote-schemas&#34;&gt;Remote schemas&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#trigger-webhooks-on-database-events&#34;&gt;Trigger webhooks on database events&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#demos&#34;&gt;Demos&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#realtime-applications&#34;&gt;Realtime applications&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#videos&#34;&gt;Videos&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#support--troubleshooting&#34;&gt;Support &amp;amp; Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#stay-up-to-date&#34;&gt;Stay up to date&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#brand-assets&#34;&gt;Brand assets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#translations&#34;&gt;Translations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdown-toc end --&gt; &#xA;&lt;h2&gt;Quickstart:&lt;/h2&gt; &#xA;&lt;h3&gt;One-click deployment on Hasura Cloud&lt;/h3&gt; &#xA;&lt;p&gt;The fastest and easiest way to try Hasura out is via &lt;a href=&#34;https://hasura.io/docs/latest/graphql/cloud/getting-started/index.html&#34;&gt;Hasura Cloud&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Click on the following button to deploy GraphQL engine on Hasura Cloud including Postgres add-on or using an existing Postgres database:&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://cloud.hasura.io/signup&#34;&gt;&lt;img src=&#34;https://graphql-engine-cdn.hasura.io/img/deploy_to_hasura.png&#34; alt=&#34;Deploy to Hasura Cloud&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the Hasura console&lt;/p&gt; &lt;p&gt;Click on the button &#34;Launch console&#34; to open the Hasura console.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make your first GraphQL query&lt;/p&gt; &lt;p&gt;Create a table and instantly run your first query. Follow this &lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/getting-started/first-graphql-query.html&#34;&gt;simple guide&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Other one-click deployment options&lt;/h3&gt; &#xA;&lt;p&gt;Check out the instructions for the following one-click deployment options:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Infra provider&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;One-click link&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Additional information&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Heroku&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://heroku.com/deploy?template=https://github.com/hasura/graphql-engine-heroku&#34;&gt;&lt;img src=&#34;https://www.herokucdn.com/deploy/button.svg?sanitize=true&#34; alt=&#34;Deploy to Heroku&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/guides/deployment/heroku-one-click.html&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;DigitalOcean&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://marketplace.digitalocean.com/apps/hasura?action=deploy&amp;amp;refcode=c4d9092d2c48&amp;amp;utm_source=hasura&amp;amp;utm_campaign=readme&#34;&gt;&lt;img src=&#34;https://graphql-engine-cdn.hasura.io/img/create_hasura_droplet_200px.png&#34; alt=&#34;Deploy to DigitalOcean&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/guides/deployment/digital-ocean-one-click.html#hasura-graphql-engine-digitalocean-one-click-app&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Azure&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://portal.azure.com/#create/Microsoft.Template/uri/https%3a%2f%2fraw.githubusercontent.com%2fhasura%2fgraphql-engine%2fmaster%2finstall-manifests%2fazure-container-with-pg%2fazuredeploy.json&#34;&gt;&lt;img src=&#34;http://azuredeploy.net/deploybutton.png&#34; alt=&#34;Deploy to Azure&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/guides/deployment/azure-container-instances-postgres.html&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Render&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://render.com/deploy?repo=https://github.com/render-examples/hasura-graphql&#34;&gt;&lt;img src=&#34;https://render.com/images/deploy-to-render-button.svg?sanitize=true&#34; alt=&#34;Deploy to Render&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/guides/deployment/render-one-click.html&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Other deployment methods&lt;/h3&gt; &#xA;&lt;p&gt;For Docker-based deployment and advanced configuration options, see &lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/getting-started/index.html&#34;&gt;deployment guides&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/install-manifests&#34;&gt;install manifests&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;The Hasura GraphQL Engine fronts a Postgres database instance and can accept GraphQL requests from your client apps. It can be configured to work with your existing auth system and can handle access control using field-level rules with dynamic variables from your auth system.&lt;/p&gt; &#xA;&lt;p&gt;You can also merge remote GraphQL schemas and provide a unified GraphQL API.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/assets/hasura-arch.svg?sanitize=true&#34; alt=&#34;Hasura GraphQL Engine architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Client-side tooling&lt;/h2&gt; &#xA;&lt;p&gt;Hasura works with any GraphQL client. See &lt;a href=&#34;https://github.com/chentsulin/awesome-graphql&#34;&gt;awesome-graphql&lt;/a&gt; for a list of clients. Our &lt;a href=&#34;https://hasura.io/learn/#frontend-tutorial&#34;&gt;frontend tutorial series&lt;/a&gt; also have integrations with GraphQL clients for different frameworks.&lt;/p&gt; &#xA;&lt;h2&gt;Add business logic&lt;/h2&gt; &#xA;&lt;p&gt;GraphQL Engine provides easy-to-reason, scalable and performant methods for adding custom business logic to your backend:&lt;/p&gt; &#xA;&lt;h3&gt;Remote schemas&lt;/h3&gt; &#xA;&lt;p&gt;Add custom resolvers in a remote schema in addition to Hasura&#39;s database-based GraphQL schema. Ideal for use-cases like implementing a payment API, or querying data that is not in your database - &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/remote-schemas.md&#34;&gt;read more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Actions&lt;/h3&gt; &#xA;&lt;p&gt;Actions are a way to extend Hasura‚Äôs schema with custom business logic using custom queries and mutations. Actions can be added to Hasura to handle various use cases such as data validation, data enrichment from external sources and any other complex business logic - &lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/actions/index.html&#34;&gt;read more&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Trigger webhooks on database events&lt;/h3&gt; &#xA;&lt;p&gt;Add asynchronous business logic that is triggered based on database events. Ideal for notifications, data-pipelines from Postgres or asynchronous processing - &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/event-triggers.md&#34;&gt;read more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Derived data or data transformations&lt;/h3&gt; &#xA;&lt;p&gt;Transform data in Postgres or run business logic on it to derive another dataset that can be queried using GraphQL Engine - &lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/queries/derived-data.html&#34;&gt;read more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Demos&lt;/h2&gt; &#xA;&lt;p&gt;Check out all the example applications in the &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/community/sample-apps&#34;&gt;community/sample-apps&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;Realtime applications&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Group Chat application built with React, includes a typing indicator, online users &amp;amp; new message notifications.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://realtime-chat.demo.hasura.io/&#34;&gt;Try it out&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/community/sample-apps/realtime-chat&#34;&gt;Tutorial&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Live location tracking app that shows a running vehicle changing current GPS coordinates moving on a map.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://realtime-location-tracking.demo.hasura.io/&#34;&gt;Try it out&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/community/sample-apps/realtime-location-tracking&#34;&gt;Tutorial&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A realtime dashboard for data aggregations on continuously changing data.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://realtime-poll.demo.hasura.io/&#34;&gt;Try it out&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/community/sample-apps/realtime-poll&#34;&gt;Tutorial&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=a2AhxKqd82Q&#34;&gt;Add GraphQL to a self-hosted GitLab instance&lt;/a&gt; (&lt;em&gt;3:44 mins&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=15ITBYnccgc&#34;&gt;Todo app with Auth0 and GraphQL backend&lt;/a&gt; (&lt;em&gt;4:00 mins&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=m1ChRhRLq7o&#34;&gt;GraphQL on GitLab integrated with GitLab auth&lt;/a&gt; (&lt;em&gt;4:05 mins&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=tsY573yyGWA&#34;&gt;Dashboard for 10million rides with geo-location (PostGIS, Timescale)&lt;/a&gt; (&lt;em&gt;3:06 mins&lt;/em&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support &amp;amp; Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;The documentation and community will help you troubleshoot most issues. If you have encountered a bug or need to get in touch with us, you can contact us using one of the following channels:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support &amp;amp; feedback: &lt;a href=&#34;https://discord.gg/hasura&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Issue &amp;amp; bug tracking: &lt;a href=&#34;https://github.com/hasura/graphql-engine/issues&#34;&gt;GitHub issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Follow product updates: &lt;a href=&#34;https://twitter.com/hasurahq&#34;&gt;@HasuraHQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Talk to us on our &lt;a href=&#34;https://hasura.io&#34;&gt;website chat&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We are committed to fostering an open and welcoming environment in the community. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/code-of-conduct.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to report a security issue, please &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/SECURITY.md&#34;&gt;read this&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Stay up to date&lt;/h2&gt; &#xA;&lt;p&gt;We release new features every month. Sign up for our newsletter by using the link below. We send newsletters only once a month. &lt;a href=&#34;https://hasura.io/newsletter/&#34;&gt;https://hasura.io/newsletter/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Brand assets&lt;/h2&gt; &#xA;&lt;p&gt;Hasura brand assets (logos, the Hasura mascot, powered by badges etc.) can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/assets/brand&#34;&gt;assets/brand&lt;/a&gt; folder. Feel free to use them in your application/website etc. We&#39;d be thrilled if you add the &#34;Powered by Hasura&#34; badge to your applications built using Hasura. ‚ù§Ô∏è&lt;/p&gt; &#xA;&lt;div style=&#34;display: flex;&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/assets/brand/powered_by_hasura_primary_darkbg.svg?sanitize=true&#34; width=&#34;150px&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/assets/brand/powered_by_hasura_primary_lightbg.svg?sanitize=true&#34; width=&#34;150px&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- For light backgrounds --&amp;gt;&#xA;&amp;lt;a href=&#34;https://hasura.io&#34;&amp;gt;&#xA;  &amp;lt;img width=&#34;150px&#34; src=&#34;https://graphql-engine-cdn.hasura.io/img/powered_by_hasura_primary_darkbg.svg&#34; /&amp;gt;&#xA;&amp;lt;/a&amp;gt;&#xA;&#xA;&amp;lt;!-- For dark backgrounds --&amp;gt;&#xA;&amp;lt;a href=&#34;https://hasura.io&#34;&amp;gt;&#xA;  &amp;lt;img width=&#34;150px&#34; src=&#34;https://graphql-engine-cdn.hasura.io/img/powered_by_hasura_primary_lightbg.svg&#34; /&amp;gt;&#xA;&amp;lt;/a&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The core GraphQL Engine is available under the &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License 2.0&lt;/a&gt; (Apache-2.0).&lt;/p&gt; &#xA;&lt;p&gt;All &lt;strong&gt;other contents&lt;/strong&gt; (except those in &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/server&#34;&gt;&lt;code&gt;server&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/cli&#34;&gt;&lt;code&gt;cli&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/console&#34;&gt;&lt;code&gt;console&lt;/code&gt;&lt;/a&gt; directories) are available under the &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/LICENSE-community&#34;&gt;MIT License&lt;/a&gt;. This includes everything in the &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/docs&#34;&gt;&lt;code&gt;docs&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/community&#34;&gt;&lt;code&gt;community&lt;/code&gt;&lt;/a&gt; directories.&lt;/p&gt; &#xA;&lt;h2&gt;Translations&lt;/h2&gt; &#xA;&lt;p&gt;This readme is available in the following translations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.japanese.md&#34;&gt;Japanese &lt;span&gt;üáØüáµ&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;üôè&lt;/span&gt; &lt;a href=&#34;https://github.com/moksahero&#34;&gt;@moksahero&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.french.md&#34;&gt;French &lt;span&gt;üá´üá∑&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;üôè&lt;/span&gt; &lt;a href=&#34;https://github.com/l0ck3&#34;&gt;@l0ck3&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.bosnian.md&#34;&gt;Bosnian &lt;span&gt;üáßüá¶&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;üôè&lt;/span&gt; &lt;a href=&#34;https://github.com/hajro92&#34;&gt;@hajro92&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.russian.md&#34;&gt;Russian &lt;span&gt;üá∑üá∫&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;üôè&lt;/span&gt; &lt;a href=&#34;https://github.com/highflyer910&#34;&gt;@highflyer910&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.greek.md&#34;&gt;Greek üá¨üá∑&lt;/a&gt; (&lt;span&gt;üôè&lt;/span&gt; &lt;a href=&#34;https://github.com/MIP2000&#34;&gt;@MIP2000&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.mx_spanish.md&#34;&gt;Spanish üá≤üáΩ&lt;/a&gt;(&lt;span&gt;üôè&lt;/span&gt; &lt;a href=&#34;https://github.com/ferdox2&#34;&gt;@ferdox2&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.indonesian.md&#34;&gt;Indonesian &lt;span&gt;üáÆüá©&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;üôè&lt;/span&gt; &lt;a href=&#34;https://github.com/anwari666&#34;&gt;@anwari666&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.portuguese_br.md&#34;&gt;Brazilian Portuguese &lt;span&gt;üáßüá∑&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;üôè&lt;/span&gt; &lt;a href=&#34;https://github.com/rubensmp&#34;&gt;@rubensmp&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.german.md&#34;&gt;German üá©üá™&lt;/a&gt; (&lt;span&gt;üôè&lt;/span&gt; &lt;a href=&#34;https://github.com/FynnGrandke&#34;&gt;@FynnGrandke&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.chinese.md&#34;&gt;Chinese &lt;span&gt;üá®üá≥&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;üôè&lt;/span&gt; &lt;a href=&#34;https://github.com/jagreetdg&#34;&gt;@jagreetdg&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/johnbanq&#34;&gt;@johnbanq&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.turkish.md&#34;&gt;Turkish &lt;span&gt;üáπüá∑&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;üôè&lt;/span&gt; &lt;a href=&#34;https://github.com/berat&#34;&gt;@berat&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.korean.md&#34;&gt;Korean &lt;span&gt;üá∞üá∑&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;üôè&lt;/span&gt; &lt;a href=&#34;https://github.com/laskdjlaskdj12&#34;&gt;@ÎùºÏä§ÌÅ¨&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Translations for other files can be found &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>agda/agda</title>
    <updated>2022-05-29T02:40:28Z</updated>
    <id>tag:github.com,2022-05-29:/agda/agda</id>
    <link href="https://github.com/agda/agda" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Agda is a dependently typed programming language / interactive theorem prover.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Agda 2&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://hackage.haskell.org/package/Agda&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/Agda.svg?label=Hackage&#34; alt=&#34;Hackage version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.stackage.org/package/Agda&#34;&gt;&lt;img src=&#34;https://www.stackage.org/package/Agda/badge/lts?label=Stackage&#34; alt=&#34;Stackage version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/agda/agda/actions?query=workflow%3A%22Build%2C+Test%2C+and+Benchmark%22&#34;&gt;&lt;img src=&#34;https://github.com/agda/agda/workflows/Build,%20Test,%20and%20Benchmark/badge.svg?branch=master&#34; alt=&#34;Test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/agda/agda/actions?query=workflow%3A%22stack+build%22&#34;&gt;&lt;img src=&#34;https://github.com/agda/agda/workflows/stack%20build/badge.svg?sanitize=true&#34; alt=&#34;Stack Build Status via GH Actions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://agda.readthedocs.io/en/latest/?badge=latest&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/agda/badge/?version=latest&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://agda.zulipchat.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/zulip-join_chat-brightgreen.svg?sanitize=true&#34; alt=&#34;Agda Zulip&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/agda/agda/master/doc/user-manual/agda.svg?sanitize=true&#34; alt=&#34;The official Agda logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that this README is only about Agda, not its standard library. See the &lt;a href=&#34;http://wiki.portal.chalmers.se/agda/pmwiki.php&#34;&gt;Agda Wiki&lt;/a&gt; for information about the library.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://agda.readthedocs.io&#34;&gt;User manual&lt;/a&gt; (per-commit pdf can be downloaded from the &lt;a href=&#34;https://github.com/agda/agda/actions?query=workflow%3A%22User+Manual%22&#34;&gt;github actions&lt;/a&gt; page)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/agda/agda/raw/master/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://agda.readthedocs.io/en/latest/getting-started/installation.html&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://agda.readthedocs.io/en/latest/getting-started/a-taste-of-agda.html&#34;&gt;Quick guide to editing, type checking and compiling Agda code&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing to Agda&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contribution how-to: &lt;a href=&#34;https://github.com/agda/agda/raw/master/HACKING.md&#34;&gt;&lt;code&gt;HACKING&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/andreasabel/haskell-style-guide/raw/master/haskell-style.md&#34;&gt;Haskell style-guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>xmonad/xmonad</title>
    <updated>2022-05-29T02:40:28Z</updated>
    <id>tag:github.com,2022-05-29:/xmonad/xmonad</id>
    <link href="https://github.com/xmonad/xmonad" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The core of xmonad, a small but functional ICCCM-compliant tiling window manager&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://xmonad.org/&#34;&gt;&lt;img alt=&#34;XMonad logo&#34; src=&#34;https://xmonad.org/images/logo-wrapped.svg?sanitize=true&#34; height=&#34;150&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://hackage.haskell.org/package/xmonad&#34;&gt;&lt;img alt=&#34;Hackage&#34; src=&#34;https://img.shields.io/hackage/v/xmonad?logo=haskell&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xmonad/xmonad/raw/readme/LICENSE&#34;&gt;&lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/github/license/xmonad/xmonad&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://haskell.org/&#34;&gt;&lt;img alt=&#34;Made in Haskell&#34; src=&#34;https://img.shields.io/badge/Made%20in-Haskell-%235e5086?logo=haskell&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/xmonad/xmonad/actions/workflows/stack.yml&#34;&gt;&lt;img alt=&#34;Stack&#34; src=&#34;https://img.shields.io/github/workflow/status/xmonad/xmonad/Stack?label=Stack&amp;amp;logo=githubactions&amp;amp;logoColor=white&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xmonad/xmonad/actions/workflows/haskell-ci.yml&#34;&gt;&lt;img alt=&#34;Cabal&#34; src=&#34;https://img.shields.io/github/workflow/status/xmonad/xmonad/Haskell-CI?label=Cabal&amp;amp;logo=githubactions&amp;amp;logoColor=white&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xmonad/xmonad/actions/workflows/nix.yml&#34;&gt;&lt;img alt=&#34;Nix&#34; src=&#34;https://img.shields.io/github/workflow/status/xmonad/xmonad/Nix?label=Nix&amp;amp;logo=githubactions&amp;amp;logoColor=white&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/sponsors/xmonad&#34;&gt;&lt;img alt=&#34;GitHub Sponsors&#34; src=&#34;https://img.shields.io/github/sponsors/xmonad?label=GitHub%20Sponsors&amp;amp;logo=githubsponsors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/xmonad&#34;&gt;&lt;img alt=&#34;Open Collective&#34; src=&#34;https://img.shields.io/opencollective/all/xmonad?label=Open%20Collective&amp;amp;logo=opencollective&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://web.libera.chat/#xmonad&#34;&gt;&lt;img alt=&#34;Chat on #xmonad@irc.libera.chat&#34; src=&#34;https://img.shields.io/badge/%23%20chat-on%20libera-brightgreen&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://matrix.to/#/#xmonad:matrix.org&#34;&gt;&lt;img alt=&#34;Chat on #xmonad:matrix.org&#34; src=&#34;https://img.shields.io/matrix/xmonad:matrix.org?logo=matrix&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;xmonad&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;A tiling window manager for X11.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://xmonad.org/&#34;&gt;XMonad&lt;/a&gt; is a tiling window manager for X11. Windows are arranged automatically to tile the screen without gaps or overlap, maximising screen use. Window manager features are accessible from the keyboard: a mouse is optional. xmonad is written, configured and extensible in Haskell. Custom layout algorithms, key bindings and other extensions may be written by the user in config files. Layouts are applied dynamically, and different layouts may be used on each workspace. Xinerama is fully supported, allowing windows to be tiled on several physical screens.&lt;/p&gt; &#xA;&lt;p&gt;This repository contains the &lt;a href=&#34;https://hackage.haskell.org/package/xmonad&#34;&gt;xmonad&lt;/a&gt; package, a minimal, stable, yet extensible core. It is accompanied by &lt;a href=&#34;https://github.com/xmonad/xmonad-contrib&#34;&gt;xmonad-contrib&lt;/a&gt;, a library of hundreds of additional community-maintained tiling algorithms and extension modules. The two combined make for a powerful X11 window-manager with endless customization possibilities. They are, quite literally, libraries for creating your own window manager.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;For installation and configuration instructions, please see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xmonad.org/download.html&#34;&gt;downloading and installing xmonad&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xmonad.org/INSTALL.html&#34;&gt;installing latest xmonad snapshot from git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xmonad.org/TUTORIAL.html&#34;&gt;configuring xmonad&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you run into any trouble, consult our &lt;a href=&#34;https://xmonad.org/documentation.html&#34;&gt;documentation&lt;/a&gt; or ask the &lt;a href=&#34;https://xmonad.org/community.html&#34;&gt;community&lt;/a&gt; for help.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome all forms of contributions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xmonad/xmonad/issues&#34;&gt;bug reports and feature ideas&lt;/a&gt; (also to &lt;a href=&#34;https://github.com/xmonad/xmonad-contrib/issues&#34;&gt;xmonad-contrib&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xmonad/xmonad/pulls&#34;&gt;bug fixes, new features, new extensions&lt;/a&gt; (usually to &lt;a href=&#34;https://github.com/xmonad/xmonad-contrib/pulls&#34;&gt;xmonad-contrib&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;documentation fixes and improvements: &lt;a href=&#34;https://github.com/xmonad/xmonad&#34;&gt;xmonad&lt;/a&gt;, &lt;a href=&#34;https://github.com/xmonad/xmonad-contrib&#34;&gt;xmonad-contrib&lt;/a&gt;, &lt;a href=&#34;https://github.com/xmonad/xmonad-web&#34;&gt;xmonad-web&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;helping others in the &lt;a href=&#34;https://xmonad.org/community.html&#34;&gt;community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;financial support: &lt;a href=&#34;https://github.com/sponsors/xmonad&#34;&gt;GitHub Sponsors&lt;/a&gt;, &lt;a href=&#34;https://opencollective.com/xmonad&#34;&gt;Open Collective&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please do read the &lt;a href=&#34;https://github.com/xmonad/xmonad/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; document for more information about bug reporting and code contributions. For a brief overview of the architecture and code conventions, see the &lt;a href=&#34;https://xmonad.github.io/xmonad-docs/xmonad-contrib/XMonad-Doc-Developing.html&#34;&gt;documentation for the &lt;code&gt;XMonad.Doc.Developing&lt;/code&gt; module&lt;/a&gt;. If in doubt, &lt;a href=&#34;https://xmonad.org/community.html&#34;&gt;talk to us&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;p&gt;Started in 2007 by &lt;a href=&#34;https://github.com/spencerjanssen&#34;&gt;Spencer Janssen&lt;/a&gt;, &lt;a href=&#34;https://github.com/donsbot&#34;&gt;Don Stewart&lt;/a&gt; and &lt;a href=&#34;https://github.com/JasonCreighton&#34;&gt;Jason Creighton&lt;/a&gt;, the &lt;a href=&#34;https://xmonad.org/&#34;&gt;XMonad&lt;/a&gt; project lives on thanks to &lt;a href=&#34;https://github.com/xmonad/xmonad/raw/master/MAINTAINERS.md&#34;&gt;new generations of maintainers&lt;/a&gt; and &lt;a href=&#34;https://github.com/xmonad/xmonad/graphs/contributors&#34;&gt;dozens of contributors&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>input-output-hk/cardano-base</title>
    <updated>2022-05-29T02:40:28Z</updated>
    <id>tag:github.com,2022-05-29:/input-output-hk/cardano-base</id>
    <link href="https://github.com/input-output-hk/cardano-base" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code used throughout the Cardano eco-system&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;cardano-base&lt;/h1&gt; &#xA;&lt;p&gt;A collection of miscellaneous packages used by Cardano that cover:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;cryptography&lt;/li&gt; &#xA; &lt;li&gt;serialization&lt;/li&gt; &#xA; &lt;li&gt;slotting&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each sub-project has its own README.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/input-output-hk/cardano-base/wiki&#34;&gt;wiki&lt;/a&gt; for more documentation.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>haskell/haskell-language-server</title>
    <updated>2022-05-29T02:40:28Z</updated>
    <id>tag:github.com,2022-05-29:/haskell/haskell-language-server</id>
    <link href="https://github.com/haskell/haskell-language-server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official haskell ide support via language server (LSP). Successor of ghcide &amp; haskell-ide-engine.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;haskell-language-server&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/haskell/haskell-language-server/master/docs/logos/logo-256.png&#34; alt=&#34;haskell-language-server&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/haskell/haskell-language-server/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/haskell/haskell-language-server.svg?sanitize=true&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hackage.haskell.org/package/haskell-language-server&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/haskell-language-server.svg?logo=haskell&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/haskell/haskell-language-server/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache2-green.svg?dummy&#34; alt=&#34;License Apache 2.0&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/haskell/haskell-language-server/&#34;&gt;&lt;img src=&#34;https://img.shields.io/circleci/project/github/haskell/haskell-language-server/master.svg?sanitize=true&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/haskell/haskell-language-server/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/haskell/haskell-language-server/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;GitHub Testing Workflow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/haskell/haskell-language-server/actions/workflows/nix.yml&#34;&gt;&lt;img src=&#34;https://github.com/haskell/haskell-language-server/actions/workflows/nix.yml/badge.svg?sanitize=true&#34; alt=&#34;GitHub Nix Workflow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://web.libera.chat/?channels=#haskell-language-server&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-on%20libera-brightgreen.svg?sanitize=true&#34; alt=&#34;ircchat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codetriage.com/haskell/haskell-language-server&#34;&gt;&lt;img src=&#34;https://www.codetriage.com/haskell/haskell-language-server/badges/users.svg?sanitize=true&#34; alt=&#34;codetriage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The official Haskell language server (LSP) implementation. Consult the &lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/&#34;&gt;project documentation&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/features.html&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/installation.html&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/supported-versions.html&#34;&gt;Supported GHC Versions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/configuration.html&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/troubleshooting.html&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/contributing/index.html&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>PostgREST/postgrest</title>
    <updated>2022-05-29T02:40:28Z</updated>
    <id>tag:github.com,2022-05-29:/PostgREST/postgrest</id>
    <link href="https://github.com/PostgREST/postgrest" rel="alternate"></link>
    <summary type="html">&lt;p&gt;REST API for any Postgres database&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/PostgREST/postgrest/main/static/bigger-logo.png&#34; alt=&#34;Logo&#34; title=&#34;Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.patreon.com/postgrest&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-Patreon-orange.svg?colorB=F96854&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.paypal.me/postgrest&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-PayPal-green.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/begriffs/postgrest&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/gitter-join%20chat%20%E2%86%92-brightgreen.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/begriffs/postgrest&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://postgrest.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-latest-brightgreen.svg?style=flat&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/postgrest/postgrest/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/postgrest/postgrest.svg?sanitize=true&#34; alt=&#34;Docker Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/PostgREST/postgrest/actions?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/postgrest/postgrest/actions/workflows/ci.yaml/badge.svg?branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/PostgREST/postgrest&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/postgrest/postgrest/main&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://hackage.haskell.org/package/postgrest&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/postgrest.svg?label=hackage&#34; alt=&#34;Hackage docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;PostgREST serves a fully RESTful API from any existing PostgreSQL database. It provides a cleaner, more standards-compliant, faster API than you are likely to write from scratch.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt; &lt;a href=&#34;https://www.cybertec-postgresql.com/en/?utm_source=postgrest.org&amp;amp;utm_medium=referral&amp;amp;utm_campaign=postgrest&#34; target=&#34;_blank&#34;&gt; &lt;img width=&#34;222px&#34; src=&#34;https://raw.githubusercontent.com/PostgREST/postgrest/main/static/cybertec-new.png&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt; &lt;a href=&#34;https://www.2ndquadrant.com/en/?utm_campaign=External%20Websites&amp;amp;utm_source=PostgREST&amp;amp;utm_medium=Logo&#34; target=&#34;_blank&#34;&gt; &lt;img width=&#34;296px&#34; src=&#34;https://raw.githubusercontent.com/PostgREST/postgrest/main/static/2ndquadrant.png&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt; &lt;a href=&#34;https://tryretool.com/?utm_source=sponsor&amp;amp;utm_campaign=postgrest&#34; target=&#34;_blank&#34;&gt; &lt;img width=&#34;296px&#34; src=&#34;https://raw.githubusercontent.com/PostgREST/postgrest/main/static/retool.png&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt; &lt;a href=&#34;https://gnuhost.eu/?utm_source=sponsor&amp;amp;utm_campaign=postgrest&#34; target=&#34;_blank&#34;&gt; &lt;img width=&#34;296px&#34; src=&#34;https://raw.githubusercontent.com/PostgREST/postgrest/main/static/gnuhost.png&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt; &lt;a href=&#34;https://supabase.io?utm_source=postgrest%20backers&amp;amp;utm_medium=open%20source%20partner&amp;amp;utm_campaign=postgrest%20backers%20github&amp;amp;utm_term=homepage&#34; target=&#34;_blank&#34;&gt; &lt;img width=&#34;296px&#34; src=&#34;https://raw.githubusercontent.com/PostgREST/postgrest/main/static/supabase.png&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt; &lt;a href=&#34;https://oblivious.ai/?utm_source=sponsor&amp;amp;utm_campaign=postgrest&#34; target=&#34;_blank&#34;&gt; &lt;img width=&#34;296px&#34; src=&#34;https://raw.githubusercontent.com/PostgREST/postgrest/main/static/oblivious.jpg&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Big thanks to our sponsors! You can join them by supporting PostgREST on &lt;a href=&#34;https://www.patreon.com/postgrest&#34;&gt;Patreon&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the binary (&lt;a href=&#34;https://github.com/PostgREST/postgrest/releases/latest&#34;&gt;latest release&lt;/a&gt;) for your platform.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Invoke for help:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;postgrest --help&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;http://postgrest.org&#34;&gt;Documentation&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Latest documentation is at &lt;a href=&#34;http://postgrest.org&#34;&gt;postgrest.org&lt;/a&gt;. You can contribute to the docs in &lt;a href=&#34;https://github.com/PostgREST/postgrest-docs&#34;&gt;PostgREST/postgrest-docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;TLDR; subsecond response times for up to 2000 requests/sec on Heroku free tier. If you&#39;re used to servers written in interpreted languages, prepare to be pleasantly surprised by PostgREST performance.&lt;/p&gt; &#xA;&lt;p&gt;Three factors contribute to the speed. First the server is written in &lt;a href=&#34;https://www.haskell.org/&#34;&gt;Haskell&lt;/a&gt; using the &lt;a href=&#34;http://www.yesodweb.com/blog/2011/03/preliminary-warp-cross-language-benchmarks&#34;&gt;Warp&lt;/a&gt; HTTP server (aka a compiled language with lightweight threads). Next it delegates as much calculation as possible to the database including&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Serializing JSON responses directly in SQL&lt;/li&gt; &#xA; &lt;li&gt;Data validation&lt;/li&gt; &#xA; &lt;li&gt;Authorization&lt;/li&gt; &#xA; &lt;li&gt;Combined row counting and retrieval&lt;/li&gt; &#xA; &lt;li&gt;Data post in single command (&lt;code&gt;returning *&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Finally it uses the database efficiently with the &lt;a href=&#34;https://nikita-volkov.github.io/hasql-benchmarks/&#34;&gt;Hasql&lt;/a&gt; library by&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Keeping a pool of db connections&lt;/li&gt; &#xA; &lt;li&gt;Using the PostgreSQL binary protocol&lt;/li&gt; &#xA; &lt;li&gt;Being stateless to allow horizontal scaling&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;PostgREST &lt;a href=&#34;http://postgrest.org/en/stable/auth.html&#34;&gt;handles authentication&lt;/a&gt; (via JSON Web Tokens) and delegates authorization to the role information defined in the database. This ensures there is a single declarative source of truth for security. When dealing with the database the server assumes the identity of the currently authenticated user, and for the duration of the connection cannot do anything the user themselves couldn&#39;t. Other forms of authentication can be built on top of the JWT primitive. See the docs for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;A robust long-lived API needs the freedom to exist in multiple versions. PostgREST does versioning through database schemas. This allows you to expose tables and views without making the app brittle. Underlying tables can be superseded and hidden behind public facing views.&lt;/p&gt; &#xA;&lt;h2&gt;Self-documentation&lt;/h2&gt; &#xA;&lt;p&gt;PostgREST uses the &lt;a href=&#34;https://openapis.org/&#34;&gt;OpenAPI&lt;/a&gt; standard to generate up-to-date documentation for APIs. You can use a tool like &lt;a href=&#34;https://github.com/swagger-api/swagger-ui&#34;&gt;Swagger-UI&lt;/a&gt; to render interactive documentation for demo requests against the live API server.&lt;/p&gt; &#xA;&lt;p&gt;This project uses HTTP to communicate other metadata as well. For instance the number of rows returned by an endpoint is reported by - and limited with - range headers. More about &lt;a href=&#34;http://begriffs.com/posts/2014-03-06-beyond-http-header-links.html&#34;&gt;that&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Data Integrity&lt;/h2&gt; &#xA;&lt;p&gt;Rather than relying on an Object Relational Mapper and custom imperative coding, this system requires you put declarative constraints directly into your database. Hence no application can corrupt your data (including your API server).&lt;/p&gt; &#xA;&lt;p&gt;The PostgREST exposes HTTP interface with safeguards to prevent surprises, such as enforcing idempotent PUT requests.&lt;/p&gt; &#xA;&lt;p&gt;See examples of &lt;a href=&#34;http://www.tutorialspoint.com/postgresql/postgresql_constraints.htm&#34;&gt;PostgreSQL constraints&lt;/a&gt; and the &lt;a href=&#34;http://postgrest.org/en/stable/api.html&#34;&gt;API guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supporting development&lt;/h2&gt; &#xA;&lt;p&gt;You can help PostgREST ongoing maintenance and development by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Making a regular donation through Patreon &lt;a href=&#34;https://www.patreon.com/postgrest&#34;&gt;https://www.patreon.com/postgrest&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Alternatively, you can make a one-time donation via Paypal &lt;a href=&#34;https://www.paypal.me/postgrest&#34;&gt;https://www.paypal.me/postgrest&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Every donation will be spent on making PostgREST better for the whole community.&lt;/p&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;The PostgREST organization is grateful to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The project &lt;a href=&#34;https://github.com/PostgREST/postgrest/raw/main/BACKERS.md&#34;&gt;sponsors and backers&lt;/a&gt; who support PostgREST&#39;s development.&lt;/li&gt; &#xA; &lt;li&gt;The project &lt;a href=&#34;https://github.com/PostgREST/postgrest/graphs/contributors&#34;&gt;contributors&lt;/a&gt; who have improved PostgREST immensely with their code and good judgement. See more details in the &lt;a href=&#34;https://github.com/PostgREST/postgrest/raw/main/CHANGELOG.md&#34;&gt;changelog&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The cool logo came from &lt;a href=&#34;https://github.com/casalaina&#34;&gt;Mikey Casalaina&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>purescript/purescript</title>
    <updated>2022-05-29T02:40:28Z</updated>
    <id>tag:github.com,2022-05-29:/purescript/purescript</id>
    <link href="https://github.com/purescript/purescript" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A strongly-typed language that compiles to JavaScript&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/purescript/purescript/master/logo.png&#34; alt=&#34;PureScript&#34; width=&#34;392&#34;&gt; &#xA;&lt;p&gt;A small strongly typed programming language with expressive types that compiles to JavaScript, written in and inspired by Haskell.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://hackage.haskell.org/package/purescript&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/purescript.svg?sanitize=true&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/purescript/purescript/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/purescript/purescript/actions/workflows/ci.yml/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Language info&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://purescript.org&#34;&gt;PureScript home&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/purescript/purescript/releases&#34;&gt;Releases &amp;amp; changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/purescript/purescript/raw/master/CONTRIBUTING.md&#34;&gt;Contributing to PureScript&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://book.purescript.org/&#34;&gt;PureScript book&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/purescript/documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://try.purescript.org&#34;&gt;Try PureScript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://pursuit.purescript.org/&#34;&gt;Pursuit Package Index&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Help!&lt;/h2&gt; &#xA;&lt;h3&gt;Community Spaces&lt;/h3&gt; &#xA;&lt;p&gt;The following spaces are governed by the &lt;a href=&#34;https://github.com/purescript/governance/raw/master/CODE_OF_CONDUCT.md&#34;&gt;PureScript Community Code of Conduct&lt;/a&gt;. The majority of PureScript users use these spaces to discuss and collaborate on PureScript-related topics:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://purescript.org/chat&#34;&gt;PureScript Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discourse.purescript.org/&#34;&gt;PureScript Discourse&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Unaffiliated Spaces&lt;/h3&gt; &#xA;&lt;p&gt;Some PureScript users also collaborate in the below spaces. These do not fall under the code of conduct linked above. They may have no code of conduct or one very different than the one linked above.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://matrix.to/#/#purescript:matrix.org&#34;&gt;PureScript Matrix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/tagged/purescript&#34;&gt;PureScript on StackOverflow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://libera.chat/&#34;&gt;The &lt;code&gt;#purescript&lt;/code&gt; channel on Libera.Chat&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>github/semantic</title>
    <updated>2022-05-29T02:40:28Z</updated>
    <id>tag:github.com,2022-05-29:/github/semantic</id>
    <link href="https://github.com/github/semantic" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Parsing, analyzing, and comparing source code across many languages&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Semantic&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;semantic&lt;/code&gt; is a Haskell library and command line tool for parsing, analyzing, and comparing source code.&lt;/p&gt; &#xA;&lt;p&gt;In a hurry? Check out our documentation of &lt;a href=&#34;https://raw.githubusercontent.com/github/semantic/main/docs/examples.md&#34;&gt;example uses for the &lt;code&gt;semantic&lt;/code&gt; command line tool&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Table of Contents&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/semantic/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/semantic/main/#language-support&#34;&gt;Language support&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/semantic/main/#development&#34;&gt;Development&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/semantic/main/#technology-and-architecture&#34;&gt;Technology and architecture&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/semantic/main/#licensing&#34;&gt;Licensing&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Run &lt;code&gt;semantic --help&lt;/code&gt; for complete list of up-to-date options.&lt;/p&gt; &#xA;&lt;h4&gt;Parse&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: semantic parse [--sexpression | (--json-symbols|--symbols) |&#xA;                        --proto-symbols | --show | --quiet] [FILES...]&#xA;  Generate parse trees for path(s)&#xA;&#xA;Available options:&#xA;  --sexpression            Output s-expression parse trees (default)&#xA;  --json-symbols,--symbols Output JSON symbol list&#xA;  --proto-symbols          Output protobufs symbol list&#xA;  --show                   Output using the Show instance (debug only, format&#xA;                           subject to change without notice)&#xA;  --quiet                  Don&#39;t produce output, but show timing stats&#xA;  -h,--help                Show this help text&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Language support&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Language&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Parse&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;AST Symbols‚Ä†&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Stack graphs&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Ruby&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JavaScript&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;TypeScript&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;üöß&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Python&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;üöß&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Go&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;PHP&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Java&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;üöß&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JSON&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚¨úÔ∏è&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚¨úÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JSX&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;TSX&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;CodeQL&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Haskell&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;üöß&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;üöß&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;‚Ä† Used for &lt;a href=&#34;https://help.github.com/en/github/managing-files-in-a-repository/navigating-code-on-github&#34;&gt;code navigation&lt;/a&gt; on github.com.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‚úÖ ‚Äî Supported&lt;/li&gt; &#xA; &lt;li&gt;üî∂ ‚Äî Partial support&lt;/li&gt; &#xA; &lt;li&gt;üöß ‚Äî Under development&lt;/li&gt; &#xA; &lt;li&gt;‚¨ú - N/A Ô∏è&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;semantic&lt;/code&gt; requires at least GHC 8.10.1 and Cabal 3.0. We strongly recommend using &lt;a href=&#34;https://www.haskell.org/ghcup/&#34;&gt;&lt;code&gt;ghcup&lt;/code&gt;&lt;/a&gt; to sandbox GHC versions, as GHC packages installed through your OS&#39;s package manager may not install statically-linked versions of the GHC boot libraries. &lt;code&gt;semantic&lt;/code&gt; currently builds only on Unix systems; users of other operating systems may wish to use the &lt;a href=&#34;https://github.com/github/semantic/packages/11609&#34;&gt;Docker images&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We use &lt;code&gt;cabal&#39;s&lt;/code&gt; &lt;a href=&#34;https://cabal.readthedocs.io/en/3.4/nix-local-build-overview.html&#34;&gt;Nix-style local builds&lt;/a&gt; for development. To get started quickly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:github/semantic.git&#xA;cd semantic&#xA;script/bootstrap&#xA;cabal v2-build all&#xA;cabal v2-run semantic:test&#xA;cabal v2-run semantic:semantic -- --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the &lt;a href=&#34;https://bazel.build&#34;&gt;Bazel&lt;/a&gt; build system for development. To learn more about Bazel and why it might give you a better development experience, check the &lt;a href=&#34;https://raw.githubusercontent.com/github/semantic/main/docs/build.md&#34;&gt;build documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:github/semantic.git&#xA;cd semantic&#xA;script/bootstrap-bazel&#xA;bazel build //...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;stack&lt;/code&gt; as a build tool is not officially supported; there is &lt;a href=&#34;https://github.com/jkachmar/semantic-stack-yaml&#34;&gt;unofficial &lt;code&gt;stack.yaml&lt;/code&gt; support&lt;/a&gt; available, though we cannot make guarantees as to its stability.&lt;/p&gt; &#xA;&lt;h2&gt;Technology and architecture&lt;/h2&gt; &#xA;&lt;p&gt;Architecturally, &lt;code&gt;semantic&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Generates per-language Haskell syntax types based on &lt;a href=&#34;https://github.com/tree-sitter/tree-sitter&#34;&gt;tree-sitter&lt;/a&gt; grammar definitions.&lt;/li&gt; &#xA; &lt;li&gt;Reads blobs from a filesystem or provided via a protocol buffer request.&lt;/li&gt; &#xA; &lt;li&gt;Returns blobs or performs analysis.&lt;/li&gt; &#xA; &lt;li&gt;Renders output in one of many supported formats.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Throughout its lifestyle, &lt;code&gt;semantic&lt;/code&gt; has leveraged a number of interesting algorithms and techniques, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Myers&#39; algorithm (SES) as described in the paper &lt;a href=&#34;http://www.xmailserver.org/diff2.pdf&#34;&gt;&lt;em&gt;An O(ND) Difference Algorithm and Its Variations&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;RWS as described in the paper &lt;a href=&#34;https://db.in.tum.de/~finis/papers/RWS-Diff.pdf&#34;&gt;&lt;em&gt;RWS-Diff: Flexible and Efficient Change Detection in Hierarchical Data&lt;/em&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Open unions and &lt;a href=&#34;http://www.cs.ru.nl/~W.Swierstra/Publications/DataTypesALaCarte.pdf&#34;&gt;data types √† la carte&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;An implementation of &lt;a href=&#34;https://plum-umd.github.io/abstracting-definitional-interpreters/&#34;&gt;Abstracting Definitional Interpreters&lt;/a&gt; extended to work with an √† la carte representation of syntax terms.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! Please see our &lt;a href=&#34;https://raw.githubusercontent.com/github/semantic/main/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt; and our &lt;a href=&#34;https://raw.githubusercontent.com/github/semantic/main/CODE_OF_CONDUCT.md&#34;&gt;code of conduct&lt;/a&gt; for details on how to participate in our community.&lt;/p&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;Semantic is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/github/semantic/main/semantic/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>input-output-hk/plutus-pioneer-program</title>
    <updated>2022-05-29T02:40:28Z</updated>
    <id>tag:github.com,2022-05-29:/input-output-hk/plutus-pioneer-program</id>
    <link href="https://github.com/input-output-hk/plutus-pioneer-program" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Plutus Pioneer Program&lt;/h1&gt; &#xA;&lt;h2&gt;Lectures&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLNEK_Ejlx3x2nLM4fAck2JS6KhFQlXq2N&#34;&gt;Lecture #1&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/X80uNXenWF4&#34;&gt;Part 1 - Welcome and Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/bfofA4MM0QE&#34;&gt;Part 2 - The EUTxO-Model&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/zPaDp4R9X7o&#34;&gt;Part 3 - Building the Example Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/Bj6bqRGT1L0&#34;&gt;Part 4 - Auction Contract in the EUTxO-Model&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/K61Si6iQ-Js&#34;&gt;Part 5 - Auction Contract on the Playground&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/tfanOE2ARho&#34;&gt;Part 6 - Homework&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLNEK_Ejlx3x0mhPmOjPSHZPtTFpfJo3Nd&#34;&gt;Lecture #2&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/BEr7lcCPjnA&#34;&gt;Part 1 - Triggering Change&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/xgnmMl-eIIM&#34;&gt;Part 2 - Low Level, Untyped Validation Scripts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/HoB_PqeZPNc&#34;&gt;Part 3 - High Level, Typed Validation Scripts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/V5P2gKHos48&#34;&gt;Part 4 - Summary&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/_r-EpXzQGKo&#34;&gt;Part 5 - Homework&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLNEK_Ejlx3x2zxcfoVGARFExzOHwXFCCL&#34;&gt;Lecture #3&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/sLMhsqiWeGU&#34;&gt;Part 1 - Configuring Playground Time Out&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/B66xLrGXwmw&#34;&gt;Part 2 - Script Contexts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/mf06ll-4j2w&#34;&gt;Part 3 - Handling Time&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/ae7U_yKIQ0Y&#34;&gt;Part 4 - A Vesting Example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/XqFILXV_ACM&#34;&gt;Part 5 - Parameterized Contracts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/ABtffZPoUqU&#34;&gt;Part 6 - Deploying to the Cardano Testnet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/GGUT2O_0urQ&#34;&gt;Part 7 - Homework&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/uyaPtayBRb8&#34;&gt;Part 8 - Summary&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLNEK_Ejlx3x230-g-U02issX5BiWAgmSi&#34;&gt;Lecture #4&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/gxMW9uXTEj4&#34;&gt;Part 1 - Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/f2w-MB3X4a0&#34;&gt;Part 2 - Monads&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/qoUfgaHs1CI&#34;&gt;Part 3 - The EmulatorTrace Monad&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/yKX5Ce8Y0VQ&#34;&gt;Part 4 - The Contract Monad&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/sxRLzR0jdiY&#34;&gt;Part 5 - Homework &amp;amp; Summary&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLNEK_Ejlx3x0G8V8CDBnRDZ86POVsrfzw&#34;&gt;Lecture #5&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/mGPqi9m0EPw&#34;&gt;Part 1 - Start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/4iNTgjovMRg&#34;&gt;Part 2 - Values&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/DBUdFsZpW7A&#34;&gt;Part 3 - A Simple Minting Policy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/4SROikF8JwE&#34;&gt;Part 4 - A More Realistic Minting Policy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/2lKN0ZL_EQU&#34;&gt;Part 5 - NFT&#39;s&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/j7yT2OqGY6U&#34;&gt;Part 6 - Homework&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLNEK_Ejlx3x2sBWXHdFBRgkzPF6N-1LVi&#34;&gt;Lecture #6&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/TfWKxdli4eI&#34;&gt;Part 1 - Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/w7_27sQIqkY&#34;&gt;Part 2 - The Minting Policy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/kfvzrC9J02k&#34;&gt;Part 3 - Minting with the CLI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/tW7uoY16gC0&#34;&gt;Part 4 - Deployment Scenarios&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/JgNhY_uuuGA&#34;&gt;Part 5 - The Contracts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/X6AyZIZ0vaE&#34;&gt;Part 6 - Minting with the PAB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/KmNOFltlRiA&#34;&gt;Part 7 - Summary&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLNEK_Ejlx3x3Y5xvAsVqq46S9xkHopSGU&#34;&gt;Lecture #7&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/CLOHdIGgy90&#34;&gt;Part 1 - Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/JXKf1JwVAOE&#34;&gt;Part 2 - Commit Schemes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/yczHkTzDnpk&#34;&gt;Part 3 - Implementation without State Machines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/7jiaQRA-wKI&#34;&gt;Part 4 - State Machines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/J0rD_hmsMVo&#34;&gt;Part 5 - Homework&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLNEK_Ejlx3x0UIixvEQG2Y2mmFL6__pEJ&#34;&gt;Lecture #8&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/mqHifIPefus&#34;&gt;Part 1 - Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/y5O58-NpnJ4&#34;&gt;Part 2 - Another State Machine Example: Token Sale&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/LG9O8YbBXyM&#34;&gt;Part 3 - Automatic Testing using Emulator Traces&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/wJQnQtLxi2E&#34;&gt;Part 4 - Test Coverage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/naLA0OMIF1Q&#34;&gt;Part 5 - Interlude: Optics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/9mrYT9UXLO8&#34;&gt;Part 6 - Property-Based Testing with QuickCheck&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/49oAwySp6Ys&#34;&gt;Part 7 - Property-Based Testing of Plutus Contracts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/u2Plwc3Gkrs&#34;&gt;Part 8 - Homework&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLNEK_Ejlx3x2zSFnzWA4Gbr_AVTz-4rzf&#34;&gt;Lecture #9&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/433VbouC-30&#34;&gt;Part 1 - Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/ce_Yv8BlW7c&#34;&gt;Part 2 - Simon Thompson: Marlowe Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/hd-E5DCN8uc&#34;&gt;Part 3 - Alexander Nemish: Marlowe in Plutus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/Vx_ygegrY78&#34;&gt;Part 4 - Brian Bush: The Marlowe CLI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/l0LXjh8J-go&#34;&gt;Part 5 - Marlowe Playground Demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/iYdyUaq_enA&#34;&gt;Part 6 - Homework&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLNEK_Ejlx3x3EV7FKhlogJgS27dWgwI9B&#34;&gt;Lecture #10&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/AnID8hn68DA&#34;&gt;Part 1 - Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/xhEMEH0C2XU&#34;&gt;Part 2 - The Private Testnet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/kFi-7HyBN-s&#34;&gt;Part 3 - Plutus &amp;amp; Staking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/5cBu4J5RRZ4&#34;&gt;Part 4 - Trying it on the Testnet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/9oWmDXoxtmI&#34;&gt;Part 5 - Conclusion&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Code Examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lecture #1: &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week01&#34;&gt;English Auction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #2: &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week02&#34;&gt;Simple Validation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #3: &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week03&#34;&gt;Script Contexts &amp;amp; Parameterized Contracts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #4: &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week04&#34;&gt;Monads, Traces &amp;amp; Contracts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #5: &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week05&#34;&gt;Native Tokens&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #6: &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week06&#34;&gt;Deployment&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #7: &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week07&#34;&gt;State Machines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #8: &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week08&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #9: &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week09&#34;&gt;Marlowe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #10: &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week10&#34;&gt;Staking&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Exercises&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Week #1&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Clone the &lt;a href=&#34;https://github.com/input-output-hk/plutus-apps&#34;&gt;The Plutus-Apps repository&lt;/a&gt;, check out the correct commit as specified in &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week01/cabal.project&#34;&gt;cabal.project&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Install NixOS cross-referencing the following resources. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://nixos.org/download.html&#34;&gt;https://nixos.org/download.html&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://docs.plutus-community.com&#34;&gt;https://docs.plutus-community.com&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;A few resources to understand the what and why regarding NixOS &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://nixos.org/manual/nix/stable&#34;&gt;https://nixos.org/manual/nix/stable&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://serokell.io/blog/what-is-nix&#34;&gt;https://serokell.io/blog/what-is-nix&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Set-up IOHK binary caches &lt;a href=&#34;https://github.com/input-output-hk/plutus#iohk-binary-cache&#34;&gt;How to set up the IOHK binary caches&lt;/a&gt;. &#34;If you do not do this, you will end up building GHC, which takes several hours. If you find yourself building GHC, &lt;em&gt;stop&lt;/em&gt; and fix the cache.&#34;&lt;/li&gt; &#xA;   &lt;li&gt;Enter a &lt;code&gt;nix-shell&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Build the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week01&#34;&gt;English Auction&lt;/a&gt; contract with &lt;code&gt;cabal build&lt;/code&gt; (you may need to run &lt;code&gt;cabal update&lt;/code&gt; first).&lt;/li&gt; &#xA;   &lt;li&gt;Go to the &lt;code&gt;plutus-playground-client&lt;/code&gt; folder in the &lt;code&gt;plutus-apps&lt;/code&gt; repository.&lt;/li&gt; &#xA;   &lt;li&gt;Start the Playground server with &lt;code&gt;plutus-playground-server&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Start the Playground client (in another &lt;code&gt;nix-shell&lt;/code&gt;) with &lt;code&gt;npm start&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Copy-paste the auction contract into the Playground editor, do not forget to remove the module header.&lt;/li&gt; &#xA;   &lt;li&gt;Compile.&lt;/li&gt; &#xA;   &lt;li&gt;Simulate various auction scenarios.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Week #2&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Fix and complete the code in the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week02/src/Week02/Homework1.hs&#34;&gt;Homework1&lt;/a&gt; module.&lt;/li&gt; &#xA;   &lt;li&gt;Fix and complete the code in the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week02/src/Week02/Homework2.hs&#34;&gt;Homework2&lt;/a&gt; module.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Week #3&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Fix and complete the code in the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week03/src/Week03/Homework1.hs&#34;&gt;Homework1&lt;/a&gt; module.&lt;/li&gt; &#xA;   &lt;li&gt;Fix and complete the code in the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week03/src/Week03/Homework2.hs&#34;&gt;Homework2&lt;/a&gt; module.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Week #4&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Implement function &lt;code&gt;payTrace&lt;/code&gt; in the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week04/src/Week04/Homework.hs&#34;&gt;Homework&lt;/a&gt; module.&lt;/li&gt; &#xA;   &lt;li&gt;Handle exceptions thrown by &lt;code&gt;submitTx&lt;/code&gt; in function &lt;code&gt;payContract&lt;/code&gt; in the same module.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Week #5&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Implement a Mary-era-style minting policy in the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week05/src/Week05/Homework1.hs&#34;&gt;Homework1&lt;/a&gt; module.&lt;/li&gt; &#xA;   &lt;li&gt;Fix the token name to the empty ByteString in the NFT contract in the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week05/src/Week05/Homework2.hs&#34;&gt;Homework2&lt;/a&gt; module.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Week #6&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Try to replicate what is done in the lecture - minting tokens with the &lt;code&gt;cardano-cli&lt;/code&gt; and the PAB.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Week #7&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Implement the game of &#34;Rock, Paper, Scissors&#34; using state machines.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Week #8&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Add a new operation close to the TokenSale-contract that allows the seller to close the contract and retrieve all remaining funds.&lt;/li&gt; &#xA;   &lt;li&gt;Modify the tests accordingly.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Week #9m&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Modify the example Marlowe contract, so that Charlie must put down twice the deposit in the very beginning, which gets split between Alice and Bob if Charlie refuses to make his choice.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Some Plutus Modules&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Ledger.Scripts&lt;/code&gt;, contains functions related to untyped Plutus scripts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Ledger.Typed.Scripts&lt;/code&gt;, contains functions related to typed Plutus scripts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Plutus.Contract&lt;/code&gt;, contains definitions and functions for writing offchain code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Plutus.Contract.StateMachine&lt;/code&gt;, contains definitions and functions for working with &lt;em&gt;state machines&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Plutus.Contract.Test&lt;/code&gt;, contains support for automatic tests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Plutus.Contract.Test.ContractModel&lt;/code&gt;, contains support for automatic property-based tests using &lt;code&gt;QuickCheck&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Plutus.V1.Ledger.Ada&lt;/code&gt;, contains definitions and functions related to &lt;em&gt;ADA&lt;/em&gt;-values.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Plutus.V1.Ledger.Interval&lt;/code&gt;, contains the definition of intervals and functions for working with them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Plutus.V1.Ledger.Value&lt;/code&gt;, contains definitions and functions related to &lt;em&gt;values&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Plutus.V1.Ledger.Time&lt;/code&gt;, contains time-related types and functions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PlutusTx&lt;/code&gt;, contains important types like &lt;code&gt;Data&lt;/code&gt; and &lt;code&gt;BuiltinData&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PlutusTx.IsData.Class&lt;/code&gt;, contains the &lt;code&gt;ToData&lt;/code&gt; and &lt;code&gt;FromData&lt;/code&gt; classes and related functions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Wallet.Emulator&lt;/code&gt;, contains types and functions for dealing with wallets.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Additional Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/input-output-hk/plutus&#34;&gt;The Plutus repository&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/input-output-hk/plutus-apps&#34;&gt;The Plutus-Apps repository&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Learn You a Haskell for Great Good: &lt;a href=&#34;http://learnyouahaskell.com/&#34;&gt;original&lt;/a&gt;, &lt;a href=&#34;https://hansruec.github.io/learn-you-a-haskell-remastered/01-first-things-first.html&#34;&gt;remastered&lt;/a&gt; and &lt;a href=&#34;https://hub.gke2.mybinder.org/user/jamesdbrock-lea-askell-notebook-24dgdx7w/lab/tree/learn_you_a_haskell/00-preface.ipynb&#34;&gt;interactive notebook&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLJ3w5xyG4JWmBVIigNBytJhvSSfZZzfTm&#34;&gt;Haskell &amp;amp; Cryptocurrencies course Mongolia&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/woofpool/cardano-private-testnet-setup&#34;&gt;Private Testnet Setup&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>benwbooth/cleo</title>
    <updated>2022-05-29T02:40:28Z</updated>
    <id>tag:github.com,2022-05-29:/benwbooth/cleo</id>
    <link href="https://github.com/benwbooth/cleo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Beginnings of a parser for a new functional language&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Beginnings of a parser for a new functional language&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kowainik/learn4haskell</title>
    <updated>2022-05-29T02:40:28Z</updated>
    <id>tag:github.com,2022-05-29:/kowainik/learn4haskell</id>
    <link href="https://github.com/kowainik/learn4haskell" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üë©‚Äçüè´ üë®‚Äçüè´ Learn Haskell basics in 4 pull requests&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;learn4haskell&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kowainik/learn4haskell/main/images/HacktoberFest2021-Learn4Haskell-Banner.png&#34; alt=&#34;Learn4Haskell&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;üö® &lt;strong&gt;Important notice: This course continues BAU even after Hacktoberfest&lt;/strong&gt; üö®&lt;/p&gt; &#xA;&lt;p&gt;You can find the results of Hacktoberfest 2020 for &lt;a href=&#34;https://github.com/kowainik/learn4haskell&#34;&gt;Learn4Haskell&lt;/a&gt; in the following blog post:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kowainik.github.io/posts/hacktoberfest2020&#34;&gt;Brave New Hacktoberfest&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;It&#39;s the time of the year when thousand pull requests are starting to float in the air like a leaf on the wind üçÉ&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s Hacktoberfest! And we are happy to be part of this fantastic event.&lt;/p&gt; &#xA;&lt;p&gt;Usually, people contribute to projects within the communities they spend most of their time already and don&#39;t try to go out of those boundaries. But why not use this time to learn something challenging, something fresh, something that you never had time for?&lt;/p&gt; &#xA;&lt;p&gt;You can get the benefits of Hacktoberfest while learning something new fascinating concepts ‚Äì Functional Programming with Haskell.&lt;/p&gt; &#xA;&lt;p&gt;And we&#39;re here to help!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;4 Pull Request to get the T-Shirt or plant a tree as stands in the Hacktoberfest rules.&lt;/li&gt; &#xA; &lt;li&gt;4 Pull Request to learn to program in Haskell.&lt;/li&gt; &#xA; &lt;li&gt;4 Pull Request to blow your mind.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kowainik/learn4haskell/main/#what-is-learn4haskell&#34;&gt;What is Learn4Haskell&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kowainik/learn4haskell/main/#course-plan&#34;&gt;Course Plan&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kowainik/learn4haskell/main/#goals&#34;&gt;Goals&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kowainik/learn4haskell/main/#who-can-participate&#34;&gt;Who can participate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kowainik/learn4haskell/main/#what-you-will-get-from-this-course&#34;&gt;What you will get from this course&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kowainik/learn4haskell/main/#how-to-get-started&#34;&gt;How to get started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kowainik/learn4haskell/main/#installing-haskell&#34;&gt;Installing Haskell&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kowainik/learn4haskell/main/#haskell-ide&#34;&gt;Haskell IDE&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kowainik/learn4haskell/main/#how-to-develop&#34;&gt;How to develop&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kowainik/learn4haskell/main/#who-we-are&#34;&gt;Who we are&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kowainik/learn4haskell/main/#how-can-you-help&#34;&gt;How can you help&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is Learn4Haskell&lt;/h2&gt; &#xA;&lt;p&gt;Learn4Haskell is a GitHub-located course that will get you into the Haskell Functional Programming world in just 4 Pull Requests.&lt;/p&gt; &#xA;&lt;p&gt;This course is organised as a coding project. So you can complete the course without needing to exit your editor.&lt;/p&gt; &#xA;&lt;p&gt;This works in the following way. When you decide to start the project, all you need to do is to fork the project. We have prepared 4 separate modules ‚Äî chapters. Each part contains educational material and lots of examples that we provide in a simple form that doesn&#39;t require you to know anything about functional programming beforehand. Also, each chapter contains several exercises on everything that is explained by us. You can solve the tasks on your way and at the end open a PR to your fork with this chapter&#39;s solution and summon us (by shouting out our nicknames there). We would be happy to give you feedback on your progress, explain problematic concepts or just support you mentally!&lt;/p&gt; &#xA;&lt;p&gt;Each chapter contains unique information and covers different topics. We suggest going through them in order. However, if you think that some of the chapters are already familiar to you, feel free to skip onto the next one. If you would like to talk to us, you can even rely on PRs for the chapter you have questions about.&lt;/p&gt; &#xA;&lt;p&gt;Chapters are stuffed with information but are aimed to be completed without additional resources. You may spend an evening per chapter, but we swear it&#39;s worth it!&lt;/p&gt; &#xA;&lt;p&gt;At the end of the course, you should be able to independently create and read basic Haskell code and understand Monads and other famous concepts of Functional Programming.&lt;/p&gt; &#xA;&lt;h3&gt;Course Plan&lt;/h3&gt; &#xA;&lt;p&gt;Here is a more concrete plan of the mystical 4 Chapters we prepared for you. These are the highlights of each part.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chapter One&lt;/strong&gt; ‚Äì What is Haskell, what are its particularities, basic Haskell syntax, functions, types, expressions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chapter Two&lt;/strong&gt; ‚Äì FP concepts in the language, immutability, pattern matching, recursion, polymorphism, laziness, Higher-ordered functions, partial applications, eta-reduction.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chapter Three&lt;/strong&gt; ‚Äì Focus on Types. Type aliases, ADTs, Product types and Records, Sum types and Enumerations, Newtypes, Typeclasses.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chapter Four&lt;/strong&gt; ‚Äì Kinds. Three monsters of functional programming: Functor, Applicative, Monad.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Goals&lt;/h2&gt; &#xA;&lt;p&gt;We created the Learn4Haskell project in pursuit of the following goals:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Help others to learn Haskell&lt;/li&gt; &#xA; &lt;li&gt;Give a beginner-friendly and self-consistent course with theory and practice in the same place&lt;/li&gt; &#xA; &lt;li&gt;Explain Haskell topics before each task, but strive to be concise and useful at the same time. It&#39;s a tough balance!&lt;/li&gt; &#xA; &lt;li&gt;Help people who want to participate in Hacktoberfest and Open-Source, but also want to learn new things during this process&lt;/li&gt; &#xA; &lt;li&gt;Provide review and feedback on solutions, so people are never alone in this challenging yet exciting journey!&lt;/li&gt; &#xA; &lt;li&gt;Give people who completed this course all the necessary understandings to be able to work with basic projects that use standard features. We also intend that you have a strong basis on what they should do to be able to continue their functional programming studies.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Who can participate&lt;/h2&gt; &#xA;&lt;p&gt;Everyone!&lt;/p&gt; &#xA;&lt;p&gt;We welcome everyone and would be happy to assist you in this journey!&lt;/p&gt; &#xA;&lt;p&gt;The course is intended for people who don&#39;t know Haskell or know only language basics, though.&lt;/p&gt; &#xA;&lt;p&gt;If you are already an experienced Haskell developer and have come here for learning advanced topics, this course might not be that for you. But you still can help us! Your feedback and suggestions would be helpful for us as well as for the language newcomers who decide to work with this course.&lt;/p&gt; &#xA;&lt;h2&gt;What you will get from this course&lt;/h2&gt; &#xA;&lt;p&gt;This course has many benefits upon completion. Check them out to be sure that it fits your expectations!&lt;/p&gt; &#xA;&lt;p&gt;Participation in this course would give you:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;4 Pull Requests required for Hacktoberfest completion&lt;/li&gt; &#xA; &lt;li&gt;Basic knowledge of the most functional programming language&lt;/li&gt; &#xA; &lt;li&gt;Understanding of the functional programming concepts that you would be able to use in your day-to-day life afterwards&lt;/li&gt; &#xA; &lt;li&gt;On-the-fly feedback and help from experienced Haskell developers and educators&lt;/li&gt; &#xA; &lt;li&gt;Interesting challenges&lt;/li&gt; &#xA; &lt;li&gt;Fun!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Honestly, this seems like a pretty rad deal!&lt;/p&gt; &#xA;&lt;h2&gt;How to get started&lt;/h2&gt; &#xA;&lt;p&gt;Starting to learn Haskell with Learn4Haskell is a piece of cake!&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.github.com/en/free-pro-team@latest/github/getting-started-with-github/fork-a-repo&#34;&gt;Fork this repository&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;‚ö†&lt;/span&gt; Add the &lt;code&gt;hacktoberfest&lt;/code&gt; topic to your fork. Otherwise, &lt;a href=&#34;https://hacktoberfest.digitalocean.com/hacktoberfest-update&#34;&gt;your PRs won&#39;t count&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Enable GitHub Actions for your forked repository. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Visit: &lt;a href=&#34;https://github.com/&#34;&gt;https://github.com/&lt;/a&gt;&amp;lt;YOUR_GITHUB_USERNAME&amp;gt;/learn4haskell/actions&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kowainik/learn4haskell/main/#installing-haskell&#34;&gt;Install the Haskell compiler&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Open the &lt;code&gt;src/Chapter1.hs&lt;/code&gt; file, and start learning and solving tasks!&lt;/li&gt; &#xA; &lt;li&gt;After you finish the first chapter (or any other chapter, or even if you are stuck in the middle), open &lt;a href=&#34;https://docs.github.com/en/free-pro-team@latest/github/collaborating-with-issues-and-pull-requests/creating-a-pull-request&#34;&gt;Pull Request&lt;/a&gt; &lt;strong&gt;to your fork&lt;/strong&gt; with the solution and mention @vrom911 and @chshersh and we would be on our way for the review.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note, that you should open a PR for your fork of this repo, not this repo. Everyone has their solutions to the included tasks, and they don&#39;t mix together well in one repo üôÇ&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;However, if you find some bugs or problems in this repo, you can open a PR to Learn4Haskell directly. We appreciate any help and feedback!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Learn4Haskell has 4 chapters that you can walk through and submit 4 pull requests to complete the Hacktoberfest event (or just for knowledge and your enjoyment).&lt;/p&gt; &#xA;&lt;p&gt;So, you can start right now with forking. Following this we&#39;ll describe how you can install all the necessary items to be able to run this course locally.&lt;/p&gt; &#xA;&lt;h3&gt;Installing Haskell&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re on Windows, install the &lt;code&gt;haskell-dev&lt;/code&gt; and &lt;code&gt;make&lt;/code&gt; packages &lt;a href=&#34;https://chocolatey.org/install&#34;&gt;using Chocolatey&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;choco install haskell-dev make&#xA;refreshenv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re on Linux or macOS, then the process is easy:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://www.haskell.org/ghcup/&#34;&gt;ghcup&lt;/a&gt; and follow &lt;code&gt;ghcup&lt;/code&gt; instructions for successful installation (remember to restart your terminal afterwards to avoid an &lt;code&gt;unknown ghcup command&lt;/code&gt; error on the next step).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the latest version of the Haskell compiler ‚Äî GHC ‚Äî and the &lt;a href=&#34;https://www.haskell.org/cabal/&#34;&gt;Cabal&lt;/a&gt; build tool. After you install &lt;code&gt;ghcup&lt;/code&gt;, it is easy to install the rest with a few commands from your terminal&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ghcup install ghc 8.10.4&#xA;ghcup set ghc 8.10.4&#xA;ghcup install cabal 3.2.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;cabal update&lt;/code&gt; to fetch the latest info about Haskell packages.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Haskell IDE&lt;/h3&gt; &#xA;&lt;p&gt;If you don&#39;t have any IDE preferences, we recommend installing &lt;a href=&#34;https://code.visualstudio.com/download&#34;&gt;Visual Studio Code&lt;/a&gt; with the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=haskell.haskell&#34;&gt;Haskell plugin&lt;/a&gt;. The mentioned plugin would give you everything required to immediately start coding with Haskell.&lt;/p&gt; &#xA;&lt;h3&gt;Gitpod&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitpod.io/#https://github.com/kowainik/learn4haskell&#34;&gt;&lt;img src=&#34;https://gitpod.io/button/open-in-gitpod.svg?sanitize=true&#34; alt=&#34;Open in Gitpod&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gitpod.io/&#34;&gt;Gitpod&lt;/a&gt; is a VSCode-based Web IDE. With it, you can get a Haskell environment out-of-the-box. It&#39;s free to use up to 50 hours per month.&lt;/p&gt; &#xA;&lt;p&gt;Just prepend &lt;code&gt;gitpod.io#&lt;/code&gt; to your repo URL and you are ready to go. It will take some time to initialize the workspace for the first time it opens. It only keeps changes under &lt;code&gt;/workspace&lt;/code&gt;, and it will be deleted after a period of inactivity unless it&#39;s pinned.&lt;/p&gt; &#xA;&lt;h3&gt;How to develop&lt;/h3&gt; &#xA;&lt;p&gt;The course assumes that you install Haskell tooling (GHC and Cabal), edit code in the corresponding chapters, run GHCi (Haskell interpreter, explained in the course) from the root of this project and load your chapters to check your code. Don&#39;t worry, each chapter explains all the needed information!&lt;/p&gt; &#xA;&lt;p&gt;We also provide a Makefile with commands to test your solutions locally with the included prepared test-suite. We have also configured the CI using GitHub Actions on Learn4Haskell to check your answers at GitHub automatically!&lt;/p&gt; &#xA;&lt;p&gt;To run all tests for Chapter One:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make test-chapter1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run tests only for basic tasks for Chapter One (without the advanced tasks):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make test-chapter1-basic&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similar commands are provided for all chapters from One to Four.&lt;/p&gt; &#xA;&lt;h2&gt;Who we are&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vrom911.github.io/&#34;&gt;Veronika (@vrom911)&lt;/a&gt; and &lt;a href=&#34;https://kodimensional.dev/&#34;&gt;Dmitrii (@chshersh)&lt;/a&gt; are experienced Haskell developers. Together we drive this open source organisation ‚Äî &lt;a href=&#34;https://kowainik.github.io/&#34;&gt;Kowainik&lt;/a&gt;. We have a lot of open source projects and libraries in Haskell that are used in the Haskell community. We are also working on a lot of tutorials and guides in Haskell and mentoring people who are keen to learn Haskell as well. Moreover, Dmitrii has a few years of experience teaching Haskell courses in the university to CS students.&lt;/p&gt; &#xA;&lt;p&gt;We are passionate about Functional Programming and Haskell in particular. But at the same time, we understand how difficult it can be to get into all these ideas on your own. That is why we&#39;ve decided to start this course to help newcomers. With the interactive learning process and live discussions we&#39;ve included, Haskell will not be that scary. We will do our best so that it especially won&#39;t be the case for you or any others participating here!&lt;/p&gt; &#xA;&lt;h2&gt;How can you help&lt;/h2&gt; &#xA;&lt;p&gt;You can help us by supporting us on Ko-Fi or via GitHub sponsorship program:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ko-fi.com/kowainik&#34;&gt;Kowainik Ko-Fi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sponsors/vrom911&#34;&gt;Veronika Romashkina via GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sponsors/chshersh&#34;&gt;Dmitrii Kovanikov via GitHub&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We also appreciate any feedback on our course a lot! You can submit your feedback using the following form:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.google.com/forms/d/e/1FAIpQLScBVhLxq5CgGnAfIGUE-fCoOUqeGkDY2HXzbT7KV2jjLOsmjQ/viewform&#34;&gt;Feedback Form&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>jgm/pandoc</title>
    <updated>2022-05-29T02:40:28Z</updated>
    <id>tag:github.com,2022-05-29:/jgm/pandoc</id>
    <link href="https://github.com/jgm/pandoc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Universal markup converter&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Pandoc&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jgm/pandoc/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/jgm/pandoc.svg?label=current+release&#34; alt=&#34;github release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hackage.haskell.org/package/pandoc&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/pandoc.svg?label=hackage&#34; alt=&#34;hackage release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://formulae.brew.sh/formula/pandoc&#34;&gt;&lt;img src=&#34;https://img.shields.io/homebrew/v/pandoc.svg?sanitize=true&#34; alt=&#34;homebrew&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.stackage.org/lts/package/pandoc-types&#34;&gt;&lt;img src=&#34;https://stackage.org/package/pandoc/badge/lts&#34; alt=&#34;stackage LTS package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jgm/pandoc/actions&#34;&gt;&lt;img src=&#34;https://github.com/jgm/pandoc/workflows/CI%20tests/badge.svg?sanitize=true&#34; alt=&#34;CI tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.gnu.org/licenses/gpl.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPLv2+-lightgray.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://groups.google.com/forum/#!forum/pandoc-discuss&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/pandoc-discuss-red.svg?style=social&#34; alt=&#34;pandoc-discuss on google groups&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;The universal markup converter&lt;/h2&gt; &#xA;&lt;p&gt;Pandoc is a &lt;a href=&#34;https://haskell.org&#34;&gt;Haskell&lt;/a&gt; library for converting from one markup format to another, and a command-line tool that uses this library. It can convert &lt;em&gt;from&lt;/em&gt;&lt;/p&gt; &#xA;&lt;div id=&#34;input-formats&#34;&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;bibtex&lt;/code&gt; (&lt;a href=&#34;https://ctan.org/pkg/bibtex&#34;&gt;BibTeX&lt;/a&gt; bibliography)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;biblatex&lt;/code&gt; (&lt;a href=&#34;https://ctan.org/pkg/biblatex&#34;&gt;BibLaTeX&lt;/a&gt; bibliography)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;commonmark&lt;/code&gt; (&lt;a href=&#34;https://commonmark.org&#34;&gt;CommonMark&lt;/a&gt; Markdown)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;commonmark_x&lt;/code&gt; (&lt;a href=&#34;https://commonmark.org&#34;&gt;CommonMark&lt;/a&gt; Markdown with extensions)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;creole&lt;/code&gt; (&lt;a href=&#34;http://www.wikicreole.org/wiki/Creole1.0&#34;&gt;Creole 1.0&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;csljson&lt;/code&gt; (&lt;a href=&#34;https://citeproc-js.readthedocs.io/en/latest/csl-json/markup.html&#34;&gt;CSL JSON&lt;/a&gt; bibliography)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;csv&lt;/code&gt; (&lt;a href=&#34;https://tools.ietf.org/html/rfc4180&#34;&gt;CSV&lt;/a&gt; table)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;docbook&lt;/code&gt; (&lt;a href=&#34;https://docbook.org&#34;&gt;DocBook&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;docx&lt;/code&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/Office_Open_XML&#34;&gt;Word docx&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;dokuwiki&lt;/code&gt; (&lt;a href=&#34;https://www.dokuwiki.org/dokuwiki&#34;&gt;DokuWiki markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;endnotexml&lt;/code&gt; (&lt;a href=&#34;https://support.clarivate.com/Endnote/s/article/EndNote-XML-Document-Type-Definition&#34;&gt;EndNote XML bibliography&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;epub&lt;/code&gt; (&lt;a href=&#34;http://idpf.org/epub&#34;&gt;EPUB&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;fb2&lt;/code&gt; (&lt;a href=&#34;http://www.fictionbook.org/index.php/Eng:XML_Schema_Fictionbook_2.1&#34;&gt;FictionBook2&lt;/a&gt; e-book)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;gfm&lt;/code&gt; (&lt;a href=&#34;https://help.github.com/articles/github-flavored-markdown/&#34;&gt;GitHub-Flavored Markdown&lt;/a&gt;), or the deprecated and less accurate &lt;code&gt;markdown_github&lt;/code&gt;; use &lt;a href=&#34;https://pandoc.org/MANUAL.html#markdown-variants&#34;&gt;&lt;code&gt;markdown_github&lt;/code&gt;&lt;/a&gt; only if you need extensions not supported in &lt;a href=&#34;https://pandoc.org/MANUAL.html#markdown-variants&#34;&gt;&lt;code&gt;gfm&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;haddock&lt;/code&gt; (&lt;a href=&#34;https://www.haskell.org/haddock/doc/html/ch03s08.html&#34;&gt;Haddock markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;html&lt;/code&gt; (&lt;a href=&#34;https://www.w3.org/html/&#34;&gt;HTML&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;ipynb&lt;/code&gt; (&lt;a href=&#34;https://nbformat.readthedocs.io/en/latest/&#34;&gt;Jupyter notebook&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;jats&lt;/code&gt; (&lt;a href=&#34;https://jats.nlm.nih.gov&#34;&gt;JATS&lt;/a&gt; XML)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;jira&lt;/code&gt; (&lt;a href=&#34;https://jira.atlassian.com/secure/WikiRendererHelpAction.jspa?section=all&#34;&gt;Jira&lt;/a&gt;/Confluence wiki markup)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;json&lt;/code&gt; (JSON version of native AST)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;latex&lt;/code&gt; (&lt;a href=&#34;https://www.latex-project.org/&#34;&gt;LaTeX&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;markdown&lt;/code&gt; (&lt;a href=&#34;https://pandoc.org/MANUAL.html#pandocs-markdown&#34;&gt;Pandoc‚Äôs Markdown&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;markdown_mmd&lt;/code&gt; (&lt;a href=&#34;https://fletcherpenney.net/multimarkdown/&#34;&gt;MultiMarkdown&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;markdown_phpextra&lt;/code&gt; (&lt;a href=&#34;https://michelf.ca/projects/php-markdown/extra/&#34;&gt;PHP Markdown Extra&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;markdown_strict&lt;/code&gt; (original unextended &lt;a href=&#34;https://daringfireball.net/projects/markdown/&#34;&gt;Markdown&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;mediawiki&lt;/code&gt; (&lt;a href=&#34;https://www.mediawiki.org/wiki/Help:Formatting&#34;&gt;MediaWiki markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;man&lt;/code&gt; (&lt;a href=&#34;https://man.cx/groff_man(7)&#34;&gt;roff man&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;muse&lt;/code&gt; (&lt;a href=&#34;https://amusewiki.org/library/manual&#34;&gt;Muse&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;native&lt;/code&gt; (native Haskell)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;odt&lt;/code&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/OpenDocument&#34;&gt;ODT&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;opml&lt;/code&gt; (&lt;a href=&#34;http://dev.opml.org/spec2.html&#34;&gt;OPML&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;org&lt;/code&gt; (&lt;a href=&#34;https://orgmode.org&#34;&gt;Emacs Org mode&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;ris&lt;/code&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/RIS_(file_format)&#34;&gt;RIS&lt;/a&gt; bibliography)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;rtf&lt;/code&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/Rich_Text_Format&#34;&gt;Rich Text Format&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;rst&lt;/code&gt; (&lt;a href=&#34;https://docutils.sourceforge.io/docs/ref/rst/introduction.html&#34;&gt;reStructuredText&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;t2t&lt;/code&gt; (&lt;a href=&#34;https://txt2tags.org&#34;&gt;txt2tags&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;textile&lt;/code&gt; (&lt;a href=&#34;https://www.promptworks.com/textile&#34;&gt;Textile&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;tikiwiki&lt;/code&gt; (&lt;a href=&#34;https://doc.tiki.org/Wiki-Syntax-Text#The_Markup_Language_Wiki-Syntax&#34;&gt;TikiWiki markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;twiki&lt;/code&gt; (&lt;a href=&#34;https://twiki.org/cgi-bin/view/TWiki/TextFormattingRules&#34;&gt;TWiki markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;vimwiki&lt;/code&gt; (&lt;a href=&#34;https://vimwiki.github.io&#34;&gt;Vimwiki&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;the path of a custom Lua reader, see &lt;a href=&#34;https://pandoc.org/MANUAL.html#custom-readers-and-writers&#34;&gt;Custom readers and writers&lt;/a&gt; below&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;It can convert &lt;em&gt;to&lt;/em&gt;&lt;/p&gt; &#xA;&lt;div id=&#34;output-formats&#34;&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;asciidoc&lt;/code&gt; (&lt;a href=&#34;https://www.methods.co.nz/asciidoc/&#34;&gt;AsciiDoc&lt;/a&gt;) or &lt;code&gt;asciidoctor&lt;/code&gt; (&lt;a href=&#34;https://asciidoctor.org/&#34;&gt;AsciiDoctor&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;beamer&lt;/code&gt; (&lt;a href=&#34;https://ctan.org/pkg/beamer&#34;&gt;LaTeX beamer&lt;/a&gt; slide show)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;bibtex&lt;/code&gt; (&lt;a href=&#34;https://ctan.org/pkg/bibtex&#34;&gt;BibTeX&lt;/a&gt; bibliography)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;biblatex&lt;/code&gt; (&lt;a href=&#34;https://ctan.org/pkg/biblatex&#34;&gt;BibLaTeX&lt;/a&gt; bibliography)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;commonmark&lt;/code&gt; (&lt;a href=&#34;https://commonmark.org&#34;&gt;CommonMark&lt;/a&gt; Markdown)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;commonmark_x&lt;/code&gt; (&lt;a href=&#34;https://commonmark.org&#34;&gt;CommonMark&lt;/a&gt; Markdown with extensions)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;context&lt;/code&gt; (&lt;a href=&#34;https://www.contextgarden.net/&#34;&gt;ConTeXt&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;csljson&lt;/code&gt; (&lt;a href=&#34;https://citeproc-js.readthedocs.io/en/latest/csl-json/markup.html&#34;&gt;CSL JSON&lt;/a&gt; bibliography)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;docbook&lt;/code&gt; or &lt;code&gt;docbook4&lt;/code&gt; (&lt;a href=&#34;https://docbook.org&#34;&gt;DocBook&lt;/a&gt; 4)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;docbook5&lt;/code&gt; (DocBook 5)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;docx&lt;/code&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/Office_Open_XML&#34;&gt;Word docx&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;dokuwiki&lt;/code&gt; (&lt;a href=&#34;https://www.dokuwiki.org/dokuwiki&#34;&gt;DokuWiki markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;epub&lt;/code&gt; or &lt;code&gt;epub3&lt;/code&gt; (&lt;a href=&#34;http://idpf.org/epub&#34;&gt;EPUB&lt;/a&gt; v3 book)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;epub2&lt;/code&gt; (EPUB v2)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;fb2&lt;/code&gt; (&lt;a href=&#34;http://www.fictionbook.org/index.php/Eng:XML_Schema_Fictionbook_2.1&#34;&gt;FictionBook2&lt;/a&gt; e-book)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;gfm&lt;/code&gt; (&lt;a href=&#34;https://help.github.com/articles/github-flavored-markdown/&#34;&gt;GitHub-Flavored Markdown&lt;/a&gt;), or the deprecated and less accurate &lt;code&gt;markdown_github&lt;/code&gt;; use &lt;a href=&#34;https://pandoc.org/MANUAL.html#markdown-variants&#34;&gt;&lt;code&gt;markdown_github&lt;/code&gt;&lt;/a&gt; only if you need extensions not supported in &lt;a href=&#34;https://pandoc.org/MANUAL.html#markdown-variants&#34;&gt;&lt;code&gt;gfm&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;haddock&lt;/code&gt; (&lt;a href=&#34;https://www.haskell.org/haddock/doc/html/ch03s08.html&#34;&gt;Haddock markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;html&lt;/code&gt; or &lt;code&gt;html5&lt;/code&gt; (&lt;a href=&#34;https://www.w3.org/html/&#34;&gt;HTML&lt;/a&gt;, i.e.&amp;nbsp;&lt;a href=&#34;https://html.spec.whatwg.org/&#34;&gt;HTML5&lt;/a&gt;/XHTML &lt;a href=&#34;https://www.w3.org/TR/html-polyglot/&#34;&gt;polyglot markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;html4&lt;/code&gt; (&lt;a href=&#34;https://www.w3.org/TR/xhtml1/&#34;&gt;XHTML&lt;/a&gt; 1.0 Transitional)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;icml&lt;/code&gt; (&lt;a href=&#34;https://wwwimages.adobe.com/www.adobe.com/content/dam/acom/en/devnet/indesign/sdk/cs6/idml/idml-cookbook.pdf&#34;&gt;InDesign ICML&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;ipynb&lt;/code&gt; (&lt;a href=&#34;https://nbformat.readthedocs.io/en/latest/&#34;&gt;Jupyter notebook&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;jats_archiving&lt;/code&gt; (&lt;a href=&#34;https://jats.nlm.nih.gov&#34;&gt;JATS&lt;/a&gt; XML, Archiving and Interchange Tag Set)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;jats_articleauthoring&lt;/code&gt; (&lt;a href=&#34;https://jats.nlm.nih.gov&#34;&gt;JATS&lt;/a&gt; XML, Article Authoring Tag Set)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;jats_publishing&lt;/code&gt; (&lt;a href=&#34;https://jats.nlm.nih.gov&#34;&gt;JATS&lt;/a&gt; XML, Journal Publishing Tag Set)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;jats&lt;/code&gt; (alias for &lt;code&gt;jats_archiving&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;jira&lt;/code&gt; (&lt;a href=&#34;https://jira.atlassian.com/secure/WikiRendererHelpAction.jspa?section=all&#34;&gt;Jira&lt;/a&gt;/Confluence wiki markup)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;json&lt;/code&gt; (JSON version of native AST)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;latex&lt;/code&gt; (&lt;a href=&#34;https://www.latex-project.org/&#34;&gt;LaTeX&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;man&lt;/code&gt; (&lt;a href=&#34;https://man.cx/groff_man(7)&#34;&gt;roff man&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;markdown&lt;/code&gt; (&lt;a href=&#34;https://pandoc.org/MANUAL.html#pandocs-markdown&#34;&gt;Pandoc‚Äôs Markdown&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;markdown_mmd&lt;/code&gt; (&lt;a href=&#34;https://fletcherpenney.net/multimarkdown/&#34;&gt;MultiMarkdown&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;markdown_phpextra&lt;/code&gt; (&lt;a href=&#34;https://michelf.ca/projects/php-markdown/extra/&#34;&gt;PHP Markdown Extra&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;markdown_strict&lt;/code&gt; (original unextended &lt;a href=&#34;https://daringfireball.net/projects/markdown/&#34;&gt;Markdown&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;markua&lt;/code&gt; (&lt;a href=&#34;https://leanpub.com/markua/read&#34;&gt;Markua&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;mediawiki&lt;/code&gt; (&lt;a href=&#34;https://www.mediawiki.org/wiki/Help:Formatting&#34;&gt;MediaWiki markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;ms&lt;/code&gt; (&lt;a href=&#34;https://man.cx/groff_ms(7)&#34;&gt;roff ms&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;muse&lt;/code&gt; (&lt;a href=&#34;https://amusewiki.org/library/manual&#34;&gt;Muse&lt;/a&gt;),&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;native&lt;/code&gt; (native Haskell),&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;odt&lt;/code&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/OpenDocument&#34;&gt;OpenOffice text document&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;opml&lt;/code&gt; (&lt;a href=&#34;http://dev.opml.org/spec2.html&#34;&gt;OPML&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;opendocument&lt;/code&gt; (&lt;a href=&#34;http://opendocument.xml.org&#34;&gt;OpenDocument&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;org&lt;/code&gt; (&lt;a href=&#34;https://orgmode.org&#34;&gt;Emacs Org mode&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;pdf&lt;/code&gt; (&lt;a href=&#34;https://www.adobe.com/pdf/&#34;&gt;PDF&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;plain&lt;/code&gt; (plain text),&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;pptx&lt;/code&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/Microsoft_PowerPoint&#34;&gt;PowerPoint&lt;/a&gt; slide show)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;rst&lt;/code&gt; (&lt;a href=&#34;https://docutils.sourceforge.io/docs/ref/rst/introduction.html&#34;&gt;reStructuredText&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;rtf&lt;/code&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/Rich_Text_Format&#34;&gt;Rich Text Format&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;texinfo&lt;/code&gt; (&lt;a href=&#34;https://www.gnu.org/software/texinfo/&#34;&gt;GNU Texinfo&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;textile&lt;/code&gt; (&lt;a href=&#34;https://www.promptworks.com/textile&#34;&gt;Textile&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;slideous&lt;/code&gt; (&lt;a href=&#34;https://goessner.net/articles/slideous/&#34;&gt;Slideous&lt;/a&gt; HTML and JavaScript slide show)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;slidy&lt;/code&gt; (&lt;a href=&#34;https://www.w3.org/Talks/Tools/Slidy2/&#34;&gt;Slidy&lt;/a&gt; HTML and JavaScript slide show)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;dzslides&lt;/code&gt; (&lt;a href=&#34;https://paulrouget.com/dzslides/&#34;&gt;DZSlides&lt;/a&gt; HTML5 + JavaScript slide show),&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;revealjs&lt;/code&gt; (&lt;a href=&#34;https://revealjs.com/&#34;&gt;reveal.js&lt;/a&gt; HTML5 + JavaScript slide show)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;s5&lt;/code&gt; (&lt;a href=&#34;https://meyerweb.com/eric/tools/s5/&#34;&gt;S5&lt;/a&gt; HTML and JavaScript slide show)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;tei&lt;/code&gt; (&lt;a href=&#34;https://github.com/TEIC/TEI-Simple&#34;&gt;TEI Simple&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;xwiki&lt;/code&gt; (&lt;a href=&#34;https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiSyntax/&#34;&gt;XWiki markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;zimwiki&lt;/code&gt; (&lt;a href=&#34;https://zim-wiki.org/manual/Help/Wiki_Syntax.html&#34;&gt;ZimWiki markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;the path of a custom Lua writer, see &lt;a href=&#34;https://pandoc.org/MANUAL.html#custom-readers-and-writers&#34;&gt;Custom readers and writers&lt;/a&gt; below&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Pandoc can also produce PDF output via LaTeX, Groff ms, or HTML.&lt;/p&gt; &#xA;&lt;p&gt;Pandoc‚Äôs enhanced version of Markdown includes syntax for tables, definition lists, metadata blocks, footnotes, citations, math, and much more. See the User‚Äôs Manual below under &lt;a href=&#34;https://pandoc.org/MANUAL.html#pandocs-markdown&#34;&gt;Pandoc‚Äôs Markdown&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Pandoc has a modular design: it consists of a set of readers, which parse text in a given format and produce a native representation of the document (an &lt;em&gt;abstract syntax tree&lt;/em&gt; or AST), and a set of writers, which convert this native representation into a target format. Thus, adding an input or output format requires only adding a reader or writer. Users can also run custom pandoc filters to modify the intermediate AST (see the documentation for &lt;a href=&#34;https://pandoc.org/filters.html&#34;&gt;filters&lt;/a&gt; and &lt;a href=&#34;https://pandoc.org/lua-filters.html&#34;&gt;Lua filters&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Because pandoc‚Äôs intermediate representation of a document is less expressive than many of the formats it converts between, one should not expect perfect conversions between every format and every other. Pandoc attempts to preserve the structural elements of a document, but not formatting details such as margin size. And some document elements, such as complex tables, may not fit into pandoc‚Äôs simple document model. While conversions from pandoc‚Äôs Markdown to all formats aspire to be perfect, conversions from formats more expressive than pandoc‚Äôs Markdown can be expected to be lossy.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;Here‚Äôs &lt;a href=&#34;https://raw.githubusercontent.com/jgm/pandoc/master/INSTALL.md&#34;&gt;how to install pandoc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Pandoc‚Äôs website contains a full &lt;a href=&#34;https://pandoc.org/MANUAL.html&#34;&gt;User‚Äôs Guide&lt;/a&gt;. It is also available &lt;a href=&#34;https://raw.githubusercontent.com/jgm/pandoc/master/MANUAL.txt&#34;&gt;here&lt;/a&gt; as pandoc-flavored Markdown. The website also contains some &lt;a href=&#34;https://pandoc.org/demos.html&#34;&gt;examples of the use of pandoc&lt;/a&gt; and a limited &lt;a href=&#34;https://pandoc.org/try&#34;&gt;online demo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests, bug reports, and feature requests are welcome. Please make sure to read &lt;a href=&#34;https://raw.githubusercontent.com/jgm/pandoc/master/CONTRIBUTING.md&#34;&gt;the contributor guidelines&lt;/a&gt; before opening a new issue.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;¬© 2006-2022 John MacFarlane (&lt;a href=&#34;mailto:jgm@berkeley.edu&#34;&gt;jgm@berkeley.edu&lt;/a&gt;). Released under the &lt;a href=&#34;https://www.gnu.org/licenses/old-licenses/gpl-2.0.html&#34; title=&#34;GNU General Public License&#34;&gt;GPL&lt;/a&gt;, version 2 or greater. This software carries no warranty of any kind. (See COPYRIGHT for full copyright and warranty notices.)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>elm/compiler</title>
    <updated>2022-05-29T02:40:28Z</updated>
    <id>tag:github.com,2022-05-29:/elm/compiler</id>
    <link href="https://github.com/elm/compiler" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Compiler for Elm, a functional language for reliable webapps.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Elm&lt;/h1&gt; &#xA;&lt;p&gt;A delightful language for reliable webapps.&lt;/p&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;http://elm-lang.org/&#34;&gt;Home Page&lt;/a&gt;, &lt;a href=&#34;http://elm-lang.org/try&#34;&gt;Try Online&lt;/a&gt;, or &lt;a href=&#34;http://guide.elm-lang.org/&#34;&gt;The Official Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;‚ú® &lt;a href=&#34;https://guide.elm-lang.org/install/elm.html&#34;&gt;Install&lt;/a&gt; ‚ú®&lt;/p&gt; &#xA;&lt;p&gt;For multiple versions, previous versions, and uninstallation, see the instructions &lt;a href=&#34;https://github.com/elm/compiler/raw/master/installers/README.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Help&lt;/h2&gt; &#xA;&lt;p&gt;If you are stuck, ask around on &lt;a href=&#34;http://elmlang.herokuapp.com/&#34;&gt;the Elm slack channel&lt;/a&gt;. Folks are friendly and happy to help with questions!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>koalaman/shellcheck</title>
    <updated>2022-05-29T02:40:28Z</updated>
    <id>tag:github.com,2022-05-29:/koalaman/shellcheck</id>
    <link href="https://github.com/koalaman/shellcheck" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ShellCheck, a static analysis tool for shell scripts&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/koalaman/shellcheck/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;ShellCheck - A shell script static analysis tool&lt;/h1&gt; &#xA;&lt;p&gt;ShellCheck is a GPLv3 tool that gives warnings and suggestions for bash/sh shell scripts:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/doc/terminal.png&#34; alt=&#34;Screenshot of a terminal showing problematic shell script lines highlighted&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The goals of ShellCheck are&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To point out and clarify typical beginner&#39;s syntax issues that cause a shell to give cryptic error messages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To point out and clarify typical intermediate level semantic problems that cause a shell to behave strangely and counter-intuitively.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To point out subtle caveats, corner cases and pitfalls that may cause an advanced user&#39;s otherwise working script to fail under future circumstances.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/README.md#user-content-gallery-of-bad-code&#34;&gt;the gallery of bad code&lt;/a&gt; for examples of what ShellCheck can help you identify!&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#how-to-use&#34;&gt;How to use&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#on-the-web&#34;&gt;On the web&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#from-your-terminal&#34;&gt;From your terminal&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#in-your-editor&#34;&gt;In your editor&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#in-your-build-or-test-suites&#34;&gt;In your build or test suites&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#installing&#34;&gt;Installing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#compiling-from-source&#34;&gt;Compiling from source&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#installing-cabal&#34;&gt;Installing Cabal&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#compiling-shellcheck&#34;&gt;Compiling ShellCheck&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#running-tests&#34;&gt;Running tests&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#gallery-of-bad-code&#34;&gt;Gallery of bad code&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#quoting&#34;&gt;Quoting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#conditionals&#34;&gt;Conditionals&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#frequently-misused-commands&#34;&gt;Frequently misused commands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#common-beginners-mistakes&#34;&gt;Common beginner&#39;s mistakes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#style&#34;&gt;Style&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#data-and-typing-errors&#34;&gt;Data and typing errors&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#robustness&#34;&gt;Robustness&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#portability&#34;&gt;Portability&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#miscellaneous&#34;&gt;Miscellaneous&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#testimonials&#34;&gt;Testimonials&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#ignoring-issues&#34;&gt;Ignoring issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#reporting-bugs&#34;&gt;Reporting bugs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#copyright&#34;&gt;Copyright&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#other-resources&#34;&gt;Other Resources&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;There are a number of ways to use ShellCheck!&lt;/p&gt; &#xA;&lt;h3&gt;On the web&lt;/h3&gt; &#xA;&lt;p&gt;Paste a shell script on &lt;a href=&#34;https://www.shellcheck.net&#34;&gt;https://www.shellcheck.net&lt;/a&gt; for instant feedback.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.shellcheck.net&#34;&gt;ShellCheck.net&lt;/a&gt; is always synchronized to the latest git commit, and is the easiest way to give ShellCheck a go. Tell your friends!&lt;/p&gt; &#xA;&lt;h3&gt;From your terminal&lt;/h3&gt; &#xA;&lt;p&gt;Run &lt;code&gt;shellcheck yourscript&lt;/code&gt; in your terminal for instant output, as seen above.&lt;/p&gt; &#xA;&lt;h3&gt;In your editor&lt;/h3&gt; &#xA;&lt;p&gt;You can see ShellCheck suggestions directly in a variety of editors.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vim, through &lt;a href=&#34;https://github.com/w0rp/ale&#34;&gt;ALE&lt;/a&gt;, &lt;a href=&#34;https://github.com/neomake/neomake&#34;&gt;Neomake&lt;/a&gt;, or &lt;a href=&#34;https://github.com/scrooloose/syntastic&#34;&gt;Syntastic&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/doc/vim-syntastic.png&#34; alt=&#34;Screenshot of Vim showing inlined shellcheck feedback&#34;&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emacs, through &lt;a href=&#34;https://github.com/flycheck/flycheck&#34;&gt;Flycheck&lt;/a&gt; or &lt;a href=&#34;https://github.com/federicotdn/flymake-shellcheck&#34;&gt;Flymake&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/doc/emacs-flycheck.png&#34; alt=&#34;Screenshot of emacs showing inlined shellcheck feedback&#34;&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Sublime, through &lt;a href=&#34;https://github.com/SublimeLinter/SublimeLinter-shellcheck&#34;&gt;SublimeLinter&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Atom, through &lt;a href=&#34;https://github.com/AtomLinter/linter-shellcheck&#34;&gt;Linter&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;VSCode, through &lt;a href=&#34;https://github.com/timonwong/vscode-shellcheck&#34;&gt;vscode-shellcheck&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Most other editors, through &lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/shellcheck.1.md#user-content-formats&#34;&gt;GCC error compatibility&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;In your build or test suites&lt;/h3&gt; &#xA;&lt;p&gt;While ShellCheck is mostly intended for interactive use, it can easily be added to builds or test suites. It makes canonical use of exit codes, so you can just add a &lt;code&gt;shellcheck&lt;/code&gt; command as part of the process.&lt;/p&gt; &#xA;&lt;p&gt;For example, in a Makefile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Makefile&#34;&gt;check-scripts:&#xA;    # Fail if any of these files have warnings&#xA;    shellcheck myscripts/*.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or in a Travis CI &lt;code&gt;.travis.yml&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;script:&#xA;  # Fail if any of these files have warnings&#xA;  - shellcheck myscripts/*.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Services and platforms that have ShellCheck pre-installed and ready to use:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis CI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codacy.com/&#34;&gt;Codacy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codeclimate.com/&#34;&gt;Code Climate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codefactor.io/&#34;&gt;Code Factor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://circleci.com&#34;&gt;CircleCI&lt;/a&gt; via the &lt;a href=&#34;https://circleci.com/orbs/registry/orb/circleci/shellcheck&#34;&gt;ShellCheck Orb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/features/actions&#34;&gt;Github&lt;/a&gt; (only Linux)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Most other services, including &lt;a href=&#34;https://about.gitlab.com/&#34;&gt;GitLab&lt;/a&gt;, let you install ShellCheck yourself, either through the system&#39;s package manager (see &lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#installing&#34;&gt;Installing&lt;/a&gt;), or by downloading and unpacking a &lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#installing-a-pre-compiled-binary&#34;&gt;binary release&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s a good idea to manually install a specific ShellCheck version regardless. This avoids any surprise build breaks when a new version with new warnings is published.&lt;/p&gt; &#xA;&lt;p&gt;For customized filtering or reporting, ShellCheck can output simple JSON, CheckStyle compatible XML, GCC compatible warnings as well as human readable text (with or without ANSI colors). See the &lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/Integration&#34;&gt;Integration&lt;/a&gt; wiki page for more documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to install ShellCheck locally is through your package manager.&lt;/p&gt; &#xA;&lt;p&gt;On systems with Cabal (installs to &lt;code&gt;~/.cabal/bin&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cabal update&#xA;cabal install ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On systems with Stack (installs to &lt;code&gt;~/.local/bin&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;stack update&#xA;stack install ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Debian based distros:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Arch Linux based distros:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pacman -S shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or get the dependency free &lt;a href=&#34;https://aur.archlinux.org/packages/shellcheck-bin/&#34;&gt;shellcheck-bin&lt;/a&gt; from the AUR.&lt;/p&gt; &#xA;&lt;p&gt;On Gentoo based distros:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;emerge --ask shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On EPEL based distros:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo yum -y install epel-release&#xA;sudo yum install ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Fedora based distros:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dnf install ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On FreeBSD:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pkg install hs-ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On macOS (OS X) with Homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with MacPorts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo port install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On OpenBSD:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pkg_add shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On openSUSE&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;zypper in ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use OneClickInstall - &lt;a href=&#34;https://software.opensuse.org/package/ShellCheck&#34;&gt;https://software.opensuse.org/package/ShellCheck&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;On Solus:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;eopkg install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows (via &lt;a href=&#34;https://chocolatey.org/packages/shellcheck&#34;&gt;chocolatey&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;C:\&amp;gt; choco install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or Windows (via &lt;a href=&#34;http://scoop.sh&#34;&gt;scoop&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;C:\&amp;gt; scoop install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From &lt;a href=&#34;https://anaconda.org/conda-forge/shellcheck&#34;&gt;conda-forge&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda install -c conda-forge shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From Snap Store:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;snap install --channel=edge shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From Docker Hub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run --rm -v &#34;$PWD:/mnt&#34; koalaman/shellcheck:stable myscript&#xA;# Or :v0.4.7 for that version, or :latest for daily builds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or use &lt;code&gt;koalaman/shellcheck-alpine&lt;/code&gt; if you want a larger Alpine Linux based image to extend. It works exactly like a regular Alpine image, but has shellcheck preinstalled.&lt;/p&gt; &#xA;&lt;p&gt;Using the &lt;a href=&#34;https://nixos.org/nix&#34;&gt;nix package manager&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nix-env -iA nixpkgs.shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can download pre-compiled binaries for the latest release here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.x86_64.tar.xz&#34;&gt;Linux, x86_64&lt;/a&gt; (statically linked)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.armv6hf.tar.xz&#34;&gt;Linux, armv6hf&lt;/a&gt;, i.e. Raspberry Pi (statically linked)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.aarch64.tar.xz&#34;&gt;Linux, aarch64&lt;/a&gt; aka ARM64 (statically linked)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.darwin.x86_64.tar.xz&#34;&gt;macOS, x86_64&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.zip&#34;&gt;Windows, x86&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;or see the &lt;a href=&#34;https://github.com/koalaman/shellcheck/releases&#34;&gt;GitHub Releases&lt;/a&gt; for other releases (including the &lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/tag/latest&#34;&gt;latest&lt;/a&gt; meta-release for daily git builds).&lt;/p&gt; &#xA;&lt;p&gt;Distro packages already come with a &lt;code&gt;man&lt;/code&gt; page. If you are building from source, it can be installed with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pandoc -s -f markdown-smart -t man shellcheck.1.md -o shellcheck.1&#xA;sudo mv shellcheck.1 /usr/share/man/man1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;pre-commit&lt;/h3&gt; &#xA;&lt;p&gt;To run ShellCheck via &lt;a href=&#34;https://pre-commit.com/&#34;&gt;pre-commit&lt;/a&gt;, add the hook to your &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;repos:&#xA;-   repo: https://github.com/koalaman/shellcheck-precommit&#xA;    rev: v0.7.2&#xA;    hooks:&#xA;    -   id: shellcheck&#xA;#       args: [&#34;--severity=warning&#34;]  # Optionally only show errors and warnings&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Travis CI&lt;/h3&gt; &#xA;&lt;p&gt;Travis CI has now integrated ShellCheck by default, so you don&#39;t need to manually install it.&lt;/p&gt; &#xA;&lt;p&gt;If you still want to do so in order to upgrade at your leisure or ensure you&#39;re using the latest release, follow the steps below to install a binary version.&lt;/p&gt; &#xA;&lt;h3&gt;Installing a pre-compiled binary&lt;/h3&gt; &#xA;&lt;p&gt;The pre-compiled binaries come in &lt;code&gt;tar.xz&lt;/code&gt; files. To decompress them, make sure &lt;code&gt;xz&lt;/code&gt; is installed. On Debian/Ubuntu/Mint, you can &lt;code&gt;apt install xz-utils&lt;/code&gt;. On Redhat/Fedora/CentOS, &lt;code&gt;yum -y install xz&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A simple installer may do something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scversion=&#34;stable&#34; # or &#34;v0.4.7&#34;, or &#34;latest&#34;&#xA;wget -qO- &#34;https://github.com/koalaman/shellcheck/releases/download/${scversion?}/shellcheck-${scversion?}.linux.x86_64.tar.xz&#34; | tar -xJv&#xA;cp &#34;shellcheck-${scversion}/shellcheck&#34; /usr/bin/&#xA;shellcheck --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compiling from source&lt;/h2&gt; &#xA;&lt;p&gt;This section describes how to build ShellCheck from a source directory. ShellCheck is written in Haskell and requires 2GB of RAM to compile.&lt;/p&gt; &#xA;&lt;h3&gt;Installing Cabal&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck is built and packaged using Cabal. Install the package &lt;code&gt;cabal-install&lt;/code&gt; from your system&#39;s package manager (with e.g. &lt;code&gt;apt-get&lt;/code&gt;, &lt;code&gt;brew&lt;/code&gt;, &lt;code&gt;emerge&lt;/code&gt;, &lt;code&gt;yum&lt;/code&gt;, or &lt;code&gt;zypper&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;On macOS (OS X), you can do a fast install of Cabal using brew, which takes a couple of minutes instead of more than 30 minutes if you try to compile it from source.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ brew install cabal-install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On MacPorts, the package is instead called &lt;code&gt;hs-cabal-install&lt;/code&gt;, while native Windows users should install the latest version of the Haskell platform from &lt;a href=&#34;https://www.haskell.org/platform/&#34;&gt;https://www.haskell.org/platform/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Verify that &lt;code&gt;cabal&lt;/code&gt; is installed and update its dependency list with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cabal update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Compiling ShellCheck&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;git clone&lt;/code&gt; this repository, and &lt;code&gt;cd&lt;/code&gt; to the ShellCheck source directory to build/install:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cabal install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you intend to run the tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cabal install --enable-tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will compile ShellCheck and install it to your &lt;code&gt;~/.cabal/bin&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;Add this directory to your &lt;code&gt;PATH&lt;/code&gt; (for bash, add this to your &lt;code&gt;~/.bashrc&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export PATH=&#34;$HOME/.cabal/bin:$PATH&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Log out and in again, and verify that your PATH is set up correctly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ which shellcheck&#xA;~/.cabal/bin/shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On native Windows, the &lt;code&gt;PATH&lt;/code&gt; should already be set up, but the system may use a legacy codepage. In &lt;code&gt;cmd.exe&lt;/code&gt;, &lt;code&gt;powershell.exe&lt;/code&gt; and Powershell ISE, make sure to use a TrueType font, not a Raster font, and set the active codepage to UTF-8 (65001) with &lt;code&gt;chcp&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;chcp 65001&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In Powershell ISE, you may need to additionally update the output encoding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;[Console]::OutputEncoding = [System.Text.Encoding]::UTF8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running tests&lt;/h3&gt; &#xA;&lt;p&gt;To run the unit test suite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cabal test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Gallery of bad code&lt;/h2&gt; &#xA;&lt;p&gt;So what kind of things does ShellCheck look for? Here is an incomplete list of detected issues.&lt;/p&gt; &#xA;&lt;h3&gt;Quoting&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can recognize several types of incorrect quoting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo $1                           # Unquoted variables&#xA;find . -name *.ogg                # Unquoted find/grep patterns&#xA;rm &#34;~/my file.txt&#34;                # Quoted tilde expansion&#xA;v=&#39;--verbose=&#34;true&#34;&#39;; cmd $v      # Literal quotes in variables&#xA;for f in &#34;*.ogg&#34;                  # Incorrectly quoted &#39;for&#39; loops&#xA;touch $@                          # Unquoted $@&#xA;echo &#39;Don&#39;t forget to restart!&#39;   # Singlequote closed by apostrophe&#xA;echo &#39;Don\&#39;t try this at home&#39;    # Attempting to escape &#39; in &#39;&#39;&#xA;echo &#39;Path is $PATH&#39;              # Variables in single quotes&#xA;trap &#34;echo Took ${SECONDS}s&#34; 0    # Prematurely expanded trap&#xA;unset var[i]                      # Array index treated as glob&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Conditionals&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can recognize many types of incorrect test statements.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[[ n != 0 ]]                      # Constant test expressions&#xA;[[ -e *.mpg ]]                    # Existence checks of globs&#xA;[[ $foo==0 ]]                     # Always true due to missing spaces&#xA;[[ -n &#34;$foo &#34; ]]                  # Always true due to literals&#xA;[[ $foo =~ &#34;fo+&#34; ]]               # Quoted regex in =~&#xA;[ foo =~ re ]                     # Unsupported [ ] operators&#xA;[ $1 -eq &#34;shellcheck&#34; ]           # Numerical comparison of strings&#xA;[ $n &amp;amp;&amp;amp; $m ]                      # &amp;amp;&amp;amp; in [ .. ]&#xA;[ grep -q foo file ]              # Command without $(..)&#xA;[[ &#34;$$file&#34; == *.jpg ]]           # Comparisons that can&#39;t succeed&#xA;(( 1 -lt 2 ))                     # Using test operators in ((..))&#xA;[ x ] &amp;amp; [ y ] | [ z ]             # Accidental backgrounding and piping&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Frequently misused commands&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can recognize instances where commands are used incorrectly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;grep &#39;*foo*&#39; file                 # Globs in regex contexts&#xA;find . -exec foo {} &amp;amp;&amp;amp; bar {} \;  # Prematurely terminated find -exec&#xA;sudo echo &#39;Var=42&#39; &amp;gt; /etc/profile # Redirecting sudo&#xA;time --format=%s sleep 10         # Passing time(1) flags to time builtin&#xA;while read h; do ssh &#34;$h&#34; uptime  # Commands eating while loop input&#xA;alias archive=&#39;mv $1 /backup&#39;     # Defining aliases with arguments&#xA;tr -cd &#39;[a-zA-Z0-9]&#39;              # [] around ranges in tr&#xA;exec foo; echo &#34;Done!&#34;            # Misused &#39;exec&#39;&#xA;find -name \*.bak -o -name \*~ -delete  # Implicit precedence in find&#xA;# find . -exec foo &amp;gt; bar \;       # Redirections in find&#xA;f() { whoami; }; sudo f           # External use of internal functions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Common beginner&#39;s mistakes&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck recognizes many common beginner&#39;s syntax errors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;var = 42                          # Spaces around = in assignments&#xA;$foo=42                           # $ in assignments&#xA;for $var in *; do ...             # $ in for loop variables&#xA;var$n=&#34;Hello&#34;                     # Wrong indirect assignment&#xA;echo ${var$n}                     # Wrong indirect reference&#xA;var=(1, 2, 3)                     # Comma separated arrays&#xA;array=( [index] = value )         # Incorrect index initialization&#xA;echo $var[14]                     # Missing {} in array references&#xA;echo &#34;Argument 10 is $10&#34;         # Positional parameter misreference&#xA;if $(myfunction); then ..; fi     # Wrapping commands in $()&#xA;else if othercondition; then ..   # Using &#39;else if&#39;&#xA;f; f() { echo &#34;hello world; }     # Using function before definition&#xA;[ false ]                         # &#39;false&#39; being true&#xA;if ( -f file )                    # Using (..) instead of test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Style&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can make suggestions to improve style:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[[ -z $(find /tmp | grep mpg) ]]  # Use grep -q instead&#xA;a &amp;gt;&amp;gt; log; b &amp;gt;&amp;gt; log; c &amp;gt;&amp;gt; log      # Use a redirection block instead&#xA;echo &#34;The time is `date`&#34;         # Use $() instead&#xA;cd dir; process *; cd ..;         # Use subshells instead&#xA;echo $[1+2]                       # Use standard $((..)) instead of old $[]&#xA;echo $(($RANDOM % 6))             # Don&#39;t use $ on variables in $((..))&#xA;echo &#34;$(date)&#34;                    # Useless use of echo&#xA;cat file | grep foo               # Useless use of cat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Data and typing errors&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can recognize issues related to data and typing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;args=&#34;$@&#34;                         # Assigning arrays to strings&#xA;files=(foo bar); echo &#34;$files&#34;    # Referencing arrays as strings&#xA;declare -A arr=(foo bar)          # Associative arrays without index&#xA;printf &#34;%s\n&#34; &#34;Arguments: $@.&#34;    # Concatenating strings and arrays&#xA;[[ $# &amp;gt; 2 ]]                      # Comparing numbers as strings&#xA;var=World; echo &#34;Hello &#34; var      # Unused lowercase variables&#xA;echo &#34;Hello $name&#34;                # Unassigned lowercase variables&#xA;cmd | read bar; echo $bar         # Assignments in subshells&#xA;cat foo | cp bar                  # Piping to commands that don&#39;t read&#xA;printf &#39;%s: %s\n&#39; foo             # Mismatches in printf argument count&#xA;eval &#34;${array[@]}&#34;                # Lost word boundaries in array eval&#xA;for i in &#34;${x[@]}&#34;; do ${x[$i]}   # Using array value as key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Robustness&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can make suggestions for improving the robustness of a script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rm -rf &#34;$STEAMROOT/&#34;*            # Catastrophic rm&#xA;touch ./-l; ls *                 # Globs that could become options&#xA;find . -exec sh -c &#39;a &amp;amp;&amp;amp; b {}&#39; \; # Find -exec shell injection&#xA;printf &#34;Hello $name&#34;             # Variables in printf format&#xA;for f in $(ls *.txt); do         # Iterating over ls output&#xA;export MYVAR=$(cmd)              # Masked exit codes&#xA;case $version in 2.*) :;; 2.6.*) # Shadowed case branches&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Portability&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck will warn when using features not supported by the shebang. For example, if you set the shebang to &lt;code&gt;#!/bin/sh&lt;/code&gt;, ShellCheck will warn about portability issues similar to &lt;code&gt;checkbashisms&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo {1..$n}                     # Works in ksh, but not bash/dash/sh&#xA;echo {1..10}                     # Works in ksh and bash, but not dash/sh&#xA;echo -n 42                       # Works in ksh, bash and dash, undefined in sh&#xA;expr match str regex             # Unportable alias for `expr str : regex`&#xA;trap &#39;exit 42&#39; sigint            # Unportable signal spec&#xA;cmd &amp;amp;&amp;gt; file                      # Unportable redirection operator&#xA;read foo &amp;lt; /dev/tcp/host/22      # Unportable intercepted files&#xA;foo-bar() { ..; }                # Undefined/unsupported function name&#xA;[ $UID = 0 ]                     # Variable undefined in dash/sh&#xA;local var=value                  # local is undefined in sh&#xA;time sleep 1 | sleep 5           # Undefined uses of &#39;time&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Miscellaneous&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck recognizes a menagerie of other issues:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;PS1=&#39;\e[0;32m\$\e[0m &#39;            # PS1 colors not in \[..\]&#xA;PATH=&#34;$PATH:~/bin&#34;                # Literal tilde in $PATH&#xA;rm ‚Äúfile‚Äù                         # Unicode quotes&#xA;echo &#34;Hello world&#34;                # Carriage return / DOS line endings&#xA;echo hello \                      # Trailing spaces after \&#xA;var=42 echo $var                  # Expansion of inlined environment&#xA;!# bin/bash -x -e                 # Common shebang errors&#xA;echo $((n/180*100))               # Unnecessary loss of precision&#xA;ls *[:digit:].txt                 # Bad character class globs&#xA;sed &#39;s/foo/bar/&#39; file &amp;gt; file      # Redirecting to input&#xA;var2=$var2                        # Variable assigned to itself&#xA;[ x$var = xval ]                  # Antiquated x-comparisons&#xA;ls() { ls -l &#34;$@&#34;; }              # Infinitely recursive wrapper&#xA;alias ls=&#39;ls -l&#39;; ls foo          # Alias used before it takes effect&#xA;for x; do for x; do               # Nested loop uses same variable&#xA;while getopts &#34;a&#34; f; do case $f in &#34;b&#34;) # Unhandled getopts flags&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testimonials&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;At first you&#39;re like &#34;shellcheck is awesome&#34; but then you&#39;re like &#34;wtf are we still using bash&#34;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Alexander Tarasikov, &lt;a href=&#34;https://twitter.com/astarasikov/status/568825996532707330&#34;&gt;via Twitter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Ignoring issues&lt;/h2&gt; &#xA;&lt;p&gt;Issues can be ignored via environmental variable, command line, individually or globally within a file:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/Ignore&#34;&gt;https://github.com/koalaman/shellcheck/wiki/Ignore&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Reporting bugs&lt;/h2&gt; &#xA;&lt;p&gt;Please use the GitHub issue tracker for any bugs or feature suggestions:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/issues&#34;&gt;https://github.com/koalaman/shellcheck/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please submit patches to code or documentation as GitHub pull requests! Check out the &lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/DevGuide&#34;&gt;DevGuide&lt;/a&gt; on the ShellCheck Wiki.&lt;/p&gt; &#xA;&lt;p&gt;Contributions must be licensed under the GNU GPLv3. The contributor retains the copyright.&lt;/p&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;ShellCheck is licensed under the GNU General Public License, v3. A copy of this license is included in the file &lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Copyright 2012-2019, &lt;a href=&#34;https://github.com/koalaman/&#34;&gt;Vidar &#39;koala_man&#39; Holen&lt;/a&gt; and contributors.&lt;/p&gt; &#xA;&lt;p&gt;Happy ShellChecking!&lt;/p&gt; &#xA;&lt;h2&gt;Other Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The wiki has &lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/Checks&#34;&gt;long form descriptions&lt;/a&gt; for each warning, e.g. &lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2221&#34;&gt;SC2221&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;ShellCheck does not attempt to enforce any kind of formatting or indenting style, so also check out &lt;a href=&#34;https://github.com/mvdan/sh&#34;&gt;shfmt&lt;/a&gt;!&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>unisonweb/unison</title>
    <updated>2022-05-29T02:40:28Z</updated>
    <id>tag:github.com,2022-05-29:/unisonweb/unison</id>
    <link href="https://github.com/unisonweb/unison" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A friendly programming language from the future&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Unison language&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/unisonweb/unison&#34;&gt;&lt;img src=&#34;https://travis-ci.org/unisonweb/unison.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://unisonweb.org&#34;&gt;Unison&lt;/a&gt; is a modern, statically-typed purely functional language with the ability to describe entire distributed systems using a single program. Here&#39;s an example of a distributed map-reduce implementation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Haskell&#34;&gt;-- comments start with `--`&#xA;mapReduce loc fn ifEmpty reduce data = match split data with&#xA;  Empty          -&amp;gt; ifEmpty&#xA;  One a          -&amp;gt; fn a&#xA;  Two left right -&amp;gt;&#xA;    fl = forkAt loc &#39;(mapReduce loc fn ifEmpty reduce !left)&#xA;    fr = forkAt loc &#39;(mapReduce loc fn ifEmpty reduce !right)&#xA;    reduce (await fl) (await fr)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This function can be either simulated locally (possibly with faults injected for testing purposes), or run atop a distributed pool of compute. See &lt;a href=&#34;https://www.unison-lang.org/articles/distributed-datasets/&#34;&gt;this article&lt;/a&gt; for more in-depth coverage of how to build distributed computing libraries like this.&lt;/p&gt; &#xA;&lt;p&gt;Other resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.unison-lang.org/learn/the-big-idea/&#34;&gt;Learn about the big idea behind Unison&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Check out &lt;a href=&#34;https://unison-lang.org&#34;&gt;the project website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Say hello or lurk &lt;a href=&#34;https://unison-lang.org/slack&#34;&gt;in the Slack chat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Explore &lt;a href=&#34;https://share.unison-lang.org/&#34;&gt;the Unison ecosystem&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.unison-lang.org/learn/&#34;&gt;Learn Unison&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building using Stack&lt;/h2&gt; &#xA;&lt;p&gt;If these instructions don&#39;t work for you or are incomplete, please file an issue.&lt;/p&gt; &#xA;&lt;p&gt;The build uses &lt;a href=&#34;http://docs.haskellstack.org/&#34;&gt;Stack&lt;/a&gt;. If you don&#39;t already have it installed, &lt;a href=&#34;http://docs.haskellstack.org/en/stable/README.html#how-to-install&#34;&gt;follow the install instructions&lt;/a&gt; for your platform. (Hint: &lt;code&gt;brew update &amp;amp;&amp;amp; brew install stack&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone https://github.com/unisonweb/unison.git&#xA;$ cd unison&#xA;$ stack --version # we&#39;ll want to know this version if you run into trouble&#xA;$ stack build --fast --test &amp;amp;&amp;amp; stack exec unison&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run a local codebase-ui while building from source, you can use the &lt;code&gt;/dev-ui-install.sh&lt;/code&gt; script. It will download the latest release of the codebase-ui and put it in the expected location for the unison executable created by &lt;code&gt;stack build&lt;/code&gt;. When you start unison, you&#39;ll see a url where the codebase-ui is running.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/unisonweb/unison/trunk/development.markdown&#34;&gt;&lt;code&gt;development.markdown&lt;/code&gt;&lt;/a&gt; for a list of build commands you&#39;ll likely use during development.&lt;/p&gt; &#xA;&lt;h2&gt;Codebase Server&lt;/h2&gt; &#xA;&lt;p&gt;When &lt;code&gt;ucm&lt;/code&gt; starts it starts a Codebase web server that is used by the &lt;a href=&#34;https://github.com/unisonweb/codebase-ui&#34;&gt;Codebase UI&lt;/a&gt;. It selects a random port and a unique token that must be used when starting the UI to correctly connect to the server.&lt;/p&gt; &#xA;&lt;p&gt;The port, host and token can all be configured by providing environment variables when starting &lt;code&gt;ucm&lt;/code&gt;: &lt;code&gt;UCM_PORT&lt;/code&gt;, &lt;code&gt;UCM_HOST&lt;/code&gt;, and &lt;code&gt;UCM_TOKEN&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>github/deli</title>
    <updated>2022-05-29T02:40:28Z</updated>
    <id>tag:github.com,2022-05-29:/github/deli</id>
    <link href="https://github.com/github/deli" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;deli&lt;/h1&gt; &#xA;&lt;h2&gt;What is Deli?&lt;/h2&gt; &#xA;&lt;p&gt;Deli is a performance modeling tool, allowing you to understand and experiment with new designs at several orders of magnitude faster than wall-clock time. Specifically, Deli is designed to help you understand how long it takes for &#39;jobs&#39; or &#39;requests&#39; to complete in your system. Deli borrows concepts and terminology from &lt;a href=&#34;https://en.wikipedia.org/wiki/Queueing_theory&#34;&gt;queueing theory&lt;/a&gt;, and is implemented as a Haskell DSL, exposing a &lt;a href=&#34;https://golang.org/&#34;&gt;Go (language)&lt;/a&gt; -like concurrency and message-passing API.&lt;/p&gt; &#xA;&lt;p&gt;Deli&#39;s documentation is divided into the following three sections, depending on your interest.&lt;/p&gt; &#xA;&lt;h2&gt;First time readers&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re looking for an overview on Deli, and whether it may be appropriate for your problem, head over to our &lt;a href=&#34;https://raw.githubusercontent.com/github/deli/master/docs/overview.md&#34;&gt;overview documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Using Deli&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;ve decided you want to use Deli, or are already using it in a project, then our &lt;a href=&#34;https://raw.githubusercontent.com/github/deli/master/docs/user-guide.md&#34;&gt;user guide&lt;/a&gt; is a great resource.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like to contribute to Deli, start with our &lt;a href=&#34;https://raw.githubusercontent.com/github/deli/master/docs/contributing.md&#34;&gt;contributing documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Deli is BSD3 licensed. More information is available in &lt;a href=&#34;https://raw.githubusercontent.com/github/deli/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Shopify/kubepacity</title>
    <updated>2022-05-29T02:40:28Z</updated>
    <id>tag:github.com,2022-05-29:/Shopify/kubepacity</id>
    <link href="https://github.com/Shopify/kubepacity" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Visualizing kubernetes capacity.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;kubepacity&lt;/h1&gt; &#xA;&lt;p&gt;Visualizing kubernetes capacity.&lt;/p&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.haskellstack.org/en/stable/README/&#34;&gt;Install stack!&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stack build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stack test&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stack exec kubepacity&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Requires a working kubectl.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>input-output-hk/plutus</title>
    <updated>2022-05-29T02:40:28Z</updated>
    <id>tag:github.com,2022-05-29:/input-output-hk/plutus</id>
    <link href="https://github.com/input-output-hk/plutus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Plutus language implementation and tools&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://github.com/input-output-hk/plutus&#34;&gt;Plutus Core&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;div id=&#34;toc&#34; class=&#34;toc&#34;&gt; &#xA; &lt;div id=&#34;toctitle&#34;&gt;&#xA;  Table of Contents&#xA; &lt;/div&gt; &#xA; &lt;ul class=&#34;sectlevel1&#34;&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_documentation&#34;&gt;Documentation&lt;/a&gt; &#xA;   &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_user_documentation&#34;&gt;User documentation&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_talks&#34;&gt;Talks&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_specifications_and_design&#34;&gt;Specifications and design&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_academic_papers&#34;&gt;Academic papers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_versioning_and_releases&#34;&gt;Versioning and releases&lt;/a&gt; &#xA;   &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_versioning&#34;&gt;Versioning&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_branching_and_tagging&#34;&gt;Branching and tagging&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_version_ranges&#34;&gt;Version ranges&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_releases&#34;&gt;Releases&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_working_with_the_project&#34;&gt;Working with the project&lt;/a&gt; &#xA;   &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_how_to_submit_an_issue&#34;&gt;How to submit an issue&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#how-to-develop&#34;&gt;How to develop and contribute to the project&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_how_to_depend_on_the_project_from_another_haskell_project&#34;&gt;How to depend on the project from another Haskell project&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_how_to_build_the_projects_artifacts&#34;&gt;How to build the project‚Äôs artifacts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#nix-advice&#34;&gt;Nix&lt;/a&gt; &#xA;   &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#iohk-binary-cache&#34;&gt;How to set up the IOHK binary caches&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#nix-build-attributes&#34;&gt;Which attributes to use to build different artifacts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_licensing&#34;&gt;Licensing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/div&gt; &#xA;&lt;div id=&#34;preamble&#34;&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Plutus Core is the scripting language embedded in the Cardano ledger and forms the basis of the Plutus Platform, an application development platform for developing distributed applications using the Cardano blockchain. For more information about the projects, see the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#user-documentation&#34;&gt;[user-documentation]&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;This repository contains:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;The implementation, specification, and mechanized metatheory of Plutus Core&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Plutus Tx, the compiler from Haskell to Plutus Core.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;The rest of this README is focussed on people who want to develop or contribute to the project.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;For people who want to &lt;strong&gt;use&lt;/strong&gt; the project, please consult the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#user-documentation&#34;&gt;[user-documentation]&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;admonitionblock important&#34;&gt; &#xA;   &lt;table&gt; &#xA;    &lt;tbody&gt;&#xA;     &lt;tr&gt; &#xA;      &lt;td class=&#34;icon&#34;&gt; &#xA;       &lt;div class=&#34;title&#34;&gt;&#xA;        Important&#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;      &lt;td class=&#34;content&#34;&gt; &#xA;       &lt;div class=&#34;paragraph&#34;&gt; &#xA;        &lt;p&gt;This repository used to contain the code for the Plutus Application Framework and Marlowe. These have now &lt;strong&gt;moved&lt;/strong&gt;:&lt;/p&gt; &#xA;       &lt;/div&gt; &#xA;       &lt;div class=&#34;ulist&#34;&gt; &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/input-output-hk/plutus-apps&#34;&gt;Plutus Application Framework&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;         &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/input-output-hk/marlowe-cardano&#34;&gt;Marlowe&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;        &lt;/ul&gt; &#xA;       &lt;/div&gt; &#xA;       &lt;div class=&#34;paragraph&#34;&gt; &#xA;        &lt;p&gt;Please ensure that you make PRs and issues in the appropriate repository!&lt;/p&gt; &#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt;&#xA;   &lt;/table&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div id=&#34;cache-warning&#34; class=&#34;admonitionblock important&#34;&gt; &#xA;   &lt;table&gt; &#xA;    &lt;tbody&gt;&#xA;     &lt;tr&gt; &#xA;      &lt;td class=&#34;icon&#34;&gt; &#xA;       &lt;div class=&#34;title&#34;&gt;&#xA;        Important&#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;      &lt;td class=&#34;content&#34;&gt; &#xA;       &lt;div class=&#34;paragraph&#34;&gt; &#xA;        &lt;p&gt;DO NOT IGNORE THIS&lt;/p&gt; &#xA;       &lt;/div&gt; &#xA;       &lt;div class=&#34;paragraph&#34;&gt; &#xA;        &lt;p&gt;If you want to use Nix with this project, make sure to set up the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#iohk-binary-cache&#34;&gt;IOHK binary cache&lt;/a&gt;. If you do not do this, you will end up building GHC, which takes several hours. If you find yourself building GHC, STOP and fix the cache.&lt;/p&gt; &#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt;&#xA;   &lt;/table&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_documentation&#34;&gt;Documentation&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_user_documentation&#34;&gt;User documentation&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The main documentation is located &lt;a href=&#34;https://plutus.readthedocs.io/en/latest/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_talks&#34;&gt;Talks&lt;/h3&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=MpWeg6Fg0t8&#34;&gt;Functional Smart Contracts on Cardano (2020)&lt;/a&gt;: an overview of the ideas behind the Plutus Platform.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=usMPt8KpBeI&#34;&gt;The Plutus Platform (2020)&lt;/a&gt;: an overview of the Platform as a whole (including the Application Framework) at the time.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_specifications_and_design&#34;&gt;Specifications and design&lt;/h3&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/plutus/linux.docs.plutus-report/latest/download-by-type/doc-pdf/plutus&#34;&gt;Plutus Technical Report (draft)&lt;/a&gt;: a technical report and design document for the project.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/plutus/linux.docs.plutus-core-spec/latest/download-by-type/doc-pdf/plutus-core-specification&#34;&gt;Plutus Core Specification&lt;/a&gt;: the formal specification of the core language.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/plutus/linux.docs.extended-utxo-spec/latest/download-by-type/doc-pdf/extended-utxo-specification&#34;&gt;Extended UTXO Model&lt;/a&gt;: a design document for the core changes to the Cardano ledger.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_academic_papers&#34;&gt;Academic papers&lt;/h3&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/plutus/linux.docs.papers.unraveling-recursion/latest/download-by-type/doc-pdf/unraveling-recursion&#34;&gt;Unraveling Recursion&lt;/a&gt;: a description of some of the compilation strategies used in Plutus IR (&lt;a href=&#34;https://doi.org/10.1007/978-3-030-33636-3_15&#34;&gt;published version&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/plutus/linux.docs.papers.system-f-in-agda/latest/download-by-type/doc-pdf/paper&#34;&gt;System F in Agda&lt;/a&gt;: a formal model of System F in Agda (&lt;a href=&#34;https://doi.org/10.1007/978-3-030-33636-3_10&#34;&gt;published version&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/plutus/linux.docs.papers.eutxo/latest/download-by-type/doc-pdf/eutxo&#34;&gt;The Extended UTXO Model&lt;/a&gt;: a full presentation of the EUTXO ledger extension (&lt;a href=&#34;https://doi.org/10.1007/978-3-030-54455-3_37&#34;&gt;published version&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/plutus/linux.docs.papers.utxoma/latest/download-by-type/doc-pdf/utxoma&#34;&gt;UTXOma: UTXO with Multi-Asset Support&lt;/a&gt;: a full presentation of the multi-asset ledger extension (&lt;a href=&#34;https://doi.org/10.1007/978-3-030-61467-6_8&#34;&gt;published version&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/plutus/linux.docs.papers.eutxoma/latest/download-by-type/doc-pdf/eutxoma&#34;&gt;Native Custom Tokens in the Extended UTXO Model&lt;/a&gt;: a discussion of the interaction of the multi-asset support with EUTXO (&lt;a href=&#34;https://doi.org/10.1007/978-3-030-61467-6_7&#34;&gt;published version&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/2201.04919&#34;&gt;Translation Certification for Smart Contracts&lt;/a&gt;: a certifier of Plutus IR compiler passes written in Coq.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_versioning_and_releases&#34;&gt;Versioning and releases&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_versioning&#34;&gt;Versioning&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The core &lt;code&gt;plutus&lt;/code&gt; packages are versioned as follows:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Package versioning follows the &lt;a href=&#34;https://pvp.haskell.org/&#34;&gt;PVP&lt;/a&gt; on a best-effort basis (i.e. we will generally try to but we won‚Äôt guarantee it).&lt;/p&gt; &#xA;      &lt;div class=&#34;ulist&#34;&gt; &#xA;       &lt;ul&gt; &#xA;        &lt;li&gt; &lt;p&gt;The first-major-version component indicates the &#34;era&#34; which for our purposes means which major version of the &lt;strong&gt;Cardano node&lt;/strong&gt; is being targeted.&lt;/p&gt; &lt;/li&gt; &#xA;        &lt;li&gt; &lt;p&gt;The second-major-version component is used for releases which are major versions according to the PVP, but which are still compatible with the current &#34;era&#34;.&lt;/p&gt; &lt;/li&gt; &#xA;        &lt;li&gt; &lt;p&gt;The minor-version and below are used as normal.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;/ul&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Packages which are used downstream should all have the same version.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Other packages which are not used downstream (e.g. &lt;code&gt;plutus-benchmark&lt;/code&gt;) can remain unversioned.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;In principle we could just have a single major version, but using two makes it easier to avoid mistakes.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_branching_and_tagging&#34;&gt;Branching and tagging&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The following branching and tagging rules are followed:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Version &lt;code&gt;X&lt;/code&gt; is tagged as &lt;code&gt;vX&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;master&lt;/code&gt; is always targeting the next first-major-version.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;First-major-version releases also have a release branch, &lt;code&gt;release/X&lt;/code&gt;.&lt;/p&gt; &#xA;      &lt;div class=&#34;ulist&#34;&gt; &#xA;       &lt;ul&gt; &#xA;        &lt;li&gt; &lt;p&gt;Changes will be backported from master to the release branch&lt;/p&gt; &lt;/li&gt; &#xA;        &lt;li&gt; &lt;p&gt;Subsequent lesser releases will be made from that branch but do not create new branches.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;/ul&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_version_ranges&#34;&gt;Version ranges&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Packages which depend on &lt;code&gt;plutus&lt;/code&gt; packages should use version ranges to control which version of those packages they build against.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Packages in &lt;code&gt;plutus&lt;/code&gt; which are used downstream should pin the major-version of each other (e.g. &lt;code&gt;plutus-tx-1.0.1&lt;/code&gt; should depend on &lt;code&gt;plutus-core ^&amp;gt;= 1.0&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Downstream packages should pin at least the first-major-version of &lt;code&gt;plutus&lt;/code&gt; packages.&lt;/p&gt; &#xA;      &lt;div class=&#34;ulist&#34;&gt; &#xA;       &lt;ul&gt; &#xA;        &lt;li&gt; &lt;p&gt;Upgrading to a new second-major-version should always be safe, with at most code breakage (following the PVP). Users may of course want to pin this version as well to avoid such breakage.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;/ul&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Downstream packages pulling in &lt;code&gt;plutus&lt;/code&gt; packages via &lt;code&gt;source-repository-package&lt;/code&gt; stanzas should always take tagged commits, or potentially commits from a release branch.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_releases&#34;&gt;Releases&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Currently there is no release process beyond bumping the package versions and making a tag/branch as appropriate.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_working_with_the_project&#34;&gt;Working with the project&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_how_to_submit_an_issue&#34;&gt;How to submit an issue&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Issues can be filed in the &lt;a href=&#34;https://github.com/input-output-hk/plutus/issues&#34;&gt;GitHub Issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;However, note that this is pre-release software, so we will not usually be providing support.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;how-to-develop&#34;&gt;How to develop and contribute to the project&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/CONTRIBUTING.html&#34;&gt;CONTRIBUTING&lt;/a&gt;, which describes our processes in more detail including development environments.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_how_to_depend_on_the_project_from_another_haskell_project&#34;&gt;How to depend on the project from another Haskell project&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;None of our libraries are on Hackage, unfortunately (many of our dependencies aren‚Äôt either). So for the time being, you need to:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;olist arabic&#34;&gt; &#xA;    &lt;ol class=&#34;arabic&#34;&gt; &#xA;     &lt;li&gt; &lt;p&gt;Add &lt;code&gt;plutus&lt;/code&gt; as a &lt;code&gt;source-repository-package&lt;/code&gt; to your &lt;code&gt;cabal.project&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Copy the &lt;code&gt;source-repository-package&lt;/code&gt; stanzas from our &lt;code&gt;cabal.project&lt;/code&gt; to yours.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Copy additional stanzas from our &lt;code&gt;cabal.project&lt;/code&gt; as you need, e.g. you may need some of the &lt;code&gt;allow-newer&lt;/code&gt; stanzas.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ol&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The &lt;a href=&#34;https://github.com/input-output-hk/plutus-starter&#34;&gt;plutus-starter&lt;/a&gt; project provides an example.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_how_to_build_the_projects_artifacts&#34;&gt;How to build the project‚Äôs artifacts&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;This section contains information about how to build the project‚Äôs artifacts for independent usage. For development work see &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#how-to-develop&#34;&gt;How to develop and contribute to the project&lt;/a&gt; for more information.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;The Haskell libraries in Plutus Core are built with &lt;code&gt;cabal&lt;/code&gt; and Nix. The other artifacts (docs etc.) are also most easily built with Nix.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;sect4&#34;&gt; &#xA;     &lt;h5 id=&#34;_nix&#34;&gt;Nix&lt;/h5&gt; &#xA;     &lt;div class=&#34;paragraph&#34;&gt; &#xA;      &lt;p&gt;Install &lt;a href=&#34;https://nixos.org/nix/&#34;&gt;Nix&lt;/a&gt; (recommended). following the instructions on the &lt;a href=&#34;https://nixos.org/nix/&#34;&gt;Nix website&lt;/a&gt;.&lt;/p&gt; &#xA;     &lt;/div&gt; &#xA;     &lt;div class=&#34;paragraph&#34;&gt; &#xA;      &lt;p&gt;Make sure you have read and understood the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#cache-warning&#34;&gt;cache warning&lt;/a&gt;. DO NOT IGNORE THIS.&lt;/p&gt; &#xA;     &lt;/div&gt; &#xA;     &lt;div class=&#34;paragraph&#34;&gt; &#xA;      &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#nix-advice&#34;&gt;Nix&lt;/a&gt; for further advice on using Nix.&lt;/p&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;sect4&#34;&gt; &#xA;     &lt;h5 id=&#34;_non_nix&#34;&gt;Non-Nix&lt;/h5&gt; &#xA;     &lt;div class=&#34;paragraph&#34;&gt; &#xA;      &lt;p&gt;You can build some of the Haskell packages without Nix, but this is not recommended and we don‚Äôt guarantee that these prerequisites are sufficient. If you use Nix, these tools are provided for you via &lt;code&gt;shell.nix&lt;/code&gt;, and you do &lt;strong&gt;not&lt;/strong&gt; need to install them yourself.&lt;/p&gt; &#xA;     &lt;/div&gt; &#xA;     &lt;div class=&#34;ulist&#34;&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt; &lt;p&gt;If you want to build our Haskell packages with &lt;a href=&#34;https://www.haskell.org/cabal/&#34;&gt;&lt;code&gt;cabal&lt;/code&gt;&lt;/a&gt;, then install it.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;If you want to build our Agda code, then install &lt;a href=&#34;https://github.com/agda/agda&#34;&gt;Agda&lt;/a&gt; and the &lt;a href=&#34;https://github.com/agda/agda-stdlib&#34;&gt;standard library&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;building-with-nix&#34;&gt;How to build the Haskell packages and other artifacts with Nix&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Run &lt;code&gt;nix build -f default.nix plutus.haskell.packages.plutus-core.components.library&lt;/code&gt; from the root to build the Plutus Core library.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#nix-build-attributes&#34;&gt;Which attributes to use to build different artifacts&lt;/a&gt; to find out what other attributes you can build.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_how_to_build_the_haskell_packages_with_cabal&#34;&gt;How to build the Haskell packages with &lt;code&gt;cabal&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;The Haskell packages can be built directly with &lt;code&gt;cabal&lt;/code&gt;. We do this during development (see &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#how-to-develop&#34;&gt;How to develop and contribute to the project&lt;/a&gt;). The best way is to do this is inside a &lt;code&gt;nix-shell&lt;/code&gt;.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;admonitionblock note&#34;&gt; &#xA;     &lt;table&gt; &#xA;      &lt;tbody&gt;&#xA;       &lt;tr&gt; &#xA;        &lt;td class=&#34;icon&#34;&gt; &#xA;         &lt;div class=&#34;title&#34;&gt;&#xA;          Note&#xA;         &lt;/div&gt; &lt;/td&gt; &#xA;        &lt;td class=&#34;content&#34;&gt; &#xA;         &lt;div class=&#34;paragraph&#34;&gt; &#xA;          &lt;p&gt;For fresh development setups, you also need to run &lt;code&gt;cabal update&lt;/code&gt;.&lt;/p&gt; &#xA;         &lt;/div&gt; &lt;/td&gt; &#xA;       &lt;/tr&gt; &#xA;      &lt;/tbody&gt;&#xA;     &lt;/table&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Run &lt;code&gt;cabal build plutus-core&lt;/code&gt; from the root to build the Plutus Core library.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/cabal.project&#34;&gt;cabal project file&lt;/a&gt; to see the other packages that you can build with &lt;code&gt;cabal&lt;/code&gt;.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;nix-advice&#34;&gt;Nix&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;iohk-binary-cache&#34;&gt;How to set up the IOHK binary caches&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Adding the IOHK binary cache to your Nix configuration will speed up builds a lot, since many things will have been built already by our CI.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;If you find you are building packages that are not defined in this repository, or if the build seems to take a very long time then you may not have this set up properly.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;To set up the cache:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;olist arabic&#34;&gt; &#xA;    &lt;ol class=&#34;arabic&#34;&gt; &#xA;     &lt;li&gt; &lt;p&gt;On non-NixOS, edit &lt;code&gt;/etc/nix/nix.conf&lt;/code&gt; and add the following lines:&lt;/p&gt; &#xA;      &lt;div class=&#34;listingblock&#34;&gt; &#xA;       &lt;div class=&#34;content&#34;&gt; &#xA;        &lt;pre&gt;substituters        = https://hydra.iohk.io https://iohk.cachix.org https://cache.nixos.org/&#xA;trusted-public-keys = hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ= iohk.cachix.org-1:DpRUyj7h7V830dp/i6Nti+NEO2/nhblbov/8MW7Rqoo= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=&lt;/pre&gt; &#xA;       &lt;/div&gt; &#xA;      &lt;/div&gt; &#xA;      &lt;div class=&#34;admonitionblock note&#34;&gt; &#xA;       &lt;table&gt; &#xA;        &lt;tbody&gt;&#xA;         &lt;tr&gt; &#xA;          &lt;td class=&#34;icon&#34;&gt; &#xA;           &lt;div class=&#34;title&#34;&gt;&#xA;            Note&#xA;           &lt;/div&gt; &lt;/td&gt; &#xA;          &lt;td class=&#34;content&#34;&gt; &#xA;           &lt;div class=&#34;paragraph&#34;&gt; &#xA;            &lt;p&gt;If you don‚Äôt have an &lt;code&gt;/etc/nix/nix.conf&lt;/code&gt; or don‚Äôt want to edit it, you may add the &lt;code&gt;nix.conf&lt;/code&gt; lines to &lt;code&gt;~/.config/nix/nix.conf&lt;/code&gt; instead. You must be a &lt;a href=&#34;https://nixos.org/nix/manual/#ssec-multi-user&#34;&gt;trusted user&lt;/a&gt; to do this. If this file doesn‚Äôt exist, go ahead and create it.&lt;/p&gt; &#xA;           &lt;/div&gt; &lt;/td&gt; &#xA;         &lt;/tr&gt; &#xA;        &lt;/tbody&gt;&#xA;       &lt;/table&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;On NixOS, set the following NixOS options:&lt;/p&gt; &#xA;      &lt;div class=&#34;listingblock&#34;&gt; &#xA;       &lt;div class=&#34;content&#34;&gt; &#xA;        &lt;pre&gt;nix = {&#xA;  binaryCaches          = [ &#34;https://hydra.iohk.io&#34; &#34;https://iohk.cachix.org&#34; ];&#xA;  binaryCachePublicKeys = [ &#34;hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=&#34; &#34;iohk.cachix.org-1:DpRUyj7h7V830dp/i6Nti+NEO2/nhblbov/8MW7Rqoo=&#34; ];&#xA;};&lt;/pre&gt; &#xA;       &lt;/div&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;    &lt;/ol&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Note: after changing /etc/nix/nix.conf you must restart the nix-daemon on non-NixOS for the changes to take effect!&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;nix-build-attributes&#34;&gt;Which attributes to use to build different artifacts&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/default.nix&#34;&gt;&lt;code&gt;default.nix&lt;/code&gt;&lt;/a&gt; defines a package set with attributes for all the artifacts you can build from this repository. These can be built using &lt;code&gt;nix build&lt;/code&gt;. For example:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre&gt;nix build -f default.nix docs.papers.eutxo&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;div class=&#34;title&#34;&gt;&#xA;     Example attributes&#xA;    &lt;/div&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Project packages: defined inside &lt;code&gt;plutus.haskell.packages&lt;/code&gt;&lt;/p&gt; &#xA;      &lt;div class=&#34;ulist&#34;&gt; &#xA;       &lt;ul&gt; &#xA;        &lt;li&gt; &lt;p&gt;e.g.&amp;nbsp;&lt;code&gt;plutus.haskell.packages.plutus-core.components.library&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;/ul&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Documents: defined inside &lt;code&gt;docs&lt;/code&gt;&lt;/p&gt; &#xA;      &lt;div class=&#34;ulist&#34;&gt; &#xA;       &lt;ul&gt; &#xA;        &lt;li&gt; &lt;p&gt;e.g.&amp;nbsp;&lt;code&gt;docs.plutus-core-spec&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;/ul&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;There are other attributes defined in &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/default.nix&#34;&gt;&lt;code&gt;default.nix&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_licensing&#34;&gt;Licensing&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;You are free to copy, modify, and distribute this software under the terms of the Apache 2.0 license. See the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/NOTICE&#34;&gt;NOTICE&lt;/a&gt; files for details.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>input-output-hk/cardano-node</title>
    <updated>2022-05-29T02:40:28Z</updated>
    <id>tag:github.com,2022-05-29:/input-output-hk/cardano-node</id>
    <link href="https://github.com/input-output-hk/cardano-node" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The core component that is used to participate in a Cardano decentralised blockchain.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. raw:: html&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-node/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release-pre/input-output-hk/cardano-node.svg?style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://buildkite.com/input-output-hk/cardano-node&#34;&gt;&lt;img src=&#34;https://img.shields.io/buildkite/a978cbb4def7018be3d0a004127da356f4db32f1c318c1a48a/master?label=BUILD&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;table align=&#34;center&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt;GitHub Actions&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-node/actions/workflows/haskell.yml&#34;&gt;&lt;img alt=&#34;GitHub Workflow Status (master)&#34; src=&#34;https://img.shields.io/github/workflow/status/input-output-hk/cardano-node/Haskell%20CI/master&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-node/actions/workflows/haskell.yml&#34;&gt;&lt;img alt=&#34;GitHub Workflow Status (branch)&#34; src=&#34;https://img.shields.io/github/workflow/status/input-output-hk/cardano-node/Haskell%20CI/nightly?label=nightly&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;code&gt;cardano-node&lt;/code&gt; Overview&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Integration of the &lt;code&gt;ledger &amp;lt;https://github.com/input-output-hk/cardano-ledger-specs&amp;gt;&lt;/code&gt;&lt;em&gt;, &lt;code&gt;consensus &amp;lt;https://github.com/input-output-hk/ouroboros-network/tree/master/ouroboros-consensus&amp;gt;&lt;/code&gt;&lt;/em&gt;, &lt;code&gt;networking &amp;lt;https://github.com/input-output-hk/ouroboros-network/tree/master/ouroboros-network&amp;gt;&lt;/code&gt;_ and &lt;code&gt;node shell &amp;lt;https://github.com/input-output-hk/cardano-shell&amp;gt;&lt;/code&gt;_ repositories.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Logging &amp;lt;https://github.com/input-output-hk/iohk-monitoring-framework&amp;gt;&lt;/code&gt;_ is provided as a &lt;code&gt;feature &amp;lt;https://github.com/input-output-hk/cardano-shell/blob/master/app/Cardano/Shell/Features/Logging.hs&amp;gt;&lt;/code&gt;_ by the node shell to the other packages.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The cardano-node is the top level for the node and aggregates the other components from other packages: consensus, ledger and networking, with configuration, CLI, logging and monitoring.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The node no longer incorporates wallet or explorer functionality. The wallet backend and explorer backend are separate components that run in separate external processes that communicate with the node via local IPC.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Network Configuration, Genesis and Topology Files&lt;/h1&gt; &#xA;&lt;p&gt;The latest supported networks can be found at &lt;code&gt;&amp;lt;https://hydra.iohk.io/job/Cardano/cardano-node/cardano-deployment/latest-finished/download/1/index.html&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;h1&gt;How to build&lt;/h1&gt; &#xA;&lt;p&gt;Documentation for building the node can be found &lt;code&gt;here &amp;lt;https://docs.cardano.org/getting-started/installing-the-cardano-node&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h1&gt;Executables&lt;/h1&gt; &#xA;&lt;p&gt;You can download the latest version of &lt;code&gt;cardano-node&lt;/code&gt; and &lt;code&gt;cardano-cli&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;linux &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-node/linux.musl.cardano-node-linux/latest-finished&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;win64 &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-node/linux.windows.cardano-node-win64/latest-finished&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;macos &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-node/macos.cardano-node-macos/latest-finished&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Windows Executable&lt;/h1&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;You can download &lt;code&gt;here &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-node/linux.windows.cardano-node-win64/latest-finished&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;p&gt;The download includes cardano-node.exe and a .dll. To run the node with cardano-node run you need to reference a few files and directories as arguments. These can be copied from the cardano-node repo into the executables directory. The command to run the node on mainnet looks like this:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cardano-node.exe run --topology ./configuration/cardano/mainnet-topology.json --database-path ./state --port 3001 --config ./configuration/cardano/mainnet-config.yaml  --socket-path \\.\pipe\cardano-node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Docker image&lt;/h1&gt; &#xA;&lt;p&gt;You can pull the docker image with the latest version of cardano-node from &lt;code&gt;here &amp;lt;https://hub.docker.com/r/inputoutput/cardano-node&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull inputoutput/cardano-node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;&lt;code&gt;cardano-node&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;This refers to the client that is used for running a node.&lt;/p&gt; &#xA;&lt;p&gt;The general synopsis is as follows:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;Usage: cardano-node run [--topology FILEPATH] [--database-path FILEPATH] [--socket-path FILEPATH] [--byron-delegation-certificate FILEPATH] [--byron-signing-key FILEPATH] [--shelley-kes-key FILEPATH] [--shelley-vrf-key FILEPATH] [--shelley-operational-certificate FILEPATH] [--host-addr IPV4-ADDRESS] [--host-ipv6-addr IPV6-ADDRESS] [--port PORT] [--config NODE-CONFIGURATION] [--validate-db] Run the node.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--topology&lt;/code&gt; - Filepath to a topology file describing which peers the node should connect to.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--database-path&lt;/code&gt; - Path to the blockchain database.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--byron-delegation-certificate&lt;/code&gt; - Optional path to the Byron delegation certificate. The delegation certificate allows the delegator (the issuer of said certificate) to give his/her own block signing rights to somebody else (the delegatee). The delegatee can then sign blocks on behalf of the delegator.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--byron-signing-key&lt;/code&gt; - Optional path to the Byron signing key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--shelley-signing-key&lt;/code&gt; - Optional path to the Shelley signing key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--shelley-kes-key&lt;/code&gt; - Optional path to the Shelley KES signing key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--shelley-vrf-key&lt;/code&gt; - Optional path to the Shelley VRF signing key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--shelley-operational-certificate&lt;/code&gt; - Optional path to the Shelley operational certificate.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--socket-path&lt;/code&gt; - Path to the socket file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--host-addr&lt;/code&gt; - Optionally specify your node&#39;s IPv4 address.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--host-ipv6-addr&lt;/code&gt; - Optionally specify your node&#39;s IPv6 address.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--port&lt;/code&gt; - Specify which port to assign to the node.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--config&lt;/code&gt; - Specify the filepath to the config &lt;code&gt;.yaml&lt;/code&gt; file. This file is responsible for all the other node&#39;s required settings. See examples in &lt;code&gt;configuration&lt;/code&gt; (e.g. &lt;code&gt;config-0.yaml &amp;lt;configuration/defaults/simpleview/config-0.yaml&amp;gt;&lt;/code&gt;_).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--validate-db&lt;/code&gt; - Flag to revalidate all on-disk database files&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Configuration &lt;code&gt;.yaml&lt;/code&gt; files&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;code&gt;--config&lt;/code&gt; flag points to a &lt;code&gt;.yaml&lt;/code&gt; file that is responsible to configuring the logging &amp;amp; other important settings for the node. E.g. see the Byron mainnet configuration in this &lt;code&gt;configuration.yaml &amp;lt;https://github.com/input-output-hk/cardano-node/blob/master/configuration/defaults/byron-mainnet/configuration.yaml&amp;gt;&lt;/code&gt;_. Some of the more important settings are as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Protocol: RealPBFT&lt;/code&gt; -- Protocol the node will execute&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;RequiresNetworkMagic&lt;/code&gt;: RequiresNoMagic -- Used to distinguish between mainnet (&lt;code&gt;RequiresNoMagic&lt;/code&gt;) and testnets (&lt;code&gt;RequiresMagic&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Logging&lt;/h1&gt; &#xA;&lt;p&gt;Logs are output to the &lt;code&gt;logs/&lt;/code&gt; dir.&lt;/p&gt; &#xA;&lt;h1&gt;Profiling &amp;amp; statistics&lt;/h1&gt; &#xA;&lt;p&gt;Profiling data and RTS run stats are stored in the &lt;code&gt;profile/&lt;/code&gt; dir.&lt;/p&gt; &#xA;&lt;p&gt;Please see &lt;code&gt;scripts/README.md&lt;/code&gt; for how to obtain profiling information using the scripts.&lt;/p&gt; &#xA;&lt;h1&gt;Scripts&lt;/h1&gt; &#xA;&lt;p&gt;Please see &lt;code&gt;scripts/README.md&lt;/code&gt; for information on the various scripts.&lt;/p&gt; &#xA;&lt;h1&gt;&lt;code&gt;cardano-cli&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;A CLI utility to support a variety of key material operations (genesis, migration, pretty-printing..) for different system generations. Usage documentation can be found at &lt;code&gt;cardano-cli/README.md&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The general synopsis is as follows:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;Usage: cardano-cli (Era based commands | Byron specific commands | Miscellaneous commands)&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: the exact invocation command depends on the environment. If you have only built &lt;code&gt;cardano-cli&lt;/code&gt;, without installing it, then you have to prepend &lt;code&gt;cabal run -- &lt;/code&gt; before &lt;code&gt;cardano-cli&lt;/code&gt;. We henceforth assume that the necessary environment-specific adjustment has been made, so we only mention &lt;code&gt;cardano-cli&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The subcommands are subdivided in groups, and their full list can be seen in the output of &lt;code&gt;cardano-cli --help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;All subcommands have help available. For example:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;cabal run -- cardano-cli -- byron key migrate-delegate-key-from --help&lt;/p&gt; &#xA;&lt;p&gt;cardano-cli -- byron key migrate-delegate-key-from Usage: cardano-cli byron key migrate-delegate-key-from --from FILEPATH --to FILEPATH Migrate a delegate key from an older version.&lt;/p&gt; &#xA;&lt;p&gt;Available options: --byron-legacy-formats Byron/cardano-sl formats and compatibility --byron-formats Byron era formats and compatibility --from FILEPATH Signing key file to migrate. --to FILEPATH Non-existent file to write the signing key to. -h,--help Show this help text&lt;/p&gt; &#xA;&lt;h1&gt;Genesis operations&lt;/h1&gt; &#xA;&lt;h2&gt;Generation&lt;/h2&gt; &#xA;&lt;p&gt;The Byron genesis generation operations will create a directory that contains:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;genesis.json&lt;/code&gt;: The genesis JSON file itself.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;avvm-seed.*.seed&lt;/code&gt;: Ada Voucher Vending Machine seeds (secret). Affected by &lt;code&gt;--avvm-entry-count&lt;/code&gt; and &lt;code&gt;--avvm-entry-balance&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;delegate-keys.*.key&lt;/code&gt;: Delegate private keys. Affected by: &lt;code&gt;--n-delegate-addresses&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;delegation-cert.*.json&lt;/code&gt;: Delegation certificates. Affected by: &lt;code&gt;--n-delegate-addresses&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;genesis-keys.*.key&lt;/code&gt;: Genesis stake private keys. Affected by: &lt;code&gt;--n-delegate-addresses&lt;/code&gt;, &lt;code&gt;--total-balance&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;poor-keys.*.key&lt;/code&gt;: Non-delegate private keys with genesis UTxO. Affected by: &lt;code&gt;--n-poor-addresses&lt;/code&gt;, &lt;code&gt;--total-balance&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More details on the Byron Genesis &lt;code&gt;JSON&lt;/code&gt; file can be found in &lt;code&gt;docs/reference/byron-genesis.md&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Byron genesis delegation and related concepts are described in detail in:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;lt;https://hydra.iohk.io/job/Cardano/cardano-ledger-specs/byronLedgerSpec/latest/download-by-type/doc-pdf/ledger-spec&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;p&gt;The canned &lt;code&gt;scripts/benchmarking/genesis.sh&lt;/code&gt; example provides a nice set of defaults and illustrates available options.&lt;/p&gt; &#xA;&lt;h1&gt;Key operations&lt;/h1&gt; &#xA;&lt;p&gt;Note that key operations do not support password-protected keys.&lt;/p&gt; &#xA;&lt;h2&gt;Signing key generation &amp;amp; verification key extraction&lt;/h2&gt; &#xA;&lt;p&gt;Signing keys can be generated using the &lt;code&gt;keygen&lt;/code&gt; subcommand.&lt;/p&gt; &#xA;&lt;p&gt;Extracting a verification key out of the signing key is performed by the &lt;code&gt;to-verification&lt;/code&gt; subcommand.&lt;/p&gt; &#xA;&lt;h2&gt;Delegate key migration&lt;/h2&gt; &#xA;&lt;p&gt;In order to continue using a delegate key from the Byron Legacy era in the new implementation, it needs to be migrated over, which is done by the &lt;code&gt;migrate-delegate-key-from&lt;/code&gt; subcommand:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;$ cabal v2-run -- cardano-cli byron key migrate-delegate-key-from --from key0.sk --to key0Converted.sk&lt;/p&gt; &#xA;&lt;h2&gt;Signing key queries&lt;/h2&gt; &#xA;&lt;p&gt;One can gather information about a signing key&#39;s properties through the &lt;code&gt;signing-key-public&lt;/code&gt; and &lt;code&gt;signing-key-address&lt;/code&gt; subcommands (the latter requires the network magic):&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;$ cabal v2-run -- cardano-cli byron key signing-key-public --byron-formats --secret key0.sk&lt;/p&gt; &#xA;&lt;p&gt;public key hash: a2b1af0df8ca764876a45608fae36cf04400ed9f413de2e37d92ce04 public key: sc4pa1pAriXO7IzMpByKo4cG90HCFD465Iad284uDYz06dHCqBwMHRukReQ90+TA/vQpj4L1YNaLHI7DS0Z2Vg==&lt;/p&gt; &#xA;&lt;p&gt;$ cabal v2-run -- cardano-cli signing-key-address --byron-formats --secret key0.pbft --testnet-magic 42&lt;/p&gt; &#xA;&lt;p&gt;2cWKMJemoBakxhXgZSsMteLP9TUvz7owHyEYbUDwKRLsw2UGDrG93gPqmpv1D9ohWNddx VerKey address with root e5a3807d99a1807c3f161a1558bcbc45de8392e049682df01809c488, attributes: AddrAttributes { derivation path: {} }&lt;/p&gt; &#xA;&lt;h1&gt;Transactions&lt;/h1&gt; &#xA;&lt;h2&gt;Creation&lt;/h2&gt; &#xA;&lt;p&gt;Transactions can be created via the &lt;code&gt;issue-genesis-utxo-expenditure&lt;/code&gt; &amp;amp; &lt;code&gt;issue-utxo-expenditure&lt;/code&gt; commands.&lt;/p&gt; &#xA;&lt;p&gt;The easiest way to create a transaction is via the &lt;code&gt;scripts/benchmarking/issue-genesis-utxo-expenditure.sh&lt;/code&gt; script as follows:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;./scripts/benchmarking/issue-genesis-utxo-expenditure.sh transaction_file&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;NB: This by default creates a transaction based on &lt;code&gt;configuration/defaults/liveview/config-0.yaml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you do not have a &lt;code&gt;genesis_file&lt;/code&gt; you can run &lt;code&gt;scripts/benchmarking/genesis.sh&lt;/code&gt; which will create an example &lt;code&gt;genesis_file&lt;/code&gt; for you. The script &lt;code&gt;scripts/benchmarking/issue-genesis-utxo-expenditure.sh&lt;/code&gt; has defaults for all the requirements of the &lt;code&gt;issue-genesis-utxo-expenditure&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h2&gt;Submission&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;submit-tx&lt;/code&gt; subcommand provides the option of submitting a pre-signed transaction, in its raw wire format (see GenTx for Byron transactions).&lt;/p&gt; &#xA;&lt;p&gt;The canned &lt;code&gt;scripts/benchmarking/submit-tx.sh&lt;/code&gt; script will submit the supplied transaction to a testnet launched by &lt;code&gt;scripts/benchmarking/shelley-testnet-liveview.sh&lt;/code&gt; script.&lt;/p&gt; &#xA;&lt;h2&gt;Issuing UTxO expenditure (genesis and regular)&lt;/h2&gt; &#xA;&lt;p&gt;To make a transaction spending UTxO, you can either use the:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;issue-genesis-utxo-expenditure&lt;/code&gt;, for genesis UTxO&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;issue-utxo-expenditure&lt;/code&gt;, for normal UTxO&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;subcommands directly, or, again use canned scripts that will make transactions tailored for the aforementioned testnet cluster:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;scripts/benchmarking/issue-genesis-utxo-expenditure.sh&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scripts/benchmarking/issue-utxo-expenditure.sh&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The script requires the target file name to write the transaction to, input TxId (for normal UTxO), and optionally allows specifying the source txin output index, source and target signing keys and lovelace value to send.&lt;/p&gt; &#xA;&lt;p&gt;The target address defaults to the 1-st richman key (&lt;code&gt;configuration/delegate-keys.001.key&lt;/code&gt;) of the testnet, and lovelace amount is almost the entirety of its funds.&lt;/p&gt; &#xA;&lt;h1&gt;Local node queries&lt;/h1&gt; &#xA;&lt;p&gt;You can query the tip of your local node via the &lt;code&gt;get-tip&lt;/code&gt; command as follows&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open &lt;code&gt;tmux&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;cabal build cardano-node&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./scripts/lite/shelley-testnet.sh example&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run ``export CARDANO_NODE_SOCKET_PATH=/cardano-node/example/socket/node-1-socket&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cabal exec cardano-cli -- get-tip --testnet-magic 42&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You will see output from stdout in this format:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;Current tip: Block hash: 4ab21a10e1b25e39 Slot: 6 Block number: 5&lt;/p&gt; &#xA;&lt;h1&gt;Update proposals&lt;/h1&gt; &#xA;&lt;h2&gt;Update proposal creation&lt;/h2&gt; &#xA;&lt;p&gt;A Byron update proposal can be created as follows:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;cardano-cli -- byron governance create-update-proposal (--mainnet | --testnet-magic NATURAL) --signing-key FILEPATH --protocol-version-major WORD16 --protocol-version-minor WORD16 --protocol-version-alt WORD8 --application-name STRING --software-version-num WORD32 --system-tag STRING --installer-hash HASH --filepath FILEPATH ..&lt;/p&gt; &#xA;&lt;p&gt;The mandatory arguments are &lt;code&gt;--mainnet | --testnet-magic&lt;/code&gt;, &lt;code&gt;signing-key&lt;/code&gt;, &lt;code&gt;protocol-version-major&lt;/code&gt;, &lt;code&gt;protocol-version-minor&lt;/code&gt;, &lt;code&gt;protocol-version-alt&lt;/code&gt;, &lt;code&gt;application-name&lt;/code&gt;, &lt;code&gt;software-version-num&lt;/code&gt;, &lt;code&gt;system-tag&lt;/code&gt;, &lt;code&gt;installer-hash&lt;/code&gt; and &lt;code&gt;filepath&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The remaining arguments are optional parameters you want to update in your update proposal.&lt;/p&gt; &#xA;&lt;p&gt;You can also check your proposal&#39;s validity using the &lt;code&gt;validate-cbor&lt;/code&gt; command. See: &lt;code&gt;Validate CBOR files&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;code&gt;Byron specification &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-ledger-specs/byronLedgerSpec/latest/download-by-type/doc-pdf/ledger-spec&amp;gt;&lt;/code&gt;_ for more details on update proposals.&lt;/p&gt; &#xA;&lt;h2&gt;Update proposal submission&lt;/h2&gt; &#xA;&lt;p&gt;You can submit your proposal using the &lt;code&gt;submit-update-proposal&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;cardano-cli -- byron governance submit-update-proposal --config configuration/defaults/mainnet/configuration.yaml (--mainnet | --testnet-magic NATURAL) --filepath my-update-proposal&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;code&gt;Byron specification &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-ledger-specs/byronLedgerSpec/latest/download-by-type/doc-pdf/ledger-spec&amp;gt;&lt;/code&gt;_ for more details on update proposals.&lt;/p&gt; &#xA;&lt;h1&gt;Update proposal voting&lt;/h1&gt; &#xA;&lt;p&gt;You can create and submit byron update proposal votes with the &lt;code&gt;create-proposal-vote&lt;/code&gt; &amp;amp; &lt;code&gt;submit-proposal-vote&lt;/code&gt; commands. The following are two example commands:&lt;/p&gt; &#xA;&lt;p&gt;Byron vote creation:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;cabal exec cardano-cli -- byron governance create-proposal-vote (--mainnet | --testnet-magic NATURAL) --signing-key configuration/defaults/liveview/genesis/delegate-keys.000.key --proposal-filepath ProtocolUpdateProposalFile --vote-yes --output-filepath UpdateProposalVoteFile&lt;/p&gt; &#xA;&lt;p&gt;Byron vote submission:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;cabal exec cardano-cli -- byron governance submit-proposal-vote (--mainnet | --testnet-magic NATURAL) --filepath UpdateProposalVoteFile&lt;/p&gt; &#xA;&lt;h1&gt;Development&lt;/h1&gt; &#xA;&lt;h2&gt;GHCID&lt;/h2&gt; &#xA;&lt;p&gt;run &lt;em&gt;ghcid&lt;/em&gt; with: &lt;code&gt;ghcid -c &#34;cabal repl exe:cardano-node --reorder-goals&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Haskell Language Server&lt;/h2&gt; &#xA;&lt;p&gt;When using Haskell Language Server with Visual Studio Code, you may find that &lt;code&gt;HLINT annotations are ignored&amp;lt;https://github.com/haskell/haskell-language-server/issues/638&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To work around this, you may run the script &lt;code&gt;./scripts/reconfigure-hlint.sh&lt;/code&gt; to generate a &lt;code&gt;.hlint.yaml&lt;/code&gt; file with HLINT ignore rules derived from the source code.&lt;/p&gt; &#xA;&lt;h1&gt;Testing&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;cardano-node&lt;/code&gt; is essentially a container which implements several components such networking, consensus, and storage. These components have individual test coverage. The node goes through integration and release testing by Devops/QA while automated CLI tests are ongoing alongside development.&lt;/p&gt; &#xA;&lt;p&gt;Developers on &lt;code&gt;cardano-node&lt;/code&gt; can &lt;code&gt;launch their own testnets &amp;lt;doc/getting-started/launching-a-testnet.md&amp;gt;&lt;/code&gt;_ or &lt;code&gt;run the chairman tests &amp;lt;doc/getting-started/running-chairman-tests.md&amp;gt;&lt;/code&gt;_ locally.&lt;/p&gt; &#xA;&lt;h2&gt;Chairman tests&lt;/h2&gt; &#xA;&lt;h1&gt;Debugging&lt;/h1&gt; &#xA;&lt;h2&gt;Pretty printing CBOR encoded files&lt;/h2&gt; &#xA;&lt;p&gt;It may be useful to print the on chain representations of blocks, delegation certificates, txs and update proposals. There are two commands that do this (for any cbor encoded file):&lt;/p&gt; &#xA;&lt;p&gt;To pretty print as CBOR: &lt;code&gt;cabal exec cardano-cli -- pretty-print-cbor --filepath CBOREncodedFile&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Validate CBOR files&lt;/h2&gt; &#xA;&lt;p&gt;You can validate Byron era blocks, delegation certificates, txs and update proposals with the &lt;code&gt;validate-cbor&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cabal exec cardano-cli -- validate-cbor --byron-block 21600 --filepath CBOREncodedByronBlockFile&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Native Tokens&lt;/h1&gt; &#xA;&lt;p&gt;Native tokens is a new feature that enables the transacting of multi-assets on Cardano. Native tokens are now supported on mainnet and users can transact with ada, and an unlimited number of user-defined (custom) tokens natively.&lt;/p&gt; &#xA;&lt;p&gt;To help you get started we have compiled a handy list of resources:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Cardano Forum discussion &amp;lt;https://forum.cardano.org/c/developers/cardano-tokens/150&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Documentation for native tokens &amp;lt;https://docs.cardano.org/native-tokens/learn&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;p&gt;You can also read more about &lt;code&gt;native tokens and how they compare to ada and ERC20 &amp;lt;https://github.com/input-output-hk/cardano-ledger-specs/blob/master/doc/explanations/features.rst&amp;gt;&lt;/code&gt;_. Browse native tokens created on the Cardano blockchain and see their transactions in an interactive dashboard that allows filtering and searching: nativetokens.da.iogservices.io.&lt;/p&gt; &#xA;&lt;h1&gt;API Documentation&lt;/h1&gt; &#xA;&lt;p&gt;The API documentation is published &lt;code&gt;here &amp;lt;https://input-output-hk.github.io/cardano-node/&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;The documentation is built with each push, but is only published from &lt;code&gt;master&lt;/code&gt; branch. In order to test if the documentation is working, build the documentation locally with &lt;code&gt;./scripts/haddocs.sh&lt;/code&gt; and open &lt;code&gt;haddocks/index.html&lt;/code&gt; in the browser.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>koka-lang/koka</title>
    <updated>2022-05-29T02:40:28Z</updated>
    <id>tag:github.com,2022-05-29:/koka-lang/koka</id>
    <link href="https://github.com/koka-lang/koka" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Koka language compiler and interpreter&lt;/p&gt;&lt;hr&gt;&lt;img align=&#34;left&#34; width=&#34;100&#34; height=&#34;100&#34; src=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/doc/logo/koka-logo-filled.png&#34;&gt; &#xA;&lt;!--&#xA;[&lt;img align=&#34;right&#34; src=&#34;https://travis-ci.org/koka-lang/koka.svg?branch=master&#34;/&gt;](https://travis-ci.org/koka-lang/koka)&#xA;--&gt; &#xA;&lt;a href=&#34;https://matrix.to/#/#koka-lang_koka:gitter.im&#34;&gt; &lt;img align=&#34;right&#34; style=&#34;margin: 5px&#34; src=&#34;https://img.shields.io/matrix/koka-lang:matrix.org?label=chat%20on%20matrix&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://gitter.im/koka-lang/koka?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt; &lt;img align=&#34;right&#34; style=&#34;margin: 5px&#34; src=&#34;https://badges.gitter.im/koka-lang/koka.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h1&gt;Koka: a Functional Language with Effects&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Koka v2 is a research language that currently under heavy development with the new C backend&lt;/em&gt; &lt;em&gt;Latest release&lt;/em&gt;: v2.4.0, 2022-02-07 (&lt;a href=&#34;https://koka-lang.github.io/koka/doc/book.html&#34;&gt;Install&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://koka-lang.github.io/koka/doc/book.html#why-handlers&#34;&gt;&lt;img align=&#34;right&#34; width=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/doc/snippet-yield.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Koka is a strongly typed functional-style language with effect types and handlers.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The core of Koka consists of a small set of well-studied language features, like first-class functions, a polymorphic type- and effect system, algebraic data types, and effect handlers. Each of these is composable and avoid the addition of ‚Äúspecial‚Äù extensions by being as general as possible.&lt;/li&gt; &#xA; &lt;li&gt;Koka tracks the (side) &lt;em&gt;effects&lt;/em&gt; of every function in its type, where pure and effectful computations are distinguished. The precise effect typing gives Koka &lt;em&gt;rock-solid semantics&lt;/em&gt; backed by well-studied category theory, which makes Koka particularly easy to reason about for both humans and compilers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Effect handlers&lt;/em&gt; let you define advanced control abstractions, like exceptions, async/await, or probabilistic programs, as a user library in a typed and composable way.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://koka-lang.github.io/koka/doc/book.html#why-perceus&#34;&gt;Perceus&lt;/a&gt; is an advanced compilation method for reference counting. Together with &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/generalized-evidence-passing-for-effect-handlers/&#34;&gt;evidence passing&lt;/a&gt;, this lets Koka compile directly to C code &lt;em&gt;without needing a garbage collector or runtime system&lt;/em&gt;. Perceus also performs &lt;a href=&#34;https://koka-lang.github.io/koka/doc/book.html#why-fbip&#34;&gt;reuse analysis&lt;/a&gt; and optimizes functional-style programs to use in-place updates when possible.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To learn more:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://koka-lang.github.io/koka/doc/book.html&#34;&gt;Install&lt;/a&gt; Koka and compile your first programs.&lt;/li&gt; &#xA; &lt;li&gt;Read the &lt;a href=&#34;https://koka-lang.github.io/koka/doc/book.html&#34;&gt;Koka book&lt;/a&gt; for a tour of the Koka language and its specification.&lt;/li&gt; &#xA; &lt;li&gt;Browse the &lt;a href=&#34;https://koka-lang.github.io/koka/doc/toc.html&#34;&gt;library documentation&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Help with &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/#tasks&#34;&gt;development&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Enjoy, Daan Leijen&lt;/p&gt; &#xA;&lt;p&gt;Special thanks to: &lt;a href=&#34;https://antonlorenzen.de/&#34;&gt;Anton Lorenzen&lt;/a&gt; for his work on frame-limited reuse in Perceus &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/#references&#34;&gt;[10]&lt;/a&gt;, &lt;a href=&#34;https://xnning.github.io/&#34;&gt;Ningning Xie&lt;/a&gt; for her work on the theory and practice of evidence passing &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/#references&#34;&gt;[9,6]&lt;/a&gt; and the formalization of Perceus reference counting &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/#references&#34;&gt;[8]&lt;/a&gt;, &lt;a href=&#34;https://alexreinking.com/&#34;&gt;Alex Reinking&lt;/a&gt; for the implementation of the Perceus reference counting analysis &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/#references&#34;&gt;[8]&lt;/a&gt;, and all previous interns working on earlier versions of Koka: Daniel Hillerstr√∂m, Jonathan Brachth√§user, Niki Vazou, Ross Tate, Edsko de Vries, and Dana Xu.&lt;/p&gt; &#xA;&lt;h2&gt;Recent Releases&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.4.0&lt;/code&gt;, 2022-02-07: automatic generation of installation packages for various Linux distributions (by &lt;a href=&#34;https://github.com/rubikscraft&#34;&gt;Rubikscraft&lt;/a&gt;), improved specialization and integer add/sub, add &lt;code&gt;rbtree-fbip&lt;/code&gt; sample, improve grammar (&lt;code&gt;pub&lt;/code&gt; (instead of &lt;code&gt;public&lt;/code&gt;, remove private (as it is always default)), &lt;code&gt;final ctl&lt;/code&gt; (instead of &lt;code&gt;brk&lt;/code&gt;), underscores in number literals, etc), rename &lt;code&gt;double&lt;/code&gt; to &lt;code&gt;float64&lt;/code&gt;, various bug fixes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.3.8&lt;/code&gt;, 2021-12-27: improved &lt;code&gt;int&lt;/code&gt; performance, various bug fixes, update wasm backend, initial conan support, fix js backend.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.3.6&lt;/code&gt;, 2021-11-26: fix specialization bug, add &lt;code&gt;std/os/readline&lt;/code&gt; module.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.3.4&lt;/code&gt;, 2021-11-26: &lt;code&gt;maybe&lt;/code&gt;-like types are already value types, but now also no longer need heap allocation if not nested (and &lt;code&gt;[Just(1)]&lt;/code&gt; uses the same heap space as &lt;code&gt;[1]&lt;/code&gt;), improved atomic refcounting (by Anton Lorenzen), improved specialization (by Steven Fontanella), various small fixes, fix build on freeBSD.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.3.2&lt;/code&gt;, 2021-10-15: initial wasm support (use &lt;code&gt;--target=wasm&lt;/code&gt;, and install &lt;a href=&#34;https://emscripten.org/docs/getting_started/downloads.html&#34;&gt;emscripten&lt;/a&gt; and &lt;a href=&#34;https://wasmtime.dev/&#34;&gt;wasmtime&lt;/a&gt;), improved reuse specialization (by Anton Lorenzen), fix default color scheme for non-dark shells (#190), stack-less free and marking, add &lt;code&gt;--stack&lt;/code&gt; option, &lt;a href=&#34;https://musl.libc.org/&#34;&gt;musl&lt;/a&gt; support (use &lt;code&gt;--cc=musl-gcc&lt;/code&gt;), fix &lt;code&gt;vcpkg&lt;/code&gt; support on macOS with homebrew installed vcpkg, various bug fixes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.3.1&lt;/code&gt;, 2021-09-29: improved TRMC optimizations, and improved reuse (the &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/test/bench/koka/rbtree.kk&#34;&gt;rbtree&lt;/a&gt; benchmark is faster as C++ now). Improved effect operation speed. Allow elision of &lt;code&gt;-&amp;gt;&lt;/code&gt; in anonymous function expressions (e.g. &lt;code&gt;xs.map( fn(x) x + 1 )&lt;/code&gt;) and operation clauses. Allow &lt;code&gt;ctl&lt;/code&gt; for &lt;code&gt;control&lt;/code&gt;. New default output directory as &lt;code&gt;.koka&lt;/code&gt; and improved command line options to be more in line with other compilers (with &lt;code&gt;-o&lt;/code&gt; specifying the final output, and &lt;code&gt;-e&lt;/code&gt; to execute the program).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.3.0&lt;/code&gt;, 2021-09-20: many changes: new layout rule to &lt;a href=&#34;https://koka-lang.github.io/koka/doc/book.html#sec-layout&#34;&gt;elide braces&lt;/a&gt; and no more need to parenthesize &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;match&lt;/code&gt; conditions (see the &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/samples/basic/rbtree.kk&#34;&gt;&lt;code&gt;samples/basic/rbtree&lt;/code&gt;&lt;/a&gt; for an example of this), updated the JavaScript backend (&lt;code&gt;--target=js&lt;/code&gt;) to use standard ES6 modules and using the new &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt&#34;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt; for arbitrary precision integers, improved runtime layout with support for 128-bit arm CHERI, add the &lt;code&gt;std/num/int64&lt;/code&gt; module and &lt;code&gt;int64&lt;/code&gt; primitive type, add the &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/test/bench/koka/binarytrees.kk&#34;&gt;binarytrees&lt;/a&gt; benchmark, initial support for parallel tasks (in &lt;code&gt;std/os/task&lt;/code&gt;), improved simplification and inlining giving much improved effect operations, updated isocline for the interactive environment.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.2.1&lt;/code&gt;, 2021-09-05: improved optimization, initial parallel tasks, binary-trees benchmark, still slightly slower effect handling, upgrade isocline, fix minor bugs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.2.0&lt;/code&gt;, 2021-08-26: improved case-of-known simpification (by Rakshika B), improve cross-module specialization (by Steven Fontanella), initial borrowing annotations and improved reuse analysis (by Anton Lorenzen), improved line editing in the interactive environment, improved inlining. Note: due to the new inline phases, effect handling may currently be a tad slower in this release but will be improved for the next release.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/#older-release-notes&#34;&gt;Older release notes&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--&#xA;&lt;img align=&#34;right&#34; width=&#34;200&#34; src=&#34;doc/system-logos.png&#34;&gt;&#xA;--&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;p&gt;Koka has &lt;a href=&#34;https://koka-lang.github.io/koka/doc/book.html&#34;&gt;binary installers&lt;/a&gt; for Windows (x64), macOS (x64, M1), Linux (x64, arm64), and FreeBSD (x64). For other platforms, you need to build the compiler from source.&lt;/p&gt; &#xA;&lt;h1&gt;Build from Source&lt;/h1&gt; &#xA;&lt;p&gt;Koka has few dependencies and should build from source without problems on most common platforms, e.g. Windows (including WSL), macOS, and Unix. The following programs are required to build Koka:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.haskellstack.org/&#34;&gt;Stack&lt;/a&gt; to run the Haskell compiler. Use &lt;code&gt;curl -sSL https://get.haskellstack.org/ | sh&lt;/code&gt; on Unix and macOS x64, or the binary &lt;a href=&#34;https://get.haskellstack.org/stable/windows-x86_64-installer.exe&#34;&gt;installer&lt;/a&gt; on Windows. On macOS M1, use &lt;code&gt;brew install haskell-stack --head&lt;/code&gt; (and see the &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/#build-notes&#34;&gt;build notes&lt;/a&gt; below).&lt;/li&gt; &#xA; &lt;li&gt;Optional: &lt;a href=&#34;https://vcpkg.io/en/getting-started.html&#34;&gt;vcpkg&lt;/a&gt; to be able to link easily with C libraries. Use &lt;code&gt;brew install vcpkg&lt;/code&gt; on macOS. On other systems use the vcpkg &lt;a href=&#34;https://vcpkg.io/en/getting-started.html&#34;&gt;install&lt;/a&gt; instructions (Koka can find vcpkg automatically if installed to &lt;code&gt;~/vcpkg&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Optional: &lt;a href=&#34;http://nodejs.org&#34;&gt;nodejs&lt;/a&gt; if using the Javascript backend.&lt;/li&gt; &#xA; &lt;li&gt;Optional: &lt;a href=&#34;https://emscripten.org/docs/getting_started/downloads.html&#34;&gt;emscripten&lt;/a&gt; and &lt;a href=&#34;https://wasmtime.dev/&#34;&gt;wasmtime&lt;/a&gt; if using the Wasm backend.&lt;/li&gt; &#xA; &lt;li&gt;Optional: On Windows it is recommended to install the &lt;a href=&#34;https://llvm.org/builds&#34;&gt;clang&lt;/a&gt; C compiler, or the &lt;a href=&#34;https://visualstudio.microsoft.com/downloads/&#34;&gt;Visual Studio&lt;/a&gt; C compiler.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Now clone the repository and build the compiler as (note the &lt;code&gt;--recursive&lt;/code&gt; flag):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone --recursive https://github.com/koka-lang/koka&#xA;$ cd koka&#xA;$ stack update&#xA;$ stack build&#xA;$ stack exec koka&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;stack build --fast&lt;/code&gt; to build a debug version of the compiler. Use &lt;code&gt;stack test --fast&lt;/code&gt; to run the test-suite.&lt;/p&gt; &#xA;&lt;p&gt;(See the &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/#build-notes&#34;&gt;build notes&lt;/a&gt; below for building macOS M1, or if you have issues when running- or installing &lt;code&gt;stack&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Create an Install Bundle&lt;/h2&gt; &#xA;&lt;p&gt;Koka can generate a binary install bundle that can be installed on the local machine:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ stack exec koka -- -e util/bundle&#xA;...&#xA;distribution bundle created.&#xA;  bundle : bundle/v2.3.9/koka-v2.3.9-linux-x64.tar.gz&#xA;  cc     : gcc&#xA;  version: v2.3.9&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This takes a while as it pre-compiles the standard libraries in three build variants (&lt;code&gt;debug&lt;/code&gt;, &lt;code&gt;drelease&lt;/code&gt; (release with debug info), and &lt;code&gt;release&lt;/code&gt;). After generating the bundle, you can install it locally as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ util/install.sh  bundle/v2.3.9/koka-v2.3.9-linux-x64.tar.gz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(use &lt;code&gt;util/install.bat&lt;/code&gt; on Windows). After installation, you can now directly invoke &lt;code&gt;koka&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ koka --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Koka is by default installed for the current user in &lt;code&gt;&amp;lt;prefix&amp;gt;/bin/koka&lt;/code&gt;, (with architecture specific files under &lt;code&gt;&amp;lt;prefix&amp;gt;/lib/koka/v2.x.x&lt;/code&gt; and libraries and samples under &lt;code&gt;&amp;lt;prefix&amp;gt;/share/koka/v2.x.x&lt;/code&gt;). On Unix and macOS the default prefix is &lt;code&gt;/usr/local&lt;/code&gt; while on Windows the default prefix is &lt;code&gt;%LOCALAPPDATA%\koka&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is also possible to generate installation packages for various Linux platforms (RHEL, Debian, Alpine, etc.). See the [readme][util/packaging] for further information.&lt;/p&gt; &#xA;&lt;h1&gt;Benchmarks&lt;/h1&gt; &#xA;&lt;p&gt;These are initial benchmarks of Koka v2 with &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/perceus-garbage-free-reference-counting-with-reuse/&#34;&gt;Perceus&lt;/a&gt; reference counting versus state-of-the-art memory reclamation implementations in various other languages. Since we compare across languages we need to interpret these results with care -- the results depend not only on memory reclamation but also on the different optimizations performed by each compiler and how well we can translate each benchmark to that particular language. We view these results therefore mostly as &lt;em&gt;evidence that the current Koka implementation of reference counting is viable and can be competitive&lt;/em&gt; and &lt;em&gt;not&lt;/em&gt; as a direct comparison of absolute performance between languages and systems.&lt;/p&gt; &#xA;&lt;p&gt;As such, we select here only benchmarks that stress memory allocation, and we tried to select mature comparison systems that use a range of memory reclamation techniques and are considered best-in-class. The systems we compare are, Koka 2.0.3 (compiling the generated C code with gcc 9.3.0), &lt;a href=&#34;https://ocaml.org&#34;&gt;OCaml&lt;/a&gt; 4.08.1, &lt;a href=&#34;https://www.haskell.org&#34;&gt;Haskell&lt;/a&gt; GHC 8.6.5, &lt;a href=&#34;https://swift.org/&#34;&gt;Swift&lt;/a&gt; 5.3, &lt;a href=&#34;https://www.java.com&#34;&gt;Java&lt;/a&gt; SE 15.0.1 with the Hotspot G1 collector, and &lt;a href=&#34;http://www.cplusplus.org&#34;&gt;C++&lt;/a&gt; gcc 9.3.0.&lt;/p&gt; &#xA;&lt;img align=&#34;right&#34; width=&#34;400&#34; src=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/doc/bench-amd3600-nov-2020.png&#34; style=&#34;border:1px solid black&#34;&gt; &#xA;&lt;p&gt;The benchmarks are all available in &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/test/bench&#34;&gt;&lt;code&gt;test/bench&lt;/code&gt;&lt;/a&gt; (see the readme there for build instructions), and all stress memory allocation with little computation: &lt;code&gt;rbtree&lt;/code&gt; (inserts 42 million items into a red-black tree), &lt;code&gt;rbtree-ck&lt;/code&gt; (a variant of &lt;code&gt;rbtree&lt;/code&gt; that keeps a list of every 5th subtree and thus shares many subtrees), &lt;code&gt;deriv&lt;/code&gt; (the symbolic derivative of a large expression), &lt;code&gt;nqueens&lt;/code&gt; (calculates all solutions for the n-queens problem of size 13 into a list, and returns the length of that list where the solution lists share many sub-solutions), and &lt;code&gt;cfold&lt;/code&gt; (constant-folding over a large symbolic expression).&lt;/p&gt; &#xA;&lt;p&gt;Note: in C++, without automatic memory management, many benchmarks are difficult to express directly as they use persistent and partially shared data structures. To implement these faithfully would essentially require manual reference counting. Instead, we use C++ as our performance baseline: we either use in-place updates without supporting persistence (as in &lt;code&gt;rbtree&lt;/code&gt; which uses &lt;code&gt;std::map&lt;/code&gt;) or we do not reclaim memory at all (as in &lt;code&gt;deriv&lt;/code&gt;, &lt;code&gt;nqueens&lt;/code&gt;, and &lt;code&gt;cfold&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The execution times and peak working set averaged over 10 runs and normalized to Koka are in the figure on the right (on a 3.8Ghz AMD3600XT on Ubuntu 20.04, Nov 2020).&lt;/p&gt; &#xA;&lt;p&gt;We can see that even though Koka has currently few optimizations besides the reference counting ones, it performs very well compared to these mature systems, often outperforming by a significant margin -- both in execution time and peak working set. Clearly, these benchmarks are allocation heavy but it is encouraging to see this initial performance from Koka.&lt;/p&gt; &#xA;&lt;p&gt;A full discussion of these benchmarks and systems can be found in the &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/perceus-garbage-free-reference-counting-with-reuse/&#34;&gt;Perceus&lt;/a&gt; report.&lt;/p&gt; &#xA;&lt;h1&gt;Tasks&lt;/h1&gt; &#xA;&lt;p&gt;Please help develop Koka: there are many opportunities to improve Koka or do research with Koka. We need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Emacs (partially done) and Vim syntax highlighting.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add more samples, improve documentation, landing page etc. Make it easier for people to contribute.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Many library modules are incomplete (like &lt;code&gt;std/os/file&lt;/code&gt;) or missing (like &lt;code&gt;std/data/map&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Update file and os primitives for the JavaScript backend.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Run the full test suite.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Run the Bayesian probalistic machine learning program with large parameters.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Functions with a pattern match in the argument (by Steven Fontanella).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support &lt;code&gt;int64&lt;/code&gt; operations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More advanced projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Update the JavaScript backend to 1) use modern modules instead of amdefine, 2) use the new bigints instead of bigint.js, and 3) add support for int64. (landed in the &lt;code&gt;dev&lt;/code&gt; branch)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Port &lt;code&gt;std/text/regex&lt;/code&gt; from v1 (using PCRE)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; A language server for Visual Studio Code and Atom. Koka can already generate a typed &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/src/Syntax/RangeMap.hs&#34;&gt;range map&lt;/a&gt; so this should be managable. Partially done: see PR #100 (by @fwcd) -- it just needs work on packaging it to make it easy to build and install as part of the Koka installer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Package management of Koka modules.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Compile to WASM (using emscripten on the current C backend)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Extend TRMC to include (1) return results with pairs (like &lt;code&gt;unzip&lt;/code&gt; or &lt;code&gt;partition&lt;/code&gt;), (2) associative functions (like &lt;code&gt;+&lt;/code&gt; in &lt;code&gt;length&lt;/code&gt;), and (3) mutually recursive functions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Improve compilation of local state to use local variables directly (in C) without allocation. Tricky though due to multiple resumptions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Improve performance of array/mutable reference programming. Koka is has great performance for algebraic datatypes but lags when using more imperative array algorithms. This requires better integration with the reference counting (faster in-place update for vectors) and integration local mutable references.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; To support optimal Btree&#39;s we need &lt;em&gt;mutable fields&lt;/em&gt; in constructors, and perhaps intrusive vector fields.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The current parallel task support is very basic; we need a great work-stealing thread pool, LVar&#39;s etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Expose the &#34;bytes&#34; primitive data together with views..&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Improve C code generation by identifying output that could be better; also in effectful code we generate many join-points (see [9]), can we increase the sharing/reduce the extra code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The compiler always analyses module dependencies and builds any needed dependencies. The current code (in &lt;code&gt;src/Compiler/Compile.hs&lt;/code&gt;) is not great and it would be nice to factorize the &#34;make&#34; functionality out and also allow for parallel builds.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Master/PhD level:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Better language level FBIP support with guaranteed datatype matching, automatic derivative and visitor generation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Can we use C++ exceptions to implement &#34;zero-cost&#34; &lt;code&gt;if yielding() ...&lt;/code&gt; branches and remove the need join points (see [9]).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Float up &lt;code&gt;open&lt;/code&gt; calls to improve effect handling (worked on by Naoya Furudono)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Formalize opening and closing effect row types (worked on by Kazuki Ikemori)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Currently being worked on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Various standard optimizations like case-of-case, join points, case-of-known constructor, etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Implement inline specialization where functions like &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;fold&lt;/code&gt; etc get specialized for the function with which they are called. This is an important optimization for functional style languages to reduce the allocation of lambda&#39;s. (contact: Steven Fontanella)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Borrowing analysis for Perceus and improved reuse analysis. (contact: Anton Lorenzen)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Improve case-of-known simplification with shape information&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following is the immediate todo list to be completed in the coming months:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Port &lt;code&gt;std/async&lt;/code&gt; (using &lt;code&gt;libuv&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Proper overloading with (a form of) type classes. (in design phase).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Contact me if you are interested in tackling some of these :-)&lt;/p&gt; &#xA;&lt;h1&gt;Build Notes&lt;/h1&gt; &#xA;&lt;h2&gt;Branches&lt;/h2&gt; &#xA;&lt;p&gt;The main development branches are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;master&lt;/code&gt;: latest stable version.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dev&lt;/code&gt;: current development branch -- submit PR&#39;s to this branch.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v1-master&lt;/code&gt;: last stable version of Koka v1: this is Koka with the Javascript (and C#) backend which does not use evidence translation. This version supports &lt;code&gt;std/async&lt;/code&gt; and should compile examples from published papers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building on macOS M1&lt;/h2&gt; &#xA;&lt;p&gt;Currently (Dec 2021) you need to use &lt;code&gt;brew install haskell-stack --head&lt;/code&gt; to get the latest &lt;code&gt;2.7.4&lt;/code&gt; version of stack. (Have patience as the cabal install step takes about 20 min). Moreover, you need to add the &lt;code&gt;brew&lt;/code&gt; installed LLVM to your path afterwards, or otherwise stack cannot find the LLVM tools. Add the following to your &lt;code&gt;~/.zshrc&lt;/code&gt; script and open an fresh prompt:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export PATH=/opt/homebrew/opt/llvm/bin:$PATH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!--&#xA;Moreover, sometimes `stack` segfaults but running it inside `bash` seems to resolve the issue.&#xA;Also, we need to tell stack to use the system installed ghc and skip the version check as&#xA;it can currently not install GHC for arm64 yet:&#xA;```&#xA;bash:~$ git clone --recursive https://github.com/koka-lang/koka&#xA;bash:~$ cd koka&#xA;bash:~/koka$ stack --system-ghc --skip-ghc-check build&#xA;bash:~/koka$ stack --system-ghc --skip-ghc-check exec koka&#xA;```&#xA;&#xA;and pass the `--system-ghc` flag to create an installation bundle as well:&#xA;```&#xA;bash:~/koka$ stack --system-ghc --skip-ghc-check exec koka -- -e util/bundle -- --system-ghc&#xA;```&#xA;--&gt; &#xA;&lt;h2&gt;Building with Cabal&lt;/h2&gt; &#xA;&lt;p&gt;Some platforms (like Linux arm64 and FreeBSD) do not always support &lt;code&gt;stack&lt;/code&gt; well. In these cases we can also use &lt;code&gt;ghc&lt;/code&gt; and &lt;code&gt;cabal&lt;/code&gt; directly. Install these packages as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo apt update&#xA;$ sudo apt install ghc cabal-install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On macOS (x64 and arm64) we use &lt;code&gt;brew&lt;/code&gt; instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew install pkg-config ghc cabal-install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On FreeBSD, use &lt;code&gt;pkg&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo pkg update&#xA;$ sudo pkg install ghc hs-cabal-install   # or: hs-haskell-platform&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optionally, install &lt;code&gt;vcpkg&lt;/code&gt; as well. If you install this in the &lt;code&gt;~/vcpkg&lt;/code&gt; directory Koka will find it automatically when needed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;~$ git clone https://github.com/microsoft/vcpkg&#xA;~$ ./vcpkg/bootstrap-vcpkg.sh&#xA;~$ vcpkg/vcpkg install pcre&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can now build the compiler using &lt;code&gt;cabal&lt;/code&gt; as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;~$ git clone --recursive https://github.com/koka-lang/koka&#xA;~$ cd koka&#xA;~/koka$ cabal new-update&#xA;~/koka$ cabal new-build&#xA;~/koka$ cabal new-run koka&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can also run tests as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;~/koka$ cabal new-run koka-test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or create an installer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;~/koka$ cabal new-run koka -- -e util/bundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building with minbuild&lt;/h2&gt; &#xA;&lt;p&gt;If neither &lt;code&gt;stack&lt;/code&gt; nor &lt;code&gt;cabal&lt;/code&gt; are functional, you may try to run the minimal build script to build Koka:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;~/koka$ ./util/minbuild.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which directly invokes &lt;code&gt;ghc&lt;/code&gt; to build the compiler. You can create an install bundle from a minbuild as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;~/koka$ .koka/minbuild/koka -e util/bundle.kk -- --koka=.koka/minbuild/koka&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Windows C Compilers&lt;/h2&gt; &#xA;&lt;p&gt;The Koka compiler on Windows requires a C compiler. By default when using &lt;code&gt;stack exec koka&lt;/code&gt; the C compiler supplied with &lt;code&gt;ghc&lt;/code&gt; is used (&lt;code&gt;mingw&lt;/code&gt;) but that is only visible within a stack environmet.&lt;/p&gt; &#xA;&lt;p&gt;It is therefore recommended to install the &lt;a href=&#34;https://llvm.org/builds&#34;&gt;clang&lt;/a&gt; compiler for Windows (which is automatically installed when running &lt;code&gt;util/install.bat&lt;/code&gt;). However, Koka can also use the Microsoft Visual C++ compiler (&lt;code&gt;cl&lt;/code&gt;) if you run &lt;code&gt;koka&lt;/code&gt; from a &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/vsprompt&#34;&gt;Visual Studio x64 toolset&lt;/a&gt; command prompt (in order to link correctly with the Windows system libraries).&lt;/p&gt; &#xA;&lt;p&gt;Generally, for Koka code, &lt;code&gt;mingw&lt;/code&gt; (&lt;code&gt;gcc&lt;/code&gt;) optimizes best, closely followed &lt;code&gt;clang-cl&lt;/code&gt;. On a 3.8Gz AMD 3600XT, with &lt;code&gt;mingw&lt;/code&gt; 7.2.0, &lt;code&gt;clang-cl&lt;/code&gt; 11.0.0, and &lt;code&gt;cl&lt;/code&gt; 19.28 we get:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ stack exec out\v2.0.5\mingw-release\test_bench_koka_rbtree -- --kktime&#xA;420000&#xA;info: elapsed: 0.624s, user: 0.625s, sys: 0.000s, rss: 163mb&#xA;&#xA;$ out\v2.0.5\clang-cl-release\test_bench_koka_rbtree --kktime&#xA;420000&#xA;info: elapsed: 0.727s, user: 0.734s, sys: 0.000s, rss: 164mb&#xA;&#xA;$ out\v2.0.5\cl-release\test_bench_koka_rbtree --kktime&#xA;420000&#xA;info: elapsed: 1.483s, user: 1.484s, sys: 0.000s, rss: 164mb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Older Release Notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.1.9&lt;/code&gt;, 2021-06-23: initial support for cross-module specialization (by Steven Fontanella).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.1.8&lt;/code&gt;, 2021-06-17: initial support for macOS M1 and Linux arm64, improved readline, minor fixes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.1.6&lt;/code&gt;, 2021-06-10: initial support for shallow resumptions, fix space leak with vectors, allow &lt;code&gt;gcc&lt;/code&gt; with &lt;code&gt;--fasan&lt;/code&gt;, improved &lt;code&gt;vcpkg&lt;/code&gt; support, add &lt;code&gt;--fstdalloc&lt;/code&gt; flag, improved VS code syntax highlighting, improved &lt;code&gt;valgrind&lt;/code&gt; support, added &lt;code&gt;--no-optimize&lt;/code&gt; flag for extended debug information.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.1.4&lt;/code&gt;, 2021-05-31: remove dependency on cmake, support library linking, support vckpg, updated &lt;code&gt;std/text/regex&lt;/code&gt;, improved Windows installer with &lt;code&gt;clang&lt;/code&gt; install included, remove dependency on Visual Studio on Windows, improved &lt;code&gt;--fasan&lt;/code&gt; support, fixed space leak on boxed value types, use signed &lt;code&gt;size_t&lt;/code&gt; internally, various small bug fixes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.1.2&lt;/code&gt;, 2021-05-01: various bug fixes, allow pattern bindings in parameters of anonymous functions (by Steven Fontanella), initial Emacs syntax highlighting (by Kamoii).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.1.1&lt;/code&gt;, 2021-03-08: bug fixes, use right-associative (++) for string- and list append (instead of (+)), improved internal string handling.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.0.16&lt;/code&gt;, 2021-02-14: bug fixes, fix short-circuit evaluation of logical operations, improved utf-8 handling.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.0.14&lt;/code&gt;, 2020-12-11: bug fixes, improved var escape checking.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.0.12&lt;/code&gt;, 2020-12-02: syntax highlighting support for VS Code and Atom, improved uninstall, more samples.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.0.9&lt;/code&gt;, 2020-11-27: now with binary &lt;a href=&#34;https://github.com/koka-lang/koka/releases&#34;&gt;releases&lt;/a&gt; for Windows, macOS, and Linux.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.0.7&lt;/code&gt;, 2020-11-23: more small fixes, improved scoped handlers, improved higher-rank type propagation, more samples.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.0.5&lt;/code&gt;, 2020-11-15: many bug fixes and improvements. Improved codegen, named handlers, added samples, docker support, direct C compilation, local install support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.0.0&lt;/code&gt;, 2020-08-21: initial v2 release.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;References&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Daniel Hillerstr√∂m, and Sam Lindley. ‚ÄúLiberating Effects with Rows and Handlers.‚Äù In &lt;em&gt;Proceedings of the 1st International Workshop on Type-Driven Development&lt;/em&gt;, 15--27. TyDe 2016. Nara, Japan. 2016. doi:&lt;a href=&#34;https://dx.doi.org/10.1145/2976022.2976033&#34;&gt;10.1145/2976022.2976033&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Daan Leijen. ‚ÄúKoka: Programming with Row Polymorphic Effect Types.‚Äù In &lt;em&gt;Mathematically Structured Functional Programming 2014&lt;/em&gt;. EPTCS. Mar. 2014. arXiv:&lt;a href=&#34;http://arxiv.org/abs/1406.2061&#34;&gt;1406.2061&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Daan Leijen. &lt;em&gt;Algebraic Effects for Functional Programming&lt;/em&gt;. MSR-TR-2016-29. Microsoft Research. Aug. 2016. &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/algebraic-effects-for-functional-programming&#34;&gt;https://www.microsoft.com/en-us/research/publication/algebraic-effects-for-functional-programming&lt;/a&gt;. Extended version of [4].&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Daan Leijen. ‚ÄúType Directed Compilation of Row-Typed Algebraic Effects.‚Äù In &lt;em&gt;Proceedings of Principles of Programming Languages (POPL‚Äô17)&lt;/em&gt;. Paris, France. Jan. 2017.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Nicolas Wu, Tom Schrijvers, and Ralf Hinze. ‚ÄúEffect Handlers in Scope.‚Äù In &lt;em&gt;Proceedings of the 2014 ACM SIGPLAN Symposium on Haskell&lt;/em&gt;, 1--12. Haskell ‚Äô14. ACM, New York, NY, USA. 2014. doi:&lt;a href=&#34;https://dx.doi.org/10.1145/2633357.2633358&#34;&gt;10.1145/2633357.2633358&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ningning Xie, Jonathan Brachth√§user, Daniel Hillerstr√∂m, Philipp Schuster, Daan Leijen. ‚ÄúEffect Handlers, Evidently‚Äù The 25th ACM SIGPLAN International Conference on Functional Programming (ICFP), August 2020. doi:&lt;a href=&#34;https://doi.org/10.1145/3408981&#34;&gt;10.1145/3408981&lt;/a&gt;, &lt;a href=&#34;https://www.microsoft.com/en-us/research/uploads/prod/2020/07/evidently-with-proofs-5f0b7d860b387.pdf&#34;&gt;pdf&lt;/a&gt;. See also [9] which improves upon this work.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ningning Xie and Daan Leijen. ‚ÄúEffect Handlers in Haskell, Evidently‚Äù The 13th ACM SIGPLAN International Haskell Symposium, August 2020. &lt;a href=&#34;https://www.microsoft.com/en-us/research/uploads/prod/2020/07/effev.pdf&#34;&gt;pdf&lt;/a&gt; See also the &lt;a href=&#34;https://github.com/xnning/EvEff&#34;&gt;Ev.Eff&lt;/a&gt; and &lt;a href=&#34;https://github.com/xnning/MpEff&#34;&gt;Mp.Eff&lt;/a&gt; repositories.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Alex Reinking, Ningning Xie, Leonardo de Moura, and Daan Leijen: ‚Äú Perceus: Garbage Free Reference Counting with Reuse‚Äù MSR-TR-2020-42, Nov 22, 2020. Distinguished paper at PLDI&#39;21. &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/perceus-garbage-free-reference-counting-with-reuse/&#34;&gt;pdf&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ningning Xie and Daan Leijen. ‚Äú Generalized Evidence Passing for Effect Handlers‚Äù In The 26th ACM SIGPLAN International Conference on Functional Programming (ICFP), August 2021. Also as MSR-TR-2021-5, Mar, 2021. &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/generalized-evidence-passing-for-effect-handlers/&#34;&gt;pdf&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Anton Lorenzen and Daan Leijen. ‚Äú Reference Counting with Frame-Limited Reuse‚Äù Microsoft Research technical report MSR-TR-2021-30, Nov 2021. &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/reference-counting-with-frame-limited-reuse-extended-version/&#34;&gt;pdf&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>dataartisan/trees-algebra-haskell</title>
    <updated>2022-05-29T02:40:28Z</updated>
    <id>tag:github.com,2022-05-29:/dataartisan/trees-algebra-haskell</id>
    <link href="https://github.com/dataartisan/trees-algebra-haskell" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This example is based on chapter six of Richard Bird&#39;s Introduction to Functional Programming using Haskell (2nd ed.) and section two of Erik Meijer&#39;s banana paper.&lt;/p&gt; &#xA;&lt;p&gt;Please see the nat-algebra-haskell example for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>qnikst/iochan-conduit</title>
    <updated>2022-05-29T02:40:28Z</updated>
    <id>tag:github.com,2022-05-29:/qnikst/iochan-conduit</id>
    <link href="https://github.com/qnikst/iochan-conduit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;IO concurrent promitives for conduit&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Library for making conduit message passing via Control.Concurrent primitives, it can be faster than using STM in some cases, but do not allow all functionality that STM chans has.&lt;/p&gt; &#xA;&lt;p&gt;3 basic primitives will be provided:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;simple Chan as InfiniteChan&lt;/li&gt; &#xA; &lt;li&gt;wrapper over Chan as EndedChan&lt;/li&gt; &#xA; &lt;li&gt;bounded Chan as BChan&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>