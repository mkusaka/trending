<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-19T01:39:55Z</updated>
  <subtitle>Weekly Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>carlrobertoh/CodeGPT</title>
    <updated>2024-05-19T01:39:55Z</updated>
    <id>tag:github.com,2024-05-19:/carlrobertoh/CodeGPT</id>
    <link href="https://github.com/carlrobertoh/CodeGPT" rel="alternate"></link>
    <summary type="html">&lt;p&gt;JetBrains extension providing access to state-of-the-art LLMs, such as GPT-4, Claude 3, Code Llama, and others, all for free&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a name=&#34;readme-top&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/carlrobertoh/CodeGPT&#34;&gt; &lt;img alt=&#34;plugin-icon&#34; src=&#34;https://github.com/carlrobertoh/CodeGPT-docs/raw/main/images/icon.png?raw=true&#34;&gt; &lt;/a&gt; &#xA; &lt;h1 style=&#34;margin: 0;&#34; align=&#34;center&#34;&gt;CodeGPT&lt;/h1&gt; &#xA; &lt;p&gt; A JetBrains extension providing access to state-of-the-art LLMs, such as GPT-4, Claude 3, Code Llama, and others, all for free &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://plugins.jetbrains.com/plugin/21056-codegpt&#34;&gt;&lt;img src=&#34;https://img.shields.io/jetbrains/plugin/d/21056-codegpt&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://plugins.jetbrains.com/plugin/21056-codegpt&#34;&gt;&lt;img src=&#34;https://img.shields.io/jetbrains/plugin/r/rating/21056-codegpt&#34; alt=&#34;Rating&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/8dTGGrwcnR&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1118629761049182238?style=flat&amp;amp;logo=discord&amp;amp;label=Discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://plugins.jetbrains.com/plugin/21056-codegpt&#34;&gt;&lt;img src=&#34;https://img.shields.io/jetbrains/plugin/v/21056-codegpt?label=version&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- TABLE OF CONTENTS --&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Table of Contents&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/carlrobertoh/CodeGPT/master/#about-the-project&#34;&gt;About The Project&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/carlrobertoh/CodeGPT/master/#quick-start-guide&#34;&gt;Quick Start Guide&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt; &lt;a href=&#34;https://raw.githubusercontent.com/carlrobertoh/CodeGPT/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/carlrobertoh/CodeGPT/master/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/carlrobertoh/CodeGPT/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/carlrobertoh/CodeGPT/master/#api-key-configuration&#34;&gt;API Key Configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/carlrobertoh/CodeGPT/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/carlrobertoh/CodeGPT/master/#roadmap&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/carlrobertoh/CodeGPT/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;About The Project&lt;/h2&gt; &#xA;&lt;p&gt;CodeGPT is your go-to AI coding assistant, offering assistance throughout your entire software development journey while keeping privacy in mind. Access state-of-the-art large language models from leading providers such as OpenAI, Anthropic, Azure, Mistral, and others, or connect to a locally hosted model for a completely offline and transparent development experience.&lt;/p&gt; &#xA;&lt;h2&gt;Core Features&lt;/h2&gt; &#xA;&lt;p&gt;Leveraging large language models, CodeGPT offers a wide range of features to enhance your coding experience, including, but not limited to:&lt;/p&gt; &#xA;&lt;h3&gt;Code Completions&lt;/h3&gt; &#xA;&lt;p&gt;Receive single-line or whole-function autocomplete suggestions as you type.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/carlrobertoh/CodeGPT-docs/raw/main/images/new/inline-completion.png?raw=true&#34; alt=&#34;Code Completions&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Chat (with Vision)&lt;/h3&gt; &#xA;&lt;p&gt;Get instant coding advice through a ChatGPT-like interface. Ask questions, seek explanations, or get guidance on your projects without leaving your IDE.&lt;/p&gt; &#xA;&lt;p&gt;CodeGPT also supports vision models and image understanding, allowing you to attach images for more context-aware assistance. It can detect new screenshots automatically, saving you time by eliminating the need to manually upload images each time you take a screenshot.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/carlrobertoh/CodeGPT-docs/raw/main/images/new/chat-interface.png?raw=true&#34; alt=&#34;Chat with Vision&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Commit Message Generation&lt;/h3&gt; &#xA;&lt;p&gt;CodeGPT can generate meaningful commit messages based on the changes made in your codebase. It analyzes the diff of your staged changes and suggests concise and descriptive commit messages, saving you time and effort.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/carlrobertoh/CodeGPT-docs/raw/main/images/new/generate-commit-message.png?raw=true&#34; alt=&#34;Commit Message Generation&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Reference Files&lt;/h3&gt; &#xA;&lt;p&gt;CodeGPT allows you to reference specific files or documentation during your chat sessions, ensuring that responses are always relevant and accurate.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/carlrobertoh/CodeGPT-docs/raw/main/images/new/reference-files-modal.png?raw=true&#34; alt=&#34;Reference Files&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Name Suggestions&lt;/h3&gt; &#xA;&lt;p&gt;Stuck on naming a method or variable? CodeGPT offers context-aware suggestions, helping you adhere to best practices and maintain readability in your codebase.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/carlrobertoh/CodeGPT-docs/raw/main/images/method-name-suggestions.png?raw=true&#34; alt=&#34;Name Suggestions&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;OpenAI Compatibility&lt;/h3&gt; &#xA;&lt;p&gt;Interested in trying out 800t/s or getting access to new models as soon as they&#39;re released? We provide integration with most cloud providers that are OpenAI-compatible, such as Together.ai, Grok, Anyscale, and others, as well as the option to customize your own setup.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/carlrobertoh/CodeGPT-docs/raw/main/images/openai-compatibility.png?raw=true&#34; alt=&#34;OpenAI Compatibility&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Offline Development Support&lt;/h3&gt; &#xA;&lt;p&gt;CodeGPT supports a completely offline development workflow by allowing you to connect to a locally hosted language model. This ensures that your code and data remain private and secure within your local environment, eliminating the need for an internet connection or sharing sensitive information with third-party servers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/carlrobertoh/CodeGPT-docs/raw/main/images/new/llama-settings.png?raw=true&#34; alt=&#34;Offline Development Support&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Running locally&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Linux or macOS&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/carlrobertoh/CodeGPT.git&#xA;cd CodeGPT&#xA;git submodule update&#xA;./gradlew runIde&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Windows ARM64&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./gradlew runIde -Penv=win-arm64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tailing logs&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tail -f build/idea-sandbox/system/log/idea.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Privacy&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Your data stays yours.&lt;/strong&gt; CodeGPT &lt;strong&gt;does not&lt;/strong&gt; collect or store any kind of sensitive information.&lt;/p&gt; &#xA;&lt;p&gt;However, with users&#39; consent, we do collect anonymous usage data, which we use to understand how users interact with the extension, including the most-used features and preferred providers.&lt;/p&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;p&gt;Your input helps us grow. Reach out through:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/carlrobertoh/CodeGPT/issues&#34;&gt;Issue Tracker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/8dTGGrwcnR&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;mailto:carlrobertoh@gmail.com&#34;&gt;Email&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Apache 2.0 Â© &lt;a href=&#34;https://carlrobert.ee&#34;&gt;Carl-Robert Linnupuu&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you found this project interesting, kindly rate it on the marketplace and don&#39;t forget to give it a star. Thanks again!&lt;/p&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/carlrobertoh/CodeGPT/master/#readme-top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;!-- MARKDOWN LINKS &amp; IMAGES --&gt; &#xA;&lt;!-- https://www.markdownguide.org/basic-syntax/#reference-style-links --&gt;</summary>
  </entry>
  <entry>
    <title>hazelcast/hazelcast</title>
    <updated>2024-05-19T01:39:55Z</updated>
    <id>tag:github.com,2024-05-19:/hazelcast/hazelcast</id>
    <link href="https://github.com/hazelcast/hazelcast" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Hazelcast is a unified real-time data platform combining stream processing with a fast data store, allowing customers to act instantly on data-in-motion for real-time insights.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hazelcast&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://slack.hazelcast.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/slack-chat-green.svg?sanitize=true&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://javadoc.io/doc/com.hazelcast/hazelcast/latest&#34;&gt;&lt;img src=&#34;https://javadoc.io/badge2/com.hazelcast/hazelcast/latest/javadoc.svg?sanitize=true&#34; alt=&#34;javadoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/hazelcast/hazelcast&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/hazelcast/hazelcast&#34; alt=&#34;Docker pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=hazelcast_hazelcast&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=hazelcast_hazelcast&amp;amp;metric=alert_status&#34; alt=&#34;Quality Gate Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;What is Hazelcast&lt;/h2&gt; &#xA;&lt;p&gt;The worldâs leading companies trust Hazelcast to modernize applications and take instant action on data in motion to create new revenue streams, mitigate risk, and operate more efficiently. Businesses use Hazelcastâs unified &lt;strong&gt;real-time data platform&lt;/strong&gt; to process &lt;strong&gt;streaming&lt;/strong&gt; data, enrich it with historical context and take instant action with standard or &lt;strong&gt;ML/AI-driven automation&lt;/strong&gt; - before it is stored in a database or data lake.&lt;/p&gt; &#xA;&lt;p&gt;Hazelcast is named in the Gartner Market Guide to Event Stream Processing and a leader in the GigaOm Radar Report for Streaming Data Platforms. To join our community of CXOs, architects and developers at brands such as Loweâs, HSBC, JPMorgan Chase, Volvo, New York Life, and others, visit &lt;a href=&#34;https://hazelcast.com&#34;&gt;hazelcast.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;When to use Hazelcast&lt;/h2&gt; &#xA;&lt;p&gt;Hazelcast provides a platform that can handle multiple types of workloads for building real-time applications.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Stateful data processing over streaming data or data at rest&lt;/li&gt; &#xA; &lt;li&gt;Querying streaming and batch data sources directly using SQL&lt;/li&gt; &#xA; &lt;li&gt;Ingesting data through a library of connectors and serving it using low-latency SQL queries&lt;/li&gt; &#xA; &lt;li&gt;Pushing updates to applications on events&lt;/li&gt; &#xA; &lt;li&gt;Low-latency queue-based or pub-sub messaging&lt;/li&gt; &#xA; &lt;li&gt;Fast access to contextual and transactional data via caching patterns such as read/write-through and write-behind&lt;/li&gt; &#xA; &lt;li&gt;Distributed coordination for microservices&lt;/li&gt; &#xA; &lt;li&gt;Replicating data from one region to another or between data centers in the same region&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Stateful and fault-tolerant data processing and querying over data streams and data at rest using SQL or dataflow API&lt;/li&gt; &#xA; &lt;li&gt;A comprehensive library of connectors such as Kafka, Hadoop, S3, RDBMS, JMS and many more&lt;/li&gt; &#xA; &lt;li&gt;Distributed messaging using pub-sub and queues&lt;/li&gt; &#xA; &lt;li&gt;Distributed, partitioned, queryable key-value store with event listeners, which can also be used to store contextual data for enriching event streams with low latency&lt;/li&gt; &#xA; &lt;li&gt;A production-ready Raft-implementation which allows lineralizable (CP) concurrency primitives such as distributed locks.&lt;/li&gt; &#xA; &lt;li&gt;Tight integration for deploying machine learning models with Python to a data processing pipeline&lt;/li&gt; &#xA; &lt;li&gt;Cloud-native, run everywhere architecture&lt;/li&gt; &#xA; &lt;li&gt;Zero-downtime operations with rolling upgrades&lt;/li&gt; &#xA; &lt;li&gt;At-least-once and exactly-once processing guarantees for stream processing pipelines&lt;/li&gt; &#xA; &lt;li&gt;Data replication between data centers and geographic regions using WAN&lt;/li&gt; &#xA; &lt;li&gt;Microsecond performance for key-value point lookups and pub-sub&lt;/li&gt; &#xA; &lt;li&gt;Unique data processing architecture results in 99.99% latency of under 10ms for streaming queries with millions of events per second.&lt;/li&gt; &#xA; &lt;li&gt;Client libraries in &lt;a href=&#34;https://github.com/hazelcast/hazelcast&#34;&gt;Java&lt;/a&gt;, &lt;a href=&#34;https://github.com/hazelcast/hazelcast-python-client&#34;&gt;Python&lt;/a&gt;, &lt;a href=&#34;https://github.com/hazelcast/hazelcast-nodejs-client&#34;&gt;Node.js&lt;/a&gt;, &lt;a href=&#34;https://github.com/hazelcast/hazelcast-csharp-client&#34;&gt;.NET&lt;/a&gt;, &lt;a href=&#34;https://github.com/hazelcast/hazelcast-cpp-client&#34;&gt;C++&lt;/a&gt; and &lt;a href=&#34;https://github.com/hazelcast/hazelcast-go-client&#34;&gt;Go&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Operational Data Store&lt;/h3&gt; &#xA;&lt;p&gt;Hazelcast provides distributed in-memory data structures which are partitioned, replicated and queryable. One of the main use cases for Hazelcast is for storing a &lt;em&gt;working set&lt;/em&gt; of data for fast querying and access.&lt;/p&gt; &#xA;&lt;p&gt;The main data structure underlying Hazelcast, called &lt;code&gt;IMap&lt;/code&gt;, is a key-value store which has a rich set of features, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Integration with &lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/pipelines/sources-sinks.htm&#34;&gt;data sources&lt;/a&gt; for one time or continuous ingestion&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/data-structures/map.html#loading-and-storing-persistent-data&#34;&gt;Read-through and write-through&lt;/a&gt; caching patterns&lt;/li&gt; &#xA; &lt;li&gt;Indexing and querying through &lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/query/sql-overview.html&#34;&gt;SQL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Processing entries in place for &lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/computing/entry-processor.html&#34;&gt;atomic updates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/data-structures/map.html#map-eviction&#34;&gt;Expiring items&lt;/a&gt; automatically based on certain criteria like TTL or last access time&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/performance/near-cache.html&#34;&gt;Near cache&lt;/a&gt; for caching entries on the client&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/events/object-events.html&#34;&gt;Listeners&lt;/a&gt; for pushing changes to clients&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/wan/wan.html&#34;&gt;Data Replication&lt;/a&gt; between datacenters (Enterprise version only)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/storage/persistence.html&#34;&gt;Persistence&lt;/a&gt; of data on disk (Enterprise version only)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Hazelcast stores data in &lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/consistency-and-replication/replication-algorithm.html&#34;&gt;partitions&lt;/a&gt;, which are distributed to all the nodes. You can increase the storage capacity by adding additional nodes, and if one of the nodes go down, the data is restored automatically from the backup replicas.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/hazelcast/hazelcast/master/images/replication.png&#34;&gt; &#xA;&lt;p&gt;You can interact with maps using SQL or a programming language client of your choice. You can create and interact with a map as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE MAPPING myMap (name varchar EXTERNAL NAME &#34;__key&#34;, age INT EXTERNAL NAME &#34;this&#34;) &#xA;TYPE IMap&#xA;OPTIONS (&#39;keyFormat&#39;=&#39;varchar&#39;,&#39;valueFormat&#39;=&#39;int&#39;);&#xA;INSERT INTO myMap VALUES(&#39;Jake&#39;, 29);&#xA;SELECT * FROM myMap;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The same can be done programmatically as follows using one of the &lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/clients/hazelcast-clients.html&#34;&gt;supported programming languages&lt;/a&gt;. Here are some exmaples in Java and Python:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;var hz = HazelcastClient.newHazelcastClient();&#xA;IMap&amp;lt;String, Integer&amp;gt; map = hz.getMap(&#34;myMap&#34;);&#xA;map.set(Alice, 25);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import hazelcast&#xA;&#xA;client = hazelcast.HazelcastClient()&#xA;my_map = client.get_map(&#34;myMap&#34;)&#xA;age = my_map.get(&#34;Alice&#34;).result()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other programming languages supported are &lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/clients/dotnet.html&#34;&gt;C#&lt;/a&gt;, &lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/clients/cplusplus.html&#34;&gt;C++&lt;/a&gt;, &lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/clients/nodejs.html&#34;&gt;Node.js&lt;/a&gt; and &lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/clients/go.html&#34;&gt;Go&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can ingest data directly from the many &lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/pipelines/sources-sinks.html&#34;&gt;sources supported&lt;/a&gt; using SQL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE MAPPING csv_ages (name VARCHAR, age INT)&#xA;TYPE File&#xA;OPTIONS (&#39;format&#39;=&#39;csv&#39;,&#xA;    &#39;path&#39;=&#39;/data&#39;, &#39;glob&#39;=&#39;data.csv&#39;);&#xA;SINK INTO myMap&#xA;SELECT name, age FROM csv_ages;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hazelcast also provides additional data structures such as ReplicatedMap, Set, MultiMap and List. For a full list, refer to the &lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/data-structures/distributed-data-structures.html&#34;&gt;distributed data structures&lt;/a&gt; section of the docs.&lt;/p&gt; &#xA;&lt;h3&gt;Stateful Data Processing&lt;/h3&gt; &#xA;&lt;p&gt;Hazelcast has a built-in data processing engine called &lt;a href=&#34;https://arxiv.org/abs/2103.10169&#34;&gt;Jet&lt;/a&gt;. Jet can be used to build both streaming and batch data pipelines that are elastic. You can use it to process large volumes of real-time events or huge batches of static datasets. To give a sense of scale, a single node of Hazelcast has been proven to &lt;a href=&#34;https://jet-start.sh/blog/2020/08/05/gc-tuning-for-jet&#34;&gt;aggregate 10 million events per second&lt;/a&gt; with latency under 10 milliseconds. A cluster of Hazelcast nodes can process &lt;a href=&#34;https://hazelcast.com/blog/billion-events-per-second-with-millisecond-latency-streaming-analytics-at-giga-scale/&#34;&gt;billion events per second&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/hazelcast/hazelcast/master/images/latency.png&#34;&gt; &#xA;&lt;p&gt;An application which aggregates millions of sensor readings per second with 10-millisecond resolution from Kafka looks like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;var hz = Hazelcast.bootstrappedInstance();&#xA;&#xA;var p = Pipeline.create();&#xA;&#xA;p.readFrom(KafkaSources.&amp;lt;String, Reading&amp;gt;kafka(kafkaProperties, &#34;sensors&#34;))&#xA; .withTimestamps(event -&amp;gt; event.getValue().timestamp(), 10) // use event timestamp, allowed lag in ms&#xA; .groupingKey(reading -&amp;gt; reading.sensorId())&#xA; .window(sliding(1_000, 10)) // sliding window of 1s by 10ms&#xA; .aggregate(averagingDouble(reading -&amp;gt; reading.temperature()))&#xA; .writeTo(Sinks.logger());&#xA;&#xA;hz.getJet().newJob(p).join();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the following command to deploy the application to the server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/hazelcast submit analyze-sensors.jar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Jet supports advanced streaming features such as &lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/fault-tolerance/fault-tolerance.html&#34;&gt;exactly-once processing&lt;/a&gt; and &lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/architecture/event-time-processing.html&#34;&gt;watermarks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Data Processing using SQL&lt;/h4&gt; &#xA;&lt;p&gt;Jet also powers the &lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/query/sql-overview.html&#34;&gt;SQL engine&lt;/a&gt; in Hazelcast which can execute both streaming and batch queries. Internally, all SQL queries are converted to Jet jobs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE MAPPING trades (&#xA;    id BIGINT,&#xA;    ticker VARCHAR,&#xA;    price DECIMAL,&#xA;    amount BIGINT)&#xA;TYPE Kafka&#xA;OPTIONS (&#xA;    &#39;valueFormat&#39; = &#39;json&#39;,&#xA;    &#39;bootstrap.servers&#39; = &#39;kafka:9092&#39;&#xA;);&#xA;SELECT ticker, ROUND(price * 100) AS price_cents, amount&#xA;  FROM trades&#xA;  WHERE price * amount &amp;gt; 100;&#xA;+------------+----------------------+-------------------+&#xA;|ticker      |           price_cents|             amount|&#xA;+------------+----------------------+-------------------+&#xA;|EFGH        |                  1400|                 20|&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Messaging&lt;/h3&gt; &#xA;&lt;p&gt;Hazelcast provides lightweight options for adding messaging to your application. The two main constructs for messaging are topics and queues.&lt;/p&gt; &#xA;&lt;h4&gt;Topics&lt;/h4&gt; &#xA;&lt;p&gt;Topics provide a publish-subscribe pattern where each message is fanned out to multiple subscribers. See the examples below in Java and Python:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;var hz = Hazelcast.bootstrappedInstance();&#xA;ITopic&amp;lt;String&amp;gt; topic = hz.getTopic(&#34;my_topic&#34;);&#xA;topic.addMessageListener(msg -&amp;gt; System.out.println(msg));&#xA;topic.publish(&#34;message&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;topic = client.get_topic(&#34;my_topic&#34;)&#xA;&#xA;def handle_message(msg):&#xA;    print(&#34;Received message %s&#34;  % msg.message)&#xA;topic.add_listener(on_message=handle_message)&#xA;topic.publish(&#34;my-message&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For examples in other languages, please refer to the &lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/data-structures/topic.html&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Queues&lt;/h4&gt; &#xA;&lt;p&gt;Queues provide FIFO-semantics and you can add items from one client and remove from another. See the examples below in Java and Python:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;var client = Hazelcast.newHazelcastClient();&#xA;IQueue&amp;lt;String&amp;gt; queue = client.getQueue(&#34;my_queue&#34;);&#xA;queue.put(&#34;new-item&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import hazelcast&#xA;&#xA;client = hazelcast.HazelcastClient()&#xA;q = client.get_queue(&#34;my_queue&#34;)&#xA;my_item = q.take().result()&#xA;print(&#34;Received item %s&#34; % my_item)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For examples in other languages, please refer to the &lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/data-structures/queue.html&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Get Started&lt;/h2&gt; &#xA;&lt;p&gt;Follow the &lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/getting-started/install-hazelcast&#34;&gt;Getting Started Guide&lt;/a&gt; to install and start using Hazelcast.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://docs.hazelcast.com/&#34;&gt;documentation&lt;/a&gt; for in-depth details about how to install Hazelcast and an overview of the features.&lt;/p&gt; &#xA;&lt;h2&gt;Get Help&lt;/h2&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://slack.hazelcast.com/&#34;&gt;Slack&lt;/a&gt; for getting help with Hazelcast&lt;/p&gt; &#xA;&lt;h2&gt;How to Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Thanks for your interest in contributing! The easiest way is to just send a pull request. Have a look at the &lt;a href=&#34;https://github.com/hazelcast/hazelcast-jet/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22&#34;&gt;issues&lt;/a&gt; marked as good first issue for some guidance.&lt;/p&gt; &#xA;&lt;h3&gt;Building From Source&lt;/h3&gt; &#xA;&lt;p&gt;Building Hazelcast requires at minimum JDK 17. Pull the latest source from the repository and use Maven install (or package) to build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git pull origin master&#xA;$ ./mvnw clean package -DskipTests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is recommended to use the included Maven wrapper script. It is also possible to use local Maven distribution with the same version that is used in the Maven wrapper script.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, there is a &lt;code&gt;quick&lt;/code&gt; build activated by setting the &lt;code&gt;-Dquick&lt;/code&gt; system property that skips validation tasks for faster local builds (e.g. tests, checkstyle validation, javadoc, source plugins etc) and does not build &lt;code&gt;extensions&lt;/code&gt; and &lt;code&gt;distribution&lt;/code&gt; modules.&lt;/p&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;p&gt;Take into account that the default build executes thousands of tests which may take a considerable amount of time. Hazelcast has 3 testing profiles:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Default: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./mvnw test&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;to run quick/integration tests (those can be run in parallel without using network by using &lt;code&gt;-P parallelTest&lt;/code&gt; profile).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Slow Tests: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./mvnw test -P nightly-build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;to run tests that are either slow or cannot be run in parallel.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All Tests: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./mvnw test -P all-tests&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;to run all tests serially using network.&lt;/p&gt; &#xA;&lt;p&gt;Some tests require Docker to run. Set &lt;code&gt;-Dhazelcast.disable.docker.tests&lt;/code&gt; system property to ignore them.&lt;/p&gt; &#xA;&lt;p&gt;When developing a PR it is sufficient to run your new tests and some related subset of tests locally. Our PR builder will take care of running the full test suite.&lt;/p&gt; &#xA;&lt;h2&gt;Trigger Phrases in the Pull Request Conversation&lt;/h2&gt; &#xA;&lt;p&gt;When you create a pull request (PR), it must pass a build-and-test procedure. Maintainers will be notified about your PR, and they can trigger the build using special comments. These are the phrases you may see used in the comments on your PR:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;run-lab-run&lt;/code&gt; - run the default PR builder&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;run-lts-compilers&lt;/code&gt; - compiles the sources with JDK 17 and JDK 21 (without running tests)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;run-ee-compile&lt;/code&gt; - compile hazelcast-enterprise with this PR&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;run-ee-tests&lt;/code&gt; - run tests from hazelcast-enterprise with this PR&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;run-windows&lt;/code&gt; - run the EE and OS tests on a Windows machine (HighFive is not supported here) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;run-windows-os&lt;/code&gt; - run the OS tests&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;run-windows-ee&lt;/code&gt; - run the EE tests&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;run-cdc-debezium-tests&lt;/code&gt; - run all tests in the &lt;code&gt;extensions/cdc-debezium&lt;/code&gt; module&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;run-cdc-mysql-tests&lt;/code&gt; - run all tests in the &lt;code&gt;extensions/cdc-mysql&lt;/code&gt; module&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;run-cdc-postgres-tests&lt;/code&gt; - run all tests in the &lt;code&gt;extensions/cdc-postgres&lt;/code&gt; module&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;run-mongodb-tests&lt;/code&gt; - run all tests in the &lt;code&gt;extensions/mongodb&lt;/code&gt; module&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;run-s3-tests&lt;/code&gt; - run all tests in the &lt;code&gt;extensions/s3&lt;/code&gt; module&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;code&gt;run-nightly-tests&lt;/code&gt; - run nightly (slow) tests. WARNING: Use with care as this is a resource consuming task.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;code&gt;run-ee-nightly-tests&lt;/code&gt; - run nightly (slow) tests from hazelcast-enterprise. WARNING: Use with care as this is a resource consuming task.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;run-sql-only&lt;/code&gt; - run default tests in &lt;code&gt;hazelcast-sql&lt;/code&gt;, &lt;code&gt;hazelcast-distribution&lt;/code&gt;, and &lt;code&gt;extensions/mapstore&lt;/code&gt; modules&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;run-docs-only&lt;/code&gt; - do not run any tests, check that only files with &lt;code&gt;.md&lt;/code&gt;, &lt;code&gt;.adoc&lt;/code&gt; or &lt;code&gt;.txt&lt;/code&gt; suffix are added in the PR&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;run-sonar&lt;/code&gt; - run SonarCloud analysis&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;run-arm64&lt;/code&gt; - run the tests on arm64 machine&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Where not indicated, the builds run on a Linux machine with Oracle JDK 17.&lt;/p&gt; &#xA;&lt;h3&gt;Creating PRs for Hazelcast SQL&lt;/h3&gt; &#xA;&lt;p&gt;When creating a PR with changes located in the &lt;code&gt;hazelcast-sql&lt;/code&gt; module and nowhere else, you can label your PR with &lt;code&gt;SQL-only&lt;/code&gt;. This will change the standard PR builder to one that will only run tests related to SQL (see &lt;code&gt;run-sql-only&lt;/code&gt; above), which will significantly shorten the build time vs. the default PR builder. &lt;strong&gt;NOTE&lt;/strong&gt;: this job will fail if you&#39;ve made changes anywhere other than &lt;code&gt;hazelcast-sql&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Creating PRs which contain only documentation&lt;/h3&gt; &#xA;&lt;p&gt;When creating a PR which changes only documentation (files with suffix &lt;code&gt;.md&lt;/code&gt; or &lt;code&gt;.adoc&lt;/code&gt;) it makes no sense to run tests. For that case the label &lt;code&gt;docs-only&lt;/code&gt; can be used. The job will fail in case you&#39;ve made other changes than in &lt;code&gt;.md&lt;/code&gt;, &lt;code&gt;.adoc&lt;/code&gt; or &lt;code&gt;.txt&lt;/code&gt; files.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Source code in this repository is covered by one of two licenses:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/index.html#licenses-and-support&#34;&gt;Apache License 2.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://hazelcast.com/hazelcast-community-license&#34;&gt;Hazelcast Community License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The default license throughout the repository is Apache License 2.0 unless the header specifies another license.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.yourkit.com/&#34;&gt;&lt;img src=&#34;https://www.yourkit.com/images/yklogo.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;http://www.yourkit.com/&#34;&gt;YourKit&lt;/a&gt; for supporting open source software by providing us a free license for their Java profiler.&lt;/p&gt; &#xA;&lt;p&gt;We owe (the good parts of) our CLI tool&#39;s user experience to &lt;a href=&#34;https://picocli.info/&#34;&gt;picocli&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2008-2024, Hazelcast, Inc. All Rights Reserved.&lt;/p&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;http://www.hazelcast.com/&#34;&gt;www.hazelcast.com&lt;/a&gt; for more info.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>real-logic/aeron</title>
    <updated>2024-05-19T01:39:55Z</updated>
    <id>tag:github.com,2024-05-19:/real-logic/aeron</id>
    <link href="https://github.com/real-logic/aeron" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Efficient reliable UDP unicast, UDP multicast, and IPC message transport&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Aeron&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/real-logic/aeron/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/real-logic/Aeron.svg?sanitize=true&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.javadoc.io/doc/io.aeron/aeron-all&#34;&gt;&lt;img src=&#34;https://www.javadoc.io/badge/io.aeron/aeron-all.svg?sanitize=true&#34; alt=&#34;Javadocs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/real-logic/aeron/actions&#34;&gt;&lt;img src=&#34;https://github.com/real-logic/aeron/workflows/Continuous%20Integration/badge.svg?sanitize=true&#34; alt=&#34;Actions Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/real-logic/aeron/actions&#34;&gt;&lt;img src=&#34;https://github.com/real-logic/aeron/workflows/CodeQL/badge.svg?sanitize=true&#34; alt=&#34;CodeQL Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Efficient reliable UDP unicast, UDP multicast, and IPC message transport. Java, C, and C++ clients are available in this repository, and a &lt;a href=&#34;https://github.com/AdaptiveConsulting/Aeron.NET&#34;&gt;.NET client&lt;/a&gt; is available. All clients can exchange messages across machines, or on the same machine via IPC, very efficiently. Message streams can be recorded by the &lt;a href=&#34;https://github.com/real-logic/aeron/tree/master/aeron-archive&#34;&gt;Archive&lt;/a&gt; module to persistent storage for later, or real-time, replay. Aeron &lt;a href=&#34;https://github.com/real-logic/aeron/tree/master/aeron-cluster&#34;&gt;Cluster&lt;/a&gt; provides support for fault-tolerant services as replicated state machines based on the &lt;a href=&#34;https://raft.github.io/&#34;&gt;Raft&lt;/a&gt; consensus algorithm.&lt;/p&gt; &#xA;&lt;p&gt;Performance is the key focus. A design goal for Aeron is to be the highest throughput with the lowest and most predictable latency of any messaging system. Aeron integrates with &lt;a href=&#34;https://github.com/real-logic/simple-binary-encoding&#34;&gt;Simple Binary Encoding (SBE)&lt;/a&gt; for the best possible message encoding and decoding performance. Many of the data structures used in the creation of Aeron have been factored out to the &lt;a href=&#34;https://github.com/real-logic/agrona&#34;&gt;Agrona&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;p&gt;For details of usage, protocol specification, FAQ, etc. please check out the &lt;a href=&#34;https://github.com/real-logic/aeron/wiki&#34;&gt;Wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For the latest version information and changes see the &lt;a href=&#34;https://github.com/real-logic/aeron/wiki/Change-Log&#34;&gt;Change Log&lt;/a&gt; with Java &lt;strong&gt;downloads&lt;/strong&gt; at &lt;a href=&#34;http://search.maven.org/#search%7Cga%7C1%7Caeron&#34;&gt;Maven Central&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Aeron is owned and operated by Adaptive Financial Consulting. Originally created by Martin Thompson and Todd Montgomery, the Aeron team joined Adaptive in 2022.&lt;/p&gt; &#xA;&lt;p&gt;For Business users, to get started with Aeron Premium, please visit &lt;a href=&#34;https://aeron.io&#34;&gt;Aeron.io&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We provide a range of services including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Training for development and operations with Aeron and Aeron Cluster.&lt;/li&gt; &#xA; &lt;li&gt;Consulting, for example if youâre not sure how to design your system or need help tuning your system.&lt;/li&gt; &#xA; &lt;li&gt;We also offer a number of proprietary enhancements on top of Aeron and Aeron Cluster such as kernel bypass (ef_vi, AWS DPDK, and VMA) for increased performance, and blazing fast encryption with ATS.&lt;/li&gt; &#xA; &lt;li&gt;If youâre building a new trading system, we have experienced Aeron developers who can help.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please get in touch at &lt;a href=&#34;mailto:sales@aeron.io?subject=Aeron&#34;&gt;sales@aeron.io&lt;/a&gt; if you would like to learn more about any of these.&lt;/p&gt; &#xA;&lt;h3&gt;How do I use Aeron?&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/real-logic/aeron/wiki/Java-Programming-Guide&#34;&gt;Java Programming Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/real-logic/aeron/wiki/Cpp-Programming-Guide&#34;&gt;C++11 Programming Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/real-logic/aeron/wiki/Best-Practices-Guide&#34;&gt;Best Practices Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/real-logic/aeron/wiki/Monitoring-and-Debugging&#34;&gt;Monitoring and Debugging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/real-logic/aeron/wiki/Configuration-Options&#34;&gt;Configuration Options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/real-logic/aeron/wiki/Channel-Configuration&#34;&gt;Channel Specific Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/real-logic/aeron/wiki/Aeron-Archive&#34;&gt;Aeron Archive (Durable/Persistent Stream Storage)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/real-logic/aeron/tree/master/aeron-cluster&#34;&gt;Aeron Cluster (Fault Tolerant Services)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aeroncookbook.com/&#34;&gt;Aeron Cookbook&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;How does Aeron work?&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/real-logic/aeron/wiki/Transport-Protocol-Specification&#34;&gt;Transport Protocol Specification&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/real-logic/aeron/wiki/Design-Overview&#34;&gt;Design Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/real-logic/aeron/wiki/Design-Principles&#34;&gt;Design Principles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/real-logic/aeron/wiki/Flow-and-Congestion-Control&#34;&gt;Flow Control Semantics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/real-logic/aeron/wiki/Media-Driver-Operation&#34;&gt;Media Driver Operation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;How do I hack on Aeron?&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/real-logic/aeron/wiki/Hacking-on-Aeron&#34;&gt;Hacking on Aeron&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/real-logic/aeron/wiki/Performance-Testing&#34;&gt;Performance Testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/real-logic/aeron/wiki/Building-Aeron&#34;&gt;Building Aeron&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;License (See LICENSE file for full license)&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2014-2024 Real Logic Limited.&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://www.apache.org/licenses/LICENSE-2.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;/p&gt;</summary>
  </entry>
</feed>