<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-21T01:59:13Z</updated>
  <subtitle>Weekly Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>getActivity/XXPermissions</title>
    <updated>2022-08-21T01:59:13Z</updated>
    <id>tag:github.com,2022-08-21:/getActivity/XXPermissions</id>
    <link href="https://github.com/getActivity/XXPermissions" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Android 权限请求框架，已适配 Android 13&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;权限请求框架&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/getActivity/XXPermissions/master/logo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;项目地址：&lt;a href=&#34;https://github.com/getActivity/XXPermissions&#34;&gt;Github&lt;/a&gt;、&lt;a href=&#34;https://gitee.com/getActivity/XXPermissions&#34;&gt;码云&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;博文地址：&lt;a href=&#34;https://www.jianshu.com/p/c69ff8a445ed&#34;&gt;一句代码搞定权限请求，从未如此简单&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;可以扫码下载 Demo 进行演示或者测试，如果扫码下载不了的，&lt;a href=&#34;https://github.com/getActivity/XXPermissions/releases/download/16.0/XXPermissions.apk&#34;&gt;点击此处可直接下载&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/getActivity/XXPermissions/master/picture/demo_code.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;另外想对 Android 6.0 权限需要深入了解的，可以看这篇文章&lt;a href=&#34;https://www.jianshu.com/p/6a4dff744031&#34;&gt;Android 6.0 运行权限解析&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/getActivity/XXPermissions/master/picture/1.jpg&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/getActivity/XXPermissions/master/picture/2.jpg&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/getActivity/XXPermissions/master/picture/3.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/getActivity/XXPermissions/master/picture/4.jpg&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/getActivity/XXPermissions/master/picture/5.jpg&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/getActivity/XXPermissions/master/picture/6.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/getActivity/XXPermissions/master/picture/7.jpg&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/getActivity/XXPermissions/master/picture/8.jpg&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/getActivity/XXPermissions/master/picture/9.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/getActivity/XXPermissions/master/picture/10.jpg&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/getActivity/XXPermissions/master/picture/11.jpg&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/getActivity/XXPermissions/master/picture/12.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;集成步骤&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;如果你的项目 Gradle 配置是在 &lt;code&gt;7.0 以下&lt;/code&gt;，需要在 &lt;code&gt;build.gradle&lt;/code&gt; 文件中加入&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;allprojects {&#xA;    repositories {&#xA;        // JitPack 远程仓库：https://jitpack.io&#xA;        maven { url &#39;https://jitpack.io&#39; }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;如果你的 Gradle 配置是 &lt;code&gt;7.0 及以上&lt;/code&gt;，则需要在 &lt;code&gt;settings.gradle&lt;/code&gt; 文件中加入&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;dependencyResolutionManagement {&#xA;    repositories {&#xA;        // JitPack 远程仓库：https://jitpack.io&#xA;        maven { url &#39;https://jitpack.io&#39; }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;配置完远程仓库后，在项目 app 模块下的 &lt;code&gt;build.gradle&lt;/code&gt; 文件中加入远程依赖&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;android {&#xA;    // 支持 JDK 1.8&#xA;    compileOptions {&#xA;        targetCompatibility JavaVersion.VERSION_1_8&#xA;        sourceCompatibility JavaVersion.VERSION_1_8&#xA;    }&#xA;}&#xA;&#xA;dependencies {&#xA;    // 权限请求框架：https://github.com/getActivity/XXPermissions&#xA;    implementation &#39;com.github.getActivity:XXPermissions:16.0&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;AndroidX&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;如果项目是基于 &lt;strong&gt;AndroidX&lt;/strong&gt; 包，请在项目 &lt;code&gt;gradle.properties&lt;/code&gt; 文件中加入&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;# 表示将第三方库迁移到 AndroidX&#xA;android.enableJetifier = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;如果项目是基于 &lt;strong&gt;Support&lt;/strong&gt; 包则不需要加入此配置&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;分区存储&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;如果项目已经适配了 Android 10 分区存储特性，请在 &lt;code&gt;AndroidManifest.xml&lt;/code&gt; 中加入&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;manifest&amp;gt;&#xA;&#xA;    &amp;lt;application&amp;gt;&#xA;&#xA;        &amp;lt;!-- 表示当前项目已经适配了分区存储特性 --&amp;gt;&#xA;        &amp;lt;meta-data&#xA;            android:name=&#34;ScopedStorage&#34;&#xA;            android:value=&#34;true&#34; /&amp;gt;&#xA;&#xA;    &amp;lt;/application&amp;gt;&#xA;&#xA;&amp;lt;/manifest&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;如果当前项目没有适配这特性，那么这一步骤可以忽略&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;需要注意的是：这个选项是框架用于判断当前项目是否适配了分区存储，需要注意的是，如果你的项目已经适配了分区存储特性，可以使用 &lt;code&gt;READ_EXTERNAL_STORAGE&lt;/code&gt;、&lt;code&gt;WRITE_EXTERNAL_STORAGE&lt;/code&gt; 来申请权限，如果你的项目还没有适配分区特性，就算申请了 &lt;code&gt;READ_EXTERNAL_STORAGE&lt;/code&gt;、&lt;code&gt;WRITE_EXTERNAL_STORAGE&lt;/code&gt; 权限也会导致无法正常读取外部存储上面的文件，如果你的项目没有适配分区存储，请使用 &lt;code&gt;MANAGE_EXTERNAL_STORAGE&lt;/code&gt; 来申请权限，这样才能正常读取外部存储上面的文件，你如果想了解更多关于 Android 10 分区存储的特性，可以&lt;a href=&#34;https://github.com/getActivity/AndroidVersionAdapter#android-100&#34;&gt;点击此处查看和学习&lt;/a&gt;。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;一句代码搞定权限请求，从未如此简单&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Java 用法示例&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;XXPermissions.with(this)&#xA;        // 申请单个权限&#xA;        .permission(Permission.RECORD_AUDIO)&#xA;        // 申请多个权限&#xA;        .permission(Permission.Group.CALENDAR)&#xA;        // 设置权限请求拦截器（局部设置）&#xA;        //.interceptor(new PermissionInterceptor())&#xA;        // 设置不触发错误检测机制（局部设置）&#xA;        //.unchecked()&#xA;        .request(new OnPermissionCallback() {&#xA;&#xA;            @Override&#xA;            public void onGranted(List&amp;lt;String&amp;gt; permissions, boolean all) {&#xA;                if (!all) {&#xA;                    toast(&#34;获取部分权限成功，但部分权限未正常授予&#34;);&#xA;                    return;&#xA;                }&#xA;                toast(&#34;获取录音和日历权限成功&#34;);&#xA;            }&#xA;&#xA;            @Override&#xA;            public void onDenied(List&amp;lt;String&amp;gt; permissions, boolean never) {&#xA;                if (never) {&#xA;                    toast(&#34;被永久拒绝授权，请手动授予录音和日历权限&#34;);&#xA;                    // 如果是被永久拒绝就跳转到应用权限系统设置页面&#xA;                    XXPermissions.startPermissionActivity(context, permissions);&#xA;                } else {&#xA;                    toast(&#34;获取录音和日历权限失败&#34;);&#xA;                }&#xA;            }&#xA;        });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Kotlin 用法示例&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;XXPermissions.with(this)&#xA;    // 申请单个权限&#xA;    .permission(Permission.RECORD_AUDIO)&#xA;    // 申请多个权限&#xA;    .permission(Permission.Group.CALENDAR)&#xA;    // 设置权限请求拦截器（局部设置）&#xA;    //.interceptor(new PermissionInterceptor())&#xA;    // 设置不触发错误检测机制（局部设置）&#xA;    //.unchecked()&#xA;    .request(object : OnPermissionCallback {&#xA;&#xA;        override fun onGranted(permissions: MutableList&amp;lt;String&amp;gt;, all: Boolean) {&#xA;            if (all) {&#xA;                toast(&#34;获取部分权限成功，但部分权限未正常授予&#34;)&#xA;                return&#xA;            }&#xA;            toast(&#34;获取录音和日历权限成功&#34;)&#xA;        }&#xA;&#xA;        override fun onDenied(permissions: MutableList&amp;lt;String&amp;gt;, never: Boolean) {&#xA;            if (never) {&#xA;                toast(&#34;被永久拒绝授权，请手动授予录音和日历权限&#34;)&#xA;                // 如果是被永久拒绝就跳转到应用权限系统设置页面&#xA;                XXPermissions.startPermissionActivity(context, permissions)&#xA;            } else {&#xA;                toast(&#34;获取录音和日历权限失败&#34;)&#xA;            }&#xA;        }&#xA;    })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;框架其他 API 介绍&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 判断一个或多个权限是否全部授予了&#xA;XXPermissions.isGranted(Context context, String... permissions);&#xA;&#xA;// 获取没有授予的权限&#xA;XXPermissions.getDenied(Context context, String... permissions);&#xA;&#xA;// 判断某个权限是否为特殊权限&#xA;XXPermissions.isSpecial(String permission);&#xA;&#xA;// 判断一个或多个权限是否被永久拒绝了&#xA;XXPermissions.isPermanentDenied(Activity activity, String... permissions);&#xA;&#xA;// 跳转到应用权限设置页&#xA;XXPermissions.startPermissionActivity(Context context, String... permissions);&#xA;XXPermissions.startPermissionActivity(Activity activity, String... permissions);&#xA;XXPermissions.startPermissionActivity(Activity activity, String... permission, OnPermissionPageCallback callback);&#xA;XXPermissions.startPermissionActivity(Fragment fragment, String... permissions);&#xA;XXPermissions.startPermissionActivity(Fragment fragment, String... permissions, OnPermissionPageCallback callback);&#xA;&#xA;// 设置不触发错误检测机制（全局设置）&#xA;XXPermissions.setCheckMode(false);&#xA;// 设置权限申请拦截器（全局设置）&#xA;XXPermissions.setInterceptor(new IPermissionInterceptor() {});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;关于权限监听回调参数说明&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;我们都知道，如果用户全部授予只会调用 &lt;strong&gt;onGranted&lt;/strong&gt; 方法，如果用户全部拒绝只会调用 &lt;strong&gt;onDenied&lt;/strong&gt; 方法。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;但是还有一种情况，如果在请求多个权限的情况下，这些权限不是被全部授予或者全部拒绝了，而是部分授权部分拒绝这种情况，框架会如何处理回调呢？&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;框架会先调用 &lt;strong&gt;onDenied&lt;/strong&gt; 方法，再调用 &lt;strong&gt;onGranted&lt;/strong&gt; 方法。其中我们可以通过 &lt;strong&gt;onGranted&lt;/strong&gt; 方法中的 &lt;strong&gt;all&lt;/strong&gt; 参数来判断权限是否全部授予了。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;如果想知道回调中的某个权限是否被授权或者拒绝，可以调用 &lt;strong&gt;List&lt;/strong&gt; 类中的 &lt;strong&gt;contains(Permission.XXX)&lt;/strong&gt; 方法来判断这个集合中是否包含了这个权限。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/getActivity/XXPermissions/master/HelpDoc.md&#34;&gt;其他常见疑问请点击此处查看&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h4&gt;同类权限请求框架之间的对比&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;适配细节&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/getActivity/XXPermissions&#34;&gt;XXPermissions&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/yanzhenjie/AndPermission&#34;&gt;AndPermission&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/guolindev/PermissionX&#34;&gt;PermissionX&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/Blankj/AndroidUtilCode&#34;&gt;AndroidUtilCode&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/permissions-dispatcher/PermissionsDispatcher&#34;&gt;PermissionsDispatcher&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/tbruyelle/RxPermissions&#34;&gt;RxPermissions&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/googlesamples/easypermissions&#34;&gt;EasyPermissions&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;对应版本&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;16.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2.0.3&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.6.4&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.31.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4.9.2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.12&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3.0.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;issues 数&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/getActivity/XXPermissions/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/getActivity/XXPermissions.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/yanzhenjie/AndPermission/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/yanzhenjie/AndPermission.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/guolindev/PermissionX/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/guolindev/PermissionX.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/Blankj/AndroidUtilCode/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/Blankj/AndroidUtilCode.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/permissions-dispatcher/PermissionsDispatcher/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/permissions-dispatcher/PermissionsDispatcher.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/tbruyelle/RxPermissions/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/tbruyelle/RxPermissions.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/googlesamples/easypermissions/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/googlesamples/easypermissions.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;框架体积&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;51 KB&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;127 KB&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;90 KB&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;500 KB&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;99 KB&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;28 KB&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;48 KB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;框架维护状态&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;维护中&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;停止维护&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;维护中&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;停止维护&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;维护中&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;停止维护&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;停止维护&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;闹钟提醒权限&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;所有文件管理权限&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;安装包权限&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;悬浮窗权限&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;系统设置权限&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;通知栏权限&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;通知栏监听权限&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;勿扰权限&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;忽略电池优化权限&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;查看应用使用情况权限&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;VPN 权限&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Android 13 危险权限&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Android 12 危险权限&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Android 11 危险权限&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Android 10 危险权限&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Android 9.0 危险权限&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Android 8.0 危险权限&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;新权限自动兼容旧设备&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;屏幕方向旋转场景适配&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;后台申请权限场景适配&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Android 12 内存泄漏问题修复&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;错误检测机制&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;新权限自动兼容旧设备介绍&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;随着 Android 版本的不断更新，危险权限和特殊权限也在增加，那么这个时候会有一个版本兼容问题，高版本的安卓设备是支持申请低版本的权限，但是低版本的安卓设备是不支持申请高版本的权限，那么这个时候会出现一个兼容性的问题。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;经过核查，其他权限框架选择了一种最简单粗暴的方式，就是不去做兼容，而是交给外层的调用者做兼容，需要调用者在外层先判断安卓版本，在高版本上面传入新权限给框架，而在低版本上面传入旧权限给框架，这种方式看似简单粗暴，但是开发体验差，同时也暗藏了一个坑，外层的调用者他们知道这个新权限对应着的旧权限是哪个吗？我觉得不是每个人都知道，而一旦认知出现错误，必然会导致结果出现错误。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;我觉得最好的做法是交给框架来做，&lt;strong&gt;XXPermissions&lt;/strong&gt; 正是那么做的，外层调用者申请高版本权限的时候，那么在低版本设备上面，会自动添加低版本的权限进行申请，举个最简单的例子，Android 11 出现的 &lt;code&gt;MANAGE_EXTERNAL_STORAGE&lt;/code&gt; 新权限，如果是在 Android 10 及以下的设备申请这个权限时，框架会自动添加 &lt;code&gt;READ_EXTERNAL_STORAGE&lt;/code&gt; 和 &lt;code&gt;WRITE_EXTERNAL_STORAGE&lt;/code&gt; 进行申请，在 Android 10 及以下的设备上面，我们可以直接把 &lt;code&gt;MANAGE_EXTERNAL_STORAGE&lt;/code&gt; 当做 &lt;code&gt;READ_EXTERNAL_STORAGE&lt;/code&gt; 和 &lt;code&gt;WRITE_EXTERNAL_STORAGE&lt;/code&gt; 来用，因为 &lt;code&gt;MANAGE_EXTERNAL_STORAGE&lt;/code&gt; 能干的事情，在 Android 10 及以下的设备上面，要用 &lt;code&gt;READ_EXTERNAL_STORAGE&lt;/code&gt; 和 &lt;code&gt;WRITE_EXTERNAL_STORAGE&lt;/code&gt; 才能做得了。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;所以大家在使用 &lt;strong&gt;XXPermissions&lt;/strong&gt; 的时候，直接拿新的权限去申请就可以了，完全不需要关心新旧权限的兼容问题，框架会自动帮你做处理的，与其他框架不同的是，我更想做的是让大家一句代码搞定权限请求，框架能做到的，统统交给框架做处理。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;屏幕旋转场景适配介绍&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;当系统权限申请对话框弹出后对 Activity 进行屏幕旋转，会导致权限申请回调失效，因为屏幕旋转会导致框架中的 Fragment 销毁重建，这样会导致里面的回调对象直接被回收，最终导致回调不正常。解决方案有几种，一是在清单文件中添加 &lt;code&gt;android:configChanges=&#34;orientation&#34;&lt;/code&gt; 属性，这样屏幕旋转时不会导致 Activity 和 Fragment 销毁重建，二是直接在清单文件中固定 Activity 显示的方向，但是以上两种方案都要使用框架的人处理，这样显然是不够灵活的，解铃还须系铃人，框架的问题应当由框架来解决，而 &lt;strong&gt;RxPermissions&lt;/strong&gt; 的解决方式是给 PermissionFragment 对象设置 &lt;code&gt;fragment.setRetainInstance(true)&lt;/code&gt;，这样就算屏幕旋转了，Activity 对象会销毁重建，而 Fragment 也不会跟着销毁重建，还是复用着之前那个对象，但是存在一个问题，如果 Activity 重写了 &lt;strong&gt;onSaveInstanceState&lt;/strong&gt; 方法会直接导致这种方式失效，这样做显然只是治标不治本，而 &lt;strong&gt;XXPermissions&lt;/strong&gt; 的方式会更直接点，在 &lt;strong&gt;PermissionFragment&lt;/strong&gt; 绑定到 Activity 上面时，把当前 Activity 的&lt;strong&gt;屏幕方向固定住&lt;/strong&gt;，在权限申请结束后再把&lt;strong&gt;屏幕方向还原回去&lt;/strong&gt;。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;在所有的权限请求框架中，只要使用了 Fragment 申请权限都会出现这个问题，而 AndPermission 其实是通过创建新的 Activity 来申请权限，所以不会出现这个问题，PermissionsDispatcher 则是采用了 APT 生成代码的形式来申请权限，所以也没有这个问题，而 PermissionX 则是直接借鉴了 XXPermissions 的解决方案，详情请见 &lt;a href=&#34;https://github.com/getActivity/XXPermissions/issues/49&#34;&gt;XXPermissions/issues/49&lt;/a&gt; 、&lt;a href=&#34;https://github.com/guolindev/PermissionX/issues/51&#34;&gt;PermissionX/issues/51&lt;/a&gt;。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;后台申请权限场景介绍&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;当我们做耗时操作之后申请权限（例如在闪屏页获取隐私协议再申请权限），在网络请求的过程中将 Activity 返回桌面去（退到后台），然后会导致权限请求是在后台状态中进行，在这个时机上就可能会导致权限申请不正常，表现为不会显示授权对话框，处理不当的还会导致崩溃，例如 &lt;a href=&#34;https://github.com/tbruyelle/RxPermissions/issues/249&#34;&gt;RxPeremission/issues/249&lt;/a&gt;。原因在于框架中的 PermissionFragment 在 &lt;strong&gt;commit / commitNow&lt;/strong&gt; 到 Activity 的时候会做一个检测，如果 Activity 的状态是不可见时则会抛出异常，而 &lt;strong&gt;RxPeremission&lt;/strong&gt; 正是使用了 &lt;strong&gt;commitNow&lt;/strong&gt; 才会导致崩溃 ，使用 &lt;strong&gt;commitAllowingStateLoss / commitNowAllowingStateLoss&lt;/strong&gt; 则可以避开这个检测，虽然这样可以避免崩溃，但是会出现另外一个问题，系统提供的 &lt;strong&gt;requestPermissions&lt;/strong&gt; API 在 Activity 不可见时调用也不会弹出授权对话框，&lt;strong&gt;XXPermissions&lt;/strong&gt; 的解决方式是将 &lt;strong&gt;requestPermissions&lt;/strong&gt; 时机从 &lt;strong&gt;create&lt;/strong&gt; 转移到了 &lt;strong&gt;resume&lt;/strong&gt;，因为 Activity 和 Fragment 的生命周期方法是捆绑在一起的，如果 Activity 是不可见的，那么就算创建了 Fragment 也只会调用 &lt;strong&gt;onCreate&lt;/strong&gt; 方法，而不会去调用它的 &lt;strong&gt;onResume&lt;/strong&gt; 方法，最后当 Activity 从后台返回到前台时，不仅会触发 &lt;strong&gt;Activity.onResume&lt;/strong&gt; 方法，同时也会触发 &lt;strong&gt;PermissionFragment&lt;/strong&gt; 的 &lt;strong&gt;onResume&lt;/strong&gt; 方法，在这个方法申请权限就可以保证最终 &lt;strong&gt;requestPermissions&lt;/strong&gt; 申请的时机是在 Activity &lt;strong&gt;处于可见状态的情况&lt;/strong&gt;下。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Android 12 内存泄漏问题修复介绍&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;最近有人跟我提了一个内存泄漏的问题 &lt;a href=&#34;https://github.com/getActivity/XXPermissions/issues/133&#34;&gt;XXPermissions/issues/133&lt;/a&gt; ，我经过实践后确认这个问题真实存在，但是通过查看代码堆栈，发现这个问题是系统的代码引起的，引发这个问题需要以下几个条件：&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;在 Android 12 的设备上使用&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;调用了 &lt;code&gt;Activity.shouldShowRequestPermissionRationale&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;在这之后又主动在代码调用了 activity.finish 方法&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;排查的过程：经过对代码的追踪，发现代码调用栈是这样的&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Activity.shouldShowRequestPermissionRationale&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;PackageManager.shouldShowRequestPermissionRationale（实现对象为 ApplicationPackageManager）&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;PermissionManager.shouldShowRequestPermissionRationale&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;new PermissionManager(Context context)&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;new PermissionUsageHelper(Context context)&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;AppOpsManager.startWatchingStarted&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;罪魁祸首其实是 &lt;strong&gt;PermissionUsageHelper&lt;/strong&gt; 将 Context 对象作为字段持有着，并在构造函数中调用 &lt;code&gt;AppOpsManager.startWatchingStarted&lt;/code&gt; 开启监听，这样 PermissionUsageHelper 对象就会被添加进 &lt;code&gt;AppOpsManager#mStartedWatchers&lt;/code&gt; 集合中，这样导致在 Activity 主动调用 finish 的时候，并没有使用 stopWatchingStarted 来移除监听，导致 Activity 对象一直被 &lt;code&gt;AppOpsManager#mStartedWatchers&lt;/code&gt; 集合中持有着，所以间接导致了 Activity 对象无法被系统回收。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;针对这个问题处理也很简单粗暴，就是将在外层传入的 &lt;strong&gt;Context&lt;/strong&gt; 参数从 &lt;strong&gt;Activity&lt;/strong&gt; 对象给替换成 &lt;strong&gt;Application&lt;/strong&gt; 对象即可，有人可能会说了，Activity 里面才有 &lt;code&gt;shouldShowRequestPermissionRationale&lt;/code&gt; 方法，而 Application 里面没有这个方法怎么办？看了一下这个方法的实现，其实那个方法最终会调用 &lt;code&gt;PackageManager.shouldShowRequestPermissionRationale&lt;/code&gt; 方法（&lt;strong&gt;隐藏 API，但是并不在黑名单中&lt;/strong&gt;）里面去，所以只要能获取到 &lt;strong&gt;PackageManager&lt;/strong&gt; 对象即可，最后再使用反射去执行这个方法，这样就能避免出现内存泄漏。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;幸好 Google 没有将 PackageManager.shouldShowRequestPermissionRationale 列入到反射黑名单中，否则这次想给 Google 擦屁股都没有办法了，要不然只能用修改系统源码实现的方式，但这种方式只能等谷歌在后续的 Android 版本上面修复了，不过庆幸的是，在 Android 12 L 的版本之后，这个问题被修复了，&lt;a href=&#34;https://cs.android.com/android/_/android/platform/frameworks/base/+/0d47a03bfa8f4ca54b883ff3c664cd4ea4a624d9:core/java/android/permission/PermissionUsageHelper.java;dlc=cec069482f80019c12f3c06c817d33fc5ad6151f&#34;&gt;具体的提交记录可以点击此处查看&lt;/a&gt;，但是对于 Android 12 而言，这仍是一个历史遗留问题。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;值得注意的是：XXPermissions 是目前同类框架第一款也是唯一一款修复这个问题的框架，另外针对这个问题，我还给谷歌的 &lt;a href=&#34;https://github.com/androidx/androidx/pull/435&#34;&gt;AndroidX&lt;/a&gt; 项目提供了解决方案。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;错误检测机制介绍&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;在框架的日常维护中，有很多人跟我反馈过框架有 Bug，但是经过排查和定位发现，这其中有 95% 的问题来自于调用者一些不规范操作导致的，这不仅对我造成很大的困扰，同时也极大浪费了很多小伙伴的时间和精力，于是我在框架中加入了很多审查元素，在 &lt;strong&gt;debug 模式&lt;/strong&gt;、&lt;strong&gt;debug 模式&lt;/strong&gt;、&lt;strong&gt;debug 模式&lt;/strong&gt; 下，一旦有某些操作不符合规范，那么框架会直接抛出异常给调用者，并在异常信息中正确指引调用者纠正错误，例如：&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;传入的 Context 实例不是 Activity 对象，框架会抛出异常，又或者传入的 Activity 的状态异常（已经 &lt;strong&gt;Finishing&lt;/strong&gt; 或者 &lt;strong&gt;Destroyed&lt;/strong&gt;），这种情况一般是在异步申请权限导致的，框架也会抛出异常，请在合适的时机申请权限，如果申请的时机无法预估，请在外层做好 Activity 状态判断再进行权限申请。&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;如果调用者没有传入任何权限就申请权限的话，框架会抛出异常，又或者如果调用者传入的权限不是危险权限或者特殊权限，框架也会抛出异常，因为有的人会把普通权限当做危险权限传给框架，系统会直接拒绝。&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;如果当前项目在没有适配分区存储的情况下，申请 &lt;code&gt;READ_EXTERNAL_STORAGE&lt;/code&gt; 和 &lt;code&gt;WRITE_EXTERNAL_STORAGE&lt;/code&gt; 权限&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;当项目的 &lt;code&gt;targetSdkVersion &amp;gt;= 29&lt;/code&gt; 时，需要在清单文件中注册 &lt;code&gt;android:requestLegacyExternalStorage=&#34;true&#34;&lt;/code&gt; 属性，否则框架会抛出异常，如果不加会导致一个问题，明明已经获取到存储权限，但是无法在 Android 10 的设备上面正常读写外部存储上的文件。&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;当项目的 &lt;code&gt;targetSdkVersion &amp;gt;= 30&lt;/code&gt; 时，则不能申请 &lt;code&gt;READ_EXTERNAL_STORAGE&lt;/code&gt; 和 &lt;code&gt;WRITE_EXTERNAL_STORAGE&lt;/code&gt; 权限，而是应该申请 &lt;code&gt;MANAGE_EXTERNAL_STORAGE&lt;/code&gt; 权限&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;如果当前项目已经适配了分区存储，那么只需要在清单文件中注册一个 meta-data 属性即可： &lt;code&gt;&amp;lt;meta-data android:name=&#34;ScopedStorage&#34; android:value=&#34;true&#34; /&amp;gt;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;如果申请的权限中包含后台定位权限， 那么这里面则不能包含和定位无关的权限，否则框架会抛出异常，因为 &lt;code&gt;ACCESS_BACKGROUND_LOCATION&lt;/code&gt; 和其他非定位权限定位掺杂在一起申请，在 Android 11 上会出现不申请直接被拒绝的情况。&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;如果申请的权限和项目中的 &lt;strong&gt;targetSdkVersion&lt;/strong&gt; 对不上，框架会抛出异常，是因为 &lt;strong&gt;targetSdkVersion&lt;/strong&gt; 代表着项目适配到哪个 Android 版本，系统会自动做向下兼容，假设申请的权限是 Android 11 才出现的，但是 &lt;strong&gt;targetSdkVersion&lt;/strong&gt; 还停留在 29，那么在某些机型上的申请，会出现授权异常的情况，也就是用户明明授权了，但是系统返回的始终是 false。&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;如果动态申请的权限没有在 &lt;code&gt;AndroidManifest.xml&lt;/code&gt; 中进行注册，框架会抛出异常，因为如果不这么做，是可以进行申请权限，但是不会出现授权弹窗，直接被系统拒绝，并且系统不会给出任何弹窗和提示，并且这个问题在每个机型上面都是&lt;strong&gt;必现的&lt;/strong&gt;。&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;如果动态申请的权限有在 &lt;code&gt;AndroidManifest.xml&lt;/code&gt; 中进行注册，但是设定了不恰当的 &lt;code&gt;android:maxSdkVersion&lt;/code&gt; 属性值，框架会抛出异常，举个例子：&lt;code&gt;&amp;lt;uses-permission android:name=&#34;xxxx&#34; android:maxSdkVersion=&#34;29&#34; /&amp;gt;&lt;/code&gt;，这样的设定会导致在 Android 11 （&lt;code&gt;Build.VERSION.SDK_INT &amp;gt;= 30&lt;/code&gt;）及以上的设备申请权限，系统会认为这个权限没有在清单文件中注册，直接拒绝本次的权限申请，并且也是不会给出任何弹窗和提示，这个问题也是必现的。&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;如果你同时申请了 &lt;code&gt;MANAGE_EXTERNAL_STORAGE&lt;/code&gt;、&lt;code&gt;READ_EXTERNAL_STORAGE&lt;/code&gt;、&lt;code&gt;WRITE_EXTERNAL_STORAGE&lt;/code&gt; 这三个权限，框架会抛出异常，告诉你不要同时申请这三个权限，这是因为在 Android 11 及以上设备上面，申请了 &lt;code&gt;MANAGE_EXTERNAL_STORAGE&lt;/code&gt; 权限，则没有申请 &lt;code&gt;READ_EXTERNAL_STORAGE&lt;/code&gt;、&lt;code&gt;WRITE_EXTERNAL_STORAGE&lt;/code&gt; 权限的必要，这是因为申请了 &lt;code&gt;MANAGE_EXTERNAL_STORAGE&lt;/code&gt; 权限，就等于拥有了比 &lt;code&gt;READ_EXTERNAL_STORAGE&lt;/code&gt;、&lt;code&gt;WRITE_EXTERNAL_STORAGE&lt;/code&gt; 更加强大的能力，如果硬要那么做反而适得其反，假设框架允许的情况下，会同时出现两种授权方式，一种是弹窗授权，另一种是跳页面授权，用户要进行两次授权，但是实际上面有了 &lt;code&gt;MANAGE_EXTERNAL_STORAGE&lt;/code&gt; 权限就满足使用了，这个时候大家可能心中有一个疑问了，你不申请 &lt;code&gt;READ_EXTERNAL_STORAGE&lt;/code&gt;、&lt;code&gt;WRITE_EXTERNAL_STORAGE&lt;/code&gt; 权限，Android 11 以下又没有 &lt;code&gt;MANAGE_EXTERNAL_STORAGE&lt;/code&gt; 这个权限，那不是会有问题？关于这个问题大家可以放心，框架会做判断，如果你申请了 &lt;code&gt;MANAGE_EXTERNAL_STORAGE&lt;/code&gt; 权限，在 Android 11 以下框架会自动添加 &lt;code&gt;READ_EXTERNAL_STORAGE&lt;/code&gt;、&lt;code&gt;WRITE_EXTERNAL_STORAGE&lt;/code&gt; 来申请，所以在低版本下也不会因为没有权限导致的无法使用。&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;如果你不需要上面这些检测，可通过调用 &lt;code&gt;unchecked&lt;/code&gt; 方法来关闭，但是需要注意的是，我并不建议你去关闭这个检测，因为在 &lt;strong&gt;release 模式&lt;/strong&gt; 时它是关闭状态，不需要你手动关闭，而它只在 &lt;strong&gt;debug 模式&lt;/strong&gt; 下才会触发这些检测。&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;出现这些问题的原因是，我们对这些机制不太熟悉，而如果框架不加以限制，那么引发各种奇奇怪怪的问题出现，作为框架的作者，表示不仅你们很痛苦，作为框架作者表示也很受伤。因为这些问题不是框架导致的，而是调用者的某些操作不规范导致的。我觉得这个问题最好的解决方式是，由框架做统一的检查，因为我是框架的作者，对权限申请这块知识点有&lt;strong&gt;较强的专业能力和足够的经验&lt;/strong&gt;，知道什么该做，什么不该做，这样就可以对这些骚操作进行一一拦截。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;当权限申请出现问题时，你希不希望能有个人过来提醒你，告诉你哪里错了？该怎么去纠正？然而这些 XXPermissions 都做到了，在所有的权限请求框架中，我算是第一个做这件事的人，我认为&lt;strong&gt;做好一个框架&lt;/strong&gt;不仅仅是要把功能做好，把复杂的场景处理好，更重要的是要&lt;strong&gt;以人为本&lt;/strong&gt;，因为框架本身就是为人服务的，要做的不仅仅是解决大家的需求，还要帮助大家在这个过程中少走弯路。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;框架亮点&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;首款适配 Android 13 的权限请求框架&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;首款也是唯一一款适配所有 Android 版本的权限请求框架&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;简洁易用：采用链式调用的方式，使用只需一句代码&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;体积感人：功能在同类框架中是最全的，但是框架体积是垫底的&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;适配极端情况：无论在多么极端恶劣的环境下申请权限，框架依然坚挺&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;向下兼容属性：新权限在旧系统可以正常申请，框架会做自动适配，无需调用者适配&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;自动检测错误：如果出现错误框架会主动抛出异常给调用者（仅在 Debug 下判断，把 Bug 扼杀在摇篮中）&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;作者的其他开源项目&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;安卓技术中台：&lt;a href=&#34;https://github.com/getActivity/AndroidProject&#34;&gt;AndroidProject&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/getActivity/AndroidProject.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/getActivity/AndroidProject.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;安卓技术中台 Kt 版：&lt;a href=&#34;https://github.com/getActivity/AndroidProject-Kotlin&#34;&gt;AndroidProject-Kotlin&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/getActivity/AndroidProject-Kotlin.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/getActivity/AndroidProject-Kotlin.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;吐司框架：&lt;a href=&#34;https://github.com/getActivity/ToastUtils&#34;&gt;ToastUtils&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/getActivity/ToastUtils.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/getActivity/ToastUtils.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;网络框架：&lt;a href=&#34;https://github.com/getActivity/EasyHttp&#34;&gt;EasyHttp&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/getActivity/EasyHttp.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/getActivity/EasyHttp.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;标题栏框架：&lt;a href=&#34;https://github.com/getActivity/TitleBar&#34;&gt;TitleBar&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/getActivity/TitleBar.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/getActivity/TitleBar.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;悬浮窗框架：&lt;a href=&#34;https://github.com/getActivity/XToast&#34;&gt;XToast&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/getActivity/XToast.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/getActivity/XToast.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Shape 框架：&lt;a href=&#34;https://github.com/getActivity/ShapeView&#34;&gt;ShapeView&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/getActivity/ShapeView.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/getActivity/ShapeView.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;语种切换框架：&lt;a href=&#34;https://github.com/getActivity/MultiLanguages&#34;&gt;MultiLanguages&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/getActivity/MultiLanguages.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/getActivity/MultiLanguages.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Gson 解析容错：&lt;a href=&#34;https://github.com/getActivity/GsonFactory&#34;&gt;GsonFactory&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/getActivity/GsonFactory.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/getActivity/GsonFactory.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;日志查看框架：&lt;a href=&#34;https://github.com/getActivity/Logcat&#34;&gt;Logcat&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/getActivity/Logcat.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/getActivity/Logcat.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Android 版本适配：&lt;a href=&#34;https://github.com/getActivity/AndroidVersionAdapter&#34;&gt;AndroidVersionAdapter&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/getActivity/AndroidVersionAdapter.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/getActivity/AndroidVersionAdapter.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Android 代码规范：&lt;a href=&#34;https://github.com/getActivity/AndroidCodeStandard&#34;&gt;AndroidCodeStandard&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/getActivity/AndroidCodeStandard.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/getActivity/AndroidCodeStandard.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Android 开源排行榜：&lt;a href=&#34;https://github.com/getActivity/AndroidGithubBoss&#34;&gt;AndroidGithubBoss&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/getActivity/AndroidGithubBoss.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/getActivity/AndroidGithubBoss.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Studio 精品插件：&lt;a href=&#34;https://github.com/getActivity/StudioPlugins&#34;&gt;StudioPlugins&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/getActivity/StudioPlugins.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/getActivity/StudioPlugins.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;表情包大集合：&lt;a href=&#34;https://github.com/getActivity/EmojiPackage&#34;&gt;EmojiPackage&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/getActivity/EmojiPackage.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/getActivity/EmojiPackage.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;省市区 Json 数据：&lt;a href=&#34;https://github.com/getActivity/ProvinceJson&#34;&gt;ProvinceJson&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/getActivity/ProvinceJson.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/getActivity/ProvinceJson.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;微信公众号：Android轮子哥&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/getActivity/Donate/master/picture/official_ccount.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Android 技术 Q 群：10047167&lt;/h4&gt; &#xA;&lt;h4&gt;如果您觉得我的开源库帮你节省了大量的开发时间，请扫描下方的二维码随意打赏，要是能打赏个 10.24 &lt;span&gt;🐵&lt;/span&gt;就太&lt;span&gt;👍&lt;/span&gt;了。您的支持将鼓励我继续创作&lt;img alt=&#34;octocat&#34; src=&#34;https://github.githubassets.com/images/icons/emoji/octocat.png?v8&#34;&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/getActivity/Donate/master/picture/pay_ali.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/getActivity/Donate/master/picture/pay_wechat.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/getActivity/Donate&#34;&gt;点击查看捐赠列表&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Copyright 2018 Huang JinQun&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>didi/DoKit</title>
    <updated>2022-08-21T01:59:13Z</updated>
    <id>tag:github.com,2022-08-21:/didi/DoKit</id>
    <link href="https://github.com/didi/DoKit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;一款面向泛前端产品研发全生命周期的效率平台。&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#%E7%AE%80%E4%BB%8B&#34;&gt;简介&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#%E9%A2%86%E5%9F%9F%E7%94%9F%E6%80%81&#34;&gt;领域生态&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C&#34;&gt;使用手册&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97&#34;&gt;更新日志&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#%E7%A4%BE%E5%8C%BA%E6%B4%BB%E5%8A%A8&#34;&gt;社区活动&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#%E5%BC%80%E5%8F%91%E8%83%8C%E6%99%AF&#34;&gt;开发背景&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%9D%97&#34;&gt;功能模块&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#%E4%B8%80%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7wwwdokitcn&#34;&gt;一、平台工具(www.dokit.cn)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#%E4%BA%8C%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7&#34;&gt;二、常用工具&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#%E4%B8%89%E6%80%A7%E8%83%BD%E6%A3%80%E6%B5%8B&#34;&gt;三、性能检测&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#%E5%9B%9B%E8%A7%86%E8%A7%89%E5%B7%A5%E5%85%B7&#34;&gt;四、视觉工具&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#%E4%BA%94weex%E4%B8%93%E9%A1%B9%E5%B7%A5%E5%85%B7cml%E4%B8%93%E9%A1%B9%E5%B7%A5%E5%85%B7&#34;&gt;五、Weex专项工具（CML专项工具）&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#%E5%85%AD%E6%94%AF%E6%8C%81%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E4%B8%9A%E5%8A%A1%E5%B7%A5%E5%85%B7%E9%9B%86%E6%88%90%E5%88%B0%E9%9D%A2%E6%9D%BF%E4%B8%AD&#34;&gt;六、支持自定义的业务工具集成到面板中&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#%E4%B8%83%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%93%E9%A1%B9%E5%B7%A5%E5%85%B7&#34;&gt;七、微信小程序专项工具&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#%E7%9B%B8%E5%85%B3%E6%96%87%E6%A1%A3&#34;&gt;相关文档&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#%E4%B8%80%E7%BE%A4%E6%BB%A1%E5%91%98%EF%BC%8C%E5%B7%B2%E5%BC%80%E4%BA%8C%E7%BE%A4&#34;&gt;微信交流群(一群满员，已开二群)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#qq-%E4%BA%A4%E6%B5%81%E7%BE%A4&#34;&gt;QQ 交流群&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7&#34;&gt;微信公众号&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#%E9%A1%B9%E7%9B%AE%E6%88%90%E5%91%98&#34;&gt;项目成员&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#%E4%BD%BF%E7%94%A8%E6%8F%90%E9%86%92&#34;&gt;使用提醒&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5&#34;&gt;友情链接&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#%E5%8D%8F%E8%AE%AE&#34;&gt;协议&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;简介&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://pt-starimg.didistatic.com/static/starimg/img/J0WO7tUi9U1616143930629.png&#34; width=&#34;250&#34; alt=&#34;DoraemonKit&#34; align=&#34;left&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/github/license/didi/DoraemonKit.svg?sanitize=true&#34; align=&#34;left&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/Android-3.5.0-blue.svg?sanitize=true&#34; align=&#34;left&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/iOS-3.0.7-yellow.svg?sanitize=true&#34; align=&#34;left&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/Flutter-0.6.0-blue.svg?sanitize=true&#34; align=&#34;left&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/miniapp-0.0.1-red.svg?sanitize=true&#34; align=&#34;left&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&#34; align=&#34;left&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;DoKit诞生于滴滴城运服体验技术部，是一款面向泛前端产品研发全生命周期的效率平台。经过两年的发展，当前DoKit已经发展成了一个相对完整的生态，比如DoKit For Android、DoKit For iOS、DoKit For 小程序、DoKit For Flutter、DoKit For Web。同时我们的项目被BAT以及滴滴、字节、快手、京东等等头部独角兽企业广泛使用并获得良好的口碑。随着dokit.cn平台端的推出，标志着DoKit已经从单纯的效率工具正式进入了效率工具平台的阶段。与此同时我们一直都未停下持续探索的精神，积极地在更多平台领域进行尝试，不给自己设限。我们相信DoKit的未来充满无限可能。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/README_EN.md&#34;&gt;English Readme&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;领域生态&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://pt-starimg.didistatic.com/static/starimg/img/WRUdiWDsw71626696344680.jpg&#34; width=&#34;900&#34; alt=&#34;DoKit 首页效果演示&#34; align=&#34;center&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;使用手册&lt;/h2&gt; &#xA;&lt;p&gt;访问&lt;a href=&#34;https://www.dokit.cn/&#34;&gt;DoKit官网&lt;/a&gt;，点击&#34;&lt;a href=&#34;http://xingyun.xiaojukeji.com/docs/dokit/#/intro&#34;&gt;使用中心&lt;/a&gt;&#34;。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;新用户重点关注：受集团影响当前DoKit平台端不支持新用户注册，老用户不受影响，新用户开放注册时间以官方消息为准！！！另外只有平台端的相关功能需要申请productId，假如不需要相关功能可以不填或者填空。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;温馨提示：当前DoKit的所有功能都只针对Debug环境，Release环境未经过实际验证，所以请大家严格按照官方文档来集成，也不建议大家在Release环境上使用DoKit的任何功能。如果大家一定要在Release环境上使用，请自行进行充分的测试和验证，DoKit官方将不承担任何责任和损失。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;更新日志&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://xingyun.xiaojukeji.com/docs/dokit/#/AndroidReleaseNote&#34;&gt;Android-ReleaseNotes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/Doc/iOS-ReleaseNotes.md&#34;&gt;iOS-ReleaseNotes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/Doc/miniapp-ReleaseNotes.md&#34;&gt;微信小程序-ReleaseNotes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/Flutter/README.md&#34;&gt;DoKit For Flutter-ReleaseNotes&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;社区活动&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;DoKit调研问卷&lt;/strong&gt; 亲爱的DoKit用户,动动你的小手指参与一下我们的官方调研活动吧。我们极度渴望听到你们的声音:&lt;/p&gt; &#xA;&lt;p&gt;链接:&lt;a href=&#34;https://page.juyanwenjuan.com/jy_0CMpJzlu.html&#34;&gt;https://page.juyanwenjuan.com/jy_0CMpJzlu.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://pt-starimg.didistatic.com/static/starimg/img/INLjGkp9wN1597062733948.jpg&#34; width=&#34;250&#34; alt=&#34;DoKit 首页效果演示&#34; align=&#34;center&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;开发背景&lt;/h2&gt; &#xA;&lt;p&gt;每一个稍微有点规模的 App，总会自带一些线下的测试功能代码，比如环境切换功能、帧率查看功能等等，这些功能的切换入口往往放在各式各样的入口中，比如一些特殊的手势，双击 statusBar，双击某一个功能区块，或者新建一个 keyWindow 始终至于 App 最上方等等，而且每一个 App 里面的线下附带功能模块很多是相似的，比如帧率查看、内存和 CPU 监控等等，但是现在基本上都是每个 App 都是自己实现了一份，经历了以上的问题之后，DoKit 就有了它存在的意义。&lt;/p&gt; &#xA;&lt;p&gt;DoKit 是一个功能平台，能够让每一个 App 快速接入一些常用的或者你没有实现的一些辅助开发工具、测试效率工具、视觉辅助工具，而且能够完美在 Doraemon 面板中接入你已经实现的与业务紧密耦合的一些非通有的辅助工具，并搭配我们的&lt;a href=&#34;https://www.dokit.cn&#34;&gt;dokit&lt;/a&gt;平台，让功能得到延伸，接入方便，便于扩展。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;简单总结&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;1、DoKit 能够快速让你的业务测试代码能够在这里统一管理，统一收口；&lt;/p&gt; &#xA;&lt;p&gt;2、DoKit 内置很多常用的工具，避免重复实现，一次接入，你将会拥有强大的工具集合；&lt;/p&gt; &#xA;&lt;p&gt;3、搭配dokit平台，借助&lt;a href=&#34;https://www.dokit.cn/#/index/dataMockPage&#34;&gt;接口Mock&lt;/a&gt;、&lt;a href=&#34;https://www.dokit.cn/#/index/checkDataPage&#34;&gt;健康体检&lt;/a&gt;、&lt;a href=&#34;https://www.dokit.cn/#/index/fileSyncPage&#34;&gt;文件同步助手&lt;/a&gt;、&lt;a href=&#34;&#34;&gt;一机多控&lt;/a&gt;让你方便和他人协同，极大的提升研发过程中的效率。&lt;/p&gt; &#xA;&lt;h2&gt;功能模块&lt;/h2&gt; &#xA;&lt;h3&gt;一、平台工具(&lt;a href=&#34;http://www.dokit.cn&#34;&gt;www.dokit.cn&lt;/a&gt;)&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;【数据Mock】&lt;/strong&gt; App接口Mock解决方案，提供一套基于App网络拦截的接口Mock方案，无需修改代码即可完成对于接口数据的Mock。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【健康体检】&lt;/strong&gt; 一键式操作，整合DoKit多项工具，数据可视化，快速准确定位问题，让你对app的性能了如指掌。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【文件同步助手】&lt;/strong&gt; 通过终端服务，让你的终端空间在平台端完整的展现并提供强大的文件以及数据库操作能力。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【一机多控】&lt;/strong&gt; 主从同步，释放人力，让研发测试效率提升看得见&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;二、常用工具&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;【App 信息查看】&lt;/strong&gt; 快速查看手机信息，App 基础信息、签名相关、权限信息的渠道，避免去手机设置查找或者查看项目源代码的麻烦；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【开发者选项 Android特有】&lt;/strong&gt; 一键跳转开发者选项，避免安卓由于平台差异导致的入口不一致&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【本地语言】&lt;/strong&gt; 一键跳转本地语言，避免安卓由于平台差异导致的入口不一致&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【沙盒浏览】&lt;/strong&gt; App 内部文件浏览的功能，支持删除和预览, 并且能通过 AirDrop 或者其他分享方式上传到 PC 中，进行更加细致的操作；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【MockGPS】&lt;/strong&gt; App 能定位到全国各地，支持地图地位和手动输入经纬度；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【H5任意门】&lt;/strong&gt; 开发测试同学可以快速输入 H5 页面地址，查看该页面效果；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【Crash查看】&lt;/strong&gt; 方便本地打印出出现 Crash 的堆栈；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【子线程UI】&lt;/strong&gt; 快速定位哪一些 UI 操作在非主线程中进行渲染，避免不必要的问题；（iOS独有）&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【清除本地数据】&lt;/strong&gt; 一键删除沙盒中所有数据；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【NSLog】&lt;/strong&gt; 把所有 NSLog 信息打印到UI界面，避免没有开发证书无法调试的尴尬；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【Lumberjack】&lt;/strong&gt; 每一条 CocoaLumberjack 的日志信息，都在在 App 的界面中显示出来，再也不需要导出日志这么麻烦;（iOS独有）&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【DBView】&lt;/strong&gt; 通过网页方便快捷的操作应用内数据库，让数据库的调试变得非常优雅;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【模拟弱网】&lt;/strong&gt; 限制网速，模拟弱网环境下App的运行情况;（android独有）&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【JS脚本】&lt;/strong&gt; 在指定WebView运行JS脚本。（iOS独有）&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;三、性能检测&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;【帧率】&lt;/strong&gt; App 帧率信息提供波形图查看功能，让帧率监控的趋势更加明显；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【CPU】&lt;/strong&gt; App CPU 使用率信息提供波形图查看功能，让 CPU 监控的趋势更加形象；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【内存】&lt;/strong&gt; App 内存使用量信息提供波形图查看功能，让内存监控的趋势更加鲜明；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【流量监控】&lt;/strong&gt; 拦截 App 内部流量信息，提供波形图展示、流量概要展示、流量列表展示、流量筛选、流量详情，对流量信息统一拦截，成为我们 App 中自带的 &#34;Charles&#34;；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【卡顿】&lt;/strong&gt; 锁定 App 出现卡顿的时刻，打印出对应的代码调用堆栈；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【大图检测】&lt;/strong&gt; 通过流量监测，找出所有的大小超标的图片，避免下载大图造成的流量浪费和渲染大图带来的CPU消耗。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【启动耗时】&lt;/strong&gt; 无侵入的统计出App启动过程的总共耗时；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【UI层级检查】&lt;/strong&gt; 检查出每一个页面中层级最深的元素；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【函数耗时】&lt;/strong&gt; 从函数级别分析app性能瓶颈；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【Load】&lt;/strong&gt; 找出所有的Load方法，并给出耗时分析；（iOS独有）&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【内存泄漏】&lt;/strong&gt; 找出App中所有的内存泄漏的问题。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;四、视觉工具&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;【颜色吸管】&lt;/strong&gt; 方便设计师 UI 捉虫的时候，查看每一个组件的颜色值是否设置正确；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【组件检查】&lt;/strong&gt; 可以抓取任意一个UI控件，查看它们的详细信息，包括控件名称、控件位置、背景色、字体颜色、字体大小；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【对齐标尺】&lt;/strong&gt; 参考 Android 系统自带测试工具，能够实时捕获屏幕坐标，并且可以查看组件是否对齐；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【元素边框线】&lt;/strong&gt; 绘制出每一个 UI 组件的边框，对于组件布局有一定的参考意义。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;五、Weex专项工具（CML专项工具）&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;【console日志查看】&lt;/strong&gt; 方便在端上查看每一个Weex文件中的console日志，提供分级和搜索功能；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【storage缓存查看】&lt;/strong&gt; 将Weex中的storage模块的本地缓存数据可视化展示；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【容器信息】&lt;/strong&gt; 查看每一个打开的Weex页面的基本信息和性能数据；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【DevTool】&lt;/strong&gt; 快速开启Weex DevTool的扫码入口。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;tips ： 如果使用我们滴滴优秀的开源跨端方案 &lt;a href=&#34;https://github.com/didi/chameleon&#34;&gt;chameleon&lt;/a&gt; 也可以集成该工具集合&lt;/p&gt; &#xA;&lt;h3&gt;六、支持自定义的业务工具集成到面板中&lt;/h3&gt; &#xA;&lt;p&gt;统一维护和管理所有的测试模块，详见接入手册&lt;/p&gt; &#xA;&lt;h3&gt;七、微信小程序专项工具&lt;/h3&gt; &#xA;&lt;p&gt;详见 &lt;a href=&#34;https://github.com/didi/DoraemonKit/tree/master/miniapp&#34;&gt;Doraemon mini program debugger&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;相关文档&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/00763123dbc4&#34;&gt;iOS 研发助手 DoKit 技术实现（一）&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/weixin_33847182/article/details/91472599&#34;&gt;iOS 研发助手 DoKit 技术实现（二）&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://juejin.im/post/5d76184ce51d4561d106cc65&#34;&gt;DoKit支持iOS本地crash查看功能&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/weixin_33711647/article/details/88004429&#34;&gt;开源组件 DoKit 之 Android 版本技术实现（一）&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/weixin_34148456/article/details/88004414&#34;&gt;开源组件 DoKit 之 Android 版本技术实现（二）&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://juejin.im/post/5d70bc3051882571ed61e407&#34;&gt;DoKit支持Activity启动耗时统计方案&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://juejin.im/post/5d9bf252518825095c3c5e32&#34;&gt;DoKit 微信小程序SDK对外发布&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://juejin.im/post/5dc3cdfa51882538d22d5948&#34;&gt;滴滴DoKit2.0 - 泛前端开发者的百宝箱&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://juejin.im/post/5e818e29f265da4804697d25&#34;&gt;滴滴正式发布开源客户端研发助手 DoKit 3.0，新特性解读&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://juejin.im/post/5eba5ce15188256d6f268c98&#34;&gt;滴滴DoKit Android核心原理揭秘之函数耗时&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://juejin.im/post/6891887877613944840&#34;&gt;滴滴DoKit Android核心原理揭秘之AOP字节码实现&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;微信交流群(一群满员，已开二群)&lt;/h2&gt; &#xA;&lt;p&gt;搜索&lt;strong&gt;justdokit&lt;/strong&gt;加我微信好友，注意请添加备注：昵称-DoKit社区用户，否则你的申请将不会被验证通过。 &lt;img src=&#34;https://user-images.githubusercontent.com/4486497/147242854-9693daf9-033e-4523-89da-b7b36c72642c.jpg&#34; alt=&#34;51640263734_ pic&#34;&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;QQ 交流群&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://javer.oss-cn-shanghai.aliyuncs.com/doraemon/github/DoraemonKitQQ.jpeg&#34; width=&#34;160&#34; height=&#34;200&#34; alt=&#34;QQ 交流群&#34; align=&#34;left&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;项目成员&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;创始人&lt;/strong&gt; &lt;a href=&#34;https://github.com/yixiangboy&#34;&gt;yixiangboy(易翔)&lt;/a&gt; &lt;strong&gt;负责人&lt;/strong&gt; &lt;a href=&#34;https://github.com/bbssyyuui&#34;&gt;小枫&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;内部核心成员&lt;/strong&gt; &lt;a href=&#34;https://github.com/bbssyyuui&#34;&gt;小枫&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/ChasonTang&#34;&gt;ChasonTang&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/AdamCaoQAQ&#34;&gt;AdamCaoQAQ&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/fangyeqing123&#34;&gt;fangyeqing123&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/RealOnlyone&#34;&gt;RealOnlyone&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/HeyCFarmer&#34;&gt;HeyCFarmer&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/yFeii&#34;&gt;yFeii&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/kabda&#34;&gt;卡布达&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/maxiee&#34;&gt;maxiee&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/zhugeafanti&#34;&gt;zhugeafanti&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;贡献者榜单&lt;/strong&gt; &lt;a href=&#34;https://github.com/yixiangboy&#34;&gt;yixiangboy(易翔)&lt;/a&gt;、 &lt;a href=&#34;https://github.com/jtsky&#34;&gt;jtsky(金台)&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/LinJZong&#34;&gt;LinJZong&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/wanglikun7342&#34;&gt;wanglikun7342&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/jayconscious&#34;&gt;jayconscious&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/excitedhaha&#34;&gt;jellybean&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/xu984386604&#34;&gt;linusflow&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/WangLao100&#34;&gt;wangzhipeng&lt;/a&gt;、 &lt;a href=&#34;https://github.com/BzCoder&#34;&gt;BzCoder&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/changzuozhen&#34;&gt;changzuozhen&lt;/a&gt;、 &lt;a href=&#34;https://github.com/momoxiangbei&#34;&gt;momoxiangbei&lt;/a&gt;、 &lt;a href=&#34;https://github.com/wenquanlebao&#34;&gt;wenquanlebao&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/hiXgb&#34;&gt;hiXgb&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/Chinnko&#34;&gt;Chinnko&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/y644938647&#34;&gt;y644938647&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/wm219&#34;&gt;wm219&lt;/a&gt;、 &lt;a href=&#34;https://github.com/goolong&#34;&gt;goolong&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/miracle9312&#34;&gt;miracle9312&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/lwhsgz123&#34;&gt;lwhsgz123&lt;/a&gt;、 &lt;a href=&#34;https://github.com/huakucha&#34;&gt;huakucha&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/HuginChen&#34;&gt;HuginChen&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/feng562925462&#34;&gt;feng562925462&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/azhon&#34;&gt;azhon&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/rex26&#34;&gt;rex26&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/csc-EricWu&#34;&gt;csc-EricWu&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/xiandanin&#34;&gt;xiandanin&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/0xd-cc&#34;&gt;0xd-cc&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/k373379320&#34;&gt;k373379320&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/fabcz&#34;&gt;fabcz&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/y500&#34;&gt;y500&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/Knight-ZXW&#34;&gt;Knight-ZXW&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/boai&#34;&gt;boai&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/klone1127&#34;&gt;klone1127&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/DeveloperLY&#34;&gt;DeveloperLY&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/sagdragon&#34;&gt;sagdragon&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/ccworld1000&#34;&gt;ccworld1000&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/HDB-Li&#34;&gt;HDB-Li&lt;/a&gt;、 &lt;a href=&#34;https://github.com/yu-jianfeng&#34;&gt;yu-jianfeng&lt;/a&gt;、 &lt;a href=&#34;https://github.com/ydlsl&#34;&gt;ydlsl&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;如何成为外部贡献者？ 提交有意义的PR，并被采纳。&lt;/p&gt; &#xA;&lt;h2&gt;使用提醒&lt;/h2&gt; &#xA;&lt;p&gt;因为SDK目前会配合&lt;a href=&#34;http://www.dokit.cn/&#34;&gt;dokit.cn&lt;/a&gt;平台, 会产生一些网络数据，这些信息我们收集绝不用于任何恶意用途。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;以下为所有涉及到网络请求的部分&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;统计有多少用户集成了dokit&lt;/p&gt; &lt;p&gt;Android : DoraemonStatisticsUtil#uploadUserInfo&lt;/p&gt; &lt;p&gt;iOS : DoraemonStatisticsUtil#upLoadUserInfo&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;统计每个内置kit的使用情况&lt;/p&gt; &lt;p&gt;Android : DataPickManager#realPost&lt;/p&gt; &lt;p&gt;iOS : DoraemonBuriedPointManager#uploadData&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;上传健康体检的相关数据&lt;/p&gt; &lt;p&gt;Android : AppHealthInfoUtil#post&lt;/p&gt; &lt;p&gt;iOS : DoraemonHealthManager#upLoadData&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;数据mock的相关网络请求&lt;/p&gt; &lt;p&gt;Android : NetWorkMockFragment 里涉及到接口mock的相关网络请求&lt;/p&gt; &lt;p&gt;iOS : DoraemonMockManager#queryMockData&amp;amp;uploadSaveData&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;敬请各位用户知晓。&lt;/p&gt; &#xA;&lt;h2&gt;友情链接&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/didi/Hummer&#34;&gt;Hummer&lt;/a&gt;，Hummer 是一套高性能高可用的跨端开发框架，一套代码可以同时支持开发 Android 和 iOS 应用。现已经支持 Vue/TypeScript/JavaScript 三种语法，面向大前端开发人员，总有一款适合你。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/didi/chameleon&#34;&gt;Chameleon&lt;/a&gt;，简写CML，中文意思变色龙，意味着就像变色龙一样能适应不同环境的跨端整体解决方案，达到真正意义上&#34;一套代码，多端运行&#34;的终极目标&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/didi/booster&#34;&gt;Booster&lt;/a&gt; 是一款专门为移动应用设计的易用、轻量级且可扩展的质量优化框架，其目标主要是为了解决随着 APP 复杂度的提升而带来的性能、稳定性、包体积等一系列质量问题。Booster 提供了性能检测、多线程优化、资源索引内联、资源去冗余、资源压缩、系统 Bug 修复等一系列功能模块，可以使得稳定性能够提升 15% ~ 25%，包体积可以减小 1MB ~ 10MB。&lt;strong&gt;同时DoKit插件的底层也是基于Booster进行开发的。&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/didi/AoE&#34;&gt;AoE&lt;/a&gt;，一个终端侧AI集成运行时环境&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/didi/mand-mobile&#34;&gt;Mand Mobile&lt;/a&gt; 一款优秀的面向金融场景的 移动端UI组件库&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;我们团队的技术公众号【滴滴OrangeLab】，欢迎关注，我们会在这里持续输出团队内部比较有深度的技术沉淀和经验分享，欢迎一起交流。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img src=&#34;https://pt-starimg.didistatic.com/static/starimg/img/cPlaMme4g81616682162304.jpg&#34; width=&#34;250&#34;&gt; &#xA;&lt;h2&gt;协议&lt;/h2&gt; &#xA;&lt;img alt=&#34;Apache-2.0 license&#34; src=&#34;https://www.apache.org/img/ASF20thAnniversary.jpg&#34; width=&#34;128&#34;&gt; &#xA;&lt;p&gt;DoKit 基于 Apache-2.0 协议进行分发和使用，更多信息参见 &lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/LICENSE&#34;&gt;协议文件&lt;/a&gt;。&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cryptomator/cryptomator</title>
    <updated>2022-08-21T01:59:13Z</updated>
    <id>tag:github.com,2022-08-21:/cryptomator/cryptomator</id>
    <link href="https://github.com/cryptomator/cryptomator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Multi-platform transparent client-side encryption of your files in the cloud&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://cryptomator.org/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cryptomator/cryptomator/develop/cryptomator.png&#34; alt=&#34;cryptomator&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cryptomator/cryptomator/actions?query=workflow%3ABuild&#34;&gt;&lt;img src=&#34;https://github.com/cryptomator/cryptomator/workflows/Build/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://snyk.io/test/github/cryptomator/cryptomator&#34;&gt;&lt;img src=&#34;https://snyk.io/test/github/cryptomator/cryptomator/badge.svg?sanitize=true&#34; alt=&#34;Known Vulnerabilities&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=cryptomator_cryptomator&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=cryptomator_cryptomator&amp;amp;metric=alert_status&#34; alt=&#34;Quality Gate Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://twitter.com/Cryptomator&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/twitter-@Cryptomator-blue.svg?style=flat&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://translate.cryptomator.org/&#34;&gt;&lt;img src=&#34;https://badges.crowdin.net/cryptomator/localized.svg?sanitize=true&#34; alt=&#34;Crowdin&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/cryptomator/cryptomator/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/cryptomator/cryptomator.svg?sanitize=true&#34; alt=&#34;Latest Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://community.cryptomator.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/help-Community-orange.svg?sanitize=true&#34; alt=&#34;Community&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supporting Cryptomator&lt;/h2&gt; &#xA;&lt;p&gt;Cryptomator is provided free of charge as an open-source project despite the high development effort and is therefore dependent on donations. If you are also interested in further development, we offer you the opportunity to support us:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cryptomator.org/#donate&#34;&gt;One-time or recurring donation via Cryptomator&#39;s website.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cryptomator.org/sponsors/&#34;&gt;Become a sponsor via Cryptomator&#39;s sponsors website.&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Gold Sponsors&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.gee-whiz.de/&#34;&gt;&lt;img src=&#34;https://cryptomator.org/img/sponsors/geewhiz.svg?sanitize=true&#34; alt=&#34;gee-whiz&#34; height=&#34;80&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://proxy-hub.com/&#34;&gt;&lt;img src=&#34;https://cryptomator.org/img/sponsors/proxyhub.svg?sanitize=true&#34; alt=&#34;Proxy-Hub&#34; height=&#34;80&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Silver Sponsors&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mowcapital.com/&#34;&gt;&lt;img src=&#34;https://cryptomator.org/img/sponsors/mowcapital.svg?sanitize=true&#34; alt=&#34;Mow Capital&#34; height=&#34;40&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Cryptomator offers multi-platform transparent client-side encryption of your files in the cloud.&lt;/p&gt; &#xA;&lt;p&gt;Download native binaries of Cryptomator on &lt;a href=&#34;https://cryptomator.org/&#34;&gt;cryptomator.org&lt;/a&gt; or clone and build Cryptomator using Maven (instructions below).&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Works with Dropbox, Google Drive, OneDrive, MEGA, pCloud, ownCloud, Nextcloud and any other cloud storage service which synchronizes with a local directory&lt;/li&gt; &#xA; &lt;li&gt;Open Source means: No backdoors, control is better than trust&lt;/li&gt; &#xA; &lt;li&gt;Client-side: No accounts, no data shared with any online service&lt;/li&gt; &#xA; &lt;li&gt;Totally transparent: Just work on the virtual drive as if it were a USB flash drive&lt;/li&gt; &#xA; &lt;li&gt;AES encryption with 256-bit key length&lt;/li&gt; &#xA; &lt;li&gt;File names get encrypted&lt;/li&gt; &#xA; &lt;li&gt;Folder structure gets obfuscated&lt;/li&gt; &#xA; &lt;li&gt;Use as many vaults in your Dropbox as you want, each having individual passwords&lt;/li&gt; &#xA; &lt;li&gt;Three thousand commits for the security of your data!! &lt;span&gt;🎉&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Privacy&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;256-bit keys (unlimited strength policy bundled with native binaries)&lt;/li&gt; &#xA; &lt;li&gt;Scrypt key derivation&lt;/li&gt; &#xA; &lt;li&gt;Cryptographically secure random numbers for salts, IVs and the masterkey of course&lt;/li&gt; &#xA; &lt;li&gt;Sensitive data is wiped from the heap asap&lt;/li&gt; &#xA; &lt;li&gt;Lightweight: &lt;a href=&#34;https://www.schneier.com/essays/archives/1999/11/a_plea_for_simplicit.html&#34;&gt;Complexity kills security&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Consistency&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HMAC over file contents to recognize changed ciphertext before decryption&lt;/li&gt; &#xA; &lt;li&gt;I/O operations are transactional and atomic, if the filesystems support it&lt;/li&gt; &#xA; &lt;li&gt;Each file contains all information needed for decryption (except for the key of course), no common metadata means no &lt;a href=&#34;http://en.wikipedia.org/wiki/Single_point_of_failure&#34;&gt;SPOF&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Security Architecture&lt;/h3&gt; &#xA;&lt;p&gt;For more information on the security details visit &lt;a href=&#34;https://docs.cryptomator.org/en/latest/security/architecture/&#34;&gt;cryptomator.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JDK 17 (e.g. temurin)&lt;/li&gt; &#xA; &lt;li&gt;Maven 3&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Run Maven&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;mvn clean install&#xA;# or mvn clean install -Pwindows&#xA;# or mvn clean install -Pmac&#xA;# or mvn clean install -Plinux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will build all the jars and bundle them together with their OS-specific dependencies under &lt;code&gt;target&lt;/code&gt;. This can now be used to build native packages.&lt;/p&gt; &#xA;&lt;h3&gt;Start Cryptomator&lt;/h3&gt; &#xA;&lt;p&gt;If you unzip the buildkit for your OS, you will find a launcher script with some basic settings. You might want to adjust these to your needs. To start Cryptomator, simply execute the launcher script from a terminal, e.g. &lt;code&gt;launcher-linux.sh&lt;/code&gt;, if you&#39;re on a Linux system.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is dual-licensed under the GPLv3 for FOSS projects as well as a commercial license for independent software vendors and resellers. If you want to modify this application under different conditions, feel free to contact our support team.&lt;/p&gt;</summary>
  </entry>
</feed>