<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-01T02:01:04Z</updated>
  <subtitle>Weekly Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>alibaba/fastjson</title>
    <updated>2022-06-01T02:01:04Z</updated>
    <id>tag:github.com,2022-06-01:/alibaba/fastjson</id>
    <link href="https://github.com/alibaba/fastjson" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fast JSON parser/generator for Java.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;fastjson&lt;/h1&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://github.com/alibaba/fastjson/actions/workflows/ci.yaml&#34;&gt;&lt;img src=&#34;https://github.com/alibaba/fastjson/actions/workflows/ci.yaml/badge.svg?branch=master&#34; alt=&#34;Java CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/alibaba/fastjson/branch/master&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/alibaba/fastjson/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/com.alibaba/fastjson/&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/com.alibaba/fastjson/badge.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/alibaba/fastjson/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/alibaba/fastjson.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%202-4EB1BA.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitpod.io/#https://github.com/alibaba/fastjson&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod&#34; alt=&#34;Gitpod Ready-to-Code&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&amp;amp;can=1&amp;amp;q=proj:fastjson2&#34;&gt;&lt;img src=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/badges/fastjson2.svg?sanitize=true&#34; alt=&#34;Fuzzing Status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://quality-gate.com/dashboard/branches/7816#overview&#34;&gt;&lt;img src=&#34;https://quality-gate.com/backend/api/timeline?branchName=master&amp;amp;projectName=alibaba_fastjson&#34; alt=&#34;QualityGate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Fastjson is a Java library that can be used to convert Java Objects into their JSON representation. It can also be used to convert a JSON string to an equivalent Java object. Fastjson can work with arbitrary Java objects including pre-existing objects that you do not have source-code of.&lt;/p&gt; &#xA;&lt;h3&gt;Fastjson Goals&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Provide the best performance on the server-side and android client&lt;/li&gt; &#xA; &lt;li&gt;Provide simple toJSONString() and parseObject() methods to convert Java objects to JSON and vice-versa&lt;/li&gt; &#xA; &lt;li&gt;Allow pre-existing unmodifiable objects to be converted to and from JSON&lt;/li&gt; &#xA; &lt;li&gt;Extensive support of Java Generics&lt;/li&gt; &#xA; &lt;li&gt;Allow custom representations for objects&lt;/li&gt; &#xA; &lt;li&gt;Support arbitrarily complex objects (with deep inheritance hierarchies and extensive use of generic types)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alibaba/fastjson/master/logo.jpg&#34; alt=&#34;fastjson&#34; title=&#34;fastjson&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alibaba/fastjson/wiki&#34;&gt;Documentation Home&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nschaffner/fastjson/raw/master/CONTRIBUTING.md&#34;&gt;Contributing Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alibaba/fastjson/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98&#34;&gt;Frequently Asked Questions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Benchmark&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/eishay/jvm-serializers/wiki&#34;&gt;https://github.com/eishay/jvm-serializers/wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://repo1.maven.org/maven2/com/alibaba/fastjson/&#34;&gt;maven&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://search.maven.org/remote_content?g=com.alibaba&amp;amp;a=fastjson&amp;amp;v=LATEST&#34;&gt;the latest JAR&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Maven&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;fastjson&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;1.2.76&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;fastjson&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;1.1.72.android&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Gradle via JCenter&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;compile &#39;com.alibaba:fastjson:1.2.76&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;compile &#39;com.alibaba:fastjson:1.1.72.android&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please see this &lt;a href=&#34;https://github.com/alibaba/fastjson/wiki#download&#34;&gt;Wiki Download Page&lt;/a&gt; for more repository info.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;em&gt;License&lt;/em&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Fastjson is released under the &lt;a href=&#34;https://raw.githubusercontent.com/alibaba/fastjson/master/license.txt&#34;&gt;Apache 2.0 license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 1999-2020 Alibaba Group Holding Ltd.&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at the following link.&#xA;&#xA;     http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>dromara/Sa-Token</title>
    <updated>2022-06-01T02:01:04Z</updated>
    <id>tag:github.com,2022-06-01:/dromara/Sa-Token</id>
    <link href="https://github.com/dromara/Sa-Token" rel="alternate"></link>
    <summary type="html">&lt;p&gt;这可能是史上功能最全的Java权限认证框架！目前已集成——登录认证、权限认证、分布式Session会话、微服务网关鉴权、单点登录、OAuth2.0、踢人下线、Redis集成、前后台分离、记住我模式、模拟他人账号、临时身份切换、账号封禁、多账号认证体系、注解式鉴权、路由拦截式鉴权、花式token生成、自动续签、同端互斥登录、会话治理、密码加密、jwt集成、Spring集成、WebFlux集成...&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;logo&#34; src=&#34;https://sa-token.dev33.cn/doc/logo.png&#34; width=&#34;150&#34; height=&#34;150&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34; style=&#34;margin: 30px 0 30px; font-weight: bold;&#34;&gt;Sa-Token v1.30.0&lt;/h1&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt;一个轻量级 Java 权限认证框架，让鉴权变得简单、优雅！&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://gitee.com/dromara/sa-token/stargazers&#34;&gt;&lt;img src=&#34;https://gitee.com/dromara/sa-token/badge/star.svg?theme=gvp&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitee.com/dromara/sa-token/members&#34;&gt;&lt;img src=&#34;https://gitee.com/dromara/sa-token/badge/fork.svg?theme=gvp&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dromara/sa-token/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/dromara/sa-token?style=flat-square&amp;amp;logo=GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dromara/sa-token/network/members&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/dromara/sa-token?style=flat-square&amp;amp;logo=GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dromara/sa-token/watchers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/watchers/dromara/sa-token?style=flat-square&amp;amp;logo=GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dromara/sa-token/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/dromara/sa-token.svg?style=flat-square&amp;amp;logo=GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dromara/sa-token/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/dromara/sa-token.svg?style=flat-square&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;前言：&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://sa-token.dev33.cn/&#34;&gt;在线文档：http://sa-token.dev33.cn/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;注：学习测试请拉取 master 分支，dev 为正在开发的分支，有很多特性并不稳定。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;开源不易，点个 star 鼓励一下吧！&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sa-Token 介绍&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Sa-Token&lt;/strong&gt; 是一个轻量级 Java 权限认证框架，主要解决：&lt;strong&gt;&lt;code&gt;登录认证&lt;/code&gt;&lt;/strong&gt;、&lt;strong&gt;&lt;code&gt;权限认证&lt;/code&gt;&lt;/strong&gt;、&lt;strong&gt;&lt;code&gt;Session会话&lt;/code&gt;&lt;/strong&gt;、&lt;strong&gt;&lt;code&gt;单点登录&lt;/code&gt;&lt;/strong&gt;、&lt;strong&gt;&lt;code&gt;OAuth2.0&lt;/code&gt;&lt;/strong&gt;、&lt;strong&gt;&lt;code&gt;微服务网关鉴权&lt;/code&gt;&lt;/strong&gt; 等一系列权限相关问题。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;登录认证&lt;/strong&gt; —— 单端登录、多端登录、同端互斥登录、七天内免登录&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;权限认证&lt;/strong&gt; —— 权限认证、角色认证、会话二级认证&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Session会话&lt;/strong&gt; —— 全端共享Session、单端独享Session、自定义Session&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;踢人下线&lt;/strong&gt; —— 根据账号id踢人下线、根据Token值踢人下线&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;账号封禁&lt;/strong&gt; —— 指定天数封禁、永久封禁、设定解封时间&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;持久层扩展&lt;/strong&gt; —— 可集成Redis、Memcached等专业缓存中间件，重启数据不丢失&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;分布式会话&lt;/strong&gt; —— 提供jwt集成、共享数据中心两种分布式会话方案&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;微服务网关鉴权&lt;/strong&gt; —— 适配Gateway、ShenYu、Zuul等常见网关的路由拦截认证&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;单点登录&lt;/strong&gt; —— 内置三种单点登录模式：无论是否跨域、是否共享Redis，都可以搞定&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OAuth2.0认证&lt;/strong&gt; —— 基于RFC-6749标准编写，OAuth2.0标准流程的授权认证，支持openid模式&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;二级认证&lt;/strong&gt; —— 在已登录的基础上再次认证，保证安全性&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Basic认证&lt;/strong&gt; —— 一行代码接入 Http Basic 认证&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;独立Redis&lt;/strong&gt; —— 将权限缓存与业务缓存分离&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;临时Token验证&lt;/strong&gt; —— 解决短时间的Token授权问题&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;模拟他人账号&lt;/strong&gt; —— 实时操作任意用户状态数据&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;临时身份切换&lt;/strong&gt; —— 将会话身份临时切换为其它账号&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;前后台分离&lt;/strong&gt; —— APP、小程序等不支持Cookie的终端&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;同端互斥登录&lt;/strong&gt; —— 像QQ一样手机电脑同时在线，但是两个手机上互斥登录&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;多账号认证体系&lt;/strong&gt; —— 比如一个商城项目的user表和admin表分开鉴权&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;花式token生成&lt;/strong&gt; —— 内置六种Token风格，还可：自定义Token生成策略、自定义Token前缀&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;注解式鉴权&lt;/strong&gt; —— 优雅的将鉴权与业务代码分离&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;路由拦截式鉴权&lt;/strong&gt; —— 根据路由拦截鉴权，可适配restful模式&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;自动续签&lt;/strong&gt; —— 提供两种Token过期策略，灵活搭配使用，还可自动续签&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;会话治理&lt;/strong&gt; —— 提供方便灵活的会话查询接口&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;记住我模式&lt;/strong&gt; —— 适配[记住我]模式，重启浏览器免验证&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;密码加密&lt;/strong&gt; —— 提供密码加密模块，可快速MD5、SHA1、SHA256、AES、RSA加密&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;全局侦听器&lt;/strong&gt; —— 在用户登陆、注销、被踢下线等关键性操作时进行一些AOP操作&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;开箱即用&lt;/strong&gt; —— 提供SpringMVC、WebFlux等常见web框架starter集成包，真正的开箱即用&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;更多功能正在集成中...&lt;/strong&gt; —— 如有您有好想法或者建议，欢迎加群交流&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sa-Token-SSO 单点登录&lt;/h2&gt; &#xA;&lt;p&gt;Sa-Token-SSO 由简入难划分为三种模式，解决不同架构下的 SSO 接入问题：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;系统架构&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;采用模式&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;简介&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;文档链接&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;前端同域 + 后端同 Redis&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;模式一&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;共享Cookie同步会话&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://sa-token.dev33.cn/doc/index.html#/sso/sso-type1&#34;&gt;文档&lt;/a&gt;、&lt;a href=&#34;https://gitee.com/dromara/sa-token/blob/master/sa-token-demo/sa-token-demo-sso1-client&#34;&gt;示例&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;前端不同域 + 后端同 Redis&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;模式二&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;URL重定向传播会话&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://sa-token.dev33.cn/doc/index.html#/sso/sso-type2&#34;&gt;文档&lt;/a&gt;、&lt;a href=&#34;https://gitee.com/dromara/sa-token/blob/master/sa-token-demo/sa-token-demo-sso2-client&#34;&gt;示例&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;前端不同域 + 后端 不同Redis&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;模式三&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Http请求获取会话&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://sa-token.dev33.cn/doc/index.html#/sso/sso-type3&#34;&gt;文档&lt;/a&gt;、&lt;a href=&#34;https://gitee.com/dromara/sa-token/blob/master/sa-token-demo/sa-token-demo-sso3-client&#34;&gt;示例&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;前端同域：就是指多个系统可以部署在同一个主域名之下，比如：&lt;code&gt;c1.domain.com&lt;/code&gt;、&lt;code&gt;c2.domain.com&lt;/code&gt;、&lt;code&gt;c3.domain.com&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;后端同Redis：就是指多个系统可以连接同一个Redis。PS：这里并不需要把所有项目的数据都放在同一个Redis中，Sa-Token提供了 &lt;strong&gt;&lt;code&gt;[权限缓存与业务缓存分离]&lt;/code&gt;&lt;/strong&gt; 的解决方案，详情戳：&lt;a href=&#34;http://sa-token.dev33.cn/doc/index.html#/plugin/alone-redis&#34;&gt;Alone独立Redis插件&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;如果既无法做到前端同域，也无法做到后端同Redis，那么只能走模式三，Http请求获取会话（Sa-Token对SSO提供了完整的封装，你只需要按照示例从文档上复制几段代码便可以轻松集成）&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Sa-Token-OAuth2.0 授权登录&lt;/h2&gt; &#xA;&lt;p&gt;Sa-OAuth2 模块基于 &lt;a href=&#34;https://tools.ietf.org/html/rfc6749&#34;&gt;RFC-6749 标准&lt;/a&gt; 编写，通过Sa-OAuth2你可以非常轻松的实现系统的OAuth2.0授权认证&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;授权模式&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;简介&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;授权码（Authorization Code）&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;OAuth2.0 标准授权步骤，Server 端向 Client 端下放 Code 码，Client 端再用 Code 码换取授权 Token&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;隐藏式（Implicit）&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;无法使用授权码模式时的备用选择，Server 端使用 URL 重定向方式直接将 Token 下放到 Client 端页面&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;密码式（Password）&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Client直接拿着用户的账号密码换取授权 Token&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;客户端凭证（Client Credentials）&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Server 端针对 Client 级别的 Token，代表应用自身的资源授权&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;详细参考文档：&lt;a href=&#34;http://sa-token.dev33.cn/doc/index.html#/oauth2/readme&#34;&gt;http://sa-token.dev33.cn/doc/index.html#/oauth2/readme&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sa-Token 功能结构图&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://color-test.oss-cn-qingdao.aliyuncs.com/sa-token/x/sa-token-js4.png&#34; alt=&#34;sa-token-js&#34; title=&#34;s-w&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://color-test.oss-cn-qingdao.aliyuncs.com/sa-token/x/sa-token-rz2.png&#34; alt=&#34;sa-token-rz&#34; title=&#34;s-w&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;使用Sa-Token的开源项目&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://gitee.com/click33/sa-plus&#34;&gt;[ sa-plus ]&lt;/a&gt;：一个基于 SpringBoot 架构的快速开发框架，内置代码生成器&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://gitee.com/wtsoftware/jthink&#34;&gt;[ jthink ]&lt;/a&gt;： 一个基于 SpringBoot + Sa-Token + Thymeleaf 的博客系统&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://gitee.com/dcy421/dcy-fast&#34;&gt;[ dcy-fast ]&lt;/a&gt;： 一个基于 SpringBoot + Sa-Token + Mybatis-Plus 的后台管理系统，前端vue-element-admin，并且内置代码生成器&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://gitee.com/uncarbon97/helio-starters&#34;&gt;[ helio-starters ]&lt;/a&gt;： 单体 Boot 版脚手架 + 微服务 Cloud 版脚手架，带有配套后台管理前端模板及代码生成器&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://gitee.com/bootx/sa-token-plugin&#34;&gt;[ sa-token-plugin ]&lt;/a&gt;：Sa-Token第三方插件实现，基于Sa-Token-Core，提供一些与官方不同实现机制的的插件集合，作为Sa-Token开源生态的补充&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://gitee.com/lakernote/easy-admin&#34;&gt;[ easy-admin ]&lt;/a&gt;：一个基于SpringBoot2 + Sa-Token + Mybatis-Plus + Snakerflow + Layui 的后台管理系统，灵活多变可前后端分离，也可单体，内置代码生成器、权限管理、工作流引擎等&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://gitee.com/JavaLionLi/RuoYi-Vue-Plus&#34;&gt;[ RuoYi-Vue-Plus ]&lt;/a&gt;：重写RuoYi-Vue所有功能 集成 Sa-Token+Mybatis-Plus+Jackson+Xxl-Job+knife4j+Hutool+OSS 定期同步&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://gitee.com/JavaLionLi/RuoYi-Cloud-Plus&#34;&gt;[ RuoYi-Cloud-Plus ]&lt;/a&gt;：重写RuoYi-Cloud所有功能 整合 SpringCloudAlibaba Dubbo3.0 Sa-Token Mybatis-Plus MQ OSS ES Xxl-Job Docker 全方位升级 定期同步&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://gitee.com/falser/falser-cloud&#34;&gt;[ falser-cloud ]&lt;/a&gt;: 基于 SpringCloud Alibaba + SpringCloud gateway + SpringBoot + Sa-Token + vue-admin-template + Nacos + Rabbit MQ + Redis 的一个后台管理系统，前后端分离，权限管理，菜单管理，数据字典，停车场系统管理等功能&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://gitee.com/bootx/bootx-platform&#34;&gt;[ bootx-platform ]&lt;/a&gt;：集成sa-token和sa-token-plugin并深度定制认证模块，包含多级别数据范围权限、数据自动加解密、数据脱敏、超级查询器、以及支付收单、消息通知等准商用功能的开源免费开发脚手架项目&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Project-QForum/QForum-Core/&#34;&gt;[ QForum-Core ]&lt;/a&gt;：QForum 论坛系统官方核心，可拓展性强、轻量级、高性能、前后端分离，基于 SpringBoot2 + Sa-Token + Mybatis-Plus&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://gitee.com/ExciteTeam/ExciteCMS-SpringBoot-Layui&#34;&gt;[ ExciteCMS-Layui ]&lt;/a&gt;：ExciteCMS 快速开发脚手架：一款后端基于 SpringBoot2 + Sa-Token + Mybatis-Plus，前端基于 Layuimini 的内容管理系统，具备RBAC、日志管理、代码生成等功能，并集成常用的支付、OSS等第三方服务，拥有详细的开发文档&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://gitee.com/quequnlong/shiyi-blog&#34;&gt;[ 拾壹博客 ]&lt;/a&gt;：一款vue+springboot前后端分离的博客系统，博客后台管理系统使用了vue+elmentui开发，后端使用Sa-Token进行权限管理,支持动态菜单权限，动态定时任务，文件支持本地和七牛云上传，使用ElasticSearch作为全文检索服务，支持QQ、微博、码云登录。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;如果您的项目使用了Sa-Token，欢迎提交pr&lt;/p&gt; &#xA;&lt;h2&gt;友情链接&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://gitee.com/ejlchina-zhxu/okhttps&#34;&gt;[ OkHttps ]&lt;/a&gt;：一个轻量级http通信框架，API设计无比优雅，支持 WebSocket 以及 Stomp 协议&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ejlchina/bean-searcher&#34;&gt;[ Bean Searcher ]&lt;/a&gt;：比 MyBatis 效率快 100 倍的条件检索引擎，天生支持联表，使一行代码实现复杂列表检索成为可能！&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://xiaonuo.vip/index#pricing&#34;&gt;[ 小诺快速开发平台 ]&lt;/a&gt;：基于SpringBoot2 + AntDesignVue全新快速开发平台，同时拥有三个版本&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://gitee.com/dromara/Jpom&#34;&gt;[ Jpom ]&lt;/a&gt;：简而轻的低侵入式在线构建、自动部署、日常运维、项目监控软件&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://gitee.com/dromara/TLog&#34;&gt;[ TLog ]&lt;/a&gt;：一个轻量级的分布式日志标记追踪神器&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;交流群&lt;/h2&gt; &#xA;&lt;p&gt;QQ交流群：496757342 &lt;a href=&#34;https://jq.qq.com/?_wv=1027&amp;amp;k=ceibbMFr&#34;&gt;点击加入&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;微信交流群：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://dev33-test.oss-cn-beijing.aliyuncs.com/sa-token/i-wx-qr.png&#34; alt=&#34;微信群&#34; title=&#34;:size=230&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;(扫码添加微信，备注：sa-token，邀您加入群聊)&lt;/p&gt; &#xA;&lt;br&gt;</summary>
  </entry>
  <entry>
    <title>zxing/zxing</title>
    <updated>2022-06-01T02:01:04Z</updated>
    <id>tag:github.com,2022-06-01:/zxing/zxing</id>
    <link href="https://github.com/zxing/zxing" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ZXing (&#34;Zebra Crossing&#34;) barcode scanning library for Java, Android&lt;/p&gt;&lt;hr&gt;&lt;img align=&#34;right&#34; src=&#34;https://raw.github.com/wiki/zxing/zxing/zxing-logo.png&#34;&gt; &#xA;&lt;h2&gt;Project in Maintenance Mode Only&lt;/h2&gt; &#xA;&lt;p&gt;The project is in maintenance mode, meaning, changes are driven by contributed patches. Only bug fixes and minor enhancements will be considered. The Barcode Scanner app can no longer be published, so it&#39;s unlikely any changes will be accepted for it. There is otherwise no active development or roadmap for this project. It is &#34;DIY&#34;.&lt;/p&gt; &#xA;&lt;h2&gt;Get Started Developing&lt;/h2&gt; &#xA;&lt;p&gt;To get started, please visit: &lt;a href=&#34;https://github.com/zxing/zxing/wiki/Getting-Started-Developing&#34;&gt;https://github.com/zxing/zxing/wiki/Getting-Started-Developing&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;ZXing (&#34;zebra crossing&#34;) is an open-source, multi-format 1D/2D barcode image processing library implemented in Java, with ports to other languages.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Formats&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;1D product&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;1D industrial&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;2D&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;UPC-A&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Code 39&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;QR Code&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;UPC-E&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Code 93&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Data Matrix&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;EAN-8&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Code 128&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Aztec&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;EAN-13&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Codabar&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;PDF 417&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;UPC/EAN Extension 2/5&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ITF&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;MaxiCode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;RSS-14&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;RSS-Expanded&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Components&lt;/h2&gt; &#xA;&lt;h3&gt;Active&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Module&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;core&lt;/td&gt; &#xA;   &lt;td&gt;The core image decoding library, and test code&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;javase&lt;/td&gt; &#xA;   &lt;td&gt;JavaSE-specific client code&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;android&lt;/td&gt; &#xA;   &lt;td&gt;Android client Barcode Scanner &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.google.zxing.client.android&#34;&gt;&lt;img height=&#34;62&#34; width=&#34;161&#34; src=&#34;https://play.google.com/intl/en_us/badges/images/generic/en_badge_web_generic.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;android-integration&lt;/td&gt; &#xA;   &lt;td&gt;Supports integration with Barcode Scanner via &lt;code&gt;Intent&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;android-core&lt;/td&gt; &#xA;   &lt;td&gt;Android-related code shared among &lt;code&gt;android&lt;/code&gt;, other Android apps&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;zxingorg&lt;/td&gt; &#xA;   &lt;td&gt;The source behind &lt;code&gt;zxing.org&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;zxing.appspot.com&lt;/td&gt; &#xA;   &lt;td&gt;The source behind web-based barcode generator at &lt;code&gt;zxing.appspot.com&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Available in previous releases&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Module&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/zxing/zxing/tree/00f634024ceeee591f54e6984ea7dd666fab22ae/cpp&#34;&gt;cpp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;C++ port&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/zxing/zxing/tree/00f634024ceeee591f54e6984ea7dd666fab22ae/iphone&#34;&gt;iphone&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iPhone client&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/zxing/zxing/tree/00f634024ceeee591f54e6984ea7dd666fab22ae/objc&#34;&gt;objc&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Objective C port&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/zxing/zxing/tree/c1df162b95e07928afbd4830798cc1408af1ac67/actionscript&#34;&gt;actionscript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Partial ActionScript port&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/zxing/zxing/tree/a95a8fee842f67fb43799a8e0e70e4c68b509c43/jruby&#34;&gt;jruby&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;JRuby wrapper&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;ZXing-based third-party open source projects&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Module&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/scytheStudio/SCodes&#34;&gt;SCodes&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Qt &amp;amp; Qml wrapper&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ftylitak/qzxing&#34;&gt;QZXing&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;port to Qt framework&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/glassechidna/zxing-cpp&#34;&gt;glassechidna/zxing-cpp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;port to C++ (forked from the &lt;a href=&#34;https://github.com/zxing/zxing/tree/00f634024ceeee591f54e6984ea7dd666fab22ae/cpp&#34;&gt;deprecated official C++ port&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nu-book/zxing-cpp&#34;&gt;nu-book/zxing-cpp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;latest/active port to C++, includes Android, Python, WASM and WinRT wrappers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/glassechidna/zxing_cpp.rb&#34;&gt;zxing_cpp.rb&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;bindings for Ruby (not just JRuby), powered by &lt;a href=&#34;https://github.com/glassechidna/zxing-cpp&#34;&gt;zxing-cpp&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/LazarSoft/jsqrcode&#34;&gt;jsqrcode&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;port to JavaScript&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/oostendo/python-zxing&#34;&gt;python-zxing&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;bindings for Python&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/micjahn/ZXing.Net&#34;&gt;ZXing .NET&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;port to .NET and C#, and related Windows platform&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/khanamiryan/php-qrcode-detector-decoder&#34;&gt;php-qrcode-detector-decoder&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;port to PHP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Spelt/ZXing.Delphi&#34;&gt;ZXing Delphi&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Port to native Delphi object pascal, targeted at Firemonkey compatible devices (IOS/Android/Win/OSX) and VCL.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/TheLevelUp/ZXingObjC&#34;&gt;ZXingObjC&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Port to Objective-C&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dsiddharth2/php-zxing&#34;&gt;php-zxing&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;PHP wrapper to Zxing Java library&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/zxing-js/library&#34;&gt;zxing-js/library&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;TypeScript port of ZXing library&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ChenjieXu/pyzxing&#34;&gt;pyzxing&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Python wrapper to ZXing library&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Other related third-party open source projects&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Module&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://barcode4j.sourceforge.net/&#34;&gt;Barcode4J&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Generator library in Java&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://boofcv.org&#34;&gt;BoofCV&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Generator and reader library in Java&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://zbar.sourceforge.net/&#34;&gt;ZBar&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Reader library in C99&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/woo-j/OkapiBarcode&#34;&gt;OkapiBarcode&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zxing.org/w/decode.jspx&#34;&gt;Online Decoder&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zxing.appspot.com/generator&#34;&gt;QR Code Generator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zxing.github.io/zxing/apidocs/&#34;&gt;Javadoc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zxing.github.io/zxing/&#34;&gt;Documentation Site&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contacting&lt;/h2&gt; &#xA;&lt;p&gt;Post to the &lt;a href=&#34;https://groups.google.com/group/zxing&#34;&gt;discussion forum&lt;/a&gt; or tag a question with &lt;a href=&#34;https://stackoverflow.com/questions/tagged/zxing&#34;&gt;&lt;code&gt;zxing&lt;/code&gt; on StackOverflow&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Etcetera&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://scan.coverity.com/projects/1924&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/1924/badge.svg?sanitize=true&#34; alt=&#34;Coverity Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/zxing/zxing?branch=master&#34;&gt;&lt;img src=&#34;https://codecov.io/github/zxing/zxing/coverage.svg?branch=master&#34; alt=&#34;codecov.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codacy.com/app/srowen/zxing?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=zxing/zxing&amp;amp;utm_campaign=Badge_Grade&#34;&gt;&lt;img src=&#34;https://api.codacy.com/project/badge/Grade/7270e4b57c50483699448bf32721ab10&#34; alt=&#34;Codacy Badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;QR code is trademarked by Denso Wave, inc. Thanks to Haase &amp;amp; Martin OHG for contributing the logo.&lt;/p&gt; &#xA;&lt;p&gt;Optimized with &lt;a href=&#34;https://www.ej-technologies.com/products/jprofiler/overview.html&#34;&gt;&lt;img src=&#34;https://www.ej-technologies.com/images/banners/jprofiler_small.png&#34; alt=&#34;JProfiler&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>GrowingGit/GitHub-Chinese-Top-Charts</title>
    <updated>2022-06-01T02:01:04Z</updated>
    <id>tag:github.com,2022-06-01:/GrowingGit/GitHub-Chinese-Top-Charts</id>
    <link href="https://github.com/GrowingGit/GitHub-Chinese-Top-Charts" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🇨🇳 GitHub中文排行榜，各语言分设「软件 | 资料」榜单，精准定位中文好项目。各取所需，高效学习。&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;200&#34; src=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/media/repo_logo.svg?sanitize=true&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;GitHub中文排行榜&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA;  「帮助你发现优秀中文项目，可以无语言障碍地、更高效地吸收优秀经验成果」 &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;sub&gt;↓ -- 项目说明 -- ↓&lt;/sub&gt;&lt;/p&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/docs/features.md&#34;&gt;特色亮点&lt;/a&gt; • &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/docs/definition_of_Chinese_repo.md&#34;&gt;中文定义&lt;/a&gt; • &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/docs/inclusion_rules.md&#34;&gt;收录规则&lt;/a&gt; • &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/docs/milestone.md&#34;&gt;重要更新&lt;/a&gt; • &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/docs/feedback.md&#34;&gt;问题反馈&lt;/a&gt; • &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/LICENSE.md&#34;&gt;许可协议&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;sub&gt;↓ -- 进阶之路 -- ↓&lt;/sub&gt;&lt;/p&gt; 中文项目已通关？通往更广阔世界的路：&#xA; &lt;a href=&#34;https://github.com/kon9chunkit/GitHub-English-Top-Charts&#34;&gt;GitHub英文排行榜&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;sub&gt;↓ -- 内容目录 -- ↓&lt;/sub&gt;&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;tbody&gt;&#xA;   &lt;tr&gt; &#xA;    &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt;中文总榜&lt;/td&gt; &#xA;    &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt;中文增速榜&lt;/td&gt; &#xA;    &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt;中文新秀榜&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;软件类&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;资料类&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;软件类&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;资料类&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;软件类&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;资料类&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/software/All-Language.md&#34;&gt;All Language&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/knowledge/All-Language.md&#34;&gt;All Language&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/software/All-Language.md&#34;&gt;All Language&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/knowledge/All-Language.md&#34;&gt;All Language&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/software/All-Language.md&#34;&gt;All Language&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/knowledge/All-Language.md&#34;&gt;All Language&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/software/JavaScript.md&#34;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/knowledge/JavaScript.md&#34;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/software/JavaScript.md&#34;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/knowledge/JavaScript.md&#34;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/software/JavaScript.md&#34;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/knowledge/JavaScript.md&#34;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/software/Java.md&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/knowledge/Java.md&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/software/Java.md&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/knowledge/Java.md&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/software/Java.md&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/knowledge/Java.md&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/software/Python.md&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/knowledge/Python.md&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/software/Python.md&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/knowledge/Python.md&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/software/Python.md&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/knowledge/Python.md&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/software/Go.md&#34;&gt;Go&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/knowledge/Go.md&#34;&gt;Go&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/software/Go.md&#34;&gt;Go&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/knowledge/Go.md&#34;&gt;Go&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/software/Go.md&#34;&gt;Go&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/knowledge/Go.md&#34;&gt;Go&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/software/TypeScript.md&#34;&gt;TypeScript&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/knowledge/TypeScript.md&#34;&gt;TypeScript&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/software/TypeScript.md&#34;&gt;TypeScript&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/knowledge/TypeScript.md&#34;&gt;TypeScript&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/software/TypeScript.md&#34;&gt;TypeScript&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/knowledge/TypeScript.md&#34;&gt;TypeScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/software/Vue.md&#34;&gt;Vue&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/knowledge/Vue.md&#34;&gt;Vue&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/software/Vue.md&#34;&gt;Vue&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/knowledge/Vue.md&#34;&gt;Vue&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/software/Vue.md&#34;&gt;Vue&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/knowledge/Vue.md&#34;&gt;Vue&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/software/CPP.md&#34;&gt;C++&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/knowledge/CPP.md&#34;&gt;C++&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/software/CPP.md&#34;&gt;C++&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/knowledge/CPP.md&#34;&gt;C++&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/software/CPP.md&#34;&gt;C++&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/knowledge/CPP.md&#34;&gt;C++&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/software/C.md&#34;&gt;C&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/knowledge/C.md&#34;&gt;C&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/software/C.md&#34;&gt;C&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/knowledge/C.md&#34;&gt;C&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/software/C.md&#34;&gt;C&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/knowledge/C.md&#34;&gt;C&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/software/CSHARP.md&#34;&gt;C#&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/knowledge/CSHARP.md&#34;&gt;C#&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/software/CSHARP.md&#34;&gt;C#&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/knowledge/CSHARP.md&#34;&gt;C#&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/software/CSHARP.md&#34;&gt;C#&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/knowledge/CSHARP.md&#34;&gt;C#&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/software/PHP.md&#34;&gt;PHP&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/knowledge/PHP.md&#34;&gt;PHP&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/software/PHP.md&#34;&gt;PHP&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/knowledge/PHP.md&#34;&gt;PHP&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/software/PHP.md&#34;&gt;PHP&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/knowledge/PHP.md&#34;&gt;PHP&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/software/HTML.md&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/knowledge/HTML.md&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/software/HTML.md&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/knowledge/HTML.md&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/software/HTML.md&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/knowledge/HTML.md&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/software/Swift.md&#34;&gt;Swift&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/knowledge/Swift.md&#34;&gt;Swift&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/software/Swift.md&#34;&gt;Swift&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/knowledge/Swift.md&#34;&gt;Swift&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/software/Swift.md&#34;&gt;Swift&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/knowledge/Swift.md&#34;&gt;Swift&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/software/Kotlin.md&#34;&gt;Kotlin&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/knowledge/Kotlin.md&#34;&gt;Kotlin&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/software/Kotlin.md&#34;&gt;Kotlin&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/knowledge/Kotlin.md&#34;&gt;Kotlin&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/software/Kotlin.md&#34;&gt;Kotlin&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/knowledge/Kotlin.md&#34;&gt;Kotlin&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/software/Objective-C.md&#34;&gt;Objective-C&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/knowledge/Objective-C.md&#34;&gt;Objective-C&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/software/Objective-C.md&#34;&gt;Objective-C&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/knowledge/Objective-C.md&#34;&gt;Objective-C&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/software/Objective-C.md&#34;&gt;Objective-C&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/knowledge/Objective-C.md&#34;&gt;Objective-C&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/software/CSS.md&#34;&gt;CSS&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/knowledge/CSS.md&#34;&gt;CSS&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/software/CSS.md&#34;&gt;CSS&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/knowledge/CSS.md&#34;&gt;CSS&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/software/CSS.md&#34;&gt;CSS&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/knowledge/CSS.md&#34;&gt;CSS&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/software/Shell.md&#34;&gt;Shell&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/knowledge/Shell.md&#34;&gt;Shell&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/software/Shell.md&#34;&gt;Shell&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/knowledge/Shell.md&#34;&gt;Shell&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/software/Shell.md&#34;&gt;Shell&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/knowledge/Shell.md&#34;&gt;Shell&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/software/Dart.md&#34;&gt;Dart&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/knowledge/Dart.md&#34;&gt;Dart&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/software/Dart.md&#34;&gt;Dart&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/knowledge/Dart.md&#34;&gt;Dart&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/software/Dart.md&#34;&gt;Dart&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/knowledge/Dart.md&#34;&gt;Dart&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/software/Rust.md&#34;&gt;Rust&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/knowledge/Rust.md&#34;&gt;Rust&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/software/Rust.md&#34;&gt;Rust&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/knowledge/Rust.md&#34;&gt;Rust&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/software/Rust.md&#34;&gt;Rust&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/knowledge/Rust.md&#34;&gt;Rust&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/software/Jupyter-Notebook.md&#34;&gt;Jupyter Notebook&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/knowledge/Jupyter-Notebook.md&#34;&gt;Jupyter Notebook&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/software/Jupyter-Notebook.md&#34;&gt;Jupyter Notebook&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/knowledge/Jupyter-Notebook.md&#34;&gt;Jupyter Notebook&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/software/Jupyter-Notebook.md&#34;&gt;Jupyter Notebook&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/knowledge/Jupyter-Notebook.md&#34;&gt;Jupyter Notebook&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/software/Assembly.md&#34;&gt;Assembly&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/knowledge/Assembly.md&#34;&gt;Assembly&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/software/Assembly.md&#34;&gt;Assembly&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/knowledge/Assembly.md&#34;&gt;Assembly&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/software/Assembly.md&#34;&gt;Assembly&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/knowledge/Assembly.md&#34;&gt;Assembly&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/software/Vim-script.md&#34;&gt;Vim script&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/knowledge/Vim-script.md&#34;&gt;Vim script&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/software/Vim-script.md&#34;&gt;Vim script&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/knowledge/Vim-script.md&#34;&gt;Vim script&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/software/Vim-script.md&#34;&gt;Vim script&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/knowledge/Vim-script.md&#34;&gt;Vim script&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/software/Ruby.md&#34;&gt;Ruby&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/knowledge/Ruby.md&#34;&gt;Ruby&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/software/Ruby.md&#34;&gt;Ruby&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/knowledge/Ruby.md&#34;&gt;Ruby&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/software/Ruby.md&#34;&gt;Ruby&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/knowledge/Ruby.md&#34;&gt;Ruby&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/software/Lua.md&#34;&gt;Lua&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/knowledge/Lua.md&#34;&gt;Lua&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/software/Lua.md&#34;&gt;Lua&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/knowledge/Lua.md&#34;&gt;Lua&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/software/Lua.md&#34;&gt;Lua&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/knowledge/Lua.md&#34;&gt;Lua&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/software/TeX.md&#34;&gt;TeX&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/knowledge/TeX.md&#34;&gt;TeX&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/software/TeX.md&#34;&gt;TeX&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/knowledge/TeX.md&#34;&gt;TeX&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/software/TeX.md&#34;&gt;TeX&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/knowledge/TeX.md&#34;&gt;TeX&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/software/Groovy.md&#34;&gt;Groovy&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/knowledge/Groovy.md&#34;&gt;Groovy&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/software/Groovy.md&#34;&gt;Groovy&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/knowledge/Groovy.md&#34;&gt;Groovy&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/software/Groovy.md&#34;&gt;Groovy&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/knowledge/Groovy.md&#34;&gt;Groovy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/software/Perl.md&#34;&gt;Perl&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/knowledge/Perl.md&#34;&gt;Perl&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/software/Perl.md&#34;&gt;Perl&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/knowledge/Perl.md&#34;&gt;Perl&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/software/Perl.md&#34;&gt;Perl&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/knowledge/Perl.md&#34;&gt;Perl&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/software/MATLAB.md&#34;&gt;MATLAB&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/knowledge/MATLAB.md&#34;&gt;MATLAB&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/software/MATLAB.md&#34;&gt;MATLAB&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/knowledge/MATLAB.md&#34;&gt;MATLAB&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/software/MATLAB.md&#34;&gt;MATLAB&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/knowledge/MATLAB.md&#34;&gt;MATLAB&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/software/Pascal.md&#34;&gt;Pascal&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/knowledge/Pascal.md&#34;&gt;Pascal&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/software/Pascal.md&#34;&gt;Pascal&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/knowledge/Pascal.md&#34;&gt;Pascal&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/software/Pascal.md&#34;&gt;Pascal&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/knowledge/Pascal.md&#34;&gt;Pascal&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/software/R.md&#34;&gt;R&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/overall/knowledge/R.md&#34;&gt;R&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/software/R.md&#34;&gt;R&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/growth/knowledge/R.md&#34;&gt;R&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/software/R.md&#34;&gt;R&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GrowingGit/GitHub-Chinese-Top-Charts/master/content/charts/new_repo/knowledge/R.md&#34;&gt;R&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt;&#xA; &lt;/table&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;sub&gt;↓ -- 感谢读者 -- ↓&lt;/sub&gt;&lt;/p&gt; 榜单持续更新，如有帮助请加星收藏，方便后续浏览，感谢你的支持！ &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>apache/dubbo</title>
    <updated>2022-06-01T02:01:04Z</updated>
    <id>tag:github.com,2022-06-01:/apache/dubbo</id>
    <link href="https://github.com/apache/dubbo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Apache Dubbo is a high-performance, java based, open source RPC framework.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Apache Dubbo Project&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apache/dubbo/actions/workflows/build-and-test-3.yml?query=branch%3A3.0&#34;&gt;&lt;img src=&#34;https://github.com/apache/dubbo/workflows/Build%20and%20Test%20For%20Dubbo%203/badge.svg?branch=3.0&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/apache/dubbo&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/apache/dubbo/branch/3.0/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/maven-central/v/org.apache.dubbo/dubbo.svg?sanitize=true&#34; alt=&#34;Maven&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/alibaba/dubbo.svg?sanitize=true&#34; alt=&#34;License&#34;&gt; &lt;a href=&#34;http://isitmaintained.com/project/apache/dubbo&#34; title=&#34;Average time to resolve an issue&#34;&gt;&lt;img src=&#34;http://isitmaintained.com/badge/resolution/apache/dubbo.svg?sanitize=true&#34; alt=&#34;Average time to resolve an issue&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://isitmaintained.com/project/apache/dubbo&#34; title=&#34;Percentage of issues still open&#34;&gt;&lt;img src=&#34;http://isitmaintained.com/badge/open/apache/dubbo.svg?sanitize=true&#34; alt=&#34;Percentage of issues still open&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/tweet?text=Apache%20Dubbo%20is%20a%20high-performance%2C%20java%20based%2C%20open%20source%20RPC%20framework.&amp;amp;url=http://dubbo.apache.org/&amp;amp;via=ApacheDubbo&amp;amp;hashtags=rpc,java,dubbo,micro-service&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url/http/shields.io.svg?style=social&#34; alt=&#34;Tweet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=ApacheDubbo&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/ApacheDubbo.svg?label=Follow&amp;amp;style=social&amp;amp;logoWidth=0&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/alibaba/dubbo?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/alibaba/dubbo.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Apache Dubbo is a high-performance, Java-based open-source RPC framework. Please visit the &lt;a href=&#34;http://dubbo.apache.org&#34;&gt;official site&lt;/a&gt; for the quick start guide and documentation, as well as the &lt;a href=&#34;https://github.com/apache/dubbo/wiki&#34;&gt;wiki&lt;/a&gt; for news, FAQ, and release notes.&lt;/p&gt; &#xA;&lt;p&gt;We are now collecting Dubbo user info to help us to improve Dubbo further. Kindly support us by providing your usage information on &lt;a href=&#34;https://github.com/apache/dubbo/issues/9436&#34;&gt;issue#9436: Wanted: who&#39;s using dubbo&lt;/a&gt;, thanks :)&lt;/p&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://dubbo.apache.org/imgs/architecture.png&#34; alt=&#34;Architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Transparent interface based RPC&lt;/li&gt; &#xA; &lt;li&gt;Intelligent load balancing&lt;/li&gt; &#xA; &lt;li&gt;Automatic service registration and discovery&lt;/li&gt; &#xA; &lt;li&gt;High extensibility&lt;/li&gt; &#xA; &lt;li&gt;Runtime traffic routing&lt;/li&gt; &#xA; &lt;li&gt;Visualized service governance&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;The following code snippet comes from &lt;a href=&#34;https://github.com/apache/dubbo-samples/tree/master/dubbo-samples-api&#34;&gt;Dubbo Samples&lt;/a&gt;. You may clone the sample project and step into the &lt;code&gt;dubbo-samples-api&lt;/code&gt; subdirectory before proceeding.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# git clone https://github.com/apache/dubbo-samples.git&#xA;# cd dubbo-samples/dubbo-samples-api&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There&#39;s a &lt;a href=&#34;https://github.com/apache/dubbo-samples/tree/master/dubbo-samples-api/README.md&#34;&gt;README&lt;/a&gt; file under &lt;code&gt;dubbo-samples-api&lt;/code&gt; directory. We recommend referencing the samples in that directory by following the below-mentioned instructions:&lt;/p&gt; &#xA;&lt;h3&gt;Maven dependency&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;properties&amp;gt;&#xA;    &amp;lt;dubbo.version&amp;gt;3.0.8&amp;lt;/dubbo.version&amp;gt;&#xA;&amp;lt;/properties&amp;gt;&#xA;&#xA;&amp;lt;dependencies&amp;gt;&#xA;    &amp;lt;dependency&amp;gt;&#xA;        &amp;lt;groupId&amp;gt;org.apache.dubbo&amp;lt;/groupId&amp;gt;&#xA;        &amp;lt;artifactId&amp;gt;dubbo&amp;lt;/artifactId&amp;gt;&#xA;        &amp;lt;version&amp;gt;${dubbo.version}&amp;lt;/version&amp;gt;&#xA;    &amp;lt;/dependency&amp;gt;&#xA;    &amp;lt;dependency&amp;gt;&#xA;        &amp;lt;groupId&amp;gt;org.apache.dubbo&amp;lt;/groupId&amp;gt;&#xA;        &amp;lt;artifactId&amp;gt;dubbo-dependencies-zookeeper&amp;lt;/artifactId&amp;gt;&#xA;        &amp;lt;version&amp;gt;${dubbo.version}&amp;lt;/version&amp;gt;&#xA;        &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;&#xA;    &amp;lt;/dependency&amp;gt;&#xA;&amp;lt;/dependencies&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Define service interfaces&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package org.apache.dubbo.samples.api;&#xA;&#xA;public interface GreetingsService {&#xA;    String sayHi(String name);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;See &lt;a href=&#34;https://github.com/apache/dubbo-samples/raw/master/dubbo-samples-api/src/main/java/org/apache/dubbo/samples/api/GreetingsService.java&#34;&gt;api/GreetingsService.java&lt;/a&gt; on GitHub.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Implement service interface for the provider&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package org.apache.dubbo.samples.provider;&#xA;&#xA;import org.apache.dubbo.samples.api.GreetingsService;&#xA;&#xA;public class GreetingsServiceImpl implements GreetingsService {&#xA;    @Override&#xA;    public String sayHi(String name) {&#xA;        return &#34;hi, &#34; + name;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;See &lt;a href=&#34;https://github.com/apache/dubbo-samples/raw/master/dubbo-samples-api/src/main/java/org/apache/dubbo/samples/provider/GreetingsServiceImpl.java&#34;&gt;provider/GreetingsServiceImpl.java&lt;/a&gt; on GitHub.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Start service provider&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package org.apache.dubbo.samples.provider;&#xA;&#xA;&#xA;import org.apache.dubbo.config.ApplicationConfig;&#xA;import org.apache.dubbo.config.RegistryConfig;&#xA;import org.apache.dubbo.config.ServiceConfig;&#xA;import org.apache.dubbo.samples.api.GreetingsService;&#xA;&#xA;import java.util.concurrent.CountDownLatch;&#xA;&#xA;public class Application {&#xA;    private static String zookeeperHost = System.getProperty(&#34;zookeeper.address&#34;, &#34;127.0.0.1&#34;);&#xA;&#xA;    public static void main(String[] args) throws Exception {&#xA;        ServiceConfig&amp;lt;GreetingsService&amp;gt; service = new ServiceConfig&amp;lt;&amp;gt;();&#xA;        service.setApplication(new ApplicationConfig(&#34;first-dubbo-provider&#34;));&#xA;        service.setRegistry(new RegistryConfig(&#34;zookeeper://&#34; + zookeeperHost + &#34;:2181&#34;));&#xA;        service.setInterface(GreetingsService.class);&#xA;        service.setRef(new GreetingsServiceImpl());&#xA;        service.export();&#xA;&#xA;        System.out.println(&#34;dubbo service started&#34;);&#xA;        new CountDownLatch(1).await();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;See &lt;a href=&#34;https://github.com/apache/dubbo-samples/raw/master/dubbo-samples-api/src/main/java/org/apache/dubbo/samples/provider/Application.java&#34;&gt;provider/Application.java&lt;/a&gt; on GitHub.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Build and run the provider&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# mvn clean package&#xA;# mvn -Djava.net.preferIPv4Stack=true -Dexec.mainClass=org.apache.dubbo.samples.provider.Application exec:java&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Call remote service in the consumer&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package org.apache.dubbo.samples.client;&#xA;&#xA;&#xA;import org.apache.dubbo.config.ApplicationConfig;&#xA;import org.apache.dubbo.config.ReferenceConfig;&#xA;import org.apache.dubbo.config.RegistryConfig;&#xA;import org.apache.dubbo.samples.api.GreetingsService;&#xA;&#xA;public class Application {&#xA;    private static String zookeeperHost = System.getProperty(&#34;zookeeper.address&#34;, &#34;127.0.0.1&#34;);&#xA;&#xA;    public static void main(String[] args) {&#xA;        ReferenceConfig&amp;lt;GreetingsService&amp;gt; reference = new ReferenceConfig&amp;lt;&amp;gt;();&#xA;        reference.setApplication(new ApplicationConfig(&#34;first-dubbo-consumer&#34;));&#xA;        reference.setRegistry(new RegistryConfig(&#34;zookeeper://&#34; + zookeeperHost + &#34;:2181&#34;));&#xA;        reference.setInterface(GreetingsService.class);&#xA;        GreetingsService service = reference.get();&#xA;        String message = service.sayHi(&#34;dubbo&#34;);&#xA;        System.out.println(message);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;See &lt;a href=&#34;https://github.com/apache/dubbo-samples/raw/master/dubbo-samples-api/src/main/java/org/apache/dubbo/samples/client/Application.java&#34;&gt;consumer/Application.java&lt;/a&gt; on GitHub.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Build and run the consumer&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# mvn clean package&#xA;# mvn -Djava.net.preferIPv4Stack=true -Dexec.mainClass=org.apache.dubbo.samples.client.Application exec:java&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The consumer will print out &lt;code&gt;hi, dubbo&lt;/code&gt; on the screen.&lt;/p&gt; &#xA;&lt;h3&gt;Next steps&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dubbo.apache.org/blog/2018/08/07/dubbo-101/&#34;&gt;Your first Dubbo application&lt;/a&gt; - A 101 tutorial to reveal more details, with the same code above.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dubbo.apache.org/docs/v2.7/user/preface/background/&#34;&gt;Dubbo user manual&lt;/a&gt; - How to use Dubbo and all its features.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dubbo.apache.org/docs/v2.7/dev/build/&#34;&gt;Dubbo developer guide&lt;/a&gt; - How to involve in Dubbo development.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dubbo.apache.org/docs/v2.7/admin/install/provider-demo/&#34;&gt;Dubbo admin manual&lt;/a&gt; - How to admin and manage Dubbo services.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;If you want to try out the cutting-edge features, you can build with the following commands. (Java 1.8 is needed to build the master branch)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  mvn clean install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Mailing list:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;dev list: for dev/user discussion. &lt;a href=&#34;mailto:dev-subscribe@dubbo.apache.org&#34;&gt;subscribe&lt;/a&gt;, &lt;a href=&#34;mailto:dev-unsubscribe@dubbo.apache.org&#34;&gt;unsubscribe&lt;/a&gt;, &lt;a href=&#34;https://lists.apache.org/list.html?dev@dubbo.apache.org&#34;&gt;archive&lt;/a&gt;, &lt;a href=&#34;https://github.com/apache/dubbo/wiki/Mailing-list-subscription-guide&#34;&gt;guide&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Bugs: &lt;a href=&#34;https://github.com/apache/dubbo/issues/new?template=dubbo-issue-report-template.md&#34;&gt;Issues&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Gitter: &lt;a href=&#34;https://gitter.im/alibaba/dubbo&#34;&gt;Gitter channel&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Twitter: &lt;a href=&#34;https://twitter.com/ApacheDubbo&#34;&gt;@ApacheDubbo&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See&amp;nbsp;&lt;a href=&#34;https://github.com/apache/dubbo/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;&amp;nbsp;for details on submitting patches and the contribution workflow.&lt;/p&gt; &#xA;&lt;h3&gt;How can I contribute?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Take a look at issues with tags marked &lt;a href=&#34;https://github.com/apache/dubbo/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22&#34;&gt;&lt;code&gt;Good first issue&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://github.com/apache/dubbo/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22&#34;&gt;&lt;code&gt;Help wanted&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Join the discussion on the mailing list, subscription &lt;a href=&#34;https://github.com/apache/dubbo/wiki/Mailing-list-subscription-guide&#34;&gt;guide&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Answer questions on &lt;a href=&#34;https://github.com/apache/dubbo/issues&#34;&gt;issues&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Fix bugs reported on &lt;a href=&#34;https://github.com/apache/dubbo/issues&#34;&gt;issues&lt;/a&gt;, and send us a pull request.&lt;/li&gt; &#xA; &lt;li&gt;Review the existing &lt;a href=&#34;https://github.com/apache/dubbo/pulls&#34;&gt;pull request&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Improve the &lt;a href=&#34;https://github.com/apache/dubbo-website&#34;&gt;website&lt;/a&gt;, typically we need &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;blog post&lt;/li&gt; &#xA;   &lt;li&gt;translation on documentation&lt;/li&gt; &#xA;   &lt;li&gt;use cases around the integration of Dubbo in enterprise systems.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Improve the &lt;a href=&#34;https://github.com/apache/dubbo-admin&#34;&gt;dubbo-admin/dubbo-monitor&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Contribute to the projects listed in &lt;a href=&#34;https://github.com/dubbo&#34;&gt;ecosystem&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Other forms of contribution not explicitly enumerated above.&lt;/li&gt; &#xA; &lt;li&gt;If you would like to contribute, please send an email to &lt;a href=&#34;mailto:dev@dubbo.apache.org&#34;&gt;dev@dubbo.apache.org&lt;/a&gt; to let us know!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reporting bugs&lt;/h2&gt; &#xA;&lt;p&gt;Please follow the &lt;a href=&#34;https://github.com/apache/dubbo/issues/new?template=dubbo-issue-report-template.md&#34;&gt;template&lt;/a&gt;&amp;nbsp;for reporting any issues.&lt;/p&gt; &#xA;&lt;h2&gt;Reporting a security vulnerability&lt;/h2&gt; &#xA;&lt;p&gt;Please report security vulnerabilities to &lt;a href=&#34;mailto:security@dubbo.apache.org&#34;&gt;us&lt;/a&gt; privately.&lt;/p&gt; &#xA;&lt;h2&gt;Dubbo ecosystem&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apache?utf8=%E2%9C%93&amp;amp;q=dubbo&amp;amp;type=&amp;amp;language=&#34;&gt;Dubbo Ecosystem Entry&lt;/a&gt; - A GitHub group &lt;code&gt;dubbo&lt;/code&gt; to gather all Dubbo relevant projects not appropriate in &lt;a href=&#34;https://github.com/apache&#34;&gt;apache&lt;/a&gt; group yet&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apache/dubbo-website&#34;&gt;Dubbo Website&lt;/a&gt; - Apache Dubbo official website&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apache/dubbo-samples&#34;&gt;Dubbo Samples&lt;/a&gt; - samples for Apache Dubbo&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apache/dubbo-spring-boot-project&#34;&gt;Dubbo Spring Boot&lt;/a&gt; - Spring Boot Project for Dubbo&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apache/dubbo-admin&#34;&gt;Dubbo Admin&lt;/a&gt; - The reference implementation for Dubbo admin&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apache/dubbo-awesome&#34;&gt;Dubbo Awesome&lt;/a&gt; - Dubbo&#39;s slides and video links in Meetup&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Language&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dubbo/dubbo-go&#34;&gt;Go&lt;/a&gt; (recommended)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apache/dubbo-js&#34;&gt;Node.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dubbo/py-client-for-apache-dubbo&#34;&gt;Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apache/dubbo-php-framework&#34;&gt;PHP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apache/dubbo-erlang&#34;&gt;Erlang&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Apache Dubbo software is licenced under the Apache License Version 2.0. See the&amp;nbsp;&lt;a href=&#34;https://github.com/apache/dubbo/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt;&amp;nbsp;file for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hyb1996/Auto.js</title>
    <updated>2022-06-01T02:01:04Z</updated>
    <id>tag:github.com,2022-06-01:/hyb1996/Auto.js</id>
    <link href="https://github.com/hyb1996/Auto.js" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A UiAutomator on android, does not need root access(安卓平台上的JavaScript自动化工具)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Auto.js&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hyb1996/Auto.js/raw/master/Readme-cn.md&#34;&gt;中文Readme&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Important&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;The open source version of Auto.js is no longer maintained (see &lt;a href=&#34;https://g.pro.autojs.org/faq&#34;&gt;Auto.js Pro FAQ&lt;/a&gt; for the reason). Get &lt;a href=&#34;https://play.google.com/store/apps/details?id=org.autojs.autojspro&#34;&gt;Auto.js Pro&lt;/a&gt; to obtain latest updates. For more information, see &lt;a href=&#34;https://g.pro.autojs.org/docs&#34;&gt;Auto.js Pro Documentation&lt;/a&gt; and &lt;a href=&#34;https://g.pro.autojs.org/features&#34;&gt;Auto.js Pro Features&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Translated by Google Translation.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;A JavaScript IDE on the Android platform that supports accessibility services, and its development goals are JsBox and Workflow.&lt;/p&gt; &#xA;&lt;p&gt;And the &lt;a href=&#34;https://github.com/hyb1996/Auto.js-VSCode-Extension&#34;&gt;VS Code Extension&lt;/a&gt; which can provide basic functions for desktop development.&lt;/p&gt; &#xA;&lt;p&gt;Download:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=org.autojs.autojspro&#34;&gt;Google Play&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://www.coolapk.com/apk/org.autojs.autojspro&#34;&gt;Coolapk&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Documentation: &lt;a href=&#34;https://g.pro.autojs.org/docs&#34;&gt;https://g.pro.autojs.org/docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Easy-to-use automatic operation functions implemented by accessibility services&lt;/li&gt; &#xA; &lt;li&gt;Floating window recording and running&lt;/li&gt; &#xA; &lt;li&gt;More professional &amp;amp; powerful selector API, which provides searching, traversing, obtaining information, and operating the controls on the screen. Similar to Google’s UI testing framework UiAutomator, you can also use it as a mobile UI testing framework&lt;/li&gt; &#xA; &lt;li&gt;Use JavaScript as the scripting language, and support functions such as code completion, variable renaming, code formatting, search and replacement, and can be used as a JavaScript IDE&lt;/li&gt; &#xA; &lt;li&gt;Support the use of e4x to write the interface, and JavaScript can be packaged as an apk file, you can use it to develop small tool applications&lt;/li&gt; &#xA; &lt;li&gt;Support the use of Root permissions to provide more powerful screen click, slide, record functions and run shell commands. Recording can generate js files or binary files, and the playback of recording actions is relatively smooth&lt;/li&gt; &#xA; &lt;li&gt;Provides functions such as screen capture, screenshot saving, picture color finding, picture finding, etc.&lt;/li&gt; &#xA; &lt;li&gt;Can be used as a Tasker plug-in, combined with Tasker can be competent for daily workflow&lt;/li&gt; &#xA; &lt;li&gt;With interface analysis tools, similar to Android Studio&#39;s LayoutInspector, it can analyze the interface level and scope, and obtain control information on the interface&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This software is different from software such as button wizard, the main differences are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Auto.js mainly aims at automation and workflow. It is more convenient for daily work, such as automatically blocking notifications when starting the game, one-click and WeChat video of specific contacts (this problem has occurred on Zhihu, it is difficult for the elderly Perform complex operations and children’s WeChat video) etc.&lt;/li&gt; &#xA; &lt;li&gt;Auto.js has better compatibility. The coordinate-based button sprites and script sprites are prone to resolution problems, while the control-based Auto.js does not have this problem.&lt;/li&gt; &#xA; &lt;li&gt;Auto.js does not need root permissions to perform most tasks. Only related functions that require precise coordinates to click and slide require root privileges&lt;/li&gt; &#xA; &lt;li&gt;Auto.js can provide functions such as interface writing, not only exists as a scripting software&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Information&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Official forum: &lt;a href=&#34;http://www.autojs.org&#34;&gt;autojs.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Documentation: You can view the online documentation &lt;a href=&#34;https://hyb1996.github.io/AutoJs-Docs/&#34;&gt;here&lt;/a&gt;. The current documentation is still incomplete.&lt;/li&gt; &#xA; &lt;li&gt;Examples: You can view some examples &lt;a href=&#34;https://github.com/hyb1996/Auto.js/tree/master/app/src/main/assets/sample&#34;&gt;here&lt;/a&gt;, or view and run them directly in the app.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Screenshot&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hyb1996/NoRootScriptDroid/master/screen-captures/ss02.png&#34; alt=&#34;screen-capture2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hyb1996/NoRootScriptDroid/master/screen-captures/ss05.png&#34; alt=&#34;screen-capture5&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hyb1996/NoRootScriptDroid/master/screen-captures/ss07.png&#34; alt=&#34;screen-capture5&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hyb1996/NoRootScriptDroid/master/screen-captures/ss08.png&#34; alt=&#34;screen-capture5&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Based on &lt;a href=&#34;https://github.com/hyb1996/NoRootScriptDroid/raw/master/LICENSE.md&#34;&gt;Mozilla Public License Version 2.0&lt;/a&gt; with the following terms attached:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Non-commercial use&lt;/strong&gt;-The source code and binary products of this project and its derivative projects must not be used for any commercial and profitable purposes&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>spring-projects/spring-framework</title>
    <updated>2022-06-01T02:01:04Z</updated>
    <id>tag:github.com,2022-06-01:/spring-projects/spring-framework</id>
    <link href="https://github.com/spring-projects/spring-framework" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Spring Framework&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/spring-projects/spring-framework/main/src/docs/spring-framework.png&#34; width=&#34;80&#34; height=&#34;80&#34;&gt; Spring Framework &lt;a href=&#34;https://ci.spring.io/teams/spring-framework/pipelines/spring-framework-5.3.x?groups=Build%22&#34;&gt;&lt;img src=&#34;https://ci.spring.io/api/v1/teams/spring-framework/pipelines/spring-framework-5.3.x/jobs/build/badge&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ge.spring.io/scans?search.rootProjectNames=spring&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Revved%20up%20by-Gradle%20Enterprise-06A0CE?logo=Gradle&amp;amp;labelColor=02303A&#34; alt=&#34;Revved up by Gradle Enterprise&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;This is the home of the Spring Framework: the foundation for all &lt;a href=&#34;https://spring.io/projects&#34;&gt;Spring projects&lt;/a&gt;. Collectively the Spring Framework and the family of Spring projects are often referred to simply as &#34;Spring&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Spring provides everything required beyond the Java programming language for creating enterprise applications for a wide range of scenarios and architectures. Please read the &lt;a href=&#34;https://docs.spring.io/spring/docs/current/spring-framework-reference/overview.html#spring-introduction&#34;&gt;Overview&lt;/a&gt; section as reference for a more complete introduction.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project is governed by the &lt;a href=&#34;https://raw.githubusercontent.com/spring-projects/spring-framework/main/CODE_OF_CONDUCT.adoc&#34;&gt;Spring Code of Conduct&lt;/a&gt;. By participating, you are expected to uphold this code of conduct. Please report unacceptable behavior to &lt;a href=&#34;mailto:spring-code-of-conduct@pivotal.io&#34;&gt;spring-code-of-conduct@pivotal.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Access to Binaries&lt;/h2&gt; &#xA;&lt;p&gt;For access to artifacts or a distribution zip, see the &lt;a href=&#34;https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-Artifacts&#34;&gt;Spring Framework Artifacts&lt;/a&gt; wiki page.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The Spring Framework maintains reference documentation (&lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/&#34;&gt;published&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/spring-projects/spring-framework/main/src/docs/asciidoc&#34;&gt;source&lt;/a&gt;), Github &lt;a href=&#34;https://github.com/spring-projects/spring-framework/wiki&#34;&gt;wiki pages&lt;/a&gt;, and an &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/&#34;&gt;API reference&lt;/a&gt;. There are also &lt;a href=&#34;https://spring.io/guides&#34;&gt;guides and tutorials&lt;/a&gt; across Spring projects.&lt;/p&gt; &#xA;&lt;h2&gt;Micro-Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/spring-projects/spring-framework/wiki/Micro-Benchmarks&#34;&gt;Micro-Benchmarks&lt;/a&gt; Wiki page.&lt;/p&gt; &#xA;&lt;h2&gt;Build from Source&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/spring-projects/spring-framework/wiki/Build-from-Source&#34;&gt;Build from Source&lt;/a&gt; Wiki page and the &lt;a href=&#34;https://raw.githubusercontent.com/spring-projects/spring-framework/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Continuous Integration Builds&lt;/h2&gt; &#xA;&lt;p&gt;Information regarding CI builds can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/spring-projects/spring-framework/main/ci/README.adoc&#34;&gt;Spring Framework Concourse pipeline&lt;/a&gt; documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Stay in Touch&lt;/h2&gt; &#xA;&lt;p&gt;Follow &lt;a href=&#34;https://twitter.com/springcentral&#34;&gt;@SpringCentral&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/springframework&#34;&gt;@SpringFramework&lt;/a&gt;, and its &lt;a href=&#34;https://twitter.com/springframework/lists/team/members&#34;&gt;team members&lt;/a&gt; on Twitter. In-depth articles can be found at &lt;a href=&#34;https://spring.io/blog/&#34;&gt;The Spring Blog&lt;/a&gt;, and releases are announced via our &lt;a href=&#34;https://spring.io/blog/category/news&#34;&gt;news feed&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The Spring Framework is released under version 2.0 of the &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>201206030/novel</title>
    <updated>2022-06-01T02:01:04Z</updated>
    <id>tag:github.com,2022-06-01:/201206030/novel</id>
    <link href="https://github.com/201206030/novel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;novel 是一套基于时下最新 Java 技术栈 Spring Boot 3 + Vue 3 开发的前后端分离学习型小说项目，配备详细的项目开发教程手把手教你从零开始开发上线一个生产级别的 Java 系统，由小说门户系统、作家后台管理系统、平台后台管理系统等多个子系统构成。包括小说推荐、作品检索、小说排行榜、小说阅读、小说评论、会员中心、作家专区、充值订阅、新闻发布等功能。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://curl.qcloud.com/kgMaOjoq&#34;&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/05/17/O5tgbR.png&#34; alt=&#34;index&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/201206030/novel&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/201206030/novel?logo=github&#34; alt=&#34;Github stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/201206030/novel&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/201206030/novel?logo=github&#34; alt=&#34;Github forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitee.com/novel_dev_team/novel&#34;&gt;&lt;img src=&#34;https://gitee.com/novel_dev_team/novel/badge/star.svg?theme=gitee&#34; alt=&#34;Gitee star&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitee.com/novel_dev_team/novel&#34;&gt;&lt;img src=&#34;https://gitee.com/novel_dev_team/novel/badge/fork.svg?theme=gitee&#34; alt=&#34;Gitee fork&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;项目简介&lt;/h2&gt; &#xA;&lt;p&gt;novel 是一套基于时下&lt;strong&gt;最新&lt;/strong&gt; Java 技术栈 Spring Boot 3 + Vue 3 开发的前后端分离的&lt;strong&gt;学习型&lt;/strong&gt;小说项目，配备详细的项目教程手把手教你&lt;strong&gt;从零开始&lt;/strong&gt;开发上线一个生产级别的 Java 系统，由小说门户系统、作家后台管理系统、平台后台管理系统、爬虫管理系统等多个子系统构成。包括小说推荐、作品检索、小说排行榜、小说阅读、小说评论、充值订阅、新闻发布等功能。&lt;/p&gt; &#xA;&lt;h2&gt;项目地址&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;后端项目（更新中）：&lt;a href=&#34;https://github.com/201206030/novel&#34;&gt;GitHub&lt;/a&gt; ｜ &lt;a href=&#34;https://gitee.com/novel_dev_team/novel&#34;&gt;码云&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;前端项目（更新中）：&lt;a href=&#34;https://github.com/201206030/novel-front-web&#34;&gt;GitHub&lt;/a&gt; ｜ &lt;a href=&#34;https://gitee.com/novel_dev_team/novel-front-web&#34;&gt;码云&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;线上应用版：&lt;a href=&#34;https://github.com/201206030/novel-plus&#34;&gt;GitHub&lt;/a&gt; ｜ &lt;a href=&#34;https://gitee.com/novel_dev_team/novel-plus&#34;&gt;码云&lt;/a&gt; ｜&lt;a href=&#34;http://47.106.243.172:8888/&#34;&gt;演示地址&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;微服务版：&lt;a href=&#34;https://github.com/201206030/novel-cloud&#34;&gt;GitHub&lt;/a&gt; ｜ &lt;a href=&#34;https://gitee.com/novel_dev_team/novel-cloud&#34;&gt;码云&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;开发环境&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MySQL 8.0&lt;/li&gt; &#xA; &lt;li&gt;Redis 7.0&lt;/li&gt; &#xA; &lt;li&gt;Elasticsearch 8.2.0（可选）&lt;/li&gt; &#xA; &lt;li&gt;RabbitMQ 3.10.2（可选）&lt;/li&gt; &#xA; &lt;li&gt;XXL-JOB 2.3.1（可选）&lt;/li&gt; &#xA; &lt;li&gt;JDK 17&lt;/li&gt; &#xA; &lt;li&gt;Maven 3.8&lt;/li&gt; &#xA; &lt;li&gt;IntelliJ IDEA 2021.3（可选）&lt;/li&gt; &#xA; &lt;li&gt;Node 16.14&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;注：Elasticsearch、RabbitMQ 和 XXL-JOB 默认关闭，可通过 application.yml 配置文件中相应的&lt;code&gt;enable&lt;/code&gt;配置属性开启。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;后端技术选型&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;技术&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;版本&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;   &lt;th&gt;官网&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;学习&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Spring Boot&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3.0.0-SNAPSHOT&lt;/td&gt; &#xA;   &lt;td&gt;容器 + MVC 框架&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://spring.io/projects/spring-boot&#34;&gt;https://spring.io/projects/spring-boot&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://youdoc.github.io/course/novel/11.html&#34;&gt;进入&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;MyBatis&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3.5.9&lt;/td&gt; &#xA;   &lt;td&gt;ORM 框架&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.mybatis.org&#34;&gt;http://www.mybatis.org&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://mybatis.org/mybatis-3/zh/index.html&#34;&gt;进入&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;MyBatis-Plus&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3.5.1&lt;/td&gt; &#xA;   &lt;td&gt;MyBatis 增强工具&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://baomidou.com/&#34;&gt;https://baomidou.com/&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://baomidou.com/pages/24112f/&#34;&gt;进入&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JJWT&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.11.5&lt;/td&gt; &#xA;   &lt;td&gt;JWT 登录支持&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jwtk/jjwt&#34;&gt;https://github.com/jwtk/jjwt&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Lombok&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.18.24&lt;/td&gt; &#xA;   &lt;td&gt;简化对象封装工具&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/projectlombok/lombok&#34;&gt;https://github.com/projectlombok/lombok&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://projectlombok.org/features/all&#34;&gt;进入&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Caffeine&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3.1.0&lt;/td&gt; &#xA;   &lt;td&gt;本地缓存支持&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ben-manes/caffeine&#34;&gt;https://github.com/ben-manes/caffeine&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/ben-manes/caffeine/wiki/Home-zh-CN&#34;&gt;进入&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Redis&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;7.0&lt;/td&gt; &#xA;   &lt;td&gt;分布式缓存支持&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://redis.io&#34;&gt;https://redis.io&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://redis.io/docs&#34;&gt;进入&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;MySQL&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;8.0&lt;/td&gt; &#xA;   &lt;td&gt;数据库服务&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.mysql.com&#34;&gt;https://www.mysql.com&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://docs.oracle.com/en-us/iaas/mysql-database/doc/getting-started.html&#34;&gt;进入&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Elasticsearch&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;8.2.0&lt;/td&gt; &#xA;   &lt;td&gt;搜索引擎服务&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.elastic.co&#34;&gt;https://www.elastic.co&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html&#34;&gt;进入&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;RabbitMQ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3.10.2&lt;/td&gt; &#xA;   &lt;td&gt;开源消息中间件&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.rabbitmq.com&#34;&gt;https://www.rabbitmq.com&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.rabbitmq.com/tutorials/tutorial-one-java.html&#34;&gt;进入&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;XXL-JOB&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2.3.1&lt;/td&gt; &#xA;   &lt;td&gt;分布式任务调度平台&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.xuxueli.com/xxl-job&#34;&gt;https://www.xuxueli.com/xxl-job&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.xuxueli.com/xxl-job&#34;&gt;进入&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Undertow&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2.2.17.Final&lt;/td&gt; &#xA;   &lt;td&gt;Java 开发的高性能 Web 服务器&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://undertow.io&#34;&gt;https://undertow.io&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://undertow.io/documentation.html&#34;&gt;进入&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Docker&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;应用容器引擎&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.docker.com/&#34;&gt;https://www.docker.com/&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Jenkins&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;自动化部署工具&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jenkinsci/jenkins&#34;&gt;https://github.com/jenkinsci/jenkins&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Sonarqube&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;代码质量控制&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.sonarqube.org/&#34;&gt;https://www.sonarqube.org/&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;注：更多热门新技术待集成。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;前端技术选型&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;技术&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;版本&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;   &lt;th&gt;官网&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;学习&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Vue.js&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3.2.13&lt;/td&gt; &#xA;   &lt;td&gt;渐进式 JavaScript 框架&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://v3.cn.vuejs.org&#34;&gt;https://v3.cn.vuejs.org&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://v3.cn.vuejs.org/guide/introduction.html&#34;&gt;进入&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Vue Router&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4.0.15&lt;/td&gt; &#xA;   &lt;td&gt;Vue.js 的官方路由&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://router.vuejs.org/zh/index.html&#34;&gt;https://router.vuejs.org/zh/index.html&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://router.vuejs.org/zh/guide/&#34;&gt;进入&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;axios&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.27.2&lt;/td&gt; &#xA;   &lt;td&gt;基于 promise 的网络请求库&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://axios-http.com/zh&#34;&gt;https://axios-http.com/zh&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://axios-http.com/zh/docs/intro&#34;&gt;进入&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;element-plus&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2.2.0&lt;/td&gt; &#xA;   &lt;td&gt;基于 Vue 3，面向设计师和开发者的组件库&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://element-plus.org/zh-CN/&#34;&gt;https://element-plus.org/zh-CN/&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://element-plus.org/zh-CN/guide/design.html&#34;&gt;进入&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;编码规范&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;规范方式：严格遵守阿里编码规约。&lt;/li&gt; &#xA; &lt;li&gt;命名统一：简介最大程度上达到了见名知意。&lt;/li&gt; &#xA; &lt;li&gt;分包明确：层级分明可快速定位到代码位置。&lt;/li&gt; &#xA; &lt;li&gt;注释完整：描述性高大量减少了开发人员的代码阅读工作量。&lt;/li&gt; &#xA; &lt;li&gt;工具规范：使用统一jar包避免出现内容冲突。&lt;/li&gt; &#xA; &lt;li&gt;代码整洁：可读性、维护性高。&lt;/li&gt; &#xA; &lt;li&gt;依赖版本：所有依赖均使用当前最新可用版本以便新技术学习。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;包结构&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;io&#xA; +- github&#xA;     +- xxyopen   &#xA;        +- novel&#xA;            +- NovelApplication.java -- 项目启动类&#xA;            |&#xA;            +- core -- 项目核心模块，包括各种工具、配置和常量等&#xA;            |   +- common -- 业务无关的通用模块&#xA;            |   |   +- exception -- 通用异常处理&#xA;            |   |   +- constant -- 通用常量   &#xA;            |   |   +- req -- 通用请求数据格式封装，例如分页请求数据  &#xA;            |   |   +- resp -- 接口响应工具及响应数据格式封装 &#xA;            |   |   +- util -- 通用工具   &#xA;            |   | &#xA;            |   +- auth -- 用户认证授权相关&#xA;            |   +- config -- 业务相关配置&#xA;            |   +- constant -- 业务相关常量         &#xA;            |   +- filter -- 过滤器 &#xA;            |   +- interceptor -- 拦截器&#xA;            |   +- json -- JSON 相关的包，包括序列化器和反序列化器&#xA;            |   +- task -- 定时任务&#xA;            |   +- util -- 业务相关工具 &#xA;            |   +- wrapper -- 装饰器&#xA;            |&#xA;            +- dto -- 数据传输对象，包括对各种 Http 请求和响应数据的封装&#xA;            |   +- req -- Http 请求数据封装&#xA;            |   +- resp -- Http 响应数据封装&#xA;            |&#xA;            +- dao -- 数据访问层，与底层 MySQL 进行数据交互&#xA;            +- manager -- 通用业务处理层，对第三方平台封装、对 Service 层通用能力的下沉以及对多个 DAO 的组合复用 &#xA;            +- service -- 相对具体的业务逻辑服务层  &#xA;            +- controller -- 主要是处理各种 Http 请求，各类基本参数校验，或者不复用的业务简单处理，返回 JSON 数据等&#xA;            |   +- front -- 小说门户相关接口&#xA;            |   +- author -- 作家管理后台相关接口&#xA;            |   +- admin -- 平台管理后台相关接口&#xA;            |   +- app -- app 接口&#xA;            |   +- applet -- 小程序接口&#xA;            |   +- open -- 开放接口，供第三方调用 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;截图&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;首页&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://s3.ax1x.com/2020/12/27/r5400A.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;分类索引页&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://oscimg.oschina.net/oscnet/up-d0b2e03129bfae47b8bb96a491b73d383c5.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;搜索页&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://s3.ax1x.com/2020/12/27/r5TO8x.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://oscimg.oschina.net/oscnet/up-ed5f689557718924acac76bc3ebca36afcb.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;排行榜&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://oscimg.oschina.net/oscnet/up-78d5a68586cd92a86c669311f414508f922.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;详情页&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://oscimg.oschina.net/oscnet/up-8be2495a2869f93626b0c9c1df6f329747a.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;阅读页&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://oscimg.oschina.net/oscnet/up-517c84148d2db8e11717a8bbecc57fa1be7.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;用户中心&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://oscimg.oschina.net/oscnet/up-805a30e7a663a3fd5cb39a7ea26bc132a01.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;8&#34;&gt; &#xA; &lt;li&gt;充值&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://oscimg.oschina.net/oscnet/up-5a601b0b3af3224d0bebcfe12fc15075d34.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://oscimg.oschina.net/oscnet/up-face25d02c07b05b2ce954cc4bf4ee6a0cc.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;9&#34;&gt; &#xA; &lt;li&gt;作家专区&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://oscimg.oschina.net/oscnet/up-30766372cc7f56480ff1d7d55198204f6ea.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://s3.ax1x.com/2020/11/17/DVFiQI.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/11/09/B7X5oF.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/11/09/B7XLsx.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;10&#34;&gt; &#xA; &lt;li&gt;购买&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://oscimg.oschina.net/oscnet/up-ce0f585efd82a9670335f118cf5897c85e9.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://oscimg.oschina.net/oscnet/up-f849960f4c1303fea77d26e64fc505a7180.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;安装步骤&lt;/h2&gt; &#xA;&lt;p&gt;此安装步骤的前提是需要保证上一节的开发环境可用。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;下载后端源码&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://gitee.com/novel_dev_team/novel.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;数据库文件导入&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;新建数据库（建议 novel）&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;解压后端源码&lt;code&gt;doc/sql/novel.sql.zip&lt;/code&gt;压缩包，得到数据库结构文件&lt;code&gt;novel_struc.sql&lt;/code&gt;和数据库小说数据文件&lt;code&gt;novel_data.sql&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;导入&lt;code&gt;novel_struct.sql&lt;/code&gt;数据库结构文件&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;导入&lt;code&gt;novel_data.sql&lt;/code&gt;数据库小说数据文件&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;novel 后端服务安装&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;修改&lt;code&gt;src/resources/application.yml&lt;/code&gt;配置文件中的数据源配置&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;pre&gt;&lt;code&gt;spring:&#xA;    datasource:&#xA;        url: jdbc:mysql://localhost:3306/novel_test?useUnicode=true&amp;amp;characterEncoding=utf-8&amp;amp;useSSL=false&amp;amp;serverTimezone=Asia/Shanghai&#xA;        username: root&#xA;        password: test123456&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ol start=&#34;2&#34;&gt; &#xA;   &lt;li&gt;修改&lt;code&gt;src/resources/application.yml&lt;/code&gt;配置文件中的&lt;code&gt;redis&lt;/code&gt;连接配置&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;pre&gt;&lt;code&gt;spring:&#xA;    redis:&#xA;        host: 127.0.0.1&#xA;        port: 6379&#xA;        password: 123456&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ol start=&#34;3&#34;&gt; &#xA;   &lt;li&gt;项目根目录下运行如下命令来启动后端服务（有安装 IDE 的可以导入源码到 IDE 中运行）&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;pre&gt;&lt;code&gt;mvn spring-boot:run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ol start=&#34;4&#34;&gt; &#xA;   &lt;li&gt;根据前后端的实际部署情况，修改&lt;code&gt;application.yml&lt;/code&gt;中的跨域配置（默认情况可忽略此步骤）&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;下载前端前台门户系统源码&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://gitee.com/novel_dev_team/novel-front-web.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;novel-front-web 前端前台门户系统安装&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;根据前后端的实际部署情况，修改&lt;code&gt;.env.development&lt;/code&gt;中的&lt;code&gt;VUE_APP_BASE_API_URL&lt;/code&gt;属性（默认情况可忽略此步骤）&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;yarn&lt;/code&gt;安装&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;pre&gt;&lt;code&gt;npm install -g yarn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ol start=&#34;3&#34;&gt; &#xA;   &lt;li&gt;项目根目录下运行如下命令来安装项目依赖&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;pre&gt;&lt;code&gt;yarn install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ol start=&#34;4&#34;&gt; &#xA;   &lt;li&gt;项目根目录下运行如下命令启动&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;pre&gt;&lt;code&gt;yarn serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ol start=&#34;5&#34;&gt; &#xA;   &lt;li&gt;浏览器通过&lt;code&gt;http://localhost:1024&lt;/code&gt;来访问&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;项目教程&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youdoc.github.io/course/novel/3.html&#34;&gt;手把手教你从零开始开发上线一个生产级别的小说系统&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;公众号&lt;/h2&gt; &#xA;&lt;p&gt;关注公众号接收项目最新动态，获取&lt;code&gt;Spring Boot 3&lt;/code&gt;学习笔记！&lt;/p&gt; &#xA;&lt;p&gt;加微信群学习交流，公众号后台回复「&lt;strong&gt;微信群&lt;/strong&gt;」即可。&lt;/p&gt; &#xA;&lt;p&gt;发送「&lt;strong&gt;资料&lt;/strong&gt;」获取&lt;code&gt;JAVA 面试参考&lt;/code&gt;、&lt;code&gt;海量简历模板&lt;/code&gt;、&lt;code&gt;技术电子书&lt;/code&gt;等学习面试资料。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://youdoc.github.io/img/qrcode_for_gh.jpg&#34; alt=&#34;微信公众号&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;赞赏支持&lt;/h2&gt; &#xA;&lt;p&gt;开源项目不易，若此项目能得到你的青睐，那么你可以赞赏支持作者持续开发与维护。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;更完善的文档教程&lt;/li&gt; &#xA; &lt;li&gt;服务器的费用也是一笔开销&lt;/li&gt; &#xA; &lt;li&gt;为用户提供更好的开发环境&lt;/li&gt; &#xA; &lt;li&gt;一杯咖啡&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/31/BUQJwq.png&#34; alt=&#34;mini-code&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>skylot/jadx</title>
    <updated>2022-06-01T02:01:04Z</updated>
    <id>tag:github.com,2022-06-01:/skylot/jadx</id>
    <link href="https://github.com/skylot/jadx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dex to Java decompiler&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/skylot/jadx/master/jadx-gui/src/main/resources/logos/jadx-logo.png&#34; width=&#34;64&#34; align=&#34;left&#34;&gt; &#xA;&lt;h2&gt;JADX&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/skylot/jadx/actions?query=workflow%3ABuild&#34;&gt;&lt;img src=&#34;https://github.com/skylot/jadx/workflows/Build/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/skylot/jadx/alerts/&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/alerts/g/skylot/jadx.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;Alerts from lgtm.com&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/semantic-release/semantic-release&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg?sanitize=true&#34; alt=&#34;semantic-release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://search.maven.org/search?q=g:io.github.skylot%20AND%20jadx&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/io.github.skylot/jadx-core&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;&lt;img src=&#34;http://img.shields.io/:license-apache-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;jadx&lt;/strong&gt; - Dex to Java decompiler&lt;/p&gt; &#xA;&lt;p&gt;Command line and GUI tools for producing Java source code from Android Dex and Apk files&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;❗&lt;/span&gt;&lt;span&gt;❗&lt;/span&gt;&lt;span&gt;❗&lt;/span&gt; Please note that in most cases &lt;strong&gt;jadx&lt;/strong&gt; can&#39;t decompile all 100% of the code, so errors will occur. Check &lt;a href=&#34;https://github.com/skylot/jadx/wiki/Troubleshooting-Q&amp;amp;A#decompilation-issues&#34;&gt;Troubleshooting guide&lt;/a&gt; for workarounds&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Main features:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;decompile Dalvik bytecode to java classes from APK, dex, aar, aab and zip files&lt;/li&gt; &#xA; &lt;li&gt;decode &lt;code&gt;AndroidManifest.xml&lt;/code&gt; and other resources from &lt;code&gt;resources.arsc&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;deobfuscator included&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;jadx-gui features:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;view decompiled code with highlighted syntax&lt;/li&gt; &#xA; &lt;li&gt;jump to declaration&lt;/li&gt; &#xA; &lt;li&gt;find usage&lt;/li&gt; &#xA; &lt;li&gt;full text search&lt;/li&gt; &#xA; &lt;li&gt;smali debugger, check &lt;a href=&#34;https://github.com/skylot/jadx/wiki/Smali-debugger&#34;&gt;wiki page&lt;/a&gt; for setup and usage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Jadx-gui key bindings can be found &lt;a href=&#34;https://github.com/skylot/jadx/wiki/JADX-GUI-Key-bindings&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;See these features in action here: &lt;a href=&#34;https://github.com/skylot/jadx/wiki/jadx-gui-features-overview&#34;&gt;jadx-gui features overview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/118523/142730720-839f017e-38db-423e-b53f-39f5f0a0316f.png&#34; width=&#34;700&#34;&gt; &#xA;&lt;h3&gt;Download&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;release from &lt;a href=&#34;https://github.com/skylot/jadx/releases/latest&#34;&gt;github: &lt;img src=&#34;https://img.shields.io/github/release/skylot/jadx.svg?sanitize=true&#34; alt=&#34;Latest release&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;latest &lt;a href=&#34;https://nightly.link/skylot/jadx/workflows/build-artifacts/master&#34;&gt;unstable build&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After download unpack zip file go to &lt;code&gt;bin&lt;/code&gt; directory and run:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;jadx&lt;/code&gt; - command line version&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;jadx-gui&lt;/code&gt; - UI version&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On Windows run &lt;code&gt;.bat&lt;/code&gt; files with double-click&lt;br&gt; &lt;strong&gt;Note:&lt;/strong&gt; ensure you have installed Java 11 or later 64-bit version. For Windows, you can download it from &lt;a href=&#34;https://www.oracle.com/java/technologies/downloads/#jdk17-windows&#34;&gt;oracle.com&lt;/a&gt; (select x64 Installer).&lt;/p&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Arch linux &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    sudo pacman -S jadx&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;macOS &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    brew install jadx&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Use jadx as a library&lt;/h3&gt; &#xA;&lt;p&gt;You can use jadx in your java projects, check details on &lt;a href=&#34;https://github.com/skylot/jadx/wiki/Use-jadx-as-a-library&#34;&gt;wiki page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Build from source&lt;/h3&gt; &#xA;&lt;p&gt;JDK 8 or higher must be installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/skylot/jadx.git&#xA;cd jadx&#xA;./gradlew dist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(on Windows, use &lt;code&gt;gradlew.bat&lt;/code&gt; instead of &lt;code&gt;./gradlew&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Scripts for run jadx will be placed in &lt;code&gt;build/jadx/bin&lt;/code&gt; and also packed to &lt;code&gt;build/jadx-&amp;lt;version&amp;gt;.zip&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;jadx[-gui] [options] &amp;lt;input files&amp;gt; (.apk, .dex, .jar, .class, .smali, .zip, .aar, .arsc, .aab)&#xA;options:&#xA;  -d, --output-dir                    - output directory&#xA;  -ds, --output-dir-src               - output directory for sources&#xA;  -dr, --output-dir-res               - output directory for resources&#xA;  -r, --no-res                        - do not decode resources&#xA;  -s, --no-src                        - do not decompile source code&#xA;  --single-class                      - decompile a single class, full name, raw or alias&#xA;  --single-class-output               - file or dir for write if decompile a single class&#xA;  --output-format                     - can be &#39;java&#39; or &#39;json&#39;, default: java&#xA;  -e, --export-gradle                 - save as android gradle project&#xA;  -j, --threads-count                 - processing threads count, default: 4&#xA;  -m, --decompilation-mode            - code output mode:&#xA;                                         &#39;auto&#39; - trying best options (default)&#xA;                                         &#39;restructure&#39; - restore code structure (normal java code)&#xA;                                         &#39;simple&#39; - simplified instructions (linear, with goto&#39;s)&#xA;                                         &#39;fallback&#39; - raw instructions without modifications&#xA;  --show-bad-code                     - show inconsistent code (incorrectly decompiled)&#xA;  --no-imports                        - disable use of imports, always write entire package name&#xA;  --no-debug-info                     - disable debug info&#xA;  --add-debug-lines                   - add comments with debug line numbers if available&#xA;  --no-inline-anonymous               - disable anonymous classes inline&#xA;  --no-inline-methods                 - disable methods inline&#xA;  --no-replace-consts                 - don&#39;t replace constant value with matching constant field&#xA;  --escape-unicode                    - escape non latin characters in strings (with \u)&#xA;  --respect-bytecode-access-modifiers - don&#39;t change original access modifiers&#xA;  --deobf                             - activate deobfuscation&#xA;  --deobf-min                         - min length of name, renamed if shorter, default: 3&#xA;  --deobf-max                         - max length of name, renamed if longer, default: 64&#xA;  --deobf-cfg-file                    - deobfuscation map file, default: same dir and name as input file with &#39;.jobf&#39; extension&#xA;  --deobf-cfg-file-mode               - set mode for handle deobfuscation map file:&#xA;                                         &#39;read&#39; - read if found, don&#39;t save (default)&#xA;                                         &#39;read-or-save&#39; - read if found, save otherwise (don&#39;t overwrite)&#xA;                                         &#39;overwrite&#39; - don&#39;t read, always save&#xA;                                         &#39;ignore&#39; - don&#39;t read and don&#39;t save&#xA;  --deobf-rewrite-cfg                 - set &#39;--deobf-cfg-file-mode&#39; to &#39;overwrite&#39; (deprecated)&#xA;  --deobf-use-sourcename              - use source file name as class name alias&#xA;  --deobf-parse-kotlin-metadata       - parse kotlin metadata to class and package names&#xA;  --use-kotlin-methods-for-var-names  - use kotlin intrinsic methods to rename variables, values: disable, apply, apply-and-hide, default: apply&#xA;  --rename-flags                      - fix options (comma-separated list of):&#xA;                                         &#39;case&#39; - fix case sensitivity issues (according to --fs-case-sensitive option),&#xA;                                         &#39;valid&#39; - rename java identifiers to make them valid,&#xA;                                         &#39;printable&#39; - remove non-printable chars from identifiers,&#xA;                                        or single &#39;none&#39; - to disable all renames&#xA;                                        or single &#39;all&#39; - to enable all (default)&#xA;  --fs-case-sensitive                 - treat filesystem as case sensitive, false by default&#xA;  --cfg                               - save methods control flow graph to dot file&#xA;  --raw-cfg                           - save methods control flow graph (use raw instructions)&#xA;  -f, --fallback                      - set &#39;--decompilation-mode&#39; to &#39;fallback&#39; (deprecated)&#xA;  --use-dx                            - use dx/d8 to convert java bytecode&#xA;  --comments-level                    - set code comments level, values: error, warn, info, debug, user-only, none, default: info&#xA;  --log-level                         - set log level, values: quiet, progress, error, warn, info, debug, default: progress&#xA;  -v, --verbose                       - verbose output (set --log-level to DEBUG)&#xA;  -q, --quiet                         - turn off output (set --log-level to QUIET)&#xA;  --version                           - print jadx version&#xA;  -h, --help                          - print this help&#xA;&#xA;Plugin options (-P&amp;lt;name&amp;gt;=&amp;lt;value&amp;gt;):&#xA;  1) dex-input (Load .dex and .apk files)&#xA;    -Pdex-input.verify-checksum       - Verify dex file checksum before load, values: [yes, no], default: yes&#xA;  2) java-convert (Convert .jar and .class files to dex)&#xA;    -Pjava-convert.mode               - Convert mode, values: [dx, d8, both], default: both&#xA;    -Pjava-convert.d8-desugar         - Use desugar in d8, values: [yes, no], default: no&#xA;&#xA;Examples:&#xA;  jadx -d out classes.dex&#xA;  jadx --rename-flags &#34;none&#34; classes.dex&#xA;  jadx --rename-flags &#34;valid, printable&#34; classes.dex&#xA;  jadx --log-level ERROR app.apk&#xA;  jadx -Pdex-input.verify-checksum=no app.apk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These options also worked on jadx-gui running from command line and override options from preferences dialog&lt;/p&gt; &#xA;&lt;h3&gt;Troubleshooting&lt;/h3&gt; &#xA;&lt;p&gt;Please check wiki page &lt;a href=&#34;https://github.com/skylot/jadx/wiki/Troubleshooting-Q&amp;amp;A&#34;&gt;Troubleshooting Q&amp;amp;A&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;To support this project you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Post thoughts about new features/optimizations that important to you&lt;/li&gt; &#xA; &lt;li&gt;Submit decompilation issues, please read before proceed: &lt;a href=&#34;https://raw.githubusercontent.com/skylot/jadx/master/CONTRIBUTING.md#Open-Issue&#34;&gt;Open issue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open pull request, please follow these rules: &lt;a href=&#34;https://raw.githubusercontent.com/skylot/jadx/master/CONTRIBUTING.md#Pull-Request-Process&#34;&gt;Pull Request Process&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;em&gt;Licensed under the Apache 2.0 License&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>eugenp/tutorials</title>
    <updated>2022-06-01T02:01:04Z</updated>
    <id>tag:github.com,2022-06-01:/eugenp/tutorials</id>
    <link href="https://github.com/eugenp/tutorials" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Just Announced - &#34;Learn Spring Security OAuth&#34;:&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Courses&lt;/h1&gt; &#xA;&lt;p&gt;Here&#39;s the new &#34;Learn Spring&#34; course: &lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.baeldung.com/learn-spring-course?utm_source=github&amp;amp;utm_medium=social&amp;amp;utm_content=tutorials&amp;amp;utm_campaign=ls#master-class&#34;&gt;&amp;gt;&amp;gt; LEARN SPRING - THE MASTER CLASS&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s the Master Class of &#34;REST With Spring&#34; (along with the new announced Boot 2 material): &lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.baeldung.com/rest-with-spring-course?utm_source=github&amp;amp;utm_medium=social&amp;amp;utm_content=tutorials&amp;amp;utm_campaign=rws#master-class&#34;&gt;&amp;gt;&amp;gt; THE REST WITH SPRING - MASTER CLASS&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;And here&#39;s the Master Class of &#34;Learn Spring Security&#34;: &lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.baeldung.com/learn-spring-security-course?utm_source=github&amp;amp;utm_medium=social&amp;amp;utm_content=tutorials&amp;amp;utm_campaign=lss#master-class&#34;&gt;&amp;gt;&amp;gt; LEARN SPRING SECURITY - MASTER CLASS&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Java and Spring Tutorials&lt;/h1&gt; &#xA;&lt;p&gt;This project is &lt;strong&gt;a collection of small and focused tutorials&lt;/strong&gt; - each covering a single and well defined area of development in the Java ecosystem. A strong focus of these is, of course, the Spring Framework - Spring, Spring Boot and Spring Security. In addition to Spring, the modules here cover a number of aspects of Java.&lt;/p&gt; &#xA;&lt;h1&gt;Profile based segregation&lt;/h1&gt; &#xA;&lt;p&gt;We are using maven build profiles to segregate the huge list of individual projects we have in our repository.&lt;/p&gt; &#xA;&lt;p&gt;As for now, vast majority of the modules require JDK8 to build and run correctly.&lt;/p&gt; &#xA;&lt;p&gt;The projects are broadly divided into 3 lists: first, second and heavy.&lt;/p&gt; &#xA;&lt;p&gt;Next, they are segregated further on the basis of the tests that we want to execute.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, there are 2 profiles dedicated for JDK9 and above builds.&lt;/p&gt; &#xA;&lt;p&gt;Therefore, we have a total of 8 profiles:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Profile&lt;/th&gt; &#xA;   &lt;th&gt;Includes&lt;/th&gt; &#xA;   &lt;th&gt;Type of test enabled&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;default-first&lt;/td&gt; &#xA;   &lt;td&gt;First set of projects&lt;/td&gt; &#xA;   &lt;td&gt;*UnitTest&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;integration-lite-first&lt;/td&gt; &#xA;   &lt;td&gt;First set of projects&lt;/td&gt; &#xA;   &lt;td&gt;*IntegrationTest&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;default-second&lt;/td&gt; &#xA;   &lt;td&gt;Second set of projects&lt;/td&gt; &#xA;   &lt;td&gt;*UnitTest&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;integration-lite-second&lt;/td&gt; &#xA;   &lt;td&gt;Second set of projects&lt;/td&gt; &#xA;   &lt;td&gt;*IntegrationTest&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;default-heavy&lt;/td&gt; &#xA;   &lt;td&gt;Heavy/long running projects&lt;/td&gt; &#xA;   &lt;td&gt;*UnitTest&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;integration-heavy&lt;/td&gt; &#xA;   &lt;td&gt;Heavy/long running projects&lt;/td&gt; &#xA;   &lt;td&gt;*IntegrationTest&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;default-jdk9-and-above&lt;/td&gt; &#xA;   &lt;td&gt;JDK9 and above projects&lt;/td&gt; &#xA;   &lt;td&gt;*UnitTest&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;integration-jdk9-and-above&lt;/td&gt; &#xA;   &lt;td&gt;JDK9 and above projects&lt;/td&gt; &#xA;   &lt;td&gt;*IntegrationTest&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Building the project&lt;/h1&gt; &#xA;&lt;p&gt;Though it should not be needed often to build the entire repository at once because we are usually concerned with a specific module.&lt;/p&gt; &#xA;&lt;p&gt;But if we want to, we can invoke the below command from the root of the repository if we want to build the entire repository with only Unit Tests enabled:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;mvn clean install -Pdefault-first,default-second,default-heavy&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;or if we want to build the entire repository with Integration Tests enabled, we can do:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;mvn clean install -Pintegration-lite-first,integration-lite-second,integration-heavy&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Analogously, for the JDK9 and above projects the commands are:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;mvn clean install -Pdefault-jdk9-and-above&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;and&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;mvn clean install -Pintegration-jdk9-and-above&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Building a single module&lt;/h1&gt; &#xA;&lt;p&gt;To build a specific module, run the command: &lt;code&gt;mvn clean install&lt;/code&gt; in the module directory.&lt;/p&gt; &#xA;&lt;h1&gt;Running a Spring Boot module&lt;/h1&gt; &#xA;&lt;p&gt;To run a Spring Boot module, run the command: &lt;code&gt;mvn spring-boot:run&lt;/code&gt; in the module directory.&lt;/p&gt; &#xA;&lt;h1&gt;Working with the IDE&lt;/h1&gt; &#xA;&lt;p&gt;This repo contains a large number of modules. When you&#39;re working with an individual module, there&#39;s no need to import all of them (or build all of them) - you can simply import that particular module in either Eclipse or IntelliJ.&lt;/p&gt; &#xA;&lt;h1&gt;Running Tests&lt;/h1&gt; &#xA;&lt;p&gt;The command &lt;code&gt;mvn clean install&lt;/code&gt; from within a module will run the unit tests in that module. For Spring modules this will also run the &lt;code&gt;SpringContextTest&lt;/code&gt; if present.&lt;/p&gt; &#xA;&lt;p&gt;To run the integration tests, use the command:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;mvn clean install -Pintegration-lite-first&lt;/code&gt; or&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;mvn clean install -Pintegration-lite-second&lt;/code&gt; or&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;mvn clean install -Pintegration-heavy&lt;/code&gt; or&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;mvn clean install -Pintegration-jdk9-and-above&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;depending on the list where our module exists&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ZhongFuCheng3y/austin</title>
    <updated>2022-06-01T02:01:04Z</updated>
    <id>tag:github.com,2022-06-01:/ZhongFuCheng3y/austin</id>
    <link href="https://github.com/ZhongFuCheng3y/austin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;消息推送平台📝 推送下发【邮件】【短信】【微信服务号】【微信小程序】【企业微信】【钉钉】等消息类型。所使用的技术栈包括：SpringBoot、SpringDataJPA、MySQL、Docker、docker-compose、Kafka、Redis、Apollo、prometheus、Grafana、GrayLog、Flink、Xxl-job、Echarts等等&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/108bca55a5364a73b3fd50b8bde304d1~tplv-k3u1fbpfcp-watermark.image?&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ZhongFuCheng3y/austin/master/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Author-3y-orange.svg?sanitize=true&#34; alt=&#34;作者&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitee.com/zhongfucheng/austin&#34;&gt;&lt;img src=&#34;https://gitee.com/zhongfucheng/austin/badge/star.svg?theme=dark&#34; alt=&#34;gitee Starts&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitee.com/zhongfucheng/austin&#34;&gt;&lt;img src=&#34;https://gitee.com/zhongfucheng/austin/badge/fork.svg?theme=dark&#34; alt=&#34;gitee Starts&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ZhongFuCheng3y/austin&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/ZhongFuCheng3y/austin.svg?style=flat&amp;amp;label=GithubFork&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ZhongFuCheng3y/austin&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/ZhongFuCheng3y/austin.svg?style=flat&amp;amp;label=GithubStars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ZhongFuCheng3y/austin-admin&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/austin前端-GitHub-green.svg&#34; alt=&#34;作者&#34;&gt;&lt;/a&gt; &lt;a href=&#34;#项目交流&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/项目-交流-red.svg&#34; alt=&#34;项目交流&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://space.bilibili.com/198434865/channel/collectiondetail?sid=435119&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/项目-视频-green.svg&#34; alt=&#34;Bilibili&#34;&gt;&lt;/a&gt; &lt;a href=&#34;#如何准备面试&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/如何准备-面试-yellow.svg&#34; alt=&#34;对线面试官&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;最近我已经在&lt;strong&gt;bilibili&lt;/strong&gt;更新Austin的视频了哟，&lt;strong&gt;求关注和三连&lt;/strong&gt;！这是我更新的动力！！&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://space.bilibili.com/198434865/channel/collectiondetail?sid=435119&#34;&gt;https://space.bilibili.com/198434865/channel/collectiondetail?sid=435119&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;项目介绍&lt;/h2&gt; &#xA;&lt;p&gt;austin项目&lt;strong&gt;核心功能&lt;/strong&gt;：统一的接口发送各种类型消息，对消息生命周期全链路追踪&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5436b2e3d6cd471db9aafbd436198ca7~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;项目出现意义&lt;/strong&gt;：只要公司内有发送消息的需求，都应该要有类似&lt;code&gt;austin&lt;/code&gt;的项目，对各类消息进行统一发送处理。这有利于对功能的收拢，以及提高业务需求开发的效率&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c267ebb2ff234243b8665312dbb46310~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;系统项目架构&lt;/h2&gt; &#xA;&lt;p&gt;austin项目&lt;strong&gt;核心流程&lt;/strong&gt;：&lt;code&gt;austin-api&lt;/code&gt;接收到发送消息请求，直接将请求进&lt;code&gt;MQ&lt;/code&gt;。&lt;code&gt;austin-handler&lt;/code&gt;消费&lt;code&gt;MQ&lt;/code&gt;消息后由各类消息的Handler进行发送处理&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b5d4dfde0f164805a6e85a86498b0cd7~tplv-k3u1fbpfcp-watermark.image?&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Question&lt;/strong&gt; ：为什么发个消息需要MQ？&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;：发送消息实际上是调用各个服务提供的API，假设某消息的服务超时，&lt;code&gt;austin-api&lt;/code&gt;如果是直接调用服务，那存在&lt;strong&gt;超时&lt;/strong&gt;风险，拖垮整个接口性能。MQ在这是为了做异步和解耦，并且在一定程度上抗住业务流量。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Question&lt;/strong&gt;：能简单说下接入层做了什么事吗？&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c94059a008784a69bd10b98caa46d683~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Question&lt;/strong&gt;：&lt;code&gt;austin-stream&lt;/code&gt;和&lt;code&gt;austin-datahouse&lt;/code&gt;的作用？&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;：&lt;code&gt;austin-handler&lt;/code&gt;在发送消息的过程中会做些&lt;strong&gt;通用业务处理&lt;/strong&gt;以及&lt;strong&gt;发送消息&lt;/strong&gt;，这个过程会产生大量的日志数据。日志数据会被收集至MQ，由&lt;code&gt;austin-stream&lt;/code&gt;流式处理模块进行消费并最后将数据写入至&lt;code&gt;austin-datahouse&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e4bd420001c549ebad922637f7b2e38a~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Question&lt;/strong&gt;：&lt;code&gt;austin-admin&lt;/code&gt;和&lt;code&gt;austin-web&lt;/code&gt;和&lt;code&gt;austin-cron&lt;/code&gt;的作用？&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;：&lt;code&gt;autsin-admin&lt;/code&gt;是&lt;code&gt;austin&lt;/code&gt;项目的前端项目，可通过它实现对管理消息以及查看消息下发的情况，而&lt;code&gt;austin-web&lt;/code&gt;则是提供相关的接口给到&lt;code&gt;austin-admin&lt;/code&gt;进行调用（austin项目是前后端分离的）&lt;/p&gt; &#xA;&lt;p&gt;业务方可操作&lt;code&gt;austin-admin&lt;/code&gt;管理后台调用&lt;code&gt;austin-web&lt;/code&gt;创建&lt;strong&gt;定时&lt;/strong&gt;发送消息，&lt;code&gt;austin-cron&lt;/code&gt;就承载着定时任务处理的工作&lt;/p&gt; &#xA;&lt;h2&gt;使用姿势&lt;/h2&gt; &#xA;&lt;p&gt;目前引用的中间件教程的安装姿势均基于&lt;code&gt;Centos 7.6&lt;/code&gt;(&lt;strong&gt;完全部署所有的服务，大概8G内存&lt;/strong&gt;)，austin项目&lt;strong&gt;强依赖&lt;/strong&gt;&lt;code&gt;MySQL&lt;/code&gt;/&lt;code&gt;Redis&lt;/code&gt;/&lt;code&gt;Kafka&lt;/code&gt;/&lt;code&gt;apollo&lt;/code&gt;，&lt;strong&gt;弱依赖&lt;/strong&gt;&lt;code&gt;prometheus&lt;/code&gt;/&lt;code&gt;graylog&lt;/code&gt;/&lt;code&gt;flink&lt;/code&gt;/&lt;code&gt;xxl-job&lt;/code&gt;。如果缺少相关的组件可戳：&lt;a href=&#34;https://raw.githubusercontent.com/ZhongFuCheng3y/austin/master/INSTALL.md&#34;&gt;安装相关组件教程&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;实在想要&lt;code&gt;clone&lt;/code&gt;项目后不用自己部署环境直接在本地启动&lt;code&gt;debug&lt;/code&gt;，我这提供了&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;amp;mid=2247505577&amp;amp;idx=1&amp;amp;sn=5114f8f583755899c2946fbea0b22e4b&amp;amp;chksm=ebd497a8dca31ebe8f98344483a00c860863dfc3586e51eed95b25988151427fee8101311f4f&amp;amp;token=735778370&amp;amp;lang=zh_CN#rd&#34;&gt;会员服务&lt;/a&gt;，&lt;strong&gt;直连&lt;/strong&gt;部署好的服务器&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;、austin使用的MySQL版本&lt;strong&gt;5.7x&lt;/strong&gt;。如果目前使用的MySQL版本8.0，注意改变&lt;code&gt;pom.xml&lt;/code&gt;所依赖的版本&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2&lt;/strong&gt;、填写&lt;code&gt;application.properties&lt;/code&gt;中&lt;code&gt;austin-database&lt;/code&gt;对应的&lt;code&gt;ip/port/username/password&lt;/code&gt;信息&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;3&lt;/strong&gt;、执行&lt;code&gt;sql&lt;/code&gt;文件夹下的&lt;code&gt;austin.sql&lt;/code&gt;创建对应的表以及插入测试数据&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;4&lt;/strong&gt;、填写&lt;code&gt;application.properties&lt;/code&gt;中&lt;code&gt;austin-kafka&lt;/code&gt;对应的&lt;code&gt;ip&lt;/code&gt;/&lt;code&gt;port&lt;/code&gt;信息&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;5&lt;/strong&gt;、填写&lt;code&gt;application.properties&lt;/code&gt;中&lt;code&gt;austin-redis&lt;/code&gt;对应的&lt;code&gt;ip&lt;/code&gt;/&lt;code&gt;port&lt;/code&gt;信息&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;6&lt;/strong&gt;、检查&lt;code&gt;apollo&lt;/code&gt;的&lt;code&gt;app.id&lt;/code&gt;/&lt;code&gt;apollo.bootstrap.namespaces&lt;/code&gt;，检查创建的消息队列topic：&lt;code&gt;austin.business.topic.name&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;7&lt;/strong&gt;、以上配置信息都在&lt;code&gt;application.properties&lt;/code&gt;文件中修改。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;8&lt;/strong&gt;、由于使用了Apollo且我是在云服务器上安装的，我这边会直接跳过&lt;code&gt;metaserver&lt;/code&gt;服务发现，在&lt;code&gt;AustinApplication&lt;/code&gt;需要配置对应的apollo地址(注意端口!)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;9&lt;/strong&gt;、发送渠道&lt;strong&gt;账号的信息&lt;/strong&gt;都配置在&lt;strong&gt;apollo&lt;/strong&gt;，配置的示例参照&lt;code&gt;com.java3y.austin.support.utils#getAccount&lt;/code&gt;中的注释&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;10&lt;/strong&gt;、调用http接口&lt;code&gt;com.java3y.austin.web.controller#send&lt;/code&gt;给自己发一条短信或者邮件感受&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl -XPOST &#34;127.0.0.1:8080/send&#34;  -H &#39;Content-Type: application/json&#39;  -d &#39;{&#34;code&#34;:&#34;send&#34;,&#34;messageParam&#34;:{&#34;extra&#34;:null,&#34;receiver&#34;:&#34;13719333899&#34;},&#34;messageTemplateId&#34;:1}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;11&lt;/strong&gt;、austin前端管理系统部署（一分钟即能打开），戳&lt;a href=&#34;https://github.com/ZhongFuCheng3y/austin-admin&#34;&gt;GitHub&lt;/a&gt;或&lt;a href=&#34;https://gitee.com/zhongfucheng/austin-admin&#34;&gt;Gitee&lt;/a&gt;查看&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a023d9082fa644bda9b50144e02985cb~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7125184e9fbf4de8b522aecbd4e791df~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4adde725eeee443baf96f286f5429f05~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/01d028359e6e4229825a7fd8cc22c6c7~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;12&lt;/strong&gt;、正常使用&lt;strong&gt;数据管理&lt;/strong&gt;(查看实时数据链路下发)需要将&lt;code&gt;austin-stream&lt;/code&gt;的&lt;code&gt;jar&lt;/code&gt;包上传至&lt;code&gt;Flink&lt;/code&gt;，根据&lt;a href=&#34;https://raw.githubusercontent.com/ZhongFuCheng3y/austin/master/INSTALL.md&#34;&gt;部署文档&lt;/a&gt;启动Flink。在打&lt;code&gt;jar&lt;/code&gt;包前需要填写&lt;code&gt;com.java3y.austin.stream.constants.AustinFlinkConstant&lt;/code&gt;中的&lt;code&gt;redis&lt;/code&gt;和&lt;code&gt;kafka&lt;/code&gt;的&lt;code&gt;ip/port&lt;/code&gt;（注：日志的topic在&lt;code&gt;application.properties&lt;/code&gt;中的&lt;code&gt;austin.business.log.topic.name&lt;/code&gt;。如果没有该topic，需要提前创建)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;13&lt;/strong&gt;、正常使用&lt;strong&gt;定时任务&lt;/strong&gt;需要部署&lt;code&gt;xxl-job&lt;/code&gt;，根据&lt;a href=&#34;https://raw.githubusercontent.com/ZhongFuCheng3y/austin/master/INSTALL.md&#34;&gt;部署文档&lt;/a&gt;启动xxl的调度中心，并在&lt;code&gt;application.properteis&lt;/code&gt;中填写 &lt;code&gt;austin-xxl-job-ip&lt;/code&gt;和&lt;code&gt;austin-xxl-job-port&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;14&lt;/strong&gt;、正常使用&lt;strong&gt;分布式日志采集&lt;/strong&gt;需要部署&lt;code&gt;graylog&lt;/code&gt;，根据&lt;a href=&#34;https://raw.githubusercontent.com/ZhongFuCheng3y/austin/master/INSTALL.md&#34;&gt;部署文档&lt;/a&gt;启动&lt;code&gt;graylog&lt;/code&gt;，并在&lt;code&gt;application.properteis&lt;/code&gt;中填写 &lt;code&gt;austin-grayLog-ip&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;14&lt;/strong&gt;、正常使用&lt;strong&gt;系统监控&lt;/strong&gt;需要部署&lt;code&gt;promethus&lt;/code&gt;和&lt;code&gt;grafana&lt;/code&gt;，根据&lt;a href=&#34;https://raw.githubusercontent.com/ZhongFuCheng3y/austin/master/INSTALL.md&#34;&gt;部署文档&lt;/a&gt;配置&lt;code&gt;grafana&lt;/code&gt;图表&lt;/p&gt; &#xA;&lt;h2&gt;会员服务&lt;/h2&gt; &#xA;&lt;p&gt;收费课程是以&lt;strong&gt;项目&lt;/strong&gt;为主，代码在Gitee和GitHub上都是开源的，项目没有商业版，后面也不会有。那么，付费跟我自己去拉Git仓库拉代码下来看有什么区别？&lt;/p&gt; &#xA;&lt;p&gt;1、有很多人的自学能力和基础确实不太行，不知道怎么开始学习，从哪开始看起，学习项目的过程中会走很多弯路，很容易就迷茫了。付费最跟自学最主要的区别就是&lt;strong&gt;我的服务会更周到&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;p&gt;我会告诉你怎么开始学这个开源项目，哪些是重点需要掌握的，如何利用最短的时间把握整个系统架构和编码的设计，把时间节省下来去做其他事情。&lt;/p&gt; &#xA;&lt;p&gt;2、一个生产环境的系统肯定会依赖各种中间件，《消息推送平台-Austin》也是一样的。我专门买了两台服务器已经搭建好必要的依赖，付费的可以&lt;strong&gt;使用我的远程服务器&lt;/strong&gt;，在&lt;strong&gt;本地就可以直接启动运行体验和学习&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;3、项目在编写的过程中也经历多次的重构迭代，迭代的内容我是不会将以往文章内容重新修正发布，但语雀的文档内容一定是&lt;strong&gt;及时同步&lt;/strong&gt;，文档跟代码是保持一致的&lt;/p&gt; &#xA;&lt;p&gt;4、除了项目，还可以问我些学习经验、学习路线、简历编写、面试经验等等问题，技术和学习上的知识&lt;strong&gt;知无不言&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;详情可以看戳：&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;amp;mid=2247505577&amp;amp;idx=1&amp;amp;sn=5114f8f583755899c2946fbea0b22e4b&amp;amp;chksm=ebd497a8dca31ebe8f98344483a00c860863dfc3586e51eed95b25988151427fee8101311f4f&amp;amp;token=319992632&amp;amp;lang=zh_CN#rd&#34;&gt;我开通了付费渠道&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;里程碑&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Maven+SpringBoot项目搭建&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; logback日志记录项目运行时信息，引入common/guava/Hutool/Lombok/fastjson/OkHttp工具包&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 接入腾讯云渠道发送一条短信&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 使用SpringData JPA将短信发送记录存储至MySQL&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 使用SpringBoot接入Kafka&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 利用责任链完成对接入层的请求进行封装（责任链模式）&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 消费层实现数据隔离（线程池：生产者与消费者模式）&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 通用去重消息功能（SpringBoot接入Redis并使用pipeline减少网络请求）&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 配置服务器和docker容器以及SpringBoot应用的监控（prometheus+Grafana+auctuator）&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 接入分布式配置中心完成 丢失消息、白名单以及账号配置（Apollo分布式配置中心）&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 邮件渠道接入&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 日志链路数据追踪 + 注解式打印日志（优雅打印日志以及数据埋点）&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 接入GrayLog分布式日志收集框架&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 引入前端低代码平台AMIS搭建后台管理页面&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 接入分布式定时任务框架定时发送任务（xxl-job定时任务框架），编写上传文件接口并使用LazyPending批处理人群文件数据&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 接入实时流计算平台（Flink），实时日志数据根据用户维度和消息模板维度清洗至Redis&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 通过AMIS低代码平台接入echarts图表展示实时聚合后的数据&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 优雅停机、动态线程池参数配置&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 企业微信渠道接入&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 夜间屏蔽次日早晨推送（xxl-job定时任务框架，另类的延时队列）&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 钉钉渠道接入&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 单机限流实现&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 引入单测框架，编写部分单测用例&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 接入微信服务号渠道(已有pull request代码)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 接入微信小程序渠道(已有pull request代码)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 接入PUSH渠道&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 总体架构已完成，持续做基础建设和优化代码&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;近期更新时间&lt;/strong&gt;：5月9号&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;近期更新功能&lt;/strong&gt;：接入个推PUSH，安卓发送推送消息&lt;/p&gt; &#xA;&lt;h2&gt;项目交流&lt;/h2&gt; &#xA;&lt;p&gt;欢迎扫描下方二维码添加我的&lt;strong&gt;个人微信&lt;/strong&gt;备注：【&lt;strong&gt;项目&lt;/strong&gt;】，我会空闲的时候拉进项目交流群（群里会解答相关的问题）&lt;/p&gt; &#xA;&lt;img align=&#34;center&#34; src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5eae548196934599a7cb3637aedf381d~tplv-k3u1fbpfcp-zoom-1.image&#34; width=&#34;300px&#34; height=&#34;300px&#34;&gt; &#xA;&lt;h2&gt;如何准备面试？&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;对线面试官&lt;/strong&gt;公众号持续更新&lt;strong&gt;面试系列&lt;/strong&gt;文章（对线面试官系列），深受各大开发的好评，已有不少的同学通过对线面试官系列得到BATTMD等一线大厂的的offer。一个&lt;strong&gt;讲人话的面试系列&lt;/strong&gt;，八股文不再是背诵。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c4a6cae132244355b9da6bd74d38d1ee~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;想要获取这份电子书，&lt;strong&gt;点击关注&lt;/strong&gt;下方公众号，回复「&lt;strong&gt;对线&lt;/strong&gt;」得到我的联系方式即可进群获取电子书&lt;/p&gt; &#xA;&lt;img align=&#34;center&#34; src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f87f574e93964921a4d02146bf3ccdac~tplv-k3u1fbpfcp-zoom-1.image&#34; width=&#34;300px&#34; height=&#34;300px&#34;&gt;</summary>
  </entry>
  <entry>
    <title>YunaiV/SpringBoot-Labs</title>
    <updated>2022-06-01T02:01:04Z</updated>
    <id>tag:github.com,2022-06-01:/YunaiV/SpringBoot-Labs</id>
    <link href="https://github.com/YunaiV/SpringBoot-Labs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;一个涵盖六个专栏：Spring Boot 2.X、Spring Cloud、Spring Cloud Alibaba、Dubbo、分布式消息队列、分布式事务的仓库。希望胖友小手一抖，右上角来个 Star，感恩 1024&lt;/p&gt;&lt;hr&gt;&lt;blockquote&gt; &#xA; &lt;p&gt;友情提示：因为提供了 50000+ 行示例代码，所以艿艿默认注释了所有 Maven Module。&lt;/p&gt; &#xA; &lt;p&gt;胖友可以根据自己的需要，修改 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/raw/master/pom.xml&#34;&gt;&lt;code&gt;pom.xml&lt;/code&gt;&lt;/a&gt; 即可。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;一个涵盖六个主流技术栈的&lt;strong&gt;正经&lt;/strong&gt;仓库：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs#spring-boot-%E4%B8%93%E6%A0%8F&#34;&gt;《Spring Boot 专栏》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs#spring-cloud-alibaba-%E4%B8%93%E6%A0%8F&#34;&gt;《Spring Cloud Alibaba 专栏》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs#spring-cloud-%E4%B8%93%E6%A0%8F&#34;&gt;《Spring Cloud 专栏》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs#Dubbo-%E4%B8%93%E6%A0%8F&#34;&gt;《Dubbo 专栏》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs#%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-mq-%E4%B8%93%E6%A0%8F&#34;&gt;《消息队列 MQ 专栏》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs#%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E4%B8%93%E6%A0%8F&#34;&gt;《分布式事务专栏》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;作为一个热爱&lt;strong&gt;深夜&lt;/strong&gt;撸码的 18 岁头发茂密的可爱小男孩，希望大佬能够&lt;strong&gt;一键三连&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://static.iocoder.cn/github-star.jpg&#34; alt=&#34;一间三连&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;亲，一键三连啊&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;交流群&lt;/h1&gt; &#xA;&lt;p&gt;扫码如下&lt;strong&gt;二维码&lt;/strong&gt;，回复「艿艿」关键字。&lt;/p&gt; &#xA;&lt;p&gt;可以添加 18 岁的我为好友，并拉你进一个&lt;del&gt;交流&lt;/del&gt;&lt;strong&gt;装逼群&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://www.iocoder.cn/images/common/erweima.jpg&#34; alt=&#34;骚气的二维码&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;😈 等后面，艿艿&lt;strong&gt;头发&lt;/strong&gt;重新长一点出来，给旁友们录制点视频哈！&lt;/p&gt; &#xA;&lt;h1&gt;Spring Boot 专栏&lt;/h1&gt; &#xA;&lt;p&gt;基于 Spring Boot 2.X 版本的&lt;strong&gt;深度&lt;/strong&gt;入门教程。&lt;/p&gt; &#xA;&lt;p&gt;市面上的 Spring Boot &lt;strong&gt;基础&lt;/strong&gt;入门文章很多，但是&lt;strong&gt;深度&lt;/strong&gt;入门文章却很少。对于很多开发者来说，入门即是其对某个技术栈的最终理解，一方面是开发者“比较懒”，另一方面是文章作者把 Spring Boot 入门写的太浅，又或者不够全面。&lt;/p&gt; &#xA;&lt;p&gt;因此，艿艿开始了这个 Spring Boot 专栏，一个&lt;strong&gt;深度&lt;/strong&gt;且&lt;strong&gt;全面&lt;/strong&gt;的 Spring Boot 2.X 入门。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;在带你快速学会 SpringMVC API 接口的编写的同时，我还想告诉你还有全局返回、全局异常、拦截器、跨域处理等等功能。&lt;/li&gt; &#xA; &lt;li&gt;在带你快速学会 MQ 消息的发送与消费的同时，我还想告诉你 MQ 还有集群消费、广播消费、顺序消息、定时消息、事务消息、消费重试等等特性。&lt;/li&gt; &#xA; &lt;li&gt;在带你快速学会 Job 任务的编写的同时，我还想告诉你还有 Quartz 单体、Quartz 集群、XXL-JOB 等等企业使用更多的调度平台。&lt;/li&gt; &#xA; &lt;li&gt;...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;让我们一起愉快的挖坑，挖深坑，哇哈哈。&lt;/p&gt; &#xA;&lt;h2&gt;打好基础&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/quick-start/?github&#34;&gt;《芋道 Spring Boot 快速入门》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/autoconfigure/?github&#34;&gt;《芋道 Spring Boot 自动配置原理》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-47&#34;&gt;lab-47&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/jar/?github&#34;&gt;《芋道 Spring Boot Jar 启动原理》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/build-debugging-environment-2-6-0/?github&#34;&gt;《芋道 Spring Boot 调试环境》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;开发工具&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/hot-swap/?github&#34;&gt;《芋道 Spring Boot 热部署入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-48-hot-swap&#34;&gt;lab-48-hot-swap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Lombok/?github&#34;&gt;《芋道 Spring Boot 消除冗余代码 Lombok 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-49&#34;&gt;lab-49&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/MapStruct/?github&#34;&gt;《芋道 Spring Boot 对象转换 MapStruct 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-55&#34;&gt;lab-55&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Web 开发&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/SpringMVC/?github&#34;&gt;《芋道 Spring Boot SpringMVC 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-23&#34;&gt;lab-23&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/WebFlux/?github&#34;&gt;《芋道 Spring Boot WebFlux 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-27&#34;&gt;lab-27&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Distributed-Session/?github&#34;&gt;《芋道 Spring Boot 分布式 Session 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-26&#34;&gt;lab-26&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Swagger/?github&#34;&gt;《芋道 Spring Boot API 接口文档 Swagger 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-24&#34;&gt;lab-24&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Swagger-Starter/?github&#34;&gt;《芋道 Spring Boot API 接口文档 Swagger Starter 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-24&#34;&gt;lab-24&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Validation/?github&#34;&gt;《芋道 Spring Boot 参数校验 Validation 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-22&#34;&gt;lab-22&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/WebSocket/?github&#34;&gt;《芋道 Spring Boot WebSocket 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-25&#34;&gt;lab-25&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Performance-Testing/Tomcat-Jetty-Undertow-benchmark/?github&#34;&gt;《性能测试 —— Tomcat、Jetty、Undertow 基准测试》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-05-benchmark-tomcat-jetty-undertow&#34;&gt;lab-05-benchmark-tomcat-jetty-undertow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Performance-Testing/SpringMVC-Webflux-benchmark/?github&#34;&gt;《性能测试 —— SpringMVC、Webflux 基准测试》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-06&#34;&gt;lab-06&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/JApiDocs/?github&#34;&gt;《芋道 Spring Boot API 接口文档 JApiDocs 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-24&#34;&gt;lab-24&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/ShowDoc/?github&#34;&gt;《芋道 Spring Boot API 接口文档 ShowDoc 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-24&#34;&gt;lab-24&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/IDEA-HTTP-Client/?github&#34;&gt;《芋道 Spring Boot API 接口调试 IDEA HTTP Client》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/raw/master/lab-71-http-debug/&#34;&gt;lab-71-http-debug&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;RPC 开发&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Netty/?github&#34;&gt;《芋道 Spring Boot Netty 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-67&#34;&gt;lab-67&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Dubbo/?github&#34;&gt;《芋道 Spring Boot Dubbo 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-30&#34;&gt;lab-30&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Feign/?github&#34;&gt;《芋道 Spring Boot 声明式调用 Feign 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-58&#34;&gt;lab-58&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/gRPC/?github&#34;&gt;《芋道 Spring Boot gRPC 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-64&#34;&gt;lab-64&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Web-Services/?github&#34;&gt;《芋道 Spring Boot Web Services 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-65&#34;&gt;lab-65&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/SOFARPC/?github&#34;&gt;《芋道 Spring Boot SOFARPC 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-62&#34;&gt;lab-62&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Motan/?github&#34;&gt;《芋道 Spring Boot Motan 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-63&#34;&gt;lab-63&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;《芋道 Spring Boot RSocket 入门》计划中...&lt;/li&gt; &#xA; &lt;li&gt;《芋道 Spring Boot Tars 入门》计划中...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;文件存储&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.iocoder.cn/Spring-Boot/MinIO/?github&#34;&gt;《芋道 Spring Boot 对象存储 MinIO 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-72-minio&#34;&gt;lab-72-minio&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;数据访问&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;关系数据库&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/datasource-pool/?github&#34;&gt;《芋道 Spring Boot 数据库连接池入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-19&#34;&gt;lab-19&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/MyBatis/?github&#34;&gt;《芋道 Spring Boot MyBatis 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-12-mybatis&#34;&gt;lab-12-mybatis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/JPA/?github&#34;&gt;《芋道 Spring Boot JPA 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-13-spring-data-jpa&#34;&gt;lab-13-spring-data-jpa&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/JdbcTemplate/?github&#34;&gt;《芋道 Spring Boot JdbcTemplate 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-14-spring-jdbc-template&#34;&gt;lab-14-spring-jdbc-template&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/dynamic-datasource/?github&#34;&gt;《芋道 Spring Boot 多数据源（读写分离）入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-17&#34;&gt;lab-17&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/sharding-datasource/?github&#34;&gt;《芋道 Spring Boot 分库分表入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-18&#34;&gt;lab-18&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/database-version-control/?github&#34;&gt;《芋道 Spring Boot 数据库版本管理入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-20&#34;&gt;lab-20&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/DB-Doc-screw/?github&#34;&gt;《芋道 Spring Boot 数据表结构文档》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-70-db-doc&#34;&gt;lab-70-db-doc&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;非关系数据库&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Redis/?github&#34;&gt;《芋道 Spring Boot Redis 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-11-spring-data-redis&#34;&gt;lab-11-spring-data-redis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Cache/?github&#34;&gt;《芋道 Spring Boot 缓存 Cache 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-21&#34;&gt;lab-21&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/MongoDB/?github&#34;&gt;《芋道 Spring Boot MongoDB 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-16-spring-data-mongo&#34;&gt;lab-16-spring-data-mongo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Elasticsearch/?github&#34;&gt;《芋道 Spring Boot Elasticsearch 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-15-spring-data-es&#34;&gt;lab-15-spring-data-es&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Solr/?github&#34;&gt;《芋道 Spring Boot Solr 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-66&#34;&gt;lab-66&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;事务管理&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Seata/?github&#34;&gt;《芋道 Spring Boot 分布式事务 Seata 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-52&#34;&gt;lab-52&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;安全控制&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Spring-Security/?github&#34;&gt;《芋道 Spring Boot 安全框架 Spring Security 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-01-spring-security&#34;&gt;lab-01-spring-security&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Shiro/?github&#34;&gt;《芋道 Spring Boot 安全框架 Shiro 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-33&#34;&gt;lab-33&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;OAuth 2.0&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Security/OAuth2-learning/?github&#34;&gt;《芋道 Spring Security OAuth2 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-68-spring-security-oauth&#34;&gt;lab-68-spring-security-oauth&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Security/OAuth2-learning-store/?github&#34;&gt;《芋道 Spring Security OAuth2 存储器》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-68-spring-security-oauth&#34;&gt;lab-68-spring-security-oauth&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Security/OAuth2-learning-sso/?github&#34;&gt;《芋道 Spring Security OAuth2 单点登陆》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-68-spring-security-oauth&#34;&gt;lab-68-spring-security-oauth&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;定时任务与异步任务&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Job/?github&#34;&gt;《芋道 Spring Boot 定时任务入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-28&#34;&gt;lab-28&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Async-Job/?github&#34;&gt;《芋道 Spring Boot 异步任务入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-29&#34;&gt;lab-29&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;消息队列&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/RocketMQ/?github&#34;&gt;《芋道 Spring Boot 消息队列 RocketMQ 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-31&#34;&gt;lab-31&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Kafka/?github&#34;&gt;《芋道 Spring Boot 消息队列 Kafka 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-03-kafka&#34;&gt;lab-03-kafka&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/RabbitMQ/?github&#34;&gt;《芋道 Spring Boot 消息队列 RabbitMQ 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-04-rabbitmq&#34;&gt;lab-04-rabbitmq&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/ActiveMQ/?github&#34;&gt;《芋道 Spring Boot 消息队列 ActiveMQ 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-32&#34;&gt;lab-32&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Event/?github&#34;&gt;《芋道 Spring Boot 事件机制 Event 入门》&lt;/a&gt; 对应 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-54&#34;&gt;lab-54&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;配置中心&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/config-file/?github&#34;&gt;《芋道 Spring Boot 配置文件入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-43&#34;&gt;lab-43&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/config-apollo/?github&#34;&gt;《芋道 Spring Boot 配置中心 Apollo 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-45&#34;&gt;lab-45&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/config-nacos/?github&#34;&gt;《芋道 Spring Boot 配置中心 Nacos 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-44&#34;&gt;lab-44&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;注册中心&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/registry-nacos/?github&#34;&gt;《芋道 Spring Boot 注册中心 Nacos 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-44&#34;&gt;lab-44&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;持续交付&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Jenkins/?github&#34;&gt;《芋道 Spring Boot 持续交付 Jenkins 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-41&#34;&gt;lab-41&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Unit-Test/?github&#34;&gt;《芋道 Spring Boot 单元测试 Test 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-42&#34;&gt;lab-42&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;《芋道 Spring Boot 容器 Docker 入门》计划中...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;服务容错&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Sentinel/?github&#34;&gt;《芋道 Spring Boot 服务容错 Sentinel 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-46&#34;&gt;lab-46&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Hystrix/?github&#34;&gt;《芋道 Spring Boot 服务容错 Hystrix 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-57&#34;&gt;lab-57&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Resilience4j/?github&#34;&gt;《芋道 Spring Boot 服务容错 Resilience4j 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-59&#34;&gt;lab-59&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;监控管理&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Sentry/?github&#34;&gt;《芋道 Spring Boot 异常管理平台 Sentry 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-51&#34;&gt;lab-51&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Actuator/?github&#34;&gt;《芋道 Spring Boot 监控端点 Actuator 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-34&#34;&gt;lab-34&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Admin/?github&#34;&gt;《芋道 Spring Boot 监控工具 Admin 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-35&#34;&gt;lab-35&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Prometheus-and-Grafana/?github&#34;&gt;《芋道 Spring Boot 监控平台 Prometheus + Grafana 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-36&#34;&gt;lab-36&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/CAT/?github&#34;&gt;《芋道 Spring Boot 监控平台 CAT 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-61&#34;&gt;lab-61&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;日志管理&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Logging/?github&#34;&gt;《芋道 Spring Boot 日志集成 Logging 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-37&#34;&gt;lab-37&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/ELK/?github&#34;&gt;《芋道 Spring Boot 日志平台 ELK + Filebeat 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-38&#34;&gt;lab-38&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;《芋道 Spring Boot 日志平台 Loki 入门》计划中...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;链路追踪&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/SkyWalking/?github&#34;&gt;《芋道 Spring Boot 链路追踪 SkyWalking 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-39&#34;&gt;lab-39&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Zipkin/?github&#34;&gt;《芋道 Spring Boot 链路追踪 Zipkin 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-40&#34;&gt;lab-40&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;《芋道 Spring Boot 链路追踪 Pinpoint 入门》计划中...&lt;/li&gt; &#xA; &lt;li&gt;《芋道 Spring Boot 链路追踪 Elastic APM 入门》计划中...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Spring Cloud Alibaba 专栏&lt;/h1&gt; &#xA;&lt;h2&gt;Spring Cloud Alibaba 全家桶&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud-Alibaba/intro/?github&#34;&gt;《芋道 Spring Cloud Alibaba 介绍》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud-Alibaba/Nacos-Discovery/?github&#34;&gt;《芋道 Spring Cloud Alibaba 注册中心 Nacos 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-01-spring-cloud-alibaba-nacos-discovery&#34;&gt;labx-01-spring-cloud-alibaba-nacos-discovery&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud-Alibaba/Dubbo/?github&#34;&gt;《芋道 Spring Cloud Alibaba 服务调用 Dubbo 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-07-spring-cloud-alibaba-dubbo&#34;&gt;labx-07-spring-cloud-alibaba-dubbo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud-Alibaba/Sentinel/?github&#34;&gt;《芋道 Spring Cloud Alibaba 服务容错 Sentinel 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-04-spring-cloud-alibaba-sentinel&#34;&gt;labx-04-spring-cloud-alibaba-sentinel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud-Alibaba/RocketMQ/?github&#34;&gt;《芋道 Spring Cloud Alibaba 消息队列 RocketMQ 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-06-spring-cloud-stream-rocketmq&#34;&gt;labx-06-spring-cloud-stream-rocketmq&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud-Alibaba/Bus-RocketMQ/?github&#34;&gt;《芋道 Spring Cloud Alibaba 事件总线 Bus RocketMQ 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-20&#34;&gt;labx-20&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud-Alibaba/Nacos-Config/?github&#34;&gt;《芋道 Spring Cloud Alibaba 配置中心 Nacos 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-05-spring-cloud-alibaba-nacos-config&#34;&gt;labx-05-spring-cloud-alibaba-nacos-config&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud-Alibaba/Seata/?github&#34;&gt;《芋道 Spring Cloud Alibaba 分布式事务 Seata 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-17&#34;&gt;labx-17&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;推荐搭配食用&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud-Netflix/Ribbon/?github&#34;&gt;《芋道 Spring Cloud Netflix 负载均衡 Ribbon 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-02-spring-cloud-netflix-ribbon&#34;&gt;labx-02-spring-cloud-netflix-ribbon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud/Feign/?github&#34;&gt;《芋道 Spring Cloud 声明式调用 Feign 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-03-spring-cloud-feign&#34;&gt;labx-03-spring-cloud-feign&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud/Spring-Cloud-Gateway/?github&#34;&gt;《芋道 Spring Cloud 服务网关 Spring Cloud Gateway 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-08-spring-cloud-gateway&#34;&gt;labx-08-spring-cloud-gateway&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud/SkyWalking/?github&#34;&gt;《芋道 Spring Cloud 链路追踪 SkyWalking 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-14&#34;&gt;labx-14&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Dubbo/Admin/?github&#34;&gt;《芋道 Dubbo Admin 快速入门》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Dubbo/Swagger/?github&#34;&gt;《芋道 Dubbo Swagger 快速入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/swagger-dubbo&#34;&gt;swagger-dubbo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Spring Cloud 专栏&lt;/h1&gt; &#xA;&lt;h2&gt;注册中心&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud-Alibaba/Nacos-Discovery/?github&#34;&gt;《芋道 Spring Cloud Alibaba 注册中心 Nacos 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-01-spring-cloud-alibaba-nacos-discovery&#34;&gt;labx-01-spring-cloud-alibaba-nacos-discovery&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud/Netflix-Eureka?github&#34;&gt;《芋道 Spring Cloud Netflix 注册中心 Eureka 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-22&#34;&gt;labx-22&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud/ZooKeeper-Discovery/?github&#34;&gt;《芋道 Spring Cloud 注册中心 Zookeeper 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-25&#34;&gt;labx-25&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud/Consul-Discovery/?github&#34;&gt;《芋道 Spring Cloud 注册中心 Consul 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-27&#34;&gt;labx-27&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud/Etcd/?github&#34;&gt;《芋道 Spring Cloud 注册中心 Etcd 入门》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;服务调用&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud-Alibaba/Dubbo/?github&#34;&gt;《芋道 Spring Cloud Alibaba 服务调用 Dubbo 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-07-spring-cloud-alibaba-dubbo&#34;&gt;labx-07-spring-cloud-alibaba-dubbo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud-Netflix/Ribbon/?github&#34;&gt;《芋道 Spring Cloud Netflix 负载均衡 Ribbon 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-02-spring-cloud-netflix-ribbon&#34;&gt;labx-02-spring-cloud-netflix-ribbon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud/Feign/?github&#34;&gt;《芋道 Spring Cloud 声明式调用 Feign 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-03-spring-cloud-feign&#34;&gt;labx-03-spring-cloud-feign&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud/gRPC/?github&#34;&gt;《芋道 Spring Cloud 服务调用 gRPC 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-30-spring-cloud-grpc&#34;&gt;labx-30-spring-cloud-grpc&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;服务容错&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud-Alibaba/Sentinel/?github&#34;&gt;《芋道 Spring Cloud Alibaba 服务容错 Sentinel 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-04-spring-cloud-alibaba-sentinel&#34;&gt;labx-04-spring-cloud-alibaba-sentinel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud/Netflix-Hystrix/?github&#34;&gt;《芋道 Spring Cloud Netflix 服务容错 Hystrix 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-23&#34;&gt;labx-23&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud/Resilience4j/?github&#34;&gt;《芋道 Spring Cloud 服务容错 Resilience4j 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-59&#34;&gt;lab-59&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;《芋道 Spring Cloud 服务容错 Spring Cloud CircuitBreaker》计划中...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;API 网关&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud/Spring-Cloud-Gateway/?github&#34;&gt;《芋道 Spring Cloud 服务网关 Spring Cloud Gateway 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-08-spring-cloud-gateway&#34;&gt;labx-08-spring-cloud-gateway&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud/Netflix-Zuul/?github&#34;&gt;《芋道 Spring Cloud Netflix 服务网关 Zuul 入门》&lt;/a&gt; 对应 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-21&#34;&gt;labx-21&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Performance-Testing/SpringCloudGateway-Zuul-benchmark/?github&#34;&gt;《性能测试 —— Spring Cloud Gateway、Zuul 基准测试》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-07&#34;&gt;lab-07&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;如下非 Spring Cloud 网关，先放在这里...&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/APISIX/install/?github&#34;&gt;《芋道 APISIX 极简入门（国产微服务网关）》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-56&#34;&gt;lab-56&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Soul/install/?github&#34;&gt;《芋道 Soul 极简入门（国产微服务网关）》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-60&#34;&gt;lab-60&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Kong/install/?github&#34;&gt;《芋道 Kong 极简入门（微服务网关）》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-56&#34;&gt;lab-56&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;配置中心&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud-Alibaba/Nacos-Config/?github&#34;&gt;《芋道 Spring Cloud Alibaba 配置中心 Nacos 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-05-spring-cloud-alibaba-nacos-config&#34;&gt;labx-05-spring-cloud-alibaba-nacos-config&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud/Apollo/?github&#34;&gt;《芋道 Spring Cloud 配置中心 Apollo 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-09-spring-cloud-apollo&#34;&gt;labx-09-spring-cloud-apollo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud/Spring-Cloud-Config/?github&#34;&gt;《芋道 Spring Cloud 配置中心 Spring Cloud Config 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-12-spring-cloud-config&#34;&gt;labx-12-spring-cloud-config&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud/ZooKeeper-Config/?github&#34;&gt;《芋道 Spring Cloud 配置中心 Zookeeper 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-26&#34;&gt;labx-26&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud/Consul-Config/?github&#34;&gt;《芋道 Spring Cloud 配置中心 Consul 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-28&#34;&gt;labx-28&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud/Etcd/?github&#34;&gt;《芋道 Spring Cloud 配置中心 Etcd 入门》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;消息队列&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Spring Cloud Stream&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud-Alibaba/RocketMQ/?github&#34;&gt;《芋道 Spring Cloud Alibaba 消息队列 RocketMQ 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-06-spring-cloud-stream-rocketmq&#34;&gt;labx-06-spring-cloud-stream-rocketmq&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud/RabbitMQ/?github&#34;&gt;《芋道 Spring Cloud 消息队列 RabbitMQ 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-10-spring-cloud-stream-rabbitmq&#34;&gt;labx-10-spring-cloud-stream-rabbitmq&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud/Kafka/?github&#34;&gt;《芋道 Spring Cloud 消息队列 Kafka 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-11-spring-cloud-stream-kafka&#34;&gt;labx-11-spring-cloud-stream-kafka&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud/ActiveMQ/?github&#34;&gt;《芋道 Spring Cloud 消息队列 ActiveMQ 入门》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Spring Cloud Bus&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud-Alibaba/Bus-RocketMQ/?github&#34;&gt;《芋道 Spring Cloud Alibaba 事件总线 Bus RocketMQ 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-20&#34;&gt;labx-20&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud/Bus-RabbitMQ/?github&#34;&gt;《芋道 Spring Cloud 事件总线 Bus RabbitMQ 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-19&#34;&gt;labx-19&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud/Bus-Kafka/?github&#34;&gt;《芋道 Spring Cloud 事件总线 Bus Kafka 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-18&#34;&gt;labx-18&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud/Bus-Consul/?github&#34;&gt;《芋道 Spring Cloud 事件总线 Bus Consul 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-29-spring-cloud-consul-bus&#34;&gt;labx-29-spring-cloud-consul-bus&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;分布式事务&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud-Alibaba/Seata/?github&#34;&gt;《芋道 Spring Cloud Alibaba 分布式事务 Seata 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-17&#34;&gt;labx-17&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;监控管理&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Sentry/?github&#34;&gt;《芋道 Spring Boot 异常管理平台 Sentry 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-51&#34;&gt;lab-51&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Actuator/?github&#34;&gt;《芋道 Spring Boot 监控端点 Actuator 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-34&#34;&gt;lab-34&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud/SB-Admin/?github&#34;&gt;《芋道 Spring Cloud 监控工具 Admin 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-15&#34;&gt;labx-15&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Prometheus-and-Grafana/?github&#34;&gt;《芋道 Spring Boot 监控平台 Prometheus + Grafana 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-36&#34;&gt;lab-36&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;持续交付&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud/Jenkins/?github&#34;&gt;《芋道 Spring Cloud 持续交付 Jenkins 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-16&#34;&gt;labx-16&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Unit-Test/?github&#34;&gt;《芋道 Spring Boot 单元测试 Test 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-42&#34;&gt;lab-42&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;《芋道 Spring Cloud 容器 Docker 入门》计划中...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;链路追踪&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud/SkyWalking/?github&#34;&gt;《芋道 Spring Cloud 链路追踪 SkyWalking 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-14&#34;&gt;labx-14&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud/Spring-Cloud-Sleuth/?github&#34;&gt;《芋道 Spring Cloud 链路追踪 Spring Cloud Sleuth》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-13&#34;&gt;labx-13&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Dubbo 专栏&lt;/h1&gt; &#xA;&lt;h2&gt;基础入门&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Dubbo/?github&#34;&gt;《芋道 Spring Boot Dubbo 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-30&#34;&gt;lab-30&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud-Alibaba/Dubbo/?github&#34;&gt;《芋道 Spring Cloud Alibaba 服务调用 Dubbo 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-07-spring-cloud-alibaba-dubbo&#34;&gt;labx-07-spring-cloud-alibaba-dubbo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Performance-Testing/Dubbo-benchmark/?github&#34;&gt;《性能测试 —— Dubbo 基准测试》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Dubbo/Swagger/?github&#34;&gt;《芋道 Dubbo Swagger 快速入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/swagger-dubbo&#34;&gt;swagger-dubbo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;注册中心&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://www.iocoder.cn/Zookeeper/install/?github&#34;&gt;Zookeeper&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Dubbo/?github&#34;&gt;《芋道 Spring Boot Dubbo 入门》&lt;/a&gt;的&lt;a href=&#34;https://raw.githubusercontent.com/YunaiV/SpringBoot-Labs/master/#&#34;&gt;「2. XML 配置」&lt;/a&gt;和&lt;a href=&#34;https://raw.githubusercontent.com/YunaiV/SpringBoot-Labs/master/#&#34;&gt;「3. 注解配置」&lt;/a&gt;小节&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://www.iocoder.cn/Nacos/install/?github&#34;&gt;Nacos&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Dubbo/?github&#34;&gt;《芋道 Spring Boot Dubbo 入门》&lt;/a&gt;的&lt;a href=&#34;https://raw.githubusercontent.com/YunaiV/SpringBoot-Labs/master/#&#34;&gt;「6. 整合 Nacos」&lt;/a&gt;小节&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud-Alibaba/Dubbo/?github&#34;&gt;《芋道 Spring Cloud Alibaba 服务调用 Dubbo 入门》&lt;/a&gt;的&lt;a href=&#34;https://raw.githubusercontent.com/YunaiV/SpringBoot-Labs/master/#&#34;&gt;「2. 快速入门」&lt;/a&gt;小节&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;服务容错&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://www.iocoder.cn/Sentinel/install/?github&#34;&gt;Sentinel&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Dubbo/?github&#34;&gt;《芋道 Spring Boot Dubbo 入门》&lt;/a&gt;的&lt;a href=&#34;https://raw.githubusercontent.com/YunaiV/SpringBoot-Labs/master/#&#34;&gt;「7. 整合 Sentinel」&lt;/a&gt;小节&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud-Alibaba/Dubbo/?github&#34;&gt;《芋道 Spring Cloud Alibaba 服务调用 Dubbo 入门》&lt;/a&gt;的&lt;a href=&#34;https://raw.githubusercontent.com/YunaiV/SpringBoot-Labs/master/#&#34;&gt;「6. 整合 Sentinel」&lt;/a&gt;小节&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://www.iocoder.cn/categories/Hystrix/?github&#34;&gt;Hystrix&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Hystrix/?github&#34;&gt;《芋道 Spring Boot 服务容错 Hystrix 入门》&lt;/a&gt;的&lt;a href=&#34;https://raw.githubusercontent.com/YunaiV/SpringBoot-Labs/master/#&#34;&gt;「6. 集成到 Dubbo」&lt;/a&gt;小节&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud/Netflix-Hystrix/?github&#34;&gt;《芋道 Spring Cloud Netflix 服务容错 Hystrix 入门》&lt;/a&gt;的&lt;a href=&#34;https://raw.githubusercontent.com/YunaiV/SpringBoot-Labs/master/#&#34;&gt;「10. 集成到 Dubbo」&lt;/a&gt;小节&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://www.iocoder.cn/categories/Resilience4j/?github&#34;&gt;Resilience4j&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Resilience4j/?github&#34;&gt;《芋道 Spring Boot 服务容错 Resilience4j 入门》&lt;/a&gt;的&lt;a href=&#34;https://raw.githubusercontent.com/YunaiV/SpringBoot-Labs/master/#&#34;&gt;「10. 集成到 Dubbo」&lt;/a&gt;小节&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;API 网关&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Soul/install/?github&#34;&gt;《芋道 Soul 极简入门（国产微服务网关）》&lt;/a&gt;的&lt;a href=&#34;https://raw.githubusercontent.com/YunaiV/SpringBoot-Labs/master/#&#34;&gt;「3. 接入 Dubbo 应用」&lt;/a&gt;小节&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;分布式事务&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://www.iocoder.cn/Seata/install/?github&#34;&gt;Seata&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Dubbo/Seata/?github&#34;&gt;《芋道 Dubbo 分布式事务 Seata 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-53&#34;&gt;lab-53&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud-Alibaba/Seata/?github&#34;&gt;《芋道 Spring Cloud Alibaba 分布式事务 Seata 入门》&lt;/a&gt;的&lt;a href=&#34;https://raw.githubusercontent.com/YunaiV/SpringBoot-Labs/master/#&#34;&gt;「2. AT 模式 + Dubbo」&lt;/a&gt;小节&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://www.iocoder.cn/categories/TCC-Transaction/?github&#34;&gt;TCC Transaction&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/TCC-Transaction/dubbo-support/?self&#34;&gt;《TCC-Transaction 源码分析 —— Dubbo 支持》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;链路追踪&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://www.iocoder.cn/SkyWalking/install/?github&#34;&gt;SkyWalking&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/SkyWalking/?github&#34;&gt;《芋道 Spring Boot 链路追踪 SkyWalking 入门》&lt;/a&gt; 的&lt;a href=&#34;https://raw.githubusercontent.com/YunaiV/SpringBoot-Labs/master/#&#34;&gt;「16. Dubbo 示例」&lt;/a&gt;小节&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud/SkyWalking/?github&#34;&gt;《芋道 Spring Cloud 链路追踪 SkyWalking 入门》&lt;/a&gt; 的&lt;a href=&#34;https://raw.githubusercontent.com/YunaiV/SpringBoot-Labs/master/#&#34;&gt;「7. Dubbo 示例」&lt;/a&gt;小节&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://www.iocoder.cn/Zipkin/install/?github&#34;&gt;Zipkin&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud/Spring-Cloud-Sleuth/?github&#34;&gt;《芋道 Spring Boot 链路追踪 Zipkin》&lt;/a&gt; 的&lt;a href=&#34;https://raw.githubusercontent.com/YunaiV/SpringBoot-Labs/master/#&#34;&gt;「13. Dubbo 示例」&lt;/a&gt;小节&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud/Spring-Cloud-Sleuth/?github&#34;&gt;《芋道 Spring Cloud 链路追踪 Spring Cloud Sleuth》&lt;/a&gt; 的&lt;a href=&#34;https://raw.githubusercontent.com/YunaiV/SpringBoot-Labs/master/#&#34;&gt;「7. Dubbo 示例」&lt;/a&gt;小节&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;监控管理&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://www.iocoder.cn/CAT/install/?github&#34;&gt;CAT&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/CAT/?github&#34;&gt;《芋道 Spring Boot 监控平台 CAT 入门》&lt;/a&gt; 的&lt;a href=&#34;https://raw.githubusercontent.com/YunaiV/SpringBoot-Labs/master/#&#34;&gt;「13. Dubbo 集成」&lt;/a&gt;小节&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://www.iocoder.cn/Dubbo/Admin/?github&#34;&gt;Dubbo Admin&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Dubbo/Admin/?github&#34;&gt;《芋道 Dubbo Admin 快速入门》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;消息队列 MQ 专栏&lt;/h1&gt; &#xA;&lt;h2&gt;RocketMQ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/RocketMQ/install/?github&#34;&gt;《RocketMQ 极简入门》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/RocketMQ/?github&#34;&gt;《芋道 Spring Boot 消息队列 RocketMQ 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-31&#34;&gt;lab-31&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud-Alibaba/RocketMQ/?github&#34;&gt;《芋道 Spring Cloud Alibaba 消息队列 RocketMQ 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-06-spring-cloud-stream-rocketmq&#34;&gt;labx-06-spring-cloud-stream-rocketmq&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud-Alibaba/Bus-RocketMQ/?github&#34;&gt;《芋道 Spring Cloud Alibaba 事件总线 Bus RocketMQ 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-20&#34;&gt;labx-20&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/categories/RocketMQ/?github&#34;&gt;《芋道 RocketMQ 源码解析系列》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Performance-Testing/RocketMQ-benchmark/?github&#34;&gt;《性能测试 —— RocketMQ 基准测试》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Books/RocketMQ-books-recommended/?github&#34;&gt;《RocketMQ 书单整理》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;RabbitMQ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/RabbitMQ/install/?github&#34;&gt;《RabbitMQ 极简入门》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/RabbitMQ/?github&#34;&gt;《芋道 Spring Boot 消息队列 RabbitMQ 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-04-rabbitmq&#34;&gt;lab-04-rabbitmq&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud/RabbitMQ/?github&#34;&gt;《芋道 Spring Cloud 消息队列 RabbitMQ 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-10-spring-cloud-stream-rabbitmq&#34;&gt;labx-10-spring-cloud-stream-rabbitmq&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud/Bus-RabbitMQ/?github&#34;&gt;《芋道 Spring Cloud 事件总线 Bus RabbitMQ 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-19&#34;&gt;labx-19&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Books/RabbitMQ-books-recommended/?github&#34;&gt;《RabbitMQ 书单整理》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Kafka&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Kafka/install/?github&#34;&gt;《Kafka 极简入门》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Kafka/?github&#34;&gt;《芋道 Spring Boot 消息队列 Kafka 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-03&#34;&gt;lab-03&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud/Kafka/?github&#34;&gt;《芋道 Spring Cloud 消息队列 Kafka 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-11-spring-cloud-stream-kafka&#34;&gt;labx-11-spring-cloud-stream-kafka&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud/Bus-Kafka/?github&#34;&gt;《芋道 Spring Cloud 事件总线 Bus Kafka 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/labx-18&#34;&gt;labx-18&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Books/Kafka-books-recommended/?github&#34;&gt;《Kafka 书单整理》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ActiveMQ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/ActiveMQ/install/?github&#34;&gt;《ActiveMQ 极简入门》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/ActiveMQ/?github&#34;&gt;《芋道 Spring Boot 消息队列 ActiveMQ 入门》&lt;/a&gt; 对应 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-32&#34;&gt;lab-32&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud/ActiveMQ/?github&#34;&gt;《芋道 Spring Cloud 消息队列 ActiveMQ 入门》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;分布式事务专栏&lt;/h1&gt; &#xA;&lt;p&gt;目前分布式事务的解决方案有 AT、TCC、Saga、MQ、XA、BED 六种。&lt;/p&gt; &#xA;&lt;h2&gt;AT 方案&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Seata/?github&#34;&gt;《芋道 Spring Boot 分布式事务 Seata 入门》&lt;/a&gt;的&lt;a href=&#34;https://raw.githubusercontent.com/YunaiV/SpringBoot-Labs/master/#&#34;&gt;「2. AT 模式 + 多数据源」&lt;/a&gt;小节，实现单体 Spring Boot 项目在多数据源下的分布式事务&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/Seata/?github&#34;&gt;《芋道 Spring Boot 分布式事务 Seata 入门》&lt;/a&gt;的&lt;a href=&#34;https://raw.githubusercontent.com/YunaiV/SpringBoot-Labs/master/#&#34;&gt;「AT 模式 + HttpClient 远程调用」&lt;/a&gt;小节，实现多个 Spring Boot 项目的分布式事务&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Dubbo/Seata/?github&#34;&gt;《芋道 Dubbo 分布式事务 Seata 入门》&lt;/a&gt; 的&lt;a href=&#34;https://raw.githubusercontent.com/YunaiV/SpringBoot-Labs/master/#&#34;&gt;「2. AT 模式」&lt;/a&gt;小节，实现多个 Dubbo 服务的分布式事务。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud-Alibaba/Seata/?github&#34;&gt;《芋道 Spring Cloud Alibaba 分布式事务 Seata 入门》&lt;/a&gt;的&lt;a href=&#34;https://raw.githubusercontent.com/YunaiV/SpringBoot-Labs/master/#&#34;&gt;「3. AT 模式 + Feign」&lt;/a&gt;小节，实现多个 Spring Cloud 服务下的分布式事务。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;TCC 方案&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/categories/TCC-Transaction/?github&#34;&gt;《TCC-Transaction 源码解析系列》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Saga 方案&lt;/h2&gt; &#xA;&lt;h2&gt;MQ 方案&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/RocketMQ/?github&#34;&gt;《芋道 Spring Boot 消息队列 RocketMQ 入门》&lt;/a&gt; 的&lt;a href=&#34;https://raw.githubusercontent.com/YunaiV/SpringBoot-Labs/master/#&#34;&gt;「9. 事务消息」&lt;/a&gt;小节&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud-Alibaba/RocketMQ/?github&#34;&gt;《芋道 Spring Cloud Alibaba 消息队列 RocketMQ 入门》&lt;/a&gt; 的&lt;a href=&#34;https://raw.githubusercontent.com/YunaiV/SpringBoot-Labs/master/#&#34;&gt;「10. 事务消息」&lt;/a&gt;小节&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/RocketMQ/message-transaction/?github&#34;&gt;《RocketMQ 源码分析 —— 事务消息》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;XA 方案&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/MyCAT/xa-distributed-transaction/?github&#34;&gt;《MyCAT 源码分析 —— XA分布式事务》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;BED 方案&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Sharding-JDBC/transaction-bed/?github&#34;&gt;《Sharding-JDBC 源码分析 —— 分布式事务（一）之最大努力型》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;如下是草稿目录，未来需要整理下&lt;/p&gt; &#xA;&lt;h1&gt;lab-50&lt;/h1&gt; &#xA;&lt;p&gt;Email 示例&lt;/p&gt; &#xA;&lt;h1&gt;lab-69-proxy&lt;/h1&gt; &#xA;&lt;p&gt;动态代理&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jeremylong/DependencyCheck</title>
    <updated>2022-06-01T02:01:04Z</updated>
    <id>tag:github.com,2022-06-01:/jeremylong/DependencyCheck</id>
    <link href="https://github.com/jeremylong/DependencyCheck" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OWASP dependency-check is a software composition analysis utility that detects publicly disclosed vulnerabilities in application dependencies.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://mvnrepository.com/artifact/org.owasp/dependency-check-maven&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/org.owasp/dependency-check-maven.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/jeremylong/DependencyCheck/workflows/Build%20and%20Deploy/badge.svg?branch=main&#34; alt=&#34;Build and Deploy&#34;&gt; &lt;a href=&#34;https://scan.coverity.com/projects/dependencycheck&#34;&gt;&lt;img src=&#34;https://img.shields.io/coverity/scan/1654.svg?sanitize=true&#34; alt=&#34;Coverity Scan Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codacy.com/app/jeremylong/DependencyCheck?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=jeremylong/DependencyCheck&amp;amp;utm_campaign=Badge_Grade&#34;&gt;&lt;img src=&#34;https://api.codacy.com/project/badge/Grade/6b6021d481dc41a888c5da0d9ecf9494&#34; alt=&#34;Codacy Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/843&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/843/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%202-blue.svg?sanitize=true&#34; alt=&#34;Apache 2.0 License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.toolswatch.org/2018/05/black-hat-arsenal-usa-2018-the-w0w-lineup/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/toolswatch/badges/master/arsenal/usa/2018.svg?sanitize=true&#34; alt=&#34;Black Hat Arsenal&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.toolswatch.org/2015/06/black-hat-arsenal-usa-2015-speakers-lineup/&#34;&gt;&lt;img src=&#34;https://www.toolswatch.org/badges/arsenal/2015.svg?sanitize=true&#34; alt=&#34;Black Hat Arsenal&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.toolswatch.org/2014/06/black-hat-usa-2014-arsenal-tools-speaker-list/&#34;&gt;&lt;img src=&#34;https://www.toolswatch.org/badges/arsenal/2014.svg?sanitize=true&#34; alt=&#34;Black Hat Arsenal&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.toolswatch.org/2013/06/announcement-blackhat-arsenal-usa-2013-selected-tools/&#34;&gt;&lt;img src=&#34;https://www.toolswatch.org/badges/arsenal/2013.svg?sanitize=true&#34; alt=&#34;Black Hat Arsenal&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Dependency-Check&lt;/h1&gt; &#xA;&lt;p&gt;Dependency-Check is a Software Composition Analysis (SCA) tool that attempts to detect publicly disclosed vulnerabilities contained within a project&#39;s dependencies. It does this by determining if there is a Common Platform Enumeration (CPE) identifier for a given dependency. If found, it will generate a report linking to the associated CVE entries.&lt;/p&gt; &#xA;&lt;p&gt;Documentation and links to production binary releases can be found on the &lt;a href=&#34;http://jeremylong.github.io/DependencyCheck/&#34;&gt;github pages&lt;/a&gt;. Additionally, more information about the architecture and ways to extend dependency-check can be found on the &lt;a href=&#34;https://github.com/jeremylong/DependencyCheck/wiki&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;7.0.0 Upgrade Notice&lt;/h2&gt; &#xA;&lt;p&gt;If upgrading to 7.0.0 or higher, there were breaking changes. If you get an error indicating you can&#39;t connect to the database you will need to run the purge command to remove the old database:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;gradle: &lt;code&gt;./gradlew dependencyCheckPurge&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;maven: &lt;code&gt;mvn org.owasp:dependency-check-maven:7.0.0:purge&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;cli: &lt;code&gt;dependency-check.sh --purge&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Homebrew users upgrading to dependency-check 7.0.0 will need to purge their old database.&lt;/p&gt; &#xA;&lt;h2&gt;Current Releases&lt;/h2&gt; &#xA;&lt;h3&gt;Jenkins Plugin&lt;/h3&gt; &#xA;&lt;p&gt;For instructions on the use of the Jenkins plugin please see the &lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/OWASP+Dependency-Check+Plugin&#34;&gt;OWASP Dependency-Check Plugin page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Command Line&lt;/h3&gt; &#xA;&lt;p&gt;More detailed instructions can be found on the &lt;a href=&#34;http://jeremylong.github.io/DependencyCheck/dependency-check-cli/&#34;&gt;dependency-check github pages&lt;/a&gt;. The latest CLI can be downloaded from github in the &lt;a href=&#34;https://github.com/jeremylong/DependencyCheck/releases&#34;&gt;releases section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On *nix&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./bin/dependency-check.sh -h&#xA;$ ./bin/dependency-check.sh --out . --scan [path to jar files to be scanned]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; .\bin\dependency-check.bat -h&#xA;&amp;gt; .\bin\dependency-check.bat --out . --scan [path to jar files to be scanned]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Mac with &lt;a href=&#34;http://brew.sh&#34;&gt;Homebrew&lt;/a&gt; Note - homebrew users upgrading from 5.x to 6.0.0 will need to run &lt;code&gt;dependency-check.sh --purge&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ brew update &amp;amp;&amp;amp; brew install dependency-check&#xA;$ dependency-check -h&#xA;$ dependency-check --out . --scan [path to jar files to be scanned]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Maven Plugin&lt;/h3&gt; &#xA;&lt;p&gt;More detailed instructions can be found on the &lt;a href=&#34;http://jeremylong.github.io/DependencyCheck/dependency-check-maven&#34;&gt;dependency-check-maven github pages&lt;/a&gt;. By default, the plugin is tied to the &lt;code&gt;verify&lt;/code&gt; phase (i.e. &lt;code&gt;mvn verify&lt;/code&gt;). Alternatively, one can directly invoke the plugin via &lt;code&gt;mvn org.owasp:dependency-check-maven:check&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The dependency-check plugin can be configured using the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;project&amp;gt;&#xA;    &amp;lt;build&amp;gt;&#xA;        &amp;lt;plugins&amp;gt;&#xA;            ...&#xA;            &amp;lt;plugin&amp;gt;&#xA;              &amp;lt;groupId&amp;gt;org.owasp&amp;lt;/groupId&amp;gt;&#xA;              &amp;lt;artifactId&amp;gt;dependency-check-maven&amp;lt;/artifactId&amp;gt;&#xA;              &amp;lt;executions&amp;gt;&#xA;                  &amp;lt;execution&amp;gt;&#xA;                      &amp;lt;goals&amp;gt;&#xA;                          &amp;lt;goal&amp;gt;check&amp;lt;/goal&amp;gt;&#xA;                      &amp;lt;/goals&amp;gt;&#xA;                  &amp;lt;/execution&amp;gt;&#xA;              &amp;lt;/executions&amp;gt;&#xA;            &amp;lt;/plugin&amp;gt;&#xA;            ...&#xA;        &amp;lt;/plugins&amp;gt;&#xA;        ...&#xA;    &amp;lt;/build&amp;gt;&#xA;    ...&#xA;&amp;lt;/project&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ant Task&lt;/h3&gt; &#xA;&lt;p&gt;For instructions on the use of the Ant Task, please see the &lt;a href=&#34;http://jeremylong.github.io/DependencyCheck/dependency-check-ant&#34;&gt;dependency-check-ant github page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;For installation to pass, you must have the following components installed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Java: &lt;code&gt;java -version&lt;/code&gt; 1.8&lt;/li&gt; &#xA; &lt;li&gt;Maven: &lt;code&gt;mvn -version&lt;/code&gt; 3.5.0 and higher&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Tests cases require:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;dotnet core version 6.0&lt;/li&gt; &#xA; &lt;li&gt;Go: &lt;code&gt;go version&lt;/code&gt; 1.12 and higher&lt;/li&gt; &#xA; &lt;li&gt;Ruby &lt;a href=&#34;https://github.com/rubysec/bundler-audit#install&#34;&gt;bundler-audit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://classic.yarnpkg.com/en/docs/install/&#34;&gt;Yarn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pnpm.io/installation&#34;&gt;pnpm&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development Usage&lt;/h2&gt; &#xA;&lt;p&gt;The following instructions outline how to compile and use the current snapshot. While every intention is to maintain a stable snapshot it is recommended that the release versions listed above be used.&lt;/p&gt; &#xA;&lt;p&gt;The repository has some large files due to test resources. The team has tried to clean up the history as much as possible. However, it is recommended that you perform a shallow clone to save yourself time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --depth 1 https://github.com/jeremylong/DependencyCheck.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On *nix&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mvn -s settings.xml install&#xA;$ ./cli/target/release/bin/dependency-check.sh -h&#xA;$ ./cli/target/release/bin/dependency-check.sh --out . --scan ./src/test/resources&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; mvn -s settings.xml install&#xA;&amp;gt; .\cli\target\release\bin\dependency-check.bat -h&#xA;&amp;gt; .\cli\target\release\bin\dependency-check.bat --out . --scan ./src/test/resources&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then load the resulting &#39;dependency-check-report.html&#39; into your favorite browser.&lt;/p&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;In the following example it is assumed that the source to be checked is in the current working directory and the reports will be written to &lt;code&gt;$(pwd)/odc-reports&lt;/code&gt;. Persistent data and cache directories are used, allowing you to destroy the container after running.&lt;/p&gt; &#xA;&lt;p&gt;For Linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/sh&#xA;&#xA;DC_VERSION=&#34;latest&#34;&#xA;DC_DIRECTORY=$HOME/OWASP-Dependency-Check&#xA;DC_PROJECT=&#34;dependency-check scan: $(pwd)&#34;&#xA;DATA_DIRECTORY=&#34;$DC_DIRECTORY/data&#34;&#xA;CACHE_DIRECTORY=&#34;$DC_DIRECTORY/data/cache&#34;&#xA;&#xA;if [ ! -d &#34;$DATA_DIRECTORY&#34; ]; then&#xA;    echo &#34;Initially creating persistent directory: $DATA_DIRECTORY&#34;&#xA;    mkdir -p &#34;$DATA_DIRECTORY&#34;&#xA;fi&#xA;if [ ! -d &#34;$CACHE_DIRECTORY&#34; ]; then&#xA;    echo &#34;Initially creating persistent directory: $CACHE_DIRECTORY&#34;&#xA;    mkdir -p &#34;$CACHE_DIRECTORY&#34;&#xA;fi&#xA;&#xA;# Make sure we are using the latest version&#xA;docker pull owasp/dependency-check:$DC_VERSION&#xA;&#xA;docker run --rm \&#xA;    -e user=$USER \&#xA;    -u $(id -u ${USER}):$(id -g ${USER}) \&#xA;    --volume $(pwd):/src:z \&#xA;    --volume &#34;$DATA_DIRECTORY&#34;:/usr/share/dependency-check/data:z \&#xA;    --volume $(pwd)/odc-reports:/report:z \&#xA;    owasp/dependency-check:$DC_VERSION \&#xA;    --scan /src \&#xA;    --format &#34;ALL&#34; \&#xA;    --project &#34;$DC_PROJECT&#34; \&#xA;    --out /report&#xA;    # Use suppression like this: (where /src == $pwd)&#xA;    # --suppression &#34;/src/security/dependency-check-suppression.xml&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;@echo off&#xA;&#xA;set DC_VERSION=&#34;latest&#34;&#xA;set DC_DIRECTORY=%USERPROFILE%\OWASP-Dependency-Check&#xA;SET DC_PROJECT=&#34;dependency-check scan: %CD%&#34;&#xA;set DATA_DIRECTORY=&#34;%DC_DIRECTORY%\data&#34;&#xA;set CACHE_DIRECTORY=&#34;%DC_DIRECTORY%\data\cache&#34;&#xA;&#xA;IF NOT EXIST %DATA_DIRECTORY% (&#xA;    echo Initially creating persistent directory: %DATA_DIRECTORY%&#xA;    mkdir %DATA_DIRECTORY%&#xA;)&#xA;IF NOT EXIST %CACHE_DIRECTORY% (&#xA;    echo Initially creating persistent directory: %CACHE_DIRECTORY%&#xA;    mkdir %CACHE_DIRECTORY%&#xA;)&#xA;&#xA;rem Make sure we are using the latest version&#xA;docker pull owasp/dependency-check:%DC_VERSION%&#xA;&#xA;docker run --rm ^&#xA;    --volume %CD%:/src ^&#xA;    --volume %DATA_DIRECTORY%:/usr/share/dependency-check/data ^&#xA;    --volume %CD%/odc-reports:/report ^&#xA;    owasp/dependency-check:%DC_VERSION% ^&#xA;    --scan /src ^&#xA;    --format &#34;ALL&#34; ^&#xA;    --project &#34;%DC_PROJECT%&#34; ^&#xA;    --out /report&#xA;    rem Use suppression like this: (where /src == %CD%)&#xA;    rem --suppression &#34;/src/security/dependency-check-suppression.xml&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building From Source&lt;/h2&gt; &#xA;&lt;p&gt;To build dependency-check (using Java 8) run the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mvn -s settings.xml install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building the documentation&lt;/h2&gt; &#xA;&lt;p&gt;The documentation on the &lt;a href=&#34;http://jeremylong.github.io/DependencyCheck/&#34;&gt;github pages&lt;/a&gt; is generated from this repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mvn -s settings.xml site  site:staging&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once done, point your browser to &lt;code&gt;./target/staging/index.html&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building The Docker Image&lt;/h2&gt; &#xA;&lt;p&gt;To build dependency-check docker image run the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mvn -s settings.xml install&#xA;./build-docker.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Permission to modify and redistribute is granted under the terms of the Apache 2.0 license. See the &lt;a href=&#34;https://raw.githubusercontent.com/jeremylong/DependencyCheck/master/LICENSE.txt&#34;&gt;LICENSE.txt&lt;/a&gt; file for the full license.&lt;/p&gt; &#xA;&lt;p&gt;Dependency-Check makes use of several other open source libraries. Please see the &lt;a href=&#34;https://github.com/jeremylong/DependencyCheck/raw/master/NOTICE.txt&#34;&gt;NOTICE.txt&lt;/a&gt; file for more information.&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2012-2022 Jeremy Long. All Rights Reserved.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hyperledger/besu</title>
    <updated>2022-06-01T02:01:04Z</updated>
    <id>tag:github.com,2022-06-01:/hyperledger/besu</id>
    <link href="https://github.com/hyperledger/besu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An enterprise-grade Java-based, Apache 2.0 licensed Ethereum client https://wiki.hyperledger.org/display/besu&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Besu Ethereum Client&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/hyperledger/besu/tree/main&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/hyperledger/besu/tree/main.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/hyperledger/besu/alerts/&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/alerts/g/hyperledger/besu.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;Total alerts&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/hyperledger/besu/context:java&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/grade/java/g/hyperledger/besu.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;Language grade: Java&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://besu.hyperledger.org/en/latest/?badge=latest&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/hyperledger-besu/badge/?version=latest&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/3174&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/3174/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/hyperledger/besu/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/hyperledger&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/905194001349627914?logo=Hyperledger&amp;amp;style=plastic&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hyperledger.jfrog.io/artifactory/besu-binaries/besu/&#34;&gt;Download&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Besu is an Apache 2.0 licensed, MainNet compatible, Ethereum client written in Java.&lt;/p&gt; &#xA;&lt;h2&gt;Useful Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://besu.hyperledger.org&#34;&gt;Besu User Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hyperledger/besu/issues&#34;&gt;Besu Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.hyperledger.org/display/BESU/Hyperledger+Besu&#34;&gt;Besu Wiki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.hyperledger.org/display/BESU/How+to+Contribute&#34;&gt;How to Contribute to Besu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.hyperledger.org/display/BESU/Roadmap&#34;&gt;Besu Roadmap&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Issues&lt;/h2&gt; &#xA;&lt;p&gt;Besu issues are tracked &lt;a href=&#34;https://github.com/hyperledger/besu/issues&#34;&gt;in the github issues tab&lt;/a&gt;. See our &lt;a href=&#34;https://wiki.hyperledger.org/display/BESU/Issues&#34;&gt;guidelines&lt;/a&gt; for more details on searching and creating issues.&lt;/p&gt; &#xA;&lt;p&gt;If you have any questions, queries or comments, &lt;a href=&#34;https://discord.gg/hyperledger&#34;&gt;Besu channel on Hyperledger Discord&lt;/a&gt; is the place to find us.&lt;/p&gt; &#xA;&lt;h2&gt;Besu Users&lt;/h2&gt; &#xA;&lt;p&gt;To install the Besu binary, follow &lt;a href=&#34;https://besu.hyperledger.org/HowTo/Get-Started/Install-Binaries/&#34;&gt;these instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Besu Developers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hyperledger/besu/main/CONTRIBUTING.md&#34;&gt;Contributing Guidelines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.hyperledger.org/display/BESU/Coding+Conventions&#34;&gt;Coding Conventions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.hyperledger.org/display/BESU/Besu+CLI+Style+Guide&#34;&gt;Command Line Interface (CLI) Style Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://besu.hyperledger.org&#34;&gt;Besu User Documentation&lt;/a&gt; for running and using Besu&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Development&lt;/h3&gt; &#xA;&lt;p&gt;Instructions for how to get started with developing on the Besu codebase. Please also read the &lt;a href=&#34;https://wiki.hyperledger.org/display/BESU/Pull+Requests&#34;&gt;wiki&lt;/a&gt; for more details on how to submit a pull request (PR).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.hyperledger.org/display/BESU/Building+from+source&#34;&gt;Checking Out and Building&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.hyperledger.org/display/BESU/Building+from+source#running-developer-builds&#34;&gt;Running Developer Builds&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.hyperledger.org/display/BESU/Code+coverage&#34;&gt;Code Coverage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.hyperledger.org/display/BESU/Logging&#34;&gt;Logging&lt;/a&gt; or the &lt;a href=&#34;https://besu.hyperledger.org/en/stable/HowTo/Monitor/Logging/&#34;&gt;Documentation&#39;s Logging section&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Release Notes&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hyperledger/besu/main/CHANGELOG.md&#34;&gt;Release Notes&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Special thanks&lt;/h2&gt; &#xA;&lt;p&gt;YourKit for providing us with a free profiler open source license.&lt;/p&gt; &#xA;&lt;p&gt;YourKit supports open source projects with innovative and intelligent tools for monitoring and profiling Java and .NET applications. YourKit is the creator of &lt;a href=&#34;https://www.yourkit.com/java/profiler/&#34;&gt;YourKit Java Profiler&lt;/a&gt;, &lt;a href=&#34;https://www.yourkit.com/.net/profiler/&#34;&gt;YourKit .NET Profiler&lt;/a&gt;, and &lt;a href=&#34;https://www.yourkit.com/youmonitor/&#34;&gt;YourKit YouMonitor&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://www.yourkit.com/images/yklogo.png&#34; alt=&#34;YourKit Logo&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SeleniumHQ/selenium</title>
    <updated>2022-06-01T02:01:04Z</updated>
    <id>tag:github.com,2022-06-01:/SeleniumHQ/selenium</id>
    <link href="https://github.com/SeleniumHQ/selenium" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A browser automation framework and ecosystem.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Selenium&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SeleniumHQ/selenium/actions/workflows/ci-ruby.yml&#34;&gt;&lt;img src=&#34;https://github.com/SeleniumHQ/selenium/actions/workflows/ci-ruby.yml/badge.svg?sanitize=true&#34; alt=&#34;CI - Ruby&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/SeleniumHQ/selenium/actions/workflows/ci-python.yml&#34;&gt;&lt;img src=&#34;https://github.com/SeleniumHQ/selenium/actions/workflows/ci-python.yml/badge.svg?sanitize=true&#34; alt=&#34;CI - Python&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/SeleniumHQ/selenium/actions/workflows/ci-javascript.yml&#34;&gt;&lt;img src=&#34;https://github.com/SeleniumHQ/selenium/actions/workflows/ci-javascript.yml/badge.svg?sanitize=true&#34; alt=&#34;CI - JavaScript&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/SeleniumHQ/selenium/actions/workflows/ci-java.yml&#34;&gt;&lt;img src=&#34;https://github.com/SeleniumHQ/selenium/actions/workflows/ci-java.yml/badge.svg?sanitize=true&#34; alt=&#34;CI - Java&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://selenium.dev&#34;&gt;&lt;img src=&#34;https://selenium.dev/images/selenium_logo_square_green.png&#34; width=&#34;180&#34; alt=&#34;Selenium&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Selenium is an umbrella project encapsulating a variety of tools and libraries enabling web browser automation. Selenium specifically provides an infrastructure for the &lt;a href=&#34;https://w3c.github.io/webdriver/&#34;&gt;W3C WebDriver specification&lt;/a&gt; — a platform and language-neutral coding interface compatible with all major web browsers.&lt;/p&gt; &#xA;&lt;p&gt;The project is made possible by volunteer contributors who&#39;ve generously donated thousands of hours in code development and upkeep.&lt;/p&gt; &#xA;&lt;p&gt;Selenium&#39;s source code is made available under the &lt;a href=&#34;https://github.com/SeleniumHQ/selenium/raw/trunk/LICENSE&#34;&gt;Apache 2.0 license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Narrative documentation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://selenium.dev/documentation/&#34;&gt;User Manual&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;API documentation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://seleniumhq.github.io/selenium/docs/api/dotnet/&#34;&gt;C#&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://seleniumhq.github.io/selenium/docs/api/javascript/&#34;&gt;JavaScript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://seleniumhq.github.io/selenium/docs/api/java/index.html&#34;&gt;Java&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://seleniumhq.github.io/selenium/docs/api/py/&#34;&gt;Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://seleniumhq.github.io/selenium/docs/api/rb/&#34;&gt;Ruby&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Pull Requests&lt;/h2&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://github.com/SeleniumHQ/selenium/raw/trunk/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; before submitting your pull requests.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bazelbuild/bazelisk&#34;&gt;Bazelisk&lt;/a&gt;, a Bazel wrapper that automatically downloads the version of Bazel specified in &lt;code&gt;.bazelversion&lt;/code&gt; file and transparently passes through all command-line arguments to the real Bazel binary.&lt;/li&gt; &#xA; &lt;li&gt;The latest version of the &lt;a href=&#34;https://openjdk.java.net/&#34;&gt;Java 11 OpenJDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;java&lt;/code&gt; and &lt;code&gt;jar&lt;/code&gt; on the &lt;code&gt;$PATH&lt;/code&gt; (make sure you use &lt;code&gt;java&lt;/code&gt; executable from JDK but not JRE). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;To test this, try running the command &lt;code&gt;javac&lt;/code&gt;. This command won&#39;t exist if you only have the JRE installed. If you&#39;re met with a list of command-line options, you&#39;re referencing the JDK properly.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;Python 3.7+&lt;/a&gt; and &lt;code&gt;python&lt;/code&gt; on the &lt;code&gt;PATH&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ruby-lang.org/en/documentation/installation/&#34;&gt;Ruby 3+&lt;/a&gt; and &lt;code&gt;ruby&lt;/code&gt; on the &lt;code&gt;PATH&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://tox.readthedocs.org/&#34;&gt;The tox automation project&lt;/a&gt; for Python: &lt;code&gt;pip install tox&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;macOS users: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Install the latest version of Xcode including the command-line tools. This command should work &lt;code&gt;xcode-select --install&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Apple Silicon Macs should add &lt;code&gt;build --host_platform=//:rosetta&lt;/code&gt; to their &lt;code&gt;.bazelrc.local&lt;/code&gt; file. We are working to make sure this isn&#39;t required in the long run.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Windows users: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Latest version of &lt;a href=&#34;https://www.visualstudio.com/&#34;&gt;Visual Studio&lt;/a&gt; with command line tools and build tools installed&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;BAZEL_VS&lt;/code&gt; environment variable should point to the location of the build tools, e.g. &lt;code&gt;C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;BAZEL_VC&lt;/code&gt; environment variable should point to the location of the command line tools, e.g. &lt;code&gt;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;BAZEL_VC_FULL_VERSION&lt;/code&gt; environment variable should contain the version of the installed command line tools, e.g. &lt;code&gt;14.27.29110&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;A detailed setup guide can be seen on Jim Evan&#39;s &lt;a href=&#34;http://jimevansmusic.blogspot.com/2020/04/setting-up-windows-development.html&#34;&gt;post&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;If the Jim&#39;s blog instructions were followed, also make sure &lt;code&gt;C:\tools\msys65\usr\bin&lt;/code&gt; is on the &lt;code&gt;PATH&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Internet Explorer Driver&lt;/h3&gt; &#xA;&lt;p&gt;If you plan to compile the &lt;a href=&#34;https://github.com/SeleniumHQ/selenium/wiki/InternetExplorerDriver&#34;&gt;IE driver&lt;/a&gt;, you also need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.visualstudio.com/&#34;&gt;Visual Studio 2008&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;32 and 64-bit cross compilers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The build will work on any platform, but the tests for IE will be skipped silently if you are not building on Windows.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;h3&gt;Bazel&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bazel.build/&#34;&gt;Bazel&lt;/a&gt; was built by the fine folks at Google. Bazel manages dependency downloads, generates the Selenium binaries, executes tests, and does it all rather quickly.&lt;/p&gt; &#xA;&lt;p&gt;More detailed instructions for getting Bazel running are below, but if you can successfully get the java and javascript folders to build without errors, you should be confident that you have the correct binaries on your system.&lt;/p&gt; &#xA;&lt;h3&gt;Before Building&lt;/h3&gt; &#xA;&lt;p&gt;Ensure that you have Firefox installed and the latest &lt;a href=&#34;https://github.com/mozilla/geckodriver/releases/&#34;&gt;&lt;code&gt;geckodriver&lt;/code&gt;&lt;/a&gt; on your &lt;code&gt;$PATH&lt;/code&gt;. You may have to update this from time to time.&lt;/p&gt; &#xA;&lt;h3&gt;Common Build Targets&lt;/h3&gt; &#xA;&lt;h4&gt;Java&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to see Java Build Steps&lt;/summary&gt; &#xA; &lt;p&gt;To build the most commonly-used modules of Selenium from source, execute this command from the root project folder:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel build java/...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If you want to test you can run then you can do so by running the following command&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel test //java/... --test_size_filters=small,medium,large --test_tag_filters=&amp;lt;browser&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The &lt;code&gt;test_size_filters&lt;/code&gt; argument takes small, medium, large. Small are akin to unit tests, medium is akin to integration tests, and large is akin to end to end tests.&lt;/p&gt; &#xA; &lt;p&gt;The &lt;code&gt;test_tag_filters&lt;/code&gt; allow us to pass in browser names and a few different tags that we can find in the code base.&lt;/p&gt; &#xA; &lt;p&gt;To build the Grid deployment jar, run this command:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel build grid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The log will show where the output jar is located.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;JavaScript&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to see JavaScript Build Steps&lt;/summary&gt; &#xA; &lt;p&gt;If you want to build all the JavaScript code you can run:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel build javascript/...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;To build the NodeJS bindings you will need to run:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel build //javascript/node/selenium-webdriver&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;To run the tests run:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel test //javascript/node/selenium-webdriver:tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;You can pass in the environment variable &lt;code&gt;SELENIUM_BROWSER&lt;/code&gt; with the name of the browser.&lt;/p&gt; &#xA; &lt;p&gt;To publish to NPM run:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel run //javascript/node/selenium-webdriver:selenium-webdriver.publish&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;Python&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to see Python Build Steps&lt;/summary&gt; &#xA; &lt;p&gt;If you want to build the python bindings run:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel build //py:selenium&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;To run the tests run:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel test //py:test-&amp;lt;browsername&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If you add &lt;code&gt;--//common:pin_browsers&lt;/code&gt; it will download the browsers and drivers for you to use.&lt;/p&gt; &#xA; &lt;p&gt;To install locally run:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel build //py:selenium-wheel&#xA;pip install bazel-bin/py/selenium-*.whl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;To publish run:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel build //py:selenium-wheel&#xA;twine upload bazel-bin/py/selenium-*.whl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;Ruby&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to see Ruby Build Steps&lt;/summary&gt; &#xA; &lt;p&gt;To build the Ruby code run:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel build //rb/...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;.NET&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to see .NET Build Steps&lt;/summary&gt; &#xA; &lt;p&gt;To build the .NET code run:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel build //dotnet/...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Also&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel build //dotnet/test/common:chrome&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Build Details&lt;/h3&gt; &#xA;&lt;p&gt;Bazel files are called BUILD.bazel, and the order the modules are built is determined by the build system. If you want to build an individual module (assuming all dependent modules have previously been built), try the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel test javascript/atoms:test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case, &lt;code&gt;javascript/atoms&lt;/code&gt; is the module directory, &lt;code&gt;test&lt;/code&gt; is a target in that directory&#39;s &lt;code&gt;BUILD.bazel&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;As you see &lt;em&gt;build targets&lt;/em&gt; scroll past in the log, you may want to run them individually.&lt;/p&gt; &#xA;&lt;h3&gt;Build Output&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;bazel&lt;/code&gt; makes a top-level group of directories with the &lt;code&gt;bazel-&lt;/code&gt; prefix on each directory.&lt;/p&gt; &#xA;&lt;h3&gt;Common Tasks (Bazel)&lt;/h3&gt; &#xA;&lt;p&gt;To build the bulk of the Selenium binaries from source, run the following command from the root folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel build java/... javascript/...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run tests within a particular area of the project, use the &#34;test&#34; command, followed by the folder or target. Tests are tagged with &#34;small&#34;, &#34;medium&#34;, or &#34;large&#34;, and can be filtered with the &lt;code&gt;--test_size_filters&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel test --test_size_filters=small,medium java/...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Bazel&#39;s &#34;test&#34; command will run &lt;em&gt;all&lt;/em&gt; tests in the package, including integration tests. Expect the &lt;code&gt;test java/...&lt;/code&gt; to launch browsers and consume a considerable amount of time and resources.&lt;/p&gt; &#xA;&lt;p&gt;To bump the versions of the pinned browsers to their latest stable versions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel run scripts:pinned_browsers &amp;gt; temp.bzl &amp;amp;&amp;amp; mv temp.bzl common/repositories.bzl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Editing Code&lt;/h3&gt; &#xA;&lt;p&gt;Most of the team use either Intellij IDEA or VS.Code for their day-to-day editing. If you&#39;re working in IntelliJ, then we highly recommend installing the &lt;a href=&#34;https://plugins.jetbrains.com/plugin/8609-bazel&#34;&gt;Bazel IJ plugin&lt;/a&gt; which is documented on &lt;a href=&#34;https://plugins.jetbrains.com/plugin/8609-bazel&#34;&gt;its own site&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you do use IntelliJ and the Bazel plugin, there is a project view checked into the tree in &lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/selenium/trunk/scripts/ij.bazelproject&#34;&gt;scripts/ij.bazelproject&lt;/a&gt; which will make it easier to get up running, and editing code :)&lt;/p&gt; &#xA;&lt;h2&gt;Tour&lt;/h2&gt; &#xA;&lt;p&gt;The codebase is generally segmented around the languages used to write the component. Selenium makes extensive use of JavaScript, so let&#39;s start there. First of all, start the development server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel run debug-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, navigate to &lt;a href=&#34;http://localhost:2310/javascript&#34;&gt;http://localhost:2310/javascript&lt;/a&gt;. You&#39;ll find the contents of the &lt;code&gt;javascript/&lt;/code&gt; directory being shown. We use the &lt;a href=&#34;https://developers.google.com/closure/library/&#34;&gt;Closure Library&lt;/a&gt; for developing much of the JavaScript, so now navigate to &lt;a href=&#34;http://localhost:2310/javascript/atoms/test&#34;&gt;http://localhost:2310/javascript/atoms/test&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The tests in this directory are normal HTML files with names ending with &lt;code&gt;_test.html&lt;/code&gt;. Click on one to load the page and run the test.&lt;/p&gt; &#xA;&lt;h2&gt;Help with &lt;code&gt;go&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;More general, but basic, help for &lt;code&gt;go&lt;/code&gt;…&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./go --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;go&lt;/code&gt; is a wrapper around &lt;a href=&#34;http://rake.rubyforge.org/&#34;&gt;Rake&lt;/a&gt;, so you can use the standard commands such as &lt;code&gt;rake -T&lt;/code&gt; to get more information about available targets.&lt;/p&gt; &#xA;&lt;h2&gt;Maven &lt;em&gt;per se&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Selenium is not built with Maven. It is built with &lt;code&gt;bazel&lt;/code&gt;, though that is invoked with &lt;code&gt;go&lt;/code&gt; as outlined above, so you do not have to learn too much about that.&lt;/p&gt; &#xA;&lt;p&gt;That said, it is possible to relatively quickly build Selenium pieces for Maven to use. You are only really going to want to do this when you are testing the cutting-edge of Selenium development (which we welcome) against your application. Here is the quickest way to build and deploy into your local maven repository (&lt;code&gt;~/.m2/repository&lt;/code&gt;), while skipping Selenium&#39;s own tests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./go maven-install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The maven jars should now be in your local &lt;code&gt;~/.m2/repository&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Updating Java dependencies&lt;/h2&gt; &#xA;&lt;p&gt;The coordinates (&lt;em&gt;groupId&lt;/em&gt;:&lt;em&gt;artifactId&lt;/em&gt;:&lt;em&gt;version&lt;/em&gt;) of the Java dependencies are defined in the file &lt;a href=&#34;https://github.com/SeleniumHQ/selenium/raw/trunk/java/maven_deps.bzl&#34;&gt;maven_deps.bzl&lt;/a&gt;. The process to modify these dependencies is the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;(Optional) If we want to detect the dependencies which are not updated, we can use the following command for automatic discovery:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel run @maven//:outdated&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Modify &lt;a href=&#34;https://github.com/SeleniumHQ/selenium/raw/trunk/java/maven_deps.bzl&#34;&gt;maven_deps.bzl&lt;/a&gt;. For instance, we can bump the version of a given artifact detected in the step before.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Repin dependencies. This process is required to update the file &lt;a href=&#34;https://github.com/SeleniumHQ/selenium/raw/trunk/java/maven_install.json&#34;&gt;maven_install.json&lt;/a&gt;, which is used to manage the Maven dependencies tree (see &lt;a href=&#34;https://github.com/bazelbuild/rules_jvm_external&#34;&gt;rules_jvm_external&lt;/a&gt; for further details). The command to carry out this step is the following:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;REPIN=1 bazel run @unpinned_maven//:pin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;(Optional) If we use IntelliJ with the Bazel plugin, we need to synchronize our project. To that aim, we click on &lt;em&gt;Bazel&lt;/em&gt; → &lt;em&gt;Sync&lt;/em&gt; → &lt;em&gt;Sync Project with BUILD Files&lt;/em&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Running browser tests on Linux&lt;/h2&gt; &#xA;&lt;p&gt;In order to run Browser tests, you first need to install the browser-specific drivers, such as &lt;a href=&#34;https://github.com/mozilla/geckodriver/releases&#34;&gt;&lt;code&gt;geckodriver&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://chromedriver.chromium.org/&#34;&gt;&lt;code&gt;chromedriver&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&#34;https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/&#34;&gt;&lt;code&gt;edgedriver&lt;/code&gt;&lt;/a&gt;. These need to be on your &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By default, Bazel runs these tests in your current X-server UI. If you prefer, you can alternatively run them in a virtual or nested X-server.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run the X server &lt;code&gt;Xvfb :99&lt;/code&gt; or &lt;code&gt;Xnest :99&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run a window manager, for example, &lt;code&gt;DISPLAY=:99 jwm&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run the tests you are interested in:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel test --test_env=DISPLAY=:99 //java/... --test_tag_filters=chrome&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An easy way to run tests in a virtual X-server is to use Bazel&#39;s &lt;code&gt;--run_under&lt;/code&gt; functionality:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bazel test --run_under=&#34;xvfb-run -a&#34; //java/... --test_tag_filters=chrome&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Bazel Installation/Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;Selenium Build Docker Image&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re finding it hard to set up a development environment using bazel and you have access to Docker, then you can build a Docker image suitable for building and testing Selenium in from the Dockerfile in the &lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/selenium/trunk/scripts/dev-image/Dockerfile&#34;&gt;dev image&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;MacOS&lt;/h3&gt; &#xA;&lt;h4&gt;bazelisk&lt;/h4&gt; &#xA;&lt;p&gt;Bazelisk is a Mac-friendly launcher for Bazel. To install, follow these steps:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew tap bazelbuild/tap &amp;amp;&amp;amp; \&#xA;brew uninstall bazel; \&#xA;brew install bazelbuild/tap/bazelisk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Xcode&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;re getting errors that mention Xcode, you&#39;ll need to install the command-line tools.&lt;/p&gt; &#xA;&lt;p&gt;Bazel for Mac requires some additional steps to configure properly. First things first: use the Bazelisk project (courtesy of philwo), a pure golang implementation of Bazel. In order to install Bazelisk, first verify that your Xcode will cooperate: execute the following command:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;xcode-select -p&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If the value is &lt;code&gt;/Applications/Xcode.app/Contents/Developer/&lt;/code&gt;, you can proceed with bazelisk installation. If, however, the return value is &lt;code&gt;/Library/Developer/CommandLineTools/&lt;/code&gt;, you&#39;ll need to redirect the Xcode system to the correct value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo xcode-select -s /Applications/Xcode.app/Contents/Developer/&#xA;sudo xcodebuild -license&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The first command will prompt you for a password. The second step requires you to read a new Xcode license, and then accept it by typing &#34;agree&#34;.&lt;/p&gt; &#xA;&lt;p&gt;(Thanks to &lt;a href=&#34;https://github.com/bazelbuild/bazel/issues/4314&#34;&gt;this thread&lt;/a&gt; for these steps)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>MisterBooo/LeetCodeAnimation</title>
    <updated>2022-06-01T02:01:04Z</updated>
    <id>tag:github.com,2022-06-01:/MisterBooo/LeetCodeAnimation</id>
    <link href="https://github.com/MisterBooo/LeetCodeAnimation" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Demonstrate all the questions on LeetCode in the form of animation.（用动画的形式呈现解LeetCode题目的思路）&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/1940317-e837182a805cecce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;LeetCode Animation All in One&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/language-C++-red.svg?sanitize=true&#34; alt=&#34;Travis&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://developer.apple.com/.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/language-Java-yellow.svg?sanitize=true&#34; alt=&#34;Travis&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/raw/master/README-En.md&#34;&gt;There is an English version of README here. just click it！&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;我会尽力将 LeetCode 上所有的题目都用动画的形式演示出来，计划用 3 到 4 年时间去完成它，期待与你见证这一天！&lt;/p&gt; &#xA;&lt;p&gt;文章最新首发于微信公众号 &lt;strong&gt;吴师兄学算法&lt;/strong&gt;，您可以关注获取最新的文章。&lt;/p&gt; &#xA;&lt;p&gt;为了帮助大家更好的入门学习算法，经过半年的积累，我给大家整理了《剑指 Offer》系列的四十道题目，都是算法面试的高频题目，每一道题目我都提供详细的分析、精美的配图、易于理解的动画视频，适合那些第一次刷题的同学，当然，也适合重复刷题的老手再次学习巩固基础。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://weixin-1257126549.cos.ap-guangzhou.myqcloud.com/blog/qebp5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;文章同步博客地址：&lt;a href=&#34;https://blog.algomooc.com/&#34;&gt;https://blog.algomooc.com/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;汇总&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;序号&lt;/th&gt; &#xA;   &lt;th&gt;题目&amp;amp;题解&lt;/th&gt; &#xA;   &lt;th&gt;动画&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/vn3KiV-ez79FmbZ36SX9lg&#34;&gt;十大经典排序算法动画与解析，看我就够了！（配代码完全版）&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC1%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.md&#34;&gt;两数之和&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://blog-1257126549.cos.ap-guangzhou.myqcloud.com/blog/av47v.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC2%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0.md&#34;&gt;两数相加&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://blog-1257126549.cos.ap-guangzhou.myqcloud.com/blog/fz933.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC3%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2.md&#34;&gt;无重复字符的最长子串&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://blog-1257126549.cos.ap-guangzhou.myqcloud.com/blog/vxa7f.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/FBlH7o-ssj_iMEPLcvsY2w&#34;&gt;寻找两个有序数组的中位数&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;9&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC9%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E5%9B%9E%E6%96%87%E6%95%B0.md&#34;&gt;回文数&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/ZoytuPt5dfP5pMODbuKnCQ&#34;&gt;正则表达式匹配&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;11&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/0PCW-7JzU8rfrLA5GQmFiQ&#34;&gt;盛最多水的容器&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://blog-1257126549.cos.ap-guangzhou.myqcloud.com/blog/en8u4.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;15&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC15%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C.md&#34;&gt;三数之和&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;19&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC19%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9.md&#34;&gt;删除链表的倒数第 N 个节点&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://blog-1257126549.cos.ap-guangzhou.myqcloud.com/blog/metqn.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;20&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC20%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7.md&#34;&gt;有效的括号&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://blog-1257126549.cos.ap-guangzhou.myqcloud.com/blog/ey3lr.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;21&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC21%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8.md&#34;&gt;合并两个有序链表&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;23&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC23%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E5%90%88%E5%B9%B6K%E4%B8%AA%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8.md&#34;&gt;合并 K 个排序链表&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;24&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC24%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9.md&#34;&gt;两两交换链表中的节点&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;25&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/YOz66mJchVIEQjA7TBV2cg&#34;&gt;K 个一组翻转链表&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;26&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC26%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9.md&#34;&gt;删除排序数组中的重复项&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://blog-1257126549.cos.ap-guangzhou.myqcloud.com/blog/4tk72.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;32&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/CPIDKHsg3ROT10rVFDyDJQ&#34;&gt;最长有效括号&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;38&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/DKXJR8pNX3fKGvtSn0TEjw&#34;&gt;报数&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;41&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzUyNjQxNjYyMg==&amp;amp;mid=2247486473&amp;amp;idx=3&amp;amp;sn=06bf5f9c17cd3cb328934acc698b0ec3&amp;amp;chksm=fa0e6388cd79ea9e30c67dd2e5251056d860ba45e1fcbbcd4524573072305396d06629312c91&amp;amp;token=1735603091&amp;amp;lang=zh_CN#rd&#34;&gt;缺失的第一个正数&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;66&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC66%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E5%8A%A0%E4%B8%80.md&#34;&gt;加一&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;75&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC75%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E9%A2%9C%E8%89%B2%E5%88%86%E7%B1%BB.md&#34;&gt;颜色分类&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://blog-1257126549.cos.ap-guangzhou.myqcloud.com/blog/ehgxu.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;86&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC86%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E5%88%86%E5%89%B2%E9%93%BE%E8%A1%A8.md&#34;&gt;分割链表&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;92&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC92%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8II.md&#34;&gt;反转链表 II&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;94&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC94%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86.md&#34;&gt;二叉树的中序遍历&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;101&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC101%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91.md&#34;&gt;对称二叉树&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;102&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC102%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86.md&#34;&gt;二叉树的层序遍历&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;103&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC103%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%94%AF%E9%BD%BF%E5%BD%A2%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86.md&#34;&gt;二叉树的锯齿形层次遍历&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;107&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC107%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86II.md&#34;&gt;二叉树的层次遍历 II&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;118&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC118%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92.md&#34;&gt;杨辉三角&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;119&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC119%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92II.md&#34;&gt;杨辉三角II&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;110&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC110%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91.md&#34;&gt;平衡二叉树&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;121&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC121%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA.md&#34;&gt;买卖股票的最佳时机&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;122&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC122%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAII.md&#34;&gt;买卖股票的最佳时机II&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;123&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC123%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAIII.md&#34;&gt;买卖股票的最佳时机III&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;125&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC125%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E9%AA%8C%E8%AF%81%E5%9B%9E%E6%96%87%E4%B8%B2.md&#34;&gt;验证回文串&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;131&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC131%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E5%88%86%E5%89%B2%E5%9B%9E%E6%96%87%E4%B8%B2.md&#34;&gt;分割回文串&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;136&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC136%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97.md&#34;&gt;只出现一次的数字&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;138&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC138%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E5%A4%8D%E5%88%B6%E5%B8%A6%E9%9A%8F%E6%9C%BA%E6%8C%87%E9%92%88.md&#34;&gt;复制带随机指针&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;139&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC139%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E5%8D%95%E8%AF%8D%E6%8B%86%E5%88%86.md&#34;&gt;单词拆分&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;141&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC141%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8.md&#34;&gt;环形链表&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;144&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC144%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86.md&#34;&gt;二叉树的前序遍历&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;145&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC145%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86.md&#34;&gt;二叉树的后序遍历&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;146&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC146%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9ALRU%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6.md&#34;&gt;LRU缓存机制&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;150&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC150%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC.md&#34;&gt;逆波兰表达式求值&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;153&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzUyNjQxNjYyMg==&amp;amp;mid=2247486243&amp;amp;idx=3&amp;amp;sn=ed49d65662be56ca76753141b91ce6ef&amp;amp;chksm=fa0e64a2cd79edb4b64d11e3af5f0ee2f597bbd843d5f34a812ef70f0f97e190d381e77f05f8&amp;amp;token=387372133&amp;amp;lang=zh_CN#rd&#34;&gt;寻找旋转排序数组中的最小值&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;164&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/xHxjCDdFZyCW2pnY6Cz8SQ&#34;&gt;最大间距&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;167&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC167%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8CII-%E8%BE%93%E5%85%A5%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84.md&#34;&gt;两数之和 II - 输入有序数组&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;169&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC169%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E6%B1%82%E4%BC%97%E6%95%B0.md&#34;&gt;求众数&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;172&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC172%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E9%98%B6%E4%B9%98%E5%90%8E%E7%9A%84%E9%9B%B6.md&#34;&gt;阶乘后的零&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;187&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC187%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E9%87%8D%E5%A4%8D%E7%9A%84DNA%E5%BA%8F%E5%88%97.md&#34;&gt;重复的 DNA 序列&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;191&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC191%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E4%BD%8D1%E7%9A%84%E4%B8%AA%E6%95%B0.md&#34;&gt;位1的个数&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;199&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC199%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%8F%B3%E8%A7%86%E5%9B%BE.md&#34;&gt;二叉树的右视图&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;201&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC201%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E6%95%B0%E5%AD%97%E8%8C%83%E5%9B%B4%E6%8C%89%E4%BD%8D%E4%B8%8E.md&#34;&gt;数字范围按位与&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;203&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC203%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0.md&#34;&gt;移除链表元素&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;206&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC206%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.md&#34;&gt;反转链表&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;209&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC209%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.md&#34;&gt;长度最小的子数组&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;219&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC219%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0II.md&#34;&gt;存在重复元素 II&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;229&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/ObO4eQbjp1s1g_WXPkjixQ&#34;&gt;求众数II&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;231&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC231%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A2%E7%9A%84%E5%B9%82.md&#34;&gt;2的幂&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;232&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/j6w94_PjvsL9Dip_xBcqcg&#34;&gt;使用栈实现队列&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;237&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/2XdUeDNblryFpXpTUgsaMQ&#34;&gt;删除链表中的节点&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;239&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC239%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC.md&#34;&gt;滑动窗口最大值&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;242&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/o5HTxmOgpftSaQdebS9zyQ&#34;&gt;有效的字母异位词&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;268&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC268%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E7%BC%BA%E5%A4%B1%E6%95%B0%E5%AD%97.md&#34;&gt;缺失数字&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;279&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC279%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0.md&#34;&gt;完全平方数&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;283&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC283%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E7%A7%BB%E5%8A%A8%E9%9B%B6.md&#34;&gt;移动零&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;295&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC295%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E6%95%B0%E6%8D%AE%E6%B5%81%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0.md&#34;&gt;数据流的中位数&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;301&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC301%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E5%88%A0%E9%99%A4%E6%97%A0%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7.md&#34;&gt;删除无效的括号&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;319&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/u35RGvT5Bc2o7jM-Uu_ZYA&#34;&gt;灯泡开关&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;326&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC326%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A3%E7%9A%84%E5%B9%82.md&#34;&gt;3 的幂&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;328&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC328%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E5%A5%87%E5%81%B6%E9%93%BE%E8%A1%A8.md&#34;&gt;奇偶链表&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;342&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC342%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A4%E7%9A%84%E5%B9%82.md&#34;&gt;4的幂&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;344&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC344%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2.md&#34;&gt;反转字符串&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;347&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC347%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E5%89%8DK%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0.md&#34;&gt;前K个高频元素&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;349&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC349%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86.md&#34;&gt;两个数组的交集&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;350&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC350%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86II.md&#34;&gt;两个数组的交集 II&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;445&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC445%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0II.md&#34;&gt;两数相加 II&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;447&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC447%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E5%9B%9E%E6%97%8B%E9%95%96%E7%9A%84%E6%95%B0%E9%87%8F.md&#34;&gt;回旋镖的数量&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;454&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC454%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E5%9B%9B%E6%95%B0%E7%9B%B8%E5%8A%A0II.md&#34;&gt;四数相加 II&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;642&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC642%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%90%9C%E7%B4%A2%E8%87%AA%E5%8A%A8%E5%AE%8C%E6%88%90%E7%B3%BB%E7%BB%9F.md&#34;&gt;设计一个搜索自动完成系统&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;690&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC690%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E5%91%98%E5%B7%A5%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7.md&#34;&gt;员工的重要性&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;739&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/3kDSOHyd-qOw7apzj0Z9YQ&#34;&gt;每日温度&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;877&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MisterBooo/LeetCodeAnimation/tree/master/notes/LeetCode%E7%AC%AC877%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E7%9F%B3%E5%AD%90%E6%B8%B8%E6%88%8F.md&#34;&gt;石子游戏&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1025&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/0u6z02QYj1OpAwf54k8-Dw&#34;&gt;除数博弈&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1099&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/S6BbLeP_th_9JheNX7NN-w&#34;&gt;小于 K 的两数之和&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MisterBooo/LeetCodeAnimation/master/Pictures/qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>airbytehq/airbyte</title>
    <updated>2022-06-01T02:01:04Z</updated>
    <id>tag:github.com,2022-06-01:/airbytehq/airbyte</id>
    <link href="https://github.com/airbytehq/airbyte" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Airbyte is an open-source EL(T) platform that helps you replicate your data in your warehouses, lakes and databases.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://GitHub.com/airbytehq/airbyte/stargazers/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/airbytehq/airbyte?style=social&amp;amp;label=Star&amp;amp;maxAge=2592000&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/airbytehq/airbyte/actions/workflows/gradle.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/airbytehq/airbyte/Airbyte%20CI&#34; alt=&#34;GitHub Workflow Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/airbytehq/airbyte/tree/a9b1c6c0420550ad5069aca66c295223e0d05e27/LICENSE/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=license&amp;amp;message=MIT&amp;amp;color=brightgreen&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/airbytehq/airbyte/tree/a9b1c6c0420550ad5069aca66c295223e0d05e27/LICENSE/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=license&amp;amp;message=ELv2&amp;amp;color=brightgreen&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Data integration made simple, secure and extensible.&lt;/strong&gt; The new open-source standard to sync data from applications, APIs &amp;amp; databases to warehouses, lakes &amp;amp; other destinations.&lt;/p&gt; &#xA;&lt;p&gt;Airbyte is on a mission to make data integration pipelines a commodity.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Maintenance-free connectors you can use in minutes&lt;/strong&gt;. Just authenticate your sources and warehouse, and get connectors that adapt to schema and API changes for you.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Building new connectors made trivial.&lt;/strong&gt; We make it very easy to add new connectors that you need, using the language of your choice, by offering scheduling and orchestration.&lt;/li&gt; &#xA; &lt;li&gt;Designed to &lt;strong&gt;cover the long tail of connectors and needs&lt;/strong&gt;. Benefit from the community&#39;s battle-tested connectors and adapt them to your specific needs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Your data stays in your cloud&lt;/strong&gt;. Have full control over your data, and the costs of your data transfers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;No more security compliance process&lt;/strong&gt; to go through as Airbyte is self-hosted.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;No more pricing indexed on volume&lt;/strong&gt;, as cloud-based solutions offer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here&#39;s a list of our &lt;a href=&#34;https://raw.githubusercontent.com/airbytehq/airbyte/master/docs/integrations/&#34;&gt;connectors with their health status&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/airbytehq/airbyte.git&#xA;cd airbyte&#xA;docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now visit &lt;a href=&#34;http://localhost:8000&#34;&gt;http://localhost:8000&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here is a &lt;a href=&#34;https://github.com/airbytehq/airbyte/tree/e378d40236b6a34e1c1cb481c8952735ec687d88/docs/quickstart/getting-started.md&#34;&gt;step-by-step guide&lt;/a&gt; showing you how to load data from an API into a file, all on your computer.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Built for extensibility&lt;/strong&gt;: Adapt an existing connector to your needs or build a new one with ease.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Optional normalized schemas&lt;/strong&gt;: Entirely customizable, start with raw data or from some suggestion of normalized data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Full-grade scheduler&lt;/strong&gt;: Automate your replications with the frequency you need.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Real-time monitoring&lt;/strong&gt;: We log all errors in full detail to help you understand.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Incremental updates&lt;/strong&gt;: Automated replications are based on incremental updates to reduce your data transfer costs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Manual full refresh&lt;/strong&gt;: Sometimes, you need to re-sync all your data to start again.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Debugging autonomy&lt;/strong&gt;: Modify and debug pipelines as you see fit, without waiting.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://airbyte.io/features/&#34;&gt;See more on our website.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We love contributions to Airbyte, big or small.&lt;/p&gt; &#xA;&lt;p&gt;See our &lt;a href=&#34;https://raw.githubusercontent.com/airbytehq/airbyte/master/docs/contributing-to-airbyte/&#34;&gt;Contributing guide&lt;/a&gt; on how to get started. Not sure where to start? We’ve listed some &lt;a href=&#34;https://github.com/airbytehq/airbyte/labels/good%20first%20issue&#34;&gt;good first issues&lt;/a&gt; to start with. If you have any questions, please open a draft PR or visit our &lt;a href=&#34;https://github.com/airbytehq/airbyte/tree/a9b1c6c0420550ad5069aca66c295223e0d05e27/slack.airbyte.io&#34;&gt;slack channel&lt;/a&gt; where the core team can help answer your questions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note that you are able to create connectors using the language you want, as Airbyte connections run as Docker containers.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Also, we will never ask you to maintain your connector. The goal is that the Airbyte team and the community helps maintain it, let&#39;s call it crowdsourced maintenance!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Community support&lt;/h2&gt; &#xA;&lt;p&gt;For general help using Airbyte, please refer to the official Airbyte documentation. For additional help, you can use one of these channels to ask a question:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://slack.airbyte.io&#34;&gt;Slack&lt;/a&gt; (For live discussion with the Community and Airbyte team)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discuss.airbyte.io/&#34;&gt;Forum&lt;/a&gt; (For deeper converstaions about features, connectors, or problems)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/airbytehq/airbyte&#34;&gt;GitHub&lt;/a&gt; (Bug reports, Contributions)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/airbytehq&#34;&gt;Twitter&lt;/a&gt; (Get the news fast)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://airbyte.io/weekly-office-hours/&#34;&gt;Weekly office hours&lt;/a&gt; (Live informal 30-minute video call sessions with the Airbyte team)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://raw.githubusercontent.com/airbytehq/airbyte/master/docs/project-overview/roadmap.md&#34;&gt;roadmap&lt;/a&gt; to get informed on what we are currently working on, and what we have in mind for the next weeks, months and years.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/airbytehq/airbyte/master/docs/project-overview/licenses/&#34;&gt;LICENSE&lt;/a&gt; file for licensing information, and our &lt;a href=&#34;https://raw.githubusercontent.com/airbytehq/airbyte/master/docs/project-overview/licenses/license-faq.md&#34;&gt;FAQ&lt;/a&gt; for any questions you may have on that topic.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lilishop/lilishop</title>
    <updated>2022-06-01T02:01:04Z</updated>
    <id>tag:github.com,2022-06-01:/lilishop/lilishop</id>
    <link href="https://github.com/lilishop/lilishop" rel="alternate"></link>
    <summary type="html">&lt;p&gt;电商商城 多语言商城 跨境商城 多用户商城 小程序商城 微服务商城 新零售 社区商城&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Lilishop B2B2C商城系统&lt;/h2&gt; &#xA;&lt;h4&gt;欢迎交流需求，交流业务，交流技术（基础问题自行解决，进群先看文档后提问）&lt;/h4&gt; &#xA;&lt;h5&gt;交流 qq 1群 961316482（已满）&lt;/h5&gt; &#xA;&lt;p&gt;&lt;a target=&#34;_blank&#34; href=&#34;https://qm.qq.com/cgi-bin/qm/qr?k=BAhURE3DG2YWhQk6kRxVapbLykqMoPS8&amp;amp;jump_from=webapi&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://pub.idqqimg.com/wpa/images/group.png&#34; alt=&#34;Lilishop交流群&#34; title=&#34;Lilishop交流群&#34;&gt;点击快捷加群&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h5&gt;交流 qq 2群 875294241&lt;/h5&gt; &#xA;&lt;p&gt;&lt;a target=&#34;_blank&#34; href=&#34;https://qm.qq.com/cgi-bin/qm/qr?k=_lrekOvr5k2p5uTn5GRidI-chKEmpCX3&amp;amp;jump_from=webapi&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://pub.idqqimg.com/wpa/images/group.png&#34; alt=&#34;Lilishop交流群2群&#34; title=&#34;Lilishop交流群2群&#34;&gt;点击快捷加群&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h5&gt;体验 公众号/小程序/APP 体验，扫描二维码&lt;/h5&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://pickmall.cn/assets/imgs/h5-qrcode.png&#34; alt=&#34;image-20210511171611793&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitee.com/beijing_hongye_huicheng/lilishop/stargazers&#34;&gt;&lt;img src=&#34;https://gitee.com/beijing_hongye_huicheng/lilishop/badge/star.svg?theme=dark&#34; alt=&#34;star&#34;&gt;&lt;/a&gt; &amp;nbsp;&amp;nbsp;&lt;img src=&#34;https://img.shields.io/github/stars/hongyehuicheng/lilishop.svg?style=social&amp;amp;logo=#181717&#34; alt=&#34;github&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;商城介绍&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;官网&lt;/strong&gt;：&lt;a href=&#34;https://pickmall.cn&#34;&gt;https://pickmall.cn&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Lilishop商城系统支持商家入驻，后端基于SpringBoot 研发，前端使用 Vue、uniapp开发， &lt;strong&gt;系统全端全部代码开源&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;前后端分离，支持分布式部署，支持Docker，各个API独立，并且有独立的消费者。&lt;/p&gt; &#xA;&lt;h3&gt;商城 API/消费者 聚合版&lt;/h3&gt; &#xA;&lt;p&gt;api不需要单独部署，只需启动一个jar包就可以正常运转 如有需要，可以点击跳转 &lt;a href=&#34;https://gitee.com/beijing_hongye_huicheng/lilishop-simplify&#34;&gt;https://gitee.com/beijing_hongye_huicheng/lilishop-simplify&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;开发/使用/常见问题 帮助文档&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.pickmall.cn&#34;&gt;https://docs.pickmall.cn&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;项目地址&lt;/h3&gt; &#xA;&lt;p&gt;gitee : &lt;a href=&#34;https://gitee.com/beijing_hongye_huicheng&#34;&gt;https://gitee.com/beijing_hongye_huicheng&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;github 镜像: &lt;a href=&#34;https://github.com/lilishop?tab=repositories&#34;&gt;https://github.com/lilishop?tab=repositories&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;商城UI 项目下3个文件夹 buyer：买家PC端，seller：商家端，manager：后台管理端&lt;/p&gt; &#xA;&lt;h3&gt;演示地址&lt;/h3&gt; &#xA;&lt;p&gt;PS：手机验证码为 ‘111111’&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;平台管理端&lt;/strong&gt;：&lt;a href=&#34;https://admin-b2b2c.pickmall.cn&#34;&gt;https://admin-b2b2c.pickmall.cn&lt;/a&gt; 账号：admin/123456&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;店铺管理端&lt;/strong&gt;：&lt;a href=&#34;https://store-b2b2c.pickmall.cn&#34;&gt;https://store-b2b2c.pickmall.cn&lt;/a&gt; 账号：13011111111/111111&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;商城PC页面&lt;/strong&gt;：&lt;a href=&#34;https://pc-b2b2c.pickmall.cn&#34;&gt;https://pc-b2b2c.pickmall.cn&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;商城 小程序/公众号/APP&lt;/strong&gt;：扫描二维码&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://pickmall.cn/assets/imgs/h5-qrcode.png&#34; alt=&#34;image-20210511171611793&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;快速本地部署&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.pickmall.cn/deploy/%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87.html&#34;&gt;点击跳转&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;商城数据库&lt;/strong&gt; 使用docker-compose部署数据库，自动初始化数据库，不需要手动下载等操作&lt;/p&gt; &#xA;&lt;p&gt;如果手动部署，才需要获取sql &lt;a href=&#34;https://gitee.com/beijing_hongye_huicheng/docker/tree/master/init/mysql&#34;&gt;点击跳转&lt;/a&gt; （PS：这里有与tag版本一致的sql，如果是历史版本，则docker项目也切换至历史版本获取sql即可，历史版本升级则根据java相聚的根目录DB目录下的升级sql，按需执行）。&lt;/p&gt; &#xA;&lt;h3&gt;功能列表&lt;/h3&gt; &#xA;&lt;h4&gt;平台管理端功能&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://pickmall.cn/assets/imgs/other/managerList1.jpg&#34; alt=&#34;平台管理端功能&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;卖家功能&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://pickmall.cn/assets/imgs/other/storeList.jpg&#34; alt=&#34;商家端功能&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;商城前端功能展示&lt;/h3&gt; &#xA;&lt;h4&gt;商城移动端&lt;/h4&gt; &#xA;&lt;img src=&#34;https://pickmall.cn/assets/imgs/other/app.gif&#34; alt=&#34;移动端功能展示&#34; style=&#34;zoom:50%;&#34;&gt; &#xA;&lt;h4&gt;平台管理端&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://pickmall.cn/assets/imgs/other/manager.gif&#34; alt=&#34;管理端功能展示&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;技术选型&lt;/h3&gt; &#xA;&lt;h4&gt;架构图&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://lili-system.oss-cn-beijing.aliyuncs.com/docs/%E6%9E%B6%E6%9E%84.png&#34; alt=&#34;技术选型&#34;&gt;&lt;/p&gt; &#xA;&lt;h5&gt;后台技术选型&lt;/h5&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;   &lt;th&gt;框架&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;基础框架&lt;/td&gt; &#xA;   &lt;td&gt;Spring Boot&lt;/td&gt; &#xA;   &lt;td&gt;MVC框架&lt;/td&gt; &#xA;   &lt;td&gt;Spring MVC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;持久框架&lt;/td&gt; &#xA;   &lt;td&gt;Mybatis-Plus&lt;/td&gt; &#xA;   &lt;td&gt;程序构建&lt;/td&gt; &#xA;   &lt;td&gt;Maven&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;关系型数据库&lt;/td&gt; &#xA;   &lt;td&gt;MySQL&lt;/td&gt; &#xA;   &lt;td&gt;消息中间件AMQP&lt;/td&gt; &#xA;   &lt;td&gt;RocketMQ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;缓存&lt;/td&gt; &#xA;   &lt;td&gt;Redis +MongoDB&lt;/td&gt; &#xA;   &lt;td&gt;搜索引擎&lt;/td&gt; &#xA;   &lt;td&gt;Elasticsearch&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;安全框架&lt;/td&gt; &#xA;   &lt;td&gt;Spring Security&lt;/td&gt; &#xA;   &lt;td&gt;数据库连接池&lt;/td&gt; &#xA;   &lt;td&gt;Druid&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;数据库分库分表&lt;/td&gt; &#xA;   &lt;td&gt;sharding&lt;/td&gt; &#xA;   &lt;td&gt;定时任务&lt;/td&gt; &#xA;   &lt;td&gt;xxl-job&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;负载均衡&lt;/td&gt; &#xA;   &lt;td&gt;Nginx&lt;/td&gt; &#xA;   &lt;td&gt;静态资源&lt;/td&gt; &#xA;   &lt;td&gt;阿里云OSS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;短信&lt;/td&gt; &#xA;   &lt;td&gt;阿里云短信&lt;/td&gt; &#xA;   &lt;td&gt;认证&lt;/td&gt; &#xA;   &lt;td&gt;JWT&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;日志处理&lt;/td&gt; &#xA;   &lt;td&gt;Log4j&lt;/td&gt; &#xA;   &lt;td&gt;接口规范&lt;/td&gt; &#xA;   &lt;td&gt;RESTful&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h5&gt;前端-运营后台、店铺后台&lt;/h5&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;   &lt;th&gt;框架&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;   &lt;th&gt;框架&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;构建工具&lt;/td&gt; &#xA;   &lt;td&gt;webpack&lt;/td&gt; &#xA;   &lt;td&gt;JS版本&lt;/td&gt; &#xA;   &lt;td&gt;ES6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;基础JS框架&lt;/td&gt; &#xA;   &lt;td&gt;Vue.js&lt;/td&gt; &#xA;   &lt;td&gt;视频播放器&lt;/td&gt; &#xA;   &lt;td&gt;Dplayer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;路由管理&lt;/td&gt; &#xA;   &lt;td&gt;Vue Router&lt;/td&gt; &#xA;   &lt;td&gt;状态管理&lt;/td&gt; &#xA;   &lt;td&gt;Vuex&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;基础UI库&lt;/td&gt; &#xA;   &lt;td&gt;iView&lt;/td&gt; &#xA;   &lt;td&gt;UI界面基于&lt;/td&gt; &#xA;   &lt;td&gt;iView&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;网络请求&lt;/td&gt; &#xA;   &lt;td&gt;axios&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h5&gt;前端-移动端&lt;/h5&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;   &lt;th&gt;架构&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;   &lt;th&gt;架构&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;基础UI库&lt;/td&gt; &#xA;   &lt;td&gt;uViewui&lt;/td&gt; &#xA;   &lt;td&gt;基础框架&lt;/td&gt; &#xA;   &lt;td&gt;uni-app&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CSS预处理&lt;/td&gt; &#xA;   &lt;td&gt;scss&lt;/td&gt; &#xA;   &lt;td&gt;地图引擎&lt;/td&gt; &#xA;   &lt;td&gt;amap&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;版本升级&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;系统后续会提供多场景解决方案。&#xA;更多架构：微服务、Saas、中台等，都会支持。 支持差价升级商业授权&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;商业授权&lt;/h3&gt; &#xA;&lt;p&gt;商业版本与开源版本代码一致，没有区分&lt;/p&gt; &#xA;&lt;p&gt;商业使用需要授权，授权方式可选择联系官网客服，或者qq群联系群主。&lt;/p&gt; &#xA;&lt;p&gt;商业授权模式为永久授权，支持永久升级。&lt;/p&gt; &#xA;&lt;p&gt;商业案例由于涉及部分多层二开关系，如需了解可以咨询销售。&lt;/p&gt; &#xA;&lt;h3&gt;开源须知&lt;/h3&gt; &#xA;&lt;p&gt;1.仅允许用于个人学习研究使用.&lt;/p&gt; &#xA;&lt;p&gt;2.禁止将本开源的代码和资源进行任何形式任何名义的出售.&lt;/p&gt; &#xA;&lt;p&gt;3.软件受国家计算机软件著作权保护（登记号：2021SR0805085）。&lt;/p&gt; &#xA;&lt;p&gt;4.限制商用，如果需要商业使用请联系我们。QQ3409056806.或者加入qq群联系群主。&lt;/p&gt; &#xA;&lt;h3&gt;交流群&lt;/h3&gt; &#xA;&lt;h5&gt;官方qq 1群 961316482（已满）&lt;/h5&gt; &#xA;&lt;h5&gt;官方qq 2群 875294241&lt;/h5&gt;</summary>
  </entry>
  <entry>
    <title>zq2599/blog_demos</title>
    <updated>2022-06-01T02:01:04Z</updated>
    <id>tag:github.com,2022-06-01:/zq2599/blog_demos</id>
    <link href="https://github.com/zq2599/blog_demos" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CSDN博客专家程序员欣宸的github，这里有六百多篇原创文章的详细分类和汇总，以及对应的源码，内容涉及Java、Docker、Kubernetes、DevOPS等方面&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;关于作者&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;微信公众号、头条号、CSDN账号都是&lt;font color=&#34;blue&#34;&gt;程序员欣宸&lt;/font&gt;&lt;/li&gt; &#xA; &lt;li&gt;前腾讯、前阿里员工，从事Java后台工作；&lt;/li&gt; &#xA; &lt;li&gt;对Docker和Kubernetes充满热爱；&lt;/li&gt; &#xA; &lt;li&gt;所有文章均为作者原创；&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;关于这个代码仓库&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;CSDN博客地址：&lt;a href=&#34;http://blog.csdn.net/boling_cavalry&#34;&gt;http://blog.csdn.net/boling_cavalry&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;这个代码仓库里是博客中涉及的源码、文件等&lt;/li&gt; &#xA; &lt;li&gt;如果对您有帮助，请给个Star，谢谢您！&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;文章分类&lt;/h1&gt; &#xA;&lt;p&gt;总的来说分为以下几大类，若有您感兴趣的内容，我将不胜荣幸：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Java；&lt;/li&gt; &#xA; &lt;li&gt;后台中间件；&lt;/li&gt; &#xA; &lt;li&gt;Docker；&lt;/li&gt; &#xA; &lt;li&gt;Kubernetes；&lt;/li&gt; &#xA; &lt;li&gt;大数据；&lt;/li&gt; &#xA; &lt;li&gt;综合兴趣，例如LeetCode、树莓派、群晖系统等；&lt;/li&gt; &#xA; &lt;li&gt;DevOps；&lt;/li&gt; &#xA; &lt;li&gt;常用工具和技巧；&lt;/li&gt; &#xA; &lt;li&gt;问题处理备忘；&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Java领域&lt;/h1&gt; &#xA;&lt;h2&gt;云原生技术，Quarkus专辑&lt;/h2&gt; &#xA;&lt;h3&gt;quarkus通用技术&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/122985638&#34;&gt;《quarkus实战之一：准备工作》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/123036523&#34;&gt;《quarkus实战之二：应用的创建、构建、部署》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/123196706&#34;&gt;《quarkus实战之三：开发模式(Development mode)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/123196853&#34;&gt;《quarkus实战之四：远程热部署》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/123268091&#34;&gt;《quarkus实战之五：细说maven插件》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/123303111&#34;&gt;《quarkus实战之六：配置》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/123307704&#34;&gt;《quarkus实战之七：使用配置》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/123321509&#34;&gt;《quarkus实战之八：profile》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;quarkus核心技术：依赖注入专辑&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/123752182&#34;&gt;《quarkus依赖注入之一：创建bean》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/123754648&#34;&gt;《quarkus依赖注入之二：bean的作用域》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/123861906&#34;&gt;《quarkus依赖注入之三：用注解选择注入bean》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/123939148&#34;&gt;《quarkus依赖注入之四：选择注入bean的高级手段》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/124055982&#34;&gt;《quarkus依赖注入之五：拦截器(Interceptor)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/124069627&#34;&gt;《quarkus依赖注入之六：发布和消费事件》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/124114602&#34;&gt;《quarkus依赖注入之七：生命周期回调》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/124234802&#34;&gt;《quarkus依赖注入之八：装饰器（Decorator）》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;基础知识&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79840049&#34;&gt;《CentOS7安装JDK8》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/83213608&#34;&gt;《Ubuntu下安装OpenJDK10》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/83240035&#34;&gt;《Ubuntu环境下载OpenJDK11源码》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/72858158&#34;&gt;《体验RxJava和lambda》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/75174486&#34;&gt;《实战限流（guava的RateLimiter）》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/77610629&#34;&gt;《java.util.Optional学习笔记》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78231032&#34;&gt;《org.springframework.util.StopWatch：简洁的耗时统计小工具》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/123598992&#34;&gt;《体验IntelliJ IDEA的远程开发（Remote Development）》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;进阶实战&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78238163&#34;&gt;《Java实战操作MongoDB集群（副本集）》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79361159&#34;&gt;《Docker下Java文件上传服务三部曲之一：准备环境》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79367520&#34;&gt;《Docker下Java文件上传服务三部曲之二：服务端开发》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79380053&#34;&gt;《Docker下Java文件上传服务三部曲之三：wireshark抓包分析》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/80719683&#34;&gt;《实战Redis序列化性能测试(Kryo和字符串)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/118636417&#34;&gt;《JavaCPP快速入门(官方demo增强版)》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;畅游JVM世界&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/83353102&#34;&gt;《极简，利用Docker仅两行命令就能下载和编译OpenJDK11》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/83245148&#34;&gt;《利用Docker极速下载OpenJDK11源码》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/83420005&#34;&gt;《制作Docker镜像，用来下载OpenJDK11源码》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/84890664&#34;&gt;《制作Docker镜像，用来编译OpenJDK11源码》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/83303317&#34;&gt;《Ubuntu环境编辑OpenJDK11源码》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/94320638&#34;&gt;《openjdk镜像的tag说明》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/101908575&#34;&gt;《ARM64架构下，OpenJDK的官方Docker镜像为何没有8版本？》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/101855126&#34;&gt;《ARM架构下的Docker环境，OpenJDK官方没有8版本镜像，如何完美解决？》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/77623193&#34;&gt;《极速体验编译openjdk8（docker环境）》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/70243954&#34;&gt;《在docker上编译openjdk8》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/70557537&#34;&gt;《修改，编译，GDB调试openjdk8源码(docker环境下)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/70904278&#34;&gt;《环境变量_JAVA_LAUNCHER_DEBUG，它能给你更多的jvm信息》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/76384425&#34;&gt;《Java虚拟机学习：方法调用的字节码指令》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/77793224&#34;&gt;《Java的wait()、notify()学习三部曲之一：JVM源码分析》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/77897108&#34;&gt;《Java的wait()、notify()学习三部曲之二：修改JVM源码看参数》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/77995069&#34;&gt;《Java的wait()、notify()学习三部曲之三：修改JVM源码控制抢锁顺序》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;玩转Maven&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/104617262&#34;&gt;《Ubuntu部署和体验Nexus3》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/80384722&#34;&gt;《没有JDK和Maven，用Docker也能构建Maven工程》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78869466&#34;&gt;《maven构建docker镜像三部曲之一：准备环境》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78872020&#34;&gt;《maven构建docker镜像三部曲之二：编码和构建镜像》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78934391&#34;&gt;《maven构建docker镜像三部曲之三：推送到远程仓库(内网和阿里云)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79059021&#34;&gt;《实战maven私有仓库三部曲之一：搭建和使用》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79070744&#34;&gt;《实战maven私有仓库三部曲之二：上传到私有仓库》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79111740&#34;&gt;《实战maven私有仓库三部曲之三：Docker下搭建maven私有仓库》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/80873343&#34;&gt;《修改gradle脚本，加速spring4.1源码编译构建速度》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/94355659&#34;&gt;《Docker与Jib(maven插件版)实战》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/100179709&#34;&gt;《Jib使用小结(Maven插件版)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/101606958&#34;&gt;《Jib构建镜像问题从定位到深入分析》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/104849839&#34;&gt;《kubernetes下的jenkins如何设置maven》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/104875452&#34;&gt;《kubernetes下jenkins实战maven项目编译构建》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/105458882&#34;&gt;《Nexus3常用功能备忘》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/121240721&#34;&gt;《我把自己的java库发布到了maven中央仓库，从此可以像Jackson、Spring的jar一样使用它了》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;玩转Gradle&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/115049633&#34;&gt;Gradle构建多模块SpringBoot应用&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/115609899&#34;&gt;《Gradle项目的jar发布到私有仓库》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Jackson学习特辑&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/107135958&#34;&gt;《jackson学习之一：基本信息》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/108571629&#34;&gt;《jackson学习之二：jackson-core》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/108192174&#34;&gt;《jackson学习之三：常用API操作》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/108298858&#34;&gt;《jackson学习之四：WRAP_ROOT_VALUE（root对象）》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/108412558&#34;&gt;《jackson学习之五：JsonInclude注解》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/108333324&#34;&gt;《jackson学习之六：常用类注解》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/108427844&#34;&gt;《jackson学习之七：常用Field注解》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/108433330&#34;&gt;《jackson学习之八：常用方法注解》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/108460433&#34;&gt;《jackson学习之九：springboot整合(配置文件)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/108559056&#34;&gt;《jackson学习之十(终篇)：springboot整合(配置类)》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;JUnit5学习特辑&lt;/h2&gt; &#xA;&lt;p&gt;《JUnit5学习》系列旨在通过实战提升SpringBoot环境下的单元测试技能，一共八篇文章，链接如下：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/108810587&#34;&gt;《JUnit5学习之一：基本操作》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/108861185&#34;&gt;《JUnit5学习之二：Assumptions类》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/108899437&#34;&gt;《JUnit5学习之三：Assertions类》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/108909107&#34;&gt;《JUnit5学习之四：按条件执行》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/108914091&#34;&gt;《JUnit5学习之五：标签(Tag)和自定义注解》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/108930987&#34;&gt;《JUnit5学习之六：参数化测试(Parameterized Tests)基础》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/108942301&#34;&gt;《JUnit5学习之七：参数化测试(Parameterized Tests)进阶》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/108952500&#34;&gt;《JUnit5学习之八：综合进阶（终篇）》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;jetcd学习特辑&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/115276045&#34;&gt;jetcd实战之一:极速体验&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/115419439&#34;&gt;jetcd实战之二:基本操作&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/115434576&#34;&gt;jetcd实战之三:进阶操作(事务、监听、租约)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;disruptor学习特辑&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/117185656&#34;&gt;快速入门&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/117318462&#34;&gt;Disruptor类分析&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/117386253&#34;&gt;环形队列的基础操作(不用Disruptor类)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/117395009&#34;&gt;事件消费知识点小结&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/117405835&#34;&gt;事件消费实战&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/117575447&#34;&gt;常见场景&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/117608051&#34;&gt;等待策略&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/117636483&#34;&gt;知识点补充(终篇)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;MyBatis学习（初级版）&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/107805840&#34;&gt;《MyBatis初级实战之一：Spring Boot集成》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/107971293&#34;&gt;《MyBatis初级实战之二：增删改查》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/108092045&#34;&gt;《MyBatis初级实战之三：springboot集成druid》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/108179671&#34;&gt;《MyBatis初级实战之四：druid多数据源》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/109020733&#34;&gt;《MyBatis初级实战之五：一对一关联查询》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/109193441&#34;&gt;《MyBatis初级实战之六：一对多关联查询》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;java版gRPC实战专辑&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/115049443&#34;&gt;用proto生成代码&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/115803738&#34;&gt;服务发布和调用&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/115983001&#34;&gt;服务端流&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/116097756&#34;&gt;客户端流&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/116354293&#34;&gt;双向流&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/116479078&#34;&gt;客户端动态获取服务端地址&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/116635441&#34;&gt;基于eureka的注册发现&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Java扩展Nginx专辑&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/122764774&#34;&gt;《Java扩展Nginx之一：你好，nginx-clojure》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/122773081&#34;&gt;《Java扩展Nginx之二：编译nginx-clojure源码》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/122779437&#34;&gt;《Java扩展Nginx之三：基础配置项》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/122782310&#34;&gt;《Java扩展Nginx之四：远程调试》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/122788726&#34;&gt;《Java扩展Nginx之五：五大handler(系列最核心)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/122825530&#34;&gt;《Java扩展Nginx之六：两大filter》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/123015410&#34;&gt;《Java扩展Nginx之七：共享内存》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;视图邻域&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/119062543&#34;&gt;Java版流媒体编解码和图像处理(JavaCPP+FFmpeg)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/120964456&#34;&gt;《Ubuntu16桌面版编译和安装OpenCV4》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/121069372&#34;&gt;《Ubuntu16桌面版编译OpenCV4的java库和so库》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Spring领域&lt;/h1&gt; &#xA;&lt;h2&gt;Spring基础&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/74066494&#34;&gt;《实战spring自定义属性(schema)：快速体验》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/81603303&#34;&gt;《spring的BeanFactory和ApplicationContext》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/82555352&#34;&gt;《ImportSelector与DeferredImportSelector的区别（spring4）》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/101369202&#34;&gt;《实战spring自定义属性(schema)》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Spring扩展实战专题&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/81474340&#34;&gt;《spring4.1.8扩展实战之一：自定义环境变量验证》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/81611426&#34;&gt;《spring4.1.8扩展实战之二：Aware接口揭秘》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/81697314&#34;&gt;《spring4.1.8扩展实战之三：广播与监听》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/82051356&#34;&gt;《spring4.1.8扩展实战之四：感知spring容器变化(SmartLifecycle接口)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/82083889&#34;&gt;《spring4.1.8扩展实战之五：改变bean的定义(BeanFactoryPostProcessor接口)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/82193692&#34;&gt;《spring4.1.8扩展实战之六：注册bean到spring容器(BeanDefinitionRegistryPostProcessor接口)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/82250986&#34;&gt;《spring4.1.8扩展实战之七：控制bean(BeanPostProcessor接口)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/82530167&#34;&gt;《spring4.1.8扩展实战之八：Import注解》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;畅游Spring源码世界&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/73139161&#34;&gt;《修改和编译spring源码，构建jar(spring-context-4.0.2.RELEASE)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/73071020&#34;&gt;《spring+mybatis启动NoClassDefFoundError异常分析三部曲之一：稳定重现问题》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/73442311&#34;&gt;《spring+mybatis启动NoClassDefFoundError异常分析三部曲之二：定位错误》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/73759475&#34;&gt;《spring+mybatis启动NoClassDefFoundError异常分析三部曲之三：改spring源码，取详细错误》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79375713&#34;&gt;《SpringMVC源码分析：POST请求中的文件处理》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79426075&#34;&gt;《下载Spring4.1.x源码并用IntelliJ IDEA打开》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/80791786&#34;&gt;《windows下修改、编译、构建spring-framework4.1.8.RELEASE源码》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/80957707&#34;&gt;《spring4.1.8初始化源码学习三部曲之一：AbstractApplicationContext构造方法》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/80958832&#34;&gt;《spring4.1.8初始化源码学习三部曲之二：setConfigLocations方法》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/81045637&#34;&gt;《spring4.1.8初始化源码学习三部曲之三：AbstractApplicationContext.refresh方法》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;SpringBoot基础&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/82956512&#34;&gt;《自定义spring boot starter三部曲之一：准备工作》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/83041472&#34;&gt;《自定义spring boot starter三部曲之二：实战开发》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/83048588&#34;&gt;《自定义spring boot starter三部曲之三：源码分析spring.factories加载过程》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/69802622&#34;&gt;《基于spring boot框架访问zookeeper》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78991870&#34;&gt;《Docker下运行springboot》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79120268&#34;&gt;《springboot线程池的使用和扩展》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/80710774&#34;&gt;《SpringBoot下用Kyro作为Redis序列化工具》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/86770023&#34;&gt;《springboot应用查询城市天气》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/101999606&#34;&gt;《立即可用的实战源码(springboot+redis+mybatis+restTemplate)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/106600620&#34;&gt;《SpringBoot-2.3镜像方案为什么要做多个layer》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/106597358&#34;&gt;《体验SpringBoot(2.3)应用制作Docker镜像(官方方案)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/106598189&#34;&gt;《详解SpringBoot(2.3)应用制作Docker镜像(官方方案)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/106605264&#34;&gt;《掌握SpringBoot-2.3的容器探针：基础篇》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/106606442&#34;&gt;《掌握SpringBoot-2.3的容器探针：深入篇》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/106607225&#34;&gt;《掌握SpringBoot-2.3的容器探针：实战篇》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/106966579&#34;&gt;《springboot的jar为何能独立运行》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/115451129&#34;&gt;《SpringBoot(2.4)应用制作Docker镜像(Gradle版官方方案)》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;SpringBoot进阶实战&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78991422&#34;&gt;《Docker下redis与springboot三部曲之一：极速体验》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78995407&#34;&gt;《Docker下redis与springboot三部曲之二：安装redis主从和哨兵》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79041129&#34;&gt;《Docker下redis与springboot三部曲之三：springboot下访问redis哨兵》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/81587556&#34;&gt;《SpringBoot应用使用自定义的ApplicationContext实现类》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/83784113&#34;&gt;《Spring Boot应用在kubernetes的sidecar设计与实战》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/117153661&#34;&gt;《Spring Native实战(畅快体验79毫秒启动springboot应用)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/118290933&#34;&gt;《三分钟体验：SpringBoot用深度学习模型识别数字》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/118353259&#34;&gt;《SpringBoot用深度学习模型识别数字：开发详解》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;SpringCloud基础&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/94907172&#34;&gt;《极速体验SpringCloud Gateway》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/82683755&#34;&gt;《应用升级SpringCloud版本时的注意事项(Dalston升级到Edgware)》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;SpringCloud实战&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79177930&#34;&gt;《Docker下的Spring Cloud三部曲之一：极速体验》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79134497&#34;&gt;《Docker下的Spring Cloud三部曲之二：细说Spring Cloud开发》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79192376&#34;&gt;《Docker下的Spring Cloud三部曲之三：在线横向扩容》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/90578934&#34;&gt;《本地服务调用K8S环境中的SpringCloud微服务实战》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Eureka源码分析专题&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/81809929&#34;&gt;《Spring Cloud源码分析之Eureka篇第一章：准备工作》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/81809860&#34;&gt;《Spring Cloud源码分析之Eureka篇第二章：注册中心启动类上的注解EnableEurekaServer》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/82668480&#34;&gt;《Spring Cloud源码分析之Eureka篇第三章：EnableDiscoveryClient与EnableEurekaClient的区别(Edgware版本)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/82721583&#34;&gt;《Spring Cloud源码分析之Eureka篇第四章：服务注册是如何发起的》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/82813180&#34;&gt;《Spring Cloud源码分析之Eureka篇第五章：更新服务列表》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/82861618&#34;&gt;《Spring Cloud源码分析之Eureka篇第六章：服务注册》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/82915355&#34;&gt;《Spring Cloud源码分析之Eureka篇第七章：续约》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/82930728&#34;&gt;《Spring Cloud源码分析之Eureka篇第八章：服务注册名称的来历》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Spring Cloud Gateway从入门到提高&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/119490780&#34;&gt;《Spring Cloud Gateway实战之一：初探》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/119592175&#34;&gt;《Spring Cloud Gateway实战之二：更多路由配置方式》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/119705402&#34;&gt;《Spring Cloud Gateway实战之三：动态路由》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/119724550&#34;&gt;《Spring Cloud Gateway实战之四：内置predicate小结》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/119814985&#34;&gt;《Spring Cloud Gateway实战之五：内置filter》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/119849436&#34;&gt;《Spring Cloud Gateway的断路器(CircuitBreaker)功能》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/119967617&#34;&gt;《Spring Cloud Gateway自定义过滤器实战(观测断路器状态变化)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/119989069&#34;&gt;《Spring Cloud Gateway限流实战》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/120096926&#34;&gt;《Spring Cloud Gateway修改请求和响应body的内容》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/120114474&#34;&gt;《Spring Cloud Gateway过滤器精确控制异常返回(分析篇)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/120170949&#34;&gt;《Spring Cloud Gateway过滤器精确控制异常返回(实战，控制http返回码和message字段)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/120239199&#34;&gt;《Spring Cloud Gateway过滤器精确控制异常返回(实战，完全定制返回body)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/121805244&#34;&gt;《Spring Cloud Gateway编码实现任意地址跳转》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;spring-cloud-alibaba实战&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/97617353&#34;&gt;《Docker下,两分钟极速体验Nacos》&lt;/a&gt;；&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/98328270&#34;&gt;《Docker下的Nacos环境开发》&lt;/a&gt;；&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/99708769&#34;&gt;《Docker下,两分钟极速体验Nacos配置中心》&lt;/a&gt;；&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/100067833&#34;&gt;《Docker下Nacos配置应用开发》&lt;/a&gt;；&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/100171289&#34;&gt;《Docker下Nacos持久化配置》&lt;/a&gt;;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;spring-cloud-kubernetes特辑&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/91346780&#34;&gt;《spring-cloud-kubernetes官方demo运行实战》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/91351411&#34;&gt;《你好spring-cloud-kubernetes》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/92069486&#34;&gt;《spring-cloud-kubernetes背后的三个关键知识点》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/92394559&#34;&gt;《spring-cloud-kubernetes的服务发现和轮询实战(含熔断)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/95001691&#34;&gt;《spring-cloud-kubernetes与SpringCloud Gateway》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/95804909&#34;&gt;《spring-cloud-kubernetes与k8s的configmap》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/97529652&#34;&gt;《spring-cloud-kubernetes自动同步k8s的configmap更新》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;spring-cloud-square特辑&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/119130289&#34;&gt;五分钟搞懂spring-cloud-square&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/119304887&#34;&gt;spring-cloud-square开发实战(三种类型全覆盖)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/119360559&#34;&gt;spring-cloud-square源码速读(spring-cloud-square-okhttp篇)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/119383904&#34;&gt;spring-cloud-square源码速读（retrofit + okhttp篇）&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;dubbo实战特辑&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/109096867&#34;&gt;准备和初体验&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/109142783&#34;&gt;与SpringBoot集成&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/109147843&#34;&gt;使用Zookeeper注册中心&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/109267151&#34;&gt;管理控制台dubbo-admin&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Docker&lt;/h1&gt; &#xA;&lt;h2&gt;基础知识&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/60367393&#34;&gt;《Docker的准备，安装，初体验》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/77752721&#34;&gt;《CentOS7安装docker》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/77833069&#34;&gt;《docker下载镜像慢怎么办？daocloud加速器来帮你》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78818462&#34;&gt;《docker私有仓库搭建与使用实战》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78869466&#34;&gt;《maven构建docker镜像三部曲之一：准备环境》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78872020&#34;&gt;《maven构建docker镜像三部曲之二：编码和构建镜像》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78934391&#34;&gt;《maven构建docker镜像三部曲之三：推送到远程仓库(内网和阿里云)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/80215214&#34;&gt;《查看Docker容器的信息》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/80381258&#34;&gt;《Docker镜像制作实战：设置时区和系统编码》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/90727359&#34;&gt;《Docker镜像列表中的none:none是什么》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/90742657&#34;&gt;《Docker多阶段构建实战(multi-stage builds)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/92846483&#34;&gt;《docker的/var/run/docker.sock参数》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/93380447&#34;&gt;《docker与gosu》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/100049996&#34;&gt;《Docker远程连接设置》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/100601169&#34;&gt;《TLS加密远程连接Docker》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/101100898&#34;&gt;《CentOS部署Harbor镜像仓库》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/101145739&#34;&gt;《Docker常用命令小记》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/101830200&#34;&gt;《一行命令安装docker和docker-compose(CentOS7)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/102641942&#34;&gt;《极速体验docker容器健康》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/102649435&#34;&gt;《Java应用在docker环境配置容器健康检查》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/102874052&#34;&gt;《docker-compose下的java应用启动顺序两部曲之一：问题分析》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/102880881&#34;&gt;《docker-compose下的java应用启动顺序两部曲之二：实战》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/106590784&#34;&gt;《设置非root账号不用sudo直接执行docker命令》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/106600620&#34;&gt;《SpringBoot-2.3镜像方案为什么要做多个layer》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;进阶实战&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/61415268&#34;&gt;《Docker下的web开发和Tomcat部署》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/70184605&#34;&gt;《实战docker，编写Dockerfile定制tomcat镜像，实现web应用在线部署》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/70194072&#34;&gt;《实战docker，构建nginx反向代理tomcat，学习link和docker-compose》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/70243954&#34;&gt;《在docker上编译openjdk8》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/70557537&#34;&gt;《修改，编译，GDB调试openjdk8源码(docker环境下)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/71055159&#34;&gt;《让docker中的mysql启动时自动执行sql》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/71082610&#34;&gt;《Docker搭建disconf环境，三部曲之一：极速搭建disconf》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/71107498&#34;&gt;《Docker搭建disconf环境，三部曲之二：本地快速构建disconf镜像》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/71120725&#34;&gt;《Docker搭建disconf环境，三部曲之三：细说搭建过程》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/71404395&#34;&gt;《docker下使用disconf：极速体验》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/71424124&#34;&gt;《docker下使用disconf：细说demo开发》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/71440053&#34;&gt;《jedis使用入门（Docker环境下）》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/71576775&#34;&gt;《Docker下kafka学习，三部曲之一：极速体验kafka》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/71601189&#34;&gt;《Docker下kafka学习，三部曲之二：本地环境搭建》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/71634631&#34;&gt;《Docker下kafka学习，三部曲之三：java开发》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/72388834&#34;&gt;《Docker下部署dubbo，消费者应用无法使用link参数的问题》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/72303126&#34;&gt;《Docker下dubbo开发，三部曲之一：极速体验》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/72460526&#34;&gt;《Docker下dubbo开发，三部曲之二：本地环境搭建》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/72789984&#34;&gt;《Docker下dubbo开发，三部曲之三：java开发》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/76857936&#34;&gt;《Docker下实战zabbix三部曲之一：极速体验》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/77095153&#34;&gt;《Docker下实战zabbix三部曲之二：监控其他机器》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/77410178&#34;&gt;《Docker下实战zabbix三部曲之三：自定义监控项》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/77623193&#34;&gt;《极速体验编译openjdk8（docker环境）》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78041775&#34;&gt;《Docker下HBase学习，三部曲之一：极速体验》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78041811&#34;&gt;《Docker下HBase学习，三部曲之二：集群HBase搭建》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78156406&#34;&gt;《Docker下HBase学习，三部曲之三：java开发》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78168085&#34;&gt;《Docker下，极速体验mongodb》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78172113&#34;&gt;《制作mongodb的Docker镜像文件》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78173636&#34;&gt;《Docker下，实战mongodb副本集（Replication）》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78234762&#34;&gt;《Docker下安装Rockmongo，图形化操作mongodb》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78244943&#34;&gt;《Docker下的Kafka学习之一：制作集群用的镜像文件》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78309050&#34;&gt;《Docker下的Kafka学习之二：搭建集群环境》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78386451&#34;&gt;《Docker下的Kafka学习之三：集群环境下的java开发》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/78440890&#34;&gt;《Docker下，极速体验编译pinpoint1.6.x分支》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78447310&#34;&gt;《把pinpoint编译环境做成Docker镜像文件》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78447314&#34;&gt;《Docker下，极速体验pinpoint1.6.3》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78448564&#34;&gt;《Docker下，pinpoint环境搭建》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78495628&#34;&gt;《pinpoint插件开发之一：牛刀小试，调整gson插件》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78568073&#34;&gt;《pinpoint插件开发之二：从零开始新建一个插件》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78942408&#34;&gt;《docker下的Jenkins安装和体验》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78991870&#34;&gt;《Docker下运行springboot》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78991422&#34;&gt;《Docker下redis与springboot三部曲之一：极速体验》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78995407&#34;&gt;《Docker下redis与springboot三部曲之二：安装redis主从和哨兵》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79041129&#34;&gt;《Docker下redis与springboot三部曲之三：springboot下访问redis哨兵》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79111740&#34;&gt;《实战maven私有仓库三部曲之三：Docker下搭建maven私有仓库》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79177930&#34;&gt;《Docker下的Spring Cloud三部曲之一：极速体验》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79134497&#34;&gt;《Docker下的Spring Cloud三部曲之二：细说Spring Cloud开发》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79192376&#34;&gt;《Docker下的Spring Cloud三部曲之三：在线横向扩容》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79290944&#34;&gt;《Docker下的OpenResty三部曲之一：极速体验》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79292356&#34;&gt;《Docker下的OpenResty三部曲之二：细说开发》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79311164&#34;&gt;《Docker下的OpenResty三部曲之三：OpenResty加Tomcat的服务》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79361159&#34;&gt;《Docker下Java文件上传服务三部曲之一：准备环境》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79367520&#34;&gt;《Docker下Java文件上传服务三部曲之二：服务端开发》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79380053&#34;&gt;《Docker下Java文件上传服务三部曲之三：wireshark抓包分析》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79751085&#34;&gt;《Docker下手工配置MySQL主从》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79747488&#34;&gt;《Docker下MySQL主从三部曲之一：极速体验》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79775617&#34;&gt;《Docker下MySQL主从三部曲之二：细说镜像制作》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79782008&#34;&gt;《Docker下MySQL主从三部曲之三：binlog日志参数实战》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79950677&#34;&gt;《Docker下ELK三部曲之一：极速体验》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79972444&#34;&gt;《Docker下ELK三部曲之二：细说开发》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/80141800&#34;&gt;《Docker下ELK三部曲之三：K8S上的ELK和应用日志上报》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/80381258&#34;&gt;《Docker镜像制作实战：设置时区和系统编码》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/80384722&#34;&gt;《没有JDK和Maven，用Docker也能构建Maven工程》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/80630100&#34;&gt;《Docker下RabbitMQ延时队列实战两部曲之一：极速体验》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/80635050&#34;&gt;《Docker下RabbitMQ延时队列实战两部曲之二：细说开发》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/83245148&#34;&gt;《利用Docker极速下载OpenJDK11源码》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/83353102&#34;&gt;《极简，利用Docker仅两行命令就能下载和编译OpenJDK11》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/85395080&#34;&gt;《kafka的Docker镜像使用说明(wurstmeister/kafka)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/85528519&#34;&gt;《如何使用Docker内的kafka服务》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/86663168&#34;&gt;《自己动手制作elasticsearch-head的Docker镜像》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/86668180&#34;&gt;《自己动手制作elasticsearch的ik分词器的Docker镜像》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/86669450&#34;&gt;《docker下，一行命令搭建elasticsearch6.5.0集群(带head插件和ik分词器)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/86851069&#34;&gt;《docker下，极速搭建spark集群(含hdfs集群)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/87438666&#34;&gt;《docker下的spark集群，调整参数榨干硬件》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/87904485&#34;&gt;《用golang官方Docker镜像运行项目》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/88367137&#34;&gt;《Docker下Prometheus和Grafana三部曲之一：极速体验》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/88374848&#34;&gt;《Docker下Prometheus和Grafana三部曲之二：细说Docker编排》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/88375734&#34;&gt;《Docker下Prometheus和Grafana三部曲之三：自定义监控项开发和配置》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/94355659&#34;&gt;《Docker与Jib(maven插件版)实战》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/97617353&#34;&gt;《Docker下,两分钟极速体验Nacos》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/98328270&#34;&gt;《Docker下的Nacos环境开发》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/99708769&#34;&gt;《Docker下,两分钟极速体验Nacos配置中心》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/100067833&#34;&gt;《Docker下Nacos配置应用开发》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/100171289&#34;&gt;《Docker下Nacos持久化配置》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/101369208&#34;&gt;《Docker下多机器免密码SSH登录》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/100051325&#34;&gt;《IDEA的Docker插件实战(Dockerfile篇)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/100062008&#34;&gt;《IDEA的Docker插件实战(Docker Image篇)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/100064934&#34;&gt;《IDEA的Docker插件实战(Docker-compose篇)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/100634272&#34;&gt;《Docker Swarm从部署到基本操作》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/101908575&#34;&gt;《ARM64架构下，OpenJDK的官方Docker镜像为何没有8版本？》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/101855126&#34;&gt;《ARM架构下的Docker环境，OpenJDK官方没有8版本镜像，如何完美解决？》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/105015546&#34;&gt;《Docker部署flink备忘》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/115476859&#34;&gt;《用GitHub Actions制作Docker镜像》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;kubernetes&lt;/h1&gt; &#xA;&lt;h2&gt;kubernetes基础&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79516039&#34;&gt;《Kubernetes持久卷实战两部曲之一：极速体验》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79592461&#34;&gt;《Kubernetes持久卷实战两部曲之二：细说开发》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79598905&#34;&gt;《实战Kubernetes动态卷存储(NFS)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/83784113&#34;&gt;《Spring Boot应用在kubernetes的sidecar设计与实战》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/88591982&#34;&gt;《Kubernetes源码学习之一:下载和编译源码》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/88603293&#34;&gt;《Kubernetes深入学习之二:编译和部署镜像(api-server)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/88917818&#34;&gt;《k8s自定义controller三部曲之一:创建CRD（Custom Resource Definition）》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/88924194&#34;&gt;《k8s自定义controller三部曲之二:自动生成代码》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/88934063&#34;&gt;《k8s自定义controller三部曲之三：编写controller代码》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/88958242&#34;&gt;《查看k8s的etcd数据》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/105006295&#34;&gt;《kubernetes部署metrics-server》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/106453727&#34;&gt;《Kubernetes的Local Persistent Volumes使用小记》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/106594392&#34;&gt;《开发阶段，将SpringBoot应用快速部署到K8S》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;kubernetes安装部署&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78694206&#34;&gt;《kubeadm搭建kubernetes集群之一：构建标准化镜像》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78700527&#34;&gt;《kubeadm搭建kubernetes集群之二：创建master节点》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78703364&#34;&gt;《kubeadm搭建kubernetes集群之三：加入node节点》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78762829&#34;&gt;《rancher下的kubernetes之一：构建标准化vmware镜像》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78764915&#34;&gt;《rancher下的kubernetes之二：安装rancher和kubernetes》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79223091&#34;&gt;《rancher下的kubernetes之三：在linux上安装kubectl工具》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79613037&#34;&gt;《CentOS7环境安装Kubernetes四部曲之一：标准化机器准备》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79615597&#34;&gt;《CentOS7环境安装Kubernetes四部曲之二：配置模板和安装master》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79621557&#34;&gt;《CentOS7环境安装Kubernetes四部曲之三：添加节点》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79624655&#34;&gt;《CentOS7环境安装Kubernetes四部曲之四：安装kubectl工具》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/83692428&#34;&gt;《CentOS7环境部署kubenetes1.12版本五部曲之一：标准化机器》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/83692606&#34;&gt;《CentOS7环境部署kubenetes1.12版本五部曲之二：创建master节点》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/83714209&#34;&gt;《CentOS7环境部署kubenetes1.12版本五部曲之三：node节点加入》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/83715479&#34;&gt;《CentOS7环境部署kubenetes1.12版本五部曲之四：安装dashboard》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/83740262&#34;&gt;《CentOS7环境部署kubenetes1.12版本五部曲之五：安装kubectl》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/90547822&#34;&gt;《极速安装和体验k8s(Minikube)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/91304127&#34;&gt;《Linux安装minikube指南》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/103106314&#34;&gt;《kubespray2.11安装kubernetes1.15》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/122893949&#34;&gt;《极速安装kubernetes-1.22.0（三台CentOS7服务器）》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;kubernetes进阶实战&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79215453&#34;&gt;《kubernetes下的Nginx加Tomcat三部曲之一：极速体验》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79232244&#34;&gt;《kubernetes下的Nginx加Tomcat三部曲之二：细说开发》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79246527&#34;&gt;《kubernetes下的Nginx加Tomcat三部曲之三：实战扩容和升级》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79321518&#34;&gt;《Kubernetes下web服务的性能测试三部曲之一：准备工作》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79327660&#34;&gt;《Kubernetes下web服务的性能测试三部曲之二：纵向扩容》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79336661&#34;&gt;《Kubernetes下web服务的性能测试三部曲之三：横向扩容》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/90577769&#34;&gt;《在windows电脑上配置kubectl远程操作kubernetes》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/90578934&#34;&gt;《本地服务调用K8S环境中的SpringCloud微服务实战》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/104849839&#34;&gt;《kubernetes下的jenkins如何设置maven》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/105005245&#34;&gt;《K8S环境的Jenkin性能问题处理》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/105156849&#34;&gt;《kubernetes1.15极速部署prometheus和grafana》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/105181474&#34;&gt;《K8S环境的Jenkin性能问题处理续篇(任务Pod设置)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/105465672&#34;&gt;《K8S的StorageClass实战(NFS)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/105466163&#34;&gt;《K8S环境快速部署Kafka(K8S外部可访问)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/105466788&#34;&gt;《K8S的Kafka监控(Prometheus+Grafana)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/113715847&#34;&gt;《Kubernetes的Group、Version、Resource学习小记》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/123189528&#34;&gt;《Kubernetes亲和性学习笔记》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;kubernetes官方java客户端特辑&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/107480015&#34;&gt;《Kubernetes官方java客户端之一：准备》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/107503695&#34;&gt;《Kubernetes官方java客户端之二：序列化和反序列化问题》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/107528068&#34;&gt;《Kubernetes官方java客户端之三：外部应用》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/107552495&#34;&gt;《Kubernetes官方java客户端之四：内部应用》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/107552722&#34;&gt;《Kubernetes官方java客户端之五：proto基本操作》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/107574722&#34;&gt;《Kubernetes官方java客户端之六：OpenAPI基本操作》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;kubernetes官方go客户端特辑&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/113753087&#34;&gt;client-go实战之一：准备工作&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/113487087&#34;&gt;client-go实战之二:RESTClient&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/113788269&#34;&gt;client-go实战之三：Clientset&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/113795523&#34;&gt;client-go实战之四：dynamicClient&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/113800054&#34;&gt;client-go实战之五：DiscoveryClient&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Operator实战特辑&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/113035349&#34;&gt;kubebuilder实战之一：准备工作&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/113089414&#34;&gt;kubebuilder实战之二：初次体验kubebuilder&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/113815479&#34;&gt;kubebuilder实战之三：基础知识速览&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/113822065&#34;&gt;kubebuilder实战之四：operator需求说明和设计&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/113836090&#34;&gt;kubebuilder实战之五：operator编码&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/113840999&#34;&gt;kubebuilder实战之六：构建部署运行&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/113922328&#34;&gt;kubebuilder实战之七：webhook&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/114215218&#34;&gt;kubebuilder实战之八：知识点小记&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;helm实战&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/88759724&#34;&gt;《helm实战之开发Chart》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/103667500&#34;&gt;《部署和体验Helm(2.16.1版本)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/103670976&#34;&gt;《Helm部署和体验jenkins》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/105004586&#34;&gt;《Helm部署的服务如何修改配置》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/105180743&#34;&gt;《helm部署mysql》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Serverless领域OpenFaaS特辑&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/109805296&#34;&gt;部署&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/109816846&#34;&gt;函数入门&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/109845563&#34;&gt;Java函数&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/109900209&#34;&gt;模板操作(template)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/109971608&#34;&gt;大话watchdog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/110285578&#34;&gt;of-watchdog(为性能而生)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/110310033&#34;&gt;java11模板解析&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/114438355&#34;&gt;OpenFaaS实战之八：自制模板(maven+jdk8)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zq2599/blog_demos/master/114483494&#34;&gt;OpenFaaS实战之九：终篇，自制模板(springboot+maven+jdk8)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;大数据&lt;/h1&gt; &#xA;&lt;h2&gt;hive学习笔记&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/109304044&#34;&gt;基本数据类型&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/109344642&#34;&gt;复杂数据类型&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/109393908&#34;&gt;内部表和外部表&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/109404278&#34;&gt;分区表&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/109412454&#34;&gt;分桶&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/109432395&#34;&gt;HiveQL基础&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/109440325&#34;&gt;内置函数&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/109445825&#34;&gt;Sqoop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/109457019&#34;&gt;基础UDF&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/109499956&#34;&gt;用户自定义聚合函数(UDAF)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/109530630&#34;&gt;UDTF&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;CDH&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/105340968&#34;&gt;《CDH5部署三部曲之一：准备工作》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/105341713&#34;&gt;《CDH5部署三部曲之二：部署和设置》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/105342156&#34;&gt;《CDH5部署三部曲之三：问题总结》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/105356266&#34;&gt;《超简单的CDH6部署和体验(单机版)》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Flink&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/85038527&#34;&gt;《Flink1.7从安装到体验》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/85059168&#34;&gt;《开发第一个Flink应用》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/85213905&#34;&gt;《没有了可用Task slot，Flink新增任务会怎样？》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/85205622&#34;&gt;《Flink实战：消费Wikipedia实时消息》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/85222494&#34;&gt;《树莓派3B搭建Flink集群》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/85221446&#34;&gt;《Flink数据源拆解分析(WikipediaEditsSource)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/85549434&#34;&gt;《Flink消费kafka消息实战》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/105015546&#34;&gt;《Docker部署flink备忘》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/105356306&#34;&gt;《Flink on Yarn三部曲之一：准备工作》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/105356347&#34;&gt;《Flink on Yarn三部曲之二：部署和设置》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/105356399&#34;&gt;《Flink on Yarn三部曲之三：提交Flink任务》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/105459630&#34;&gt;《IDEA上运行Flink任务》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/105460060&#34;&gt;《Flink1.9.2源码编译和使用》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/105467076&#34;&gt;《Flink的DataSource三部曲之一：直接API》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/105471798&#34;&gt;《Flink的DataSource三部曲之二:内置connector》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/105472218&#34;&gt;《Flink的DataSource三部曲之三:自定义》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/105597628&#34;&gt;《Flink的sink实战之一：初探》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/105598224&#34;&gt;《Flink的sink实战之二：kafka》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/105598968&#34;&gt;《Flink的sink实战之三：cassandra3》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/105599511&#34;&gt;《Flink的sink实战之四：自定义》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/105964425&#34;&gt;《Flink SQL Client初探》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/106033059&#34;&gt;《准备数据集用于flink学习》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/106033472&#34;&gt;《将CSV的数据发送到kafka(java版)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/106038219&#34;&gt;《Flink SQL Client综合实战》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/106038957&#34;&gt;《Flink Native Kubernetes实战》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/106040312&#34;&gt;《Flink处理函数实战之一：深入了解ProcessFunction的状态操作(Flink-1.10)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/106299035&#34;&gt;《Flink处理函数实战之二：ProcessFunction类》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/106299167&#34;&gt;《Flink处理函数实战之三：KeyedProcessFunction类》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/106453229&#34;&gt;《Flink处理函数实战之四：窗口处理》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/109614001&#34;&gt;《Flink处理函数实战之五：CoProcessFunction(双流处理)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/109564999&#34;&gt;《理解ProcessFunction的Timer逻辑》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;双流处理实战特辑&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/109624375&#34;&gt;《CoProcessFunction实战三部曲之一：基本功能》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/109629119&#34;&gt;《CoProcessFunction实战三部曲之二：状态处理》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/109645214&#34;&gt;《CoProcessFunction实战三部曲之三：定时器和侧输出》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Spark&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/86747258&#34;&gt;《部署spark2.2集群(standalone模式)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/86776746&#34;&gt;《第一个spark应用开发详解(java版)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/86795338&#34;&gt;《部署Spark2.2集群(on Yarn模式)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/86851069&#34;&gt;《docker下，极速搭建spark集群(含hdfs集群)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/87241814&#34;&gt;《spark实战之：分析维基百科网站统计数据(java版)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/87438666&#34;&gt;《docker下的spark集群，调整参数榨干硬件》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/87510822&#34;&gt;《IDEA开发Spark应用实战(Scala)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/102291920&#34;&gt;《查看Spark任务的详细信息》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/102765992&#34;&gt;《Mac部署spark2.4.4》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Kylin&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/105449630&#34;&gt;《CDH+Kylin三部曲之一：准备工作》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/105449952&#34;&gt;《CDH+Kylin三部曲之二：部署和设置》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/105450665&#34;&gt;《CDH+Kylin三部曲之三：Kylin官方demo》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;HBase&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78041775&#34;&gt;《Docker下HBase学习，三部曲之一：极速体验》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78041811&#34;&gt;《Docker下HBase学习，三部曲之二：集群HBase搭建》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78156406&#34;&gt;《Docker下HBase学习，三部曲之三：java开发》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Hive&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/102310449&#34;&gt;《安装和体验hive》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Hadoop&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/86774385&#34;&gt;《Linux部署hadoop2.7.7集群》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/102538585&#34;&gt;《Mac部署hadoop3(伪分布式)》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;数据集&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/86894540&#34;&gt;《寻找海量数据集用于大数据开发实战(维基百科网站统计数据)》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;中间件&lt;/h1&gt; &#xA;&lt;h2&gt;配置中心&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/71082610&#34;&gt;《Docker搭建disconf环境，三部曲之一：极速搭建disconf》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/71107498&#34;&gt;《Docker搭建disconf环境，三部曲之二：本地快速构建disconf镜像》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/71120725&#34;&gt;《Docker搭建disconf环境，三部曲之三：细说搭建过程》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/71404395&#34;&gt;《docker下使用disconf：极速体验》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/71424124&#34;&gt;《docker下使用disconf：细说demo开发》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;zookeeper&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/69802622&#34;&gt;《基于spring boot框架访问zookeeper》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;缓存&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/71440053&#34;&gt;《jedis使用入门（Docker环境下）》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78991422&#34;&gt;《Docker下redis与springboot三部曲之一：极速体验》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78995407&#34;&gt;《Docker下redis与springboot三部曲之二：安装redis主从和哨兵》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79041129&#34;&gt;《Docker下redis与springboot三部曲之三：springboot下访问redis哨兵》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/80719683&#34;&gt;《实战Redis序列化性能测试(Kryo和字符串)》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;注册中心&lt;/h2&gt; &#xA;&lt;h3&gt;dubbo&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/72303126&#34;&gt;《Docker下dubbo开发，三部曲之一：极速体验》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/72460526&#34;&gt;《Docker下dubbo开发，三部曲之二：本地环境搭建》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/72789984&#34;&gt;《Docker下dubbo开发，三部曲之三：java开发》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;nacos&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/97617353&#34;&gt;《Docker下,两分钟极速体验Nacos》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/98328270&#34;&gt;《Docker下的Nacos环境开发》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/99708769&#34;&gt;《Docker下,两分钟极速体验Nacos配置中心》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/100067833&#34;&gt;《Docker下Nacos配置应用开发》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/100171289&#34;&gt;《Docker下Nacos持久化配置》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;eureka&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/82795825&#34;&gt;《Eureka的TimedSupervisorTask类（自动调节间隔的周期性任务）》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/82827802&#34;&gt;《实战监听Eureka client的缓存更新》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/82909130&#34;&gt;《Eureka的InstanceInfoReplicator类（服务注册辅助工具）》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/82927409&#34;&gt;《Eureka注册信息配置备忘》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/82918227&#34;&gt;《Wireshark抓包分析Eureka注册发现协议》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/81809929&#34;&gt;《Spring Cloud源码分析之Eureka篇第一章：准备工作》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/81809860&#34;&gt;《Spring Cloud源码分析之Eureka篇第二章：注册中心启动类上的注解EnableEurekaServer》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/82668480&#34;&gt;《Spring Cloud源码分析之Eureka篇第三章：EnableDiscoveryClient与EnableEurekaClient的区别(Edgware版本)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/82721583&#34;&gt;《Spring Cloud源码分析之Eureka篇第四章：服务注册是如何发起的》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/82813180&#34;&gt;《Spring Cloud源码分析之Eureka篇第五章：更新服务列表》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/82861618&#34;&gt;《Spring Cloud源码分析之Eureka篇第六章：服务注册》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/82915355&#34;&gt;《Spring Cloud源码分析之Eureka篇第七章：续约》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/82930728&#34;&gt;《Spring Cloud源码分析之Eureka篇第八章：服务注册名称的来历》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;消息队列&lt;/h1&gt; &#xA;&lt;h2&gt;kafka&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/71576775&#34;&gt;《Docker下kafka学习，三部曲之一：极速体验kafka》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/71601189&#34;&gt;《Docker下kafka学习，三部曲之二：本地环境搭建》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/71634631&#34;&gt;《Docker下kafka学习，三部曲之三：java开发》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78244943&#34;&gt;《Docker下的Kafka学习之一：制作集群用的镜像文件》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78309050&#34;&gt;《Docker下的Kafka学习之二：搭建集群环境》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78386451&#34;&gt;《Docker下的Kafka学习之三：集群环境下的java开发》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/85395080&#34;&gt;《kafka的Docker镜像使用说明(wurstmeister/kafka)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/85528519&#34;&gt;《如何使用Docker内的kafka服务》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/105466163&#34;&gt;《K8S环境快速部署Kafka(K8S外部可访问)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/105466788&#34;&gt;《K8S的Kafka监控(Prometheus+Grafana)》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;RabbitMQ&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/80212878&#34;&gt;《Docker下RabbitMQ四部曲之一：极速体验(单机和集群)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/80297358&#34;&gt;《Docker下RabbitMQ四部曲之二：细说RabbitMQ镜像制作》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/80301169&#34;&gt;《Docker下RabbitMQ四部曲之三：细说java开发》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/80351491&#34;&gt;《Docker下RabbitMQ四部曲之四：高可用实战》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/80630100&#34;&gt;《Docker下RabbitMQ延时队列实战两部曲之一：极速体验》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/80635050&#34;&gt;《Docker下RabbitMQ延时队列实战两部曲之二：细说开发》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;数据库&lt;/h1&gt; &#xA;&lt;h2&gt;MySQL&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/71055159&#34;&gt;《让docker中的mysql启动时自动执行sql》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78168085&#34;&gt;《Docker下，极速体验mongodb》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78172113&#34;&gt;《制作mongodb的Docker镜像文件》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78173636&#34;&gt;《Docker下，实战mongodb副本集（Replication）》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78234762&#34;&gt;《Docker下安装Rockmongo，图形化操作mongodb》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78238163&#34;&gt;《Java实战操作MongoDB集群（副本集）》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79342494&#34;&gt;《Docker下的mysql设置字符集》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79751085&#34;&gt;《Docker下手工配置MySQL主从》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79747488&#34;&gt;《Docker下MySQL主从三部曲之一：极速体验》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79775617&#34;&gt;《Docker下MySQL主从三部曲之二：细说镜像制作》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79782008&#34;&gt;《Docker下MySQL主从三部曲之三：binlog日志参数实战》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/85172258&#34;&gt;《关于InnoDB表数据和索引数据的存储》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;ElasticSearch&lt;/h2&gt; &#xA;&lt;h3&gt;ElasticSearch实战&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79836171&#34;&gt;《CentOS7搭建ELK-6.2.3版本》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79950677&#34;&gt;《Docker下ELK三部曲之一：极速体验》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79972444&#34;&gt;《Docker下ELK三部曲之二：细说开发》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/80141800&#34;&gt;《Docker下ELK三部曲之三：K8S上的ELK和应用日志上报》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/86358716&#34;&gt;《Linux环境快速搭建elasticsearch6.5.4集群和Head插件》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/86549043&#34;&gt;《elasticsearch安装和使用ik分词器》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/86663168&#34;&gt;《自己动手制作elasticsearch-head的Docker镜像》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/86668180&#34;&gt;《自己动手制作elasticsearch的ik分词器的Docker镜像》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/86669450&#34;&gt;《docker下，一行命令搭建elasticsearch6.5.0集群(带head插件和ik分词器)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/89298234&#34;&gt;《Elasticsearch6.1.2源码下载和编译构建》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/89417650&#34;&gt;《IntelliJ IDEA远程调试Elasticsearch6.1.2》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/89435566&#34;&gt;《极速导入elasticsearch测试数据》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;ElasticSearch基本功专题&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/86361841&#34;&gt;《elasticsearch实战三部曲之一：索引操作》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/86379882&#34;&gt;《elasticsearch实战三部曲之二：文档操作》&lt;/a&gt; 3&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/86413235&#34;&gt;《elasticsearch实战三部曲之三：搜索操作》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/89735952&#34;&gt;《Elasticsearch聚合学习之一：基本操作》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/89763684&#34;&gt;《Elasticsearch聚合学习之二：区间聚合》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/89785223&#34;&gt;《Elasticsearch聚合学习之三：范围限定》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/89812169&#34;&gt;《Elasticsearch聚合学习之四：结果排序》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/90319399&#34;&gt;《Elasticsearch聚合学习之五：排序结果不准的问题分析》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/89816240&#34;&gt;《Elasticsearch聚合的嵌套桶如何排序》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/89801825&#34;&gt;《理解elasticsearch的post_filter》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/89061560&#34;&gt;《elasticsearch的字符串动态映射》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/89067738&#34;&gt;《实战Elasticsearch6的join类型》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;工具和技巧&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/72033221&#34;&gt;《根据java代码生成UML图》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/72853503&#34;&gt;《设置Intellij idea和maven，支持lambda表达式》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/73287096&#34;&gt;《安装Genymotion模拟器运行Android studio的工程》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/73384036&#34;&gt;《Intellij idea远程debug连接tomcat，实现单步调试》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/77833069&#34;&gt;《docker下载镜像慢怎么办？daocloud加速器来帮你》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79342494&#34;&gt;《Docker下的mysql设置字符集》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79418823&#34;&gt;《用IntelliJ IDEA看Java类图》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/82925463&#34;&gt;《Wireshark的HTTP请求包和响应包如何对应》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/82918227&#34;&gt;《Wireshark抓包分析Eureka注册发现协议》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/100014835&#34;&gt;《免费申请和使用IntelliJ IDEA商业版License指南》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/104736677&#34;&gt;《发送kafka消息的shell脚本》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/114737069&#34;&gt;《github搜索技巧小结》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;问题处理&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/72188135&#34;&gt;《dubbo服务提供者在tomcat启动失败的问题》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/72388834&#34;&gt;《Docker下部署dubbo，消费者应用无法使用link参数的问题》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/73301843&#34;&gt;《adb shell无法连接到Genymotion上的虚拟设备的问题》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/73071020&#34;&gt;《spring+mybatis启动NoClassDefFoundError异常分析三部曲之一：稳定重现问题》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/73442311&#34;&gt;《spring+mybatis启动NoClassDefFoundError异常分析三部曲之二：定位错误》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/73759475&#34;&gt;《spring+mybatis启动NoClassDefFoundError异常分析三部曲之三：改spring源码，取详细错误》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79050451&#34;&gt;《docker-compose中启动镜像失败的问题》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79169560&#34;&gt;《Docker下No module named &#39;pymongo&#39;问题处理》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79342319&#34;&gt;《springboot启动失败的问题（&#39;hibernate.dialect&#39; not set）》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79342572&#34;&gt;《springboot的JPA在Mysql8新增记录失败的问题》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/80796059&#34;&gt;《Win10环境编译spring-framework4.1.9版本，报错&#34;Failed to capture snapshot of input files for task &#39;distZip&#39;&#34;》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/83036666&#34;&gt;《maven编译遇到&#34;编码GBK的不可映射字符&#34;警告的处理》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/88817244&#34;&gt;《 docker问题备忘：&#34;rpc error: code = 2 desc = containerd: container not found&#34;》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/91132345&#34;&gt;《使用fabric8-maven-plugin插件的错误处理(No plugin found for prefix &#39;fabric8&#39;)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/91306095&#34;&gt;《Linux下minikube启动失败(It seems like the kubelet isn&#39;t running or healthy)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/100059053&#34;&gt;《Ubuntu18重启docker服务失败问题备忘》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/102764540&#34;&gt;《hadoop2.7集群初始化之后没有DataNode的问题》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;DevOps&lt;/h1&gt; &#xA;&lt;h2&gt;ansible&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/105342744&#34;&gt;《ansible2.4安装和体验》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/105356266&#34;&gt;《超简单的CDH6部署和体验(单机版)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/105356306&#34;&gt;《Flink on Yarn三部曲之一：准备工作》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/105356347&#34;&gt;《Flink on Yarn三部曲之二：部署和设置》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/105356399&#34;&gt;《Flink on Yarn三部曲之三：提交Flink任务》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/105449630&#34;&gt;《CDH+Kylin三部曲之一：准备工作》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/105449952&#34;&gt;《CDH+Kylin三部曲之二：部署和设置》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/105450665&#34;&gt;《CDH+Kylin三部曲之三：Kylin官方demo》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/105602584&#34;&gt;《ansible快速部署cassandra3集群》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Maven&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78869466&#34;&gt;《maven构建docker镜像三部曲之一：准备环境》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78872020&#34;&gt;《maven构建docker镜像三部曲之二：编码和构建镜像》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78934391&#34;&gt;《maven构建docker镜像三部曲之三：推送到远程仓库(内网和阿里云)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78942408&#34;&gt;《docker下的Jenkins安装和体验》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79059021&#34;&gt;《实战maven私有仓库三部曲之一：搭建和使用》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79070744&#34;&gt;《实战maven私有仓库三部曲之二：上传到私有仓库》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79111740&#34;&gt;《实战maven私有仓库三部曲之三：Docker下搭建maven私有仓库》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78943061&#34;&gt;《实战：向GitHub提交代码时触发Jenkins自动构建》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/80873343&#34;&gt;《修改gradle脚本，加速spring4.1源码编译构建速度》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/94355659&#34;&gt;《Docker与Jib(maven插件版)实战》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/100179709&#34;&gt;《Jib使用小结(Maven插件版)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/101606958&#34;&gt;《Jib构建镜像问题从定位到深入分析》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/104849839&#34;&gt;《kubernetes下的jenkins如何设置maven》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/104875452&#34;&gt;《kubernetes下jenkins实战maven项目编译构建》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;持续构建&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/85373901&#34;&gt;《通过http请求启动jenkins任务》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/100848333&#34;&gt;《Jenkins流水线(pipeline)实战之：从部署到体验》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/100857361&#34;&gt;《让Jenkins执行GitHub上的pipeline脚本》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/101099617&#34;&gt;《Jenkins把GitHub项目做成Docker镜像》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/103097240&#34;&gt;《快速搭建Jenkins集群》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/103104441&#34;&gt;《Jenkins集群下的pipeline实战》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/104849839&#34;&gt;《kubernetes下的jenkins如何设置maven》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/105005245&#34;&gt;《K8S环境的Jenkin性能问题处理》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/105181474&#34;&gt;《K8S环境的Jenkin性能问题处理续篇(任务Pod设置)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/105189564&#34;&gt;《远程触发Jenkins的Pipeline任务》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/105340243&#34;&gt;《远程触发Jenkins的Pipeline任务的并发问题处理》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/106991576&#34;&gt;《GitLab Runner部署(kubernetes环境)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/106991691&#34;&gt;《GitLab CI构建SpringBoot-2.3应用》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/107374730&#34;&gt;《Gitlab Runner的分布式缓存实战》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/115476859&#34;&gt;《用GitHub Actions制作Docker镜像》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;promethus&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/88367137&#34;&gt;《Docker下Prometheus和Grafana三部曲之一：极速体验》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/88374848&#34;&gt;《Docker下Prometheus和Grafana三部曲之二：细说Docker编排》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/88375734&#34;&gt;《Docker下Prometheus和Grafana三部曲之三：自定义监控项开发和配置》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/105156849&#34;&gt;《kubernetes1.15极速部署prometheus和grafana》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/105466788&#34;&gt;《K8S的Kafka监控(Prometheus+Grafana)》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;zabbix&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/76857936&#34;&gt;《Docker下实战zabbix三部曲之一：极速体验》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/77095153&#34;&gt;《Docker下实战zabbix三部曲之二：监控其他机器》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/77410178&#34;&gt;《Docker下实战zabbix三部曲之三：自定义监控项》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/78440890&#34;&gt;《Docker下，极速体验编译pinpoint1.6.x分支》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;pinpoint&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78447310&#34;&gt;《把pinpoint编译环境做成Docker镜像文件》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78447314&#34;&gt;《Docker下，极速体验pinpoint1.6.3》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78448564&#34;&gt;《Docker下，pinpoint环境搭建》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78495628&#34;&gt;《pinpoint插件开发之一：牛刀小试，调整gson插件》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78568073&#34;&gt;《pinpoint插件开发之二：从零开始新建一个插件》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/102011341&#34;&gt;《分布式系统快速接入pinpoint1.8.3指南》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;jaeger&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/120243299&#34;&gt;《分布式调用链跟踪工具Jaeger？两分钟极速体验》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/120360141&#34;&gt;《Jaeger开发入门(java版)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/120389573&#34;&gt;《Java应用日志如何与Jaeger的trace关联》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/120395628&#34;&gt;《Jaeger的客户端采样配置》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/120475233&#34;&gt;《极简！一个注解就能创建Jaeger的Span》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/120394912&#34;&gt;《Jaeger知识点补充》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;算法&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/86563586&#34;&gt;《LeetCode第三题(Longest Substring Without Repeating Characters)三部曲之一：解题思路》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/86654969&#34;&gt;《LeetCode第三题(Longest Substring Without Repeating Characters)三部曲之二：编码实现》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/86655675&#34;&gt;《LeetCode第三题(Longest Substring Without Repeating Characters)三部曲之三：两次优化》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Linux&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79498346&#34;&gt;《Ubuntu16环境安装和使用NFS》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79834850&#34;&gt;《CentOS7安装Nginx1.10.1》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/79840049&#34;&gt;《CentOS7安装JDK8》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/83213608&#34;&gt;《Ubuntu下安装OpenJDK10》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/83240035&#34;&gt;《Ubuntu环境下载OpenJDK11源码》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/86354385&#34;&gt;《Ubuntu16安装nodejs10》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/86771775&#34;&gt;《Linux服务器端网络抓包和分析实战》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/86772345&#34;&gt;《Linux配置SSH免密码登录(非root账号)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/96572311&#34;&gt;《CentOS7安装python3和pip3》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Mac&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/99702719&#34;&gt;《Mac下vagrant从安装到体验》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/102240871&#34;&gt;《Vagrant定制个性化CentOS7模板》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/124139180&#34;&gt;《Java程序员的MacBookPro(14寸M1)配置备忘录》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;golang&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/82904868&#34;&gt;《Ubuntu16安装Go语言环境》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/87901677&#34;&gt;《golang实战之flag包》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/87904485&#34;&gt;《用golang官方Docker镜像运行项目》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/88598828&#34;&gt;《vim设置go语法高亮》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;gRPC特辑&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/110790538&#34;&gt;《gRPC学习之一：在CentOS7部署和设置GO》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/111066105&#34;&gt;《gRPC学习之二：GO的gRPC开发环境准备》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/111086114&#34;&gt;《gRPC学习之三：初试GO版gRPC开发》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/111144884&#34;&gt;《gRPC学习之四：实战四类服务方法》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/111399854&#34;&gt;《gRPC学习之五：gRPC-Gateway实战》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/111406857&#34;&gt;《gRPC学习之六：gRPC-Gateway集成swagger》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;机器学习&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/96628350&#34;&gt;《机器学习的开发环境准备》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/96718499&#34;&gt;《Docker下，五分钟极速体验机器学习》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/120575494&#34;&gt;《来自Java程序员的Python新手入门小结》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/120608660&#34;&gt;《NumPy学习笔记》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/120633388&#34;&gt;《Ubuntu16安装Nvidia驱动(GTX1060显卡)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/120639465&#34;&gt;《Anaconda3+CUDA10.1+CUDNN7.6+TensorFlow2.6安装（Ubuntu16）》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;深度学习&lt;/h1&gt; &#xA;&lt;h2&gt;DL4J实战特辑&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/117898354&#34;&gt;《DL4J实战之一：准备》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/117905798&#34;&gt;《DL4J实战之二：鸢尾花分类》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/118239403&#34;&gt;《DL4J实战之三：经典卷积实例(LeNet-5)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/118240038&#34;&gt;《DL4J实战之四：经典卷积实例(GPU版本)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/118442820&#34;&gt;《DL4J实战之五：矩阵操作基本功》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/118593750&#34;&gt;《DL4J实战之六：图形化展示训练过程》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;深度学习工程化&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/118065868&#34;&gt;《纯净Ubuntu16安装CUDA(9.1)和cuDNN》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/118290933&#34;&gt;《三分钟体验：SpringBoot用深度学习模型识别数字》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/118353259&#34;&gt;《SpringBoot用深度学习模型识别数字：开发详解》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/118862001&#34;&gt;《三分钟极速体验：Java版人脸检测》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/118876299&#34;&gt;《Java版人脸检测详解上篇：运行环境的Docker镜像(CentOS+JDK+OpenCV)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/118970439&#34;&gt;《Java版人脸检测详解下篇：编码》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/120819464&#34;&gt;《三分钟：极速体验JAVA版目标检测(YOLO4)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/120926346&#34;&gt;《制作JavaCV应用依赖的基础Docker镜像(CentOS7+JDK8+OpenCV4)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/120929514&#34;&gt;《超详细的编码实战，让你的springboot应用识别图片中的行人、汽车、狗子、喵星人（JavaCV+YOLO4）》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;多媒体&lt;/h1&gt; &#xA;&lt;h2&gt;kurento&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/112070074&#34;&gt;《Kurento实战之一：KMS部署和体验》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/112385575&#34;&gt;《Kurento实战之二：快速部署和体验》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/112415314&#34;&gt;《Kurento实战之三：知识点小导游》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/112504048&#34;&gt;《Kurento实战之四：应用开发指南》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/116855410&#34;&gt;《微信小程序+腾讯云直播的实时音视频实战笔记》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/118055902&#34;&gt;《Kurento实战之五：媒体播放》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/118065861&#34;&gt;《Kurento实战之六：云端录制》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;JavaCV特辑&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/121434969&#34;&gt;《JavaCV推流实战(MP4文件)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/121572093&#34;&gt;《JavaCV的摄像头实战之一：基础》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/121587043&#34;&gt;《JavaCV的摄像头实战之二：本地窗口预览》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/121597278&#34;&gt;《JavaCV的摄像头实战之三：保存为mp4文件》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/121624255&#34;&gt;《JavaCV的摄像头实战之四：抓图》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/121647316&#34;&gt;《JavaCV的摄像头实战之五：推流》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/121713539&#34;&gt;《JavaCV的摄像头实战之六：保存为mp4文件(有声音)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/121713559&#34;&gt;《JavaCV的摄像头实战之七：推流(带声音)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/121730985&#34;&gt;《JavaCV的摄像头实战之八：人脸检测》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/122008998&#34;&gt;《JavaCV人脸识别三部曲之一：视频中的人脸保存为图片》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/122016154&#34;&gt;《JavaCV人脸识别三部曲之二：训练》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/122021850&#34;&gt;《JavaCV人脸识别三部曲之三：识别和预览》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/122098821&#34;&gt;《JavaCV的摄像头实战之十二：性别检测》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/122151728&#34;&gt;《JavaCV的摄像头实战之十三：年龄检测》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/122285751&#34;&gt;《最简单的人脸检测（免费调用百度AI开放平台接口）》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/122375869&#34;&gt;《JavaCV的摄像头实战之十四：口罩检测》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/122391898&#34;&gt;《Java版人脸跟踪三部曲之一：极速体验》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/122528833&#34;&gt;《Java版人脸跟踪三部曲之二：开发设计》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/122678517&#34;&gt;《Java版人脸跟踪三部曲之三：编码实战》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;硬件&lt;/h1&gt; &#xA;&lt;h2&gt;树莓派&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/80716098&#34;&gt;《树莓派3B安装64位操作系统(树莓派无需连接显示器键盘鼠标)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/84501381&#34;&gt;《64位树莓派上安装和配置golang1.9.2》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/85222494&#34;&gt;《树莓派3B搭建Flink集群》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/89440971&#34;&gt;《树莓派部署Elasticsearch6集群》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/100594275&#34;&gt;《树莓派4B安装64位Linux(不用显示器键盘鼠标)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/101105693&#34;&gt;《树莓派4B安装docker-compose(64位Linux)》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;群晖&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/105458466&#34;&gt;《群晖DS218+做maven私服(nexus3)》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/105460567&#34;&gt;《群晖DS218+部署mysql》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/105462692&#34;&gt;《群晖DS218+部署kafka》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xinchen.blog.csdn.net/article/details/105465233&#34;&gt;《K8S使用群晖DS218+的NFS》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/106973743&#34;&gt;《群晖DS218+部署GitLab》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;标记(改过内容)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/boling_cavalry/article/details/78447310&#34;&gt;《把pinpoint编译环境做成Docker镜像文件》&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>alibaba/Sentinel</title>
    <updated>2022-06-01T02:01:04Z</updated>
    <id>tag:github.com,2022-06-01:/alibaba/Sentinel</id>
    <link href="https://github.com/alibaba/Sentinel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A powerful flow control component enabling reliability, resilience and monitoring for microservices. (面向云原生微服务的高可用流控防护组件)&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/9434884/43697219-3cb4ef3a-9975-11e8-9a9c-73f4f537442d.png&#34; alt=&#34;Sentinel Logo&#34; width=&#34;50%&#34;&gt; &#xA;&lt;h1&gt;Sentinel: The Sentinel of Your Microservices&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/alibaba/Sentinel/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/alibaba/Sentinel/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Sentinel CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/alibaba/Sentinel&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/alibaba/Sentinel/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://search.maven.org/search?q=g:com.alibaba.csp%20AND%20a:sentinel-core&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.alibaba.csp/sentinel-core.svg?label=Maven%20Central&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%202-4EB1BA.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/alibaba/Sentinel&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/alibaba/Sentinel.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;As distributed systems become increasingly popular, the reliability between services is becoming more important than ever before. Sentinel takes &#34;flow&#34; as breakthrough point, and works on multiple fields including &lt;strong&gt;flow control&lt;/strong&gt;, &lt;strong&gt;traffic shaping&lt;/strong&gt;, &lt;strong&gt;circuit breaking&lt;/strong&gt; and &lt;strong&gt;system adaptive protection&lt;/strong&gt;, to guarantee reliability and resilience for microservices.&lt;/p&gt; &#xA;&lt;p&gt;Sentinel has the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Rich applicable scenarios&lt;/strong&gt;: Sentinel has been wildly used in Alibaba, and has covered almost all the core-scenarios in Double-11 (11.11) Shopping Festivals in the past 10 years, such as “Second Kill” which needs to limit burst flow traffic to meet the system capacity, message peak clipping and valley fills, circuit breaking for unreliable downstream services, cluster flow control, etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Real-time monitoring&lt;/strong&gt;: Sentinel also provides real-time monitoring ability. You can see the runtime information of a single machine in real-time, and the aggregated runtime info of a cluster with less than 500 nodes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Widespread open-source ecosystem&lt;/strong&gt;: Sentinel provides out-of-box integrations with commonly-used frameworks and libraries such as Spring Cloud, Dubbo and gRPC. You can easily use Sentinel by simply add the adapter dependency to your services.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Polyglot support&lt;/strong&gt;: Sentinel has provided native support for Java, &lt;a href=&#34;https://github.com/alibaba/sentinel-golang&#34;&gt;Go&lt;/a&gt; and &lt;a href=&#34;https://github.com/alibaba/sentinel-cpp&#34;&gt;C++&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Various SPI extensions&lt;/strong&gt;: Sentinel provides easy-to-use SPI extension interfaces that allow you to quickly customize your logic, for example, custom rule management, adapting data sources, and so on.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Features overview:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alibaba/Sentinel/master/doc/image/sentinel-features-overview-en.png&#34; alt=&#34;features-of-sentinel&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://sentinelguard.io/&#34;&gt;Sentinel&lt;/a&gt; for the document website.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D&#34;&gt;中文文档&lt;/a&gt; for document in Chinese.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/alibaba/Sentinel/wiki&#34;&gt;Wiki&lt;/a&gt; for full documentation, examples, blog posts, operational details and other information.&lt;/p&gt; &#xA;&lt;p&gt;Sentinel provides integration modules for various open-source frameworks (e.g. Spring Cloud, Apache Dubbo, gRPC, Spring WebFlux, Reactor) and service mesh. You can refer to &lt;a href=&#34;https://github.com/alibaba/Sentinel/wiki/Adapters-to-Popular-Framework&#34;&gt;the document&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;If you are using Sentinel, please &lt;a href=&#34;https://github.com/alibaba/Sentinel/issues/18&#34;&gt;&lt;strong&gt;leave a comment here&lt;/strong&gt;&lt;/a&gt; to tell us your scenario to make Sentinel better. It&#39;s also encouraged to add the link of your blog post, tutorial, demo or customized components to &lt;a href=&#34;https://raw.githubusercontent.com/alibaba/Sentinel/master/doc/awesome-sentinel.md&#34;&gt;&lt;strong&gt;Awesome Sentinel&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Ecosystem Landscape&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alibaba/Sentinel/master/doc/image/sentinel-opensource-eco-landscape-en.png&#34; alt=&#34;ecosystem-landscape&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Below is a simple demo that guides new users to use Sentinel in just 3 steps. It also shows how to monitor this demo using the dashboard.&lt;/p&gt; &#xA;&lt;h3&gt;1. Add Dependency&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Sentinel requires JDK 1.8 or later.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using Maven, just add the following dependency in &lt;code&gt;pom.xml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;!-- replace here with the latest version --&amp;gt;&#xA;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;com.alibaba.csp&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;sentinel-core&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;1.8.4&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If not, you can download JAR in &lt;a href=&#34;https://mvnrepository.com/artifact/com.alibaba.csp/sentinel-core&#34;&gt;Maven Center Repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;2. Define Resource&lt;/h3&gt; &#xA;&lt;p&gt;Wrap your code snippet via Sentinel API: &lt;code&gt;SphU.entry(resourceName)&lt;/code&gt;. In below example, it is &lt;code&gt;System.out.println(&#34;hello world&#34;);&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;try (Entry entry = SphU.entry(&#34;HelloWorld&#34;)) {&#xA;    // Your business logic here.&#xA;    System.out.println(&#34;hello world&#34;);&#xA;} catch (BlockException e) {&#xA;    // Handle rejected request.&#xA;    e.printStackTrace();&#xA;}&#xA;// try-with-resources auto exit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So far the code modification is done. We&#39;ve also provided &lt;a href=&#34;https://github.com/alibaba/Sentinel/raw/master/sentinel-extension/sentinel-annotation-aspectj/README.md&#34;&gt;annotation support module&lt;/a&gt; to define resource easier.&lt;/p&gt; &#xA;&lt;h3&gt;3. Define Rules&lt;/h3&gt; &#xA;&lt;p&gt;If we want to limit the access times of the resource, we can &lt;strong&gt;set rules to the resource&lt;/strong&gt;. The following code defines a rule that limits access to the resource to 20 times per second at the maximum.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;List&amp;lt;FlowRule&amp;gt; rules = new ArrayList&amp;lt;&amp;gt;();&#xA;FlowRule rule = new FlowRule();&#xA;rule.setResource(&#34;HelloWorld&#34;);&#xA;// set limit qps to 20&#xA;rule.setCount(20);&#xA;rule.setGrade(RuleConstant.FLOW_GRADE_QPS);&#xA;rules.add(rule);&#xA;FlowRuleManager.loadRules(rules);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, please refer to &lt;a href=&#34;https://github.com/alibaba/Sentinel/wiki/How-to-Use&#34;&gt;How To Use&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;4. Check the Result&lt;/h3&gt; &#xA;&lt;p&gt;After running the demo for a while, you can see the following records in &lt;code&gt;~/logs/csp/${appName}-metrics.log.{date}&lt;/code&gt; (When using the default &lt;code&gt;DateFileLogHandler&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;|--timestamp-|------date time----|-resource-|p |block|s |e|rt  |occupied&#xA;1529998904000|2018-06-26 15:41:44|HelloWorld|20|0    |20|0|0   |0&#xA;1529998905000|2018-06-26 15:41:45|HelloWorld|20|5579 |20|0|728 |0&#xA;1529998906000|2018-06-26 15:41:46|HelloWorld|20|15698|20|0|0   |0&#xA;1529998907000|2018-06-26 15:41:47|HelloWorld|20|19262|20|0|0   |0&#xA;1529998908000|2018-06-26 15:41:48|HelloWorld|20|19502|20|0|0   |0&#xA;1529998909000|2018-06-26 15:41:49|HelloWorld|20|18386|20|0|0   |0&#xA;&#xA;p stands for incoming request, block for blocked by rules, s for success handled by Sentinel, e for exception count, rt for average response time (ms), occupied stands for occupiedPassQps since 1.5.0 which enable us booking more than 1 shot when entering.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This shows that the demo can print &#34;hello world&#34; 20 times per second.&lt;/p&gt; &#xA;&lt;p&gt;More examples and information can be found in the &lt;a href=&#34;https://github.com/alibaba/Sentinel/wiki/How-to-Use&#34;&gt;How To Use&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;p&gt;The working principles of Sentinel can be found in &lt;a href=&#34;https://github.com/alibaba/Sentinel/wiki/How-it-works&#34;&gt;How it works&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;p&gt;Samples can be found in the &lt;a href=&#34;https://github.com/alibaba/Sentinel/tree/master/sentinel-demo&#34;&gt;sentinel-demo&lt;/a&gt; module.&lt;/p&gt; &#xA;&lt;h3&gt;5. Start Dashboard&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: Java 8 is required for building or running the dashboard.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Sentinel also provides a simple dashboard application, on which you can monitor the clients and configure the rules in real time.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/9434884/55449295-84866d80-55fd-11e9-94e5-d3441f4a2b63.png&#34; alt=&#34;dashboard&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For details please refer to &lt;a href=&#34;https://github.com/alibaba/Sentinel/wiki/Dashboard&#34;&gt;Dashboard&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Trouble Shooting and Logs&lt;/h2&gt; &#xA;&lt;p&gt;Sentinel will generate logs for troubleshooting and real-time monitoring. All the information can be found in &lt;a href=&#34;https://github.com/alibaba/Sentinel/wiki/Logs&#34;&gt;logs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Bugs and Feedback&lt;/h2&gt; &#xA;&lt;p&gt;For bug report, questions and discussions please submit &lt;a href=&#34;https://github.com/alibaba/sentinel/issues&#34;&gt;GitHub Issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Contact us via &lt;a href=&#34;https://gitter.im/alibaba/Sentinel&#34;&gt;Gitter&lt;/a&gt; or &lt;a href=&#34;mailto:sentinel@linux.alibaba.com&#34;&gt;Email&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are always welcomed! Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/alibaba/Sentinel/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for detailed guidelines.&lt;/p&gt; &#xA;&lt;p&gt;You can start with the issues labeled with &lt;a href=&#34;https://github.com/alibaba/Sentinel/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22&#34;&gt;&lt;code&gt;good first issue&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Thanks &lt;a href=&#34;https://github.com/google/guava&#34;&gt;Guava&lt;/a&gt;, which provides some inspiration on rate limiting.&lt;/p&gt; &#xA;&lt;p&gt;And thanks for all &lt;a href=&#34;https://github.com/alibaba/Sentinel/graphs/contributors&#34;&gt;contributors&lt;/a&gt; of Sentinel!&lt;/p&gt; &#xA;&lt;h2&gt;Who is using&lt;/h2&gt; &#xA;&lt;p&gt;These are only part of the companies using Sentinel, for reference only. If you are using Sentinel, please &lt;a href=&#34;https://github.com/alibaba/Sentinel/issues/18&#34;&gt;add your company here&lt;/a&gt; to tell us your scenario to make Sentinel better :)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://docs.alibabagroup.com/assets2/images/en/global/logo_header.png&#34; alt=&#34;Alibaba Group&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/9434884/90598732-30961c00-e226-11ea-8c86-0b1d7f7875c7.png&#34; alt=&#34;AntFin&#34;&gt; &lt;img src=&#34;http://www.cntaiping.com/tplresource/cms/www/taiping/img/home_new/tp_logo_img.png&#34; alt=&#34;Taiping Renshou&#34;&gt; &lt;img src=&#34;http://cdn.pinduoduo.com/assets/img/pdd_logo_v3.png&#34; alt=&#34;拼多多&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/9434884/90598445-a51c8b00-e225-11ea-9327-3543525f3f2a.png&#34; alt=&#34;爱奇艺&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/9434884/48463502-2f48eb80-e817-11e8-984f-2f9b1b789e2d.png&#34; alt=&#34;Shunfeng Technology&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/9434884/49358468-bc43de00-f70d-11e8-97fe-0bf05865f29f.png&#34; alt=&#34;二维火&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/9434884/48463559-6cad7900-e817-11e8-87e4-42952b074837.png&#34; alt=&#34;Mandao&#34;&gt; &lt;img src=&#34;http://static.winxuancdn.com/css/v2/images/logo.png&#34; alt=&#34;文轩在线&#34;&gt; &lt;img src=&#34;https://www.keruyun.com/static/krynew/images/logo.png&#34; alt=&#34;客如云&#34;&gt; &lt;img src=&#34;https://stlib.qbb6.com/wclt/img/home_hd/version1/title_logo.png&#34; alt=&#34;亲宝宝&#34;&gt; &lt;img src=&#34;https://res.jinhui365.com/r/images/logo2.png?v=1.527&#34; alt=&#34;金汇金融&#34;&gt; &lt;img src=&#34;http://cdn.52shangou.com/shandianbang/official-source/3.1.1/build/images/logo.png&#34; alt=&#34;闪电购&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>spring-projects/spring-boot</title>
    <updated>2022-06-01T02:01:04Z</updated>
    <id>tag:github.com,2022-06-01:/spring-projects/spring-boot</id>
    <link href="https://github.com/spring-projects/spring-boot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Spring Boot&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Spring Boot &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://ci.spring.io/teams/spring-boot/pipelines/spring-boot-3.0.x?groups=Build&#34;&gt;&lt;img src=&#34;https://ci.spring.io/api/v1/teams/spring-boot/pipelines/spring-boot-3.0.x/jobs/build/badge&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://gitter.im/spring-projects/spring-boot?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Chat&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://ge.spring.io/scans?&amp;amp;search.rootProjectNames=Spring%20Boot%20Build&amp;amp;search.rootProjectNames=spring-boot-build&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Revved%20up%20by-Gradle%20Enterprise-06A0CE?logo=Gradle&amp;amp;labelColor=02303A&#34; alt=&#34;Revved up by Gradle Enterprise&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h1&gt; &#xA;&lt;div id=&#34;preamble&#34;&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Spring Boot helps you to create Spring-powered, production-grade applications and services with absolute minimum fuss. It takes an opinionated view of the Spring platform so that new and existing users can quickly get to the bits they need.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;You can use Spring Boot to create stand-alone Java applications that can be started using &lt;code&gt;java -jar&lt;/code&gt; or more traditional WAR deployments. We also provide a command-line tool that runs Spring scripts.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Our primary goals are:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;Provide a radically faster and widely accessible getting started experience for all Spring development.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Be opinionated, but get out of the way quickly as requirements start to diverge from the defaults.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Provide a range of non-functional features common to large classes of projects (for example, embedded servers, security, metrics, health checks, externalized configuration).&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Absolutely no code generation and no requirement for XML configuration.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_installation_and_getting_started&#34;&gt;Installation and Getting Started&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;The &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/html/&#34;&gt;reference documentation&lt;/a&gt; includes detailed &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/html/getting-started.html#getting-started-installing-spring-boot&#34;&gt;installation instructions&lt;/a&gt; as well as a comprehensive &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/html/getting-started.html#getting-started-first-application&#34;&gt;&lt;code&gt;getting started&lt;/code&gt;&lt;/a&gt; guide.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Here is a quick teaser of a complete Spring Boot application in Java:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;import org.springframework.boot.*;&#xA;import org.springframework.boot.autoconfigure.*;&#xA;import org.springframework.web.bind.annotation.*;&#xA;&#xA;@RestController&#xA;@SpringBootApplication&#xA;public class Example {&#xA;&#xA;&#x9;@RequestMapping(&#34;/&#34;)&#xA;&#x9;String home() {&#xA;&#x9;&#x9;return &#34;Hello World!&#34;;&#xA;&#x9;}&#xA;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;SpringApplication.run(Example.class, args);&#xA;&#x9;}&#xA;&#xA;}&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_getting_help&#34;&gt;Getting Help&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Are you having trouble with Spring Boot? We want to help!&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;Check the &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/html/&#34;&gt;reference documentation&lt;/a&gt;, especially the &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/html/howto.html#howto&#34;&gt;How-to’s&lt;/a&gt; — they provide solutions to the most common questions.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Learn the Spring basics — Spring Boot builds on many other Spring projects; check the &lt;a href=&#34;https://spring.io&#34;&gt;spring.io&lt;/a&gt; website for a wealth of reference documentation. If you are new to Spring, try one of the &lt;a href=&#34;https://spring.io/guides&#34;&gt;guides&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;If you are upgrading, read the &lt;a href=&#34;https://github.com/spring-projects/spring-boot/wiki&#34;&gt;release notes&lt;/a&gt; for upgrade instructions and &#34;new and noteworthy&#34; features.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Ask a question — we monitor &lt;a href=&#34;https://stackoverflow.com&#34;&gt;stackoverflow.com&lt;/a&gt; for questions tagged with &lt;a href=&#34;https://stackoverflow.com/tags/spring-boot&#34;&gt;&lt;code&gt;spring-boot&lt;/code&gt;&lt;/a&gt;. You can also chat with the community on &lt;a href=&#34;https://gitter.im/spring-projects/spring-boot&#34;&gt;Gitter&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Report bugs with Spring Boot at &lt;a href=&#34;https://github.com/spring-projects/spring-boot/issues&#34;&gt;github.com/spring-projects/spring-boot/issues&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_reporting_issues&#34;&gt;Reporting Issues&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Spring Boot uses GitHub’s integrated issue tracking system to record bugs and feature requests. If you want to raise an issue, please follow the recommendations below:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;Before you log a bug, please search the &lt;a href=&#34;https://github.com/spring-projects/spring-boot/issues&#34;&gt;issue tracker&lt;/a&gt; to see if someone has already reported the problem.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;If the issue doesn’t already exist, &lt;a href=&#34;https://github.com/spring-projects/spring-boot/issues/new&#34;&gt;create a new issue&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Please provide as much information as possible with the issue report. We like to know the Spring Boot version, operating system, and JVM version you’re using.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;If you need to paste code or include a stack trace, use Markdown. ``` escapes before and after your text.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;If possible, try to create a test case or project that replicates the problem and attach it to the issue.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_building_from_source&#34;&gt;Building from Source&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;You don’t need to build from source to use Spring Boot (binaries in &lt;a href=&#34;https://repo.spring.io&#34;&gt;repo.spring.io&lt;/a&gt;), but if you want to try out the latest and greatest, Spring Boot can be built and published to your local Maven cache using the &lt;a href=&#34;https://docs.gradle.org/current/userguide/gradle_wrapper.html&#34;&gt;Gradle wrapper&lt;/a&gt;. You also need JDK 17.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre&gt;$ ./gradlew publishToMavenLocal&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;This will build all of the jars and documentation and publish them to your local Maven cache. It won’t run any of the tests. If you want to build everything, use the &lt;code&gt;build&lt;/code&gt; task:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre&gt;$ ./gradlew build&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_modules&#34;&gt;Modules&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;There are several modules in Spring Boot. Here is a quick overview:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_spring_boot&#34;&gt;spring-boot&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The main library providing features that support the other parts of Spring Boot. These include:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;The &lt;code&gt;SpringApplication&lt;/code&gt; class, providing static convenience methods that can be used to write a stand-alone Spring Application. Its sole job is to create and refresh an appropriate Spring &lt;code&gt;ApplicationContext&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Embedded web applications with a choice of container (Tomcat, Jetty, or Undertow).&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;First-class externalized configuration support.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Convenience &lt;code&gt;ApplicationContext&lt;/code&gt; initializers, including support for sensible logging defaults.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_spring_boot_autoconfigure&#34;&gt;spring-boot-autoconfigure&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Spring Boot can configure large parts of typical applications based on the content of their classpath. A single &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt; annotation triggers auto-configuration of the Spring context.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Auto-configuration attempts to deduce which beans a user might need. For example, if &lt;code&gt;HSQLDB&lt;/code&gt; is on the classpath, and the user has not configured any database connections, then they probably want an in-memory database to be defined. Auto-configuration will always back away as the user starts to define their own beans.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_spring_boot_starters&#34;&gt;spring-boot-starters&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Starters are a set of convenient dependency descriptors that you can include in your application. You get a one-stop shop for all the Spring and related technology you need without having to hunt through sample code and copy-paste loads of dependency descriptors. For example, if you want to get started using Spring and JPA for database access, include the &lt;code&gt;spring-boot-starter-data-jpa&lt;/code&gt; dependency in your project, and you are good to go.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_spring_boot_cli&#34;&gt;spring-boot-cli&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The Spring command-line application compiles and runs Groovy source, allowing you to write the absolute minimum amount of code to get an application running. Spring CLI can also watch files, automatically recompiling and restarting when they change.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_spring_boot_actuator&#34;&gt;spring-boot-actuator&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Actuator endpoints let you monitor and interact with your application. Spring Boot Actuator provides the infrastructure required for actuator endpoints. It contains annotation support for actuator endpoints. This module provides many endpoints, including the &lt;code&gt;HealthEndpoint&lt;/code&gt;, &lt;code&gt;EnvironmentEndpoint&lt;/code&gt;, &lt;code&gt;BeansEndpoint&lt;/code&gt;, and many more.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_spring_boot_actuator_autoconfigure&#34;&gt;spring-boot-actuator-autoconfigure&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;This provides auto-configuration for actuator endpoints based on the content of the classpath and a set of properties. For instance, if Micrometer is on the classpath, it will auto-configure the &lt;code&gt;MetricsEndpoint&lt;/code&gt;. It contains configuration to expose endpoints over HTTP or JMX. Just like Spring Boot AutoConfigure, this will back away as the user starts to define their own beans.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_spring_boot_test&#34;&gt;spring-boot-test&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;This module contains core items and annotations that can be helpful when testing your application.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_spring_boot_test_autoconfigure&#34;&gt;spring-boot-test-autoconfigure&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Like other Spring Boot auto-configuration modules, spring-boot-test-autoconfigure provides auto-configuration for tests based on the classpath. It includes many annotations that can automatically configure a slice of your application that needs to be tested.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_spring_boot_loader&#34;&gt;spring-boot-loader&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Spring Boot Loader provides the secret sauce that allows you to build a single jar file that can be launched using &lt;code&gt;java -jar&lt;/code&gt;. Generally, you will not need to use &lt;code&gt;spring-boot-loader&lt;/code&gt; directly but work with the &lt;a href=&#34;https://raw.githubusercontent.com/spring-projects/spring-boot/main/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin&#34;&gt;Gradle&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/spring-projects/spring-boot/main/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin&#34;&gt;Maven&lt;/a&gt; plugin instead.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_spring_boot_devtools&#34;&gt;spring-boot-devtools&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The spring-boot-devtools module provides additional development-time features, such as automatic restarts, for a smoother application development experience. Developer tools are automatically disabled when running a fully packaged application.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_samples&#34;&gt;Samples&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Groovy samples for use with the command line application are available in &lt;a href=&#34;https://raw.githubusercontent.com/spring-projects/spring-boot/main/spring-boot-project/spring-boot-cli/samples&#34;&gt;spring-boot-cli/samples&lt;/a&gt;. To run the CLI samples, type &lt;code&gt;spring run &amp;lt;sample&amp;gt;.groovy&lt;/code&gt; from the samples directory.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_guides&#34;&gt;Guides&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;The &lt;a href=&#34;https://spring.io/&#34;&gt;spring.io&lt;/a&gt; site contains several guides that show how to use Spring Boot step-by-step:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://spring.io/guides/gs/spring-boot/&#34;&gt;Building an Application with Spring Boot&lt;/a&gt; is an introductory guide that shows you how to create an application, run it, and add some management services.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://spring.io/guides/gs/actuator-service/&#34;&gt;Building a RESTful Web Service with Spring Boot Actuator&lt;/a&gt; is a guide to creating a REST web service and also shows how the server can be configured.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://spring.io/guides/gs/convert-jar-to-war/&#34;&gt;Converting a Spring Boot JAR Application to a WAR&lt;/a&gt; shows you how to run applications in a web server as a WAR file.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_license&#34;&gt;License&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Spring Boot is Open Source software released under the &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;Apache 2.0 license&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>karatelabs/karate</title>
    <updated>2022-06-01T02:01:04Z</updated>
    <id>tag:github.com,2022-06-01:/karatelabs/karate</id>
    <link href="https://github.com/karatelabs/karate" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Test Automation Made Simple&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Karate&lt;/h1&gt; &#xA;&lt;h2&gt;Test Automation Made &lt;code&gt;Simple.&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;div&gt; &#xA; &lt;a href=&#34;https://github.com/intuit/karate/wiki/Support&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/support-wiki-red.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://twitter.com/getkarate&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/getkarate.svg?style=social&amp;amp;label=Follow&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/intuit/karate/stargazers&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/intuit/karate?style=social&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;div&gt; &#xA; &lt;a href=&#34;https://search.maven.org/artifact/com.intuit.karate/karate-core&#34;&gt; &lt;img src=&#34;https://img.shields.io/maven-central/v/com.intuit.karate/karate-core.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/intuit/karate/actions?query=workflow%3Amaven-build&#34;&gt; &lt;img src=&#34;https://github.com/intuit/karate/workflows/maven-build/badge.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/intuit/karate/releases&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/release/intuit/karate.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a&gt;&lt;img src=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/resources/karate-map.jpg&#34; height=&#34;650&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Karate is the only open-source tool to combine API test-automation, &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-netty&#34;&gt;mocks&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-gatling&#34;&gt;performance-testing&lt;/a&gt; and even &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-core&#34;&gt;UI automation&lt;/a&gt; into a &lt;strong&gt;single&lt;/strong&gt;, &lt;em&gt;unified&lt;/em&gt; framework. The BDD syntax popularized by Cucumber is language-neutral, and easy for even non-programmers. Assertions and HTML reports are built-in, and you can run tests in parallel for speed.&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s also a cross-platform &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-netty#standalone-jar&#34;&gt;stand-alone executable&lt;/a&gt; for teams not comfortable with Java. You don&#39;t have to compile code. Just write tests in a &lt;strong&gt;simple&lt;/strong&gt;, &lt;em&gt;readable&lt;/em&gt; syntax - carefully designed for HTTP, JSON, GraphQL and XML. And you can mix API and &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-core&#34;&gt;UI test-automation&lt;/a&gt; within the same test script.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#java-api&#34;&gt;Java API&lt;/a&gt; also exists for those who prefer to programmatically integrate Karate&#39;s rich automation and data-assertion capabilities.&lt;/p&gt; &#xA;&lt;h2&gt;Hello World&lt;/h2&gt; &#xA;&lt;h3&gt;For API Testing&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gist.github.com/ptrthomas/d5a2d9e15d0b07e4f1b46f692a599f93&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/resources/karate-hello-world.jpg&#34; height=&#34;400&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you are familiar with Cucumber / Gherkin, the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#cucumber-vs-karate&#34;&gt;&lt;em&gt;big difference&lt;/em&gt;&lt;/a&gt; here is that you &lt;strong&gt;don&#39;t&lt;/strong&gt; need to write extra &#34;glue&#34; code or Java &#34;step definitions&#34; !&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;It is worth pointing out that JSON is a &#39;first class citizen&#39; of the syntax such that you can express payload and expected data without having to use double-quotes and without having to enclose JSON field names in quotes. There is no need to &#39;escape&#39; characters like you would have had to in Java or other programming languages.&lt;/p&gt; &#xA;&lt;p&gt;And you don&#39;t need to create additional Java classes for any of the payloads that you need to work with.&lt;/p&gt; &#xA;&lt;h1&gt;Index&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Start&lt;/th&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#maven&#34;&gt;Maven&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#gradle&#34;&gt;Gradle&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#quickstart&#34;&gt;Quickstart&lt;/a&gt; | &lt;a href=&#34;https://github.com/intuit/karate/tree/master/karate-netty#standalone-jar&#34;&gt;Standalone Executable&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#folder-structure&#34;&gt;Naming Conventions&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#script-structure&#34;&gt;Script Structure&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Run&lt;/th&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#junit-5&#34;&gt;JUnit 5&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#command-line&#34;&gt;Command Line&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#ide-support&#34;&gt;IDE Support&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#tags&#34;&gt;Tags / Grouping&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#parallel-execution&#34;&gt;Parallel Execution&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#java-api&#34;&gt;Java API&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#jbang&#34;&gt;jbang&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Report&lt;/th&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configuration&#34;&gt;Configuration&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#switching-the-environment&#34;&gt;Environment Switching&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#test-reports&#34;&gt;Reports&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#junit-html-report&#34;&gt;JUnit HTML Report&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#dry-run&#34;&gt;Dry Run&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#report-verbosity&#34;&gt;Report Verbosity&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#logging&#34;&gt;Logging&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#log-masking&#34;&gt;Log Masking&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Types&lt;/th&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#json&#34;&gt;JSON&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#xml&#34;&gt;XML&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#javascript-functions&#34;&gt;JavaScript Functions&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files&#34;&gt;Reading Files&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#type-conversion&#34;&gt;Type / String Conversion&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#floats-and-integers&#34;&gt;Floats and Integers&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#embedded-expressions&#34;&gt;Embedded Expressions&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#jsonpath-filters&#34;&gt;JsonPath&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#xpath-functions&#34;&gt;XPath&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-expressions&#34;&gt;Karate Expressions&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variables&lt;/th&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#def&#34;&gt;&lt;code&gt;def&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#text&#34;&gt;&lt;code&gt;text&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#table&#34;&gt;&lt;code&gt;table&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#yaml&#34;&gt;&lt;code&gt;yaml&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#csv&#34;&gt;&lt;code&gt;csv&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#type-string&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#type-json&#34;&gt;&lt;code&gt;json&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#type-xml&#34;&gt;&lt;code&gt;xml&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#type-xmlstring&#34;&gt;&lt;code&gt;xmlstring&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#type-bytes&#34;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#type-copy&#34;&gt;&lt;code&gt;copy&lt;/code&gt;&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Actions&lt;/th&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#assert&#34;&gt;&lt;code&gt;assert&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#print&#34;&gt;&lt;code&gt;print&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#replace&#34;&gt;&lt;code&gt;replace&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#get&#34;&gt;&lt;code&gt;get&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#set&#34;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#remove&#34;&gt;&lt;code&gt;remove&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configure&#34;&gt;&lt;code&gt;configure&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#call&#34;&gt;&lt;code&gt;call&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#callonce&#34;&gt;&lt;code&gt;callonce&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#eval&#34;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#listen&#34;&gt;&lt;code&gt;listen&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#doc&#34;&gt;&lt;code&gt;doc&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files&#34;&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#the-karate-object&#34;&gt;&lt;code&gt;karate&lt;/code&gt; JS API&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;HTTP&lt;/th&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#url&#34;&gt;&lt;code&gt;url&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#path&#34;&gt;&lt;code&gt;path&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#request&#34;&gt;&lt;code&gt;request&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#method&#34;&gt;&lt;code&gt;method&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#status&#34;&gt;&lt;code&gt;status&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#soap-action&#34;&gt;&lt;code&gt;soap action&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#retry-until&#34;&gt;&lt;code&gt;retry until&lt;/code&gt;&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Request&lt;/th&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#param&#34;&gt;&lt;code&gt;param&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#header&#34;&gt;&lt;code&gt;header&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#cookie&#34;&gt;&lt;code&gt;cookie&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#form-field&#34;&gt;&lt;code&gt;form field&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#multipart-file&#34;&gt;&lt;code&gt;multipart file&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#multipart-field&#34;&gt;&lt;code&gt;multipart field&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#multipart-entity&#34;&gt;&lt;code&gt;multipart entity&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#params&#34;&gt;&lt;code&gt;params&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#headers&#34;&gt;&lt;code&gt;headers&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#cookies&#34;&gt;&lt;code&gt;cookies&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#form-fields&#34;&gt;&lt;code&gt;form fields&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#multipart-files&#34;&gt;&lt;code&gt;multipart files&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#multipart-fields&#34;&gt;&lt;code&gt;multipart fields&lt;/code&gt;&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Response&lt;/th&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#response&#34;&gt;&lt;code&gt;response&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#responsebytes&#34;&gt;&lt;code&gt;responseBytes&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#responsestatus&#34;&gt;&lt;code&gt;responseStatus&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#responseheaders&#34;&gt;&lt;code&gt;responseHeaders&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#responsecookies&#34;&gt;&lt;code&gt;responseCookies&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#responsetime&#34;&gt;&lt;code&gt;responseTime&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#responsetype&#34;&gt;&lt;code&gt;responseType&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#requesttimestamp&#34;&gt;&lt;code&gt;requestTimeStamp&lt;/code&gt;&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Assert&lt;/th&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match&#34;&gt;&lt;code&gt;match ==&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match--not-equals&#34;&gt;&lt;code&gt;match !=&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match-contains&#34;&gt;&lt;code&gt;match contains&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match-contains-only&#34;&gt;&lt;code&gt;match contains only&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match-contains-any&#34;&gt;&lt;code&gt;match contains any&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match-contains-deep&#34;&gt;&lt;code&gt;match contains deep&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#not-contains&#34;&gt;&lt;code&gt;match !contains&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match-each&#34;&gt;&lt;code&gt;match each&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match-header&#34;&gt;&lt;code&gt;match header&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#fuzzy-matching&#34;&gt;Fuzzy Matching&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#schema-validation&#34;&gt;Schema Validation&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#contains-short-cuts&#34;&gt;&lt;code&gt;contains&lt;/code&gt; short-cuts&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Re-Use&lt;/th&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#calling-other-feature-files&#34;&gt;Calling Other &lt;code&gt;*.feature&lt;/code&gt; Files&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#data-driven-features&#34;&gt;Data Driven Features&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#calling-javascript-functions&#34;&gt;Calling JavaScript Functions&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#calling-java&#34;&gt;Calling Java Code&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#commonly-needed-utilities&#34;&gt;Commonly Needed Utilities&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#data-driven-tests&#34;&gt;Data Driven Scenarios&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Advanced&lt;/th&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#polling&#34;&gt;Polling&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#conditional-logic&#34;&gt;Conditional Logic&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#hooks&#34;&gt;Before / After Hooks&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#json-transforms&#34;&gt;JSON Transforms&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#loops&#34;&gt;Loops&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#http-basic-authentication-example&#34;&gt;HTTP Basic Auth&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#http-header-manipulation&#34;&gt;Header Manipulation&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#text&#34;&gt;GraphQL&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#async&#34;&gt;Websockets / Async&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#call-vs-read&#34;&gt;&lt;code&gt;call&lt;/code&gt; vs &lt;code&gt;read()&lt;/code&gt;&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;More&lt;/th&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-mock-servlet&#34;&gt;Mock Servlet&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-netty&#34;&gt;Test Doubles&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-gatling&#34;&gt;Performance Testing&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-core&#34;&gt;UI Testing&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-robot&#34;&gt;Desktop Automation&lt;/a&gt; | &lt;a href=&#34;https://github.com/intuit/karate/wiki/IDE-Support#vs-code-karate-plugin&#34;&gt;VS Code / Debug&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#comparison-with-rest-assured&#34;&gt;Karate vs REST-assured&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#cucumber-vs-karate&#34;&gt;Karate vs Cucumber&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo&#34;&gt;Examples and Demos&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;!--&#xA;&lt;div&gt;&#xA;  &lt;a href=&#34;https://saucelabs.com&#34;&gt;&#xA;    &lt;img src=&#34;https://opensource.saucelabs.com/images/opensauce/powered-by-saucelabs-badge-gray.png?sanitize=true&#34; width=&#34;165px&#34;/&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;--&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Java knowledge is not required and even non-programmers can write tests&lt;/li&gt; &#xA; &lt;li&gt;Scripts are plain-text, require no compilation step or IDE, and teams can collaborate using Git / standard SCM&lt;/li&gt; &#xA; &lt;li&gt;Based on the popular Cucumber / Gherkin standard - with &lt;a href=&#34;https://github.com/intuit/karate/wiki/IDE-Support&#34;&gt;IDE support&lt;/a&gt; and syntax-coloring options&lt;/li&gt; &#xA; &lt;li&gt;Elegant &lt;a href=&#34;https://en.wikipedia.org/wiki/Domain-specific_language&#34;&gt;DSL&lt;/a&gt; syntax &#39;natively&#39; supports JSON and XML - including &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#set&#34;&gt;JsonPath&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#xpath-functions&#34;&gt;XPath&lt;/a&gt; expressions&lt;/li&gt; &#xA; &lt;li&gt;Eliminate the need for &#39;Java Beans&#39; or &#39;helper code&#39; to represent payloads and HTTP end-points, and &lt;a href=&#34;https://twitter.com/KarateDSL/status/873035687817117696&#34;&gt;dramatically reduce the lines of code&lt;/a&gt; needed for a test&lt;/li&gt; &#xA; &lt;li&gt;Ideal for testing the highly dynamic responses from &lt;a href=&#34;http://graphql.org&#34;&gt;GraphQL&lt;/a&gt; API-s because of Karate&#39;s built-in &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#text&#34;&gt;text-manipulation&lt;/a&gt; and &lt;a href=&#34;https://github.com/json-path/JsonPath#path-examples&#34;&gt;JsonPath&lt;/a&gt; capabilities&lt;/li&gt; &#xA; &lt;li&gt;Tests are super-readable - as scenario data can be expressed in-line, in human-friendly &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#json&#34;&gt;JSON&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#xml&#34;&gt;XML&lt;/a&gt;, Cucumber &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#the-cucumber-way&#34;&gt;Scenario&lt;/a&gt; Outline &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#table&#34;&gt;tables&lt;/a&gt;, or a &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#set-multiple&#34;&gt;payload builder&lt;/a&gt; approach &lt;a href=&#34;https://gist.github.com/ptrthomas/d6beb17e92a43220d254af942e3ed3d9&#34;&gt;unique to Karate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Express expected results as readable, well-formed JSON or XML, and &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match&#34;&gt;assert in a single step&lt;/a&gt; that the entire response payload (no matter how complex or deeply nested) - is as expected&lt;/li&gt; &#xA; &lt;li&gt;Comprehensive &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#fuzzy-matching&#34;&gt;assertion capabilities&lt;/a&gt; - and failures clearly report which data element (and path) is not as expected, for easy troubleshooting of even large payloads&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/intuit/karate/wiki/IDE-Support#vs-code-karate-plugin&#34;&gt;Fully featured debugger&lt;/a&gt; that can step &lt;em&gt;backwards&lt;/em&gt; and even &lt;a href=&#34;https://twitter.com/KarateDSL/status/1167533484560142336&#34;&gt;re-play a step while editing it&lt;/a&gt; - a &lt;em&gt;huge&lt;/em&gt; time-saver&lt;/li&gt; &#xA; &lt;li&gt;Simpler and more &lt;a href=&#34;https://twitter.com/KarateDSL/status/878984854012022784&#34;&gt;powerful alternative&lt;/a&gt; to JSON-schema for &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#schema-validation&#34;&gt;validating payload structure&lt;/a&gt; and format - that even supports &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#referring-to-the-json-root&#34;&gt;cross-field&lt;/a&gt; / domain validation logic&lt;/li&gt; &#xA; &lt;li&gt;Scripts can &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#calling-other-feature-files&#34;&gt;call other scripts&lt;/a&gt; - which means that you can easily re-use and maintain authentication and &#39;set up&#39; flows efficiently, across multiple tests&lt;/li&gt; &#xA; &lt;li&gt;Embedded JavaScript engine that allows you to build a library of &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#calling-javascript-functions&#34;&gt;re-usable functions&lt;/a&gt; that suit your specific environment or organization&lt;/li&gt; &#xA; &lt;li&gt;Re-use of payload-data and user-defined functions across tests is &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files&#34;&gt;so easy&lt;/a&gt; - that it becomes a natural habit for the test-developer&lt;/li&gt; &#xA; &lt;li&gt;Built-in support for &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#switching-the-environment&#34;&gt;switching configuration&lt;/a&gt; across different environments (e.g. dev, QA, pre-prod)&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#data-driven-tests&#34;&gt;data-driven tests&lt;/a&gt; and being able to &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#tags&#34;&gt;tag or group&lt;/a&gt; tests is built-in, no need to rely on an external framework&lt;/li&gt; &#xA; &lt;li&gt;Native support for reading &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#yaml&#34;&gt;YAML&lt;/a&gt; and even &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#csv-files&#34;&gt;CSV&lt;/a&gt; files - and you can use them for data-driven tests&lt;/li&gt; &#xA; &lt;li&gt;Standard Java / Maven project structure, and &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#command-line&#34;&gt;seamless integration&lt;/a&gt; into CI / CD pipelines - and support for &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#junit-5&#34;&gt;JUnit 5&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Option to use as a light-weight &lt;a href=&#34;https://github.com/intuit/karate/tree/master/karate-netty#standalone-jar&#34;&gt;stand-alone executable&lt;/a&gt; - convenient for teams not comfortable with Java&lt;/li&gt; &#xA; &lt;li&gt;Multi-threaded &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#parallel-execution&#34;&gt;parallel execution&lt;/a&gt;, which is a huge time-saver, especially for integration and end-to-end tests&lt;/li&gt; &#xA; &lt;li&gt;Built-in &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#test-reports&#34;&gt;test-reports&lt;/a&gt; compatible with Cucumber so that you have the option of using third-party (open-source) maven-plugins for even &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo#example-report&#34;&gt;better-looking reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Reports include HTTP request and response &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#test-reports&#34;&gt;logs &lt;em&gt;in-line&lt;/em&gt;&lt;/a&gt;, which makes &lt;a href=&#34;https://twitter.com/KarateDSL/status/899671441221623809&#34;&gt;troubleshooting&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/KarateDSL/status/935029435140489216&#34;&gt;debugging&lt;/a&gt; easier&lt;/li&gt; &#xA; &lt;li&gt;Easily invoke JDK classes, Java libraries, or re-use custom Java code if needed, for &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#calling-java&#34;&gt;ultimate extensibility&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Simple plug-in system for &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#http-basic-authentication-example&#34;&gt;authentication&lt;/a&gt; and HTTP &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configure-headers&#34;&gt;header management&lt;/a&gt; that will handle any complex, real-world scenario&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-core&#34;&gt;Cross-browser Web UI automation&lt;/a&gt; so that you can test &lt;em&gt;all&lt;/em&gt; layers of your application with the same framework&lt;/li&gt; &#xA; &lt;li&gt;Cross platform &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-robot&#34;&gt;Desktop Automation&lt;/a&gt; that can be &lt;a href=&#34;https://twitter.com/ptrthomas/status/1215534821234995200&#34;&gt;mixed into Web Automation flows&lt;/a&gt; if needed&lt;/li&gt; &#xA; &lt;li&gt;Option to invoke via a &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#java-api&#34;&gt;Java API&lt;/a&gt;, which means that you can easily &lt;a href=&#34;https://stackoverflow.com/q/47795762/143475&#34;&gt;mix Karate into Java projects or legacy UI-automation suites&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/ptrthomas/status/986463717465391104&#34;&gt;Save significant effort&lt;/a&gt; by re-using Karate test-suites as &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-gatling&#34;&gt;Gatling performance tests&lt;/a&gt; that &lt;em&gt;deeply&lt;/em&gt; assert that server responses are accurate under load&lt;/li&gt; &#xA; &lt;li&gt;Gatling integration can hook into &lt;a href=&#34;https://github.com/intuit/karate/tree/master/karate-gatling#custom&#34;&gt;&lt;em&gt;any&lt;/em&gt; custom Java code&lt;/a&gt; - which means that you can perf-test even non-HTTP protocols such as &lt;a href=&#34;https://github.com/thinkerou/karate-grpc&#34;&gt;gRPC&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Built-in &lt;a href=&#34;https://github.com/intuit/karate/wiki/Distributed-Testing&#34;&gt;distributed-testing capability&lt;/a&gt; that works for API, UI and even &lt;a href=&#34;https://github.com/intuit/karate/wiki/Distributed-Testing#gatling&#34;&gt;load-testing&lt;/a&gt; - without needing any complex &#34;grid&#34; infrastructure&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-netty&#34;&gt;API mocks&lt;/a&gt; or test-doubles that even &lt;a href=&#34;https://hackernoon.com/api-consumer-contract-tests-and-test-doubles-with-karate-72c30ea25c18&#34;&gt;maintain CRUD &#39;state&#39;&lt;/a&gt; across multiple calls - enabling TDD for micro-services and &lt;a href=&#34;https://martinfowler.com/articles/consumerDrivenContracts.html&#34;&gt;Consumer Driven Contracts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#async&#34;&gt;Async&lt;/a&gt; support that allows you to seamlessly integrate the handling of custom events or listening to message-queues&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-mock-servlet&#34;&gt;Mock HTTP Servlet&lt;/a&gt; that enables you to test &lt;strong&gt;any&lt;/strong&gt; controller servlet such as Spring Boot / MVC or Jersey / JAX-RS - without having to boot an app-server, and you can use your HTTP integration tests un-changed&lt;/li&gt; &#xA; &lt;li&gt;Built-in &lt;a href=&#34;https://twitter.com/KarateDSL/status/1338892932691070976&#34;&gt;HTML templating&lt;/a&gt; so that you can extend your test-reports into readable specifications&lt;/li&gt; &#xA; &lt;li&gt;Comprehensive support for different flavors of HTTP calls: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#soap-action&#34;&gt;SOAP&lt;/a&gt; / XML requests&lt;/li&gt; &#xA;   &lt;li&gt;HTTPS / &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configure&#34;&gt;SSL&lt;/a&gt; - without needing certificates, key-stores or trust-stores&lt;/li&gt; &#xA;   &lt;li&gt;HTTP &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configure&#34;&gt;proxy server&lt;/a&gt; support&lt;/li&gt; &#xA;   &lt;li&gt;URL-encoded &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#form-field&#34;&gt;HTML-form&lt;/a&gt; data&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#multipart-field&#34;&gt;Multi-part&lt;/a&gt; file-upload - including &lt;code&gt;multipart/mixed&lt;/code&gt; and &lt;code&gt;multipart/related&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Browser-like &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#cookie&#34;&gt;cookie&lt;/a&gt; handling&lt;/li&gt; &#xA;   &lt;li&gt;Full control over HTTP &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#header&#34;&gt;headers&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#path&#34;&gt;path&lt;/a&gt; and query &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#param&#34;&gt;parameters&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#retry-until&#34;&gt;Re-try&lt;/a&gt; until condition&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://www.websocket.org&#34;&gt;Websocket&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#async&#34;&gt;support&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Real World Examples&lt;/h2&gt; &#xA;&lt;p&gt;A set of real-life examples can be found here: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo&#34;&gt;Karate Demos&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Comparison with REST-assured&lt;/h2&gt; &#xA;&lt;p&gt;For teams familiar with or currently using &lt;a href=&#34;http://rest-assured.io&#34;&gt;REST-assured&lt;/a&gt;, this detailed comparison of &lt;a href=&#34;http://tinyurl.com/karatera&#34;&gt;Karate vs REST-assured&lt;/a&gt; - can help you evaluate Karate. Do note that if you prefer a pure Java API - Karate has &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#java-api&#34;&gt;that covered&lt;/a&gt;, and with far more capabilities.&lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/yu3uupBZyxc&#34;&gt;Intro to all features of Karate&lt;/a&gt; - video + demos (with subtitles) by &lt;a href=&#34;https://twitter.com/ptrthomas&#34;&gt;Peter Thomas&lt;/a&gt; (creator / lead dev of Karate)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/KarateDSL/status/1120985060843249664&#34;&gt;Karate entered the ThoughtWorks Tech Radar&lt;/a&gt; in 2019 and was &lt;a href=&#34;https://twitter.com/KarateDSL/status/1262719979104817152&#34;&gt;upgraded in ranking&lt;/a&gt; in May 2020&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/takanorig/microservices-testing-automation-with-karate&#34;&gt;マイクロサービスにおけるテスト自動化 with Karate&lt;/a&gt; - (&lt;em&gt;Microservices Test Automation with Karate&lt;/em&gt;) presentation by &lt;a href=&#34;https://twitter.com/takanorig&#34;&gt;Takanori Suzuki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://software-that-matters.com/2021/01/27/7-new-features-in-karate-test-automation-version-1_0/&#34;&gt;7 New Features in Karate Test Automation Version 1.0&lt;/a&gt; - by &lt;a href=&#34;https://twitter.com/peter_quiel&#34;&gt;Peter Quiel&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can find a lot more references, tutorials and blog-posts &lt;a href=&#34;https://github.com/intuit/karate/wiki/Community-News&#34;&gt;in the wiki&lt;/a&gt;. Karate also has a dedicated &#34;tag&#34;, and a very active and supportive community at &lt;a href=&#34;https://stackoverflow.com/questions/tagged/karate&#34;&gt;Stack Overflow&lt;/a&gt; - where you can get support and ask questions.&lt;/p&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;p&gt;If you are a Java developer - Karate requires at least &lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/downloads/index.html&#34;&gt;Java&lt;/a&gt; 8 and then either &lt;a href=&#34;http://maven.apache.org&#34;&gt;Maven&lt;/a&gt;, &lt;a href=&#34;https://gradle.org&#34;&gt;Gradle&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#eclipse-quickstart&#34;&gt;Eclipse&lt;/a&gt; or &lt;a href=&#34;https://github.com/intuit/karate/wiki/IDE-Support#intellij-community-edition&#34;&gt;IntelliJ&lt;/a&gt; to be installed. Note that Karate works fine on OpenJDK.&lt;/p&gt; &#xA;&lt;p&gt;If you are new to programming or test-automation, refer to this video for &lt;a href=&#34;https://youtu.be/W-af7Cd8cMc&#34;&gt;getting started with just the (free) IntelliJ Community Edition&lt;/a&gt;. Other options are the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#quickstart&#34;&gt;quickstart&lt;/a&gt; or the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-netty#standalone-jar&#34;&gt;standalone executable&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you &lt;em&gt;don&#39;t&lt;/em&gt; want to use Java, you have the option of just downloading and extracting the &lt;a href=&#34;https://github.com/intuit/karate/wiki/ZIP-Release&#34;&gt;ZIP release&lt;/a&gt;. Try this especially if you don&#39;t have much experience with programming or test-automation. We recommend that you use the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=kirkslota.karate-runner&#34;&gt;Karate extension for Visual Studio Code&lt;/a&gt; - and with that, JavaScript, .NET and Python programmers will feel right at home.&lt;/p&gt; &#xA;&lt;p&gt;Visual Studio Code can be used for Java (or Maven) projects as well. One reason to use it is the excellent &lt;a href=&#34;https://twitter.com/KarateDSL/status/1167533484560142336&#34;&gt;&lt;em&gt;debug support&lt;/em&gt; that we have for Karate&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Maven&lt;/h2&gt; &#xA;&lt;p&gt;All you need is available in the &lt;a href=&#34;https://search.maven.org/artifact/com.intuit.karate/karate-core&#34;&gt;&lt;code&gt;karate-core&lt;/code&gt;&lt;/a&gt; artifact. You can run tests with this &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#parallel-execution&#34;&gt;directly&lt;/a&gt;, but teams can choose the JUnit variant (shown below) that pulls in JUnit 5 and &lt;a href=&#34;https://stackoverflow.com/a/65578167/143475&#34;&gt;slightly improves the in-IDE experience&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;com.intuit.karate&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;karate-junit5&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;1.2.0&amp;lt;/version&amp;gt;&#xA;    &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#junit-4&#34;&gt;JUnit 4&lt;/a&gt;, use &lt;code&gt;karate-junit4&lt;/code&gt; instead of &lt;code&gt;karate-junit5&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Gradle&lt;/h2&gt; &#xA;&lt;p&gt;Alternatively for &lt;a href=&#34;https://gradle.org&#34;&gt;Gradle&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;    testCompile &#39;com.intuit.karate:karate-junit5:1.2.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also refer to the wiki for using &lt;a href=&#34;https://github.com/intuit/karate/wiki/Gradle&#34;&gt;Karate with Gradle&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Quickstart&lt;/h3&gt; &#xA;&lt;p&gt;It may be easier for you to use the Karate Maven archetype to create a skeleton project with one command. You can then skip the next few sections, as the &lt;code&gt;pom.xml&lt;/code&gt;, recommended directory structure, sample test and &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#junit-5&#34;&gt;JUnit 5&lt;/a&gt; runners - will be created for you.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you are behind a corporate proxy, or especially if your local Maven installation has been configured to point to a repository within your local network, the command below may not work. One workaround is to temporarily disable or rename your Maven &lt;a href=&#34;https://maven.apache.org/settings.html&#34;&gt;&lt;code&gt;settings.xml&lt;/code&gt;&lt;/a&gt; file, and try again.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You can replace the values of &lt;code&gt;com.mycompany&lt;/code&gt; and &lt;code&gt;myproject&lt;/code&gt; as per your needs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mvn archetype:generate \&#xA;-DarchetypeGroupId=com.intuit.karate \&#xA;-DarchetypeArtifactId=karate-archetype \&#xA;-DarchetypeVersion=1.2.0 \&#xA;-DgroupId=com.mycompany \&#xA;-DartifactId=myproject&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a folder called &lt;code&gt;myproject&lt;/code&gt; (or whatever you set the name to).&lt;/p&gt; &#xA;&lt;h3&gt;IntelliJ Quickstart&lt;/h3&gt; &#xA;&lt;p&gt;Refer to this video for &lt;a href=&#34;https://youtu.be/W-af7Cd8cMc&#34;&gt;getting started with the free IntelliJ Community Edition&lt;/a&gt;. It simplifies the above process, since you only need to install IntelliJ. For Eclipse, refer to the wiki on &lt;a href=&#34;https://github.com/intuit/karate/wiki/IDE-Support&#34;&gt;IDE Support&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Folder Structure&lt;/h2&gt; &#xA;&lt;p&gt;A Karate test script has the file extension &lt;code&gt;.feature&lt;/code&gt; which is the standard followed by Cucumber. You are free to organize your files using regular Java package conventions.&lt;/p&gt; &#xA;&lt;p&gt;The Maven tradition is to have non-Java source files in a separate &lt;code&gt;src/test/resources&lt;/code&gt; folder structure - but we recommend that you keep them side-by-side with your &lt;code&gt;*.java&lt;/code&gt; files. When you have a large and complex project, you will end up with a few data files (e.g. &lt;code&gt;*.js&lt;/code&gt;, &lt;code&gt;*.json&lt;/code&gt;, &lt;code&gt;*.txt&lt;/code&gt;) as well and it is much more convenient to see the &lt;code&gt;*.java&lt;/code&gt; and &lt;code&gt;*.feature&lt;/code&gt; files and all related artifacts in the same place.&lt;/p&gt; &#xA;&lt;p&gt;This can be easily achieved with the following tweak to your maven &lt;code&gt;&amp;lt;build&amp;gt;&lt;/code&gt; section.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;build&amp;gt;&#xA;    &amp;lt;testResources&amp;gt;&#xA;        &amp;lt;testResource&amp;gt;&#xA;            &amp;lt;directory&amp;gt;src/test/java&amp;lt;/directory&amp;gt;&#xA;            &amp;lt;excludes&amp;gt;&#xA;                &amp;lt;exclude&amp;gt;**/*.java&amp;lt;/exclude&amp;gt;&#xA;            &amp;lt;/excludes&amp;gt;&#xA;        &amp;lt;/testResource&amp;gt;&#xA;    &amp;lt;/testResources&amp;gt;        &#xA;    &amp;lt;plugins&amp;gt;&#xA;    ...&#xA;    &amp;lt;/plugins&amp;gt;&#xA;&amp;lt;/build&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is very common in the world of Maven users and keep in mind that these are tests and not production code.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, if using Gradle then add the following &lt;code&gt;sourceSets&lt;/code&gt; definition&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;sourceSets {&#xA;    test {&#xA;        resources {&#xA;            srcDir file(&#39;src/test/java&#39;)&#xA;            exclude &#39;**/*.java&#39;&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the above in place, you don&#39;t have to keep switching between your &lt;code&gt;src/test/java&lt;/code&gt; and &lt;code&gt;src/test/resources&lt;/code&gt; folders, you can have all your test-code and artifacts under &lt;code&gt;src/test/java&lt;/code&gt; and everything will work as expected.&lt;/p&gt; &#xA;&lt;p&gt;Once you get used to this, you may even start wondering why projects need a &lt;code&gt;src/test/resources&lt;/code&gt; folder at all !&lt;/p&gt; &#xA;&lt;h3&gt;Spring Boot Example&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/sdaas&#34;&gt;Soumendra Daas&lt;/a&gt; has created a nice example and guide that you can use as a reference here: &lt;a href=&#34;https://github.com/Sdaas/hello-karate&#34;&gt;&lt;code&gt;hello-karate&lt;/code&gt;&lt;/a&gt;. This demonstrates a Java Maven + JUnit 5 project set up to test a &lt;a href=&#34;http://projects.spring.io/spring-boot/&#34;&gt;Spring Boot&lt;/a&gt; app.&lt;/p&gt; &#xA;&lt;h2&gt;Naming Conventions&lt;/h2&gt; &#xA;&lt;p&gt;Since these are tests and not production Java code, you don&#39;t need to be bound by the &lt;code&gt;com.mycompany.foo.bar&lt;/code&gt; convention and the un-necessary explosion of sub-folders that ensues. We suggest that you have a folder hierarchy only one or two levels deep - where the folder names clearly identify which &#39;resource&#39;, &#39;entity&#39; or API is the web-service under test.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;src/test/java&#xA;    |&#xA;    +-- karate-config.js&#xA;    +-- logback-test.xml&#xA;    +-- some-reusable.feature&#xA;    +-- some-classpath-function.js&#xA;    +-- some-classpath-payload.json&#xA;    |&#xA;    \-- animals&#xA;        |&#xA;        +-- AnimalsTest.java&#xA;        |&#xA;        +-- cats&#xA;        |   |&#xA;        |   +-- cats-post.feature&#xA;        |   +-- cats-get.feature&#xA;        |   +-- cat.json&#xA;        |   \-- CatsRunner.java&#xA;        |&#xA;        \-- dogs&#xA;            |&#xA;            +-- dog-crud.feature&#xA;            +-- dog.json&#xA;            +-- some-helper-function.js&#xA;            \-- DogsRunner.java&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Assuming you use JUnit, there are some good reasons for the recommended (best practice) naming convention and choice of file-placement shown above:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Not using the &lt;code&gt;*Test.java&lt;/code&gt; convention for the JUnit classes (e.g. &lt;code&gt;CatsRunner.java&lt;/code&gt;) in the &lt;code&gt;cats&lt;/code&gt; and &lt;code&gt;dogs&lt;/code&gt; folder ensures that these tests will &lt;strong&gt;not&lt;/strong&gt; be picked up when invoking &lt;code&gt;mvn test&lt;/code&gt; (for the whole project) from the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#command-line&#34;&gt;command line&lt;/a&gt;. But you can still invoke these tests from the IDE, which is convenient when in development mode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AnimalsTest.java&lt;/code&gt; (the only file that follows the &lt;code&gt;*Test.java&lt;/code&gt; naming convention) acts as the &#39;test suite&#39; for the entire project. By default, Karate will load all &lt;code&gt;*.feature&lt;/code&gt; files from sub-directories as well. But since &lt;code&gt;some-reusable.feature&lt;/code&gt; is &lt;em&gt;above&lt;/em&gt; &lt;code&gt;AnimalsTest.java&lt;/code&gt; in the folder hierarchy, it will &lt;strong&gt;not&lt;/strong&gt; be picked-up. Which is exactly what we want, because &lt;code&gt;some-reusable.feature&lt;/code&gt; is designed to be &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#calling-other-feature-files&#34;&gt;called&lt;/a&gt; only from one of the other test scripts (perhaps with some parameters being passed). You can also use &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#tags&#34;&gt;tags&lt;/a&gt; to skip files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;some-classpath-function.js&lt;/code&gt; and &lt;code&gt;some-classpath-payload.json&lt;/code&gt; are in the &#39;root&#39; of the Java &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#classpath&#34;&gt;&#39;classpath&#39;&lt;/a&gt; which means they can be easily &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files&#34;&gt;read&lt;/a&gt; (and re-used) from any test-script by using the &lt;code&gt;classpath:&lt;/code&gt; prefix, for e.g: &lt;code&gt;read(&#39;classpath:some-classpath-function.js&#39;)&lt;/code&gt;. Relative paths will also work.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For details on what actually goes into a script or &lt;code&gt;*.feature&lt;/code&gt; file, refer to the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#syntax-guide&#34;&gt;syntax guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;IDE Support&lt;/h2&gt; &#xA;&lt;p&gt;Refer to the wiki - &lt;a href=&#34;https://github.com/intuit/karate/wiki/IDE-Support&#34;&gt;IDE Support&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;file.encoding&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;In some cases, for large payloads and especially when the default system encoding is not &lt;code&gt;UTF-8&lt;/code&gt; (Windows or non-US locales), you may run into issues where a &lt;code&gt;java.io.ByteArrayInputStream&lt;/code&gt; is encountered instead of a string. Other errors could be a &lt;code&gt;java.net.URISyntaxException&lt;/code&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match&#34;&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; not working as expected because of special or foreign characters, e.g. German or &lt;code&gt;ISO-8859-15&lt;/code&gt;. Typical symptoms are your tests working fine via the IDE but not when running via Maven or Gradle. The solution is to ensure that when Karate tests run, the JVM &lt;code&gt;file.encoding&lt;/code&gt; is set to &lt;code&gt;UTF-8&lt;/code&gt;. This can be done via the &lt;a href=&#34;http://maven.apache.org/surefire/maven-surefire-plugin/test-mojo.html#argLine&#34;&gt;&lt;code&gt;maven-surefire-plugin&lt;/code&gt; configuration&lt;/a&gt;. Add the plugin to the &lt;code&gt;&amp;lt;build&amp;gt;/&amp;lt;plugins&amp;gt;&lt;/code&gt; section of your &lt;code&gt;pom.xml&lt;/code&gt; if not already present:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;plugin&amp;gt;&#xA;        &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;&#xA;        &amp;lt;artifactId&amp;gt;maven-surefire-plugin&amp;lt;/artifactId&amp;gt;&#xA;        &amp;lt;version&amp;gt;2.10&amp;lt;/version&amp;gt;&#xA;        &amp;lt;configuration&amp;gt;&#xA;            &amp;lt;argLine&amp;gt;-Dfile.encoding=UTF-8&amp;lt;/argLine&amp;gt;&#xA;        &amp;lt;/configuration&amp;gt;&#xA;    &amp;lt;/plugin&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;JUnit 4&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you want to use JUnit 4, use the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#maven&#34;&gt;&lt;code&gt;karate-junit4&lt;/code&gt; Maven dependency&lt;/a&gt; instead of &lt;code&gt;karate-junit5&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To run a script &lt;code&gt;*.feature&lt;/code&gt; file from your Java IDE, you just need the following empty test-class in the same package. The name of the class doesn&#39;t matter, and it will automatically run any &lt;code&gt;*.feature&lt;/code&gt; file in the same package. This comes in useful because depending on how you organize your files and folders - you can have multiple feature files executed by a single JUnit test-class.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package animals.cats;&#xA;&#xA;import com.intuit.karate.junit4.Karate;&#xA;import org.junit.runner.RunWith;&#xA;&#xA;@RunWith(Karate.class)&#xA;public class CatsRunner {&#xA;&#x9;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Refer to your IDE documentation for how to run a JUnit class. Typically right-clicking on the file in the project browser or even within the editor view would bring up the &#34;Run as JUnit Test&#34; menu option.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Karate will traverse sub-directories and look for &lt;code&gt;*.feature&lt;/code&gt; files. For example if you have the JUnit class in the &lt;code&gt;com.mycompany&lt;/code&gt; package, &lt;code&gt;*.feature&lt;/code&gt; files in &lt;code&gt;com.mycompany.foo&lt;/code&gt; and &lt;code&gt;com.mycompany.bar&lt;/code&gt; will also be run. This is one reason why you may want to prefer a &#39;flat&#39; directory structure as &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#naming-conventions&#34;&gt;explained above&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;JUnit 5&lt;/h2&gt; &#xA;&lt;p&gt;Karate supports JUnit 5 and the advantage is that you can have multiple methods in a test-class. Only 1 &lt;code&gt;import&lt;/code&gt; is needed, and instead of a class-level annotation, you use a nice &lt;a href=&#34;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&#34;&gt;DRY&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Fluent_interface&#34;&gt;fluent-api&lt;/a&gt; to express which tests and tags you want to use.&lt;/p&gt; &#xA;&lt;p&gt;Note that the Java class does not need to be &lt;code&gt;public&lt;/code&gt; and even the test methods do not need to be &lt;code&gt;public&lt;/code&gt; - so tests end up being very concise.&lt;/p&gt; &#xA;&lt;p&gt;Here is an &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-junit5/src/test/java/karate/SampleTest.java&#34;&gt;example&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package karate;&#xA;&#xA;import com.intuit.karate.junit5.Karate;&#xA;&#xA;class SampleTest {&#xA;&#xA;    @Karate.Test&#xA;    Karate testSample() {&#xA;        return Karate.run(&#34;sample&#34;).relativeTo(getClass());&#xA;    }&#xA;    &#xA;    @Karate.Test&#xA;    Karate testTags() {&#xA;        return Karate.run(&#34;tags&#34;).tags(&#34;@second&#34;).relativeTo(getClass());&#xA;    }&#xA;&#xA;    @Karate.Test&#xA;    Karate testSystemProperty() {&#xA;        return Karate.run(&#34;classpath:karate/tags.feature&#34;)&#xA;                .tags(&#34;@second&#34;)&#xA;                .karateEnv(&#34;e2e&#34;)&#xA;                .systemProperty(&#34;foo&#34;, &#34;bar&#34;);&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that more &#34;builder&#34; methods are available from the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#junit-4-parallel-execution&#34;&gt;&lt;code&gt;Runner.Builder&lt;/code&gt;&lt;/a&gt; class such as &lt;code&gt;reportDir()&lt;/code&gt; etc.&lt;/p&gt; &#xA;&lt;p&gt;You should be able to right-click and run a single method using your IDE - which should be sufficient when you are in development mode. But to be able to run JUnit 5 tests from the command-line, you need to ensure that the latest version of the &lt;a href=&#34;https://maven.apache.org/surefire/maven-surefire-plugin/examples/junit-platform.html&#34;&gt;maven-surefire-plugin&lt;/a&gt; is present in your project &lt;code&gt;pom.xml&lt;/code&gt; (within the &lt;code&gt;&amp;lt;build&amp;gt;/&amp;lt;plugins&amp;gt;&lt;/code&gt; section):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;plugin&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;maven-surefire-plugin&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;2.22.2&amp;lt;/version&amp;gt;&#xA;&amp;lt;/plugin&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run a single test method, for example the &lt;code&gt;testTags()&lt;/code&gt; in the example above, you can do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mvn test -Dtest=SampleTest#testTags&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also look at how to run tests via the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#command-line&#34;&gt;command-line&lt;/a&gt; and the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#junit-5-parallel-execution&#34;&gt;parallel runner&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;JUnit HTML report&lt;/h3&gt; &#xA;&lt;p&gt;When you use a JUnit runner - after the execution of each feature, an HTML report is output to the &lt;code&gt;target/karate-reports&lt;/code&gt; folder and the full path will be printed to the console (see &lt;a href=&#34;https://twitter.com/KarateDSL/status/935029435140489216&#34;&gt;video&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;html report: (paste into browser to view)&#xA;-----------------------------------------&#xA;file:///projects/myproject/target/karate-reports/mypackage.myfeature.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can easily select (double-click), copy and paste this &lt;code&gt;file:&lt;/code&gt; URL into your browser address bar. This report is useful for troubleshooting and debugging a test because all requests and responses are shown in-line with the steps, along with error messages and the output of &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#print&#34;&gt;&lt;code&gt;print&lt;/code&gt;&lt;/a&gt; statements. Just re-fresh your browser window if you re-run the test.&lt;/p&gt; &#xA;&lt;h3&gt;Dry Run&lt;/h3&gt; &#xA;&lt;p&gt;This will give you the usual HTML report showing what features will be run, including all steps shown (including comments) so that it can be reviewed. Of course the actual time-durations, and logs will be missing, and &lt;em&gt;everything&lt;/em&gt; will pass.&lt;/p&gt; &#xA;&lt;p&gt;The “dry run” report is useful to review the tag &#34;coverage&#34; of what will be run. For example you can get a nice feature “coverage” report, provided you have a rich set of &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#tags&#34;&gt;tags&lt;/a&gt;. e.g. &lt;code&gt;@smoke @module=one @module=two&lt;/code&gt; etc.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#junit-4-parallel-execution&#34;&gt;&lt;code&gt;Runner.Builder&lt;/code&gt;&lt;/a&gt; API has a &lt;code&gt;dryRun()&lt;/code&gt; method to switch this on. Note that this mode can be also triggered via the command-line by adding &lt;code&gt;-D&lt;/code&gt; or &lt;code&gt;--dryrun&lt;/code&gt; to the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karateoptions&#34;&gt;&lt;code&gt;karate.options&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Command Line&lt;/h2&gt; &#xA;&lt;p&gt;Normally in dev mode, you will use your IDE to run a &lt;code&gt;*.feature&lt;/code&gt; file directly or via the companion &#39;runner&#39; JUnit Java class. When you have a &#39;runner&#39; class in place, it would be possible to run it from the command-line as well.&lt;/p&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;mvn test&lt;/code&gt; command only runs test classes that follow the &lt;code&gt;*Test.java&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#naming-conventions&#34;&gt;naming convention&lt;/a&gt; by default. But you can choose a single test to run like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mvn test -Dtest=CatsRunner&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;karate.options&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;When your Java test &#34;runner&#34; is linked to multiple feature files, which will be the case when you use the recommended &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#parallel-execution&#34;&gt;parallel runner&lt;/a&gt;, you can narrow down your scope to a single feature, scenario or directory via the command-line, useful in dev-mode. Note how even &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#tags&#34;&gt;tags&lt;/a&gt; to exclude (or include) can be specified:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note that any &lt;code&gt;Feature&lt;/code&gt; or &lt;code&gt;Scenario&lt;/code&gt; with the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#special-tags&#34;&gt;special &lt;code&gt;@ignore&lt;/code&gt; tag&lt;/a&gt; will be skipped by default.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;mvn test &#34;-Dkarate.options=--tags ~@skipme classpath:demo/cats/cats.feature&#34; -Dtest=DemoTestParallel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Multiple feature files (or paths) can be specified, de-limited by the space character. They should be at the end of the &lt;code&gt;karate.options&lt;/code&gt;. To run only a single scenario, append the line number on which the scenario is defined, de-limited by &lt;code&gt;:&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mvn test &#34;-Dkarate.options=PathToFeatureFiles/order.feature:12&#34; -Dtest=DemoTestParallel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Command Line - Gradle&lt;/h3&gt; &#xA;&lt;p&gt;For Gradle, you must extend the test task to allow the &lt;code&gt;karate.options&lt;/code&gt; to be passed to the runtime (otherwise they get consumed by Gradle itself). To do that, add the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;test {&#xA;    // pull karate options into the runtime&#xA;    systemProperty &#34;karate.options&#34;, System.properties.getProperty(&#34;karate.options&#34;)&#xA;    // pull karate env into the runtime&#xA;    systemProperty &#34;karate.env&#34;, System.properties.getProperty(&#34;karate.env&#34;)&#xA;    // ensure tests are always run&#xA;    outputs.upToDateWhen { false }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then the above command in Gradle would look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew test --tests *CatsRunner&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew test -Dtest.single=CatsRunner&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Test Suites&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The recommended way to define and run test-suites and reporting in Karate is to use the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#parallel-execution&#34;&gt;parallel runner&lt;/a&gt;, described in the next section. The approach in this section is more suited for troubleshooting in dev-mode, using your IDE.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;One way to define &#39;test-suites&#39; in Karate is to have a JUnit class at a level &#39;above&#39; (in terms of folder hierarchy) all the &lt;code&gt;*.feature&lt;/code&gt; files in your project. So if you take the previous &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#naming-conventions&#34;&gt;folder structure example&lt;/a&gt;, you can do this on the command-line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mvn test &#34;-Dkarate.options=--tags ~@skipme&#34; -Dtest=AnimalsTest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here, &lt;code&gt;AnimalsTest&lt;/code&gt; is the name of the Java class we designated to run the multiple &lt;code&gt;*.feature&lt;/code&gt; files that make up your test-suite. There is a neat way to &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#tags&#34;&gt;tag your tests&lt;/a&gt; and the above example demonstrates how to run all tests &lt;em&gt;except&lt;/em&gt; the ones tagged &lt;code&gt;@skipme&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that the special, built-in tag &lt;code&gt;@ignore&lt;/code&gt; will &lt;em&gt;always&lt;/em&gt; be skipped by default, and you don&#39;t need to specify &lt;code&gt;~@ignore&lt;/code&gt; anywhere.&lt;/p&gt; &#xA;&lt;p&gt;You can &#39;lock down&#39; the fact that you only want to execute the single JUnit class that functions as a test-suite - by using the following &lt;a href=&#34;http://maven.apache.org/surefire/maven-surefire-plugin/examples/inclusion-exclusion.html&#34;&gt;maven-surefire-plugin configuration&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;plugin&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;maven-surefire-plugin&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;${maven.surefire.version}&amp;lt;/version&amp;gt;&#xA;    &amp;lt;configuration&amp;gt;&#xA;        &amp;lt;includes&amp;gt;&#xA;            &amp;lt;include&amp;gt;animals/AnimalsTest.java&amp;lt;/include&amp;gt;&#xA;        &amp;lt;/includes&amp;gt;&#xA;        &amp;lt;systemProperties&amp;gt;&#xA;            &amp;lt;karate.options&amp;gt;--tags @smoke&amp;lt;/karate.options&amp;gt;&#xA;        &amp;lt;/systemProperties&amp;gt;            &#xA;    &amp;lt;/configuration&amp;gt;&#xA;&amp;lt;/plugin&amp;gt; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note how the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karateoptions&#34;&gt;&lt;code&gt;karate.options&lt;/code&gt;&lt;/a&gt; can be specified using the &lt;code&gt;&amp;lt;systemProperties&amp;gt;&lt;/code&gt; configuration.&lt;/p&gt; &#xA;&lt;p&gt;For Gradle, you simply specify the test which is to be &lt;code&gt;include&lt;/code&gt;-d:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;test {&#xA;    include &#39;animals/AnimalsTest.java&#39;&#xA;    // pull karate options into the runtime&#xA;    systemProperty &#34;karate.options&#34;, System.properties.getProperty(&#34;karate.options&#34;)&#xA;    // pull karate env into the runtime&#xA;    systemProperty &#34;karate.env&#34;, System.properties.getProperty(&#34;karate.env&#34;)&#xA;    // ensure tests are always run&#xA;    outputs.upToDateWhen { false }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The big drawback of the approach above is that you cannot run tests in parallel. The recommended approach for Karate reporting in a Continuous Integration set-up is described in the next section which can generate the &lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/JUnit+Plugin&#34;&gt;JUnit XML&lt;/a&gt; format that most CI tools can consume. The &lt;a href=&#34;https://relishapp.com/cucumber/cucumber/docs/formatters/json-output-formatter&#34;&gt;Cucumber JSON format&lt;/a&gt; can be also emitted, which gives you plenty of options for generating pretty reports using third-party maven plugins.&lt;/p&gt; &#xA;&lt;p&gt;And most importantly - you can run tests in parallel without having to depend on third-party hacks that introduce code-generation and config &#39;bloat&#39; into your &lt;code&gt;pom.xml&lt;/code&gt; or &lt;code&gt;build.gradle&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Parallel Execution&lt;/h2&gt; &#xA;&lt;p&gt;Karate can run tests in parallel, and dramatically cut down execution time. This is a &#39;core&#39; feature and does not depend on JUnit, Maven or Gradle.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can easily &#34;choose&#34; features and tags to run and compose test-suites in a very flexible manner.&lt;/li&gt; &#xA; &lt;li&gt;You can use the returned &lt;code&gt;Results&lt;/code&gt; object to check if any scenarios failed, and to even summarize the errors&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/JUnit+Plugin&#34;&gt;JUnit XML&lt;/a&gt; reports can be generated in the &#34;&lt;code&gt;reportDir&lt;/code&gt;&#34; path you specify, and you can easily configure your CI to look for these files after a build (for e.g. in &lt;code&gt;**/*.xml&lt;/code&gt; or &lt;code&gt;**/karate-reports/*.xml&lt;/code&gt;). Note that you have to call the &lt;code&gt;outputJunitXml(true)&lt;/code&gt; method on the &lt;code&gt;Runner&lt;/code&gt; &#34;builder&#34;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://relishapp.com/cucumber/cucumber/docs/formatters/json-output-formatter&#34;&gt;Cucumber JSON reports&lt;/a&gt; can be generated, except that the extension will be &lt;code&gt;.json&lt;/code&gt; instead of &lt;code&gt;.xml&lt;/code&gt;. Note that you have to call the &lt;code&gt;outputCucumberJson(true)&lt;/code&gt; method on the &lt;code&gt;Runner&lt;/code&gt; &#34;builder&#34;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;JUnit 4 Parallel Execution&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Important: &lt;strong&gt;do not&lt;/strong&gt; use the &lt;code&gt;@RunWith(Karate.class)&lt;/code&gt; annotation. This is a &lt;em&gt;normal&lt;/em&gt; JUnit 4 test class ! If you want to use JUnit 4, use the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#maven&#34;&gt;&lt;code&gt;karate-junit4&lt;/code&gt; Maven dependency&lt;/a&gt; instead of &lt;code&gt;karate-junit5&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.intuit.karate.Results;&#xA;import com.intuit.karate.Runner;&#xA;import static org.junit.Assert.*;&#xA;import org.junit.Test;&#xA;&#xA;public class TestParallel {&#xA;    &#xA;    @Test&#xA;    public void testParallel() {&#xA;        Results results = Runner.path(&#34;classpath:some/package&#34;).tags(&#34;@smoke&#34;).parallel(5);&#xA;        assertTrue(results.getErrorMessages(), results.getFailCount() == 0);&#xA;    }&#xA;    &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You don&#39;t use a JUnit runner (no &lt;code&gt;@RunWith&lt;/code&gt; annotation), and you write a plain vanilla JUnit test (it could even be a normal Java class with a &lt;code&gt;main&lt;/code&gt; method)&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;Runner.path()&lt;/code&gt; &#34;builder&#34; method in &lt;code&gt;karate-core&lt;/code&gt; is how you refer to the package you want to execute, and all feature files within sub-directories will be picked up&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Runner.path()&lt;/code&gt; takes multiple string parameters, so you can refer to multiple packages or even individual &lt;code&gt;*.feature&lt;/code&gt; files and easily &#34;compose&#34; a test-suite &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;e.g. &lt;code&gt;Runner.path(&#34;classpath:animals&#34;, &#34;classpath:some/other/package.feature&#34;)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;To &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#tags&#34;&gt;choose tags&lt;/a&gt;, call the &lt;code&gt;tags()&lt;/code&gt; API, note that by default, any &lt;code&gt;*.feature&lt;/code&gt; file tagged with the special (built-in) tag: &lt;code&gt;@ignore&lt;/code&gt; will be skipped. You can also specify tags on the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#test-suites&#34;&gt;command-line&lt;/a&gt;. The &lt;code&gt;tags()&lt;/code&gt; method also takes multiple arguments, for e.g. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;this is an &#34;AND&#34; operation: &lt;code&gt;tags(&#34;@customer&#34;, &#34;@smoke&#34;)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;and this is an &#34;OR&#34; operation: &lt;code&gt;tags(&#34;@customer,@smoke&#34;)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;There is an optional &lt;code&gt;reportDir()&lt;/code&gt; method if you want to customize the directory to which the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#parallel-execution&#34;&gt;HTML, XML and JSON&lt;/a&gt; files will be output, it defaults to &lt;code&gt;target/karate-reports&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;If you want to dynamically and programmatically determine the tags and features to be included - the API also accepts &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; as the &lt;code&gt;path()&lt;/code&gt; and &lt;code&gt;tags()&lt;/code&gt; methods arguments&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;parallel()&lt;/code&gt; &lt;em&gt;has&lt;/em&gt; to be the last method called, and you pass the number of parallel threads needed. It returns a &lt;code&gt;Results&lt;/code&gt; object that has all the information you need - such as the number of passed or failed tests.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;JUnit 5 Parallel Execution&lt;/h3&gt; &#xA;&lt;p&gt;For &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#junit-5&#34;&gt;JUnit 5&lt;/a&gt; you can omit the &lt;code&gt;public&lt;/code&gt; modifier for the class and method, and there are some changes to &lt;code&gt;import&lt;/code&gt; package names. The method signature of the &lt;code&gt;assertTrue&lt;/code&gt; has flipped around a bit. Also note that you don&#39;t use &lt;code&gt;@Karate.Test&lt;/code&gt; for the method, and you just use the &lt;em&gt;normal&lt;/em&gt; JUnit 5 &lt;code&gt;@Test&lt;/code&gt; annotation.&lt;/p&gt; &#xA;&lt;p&gt;Else the &lt;code&gt;Runner.path()&lt;/code&gt; &#34;builder&#34; API is the same, refer the description above for &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#junit-4-parallel-execution&#34;&gt;JUnit 4&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.intuit.karate.Results;&#xA;import com.intuit.karate.Runner;&#xA;import static org.junit.jupiter.api.Assertions.*;&#xA;import org.junit.jupiter.api.Test;&#xA;&#xA;class TestParallel {&#xA;&#xA;    @Test&#xA;    void testParallel() {&#xA;        Results results = Runner.path(&#34;classpath:animals&#34;).tags(&#34;~@skipme&#34;).parallel(5);&#xA;        assertEquals(0, results.getFailCount(), results.getErrorMessages());&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Parallel Stats&lt;/h3&gt; &#xA;&lt;p&gt;For convenience, some stats are logged to the console when execution completes, which should look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;======================================================&#xA;elapsed:   2.35 | threads:    5 | thread time: 4.98 &#xA;features:    54 | ignored:   25 | efficiency: 0.42&#xA;scenarios:  145 | passed:   145 | failed: 0&#xA;======================================================&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The parallel runner will always run &lt;code&gt;Feature&lt;/code&gt;-s in parallel. Karate will also run &lt;code&gt;Scenario&lt;/code&gt;-s in parallel by default. So if you have a &lt;code&gt;Feature&lt;/code&gt; with multiple &lt;code&gt;Scenario&lt;/code&gt;-s in it - they will execute in parallel, and even each &lt;code&gt;Examples&lt;/code&gt; row in a &lt;code&gt;Scenario Outline&lt;/code&gt; will do so !&lt;/p&gt; &#xA;&lt;p&gt;A &lt;code&gt;karate-timeline.html&lt;/code&gt; file will also be saved to the report output directory mentioned above (&lt;code&gt;target/karate-reports&lt;/code&gt; by default) - which is useful for visually verifying or troubleshooting the effectiveness of the test-run (&lt;a href=&#34;https://twitter.com/KarateDSL/status/1049321708241317888&#34;&gt;see video&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;@parallel=false&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;In rare cases you may want to suppress the default of &lt;code&gt;Scenario&lt;/code&gt;-s executing in parallel and the special &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#tags&#34;&gt;&lt;code&gt;tag&lt;/code&gt;&lt;/a&gt; &lt;code&gt;@parallel=false&lt;/code&gt; can be used. If you place it above the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#script-structure&#34;&gt;&lt;code&gt;Feature&lt;/code&gt;&lt;/a&gt; keyword, it will apply to all &lt;code&gt;Scenario&lt;/code&gt;-s. And if you just want one or two &lt;code&gt;Scenario&lt;/code&gt;-s to NOT run in parallel, you can place this tag above only &lt;em&gt;those&lt;/em&gt; &lt;code&gt;Scenario&lt;/code&gt;-s. See &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/encoding/encoding.feature&#34;&gt;example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that forcing &lt;code&gt;Scenario&lt;/code&gt;-s to run in a particular sequence &lt;a href=&#34;https://stackoverflow.com/a/46080568/143475&#34;&gt;is an anti-pattern&lt;/a&gt;, and should be avoided as far as possible.&lt;/p&gt; &#xA;&lt;h2&gt;Test Reports&lt;/h2&gt; &#xA;&lt;p&gt;As mentioned above, most CI tools would be able to process the JUnit XML output of the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#parallel-execution&#34;&gt;parallel runner&lt;/a&gt; and determine the status of the build as well as generate reports.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo&#34;&gt;Karate Demo&lt;/a&gt; has a working example of the recommended parallel-runner set up. It also &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo#example-report&#34;&gt;details how&lt;/a&gt; a third-party library can be easily used to generate some very nice-looking reports, from the JSON output of the parallel runner.&lt;/p&gt; &#xA;&lt;p&gt;For example, here below is an actual report generated by the &lt;a href=&#34;https://github.com/damianszczepanik/cucumber-reporting&#34;&gt;cucumber-reporting&lt;/a&gt; open-source library.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/resources/karate-maven-report.jpg&#34; height=&#34;600px&#34;&gt; &#xA;&lt;p&gt;Another example for a popular Maven reporting plugin that is compatible with Karate JSON is &lt;a href=&#34;https://github.com/trivago/cluecumber-report-plugin&#34;&gt;Cluecumber&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The demo also features &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo#code-coverage-using-jacoco&#34;&gt;code-coverage using Jacoco&lt;/a&gt;, and some tips for even non-Java back-ends. Some third-party report-server solutions integrate with Karate such as &lt;a href=&#34;https://github.com/reportportal/agent-java-karate&#34;&gt;ReportPortal.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Logging&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This is optional, and Karate will work without the logging config in place, but the default console logging may be too verbose for your needs.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Karate uses &lt;a href=&#34;http://logback.qos.ch&#34;&gt;LOGBack&lt;/a&gt; which looks for a file called &lt;code&gt;logback-test.xml&lt;/code&gt; on the &#39;&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#classpath&#34;&gt;classpath&lt;/a&gt;&#39;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;In rare cases, e.g. if you are using Karate to create a Java application, &lt;a href=&#34;http://logback.qos.ch/manual/configuration.html&#34;&gt;LOGBack will look for &lt;code&gt;logback.xml&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Here is a sample &lt;code&gt;logback-test.xml&lt;/code&gt; for you to get started.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&amp;gt;&#xA;&amp;lt;configuration&amp;gt;&#xA; &#xA;    &amp;lt;appender name=&#34;STDOUT&#34; class=&#34;ch.qos.logback.core.ConsoleAppender&#34;&amp;gt;&#xA;        &amp;lt;encoder&amp;gt;&#xA;            &amp;lt;pattern&amp;gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&amp;lt;/pattern&amp;gt;&#xA;        &amp;lt;/encoder&amp;gt;&#xA;    &amp;lt;/appender&amp;gt;&#xA;  &#xA;    &amp;lt;appender name=&#34;FILE&#34; class=&#34;ch.qos.logback.core.FileAppender&#34;&amp;gt;&#xA;        &amp;lt;file&amp;gt;target/karate.log&amp;lt;/file&amp;gt;&#xA;        &amp;lt;encoder&amp;gt;&#xA;            &amp;lt;pattern&amp;gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&amp;lt;/pattern&amp;gt;&#xA;        &amp;lt;/encoder&amp;gt;&#xA;    &amp;lt;/appender&amp;gt;    &#xA;   &#xA;    &amp;lt;logger name=&#34;com.intuit.karate&#34; level=&#34;DEBUG&#34;/&amp;gt;&#xA;   &#xA;    &amp;lt;root level=&#34;info&#34;&amp;gt;&#xA;        &amp;lt;appender-ref ref=&#34;STDOUT&#34; /&amp;gt;&#xA;        &amp;lt;appender-ref ref=&#34;FILE&#34; /&amp;gt;&#xA;    &amp;lt;/root&amp;gt;&#xA;  &#xA;&amp;lt;/configuration&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can change the &lt;code&gt;com.intuit.karate&lt;/code&gt; logger level to &lt;code&gt;INFO&lt;/code&gt; to reduce the amount of logging. When the level is &lt;code&gt;DEBUG&lt;/code&gt; the entire request and response payloads are logged. If you use the above config, logs will be captured in &lt;code&gt;target/karate.log&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to keep the level as &lt;code&gt;DEBUG&lt;/code&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#test-reports&#34;&gt;for HTML reports&lt;/a&gt;) but suppress logging to the console, you can comment out the &lt;code&gt;STDOUT&lt;/code&gt; &#34;root&#34; &lt;code&gt;appender-ref&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;  &amp;lt;root level=&#34;warn&#34;&amp;gt;&#xA;      &amp;lt;!-- &amp;lt;appender-ref ref=&#34;STDOUT&#34; /&amp;gt; --&amp;gt;&#xA;      &amp;lt;appender-ref ref=&#34;FILE&#34; /&amp;gt;&#xA;  &amp;lt;/root&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or another option is to use a &lt;a href=&#34;http://logback.qos.ch/manual/filters.html#thresholdFilter&#34;&gt;&lt;code&gt;ThresholdFilter&lt;/code&gt;&lt;/a&gt;, so you still see critical logs on the console:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;  &amp;lt;appender name=&#34;STDOUT&#34; class=&#34;ch.qos.logback.core.ConsoleAppender&#34;&amp;gt;&#xA;      &amp;lt;filter class=&#34;ch.qos.logback.classic.filter.ThresholdFilter&#34;&amp;gt;&#xA;          &amp;lt;level&amp;gt;WARN&amp;lt;/level&amp;gt;&#xA;      &amp;lt;/filter&amp;gt;&#xA;      &amp;lt;encoder&amp;gt;&#xA;          &amp;lt;pattern&amp;gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&amp;lt;/pattern&amp;gt;&#xA;      &amp;lt;/encoder&amp;gt;&#xA;  &amp;lt;/appender&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to exclude the logs from your CI/CD pipeline but keep them in the execution of your users in their locals you can configure your logback using &lt;a href=&#34;http://logback.qos.ch/manual/configuration.html#conditional&#34;&gt;Janino&lt;/a&gt;. In such cases it might be desirable to have your tests using &lt;code&gt;karate.logger.debug(&#39;your additional info&#39;)&lt;/code&gt; instead of the &lt;code&gt;print&lt;/code&gt; keyword so you can keep logs in your pipeline in INFO.&lt;/p&gt; &#xA;&lt;p&gt;For suppressing sensitive information such as secrets and passwords from the log and reports, see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#log-masking&#34;&gt;Log Masking&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#report-verbosity&#34;&gt;Report Verbosity&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Configuration&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You can skip this section and jump straight to the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#syntax-guide&#34;&gt;Syntax Guide&lt;/a&gt; if you are in a hurry to get started with Karate. Things will work even if the &lt;code&gt;karate-config.js&lt;/code&gt; file is not present.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Classpath&lt;/h2&gt; &#xA;&lt;p&gt;The &#39;classpath&#39; is a Java concept and is where some configuration files such as the one for &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#logging&#34;&gt;logging&lt;/a&gt; are expected to be by default. If you use the Maven &lt;code&gt;&amp;lt;test-resources&amp;gt;&lt;/code&gt; tweak &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#folder-structure&#34;&gt;described earlier&lt;/a&gt; (recommended), the &#39;root&#39; of the classpath will be in the &lt;code&gt;src/test/java&lt;/code&gt; folder, or else would be &lt;code&gt;src/test/resources&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;karate-config.js&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The only &#39;rule&#39; is that on start-up Karate expects a file called &lt;code&gt;karate-config.js&lt;/code&gt; to exist on the &#39;classpath&#39; and contain a &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#javascript-functions&#34;&gt;JavaScript function&lt;/a&gt;. The function is expected to return a JSON object and all keys and values in that JSON object will be made available as script variables.&lt;/p&gt; &#xA;&lt;p&gt;And that&#39;s all there is to Karate configuration ! You can easily get the value of the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#switching-the-environment&#34;&gt;current &#39;environment&#39; or &#39;profile&#39;&lt;/a&gt;, and then set up &#39;global&#39; variables using some simple JavaScript. Here is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function fn() {   &#xA;  var env = karate.env; // get java system property &#39;karate.env&#39;&#xA;  karate.log(&#39;karate.env system property was:&#39;, env);&#xA;  if (!env) {&#xA;    env = &#39;dev&#39;; // a custom &#39;intelligent&#39; default&#xA;  }&#xA;  var config = { // base config JSON&#xA;    appId: &#39;my.app.id&#39;,&#xA;    appSecret: &#39;my.secret&#39;,&#xA;    someUrlBase: &#39;https://some-host.com/v1/auth/&#39;,&#xA;    anotherUrlBase: &#39;https://another-host.com/v1/&#39;&#xA;  };&#xA;  if (env == &#39;stage&#39;) {&#xA;    // over-ride only those that need to be&#xA;    config.someUrlBase = &#39;https://stage-host/v1/auth&#39;;&#xA;  } else if (env == &#39;e2e&#39;) {&#xA;    config.someUrlBase = &#39;https://e2e-host/v1/auth&#39;;&#xA;  }&#xA;  // don&#39;t waste time waiting for a connection or if servers don&#39;t respond within 5 seconds&#xA;  karate.configure(&#39;connectTimeout&#39;, 5000);&#xA;  karate.configure(&#39;readTimeout&#39;, 5000);&#xA;  return config;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Here above, you see the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-log&#34;&gt;&lt;code&gt;karate.log()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-env&#34;&gt;&lt;code&gt;karate.env&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-configure&#34;&gt;&lt;code&gt;karate.configure()&lt;/code&gt;&lt;/a&gt; &#34;helpers&#34; being used. Note that the &lt;code&gt;karate-config.js&lt;/code&gt; is re-processed for &lt;em&gt;every&lt;/em&gt; &lt;code&gt;Scenario&lt;/code&gt; and in rare cases, you may want to initialize (e.g. auth tokens) only once for all of your tests. This can be achieved using &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karatecallsingle&#34;&gt;&lt;code&gt;karate.callSingle()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;A common requirement is to pass dynamic parameter values via the command line, and you can use the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-properties&#34;&gt;&lt;code&gt;karate.properties[&#39;some.name&#39;]&lt;/code&gt;&lt;/a&gt; syntax for getting a system property passed via JVM options in the form &lt;code&gt;-Dsome.name=foo&lt;/code&gt;. Refer to the section on &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#dynamic-port-numbers&#34;&gt;dynamic port numbers&lt;/a&gt; for an example.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You can even retrieve operating-system environment variables via &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#calling-java&#34;&gt;Java interop&lt;/a&gt; as follows: &lt;code&gt;var systemPath = java.lang.System.getenv(&#39;PATH&#39;);&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This decision to use JavaScript for config is influenced by years of experience with the set-up of complicated test-suites and fighting with &lt;a href=&#34;http://maven.apache.org/guides/introduction/introduction-to-profiles.html&#34;&gt;Maven profiles&lt;/a&gt;, &lt;a href=&#34;https://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html&#34;&gt;Maven resource-filtering&lt;/a&gt; and the XML-soup that somehow gets summoned by the &lt;a href=&#34;http://maven.apache.org/plugins/maven-antrun-plugin/usage.html&#34;&gt;Maven AntRun plugin&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Karate&#39;s approach frees you from Maven, is far more expressive, allows you to eyeball all environments in one place, and is still a plain-text file. If you want, you could even create &lt;a href=&#34;https://stackoverflow.com/a/49693808/143475&#34;&gt;nested chunks of JSON that &#39;name-space&#39; your config variables&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;One way to appreciate Karate&#39;s approach is to think over what it takes to add a new environment-dependent variable (e.g. a password) into a test. In typical frameworks it could mean changing multiple properties files, maven profiles and placeholders, and maybe even threading the value via a dependency-injection framework - before you can even access the value within your test.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This approach is indeed slightly more complicated than traditional &lt;code&gt;*.properties&lt;/code&gt; files - but you &lt;em&gt;need&lt;/em&gt; this complexity. Keep in mind that these are tests (not production code) and this config is going to be maintained more by the dev or QE team instead of the &#39;ops&#39; or operations team.&lt;/p&gt; &#xA;&lt;p&gt;And there is no more worrying about Maven profiles and whether the &#39;right&#39; &lt;code&gt;*.properties&lt;/code&gt; file has been copied to the proper place.&lt;/p&gt; &#xA;&lt;h2&gt;Switching the Environment&lt;/h2&gt; &#xA;&lt;p&gt;There is only one thing you need to do to switch the environment - which is to set a Java system property.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;By default, the value of &lt;code&gt;karate.env&lt;/code&gt; when you access it within &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-configjs&#34;&gt;&lt;code&gt;karate-config.js&lt;/code&gt;&lt;/a&gt; - would be &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The recipe for doing this when running Maven from the command line is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mvn test -DargLine=&#34;-Dkarate.env=e2e&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or in Gradle:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew test -Dkarate.env=e2e&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can refer to the documentation of the &lt;a href=&#34;http://maven.apache.org/plugins-archives/maven-surefire-plugin-2.12.4/examples/system-properties.html&#34;&gt;Maven Surefire Plugin&lt;/a&gt; for alternate ways of achieving this, but the &lt;code&gt;argLine&lt;/code&gt; approach is the simplest and should be more than sufficient for your Continuous Integration or test-automation needs.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a reminder that running any &lt;a href=&#34;https://maven.apache.org/surefire/maven-surefire-plugin/examples/single-test.html&#34;&gt;single JUnit test via Maven&lt;/a&gt; can be done by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mvn test -Dtest=CatsRunner&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where &lt;code&gt;CatsRunner&lt;/code&gt; is the JUnit class name (in any package) you wish to run.&lt;/p&gt; &#xA;&lt;p&gt;Karate is flexible, you can easily over-write config variables within each individual test-script - which is very convenient when in dev-mode or rapid-prototyping.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;System.setProperty(&#34;karate.env&#34;, &#34;pre-prod&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For advanced users, note that &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#tags&#34;&gt;tags&lt;/a&gt; and the &lt;code&gt;karate.env&lt;/code&gt; environment-switch can be &#34;linked&#34; using the special &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#environment-tags&#34;&gt;environment tags&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Environment Specific Config&lt;/h2&gt; &#xA;&lt;p&gt;When your project gets complex, you can have separate &lt;code&gt;karate-config-&amp;lt;env&amp;gt;.js&lt;/code&gt; files that will be processed for that specific value of &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#switching-the-environment&#34;&gt;&lt;code&gt;karate.env&lt;/code&gt;&lt;/a&gt;. This is especially useful when you want to maintain passwords, secrets or even URL-s specific for your local dev environment.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Make sure you configure your source code management system (e.g. Git) to ignore &lt;code&gt;karate-config-*.js&lt;/code&gt; if needed.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;There should always be &lt;code&gt;karate-config.js&lt;/code&gt; in the &#34;root&#34; folder, even if you don&#39;t have any &#34;common&#34; config. In such cases, the function can do nothing or return an empty JSON. &lt;a href=&#34;https://github.com/intuit/karate/issues/1588&#34;&gt;Learn more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Here are the rules Karate uses on bootstrap (before every &lt;code&gt;Scenario&lt;/code&gt; or &lt;code&gt;Examples&lt;/code&gt; row in a &lt;code&gt;Scenario Outline&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;if the system-property &lt;code&gt;karate.config.dir&lt;/code&gt; was set, Karate will look in this folder for &lt;code&gt;karate-config.js&lt;/code&gt; - and if found, will process it&lt;/li&gt; &#xA; &lt;li&gt;else if &lt;code&gt;karate-config.js&lt;/code&gt; was not found in the above location (or &lt;code&gt;karate.config.dir&lt;/code&gt; was not set), &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configuration&#34;&gt;&lt;code&gt;classpath:karate-config.js&lt;/code&gt;&lt;/a&gt; would be processed (this is the default / common case)&lt;/li&gt; &#xA; &lt;li&gt;if the &lt;code&gt;karate.env&lt;/code&gt; system property was set &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;if &lt;code&gt;karate.config.dir&lt;/code&gt; was set, Karate will also look for &lt;code&gt;file:&amp;lt;karate.config.dir&amp;gt;/karate-config-&amp;lt;env&amp;gt;.js&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;else (if the &lt;code&gt;karate.config.dir&lt;/code&gt; was &lt;em&gt;not&lt;/em&gt; set), Karate will look for &lt;code&gt;classpath:karate-config-&amp;lt;env&amp;gt;.js&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;if the over-ride &lt;code&gt;karate-config-&amp;lt;env&amp;gt;.js&lt;/code&gt; exists, it will be processed, and the configuration (JSON entries) returned by this function will over-ride any set by &lt;code&gt;karate-config.js&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo&#34;&gt;karate demo&lt;/a&gt; for an &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/karate-config-contract.js&#34;&gt;example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;karate-base.js&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Advanced users who build frameworks on top of Karate have the option to supply a &lt;code&gt;karate-base.js&lt;/code&gt; file that Karate will look for on the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#classpath&#34;&gt;&lt;code&gt;classpath:&lt;/code&gt;&lt;/a&gt;. This is useful when you ship a JAR file containing re-usable features and JavaScript / Java code and want to &#39;default&#39; a few variables that teams can &#39;inherit&#39; from. So an additional rule in the above flow of &#39;rules&#39; (before the &lt;em&gt;first&lt;/em&gt; step) is as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;if &lt;code&gt;classpath:karate-base.js&lt;/code&gt; exists - Karate will process this as a &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configuration&#34;&gt;configuration source&lt;/a&gt; before anything else&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Syntax Guide&lt;/h1&gt; &#xA;&lt;h2&gt;Script Structure&lt;/h2&gt; &#xA;&lt;p&gt;Karate scripts are technically in &#39;&lt;a href=&#34;https://docs.cucumber.io/gherkin/reference/&#34;&gt;Gherkin&lt;/a&gt;&#39; format - but all you need to grok as someone who needs to test web-services are the three sections: &lt;code&gt;Feature&lt;/code&gt;, &lt;code&gt;Background&lt;/code&gt; and &lt;code&gt;Scenario&lt;/code&gt;. There can be multiple Scenario-s in a &lt;code&gt;*.feature&lt;/code&gt; file, and at least one should be present. The &lt;code&gt;Background&lt;/code&gt; is optional.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Variables set using &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#def&#34;&gt;&lt;code&gt;def&lt;/code&gt;&lt;/a&gt; in the &lt;code&gt;Background&lt;/code&gt; will be re-set before &lt;em&gt;every&lt;/em&gt; &lt;code&gt;Scenario&lt;/code&gt;. If you are looking for a way to do something only &lt;strong&gt;once&lt;/strong&gt; per &lt;code&gt;Feature&lt;/code&gt;, take a look at &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#callonce&#34;&gt;&lt;code&gt;callonce&lt;/code&gt;&lt;/a&gt;. On the other hand, if you are expecting a variable in the &lt;code&gt;Background&lt;/code&gt; to be modified by one &lt;code&gt;Scenario&lt;/code&gt; so that later ones can see the updated value - that is &lt;em&gt;not&lt;/em&gt; how you should think of them, and you should combine your &#39;flow&#39; into one scenario. Keep in mind that you should be able to comment-out a &lt;code&gt;Scenario&lt;/code&gt; or skip some via &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#tags&#34;&gt;&lt;code&gt;tags&lt;/code&gt;&lt;/a&gt; without impacting any others. Note that the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#parallel-execution&#34;&gt;parallel runner&lt;/a&gt; will run &lt;code&gt;Scenario&lt;/code&gt;-s in parallel, which means they can run in &lt;em&gt;any&lt;/em&gt; order. If you are looking for ways to do something only &lt;em&gt;once&lt;/em&gt; per feature or across &lt;em&gt;all&lt;/em&gt; your tests, see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#hooks&#34;&gt;Hooks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Lines that start with a &lt;code&gt;#&lt;/code&gt; are comments.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Feature: brief description of what is being tested&#xA;    more lines of description if needed.&#xA;&#xA;Background:&#xA;  # this section is optional !&#xA;  # steps here are executed before each Scenario in this file&#xA;  # variables defined here will be &#39;global&#39; to all scenarios&#xA;  # and will be re-initialized before every scenario&#xA;&#xA;Scenario: brief description of this scenario&#xA;  # steps for this scenario&#xA;&#xA;Scenario: a different scenario&#xA;  # steps for this other scenario&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;There is also a variant of &lt;code&gt;Scenario&lt;/code&gt; called &lt;code&gt;Scenario Outline&lt;/code&gt; along with &lt;code&gt;Examples&lt;/code&gt;, useful for &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#data-driven-tests&#34;&gt;data-driven tests&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Given-When-Then&lt;/h3&gt; &#xA;&lt;p&gt;The business of web-services testing requires access to low-level aspects such as HTTP headers, URL-paths, query-parameters, complex JSON or XML payloads and response-codes. And Karate gives you control over these aspects with the small set of keywords focused on HTTP such as &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#url&#34;&gt;&lt;code&gt;url&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#path&#34;&gt;&lt;code&gt;path&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#param&#34;&gt;&lt;code&gt;param&lt;/code&gt;&lt;/a&gt;, etc.&lt;/p&gt; &#xA;&lt;p&gt;Karate does not attempt to have tests be in &#34;natural language&#34; like how Cucumber tests are &lt;a href=&#34;https://docs.cucumber.io/gherkin/reference/&#34;&gt;traditionally expected to be&lt;/a&gt;. That said, the syntax is very concise, and the convention of every step having to start with either &lt;code&gt;Given&lt;/code&gt;, &lt;code&gt;And&lt;/code&gt;, &lt;code&gt;When&lt;/code&gt; or &lt;code&gt;Then&lt;/code&gt;, makes things very readable. You end up with a decent approximation of BDD even though web-services by nature are &#34;headless&#34;, without a UI, and not really human-friendly.&lt;/p&gt; &#xA;&lt;h4&gt;Cucumber vs Karate&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Karate was based on Cucumber-JVM until version 0.8.0 but the parser and engine were &lt;a href=&#34;https://github.com/intuit/karate/issues/444&#34;&gt;re-written from scratch&lt;/a&gt; in 0.9.0 onwards. So we use the same &lt;a href=&#34;https://docs.cucumber.io/gherkin/&#34;&gt;Gherkin&lt;/a&gt; syntax - but the similarity ends there.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you are familiar with Cucumber (JVM), you may be wondering if you need to write &lt;a href=&#34;https://docs.cucumber.io/gherkin/step-organization/&#34;&gt;step-definitions&lt;/a&gt;. The answer is &lt;strong&gt;no&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Karate&#39;s approach is that all the step-definitions you need in order to work with HTTP, JSON and XML have been already implemented. And since you can easily extend Karate &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#call&#34;&gt;using JavaScript&lt;/a&gt;, there is no need to compile Java code any more.&lt;/p&gt; &#xA;&lt;p&gt;The following table summarizes some key differences between Cucumber and Karate.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;span&gt;▫&lt;/span&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Cucumber&lt;/th&gt; &#xA;   &lt;th&gt;Karate&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Step Definitions Built-In&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;No&lt;/strong&gt;. You need to keep implementing them as your functionality grows. &lt;a href=&#34;https://thepracticaldeveloper.com/2017/08/03/microservices-end-to-end-tests-with-cucumber-and-spring-boot/&#34;&gt;This can get very tedious&lt;/a&gt;, especially since for &lt;a href=&#34;https://docs.cucumber.io/cucumber/state/#dependency-injection&#34;&gt;dependency-injection&lt;/a&gt;, you are &lt;a href=&#34;http://angiejones.tech/rest-assured-with-cucumber-using-bdd-for-web-services-automation?refreshed=y#comment-40&#34;&gt;on your own&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; &lt;strong&gt;Yes&lt;/strong&gt;. No extra Java code needed.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Single Layer of Code To Maintain&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;No&lt;/strong&gt;. There are 2 Layers. The &lt;a href=&#34;https://docs.cucumber.io/gherkin/reference/&#34;&gt;Gherkin&lt;/a&gt; spec or &lt;code&gt;*.feature&lt;/code&gt; files make up one layer, and you will also have the corresponding Java step-definitions.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; &lt;strong&gt;Yes&lt;/strong&gt;. Only 1 layer of Karate-script (based on Gherkin).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Readable Specification&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Yes&lt;/strong&gt;. Cucumber will read like natural language &lt;em&gt;if&lt;/em&gt; you implement the step-definitions right.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt; &lt;strong&gt;No&lt;/strong&gt;. Although Karate is simple, and a &lt;a href=&#34;https://ayende.com/blog/2984/dsl-vs-fluent-interface-compare-contrast&#34;&gt;true DSL&lt;/a&gt;, it is ultimately a &lt;a href=&#34;https://hackernoon.com/yes-karate-is-not-true-bdd-698bf4a9be39&#34;&gt;mini-programming language&lt;/a&gt;. But it is &lt;a href=&#34;https://stackoverflow.com/a/47799207/143475&#34;&gt;perfect for testing web-services&lt;/a&gt; at the level of HTTP requests and responses.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Re-Use Feature Files&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;No&lt;/strong&gt;. Cucumber does not support being able to call (and thus re-use) other &lt;code&gt;*.feature&lt;/code&gt; files from a test-script.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#calling-other-feature-files&#34;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Dynamic Data-Driven Testing&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;No&lt;/strong&gt;. Cucumber&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#the-cucumber-way&#34;&gt;&lt;code&gt;Scenario Outline&lt;/code&gt;&lt;/a&gt; expects the &lt;code&gt;Examples&lt;/code&gt; to contain a fixed set of rows.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; &lt;strong&gt;Yes&lt;/strong&gt;. Karate&#39;s support for calling other &lt;code&gt;*.feature&lt;/code&gt; files allows you to use a &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#data-driven-features&#34;&gt;JSON array as the data-source&lt;/a&gt; and you can &lt;a href=&#34;https://twitter.com/KarateDSL/status/1051433711814627329&#34;&gt;use JSON&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#csv-files&#34;&gt;even CSV&lt;/a&gt; directly in a data-driven &lt;code&gt;Scenario Outline&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Parallel Execution&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;No&lt;/strong&gt;. There are some challenges (especially with reporting) and you can find various discussions and third-party projects on the web that attempt to close this gap&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#parallel-execution&#34;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/a&gt;. Karate runs even &lt;code&gt;Scenario&lt;/code&gt;-s in parallel, not just &lt;code&gt;Feature&lt;/code&gt;-s.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Run &#39;Set-Up&#39; Routines Only Once&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;No&lt;/strong&gt;. Cucumber has a limitation where &lt;code&gt;Background&lt;/code&gt; steps are re-run for every &lt;code&gt;Scenario&lt;/code&gt; and worse - even for every &lt;code&gt;Examples&lt;/code&gt; row within a &lt;code&gt;Scenario Outline&lt;/code&gt;. This has been a &lt;a href=&#34;https://github.com/cucumber/cucumber-jvm/issues/515&#34;&gt;highly-requested open issue&lt;/a&gt; for a &lt;em&gt;long&lt;/em&gt; time.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#hooks&#34;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Embedded JavaScript Engine&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;No&lt;/strong&gt;. And you have to roll your own approach to environment-specific configuration and worry about &lt;a href=&#34;https://docs.cucumber.io/cucumber/state/#dependency-injection&#34;&gt;dependency-injection&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; &lt;strong&gt;Yes&lt;/strong&gt;. Easily define all environments in a &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configuration&#34;&gt;single file&lt;/a&gt; and share variables across all scenarios. Full script-ability via &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#calling-javascript-functions&#34;&gt;JS&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#java-interop&#34;&gt;Java interop&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;One nice thing about the design of the Gherkin syntax is that script-steps are treated the same no matter whether they start with the keyword &lt;code&gt;Given&lt;/code&gt;, &lt;code&gt;And&lt;/code&gt;, &lt;code&gt;When&lt;/code&gt; or &lt;code&gt;Then&lt;/code&gt;. What this means is that you are free to use whatever makes sense for you. You could even have all the steps start with &lt;code&gt;When&lt;/code&gt; and Karate won&#39;t care.&lt;/p&gt; &#xA;&lt;p&gt;In fact Gherkin supports the &lt;a href=&#34;https://www.relishapp.com/cucumber/cucumber/docs/gherkin/using-star-notation-instead-of-given-when-then&#34;&gt;catch-all symbol &#39;&lt;code&gt;*&lt;/code&gt;&#39;&lt;/a&gt; - instead of forcing you to use &lt;code&gt;Given&lt;/code&gt;, &lt;code&gt;When&lt;/code&gt; or &lt;code&gt;Then&lt;/code&gt;. This is perfect for those cases where it really doesn&#39;t make sense - for example the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#script-structure&#34;&gt;&lt;code&gt;Background&lt;/code&gt;&lt;/a&gt; section or when you use the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#def&#34;&gt;&lt;code&gt;def&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#set&#34;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; syntax. When eyeballing a test-script, think of the &lt;code&gt;*&lt;/code&gt; as a &#39;bullet-point&#39;.&lt;/p&gt; &#xA;&lt;p&gt;You can read more about the Given-When-Then convention at the &lt;a href=&#34;https://docs.cucumber.io/gherkin/reference/&#34;&gt;Cucumber reference documentation&lt;/a&gt;. Since Karate uses Gherkin, you can also employ &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#data-driven-tests&#34;&gt;data-driven&lt;/a&gt; techniques such as expressing data-tables in test scripts. Another good thing that Karate inherits is the nice IDE support for Cucumber that &lt;a href=&#34;https://www.jetbrains.com/idea/help/cucumber.html&#34;&gt;IntelliJ&lt;/a&gt; and &lt;a href=&#34;https://cucumber.io/cucumber-eclipse/&#34;&gt;Eclipse&lt;/a&gt; have. So you can do things like right-click and run a &lt;code&gt;*.feature&lt;/code&gt; file (or scenario) without needing to use a JUnit runner.&lt;/p&gt; &#xA;&lt;p&gt;For a detailed discussion on BDD and how Karate relates to Cucumber, please refer to this blog-post: &lt;a href=&#34;https://medium.com/@ptrthomas/yes-karate-is-not-true-bdd-698bf4a9be39&#34;&gt;Yes, Karate is not &lt;em&gt;true&lt;/em&gt; BDD&lt;/a&gt;. It is the opinion of the author of Karate that &lt;em&gt;true&lt;/em&gt; BDD is un-necessary over-kill for API testing, and this is explained more in &lt;a href=&#34;https://stackoverflow.com/a/47799207/143475&#34;&gt;this answer&lt;/a&gt; on &lt;a href=&#34;https://stackoverflow.com/questions/tagged/karate&#34;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;With the formalities out of the way, let&#39;s dive straight into the syntax.&lt;/p&gt; &#xA;&lt;h1&gt;Setting and Using Variables&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;code&gt;def&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Set a named variable&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;# assigning a string value:&#xA;Given def myVar = &#39;world&#39;&#xA;&#xA;# using a variable&#xA;Then print myVar&#xA;&#xA;# assigning a number (you can use &#39;*&#39; instead of Given / When / Then)&#xA;* def myNum = 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;def&lt;/code&gt; will over-write any variable that was using the same name earlier. Keep in mind that the start-up &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configuration&#34;&gt;configuration routine&lt;/a&gt; could have already initialized some variables before the script even started. For details of scope and visibility of variables, see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#script-structure&#34;&gt;Script Structure&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note that &lt;code&gt;url&lt;/code&gt; and &lt;code&gt;request&lt;/code&gt; are not allowed as variable names. This is just to reduce confusion for users new to Karate who tend to do &lt;code&gt;* def request = {}&lt;/code&gt; and expect the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#request&#34;&gt;&lt;code&gt;request&lt;/code&gt;&lt;/a&gt; body or similarly, the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#url&#34;&gt;&lt;code&gt;url&lt;/code&gt;&lt;/a&gt; to be set.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The examples above are simple, but a variety of expression &#39;shapes&#39; are supported on the right hand side of the &lt;code&gt;=&lt;/code&gt; symbol. The section on &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-expressions&#34;&gt;Karate Expressions&lt;/a&gt; goes into the details.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;assert&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Assert if an expression evaluates to &lt;code&gt;true&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Once defined, you can refer to a variable by name. Expressions are evaluated using the embedded JavaScript engine. The assert keyword can be used to assert that an expression returns a boolean value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Given def color = &#39;red &#39;&#xA;And def num = 5&#xA;Then assert color + num == &#39;red 5&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Everything to the right of the &lt;code&gt;assert&lt;/code&gt; keyword will be evaluated as a single expression.&lt;/p&gt; &#xA;&lt;p&gt;Something worth mentioning here is that you would hardly need to use &lt;code&gt;assert&lt;/code&gt; in your test scripts. Instead you would typically use the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match&#34;&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; keyword, that is designed for performing powerful assertions against JSON and XML response payloads.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;print&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Log to the console&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;print&lt;/code&gt; to log variables to the console in the middle of a script. For convenience, you can have multiple expressions separated by commas, so this is the recommended pattern:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* print &#39;the value of a is:&#39;, a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similar to &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#assert&#34;&gt;&lt;code&gt;assert&lt;/code&gt;&lt;/a&gt;, the expressions on the right-hand-side of a &lt;code&gt;print&lt;/code&gt; have to be valid JavaScript. JsonPath and &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-expressions&#34;&gt;Karate expressions&lt;/a&gt; are not supported.&lt;/p&gt; &#xA;&lt;p&gt;If you use commas (instead of concatenating strings using &lt;code&gt;+&lt;/code&gt;), Karate will &#39;pretty-print&#39; variables, which is what you typically want when dealing with &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#native-data-types&#34;&gt;JSON or XML&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def myJson = { foo: &#39;bar&#39;, baz: [1, 2, 3] }&#xA;* print &#39;the value of myJson is:&#39;, myJson&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which results in the following output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;20:29:11.290 [main] INFO  com.intuit.karate - [print] the value of myJson is: {&#xA;  &#34;foo&#34;: &#34;bar&#34;,&#xA;  &#34;baz&#34;: [&#xA;    1,&#xA;    2,&#xA;    3&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Since XML is represented internally as a JSON-like or map-like object, if you perform string concatenation when printing, you will &lt;em&gt;not&lt;/em&gt; see XML - which can be confusing at first. Use the comma-delimited form (see above) or the JS helper (see below).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The built-in &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#the-karate-object&#34;&gt;&lt;code&gt;karate&lt;/code&gt; object&lt;/a&gt; is explained in detail later, but for now, note that this is also injected into &lt;code&gt;print&lt;/code&gt; (and even &lt;code&gt;assert&lt;/code&gt;) statements, and it has a helpful &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-pretty&#34;&gt;&lt;code&gt;pretty&lt;/code&gt;&lt;/a&gt; method, that takes a JSON argument and a &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-prettyxml&#34;&gt;&lt;code&gt;prettyXml&lt;/code&gt;&lt;/a&gt; method that deals with XML. So you could have also done something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* print &#39;the value of myJson is:\n&#39; + karate.pretty(myJson)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also refer to the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configure&#34;&gt;&lt;code&gt;configure&lt;/code&gt;&lt;/a&gt; keyword on how to switch on pretty-printing of all HTTP requests and responses.&lt;/p&gt; &#xA;&lt;h1&gt;&#39;Native&#39; data types&lt;/h1&gt; &#xA;&lt;p&gt;Native data types mean that you can insert them into a script without having to worry about enclosing them in strings and then having to &#39;escape&#39; double-quotes all over the place. They seamlessly fit &#39;in-line&#39; within your test script.&lt;/p&gt; &#xA;&lt;h2&gt;JSON&lt;/h2&gt; &#xA;&lt;p&gt;Note that the parser is &#39;lenient&#39; so that you don&#39;t have to enclose all keys in double-quotes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def cat = { name: &#39;Billie&#39;, scores: [2, 5] }&#xA;* assert cat.scores[1] == 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Some characters such as the hyphen &lt;code&gt;-&lt;/code&gt; are not permitted in &#39;lenient&#39; JSON keys (because they are interpreted by the JS engine as a &#39;minus sign&#39;). In such cases, you &lt;em&gt;have&lt;/em&gt; to use string quotes: &lt;code&gt;{ &#39;Content-Type&#39;: &#39;application/json&#39; }&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;When asserting for expected values in JSON or XML, always prefer using &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match&#34;&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#assert&#34;&gt;&lt;code&gt;assert&lt;/code&gt;&lt;/a&gt;. Match failure messages are much more descriptive and useful, and you get the power of &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#embedded-expressions&#34;&gt;embedded expressions&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#fuzzy-matching&#34;&gt;fuzzy matching&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def cats = [{ name: &#39;Billie&#39; }, { name: &#39;Bob&#39; }]&#xA;* match cats[1] == { name: &#39;Bob&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Karate&#39;s native support for JSON means that you can assign parts of a JSON instance into another variable, which is useful when dealing with complex &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#response&#34;&gt;&lt;code&gt;response&lt;/code&gt;&lt;/a&gt; payloads.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def first = cats[0]&#xA;* match first == { name: &#39;Billie&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For manipulating or updating JSON (or XML) using path expressions, refer to the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#set&#34;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; keyword.&lt;/p&gt; &#xA;&lt;h2&gt;XML&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Given def cat = &amp;lt;cat&amp;gt;&amp;lt;name&amp;gt;Billie&amp;lt;/name&amp;gt;&amp;lt;scores&amp;gt;&amp;lt;score&amp;gt;2&amp;lt;/score&amp;gt;&amp;lt;score&amp;gt;5&amp;lt;/score&amp;gt;&amp;lt;/scores&amp;gt;&amp;lt;/cat&amp;gt;&#xA;# sadly, xpath list indexes start from 1&#xA;Then match cat/cat/scores/score[2] == &#39;5&#39;&#xA;# but karate allows you to traverse xml like json !!&#xA;Then match cat.cat.scores.score[1] == 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Embedded Expressions&lt;/h3&gt; &#xA;&lt;p&gt;Karate has a very useful payload &#39;templating&#39; approach. Variables can be referred to within JSON, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Given def user = { name: &#39;john&#39;, age: 21 }&#xA;And def lang = &#39;en&#39;&#xA;When def session = { name: &#39;#(user.name)&#39;, locale: &#39;#(lang)&#39;, sessionUser: &#39;#(user)&#39;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So the rule is - if a string value within a JSON (or XML) object declaration is enclosed between &lt;code&gt;#(&lt;/code&gt; and &lt;code&gt;)&lt;/code&gt; - it will be evaluated as a JavaScript expression. And any variables which are alive in the context can be used in this expression. Here&#39;s how it works for XML:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Given def user = &amp;lt;user&amp;gt;&amp;lt;name&amp;gt;john&amp;lt;/name&amp;gt;&amp;lt;/user&amp;gt;&#xA;And def lang = &#39;en&#39;&#xA;When def session = &amp;lt;session&amp;gt;&amp;lt;locale&amp;gt;#(lang)&amp;lt;/locale&amp;gt;&amp;lt;sessionUser&amp;gt;#(user)&amp;lt;/sessionUser&amp;gt;&amp;lt;/session&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This comes in useful in some cases - and avoids needing to use the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#set&#34;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; keyword or &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#javascript-functions&#34;&gt;JavaScript functions&lt;/a&gt; to manipulate JSON. So you get the best of both worlds: the elegance of JSON to express complex nested data - while at the same time being able to dynamically plug values (that could even be other JSON or XML &#39;trees&#39;) into a &#39;template&#39;.&lt;/p&gt; &#xA;&lt;p&gt;Note that embedded expressions will be evaluated even when you &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files&#34;&gt;&lt;code&gt;read()&lt;/code&gt; from a JSON or XML file&lt;/a&gt;. This is super-useful for re-use and data-driven tests.&lt;/p&gt; &#xA;&lt;p&gt;A few special built-in variables such as &lt;code&gt;$&lt;/code&gt; (which is a &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#referring-to-self&#34;&gt;reference to the JSON root&lt;/a&gt;) - can be mixed into JSON embedded expressions.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#remove-if-null&#34;&gt;special case&lt;/a&gt; of embedded expressions can remove a JSON key (or XML element / attribute) if the expression evaluates to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Rules for Embedded Expressions&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;They work only within JSON or XML&lt;/li&gt; &#xA; &lt;li&gt;and when on the Right Hand Side of a &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#def&#34;&gt;&lt;code&gt;def&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match&#34;&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configure&#34;&gt;&lt;code&gt;configure&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;and when you &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files&#34;&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/a&gt; a JSON or XML file&lt;/li&gt; &#xA; &lt;li&gt;the expression &lt;em&gt;has&lt;/em&gt; to start with &lt;code&gt;#(&lt;/code&gt; and end with &lt;code&gt;)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Because of the last rule above, note that string-concatenation may not work quite the way you expect:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;# wrong !&#xA;* def foo = { bar: &#39;hello #(name)&#39; }&#xA;# right !&#xA;* def foo = { bar: &#39;#(&#34;hello &#34; + name)&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Observe how you can achieve string concatenation if you really want, because any valid JavaScript expression can be stuffed within an embedded expression. You could always do this in two steps:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def temp = &#39;hello &#39; + name&#xA;* def foo = { bar: &#39;#(temp)&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As a convenience, embedded expressions are supported on the Right Hand Side of a &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match&#34;&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; statement even for &#34;quoted string&#34; literals:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def foo = &#39;a1&#39;&#xA;* match foo == &#39;#(&#34;a&#34; + 1)&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And do note that in Karate 1.0 onwards, ES6 string-interpolation within &#34;backticks&#34; is supported:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* param filter = `ORDER_DATE:&#34;${todaysDate}&#34;`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Enclosed JavaScript&lt;/h3&gt; &#xA;&lt;p&gt;An alternative to embedded expressions (for JSON only) is to enclose the entire payload within parentheses - which tells Karate to evaluate it as pure JavaScript. This can be a lot simpler than embedded expressions in many cases, and JavaScript programmers will feel right at home.&lt;/p&gt; &#xA;&lt;p&gt;The example below shows the difference between embedded expressions and enclosed JavaScript:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;When def user = { name: &#39;john&#39;, age: 21 }&#xA;And def lang = &#39;en&#39;&#xA;&#xA;* def embedded = { name: &#39;#(user.name)&#39;, locale: &#39;#(lang)&#39;, sessionUser: &#39;#(user)&#39; }&#xA;* def enclosed = ({ name: user.name, locale: lang, sessionUser: user })&#xA;* match embedded == enclosed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;So how would you choose between the two approaches to create JSON ? &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#embedded-expressions&#34;&gt;Embedded expressions&lt;/a&gt; are useful when you have complex JSON &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files&#34;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt; from files, because you can auto-replace (or even &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#remove-if-null&#34;&gt;remove&lt;/a&gt;) data-elements with values dynamically evaluated from variables. And the JSON will still be &#39;well-formed&#39;, and editable in your IDE or text-editor. Embedded expressions also make more sense in &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#ignore-or-validate&#34;&gt;validation&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#schema-validation&#34;&gt;schema-like&lt;/a&gt; short-cut situations. It can also be argued that the &lt;code&gt;#&lt;/code&gt; symbol is easy to spot when eyeballing your test scripts - which makes things more readable and clear.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Multi-Line Expressions&lt;/h3&gt; &#xA;&lt;p&gt;The keywords &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#def&#34;&gt;&lt;code&gt;def&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#set&#34;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match&#34;&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#request&#34;&gt;&lt;code&gt;request&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#eval&#34;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; take multi-line input as the last argument. This is useful when you want to express a one-off lengthy snippet of text in-line, without having to split it out into a separate &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files&#34;&gt;file&lt;/a&gt;. Note how triple-quotes (&lt;code&gt;&#34;&#34;&#34;&lt;/code&gt;) are used to enclose content. Here are some examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;# instead of:&#xA;* def cat = &amp;lt;cat&amp;gt;&amp;lt;name&amp;gt;Billie&amp;lt;/name&amp;gt;&amp;lt;scores&amp;gt;&amp;lt;score&amp;gt;2&amp;lt;/score&amp;gt;&amp;lt;score&amp;gt;5&amp;lt;/score&amp;gt;&amp;lt;/scores&amp;gt;&amp;lt;/cat&amp;gt;&#xA;&#xA;# this is more readable:&#xA;* def cat = &#xA;  &#34;&#34;&#34;&#xA;  &amp;lt;cat&amp;gt;&#xA;      &amp;lt;name&amp;gt;Billie&amp;lt;/name&amp;gt;&#xA;      &amp;lt;scores&amp;gt;&#xA;          &amp;lt;score&amp;gt;2&amp;lt;/score&amp;gt;&#xA;          &amp;lt;score&amp;gt;5&amp;lt;/score&amp;gt;&#xA;      &amp;lt;/scores&amp;gt;&#xA;  &amp;lt;/cat&amp;gt;&#xA;  &#34;&#34;&#34;&#xA;# example of a request payload in-line&#xA;Given request &#xA;  &#34;&#34;&#34; &#xA;  &amp;lt;?xml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;?&amp;gt;&#xA;  &amp;lt;S:Envelope xmlns:S=&#34;http://schemas.xmlsoap.org/soap/envelope/&#34;&amp;gt;&#xA;  &amp;lt;S:Body&amp;gt;&#xA;  &amp;lt;ns2:QueryUsageBalance xmlns:ns2=&#34;http://www.mycompany.com/usage/V1&#34;&amp;gt;&#xA;      &amp;lt;ns2:UsageBalance&amp;gt;&#xA;          &amp;lt;ns2:LicenseId&amp;gt;12341234&amp;lt;/ns2:LicenseId&amp;gt;&#xA;      &amp;lt;/ns2:UsageBalance&amp;gt;&#xA;  &amp;lt;/ns2:QueryUsageBalance&amp;gt;&#xA;  &amp;lt;/S:Body&amp;gt;&#xA;  &amp;lt;/S:Envelope&amp;gt;&#xA;  &#34;&#34;&#34;&#xA;&#xA;# example of a payload assertion in-line&#xA;Then match response ==&#xA;  &#34;&#34;&#34;&#xA;  { id: { domain: &#34;DOM&#34;, type: &#34;entityId&#34;, value: &#34;#ignore&#34; },&#xA;    created: { on: &#34;#ignore&#34; }, &#xA;    lastUpdated: { on: &#34;#ignore&#34; },&#xA;    entityState: &#34;ACTIVE&#34;&#xA;  }&#xA;  &#34;&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;table&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;A simple way to create JSON Arrays&lt;/h3&gt; &#xA;&lt;p&gt;Now that we have seen how JSON is a &#39;native&#39; data type that Karate understands, there is a very nice way to create JSON using Cucumber&#39;s support for expressing &lt;a href=&#34;http://www.thinkcode.se/blog/2014/06/30/cucumber-data-tables&#34;&gt;data-tables&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* table cats&#xA;  | name   | age |&#xA;  | &#39;Bob&#39;  | 2   |&#xA;  | &#39;Wild&#39; | 4   |&#xA;  | &#39;Nyan&#39; | 3   |&#xA;&#xA;* match cats == [{name: &#39;Bob&#39;, age: 2}, {name: &#39;Wild&#39;, age: 4}, {name: &#39;Nyan&#39;, age: 3}]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match&#34;&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; keyword is explained later, but it should be clear right away how convenient the &lt;code&gt;table&lt;/code&gt; keyword is. JSON can be combined with the ability to &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#data-driven-features&#34;&gt;call other &lt;code&gt;*.feature&lt;/code&gt; files&lt;/a&gt; to achieve dynamic data-driven testing in Karate.&lt;/p&gt; &#xA;&lt;p&gt;Notice that in the above example, string values within the table need to be enclosed in quotes. Otherwise they would be evaluated as expressions - which does come in useful for some dynamic data-driven situations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def one = &#39;hello&#39;&#xA;* def two = { baz: &#39;world&#39; }&#xA;* table json&#xA;  | foo     | bar            |&#xA;  | one     | { baz: 1 }     |&#xA;  | two.baz | [&#39;baz&#39;, &#39;ban&#39;] |&#xA;* match json == [{ foo: &#39;hello&#39;, bar: { baz: 1 } }, { foo: &#39;world&#39;, bar: [&#39;baz&#39;, &#39;ban&#39;] }]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Yes, you can even nest chunks of JSON in tables, and things work as you would expect.&lt;/p&gt; &#xA;&lt;p&gt;Empty cells or expressions that evaluate to &lt;code&gt;null&lt;/code&gt; will result in the key being omitted from the JSON. To force a &lt;code&gt;null&lt;/code&gt; value, wrap it in parentheses:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def one = { baz: null }&#xA;* table json&#xA;  | foo     | bar    |&#xA;  | &#39;hello&#39; |        |&#xA;  | one.baz | (null) |&#xA;  | &#39;world&#39; | null   |&#xA;* match json == [{ foo: &#39;hello&#39; }, { bar: null }, { foo: &#39;world&#39; }]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An alternate way to create data is using the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#set-multiple&#34;&gt;&lt;code&gt;set&lt;/code&gt; multiple&lt;/a&gt; syntax. It is actually a &#39;transpose&#39; of the &lt;code&gt;table&lt;/code&gt; approach, and can be very convenient when there are a large number of keys per row or if the nesting is complex. Here is an example of what is possible:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* set search&#xA;  | path       | 0        | 1      | 2       |&#xA;  | name.first | &#39;John&#39;   | &#39;Jane&#39; |         |&#xA;  | name.last  | &#39;Smith&#39;  | &#39;Doe&#39;  | &#39;Waldo&#39; |&#xA;  | age        | 20       |        |         |&#xA;&#xA;* match search[0] == { name: { first: &#39;John&#39;, last: &#39;Smith&#39; }, age: 20 }&#xA;* match search[1] == { name: { first: &#39;Jane&#39;, last: &#39;Doe&#39; } }&#xA;* match search[2] == { name: { last: &#39;Waldo&#39; } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;text&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Don&#39;t parse, treat as raw text&lt;/h3&gt; &#xA;&lt;p&gt;Not something you would commonly use, but in some cases you need to disable Karate&#39;s default behavior of attempting to parse anything that looks like JSON (or XML) when using &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#multi-line-expressions&#34;&gt;multi-line&lt;/a&gt; / string &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-expressions&#34;&gt;expressions&lt;/a&gt;. This is especially relevant when manipulating &lt;a href=&#34;http://graphql.org&#34;&gt;GraphQL&lt;/a&gt; queries - because although they look suspiciously like JSON, they are not, and tend to confuse Karate&#39;s internals. And as shown in the example below, having text &#39;in-line&#39; is useful especially when you use the &lt;code&gt;Scenario Outline:&lt;/code&gt; and &lt;code&gt;Examples:&lt;/code&gt; for &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#data-driven-tests&#34;&gt;data-driven tests&lt;/a&gt; involving Cucumber-style place-holder substitutions in strings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Scenario Outline:&#xA;  # note the &#39;text&#39; keyword instead of &#39;def&#39;&#xA;  * text query =&#xA;    &#34;&#34;&#34;&#xA;    {&#xA;      hero(name: &#34;&amp;lt;name&amp;gt;&#34;) {&#xA;        height&#xA;        mass&#xA;      }&#xA;    }&#xA;    &#34;&#34;&#34;&#xA;  Given path &#39;graphql&#39;&#xA;  And request { query: &#39;#(query)&#39; }&#xA;  And header Accept = &#39;application/json&#39;&#xA;  When method post&#xA;  Then status 200&#xA;&#xA;  Examples:&#xA;    | name  |&#xA;    | John  |&#xA;    | Smith | &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that if you did not need to inject &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#data-driven-tests&#34;&gt;&lt;code&gt;Examples:&lt;/code&gt;&lt;/a&gt; into &#39;placeholders&#39; enclosed within &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files&#34;&gt;reading from a file&lt;/a&gt; with the extension &lt;code&gt;*.txt&lt;/code&gt; may have been sufficient.&lt;/p&gt; &#xA;&lt;p&gt;For placeholder-substitution, the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#replace&#34;&gt;&lt;code&gt;replace&lt;/code&gt;&lt;/a&gt; keyword can be used instead, but with the advantage that the text can be read from a file or dynamically created.&lt;/p&gt; &#xA;&lt;p&gt;Karate is a great fit for testing GraphQL because of how easy it is to deal with dynamic and deeply nested JSON responses. Refer to this example for more details: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/graphql/graphql.feature&#34;&gt;&lt;code&gt;graphql.feature&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;replace&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Text Placeholder Replacement&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Modifying existing JSON and XML is &lt;strong&gt;natively&lt;/strong&gt; supported by Karate via the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#set&#34;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; keyword, and &lt;code&gt;replace&lt;/code&gt; is primarily intended for dealing with raw strings. But when you deal with complex, nested JSON (or XML) - it may be easier in some cases to use &lt;code&gt;replace&lt;/code&gt;, especially when you want to substitute multiple placeholders with one value, and when you don&#39;t need array manipulation. Since &lt;code&gt;replace&lt;/code&gt; auto-converts the result to a string, make sure you perform &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#type-conversion&#34;&gt;type conversion&lt;/a&gt; back to JSON (or XML) if applicable.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Karate provides an elegant &#39;native-like&#39; experience for placeholder substitution within strings or text content. This is useful in any situation where you need to concatenate dynamic string fragments to form content such as GraphQL or SQL.&lt;/p&gt; &#xA;&lt;p&gt;The placeholder format defaults to angle-brackets, for example: &lt;code&gt;&amp;lt;replaceMe&amp;gt;&lt;/code&gt;. Here is how to replace one placeholder at a time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def text = &#39;hello &amp;lt;foo&amp;gt; world&#39;&#xA;* replace text.foo = &#39;bar&#39;&#xA;* match text == &#39;hello bar world&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Karate makes it really easy to substitute multiple placeholders in a single, readable step as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def text = &#39;hello &amp;lt;one&amp;gt; world &amp;lt;two&amp;gt; bye&#39;&#xA;&#xA;* replace text&#xA;  | token | value   |&#xA;  | one   | &#39;cruel&#39; |&#xA;  | two   | &#39;good&#39;  |&#xA;&#xA;* match text == &#39;hello cruel world good bye&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note how strings have to be enclosed in quotes. This is so that you can mix expressions into text replacements as shown below. This example also shows how you can use a custom placeholder format instead of the default:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def text = &#39;hello &amp;lt;one&amp;gt; world ${two} bye&#39;&#xA;* def first = &#39;cruel&#39;&#xA;* def json = { second: &#39;good&#39; }&#xA;&#xA;* replace text&#xA;    | token  | value       |&#xA;    | one    | first       |&#xA;    | ${two} | json.second |&#xA;&#xA;* match text == &#39;hello cruel world good bye&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Refer to this file for a detailed example: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-junit4/src/test/java/com/intuit/karate/junit4/demos/replace.feature&#34;&gt;&lt;code&gt;replace.feature&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;YAML Files&lt;/h2&gt; &#xA;&lt;p&gt;For those who may prefer &lt;a href=&#34;http://yaml.org&#34;&gt;YAML&lt;/a&gt; as a simpler way to represent data, Karate allows you to read YAML content from a &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files&#34;&gt;file&lt;/a&gt; - and it will be auto-converted into JSON.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;# yaml from a file (the extension matters), and the data-type of &#39;bar&#39; would be JSON&#xA;* def bar = read(&#39;data.yaml&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;yaml&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A very rare need is to be able to convert a string which happens to be in YAML form into JSON, and this can be done via the &lt;code&gt;yaml&lt;/code&gt; type cast keyword. For example - if a response data element or downloaded file is YAML and you need to use the data in subsequent steps. Also see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#type-conversion&#34;&gt;type conversion&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* text foo =&#xA;  &#34;&#34;&#34;&#xA;  name: John&#xA;  input:&#xA;    id: 1&#xA;    subType: &#xA;      name: Smith&#xA;      deleted: false&#xA;  &#34;&#34;&#34;&#xA;# yaml to json type conversion  &#xA;* yaml foo = foo&#xA;* match foo ==&#xA;  &#34;&#34;&#34;&#xA;  {&#xA;    name: &#39;John&#39;,&#xA;    input: { &#xA;      id: 1,&#xA;      subType: { name: &#39;Smith&#39;, deleted: false }    &#xA;    }&#xA;  }&#xA;  &#34;&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;CSV Files&lt;/h2&gt; &#xA;&lt;p&gt;Karate can read &lt;code&gt;*.csv&lt;/code&gt; files and will auto-convert them to JSON. A header row is always expected. See the section on &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files&#34;&gt;reading files&lt;/a&gt; - and also this example &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/outline/dynamic-csv.feature&#34;&gt;&lt;code&gt;dynamic-csv.feature&lt;/code&gt;&lt;/a&gt;, which shows off the convenience of &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#dynamic-scenario-outline&#34;&gt;dynamic &lt;code&gt;Scenario Outline&lt;/code&gt;-s&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In rare cases you may want to use a csv-file as-is and &lt;em&gt;not&lt;/em&gt; auto-convert it to JSON. A good example is when you want to use a CSV file as the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#request&#34;&gt;request-body&lt;/a&gt; for a file-upload. You could get by by renaming the file-extension to say &lt;code&gt;*.txt&lt;/code&gt; but an alternative is to use the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#read-file-as-string&#34;&gt;&lt;code&gt;karate.readAsString()&lt;/code&gt;&lt;/a&gt; API.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;csv&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Just like &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#yaml&#34;&gt;&lt;code&gt;yaml&lt;/code&gt;&lt;/a&gt;, you may occasionally need to &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#type-conversion&#34;&gt;convert a string&lt;/a&gt; which happens to be in CSV form into JSON, and this can be done via the &lt;code&gt;csv&lt;/code&gt; keyword.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* text foo =&#xA;    &#34;&#34;&#34;&#xA;    name,type&#xA;    Billie,LOL&#xA;    Bob,Wild&#xA;    &#34;&#34;&#34;&#xA;* csv bar = foo&#xA;* match bar == [{ name: &#39;Billie&#39;, type: &#39;LOL&#39; }, { name: &#39;Bob&#39;, type: &#39;Wild&#39; }]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;JavaScript Functions&lt;/h2&gt; &#xA;&lt;p&gt;JavaScript Functions are also &#39;native&#39;. And yes, functions can take arguments.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Standard JavaScript syntax rules apply, but the right-hand-side should begin with the &lt;code&gt;function&lt;/code&gt; keyword if declared &lt;em&gt;in-line&lt;/em&gt;. When using stand-alone &lt;code&gt;*.js&lt;/code&gt; files, you can have a comment before the &lt;code&gt;function&lt;/code&gt; keyword, and you can use &lt;code&gt;fn&lt;/code&gt; as the function name, so that your IDE does not complain about JavaScript syntax errors, e.g. &lt;code&gt;function fn(x){ return x + 1 }&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def greeter = function(title, name) { return &#39;hello &#39; + title + &#39; &#39; + name }&#xA;* assert greeter(&#39;Mr.&#39;, &#39;Bob&#39;) == &#39;hello Mr. Bob&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;When JavaScript executes in Karate, the built-in &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#the-karate-object&#34;&gt;&lt;code&gt;karate&lt;/code&gt; object&lt;/a&gt; provides some commonly used utility functions. And with &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-expressions&#34;&gt;Karate expressions&lt;/a&gt;, you can &#34;dive into&#34; JavaScript without needing to define a function - and &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#conditional-logic&#34;&gt;conditional logic&lt;/a&gt; is a good example.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Java Interop&lt;/h3&gt; &#xA;&lt;p&gt;For more complex functions you are better off using the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#multi-line-expressions&#34;&gt;multi-line&lt;/a&gt; &#39;doc-string&#39; approach. This example actually calls into existing Java code, and being able to do this opens up a whole lot of possibilities. The JavaScript interpreter will try to convert types across Java and JavaScript as smartly as possible. For e.g. JSON objects become Java &lt;code&gt;Map&lt;/code&gt;-s, JSON arrays become Java &lt;code&gt;List&lt;/code&gt;-s, and Java Bean properties are accessible (and update-able) using &#39;dot notation&#39; e.g. &#39;&lt;code&gt;object.name&lt;/code&gt;&#39;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def dateStringToLong =&#xA;  &#34;&#34;&#34;&#xA;  function(s) {&#xA;    var SimpleDateFormat = Java.type(&#39;java.text.SimpleDateFormat&#39;);&#xA;    var sdf = new SimpleDateFormat(&#34;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#34;);&#xA;    return sdf.parse(s).time; // &#39;.getTime()&#39; would also have worked instead of &#39;.time&#39;&#xA;  } &#xA;  &#34;&#34;&#34;&#xA;* assert dateStringToLong(&#34;2016-12-24T03:39:21.081+0000&#34;) == 1482550761081&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;More examples of Java interop and how to invoke custom code can be found in the section on &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#calling-java&#34;&gt;Calling Java&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The &lt;code&gt;call&lt;/code&gt; keyword provides an &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#calling-javascript-functions&#34;&gt;alternate way of calling JavaScript functions&lt;/a&gt; that have only one argument. The argument can be provided after the function name, without parentheses, which makes things slightly more readable (and less cluttered) especially when the solitary argument is JSON.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def timeLong = call dateStringToLong &#39;2016-12-24T03:39:21.081+0000&#39;&#xA;* assert timeLong == 1482550761081&#xA;&#xA;# a better example, with a JSON argument&#xA;* def greeter = function(name){ return &#39;Hello &#39; + name.first + &#39; &#39; + name.last + &#39;!&#39; }&#xA;* def greeting = call greeter { first: &#39;John&#39;, last: &#39;Smith&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Reading Files&lt;/h2&gt; &#xA;&lt;p&gt;Karate makes re-use of payload data, utility-functions and even other test-scripts as easy as possible. Teams typically define complicated JSON (or XML) payloads in a file and then re-use this in multiple scripts. Keywords such as &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#set&#34;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#remove&#34;&gt;&lt;code&gt;remove&lt;/code&gt;&lt;/a&gt; allow you to to &#39;tweak&#39; payload-data to fit the scenario under test. You can imagine how this greatly simplifies setting up tests for boundary conditions. And such re-use makes it easier to re-factor tests when needed, which is great for maintainability.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note that the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#set-multiple&#34;&gt;&lt;code&gt;set&lt;/code&gt; (multiple)&lt;/a&gt; keyword can build complex, nested JSON (or XML) from scratch in a data-driven manner, and you may not even need to read from files for many situations. Test data can be within the main flow itself, which makes scripts highly readable.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Reading files is achieved using the built-in JavaScript function called &lt;code&gt;read()&lt;/code&gt;. By default, the file is expected to be in the same folder (package) and side-by-side with the &lt;code&gt;*.feature&lt;/code&gt; file. But you can prefix the name with &lt;code&gt;classpath:&lt;/code&gt; in which case the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#classpath&#34;&gt;&#39;root&#39; folder&lt;/a&gt; would be &lt;code&gt;src/test/java&lt;/code&gt; (assuming you are using the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#folder-structure&#34;&gt;recommended folder structure&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Prefer &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#classpath&#34;&gt;&lt;code&gt;classpath:&lt;/code&gt;&lt;/a&gt; when a file is expected to be heavily re-used all across your project. And yes, relative paths will work.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;# json&#xA;* def someJson = read(&#39;some-json.json&#39;)&#xA;* def moreJson = read(&#39;classpath:more-json.json&#39;)&#xA;&#xA;# xml&#xA;* def someXml = read(&#39;../common/my-xml.xml&#39;)&#xA;&#xA;# import yaml (will be converted to json)&#xA;* def jsonFromYaml = read(&#39;some-data.yaml&#39;)&#xA;&#xA;# csv (will be converted to json)&#xA;* def jsonFromCsv = read(&#39;some-data.csv&#39;)&#xA;&#xA;# string&#xA;* def someString = read(&#39;classpath:messages.txt&#39;)&#xA;&#xA;# javascript (will be evaluated)&#xA;* def someValue = read(&#39;some-js-code.js&#39;)&#xA;&#xA;# if the js file evaluates to a function, it can be re-used later using the &#39;call&#39; keyword&#xA;* def someFunction = read(&#39;classpath:some-reusable-code.js&#39;)&#xA;* def someCallResult = call someFunction&#xA;&#xA;# the following short-cut is also allowed&#xA;* def someCallResult = call read(&#39;some-js-code.js&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#calling-other-feature-files&#34;&gt;re-use other &lt;code&gt;*.feature&lt;/code&gt;&lt;/a&gt; files from test-scripts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;# perfect for all those common authentication or &#39;set up&#39; flows&#xA;* def result = call read(&#39;classpath:some-reusable-steps.feature&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When a &lt;em&gt;called&lt;/em&gt; feature depends on some side-by-side resources such as JSON or JS files, you can use the &lt;code&gt;this:&lt;/code&gt; prefix to ensure that relative paths work correctly - because by default Karate calculates relative paths from the &#34;root&#34; feature or the top-most &#34;caller&#34;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def data = read(&#39;this:payload.json&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If a file does not end in &lt;code&gt;.json&lt;/code&gt;, &lt;code&gt;.xml&lt;/code&gt;, &lt;code&gt;.yaml&lt;/code&gt;, &lt;code&gt;.js&lt;/code&gt;, &lt;code&gt;.csv&lt;/code&gt; or &lt;code&gt;.txt&lt;/code&gt;, it is treated as a stream - which is typically what you would need for &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#multipart-field&#34;&gt;&lt;code&gt;multipart&lt;/code&gt;&lt;/a&gt; file uploads.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def someStream = read(&#39;some-pdf.pdf&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The &lt;code&gt;.graphql&lt;/code&gt; and &lt;code&gt;.gql&lt;/code&gt; extensions are also recognized (for GraphQL) but are handled the same way as &lt;code&gt;.txt&lt;/code&gt; and treated as a string.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;For JSON and XML files, Karate will evaluate any &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#embedded-expressions&#34;&gt;embedded expressions&lt;/a&gt; on load. This enables more concise tests, and the file can be re-usable in multiple, data-driven tests.&lt;/p&gt; &#xA;&lt;p&gt;Since it is internally implemented as a JavaScript function, you can mix calls to &lt;code&gt;read()&lt;/code&gt; freely wherever JavaScript expressions are allowed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def someBigString = read(&#39;first.txt&#39;) + read(&#39;second.txt&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Tip: you can even use JS expressions to dynamically choose a file based on some condition: &lt;code&gt;* def someConfig = read(&#39;my-config-&#39; + someVariable + &#39;.json&#39;)&lt;/code&gt;. Refer to &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#conditional-logic&#34;&gt;conditional logic&lt;/a&gt; for more ideas.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;And a very common need would be to use a file as the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#request&#34;&gt;&lt;code&gt;request&lt;/code&gt;&lt;/a&gt; body:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Given request read(&#39;some-big-payload.json&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or in a &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match&#34;&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;And match response == read(&#39;expected-response-payload.json&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The rarely used &lt;code&gt;file:&lt;/code&gt; prefix is also supported. You could use it for &#39;hard-coded&#39; absolute paths in dev mode, but is obviously not recommended for CI test-suites. A good example of where you may need this is if you programmatically write a file to the &lt;code&gt;target&lt;/code&gt; folder, and then you can read it like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def payload = read(&#39;file:target/large.xml&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To summarize the possible prefixes:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Prefix&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;classpath:&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;relative to the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#classpath&#34;&gt;classpath&lt;/a&gt;, recommended for re-usable features&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;file:&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;do not use this unless you know what you are doing, see above&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;this:&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;when in a &lt;em&gt;called&lt;/em&gt; feature, ensure that files are resolved relative to the current feature file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Take a look at the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo&#34;&gt;Karate Demos&lt;/a&gt; for real-life examples of how you can use files for validating HTTP responses, like this one: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/read/read-files.feature&#34;&gt;&lt;code&gt;read-files.feature&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Read File As String&lt;/h3&gt; &#xA;&lt;p&gt;In some rare cases where you don&#39;t want to auto-convert JSON, XML, YAML or CSV, and just get the raw string content (without having to re-name the file to end with &lt;code&gt;.txt&lt;/code&gt;) - you can use the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-readasstring&#34;&gt;&lt;code&gt;karate.readAsString()&lt;/code&gt;&lt;/a&gt; API. Here is an example of using a CSV file as the request-body:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Given path &#39;upload&#39;&#xA;And header Content-Type = &#39;text/csv&#39;&#xA;And request karate.readAsString(&#39;classpath:my.csv&#39;)&#xA;When method post&#xA;Then status 202&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Type Conversion&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Best practice is to stick to using only &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#def&#34;&gt;&lt;code&gt;def&lt;/code&gt;&lt;/a&gt; unless there is a very good reason to do otherwise.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Internally, Karate will auto-convert JSON (and even XML) to Java &lt;code&gt;Map&lt;/code&gt; objects. And JSON arrays would become Java &lt;code&gt;List&lt;/code&gt;-s. But you will never need to worry about this internal data-representation most of the time.&lt;/p&gt; &#xA;&lt;p&gt;In some rare cases, for e.g. if you acquired a string from some external source, or if you generated JSON (or XML) by concatenating text or using &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#replace&#34;&gt;&lt;code&gt;replace&lt;/code&gt;&lt;/a&gt;, you may want to convert a string to JSON and vice-versa. You can even perform a conversion from XML to JSON if you want.&lt;/p&gt; &#xA;&lt;p&gt;One example of when you may want to convert JSON (or XML) to a string is when you are passing a payload to custom code via &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#calling-java&#34;&gt;Java interop&lt;/a&gt;. Do note that when passing JSON, the default &lt;code&gt;Map&lt;/code&gt; and &lt;code&gt;List&lt;/code&gt; representations should suffice for most needs (&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/java/cats-java.feature&#34;&gt;see example&lt;/a&gt;), and using them would avoid un-necessary string-conversion.&lt;/p&gt; &#xA;&lt;p&gt;So you have the following type markers you can use instead of &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#def&#34;&gt;&lt;code&gt;def&lt;/code&gt;&lt;/a&gt; (or the rarely used &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#text&#34;&gt;&lt;code&gt;text&lt;/code&gt;&lt;/a&gt;). The first four below are best explained in this example file: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-junit4/src/test/java/com/intuit/karate/junit4/demos/type-conv.feature&#34;&gt;&lt;code&gt;type-conv.feature&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a name=&#34;type-string&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/a&gt; - convert JSON or any other data-type (except XML) to a string&lt;/li&gt; &#xA; &lt;li&gt;&lt;a name=&#34;type-json&#34;&gt;&lt;code&gt;json&lt;/code&gt;&lt;/a&gt; - convert XML, a map-like or list-like object, a string, or even a Java object into JSON&lt;/li&gt; &#xA; &lt;li&gt;&lt;a name=&#34;type-xml&#34;&gt;&lt;code&gt;xml&lt;/code&gt;&lt;/a&gt; - convert JSON, a map-like object, a string, or even a Java object into XML&lt;/li&gt; &#xA; &lt;li&gt;&lt;a name=&#34;type-xmlstring&#34;&gt;&lt;code&gt;xmlstring&lt;/code&gt;&lt;/a&gt; - specifically for converting the map-like Karate internal representation of XML into a string&lt;/li&gt; &#xA; &lt;li&gt;&lt;a name=&#34;type-csv&#34;&gt;&lt;code&gt;csv&lt;/code&gt;&lt;/a&gt; - convert a CSV string into JSON, see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#csv&#34;&gt;&lt;code&gt;csv&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a name=&#34;type-yaml&#34;&gt;&lt;code&gt;yaml&lt;/code&gt;&lt;/a&gt; - convert a YAML string into JSON, see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#yaml&#34;&gt;&lt;code&gt;yaml&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a name=&#34;type-bytes&#34;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; - convert to a byte-array, useful for binary payloads or comparisons, see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/websocket/echo.feature&#34;&gt;example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a name=&#34;type-copy&#34;&gt;&lt;code&gt;copy&lt;/code&gt;&lt;/a&gt; - to clone a given payload variable reference (JSON, XML, Map or List), refer: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#copy&#34;&gt;&lt;code&gt;copy&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;csv&lt;/code&gt; and &lt;code&gt;yaml&lt;/code&gt; types can be initialized in-line using the &#34;triple quote&#34; or &#34;docstring&#34; multi-line approach as shown &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/java/com/intuit/karate/core/type-conversion.feature&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to &#39;pretty print&#39; a JSON or XML value with indenting, refer to the documentation of the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#print&#34;&gt;&lt;code&gt;print&lt;/code&gt;&lt;/a&gt; keyword.&lt;/p&gt; &#xA;&lt;h3&gt;Floats and Integers&lt;/h3&gt; &#xA;&lt;p&gt;While converting a number to a string is easy (just concatenate an empty string e.g. &lt;code&gt;myInt + &#39;&#39;&lt;/code&gt;), in some rare cases, you may need to convert a string to a number. You can do this by multiplying by &lt;code&gt;1&lt;/code&gt; or using the built-in JavaScript &lt;code&gt;parseInt()&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def foo = &#39;10&#39;&#xA;* string json = { bar: &#39;#(1 * foo)&#39; }&#xA;* match json == &#39;{&#34;bar&#34;:10.0}&#39;&#xA;&#xA;* string json = { bar: &#39;#(parseInt(foo))&#39; }&#xA;* match json == &#39;{&#34;bar&#34;:10.0}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As per the JSON spec, all numeric values are treated as doubles, so for integers - it really doesn&#39;t matter if there is a decimal point or not. In fact it may be a good idea to slip doubles instead of integers into some of your tests ! Anyway, there are times when you may want to force integers (perhaps for cosmetic reasons) and you can easily do so using the &#39;double-tilde&#39; &lt;a href=&#34;http://rocha.la/JavaScript-bitwise-operators-in-practice&#34;&gt;short-cut: &#39;&lt;code&gt;~~&lt;/code&gt;&#39;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def foo = &#39;10&#39;&#xA;* string json = { bar: &#39;#(~~foo)&#39; }&#xA;* match json == &#39;{&#34;bar&#34;:10}&#39;&#xA;&#xA;# JS math can introduce a decimal point in some cases&#xA;* def foo = 100&#xA;* string json = { bar: &#39;#(foo * 0.1)&#39; }&#xA;* match json == &#39;{&#34;bar&#34;:10.0}&#39;&#xA;&#xA;# but you can easily coerce to an integer if needed&#xA;* string json = { bar: &#39;#(~~(foo * 0.1))&#39; }&#xA;* match json == &#39;{&#34;bar&#34;:10}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Large Numbers&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes when dealing with very large numbers, the JS engine may mangle the number into scientific notation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def big = 123123123123&#xA;* string json = { num: &#39;#(big)&#39; }&#xA;* match json == &#39;{&#34;num&#34;:1.23123123123E11}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can be easily solved by using &lt;code&gt;java.math.BigDecimal&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def big = new java.math.BigDecimal(123123123123)&#xA;* string json = { num: &#39;#(big)&#39; }&#xA;* match json == &#39;{&#34;num&#34;:123123123123}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;doc&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Karate has a built-in HTML templating engine that can be used to insert additional custom HTML into the test-reports. Here is an &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/java/com/intuit/karate/core/users-doc.feature&#34;&gt;example&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* url &#39;https://jsonplaceholder.typicode.com/users&#39;&#xA;* method get&#xA;* doc { read: &#39;users.html&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Any Karate &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#def&#34;&gt;variable&lt;/a&gt; will be available to the template, which is &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/java/com/intuit/karate/core/users.html&#34;&gt;&lt;code&gt;users.html&lt;/code&gt;&lt;/a&gt; in this example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;table class=&#34;table table-striped&#34;&amp;gt;&#xA;  &amp;lt;thead&amp;gt;&#xA;    &amp;lt;tr&amp;gt;&#xA;      &amp;lt;th&amp;gt;ID&amp;lt;/th&amp;gt;&#xA;      &amp;lt;th&amp;gt;Name&amp;lt;/th&amp;gt;&#xA;      &amp;lt;th&amp;gt;E-Mail&amp;lt;/th&amp;gt;&#xA;    &amp;lt;/tr&amp;gt;&#xA;  &amp;lt;/thead&amp;gt;&#xA;  &amp;lt;tbody&amp;gt;&#xA;    &amp;lt;tr th:each=&#34;user: response&#34;&amp;gt;&#xA;      &amp;lt;td th:text=&#34;user.id&#34;&amp;gt;&amp;lt;/td&amp;gt;&#xA;      &amp;lt;td th:text=&#34;user.name&#34;&amp;gt;&amp;lt;/td&amp;gt;&#xA;      &amp;lt;td th:text=&#34;user.email&#34;&amp;gt;&amp;lt;/td&amp;gt;&#xA;    &amp;lt;/tr&amp;gt;&#xA;  &amp;lt;/tbody&amp;gt;&#xA;&amp;lt;/table&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can see what the result looks like &lt;a href=&#34;https://twitter.com/ptrthomas/status/1335478948365443072&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Since templates can be loaded using the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#classpath&#34;&gt;&lt;code&gt;classpath:&lt;/code&gt;&lt;/a&gt; prefix, you can even re-use templates across your projects via &lt;a href=&#34;https://stackoverflow.com/a/58339662/143475&#34;&gt;Java JAR files&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Karate Expressions&lt;/h1&gt; &#xA;&lt;p&gt;Before we get to the HTTP keywords, it is worth doing a recap of the various &#39;shapes&#39; that the right-hand-side of an assignment statement can take:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;   &lt;th&gt;Shape&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;* def foo = &#39;bar&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;JS&lt;/td&gt; &#xA;   &lt;td&gt;simple strings, numbers or booleans&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;* def foo = &#39;bar&#39; + baz[0]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;JS&lt;/td&gt; &#xA;   &lt;td&gt;any valid JavaScript expression, and variables can be mixed in, another example: &lt;code&gt;bar.length + 1&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;* def foo = { bar: &#39;#(baz)&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;JSON&lt;/td&gt; &#xA;   &lt;td&gt;anything that starts with a &lt;code&gt;{&lt;/code&gt; or a &lt;code&gt;[&lt;/code&gt; is parsed as JSON, use &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#text&#34;&gt;&lt;code&gt;text&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#def&#34;&gt;&lt;code&gt;def&lt;/code&gt;&lt;/a&gt; if you need to suppress the default behavior&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;* def foo = ({ bar: baz })&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;JS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#enclosed-javascript&#34;&gt;enclosed JavaScript&lt;/a&gt;, the result of which is exactly equivalent to the above&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;* def foo = &amp;lt;foo&amp;gt;bar&amp;lt;/foo&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;XML&lt;/td&gt; &#xA;   &lt;td&gt;anything that starts with a &lt;code&gt;&amp;lt;&lt;/code&gt; is parsed as XML, use &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#text&#34;&gt;&lt;code&gt;text&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#def&#34;&gt;&lt;code&gt;def&lt;/code&gt;&lt;/a&gt; if you need to suppress the default behavior&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;* def foo = function(arg){ return arg + bar }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;JS Fn&lt;/td&gt; &#xA;   &lt;td&gt;anything that starts with &lt;code&gt;function(...){&lt;/code&gt; is parsed as a JS function.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;* def foo = read(&#39;bar.json&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;JS&lt;/td&gt; &#xA;   &lt;td&gt;using the built-in &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files&#34;&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/a&gt; function&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;* def foo = $.bar[0]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;JsonPath&lt;/td&gt; &#xA;   &lt;td&gt;short-cut JsonPath on the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#response&#34;&gt;&lt;code&gt;response&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;* def foo = /bar/baz&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;XPath&lt;/td&gt; &#xA;   &lt;td&gt;short-cut XPath on the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#response&#34;&gt;&lt;code&gt;response&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;* def foo = get bar $..baz[?(@.ban)]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#get&#34;&gt;&lt;code&gt;get&lt;/code&gt;&lt;/a&gt; JsonPath&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/json-path/JsonPath#path-examples&#34;&gt;JsonPath&lt;/a&gt; on the variable &lt;code&gt;bar&lt;/code&gt;, you can also use &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#get-plus-index&#34;&gt;&lt;code&gt;get[0]&lt;/code&gt;&lt;/a&gt; to get the first item if the JsonPath evaluates to an array - especially useful when using wildcards such as &lt;code&gt;[*]&lt;/code&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#jsonpath-filters&#34;&gt;filter-criteria&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;* def foo = $bar..baz[?(@.ban)]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;$var.JsonPath&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#get-short-cut&#34;&gt;convenience short-cut&lt;/a&gt; for the above&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;* def foo = get bar count(/baz//ban)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#get&#34;&gt;&lt;code&gt;get&lt;/code&gt;&lt;/a&gt; XPath&lt;/td&gt; &#xA;   &lt;td&gt;XPath on the variable &lt;code&gt;bar&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;* def foo = karate.pretty(bar)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;JS&lt;/td&gt; &#xA;   &lt;td&gt;using the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#the-karate-object&#34;&gt;built-in &lt;code&gt;karate&lt;/code&gt; object&lt;/a&gt; in JS expressions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;* def Foo = Java.type(&#39;com.mycompany.Foo&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;JS-Java&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#java-interop&#34;&gt;Java Interop&lt;/a&gt;, and even package-name-spaced one-liners like &lt;code&gt;java.lang.System.currentTimeMillis()&lt;/code&gt; are possible&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;* def foo = call bar { baz: &#39;#(ban)&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#call&#34;&gt;&lt;code&gt;call&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;or &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#callonce&#34;&gt;&lt;code&gt;callonce&lt;/code&gt;&lt;/a&gt;, where expressions like &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files&#34;&gt;&lt;code&gt;read(&#39;foo.js&#39;)&lt;/code&gt;&lt;/a&gt; are allowed as the object to be called or the argument&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;* def foo = bar({ baz: ban })&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;JS&lt;/td&gt; &#xA;   &lt;td&gt;equivalent to the above, JavaScript function invocation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Core Keywords&lt;/h1&gt; &#xA;&lt;p&gt;They are &lt;code&gt;url&lt;/code&gt;, &lt;code&gt;path&lt;/code&gt;, &lt;code&gt;request&lt;/code&gt;, &lt;code&gt;method&lt;/code&gt; and &lt;code&gt;status&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;These are essential HTTP operations, they focus on setting one (un-named or &#39;key-less&#39;) value at a time and therefore don&#39;t need an &lt;code&gt;=&lt;/code&gt; sign in the syntax.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;url&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Given url &#39;https://myhost.com/v1/cats&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A URL remains constant until you use the &lt;code&gt;url&lt;/code&gt; keyword again, so this is a good place to set-up the &#39;non-changing&#39; parts of your REST URL-s.&lt;/p&gt; &#xA;&lt;p&gt;A URL can take expressions, so the approach below is legal. And yes, variables can come from global &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configuration&#34;&gt;config&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Given url &#39;https://&#39; + e2eHostName + &#39;/v1/api&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are trying to build dynamic URLs including query-string parameters in the form: &lt;code&gt;http://myhost/some/path?foo=bar&amp;amp;search=true&lt;/code&gt; - please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#param&#34;&gt;&lt;code&gt;param&lt;/code&gt;&lt;/a&gt; keyword.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;path&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;REST-style path parameters. Can be expressions that will be evaluated. Comma delimited values are supported which can be more convenient, and takes care of URL-encoding and appending &#39;/&#39; between path segments as needed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Given path &#39;documents&#39;, documentId, &#39;download&#39;&#xA;&#xA;# or you can do the same on multiple lines if you wish&#xA;Given path &#39;documents&#39;&#xA;And path documentId&#xA;And path &#39;download&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;path&lt;/code&gt; &#39;resets&#39; after any HTTP request is made but not the &lt;code&gt;url&lt;/code&gt;. The &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#hello-world&#34;&gt;Hello World&lt;/a&gt; is a great example of &#39;REST-ful&#39; use of the &lt;code&gt;url&lt;/code&gt; when the test focuses on a single REST &#39;resource&#39;. Look at how the &lt;code&gt;path&lt;/code&gt; did not need to be specified for the second HTTP &lt;code&gt;get&lt;/code&gt; call since &lt;code&gt;/cats&lt;/code&gt; is part of the &lt;code&gt;url&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Important: If you attempt to build a URL in the form &lt;code&gt;?myparam=value&lt;/code&gt; by using &lt;code&gt;path&lt;/code&gt; the &lt;code&gt;?&lt;/code&gt; will get encoded into &lt;code&gt;%3F&lt;/code&gt;. Use either the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#param&#34;&gt;&lt;code&gt;param&lt;/code&gt;&lt;/a&gt; keyword, e.g.: &lt;code&gt;* param myparam = &#39;value&#39;&lt;/code&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#url&#34;&gt;&lt;code&gt;url&lt;/code&gt;&lt;/a&gt;: &lt;code&gt;* url &#39;http://example.com/v1?myparam&#39;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Because Karate strips trailing slashes if part of a &lt;code&gt;path&lt;/code&gt; parameter, if you want to append a forward-slash to the end of the URL in the final HTTP request - make sure that the last &lt;code&gt;path&lt;/code&gt; is a single &#39;/&#39;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Given path &#39;documents&#39;, documentId, &#39;/&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;request&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;In-line JSON:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Given request { name: &#39;Billie&#39;, type: &#39;LOL&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In-line XML:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;And request &amp;lt;cat&amp;gt;&amp;lt;name&amp;gt;Billie&amp;lt;/name&amp;gt;&amp;lt;type&amp;gt;Ceiling&amp;lt;/type&amp;gt;&amp;lt;/cat&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From a &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files&#34;&gt;file&lt;/a&gt; in the same package. Use the &lt;code&gt;classpath:&lt;/code&gt; prefix to load from the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#classpath&#34;&gt;classpath&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Given request read(&#39;my-json.json&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You could always use a variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;And request myVariable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In most cases you won&#39;t need to set the &lt;code&gt;Content-Type&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#header&#34;&gt;&lt;code&gt;header&lt;/code&gt;&lt;/a&gt; as Karate will automatically do the right thing depending on the data-type of the &lt;code&gt;request&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Defining the &lt;code&gt;request&lt;/code&gt; is mandatory if you are using an HTTP &lt;code&gt;method&lt;/code&gt; that expects a body such as &lt;code&gt;post&lt;/code&gt;. If you really need to have an empty body, you can use an empty string as shown below, and you can force the right &lt;code&gt;Content-Type&lt;/code&gt; header by using the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#header&#34;&gt;&lt;code&gt;header&lt;/code&gt;&lt;/a&gt; keyword.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Given request &#39;&#39;&#xA;And header Content-Type = &#39;text/html&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sending a &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files&#34;&gt;file&lt;/a&gt; as the entire binary request body is easy (note that &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#multipart-file&#34;&gt;&lt;code&gt;multipart&lt;/code&gt;&lt;/a&gt; is different):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Given path &#39;upload&#39;&#xA;And request read(&#39;my-image.jpg&#39;)&#xA;When method put&#xA;Then status 200&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;method&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The HTTP verb - &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;post&lt;/code&gt;, &lt;code&gt;put&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;, &lt;code&gt;patch&lt;/code&gt;, &lt;code&gt;options&lt;/code&gt;, &lt;code&gt;head&lt;/code&gt;, &lt;code&gt;connect&lt;/code&gt;, &lt;code&gt;trace&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Lower-case is fine.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;When method post&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is worth internalizing that during test-execution, it is upon the &lt;code&gt;method&lt;/code&gt; keyword that the actual HTTP request is issued. Which suggests that the step should be in the &lt;code&gt;When&lt;/code&gt; form, for example: &lt;code&gt;When method post&lt;/code&gt;. And steps that follow should logically be in the &lt;code&gt;Then&lt;/code&gt; form. Also make sure that you complete the set up of things like &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#url&#34;&gt;&lt;code&gt;url&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#param&#34;&gt;&lt;code&gt;param&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#header&#34;&gt;&lt;code&gt;header&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configure&#34;&gt;&lt;code&gt;configure&lt;/code&gt;&lt;/a&gt; etc. &lt;em&gt;before&lt;/em&gt; you fire the &lt;code&gt;method&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;# set headers or params (if any) BEFORE the method step&#xA;Given header Accept = &#39;application/json&#39;&#xA;When method get&#xA;# the step that immediately follows the above would typically be:&#xA;Then status 200&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Although rarely needed, variable references or &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-expressions&#34;&gt;expressions&lt;/a&gt; are also supported:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def putOrPost = (someVariable == &#39;dev&#39; ? &#39;put&#39; : &#39;post&#39;)&#xA;* method putOrPost&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;status&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;This is a shortcut to assert the HTTP response code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Then status 200&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And this assertion will cause the test to fail if the HTTP response code is something else.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#responsestatus&#34;&gt;&lt;code&gt;responseStatus&lt;/code&gt;&lt;/a&gt; if you want to do some complex assertions against the HTTP status code.&lt;/p&gt; &#xA;&lt;h1&gt;Keywords that set key-value pairs&lt;/h1&gt; &#xA;&lt;p&gt;They are &lt;code&gt;param&lt;/code&gt;, &lt;code&gt;header&lt;/code&gt;, &lt;code&gt;cookie&lt;/code&gt;, &lt;code&gt;form field&lt;/code&gt; and &lt;code&gt;multipart field&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The syntax will include a &#39;=&#39; sign between the key and the value. The key should not be within quotes.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;To make dynamic data-driven testing easier, the following keywords also exist: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#params&#34;&gt;&lt;code&gt;params&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#headers&#34;&gt;&lt;code&gt;headers&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#cookies-json&#34;&gt;&lt;code&gt;cookies&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#form-fields&#34;&gt;&lt;code&gt;form fields&lt;/code&gt;&lt;/a&gt;. They use JSON to build the relevant parts of the HTTP request.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;&lt;code&gt;param&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Setting query-string parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Given param someKey = &#39;hello&#39;&#xA;And param anotherKey = someVariable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above would result in a URL like: &lt;code&gt;http://myhost/mypath?someKey=hello&amp;amp;anotherKey=foo&lt;/code&gt;. Note that the &lt;code&gt;?&lt;/code&gt; and &lt;code&gt;&amp;amp;&lt;/code&gt; will be automatically inserted.&lt;/p&gt; &#xA;&lt;p&gt;Multi-value params are also supported:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* param myParam = [&#39;foo&#39;, &#39;bar&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For convenience, a &lt;code&gt;null&lt;/code&gt; value will be ignored. You can also use JSON to set multiple query-parameters in one-line using &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#params&#34;&gt;&lt;code&gt;params&lt;/code&gt;&lt;/a&gt; and this is especially useful for dynamic data-driven testing.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;header&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#calling-javascript-functions&#34;&gt;functions&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-expressions&#34;&gt;expressions&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Given header Authorization = myAuthFunction()&#xA;And header transaction-id = &#39;test-&#39; + myIdString&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is worth repeating that in most cases you won&#39;t need to set the &lt;code&gt;Content-Type&lt;/code&gt; header as Karate will automatically do the right thing depending on the data-type of the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#request&#34;&gt;&lt;code&gt;request&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Because of how easy it is to set HTTP headers, Karate does not provide any special keywords for things like the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept&#34;&gt;&lt;code&gt;Accept&lt;/code&gt;&lt;/a&gt; header. You simply do something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Given path &#39;some/path&#39;&#xA;And request { some: &#39;data&#39; }&#xA;And header Accept = &#39;application/json&#39;&#xA;When method post&#xA;Then status 200&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A common need is to send the same header(s) for &lt;em&gt;every&lt;/em&gt; request, and &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configure-headers&#34;&gt;&lt;code&gt;configure headers&lt;/code&gt;&lt;/a&gt; (with JSON) is how you can set this up once for all subsequent requests. And if you do this within a &lt;code&gt;Background:&lt;/code&gt; section, it would apply to all &lt;code&gt;Scenario:&lt;/code&gt; sections within the &lt;code&gt;*.feature&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* configure headers = { &#39;Content-Type&#39;: &#39;application/xml&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;Content-Type&lt;/code&gt; had to be enclosed in quotes in the JSON above because the &#34;&lt;code&gt;-&lt;/code&gt;&#34; (hyphen character) would cause problems otherwise. Also note that &#34;&lt;code&gt;; charset=UTF-8&lt;/code&gt;&#34; would be appended to the &lt;code&gt;Content-Type&lt;/code&gt; header that Karate sends by default, and in some rare cases, you may need to suppress this behavior completely. You can do so by setting the &lt;code&gt;charset&lt;/code&gt; to null via the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configure&#34;&gt;&lt;code&gt;configure&lt;/code&gt;&lt;/a&gt; keyword:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* configure charset = null&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need headers to be dynamically generated for each HTTP request, use a JavaScript function with &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configure-headers&#34;&gt;&lt;code&gt;configure headers&lt;/code&gt;&lt;/a&gt; instead of JSON.&lt;/p&gt; &#xA;&lt;p&gt;Multi-value headers (though rarely used in the wild) are also supported:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* header myHeader = [&#39;foo&#39;, &#39;bar&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also look at the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#headers&#34;&gt;&lt;code&gt;headers&lt;/code&gt;&lt;/a&gt; keyword which uses JSON and makes some kinds of dynamic data-driven testing easier.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;cookie&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Setting a cookie:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Given cookie foo = &#39;bar&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You also have the option of setting multiple cookies in one-step using the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#cookies&#34;&gt;&lt;code&gt;cookies&lt;/code&gt;&lt;/a&gt; keyword.&lt;/p&gt; &#xA;&lt;p&gt;Note that any cookies returned in the HTTP response would be automatically set for any future requests. This mechanism works by calling &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configure&#34;&gt;&lt;code&gt;configure cookies&lt;/code&gt;&lt;/a&gt; behind the scenes and if you need to stop auto-adding cookies for future requests, just do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* configure cookies = null&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also refer to the built-in variable &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#responsecookies&#34;&gt;&lt;code&gt;responseCookies&lt;/code&gt;&lt;/a&gt; for how you can access and perform assertions on cookie data values.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;form field&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;HTML form fields would be URL-encoded when the HTTP request is submitted (by the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#method&#34;&gt;&lt;code&gt;method&lt;/code&gt;&lt;/a&gt; step). You would typically use these to simulate a user sign-in and then grab a security token from the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#response&#34;&gt;&lt;code&gt;response&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;Content-Type&lt;/code&gt; header will be automatically set to: &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;. You just need to do a normal &lt;code&gt;POST&lt;/code&gt; (or &lt;code&gt;GET&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Given path &#39;login&#39;&#xA;And form field username = &#39;john&#39;&#xA;And form field password = &#39;secret&#39;&#xA;When method post&#xA;Then status 200&#xA;And def authToken = response.token&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A good example of the use of &lt;code&gt;form field&lt;/code&gt; for a typical sign-in flow is this OAuth 2 demo: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/oauth/oauth2.feature&#34;&gt;&lt;code&gt;oauth2.feature&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Multi-values are supported the way you would expect (e.g. for simulating check-boxes and multi-selects):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* form field selected = [&#39;apple&#39;, &#39;orange&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also dynamically set multiple fields in one step using the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#form-fields&#34;&gt;&lt;code&gt;form fields&lt;/code&gt;&lt;/a&gt; keyword.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;multipart field&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Use this for building multipart named (form) field requests. This is typically combined with &lt;code&gt;multipart file&lt;/code&gt; as shown below.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Multiple fields can be set in one step using &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#multipart-fields&#34;&gt;&lt;code&gt;multipart fields&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;&lt;code&gt;multipart file&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Given multipart file myFile = { read: &#39;test.pdf&#39;, filename: &#39;upload-name.pdf&#39;, contentType: &#39;application/pdf&#39; }&#xA;And multipart field message = &#39;hello world&#39;&#xA;When method post&#xA;Then status 200&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is important to note that &lt;code&gt;myFile&lt;/code&gt; above is the &#34;field name&#34; within the &lt;code&gt;multipart/form-data&lt;/code&gt; request payload. This roughly corresponds to a &lt;a href=&#34;https://curl.haxx.se/docs/manpage.html#-F&#34;&gt;&lt;code&gt;cURL&lt;/code&gt;&lt;/a&gt; argument of &lt;code&gt;-F @myFile=test.pdf&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;multipart&lt;/code&gt; file uploads can be tricky, and hard to get right. If you get stuck and ask a question on &lt;a href=&#34;https://stackoverflow.com/questions/tagged/karate&#34;&gt;Stack Overflow&lt;/a&gt;, make sure you provide a &lt;code&gt;cURL&lt;/code&gt; command that works - or else it would be very difficult for anyone to troubleshoot what you could be doing wrong. Also see &lt;a href=&#34;https://github.com/intuit/karate/issues/1645#issuecomment-862502881&#34;&gt;this thread&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Also note that &lt;code&gt;multipart file&lt;/code&gt; takes a JSON argument so that you can easily set the &lt;code&gt;filename&lt;/code&gt; and the &lt;code&gt;contentType&lt;/code&gt; (mime-type) in one step.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;read&lt;/code&gt;: the name of a file, and the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files&#34;&gt;&lt;code&gt;classpath:&lt;/code&gt;&lt;/a&gt; prefix also is allowed. mandatory unless &lt;code&gt;value&lt;/code&gt; is used, see below.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;value&lt;/code&gt;: alternative to &lt;code&gt;read&lt;/code&gt; in rare cases where something like a JSON or XML file is being uploaded and you want to create it dynamically.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;filename&lt;/code&gt;: optional, if not specified there will be no &lt;code&gt;filename&lt;/code&gt; attribute in &lt;code&gt;Content-Disposition&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;contentType&lt;/code&gt;: optional, will default to &lt;code&gt;application/octet-stream&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When &#39;multipart&#39; content is involved, the &lt;code&gt;Content-Type&lt;/code&gt; header of the HTTP request defaults to &lt;code&gt;multipart/form-data&lt;/code&gt;. You can over-ride it by using the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#header&#34;&gt;&lt;code&gt;header&lt;/code&gt;&lt;/a&gt; keyword before the &lt;code&gt;method&lt;/code&gt; step. Look at &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#multipart-entity&#34;&gt;&lt;code&gt;multipart entity&lt;/code&gt;&lt;/a&gt; for an example.&lt;/p&gt; &#xA;&lt;p&gt;Also refer to this &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo&#34;&gt;demo example&lt;/a&gt; for a working example of multipart file uploads: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/upload/upload.feature&#34;&gt;&lt;code&gt;upload.feature&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also dynamically set multiple files in one step using &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#multipart-files&#34;&gt;&lt;code&gt;multipart files&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;multipart entity&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This is technically not in the key-value form: &lt;code&gt;multipart field name = &#39;foo&#39;&lt;/code&gt;, but logically belongs here in the documentation.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Use this for multipart content items that don&#39;t have field-names. Here below is an example that also demonstrates using the &lt;a href=&#34;https://tools.ietf.org/html/rfc2387&#34;&gt;&lt;code&gt;multipart/related&lt;/code&gt;&lt;/a&gt; content-type.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Given path &#39;v2&#39;, &#39;documents&#39;&#xA;And multipart entity read(&#39;foo.json&#39;)&#xA;And multipart field image = read(&#39;bar.jpg&#39;)&#xA;And header Content-Type = &#39;multipart/related&#39;&#xA;When method post &#xA;Then status 201&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Multi-Param Keywords&lt;/h1&gt; &#xA;&lt;h2&gt;Keywords that set multiple key-value pairs in one step&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;params&lt;/code&gt;, &lt;code&gt;headers&lt;/code&gt;, &lt;code&gt;cookies&lt;/code&gt;, &lt;code&gt;form fields&lt;/code&gt;, &lt;code&gt;multipart fields&lt;/code&gt; and &lt;code&gt;multipart files&lt;/code&gt; take a single JSON argument (which can be in-line or a variable reference), and this enables certain types of dynamic data-driven testing, especially because any JSON key with a &lt;code&gt;null&lt;/code&gt; value will be ignored. Here is a good example in the demos: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/search/dynamic-params.feature&#34;&gt;&lt;code&gt;dynamic-params.feature&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;params&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* params { searchBy: &#39;client&#39;, active: true, someList: [1, 2, 3] }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#param&#34;&gt;&lt;code&gt;param&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;headers&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def someData = { Authorization: &#39;sometoken&#39;, tx_id: &#39;1234&#39;, extraTokens: [&#39;abc&#39;, &#39;def&#39;] }&#xA;* headers someData&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#header&#34;&gt;&lt;code&gt;header&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;cookies&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* cookies { someKey: &#39;someValue&#39;, foo: &#39;bar&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#cookie&#34;&gt;&lt;code&gt;cookie&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;form fields&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def credentials = { username: &#39;#(user.name)&#39;, password: &#39;secret&#39;, projects: [&#39;one&#39;, &#39;two&#39;] }&#xA;* form fields credentials&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#form-field&#34;&gt;&lt;code&gt;form field&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;multipart fields&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;And multipart fields { message: &#39;hello world&#39;, json: { foo: &#39;bar&#39; } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#multipart-field&#34;&gt;&lt;code&gt;multipart field&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;multipart files&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The single JSON argument needs to be in the form &lt;code&gt;{ field1: { read: &#39;file1.ext&#39; }, field2: { read: &#39;file2.ext&#39; } }&lt;/code&gt; where each nested JSON is in the form expected by &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#multipart-file&#34;&gt;&lt;code&gt;multipart file&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def json = {}&#xA;* set json.myFile1 = { read: &#39;test1.pdf&#39;, filename: &#39;upload-name1.pdf&#39;, contentType: &#39;application/pdf&#39; }&#xA;# if you have dynamic keys you can do this&#xA;* def key = &#39;myFile2&#39;&#xA;* json[key] = { read: &#39;test2.pdf&#39;, filename: &#39;upload-name2.pdf&#39;, contentType: &#39;application/pdf&#39; }&#xA;And multipart files json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;SOAP&lt;/h1&gt; &#xA;&lt;p&gt;Since a SOAP request needs special handling, this is the only case where the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#method&#34;&gt;&lt;code&gt;method&lt;/code&gt;&lt;/a&gt; step is not used to actually fire the request to the server.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;soap action&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The name of the SOAP action specified is used as the &#39;SOAPAction&#39; header. Here is an example which also demonstrates how you could assert for expected values in the response XML.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Given request read(&#39;soap-request.xml&#39;)&#xA;When soap action &#39;QueryUsageBalance&#39;&#xA;Then status 200&#xA;And match response /Envelope/Body/QueryUsageBalanceResponse/Result/Error/Code == &#39;DAT_USAGE_1003&#39;&#xA;And match response /Envelope/Body/QueryUsageBalanceResponse == read(&#39;expected-response.xml&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-junit4/src/test/java/com/intuit/karate/junit4/demos/soap.feature&#34;&gt;working example&lt;/a&gt; of calling a SOAP service can be found within the Karate project test-suite. Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo&#34;&gt;demos&lt;/a&gt; for another example: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/soap/soap.feature&#34;&gt;&lt;code&gt;soap.feature&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;More examples are available that showcase various ways of parameter-izing and dynamically manipulating SOAP requests in a data-driven fashion. Karate is quite flexible, and provides multiple options for you to evolve patterns that fit your environment, as you can see here: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-junit4/src/test/java/com/intuit/karate/junit4/xml/xml.feature&#34;&gt;&lt;code&gt;xml.feature&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;retry until&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Karate has built-in support for re-trying an HTTP request until a certain condition has been met. The default setting for the max retry-attempts is 3 with a poll interval of 3000 milliseconds (3 seconds). If needed, this can be changed by using &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configure&#34;&gt;&lt;code&gt;configure&lt;/code&gt;&lt;/a&gt; - any time during a test, or set globally via &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configuration&#34;&gt;&lt;code&gt;karate-config.js&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* configure retry = { count: 10, interval: 5000 }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;retry&lt;/code&gt; keyword is designed to extend the existing &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#method&#34;&gt;&lt;code&gt;method&lt;/code&gt;&lt;/a&gt; syntax (and should appear &lt;strong&gt;before&lt;/strong&gt; a &lt;code&gt;method&lt;/code&gt; step) like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Given url demoBaseUrl&#xA;And path &#39;greeting&#39;&#xA;And retry until response.id &amp;gt; 3&#xA;When method get&#xA;Then status 200&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Any JavaScript expression that uses any variable in scope can be placed after the &#34;&lt;code&gt;retry until&lt;/code&gt;&#34; part. So you can refer to the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#response&#34;&gt;&lt;code&gt;response&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#responsestatus&#34;&gt;&lt;code&gt;responseStatus&lt;/code&gt;&lt;/a&gt; or even &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#responseheaders&#34;&gt;&lt;code&gt;responseHeaders&lt;/code&gt;&lt;/a&gt; if needed. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Given url demoBaseUrl&#xA;And path &#39;greeting&#39;&#xA;And retry until responseStatus == 200 &amp;amp;&amp;amp; response.id &amp;gt; 3&#xA;When method get&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note that it has to be a pure JavaScript expression - which means that &lt;code&gt;match&lt;/code&gt; syntax such as &lt;code&gt;contains&lt;/code&gt; will &lt;em&gt;not&lt;/em&gt; work. But you can easily achieve any complex logic by &lt;a href=&#34;https://stackoverflow.com/a/55823180/143475&#34;&gt;using the JS API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Refer to &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/polling/polling.feature&#34;&gt;&lt;code&gt;polling.feature&lt;/code&gt;&lt;/a&gt; for an example, and also see the alternative way to achieve &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#polling&#34;&gt;polling&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;&lt;code&gt;configure&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;Managing Headers, SSL, Timeouts and HTTP Proxy&lt;/h2&gt; &#xA;&lt;p&gt;You can adjust configuration settings for the HTTP client used by Karate using this keyword. The syntax is similar to &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#def&#34;&gt;&lt;code&gt;def&lt;/code&gt;&lt;/a&gt; but instead of a named variable, you update configuration. Here are the configuration keys supported:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Key&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;headers&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;JSON / JS function&lt;/td&gt; &#xA;   &lt;td&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configure-headers&#34;&gt;&lt;code&gt;configure headers&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cookies&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;JSON / JS function&lt;/td&gt; &#xA;   &lt;td&gt;Just like &lt;code&gt;configure headers&lt;/code&gt;, but for cookies. You will typically never use this, as response cookies are auto-added to all future requests. If you need to clear cookies at any time, just do &lt;code&gt;configure cookies = null&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;logPrettyRequest&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;Pretty print the request payload JSON or XML with indenting (default &lt;code&gt;false&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;logPrettyResponse&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;Pretty print the response payload JSON or XML with indenting (default &lt;code&gt;false&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;printEnabled&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;Can be used to suppress the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#print&#34;&gt;&lt;code&gt;print&lt;/code&gt;&lt;/a&gt; output when not in &#39;dev mode&#39; by setting as &lt;code&gt;false&lt;/code&gt; (default &lt;code&gt;true&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;report&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;JSON / boolean&lt;/td&gt; &#xA;   &lt;td&gt;see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#report-verbosity&#34;&gt;report verbosity&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;afterScenario&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;JS function&lt;/td&gt; &#xA;   &lt;td&gt;Will be called &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#hooks&#34;&gt;after every &lt;code&gt;Scenario&lt;/code&gt;&lt;/a&gt; (or &lt;code&gt;Example&lt;/code&gt; within a &lt;code&gt;Scenario Outline&lt;/code&gt;), refer to this example: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/hooks/hooks.feature&#34;&gt;&lt;code&gt;hooks.feature&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;afterFeature&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;JS function&lt;/td&gt; &#xA;   &lt;td&gt;Will be called &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#hooks&#34;&gt;after every &lt;code&gt;Feature&lt;/code&gt;&lt;/a&gt;, refer to this example: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/hooks/hooks.feature&#34;&gt;&lt;code&gt;hooks.feature&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ssl&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;Enable HTTPS calls without needing to configure a trusted certificate or key-store.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ssl&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Like above, but force the SSL algorithm to one of &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#SSLContext&#34;&gt;these values&lt;/a&gt;. (The above form internally defaults to &lt;code&gt;TLS&lt;/code&gt; if simply set to &lt;code&gt;true&lt;/code&gt;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ssl&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;JSON&lt;/td&gt; &#xA;   &lt;td&gt;see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#x509-certificate-authentication&#34;&gt;X509 certificate authentication&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;followRedirects&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;Whether the HTTP client automatically follows redirects - (default &lt;code&gt;true&lt;/code&gt;), refer to this &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/redirect/redirect.feature&#34;&gt;example&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;connectTimeout&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;integer&lt;/td&gt; &#xA;   &lt;td&gt;Set the connect timeout (milliseconds). The default is 30000 (30 seconds). Note that for &lt;code&gt;karate-apache&lt;/code&gt;, this sets the &lt;a href=&#34;https://stackoverflow.com/a/22722260/143475&#34;&gt;socket timeout&lt;/a&gt; to the same value as well.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;readTimeout&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;integer&lt;/td&gt; &#xA;   &lt;td&gt;Set the read timeout (milliseconds). The default is 30000 (30 seconds).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;proxy&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Set the URI of the HTTP proxy to use.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;proxy&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;JSON&lt;/td&gt; &#xA;   &lt;td&gt;For a proxy that requires authentication, set the &lt;code&gt;uri&lt;/code&gt;, &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt;, see example below. Also a &lt;code&gt;nonProxyHosts&lt;/code&gt; key is supported which can take a list for e.g. &lt;code&gt;{ uri: &#39;http://my.proxy.host:8080&#39;, nonProxyHosts: [&#39;host1&#39;, &#39;host2&#39;]}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;localAddress&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-gatling#configure-localaddress&#34;&gt;&lt;code&gt;karate-gatling&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;charset&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;The charset that will be sent in the request &lt;code&gt;Content-Type&lt;/code&gt; which defaults to &lt;code&gt;utf-8&lt;/code&gt;. You typically never need to change this, and you can over-ride (or disable) this per-request if needed via the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#header&#34;&gt;&lt;code&gt;header&lt;/code&gt;&lt;/a&gt; keyword (&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/headers/content-type.feature&#34;&gt;example&lt;/a&gt;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;retry&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;JSON&lt;/td&gt; &#xA;   &lt;td&gt;defaults to &lt;code&gt;{ count: 3, interval: 3000 }&lt;/code&gt; - see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#retry-until&#34;&gt;&lt;code&gt;retry until&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;callSingleCache&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;JSON&lt;/td&gt; &#xA;   &lt;td&gt;defaults to &lt;code&gt;{ minutes: 0, dir: &#39;target&#39; }&lt;/code&gt; - see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configure-callsinglecache&#34;&gt;&lt;code&gt;configure callSingleCache&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lowerCaseResponseHeaders&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;Converts every key in the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#responseheaders&#34;&gt;&lt;code&gt;responseHeaders&lt;/code&gt;&lt;/a&gt; to lower-case which makes it easier to validate or re-use&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;abortedStepsShouldPass&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;defaults to &lt;code&gt;false&lt;/code&gt;, whether steps after a &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-abort&#34;&gt;&lt;code&gt;karate.abort()&lt;/code&gt;&lt;/a&gt; should be marked as &lt;code&gt;PASSED&lt;/code&gt; instead of &lt;code&gt;SKIPPED&lt;/code&gt; - this can impact the behavior of 3rd-party reports, see &lt;a href=&#34;https://github.com/intuit/karate/issues/755&#34;&gt;this issue&lt;/a&gt; for details&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;logModifier&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Java Object&lt;/td&gt; &#xA;   &lt;td&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#log-masking&#34;&gt;Log Masking&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;responseHeaders&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;JSON / JS function&lt;/td&gt; &#xA;   &lt;td&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-netty#configure-responseheaders&#34;&gt;&lt;code&gt;karate-netty&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cors&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-netty#configure-cors&#34;&gt;&lt;code&gt;karate-netty&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;driver&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;JSON&lt;/td&gt; &#xA;   &lt;td&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-core&#34;&gt;UI Automation&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;driverTarget&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;JSON / Java Object&lt;/td&gt; &#xA;   &lt;td&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-core#configure-drivertarget&#34;&gt;&lt;code&gt;configure driverTarget&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;pauseIfNotPerf&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;defaults to &lt;code&gt;false&lt;/code&gt;, relevant only for performance-testing, see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-pause&#34;&gt;&lt;code&gt;karate.pause()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-gatling#think-time&#34;&gt;&lt;code&gt;karate-gatling&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;xmlNamespaceAware&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;defaults to &lt;code&gt;false&lt;/code&gt;, to handle XML namespaces in &lt;a href=&#34;https://github.com/karatelabs/karate/issues/1587&#34;&gt;some special circumstances&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;# pretty print the response payload&#xA;* configure logPrettyResponse = true&#xA;&#xA;# enable ssl (and no certificate is required)&#xA;* configure ssl = true&#xA;&#xA;# enable ssl and force the algorithm to TLSv1.2&#xA;* configure ssl = &#39;TLSv1.2&#39;&#xA;&#xA;# time-out if the response is not received within 10 seconds (after the connection is established)&#xA;* configure readTimeout = 10000&#xA;&#xA;# set the uri of the http proxy server to use&#xA;* configure proxy = &#39;http://my.proxy.host:8080&#39;&#xA;&#xA;# proxy which needs authentication&#xA;* configure proxy = { uri: &#39;http://my.proxy.host:8080&#39;, username: &#39;john&#39;, password: &#39;secret&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;configure&lt;/code&gt; globally&lt;/h2&gt; &#xA;&lt;p&gt;If you need to set any of these &#34;globally&#34; you can easily do so using &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#the-karate-object&#34;&gt;the &lt;code&gt;karate&lt;/code&gt; object&lt;/a&gt; in &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configuration&#34;&gt;&lt;code&gt;karate-config.js&lt;/code&gt;&lt;/a&gt; - for e.g:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;  karate.configure(&#39;ssl&#39;, true);&#xA;  karate.configure(&#39;readTimeout&#39;, 5000);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In rare cases where you need to add nested non-JSON data to the &lt;code&gt;configure&lt;/code&gt; value, you have to play by the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#restrictions-on-global-variables&#34;&gt;rules&lt;/a&gt; that apply within &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-configjs&#34;&gt;&lt;code&gt;karate-config.js&lt;/code&gt;&lt;/a&gt;. Here is an example of performing a &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-core#configure-driver&#34;&gt;&lt;code&gt;configure driver&lt;/code&gt;&lt;/a&gt; step in JavaScript:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;  var LM = Java.type(&#39;com.mycompany.MyHttpLogModifier&#39;);&#xA;  var driverConfig = { type:&#39;chromedriver&#39;, start: false, webDriverUrl:&#39;https://user:password@zalenium.net/wd/hub&#39; };&#xA;  driverConfig.httpConfig = karate.toMap({ logModifier: LM.INSTANCE });&#xA;  karate.configure(&#39;driver&#39;, driverConfig);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Report Verbosity&lt;/h3&gt; &#xA;&lt;p&gt;By default, Karate will add logs to the report output so that HTTP requests and responses appear in-line in the HTML reports. There may be cases where you want to suppress this to make the reports &#34;lighter&#34; and easier to read.&lt;/p&gt; &#xA;&lt;p&gt;The configure key here is &lt;code&gt;report&lt;/code&gt; and it takes a JSON value. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* configure report = { showLog: true, showAllSteps: false }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;code&gt;report&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;showLog&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;HTTP requests and responses (including headers) will appear in the HTML report, default &lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;showAllSteps&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;If &lt;code&gt;false&lt;/code&gt;, any step that starts with &lt;code&gt;*&lt;/code&gt; instead of &lt;code&gt;Given&lt;/code&gt;, &lt;code&gt;When&lt;/code&gt;, &lt;code&gt;Then&lt;/code&gt; etc. will &lt;em&gt;not&lt;/em&gt; appear in the HTML report. The &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#print&#34;&gt;&lt;code&gt;print&lt;/code&gt;&lt;/a&gt; step is an exception. Default &lt;code&gt;true&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;You can &#39;reset&#39; default settings by using the following short-cut:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;# reset to defaults&#xA;* configure report = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since you can use &lt;code&gt;configure&lt;/code&gt; any time within a test, you have control over which requests or steps you want to show / hide. This can be convenient if a particular call results in a huge response payload.&lt;/p&gt; &#xA;&lt;p&gt;The following short-cut is also supported which will disable all logs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* configure report = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;@report=false&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;When you use a re-usable feature that has &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/multiple-functions-in-one-file&#34;&gt;commonly used utilities&lt;/a&gt;, you may want to hide this completely from the HTML reports. The special &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#tags&#34;&gt;tag&lt;/a&gt; &lt;code&gt;@report=false&lt;/code&gt; can be used, and it can even be used only for a single &lt;code&gt;Scenario&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;@ignore @report=false&#xA;Feature:&#xA;&#xA;Scenario:&#xA;# some re-usable steps&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Log Masking&lt;/h3&gt; &#xA;&lt;p&gt;In cases where you want to &#34;mask&#34; values which are sensitive from a security point of view from the output files, logs and HTML reports, you can implement the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/main/java/com/intuit/karate/http/HttpLogModifier.java&#34;&gt;&lt;code&gt;HttpLogModifier&lt;/code&gt;&lt;/a&gt; and tell Karate to use it via the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configure&#34;&gt;&lt;code&gt;configure&lt;/code&gt;&lt;/a&gt; keyword. Here is an &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/headers/DemoLogModifier.java&#34;&gt;example&lt;/a&gt; of an implementation. For performance reasons, you can implement &lt;code&gt;enableForUri()&lt;/code&gt; so that this &#34;activates&#34; only for some URL patterns.&lt;/p&gt; &#xA;&lt;p&gt;Instantiating a Java class and using this in a test is easy (see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/headers/headers-masking.feature&#34;&gt;example&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;# if this was in karate-config.js, it would apply &#34;globally&#34;&#xA;* def LM = Java.type(&#39;demo.headers.DemoLogModifier&#39;)&#xA;* configure logModifier = new LM()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or globally in &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-configjs&#34;&gt;&lt;code&gt;karate-config.js&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var LM = Java.type(&#39;demo.headers.DemoLogModifier&#39;);&#xA;karate.configure(&#39;logModifier&#39;, new LM());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since &lt;code&gt;karate-config.js&lt;/code&gt; is processed for every &lt;code&gt;Scenario&lt;/code&gt;, you can use a singleton instead of calling &lt;code&gt;new&lt;/code&gt; every time. Something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var LM = Java.type(&#39;demo.headers.DemoLogModifier&#39;);&#xA;karate.configure(&#39;logModifier&#39;, LM.INSTANCE);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;System Properties for SSL and HTTP proxy&lt;/h3&gt; &#xA;&lt;p&gt;For HTTPS / SSL, you can also specify a custom certificate or trust store by &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/technotes/guides/security/jsse/JSSERefGuide.html#InstallationAndCustomization&#34;&gt;setting Java system properties&lt;/a&gt;. And similarly - for &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/technotes/guides/net/proxies.html&#34;&gt;specifying the HTTP proxy&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;X509 Certificate Authentication&lt;/h3&gt; &#xA;&lt;p&gt;Also referred to as &#34;mutual auth&#34; - if your API requires that clients present an X509 certificate for authentication, Karate supports this via JSON as the &lt;code&gt;configure ssl&lt;/code&gt; value. The following parameters are supported:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Key&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Required?&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;keyStore&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;optional&lt;/td&gt; &#xA;   &lt;td&gt;path to file containing public and private keys for your client certificate.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;keyStorePassword&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;optional&lt;/td&gt; &#xA;   &lt;td&gt;password for keyStore file.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;keyStoreType&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;optional&lt;/td&gt; &#xA;   &lt;td&gt;Format of the keyStore file. Allowed keystore types are as described in the &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#KeyStore&#34;&gt;Java &lt;code&gt;KeyStore&lt;/code&gt; docs&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;trustStore&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;optional&lt;/td&gt; &#xA;   &lt;td&gt;path to file containing the trust chain for your server certificate.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;trustStorePassword&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;optional&lt;/td&gt; &#xA;   &lt;td&gt;password for trustStore file.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;trustStoreType&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;optional&lt;/td&gt; &#xA;   &lt;td&gt;Format of the trustStore file. Allowed keystore types are as described in the &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#KeyStore&#34;&gt;Java &lt;code&gt;KeyStore&lt;/code&gt; docs&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;trustAll&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;optional&lt;/td&gt; &#xA;   &lt;td&gt;if all server certificates should be considered trusted. Default value is &lt;code&gt;false&lt;/code&gt;. If &lt;code&gt;true&lt;/code&gt; will allow self-signed certificates. If &lt;code&gt;false&lt;/code&gt;, will expect the whole chain in the &lt;code&gt;trustStore&lt;/code&gt; or use what is available in the environment.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;algorithm&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;optional&lt;/td&gt; &#xA;   &lt;td&gt;force the SSL algorithm to one of &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#SSLContext&#34;&gt;these values&lt;/a&gt;. Default is &lt;code&gt;TLS&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;# enable X509 certificate authentication with PKCS12 file &#39;certstore.pfx&#39; and password &#39;certpassword&#39;&#xA;* configure ssl = { keyStore: &#39;classpath:certstore.pfx&#39;, keyStorePassword: &#39;certpassword&#39;, keyStoreType: &#39;pkcs12&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;# trust all server certificates, in the feature file&#xA;* configure ssl = { trustAll: true }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// trust all server certificates, global configuration in &#39;karate-config.js&#39;&#xA;karate.configure(&#39;ssl&#39;, { trustAll: true });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For end-to-end examples in the Karate demos, look at the files in &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/ssl&#34;&gt;this folder&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Payload Assertions&lt;/h1&gt; &#xA;&lt;h2&gt;Prepare, Mutate, Assert.&lt;/h2&gt; &#xA;&lt;p&gt;Now it should be clear how Karate makes it easy to express JSON or XML. If you &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files&#34;&gt;read from a file&lt;/a&gt;, the advantage is that multiple scripts can re-use the same data.&lt;/p&gt; &#xA;&lt;p&gt;Once you have a &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#native-data-types&#34;&gt;JSON or XML object&lt;/a&gt;, Karate provides multiple ways to manipulate, extract or transform data. And you can easily assert that the data is as expected by comparing it with another JSON or XML object.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;match&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Payload Assertions / Smart Comparison&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;match&lt;/code&gt; operation is smart because white-space does not matter, and the order of keys (or data elements) does not matter. Karate is even able to &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#ignore-or-validate&#34;&gt;ignore fields you choose&lt;/a&gt; - which is very useful when you want to handle server-side dynamically generated fields such as UUID-s, time-stamps, security-tokens and the like.&lt;/p&gt; &#xA;&lt;p&gt;The match syntax involves a double-equals sign &#39;==&#39; to represent a comparison (and not an assignment &#39;=&#39;).&lt;/p&gt; &#xA;&lt;p&gt;Since &lt;code&gt;match&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; go well together, they are both introduced in the examples in the section below.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;set&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Game, &lt;code&gt;set&lt;/code&gt; and &lt;code&gt;match&lt;/code&gt; - Karate !&lt;/p&gt; &#xA;&lt;h3&gt;JS for JSON&lt;/h3&gt; &#xA;&lt;p&gt;Before you consider the &lt;code&gt;set&lt;/code&gt; keyword - note that for simple JSON update operations, you can use &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#eval&#34;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; - especially useful when the path you are trying to mutate is dynamic. Since the &lt;code&gt;eval&lt;/code&gt; keyword can be omitted when operating on variables using JavaScript, this leads to very concise code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def myJson = { a: &#39;1&#39; }&#xA;* myJson.b = 2&#xA;* match myJson == { a: &#39;1&#39;, b: 2 }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Refer to &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#eval&#34;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; for more / advanced examples.&lt;/p&gt; &#xA;&lt;h3&gt;Manipulating Data&lt;/h3&gt; &#xA;&lt;p&gt;Setting values on JSON documents is simple using the &lt;code&gt;set&lt;/code&gt; keyword.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def myJson = { foo: &#39;bar&#39; }&#xA;* set myJson.foo = &#39;world&#39;&#xA;* match myJson == { foo: &#39;world&#39; }&#xA;&#xA;# add new keys.  you can use pure JsonPath expressions (notice how this is different from the above)&#xA;* set myJson $.hey = &#39;ho&#39;&#xA;* match myJson == { foo: &#39;world&#39;, hey: &#39;ho&#39; }&#xA;&#xA;# and even append to json arrays (or create them automatically)&#xA;* set myJson.zee[0] = 5&#xA;* match myJson == { foo: &#39;world&#39;, hey: &#39;ho&#39;, zee: [5] }&#xA;&#xA;# omit the array index to append&#xA;* set myJson.zee[] = 6&#xA;* match myJson == { foo: &#39;world&#39;, hey: &#39;ho&#39;, zee: [5, 6] }&#xA;&#xA;# nested json ? no problem&#xA;* set myJson.cat = { name: &#39;Billie&#39; }&#xA;* match myJson == { foo: &#39;world&#39;, hey: &#39;ho&#39;, zee: [5, 6], cat: { name: &#39;Billie&#39; } }&#xA;&#xA;# and for match - the order of keys does not matter&#xA;* match myJson == { cat: { name: &#39;Billie&#39; }, hey: &#39;ho&#39;, foo: &#39;world&#39;, zee: [5, 6] }&#xA;&#xA;# you can ignore fields marked with &#39;#ignore&#39;&#xA;* match myJson == { cat: &#39;#ignore&#39;, hey: &#39;ho&#39;, foo: &#39;world&#39;, zee: [5, 6] }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;XML and XPath works just like you&#39;d expect.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def cat = &amp;lt;cat&amp;gt;&amp;lt;name&amp;gt;Billie&amp;lt;/name&amp;gt;&amp;lt;/cat&amp;gt;&#xA;* set cat /cat/name = &#39;Jean&#39;&#xA;* match cat / == &amp;lt;cat&amp;gt;&amp;lt;name&amp;gt;Jean&amp;lt;/name&amp;gt;&amp;lt;/cat&amp;gt;&#xA;&#xA;# you can even set whole fragments of xml&#xA;* def xml = &amp;lt;foo&amp;gt;&amp;lt;bar&amp;gt;baz&amp;lt;/bar&amp;gt;&amp;lt;/foo&amp;gt;&#xA;* set xml/foo/bar = &amp;lt;hello&amp;gt;world&amp;lt;/hello&amp;gt;&#xA;* match xml == &amp;lt;foo&amp;gt;&amp;lt;bar&amp;gt;&amp;lt;hello&amp;gt;world&amp;lt;/hello&amp;gt;&amp;lt;/bar&amp;gt;&amp;lt;/foo&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Refer to the section on &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#xpath-functions&#34;&gt;XPath Functions&lt;/a&gt; for examples of advanced XPath usage.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;match&lt;/code&gt; and variables&lt;/h3&gt; &#xA;&lt;p&gt;In case you were wondering, variables (and even expressions) are supported on the right-hand-side. So you can compare 2 JSON (or XML) payloads if you wanted to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def foo = { hello: &#39;world&#39;, baz: &#39;ban&#39; }&#xA;* def bar = { baz: &#39;ban&#39;, hello: &#39;world&#39; }&#xA;* match foo == bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are wondering about the finer details of the &lt;code&gt;match&lt;/code&gt; syntax, the Left-Hand-Side has to be either a&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;variable name - e.g. &lt;code&gt;foo&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;a &#39;named&#39; JsonPath or XPath expression - e.g. &lt;code&gt;foo[0].bar&lt;/code&gt; or &lt;code&gt;foo[*].bar&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;note that this cannot be &#34;dynamic&#34; (with in-line variables) so &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#get&#34;&gt;use an extra step&lt;/a&gt; if needed&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;any valid function or method call - e.g. &lt;code&gt;foo.bar()&lt;/code&gt; or &lt;code&gt;foo.bar(&#39;hello&#39;).baz&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;or anything wrapped in parentheses which will be evaluated as JavaScript - e.g. &lt;code&gt;(foo + bar)&lt;/code&gt; or &lt;code&gt;(42)&lt;/code&gt; - and in &lt;em&gt;this&lt;/em&gt; case, variables can be used&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And the right-hand-side can be any valid &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-expressions&#34;&gt;Karate expression&lt;/a&gt;. Refer to the section on &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#jsonpath-short-cuts&#34;&gt;JsonPath short-cuts&lt;/a&gt; for a deeper understanding of &#39;named&#39; JsonPath expressions in Karate.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;match !=&lt;/code&gt; (not equals)&lt;/h3&gt; &#xA;&lt;p&gt;The &#39;not equals&#39; operator &lt;code&gt;!=&lt;/code&gt; works as you would expect:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def test = { foo: &#39;bar&#39; }&#xA;* match test != { foo: &#39;baz&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You typically will &lt;em&gt;never&lt;/em&gt; need to use the &lt;code&gt;!=&lt;/code&gt; (not-equals) operator ! Use it sparingly, and only for string, number or simple payload comparisons.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;&lt;code&gt;set&lt;/code&gt; multiple&lt;/h3&gt; &#xA;&lt;p&gt;Karate has an elegant way to set multiple keys (via path expressions) in one step. For convenience, non-existent keys (or array elements) will be created automatically. You can find more JSON examples here: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-junit4/src/test/java/com/intuit/karate/junit4/demos/js-arrays.feature&#34;&gt;&lt;code&gt;js-arrays.feature&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def cat = { name: &#39;&#39; }&#xA;&#xA;* set cat&#xA;  | path   | value |&#xA;  | name   | &#39;Bob&#39; |&#xA;  | age    | 5     |&#xA;&#xA;* match cat == { name: &#39;Bob&#39;, age: 5 }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;One extra convenience for JSON is that if the variable itself (which was &lt;code&gt;cat&lt;/code&gt; in the above example) does not exist, it will be created automatically. You can even create (or modify existing) JSON arrays by using multiple columns.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* set foo&#xA;  | path | 0     | 1     |&#xA;  | bar  | &#39;baz&#39; | &#39;ban&#39; |&#xA;&#xA;* match foo == [{ bar: &#39;baz&#39; }, { bar: &#39;ban&#39; }]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have to set a bunch of deeply nested keys, you can move the parent path to the top, next to the &lt;code&gt;set&lt;/code&gt; keyword and save a lot of typing ! Note that this is not supported for &#34;arrays&#34; like above, and you can have only one &lt;code&gt;value&lt;/code&gt; column.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* set foo.bar&#xA;  | path   | value |&#xA;  | one    | 1     |&#xA;  | two[0] | 2     |&#xA;  | two[1] | 3     |&#xA;&#xA;* match foo == { bar: { one: 1, two: [2, 3] } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The same concept applies to XML and you can build complicated payloads from scratch in just a few, extremely readable lines. The &lt;code&gt;value&lt;/code&gt; column can take expressions, &lt;em&gt;even&lt;/em&gt; XML chunks. You can find more examples here: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-junit4/src/test/java/com/intuit/karate/junit4/xml/xml.feature&#34;&gt;&lt;code&gt;xml.feature&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* set search /acc:getAccountByPhoneNumber&#xA;  | path                        | value |&#xA;  | acc:phone/@foo              | &#39;bar&#39; |&#xA;  | acc:phone/acc:number[1]     | 1234  |&#xA;  | acc:phone/acc:number[2]     | 5678  |     &#xA;  | acc:phoneNumberSearchOption | &#39;all&#39; |&#xA;&#xA;* match search ==&#xA;  &#34;&#34;&#34;&#xA;  &amp;lt;acc:getAccountByPhoneNumber&amp;gt;&#xA;      &amp;lt;acc:phone foo=&#34;bar&#34;&amp;gt;&#xA;          &amp;lt;acc:number&amp;gt;1234&amp;lt;/acc:number&amp;gt;&#xA;          &amp;lt;acc:number&amp;gt;5678&amp;lt;/acc:number&amp;gt;&#xA;      &amp;lt;/acc:phone&amp;gt;&#xA;      &amp;lt;acc:phoneNumberSearchOption&amp;gt;all&amp;lt;/acc:phoneNumberSearchOption&amp;gt;        &#xA;  &amp;lt;/acc:getAccountByPhoneNumber&amp;gt;&#xA;  &#34;&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;remove&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;This is like the opposite of &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#set&#34;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; if you need to remove keys or data elements from JSON or XML instances. You can even remove JSON array elements by index.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def json = { foo: &#39;world&#39;, hey: &#39;ho&#39;, zee: [1, 2, 3] }&#xA;* remove json.hey&#xA;* match json == { foo: &#39;world&#39;, zee: [1, 2, 3] }&#xA;* remove json $.zee[1]&#xA;* match json == { foo: &#39;world&#39;, zee: [1, 3] }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;remove&lt;/code&gt; works for XML elements as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def xml = &amp;lt;foo&amp;gt;&amp;lt;bar&amp;gt;&amp;lt;hello&amp;gt;world&amp;lt;/hello&amp;gt;&amp;lt;/bar&amp;gt;&amp;lt;/foo&amp;gt;&#xA;* remove xml/foo/bar/hello&#xA;* match xml == &amp;lt;foo&amp;gt;&amp;lt;bar/&amp;gt;&amp;lt;/foo&amp;gt;&#xA;* remove xml /foo/bar&#xA;* match xml == &amp;lt;foo/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also take a look at how a special case of &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#embedded-expressions&#34;&gt;embedded-expressions&lt;/a&gt; can remove key-value pairs from a JSON (or XML) payload: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#remove-if-null&#34;&gt;Remove if Null&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;code&gt;delete&lt;/code&gt;, below.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;For JSON, you can also use the JS &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete&#34;&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt; operator via &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#eval&#34;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt;, useful when the path you are trying to mutate is dynamic.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def key = &#39;a&#39;&#xA;* def foo = { a: 1 }&#xA;* eval delete foo[key]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As a convenience, you can omit the &lt;code&gt;eval&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* delete foo[key]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Fuzzy Matching&lt;/h2&gt; &#xA;&lt;h3&gt;Ignore or Validate&lt;/h3&gt; &#xA;&lt;p&gt;When expressing expected results (in JSON or &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match-and-xml&#34;&gt;XML&lt;/a&gt;) you can mark some fields to be ignored when the match (comparison) is performed. You can even use a regular-expression so that instead of checking for equality, Karate will just validate that the actual value conforms to the expected pattern.&lt;/p&gt; &#xA;&lt;p&gt;This means that even when you have dynamic server-side generated values such as UUID-s and time-stamps appearing in the response, you can still assert that the full-payload matched in one step.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def cat = { name: &#39;Billie&#39;, type: &#39;LOL&#39;, id: &#39;a9f7a56b-8d5c-455c-9d13-808461d17b91&#39; }&#xA;* match cat == { name: &#39;#ignore&#39;, type: &#39;#regex [A-Z]{3}&#39;, id: &#39;#uuid&#39; }&#xA;# this will fail&#xA;# * match cat == { name: &#39;#ignore&#39;, type: &#39;#regex .{2}&#39;, id: &#39;#uuid&#39; }&#x9;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note that regex escaping has to be done with a &lt;em&gt;double&lt;/em&gt; back-slash - for e.g: &lt;code&gt;&#39;#regex a\\.dot&#39;&lt;/code&gt; will match &lt;code&gt;&#39;a.dot&#39;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The supported markers are the following:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Marker&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;#ignore&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Skip comparison for this field even if the data element or JSON key is present&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;#null&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Expects actual value to be &lt;code&gt;null&lt;/code&gt;, and the data element or JSON key &lt;em&gt;must&lt;/em&gt; be present&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;#notnull&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Expects actual value to be not-&lt;code&gt;null&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;#present&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Actual value can be any type or &lt;em&gt;even&lt;/em&gt; &lt;code&gt;null&lt;/code&gt;, but the key &lt;em&gt;must&lt;/em&gt; be present (only for JSON / XML, see below)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;#notpresent&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Expects the key to be &lt;strong&gt;not&lt;/strong&gt; present at all (only for JSON / XML, see below)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;#array&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Expects actual value to be a JSON array&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;#object&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Expects actual value to be a JSON object&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;#boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Expects actual value to be a boolean &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;#number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Expects actual value to be a number&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;#string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Expects actual value to be a string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;#uuid&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Expects actual (string) value to conform to the UUID format&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;#regex STR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Expects actual (string) value to match the regular-expression &#39;STR&#39; (see examples above)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;#? EXPR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Expects the JavaScript expression &#39;EXPR&#39; to evaluate to true, see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#self-validation-expressions&#34;&gt;self-validation expressions&lt;/a&gt; below&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;#[NUM] EXPR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Advanced array validation, see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#schema-validation&#34;&gt;schema validation&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;#(EXPR)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;For completeness, &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#embedded-expressions&#34;&gt;embedded expressions&lt;/a&gt; belong in this list as well&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;#present&lt;/code&gt; and &lt;code&gt;#notpresent&lt;/code&gt; only make sense when you are matching within a JSON or XML context or using a JsonPath or XPath on the left-hand-side.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def json = { foo: &#39;bar&#39; }&#xA;* match json == { foo: &#39;#present&#39; }&#xA;* match json.nope == &#39;#notpresent&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The rest can also be used even in &#39;primitive&#39; data matches like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* match foo == &#39;#string&#39;&#xA;# convenient (and recommended) way to check for array length&#xA;* match bar == &#39;#[2]&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Optional Fields&lt;/h3&gt; &#xA;&lt;p&gt;If two cross-hatch &lt;code&gt;#&lt;/code&gt; symbols are used as the prefix (for example: &lt;code&gt;##number&lt;/code&gt;), it means that the key is optional or that the value can be null.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def foo = { bar: &#39;baz&#39; }&#xA;* match foo == { bar: &#39;#string&#39;, ban: &#39;##string&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Remove If Null&lt;/h3&gt; &#xA;&lt;p&gt;A very useful behavior when you combine the optional marker with an &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#embedded-expressions&#34;&gt;embedded expression&lt;/a&gt; is as follows: if the embedded expression evaluates to &lt;code&gt;null&lt;/code&gt; - the JSON key (or XML element or attribute) will be deleted from the payload (the equivalent of &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#remove&#34;&gt;&lt;code&gt;remove&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def data = { a: &#39;hello&#39;, b: null, c: null }&#xA;* def json = { foo: &#39;#(data.a)&#39;, bar: &#39;#(data.b)&#39;, baz: &#39;##(data.c)&#39; }&#xA;* match json == { foo: &#39;hello&#39;, bar: null }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are just trying to pre-define schema snippets to use in a &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#fuzzy-matching&#34;&gt;fuzzy-match&lt;/a&gt;, you can use &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#enclosed-javascript&#34;&gt;enclosed Javascript&lt;/a&gt; to suppress the default behavior of replacing placeholders. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def dogSchema = { id: &#39;#string&#39;, color: &#39;#string&#39; }&#xA;# here we enclose in round-brackets to preserve the optional embedded expression&#xA;# so that it can be used later in a &#34;match&#34;&#xA;* def schema = ({ id: &#39;#string&#39;, name: &#39;#string&#39;, dog: &#39;##(dogSchema)&#39; })&#xA;&#xA;* def response1 = { id: &#39;123&#39;, name: &#39;foo&#39; }&#xA;* match response1 == schema&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And if you need to suppress placeholder substitution for &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files&#34;&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/a&gt;, but still need a JSON snippet, you can do this. Note how we read as a string, but &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#type-conversion&#34;&gt;&#34;cast&#34; to JSON&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* json schema = karate.readAsString(&#39;schema.json&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use the triple-quote / multi-line way of defining JSON or if you have to use XML - you can use &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#text&#34;&gt;&lt;code&gt;text&lt;/code&gt;&lt;/a&gt; and &#34;cast&#34; to JSON or XML as a second step - before using in a &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match&#34;&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* text schema =&#xA;&#34;&#34;&#34;&#xA;&amp;lt;root&amp;gt;&#xA;  &amp;lt;a&amp;gt;#string&amp;lt;/a&amp;gt;&#xA;  &amp;lt;b&amp;gt;##(subSchema)&amp;lt;/b&amp;gt;&#xA;&amp;lt;/root&amp;gt;&#xA;&#34;&#34;&#34;&#xA;* xml schema = schema&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;#null&lt;/code&gt; and &lt;code&gt;#notpresent&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Karate&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match&#34;&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; is strict, and the case where a JSON key exists but has a &lt;code&gt;null&lt;/code&gt; value (&lt;code&gt;#null&lt;/code&gt;) is considered different from the case where the key is not present at all (&lt;code&gt;#notpresent&lt;/code&gt;) in the payload.&lt;/p&gt; &#xA;&lt;p&gt;But note that &lt;code&gt;##null&lt;/code&gt; can be used to represent a convention that many teams adopt, which is that keys with &lt;code&gt;null&lt;/code&gt; values are stripped from the JSON payload. In other words, &lt;code&gt;{ a: 1, b: null }&lt;/code&gt; is considered &#39;equal&#39; to &lt;code&gt;{ a: 1 }&lt;/code&gt; and &lt;code&gt;{ a: 1, b: &#39;##null&#39; }&lt;/code&gt; will &lt;code&gt;match&lt;/code&gt; both cases.&lt;/p&gt; &#xA;&lt;p&gt;These examples (all exact matches) can make things more clear:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def foo = { }&#xA;* match foo == { a: &#39;##null&#39; }&#xA;* match foo == { a: &#39;##notnull&#39; }&#xA;* match foo == { a: &#39;#notpresent&#39; }&#xA;* match foo == { a: &#39;#ignore&#39; }&#xA;&#xA;* def foo = { a: null }&#xA;* match foo == { a: &#39;#null&#39; }    &#xA;* match foo == { a: &#39;##null&#39; }&#xA;* match foo == { a: &#39;#present&#39; }&#xA;* match foo == { a: &#39;#ignore&#39; }&#xA;&#xA;* def foo = { a: 1 }&#xA;* match foo == { a: &#39;#notnull&#39; }&#xA;* match foo == { a: &#39;##notnull&#39; }&#xA;* match foo == { a: &#39;#present&#39; }&#xA;* match foo == { a: &#39;#ignore&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that you can alternatively use JsonPath on the left-hand-side:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def foo = { a: 1 }&#xA;* match foo.a == &#39;#present&#39;&#xA;* match foo.nope == &#39;#notpresent&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But of course it is preferable to match whole objects in one step as far as possible.&lt;/p&gt; &#xA;&lt;h3&gt;&#39;Self&#39; Validation Expressions&lt;/h3&gt; &#xA;&lt;p&gt;The special &#39;predicate&#39; marker &lt;code&gt;#? EXPR&lt;/code&gt; in the table above is an interesting one. It is best explained via examples. Any valid JavaScript expression that evaluates to a &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Glossary/Truthy&#34;&gt;Truthy&lt;/a&gt; or &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Glossary/Falsy&#34;&gt;Falsy&lt;/a&gt; value is expected after the &lt;code&gt;#?&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Observe how the value of the field being validated (or &#39;self&#39;) is injected into the &#39;underscore&#39; expression variable: &#39;&lt;code&gt;_&lt;/code&gt;&#39;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def date = { month: 3 }&#xA;* match date == { month: &#39;#? _ &amp;gt; 0 &amp;amp;&amp;amp; _ &amp;lt; 13&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;What is even more interesting is that expressions can refer to variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def date = { month: 3 }&#xA;* def min = 1&#xA;* def max = 12&#xA;* match date == { month: &#39;#? _ &amp;gt;= min &amp;amp;&amp;amp; _ &amp;lt;= max&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And functions work as well ! You can imagine how you could evolve a nice set of utilities that validate all your domain objects.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def date = { month: 3 }&#xA;* def isValidMonth = function(m) { return m &amp;gt;= 0 &amp;amp;&amp;amp; m &amp;lt;= 12 }&#xA;* match date == { month: &#39;#? isValidMonth(_)&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Especially since strings can be easily coerced to numbers (and vice-versa) in Javascript, you can combine built-in validators with the self-validation &#39;predicate&#39; form like this: &lt;code&gt;&#39;#number? _ &amp;gt; 0&#39;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;# given this invalid input (string instead of number)&#xA;* def date = { month: &#39;3&#39; }&#xA;# this will pass&#xA;* match date == { month: &#39;#? _ &amp;gt; 0&#39; }&#xA;# but this &#39;combined form&#39; will fail, which is what we want&#xA;# * match date == { month: &#39;#number? _ &amp;gt; 0&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Referring to the JSON root&lt;/h4&gt; &#xA;&lt;p&gt;You can actually refer to any JsonPath on the document via &lt;code&gt;$&lt;/code&gt; and perform cross-field or conditional validations ! This example uses &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match-contains&#34;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#self-validation-expressions&#34;&gt;&lt;code&gt;#?&lt;/code&gt;&lt;/a&gt; &#39;predicate&#39; syntax, and situations where this comes in useful will be apparent when we discuss &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match-each&#34;&gt;&lt;code&gt;match each&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Given def temperature = { celsius: 100, fahrenheit: 212 }&#xA;Then match temperature == { celsius: &#39;#number&#39;, fahrenheit: &#39;#? _ == $.celsius * 1.8 + 32&#39; }&#xA;# when validation logic is an &#39;equality&#39; check, an embedded expression works better&#xA;Then match temperature contains { fahrenheit: &#39;#($.celsius * 1.8 + 32)&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;match&lt;/code&gt; text or binary&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;# when the response is plain-text&#xA;Then match response == &#39;Health Check OK&#39;&#xA;And match response != &#39;Error&#39;&#xA;&#xA;# when the response is binary (byte-array)&#xA;Then match responseBytes == read(&#39;test.pdf&#39;)&#xA;&#xA;# incidentally, match and assert behave exactly the same way for strings&#xA;* def hello = &#39;Hello World!&#39;&#xA;* match hello == &#39;Hello World!&#39;&#xA;* assert hello == &#39;Hello World!&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Checking if a string is contained within another string is a very common need and &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match-contains&#34;&gt;&lt;code&gt;match&lt;/code&gt; (name) &lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; works just like you&#39;d expect:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def hello = &#39;Hello World!&#39;&#xA;* match hello contains &#39;World&#39;&#xA;* match hello !contains &#39;blah&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For case-insensitive string comparisons, see how to create &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#commonly-needed-utilities&#34;&gt;custom utilities&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-lowercase&#34;&gt;&lt;code&gt;karate.lowerCase()&lt;/code&gt;&lt;/a&gt;. And for dealing with binary content - see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#type-bytes&#34;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;match header&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Since asserting against header values in the response is a common task - &lt;code&gt;match header&lt;/code&gt; has a special meaning. It short-cuts to the pre-defined variable &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#responseheaders&#34;&gt;&lt;code&gt;responseHeaders&lt;/code&gt;&lt;/a&gt; and reduces some complexity - because strictly, HTTP headers are a &#39;multi-valued map&#39; or a &#39;map of lists&#39; - the Java-speak equivalent being &lt;code&gt;Map&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt;&lt;/code&gt;. And since header names are case-insensitive - it ignores the case when finding the header to match.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;# so after a http request&#xA;Then match header Content-Type == &#39;application/json&#39;&#xA;# &#39;contains&#39; works as well&#xA;Then match header Content-Type contains &#39;application&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note the extra convenience where you don&#39;t have to enclose the LHS key in quotes.&lt;/p&gt; &#xA;&lt;p&gt;You can always directly access the variable called &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#responseheaders&#34;&gt;&lt;code&gt;responseHeaders&lt;/code&gt;&lt;/a&gt; if you wanted to do more checks, but you typically won&#39;t need to.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;match&lt;/code&gt; and XML&lt;/h3&gt; &#xA;&lt;p&gt;All the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#fuzzy-matching&#34;&gt;fuzzy matching&lt;/a&gt; markers will work in XML as well. Here are some examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;  * def xml = &amp;lt;root&amp;gt;&amp;lt;hello&amp;gt;world&amp;lt;/hello&amp;gt;&amp;lt;foo&amp;gt;bar&amp;lt;/foo&amp;gt;&amp;lt;/root&amp;gt;&#xA;  * match xml == &amp;lt;root&amp;gt;&amp;lt;hello&amp;gt;world&amp;lt;/hello&amp;gt;&amp;lt;foo&amp;gt;#ignore&amp;lt;/foo&amp;gt;&amp;lt;/root&amp;gt;&#xA;  * def xml = &amp;lt;root&amp;gt;&amp;lt;hello foo=&#34;bar&#34;&amp;gt;world&amp;lt;/hello&amp;gt;&amp;lt;/root&amp;gt;&#xA;  * match xml == &amp;lt;root&amp;gt;&amp;lt;hello foo=&#34;#ignore&#34;&amp;gt;world&amp;lt;/hello&amp;gt;&amp;lt;/root&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Refer to this file for a comprehensive set of XML examples: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-junit4/src/test/java/com/intuit/karate/junit4/xml/xml.feature&#34;&gt;&lt;code&gt;xml.feature&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Matching Sub-Sets of JSON Keys and Arrays&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;match contains&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;h4&gt;JSON Keys&lt;/h4&gt; &#xA;&lt;p&gt;In some cases where the response JSON is wildly dynamic, you may want to only check for the existence of some keys. And &lt;code&gt;match&lt;/code&gt; (name) &lt;code&gt;contains&lt;/code&gt; is how you can do so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def foo = { bar: 1, baz: &#39;hello&#39;, ban: &#39;world&#39; }&#xA;&#xA;* match foo contains { bar: 1 }&#xA;* match foo contains { baz: &#39;hello&#39; }&#xA;* match foo contains { bar:1, baz: &#39;hello&#39; }&#xA;# this will fail&#xA;# * match foo == { bar:1, baz: &#39;hello&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;match contains&lt;/code&gt; will &lt;em&gt;not&lt;/em&gt; &#34;recurse&#34; any nested JSON chunks so use &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match-contains-deep&#34;&gt;&lt;code&gt;match contains deep&lt;/code&gt;&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;p&gt;Also note that &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match-contains-any&#34;&gt;&lt;code&gt;match contains any&lt;/code&gt;&lt;/a&gt; is possible for JSON objects as well as &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#json-arrays&#34;&gt;JSON arrays&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;(not) &lt;code&gt;!contains&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;It is sometimes useful to be able to check if a key-value-pair does &lt;strong&gt;not&lt;/strong&gt; exist. This is possible by prefixing &lt;code&gt;contains&lt;/code&gt; with a &lt;code&gt;!&lt;/code&gt; (with no space in between).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def foo = { bar: 1, baz: &#39;hello&#39;, ban: &#39;world&#39; }&#xA;* match foo !contains { bar: 2 }&#xA;* match foo !contains { huh: &#39;#notnull&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s a reminder that the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#null-and-notpresent&#34;&gt;&lt;code&gt;#notpresent&lt;/code&gt;&lt;/a&gt; marker can be mixed into an equality &lt;code&gt;match&lt;/code&gt; (&lt;code&gt;==&lt;/code&gt;) to assert that some keys exist and at the same time ensure that some keys do &lt;strong&gt;not&lt;/strong&gt; exist:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def foo = { a: 1 }&#xA;* match foo == { a: &#39;#number&#39;, b: &#39;#notpresent&#39; }&#xA;&#xA;# if b can be present (optional) but should always be null&#xA;* match foo == { a: &#39;#number&#39;, b: &#39;##null&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;!&lt;/code&gt; (not) operator is especially useful for &lt;code&gt;contains&lt;/code&gt; and JSON arrays.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def foo = [1, 2, 3]&#xA;* match foo !contains 4&#xA;* match foo !contains [5, 6]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;JSON Arrays&lt;/h4&gt; &#xA;&lt;p&gt;This is a good time to deep-dive into JsonPath, which is perfect for slicing and dicing JSON into manageable chunks. It is worth taking a few minutes to go through the documentation and examples here: &lt;a href=&#34;https://github.com/jayway/JsonPath#path-examples&#34;&gt;JsonPath Examples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here are some example assertions performed while scraping a list of child elements out of the JSON below. Observe how you can &lt;code&gt;match&lt;/code&gt; the result of a JsonPath expression with your expected data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Given def cat = &#xA;  &#34;&#34;&#34;&#xA;  {&#xA;    name: &#39;Billie&#39;,&#xA;    kittens: [&#xA;      { id: 23, name: &#39;Bob&#39; },&#xA;      { id: 42, name: &#39;Wild&#39; }&#xA;    ]&#xA;  }&#xA;  &#34;&#34;&#34;&#xA;# normal &#39;equality&#39; match. note the wildcard &#39;*&#39; in the JsonPath (returns an array)&#xA;Then match cat.kittens[*].id == [23, 42]&#xA;&#xA;# when inspecting a json array, &#39;contains&#39; just checks if the expected items exist&#xA;# and the size and order of the actual array does not matter&#xA;Then match cat.kittens[*].id contains 23&#xA;Then match cat.kittens[*].id contains [42]&#xA;Then match cat.kittens[*].id contains [23, 42]&#xA;Then match cat.kittens[*].id contains [42, 23]&#xA;&#xA;# the .. operator is great because it matches nodes at any depth in the JSON &#34;tree&#34;&#xA;Then match cat..name == [&#39;Billie&#39;, &#39;Bob&#39;, &#39;Wild&#39;]&#xA;&#xA;# and yes, you can assert against nested objects within JSON arrays !&#xA;Then match cat.kittens contains [{ id: 42, name: &#39;Wild&#39; }, { id: 23, name: &#39;Bob&#39; }]&#xA;&#xA;# ... and even ignore fields at the same time !&#xA;Then match cat.kittens contains { id: 42, name: &#39;#string&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is worth mentioning that to do the equivalent of the last line in Java, you would typically have to traverse 2 Java Objects, one of which is within a list, and you would have to check for nulls as well.&lt;/p&gt; &#xA;&lt;p&gt;When you use Karate, all your data assertions can be done in pure JSON and without needing a thick forest of companion Java objects. And when you &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#read&#34;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt; your JSON objects from (re-usable) files, even complex response payload assertions can be accomplished in just a single line of Karate-script.&lt;/p&gt; &#xA;&lt;p&gt;Refer to this &lt;a href=&#34;https://twitter.com/KarateDSL/status/873035687817117696&#34;&gt;case study&lt;/a&gt; for how dramatic the reduction of lines of code can be.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;match contains only&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;For those cases where you need to assert that &lt;strong&gt;all&lt;/strong&gt; array elements are present but in &lt;strong&gt;any order&lt;/strong&gt; you can do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def data = { foo: [1, 2, 3] }&#xA;* match data.foo contains 1&#xA;* match data.foo contains [2]&#xA;* match data.foo contains [3, 2]&#xA;* match data.foo contains only [3, 2, 1]&#xA;* match data.foo contains only [2, 3, 1]&#xA;# this will fail&#xA;# * match data.foo contains only [2, 3]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;match contains any&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;To assert that &lt;strong&gt;any&lt;/strong&gt; of the given array elements are present.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def data = { foo: [1, 2, 3] }&#xA;* match data.foo contains any [9, 2, 8]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And this happens to work as expected for JSON object keys as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def data = { a: 1, b: &#39;x&#39; }&#xA;* match data contains any { b: &#39;x&#39;, c: true }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;match contains deep&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This modifies the behavior of &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match-contains&#34;&gt;&lt;code&gt;match contains&lt;/code&gt;&lt;/a&gt; so that nested lists or objects are processed for a &#34;deep contains&#34; match instead of a &#34;deep equals&#34; one which is the default. This is convenient for complex nested payloads where you are sure that you only want to check for &lt;em&gt;some&lt;/em&gt; values in the various &#34;trees&#34; of data.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Scenario: recurse nested json&#xA;  * def original = { a: 1, b: 2, c: 3, d: { a: 1, b: 2 } }&#xA;  * def expected = { a: 1, c: 3, d: { b: 2 } }&#xA;  * match original contains deep expected&#xA;&#xA;Scenario: recurse nested array&#xA;  * def original = { a: 1, arr: [ { b: 2, c: 3 }, { b: 3, c: 4 } ] }&#xA;  * def expected = { a: 1, arr: [ { b: 2 }, { c: 4 } ] }&#xA;  * match original contains deep expected&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;the NOT operator e.g. &lt;code&gt;!contains deep&lt;/code&gt; is not yet supported, please contribute code if you can.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Validate every element in a JSON array&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;match each&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;match&lt;/code&gt; keyword can be made to iterate over all elements in a JSON array using the &lt;code&gt;each&lt;/code&gt; modifier. Here&#39;s how it works:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def data = { foo: [{ bar: 1, baz: &#39;a&#39; }, { bar: 2, baz: &#39;b&#39; }, { bar: 3, baz: &#39;c&#39; }]}&#xA;&#xA;* match each data.foo == { bar: &#39;#number&#39;, baz: &#39;#string&#39; }&#xA;&#xA;# and you can use &#39;contains&#39; the way you&#39;d expect&#xA;* match each data.foo contains { bar: &#39;#number&#39; }&#xA;* match each data.foo contains { bar: &#39;#? _ != 4&#39; }&#xA;&#xA;# some more examples of validation macros&#xA;* match each data.foo contains { baz: &#34;#? _ != &#39;z&#39;&#34; }&#xA;* def isAbc = function(x) { return x == &#39;a&#39; || x == &#39;b&#39; || x == &#39;c&#39; }&#xA;* match each data.foo contains { baz: &#39;#? isAbc(_)&#39; }&#xA;&#xA;# this is also possible, see the subtle difference from the above&#xA;* def isXabc = function(x) { return x.baz == &#39;a&#39; || x.baz == &#39;b&#39; || x.baz == &#39;c&#39; }&#xA;* match each data.foo == &#39;#? isXabc(_)&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is a contrived example that uses &lt;code&gt;match each&lt;/code&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match-contains&#34;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#self-validation-expressions&#34;&gt;&lt;code&gt;#?&lt;/code&gt;&lt;/a&gt; &#39;predicate&#39; marker to validate that the value of &lt;code&gt;totalPrice&lt;/code&gt; is always equal to the &lt;code&gt;roomPrice&lt;/code&gt; of the first item in the &lt;code&gt;roomInformation&lt;/code&gt; array.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Given def json =&#xA;  &#34;&#34;&#34;&#xA;  {&#xA;    &#34;hotels&#34;: [&#xA;      { &#34;roomInformation&#34;: [{ &#34;roomPrice&#34;: 618.4 }], &#34;totalPrice&#34;: 618.4  },&#xA;      { &#34;roomInformation&#34;: [{ &#34;roomPrice&#34;: 679.79}], &#34;totalPrice&#34;: 679.79 }&#xA;    ]&#xA;  }&#xA;  &#34;&#34;&#34;&#xA;Then match each json.hotels contains { totalPrice: &#39;#? _ == _$.roomInformation[0].roomPrice&#39; }&#xA;# when validation logic is an &#39;equality&#39; check, an embedded expression works better&#xA;Then match each json.hotels contains { totalPrice: &#39;#(_$.roomInformation[0].roomPrice)&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Referring to self&lt;/h4&gt; &#xA;&lt;p&gt;While &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#referring-to-the-json-root&#34;&gt;&lt;code&gt;$&lt;/code&gt;&lt;/a&gt; always refers to the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#referring-to-the-json-root&#34;&gt;JSON &#39;root&#39;&lt;/a&gt;, note the use of &lt;code&gt;_$&lt;/code&gt; above to represent the &#39;current&#39; node of a &lt;code&gt;match each&lt;/code&gt; iteration. Here is a recap of symbols that can be used in JSON &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#embedded-expressions&#34;&gt;embedded expressions&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Symbol&lt;/th&gt; &#xA;   &lt;th&gt;Evaluates To&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;$&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#referring-to-the-json-root&#34;&gt;&#39;root&#39;&lt;/a&gt; of the JSON document in scope&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;_&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The value of &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#self-validation-expressions&#34;&gt;&#39;self&#39;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;_$&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The &#39;parent&#39; of &#39;self&#39; or &#39;current&#39; item in the list, relevant when using &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match-each&#34;&gt;&lt;code&gt;match each&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;There is a shortcut for &lt;code&gt;match each&lt;/code&gt; explained in the next section that can be quite useful, especially for &#39;in-line&#39; schema-like validations.&lt;/p&gt; &#xA;&lt;h2&gt;Schema Validation&lt;/h2&gt; &#xA;&lt;p&gt;Karate provides a far more simpler and more powerful way than &lt;a href=&#34;http://json-schema.org&#34;&gt;JSON-schema&lt;/a&gt; to validate the structure of a given payload. You can even mix domain and conditional validations and perform all assertions in a single step.&lt;/p&gt; &#xA;&lt;p&gt;But first, a special short-cut for array validation needs to be introduced:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def foo = [&#39;bar&#39;, &#39;baz&#39;]&#xA;&#xA;# should be an array&#xA;* match foo == &#39;#[]&#39;&#xA;&#xA;# should be an array of size 2&#xA;* match foo == &#39;#[2]&#39;&#xA;&#xA;# should be an array of strings with size 2&#xA;* match foo == &#39;#[2] #string&#39;&#xA;&#xA;# each array element should have a &#39;length&#39; property with value 3&#xA;* match foo == &#39;#[]? _.length == 3&#39;&#xA;&#xA;# should be an array of strings each of length 3&#xA;* match foo == &#39;#[] #string? _.length == 3&#39;&#xA;&#xA;# should be null or an array of strings&#xA;* match foo == &#39;##[] #string&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This &#39;in-line&#39; short-cut for validating JSON arrays is similar to how &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match-each&#34;&gt;&lt;code&gt;match each&lt;/code&gt;&lt;/a&gt; works. So now, complex payloads (that include arrays) can easily be validated in one step by combining &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#ignore-or-validate&#34;&gt;validation markers&lt;/a&gt; like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def oddSchema = { price: &#39;#string&#39;, status: &#39;#? _ &amp;lt; 3&#39;, ck: &#39;##number&#39;, name: &#39;#regex[0-9X]&#39; }&#xA;* def isValidTime = read(&#39;time-validator.js&#39;)&#xA;When method get&#xA;Then match response ==&#xA;  &#34;&#34;&#34;&#xA;  { &#xA;    id: &#39;#regex[0-9]+&#39;,&#xA;    count: &#39;#number&#39;,&#xA;    odd: &#39;#(oddSchema)&#39;,&#xA;    data: { &#xA;      countryId: &#39;#number&#39;, &#xA;      countryName: &#39;#string&#39;, &#xA;      leagueName: &#39;##string&#39;, &#xA;      status: &#39;#number? _ &amp;gt;= 0&#39;, &#xA;      sportName: &#39;#string&#39;,&#xA;      time: &#39;#? isValidTime(_)&#39;&#xA;    },&#xA;    odds: &#39;#[] oddSchema&#39;  &#xA;  }&#xA;  &#34;&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Especially note the re-use of the &lt;code&gt;oddSchema&lt;/code&gt; both as an &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#embedded-expressions&#34;&gt;embedded-expression&lt;/a&gt; and as an array validation (on the last line).&lt;/p&gt; &#xA;&lt;p&gt;And you can perform conditional / &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#referring-to-the-json-root&#34;&gt;cross-field validations&lt;/a&gt; and even business-logic validations at the same time.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;# optional (can be null) and if present should be an array of size greater than zero&#xA;* match $.odds == &#39;##[_ &amp;gt; 0]&#39;&#xA;&#xA;# should be an array of size equal to $.count&#xA;* match $.odds == &#39;#[$.count]&#39;&#xA;&#xA;# use a predicate function to validate each array element&#xA;* def isValidOdd = function(o){ return o.name.length == 1 }&#xA;* match $.odds == &#39;#[]? isValidOdd(_)&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Refer to this for the complete example: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-junit4/src/test/java/com/intuit/karate/junit4/demos/schema-like.feature&#34;&gt;&lt;code&gt;schema-like.feature&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;And there is another example in the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo&#34;&gt;karate-demos&lt;/a&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/schema/schema.feature&#34;&gt;&lt;code&gt;schema.feature&lt;/code&gt;&lt;/a&gt; where you can compare Karate&#39;s approach with an actual JSON-schema example. You can also find a nice visual comparison and explanation &lt;a href=&#34;https://twitter.com/KarateDSL/status/878984854012022784&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;contains&lt;/code&gt; short-cuts&lt;/h3&gt; &#xA;&lt;p&gt;Especially when payloads are complex (or highly dynamic), it may be more practical to use &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match-contains&#34;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; semantics. Karate has the following short-cut symbols designed to be mixed into &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#embedded-expressions&#34;&gt;&lt;code&gt;embedded expressions&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Symbol&lt;/th&gt; &#xA;   &lt;th&gt;Means&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;^&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match-contains&#34;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;^^&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match-contains-only&#34;&gt;&lt;code&gt;contains only&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;^*&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match-contains-any&#34;&gt;&lt;code&gt;contains any&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;^+&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match-contains-deep&#34;&gt;&lt;code&gt;contains deep&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;!^&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#not-contains&#34;&gt;&lt;code&gt;not contains&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For completeness, &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match&#34;&gt;&lt;code&gt;==&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match--not-equals&#34;&gt;&lt;code&gt;!=&lt;/code&gt;&lt;/a&gt; also belong in the above list.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Here&#39;a table of the alternative &#39;in-line&#39; forms compared with the &#39;standard&#39; form. Note that &lt;em&gt;all&lt;/em&gt; the short-cut forms on the right-side of the table resolve to &#39;equality&#39; (&lt;code&gt;==&lt;/code&gt;) matches, which enables them to be &#39;in-lined&#39; into a &lt;em&gt;full&lt;/em&gt; (single-step) payload &lt;code&gt;match&lt;/code&gt;, using &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#embedded-expressions&#34;&gt;embedded expressions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gist.github.com/ptrthomas/2a1e30bcb4d782279019b3d5c10b3ed1&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/resources/karate-json-assertions.jpg&#34; height=&#34;690px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A very useful capability is to be able to check that an array &lt;code&gt;contains&lt;/code&gt; an object that &lt;code&gt;contains&lt;/code&gt; the provided &lt;em&gt;sub-set&lt;/em&gt; of keys instead of having to specify the &lt;em&gt;complete&lt;/em&gt; JSON - which can get really cumbersome for large objects. This turns out to be very useful in practice, and this particular &lt;code&gt;match&lt;/code&gt; &lt;em&gt;jsonArray&lt;/em&gt; &lt;code&gt;contains &#39;#(^&lt;/code&gt;&lt;em&gt;partialObject&lt;/em&gt;&lt;code&gt;)&#39;&lt;/code&gt; form has no &#39;in-line&#39; equivalent (see the third-from-last row above).&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The last row in the table is a little different from the rest, and this short-cut form is the recommended way to validate the length of a JSON array. As a rule of thumb, prefer &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match&#34;&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; over &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#assert&#34;&gt;&lt;code&gt;assert&lt;/code&gt;&lt;/a&gt;, because &lt;code&gt;match&lt;/code&gt; failure messages are more detailed and descriptive.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;In real-life tests, these are very useful when the order of items in arrays returned from the server are not guaranteed. You can easily assert that all expected elements are present, &lt;em&gt;even&lt;/em&gt; in nested parts of your JSON - while doing a &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match&#34;&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; on the &lt;em&gt;full&lt;/em&gt; payload.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def cat = &#xA;  &#34;&#34;&#34;&#xA;  {&#xA;    name: &#39;Billie&#39;,&#xA;    kittens: [&#xA;      { id: 23, name: &#39;Bob&#39; },&#xA;      { id: 42, name: &#39;Wild&#39; }&#xA;    ]&#xA;  }&#xA;  &#34;&#34;&#34;&#xA;* def expected = [{ id: 42, name: &#39;Wild&#39; }, { id: 23, name: &#39;Bob&#39; }]&#xA;* match cat == { name: &#39;Billie&#39;, kittens: &#39;#(^^expected)&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There&#39;s a lot going on in the last line above ! It validates the entire payload in one step and checks if the &lt;code&gt;kittens&lt;/code&gt; array &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#contains-short-cuts&#34;&gt;&lt;em&gt;&lt;strong&gt;contains all&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt; the &lt;code&gt;expected&lt;/code&gt; items but in &lt;em&gt;&lt;strong&gt;any order&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;get&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;By now, it should be clear that &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/(https://github.com/jayway/JsonPath#path-examples)&#34;&gt;JsonPath&lt;/a&gt; can be very useful for extracting JSON &#39;trees&#39; out of a given object. The &lt;code&gt;get&lt;/code&gt; keyword allows you to save the results of a JsonPath expression for later use - which is especially useful for dynamic &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#data-driven-features&#34;&gt;data-driven testing&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def cat = &#xA;  &#34;&#34;&#34;&#xA;  {&#xA;    name: &#39;Billie&#39;,&#xA;    kittens: [&#xA;      { id: 23, name: &#39;Bob&#39; },&#xA;      { id: 42, name: &#39;Wild&#39; }&#xA;    ]&#xA;  }&#xA;  &#34;&#34;&#34;&#xA;* def kitnums = get cat.kittens[*].id&#xA;* match kitnums == [23, 42]&#xA;* def kitnames = get cat $.kittens[*].name&#xA;* match kitnames == [&#39;Bob&#39;, &#39;Wild&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;get&lt;/code&gt; short-cut&lt;/h3&gt; &#xA;&lt;p&gt;The &#39;short cut&#39; &lt;code&gt;$variableName&lt;/code&gt; form is also supported. Refer to &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#jsonpath-short-cuts&#34;&gt;JsonPath short-cuts&lt;/a&gt; for a detailed explanation. So the above could be re-written as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def kitnums = $cat.kittens[*].id&#xA;* match kitnums == [23, 42]&#xA;* def kitnames = $cat.kittens[*].name&#xA;* match kitnames == [&#39;Bob&#39;, &#39;Wild&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is worth repeating that the above can be condensed into 2 lines. Note that since &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match-and-variables&#34;&gt;only JsonPath is expected&lt;/a&gt; on the left-hand-side of the &lt;code&gt;==&lt;/code&gt; sign of a &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match&#34;&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; statement, you don&#39;t need to prefix the variable reference with &lt;code&gt;$&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* match cat.kittens[*].id == [23, 42]&#xA;* match cat.kittens[*].name == [&#39;Bob&#39;, &#39;Wild&#39;]&#xA;&#xA;# if you prefer using &#39;pure&#39; JsonPath, you can do this&#xA;* match cat $.kittens[*].id == [23, 42]&#xA;* match cat $.kittens[*].name == [&#39;Bob&#39;, &#39;Wild&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;get&lt;/code&gt; plus index&lt;/h3&gt; &#xA;&lt;p&gt;A convenience that the &lt;code&gt;get&lt;/code&gt; syntax supports (but not the &lt;code&gt;$&lt;/code&gt; short-cut form) is to return a single element if the right-hand-side evaluates to a list-like result (e.g. a JSON array). This is useful because the moment you use a wildcard &lt;code&gt;[*]&lt;/code&gt; or search filter in JsonPath (see the next section), you get an &lt;em&gt;array&lt;/em&gt; back - even though typically you would only be interested in the &lt;em&gt;first&lt;/em&gt; item.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def actual = 23&#xA;&#xA;# so instead of this&#xA;* def kitnums = get cat.kittens[*].id&#xA;* match actual == kitnums[0]&#xA;&#xA;# you can do this in one line&#xA;* match actual == get[0] cat.kittens[*].id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;JsonPath filters&lt;/h3&gt; &#xA;&lt;p&gt;JsonPath &lt;a href=&#34;https://github.com/json-path/JsonPath#filter-operators&#34;&gt;filter expressions&lt;/a&gt; are very useful for extracting elements that meet some filter criteria out of arrays.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def cat = &#xA;  &#34;&#34;&#34;&#xA;  {&#xA;    name: &#39;Billie&#39;,&#xA;    kittens: [&#xA;      { id: 23, name: &#39;Bob&#39; },&#xA;      { id: 42, name: &#39;Wild&#39; }&#xA;    ]&#xA;  }&#xA;  &#34;&#34;&#34;&#xA;# find single kitten where id == 23&#xA;* def bob = get[0] cat.kittens[?(@.id==23)]&#xA;* match bob.name == &#39;Bob&#39;&#xA;&#xA;# using the karate object if the expression is dynamic&#xA;* def temp = karate.jsonPath(cat, &#34;$.kittens[?(@.name==&#39;&#34; + bob.name + &#34;&#39;)]&#34;)&#xA;* match temp[0] == bob&#xA;&#xA;# or alternatively&#xA;* def temp = karate.jsonPath(cat, &#34;$.kittens[?(@.name==&#39;&#34; + bob.name + &#34;&#39;)]&#34;)[0]&#xA;* match temp == bob&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You usually won&#39;t need this, but the second-last line above shows how the &lt;code&gt;karate&lt;/code&gt; object can be used to &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-jsonpath&#34;&gt;evaluate JsonPath&lt;/a&gt; if the filter expression depends on a variable. If you find yourself struggling to write &lt;a href=&#34;https://stackoverflow.com/a/52741196/143475&#34;&gt;dynamic JsonPath filters&lt;/a&gt;, look at &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-filter&#34;&gt;&lt;code&gt;karate.filter()&lt;/code&gt;&lt;/a&gt; as an alternative, described just below.&lt;/p&gt; &#xA;&lt;h2&gt;JSON Transforms&lt;/h2&gt; &#xA;&lt;p&gt;Karate supports the following &lt;a href=&#34;https://en.wikipedia.org/wiki/Functional_programming&#34;&gt;functional-style&lt;/a&gt; operations via the JS API - &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-map&#34;&gt;&lt;code&gt;karate.map()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-filter&#34;&gt;&lt;code&gt;karate.filter()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-foreach&#34;&gt;&lt;code&gt;karate.forEach()&lt;/code&gt;&lt;/a&gt;. They can be very useful in some situations. A &lt;a href=&#34;https://stackoverflow.com/a/53120851/143475&#34;&gt;good example&lt;/a&gt; is when you have the &lt;em&gt;expected&lt;/em&gt; data available as ready-made JSON but it is in a different &#34;shape&#34; from the &lt;em&gt;actual&lt;/em&gt; data or HTTP &lt;code&gt;response&lt;/code&gt;. There is also a &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-mapwithkey&#34;&gt;&lt;code&gt;karate.mapWithKey()&lt;/code&gt;&lt;/a&gt; for a common need - which is to convert an array of primitives into an array of objects, which is the form that &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#data-driven-features&#34;&gt;data driven features&lt;/a&gt; expect.&lt;/p&gt; &#xA;&lt;p&gt;A few more useful &#34;transforms&#34; are to select a sub-set of key-value pairs using &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-filterkeys&#34;&gt;&lt;code&gt;karate.filterKeys()&lt;/code&gt;&lt;/a&gt;, merging 2 or more JSON-s using &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-merge&#34;&gt;&lt;code&gt;karate.merge()&lt;/code&gt;&lt;/a&gt; and combining 2 or more arrays (or objects) into a single array using &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-append&#34;&gt;&lt;code&gt;karate.append()&lt;/code&gt;&lt;/a&gt;. And &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-appendto&#34;&gt;&lt;code&gt;karate.appendTo()&lt;/code&gt;&lt;/a&gt; is for updating an existing variable (the equivalent of &lt;code&gt;array.push()&lt;/code&gt; in JavaScript), which is especially useful in the body of a &lt;code&gt;karate.forEach()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also sort arrays of arbitrary JSON using &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-sort&#34;&gt;&lt;code&gt;karate.sort()&lt;/code&gt;&lt;/a&gt;. Simple arrays of strings or numbers can be stripped of duplicates using &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-distinct&#34;&gt;&lt;code&gt;karate.distinct()&lt;/code&gt;&lt;/a&gt;. All JS &#34;native&#34; array operations can be used, such as &lt;code&gt;someName.reverse()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note that a single JS function is sufficient to transform a given JSON object into a completely new one, and you can use complex conditional logic if needed.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Scenario: karate map operation&#xA;    * def fun = function(x){ return x * x }&#xA;    * def list = [1, 2, 3]&#xA;    * def res = karate.map(list, fun)&#xA;    * match res == [1, 4, 9]&#xA;&#xA;Scenario: convert an array into a different shape&#xA;    * def before = [{ foo: 1 }, { foo: 2 }, { foo: 3 }]&#xA;    * def fun = function(x){ return { bar: x.foo } }&#xA;    * def after = karate.map(before, fun)&#xA;    * match after == [{ bar: 1 }, { bar: 2 }, { bar: 3 }]&#xA;&#xA;Scenario: convert array of primitives into array of objects&#xA;    * def list = [ &#39;Bob&#39;, &#39;Wild&#39;, &#39;Nyan&#39; ]&#xA;    * def data = karate.mapWithKey(list, &#39;name&#39;)&#xA;    * match data == [{ name: &#39;Bob&#39; }, { name: &#39;Wild&#39; }, { name: &#39;Nyan&#39; }]&#xA;&#xA;Scenario: karate filter operation&#xA;    * def fun = function(x){ return x % 2 == 0 }&#xA;    * def list = [1, 2, 3, 4]&#xA;    * def res = karate.filter(list, fun)&#xA;    * match res == [2, 4]&#xA;&#xA;Scenario: forEach works even on object key-values, not just arrays&#xA;    * def keys = []&#xA;    * def vals = []&#xA;    * def idxs = []&#xA;    * def fun = &#xA;    &#34;&#34;&#34;&#xA;    function(x, y, i) { &#xA;      karate.appendTo(keys, x); &#xA;      karate.appendTo(vals, y); &#xA;      karate.appendTo(idxs, i); &#xA;    }&#xA;    &#34;&#34;&#34;&#xA;    * def map = { a: 2, b: 4, c: 6 }&#xA;    * karate.forEach(map, fun)&#xA;    * match keys == [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]&#xA;    * match vals == [2, 4, 6]&#xA;    * match idxs == [0, 1, 2]&#xA;&#xA;Scenario: filterKeys&#xA;    * def schema = { a: &#39;#string&#39;, b: &#39;#number&#39;, c: &#39;#boolean&#39; }&#xA;    * def response = { a: &#39;x&#39;, c: true }&#xA;    # very useful for validating a response against a schema &#34;super-set&#34;&#xA;    * match response == karate.filterKeys(schema, response)&#xA;    * match karate.filterKeys(response, &#39;b&#39;, &#39;c&#39;) == { c: true }&#xA;    * match karate.filterKeys(response, [&#39;a&#39;, &#39;b&#39;]) == { a: &#39;x&#39; }&#xA;&#xA;Scenario: merge&#xA;    * def foo = { a: 1 }&#xA;    * def bar = karate.merge(foo, { b: 2 })&#xA;    * match bar == { a: 1, b: 2 }&#xA;&#xA;Scenario: append&#xA;    * def foo = [{ a: 1 }]&#xA;    * def bar = karate.append(foo, { b: 2 })&#xA;    * match bar == [{ a: 1 }, { b: 2 }]&#xA;&#xA;Scenario: sort&#xA;    * def foo = [{a: { b: 3 }}, {a: { b: 1 }}, {a: { b: 2 }}]&#xA;    * def fun = function(x){ return x.a.b }&#xA;    * def bar = karate.sort(foo, fun)&#xA;    * match bar == [{a: { b: 1 }}, {a: { b: 2 }}, {a: { b: 3 }}]&#xA;    * match bar.reverse() == [{a: { b: 3 }}, {a: { b: 2 }}, {a: { b: 1 }}]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Loops&lt;/h3&gt; &#xA;&lt;p&gt;Given the examples above, it has to be said that a best practice with Karate is to avoid JavaScript &lt;code&gt;for&lt;/code&gt; loops as far as possible. A common requirement is to build an array with &lt;code&gt;n&lt;/code&gt; elements or do something &lt;code&gt;n&lt;/code&gt; times where &lt;code&gt;n&lt;/code&gt; is an integer (that could even be a variable reference). This is easily achieved with the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-repeat&#34;&gt;&lt;code&gt;karate.repeat()&lt;/code&gt;&lt;/a&gt; API:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def fun = function(i){ return i * 2 }&#xA;* def foo = karate.repeat(5, fun)&#xA;* match foo == [0, 2, 4, 6, 8]&#xA;&#xA;* def foo = []&#xA;* def fun = function(i){ karate.appendTo(foo, i) }&#xA;* karate.repeat(5, fun)&#xA;* match foo == [0, 1, 2, 3, 4]&#xA;&#xA;# generate test data easily&#xA;* def fun = function(i){ return { name: &#39;User &#39; + (i + 1) } }&#xA;* def foo = karate.repeat(3, fun)&#xA;* match foo == [{ name: &#39;User 1&#39; }, { name: &#39;User 2&#39; }, { name: &#39;User 3&#39; }]&#xA;&#xA;# generate a range of numbers as a json array&#xA;* def foo = karate.range(4, 9)&#xA;* match foo == [4, 5, 6, 7, 8, 9]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And there&#39;s also &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-range&#34;&gt;&lt;code&gt;karate.range()&lt;/code&gt;&lt;/a&gt; which can be useful to generate test-data.&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t forget that Karate&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#data-driven-tests&#34;&gt;data-driven testing capabilities&lt;/a&gt; can loop over arrays of JSON objects automatically.&lt;/p&gt; &#xA;&lt;h2&gt;XPath Functions&lt;/h2&gt; &#xA;&lt;p&gt;When handling XML, you sometimes need to call &lt;a href=&#34;https://docs.oracle.com/javase/tutorial/jaxp/xslt/xpath.html&#34;&gt;XPath functions&lt;/a&gt;, for example to get the count of a node-set. Any valid XPath expression is allowed on the left-hand-side of a &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match&#34;&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; statement.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def myXml =&#xA;  &#34;&#34;&#34;&#xA;  &amp;lt;records&amp;gt;&#xA;    &amp;lt;record index=&#34;1&#34;&amp;gt;a&amp;lt;/record&amp;gt;&#xA;    &amp;lt;record index=&#34;2&#34;&amp;gt;b&amp;lt;/record&amp;gt;&#xA;    &amp;lt;record index=&#34;3&#34; foo=&#34;bar&#34;&amp;gt;c&amp;lt;/record&amp;gt;&#xA;  &amp;lt;/records&amp;gt;&#xA;  &#34;&#34;&#34;&#xA;&#xA;* match foo count(/records//record) == 3&#xA;* match foo //record[@index=2] == &#39;b&#39;&#xA;* match foo //record[@foo=&#39;bar&#39;] == &#39;c&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Advanced XPath&lt;/h3&gt; &#xA;&lt;p&gt;Some XPath expressions return a list of nodes (instead of a single node). But since you can express a list of data-elements as a JSON array - even these XPath expressions can be used in &lt;code&gt;match&lt;/code&gt; statements.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def teachers = &#xA;  &#34;&#34;&#34;&#xA;  &amp;lt;teachers&amp;gt;&#xA;    &amp;lt;teacher department=&#34;science&#34;&amp;gt;&#xA;      &amp;lt;subject&amp;gt;math&amp;lt;/subject&amp;gt;&#xA;      &amp;lt;subject&amp;gt;physics&amp;lt;/subject&amp;gt;&#xA;    &amp;lt;/teacher&amp;gt;&#xA;    &amp;lt;teacher department=&#34;arts&#34;&amp;gt;&#xA;      &amp;lt;subject&amp;gt;political education&amp;lt;/subject&amp;gt;&#xA;      &amp;lt;subject&amp;gt;english&amp;lt;/subject&amp;gt;&#xA;    &amp;lt;/teacher&amp;gt;&#xA;  &amp;lt;/teachers&amp;gt;&#xA;  &#34;&#34;&#34;&#xA;* match teachers //teacher[@department=&#39;science&#39;]/subject == [&#39;math&#39;, &#39;physics&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your XPath is dynamic and has to be formed &#39;on the fly&#39; perhaps by using some variable derived from previous steps, you can use the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-xmlpath&#34;&gt;&lt;code&gt;karate.xmlPath()&lt;/code&gt;&lt;/a&gt; helper:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def xml = &amp;lt;query&amp;gt;&amp;lt;name&amp;gt;&amp;lt;foo&amp;gt;bar&amp;lt;/foo&amp;gt;&amp;lt;/name&amp;gt;&amp;lt;/query&amp;gt;&#xA;* def elementName = &#39;name&#39;&#xA;* def name = karate.xmlPath(xml, &#39;/query/&#39; + elementName + &#39;/foo&#39;)&#xA;* match name == &#39;bar&#39;&#xA;* def queryName = karate.xmlPath(xml, &#39;/query/&#39; + elementName)&#xA;* match queryName == &amp;lt;name&amp;gt;&amp;lt;foo&amp;gt;bar&amp;lt;/foo&amp;gt;&amp;lt;/name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can refer to this file (which is part of the Karate test-suite) for more XML examples: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-junit4/src/test/java/com/intuit/karate/junit4/demos/xml-and-xpath.feature&#34;&gt;&lt;code&gt;xml-and-xpath.feature&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Special Variables&lt;/h1&gt; &#xA;&lt;p&gt;These are &#39;built-in&#39; variables, there are only a few and all of them give you access to the HTTP response.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;response&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;After every HTTP call this variable is set with the response body, and is available until the next HTTP request over-writes it. You can easily assign the whole &lt;code&gt;response&lt;/code&gt; (or just parts of it using Json-Path or XPath) to a variable, and use it in later steps.&lt;/p&gt; &#xA;&lt;p&gt;The response is automatically available as a JSON, XML or String object depending on what the response contents are.&lt;/p&gt; &#xA;&lt;p&gt;As a short-cut, when running JsonPath expressions - &lt;code&gt;$&lt;/code&gt; represents the &lt;code&gt;response&lt;/code&gt;. This has the advantage that you can use pure &lt;a href=&#34;https://github.com/jayway/JsonPath#path-examples&#34;&gt;JsonPath&lt;/a&gt; and be more concise. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;# the three lines below are equivalent&#xA;Then match response $ == { name: &#39;Billie&#39; }&#xA;Then match response == { name: &#39;Billie&#39; }&#xA;Then match $ == { name: &#39;Billie&#39; }&#xA;&#xA;# the three lines below are equivalent&#xA;Then match response.name == &#39;Billie&#39;&#xA;Then match response $.name == &#39;Billie&#39;&#xA;Then match $.name == &#39;Billie&#39;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And similarly for XML and XPath, &#39;/&#39; represents the &lt;code&gt;response&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;# the four lines below are equivalent&#xA;Then match response / == &amp;lt;cat&amp;gt;&amp;lt;name&amp;gt;Billie&amp;lt;/name&amp;gt;&amp;lt;/cat&amp;gt;&#xA;Then match response/ == &amp;lt;cat&amp;gt;&amp;lt;name&amp;gt;Billie&amp;lt;/name&amp;gt;&amp;lt;/cat&amp;gt;&#xA;Then match response == &amp;lt;cat&amp;gt;&amp;lt;name&amp;gt;Billie&amp;lt;/name&amp;gt;&amp;lt;/cat&amp;gt;&#xA;Then match / == &amp;lt;cat&amp;gt;&amp;lt;name&amp;gt;Billie&amp;lt;/name&amp;gt;&amp;lt;/cat&amp;gt; &#xA;&#xA;# the three lines below are equivalent&#xA;Then match response /cat/name == &#39;Billie&#39;&#xA;Then match response/cat/name == &#39;Billie&#39;&#xA;Then match /cat/name == &#39;Billie&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;JsonPath short-cuts&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#get-short-cut&#34;&gt;&lt;code&gt;$varName&lt;/code&gt; form&lt;/a&gt; is used on the right-hand-side of &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-expressions&#34;&gt;Karate expressions&lt;/a&gt; and is &lt;em&gt;slightly&lt;/em&gt; different from pure &lt;a href=&#34;https://github.com/json-path/JsonPath#path-examples&#34;&gt;JsonPath expressions&lt;/a&gt; which always begin with &lt;code&gt;$.&lt;/code&gt; or &lt;code&gt;$[&lt;/code&gt;. Here is a summary of what the different &#39;shapes&#39; mean in Karate:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Shape&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;$.bar&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Pure JsonPath equivalent of &lt;code&gt;$response.bar&lt;/code&gt; where &lt;code&gt;response&lt;/code&gt; is a JSON object&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;$[0]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Pure JsonPath equivalent of &lt;code&gt;$response[0]&lt;/code&gt; where &lt;code&gt;response&lt;/code&gt; is a JSON array&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;$foo.bar&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Evaluates the JsonPath &lt;code&gt;$.bar&lt;/code&gt; on the variable &lt;code&gt;foo&lt;/code&gt; which is a JSON object or map-like&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;$foo[0]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Evaluates the JsonPath &lt;code&gt;$[0]&lt;/code&gt; on the variable &lt;code&gt;foo&lt;/code&gt; which is a JSON array or list-like&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;There is no need to prefix variable names with &lt;code&gt;$&lt;/code&gt; on the left-hand-side of &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match&#34;&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; statements because it is implied. You &lt;em&gt;can&lt;/em&gt; if you want to, but since &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match-and-variables&#34;&gt;&lt;em&gt;only&lt;/em&gt; JsonPath (on variables)&lt;/a&gt; is allowed here, Karate ignores the &lt;code&gt;$&lt;/code&gt; and looks only at the variable name. None of the examples in the documentation use the &lt;code&gt;$varName&lt;/code&gt; form on the LHS, and this is the recommended best-practice.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;&lt;code&gt;responseBytes&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;This will always hold the contents of the response as a byte-array. This is rarely used, unless you are expecting binary content returned by the server. The &lt;code&gt;match&lt;/code&gt; keyword will &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match-text-or-binary&#34;&gt;work as you expect&lt;/a&gt;. Here is an example: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/java/com/intuit/karate/core/mock/binary.feature&#34;&gt;&lt;code&gt;binary.feature&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;responseCookies&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;responseCookies&lt;/code&gt; variable is set upon any HTTP response and is a map-like (or JSON-like) object. It can be easily inspected or used in expressions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* assert responseCookies[&#39;my.key&#39;].value == &#39;someValue&#39;&#xA;&#xA;# karate&#39;s unified data handling means that even &#39;match&#39; works&#xA;* match responseCookies contains { time: &#39;#notnull&#39; }&#xA;&#xA;# ... which means that checking if a cookie does NOT exist is a piece of cake&#xA;* match responseCookies !contains { blah: &#39;#notnull&#39; }&#xA;&#xA;# save a response cookie for later use&#xA;* def time = responseCookies.time.value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As a convenience, cookies from the previous response are collected and passed as-is as part of the next HTTP request. This is what is normally expected and simulates a web-browser - which makes it easy to script things like HTML-form based authentication into test-flows. Refer to the documentation for &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#cookie&#34;&gt;&lt;code&gt;cookie&lt;/code&gt;&lt;/a&gt; for details and how you can disable this if need be.&lt;/p&gt; &#xA;&lt;p&gt;Each item within &lt;code&gt;responseCookies&lt;/code&gt; is itself a &#39;map-like&#39; object. Typically you would examine the &lt;code&gt;value&lt;/code&gt; property as in the example above, but &lt;code&gt;domain&lt;/code&gt; and &lt;code&gt;path&lt;/code&gt; are also available.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;responseHeaders&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match-header&#34;&gt;&lt;code&gt;match header&lt;/code&gt;&lt;/a&gt; which is what you would normally need.&lt;/p&gt; &#xA;&lt;p&gt;But if you need to use values in the response headers - they will be in a variable named &lt;code&gt;responseHeaders&lt;/code&gt;. Note that it is a &#39;map of lists&#39; so you will need to do things like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def contentType = responseHeaders[&#39;Content-Type&#39;][0]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And just as in the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#responsecookies&#34;&gt;&lt;code&gt;responseCookies&lt;/code&gt;&lt;/a&gt; example above, you can use &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match&#34;&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; to run complex validations on the &lt;code&gt;responseHeaders&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Finally, using &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-responseheader&#34;&gt;&lt;code&gt;karate.responseheader()&lt;/code&gt;&lt;/a&gt; can be simpler to just get a header value string by name, and it will ignore-case for the name passed as the argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* match karate.header(&#39;content-type&#39;) == &#39;application/json&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;responseStatus&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;You would normally only need to use the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#status&#34;&gt;&lt;code&gt;status&lt;/code&gt;&lt;/a&gt; keyword. But if you really need to use the HTTP response code in an expression or save it for later, you can get it as an integer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def uploadStatusCode = responseStatus&#xA;&#xA;# check if the response status is either of two values&#xA;Then assert responseStatus == 200 || responseStatus == 204&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match&#34;&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; can give you some extra readable options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* match [200, 201, 204] contains responseStatus&#xA;&#xA;# this may be sufficient to check a range of values&#xA;* assert responseStatus &amp;gt;= 200&#xA;* assert responseStatus &amp;lt; 300&#xA;&#xA;# but using karate.range() you can even do this !&#xA;* match karate.range(200, 299) contains responseStatus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;responseTime&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The response time (in milliseconds) for the current &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#response&#34;&gt;&lt;code&gt;response&lt;/code&gt;&lt;/a&gt; would be available in a variable called &lt;code&gt;responseTime&lt;/code&gt;. You can use this to assert that it was returned within the expected time like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;When method post&#xA;Then status 201&#xA;And assert responseTime &amp;lt; 1000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;responseType&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Karate will attempt to parse the raw HTTP response body as JSON or XML and make it available as the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#response&#34;&gt;&lt;code&gt;response&lt;/code&gt;&lt;/a&gt; value. If parsing fails, Karate will log a warning and the value of &lt;code&gt;response&lt;/code&gt; will then be a plain string. You can still perform string comparisons such as a &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match-text-or-binary&#34;&gt;&lt;code&gt;match contains&lt;/code&gt;&lt;/a&gt; and look for error messages etc. In rare cases, you may want to check what the &#34;type&#34; of the &lt;code&gt;response&lt;/code&gt; is and it can be one of 3 different values: &lt;code&gt;json&lt;/code&gt;, &lt;code&gt;xml&lt;/code&gt; and &lt;code&gt;string&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;So if you really wanted to assert that the HTTP response body is well-formed JSON or XML you can do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;When method post&#xA;Then status 201&#xA;And match responseType == &#39;json&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;requestTimeStamp&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Very rarely used - but you can get the Java system-time (for the current &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#response&#34;&gt;&lt;code&gt;response&lt;/code&gt;&lt;/a&gt;) at the point when the HTTP request was initiated (the value of &lt;code&gt;System.currentTimeMillis()&lt;/code&gt;) which can be used for detailed logging or custom framework / stats calculations.&lt;/p&gt; &#xA;&lt;h1&gt;HTTP Header Manipulation&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;code&gt;configure headers&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Custom header manipulation for every HTTP request is something that Karate makes very easy and pluggable. For every HTTP request made from Karate, the internal flow is as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;did we &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configure&#34;&gt;&lt;code&gt;configure&lt;/code&gt;&lt;/a&gt; the value of &lt;code&gt;headers&lt;/code&gt; ?&lt;/li&gt; &#xA; &lt;li&gt;if so, is the configured value a JavaScript function ? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;if so, a &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#call&#34;&gt;&lt;code&gt;call&lt;/code&gt;&lt;/a&gt; is made to that function.&lt;/li&gt; &#xA;   &lt;li&gt;did the function invocation return a map-like (or JSON) object ? &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;all the key-value pairs are added to the HTTP headers.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;or is the configured value a JSON object ? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;all the key-value pairs are added to the HTTP headers.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This makes setting up of complex authentication schemes for your test-flows really easy. It typically ends up being a one-liner that appears in the &lt;code&gt;Background&lt;/code&gt; section at the start of your test-scripts. You can re-use the function you create across your whole project.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example JavaScript function that uses some variables in the context (which have been possibly set as the result of a sign-in) to build the &lt;code&gt;Authorization&lt;/code&gt; header. Note how even &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#calling-java&#34;&gt;calls to Java code&lt;/a&gt; can be made if needed.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;In the example below, note the use of the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-get&#34;&gt;&lt;code&gt;karate.get()&lt;/code&gt;&lt;/a&gt; helper for getting the value of a dynamic variable (which was &lt;em&gt;not set&lt;/em&gt; at the time this JS &lt;code&gt;function&lt;/code&gt; was &lt;em&gt;declared&lt;/em&gt;). This is preferred because it takes care of situations such as if the value is &lt;code&gt;undefined&lt;/code&gt; in JavaScript. In rare cases you may need to &lt;em&gt;set&lt;/em&gt; a variable from this routine, and a good example is to make the generated UUID &#34;visible&#34; to the currently executing script or feature. You can easily do this via &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-set&#34;&gt;&lt;code&gt;karate.set(&#39;someVarName&#39;, value)&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function fn() {&#xA;  var uuid = &#39;&#39; + java.util.UUID.randomUUID(); // convert to string&#xA;  var out = { // so now the txid_header would be a unique uuid for each request&#xA;    txid_header: uuid,&#xA;    ip_header: &#39;123.45.67.89&#39;, // hard coded here, but also can be as dynamic as you want   &#xA;  };&#xA;  var authString = &#39;&#39;;&#xA;  var authToken = karate.get(&#39;authToken&#39;); // use the &#39;karate&#39; helper to do a &#39;safe&#39; get of a &#39;dynamic&#39; variable&#xA;  if (authToken) { // and if &#39;authToken&#39; is not null ... &#xA;    authString = &#39;,auth_type=MyAuthScheme&#39;&#xA;        + &#39;,auth_key=&#39; + authToken.key&#xA;        + &#39;,auth_user=&#39; + authToken.userId&#xA;        + &#39;,auth_project=&#39; + authToken.projectId;&#xA;  }&#xA;  // the &#39;appId&#39; variable here is expected to have been set via karate-config.js (bootstrap init) and will never change&#xA;  out[&#39;Authorization&#39;] = &#39;My_Auth app_id=&#39; + appId + authString;&#xA;  return out;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Assuming the above code is in a file called &lt;code&gt;my-headers.js&lt;/code&gt;, the next section on &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#calling-other-feature-files&#34;&gt;calling other feature files&lt;/a&gt; shows how it looks like in action at the beginning of a test script.&lt;/p&gt; &#xA;&lt;p&gt;Notice how once the &lt;code&gt;authToken&lt;/code&gt; variable is initialized, it is used by the above function to generate headers for every HTTP call made as part of the test flow.&lt;/p&gt; &#xA;&lt;p&gt;If a few steps in your flow need to temporarily change (or completely bypass) the currently-set header-manipulation scheme, just update &lt;code&gt;configure headers&lt;/code&gt; to a new value (or set it to &lt;code&gt;null&lt;/code&gt;) in the middle of a script. Then use the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#header&#34;&gt;&lt;code&gt;header&lt;/code&gt;&lt;/a&gt; keyword to do a custom &#39;over-ride&#39; if needed.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo&#34;&gt;karate-demo&lt;/a&gt; has an example showing various ways to &lt;code&gt;configure&lt;/code&gt; or set headers: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/headers/headers.feature&#34;&gt;&lt;code&gt;headers.feature&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;The &lt;code&gt;karate&lt;/code&gt; object&lt;/h1&gt; &#xA;&lt;p&gt;A JavaScript function or &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-expressions&#34;&gt;Karate expression&lt;/a&gt; at runtime has access to a utility object in a variable named: &lt;code&gt;karate&lt;/code&gt;. This provides the following methods:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Operation&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-abort&#34;&gt;&lt;code&gt;karate.abort()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;you can prematurely exit a &lt;code&gt;Scenario&lt;/code&gt; by combining this with &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#conditional-logic&#34;&gt;conditional logic&lt;/a&gt; like so: &lt;code&gt;* if (condition) karate.abort()&lt;/code&gt; - please use &lt;a href=&#34;https://martinfowler.com/articles/nonDeterminism.html&#34;&gt;sparingly&lt;/a&gt; ! and also see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configure&#34;&gt;&lt;code&gt;configure abortedStepsShouldPass&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-append&#34;&gt;&lt;code&gt;karate.append(... items)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;useful to create lists out of items (which can be lists as well), see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#json-transforms&#34;&gt;JSON transforms&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-appendto&#34;&gt;&lt;code&gt;karate.appendTo(name, ... items)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;useful to append to a list-like variable (that has to exist) in scope, see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#json-transforms&#34;&gt;JSON transforms&lt;/a&gt; - the first argument can be a reference to an array-like variable or even the name (string) of an existing variable which is list-like&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-call&#34;&gt;&lt;code&gt;karate.call(fileName, [arg])&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;invoke a &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#calling-other-feature-files&#34;&gt;&lt;code&gt;*.feature&lt;/code&gt; file&lt;/a&gt; or a &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#calling-javascript-functions&#34;&gt;JavaScript function&lt;/a&gt; the same way that &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#call&#34;&gt;&lt;code&gt;call&lt;/code&gt;&lt;/a&gt; works (with an optional solitary argument), see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#call-vs-read&#34;&gt;&lt;code&gt;call()&lt;/code&gt; vs &lt;code&gt;read()&lt;/code&gt;&lt;/a&gt; for details&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-callsingle&#34;&gt;&lt;code&gt;karate.callSingle(fileName, [arg])&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;like the above, but guaranteed to run &lt;strong&gt;only once&lt;/strong&gt; even across multiple features - see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karatecallsingle&#34;&gt;&lt;code&gt;karate.callSingle()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-configure&#34;&gt;&lt;code&gt;karate.configure(key, value)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;does the same thing as the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configure&#34;&gt;&lt;code&gt;configure&lt;/code&gt;&lt;/a&gt; keyword, and a very useful example is to do &lt;code&gt;karate.configure(&#39;connectTimeout&#39;, 5000);&lt;/code&gt; in &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configuration&#34;&gt;&lt;code&gt;karate-config.js&lt;/code&gt;&lt;/a&gt; - which has the &#39;global&#39; effect of not wasting time if a connection cannot be established within 5 seconds&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-distinct&#34;&gt;&lt;code&gt;karate.distinct(list)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;returns only unique items out of an array of strings or numbers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-doc&#34;&gt;&lt;code&gt;karate.doc(arg)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;just like &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-render&#34;&gt;&lt;code&gt;karate.render()&lt;/code&gt;&lt;/a&gt; but will insert the HTML into the report&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-embed&#34;&gt;&lt;code&gt;karate.embed(object, mimeType)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;embeds the object (can be raw bytes or an image) into the JSON report output, see this &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/embed/embed.feature&#34;&gt;example&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-env&#34;&gt;&lt;code&gt;karate.env&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;gets the value (read-only) of the environment property &#39;karate.env&#39;, and this is typically used for bootstrapping &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configuration&#34;&gt;configuration&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-eval&#34;&gt;&lt;code&gt;karate.eval(expression)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for really advanced needs, you can programmatically generate a snippet of JavaScript which can be evaluated at run-time, you can find an example &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-junit4/src/test/java/com/intuit/karate/junit4/demos/js-arrays.feature&#34;&gt;here&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-exec&#34;&gt;&lt;code&gt;karate.exec(command)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;convenient way to execute an OS specific command and return the console output e.g. &lt;code&gt;karate.exec(&#39;some.exe -h&#39;)&lt;/code&gt; (or &lt;code&gt;karate.exec([&#39;some.exe&#39;, &#39;-h&#39;])&lt;/code&gt;) useful for calling non-Java code (that can even return data) or for starting user-interfaces to be automated, this command will block until the process terminates, also see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-fork&#34;&gt;&lt;code&gt;karate.fork()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-extract&#34;&gt;&lt;code&gt;karate.extract(text, regex, group)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;useful to &#34;scrape&#34; text out of non-JSON or non-XML text sources such as HTML, &lt;code&gt;group&lt;/code&gt; follows the Java &lt;a href=&#34;https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html&#34;&gt;regex rules&lt;/a&gt;, see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/java/com/intuit/karate/core/extract.feature&#34;&gt;this example&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-extractall&#34;&gt;&lt;code&gt;karate.extractAll(text, regex, group)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;like the above, but returns a list of text-matches&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-fail&#34;&gt;&lt;code&gt;karate.fail(message)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;if you want to conditionally stop a test with a descriptive error message, e.g. &lt;code&gt;* if (condition) karate.fail(&#39;we expected something else&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-feature&#34;&gt;&lt;code&gt;karate.feature&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;get metadata about the currently executing feature within a test&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-filter&#34;&gt;&lt;code&gt;karate.filter(list, predicate)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;functional-style &#39;filter&#39; operation useful to filter list-like objects (e.g. JSON arrays), see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-junit4/src/test/java/com/intuit/karate/junit4/demos/js-arrays.feature&#34;&gt;example&lt;/a&gt;, the second argument has to be a JS function (item, [index]) that returns a &lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-filterkeys&#34;&gt;&lt;code&gt;karate.filterKeys(map, keys)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;extracts a sub-set of key-value pairs from the first argument, the second argument can be a list (or varargs) of keys - or even another JSON where only the keys would be used for extraction, &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-junit4/src/test/java/com/intuit/karate/junit4/demos/js-arrays.feature&#34;&gt;example&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;karate.forEach(list, function)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;functional-style &#39;loop&#39; operation useful to traverse list-like (or even map-like) objects (e.g. JSON / arrays), see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-junit4/src/test/java/com/intuit/karate/junit4/demos/js-arrays.feature&#34;&gt;example&lt;/a&gt;, the second argument has to be a JS function (item, [index]) for lists and (key, [value], [index]) for JSON / maps&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-fork&#34;&gt;&lt;code&gt;karate.fork(map)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;executes an OS command, but forks a process in parallel and will not block the test like &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-exec&#34;&gt;&lt;code&gt;karate.exec()&lt;/code&gt;&lt;/a&gt; e.g. &lt;code&gt;karate.fork({ args: [&#39;some.exe&#39;, &#39;-h&#39;] })&lt;/code&gt; or &lt;code&gt;karate.fork([&#39;some.exe&#39;, &#39;-h&#39;])&lt;/code&gt; - you can use a composite string as &lt;code&gt;line&lt;/code&gt; (or the solitary argument e.g. &lt;code&gt;karate.fork(&#39;some.exe -h&#39;)&lt;/code&gt;) instead of &lt;code&gt;args&lt;/code&gt;, and an optional &lt;code&gt;workingDir&lt;/code&gt; string property and &lt;code&gt;env&lt;/code&gt; JSON / map is also supported - this returns a &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/main/java/com/intuit/karate/shell/Command.java&#34;&gt;&lt;code&gt;Command&lt;/code&gt;&lt;/a&gt; object which has operations such as &lt;code&gt;waitSync()&lt;/code&gt; and &lt;code&gt;close()&lt;/code&gt; if you need more control, more details &lt;a href=&#34;https://stackoverflow.com/a/62911366/143475&#34;&gt;here&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-fromstring&#34;&gt;&lt;code&gt;karate.fromString(string)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for advanced conditional logic for e.g. when a string coming from an external process is dynamic - and whether it is JSON or XML is not known in advance, see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-junit4/src/test/java/com/intuit/karate/junit4/demos/type-conv.feature&#34;&gt;example&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-get&#34;&gt;&lt;code&gt;karate.get(name, [default])&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;get the value of a variable by name (or JsonPath expression), if not found - this returns &lt;code&gt;null&lt;/code&gt; which is easier to handle in JavaScript (than &lt;code&gt;undefined&lt;/code&gt;), and an optional (literal / constant) second argument can be used to return a &#34;default&#34; value, very useful to set variables in called features that have not been pre-defined&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-http&#34;&gt;&lt;code&gt;karate.http(url)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;returns a convenience &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/main/java/com/intuit/karate/Http.java&#34;&gt;&lt;code&gt;Http&lt;/code&gt;&lt;/a&gt; request builder class, only recommended for &lt;a href=&#34;https://github.com/intuit/karate/tree/develop/examples/ui-test#webdriver-tips&#34;&gt;advanced use&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-jsonpath&#34;&gt;&lt;code&gt;karate.jsonPath(json, expression)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;brings the power of &lt;a href=&#34;https://github.com/json-path/JsonPath&#34;&gt;JsonPath&lt;/a&gt; into JavaScript, and you can find an example &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-junit4/src/test/java/com/intuit/karate/junit4/demos/js-arrays.feature&#34;&gt;here&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-keysof&#34;&gt;&lt;code&gt;karate.keysOf(object)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;returns only the keys of a map-like object&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-log&#34;&gt;&lt;code&gt;karate.log(... args)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;log to the same logger (and log file) being used by the parent process, logging can be suppressed with &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configure&#34;&gt;&lt;code&gt;configure printEnabled&lt;/code&gt;&lt;/a&gt; set to &lt;code&gt;false&lt;/code&gt;, and just like &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#print&#34;&gt;&lt;code&gt;print&lt;/code&gt;&lt;/a&gt; - use comma-separated values to &#34;pretty print&#34; JSON or XML&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-logger-debug&#34;&gt;&lt;code&gt;karate.logger.debug(... args)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;access to the Karate logger directly and log in debug. Might be desirable instead of &lt;code&gt;karate.log&lt;/code&gt; or &lt;code&gt;print&lt;/code&gt; when looking to reduce the logs in console in your CI/CD pipeline but still retain the information for reports. See &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#logging&#34;&gt;Logging&lt;/a&gt; for additional details.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-lowercase&#34;&gt;&lt;code&gt;karate.lowerCase(object)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;useful to brute-force all keys and values in a JSON or XML payload to lower-case, useful in some cases, see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-junit4/src/test/java/com/intuit/karate/junit4/demos/lower-case.feature&#34;&gt;example&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-map&#34;&gt;&lt;code&gt;karate.map(list, function)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;functional-style &#39;map&#39; operation useful to transform list-like objects (e.g. JSON arrays), see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-junit4/src/test/java/com/intuit/karate/junit4/demos/js-arrays.feature&#34;&gt;example&lt;/a&gt;, the second argument has to be a JS function (item, [index])&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-mapwithkey&#34;&gt;&lt;code&gt;karate.mapWithKey(list, string)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;convenient for the common case of transforming an array of primitives into an array of objects, see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#json-transforms&#34;&gt;JSON transforms&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-match&#34;&gt;&lt;code&gt;karate.match(actual, expected)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;brings the power of the &lt;em&gt;fuzzy&lt;/em&gt; &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match&#34;&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; syntax into Karate-JS, returns a JSON in the form &lt;code&gt;{ pass: &#39;#boolean&#39;, message: &#39;#string&#39; }&lt;/code&gt; and you can find an example &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-junit4/src/test/java/com/intuit/karate/junit4/demos/js-arrays.feature&#34;&gt;here&lt;/a&gt; - you can even place a &lt;em&gt;full&lt;/em&gt; match expression like this: &lt;code&gt;karate.match(&#34;each foo contains { a: &#39;#number&#39; }&#34;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-merge&#34;&gt;&lt;code&gt;karate.merge(... maps)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;useful to merge the key-values of two (or more) JSON (or map-like) objects, see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#json-transforms&#34;&gt;JSON transforms&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-os&#34;&gt;&lt;code&gt;karate.os&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;returns the operating system details as JSON, for e.g. &lt;code&gt;{ type: &#39;macosx&#39;, name: &#39;Mac OS X&#39; }&lt;/code&gt; - useful for writing conditional logic, the possible &lt;code&gt;type&lt;/code&gt;-s being: &lt;code&gt;macosx&lt;/code&gt;, &lt;code&gt;windows&lt;/code&gt;, &lt;code&gt;linux&lt;/code&gt; and &lt;code&gt;unknown&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-pause&#34;&gt;&lt;code&gt;karate.pause(number)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;sleep time in milliseconds, relevant only for &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-gatling#think-time&#34;&gt;performance-testing&lt;/a&gt; - and will be a no-op otherwise unless &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configure&#34;&gt;&lt;code&gt;configure pauseIfNotPerf&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-pretty&#34;&gt;&lt;code&gt;karate.pretty(value)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;return a &#39;pretty-printed&#39;, nicely indented string representation of the JSON value, also see: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#print&#34;&gt;&lt;code&gt;print&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-prettyxml&#34;&gt;&lt;code&gt;karate.prettyXml(value)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;return a &#39;pretty-printed&#39;, nicely indented string representation of the XML value, also see: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#print&#34;&gt;&lt;code&gt;print&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-prevrequest&#34;&gt;&lt;code&gt;karate.prevRequest&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for advanced users, you can inspect the &lt;em&gt;actual&lt;/em&gt; HTTP request after it happens, useful if you are writing a framework over Karate, refer to this example: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/request/request.feature&#34;&gt;&lt;code&gt;request.feature&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-properties&#34;&gt;&lt;code&gt;karate.properties[key]&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;get the value of any Java system-property by name, useful for &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#dynamic-port-numbers&#34;&gt;advanced custom configuration&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-range&#34;&gt;&lt;code&gt;karate.range(start, end, [interval])&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;returns a JSON array of integers (inclusive), the optional third argument must be a positive integer and defaults to 1, and if start &amp;lt; end the order of values is reversed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-read&#34;&gt;&lt;code&gt;karate.read(filename)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;the same &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files&#34;&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/a&gt; function - which is pre-defined even within JS blocks, so there is no need to ever do &lt;code&gt;karate.read()&lt;/code&gt;, and just &lt;code&gt;read()&lt;/code&gt; is sufficient&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-readasbytes&#34;&gt;&lt;code&gt;karate.readAsBytes(filename)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;rarely used, like &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-readasstring&#34;&gt;&lt;code&gt;karate.readAsString&lt;/code&gt;&lt;/a&gt; - but returns a byte array&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-readasstream&#34;&gt;&lt;code&gt;karate.readAsStream(filename)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;rarely used, like &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-readasstring&#34;&gt;&lt;code&gt;karate.readAsString&lt;/code&gt;&lt;/a&gt; - but returns a Java &lt;code&gt;InputStream&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-readasstring&#34;&gt;&lt;code&gt;karate.readAsString(filename)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#read-file-as-string&#34;&gt;rarely used&lt;/a&gt;, behaves exactly like &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files&#34;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt; - but does &lt;em&gt;not&lt;/em&gt; auto convert to JSON or XML&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-remove&#34;&gt;&lt;code&gt;karate.remove(name, path)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;very rarely used - when needing to perform conditional removal of JSON keys or XML nodes. Behaves the same way as the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#remove&#34;&gt;&lt;code&gt;remove&lt;/code&gt;&lt;/a&gt; keyword.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-render&#34;&gt;&lt;code&gt;karate.render(arg)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;renders an HTML template, the &lt;code&gt;arg&lt;/code&gt; can be a string (prefixable path to the HTML) or a JSON that takes either a &lt;code&gt;path&lt;/code&gt; or &lt;code&gt;html&lt;/code&gt; property, see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#doc&#34;&gt;&lt;code&gt;doc&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-repeat&#34;&gt;&lt;code&gt;karate.repeat(count, function)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;useful for building an array with &lt;code&gt;count&lt;/code&gt; items or doing something &lt;code&gt;count&lt;/code&gt; times, refer this &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-junit4/src/test/java/com/intuit/karate/junit4/demos/repeat.feature&#34;&gt;example&lt;/a&gt;. Also see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#loops&#34;&gt;loops&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-responseheader&#34;&gt;&lt;code&gt;karate.responseHeader(string)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;returns the response HTTP header value (as a single string) for the given name, and will ignore-case, and can be simpler than using &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#responseheaders&#34;&gt;&lt;code&gt;responseHeaders&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-scenario&#34;&gt;&lt;code&gt;karate.scenario&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;get metadata about the currently executing &lt;code&gt;Scenario&lt;/code&gt; (or &lt;code&gt;Outline&lt;/code&gt; - &lt;code&gt;Example&lt;/code&gt;) within a test&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-set&#34;&gt;&lt;code&gt;karate.set(name, value)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;sets the value of a variable (immediately), which may be needed in case any other routines (such as the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configure-headers&#34;&gt;configured headers&lt;/a&gt;) depend on that variable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-setall&#34;&gt;&lt;code&gt;karate.set(object)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;where the single argument is expected to be a &lt;code&gt;Map&lt;/code&gt; or JSON-like, and will perform the above &lt;code&gt;karate.set()&lt;/code&gt; operation for all key-value pairs in one-shot, see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-junit4/src/test/java/com/intuit/karate/junit4/demos/set.feature&#34;&gt;example&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-setpath&#34;&gt;&lt;code&gt;karate.set(name, path, value)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;only needed when you need to conditionally build payload elements, especially XML. This is best explained via &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-junit4/src/test/java/com/intuit/karate/junit4/xml/xml.feature#L211&#34;&gt;an example&lt;/a&gt;, and it behaves the same way as the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#set&#34;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; keyword. Also see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#eval&#34;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-setxml&#34;&gt;&lt;code&gt;karate.setXml(name, xmlString)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;rarely used, refer to the example above&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-signal&#34;&gt;&lt;code&gt;karate.signal(result)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;trigger an event that &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-listen&#34;&gt;&lt;code&gt;karate.listen(timeout)&lt;/code&gt;&lt;/a&gt; is waiting for, and pass the data, see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#async&#34;&gt;async&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-sizeof&#34;&gt;&lt;code&gt;karate.sizeOf(object)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;returns the size of the map-like or list-like object&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-sort&#34;&gt;&lt;code&gt;karate.sort(list, function)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;sorts the list using the provided custom function called for each item in the list (and the optional second argument is the item index) e.g. &lt;code&gt;karate.sort(myList, x =&amp;gt; x.val)&lt;/code&gt;, and the second / function argument is not needed if the list is of plain strings or numbers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-start&#34;&gt;&lt;code&gt;karate.start()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;only for starting a mock from &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-netty#within-a-karate-test&#34;&gt;within a test / feature file see mocks&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-stop&#34;&gt;&lt;code&gt;karate.stop(port)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;will pause the test execution until a socket connection (even HTTP &lt;code&gt;GET&lt;/code&gt;) is made to the port logged to the console, useful for troubleshooting UI tests without using a &lt;a href=&#34;https://twitter.com/KarateDSL/status/1167533484560142336&#34;&gt;de-bugger&lt;/a&gt;, of course - &lt;em&gt;NEVER&lt;/em&gt; forget to remove this after use !&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-target&#34;&gt;&lt;code&gt;karate.target(object)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;currently for web-ui automation only, see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-core#target-lifecycle&#34;&gt;target lifecycle&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-tags&#34;&gt;&lt;code&gt;karate.tags&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for advanced users - scripts can introspect the tags that apply to the current scope, refer to this example: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-junit4/src/test/java/com/intuit/karate/junit4/demos/tags.feature&#34;&gt;&lt;code&gt;tags.feature&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-tagvalues&#34;&gt;&lt;code&gt;karate.tagValues&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for even more advanced users - Karate natively supports tags in a &lt;code&gt;@name=val1,val2&lt;/code&gt; format, and there is an inheritance mechanism where &lt;code&gt;Scenario&lt;/code&gt; level tags can over-ride &lt;code&gt;Feature&lt;/code&gt; level tags, refer to this example: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-junit4/src/test/java/com/intuit/karate/junit4/demos/tags.feature&#34;&gt;&lt;code&gt;tags.feature&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-toabsolutepath&#34;&gt;&lt;code&gt;karate.toAbsolutePath(relativePath)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;when you want to get the absolute OS path to the argument which could even have a prefix such as &lt;code&gt;classpath:&lt;/code&gt;, e.g. &lt;code&gt;karate.toAbsolutePath(&#39;some.json&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-tobean&#34;&gt;&lt;code&gt;karate.toBean(json, className)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;converts a JSON string or map-like object into a Java object, given the Java class name as the second argument, refer to this &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-junit4/src/test/java/com/intuit/karate/junit4/demos/type-conv.feature&#34;&gt;file&lt;/a&gt; for an example&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-tocsv&#34;&gt;&lt;code&gt;karate.toCsv(list)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;converts a JSON array (of objects) or a list-like object into a CSV string, writing this to a file is your responsibility or you could use &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-write&#34;&gt;&lt;code&gt;karate.write()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-tojava&#34;&gt;&lt;code&gt;karate.toJava(function)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;rarely used, when you need to pass a JS function to custom Java code, typically for &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#async&#34;&gt;Async&lt;/a&gt;, and another edge case is to convert a JSON array or object to a Java &lt;code&gt;List&lt;/code&gt; or &lt;code&gt;Map&lt;/code&gt;, see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/java/com/intuit/karate/core/to-bean.feature&#34;&gt;example&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-tojson&#34;&gt;&lt;code&gt;karate.toJson(object)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;converts a Java object into JSON, and &lt;code&gt;karate.toJson(object, true)&lt;/code&gt; will strip all keys that have &lt;code&gt;null&lt;/code&gt; values from the resulting JSON, convenient for unit-testing Java code, see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/unit/cat.feature&#34;&gt;example&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-typeof&#34;&gt;&lt;code&gt;karate.typeOf(any)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for advanced conditional logic when object types are dynamic and not known in advance, see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-junit4/src/test/java/com/intuit/karate/junit4/demos/type-conv.feature&#34;&gt;example&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-urldecode&#34;&gt;&lt;code&gt;karate.urlDecode(string)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;URL decode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-urlencode&#34;&gt;&lt;code&gt;karate.urlEncode(string)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;URL encode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-valuesof&#34;&gt;&lt;code&gt;karate.valuesOf(object)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;returns only the values of a map-like object (or itself if a list-like object)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-waitforhttp&#34;&gt;&lt;code&gt;karate.waitForHttp(url)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;will wait until the URL is ready to accept HTTP connections&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-waitforport&#34;&gt;&lt;code&gt;karate.waitForPort(host, port)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;will wait until the host:port is ready to accept socket connections&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-websocket&#34;&gt;&lt;code&gt;karate.webSocket(url, handler)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#websocket&#34;&gt;websocket&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-write&#34;&gt;&lt;code&gt;karate.write(object, path)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;normally not recommended, please &lt;a href=&#34;https://stackoverflow.com/a/54593057/143475&#34;&gt;read this first&lt;/a&gt;&lt;/em&gt; - writes the bytes of &lt;code&gt;object&lt;/code&gt; to a path which will &lt;em&gt;always&lt;/em&gt; be relative to the &#34;build&#34; directory (typically &lt;code&gt;target&lt;/code&gt;), see this example: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/embed/embed-pdf.js&#34;&gt;&lt;code&gt;embed-pdf.js&lt;/code&gt;&lt;/a&gt; - and this method returns a &lt;code&gt;java.io.File&lt;/code&gt; reference to the file created / written to&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;karate-xmlpath&#34;&gt;&lt;code&gt;karate.xmlPath(xml, expression)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Just like &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-jsonpath&#34;&gt;&lt;code&gt;karate.jsonPath()&lt;/code&gt;&lt;/a&gt; - but for XML, and allows you to use dynamic XPath if needed, see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-junit4/src/test/java/com/intuit/karate/junit4/xml/xml.feature&#34;&gt;example&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Code Reuse / Common Routines&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;code&gt;call&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;In any complex testing endeavor, you would find yourself needing &#39;common&#39; code that needs to be re-used across multiple test scripts. A typical need would be to perform a &#39;sign in&#39;, or create a fresh user as a pre-requisite for the scenarios being tested.&lt;/p&gt; &#xA;&lt;p&gt;There are two types of code that can be &lt;code&gt;call&lt;/code&gt;-ed. &lt;code&gt;*.feature&lt;/code&gt; files and &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#calling-javascript-functions&#34;&gt;JavaScript functions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Calling other &lt;code&gt;*.feature&lt;/code&gt; files&lt;/h2&gt; &#xA;&lt;p&gt;When you have a sequence of HTTP calls that need to be repeated for multiple test scripts, Karate allows you to treat a &lt;code&gt;*.feature&lt;/code&gt; file as a re-usable unit. You can also pass parameters into the &lt;code&gt;*.feature&lt;/code&gt; file being called, and extract variables out of the invocation result.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example of using the &lt;code&gt;call&lt;/code&gt; keyword to invoke another feature file, loaded using the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files&#34;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt; function:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you find this hard to understand at first, try looking at this &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/callfeature/call-feature.feature&#34;&gt;set of examples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Feature: which makes a &#39;call&#39; to another re-usable feature&#xA;&#xA;Background:&#xA;  * configure headers = read(&#39;classpath:my-headers.js&#39;)&#xA;  * def signIn = call read(&#39;classpath:my-signin.feature&#39;) { username: &#39;john&#39;, password: &#39;secret&#39; }&#xA;  * def authToken = signIn.authToken&#xA;&#xA;Scenario: some scenario&#xA;  # main test steps&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note that &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#def&#34;&gt;&lt;code&gt;def&lt;/code&gt;&lt;/a&gt; can be used to &lt;em&gt;assign&lt;/em&gt; a &lt;strong&gt;feature&lt;/strong&gt; to a variable. For example look at how &#34;&lt;code&gt;creator&lt;/code&gt;&#34; has been defined in the &lt;code&gt;Background&lt;/code&gt; in &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/calldynamic/call-dynamic-json.feature&#34;&gt;this example&lt;/a&gt;, and used later in a &lt;code&gt;call&lt;/code&gt; statement. This is very close to how &#34;custom keywords&#34; work in other frameworks. See this other example for more ideas: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/dsl/dsl.feature&#34;&gt;&lt;code&gt;dsl.feature&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The contents of &lt;code&gt;my-signin.feature&lt;/code&gt; are shown below. A few points to note:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Karate creates a new &#39;context&#39; for the feature file being invoked but passes along all variables and configuration. This means that all your &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configuration&#34;&gt;config variables&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configure&#34;&gt;&lt;code&gt;configure&lt;/code&gt; settings&lt;/a&gt; would be available to use, for example &lt;code&gt;loginUrlBase&lt;/code&gt; in the example below.&lt;/li&gt; &#xA; &lt;li&gt;When you use &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#def&#34;&gt;&lt;code&gt;def&lt;/code&gt;&lt;/a&gt; in the &#39;called&#39; feature, it will &lt;strong&gt;not&lt;/strong&gt; over-write variables in the &#39;calling&#39; feature (unless you explicitly choose to use &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#shared-scope&#34;&gt;shared scope&lt;/a&gt;). But note that JSON, XML, Map-like or List-like variables are &#39;passed by reference&#39; which means that &#39;called&#39; feature steps can &lt;em&gt;update&lt;/em&gt; or &#39;mutate&#39; them using the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#set&#34;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; keyword. Use the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#copy&#34;&gt;&lt;code&gt;copy&lt;/code&gt;&lt;/a&gt; keyword to &#39;clone&#39; a JSON or XML payload if needed, and refer to this example for more details: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/java/com/intuit/karate/core/copy.feature&#34;&gt;&lt;code&gt;copy.feature&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You can add (or over-ride) variables by passing a call &#39;argument&#39; as shown above. Only one JSON argument is allowed, but this does not limit you in any way as you can use any complex JSON structure. You can even initialize the JSON in a separate step and pass it by name, especially if it is complex. Observe how using JSON for parameter-passing makes things super-readable. In the &#39;called&#39; feature, the argument can also be accessed using the built-in variable: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#built-in-variables-for-call&#34;&gt;&lt;code&gt;__arg&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;All&lt;/strong&gt; variables that were defined (using &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#def&#34;&gt;&lt;code&gt;def&lt;/code&gt;&lt;/a&gt;) in the &#39;called&#39; script would be returned as &#39;keys&#39; within a JSON-like object. Note that this includes &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#special-variables&#34;&gt;&#39;built-in&#39; variables&lt;/a&gt;, which means that things like the last value of &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#response&#34;&gt;&lt;code&gt;response&lt;/code&gt;&lt;/a&gt; would also be present. In the example above you can see that the JSON &#39;envelope&#39; returned - is assigned to the variable named &lt;code&gt;signIn&lt;/code&gt;. And then getting hold of any data that was generated by the &#39;called&#39; script is as simple as accessing it by name, for example &lt;code&gt;signIn.authToken&lt;/code&gt; as shown above. This design has the following advantages: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&#39;called&#39; Karate scripts don&#39;t need to use any special keywords to &#39;return&#39; data and can behave like &#39;normal&#39; Karate tests in &#39;stand-alone&#39; mode if needed&lt;/li&gt; &#xA;   &lt;li&gt;the data &#39;return&#39; mechanism is &#39;safe&#39;, there is no danger of the &#39;called&#39; script over-writing any variables in the &#39;calling&#39; (or parent) script (unless you use &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#shared-scope&#34;&gt;shared scope&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;the need to explicitly &#39;unpack&#39; variables by name from the returned &#39;envelope&#39; keeps things readable and maintainable in the &#39;caller&#39; script&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note that only &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#def&#34;&gt;variables&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configure&#34;&gt;configuration settings&lt;/a&gt; will be passed. You can&#39;t do things such as &lt;code&gt;* url &#39;http://foo.bar&#39;&lt;/code&gt; and expect the URL to be set in the &#34;called&#34; feature. Use a variable in the &#34;called&#34; feature instead, for e.g. &lt;code&gt;* url myUrl&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Feature: here are the contents of &#39;my-signin.feature&#39;&#xA;&#xA;Scenario:&#xA;  Given url loginUrlBase&#xA;  And request { userId: &#39;#(username)&#39;, userPass: &#39;#(password)&#39; }&#xA;  When method post&#xA;  Then status 200&#xA;  And def authToken = response&#xA;&#xA;  # second HTTP call, to get a list of &#39;projects&#39;&#xA;  Given path &#39;users&#39;, authToken.userId, &#39;projects&#39;&#xA;  When method get&#xA;  Then status 200&#xA;  # logic to &#39;choose&#39; first project&#xA;  And set authToken.projectId = response.projects[0].projectId;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above example actually makes two HTTP requests - the first is a standard &#39;sign-in&#39; POST and then (for illustrative purposes) another HTTP call (a GET) is made for retrieving a list of projects for the signed-in user, and the first one is &#39;selected&#39; and added to the returned &#39;auth token&#39; JSON object.&lt;/p&gt; &#xA;&lt;p&gt;So you get the picture, any kind of complicated &#39;sign-in&#39; flow can be scripted and re-used.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If the second HTTP call above expects headers to be set by &lt;code&gt;my-headers.js&lt;/code&gt; - which in turn depends on the &lt;code&gt;authToken&lt;/code&gt; variable being updated, you will need to duplicate the line &lt;code&gt;* configure headers = read(&#39;classpath:my-headers.js&#39;)&lt;/code&gt; from the &#39;caller&#39; feature here as well. The above example does &lt;strong&gt;not&lt;/strong&gt; use &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#shared-scope&#34;&gt;shared scope&lt;/a&gt;, which means that the variables in the &#39;calling&#39; (parent) feature are &lt;em&gt;not&lt;/em&gt; shared by the &#39;called&#39; &lt;code&gt;my-signin.feature&lt;/code&gt;. The above example can be made more simpler with the use of &lt;code&gt;call&lt;/code&gt; (or &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#callonce&#34;&gt;&lt;code&gt;callonce&lt;/code&gt;&lt;/a&gt;) &lt;em&gt;without&lt;/em&gt; a &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#def&#34;&gt;&lt;code&gt;def&lt;/code&gt;&lt;/a&gt;-assignment to a variable, and is the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#shared-scope&#34;&gt;recommended pattern&lt;/a&gt; for implementing re-usable authentication setup flows.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Do look at the documentation and example for &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configure-headers&#34;&gt;&lt;code&gt;configure headers&lt;/code&gt;&lt;/a&gt; also as it goes hand-in-hand with &lt;code&gt;call&lt;/code&gt;. In the above example, the end-result of the &lt;code&gt;call&lt;/code&gt; to &lt;code&gt;my-signin.feature&lt;/code&gt; resulted in the &lt;code&gt;authToken&lt;/code&gt; variable being initialized. Take a look at how the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configure-headers&#34;&gt;&lt;code&gt;configure headers&lt;/code&gt;&lt;/a&gt; example uses the &lt;code&gt;authToken&lt;/code&gt; variable.&lt;/p&gt; &#xA;&lt;h3&gt;Call Tag Selector&lt;/h3&gt; &#xA;&lt;p&gt;You can &#34;select&#34; a single &lt;code&gt;Scenario&lt;/code&gt; (or &lt;code&gt;Scenario&lt;/code&gt;-s or &lt;code&gt;Scenario Outline&lt;/code&gt;-s or even specific &lt;code&gt;Examples&lt;/code&gt; rows) by appending a &#34;tag selector&#34; at the end of the feature-file you are calling. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;call read(&#39;classpath:my-signin.feature@name=someScenarioName&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;While the tag does not need to be in the &lt;code&gt;@key=value&lt;/code&gt; form, it is recommended for readability when you start getting into the business of giving meaningful names to your &lt;code&gt;Scenario&lt;/code&gt;-s.&lt;/p&gt; &#xA;&lt;p&gt;This &#34;tag selection&#34; capability is designed for you to be able to &#34;compose&#34; flows out of existing test-suites when using the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-gatling&#34;&gt;Karate Gatling integration&lt;/a&gt;. Normally we recommend that you keep your &#34;re-usable&#34; features lightweight - by limiting them to just one &lt;code&gt;Scenario&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Call Same Feature&lt;/h4&gt; &#xA;&lt;p&gt;As a convenience, you can call a tag directly, which is a short-cut to call another &lt;code&gt;Scenario&lt;/code&gt; within the same feature file. Note that you would typically want to use the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#special-tags&#34;&gt;&lt;code&gt;@ignore&lt;/code&gt;&lt;/a&gt; tag for such cases.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Scenario: one&#xA;* call read(&#39;@two&#39;)&#xA;&#xA;@ignore @two&#xA;Scenario: two&#xA;* print &#39;called&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Data-Driven Features&lt;/h3&gt; &#xA;&lt;p&gt;If the argument passed to the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#calling-other-feature-files&#34;&gt;call of a &lt;code&gt;*.feature&lt;/code&gt; file&lt;/a&gt; is a JSON array, something interesting happens. The feature is invoked for each item in the array. Each array element is expected to be a JSON object, and for each object - the behavior will be as described above.&lt;/p&gt; &#xA;&lt;p&gt;But this time, the return value from the &lt;code&gt;call&lt;/code&gt; step will be a JSON array of the same size as the input array. And each element of the returned array will be the &#39;envelope&#39; of variables that resulted from each iteration where the &lt;code&gt;*.feature&lt;/code&gt; got invoked.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example that combines the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#table&#34;&gt;&lt;code&gt;table&lt;/code&gt;&lt;/a&gt; keyword with calling a &lt;code&gt;*.feature&lt;/code&gt;. Observe how the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#get&#34;&gt;&lt;code&gt;get&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#get-short-cut&#34;&gt;shortcut&lt;/a&gt; is used to &#39;distill&#39; the result array of variable &#39;envelopes&#39; into an array consisting only of &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#response&#34;&gt;&lt;code&gt;response&lt;/code&gt;&lt;/a&gt; payloads.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* table kittens &#xA;  | name   | age |&#xA;  | &#39;Bob&#39;  |   2 |&#xA;  | &#39;Wild&#39; |   1 |&#xA;  | &#39;Nyan&#39; |   3 |&#xA;&#xA;* def result = call read(&#39;cat-create.feature&#39;) kittens&#xA;* def created = $result[*].response&#xA;* match each created == { id: &#39;#number&#39;, name: &#39;#string&#39;, age: &#39;#number&#39; }&#xA;* match created[*].name contains only [&#39;Bob&#39;, &#39;Wild&#39;, &#39;Nyan&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And here is how &lt;code&gt;cat-create.feature&lt;/code&gt; could look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;@ignore&#xA;Feature:&#xA;&#xA;Scenario:&#xA;  Given url someUrlFromConfig&#xA;  And path &#39;cats&#39;&#xA;  And request { name: &#39;#(name)&#39;, age: &#39;#(age)&#39; }&#xA;  When method post&#xA;  Then status 200&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you replace the &lt;code&gt;table&lt;/code&gt; with perhaps a JavaScript function call that gets some JSON data from some data-source, you can imagine how you could go about dynamic data-driven testing.&lt;/p&gt; &#xA;&lt;p&gt;Although it is just a few lines of code, take time to study the above example carefully. It is a great example of how to effectively use the unique combination of Cucumber and JsonPath that Karate provides.&lt;/p&gt; &#xA;&lt;p&gt;Also look at the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo&#34;&gt;demo examples&lt;/a&gt;, especially &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/search/dynamic-params.feature&#34;&gt;&lt;code&gt;dynamic-params.feature&lt;/code&gt;&lt;/a&gt; - to compare the above approach with how the Cucumber &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#the-cucumber-way&#34;&gt;&lt;code&gt;Scenario Outline:&lt;/code&gt;&lt;/a&gt; can be alternatively used for data-driven tests.&lt;/p&gt; &#xA;&lt;h3&gt;Built-in variables for &lt;code&gt;call&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Although all properties in the passed JSON-like argument are &#39;unpacked&#39; into the current scope as separate &#39;named&#39; variables, it sometimes makes sense to access the whole argument and this can be done via &lt;code&gt;__arg&lt;/code&gt;. And if being called in a loop, a built-in variable called &lt;code&gt;__loop&lt;/code&gt; will also be available that will hold the value of the current loop index. So you can do things like this: &lt;code&gt;* def name = name + __loop&lt;/code&gt; - or you can use the loop index value for looking up other values that may be in scope - in a data-driven style.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Refers To&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;__arg&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;the single &lt;code&gt;call&lt;/code&gt; (or &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#callonce&#34;&gt;&lt;code&gt;callonce&lt;/code&gt;&lt;/a&gt;) argument, will be &lt;code&gt;null&lt;/code&gt; if there was none&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;__loop&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;the current iteration index (starts from 0) if being called in a loop, will be &lt;code&gt;-1&lt;/code&gt; if not&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Refer to this &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo&#34;&gt;demo feature&lt;/a&gt; for an example: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/calltable/kitten-create.feature&#34;&gt;&lt;code&gt;kitten-create.feature&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Default Values&lt;/h3&gt; &#xA;&lt;p&gt;Some users need &#34;callable&#34; features that are re-usable even when variables have not been defined by the calling feature. Normally an undefined variable results in nasty JavaScript errors. But there is an elegant way you can specify a default value using the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-get&#34;&gt;&lt;code&gt;karate.get()&lt;/code&gt;&lt;/a&gt; API:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;# if foo is not defined, it will default to 42&#xA;* def foo = karate.get(&#39;foo&#39;, 42)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A word of caution: we recommend that you should not over-use Karate&#39;s capability of being able to re-use features. Re-use can sometimes result in negative benefits - especially when applied to test-automation. Prefer readability over re-use. See this for an &lt;a href=&#34;https://stackoverflow.com/a/54126724/143475&#34;&gt;example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;&lt;code&gt;copy&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;For a &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#call&#34;&gt;&lt;code&gt;call&lt;/code&gt;&lt;/a&gt; (or &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#callonce&#34;&gt;&lt;code&gt;callonce&lt;/code&gt;&lt;/a&gt;) - payload / data structures (JSON, XML, Map-like or List-like) variables are &#39;passed by reference&#39; which means that steps within the &#39;called&#39; feature can update or &#39;mutate&#39; them, for e.g. using the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#set&#34;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; keyword. This is actually the intent most of the time and is convenient. If you want to pass a &#39;clone&#39; to a &#39;called&#39; feature, you can do so using the rarely used &lt;code&gt;copy&lt;/code&gt; keyword that works very similar to &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#type-conversion&#34;&gt;type conversion&lt;/a&gt;. This is best explained in this example: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/java/com/intuit/karate/core/copy.feature&#34;&gt;&lt;code&gt;copy.feature&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Calling JavaScript Functions&lt;/h2&gt; &#xA;&lt;p&gt;Examples of &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#javascript-functions&#34;&gt;defining and using JavaScript functions&lt;/a&gt; appear in earlier sections of this document. Being able to define and re-use JavaScript functions is a powerful capability of Karate. For example, you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;call re-usable functions that take complex data as an argument and return complex data that can be stored in a variable&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#calling-java&#34;&gt;call and interoperate with Java code&lt;/a&gt; if needed&lt;/li&gt; &#xA; &lt;li&gt;share and re-use test &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#commonly-needed-utilities&#34;&gt;utilities&lt;/a&gt; or &#39;helper&#39; functionality across your organization&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For an advanced example of how you can build and re-use a common set of JS functions, refer to &lt;a href=&#34;https://stackoverflow.com/a/49384760/143475&#34;&gt;this answer on Stack Overflow&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;In real-life scripts, you would typically also use this capability of Karate to &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configure-headers&#34;&gt;&lt;code&gt;configure headers&lt;/code&gt;&lt;/a&gt; where the specified JavaScript function uses the variables that result from a &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#calling-other-feature-files&#34;&gt;sign in&lt;/a&gt; to manipulate headers for all subsequent HTTP requests. And it is worth mentioning that the Karate &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configuration&#34;&gt;configuration &#39;bootstrap&#39;&lt;/a&gt; routine is itself a JavaScript function.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Also refer to the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#eval&#34;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; keyword for a simpler way to execute arbitrary JavaScript that can be useful in some situations.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;JS function argument rules for &lt;code&gt;call&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;When using &lt;code&gt;call&lt;/code&gt; (or &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#callonce&#34;&gt;&lt;code&gt;callonce&lt;/code&gt;&lt;/a&gt;), only one argument is allowed. But this does not limit you in any way, because similar to how you can &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#calling-other-feature-files&#34;&gt;call &lt;code&gt;*.feature files&lt;/code&gt;&lt;/a&gt;, you can pass a whole JSON object as the argument. In the case of the &lt;code&gt;call&lt;/code&gt; of a JavaScript function, you can also pass a JSON array or a primitive (string, number, boolean) as the solitary argument, and the function implementation is expected to handle whatever is passed.&lt;/p&gt; &#xA;&lt;p&gt;Instead of using &lt;code&gt;call&lt;/code&gt; (or &lt;code&gt;callonce&lt;/code&gt;) you are always free to call JavaScript functions &#39;normally&#39; and then you can use more than one argument.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def adder = function(a, b){ return a + b }&#xA;* assert adder(1, 2) == 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Return types&lt;/h3&gt; &#xA;&lt;p&gt;Naturally, only one value can be returned. But again, you can return a JSON object. There are two things that can happen to the returned value.&lt;/p&gt; &#xA;&lt;p&gt;Either - it can be assigned to a variable like so.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def returnValue = call myFunction&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or - if a &lt;code&gt;call&lt;/code&gt; is made without an assignment, and if the function returns a map-like object, it will add each key-value pair returned as a new variable into the execution context.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;# while this looks innocent ...&#xA;# ... behind the scenes, it could be creating (or over-writing) a bunch of variables !&#xA;* call someFunction&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;While this sounds dangerous and should be used with care (and limits readability), the reason this feature exists is to quickly set (or over-write) a bunch of config variables when needed. In fact, this is the mechanism used when &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configuration&#34;&gt;&lt;code&gt;karate-config.js&lt;/code&gt;&lt;/a&gt; is processed on start-up.&lt;/p&gt; &#xA;&lt;h4&gt;Shared Scope&lt;/h4&gt; &#xA;&lt;p&gt;This behavior where all key-value pairs in the returned map-like object get automatically added as variables - applies to the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#calling-other-feature-files&#34;&gt;calling of &lt;code&gt;*.feature&lt;/code&gt; files&lt;/a&gt; as well. In other words, when &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#call&#34;&gt;&lt;code&gt;call&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#callonce&#34;&gt;&lt;code&gt;callonce&lt;/code&gt;&lt;/a&gt; is used without a &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#def&#34;&gt;&lt;code&gt;def&lt;/code&gt;&lt;/a&gt;, the &#39;called&#39; script not only shares all variables (and &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configure&#34;&gt;&lt;code&gt;configure&lt;/code&gt;&lt;/a&gt; settings) but can update the shared execution context. This is very useful to boil-down those &#39;common&#39; steps that you may have to perform at the start of multiple test-scripts - into one-liners. But use wisely, because called scripts will now over-write variables that may have been already defined.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def config = { user: &#39;john&#39;, password: &#39;secret&#39; }&#xA;# this next line may perform many steps and result in multiple variables set for the rest of the script&#xA;* call read(&#39;classpath:common-setup.feature&#39;) config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#callonce&#34;&gt;&lt;code&gt;callonce&lt;/code&gt;&lt;/a&gt; instead of &lt;code&gt;call&lt;/code&gt; within the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#script-structure&#34;&gt;&lt;code&gt;Background&lt;/code&gt;&lt;/a&gt; in case you have multiple &lt;code&gt;Scenario&lt;/code&gt; sections or &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#data-driven-tests&#34;&gt;&lt;code&gt;Examples&lt;/code&gt;&lt;/a&gt;. Note the &#39;inline&#39; use of the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files&#34;&gt;read&lt;/a&gt; function as a short-cut above. This applies to JS functions as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* call read(&#39;my-function.js&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These heavily commented &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo&#34;&gt;demo examples&lt;/a&gt; can help you understand &#39;shared scope&#39; better, and are designed to get you started with creating re-usable &#39;sign-in&#39; or authentication flows:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Scope&lt;/th&gt; &#xA;   &lt;th&gt;Caller Feature&lt;/th&gt; &#xA;   &lt;th&gt;Called Feature&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Isolated&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/headers/call-isolated-headers.feature&#34;&gt;&lt;code&gt;call-isolated-headers.feature&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/headers/common-multiple.feature&#34;&gt;&lt;code&gt;common-multiple.feature&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Shared&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/headers/call-updates-config.feature&#34;&gt;&lt;code&gt;call-updates-config.feature&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/headers/common.feature&#34;&gt;&lt;code&gt;common.feature&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Once you get comfortable with Karate, you can consider moving your authentication flow into a &#39;global&#39; one-time flow using &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-callsingle&#34;&gt;&lt;code&gt;karate.callSingle()&lt;/code&gt;&lt;/a&gt;, think of it as &#39;&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#callonce&#34;&gt;&lt;code&gt;callonce&lt;/code&gt;&lt;/a&gt; on steroids&#39;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;&lt;code&gt;call&lt;/code&gt; vs &lt;code&gt;read()&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Since this is a frequently asked question, the different ways of being able to re-use code (or data) are summarized below.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Code&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;* def login = read(&#39;login.feature&#39;)&lt;/code&gt;&lt;br&gt;&lt;code&gt;* call login&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#shared-scope&#34;&gt;Shared Scope&lt;/a&gt;, and the &lt;br&gt;&lt;code&gt;login&lt;/code&gt; variable can be re-used&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;* call read(&#39;login.feature&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;short-cut for the above &lt;br&gt;without needing a variable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;* def credentials = read(&#39;credentials.json&#39;)&lt;/code&gt;&lt;br&gt;&lt;code&gt;* def login = read(&#39;login.feature&#39;)&lt;/code&gt;&lt;br&gt;&lt;code&gt;* call login credentials&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Note how using &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files&#34;&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/a&gt; &lt;br&gt;for a JSON file returns &lt;em&gt;data&lt;/em&gt; - &lt;br&gt;not &#34;callable&#34; code, and here it is &lt;br&gt;used as the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#call&#34;&gt;&lt;code&gt;call&lt;/code&gt;&lt;/a&gt; argument&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;* call read(&#39;login.feature&#39;) read(&#39;credentials.json&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;You &lt;em&gt;can&lt;/em&gt; do this in theory, &lt;br&gt;but it is not as readable as the above&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;* karate.call(&#39;login.feature&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-call&#34;&gt;JS API&lt;/a&gt; allows you to do this, &lt;br&gt;but this will &lt;em&gt;not&lt;/em&gt; be &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#shared-scope&#34;&gt;Shared Scope&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;* def result = call read(&#39;login.feature&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#call&#34;&gt;&lt;code&gt;call&lt;/code&gt;&lt;/a&gt; result assigned to a variable &lt;br&gt;and &lt;em&gt;not&lt;/em&gt; &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#shared-scope&#34;&gt;Shared Scope&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;* def result = karate.call(&#39;login.feature&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;exactly equivalent to the above !&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;* if (cond) karate.call(true, &#39;login.feature&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;if you need &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#conditional-logic&#34;&gt;conditional logic&lt;/a&gt; &lt;br&gt;&lt;em&gt;and&lt;/em&gt; &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#shared-scope&#34;&gt;Shared Scope&lt;/a&gt;, add a &lt;br&gt;boolean &lt;code&gt;true&lt;/code&gt; first argument&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;* def credentials = read(&#39;credentials.json&#39;)&lt;/code&gt;&lt;br&gt;&lt;code&gt;* def result = call read(&#39;login.feature&#39;) credentials&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;like the above, &lt;br&gt;but with a &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#call&#34;&gt;&lt;code&gt;call&lt;/code&gt;&lt;/a&gt; argument&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;* def credentials = read(&#39;credentials.json&#39;)&lt;/code&gt;&lt;br&gt;&lt;code&gt;* def result = karate.call(&#39;login.feature&#39;, credentials)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;like the above, but in &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-call&#34;&gt;JS API&lt;/a&gt; form, &lt;br&gt;the advantage of the above form is &lt;br&gt;that using an in-line argument is less &lt;br&gt;&#34;cluttered&#34; (see next row)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;* def login = read(&#39;login.feature&#39;)&lt;/code&gt;&lt;br&gt;&lt;code&gt;* def result = call login { user: &#39;john&#39;, password: &#39;secret&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;using the &lt;code&gt;call&lt;/code&gt; keyword makes &lt;br&gt;passing an in-line JSON argument &lt;br&gt;more &#34;readable&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;* call read &#39;credentials.json&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Since &#34;&lt;code&gt;read&lt;/code&gt;&#34; happens to be a &lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#calling-javascript-functions&#34;&gt;&lt;em&gt;function&lt;/em&gt;&lt;/a&gt; (that takes a single &lt;br&gt;string argument), this has the effect &lt;br&gt;of loading &lt;em&gt;all&lt;/em&gt; keys in the JSON file&lt;br&gt;into &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#shared-scope&#34;&gt;Shared Scope&lt;/a&gt; as &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#def&#34;&gt;variables&lt;/a&gt; ! &lt;br&gt;This &lt;em&gt;can&lt;/em&gt; be &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-core#locator-lookup&#34;&gt;sometimes handy&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;* call read (&#39;credentials.json&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A common mistake. First, there &lt;br&gt;is no meaning in &lt;code&gt;call&lt;/code&gt; for JSON. &lt;br&gt;Second, the space after the &#34;&lt;code&gt;read&lt;/code&gt;&#34; &lt;br&gt;makes this equal to the above.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;* karate.set(read(&#39;credentials.json&#39;))&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;For completeness - this has &lt;em&gt;exactly&lt;/em&gt; the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-setall&#34;&gt;same effect&lt;/a&gt; as the above two rows !&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Calling Java&lt;/h3&gt; &#xA;&lt;p&gt;There are examples of calling JVM classes in the section on &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#java-interop&#34;&gt;Java Interop&lt;/a&gt; and in the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo&#34;&gt;file-upload demo&lt;/a&gt;. Also look at the section on &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#commonly-needed-utilities&#34;&gt;commonly needed utilities&lt;/a&gt; for more ideas.&lt;/p&gt; &#xA;&lt;p&gt;Calling any Java code is that easy. Given this custom, user-defined Java class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package com.mycompany;&#xA;&#xA;import java.util.HashMap;&#xA;import java.util.Map;&#xA;&#xA;public class JavaDemo {    &#xA;    &#xA;    public Map&amp;lt;String, Object&amp;gt; doWork(String fromJs) {&#xA;        Map&amp;lt;String, Object&amp;gt; map = new HashMap&amp;lt;&amp;gt;();&#xA;        map.put(&#34;someKey&#34;, &#34;hello &#34; + fromJs);&#xA;        return map;&#xA;    }&#xA;&#xA;    public static String doWorkStatic(String fromJs) {&#xA;        return &#34;hello &#34; + fromJs;&#xA;    }   &#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is how it can be called from a test-script via &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#javascript-functions&#34;&gt;JavaScript&lt;/a&gt;, and yes, even static methods can be invoked:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def doWork =&#xA;  &#34;&#34;&#34;&#xA;  function(arg) {&#xA;    var JavaDemo = Java.type(&#39;com.mycompany.JavaDemo&#39;);&#xA;    var jd = new JavaDemo();&#xA;    return jd.doWork(arg);  &#xA;  }&#xA;  &#34;&#34;&#34;&#xA;# in this case the solitary &#39;call&#39; argument is of type string&#xA;* def result = call doWork &#39;world&#39;&#xA;* match result == { someKey: &#39;hello world&#39; }&#xA;&#xA;# using a static method - observe how java interop is truly seamless !&#xA;* def JavaDemo = Java.type(&#39;com.mycompany.JavaDemo&#39;)&#xA;* def result = JavaDemo.doWorkStatic(&#39;world&#39;)&#xA;* assert result == &#39;hello world&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that JSON gets auto-converted to &lt;code&gt;Map&lt;/code&gt; (or &lt;code&gt;List&lt;/code&gt;) when making the cross-over to Java. Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/java/cats-java.feature&#34;&gt;&lt;code&gt;cats-java.feature&lt;/code&gt;&lt;/a&gt; demo for an example.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;An additional-level of auto-conversion happens when objects cross the boundary between JS and Java. In the rare case that you need to mutate a &lt;code&gt;Map&lt;/code&gt; or &lt;code&gt;List&lt;/code&gt; returned from Java but while still within a JS block, use &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-tojson&#34;&gt;&lt;code&gt;karate.toJson()&lt;/code&gt;&lt;/a&gt; to convert.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Another example is &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/dogs/dogs.feature&#34;&gt;&lt;code&gt;dogs.feature&lt;/code&gt;&lt;/a&gt; - which actually makes JDBC (database) calls, and since the data returned from the Java code is JSON, the last section of the test is able to use &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match&#34;&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; &lt;em&gt;very&lt;/em&gt; effectively for data assertions.&lt;/p&gt; &#xA;&lt;p&gt;A great example of how you can extend Karate, even bypass the HTTP client but still use Karate&#39;s test-automation effectively, is this &lt;a href=&#34;https://grpc.io&#34;&gt;gRPC&lt;/a&gt; example by &lt;a href=&#34;https://github.com/thinkerou&#34;&gt;@thinkerou&lt;/a&gt;: &lt;a href=&#34;https://github.com/thinkerou/karate-grpc&#34;&gt;&lt;code&gt;karate-grpc&lt;/code&gt;&lt;/a&gt;. And you can even handle asynchronous flows such as &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#async&#34;&gt;listening to message-queues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;HTTP Basic Authentication Example&lt;/h4&gt; &#xA;&lt;p&gt;This should make it clear why Karate does not provide &#39;out of the box&#39; support for any particular HTTP authentication scheme. Things are designed so that you can plug-in what you need, without needing to compile Java code. You get to choose how to manage your environment-specific configuration values such as user-names and passwords.&lt;/p&gt; &#xA;&lt;p&gt;First the JavaScript file, &lt;code&gt;basic-auth.js&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function fn(creds) {&#xA;  var temp = creds.username + &#39;:&#39; + creds.password;&#xA;  var Base64 = Java.type(&#39;java.util.Base64&#39;);&#xA;  var encoded = Base64.getEncoder().encodeToString(temp.toString().getBytes());&#xA;  return &#39;Basic &#39; + encoded;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And here&#39;s how it works in a test-script using the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#header&#34;&gt;&lt;code&gt;header&lt;/code&gt;&lt;/a&gt; keyword.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* header Authorization = call read(&#39;basic-auth.js&#39;) { username: &#39;john&#39;, password: &#39;secret&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can set this up for all subsequent requests or dynamically generate headers for each HTTP request if you &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configure-headers&#34;&gt;&lt;code&gt;configure headers&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;callonce&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Cucumber has a limitation where &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#script-structure&#34;&gt;&lt;code&gt;Background&lt;/code&gt;&lt;/a&gt; steps are re-run for every &lt;code&gt;Scenario&lt;/code&gt;. And if you have a &lt;code&gt;Scenario Outline&lt;/code&gt;, this happens for &lt;em&gt;every&lt;/em&gt; row in the &lt;code&gt;Examples&lt;/code&gt;. This is a problem especially for expensive, time-consuming HTTP calls, and this has been an &lt;a href=&#34;https://github.com/cucumber/cucumber-jvm/issues/515&#34;&gt;open issue for a long time&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Karate&#39;s &lt;code&gt;callonce&lt;/code&gt; keyword behaves exactly like &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#call&#34;&gt;&lt;code&gt;call&lt;/code&gt;&lt;/a&gt; but is guaranteed to execute only once. The results of the first call are cached, and any future calls will simply return the cached result instead of executing the JavaScript function (or feature) again and again.&lt;/p&gt; &#xA;&lt;p&gt;This does require you to move &#39;set-up&#39; into a separate &lt;code&gt;*.feature&lt;/code&gt; (or JavaScript) file. But this totally makes sense for things not part of the &#39;main&#39; test flow and which typically need to be re-usable anyway.&lt;/p&gt; &#xA;&lt;p&gt;So when you use the combination of &lt;code&gt;callonce&lt;/code&gt; in a &lt;code&gt;Background&lt;/code&gt;, you can indeed get the same effect as using a &lt;a href=&#34;http://junit.sourceforge.net/javadoc/org/junit/BeforeClass.html&#34;&gt;&lt;code&gt;@BeforeClass&lt;/code&gt;&lt;/a&gt; annotation, and you can find examples in the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo&#34;&gt;karate-demo&lt;/a&gt;, such as this one: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/callonce/call-once.feature&#34;&gt;&lt;code&gt;callonce.feature&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;code&gt;callonce&lt;/code&gt; is ideally used for only &#34;pure&#34; JSON. You may face issues if you attempt to mix in JS functions or Java code. See &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karatecallsingle&#34;&gt;&lt;code&gt;karate.callSingle()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This is for evaluating arbitrary JavaScript and you are advised to use this only as a last resort ! Conditional logic is not recommended especially within test scripts because &lt;a href=&#34;https://martinfowler.com/articles/nonDeterminism.html&#34;&gt;tests should be deterministic&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;There are a few situations where this comes in handy:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;you &lt;em&gt;really&lt;/em&gt; don&#39;t need to assign a result to a variable&lt;/li&gt; &#xA; &lt;li&gt;statements in the &lt;code&gt;if&lt;/code&gt; form (also see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#conditional-logic&#34;&gt;conditional logic&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&#39;one-off&#39; logic (or &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#java-interop&#34;&gt;Java interop&lt;/a&gt;) where you don&#39;t need the &#39;ceremony&#39; of a &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#calling-javascript-functions&#34;&gt;re-usable function&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;JavaScript / JSON-style mutation of existing &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#def&#34;&gt;variables&lt;/a&gt; as a dynamic alternative to &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#set&#34;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#remove&#34;&gt;&lt;code&gt;remove&lt;/code&gt;&lt;/a&gt; - by using &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-setpath&#34;&gt;&lt;code&gt;karate.set()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-remove&#34;&gt;&lt;code&gt;karate.remove()&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;# just perform an action, we don&#39;t care about saving the result&#xA;* eval myJavaScriptFunction()&#xA;&#xA;# do something only if a condition is true&#xA;* eval if (zone == &#39;zone1&#39;) karate.set(&#39;temp&#39;, &#39;after&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As a convenience, you can omit the &lt;code&gt;eval&lt;/code&gt; keyword and so you can shorten the above to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* myJavaScriptFunction()&#xA;* if (zone == &#39;zone1&#39;) karate.set(&#39;temp&#39;, &#39;after&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is &lt;strong&gt;very&lt;/strong&gt; convenient especially if you are calling a method on a variable that has been &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#def&#34;&gt;defined&lt;/a&gt; such as the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#the-karate-object&#34;&gt;&lt;code&gt;karate&lt;/code&gt;&lt;/a&gt; object, and for general-purpose scripting needs such as &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-core&#34;&gt;UI automation&lt;/a&gt;. Note how &lt;code&gt;karate.set()&lt;/code&gt; and &lt;code&gt;karate.remove()&lt;/code&gt; below are used directly as a script &#34;statement&#34;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;# you can use multiple lines of JavaScript if needed&#xA;* eval&#xA;  &#34;&#34;&#34;&#xA;  var foo = function(v){ return v * v };&#xA;  var nums = [0, 1, 2, 3, 4];&#xA;  var squares = [];&#xA;  for (var n in nums) {&#xA;    squares.push(foo(n));&#xA;  }&#xA;  karate.set(&#39;temp&#39;, squares);&#xA;  &#34;&#34;&#34;&#xA;* match temp == [0, 1, 4, 9, 16]&#xA;&#xA;* def json = { a: 1 }&#xA;* def key = &#39;b&#39;&#xA;# use dynamic path expressions to mutate json&#xA;* json[key] = 2&#xA;* match json == { a: 1, b: 2 }&#xA;* karate.remove(&#39;json&#39;, key)&#xA;* match json == { a: 1 }&#xA;* karate.set(&#39;json&#39;, &#39;$.c[]&#39;, { d: &#39;e&#39; })&#xA;* match json == { a: 1, c: [{ d: &#39;e&#39; }] }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Advanced / Tricks&lt;/h1&gt; &#xA;&lt;h2&gt;Polling&lt;/h2&gt; &#xA;&lt;p&gt;The built-in &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#retry-until&#34;&gt;&lt;code&gt;retry until&lt;/code&gt;&lt;/a&gt; syntax should suffice for most needs, but if you have some specific needs, this demo example (using JavaScript) should get you up and running: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/polling/polling.feature&#34;&gt;&lt;code&gt;polling.feature&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Conditional Logic&lt;/h2&gt; &#xA;&lt;p&gt;The keywords &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#given-when-then&#34;&gt;&lt;code&gt;Given&lt;/code&gt; &lt;code&gt;When&lt;/code&gt; &lt;code&gt;Then&lt;/code&gt;&lt;/a&gt; are only for decoration and should not be thought of as similar to an &lt;code&gt;if - then - else&lt;/code&gt; statement. And as a testing framework, Karate &lt;a href=&#34;https://martinfowler.com/articles/nonDeterminism.html&#34;&gt;discourages tests&lt;/a&gt; that give different results on every run.&lt;/p&gt; &#xA;&lt;p&gt;That said, if you really need to implement &#39;conditional&#39; checks, this can be one pattern:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def filename = zone == &#39;zone1&#39; ? &#39;test1.feature&#39; : &#39;test2.feature&#39;&#xA;* def result = call read(filename)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And this is another, using &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-call&#34;&gt;&lt;code&gt;karate.call()&lt;/code&gt;&lt;/a&gt;. Here we want to &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#call&#34;&gt;&lt;code&gt;call&lt;/code&gt;&lt;/a&gt; a file only if a condition is satisfied:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def result = responseStatus == 404 ? {} : karate.call(&#39;delete-user.feature&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if we don&#39;t care about the result, we can &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#eval&#34;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; an &lt;code&gt;if&lt;/code&gt; statement:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* if (responseStatus == 200) karate.call(&#39;delete-user.feature&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And this may give you more ideas. You can always use a &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#javascript-functions&#34;&gt;JavaScript function&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#calling-java&#34;&gt;call Java&lt;/a&gt; for more complex logic.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def expected = zone == &#39;zone1&#39; ? { foo: &#39;#string&#39; } : { bar: &#39;#number&#39; }&#xA;* match response == expected&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;JSON Lookup&lt;/h3&gt; &#xA;&lt;p&gt;You can always use a JavaScript &lt;a href=&#34;https://www.w3schools.com/js/js_switch.asp&#34;&gt;&lt;code&gt;switch case&lt;/code&gt;&lt;/a&gt; within an &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#eval&#34;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#javascript-functions&#34;&gt;function&lt;/a&gt; block. But one pattern that you should be aware of is that JSON is actually a great data-structure for looking up data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def data =&#xA;&#34;&#34;&#34;&#xA;{&#xA;   foo: &#39;hello&#39;,&#xA;   bar: &#39;world&#39;  &#xA;}&#xA;&#34;&#34;&#34;&#xA;# in real-life key can be dynamic&#xA;* def key = &#39;bar&#39;&#xA;# and used to lookup data&#xA;* match (data[key]) == &#39;world&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find more details &lt;a href=&#34;https://stackoverflow.com/a/59162760/143475&#34;&gt;here&lt;/a&gt;. Also note how you can wrap the LHS of the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match&#34;&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; in parentheses in the rare cases where the parser expects JsonPath by default.&lt;/p&gt; &#xA;&lt;h3&gt;Abort and Fail&lt;/h3&gt; &#xA;&lt;p&gt;In some rare cases you need to exit a &lt;code&gt;Scenario&lt;/code&gt; based on some condition. You can use &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-abort&#34;&gt;&lt;code&gt;karate.abort()&lt;/code&gt;&lt;/a&gt; like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* if (responseStatus == 404) karate.abort()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;code&gt;karate.abort()&lt;/code&gt; will &lt;em&gt;not&lt;/em&gt; fail the test. Conditionally making a test fail is easy with &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-fail&#34;&gt;&lt;code&gt;karate.fail()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* if (condition) karate.fail(&#39;a custom message&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But normally a &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match&#34;&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; statement is preferred unless you want a really descriptive error message.&lt;/p&gt; &#xA;&lt;p&gt;Also refer to &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#polling&#34;&gt;polling&lt;/a&gt; for more ideas.&lt;/p&gt; &#xA;&lt;h2&gt;Commonly Needed Utilities&lt;/h2&gt; &#xA;&lt;p&gt;Since it is so easy to dive into &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#calling-java&#34;&gt;Java-interop&lt;/a&gt;, Karate does not include any random-number functions, uuid generator or date / time utilities out of the box. You simply roll your own.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example of how to get the current date, and formatted the way you want:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def getDate =&#xA;  &#34;&#34;&#34;&#xA;  function() {&#xA;    var SimpleDateFormat = Java.type(&#39;java.text.SimpleDateFormat&#39;);&#xA;    var sdf = new SimpleDateFormat(&#39;yyyy/MM/dd&#39;);&#xA;    var date = new java.util.Date();&#xA;    return sdf.format(date);&#xA;  } &#xA;  &#34;&#34;&#34;&#xA;&#xA;* def temp = getDate()&#xA;* print temp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And the above will result in something like this being logged: &lt;code&gt;[print] 2017/10/16&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here below are a few more common examples:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Utility&lt;/th&gt; &#xA;   &lt;th&gt;Recipe&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;System Time (as a string)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;function(){ return java.lang.System.currentTimeMillis() + &#39;&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;UUID&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;function(){ return java.util.UUID.randomUUID() + &#39;&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Random Number (&lt;code&gt;0&lt;/code&gt; to &lt;code&gt;max-1&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;function(max){ return Math.floor(Math.random() * max) }&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Case Insensitive Comparison&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;function(a, b){ return a.equalsIgnoreCase(b) }&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sleep or Wait for &lt;code&gt;pause&lt;/code&gt; milliseconds&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;function(pause){ java.lang.Thread.sleep(pause) }&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The first three are good enough for random string generation for most situations. Note that if you need to do a lot of case-insensitive string checks, &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-lowercase&#34;&gt;&lt;code&gt;karate.lowerCase()&lt;/code&gt;&lt;/a&gt; is what you are looking for.&lt;/p&gt; &#xA;&lt;h3&gt;Multiple Functions in One File&lt;/h3&gt; &#xA;&lt;p&gt;If you find yourself needing a complex helper or utility function, we strongly recommend that you &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#calling-java&#34;&gt;use Java&lt;/a&gt; because it is much easier to maintain and even debug if needed. And if you need multiple functions, you can easily organize them into a single Java class with multiple static methods.&lt;/p&gt; &#xA;&lt;p&gt;That said, if you want to stick to JavaScript, but find yourself accumulating a lot of helper functions that you need to use in multiple feature files, the following pattern is recommended.&lt;/p&gt; &#xA;&lt;p&gt;You can organize multiple &#34;common&#34; utilities into a single re-usable feature file as follows e.g. &lt;code&gt;common.feature&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;@ignore&#xA;Feature:&#xA;&#xA;Scenario:&#xA;  * def hello = function(){ return &#39;hello&#39; }&#xA;  * def world = function(){ return &#39;world&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then you have two options. The first option using &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#shared-scope&#34;&gt;shared scope&lt;/a&gt; should be fine for most projects, but if you want to &#34;name space&#34; your functions, use &#34;isolated scope&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Scenario: function re-use, global / shared scope&#xA;    * call read(&#39;common.feature&#39;)&#xA;    * assert hello() == &#39;hello&#39;&#xA;    * assert world() == &#39;world&#39;&#xA;&#xA;Scenario: function re-use, isolated / name-spaced scope&#xA;    * def utils = call read(&#39;common.feature&#39;)&#xA;    * assert utils.hello() == &#39;hello&#39;&#xA;    * assert utils.world() == &#39;world&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can even move commonly used routines into &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#restrictions-on-global-variables&#34;&gt;&lt;code&gt;karate-config.js&lt;/code&gt;&lt;/a&gt; which means that they become &#34;global&#34;. But we recommend that you do this only if you are sure that these routines are needed in almost &lt;em&gt;all&lt;/em&gt; &lt;code&gt;*.feature&lt;/code&gt; files. Bloating your configuration can lead to loss of performance, and maintainability may suffer.&lt;/p&gt; &#xA;&lt;h2&gt;Async&lt;/h2&gt; &#xA;&lt;p&gt;The JS API has a &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-signal&#34;&gt;&lt;code&gt;karate.signal(result)&lt;/code&gt;&lt;/a&gt; method that is useful for involving asynchronous flows into a test.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;listen&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You use the &lt;code&gt;listen&lt;/code&gt; keyword (with a timeout) to wait until that event occurs. The &lt;code&gt;listenResult&lt;/code&gt; magic variable will hold the value passed to the call to &lt;code&gt;karate.signal()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is best &lt;a href=&#34;https://github.com/intuit/karate/tree/master/karate-netty#consumer-provider-example&#34;&gt;explained&lt;/a&gt; in this &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/mock/contract/payment-service.feature&#34;&gt;example&lt;/a&gt; that involves listening to an ActiveMQ / JMS queue.&lt;/p&gt; &#xA;&lt;p&gt;Note how &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#javascript-functions&#34;&gt;JS functions&lt;/a&gt; defined at run-time can be mixed with custom &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#java-interop&#34;&gt;Java code&lt;/a&gt; to get things done. You need to use &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-tojava&#34;&gt;&lt;code&gt;karate.toJava()&lt;/code&gt;&lt;/a&gt; to &#34;wrap&#34; JS functions passed to custom Java code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Background:&#xA;* def QueueConsumer = Java.type(&#39;mock.contract.QueueConsumer&#39;)&#xA;* def queue = new QueueConsumer(queueName)&#xA;* def handler = function(msg){ karate.signal(msg) }&#xA;* queue.listen(karate.toJava(handler))&#xA;* url paymentServiceUrl + &#39;/payments&#39;&#xA;&#xA;Scenario: create, get, update, list and delete payments&#xA;    Given request { amount: 5.67, description: &#39;test one&#39; }&#xA;    When method post&#xA;    Then status 200&#xA;    And match response == { id: &#39;#number&#39;, amount: 5.67, description: &#39;test one&#39; }&#xA;    And def id = response.id&#xA;    * listen 5000&#xA;    * json shipment = listenResult&#xA;    * print &#39;### received:&#39;, shipment&#xA;    * match shipment == { paymentId: &#39;#(id)&#39;, status: &#39;shipped&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Java Function References&lt;/h3&gt; &#xA;&lt;p&gt;JavaScript functions have some limitations when combined with multi-threaded Java code. So it is recommended that you directly use a Java &lt;code&gt;Function&lt;/code&gt; when possible instead of using the &lt;code&gt;karate.toJava()&lt;/code&gt; &#34;wrapper&#34; as shown above.&lt;/p&gt; &#xA;&lt;p&gt;One pattern you can adopt is to create a &#34;factory&#34; method that returns a Java function - where you can easily delegate to the logic you want. For example, see the &lt;code&gt;sayHelloFactory()&lt;/code&gt; method below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Hello {&#xA;&#xA;    public static String sayHello(String message) {&#xA;        return &#34;hello &#34; + message;&#xA;    }&#xA;&#xA;    public static Function&amp;lt;String, String&amp;gt; sayHelloFactory() {&#xA;        return s -&amp;gt; sayHello(s);&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And now, to get a reference to that &#34;function&#34; you can do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def sayHello = Java.type(&#39;com.myco.Hello&#39;).sayHelloFactory()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can be convenient when using &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#shared-scope&#34;&gt;shared scope&lt;/a&gt; because you can just call &lt;code&gt;sayHello(&#39;myname&#39;)&lt;/code&gt; where needed.&lt;/p&gt; &#xA;&lt;h2&gt;WebSocket&lt;/h2&gt; &#xA;&lt;p&gt;Karate also has built-in support for &lt;a href=&#34;http://www.websocket.org&#34;&gt;websocket&lt;/a&gt; that is based on the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#async&#34;&gt;async&lt;/a&gt; capability. The following method signatures are available on the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#the-karate-object&#34;&gt;&lt;code&gt;karate&lt;/code&gt; JS object&lt;/a&gt; to obtain a websocket reference:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;karate.webSocket(url)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;karate.webSocket(url, handler)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;karate.webSocket(url, handler, options)&lt;/code&gt; - where &lt;code&gt;options&lt;/code&gt; is an optional JSON (or map-like) object that takes the following optional keys: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;subProtocol&lt;/code&gt; - in case the server expects it&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;headers&lt;/code&gt; - another JSON of key-value pairs&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;maxPayloadSize&lt;/code&gt; - this defaults to 4194304 (bytes, around 4 MB)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These will init a websocket client for the given &lt;code&gt;url&lt;/code&gt; and optional &lt;code&gt;subProtocol&lt;/code&gt;. If a &lt;code&gt;handler&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#javascript-functions&#34;&gt;function&lt;/a&gt; (returning a boolean) is provided - it will be used to complete the &#34;wait&#34; of &lt;code&gt;socket.listen()&lt;/code&gt; if &lt;code&gt;true&lt;/code&gt; is returned - where &lt;code&gt;socket&lt;/code&gt; is the reference to the websocket client returned by &lt;code&gt;karate.webSocket()&lt;/code&gt;. A handler function is needed only if you have to ignore other incoming traffic. If you need custom headers for the websocket handshake, use JSON as the last argument.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example, where the same websocket connection is used to send as well as receive a message.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;* def handler = function(msg){ return msg.startsWith(&#39;hello&#39;) }&#xA;* def socket = karate.webSocket(demoBaseUrl + &#39;/websocket&#39;, handler)&#xA;* socket.send(&#39;Billie&#39;)&#xA;* def result = socket.listen(5000)&#xA;* match result == &#39;hello Billie !&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For handling binary messages, the same &lt;code&gt;karate.webSocket()&lt;/code&gt; method signatures exist for &lt;code&gt;karate.webSocketBinary()&lt;/code&gt;. Refer to these examples for more: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/websocket/echo.feature&#34;&gt;&lt;code&gt;echo.feature&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/websocket/websocket.feature&#34;&gt;&lt;code&gt;websocket.feature&lt;/code&gt;&lt;/a&gt;. Note that any websocket instances created will be auto-closed at the end of the &lt;code&gt;Scenario&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Tags&lt;/h2&gt; &#xA;&lt;p&gt;Gherkin has a great way to sprinkle meta-data into test-scripts - which gives you some interesting options when running tests in bulk. The most common use-case would be to partition your tests into &#39;smoke&#39;, &#39;regression&#39; and the like - which enables being able to selectively execute a sub-set of tests.&lt;/p&gt; &#xA;&lt;p&gt;The documentation on how to run tests via the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#test-suites&#34;&gt;command line&lt;/a&gt; has an example of how to use tags to decide which tests to &lt;em&gt;not&lt;/em&gt; run (or ignore). Also see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/tags/first.feature&#34;&gt;&lt;code&gt;first.feature&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/tags/second.feature&#34;&gt;&lt;code&gt;second.feature&lt;/code&gt;&lt;/a&gt; in the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo&#34;&gt;demos&lt;/a&gt;. If you find yourself juggling multiple tags with logical &lt;code&gt;AND&lt;/code&gt; and &lt;code&gt;OR&lt;/code&gt; complexity, refer to this &lt;a href=&#34;https://stackoverflow.com/a/50693388/143475&#34;&gt;Stack Overflow answer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For advanced users, Karate supports being able to query for tags within a test, and even tags in a &lt;code&gt;@name=value&lt;/code&gt; form. Refer to &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-tags&#34;&gt;&lt;code&gt;karate.tags&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-tagvalues&#34;&gt;&lt;code&gt;karate.tagValues&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Special Tags&lt;/h3&gt; &#xA;&lt;p&gt;For completeness, the &#34;built-in&#34; tags are the following:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Tag&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@ignore&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Any &lt;code&gt;Scenario&lt;/code&gt; with (or that has inherited) this tag will be skipped at run-time. This does not apply to anything that is &#34;called&#34; though&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@parallel&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#parallelfalse&#34;&gt;&lt;code&gt;@parallel=false&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@report&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#reportfalse&#34;&gt;&lt;code&gt;@report=false&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@env&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;See below&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@envnot&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;See below&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Environment Tags&lt;/h3&gt; &#xA;&lt;p&gt;There are two special tags that allow you to &#34;select&#34; or &#34;un-select&#34; a &lt;code&gt;Scenario&lt;/code&gt; depending on the value of &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#switching-the-environment&#34;&gt;&lt;code&gt;karate.env&lt;/code&gt;&lt;/a&gt;. This can be really convenient, for example to &lt;em&gt;never&lt;/em&gt; run some tests in a certain &#34;production like&#34; or sensitive environment.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;@env=foo,bar&lt;/code&gt; - will run only when the value of &lt;code&gt;karate.env&lt;/code&gt; is not-null &lt;em&gt;and&lt;/em&gt; equal to &lt;code&gt;foo&lt;/code&gt; &lt;em&gt;or&lt;/em&gt; &lt;code&gt;bar&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@envnot=foo&lt;/code&gt; - will run when the value of &lt;code&gt;karate.env&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; or anything &lt;em&gt;other than&lt;/em&gt; &lt;code&gt;foo&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;@env=dev  &#xA;Scenario: runs only when karate.env is &#39;dev&#39;&#xA;* print &#39;karate.env is:&#39;, karate.env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since multiple values are supported, you can also do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;@envnot=perf,prod  &#xA;Scenario: never runs in perf or prod&#xA;* print &#39;karate.env is:&#39;, karate.env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Tags And Examples&lt;/h3&gt; &#xA;&lt;p&gt;A little-known capability of the Cucumber / Gherkin syntax is to be able to tag even specific rows in a bunch of examples ! You have to repeat the &lt;code&gt;Examples&lt;/code&gt; section for each tag. The example below combines this with the advanced features described above.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Scenario Outline: examples partitioned by tag&#xA;* def vals = karate.tagValues&#xA;* match vals.region[0] == expected&#xA;&#xA;  @region=US&#xA;  Examples:&#xA;    | expected |&#xA;    | US       |&#xA;&#xA;  @region=GB&#xA;  Examples:&#xA;    | expected |&#xA;    | GB       |&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that if you tag &lt;code&gt;Examples&lt;/code&gt; like this, and if a tag selector is used when running a given &lt;code&gt;Feature&lt;/code&gt; - only the &lt;code&gt;Examples&lt;/code&gt; that match the tag selector will be executed. There is no concept of a &#34;default&#34; where for e.g. if there is no matching tag - that the &lt;code&gt;Examples&lt;/code&gt; without a tag will be executed. But note that you can use the negative form of a tag selector: &lt;code&gt;~@region=GB&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Dynamic Port Numbers&lt;/h2&gt; &#xA;&lt;p&gt;In situations where you start an (embedded) application server as part of the test set-up phase, a typical challenge is that the HTTP port may be determined at run-time. So how can you get this value injected into the Karate configuration ?&lt;/p&gt; &#xA;&lt;p&gt;It so happens that the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#the-karate-object&#34;&gt;&lt;code&gt;karate&lt;/code&gt;&lt;/a&gt; object has a field called &lt;code&gt;properties&lt;/code&gt; which can read a Java system-property by name like this: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-properties&#34;&gt;&lt;code&gt;karate.properties[&#39;myName&#39;]&lt;/code&gt;&lt;/a&gt;. Since the &lt;code&gt;karate&lt;/code&gt; object is injected within &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configuration&#34;&gt;&lt;code&gt;karate-config.js&lt;/code&gt;&lt;/a&gt; on start-up, it is a simple and effective way for other processes within the same JVM to pass configuration values to Karate at run-time. Refer to the &#39;demo&#39; &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/karate-config.js&#34;&gt;&lt;code&gt;karate-config.js&lt;/code&gt;&lt;/a&gt; for an example and how the &lt;code&gt;demo.server.port&lt;/code&gt; system-property is set-up in the test runner: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/TestBase.java&#34;&gt;&lt;code&gt;TestBase.java&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Java API&lt;/h2&gt; &#xA;&lt;p&gt;Karate has a &lt;a href=&#34;https://twitter.com/KarateDSL/status/1353969718730788865&#34;&gt;set of Java API-s&lt;/a&gt; that expose the HTTP, JSON, data-assertion and UI automation capabilities. The primary classes are described below.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/main/java/com/intuit/karate/Http.java&#34;&gt;&lt;code&gt;Http&lt;/code&gt;&lt;/a&gt; - build and execute any HTTP request and retrieve responses&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/main/java/com/intuit/karate/Json.java&#34;&gt;&lt;code&gt;Json&lt;/code&gt;&lt;/a&gt; - build and manipulate JSON data using JsonPath expressions, convert to and from Java &lt;code&gt;Map&lt;/code&gt;-s and &lt;code&gt;List&lt;/code&gt;-s, parse strings into JSON and convert Java objects into JSON&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/main/java/com/intuit/karate/Match.java&#34;&gt;&lt;code&gt;Match&lt;/code&gt;&lt;/a&gt; - exposes all of Karate&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#match&#34;&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; capabilities, and this works for Java &lt;code&gt;Map&lt;/code&gt; and &lt;code&gt;List&lt;/code&gt; objects&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/main/java/com/intuit/karate/driver/Driver.java&#34;&gt;&lt;code&gt;Driver&lt;/code&gt;&lt;/a&gt; - perform &lt;a href=&#34;https://github.com/intuit/karate/tree/master/karate-core&#34;&gt;web-browser automation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Do note that if you choose the Java API, you will naturally lose some of the test-automation framework benefits such as HTML reports, parallel execution and &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#the-karate-object&#34;&gt;JavaScript&lt;/a&gt; / &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configuration&#34;&gt;configuration&lt;/a&gt;. You may have to rely on unit-testing frameworks or integrate additional dependencies.&lt;/p&gt; &#xA;&lt;h3&gt;jbang&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.jbang.dev&#34;&gt;jbang&lt;/a&gt; is a great way for you to install and execute scripts that use Karate&#39;s Java API on any machine with minimal setup. Note that jbang itself is &lt;a href=&#34;https://www.jbang.dev/documentation/guide/latest/installation.html&#34;&gt;super-easy to install&lt;/a&gt; and there is even a &#34;&lt;a href=&#34;https://www.jbang.dev/documentation/guide/latest/installation.html#zero-install&#34;&gt;Zero Install&lt;/a&gt;&#34; option.&lt;/p&gt; &#xA;&lt;p&gt;Here below is an example jbang script that uses the Karate &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#java-api&#34;&gt;Java API&lt;/a&gt; to do some useful work. Name the file as &lt;code&gt;javadsl.java&lt;/code&gt; and run using the command: &lt;code&gt;jbang javadsl.java&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;please replace &lt;code&gt;RELEASE&lt;/code&gt; with the exact version of Karate you intend to use if applicable&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;///usr/bin/env jbang &#34;$0&#34; &#34;$@&#34; ; exit $?&#xA;//DEPS com.intuit.karate:karate-core:RELEASE:all&#xA;&#xA;import com.intuit.karate.*;&#xA;import java.util.List;&#xA;&#xA;public class javadsl {&#xA;&#xA;    public static void main(String[] args) {&#xA;        List users = Http.to(&#34;https://jsonplaceholder.typicode.com/users&#34;)&#xA;                .get().json().asList();&#xA;        Match.that(users.get(0)).contains(&#34;{ name: &#39;Leanne Graham&#39; }&#34;);&#xA;        String city = Json.of(users).get(&#34;$[0].address.city&#34;);&#xA;        Match.that(&#34;Gwenborough&#34;).isEqualTo(city);&#xA;        System.out.println(&#34;\n*** second user: &#34; + Json.of(users.get(1)).toString());&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read the documentation of the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-netty#jbang&#34;&gt;stand-alone JAR&lt;/a&gt; for more - such as how you can even install custom command-line applications using jbang !&lt;/p&gt; &#xA;&lt;h3&gt;Invoking feature files using the Java API&lt;/h3&gt; &#xA;&lt;p&gt;It is also possible to invoke a feature file via a Java API which can be useful in some test-automation situations.&lt;/p&gt; &#xA;&lt;p&gt;A common use case is to mix API-calls into a larger test-suite, for example a Selenium or WebDriver UI test. So you can use Karate to set-up data via API calls, then run the UI test-automation, and finally again use Karate to assert that the system-state is as expected. Note that you can even include calls to a database from Karate using &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#calling-java&#34;&gt;Java interop&lt;/a&gt;. And &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/dogs/dogs.feature&#34;&gt;this example&lt;/a&gt; may make it clear why using Karate itself to drive even your UI-tests may be a good idea.&lt;/p&gt; &#xA;&lt;p&gt;The static method &lt;code&gt;com.intuit.karate.Runner.runFeature()&lt;/code&gt; is best explained in this demo unit-test: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/java/JavaApiTest.java&#34;&gt;&lt;code&gt;JavaApiTest.java&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can optionally pass in variable values or over-ride config via a &lt;code&gt;HashMap&lt;/code&gt; or leave the second-last argument as &lt;code&gt;null&lt;/code&gt;. The variable state after feature execution would be returned as a &lt;code&gt;Map&amp;lt;String, Object&amp;gt;&lt;/code&gt;. The last &lt;code&gt;boolean&lt;/code&gt; argument is whether the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configuration&#34;&gt;&lt;code&gt;karate-config.js&lt;/code&gt;&lt;/a&gt; should be processed or not. Refer to the documentation on &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#type-conversion&#34;&gt;type-conversion&lt;/a&gt; to make sure you can &#39;unpack&#39; data returned from Karate correctly, especially when dealing with XML.&lt;/p&gt; &#xA;&lt;h2&gt;Hooks&lt;/h2&gt; &#xA;&lt;p&gt;If you are looking for &lt;a href=&#34;http://toolsqa.com/cucumber/cucumber-hooks/&#34;&gt;Cucumber &#39;hooks&#39;&lt;/a&gt; Karate does not support them, mainly because they depend on Java code, which goes against the Karate Way™.&lt;/p&gt; &#xA;&lt;p&gt;Instead, Karate gives you all you need as part of the syntax. Here is a summary:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;To Run Some Code&lt;/th&gt; &#xA;   &lt;th&gt;How&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Before &lt;em&gt;everything&lt;/em&gt; (or &#39;globally&#39; once)&lt;/td&gt; &#xA;   &lt;td&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karatecallsingle&#34;&gt;&lt;code&gt;karate.callSingle()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Before every &lt;code&gt;Scenario&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#script-structure&#34;&gt;&lt;code&gt;Background&lt;/code&gt;&lt;/a&gt;. Note that &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-configjs&#34;&gt;&lt;code&gt;karate-config.js&lt;/code&gt;&lt;/a&gt; is processed before &lt;em&gt;every&lt;/em&gt; &lt;code&gt;Scenario&lt;/code&gt; - so you can choose to put &#34;global&#34; config here, for example using &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-configure&#34;&gt;&lt;code&gt;karate.configure()&lt;/code&gt;&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Once (or at the start of) every &lt;code&gt;Feature&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use a &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#callonce&#34;&gt;&lt;code&gt;callonce&lt;/code&gt;&lt;/a&gt; in the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#script-structure&#34;&gt;&lt;code&gt;Background&lt;/code&gt;&lt;/a&gt;. The advantage is that you can set up variables (using &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#def&#34;&gt;&lt;code&gt;def&lt;/code&gt;&lt;/a&gt; if needed) which can be used in all &lt;code&gt;Scenario&lt;/code&gt;-s within that &lt;code&gt;Feature&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;After every &lt;code&gt;Scenario&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configure&#34;&gt;&lt;code&gt;configure afterScenario&lt;/code&gt;&lt;/a&gt; (see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/hooks/hooks.feature&#34;&gt;example&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;At the end of the &lt;code&gt;Feature&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#configure&#34;&gt;&lt;code&gt;configure afterFeature&lt;/code&gt;&lt;/a&gt; (see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/hooks/hooks.feature&#34;&gt;example&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note that for the &lt;code&gt;afterFeature&lt;/code&gt; hook to work, you should be using the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#parallel-execution&#34;&gt;&lt;code&gt;Runner&lt;/code&gt; API&lt;/a&gt; and not the JUnit runner.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;&lt;code&gt;karate.callSingle()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Only recommended for advanced users, but this guarantees a routine is run only once, &lt;em&gt;even&lt;/em&gt; when &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#parallel-execution&#34;&gt;running tests in parallel&lt;/a&gt;. You can use &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-callsingle&#34;&gt;&lt;code&gt;karate.callSingle()&lt;/code&gt;&lt;/a&gt; in &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-configjs&#34;&gt;&lt;code&gt;karate-config.js&lt;/code&gt;&lt;/a&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var result = karate.callSingle(&#39;classpath:some/package/my.feature&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It can take a second JSON argument following the same rules as &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#call&#34;&gt;&lt;code&gt;call&lt;/code&gt;&lt;/a&gt;. Once you get a result, you typically use it to set global variables.&lt;/p&gt; &#xA;&lt;p&gt;Refer to this example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/karate-config.js&#34;&gt;&lt;code&gt;karate-config.js&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/headers/headers-single.feature&#34;&gt;&lt;code&gt;headers-single.feature&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You &lt;em&gt;can&lt;/em&gt; use &lt;code&gt;karate.callSingle()&lt;/code&gt; directly in a &lt;code&gt;*.feature&lt;/code&gt; file, but it logically fits better in the global &#34;bootstrap&#34;. Ideally it should return &#34;pure JSON&#34; and note that you always get a &#34;deep clone&#34; of the cached result object.&lt;/p&gt; &#xA;&lt;p&gt;IMPORTANT: There are some restrictions when using &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#callonce&#34;&gt;&lt;code&gt;callonce&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;karate.callSingle()&lt;/code&gt; especially within &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-configjs&#34;&gt;&lt;code&gt;karate-config.js&lt;/code&gt;&lt;/a&gt;. Ideally you should return only &lt;em&gt;pure&lt;/em&gt; JSON data (or a primitive string, number etc.). Keep in mind that the reason this exists is to &#34;cache&#34; data, and &lt;em&gt;not&lt;/em&gt; behavior. So if you return complex objects such as a custom Java instance or a JS function that depends on complex objects, this &lt;a href=&#34;https://github.com/intuit/karate/issues/1558&#34;&gt;&lt;em&gt;may&lt;/em&gt; cause issues when you run in parallel&lt;/a&gt;. If you really need to re-use a Java function, see &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#java-function-references&#34;&gt;Java Function References&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;configure callSingleCache&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;When re-running tests in development mode and when your test suite depends on say an &lt;code&gt;Authorization&lt;/code&gt; header set by &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karatecallsingle&#34;&gt;&lt;code&gt;karate.callSingle()&lt;/code&gt;&lt;/a&gt;, you can cache the results locally to a file, which is very convenient when your &#34;auth token&#34; is valid for a period of a few minutes - which typically is the case. This means that as long as the token &#34;on file&#34; is valid, you can save time by not having to make the one or two HTTP calls needed to &#34;sign-in&#34; or create &#34;throw-away&#34; users in your SSO store.&lt;/p&gt; &#xA;&lt;p&gt;So in &#34;dev mode&#34; you can easily set this behavior like this. Just ensure that this is &#34;configured&#34; &lt;em&gt;before&lt;/em&gt; you use &lt;code&gt;karate.callSingle()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;if (karate.env == &#39;local&#39;) {&#xA;  karate.configure(&#39;callSingleCache&#39;, { minutes: 15 });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default Karate will use &lt;code&gt;target&lt;/code&gt; (or &lt;code&gt;build&lt;/code&gt;) as the &#34;cache&#34; folder, which you can over-ride by adding a &lt;code&gt;dir&lt;/code&gt; key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;  karate.configure(&#39;callSingleCache&#39;, { minutes: 15, dir: &#39;some/other/folder&#39; });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This caching behavior will work only if the result of &lt;code&gt;karate.callSingle()&lt;/code&gt; is a JSON-like object, and any JS functions or Java objects mixed in will be lost.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Data Driven Tests&lt;/h2&gt; &#xA;&lt;h3&gt;The Cucumber Way&lt;/h3&gt; &#xA;&lt;p&gt;Cucumber has a concept of &lt;a href=&#34;https://docs.cucumber.io/gherkin/reference/#scenario-outline&#34;&gt;Scenario Outlines&lt;/a&gt; where you can re-use a set of data-driven steps and assertions, and the data can be declared in a very user-friendly fashion. Observe the usage of &lt;code&gt;Scenario Outline:&lt;/code&gt; instead of &lt;code&gt;Scenario:&lt;/code&gt;, and the new &lt;code&gt;Examples:&lt;/code&gt; section.&lt;/p&gt; &#xA;&lt;p&gt;You should take a minute to compare this with the &lt;a href=&#34;https://github.com/basdijkstra/rest-assured-workshop/raw/d9734da98bfcd8087055bdcd78545581dd23cb77/src/test/java/answers/RestAssuredAnswers2Test.java&#34;&gt;exact same example implemented in REST-assured and TestNG&lt;/a&gt;. Note that this example only does a &#34;string equals&#34; check on &lt;em&gt;parts&lt;/em&gt; of the JSON, but with Karate you are always encouraged to match the &lt;em&gt;entire&lt;/em&gt; payload in one step.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Feature: karate answers 2&#xA;&#xA;Background:&#xA;  * url &#39;http://localhost:8080&#39;&#xA;&#xA;Scenario Outline: given circuit name, validate country&#xA;  Given path &#39;api/f1/circuits/&amp;lt;name&amp;gt;.json&#39;&#xA;  When method get&#xA;  Then match $.MRData.CircuitTable.Circuits[0].Location.country == &#39;&amp;lt;country&amp;gt;&#39;&#xA;&#xA;  Examples:&#xA;    | name   | country  |&#xA;    | monza  | Italy    |&#xA;    | spa    | Belgium  |&#xA;    | sepang | Malaysia |&#xA;&#xA;Scenario Outline: given race number, validate number of pitstops for Max Verstappen in 2015&#xA;  Given path &#39;api/f1/2015/&amp;lt;race&amp;gt;/drivers/max_verstappen/pitstops.json&#39;&#xA;  When method get&#xA;  Then assert response.MRData.RaceTable.Races[0].PitStops.length == &amp;lt;stops&amp;gt;&#xA;&#xA;  Examples:&#xA;    | race | stops |&#xA;    | 1    | 1     |&#xA;    | 2    | 3     |&#xA;    | 3    | 2     |&#xA;    | 4    | 2     |&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is great for testing boundary conditions against a single end-point, with the added bonus that your test becomes even more readable. This approach can certainly enable product-owners or domain-experts who are not programmer-folk, to review, and even collaborate on test-scenarios and scripts.&lt;/p&gt; &#xA;&lt;h3&gt;Scenario Outline Enhancements&lt;/h3&gt; &#xA;&lt;p&gt;Karate has enhanced the Cucumber &lt;code&gt;Scenario Outline&lt;/code&gt; as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Type Hints&lt;/strong&gt;: if the &lt;code&gt;Examples&lt;/code&gt; column header has a &lt;code&gt;!&lt;/code&gt; appended, each value will be evaluated as a JavaScript data-type (number, boolean, or &lt;em&gt;even&lt;/em&gt; in-line JSON) - else it defaults to string.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Magic Variables&lt;/strong&gt;: &lt;code&gt;__row&lt;/code&gt; gives you the entire row as a JSON object, and &lt;code&gt;__num&lt;/code&gt; gives you the row index (the first row is &lt;code&gt;0&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Auto Variables&lt;/strong&gt;: in addition to &lt;code&gt;__row&lt;/code&gt;, each column key-value will be available as a separate &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#def&#34;&gt;variable&lt;/a&gt;, which greatly simplifies JSON manipulation - especially when you want to re-use JSON &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files&#34;&gt;files&lt;/a&gt; containing &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#embedded-expressions&#34;&gt;embedded expressions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Any empty cells will result in a &lt;code&gt;null&lt;/code&gt; value for that column-key, and this can be useful to &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#remove-if-null&#34;&gt;remove nodes&lt;/a&gt; from JSON or XML documents&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These are best explained with &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-junit4/src/test/java/com/intuit/karate/junit4/demos/outline.feature&#34;&gt;examples&lt;/a&gt;. You can choose between the string-placeholder style &lt;code&gt;&amp;lt;foo&amp;gt;&lt;/code&gt; or &lt;em&gt;directly&lt;/em&gt; refer to the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#def&#34;&gt;variable&lt;/a&gt; &lt;code&gt;foo&lt;/code&gt; (or even the &lt;em&gt;whole row&lt;/em&gt; JSON as &lt;code&gt;__row&lt;/code&gt;) in JSON-friendly &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-expressions&#34;&gt;expressions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that even the scenario name can accept placeholders - which is very useful in reports.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Scenario Outline: name is &amp;lt;name&amp;gt; and age is &amp;lt;age&amp;gt;&#xA;  * def temp = &#39;&amp;lt;name&amp;gt;&#39;&#xA;  * match temp == name&#xA;  * match temp == __row.name&#xA;  * def expected = __num == 0 ? &#39;name is Bob and age is 5&#39; : &#39;name is Nyan and age is 6&#39;&#xA;  * match expected == karate.scenario.name&#xA;&#xA;  Examples:&#xA;    | name | age |&#xA;    | Bob  | 5   |&#xA;    | Nyan | 6   |&#xA;&#xA;Scenario Outline: magic variables with type hints&#xA;  * def expected = [{ name: &#39;Bob&#39;, age: 5 }, { name: &#39;Nyan&#39;, age: 6 }]&#xA;  * match __row == expected[__num]&#xA;&#xA;  Examples:&#xA;    | name | age! |&#xA;    | Bob  | 5    |&#xA;    | Nyan | 6    |&#xA;&#xA;Scenario Outline: embedded expressions and type hints&#xA;  * match __row == { name: &#39;#(name)&#39;, alive: &#39;#boolean&#39; }&#xA;&#xA;  Examples:&#xA;    | name | alive! |&#xA;    | Bob  | false  |&#xA;    | Nyan | true   |&#xA;&#xA;Scenario Outline: inline json&#xA;  * match __row == { first: &#39;hello&#39;, second: { a: 1 } }&#xA;  * match first == &#39;hello&#39;&#xA;  * match second == { a: 1 }&#xA;&#xA;  Examples:&#xA;    | first  | second!  |&#xA;    | hello  | { a: 1 } |&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For another example, see: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/outline/examples.feature&#34;&gt;&lt;code&gt;examples.feature&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re looking for more complex ways of dynamically naming your scenarios you can use JS string interpolation by including placeholders in your scenario name.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Scenario Outline: name is ${name.first} ${name.last} and age is ${age}&#xA;  * match name.first == &#34;#? _ == &#39;Bob&#39; || _ == &#39;Nyan&#39;&#34;&#xA;  * match name.last == &#34;#? _ == &#39;Dylan&#39; || _ == &#39;Cat&#39;&#34;&#xA;  * match title == karate.scenario.name&#xA;&#xA;Examples:&#xA;  | name!                               | age | title                           |&#xA;  | { &#34;first&#34;: &#34;Bob&#34;, &#34;last&#34;: &#34;Dylan&#34; } | 10  | name is Bob Dylan and age is 10 |&#xA;  | { &#34;first&#34;: &#34;Nyan&#34;, &#34;last&#34;: &#34;Cat&#34; }  | 5   | name is Nyan Cat and age is 5   |&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;String interpolation will support variables in scope and / or the &lt;code&gt;Examples&lt;/code&gt; (including functions defined globally, but not functions defined in the background). Even Java interop and access to the &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#the-karate-object&#34;&gt;&lt;code&gt;karate&lt;/code&gt; JS API&lt;/a&gt; would work.&lt;/p&gt; &#xA;&lt;p&gt;For some more examples check &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/java/com/intuit/karate/core/parser/test-outline-name-js.feature&#34;&gt;&lt;code&gt;test-outline-name-js.feature&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;The Karate Way&lt;/h3&gt; &#xA;&lt;p&gt;The limitation of the Cucumber &lt;code&gt;Scenario Outline:&lt;/code&gt; (seen above) is that the number of rows in the &lt;code&gt;Examples:&lt;/code&gt; is fixed. But take a look at how Karate can &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#data-driven-features&#34;&gt;loop over a &lt;code&gt;*.feature&lt;/code&gt; file&lt;/a&gt; for each object in a JSON array - which gives you dynamic data-driven testing, if you need it. For advanced examples, refer to some of the scenarios within this &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo&#34;&gt;demo&lt;/a&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/search/dynamic-params.feature#L70&#34;&gt;&lt;code&gt;dynamic-params.feature&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Also see the option below, where you can data-drive an &lt;code&gt;Examples:&lt;/code&gt; table using JSON.&lt;/p&gt; &#xA;&lt;h3&gt;Dynamic Scenario Outline&lt;/h3&gt; &#xA;&lt;p&gt;You can feed an &lt;code&gt;Examples&lt;/code&gt; table from a custom data-source, which is great for those situations where the table-content is dynamically resolved at run-time. This capability is triggered when the table consists of a single &#34;cell&#34;, i.e. there is exactly one row and one column in the table.&lt;/p&gt; &#xA;&lt;p&gt;This technique has one caveat to be aware of regarding isolation of tests running in parallel. The &lt;code&gt;Background&lt;/code&gt; section is only run once in order to set up the list of dynamic scenarios. This means that any other steps within the &lt;code&gt;Background&lt;/code&gt; are not repeated for each individual example. This is different behaviour from normal scenarios where each &lt;code&gt;Scenario&lt;/code&gt; also runs the &lt;code&gt;Background&lt;/code&gt; steps.&lt;/p&gt; &#xA;&lt;h4&gt;JSON Array Data Source&lt;/h4&gt; &#xA;&lt;p&gt;The &#34;scenario expression&#34; result is expected to be an array of JSON objects. Here is an example (also see &lt;a href=&#34;https://twitter.com/KarateDSL/status/1051433711814627329&#34;&gt;this video&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Feature: scenario outline using a dynamic table&#xA;&#xA;Background:&#xA;    * def kittens = read(&#39;../callarray/kittens.json&#39;)&#xA;&#xA;Scenario Outline: cat name: &amp;lt;name&amp;gt;&#xA;    Given url demoBaseUrl&#xA;    And path &#39;cats&#39;&#xA;    And request { name: &#39;#(name)&#39; }&#xA;    When method post&#xA;    Then status 200&#xA;    And match response == { id: &#39;#number&#39;, name: &#39;#(name)&#39; }&#xA;&#xA;    # the single cell can be any valid karate expression&#xA;    # and even reference a variable defined in the Background&#xA;    Examples:&#xA;    | kittens |&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The great thing about this approach is that you can set-up the JSON array using the &lt;code&gt;Background&lt;/code&gt; section. Any &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#karate-expressions&#34;&gt;Karate expression&lt;/a&gt; can be used in the &#34;cell expression&#34;, and you can even use &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#calling-java&#34;&gt;Java-interop&lt;/a&gt; to use external data-sources such as a database. Note that Karate has built-in support for &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/#csv-files&#34;&gt;CSV files&lt;/a&gt; and here is an example: &lt;a href=&#34;https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/outline/dynamic-csv.feature&#34;&gt;&lt;code&gt;dynamic-csv.feature&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;JSON Function Data Source&lt;/h4&gt; &#xA;&lt;p&gt;An advanced option is where the &#34;scenario expression&#34; returns a JavaScript &#34;generator&#34; function. This is a very powerful way to generate test-data without having to load a large number of data rows into memory. The function has to return a JSON object. To signal the end of the data, just return &lt;code&gt;null&lt;/code&gt;. The function argument is the row-index, so you can easily determine &lt;em&gt;when&lt;/em&gt; to stop the generation of data. Here is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Feature: scenario outline using a dynamic generator function&#xA;&#xA;Background:&#xA;    * def generator = function(i){ if (i == 20) return null; return { name: &#39;cat&#39; + i, age: i } }&#xA;&#xA;Scenario Outline: cat name: &amp;lt;name&amp;gt;&#xA;    Given url demoBaseUrl&#xA;    And path &#39;cats&#39;&#xA;    And request { name: &#39;#(name)&#39;, age: &#39;#(age)&#39; }&#xA;    When method post&#xA;    Then status 200&#xA;    And match response == { id: &#39;#number&#39;, name: &#39;#(name)&#39; }&#xA;&#xA;    Examples:&#xA;    | generator |&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>spring-projects/spring-authorization-server</title>
    <updated>2022-06-01T02:01:04Z</updated>
    <id>tag:github.com,2022-06-01:/spring-projects/spring-authorization-server</id>
    <link href="https://github.com/spring-projects/spring-authorization-server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Spring Authorization Server&lt;/p&gt;&lt;hr&gt;&lt;div class=&#34;imageblock&#34;&gt; &#xA; &lt;div class=&#34;content&#34;&gt; &#xA;  &lt;a class=&#34;image&#34; href=&#34;https://gitter.im/spring-projects/spring-security?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;paragraph&#34;&gt; &#xA; &lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://github.com/spring-projects/spring-authorization-server/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/spring-projects/spring-authorization-server/workflows/CI/badge.svg?branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1 id=&#34;_spring_authorization_server&#34; class=&#34;sect0&#34;&gt;Spring Authorization Server&lt;/h1&gt; &#xA;&lt;div class=&#34;paragraph&#34;&gt; &#xA; &lt;p&gt;The Spring Authorization Server project, led by the &lt;a href=&#34;https://spring.io/projects/spring-security/&#34;&gt;Spring Security&lt;/a&gt; team, is focused on delivering &lt;a href=&#34;https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-01#section-1.1&#34;&gt;OAuth 2.1 Authorization Server&lt;/a&gt; support to the Spring community.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;paragraph&#34;&gt; &#xA; &lt;p&gt;This project replaces the Authorization Server support provided by &lt;a href=&#34;https://spring.io/projects/spring-security-oauth/&#34;&gt;Spring Security OAuth&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_feature_planning&#34;&gt;Feature Planning&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;This project uses &lt;a href=&#34;https://www.zenhub.com/&#34;&gt;ZenHub&lt;/a&gt; to prioritize the feature roadmap and help organize the project plan. The project board can be accessed &lt;a href=&#34;https://app.zenhub.com/workspaces/authorization-server-5e8f3182b5e8f5841bfc4902/board?repos=248032165&#34;&gt;here&lt;/a&gt;. It is recommended to install the ZenHub &lt;a href=&#34;https://www.zenhub.com/extension&#34;&gt;browser extension&lt;/a&gt; as it integrates natively within GitHub’s user interface.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;The feature list can be viewed in the &lt;a href=&#34;https://docs.spring.io/spring-authorization-server/docs/current/reference/html/overview.html#feature-list&#34;&gt;reference documentation&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_support_policy&#34;&gt;Support Policy&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;The Spring Authorization Server project provides software support and is documented in its &lt;a href=&#34;https://raw.githubusercontent.com/spring-projects/spring-authorization-server/main/SUPPORT_POLICY.adoc&#34;&gt;support policy&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_getting_started&#34;&gt;Getting Started&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;The first place to start is to read the &lt;a href=&#34;https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-01&#34;&gt;OAuth 2.1 Authorization Framework&lt;/a&gt; to gain an in-depth understanding on how to build an Authorization Server. It is a critically important first step as the implementation must conform to the specification defined in the OAuth 2.1 Authorization Framework and the &lt;a href=&#34;https://github.com/spring-projects/spring-authorization-server/wiki/OAuth-2.0-Specifications&#34;&gt;related specifications&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;The second place to start is to become very familiar with the codebase in the following Spring Security modules:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/spring-projects/spring-security/tree/main/oauth2/oauth2-core&#34;&gt;OAuth 2.0 Core&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/spring-projects/spring-security/tree/main/oauth2/oauth2-client&#34;&gt;OAuth 2.0 Client&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/spring-projects/spring-security/tree/main/oauth2/oauth2-resource-server&#34;&gt;OAuth 2.0 Resource Server&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/spring-projects/spring-security/tree/main/oauth2/oauth2-jose&#34;&gt;OAuth 2.0 JOSE&lt;/a&gt; (Javascript Object Signing and Encryption)&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;A significant amount of effort was put into developing the &lt;a href=&#34;https://spring.io/blog/2018/01/30/next-generation-oauth-2-0-support-with-spring-security&#34;&gt;Next Generation OAuth 2.0 Support in Spring Security&lt;/a&gt;. The goal is to leverage all the knowledge learned thus far and apply the same to the development of Spring Authorization Server.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Submitted work via pull requests should follow the same coding style/conventions and adopt the same or similar design patterns that have been established in Spring Security’s OAuth 2.0 support.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_documentation&#34;&gt;Documentation&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Be sure to read the &lt;a href=&#34;https://docs.spring.io/spring-security/reference&#34;&gt;Spring Security Reference&lt;/a&gt;, as well as the &lt;a href=&#34;https://docs.spring.io/spring-security/reference/servlet/oauth2/index.html&#34;&gt;OAuth 2.0 Reference&lt;/a&gt;, which describes the Client and Resource Server features available.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Extensive JavaDoc for the Spring Security code is also available in the &lt;a href=&#34;https://docs.spring.io/spring-security/site/docs/current/api/&#34;&gt;Spring Security API Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_code_of_conduct&#34;&gt;Code of Conduct&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;This project adheres to the Contributor Covenant &lt;a href=&#34;https://raw.githubusercontent.com/spring-projects/spring-authorization-server/main/CODE_OF_CONDUCT.adoc&#34;&gt;code of conduct&lt;/a&gt;. By participating, you are expected to uphold this code. Please report unacceptable behavior to &lt;a href=&#34;mailto:spring-code-of-conduct@pivotal.io&#34;&gt;spring-code-of-conduct@pivotal.io&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_downloading_artifacts&#34;&gt;Downloading Artifacts&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;See &lt;a href=&#34;https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-Artifacts&#34;&gt;downloading Spring artifacts&lt;/a&gt; for Maven repository information.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_building_from_source&#34;&gt;Building from Source&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Spring Authorization Server uses a &lt;a href=&#34;https://gradle.org&#34;&gt;Gradle&lt;/a&gt;-based build system. In the instructions below, &lt;a href=&#34;https://vimeo.com/34436402&#34;&gt;&lt;code&gt;./gradlew&lt;/code&gt;&lt;/a&gt; is invoked from the root of the source tree and serves as a cross-platform, self-contained bootstrap mechanism for the build.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_prerequisites&#34;&gt;Prerequisites&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;a href=&#34;https://help.github.com/set-up-git-redirect&#34;&gt;Git&lt;/a&gt; and the &lt;a href=&#34;https://www.oracle.com/technetwork/java/javase/downloads&#34;&gt;JDK11 build&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Be sure that your &lt;code&gt;JAVA_HOME&lt;/code&gt; environment variable points to the &lt;code&gt;jdk11&lt;/code&gt; folder extracted from the JDK download.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_check_out_sources&#34;&gt;Check out sources&lt;/h3&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre&gt;git clone git@github.com:spring-projects/spring-authorization-server.git&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_install_all_spring_jars_into_your_local_maven_cache&#34;&gt;Install all spring-* jars into your local Maven cache&lt;/h3&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre&gt;./gradlew install&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_compile_and_test_build_all_jars_distribution_zips_and_docs&#34;&gt;Compile and test; build all jars, distribution zips, and docs&lt;/h3&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre&gt;./gradlew build&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Discover more commands with &lt;code&gt;./gradlew tasks&lt;/code&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_getting_support&#34;&gt;Getting Support&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Check out the &lt;a href=&#34;https://stackoverflow.com/questions/tagged/spring-security&#34;&gt;Spring Security tags on Stack Overflow&lt;/a&gt;. &lt;a href=&#34;https://spring.io/services&#34;&gt;Commercial support&lt;/a&gt; is available too.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_contributing&#34;&gt;Contributing&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;a href=&#34;https://help.github.com/articles/creating-a-pull-request&#34;&gt;Pull requests&lt;/a&gt; are welcome; see the &lt;a href=&#34;https://raw.githubusercontent.com/spring-projects/spring-authorization-server/main/CONTRIBUTING.adoc&#34;&gt;contributor guidelines&lt;/a&gt; for details.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_license&#34;&gt;License&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Spring Authorization Server is Open Source software released under the &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;Apache 2.0 license&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>OpenAPITools/openapi-generator</title>
    <updated>2022-06-01T02:01:04Z</updated>
    <id>tag:github.com,2022-06-01:/OpenAPITools/openapi-generator</id>
    <link href="https://github.com/OpenAPITools/openapi-generator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenAPI Generator allows generation of API client libraries (SDK generation), server stubs, documentation and configuration automatically given an OpenAPI Spec (v2, v3)&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;OpenAPI Generator&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;http://search.maven.org/#search%7Cgav%7C1%7Cg%3A%22org.openapitools%22%20AND%20a%3A%22openapi-generator%22&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-metadata/v/https/repo1.maven.org/maven2/org/openapitools/openapi-generator/maven-metadata.xml.svg?sanitize=true&#34; alt=&#34;Stable releases in Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-orange&#34; alt=&#34;Apache 2.0 License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/openapi_generator&#34;&gt;&lt;img src=&#34;https://img.shields.io/opencollective/backers/openapi_generator?color=orange&amp;amp;label=OpenCollective%20Backers&#34; alt=&#34;Open Collective backers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://join.slack.com/t/openapi-generator/shared_invite/zt-12jxxd7p2-XUeQM~4pzsU9x~eGLQqX2g&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Slack-Join%20the%20chat%20room-orange&#34; alt=&#34;Join the Slack chat room&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/oas_generator&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/oas_generator.svg?style=social&amp;amp;label=Follow&#34; alt=&#34;Follow OpenAPI Generator Twitter account to get the latest update&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/OpenAPITools/openapi-generator/tree/master&#34;&gt;Master&lt;/a&gt; (&lt;code&gt;6.0.1&lt;/code&gt;): &lt;a href=&#34;https://travis-ci.com/OpenAPITools/openapi-generator&#34;&gt;&lt;img src=&#34;https://img.shields.io/travis/OpenAPITools/openapi-generator/master.svg?label=Integration%20Test&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/OpenAPITools/openapi-generator&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/OpenAPITools/openapi-generator.svg?style=shield&#34; alt=&#34;Integration Test2&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/WilliamCheng/openapi-generator&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/github/openapitools/openapi-generator?branch=master&amp;amp;svg=true&amp;amp;passingText=Windows%20Test%20-%20OK&amp;amp;failingText=Windows%20Test%20-%20Fails&#34; alt=&#34;Windows Test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.bitrise.io/app/4a2b10a819d12b67&#34;&gt;&lt;img src=&#34;https://img.shields.io/bitrise/4a2b10a819d12b67/master?label=bitrise%3A%20Swift+4,5&amp;amp;token=859FMDR8QHwabCzwvZK6vQ&#34; alt=&#34;Bitrise&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/OpenAPITools/openapi-generator/actions?query=workflow%3A%22Check+Supported+Java+Versions%22&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/openapitools/openapi-generator/Check%20Supported%20Java%20Versions/master?label=Check%20Supported%20Java%20Versions&amp;amp;logo=github&amp;amp;logoColor=green&#34; alt=&#34;GitHub Workflow Status (branch)&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/OpenAPITools/openapi-generator/tree/6.1.x&#34;&gt;6.1.x&lt;/a&gt; (&lt;code&gt;6.1.x&lt;/code&gt;): &lt;a href=&#34;https://travis-ci.com/OpenAPITools/openapi-generator&#34;&gt;&lt;img src=&#34;https://img.shields.io/travis/OpenAPITools/openapi-generator/6.1.x.svg?label=Integration%20Test&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/OpenAPITools/openapi-generator&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/OpenAPITools/openapi-generator/tree/6.1.x.svg?style=shield&#34; alt=&#34;Integration Test2&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/WilliamCheng/openapi-generator&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/github/openapitools/openapi-generator?branch=6.1.x&amp;amp;svg=true&amp;amp;passingText=Windows%20Test%20-%20OK&amp;amp;failingText=Windows%20Test%20-%20Fails&#34; alt=&#34;Windows Test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.bitrise.io/app/4a2b10a819d12b67&#34;&gt;&lt;img src=&#34;https://img.shields.io/bitrise/4a2b10a819d12b67/6.1.x?label=bitrise%3A%20Swift+4,5&amp;amp;token=859FMDR8QHwabCzwvZK6vQ&#34; alt=&#34;Bitrise&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/OpenAPITools/openapi-generator/tree/7.0.x&#34;&gt;7.0.x&lt;/a&gt; (&lt;code&gt;7.0.x&lt;/code&gt;): &lt;a href=&#34;https://travis-ci.com/OpenAPITools/openapi-generator&#34;&gt;&lt;img src=&#34;https://img.shields.io/travis/OpenAPITools/openapi-generator/7.0.x.svg?label=Integration%20Test&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/OpenAPITools/openapi-generator&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/OpenAPITools/openapi-generator/tree/7.0.x.svg?style=shield&#34; alt=&#34;Integration Test2&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/WilliamCheng/openapi-generator&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/github/openapitools/openapi-generator?branch=7.0.x&amp;amp;svg=true&amp;amp;passingText=Windows%20Test%20-%20OK&amp;amp;failingText=Windows%20Test%20-%20Fails&#34; alt=&#34;Windows Test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.bitrise.io/app/4a2b10a819d12b67&#34;&gt;&lt;img src=&#34;https://img.shields.io/bitrise/4a2b10a819d12b67/7.0.x?label=bitrise%3A%20Swift+4,5&amp;amp;token=859FMDR8QHwabCzwvZK6vQ&#34; alt=&#34;Bitrise&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;span&gt;⭐&lt;/span&gt;&lt;span&gt;⭐&lt;/span&gt;&lt;span&gt;⭐&lt;/span&gt; If you would like to contribute, please refer to &lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/CONTRIBUTING.md&#34;&gt;guidelines&lt;/a&gt; and a list of &lt;a href=&#34;https://github.com/openapitools/openapi-generator/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22&#34;&gt;open tasks&lt;/a&gt;.&lt;span&gt;⭐&lt;/span&gt;&lt;span&gt;⭐&lt;/span&gt;&lt;span&gt;⭐&lt;/span&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;span&gt;‼&lt;/span&gt; To migrate from Swagger Codegen to OpenAPI Generator, please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/docs/migration-from-swagger-codegen.md&#34;&gt;migration guide&lt;/a&gt; &lt;span&gt;‼&lt;/span&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;span&gt;📔&lt;/span&gt; For more information, please refer to the &lt;a href=&#34;https://github.com/openapitools/openapi-generator/wiki&#34;&gt;Wiki page&lt;/a&gt; and &lt;a href=&#34;https://github.com/openapitools/openapi-generator/wiki/FAQ&#34;&gt;FAQ&lt;/a&gt; &lt;span&gt;📔&lt;/span&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;span&gt;📔&lt;/span&gt; The eBook &lt;a href=&#34;https://gum.co/openapi_generator_ebook&#34;&gt;A Beginner&#39;s Guide to Code Generation for REST APIs&lt;/a&gt; is a good starting point for beginners &lt;span&gt;📔&lt;/span&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; If the OpenAPI spec, templates or any input (e.g. options, environment variables) is obtained from an untrusted source or environment, please make sure you&#39;ve reviewed these inputs before using OpenAPI Generator to generate the API client, server stub or documentation to avoid potential security issues (e.g. &lt;a href=&#34;https://en.wikipedia.org/wiki/Code_injection&#34;&gt;code injection&lt;/a&gt;). For security vulnerabilities, please contact &lt;a href=&#34;mailto:team@openapitools.org&#34;&gt;team@openapitools.org&lt;/a&gt;. &lt;span&gt;⚠&lt;/span&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;span&gt;‼&lt;/span&gt; Both &#34;OpenAPI Tools&#34; (&lt;a href=&#34;https://OpenAPITools.org&#34;&gt;https://OpenAPITools.org&lt;/a&gt; - the parent organization of OpenAPI Generator) and &#34;OpenAPI Generator&#34; are not affiliated with OpenAPI Initiative (OAI) &lt;span&gt;‼&lt;/span&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;If you find OpenAPI Generator useful for work, please consider asking your company to support this Open Source project by &lt;a href=&#34;https://opencollective.com/openapi_generator&#34;&gt;becoming a sponsor&lt;/a&gt;. You can also individually sponsor the project by &lt;a href=&#34;https://opencollective.com/openapi_generator&#34;&gt;becoming a backer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Thank you to our bronze sponsors!&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.namsor.com/?utm_source=openapi_generator&amp;amp;utm_medium=github_webpage&amp;amp;utm_campaign=sponsor&#34;&gt;&lt;img src=&#34;https://openapi-generator.tech/img/companies/namsor.png&#34; alt=&#34;NamSor&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.lightbow.net/?utm_source=openapi_generator&amp;amp;utm_medium=github_webpage&amp;amp;utm_campaign=sponsor&#34;&gt;&lt;img src=&#34;https://openapi-generator.tech/img/companies/lightbow.png&#34; alt=&#34;LightBow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docspring.com/?utm_source=openapi_generator&amp;amp;utm_medium=github_webpage&amp;amp;utm_campaign=sponsor&#34;&gt;&lt;img src=&#34;https://openapi-generator.tech/img/companies/docspring.png&#34; width=&#34;128&#34; height=&#34;128&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://datadoghq.com/?utm_source=openapi_generator&amp;amp;utm_medium=github_webpage&amp;amp;utm_campaign=sponsor&#34;&gt;&lt;img src=&#34;https://openapi-generator.tech/img/companies/datadog.png&#34; width=&#34;128&#34; height=&#34;128&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cpl.thalesgroup.com/?utm_source=openapi_generator&amp;amp;utm_medium=github_webpage&amp;amp;utm_campaign=sponsor&#34;&gt;&lt;img src=&#34;https://openapi-generator.tech/img/companies/thales.jpg&#34; width=&#34;128&#34; height=&#34;128&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.apideck.com/?utm_source=openapi_generator&amp;amp;utm_medium=github_webpage&amp;amp;utm_campaign=sponsor&#34;&gt;&lt;img src=&#34;https://openapi-generator.tech/img/companies/apideck.jpg&#34; width=&#34;128&#34; height=&#34;128&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.pexa.com.au/?utm_source=openapi_generator&amp;amp;utm_medium=github_webpage&amp;amp;utm_campaign=sponsor&#34;&gt;&lt;img src=&#34;https://openapi-generator.tech/img/companies/pexa.png&#34; width=&#34;128&#34; height=&#34;128&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.numary.com/?utm_source=openapi_generator&amp;amp;utm_medium=github_webpage&amp;amp;utm_campaign=sponsor&#34;&gt;&lt;img src=&#34;https://openapi-generator.tech/img/companies/numary.png&#34; width=&#34;128&#34; height=&#34;128&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.onesignal.com/?utm_source=openapi_generator&amp;amp;utm_medium=github_webpage&amp;amp;utm_campaign=sponsor&#34;&gt;&lt;img src=&#34;https://openapi-generator.tech/img/companies/onesignal.png&#34; width=&#34;128&#34; height=&#34;128&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.virtualansoftware.com/?utm_source=openapi_generator&amp;amp;utm_medium=github_webpage&amp;amp;utm_campaign=sponsor&#34;&gt;&lt;img src=&#34;https://openapi-generator.tech/img/companies/virtualansoftware.png&#34; width=&#34;128&#34; height=&#34;128&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.merge.dev/?utm_source=openapi_generator&amp;amp;utm_medium=github_webpage&amp;amp;utm_campaign=sponsor&#34;&gt;&lt;img src=&#34;https://openapi-generator.tech/img/companies/mergedev.jpeg&#34; width=&#34;128&#34; height=&#34;128&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Thank you GoDaddy for sponsoring the domain names, Linode for sponsoring the VPS and Checkly for sponsoring the API monitoring&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.godaddy.com/?utm_source=openapi_generator&amp;amp;utm_medium=github_webpage&amp;amp;utm_campaign=sponsor&#34;&gt;&lt;img src=&#34;https://openapi-generator.tech/img/companies/godaddy.png&#34; width=&#34;150&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.linode.com/?utm_source=openapi_generator&amp;amp;utm_medium=github_webpage&amp;amp;utm_campaign=sponsor&#34;&gt;&lt;img src=&#34;https://www.linode.com/media/images/logos/standard/light/linode-logo_standard_light_small.png&#34; alt=&#34;Linode&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://checklyhq.com/?utm_source=openapi_generator&amp;amp;utm_medium=github_webpage&amp;amp;utm_campaign=sponsor&#34;&gt;&lt;img src=&#34;https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRAhEYadUyZYzGUotZiSdXkVMqqLGuohyixLl4eUpUV6pAbUULL&#34; width=&#34;150&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;OpenAPI Generator allows generation of API client libraries (SDK generation), server stubs, documentation and configuration automatically given an &lt;a href=&#34;https://github.com/OAI/OpenAPI-Specification&#34;&gt;OpenAPI Spec&lt;/a&gt; (both 2.0 and 3.0 are supported). Currently, the following languages/frameworks are supported:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Languages/Frameworks&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;API clients&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;ActionScript&lt;/strong&gt;, &lt;strong&gt;Ada&lt;/strong&gt;, &lt;strong&gt;Apex&lt;/strong&gt;, &lt;strong&gt;Bash&lt;/strong&gt;, &lt;strong&gt;C&lt;/strong&gt;, &lt;strong&gt;C#&lt;/strong&gt; (.net 2.0, 3.5 or later, .NET Standard 1.3 - 2.1, .NET Core 3.1, .NET 5.0. Libraries: RestSharp, GenericHost, HttpClient), &lt;strong&gt;C++&lt;/strong&gt; (Arduino, cpp-restsdk, Qt5, Tizen, Unreal Engine 4), &lt;strong&gt;Clojure&lt;/strong&gt;, &lt;strong&gt;Crystal&lt;/strong&gt;, &lt;strong&gt;Dart&lt;/strong&gt;, &lt;strong&gt;Elixir&lt;/strong&gt;, &lt;strong&gt;Elm&lt;/strong&gt;, &lt;strong&gt;Eiffel&lt;/strong&gt;, &lt;strong&gt;Erlang&lt;/strong&gt;, &lt;strong&gt;Go&lt;/strong&gt;, &lt;strong&gt;Groovy&lt;/strong&gt;, &lt;strong&gt;Haskell&lt;/strong&gt; (http-client, Servant), &lt;strong&gt;Java&lt;/strong&gt; (Apache HttpClient, Jersey1.x, Jersey2.x, OkHttp, Retrofit1.x, Retrofit2.x, Feign, RestTemplate, RESTEasy, Vertx, Google API Client Library for Java, Rest-assured, Spring 5 Web Client, MicroProfile Rest Client), &lt;strong&gt;k6&lt;/strong&gt;, &lt;strong&gt;Kotlin&lt;/strong&gt;, &lt;strong&gt;Lua&lt;/strong&gt;, &lt;strong&gt;Nim&lt;/strong&gt;, &lt;strong&gt;Node.js/JavaScript&lt;/strong&gt; (ES5, ES6, AngularJS with Google Closure Compiler annotations, Flow types, Apollo GraphQL DataStore), &lt;strong&gt;Objective-C&lt;/strong&gt;, &lt;strong&gt;OCaml&lt;/strong&gt;, &lt;strong&gt;Perl&lt;/strong&gt;, &lt;strong&gt;PHP&lt;/strong&gt;, &lt;strong&gt;PowerShell&lt;/strong&gt;, &lt;strong&gt;Python&lt;/strong&gt;, &lt;strong&gt;R&lt;/strong&gt;, &lt;strong&gt;Ruby&lt;/strong&gt;, &lt;strong&gt;Rust&lt;/strong&gt; (hyper, reqwest, rust-server), &lt;strong&gt;Scala&lt;/strong&gt; (akka, http4s, scalaz, sttp, swagger-async-httpclient), &lt;strong&gt;Swift&lt;/strong&gt; (2.x, 3.x, 4.x, 5.x), &lt;strong&gt;Typescript&lt;/strong&gt; (AngularJS, Angular (2.x - 13.x), Aurelia, Axios, Fetch, Inversify, jQuery, Nestjs, Node, redux-query, Rxjs)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Server stubs&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Ada&lt;/strong&gt;, &lt;strong&gt;C#&lt;/strong&gt; (ASP.NET Core, Azure Functions), &lt;strong&gt;C++&lt;/strong&gt; (Pistache, Restbed, Qt5 QHTTPEngine), &lt;strong&gt;Erlang&lt;/strong&gt;, &lt;strong&gt;F#&lt;/strong&gt; (Giraffe), &lt;strong&gt;Go&lt;/strong&gt; (net/http, Gin, Echo), &lt;strong&gt;Haskell&lt;/strong&gt; (Servant, Yesod), &lt;strong&gt;Java&lt;/strong&gt; (MSF4J, Spring, Undertow, JAX-RS: CDI, CXF, Inflector, Jersey, RestEasy, Play Framework, &lt;a href=&#34;https://github.com/ProKarma-Inc/pkmst-getting-started-examples&#34;&gt;PKMST&lt;/a&gt;, &lt;a href=&#34;https://vertx.io/&#34;&gt;Vert.x&lt;/a&gt;, &lt;a href=&#34;https://camel.apache.org/&#34;&gt;Apache Camel&lt;/a&gt;), &lt;strong&gt;Kotlin&lt;/strong&gt; (Spring Boot, Ktor, Vertx), &lt;strong&gt;PHP&lt;/strong&gt; (Laravel, Lumen, &lt;a href=&#34;https://github.com/mezzio/mezzio&#34;&gt;Mezzio (fka Zend Expressive)&lt;/a&gt;, Slim, Silex, &lt;a href=&#34;https://symfony.com/&#34;&gt;Symfony&lt;/a&gt;), &lt;strong&gt;Python&lt;/strong&gt; (FastAPI, Flask), &lt;strong&gt;NodeJS&lt;/strong&gt;, &lt;strong&gt;Ruby&lt;/strong&gt; (Sinatra, Rails5), &lt;strong&gt;Rust&lt;/strong&gt; (rust-server), &lt;strong&gt;Scala&lt;/strong&gt; (Akka, &lt;a href=&#34;https://github.com/finagle/finch&#34;&gt;Finch&lt;/a&gt;, &lt;a href=&#34;https://github.com/lagom/lagom&#34;&gt;Lagom&lt;/a&gt;, &lt;a href=&#34;https://www.playframework.com/&#34;&gt;Play&lt;/a&gt;, Scalatra)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;API documentation generators&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;HTML&lt;/strong&gt;, &lt;strong&gt;Confluence Wiki&lt;/strong&gt;, &lt;strong&gt;Asciidoc&lt;/strong&gt;, &lt;strong&gt;Markdown&lt;/strong&gt;, &lt;strong&gt;PlantUML&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Configuration files&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://httpd.apache.org/&#34;&gt;&lt;strong&gt;Apache2&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Others&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;GraphQL&lt;/strong&gt;, &lt;strong&gt;JMeter&lt;/strong&gt;, &lt;strong&gt;Ktorm&lt;/strong&gt;, &lt;strong&gt;MySQL Schema&lt;/strong&gt;, &lt;strong&gt;Protocol Buffer&lt;/strong&gt;, &lt;strong&gt;WSDL&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#openapi-generator&#34;&gt;OpenAPI Generator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents&#34;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#1---installation&#34;&gt;1 - Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#11---compatibility&#34;&gt;1.1 - Compatibility&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#12---artifacts-on-maven-central&#34;&gt;1.2 - Artifacts on Maven Central&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#13---download-jar&#34;&gt;1.3 - Download JAR&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#14---build-projects&#34;&gt;1.4 - Build Projects&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#15---homebrew&#34;&gt;1.5 - Homebrew&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#16---docker&#34;&gt;1.6 - Docker&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#17---npm&#34;&gt;1.7 - NPM&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#2---getting-started&#34;&gt;2 - Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#3---usage&#34;&gt;3 - Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#31---customization&#34;&gt;3.1 - Customization&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#32---workflow-integration-maven-gradle-github-cicd&#34;&gt;3.2 - Workflow Integration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#33---online-openapi-generator&#34;&gt;3.3 - Online Generators&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#34---license-information-on-generated-code&#34;&gt;3.4 - License Information on Generated Code&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#35---ide-integration&#34;&gt;3.5 - IDE Integration&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#4---companiesprojects-using-openapi-generator&#34;&gt;4 - Companies/Projects using OpenAPI Generator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#5---presentationsvideostutorialsbooks&#34;&gt;5 - Presentations/Videos/Tutorials/Books&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#6---about-us&#34;&gt;6 - About Us&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#61---openapi-generator-core-team&#34;&gt;6.1 - OpenAPI Generator Core Team&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#62---openapi-generator-technical-committee&#34;&gt;6.2 - OpenAPI Generator Technical Committee&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#63---history-of-openapi-generator&#34;&gt;6.3 - History of OpenAPI Generator&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#7---license&#34;&gt;7 - License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents&#34;&gt;1 - Installation&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents&#34;&gt;1.1 - Compatibility&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The OpenAPI Specification has undergone 3 revisions since initial creation in 2010. The openapi-generator project has the following compatibilities with the OpenAPI Specification:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;OpenAPI Generator Version&lt;/th&gt; &#xA;   &lt;th&gt;Release Date&lt;/th&gt; &#xA;   &lt;th&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;7.0.0 (upcoming major release) &lt;a href=&#34;https://oss.sonatype.org/content/repositories/snapshots/org/openapitools/openapi-generator-cli/7.0.0-SNAPSHOT/&#34;&gt;SNAPSHOT&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Feb/Mar 2023&lt;/td&gt; &#xA;   &lt;td&gt;Major release with breaking changes (no fallback)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6.1.0 (upcoming minor release) &lt;a href=&#34;https://oss.sonatype.org/content/repositories/snapshots/org/openapitools/openapi-generator-cli/6.1.0-SNAPSHOT/&#34;&gt;SNAPSHOT&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;26.07 2022&lt;/td&gt; &#xA;   &lt;td&gt;Minor release with breaking changes (with fallbac)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6.0.1 (upcoming patch release) &lt;a href=&#34;https://oss.sonatype.org/content/repositories/snapshots/org/openapitools/openapi-generator-cli/6.0.1-SNAPSHOT/&#34;&gt;SNAPSHOT&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;26.06 2022&lt;/td&gt; &#xA;   &lt;td&gt;Patch release (enhancements, bug fixes, etc)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/OpenAPITools/openapi-generator/releases/tag/v6.0.0&#34;&gt;6.0.0&lt;/a&gt; (latest stable release)&lt;/td&gt; &#xA;   &lt;td&gt;26.05.2022&lt;/td&gt; &#xA;   &lt;td&gt;Major release with breaking changes (no fallback)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/OpenAPITools/openapi-generator/releases/tag/v5.4.0&#34;&gt;5.4.0&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;31.01.2022&lt;/td&gt; &#xA;   &lt;td&gt;Minor release with breaking changes (with fallback)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/OpenAPITools/openapi-generator/releases/tag/v4.3.1&#34;&gt;4.3.1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;06.05.2020&lt;/td&gt; &#xA;   &lt;td&gt;Patch release (enhancements, bug fixes, etc)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;OpenAPI Spec compatibility: 1.0, 1.1, 1.2, 2.0, 3.0&lt;/p&gt; &#xA;&lt;p&gt;For old releases, please refer to the &lt;a href=&#34;https://github.com/OpenAPITools/openapi-generator/releases&#34;&gt;&lt;strong&gt;Release&lt;/strong&gt;&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents&#34;&gt;1.2 - Artifacts on Maven Central&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;You can find our released artifacts on maven central:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Core:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;org.openapitools&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;openapi-generator&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;${openapi-generator-version}&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the different versions of the &lt;a href=&#34;https://search.maven.org/artifact/org.openapitools/openapi-generator&#34;&gt;openapi-generator&lt;/a&gt; artifact available on maven central.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Cli:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;org.openapitools&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;openapi-generator-cli&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;${openapi-generator-version}&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the different versions of the &lt;a href=&#34;https://search.maven.org/artifact/org.openapitools/openapi-generator-cli&#34;&gt;openapi-generator-cli&lt;/a&gt; artifact available on maven central.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Maven plugin:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;org.openapitools&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;openapi-generator-maven-plugin&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;${openapi-generator-version}&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See the different versions of the &lt;a href=&#34;https://search.maven.org/artifact/org.openapitools/openapi-generator-maven-plugin&#34;&gt;openapi-generator-maven-plugin&lt;/a&gt; artifact available on maven central.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/OpenAPITools/openapi-generator/raw/master/modules/openapi-generator-maven-plugin/README.md&#34;&gt;Readme&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Gradle plugin:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;org.openapitools&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;openapi-generator-gradle-plugin&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;${openapi-generator-version}&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See the different versions of the &lt;a href=&#34;https://search.maven.org/artifact/org.openapitools/openapi-generator-gradle-plugin&#34;&gt;openapi-generator-gradle-plugin&lt;/a&gt; artifact available on maven central.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/OpenAPITools/openapi-generator/raw/master/modules/openapi-generator-gradle-plugin/README.adoc&#34;&gt;Readme&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents&#34;&gt;1.3 - Download JAR&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;!-- RELEASE_VERSION --&gt; &#xA;&lt;p&gt;If you&#39;re looking for the latest stable version, you can grab it directly from Maven.org (Java 8 runtime at a minimum):&lt;/p&gt; &#xA;&lt;p&gt;JAR location: &lt;code&gt;https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/6.0.0/openapi-generator-cli-6.0.0.jar&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;For &lt;strong&gt;Mac/Linux&lt;/strong&gt; users:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;wget https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/6.0.0/openapi-generator-cli-6.0.0.jar -O openapi-generator-cli.jar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For &lt;strong&gt;Windows&lt;/strong&gt; users, you will need to install &lt;a href=&#34;http://gnuwin32.sourceforge.net/packages/wget.htm&#34;&gt;wget&lt;/a&gt; or you can use Invoke-WebRequest in PowerShell (3.0+), e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Invoke-WebRequest -OutFile openapi-generator-cli.jar https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/6.0.0/openapi-generator-cli-6.0.0.jar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After downloading the JAR, run &lt;code&gt;java -jar openapi-generator-cli.jar help&lt;/code&gt; to show the usage.&lt;/p&gt; &#xA;&lt;p&gt;For Mac users, please make sure Java 8 is installed (Tips: run &lt;code&gt;java -version&lt;/code&gt; to check the version), and export &lt;code&gt;JAVA_HOME&lt;/code&gt; in order to use the supported Java version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export JAVA_HOME=`/usr/libexec/java_home -v 1.8`&#xA;export PATH=${JAVA_HOME}/bin:$PATH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- /RELEASE_VERSION --&gt; &#xA;&lt;h3&gt;Launcher Script&lt;/h3&gt; &#xA;&lt;p&gt;One downside to manual jar downloads is that you don&#39;t keep up-to-date with the latest released version. We have a Bash launcher script at &lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/bin/utils/openapi-generator-cli.sh&#34;&gt;bin/utils/openapi-generator.cli.sh&lt;/a&gt; which resolves this issue.&lt;/p&gt; &#xA;&lt;p&gt;To install the launcher script, copy the contents of the script to a location on your path and make the script executable.&lt;/p&gt; &#xA;&lt;p&gt;An example of setting this up (NOTE: Always evaluate scripts curled from external systems before executing them).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir -p ~/bin/openapitools&#xA;curl https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/bin/utils/openapi-generator-cli.sh &amp;gt; ~/bin/openapitools/openapi-generator-cli&#xA;chmod u+x ~/bin/openapitools/openapi-generator-cli&#xA;export PATH=$PATH:~/bin/openapitools/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, &lt;code&gt;openapi-generator-cli&lt;/code&gt; is &#34;installed&#34;. On invocation, it will query the GitHub repository for the most recently released version. If this matches the last downloaded jar, it will execute as normal. If a newer version is found, the script will download the latest release and execute it.&lt;/p&gt; &#xA;&lt;p&gt;If you need to invoke an older version of the generator, you can define the variable &lt;code&gt;OPENAPI_GENERATOR_VERSION&lt;/code&gt; either ad hoc or globally. You can export this variable if you&#39;d like to persist a specific release version.&lt;/p&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Execute latest released openapi-generator-cli&#xA;openapi-generator-cli version&#xA;&#xA;# Execute version 4.1.0 for the current invocation, regardless of the latest released version&#xA;OPENAPI_GENERATOR_VERSION=4.1.0 openapi-generator-cli version&#xA;&#xA;# Execute version 4.1.0-SNAPSHOT for the current invocation&#xA;OPENAPI_GENERATOR_VERSION=4.1.0-SNAPSHOT openapi-generator-cli version&#xA;&#xA;# Execute version 4.0.2 for every invocation in the current shell session&#xA;export OPENAPI_GENERATOR_VERSION=4.0.2&#xA;openapi-generator-cli version # is 4.0.2&#xA;openapi-generator-cli version # is also 4.0.2&#xA;&#xA;# To &#34;install&#34; a specific version, set the variable in .bashrc/.bash_profile&#xA;echo &#34;export OPENAPI_GENERATOR_VERSION=4.0.2&#34; &amp;gt;&amp;gt; ~/.bashrc&#xA;source ~/.bashrc&#xA;openapi-generator-cli version # is always 4.0.2, unless any of the above overrides are done ad hoc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents&#34;&gt;1.4 - Build Projects&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;To build from source, you need the following installed and available in your &lt;code&gt;$PATH:&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.oracle.com/technetwork/java/index.html&#34;&gt;Java 8&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://maven.apache.org/&#34;&gt;Apache Maven 3.3.4 or greater&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After cloning the project, you can build it from source with this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mvn clean install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t have maven installed, you may directly use the included &lt;a href=&#34;https://github.com/takari/maven-wrapper&#34;&gt;maven wrapper&lt;/a&gt;, and build with the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./mvnw clean install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default build contains minimal static analysis (via CheckStyle). To run your build with PMD and Spotbugs, use the &lt;code&gt;static-analysis&lt;/code&gt; profile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mvn -Pstatic-analysis clean install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents&#34;&gt;1.5 - Homebrew&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;To install, run &lt;code&gt;brew install openapi-generator&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here is an example usage to generate a Ruby client:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;openapi-generator generate -i https://raw.githubusercontent.com/openapitools/openapi-generator/master/modules/openapi-generator/src/test/resources/3_0/petstore.yaml -g ruby -o /tmp/test/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To reinstall with the latest master, run &lt;code&gt;brew uninstall openapi-generator &amp;amp;&amp;amp; brew install --HEAD openapi-generator&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To install OpenJDK (pre-requisites), please run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew tap AdoptOpenJDK/openjdk&#xA;brew install --cask adoptopenjdk12&#xA;export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk-12.0.2.jdk/Contents/Home/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install Maven, please run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install maven&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents&#34;&gt;1.6 - Docker&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h4&gt;Public Pre-built Docker images&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/openapitools/openapi-generator-cli/&#34;&gt;https://hub.docker.com/r/openapitools/openapi-generator-cli/&lt;/a&gt; (official CLI)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/openapitools/openapi-generator-online/&#34;&gt;https://hub.docker.com/r/openapitools/openapi-generator-online/&lt;/a&gt; (official web service)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;OpenAPI Generator CLI Docker Image&lt;/h4&gt; &#xA;&lt;p&gt;The OpenAPI Generator image acts as a standalone executable. It can be used as an alternative to installing via homebrew, or for developers who are unable to install Java or upgrade the installed version.&lt;/p&gt; &#xA;&lt;p&gt;To generate code with this image, you&#39;ll need to mount a local location as a volume.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run --rm -v &#34;${PWD}:/local&#34; openapitools/openapi-generator-cli generate \&#xA;    -i https://raw.githubusercontent.com/openapitools/openapi-generator/master/modules/openapi-generator/src/test/resources/3_0/petstore.yaml \&#xA;    -g go \&#xA;    -o /local/out/go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The generated code will be located under &lt;code&gt;./out/go&lt;/code&gt; in the current directory.&lt;/p&gt; &#xA;&lt;h4&gt;OpenAPI Generator Online Docker Image&lt;/h4&gt; &#xA;&lt;p&gt;The openapi-generator-online image can act as a self-hosted web application and API for generating code. This container can be incorporated into a CI pipeline, and requires at least two HTTP requests and some docker orchestration to access generated code.&lt;/p&gt; &#xA;&lt;p&gt;Example usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Start container at port 8888 and save the container id&#xA;&amp;gt; CID=$(docker run -d -p 8888:8080 openapitools/openapi-generator-online)&#xA;&#xA;# allow for startup&#xA;&amp;gt; sleep 10&#xA;&#xA;# Get the IP of the running container (optional)&#xA;GEN_IP=$(docker inspect --format &#39;{{.NetworkSettings.IPAddress}}&#39;  $CID)&#xA;&#xA;# Execute an HTTP request to generate a Ruby client&#xA;&amp;gt; curl -X POST --header &#39;Content-Type: application/json&#39; --header &#39;Accept: application/json&#39; \&#xA;-d &#39;{&#34;openAPIUrl&#34;: &#34;https://raw.githubusercontent.com/openapitools/openapi-generator/master/modules/openapi-generator/src/test/resources/3_0/petstore.yaml&#34;}&#39; \&#xA;&#39;http://localhost:8888/api/gen/clients/ruby&#39;&#xA;&#xA;{&#34;code&#34;:&#34;c2d483.3.4672-40e9-91df-b9ffd18d22b8&#34;,&#34;link&#34;:&#34;http://localhost:8888/api/gen/download/c2d483.3.4672-40e9-91df-b9ffd18d22b8&#34;}&#xA;&#xA;# Download the generated zip file&#xA;&amp;gt; wget http://localhost:8888/api/gen/download/c2d483.3.4672-40e9-91df-b9ffd18d22b8&#xA;&#xA;# Unzip the file&#xA;&amp;gt; unzip c2d483.3.4672-40e9-91df-b9ffd18d22b8&#xA;&#xA;# Shutdown the openapi generator image&#xA;&amp;gt; docker stop $CID &amp;amp;&amp;amp; docker rm $CID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Development in docker&lt;/h4&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;run-in-docker.sh&lt;/code&gt; to do all development. This script maps your local repository to &lt;code&gt;/gen&lt;/code&gt; in the docker container. It also maps &lt;code&gt;~/.m2/repository&lt;/code&gt; to the appropriate container location.&lt;/p&gt; &#xA;&lt;p&gt;To execute &lt;code&gt;mvn package&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/openapitools/openapi-generator&#xA;cd openapi-generator&#xA;./run-in-docker.sh mvn package&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build artifacts are now accessible in your working directory.&lt;/p&gt; &#xA;&lt;p&gt;Once built, &lt;code&gt;run-in-docker.sh&lt;/code&gt; will act as an executable for openapi-generator-cli. To generate code, you&#39;ll need to output to a directory under &lt;code&gt;/gen&lt;/code&gt; (e.g. &lt;code&gt;/gen/out&lt;/code&gt;). For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./run-in-docker.sh help # Executes &#39;help&#39; command for openapi-generator-cli&#xA;./run-in-docker.sh list # Executes &#39;list&#39; command for openapi-generator-cli&#xA;./run-in-docker.sh /gen/bin/go-petstore.sh  # Builds the Go client&#xA;./run-in-docker.sh generate -i modules/openapi-generator/src/test/resources/3_0/petstore.yaml \&#xA;    -g go -o /gen/out/go-petstore -p packageName=petstore # generates go client, outputs locally to ./out/go-petstore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Troubleshooting&lt;/h5&gt; &#xA;&lt;p&gt;If an error like this occurs, just execute the &lt;strong&gt;mvn clean install -U&lt;/strong&gt; command:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.19.1:test (default-test) on project openapi-generator: A type incompatibility occurred while executing org.apache.maven.plugins:maven-surefire-plugin:2.19.1:test: java.lang.ExceptionInInitializerError cannot be cast to java.io.IOException&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./run-in-docker.sh mvn clean install -U&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Failed to execute goal org.fortasoft:gradle-maven-plugin:1.0.8:invoke (default) on project openapi-generator-gradle-plugin-mvn-wrapper: org.gradle.tooling.BuildException: Could not execute build using Gradle distribution &#39;&lt;a href=&#34;https://services.gradle.org/distributions/gradle-4.7-bin.zip&#34;&gt;https://services.gradle.org/distributions/gradle-4.7-bin.zip&lt;/a&gt;&#39;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Right now: no solution for this one :|&lt;/p&gt; &#xA;&lt;h4&gt;Run Docker in Vagrant&lt;/h4&gt; &#xA;&lt;p&gt;Prerequisite: install &lt;a href=&#34;https://www.vagrantup.com/downloads.html&#34;&gt;Vagrant&lt;/a&gt; and &lt;a href=&#34;https://www.virtualbox.org/wiki/Downloads&#34;&gt;VirtualBox&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/openapitools/openapi-generator.git&#xA;cd openapi-generator&#xA;vagrant up&#xA;vagrant ssh&#xA;cd /vagrant&#xA;./run-in-docker.sh mvn package&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents&#34;&gt;1.7 - NPM&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;There is also an &lt;a href=&#34;https://www.npmjs.com/package/@openapitools/openapi-generator-cli&#34;&gt;NPM package wrapper&lt;/a&gt; available for different platforms (e.g. Linux, Mac, Windows). (JVM is still required) Please see the &lt;a href=&#34;https://github.com/openapitools/openapi-generator-cli&#34;&gt;project&#39;s README&lt;/a&gt; there for more information.&lt;/p&gt; &#xA;&lt;p&gt;Install it globally to get the CLI available on the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install @openapitools/openapi-generator-cli -g&#xA;openapi-generator-cli version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- RELEASE_VERSION --&gt; &#xA;&lt;p&gt;To use a specific version of &#34;openapi-generator-cli&#34;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;openapi-generator-cli version-manager set 6.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or install it as dev-dependency:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install @openapitools/openapi-generator-cli -D&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- /RELEASE_VERSION --&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents&#34;&gt;2 - Getting Started&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;To generate a PHP client for &lt;a href=&#34;https://raw.githubusercontent.com/openapitools/openapi-generator/master/modules/openapi-generator/src/test/resources/3_0/petstore.yaml&#34;&gt;petstore.yaml&lt;/a&gt;, please run the following&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/openapitools/openapi-generator&#xA;cd openapi-generator&#xA;mvn clean package&#xA;java -jar modules/openapi-generator-cli/target/openapi-generator-cli.jar generate \&#xA;   -i https://raw.githubusercontent.com/openapitools/openapi-generator/master/modules/openapi-generator/src/test/resources/3_0/petstore.yaml \&#xA;   -g php \&#xA;   -o /var/tmp/php_api_client&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(if you&#39;re on Windows, replace the last command with &lt;code&gt;java -jar modules\openapi-generator-cli\target\openapi-generator-cli.jar generate -i https://raw.githubusercontent.com/openapitools/openapi-generator/master/modules/openapi-generator/src/test/resources/3_0/petstore.yaml -g php -o c:\temp\php_api_client&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;!-- RELEASE_VERSION --&gt; &#xA;&lt;p&gt;You can also download the JAR (latest release) directly from &lt;a href=&#34;https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/6.0.0/openapi-generator-cli-6.0.0.jar&#34;&gt;maven.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- /RELEASE_VERSION --&gt; &#xA;&lt;p&gt;To get a list of &lt;strong&gt;general&lt;/strong&gt; options available, please run &lt;code&gt;java -jar modules/openapi-generator-cli/target/openapi-generator-cli.jar help generate&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To get a list of PHP specified options (which can be passed to the generator with a config file via the &lt;code&gt;-c&lt;/code&gt; option), please run &lt;code&gt;java -jar modules/openapi-generator-cli/target/openapi-generator-cli.jar config-help -g php&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents&#34;&gt;3 - Usage&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;To generate a sample client library&lt;/h3&gt; &#xA;&lt;p&gt;You can build a client against the &lt;a href=&#34;https://raw.githubusercontent.com/openapitools/openapi-generator/master/modules/openapi-generator/src/test/resources/3_0/petstore.yaml&#34;&gt;Petstore API&lt;/a&gt; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./bin/generate-samples.sh ./bin/configs/java-okhttp-gson.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(On Windows, please install &lt;a href=&#34;https://gitforwindows.org/&#34;&gt;GIT Bash for Windows&lt;/a&gt; to run the command above)&lt;/p&gt; &#xA;&lt;p&gt;This script uses the default library, which is &lt;code&gt;okhttp-gson&lt;/code&gt;. It will run the generator with this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;java -jar modules/openapi-generator-cli/target/openapi-generator-cli.jar generate \&#xA;  -i https://raw.githubusercontent.com/openapitools/openapi-generator/master/modules/openapi-generator/src/test/resources/3_0/petstore.yaml \&#xA;  -g java \&#xA;  -t modules/openapi-generator/src/main/resources/Java \&#xA;  --additional-properties artifactId=petstore-okhttp-gson,hideGenerationTimestamp:true \&#xA;  -o samples/client/petstore/java/okhttp-gson&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;with a number of options. &lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/docs/generators/java.md&#34;&gt;The java options are documented here.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also get the options with the &lt;code&gt;help generate&lt;/code&gt; command (below only shows partial results):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;NAME&#xA;        openapi-generator-cli generate - Generate code with the specified&#xA;        generator.&#xA;&#xA;SYNOPSIS&#xA;        openapi-generator-cli generate&#xA;                [(-a &amp;lt;authorization&amp;gt; | --auth &amp;lt;authorization&amp;gt;)]&#xA;                [--api-name-suffix &amp;lt;api name suffix&amp;gt;] [--api-package &amp;lt;api package&amp;gt;]&#xA;                [--artifact-id &amp;lt;artifact id&amp;gt;] [--artifact-version &amp;lt;artifact version&amp;gt;]&#xA;                [(-c &amp;lt;configuration file&amp;gt; | --config &amp;lt;configuration file&amp;gt;)] [--dry-run]&#xA;                [(-e &amp;lt;templating engine&amp;gt; | --engine &amp;lt;templating engine&amp;gt;)]&#xA;                [--enable-post-process-file]&#xA;                [(-g &amp;lt;generator name&amp;gt; | --generator-name &amp;lt;generator name&amp;gt;)]&#xA;                [--generate-alias-as-model] [--git-host &amp;lt;git host&amp;gt;]&#xA;                [--git-repo-id &amp;lt;git repo id&amp;gt;] [--git-user-id &amp;lt;git user id&amp;gt;]&#xA;                [--global-property &amp;lt;global properties&amp;gt;...] [--group-id &amp;lt;group id&amp;gt;]&#xA;                [--http-user-agent &amp;lt;http user agent&amp;gt;]&#xA;                [(-i &amp;lt;spec file&amp;gt; | --input-spec &amp;lt;spec file&amp;gt;)]&#xA;                [--ignore-file-override &amp;lt;ignore file override location&amp;gt;]&#xA;                [--import-mappings &amp;lt;import mappings&amp;gt;...]&#xA;                [--instantiation-types &amp;lt;instantiation types&amp;gt;...]&#xA;                [--invoker-package &amp;lt;invoker package&amp;gt;]&#xA;                [--language-specific-primitives &amp;lt;language specific primitives&amp;gt;...]&#xA;                [--legacy-discriminator-behavior] [--library &amp;lt;library&amp;gt;]&#xA;                [--log-to-stderr] [--minimal-update]&#xA;                [--model-name-prefix &amp;lt;model name prefix&amp;gt;]&#xA;                [--model-name-suffix &amp;lt;model name suffix&amp;gt;]&#xA;                [--model-package &amp;lt;model package&amp;gt;]&#xA;                [(-o &amp;lt;output directory&amp;gt; | --output &amp;lt;output directory&amp;gt;)] [(-p &amp;lt;additional properties&amp;gt; | --additional-properties &amp;lt;additional properties&amp;gt;)...]&#xA;                [--package-name &amp;lt;package name&amp;gt;] [--release-note &amp;lt;release note&amp;gt;]&#xA;                [--remove-operation-id-prefix]&#xA;                [--reserved-words-mappings &amp;lt;reserved word mappings&amp;gt;...]&#xA;                [(-s | --skip-overwrite)] [--server-variables &amp;lt;server variables&amp;gt;...]&#xA;                [--skip-validate-spec] [--strict-spec &amp;lt;true/false strict behavior&amp;gt;]&#xA;                [(-t &amp;lt;template directory&amp;gt; | --template-dir &amp;lt;template directory&amp;gt;)]&#xA;                [--type-mappings &amp;lt;type mappings&amp;gt;...] [(-v | --verbose)]&#xA;&#xA;OPTIONS&#xA;        -a &amp;lt;authorization&amp;gt;, --auth &amp;lt;authorization&amp;gt;&#xA;            adds authorization headers when fetching the OpenAPI definitions&#xA;            remotely. Pass in a URL-encoded string of name:header with a comma&#xA;            separating multiple values&#xA;&#xA;...... (results omitted)&#xA;&#xA;        -v, --verbose&#xA;            verbose mode&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then compile and run the client, as well as unit tests against it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd samples/client/petstore/java/okhttp-gson&#xA;mvn package&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other generators have &lt;a href=&#34;https://github.com/OpenAPITools/openapi-generator/tree/master/samples&#34;&gt;samples&lt;/a&gt; too.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents&#34;&gt;3.1 - Customization&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/docs/customization.md&#34;&gt;customization.md&lt;/a&gt; on how to customize the output (e.g. package name, version)&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents&#34;&gt;3.2 - Workflow Integration (Maven, Gradle, Github, CI/CD)&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/docs/integration.md&#34;&gt;integration.md&lt;/a&gt; on how to integrate OpenAPI generator with Maven, Gradle, sbt, Bazel, Github and CI/CD.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents&#34;&gt;3.3 - Online OpenAPI generator&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Here are the public online services:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;latest stable version: &lt;a href=&#34;https://api.openapi-generator.tech&#34;&gt;https://api.openapi-generator.tech&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;latest master: &lt;a href=&#34;https://api-latest-master.openapi-generator.tech&#34;&gt;https://api-latest-master.openapi-generator.tech&lt;/a&gt; (updated with latest master every hour)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The server is sponsored by &lt;a href=&#34;https://www.linode.com/&#34;&gt;Linode&lt;/a&gt; &lt;a href=&#34;https://www.linode.com/&#34;&gt;&lt;img src=&#34;https://www.linode.com/media/images/logos/standard/light/linode-logo_standard_light_small.png&#34; alt=&#34;Linode Logo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;(These services are beta and do not have any guarantee on service level)&lt;/p&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/docs/online.md&#34;&gt;online.md&lt;/a&gt; on how to run and use the &lt;code&gt;openapi-generator-online&lt;/code&gt; - a web service for &lt;code&gt;openapi-generator&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents&#34;&gt;3.4 - License information on Generated Code&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The OpenAPI Generator project is intended as a benefit for users of the Open API Specification. The project itself has the &lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#license&#34;&gt;License&lt;/a&gt; as specified. In addition, please understand the following points:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The templates included with this project are subject to the &lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#license&#34;&gt;License&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Generated code is intentionally &lt;em&gt;not&lt;/em&gt; subject to the parent project license&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When code is generated from this project, it shall be considered &lt;strong&gt;AS IS&lt;/strong&gt; and owned by the user of the software. There are no warranties--expressed or implied--for generated code. You can do what you wish with it, and once generated, the code is your responsibility and subject to the licensing terms that you deem appropriate.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents&#34;&gt;3.5 - IDE Integration&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Here is a list of community-contributed IDE plug-ins that integrate with OpenAPI Generator:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Eclipse: &lt;a href=&#34;https://www.eclipse.org/codewind/open-api-tools-for-eclipse.html&#34;&gt;Codewind OpenAPI Tools for Eclipse&lt;/a&gt; by &lt;a href=&#34;https://www.ibm.com&#34;&gt;IBM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;IntelliJ IDEA: &lt;a href=&#34;https://plugins.jetbrains.com/plugin/8433-openapi-generator&#34;&gt;OpenAPI Generator&lt;/a&gt; by &lt;a href=&#34;https://jimschubert.us/#/&#34;&gt;Jim Schubert&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;IntelliJ IDEA: &lt;a href=&#34;https://plugins.jetbrains.com/plugin/10690-senya-editor&#34;&gt;Senya Editor&lt;/a&gt; by &lt;a href=&#34;https://senya.io&#34;&gt;senya.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reprezen.com/&#34;&gt;RepreZen API Studio&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Visual Studio: &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ChristianResmaHelle.ApiClientCodeGenerator&#34;&gt;REST API Client Code Generator&lt;/a&gt; by &lt;a href=&#34;https://christian-helle.blogspot.com/&#34;&gt;Christian Resma Helle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Visual Studio Code: &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=IBM.codewind-openapi-tools&#34;&gt;Codewind OpenAPI Tools&lt;/a&gt; by &lt;a href=&#34;https://marketplace.visualstudio.com/publishers/IBM&#34;&gt;IBM&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents&#34;&gt;4 - Companies/Projects using OpenAPI Generator&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Here are some companies/projects (alphabetical order) using OpenAPI Generator in production. To add your company/project to the list, please visit &lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/README.md&#34;&gt;README.md&lt;/a&gt; and click on the icon to edit the page.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aau.dk&#34;&gt;Aalborg University&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.adaptant.io/&#34;&gt;Adaptant Solutions AG&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.adesso.de/&#34;&gt;adesso SE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.agoda.com/&#34;&gt;Agoda&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.airthings.com/&#34;&gt;Airthings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.allianz.com&#34;&gt;Allianz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://angular.schule/&#34;&gt;Angular.Schule&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aqovia.com/&#34;&gt;Aqovia&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.anz.com/&#34;&gt;Australia and New Zealand Banking Group (ANZ)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.askul.co.jp&#34;&gt;ASKUL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.arduino.cc/&#34;&gt;Arduino&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://b-com.com/en&#34;&gt;b&amp;lt;&amp;gt;com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://e.baidu.com&#34;&gt;百度营销&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://banzaicloud.com&#34;&gt;Banzai Cloud&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bimdata.io&#34;&gt;BIMData.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.bithost.ch&#34;&gt;Bithost GmbH&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.bosch-connected-industry.com&#34;&gt;Bosch Connected Industry&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.boxever.com/&#34;&gt;Boxever&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.brevy.com&#34;&gt;Brevy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.bunker-holding.com/&#34;&gt;Bunker Holding Group&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.csun.edu&#34;&gt;California State University, Northridge&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cam-inc.co.jp/&#34;&gt;CAM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.camptocamp.com/en&#34;&gt;Camptocamp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cisco.com/&#34;&gt;Cisco&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codecentric.de/&#34;&gt;codecentric AG&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.coinapi.io/&#34;&gt;CoinAPI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.commencis.com/&#34;&gt;Commencis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crossoverhealth.com/&#34;&gt;Crossover Health&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cupix.com/&#34;&gt;Cupix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.datadoghq.com&#34;&gt;Datadog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.dbsystel.de&#34;&gt;DB Systel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.deeproute.ai/&#34;&gt;Deeporute.ai&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.devsupply.com/&#34;&gt;Devsupply&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docspring.com/&#34;&gt;DocSpring&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dwango.co.jp/&#34;&gt;dwango&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.edgeimpulse.com/&#34;&gt;Edge Impulse&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.elementai.com/&#34;&gt;Element AI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.embotics.com/&#34;&gt;Embotics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.emineo.ch&#34;&gt;emineo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.fenergo.com/&#34;&gt;Fenergo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://corp.freee.co.jp/en/&#34;&gt;freee&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freshcells.de/&#34;&gt;FreshCells&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.fuse.no/&#34;&gt;Fuse&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gantner.com&#34;&gt;Gantner&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RepreZen/GenFlow&#34;&gt;GenFlow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.getyourguide.com/&#34;&gt;GetYourGuide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pepabo.com/en/&#34;&gt;GMO Pepabo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://godaddy.com&#34;&gt;GoDaddy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gumtree.com&#34;&gt;Gumtree&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.here.com/&#34;&gt;Here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ibm.com/&#34;&gt;IBM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.instana.com&#34;&gt;Instana&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.interxion.com&#34;&gt;Interxion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://inquisico.com&#34;&gt;Inquisico&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.juststarinfo.com&#34;&gt;JustStar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://k6.io/&#34;&gt;k6.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.klarna.com/&#34;&gt;Klarna&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.kronsoft.ro/home/&#34;&gt;Kronsoft Development&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kubernetes.io&#34;&gt;Kubernetes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.linode.com/&#34;&gt;Linode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.logicdrop.com&#34;&gt;Logicdrop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.lumeris.com&#34;&gt;Lumeris&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.lvm.de&#34;&gt;LVM Versicherungen&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mailslurp.com&#34;&gt;MailSlurp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://manticoresearch.com&#34;&gt;Manticore Search&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developers.mastercard.com&#34;&gt;Mastercard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mediavision.fr/&#34;&gt;Médiavision&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.metaswitch.com/&#34;&gt;Metaswitch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.moonvision.io/&#34;&gt;MoonVision&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://myworkout.com&#34;&gt;Myworkout&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.namsor.com/&#34;&gt;NamSor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.neverfail.com/&#34;&gt;Neverfail&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://neuerenergy.com&#34;&gt;NeuerEnergy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nokia.com/&#34;&gt;Nokia&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.onesignal.com/&#34;&gt;OneSignal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.theocc.com/&#34;&gt;Options Clearing Corporation (OCC)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openet.com/&#34;&gt;Openet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openvalidation.io/&#34;&gt;openVALIDATION&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.oracle.com/&#34;&gt;Oracle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.paxos.com&#34;&gt;Paxos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://plaid.com&#34;&gt;Plaid&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://plaid.co.jp/&#34;&gt;PLAID, Inc.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ponicode.dev/&#34;&gt;Ponicode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pricefx.com/&#34;&gt;Pricefx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.print-nanny.com/&#34;&gt;PrintNanny&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/prometheus/alertmanager&#34;&gt;Prometheus/Alertmanager&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.qavar.com&#34;&gt;Qavar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://qed-it.com&#34;&gt;QEDIT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://qovery.com&#34;&gt;Qovery&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.qulix.com&#34;&gt;Qulix Systems&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://corp.raksul.com&#34;&gt;Raksul&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.raiffeisen.ch&#34;&gt;Raiffeisen Schweiz Genossenschaft&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.redhat.com&#34;&gt;RedHat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reprezen.com/swagger-openapi-code-generation-api-first-microservices-enterprise-development&#34;&gt;RepreZen API Studio&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://restunited.com&#34;&gt;REST United&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.robotinfra.com&#34;&gt;Robotinfra&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://smarthr.co.jp/&#34;&gt;SmartHR&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sie.com/en/index.html&#34;&gt;Sony Interactive Entertainment&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.splitit.com/&#34;&gt;Splitit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.stingray.com&#34;&gt;Stingray&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.suva.ch/&#34;&gt;Suva&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.telstra.com&#34;&gt;Telstra&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.tencent.com&#34;&gt;Tencent&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.u-aizu.ac.jp/en/&#34;&gt;The University of Aizu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.translucent.dk&#34;&gt;Translucent ApS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.traveltimeplatform.com/&#34;&gt;TravelTime platform&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.tribalscale.com&#34;&gt;TribalScale&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://trifork.com&#34;&gt;Trifork&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.tui-infotec.com/&#34;&gt;TUI InfoTec GmbH&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.unblu.com/&#34;&gt;unblu inc.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.veamly.com/&#34;&gt;Veamly&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.vmware.com/&#34;&gt;VMWare&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.wbt-solutions.de/&#34;&gt;wbt-solutions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.woleet.io/&#34;&gt;Woleet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wso2.com/&#34;&gt;WSO2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vouchery.io&#34;&gt;Vouchery.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.xero.com/&#34;&gt;Xero&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.yahoo.co.jp/&#34;&gt;Yahoo Japan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.viadee.de/&#34;&gt;viadee&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vonage.com&#34;&gt;Vonage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.yitutech.com/&#34;&gt;YITU Technology&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.yelp.com/&#34;&gt;Yelp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zalando.com&#34;&gt;Zalando&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.outscale.com/&#34;&gt;3DS Outscale&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents&#34;&gt;5 - Presentations/Videos/Tutorials/Books&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2018/05/12 - &lt;a href=&#34;https://ackintosh.github.io/blog/2018/05/12/openapi-generator/&#34;&gt;OpenAPI Generator - community drivenで成長するコードジェネレータ&lt;/a&gt; by &lt;a href=&#34;https://github.com/ackintosh&#34;&gt;中野暁人&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2018/05/15 - &lt;a href=&#34;http://jmini.github.io/blog/2018/2018-05-15_new-open-source-project.html&#34;&gt;Starting a new open-source project&lt;/a&gt; by &lt;a href=&#34;https://github.com/jmini&#34;&gt;Jeremie Bresson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2018/05/15 - &lt;a href=&#34;https://www.publickey1.jp/blog/18/rest_apiapiopenapi_generatorswagger_generator.html&#34;&gt;REST API仕様からAPIクライアントやスタブサーバを自動生成する「OpenAPI Generator」オープンソースで公開。Swagger Codegenからのフォーク&lt;/a&gt; by &lt;a href=&#34;https://www.publickey1.jp&#34;&gt;Publickey&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2018/06/08 - &lt;a href=&#34;https://angular.schule/blog/2018-06-swagger-codegen-is-now-openapi-generator&#34;&gt;Swagger Codegen is now OpenAPI Generator&lt;/a&gt; by &lt;a href=&#34;https://github.com/JohannesHoppe&#34;&gt;JohannesHoppe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2018/06/21 - &lt;a href=&#34;https://fr.slideshare.net/chbornet/jhipster-conf-2018-connect-your-jhipster-apps-to-the-world-of-apis-with-openapi-and-grpc&#34;&gt;Connect your JHipster apps to the world of APIs with OpenAPI and gRPC&lt;/a&gt; by &lt;a href=&#34;https://github.com/cbornet&#34;&gt;Christophe Bornet&lt;/a&gt; at &lt;a href=&#34;https://jhipster-conf.github.io/&#34;&gt;JHipster Conf 2018&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2018/06/22 - &lt;a href=&#34;https://rohki.hatenablog.com/entry/2018/06/22/073000&#34;&gt;OpenAPI Generator で Gatling Client を生成してみた&lt;/a&gt; at &lt;a href=&#34;https://rohki.hatenablog.com/&#34;&gt;ソモサン&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2018/06/27 - &lt;a href=&#34;https://speakerdeck.com/wing328/lessons-learned-from-leading-an-open-source-project-supporting-30-plus-programming-languages&#34;&gt;Lessons Learned from Leading an Open-Source Project Supporting 30+ Programming Languages&lt;/a&gt; - &lt;a href=&#34;https://github.com/wing328&#34;&gt;William Cheng&lt;/a&gt; at &lt;a href=&#34;http://bit.ly/2waDKKX&#34;&gt;LinuxCon + ContainerCon + CloudOpen China 2018&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2018/07/19 - &lt;a href=&#34;https://medium.com/ringcentral-developers/openapi-generator-for-go-contribution-quickstart-8cc72bf37b53&#34;&gt;OpenAPI Generator Contribution Quickstart - RingCentral Go SDK&lt;/a&gt; by &lt;a href=&#34;https://github.com/grokify&#34;&gt;John Wang&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2018/08/22 - &lt;a href=&#34;https://yinm.info/20180822/&#34;&gt;OpenAPI Generatorのプロジェクト構成などのメモ&lt;/a&gt; by &lt;a href=&#34;https://github.com/yinm&#34;&gt;Yusuke Iinuma&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2018/09/12 - &lt;a href=&#34;https://www.reprezen.com/blog/reprezen-openapi-3.0-upgrade-now-is-the-time&#34;&gt;RepreZen and OpenAPI 3.0: Now is the Time&lt;/a&gt; by &lt;a href=&#34;https://www.reprezen.com/blog/author/miles-daffin&#34;&gt;Miles Daffin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2018/10/31 - &lt;a href=&#34;https://github.com/HarmoWatch/openapi-generator-cli&#34;&gt;A node package wrapper for openapi-generator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2018/11/03 - &lt;a href=&#34;http://ryuichi111std.hatenablog.com/entry/2018/11/03/214005&#34;&gt;OpenAPI Generator + golang + Flutter でアプリ開発&lt;/a&gt; by &lt;a href=&#34;https://github.com/ryuichi111&#34;&gt;Ryuichi Daigo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2018/11/15 - &lt;a href=&#34;https://blog.csdn.net/yzy199391/article/details/84023982&#34;&gt;基于openapi3.0的yaml文件生成java代码的一次实践&lt;/a&gt; by &lt;a href=&#34;https://me.csdn.net/yzy199391&#34;&gt;焱魔王&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2018/11/18 - &lt;a href=&#34;https://lornajane.net/posts/2018/generating-php-library-code-from-openapi&#34;&gt;Generating PHP library code from OpenAPI&lt;/a&gt; by &lt;a href=&#34;https://lornajane.net/&#34;&gt;Lorna Jane&lt;/a&gt; at &lt;a href=&#34;https://lornajane.net/blog&#34;&gt;LORNAJANE Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2018/11/19 - &lt;a href=&#34;https://youtu.be/-lDot4Yn7Dg&#34;&gt;OpenAPIs are everywhere&lt;/a&gt; by &lt;a href=&#34;https://github.com/jmini&#34;&gt;Jeremie Bresson (Unblu)&lt;/a&gt; at &lt;a href=&#34;https://www.eclipsecon.org/europe2018&#34;&gt;EclipseCon Europe 2018&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2018/12/09 - &lt;a href=&#34;https://qiita.com/watiko/items/0961287c02eac9211572&#34;&gt;openapi-generator をカスタマイズする方法&lt;/a&gt; by &lt;a href=&#34;https://qiita.com/watiko&#34;&gt;@watiko&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019/01/03 - &lt;a href=&#34;https://lekkimworld.com/2019/01/03/calling-a-swagger-service-from-apex-using-openapi-generator/&#34;&gt;Calling a Swagger service from Apex using openapi-generator&lt;/a&gt; by &lt;a href=&#34;https://lekkimworld.com&#34;&gt;Mikkel Flindt Heisterberg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019/01/13 - &lt;a href=&#34;https://ky-yk-d.hatenablog.com/entry/2019/01/13/234108&#34;&gt;OpenAPI GeneratorでRESTful APIの定義書から色々自動生成する&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/ky_yk_d&#34;&gt;@ky_yk_d&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019/01/20 - &lt;a href=&#34;https://medium.com/commencis/contract-first-api-development-with-openapi-generator-and-connexion-b21bbf2f9244&#34;&gt;Contract-First API Development with OpenAPI Generator and Connexion&lt;/a&gt; by &lt;a href=&#34;https://github.com/anlcnydn&#34;&gt;Anil Can Aydin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019/01/30 - &lt;a href=&#34;https://dzone.com/articles/rapid-api-development-using-open-api-generator&#34;&gt;Rapid Application Development With API First Approach Using Open-API Generator&lt;/a&gt; by &lt;a href=&#34;https://dzone.com/users/828329/milan_sonkar.html&#34;&gt;Milan Sonkar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019/02/02 - &lt;a href=&#34;https://speakerdeck.com/akihito_nakano/gunmaweb34&#34;&gt;平静を保ち、コードを生成せよ 〜 OpenAPI Generator誕生の背景と軌跡 〜&lt;/a&gt; by &lt;a href=&#34;https://github.com/ackintosh&#34;&gt;中野暁人&lt;/a&gt; at &lt;a href=&#34;https://gunmaweb.connpass.com/event/113974/&#34;&gt;Gunma.web #34 スキーマ駆動開発&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019/02/20 - &lt;a href=&#34;https://mux.com/blog/an-adventure-in-openapi-v3-api-code-generation/&#34;&gt;An adventure in OpenAPI V3 code generation&lt;/a&gt; by &lt;a href=&#34;https://mux.com/blog/author/philc/&#34;&gt;Phil Cluff&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019/02/26 - &lt;a href=&#34;https://medium.com/google-cloud/building-api-services-a-beginners-guide-7274ae4c547f&#34;&gt;Building API Services: A Beginner’s Guide&lt;/a&gt; by &lt;a href=&#34;https://medium.com/@ratrosy&#34;&gt;Ratros Y.&lt;/a&gt; in &lt;a href=&#34;https://medium.com/google-cloud&#34;&gt;Google Cloud Platform Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019/02/26 - &lt;a href=&#34;https://medium.com/@ratrosy/building-apis-with-openapi-continued-5d0faaed32eb&#34;&gt;Building APIs with OpenAPI: Continued&lt;/a&gt; by &lt;a href=&#34;https://medium.com/@ratrosy&#34;&gt;Ratros Y.&lt;/a&gt; in &lt;a href=&#34;https://medium.com/google-cloud&#34;&gt;Google Cloud Platform Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-03-07 - &lt;a href=&#34;https://qiita.com/chibato/items/e4a748db12409b40c02f&#34;&gt;OpenAPI Generator で Spring Boot と Angular をタイプセーフに繋ぐ&lt;/a&gt; by &lt;a href=&#34;https://github.com/chibat&#34;&gt;Tomofumi Chiba&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-03-16 - &lt;a href=&#34;https://vadosware.io/post/quick-intro-to-manual-openapi-v3/&#34;&gt;A Quick introduction to manual OpenAPI V3&lt;/a&gt; by &lt;a href=&#34;https://github.com/t3hmrman&#34;&gt;vados&lt;/a&gt; at &lt;a href=&#34;https://vadosware.io&#34;&gt;VADOSWARE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-03-25 - &lt;a href=&#34;https://blogs.sap.com/2019/03/25/integrate-sap-s4hana-cloud-sdk-with-open-api/&#34;&gt;Access any REST service with the SAP S/4HANA Cloud SDK&lt;/a&gt; by &lt;a href=&#34;https://people.sap.com/alexander.duemont&#34;&gt;Alexander Duemont&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-03-25 - &lt;a href=&#34;https://qiita.com/amuyikam/items/e8a45daae59c68be0fc8&#34;&gt;OpenAPI generatorを試してみる&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/amuyikam&#34;&gt;@amuyikam&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-03-27 - &lt;a href=&#34;https://techblog.zozo.com/entry/openapi3/go&#34;&gt;OpenAPI3を使ってみよう！Go言語でクライアントとスタブの自動生成まで！&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/gold_kou&#34;&gt;@gold_kou&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-04-17 - &lt;a href=&#34;https://tech-blog.optim.co.jp/entry/2019/04/17/174000&#34;&gt;OpenAPIによるスキーマファースト開発の実施サンプルとCloud Runについて&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/yukey1031&#34;&gt;@yukey1031&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-04-18 - &lt;a href=&#34;https://speakerdeck.com/ota42y/how-to-use-openapi3-for-api-developer&#34;&gt;How to use OpenAPI3 for API developer (RubyKaigi 2019)&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/ota42y&#34;&gt;@ota42y&lt;/a&gt; at &lt;a href=&#34;https://rubykaigi.org/2019&#34;&gt;RubyKaigi 2019&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-04-29 - &lt;a href=&#34;https://gum.co/openapi_generator_ebook&#34;&gt;A Beginner&#39;s Guide to Code Generation for REST APIs (OpenAPI Generator)&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/wing328&#34;&gt;William Cheng&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-05-01 - &lt;a href=&#34;https://simply-how.com/design-and-generate-api-code-from-openapi&#34;&gt;Design and generate a REST API from Swagger / OpenAPI in Java, Python, C# and more&lt;/a&gt; by &lt;a href=&#34;https://simply-how.com/&#34;&gt;Simply How&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-05-17 - &lt;a href=&#34;https://www.47northlabs.com/knowledge-base/generate-spring-boot-rest-api-using-swagger-openapi/&#34;&gt;Generate Spring Boot REST API using Swagger/OpenAPI&lt;/a&gt; by &lt;a href=&#34;https://www.47northlabs.com/author/antonie-zafirov/&#34;&gt;Antonie Zafirov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-05-22 - &lt;a href=&#34;https://gum.co/openapi_generator_ebook_gb&#34;&gt;REST APIs代码生成指南(OpenAPI Generator)&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/wing328&#34;&gt;William Cheng&lt;/a&gt;, &lt;a href=&#34;https://github.com/xmeng1&#34;&gt;Xin Meng&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-05-24 - &lt;a href=&#34;https://gum.co/openapi_generator_ebook_big5&#34;&gt;REST API 代碼生成指南 (OpenAPI Generator)&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/wing328&#34;&gt;William Cheng&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-06-24 - &lt;a href=&#34;https://speakerdeck.com/wing328/kubernetes-clients-and-openapi-generator&#34;&gt;Kubernetes Clients and OpenAPI Generator&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/wing328&#34;&gt;William Cheng&lt;/a&gt; at &lt;a href=&#34;https://www.lfasiallc.com/events/contributors-summit-china-2019/&#34;&gt;Kubernetes Contributor Summits Shanghai 2019&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-06-28 &lt;a href=&#34;https://marketplace.eclipse.org/content/codewind-openapi-tools&#34;&gt;Codewind OpenAPI Tools&lt;/a&gt; in &lt;a href=&#34;https://marketplace.eclipse.org/&#34;&gt;Eclipse Marketplace&lt;/a&gt; by IBM&lt;/li&gt; &#xA; &lt;li&gt;2019-06-29 &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=IBM.codewind-openapi-tools&#34;&gt;Codewind OpenAPI Tools&lt;/a&gt; in &lt;a href=&#34;https://marketplace.visualstudio.com/&#34;&gt;Visual Studio Marketplace&lt;/a&gt; by IBM&lt;/li&gt; &#xA; &lt;li&gt;2019-07-04 - &lt;a href=&#34;https://gum.co/openapi_generator_ebook_big5&#34;&gt;REST API のためのコード生成入門 (OpenAPI Generator)&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/wing328&#34;&gt;William Cheng&lt;/a&gt;, &lt;a href=&#34;https://github.com/ackintosh&#34;&gt;中野暁人&lt;/a&gt;, &lt;a href=&#34;https://github.com/taxpon&#34;&gt;和田拓朗&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-07-08 - &lt;a href=&#34;https://tech.cam-inc.co.jp/entry/2019/07/08/140000&#34;&gt;OpenAPI Generator にコントリビュートしたら社名が載った話。(CAM) - CAM TECH BLOG&lt;/a&gt; by &lt;a href=&#34;https://www.cam-inc.co.jp/&#34;&gt;CAM, Inc.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-07-14 - &lt;a href=&#34;https://qiita.com/yuji38kwmt/items/dfb929316a1335a161c0&#34;&gt;OpenAPI GeneratorでPythonのクライアントライブラリを作成した&lt;/a&gt; by &lt;a href=&#34;https://qiita.com/yuji38kwmt&#34;&gt;yuji38kwmt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-07-19 - &lt;a href=&#34;https://speakerdeck.com/wing328/developer-experience-dx-for-open-source-projects-english-japanese&#34;&gt;Developer Experience (DX) for Open-Source Projects: How to Engage Developers and Build a Growing Developer Community&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/wing328&#34;&gt;William Cheng&lt;/a&gt;, &lt;a href=&#34;https://github.com/ackintosh&#34;&gt;中野暁人&lt;/a&gt; at &lt;a href=&#34;https://events.linuxfoundation.org/events/open-source-summit-japan-2019/&#34;&gt;Open Source Summit Japan 2019&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-08-14 - &lt;a href=&#34;https://bitmovin.com/our-openapi-journey-with-standardizing-sdks/&#34;&gt;Our OpenAPI journey with Standardizing SDKs&lt;/a&gt; by &lt;a href=&#34;https://bitmovin.com/author/sburgstaller/&#34;&gt;Sebastian Burgstaller&lt;/a&gt; at &lt;a href=&#34;https://www.bitmovin.com&#34;&gt;Bitmovin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-08-15 - &lt;a href=&#34;https://www.m3tech.blog/entry/2019/08/15/110000&#34;&gt;APIのコードを自動生成させたいだけならgRPCでなくてもよくない?&lt;/a&gt; by &lt;a href=&#34;https://corporate.m3.com/&#34;&gt;M3, Inc.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-08-22 - &lt;a href=&#34;https://employment.en-japan.com/engineerhub/entry/2019/08/22/103000&#34;&gt;マイクロサービスにおけるWeb APIスキーマの管理─ GraphQL、gRPC、OpenAPIの特徴と使いどころ&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/ota42y&#34;&gt;@ota42y&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-08-24 - &lt;a href=&#34;https://qiita.com/masayoshi0222/items/4845e4c715d04587c104&#34;&gt;SwaggerドキュメントからOpenAPI Generatorを使ってモックサーバー作成&lt;/a&gt; by &lt;a href=&#34;https://qiita.com/masayoshi0222&#34;&gt;坂本正義&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-08-29 - &lt;a href=&#34;https://cloud.tencent.com/developer/article/1495986&#34;&gt;OpenAPI初探&lt;/a&gt; by &lt;a href=&#34;https://cloud.tencent.com/developer/user/1113152&#34;&gt;peakxie&lt;/a&gt; at &lt;a href=&#34;https://cloud.tencent.com/developer&#34;&gt;腾讯云社区&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-08-29 - &lt;a href=&#34;https://www.servicemesher.com/blog/kubernetes-1.16-crd-ga-preview/&#34;&gt;全面进化：Kubernetes CRD 1.16 GA前瞻&lt;/a&gt; by &lt;a href=&#34;https://github.com/yue9944882&#34;&gt;Min Kim&lt;/a&gt; at &lt;a href=&#34;https://www.servicemesher.com/blog/&#34;&gt;ServiceMesher Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-09-01 - &lt;a href=&#34;https://www.youtube.com/watch?v=5cJtbIrsYkg&#34;&gt;Creating a PHP-Slim server using OpenAPI (Youtube video)&lt;/a&gt; by &lt;a href=&#34;https://www.youtube.com/channel/UCnG-TN23lswO6QbvWhMtxpA&#34;&gt;Daniel Persson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-09-06 - &lt;a href=&#34;https://wissel.net/blog/2019/09/vertx-and-openapi.html&#34;&gt;Vert.x and OpenAPI&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/notessensei&#34;&gt;Stephan H Wissel&lt;/a&gt; at &lt;a href=&#34;https://wissel.net&#34;&gt;wissel.net blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-09-09 - &lt;a href=&#34;https://cloud.ibm.com/docs/cloud-native?topic=cloud-native-rest-api&#34;&gt;Cloud-native development - Creating RESTful microservices&lt;/a&gt; in &lt;a href=&#34;https://cloud.ibm.com/docs&#34;&gt;IBM Cloud Docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-09-14 - &lt;a href=&#34;https://developer.mastercard.com/platform/documentation/generating-and-configuring-a-mastercard-api-client/&#34;&gt;Generating and Configuring a Mastercard API Client&lt;/a&gt; at &lt;a href=&#34;https://developer.mastercard.com/platform/documentation/&#34;&gt;Mastercard Developers Platform&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-09-15 - &lt;a href=&#34;https://qiita.com/ShoichiKuraoka/items/f1f7a3c2376f7cd9c56a&#34;&gt;OpenAPI(Swagger)導入下調べ&lt;/a&gt; by &lt;a href=&#34;https://qiita.com/ShoichiKuraoka&#34;&gt;Shoichi Kuraoka&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-09-17 - &lt;a href=&#34;https://www.http4k.org/tutorials/documenting_apis_with_openapi/&#34;&gt;Tutorial: Documenting http4k APIs with OpenApi3&lt;/a&gt; by &lt;a href=&#34;https://www.http4k.org/&#34;&gt;http4k&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-09-22 - &lt;a href=&#34;https://booth.pm/ja/items/1571902&#34;&gt;OpenAPI 3を完全に理解できる本&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/ota42y&#34;&gt;@ota42y&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-09-22 - &lt;a href=&#34;https://medium.com/@amirm.lavasani/restful-apis-tutorial-of-openapi-specification-eeada0e3901d&#34;&gt;RESTful APIs: Tutorial of OpenAPI Specification&lt;/a&gt; by &lt;a href=&#34;https://medium.com/@amirm.lavasani&#34;&gt;Amir Lavasani&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-09-22 - &lt;a href=&#34;https://devrel.net/dev-rel/redefining-sdks-as-software-diversity-kits&#34;&gt;Redefining SDKs as software diversity kits&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/sidneyallen&#34;&gt;Sid Maestre (Xero)&lt;/a&gt; at &lt;a href=&#34;https://sf2019.devrel.net/&#34;&gt;DevRelCon San Francisco 2019&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-09-23 - &lt;a href=&#34;https://qiita.com/littleFeet/items/492df2ad68a0799a5e5e&#34;&gt;swaggerからOpenApi GeneratorでSpringのコードを自動生成&lt;/a&gt; by &lt;a href=&#34;https://qiita.com/littleFeet&#34;&gt;@littleFeet&lt;/a&gt; at &lt;a href=&#34;https://qiita.com/&#34;&gt;Qiita&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-09-24 - &lt;a href=&#34;https://www.slideshare.net/JanWeinschenker/eine-stunde-was-mit-api-first&#34;&gt;Eine Stunde was mit Api First!&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/janweinschenker&#34;&gt;@janweinschenker&lt;/a&gt; at &lt;a href=&#34;https://javaforumnord.de/&#34;&gt;Java Forum Nord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-10-09 - &lt;a href=&#34;https://autopp-tech.hatenablog.com/entry/2019/10/09/222039&#34;&gt;openapi-generator で生成した Go クライアントで Bearer 認証をする&lt;/a&gt; by &lt;a href=&#34;https://github.com/autopp&#34;&gt;Akira Tanimura&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-10-10 - &lt;a href=&#34;https://www.meetup.com/fr-FR/Criteo-Labs-Tech-Talks/events/264775768/&#34;&gt;Automatic Generation of REST Clients&lt;/a&gt; by Thomas Peyrard, Senior Software Engineer at Criteo in &lt;a href=&#34;https://www.meetup.com/fr-FR/Criteo-Labs-Tech-Talks/events/264775768/&#34;&gt;Full-Stack Tech Talks (Meetup)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-10-12 - &lt;a href=&#34;https://blog.csdn.net/wxid2798226/article/details/102527467&#34;&gt;OpenApi自动生成client&lt;/a&gt; by &lt;a href=&#34;https://me.csdn.net/wxid2798226&#34;&gt;郑泽洲&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-10-16 - &lt;a href=&#34;https://medium.com/@accounts_76224/how-to-ship-apis-faster-cabef2f819e4&#34;&gt;How to ship APIs faster?&lt;/a&gt; by &lt;a href=&#34;https://ponicode.dev&#34;&gt;Simon Guilliams @ PoniCode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-10-22 - &lt;a href=&#34;https://qiita.com/boronngo/items/4b78b92526209daeaee9&#34;&gt;OpenAPI + Spring Boot(Kotlin)でファイルダウンロードAPIを作成する&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/yuki_furukawa5&#34;&gt;Yuki Furukawa&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-10-24 - &lt;a href=&#34;https://github.com/pe-st/apidocs/raw/master/MicroProfile-OpenAPI-all-slides.pdf&#34;&gt;Microprofile OpenAPI - Code First or Design First?&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/pesche&#34;&gt;Peter [pɛʃə] Steiner&lt;/a&gt; at &lt;a href=&#34;https://www.eclipsecon.org/europe2019/sessions/microprofile-openapi-code-first-or-design-first&#34;&gt;eclipsecon Europe 2019&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-11-06 - &lt;a href=&#34;https://98elements.com/blog/generating-api-clients-based-on-openapi-v3-specifications&#34;&gt;Generating API clients based on OpenAPI v3 specifications&lt;/a&gt; by &lt;a href=&#34;https://98elements.com&#34;&gt;Dominik Jastrzębski @ 98elements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-11-06 - &lt;a href=&#34;https://qiita.com/YasuhiroABE/items/c73920eab2d9d6e97fd9&#34;&gt;OpenAPIを利用して自前のAPIサーバー(Sinatra)を移植した時のメモ&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/YasuhiroABE&#34;&gt;Yasuhiro ABE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-11-07 - &lt;a href=&#34;https://www.youtube.com/watch?v=F9iF3a1Z8Y8&#34;&gt;API First development with OpenAPI - You should you practise it !?&lt;/a&gt; by &lt;a href=&#34;https://www.nickvanhoof.com/&#34;&gt;Nick Van Hoof&lt;/a&gt; at &lt;a href=&#34;https://devoxx.be/&#34;&gt;Devoxx Belgium 2019&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-11-08 - &lt;a href=&#34;https://www.youtube.com/watch?v=m28JFovKQ20&#34;&gt;JHipster beyond CRUD - API-First for Enterprises by Enrico Costanzi&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/enricocostanzi&#34;&gt;Enrico Costanzi&lt;/a&gt; at &lt;a href=&#34;https://jhipster-conf.github.io/&#34;&gt;JHipster Conf 2019 in Paris&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-11-11 - &lt;a href=&#34;https://qiita.com/unhurried/items/7b74f7d3c43545dadd2b&#34;&gt;TypeScript REST APIクライアント&lt;/a&gt; by &lt;a href=&#34;https://qiita.com/unhurried&#34;&gt;@unhurried&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-11-11 - &lt;a href=&#34;https://www.youtube.com/watch?v=MMay_nht8ec&#34;&gt;One Spec to Rule them all - OpenAPI in Action&lt;/a&gt; by &lt;a href=&#34;https://github.com/littldr&#34;&gt;Andreas Litt&lt;/a&gt; at &lt;a href=&#34;https://www.codetalks.com/&#34;&gt;code.talks 2019&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-11-13 - &lt;a href=&#34;https://simply-how.com/design-and-generate-api-code-from-openapi&#34;&gt;OpenAPI 3.0 Editor And Generator With A Spring Boot Example&lt;/a&gt; at &lt;a href=&#34;https://simply-how.com/&#34;&gt;Simply How&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-11-17 - &lt;a href=&#34;https://www.youtube.com/playlist?list=PLtJyHVMdzfF6fBkOUV5VDVErP23CGgHIy&#34;&gt;OpenAPI Generator YouTube playlist&lt;/a&gt; at &lt;a href=&#34;https://www.youtube.com&#34;&gt;YouTube&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-11-20 - &lt;a href=&#34;https://noti.st/lornajane/HvDH7U/introduction-to-openapi&#34;&gt;Introduction to OpenAPI&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/lornajane&#34;&gt;Lorna Mitchell&lt;/a&gt; at &lt;a href=&#34;https://gotocph.com/2019/&#34;&gt;GOTO Copenhagen 2019&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-11-20 - &lt;a href=&#34;https://dotnetthoughts.net/how-to-generate-angular-code-from-openapi-specifications/&#34;&gt;How to Generate Angular code from OpenAPI specifications&lt;/a&gt; by Anuraj&lt;/li&gt; &#xA; &lt;li&gt;2019-11-23 - &lt;a href=&#34;https://www.slideshare.net/techblogyahoo/swagger-openapi-specification-30-api&#34;&gt;Swagger ではない OpenAPI Specification 3.0 による API サーバー開発&lt;/a&gt; by &lt;a href=&#34;https://github.com/t2y&#34;&gt;Tetsuya Morimoto&lt;/a&gt; at &lt;a href=&#34;https://ccc2019fall.java-users.jp/&#34;&gt;JJUG CCC 2019 Fall&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-11-24 - &lt;a href=&#34;https://medium.com/@irinasouthwell_220/accelerate-flutter-development-with-openapi-and-dart-code-generation-1f16f8329a6a&#34;&gt;Accelerate Flutter development with OpenAPI and Dart code generation&lt;/a&gt; by &lt;a href=&#34;https://medium.com/@irinasouthwell_220&#34;&gt;Irina Southwell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-11-25 - &lt;a href=&#34;https://qiita.com/pochopocho13/items/8db662e1934fb2b408b8&#34;&gt;openapi-generatorで手軽にスタブサーバとクライアントの生成&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/pochopocho13&#34;&gt;@pochopocho13&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-11-26 - &lt;a href=&#34;https://blog.b9lab.com/cordacon-2019-highlights-braid-server-and-openapi-generator-for-corda-flows-api-s-d24179ccb27c&#34;&gt;CordaCon 2019 Highlights: Braid Server and OpenAPI Generator for Corda Client API’s&lt;/a&gt; by &lt;a href=&#34;https://blog.b9lab.com/@adelrestom&#34;&gt;Adel Rustum&lt;/a&gt; at &lt;a href=&#34;https://blog.b9lab.com/&#34;&gt;B9lab&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-12-03 - &lt;a href=&#34;https://www.corda.net/blog/a-road-to-less-coding-auto-generate-apilibrary/&#34;&gt;A Road to Less Coding: Auto-Generate APILibrary&lt;/a&gt; at &lt;a href=&#34;https://www.corda.net/blog/&#34;&gt;Corda Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-12-04 - &lt;a href=&#34;https://qiita.com/teracy55/items/0327c7a170ec772970c6&#34;&gt;Angular＋NestJS＋OpenAPI（Swagger）でマイクロサービスを視野に入れた環境を考える&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/teracy55&#34;&gt;てらしー&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-12-05 - &lt;a href=&#34;https://speakerdeck.com/sullis/code-generation-on-the-java-vm-2019-12-05&#34;&gt;Code generation on the Java VM&lt;/a&gt; by &lt;a href=&#34;https://speakerdeck.com/sullis&#34;&gt;Sean Sullivan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-12-17 - &lt;a href=&#34;https://www.techscore.com/blog/2019/12/17/openapi-generator-oauth2-accesstoken/&#34;&gt;OpenAPI Generator で OAuth2 アクセストークン発行のコードまで生成してみる&lt;/a&gt; by &lt;a href=&#34;https://www.techscore.com/blog/&#34;&gt;TECHSCORE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-12-23 - &lt;a href=&#34;https://www.electronicdesign.com/technologies/embedded-revolution/article/21119177/use-ada-for-your-web-development&#34;&gt;Use Ada for Your Web Development&lt;/a&gt; by &lt;a href=&#34;https://github.com/stcarrez&#34;&gt;Stephane Carrez&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019-12-23 - &lt;a href=&#34;https://gift-tech.co.jp/articles/structured-openapi-schema&#34;&gt;OpenAPIのスキーマを分割・構造化していく方法&lt;/a&gt; by &lt;a href=&#34;https://github.com/t2h5&#34;&gt;小飯塚達也&lt;/a&gt; at &lt;a href=&#34;https://gift-tech.co.jp/&#34;&gt;GiFT, Inc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-01-17 - &lt;a href=&#34;https://www.youtube.com/watch?v=mFBP-M0ZPfw&amp;amp;t=178s&#34;&gt;OpenAPI demo for Pulp 3.0 GA&lt;/a&gt; by &lt;a href=&#34;https://www.youtube.com/channel/UCI43Ffs4VPDv7awXvvBJfRQ&#34;&gt;Pulp&lt;/a&gt; at &lt;a href=&#34;https://www.youtube.com/&#34;&gt;Youtube&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-01-19 - &lt;a href=&#34;https://dev.to/rolfstreefkerk/why-document-a-rest-api-as-code-5e7p&#34;&gt;Why document a REST API as code?&lt;/a&gt; by &lt;a href=&#34;https://github.com/rpstreef&#34;&gt;Rolf Streefkerk&lt;/a&gt; at &lt;a href=&#34;https://dev.to&#34;&gt;DEV Community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-01-28 - &lt;a href=&#34;https://dev.to/matttyler/get-your-serverless-swagger-back-with-openapi-48gc&#34;&gt;Get Your Serverless Swagger Back with OpenAPI&lt;/a&gt; by &lt;a href=&#34;https://dev.to/matttyler&#34;&gt;Matt Tyler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-01-30 - &lt;a href=&#34;https://www.yutaka0m.work/entry/2020/01/30/163905&#34;&gt;OpenAPI Generatorへのコントリビュート&lt;/a&gt; by &lt;a href=&#34;https://github.com/yutaka0m&#34;&gt;yutaka0m&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-02-01 - &lt;a href=&#34;https://fosdem.org/2020/schedule/event/openapi/&#34;&gt;Using OpenAPI to Maximise Your Pulp 3 Experience&lt;/a&gt; by &lt;a href=&#34;https://github.com/dkliban/&#34;&gt;Dennis Kliban&lt;/a&gt; at &lt;a href=&#34;https://fosdem.org/&#34;&gt;FOSDEM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-02-07 - &lt;a href=&#34;https://www.youtube.com/watch?v=zhb7vUApLW8&amp;amp;t=927s&#34;&gt;Why you should use OpenAPI for your API design&lt;/a&gt; by &lt;a href=&#34;https://apiconference.net/speaker/nick-van-hoof/&#34;&gt;Nick Van Hoof&lt;/a&gt; at &lt;a href=&#34;https://apiconference.net/&#34;&gt;API Conference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-02-17 - &lt;a href=&#34;https://www.brightbox.com/blog/2020/02/17/using-openapi-to-validate-kubernetes-configs/&#34;&gt;Rubynetes: using OpenAPI to validate Kubernetes configs&lt;/a&gt; by Neil Wilson at &lt;a href=&#34;https://www.brightbox.com/&#34;&gt;Brightbox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-02-20 - &lt;a href=&#34;https://devblog.xero.com/building-sdks-for-the-future-b79ff726dfd6&#34;&gt;Building SDKs for the future&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/sidneyallen&#34;&gt;Sid Maestre (Xero)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-02-27 - &lt;a href=&#34;https://tech.medpeer.co.jp/entry/e2e-ie11&#34;&gt;Nuxt利用プロダクトでIE11と仲良くするためのE2E&lt;/a&gt; at &lt;a href=&#34;https://tech.medpeer.co.jp/&#34;&gt;Medpeer.co.jp Tech Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-02-29 - &lt;a href=&#34;https://link.springer.com/chapter/10.1007/978-3-030-41494-8_14&#34;&gt;Providing Support to IoT Devices Deployed in Disconnected Rural Environment (Conference paper)&lt;/a&gt; by Sergio Laso, Daniel Flores-Martín, Juan Luis HerreraCarlos, CanalJuan Manuel, MurilloJavier Berrocal&lt;/li&gt; &#xA; &lt;li&gt;2020-03-02 - &lt;a href=&#34;https://www.mokkapps.de/blog/how-to-generate-angular-and-spring-code-from-open-api-specification/&#34;&gt;How To Generate Angular &amp;amp; Spring Code From OpenAPI Specification&lt;/a&gt; by &lt;a href=&#34;https://www.mokkapps.de/&#34;&gt;Michael Hoffmann&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-03-02 - &lt;a href=&#34;https://gift-tech.co.jp/articles/openapi-generator-typescript&#34;&gt;OpenAPI Generator + TypeScript で始める自動生成の型に守られた豊かなクライアント生活&lt;/a&gt; by &lt;a href=&#34;https://gift-tech.co.jp/members/naokiioroi&#34;&gt;五百蔵 直樹&lt;/a&gt; at &lt;a href=&#34;https://gift-tech.co.jp/&#34;&gt;GiFT株式会社&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-03-10 - &lt;a href=&#34;https://speakerdeck.com/akihito_nakano/openapi-generator-meetup-number-1&#34;&gt;OpenAPI Generator Meetup #1&lt;/a&gt; by &lt;a href=&#34;https://github.com/ackintosh&#34;&gt;中野暁人&lt;/a&gt; at &lt;a href=&#34;https://openapi-generator-meetup.connpass.com/event/168187/&#34;&gt;OpenAPI Generator Meetup #1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-03-15 - &lt;a href=&#34;https://k6.io/blog/load-testing-your-api-with-swagger-openapi-and-k6&#34;&gt;Load Testing Your API with Swagger/OpenAPI and k6&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-04-13 - &lt;a href=&#34;https://tech-blog.optim.co.jp/entry/2020/04/13/100000&#34;&gt;俺的【OAS】との向き合い方 (爆速でOpenAPIと友達になろう)&lt;/a&gt; in &lt;a href=&#34;https://tech-blog.optim.co.jp/&#34;&gt;OPTim Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-04-22 - &lt;a href=&#34;https://nordicapis.com/introduction-to-openapi-generator/&#34;&gt;Introduction to OpenAPI Generator&lt;/a&gt; by &lt;a href=&#34;https://nordicapis.com/author/sandovaleffect/&#34;&gt;Kristopher Sandoval&lt;/a&gt; in &lt;a href=&#34;https://nordicapis.com/&#34;&gt;Nordic APIs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-04-27 - &lt;a href=&#34;https://medium.com/pdf-generator-api/how-we-use-open-api-v3-specification-to-auto-generate-api-documentation-code-snippets-and-clients-d127a3cea784&#34;&gt;How we use Open API v3 specification to auto-generate API documentation, code-snippets and clients&lt;/a&gt; by &lt;a href=&#34;https://medium.com/@tanel.tahepold&#34;&gt;Tanel Tähepõld&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-05-09 - &lt;a href=&#34;https://qiita.com/kasa_le/items/97ca6a8dd4605695c25c&#34;&gt;OpenAPIでお手軽にモックAPIサーバーを動かす&lt;/a&gt; by &lt;a href=&#34;https://qiita.com/kasa_le&#34;&gt;Sachie Kamba&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-05-18 - &lt;a href=&#34;https://dev.to/alfonzjanfrithz/spring-boot-rest-with-openapi-3-59jm&#34;&gt;Spring Boot REST with OpenAPI 3&lt;/a&gt; by &lt;a href=&#34;https://dev.to/alfonzjanfrithz&#34;&gt;Alfonz Jan Frithz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-05-19 - &lt;a href=&#34;https://www.youtube.com/watch?v=sIaXmR6xRAw&#34;&gt;Dead Simple APIs with Open API&lt;/a&gt; by &lt;a href=&#34;https://github.com/dragonmantank&#34;&gt;Chris Tankersley&lt;/a&gt; at &lt;a href=&#34;https://developer.nexmo.com/&#34;&gt;Nexmo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-05-22 - &lt;a href=&#34;https://dev.to/unhurried/typescript-rest-api-client-4in3&#34;&gt;TypeScript REST API Client&lt;/a&gt; by &lt;a href=&#34;https://dev.to/unhurried&#34;&gt;&#34;unhurried&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-05-28 - &lt;a href=&#34;https://www.youtube.com/watch?v=agYVz6dzh1I&#34;&gt;【使用 lotify + Swagger 建置可共用的 LINE Notify bot】 - #NiJia @ Chatbot Developer Taiwan 第 #19 小聚&lt;/a&gt; by &lt;a href=&#34;https://www.youtube.com/channel/UCxeYUyZNnHmpX23YNF-ewvw&#34;&gt;Chatbot Developer Taiwan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-05-28 - &lt;a href=&#34;https://www.youtube.com/watch?v=xexLvQqAhiA&#34;&gt;Building APIs with Laravel using OpenAPI&lt;/a&gt; by &lt;a href=&#34;https://github.com/dragonmantank&#34;&gt;Chris Tankersley&lt;/a&gt; at &lt;a href=&#34;https://laracon.eu/&#34;&gt;Laracon EU&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-06-12 - &lt;a href=&#34;https://ieeexplore.ieee.org/document/9274746&#34;&gt;Interoperability by construction: code generation for Arrowhead Clients&lt;/a&gt; by Michele Albano, Brian Nielsen at &lt;a href=&#34;https://ieeexplore.ieee.org/xpl/conhome/9274544/proceeding&#34;&gt;2020 IEEE Conference on Industrial Cyberphysical Systems (ICPS)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-06-23 - &lt;a href=&#34;https://www.cam-inc.co.jp/news/20200623&#34;&gt;新規サーバーアプリケーションにTypeScriptを採用してみた&lt;/a&gt; at &lt;a href=&#34;https://www.cam-inc.co.jp/news/tech-blog/&#34;&gt;CAM Tech Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-06-29 - &lt;a href=&#34;https://ieeexplore.ieee.org/document/9127353&#34;&gt;Artifact Abstract: Deployment of APIs on Android Mobile Devices and Microcontrollers&lt;/a&gt; by &lt;a href=&#34;https://ieeexplore.ieee.org/document/9127353/authors#authors&#34;&gt;Sergio Laso ; Marino Linaje ; Jose Garcia-Alonso ; Juan M. Murillo ; Javier Berrocal&lt;/a&gt; at &lt;a href=&#34;https://ieeexplore.ieee.org/xpl/conhome/9125449/proceeding&#34;&gt;2020 IEEE International Conference on Pervasive Computing and Communications (PerCom)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-07-07 - &lt;a href=&#34;https://blog.dreamfactory.com/5-best-api-documentation-tools/&#34;&gt;5 Best API Documentation Tools&lt;/a&gt; by Susanna Bouse at &lt;a href=&#34;https://blog.dreamfactory.com/&#34;&gt;DreamFactory Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-07-12 - &lt;a href=&#34;https://qiita.com/professor/items/4cbd04ec084d13057bc2&#34;&gt;Open API 3.0の定義からgolangのサーバコードのスケルトンを作成する&lt;/a&gt; by &lt;a href=&#34;https://qiita.com/professor&#34;&gt;@professor (Qiita Blog)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-07-20 - &lt;a href=&#34;https://www.datadoghq.com/blog/java-go-libraries/&#34;&gt;Datadog API client libraries now available for Java and Go&lt;/a&gt; by Jordan Obey at &lt;a href=&#34;https://www.datadoghq.com/blog&#34;&gt;Datadog Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-07-23 - &lt;a href=&#34;https://dev.to/no0law1/generate-client-sdk-for-net-core-using-open-api-2dgh&#34;&gt;Generate Client SDK for .NET Core using Open Api&lt;/a&gt; by &lt;a href=&#34;https://dev.to/no0law1&#34;&gt;Nuno Reis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-07-26 - &lt;a href=&#34;https://qiita.com/gyamoto/items/eeeff81b6770487319ed&#34;&gt;Dartのhttp_interceptorライブラリを使うと配列のクエリパラメータが消えてしまう件の応急処置&lt;/a&gt; by &lt;a href=&#34;https://qiita.com/gyamoto&#34;&gt;@gyamoto&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-08-01 - &lt;a href=&#34;https://dev.to/martinmcwhorter/generate-angular-reactiveforms-from-swagger-openapi-35h9&#34;&gt;Generate Angular ReactiveForms from Swagger/OpenAPI&lt;/a&gt; by &lt;a href=&#34;https://dev.to/martinmcwhorter&#34;&gt;Martin McWhorter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-08-03 - &lt;a href=&#34;https://medium.com/@everisBrasil/criando-bibliotecas-para-apis-restful-com-openapi-swagger-editor-e-openapi-generator-75349a6420fd&#34;&gt;Criando Bibliotecas para APIs RESTful com OpenAPI, Swagger Editor e OpenAPI Generator&lt;/a&gt; by &lt;a href=&#34;https://medium.com/@everisBrasil&#34;&gt;everis Brasil (an NTT DATA Company)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-08-19 - &lt;a href=&#34;https://thinkit.co.jp/article/17704&#34;&gt;マイクロサービスを連携してみよう&lt;/a&gt; by &lt;a href=&#34;https://thinkit.co.jp/author/17588&#34;&gt;岡井 裕矢(おかい ゆうや)&lt;/a&gt;, &lt;a href=&#34;https://thinkit.co.jp/author/17705&#34;&gt;泉 勝(いずみ まさる)&lt;/a&gt; at &lt;a href=&#34;https://thinkit.co.jp/&#34;&gt;Think IT（シンクイット）&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-08-25 - &lt;a href=&#34;https://tech.smarthr.jp/entry/2020/08/25/135631&#34;&gt;OpenAPI Generator と TypeScript で型安全にフロントエンド開発をしている話&lt;/a&gt; at &lt;a href=&#34;https://tech.smarthr.jp/&#34;&gt;SmartHR Tech Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-09-10 - &lt;a href=&#34;https://www.instana.com/blog/introduction-to-openapi-with-instana/&#34;&gt;Introduction to OpenAPI with Instana&lt;/a&gt; by &lt;a href=&#34;https://www.instana.com/blog/author/cedricziel/&#34;&gt;Cedric Ziel&lt;/a&gt; at &lt;a href=&#34;https://www.instana.com/blog/&#34;&gt;Instana Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-09-17 - &lt;a href=&#34;https://medium.com/@ghufz.learn/generate-powershellsdk-using-openapi-generator-33b700891e33&#34;&gt;Generate PowerShellSDK using openapi-generator&lt;/a&gt; by &lt;a href=&#34;https://medium.com/@ghufz.learn&#34;&gt;Ghufran Zahidi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-09-24 - &lt;a href=&#34;https://medium.com/@sceleski/how-to-automate-api-code-generation-openapi-swagger-and-boost-productivity-1176a0056d8a&#34;&gt;How to automate API code generation (OpenAPI/Swagger) and boost productivity - Tutorial with React Native featuring TypeScript&lt;/a&gt; by &lt;a href=&#34;https://medium.com/@sceleski&#34;&gt;Sanjin Celeski&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-09-25 - &lt;a href=&#34;https://medium.com/@pguso/generate-openapi-angular-client-8c9288e8bbd4&#34;&gt;Generate OpenAPI Angular Client&lt;/a&gt; by &lt;a href=&#34;https://medium.com/@pguso&#34;&gt;Patric&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-10-24 - &lt;a href=&#34;https://www.josephguadagno.net/2020/10/24/working-with-microsoft-identity-react-native-client&#34;&gt;Working with Microsoft Identity - React Native Client&lt;/a&gt; by &lt;a href=&#34;https://www.josephguadagno.net/&#34;&gt;Joseph Guadagno&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-10-31 - &lt;a href=&#34;https://www.youtube.com/watch?v=J4JHLESAiFk&#34;&gt;[B2] OpenAPI Specification으로 타입-세이프하게 API 개발하기: 희망편 VS 절망편&lt;/a&gt; by 최태건 at &lt;a href=&#34;https://2020.feconf.kr/&#34;&gt;FEConf 2020&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-11-05 - &lt;a href=&#34;https://www.massiveart.com/blog/automated-rest-api-code-generation-wie-it-systeme-miteinander-sprechen&#34;&gt;Automated REST-Api Code Generation: Wie IT-Systeme miteinander sprechen&lt;/a&gt; by Stefan Rottensteiner at &lt;a href=&#34;https://www.massiveart.com/blog&#34;&gt;MASSIVE ART Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-12-01 - &lt;a href=&#34;https://qiita.com/saki-engineering/items/b20d8b6074c4da9664a5&#34;&gt;OpenAPI GeneratorでGoのAPIサーバー/クライアントコードを自動生成する&lt;/a&gt; by &lt;a href=&#34;https://qiita.com/saki-engineering&#34;&gt;@saki-engineering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-12-04 - &lt;a href=&#34;https://www.youtube.com/watch?v=7Lke9dHRqT0&#34;&gt;Scaling the Test Coverage of OpenAPI Generator for 30+ Programming Languages&lt;/a&gt; by &lt;a href=&#34;https://github.com/wing328&#34;&gt;William Cheng&lt;/a&gt; at &lt;a href=&#34;https://events.linuxfoundation.org/archive/2020/open-source-summit-japan/&#34;&gt;Open Source Summit Japan + Automotive Linux Summit 2020&lt;/a&gt; (&lt;a href=&#34;https://speakerdeck.com/wing328/scaling-the-test-coverage-of-openapi-generator-for-30-plus-programming-languages&#34;&gt;Slides&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;2020-12-09 - &lt;a href=&#34;https://qiita.com/yoshifujiT/items/905c18700ede23f40840&#34;&gt;プロジェクトにOpenAPI Generatorで自動生成された型付きAPI Clientを導入した話&lt;/a&gt; by &lt;a href=&#34;https://github.com/yoshifujiT&#34;&gt;@yoshifujiT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-12-15 - &lt;a href=&#34;https://techblog.yahoo.co.jp/entry/2020121530052952/&#34;&gt;Next.js + NestJS + GraphQLで変化に追従するフロントエンドへ 〜 ショッピングクーポンの事例紹介&lt;/a&gt; by &lt;a href=&#34;https://github.com/ogugu9&#34;&gt;小倉 陸&lt;/a&gt; at &lt;a href=&#34;https://techblog.yahoo.co.jp/&#34;&gt;Yahoo! JAPAN Tech Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2021-01-08 - &lt;a href=&#34;https://www.nginx.com/blog/hello-new-api-part-1/&#34;&gt;Hello, New API – Part 1&lt;/a&gt; by &lt;a href=&#34;https://www.nginx.com/people/jeremy-schulman/&#34;&gt;Jeremy Schulman&lt;/a&gt; at &lt;a href=&#34;https://www.mlb.com&#34;&gt;Major League Baseball&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2021-01-18 - &lt;a href=&#34;https://codezine.jp/article/detail/13406?p=2&#34;&gt;「アプリ開発あるある」を疑うことから始まった、API Clientコードの自動生成【デブスト2020】&lt;/a&gt; by &lt;a href=&#34;https://codezine.jp/author/1&#34;&gt;CodeZine編集部&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2021-02-05 - &lt;a href=&#34;https://blog.viadee.de/en/rest-api-roundtrip&#34;&gt;REST-API-Roundtrip with SpringDoc and OpenAPI Generator&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/benklatt&#34;&gt;Benjamin Klatt&lt;/a&gt; at &lt;a href=&#34;https://www.viadee.de/en/&#34;&gt;viadee&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2021-02-17 - &lt;a href=&#34;https://medium.com/nerd-for-tech/rest-api-roundtrip-with-springdoc-and-openapi-generator-30bd27ccf698&#34;&gt;REST-API-Roundtrip with SpringDoc and OpenAPI Generator&lt;/a&gt; by &lt;a href=&#34;https://cloud-viadee.medium.com/&#34;&gt;cloud @viadee&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2021-03-08 - &lt;a href=&#34;https://blog.csdn.net/u013019701/article/details/114531975&#34;&gt;OpenAPI Generator 工具的躺坑尝试&lt;/a&gt; by &lt;a href=&#34;https://blog.csdn.net/u013019701&#34;&gt;独家雨天&lt;/a&gt; at &lt;a href=&#34;https://blog.csdn.net/&#34;&gt;CSDN官方博客&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2021-03-16 - &lt;a href=&#34;https://cloud.tencent.com/developer/article/1802704&#34;&gt;如何基于 Swagger 使用 OpenAPI Generator 生成 JMeter 脚本？&lt;/a&gt; by &lt;a href=&#34;https://cloud.tencent.com/developer/user/5836255&#34;&gt;高楼Zee&lt;/a&gt; at &lt;a href=&#34;https://cloud.tencent.com/developer/column&#34;&gt;腾讯云专栏&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2021-03-24 - &lt;a href=&#34;https://zenn.dev/takepepe/articles/openapi-generator-cli-ts&#34;&gt;openapi-generator-cli による TypeScript 型定義&lt;/a&gt; by &lt;a href=&#34;https://zenn.dev/takepepe&#34;&gt;Takefumi Yoshii&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2021-03-28 - &lt;a href=&#34;https://dev.to/arnaudcortisse/trying-out-nestjs-part-4-generate-typescript-clients-from-openapi-documents-28mk&#34;&gt;Trying out NestJS part 4: Generate Typescript clients from OpenAPI documents&lt;/a&gt; by &lt;a href=&#34;https://dev.to/arnaudcortisse&#34;&gt;Arnaud Cortisse&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2021-03-31 - &lt;a href=&#34;https://www.baeldung.com/java-openapi-generator-server&#34;&gt;Open API Server Implementation Using OpenAPI Generator&lt;/a&gt; at &lt;a href=&#34;https://www.baeldung.com/&#34;&gt;Baeldung&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2021-03-31 - &lt;a href=&#34;https://www.1ju.org/article/java-openapi-generator-server&#34;&gt;使用OpenAPI Generator實現Open API Server&lt;/a&gt; at &lt;a href=&#34;https://www.1ju.org/&#34;&gt;億聚網&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2021-04-19 - &lt;a href=&#34;https://www.twilio.com/blog/introducing-twilio-open-api-specification-beta&#34;&gt;Introducing Twilio’s OpenAPI Specification Beta&lt;/a&gt; by &lt;a href=&#34;https://www.twilio.com/blog/author/gpj&#34;&gt;GARETH PAUL JONES&lt;/a&gt; at &lt;a href=&#34;https://www.twilio.com/blog&#34;&gt;Twilio Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2021-04-22 - &lt;a href=&#34;https://medium.com/unibuddy-technology-blog/leveraging-openapi-strengths-in-a-micro-service-environment-3d7f9e7c26ff&#34;&gt;Leveraging OpenApi strengths in a Micro-Service environment&lt;/a&gt; by Nicolas Jellab at &lt;a href=&#34;https://medium.com/unibuddy-technology-blog&#34;&gt;Unibuddy Technology Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2021-04-27 - &lt;a href=&#34;https://speakerdeck.com/wing328/from-zero-to-publishing-powershell-api-clients-in-powershell-gallery-within-minutes&#34;&gt;From zero to publishing PowerShell API clients in PowerShell Gallery within minutes&lt;/a&gt; by &lt;a href=&#34;https://github.com/wing328&#34;&gt;William Cheng&lt;/a&gt; at &lt;a href=&#34;https://events.devopscollective.org/event/powershell-devops-global-summit-2021/&#34;&gt;PowerShell + DevOps Global Summit 2021&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2021-05-31 - &lt;a href=&#34;https://aakira.app/blog/2021/05/flutter-open-api/&#34;&gt;FlutterでOpen Api Generator(Swagger)を使う&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/_a_akira&#34;&gt;AAkira&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2021-06-22 - &lt;a href=&#34;https://dzone.com/articles/rest-api-documentation-and-client-generation-with&#34;&gt;Rest API Documentation and Client Generation With OpenAPI&lt;/a&gt; by &lt;a href=&#34;https://dzone.com/users/1011797/prasanthnath.g@gmail.com.html&#34;&gt;Prasanth Gullapalli&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2021-07-16 - &lt;a href=&#34;https://www.youtube.com/watch?v=YrrKQHxLPpQ&#34;&gt;銀行事業のサーバーサイド開発について / LINE 京都開発室 エンジニア採用説明会&lt;/a&gt; by 野田誠人, Robert Mitchell&lt;/li&gt; &#xA; &lt;li&gt;2021-07-19 - &lt;a href=&#34;https://sylhare.github.io/2021/07/19/Openapi-swagger-codegen-with-kotlin.html&#34;&gt;OpenAPI code generation with kotlin&lt;/a&gt; by &lt;a href=&#34;https://github.com/sylhare&#34;&gt;sylhare&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2021-07-29 - &lt;a href=&#34;https://dzone.com/articles/how-to-rewrite-a-huge-code-base&#34;&gt;How To Rewrite a Huge Codebase&lt;/a&gt; by &lt;a href=&#34;https://dzone.com/users/4565446/publiusovidius.html&#34;&gt;Curtis Poe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2021-08-21 - &lt;a href=&#34;https://medium.com/@flowsquad/generating-client-apis-using-swagger-part-1-2d46f13f5e92&#34;&gt;Generating Client APIs using Swagger Part 1&lt;/a&gt; by &lt;a href=&#34;https://medium.com/@flowsquad&#34;&gt;FlowSquad.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2021-09-11 - &lt;a href=&#34;https://docs.aws.amazon.com/parallelcluster/latest/ug/api-reference-v3.html&#34;&gt;Invoking AWS ParallelCluster API&lt;/a&gt; at &lt;a href=&#34;https://docs.aws.amazon.com/parallelcluster/latest/ug/api-reference-v3.html&#34;&gt;AWS ParallelCluster API official documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2021-09-20 - &lt;a href=&#34;https://www.youtube.com/watch?v=s2zMtwd5klg&#34;&gt;OpenAPI Generator - The Babel Fish of the API World&lt;/a&gt; by &lt;a href=&#34;https://github.com/cliffano&#34;&gt;Cliffano Subagio (Principal Engineer at Shine Solutions)&lt;/a&gt; at &lt;a href=&#34;https://www.apidays.global/australia2021/&#34;&gt;Apidays LIVE Australia 2021&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2021-10-02 - &lt;a href=&#34;https://hackernoon.com/how-to-write-fewer-lines-of-code-with-the-openapi-generator&#34;&gt;How to Write Fewer Lines of Code with the OpenAPI Generator&lt;/a&gt; by &lt;a href=&#34;https://hackernoon.com/u/alphamikle&#34;&gt;Mikhail Alfa&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2021-10-12 - &lt;a href=&#34;https://www.youtube.com/watch?v=9hEsNBSqTFk&#34;&gt;OpenAPI Generator : 4000 étoiles sur GitHub et des spaghettis&lt;/a&gt; by &lt;a href=&#34;https://github.com/jmini&#34;&gt;Jérémie Bresson&lt;/a&gt; at &lt;a href=&#34;https://cfp.devoxx.fr/2021/speaker/jeremie_bresson&#34;&gt;Devoxx FR 2021&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2021-10-17 - &lt;a href=&#34;https://richardwillis.info/blog/generate-a-type-script-http-client-from-an-open-api-spec-in-dot-net-5&#34;&gt;Generate a TypeScript HTTP Client From An OpenAPI Spec In DotNET 5&lt;/a&gt; by &lt;a href=&#34;https://github.com/badsyntax&#34;&gt;Richard Willis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2021-11-06 - &lt;a href=&#34;https://zenn.dev/woo_noo/articles/5cb09f8e2899ae782ad1&#34;&gt;スタートアップの開発で意識したこと&lt;/a&gt; by &lt;a href=&#34;https://zenn.dev/woo_noo&#34;&gt;woo-noo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2021-11-09 - &lt;a href=&#34;https://apexlabs.ai/post/effective-software-development-using-openapi-generator&#34;&gt;Effective Software Development using OpenAPI Generator&lt;/a&gt; by Ajil Oomme&lt;/li&gt; &#xA; &lt;li&gt;2021-12-07 - &lt;a href=&#34;https://betterprogramming.pub/4-use-cases-of-openapi-which-are-good-to-know-1a041f4ad71e&#34;&gt;An Introduction to OpenAPI&lt;/a&gt; by &lt;a href=&#34;https://naamanhirschfeld.medium.com/&#34;&gt;Na&#39;aman Hirschfeld&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2022-01-02 - &lt;a href=&#34;https://arxiv.org/abs/2201.00270&#34;&gt;Towards a secure API client generator for IoT devices&lt;/a&gt; by Anders Aaen Springborg, Martin Kaldahl Andersen, Kaare Holland Hattel, Michele Albano&lt;/li&gt; &#xA; &lt;li&gt;2022-02-02 - &lt;a href=&#34;https://www.youtube.com/watch?v=kPW7ccu9Yvk&#34;&gt;Use OpenApi generator to share your models between Flutter and your backend&lt;/a&gt; by &lt;a href=&#34;https://feb2022.fluttervikings.com/speakers/guillaume_bernos&#34;&gt;Guillaume Bernos&lt;/a&gt; at &lt;a href=&#34;https://feb2022.fluttervikings.com/&#34;&gt;Flutter Vikings Conference 2022 (Hybrid)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2022-03-15 - &lt;a href=&#34;https://qiita.com/yuji38kwmt/items/824d74d4889055ab37d8&#34;&gt;OpenAPI Specでハイフン区切りのEnum値をOpenAPI Generatorで出力すると、ハイフン区切りのまま出力される&lt;/a&gt; by &lt;a href=&#34;https://qiita.com/yuji38kwmt&#34;&gt;yuji38kwmt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2022-04-01 - &lt;a href=&#34;https://techblog.zozo.com/entry/coexistence-of-openapi-and-spring&#34;&gt;OpenAPI Generatorのコード生成とSpring Frameworkのカスタムデータバインディングを共存させる&lt;/a&gt; in &lt;a href=&#34;https://techblog.zozo.com/&#34;&gt;ZOZO Tech Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2022-04-06 - &lt;a href=&#34;https://apexlabs.ai/post/openapi-generator&#34;&gt;Effective Software Development using OpenAPI Generator&lt;/a&gt; by Ajil Oommen (Senior Flutter Developer)&lt;/li&gt; &#xA; &lt;li&gt;2022-05-13 - &lt;a href=&#34;https://www.youtube.com/watch?v=XC8oVn_efTw&#34;&gt;A Path From an API To Client Libraries&lt;/a&gt; by &lt;a href=&#34;https://www.devoxx.co.uk/talk/?id=11211&#34;&gt;Filip Srnec&lt;/a&gt; at Infobip&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents&#34;&gt;6 - About Us&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents&#34;&gt;6.1 - OpenAPI Generator Core Team&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;OpenAPI Generator core team members are contributors who have been making significant contributions (review issues, fix bugs, make enhancements, etc) to the project on a regular basis.&lt;/p&gt; &#xA;&lt;h4&gt;Core Team Members&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wing328&#34;&gt;@wing328&lt;/a&gt; (2015/07) &lt;a href=&#34;https://www.patreon.com/wing328&#34;&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jimschubert&#34;&gt;@jimschubert&lt;/a&gt; (2016/05) &lt;a href=&#34;https://www.patreon.com/jimschubert&#34;&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cbornet&#34;&gt;@cbornet&lt;/a&gt; (2016/05)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jmini&#34;&gt;@jmini&lt;/a&gt; (2018/04) &lt;a href=&#34;https://www.patreon.com/jmini&#34;&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/etherealjoy&#34;&gt;@etherealjoy&lt;/a&gt; (2019/06)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/spacether&#34;&gt;@spacether&lt;/a&gt; (2020/05) &lt;a href=&#34;https://github.com/sponsors/spacether/&#34;&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;span&gt;❤️&lt;/span&gt; = Link to support the contributor directly&lt;/p&gt; &#xA;&lt;h4&gt;Template Creator&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Embedded templates are only supported in &lt;em&gt;Mustache&lt;/em&gt; format. Support for all other formats is experimental and subject to change at any time.&lt;/p&gt; &#xA;&lt;p&gt;Here is a list of template creators:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;API Clients: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Ada: @stcarrez&lt;/li&gt; &#xA;   &lt;li&gt;Apex: @asnelling&lt;/li&gt; &#xA;   &lt;li&gt;Bash: @bkryza&lt;/li&gt; &#xA;   &lt;li&gt;C: @PowerOfCreation @zhemant &lt;a href=&#34;https://www.patreon.com/zhemant&#34;&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;C++ REST: @Danielku15&lt;/li&gt; &#xA;   &lt;li&gt;C++ Tiny: @AndersSpringborg @kaareHH @michelealbano @mkakbas&lt;/li&gt; &#xA;   &lt;li&gt;C++ UE4: @Kahncode&lt;/li&gt; &#xA;   &lt;li&gt;C# (.NET 2.0): @who&lt;/li&gt; &#xA;   &lt;li&gt;C# (.NET Standard 1.3 ): @Gronsak&lt;/li&gt; &#xA;   &lt;li&gt;C# (.NET 4.5 refactored): @jimschubert &lt;a href=&#34;https://www.patreon.com/jimschubert&#34;&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;C# (GenericHost): @devhl-labs&lt;/li&gt; &#xA;   &lt;li&gt;C# (HttpClient): @Blackclaws&lt;/li&gt; &#xA;   &lt;li&gt;Clojure: @xhh&lt;/li&gt; &#xA;   &lt;li&gt;Crystal: @wing328&lt;/li&gt; &#xA;   &lt;li&gt;Dart: @yissachar&lt;/li&gt; &#xA;   &lt;li&gt;Dart (refactor): @joernahrens&lt;/li&gt; &#xA;   &lt;li&gt;Dart 2: @swipesight&lt;/li&gt; &#xA;   &lt;li&gt;Dart (Jaguar): @jaumard&lt;/li&gt; &#xA;   &lt;li&gt;Dart (Dio): @josh-burton&lt;/li&gt; &#xA;   &lt;li&gt;Elixir: @niku&lt;/li&gt; &#xA;   &lt;li&gt;Elm: @eriktim&lt;/li&gt; &#xA;   &lt;li&gt;Eiffel: @jvelilla&lt;/li&gt; &#xA;   &lt;li&gt;Erlang: @tsloughter&lt;/li&gt; &#xA;   &lt;li&gt;Erlang (PropEr): @jfacorro @robertoaloi&lt;/li&gt; &#xA;   &lt;li&gt;Groovy: @victorgit&lt;/li&gt; &#xA;   &lt;li&gt;Go: @wing328 &lt;a href=&#34;https://www.patreon.com/wing328&#34;&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Go (rewritten in 2.3.0): @antihax&lt;/li&gt; &#xA;   &lt;li&gt;Haskell (http-client): @jonschoning&lt;/li&gt; &#xA;   &lt;li&gt;Java (Feign): @davidkiss&lt;/li&gt; &#xA;   &lt;li&gt;Java (Retrofit): @0legg&lt;/li&gt; &#xA;   &lt;li&gt;Java (Retrofit2): @emilianobonassi&lt;/li&gt; &#xA;   &lt;li&gt;Java (Jersey2): @xhh&lt;/li&gt; &#xA;   &lt;li&gt;Java (okhttp-gson): @xhh&lt;/li&gt; &#xA;   &lt;li&gt;Java (RestTemplate): @nbruno&lt;/li&gt; &#xA;   &lt;li&gt;Java (Spring 5 WebClient): @daonomic&lt;/li&gt; &#xA;   &lt;li&gt;Java (RESTEasy): @gayathrigs&lt;/li&gt; &#xA;   &lt;li&gt;Java (Vertx): @lopesmcc&lt;/li&gt; &#xA;   &lt;li&gt;Java (Google APIs Client Library): @charlescapps&lt;/li&gt; &#xA;   &lt;li&gt;Java (Rest-assured): @viclovsky&lt;/li&gt; &#xA;   &lt;li&gt;Java (Java 11 Native HTTP client): @bbdouglas&lt;/li&gt; &#xA;   &lt;li&gt;Java (Apache HttpClient): @harrywhite4&lt;/li&gt; &#xA;   &lt;li&gt;Javascript/NodeJS: @jfiala&lt;/li&gt; &#xA;   &lt;li&gt;JavaScript (Apollo DataSource): @erithmetic&lt;/li&gt; &#xA;   &lt;li&gt;JavaScript (Closure-annotated Angular) @achew22&lt;/li&gt; &#xA;   &lt;li&gt;JavaScript (Flow types) @jaypea&lt;/li&gt; &#xA;   &lt;li&gt;JMeter: @davidkiss&lt;/li&gt; &#xA;   &lt;li&gt;Kotlin: @jimschubert &lt;a href=&#34;https://www.patreon.com/jimschubert&#34;&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Kotlin (MultiPlatform): @andrewemery&lt;/li&gt; &#xA;   &lt;li&gt;Kotlin (Volley): @alisters&lt;/li&gt; &#xA;   &lt;li&gt;Lua: @daurnimator&lt;/li&gt; &#xA;   &lt;li&gt;Nim: @hokamoto&lt;/li&gt; &#xA;   &lt;li&gt;OCaml: @cgensoul&lt;/li&gt; &#xA;   &lt;li&gt;Perl: @wing328 &lt;a href=&#34;https://www.patreon.com/wing328&#34;&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;PHP (Guzzle): @baartosz&lt;/li&gt; &#xA;   &lt;li&gt;PHP (with Data Transfer): @Articus&lt;/li&gt; &#xA;   &lt;li&gt;PowerShell: @beatcracker&lt;/li&gt; &#xA;   &lt;li&gt;PowerShell (refactored in 5.0.0): @wing328&lt;/li&gt; &#xA;   &lt;li&gt;Python: @spacether &lt;a href=&#34;https://github.com/sponsors/spacether/&#34;&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Python-Experimental: @spacether &lt;a href=&#34;https://github.com/sponsors/spacether/&#34;&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;R: @ramnov&lt;/li&gt; &#xA;   &lt;li&gt;Ruby (Faraday): @meganemura @dkliban&lt;/li&gt; &#xA;   &lt;li&gt;Rust: @farcaller&lt;/li&gt; &#xA;   &lt;li&gt;Rust (rust-server): @metaswitch&lt;/li&gt; &#xA;   &lt;li&gt;Scala (scalaz &amp;amp; http4s): @tbrown1979&lt;/li&gt; &#xA;   &lt;li&gt;Scala (Akka): @cchafer&lt;/li&gt; &#xA;   &lt;li&gt;Scala (sttp): @chameleon82&lt;/li&gt; &#xA;   &lt;li&gt;Swift: @tkqubo&lt;/li&gt; &#xA;   &lt;li&gt;Swift 3: @hexelon&lt;/li&gt; &#xA;   &lt;li&gt;Swift 4: @ehyche&lt;/li&gt; &#xA;   &lt;li&gt;Swift 5: @4brunu&lt;/li&gt; &#xA;   &lt;li&gt;TypeScript (Angular1): @mhardorf&lt;/li&gt; &#xA;   &lt;li&gt;TypeScript (Angular2): @roni-frantchi&lt;/li&gt; &#xA;   &lt;li&gt;TypeScript (Angular6): @akehir&lt;/li&gt; &#xA;   &lt;li&gt;TypeScript (Angular7): @topce&lt;/li&gt; &#xA;   &lt;li&gt;TypeScript (Axios): @nicokoenig&lt;/li&gt; &#xA;   &lt;li&gt;TypeScript (Fetch): @leonyu&lt;/li&gt; &#xA;   &lt;li&gt;TypeScript (Inversify): @gualtierim&lt;/li&gt; &#xA;   &lt;li&gt;TypeScript (jQuery): @bherila&lt;/li&gt; &#xA;   &lt;li&gt;TypeScript (Nestjs): @vfrank66&lt;/li&gt; &#xA;   &lt;li&gt;TypeScript (Node): @mhardorf&lt;/li&gt; &#xA;   &lt;li&gt;TypeScript (Rxjs): @denyo&lt;/li&gt; &#xA;   &lt;li&gt;TypeScript (redux-query): @petejohansonxo&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Server Stubs &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Ada: @stcarrez&lt;/li&gt; &#xA;   &lt;li&gt;C# ASP.NET 5: @jimschubert &lt;a href=&#34;https://www.patreon.com/jimschubert&#34;&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;C# ASP.NET Core 3.0: @A-Joshi&lt;/li&gt; &#xA;   &lt;li&gt;C# APS.NET Core 3.1: @phatcher&lt;/li&gt; &#xA;   &lt;li&gt;C# Azure functions: @Abrhm7786&lt;/li&gt; &#xA;   &lt;li&gt;C# NancyFX: @mstefaniuk&lt;/li&gt; &#xA;   &lt;li&gt;C++ (Qt5 QHttpEngine): @etherealjoy&lt;/li&gt; &#xA;   &lt;li&gt;C++ Pistache: @sebymiano&lt;/li&gt; &#xA;   &lt;li&gt;C++ Restbed: @stkrwork&lt;/li&gt; &#xA;   &lt;li&gt;Erlang Server: @galaxie&lt;/li&gt; &#xA;   &lt;li&gt;F# (Giraffe) Server: @nmfisher&lt;/li&gt; &#xA;   &lt;li&gt;Go Server: @guohuang&lt;/li&gt; &#xA;   &lt;li&gt;Go (Echo) Server: @ph4r5h4d&lt;/li&gt; &#xA;   &lt;li&gt;Go (Gin) Server: @kemokemo&lt;/li&gt; &#xA;   &lt;li&gt;GraphQL Express Server: @renepardon&lt;/li&gt; &#xA;   &lt;li&gt;Haskell Servant: @algas&lt;/li&gt; &#xA;   &lt;li&gt;Haskell Yesod: @yotsuya&lt;/li&gt; &#xA;   &lt;li&gt;Java Camel: @carnevalegiacomo&lt;/li&gt; &#xA;   &lt;li&gt;Java MSF4J: @sanjeewa-malalgoda&lt;/li&gt; &#xA;   &lt;li&gt;Java Spring Boot: @diyfr&lt;/li&gt; &#xA;   &lt;li&gt;Java Undertow: @stevehu&lt;/li&gt; &#xA;   &lt;li&gt;Java Play Framework: @JFCote&lt;/li&gt; &#xA;   &lt;li&gt;Java PKMST: @anshu2185 @sanshuman @rkumar-pk @ninodpillai&lt;/li&gt; &#xA;   &lt;li&gt;Java Vert.x: @lwlee2608&lt;/li&gt; &#xA;   &lt;li&gt;Java Micronaut: @andriy-dmytruk&lt;/li&gt; &#xA;   &lt;li&gt;JAX-RS RestEasy: @chameleon82&lt;/li&gt; &#xA;   &lt;li&gt;JAX-RS CXF: @hiveship&lt;/li&gt; &#xA;   &lt;li&gt;JAX-RS CXF (CDI): @nickcmaynard&lt;/li&gt; &#xA;   &lt;li&gt;JAX-RS RestEasy (JBoss EAP): @jfiala&lt;/li&gt; &#xA;   &lt;li&gt;Kotlin: @jimschubert &lt;a href=&#34;https://www.patreon.com/jimschubert&#34;&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Kotlin (Spring Boot): @dr4ke616&lt;/li&gt; &#xA;   &lt;li&gt;Kotlin (Vertx): @Wooyme&lt;/li&gt; &#xA;   &lt;li&gt;Kotlin (JAX-RS): @anttileppa&lt;/li&gt; &#xA;   &lt;li&gt;NodeJS Express: @YishTish&lt;/li&gt; &#xA;   &lt;li&gt;PHP Laravel: @renepardon&lt;/li&gt; &#xA;   &lt;li&gt;PHP Lumen: @abcsun&lt;/li&gt; &#xA;   &lt;li&gt;PHP Mezzio (with Path Handler): @Articus&lt;/li&gt; &#xA;   &lt;li&gt;PHP Slim: @jfastnacht&lt;/li&gt; &#xA;   &lt;li&gt;PHP Slim4: &lt;a href=&#34;https://github.com/ybelenko&#34;&gt;@ybelenko&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;PHP Symfony: @ksm2&lt;/li&gt; &#xA;   &lt;li&gt;PHP Symfony6: @BenjaminHae&lt;/li&gt; &#xA;   &lt;li&gt;Python FastAPI: @krjakbrjak&lt;/li&gt; &#xA;   &lt;li&gt;Python AIOHTTP:&lt;/li&gt; &#xA;   &lt;li&gt;Ruby on Rails 5: @zlx&lt;/li&gt; &#xA;   &lt;li&gt;Rust (rust-server): @metaswitch&lt;/li&gt; &#xA;   &lt;li&gt;Scala Akka: @Bouillie&lt;/li&gt; &#xA;   &lt;li&gt;Scala Finch: @jimschubert &lt;a href=&#34;https://www.patreon.com/jimschubert&#34;&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Scala Lagom: @gmkumar2005&lt;/li&gt; &#xA;   &lt;li&gt;Scala Play: @adigerber&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Documentation &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;AsciiDoc: @man-at-home&lt;/li&gt; &#xA;   &lt;li&gt;HTML Doc 2: @jhitchcock&lt;/li&gt; &#xA;   &lt;li&gt;Confluence Wiki: @jhitchcock&lt;/li&gt; &#xA;   &lt;li&gt;PlantUML: @pburls&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Configuration &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Apache2: @stkrwork&lt;/li&gt; &#xA;   &lt;li&gt;k6: @mostafa&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Schema &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Avro: @sgadouar&lt;/li&gt; &#xA;   &lt;li&gt;GraphQL: @wing328 &lt;a href=&#34;https://www.patreon.com/wing328&#34;&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Ktorm: @Luiz-Monad&lt;/li&gt; &#xA;   &lt;li&gt;MySQL: &lt;a href=&#34;https://github.com/ybelenko&#34;&gt;@ybelenko&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Protocol Buffer: @wing328&lt;/li&gt; &#xA;   &lt;li&gt;WSDL @adessoDpd&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;span&gt;❤️&lt;/span&gt; = Link to support the contributor directly&lt;/p&gt; &#xA;&lt;h4&gt;How to join the core team&lt;/h4&gt; &#xA;&lt;p&gt;Here are the requirements to become a core team member:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;rank within top 50 in &lt;a href=&#34;https://github.com/openapitools/openapi-generator/graphs/contributors&#34;&gt;https://github.com/openapitools/openapi-generator/graphs/contributors&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;to contribute, here are some good &lt;a href=&#34;https://github.com/openapitools/openapi-generator/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22&#34;&gt;starting points&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;regular contributions to the project &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;about 3 hours per week&lt;/li&gt; &#xA;   &lt;li&gt;for contribution, it can be addressing issues, reviewing PRs submitted by others, submitting PR to fix bugs or make enhancements, etc&lt;/li&gt; &#xA;   &lt;li&gt;must be active in the past 3 months at the time of application&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To join the core team, please reach out to &lt;a href=&#34;mailto:team@openapitools.org&#34;&gt;team@openapitools.org&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;To become a Template Creator, simply submit a PR for new API client (e.g. Rust, Elixir) or server stub (e.g. Ruby Grape) generator.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents&#34;&gt;6.2 - OpenAPI Generator Technical Committee&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Members of the OpenAPI Generator technical committee shoulder the following responsibilities:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Provides guidance and direction to other users&lt;/li&gt; &#xA; &lt;li&gt;Reviews pull requests and issues&lt;/li&gt; &#xA; &lt;li&gt;Improves the generator by making enhancements, fixing bugs or updating documentations&lt;/li&gt; &#xA; &lt;li&gt;Sets the technical direction of the generator&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Who is eligible? Those who want to join must have at least 3 PRs merged into a generator. (Exceptions can be granted to template creators or contributors who have made a lot of code changes with less than 3 merged PRs)&lt;/p&gt; &#xA;&lt;p&gt;If you want to join the committee, please kindly apply by sending an email to &lt;a href=&#34;mailto:team@openapitools.org&#34;&gt;team@openapitools.org&lt;/a&gt; with your Github ID.&lt;/p&gt; &#xA;&lt;h4&gt;Members of Technical Committee&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Languages/Generators&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Member (join date)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ActionScript&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Ada&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;@stcarrez (2018/02) @michelealbano (2018/02)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Android&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;@jaz-ah (2017/09)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Apex&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Bash&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;@frol (2017/07) @bkryza (2017/08) @kenjones-cisco (2017/09)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;C&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;@zhemant (2018/11) @ityuhui (2019/12) @michelealbano (2020/03)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;C++&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;@ravinikam (2017/07) @stkrwork (2017/07) @etherealjoy (2018/02) @martindelille (2018/03) @muttleyxd (2019/08)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;C#&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;@mandrean (2017/08) @frankyjuang (2019/09) @shibayan (2020/02) @Blackclaws (2021/03) @lucamazzanti (2021/05)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Clojure&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Crystal&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;@cyangle (2021/01)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Dart&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;@jaumard (2018/09) @josh-burton (2019/12) @amondnet (2019/12) @sbu-WBT (2020/12) @kuhnroyal (2020/12) @agilob (2020/12) @ahmednfwela (2021/08)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Eiffel&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;@jvelilla (2017/09)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Elixir&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;@mrmstn (2018/12)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Elm&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;@eriktim (2018/09)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Erlang&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;@tsloughter (2017/11) @jfacorro (2018/10) @robertoaloi (2018/10)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;F#&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;@nmfisher (2019/05)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Go&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;@antihax (2017/11) @grokify (2018/07) @kemokemo (2018/09) @jirikuncar (2021/01) @ph4r5h4d (2021/04)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;GraphQL&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;@renepardon (2018/12)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Groovy&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Haskell&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Java&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;@bbdouglas (2017/07) @sreeshas (2017/08) @jfiala (2017/08) @lukoyanov (2017/09) @cbornet (2017/09) @jeff9finger (2018/01) @karismann (2019/03) @Zomzog (2019/04) @lwlee2608 (2019/10)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Java Spring&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;@cachescrubber (2022/02) @welshm (2022/02) @MelleD (2022/02) @atextor (2022/02) @manedev79 (2022/02) @javisst (2022/02) @borsch (2022/02) @banlevente (2022/02)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JMeter&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;@kannkyo (2021/01)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Kotlin&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;@jimschubert (2017/09) &lt;a href=&#34;https://www.patreon.com/jimschubert&#34;&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/a&gt;, @dr4ke616 (2018/08) @karismann (2019/03) @Zomzog (2019/04) @andrewemery (2019/10) @4brunu (2019/11) @yutaka0m (2020/03)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Lua&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;@daurnimator (2017/08)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Nim&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NodeJS/Javascript&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;@CodeNinjai (2017/07) @frol (2017/07) @cliffano (2017/07)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ObjC&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;OCaml&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;@cgensoul (2019/08)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Perl&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;@wing328 (2017/07) &lt;a href=&#34;https://www.patreon.com/wing328&#34;&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/a&gt; @yue9944882 (2019/06)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;PHP&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;@jebentier (2017/07), @dkarlovi (2017/07), @mandrean (2017/08), @jfastnacht (2017/09), &lt;a href=&#34;https://github.com/ybelenko&#34;&gt;@ybelenko&lt;/a&gt; (2018/07), @renepardon (2018/12)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;PowerShell&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;@wing328 (2020/05)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Python&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;@taxpon (2017/07) @frol (2017/07) @mbohlool (2017/07) @cbornet (2017/09) @kenjones-cisco (2017/11) @tomplus (2018/10) @arun-nalla (2019/11) @spacether (2019/11) &lt;a href=&#34;https://github.com/sponsors/spacether/&#34;&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;R&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;@Ramanth (2019/07) @saigiridhar21 (2019/07)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Ruby&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;@cliffano (2017/07) @zlx (2017/09) @autopp (2019/02)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Rust&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;@frol (2017/07) @farcaller (2017/08) @richardwhiuk (2019/07) @paladinzh (2020/05)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Scala&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;@clasnake (2017/07), @jimschubert (2017/09) &lt;a href=&#34;https://www.patreon.com/jimschubert&#34;&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/a&gt;, @shijinkui (2018/01), @ramzimaalej (2018/03), @chameleon82 (2020/03), @Bouillie (2020/04)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Swift&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;@jgavris (2017/07) @ehyche (2017/08) @Edubits (2017/09) @jaz-ah (2017/09) @4brunu (2019/11)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;TypeScript&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;@TiFu (2017/07) @taxpon (2017/07) @sebastianhaas (2017/07) @kenisteward (2017/07) @Vrolijkx (2017/09) @macjohnny (2018/01) @topce (2018/10) @akehir (2019/07) @petejohansonxo (2019/11) @amakhrov (2020/02) @davidgamero (2022/03) @mkusaka (2022/04)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;span&gt;❤️&lt;/span&gt; = Link to support the contributor directly&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents&#34;&gt;6.3 - History of OpenAPI Generator&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;OpenAPI Generator is a fork of &lt;a href=&#34;https://github.com/swagger-api/swagger-codegen&#34;&gt;Swagger Codegen&lt;/a&gt;. In view of the issues with the Swagger Codegen 3.0.0 (beta) release and the disagreement on the project&#39;s direction, more than 40 top contributors and template creators of Swagger Codegen decided to fork Swagger Codegen and maintain a community-driven version called &#34;OpenAPI Generator&#34;. Please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/docs/qna.md&#34;&gt;Q&amp;amp;A&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h4&gt;Founding Members (alphabetical order):&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ackintosh&#34;&gt;Akihito Nakano&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/galaxie&#34;&gt;Artem Ocheredko&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Articus&#34;&gt;Arthur Mogliev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bkryza&#34;&gt;Bartek Kryza&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bvwells&#34;&gt;Ben Wells&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bjgill&#34;&gt;Benjamin Gill&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cbornet&#34;&gt;Christophe Bornet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cliffano&#34;&gt;Cliffano Subagio&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/d-date&#34;&gt;Daiki Matsudate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Danielku15&#34;&gt;Daniel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emilianobonassi&#34;&gt;Emiliano Bonassi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/eriktim&#34;&gt;Erik Timmers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/macjohnny&#34;&gt;Esteban Gehring&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gustavoapaz&#34;&gt;Gustavo Paz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jvelilla&#34;&gt;Javier Velilla&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JFCote&#34;&gt;Jean-François Côté&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jimschubert&#34;&gt;Jim Schubert&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jonschoning&#34;&gt;Jon Schoning&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jmini&#34;&gt;Jérémie Bresson&lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/jmini&#34;&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jayearn&#34;&gt;Jörn Ahrens&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kenisteward&#34;&gt;Keni Steward&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mstefaniuk&#34;&gt;Marcin Stefaniuk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MartinDelille&#34;&gt;Martin Delille&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/algas&#34;&gt;Masahiro Yamauchi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/michelealbano&#34;&gt;Michele Albano&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ramzimaalej&#34;&gt;Ramzi Maalej&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ravinikam&#34;&gt;Ravindra Nikam&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ricardona&#34;&gt;Ricardo Cardona&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sebastianhaas&#34;&gt;Sebastian Haas&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mandrean&#34;&gt;Sebastian Mandrean&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sreeshas&#34;&gt;Sreenidhi Sreesha&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stkrwork&#34;&gt;Stefan Krismann&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stcarrez&#34;&gt;Stephane Carrez&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/taxpon&#34;&gt;Takuro Wada&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tomplus&#34;&gt;Tomasz Prus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tsloughter&#34;&gt;Tristan Sloughter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/viclovsky&#34;&gt;Victor Orlovsky&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/victorgit&#34;&gt;Victor Trakhtenberg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/frol&#34;&gt;Vlad Frolov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/farcaller&#34;&gt;Vladimir Pouzanov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wing328&#34;&gt;William Cheng&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xmeng1&#34;&gt;Xin Meng&lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/user/overview?u=16435385&#34;&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xhh&#34;&gt;Xu Hui Hui&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/antihax&#34;&gt;antihax&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/beatcracker&#34;&gt;beatcracker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https:/github.com/daurnimator&#34;&gt;daurnimator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/etherealjoy&#34;&gt;etherealjoy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jfiala&#34;&gt;jfiala&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lukoyanov&#34;&gt;lukoyanov&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;span&gt;❤️&lt;/span&gt; = Link to support the contributor directly&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents&#34;&gt;7 - License&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Copyright 2018 OpenAPI-Generator Contributors (&lt;a href=&#34;https://openapi-generator.tech&#34;&gt;https://openapi-generator.tech&lt;/a&gt;) Copyright 2018 SmartBear Software&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;/p&gt; &#xA;&lt;hr&gt;</summary>
  </entry>
</feed>