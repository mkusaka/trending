<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-28T01:53:29Z</updated>
  <subtitle>Weekly Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>brunodev85/winlator</title>
    <updated>2024-01-28T01:53:29Z</updated>
    <id>tag:github.com,2024-01-28:/brunodev85/winlator</id>
    <link href="https://github.com/brunodev85/winlator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Android application for running Windows applications with Wine and Box86/Box64&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/brunodev85/winlator/main/logo.png&#34; width=&#34;376&#34; height=&#34;128&#34; alt=&#34;Winlator Logo&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Winlator&lt;/h1&gt; &#xA;&lt;p&gt;Winlator is an Android application that lets you to run Windows (x86_64) applications with Wine and Box86/Box64.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download and install the APK (Winlator_4.0.apk) from &lt;a href=&#34;https://github.com/brunodev85/winlator/releases&#34;&gt;GitHub Releases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Download the OBB file (main.3.com.winlator.obb) and put it into the directory &lt;code&gt;/storage/emulated/0/Android/obb/com.winlator&lt;/code&gt; (create it if it doesn&#39;t exist) or install from settings&lt;/li&gt; &#xA; &lt;li&gt;Launch the app and wait for the installation process to finish&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=8PKhmT7B3Xo&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/8PKhmT7B3Xo/1.jpg&#34; alt=&#34;Play on Youtube&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=9E4wnKf2OsI&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/9E4wnKf2OsI/2.jpg&#34; alt=&#34;Play on Youtube&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=czEn4uT3Ja8&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/czEn4uT3Ja8/2.jpg&#34; alt=&#34;Play on Youtube&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=eD36nxfT_Z0&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/eD36nxfT_Z0/2.jpg&#34; alt=&#34;Play on Youtube&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Credits and Third-party apps&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ubuntu RootFs (&lt;a href=&#34;https://releases.ubuntu.com/focal&#34;&gt;Focal Fossa&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Wine (&lt;a href=&#34;https://www.winehq.org/&#34;&gt;winehq.org&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Box86/Box64 by &lt;a href=&#34;https://github.com/ptitSeb&#34;&gt;ptitseb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PRoot (&lt;a href=&#34;https://proot-me.github.io&#34;&gt;proot-me.github.io&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Mesa3D (&lt;a href=&#34;https://www.mesa3d.org&#34;&gt;mesa3d.org&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;DXVK (&lt;a href=&#34;https://github.com/doitsujin/dxvk&#34;&gt;github.com/doitsujin/dxvk&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;D8VK (&lt;a href=&#34;https://github.com/AlpyneDreams/d8vk&#34;&gt;github.com/AlpyneDreams/d8vk&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;CNC DDraw (&lt;a href=&#34;https://github.com/FunkyFr3sh/cnc-ddraw&#34;&gt;github.com/FunkyFr3sh/cnc-ddraw&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/alexvorxx&#34;&gt;alexvorxx&lt;/a&gt; for the Mesa mods and build instructions&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kdn251/interviews</title>
    <updated>2024-01-28T01:53:29Z</updated>
    <id>tag:github.com,2024-01-28:/kdn251/interviews</id>
    <link href="https://github.com/kdn251/interviews" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Everything you need to know to get the job.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Interviews&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Your personal guide to Software Engineering technical interviews. Video solutions to the following interview problems with detailed explanations can be found &lt;a href=&#34;https://www.youtube.com/channel/UCKvwPt6BifPP54yzH99ff1g&#34;&gt;here&lt;/a&gt;. &lt;a href=&#34;https://www.youtube.com/channel/UCKvwPt6BifPP54yzH99ff1g&#34; style=&#34;display:block;&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/images/youtube.png?raw=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;Maintainer - &lt;a href=&#34;https://github.com/kdn251&#34;&gt;Kevin Naughton Jr.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Translations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/README-zh-cn.md&#34;&gt;简体中文&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/#youtube&#34;&gt;YouTube&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/#the-daily-byte&#34;&gt;The Daily Byte&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/#instagram&#34;&gt;Instagram&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/#articles&#34;&gt;Articles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/#online-judges&#34;&gt;Online Judges&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/#live-coding-practice&#34;&gt;Live Coding Practice&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/#data-structures&#34;&gt;Data Structures&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/#algorithms&#34;&gt;Algorithms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/#greedy-algorithms&#34;&gt;Greedy Algorithms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/#bitmasks&#34;&gt;Bitmasks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/#runtime-analysis&#34;&gt;Runtime Analysis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/#video-lectures&#34;&gt;Video Lectures&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/#interview-books&#34;&gt;Interview Books&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/#computer-science-news&#34;&gt;Computer Science News&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/#directory-tree&#34;&gt;Directory Tree&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;YouTube&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCKvwPt6BifPP54yzH99ff1g&#34;&gt;Kevin Naughton Jr.&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;The Daily Byte&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bit.ly/2BaaSaK&#34;&gt;FAANG Interview Prep&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Instagram&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bit.ly/2SM8SLZ&#34;&gt;Kevin Naughton Jr.&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Articles&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@Naughton/starting-work-b06e10f6007e&#34;&gt;Starting Work&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Online Judges&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://leetcode.com/&#34;&gt;LeetCode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vjudge.net/&#34;&gt;Virtual Judge&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.careercup.com/&#34;&gt;CareerCup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hackerrank.com/&#34;&gt;HackerRank&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codefights.com/&#34;&gt;CodeFights&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://open.kattis.com/&#34;&gt;Kattis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hackerearth.com&#34;&gt;HackerEarth&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codility.com/programmers/lessons/1-iterations/&#34;&gt;Codility&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://codeforces.com/&#34;&gt;Code Forces&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codechef.com/&#34;&gt;Code Chef&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.spoj.com/&#34;&gt;Sphere Online Judge - SPOJ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.interviewbit.com/&#34;&gt;InterviewBit&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Live Coding Practice&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pramp.com/ref/gt4&#34;&gt;Pramp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.gainlo.co/#!/&#34;&gt;Gainlo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://refdash.com/&#34;&gt;Refdash&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.interviewing.io/&#34;&gt;Interviewing.io&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Data Structures&lt;/h2&gt; &#xA;&lt;h3&gt;Linked List&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;em&gt;Linked List&lt;/em&gt; is a linear collection of data elements, called nodes, each pointing to the next node by means of a pointer. It is a data structure consisting of a group of nodes which together represent a sequence.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Singly-linked list&lt;/strong&gt;: linked list in which each node points to the next node and the last node points to null&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Doubly-linked list&lt;/strong&gt;: linked list in which each node has two pointers, p and n, such that p points to the previous node and n points to the next node; the last node&#39;s n pointer points to null&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Circular-linked list&lt;/strong&gt;: linked list in which each node points to the next node and the last node points back to the first node&lt;/li&gt; &#xA; &lt;li&gt;Time Complexity: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Access: &lt;code&gt;O(n)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Search: &lt;code&gt;O(n)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Insert: &lt;code&gt;O(1)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Remove: &lt;code&gt;O(1)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Stack&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;em&gt;Stack&lt;/em&gt; is a collection of elements, with two principle operations: &lt;em&gt;push&lt;/em&gt;, which adds to the collection, and &lt;em&gt;pop&lt;/em&gt;, which removes the most recently added element&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Last in, first out data structure (LIFO)&lt;/strong&gt;: the most recently added object is the first to be removed&lt;/li&gt; &#xA; &lt;li&gt;Time Complexity: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Access: &lt;code&gt;O(n)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Search: &lt;code&gt;O(n)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Insert: &lt;code&gt;O(1)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Remove: &lt;code&gt;O(1)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Queue&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;em&gt;Queue&lt;/em&gt; is a collection of elements, supporting two principle operations: &lt;em&gt;enqueue&lt;/em&gt;, which inserts an element into the queue, and &lt;em&gt;dequeue&lt;/em&gt;, which removes an element from the queue&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;First in, first out data structure (FIFO)&lt;/strong&gt;: the oldest added object is the first to be removed&lt;/li&gt; &#xA; &lt;li&gt;Time Complexity: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Access: &lt;code&gt;O(n)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Search: &lt;code&gt;O(n)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Insert: &lt;code&gt;O(1)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Remove: &lt;code&gt;O(1)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Tree&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;em&gt;Tree&lt;/em&gt; is an undirected, connected, acyclic graph&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Binary Tree&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;em&gt;Binary Tree&lt;/em&gt; is a tree data structure in which each node has at most two children, which are referred to as the &lt;em&gt;left child&lt;/em&gt; and &lt;em&gt;right child&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Full Tree&lt;/strong&gt;: a tree in which every node has either 0 or 2 children&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Perfect Binary Tree&lt;/strong&gt;: a binary tree in which all interior nodes have two children and all leave have the same depth&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Complete Tree&lt;/strong&gt;: a binary tree in which every level &lt;em&gt;except possibly the last&lt;/em&gt; is full and all nodes in the last level are as far left as possible&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Binary Search Tree&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A binary search tree, sometimes called BST, is a type of binary tree which maintains the property that the value in each node must be greater than or equal to any value stored in the left sub-tree, and less than or equal to any value stored in the right sub-tree&lt;/li&gt; &#xA; &lt;li&gt;Time Complexity: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Access: &lt;code&gt;O(log(n))&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Search: &lt;code&gt;O(log(n))&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Insert: &lt;code&gt;O(log(n))&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Remove: &lt;code&gt;O(log(n))&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/images/BST.png?raw=true&#34; alt=&#34;Binary Search Tree&#34; width=&#34;400&#34; height=&#34;500&#34;&gt; &#xA;&lt;h3&gt;Trie&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A trie, sometimes called a radix or prefix tree, is a kind of search tree that is used to store a dynamic set or associative array where the keys are usually Strings. No node in the tree stores the key associated with that node; instead, its position in the tree defines the key with which it is associated. All the descendants of a node have a common prefix of the String associated with that node, and the root is associated with the empty String.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/images/trie.png?raw=true&#34; alt=&#34;Alt text&#34; title=&#34;Trie&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Fenwick Tree&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A Fenwick tree, sometimes called a binary indexed tree, is a tree in concept, but in practice is implemented as an implicit data structure using an array. Given an index in the array representing a vertex, the index of a vertex&#39;s parent or child is calculated through bitwise operations on the binary representation of its index. Each element of the array contains the pre-calculated sum of a range of values, and by combining that sum with additional ranges encountered during an upward traversal to the root, the prefix sum is calculated&lt;/li&gt; &#xA; &lt;li&gt;Time Complexity: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Range Sum: &lt;code&gt;O(log(n))&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Update: &lt;code&gt;O(log(n))&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/images/fenwickTree.png?raw=true&#34; alt=&#34;Alt text&#34; title=&#34;Fenwick Tree&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Segment Tree&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A Segment tree, is a tree data structure for storing intervals, or segments. It allows querying which of the stored segments contain a given point&lt;/li&gt; &#xA; &lt;li&gt;Time Complexity: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Range Query: &lt;code&gt;O(log(n))&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Update: &lt;code&gt;O(log(n))&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/images/segmentTree.png?raw=true&#34; alt=&#34;Alt text&#34; title=&#34;Segment Tree&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Heap&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;em&gt;Heap&lt;/em&gt; is a specialized tree based structure data structure that satisfies the &lt;em&gt;heap&lt;/em&gt; property: if A is a parent node of B, then the key (the value) of node A is ordered with respect to the key of node B with the same ordering applying across the entire heap. A heap can be classified further as either a &#34;max heap&#34; or a &#34;min heap&#34;. In a max heap, the keys of parent nodes are always greater than or equal to those of the children and the highest key is in the root node. In a min heap, the keys of parent nodes are less than or equal to those of the children and the lowest key is in the root node&lt;/li&gt; &#xA; &lt;li&gt;Time Complexity: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Access Max / Min: &lt;code&gt;O(1)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Insert: &lt;code&gt;O(log(n))&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Remove Max / Min: &lt;code&gt;O(log(n))&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/images/heap.png?raw=true&#34; alt=&#34;Max Heap&#34; width=&#34;400&#34; height=&#34;500&#34;&gt; &#xA;&lt;h3&gt;Hashing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Hashing&lt;/em&gt; is used to map data of an arbitrary size to data of a fixed size. The values returned by a hash function are called hash values, hash codes, or simply hashes. If two keys map to the same value, a collision occurs&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hash Map&lt;/strong&gt;: a &lt;em&gt;hash map&lt;/em&gt; is a structure that can map keys to values. A hash map uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found.&lt;/li&gt; &#xA; &lt;li&gt;Collision Resolution&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Separate Chaining&lt;/strong&gt;: in &lt;em&gt;separate chaining&lt;/em&gt;, each bucket is independent, and contains a list of entries for each index. The time for hash map operations is the time to find the bucket (constant time), plus the time to iterate through the list&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Open Addressing&lt;/strong&gt;: in &lt;em&gt;open addressing&lt;/em&gt;, when a new entry is inserted, the buckets are examined, starting with the hashed-to-slot and proceeding in some sequence, until an unoccupied slot is found. The name open addressing refers to the fact that the location of an item is not always determined by its hash value&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/images/hash.png?raw=true&#34; alt=&#34;Alt text&#34; title=&#34;Hashing&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Graph&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;em&gt;Graph&lt;/em&gt; is an ordered pair of G = (V, E) comprising a set V of vertices or nodes together with a set E of edges or arcs, which are 2-element subsets of V (i.e. an edge is associated with two vertices, and that association takes the form of the unordered pair comprising those two vertices)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Undirected Graph&lt;/strong&gt;: a graph in which the adjacency relation is symmetric. So if there exists an edge from node u to node v (u -&amp;gt; v), then it is also the case that there exists an edge from node v to node u (v -&amp;gt; u)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Directed Graph&lt;/strong&gt;: a graph in which the adjacency relation is not symmetric. So if there exists an edge from node u to node v (u -&amp;gt; v), this does &lt;em&gt;not&lt;/em&gt; imply that there exists an edge from node v to node u (v -&amp;gt; u)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/images/graph.png?raw=true&#34; alt=&#34;Graph&#34; width=&#34;400&#34; height=&#34;500&#34;&gt; &#xA;&lt;h2&gt;Algorithms&lt;/h2&gt; &#xA;&lt;h3&gt;Sorting&lt;/h3&gt; &#xA;&lt;h4&gt;Quicksort&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Stable: &lt;code&gt;No&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Time Complexity: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Best Case: &lt;code&gt;O(nlog(n))&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Worst Case: &lt;code&gt;O(n^2)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Average Case: &lt;code&gt;O(nlog(n))&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/images/quicksort.gif?raw=true&#34; alt=&#34;Alt text&#34; title=&#34;Quicksort&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Mergesort&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Mergesort&lt;/em&gt; is also a divide and conquer algorithm. It continuously divides an array into two halves, recurses on both the left subarray and right subarray and then merges the two sorted halves&lt;/li&gt; &#xA; &lt;li&gt;Stable: &lt;code&gt;Yes&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Time Complexity: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Best Case: &lt;code&gt;O(nlog(n))&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Worst Case: &lt;code&gt;O(nlog(n))&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Average Case: &lt;code&gt;O(nlog(n))&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/images/mergesort.gif?raw=true&#34; alt=&#34;Alt text&#34; title=&#34;Mergesort&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Bucket Sort&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Bucket Sort&lt;/em&gt; is a sorting algorithm that works by distributing the elements of an array into a number of buckets. Each bucket is then sorted individually, either using a different sorting algorithm, or by recursively applying the bucket sorting algorithm&lt;/li&gt; &#xA; &lt;li&gt;Time Complexity: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Best Case: &lt;code&gt;Ω(n + k)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Worst Case: &lt;code&gt;O(n^2)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Average Case:&lt;code&gt;Θ(n + k)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/images/bucketsort.png?raw=true&#34; alt=&#34;Alt text&#34; title=&#34;Bucket Sort&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Radix Sort&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Radix Sort&lt;/em&gt; is a sorting algorithm that like bucket sort, distributes elements of an array into a number of buckets. However, radix sort differs from bucket sort by &#39;re-bucketing&#39; the array after the initial pass as opposed to sorting each bucket and merging&lt;/li&gt; &#xA; &lt;li&gt;Time Complexity: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Best Case: &lt;code&gt;Ω(nk)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Worst Case: &lt;code&gt;O(nk)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Average Case: &lt;code&gt;Θ(nk)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Graph Algorithms&lt;/h3&gt; &#xA;&lt;h4&gt;Depth First Search&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Depth First Search&lt;/em&gt; is a graph traversal algorithm which explores as far as possible along each branch before backtracking&lt;/li&gt; &#xA; &lt;li&gt;Time Complexity: &lt;code&gt;O(|V| + |E|)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/images/dfsbfs.gif?raw=true&#34; alt=&#34;Alt text&#34; title=&#34;DFS / BFS Traversal&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Breadth First Search&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Breadth First Search&lt;/em&gt; is a graph traversal algorithm which explores the neighbor nodes first, before moving to the next level neighbors&lt;/li&gt; &#xA; &lt;li&gt;Time Complexity: &lt;code&gt;O(|V| + |E|)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/images/dfsbfs.gif?raw=true&#34; alt=&#34;Alt text&#34; title=&#34;DFS / BFS Traversal&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Topological Sort&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Topological Sort&lt;/em&gt; is the linear ordering of a directed graph&#39;s nodes such that for every edge from node u to node v, u comes before v in the ordering&lt;/li&gt; &#xA; &lt;li&gt;Time Complexity: &lt;code&gt;O(|V| + |E|)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Dijkstra&#39;s Algorithm&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Dijkstra&#39;s Algorithm&lt;/em&gt; is an algorithm for finding the shortest path between nodes in a graph&lt;/li&gt; &#xA; &lt;li&gt;Time Complexity: &lt;code&gt;O(|V|^2)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/images/dijkstra.gif?raw=true&#34; alt=&#34;Alt text&#34; title=&#34;Dijkstra&#39;s&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Bellman-Ford Algorithm&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Bellman-Ford Algorithm&lt;/em&gt; is an algorithm that computes the shortest paths from a single source node to all other nodes in a weighted graph&lt;/li&gt; &#xA; &lt;li&gt;Although it is slower than Dijkstra&#39;s, it is more versatile, as it is capable of handling graphs in which some of the edge weights are negative numbers&lt;/li&gt; &#xA; &lt;li&gt;Time Complexity: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Best Case: &lt;code&gt;O(|E|)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Worst Case: &lt;code&gt;O(|V||E|)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/images/bellman-ford.gif?raw=true&#34; alt=&#34;Alt text&#34; title=&#34;Bellman-Ford&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Floyd-Warshall Algorithm&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Floyd-Warshall Algorithm&lt;/em&gt; is an algorithm for finding the shortest paths in a weighted graph with positive or negative edge weights, but no negative cycles&lt;/li&gt; &#xA; &lt;li&gt;A single execution of the algorithm will find the lengths (summed weights) of the shortest paths between &lt;em&gt;all&lt;/em&gt; pairs of nodes&lt;/li&gt; &#xA; &lt;li&gt;Time Complexity: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Best Case: &lt;code&gt;O(|V|^3)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Worst Case: &lt;code&gt;O(|V|^3)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Average Case: &lt;code&gt;O(|V|^3)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Prim&#39;s Algorithm&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Prim&#39;s Algorithm&lt;/em&gt; is a greedy algorithm that finds a minimum spanning tree for a weighted undirected graph. In other words, Prim&#39;s find a subset of edges that forms a tree that includes every node in the graph&lt;/li&gt; &#xA; &lt;li&gt;Time Complexity: &lt;code&gt;O(|V|^2)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/images/prim.gif?raw=true&#34; alt=&#34;Alt text&#34; title=&#34;Prim&#39;s Algorithm&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Kruskal&#39;s Algorithm&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Kruskal&#39;s Algorithm&lt;/em&gt; is also a greedy algorithm that finds a minimum spanning tree in a graph. However, in Kruskal&#39;s, the graph does not have to be connected&lt;/li&gt; &#xA; &lt;li&gt;Time Complexity: &lt;code&gt;O(|E|log|V|)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/images/kruskal.gif?raw=true&#34; alt=&#34;Alt text&#34; title=&#34;Kruskal&#39;s Algorithm&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Greedy Algorithms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Greedy Algorithms&lt;/em&gt; are algorithms that make locally optimal choices at each step in the hope of eventually reaching the globally optimal solution&lt;/li&gt; &#xA; &lt;li&gt;Problems must exhibit two properties in order to implement a Greedy solution:&lt;/li&gt; &#xA; &lt;li&gt;Optimal Substructure &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;An optimal solution to the problem contains optimal solutions to the given problem&#39;s subproblems&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;The Greedy Property &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;An optimal solution is reached by &#34;greedily&#34; choosing the locally optimal choice without ever reconsidering previous choices&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Example - Coin Change &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Given a target amount V cents and a list of denominations of n coins, i.e. we have coinValue[i] (in cents) for coin types i from [0...n - 1], what is the minimum number of coins that we must use to represent amount V? Assume that we have an unlimited supply of coins of any type&lt;/li&gt; &#xA;   &lt;li&gt;Coins - Penny (1 cent), Nickel (5 cents), Dime (10 cents), Quarter (25 cents)&lt;/li&gt; &#xA;   &lt;li&gt;Assume V = 41. We can use the Greedy algorithm of continuously selecting the largest coin denomination less than or equal to V, subtract that coin&#39;s value from V, and repeat.&lt;/li&gt; &#xA;   &lt;li&gt;V = 41 | 0 coins used&lt;/li&gt; &#xA;   &lt;li&gt;V = 16 | 1 coin used (41 - 25 = 16)&lt;/li&gt; &#xA;   &lt;li&gt;V = 6 | 2 coins used (16 - 10 = 6)&lt;/li&gt; &#xA;   &lt;li&gt;V = 1 | 3 coins used (6 - 5 = 1)&lt;/li&gt; &#xA;   &lt;li&gt;V = 0 | 4 coins used (1 - 1 = 0)&lt;/li&gt; &#xA;   &lt;li&gt;Using this algorithm, we arrive at a total of 4 coins which is optimal&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Bitmasks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bitmasking is a technique used to perform operations at the bit level. Leveraging bitmasks often leads to faster runtime complexity and helps limit memory usage&lt;/li&gt; &#xA; &lt;li&gt;Test kth bit: &lt;code&gt;s &amp;amp; (1 &amp;lt;&amp;lt; k);&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Set kth bit: &lt;code&gt;s |= (1 &amp;lt;&amp;lt; k);&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Turn off kth bit: &lt;code&gt;s &amp;amp;= ~(1 &amp;lt;&amp;lt; k);&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Toggle kth bit: &lt;code&gt;s ^= (1 &amp;lt;&amp;lt; k);&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Multiple by 2&lt;sup&gt;n&lt;/sup&gt;: &lt;code&gt;s &amp;lt;&amp;lt; n;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Divide by 2&lt;sup&gt;n&lt;/sup&gt;: &lt;code&gt;s &amp;gt;&amp;gt; n;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Intersection: &lt;code&gt;s &amp;amp; t;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Union: &lt;code&gt;s | t;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Set Subtraction: &lt;code&gt;s &amp;amp; ~t;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Extract lowest set bit: &lt;code&gt;s &amp;amp; (-s);&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Extract lowest unset bit: &lt;code&gt;~s &amp;amp; (s + 1);&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Swap Values: &lt;code&gt;x ^= y; y ^= x; x ^= y;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Runtime Analysis&lt;/h2&gt; &#xA;&lt;h4&gt;Big O Notation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Big O Notation&lt;/em&gt; is used to describe the upper bound of a particular algorithm. Big O is used to describe worst case scenarios&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/images/bigO.png?raw=true&#34; alt=&#34;Alt text&#34; title=&#34;Theta Notation&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Little O Notation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Little O Notation&lt;/em&gt; is also used to describe an upper bound of a particular algorithm; however, Little O provides a bound that is not asymptotically tight&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Big Ω Omega Notation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Big Omega Notation&lt;/em&gt; is used to provide an asymptotic lower bound on a particular algorithm&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/images/bigOmega.png?raw=true&#34; alt=&#34;Alt text&#34; title=&#34;Theta Notation&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Little ω Omega Notation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Little Omega Notation&lt;/em&gt; is used to provide a lower bound on a particular algorithm that is not asymptotically tight&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Theta Θ Notation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Theta Notation&lt;/em&gt; is used to provide a bound on a particular algorithm such that it can be &#34;sandwiched&#34; between two constants (one for an upper limit and one for a lower limit) for sufficiently large values&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/images/theta.png?raw=true&#34; alt=&#34;Alt text&#34; title=&#34;Theta Notation&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Video Lectures&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Data Structures &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://archive.org/details/ucberkeley-webcast?&amp;amp;and%5B%5D=subject%3A%22Computer%20Science%22&amp;amp;and%5B%5D=subject%3A%22CS%22&#34;&gt;UC Berkeley Data Structures&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=T0yzrZL1py0&amp;amp;list=PLUl4u3cNGP61hsJNdULdudlRL493b-XZf&amp;amp;index=1&#34;&gt;MIT Advanced Data Structures&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Algorithms &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=HtSuA80QTyo&amp;amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&amp;amp;index=1&#34;&gt;MIT Introduction to Algorithms&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PL6ogFv-ieghdoGKGg2Bik3Gl1glBTEu8c&#34;&gt;MIT Advanced Algorithms&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://archive.org/details/ucberkeley-webcast?&amp;amp;and%5B%5D=subject%3A%22Computer%20Science%22&amp;amp;and%5B%5D=subject%3A%22CS%22&#34;&gt;UC Berkeley Algorithms&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Interview Books&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Competitive-Programming-3rd-Steven-Halim/dp/B00FG8MNN8&#34;&gt;Competitive Programming 3 - Steven Halim &amp;amp; Felix Halim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/0984782850/ref=sr_1_1?s=books&amp;amp;ie=UTF8&#34;&gt;Cracking The Coding Interview - Gayle Laakmann McDowell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Cracking-PM-Interview-Product-Technology-ebook/dp/B00ISYMUR6/ref=sr_1_1?s=books&amp;amp;ie=UTF8&#34;&gt;Cracking The PM Interview - Gayle Laakmann McDowell &amp;amp; Jackie Bavaro&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Introduction-Algorithms-3rd-MIT-Press/dp/0262033844/ref=sr_1_1?ie=UTF8&amp;amp;qid=1490295989&amp;amp;sr=8-1&amp;amp;keywords=Introduction+to+Algorithms&#34;&gt;Introduction to Algorithms - Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest &amp;amp; Clifford Stein&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Computer Science News&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://news.ycombinator.com/&#34;&gt;Hacker News&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lobste.rs/&#34;&gt;Lobsters&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Directory Tree&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;.&#xA;├── Array&#xA;│&amp;nbsp;&amp;nbsp; ├── bestTimeToBuyAndSellStock.java&#xA;│&amp;nbsp;&amp;nbsp; ├── findTheCelebrity.java&#xA;│&amp;nbsp;&amp;nbsp; ├── gameOfLife.java&#xA;│&amp;nbsp;&amp;nbsp; ├── increasingTripletSubsequence.java&#xA;│&amp;nbsp;&amp;nbsp; ├── insertInterval.java&#xA;│&amp;nbsp;&amp;nbsp; ├── longestConsecutiveSequence.java&#xA;│&amp;nbsp;&amp;nbsp; ├── maximumProductSubarray.java&#xA;│&amp;nbsp;&amp;nbsp; ├── maximumSubarray.java&#xA;│&amp;nbsp;&amp;nbsp; ├── mergeIntervals.java&#xA;│&amp;nbsp;&amp;nbsp; ├── missingRanges.java&#xA;│&amp;nbsp;&amp;nbsp; ├── productOfArrayExceptSelf.java&#xA;│&amp;nbsp;&amp;nbsp; ├── rotateImage.java&#xA;│&amp;nbsp;&amp;nbsp; ├── searchInRotatedSortedArray.java&#xA;│&amp;nbsp;&amp;nbsp; ├── spiralMatrixII.java&#xA;│&amp;nbsp;&amp;nbsp; ├── subsetsII.java&#xA;│&amp;nbsp;&amp;nbsp; ├── subsets.java&#xA;│&amp;nbsp;&amp;nbsp; ├── summaryRanges.java&#xA;│&amp;nbsp;&amp;nbsp; ├── wiggleSort.java&#xA;│&amp;nbsp;&amp;nbsp; └── wordSearch.java&#xA;├── Backtracking&#xA;│&amp;nbsp;&amp;nbsp; ├── androidUnlockPatterns.java&#xA;│&amp;nbsp;&amp;nbsp; ├── generalizedAbbreviation.java&#xA;│&amp;nbsp;&amp;nbsp; └── letterCombinationsOfAPhoneNumber.java&#xA;├── BinarySearch&#xA;│&amp;nbsp;&amp;nbsp; ├── closestBinarySearchTreeValue.java&#xA;│&amp;nbsp;&amp;nbsp; ├── firstBadVersion.java&#xA;│&amp;nbsp;&amp;nbsp; ├── guessNumberHigherOrLower.java&#xA;│&amp;nbsp;&amp;nbsp; ├── pow(x,n).java&#xA;│&amp;nbsp;&amp;nbsp; └── sqrt(x).java&#xA;├── BitManipulation&#xA;│&amp;nbsp;&amp;nbsp; ├── binaryWatch.java&#xA;│&amp;nbsp;&amp;nbsp; ├── countingBits.java&#xA;│&amp;nbsp;&amp;nbsp; ├── hammingDistance.java&#xA;│&amp;nbsp;&amp;nbsp; ├── maximumProductOfWordLengths.java&#xA;│&amp;nbsp;&amp;nbsp; ├── numberOf1Bits.java&#xA;│&amp;nbsp;&amp;nbsp; ├── sumOfTwoIntegers.java&#xA;│&amp;nbsp;&amp;nbsp; └── utf-8Validation.java&#xA;├── BreadthFirstSearch&#xA;│&amp;nbsp;&amp;nbsp; ├── binaryTreeLevelOrderTraversal.java&#xA;│&amp;nbsp;&amp;nbsp; ├── cloneGraph.java&#xA;│&amp;nbsp;&amp;nbsp; ├── pacificAtlanticWaterFlow.java&#xA;│&amp;nbsp;&amp;nbsp; ├── removeInvalidParentheses.java&#xA;│&amp;nbsp;&amp;nbsp; ├── shortestDistanceFromAllBuildings.java&#xA;│&amp;nbsp;&amp;nbsp; ├── symmetricTree.java&#xA;│&amp;nbsp;&amp;nbsp; └── wallsAndGates.java&#xA;├── DepthFirstSearch&#xA;│&amp;nbsp;&amp;nbsp; ├── balancedBinaryTree.java&#xA;│&amp;nbsp;&amp;nbsp; ├── battleshipsInABoard.java&#xA;│&amp;nbsp;&amp;nbsp; ├── convertSortedArrayToBinarySearchTree.java&#xA;│&amp;nbsp;&amp;nbsp; ├── maximumDepthOfABinaryTree.java&#xA;│&amp;nbsp;&amp;nbsp; ├── numberOfIslands.java&#xA;│&amp;nbsp;&amp;nbsp; ├── populatingNextRightPointersInEachNode.java&#xA;│&amp;nbsp;&amp;nbsp; └── sameTree.java&#xA;├── Design&#xA;│&amp;nbsp;&amp;nbsp; └── zigzagIterator.java&#xA;├── DivideAndConquer&#xA;│&amp;nbsp;&amp;nbsp; ├── expressionAddOperators.java&#xA;│&amp;nbsp;&amp;nbsp; └── kthLargestElementInAnArray.java&#xA;├── DynamicProgramming&#xA;│&amp;nbsp;&amp;nbsp; ├── bombEnemy.java&#xA;│&amp;nbsp;&amp;nbsp; ├── climbingStairs.java&#xA;│&amp;nbsp;&amp;nbsp; ├── combinationSumIV.java&#xA;│&amp;nbsp;&amp;nbsp; ├── countingBits.java&#xA;│&amp;nbsp;&amp;nbsp; ├── editDistance.java&#xA;│&amp;nbsp;&amp;nbsp; ├── houseRobber.java&#xA;│&amp;nbsp;&amp;nbsp; ├── paintFence.java&#xA;│&amp;nbsp;&amp;nbsp; ├── paintHouseII.java&#xA;│&amp;nbsp;&amp;nbsp; ├── regularExpressionMatching.java&#xA;│&amp;nbsp;&amp;nbsp; ├── sentenceScreenFitting.java&#xA;│&amp;nbsp;&amp;nbsp; ├── uniqueBinarySearchTrees.java&#xA;│&amp;nbsp;&amp;nbsp; └── wordBreak.java&#xA;├── HashTable&#xA;│&amp;nbsp;&amp;nbsp; ├── binaryTreeVerticalOrderTraversal.java&#xA;│&amp;nbsp;&amp;nbsp; ├── findTheDifference.java&#xA;│&amp;nbsp;&amp;nbsp; ├── groupAnagrams.java&#xA;│&amp;nbsp;&amp;nbsp; ├── groupShiftedStrings.java&#xA;│&amp;nbsp;&amp;nbsp; ├── islandPerimeter.java&#xA;│&amp;nbsp;&amp;nbsp; ├── loggerRateLimiter.java&#xA;│&amp;nbsp;&amp;nbsp; ├── maximumSizeSubarraySumEqualsK.java&#xA;│&amp;nbsp;&amp;nbsp; ├── minimumWindowSubstring.java&#xA;│&amp;nbsp;&amp;nbsp; ├── sparseMatrixMultiplication.java&#xA;│&amp;nbsp;&amp;nbsp; ├── strobogrammaticNumber.java&#xA;│&amp;nbsp;&amp;nbsp; ├── twoSum.java&#xA;│&amp;nbsp;&amp;nbsp; └── uniqueWordAbbreviation.java&#xA;├── LinkedList&#xA;│&amp;nbsp;&amp;nbsp; ├── addTwoNumbers.java&#xA;│&amp;nbsp;&amp;nbsp; ├── deleteNodeInALinkedList.java&#xA;│&amp;nbsp;&amp;nbsp; ├── mergeKSortedLists.java&#xA;│&amp;nbsp;&amp;nbsp; ├── palindromeLinkedList.java&#xA;│&amp;nbsp;&amp;nbsp; ├── plusOneLinkedList.java&#xA;│&amp;nbsp;&amp;nbsp; ├── README.md&#xA;│&amp;nbsp;&amp;nbsp; └── reverseLinkedList.java&#xA;├── Queue&#xA;│&amp;nbsp;&amp;nbsp; └── movingAverageFromDataStream.java&#xA;├── README.md&#xA;├── Sort&#xA;│&amp;nbsp;&amp;nbsp; ├── meetingRoomsII.java&#xA;│&amp;nbsp;&amp;nbsp; └── meetingRooms.java&#xA;├── Stack&#xA;│&amp;nbsp;&amp;nbsp; ├── binarySearchTreeIterator.java&#xA;│&amp;nbsp;&amp;nbsp; ├── decodeString.java&#xA;│&amp;nbsp;&amp;nbsp; ├── flattenNestedListIterator.java&#xA;│&amp;nbsp;&amp;nbsp; └── trappingRainWater.java&#xA;├── String&#xA;│&amp;nbsp;&amp;nbsp; ├── addBinary.java&#xA;│&amp;nbsp;&amp;nbsp; ├── countAndSay.java&#xA;│&amp;nbsp;&amp;nbsp; ├── decodeWays.java&#xA;│&amp;nbsp;&amp;nbsp; ├── editDistance.java&#xA;│&amp;nbsp;&amp;nbsp; ├── integerToEnglishWords.java&#xA;│&amp;nbsp;&amp;nbsp; ├── longestPalindrome.java&#xA;│&amp;nbsp;&amp;nbsp; ├── longestSubstringWithAtMostKDistinctCharacters.java&#xA;│&amp;nbsp;&amp;nbsp; ├── minimumWindowSubstring.java&#xA;│&amp;nbsp;&amp;nbsp; ├── multiplyString.java&#xA;│&amp;nbsp;&amp;nbsp; ├── oneEditDistance.java&#xA;│&amp;nbsp;&amp;nbsp; ├── palindromePermutation.java&#xA;│&amp;nbsp;&amp;nbsp; ├── README.md&#xA;│&amp;nbsp;&amp;nbsp; ├── reverseVowelsOfAString.java&#xA;│&amp;nbsp;&amp;nbsp; ├── romanToInteger.java&#xA;│&amp;nbsp;&amp;nbsp; ├── validPalindrome.java&#xA;│&amp;nbsp;&amp;nbsp; └── validParentheses.java&#xA;├── Tree&#xA;│&amp;nbsp;&amp;nbsp; ├── binaryTreeMaximumPathSum.java&#xA;│&amp;nbsp;&amp;nbsp; ├── binaryTreePaths.java&#xA;│&amp;nbsp;&amp;nbsp; ├── inorderSuccessorInBST.java&#xA;│&amp;nbsp;&amp;nbsp; ├── invertBinaryTree.java&#xA;│&amp;nbsp;&amp;nbsp; ├── lowestCommonAncestorOfABinaryTree.java&#xA;│&amp;nbsp;&amp;nbsp; ├── sumOfLeftLeaves.java&#xA;│&amp;nbsp;&amp;nbsp; └── validateBinarySearchTree.java&#xA;├── Trie&#xA;│&amp;nbsp;&amp;nbsp; ├── addAndSearchWordDataStructureDesign.java&#xA;│&amp;nbsp;&amp;nbsp; ├── implementTrie.java&#xA;│&amp;nbsp;&amp;nbsp; └── wordSquares.java&#xA;└── TwoPointers&#xA;    ├── 3Sum.java&#xA;    ├── 3SumSmaller.java&#xA;    ├── mergeSortedArray.java&#xA;    ├── minimumSizeSubarraySum.java&#xA;    ├── moveZeros.java&#xA;    ├── removeDuplicatesFromSortedArray.java&#xA;    ├── reverseString.java&#xA;    └── sortColors.java&#xA;&#xA;18 directories, 124 files&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>WuKongOpenSource/WukongCRM-11.0-JAVA</title>
    <updated>2024-01-28T01:53:29Z</updated>
    <id>tag:github.com,2024-01-28:/WuKongOpenSource/WukongCRM-11.0-JAVA</id>
    <link href="https://github.com/WuKongOpenSource/WukongCRM-11.0-JAVA" rel="alternate"></link>
    <summary type="html">&lt;p&gt;悟空CRM-基于Spring Cloud Alibaba微服务架构 +vue ElementUI的前后端分离CRM系统&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;悟空CRM-11.0&lt;/h1&gt; &#xA;&lt;h2&gt;悟空CRM介绍&lt;/h2&gt; &#xA;&lt;p&gt;悟空CRM在中国的开源管理软件行业有较高的知名度。目前软件已达到千万级的用户量，开源系统下载量达到200多万次，已覆盖设计制造业、服务业、金融业、政府机构等多种行业。与阿里巴巴、腾讯、OPPO、航天信息、CCTV等多家知名企业达成战略合作。&lt;/p&gt; &#xA;&lt;p&gt;公司先后获得河南省高新技术企业、国家3A信用企业、IOS9001、IOS27001软件产品认证等20多项荣誉奖项。拥有50余项软件著作权。 获得20余家国内媒体报道。公司自成立以来，以高科技为起点，以技术为核心、 以完善的售后服务为后盾，秉承稳固与发展、求实与创新的精神，已为国内外上万家企业提供了服务。 在为实现企业价值最大化的过程中， 实现了自身的价值的提升，取得了最大程度的双赢合作，并获得了社会各界的广泛赞誉和认同。&lt;/p&gt; &#xA;&lt;p&gt;官网地址：&lt;a href=&#34;http://www.5kcrm.com/&#34;&gt;http://www.5kcrm.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;演示地址：(&lt;a href=&#34;https://demo10.72crm.com/#/crm&#34;&gt;https://demo10.72crm.com/#/crm&lt;/a&gt;)&lt;br&gt; 帐号：18688888888 密码：123456a&lt;/p&gt; &#xA;&lt;p&gt;码云地址：&lt;a href=&#34;https://gitee.com/wukongcrm&#34;&gt;https://gitee.com/wukongcrm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;QQ群交流群群：&lt;a href=&#34;http:////shang.qq.com/wpa/qunwpa?idkey=13d5e5809eb9feb350336e55c8b7a00b9cb472078b09b4441222a52dd76b278e&#34;&gt;1026560336&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;扫码添加小悟官方客服微信，邀您加入千人微信交流群：&lt;/p&gt; &#xA;&lt;img src=&#34;https://images.gitee.com/uploads/images/2019/1231/115927_f9c580c8_345098.png&#34; width=&#34;200&#34;&gt; &#xA;&lt;p&gt;关注悟空CRM公众号，了解更多悟空资讯&lt;/p&gt; &#xA;&lt;img src=&#34;https://images.gitee.com/uploads/images/2019/1202/135713_d3566c6a_345098.jpeg&#34; width=&#34;200&#34;&gt; &#xA;&lt;p&gt;&lt;span&gt;💥&lt;/span&gt; &lt;span&gt;💥&lt;/span&gt; &lt;span&gt;💥&lt;/span&gt; 注：悟空CRM采用全新的前后端分离模式，本仓库代码中已集成前端vue打包后文件， &lt;strong&gt;可免去打包操作，无需运行前端&lt;/strong&gt; 。如需调整前端代码，请单独下载前端代码&lt;/p&gt; &#xA;&lt;p&gt;(&lt;a href=&#34;https://github.com/72wukong/72crm-11.0-web-JAVA&#34; target=&#34;_blank&#34;&gt;点击下载前端代码&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;悟空CRM目录结构&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;wk_crm&#xA;├── admin         -- 系统管理模块和用户管理模块&#xA;├── authorization -- 鉴权模块，目前仅用于登录鉴权，后期可能有更改&#xA;├── bi            -- 商业智能模块&#xA;├── core          -- 通用的代码和工具类&#xA;├── crm           -- 客户管理模块&#xA;├── examine       -- 审批模块&#xA;├── gateway       -- 网关模块&#xA;├── job           -- 定时任务模块&#xA;├── oa            -- OA模块&#xA;└── work          -- 项目管理模块&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;悟空CRM使用的主要技术栈&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;名称&lt;/th&gt; &#xA;   &lt;th&gt;版本&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;spring-cloud-alibaba&lt;/td&gt; &#xA;   &lt;td&gt;2.2.1.RELEASE(Hoxton.SR3)&lt;/td&gt; &#xA;   &lt;td&gt;核心框架&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;swagger&lt;/td&gt; &#xA;   &lt;td&gt;2.9.2&lt;/td&gt; &#xA;   &lt;td&gt;接口文档&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mybatis-plus&lt;/td&gt; &#xA;   &lt;td&gt;3.3.0&lt;/td&gt; &#xA;   &lt;td&gt;ORM框架&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sentinel&lt;/td&gt; &#xA;   &lt;td&gt;2.2.1.RELEASE&lt;/td&gt; &#xA;   &lt;td&gt;断路器以及限流&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nacos&lt;/td&gt; &#xA;   &lt;td&gt;1.2.1.RELEASE&lt;/td&gt; &#xA;   &lt;td&gt;注册中心以及分布式配置管理&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;seata&lt;/td&gt; &#xA;   &lt;td&gt;1.2.0&lt;/td&gt; &#xA;   &lt;td&gt;分布式事务&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;elasticsearch&lt;/td&gt; &#xA;   &lt;td&gt;2.2.5.RELEASE(6.8.6)&lt;/td&gt; &#xA;   &lt;td&gt;搜索引擎中间件&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;jetcache&lt;/td&gt; &#xA;   &lt;td&gt;2.6.0&lt;/td&gt; &#xA;   &lt;td&gt;分布式缓存框架&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;xxl-job&lt;/td&gt; &#xA;   &lt;td&gt;2.1.2&lt;/td&gt; &#xA;   &lt;td&gt;分布式定时任务框架&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gateway&lt;/td&gt; &#xA;   &lt;td&gt;2.2.2.RELEASE&lt;/td&gt; &#xA;   &lt;td&gt;微服务网关&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;feign&lt;/td&gt; &#xA;   &lt;td&gt;2.2.2.RELEASE&lt;/td&gt; &#xA;   &lt;td&gt;服务调用&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;悟空CRM项目架构图&lt;/h2&gt; &#xA;&lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0910/094237_e7cb3bca_1096736.jpeg&#34; width=&#34;650&#34;&gt; &#xA;&lt;h2&gt;使用说明&lt;/h2&gt; &#xA;&lt;h3&gt;一、前置环境&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Jdk1.8&lt;/li&gt; &#xA; &lt;li&gt;Maven3.5.0+&lt;/li&gt; &#xA; &lt;li&gt;Mysql5.7.20 （&lt;a href=&#34;https://github.com/72wukong/72crm-11.0-Spring/wiki/mysql配置说明&#34; target=&#34;_blank&#34;&gt;数据库安装注意事项&lt;/a&gt;）&lt;/li&gt; &#xA; &lt;li&gt;Redis(版本不限)&lt;/li&gt; &#xA; &lt;li&gt;Elasticsearch 6.8.6 （&lt;a href=&#34;https://github.com/72wukong/72crm-11.0-Spring/wiki/elasticsearch配置说明&#34; target=&#34;_blank&#34;&gt;环境配置注意事项&lt;/a&gt;）&lt;/li&gt; &#xA; &lt;li&gt;Seata（1.2.0）（&lt;a href=&#34;https://github.com/72wukong/72crm-11.0-Spring/wiki/seata&#34; target=&#34;_blank&#34;&gt;配置说明&lt;/a&gt;）&lt;/li&gt; &#xA; &lt;li&gt;Sentinel（1.7.2）（项目中sentinel使用8079端口）&lt;/li&gt; &#xA; &lt;li&gt;Nacos（1.2.1)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;安装&lt;/h3&gt; &#xA;&lt;h3&gt;一键安装说明&lt;/h3&gt; &#xA;&lt;p&gt;本项目支持Docker一键安装（建议配置 4核16G以以上），&lt;a href=&#34;https://github.com/72wukong/72crm-11.0-Spring/wiki/Docker%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B&#34;&gt;查看具体安装方法&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;常见问题&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/72wukong/72crm-11.0-Spring/wiki/常见问题以及解决方案&#34; target=&#34;_blank&#34;&gt;常见问题以及解决方案&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;手动安装说明&lt;/h3&gt; &#xA;&lt;h4&gt;1. 导入初始化sql,目前项目下gateway模块使用的独立数据库，其他模块使用同一数据库&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;安装nacos，新建数据库 &lt;code&gt;nacos&lt;/code&gt; 在&lt;code&gt;nacos&lt;/code&gt;数据库中运行&lt;code&gt; DB/nacos.sql&lt;/code&gt;&lt;br&gt; 修改nacos安装目录/conf/application.properties文件，修改数据持久化类型为mysql，添加mysql数据源的url、用户名和密码,配置如下。&lt;br&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;   spring.datasource.platform=mysql&#xA;   db.num=1&#xA;   db.url.0=jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;amp;connectTimeout=1000&amp;amp;socketTimeout=3000&amp;amp;autoReconnect=true&#xA;   db.user=root&#xA;   db.password=password&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;修改gateway模块数据库配置为&lt;code&gt;nacos&lt;/code&gt;数据库&lt;/li&gt; &#xA; &lt;li&gt;初始化其余模块数据库：新建数据库 &lt;code&gt;wk_crm_single&lt;/code&gt; 在&lt;code&gt;wk_crm_single&lt;/code&gt;数据库中运行 &lt;code&gt;DB/wk_crm_single.sql&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;初始化定时任务模块数据库：新建数据库 &lt;code&gt;xxl_job&lt;/code&gt; 在&lt;code&gt;xxl_job&lt;/code&gt;数据库中运行 &lt;code&gt;DB/xxl_job.sql&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;初始化seata数据库：新建数据库 &lt;code&gt;seata&lt;/code&gt; 在&lt;code&gt;seata&lt;/code&gt;数据库中运行 &lt;code&gt;DB/seata.sql&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;2.在项目根目录执行&lt;code&gt;mvn install&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;3.在各个模块下resource目录配置数据库帐号信息以及redis帐号信息&lt;code&gt;（默认使用的是application-dev.yml配置文件,打包后启动脚本默认使用的application-test.yml配置文件）&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;4.在&lt;code&gt;crm\src\main\resources\application-dev.yml&lt;/code&gt;里面修改elasticsearch配置&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;spring.elasticsearch.rest.uris = elasticsearch地址 例：127.0.0.1:9200&#xA;spring.elasticsearch.rest.username = elasticsearch用户名 例：elastic 无密码可留空&#xA;spring.elasticsearch.rest.password = elasticsearch密码 例: password 无密码可留空&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;注意：elasticsearch &lt;a href=&#34;https://gitee.com/wukongcrm/crm_pro/wikis/elasticsearch%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E?sort_id=2927431&#34;&gt;配置注意点&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;5.（可选）修改系统中文件上传地址，默认为本地配置，本地上传还需配置公网地址，指向服务器网关&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;crm.upload.config:1                文件上传配置 1:本地 2:阿里云OSS &#xA;crm.upload.oss                     oss上传文件所需配置内容 &#xA;crm.upload.oss.bucketName        需要配置两个bucket，0为登录才可访问文件上传地址，1为完全公开文件上传地址&#xA;crm.upload.local                   本地上传文件所需配置内容 &#xA;crm.upload.local.uploadPath      需要配置两个地址0为登录才可访问文件上传地址，1为完全公开文件上传地址&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;6.（可选）修改jetcache缓存配置详见 &lt;a href=&#34;https://github.com/alibaba/jetcache/wiki&#34; target=&#34;_blank&#34;&gt;官方文档&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;7.（可选）项目日志文件在&lt;code&gt;core\src\main\resources\logback-spring.xml&lt;/code&gt;修改&lt;/h4&gt; &#xA;&lt;h4&gt;8. 项目打包部署&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;·在项目根目录下执行 mvn clean -Dmaven.test.skip=true package&#xA;·然后把对应模块下target文件夹下&#xA;·${name}-${version}-SNAPSHOT.zip/tar.gz上传到服务器,例：admin-0.0.1-SNAPSHOT.zip 并将压缩文件解压，检查对应配置文件。&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;9. 项目启动 &lt;br&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;先启动nacos,seata,sentinel, elasticsearch,mysql,redis等基础服务&#xA;在第八步解压的文件模块下通过执行`sh 72crm.sh start`（windows下直接运行72crm.bat）启动各个模块服务。&#xA;其中项目基础模块：gateway，authorization，admin必须启动，其他模块可按需启动。&#xA;启动完成后，在浏览器中访问：http://localhost:8443/即可登录系统&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;10. 初始化用户信息&lt;br&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;访问http://localhost:8443/  &#xA;按照提示初始化超级管理员账号和密码信息，成功之后使用初始化后的管理员账户登录系统添加其他员工，分配权限等&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;11. 升级说明以及注意事项&lt;br&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;1、后端代码更新直接下载全量代码替换即可&#xA;2、数据库更新请下载 DB/update/V11.x.x.sql，增量执行即可（比如当前版本为V11.0.1，升级为V11.1.0需执行 V11.0.2.sql,V11.1.0.sql）&#xA;3、docker更新请使用在线更新或手动将数据库数据备份后执行增量升级SQL，再备份至本地，然后下载新版docker镜像，将增量升级后SQL恢复至新版数据库&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;三、其他说明&lt;/h3&gt; &#xA;&lt;h4&gt;1.代码生成器及接口文档&lt;br&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;代码生成器地址：core\src\test\com\kakarote\generator\Generator.java&#xA;接口文档地址`http://localhost:8443/doc.html`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2.模块依赖关系 &lt;br&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;- 除网关外，其余项目均依赖于admin模块，用于获取当前登录人的信息&#xA;- oa模块的任务依赖于work模块，其余一些关联业务功能依赖于crm模块，examine模块&#xA;- 商业智能依赖crm,oa模块&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3.更新日志&lt;br&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.72crm.com/upgrade_log&#34; target=&#34;_blank&#34;&gt;点击查看更新日志&lt;/a&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h3&gt;四、悟空CRM功能模块预览&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0928/172541_efed65bd_345098.png&#34; alt=&#34;输入图片说明&#34; title=&#34;01.png&#34;&gt; &lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0928/172557_c001d047_345098.png&#34; alt=&#34;输入图片说明&#34; title=&#34;02.png&#34;&gt; &lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0928/172612_97363074_345098.png&#34; alt=&#34;输入图片说明&#34; title=&#34;03.png&#34;&gt; &lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0928/172625_47a2798b_345098.png&#34; alt=&#34;输入图片说明&#34; title=&#34;04.png&#34;&gt; &lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0928/172636_ae5cad59_345098.png&#34; alt=&#34;输入图片说明&#34; title=&#34;05.png&#34;&gt; &lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0928/172648_c7928c60_345098.png&#34; alt=&#34;输入图片说明&#34; title=&#34;06.png&#34;&gt; &lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0928/172704_ac4c3308_345098.png&#34; alt=&#34;输入图片说明&#34; title=&#34;07.png&#34;&gt; &lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0928/172714_84b7ee29_345098.png&#34; alt=&#34;输入图片说明&#34; title=&#34;08.png&#34;&gt; &lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0928/172726_4552bddb_345098.png&#34; alt=&#34;输入图片说明&#34; title=&#34;10.png&#34;&gt; &lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0928/172736_da77deec_345098.png&#34; alt=&#34;输入图片说明&#34; title=&#34;11.png&#34;&gt; &lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0928/172745_e22b7a4a_345098.png&#34; alt=&#34;输入图片说明&#34; title=&#34;12.png&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>