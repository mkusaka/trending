<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-15T01:47:20Z</updated>
  <subtitle>Weekly Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jbellis/jvector</title>
    <updated>2023-10-15T01:47:20Z</updated>
    <id>tag:github.com,2023-10-15:/jbellis/jvector</id>
    <link href="https://github.com/jbellis/jvector" rel="alternate"></link>
    <summary type="html">&lt;p&gt;JVector: the most advanced embedded vector search engine&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JVector&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://trendshift.io/repositories/2946&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://trendshift.io/api/badge/repositories/2946&#34; alt=&#34;jbellis%2Fjvector | Trendshift&#34; style=&#34;width: 250px; height: 55px;&#34; width=&#34;250&#34; height=&#34;55&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;JVector is a pure Java embedded vector search engine, used by &lt;a href=&#34;https://www.datastax.com/products/datastax-astra&#34;&gt;DataStax Astra DB&lt;/a&gt; and (soon) Apache Cassandra.&lt;/p&gt; &#xA;&lt;p&gt;What is JVector?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Algorithmic-fast. JVector uses state of the art graph algorithms inspired by DiskANN and related research that offer high recall and low latency.&lt;/li&gt; &#xA; &lt;li&gt;Implementation-fast. JVector uses the Panama SIMD API to accelerate index build and queries.&lt;/li&gt; &#xA; &lt;li&gt;Memory efficient. JVector compresses vectors using product quantization so they can stay in memory during searches. (As part of our PQ implementation, our SIMD-accelerated kmeans class is 5x faster than the one in Apache Commons Math.)&lt;/li&gt; &#xA; &lt;li&gt;Disk-aware. JVector’s disk layout is designed to do the minimum necessary iops at query time.&lt;/li&gt; &#xA; &lt;li&gt;Concurrent. Index builds scale linearly to at least 32 threads. Double the threads, half the build time.&lt;/li&gt; &#xA; &lt;li&gt;Incremental. Query your index as you build it. No delay between adding a vector and being able to find it in search results.&lt;/li&gt; &#xA; &lt;li&gt;Easy to embed. API designed for easy embedding, by people using it in production.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;JVector performance, visualized&lt;/h2&gt; &#xA;&lt;p&gt;JVector vs Lucene searching the Deep100M dataset (about 35GB of vectors and 25GB index): &lt;img src=&#34;https://github.com/jbellis/jvector/assets/42158/7710f33d-ff6a-4282-9e31-4a5eaacd796f&#34; alt=&#34;Screenshot from 2023-09-29 16-39-33&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;JVector scales updates linearly to at least 32 threads: &lt;img src=&#34;https://github.com/jbellis/jvector/assets/42158/f0127bfc-6c45-48b9-96ea-95b2120da0d9&#34; alt=&#34;Screenshot from 2023-09-14 18-05-15&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;JVector basics&lt;/h2&gt; &#xA;&lt;p&gt;Adding to your project. Replace &lt;code&gt;${latest-version}&lt;/code&gt; with &lt;img src=&#34;https://img.shields.io/maven-central/v/io.github.jbellis/jvector?color=green&#34; alt=&#34;Maven Central&#34;&gt;. Example &lt;code&gt;&amp;lt;version&amp;gt;1.0.1&amp;lt;/version&amp;gt;&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;        &#xA;    &amp;lt;groupId&amp;gt;io.github.jbellis&amp;lt;/groupId&amp;gt;          &#xA;    &amp;lt;artifactId&amp;gt;jvector&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;!-- Use the latest version from https://central.sonatype.com/artifact/io.github.jbellis/jvector --&amp;gt;&#xA;    &amp;lt;version&amp;gt;${latest-version}&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Building the index:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/jvector-base/src/main/java/io/github/jbellis/jvector/graph/GraphIndexBuilder.java&#34;&gt;&lt;code&gt;GraphIndexBuilder&lt;/code&gt;&lt;/a&gt; is the entry point for building a graph. You will need to implement &lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/jvector-base/src/main/java/io/github/jbellis/jvector/graph/RandomAccessVectorValues.java&#34;&gt;&lt;code&gt;RandomAccessVectorValues&lt;/code&gt;&lt;/a&gt; to provide vectors to the builder; &lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/jvector-base/src/main/java/io/github/jbellis/jvector/graph/ListRandomAccessVectorValues.java&#34;&gt;&lt;code&gt;ListRandomAccessVectorValues&lt;/code&gt;&lt;/a&gt; is a good starting point.&lt;/li&gt; &#xA; &lt;li&gt;If all your vectors are in the provider up front, you can just call &lt;code&gt;build()&lt;/code&gt; and it will parallelize the build across all available cores. Otherwise you can call &lt;code&gt;addGraphNode&lt;/code&gt; as you add vectors; this is non-blocking and can be called concurrently from multiple threads.&lt;/li&gt; &#xA; &lt;li&gt;Call &lt;code&gt;GraphIndexBuilder.complete&lt;/code&gt; when you are done adding vectors. This will optimize the index and make it ready to write to disk. (Graphs that are in the process of being built can be searched at any time; you do not have to call &lt;em&gt;complete&lt;/em&gt; first.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Searching the index:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/jvector-base/src/main/java/io/github/jbellis/jvector/graph/GraphSearcher.java&#34;&gt;&lt;code&gt;GraphSearcher&lt;/code&gt;&lt;/a&gt; is the entry point for searching. Results come back as a &lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/jvector-base/src/main/java/io/github/jbellis/jvector/graph/SearchResult.java&#34;&gt;&lt;code&gt;SearchResult&lt;/code&gt;&lt;/a&gt; object that contains node IDs and scores, in descending order of similarity to the query vector. &lt;code&gt;GraphSearcher&lt;/code&gt; objects are re-usable, so unless you have a very simple use case you should use &lt;code&gt;GraphSearcher.Builder&lt;/code&gt; to create them; &lt;code&gt;GraphSearcher::search&lt;/code&gt; is also available with simple defaults, but calling it will instantiate a new &lt;code&gt;GraphSearcher&lt;/code&gt; every time so performance will be worse.&lt;/li&gt; &#xA; &lt;li&gt;JVector represents vectors in the index as the ordinal (int) corresponding to their index in the &lt;code&gt;RandomAccessVectorValues&lt;/code&gt; you provided. You can get the original vector back with &lt;code&gt;GraphIndex.getVector&lt;/code&gt;, if necessary, but since this is a disk-backed index you should design your application to avoid doing so if possible.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;DiskANN and Product Quantization&lt;/h2&gt; &#xA;&lt;p&gt;JVector implements &lt;a href=&#34;https://suhasjs.github.io/files/diskann_neurips19.pdf&#34;&gt;DiskANN&lt;/a&gt;-style search, meaning that vectors can be compressed using product quantization so that searches can be performed using the compressed representation that is kept in memory. You can enable this with the following steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a &lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/jvector-base/src/main/java/io/github/jbellis/jvector/pq/ProductQuantization.java&#34;&gt;&lt;code&gt;ProductQuantization&lt;/code&gt;&lt;/a&gt; object with your vectors using &lt;code&gt;ProductQuantization.compute&lt;/code&gt;. This will take some time to compute the codebooks.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;ProductQuantization::encode&lt;/code&gt; or &lt;code&gt;encodeAll&lt;/code&gt; to encode your vectors.&lt;/li&gt; &#xA; &lt;li&gt;Create a &lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/jvector-base/src/main/java/io/github/jbellis/jvector/disk/CompressedVectors.java&#34;&gt;&lt;code&gt;CompressedVectors&lt;/code&gt;&lt;/a&gt; object from the encoded vectors.&lt;/li&gt; &#xA; &lt;li&gt;Create a &lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/jvector-base/src/main/java/io/github/jbellis/jvector/graph/NeighborSimilarity.java&#34;&gt;&lt;code&gt;NeighborSimilarity.ApproximateScoreFunction&lt;/code&gt;&lt;/a&gt; for your query that uses the &lt;code&gt;ProductQuantization&lt;/code&gt; object and &lt;code&gt;CompressedVectors&lt;/code&gt; to compute scores, and pass this to the &lt;code&gt;GraphSearcher.search&lt;/code&gt; method.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Saving and loading indexes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/jvector-base/src/main/java/io/github/jbellis/jvector/disk/OnDiskGraphIndex.java&#34;&gt;&lt;code&gt;OnDiskGraphIndex&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/jvector-base/src/main/java/io/github/jbellis/jvector/disk/CompressedVectors.java&#34;&gt;&lt;code&gt;CompressedVectors&lt;/code&gt;&lt;/a&gt; have &lt;code&gt;write()&lt;/code&gt; methods to save state to disk. They initialize from disk using their constructor and &lt;code&gt;load()&lt;/code&gt; methods, respectively. Writing just requires a DataOutput, but reading requires an implementation of &lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/jvector-base/src/main/java/io/github/jbellis/jvector/disk/RandomAccessReader.java&#34;&gt;&lt;code&gt;RandomAccessReader&lt;/code&gt;&lt;/a&gt; and the related &lt;code&gt;ReaderSupplier&lt;/code&gt; to wrap your preferred i/o class for best performance. See &lt;code&gt;SimpleMappedReader&lt;/code&gt; and &lt;code&gt;SimpleMappedReaderSupplier&lt;/code&gt; for an example.&lt;/li&gt; &#xA; &lt;li&gt;Building a graph does not technically require your RandomAccessVectorValues object to live in memory, but it will perform much better if it does. OnDiskGraphIndex, by contrast, is designed to live on disk and use minimal memory otherwise.&lt;/li&gt; &#xA; &lt;li&gt;You can optionally wrap &lt;code&gt;OnDiskGraphIndex&lt;/code&gt; in a &lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/jvector-base/src/main/java/io/github/jbellis/jvector/disk/CachingGraphIndex.java&#34;&gt;&lt;code&gt;CachingGraphIndex&lt;/code&gt;&lt;/a&gt; to keep the most commonly accessed nodes (the ones nearest to the graph entry point) in memory.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Advanced configuration&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JVector heavily utilizes the Panama Vector API(SIMD) for ANN indexing and search. We have seen cases where the memory bandwidth is saturated during indexing and product quantization and can cause the process to slow down. To avoid this, index and PQ builds use a &lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/jvector-base/src/main/java/io/github/jbellis/jvector/util/PhysicalCoreExecutor.java&#34;&gt;&lt;code&gt;PhysicalCoreExecutor&lt;/code&gt;&lt;/a&gt; to limit the amount of operations to the physical core count. The default value is 1/2 the processor count seen by Java. This may not be correct in all setups (e.g. no hyperthreading or hybrid architectures) so if you wish to override the default use the &lt;code&gt;-Djvector.physical_core_count&lt;/code&gt; property.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sample code&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/jvector-examples/src/main/java/io/github/jbellis/jvector/example/SiftSmall.java&#34;&gt;&lt;code&gt;SiftSmall&lt;/code&gt;&lt;/a&gt; class demonstrates how to put all of the above together to index and search the &#34;small&#34; SIFT dataset of 10,000 vectors.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/jvector-examples/src/main/java/io/github/jbellis/jvector/example/Bench.java&#34;&gt;&lt;code&gt;Bench&lt;/code&gt;&lt;/a&gt; class performs grid search across the &lt;code&gt;GraphIndexBuilder&lt;/code&gt; parameter space to find the best tradeoffs between recall and throughput. You can use &lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/plot_output.py&#34;&gt;&lt;code&gt;plot_output.py&lt;/code&gt;&lt;/a&gt; to graph the &lt;a href=&#34;https://en.wikipedia.org/wiki/Pareto_efficiency&#34;&gt;pareto-optimal points&lt;/a&gt; found by &lt;code&gt;Bench&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some sample KNN datasets for testing based on ada-002 embeddings generated on wikipedia data are available in ivec/fvec format for testing at:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;aws s3 ls s3://astra-vector/wikipedia/ --no-sign-request &#xA;                           PRE 100k/&#xA;                           PRE 1M/&#xA;                           PRE 4M/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;download them with the aws s3 cli as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;aws s3 sync s3://astra-vector/wikipedia/100k ./ --no-sign-request&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Developing and Testing&lt;/h2&gt; &#xA;&lt;p&gt;This project is organized as a &lt;a href=&#34;https://maven.apache.org/guides/mini/guide-multiple-modules.html&#34;&gt;multimodule Maven build&lt;/a&gt;. The intent is to produce a multirelease jar suitable for use as a dependency from any Java 11 code. When run on a Java 20+ JVM with the Vector module enabled, optimized vector providers will be used. In general, the project is structured to be built with JDK 20+, but when &lt;code&gt;JAVA_HOME&lt;/code&gt; is set to Java 11 -&amp;gt; Java 19, certain build features will still be available.&lt;/p&gt; &#xA;&lt;p&gt;Base code is in &lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/jvector-base&#34;&gt;jvector-base&lt;/a&gt; and will be built for Java 11 releases, restricting language features and APIs appropriately. Code in &lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/jvector-twenty&#34;&gt;jvector-twenty&lt;/a&gt; will be compiled for Java 20 language features/APIs and included in the final multirelease jar targetting supported JVMs. &lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/jvector-multirelease&#34;&gt;jvector-multirelease&lt;/a&gt; packages &lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/jvector-base&#34;&gt;jvector-base&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/jvector-twenty&#34;&gt;jvector-twenty&lt;/a&gt; as a multirelease jar for release. &lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/jvector-examples&#34;&gt;jvector-examples&lt;/a&gt; is an additional sibling module that uses the reactor-representation of jvector-base/jvector-twenty to run example code.&lt;/p&gt; &#xA;&lt;p&gt;You can run &lt;code&gt;SiftSmall&lt;/code&gt; and &lt;code&gt;Bench&lt;/code&gt; directly to get an idea of what all is going on here. &lt;code&gt;Bench&lt;/code&gt; requires some datasets to be downloaded from &lt;a href=&#34;https://github.com/erikbern/ann-benchmarks/raw/main/README.md#data-sets&#34;&gt;https://github.com/erikbern/ann-benchmarks&lt;/a&gt;. The files used by &lt;code&gt;SiftSmall&lt;/code&gt; can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/siftsmall&#34;&gt;siftsmall directory&lt;/a&gt; in the project root.&lt;/p&gt; &#xA;&lt;p&gt;To run either class, you can use the Maven exec-plugin via the following incantations:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;mvn compile exec:exec@bench&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;or for Sift:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;mvn compile exec:exec@sift&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To run Sift/Bench without the JVM vector module available, you can use the following invocations:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;mvn -Pjdk11 compile exec:exec@bench&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;mvn -Pjdk11 compile exec:exec@sift&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The &lt;code&gt;... -Pjdk11&lt;/code&gt; invocations will also work with &lt;code&gt;JAVA_HOME&lt;/code&gt; pointing at a Java 11 installation.&lt;/p&gt; &#xA;&lt;p&gt;To release, configure &lt;code&gt;~/.m2/settings.xml&lt;/code&gt; to point to OSSRH and run &lt;code&gt;mvn -Prelease clean deploy&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>SPLWare/esProc</title>
    <updated>2023-10-15T01:47:20Z</updated>
    <id>tag:github.com,2023-10-15:/SPLWare/esProc</id>
    <link href="https://github.com/SPLWare/esProc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;esProc SPL is a scripting language for data processing, with well-designed rich library functions and powerful syntax, which can be executed in a Java program through JDBC interface and computing independently.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34; style=&#34;margin: 30px 0 20px 0;&#34;&gt; &#xA; &lt;a href=&#34;http://www.scudata.com&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://www.scudata.com/images/Sharing-2.png&#34; width=&#34;120&#34; height=&#34;25&#34; style=&#34;margin: 0 20px 0 0;&#34;&gt;&lt;/a&gt; &amp;nbsp; &#xA; &lt;a href=&#34;http://c.scudata.com&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://www.scudata.com/images/Sharing-3.png&#34; width=&#34;129&#34; height=&#34;25&#34; style=&#34; margin: 0 20px 0 0;&#34;&gt;&lt;/a&gt; &amp;nbsp; &#xA; &lt;a href=&#34;https://twitter.com/esProc_SPL&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://www.scudata.com/images/Sharing-1.png&#34; width=&#34;97&#34; height=&#34;25&#34; style=&#34;margin: 0 20px 0 0;&#34;&gt;&lt;/a&gt; &amp;nbsp; &#xA; &lt;a href=&#34;https://medium.com/@Scudata&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://www.scudata.com/images/Sharing-4.png&#34; width=&#34;112&#34; height=&#34;25&#34; style=&#34; margin: 0 20px 0 0;&#34;&gt;&lt;/a&gt; &amp;nbsp; &#xA; &lt;a href=&#34;https://www.reddit.com/r/esProc&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://www.scudata.com/images/Sharing-5.png&#34; width=&#34;100&#34; height=&#34;25&#34; style=&#34; margin: 0 20px 0 0;&#34;&gt;&lt;/a&gt; &amp;nbsp; &#xA; &lt;a href=&#34;https://dev.to/jbx1279&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://www.scudata.com/images/Sharing-6.png&#34; width=&#34;94&#34; height=&#34;25&#34; style=&#34; margin: 0 0px 0 0;&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;About esProc SPL&lt;/h2&gt; &#xA;&lt;p&gt;To put it simply, esProc SPL is an intriguing programming language and a powerful data computing middleware, and can also work as a high-efficiency data warehouse: find more in &lt;a href=&#34;https://blog.scudata.com/understand-spl-in-three-aspects/&#34;&gt;Understand SPL in three aspects&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Different from the text-based programming language, SPL writes code in gridlines: find more in &lt;a href=&#34;https://blog.scudata.com/a-programming-language-coding-in-a-grid/&#34;&gt;A programming language coding in a grid&lt;/a&gt;; as a data computing engine, SPL can generate high efficiency at much lower cost: &lt;a href=&#34;https://blog.scudata.com/esproc-spl-a-data-analysis-engine-reducing-application-cost-by-n-times/&#34;&gt;esProc SPL, a data analysis engine reducing application cost by N times&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;esProc SPL is a JVM-based data computing class library: &lt;a href=&#34;https://blog.scudata.com/spl-the-open-source-java-library-to-process-structured-data/&#34;&gt;SPL: The Open-source Java Library to Process Structured Data&lt;/a&gt;. It has much more and better functionalities than the other data processing languages based on JVM (Such as Kotlin and Scala): &lt;a href=&#34;https://blog.scudata.com/competition-of-data-processing-languages-on-jvm-kotlin-scala-and-spl/&#34;&gt;Competition of data processing languages on JVM: Kotlin, Scala and SPL&lt;/a&gt;. It can perform SQL-style computations without databases: &lt;a href=&#34;https://blog.scudata.com/open-source-spl-that-can-execute-sql-without-rdb/&#34;&gt;Open-source SPL that can execute SQL without RDB&lt;/a&gt;, provides multi/diverse-source, mixed computing capability: &lt;a href=&#34;https://blog.scudata.com/which-tool-is-ideal-for-diverse-source-mixed-computations/&#34;&gt;Which Tool Is Ideal for Diverse Source Mixed Computations&lt;/a&gt;, and supports direct computations on files: &lt;a href=&#34;https://blog.scudata.com/computing-engine-on-open-format-files/&#34;&gt;Computing engine on open-format files&lt;/a&gt; and on WEB: &lt;a href=&#34;https://blog.scudata.com/computing-engine-on-web/&#34;&gt;Computing engine on WEB&lt;/a&gt;. Particularly, esProc SPL enables more flexible microservices: &lt;a href=&#34;https://blog.scudata.com/open-source-spl-makes-microservices-more-micro/&#34;&gt;Open-source SPL Makes Microservices More &#34;Micro&#34;&lt;/a&gt; and convenient data preparation processing for report queries: &lt;a href=&#34;https://blog.scudata.com/the-open-source-spl-optimizes-report-application-and-handles-endless-report-development-needs/&#34;&gt;The Open-source SPL Optimizes Report Application and Handles Endless Report Development Needs&lt;/a&gt;. esProc can also be embedded into an application to act as a built-in database: &lt;a href=&#34;https://blog.scudata.com/esproc-spl-the-challenger-of-sqlite/&#34;&gt;esProc SPL, the challenger of SQLite&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;esProc SPL enriches the concept of middleware: &lt;a href=&#34;https://blog.scudata.com/dcm-a-new-member-of-middleware-family/&#34;&gt;DCM: A New Member of Middleware Family&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When working as a data warehouse, esProc SPL does not adopt the relational algebra-based SQL syntax. It invents an algebraic system called discrete data set instead: &lt;a href=&#34;https://blog.scudata.com/spl-a-database-language-featuring-easy-writing-and-fast-running/&#34;&gt;SPL: a database language featuring easy writing and fast running&lt;/a&gt; (Documentation: &lt;a href=&#34;https://c.scudata.com/article/1694595486828&#34;&gt;Paper of Discrete Data Set&lt;/a&gt;) to solve the problems of hard-to-code complex SQL (&lt;a href=&#34;https://blog.scudata.com/why-a-sql-statement-often-consists-of-hundreds-of-lines-measured-by-kbs%ef%bc%9f/&#34;&gt;Why a SQL Statement Often Consists of Hundreds of Lines, Measured by KBs？&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;SPL makes it convenient to achieve high-performance algorithms and thus obtains much higher computing performance than the traditional relational data warehouse: &lt;a href=&#34;https://blog.scudata.com/how-the-performance-improvement-by-orders-of-magnitude-happened/&#34;&gt;How the performance improvement by orders of magnitude happened&lt;/a&gt;. Find test reports in &lt;a href=&#34;https://blog.scudata.com/spl-technology-evaluation/&#34;&gt;SPL Performance Testing&lt;/a&gt;. It can make the most use of the hardware resources by using creative algorithms. According to many practical instances, esProc can achieve, even exceed, the performance that the distributed databases have on a single machine.&lt;/p&gt; &#xA;&lt;p&gt;As a data warehouse, esProc abandons the concept of “house” , breaks the closedness featured by the conventional databases and creates an open computing system: &lt;a href=&#34;https://blog.scudata.com/data-warehouse-with-no-house-performs-better-than-the-one-with-the-house/&#34;&gt;Data warehouse with “no house” performs better than the one with “the house”&lt;/a&gt;, making it qualified to replace most MPP data warehouses at lower resource-cost and with lighter framework: &lt;a href=&#34;https://blog.scudata.com/with-lightweight-spl-available-how-necessary-is-mpp/&#34;&gt;With lightweight SPL available, how necessary is MPP?&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;h2&gt;To Learn esProc SPL&lt;/h2&gt; &#xA;&lt;p&gt;This book: &lt;a href=&#34;http://c.scudata.com/article/1634722432114&#34;&gt;SPL Programming&lt;/a&gt; is a good start for learning SPL syntax. The book intends for beginners who do not have any programming experiences. Look it through quickly if you are a veteran, but the object understanding explained in section 4.4 is worth a study. Chapter 5 is important, too. It explains SPL’s set-oriented way of thinking, which is quite different from the other languages. But once you understand and master SPL, you can write elegant code. Chapters 8-10 are staple of SPL learning. It regards the structured data computations in a different perspective from SQL. This is significant even for the professional programmers! From the SPL point of view, SQL is a little simple in understanding the structured data as the world is complex. &lt;strong&gt;The knowledges you obtained in various database courses are not broad and profound enough! You need a review and brush-up！&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Find basic SPL concepts in this post: &lt;a href=&#34;https://blog.scudata.com/spl-concepts-for-beginners/&#34;&gt;SPL concepts for beginners&lt;/a&gt;. For beginners, you can find characteristic basic computations of SPL in &lt;a href=&#34;https://blog.scudata.com/spl-operations-for-beginners/&#34;&gt;SPL Operations for Beginners&lt;/a&gt;. Experienced programmers can quickly understand the differences between SPL and SQL. A software architect can understand the differences between SPL and traditional databases after reading &lt;a href=&#34;https://blog.scudata.com/qa-of-esproc-architecture/&#34;&gt;Q&amp;amp;A of esProc Architecture&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Find comprehensive SPL documentation in &lt;a href=&#34;https://blog.scudata.com/spl-learning-materials/&#34;&gt;SPL Learning materials&lt;/a&gt;. Generally, an application programmer can get started in handling basic operations from database connection: &lt;a href=&#34;https://blog.scudata.com/spl-connecting-to-databases/&#34;&gt;SPL: Connecting to Databases&lt;/a&gt; and database read/write &lt;a href=&#34;https://blog.scudata.com/spl-reading-and-writing-database-data/&#34;&gt;SPL: Reading and Writing Database Data&lt;/a&gt; or file access and computation &lt;a href=&#34;https://blog.scudata.com/spl-reading-and-writing-structured-text-files/&#34;&gt;SPL: Reading and Writing Structured Text Files&lt;/a&gt;. Then you can learn how to integrate SPL in a Java application &lt;a href=&#34;https://blog.scudata.com/how-to-call-an-spl-script-in-java/&#34;&gt;How to Call an SPL Script in Java&lt;/a&gt;. Those make a simple learning loop.&lt;/p&gt; &#xA;&lt;p&gt;High-performance computations are relatively difficult, but there is a systematic book on algorithms: &lt;a href=&#34;https://c.scudata.com/article/1641367696194&#34;&gt;Performance Optimization&lt;/a&gt;. Performance optimization algorithms are not unique to SPL. You can implement high-performance computations using another programming language (except for SQL) after you learn these algorithms. The key lies in algorithm instead of syntax. Yet, you need to grasp SPL concept and syntax well in order to better understand the algorithms.&lt;/p&gt; &#xA;&lt;p&gt;The SPL learning posts above also contain applications of the performance optimization algorithms.&lt;/p&gt; &#xA;&lt;p&gt;Storage forms the cornerstone of high-performance computing. The following post introduces the proprietary storage schema commonly used in SPL for beginners: &lt;a href=&#34;https://blog.scudata.com/how-to-use-spl-storage-for-beginners/&#34;&gt;How to use SPL storage for beginners&lt;/a&gt;. Usually, the first step of performance optimization is designing an appropriate storage schema.&lt;/p&gt; &#xA;&lt;p&gt;You are welcome to post your troubles and problems when trying to achieve high performance computing and discuss with us to find a solution: &lt;a href=&#34;http://www.scudata.com/html/Unbearably-slow-query-and-batch-job.html&#34;&gt;Wanted! Unbearably slow query and batch job&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Useful Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;esProc Official WebSite: &lt;a href=&#34;http://www.scudata.com&#34;&gt;http://www.scudata.com&lt;/a&gt; Forum: &lt;a href=&#34;http://c.scudata.com/&#34;&gt;http://c.scudata.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://doc.scudata.com/esproc/tutorial/&#34;&gt;Tutorial&lt;/a&gt; esProc download, installation, as well as principles and applications&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://doc.scudata.com/esproc/func/&#34;&gt;Function Reference&lt;/a&gt; esProc syntax, applications and examples&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://doc.scudata.com/esproc/manual/&#34;&gt;User Reference&lt;/a&gt; esProc programming by examples&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://doc.scudata.com/esproc/ext/&#34;&gt;External Library Guide&lt;/a&gt; Deployment of and connection to esProc external libraries&lt;/li&gt; &#xA; &lt;li&gt;Please head to &lt;a href=&#34;http://c.scudata.com/article/1595817756260&#34;&gt;Download esProc SPL&lt;/a&gt; to download esProc executable files&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://c.scudata.com/article/1677815008127&#34;&gt;How to Get Open-source esProc for Eclipse through Git&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;esProc is under the Apache 2.0 license. See the &lt;a href=&#34;https://raw.githubusercontent.com/SPLWare/esProc/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>elunez/eladmin</title>
    <updated>2023-10-15T01:47:20Z</updated>
    <id>tag:github.com,2023-10-15:/elunez/eladmin</id>
    <link href="https://github.com/elunez/eladmin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;eladmin jpa 版本：项目基于 Spring Boot 2.6.4、 Jpa、 Spring Security、Redis、Vue的前后端分离的后台管理系统，项目采用分模块开发方式， 权限控制采用 RBAC，支持数据字典与数据权限管理，支持一键生成前后端代码，支持动态路由&lt;/p&gt;&lt;hr&gt;&lt;h1 style=&#34;text-align: center&#34;&gt;ELADMIN 后台管理系统&lt;/h1&gt; &#xA;&lt;div style=&#34;text-align: center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/elunez/eladmin/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%20License%202.0-blue.svg?sanitize=true&#34; alt=&#34;AUR&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitee.com/elunez/eladmin&#34;&gt;&lt;img src=&#34;https://gitee.com/elunez/eladmin/badge/star.svg?theme=white&#34; alt=&#34;star&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/elunez/eladmin&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/elunez/eladmin.svg?style=social&amp;amp;label=Stars&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/elunez/eladmin&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/elunez/eladmin.svg?style=social&amp;amp;label=Fork&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h4&gt;项目简介&lt;/h4&gt; &#xA;&lt;p&gt;一个基于 Spring Boot 2.6.4 、 Spring Boot Jpa、 JWT、Spring Security、Redis、Vue的前后端分离的后台管理系统&lt;/p&gt; &#xA;&lt;p&gt;现已发布基于 mybatis-plus 版本，项目地址：&lt;a href=&#34;https://github.com/elunez/eladmin-mp&#34;&gt;https://github.com/elunez/eladmin-mp&lt;/a&gt;、&lt;a href=&#34;https://gitee.com/elunez/eladmin-mp&#34;&gt;https://gitee.com/elunez/eladmin-mp&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;开发文档：&lt;/strong&gt; &lt;a href=&#34;https://eladmin.vip&#34;&gt;https://eladmin.vip&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;体验地址：&lt;/strong&gt; &lt;a href=&#34;https://eladmin.vip/demo&#34;&gt;https://eladmin.vip/demo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;账号密码：&lt;/strong&gt; &lt;code&gt;admin / 123456&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;项目源码&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;后端源码&lt;/th&gt; &#xA;   &lt;th&gt;前端源码&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;github&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/elunez/eladmin&#34;&gt;https://github.com/elunez/eladmin&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/elunez/eladmin-web&#34;&gt;https://github.com/elunez/eladmin-web&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;码云&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://gitee.com/elunez/eladmin&#34;&gt;https://gitee.com/elunez/eladmin&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://gitee.com/elunez/eladmin-web&#34;&gt;https://gitee.com/elunez/eladmin-web&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;赞助商 | Sponsor&lt;/h4&gt; &#xA;&lt;a href=&#34;https://www.mingdao.com/?s=utm_79&amp;amp;utm_source=eladmin&amp;amp;utm_medium=banner&amp;amp;utm_campaign=github&amp;amp;utm_content=IT赋能业务&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://eladmin.vip/images/banner/mdy_index.png&#34; alt=&#34;明道云零代码构建平台&#34; style=&#34;width: 400px;border-radius: 2px;&#34;&gt; &lt;/a&gt; &#xA;&lt;h4&gt;主要特性&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;使用最新技术栈，社区资源丰富。&lt;/li&gt; &#xA; &lt;li&gt;高效率开发，代码生成器可一键生成前后端代码&lt;/li&gt; &#xA; &lt;li&gt;支持数据字典，可方便地对一些状态进行管理&lt;/li&gt; &#xA; &lt;li&gt;支持接口限流，避免恶意请求导致服务层压力过大&lt;/li&gt; &#xA; &lt;li&gt;支持接口级别的功能权限与数据权限，可自定义操作&lt;/li&gt; &#xA; &lt;li&gt;自定义权限注解与匿名接口注解，可快速对接口拦截与放行&lt;/li&gt; &#xA; &lt;li&gt;对一些常用地前端组件封装：表格数据请求、数据字典等&lt;/li&gt; &#xA; &lt;li&gt;前后端统一异常拦截处理，统一输出异常，避免繁琐的判断&lt;/li&gt; &#xA; &lt;li&gt;支持在线用户管理与服务器性能监控，支持限制单用户登录&lt;/li&gt; &#xA; &lt;li&gt;支持运维管理，可方便地对远程服务器的应用进行部署与管理&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;系统功能&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;用户管理：提供用户的相关配置，新增用户后，默认密码为123456&lt;/li&gt; &#xA; &lt;li&gt;角色管理：对权限与菜单进行分配，可根据部门设置角色的数据权限&lt;/li&gt; &#xA; &lt;li&gt;菜单管理：已实现菜单动态路由，后端可配置化，支持多级菜单&lt;/li&gt; &#xA; &lt;li&gt;部门管理：可配置系统组织架构，树形表格展示&lt;/li&gt; &#xA; &lt;li&gt;岗位管理：配置各个部门的职位&lt;/li&gt; &#xA; &lt;li&gt;字典管理：可维护常用一些固定的数据，如：状态，性别等&lt;/li&gt; &#xA; &lt;li&gt;系统日志：记录用户操作日志与异常日志，方便开发人员定位排错&lt;/li&gt; &#xA; &lt;li&gt;SQL监控：采用druid 监控数据库访问性能，默认用户名admin，密码123456&lt;/li&gt; &#xA; &lt;li&gt;定时任务：整合Quartz做定时任务，加入任务日志，任务运行情况一目了然&lt;/li&gt; &#xA; &lt;li&gt;代码生成：高灵活度生成前后端代码，减少大量重复的工作任务&lt;/li&gt; &#xA; &lt;li&gt;邮件工具：配合富文本，发送html格式的邮件&lt;/li&gt; &#xA; &lt;li&gt;七牛云存储：可同步七牛云存储的数据到系统，无需登录七牛云直接操作云数据&lt;/li&gt; &#xA; &lt;li&gt;支付宝支付：整合了支付宝支付并且提供了测试账号，可自行测试&lt;/li&gt; &#xA; &lt;li&gt;服务监控：监控服务器的负载情况&lt;/li&gt; &#xA; &lt;li&gt;运维管理：一键部署你的应用&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;项目结构&lt;/h4&gt; &#xA;&lt;p&gt;项目采用按功能分模块的开发方式，结构如下&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eladmin-common&lt;/code&gt; 为系统的公共模块，各种工具类，公共配置存在该模块&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eladmin-system&lt;/code&gt; 为系统核心模块也是项目入口模块，也是最终需要打包部署的模块&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eladmin-logging&lt;/code&gt; 为系统的日志模块，其他模块如果需要记录日志需要引入该模块&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eladmin-tools&lt;/code&gt; 为第三方工具模块，包含：邮件、七牛云存储、本地存储、支付宝&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eladmin-generator&lt;/code&gt; 为系统的代码生成模块，支持生成前后端CRUD代码&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;详细结构&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;- eladmin-common 公共模块&#xA;    - annotation 为系统自定义注解&#xA;    - aspect 自定义注解的切面&#xA;    - base 提供了Entity、DTO基类和mapstruct的通用mapper&#xA;    - config 自定义权限实现、redis配置、swagger配置、Rsa配置等&#xA;    - exception 项目统一异常的处理&#xA;    - utils 系统通用工具类&#xA;- eladmin-system 系统核心模块（系统启动入口）&#xA;&#x9;- config 配置跨域与静态资源，与数据权限&#xA;&#x9;    - thread 线程池相关&#xA;&#x9;- modules 系统相关模块(登录授权、系统监控、定时任务、运维管理等)&#xA;- eladmin-logging 系统日志模块&#xA;- eladmin-tools 系统第三方工具模块&#xA;- eladmin-generator 系统代码生成模块&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;特别鸣谢&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;感谢 &lt;a href=&#34;https://github.com/PanJiaChen/vue-element-admin&#34;&gt;PanJiaChen&lt;/a&gt; 大佬提供的前端模板&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;感谢 &lt;a href=&#34;https://github.com/moxun1639&#34;&gt;Moxun&lt;/a&gt; 大佬提供的前端 Curd 通用组件&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;感谢 &lt;a href=&#34;https://gitee.com/zhy6599&#34;&gt;zhy6599&lt;/a&gt; 大佬提供的后端运维管理相关功能&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;感谢 &lt;a href=&#34;https://github.com/everhopingandwaiting&#34;&gt;j.yao.SUSE&lt;/a&gt; 大佬提供的匿名接口与Redis限流等功能&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;感谢 &lt;a href=&#34;https://github.com/d15801543974&#34;&gt;d15801543974&lt;/a&gt; 大佬提供的基于注解的通用查询方式&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;项目捐赠&lt;/h4&gt; &#xA;&lt;p&gt;项目的发展离不开你的支持，请作者喝杯咖啡吧☕ &lt;a href=&#34;https://eladmin.vip/pages/030101/&#34;&gt;Donate&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;反馈交流&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;QQ交流群：891137268 、947578238、659622532&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>