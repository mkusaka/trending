<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-08-24T01:46:53Z</updated>
  <subtitle>Weekly Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sepinf-inc/IPED</title>
    <updated>2025-08-24T01:46:53Z</updated>
    <id>tag:github.com,2025-08-24:/sepinf-inc/IPED</id>
    <link href="https://github.com/sepinf-inc/IPED" rel="alternate"></link>
    <summary type="html">&lt;p&gt;IPED Digital Forensic Tool. It is an open source software that can be used to process and analyze digital evidence, often seized at crime scenes by law enforcement or in a corporate investigation by private examiners.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;IPED Digital Forensic Tool&lt;/h1&gt; &#xA;&lt;p&gt;IPED is an open source software that can be used to process and analyze digital evidence, often seized at crime scenes by law enforcement or in a corporate investigation by private examiners.&lt;/p&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;p&gt;IPED - Digital Evidence Processor and Indexer (translated from Portuguese) is a tool implemented in java and originally and still developed by digital forensic experts from Brazilian Federal Police since 2012. Although it was always open source, only in 2019 its code was officially published.&lt;/p&gt; &#xA;&lt;p&gt;Since the beginning, the goal of the tool was efficient data processing and stability. Some key characteristics of the tool are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Command line data processing for batch case creation&lt;/li&gt; &#xA; &lt;li&gt;Multiplatform support, tested on Windows and Linux systems&lt;/li&gt; &#xA; &lt;li&gt;Portable cases without installation, you can run them from removable drives&lt;/li&gt; &#xA; &lt;li&gt;Integrated and intuitive analysis interface&lt;/li&gt; &#xA; &lt;li&gt;High multithread performance and support for large cases: up to 400GB/h processing speed using modern hardware and 135 million items in a (multi) case as of 12/12/2019&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Currently IPED uses the &lt;a href=&#34;https://github.com/sleuthkit/sleuthkit&#34;&gt;Sleuthkit Library&lt;/a&gt; only to decode disk images and file systems, so the same image formats are supported: RAW/DD, E01, ISO9660, AFF, VHD, VMDK. There is also support for EX01, VHDX, UDF(ISO), AD1 (AccessData) and UFDR (Cellebrite) formats.&lt;/p&gt; &#xA;&lt;p&gt;If you are new to the tool, please refer to the &lt;a href=&#34;https://github.com/lfcnassif/IPED/wiki/Beginner&#39;s-Start-Guide&#34;&gt;Beginner&#39;s Start Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;To build from source, you need git, maven and Java JDK 11 + JavaFX (e.g. Liberica OpenJDK 11 Full JDK) installed. Set JAVA_HOME environment var to your java 11 installation folder, then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/sepinf-inc/IPED.git&#xA;cd IPED&#xA;mvn clean install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will generate an snapshot version of IPED in target/release folder.&lt;/p&gt; &#xA;&lt;p&gt;&lt;b&gt;Attention:&lt;/b&gt; the default master branch is the development one and is unstable. If you want to build a stable version, checkout some of the release tags after the clone step.&lt;/p&gt; &#xA;&lt;p&gt;On Linux you also must build The Sleuthkit and additional dependencies. Please refer to &lt;a href=&#34;https://github.com/sepinf-inc/IPED/wiki/Linux&#34;&gt;Linux Section&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Contributions are very welcome! Before contributing please refer to &lt;a href=&#34;https://github.com/lfcnassif/IPED/wiki/Contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Some of IPED several features are listed below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supported hashes: md5, sha-1, sha-256, sha-512 and edonkey. PhotoDNA is also available &lt;strong&gt;for law enforcement&lt;/strong&gt; (please contact iped at pf dot gov dot br)&lt;/li&gt; &#xA; &lt;li&gt;Supported hash sets: NIST NSRL, NIST CAID, ProjectVIC, Interpol ICSE, standard CSV format&lt;/li&gt; &#xA; &lt;li&gt;Fast hash deduplication&lt;/li&gt; &#xA; &lt;li&gt;Signature analysis&lt;/li&gt; &#xA; &lt;li&gt;Categorization by file type and properties&lt;/li&gt; &#xA; &lt;li&gt;Recursive container expansion of dozens of file formats&lt;/li&gt; &#xA; &lt;li&gt;Embedded forensic/virtual disks expansion: supports splitted or single segment DD, E01, EX01, VHD, VHDX, VMDK (differential VMDKs are also supported)&lt;/li&gt; &#xA; &lt;li&gt;Image and video gallery for hundreds of formats&lt;/li&gt; &#xA; &lt;li&gt;Georeferencing of GPS data, using Google Maps, Bing or OpenStreetMaps&lt;/li&gt; &#xA; &lt;li&gt;Regex searches with optional script validation for credit cards, emails, urls, ip &amp;amp; mac addresses, money values, bitcoin, ethereum, monero, ripple wallets and more...&lt;/li&gt; &#xA; &lt;li&gt;Embedded hex, unicode text, metadata and native viewers&lt;/li&gt; &#xA; &lt;li&gt;File content and metadata indexing and fast searching, including unknown files and unallocated space&lt;/li&gt; &#xA; &lt;li&gt;Efficient data carving engine (takes &amp;lt; 10% processing time) that scans much more than unallocated, with support for +40 file formats, including videos, extensible by scripting&lt;/li&gt; &#xA; &lt;li&gt;Optical Character Recognition powered by tesseract 5&lt;/li&gt; &#xA; &lt;li&gt;Encryption detection for known formats and using entropy test&lt;/li&gt; &#xA; &lt;li&gt;Processing profiles: forensic, pedo (csam), triage, fastmode (preview) and blind (for automatic data extraction)&lt;/li&gt; &#xA; &lt;li&gt;Detection for +70 languages&lt;/li&gt; &#xA; &lt;li&gt;Named Entity Recognition (needs Stanford CoreNLP models to be downloaded)&lt;/li&gt; &#xA; &lt;li&gt;Customizable filters based on any file metadata&lt;/li&gt; &#xA; &lt;li&gt;Similar document search with configurable threshold&lt;/li&gt; &#xA; &lt;li&gt;Similar image search, using internal or external image&lt;/li&gt; &#xA; &lt;li&gt;Similar face recognition, optimized to run without GPU, with configurable threshold&lt;/li&gt; &#xA; &lt;li&gt;Unified table timeline view and event filtering for timeline analysis&lt;/li&gt; &#xA; &lt;li&gt;Powerful file grouping (clustering) based on ANY metadata&lt;/li&gt; &#xA; &lt;li&gt;Support for multicases up to 135 million items&lt;/li&gt; &#xA; &lt;li&gt;Extensible with javascript and python (including cpython extensions) scripts&lt;/li&gt; &#xA; &lt;li&gt;External command line tools integration for file decoding&lt;/li&gt; &#xA; &lt;li&gt;Browser history for IE, Edge, Firefox, Chrome and Safari&lt;/li&gt; &#xA; &lt;li&gt;Custom parsers for Emule, Shareaza, Ares, WhatsApp, Skype, Telegram, Bittorrent, ActivitiesCache, and more...&lt;/li&gt; &#xA; &lt;li&gt;Fast nudity detection for images and videos using random forests algorithm (thanks to its author @tc-wleite)&lt;/li&gt; &#xA; &lt;li&gt;Nudity detection using Yahoo open-nsfw deeplearning model (needs keras and tensorflow)&lt;/li&gt; &#xA; &lt;li&gt;Audio Transcription, local and remote implementations with Azure and Google Cloud services&lt;/li&gt; &#xA; &lt;li&gt;Graph analysis for communications (calls, emails, instant messages...)&lt;/li&gt; &#xA; &lt;li&gt;Stable processing with out-of-process file system decoding and file parsing&lt;/li&gt; &#xA; &lt;li&gt;Resuming or restarting stopped or aborted processing (--continue/--restart options)&lt;/li&gt; &#xA; &lt;li&gt;Web API for searching remote cases, get file metadata, raw content, decoded text, thumbnails and posting bookmarks&lt;/li&gt; &#xA; &lt;li&gt;Creation of bookmarks/tags for interesting data&lt;/li&gt; &#xA; &lt;li&gt;HTML, CSV reports and portable cases with tagged data&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;Processing: &lt;img src=&#34;https://github.com/sepinf-inc/IPED/assets/7276994/bf29b44a-a924-4c65-845c-6282a4b91861&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt; &#xA;&lt;p&gt;Analysis: &lt;img src=&#34;https://github.com/sepinf-inc/IPED/assets/7276994/5fca2b65-6763-4bc1-9284-604c8b325d54&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt; &#xA;&lt;p&gt;Data Carving &amp;amp; Video Thumbnails: &lt;img src=&#34;https://github.com/sepinf-inc/IPED/assets/7276994/4d908fe5-6cb1-443b-96fa-d937fa1d2e2d&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt; &#xA;&lt;p&gt;Regex Results: &lt;img src=&#34;https://github.com/sepinf-inc/IPED/assets/7276994/db34adc7-d7b9-4b56-8a35-99e095380d0b&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt; &#xA;&lt;p&gt;Map: &lt;img src=&#34;https://github.com/sepinf-inc/IPED/assets/7276994/279b9280-3a72-484a-8aed-e4d015df196f&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt; &#xA;&lt;p&gt;Communication links: &lt;img src=&#34;https://github.com/sepinf-inc/IPED/assets/7276994/8b164948-fa36-47b8-a249-f64547a36b28&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt; &#xA;&lt;p&gt;Face search: &lt;img src=&#34;https://github.com/sepinf-inc/IPED/assets/7276994/55ceb13c-dc21-40cd-a6e2-a6e3d6ed49a6&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt; &#xA;&lt;p&gt;Audio Transcription: &lt;img src=&#34;https://github.com/sepinf-inc/IPED/assets/7276994/ebded2ad-f88d-43c8-9699-66e498c9939c&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt; &#xA;&lt;p&gt;Timeline: &lt;img src=&#34;https://github.com/sepinf-inc/IPED/assets/7276994/011657e3-8ff2-4105-b3c2-116980772fc0&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt; &#xA;&lt;p&gt;Time chart: &lt;img src=&#34;https://github.com/sepinf-inc/IPED/assets/7276994/81df1c18-361d-49f1-b755-36520437803a&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt; &#xA;&lt;p&gt;Events correlation of 2 suspects actions and illegal activities: &lt;img src=&#34;https://github.com/sepinf-inc/IPED/assets/7276994/e1f47b15-ba89-4436-9291-7ec354ef2b57&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>LaurieWired/GhidraMCP</title>
    <updated>2025-08-24T01:46:53Z</updated>
    <id>tag:github.com,2025-08-24:/LaurieWired/GhidraMCP</id>
    <link href="https://github.com/LaurieWired/GhidraMCP" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MCP Server for Ghidra&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/LaurieWired/GhidraMCP/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/LaurieWired/GhidraMCP&#34; alt=&#34;GitHub release (latest by date)&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/LaurieWired/GhidraMCP/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/LaurieWired/GhidraMCP&#34; alt=&#34;GitHub stars&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/LaurieWired/GhidraMCP/network/members&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/LaurieWired/GhidraMCP&#34; alt=&#34;GitHub forks&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/LaurieWired/GhidraMCP/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/LaurieWired/GhidraMCP&#34; alt=&#34;GitHub contributors&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/lauriewired&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/lauriewired?style=social&#34; alt=&#34;Follow @lauriewired&#34; /&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/4986d702-be3f-4697-acce-aea55cd79ad3&#34; alt=&#34;ghidra_MCP_logo&#34; /&gt;&lt;/p&gt; &#xA;&lt;h1&gt;ghidraMCP&lt;/h1&gt; &#xA;&lt;p&gt;ghidraMCP is an Model Context Protocol server for allowing LLMs to autonomously reverse engineer applications. It exposes numerous tools from core Ghidra functionality to MCP clients.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/36080514-f227-44bd-af84-78e29ee1d7f9&#34;&gt;https://github.com/user-attachments/assets/36080514-f227-44bd-af84-78e29ee1d7f9&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;p&gt;MCP Server + Ghidra Plugin&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Decompile and analyze binaries in Ghidra&lt;/li&gt; &#xA; &lt;li&gt;Automatically rename methods and data&lt;/li&gt; &#xA; &lt;li&gt;List methods, classes, imports, and exports&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://ghidra-sre.org&#34;&gt;Ghidra&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Python3&lt;/li&gt; &#xA; &lt;li&gt;MCP &lt;a href=&#34;https://github.com/modelcontextprotocol/python-sdk&#34;&gt;SDK&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Ghidra&lt;/h2&gt; &#xA;&lt;p&gt;First, download the latest &lt;a href=&#34;https://github.com/LaurieWired/GhidraMCP/releases&#34;&gt;release&lt;/a&gt; from this repository. This contains the Ghidra plugin and Python MCP client. Then, you can directly import the plugin into Ghidra.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run Ghidra&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;code&gt;File&lt;/code&gt; -&amp;gt; &lt;code&gt;Install Extensions&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Click the &lt;code&gt;+&lt;/code&gt; button&lt;/li&gt; &#xA; &lt;li&gt;Select the &lt;code&gt;GhidraMCP-1-2.zip&lt;/code&gt; (or your chosen version) from the downloaded release&lt;/li&gt; &#xA; &lt;li&gt;Restart Ghidra&lt;/li&gt; &#xA; &lt;li&gt;Make sure the GhidraMCPPlugin is enabled in &lt;code&gt;File&lt;/code&gt; -&amp;gt; &lt;code&gt;Configure&lt;/code&gt; -&amp;gt; &lt;code&gt;Developer&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Optional&lt;/em&gt;: Configure the port in Ghidra with &lt;code&gt;Edit&lt;/code&gt; -&amp;gt; &lt;code&gt;Tool Options&lt;/code&gt; -&amp;gt; &lt;code&gt;GhidraMCP HTTP Server&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Video Installation Guide:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/75f0c176-6da1-48dc-ad96-c182eb4648c3&#34;&gt;https://github.com/user-attachments/assets/75f0c176-6da1-48dc-ad96-c182eb4648c3&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;MCP Clients&lt;/h2&gt; &#xA;&lt;p&gt;Theoretically, any MCP client should work with ghidraMCP. Three examples are given below.&lt;/p&gt; &#xA;&lt;h2&gt;Example 1: Claude Desktop&lt;/h2&gt; &#xA;&lt;p&gt;To set up Claude Desktop as a Ghidra MCP client, go to &lt;code&gt;Claude&lt;/code&gt; -&amp;gt; &lt;code&gt;Settings&lt;/code&gt; -&amp;gt; &lt;code&gt;Developer&lt;/code&gt; -&amp;gt; &lt;code&gt;Edit Config&lt;/code&gt; -&amp;gt; &lt;code&gt;claude_desktop_config.json&lt;/code&gt; and add the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;ghidra&#34;: {&#xA;      &#34;command&#34;: &#34;python&#34;,&#xA;      &#34;args&#34;: [&#xA;        &#34;/ABSOLUTE_PATH_TO/bridge_mcp_ghidra.py&#34;,&#xA;        &#34;--ghidra-server&#34;,&#xA;        &#34;http://127.0.0.1:8080/&#34;&#xA;      ]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, edit this file directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/Users/YOUR_USER/Library/Application Support/Claude/claude_desktop_config.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The server IP and port are configurable and should be set to point to the target Ghidra instance. If not set, both will default to localhost:8080.&lt;/p&gt; &#xA;&lt;h2&gt;Example 2: Cline&lt;/h2&gt; &#xA;&lt;p&gt;To use GhidraMCP with &lt;a href=&#34;https://cline.bot&#34;&gt;Cline&lt;/a&gt;, this requires manually running the MCP server as well. First run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python bridge_mcp_ghidra.py --transport sse --mcp-host 127.0.0.1 --mcp-port 8081 --ghidra-server http://127.0.0.1:8080/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The only &lt;em&gt;required&lt;/em&gt; argument is the transport. If all other arguments are unspecified, they will default to the above. Once the MCP server is running, open up Cline and select &lt;code&gt;MCP Servers&lt;/code&gt; at the top.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/88e1f336-4729-46ee-9b81-53271e9c0ce0&#34; alt=&#34;Cline select&#34; /&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then select &lt;code&gt;Remote Servers&lt;/code&gt; and add the following, ensuring that the url matches the MCP host and port:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Server Name: GhidraMCP&lt;/li&gt; &#xA; &lt;li&gt;Server URL: &lt;code&gt;http://127.0.0.1:8081/sse&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Example 3: 5ire&lt;/h2&gt; &#xA;&lt;p&gt;Another MCP client that supports multiple models on the backend is &lt;a href=&#34;https://github.com/nanbingxyz/5ire&#34;&gt;5ire&lt;/a&gt;. To set up GhidraMCP, open 5ire and go to &lt;code&gt;Tools&lt;/code&gt; -&amp;gt; &lt;code&gt;New&lt;/code&gt; and set the following configurations:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Tool Key: ghidra&lt;/li&gt; &#xA; &lt;li&gt;Name: GhidraMCP&lt;/li&gt; &#xA; &lt;li&gt;Command: &lt;code&gt;python /ABSOLUTE_PATH_TO/bridge_mcp_ghidra.py&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Building from Source&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Copy the following files from your Ghidra directory to this project&#39;s &lt;code&gt;lib/&lt;/code&gt; directory:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Ghidra/Features/Base/lib/Base.jar&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Ghidra/Features/Decompiler/lib/Decompiler.jar&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Ghidra/Framework/Docking/lib/Docking.jar&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Ghidra/Framework/Generic/lib/Generic.jar&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Ghidra/Framework/Project/lib/Project.jar&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Ghidra/Framework/SoftwareModeling/lib/SoftwareModeling.jar&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Ghidra/Framework/Utility/lib/Utility.jar&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Ghidra/Framework/Gui/lib/Gui.jar&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Build with Maven by running:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;mvn clean package assembly:single&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The generated zip file includes the built Ghidra plugin and its resources. These files are required for Ghidra to recognize the new extension.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;lib/GhidraMCP.jar&lt;/li&gt; &#xA; &lt;li&gt;extensions.properties&lt;/li&gt; &#xA; &lt;li&gt;Module.manifest&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>OpenLineage/OpenLineage</title>
    <updated>2025-08-24T01:46:53Z</updated>
    <id>tag:github.com,2025-08-24:/OpenLineage/OpenLineage</id>
    <link href="https://github.com/OpenLineage/OpenLineage" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Open Standard for lineage metadata collection&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/OpenLineage/OpenLineage/tree/main&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/OpenLineage/OpenLineage/tree/main.svg?style=shield&#34; alt=&#34;CircleCI&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/OpenLineage/OpenLineage/main/#status&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/status-active-brightgreen.svg?sanitize=true&#34; alt=&#34;status&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://join.slack.com/t/openlineage/shared_invite/zt-3arpql6lg-Nt~hicnDsnDY_GK_LEX06w&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/slack-chat-blue.svg?sanitize=true&#34; alt=&#34;Slack&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/OpenLineage/OpenLineage/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache_2.0-blue.svg?sanitize=true&#34; alt=&#34;license&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://search.maven.org/search?q=g:io.openlineage&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/io.openlineage/openlineage-java.svg?sanitize=true&#34; alt=&#34;maven&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/4888&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/4888/badge&#34; alt=&#34;CII Best Practices&#34; /&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/OpenLineage/OpenLineage/main/doc/openlineage-lfai-logo.png&#34; width=&#34;754px&#34; /&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;OpenLineage is an Open standard for metadata and lineage collection designed to instrument jobs as they are running. It defines a generic model of run, job, and dataset entities identified using consistent naming strategies. The core lineage model is extensible by defining specific facets to enrich those entities.&lt;/p&gt; &#xA;&lt;p&gt;OpenLineage is an &lt;a href=&#34;https://lfaidata.foundation/projects/openlineage&#34;&gt;LF AI &amp;amp; Data Foundation&lt;/a&gt; Graduate project under active development, and we welcome contributions.&lt;/p&gt; &#xA;&lt;h2&gt;Problem&lt;/h2&gt; &#xA;&lt;h3&gt;Before&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Duplication of effort: each project has to instrument all jobs&lt;/li&gt; &#xA; &lt;li&gt;Integrations are external and can break with new versions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/OpenLineage/OpenLineage/main/doc/before-ol.svg?sanitize=true&#34; alt=&#34;Before OpenLineage&#34; /&gt;&lt;/p&gt; &#xA;&lt;h3&gt;With OpenLineage&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The effort of integration is shared&lt;/li&gt; &#xA; &lt;li&gt;An integration can be pushed in each project: no need to play catch up&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/OpenLineage/OpenLineage/main/doc/with-ol.svg?sanitize=true&#34; alt=&#34;With OpenLineage&#34; /&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Scope&lt;/h2&gt; &#xA;&lt;p&gt;OpenLineage defines the metadata for running jobs and the corresponding events. A configurable backend allows the user to choose what protocol to send the events to. &lt;img src=&#34;https://raw.githubusercontent.com/OpenLineage/OpenLineage/main/doc/scope.svg?sanitize=true&#34; alt=&#34;Scope&#34; /&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Core model&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/OpenLineage/OpenLineage/main/doc/datamodel.svg?sanitize=true&#34; alt=&#34;Model&#34; /&gt;&lt;/p&gt; &#xA;&lt;p&gt;A facet is an atomic piece of metadata attached to one of the core entities. See the spec for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Spec&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/OpenLineage/OpenLineage/main/spec/OpenLineage.md&#34;&gt;specification&lt;/a&gt; is defined using OpenAPI and allows extension through custom facets.&lt;/p&gt; &#xA;&lt;h2&gt;Integration matrix&lt;/h2&gt; &#xA;&lt;p&gt;The OpenLineage repository contains integrations with several systems.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Table-level lineage&lt;/th&gt; &#xA;   &lt;th&gt;Column-level lineage&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/OpenLineage/OpenLineage/tree/main/integration/spark&#34;&gt;Apache Spark&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/OpenLineage/OpenLineage/tree/main/integration/airflow&#34;&gt;Apache Airflow&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/OpenLineage/OpenLineage/tree/main/integration/dagster&#34;&gt;Dagster&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/OpenLineage/OpenLineage/tree/main/integration/dbt&#34;&gt;dbt&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/OpenLineage/OpenLineage/tree/main/integration/flink&#34;&gt;Flink&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Does not support &lt;code&gt;SELECT *&lt;/code&gt; queries with JDBC.&lt;/li&gt; &#xA; &lt;li&gt;Supports SQL-based operators other than BigQuery.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Related projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://marquezproject.ai/&#34;&gt;Marquez&lt;/a&gt;: Marquez is an &lt;a href=&#34;https://lfaidata.foundation/&#34;&gt;LF AI &amp;amp; DATA&lt;/a&gt; project to collect, aggregate, and visualize a data ecosystem&#39;s metadata. It is the reference implementation of the OpenLineage API. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/MarquezProject/marquez/raw/main/api/src/main/java/marquez/api/OpenLineageResource.java&#34;&gt;OpenLineage collection implementation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://egeria.odpi.org/&#34;&gt;Egeria&lt;/a&gt;: Egeria offers open metadata and governance for enterprises - automatically capturing, managing and exchanging metadata between tools and platforms, no matter the vendor.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Website: &lt;a href=&#34;http://openlineage.io&#34;&gt;openlineage.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Slack: &lt;a href=&#34;https://join.slack.com/t/openlineage/shared_invite/zt-3arpql6lg-Nt~hicnDsnDY_GK_LEX06w&#34;&gt;OpenLineage.slack.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitter: &lt;a href=&#34;https://twitter.com/OpenLineage&#34;&gt;@OpenLineage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mailing list: &lt;a href=&#34;https://lists.lfaidata.foundation/g/openlineage-tsc&#34;&gt;openlineage-tsc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Wiki: &lt;a href=&#34;https://wiki.lfaidata.foundation/display/OpenLineage/OpenLineage+Home&#34;&gt;OpenLineage+Home&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;LinkedIn: &lt;a href=&#34;https://www.linkedin.com/groups/13927795/&#34;&gt;13927795&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;YouTube: &lt;a href=&#34;https://www.youtube.com/channel/UCRMLy4AaSw_ka-gNV9nl7VQ&#34;&gt;channel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mastodon: &lt;a href=&#34;https://raw.githubusercontent.com/OpenLineage/OpenLineage/main/openlineage@fosstodon.org&#34;&gt;@openlineage@fostodon.org&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Talks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.flink-forward.org/berlin-2024/agenda#data-lineage-for-apache-flink-with-openlineage&#34;&gt;Flink Forward, October 2024. Data Lineage for Apache Flink with OpenLineage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://airflowsummit.org/sessions/2024/activating-operational-metadata-with-airflow-atlan-and-openlineage/&#34;&gt;Airflow Summit, September 2024. Activating operational metadata with Airflow, Atlan and OpenLineage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.confluent.io/events/kafka-summit-london-2024/openlineage-for-stream-processing/&#34;&gt;Kafka Summit, March 2024. OpenLineage for Stream Processing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=OE1o4D_iWfw&#34;&gt;Data Council Austin, March 2024. Data Lineage: We&#39;ve Come a Long Way&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.databricks.com/dataaisummit/session/cross-platform-data-lineage-openlineage/&#34;&gt;Data+AI Summit June 2023. Cross-Platform Data Lineage with OpenLineage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/xFVSZCCbZlY&#34;&gt;Berlin Buzzwords, June 2023. Column-Level Lineage is Coming to the Rescue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=pLBVGIPuwEo&#34;&gt;Berlin Buzzwords, June 2022. Cross-Platform Data Lineage with OpenLineage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://2021.berlinbuzzwords.de/member/julien-le-dem&#34;&gt;Berlin Buzzwords, June 2021. Observability for Data Pipelines with OpenLineage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mattturck.com/datakin/&#34;&gt;Data Driven NYC, February 2021. Data Observability and Pipelines: OpenLineage and Marquez&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bigdatatechwarsaw.eu/edition-2021/&#34;&gt;Big Data Technology Warsaw Summit, February 2021. Data lineage and Observability with Marquez and OpenLineage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=anlV5Er_BpM&#34;&gt;Metadata Day 2020. OpenLineage Lightning Talk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.coss.community/coss/ocs-2020-breakout-julien-le-dem-3eh4&#34;&gt;Open Core Summit 2020. Observability for Data Pipelines: OpenLineage Project Launch&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/OpenLineage/OpenLineage/raw/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for more details about how to contribute.&lt;/p&gt; &#xA;&lt;h2&gt;Report a Vulnerability&lt;/h2&gt; &#xA;&lt;p&gt;If you discover a vulnerability in the project, please &lt;a href=&#34;https://github.com/OpenLineage/OpenLineage/issues/new/choose&#34;&gt;open an issue&lt;/a&gt; and attach the &#34;security&#34; label.&lt;/p&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.star-history.com/#OpenLineage/OpenLineage&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=OpenLineage/OpenLineage&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34; /&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr /&gt; &#xA;&lt;p&gt;SPDX-License-Identifier: Apache-2.0&lt;br /&gt; Copyright 2018-2025 contributors to the OpenLineage project&lt;/p&gt;</summary>
  </entry>
</feed>