<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-15T01:57:30Z</updated>
  <subtitle>Weekly Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>apache/flink</title>
    <updated>2023-01-15T01:57:30Z</updated>
    <id>tag:github.com,2023-01-15:/apache/flink</id>
    <link href="https://github.com/apache/flink" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Apache Flink&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Apache Flink&lt;/h1&gt; &#xA;&lt;p&gt;Apache Flink is an open source stream processing framework with powerful stream- and batch-processing capabilities.&lt;/p&gt; &#xA;&lt;p&gt;Learn more about Flink at &lt;a href=&#34;https://flink.apache.org/&#34;&gt;https://flink.apache.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;A streaming-first runtime that supports both batch processing and data streaming programs&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Elegant and fluent APIs in Java and Scala&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A runtime that supports very high throughput and low event latency at the same time&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Support for &lt;em&gt;event time&lt;/em&gt; and &lt;em&gt;out-of-order&lt;/em&gt; processing in the DataStream API, based on the &lt;em&gt;Dataflow Model&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Flexible windowing (time, count, sessions, custom triggers) across different time semantics (event time, processing time)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Fault-tolerance with &lt;em&gt;exactly-once&lt;/em&gt; processing guarantees&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Natural back-pressure in streaming programs&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Libraries for Graph processing (batch), Machine Learning (batch), and Complex Event Processing (streaming)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Built-in support for iterative programs (BSP) in the DataSet (batch) API&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Custom memory management for efficient and robust switching between in-memory and out-of-core data processing algorithms&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compatibility layers for Apache Hadoop MapReduce&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Integration with YARN, HDFS, HBase, and other components of the Apache Hadoop ecosystem&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Streaming Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;case class WordWithCount(word: String, count: Long)&#xA;&#xA;val text = env.socketTextStream(host, port, &#39;\n&#39;)&#xA;&#xA;val windowCounts = text.flatMap { w =&amp;gt; w.split(&#34;\\s&#34;) }&#xA;  .map { w =&amp;gt; WordWithCount(w, 1) }&#xA;  .keyBy(&#34;word&#34;)&#xA;  .window(TumblingProcessingTimeWindow.of(Time.seconds(5)))&#xA;  .sum(&#34;count&#34;)&#xA;&#xA;windowCounts.print()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Batch Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;case class WordWithCount(word: String, count: Long)&#xA;&#xA;val text = env.readTextFile(path)&#xA;&#xA;val counts = text.flatMap { w =&amp;gt; w.split(&#34;\\s&#34;) }&#xA;  .map { w =&amp;gt; WordWithCount(w, 1) }&#xA;  .groupBy(&#34;word&#34;)&#xA;  .sum(&#34;count&#34;)&#xA;&#xA;counts.writeAsCsv(outputPath)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building Apache Flink from Source&lt;/h2&gt; &#xA;&lt;p&gt;Prerequisites for building Flink:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Unix-like environment (we use Linux, Mac OS X, Cygwin, WSL)&lt;/li&gt; &#xA; &lt;li&gt;Git&lt;/li&gt; &#xA; &lt;li&gt;Maven (we recommend version 3.2.5 and require at least 3.1.1)&lt;/li&gt; &#xA; &lt;li&gt;Java 8 or 11 (Java 9 or 10 may work)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/apache/flink.git&#xA;cd flink&#xA;./mvnw clean package -DskipTests # this will take up to 10 minutes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Flink is now installed in &lt;code&gt;build-target&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE: Maven 3.3.x can build Flink, but will not properly shade away certain dependencies. Maven 3.1.1 creates the libraries properly. To build unit tests with Java 8, use Java 8u51 or above to prevent failures in unit tests that use the PowerMock runner.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Developing Flink&lt;/h2&gt; &#xA;&lt;p&gt;The Flink committers use IntelliJ IDEA to develop the Flink codebase. We recommend IntelliJ IDEA for developing projects that involve Scala code.&lt;/p&gt; &#xA;&lt;p&gt;Minimal requirements for an IDE are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for Java and Scala (also mixed projects)&lt;/li&gt; &#xA; &lt;li&gt;Support for Maven with Java and Scala&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;IntelliJ IDEA&lt;/h3&gt; &#xA;&lt;p&gt;The IntelliJ IDE supports Maven out of the box and offers a plugin for Scala development.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;IntelliJ download: &lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;https://www.jetbrains.com/idea/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;IntelliJ Scala Plugin: &lt;a href=&#34;https://plugins.jetbrains.com/plugin/?id=1347&#34;&gt;https://plugins.jetbrains.com/plugin/?id=1347&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://nightlies.apache.org/flink/flink-docs-master/flinkDev/ide_setup.html#intellij-idea&#34;&gt;Setting up IntelliJ&lt;/a&gt; guide for details.&lt;/p&gt; &#xA;&lt;h3&gt;Eclipse Scala IDE&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; From our experience, this setup does not work with Flink due to deficiencies of the old Eclipse version bundled with Scala IDE 3.0.3 or due to version incompatibilities with the bundled Scala version in Scala IDE 4.4.1.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;We recommend to use IntelliJ instead (see above)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Don’t hesitate to ask!&lt;/p&gt; &#xA;&lt;p&gt;Contact the developers and community on the &lt;a href=&#34;https://flink.apache.org/community.html#mailing-lists&#34;&gt;mailing lists&lt;/a&gt; if you need any help.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://issues.apache.org/jira/browse/FLINK&#34;&gt;Open an issue&lt;/a&gt; if you find a bug in Flink.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The documentation of Apache Flink is located on the website: &lt;a href=&#34;https://flink.apache.org&#34;&gt;https://flink.apache.org&lt;/a&gt; or in the &lt;code&gt;docs/&lt;/code&gt; directory of the source code.&lt;/p&gt; &#xA;&lt;h2&gt;Fork and Contribute&lt;/h2&gt; &#xA;&lt;p&gt;This is an active open-source project. We are always open to people who want to use the system or contribute to it. Contact us if you are looking for implementation tasks that fit your skills. This article describes &lt;a href=&#34;https://flink.apache.org/contributing/how-to-contribute.html&#34;&gt;how to contribute to Apache Flink&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;Apache Flink is an open source project of The Apache Software Foundation (ASF). The Apache Flink project originated from the &lt;a href=&#34;http://stratosphere.eu&#34;&gt;Stratosphere&lt;/a&gt; research project.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ali-bouali/spring-boot-3-jwt-security</title>
    <updated>2023-01-15T01:57:30Z</updated>
    <id>tag:github.com,2023-01-15:/ali-bouali/spring-boot-3-jwt-security</id>
    <link href="https://github.com/ali-bouali/spring-boot-3-jwt-security" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Spring Boot 3.0 Security with JWT Implementation&lt;/h1&gt; &#xA;&lt;p&gt;This project demonstrates the implementation of security using Spring Boot 3.0 and JSON Web Tokens (JWT). It includes the following features:&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;User registration and login with JWT authentication&lt;/li&gt; &#xA; &lt;li&gt;Password encryption using BCrypt&lt;/li&gt; &#xA; &lt;li&gt;Role-based authorization with Spring Security&lt;/li&gt; &#xA; &lt;li&gt;Customized access denied handling&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Technologies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Spring Boot 3.0&lt;/li&gt; &#xA; &lt;li&gt;Spring Security&lt;/li&gt; &#xA; &lt;li&gt;JSON Web Tokens (JWT)&lt;/li&gt; &#xA; &lt;li&gt;BCrypt&lt;/li&gt; &#xA; &lt;li&gt;Maven&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;To get started with this project, you will need to have the following installed on your local machine:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JDK 8+&lt;/li&gt; &#xA; &lt;li&gt;Maven 3+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To build and run the project, follow these steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone the repository: &lt;code&gt;git clone https://github.com/ali-bouali/spring-boot-3-jwt-security.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Navigate to the project directory: cd spring-boot-security-jwt&lt;/li&gt; &#xA; &lt;li&gt;Build the project: mvn clean install&lt;/li&gt; &#xA; &lt;li&gt;Run the project: mvn spring-boot:run&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;-&amp;gt; The application will be available at &lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>apache/beam</title>
    <updated>2023-01-15T01:57:30Z</updated>
    <id>tag:github.com,2023-01-15:/apache/beam</id>
    <link href="https://github.com/apache/beam" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Apache Beam is a unified programming model for Batch and Streaming data processing.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Apache Beam&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://beam.apache.org/&#34;&gt;Apache Beam&lt;/a&gt; is a unified model for defining both batch and streaming data-parallel processing pipelines, as well as a set of language-specific SDKs for constructing pipelines and Runners for executing them on distributed processing backends, including &lt;a href=&#34;http://flink.apache.org/&#34;&gt;Apache Flink&lt;/a&gt;, &lt;a href=&#34;http://spark.apache.org/&#34;&gt;Apache Spark&lt;/a&gt;, &lt;a href=&#34;http://cloud.google.com/dataflow/&#34;&gt;Google Cloud Dataflow&lt;/a&gt;, and &lt;a href=&#34;https://jet.hazelcast.org/&#34;&gt;Hazelcast Jet&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://search.maven.org/#search%7Cgav%7C1%7Cg:%22org.apache.beam%22&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/org.apache.beam/beam-sdks-java-core/badge.svg?sanitize=true&#34; alt=&#34;Maven Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://badge.fury.io/py/apache-beam&#34;&gt;&lt;img src=&#34;https://badge.fury.io/py/apache-beam.svg?sanitize=true&#34; alt=&#34;PyPI version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/apache/beam/sdks/v2/go&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/apache/beam/sdks/v2/go.svg?sanitize=true&#34; alt=&#34;Go version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/apache/beam&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/apache/beam/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Python coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/beam/actions?query=workflow%3A%22Build+python+source+distribution+and+wheels%22+branch%3Amaster+event%3Aschedule&#34;&gt;&lt;img src=&#34;https://github.com/apache/beam/workflows/Build%20python%20source%20distribution%20and%20wheels/badge.svg?branch=master&amp;amp;event=schedule&#34; alt=&#34;Build python source distribution and wheels&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/beam/actions?query=workflow%3A%22Python+Tests%22+branch%3Amaster+event%3Aschedule&#34;&gt;&lt;img src=&#34;https://github.com/apache/beam/workflows/Python%20tests/badge.svg?branch=master&amp;amp;event=schedule&#34; alt=&#34;Python tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/beam/actions?query=workflow%3A%22Java+Tests%22+branch%3Amaster+event%3Aschedule&#34;&gt;&lt;img src=&#34;https://github.com/apache/beam/workflows/Java%20Tests/badge.svg?branch=master&amp;amp;event=schedule&#34; alt=&#34;Java tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci-beam.apache.org/job/beam_PreCommit_Go_Cron/lastCompletedBuild/&#34;&gt;&lt;img src=&#34;https://ci-beam.apache.org/job/beam_PreCommit_Go_Cron/lastCompletedBuild/badge/icon?subject=Go%20Tests%28Jenkins%29&#34; alt=&#34;Go tests (Jenkins)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci-beam.apache.org/job/beam_PreCommit_Java_Cron/lastCompletedBuild/&#34;&gt;&lt;img src=&#34;https://ci-beam.apache.org/job/beam_PreCommit_Java_Cron/lastCompletedBuild/badge/icon?subject=Java%20Tests%28Jenkins%29&#34; alt=&#34;Java tests (Jenkins)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci-beam.apache.org/job/beam_PreCommit_Python_Cron/lastCompletedBuild/&#34;&gt;&lt;img src=&#34;https://ci-beam.apache.org/job/beam_PreCommit_Python_Cron/lastCompletedBuild/badge/icon?subject=Python%20Tests%28Jenkins%29&#34; alt=&#34;Python tests (Jenkins)&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Beam provides a general approach to expressing &lt;a href=&#34;https://en.wikipedia.org/wiki/Embarrassingly_parallel&#34;&gt;embarrassingly parallel&lt;/a&gt; data processing pipelines and supports three categories of users, each of which have relatively disparate backgrounds and needs.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;em&gt;End Users&lt;/em&gt;: Writing pipelines with an existing SDK, running it on an existing runner. These users want to focus on writing their application logic and have everything else just work.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;SDK Writers&lt;/em&gt;: Developing a Beam SDK targeted at a specific user community (Java, Python, Scala, Go, R, graphical, etc). These users are language geeks and would prefer to be shielded from all the details of various runners and their implementations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Runner Writers&lt;/em&gt;: Have an execution environment for distributed processing and would like to support programs written against the Beam Model. Would prefer to be shielded from details of multiple SDKs.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;The Beam Model&lt;/h3&gt; &#xA;&lt;p&gt;The model behind Beam evolved from several internal Google data processing projects, including &lt;a href=&#34;http://research.google.com/archive/mapreduce.html&#34;&gt;MapReduce&lt;/a&gt;, &lt;a href=&#34;http://research.google.com/pubs/pub35650.html&#34;&gt;FlumeJava&lt;/a&gt;, and &lt;a href=&#34;http://research.google.com/pubs/pub41378.html&#34;&gt;Millwheel&lt;/a&gt;. This model was originally known as the “&lt;a href=&#34;http://www.vldb.org/pvldb/vol8/p1792-Akidau.pdf&#34;&gt;Dataflow Model&lt;/a&gt;”.&lt;/p&gt; &#xA;&lt;p&gt;To learn more about the Beam Model (though still under the original name of Dataflow), see the World Beyond Batch: &lt;a href=&#34;https://www.oreilly.com/ideas/the-world-beyond-batch-streaming-101&#34;&gt;Streaming 101&lt;/a&gt; and &lt;a href=&#34;https://www.oreilly.com/ideas/the-world-beyond-batch-streaming-102&#34;&gt;Streaming 102&lt;/a&gt; posts on O’Reilly’s Radar site, and the &lt;a href=&#34;http://www.vldb.org/pvldb/vol8/p1792-Akidau.pdf&#34;&gt;VLDB 2015 paper&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The key concepts in the Beam programming model are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;PCollection&lt;/code&gt;: represents a collection of data, which could be bounded or unbounded in size.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PTransform&lt;/code&gt;: represents a computation that transforms input PCollections into output PCollections.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Pipeline&lt;/code&gt;: manages a directed acyclic graph of PTransforms and PCollections that is ready for execution.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PipelineRunner&lt;/code&gt;: specifies where and how the pipeline should execute.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;SDKs&lt;/h3&gt; &#xA;&lt;p&gt;Beam supports multiple language-specific SDKs for writing pipelines against the Beam Model.&lt;/p&gt; &#xA;&lt;p&gt;Currently, this repository contains SDKs for Java, Python and Go.&lt;/p&gt; &#xA;&lt;p&gt;Have ideas for new SDKs or DSLs? See the &lt;a href=&#34;https://github.com/apache/beam/issues?q=is%3Aopen+is%3Aissue+label%3Asdk-ideas&#34;&gt;sdk-ideas label&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Runners&lt;/h3&gt; &#xA;&lt;p&gt;Beam supports executing programs on multiple distributed processing backends through PipelineRunners. Currently, the following PipelineRunners are available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;DirectRunner&lt;/code&gt; runs the pipeline on your local machine.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;DataflowRunner&lt;/code&gt; submits the pipeline to the &lt;a href=&#34;http://cloud.google.com/dataflow/&#34;&gt;Google Cloud Dataflow&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;FlinkRunner&lt;/code&gt; runs the pipeline on an Apache Flink cluster. The code has been donated from &lt;a href=&#34;https://github.com/dataArtisans/flink-dataflow&#34;&gt;dataArtisans/flink-dataflow&lt;/a&gt; and is now part of Beam.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;SparkRunner&lt;/code&gt; runs the pipeline on an Apache Spark cluster. The code has been donated from &lt;a href=&#34;https://github.com/cloudera/spark-dataflow&#34;&gt;cloudera/spark-dataflow&lt;/a&gt; and is now part of Beam.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;JetRunner&lt;/code&gt; runs the pipeline on a Hazelcast Jet cluster. The code has been donated from &lt;a href=&#34;https://github.com/hazelcast/hazelcast-jet&#34;&gt;hazelcast/hazelcast-jet&lt;/a&gt; and is now part of Beam.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;Twister2Runner&lt;/code&gt; runs the pipeline on a Twister2 cluster. The code has been donated from &lt;a href=&#34;https://github.com/DSC-SPIDAL/twister2&#34;&gt;DSC-SPIDAL/twister2&lt;/a&gt; and is now part of Beam.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Have ideas for new Runners? See the &lt;a href=&#34;https://github.com/apache/beam/issues?q=is%3Aopen+is%3Aissue+label%3Arunner-ideas&#34;&gt;runner-ideas label&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;To learn how to write Beam pipelines, read the Quickstart for [&lt;a href=&#34;https://beam.apache.org/get-started/quickstart-java&#34;&gt;Java&lt;/a&gt;, &lt;a href=&#34;https://beam.apache.org/get-started/quickstart-py&#34;&gt;Python&lt;/a&gt;, or &lt;a href=&#34;https://beam.apache.org/get-started/quickstart-go&#34;&gt;Go&lt;/a&gt;] available on our website.&lt;/p&gt; &#xA;&lt;h2&gt;Contact Us&lt;/h2&gt; &#xA;&lt;p&gt;To get involved in Apache Beam:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;mailto:user-subscribe@beam.apache.org&#34;&gt;Subscribe&lt;/a&gt; or &lt;a href=&#34;mailto:user@beam.apache.org&#34;&gt;mail&lt;/a&gt; the &lt;a href=&#34;http://mail-archives.apache.org/mod_mbox/beam-user/&#34;&gt;user@beam.apache.org&lt;/a&gt; list.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;mailto:dev-subscribe@beam.apache.org&#34;&gt;Subscribe&lt;/a&gt; or &lt;a href=&#34;mailto:dev@beam.apache.org&#34;&gt;mail&lt;/a&gt; the &lt;a href=&#34;http://mail-archives.apache.org/mod_mbox/beam-dev/&#34;&gt;dev@beam.apache.org&lt;/a&gt; list.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://s.apache.org/slack-invite&#34;&gt;Join ASF Slack&lt;/a&gt; on &lt;a href=&#34;https://s.apache.org/beam-slack-channel&#34;&gt;#beam channel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apache/beam/issues/new/choose&#34;&gt;Report an issue&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Instructions for building and testing Beam itself are in the &lt;a href=&#34;https://beam.apache.org/contribute/&#34;&gt;contribution guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;More Information&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://beam.apache.org&#34;&gt;Apache Beam&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://beam.apache.org/use/beam-overview/&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Quickstart: &lt;a href=&#34;https://beam.apache.org/get-started/quickstart-java&#34;&gt;Java&lt;/a&gt;, &lt;a href=&#34;https://beam.apache.org/get-started/quickstart-py&#34;&gt;Python&lt;/a&gt;, &lt;a href=&#34;https://beam.apache.org/get-started/quickstart-go&#34;&gt;Go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://s.apache.org/beam-community-metrics&#34;&gt;Community metrics&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>