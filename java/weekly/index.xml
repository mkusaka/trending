<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-04T01:43:25Z</updated>
  <subtitle>Weekly Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>spring-cloud/spring-cloud-gateway</title>
    <updated>2022-12-04T01:43:25Z</updated>
    <id>tag:github.com,2022-12-04:/spring-cloud/spring-cloud-gateway</id>
    <link href="https://github.com/spring-cloud/spring-cloud-gateway" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Gateway built on Spring Framework and Spring Boot providing routing and more.&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>krahets/hello-algo</title>
    <updated>2022-12-04T01:43:25Z</updated>
    <id>tag:github.com,2022-12-04:/krahets/hello-algo</id>
    <link href="https://github.com/krahets/hello-algo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;《Hello 算法》一本动画图解、能运行、可讨论的数据结构与算法快速入门教程&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.hello-algo.com/&#34;&gt; &lt;img src=&#34;https://www.hello-algo.com/index.assets/conceptual_rendering.png&#34; width=&#34;230&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; 《 Hello，算法 》 &lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; 动画图解、能运行、可讨论的&lt;br&gt;数据结构与算法快速入门教程 &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://www.hello-algo.com/index.assets/animation.gif&#34; width=&#34;400&#34;&gt; &lt;a&gt;&amp;nbsp;&lt;/a&gt; &lt;img src=&#34;https://www.hello-algo.com/index.assets/running_code.gif&#34; width=&#34;400&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;em&gt; 前往阅读 &amp;gt; &lt;a href=&#34;https://www.hello-algo.com/&#34;&gt; hello-algo.com &lt;/a&gt; &lt;/em&gt; &lt;/p&gt; &#xA;&lt;h2&gt;关于本书&lt;/h2&gt; &#xA;&lt;p&gt;本书面向数据结构与算法初学者，致力于达成以下目标：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;开源免费，所有同学都可在网上获取本书；&lt;/li&gt; &#xA; &lt;li&gt;新手友好，适合算法初学者自主学习入门；&lt;/li&gt; &#xA; &lt;li&gt;动画讲解，尽可能地保证平滑的学习曲线；&lt;/li&gt; &#xA; &lt;li&gt;代码导向，提供精简、可运行的算法代码；&lt;/li&gt; &#xA; &lt;li&gt;讨论学习，提问一般能在三日内得到回复；&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;我们正在加速更新本书，期待您来&lt;a href=&#34;https://www.hello-algo.com/chapter_preface/contribution/&#34;&gt;一起参与创作&lt;/a&gt;，以帮助其他读者获取更优质的学习内容：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;如果发现笔误、无效链接、内容缺失、文字歧义、解释不清晰等问题，烦请您帮忙修正；&lt;/li&gt; &#xA; &lt;li&gt;欢迎您通过提交 Pull Request 来增添新内容，包括重写章节、新增章节、翻译代码至不同语言等；&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;有任何问题请与我联系 WeChat: krahets-jyd&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;如果感觉本书对你有所帮助，请点个 Star &lt;span&gt;⭐&lt;/span&gt; 支持一下，谢谢！&lt;/p&gt; &#xA;&lt;h2&gt;致谢&lt;/h2&gt; &#xA;&lt;p&gt;感谢本开源书的每一位撰稿人，是他们的无私奉献让这本书变得更好，他们是：&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/krahets/hello-algo/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=krahets/hello-algo&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;To-Dos&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/krahets/hello-algo/issues/15&#34;&gt;代码翻译&lt;/a&gt;：Java, C++, Python, Go, JavaScript 正在进行中，其他语言请求大佬挑大梁&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 数据结构：散列表、堆（优先队列）、图&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 算法：搜索与回溯、选择 / 堆排序、动态规划、贪心、分治&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The texts, codes, images, photos, and videos in this repository are licensed under &lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;CC BY-NC-SA-4.0&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>deepjavalibrary/djl</title>
    <updated>2022-12-04T01:43:25Z</updated>
    <id>tag:github.com,2022-12-04:/deepjavalibrary/djl</id>
    <link href="https://github.com/deepjavalibrary/djl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Engine-Agnostic Deep Learning Framework in Java&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/deepjavalibrary/djl/master/website/img/deepjavalibrary.png?raw=true&#34; alt=&#34;DeepJavaLibrary&#34; title=&#34;Deep Java Library&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/deepjavalibrary/djl/workflows/Continuous/badge.svg?sanitize=true&#34; alt=&#34;Continuous&#34;&gt; &lt;img src=&#34;https://github.com/deepjavalibrary/djl/workflows/Docs/badge.svg?sanitize=true&#34; alt=&#34;Docs&#34;&gt; &lt;img src=&#34;https://github.com/deepjavalibrary/djl/workflows/Nightly%20Publish/badge.svg?sanitize=true&#34; alt=&#34;Nightly Publish&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Deep Java Library (DJL)&lt;/h1&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Deep Java Library (DJL) is an open-source, high-level, engine-agnostic Java framework for deep learning. DJL is designed to be easy to get started with and simple to use for Java developers. DJL provides a native Java development experience and functions like any other regular Java library.&lt;/p&gt; &#xA;&lt;p&gt;You don&#39;t have to be machine learning/deep learning expert to get started. You can use your existing Java expertise as an on-ramp to learn and use machine learning and deep learning. You can use your favorite IDE to build, train, and deploy your models. DJL makes it easy to integrate these models with your Java applications.&lt;/p&gt; &#xA;&lt;p&gt;Because DJL is deep learning engine agnostic, you don&#39;t have to make a choice between engines when creating your projects. You can switch engines at any point. To ensure the best performance, DJL also provides automatic CPU/GPU choice based on hardware configuration.&lt;/p&gt; &#xA;&lt;p&gt;DJL&#39;s ergonomic API interface is designed to guide you with best practices to accomplish deep learning tasks. The following pseudocode demonstrates running inference:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    // Assume user uses a pre-trained model from model zoo, they just need to load it&#xA;    Criteria&amp;lt;Image, Classifications&amp;gt; criteria =&#xA;            Criteria.builder()&#xA;                    .optApplication(Application.CV.OBJECT_DETECTION) // find object dection model&#xA;                    .setTypes(Image.class, Classifications.class)    // define input and output&#xA;                    .optFilter(&#34;backbone&#34;, &#34;resnet50&#34;)               // choose network architecture&#xA;                    .build();&#xA;&#xA;    Image img = ImageFactory.getInstance().fromUrl(&#34;http://...&#34;);    // read image&#xA;    try (ZooModel&amp;lt;Image, Classifications&amp;gt; model = criteria.loadModel();&#xA;         Predictor&amp;lt;Image, Classifications&amp;gt; predictor = model.newPredictor()) {&#xA;        Classifications result = predictor.predict(img);&#xA;&#xA;        // get the classification and probability&#xA;        ...&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following pseudocode demonstrates running training:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    // Construct your neural network with built-in blocks&#xA;    Block block = new Mlp(28 * 28, 10, new int[] {128, 64});&#xA;&#xA;    Model model = Model.newInstance(&#34;mlp&#34;); // Create an empty model&#xA;    model.setBlock(block);                  // set neural network to model&#xA;&#xA;    // Get training and validation dataset (MNIST dataset)&#xA;    Dataset trainingSet = new Mnist.Builder().setUsage(Usage.TRAIN) ... .build();&#xA;    Dataset validateSet = new Mnist.Builder().setUsage(Usage.TEST) ... .build();&#xA;&#xA;    // Setup training configurations, such as Initializer, Optimizer, Loss ...&#xA;    TrainingConfig config = setupTrainingConfig();&#xA;    Trainer trainer = model.newTrainer(config);&#xA;    /*&#xA;     * Configure input shape based on dataset to initialize the trainer.&#xA;     * 1st axis is batch axis, we can use 1 for initialization.&#xA;     * MNIST is 28x28 grayscale image and pre processed into 28 * 28 NDArray.&#xA;     */&#xA;    trainer.initialize(new Shape(1, 28 * 28));&#xA;    EasyTrain.fit(trainer, epoch, trainingSet, validateSet);&#xA;&#xA;    // Save the model&#xA;    model.save(modelDir, &#34;mlp&#34;);&#xA;&#xA;    // Close the resources&#xA;    trainer.close();&#xA;    model.close();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/deepjavalibrary/djl/master/docs/quick_start.md&#34;&gt;Getting Started&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/deepjavalibrary/djl/master/docs/README.md#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://d2l.djl.ai/&#34;&gt;DJL&#39;s D2L Book&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://javadoc.djl.ai/&#34;&gt;JavaDoc API Reference&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Release Notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepjavalibrary/djl/releases/tag/v0.20.0&#34;&gt;0.20.0&lt;/a&gt; (&lt;a href=&#34;https://github.com/deepjavalibrary/djl/tree/v0.20.0&#34;&gt;Code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepjavalibrary/djl/releases/tag/v0.19.0&#34;&gt;0.19.0&lt;/a&gt; (&lt;a href=&#34;https://github.com/deepjavalibrary/djl/tree/v0.19.0&#34;&gt;Code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepjavalibrary/djl/releases/tag/v0.18.0&#34;&gt;0.18.0&lt;/a&gt; (&lt;a href=&#34;https://github.com/deepjavalibrary/djl/tree/v0.18.0&#34;&gt;Code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepjavalibrary/djl/releases/tag/v0.17.0&#34;&gt;0.17.0&lt;/a&gt; (&lt;a href=&#34;https://github.com/deepjavalibrary/djl/tree/v0.17.0&#34;&gt;Code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepjavalibrary/djl/releases/tag/v0.16.0&#34;&gt;0.16.0&lt;/a&gt; (&lt;a href=&#34;https://github.com/deepjavalibrary/djl/tree/v0.16.0&#34;&gt;Code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepjavalibrary/djl/releases/tag/v0.15.0&#34;&gt;0.15.0&lt;/a&gt; (&lt;a href=&#34;https://github.com/deepjavalibrary/djl/tree/v0.15.0&#34;&gt;Code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepjavalibrary/djl/releases/tag/v0.14.0&#34;&gt;0.14.0&lt;/a&gt; (&lt;a href=&#34;https://github.com/deepjavalibrary/djl/tree/v0.14.0&#34;&gt;Code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepjavalibrary/djl/releases/tag/v0.13.0&#34;&gt;0.13.0&lt;/a&gt; (&lt;a href=&#34;https://github.com/deepjavalibrary/djl/tree/v0.13.0&#34;&gt;Code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepjavalibrary/djl/releases/tag/v0.12.0&#34;&gt;0.12.0&lt;/a&gt; (&lt;a href=&#34;https://github.com/deepjavalibrary/djl/tree/v0.12.0&#34;&gt;Code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepjavalibrary/djl/releases/tag/v0.11.0&#34;&gt;0.11.0&lt;/a&gt; (&lt;a href=&#34;https://github.com/deepjavalibrary/djl/tree/v0.11.0&#34;&gt;Code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepjavalibrary/djl/releases/tag/v0.10.0&#34;&gt;0.10.0&lt;/a&gt; (&lt;a href=&#34;https://github.com/deepjavalibrary/djl/tree/v0.10.0&#34;&gt;Code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepjavalibrary/djl/releases/tag/v0.9.0&#34;&gt;0.9.0&lt;/a&gt; (&lt;a href=&#34;https://github.com/deepjavalibrary/djl/tree/v0.9.0&#34;&gt;Code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepjavalibrary/djl/releases/tag/v0.8.0&#34;&gt;0.8.0&lt;/a&gt; (&lt;a href=&#34;https://github.com/deepjavalibrary/djl/tree/v0.8.0&#34;&gt;Code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepjavalibrary/djl/releases/tag/v0.6.0&#34;&gt;0.6.0&lt;/a&gt; (&lt;a href=&#34;https://github.com/deepjavalibrary/djl/tree/v0.6.0&#34;&gt;Code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepjavalibrary/djl/releases/tag/v0.5.0&#34;&gt;0.5.0&lt;/a&gt; (&lt;a href=&#34;https://github.com/deepjavalibrary/djl/tree/v0.5.0&#34;&gt;Code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepjavalibrary/djl/releases/tag/v0.4.0&#34;&gt;0.4.0&lt;/a&gt; (&lt;a href=&#34;https://github.com/deepjavalibrary/djl/tree/v0.4.0&#34;&gt;Code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepjavalibrary/djl/releases/tag/v0.3.0&#34;&gt;0.3.0&lt;/a&gt; (&lt;a href=&#34;https://github.com/deepjavalibrary/djl/tree/v0.3.0&#34;&gt;Code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepjavalibrary/djl/releases/tag/v0.2.1&#34;&gt;0.2.1&lt;/a&gt; (&lt;a href=&#34;https://github.com/deepjavalibrary/djl/tree/v0.2.1&#34;&gt;Code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepjavalibrary/djl/releases/tag/v0.2.0&#34;&gt;0.2.0 Initial release&lt;/a&gt; (&lt;a href=&#34;https://github.com/deepjavalibrary/djl/tree/v0.2.0&#34;&gt;Code&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The release of DJL 0.21.0 is planned for January or February 2022.&lt;/p&gt; &#xA;&lt;h2&gt;Building From Source&lt;/h2&gt; &#xA;&lt;p&gt;To build from source, begin by checking out the code. Once you have checked out the code locally, you can build it as follows using Gradle:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# for Linux/macOS:&#xA;./gradlew build&#xA;&#xA;# for Windows:&#xA;gradlew build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To increase build speed, you can use the following command to skip unit tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# for Linux/macOS:&#xA;./gradlew build -x test&#xA;&#xA;# for Windows:&#xA;gradlew build -x test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Importing into eclipse&lt;/h3&gt; &#xA;&lt;p&gt;to import source project into eclipse&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# for Linux/macOS:&#xA;./gradlew eclipse&#xA;&#xA;&#xA;# for Windows:&#xA;gradlew eclipse&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;in eclipse&lt;/p&gt; &#xA;&lt;p&gt;file-&amp;gt;import-&amp;gt;gradle-&amp;gt;existing gradle project&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; please set your workspace text encoding setting to UTF-8&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;You can read our guide to &lt;a href=&#34;https://raw.githubusercontent.com/deepjavalibrary/djl/master/docs/forums.md&#34;&gt;community forums, following DJL, issues, discussions, and RFCs&lt;/a&gt; to figure out the best way to share and find content from the DJL community.&lt;/p&gt; &#xA;&lt;p&gt;Join our &lt;a href=&#34;http://tiny.cc/djl_slack&#34;&gt;&lt;img src=&#34;https://cdn3.iconfinder.com/data/icons/social-media-2169/24/social_media_social_media_logo_slack-512.png&#34; width=&#34;20px&#34;&gt; slack channel&lt;/a&gt; to get in touch with the development team, for questions and discussions.&lt;/p&gt; &#xA;&lt;p&gt;Follow our &lt;a href=&#34;https://twitter.com/deepjavalibrary&#34;&gt;&lt;img src=&#34;https://cdn2.iconfinder.com/data/icons/social-media-2285/512/1_Twitter_colored_svg-512.png&#34; width=&#34;20px&#34;&gt; twitter&lt;/a&gt; to see updates about new content, features, and releases.&lt;/p&gt; &#xA;&lt;p&gt;关注我们 &lt;a href=&#34;https://zhuanlan.zhihu.com/c_1255493231133417472&#34;&gt;&lt;img src=&#34;https://www.iconfinder.com/icons/5060515/download/svg/512&#34; width=&#34;20px&#34;&gt; 知乎专栏&lt;/a&gt; 获取DJL最新的内容！&lt;/p&gt; &#xA;&lt;h2&gt;Useful Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://djl.ai/&#34;&gt;DJL Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.djl.ai/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.djl.ai/docs/demos/index.html&#34;&gt;DJL Demos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://d2l.djl.ai/&#34;&gt;Dive into Deep Learning Book Java version&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/deepjavalibrary/djl/master/LICENSE&#34;&gt;Apache-2.0 License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>