<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-19T01:52:34Z</updated>
  <subtitle>Weekly Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hkhcoder/vprofile-project</title>
    <updated>2023-11-19T01:52:34Z</updated>
    <id>tag:github.com,2023-11-19:/hkhcoder/vprofile-project</id>
    <link href="https://github.com/hkhcoder/vprofile-project" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Prerequisites&lt;/h1&gt; &#xA;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JDK 11&lt;/li&gt; &#xA; &lt;li&gt;Maven 3&lt;/li&gt; &#xA; &lt;li&gt;MySQL 8&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Technologies&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Spring MVC&lt;/li&gt; &#xA; &lt;li&gt;Spring Security&lt;/li&gt; &#xA; &lt;li&gt;Spring Data JPA&lt;/li&gt; &#xA; &lt;li&gt;Maven&lt;/li&gt; &#xA; &lt;li&gt;JSP&lt;/li&gt; &#xA; &lt;li&gt;Tomcat&lt;/li&gt; &#xA; &lt;li&gt;MySQL&lt;/li&gt; &#xA; &lt;li&gt;Memcached&lt;/li&gt; &#xA; &lt;li&gt;Rabbitmq&lt;/li&gt; &#xA; &lt;li&gt;ElasticSearch&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Database&lt;/h1&gt; &#xA;&lt;p&gt;Here,we used Mysql DB sql dump file:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;/src/main/resources/db_backup.sql&lt;/li&gt; &#xA; &lt;li&gt;db_backup.sql file is a mysql dump file.we have to import this dump to mysql db server&lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;mysql -u &amp;lt;user_name&amp;gt; -p accounts &amp;lt; db_backup.sql&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>krahets/LeetCode-Book</title>
    <updated>2023-11-19T01:52:34Z</updated>
    <id>tag:github.com,2023-11-19:/krahets/LeetCode-Book</id>
    <link href="https://github.com/krahets/LeetCode-Book" rel="alternate"></link>
    <summary type="html">&lt;p&gt;《剑指 Offer》 Python, Java, C++ 解题代码，LeetBook《图解算法数据结构》配套代码仓&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://leetcode-cn.com/leetbook/detail/illustration-of-algorithm/&#34;&gt; &lt;img src=&#34;https://pic.leetcode-cn.com/1599187248-gDiWnC-image.png&#34; width=&#34;490&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/LeetCode%20tests-75%20accepted-brightgreen&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Language-Python-teal&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Language-Java-orange&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Language-C++-blue&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode-cn.com/leetbook/detail/illustration-of-algorithm/&#34;&gt;《图解算法数据结构》&lt;/a&gt;是一本面向算法初学者和互联网求职者编写的 LeetBook 手册。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;图文详解 75 道题目，覆盖主要算法知识点。&lt;/li&gt; &#xA; &lt;li&gt;题目活跃于各大互联网公司招聘中，可使笔面试准备事半功倍。&lt;/li&gt; &#xA; &lt;li&gt;致力于行文深入浅出、图文搭配，提供简洁的 Python, Java, C++ 解题代码。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;本仓库包含“图解算法数据结构”、“Krahets 笔面试精选 88 题”和“剑指 Offer”的题解内容：&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;LeetCode-Book&#xA;├── leetbook_ioa               # 《图解算法数据结构》题解和专栏文档、代码&#xA;├── selected_coding_interview  # 《Krahets 笔面试精选 88 题》题解文档、代码&#xA;└── sword_for_offer            # 《剑指 Offer》题解文档、代码、刷题计划&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;若本 LeetBook 对您有所帮助，请在页面右上角点个 Star &lt;span&gt;⭐&lt;/span&gt; 支持一下，谢谢！&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;如何学习算法&lt;/h2&gt; &#xA;&lt;h3&gt;第一步：看入门书&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34; href=&#34;https://github.com/krahets/hello-algo&#34;&gt; &lt;img src=&#34;https://www.hello-algo.com/index.assets/hello_algo_header.png&#34; width=&#34;550&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/krahets/hello-algo&#34;&gt;《Hello 算法》&lt;/a&gt;：动画图解、一键运行的数据结构与算法教程。&lt;/p&gt; &#xA;&lt;p&gt;这本书旨在引导初学者探索数据结构与算法的知识地图，掌握刷题需要的前置知识与工具库。&lt;/p&gt; &#xA;&lt;h3&gt;第二步：刷算法题&lt;/h3&gt; &#xA;&lt;p&gt;推荐以下 LeetCode 题单（前两项 &lt;a href=&#34;https://leetcode.cn/u/jyd/&#34;&gt;@Krahets&lt;/a&gt; 题解全覆盖）：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://leetcode.cn/studyplan/selected-coding-interview/&#34;&gt;Krahets 笔面试精选 88 题&lt;/a&gt;：从“剑指 Offer”和“热题 100”精选出的 88 道高频算法笔试题。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://leetcode-cn.com/leetbook/detail/illustration-of-algorithm/&#34;&gt;图解算法数据结构&lt;/a&gt;（&lt;a href=&#34;https://leetcode.cn/studyplan/coding-interviews/&#34;&gt;Interview-75&lt;/a&gt;）：题目更贴近实际应用，相对“剑指 Offer”难度有所增加。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://leetcode.cn/studyplan/top-100-liked/&#34;&gt;LeetCode 热题 100&lt;/a&gt;：力扣用户最喜爱的 100 道题。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://leetcode.cn/studyplan/top-interview-150/&#34;&gt;面试经典 150 题&lt;/a&gt;：150 道经典面试力扣题。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://leetcode.cn/studyplan/leetcode-75/&#34;&gt;LeetCode-75&lt;/a&gt;：精选面试必备的 75 道核心题目。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;对初学者的刷题建议：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;建议每日刷 2~3 题。若能轻松完成，可以尝试增加至 5～8 题。&lt;/li&gt; &#xA; &lt;li&gt;刷题的质量远重要于数量。务必确保你真正理解了每个题目的解法及背后的算法原理。&lt;/li&gt; &#xA; &lt;li&gt;建议你按照目录顺序做题。如果感觉某题很难，可以先跳过，稍后再回顾挑战。&lt;/li&gt; &#xA; &lt;li&gt;很多题目都有不止一种解法，请你注意比较和探讨各种方法的特点和适用情况。&lt;/li&gt; &#xA; &lt;li&gt;如果你发现自己遗忘了题目解法，不必灰心。艾宾浩斯遗忘曲线指出，通常需要复习至少三次，才能真正掌握一个知识点。&lt;/li&gt; &#xA; &lt;li&gt;行百里者半九十。坚持至关重要，加油，相信你可以做到！&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The texts, code and images in this repository are licensed under &lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;CC BY-NC-SA-4.0&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>xuchengsheng/spring-reading</title>
    <updated>2023-11-19T01:52:34Z</updated>
    <id>tag:github.com,2023-11-19:/xuchengsheng/spring-reading</id>
    <link href="https://github.com/xuchengsheng/spring-reading" rel="alternate"></link>
    <summary type="html">&lt;p&gt;深入探索Spring框架的核心机制与奥秘。这里是Lex——拥有8年Java后端经验的程序员分享的Spring源码阅读系列。从IOC容器、后置处理器、到Spring核心注解，一步步揭示Spring的魅力与内部工作原理。加入我，与Spring一起成长！&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img alt=&#34;logo&#34; src=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/image/banner.png&#34; style=&#34;height: 80px&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h2&gt;深入Spring，从源码开始！&lt;/h2&gt; &#xA; &lt;h4&gt;探索Java最受欢迎的框架，理解它的内部机制，带大家从入门到精通。&lt;/h4&gt; &#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/xuchengsheng/spring-reading/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/xuchengsheng/spring-reading?logo=github&amp;amp;logoColor=%23EF2D5E&amp;amp;label=Stars&amp;amp;labelColor=%23000000&amp;amp;color=%23EF2D5E&amp;amp;cacheSeconds=3600&#34; alt=&#34;Stars Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xuchengsheng&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/followers/xuchengsheng?label=Followers&amp;amp;logo=github&amp;amp;logoColor=%23FC521F&amp;amp;labelColor=%231A2477&amp;amp;color=%23FC521F&amp;amp;cacheSeconds=3600&#34; alt=&#34;Follow Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xuchengsheng/spring-reading/fork&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/xuchengsheng/spring-reading?label=Forks&amp;amp;logo=github&amp;amp;logoColor=%23F2BB13&amp;amp;labelColor=%23BE2323&amp;amp;color=%23F2BB13&#34; alt=&#34;Fork Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xuchengsheng/spring-reading/watchers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/watchers/xuchengsheng/spring-reading?label=Watchers&amp;amp;logo=github&amp;amp;logoColor=%23FF4655&amp;amp;labelColor=%234169E1&amp;amp;color=%23FF4655&amp;amp;cacheSeconds=3600&#34; alt=&#34;Watchers Badge&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://visitor-badge.lithub.cc/badge?page_id=github.com/xuchengsheng&amp;amp;left_text=Visitors&#34; alt=&#34;Visitor Badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/WeChat-xcs19930428-%2307C160?logo=wechat&#34; alt=&#34;Wechat Badge&#34;&gt; &lt;a href=&#34;https://blog.csdn.net/duzhuang2399&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/xml?url=https%3A%2F%2Fblog.csdn.net%2Fduzhuang2399&amp;amp;query=%2F%2F*%5B%40id%3D%22userSkin%22%5D%2Fdiv%5B1%5D%2Fdiv%5B2%5D%2Fdiv%5B1%5D%2Fdiv%2Fdiv%5B2%5D%2Fdiv%5B1%5D%2Fdiv%5B1%5D%2Fdiv%5B2%5D%2Fspan&amp;amp;logo=C&amp;amp;logoColor=red&amp;amp;label=CSDN&amp;amp;color=red&amp;amp;cacheSeconds=3600&#34; alt=&#34;CSDN Badge&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; ⚡ &lt;a href=&#34;#技术&#34;&gt;技术&lt;/a&gt; | 👋 &lt;a href=&#34;#简介&#34;&gt;简介&lt;/a&gt; | 🍵 &lt;a href=&#34;#为何做Spring源码分析&#34;&gt;Why&lt;/a&gt; | 🙏 &lt;a href=&#34;#顺手点个星&#34;&gt;点个星&lt;/a&gt; | 🌱 &lt;a href=&#34;#spring-源码阅读系列&#34;&gt;Spring源码&lt;/a&gt; | 💬 &lt;a href=&#34;#与我联系&#34;&gt;联系我&lt;/a&gt; | ⛵ &lt;a href=&#34;#欢迎贡献&#34;&gt;贡献&lt;/a&gt; | 🔄 &lt;a href=&#34;#持续更新中&#34;&gt;更新&lt;/a&gt; | 💻 &lt;a href=&#34;#我的-github-统计&#34;&gt;统计&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;⚡技术&lt;/h2&gt; &#xA;&lt;div align=&#34;left&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/Java-1.8%2B-%23437291?logo=openjdk&amp;amp;logoColor=%23437291&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/Spring-5.3.10-%23437291?logo=Spring&amp;amp;logoColor=%236DB33F&amp;amp;color=%236DB33F&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/SpringBoot-2.5.5-%23437291?logo=SpringBoot&amp;amp;logoColor=%236DB33F&amp;amp;color=%236DB33F&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/Maven-3.6.3-%23437291?logo=Apache%20Maven&amp;amp;logoColor=%23C71A36&amp;amp;color=%23C71A36&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/JSR-330-%2366CCFF?logo=OpenJDK&amp;amp;logoColor=%2366CCFF&amp;amp;color=%2366CCFF&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/JSR-250-%23FF9900?logo=OpenJDK&amp;amp;logoColor=%23FF9900&amp;amp;color=%23FF9900&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;👋简介&lt;/h2&gt; &#xA;&lt;p&gt;大家好呀，我是Lex👨‍💻。我是一名拥有8年经验的Java 后端开发人员👨‍💼，也是一个对 Spring 框架充满热情❤️的程序员。为了帮助那些希望深入了解 Spring 框架的程序员们🧑‍💻，我创建了这个 “Spring 源码阅读系列”📖。通过这个系列，我希望能够与你们共同探索 Spring 的内部工作机制⚙️。如果您有同样的兴趣或问题🤔，请联系我📩！&lt;/p&gt; &#xA;&lt;h2&gt;🍵&lt;strong&gt;为何做Spring源码分析&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;在我作为框架研发的开发者👨‍🔬的工作中，我经常遇到需要深入理解和调整框架行为的情况🔧。这些工作不只是简单地使用框架的API，更多地是需要对框架的内部工作方式有详细的了解🔍。虽然Github上有关于Spring的简化版本📦，这些对于入门学习确实有很大的帮助✅，但当涉及到真实的项目应用时，与真正的Spring框架还是有很大的差异❌。因此，我开始深入研究Spring的源码，希望能够更透彻地理解其内部的工作机制，以便更好地应用到我的实际工作中🧰。分享我的源码分析📝，也是为了给那些希望真正理解Spring，而不仅仅是使用它的开发者提供一些参考和帮助🙌。&lt;/p&gt; &#xA;&lt;h2&gt;🙏顺手点个星&lt;/h2&gt; &#xA;&lt;p&gt;亲爱的朋友们👥，我真的花了很多心思💭去研究和整理这个“Spring 源码阅读系列”📘。如果你觉得这东西还不错👍，或者给你带来了一点点帮助🤗，麻烦点一下星星吧🌟。这真的对我意义重大🎖，每一颗星✨都能让我觉得所有的努力都是值得的💪。我知道这是小事一桩，但你的那一下点击🖱，对我来说就是最好的鼓励🎉。无论如何，都要感谢你抽时间🕰阅读我的内容，真的很感激🙏！&lt;/p&gt; &#xA;&lt;h2&gt;🌱Spring 源码阅读系列&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;👑 基础知识&lt;/h3&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;em&gt;Spring 框架中的资源加载与访问、元数据操作、Bean定义与注册，以及Bean定义的读取与扫描。&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-resources/spring-resource/README.md&#34;&gt;&lt;strong&gt;资源加载Resource&lt;/strong&gt;&lt;/a&gt; - 处理 Spring 框架中与资源加载相关的功能。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-resources/spring-resource-resourceLoader/README.md&#34;&gt;&lt;strong&gt;资源加载器ResourceLoader&lt;/strong&gt;&lt;/a&gt; - 实现资源加载器接口，用于获取应用程序的资源。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-resources/spring-resource-documentLoader/README.md&#34;&gt;&lt;strong&gt;文档加载器DocumentLoader&lt;/strong&gt;&lt;/a&gt; - 负责加载文档资源，支持不同文档格式的加载。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-metadata/spring-metadata-metadataReader/README.md&#34;&gt;&lt;strong&gt;元数据读取MetadataReader&lt;/strong&gt;&lt;/a&gt; - 提供对类元数据的访问和读取功能。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-metadata/spring-metadata-annotationMetadata/README.md&#34;&gt;&lt;strong&gt;注解元数据AnnotationMetadata&lt;/strong&gt;&lt;/a&gt; - 处理与注解相关的元数据，支持对注解属性的访问。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-beans/spring-bean-beanDefinition/README.md&#34;&gt;&lt;strong&gt;Bean定义BeanDefinition&lt;/strong&gt;&lt;/a&gt; - 定义 Spring 容器中的 Bean，包括属性、构造函数等信息。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-beans/spring-bean-beanDefinitionHolder/README.md&#34;&gt;&lt;strong&gt;Bean定义持有者BeanDefinitionHolder&lt;/strong&gt;&lt;/a&gt; - 持有 BeanDefinition 对象以及与之关联的名称和别名。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-beans/spring-bean-beanDefinitionRegistry/README.md&#34;&gt;&lt;strong&gt;Bean定义注册器BeanDefinitionRegistry&lt;/strong&gt;&lt;/a&gt; - 用于注册和管理 Bean 定义的接口。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-beans/spring-bean-xmlBeanDefinitionReader/README.md&#34;&gt;&lt;strong&gt;XML Bean定义读取器XmlBeanDefinitionReader&lt;/strong&gt;&lt;/a&gt; - 从 XML 文件中读取并注册 Bean 定义。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-beans/spring-bean-propertiesBeanDefinitionReader/README.md&#34;&gt;&lt;strong&gt;属性文件Bean定义读取器PropertiesBeanDefinitionReader&lt;/strong&gt;&lt;/a&gt; - 从属性文件中读取并注册 Bean 定义。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-beans/spring-bean-groovyBeanDefinitionReader/README.md&#34;&gt;&lt;strong&gt;Groovy脚本Bean定义读取器GroovyBeanDefinitionReader&lt;/strong&gt;&lt;/a&gt; - 从 Groovy 脚本中读取并注册 Bean 定义。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-beans/spring-bean-annotatedBeanDefinitionReader/README.md&#34;&gt;&lt;strong&gt;注解Bean定义读取器AnnotatedBeanDefinitionReader&lt;/strong&gt;&lt;/a&gt; - 从注解中读取并注册 Bean 定义。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-beans/spring-bean-classPathBeanDefinitionScanner/README.md&#34;&gt;&lt;strong&gt;类路径Bean定义扫描器ClassPathBeanDefinitionScanner&lt;/strong&gt;&lt;/a&gt; - 扫描类路径以注册 Bean 定义。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;🔅 核心方法&lt;/h3&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;em&gt;Spring 框架背后的动力，这些核心方法确保了依赖注入、Bean 生命周期管理、配置解析和许多其他关键功能。&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-core/spring-core-getBean/README.md&#34;&gt;&lt;strong&gt;获取Bean实例getBean()&lt;/strong&gt;&lt;/a&gt; - 从Bean的定义到其实例化，全面揭示Spring如何管理Bean的生命周期。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-core/spring-core-resolveDependency/README.md&#34;&gt;&lt;strong&gt;解析依赖resolveDependency()&lt;/strong&gt;&lt;/a&gt; - 探索Spring如何优雅地解决Bean之间的依赖关系，确保应用稳定运行。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;💡 后置处理器与初始化&lt;/h3&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;em&gt;深入 Spring 的后置处理技巧，揭示它如何优雅地初始化和管理 beans。&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-interface/spring-interface-beanDefinitionRegistryPostProcessor/README.md&#34;&gt;&lt;strong&gt;动态修改Bean定义BeanDefinitionRegistryPostProcessor&lt;/strong&gt;&lt;/a&gt; - 揭示如何修改应用的 bean 定义。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-interface/spring-interface-beanFactoryPostProcessor/README.md&#34;&gt;&lt;strong&gt;动态调整Bean配置BeanFactoryPostProcessor&lt;/strong&gt;&lt;/a&gt; - 理解 Spring 如何在 bean 初始化之前进行微调。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-interface/spring-interface-beanPostProcessor/README.md&#34;&gt;&lt;strong&gt;调整Bean属性BeanPostProcessor&lt;/strong&gt;&lt;/a&gt; - 探索如何在 bean 实例化后进行拦截。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-interface/spring-interface-instantiationAwareBeanPostProcessor/README.md&#34;&gt;&lt;strong&gt;Bean实例拦截InstantiationAwareBeanPostProcessor&lt;/strong&gt;&lt;/a&gt; - 理解它如何在实例化 bean 之前进行操作。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-interface/spring-interface-destructionAwareBeanPostProcessor/README.md&#34;&gt;&lt;strong&gt;管理Bean销毁周期DestructionAwareBeanPostProcessor&lt;/strong&gt;&lt;/a&gt; - 揭露它如何管理 bean 的销毁生命周期。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-interface/spring-interface-mergedBeanDefinitionPostProcessor/README.md&#34;&gt;&lt;strong&gt;Bean定义的动态处理MergedBeanDefinitionPostProcessor&lt;/strong&gt;&lt;/a&gt; - 理解如何合并 bean 的定义。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-interface/spring-interface-smartInstantiationAwareBeanPostProcessor/README.md&#34;&gt;&lt;strong&gt;调整Bean实例化策略SmartInstantiationAwareBeanPostProcessor&lt;/strong&gt;&lt;/a&gt; - 深入了解其智能实例化的策略。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-interface/spring-interface-initializingBean/README.md&#34;&gt;&lt;strong&gt;属性设置后的初始化操作InitializingBean&lt;/strong&gt;&lt;/a&gt; - 揭露如何在 bean 初始化后进行操作。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-interface/spring-interface-disposableBean/README.md&#34;&gt;&lt;strong&gt;资源清理与销毁DisposableBean&lt;/strong&gt;&lt;/a&gt; - 探查它如何确保 bean 的正确销毁。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-interface/spring-interface-smartInitializingSingleton/README.md&#34;&gt;&lt;strong&gt;All Beans完全初始化后SmartInitializingSingleton&lt;/strong&gt;&lt;/a&gt; - 理解它如何在所有单例 bean 初始化后进行操作。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;🛠 Aware接口&lt;/h3&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;em&gt;探索 Spring 的自我感知能力，如何赋予 beans 更多的上下文感知特性。&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-aware/spring-aware-beanNameAware/README.md&#34;&gt;&lt;strong&gt;获取Bean名称BeanNameAware&lt;/strong&gt;&lt;/a&gt; - 当一个 bean 需要知道其在容器中的名字时。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-aware/spring-aware-beanClassLoaderAware/README.md&#34;&gt;&lt;strong&gt;获取类加载器BeanClassLoaderAware&lt;/strong&gt;&lt;/a&gt; - 揭示如何为 bean 提供类加载器的引用。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-aware/spring-aware-beanFactoryAware/README.md&#34;&gt;&lt;strong&gt;与Bean工厂互动BeanFactoryAware&lt;/strong&gt;&lt;/a&gt; - 探索 bean 如何与其工厂互动。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-aware/spring-aware-environmentAware/README.md&#34;&gt;&lt;strong&gt;感知运行环境EnvironmentAware&lt;/strong&gt;&lt;/a&gt; - 了解 bean 如何感知并与其运行的环境互动。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-aware/spring-aware-embeddedValueResolverAware/README.md&#34;&gt;&lt;strong&gt;嵌入值解析EmbeddedValueResolverAware&lt;/strong&gt;&lt;/a&gt; - 探查如何提供字符串值解析策略给 bean。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-aware/spring-aware-resourceLoaderAware/README.md&#34;&gt;&lt;strong&gt;资源加载策略ResourceLoaderAware&lt;/strong&gt;&lt;/a&gt; - 理解如何为 bean 提供一个资源加载器。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-aware/spring-aware-applicationEventPublisherAware/README.md&#34;&gt;&lt;strong&gt;发布应用事件ApplicationEventPublisherAware&lt;/strong&gt;&lt;/a&gt; - 揭露 bean 如何发布事件到应用上下文。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-aware/spring-aware-messageSourceAware/README.md&#34;&gt;&lt;strong&gt;访问消息源MessageSourceAware&lt;/strong&gt;&lt;/a&gt; - 深入了解 bean 如何访问消息源。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-aware/spring-aware-applicationStartupAware/README.md&#34;&gt;&lt;strong&gt;感知应用启动过程ApplicationStartupAware&lt;/strong&gt;&lt;/a&gt; - 理解 bean 如何感知应用的启动过程。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-aware/spring-aware-applicationContextAware/README.md&#34;&gt;&lt;strong&gt;访问应用上下文ApplicationContextAware&lt;/strong&gt;&lt;/a&gt; - 探索 bean 如何访问其运行的应用上下文。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-aware/spring-aware-importAware/README.md&#34;&gt;&lt;strong&gt;了解关联导入信息ImportAware&lt;/strong&gt;&lt;/a&gt; - 揭露 bean 如何知道与其关联的导入元数据。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;🎖 核心注解&lt;/h3&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;em&gt;了解 Spring 如何通过注解驱动开发，简化和加强代码。&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-annotation/spring-annotation-configuration/README.md&#34;&gt;&lt;strong&gt;Java配置@Configuration&lt;/strong&gt;&lt;/a&gt; - 揭露如何使用 Java 配置定义 beans。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-annotation/spring-annotation-componentScan/README.md&#34;&gt;&lt;strong&gt;组件扫描@ComponentScan&lt;/strong&gt;&lt;/a&gt; - 探索如何自动检测和注册 beans。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-annotation/spring-annotation-bean/README.md&#34;&gt;&lt;strong&gt;Bean定义@Bean&lt;/strong&gt;&lt;/a&gt; - 理解如何通过 Java 方法定义 beans。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-annotation/spring-annotation-import/README.md&#34;&gt;&lt;strong&gt;导入配置@Import&lt;/strong&gt;&lt;/a&gt; - 揭示如何导入其他配置类或组件。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-annotation/spring-annotation-propertySource/README.md&#34;&gt;&lt;strong&gt;属性绑定@PropertySource&lt;/strong&gt;&lt;/a&gt; - 深入了解如何为应用上下文添加属性源。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-annotation/spring-annotation-dependsOn/README.md&#34;&gt;&lt;strong&gt;初始化顺序@DependsOn&lt;/strong&gt;&lt;/a&gt; - 精确控制 Spring Beans 的加载顺序。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-annotation/spring-annotation-conditional/README.md&#34;&gt;&lt;strong&gt;条件注册@Conditional&lt;/strong&gt;&lt;/a&gt; - 从基础使用到源码分析，全方位理解Spring的条件注册策略。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-annotation/spring-annotation-lazy/README.md&#34;&gt;&lt;strong&gt;延迟加载@Lazy&lt;/strong&gt;&lt;/a&gt; - 如何优雅地实现 Spring Beans 的延迟加载。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-annotation/spring-annotation-value/README.md&#34;&gt;&lt;strong&gt;属性注入@Value&lt;/strong&gt;&lt;/a&gt; - 如何在Spring中优雅地注入配置属性。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-annotation/spring-annotation-autowired/README.md&#34;&gt;&lt;strong&gt;依赖注入@Autowired&lt;/strong&gt;&lt;/a&gt; - 了解如何通过@Autowired实现依赖管理和连接组件。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;📜 JSR 规范&lt;/h3&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;em&gt;理解 Spring 是如何实现和优化 JSR 规范中的注解，深入揭露其与 Java 标准化的紧密结合。&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-jsr/spring-jsr330-inject/README.md&#34;&gt;&lt;strong&gt;注入依赖@Inject&lt;/strong&gt;&lt;/a&gt; - Spring中如何通过&lt;code&gt;@Inject&lt;/code&gt;实现依赖注入。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-jsr/spring-jsr330-named/README.md&#34;&gt;&lt;strong&gt;具名组件@Named&lt;/strong&gt;&lt;/a&gt; - 使用&lt;code&gt;@Named&lt;/code&gt;为Spring Beans提供具体的标识。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-jsr/spring-jsr250-postConstruct/README.md&#34;&gt;&lt;strong&gt;初始化后操作@PostConstruct&lt;/strong&gt;&lt;/a&gt; - 如何利用&lt;code&gt;@PostConstruct&lt;/code&gt;在Bean初始化后执行特定操作。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-jsr/spring-jsr250-preDestroy/README.md&#34;&gt;&lt;strong&gt;销毁前操作@PreDestroy&lt;/strong&gt;&lt;/a&gt; - 揭示&lt;code&gt;@PreDestroy&lt;/code&gt;如何在Bean销毁前执行特定任务。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-jsr/spring-jsr250-resource/README.md&#34;&gt;&lt;strong&gt;资源绑定@Resource&lt;/strong&gt;&lt;/a&gt; - 如何优雅地使用&lt;code&gt;@Resource&lt;/code&gt;在Spring中注入资源。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-jsr/spring-jsr330-provider/README.md&#34;&gt;&lt;strong&gt;提供者机制Provider&lt;/strong&gt;&lt;/a&gt; - 探索Spring中Provider的作用和如何使用它来提供Bean实例。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-jsr/spring-jsr330-qualifier/README.md&#34;&gt;&lt;strong&gt;限定符@Qualifier&lt;/strong&gt;&lt;/a&gt; - 了解&lt;code&gt;@Qualifier&lt;/code&gt;的重要性及其在解决注入冲突中的作用。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-jsr/spring-jsr330-scope/README.md&#34;&gt;&lt;strong&gt;作用域定义@Scope&lt;/strong&gt;&lt;/a&gt; - 揭露如何使用&lt;code&gt;@Scope&lt;/code&gt;定义Bean的生命周期和作用域。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-jsr/spring-jsr330-singleton/README.md&#34;&gt;&lt;strong&gt;单例模式@Singleton&lt;/strong&gt;&lt;/a&gt; - 深入理解&lt;code&gt;@Singleton&lt;/code&gt;注解，确保Spring Bean的单一实例化。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;💬与我联系&lt;/h2&gt; &#xA;&lt;p&gt;✉️ &lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/xuchengshengsuper@163.com&#34;&gt;Email&lt;/a&gt; | 💬 &lt;a href=&#34;https://github.com/xuchengsheng/spring-reading/issues&#34;&gt;Issue&lt;/a&gt; | 🌐 &lt;a href=&#34;https://blog.csdn.net/duzhuang2399?type=blog&#34;&gt;CSDN&lt;/a&gt; Me about everything!&lt;/p&gt; &#xA;&lt;h2&gt;⛵欢迎贡献！&lt;/h2&gt; &#xA;&lt;p&gt;如果你发现任何错误🔍或者有改进建议🛠️，欢迎提交 issue 或者 pull request。你的反馈📢对于我非常宝贵💎！&lt;/p&gt; &#xA;&lt;h2&gt;🔄持续更新中&lt;/h2&gt; &#xA;&lt;p&gt;为了给大家提供最新🌱、最有价值的内容💼，我会坚持每天更新这个仓库⏳。每一天，你都可以期待看到一些新的内容或者对已有内容的改进✨。如果你有任何建议或反馈📣，欢迎随时联系我📞。我非常珍视每一个反馈💌，因为这是我持续改进的动力🚀。&lt;/p&gt; &#xA;&lt;h2&gt;💻我的 GitHub 统计&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#xuchengsheng/spring-reading&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=xuchengsheng/spring-reading&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🍱请我吃盒饭？&lt;/h2&gt; &#xA;&lt;p&gt;作者晚上还要写博客✍️,平时还需要工作💼,如果帮到了你可以请作者吃个盒饭🥡&lt;/p&gt; &#xA;&lt;div&gt; &#xA; &lt;img alt=&#34;logo&#34; src=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/image/WeChatPay.png&#34; style=&#34;width: 370px;height: 400px&#34;&gt; &#xA; &lt;img alt=&#34;logo&#34; src=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/image/Alipay.png&#34; style=&#34;width: 370px;height: 400px&#34;&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
</feed>