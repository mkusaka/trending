<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-07T01:39:30Z</updated>
  <subtitle>Weekly Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>GrimAnticheat/Grim</title>
    <updated>2024-07-07T01:39:30Z</updated>
    <id>tag:github.com,2024-07-07:/GrimAnticheat/Grim</id>
    <link href="https://github.com/GrimAnticheat/Grim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fully async, multithreaded, predictive, open source, 3.01 reach, 1.005 timer, 0.01% speed, 99.99% antikb, &#34;bypassable&#34; 1.8-1.20 anticheat.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GrimAC&lt;/h1&gt; &#xA;&lt;p&gt;This project is considered feature complete for the 2.0 (open-source) branch of this project. If you would like a bugfix or enhancement and cannot sponsor the work, pull requests are welcome. You can join the &lt;a href=&#34;https://discord.com/invite/kqQAhTmkUF&#34;&gt;discord&lt;/a&gt; for jar releases &amp;amp; changelogs.&lt;/p&gt; &#xA;&lt;p&gt;GrimAC is an open source Minecraft anticheat designed for 1.20 and supports 1.8-1.20. It is free while in beta. It will eventually become paid and/or will include offering additional subscription based paid checks. Geyser players are fully exempt.&lt;/p&gt; &#xA;&lt;h3&gt;Compiling through terminal/command prompt&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;git clone &lt;a href=&#34;https://github.com/GrimAnticheat/Grim.git&#34;&gt;https://github.com/GrimAnticheat/Grim.git&lt;/a&gt; (or click the green code button, download ZIP, then unzip it.)&lt;/li&gt; &#xA; &lt;li&gt;cd Grim&lt;/li&gt; &#xA; &lt;li&gt;gradlew build&lt;/li&gt; &#xA; &lt;li&gt;The final jar is located in build/libs&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;API Information&lt;/h3&gt; &#xA;&lt;p&gt;Grim&#39;s API allows you to integrate Grim into your own plugins. For more information, check out the API&#39;s GitHub repository &lt;a href=&#34;https://github.com/GrimAnticheat/GrimAPI&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Grim supremacy&lt;/h2&gt; &#xA;&lt;p&gt;Here are the main cores that make Grim stand out against other anticheats&lt;/p&gt; &#xA;&lt;h3&gt;Movement Simulation Engine&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We have a 1:1 replication of the player&#39;s possible movements&lt;/li&gt; &#xA; &lt;li&gt;This covers everything from basic walking, swimming, knockback, cobwebs, to bubble columns&lt;/li&gt; &#xA; &lt;li&gt;It even covers riding entities from boats to pigs to striders&lt;/li&gt; &#xA; &lt;li&gt;Built upon covering edge cases to confirm accuracy&lt;/li&gt; &#xA; &lt;li&gt;1.13+ clients on 1.13+ servers, 1.12- clients on 1.13+ servers, 1.13+ clients on 1.12- servers, and 1.12- clients on 1.12- servers are all supported regardless of the large technical changes between these versions.&lt;/li&gt; &#xA; &lt;li&gt;The order of collisions depends on the client version and is correct&lt;/li&gt; &#xA; &lt;li&gt;Accounts for minor bounding box differences between versions, for example: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Single glass panes will be a + shape for 1.7-1.8 players and * for 1.9+ players&lt;/li&gt; &#xA;   &lt;li&gt;1.13+ clients on 1.8 servers see the + glass pane hitbox due to ViaVersion&lt;/li&gt; &#xA;   &lt;li&gt;Many other blocks have this extreme attention to detail.&lt;/li&gt; &#xA;   &lt;li&gt;Waterlogged blocks do not exist for 1.12 or below players&lt;/li&gt; &#xA;   &lt;li&gt;Blocks that do not exist in the client&#39;s version use ViaVersion&#39;s replacement block&lt;/li&gt; &#xA;   &lt;li&gt;Block data that cannot be translated to previous versions is replaced correctly&lt;/li&gt; &#xA;   &lt;li&gt;All vanilla collision boxes have been implemented&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Fully asynchronous and multithreaded design&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All movement checks and the overwhelming majority of listeners run on the netty thread&lt;/li&gt; &#xA; &lt;li&gt;The anticheat can scale to many hundreds of players, if not more&lt;/li&gt; &#xA; &lt;li&gt;Thread safety is carefully thought out&lt;/li&gt; &#xA; &lt;li&gt;The next core allows for this design&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Full world replication&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The anticheat keeps a replica of the world for each player&lt;/li&gt; &#xA; &lt;li&gt;The replica is created by listening to chunk data packets, block places, and block changes&lt;/li&gt; &#xA; &lt;li&gt;On all versions, chunks are compressed to 16-64 kb per chunk using palettes&lt;/li&gt; &#xA; &lt;li&gt;Using this cache, the anticheat can safely access the world state&lt;/li&gt; &#xA; &lt;li&gt;Per player, the cache allows for multithreaded design&lt;/li&gt; &#xA; &lt;li&gt;Sending players fake blocks with packets is safe and does not lead to falses&lt;/li&gt; &#xA; &lt;li&gt;The world is recreated for each player to allow lag compensation&lt;/li&gt; &#xA; &lt;li&gt;Client sided blocks cause no issues with packet based blocks. Block glitching does not false the anticheat.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Latency compensation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;World changes are queued until they reach the player&lt;/li&gt; &#xA; &lt;li&gt;This means breaking blocks under a player does not false the anticheat&lt;/li&gt; &#xA; &lt;li&gt;Everything from flying status to movement speed will be latency compensated&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Inventory compensation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The player&#39;s inventory is tracked to prevent ghost blocks at high latency, and other errors&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Secure by design, not obscurity&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All systems are designed to be highly secure and mathematically impossible to bypass&lt;/li&gt; &#xA; &lt;li&gt;For example, the prediction engine knows all possible movements and cannot be bypassed&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>AutoMQ/automq</title>
    <updated>2024-07-07T01:39:30Z</updated>
    <id>tag:github.com,2024-07-07:/AutoMQ/automq</id>
    <link href="https://github.com/AutoMQ/automq" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AutoMQ is a cloud-native fork of Kafka by separating storage to S3 and EBS. 10x cost-effective. Autoscale in seconds. Single-digit ms latency.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;AutoMQ: A Cloud-Native fork of Kafka by separating storage to S3 and EBS&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/AutoMQ/automq&#34; alt=&#34;GitHub release (with filter)&#34;&gt; &lt;a href=&#34;https://docs.automq.com/docs/automq-s3kafka/YUzOwI7AgiNIgDk1GJAcu6Uanog&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Document-blue&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.automq.com/blog/automq-vs-apache-kafka-a-real-aws-cloud-bill-comparison&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/AutoMQ%20vs.%20Kafka(Cost)-yellow&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.automq.com/docs/automq-opensource/IJLQwnVROiS5cUkXfF0cuHnWnNd&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/AutoMQ%20vs.%20Kafka(Performance)-orange&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=AutoMQ_Lab&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/AutoMQ&#34; alt=&#34;Twitter URL&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AutoMQ/automq/main/docs/images/automq-wechat.png&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-%20Wechat%20-red?style=social&amp;amp;logo=discourse&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/AWS-%E2%9C%85-lightgray?logo=amazonaws&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Google-%F0%9F%9A%A7-lightyellow?logo=googlecloud&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Azure-%F0%9F%9A%A7-lightyellow?logo=microsoftazure&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Aliyun-%E2%9C%85-lightgray?logo=alibabacloud&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Huawei-%E2%9C%85-lightgray?logo=huawei&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Baidu-%E2%9C%85-lightgray?logo=baidu&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Tencent-%E2%9C%85-lightgray?logo=tencentqq&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üçµ AutoMQ vs Other Streaming Platforms&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;AutoMQ&lt;/th&gt; &#xA;   &lt;th&gt;Apache Kafka&lt;/th&gt; &#xA;   &lt;th&gt;Confluent&lt;/th&gt; &#xA;   &lt;th&gt;Apache Pulsar&lt;/th&gt; &#xA;   &lt;th&gt;Redpanda&lt;/th&gt; &#xA;   &lt;th&gt;Warpstream&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Apache Kafka Compatibility[1]&lt;/td&gt; &#xA;   &lt;td colspan=&#34;3&#34;&gt;Native Kafka&lt;/td&gt; &#xA;   &lt;td&gt;Non-Kafka&lt;/td&gt; &#xA;   &lt;td colspan=&#34;2&#34;&gt;Kafka Protocol&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Source Code Availability&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stateless Broker&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Publisher Latency(P99)&lt;/td&gt; &#xA;   &lt;td colspan=&#34;5&#34;&gt;Single-digit ms latency&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.warpstream.com/blog/warpstream-benchmarks-and-tco&#34;&gt;&amp;gt; 620ms&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Continuous Self-Balancing&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Scale in/out&lt;/td&gt; &#xA;   &lt;td&gt;In seconds&lt;/td&gt; &#xA;   &lt;td&gt;In hours/days&lt;/td&gt; &#xA;   &lt;td&gt;In hours&lt;/td&gt; &#xA;   &lt;td&gt;In hours&lt;br&gt;(scale-in);&lt;br&gt; In seconds&lt;br&gt;(scale-out)&lt;/td&gt; &#xA;   &lt;td&gt;In hours&lt;br&gt;In seconds (Enterprise Only)&lt;/td&gt; &#xA;   &lt;td&gt;In seconds&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Spot Instance Support&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Partition Reassignment&lt;/td&gt; &#xA;   &lt;td&gt;In seconds&lt;/td&gt; &#xA;   &lt;td&gt;In hours/days&lt;/td&gt; &#xA;   &lt;td&gt;In hours&lt;/td&gt; &#xA;   &lt;td&gt;In seconds&lt;/td&gt; &#xA;   &lt;td&gt;In hours&lt;br&gt;In seconds (Enterprise Only)&lt;/td&gt; &#xA;   &lt;td&gt;In seconds&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Component&lt;/td&gt; &#xA;   &lt;td&gt;Broker&lt;/td&gt; &#xA;   &lt;td colspan=&#34;2&#34;&gt;Broker&lt;br&gt;Zookeeper&lt;br&gt;(Non-KRaft)&lt;/td&gt; &#xA;   &lt;td&gt;Broker&lt;br&gt;Zookeeper&lt;br&gt;Bookkeeper&lt;br&gt;Proxy(Optional)&lt;/td&gt; &#xA;   &lt;td&gt;Broker&lt;/td&gt; &#xA;   &lt;td&gt;Agent&lt;br&gt;MetadataServer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Durability&lt;/td&gt; &#xA;   &lt;td&gt;Guaranteed by S3/EBS[2]&lt;/td&gt; &#xA;   &lt;td colspan=&#34;2&#34;&gt;Guaranteed by ISR &lt;/td&gt; &#xA;   &lt;td&gt;Guaranteed by Bookkeeper&lt;/td&gt; &#xA;   &lt;td&gt;Guaranteed by Raft&lt;/td&gt; &#xA;   &lt;td&gt;Guaranteed by S3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Inter-AZ Networking Fees&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td colspan=&#34;4&#34;&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[1] Apache Kafka Compatibility&#39;s definition is coming from this &lt;a href=&#34;https://www.kai-waehner.de/blog/2021/05/09/kafka-api-de-facto-standard-event-streaming-like-amazon-s3-object-storage/&#34;&gt;blog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[2] EBS Durability: On Azure, GCP, and Alibaba Cloud, Regional EBS replicas span multiple AZs. On AWS, ensure durability by double writing to EBS and S3 Express One Zone in different AZs.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;üî∂ Why AutoMQ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cost effective&lt;/strong&gt;: The first true cloud-native streaming storage system, designed for optimal cost and efficiency on the cloud. Refer to &lt;a href=&#34;https://docs.automq.com/docs/automq-opensource/EV6mwoC95ihwRckMsUKcppnqnJb&#34;&gt;this report&lt;/a&gt; to see how we cut Apache Kafka billing by 90% on the cloud.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;High Reliability&lt;/strong&gt;: Leverage cloud-shared storage services(EBS and S3) to achieve zero RPO, RTO in seconds and 99.999999999% durability.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Serverless&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Auto Scaling: Monitor cluster metrics and automatically scale in/out to align with your workload, enabling a pay-as-you-go model.&lt;/li&gt; &#xA;   &lt;li&gt;Scaling in seconds: The computing layer (broker) is stateless and can scale in/out within seconds, making AutoMQ a truly serverless solution.&lt;/li&gt; &#xA;   &lt;li&gt;Infinite scalable: Utilize cloud object storage as the primary storage solution, eliminating concerns about storage capacity.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Manage-less&lt;/strong&gt;: The built-in auto-balancer component automatically schedules partitions and network traffic between brokers, eliminating manual partition reassignment.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;High performance&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Low latency: Accelerate writing with high-performance EBS as WAL, achieving single-digit millisecond latency.&lt;/li&gt; &#xA;   &lt;li&gt;High throughput: Leverage pre-fetching, batch processing, and parallel technologies to maximize the capabilities of cloud object storage.&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Refer to the &lt;a href=&#34;https://docs.automq.com/docs/automq-opensource/IJLQwnVROiS5cUkXfF0cuHnWnNd&#34;&gt;AutoMQ Performance White Paper&lt;/a&gt; to see how we achieve this.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;A superior alternative to Apache Kafka&lt;/strong&gt;: 100% compatible with Apache Kafka and does not lose any key features, but cheaper and better.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚ú®Architecture&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AutoMQ/automq/main/docs/images/automq_vs_kafka.gif&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;AutoMQ adopts a Shared-Storage architecture, replacing the storage layer of Apache Kafka with a shared streaming storage library called &lt;a href=&#34;https://github.com/AutoMQ/automq/tree/main/s3stream&#34;&gt;S3Stream&lt;/a&gt; in a storage-compute separation manner, making the Broker completely stateless.&lt;/p&gt; &#xA;&lt;p&gt;Compared to the classic Kafka Shared-Nothing or Tiered-Storage architectures, AutoMQ&#39;s computing layer (Broker) is truly stateless, enabling features such as Auto-Scaling, Self-Balancing, and Partition Reassignment in Seconds that significantly reduce costs and improve efficiency.&lt;/p&gt; &#xA;&lt;h2&gt;‚õÑ Get started with AutoMQ&lt;/h2&gt; &#xA;&lt;h3&gt;Deploy Locally on a Single Host&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl https://download.automq.com/community_edition/standalone_deployment/install_run.sh | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The easiest way to run AutoMQ. You can experience features like &lt;strong&gt;Partition Reassignment in Seconds&lt;/strong&gt; and &lt;strong&gt;Continuous Self-Balancing&lt;/strong&gt; in your local machine. &lt;a href=&#34;https://docs.automq.com/docs/automq-opensource/EsUBwQei4ilCDjkWb8WcbOZInwc&#34;&gt;Learn more&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are more deployment options available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.automq.com/docs/automq-opensource/IyXrw3lHriVPdQkQLDvcPGQdnNh&#34;&gt;Deploy on Linux with 5 Nodes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.automq.com/docs/automq-opensource/KJtLwvdaPi7oznkX3lkcCR7fnte&#34;&gt;Deploy on Kubernetes(Enterprise Edition Only)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.automq.com/docs/automq-opensource/RexrwfhKuiGChfk237QcEBIwnND&#34;&gt;Runs on Ceph / MinIO / CubeFS / HDFS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://market.aliyun.com/products/55530001/cmgj00065841.html&#34;&gt;Try AutoMQ on Alibaba Cloud Marketplace&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.automq.com/docs/automq-onperm/LEGFwYWq7is3jnkLlUBceHYCnp3&#34;&gt;Try AutoMQ on AWS Marketplace&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üí¨ Community&lt;/h2&gt; &#xA;&lt;p&gt;You can join the following groups or channels to discuss or ask questions about AutoMQ:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ask questions or report a bug by &lt;a href=&#34;https://github.com/AutoMQ/automq/issues&#34;&gt;GitHub Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Discuss about AutoMQ or Kafka by &lt;a href=&#34;https://join.slack.com/t/automq/shared_invite/zt-29h17vye9-thf31ebIVL9oXuRdACnOIA&#34;&gt;Slack&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/AutoMQ/automq/main/docs/images/automq-wechat.png&#34;&gt;Wechat Group&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üë• How to contribute&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;ve found a problem with AutoMQ, please open a &lt;a href=&#34;https://github.com/AutoMQ/automq/issues&#34;&gt;GitHub Issues&lt;/a&gt;. To contribute to AutoMQ please see &lt;a href=&#34;https://raw.githubusercontent.com/AutoMQ/automq/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/AutoMQ/automq/main/CONTRIBUTING_GUIDE.md&#34;&gt;Contributing Guide&lt;/a&gt;. We have a list of &lt;a href=&#34;https://github.com/AutoMQ/automq/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22&#34;&gt;good first issues&lt;/a&gt; that help you to get started, gain experience, and get familiar with our contribution process. To claim one, simply reply with &#39;pick up&#39; in the issue and the AutoMQ maintainers will assign the issue to you. If you have any questions about the &#39;good first issue&#39; please feel free to ask. We will do our best to clarify any doubts you may have.&lt;/p&gt; &#xA;&lt;h2&gt;üôã Contact Us&lt;/h2&gt; &#xA;&lt;p&gt;Want to learn more, &lt;a href=&#34;https://automq66.feishu.cn/share/base/form/shrcnoqxslhYkujx6ULiMxOqkGh&#34;&gt;Talk with our product experts&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bitcoin-wallet/bitcoin-wallet</title>
    <updated>2024-07-07T01:39:30Z</updated>
    <id>tag:github.com,2024-07-07:/bitcoin-wallet/bitcoin-wallet</id>
    <link href="https://github.com/bitcoin-wallet/bitcoin-wallet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bitcoin Wallet app for your Android device. Standalone Bitcoin node, no centralized backend required.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;BITCOIN WALLET&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to &lt;em&gt;Bitcoin Wallet&lt;/em&gt;, a standalone Bitcoin payment app for your Android device!&lt;/p&gt; &#xA;&lt;p&gt;This project contains several sub-projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;wallet&lt;/strong&gt;: The Android app itself. This is probably what you&#39;re searching for.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;market&lt;/strong&gt;: App description and promo material for the Google Play app store.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;PREREQUISITES FOR BUILDING&lt;/h3&gt; &#xA;&lt;p&gt;You&#39;ll need git, a Java 11 SDK and Gradle between 4.4 and 6.9.x for this. We&#39;ll assume Ubuntu 22.04 LTS (Jammy Jellyfish) for the package installs, which comes with OpenJDK 11 and Gradle 4.4.1 out of the box.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# first time only&#xA;sudo apt install git gradle openjdk-11-jdk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a directory for the Android SDK (e.g. &lt;code&gt;android-sdk&lt;/code&gt;) and point the &lt;code&gt;ANDROID_HOME&lt;/code&gt; variable to it.&lt;/p&gt; &#xA;&lt;p&gt;Download the &lt;a href=&#34;https://developer.android.com/studio/index.html#command-tools&#34;&gt;Android SDK Tools&lt;/a&gt; and unpack it to &lt;code&gt;$ANDROID_HOME/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Finally, the last preparative step is acquiring the source code. Again in your workspace, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# first time only&#xA;git clone -b main https://github.com/bitcoin-wallet/bitcoin-wallet.git bitcoin-wallet&#xA;cd bitcoin-wallet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;BUILDING&lt;/h3&gt; &#xA;&lt;p&gt;You can build all sub-projects in all flavors at once using Gradle:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# each time&#xA;gradle clean build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For details about building the wallet see the &lt;a href=&#34;https://raw.githubusercontent.com/bitcoin-wallet/bitcoin-wallet/main/wallet/README.md&#34;&gt;specific README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;REPRODUCIBLE BUILD&lt;/h3&gt; &#xA;&lt;p&gt;Alternatively, you can build using buildah:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# each time&#xA;buildah build --cap-add sys_admin --device /dev/fuse --file build.Containerfile --output build/ .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Access to FUSE and the SYS_ADMIN capability are needed for mounting disorderfs in order to sort the directory entries of the project folder.&lt;/p&gt; &#xA;&lt;p&gt;The unsigned APKs are written to the specified output directory.&lt;/p&gt;</summary>
  </entry>
</feed>