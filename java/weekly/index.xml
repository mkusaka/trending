<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-30T01:58:06Z</updated>
  <subtitle>Weekly Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mybatis-flex/mybatis-flex</title>
    <updated>2023-07-30T01:58:06Z</updated>
    <id>tag:github.com,2023-07-30:/mybatis-flex/mybatis-flex</id>
    <link href="https://github.com/mybatis-flex/mybatis-flex" rel="alternate"></link>
    <summary type="html">&lt;p&gt;mybatis-flex is an elegant Mybatis Enhancement Framework&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mybatis-flex/mybatis-flex/main/docs/assets/images/logo_en.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;MyBatis-Flex is an elegant Mybatis Enhancement Framework.&lt;/h1&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;1、MyBatis-Flex is very lightweight, and it only depends on Mybatis and no other third-party dependencies&lt;/li&gt; &#xA; &lt;li&gt;2、Basic CRUD operator and paging query of Entity class&lt;/li&gt; &#xA; &lt;li&gt;3、Row mapping support, you can add, delete, modify and query the database without entity classes&lt;/li&gt; &#xA; &lt;li&gt;4、Support multiple databases, and expand through dialects flexibly.&lt;/li&gt; &#xA; &lt;li&gt;5、Support combined primary keys and different primary key content generation strategies&lt;/li&gt; &#xA; &lt;li&gt;6、Extremely friendly SQL query, IDE automatically prompts and no worries about mistakes&lt;/li&gt; &#xA; &lt;li&gt;7、More little surprises&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;hello world（Without Spring）&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;step 1: write entity class&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;&#xA;@Table(&#34;tb_account&#34;)&#xA;public class Account {&#xA;&#xA;    @Id(keyType = KeyType.Auto)&#xA;    private Long id;&#xA;    private String userName;&#xA;    private Date birthday;&#xA;    private int sex;&#xA;&#xA;    //getter setter&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;step 2: write mapper class(it needs extends BaseMapper)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface AccountMapper extends BaseMapper&amp;lt;Account&amp;gt; {&#xA;    //only Mapper interface define.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;step 3: start query data&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;e.g. 1： query by primary key&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class HelloWorld {&#xA;    public static void main(String... args) {&#xA;&#xA;        HikariDataSource dataSource = new HikariDataSource();&#xA;        dataSource.setJdbcUrl(&#34;jdbc:mysql://127.0.0.1:3306/mybatis-flex&#34;);&#xA;        dataSource.setUsername(&#34;username&#34;);&#xA;        dataSource.setPassword(&#34;password&#34;);&#xA;&#xA;        MybatisFlexBootstrap.getInstance()&#xA;                .setDataSource(dataSource)&#xA;                .addMapper(AccountMapper.class)&#xA;                .start();&#xA;&#xA;        AccountMapper mapper = MybatisFlexBootstrap.getInstance()&#xA;                .getMapper(AccountMapper.class);&#xA;&#xA;&#xA;        //id=100&#xA;        Account account = mapper.selectOneById(100);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;e.g.2: query list&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;//use QueryWrapper to build query conditions&#xA;QueryWrapper query = QueryWrapper.create()&#xA;        .select()&#xA;        .from(ACCOUNT)&#xA;        .where(ACCOUNT.ID.ge(100))&#xA;        .and(ACCOUNT.USER_NAME.like(&#34;zhang&#34;).or(ACCOUNT.USER_NAME.like(&#34;li&#34;)));&#xA;&#xA;// execute SQL：&#xA;// ELECT * FROM tb_account&#xA;// WHERE tb_account.id &amp;gt;=  100&#xA;// AND (tb_account.user_name LIKE &#39;%zhang%&#39; OR tb_account.user_name LIKE &#39;%li%&#39; )&#xA;List&amp;lt;Account&amp;gt; accounts = mapper.selectListByQuery(query);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;e.g.3: paging query&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;//use QueryWrapper to build query conditions&#xA;QueryWrapper query = QueryWrapper.create()&#xA;        .select()&#xA;        .from(ACCOUNT)&#xA;        .where(ACCOUNT.ID.ge(100))&#xA;        .and(ACCOUNT.USER_NAME.like(&#34;zhang&#34;).or(ACCOUNT.USER_NAME.like(&#34;li&#34;)))&#xA;        .orderBy(ACCOUNT.ID.desc());&#xA;&#xA;// execute SQL：&#xA;// ELECT * FROM tb_account&#xA;// WHERE tb_account.id &amp;gt;=  100&#xA;// AND (tb_account.user_name LIKE &#39;%zhang%&#39; OR tb_account.user_name LIKE &#39;%li%&#39; )&#xA;// ORDER BY tb_account.id DESC&#xA;// LIMIT 40,10&#xA;Page&amp;lt;Account&amp;gt; accountPage = mapper.paginate(5, 10, query);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;QueryWrapper Samples&lt;/h2&gt; &#xA;&lt;h3&gt;select *&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;QueryWrapper query=new QueryWrapper();&#xA;query.select().from(ACCOUNT)&#xA;&#xA;// SQL: &#xA;// SELECT * FROM tb_account&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;select columns&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;QueryWrapper query=new QueryWrapper();&#xA;query.select(ACCOUNT.ID,ACCOUNT.USER_NAME).from(ACCOUNT)&#xA;&#xA;// SQL: &#xA;// SELECT tb_account.id, tb_account.user_name &#xA;// FROM tb_account&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;QueryWrapper query = new QueryWrapper()&#xA;    .select(ACCOUNT.ID&#xA;        , ACCOUNT.USER_NAME&#xA;        , ARTICLE.ID.as(&#34;articleId&#34;)&#xA;        , ARTICLE.TITLE)&#xA;    .from(ACCOUNT.as(&#34;a&#34;), ARTICLE.as(&#34;b&#34;))&#xA;    .where(ACCOUNT.ID.eq(ARTICLE.ACCOUNT_ID));&#xA;&#xA;// SQL: &#xA;// SELECT a.id, a.user_name, b.id AS articleId, b.title &#xA;// FROM tb_account AS a, tb_article AS b &#xA;// WHERE a.id = b.account_id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;select functions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt; QueryWrapper query=new QueryWrapper()&#xA;        .select(&#xA;            ACCOUNT.ID,&#xA;            ACCOUNT.USER_NAME,&#xA;            max(ACCOUNT.BIRTHDAY),&#xA;            avg(ACCOUNT.SEX).as(&#34;sex_avg&#34;)&#xA;        ).from(ACCOUNT);&#xA;&#xA;// SQL: &#xA;// SELECT tb_account.id, tb_account.user_name, &#xA;// MAX(tb_account.birthday), &#xA;// AVG(tb_account.sex) AS sex_avg &#xA;// FROM tb_account&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;where&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;QueryWrapper queryWrapper=QueryWrapper.create()&#xA;    .select()&#xA;    .from(ACCOUNT)&#xA;    .where(ACCOUNT.ID.ge(100))&#xA;    .and(ACCOUNT.USER_NAME.like(&#34;michael&#34;));&#xA;&#xA;// SQL: &#xA;// SELECT * FROM tb_account &#xA;// WHERE tb_account.id &amp;gt;=  ?  &#xA;// AND tb_account.user_name LIKE  ? &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;exists, not exists&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;QueryWrapper queryWrapper=QueryWrapper.create()&#xA;    .select()&#xA;    .from(ACCOUNT)&#xA;    .where(ACCOUNT.ID.ge(100))&#xA;    .and(&#xA;        exists(&#xA;            selectOne().from(ARTICLE).where(ARTICLE.ID.ge(100))&#xA;        )&#xA;    );&#xA;&#xA;// SQL: &#xA;// SELECT * FROM tb_account &#xA;// WHERE tb_account.id &amp;gt;=  ?  &#xA;// AND EXIST (&#xA;//  SELECT 1 FROM tb_article WHERE tb_article.id &amp;gt;=  ? &#xA;// )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;and (...) or (...)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;QueryWrapper queryWrapper=QueryWrapper.create()&#xA;    .select()&#xA;    .from(ACCOUNT)&#xA;    .where(ACCOUNT.ID.ge(100))&#xA;    .and(ACCOUNT.SEX.eq(1).or(ACCOUNT.SEX.eq(2)))&#xA;    .or(ACCOUNT.AGE.in(18,19,20).or(ACCOUNT.USER_NAME.like(&#34;michael&#34;)));&#xA;&#xA;// SQL: &#xA;// SELECT * FROM tb_account &#xA;// WHERE tb_account.id &amp;gt;=  ?  &#xA;// AND (tb_account.sex =  ?  OR tb_account.sex =  ? ) &#xA;// OR (tb_account.age IN (?,?,?) OR tb_account.user_name LIKE  ? )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;group by&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;QueryWrapper queryWrapper=QueryWrapper.create()&#xA;    .select()&#xA;    .from(ACCOUNT)&#xA;    .groupBy(ACCOUNT.USER_NAME);&#xA;&#xA;// SQL: &#xA;// SELECT * FROM tb_account &#xA;// GROUP BY tb_account.user_name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;having&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;QueryWrapper queryWrapper=QueryWrapper.create()&#xA;    .select()&#xA;    .from(ACCOUNT)&#xA;    .groupBy(ACCOUNT.USER_NAME)&#xA;    .having(ACCOUNT.AGE.between(18,25));&#xA;&#xA;// SQL: &#xA;// SELECT * FROM tb_account &#xA;// GROUP BY tb_account.user_name &#xA;// HAVING tb_account.age BETWEEN  ? AND ?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;orderBy&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;QueryWrapper queryWrapper=QueryWrapper.create()&#xA;        .select()&#xA;        .from(ACCOUNT)&#xA;        .orderBy(ACCOUNT.AGE.asc(), ACCOUNT.USER_NAME.desc().nullsLast());&#xA;&#xA;// SQL: &#xA;// SELECT * FROM tb_account&#xA;// ORDER BY age ASC, user_name DESC NULLS LAST&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;join&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;QueryWrapper queryWrapper = QueryWrapper.create()&#xA;    .select()&#xA;    .from(ACCOUNT)&#xA;    .leftJoin(ARTICLE).on(ACCOUNT.ID.eq(ARTICLE.ACCOUNT_ID))&#xA;    .where(ACCOUNT.AGE.ge(10));&#xA;&#xA;// SQL: &#xA;// SELECT * FROM tb_account &#xA;// LEFT JOIN tb_article &#xA;// ON tb_account.id = tb_article.account_id &#xA;// WHERE tb_account.age &amp;gt;=  ?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;limit... offset&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;QueryWrapper queryWrapper = QueryWrapper.create()&#xA;    .select()&#xA;    .from(ACCOUNT)&#xA;    .orderBy(ACCOUNT.ID.desc())&#xA;    .limit(10)&#xA;    .offset(20);&#xA;&#xA;// MySql: &#xA;// SELECT * FROM `tb_account` ORDER BY `id` DESC LIMIT 20, 10&#xA;&#xA;// PostgreSQL: &#xA;// SELECT * FROM &#34;tb_account&#34; ORDER BY &#34;id&#34; DESC LIMIT 20 OFFSET 10&#xA;&#xA;// Informix: &#xA;// SELECT SKIP 20 FIRST 10 * FROM &#34;tb_account&#34; ORDER BY &#34;id&#34; DESC&#xA;&#xA;// Oracle: &#xA;// SELECT * FROM (SELECT TEMP_DATAS.*, &#xA;//  ROWNUM RN FROM (&#xA;//          SELECT * FROM &#34;tb_account&#34; ORDER BY &#34;id&#34; DESC) &#xA;//      TEMP_DATAS WHERE  ROWNUM &amp;lt;=30) &#xA;//  WHERE RN &amp;gt;20&#xA;&#xA;// Db2: &#xA;// SELECT * FROM &#34;tb_account&#34; ORDER BY &#34;id&#34; DESC &#xA;// OFFSET 20 ROWS FETCH NEXT 10 ROWS ONLY&#xA;&#xA;// Sybase: &#xA;// SELECT TOP 10 START AT 21 * FROM &#34;tb_account&#34; ORDER BY &#34;id&#34; DESC&#xA;&#xA;// Firebird: &#xA;// SELECT * FROM &#34;tb_account&#34; ORDER BY &#34;id&#34; DESC ROWS 20 TO 30&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Questions？&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;1、how to generate &#34;ACCOUNT&#34; class for QueryWrapper by Account.java ?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;build the project by IDE, or execute maven build command: &lt;code&gt;mvn clean package&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mybatis-flex/mybatis-flex/main/docs/assets/images/build_idea.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;More Samples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;1、&lt;a href=&#34;https://raw.githubusercontent.com/mybatis-flex/mybatis-flex/main/mybatis-flex-test/mybatis-flex-native-test&#34;&gt;Mybatis-Flex Only (Native)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2、&lt;a href=&#34;https://raw.githubusercontent.com/mybatis-flex/mybatis-flex/main/mybatis-flex-test/mybatis-flex-spring-test&#34;&gt;Mybatis-Flex with Spring&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;3、&lt;a href=&#34;https://raw.githubusercontent.com/mybatis-flex/mybatis-flex/main/mybatis-flex-test/mybatis-flex-spring-boot-test&#34;&gt;Mybatis-Flex with Spring boot&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Sayi/poi-tl</title>
    <updated>2023-07-30T01:58:06Z</updated>
    <id>tag:github.com,2023-07-30:/Sayi/poi-tl</id>
    <link href="https://github.com/Sayi/poi-tl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Generate awesome word(docx) with template&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;poi-tl(poi-template-language)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.travis-ci.com/Sayi/poi-tl&#34;&gt;&lt;img src=&#34;https://app.travis-ci.com/Sayi/poi-tl.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/jdk-1.6%2B-orange.svg?sanitize=true&#34; alt=&#34;jdk1.6+&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/jdk-1.8-orange.svg?sanitize=true&#34; alt=&#34;jdk1.8&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/apache--poi-3.16%2B-blue.svg?sanitize=true&#34; alt=&#34;poi3.16%2B&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/apache--poi-5.1.0-blue.svg?sanitize=true&#34; alt=&#34;poi5.1.0&#34;&gt; &lt;a href=&#34;https://gitter.im/Sayi/poi-tl?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Sayi/poi-tl.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A better way to generate word(docx) with template，based on Apache POI。&lt;/p&gt; &#xA;&lt;h2&gt;What is poi-tl&lt;/h2&gt; &#xA;&lt;p&gt;FreeMarker or Velocity generates new html pages or configuration files based on text template and data. poi-tl is a Word template engine that generates &lt;strong&gt;new documents&lt;/strong&gt; based on &lt;strong&gt;Word template&lt;/strong&gt; and &lt;strong&gt;data&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The Word template has rich styles. Poi-tl will perfectly retain the styles in the template in the generated documents. You can also set styles for the tags. The styles of the tags will be applied to the replaced text, so you can focus on the template design.&lt;/p&gt; &#xA;&lt;p&gt;poi-tl is a &lt;em&gt;&#34;logic-less&#34;&lt;/em&gt; template engine. There is no complicated control structure and variable assignment, only &lt;strong&gt;tags&lt;/strong&gt;, some tags can be replaced with text, pictures, tables, etc., some tags will hide certain some document content, while other tags will loop a series of document content.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&#34;Powerful&#34; constructs like variable assignment or conditional statements make it easy to modify the look of an application within the template system exclusively... however, at the cost of separation, turning the templates themselves into part of the application logic.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/OlafvdSpek/ctemplate/raw/master/doc/guide.html&#34;&gt;《Google CTemplate》&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;poi-tl supports &lt;strong&gt;custom functions (plug-ins)&lt;/strong&gt;, functions can be executed anywhere in the Word template, do anything anywhere in the document is the goal of poi-tl.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; Text&lt;/td&gt; &#xA;   &lt;td&gt;Render the tag as text&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; Picture&lt;/td&gt; &#xA;   &lt;td&gt;Render the tag as a picture&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; Table&lt;/td&gt; &#xA;   &lt;td&gt;Render the tag as a table&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; Numbering&lt;/td&gt; &#xA;   &lt;td&gt;Render the tag as a numbering&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; Chart&lt;/td&gt; &#xA;   &lt;td&gt;Bar chart (3D bar chart), column chart (3D column chart), area chart (3D area chart), line chart (3D line chart), radar chart, pie chart (3D pie Figure) and other chart rendering&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; If Condition&lt;/td&gt; &#xA;   &lt;td&gt;Hide or display certain document content (including text, paragraphs, pictures, tables, lists, charts, etc.) according to conditions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; Foreach Loop&lt;/td&gt; &#xA;   &lt;td&gt;Loop through certain document content (including text, paragraphs, pictures, tables, lists, charts, etc.) according to the collection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; Loop table row&lt;/td&gt; &#xA;   &lt;td&gt;Loop to copy a row of the rendered table&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; Loop table column&lt;/td&gt; &#xA;   &lt;td&gt;Loop copy and render a column of the table&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; Loop ordered list&lt;/td&gt; &#xA;   &lt;td&gt;Support the loop of ordered list, and support multi-level list at the same time&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; Highlight code&lt;/td&gt; &#xA;   &lt;td&gt;Word highlighting of code blocks, supporting 26 languages ​​and hundreds of coloring styles&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; Markdown&lt;/td&gt; &#xA;   &lt;td&gt;Convert Markdown to a word document&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; Word attachment&lt;/td&gt; &#xA;   &lt;td&gt;Insert attachment in Word&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; Word Comments&lt;/td&gt; &#xA;   &lt;td&gt;Complete support comment, create comment, modify comment, etc.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; Word SDT&lt;/td&gt; &#xA;   &lt;td&gt;Complete support structured document tag&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; Textbox&lt;/td&gt; &#xA;   &lt;td&gt;Tag support in text box&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; Picture replacement&lt;/td&gt; &#xA;   &lt;td&gt;Replace the original picture with another picture&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; bookmarks, anchors, hyperlinks&lt;/td&gt; &#xA;   &lt;td&gt;Support setting bookmarks, anchors and hyperlinks in documents&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; Expression Language&lt;/td&gt; &#xA;   &lt;td&gt;Fully supports SpringEL expressions and can extend more expressions: OGNL, MVEL...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; Style&lt;/td&gt; &#xA;   &lt;td&gt;The template is the style, and the code can also set the style&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; Template nesting&lt;/td&gt; &#xA;   &lt;td&gt;The template contains sub-templates, and the sub-templates then contain sub-templates&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; Merge&lt;/td&gt; &#xA;   &lt;td&gt;Word merge Merge, you can also merge in the specified position&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; custom functions (plug-ins)&lt;/td&gt; &#xA;   &lt;td&gt;Plug-in design, execute function anywhere in the document&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;TOC&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sayi/poi-tl/master/#Maven&#34;&gt;Maven&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sayi/poi-tl/master/#Quick-start&#34;&gt;Quick start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sayi/poi-tl/master/#Tags&#34;&gt;Tags&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sayi/poi-tl/master/#Text&#34;&gt;Text&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sayi/poi-tl/master/#Picture&#34;&gt;Picture&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sayi/poi-tl/master/#Table&#34;&gt;Table&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sayi/poi-tl/master/#Numbering&#34;&gt;Numbering&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sayi/poi-tl/master/#Sections&#34;&gt;Sections&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sayi/poi-tl/master/#False-Values-or-Empty-collection&#34;&gt;False Values or Empty collection&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sayi/poi-tl/master/#Non-False-Values-and-Not-a-collection&#34;&gt;Non-False Values and Not a collection&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sayi/poi-tl/master/#Non-Empty-collection&#34;&gt;Non-Empty collection&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sayi/poi-tl/master/#Nesting&#34;&gt;Nesting&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sayi/poi-tl/master/#Documentation-and-examples&#34;&gt;Documentation and examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sayi/poi-tl/master/#Contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sayi/poi-tl/master/#FAQ&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Maven&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;  &amp;lt;groupId&amp;gt;com.deepoove&amp;lt;/groupId&amp;gt;&#xA;  &amp;lt;artifactId&amp;gt;poi-tl&amp;lt;/artifactId&amp;gt;&#xA;  &amp;lt;version&amp;gt;1.12.1&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: poi-tl &lt;code&gt;1.12.x&lt;/code&gt; requires POI version &lt;code&gt;5.2.2+&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;Start with a deadly simple example: replace &lt;code&gt;{{title}}&lt;/code&gt; with &#34;poi-tl template engine&#34;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a new document &lt;code&gt;template.docx&lt;/code&gt;, including the content &lt;code&gt;{{title}}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;TDO mode: Template + data-model = output&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;//The core API uses a minimalist design, only one line of code is required&#xA;XWPFTemplate.compile(&#34;template.docx&#34;).render(new HashMap&amp;lt;String, Object&amp;gt;(){{&#xA;         put(&#34;title&#34;, &#34;poi-tl template engine&#34;);&#xA;}}).writeToFile(&#34;out_template.docx&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open the &lt;code&gt;out_template.docx&lt;/code&gt; document, everything is as you wish.&lt;/p&gt; &#xA;&lt;h2&gt;Tags&lt;/h2&gt; &#xA;&lt;p&gt;The tag consists of two curly braces, &lt;code&gt;{{title}}&lt;/code&gt; is a tag, &lt;code&gt;{{?title}}&lt;/code&gt; is also a tag, &lt;code&gt;title&lt;/code&gt; is the name of the tag, and &lt;code&gt;?&lt;/code&gt; identifies the type of tag. Next, we Let’s see what tag types are there.&lt;/p&gt; &#xA;&lt;h3&gt;Text&lt;/h3&gt; &#xA;&lt;p&gt;The text tag is the most basic tag type in the Word template. &lt;code&gt;{{name}}&lt;/code&gt; will be replaced by the value of key &lt;code&gt;name&lt;/code&gt; in the data model. If the key is not exist, the tag will be cleared(The program can configure whether to keep the tag or throw an exception).&lt;/p&gt; &#xA;&lt;p&gt;The style of the text tag will be applied to the replaced text, as shown in the following example.&lt;/p&gt; &#xA;&lt;p&gt;Code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;put(&#34;name&#34;, &#34;Mama&#34;);&#xA;put(&#34;thing&#34;, &#34;chocolates&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Template:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;{{name}}&lt;/strong&gt; always said life was like a box of {{thing}}.&lt;/p&gt; &#xA;&lt;p&gt;Output:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Mama&lt;/strong&gt; always said life was like a box of chocolates.&lt;/p&gt; &#xA;&lt;h3&gt;Picture&lt;/h3&gt; &#xA;&lt;p&gt;The image tag starts with &lt;code&gt;@&lt;/code&gt;, for example, &lt;code&gt;{{@logo}}&lt;/code&gt; will look for the value with the key of &lt;code&gt;logo&lt;/code&gt; in the data model, and then replace the tag with the image. The data corresponding to the image tag can be a simple URL or Path string, or a structure containing the width and height of the image.&lt;/p&gt; &#xA;&lt;p&gt;Code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;put(&#34;watermelon&#34;, &#34;assets/watermelon.png&#34;);&#xA;put(&#34;watermelon&#34;, &#34;http://x/lemon.png&#34;);&#xA;put(&#34;lemon&#34;, Pictures.ofLocal(&#34;sob.jpeg&#34;, PictureType.JPEG).size(24, 24).create());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Template:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Fruit Logo:&#xA;watermelon {{@watermelon}}&#xA;lemon {{@lemon}}&#xA;banana {{@banana}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Fruit Logo:&#xA;watermelon 🍉&#xA;lemon 🍋&#xA;banana 🍌&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Table&lt;/h3&gt; &#xA;&lt;p&gt;The table tag starts with &lt;code&gt;#&lt;/code&gt;, such as &lt;code&gt;{{#table}}&lt;/code&gt;, it will be rendered as a Word table with N rows and N columns. The value of N depends on the data of the &lt;code&gt;table&lt;/code&gt; tag.&lt;/p&gt; &#xA;&lt;p&gt;Code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;put(&#34;table&#34;, Tables.of(new String[][] {&#xA;                new String[] { &#34;Song name&#34;, &#34;Artist&#34; }&#xA;            }).border(BorderStyle.DEFAULT).create());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Template:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{{#table}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;Song name&lt;/td&gt;&#xA;   &lt;td&gt;Artist&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Numbering&lt;/h3&gt; &#xA;&lt;p&gt;The list tag corresponds to Word&#39;s symbol list or numbered list, starting with &lt;code&gt;*&lt;/code&gt;, such as &lt;code&gt;{{*number}}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;put(&#34;list&#34;, Numberings.create(&#34;Plug-in grammar&#34;,&#xA;                  &#34;Supports word text, pictures, table...&#34;,&#xA;                  &#34;Template, not just template, but also style template&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Template:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{{*list}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;● Plug-in grammar&#xA;● Supports word text, pictures, table...&#xA;● Templates, not just templates, but also style templates&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sections&lt;/h3&gt; &#xA;&lt;p&gt;A section is composed of two tags before and after, the start tag is identified by &lt;code&gt;?&lt;/code&gt;, and the end tag is identified by &lt;code&gt;/&lt;/code&gt;, such as &lt;code&gt;{{?section}}&lt;/code&gt; as the start tag of the sections block, &lt;code&gt;{{/section} }&lt;/code&gt; is the end tag, and &lt;code&gt;section&lt;/code&gt; is the name of this section.&lt;/p&gt; &#xA;&lt;p&gt;Sections are very useful when processing a series of document elements. Document elements (text, pictures, tables, etc.) located in a section can be rendered zero, one or N times, depending on the value of the section.&lt;/p&gt; &#xA;&lt;h4&gt;False Values or Empty collection&lt;/h4&gt; &#xA;&lt;p&gt;If the value of the section is &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; or an empty collection, all document elements located in the section will &lt;strong&gt;not be displayed&lt;/strong&gt;, similar to the condition of the if statement is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Datamodel:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;announce&#34;: false&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Template:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Made it,Ma!{{?announce}}Top of the world!{{/announce}}&#xA;Made it,Ma!&#xA;{{?announce}}&#xA;Top of the world!🎋&#xA;{{/announce}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Made it,Ma!&#xA;Made it,Ma!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Non-False Values and Not a collection&lt;/h4&gt; &#xA;&lt;p&gt;If the value of the section is not &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, and is not a collection, all document elements in the section will be &lt;strong&gt;rendered once&lt;/strong&gt;, similar to the condition of the if statement is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Datamodel:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;person&#34;: { &#34;name&#34;: &#34;Sayi&#34; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Template:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{{?person}}&#xA;  Hi {{name}}!&#xA;{{/person}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  Hi Sayi!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Non-Empty collection&lt;/h4&gt; &#xA;&lt;p&gt;If the value of the section is a non-empty collection, the document elements in the section will be &lt;strong&gt;looped once or N times&lt;/strong&gt;, depending on the size of the collection, similar to the foreach syntax.&lt;/p&gt; &#xA;&lt;p&gt;Datamodel:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;songs&#34;: [&#xA;    { &#34;name&#34;: &#34;Memories&#34; },&#xA;    { &#34;name&#34;: &#34;Sugar&#34; },&#xA;    { &#34;name&#34;: &#34;Last Dance&#34; }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Template:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{{?songs}}&#xA;{{name}}&#xA;{{/songs}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Memories&#xA;Sugar&#xA;Last Dance&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the loop, a special tag &lt;code&gt;{{=#this}}&lt;/code&gt; can be used to directly refer to the object of the current iteration.&lt;/p&gt; &#xA;&lt;p&gt;Datamodel:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;produces&#34;: [&#xA;    &#34;application/json&#34;,&#xA;    &#34;application/xml&#34;&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Template:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{{?produces}}&#xA;{{=#this}}&#xA;{{/produces}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;application/json&#xA;application/xml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Nesting&lt;/h3&gt; &#xA;&lt;p&gt;Nesting is the merging of another Word template in a Word template, which can be understood as import, include or word document merging, marked with &lt;code&gt;+&lt;/code&gt;, such as &lt;code&gt;{{+nested}}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class AddrModel {&#xA;  String addr;&#xA;  public AddrModel(String addr) {&#xA;    this.addr = addr;&#xA;  }&#xA;}&#xA;&#xA;List&amp;lt;AddrModel&amp;gt; subData = new ArrayList&amp;lt;&amp;gt;();&#xA;subData.add(new AddrModel(&#34;Hangzhou,China&#34;));&#xA;subData.add(new AddrModel(&#34;Shanghai,China&#34;));&#xA;put(&#34;nested&#34;, Includes.ofLocal(&#34;sub.docx&#34;).setRenderModel(subData).create());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Two Word Template:&lt;/p&gt; &#xA;&lt;p&gt;main.docx:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Hello, World&#xA;{{+nested}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;sub.docx:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Address: {{addr}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Hello, World&#xA;Address: Hangzhou,China&#xA;Address: Shanghai,China&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation and examples&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://deepoove.com/poi-tl&#34;&gt;中文文档&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://deepoove.com/poi-tl/#_%E8%BD%AF%E4%BB%B6%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3&#34;&gt;Basic Example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://deepoove.com/poi-tl/#example-table&#34;&gt;Table Example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://deepoove.com/poi-tl/#example-animal&#34;&gt;Sections and chart Example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://deepoove.com/poi-tl/#example-certificate&#34;&gt;Textbox Example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://deepoove.com/poi-tl/#plugin-comment&#34;&gt;Comment Example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://deepoove.com/poi-tl/#example-resume&#34;&gt;Example: Write Resume&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://deepoove.com/poi-tl/#plugin-highlight&#34;&gt;Example: Highlighting Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://deepoove.com/poi-tl/#plugin-markdown&#34;&gt;Example: Convert Markdown to word&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://deepoove.com/poi-tl/#example-swagger&#34;&gt;Example: Convert Swagger to word&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more examples and the source code of all examples, see JUnit testcases.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://deepoove.com/poi-tl/demo.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://deepoove.com/poi-tl/demo_result.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;You can join this project in many ways, not limited to the following ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Feedback problems encountered in use&lt;/li&gt; &#xA; &lt;li&gt;Share the joy of success&lt;/li&gt; &#xA; &lt;li&gt;Update and improve documentation&lt;/li&gt; &#xA; &lt;li&gt;Solve and discuss issues&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;http://deepoove.com/poi-tl/#_%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98&#34;&gt;FAQ&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>apache/hive</title>
    <updated>2023-07-30T01:58:06Z</updated>
    <id>tag:github.com,2023-07-30:/apache/hive</id>
    <link href="https://github.com/apache/hive" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Apache Hive&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Apache Hive (TM)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/apache/hive/branches&#34;&gt;&lt;img src=&#34;https://travis-ci.org/apache/hive.svg?branch=master&#34; alt=&#34;Master Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.apache.hive%22&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/org.apache.hive/hive/badge.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Apache Hive (TM) data warehouse software facilitates reading, writing, and managing large datasets residing in distributed storage using SQL. Built on top of Apache Hadoop (TM), it provides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Tools to enable easy access to data via SQL, thus enabling data warehousing tasks such as extract/transform/load (ETL), reporting, and data analysis&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A mechanism to impose structure on a variety of data formats&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Access to files stored either directly in Apache HDFS (TM) or in other data storage systems such as Apache HBase (TM)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Query execution using Apache Hadoop MapReduce or Apache Tez frameworks.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Hive provides standard SQL functionality, including many of the later 2003 and 2011 features for analytics. These include OLAP functions, subqueries, common table expressions, and more. Hive&#39;s SQL can also be extended with user code via user defined functions (UDFs), user defined aggregates (UDAFs), and user defined table functions (UDTFs).&lt;/p&gt; &#xA;&lt;p&gt;Hive users have a choice of 3 runtimes when executing SQL queries. Users can choose between Apache Hadoop MapReduce or Apache Tez frameworks as their execution backend. MapReduce is a mature framework that is proven at large scales. However, MapReduce is a purely batch framework, and queries using it may experience higher latencies (tens of seconds), even over small datasets. Apache Tez is designed for interactive query, and has substantially reduced overheads versus MapReduce.&lt;/p&gt; &#xA;&lt;p&gt;Users are free to switch back and forth between these frameworks at any time. In each case, Hive is best suited for use cases where the amount of data processed is large enough to require a distributed system.&lt;/p&gt; &#xA;&lt;p&gt;Hive is not designed for online transaction processing. It is best used for traditional data warehousing tasks. Hive is designed to maximize scalability (scale out with more machines added dynamically to the Hadoop cluster), performance, extensibility, fault-tolerance, and loose-coupling with its input formats.&lt;/p&gt; &#xA;&lt;h1&gt;General Info&lt;/h1&gt; &#xA;&lt;p&gt;For the latest information about Hive, please visit out website at:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://hive.apache.org/&#34;&gt;http://hive.apache.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Installation Instructions and a quick tutorial: &lt;a href=&#34;https://cwiki.apache.org/confluence/display/Hive/GettingStarted&#34;&gt;https://cwiki.apache.org/confluence/display/Hive/GettingStarted&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Instructions to build Hive from source: &lt;a href=&#34;https://cwiki.apache.org/confluence/display/Hive/GettingStarted#GettingStarted-BuildingHivefromSource&#34;&gt;https://cwiki.apache.org/confluence/display/Hive/GettingStarted#GettingStarted-BuildingHivefromSource&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A longer tutorial that covers more features of HiveQL: &lt;a href=&#34;https://cwiki.apache.org/confluence/display/Hive/Tutorial&#34;&gt;https://cwiki.apache.org/confluence/display/Hive/Tutorial&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The HiveQL Language Manual: &lt;a href=&#34;https://cwiki.apache.org/confluence/display/Hive/LanguageManual&#34;&gt;https://cwiki.apache.org/confluence/display/Hive/LanguageManual&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;h2&gt;Java&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Hive Version&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Java Version&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hive 1.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Java 6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hive 1.1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Java 6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hive 1.2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Java 7&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hive 2.x&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Java 7&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hive 3.x&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Java 8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hive 4.x&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Java 8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Hadoop&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Hadoop 1.x, 2.x&lt;/li&gt; &#xA; &lt;li&gt;Hadoop 3.x (Hive 3.x)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Upgrading from older versions of Hive&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Hive includes changes to the MetaStore schema. If you are upgrading from an earlier version of Hive it is imperative that you upgrade the MetaStore schema by running the appropriate schema upgrade scripts located in the scripts/metastore/upgrade directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We have provided upgrade scripts for MySQL, PostgreSQL, Oracle, Microsoft SQL Server, and Derby databases. If you are using a different database for your MetaStore you will need to provide your own upgrade script.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Useful mailing lists&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;mailto:user@hive.apache.org&#34;&gt;user@hive.apache.org&lt;/a&gt; - To discuss and ask usage questions. Send an empty email to &lt;a href=&#34;mailto:user-subscribe@hive.apache.org&#34;&gt;user-subscribe@hive.apache.org&lt;/a&gt; in order to subscribe to this mailing list.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;mailto:dev@hive.apache.org&#34;&gt;dev@hive.apache.org&lt;/a&gt; - For discussions about code, design and features. Send an empty email to &lt;a href=&#34;mailto:dev-subscribe@hive.apache.org&#34;&gt;dev-subscribe@hive.apache.org&lt;/a&gt; in order to subscribe to this mailing list.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;mailto:commits@hive.apache.org&#34;&gt;commits@hive.apache.org&lt;/a&gt; - In order to monitor commits to the source repository. Send an empty email to &lt;a href=&#34;mailto:commits-subscribe@hive.apache.org&#34;&gt;commits-subscribe@hive.apache.org&lt;/a&gt; in order to subscribe to this mailing list.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>