<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-19T01:58:14Z</updated>
  <subtitle>Weekly Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>TGX-Android/Telegram-X</title>
    <updated>2023-03-19T01:58:14Z</updated>
    <id>tag:github.com,2023-03-19:/TGX-Android/Telegram-X</id>
    <link href="https://github.com/TGX-Android/Telegram-X" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The main repository of Telegram X — official alternative Telegram client for Android.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=org.thunderdog.challegram&#34;&gt;Telegram X&lt;/a&gt; — a slick experimental Telegram client based on &lt;a href=&#34;https://core.telegram.org/tdlib&#34;&gt;TDLib&lt;/a&gt;.&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TGX-Android/Telegram-X/main/images/feature.png&#34; alt=&#34;Telegram X&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is the complete source code and the build instructions for the official alternative Android client for the Telegram messenger, based on the &lt;a href=&#34;https://core.telegram.org/api&#34;&gt;Telegram API&lt;/a&gt; and the &lt;a href=&#34;https://core.telegram.org/mtproto&#34;&gt;MTProto&lt;/a&gt; secure protocol via &lt;a href=&#34;https://github.com/TGX-Android/tdlib&#34;&gt;TDLib&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://play.google.com/store/apps/details?id=org.thunderdog.challegram&#34;&gt;&lt;strong&gt;Telegram X&lt;/strong&gt; on Google Play&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://play.google.com/apps/testing/org.thunderdog.challegram&#34;&gt;Subscribe to Beta&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://t.me/tgx_log&#34;&gt;APKs and Build Info&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://t.me/tgx_bot&#34;&gt;Bot to verify APK hash&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build instructions&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;At least &lt;strong&gt;5,34GB&lt;/strong&gt; of free disk space: &lt;strong&gt;487,10MB&lt;/strong&gt; for source codes and around &lt;strong&gt;4,85GB&lt;/strong&gt; for files generated after building all variants&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;4GB&lt;/strong&gt; of RAM&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;macOS&lt;/strong&gt; or &lt;strong&gt;Linux&lt;/strong&gt;-based operating system. &lt;strong&gt;Windows&lt;/strong&gt; platform is supported by using &lt;a href=&#34;https://www.msys2.org/&#34;&gt;MSYS&lt;/a&gt; (e.g., &lt;a href=&#34;https://gitforwindows.org/&#34;&gt;Git Bash&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;macOS&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;git with LFS, wget and sed: &lt;code&gt;$ brew install git git-lfs wget gsed &amp;amp;&amp;amp; git lfs install&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Ubuntu&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;git with LFS: &lt;code&gt;# apt install git git-lfs&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;$ git lfs install&lt;/code&gt; for the current user, if you didn&#39;t have &lt;code&gt;git-lfs&lt;/code&gt; previously installed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Shell with &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;wget&lt;/code&gt;, and &lt;code&gt;make&lt;/code&gt; utilities: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;MSYS&lt;/strong&gt;: &lt;code&gt;$ pacman -S make git mingw-w64-x86_64-git-lfs&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Git Bash&lt;/strong&gt;: &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;Download &lt;a href=&#34;https://eternallybored.org/misc/wget/&#34;&gt;wget&lt;/a&gt;, unzip &lt;code&gt;wget.exe&lt;/code&gt; and move to your &lt;code&gt;Git\mingw64\bin\&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Download &lt;a href=&#34;https://sourceforge.net/projects/ezwinports/files/make-4.3-without-guile-w32-bin.zip&#34;&gt;make&lt;/a&gt;, unzip and copy the contents to your &lt;code&gt;Git\mingw64\&lt;/code&gt; merging the folders, but do &lt;strong&gt;NOT&lt;/strong&gt; overwrite any existing files&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;$ git lfs install&lt;/code&gt; for the current user, if you didn&#39;t have &lt;code&gt;git lfs&lt;/code&gt; previously initialized&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;$ git clone --recursive --depth=1 --shallow-submodules https://github.com/TGX-Android/Telegram-X tgx&lt;/code&gt; — clone &lt;strong&gt;Telegram X&lt;/strong&gt; with submodules&lt;/li&gt; &#xA; &lt;li&gt;In case you forgot the &lt;code&gt;--recursive&lt;/code&gt; flag, &lt;code&gt;cd&lt;/code&gt; into &lt;code&gt;tgx&lt;/code&gt; directory and: &lt;code&gt;$ git submodule init &amp;amp;&amp;amp; git submodule update --init --recursive --depth=1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create &lt;code&gt;keystore.properties&lt;/code&gt; file outside of source tree with the following properties:&lt;br&gt;&lt;code&gt;keystore.file&lt;/code&gt;: absolute path to the keystore file&lt;br&gt;&lt;code&gt;keystore.password&lt;/code&gt;: password for the keystore&lt;br&gt;&lt;code&gt;key.alias&lt;/code&gt;: key alias that will be used to sign the app&lt;br&gt;&lt;code&gt;key.password&lt;/code&gt;: key password.&lt;br&gt;&lt;strong&gt;Warning&lt;/strong&gt;: keep this file safe and make sure nobody, except you, has access to it. For production builds one could use a separate user with home folder encryption to avoid harm from physical theft&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$ cd tgx&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;$ scripts/./setup.sh&lt;/code&gt; and follow up the instructions&lt;/li&gt; &#xA; &lt;li&gt;If you specified package name that&#39;s different from the one Telegram X uses, &lt;a href=&#34;https://firebase.google.com/docs/android/setup&#34;&gt;setup Firebase&lt;/a&gt; and replace &lt;code&gt;google-services.json&lt;/code&gt; with the one that&#39;s suitable for the &lt;code&gt;app.id&lt;/code&gt; you need&lt;/li&gt; &#xA; &lt;li&gt;Now you can open the project using &lt;strong&gt;&lt;a href=&#34;https://developer.android.com/studio/&#34;&gt;Android Studio&lt;/a&gt;&lt;/strong&gt; or build manually from the command line: &lt;code&gt;./gradlew assembleUniversalRelease&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Available flavors&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;arm64&lt;/code&gt;: &lt;strong&gt;arm64-v8a&lt;/strong&gt; build with &lt;code&gt;minSdkVersion&lt;/code&gt; set to &lt;code&gt;21&lt;/code&gt; (&lt;strong&gt;Lollipop&lt;/strong&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;arm32&lt;/code&gt;: &lt;strong&gt;armeabi-v7a&lt;/strong&gt; build&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;x64&lt;/code&gt;: &lt;strong&gt;x86_64&lt;/strong&gt; build with &lt;code&gt;minSdkVersion&lt;/code&gt; set to &lt;code&gt;21&lt;/code&gt; (&lt;strong&gt;Lollipop&lt;/strong&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;x86&lt;/code&gt;: &lt;strong&gt;x86&lt;/strong&gt; build&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;universal&lt;/code&gt;: universal build that includes native bundles for all platforms.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Quick setup for development&lt;/h3&gt; &#xA;&lt;p&gt;If you are developing a &lt;a href=&#34;https://github.com/TGX-Android/Telegram-X/raw/main/docs/PULL_REQUEST_TEMPLATE.md&#34;&gt;contribution&lt;/a&gt; to the project, you may follow the simpler building steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;$ git clone --recursive https://github.com/TGX-Android/Telegram-X tgx&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$ cd tgx&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://core.telegram.org/api/obtaining_api_id&#34;&gt;Obtain Telegram API credentials&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create &lt;code&gt;local.properties&lt;/code&gt; file in the root project folder using any text editor:&lt;br&gt;&lt;pre&gt;# Location where you have Android SDK installed&#xA;sdk.dir=YOUR_ANDROID_SDK_FOLDER&#xA;# Telegram API credentials obtained at previous step&#xA;telegram.api_id=YOUR_TELEGRAM_API_ID&#xA;telegram.api_hash=YOUR_TELEGRAM_API_HASH&lt;/pre&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;$ scripts/./setup.sh&lt;/code&gt; — this will download required Android SDK packages and build native dependencies that aren&#39;t part of project&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/TGX-Android/Telegram-X/main/app/jni/CMakeLists.txt&#34;&gt;CMakeLists.txt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open and build project via &lt;a href=&#34;https://developer.android.com/studio&#34;&gt;Android Studio&lt;/a&gt; or by using one of &lt;code&gt;./gradlew assemble&lt;/code&gt; commands in terminal&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;After submitting a pull request and its initial review, special build including your contribution will be published in &lt;a href=&#34;https://t.me/tgx_prs&#34;&gt;@tgx_prs&lt;/a&gt; channel, where it can be tested by the community. In case any issues or bugs found, you may push more commits to an existing PR that address them and request to publish a newer build by using comments section of pull request or in &lt;a href=&#34;https://t.me/tgx_dev&#34;&gt;@tgx_dev&lt;/a&gt; chat.&lt;/p&gt; &#xA;&lt;h2&gt;Reproducing public builds&lt;/h2&gt; &#xA;&lt;p&gt;In order to verify that there is no additional source code injected inside official APKs, you must use &lt;strong&gt;Ubuntu 21.04&lt;/strong&gt; and comply with the following requirements:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create user called &lt;code&gt;vk&lt;/code&gt; with the home directory located at &lt;code&gt;/home/vk&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clone &lt;code&gt;tgx&lt;/code&gt; repository to &lt;code&gt;/home/vk/tgx&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Check out the specific commit you want to verify&lt;/li&gt; &#xA; &lt;li&gt;In rare cases of builds that include unmerged pull requests, you must follow actions performed by &lt;a href=&#34;https://github.com/TGX-Android/Publisher/raw/main/main.js&#34;&gt;Publisher&#39;s&lt;/a&gt; &lt;code&gt;fetchPr&lt;/code&gt; and &lt;code&gt;squashPr&lt;/code&gt; tasks&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd&lt;/code&gt; into &lt;code&gt;tgx&lt;/code&gt; folder and install dependencies: &lt;code&gt;# apt install $(cat reproducible-builds/dependencies.txt)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Follow up the build instruction from the previous section&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;$ apkanalyzer apk compare --different-only &amp;lt;remote-apk&amp;gt; &amp;lt;reproduced-apk&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;If only signature files and metadata differ, build reproduction is successful.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;In future build reproduction might become easier. Here&#39;s a list of related PR-welcome TODOs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Project path must not affect the resulting &lt;code&gt;.so&lt;/code&gt; files, so user &amp;amp; project location requirement could be removed&lt;/li&gt; &#xA; &lt;li&gt;When building native binaries on &lt;strong&gt;macOS&lt;/strong&gt;, &lt;code&gt;.comment&lt;/code&gt; ELF section differs from the one built with &lt;strong&gt;Linux&lt;/strong&gt; version of NDK. It must be removed or made deterministic without any side-effects like breaking &lt;code&gt;native-debug-symbols.zip&lt;/code&gt; (or should be reported to NDK team?)&lt;/li&gt; &#xA; &lt;li&gt;It might be a good idea to use &lt;code&gt;--build-id=0x&amp;lt;commit&amp;gt;&lt;/code&gt; instead of &lt;code&gt;--build-id=none&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Checksums of cold APK builds always differ, even though the same keystore applied and generated inner APK contents do not differ. Real cause must be investigated and fixed, if possible.&lt;br&gt;To generate cold build, invoke &lt;code&gt;$ scripts/./reset.sh&lt;/code&gt; and &lt;code&gt;$ scripts/./setup.sh --skip-sdk-setup&lt;/code&gt;.&lt;br&gt;&lt;strong&gt;Warning&lt;/strong&gt;: this will also reset changes inside some of the submodules (&lt;a href=&#34;https://raw.githubusercontent.com/TGX-Android/Telegram-X/main/app/jni/thirdparty/ffmpeg&#34;&gt;ffmpeg&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/TGX-Android/Telegram-X/main/app/jni/thirdparty/libvpx&#34;&gt;libvpx&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/TGX-Android/Telegram-X/main/app/jni/thirdparty/webp&#34;&gt;webp&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/TGX-Android/Telegram-X/main/app/jni/thirdparty/opus&#34;&gt;opus&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/TGX-Android/Telegram-X/main/app/jni/thirdparty/exoplayer&#34;&gt;ExoPlayer&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Move local pull requests squash-merging from &lt;a href=&#34;https://github.com/TGX-Android/Publisher&#34;&gt;Publisher&lt;/a&gt; to some script inside this repository to make reproduction of builds that include them easier.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;i&gt;PS: &lt;a href=&#34;https://www.docker.com&#34;&gt;Docker&lt;/a&gt; is not considered an option, as it just hides away these tasks, and requires that all published APKs must be built using it.&lt;/i&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Verifying side-loaded APKs&lt;/h2&gt; &#xA;&lt;p&gt;If you downloaded &lt;strong&gt;Telegram X&lt;/strong&gt; APK from somewhere and would like to simply verify whether it&#39;s an original APK without any injected malicious source code, you need to get checksum (&lt;code&gt;SHA-256&lt;/code&gt;, &lt;code&gt;SHA-1&lt;/code&gt; or &lt;code&gt;MD5&lt;/code&gt;) of the downloaded APK file and find whether it corresponds to any known &lt;strong&gt;Telegram X&lt;/strong&gt; version.&lt;/p&gt; &#xA;&lt;p&gt;In order to obtain &lt;strong&gt;SHA-256&lt;/strong&gt; of the APK:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;$ sha256sum &amp;lt;path-to-apk&amp;gt;&lt;/code&gt; on &lt;strong&gt;Ubuntu&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$ shasum -a 256 &amp;lt;path-to-apk&amp;gt;&lt;/code&gt; on &lt;strong&gt;macOS&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once obtained, there are three ways to find out the commit for the specific checksum:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sending checksum to &lt;a href=&#34;https://t.me/tgx_bot&#34;&gt;&lt;code&gt;@tgx_bot&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Searching for a checksum in &lt;a href=&#34;https://t.me/tgx_log&#34;&gt;&lt;code&gt;@tgx_log&lt;/code&gt;&lt;/a&gt;. You can do so without need in installing any Telegram client by using this URL format: &lt;a href=&#34;https://t.me/s/tgx_log?q=c541ebb0a3ae7bb6e6bd155530f375d567b8aef1761fdd942fb5d69af62e24ae&#34;&gt;&lt;code&gt;https://t.me/s/tgx_log?q={checksum}&lt;/code&gt;&lt;/a&gt; (click to see in action). Note: unpublished builds cannot be verified this way.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Telegram X&lt;/code&gt; is licensed under the terms of the GNU General Public License v3.0.&lt;/p&gt; &#xA;&lt;p&gt;For more information, see &lt;a href=&#34;https://raw.githubusercontent.com/TGX-Android/Telegram-X/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;License of components and third-party dependencies it relies on might differ, check &lt;code&gt;LICENSE&lt;/code&gt; file in the corresponding folder.&lt;/p&gt; &#xA;&lt;h3&gt;Third-party dependencies&lt;/h3&gt; &#xA;&lt;p&gt;List of third-party components used in &lt;strong&gt;Telegram X&lt;/strong&gt; can be found &lt;a href=&#34;https://raw.githubusercontent.com/TGX-Android/Telegram-X/main/docs/THIRDPARTY.md&#34;&gt;here&lt;/a&gt;. Additionally you can check the specific commit of the third-party component used, for example, &lt;a href=&#34;https://raw.githubusercontent.com/TGX-Android/Telegram-X/main/app/jni/thirdparty&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/TGX-Android/Telegram-X/main/thirdparty&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Telegram X&lt;/strong&gt; welcomes contributions. Check out &lt;a href=&#34;https://raw.githubusercontent.com/TGX-Android/Telegram-X/main/docs/PULL_REQUEST_TEMPLATE.md&#34;&gt;pull request template&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/TGX-Android/Telegram-X/main/docs/GUIDE.md&#34;&gt;guide for contributors&lt;/a&gt; to learn more about Telegram X internals before creating the first pull request.&lt;/p&gt; &#xA;&lt;p&gt;If you are a regular user and experience a problem with Telegram X, the best place to look for solution is &lt;a href=&#34;https://t.me/tgandroidtests&#34;&gt;Telegram X chat&lt;/a&gt; — a community with over 4 thousand members. Please do not use this repository to ask questions: if you have general issue with Telegram, refer to &lt;a href=&#34;http://telegram.org/faq&#34;&gt;FAQ&lt;/a&gt; or contact &lt;a href=&#34;https://telegram.org/faq#telegram-support&#34;&gt;Telegram Support&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SaiUpadhyayula/spring-boot-microservices-new</title>
    <updated>2023-03-19T01:58:14Z</updated>
    <id>tag:github.com,2023-03-19:/SaiUpadhyayula/spring-boot-microservices-new</id>
    <link href="https://github.com/SaiUpadhyayula/spring-boot-microservices-new" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repository contains the latest source code of th spring-boot-microservices tutorial&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;spring-boot-microservices-new&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the latest source code of the spring-boot-microservices tutorial&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Grt1228/chatgpt-java</title>
    <updated>2023-03-19T01:58:14Z</updated>
    <id>tag:github.com,2023-03-19:/Grt1228/chatgpt-java</id>
    <link href="https://github.com/Grt1228/chatgpt-java" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ChatGPT的Java客户端，ChatGPT Java SDK。OpenAI官方Api的Java 版SDK。OpenAI GPT-3.5-Turb Api Client for Java&lt;/p&gt;&lt;hr&gt;&lt;p&gt;it’s an “unofficial&#34; or &#34;community-maintained” library.&lt;/p&gt; &#xA;&lt;p&gt;这是一个非官方的社区维护的库。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;国内访问可以看下这个解决方案&lt;/strong&gt;：&lt;a href=&#34;https://github.com/noobnooc/noobnooc/discussions/9&#34;&gt;https://github.com/noobnooc/noobnooc/discussions/9&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;整合Spring Boot 实现CahtGPT对话模式，可以参考下我写的这个项目简单版页面很简陋：&lt;a href=&#34;https://github.com/Grt1228/chatgpt-steam-output&#34;&gt;https://github.com/Grt1228/chatgpt-steam-output&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;更新日志&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 1.0.0 支持所有的OpenAI官方接口&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 1.0.1 支持自定义超时时间，自定义OkHttpClient拦截器，参考：OpenAiClient构造函数&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 1.0.2 支持Stream流式输出，参考：OpenAiStreamClient&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 1.0.3 支持最新的GPT-3.5-Turbo模型和Whisper-1模型，支持语音功能转文字，语音翻译。OpenAiClient和OpenAiStreamClient支持Builder构造，支持代理。&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 1.0.4 官方最新的ChatGPT Stream模式下的Api返回值改动。&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 1.0.5 支持自定义Api Host，使用Builder构建。参考下面的快速开始部分代码。&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 1.0.6 更新支持最新GPT-4相关Api。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;已经支持OpenAI官方的全部api，有bug欢迎朋友们指出，互相学习。&lt;/h4&gt; &#xA;&lt;p&gt;交流群： &lt;img src=&#34;https://user-images.githubusercontent.com/27008803/225246389-7b452214-f3fe-4a70-bd3e-832a0ed34288.jpg&#34; width=&#34;210&#34; height=&#34;300&#34; alt=&#34;二维码&#34;&gt; 群满加微信拉： &lt;img src=&#34;https://user-images.githubusercontent.com/27008803/225246581-15e90f78-5438-4637-8e7d-14c68ca13b59.jpg&#34; width=&#34;210&#34; height=&#34;300&#34; alt=&#34;二维码&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;注意：由于这个接口：&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://platform.openai.com/docs/api-reference/files/retrieve-content&#34;&gt;https://platform.openai.com/docs/api-reference/files/retrieve-content&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;免费用户无法使用，所以并未经过测试！！！&lt;/strong&gt;（哪位朋友有收费版keys也可以提供下）&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;完整测试案例参考源码中的：com.unfbx.chatgpt.OpenAiClientTest&lt;/strong&gt;和 &lt;strong&gt;com.unfbx.chatgpt.OpenAiStreamClientTest&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Q&lt;/th&gt; &#xA;   &lt;th&gt;A&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;如何实现连续对话？&lt;/td&gt; &#xA;   &lt;td&gt;issues：&lt;a href=&#34;https://github.com/Grt1228/chatgpt-java/issues/8&#34;&gt;https://github.com/Grt1228/chatgpt-java/issues/8&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;如何实现流式输出？&lt;/td&gt; &#xA;   &lt;td&gt;升级1.0.2版本，参考源码：&lt;a href=&#34;https://github.com/Grt1228/chatgpt-java/raw/main/src/test/java/com/unfbx/chatgpt/OpenAiStreamClientTest.java/&#34;&gt;OpenAiStreamClientTest&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;如何整合SpringBoot实现流式输出的Api接口？&lt;/td&gt; &#xA;   &lt;td&gt;参考另外一个项目：&lt;a href=&#34;https://github.com/Grt1228/chatgpt-steam-output&#34;&gt;chatgpt-steam-output&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;最新版GPT-3.5-TURBO是否支持？&lt;/td&gt; &#xA;   &lt;td&gt;升级1.0.3 已经支持ChatCompletion, 参考测试案例：&lt;a href=&#34;https://github.com/Grt1228/chatgpt-java/raw/main/src/test/java/com/unfbx/chatgpt/OpenAiStreamClientTest.java/&#34;&gt;OpenAiStreamClientTest&lt;/a&gt; 和&lt;a href=&#34;https://github.com/Grt1228/chatgpt-java/raw/main/src/test/java/com/unfbx/chatgpt/OpenAiClientTest.java/&#34;&gt;OpenAiStreamClientTest&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;最新版语言转文字和语言翻译是否支持？&lt;/td&gt; &#xA;   &lt;td&gt;升级1.0.3 已经支持whisper参考测试案例：&lt;a href=&#34;https://github.com/Grt1228/chatgpt-java/raw/main/src/test/java/com/unfbx/chatgpt/OpenAiStreamClientTest.java/&#34;&gt;OpenAiStreamClientTest&lt;/a&gt; 和&lt;a href=&#34;https://github.com/Grt1228/chatgpt-java/raw/main/src/test/java/com/unfbx/chatgpt/OpenAiClientTest.java/&#34;&gt;OpenAiStreamClientTest&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;工程简介&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;ChatGPT的Java客户端&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;OpenAI官方Api的Java SDK&lt;/p&gt; &#xA;&lt;p&gt;目前支持api-keys的方式调用，获取api-keys可以百度或者csdn查一下。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;api-keys的方式调用目前需要用梯子才可访问。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;OpenAi官方文档地址：&lt;a href=&#34;https://platform.openai.com/docs/api-reference&#34;&gt;https://platform.openai.com/docs/api-reference&lt;/a&gt; &lt;strong&gt;已完成接口列表：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Models&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Completions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Images&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Embeddings&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Files&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Fine-tune&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Moderations&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Engines&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Chat&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Speech To Text&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;快速开始&lt;/h1&gt; &#xA;&lt;h2&gt;方式一&lt;/h2&gt; &#xA;&lt;p&gt;导入pom依赖&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;com.unfbx&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;chatgpt-java&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;1.0.5&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;常规客户端使用示例：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;package com.unfbx.eventTest.test;&#xA;import com.unfbx.chatgpt.OpenAiClient;&#xA;import com.unfbx.chatgpt.entity.completions.CompletionResponse;&#xA;import java.util.Arrays;&#xA;&#xA;public class TestB {&#xA;    public static void main(String[] args) {&#xA;        //配置api keys&#xA;        //代理可以为null&#xA;        Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(&#34;192.168.1.111&#34;, 7890));&#xA;        //日志输出可以不添加&#xA;        HttpLoggingInterceptor httpLoggingInterceptor = new HttpLoggingInterceptor(new OpenAILogger());&#xA;        httpLoggingInterceptor.setLevel(HttpLoggingInterceptor.Level.BODY);&#xA;//        OpenAiClient openAiClient = new OpenAiClient(&#34;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&#34;,60,60,60);&#xA;//        OpenAiClient openAiClient = new OpenAiClient(&#34;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&#34;,60,60,60,null);&#xA;//        OpenAiClient openAiClient = new OpenAiClient(&#34;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&#34;);&#xA;        OpenAiClient openAiClient = OpenAiClient.builder()&#xA;            .apiKey(&#34;sk-***************************&#34;)&#xA;            .connectTimeout(50)&#xA;            .writeTimeout(50)&#xA;            .readTimeout(50)&#xA;            .interceptor(Arrays.asList(httpLoggingInterceptor))&#xA;            .proxy(proxy)&#xA;            .apiHost(&#34;https://api.openai.com/&#34;)&#xA;            .build();&#xA;        CompletionResponse completions = openAiClient.completions(&#34;我想申请转专业，从计算机专业转到会计学专业，帮我完成一份两百字左右的申请书&#34;);&#xA;        Arrays.stream(completions.getChoices()).forEach(System.out::println);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;输出：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Choice(text=&#xA;&#xA;尊敬的领导：&#xA;&#xA;您好！&#xA;&#xA;我是XX，目前就读于XX大学计算机专业，现在我想申请转专业，从计算机专业转到会计学专业。&#xA;&#xA;我有着良好的学习习惯，在计算机专业的学习中，我取得了良好的成绩，并且拥有了一定的计算机基础知识。在这一年的学习中，我发现自己对计算机的兴趣不太浓厚，而对会计学的兴趣却很浓厚，我觉得会计学是一个很有前景的专业，而且也是我的兴趣所在，我想把自己的未来打造成一个会计学专业的专家。&#xA;&#xA;因此，我希望能够申请转专业，从计算机专业转到会计学专业，我会努力学习，努力完成学业，让自己成为一个优秀的会计学专业的专家。&#xA;&#xA;最后，我再次表达我申请转专业的请求，希望能够得到您的认可和批准。&#xA;&#xA;谨上&#xA;&#xA;XX, index=0, logprobs=null, finishReason=stop)&#xA;&#xA;Process finished with exit code 0&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;流式输出代码：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;package com.unfbx.chatgpt;&#xA;&#xA;import com.unfbx.chatgpt.entity.completions.Completion;&#xA;import com.unfbx.chatgpt.sse.ConsoleEventSourceListener;&#xA;import org.junit.Before;&#xA;import org.junit.Test;&#xA;&#xA;import java.util.concurrent.CountDownLatch;&#xA;&#xA;/**&#xA; * 描述： 测试类&#xA; *&#xA; * @author https:www.unfbx.com&#xA; * 2023-02-28&#xA; */&#xA;public class OpenAiStreamClientTest {&#xA;&#xA;    private OpenAiStreamClient client;&#xA;&#xA;    @Before&#xA;    public void before() {&#xA;        //代理可以不设置&#xA;        Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(&#34;192.168.1.111&#34;, 7890));&#xA;//        client = new OpenAiStreamClient(&#34;sk-**********************&#34;,&#xA;//                60,&#xA;//                60,&#xA;//                60,&#xA;//                proxy);&#xA;        //推荐这种构造方式&#xA;        client = OpenAiStreamClient.builder()&#xA;                .connectTimeout(50)&#xA;                .readTimeout(50)&#xA;                .writeTimeout(50)&#xA;                .apiKey(&#34;sk-******************************&#34;)&#xA;                .proxy(proxy)&#xA;                .apiHost(&#34;https://api.openai.com/&#34;)&#xA;                .build();&#xA;    }&#xA;    &#xA;    @Test&#xA;    public void chatCompletions() {&#xA;        ConsoleEventSourceListener eventSourceListener = new ConsoleEventSourceListener();&#xA;        Message message = Message.builder().role(Message.Role.USER).content(&#34;你好啊我的伙伴！&#34;).build();&#xA;        ChatCompletion chatCompletion = ChatCompletion.builder().messages(Arrays.asList(message)).build();&#xA;        client.streamChatCompletion(chatCompletion, eventSourceListener);&#xA;        CountDownLatch countDownLatch = new CountDownLatch(1);&#xA;        try {&#xA;            countDownLatch.await();&#xA;        } catch (InterruptedException e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;    }&#xA;&#xA;    @Test&#xA;    public void completions() {&#xA;        ConsoleEventSourceListener eventSourceListener = new ConsoleEventSourceListener();&#xA;        Completion q = Completion.builder()&#xA;                .prompt(&#34;一句话描述下开心的心情&#34;)&#xA;                .stream(true)&#xA;                .build();&#xA;        client.streamCompletions(q, eventSourceListener);&#xA;        CountDownLatch countDownLatch = new CountDownLatch(1);&#xA;        try {&#xA;            countDownLatch.await();&#xA;        } catch (InterruptedException e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;输出日志（text是持续输出的）：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;23:03:59.158 [OkHttp https://api.openai.com/...] INFO com.unfbx.chatgpt.sse.ConsoleEventSourceListener - OpenAI建立sse连接...&#xA;23:03:59.160 [OkHttp https://api.openai.com/...] INFO com.unfbx.chatgpt.sse.ConsoleEventSourceListener - OpenAI返回数据：{&#34;id&#34;: &#34;cmpl-6pIHnOOJiiUEVMesXwxzzcSQFoZHj&#34;, &#34;object&#34;: &#34;text_completion&#34;, &#34;created&#34;: 1677683039, &#34;choices&#34;: [{&#34;text&#34;: &#34;\n&#34;, &#34;index&#34;: 0, &#34;logprobs&#34;: null, &#34;finish_reason&#34;: null}], &#34;model&#34;: &#34;text-davinci-003&#34;}&#xA;23:03:59.172 [OkHttp https://api.openai.com/...] INFO com.unfbx.chatgpt.sse.ConsoleEventSourceListener - OpenAI返回数据：{&#34;id&#34;: &#34;cmpl-6pIHnOOJiiUEVMesXwxzzcSQFoZHj&#34;, &#34;object&#34;: &#34;text_completion&#34;, &#34;created&#34;: 1677683039, &#34;choices&#34;: [{&#34;text&#34;: &#34;\n&#34;, &#34;index&#34;: 0, &#34;logprobs&#34;: null, &#34;finish_reason&#34;: null}], &#34;model&#34;: &#34;text-davinci-003&#34;}&#xA;23:03:59.251 [OkHttp https://api.openai.com/...] INFO com.unfbx.chatgpt.sse.ConsoleEventSourceListener - OpenAI返回数据：{&#34;id&#34;: &#34;cmpl-6pIHnOOJiiUEVMesXwxzzcSQFoZHj&#34;, &#34;object&#34;: &#34;text_completion&#34;, &#34;created&#34;: 1677683039, &#34;choices&#34;: [{&#34;text&#34;: &#34;\u5fc3&#34;, &#34;index&#34;: 0, &#34;logprobs&#34;: null, &#34;finish_reason&#34;: null}], &#34;model&#34;: &#34;text-davinci-003&#34;}&#xA;23:03:59.313 [OkHttp https://api.openai.com/...] INFO com.unfbx.chatgpt.sse.ConsoleEventSourceListener - OpenAI返回数据：{&#34;id&#34;: &#34;cmpl-6pIHnOOJiiUEVMesXwxzzcSQFoZHj&#34;, &#34;object&#34;: &#34;text_completion&#34;, &#34;created&#34;: 1677683039, &#34;choices&#34;: [{&#34;text&#34;: &#34;\u60c5&#34;, &#34;index&#34;: 0, &#34;logprobs&#34;: null, &#34;finish_reason&#34;: null}], &#34;model&#34;: &#34;text-davinci-003&#34;}&#xA;23:03:59.380 [OkHttp https://api.openai.com/...] INFO com.unfbx.chatgpt.sse.ConsoleEventSourceListener - OpenAI返回数据：{&#34;id&#34;: &#34;cmpl-6pIHnOOJiiUEVMesXwxzzcSQFoZHj&#34;, &#34;object&#34;: &#34;text_completion&#34;, &#34;created&#34;: 1677683039, &#34;choices&#34;: [{&#34;text&#34;: &#34;\u8212&#34;, &#34;index&#34;: 0, &#34;logprobs&#34;: null, &#34;finish_reason&#34;: null}], &#34;model&#34;: &#34;text-davinci-003&#34;}&#xA;23:03:59.439 [OkHttp https://api.openai.com/...] INFO com.unfbx.chatgpt.sse.ConsoleEventSourceListener - OpenAI返回数据：{&#34;id&#34;: &#34;cmpl-6pIHnOOJiiUEVMesXwxzzcSQFoZHj&#34;, &#34;object&#34;: &#34;text_completion&#34;, &#34;created&#34;: 1677683039, &#34;choices&#34;: [{&#34;text&#34;: &#34;\u7545&#34;, &#34;index&#34;: 0, &#34;logprobs&#34;: null, &#34;finish_reason&#34;: null}], &#34;model&#34;: &#34;text-davinci-003&#34;}&#xA;23:03:59.532 [OkHttp https://api.openai.com/...] INFO com.unfbx.chatgpt.sse.ConsoleEventSourceListener - OpenAI返回数据：{&#34;id&#34;: &#34;cmpl-6pIHnOOJiiUEVMesXwxzzcSQFoZHj&#34;, &#34;object&#34;: &#34;text_completion&#34;, &#34;created&#34;: 1677683039, &#34;choices&#34;: [{&#34;text&#34;: &#34;\uff0c&#34;, &#34;index&#34;: 0, &#34;logprobs&#34;: null, &#34;finish_reason&#34;: null}], &#34;model&#34;: &#34;text-davinci-003&#34;}&#xA;23:03:59.579 [OkHttp https://api.openai.com/...] INFO com.unfbx.chatgpt.sse.ConsoleEventSourceListener - OpenAI返回数据：{&#34;id&#34;: &#34;cmpl-6pIHnOOJiiUEVMesXwxzzcSQFoZHj&#34;, &#34;object&#34;: &#34;text_completion&#34;, &#34;created&#34;: 1677683039, &#34;choices&#34;: [{&#34;text&#34;: &#34;\u5fc3&#34;, &#34;index&#34;: 0, &#34;logprobs&#34;: null, &#34;finish_reason&#34;: null}], &#34;model&#34;: &#34;text-davinci-003&#34;}&#xA;23:03:59.641 [OkHttp https://api.openai.com/...] INFO com.unfbx.chatgpt.sse.ConsoleEventSourceListener - OpenAI返回数据：{&#34;id&#34;: &#34;cmpl-6pIHnOOJiiUEVMesXwxzzcSQFoZHj&#34;, &#34;object&#34;: &#34;text_completion&#34;, &#34;created&#34;: 1677683039, &#34;choices&#34;: [{&#34;text&#34;: &#34;\u65f7&#34;, &#34;index&#34;: 0, &#34;logprobs&#34;: null, &#34;finish_reason&#34;: null}], &#34;model&#34;: &#34;text-davinci-003&#34;}&#xA;23:03:59.673 [OkHttp https://api.openai.com/...] INFO com.unfbx.chatgpt.sse.ConsoleEventSourceListener - OpenAI返回数据：{&#34;id&#34;: &#34;cmpl-6pIHnOOJiiUEVMesXwxzzcSQFoZHj&#34;, &#34;object&#34;: &#34;text_completion&#34;, &#34;created&#34;: 1677683039, &#34;choices&#34;: [{&#34;text&#34;: &#34;\u795e&#34;, &#34;index&#34;: 0, &#34;logprobs&#34;: null, &#34;finish_reason&#34;: null}], &#34;model&#34;: &#34;text-davinci-003&#34;}&#xA;23:03:59.751 [OkHttp https://api.openai.com/...] INFO com.unfbx.chatgpt.sse.ConsoleEventSourceListener - OpenAI返回数据：{&#34;id&#34;: &#34;cmpl-6pIHnOOJiiUEVMesXwxzzcSQFoZHj&#34;, &#34;object&#34;: &#34;text_completion&#34;, &#34;created&#34;: 1677683039, &#34;choices&#34;: [{&#34;text&#34;: &#34;\u6021&#34;, &#34;index&#34;: 0, &#34;logprobs&#34;: null, &#34;finish_reason&#34;: null}], &#34;model&#34;: &#34;text-davinci-003&#34;}&#xA;23:03:59.782 [OkHttp https://api.openai.com/...] INFO com.unfbx.chatgpt.sse.ConsoleEventSourceListener - OpenAI返回数据：{&#34;id&#34;: &#34;cmpl-6pIHnOOJiiUEVMesXwxzzcSQFoZHj&#34;, &#34;object&#34;: &#34;text_completion&#34;, &#34;created&#34;: 1677683039, &#34;choices&#34;: [{&#34;text&#34;: &#34;\u3002&#34;, &#34;index&#34;: 0, &#34;logprobs&#34;: null, &#34;finish_reason&#34;: null}], &#34;model&#34;: &#34;text-davinci-003&#34;}&#xA;23:03:59.815 [OkHttp https://api.openai.com/...] INFO com.unfbx.chatgpt.sse.ConsoleEventSourceListener - OpenAI返回数据：[DONE]&#xA;23:03:59.815 [OkHttp https://api.openai.com/...] INFO com.unfbx.chatgpt.sse.ConsoleEventSourceListener - OpenAI返回数据结束了&#xA;23:03:59.815 [OkHttp https://api.openai.com/...] INFO com.unfbx.chatgpt.sse.ConsoleEventSourceListener - OpenAI关闭sse连接...&#xA;&#xA;Process finished with exit code -1&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;方式二（下载源码直接运行）&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;strong&gt;OpenAI全部接口支持调用&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;创建客户端配置api-key 完整测试案例参考：com.unfbx.chatgpt.OpenAiClientTest 和 com.unfbx.chatgpt.OpenAiStreamClientTest&lt;/p&gt; &#xA;&lt;h1&gt;Star History&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#Grt1228/chatgpt-java&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=Grt1228/chatgpt-java&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>