<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-06T01:54:09Z</updated>
  <subtitle>Weekly Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Mirror0oo0/im</title>
    <updated>2023-08-06T01:54:09Z</updated>
    <id>tag:github.com,2023-08-06:/Mirror0oo0/im</id>
    <link href="https://github.com/Mirror0oo0/im" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h4&gt;项目介绍&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;IM是一个分布式聊天系统，目前完全开源，仅用于学习和交流。&lt;/li&gt; &#xA; &lt;li&gt;支持私聊、群聊、离线消息、发送图片、文件、好友在线状态显示等功能。&lt;/li&gt; &#xA; &lt;li&gt;后端采用springboot+netty实现，前端使用vue。&lt;/li&gt; &#xA; &lt;li&gt;服务器支持集群化部署，每个im-server仅处理自身连接用户的消息&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;项目结构&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;模块&lt;/th&gt; &#xA;   &lt;th&gt;功能&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;im-platform&lt;/td&gt; &#xA;   &lt;td&gt;与页面进行交互，处理业务请求&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;im-server&lt;/td&gt; &#xA;   &lt;td&gt;推送聊天消息&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;im-client&lt;/td&gt; &#xA;   &lt;td&gt;消息推送sdk&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;im-common&lt;/td&gt; &#xA;   &lt;td&gt;公共包&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;消息推送方案&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Mirror0oo0/im/master/%E6%88%AA%E5%9B%BE/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81%E9%9B%86%E7%BE%A4%E5%8C%96.jpg&#34; alt=&#34;输入图片说明&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;当消息的发送者和接收者连的不是同一个server时，消息是无法直接推送的，所以我们需要设计出能够支持跨节点推送的方案&lt;/li&gt; &#xA; &lt;li&gt;利用了redis的list数据实现消息推送，其中key为im:unread:${serverid},每个key的数据可以看做一个queue,每个im-server根据自身的id只消费属于自己的queue&lt;/li&gt; &#xA; &lt;li&gt;redis记录了每个用户的websocket连接的是哪个im-server,当用户发送消息时，im-platform将根据所连接的im-server的id,决定将消息推向哪个queue&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;本地快速部署&lt;/h4&gt; &#xA;&lt;p&gt;1.安装运行环境&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;安装node:v14.16.0&lt;/li&gt; &#xA; &lt;li&gt;安装jdk:1.8&lt;/li&gt; &#xA; &lt;li&gt;安装maven:3.6.3&lt;/li&gt; &#xA; &lt;li&gt;安装mysql:5.7,密码分别为root/root,运行sql脚本(脚本在im-platfrom的resources/db目录)&lt;/li&gt; &#xA; &lt;li&gt;安装redis:4.0&lt;/li&gt; &#xA; &lt;li&gt;安装minio，命令端口使用9001，并创建一个名为&#34;box-im&#34;的bucket，并设置访问权限为公开&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;2.启动后端服务&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mvn clean package&#xA;java -jar ./im-platform/target/im-platform.jar&#xA;java -jar ./im-server/target/im-server.jar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;3.启动前端ui&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd im-ui&#xA;npm install&#xA;npm run serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;4.访问localhost:8080&lt;/p&gt; &#xA;&lt;h4&gt;快速接入&lt;/h4&gt; &#xA;&lt;p&gt;消息推送的请求代码已经封装在im-client包中，对于需要接入im-server的小伙伴，可以按照下面的教程快速的将IM功能集成到自己的项目中。&lt;/p&gt; &#xA;&lt;p&gt;注意服务器端和网页端都需要接入，服务器端发送消息，网页端接收消息。&lt;/p&gt; &#xA;&lt;p&gt;4.1 服务器端接入&lt;/p&gt; &#xA;&lt;p&gt;引入pom文件&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;com.bx&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;im-client&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;1.1.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;内容使用了redis进行通信,所以要配置redis地址：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;spring:&#xA;  redis:&#xA;    host: 127.0.0.1&#xA;    port: 6379&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;直接把IMClient通过@Autowire导进来就可以发送消息了，IMClient 只有2个接口：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;public class IMClient {&#xA;&#xA;    /**&#xA;     * 发送私聊消息&#xA;     *&#xA;     * @param recvId 接收用户id&#xA;     * @param messageInfo 消息体，将转成json发送到客户端&#xA;     */&#xA;    void sendPrivateMessage(Long recvId, PrivateMessageInfo... messageInfo)；&#xA;     &#xA;&#xA;    /**&#xA;     * 发送群聊消息&#xA;     *&#xA;     * @param recvIds 群聊用户id列表&#xA;     * @param messageInfo 消息体，将转成json发送到客户端&#xA;     */&#xA;    void sendGroupMessage(List&amp;lt;Long&amp;gt; recvIds, GroupMessageInfo... messageInfo)；&#xA;      &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;发送私聊消息(群聊也是类似的方式)：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; @Autowired&#xA; private IMClient imClient;&#xA;&#xA; public void sendMessage(){&#xA;    PrivateMessageInfo messageInfo = new PrivateMessageInfo();&#xA;    Long recvId = 1L;&#xA;    messageInfo.setId(123L);&#xA;    messageInfo.setContent(&#34;你好呀&#34;);&#xA;    messageInfo.setType(MessageType.TEXT.getCode());&#xA;    messageInfo.setSendId(userId);&#xA;    messageInfo.setRecvId(recvId);&#xA;    messageInfo.setSendTime(new Date());&#xA;    imClient.sendPrivateMessage(recvId,messageInfo);&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果需要对消息发送的结果进行监听的话，实现MessageListener,并加上@IMListener即可&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@Slf4j&#xA;@IMListener(type = IMListenerType.ALL)&#xA;public class PrivateMessageListener implements MessageListener {&#xA;    &#xA;    @Override&#xA;    public void process(SendResult result){&#xA;        PrivateMessageInfo messageInfo = (PrivateMessageInfo) result.getMessageInfo();&#xA;        if(result.getStatus().equals(IMSendStatus.SUCCESS)){&#xA;            // 消息发送成功&#xA;            log.info(&#34;消息已读，消息id:{}，发送者:{},接收者:{}&#34;,messageInfo.getId(),messageInfo.getSendId(),messageInfo.getRecvId());&#xA;        }&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;4.2 网页端接入 首先将im-ui/src/api/wssocket.js拷贝到自己的项目。&lt;/p&gt; &#xA;&lt;p&gt;接入代码如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import * as wsApi from &#39;./api/wssocket&#39;;&#xA;&#xA;let wsUrl = &#39;ws://localhost:8878/im&#39;&#xA;let userId = 1;&#xA;wsApi.createWebSocket(wsUrl , userId);&#xA;wsApi.onopen(() =&amp;gt; {&#xA;    // 连接打开&#xA;    console.log(&#34;连接成功&#34;);&#xA;});&#xA;wsApi.onmessage((cmd,messageInfo) =&amp;gt; {&#xA;    if (cmd == 2) {&#xA;    &#x9;// 异地登录，强制下线&#xA;    &#x9;console.log(&#34;您已在其他地方登陆，将被强制下线&#34;);&#xA;    } else if (cmd == 3) {&#xA;    &#x9;// 私聊消息&#xA;    &#x9;console.log(messageInfo);&#xA;    } else if (cmd == 4) {&#xA;    &#x9;// 群聊消息&#xA;    &#x9;console.log(messageInfo);&#xA;    }&#xA;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;联系方式&lt;/h4&gt; &#xA;&lt;h4&gt;点下star吧&lt;/h4&gt; &#xA;&lt;p&gt;喜欢的朋友麻烦点个star，鼓励一下作者吧！&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>languagetool-org/languagetool</title>
    <updated>2023-08-06T01:54:09Z</updated>
    <id>tag:github.com,2023-08-06:/languagetool-org/languagetool</id>
    <link href="https://github.com/languagetool-org/languagetool" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Style and Grammar Checker for 25+ Languages&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;LanguageTool&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;LanguageTool&lt;/strong&gt; is an Open Source proofreading software for English, Spanish, French, German, Portuguese, Polish, Dutch, and &lt;a href=&#34;https://languagetool.org/languages/&#34;&gt;more than 20 other languages&lt;/a&gt;. It finds many errors that a simple spell checker cannot detect.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://languagetool.org/careers&#34;&gt;Jobs at LanguageTool&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.languagetool.org/http-server&#34;&gt;How to run your own LanguageTool server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://languagetool.org/http-api/swagger-ui/#!/default/post_check&#34;&gt;HTTP API documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.languagetool.org/public-http-api&#34;&gt;How to use our public server via HTTP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.languagetool.org/java-api&#34;&gt;How to use LanguageTool from Java&lt;/a&gt; (&lt;a href=&#34;https://languagetool.org/development/api/index.html?org/languagetool/JLanguageTool.html&#34;&gt;Javadoc&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more information, please see our homepage at &lt;a href=&#34;https://languagetool.org&#34;&gt;https://languagetool.org&lt;/a&gt;, &lt;a href=&#34;https://github.com/languagetool-org/languagetool/raw/master/languagetool-standalone/README.md&#34;&gt;this README&lt;/a&gt;, and &lt;a href=&#34;https://github.com/languagetool-org/languagetool/raw/master/languagetool-standalone/CHANGES.md&#34;&gt;CHANGES&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The LanguageTool core (this repo) is freely available under the LGPL 2.1 or later.&lt;/p&gt; &#xA;&lt;h2&gt;Docker&lt;/h2&gt; &#xA;&lt;p&gt;Try one of the following projects for a community-contributed Docker file:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Erikvl87/docker-languagetool&#34;&gt;https://github.com/Erikvl87/docker-languagetool&lt;/a&gt; (&lt;a href=&#34;https://hub.docker.com/r/erikvl87/languagetool&#34;&gt;Docker Hub&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/silvio/docker-languagetool&#34;&gt;https://github.com/silvio/docker-languagetool&lt;/a&gt; (&lt;a href=&#34;https://hub.docker.com/r/silviof/docker-languagetool&#34;&gt;Docker Hub&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.languagetool.org/development-overview&#34;&gt;The development overview&lt;/a&gt; describes how you can contribute error detection rules.&lt;/p&gt; &#xA;&lt;p&gt;For more technical details, see &lt;a href=&#34;https://dev.languagetool.org&#34;&gt;our dev pages&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Scripted installation and building&lt;/h2&gt; &#xA;&lt;p&gt;To install or build using a script, simply type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -L https://raw.githubusercontent.com/languagetool-org/languagetool/master/install.sh | sudo bash &amp;lt;options&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you wish to have more options, download the &lt;code&gt;install.sh&lt;/code&gt; script. Usage options follow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo bash install.sh &amp;lt;options&amp;gt;&#xA;&#xA;Usage: install.sh &amp;lt;option&amp;gt; &amp;lt;package&amp;gt;&#xA;Options:&#xA;   -h --help                   Show help&#xA;   -b --build                  Builds packages from the bleeding edge development copy of LanguageTool&#xA;   -c --command &amp;lt;command&amp;gt;      Specifies post-installation command to run (default gui when screen is detected)&#xA;   -q --quiet                  Shut up LanguageTool installer! Only tell me important stuff!&#xA;   -t --text &amp;lt;file&amp;gt;            Specifies what text to be spellchecked by LanguageTool command line (default spellcheck.txt)&#xA;   -d --depth &amp;lt;value&amp;gt;          Specifies the depth to clone when building LanguageTool yourself (default 1).&#xA;   -p --package &amp;lt;package&amp;gt;      Specifies package to install when building (default all)&#xA;   -o --override &amp;lt;OS&amp;gt;          Override automatic OS detection with &amp;lt;OS&amp;gt;&#xA;   -a --accept                 Accept the oracle license at http://java.com/license. Only run this if you have seen the license and agree to its terms!&#xA;   -r --remove &amp;lt;all/partial&amp;gt;   Removes LanguageTool install. &amp;lt;all&amp;gt; uninstalls the dependencies that were auto-installed. (default partial)&#xA;&#xA;Packages(only if -b is specified):&#xA;   standalone                  Installs standalone package&#xA;   wikipedia                   Installs Wikipedia package&#xA;   office-extension            Installs the LibreOffice/OpenOffice extension package&#xA;&#xA;Commands:&#xA;   GUI                         Runs GUI version of LanguageTool&#xA;   commandline                 Runs command line version of LanguageTool&#xA;   server                      Runs server version of LanguageTool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Alternate way to build from source&lt;/h2&gt; &#xA;&lt;p&gt;Before start: you will need to clone from GitHub and install Java 8 and Apache Maven.&lt;/p&gt; &#xA;&lt;p&gt;Warning: a complete clone requires downloading more than 500 MB and needs more than 1500 MB on disk. This can be reduced if you only need the last few revisions of the master branch by creating a shallow clone:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --depth 5 https://github.com/languagetool-org/languagetool.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A shallow clone downloads less than 60 MB and needs less than 200 MB on disk.&lt;/p&gt; &#xA;&lt;p&gt;In the root project folder, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mvn clean test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(sometimes you can skip Maven step for repeated builds)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./build.sh languagetool-standalone package -DskipTests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Test the result in &lt;code&gt;languagetool-standalone/target/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./build.sh languagetool-wikipedia package -DskipTests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Test the result in &lt;code&gt;languagetool-wikipedia/target&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./build.sh languagetool-office-extension package -DskipTests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Test the result in &lt;code&gt;languagetool-office-extension/target&lt;/code&gt;, rename the &lt;code&gt;*.zip&lt;/code&gt; to &lt;code&gt;*.oxt&lt;/code&gt; to install it in LibreOffice/OpenOffice.&lt;/p&gt; &#xA;&lt;p&gt;Now you can use the bleeding edge development copy of LanguageTool &lt;code&gt;*.jar&lt;/code&gt; files, be aware that it might contain regressions.&lt;/p&gt; &#xA;&lt;h3&gt;How to run under Mac M1 or M2&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Brew for Rosetta: &lt;code&gt;arch -x86_64 /bin/bash -c &#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install openjdk for Rosetta: &lt;code&gt;arch -x86_64 brew install openjdk&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install Maven for Rosetta: &lt;code&gt;arch -x86_64 brew install maven&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Now run build scripts&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;Unless otherwise noted, this software - the LanguageTool core - is distributed under the LGPL, see file &lt;a href=&#34;https://github.com/languagetool-org/languagetool/raw/master/COPYING.txt&#34;&gt;COPYING.txt&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hncboy/ai-beehive</title>
    <updated>2023-08-06T01:54:09Z</updated>
    <id>tag:github.com,2023-08-06:/hncboy/ai-beehive</id>
    <link href="https://github.com/hncboy/ai-beehive" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AI 蜂巢，基于 Java 使用 Spring Boot 3 和 JDK 17，支持的功能有 ChatGPT、OpenAi Image、Midjourney、NewBing、文心一言等等&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ai-beehive&lt;/h1&gt; &#xA;&lt;h1&gt;介绍&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;chatgpt-web-java 2.0 版本，更名为 ai-beehive（爱蜂巢、AI 蜂巢），体验站：&lt;a href=&#34;https://front.aibeehive.icu&#34;&gt;https://front.aibeehive.icu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;chatgpt-web-java 1.0 &lt;a href=&#34;https://github.com/hncboy/chatgpt-web-java/tree/v1.1.0&#34;&gt;最终版分支地址&lt;/a&gt;，体验地址：&lt;a href=&#34;https://front3.stargpt.top/#/&#34;&gt;https://front3.stargpt.top/#/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;前端开发：&lt;a href=&#34;https://github.com/mjjh1717&#34;&gt;https://github.com/mjjh1717&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;前端项目地址：&lt;a href=&#34;https://github.com/mjjh1717/chatgpt-shuowen&#34;&gt;https://github.com/mjjh1717/chatgpt-shuowen&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;描述：ai-beehive 项目的名字取自蜂巢，这源于我们构建房间的方式，即通过图纸塑造出独特的模块化房间，每个房间都是一个具有个性的聊天室，类似于蜂巢中的单独蜂窝。六边形的蜂窝设计启示我们，系统具有无限的扩展能力。在我们的 ai-beehive项目中，我们提供了一种方式，即通过添加新的图纸来扩展和丰富房间类型.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;框架&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Spring Boot 3.x&lt;/li&gt; &#xA; &lt;li&gt;JDK 17&lt;/li&gt; &#xA; &lt;li&gt;MySQL 8.x&lt;/li&gt; &#xA; &lt;li&gt;SpringDoc 接口文档&lt;/li&gt; &#xA; &lt;li&gt;MyBatis Plus&lt;/li&gt; &#xA; &lt;li&gt;MapStruct&lt;/li&gt; &#xA; &lt;li&gt;Lombok&lt;/li&gt; &#xA; &lt;li&gt;Redis&lt;/li&gt; &#xA; &lt;li&gt;WebSocket&lt;/li&gt; &#xA; &lt;li&gt;thumbnailator 图片处理&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitee.com/baomidou/lock4j&#34;&gt;lock4j 分布式锁&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forest.dtflyx.com/&#34;&gt;Forest 网络框架&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hutool.cn/&#34;&gt;Hutool&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sa-token.cc/&#34;&gt;SaToken&lt;/a&gt; 权限校验&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Grt1228/chatgpt-java&#34;&gt;Grt1228 ChatGPT java sdk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;......&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;部署运行&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;数据库在 beehive-bootstrap/src/main/resources/db/schema-mysql.sql&lt;/li&gt; &#xA; &lt;li&gt;数据库中存在默认的账号密码是 &lt;a href=&#34;mailto:hellobee@aibeehive.icu&#34;&gt;hellobee@aibeehive.icu&lt;/a&gt;——123456&lt;/li&gt; &#xA; &lt;li&gt;部署运行方式待完善 ing......，Java 开发者运行应该不成问题&lt;/li&gt; &#xA; &lt;li&gt;先安装 MySQL 和 Redis&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;IDEA 运行&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;待更新......&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;功能介绍&lt;/h1&gt; &#xA;&lt;h2&gt;登录注册&lt;/h2&gt; &#xA;&lt;h3&gt;1.邮箱登录注册&lt;/h3&gt; &#xA;&lt;p&gt;使用 satoken 实现 token 存储，token 目前存在 redis&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hncboy/ai-beehive/main/docs/pics/register_login.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;2.权限校验&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;增加登录和注册邮箱后缀校验，可以选择允许哪种邮箱后缀的邮箱登录&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hncboy/ai-beehive/main/docs/pics/login_with_not_permit_email_suffix.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;增加是否开启注册，未开启情况下不允许注册&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hncboy/ai-beehive/main/docs/pics/system_not_permit_register.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;增加注册审核，开启后，用户注册完状态为待审核，需管理员将用户的状态改为通过才可登录&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;增加用户登录状态，包含禁止登录、待审核以及正常。禁止登录状态的用户无法登录，可以通过移除 Redis 用户 Token 强制退出。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;3.相关参数&lt;/h3&gt; &#xA;&lt;p&gt;通过 bh_sys_param 表的 &lt;strong&gt;email-registerLoginConfig&lt;/strong&gt; param key 实现控制&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;&#x9;&#34;registerVerificationRedirectUrl&#34;: &#34;http://localhost:1002/#/emailValidation?type=email&amp;amp;verifyCode=&#34;,&#xA;&#x9;&#34;registerVerifyCodeExpireMinutes&#34;: &#34;验证码过期时间（分钟）&#34;,&#xA;&#x9;&#34;registerTemplateSubject&#34;: &#34;邮件标题&#34;,&#xA;&#x9;&#34;registerAllowSuffix&#34;: &#34;@qq.com,*&#34;,  // 允许注册的邮箱后缀，多个用逗号分隔&#xA;&#x9;&#34;registerEnabled&#34;: true,         // 是否开启注册&#xA;&#x9;&#34;loginAllowSuffix&#34;: &#34;@qq.com,*&#34;, // 允许登录的邮箱后缀，多个用逗号分隔&#xA;&#x9;&#34;registerCheckEnabled&#34;: true // 是否开启注册审核&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;图纸管理&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;目前已经实现的图纸有 OpenAi GPT 3.5、OpenAi GPT 4、官网 ChatGPT 3.5、、官网 ChatGPT 4、OpenAi Image 绘图、Midjourney、NewBing，可能存在一些问题待修复。图纸和配置项管理目前都得手动改数据库。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hncboy/ai-beehive/main/docs/pics/cell_list_01.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;图纸状态&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;包含了图纸的状态，不同图纸对应前端的展示不一样，只有 published 状态的图纸才可以被使用，如果图纸状态不为 published，那么就算是已经创建好的房间也无法发送内容。用于图纸出现问题时可以即使停止使用。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;图纸权限&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;基于 published 状态的图纸可以控制权限，分配哪些用户可以使用图纸或者全体用户都可以使用，通过 bh_cell_permission 表控制&lt;/li&gt; &#xA; &lt;li&gt;cell_code 表示图纸编码，type 表示权限类型，1 表示浏览权限 2 表示使用权限，权限 2 包含 1。浏览权限表示能看到图纸，使用权限表示可以使用状态为 published 的图纸。user_id 为 0 表示任意用于都拥有该权限。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;名&lt;/th&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;Not Null&lt;/th&gt; &#xA;   &lt;th&gt;注释&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;id&lt;/td&gt; &#xA;   &lt;td&gt;bigint&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;主键&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;user_id&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;用户 id&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cell_code&lt;/td&gt; &#xA;   &lt;td&gt;varchar&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;cell code&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;type&lt;/td&gt; &#xA;   &lt;td&gt;tinyint&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;类型&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;create_time&lt;/td&gt; &#xA;   &lt;td&gt;datetime&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;创建时间&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;update_time&lt;/td&gt; &#xA;   &lt;td&gt;datetime&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;更新时间&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;图纸配置项管理&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;每种图纸都拥有其配置项，配置项是在数据库维护，基本图纸的所有参数都可以存在配置项表里，初始化 SQL 中包含了已使用到的一些图纸配置项。&lt;/li&gt; &#xA; &lt;li&gt;配置项表的字段有点多，每个配置项也可以配置权限，不过因为配置项有点多，所以用到情况应该很少。&lt;/li&gt; &#xA; &lt;li&gt;配置项样式后续更新，房间编辑配置项功能后续更新。&lt;/li&gt; &#xA; &lt;li&gt;配置项支持配置默认值、是否必填、用户是否可以使用默认值、用户是否可见、用户是否可见默认值、用户是否可修改、用户创建房间后是否可修改等等。&lt;/li&gt; &#xA; &lt;li&gt;后续更新......&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;房间类型&lt;/h2&gt; &#xA;&lt;h3&gt;Midjourney&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;包含文生图、U 放大、V 变化、图生文&lt;/li&gt; &#xA; &lt;li&gt;参考 &lt;a href=&#34;https://github.com/novicezk/midjourney-proxy&#34;&gt;https://github.com/novicezk/midjourney-proxy&lt;/a&gt; 项目实现&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Imagine&lt;/h4&gt; &#xA;&lt;p&gt;文生图功能，默认从输入框发送的消息就是 imagine 指令，需要输入&lt;strong&gt;英文提示词&lt;/strong&gt;，过程中会显示进度条。如果输入非法内容，不会有提示，此时消息相当于异常，通过定时任务重置任务状态。默认展示的图片是缩放的，减少流量传输，有需要时点击查看原图。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hncboy/ai-beehive/main/docs/pics/cell_midjourney_imagine_01.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hncboy/ai-beehive/main/docs/pics/cell_midjourney_imagine_02.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Upscale&lt;/h4&gt; &#xA;&lt;p&gt;放大其中一张图片，Imagine 生成的图片 Upscale 只能点一次，不能重复点击&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hncboy/ai-beehive/main/docs/pics/cell_midjourney_upscale_01.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Variation&lt;/h4&gt; &#xA;&lt;p&gt;基于一张图片生成新的四张图片&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hncboy/ai-beehive/main/docs/pics/cell_midjourney_variation_01.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Describe&lt;/h4&gt; &#xA;&lt;p&gt;图生文&lt;/p&gt; &#xA;&lt;p&gt;点击图标上传图片&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hncboy/ai-beehive/main/docs/pics/cell_midjourney_describe_01.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;会生成四句提示语，1234 四个选项分别代表这四句提示语，点击即可自动将对应的提示语发送 Imagine 消息&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hncboy/ai-beehive/main/docs/pics/cell_midjourney_describe_02.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;OpenAi Image&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;图生文的功能，直接输入提示语&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hncboy/ai-beehive/main/docs/pics/cell_openai_image_01.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;OpenAi GPT 3.5 &amp;amp; 4&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;将调用 OpenAi 接口的所有参数都封装成了配置项，可以根据情况是否让用户可配置参数&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hncboy/ai-beehive/main/docs/pics/cell_openai_gpt_01.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;官网 ChatGPT&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;与原先相比增加了返回值错误的类型判断&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;NewBing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;本地可行，线上不可行，查找问题修复中&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;计划功能&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;管理端图纸管理、图纸配置项管理&lt;/li&gt; &#xA; &lt;li&gt;其他图纸，文心一眼、通义千问、chatglm 等等&lt;/li&gt; &#xA; &lt;li&gt;绘图的图片画廊&lt;/li&gt; &#xA; &lt;li&gt;配置项样式处理，openai 的提示词商店&lt;/li&gt; &#xA; &lt;li&gt;等等&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;实现方案&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;增加了 OpenAi ApiKey 轮询&lt;/li&gt; &#xA; &lt;li&gt;待更新......,&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;联系方式&lt;/h1&gt; &#xA;&lt;p&gt;加群添加微信备注 Github&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hncboy/ai-beehive/main/docs/pics/wechat.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>