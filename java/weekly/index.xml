<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-11T01:54:56Z</updated>
  <subtitle>Weekly Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>SeleniumHQ/selenium</title>
    <updated>2023-06-11T01:54:56Z</updated>
    <id>tag:github.com,2023-06-11:/SeleniumHQ/selenium</id>
    <link href="https://github.com/SeleniumHQ/selenium" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A browser automation framework and ecosystem.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Selenium&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SeleniumHQ/selenium/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/SeleniumHQ/selenium/actions/workflows/ci.yml/badge.svg?branch=trunk&amp;amp;event=schedule&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://selenium.dev&#34;&gt;&lt;img src=&#34;https://selenium.dev/images/selenium_logo_square_green.png&#34; width=&#34;180&#34; alt=&#34;Selenium&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Selenium is an umbrella project encapsulating a variety of tools and libraries enabling web browser automation. Selenium specifically provides an infrastructure for the &lt;a href=&#34;https://w3c.github.io/webdriver/&#34;&gt;W3C WebDriver specification&lt;/a&gt; â€” a platform and language-neutral coding interface compatible with all major web browsers.&lt;/p&gt; &#xA;&lt;p&gt;The project is made possible by volunteer contributors who&#39;ve generously donated thousands of hours in code development and upkeep.&lt;/p&gt; &#xA;&lt;p&gt;Selenium&#39;s source code is made available under the &lt;a href=&#34;https://github.com/SeleniumHQ/selenium/raw/trunk/LICENSE&#34;&gt;Apache 2.0 license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Narrative documentation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://selenium.dev/documentation/&#34;&gt;User Manual&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;API documentation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://seleniumhq.github.io/selenium/docs/api/dotnet/&#34;&gt;C#&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://seleniumhq.github.io/selenium/docs/api/javascript/&#34;&gt;JavaScript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://seleniumhq.github.io/selenium/docs/api/java/index.html&#34;&gt;Java&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://seleniumhq.github.io/selenium/docs/api/py/&#34;&gt;Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://seleniumhq.github.io/selenium/docs/api/rb/&#34;&gt;Ruby&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Pull Requests&lt;/h2&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://github.com/SeleniumHQ/selenium/raw/trunk/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; before submitting your pull requests.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bazelbuild/bazelisk&#34;&gt;Bazelisk&lt;/a&gt;, a Bazel wrapper that automatically downloads the version of Bazel specified in &lt;code&gt;.bazelversion&lt;/code&gt; file and transparently passes through all command-line arguments to the real Bazel binary.&lt;/li&gt; &#xA; &lt;li&gt;Java JDK version 11 or greater (e.g., &lt;a href=&#34;https://openjdk.java.net/&#34;&gt;Java 11 OpenJDK&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;java&lt;/code&gt; and &lt;code&gt;jar&lt;/code&gt; on the &lt;code&gt;$PATH&lt;/code&gt; (make sure you use &lt;code&gt;java&lt;/code&gt; executable from JDK but not JRE). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;To test this, try running the command &lt;code&gt;javac&lt;/code&gt;. This command won&#39;t exist if you only have the JRE installed. If you&#39;re met with a list of command-line options, you&#39;re referencing the JDK properly.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;macOS users: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Install the latest version of Xcode including the command-line tools. This command should work &lt;code&gt;xcode-select --install&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Apple Silicon Macs should add &lt;code&gt;build --host_platform=//:rosetta&lt;/code&gt; to their &lt;code&gt;.bazelrc.local&lt;/code&gt; file. We are working to make sure this isn&#39;t required in the long run.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Windows users: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Latest version of &lt;a href=&#34;https://www.visualstudio.com/&#34;&gt;Visual Studio&lt;/a&gt; with command line tools and build tools installed&lt;/li&gt; &#xA;   &lt;li&gt;A setup guide with detailed explanations can be seen on Jim Evan&#39;s &lt;a href=&#34;http://jimevansmusic.blogspot.com/2020/04/setting-up-windows-development.html&#34;&gt;post&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;An up-to-date list of instructions for Windows 11, including avoiding issues with the latest versions of Visual Studio, can be seen in this &lt;a href=&#34;https://gist.github.com/titusfortner/aec103e9b02709f771497fdb8b21154c&#34;&gt;gist&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Internet Explorer Driver&lt;/h3&gt; &#xA;&lt;p&gt;If you plan to compile the &lt;a href=&#34;https://github.com/SeleniumHQ/selenium/wiki/InternetExplorerDriver&#34;&gt;IE driver&lt;/a&gt;, you also need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.visualstudio.com/&#34;&gt;Visual Studio 2022&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;32 and 64-bit cross compilers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The build will work on any platform, but the tests for IE will be skipped silently if you are not building on Windows.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;h3&gt;Contribute with GitPod&lt;/h3&gt; &#xA;&lt;p&gt;GitPod provides a ready to use environment to develop.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitpod.io/#https://github.com/SeleniumHQ/selenium&#34;&gt;&lt;img src=&#34;https://gitpod.io/button/open-in-gitpod.svg?sanitize=true&#34; alt=&#34;Open in Gitpod&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To configure and use your local machine, keep reading.&lt;/p&gt; &#xA;&lt;h3&gt;Bazel&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bazel.build/&#34;&gt;Bazel&lt;/a&gt; was built by the fine folks at Google. Bazel manages dependency downloads, generates the Selenium binaries, executes tests, and does it all rather quickly.&lt;/p&gt; &#xA;&lt;p&gt;More detailed instructions for getting Bazel running are below, but if you can successfully get the java and javascript folders to build without errors, you should be confident that you have the correct binaries on your system.&lt;/p&gt; &#xA;&lt;h3&gt;Before Building&lt;/h3&gt; &#xA;&lt;p&gt;Ensure that you have Firefox installed and the latest &lt;a href=&#34;https://github.com/mozilla/geckodriver/releases/&#34;&gt;&lt;code&gt;geckodriver&lt;/code&gt;&lt;/a&gt; on your &lt;code&gt;$PATH&lt;/code&gt;. You may have to update this from time to time.&lt;/p&gt; &#xA;&lt;h3&gt;Common Build Targets&lt;/h3&gt; &#xA;&lt;h4&gt;Java&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to see Java Build Steps&lt;/summary&gt; &#xA; &lt;p&gt;To build the most commonly-used modules of Selenium from source, execute this command from the root project folder:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel build java/...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If you want to test you can run then you can do so by running the following command&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel test //java/... --test_size_filters=small,medium,large --test_tag_filters=&amp;lt;browser&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The &lt;code&gt;test_size_filters&lt;/code&gt; argument takes small, medium, large. Small are akin to unit tests, medium is akin to integration tests, and large is akin to end-to-end tests.&lt;/p&gt; &#xA; &lt;p&gt;The &lt;code&gt;test_tag_filters&lt;/code&gt; allow us to pass in browser names and a few different tags that we can find in the code base.&lt;/p&gt; &#xA; &lt;p&gt;To build the Grid deployment jar, run this command:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel build grid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The log will show where the output jar is located.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;JavaScript&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to see JavaScript Build Steps&lt;/summary&gt; &#xA; &lt;p&gt;If you want to build all the JavaScript code you can run:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel build javascript/...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;To build the NodeJS bindings you will need to run:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel build //javascript/node/selenium-webdriver&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;To run the tests run:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel test //javascript/node/selenium-webdriver:tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;You can pass in the environment variable &lt;code&gt;SELENIUM_BROWSER&lt;/code&gt; with the name of the browser.&lt;/p&gt; &#xA; &lt;p&gt;To publish to NPM run:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel run //javascript/node/selenium-webdriver:selenium-webdriver.publish&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;Python&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to see Python Build Steps&lt;/summary&gt; &#xA; &lt;p&gt;If you want to build the python bindings run:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel build //py:selenium&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;To run the tests run:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel test //py:test-&amp;lt;browsername&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If you add &lt;code&gt;--//common:pin_browsers&lt;/code&gt; it will download the browsers and drivers for you to use.&lt;/p&gt; &#xA; &lt;p&gt;To install locally run:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel build //py:selenium-wheel&#xA;pip install bazel-bin/py/selenium-*.whl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;To publish run:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel build //py:selenium-wheel //py:selenium-sdist&#xA;twine upload bazel-bin/py/selenium-*.whl bazel-bin/py/selenium-*.tar.gz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;Ruby&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to see Ruby Build Steps&lt;/summary&gt; &#xA; &lt;p&gt;Build targets:&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Command&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;bazel build //rb:selenium-devtools&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Build selenium-devtools Ruby gem&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;bazel build //rb:selenium-webdriver&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Build selenium-webdriver Ruby gem&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;bazel run //rb:selenium-devtools-release&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Build and push selenium-devtools gem to RubyGems&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;bazel run //rb:selenium-webdriver-release&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Build and push selenium-webdriver gem to RubyGems&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;bazel run //rb:console&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Start REPL with all gems loaded&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;bazel run //rb:docs&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Generate YARD docs&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;p&gt;Test targets:&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Command&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;bazel test //rb/...&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Run unit, integration tests (Chrome) and lint&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;bazel test //rb:lint&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Run RuboCop linter&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;bazel test //rb/spec/...&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Run unit and integration tests (Chrome)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;bazel test --test_size_filters large //rb/...&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Run integration tests using (Chrome)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;bazel test //rb/spec/integration/...&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Run integration tests using (Chrome)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;bazel test //rb/spec/integration/... --define browser=firefox&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Run integration tests using (Firefox)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;bazel test //rb/spec/integration/... --define remote=true&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Run integration tests using (Chrome and Grid)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;bazel test //rb/spec/integration/... --define browser=firefox --define remote=true&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Run integration tests using (Firefox and Grid)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;bazel test --test_size_filters small //rb/...&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Run unit tests&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;bazel test //rb/spec/unit/...&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Run unit tests&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;p&gt;Suffix &lt;code&gt;...&lt;/code&gt; tells Bazel to run all the test targets. They are conveniently named by test file name with &lt;code&gt;_spec.rb&lt;/code&gt; removed so you can run them individually:&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Test file&lt;/th&gt; &#xA;    &lt;th&gt;Test target&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;rb/spec/integration/selenium/webdriver/chrome/driver_spec.rb&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;//rb/spec/integration/selenium/webdriver/chrome:driver&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;rb/spec/unit/selenium/webdriver/proxy_spec.rb&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;//rb/spec/unit/selenium/webdriver:proxy&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;p&gt;Supported browsers:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;chrome&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;edge&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;firefox&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;ie&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;safari&lt;/code&gt; (cannot be run in parallel - use &lt;code&gt;--local_test_jobs 1&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;safari-preview&lt;/code&gt; (cannot be run in parallel - use &lt;code&gt;--local_test_jobs 1&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Useful command line options:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;--flaky_test_attempts 3&lt;/code&gt; - re-run failed tests up to 3 times&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;--local_test_jobs 1&lt;/code&gt; - control parallelism of tests&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;--no-cache_test_results&lt;/code&gt;, &lt;code&gt;-t-&lt;/code&gt; - disable caching of test results and re-runs all of them&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;--test_arg &#34;-tfocus&#34;&lt;/code&gt; - test only &lt;a href=&#34;https://relishapp.com/rspec/rspec-core/v/3-12/docs/filtering/inclusion-filters&#34;&gt;focused specs&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;--test_arg &#34;-eTimeouts&#34;&lt;/code&gt; - test only specs which name include &#34;Timeouts&#34;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;--test_arg &#34;&amp;lt;any other RSpec argument&amp;gt;&#34;&lt;/code&gt; - pass any extra RSpec arguments (see &lt;code&gt;bazel run @bundle//:bin/rspec -- --help&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;--test_env FOO=bar&lt;/code&gt; - pass extra environment variable to test process (see below for supported variables)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;--test_output all&lt;/code&gt; - print all output from the tests, not just errors&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;--test_output streamed&lt;/code&gt; - run all tests one by one and print its output immediately&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Supported environment variables:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;WD_SPEC_DRIVER&lt;/code&gt; - the driver to test; either the browser name or &#39;remote&#39; (gets set by Bazel)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;WD_REMOTE_BROWSER&lt;/code&gt; - when &lt;code&gt;WD_SPEC_DRIVER&lt;/code&gt; is &lt;code&gt;remote&lt;/code&gt;; the name of the browser to test (gets set by Bazel)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;WD_REMOTE_URL&lt;/code&gt; - URL of an already running server to use for remote tests&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;DOWNLOAD_SERVER&lt;/code&gt; - when &lt;code&gt;WD_REMOTE_URL&lt;/code&gt; not set; whether to download and use most recently released server version for remote tests&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;DEBUG&lt;/code&gt; - turns on verbose debugging&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;HEADLESS&lt;/code&gt; - for chrome, edge and firefox; runs tests in headless mode&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;DISABLE_BUILD_CHECK&lt;/code&gt; - for chrome and edge; whether to ignore driver and browser version mismatches (allows testing Canary builds)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;CHROME_BINARY&lt;/code&gt; - path to test specific Chrome browser&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;EDGE_BINARY&lt;/code&gt; - path to test specific Edge browser&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;FIREFOX_BINARY&lt;/code&gt; - path to test specific Firefox browser&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;To run with a specific version of Ruby you can change the version in &lt;code&gt;rb/ruby_version.bzl&lt;/code&gt; or from command line:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo &#39;RUBY_VERSION = &#34;&amp;lt;X.Y.Z&amp;gt;&#34;&#39; &amp;gt; rb/ruby_version.bzl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If you want to debug code in tests, you can do it via &lt;a href=&#34;https://github.com/ruby/debug&#34;&gt;&lt;code&gt;debug&lt;/code&gt;&lt;/a&gt; gem:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Add &lt;code&gt;binding.break&lt;/code&gt; to the code where you want the debugger to start.&lt;/li&gt; &#xA;  &lt;li&gt;Run tests with &lt;code&gt;ruby_debug&lt;/code&gt; configuration: &lt;code&gt;bazel test --config ruby_debug &amp;lt;test&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;When debugger starts, run the following in a separate terminal to connect to debugger:&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel-selenium/external/bundle/bin/rdbg -A&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If you want to use RubyMine for development, a bit of extra configuration is necessary to let the IDE know about Bazel toolchain and artifacts:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Run &lt;code&gt;bundle exec rake update&lt;/code&gt; as necessary to update generated artifacts.&lt;/li&gt; &#xA;  &lt;li&gt;Open &lt;code&gt;rb/&lt;/code&gt; as a main project directory.&lt;/li&gt; &#xA;  &lt;li&gt;In &lt;kbd&gt;Settings / Languages &amp;amp; Frameworks / Ruby SDK and Gems&lt;/kbd&gt; add new &lt;kbd&gt;Interpreter&lt;/kbd&gt; pointing to &lt;code&gt;../bazel-selenium/external/rules_ruby_dist/dist/bin/ruby&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;You should now be able to run and debug any spec. It uses Chrome by default, but you can alter it using environment variables above.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;.NET&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to see .NET Build Steps&lt;/summary&gt; &#xA; &lt;p&gt;Bazel can not build .NET, yet, but it can set up tests with:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel build //dotnet/test/common:chrome&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Tests can then be run with:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd dotnet&#xA;dotnet test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;More information about running Selenium&#39;s .NET tests can be found in this &lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/selenium/trunk/dotnet/test/README.md&#34;&gt;README.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;Rust&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to see Rust Build Steps&lt;/summary&gt; &#xA; &lt;p&gt;Targets:&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Command&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;bazel build //rust:selenium-manager&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Build selenium-manager binary&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;bazel test //rust/...&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Run both unit and integration tests&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Build Details&lt;/h3&gt; &#xA;&lt;p&gt;Bazel files are called BUILD.bazel, and the order the modules are built is determined by the build system. If you want to build an individual module (assuming all dependent modules have previously been built), try the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel test javascript/atoms:test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case, &lt;code&gt;javascript/atoms&lt;/code&gt; is the module directory, &lt;code&gt;test&lt;/code&gt; is a target in that directory&#39;s &lt;code&gt;BUILD.bazel&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;As you see &lt;em&gt;build targets&lt;/em&gt; scroll past in the log, you may want to run them individually.&lt;/p&gt; &#xA;&lt;h3&gt;Build Output&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;bazel&lt;/code&gt; makes a top-level group of directories with the &lt;code&gt;bazel-&lt;/code&gt; prefix on each directory.&lt;/p&gt; &#xA;&lt;h3&gt;Common Tasks (Bazel)&lt;/h3&gt; &#xA;&lt;p&gt;To build the bulk of the Selenium binaries from source, run the following command from the root folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel build java/... javascript/...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run tests within a particular area of the project, use the &#34;test&#34; command, followed by the folder or target. Tests are tagged with &#34;small&#34;, &#34;medium&#34;, or &#34;large&#34;, and can be filtered with the &lt;code&gt;--test_size_filters&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel test --test_size_filters=small,medium java/...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Bazel&#39;s &#34;test&#34; command will run &lt;em&gt;all&lt;/em&gt; tests in the package, including integration tests. Expect the &lt;code&gt;test java/...&lt;/code&gt; to launch browsers and consume a considerable amount of time and resources.&lt;/p&gt; &#xA;&lt;p&gt;To bump the versions of the pinned browsers to their latest stable versions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel run scripts:pinned_browsers &amp;gt; temp.bzl &amp;amp;&amp;amp; mv temp.bzl common/repositories.bzl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Editing Code&lt;/h3&gt; &#xA;&lt;p&gt;Most of the team use either Intellij IDEA or VS.Code for their day-to-day editing. If you&#39;re working in IntelliJ, then we highly recommend installing the &lt;a href=&#34;https://plugins.jetbrains.com/plugin/8609-bazel&#34;&gt;Bazel IJ plugin&lt;/a&gt; which is documented on &lt;a href=&#34;https://plugins.jetbrains.com/plugin/8609-bazel&#34;&gt;its own site&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you do use IntelliJ and the Bazel plugin, there is a project view checked into the tree in &lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/selenium/trunk/scripts/ij.bazelproject&#34;&gt;scripts/ij.bazelproject&lt;/a&gt; which will make it easier to get up running, and editing code :)&lt;/p&gt; &#xA;&lt;h2&gt;Tour&lt;/h2&gt; &#xA;&lt;p&gt;The codebase is generally segmented around the languages used to write the component. Selenium makes extensive use of JavaScript, so let&#39;s start there. First of all, start the development server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel run debug-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, navigate to &lt;a href=&#34;http://localhost:2310/javascript&#34;&gt;http://localhost:2310/javascript&lt;/a&gt;. You&#39;ll find the contents of the &lt;code&gt;javascript/&lt;/code&gt; directory being shown. We use the &lt;a href=&#34;https://developers.google.com/closure/library/&#34;&gt;Closure Library&lt;/a&gt; for developing much of the JavaScript, so now navigate to &lt;a href=&#34;http://localhost:2310/javascript/atoms/test&#34;&gt;http://localhost:2310/javascript/atoms/test&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The tests in this directory are normal HTML files with names ending with &lt;code&gt;_test.html&lt;/code&gt;. Click on one to load the page and run the test.&lt;/p&gt; &#xA;&lt;h2&gt;Help with &lt;code&gt;go&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;More general, but basic, help for &lt;code&gt;go&lt;/code&gt;â€¦&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./go --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;go&lt;/code&gt; is a wrapper around &lt;a href=&#34;http://rake.rubyforge.org/&#34;&gt;Rake&lt;/a&gt;, so you can use the standard commands such as &lt;code&gt;rake -T&lt;/code&gt; to get more information about available targets.&lt;/p&gt; &#xA;&lt;h2&gt;Maven &lt;em&gt;per se&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Selenium is not built with Maven. It is built with &lt;code&gt;bazel&lt;/code&gt;, though that is invoked with &lt;code&gt;go&lt;/code&gt; as outlined above, so you do not have to learn too much about that.&lt;/p&gt; &#xA;&lt;p&gt;That said, it is possible to relatively quickly build Selenium pieces for Maven to use. You are only really going to want to do this when you are testing the cutting-edge of Selenium development (which we welcome) against your application. Here is the quickest way to build and deploy into your local maven repository (&lt;code&gt;~/.m2/repository&lt;/code&gt;), while skipping Selenium&#39;s own tests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./go maven-install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The maven jars should now be in your local &lt;code&gt;~/.m2/repository&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Updating Java dependencies&lt;/h2&gt; &#xA;&lt;p&gt;The coordinates (&lt;em&gt;groupId&lt;/em&gt;:&lt;em&gt;artifactId&lt;/em&gt;:&lt;em&gt;version&lt;/em&gt;) of the Java dependencies are defined in the file &lt;a href=&#34;https://github.com/SeleniumHQ/selenium/raw/trunk/java/maven_deps.bzl&#34;&gt;maven_deps.bzl&lt;/a&gt;. The process to modify these dependencies is the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;(Optional) If we want to detect the dependencies which are not updated, we can use the following command for automatic discovery:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel run @maven//:outdated&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Modify &lt;a href=&#34;https://github.com/SeleniumHQ/selenium/raw/trunk/java/maven_deps.bzl&#34;&gt;maven_deps.bzl&lt;/a&gt;. For instance, we can bump the version of a given artifact detected in the step before.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Repin dependencies. This process is required to update the file &lt;a href=&#34;https://github.com/SeleniumHQ/selenium/raw/trunk/java/maven_install.json&#34;&gt;maven_install.json&lt;/a&gt;, which is used to manage the Maven dependencies tree (see &lt;a href=&#34;https://github.com/bazelbuild/rules_jvm_external&#34;&gt;rules_jvm_external&lt;/a&gt; for further details). The command to carry out this step is the following:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;RULES_JVM_EXTERNAL_REPIN=1 bazel run @unpinned_maven//:pin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;(Optional) If we use IntelliJ with the Bazel plugin, we need to synchronize our project. To that aim, we click on &lt;em&gt;Bazel&lt;/em&gt; â†’ &lt;em&gt;Sync&lt;/em&gt; â†’ &lt;em&gt;Sync Project with BUILD Files&lt;/em&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Running browser tests on Linux&lt;/h2&gt; &#xA;&lt;p&gt;In order to run Browser tests, you first need to install the browser-specific drivers, such as &lt;a href=&#34;https://github.com/mozilla/geckodriver/releases&#34;&gt;&lt;code&gt;geckodriver&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://chromedriver.chromium.org/&#34;&gt;&lt;code&gt;chromedriver&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&#34;https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/&#34;&gt;&lt;code&gt;edgedriver&lt;/code&gt;&lt;/a&gt;. These need to be on your &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By default, Bazel runs these tests in your current X-server UI. If you prefer, you can alternatively run them in a virtual or nested X-server.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run the X server &lt;code&gt;Xvfb :99&lt;/code&gt; or &lt;code&gt;Xnest :99&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run a window manager, for example, &lt;code&gt;DISPLAY=:99 jwm&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run the tests you are interested in:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel test --test_env=DISPLAY=:99 //java/... --test_tag_filters=chrome&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An easy way to run tests in a virtual X-server is to use Bazel&#39;s &lt;code&gt;--run_under&lt;/code&gt; functionality:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bazel test --run_under=&#34;xvfb-run -a&#34; //java/... --test_tag_filters=chrome&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Bazel Installation/Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;Selenium Build Docker Image&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re finding it hard to set up a development environment using bazel and you have access to Docker, then you can build a Docker image suitable for building and testing Selenium in from the Dockerfile in the &lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/selenium/trunk/scripts/dev-image/Dockerfile&#34;&gt;dev image&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;MacOS&lt;/h3&gt; &#xA;&lt;h4&gt;bazelisk&lt;/h4&gt; &#xA;&lt;p&gt;Bazelisk is a Mac-friendly launcher for Bazel. To install, follow these steps:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew tap bazelbuild/tap &amp;amp;&amp;amp; \&#xA;brew uninstall bazel; \&#xA;brew install bazelbuild/tap/bazelisk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Xcode&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;re getting errors that mention Xcode, you&#39;ll need to install the command-line tools.&lt;/p&gt; &#xA;&lt;p&gt;Bazel for Mac requires some additional steps to configure properly. First things first: use the Bazelisk project (courtesy of philwo), a pure golang implementation of Bazel. In order to install Bazelisk, first verify that your Xcode will cooperate: execute the following command:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;xcode-select -p&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If the value is &lt;code&gt;/Applications/Xcode.app/Contents/Developer/&lt;/code&gt;, you can proceed with bazelisk installation. If, however, the return value is &lt;code&gt;/Library/Developer/CommandLineTools/&lt;/code&gt;, you&#39;ll need to redirect the Xcode system to the correct value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo xcode-select -s /Applications/Xcode.app/Contents/Developer/&#xA;sudo xcodebuild -license&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The first command will prompt you for a password. The second step requires you to read a new Xcode license, and then accept it by typing &#34;agree&#34;.&lt;/p&gt; &#xA;&lt;p&gt;(Thanks to &lt;a href=&#34;https://github.com/bazelbuild/bazel/issues/4314&#34;&gt;this thread&lt;/a&gt; for these steps)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>PojavLauncherTeam/PojavLauncher</title>
    <updated>2023-06-11T01:54:56Z</updated>
    <id>tag:github.com,2023-06-11:/PojavLauncherTeam/PojavLauncher</id>
    <link href="https://github.com/PojavLauncherTeam/PojavLauncher" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Minecraft: Java Edition Launcher for Android and iOS based on Boardwalk. This repository contains source code for Android platform.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;PojavLauncher&lt;/h1&gt; &#xA;&lt;img src=&#34;https://github.com/CriticalRange/PojavLauncher/raw/v3_openjdk/app_pojavlauncher/src/main/assets/pojavlauncher.png&#34; align=&#34;left&#34; width=&#34;130&#34; height=&#34;150&#34; alt=&#34;PojavLauncher logo&#34;&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/PojavLauncherTeam/PojavLauncher/actions&#34;&gt;&lt;img src=&#34;https://github.com/PojavLauncherTeam/PojavLauncher/workflows/Android%20CI/badge.svg?sanitize=true&#34; alt=&#34;Android CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/PojavLauncherTeam/PojavLauncher/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/commit-activity/m/PojavLauncherTeam/PojavLauncher&#34; alt=&#34;GitHub commit activity&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crowdin.com/project/pojavlauncher&#34;&gt;&lt;img src=&#34;https://badges.crowdin.net/pojavlauncher/localized.svg?sanitize=true&#34; alt=&#34;Crowdin&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/6RpEJda&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/724163890803638273.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/PLaunchTeam&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/plaunchteam?color=blue&amp;amp;style=flat-square&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;From &lt;a href=&#34;https://github.com/zhuowei/Boardwalk&#34;&gt;Boardwalk&lt;/a&gt;&#39;s ashes here comes PojavLauncher!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;PojavLauncher is a launcher that allows you to play Minecraft: Java Edition on your Android device!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It can run almost every version of the Minecraft, allowing you to use .jar only installers to install modloaders like &lt;a href=&#34;https://files.minecraftforge.net/&#34;&gt;forge&lt;/a&gt;, &lt;a href=&#34;http://fabricmc.net/&#34;&gt;fabric&lt;/a&gt;, &lt;a href=&#34;https://optifine.net&#34;&gt;optifine&lt;/a&gt;; Utility and hack clients like &lt;a href=&#34;https://www.labymod.net/en&#34;&gt;LabyMod&lt;/a&gt;, &lt;a href=&#34;https://www.wurstclient.net/&#34;&gt;Wurst&lt;/a&gt; and much more!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For more details &lt;a href=&#34;https://github.com/PojavLauncherTeam/PojavLauncher/wiki&#34;&gt;check out our wiki&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Some notes to start with&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We do not have an official TikTok account. No one from the dev team makes TikTok videos.&lt;/li&gt; &#xA; &lt;li&gt;The official Twitter for PojavLauncher is &lt;a href=&#34;https://twitter.com/PLaunchTeam&#34;&gt;@PLaunchTeam&lt;/a&gt;. Any others (most notably @PojavLauncher) are fake, please report them to Twitter&#39;s moderation team.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Navigation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PojavLauncherTeam/PojavLauncher/v3_openjdk/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PojavLauncherTeam/PojavLauncher/v3_openjdk/#getting-pojavlauncher&#34;&gt;Getting PojavLauncher&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PojavLauncherTeam/PojavLauncher/v3_openjdk/#building&#34;&gt;Building&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PojavLauncherTeam/PojavLauncher/v3_openjdk/#current-status&#34;&gt;Current status&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PojavLauncherTeam/PojavLauncher/v3_openjdk/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PojavLauncherTeam/PojavLauncher/v3_openjdk/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PojavLauncherTeam/PojavLauncher/v3_openjdk/#credits--third-party-components-and-their-licenses-if-available&#34;&gt;Credits &amp;amp; Third party components and their licenses&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PojavLauncher is a Minecraft: Java Edition launcher for Android and iOS based on &lt;a href=&#34;https://github.com/zhuowei/Boardwalk&#34;&gt;Boardwalk&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;This launcher can launch almost all available Minecraft versions ranging from rd-132211 to 1.19 snapshots (including Combat Test versions).&lt;/li&gt; &#xA; &lt;li&gt;Modding via Forge and Fabric are also supported.&lt;/li&gt; &#xA; &lt;li&gt;This repository contains source code for Android.&lt;/li&gt; &#xA; &lt;li&gt;For iOS/iPadOS, check out &lt;a href=&#34;https://github.com/PojavLauncherTeam/PojavLauncher_iOS&#34;&gt;PojavLauncher_iOS&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting PojavLauncher&lt;/h2&gt; &#xA;&lt;p&gt;You can get PojavLauncher via three methods:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;You can get the prebuilt app from &lt;a href=&#34;https://github.com/PojavLauncherTeam/PojavLauncher/releases&#34;&gt;stable releases&lt;/a&gt; or &lt;a href=&#34;https://github.com/PojavLauncherTeam/PojavLauncher/actions&#34;&gt;automatic builds&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can get it from Google Play by clicking on this badge: &lt;a href=&#34;https://play.google.com/store/apps/details?id=net.kdt.pojavlaunch&#34;&gt;&lt;img src=&#34;https://play.google.com/intl/en_us/badges/static/images/badges/en_badge_web_generic.png&#34; alt=&#34;Google Play&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can &lt;a href=&#34;https://raw.githubusercontent.com/PojavLauncherTeam/PojavLauncher/v3_openjdk/#building&#34;&gt;build&lt;/a&gt; from source.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;If you want to build from source code, follow the steps below.&lt;/p&gt; &#xA;&lt;h3&gt;Java Runtime Environment (JRE)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JRE for Android is &lt;a href=&#34;https://github.com/PojavLauncherTeam/openjdk-multiarch-jdk8u&#34;&gt;here&lt;/a&gt;, and the build script is &lt;a href=&#34;https://github.com/PojavLauncherTeam/android-openjdk-build-multiarch&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Follow build instruction on build script &lt;a href=&#34;https://github.com/PojavLauncherTeam/android-openjdk-build-multiarch/raw/buildjre8/README.md&#34;&gt;README.md&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You can also get &lt;a href=&#34;https://github.com/PojavLauncherTeam/android-openjdk-build-multiarch/actions&#34;&gt;CI auto builds&lt;/a&gt; if you are lazy or are failing to build it for some reason.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Either get the &lt;code&gt;jre8-pojav&lt;/code&gt; artifact from auto builds, or split all artifacts by yourself:&lt;br&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Get JREs for all of 4 supported architectures (arm, arm64, x86, x86_64) &lt;br&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Split JRE into parts:&lt;br&gt; Platform-independent: .jar files, libraries, configs, etc...&lt;br&gt; Platform-dependent: .so files, etc...&lt;br&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;Create:&lt;br&gt; A file named &lt;code&gt;universal.tar.xz&lt;/code&gt; with all platform-independent files&lt;br&gt; 4 files named &lt;code&gt;bin-&amp;lt;arch&amp;gt;.tar.xz&lt;/code&gt; with all platform-dependent files per-architecture&lt;br&gt;&lt;/li&gt; &#xA;       &lt;li&gt;Put these in the &lt;code&gt;assets/components/jre/&lt;/code&gt; folder&lt;br&gt;&lt;/li&gt; &#xA;       &lt;li&gt;(If needed) update the Version file with the current date&lt;br&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;LWJGL&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Coming soon&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;The Launcher&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Because languages are auto-added by Crowdin, you need to run the language list generator before building. In the project directory, run:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On Linux, Mac OS:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;chmod +x scripts/languagelist_updater.sh&#xA;bash scripts/languagelist_updater.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On Windows:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;scripts\languagelist_updater.bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, run these commands &lt;del&gt;or build using Android Studio&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build GLFW stub:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew :jre_lwjgl3glfw:build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build the launcher&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew :app_pojavlauncher:assembleDebug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(Replace &lt;code&gt;gradlew&lt;/code&gt; with &lt;code&gt;gradlew.bat&lt;/code&gt; if you are building on Windows).&lt;/p&gt; &#xA;&lt;h2&gt;Current status&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;del&gt;OpenJDK 9 Mobile port: ARM32, ARM64, x86, x86_64.&lt;/del&gt; Replaced by JRE8.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; OpenJDK 8 Mobile port: ARM32, ARM64, x86, x86_64&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; OpenJDK 17 Mobile port: ARM32, ARM64, x86, x86_64&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Headless mod installer&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Mod installer with GUI. Used &lt;code&gt;Caciocavallo&lt;/code&gt; project for AWT without X11.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; OpenGL in OpenJDK environment&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; OpenAL (works on most devices)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support for Minecraft 1.12.2 and below. Used &lt;a href=&#34;https://github.com/PojavLauncherTeam/lwjglx&#34;&gt;lwjglx&lt;/a&gt;, a LWJGL2 compatibility layer for LWJGL3.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support for Minecraft 1.13 and above. Used &lt;a href=&#34;https://github.com/PojavLauncherTeam/lwjgl3-glfw-java&#34;&gt;GLFW stub&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support for Minecraft 1.17 (22w13a to be exact) and above. Used &lt;a href=&#34;https://github.com/PojavLauncherTeam/gl4es-114-extra&#34;&gt;Holy GL4ES&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Game surface zooming.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; New input pipe rewritten to native code to boost performance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Rewritten entire controls system (thanks to @Mathias-Boulay)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; More to come!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Known Issues&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Controller mods aren&#39;t working.&lt;/li&gt; &#xA; &lt;li&gt;Random crashes could happen very often on Android 5.x when loading the game or joining a world.&lt;/li&gt; &#xA; &lt;li&gt;With big modpacks textures could be messed up&lt;/li&gt; &#xA; &lt;li&gt;Probably more, that&#39;s why we have a bug tracker ;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PojavLauncher is licensed under &lt;a href=&#34;https://github.com/khanhduytran0/PojavLauncher/raw/master/LICENSE&#34;&gt;GNU GPLv3&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! We welcome any type of contribution, not only code. For example, you can help the wiki shape up. You can help the &lt;a href=&#34;https://crowdin.com/project/pojavlauncher&#34;&gt;translation&lt;/a&gt; too!&lt;/p&gt; &#xA;&lt;p&gt;Any code change to this repository (or iOS) should be submitted as a pull request. The description should explain what the code does and give steps to execute it.&lt;/p&gt; &#xA;&lt;h2&gt;Credits &amp;amp; Third party components and their licenses (if available)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zhuowei/Boardwalk&#34;&gt;Boardwalk&lt;/a&gt; (JVM Launcher): Unknown License/&lt;a href=&#34;https://github.com/zhuowei/Boardwalk/raw/master/LICENSE&#34;&gt;Apache License 2.0&lt;/a&gt; or GNU GPLv2.&lt;/li&gt; &#xA; &lt;li&gt;Android Support Libraries: &lt;a href=&#34;https://android.googlesource.com/platform/prebuilts/maven_repo/android/+/master/NOTICE.txt&#34;&gt;Apache License 2.0&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PojavLauncherTeam/gl4es&#34;&gt;GL4ES&lt;/a&gt;: &lt;a href=&#34;https://github.com/ptitSeb/gl4es/raw/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PojavLauncherTeam/openjdk-multiarch-jdk8u&#34;&gt;OpenJDK&lt;/a&gt;: &lt;a href=&#34;https://openjdk.java.net/legal/gplv2+ce.html&#34;&gt;GNU GPLv2 License&lt;/a&gt;.&lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PojavLauncherTeam/lwjgl3&#34;&gt;LWJGL3&lt;/a&gt;: &lt;a href=&#34;https://github.com/LWJGL/lwjgl3/raw/master/LICENSE.md&#34;&gt;BSD-3 License&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PojavLauncherTeam/lwjglx&#34;&gt;LWJGLX&lt;/a&gt; (LWJGL2 API compatibility layer for LWJGL3): unknown license.&lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.freedesktop.org/mesa/mesa&#34;&gt;Mesa 3D Graphics Library&lt;/a&gt;: &lt;a href=&#34;https://docs.mesa3d.org/license.html&#34;&gt;MIT License&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pro-grade/pro-grade&#34;&gt;pro-grade&lt;/a&gt; (Java sandboxing security manager): &lt;a href=&#34;https://github.com/pro-grade/pro-grade/raw/master/LICENSE.txt&#34;&gt;Apache License 2.0&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iqiyi/xHook&#34;&gt;xHook&lt;/a&gt; (Used for exit code trapping): &lt;a href=&#34;https://github.com/iqiyi/xHook/raw/master/LICENSE&#34;&gt;MIT and BSD-style licenses&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anholt/libepoxy&#34;&gt;libepoxy&lt;/a&gt;: &lt;a href=&#34;https://github.com/anholt/libepoxy/raw/master/COPYING&#34;&gt;MIT License&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PojavLauncherTeam/virglrenderer&#34;&gt;virglrenderer&lt;/a&gt;: &lt;a href=&#34;https://gitlab.freedesktop.org/virgl/virglrenderer/-/blob/master/COPYING&#34;&gt;MIT License&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Thanks to &lt;a href=&#34;https://mc-heads.net&#34;&gt;MCHeads&lt;/a&gt; for providing Minecraft avatars.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>google/ExoPlayer</title>
    <updated>2023-06-11T01:54:56Z</updated>
    <id>tag:github.com,2023-06-11:/google/ExoPlayer</id>
    <link href="https://github.com/google/ExoPlayer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An extensible media player for Android&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ExoPlayer &lt;img src=&#34;https://img.shields.io/github/v/release/google/ExoPlayer.svg?label=latest&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;ExoPlayer is an application level media player for Android. The latest version is published as part of &lt;a href=&#34;https://github.com/androidx/media&#34;&gt;AndroidX Media&lt;/a&gt; under a new package name and all future development will be in that project.&lt;/p&gt; &#xA;&lt;p&gt;Please refer to our &lt;a href=&#34;https://developer.android.com/guide/topics/media/media3/getting-started/migration-guide&#34;&gt;migration guide and script&lt;/a&gt; to move your codebase to the Media3 package names.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://developer.android.com/guide/topics/media/exoplayer&#34;&gt;developer guide&lt;/a&gt; provides a wealth of information.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://developer.android.com/reference/androidx/media3/common/package-summary&#34;&gt;class reference&lt;/a&gt; documents ExoPlayer classes. Note that the classes are documented with their Media3 package names.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://github.com/google/ExoPlayer/raw/release-v2/RELEASENOTES.md&#34;&gt;release notes&lt;/a&gt; document the major changes in each release.&lt;/li&gt; &#xA; &lt;li&gt;Follow our &lt;a href=&#34;https://medium.com/google-exoplayer&#34;&gt;developer blog&lt;/a&gt; to keep up to date with the latest ExoPlayer developments!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Using ExoPlayer&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://github.com/androidx/media/raw/release/README.md&#34;&gt;AndroidX Media&lt;/a&gt; for the usage instructions of the latest release.&lt;/p&gt; &#xA;&lt;p&gt;ExoPlayer modules can be obtained from &lt;a href=&#34;https://developer.android.com/studio/build/dependencies#google-maven&#34;&gt;the Google Maven repository&lt;/a&gt;. It&#39;s also possible to clone the repository and depend on the modules locally.&lt;/p&gt; &#xA;&lt;h3&gt;From the Google Maven repository&lt;/h3&gt; &#xA;&lt;h4&gt;1. Add ExoPlayer module dependencies&lt;/h4&gt; &#xA;&lt;p&gt;The easiest way to get started using ExoPlayer is to add it as a gradle dependency in the &lt;code&gt;build.gradle&lt;/code&gt; file of your app module. The following will add a dependency to the full library:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;implementation &#39;com.google.android.exoplayer:exoplayer:2.X.X&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where &lt;code&gt;2.X.X&lt;/code&gt; is your preferred version.&lt;/p&gt; &#xA;&lt;p&gt;As an alternative to the full library, you can depend on only the library modules that you actually need. For example the following will add dependencies on the Core, DASH and UI library modules, as might be required for an app that only plays DASH content:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;implementation &#39;com.google.android.exoplayer:exoplayer-core:2.X.X&#39;&#xA;implementation &#39;com.google.android.exoplayer:exoplayer-dash:2.X.X&#39;&#xA;implementation &#39;com.google.android.exoplayer:exoplayer-ui:2.X.X&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When depending on individual modules they must all be the same version.&lt;/p&gt; &#xA;&lt;p&gt;The available library modules are listed below. Adding a dependency to the full ExoPlayer library is equivalent to adding dependencies on all of the library modules individually.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;exoplayer-core&lt;/code&gt;: Core functionality (required).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;exoplayer-dash&lt;/code&gt;: Support for DASH content.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;exoplayer-hls&lt;/code&gt;: Support for HLS content.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;exoplayer-rtsp&lt;/code&gt;: Support for RTSP content.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;exoplayer-smoothstreaming&lt;/code&gt;: Support for SmoothStreaming content.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;exoplayer-transformer&lt;/code&gt;: Media transformation functionality.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;exoplayer-ui&lt;/code&gt;: UI components and resources for use with ExoPlayer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In addition to library modules, ExoPlayer has extension modules that depend on external libraries to provide additional functionality. Some extensions are available from the Maven repository, whereas others must be built manually. Browse the &lt;a href=&#34;https://github.com/google/ExoPlayer/tree/release-v2/extensions/&#34;&gt;extensions directory&lt;/a&gt; and their individual READMEs for details.&lt;/p&gt; &#xA;&lt;p&gt;More information on the library and extension modules that are available can be found on the &lt;a href=&#34;https://maven.google.com/web/index.html#com.google.android.exoplayer&#34;&gt;Google Maven ExoPlayer page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;2. Turn on Java 8 support&lt;/h4&gt; &#xA;&lt;p&gt;If not enabled already, you also need to turn on Java 8 support in all &lt;code&gt;build.gradle&lt;/code&gt; files depending on ExoPlayer, by adding the following to the &lt;code&gt;android&lt;/code&gt; section:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;compileOptions {&#xA;  targetCompatibility JavaVersion.VERSION_1_8&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3. Enable multidex&lt;/h4&gt; &#xA;&lt;p&gt;If your Gradle &lt;code&gt;minSdkVersion&lt;/code&gt; is 20 or lower, you should &lt;a href=&#34;https://developer.android.com/studio/build/multidex&#34;&gt;enable multidex&lt;/a&gt; in order to prevent build errors.&lt;/p&gt; &#xA;&lt;h3&gt;Locally&lt;/h3&gt; &#xA;&lt;p&gt;Cloning the repository and depending on the modules locally is required when using some ExoPlayer extension modules. It&#39;s also a suitable approach if you want to make local changes to ExoPlayer, or if you want to use a development branch.&lt;/p&gt; &#xA;&lt;p&gt;First, clone the repository into a local directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/google/ExoPlayer.git&#xA;cd ExoPlayer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, add the following to your project&#39;s &lt;code&gt;settings.gradle&lt;/code&gt; file, replacing &lt;code&gt;path/to/exoplayer&lt;/code&gt; with the path to your local copy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;gradle.ext.exoplayerModulePrefix = &#39;exoplayer-&#39;&#xA;apply from: file(&#34;path/to/exoplayer/core_settings.gradle&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should now see the ExoPlayer modules appear as part of your project. You can depend on them as you would on any other local module, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;implementation project(&#39;:exoplayer-library-core&#39;)&#xA;implementation project(&#39;:exoplayer-library-dash&#39;)&#xA;implementation project(&#39;:exoplayer-library-ui&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>