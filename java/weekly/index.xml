<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-01T01:56:09Z</updated>
  <subtitle>Weekly Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>williamfiset/Algorithms</title>
    <updated>2023-10-01T01:56:09Z</updated>
    <id>tag:github.com,2023-10-01:/williamfiset/Algorithms</id>
    <link href="https://github.com/williamfiset/Algorithms" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A collection of algorithms and data structures&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/williamfiset/Algorithms/workflows/Java%20CI%20with%20Gradle/badge.svg?sanitize=true&#34; alt=&#34;Java CI with Gradle&#34;&gt; &lt;img src=&#34;https://github.com/williamfiset/Algorithms/workflows/README%20URL%20Checker/badge.svg?sanitize=true&#34; alt=&#34;README Checker&#34;&gt; &lt;a href=&#34;https://www.paypal.com/donate?hosted_button_id=JUP2HZ6JUPB5C&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-PayPal-green.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Algorithms &amp;amp; data structures project&lt;/h1&gt; &#xA;&lt;p&gt;Algorithms and data structures are fundamental to efficient code and good software design. Creating and designing excellent algorithms is required for being an exemplary programmer. This repository&#39;s goal is to demonstrate how to correctly implement common data structures and algorithms in the simplest and most elegant ways.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;This repository is contribution friendly &lt;span&gt;😃&lt;/span&gt;. If you&#39;d like to add or improve an algorithm, your contribution is welcome! Please be sure to check out the &lt;a href=&#34;https://github.com/williamfiset/Algorithms/wiki&#34;&gt;Wiki&lt;/a&gt; for instructions.&lt;/p&gt; &#xA;&lt;h3&gt;Other programming languages?&lt;/h3&gt; &#xA;&lt;p&gt;This repository provides algorithm implementations in Java, however, there are other forks that provide implementations in other languages, most notably:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;C++/Python&lt;/strong&gt;: &lt;a href=&#34;https://github.com/akzare/Algorithms&#34;&gt;https://github.com/akzare/Algorithms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Rust&lt;/strong&gt;: &lt;a href=&#34;https://github.com/TianyiShi2001/Algorithms&#34;&gt;https://github.com/TianyiShi2001/Algorithms&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Running an algorithm implementation&lt;/h1&gt; &#xA;&lt;p&gt;To compile and run any of the algorithms here, you need at least JDK version 8. Gradle can make things more convenient for you, but it is not required.&lt;/p&gt; &#xA;&lt;h2&gt;Running with Gradle (recommended)&lt;/h2&gt; &#xA;&lt;p&gt;This project supports the &lt;a href=&#34;https://docs.gradle.org/current/userguide/gradle_wrapper.html&#34;&gt;Gradle Wrapper&lt;/a&gt;. The Gradle wrapper automatically downloads Gradle the first time it runs, so expect a delay when running the first command below.&lt;/p&gt; &#xA;&lt;p&gt;If you are on Windows, use &lt;code&gt;gradlew.bat&lt;/code&gt; instead of &lt;code&gt;./gradlew&lt;/code&gt; below.&lt;/p&gt; &#xA;&lt;p&gt;Run a single algorithm like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew run -Palgorithm=&amp;lt;algorithm-subpackage&amp;gt;.&amp;lt;algorithm-class&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can run a single algorithm specifying the full class name&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew run -Pmain=&amp;lt;algorithm-fully-qualified-class-name&amp;gt;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew run -Palgorithm=search.BinarySearch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew run -Pmain=com.williamfiset.algorithms.search.BinarySearch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compiling and running with only a JDK&lt;/h2&gt; &#xA;&lt;h3&gt;Create a classes folder&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd Algorithms&#xA;mkdir classes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Compile the algorithm&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;javac -sourcepath src/main/java -d classes src/main/java/ &amp;lt;relative-path-to-java-source-file&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run the algorithm&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;java -cp classes &amp;lt;class-fully-qualified-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ javac -d classes -sourcepath src/main/java src/main/java/com/williamfiset/algorithms/search/BinarySearch.java&#xA;$ java -cp classes com.williamfiset.algorithms.search.BinarySearch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Data Structures&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=q4fnJZr8ztY&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/balancedtree&#34;&gt;Balanced Trees&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/balancedtree/AVLTreeRecursive.java&#34;&gt;AVL Tree (recursive)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/balancedtree/RedBlackTree.java&#34;&gt;Red Black Tree (recursive)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=JfSdGQdAzq8&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/binarysearchtree/BinarySearchTree.java&#34;&gt;Binary Search Tree&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/binarysearchtree/SplayTree.java&#34;&gt;Splay Tree&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=PEnFFiQe1pM&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/dynamicarray&#34;&gt;Dynamic Array&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/dynamicarray/IntArray.java&#34;&gt;Dynamic array (integer only, fast)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=RgITNht_f4Q&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/fenwicktree&#34;&gt;Fenwick Tree&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/fenwicktree/FenwickTreeRangeQueryPointUpdate.java&#34;&gt;Fenwick Tree (range query, point updates)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/fenwicktree/FenwickTreeRangeUpdatePointQuery.java&#34;&gt;Fenwick Tree (range update, point query)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/fibonacciheap&#34;&gt;Fibonacci Heap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=2E54GqF0H4s&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/hashtable&#34;&gt;Hashtable&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/hashtable/HashTableDoubleHashing.java&#34;&gt;Hashtable (double hashing)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/hashtable/HashTableLinearProbing.java&#34;&gt;Hashtable (linear probing)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/hashtable/HashTableQuadraticProbing.java&#34;&gt;Hashtable (quadratic probing)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/hashtable/HashTableSeparateChaining.java&#34;&gt;Hashtable (separate chaining)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=-Yn5DU0_-lw&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/linkedlist/DoublyLinkedList.java&#34;&gt;Linked List&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=wptevk0bshY&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/priorityqueue&#34;&gt;Priority Queue&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/priorityqueue/BinaryHeap.java&#34;&gt;Min Binary Heap&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/priorityqueue/MinIndexedBinaryHeap.java&#34;&gt;Min Indexed Binary Heap (sorted key-value pairs, similar to hash-table)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/priorityqueue/MinDHeap.java&#34;&gt;Min D-Heap&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=DT8xZ0Uf8wo&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/priorityqueue/MinIndexedDHeap.java&#34;&gt;Min Indexed D-Heap (sorted key-value pairs, similar to hash-table)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=KxzhEQ-zpDc&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/queue&#34;&gt;Queue&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/queue/IntQueue.java&#34;&gt;Queue (integer only, fixed size, fast)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/queue/Queue.java&#34;&gt;Queue (linked list, generic)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/segmenttree&#34;&gt;Segment Tree&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/CompactSegmentTree.java&#34;&gt;Segment tree (array based, compact)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/Node.java&#34;&gt;Segment tree (pointer implementation)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/uUatD9AudXo&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/sparsetable/SparseTable.java&#34;&gt;Sparse Table&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=L3ud3rXpIxA&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/stack&#34;&gt;Stack&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/stack/IntStack.java&#34;&gt;Stack (integer only, fixed size, fast)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/stack/ListStack.java&#34;&gt;Stack (linked list, generic)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/stack/ArrayStack.java&#34;&gt;Stack (array, generic)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=zqKlL3ZpTqs&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/suffixarray&#34;&gt;Suffix Array&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/suffixarray/SuffixArraySlow.java&#34;&gt;Suffix Array (O(n²logn) construction)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/suffixarray/SuffixArrayMed.java&#34;&gt;Suffix Array (O(nlog²(n)) construction)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/suffixarray/SuffixArrayFast.java&#34;&gt;Suffix Array (O(nlog(n)) construction)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/trie/Trie.java&#34;&gt;Trie&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ibjEGG7ylHk&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/unionfind/UnionFind.java&#34;&gt;Union Find&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Dynamic Programming&lt;/h1&gt; &#xA;&lt;h2&gt;Dynamic Programming Classics&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/dp/CoinChange.java&#34;&gt;Coin change problem&lt;/a&gt; &lt;strong&gt;- O(nW)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/dp/EditDistanceIterative.java&#34;&gt;Edit distance (iterative)&lt;/a&gt; &lt;strong&gt;- O(nm)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/dp/EditDistanceRecursive.java&#34;&gt;Edit distance (recursive)&lt;/a&gt; &lt;strong&gt;- O(nm)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=cJ21moQpofY&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/dp/Knapsack_01.java&#34;&gt;Knapsack 0/1&lt;/a&gt; &lt;strong&gt;- O(nW)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/dp/KnapsackUnbounded.java&#34;&gt;Knapsack unbounded (0/∞)&lt;/a&gt; &lt;strong&gt;- O(nW)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/dp/MaximumSubarray.java&#34;&gt;Maximum contiguous subarray&lt;/a&gt; &lt;strong&gt;- O(n)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/dp/LongestCommonSubsequence.java&#34;&gt;Longest Common Subsequence (LCS)&lt;/a&gt; &lt;strong&gt;- O(nm)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/dp/LongestIncreasingSubsequence.java&#34;&gt;Longest Increasing Subsequence (LIS)&lt;/a&gt; &lt;strong&gt;- O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/dp/LongestPalindromeSubsequence.java&#34;&gt;Longest Palindrome Subsequence (LPS)&lt;/a&gt; &lt;strong&gt;- O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=cY4HiiFHO1o&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/TspDynamicProgrammingIterative.java&#34;&gt;Traveling Salesman Problem (dynamic programming, iterative)&lt;/a&gt; &lt;strong&gt;- O(n&lt;sup&gt;2&lt;/sup&gt;2&lt;sup&gt;n&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/TspDynamicProgrammingRecursive.java&#34;&gt;Traveling Salesman Problem (dynamic programming, recursive)&lt;/a&gt; &lt;strong&gt;- O(n&lt;sup&gt;2&lt;/sup&gt;2&lt;sup&gt;n&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/dp/MinimumWeightPerfectMatching.java&#34;&gt;Minimum Weight Perfect Matching (iterative, complete graph)&lt;/a&gt; &lt;strong&gt;- O(n&lt;sup&gt;2&lt;/sup&gt;2&lt;sup&gt;n&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Dynamic Programming Problem Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Adhoc&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=_tur2nPkIKo&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/williamfiset/Algorithms/raw/master/src/main/java/com/williamfiset/algorithms/dp/examples/magicalcows/MagicalCows.java&#34;&gt;Magic Cows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/oQQO_n57SB0&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/williamfiset/Algorithms/raw/master/src/main/java/com/williamfiset/algorithms/dp/examples/narrowartgallery/NarrowArtGalleryRecursive.java&#34;&gt;Narrow Art Gallery&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Tiling problems&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/yn2jnmlepY8&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/williamfiset/Algorithms/raw/master/src/main/java/com/williamfiset/algorithms/dp/examples/tilingdominoes/TilingDominoes.java&#34;&gt;Tiling Dominoes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=CecjOo4Zo-g&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/dp/examples/domino-and-tromino-tiling&#34;&gt;Tiling Dominoes and Trominoes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/pPgBZqY_Xh0&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/williamfiset/Algorithms/raw/master/src/main/java/com/williamfiset/algorithms/dp/examples/scenes/Scenes.java&#34;&gt;Mountain Scenes&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Geometry&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/AngleBetweenVectors2D.java&#34;&gt;Angle between 2D vectors&lt;/a&gt; &lt;strong&gt;- O(1)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/AngleBetweenVectors3D.java&#34;&gt;Angle between 3D vectors&lt;/a&gt; &lt;strong&gt;- O(1)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/CircleCircleIntersectionPoints.js&#34;&gt;Circle-circle intersection point(s)&lt;/a&gt; &lt;strong&gt;- O(1)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/LineCircleIntersection.js&#34;&gt;Circle-line intersection point(s)&lt;/a&gt; &lt;strong&gt;- O(1)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/LineSegmentCircleIntersection.js&#34;&gt;Circle-line segment intersection point(s)&lt;/a&gt; &lt;strong&gt;- O(1)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/PointCircleTangent.java&#34;&gt;Circle-point tangent line(s)&lt;/a&gt; &lt;strong&gt;- O(1)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/ClosestPairOfPoints.java&#34;&gt;Closest pair of points (line sweeping algorithm)&lt;/a&gt; &lt;strong&gt;- O(nlog(n))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/CollinearPoints.java&#34;&gt;Collinear points test (are three 2D points on the same line)&lt;/a&gt; &lt;strong&gt;- O(1)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/ConvexHullGrahamScan.java&#34;&gt;Convex hull (Graham Scan algorithm)&lt;/a&gt; &lt;strong&gt;- O(nlog(n))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/ConvexHullMonotoneChainsAlgorithm.java&#34;&gt;Convex hull (Monotone chain algorithm)&lt;/a&gt; &lt;strong&gt;- O(nlog(n))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/ConvexPolygonArea.java&#34;&gt;Convex polygon area&lt;/a&gt; &lt;strong&gt;- O(n)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/ConvexPolygonCutWithLineSegment.java&#34;&gt;Convex polygon cut&lt;/a&gt; &lt;strong&gt;- O(n)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/ConvexPolygonContainsPoint.java&#34;&gt;Convex polygon contains points&lt;/a&gt; &lt;strong&gt;- O(log(n))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/CoplanarPoints.java&#34;&gt;Coplanar points test (are four 3D points on the same plane)&lt;/a&gt; &lt;strong&gt;- O(1)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/Line.java&#34;&gt;Line class (handy infinite line class)&lt;/a&gt; &lt;strong&gt;- O(1)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/LineCircleIntersection.js&#34;&gt;Line-circle intersection point(s)&lt;/a&gt; &lt;strong&gt;- O(1)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/LineSegmentCircleIntersection.js&#34;&gt;Line segment-circle intersection point(s)&lt;/a&gt; &lt;strong&gt;- O(1)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/LineSegmentToGeneralForm.java&#34;&gt;Line segment to general form (ax + by = c)&lt;/a&gt; &lt;strong&gt;- O(1)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/LineSegmentLineSegmentIntersection.java&#34;&gt;Line segment-line segment intersection&lt;/a&gt; &lt;strong&gt;- O(1)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/LongitudeLatitudeGeographicDistance.java&#34;&gt;Longitude-Latitude geographic distance&lt;/a&gt; &lt;strong&gt;- O(1)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/PointInsideTriangle.java&#34;&gt;Point is inside triangle check&lt;/a&gt; &lt;strong&gt;- O(1)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/PointRotation.java&#34;&gt;Point rotation about point&lt;/a&gt; &lt;strong&gt;- O(1)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/TriangleArea.java&#34;&gt;Triangle area algorithms&lt;/a&gt; &lt;strong&gt;- O(1)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/CircleCircleIntersectionArea.java&#34;&gt;[UNTESTED] Circle-circle intersection area&lt;/a&gt; &lt;strong&gt;- O(1)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/CircularSegmentArea.java&#34;&gt;[UNTESTED] Circular segment area&lt;/a&gt; &lt;strong&gt;- O(1)&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Graph theory&lt;/h1&gt; &#xA;&lt;h3&gt;Tree algorithms&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=2FFq2_je7Lg&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/treealgorithms/RootingTree.java&#34;&gt;Rooting an undirected tree&lt;/a&gt; &lt;strong&gt;- O(V+E)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=OCKvEMF0Xac&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/treealgorithms/TreeIsomorphism.java&#34;&gt;Identifying isomorphic trees&lt;/a&gt; &lt;strong&gt;- O(?)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=nzF_9bjDzdc&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/treealgorithms/TreeCenter.java&#34;&gt;Tree center(s)&lt;/a&gt; &lt;strong&gt;- O(V+E)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/treealgorithms/TreeDiameter.java&#34;&gt;Tree diameter&lt;/a&gt; &lt;strong&gt;- O(V+E)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=sD1IoalFomA&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/treealgorithms/LowestCommonAncestorEulerTour.java&#34;&gt;Lowest Common Ancestor (LCA, Euler tour)&lt;/a&gt; &lt;strong&gt;- O(1) queries, O(nlogn) preprocessing&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Network flow&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/networkflow/BipartiteGraphCheckAdjacencyList.java&#34;&gt;Bipartite graph verification (adjacency list)&lt;/a&gt; &lt;strong&gt;- O(V+E)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=LdOnanfc5TM&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/networkflow/FordFulkersonDfsSolverAdjacencyList.java&#34;&gt;Max flow &amp;amp; Min cut (Ford-Fulkerson with DFS, adjacency list)&lt;/a&gt; &lt;strong&gt;- O(fE)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/networkflow/FordFulkersonDFSAdjacencyMatrix.java&#34;&gt;Max flow &amp;amp; Min cut (Ford-Fulkerson with DFS, adjacency matrix)&lt;/a&gt; &lt;strong&gt;- O(fV&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=RppuJYwlcI8&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/networkflow/EdmondsKarpAdjacencyList.java&#34;&gt;Max flow &amp;amp; Min cut (Edmonds-Karp, adjacency list)&lt;/a&gt; &lt;strong&gt;- O(VE&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/1ewLrXUz4kk&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/networkflow/CapacityScalingSolverAdjacencyList.java&#34;&gt;Max flow &amp;amp; Min cut (Capacity scaling, adjacency list)&lt;/a&gt; &lt;strong&gt;- O(E&lt;sup&gt;2&lt;/sup&gt;log&lt;sub&gt;2&lt;/sub&gt;(U))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/M6cm8UeeziI&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/networkflow/Dinics.java&#34;&gt;Max flow &amp;amp; Min cut (Dinic&#39;s, adjacency list)&lt;/a&gt; &lt;strong&gt;- O(EV&lt;sup&gt;2&lt;/sup&gt;) or O(E√V) for bipartite graphs&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/networkflow/MaximumCardinalityBipartiteMatchingAugmentingPathAdjacencyList.java&#34;&gt;Maximum Cardinality Bipartite Matching (augmenting path algorithm, adjacency list)&lt;/a&gt; &lt;strong&gt;- O(VE)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/networkflow/MinCostMaxFlowWithBellmanFord.java&#34;&gt;Min Cost Max Flow (Bellman-Ford, adjacency list)&lt;/a&gt; &lt;strong&gt;- O(E&lt;sup&gt;2&lt;/sup&gt;V&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/networkflow/MinCostMaxFlowJohnsons.java&#34;&gt;Min Cost Max Flow (Johnson&#39;s algorithm, adjacency list)&lt;/a&gt; &lt;strong&gt;- O(E&lt;sup&gt;2&lt;/sup&gt;Vlog(V))&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Main graph theory algorithms&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/ArticulationPointsAdjacencyList.java&#34;&gt;Articulation points/cut vertices (adjacency list)&lt;/a&gt; &lt;strong&gt;- O(V+E)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/BellmanFordEdgeList.java&#34;&gt;Bellman-Ford (edge list, negative cycles, fast &amp;amp; optimized)&lt;/a&gt; &lt;strong&gt;- O(VE)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=lyw4FaxrwHg&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/BellmanFordAdjacencyList.java&#34;&gt;Bellman-Ford (adjacency list, negative cycles)&lt;/a&gt; &lt;strong&gt;- O(VE)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/BellmanFordAdjacencyMatrix.java&#34;&gt;Bellman-Ford (adjacency matrix, negative cycles)&lt;/a&gt; &lt;strong&gt;- O(V&lt;sup&gt;3&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=oDqjPvD54Ss&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/BreadthFirstSearchAdjacencyListIterative.java&#34;&gt;Breadth first search (adjacency list)&lt;/a&gt; &lt;strong&gt;- O(V+E)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/BreadthFirstSearchAdjacencyListIterativeFastQueue.java&#34;&gt;Breadth first search (adjacency list, fast queue)&lt;/a&gt; &lt;strong&gt;- O(V+E)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/BridgesAdjacencyList.java&#34;&gt;Bridges/cut edges (adjacency list)&lt;/a&gt; &lt;strong&gt;- O(V+E)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/ConnectedComponentsAdjacencyList.java&#34;&gt;Find connected components (adjacency list, union find)&lt;/a&gt; &lt;strong&gt;- O(Elog(E))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/ConnectedComponentsDfsSolverAdjacencyList.java&#34;&gt;Find connected components (adjacency list, DFS)&lt;/a&gt; &lt;strong&gt;- O(V+E)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/DepthFirstSearchAdjacencyListIterative.java&#34;&gt;Depth first search (adjacency list, iterative)&lt;/a&gt; &lt;strong&gt;- O(V+E)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/DepthFirstSearchAdjacencyListIterativeFastStack.java&#34;&gt;Depth first search (adjacency list, iterative, fast stack)&lt;/a&gt; &lt;strong&gt;- O(V+E)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=7fujbpJ0LB4&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/DepthFirstSearchAdjacencyListRecursive.java&#34;&gt;Depth first search (adjacency list, recursive)&lt;/a&gt; &lt;strong&gt;- O(V+E)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=pSqmAO-m7Lk&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/DijkstrasShortestPathAdjacencyList.java&#34;&gt;Dijkstra&#39;s shortest path (adjacency list, lazy implementation)&lt;/a&gt; &lt;strong&gt;- O(Elog(V))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=pSqmAO-m7Lk&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/DijkstrasShortestPathAdjacencyListWithDHeap.java&#34;&gt;Dijkstra&#39;s shortest path (adjacency list, eager implementation + D-ary heap)&lt;/a&gt; &lt;strong&gt;- O(Elog&lt;sub&gt;E/V&lt;/sub&gt;(V))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=8MpoO2zA2l4&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/EulerianPathDirectedEdgesAdjacencyList.java&#34;&gt;Eulerian Path (directed edges)&lt;/a&gt; &lt;strong&gt;- O(E+V)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=4NQ3HnhyNfQ&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/FloydWarshallSolver.java&#34;&gt;Floyd Warshall algorithm (adjacency matrix, negative cycle check)&lt;/a&gt; &lt;strong&gt;- O(V&lt;sup&gt;3&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/GraphDiameter.java&#34;&gt;Graph diameter (adjacency list)&lt;/a&gt; &lt;strong&gt;- O(VE)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=cIBFEhD77b4&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/Kahns.java&#34;&gt;Kahn&#39;s algorithm (topological sort, adjacency list)&lt;/a&gt; &lt;strong&gt;- O(E+V)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/KruskalsEdgeList.java&#34;&gt;Kruskal&#39;s min spanning tree algorithm (edge list, union find)&lt;/a&gt; &lt;strong&gt;- O(Elog(E))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=JZBQLXgSGfs&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/KruskalsEdgeListPartialSortSolver.java&#34;&gt;Kruskal&#39;s min spanning tree algorithm (edge list, union find, lazy sorting)&lt;/a&gt; &lt;strong&gt;- O(Elog(E))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/Kosaraju.java&#34;&gt;Kosaraju&#39;s strongly connected components algorithm (adjacency list)&lt;/a&gt; &lt;strong&gt;- O(V+E)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=jsmMtJpPnhU&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/LazyPrimsAdjacencyList.java&#34;&gt;Prim&#39;s min spanning tree algorithm (lazy version, adjacency list)&lt;/a&gt; &lt;strong&gt;- O(Elog(E))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/LazyPrimsAdjacencyMatrix.java&#34;&gt;Prim&#39;s min spanning tree algorithm (lazy version, adjacency matrix)&lt;/a&gt; &lt;strong&gt;- O(V&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=xq3ABa-px_g&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/EagerPrimsAdjacencyList.java&#34;&gt;Prim&#39;s min spanning tree algorithm (eager version, adjacency list)&lt;/a&gt; &lt;strong&gt;- O(Elog(V))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/SteinerTree.java&#34;&gt;Steiner tree (minimum spanning tree generalization)&lt;/a&gt; &lt;strong&gt;- O(V&lt;sup&gt;3&lt;/sup&gt; + V&lt;sup&gt;2&lt;/sup&gt; _ 2&lt;sup&gt;T&lt;/sup&gt; + V _ 3&lt;sup&gt;T&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=wUgWX0nc4NY&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/TarjanSccSolverAdjacencyList.java&#34;&gt;Tarjan&#39;s strongly connected components algorithm (adjacency list)&lt;/a&gt; &lt;strong&gt;- O(V+E)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=eL-KzMXSXXI&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/TopologicalSortAdjacencyList.java&#34;&gt;Topological sort (acyclic graph, adjacency list)&lt;/a&gt; &lt;strong&gt;- O(V+E)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/TopologicalSortAdjacencyMatrix.java&#34;&gt;Topological sort (acyclic graph, adjacency matrix)&lt;/a&gt; &lt;strong&gt;- O(V&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/TspBruteForce.java&#34;&gt;Traveling Salesman Problem (brute force)&lt;/a&gt; &lt;strong&gt;- O(n!)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=cY4HiiFHO1o&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/TspDynamicProgrammingIterative.java&#34;&gt;Traveling Salesman Problem (dynamic programming, iterative)&lt;/a&gt; &lt;strong&gt;- O(n&lt;sup&gt;2&lt;/sup&gt;2&lt;sup&gt;n&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/TspDynamicProgrammingRecursive.java&#34;&gt;Traveling Salesman Problem (dynamic programming, recursive)&lt;/a&gt; &lt;strong&gt;- O(n&lt;sup&gt;2&lt;/sup&gt;2&lt;sup&gt;n&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Linear algebra&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/linearalgebra/FreivaldsAlgorithm.java&#34;&gt;Freivald&#39;s algorithm (matrix multiplication verification)&lt;/a&gt; &lt;strong&gt;- O(kn&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/linearalgebra/GaussianElimination.java&#34;&gt;Gaussian elimination (solve system of linear equations)&lt;/a&gt; &lt;strong&gt;- O(cr&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/linearalgebra/ModularLinearAlgebra.java&#34;&gt;Gaussian elimination (modular version, prime finite field)&lt;/a&gt; &lt;strong&gt;- O(cr&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/linearalgebra/LinearRecurrenceSolver.java&#34;&gt;Linear recurrence solver (finds nth term in a recurrence relation)&lt;/a&gt; &lt;strong&gt;- O(m&lt;sup&gt;3&lt;/sup&gt;log(n))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/linearalgebra/MatrixDeterminantLaplaceExpansion.java&#34;&gt;Matrix determinant (Laplace/cofactor expansion)&lt;/a&gt; &lt;strong&gt;- O((n+2)!)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/linearalgebra/MatrixInverse.java&#34;&gt;Matrix inverse&lt;/a&gt; &lt;strong&gt;- O(n&lt;sup&gt;3&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/linearalgebra/MatrixMultiplication.java&#34;&gt;Matrix multiplication&lt;/a&gt; &lt;strong&gt;- O(n&lt;sup&gt;3&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/linearalgebra/MatrixPower.java&#34;&gt;Matrix power&lt;/a&gt; &lt;strong&gt;- O(n&lt;sup&gt;3&lt;/sup&gt;log(p))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/linearalgebra/RotateSquareMatrixInplace.java&#34;&gt;Square matrix rotation&lt;/a&gt; &lt;strong&gt;- O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Mathematics&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/math/ChineseRemainderTheorem.java&#34;&gt;[UNTESTED] Chinese remainder theorem&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/math/SieveOfEratosthenes.java&#34;&gt;Prime number sieve (sieve of Eratosthenes)&lt;/a&gt; &lt;strong&gt;- O(nlog(log(n)))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/math/CompressedPrimeSieve.java&#34;&gt;Prime number sieve (sieve of Eratosthenes, compressed)&lt;/a&gt; &lt;strong&gt;- O(nlog(log(n)))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/math/EulerTotientFunction.java&#34;&gt;Totient function (phi function, relatively prime number count)&lt;/a&gt; &lt;strong&gt;- O(n&lt;sup&gt;1/4&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/math/EulerTotientFunctionWithSieve.java&#34;&gt;Totient function using sieve (phi function, relatively prime number count)&lt;/a&gt; &lt;strong&gt;- O(nlog(log(n)))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/math/ExtendedEuclideanAlgorithm.java&#34;&gt;Extended euclidean algorithm&lt;/a&gt; &lt;strong&gt;- ~O(log(a + b))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/math/GCD.java&#34;&gt;Greatest Common Divisor (GCD)&lt;/a&gt; &lt;strong&gt;- ~O(log(a + b))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/math/FastFourierTransform.java&#34;&gt;Fast Fourier transform (quick polynomial multiplication)&lt;/a&gt; &lt;strong&gt;- O(nlog(n))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/math/FastFourierTransformComplexNumbers.java&#34;&gt;Fast Fourier transform (quick polynomial multiplication, complex numbers)&lt;/a&gt; &lt;strong&gt;- O(nlog(n))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/math/IsPrime.java&#34;&gt;Primality check&lt;/a&gt; &lt;strong&gt;- O(√n)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/math/RabinMillerPrimalityTest.py&#34;&gt;Primality check (Rabin-Miller)&lt;/a&gt; &lt;strong&gt;- O(k)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/math/LCM.java&#34;&gt;Least Common Multiple (LCM)&lt;/a&gt; &lt;strong&gt;- ~O(log(a + b))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/math/ModularInverse.java&#34;&gt;Modular inverse&lt;/a&gt; &lt;strong&gt;- ~O(log(a + b))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/math/PrimeFactorization.java&#34;&gt;Prime factorization (pollard rho)&lt;/a&gt; &lt;strong&gt;- O(n&lt;sup&gt;1/4&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/math/RelativelyPrime.java&#34;&gt;Relatively prime check (coprimality check)&lt;/a&gt; &lt;strong&gt;- ~O(log(a + b))&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Other&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/other/BitManipulations.java&#34;&gt;Bit manipulations&lt;/a&gt; &lt;strong&gt;- O(1)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/other/Permutations.java&#34;&gt;List permutations&lt;/a&gt; &lt;strong&gt;- O(n!)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=RnlHPR0lyOE&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/other/PowerSet.java&#34;&gt;Power set (set of all subsets)&lt;/a&gt; &lt;strong&gt;- O(2&lt;sup&gt;n&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/other/Combinations.java&#34;&gt;Set combinations&lt;/a&gt; &lt;strong&gt;- O(n choose r)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/other/CombinationsWithRepetition.java&#34;&gt;Set combinations with repetition&lt;/a&gt; &lt;strong&gt;- O((n+r-1) choose r)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/other/SlidingWindowMaximum.java&#34;&gt;Sliding Window Minimum/Maximum&lt;/a&gt; &lt;strong&gt;- O(1)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/other/SquareRootDecomposition.java&#34;&gt;Square Root Decomposition&lt;/a&gt; &lt;strong&gt;- O(1) point updates, O(√n) range queries&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/other/UniqueCombinations.java&#34;&gt;Unique set combinations&lt;/a&gt; &lt;strong&gt;- O(n choose r)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/other/LazyRangeAdder.java&#34;&gt;Lazy Range Adder&lt;/a&gt; &lt;strong&gt;- O(1) range updates, O(n) to finalize all updates&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Search algorithms&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/search/BinarySearch.java&#34;&gt;Binary search (real numbers)&lt;/a&gt; &lt;strong&gt;- O(log(n))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/search/InterpolationSearch.java&#34;&gt;Interpolation search (discrete discrete)&lt;/a&gt; &lt;strong&gt;- O(n) or O(log(log(n))) with uniform input&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/search/TernarySearch.java&#34;&gt;Ternary search (real numbers)&lt;/a&gt; &lt;strong&gt;- O(log(n))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/search/TernarySearchDiscrete.java&#34;&gt;Ternary search (discrete numbers)&lt;/a&gt; &lt;strong&gt;- O(log(n))&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Sorting algorithms&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/sorting/BubbleSort.java&#34;&gt;Bubble sort&lt;/a&gt; &lt;strong&gt;- O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/sorting/BucketSort.java&#34;&gt;Bucket sort&lt;/a&gt; &lt;strong&gt;- Θ(n + k)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/sorting/CountingSort.java&#34;&gt;Counting sort&lt;/a&gt; &lt;strong&gt;- O(n + k)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/sorting/Heapsort.java&#34;&gt;Heapsort&lt;/a&gt; &lt;strong&gt;- O(nlog(n))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/sorting/InsertionSort.java&#34;&gt;Insertion sort&lt;/a&gt; &lt;strong&gt;- O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/sorting/MergeSort.java&#34;&gt;Mergesort&lt;/a&gt; &lt;strong&gt;- O(nlog(n))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/sorting/QuickSort.java&#34;&gt;Quicksort (in-place, Hoare partitioning)&lt;/a&gt; &lt;strong&gt;- Θ(nlog(n))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/sorting/QuickSort3.java&#34;&gt;Quicksort3 (Dutch National Flag algorithm)&lt;/a&gt; &lt;strong&gt;- Θ(nlog(n))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/sorting/SelectionSort.java&#34;&gt;Selection sort&lt;/a&gt; &lt;strong&gt;- O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/sorting/RadixSort.java&#34;&gt;Radix sort&lt;/a&gt; &lt;strong&gt;- O(n*w)&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;String algorithms&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/strings/BoothsAlgorithm.java&#34;&gt;Booth&#39;s algorithm (finds lexicographically smallest string rotation)&lt;/a&gt; &lt;strong&gt;- O(n)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/strings/KMP.java&#34;&gt;Knuth-Morris-Pratt algorithm (finds pattern matches in text)&lt;/a&gt; &lt;strong&gt;- O(n+m)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/strings/LongestCommonPrefixArray.java&#34;&gt;Longest Common Prefix (LCP) array&lt;/a&gt; &lt;strong&gt;- O(nlog(n)) bounded by SA construction, otherwise O(n)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Ic80xQFWevc&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/strings/LongestCommonSubstring.java&#34;&gt;Longest Common Substring (LCS)&lt;/a&gt; &lt;strong&gt;- O(nlog(n)) bounded by SA construction, otherwise O(n)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=OptoHwC3D-Y&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/strings/LongestRepeatedSubstring.java&#34;&gt;Longest Repeated Substring (LRS)&lt;/a&gt; &lt;strong&gt;- O(nlog(n))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/strings/ManachersAlgorithm.java&#34;&gt;Manacher&#39;s algorithm (finds all palindromes in text)&lt;/a&gt; &lt;strong&gt;- O(n)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/strings/RabinKarp.java&#34;&gt;Rabin-Karp algorithm (finds pattern match positions in text)&lt;/a&gt; &lt;strong&gt;- O(n+m)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/strings/SubstringVerificationSuffixArray.java&#34;&gt;Substring verification with suffix array&lt;/a&gt; &lt;strong&gt;- O(nlog(n)) SA construction and O(mlog(n)) per query&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;This repository is released under the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT license&lt;/a&gt;. In short, this means you are free to use this software in any personal, open-source or commercial projects. Attribution is optional but appreciated.&lt;/p&gt; &#xA;&lt;h1&gt;Donate&lt;/h1&gt; &#xA;&lt;p&gt;Consider donating to support my creation of educational content:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.paypal.com/donate?hosted_button_id=JUP2HZ6JUPB5C&#34;&gt;&lt;img src=&#34;https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif&#34; alt=&#34;paypal&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>PaperMC/Velocity</title>
    <updated>2023-10-01T01:56:09Z</updated>
    <id>tag:github.com,2023-10-01:/PaperMC/Velocity</id>
    <link href="https://github.com/PaperMC/Velocity" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The modern, next-generation Minecraft server proxy.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Velocity&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://papermc.io/downloads/velocity&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/PaperMC/Velocity/gradle.yml&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/papermc&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/289587909051416579.svg?logo=discord&amp;amp;label=&#34; alt=&#34;Join our Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A Minecraft server proxy with unparalleled server support, scalability, and flexibility.&lt;/p&gt; &#xA;&lt;p&gt;Velocity is licensed under the GPLv3 license.&lt;/p&gt; &#xA;&lt;h2&gt;Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A codebase that is easy to dive into and consistently follows best practices for Java projects as much as reasonably possible.&lt;/li&gt; &#xA; &lt;li&gt;High performance: handle thousands of players on one proxy.&lt;/li&gt; &#xA; &lt;li&gt;A new, refreshing API built from the ground up to be flexible and powerful whilst avoiding design mistakes and suboptimal designs from other proxies.&lt;/li&gt; &#xA; &lt;li&gt;First-class support for Paper, Sponge, Fabric and Forge. (Other implementations may work, but we make every endeavor to support these server implementations specifically.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;Velocity is built with &lt;a href=&#34;https://gradle.org&#34;&gt;Gradle&lt;/a&gt;. We recommend using the wrapper script (&lt;code&gt;./gradlew&lt;/code&gt;) as our CI builds using it.&lt;/p&gt; &#xA;&lt;p&gt;It is sufficient to run &lt;code&gt;./gradlew build&lt;/code&gt; to run the full build cycle.&lt;/p&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;p&gt;Once you&#39;ve built Velocity, you can copy and run the &lt;code&gt;-all&lt;/code&gt; JAR from &lt;code&gt;proxy/build/libs&lt;/code&gt;. Velocity will generate a default configuration file and you can configure it from there.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can get the proxy JAR from the &lt;a href=&#34;https://papermc.io/downloads/velocity&#34;&gt;downloads&lt;/a&gt; page.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>geekxh/hello-algorithm</title>
    <updated>2023-10-01T01:56:09Z</updated>
    <id>tag:github.com,2023-10-01:/geekxh/hello-algorithm</id>
    <link href="https://github.com/geekxh/hello-algorithm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🌍 针对小白的算法训练 | 包括四部分：①.大厂面经 ②.力扣图解 ③.千本开源电子书 ④.百张技术思维导图（项目花了上百小时，希望可以点 star 支持，🌹感谢~）推荐免费ChatGPT使用网站&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;简介&lt;/h2&gt; &#xA;&lt;p&gt;English version repo and Gitbook is on &lt;a href=&#34;https://github.com/geekxh/hello-algorithm/tree/english&#34;&gt;english branch&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;&lt;strong&gt;小浩算法是一套针对小白的完整的算法训练流程！&lt;/strong&gt;&lt;/h3&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.geekxh.com/&#34;&gt;&lt;img src=&#34;https://www.geekxh.com/svg/0-1-blueviolet.svg?sanitize=true&#34; alt=&#34;css&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/haizlin/fe-interview/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/geekxh/hello-algorithm.svg?sanitize=true&#34; alt=&#34;Statr&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/haizlin/fe-interview/stargazers&#34;&gt;&lt;img src=&#34;https://www.geekxh.com/svg/2-1-success.svg?sanitize=true&#34; alt=&#34;Statr&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;目前共包括以下几个步骤：&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;PART_1_算法基础&lt;/li&gt; &#xA;  &lt;li&gt;PART_2_力扣图解&lt;/li&gt; &#xA;  &lt;li&gt;PART_3_大厂面试&lt;/li&gt; &#xA;  &lt;li&gt;PART_4_CS知识汇总&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.cxyhub.com/all/programming/7786/&#34;&gt;目前已支持 PDF 下载&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://www.geekxh.com&#34;&gt;&lt;img src=&#34;https://www.geekxh.com/logo_tmp.png&#34; width=&#34;350px&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.geekxh.com/&#34;&gt;&lt;img src=&#34;https://www.geekxh.com/svg/0-1-blueviolet.svg?sanitize=true&#34; alt=&#34;css&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/haizlin/fe-interview/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/geekxh/hello-algorithm.svg?sanitize=true&#34; alt=&#34;Statr&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/haizlin/fe-interview/stargazers&#34;&gt;&lt;img src=&#34;https://www.geekxh.com/svg/2-1-success.svg?sanitize=true&#34; alt=&#34;Statr&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt;这也许是东半球最好的算法学习类项目！&lt;/b&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;我自己刷题都是在 lintcode 进行，也会在上面更新题解！下方可以直接进入~&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.lintcode.com/?utm_source=tf-github-xh2022&#34;&gt;www.lintcode.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jiuzhang.com/course/71/?utm_source=tf-github-xh2022&#34;&gt;另外推荐一套算法课，北大FB双料大佬的，我之前上过，性价比很高&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;最后，下方扫码可以领取我准备的刷题模板&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img height=&#34;200&#34; src=&#34;https://www.cxyhub.com/wp-content/uploads/2022/08/f9e51121533b2c175bcb41ee8c05e62.jpg&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;正文&lt;/h3&gt; &#xA;&lt;h3&gt;PART_1_算法基础&lt;/h3&gt; &#xA;&lt;p&gt;主要包括两部分：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a：数据结构知识框架：为了大家更好的掌握数据结构和算法，我把基础知识整理成了一张思维导图，包括下面这些知识点：&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geekxh/hello-algorithm/master/PART_1_%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/README.md&#34;&gt;开始学习&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;b：对常用的数据结构知识进行总结：&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geekxh/hello-algorithm/master/PART_1_%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/2_%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/linked-list/README.md&#34;&gt;链表&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geekxh/hello-algorithm/master/PART_1_%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/2_%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/doubly-linked-list/README.md&#34;&gt;双向链表&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geekxh/hello-algorithm/master/PART_1_%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/2_%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/queue/README.md&#34;&gt;队列&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geekxh/hello-algorithm/master/PART_1_%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/2_%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/stack/README.md&#34;&gt;栈&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geekxh/hello-algorithm/master/PART_1_%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/2_%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/hash-table/README.md&#34;&gt;哈希表(散列)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geekxh/hello-algorithm/master/PART_1_%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/2_%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/heap/README.md&#34;&gt;堆&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geekxh/hello-algorithm/master/PART_1_%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/2_%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/priority-queue/README.md&#34;&gt;优先队列&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geekxh/hello-algorithm/master/PART_1_%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/2_%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/trie/README.md&#34;&gt;字典树&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geekxh/hello-algorithm/master/PART_1_%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/2_%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/tree/README.md&#34;&gt;树&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geekxh/hello-algorithm/master/PART_1_%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/2_%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/graph/README.md&#34;&gt;图&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;PART_2_力扣图解&lt;/h3&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;&lt;a&gt;显示更多&lt;/a&gt;&lt;/summary&gt;&#xA; &lt;br&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;&lt;a href=&#34;https://www.cxyhub.com/all/programming/7786/&#34;&gt;小浩图解算法题典.PDF【完整版】下载&lt;/a&gt;&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com&#34;&gt;开始学习&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/c99/hello.html&#34;&gt;阅读指南&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;数组 &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.0.%E6%95%B0%E7%BB%84%E7%B3%BB%E5%88%97/002.html&#34;&gt;01.最长公共前缀(14)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.0.%E6%95%B0%E7%BB%84%E7%B3%BB%E5%88%97/003.html&#34;&gt;02.买卖股票的最佳时机(122)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.0.%E6%95%B0%E7%BB%84%E7%B3%BB%E5%88%97/004.html&#34;&gt;03.旋转数组(189)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.0.%E6%95%B0%E7%BB%84%E7%B3%BB%E5%88%97/005.html&#34;&gt;04.原地删除(27)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.0.%E6%95%B0%E7%BB%84%E7%B3%BB%E5%88%97/006.html&#34;&gt;05.加一(66)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.0.%E6%95%B0%E7%BB%84%E7%B3%BB%E5%88%97/007.html&#34;&gt;06.两数之和(1)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.0.%E6%95%B0%E7%BB%84%E7%B3%BB%E5%88%97/008.html&#34;&gt;07.三数之和(15)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.0.%E6%95%B0%E7%BB%84%E7%B3%BB%E5%88%97/009.html&#34;&gt;08.Z字形变换(6)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;链表 &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.1.%E9%93%BE%E8%A1%A8%E7%B3%BB%E5%88%97/101.html&#34;&gt;01.删除链表倒数第N个节点(19)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.1.%E9%93%BE%E8%A1%A8%E7%B3%BB%E5%88%97/102.html&#34;&gt;02.合并两个有序链表(21)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.1.%E9%93%BE%E8%A1%A8%E7%B3%BB%E5%88%97/103.html&#34;&gt;03.环形链表(141)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.1.%E9%93%BE%E8%A1%A8%E7%B3%BB%E5%88%97/104.html&#34;&gt;04.两数相加(2)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;动态规划 &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.2.%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/201.html&#34;&gt;01.爬楼梯(70)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.2.%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/202.html&#34;&gt;02.最大子序和(53)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.2.%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/203.html&#34;&gt;03.最长上升子序列(300)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.2.%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/204.html&#34;&gt;04.三角形最小路径和(120)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.2.%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/205.html&#34;&gt;05.最小路径和(64)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.2.%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/206.html&#34;&gt;06.打家劫舍(198)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;字符串 &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.3.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B3%BB%E5%88%97/301.html&#34;&gt;01.反转字符串(344)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.3.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B3%BB%E5%88%97/302.html&#34;&gt;02.字符串中的第一个唯一字符(387)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.3.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B3%BB%E5%88%97/303.html&#34;&gt;03.实现 Sunday 匹配&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.3.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B3%BB%E5%88%97/304.html&#34;&gt;04.大数打印&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.3.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B3%BB%E5%88%97/305.html&#34;&gt;05.验证回文串(125)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.3.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B3%BB%E5%88%97/306.html&#34;&gt;06.KMP 精讲&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.3.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B3%BB%E5%88%97/307.html&#34;&gt;07.旋转字符串(796)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.3.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B3%BB%E5%88%97/308.html&#34;&gt;08.最后一个单词的长度(58)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;二叉树 &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.4.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%B3%BB%E5%88%97/401.html&#34;&gt;01.最大深度与DFS(104)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.4.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%B3%BB%E5%88%97/402.html&#34;&gt;02.层次遍历与BFS(102)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.4.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%B3%BB%E5%88%97/403.html&#34;&gt;03.BST与其验证(98)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.4.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%B3%BB%E5%88%97/404.html&#34;&gt;04.BST 的查找(700)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.4.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%B3%BB%E5%88%97/405.html&#34;&gt;05.BST 的删除(450)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.4.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%B3%BB%E5%88%97/406.html&#34;&gt;06.平衡二叉树(110)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.4.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%B3%BB%E5%88%97/407.html&#34;&gt;07.完全二叉树(222)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.4.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%B3%BB%E5%88%97/408.html&#34;&gt;08.二叉树的剪枝(814)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;滑动窗口 &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.5.%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%B3%BB%E5%88%97/501.html&#34;&gt;01.滑动窗口最大值（239）&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.5.%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%B3%BB%E5%88%97/502.html&#34;&gt;02.无重复字符的最长子串（3）&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.5.%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%B3%BB%E5%88%97/503.html&#34;&gt;03.找到字符串中所有字母异位词（438）&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.5.%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%B3%BB%E5%88%97/504.html&#34;&gt;04.和为s的连续正数序列&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;博弈论 &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.6.%E5%8D%9A%E5%BC%88%E8%AE%BA%E7%B3%BB%E5%88%97/601.html&#34;&gt;01.囚徒困境&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.6.%E5%8D%9A%E5%BC%88%E8%AE%BA%E7%B3%BB%E5%88%97/602.html&#34;&gt;02.辛普森悖论&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.6.%E5%8D%9A%E5%BC%88%E8%AE%BA%E7%B3%BB%E5%88%97/603.html&#34;&gt;03.红眼睛和蓝眼睛&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.6.%E5%8D%9A%E5%BC%88%E8%AE%BA%E7%B3%BB%E5%88%97/604.html&#34;&gt;04.海盗分金币&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.6.%E5%8D%9A%E5%BC%88%E8%AE%BA%E7%B3%BB%E5%88%97/605.html&#34;&gt;05.智猪博弈&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.6.%E5%8D%9A%E5%BC%88%E8%AE%BA%E7%B3%BB%E5%88%97/606.html&#34;&gt;06.生男生女的问题&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.6.%E5%8D%9A%E5%BC%88%E8%AE%BA%E7%B3%BB%E5%88%97/607.html&#34;&gt;07.硬币问题&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.6.%E5%8D%9A%E5%BC%88%E8%AE%BA%E7%B3%BB%E5%88%97/608.html&#34;&gt;08.画圈圈的问题&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.6.%E5%8D%9A%E5%BC%88%E8%AE%BA%E7%B3%BB%E5%88%97/609.html&#34;&gt;09.巧克力问题&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.6.%E5%8D%9A%E5%BC%88%E8%AE%BA%E7%B3%BB%E5%88%97/610.html&#34;&gt;10.大鱼和小鱼的问题&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;位运算 &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.8.%E4%BD%8D%E8%BF%90%E7%AE%97%E7%B3%BB%E5%88%97/801.html&#34;&gt;01.使用位运算求和&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.8.%E4%BD%8D%E8%BF%90%E7%AE%97%E7%B3%BB%E5%88%97/802.html&#34;&gt;02.2的幂(231)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.8.%E4%BD%8D%E8%BF%90%E7%AE%97%E7%B3%BB%E5%88%97/803.html&#34;&gt;03.返回一个数二进制中1的个数&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.8.%E4%BD%8D%E8%BF%90%E7%AE%97%E7%B3%BB%E5%88%97/804.html&#34;&gt;04.只出现一次的数字&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.8.%E4%BD%8D%E8%BF%90%E7%AE%97%E7%B3%BB%E5%88%97/805.html&#34;&gt;05.只出现一次的数字Ⅱ&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.8.%E4%BD%8D%E8%BF%90%E7%AE%97%E7%B3%BB%E5%88%97/806.html&#34;&gt;06.缺失数字(268)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;二分法 &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.9.%E4%BA%8C%E5%88%86%E6%B3%95%E7%B3%BB%E5%88%97/901.html&#34;&gt;01.爱吃香蕉的珂珂（875）&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.9.%E4%BA%8C%E5%88%86%E6%B3%95%E7%B3%BB%E5%88%97/902.html&#34;&gt;02.x的平方根（69）&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.9.%E4%BA%8C%E5%88%86%E6%B3%95%E7%B3%BB%E5%88%97/903.html&#34;&gt;03.x的平方根（69）&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.9.%E4%BA%8C%E5%88%86%E6%B3%95%E7%B3%BB%E5%88%97/904.html&#34;&gt;04.旋转排序数组中的最小值Ⅰ（153）&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.9.%E4%BA%8C%E5%88%86%E6%B3%95%E7%B3%BB%E5%88%97/905.html&#34;&gt;05.旋转排序数组中的最小值Ⅱ(154)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.9.%E4%BA%8C%E5%88%86%E6%B3%95%E7%B3%BB%E5%88%97/906.html&#34;&gt;06.供暖器（475）&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;其他高频面试题目 &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.99.%E5%85%B6%E4%BB%96%E8%A1%A5%E5%85%85%E9%A2%98%E7%9B%AE/01.html&#34;&gt;01.螺旋矩阵(54)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.99.%E5%85%B6%E4%BB%96%E8%A1%A5%E5%85%85%E9%A2%98%E7%9B%AE/02.html&#34;&gt;02.只有两个键的键盘(650)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.99.%E5%85%B6%E4%BB%96%E8%A1%A5%E5%85%85%E9%A2%98%E7%9B%AE/03.html&#34;&gt;03.24点游戏(679)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.99.%E5%85%B6%E4%BB%96%E8%A1%A5%E5%85%85%E9%A2%98%E7%9B%AE/04.html&#34;&gt;04.飞机座位分配概率(1227)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.99.%E5%85%B6%E4%BB%96%E8%A1%A5%E5%85%85%E9%A2%98%E7%9B%AE/05.html&#34;&gt;05.水分子的产生&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.99.%E5%85%B6%E4%BB%96%E8%A1%A5%E5%85%85%E9%A2%98%E7%9B%AE/06.html&#34;&gt;06.救生艇(881)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.99.%E5%85%B6%E4%BB%96%E8%A1%A5%E5%85%85%E9%A2%98%E7%9B%AE/07.html&#34;&gt;07.救生艇(881)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.99.%E5%85%B6%E4%BB%96%E8%A1%A5%E5%85%85%E9%A2%98%E7%9B%AE/08.html&#34;&gt;08.灯泡开关(319)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.99.%E5%85%B6%E4%BB%96%E8%A1%A5%E5%85%85%E9%A2%98%E7%9B%AE/09.html&#34;&gt;09.三门问题&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.99.%E5%85%B6%E4%BB%96%E8%A1%A5%E5%85%85%E9%A2%98%E7%9B%AE/10.html&#34;&gt;10.猜数字游戏(299)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.99.%E5%85%B6%E4%BB%96%E8%A1%A5%E5%85%85%E9%A2%98%E7%9B%AE/11.html&#34;&gt;11.LRU缓存机制(146)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.99.%E5%85%B6%E4%BB%96%E8%A1%A5%E5%85%85%E9%A2%98%E7%9B%AE/12.html&#34;&gt;12.最小的k个数&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.99.%E5%85%B6%E4%BB%96%E8%A1%A5%E5%85%85%E9%A2%98%E7%9B%AE/13.html&#34;&gt;13.不同路径&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.99.%E5%85%B6%E4%BB%96%E8%A1%A5%E5%85%85%E9%A2%98%E7%9B%AE/14.html&#34;&gt;14.不同路径-障碍物&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.99.%E5%85%B6%E4%BB%96%E8%A1%A5%E5%85%85%E9%A2%98%E7%9B%AE/15.html&#34;&gt;15.连续n个数的和&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.99.%E5%85%B6%E4%BB%96%E8%A1%A5%E5%85%85%E9%A2%98%E7%9B%AE/16.html&#34;&gt;16.盛水最多的容器&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.99.%E5%85%B6%E4%BB%96%E8%A1%A5%E5%85%85%E9%A2%98%E7%9B%AE/17.html&#34;&gt;17.扑克牌中的顺子容器&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.99.%E5%85%B6%E4%BB%96%E8%A1%A5%E5%85%85%E9%A2%98%E7%9B%AE/18.html&#34;&gt;18.整数拆分(343)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.99.%E5%85%B6%E4%BB%96%E8%A1%A5%E5%85%85%E9%A2%98%E7%9B%AE/19.html&#34;&gt;19.移动石子到连续(1033)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.99.%E5%85%B6%E4%BB%96%E8%A1%A5%E5%85%85%E9%A2%98%E7%9B%AE/20.html&#34;&gt;20.Nim游戏(292)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.99.%E5%85%B6%E4%BB%96%E8%A1%A5%E5%85%85%E9%A2%98%E7%9B%AE/21.html&#34;&gt;21.寻找两个正序数组的中位数(4)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.99.%E5%85%B6%E4%BB%96%E8%A1%A5%E5%85%85%E9%A2%98%E7%9B%AE/22.html&#34;&gt;22.第k个最大元素（215）&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.99.%E5%85%B6%E4%BB%96%E8%A1%A5%E5%85%85%E9%A2%98%E7%9B%AE/23.html&#34;&gt;23.镜面反射（858）&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.99.%E5%85%B6%E4%BB%96%E8%A1%A5%E5%85%85%E9%A2%98%E7%9B%AE/25.html&#34;&gt;25.整数转罗马数字（12）&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.99.%E5%85%B6%E4%BB%96%E8%A1%A5%E5%85%85%E9%A2%98%E7%9B%AE/26.html&#34;&gt;26.荷兰国旗问题&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.99.%E5%85%B6%E4%BB%96%E8%A1%A5%E5%85%85%E9%A2%98%E7%9B%AE/27.html&#34;&gt;27.六九问题&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.99.%E5%85%B6%E4%BB%96%E8%A1%A5%E5%85%85%E9%A2%98%E7%9B%AE/28.html&#34;&gt;28.有效的数独&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.99.%E5%85%B6%E4%BB%96%E8%A1%A5%E5%85%85%E9%A2%98%E7%9B%AE/29.html&#34;&gt;29.费米估算&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.99.%E5%85%B6%E4%BB%96%E8%A1%A5%E5%85%85%E9%A2%98%E7%9B%AE/30.html&#34;&gt;30.分发饼干&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.99.%E5%85%B6%E4%BB%96%E8%A1%A5%E5%85%85%E9%A2%98%E7%9B%AE/31.html&#34;&gt;31.生命游戏（289）&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.99.%E5%85%B6%E4%BB%96%E8%A1%A5%E5%85%85%E9%A2%98%E7%9B%AE/32.html&#34;&gt;32.搜索二维矩阵（74）&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.99.%E5%85%B6%E4%BB%96%E8%A1%A5%E5%85%85%E9%A2%98%E7%9B%AE/33.html&#34;&gt;33.子集（78）&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.99.%E5%85%B6%E4%BB%96%E8%A1%A5%E5%85%85%E9%A2%98%E7%9B%AE/34.html&#34;&gt;34.面试中的智力题&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://www.geekxh.com/1.99.%E5%85%B6%E4%BB%96%E8%A1%A5%E5%85%85%E9%A2%98%E7%9B%AE/51.html&#34;&gt;35.旋转图像（48）&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;PART_3_大厂面试（更新中）&lt;/h3&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;&lt;a&gt;显示更多&lt;/a&gt;&lt;/summary&gt;&#xA; &lt;br&gt; &#xA; &lt;p&gt;考虑到现在网上面经实在太杂，很多都冠以 “BAT” 之名，重复率、错误率都非常高。所以我尽可能的挑选出了我认为比较好的 50 篇面经（基本不重复），并对内容做了分类。&lt;/p&gt; &#xA; &lt;p&gt;建议大家把这个页面收藏起来，防止后面需要的时候找不到了。（整理了近40个小时，跪求star~）&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/donnemartin/system-design-primer/raw/master/README-zh-Hans.md&#34;&gt;系统设计-长文（非常建议读，我自己也看了）&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/aylei/interview&#34;&gt;后端-社招(两年): 蚂蚁 头条 PingCAP&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/wupeixuan/p/8908524.html#%E4%B8%80%E3%80%81java&#34;&gt;后端-京东-JAVA&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/xbox1994/Java-Interview/raw/master/MD/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E9%AB%98%E5%B9%B6%E5%8F%91%E6%8A%A2%E7%BA%A2%E5%8C%85.md&#34;&gt;后端-百度-高并发抢红包设计&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://www.e-learn.cn/topic/95743&#34;&gt;NLP（机器学习）-百度&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;PART_4_CS_知识汇总(TODO)&lt;/h3&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;本项目除部分引用开源技术文档的内容外，大部分为本人原创。欢迎任何以学习为目的的传播，但未授权任何平台进行转载！&lt;/p&gt;</summary>
  </entry>
</feed>