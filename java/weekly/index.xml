<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-27T01:57:09Z</updated>
  <subtitle>Weekly Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>traccar/traccar</title>
    <updated>2023-08-27T01:57:09Z</updated>
    <id>tag:github.com,2023-08-27:/traccar/traccar</id>
    <link href="https://github.com/traccar/traccar" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Traccar GPS Tracking System&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://www.traccar.org&#34;&gt;Traccar&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Traccar is an open source GPS tracking system. This repository contains Java-based back-end service. It supports more than 200 GPS protocols and more than 2000 models of GPS tracking devices. Traccar can be used with any major SQL database system. It also provides easy to use &lt;a href=&#34;https://www.traccar.org/traccar-api/&#34;&gt;REST API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Other parts of Traccar solution include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/traccar/traccar-web&#34;&gt;Traccar web app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/traccar/traccar-manager-android&#34;&gt;Traccar Manager Android app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/traccar/traccar-manager-ios&#34;&gt;Traccar Manager iOS app&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There is also a set of mobile apps that you can use for tracking mobile devices:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/traccar/traccar-client-android&#34;&gt;Traccar Client Android app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/traccar/traccar-client-ios&#34;&gt;Traccar Client iOS app&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Some of the available features include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Real-time GPS tracking&lt;/li&gt; &#xA; &lt;li&gt;Driver behaviour monitoring&lt;/li&gt; &#xA; &lt;li&gt;Detailed and summary reports&lt;/li&gt; &#xA; &lt;li&gt;Geofencing functionality&lt;/li&gt; &#xA; &lt;li&gt;Alarms and notifications&lt;/li&gt; &#xA; &lt;li&gt;Account and device management&lt;/li&gt; &#xA; &lt;li&gt;Email and SMS support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://www.traccar.org/build/&#34;&gt;build from source documentation&lt;/a&gt; on the official website.&lt;/p&gt; &#xA;&lt;h2&gt;Team&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Anton Tananaev (&lt;a href=&#34;mailto:anton@traccar.org&#34;&gt;anton@traccar.org&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Andrey Kunitsyn (&lt;a href=&#34;mailto:andrey@traccar.org&#34;&gt;andrey@traccar.org&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Apache License, Version 2.0&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;    http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>ververica/flink-cdc-connectors</title>
    <updated>2023-08-27T01:57:09Z</updated>
    <id>tag:github.com,2023-08-27:/ververica/flink-cdc-connectors</id>
    <link href="https://github.com/ververica/flink-cdc-connectors" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CDC Connectors for Apache Flink®&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CDC Connectors for Apache Flink&lt;sup&gt;®&lt;/sup&gt;&lt;/h1&gt; &#xA;&lt;p&gt;CDC Connectors for Apache Flink&lt;sup&gt;®&lt;/sup&gt; is a set of source connectors for Apache Flink&lt;sup&gt;®&lt;/sup&gt;, ingesting changes from different databases using change data capture (CDC). CDC Connectors for Apache Flink&lt;sup&gt;®&lt;/sup&gt; integrates Debezium as the engine to capture data changes. So it can fully leverage the ability of Debezium. See more about what is &lt;a href=&#34;https://github.com/debezium/debezium&#34;&gt;Debezium&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This README is meant as a brief walkthrough on the core features of CDC Connectors for Apache Flink&lt;sup&gt;®&lt;/sup&gt;. For a fully detailed documentation, please see &lt;a href=&#34;https://ververica.github.io/flink-cdc-connectors/master/&#34;&gt;Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported (Tested) Databases&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Connector&lt;/th&gt; &#xA;   &lt;th&gt;Database&lt;/th&gt; &#xA;   &lt;th&gt;Driver&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ververica/flink-cdc-connectors/master/docs/content/connectors/mongodb-cdc.md&#34;&gt;mongodb-cdc&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;li&gt; &lt;a href=&#34;https://www.mongodb.com&#34;&gt;MongoDB&lt;/a&gt;: 3.6, 4.x, 5.0, 6.0&lt;/li&gt;&lt;/td&gt; &#xA;   &lt;td&gt;MongoDB Driver: 4.3.4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ververica/flink-cdc-connectors/master/docs/content/connectors/mysql-cdc.md&#34;&gt;mysql-cdc&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;li&gt; &lt;a href=&#34;https://dev.mysql.com/doc&#34;&gt;MySQL&lt;/a&gt;: 5.6, 5.7, 8.0.x &lt;/li&gt;&lt;li&gt; &lt;a href=&#34;https://www.aliyun.com/product/rds/mysql&#34;&gt;RDS MySQL&lt;/a&gt;: 5.6, 5.7, 8.0.x &lt;/li&gt;&lt;li&gt; &lt;a href=&#34;https://www.aliyun.com/product/polardb&#34;&gt;PolarDB MySQL&lt;/a&gt;: 5.6, 5.7, 8.0.x &lt;/li&gt;&lt;li&gt; &lt;a href=&#34;https://aws.amazon.com/cn/rds/aurora&#34;&gt;Aurora MySQL&lt;/a&gt;: 5.6, 5.7, 8.0.x &lt;/li&gt;&lt;li&gt; &lt;a href=&#34;https://mariadb.org&#34;&gt;MariaDB&lt;/a&gt;: 10.x &lt;/li&gt;&lt;li&gt; &lt;a href=&#34;https://github.com/ApsaraDB/galaxysql&#34;&gt;PolarDB X&lt;/a&gt;: 2.0.1&lt;/li&gt;&lt;/td&gt; &#xA;   &lt;td&gt;JDBC Driver: 8.0.28&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ververica/flink-cdc-connectors/master/docs/content/connectors/oceanbase-cdc.md&#34;&gt;oceanbase-cdc&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;li&gt; &lt;a href=&#34;https://open.oceanbase.com&#34;&gt;OceanBase CE&lt;/a&gt;: 3.1.x, 4.x &lt;/li&gt;&lt;li&gt; &lt;a href=&#34;https://www.oceanbase.com/product/oceanbase&#34;&gt;OceanBase EE&lt;/a&gt;: 2.x, 3.x, 4.x&lt;/li&gt;&lt;/td&gt; &#xA;   &lt;td&gt;OceanBase Driver: 2.4.x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ververica/flink-cdc-connectors/master/docs/content/connectors/oracle-cdc.md&#34;&gt;oracle-cdc&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;li&gt; &lt;a href=&#34;https://www.oracle.com/index.html&#34;&gt;Oracle&lt;/a&gt;: 11, 12, 19, 21&lt;/li&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Oracle Driver: 19.3.0.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ververica/flink-cdc-connectors/master/docs/content/connectors/postgres-cdc.md&#34;&gt;postgres-cdc&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;li&gt; &lt;a href=&#34;https://www.postgresql.org&#34;&gt;PostgreSQL&lt;/a&gt;: 9.6, 10, 11, 12, 13, 14&lt;/li&gt;&lt;/td&gt; &#xA;   &lt;td&gt;JDBC Driver: 42.5.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ververica/flink-cdc-connectors/master/docs/content/connectors/sqlserver-cdc.md&#34;&gt;sqlserver-cdc&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;li&gt; &lt;a href=&#34;https://www.microsoft.com/sql-server&#34;&gt;Sqlserver&lt;/a&gt;: 2012, 2014, 2016, 2017, 2019&lt;/li&gt;&lt;/td&gt; &#xA;   &lt;td&gt;JDBC Driver: 9.4.1.jre8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ververica/flink-cdc-connectors/master/docs/content/connectors/tidb-cdc.md&#34;&gt;tidb-cdc&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;li&gt; &lt;a href=&#34;https://www.pingcap.com&#34;&gt;TiDB&lt;/a&gt;: 5.1.x, 5.2.x, 5.3.x, 5.4.x, 6.0.0&lt;/li&gt;&lt;/td&gt; &#xA;   &lt;td&gt;JDBC Driver: 8.0.27&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ververica/flink-cdc-connectors/master/docs/content/connectors/db2-cdc.md&#34;&gt;Db2-cdc&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;li&gt; &lt;a href=&#34;https://www.ibm.com/products/db2&#34;&gt;Db2&lt;/a&gt;: 11.5&lt;/li&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Db2 Driver: 11.5.0.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ververica/flink-cdc-connectors/master/docs/content/connectors/vitess-cdc.md&#34;&gt;Vitess-cdc&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;li&gt; &lt;a href=&#34;https://vitess.io/&#34;&gt;Vitess&lt;/a&gt;: 8.0.x, 9.0.x&lt;/li&gt;&lt;/td&gt; &#xA;   &lt;td&gt;MySql JDBC Driver: 8.0.26&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Supports reading database snapshot and continues to read transaction logs with &lt;strong&gt;exactly-once processing&lt;/strong&gt; even failures happen.&lt;/li&gt; &#xA; &lt;li&gt;CDC connectors for DataStream API, users can consume changes on multiple databases and tables in a single job without Debezium and Kafka deployed.&lt;/li&gt; &#xA; &lt;li&gt;CDC connectors for Table/SQL API, users can use SQL DDL to create a CDC source to monitor changes on a single table.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage for Table/SQL API&lt;/h2&gt; &#xA;&lt;p&gt;We need several steps to setup a Flink cluster with the provided connector.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Setup a Flink cluster with version 1.12+ and Java 8+ installed.&lt;/li&gt; &#xA; &lt;li&gt;Download the connector SQL jars from the &lt;a href=&#34;https://github.com/ververica/flink-cdc-connectors/releases&#34;&gt;Download&lt;/a&gt; page (or &lt;a href=&#34;https://raw.githubusercontent.com/ververica/flink-cdc-connectors/master/#building-from-source&#34;&gt;build yourself&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Put the downloaded jars under &lt;code&gt;FLINK_HOME/lib/&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Restart the Flink cluster.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The example shows how to create a MySQL CDC source in &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.13/dev/table/sqlClient.html&#34;&gt;Flink SQL Client&lt;/a&gt; and execute queries on it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- creates a mysql cdc table source&#xA;CREATE TABLE mysql_binlog (&#xA; id INT NOT NULL,&#xA; name STRING,&#xA; description STRING,&#xA; weight DECIMAL(10,3)&#xA;) WITH (&#xA; &#39;connector&#39; = &#39;mysql-cdc&#39;,&#xA; &#39;hostname&#39; = &#39;localhost&#39;,&#xA; &#39;port&#39; = &#39;3306&#39;,&#xA; &#39;username&#39; = &#39;flinkuser&#39;,&#xA; &#39;password&#39; = &#39;flinkpw&#39;,&#xA; &#39;database-name&#39; = &#39;inventory&#39;,&#xA; &#39;table-name&#39; = &#39;products&#39;&#xA;);&#xA;&#xA;-- read snapshot and binlog data from mysql, and do some transformation, and show on the client&#xA;SELECT id, UPPER(name), description, weight FROM mysql_binlog;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage for DataStream API&lt;/h2&gt; &#xA;&lt;p&gt;Include following Maven dependency (available through Maven Central):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;&#xA;  &amp;lt;groupId&amp;gt;com.ververica&amp;lt;/groupId&amp;gt;&#xA;  &amp;lt;!-- add the dependency matching your database --&amp;gt;&#xA;  &amp;lt;artifactId&amp;gt;flink-connector-mysql-cdc&amp;lt;/artifactId&amp;gt;&#xA;  &amp;lt;!-- The dependency is available only for stable releases, SNAPSHOT dependency need build by yourself. --&amp;gt;&#xA;  &amp;lt;version&amp;gt;2.5-SNAPSHOT&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import org.apache.flink.api.common.eventtime.WatermarkStrategy;&#xA;import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;&#xA;import com.ververica.cdc.debezium.JsonDebeziumDeserializationSchema;&#xA;import com.ververica.cdc.connectors.mysql.source.MySqlSource;&#xA;&#xA;public class MySqlSourceExample {&#xA;  public static void main(String[] args) throws Exception {&#xA;    MySqlSource&amp;lt;String&amp;gt; mySqlSource = MySqlSource.&amp;lt;String&amp;gt;builder()&#xA;            .hostname(&#34;yourHostname&#34;)&#xA;            .port(yourPort)&#xA;            .databaseList(&#34;yourDatabaseName&#34;) // set captured database&#xA;            .tableList(&#34;yourDatabaseName.yourTableName&#34;) // set captured table&#xA;            .username(&#34;yourUsername&#34;)&#xA;            .password(&#34;yourPassword&#34;)&#xA;            .deserializer(new JsonDebeziumDeserializationSchema()) // converts SourceRecord to JSON String&#xA;            .build();&#xA;&#xA;    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();&#xA;&#xA;    // enable checkpoint&#xA;    env.enableCheckpointing(3000);&#xA;&#xA;    env&#xA;      .fromSource(mySqlSource, WatermarkStrategy.noWatermarks(), &#34;MySQL Source&#34;)&#xA;      // set 4 parallel source tasks&#xA;      .setParallelism(4)&#xA;      .print().setParallelism(1); // use parallelism 1 for sink to keep message ordering&#xA;&#xA;    env.execute(&#34;Print MySQL Snapshot + Binlog&#34;);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building from source&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Prerequisites: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;git&lt;/li&gt; &#xA;   &lt;li&gt;Maven&lt;/li&gt; &#xA;   &lt;li&gt;At least Java 8&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/ververica/flink-cdc-connectors.git&#xA;cd flink-cdc-connectors&#xA;mvn clean install -DskipTests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The dependencies are now available in your local &lt;code&gt;.m2&lt;/code&gt; repository.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The code in this repository is licensed under the &lt;a href=&#34;https://github.com/ververica/flink-cdc-connectors/raw/master/LICENSE&#34;&gt;Apache Software License 2&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;CDC Connectors for Apache Flink&lt;sup&gt;®&lt;/sup&gt; welcomes anyone that wants to help out in any way, whether that includes reporting problems, helping with documentation, or contributing code changes to fix bugs, add tests, or implement new features. You can report problems to request features in the &lt;a href=&#34;https://github.com/ververica/flink-cdc-connectors/issues&#34;&gt;GitHub Issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Code Contribute&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Left comment under the issue that you want to take&lt;/li&gt; &#xA; &lt;li&gt;Fork Flink CDC project to your GitHub repositories&lt;/li&gt; &#xA; &lt;li&gt;Clone and compile your Flink CDC project&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/your_name/flink-cdc-connectors.git&#xA;cd flink-cdc-connectors&#xA;mvn clean install -DskipTests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Check to a new branch and start your work&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git checkout -b my_feature&#xA;-- develop and commit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Push your branch to your github&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push origin my_feature&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Open a PR to &lt;a href=&#34;https://github.com/ververica/flink-cdc-connectors&#34;&gt;https://github.com/ververica/flink-cdc-connectors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Code Style&lt;/h3&gt; &#xA;&lt;h4&gt;Code Formatting&lt;/h4&gt; &#xA;&lt;p&gt;You need to install the google-java-format plugin. Spotless together with google-java-format is used to format the codes.&lt;/p&gt; &#xA;&lt;p&gt;It is recommended to automatically format your code by applying the following settings:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to &#34;Settings&#34; → &#34;Other Settings&#34; → &#34;google-java-format Settings&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Tick the checkbox to enable the plugin.&lt;/li&gt; &#xA; &lt;li&gt;Change the code style to &#34;Android Open Source Project (AOSP) style&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Go to &#34;Settings&#34; → &#34;Tools&#34; → &#34;Actions on Save&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Under &#34;Formatting Actions&#34;, select &#34;Optimize imports&#34; and &#34;Reformat file&#34;.&lt;/li&gt; &#xA; &lt;li&gt;From the &#34;All file types list&#34; next to &#34;Reformat code&#34;, select &#34;Java&#34;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For earlier IntelliJ IDEA versions, the step 4 to 7 will be changed as follows.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;4.Go to &#34;Settings&#34; → &#34;Other Settings&#34; → &#34;Save Actions&#34;.&lt;/li&gt; &#xA; &lt;li&gt;5.Under &#34;General&#34;, enable your preferred settings for when to format the code, e.g. &#34;Activate save actions on save&#34;.&lt;/li&gt; &#xA; &lt;li&gt;6.Under &#34;Formatting Actions&#34;, select &#34;Optimize imports&#34; and &#34;Reformat file&#34;.&lt;/li&gt; &#xA; &lt;li&gt;7.Under &#34;File Path Inclusions&#34;, add an entry for &lt;code&gt;.*\.java&lt;/code&gt; to avoid formatting other file types. Then the whole project could be formatted by command &lt;code&gt;mvn spotless:apply&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Checkstyle&lt;/h4&gt; &#xA;&lt;p&gt;Checkstyle is used to enforce static coding guidelines.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to &#34;Settings&#34; → &#34;Tools&#34; → &#34;Checkstyle&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Set &#34;Scan Scope&#34; to &#34;Only Java sources (including tests)&#34;.&lt;/li&gt; &#xA; &lt;li&gt;For &#34;Checkstyle Version&#34; select &#34;8.14&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Under &#34;Configuration File&#34; click the &#34;+&#34; icon to add a new configuration.&lt;/li&gt; &#xA; &lt;li&gt;Set &#34;Description&#34; to &#34;Flink cdc&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Select &#34;Use a local Checkstyle file&#34; and link it to the file &lt;code&gt;tools/maven/checkstyle.xml&lt;/code&gt; which is located within your cloned repository.&lt;/li&gt; &#xA; &lt;li&gt;Select &#34;Store relative to project location&#34; and click &#34;Next&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Configure the property &lt;code&gt;checkstyle.suppressions.file&lt;/code&gt; with the value &lt;code&gt;suppressions.xml&lt;/code&gt; and click &#34;Next&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Click &#34;Finish&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Select &#34;Flink cdc&#34; as the only active configuration file and click &#34;Apply&#34;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can now import the Checkstyle configuration for the Java code formatter.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to &#34;Settings&#34; → &#34;Editor&#34; → &#34;Code Style&#34; → &#34;Java&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Click the gear icon next to &#34;Scheme&#34; and select &#34;Import Scheme&#34; → &#34;Checkstyle Configuration&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Navigate to and select &lt;code&gt;tools/maven/checkstyle.xml&lt;/code&gt; located within your cloned repository.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Then you could click &#34;View&#34; → &#34;Tool Windows&#34; → &#34;Checkstyle&#34; and find the &#34;Check Module&#34; button in the opened tool window to validate checkstyle. Or you can use the command &lt;code&gt;mvn clean compile checkstyle:checkstyle&lt;/code&gt; to validate.&lt;/p&gt; &#xA;&lt;h3&gt;Documentation Contribute&lt;/h3&gt; &#xA;&lt;p&gt;Flink cdc documentations locates at &lt;code&gt;docs/content&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The contribution step is the same as the code contribution. We use markdown as the source code of the document.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.dingtalk.com/&#34;&gt;DingTalk&lt;/a&gt; Chinese User Group&lt;/p&gt; &lt;p&gt;You can search the group number [&lt;strong&gt;33121212&lt;/strong&gt;] or scan the following QR code to join in the group.&lt;/p&gt; &#xA;  &lt;div align=&#34;center&#34;&gt; &#xA;   &lt;img src=&#34;https://user-images.githubusercontent.com/5163645/233297896-0195d0ae-eb1c-4604-977b-1d08e424c7e7.png&#34; width=&#34;400&#34;&gt; &#xA;  &lt;/div&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documents&lt;/h2&gt; &#xA;&lt;p&gt;To get started, please see &lt;a href=&#34;https://ververica.github.io/flink-cdc-connectors/&#34;&gt;https://ververica.github.io/flink-cdc-connectors/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>langchain4j/langchain4j</title>
    <updated>2023-08-27T01:57:09Z</updated>
    <id>tag:github.com,2023-08-27:/langchain4j/langchain4j</id>
    <link href="https://github.com/langchain4j/langchain4j" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Java version of LangChain&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LangChain for Java: Supercharge your Java application with the power of LLMs&lt;/h1&gt; &#xA;&lt;h2&gt;Project goals&lt;/h2&gt; &#xA;&lt;p&gt;The goal of this project is to simplify the integration of AI/LLM capabilities into your Java application.&lt;/p&gt; &#xA;&lt;p&gt;This can be achieved thanks to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;A simple and coherent layer of abstractions&lt;/strong&gt;, designed to ensure that your code does not depend on concrete implementations such as LLM providers, embedding store providers, etc. This allows for easy swapping of components.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Numerous implementations of the above-mentioned abstractions&lt;/strong&gt;, providing you with a variety of LLMs and embedding stores to choose from.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Range of in-demand features on top of LLMs, such as:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The capability to &lt;strong&gt;ingest your own data&lt;/strong&gt; (documentation, codebase, etc.), allowing the LLM to act and respond based on your data.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Autonomous agents&lt;/strong&gt; for delegating tasks (defined on the fly) to the LLM, which will strive to complete them.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Prompt templates&lt;/strong&gt; to help you achieve the highest possible quality of LLM responses.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Memory&lt;/strong&gt; to provide context to the LLM for your current and past conversations.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Structured outputs&lt;/strong&gt; for receiving responses from the LLM with a desired structure as Java POJOs.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&#34;AI Services&#34;&lt;/strong&gt; for declaratively defining complex AI behavior behind a simple API.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Chains&lt;/strong&gt; to reduce the need for extensive boilerplate code in common use-cases.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Auto-moderation&lt;/strong&gt; to ensure that all inputs and outputs to/from the LLM are not harmful.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Code examples&lt;/h2&gt; &#xA;&lt;p&gt;Please see examples of how LangChain4j can be used in &lt;code&gt;langchain4j-examples&lt;/code&gt; repo:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/tree/main/other-examples/src/main/java&#34;&gt;Examples in plain Java&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/spring-boot-example/src/test/java/dev/example/CustomerSupportApplicationTest.java&#34;&gt;Example with Spring Boot&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;News&lt;/h2&gt; &#xA;&lt;p&gt;19 August:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Integration with &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/ai-services/openai/overview&#34;&gt;Azure OpenAI&lt;/a&gt; by &lt;a href=&#34;https://github.com/kuraleta&#34;&gt;@kuraleta&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Integration with Qwen models (DashScope) by &lt;a href=&#34;https://github.com/jiangsier-xyz&#34;&gt;@jiangsier-xyz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/embedding/store/ChromaEmbeddingStoreExample.java&#34;&gt;Integration with Chroma&lt;/a&gt; by &lt;a href=&#34;https://github.com/kuraleta&#34;&gt;@kuraleta&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/ServiceWithPersistentMemoryForEachUserExample.java&#34;&gt;Support for persistent ChatMemory&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;10 August:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/embedding/store/WeaviateEmbeddingStoreExample.java&#34;&gt;Integration with Weaviate&lt;/a&gt; by &lt;a href=&#34;https://github.com/Heezer&#34;&gt;@Heezer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/DocumentLoaderExamples.java&#34;&gt;Support for DOC, XLS and PPT document types&lt;/a&gt; by &lt;a href=&#34;https://github.com/oognuyh&#34;&gt;@oognuyh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/ServiceWithMemoryForEachUserExample.java&#34;&gt;Separate chat memory for each user&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/embedding/model/InProcessEmbeddingModelExamples.java&#34;&gt;Custom in-process embedding models&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Added lots of Javadoc&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j/releases/tag/0.19.0&#34;&gt;And more&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;26 July:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We&#39;ve added integration with &lt;a href=&#34;https://localai.io/&#34;&gt;LocalAI&lt;/a&gt;. Now, you can use LLMs hosted locally!&lt;/li&gt; &#xA; &lt;li&gt;Added support for &lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/ServiceWithStreamingExample.java&#34;&gt;response streaming in AI Services&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;21 July:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Now, you can do &lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/embedding/model/InProcessEmbeddingModelExamples.java&#34;&gt;text embedding inside your JVM&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;17 July:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can now try out OpenAI&#39;s &lt;code&gt;gpt-3.5-turbo&lt;/code&gt; and &lt;code&gt;text-embedding-ada-002&lt;/code&gt; models with LangChain4j for free, without needing an OpenAI account and keys! Simply use the API key &#34;demo&#34;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;15 July:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added EmbeddingStoreIngestor&lt;/li&gt; &#xA; &lt;li&gt;Redesigned document loaders (see FileSystemDocumentLoader)&lt;/li&gt; &#xA; &lt;li&gt;Simplified ConversationalRetrievalChain&lt;/li&gt; &#xA; &lt;li&gt;Renamed DocumentSegment into TextSegment&lt;/li&gt; &#xA; &lt;li&gt;Added output parsers for numeric types&lt;/li&gt; &#xA; &lt;li&gt;Added @UserName for AI Services&lt;/li&gt; &#xA; &lt;li&gt;Fixed &lt;a href=&#34;https://github.com/langchain4j/langchain4j/issues/23&#34;&gt;23&lt;/a&gt; and &lt;a href=&#34;https://github.com/langchain4j/langchain4j/issues/24&#34;&gt;24&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;11 July:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added &lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/ServiceWithDynamicToolsExample.java&#34;&gt;&#34;Dynamic Tools&#34;&lt;/a&gt;: Now, the LLM can generate code for tasks that require precise calculations, such as math and string manipulation. This will be dynamically executed in a style akin to GPT-4&#39;s code interpreter! We use &lt;a href=&#34;https://rapidapi.com/judge0-official/api/judge0-ce/pricing&#34;&gt;Judge0, hosted by Rapid API&lt;/a&gt;, for code execution. You can subscribe and receive 50 free executions per day.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;5 July:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Now you can &lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/spring-boot-example/src/test/java/dev/example/CustomerSupportApplicationTest.java&#34;&gt;add your custom knowledge base to &#34;AI Services&#34;&lt;/a&gt;. Relevant information will be automatically retrieved and injected into the prompt. This way, the LLM will have a context of your data and will answer based on it!&lt;/li&gt; &#xA; &lt;li&gt;The current date and time can now be automatically injected into the prompt using special &lt;code&gt;{{current_date}}&lt;/code&gt;, &lt;code&gt;{{current_time}}&lt;/code&gt; and &lt;code&gt;{{current_date_time}}&lt;/code&gt; placeholders.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;3 July:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added support for Spring Boot 3&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;2 July:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/spring-boot-example/src/test/java/dev/example/CustomerSupportApplicationTest.java&#34;&gt;Added Spring Boot Starter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Added support for HuggingFace models&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;1 July:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/ServiceWithToolsExample.java&#34;&gt;Added &#34;Tools&#34;&lt;/a&gt; (support for OpenAI functions)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Highlights&lt;/h2&gt; &#xA;&lt;p&gt;You can declaratively define concise &#34;AI Services&#34; that are powered by LLMs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;interface Assistant {&#xA;&#xA;    String chat(String userMessage);&#xA;}&#xA;&#xA;Assistant assistant = AiServices.create(Assistant.class, model);&#xA;&#xA;String answer = assistant.chat(&#34;Hello&#34;);&#xA;    &#xA;System.out.println(answer);&#xA;// Hello! How can I assist you today?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use LLM as a classifier:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;enum Sentiment {&#xA;    POSITIVE, NEUTRAL, NEGATIVE&#xA;}&#xA;&#xA;interface SentimentAnalyzer {&#xA;&#xA;    @UserMessage(&#34;Analyze sentiment of {{it}}&#34;)&#xA;    Sentiment analyzeSentimentOf(String text);&#xA;&#xA;    @UserMessage(&#34;Does {{it}} have a positive sentiment?&#34;)&#xA;    boolean isPositive(String text);&#xA;}&#xA;&#xA;SentimentAnalyzer sentimentAnalyzer = AiServices.create(SentimentAnalyzer.class, model);&#xA;&#xA;Sentiment sentiment = sentimentAnalyzer.analyzeSentimentOf(&#34;It is good!&#34;);&#xA;// POSITIVE&#xA;&#xA;boolean positive = sentimentAnalyzer.isPositive(&#34;It is bad!&#34;);&#xA;// false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can easily extract structured information from unstructured data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class Person {&#xA;&#xA;    private String firstName;&#xA;    private String lastName;&#xA;    private LocalDate birthDate;&#xA;&#xA;    public String toString() {...}&#xA;}&#xA;&#xA;interface PersonExtractor {&#xA;&#xA;    @UserMessage(&#34;Extract information about a person from {{it}}&#34;)&#xA;    Person extractPersonFrom(String text);&#xA;}&#xA;&#xA;PersonExtractor extractor = AiServices.create(PersonExtractor.class, model);&#xA;&#xA;String text = &#34;In 1968, amidst the fading echoes of Independence Day, &#34;&#xA;    + &#34;a child named John arrived under the calm evening sky. &#34;&#xA;    + &#34;This newborn, bearing the surname Doe, marked the start of a new journey.&#34;;&#xA;&#xA;Person person = extractor.extractPersonFrom(text);&#xA;// Person { firstName = &#34;John&#34;, lastName = &#34;Doe&#34;, birthDate = 1968-07-04 }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can define more sophisticated prompt templates using mustache syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;interface Translator {&#xA;&#xA;    @SystemMessage(&#34;You are a professional translator into {{language}}&#34;)&#xA;    @UserMessage(&#34;Translate the following text: {{text}}&#34;)&#xA;    String translate(@V(&#34;text&#34;) String text, @V(&#34;language&#34;) String language);&#xA;}&#xA;&#xA;Translator translator = AiServices.create(Translator.class, model);&#xA;&#xA;String translation = translator.translate(&#34;Hello, how are you?&#34;, &#34;Italian&#34;);&#xA;// Ciao, come stai?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can provide tools that LLMs can use! Can be anything: retrieve information from DB, call APIs, etc. See example &lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/ServiceWithToolsExample.java&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Java: 8 or higher&lt;/li&gt; &#xA; &lt;li&gt;Spring Boot: 2 or 3&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Add LangChain4j dependency to your project:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Maven: &lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;dev.langchain4j&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;langchain4j&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;0.21.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Gradle: &lt;pre&gt;&lt;code&gt;implementation &#39;dev.langchain4j:langchain4j:0.21.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Import your OpenAI/HuggingFace API key:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String apiKey = System.getenv(&#34;OPENAI_API_KEY&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can use the API key &#34;demo&#34; to test OpenAI, which we provide for free. &lt;a href=&#34;https://github.com/langchain4j/langchain4j#how-to-get-an-api-key&#34;&gt;How to gen an API key?&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create an instance of a model and start interacting:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;OpenAiChatModel model = OpenAiChatModel.withApiKey(apiKey);&#xA;&#xA;AiMessage answer = model.sendUserMessage(&#34;Hello world!&#34;);&#xA;&#xA;System.out.println(answer.text()); // Hello! How can I assist you today?&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;Please note that the library is in active development and:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Many features are still missing. We are working hard on implementing them ASAP.&lt;/li&gt; &#xA; &lt;li&gt;API might change at any moment. At this point, we prioritize good design in the future over backward compatibility now. We hope for your understanding.&lt;/li&gt; &#xA; &lt;li&gt;We need your input! Please &lt;a href=&#34;https://github.com/langchain4j/langchain4j/issues/new/choose&#34;&gt;let us know&lt;/a&gt; what features you need and your concerns about the current implementation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Current capabilities:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;AI Services: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/SimpleServiceExample.java&#34;&gt;Simple&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/ServiceWithMemoryExample.java&#34;&gt;With Memory&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/ServiceWithToolsExample.java&#34;&gt;With Tools&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/ServiceWithStreamingExample.java&#34;&gt;With Streaming&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/ServiceWithRetrieverExample.java&#34;&gt;With Retriever&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/ServiceWithAutoModerationExample.java&#34;&gt;With Auto-Moderation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/OtherServiceExamples.java&#34;&gt;With Structured Outputs, Structured Prompts, etc&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Integration with &lt;a href=&#34;https://platform.openai.com/docs/introduction&#34;&gt;OpenAI&lt;/a&gt; and &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/ai-services/openai/overview&#34;&gt;Azure OpenAI&lt;/a&gt; for: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://platform.openai.com/docs/guides/chat&#34;&gt;Chats&lt;/a&gt; (sync + streaming + functions)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://platform.openai.com/docs/guides/completion&#34;&gt;Completions&lt;/a&gt; (sync + streaming)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://platform.openai.com/docs/guides/embeddings&#34;&gt;Embeddings&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Integration with &lt;a href=&#34;https://huggingface.co/docs/api-inference/index&#34;&gt;HuggingFace Inference API&lt;/a&gt; for: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/docs/api-inference/detailed_parameters#text-generation-task&#34;&gt;Chats&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/docs/api-inference/detailed_parameters#text-generation-task&#34;&gt;Completions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/docs/api-inference/detailed_parameters#feature-extraction-task&#34;&gt;Embeddings&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Integration with &lt;a href=&#34;https://localai.io/&#34;&gt;LocalAI&lt;/a&gt; for: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Chats (sync + streaming + functions)&lt;/li&gt; &#xA;   &lt;li&gt;Completions (sync + streaming)&lt;/li&gt; &#xA;   &lt;li&gt;Embeddings&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/ChatMemoryExamples.java&#34;&gt;Chat memory&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/ServiceWithPersistentMemoryForEachUserExample.java&#34;&gt;Persistent chat memory&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/ChatWithDocumentsExamples.java&#34;&gt;Chat with Documents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/embedding/store/ChromaEmbeddingStoreExample.java&#34;&gt;Integration&lt;/a&gt; with &lt;a href=&#34;https://www.trychroma.com/&#34;&gt;Chroma&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/embedding/store/PineconeEmbeddingStoreExample.java&#34;&gt;Integration&lt;/a&gt; with &lt;a href=&#34;https://www.pinecone.io/&#34;&gt;Pinecone&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/embedding/store/WeaviateEmbeddingStoreExample.java&#34;&gt;Integration&lt;/a&gt; with &lt;a href=&#34;https://weaviate.io/&#34;&gt;Weaviate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/embedding/store/InMemoryEmbeddingStoreExample.java&#34;&gt;In-memory embedding store&lt;/a&gt; (for prototyping and testing)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/OtherServiceExamples.java&#34;&gt;Structured outputs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/PromptTemplateExamples.java&#34;&gt;Prompt templates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/StructuredPromptTemplateExamples.java&#34;&gt;Structured prompt templates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/StreamingExamples.java&#34;&gt;Streaming of LLM responses&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/DocumentLoaderExamples.java&#34;&gt;Loading txt, pdf, doc, xls and ppt documents from the file system and via URL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/ChatWithDocumentsExamples.java&#34;&gt;Splitting documents into segments&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;by paragraph&lt;/li&gt; &#xA;   &lt;li&gt;by sentence&lt;/li&gt; &#xA;   &lt;li&gt;by character count&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Token count estimation (so that you can predict how much you will pay)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Coming soon:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Extending &#34;AI Service&#34; features&lt;/li&gt; &#xA; &lt;li&gt;Integration with more LLM providers (commercial and free)&lt;/li&gt; &#xA; &lt;li&gt;Integrations with more embedding stores (commercial and free)&lt;/li&gt; &#xA; &lt;li&gt;Support for more document types&lt;/li&gt; &#xA; &lt;li&gt;Long-term memory for chatbots and agents&lt;/li&gt; &#xA; &lt;li&gt;Chain-of-Thought and Tree-of-Thought&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Request features&lt;/h2&gt; &#xA;&lt;p&gt;Please &lt;a href=&#34;https://github.com/langchain4j/langchain4j/issues/new/choose&#34;&gt;let us know&lt;/a&gt; what features you need!&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Please help us make this open-source library better by contributing.&lt;/p&gt; &#xA;&lt;h2&gt;Use cases&lt;/h2&gt; &#xA;&lt;p&gt;You might ask why would I need all of this? Here are a couple of examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You want to implement a custom AI-powered chatbot that has access to your data and behaves the way you want it: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Customer support chatbot that can: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;politely answer customer questions&lt;/li&gt; &#xA;     &lt;li&gt;take /change/cancel orders&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Educational assistant that can: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Teach various subjects&lt;/li&gt; &#xA;     &lt;li&gt;Explain unclear parts&lt;/li&gt; &#xA;     &lt;li&gt;Assess user&#39;s understanding/knowledge&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;You want to process a lot of unstructured data (files, web pages, etc) and extract structured information from them. For example: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;extract insights from customer reviews and support chat history&lt;/li&gt; &#xA;   &lt;li&gt;extract interesting information from the websites of your competitors&lt;/li&gt; &#xA;   &lt;li&gt;extract insights from CVs of job applicants&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;You want to generate information, for example: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Emails tailored for each of your customers&lt;/li&gt; &#xA;   &lt;li&gt;Content for your app/website: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Blog posts&lt;/li&gt; &#xA;     &lt;li&gt;Stories&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;You want to transform information, for example: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Summarize&lt;/li&gt; &#xA;   &lt;li&gt;Proofread and rewrite&lt;/li&gt; &#xA;   &lt;li&gt;Translate&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Best practices&lt;/h2&gt; &#xA;&lt;p&gt;We highly recommend watching &lt;a href=&#34;https://www.deeplearning.ai/short-courses/chatgpt-prompt-engineering-for-developers/&#34;&gt;this amazing 90-minute tutorial&lt;/a&gt; on prompt engineering best practices, presented by Andrew Ng (DeepLearning.AI) and Isa Fulford (OpenAI). This course will teach you how to use LLMs efficiently and achieve the best possible results. Good investment of your time!&lt;/p&gt; &#xA;&lt;p&gt;Here are some best practices for using LLMs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Be responsible. Use AI for Good.&lt;/li&gt; &#xA; &lt;li&gt;Be specific. The more specific your query, the best results you will get.&lt;/li&gt; &#xA; &lt;li&gt;Add a &lt;a href=&#34;https://arxiv.org/pdf/2205.11916.pdf&#34;&gt;&#34;Let’s think step by step&#34; instruction&lt;/a&gt; to your prompt.&lt;/li&gt; &#xA; &lt;li&gt;Specify steps to achieve the desired goal yourself. This will make the LLM do what you want it to do.&lt;/li&gt; &#xA; &lt;li&gt;Provide examples. Sometimes it is best to show LLM a few examples of what you want instead of trying to explain it.&lt;/li&gt; &#xA; &lt;li&gt;Ask LLM to provide structured output (JSON, XML, etc). This way you can parse response more easily and distinguish different parts of it.&lt;/li&gt; &#xA; &lt;li&gt;Use unusual delimiters, such as ```triple backticks``` to help the LLM distinguish data or input from instructions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to get an API key&lt;/h2&gt; &#xA;&lt;p&gt;You will need an API key from OpenAI (paid) or HuggingFace (free) to use LLMs hosted by them.&lt;/p&gt; &#xA;&lt;p&gt;We recommend using OpenAI LLMs (&lt;code&gt;gpt-3.5-turbo&lt;/code&gt; and &lt;code&gt;gpt-4&lt;/code&gt;) as they are by far the most capable and are reasonably priced.&lt;/p&gt; &#xA;&lt;p&gt;It will cost approximately $0.01 to generate 10 pages (A4 format) of text with &lt;code&gt;gpt-3.5-turbo&lt;/code&gt;. With &lt;code&gt;gpt-4&lt;/code&gt;, the cost will be $0.30 to generate the same amount of text. However, for some use cases, this higher cost may be justified.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.howtogeek.com/885918/how-to-get-an-openai-api-key/&#34;&gt;How to get OpenAI API key&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For embeddings, we recommend using one of the models from the &lt;a href=&#34;https://huggingface.co/spaces/mteb/leaderboard&#34;&gt;HuggingFace MTEB leaderboard&lt;/a&gt;. You&#39;ll have to find the best one for your specific use case.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s how to get a HuggingFace API key:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create an account on &lt;a href=&#34;https://huggingface.co&#34;&gt;https://huggingface.co&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://huggingface.co/settings/tokens&#34;&gt;https://huggingface.co/settings/tokens&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Generate a new access token&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>