<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-08-17T02:03:43Z</updated>
  <subtitle>Weekly Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>apache/solr</title>
    <updated>2025-08-17T02:03:43Z</updated>
    <id>tag:github.com,2025-08-17:/apache/solr</id>
    <link href="https://github.com/apache/solr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Apache Solr open-source search software&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Welcome to the Apache Solr project!&lt;/h1&gt; &#xA;&lt;hr /&gt; &#xA;&lt;p&gt;Solr is the blazing-fast, open source, multi-modal search platform built on &lt;a href=&#34;https://lucene.apache.org/&#34;&gt;Apache Lucene&lt;/a&gt;. It powers full-text, vector, and geospatial search at many of the world&#39;s largest organizations.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ci-builds.apache.org/job/Solr/job/Solr-Artifacts-main/&#34;&gt;&lt;img src=&#34;https://ci-builds.apache.org/job/Solr/job/Solr-Artifacts-main/badge/icon?subject=Solr%20Artifacts&#34; alt=&#34;Build Status&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://ci-builds.apache.org/job/Solr/job/Solr-Lint-main/&#34;&gt;&lt;img src=&#34;https://ci-builds.apache.org/job/Solr/job/Solr-Lint-main/badge/icon?subject=Solr%20Lint&#34; alt=&#34;Build Status&#34; /&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For a complete description of the Solr project, team composition, source code repositories, and other details, please see the Solr web site at &lt;a href=&#34;https://solr.apache.org/&#34;&gt;https://solr.apache.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;Downloads for Apache Solr distributions are available at &lt;a href=&#34;https://solr.apache.org/downloads.html&#34;&gt;https://solr.apache.org/downloads.html&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Running Solr&lt;/h2&gt; &#xA;&lt;h3&gt;Installing Solr&lt;/h3&gt; &#xA;&lt;p&gt;The Reference Guide contains an entire &lt;a href=&#34;https://solr.apache.org/guide/solr/latest/deployment-guide/system-requirements.html&#34;&gt;Deployment Guide&lt;/a&gt; to walk you through installing Solr.&lt;/p&gt; &#xA;&lt;h3&gt;Running Solr in Docker&lt;/h3&gt; &#xA;&lt;p&gt;You can run Solr in Docker via the &lt;a href=&#34;https://hub.docker.com/_/solr&#34;&gt;official image&lt;/a&gt;. Learn more about &lt;a href=&#34;https://solr.apache.org/guide/solr/latest/deployment-guide/solr-in-docker.html&#34;&gt;Solr in Docker&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Running Solr on Kubernetes&lt;/h3&gt; &#xA;&lt;p&gt;Solr has official support for running on Kubernetes, in the official Docker image. Please refer to the &lt;a href=&#34;https://solr.apache.org/operator&#34;&gt;Solr Operator&lt;/a&gt; home for details, tutorials and instructions.&lt;/p&gt; &#xA;&lt;h2&gt;How to Use&lt;/h2&gt; &#xA;&lt;p&gt;Solr includes a few examples to help you get started. To run a specific example, enter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  bin/solr start -e &amp;lt;EXAMPLE&amp;gt; where &amp;lt;EXAMPLE&amp;gt; is one of:&#xA;    cloud:         SolrCloud example&#xA;    techproducts:  Comprehensive example illustrating many of Solr&#39;s core capabilities&#xA;    schemaless:    Schema-less example (schema is inferred from data during indexing)&#xA;    films:         Example of starting with _default configset and adding explicit fields dynamically    &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For instance, if you want to run the techproducts example, enter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  bin/solr start -e techproducts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a more in-depth introduction, please check out the &lt;a href=&#34;https://solr.apache.org/guide/solr/latest/getting-started/solr-tutorial.html&#34;&gt;tutorials in the Solr Reference Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://solr.apache.org/community.html#mailing-lists-chat&#34;&gt;Users Mailing List&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Slack: Solr Community Channel. Sign up at &lt;a href=&#34;https://s.apache.org/solr-slack&#34;&gt;https://s.apache.org/solr-slack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;IRC: &lt;code&gt;#solr&lt;/code&gt; on &lt;a href=&#34;https://web.libera.chat/?channels=#solr&#34;&gt;libera.chat&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Developer Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Learn more about developing Solr by reading through the developer docs in &lt;a href=&#34;https://raw.githubusercontent.com/apache/solr/main/dev-docs&#34;&gt;./dev-docs&lt;/a&gt; source tree or building Solr from source in &lt;a href=&#34;https://raw.githubusercontent.com/apache/solr/main/dev-docs/solr-source-code.adoc&#34;&gt;./dev-docs/solr-source-code.adoc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Quickstart&lt;/h3&gt; &#xA;&lt;p&gt;Solr uses &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt; for its build system. Here are some useful hints to build and run Solr locally:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To build a Solr dev distribution:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To run the Solr dev distribution locally:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ./solr/packaging/build/dev&#xA;bin/solr start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open a web browser and go to &lt;a href=&#34;http://localhost:8983/solr/&#34;&gt;http://localhost:8983/solr/&lt;/a&gt; to access the Solr Admin interface. You can also use the &lt;code&gt;bin/solr&lt;/code&gt; script to create and manage Solr collections. For example use the &lt;code&gt;bin/solr post&lt;/code&gt; tool to index some sample data.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Get Involved&lt;/h2&gt; &#xA;&lt;p&gt;Please review &lt;a href=&#34;https://raw.githubusercontent.com/apache/solr/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for information on contributing to the project.&lt;/p&gt; &#xA;&lt;p&gt;To get involved in the developer community:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://solr.apache.org/community.html#mailing-lists-chat&#34;&gt;Mailing Lists&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Slack: &lt;code&gt;#solr-dev&lt;/code&gt; in the &lt;code&gt;the-asf&lt;/code&gt; organization. Sign up at &lt;a href=&#34;https://the-asf.slack.com/messages/CE70MDPMF&#34;&gt;https://the-asf.slack.com/messages/CE70MDPMF&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://issues.apache.org/jira/browse/SOLR&#34;&gt;Issue Tracker (JIRA)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;IRC: &lt;code&gt;#solr-dev&lt;/code&gt; on &lt;a href=&#34;https://web.libera.chat/?channels=#solr-dev&#34;&gt;libera.chat&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>prestodb/presto</title>
    <updated>2025-08-17T02:03:43Z</updated>
    <id>tag:github.com,2025-08-17:/prestodb/presto</id>
    <link href="https://github.com/prestodb/presto" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The official home of the Presto distributed SQL query engine for big data&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Presto&lt;/h1&gt; &#xA;&lt;p&gt;Presto is a distributed SQL query engine for big data.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://prestodb.io/docs/current/installation.html&#34;&gt;Presto installation documentation&lt;/a&gt; for deployment instructions.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://prestodb.io/docs/current/&#34;&gt;Presto documentation&lt;/a&gt; for general documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Mission and Architecture&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/prestodb/presto/master/ARCHITECTURE.md&#34;&gt;PrestoDB: Mission and Architecture&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mac OS X or Linux&lt;/li&gt; &#xA; &lt;li&gt;Java 17 64-bit. Both Oracle JDK and OpenJDK are supported.&lt;/li&gt; &#xA; &lt;li&gt;Maven 3.6.3+ (for building)&lt;/li&gt; &#xA; &lt;li&gt;Python 2.4+ (for running with the launcher script)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;!-- from: https://github.com/prestodb/presto/blob/master/README.md --&gt; &#xA; &lt;summary&gt;&lt;a id=&#34;building-presto&#34;&gt;&lt;h2&gt;Building Presto&lt;/h2&gt;&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;h3&gt;Overview (Java)&lt;/h3&gt; &#xA; &lt;p&gt;Presto is a standard Maven project. Simply run the following command from the project root directory:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;./mvnw clean install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;On the first build, Maven will download all the dependencies from the internet and cache them in the local repository (&lt;code&gt;~/.m2/repository&lt;/code&gt;), which can take a considerable amount of time. Subsequent builds will be faster.&lt;/p&gt; &#xA; &lt;p&gt;Presto has a comprehensive set of unit tests that can take several minutes to run. You can disable the tests when building:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;./mvnw clean install -DskipTests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;After building Presto for the first time, you can load the project into your IDE and run the server. We recommend using &lt;a href=&#34;http://www.jetbrains.com/idea/&#34;&gt;IntelliJ IDEA&lt;/a&gt;. Because Presto is a standard Maven project, you can import it into your IDE using the root &lt;code&gt;pom.xml&lt;/code&gt; file. In IntelliJ, choose Open Project from the Quick Start box or choose Open from the File menu and select the root &lt;code&gt;pom.xml&lt;/code&gt; file.&lt;/p&gt; &#xA; &lt;p&gt;After opening the project in IntelliJ, double check that the Java SDK is properly configured for the project:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Open the File menu and select Project Structure&lt;/li&gt; &#xA;  &lt;li&gt;In the SDKs section, ensure that a distribution of JDK 17 is selected (create one if none exist)&lt;/li&gt; &#xA;  &lt;li&gt;In the Project section, ensure the Project language level is set to at least 8.0.&lt;/li&gt; &#xA;  &lt;li&gt;When using JDK 17, an &lt;a href=&#34;https://youtrack.jetbrains.com/issue/IDEA-201168&#34;&gt;IntelliJ bug&lt;/a&gt; requires you to disable the &lt;code&gt;Use &#39;--release&#39; option for cross-compilation (Java 9 and later)&lt;/code&gt; setting in &lt;code&gt;Settings &amp;gt; Build, Execution, Deployment &amp;gt; Compiler &amp;gt; Java Compiler&lt;/code&gt;. If this option remains enabled, you may encounter errors such as: &lt;code&gt;package sun.misc does not exist&lt;/code&gt; because IntelliJ fails to resolve certain internal JDK classes.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Presto comes with sample configuration that should work out-of-the-box for development. Use the following options to create a run configuration:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Main Class: &lt;code&gt;com.facebook.presto.server.PrestoServer&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;VM Options: &lt;code&gt;-ea -XX:+UseG1GC -XX:G1HeapRegionSize=32M -XX:+UseGCOverheadLimit -XX:+ExplicitGCInvokesConcurrent -Xmx2G -Dconfig=etc/config.properties -Dlog.levels-file=etc/log.properties -Djdk.attach.allowAttachSelf=true&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Working directory: &lt;code&gt;$MODULE_WORKING_DIR$&lt;/code&gt; or &lt;code&gt;$MODULE_DIR$&lt;/code&gt;(Depends your version of IntelliJ)&lt;/li&gt; &#xA;  &lt;li&gt;Use classpath of module: &lt;code&gt;presto-main&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;The working directory should be the &lt;code&gt;presto-main&lt;/code&gt; subdirectory. In IntelliJ, using &lt;code&gt;$MODULE_DIR$&lt;/code&gt; accomplishes this automatically.&lt;/p&gt; &#xA; &lt;p&gt;Additionally, the Hive plugin must be configured with location of your Hive metastore Thrift service. Add the following to the list of VM options, replacing &lt;code&gt;localhost:9083&lt;/code&gt; with the correct host and port (or use the below value if you do not have a Hive metastore):&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;-Dhive.metastore.uri=thrift://localhost:9083&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Additional configuration for Java 17&lt;/h3&gt; &#xA; &lt;p&gt;When running with Java 17, additional &lt;code&gt;--add-opens&lt;/code&gt; flags are required to allow reflective access used by certain catalogs based on which catalogs are configured.&lt;br /&gt; For the default set of catalogs loaded when starting the Presto server in IntelliJ without changes, add the following flags to the &lt;strong&gt;VM Options&lt;/strong&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;--add-opens=java.base/java.io=ALL-UNNAMED&#xA;--add-opens=java.base/java.lang=ALL-UNNAMED&#xA;--add-opens=java.base/java.lang.ref=ALL-UNNAMED&#xA;--add-opens=java.base/java.lang.reflect=ALL-UNNAMED&#xA;--add-opens=java.base/java.net=ALL-UNNAMED&#xA;--add-opens=java.base/java.nio=ALL-UNNAMED&#xA;--add-opens=java.base/java.security=ALL-UNNAMED&#xA;--add-opens=java.base/javax.security.auth=ALL-UNNAMED&#xA;--add-opens=java.base/javax.security.auth.login=ALL-UNNAMED&#xA;--add-opens=java.base/java.text=ALL-UNNAMED&#xA;--add-opens=java.base/java.util=ALL-UNNAMED&#xA;--add-opens=java.base/java.util.concurrent=ALL-UNNAMED&#xA;--add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED&#xA;--add-opens=java.base/java.util.regex=ALL-UNNAMED&#xA;--add-opens=java.base/jdk.internal.loader=ALL-UNNAMED&#xA;--add-opens=java.base/sun.security.action=ALL-UNNAMED&#xA;--add-opens=java.security.jgss/sun.security.krb5=ALL-UNNAMED&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;These flags ensure that internal JDK modules are accessible at runtime for components used by Presto’s default configuration. It is not a comprehensive list. Additional flags may need to be added, depending on the catalogs configured on the server.&lt;/p&gt; &#xA; &lt;h3&gt;Using SOCKS for Hive or HDFS&lt;/h3&gt; &#xA; &lt;p&gt;If your Hive metastore or HDFS cluster is not directly accessible to your local machine, you can use SSH port forwarding to access it. Setup a dynamic SOCKS proxy with SSH listening on local port 1080:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;ssh -v -N -D 1080 server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Then add the following to the list of VM options:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;-Dhive.metastore.thrift.client.socks-proxy=localhost:1080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Running the CLI&lt;/h3&gt; &#xA; &lt;p&gt;Start the CLI to connect to the server and run SQL queries:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;presto-cli/target/presto-cli-*-executable.jar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Run a query to see the nodes in the cluster:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;SELECT * FROM system.runtime.nodes;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;In the sample configuration, the Hive connector is mounted in the &lt;code&gt;hive&lt;/code&gt; catalog, so you can run the following queries to show the tables in the Hive database &lt;code&gt;default&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;SHOW TABLES FROM hive.default;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Building the Documentation&lt;/h3&gt; &#xA; &lt;p&gt;To build the Presto docs, see the &lt;a href=&#34;https://raw.githubusercontent.com/prestodb/presto/master/presto-docs/README.md&#34;&gt;docs README&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;h3&gt;Building the Presto Console&lt;/h3&gt; &#xA; &lt;p&gt;The Presto Console is composed of several React components and is written in JSX and ES6. This source code is stored in the &lt;code&gt;presto-ui/&lt;/code&gt; module. The compilation process generates browser-compatible javascript which is added as JAR resources during the maven build. When the resource JAR is included on the classpath of Presto coordinator, it will be able to serve the resources.&lt;/p&gt; &#xA; &lt;p&gt;None of the Java code relies on the Presto UI project being compiled, so it is possible to exclude this UI when building Presto. Add the property &lt;code&gt;-DskipUI&lt;/code&gt; to the maven command to disable building the &lt;code&gt;ui&lt;/code&gt; maven module.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;./mvnw clean install -DskipUI&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;You must have &lt;a href=&#34;https://nodejs.org/en/download/&#34;&gt;Node.js&lt;/a&gt; and &lt;a href=&#34;https://yarnpkg.com/en/&#34;&gt;Yarn&lt;/a&gt; installed to build the UI. When using Maven to build the project, Node and yarn are installed in the &lt;code&gt;presto-ui/target&lt;/code&gt; folder. Add the node and yarn executables to the &lt;code&gt;PATH&lt;/code&gt; environment variable.&lt;/p&gt; &#xA; &lt;p&gt;To update Presto Console after making changes, run:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;yarn --cwd presto-ui/src install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;To simplify iteration, you can also run in &lt;code&gt;watch&lt;/code&gt; mode, which automatically re-compiles when changes to source files are detected:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;yarn --cwd presto-ui/src run watch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;To iterate quickly, simply re-build the project in IntelliJ after packaging is complete. Project resources will be hot-reloaded and changes are reflected on browser refresh.&lt;/p&gt; &#xA; &lt;h2&gt;Presto native and Velox&lt;/h2&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/prestodb/presto/tree/master/presto-native-execution&#34;&gt;Presto native&lt;/a&gt; is a C++ rewrite of Presto worker. &lt;a href=&#34;https://github.com/prestodb/presto/tree/master/presto-native-execution&#34;&gt;Presto native&lt;/a&gt; uses &lt;a href=&#34;https://github.com/facebookincubator/velox&#34;&gt;Velox&lt;/a&gt; as its primary engine to run presto workloads.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/facebookincubator/velox&#34;&gt;Velox&lt;/a&gt; is a C++ database library which provides reusable, extensible, and high-performance data processing components.&lt;/p&gt; &#xA; &lt;p&gt;Check out &lt;a href=&#34;https://github.com/prestodb/presto/tree/master/presto-native-execution#build-from-source&#34;&gt;building instructions&lt;/a&gt; to get started.&lt;/p&gt; &#xA; &lt;hr /&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Contributing!&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to the &lt;a href=&#34;https://github.com/prestodb/presto/raw/master/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt; to get started.&lt;/p&gt; &#xA;&lt;h2&gt;Questions?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://communityinviter.com/apps/prestodb/prestodb&#34;&gt;Please join our Slack channel and ask in &lt;code&gt;#dev&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;By contributing to Presto, you agree that your contributions will be licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/prestodb/presto/master/LICENSE&#34;&gt;Apache License Version 2.0 (APLv2)&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>PortSwigger/http-request-smuggler</title>
    <updated>2025-08-17T02:03:43Z</updated>
    <id>tag:github.com,2025-08-17:/PortSwigger/http-request-smuggler</id>
    <link href="https://github.com/PortSwigger/http-request-smuggler" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;HTTP Request Smuggler&lt;/h1&gt; &#xA;&lt;p&gt;This Burp Suite extension automatically detects and exploits &lt;a href=&#34;https://portswigger.net/web-security/request-smuggling&#34;&gt;HTTP Request Smuggling&lt;/a&gt; vulnerabilities using advanced desynchronization techniques developed by PortSwigger researcher James Kettle. It supports comprehensive scanning for HTTP/1.1 and HTTP/2-downgrade desync vulnerabilities, client-side desyncs, and connection state attacks.&lt;/p&gt; &#xA;&lt;p&gt;Version 3.0 landed in 2025 and adds parser discrepancy detection, which bypasses widespread desync defences and makes it significantly more effective. For further information on this, refer to the whitepaper &lt;a href=&#34;https://portswigger.net/research/http1-must-die&#34;&gt;HTTP/1.1 Must Die: The Desync Endgame&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s fully compatible with Burp Suite DAST, Professional, and Community editions. Pro and Community editions have a &#34;research mode&#34; for exploring novel techniques, and the DAST integration is useful if you want recurring scans to flag novel threats as soon as they&#39;re released.&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Detection based on root-cause detection of underlying parsing discrepancies, which is significantly more reliable and resistant to target-specific quirks.&lt;/li&gt; &#xA; &lt;li&gt;Many permutation techniques for bypassing different server configurations&lt;/li&gt; &#xA; &lt;li&gt;HTTP/1.1 CL.TE and TE.CL desync detection with timeout-based confirmation&lt;/li&gt; &#xA; &lt;li&gt;HTTP/2 request smuggling including tunneling and header injection attacks&lt;/li&gt; &#xA; &lt;li&gt;Client-side desync detection for browser-powered attacks&lt;/li&gt; &#xA; &lt;li&gt;Header smuggling and removal vulnerability detection&lt;/li&gt; &#xA; &lt;li&gt;Connection state manipulation and pause-based desync techniques&lt;/li&gt; &#xA; &lt;li&gt;Automated exploit generation with Turbo Intruder integration&lt;/li&gt; &#xA; &lt;li&gt;False positive reduction through multiple validation techniques&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;p&gt;The easiest way to install this is in Burp Suite, via &lt;code&gt;Extender -&amp;gt; BApp Store&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer to load the jar manually, in Burp Suite (community or pro), use &lt;code&gt;Extender -&amp;gt; Extensions -&amp;gt; Add&lt;/code&gt; to load &lt;code&gt;build/libs/http-request-smuggler-all.jar&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Compile&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/PortSwigger/turbo-intruder&#34;&gt;Turbo Intruder&lt;/a&gt; is a dependency of this project, add it to the root of this source tree as &lt;code&gt;turbo-intruder-all.jar&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Build using:&lt;/p&gt; &#xA;&lt;p&gt;Linux: &lt;code&gt;./gradlew build fatjar&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Windows: &lt;code&gt;gradlew.bat build fatjar&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Grab the output from &lt;code&gt;build/libs/desynchronize-all.jar&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Use&lt;/h3&gt; &#xA;&lt;p&gt;Right click on a request and click &lt;code&gt;Launch Smuggle probe&lt;/code&gt;, then watch the Organizer and extension&#39;s output pane under &lt;code&gt;Extender-&amp;gt;Extensions-&amp;gt;HTTP Request Smuggler&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using Burp Pro, any findings will also be reported as scan issues.&lt;/p&gt; &#xA;&lt;p&gt;If you right click on a request that uses chunked encoding, you&#39;ll see another option marked &lt;code&gt;Launch Smuggle attack&lt;/code&gt;. This will open a Turbo Intruder window in which you can try out various attacks by editing the &lt;code&gt;prefix&lt;/code&gt; variable.&lt;/p&gt; &#xA;&lt;p&gt;For more advanced use watch the &lt;a href=&#34;https://portswigger.net/blog/http-desync-attacks&#34;&gt;video&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Practice&lt;/h3&gt; &#xA;&lt;p&gt;We&#39;ve released a collection of &lt;a href=&#34;https://portswigger.net/web-security/request-smuggling&#34;&gt;free online labs to practise against&lt;/a&gt;. Here&#39;s how to use the tool to solve the first lab - &lt;a href=&#34;https://portswigger.net/web-security/request-smuggling/lab-basic-cl-te&#34;&gt;HTTP request smuggling, basic CL.TE vulnerability&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use the Extender-&amp;gt;BApp store tab to install the &#39;HTTP Request Smuggler&#39; extension.&lt;/li&gt; &#xA; &lt;li&gt;Load the lab homepage, find the request in the proxy history, right click and select &#39;Launch smuggle probe&#39;, then click &#39;OK&#39;.&lt;/li&gt; &#xA; &lt;li&gt;Wait for the probe to complete, indicated by &#39;Completed 1 of 1&#39; appearing in the extension&#39;s output tab.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;re using Burp Suite Pro, find the reported vulnerability in the dashboard and open the first attached request.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;re using Burp Suite Community, copy the request from the output tab and paste it into the repeater, then complete the &#39;Target&#39; details on the top right.&lt;/li&gt; &#xA; &lt;li&gt;Right click on the request and select &#39;Smuggle attack (CL.TE)&#39;.&lt;/li&gt; &#xA; &lt;li&gt;Change the value of the &#39;prefix&#39; variable to &#39;G&#39;, then click &#39;Attack&#39; and confirm that one response says &#39;Unrecognised method GPOST&#39;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;By changing the &#39;prefix&#39; variable in step 7, you can solve all the labs and virtually every real-world scenario.&lt;/p&gt;</summary>
  </entry>
</feed>