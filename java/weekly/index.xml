<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-26T01:44:30Z</updated>
  <subtitle>Weekly Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>resilience4j/resilience4j</title>
    <updated>2025-01-26T01:44:30Z</updated>
    <id>tag:github.com,2025-01-26:/resilience4j/resilience4j</id>
    <link href="https://github.com/resilience4j/resilience4j" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Resilience4j is a fault tolerance library designed for Java8 and functional programming&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Fault tolerance library designed for functional programming&lt;/h1&gt; &#xA;&lt;div id=&#34;preamble&#34;&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://github.com/resilience4j/resilience4j/actions/workflows/gradle-build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://img.shields.io/nexus/r/io.github.resilience4j/resilience4j-circuitbreaker?server=https%3A%2F%2Foss.sonatype.org&#34; alt=&#34;Release&#34;&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://img.shields.io/nexus/s/io.github.resilience4j/resilience4j-circuitbreaker?server=https%3A%2F%2Foss.sonatype.org&#34; alt=&#34;Snapshot&#34;&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;http://www.apache.org/licenses/LICENSE-2.0.txt&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/license-ASF2-blue.svg?sanitize=true&#34; alt=&#34;Apache License 2&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://sonarcloud.io/dashboard?id=resilience4j_resilience4j&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=resilience4j_resilience4j&amp;amp;metric=coverage&#34; alt=&#34;Coverage&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://sonarcloud.io/dashboard?id=resilience4j_resilience4j&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=resilience4j_resilience4j&amp;amp;metric=sqale_rating&#34; alt=&#34;Maintainability&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://sonarcloud.io/dashboard?id=resilience4j_resilience4j&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=resilience4j_resilience4j&amp;amp;metric=reliability_rating&#34; alt=&#34;Reliability&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://sonarcloud.io/dashboard?id=resilience4j_resilience4j&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=resilience4j_resilience4j&amp;amp;metric=security_rating&#34; alt=&#34;Security&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://sonarcloud.io/dashboard?id=resilience4j_resilience4j&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=resilience4j_resilience4j&amp;amp;metric=vulnerabilities&#34; alt=&#34;Vulnerabilities&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://sonarcloud.io/dashboard?id=resilience4j_resilience4j&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=resilience4j_resilience4j&amp;amp;metric=bugs&#34; alt=&#34;Bugs&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://vshymanskyy.github.io/StandWithUkraine&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/banner2-direct.svg?sanitize=true&#34; alt=&#34;SWUbanner&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div id=&#34;toc&#34; class=&#34;toc&#34;&gt; &#xA;   &lt;div id=&#34;toctitle&#34; class=&#34;title&#34;&gt;&#xA;    Table of Contents&#xA;   &lt;/div&gt; &#xA;   &lt;ul class=&#34;sectlevel1&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/resilience4j/resilience4j/master/#_introduction&#34;&gt;1. Introduction&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/resilience4j/resilience4j/master/#_documentation&#34;&gt;2. Documentation&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/resilience4j/resilience4j/master/#_overview&#34;&gt;3. Overview&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/resilience4j/resilience4j/master/#_resilience_patterns&#34;&gt;4. Resilience patterns&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/resilience4j/resilience4j/master/#_spring_boot&#34;&gt;5. Spring Boot&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/resilience4j/resilience4j/master/#_usage_examples&#34;&gt;6. Usage examples&lt;/a&gt; &#xA;     &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/resilience4j/resilience4j/master/#circuitbreaker-retry-fallback&#34;&gt;6.1. CircuitBreaker, Retry and Fallback&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/resilience4j/resilience4j/master/#ratelimiter&#34;&gt;6.2. RateLimiter&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/resilience4j/resilience4j/master/#bulkhead&#34;&gt;6.3. Bulkhead&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/resilience4j/resilience4j/master/#events&#34;&gt;7. Consume emitted events&lt;/a&gt; &#xA;     &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/resilience4j/resilience4j/master/#_examples&#34;&gt;7.1. Examples&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/resilience4j/resilience4j/master/#_talks&#34;&gt;8. Talks&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/resilience4j/resilience4j/master/#_companies_that_use_resilience4j&#34;&gt;9. Companies that use Resilience4j&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/resilience4j/resilience4j/master/#_license&#34;&gt;10. License&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_introduction&#34;&gt;1. Introduction&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Resilience4j is a lightweight fault tolerance library designed for functional programming. Resilience4j provides higher-order functions (decorators) to enhance any functional interface, lambda expression or method reference with a Circuit Breaker, Rate Limiter, Retry or Bulkhead. You can stack more than one decorator on any functional interface, lambda expression or method reference. The advantage is that you have the choice to select the decorators you need and nothing else.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Resilience4j 2 requires Java 17.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;// Create a CircuitBreaker with default configuration&#xA;CircuitBreaker circuitBreaker = CircuitBreaker.ofDefaults(&#34;backendService&#34;);&#xA;&#xA;// Create a Retry with default configuration&#xA;// 3 retry attempts and a fixed time interval between retries of 500ms&#xA;Retry retry = Retry.ofDefaults(&#34;backendService&#34;);&#xA;&#xA;// Create a Bulkhead with default configuration&#xA;Bulkhead bulkhead = Bulkhead.ofDefaults(&#34;backendService&#34;);&#xA;&#xA;Supplier&amp;lt;String&amp;gt; supplier = () -&amp;gt; backendService&#xA;  .doSomething(param1, param2);&#xA;&#xA;// Decorate your call to backendService.doSomething()&#xA;// with a Bulkhead, CircuitBreaker and Retry&#xA;// **note: you will need the resilience4j-all dependency for this&#xA;Supplier&amp;lt;String&amp;gt; decoratedSupplier = Decorators.ofSupplier(supplier)&#xA;  .withCircuitBreaker(circuitBreaker)&#xA;  .withBulkhead(bulkhead)&#xA;  .withRetry(retry)&#xA;  .decorate();&#xA;&#xA;// Execute the decorated supplier and recover from any exception&#xA;String result = Try.ofSupplier(decoratedSupplier)&#xA;  .recover(throwable -&amp;gt; &#34;Hello from Recovery&#34;).get();&#xA;&#xA;// When you don&#39;t want to decorate your lambda expression,&#xA;// but just execute it and protect the call by a CircuitBreaker.&#xA;String result = circuitBreaker&#xA;  .executeSupplier(backendService::doSomething);&#xA;&#xA;// You can also run the supplier asynchronously in a ThreadPoolBulkhead&#xA; ThreadPoolBulkhead threadPoolBulkhead = ThreadPoolBulkhead&#xA;  .ofDefaults(&#34;backendService&#34;);&#xA;&#xA;// The Scheduler is needed to schedule a timeout on a non-blocking CompletableFuture&#xA;ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(3);&#xA;TimeLimiter timeLimiter = TimeLimiter.of(Duration.ofSeconds(1));&#xA;&#xA;CompletableFuture&amp;lt;String&amp;gt; future = Decorators.ofSupplier(supplier)&#xA;    .withThreadPoolBulkhead(threadPoolBulkhead)&#xA;    .withTimeLimiter(timeLimiter, scheduler)&#xA;    .withCircuitBreaker(circuitBreaker)&#xA;    .withFallback(asList(TimeoutException.class, CallNotPermittedException.class, BulkheadFullException.class),&#xA;      throwable -&amp;gt; &#34;Hello from Recovery&#34;)&#xA;    .get().toCompletableFuture();&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;admonitionblock note&#34;&gt; &#xA;   &lt;table&gt; &#xA;    &lt;tbody&gt;&#xA;     &lt;tr&gt; &#xA;      &lt;td class=&#34;icon&#34;&gt; &#xA;       &lt;div class=&#34;title&#34;&gt;&#xA;        Note&#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;      &lt;td class=&#34;content&#34;&gt; With Resilience4j you don’t have to go all-in, you can &lt;a href=&#34;https://mvnrepository.com/artifact/io.github.resilience4j&#34;&gt;&lt;strong&gt;pick what you need&lt;/strong&gt;&lt;/a&gt;. &lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt;&#xA;   &lt;/table&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_documentation&#34;&gt;2. Documentation&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Setup and usage is described in our &lt;strong&gt;&lt;a href=&#34;https://resilience4j.readme.io/docs&#34;&gt;User Guide&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/resilience4j-docs-ja/resilience4j-docs-ja&#34;&gt;有志による日本語訳(非公式) Japanese translation by volunteers(Unofficial)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/lmhmhl/Resilience4j-Guides-Chinese&#34;&gt;这是Resilience4j的非官方中文文档 Chinese translation by volunteers(Unofficial)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_overview&#34;&gt;3. Overview&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Resilience4j provides several core modules:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;resilience4j-circuitbreaker: Circuit breaking&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;resilience4j-ratelimiter: Rate limiting&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;resilience4j-bulkhead: Bulkheading&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;resilience4j-retry: Automatic retrying (sync and async)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;resilience4j-timelimiter: Timeout handling&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;resilience4j-cache: Result caching&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;There are also add-on modules for metrics, Feign, Kotlin, Spring, Ratpack, Vertx, RxJava2 and more.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;admonitionblock note&#34;&gt; &#xA;   &lt;table&gt; &#xA;    &lt;tbody&gt;&#xA;     &lt;tr&gt; &#xA;      &lt;td class=&#34;icon&#34;&gt; &#xA;       &lt;div class=&#34;title&#34;&gt;&#xA;        Note&#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;      &lt;td class=&#34;content&#34;&gt; Find out full list of modules in our &lt;strong&gt;&lt;a href=&#34;https://resilience4j.readme.io/docs#section-modularization&#34;&gt;User Guide&lt;/a&gt;&lt;/strong&gt;. &lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt;&#xA;   &lt;/table&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;admonitionblock tip&#34;&gt; &#xA;   &lt;table&gt; &#xA;    &lt;tbody&gt;&#xA;     &lt;tr&gt; &#xA;      &lt;td class=&#34;icon&#34;&gt; &#xA;       &lt;div class=&#34;title&#34;&gt;&#xA;        Tip&#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;      &lt;td class=&#34;content&#34;&gt; For core modules package or &lt;code&gt;Decorators&lt;/code&gt; builder see &lt;strong&gt;&lt;a href=&#34;https://mvnrepository.com/artifact/io.github.resilience4j/resilience4j-all&#34;&gt;resilience4j-all&lt;/a&gt;&lt;/strong&gt;. &lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt;&#xA;   &lt;/table&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_resilience_patterns&#34;&gt;4. Resilience patterns&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;table class=&#34;tableblock frame-all grid-all stretch&#34;&gt; &#xA;   &lt;colgroup&gt; &#xA;    &lt;col style=&#34;width: 25%;&#34;&gt; &#xA;    &lt;col style=&#34;width: 25%;&#34;&gt; &#xA;    &lt;col style=&#34;width: 25%;&#34;&gt; &#xA;    &lt;col style=&#34;width: 25%;&#34;&gt; &#xA;   &lt;/colgroup&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th class=&#34;tableblock halign-left valign-top&#34;&gt;name&lt;/th&gt; &#xA;     &lt;th class=&#34;tableblock halign-left valign-top&#34;&gt;how does it work?&lt;/th&gt; &#xA;     &lt;th class=&#34;tableblock halign-left valign-top&#34;&gt;description&lt;/th&gt; &#xA;     &lt;th class=&#34;tableblock halign-left valign-top&#34;&gt;links&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;strong&gt;Retry&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;repeats failed executions&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Many faults are transient and may self-correct after a short delay.&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/resilience4j/resilience4j/master/#circuitbreaker-retry-fallback&#34;&gt;overview&lt;/a&gt;, &lt;a href=&#34;https://resilience4j.readme.io/docs/retry&#34;&gt;documentation&lt;/a&gt;, &lt;a href=&#34;https://resilience4j.readme.io/docs/getting-started-3#annotations&#34;&gt;Spring&lt;/a&gt;&lt;/p&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;strong&gt;Circuit Breaker&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;temporary blocks possible failures&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;When a system is seriously struggling, failing fast is better than making clients wait.&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/resilience4j/resilience4j/master/#circuitbreaker-retry-fallback&#34;&gt;overview&lt;/a&gt;, &lt;a href=&#34;https://resilience4j.readme.io/docs/circuitbreaker&#34;&gt;documentation&lt;/a&gt;, &lt;a href=&#34;https://resilience4j.readme.io/docs/feign&#34;&gt;Feign&lt;/a&gt;, &lt;a href=&#34;https://resilience4j.readme.io/docs/getting-started-3#annotations&#34;&gt;Spring&lt;/a&gt;&lt;/p&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;strong&gt;Rate Limiter&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;limits executions/period&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Limit the rate of incoming requests.&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/resilience4j/resilience4j/master/#ratelimiter&#34;&gt;overview&lt;/a&gt;, &lt;a href=&#34;https://resilience4j.readme.io/docs/ratelimiter&#34;&gt;documentation&lt;/a&gt;, &lt;a href=&#34;https://resilience4j.readme.io/docs/feign&#34;&gt;Feign&lt;/a&gt;, &lt;a href=&#34;https://resilience4j.readme.io/docs/getting-started-3#annotations&#34;&gt;Spring&lt;/a&gt;&lt;/p&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;strong&gt;Time Limiter&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;limits duration of execution&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Beyond a certain wait interval, a successful result is unlikely.&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;a href=&#34;https://resilience4j.readme.io/docs/timeout&#34;&gt;documentation&lt;/a&gt;, &lt;a href=&#34;https://resilience4j.readme.io/docs/getting-started-3#annotations&#34;&gt;Spring&lt;/a&gt;&lt;/p&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;strong&gt;Bulkhead&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;limits concurrent executions&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Resources are isolated into pools so that if one fails, the others will continue working.&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/resilience4j/resilience4j/master/#bulkhead&#34;&gt;overview&lt;/a&gt;, &lt;a href=&#34;https://resilience4j.readme.io/docs/bulkhead&#34;&gt;documentation&lt;/a&gt;, &lt;a href=&#34;https://resilience4j.readme.io/docs/getting-started-3#annotations&#34;&gt;Spring&lt;/a&gt;&lt;/p&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;strong&gt;Cache&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;memorizes a successful result&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Some proportion of requests may be similar.&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;a href=&#34;https://resilience4j.readme.io/docs/cache&#34;&gt;documentation&lt;/a&gt;&lt;/p&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;strong&gt;Fallback&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;provides an alternative result for failures&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Things will still fail - plan what you will do when that happens.&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/resilience4j/resilience4j/master/#circuitbreaker-retry-fallback&#34;&gt;Try::recover&lt;/a&gt;, &lt;a href=&#34;https://resilience4j.readme.io/docs/getting-started-3#section-annotations&#34;&gt;Spring&lt;/a&gt;, &lt;a href=&#34;https://resilience4j.readme.io/docs/feign&#34;&gt;Feign&lt;/a&gt;&lt;/p&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;em&gt;Above table is based on &lt;a href=&#34;https://github.com/App-vNext/Polly#resilience-policies&#34;&gt;Polly: resilience policies&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;admonitionblock note&#34;&gt; &#xA;   &lt;table&gt; &#xA;    &lt;tbody&gt;&#xA;     &lt;tr&gt; &#xA;      &lt;td class=&#34;icon&#34;&gt; &#xA;       &lt;div class=&#34;title&#34;&gt;&#xA;        Note&#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;      &lt;td class=&#34;content&#34;&gt; To find more information about resilience patterns check &lt;a href=&#34;https://raw.githubusercontent.com/resilience4j/resilience4j/master/#Talks&#34;&gt;&lt;strong&gt;Talks&lt;/strong&gt;&lt;/a&gt; section. Find out more about components in our &lt;strong&gt;&lt;a href=&#34;https://resilience4j.readme.io/docs/getting-started-2&#34;&gt;User Guide&lt;/a&gt;&lt;/strong&gt;. &lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt;&#xA;   &lt;/table&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_spring_boot&#34;&gt;5. Spring Boot&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Setup and usage in Spring Boot 2 is demonstrated &lt;a href=&#34;https://github.com/resilience4j/resilience4j-spring-boot2-demo&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_usage_examples&#34;&gt;6. Usage examples&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;circuitbreaker-retry-fallback&#34;&gt;6.1. CircuitBreaker, Retry and Fallback&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The following example shows how to decorate a lambda expression (Supplier) with a CircuitBreaker and how to retry the call at most 3 times when an exception occurs. You can configure the wait interval between retries and also configure a custom backoff algorithm.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The example uses Vavr’s Try Monad to recover from an exception and invoke another lambda expression as a fallback, when even all retries have failed.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;// Simulates a Backend Service&#xA;public interface BackendService {&#xA;    String doSomething();&#xA;}&#xA;&#xA;// Create a CircuitBreaker (use default configuration)&#xA;CircuitBreaker circuitBreaker = CircuitBreaker.ofDefaults(&#34;backendName&#34;);&#xA;// Create a Retry with at most 3 retries and a fixed time interval between retries of 500ms&#xA;Retry retry = Retry.ofDefaults(&#34;backendName&#34;);&#xA;&#xA;// Decorate your call to BackendService.doSomething() with a CircuitBreaker&#xA;Supplier&amp;lt;String&amp;gt; decoratedSupplier = CircuitBreaker&#xA;    .decorateSupplier(circuitBreaker, backendService::doSomething);&#xA;&#xA;// Decorate your call with automatic retry&#xA;decoratedSupplier = Retry&#xA;    .decorateSupplier(retry, decoratedSupplier);&#xA;&#xA;// Use of Vavr&#39;s Try to&#xA;// execute the decorated supplier and recover from any exception&#xA;String result = Try.ofSupplier(decoratedSupplier)&#xA;    .recover(throwable -&amp;gt; &#34;Hello from Recovery&#34;).get();&#xA;&#xA;// When you don&#39;t want to decorate your lambda expression,&#xA;// but just execute it and protect the call by a CircuitBreaker.&#xA;String result = circuitBreaker.executeSupplier(backendService::doSomething);&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_circuitbreaker_and_rxjava2&#34;&gt;6.1.1. CircuitBreaker and RxJava2&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;The following example shows how to decorate an Observable by using the custom RxJava operator.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;CircuitBreaker circuitBreaker = CircuitBreaker.ofDefaults(&#34;testName&#34;);&#xA;Observable.fromCallable(backendService::doSomething)&#xA;    .compose(CircuitBreakerOperator.of(circuitBreaker))&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;admonitionblock note&#34;&gt; &#xA;     &lt;table&gt; &#xA;      &lt;tbody&gt;&#xA;       &lt;tr&gt; &#xA;        &lt;td class=&#34;icon&#34;&gt; &#xA;         &lt;div class=&#34;title&#34;&gt;&#xA;          Note&#xA;         &lt;/div&gt; &lt;/td&gt; &#xA;        &lt;td class=&#34;content&#34;&gt; Resilience4j also provides RxJava operators for &lt;code&gt;RateLimiter&lt;/code&gt;, &lt;code&gt;Bulkhead&lt;/code&gt;, &lt;code&gt;TimeLimiter&lt;/code&gt; and &lt;code&gt;Retry&lt;/code&gt;. Find out more in our &lt;strong&gt;&lt;a href=&#34;https://resilience4j.readme.io/docs/getting-started-2&#34;&gt;User Guide&lt;/a&gt;&lt;/strong&gt;. &lt;/td&gt; &#xA;       &lt;/tr&gt; &#xA;      &lt;/tbody&gt;&#xA;     &lt;/table&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_circuitbreaker_and_spring_reactor&#34;&gt;6.1.2. CircuitBreaker and Spring Reactor&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;The following example shows how to decorate a Mono by using the custom Reactor operator.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;CircuitBreaker circuitBreaker = CircuitBreaker.ofDefaults(&#34;testName&#34;);&#xA;Mono.fromCallable(backendService::doSomething)&#xA;    .transformDeferred(CircuitBreakerOperator.of(circuitBreaker))&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;admonitionblock note&#34;&gt; &#xA;     &lt;table&gt; &#xA;      &lt;tbody&gt;&#xA;       &lt;tr&gt; &#xA;        &lt;td class=&#34;icon&#34;&gt; &#xA;         &lt;div class=&#34;title&#34;&gt;&#xA;          Note&#xA;         &lt;/div&gt; &lt;/td&gt; &#xA;        &lt;td class=&#34;content&#34;&gt; Resilience4j also provides Reactor operators for &lt;code&gt;RateLimiter&lt;/code&gt;, &lt;code&gt;Bulkhead&lt;/code&gt;, &lt;code&gt;TimeLimiter&lt;/code&gt; and &lt;code&gt;Retry&lt;/code&gt;. Find out more in our &lt;strong&gt;&lt;a href=&#34;https://resilience4j.readme.io/docs/getting-started-1&#34;&gt;User Guide&lt;/a&gt;&lt;/strong&gt;. &lt;/td&gt; &#xA;       &lt;/tr&gt; &#xA;      &lt;/tbody&gt;&#xA;     &lt;/table&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;ratelimiter&#34;&gt;6.2. RateLimiter&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The following example shows how to restrict the calling rate of some method to be not higher than 1 request/second.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;// Create a custom RateLimiter configuration&#xA;RateLimiterConfig config = RateLimiterConfig.custom()&#xA;    .timeoutDuration(Duration.ofMillis(100))&#xA;    .limitRefreshPeriod(Duration.ofSeconds(1))&#xA;    .limitForPeriod(1)&#xA;    .build();&#xA;// Create a RateLimiter&#xA;RateLimiter rateLimiter = RateLimiter.of(&#34;backendName&#34;, config);&#xA;&#xA;// Decorate your call to BackendService.doSomething()&#xA;Supplier&amp;lt;String&amp;gt; restrictedSupplier = RateLimiter&#xA;    .decorateSupplier(rateLimiter, backendService::doSomething);&#xA;&#xA;// First call is successful&#xA;Try&amp;lt;String&amp;gt; firstTry = Try.ofSupplier(restrictedSupplier);&#xA;assertThat(firstTry.isSuccess()).isTrue();&#xA;&#xA;// Second call fails, because the call was not permitted&#xA;Try&amp;lt;String&amp;gt; secondTry = Try.of(restrictedSupplier);&#xA;assertThat(secondTry.isFailure()).isTrue();&#xA;assertThat(secondTry.getCause()).isInstanceOf(RequestNotPermitted.class);&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;bulkhead&#34;&gt;6.3. Bulkhead&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;There are two isolation strategies and bulkhead implementations.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_semaphorebulkhead&#34;&gt;6.3.1. SemaphoreBulkhead&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;The following example shows how to decorate a lambda expression with a Bulkhead. A Bulkhead can be used to limit the amount of parallel executions. This bulkhead abstraction should work well across a variety of threading and io models. It is based on a semaphore, and unlike Hystrix, does not provide &#34;shadow&#34; thread pool option.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;// Create a custom Bulkhead configuration&#xA;BulkheadConfig config = BulkheadConfig.custom()&#xA;    .maxConcurrentCalls(150)&#xA;    .maxWaitDuration(100)&#xA;    .build();&#xA;&#xA;Bulkhead bulkhead = Bulkhead.of(&#34;backendName&#34;, config);&#xA;&#xA;Supplier&amp;lt;String&amp;gt; supplier = Bulkhead&#xA;    .decorateSupplier(bulkhead, backendService::doSomething);&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;threadpoolbulkhead&#34;&gt;6.3.2. ThreadPoolBulkhead&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;The following example shows how to use a lambda expression with a ThreadPoolBulkhead which uses a bounded queue and a fixed thread pool.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;// Create a custom ThreadPoolBulkhead configuration&#xA;ThreadPoolBulkheadConfig config = ThreadPoolBulkheadConfig.custom()&#xA;    .maxThreadPoolSize(10)&#xA;    .coreThreadPoolSize(2)&#xA;    .queueCapacity(20)&#xA;    .build();&#xA;&#xA;ThreadPoolBulkhead bulkhead = ThreadPoolBulkhead.of(&#34;backendName&#34;, config);&#xA;&#xA;// Decorate or execute immediately a lambda expression with a ThreadPoolBulkhead.&#xA;Supplier&amp;lt;CompletionStage&amp;lt;String&amp;gt;&amp;gt; supplier = ThreadPoolBulkhead&#xA;    .decorateSupplier(bulkhead, backendService::doSomething);&#xA;&#xA;CompletionStage&amp;lt;String&amp;gt; execution = bulkhead&#xA;    .executeSupplier(backendService::doSomething);&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;events&#34;&gt;7. Consume emitted events&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;code&gt;CircuitBreaker&lt;/code&gt;, &lt;code&gt;RateLimiter&lt;/code&gt;, &lt;code&gt;Cache&lt;/code&gt;, &lt;code&gt;Bulkhead&lt;/code&gt;, &lt;code&gt;TimeLimiter&lt;/code&gt; and &lt;code&gt;Retry&lt;/code&gt; components emit a stream of events. It can be consumed for logging, assertions and any other purpose.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_examples&#34;&gt;7.1. Examples&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;A &lt;code&gt;CircuitBreakerEvent&lt;/code&gt; can be a state transition, a circuit breaker reset, a successful call, a recorded error or an ignored error. All events contains additional information like event creation time and processing duration of the call. If you want to consume events, you have to register an event consumer.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;circuitBreaker.getEventPublisher()&#xA;    .onSuccess(event -&amp;gt; logger.info(...))&#xA;    .onError(event -&amp;gt; logger.info(...))&#xA;    .onIgnoredError(event -&amp;gt; logger.info(...))&#xA;    .onReset(event -&amp;gt; logger.info(...))&#xA;    .onStateTransition(event -&amp;gt; logger.info(...));&#xA;// Or if you want to register a consumer listening to all events, you can do:&#xA;circuitBreaker.getEventPublisher()&#xA;    .onEvent(event -&amp;gt; logger.info(...));&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;You can use RxJava or Spring Reactor Adapters to convert the &lt;code&gt;EventPublisher&lt;/code&gt; into a Reactive Stream. The advantage of a Reactive Stream is that you can use RxJava’s &lt;code&gt;observeOn&lt;/code&gt; operator to specify a different Scheduler that the CircuitBreaker will use to send notifications to its observers/consumers.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;RxJava2Adapter.toFlowable(circuitBreaker.getEventPublisher())&#xA;    .filter(event -&amp;gt; event.getEventType() == Type.ERROR)&#xA;    .cast(CircuitBreakerOnErrorEvent.class)&#xA;    .subscribe(event -&amp;gt; logger.info(...))&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;admonitionblock note&#34;&gt; &#xA;    &lt;table&gt; &#xA;     &lt;tbody&gt;&#xA;      &lt;tr&gt; &#xA;       &lt;td class=&#34;icon&#34;&gt; &#xA;        &lt;div class=&#34;title&#34;&gt;&#xA;         Note&#xA;        &lt;/div&gt; &lt;/td&gt; &#xA;       &lt;td class=&#34;content&#34;&gt; You can also consume events from other components. Find out more in our &lt;strong&gt;&lt;a href=&#34;https://resilience4j.readme.io/&#34;&gt;User Guide&lt;/a&gt;&lt;/strong&gt;. &lt;/td&gt; &#xA;      &lt;/tr&gt; &#xA;     &lt;/tbody&gt;&#xA;    &lt;/table&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_talks&#34;&gt;8. Talks&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;table class=&#34;tableblock frame-all grid-all stretch&#34;&gt; &#xA;   &lt;colgroup&gt; &#xA;    &lt;col style=&#34;width: 25%;&#34;&gt; &#xA;    &lt;col style=&#34;width: 25%;&#34;&gt; &#xA;    &lt;col style=&#34;width: 25%;&#34;&gt; &#xA;    &lt;col style=&#34;width: 25%;&#34;&gt; &#xA;   &lt;/colgroup&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;0:34&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=kR2sm1zelI4&#34;&gt;Battle of the Circuit Breakers: Resilience4J vs Istio&lt;/a&gt;&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Nicolas Frankel&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;GOTO Berlin&lt;/p&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;0:33&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=AwcjOhD91Q0&#34;&gt;Battle of the Circuit Breakers: Istio vs. Hystrix/Resilience4J&lt;/a&gt;&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Nicolas Frankel&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;JFuture&lt;/p&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;0:42&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=KosSsZEqS-k&amp;amp;t=157&#34;&gt;Resilience patterns in the post-Hystrix world&lt;/a&gt;&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Tomasz Skowroński&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Cloud Native Warsaw&lt;/p&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;0:52&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=NHVxrLb3jFI&#34;&gt;Building Robust and Resilient Apps Using Spring Boot and Resilience4j&lt;/a&gt;&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;David Caron&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;SpringOne&lt;/p&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;0:22&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=gvDvOWtPLVY&amp;amp;t=140&#34;&gt;Hystrix is dead, now what?&lt;/a&gt;&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Tomasz Skowroński&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;DevoxxPL&lt;/p&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_companies_that_use_resilience4j&#34;&gt;9. Companies that use Resilience4j&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;strong&gt;Deutsche Telekom&lt;/strong&gt; (In an application with over 400 million requests per day)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;strong&gt;AOL&lt;/strong&gt; (In an application with low latency requirements)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;strong&gt;Netpulse&lt;/strong&gt; (In a system with 40+ integrations)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;strong&gt;wescale.de&lt;/strong&gt; (In a B2B integration platform)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;strong&gt;Topia&lt;/strong&gt; (In an HR application built with microservices architecture)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;strong&gt;Auto Trader Group plc&lt;/strong&gt; (The largest Britain digital automotive marketplace)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;strong&gt;PlayStation Network&lt;/strong&gt; (A platform backend)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;strong&gt;TUI InfoTec GmbH&lt;/strong&gt; (Backend applications inside of reservation booking workflow streams for accommodations)&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_license&#34;&gt;10. License&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Copyright 2020 Robert Winkler, Bohdan Storozhuk, Mahmoud Romeh, Dan Maas and others&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;literalblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
</feed>