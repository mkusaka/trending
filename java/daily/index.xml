<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-21T01:39:14Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>prestodb/presto</title>
    <updated>2022-08-21T01:39:14Z</updated>
    <id>tag:github.com,2022-08-21:/prestodb/presto</id>
    <link href="https://github.com/prestodb/presto" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The official home of the Presto distributed SQL query engine for big data&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Presto &lt;a href=&#34;https://travis-ci.com/prestodb/presto&#34;&gt;&lt;img src=&#34;https://travis-ci.com/prestodb/presto.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Presto is a distributed SQL query engine for big data.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://prestodb.github.io/docs/current/&#34;&gt;User Manual&lt;/a&gt; for deployment instructions and end user documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mac OS X or Linux&lt;/li&gt; &#xA; &lt;li&gt;Java 8 Update 151 or higher (8u151+), 64-bit. Both Oracle JDK and OpenJDK are supported.&lt;/li&gt; &#xA; &lt;li&gt;Maven 3.3.9+ (for building)&lt;/li&gt; &#xA; &lt;li&gt;Python 2.4+ (for running with the launcher script)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building Presto&lt;/h2&gt; &#xA;&lt;p&gt;Presto is a standard Maven project. Simply run the following command from the project root directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./mvnw clean install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On the first build, Maven will download all the dependencies from the internet and cache them in the local repository (&lt;code&gt;~/.m2/repository&lt;/code&gt;), which can take a considerable amount of time. Subsequent builds will be faster.&lt;/p&gt; &#xA;&lt;p&gt;Presto has a comprehensive set of unit tests that can take several minutes to run. You can disable the tests when building:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./mvnw clean install -DskipTests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running Presto in your IDE&lt;/h2&gt; &#xA;&lt;h3&gt;Overview&lt;/h3&gt; &#xA;&lt;p&gt;After building Presto for the first time, you can load the project into your IDE and run the server. We recommend using &lt;a href=&#34;http://www.jetbrains.com/idea/&#34;&gt;IntelliJ IDEA&lt;/a&gt;. Because Presto is a standard Maven project, you can import it into your IDE using the root &lt;code&gt;pom.xml&lt;/code&gt; file. In IntelliJ, choose Open Project from the Quick Start box or choose Open from the File menu and select the root &lt;code&gt;pom.xml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;After opening the project in IntelliJ, double check that the Java SDK is properly configured for the project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open the File menu and select Project Structure&lt;/li&gt; &#xA; &lt;li&gt;In the SDKs section, ensure that a 1.8 JDK is selected (create one if none exist)&lt;/li&gt; &#xA; &lt;li&gt;In the Project section, ensure the Project language level is set to 8.0 as Presto makes use of several Java 8 language features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Presto comes with sample configuration that should work out-of-the-box for development. Use the following options to create a run configuration:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Main Class: &lt;code&gt;com.facebook.presto.server.PrestoServer&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;VM Options: &lt;code&gt;-ea -XX:+UseG1GC -XX:G1HeapRegionSize=32M -XX:+UseGCOverheadLimit -XX:+ExplicitGCInvokesConcurrent -Xmx2G -Dconfig=etc/config.properties -Dlog.levels-file=etc/log.properties&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Working directory: &lt;code&gt;$MODULE_WORKING_DIR$&lt;/code&gt; or &lt;code&gt;$MODULE_DIR$&lt;/code&gt;(Depends your version of IntelliJ)&lt;/li&gt; &#xA; &lt;li&gt;Use classpath of module: &lt;code&gt;presto-main&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The working directory should be the &lt;code&gt;presto-main&lt;/code&gt; subdirectory. In IntelliJ, using &lt;code&gt;$MODULE_DIR$&lt;/code&gt; accomplishes this automatically.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, the Hive plugin must be configured with location of your Hive metastore Thrift service. Add the following to the list of VM options, replacing &lt;code&gt;localhost:9083&lt;/code&gt; with the correct host and port (or use the below value if you do not have a Hive metastore):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-Dhive.metastore.uri=thrift://localhost:9083&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using SOCKS for Hive or HDFS&lt;/h3&gt; &#xA;&lt;p&gt;If your Hive metastore or HDFS cluster is not directly accessible to your local machine, you can use SSH port forwarding to access it. Setup a dynamic SOCKS proxy with SSH listening on local port 1080:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ssh -v -N -D 1080 server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then add the following to the list of VM options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-Dhive.metastore.thrift.client.socks-proxy=localhost:1080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running the CLI&lt;/h3&gt; &#xA;&lt;p&gt;Start the CLI to connect to the server and run SQL queries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;presto-cli/target/presto-cli-*-executable.jar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run a query to see the nodes in the cluster:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;SELECT * FROM system.runtime.nodes;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the sample configuration, the Hive connector is mounted in the &lt;code&gt;hive&lt;/code&gt; catalog, so you can run the following queries to show the tables in the Hive database &lt;code&gt;default&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;SHOW TABLES FROM hive.default;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Code Style&lt;/h2&gt; &#xA;&lt;p&gt;We recommend you use IntelliJ as your IDE. The code style template for the project can be found in the &lt;a href=&#34;https://github.com/airlift/codestyle&#34;&gt;codestyle&lt;/a&gt; repository along with our general programming and Java guidelines. In addition to those you should also adhere to the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alphabetize sections in the documentation source files (both in table of contents files and other regular documentation files). In general, alphabetize methods/variables/sections if such ordering already exists in the surrounding code.&lt;/li&gt; &#xA; &lt;li&gt;When appropriate, use the Java 8 stream API. However, note that the stream implementation does not perform well so avoid using it in inner loops or otherwise performance sensitive sections.&lt;/li&gt; &#xA; &lt;li&gt;Categorize errors when throwing exceptions. For example, PrestoException takes an error code as an argument, &lt;code&gt;PrestoException(HIVE_TOO_MANY_OPEN_PARTITIONS)&lt;/code&gt;. This categorization lets you generate reports so you can monitor the frequency of various failures.&lt;/li&gt; &#xA; &lt;li&gt;Ensure that all files have the appropriate license header; you can generate the license by running &lt;code&gt;mvn license:format&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Consider using String formatting (printf style formatting using the Java &lt;code&gt;Formatter&lt;/code&gt; class): &lt;code&gt;format(&#34;Session property %s is invalid: %s&#34;, name, value)&lt;/code&gt; (note that &lt;code&gt;format()&lt;/code&gt; should always be statically imported). Sometimes, if you only need to append something, consider using the &lt;code&gt;+&lt;/code&gt; operator.&lt;/li&gt; &#xA; &lt;li&gt;Avoid using the ternary operator except for trivial expressions.&lt;/li&gt; &#xA; &lt;li&gt;Use an assertion from Airlift&#39;s &lt;code&gt;Assertions&lt;/code&gt; class if there is one that covers your case rather than writing the assertion by hand. Over time we may move over to more fluent assertions like AssertJ.&lt;/li&gt; &#xA; &lt;li&gt;When writing a Git commit message, follow these &lt;a href=&#34;https://chris.beams.io/posts/git-commit/&#34;&gt;guidelines&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building the Documentation&lt;/h2&gt; &#xA;&lt;p&gt;To learn how to build the docs, see the &lt;a href=&#34;https://raw.githubusercontent.com/prestodb/presto/master/presto-docs/README.md&#34;&gt;docs README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building the Web UI&lt;/h2&gt; &#xA;&lt;p&gt;The Presto Web UI is composed of several React components and is written in JSX and ES6. This source code is compiled and packaged into browser-compatible JavaScript, which is then checked in to the Presto source code (in the &lt;code&gt;dist&lt;/code&gt; folder). You must have &lt;a href=&#34;https://nodejs.org/en/download/&#34;&gt;Node.js&lt;/a&gt; and &lt;a href=&#34;https://yarnpkg.com/en/&#34;&gt;Yarn&lt;/a&gt; installed to execute these commands. To update this folder after making changes, simply run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn --cwd presto-main/src/main/resources/webapp/src install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If no JavaScript dependencies have changed (i.e., no changes to &lt;code&gt;package.json&lt;/code&gt;), it is faster to run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn --cwd presto-main/src/main/resources/webapp/src run package&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To simplify iteration, you can also run in &lt;code&gt;watch&lt;/code&gt; mode, which automatically re-compiles when changes to source files are detected:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn --cwd presto-main/src/main/resources/webapp/src run watch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To iterate quickly, simply re-build the project in IntelliJ after packaging is complete. Project resources will be hot-reloaded and changes are reflected on browser refresh.&lt;/p&gt; &#xA;&lt;h2&gt;Release Notes&lt;/h2&gt; &#xA;&lt;p&gt;When authoring a pull request, the PR description should include its relevant release notes. Follow &lt;a href=&#34;https://github.com/prestodb/presto/wiki/Release-Notes-Guidelines&#34;&gt;Release Notes Guidelines&lt;/a&gt; when authoring release notes.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Rohit91singh9/Amazon-Interview</title>
    <updated>2022-08-21T01:39:14Z</updated>
    <id>tag:github.com,2022-08-21:/Rohit91singh9/Amazon-Interview</id>
    <link href="https://github.com/Rohit91singh9/Amazon-Interview" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Amazon Assessment Interview Questions&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>JSQLParser/JSqlParser</title>
    <updated>2022-08-21T01:39:14Z</updated>
    <id>tag:github.com,2022-08-21:/JSQLParser/JSqlParser</id>
    <link href="https://github.com/JSQLParser/JSqlParser" rel="alternate"></link>
    <summary type="html">&lt;p&gt;JSqlParser parses an SQL statement and translate it into a hierarchy of Java classes. The generated hierarchy can be navigated using the Visitor Pattern&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JSqlParser&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/JSQLParser/JSqlParser/actions/workflows/maven.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.com/JSQLParser/JSqlParser&#34;&gt;&lt;img src=&#34;https://travis-ci.com/JSQLParser/JSqlParser.svg?branch=master&#34; alt=&#34;Build Status (Legacy)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/r/JSQLParser/JSqlParser?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/JSQLParser/JSqlParser/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codacy.com/gh/JSQLParser/JSqlParser/dashboard?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=JSQLParser/JSqlParser&amp;amp;utm_campaign=Badge_Grade&#34;&gt;&lt;img src=&#34;https://app.codacy.com/project/badge/Grade/6f9a2d7eb98f45969749e101322634a1&#34; alt=&#34;Codacy Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://maven-badges.herokuapp.com/maven-central/com.github.jsqlparser/jsqlparser&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/com.github.jsqlparser/jsqlparser/badge.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.javadoc.io/doc/com.github.jsqlparser/jsqlparser&#34;&gt;&lt;img src=&#34;https://www.javadoc.io/badge/com.github.jsqlparser/jsqlparser.svg?sanitize=true&#34; alt=&#34;Javadocs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/JSQLParser/JSqlParser?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/JSQLParser/JSqlParser.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/JSQLParser/JSqlParser/context:java&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/grade/java/g/JSQLParser/JSqlParser.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;Code Quality: Java&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/JSQLParser/JSqlParser/alerts&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/alerts/g/JSQLParser/JSqlParser.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;Total Alerts&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Look here for more information and examples: &lt;a href=&#34;https://github.com/JSQLParser/JSqlParser/wiki&#34;&gt;https://github.com/JSQLParser/JSqlParser/wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;JSqlParser is dual licensed under &lt;strong&gt;LGPL V2.1&lt;/strong&gt; or &lt;strong&gt;Apache Software License, Version 2.0&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Discussion&lt;/h2&gt; &#xA;&lt;p&gt;Please provide feedback on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;API changes: extend visitor with return values (&lt;a href=&#34;https://github.com/JSQLParser/JSqlParser/issues/901&#34;&gt;https://github.com/JSQLParser/JSqlParser/issues/901&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;News&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Released version &lt;strong&gt;4.4&lt;/strong&gt; of JSqlParser&lt;/li&gt; &#xA; &lt;li&gt;The array parsing is the default behaviour. Square bracket quotation has to be enabled using a parser flag (&lt;strong&gt;CCJSqlParser.withSquareBracketQuotation&lt;/strong&gt;).&lt;/li&gt; &#xA; &lt;li&gt;due to an API change the version will be 3.0&lt;/li&gt; &#xA; &lt;li&gt;JSqlParser uses now Java 8 at the minimum&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More news can be found here: &lt;a href=&#34;https://github.com/JSQLParser/JSqlParser/wiki/News&#34;&gt;https://github.com/JSQLParser/JSqlParser/wiki/News&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Alternatives to JSqlParser?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.sqlparser.com/features/introduce.php?utm_source=github-jsqlparser&amp;amp;utm_medium=text-general&#34;&gt;&lt;strong&gt;General SQL Parser&lt;/strong&gt;&lt;/a&gt; looks pretty good, with extended SQL syntax (like PL/SQL and T-SQL) and java + .NET APIs. The tool is commercial (license available online), with a free download option.&lt;/p&gt; &#xA;&lt;h2&gt;JSqlParser&lt;/h2&gt; &#xA;&lt;p&gt;JSqlParser is a SQL statement parser. It translates SQLs in a traversable hierarchy of Java classes. JSqlParser is not limited to one database but provides support for a lot of specials of Oracle, SqlServer, MySQL, PostgreSQL ... To name some, it has support for Oracles join syntax using (+), PostgreSQLs cast syntax using ::, relational operators like != and so on.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;If you need help using JSqlParser feel free to file an issue or contact me.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;To help JSqlParser&#39;s development you are encouraged to provide&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;feedback&lt;/li&gt; &#xA; &lt;li&gt;bugreports&lt;/li&gt; &#xA; &lt;li&gt;pull requests for new features&lt;/li&gt; &#xA; &lt;li&gt;improvement requests&lt;/li&gt; &#xA; &lt;li&gt;fund new features or sponsor JSqlParser (&lt;a href=&#34;https://www.paypal.me/wumpz&#34;&gt;&lt;strong&gt;Sponsor&lt;/strong&gt;&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please write in English, since it&#39;s the language most of the dev team knows.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Any requests for examples or any particular documentation will be most welcome.&lt;/p&gt; &#xA;&lt;h2&gt;Extensions in the latest SNAPSHOT version 4.6&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;support for named windows in window expressions: &lt;code&gt;SELECT sum(c) OVER winName FROM mytable WINDOW winName AS (PARTITION BY pcol)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally, we have fixed many errors and improved the code quality and the test coverage.&lt;/p&gt; &#xA;&lt;h2&gt;Extensions of JSqlParser releases&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JSQLParser/JSqlParser/releases&#34;&gt;Release Notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Modifications before GitHub&#39;s release tagging are listed in the &lt;a href=&#34;https://github.com/JSQLParser/JSqlParser/wiki/Older-Releases&#34;&gt;Older Releases&lt;/a&gt; page.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building from the sources&lt;/h2&gt; &#xA;&lt;p&gt;As the project is a Maven project, building is rather simple by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mvn package&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since 4.2, alternatively Gradle can be used&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;gradle build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The project requires the following to build:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Maven (or Gradle)&lt;/li&gt; &#xA; &lt;li&gt;JDK 8 or later. The JAR will target JDK 8, but the version of the maven-compiler-plugin that JSqlParser uses requires JDK 8+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This will produce the jsqlparser-VERSION.jar file in the &lt;code&gt;target/&lt;/code&gt; directory (&lt;code&gt;build/libs/jsqlparser-VERSION.jar&lt;/code&gt; in case of Gradle).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;To build this project without using Maven or Gradle, one has to build the parser by JavaCC using the CLI options it provides.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Debugging through problems&lt;/h2&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://github.com/JSQLParser/JSqlParser/wiki/Examples-of-SQL-parsing#visualize-parsing&#34;&gt;Visualize Parsing&lt;/a&gt; section to learn how to run the parser in debug mode.&lt;/p&gt; &#xA;&lt;h2&gt;Source Code conventions&lt;/h2&gt; &#xA;&lt;p&gt;Recently a checkstyle process was integrated into the build process. JSqlParser follows the sun java format convention. There are no TABs allowed. Use spaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public void setUsingSelect(SubSelect usingSelect) {&#xA;    this.usingSelect = usingSelect;&#xA;    if (this.usingSelect != null) {&#xA;        this.usingSelect.setUseBrackets(false);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is a valid piece of source code:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;blocks without braces are not allowed&lt;/li&gt; &#xA; &lt;li&gt;after control statements (if, while, for) a whitespace is expected&lt;/li&gt; &#xA; &lt;li&gt;the opening brace should be in the same line as the control statement&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Maven Repository&lt;/h2&gt; &#xA;&lt;p&gt;JSQLParser is deployed at Sonatype open source maven repository. Starting from now I will deploy there. The first snapshot version there will be 0.8.5-SNAPSHOT. To use it this is the repository configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;repositories&amp;gt;&#xA;     &amp;lt;repository&amp;gt;&#xA;         &amp;lt;id&amp;gt;jsqlparser-snapshots&amp;lt;/id&amp;gt;&#xA;         &amp;lt;snapshots&amp;gt;&#xA;             &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;&#xA;         &amp;lt;/snapshots&amp;gt;&#xA;         &amp;lt;url&amp;gt;https://oss.sonatype.org/content/groups/public/&amp;lt;/url&amp;gt;&#xA;     &amp;lt;/repository&amp;gt;&#xA;&amp;lt;/repositories&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These repository releases will be synchronised to Maven Central. Snapshots remain at Sonatype.&lt;/p&gt; &#xA;&lt;p&gt;And this is the dependency declaration in your pom:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;&#x9;&amp;lt;groupId&amp;gt;com.github.jsqlparser&amp;lt;/groupId&amp;gt;&#xA;&#x9;&amp;lt;artifactId&amp;gt;jsqlparser&amp;lt;/artifactId&amp;gt;&#xA;&#x9;&amp;lt;version&amp;gt;4.4&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>