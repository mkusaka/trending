<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-13T01:39:29Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sparrowwallet/sparrow</title>
    <updated>2023-02-13T01:39:29Z</updated>
    <id>tag:github.com,2023-02-13:/sparrowwallet/sparrow</id>
    <link href="https://github.com/sparrowwallet/sparrow" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Desktop Bitcoin Wallet focused on security and privacy. Free and open source.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Sparrow Bitcoin Wallet&lt;/h1&gt; &#xA;&lt;p&gt;Sparrow is a modern desktop Bitcoin wallet application supporting most hardware wallets and built on common standards such as PSBT, with an emphasis on transparency and usability.&lt;/p&gt; &#xA;&lt;p&gt;More information (and release binaries) can be found at &lt;a href=&#34;https://sparrowwallet.com&#34;&gt;https://sparrowwallet.com&lt;/a&gt;. Release binaries are also available directly from &lt;a href=&#34;https://github.com/sparrowwallet/sparrow/releases&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://sparrowwallet.com/assets/images/control-your-sends.png&#34; alt=&#34;Sparrow Wallet&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;To clone this project, use&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git clone --recursive git@github.com:sparrowwallet/sparrow.git&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;or for those without SSH credentials:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git clone --recursive https://github.com/sparrowwallet/sparrow.git&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;In order to build, Sparrow requires Java 17 or higher to be installed. The release binaries are built with &lt;a href=&#34;https://github.com/adoptium/temurin18-binaries/releases/tag/jdk-18.0.1%2B10&#34;&gt;Eclipse Temurin 18.0.1+10&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Other packages may also be necessary to build depending on the platform. On Debian/Ubuntu systems:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;sudo apt install -y rpm fakeroot binutils&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Sparrow binaries can be built from source using&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;./gradlew jpackage&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that to build the Windows installer, you will need to install &lt;a href=&#34;https://github.com/wixtoolset/wix3/releases&#34;&gt;WiX&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When updating to the latest HEAD&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git pull --recurse-submodules&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The release binaries are reproducible from v1.5.0 onwards (pre codesigning and installer packaging). More detailed &lt;a href=&#34;https://raw.githubusercontent.com/sparrowwallet/sparrow/master/docs/reproducible.md&#34;&gt;instructions on reproducing the binaries&lt;/a&gt; are provided.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Video documentation of your build process uploaded to &lt;a href=&#34;https://bitcoinbinary.org/&#34;&gt;bitcoinbinary.org&lt;/a&gt; is appreciated. Alternatively check the site if you wish to see if someone else already verified the provided binaries.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;p&gt;If you prefer to run Sparrow directly from source, it can be launched from within the project directory with&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;./sparrow&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Java 17 or higher must be installed.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Sparrow has a number of command line options, for example to change its home folder or use testnet:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./sparrow -h&#xA;&#xA;Usage: sparrow [options]&#xA;  Options:&#xA;    --dir, -d&#xA;      Path to Sparrow home folder&#xA;    --help, -h&#xA;      Show usage&#xA;    --level, -l&#xA;      Set log level&#xA;      Possible Values: [ERROR, WARN, INFO, DEBUG, TRACE]      &#xA;    --network, -n&#xA;      Network to use&#xA;      Possible Values: [mainnet, testnet, regtest, signet]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As a fallback, the network (mainnet, testnet, regtest or signet) can also be set using an environment variable &lt;code&gt;SPARROW_NETWORK&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;export SPARROW_NETWORK=testnet&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;A final fallback which can be useful when running the Sparrow binary is to create a file called &lt;code&gt;network-testnet&lt;/code&gt; in the Sparrow home folder (see below) to configure the testnet network.&lt;/p&gt; &#xA;&lt;p&gt;Note that if you are connecting to an Electrum server when using testnet, that server will need to be running on testnet configuration as well.&lt;/p&gt; &#xA;&lt;p&gt;When not explicitly configured using the command line argument above, Sparrow stores its mainnet config file, log file and wallets in a home folder location appropriate to the operating system:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Location&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OSX&lt;/td&gt; &#xA;   &lt;td&gt;~/.sparrow&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;~/.sparrow&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;%APPDATA%/Sparrow&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Testnet, regtest and signet configurations (along with their wallets) are stored in subfolders to allow easy switching between networks.&lt;/p&gt; &#xA;&lt;h2&gt;Reporting Issues&lt;/h2&gt; &#xA;&lt;p&gt;Please use the &lt;a href=&#34;https://github.com/sparrowwallet/sparrow/issues&#34;&gt;Issues&lt;/a&gt; tab above to report an issue. If possible, look in the sparrow.log file in the configuration directory for information helpful in debugging.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Sparrow is licensed under the Apache 2 software licence.&lt;/p&gt; &#xA;&lt;h2&gt;GPG Key&lt;/h2&gt; &#xA;&lt;p&gt;The Sparrow release binaries here and on &lt;a href=&#34;https://sparrowwallet.com/download/&#34;&gt;sparrowwallet.com&lt;/a&gt; are signed using &lt;a href=&#34;https://keybase.io/craigraw&#34;&gt;craigraw&#39;s GPG key&lt;/a&gt;:&lt;br&gt; Fingerprint: D4D0D3202FC06849A257B38DE94618334C674B40&lt;br&gt; 64-bit: E946 1833 4C67 4B40&lt;/p&gt; &#xA;&lt;h2&gt;Credit&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://www.yourkit.com/images/yklogo.png&#34; alt=&#34;Yourkit&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sparrow Wallet uses the &lt;a href=&#34;https://www.yourkit.com/java/profiler/&#34;&gt;Yourkit Java Profiler&lt;/a&gt; to profile and improve performance. YourKit supports open source projects with useful tools for monitoring and profiling Java and .NET applications.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Riotphobia/Mundo</title>
    <updated>2023-02-13T01:39:29Z</updated>
    <id>tag:github.com,2023-02-13:/Riotphobia/Mundo</id>
    <link href="https://github.com/Riotphobia/Mundo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mundo is a small app that allows you to recover your Summoner name&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mundo&lt;/h1&gt; &#xA;&lt;p&gt;Mundo is a small app that allows you to recover a Summomer name from a banned account&lt;/p&gt; &#xA;&lt;h2&gt;Mundo changes name when he pleases&lt;/h2&gt; &#xA;&lt;p&gt;software requirements&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;java 8&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/4pNO8uA.png&#34; alt=&#34;preview&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Discord&lt;/h3&gt; &#xA;&lt;p&gt;Join the Riotphobia &lt;a href=&#34;https://discord.gg/JRDwxFxW7m&#34;&gt;discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Download&lt;/h3&gt; &#xA;&lt;p&gt;The latest pre-compiled Mundo version can be found in the &lt;a href=&#34;https://github.com/Riotphobia/Mundo/releases&#34;&gt;Release Section&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Running Mundo&lt;/h3&gt; &#xA;&lt;p&gt;Mundo is not a directory, its a &lt;code&gt;.jar&lt;/code&gt; file. If for whatever reason a directory opens rather than an application the easiest solution is to download, and run &lt;code&gt;Jarfix&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Osmerion/OneTrickPony</title>
    <updated>2023-02-13T01:39:29Z</updated>
    <id>tag:github.com,2023-02-13:/Osmerion/OneTrickPony</id>
    <link href="https://github.com/Osmerion/OneTrickPony" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OneTrickPony is a modern Java library that implements support for One-Time Passwords. Built-In support is provided for the HOTP (RFC 4226) and TOTP (RFC 6238) algorithms.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OneTrickPony&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Osmerion/OneTrickPony/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-BSD-blue.svg?style=flat-square&amp;amp;label=License&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/com.osmerion.onetrickpony/onetrickpony&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.osmerion.onetrickpony/onetrickpony.svg?style=flat-square&amp;amp;label=Maven%20Central&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://javadoc.io/doc/com.osmerion.onetrickpony/onetrickpony&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.osmerion.onetrickpony/onetrickpony.svg?style=flat-square&amp;amp;label=JavaDoc&amp;amp;color=blue&#34; alt=&#34;JavaDoc&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/Java-11-green.svg?style=flat-square&amp;amp;color=b07219&amp;amp;logo=java&#34; alt=&#34;Java&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;OneTrickPony is a modern Java library that implements support for One-Time Passwords (OTPs). The library requires Java 11 or later and is fully compatible with Java&#39;s module system. It has zero runtime dependencies on external libraries. Built-In support is provided for the HOTP (&lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc4226&#34;&gt;RFC&amp;nbsp;4226&lt;/a&gt;) and TOTP (&lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc6238&#34;&gt;RFC&amp;nbsp;6238&lt;/a&gt;) algorithms.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;OneTrickPony provides support for OTPs via so-called &lt;em&gt;engines&lt;/em&gt;. The following engines are provided by the library.&lt;/p&gt; &#xA;&lt;h3&gt;HMAC-based One-Time Passwords (HOTPs)&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;HOTPEngine&lt;/code&gt; provides support for HOTPs as specified by RFC 4226.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;HOTPEngine engine = HOTPEngine.builder()&#xA;    .withChecksum(false)&#xA;    .withCodeDigits(6)&#xA;    .withMacAlgorithm(&#34;HmacSHA1&#34;)&#xA;    .withTruncationOffset(HOTPEngine.USE_DYNAMIC_TRUNCATION)&#xA;    .build();&#xA;&#xA;byte[] secret = &#34;12345678901234567890&#34;.getBytes(StandardCharsets.UTF_8);&#xA;int counter = 0;&#xA;&#xA;String otp = engine.generate(secret, counter);&#xA;System.out.println(otp); // 755224&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The engine&#39;s properties can be configured through a builder. All properties are initialized with reasonable defaults that are sufficient for most use-cases.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Checksum&lt;/td&gt; &#xA;   &lt;td&gt;Whether to add an additional checksum digit to the OTP&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Code digits&lt;/td&gt; &#xA;   &lt;td&gt;The number of code digits of the OTP&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;6&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MAC algorithm&lt;/td&gt; &#xA;   &lt;td&gt;The MAC algorithm to use to generate the hash for the OTP&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;HmacSHA1&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Truncation offset&lt;/td&gt; &#xA;   &lt;td&gt;The offset that will be used to extract the bytes used for the OTP from the generated hash&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;USE_DYNAMIC_TRUNCATION&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The MAC algorithm is used to retrieve an &lt;a href=&#34;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/javax/crypto/Mac.html&#34;&gt;javax.crypto.Mac&lt;/a&gt; instance. Check the documentation of your Java distribution for a list of supported algorithms.&lt;/p&gt; &#xA;&lt;h3&gt;Time-based One-Time Passwords (TOTPs)&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;TOTPEngine&lt;/code&gt; provides support for TOTPs as specified by RFC 6238.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;TOTPEngine engine = TOTPEngine.builder()&#xA;    .configureHOTPEngine(hotpBuilder -&amp;gt; {&#xA;        // Use the builder to configure the underlying HOTPEngine&#xA;    })&#xA;    .withTimeStep(Duration.ofSeconds(30))&#xA;    .build();&#xA;&#xA;byte[] secret = &#34;12345678901234567890&#34;.getBytes(StandardCharsets.UTF_8);&#xA;Instant time = Instant.parse(&#34;1970-01-01T00:00:59.00Z&#34;);&#xA;&#xA;String otp = engine.generate(secret, time);&#xA;System.out.println(otp); // 287082&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This engine uses an underlying &lt;code&gt;HOTPEngine&lt;/code&gt; to generate the OTP. Both, the engine itself and the underlying engine can be configured through a builder.&lt;/p&gt; &#xA;&lt;p&gt;The engine has a single additional property to configure the time step for the generated OTPs. It defaults to a time step of 30&amp;nbsp;seconds.&lt;/p&gt; &#xA;&lt;h3&gt;Bonus: The Base32 Encoding Scheme&lt;/h3&gt; &#xA;&lt;p&gt;As secrets for OTPs are commonly shared using the Base32 encoding scheme, OneTrickPony also provides a &lt;code&gt;Base32&lt;/code&gt; class analogous to Java&#39;s &lt;code&gt;java.util.Base64&lt;/code&gt; class. This class implements support for Base32 en- and decoding as specified by &lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc4648&#34;&gt;RFC&amp;nbsp;6238&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Retrieve reusable en- and decoder instances&#xA;Base32.Encoder encoder = Base32.getEncoder();&#xA;Base32.Decoder decoder = Base32.getDecoder();&#xA;&#xA;// Encoding&#xA;byte[] base32Data = encoder.encode(&#34;foobar&#34;.getBytes(StandardCharset.UTF_8));&#xA;System.out.println(new String(base32Data, StandardCharsets.UTF_8)); // MZXW6YTBOI======&#xA;&#xA;// Decoding&#xA;byte[] decodedData = decoder.decode(base32Data);&#xA;System.out.println(new String(decodedData, StandardCharsets.UTF_8)); // foobar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building from source&lt;/h2&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;This project uses &lt;a href=&#34;https://docs.gradle.org/7.6/userguide/toolchains.html&#34;&gt;Gradle&#39;s toolchain support&lt;/a&gt; to detect and select the JDKs required to run the build. Please refer to the build scripts to find out which toolchains are requested.&lt;/p&gt; &#xA;&lt;p&gt;An installed JDK 1.8 (or later) is required to use Gradle.&lt;/p&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;p&gt;Once the setup is complete, invoke the respective Gradle tasks using the following command on Unix/macOS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew &amp;lt;tasks&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or the following command on Windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gradlew &amp;lt;tasks&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Important Gradle tasks to remember are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;clean&lt;/code&gt; - clean build results&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;build&lt;/code&gt; - assemble and test the Java library&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;publishToMavenLocal&lt;/code&gt; - build and install all public artifacts to the local maven repository&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally &lt;code&gt;tasks&lt;/code&gt; may be used to print a list of all available tasks.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;OneTrickPony is available under the terms of the &lt;a href=&#34;https://spdx.org/licenses/BSD-3-Clause.html&#34;&gt;3-Clause BSD license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright (c) 2023 Leon Linhart,&#xA;All rights reserved.&#xA;&#xA;Redistribution and use in source and binary forms, with or without&#xA;modification, are permitted provided that the following conditions are met:&#xA;&#xA;1. Redistributions of source code must retain the above copyright notice,&#xA;   this list of conditions and the following disclaimer.&#xA;&#xA;2. Redistributions in binary form must reproduce the above copyright notice,&#xA;   this list of conditions and the following disclaimer in the documentation&#xA;   and/or other materials provided with the distribution.&#xA;&#xA;3. Neither the name of the copyright holder nor the names of its contributors&#xA;   may be used to endorse or promote products derived from this software&#xA;   without specific prior written permission.&#xA;&#xA;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &#34;AS IS&#34;&#xA;AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE&#xA;IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE&#xA;ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE&#xA;LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR&#xA;CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF&#xA;SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS&#xA;INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN&#xA;CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#xA;ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE&#xA;POSSIBILITY OF SUCH DAMAGE.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>