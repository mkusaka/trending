<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-04T01:32:17Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sanyarnd/java-course-2023</title>
    <updated>2023-10-04T01:32:17Z</updated>
    <id>tag:github.com,2023-10-04:/sanyarnd/java-course-2023</id>
    <link href="https://github.com/sanyarnd/java-course-2023" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>tsaol/Web3-serverless-analytics-on-aws</title>
    <updated>2023-10-04T01:32:17Z</updated>
    <id>tag:github.com,2023-10-04:/tsaol/Web3-serverless-analytics-on-aws</id>
    <link href="https://github.com/tsaol/Web3-serverless-analytics-on-aws" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;strong&gt;Web3&lt;/strong&gt; &lt;strong&gt;Serverless&lt;/strong&gt; Analytics on AWS&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tsaol/Web3-serverless-analytics-on-aws/main/README_CN.md&#34;&gt;Web3 无服务分析 中文版本&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Goals&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;It is a workshop for use Ethereum analysis use case to walk you through how to use aws serverless services to analyze blockchain data. this workshop provides the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Host an Ethereum full node on AWS EC2.&lt;/li&gt; &#xA; &lt;li&gt;Process data using Lambda from Ethereum full node and then write into kinesis.&lt;/li&gt; &#xA; &lt;li&gt;Streaming data ingestion from kinesis to data warehouse RedShift.&lt;/li&gt; &#xA; &lt;li&gt;Visual analysis of Ethereum transaction data stored in RedShift.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;strong&gt;AWS Services Including&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;EC2 Graviton&lt;/li&gt; &#xA; &lt;li&gt;Kinesis Data Stream&lt;/li&gt; &#xA; &lt;li&gt;RedShift Serverless&lt;/li&gt; &#xA; &lt;li&gt;QuickSight&lt;/li&gt; &#xA; &lt;li&gt;Lambda&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Architecture Diagram&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tsaol/Web3-serverless-analytics-on-aws/main/assets/architecture.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;step-by-step&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Set up an Ethereum FullNode on EC2 for sync Ethereum Mainnet data.&lt;/li&gt; &#xA; &lt;li&gt;Extract bock data to kinesis using Ethereum ETL.&lt;/li&gt; &#xA; &lt;li&gt;Process the data using lambda and deliver processed message to another kinesis.&lt;/li&gt; &#xA; &lt;li&gt;Ingestion data from kinesis data stream to RedShift Serverless using streaming ingestion.&lt;/li&gt; &#xA; &lt;li&gt;Query data using QuickSight.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;1. Fetching Ethereum Block Data&lt;/h2&gt; &#xA;&lt;p&gt;Ethereum from Proof of Work (PoW) to Proof of Stake (PoS) on September 2022. In order to deploy full nodes we need both execution client and consensus client.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;* **Instance Type** : m6g.2xlarge&#xA;* **OS**: Ubuntu 20 TSL&#xA;* **Geth** : v1.11.6 stable-ea9e62ca-linux-arm64&#xA;* **Lighthouse** : lighthouse-v4.1.0-aarch64-linux-gnu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;1.1 &lt;strong&gt;execution client&lt;/strong&gt;: &lt;strong&gt;Geth&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Installing Geth on Ubuntu&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo add-apt-repository ppa:ethereum/ethereum&#xA;sudo apt-get update -y&#xA;sudo apt-get upgrade -y&#xA;sudo apt-get install ethereum -y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start Geth process&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/usr/bin/geth --authrpc.addr localhost --authrpc.port 8551 --authrpc.vhosts localhost --authrpc.jwtsecret /tmp/jwtsecret --syncmode snap --http --http.api personal,eth,net,web3,txpool --http.corsdomain *&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;1.2 &lt;strong&gt;consensus client:lighthouse&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~ curl -LO https://github.com/sigp/lighthouse/releases/download/v4.0.1/lighthouse-v4.0.1-x86_64-unknown-linux-gnu.tar.gz &#xA;tar -xvf lighthouse-v4.0.1-x86_64-unknown-linux-gnu.tar.gz`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start Lighthouse process&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lighthouse bn --network mainnet --execution-endpoint http://localhost:8551 --execution-jwt /tmp/jwtsecret --checkpoint-sync-url=https://mainnet.checkpoint.sigp.io  --disable-deposit-contract-sync&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;1.3 &lt;strong&gt;interacting with the Geth&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; geth attach &amp;lt;datadir&amp;gt;/geth.ipc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;1.4 &lt;strong&gt;check eth.syncing status&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;eth.syncing&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;1.5 &lt;strong&gt;eth.syncing&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;When the synchronization is complete, the terminal can query the last blocknumber&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; eth.blockNumber&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;strong&gt;2. Extract block data to kinesis&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;2.1 Create Kinesis Data Streaming&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create Kinesis &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;blockchain-kinesis-t&lt;/li&gt; &#xA;   &lt;li&gt;blockchain-kinesis 2.2 Process data using lambda(python 3.8)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import json&#xA;import time&#xA;import base64&#xA;import boto3&#xA;import datetime;&#xA;kinesis_client = boto3.client(&#39;kinesis&#39;)&#xA;&#xA;def lambda_handler(event, context):&#xA;    result_records=[]&#xA;    start_time = time.time() &#xA;    for record in event[&#39;Records&#39;]:&#xA;        #Kinesis data is base64 encoded so decode here&#xA;        payload=base64.b64decode(record[&#34;kinesis&#34;][&#34;data&#34;])&#xA;        b_value = json.loads(payload)       &#xA;        pk = str(datetime.datetime.now().timestamp())&#xA;        print (&#34;pk is &#34; + str(pk))&#xA;        result_event = json.dumps(b_value).encode(&#39;utf8&#39;)&#xA;        #print(result_event)        &#xA;        package_data = {&#39;Data&#39; :result_event,&#39;PartitionKey&#39;:pk}&#xA;        result_records.append(package_data)&#xA;        &#xA;        &#xA;    response = kinesis_client.put_records(&#xA;        StreamName=&#39;blockchain-kinesis&#39;,&#xA;        Records=result_records&#xA;    )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Installing Ethereum ETL&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;sudo apt install python3-pip&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Extract data from nodes to Kinesis using EthereumETL&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2.2 Ethereum ETL &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Extract data to kiniesis&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code&gt;ethereumetl stream  -e block,transaction,token_transfer  --start-block 17277219 \&#xA;--provider-uri file:///home/ubuntu/.ethereum/geth.ipc \&#xA;--output=kinesis://blockchain-kinesis-t&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;2.2 Query the data entered into kinesis &lt;img src=&#34;https://raw.githubusercontent.com/tsaol/Web3-serverless-analytics-on-aws/main/assets/kinesis-1.jpg&#34; alt=&#34;&#34;&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;3. ingestion data to RedShift&lt;/h2&gt; &#xA;&lt;p&gt;3.1 Create a materialized view for streaming ingestion Create an external schema to map the data from Kinesis Data Streams to an Amazon Redshift :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CREATE EXTERNAL SCHEMA kdsblockchain&#xA;FROM KINESIS&#xA;IAM_ROLE &#39;arn:aws:iam::0123456789:role/blockchain-ana-redshift-role&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create the materialized view for data ingestion&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CREATE MATERIALIZED VIEW blocks_view AUTO REFRESH YES AS&#xA;SELECT approximate_arrival_timestamp,&#xA;refresh_time,&#xA;JSON_EXTRACT_PATH_TEXT(FROM_VARBYTE(kinesis_data, &#39;utf-8&#39;),&#39;type&#39;)::TEXT as type,&#xA;JSON_EXTRACT_PATH_TEXT(FROM_VARBYTE(kinesis_data, &#39;utf-8&#39;),&#39;number&#39;)::BIGINT as number,&#xA;JSON_EXTRACT_PATH_TEXT(FROM_VARBYTE(kinesis_data, &#39;utf-8&#39;),&#39;hash&#39;)::TEXT as hash,&#xA;JSON_EXTRACT_PATH_TEXT(FROM_VARBYTE(kinesis_data, &#39;utf-8&#39;),&#39;parent_hash&#39;)::TEXT as parent_hash,&#xA;JSON_EXTRACT_PATH_TEXT(FROM_VARBYTE(kinesis_data, &#39;utf-8&#39;),&#39;nonce&#39;)::TEXT as nonce,&#xA;JSON_EXTRACT_PATH_TEXT(FROM_VARBYTE(kinesis_data, &#39;utf-8&#39;),&#39;sha3_uncles&#39;)::TEXT as sha3_uncles,&#xA;JSON_EXTRACT_PATH_TEXT(FROM_VARBYTE(kinesis_data, &#39;utf-8&#39;),&#39;logs_bloom&#39;)::TEXT as logs_bloom,&#xA;JSON_EXTRACT_PATH_TEXT(FROM_VARBYTE(kinesis_data, &#39;utf-8&#39;),&#39;transactions_root&#39;)::TEXT as transactions_root,&#xA;JSON_EXTRACT_PATH_TEXT(FROM_VARBYTE(kinesis_data, &#39;utf-8&#39;),&#39;state_root&#39;)::TEXT as state_root,&#xA;JSON_EXTRACT_PATH_TEXT(FROM_VARBYTE(kinesis_data, &#39;utf-8&#39;),&#39;receipts_root&#39;)::TEXT as receipts_root,&#xA;JSON_EXTRACT_PATH_TEXT(FROM_VARBYTE(kinesis_data, &#39;utf-8&#39;),&#39;miner&#39;)::TEXT as miner,&#xA;JSON_EXTRACT_PATH_TEXT(FROM_VARBYTE(kinesis_data, &#39;utf-8&#39;),&#39;difficulty&#39;)::NUMERIC(38) as difficulty,&#xA;JSON_EXTRACT_PATH_TEXT(FROM_VARBYTE(kinesis_data, &#39;utf-8&#39;),&#39;total_difficulty&#39;)::NUMERIC(38) as total_difficulty,&#xA;JSON_EXTRACT_PATH_TEXT(FROM_VARBYTE(kinesis_data, &#39;utf-8&#39;),&#39;size&#39;)::BIGINT as size,&#xA;JSON_EXTRACT_PATH_TEXT(FROM_VARBYTE(kinesis_data, &#39;utf-8&#39;),&#39;extra_data&#39;)::TEXT as extra_data,&#xA;JSON_EXTRACT_PATH_TEXT(FROM_VARBYTE(kinesis_data, &#39;utf-8&#39;),&#39;gas_limit&#39;)::BIGINT as gas_limit,&#xA;JSON_EXTRACT_PATH_TEXT(FROM_VARBYTE(kinesis_data, &#39;utf-8&#39;),&#39;gas_used&#39;)::BIGINT as gas_used,&#xA;JSON_EXTRACT_PATH_TEXT(FROM_VARBYTE(kinesis_data, &#39;utf-8&#39;),&#39;timestamp&#39;)::INT as timestamp,&#xA;JSON_EXTRACT_PATH_TEXT(FROM_VARBYTE(kinesis_data, &#39;utf-8&#39;),&#39;transaction_count&#39;)::BIGINT as transaction_count,&#xA;JSON_EXTRACT_PATH_TEXT(FROM_VARBYTE(kinesis_data, &#39;utf-8&#39;),&#39;item_id&#39;)::TEXT as item_id,&#xA;JSON_EXTRACT_PATH_TEXT(FROM_VARBYTE(kinesis_data, &#39;utf-8&#39;),&#39;item_timestamp&#39;)::TEXT as item_timestamp&#xA;FROM kdsblockchain.&#34;blockchain-kinesis&#34; where JSON_EXTRACT_PATH_TEXT(FROM_VARBYTE(kinesis_data, &#39;utf-8&#39;),&#39;type&#39;) in (&#39;block&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Data is ingested to RedShfit using Redshfit Stream Ingestion&lt;/p&gt; &#xA;&lt;p&gt;3.3 Query Data through Redshfit Query editor &lt;img src=&#34;https://raw.githubusercontent.com/tsaol/Web3-serverless-analytics-on-aws/main/assets/redshift-data.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;4. Query data using QuickSight&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tsaol/Web3-serverless-analytics-on-aws/main/assets/quicksight.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Current block height.&lt;/li&gt; &#xA; &lt;li&gt;Popular erc20 addresses in time window.&lt;/li&gt; &#xA; &lt;li&gt;Blocks per minute and gas consumption.&lt;/li&gt; &#xA; &lt;li&gt;top 10 transfer out address.&lt;/li&gt; &#xA; &lt;li&gt;top 10 transfer in address .&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>NextAlone/Nagram</title>
    <updated>2023-10-04T01:32:17Z</updated>
    <id>tag:github.com,2023-10-04:/NextAlone/Nagram</id>
    <link href="https://github.com/NextAlone/Nagram" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The third-party Telegram android app.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nagram&lt;/h1&gt; &#xA;&lt;p&gt;Nagram is a third-party Telegram client based on &lt;a href=&#34;https://github.com/NekoX-Dev/NekoX&#34;&gt;NekoX&lt;/a&gt; with some modifications.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Official Site: &lt;a href=&#34;https://nextalone.xyz&#34;&gt;https://nextalone.xyz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Telegram Update Channel: &lt;a href=&#34;https://t.me/nagram_channel&#34;&gt;https://t.me/nagram_channel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Releases: &lt;a href=&#34;https://github.com/NextAlone/Nagram/releases&#34;&gt;https://github.com/NextAlone/Nagram/releases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Issues here: &lt;a href=&#34;https://github.com/NextAlone/Nagram/issues&#34;&gt;https://github.com/NextAlone/Nagram/issues&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Additional feature over Nagram&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Nice icon (thanks to MaitungTM)&lt;/li&gt; &#xA; &lt;li&gt;Combine message&lt;/li&gt; &#xA; &lt;li&gt;Editable text style&lt;/li&gt; &#xA; &lt;li&gt;Forced copy&lt;/li&gt; &#xA; &lt;li&gt;Invert reply&lt;/li&gt; &#xA; &lt;li&gt;Quick reply in longClick menu (thanks to @blxueya)&lt;/li&gt; &#xA; &lt;li&gt;Undo and Redo&lt;/li&gt; &#xA; &lt;li&gt;Scrollable chat preview (thanks to TeleTux)&lt;/li&gt; &#xA; &lt;li&gt;Noise suppress and voice enhance (thanks to )&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;NekoX Changes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Most of Nekogram&#39;s features&lt;/li&gt; &#xA; &lt;li&gt;Unlimited login accounts&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Proxy&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Built-in VMess, Shadowsocks, SSR, Trojan-GFW proxies support (No longer maintained)&lt;/li&gt; &#xA;   &lt;li&gt;Built-in public proxy (WebSocket relay via Cloudflare CDN), &lt;a href=&#34;https://github.com/arm64v8a/NekoXProxy&#34;&gt;documentation and for PC&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Proxy subscription support&lt;/li&gt; &#xA;   &lt;li&gt;Ipv6 MTProxy support&lt;/li&gt; &#xA;   &lt;li&gt;Able to parse all proxy subscription format: SIP008, ssr, v2rayN, vmess1, shit ios app formats, clash config and more&lt;/li&gt; &#xA;   &lt;li&gt;Proxies import and export, remarks, speed measurement, sorting, delete unusable nodes, etc&lt;/li&gt; &#xA;   &lt;li&gt;Scan the QR code (any link, can add a proxy)&lt;/li&gt; &#xA;   &lt;li&gt;The ( vmess / vmess1 / ss / ssr / trojan ) proxy link in the message can be clicked&lt;/li&gt; &#xA;   &lt;li&gt;Allow auto-disabling proxy when VPN is enabled&lt;/li&gt; &#xA;   &lt;li&gt;Proxy automatic switcher&lt;/li&gt; &#xA;   &lt;li&gt;Don&#39;t alert &#34;Proxy unavailable&#34; for non-current account&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Stickers&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Custom &lt;a href=&#34;https://github.com/NekoX-Dev/NekoX/wiki/emoji&#34;&gt;Emoji packs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Add stickers without sticker pack&lt;/li&gt; &#xA;   &lt;li&gt;Sticker set list backup / restore / share&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Internationalization&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;OpenCC Chinese Convert&lt;/li&gt; &#xA;   &lt;li&gt;Full InstantView translation support&lt;/li&gt; &#xA;   &lt;li&gt;Translation support for selected text on input and in messages&lt;/li&gt; &#xA;   &lt;li&gt;Google Cloud Translate / Yandex.Translate support&lt;/li&gt; &#xA;   &lt;li&gt;Force English emoji keywords to be loaded&lt;/li&gt; &#xA;   &lt;li&gt;Persian calendar support&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Additional Options&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Option to disable vibration&lt;/li&gt; &#xA;   &lt;li&gt;Dialog sorting is optional &#34;Unread and can be prioritized for reminding&#34; etc&lt;/li&gt; &#xA;   &lt;li&gt;Option to skip &#34;regret within five seconds&#34;&lt;/li&gt; &#xA;   &lt;li&gt;Option to not send comment first when forwarding&lt;/li&gt; &#xA;   &lt;li&gt;Option to use nekox chat input menu: replace record button with a menu which contains an switch to control link preview (enabled by default)&lt;/li&gt; &#xA;   &lt;li&gt;Option to disable link preview by default: to prevent the server from knowing that the link is shared through Telegram.&lt;/li&gt; &#xA;   &lt;li&gt;Option to ignore Android-only content restrictions (except for the Play Store version).&lt;/li&gt; &#xA;   &lt;li&gt;Custom cache directory (supports external storage)&lt;/li&gt; &#xA;   &lt;li&gt;Custom server (official, test DC)&lt;/li&gt; &#xA;   &lt;li&gt;Option to block others from starting a secret chat with you&lt;/li&gt; &#xA;   &lt;li&gt;Option to disable trending&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Additional Actions&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Allow clicking on links in self profile&lt;/li&gt; &#xA;   &lt;li&gt;Delete all messages in group&lt;/li&gt; &#xA;   &lt;li&gt;Unblock all users support&lt;/li&gt; &#xA;   &lt;li&gt;Login via QR code&lt;/li&gt; &#xA;   &lt;li&gt;Scan and confirm the login QR code directly&lt;/li&gt; &#xA;   &lt;li&gt;Allow clearing app data&lt;/li&gt; &#xA;   &lt;li&gt;Proxies, groups, channels, sticker packs are able to be shared as QR codes&lt;/li&gt; &#xA;   &lt;li&gt;Add &#34;@Name&#34; when long-pressing @user option&lt;/li&gt; &#xA;   &lt;li&gt;Allow creating a group without inviting anyone&lt;/li&gt; &#xA;   &lt;li&gt;Allow upgrading a group to a supergroup&lt;/li&gt; &#xA;   &lt;li&gt;Mark dialogs as read using tab menu&lt;/li&gt; &#xA;   &lt;li&gt;Enabled set auto delete timer option for private chats and private groups&lt;/li&gt; &#xA;   &lt;li&gt;Support saving multiple selected messages to Saved Messages&lt;/li&gt; &#xA;   &lt;li&gt;Support unpinning multiple selected messages&lt;/li&gt; &#xA;   &lt;li&gt;View stats option for messages&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Optimization&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Keep the original file name when downloading files&lt;/li&gt; &#xA;   &lt;li&gt;View the data center you belong to when you don&#39;t have an avatar&lt;/li&gt; &#xA;   &lt;li&gt;Enhanced notification service, optional version without Google Services&lt;/li&gt; &#xA;   &lt;li&gt;Improved session dialog&lt;/li&gt; &#xA;   &lt;li&gt;Improved link long click menu&lt;/li&gt; &#xA;   &lt;li&gt;Improved hide messages from blocked users feature&lt;/li&gt; &#xA;   &lt;li&gt;Don&#39;t process cleanup draft events after opening chat&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Others&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;OpenKeychain client (sign / verify / decrypt / import)&lt;/li&gt; &#xA;   &lt;li&gt;Text replacer&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;UI&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Telegram X style menu for unpinning messages&lt;/li&gt; &#xA;   &lt;li&gt;Built-in Material Design themes / Telegram X style icons&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;And more :)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;API and Protocol documentation&lt;/h2&gt; &#xA;&lt;p&gt;Telegram API manuals: &lt;a href=&#34;https://core.telegram.org/api&#34;&gt;https://core.telegram.org/api&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;MTproto protocol manuals: &lt;a href=&#34;https://core.telegram.org/mtproto&#34;&gt;https://core.telegram.org/mtproto&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Compilation Guide(By NekoX-dev)&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE: Building on Windows is, unfortunately, not supported. Consider using a Linux VM or dual booting.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Checkout all submodules&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Install Android SDK and NDK (default location is $HOME/Android/SDK, otherwise you need to specify $ANDROID_HOME for it)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;It is recommended to use &lt;a href=&#34;https://developer.android.com/studio&#34;&gt;AndroidStudio&lt;/a&gt; to install.&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Install golang and yasm&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;apt install -y golang-1.16 yasm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Install Rust and its stdlib for Android ABIs, and add environment variables for it.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;It is recommended to use the official script, otherwise you may not find rustup.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --default-toolchain none -y&#xA;echo &#34;source \$HOME/.cargo/env&#34; &amp;gt;&amp;gt; $HOME/.bashrc &amp;amp;&amp;amp; source $HOME/.cargo/env&#xA;&#xA;rustup install $(cat ss-rust/src/main/rust/shadowsocks-rust/rust-toolchain)&#xA;rustup default $(cat ss-rust/src/main/rust/shadowsocks-rust/rust-toolchain)&#xA;rustup target install armv7-linux-androideabi aarch64-linux-android i686-linux-android x86_64-linux-android&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This step can be skipped if you want to build a &lt;code&gt;mini&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Build native dependencies: &lt;code&gt;./run init libs&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build external libraries and native code:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For full release:&lt;/p&gt; &#xA;&lt;p&gt;uncomment lines in settings.gradle&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;./run libs update&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;For mini release:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./run libs v2ray&#xA;./run libs native # libtmessages.so&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fill out &lt;code&gt;TELEGRAM_APP_ID&lt;/code&gt; and &lt;code&gt;TELEGRAM_APP_HASH&lt;/code&gt; in &lt;code&gt;local.properties&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Replace TMessagesProj/google-services.json if you want fcm to work.&lt;/li&gt; &#xA; &lt;li&gt;Replace release.keystore with yours and fill out &lt;code&gt;ALIAS_NAME&lt;/code&gt;, &lt;code&gt;KEYSTORE_PASS&lt;/code&gt; and &lt;code&gt;ALIAS_PASS&lt;/code&gt; in &lt;code&gt;local.properties&lt;/code&gt; if you want a custom sign key.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;./gradlew assemble&amp;lt;Full/Mini&amp;gt;&amp;lt;Debug/Release/ReleaseNoGcm&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Localization&lt;/h2&gt; &#xA;&lt;p&gt;Nagram is forked from Telegram, thus most locales follows the translations of Telegram for Android, checkout &lt;a href=&#34;https://translations.telegram.org/en/android/&#34;&gt;https://translations.telegram.org/en/android/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Is Nagram not in your language, or the translation is incorrect or incomplete? Get involved in the translations on our &lt;a href=&#34;https://hosted.weblate.org/engage/nekox/&#34;&gt;Weblate&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NekoX-Dev/NekoX&#34;&gt;NekoX&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.com/Nekogram/Nekogram&#34;&gt;Nekogram&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.com/JasonKhew96/Nekogram&#34;&gt;Pigeongram&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qwq233/Nullgram&#34;&gt;Nullgram&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TeleTux/TeleTux&#34;&gt;TeleTux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/OwlGramDev/OwlGram&#34;&gt;OwlGram&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>