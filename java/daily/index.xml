<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-18T01:36:04Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>apache/incubator-xtable</title>
    <updated>2024-06-18T01:36:04Z</updated>
    <id>tag:github.com,2024-06-18:/apache/incubator-xtable</id>
    <link href="https://github.com/apache/incubator-xtable" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Apache XTable (incubating) is a cross-table converter for lakehouse table formats that facilitates interoperability across data processing systems and query engines.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Apache XTable™ (Incubating)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/apache-xtable-ci-org/apache-xtable-ci/_build/latest?definitionId=2&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://dev.azure.com/apache-xtable-ci-org/apache-xtable-ci/_apis/build/status%2Fapachextable-ci.xtable-mirror?branchName=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Apache XTable™ (Incubating) is a cross-table converter for table formats that facilitates omni-directional interoperability across data processing systems and query engines. Currently, Apache XTable™ supports widely adopted open-source table formats such as Apache Hudi, Apache Iceberg, and Delta Lake.&lt;/p&gt; &#xA;&lt;p&gt;Apache XTable™ simplifies data lake operations by leveraging a common model for table representation. This allows users to write data in one format while still benefiting from integrations and features available in other formats. For instance, Apache XTable™ enables existing Hudi users to seamlessly work with Databricks&#39;s Photon Engine or query Iceberg tables with Snowflake. Creating transformations from one format to another is straightforward and only requires the implementation of a few interfaces, which we believe will facilitate the expansion of supported source and target formats in the future.&lt;/p&gt; &#xA;&lt;h1&gt;Building the project and running tests.&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use Java11 for building the project. If you are using some other java version, you can use &lt;a href=&#34;https://github.com/jenv/jenv&#34;&gt;jenv&lt;/a&gt; to use multiple java versions locally.&lt;/li&gt; &#xA; &lt;li&gt;Build the project using &lt;code&gt;mvn clean package&lt;/code&gt;. Use &lt;code&gt;mvn clean package -DskipTests&lt;/code&gt; to skip tests while building.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;mvn clean test&lt;/code&gt; or &lt;code&gt;mvn test&lt;/code&gt; to run all unit tests. If you need to run only a specific test you can do this by something like &lt;code&gt;mvn test -Dtest=TestDeltaSync -pl core&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Similarly, use &lt;code&gt;mvn clean verify&lt;/code&gt; or &lt;code&gt;mvn verify&lt;/code&gt; to run integration tests.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Style guide&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;We use &lt;a href=&#34;https://github.com/diffplug/spotless/tree/main/plugin-maven&#34;&gt;Maven Spotless plugin&lt;/a&gt; and &lt;a href=&#34;https://github.com/google/google-java-format&#34;&gt;Google java format&lt;/a&gt; for code style.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;mvn spotless:check&lt;/code&gt; to find out code style violations and &lt;code&gt;mvn spotless:apply&lt;/code&gt; to fix them. Code style check is tied to compile phase by default, so code style violations will lead to build failures.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Running the bundled jar&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Get a pre-built bundled jar or create the jar with &lt;code&gt;mvn install -DskipTests&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;create a yaml file that follows the format below:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;sourceFormat: HUDI&#xA;targetFormats:&#xA;  - DELTA&#xA;  - ICEBERG&#xA;datasets:&#xA;  -&#xA;    tableBasePath: s3://tpc-ds-datasets/1GB/hudi/call_center&#xA;    tableDataPath: s3://tpc-ds-datasets/1GB/hudi/call_center/data&#xA;    tableName: call_center&#xA;    namespace: my.db&#xA;  -&#xA;    tableBasePath: s3://tpc-ds-datasets/1GB/hudi/catalog_sales&#xA;    tableName: catalog_sales&#xA;    partitionSpec: cs_sold_date_sk:VALUE&#xA;  -&#xA;    tableBasePath: s3://hudi/multi-partition-dataset&#xA;    tableName: multi_partition_dataset&#xA;    partitionSpec: time_millis:DAY:yyyy-MM-dd,type:VALUE&#xA;  -&#xA;    tableBasePath: abfs://container@storage.dfs.core.windows.net/multi-partition-dataset&#xA;    tableName: multi_partition_dataset&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;sourceFormat&lt;/code&gt; is the format of the source table that you want to convert&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;targetFormats&lt;/code&gt; is a list of formats you want to create from your source tables&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tableBasePath&lt;/code&gt; is the basePath of the table&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tableDataPath&lt;/code&gt; is an optional field specifying the path to the data files. If not specified, the tableBasePath will be used. For Iceberg source tables, you will need to specify the &lt;code&gt;/data&lt;/code&gt; path.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;namespace&lt;/code&gt; is an optional field specifying the namespace of the table and will be used when syncing to a catalog.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;partitionSpec&lt;/code&gt; is a spec that allows us to infer partition values. This is only required for Hudi source tables. If the table is not partitioned, leave it blank. If it is partitioned, you can specify a spec with a comma separated list with format &lt;code&gt;path:type:format&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;path&lt;/code&gt; is a dot separated path to the partition field&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;type&lt;/code&gt; describes how the partition value was generated from the column value &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;VALUE&lt;/code&gt;: an identity transform of field value to partition value&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;YEAR&lt;/code&gt;: data is partitioned by a field representing a date and year granularity is used&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;MONTH&lt;/code&gt;: same as &lt;code&gt;YEAR&lt;/code&gt; but with month granularity&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;DAY&lt;/code&gt;: same as &lt;code&gt;YEAR&lt;/code&gt; but with day granularity&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;HOUR&lt;/code&gt;: same as &lt;code&gt;YEAR&lt;/code&gt; but with hour granularity&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;format&lt;/code&gt;: if your partition type is &lt;code&gt;YEAR&lt;/code&gt;, &lt;code&gt;MONTH&lt;/code&gt;, &lt;code&gt;DAY&lt;/code&gt;, or &lt;code&gt;HOUR&lt;/code&gt; specify the format for the date string as it appears in your file paths&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;The default implementations of table format converters can be replaced with custom implementations by specifying a converter configs yaml file in the format below:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# conversionSourceProviderClass: The class name of a table format&#39;s converter factory, where the converter is&#xA;#     used for reading from a table of this format. All user configurations, including hadoop config&#xA;#     and converter specific configuration, will be available to the factory for instantiation of the&#xA;#     converter.&#xA;# conversionTargetProviderClass: The class name of a table format&#39;s converter factory, where the converter is&#xA;#     used for writing to a table of this format.&#xA;# configuration: A map of configuration values specific to this converter.&#xA;tableFormatConverters:&#xA;    HUDI:&#xA;      conversionSourceProviderClass: org.apache.xtable.hudi.HudiConversionSourceProvider&#xA;    DELTA:&#xA;      conversionTargetProviderClass: org.apache.xtable.delta.DeltaConversionTarget&#xA;      configuration:&#xA;        spark.master: local[2]&#xA;        spark.app.name: xtable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;A catalog can be used when reading and updating Iceberg tables. The catalog can be specified in a yaml file and passed in with the &lt;code&gt;--icebergCatalogConfig&lt;/code&gt; option. The format of the catalog config file is:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;catalogImpl: io.my.CatalogImpl&#xA;catalogName: name&#xA;catalogOptions: # all other options are passed through in a map&#xA;  key1: value1&#xA;  key2: value2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;run with &lt;code&gt;java -jar xtable-utilities/target/xtable-utilities-0.1.0-SNAPSHOT-bundled.jar --datasetConfig my_config.yaml [--hadoopConfig hdfs-site.xml] [--convertersConfig converters.yaml] [--icebergCatalogConfig catalog.yaml]&lt;/code&gt; The bundled jar includes hadoop dependencies for AWS, Azure, and GCP. Sample hadoop configurations for configuring the converters can be found in the &lt;a href=&#34;https://github.com/apache/incubator-xtable/raw/main/utilities/src/main/resources/xtable-hadoop-defaults.xml&#34;&gt;xtable-hadoop-defaults.xml&lt;/a&gt; file. The custom hadoop configurations can be passed in with the &lt;code&gt;--hadoopConfig [custom-hadoop-config-file]&lt;/code&gt; option. The config in custom hadoop config file will override the default hadoop configurations. For an example of a custom hadoop config file, see &lt;a href=&#34;https://xtable.apache.org/docs/fabric#step-2-translate-source-table-to-delta-lake-format-using-apache-xtable-incubating&#34;&gt;hadoop.xml&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;For setting up the repo on IntelliJ, open the project and change the java version to Java11 in File-&amp;gt;ProjectStructure &lt;img src=&#34;https://raw.githubusercontent.com/apache/incubator-xtable/main/style/IDE.png&#34; alt=&#34;img.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You have found a bug, or have a cool idea you that want to contribute to the project ? Please file a GitHub issue &lt;a href=&#34;https://github.com/apache/incubator-xtable/issues&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Adding a new target format&lt;/h2&gt; &#xA;&lt;p&gt;Adding a new target format requires a developer implement &lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-xtable/main/api/src/main/java/org/apache/xtable/spi/sync/ConversionTarget.java&#34;&gt;ConversionTarget&lt;/a&gt;. Once you have implemented that interface, you can integrate it into the &lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-xtable/main/core/src/main/java/org/apache/xtable/conversion/ConversionController.java&#34;&gt;ConversionController&lt;/a&gt;. If you think others may find that target useful, please raise a Pull Request to add it to the project.&lt;/p&gt; &#xA;&lt;h2&gt;Overview of the sync process&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apache/incubator-xtable/main/assets/images/sync_flow.jpg&#34; alt=&#34;img.png&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>uber/NullAway</title>
    <updated>2024-06-18T01:36:04Z</updated>
    <id>tag:github.com,2024-06-18:/uber/NullAway</id>
    <link href="https://github.com/uber/NullAway" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A tool to help eliminate NullPointerExceptions (NPEs) in your Java code with low build-time overhead&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;NullAway: Fast Annotation-Based Null Checking for Java &lt;a href=&#34;https://github.com/uber/nullaway/actions/workflows/continuous-integration.yml&#34;&gt;&lt;img src=&#34;https://github.com/uber/nullaway/actions/workflows/continuous-integration.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/uber/NullAway?branch=master&#34;&gt;&lt;img src=&#34;https://codecov.io/github/uber/NullAway/coverage.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;NullAway is a tool to help eliminate &lt;code&gt;NullPointerException&lt;/code&gt;s (NPEs) in your Java code. To use NullAway, first add &lt;code&gt;@Nullable&lt;/code&gt; annotations in your code wherever a field, method parameter, or return value may be &lt;code&gt;null&lt;/code&gt;. Given these annotations, NullAway performs a series of type-based, local checks to ensure that any pointer that gets dereferenced in your code cannot be &lt;code&gt;null&lt;/code&gt;. NullAway is similar to the type-based nullability checking in the Kotlin and Swift languages, and the &lt;a href=&#34;https://checkerframework.org/&#34;&gt;Checker Framework&lt;/a&gt; and &lt;a href=&#34;https://fbinfer.com/docs/checker-eradicate/&#34;&gt;Eradicate&lt;/a&gt; null checkers for Java.&lt;/p&gt; &#xA;&lt;p&gt;NullAway is &lt;em&gt;fast&lt;/em&gt;. It is built as a plugin to &lt;a href=&#34;http://errorprone.info/&#34;&gt;Error Prone&lt;/a&gt; and can run on every single build of your code. In our measurements, the build-time overhead of running NullAway is usually less than 10%. NullAway is also &lt;em&gt;practical&lt;/em&gt;: it does not prevent all possible NPEs in your code, but it catches most of the NPEs we have observed in production while imposing a reasonable annotation burden, giving a great &#34;bang for your buck.&#34;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Overview&lt;/h3&gt; &#xA;&lt;p&gt;NullAway requires that you build your code with &lt;a href=&#34;http://errorprone.info&#34;&gt;Error Prone&lt;/a&gt;, version 2.14.0 or higher. See the &lt;a href=&#34;http://errorprone.info/docs/installation&#34;&gt;Error Prone documentation&lt;/a&gt; for instructions on getting started with Error Prone and integration with your build system. The instructions below assume you are using Gradle; see &lt;a href=&#34;https://github.com/uber/NullAway/wiki/Configuration#other-build-systems&#34;&gt;the docs&lt;/a&gt; for discussion of other build systems.&lt;/p&gt; &#xA;&lt;h3&gt;Gradle&lt;/h3&gt; &#xA;&lt;h4&gt;Java (non-Android)&lt;/h4&gt; &#xA;&lt;p&gt;To integrate NullAway into your non-Android Java project, add the following to your &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;plugins {&#xA;  // we assume you are already using the Java plugin&#xA;  id &#34;net.ltgt.errorprone&#34; version &#34;&amp;lt;plugin version&amp;gt;&#34;&#xA;}&#xA;&#xA;dependencies {&#xA;  errorprone &#34;com.uber.nullaway:nullaway:&amp;lt;NullAway version&amp;gt;&#34;&#xA;&#xA;  // Optional, some source of nullability annotations.&#xA;  // Not required on Android if you use the support &#xA;  // library nullability annotations.&#xA;  compileOnly &#34;com.google.code.findbugs:jsr305:3.0.2&#34;&#xA;&#xA;  errorprone &#34;com.google.errorprone:error_prone_core:&amp;lt;Error Prone version&amp;gt;&#34;&#xA;}&#xA;&#xA;import net.ltgt.gradle.errorprone.CheckSeverity&#xA;&#xA;tasks.withType(JavaCompile) {&#xA;  // remove the if condition if you want to run NullAway on test code&#xA;  if (!name.toLowerCase().contains(&#34;test&#34;)) {&#xA;    options.errorprone {&#xA;      check(&#34;NullAway&#34;, CheckSeverity.ERROR)&#xA;      option(&#34;NullAway:AnnotatedPackages&#34;, &#34;com.uber&#34;)&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s walk through this script step by step. The &lt;code&gt;plugins&lt;/code&gt; section pulls in the &lt;a href=&#34;https://github.com/tbroyer/gradle-errorprone-plugin&#34;&gt;Gradle Error Prone plugin&lt;/a&gt; for Error Prone integration.&lt;/p&gt; &#xA;&lt;p&gt;In &lt;code&gt;dependencies&lt;/code&gt;, the first &lt;code&gt;errorprone&lt;/code&gt; line loads NullAway, and the &lt;code&gt;compileOnly&lt;/code&gt; line loads a &lt;a href=&#34;https://jcp.org/en/jsr/detail?id=305&#34;&gt;JSR 305&lt;/a&gt; library which provides a suitable &lt;code&gt;@Nullable&lt;/code&gt; annotation (&lt;code&gt;javax.annotation.Nullable&lt;/code&gt;). NullAway allows for any &lt;code&gt;@Nullable&lt;/code&gt; annotation to be used, so, e.g., &lt;code&gt;@Nullable&lt;/code&gt; from the Android Support Library or JetBrains annotations is also fine. The second &lt;code&gt;errorprone&lt;/code&gt; line sets the version of Error Prone is used.&lt;/p&gt; &#xA;&lt;p&gt;Finally, in the &lt;code&gt;tasks.withType(JavaCompile)&lt;/code&gt; section, we pass some configuration options to NullAway. First &lt;code&gt;check(&#34;NullAway&#34;, CheckSeverity.ERROR)&lt;/code&gt; sets NullAway issues to the error level (it&#39;s equivalent to the &lt;code&gt;-Xep:NullAway:ERROR&lt;/code&gt; standard Error Prone argument); by default NullAway emits warnings. Then, &lt;code&gt;option(&#34;NullAway:AnnotatedPackages&#34;, &#34;com.uber&#34;)&lt;/code&gt; (equivalent to the &lt;code&gt;-XepOpt:NullAway:AnnotatedPackages=com.uber&lt;/code&gt; standard Error Prone argument) tells NullAway that source code in packages under the &lt;code&gt;com.uber&lt;/code&gt; namespace should be checked for null dereferences and proper usage of &lt;code&gt;@Nullable&lt;/code&gt; annotations, and that class files in these packages should be assumed to have correct usage of &lt;code&gt;@Nullable&lt;/code&gt; (see &lt;a href=&#34;https://github.com/uber/NullAway/wiki/Configuration&#34;&gt;the docs&lt;/a&gt; for more detail). NullAway requires at least the &lt;code&gt;AnnotatedPackages&lt;/code&gt; configuration argument to run, in order to distinguish between annotated and unannotated code. See &lt;a href=&#34;https://github.com/uber/NullAway/wiki/Configuration&#34;&gt;the configuration docs&lt;/a&gt; for other useful configuration options. For even simpler configuration of NullAway options, use the &lt;a href=&#34;https://github.com/tbroyer/gradle-nullaway-plugin&#34;&gt;Gradle NullAway plugin&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We recommend addressing all the issues that Error Prone reports, particularly those reported as errors (rather than warnings). But, if you&#39;d like to try out NullAway without running other Error Prone checks, you can use &lt;code&gt;options.errorprone.disableAllChecks&lt;/code&gt; (equivalent to passing &lt;code&gt;&#34;-XepDisableAllChecks&#34;&lt;/code&gt; to the compiler, before the NullAway-specific arguments).&lt;/p&gt; &#xA;&lt;h4&gt;Android&lt;/h4&gt; &#xA;&lt;p&gt;Versions 3.0.0 and later of the Gradle Error Prone Plugin &lt;a href=&#34;https://github.com/tbroyer/gradle-errorprone-plugin/releases/tag/v3.0.0&#34;&gt;no longer support Android&lt;/a&gt;. So if you&#39;re using a recent version of this plugin, you&#39;ll need to add some further configuration to run Error Prone and NullAway. Our &lt;a href=&#34;https://github.com/uber/NullAway/raw/master/sample-app/build.gradle&#34;&gt;sample app &lt;code&gt;build.gradle&lt;/code&gt; file&lt;/a&gt; shows one way to do this, but your Android project may require tweaks. Alternately, 2.x versions of the Gradle Error Prone Plugin still support Android and may still work with your project.&lt;/p&gt; &#xA;&lt;p&gt;Beyond that, compared to the Java configuration, the &lt;code&gt;com.google.code.findbugs:jsr305:3.0.2&lt;/code&gt; dependency can be removed; you can use the &lt;code&gt;android.support.annotation.Nullable&lt;/code&gt; annotation from the Android Support library instead.&lt;/p&gt; &#xA;&lt;h4&gt;Annotation Processors / Generated Code&lt;/h4&gt; &#xA;&lt;p&gt;Some annotation processors like &lt;a href=&#34;https://google.github.io/dagger/&#34;&gt;Dagger&lt;/a&gt; and &lt;a href=&#34;https://github.com/google/auto/tree/master/value&#34;&gt;AutoValue&lt;/a&gt; generate code into the same package namespace as your own code. This can cause problems when setting NullAway to the &lt;code&gt;ERROR&lt;/code&gt; level as suggested above, since errors in this generated code will block the build. Currently the best solution to this problem is to completely disable Error Prone on generated code, using the &lt;code&gt;-XepExcludedPaths&lt;/code&gt; option added in Error Prone 2.1.3 (documented &lt;a href=&#34;http://errorprone.info/docs/flags&#34;&gt;here&lt;/a&gt;, use &lt;code&gt;options.errorprone.excludedPaths=&lt;/code&gt; in Gradle). To use, figure out which directory contains the generated code, and add that directory to the excluded path regex.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note for Dagger users&lt;/strong&gt;: Dagger versions older than 2.12 can have bad interactions with NullAway; see &lt;a href=&#34;https://github.com/uber/NullAway/issues/48#issuecomment-340018409&#34;&gt;here&lt;/a&gt;. Please update to Dagger 2.12 to fix the problem.&lt;/p&gt; &#xA;&lt;h4&gt;Lombok&lt;/h4&gt; &#xA;&lt;p&gt;Unlike other annotation processors above, Lombok modifies the in-memory AST of the code it processes, which is the source of numerous incompatibilities with Error Prone and, consequently, NullAway.&lt;/p&gt; &#xA;&lt;p&gt;We do not particularly recommend using NullAway with Lombok. However, NullAway encodes some knowledge of common Lombok annotations and we do try for best-effort compatibility. In particular, common usages like &lt;code&gt;@lombok.Builder&lt;/code&gt; and &lt;code&gt;@Data&lt;/code&gt; classes should be supported.&lt;/p&gt; &#xA;&lt;p&gt;In order for NullAway to successfully detect Lombok generated code within the in-memory Java AST, the following configuration option must be passed to Lombok as part of an applicable &lt;code&gt;lombok.config&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;lombok.addLombokGeneratedAnnotation = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This causes Lombok to add &lt;code&gt;@lombok.Generated&lt;/code&gt; to the methods/classes it generates. NullAway will ignore (i.e. not check) the implementation of this generated code, treating it as unannotated.&lt;/p&gt; &#xA;&lt;h2&gt;Code Example&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s see how NullAway works on a simple code example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;static void log(Object x) {&#xA;    System.out.println(x.toString());&#xA;}&#xA;static void foo() {&#xA;    log(null);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This code is buggy: when &lt;code&gt;foo()&lt;/code&gt; is called, the subsequent call to &lt;code&gt;log()&lt;/code&gt; will fail with an NPE. You can see this error in the NullAway sample app by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp sample/src/main/java/com/uber/mylib/MyClass.java.buggy sample/src/main/java/com/uber/mylib/MyClass.java&#xA;./gradlew build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, NullAway assumes every method parameter, return value, and field is &lt;em&gt;non-null&lt;/em&gt;, i.e., it can never be assigned a &lt;code&gt;null&lt;/code&gt; value. In the above code, the &lt;code&gt;x&lt;/code&gt; parameter of &lt;code&gt;log()&lt;/code&gt; is assumed to be non-null. So, NullAway reports the following error:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;warning: [NullAway] passing @Nullable parameter &#39;null&#39; where @NonNull is required&#xA;    log(null);&#xA;        ^&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can fix this error by allowing &lt;code&gt;null&lt;/code&gt; to be passed to &lt;code&gt;log()&lt;/code&gt;, with a &lt;code&gt;@Nullable&lt;/code&gt; annotation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;static void log(@Nullable Object x) {&#xA;    System.out.println(x.toString());&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With this annotation, NullAway points out the possible null dereference:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;warning: [NullAway] dereferenced expression x is @Nullable&#xA;    System.out.println(x.toString());&#xA;                        ^&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can fix this warning by adding a null check:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;static void log(@Nullable Object x) {&#xA;    if (x != null) {&#xA;        System.out.println(x.toString());&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With this change, all the NullAway warnings are fixed.&lt;/p&gt; &#xA;&lt;p&gt;For more details on NullAway&#39;s checks, error messages, and limitations, see &lt;a href=&#34;https://github.com/uber/NullAway/wiki&#34;&gt;our detailed guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Please feel free to &lt;a href=&#34;https://github.com/uber/NullAway/issues&#34;&gt;open a GitHub issue&lt;/a&gt; if you have any questions on how to use NullAway. Or, you can &lt;a href=&#34;https://discord.gg/QH2F779&#34;&gt;join the NullAway Discord server&lt;/a&gt; and ask us a question there.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;d love for you to contribute to NullAway! Please note that once you create a pull request, you will be asked to sign our &lt;a href=&#34;https://docs.google.com/a/uber.com/forms/d/1pAwS_-dA1KhPlfxzYLBqK6rsSWwRwH95OCCZrcsY5rk/viewform&#34;&gt;Uber Contributor License Agreement&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;NullAway is licensed under the MIT license. See the LICENSE.txt file for more information.&lt;/p&gt;</summary>
  </entry>
</feed>