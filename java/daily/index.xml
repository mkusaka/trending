<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-02T01:34:01Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>eclipse-vertx/vert.x</title>
    <updated>2022-09-02T01:34:01Z</updated>
    <id>tag:github.com,2022-09-02:/eclipse-vertx/vert.x</id>
    <link href="https://github.com/eclipse-vertx/vert.x" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Vert.x is a tool-kit for building reactive applications on the JVM&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/eclipse-vertx/vert.x/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/eclipse-vertx/vert.x/workflows/CI/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Vert.x Core&lt;/h2&gt; &#xA;&lt;p&gt;This is the repository for Vert.x core.&lt;/p&gt; &#xA;&lt;p&gt;Vert.x core contains fairly low-level functionality, including support for HTTP, TCP, file system access, and various other features. You can use this directly in your own applications, and it&#39;s used by many of the other components of Vert.x.&lt;/p&gt; &#xA;&lt;p&gt;For more information on Vert.x and where Vert.x core fits into the big picture please see the &lt;a href=&#34;http://vertx.io&#34;&gt;website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building Vert.x artifacts&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; mvn package&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running tests&lt;/h2&gt; &#xA;&lt;p&gt;Runs the tests&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; mvn test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Vert.x supports native transport on BSD and Linux, to run the tests with native transport&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; mvn test -PtestNativeTransport&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Vert.x supports domain sockets on Linux exclusively, to run the tests with domain sockets&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; mvn test -PtestDomainSockets&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Vert.x has a few integrations tests that run a differently configured JVM (classpath, system properties, etc....) for ALPN, native and logging&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; vertx verify -Dtest=FooTest # FooTest does not exists, its only purpose is to execute no tests during the test phase&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building documentation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; mvn package -Pdocs -DskipTests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open &lt;em&gt;target/docs/vertx-core/java/index.html&lt;/em&gt; with your browser&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>techops-recsys-grad-hiring/joi-grad-shopping-cart-java</title>
    <updated>2022-09-02T01:34:01Z</updated>
    <id>tag:github.com,2022-09-02:/techops-recsys-grad-hiring/joi-grad-shopping-cart-java</id>
    <link href="https://github.com/techops-recsys-grad-hiring/joi-grad-shopping-cart-java" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Welcome to Shopping Cart&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Read this in other languages: &lt;a href=&#34;https://raw.githubusercontent.com/techops-recsys-grad-hiring/joi-grad-shopping-cart-java/master/README.md&#34;&gt;English&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/techops-recsys-grad-hiring/joi-grad-shopping-cart-java/master/README.pt-br.md&#34;&gt;PortuguÃªs do Brasil&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is where you can start to get familiar with the problem and what you need to run it. This codebase is used during pairing session for JOI initiative. It&#39;s focused on identifying code smells, refactoring and testing legacy codebase while promoting conversations.&lt;/p&gt; &#xA;&lt;h2&gt;Problem Statement&lt;/h2&gt; &#xA;&lt;p&gt;We have an existing shopping cart application, with a small set of eCommerce/shopping cart rules. Rules include calculation of total price, discount and loyalty points calculation. Most of the business logic is implemented in single method ShoppingCart.checkout.&lt;/p&gt; &#xA;&lt;h2&gt;Technology used&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Java&lt;/li&gt; &#xA; &lt;li&gt;Gradle - build tool&lt;/li&gt; &#xA; &lt;li&gt;JUnit - unit testing framework&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Before the interview&lt;/h2&gt; &#xA;&lt;p&gt;Get familiar with the codebase! Make sure you have the necessary dependencies installed, and that you are able to run the tests.&lt;/p&gt; &#xA;&lt;h2&gt;What you need to run it&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://adoptopenjdk.net/?variant=openjdk8&#34;&gt;Java 1.8&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;./gradlew clean build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run Tests&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;./gradlew test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run the Sample Application&lt;/h2&gt; &#xA;&lt;p&gt;To understand how this library would be used you can check the &lt;code&gt;main&lt;/code&gt; method in the &lt;code&gt;SampleApp&lt;/code&gt; class. If you want to see the results, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;./gradlew run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Existing Business Rules&lt;/h2&gt; &#xA;&lt;p&gt;Application code currently has following rules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Calculates total price and total loyalty points earned by the customer.&lt;/li&gt; &#xA; &lt;li&gt;Products with product code starting with DIS_10 have a 10% discount applied.&lt;/li&gt; &#xA; &lt;li&gt;Products with product code starting with DIS_15 have a 15% discount applied.&lt;/li&gt; &#xA; &lt;li&gt;Loyalty points are earned more when the product is not under any offer. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Customer earns 1 point on every $5 purchase.&lt;/li&gt; &#xA;   &lt;li&gt;Customer earns 1 point on every $10 spent on a product with 10% discount.&lt;/li&gt; &#xA;   &lt;li&gt;Customer earns 1 point on every $15 spent on a product with 15% discount.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>apache/ranger</title>
    <updated>2022-09-02T01:34:01Z</updated>
    <id>tag:github.com,2022-09-02:/apache/ranger</id>
    <link href="https://github.com/apache/ranger" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mirror of Apache Ranger&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Licensed to the Apache Software Foundation (ASF) under one or more&lt;/h1&gt; &#xA;&lt;h1&gt;contributor license agreements. See the NOTICE file distributed with&lt;/h1&gt; &#xA;&lt;h1&gt;this work for additional information regarding copyright ownership.&lt;/h1&gt; &#xA;&lt;h1&gt;The ASF licenses this file to You under the Apache License, Version 2.0&lt;/h1&gt; &#xA;&lt;h1&gt;(the &#34;License&#34;); you may not use this file except in compliance with&lt;/h1&gt; &#xA;&lt;h1&gt;the License. You may obtain a copy of the License at&lt;/h1&gt; &#xA;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;h1&gt;Unless required by applicable law or agreed to in writing, software&lt;/h1&gt; &#xA;&lt;h1&gt;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&lt;/h1&gt; &#xA;&lt;h1&gt;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;/h1&gt; &#xA;&lt;h1&gt;See the License for the specific language governing permissions and&lt;/h1&gt; &#xA;&lt;h1&gt;limitations under the License.&lt;/h1&gt; &#xA;&lt;p&gt;Check Apache Ranger Wiki for up to date instruction: &lt;a href=&#34;https://cwiki.apache.org/confluence/display/RANGER/Index&#34;&gt;https://cwiki.apache.org/confluence/display/RANGER/Index&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;NOTE about using sending pull request on github:&lt;/h1&gt; &#xA;&lt;p&gt;Apache Ranger is currently NOT setup to use pull requests to take in the changes for commit. Please use the apache review board to submit your code changes for review and commit. &lt;a href=&#34;https://reviews.apache.org&#34;&gt;https://reviews.apache.org&lt;/a&gt; Also create a jira to go along with the review and mention it in the review board review. &lt;a href=&#34;https://issues.apache.org/jira/browse/RANGER&#34;&gt;https://issues.apache.org/jira/browse/RANGER&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Build Process&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Check out the code from GIT repository&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;On the root folder, please execute the following Maven command:&lt;/p&gt; &lt;p&gt;$ mvn clean compile package install $ mvn eclipse:eclipse&lt;/p&gt; &lt;p&gt;(Ranger Admin UI tests depend on PhantomJS. If the build fails with npm or Karma errors you can either i. install PhantomJS dependencies for your platform (bzip2 and fontconfig) ii. skip JavaScript test execution: mvn -DskipJSTests ...)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;After the above build command execution, you should see the following TAR files in the target folder:&lt;/p&gt; &lt;p&gt;ranger-&#xA;   &lt;version&gt;&#xA;    -admin.tar.gz ranger-&#xA;    &lt;version&gt;&#xA;     -atlas-plugin.tar.gz ranger-&#xA;     &lt;version&gt;&#xA;      -hbase-plugin.tar.gz ranger-&#xA;      &lt;version&gt;&#xA;       -hdfs-plugin.tar.gz ranger-&#xA;       &lt;version&gt;&#xA;        -hive-plugin.tar.gz ranger-&#xA;        &lt;version&gt;&#xA;         -kafka-plugin.tar.gz ranger-&#xA;         &lt;version&gt;&#xA;          -kms.tar.gz ranger-&#xA;          &lt;version&gt;&#xA;           -knox-plugin.tar.gz ranger-&#xA;           &lt;version&gt;&#xA;            -migration-util.tar.gz ranger-&#xA;            &lt;version&gt;&#xA;             -ranger-tools.tar.gz ranger-&#xA;             &lt;version&gt;&#xA;              -solr-plugin.tar.gz ranger-&#xA;              &lt;version&gt;&#xA;               -sqoop-plugin.tar.gz ranger-&#xA;               &lt;version&gt;&#xA;                -src.tar.gz ranger-&#xA;                &lt;version&gt;&#xA;                 -storm-plugin.tar.gz ranger-&#xA;                 &lt;version&gt;&#xA;                  -tagsync.tar.gz ranger-&#xA;                  &lt;version&gt;&#xA;                   -usersync.tar.gz ranger-&#xA;                   &lt;version&gt;&#xA;                    -yarn-plugin.tar.gz ranger-&#xA;                    &lt;version&gt;&#xA;                     -kylin-plugin.tar.gz ranger-&#xA;                     &lt;version&gt;&#xA;                      -elasticsearch-plugin.tar.gz&#xA;                     &lt;/version&gt;&#xA;                    &lt;/version&gt;&#xA;                   &lt;/version&gt;&#xA;                  &lt;/version&gt;&#xA;                 &lt;/version&gt;&#xA;                &lt;/version&gt;&#xA;               &lt;/version&gt;&#xA;              &lt;/version&gt;&#xA;             &lt;/version&gt;&#xA;            &lt;/version&gt;&#xA;           &lt;/version&gt;&#xA;          &lt;/version&gt;&#xA;         &lt;/version&gt;&#xA;        &lt;/version&gt;&#xA;       &lt;/version&gt;&#xA;      &lt;/version&gt;&#xA;     &lt;/version&gt;&#xA;    &lt;/version&gt;&#xA;   &lt;/version&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Importing Apache Ranger Project into Eclipse&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a Eclipse workspace called &#39;ranger&#39;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Import maven project from the root directory where ranger source code is downloaded (and build)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Deployment Process&lt;/h1&gt; &#xA;&lt;p&gt;Installation Host Information&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1.  Ranger Admin Tool Component  (ranger-&amp;lt;version-number&amp;gt;-admin.tar.gz) should be installed on a host where Policy Admin Tool web application runs on port 6080 (default).&#xA;2.  Ranger User Synchronization Component (ranger-&amp;lt;version-number&amp;gt;-usersync.tar.gz) should be installed on a host to synchronize the external user/group information into Ranger database via Ranger Admin Tool.&#xA;3.  Ranger Component plugin should be installed on the component boxes:&#xA;    (a)  HDFS Plugin needs to be installed on Name Node hosts&#xA;    (b)  Hive Plugin needs to be installed on HiveServer2 hosts&#xA;    (c)  HBase Plugin needs to be installed on both Master and Regional Server nodes.&#xA;    (d)  Knox Plugin needs to be installed on Knox gateway host.&#xA;    (e)  Storm Plugin needs to be installed on Storm hosts.&#xA;    (f)  Kafka/Solr Plugin needs to be installed on their respective component hosts.&#xA;    (g)  YARN plugin needs to be installed on YARN Resource Manager hosts&#xA;    (h)  Sqoop plugin needs to be installed on Sqoop2 hosts&#xA;    (i)  Kylin plugin needs to be installed on Kylin hosts&#xA;    (j)  Elasticsearch plugin needs to be installed on Elasticsearch hosts&#xA;&#xA;Installation Process&#xA;~~~~~~~~~~~~~~~~~~~~&#xA;&#xA;1. Download the tar.gz file into a temporary folder in the box where it needs to be installed.&#xA;&#xA;2. Expand the tar.gz file into /usr/lib/ranger/ folder&#xA;&#xA;3. Go to the component name under the expanded folder (e.g. /usr/lib/ranger/ranger-&amp;lt;version-number&amp;gt;-admin/)&#xA;&#xA;4. Modify the install.properties file with appropriate variables&#xA;&#xA;5. If the module has setup.sh, &#xA;       Execute ./setup.sh&#xA;&#xA;   If the install.sh file does not exists, &#xA;       Execute ./enable-&amp;lt;component&amp;gt;-plugin.sh&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>