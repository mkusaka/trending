<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-05T01:38:46Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cheese1ne/cheese-repository</title>
    <updated>2023-06-05T01:38:46Z</updated>
    <id>tag:github.com,2023-06-05:/cheese1ne/cheese-repository</id>
    <link href="https://github.com/cheese1ne/cheese-repository" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;cheese-repository -- 以mybatis为核心的多数据源的持久层操作框架&lt;/h2&gt; &#xA;&lt;h3&gt;一、架构组件&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;cheese-db-core:&lt;code&gt;完成与mybatis的整合，针对多数据源重新设计代理方法的执行策略；设计条件构建工具&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;cheese-db-rpc(待设计):&lt;code&gt;微服务之间数据调用方式，当前为单体服务设计功能&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;cheese-db-spring:&lt;code&gt;cheese-db整合spring，完成持久层实例BeanDefinition的定义、初始化以及持久层代理的创建；多数据源、事务管理器、会话工厂以及会话顶层设计及默认实现；sql注册机以及相关功能设计；多数据源事务处理切面(待完善)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;cheese-db-spring-boot-starter:&lt;code&gt;cheese-db-spring接入springboot，提供可插拔式的组件使用方式&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;二、架构图&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://www.showdoc.com.cn/server/api/attachment/visitFile?sign=f1ed8a078a7e2072f8a2db74734fa32b&#34; alt=&#34;cheese-db.jpg&#34; title=&#34;[cheese-db.jpg&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;三、快速开始&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;引入maven依赖&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;com.cheese.db&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;cheese-db-spring-boot-starter&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;搭建springboot工程，并在启动类上添加&lt;code&gt;@EnableDevBase&lt;/code&gt;注解&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;/*&#xA;&#x9;devbase功能可以兼容DataSourceAutoConfiguration的功能，进行相应的配置即可&#xA;*/&#xA;@EnableDevBase&#xA;@SpringBootApplication(exclude = {DataSourceAutoConfiguration.class})&#xA;public class CheeseApplication implements CommandLineRunner {&#xA;    public static void main(String[] args) {&#xA;        SpringApplication.run(CheeseApplication.class,args);&#xA;    }&#xA;&#xA;    @Resource&#xA;    private DB db;&#xA;    @Resource&#xA;    private ApplicationContext applicationContext;&#xA;&#xA;    @Override&#xA;    public void run(String... args) throws Exception {&#xA;        LoadAction action = Actions.getLoad(DevBaseConstant.DEFAULT_SQL_CONFIG_DATASOURCE, DevBaseConstant.DEFAULT_SQL_CONFIG_CODE);&#xA;        List&amp;lt;InjectMeta&amp;gt; injectMetas = db.doActionGetList(action, InjectMeta.class);&#xA;        //默认注入到DB.class中,可根据项目实际持久层mapper实现&#xA;        applicationContext.publishEvent(new SqlInjectEvent(this, DB.class, InjectType.ALL, injectMetas));&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;&lt;code&gt;application.properties&lt;/code&gt;中配置&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;# devbase-db开启开关，默认开启&#xA;devbase-db.enabled=true&#xA;# devbase-db使用默认配置，默认为false&#xA;devbase-db.use-default-config=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;4.在&lt;code&gt;resources\config&lt;/code&gt;目录下创建&lt;code&gt;db.setting&lt;/code&gt;文件,配置数据源相关信息&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-setting&#34;&gt;[sys]&#xA;url = jdbc:mysql://localhost:3306/sys-db?xxx&#xA;username=xxx&#xA;password=xxx&#xA;[bus]&#xA;url = jdbc:mysql://localhost:3306/sys-db?xxx&#xA;username=xxx&#xA;password=xxx&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>