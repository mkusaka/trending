<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-12T01:31:50Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ZhongFuCheng3y/austin</title>
    <updated>2022-06-12T01:31:50Z</updated>
    <id>tag:github.com,2022-06-12:/ZhongFuCheng3y/austin</id>
    <link href="https://github.com/ZhongFuCheng3y/austin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;消息推送平台📝 推送下发【邮件】【短信】【微信服务号】【微信小程序】【企业微信】【钉钉】等消息类型。所使用的技术栈包括：SpringBoot、SpringDataJPA、MySQL、Docker、docker-compose、Kafka、Redis、Apollo、prometheus、Grafana、GrayLog、Flink、Xxl-job、Echarts等等&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/108bca55a5364a73b3fd50b8bde304d1~tplv-k3u1fbpfcp-watermark.image?&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ZhongFuCheng3y/austin/master/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Author-3y-orange.svg?sanitize=true&#34; alt=&#34;作者&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitee.com/zhongfucheng/austin&#34;&gt;&lt;img src=&#34;https://gitee.com/zhongfucheng/austin/badge/star.svg?theme=dark&#34; alt=&#34;gitee Starts&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitee.com/zhongfucheng/austin&#34;&gt;&lt;img src=&#34;https://gitee.com/zhongfucheng/austin/badge/fork.svg?theme=dark&#34; alt=&#34;gitee Starts&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ZhongFuCheng3y/austin&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/ZhongFuCheng3y/austin.svg?style=flat&amp;amp;label=GithubFork&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ZhongFuCheng3y/austin&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/ZhongFuCheng3y/austin.svg?style=flat&amp;amp;label=GithubStars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ZhongFuCheng3y/austin-admin&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/austin前端-GitHub-green.svg&#34; alt=&#34;作者&#34;&gt;&lt;/a&gt; &lt;a href=&#34;#项目交流&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/项目-交流-red.svg&#34; alt=&#34;项目交流&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://space.bilibili.com/198434865/channel/collectiondetail?sid=435119&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/项目-视频-green.svg&#34; alt=&#34;Bilibili&#34;&gt;&lt;/a&gt; &lt;a href=&#34;#如何准备面试&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/如何准备-面试-yellow.svg&#34; alt=&#34;对线面试官&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;最近我已经在&lt;strong&gt;bilibili&lt;/strong&gt;更新Austin的视频了哟，&lt;strong&gt;求关注和三连&lt;/strong&gt;！这是我更新的动力！！&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://space.bilibili.com/198434865/channel/collectiondetail?sid=435119&#34;&gt;https://space.bilibili.com/198434865/channel/collectiondetail?sid=435119&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;项目介绍&lt;/h2&gt; &#xA;&lt;p&gt;austin项目&lt;strong&gt;核心功能&lt;/strong&gt;：统一的接口发送各种类型消息，对消息生命周期全链路追踪&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5436b2e3d6cd471db9aafbd436198ca7~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;项目出现意义&lt;/strong&gt;：只要公司内有发送消息的需求，都应该要有类似&lt;code&gt;austin&lt;/code&gt;的项目，对各类消息进行统一发送处理。这有利于对功能的收拢，以及提高业务需求开发的效率&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c267ebb2ff234243b8665312dbb46310~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;系统项目架构&lt;/h2&gt; &#xA;&lt;p&gt;austin项目&lt;strong&gt;核心流程&lt;/strong&gt;：&lt;code&gt;austin-api&lt;/code&gt;接收到发送消息请求，直接将请求进&lt;code&gt;MQ&lt;/code&gt;。&lt;code&gt;austin-handler&lt;/code&gt;消费&lt;code&gt;MQ&lt;/code&gt;消息后由各类消息的Handler进行发送处理&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b5d4dfde0f164805a6e85a86498b0cd7~tplv-k3u1fbpfcp-watermark.image?&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Question&lt;/strong&gt; ：为什么发个消息需要MQ？&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;：发送消息实际上是调用各个服务提供的API，假设某消息的服务超时，&lt;code&gt;austin-api&lt;/code&gt;如果是直接调用服务，那存在&lt;strong&gt;超时&lt;/strong&gt;风险，拖垮整个接口性能。MQ在这是为了做异步和解耦，并且在一定程度上抗住业务流量。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Question&lt;/strong&gt;：能简单说下接入层做了什么事吗？&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c94059a008784a69bd10b98caa46d683~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Question&lt;/strong&gt;：&lt;code&gt;austin-stream&lt;/code&gt;和&lt;code&gt;austin-datahouse&lt;/code&gt;的作用？&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;：&lt;code&gt;austin-handler&lt;/code&gt;在发送消息的过程中会做些&lt;strong&gt;通用业务处理&lt;/strong&gt;以及&lt;strong&gt;发送消息&lt;/strong&gt;，这个过程会产生大量的日志数据。日志数据会被收集至MQ，由&lt;code&gt;austin-stream&lt;/code&gt;流式处理模块进行消费并最后将数据写入至&lt;code&gt;austin-datahouse&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e4bd420001c549ebad922637f7b2e38a~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Question&lt;/strong&gt;：&lt;code&gt;austin-admin&lt;/code&gt;和&lt;code&gt;austin-web&lt;/code&gt;和&lt;code&gt;austin-cron&lt;/code&gt;的作用？&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;：&lt;code&gt;autsin-admin&lt;/code&gt;是&lt;code&gt;austin&lt;/code&gt;项目的前端项目，可通过它实现对管理消息以及查看消息下发的情况，而&lt;code&gt;austin-web&lt;/code&gt;则是提供相关的接口给到&lt;code&gt;austin-admin&lt;/code&gt;进行调用（austin项目是前后端分离的）&lt;/p&gt; &#xA;&lt;p&gt;业务方可操作&lt;code&gt;austin-admin&lt;/code&gt;管理后台调用&lt;code&gt;austin-web&lt;/code&gt;创建&lt;strong&gt;定时&lt;/strong&gt;发送消息，&lt;code&gt;austin-cron&lt;/code&gt;就承载着定时任务处理的工作&lt;/p&gt; &#xA;&lt;h2&gt;使用姿势&lt;/h2&gt; &#xA;&lt;p&gt;目前引用的中间件教程的安装姿势均基于&lt;code&gt;Centos 7.6&lt;/code&gt;(&lt;strong&gt;完全部署所有的服务，大概8G内存&lt;/strong&gt;)，austin项目&lt;strong&gt;强依赖&lt;/strong&gt;&lt;code&gt;MySQL&lt;/code&gt;/&lt;code&gt;Redis&lt;/code&gt;/&lt;code&gt;Kafka&lt;/code&gt;/&lt;code&gt;apollo&lt;/code&gt;，&lt;strong&gt;弱依赖&lt;/strong&gt;&lt;code&gt;prometheus&lt;/code&gt;/&lt;code&gt;graylog&lt;/code&gt;/&lt;code&gt;flink&lt;/code&gt;/&lt;code&gt;xxl-job&lt;/code&gt;。如果缺少相关的组件可戳：&lt;a href=&#34;https://raw.githubusercontent.com/ZhongFuCheng3y/austin/master/INSTALL.md&#34;&gt;安装相关组件教程&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;实在想要&lt;code&gt;clone&lt;/code&gt;项目后不用自己部署环境直接在本地启动&lt;code&gt;debug&lt;/code&gt;，我这提供了&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;amp;mid=2247505577&amp;amp;idx=1&amp;amp;sn=5114f8f583755899c2946fbea0b22e4b&amp;amp;chksm=ebd497a8dca31ebe8f98344483a00c860863dfc3586e51eed95b25988151427fee8101311f4f&amp;amp;token=735778370&amp;amp;lang=zh_CN#rd&#34;&gt;会员服务&lt;/a&gt;，&lt;strong&gt;直连&lt;/strong&gt;部署好的服务器&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;、austin使用的MySQL版本&lt;strong&gt;5.7x&lt;/strong&gt;。如果目前使用的MySQL版本8.0，注意改变&lt;code&gt;pom.xml&lt;/code&gt;所依赖的版本&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2&lt;/strong&gt;、填写&lt;code&gt;application.properties&lt;/code&gt;中&lt;code&gt;austin-database&lt;/code&gt;对应的&lt;code&gt;ip/port/username/password&lt;/code&gt;信息&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;3&lt;/strong&gt;、执行&lt;code&gt;sql&lt;/code&gt;文件夹下的&lt;code&gt;austin.sql&lt;/code&gt;创建对应的表以及插入测试数据&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;4&lt;/strong&gt;、填写&lt;code&gt;application.properties&lt;/code&gt;中&lt;code&gt;austin-kafka&lt;/code&gt;对应的&lt;code&gt;ip&lt;/code&gt;/&lt;code&gt;port&lt;/code&gt;信息&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;5&lt;/strong&gt;、填写&lt;code&gt;application.properties&lt;/code&gt;中&lt;code&gt;austin-redis&lt;/code&gt;对应的&lt;code&gt;ip&lt;/code&gt;/&lt;code&gt;port&lt;/code&gt;信息&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;6&lt;/strong&gt;、检查&lt;code&gt;apollo&lt;/code&gt;的&lt;code&gt;app.id&lt;/code&gt;/&lt;code&gt;apollo.bootstrap.namespaces&lt;/code&gt;，检查创建的消息队列topic：&lt;code&gt;austin.business.topic.name&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;7&lt;/strong&gt;、以上配置信息都在&lt;code&gt;application.properties&lt;/code&gt;文件中修改。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;8&lt;/strong&gt;、由于使用了Apollo且我是在云服务器上安装的，我这边会直接跳过&lt;code&gt;metaserver&lt;/code&gt;服务发现，在&lt;code&gt;AustinApplication&lt;/code&gt;需要配置对应的apollo地址(注意端口!)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;9&lt;/strong&gt;、发送渠道&lt;strong&gt;账号的信息&lt;/strong&gt;都配置在&lt;strong&gt;apollo&lt;/strong&gt;，配置的示例参照&lt;code&gt;com.java3y.austin.support.utils#getAccount&lt;/code&gt;中的注释&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;10&lt;/strong&gt;、调用http接口&lt;code&gt;com.java3y.austin.web.controller#send&lt;/code&gt;给自己发一条短信或者邮件感受&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl -XPOST &#34;127.0.0.1:8080/send&#34;  -H &#39;Content-Type: application/json&#39;  -d &#39;{&#34;code&#34;:&#34;send&#34;,&#34;messageParam&#34;:{&#34;extra&#34;:null,&#34;receiver&#34;:&#34;13719333899&#34;},&#34;messageTemplateId&#34;:1}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;11&lt;/strong&gt;、austin前端管理系统部署（一分钟即能打开），戳&lt;a href=&#34;https://github.com/ZhongFuCheng3y/austin-admin&#34;&gt;GitHub&lt;/a&gt;或&lt;a href=&#34;https://gitee.com/zhongfucheng/austin-admin&#34;&gt;Gitee&lt;/a&gt;查看&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a023d9082fa644bda9b50144e02985cb~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7125184e9fbf4de8b522aecbd4e791df~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4adde725eeee443baf96f286f5429f05~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/01d028359e6e4229825a7fd8cc22c6c7~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;12&lt;/strong&gt;、正常使用&lt;strong&gt;数据管理&lt;/strong&gt;(查看实时数据链路下发)需要将&lt;code&gt;austin-stream&lt;/code&gt;的&lt;code&gt;jar&lt;/code&gt;包上传至&lt;code&gt;Flink&lt;/code&gt;，根据&lt;a href=&#34;https://raw.githubusercontent.com/ZhongFuCheng3y/austin/master/INSTALL.md&#34;&gt;部署文档&lt;/a&gt;启动Flink。在打&lt;code&gt;jar&lt;/code&gt;包前需要填写&lt;code&gt;com.java3y.austin.stream.constants.AustinFlinkConstant&lt;/code&gt;中的&lt;code&gt;redis&lt;/code&gt;和&lt;code&gt;kafka&lt;/code&gt;的&lt;code&gt;ip/port&lt;/code&gt;（注：日志的topic在&lt;code&gt;application.properties&lt;/code&gt;中的&lt;code&gt;austin.business.log.topic.name&lt;/code&gt;。如果没有该topic，需要提前创建)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;13&lt;/strong&gt;、正常使用&lt;strong&gt;定时任务&lt;/strong&gt;需要部署&lt;code&gt;xxl-job&lt;/code&gt;，根据&lt;a href=&#34;https://raw.githubusercontent.com/ZhongFuCheng3y/austin/master/INSTALL.md&#34;&gt;部署文档&lt;/a&gt;启动xxl的调度中心，并在&lt;code&gt;application.properteis&lt;/code&gt;中填写 &lt;code&gt;austin-xxl-job-ip&lt;/code&gt;和&lt;code&gt;austin-xxl-job-port&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;14&lt;/strong&gt;、正常使用&lt;strong&gt;分布式日志采集&lt;/strong&gt;需要部署&lt;code&gt;graylog&lt;/code&gt;，根据&lt;a href=&#34;https://raw.githubusercontent.com/ZhongFuCheng3y/austin/master/INSTALL.md&#34;&gt;部署文档&lt;/a&gt;启动&lt;code&gt;graylog&lt;/code&gt;，并在&lt;code&gt;application.properteis&lt;/code&gt;中填写 &lt;code&gt;austin-grayLog-ip&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;14&lt;/strong&gt;、正常使用&lt;strong&gt;系统监控&lt;/strong&gt;需要部署&lt;code&gt;promethus&lt;/code&gt;和&lt;code&gt;grafana&lt;/code&gt;，根据&lt;a href=&#34;https://raw.githubusercontent.com/ZhongFuCheng3y/austin/master/INSTALL.md&#34;&gt;部署文档&lt;/a&gt;配置&lt;code&gt;grafana&lt;/code&gt;图表&lt;/p&gt; &#xA;&lt;h2&gt;会员服务&lt;/h2&gt; &#xA;&lt;p&gt;收费课程是以&lt;strong&gt;项目&lt;/strong&gt;为主，代码在Gitee和GitHub上都是开源的，项目没有商业版，后面也不会有。那么，付费跟我自己去拉Git仓库拉代码下来看有什么区别？&lt;/p&gt; &#xA;&lt;p&gt;1、有很多人的自学能力和基础确实不太行，不知道怎么开始学习，从哪开始看起，学习项目的过程中会走很多弯路，很容易就迷茫了。付费最跟自学最主要的区别就是&lt;strong&gt;我的服务会更周到&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;p&gt;我会告诉你怎么开始学这个开源项目，哪些是重点需要掌握的，如何利用最短的时间把握整个系统架构和编码的设计，把时间节省下来去做其他事情。&lt;/p&gt; &#xA;&lt;p&gt;2、一个生产环境的系统肯定会依赖各种中间件，《消息推送平台-Austin》也是一样的。我专门买了两台服务器已经搭建好必要的依赖，付费的可以&lt;strong&gt;使用我的远程服务器&lt;/strong&gt;，在&lt;strong&gt;本地就可以直接启动运行体验和学习&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;3、项目在编写的过程中也经历多次的重构迭代，迭代的内容我是不会将以往文章内容重新修正发布，但语雀的文档内容一定是&lt;strong&gt;及时同步&lt;/strong&gt;，文档跟代码是保持一致的&lt;/p&gt; &#xA;&lt;p&gt;4、干练清爽的项目commit，可一步一步跟着commit还原整个系统的过程&lt;/p&gt; &#xA;&lt;p&gt;5、除了项目，还可以问我些学习经验、学习路线、简历编写、面试经验等等问题，技术和学习上的知识&lt;strong&gt;知无不言&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;详情可以看戳：&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;amp;mid=2247505577&amp;amp;idx=1&amp;amp;sn=5114f8f583755899c2946fbea0b22e4b&amp;amp;chksm=ebd497a8dca31ebe8f98344483a00c860863dfc3586e51eed95b25988151427fee8101311f4f&amp;amp;token=319992632&amp;amp;lang=zh_CN#rd&#34;&gt;我开通了付费渠道&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;里程碑&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Maven+SpringBoot项目搭建&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; logback日志记录项目运行时信息，引入common/guava/Hutool/Lombok/fastjson/OkHttp工具包&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 接入腾讯云渠道发送一条短信&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 使用SpringData JPA将短信发送记录存储至MySQL&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 使用SpringBoot接入Kafka&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 利用责任链完成对接入层的请求进行封装（责任链模式）&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 消费层实现数据隔离（线程池：生产者与消费者模式）&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 通用去重消息功能（SpringBoot接入Redis并使用pipeline减少网络请求）&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 配置服务器和docker容器以及SpringBoot应用的监控（prometheus+Grafana+auctuator）&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 接入分布式配置中心完成 丢失消息、白名单以及账号配置（Apollo分布式配置中心）&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 邮件渠道接入&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 日志链路数据追踪 + 注解式打印日志（优雅打印日志以及数据埋点）&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 接入GrayLog分布式日志收集框架&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 引入前端低代码平台AMIS搭建后台管理页面&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 接入分布式定时任务框架定时发送任务（xxl-job定时任务框架），编写上传文件接口并使用LazyPending批处理人群文件数据&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 接入实时流计算平台（Flink），实时日志数据根据用户维度和消息模板维度清洗至Redis&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 通过AMIS低代码平台接入echarts图表展示实时聚合后的数据&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 优雅停机、动态线程池参数配置&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 企业微信渠道接入&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 夜间屏蔽次日早晨推送（xxl-job定时任务框架，另类的延时队列）&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 钉钉渠道接入&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 单机限流实现&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 引入单测框架，编写部分单测用例&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 接入微信服务号渠道(已有pull request代码)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 接入微信小程序渠道(已有pull request代码)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 接入PUSH渠道&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 接入云片短信渠道，并短信支持流量配置，拉取腾讯云短信回执&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 完成接入钉钉机器人渠道所有类型的消息&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 完成接入钉钉工作渠道所有类型的消息，包括对文件素材的上传功能&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 总体架构已完成，持续做基础建设和优化代码&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;近期更新时间&lt;/strong&gt;：6月8号&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;近期更新功能&lt;/strong&gt;：完成接入钉钉机器人渠道所有类型的消息&lt;/p&gt; &#xA;&lt;h2&gt;项目交流&lt;/h2&gt; &#xA;&lt;p&gt;欢迎扫描下方二维码添加我的&lt;strong&gt;个人微信&lt;/strong&gt;备注：【&lt;strong&gt;项目&lt;/strong&gt;】，我会空闲的时候拉进项目交流群（群里会解答相关的问题）&lt;/p&gt; &#xA;&lt;img align=&#34;center&#34; src=&#34;https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/60efe6b0f4354b838244b96a15efdf49~tplv-k3u1fbpfcp-watermark.image&#34; width=&#34;300px&#34; height=&#34;300px&#34;&gt; &#xA;&lt;h2&gt;如何准备面试？&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;对线面试官&lt;/strong&gt;公众号持续更新&lt;strong&gt;面试系列&lt;/strong&gt;文章（对线面试官系列），深受各大开发的好评，已有不少的同学通过对线面试官系列得到BATTMD等一线大厂的的offer。一个&lt;strong&gt;讲人话的面试系列&lt;/strong&gt;，八股文不再是背诵。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c4a6cae132244355b9da6bd74d38d1ee~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;想要获取这份电子书，&lt;strong&gt;点击关注&lt;/strong&gt;下方公众号，回复「&lt;strong&gt;对线&lt;/strong&gt;」得到我的联系方式即可进群获取电子书&lt;/p&gt; &#xA;&lt;img align=&#34;center&#34; src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f87f574e93964921a4d02146bf3ccdac~tplv-k3u1fbpfcp-zoom-1.image&#34; width=&#34;300px&#34; height=&#34;300px&#34;&gt;</summary>
  </entry>
  <entry>
    <title>react-native-video/react-native-video</title>
    <updated>2022-06-12T01:31:50Z</updated>
    <id>tag:github.com,2022-06-12:/react-native-video/react-native-video</id>
    <link href="https://github.com/react-native-video/react-native-video" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A &lt;Video /&gt; component for react-native&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;react-native-video&lt;/h1&gt; &#xA;&lt;h4&gt;A &lt;code&gt;&amp;lt;Video&amp;gt;&lt;/code&gt; component for react-native.&lt;/h4&gt; &#xA;&lt;p&gt;Version 5.x recommends react-native &amp;gt;= 0.60.0 for Android 64bit builds and Android X support.&lt;/p&gt; &#xA;&lt;p&gt;Version 4.x requires react-native &amp;gt;= 0.57.0&lt;/p&gt; &#xA;&lt;p&gt;Version 3.x requires react-native &amp;gt;= 0.40.0&lt;/p&gt; &#xA;&lt;h3&gt;Version 5.0.0 breaking changes&lt;/h3&gt; &#xA;&lt;p&gt;Version 5 introduces breaking changes on Android, please check carefully the steps described there: &lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#Android-installation&#34;&gt;Android Installation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Version 4.0.0 breaking changes&lt;/h3&gt; &#xA;&lt;p&gt;Version 4.0.0 changes some behaviors and may require updates to your Gradle files. See &lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#updating&#34;&gt;Updating&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;Version 4.0.0 now requires Android target SDK 26+ and Gradle 3 plugin in order to support ExoPlayer 2.9.0. Google is dropping support for apps using target SDKs older than 26 as of October 2018 and Gradle 2 as of January 2019. React Native 0.57 defaults to Gradle 3 &amp;amp; SDK 27.&lt;/p&gt; &#xA;&lt;p&gt;If you need to support an older React Native version, you should use react-native-video 3.2.1.&lt;/p&gt; &#xA;&lt;h3&gt;Version 3.0.0 breaking changes&lt;/h3&gt; &#xA;&lt;p&gt;Version 3.0 features a number of changes to existing behavior. See &lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#updating&#34;&gt;Updating&lt;/a&gt; for changes.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#ios-installation&#34;&gt;iOS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#tvos-installation&#34;&gt;tvOS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#android-installation&#34;&gt;Android&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#windows-installation&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#react-native-dom-installation&#34;&gt;react-native-dom&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#examples&#34;&gt;Examples&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#ios-example&#34;&gt;iOS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#android-example&#34;&gt;Android&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#windows-example&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#ios-app-transport-security&#34;&gt;iOS App Transport Security&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#audio-mixing&#34;&gt;Audio Mixing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#android-expansion-file-usage&#34;&gt;Android Expansion File Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#updating&#34;&gt;Updating&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Using npm:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm install --save react-native-video&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or using yarn:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yarn add react-native-video&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then follow the instructions for your platform to link react-native-video into your project:&lt;/p&gt; &#xA;&lt;h3&gt;iOS installation&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;iOS details&lt;/summary&gt; &#xA; &lt;h4&gt;Standard Method&lt;/h4&gt; &#xA; &lt;p&gt;&lt;strong&gt;React Native 0.60 and above&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run &lt;code&gt;npx pod-install&lt;/code&gt;. Linking is not required in React Native 0.60 and above.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;React Native 0.59 and below&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run &lt;code&gt;react-native link react-native-video&lt;/code&gt; to link the react-native-video library.&lt;/p&gt; &#xA; &lt;h4&gt;Enable Static Linking for dependencies in your ios project Podfile&lt;/h4&gt; &#xA; &lt;p&gt;Add &lt;code&gt;use_frameworks! :linkage =&amp;gt; :static&lt;/code&gt; just under &lt;code&gt;platform :ios&lt;/code&gt; in your ios project Podfile.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/examples/basic/ios/Podfile#L5&#34;&gt;See the example ios project for reference&lt;/a&gt;&lt;/p&gt; &#xA; &lt;h4&gt;Using CocoaPods (required to enable caching)&lt;/h4&gt; &#xA; &lt;p&gt;Setup your Podfile like it is described in the &lt;a href=&#34;https://facebook.github.io/react-native/docs/integration-with-existing-apps#configuring-cocoapods-dependencies&#34;&gt;react-native documentation&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;Depending on your requirements you have to choose between the two possible subpodspecs:&lt;/p&gt; &#xA; &lt;p&gt;Video only:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;  pod &#39;Folly&#39;, :podspec =&amp;gt; &#39;../node_modules/react-native/third-party-podspecs/Folly.podspec&#39;&#xA;+  `pod &#39;react-native-video&#39;, :path =&amp;gt; &#39;../node_modules/react-native-video/react-native-video.podspec&#39;`&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Video with caching (&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/docs/caching.md&#34;&gt;more info&lt;/a&gt;):&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;  pod &#39;Folly&#39;, :podspec =&amp;gt; &#39;../node_modules/react-native/third-party-podspecs/Folly.podspec&#39;&#xA;+  `pod &#39;react-native-video/VideoCaching&#39;, :path =&amp;gt; &#39;../node_modules/react-native-video/react-native-video.podspec&#39;`&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;tvOS installation&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;tvOS details&lt;/summary&gt; &#xA; &lt;p&gt;&lt;code&gt;react-native link react-native-video&lt;/code&gt; doesn’t work properly with the tvOS target so we need to add the library manually.&lt;/p&gt; &#xA; &lt;p&gt;First select your project in Xcode.&lt;/p&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/docs/tvOS-step-1.jpg&#34; width=&#34;40%&#34;&gt; &#xA; &lt;p&gt;After that, select the tvOS target of your application and select « General » tab&lt;/p&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/docs/tvOS-step-2.jpg&#34; width=&#34;40%&#34;&gt; &#xA; &lt;p&gt;Scroll to « Linked Frameworks and Libraries » and tap on the + button&lt;/p&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/docs/tvOS-step-3.jpg&#34; width=&#34;40%&#34;&gt; &#xA; &lt;p&gt;Select RCTVideo-tvOS&lt;/p&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/docs/tvOS-step-4.jpg&#34; width=&#34;40%&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Android installation&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Android details&lt;/summary&gt; &#xA; &lt;p&gt;Linking is not required in React Native 0.60 and above. If your project is using React Native &amp;lt; 0.60, run &lt;code&gt;react-native link react-native-video&lt;/code&gt; to link the react-native-video library.&lt;/p&gt; &#xA; &lt;p&gt;Or if you have trouble, make the following additions to the given files manually:&lt;/p&gt; &#xA; &lt;h4&gt;&lt;strong&gt;android/settings.gradle&lt;/strong&gt;&lt;/h4&gt; &#xA; &lt;p&gt;The newer ExoPlayer library will work for most people.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;include &#39;:react-native-video&#39;&#xA;project(&#39;:react-native-video&#39;).projectDir = new File(rootProject.projectDir, &#39;../node_modules/react-native-video/android-exoplayer&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If you need to use the old Android MediaPlayer based player, use the following instead:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;include &#39;:react-native-video&#39;&#xA;project(&#39;:react-native-video&#39;).projectDir = new File(rootProject.projectDir, &#39;../node_modules/react-native-video/android&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;&lt;strong&gt;android/app/build.gradle&lt;/strong&gt;&lt;/h4&gt; &#xA; &lt;p&gt;From version &amp;gt;= 5.0.0, you have to apply these changes:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;dependencies {&#xA;   ...&#xA;    compile project(&#39;:react-native-video&#39;)&#xA;+   implementation &#34;androidx.appcompat:appcompat:1.0.0&#34;&#xA;-   implementation &#34;com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}&#34;&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;&lt;strong&gt;android/gradle.properties&lt;/strong&gt;&lt;/h4&gt; &#xA; &lt;p&gt;Migrating to AndroidX (needs version &amp;gt;= 5.0.0):&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-gradle.properties&#34;&gt;android.useAndroidX=true&#xA;android.enableJetifier=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;&lt;strong&gt;MainApplication.java&lt;/strong&gt;&lt;/h4&gt; &#xA; &lt;p&gt;If using com.facebook.react.PackageList to auto import native dependencies, there are no updates required here. Please see the android example project for more details. /examples/basic/android/app/src/main/java/com/videoplayer/MainApplication.java&lt;/p&gt; &#xA; &lt;h5&gt;For manual linking&lt;/h5&gt; &#xA; &lt;p&gt;On top, where imports are:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.brentvatne.react.ReactVideoPackage;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Add the &lt;code&gt;ReactVideoPackage&lt;/code&gt; class to your list of exported packages.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Override&#xA;protected List&amp;lt;ReactPackage&amp;gt; getPackages() {&#xA;    return Arrays.asList(&#xA;            new MainReactPackage(),&#xA;            new ReactVideoPackage()&#xA;    );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Windows installation&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Windows RNW C++/WinRT details&lt;/summary&gt; &#xA; &lt;h4&gt;Autolinking&lt;/h4&gt; &#xA; &lt;p&gt;&lt;strong&gt;React Native Windows 0.63 and above&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Autolinking should automatically add react-native-video to your app.&lt;/p&gt; &#xA; &lt;h4&gt;Manual Linking&lt;/h4&gt; &#xA; &lt;p&gt;&lt;strong&gt;React Native Windows 0.62&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Make the following additions to the given files manually:&lt;/p&gt; &#xA; &lt;h5&gt;&lt;strong&gt;windows\myapp.sln&lt;/strong&gt;&lt;/h5&gt; &#xA; &lt;p&gt;Add the &lt;em&gt;ReactNativeVideoCPP&lt;/em&gt; project to your solution (eg. &lt;code&gt;windows\myapp.sln&lt;/code&gt;):&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Open your solution in Visual Studio 2019&lt;/li&gt; &#xA;  &lt;li&gt;Right-click Solution icon in Solution Explorer &amp;gt; Add &amp;gt; Existing Project...&lt;/li&gt; &#xA;  &lt;li&gt;Select &lt;code&gt;node_modules\react-native-video\windows\ReactNativeVideoCPP\ReactNativeVideoCPP.vcxproj&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;h5&gt;&lt;strong&gt;windows\myapp\myapp.vcxproj&lt;/strong&gt;&lt;/h5&gt; &#xA; &lt;p&gt;Add a reference to &lt;em&gt;ReactNativeVideoCPP&lt;/em&gt; to your main application project (eg. &lt;code&gt;windows\myapp\myapp.vcxproj&lt;/code&gt;):&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Open your solution in Visual Studio 2019&lt;/li&gt; &#xA;  &lt;li&gt;Right-click main application project &amp;gt; Add &amp;gt; Reference...&lt;/li&gt; &#xA;  &lt;li&gt;Check &lt;em&gt;ReactNativeVideoCPP&lt;/em&gt; from Solution Projects&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;h5&gt;&lt;strong&gt;pch.h&lt;/strong&gt;&lt;/h5&gt; &#xA; &lt;p&gt;Add &lt;code&gt;#include &#34;winrt/ReactNativeVideoCPP.h&#34;&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;h5&gt;&lt;strong&gt;app.cpp&lt;/strong&gt;&lt;/h5&gt; &#xA; &lt;p&gt;Add &lt;code&gt;PackageProviders().Append(winrt::ReactNativeVideoCPP::ReactPackageProvider());&lt;/code&gt; before &lt;code&gt;InitializeComponent();&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;React Native Windows 0.61 and below&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Follow the manual linking instuctions for React Native Windows 0.62 above, but substitute &lt;em&gt;ReactNativeVideoCPP61&lt;/em&gt; for &lt;em&gt;ReactNativeVideoCPP&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;react-native-dom installation&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;react-native-dom details&lt;/summary&gt; &#xA; &lt;p&gt;Make the following additions to the given files manually:&lt;/p&gt; &#xA; &lt;h4&gt;&lt;strong&gt;dom/bootstrap.js&lt;/strong&gt;&lt;/h4&gt; &#xA; &lt;p&gt;Import RCTVideoManager and add it to the list of nativeModules:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { RNDomInstance } from &#34;react-native-dom&#34;;&#xA;import { name as appName } from &#34;../app.json&#34;;&#xA;import RCTVideoManager from &#39;react-native-video/dom/RCTVideoManager&#39;; // Add this&#xA;&#xA;// Path to RN Bundle Entrypoint ================================================&#xA;const rnBundlePath = &#34;./entry.bundle?platform=dom&amp;amp;dev=true&#34;;&#xA;&#xA;// React Native DOM Runtime Options =============================================&#xA;const ReactNativeDomOptions = {&#xA;  enableHotReload: false,&#xA;  nativeModules: [RCTVideoManager] // Add this&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Run &lt;code&gt;yarn xbasic install&lt;/code&gt; before running any of the examples.&lt;/p&gt; &#xA;&lt;h3&gt;iOS Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn xbasic ios&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Android Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn xbasic android&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn xbasic windows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Load the module&#xA;&#xA;import Video from &#39;react-native-video&#39;;&#xA;&#xA;// Within your render function, assuming you have a file called&#xA;// &#34;background.mp4&#34; in your project. You can include multiple videos&#xA;// on a single screen if you like.&#xA;&#xA;&amp;lt;Video source={{uri: &#34;background&#34;}}   // Can be a URL or a local file.&#xA;       ref={(ref) =&amp;gt; {&#xA;         this.player = ref&#xA;       }}                                      // Store reference&#xA;       onBuffer={this.onBuffer}                // Callback when remote video is buffering&#xA;       onError={this.videoError}               // Callback when video cannot be loaded&#xA;       style={styles.backgroundVideo} /&amp;gt;&#xA;&#xA;// Later on in your styles..&#xA;var styles = StyleSheet.create({&#xA;  backgroundVideo: {&#xA;    position: &#39;absolute&#39;,&#xA;    top: 0,&#xA;    left: 0,&#xA;    bottom: 0,&#xA;    right: 0,&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configurable props&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Plateforms Support&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#allowsexternalplayback&#34;&gt;allowsExternalPlayback&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#audioonly&#34;&gt;audioOnly&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;All&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#automaticallyWaitsToMinimizeStalling&#34;&gt;automaticallyWaitsToMinimizeStalling&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#backBufferDurationMs&#34;&gt;backBufferDurationMs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Android Exoplayer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#bufferconfig&#34;&gt;bufferConfig&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Android ExoPlayer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#contentStartTime&#34;&gt;contentStartTime&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Android Exoplayer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#controls&#34;&gt;controls&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Android ExoPlayer, iOS, react-native-dom&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#currentPlaybackTime&#34;&gt;currentPlaybackTime&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Android Exoplayer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#disableFocus&#34;&gt;disableFocus&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Android Exoplayer, iOS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#disableDisconnectError&#34;&gt;disableDisconnectError&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Android Exoplayer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#filter&#34;&gt;filter&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#filterEnabled&#34;&gt;filterEnabled&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#fullscreen&#34;&gt;fullscreen&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#fullscreenautorotate&#34;&gt;fullscreenAutorotate&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#fullscreenorientation&#34;&gt;fullscreenOrientation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#headers&#34;&gt;headers&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Android ExoPlayer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#hideshutterview&#34;&gt;hideShutterView&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Android ExoPlayer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#id&#34;&gt;id&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;react-native-dom&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#ignoresilentswitch&#34;&gt;ignoreSilentSwitch&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#maxbitrate&#34;&gt;maxBitRate&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Android ExoPlayer, iOS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#minLoadRetryCount&#34;&gt;minLoadRetryCount&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Android ExoPlayer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#mixWithOthers&#34;&gt;mixWithOthers&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#muted&#34;&gt;muted&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;All&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#paused&#34;&gt;paused&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;All&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#pictureinpicture&#34;&gt;pictureInPicture&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#playinbackground&#34;&gt;playInBackground&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Android ExoPlayer, Android MediaPlayer, iOS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#playwheninactive&#34;&gt;playWhenInactive&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#poster&#34;&gt;poster&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;All&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#posterresizemode&#34;&gt;posterResizeMode&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;All&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#preferredForwardBufferDuration&#34;&gt;preferredForwardBufferDuration&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#preventsDisplaySleepDuringVideoPlayback&#34;&gt;preventsDisplaySleepDuringVideoPlayback&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS, Android&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#progressupdateinterval&#34;&gt;progressUpdateInterval&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;All&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#rate&#34;&gt;rate&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;All&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#repeat&#34;&gt;repeat&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;All&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#reportbandwidth&#34;&gt;reportBandwidth&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Android ExoPlayer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#resizemode&#34;&gt;resizeMode&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Android ExoPlayer, Android MediaPlayer, iOS, Windows UWP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#selectedaudiotrack&#34;&gt;selectedAudioTrack&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Android ExoPlayer, iOS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#selectedtexttrack&#34;&gt;selectedTextTrack&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Android ExoPlayer, iOS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#selectedvideotrack&#34;&gt;selectedVideoTrack&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Android ExoPlayer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#source&#34;&gt;source&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;All&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#stereopan&#34;&gt;stereoPan&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Android MediaPlayer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#texttracks&#34;&gt;textTracks&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Android ExoPlayer, iOS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#trackId&#34;&gt;trackId&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Android ExoPlayer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#usetextureview&#34;&gt;useTextureView&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Android ExoPlayer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#useSecureView&#34;&gt;useSecureView&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Android Exoplayer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#volume&#34;&gt;volume&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;All&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#localSourceEncryptionKeyScheme&#34;&gt;localSourceEncryptionKeyScheme&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;All&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Event props&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Plateforms Support&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#onaudiobecomingnoisy&#34;&gt;onAudioBecomingNoisy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Android ExoPlayer, iOS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#onbandwidthupdate&#34;&gt;onBandwidthUpdate&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Android ExoPlayer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#onbuffer&#34;&gt;onBuffer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Android ExoPlayer, iOS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#onend&#34;&gt;onEnd&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;All&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#onexternalplaybackchange&#34;&gt;onExternalPlaybackChange&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#onfullscreenplayerwillpresent&#34;&gt;onFullscreenPlayerWillPresent&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Android ExoPlayer, Android MediaPlayer, iOS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#onfullscreenplayerdidpresent&#34;&gt;onFullscreenPlayerDidPresent&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Android ExoPlayer, Android MediaPlayer, iOS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#onfullscreenplayerwilldismiss&#34;&gt;onFullscreenPlayerWillDismiss&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Android ExoPlayer, Android MediaPlayer, iOS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#onfullscreenplayerdiddismiss&#34;&gt;onFullscreenPlayerDidDismiss&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Android ExoPlayer, Android MediaPlayer, iOS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#onload&#34;&gt;onLoad&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;All&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#onloadstart&#34;&gt;onLoadStart&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;All&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#onreadyfordisplay&#34;&gt;onReadyForDisplay&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Android ExoPlayer, Android MediaPlayer, iOS, Web&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#onpictureinpicturestatuschanged&#34;&gt;onPictureInPictureStatusChanged&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#onplaybackratechange&#34;&gt;onPlaybackRateChange&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;All&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#onprogress&#34;&gt;onProgress&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;All&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#onseek&#34;&gt;onSeek&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Android ExoPlayer, Android MediaPlayer, iOS, Windows UWP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#onrestoreuserinterfaceforpictureinpicturestop&#34;&gt;onRestoreUserInterfaceForPictureInPictureStop&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#ontimedmetadata&#34;&gt;onTimedMetadata&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Android ExoPlayer, Android MediaPlayer, iOS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Methods&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Plateforms Support&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#dismissfullscreenplayer&#34;&gt;dismissFullscreenPlayer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Android ExoPlayer, Android MediaPlayer, iOS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#presentfullscreenplayer&#34;&gt;presentFullscreenPlayer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Android ExoPlayer, Android MediaPlayer, iOS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#save&#34;&gt;save&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#restoreuserinterfaceforpictureinpicturestop&#34;&gt;restoreUserInterfaceForPictureInPictureStop&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#seek&#34;&gt;seek&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;All&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Configurable props&lt;/h3&gt; &#xA;&lt;h4&gt;allowsExternalPlayback&lt;/h4&gt; &#xA;&lt;p&gt;Indicates whether the player allows switching to external playback mode such as AirPlay or HDMI.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;true (default)&lt;/strong&gt; - allow switching to external playback mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;false&lt;/strong&gt; - Don&#39;t allow switching to external playback mode&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Platforms: iOS&lt;/p&gt; &#xA;&lt;h4&gt;audioOnly&lt;/h4&gt; &#xA;&lt;p&gt;Indicates whether the player should only play the audio track and instead of displaying the video track, show the poster instead.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;false (default)&lt;/strong&gt; - Display the video as normal&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;true&lt;/strong&gt; - Show the poster and play the audio&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For this to work, the poster prop must be set.&lt;/p&gt; &#xA;&lt;p&gt;Platforms: all&lt;/p&gt; &#xA;&lt;h4&gt;automaticallyWaitsToMinimizeStalling&lt;/h4&gt; &#xA;&lt;p&gt;A Boolean value that indicates whether the player should automatically delay playback in order to minimize stalling. For clients linked against iOS 10.0 and later&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;false&lt;/strong&gt; - Immediately starts playback&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;true (default)&lt;/strong&gt; - Delays playback in order to minimize stalling&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Platforms: iOS&lt;/p&gt; &#xA;&lt;h4&gt;backBufferDurationMs&lt;/h4&gt; &#xA;&lt;p&gt;The number of milliseconds of buffer to keep before the current position. This allows rewinding without rebuffering within that duration.&lt;/p&gt; &#xA;&lt;p&gt;Platforms: Android ExoPlayer&lt;/p&gt; &#xA;&lt;h4&gt;bufferConfig&lt;/h4&gt; &#xA;&lt;p&gt;Adjust the buffer settings. This prop takes an object with one or more of the properties listed below.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;minBufferMs&lt;/td&gt; &#xA;   &lt;td&gt;number&lt;/td&gt; &#xA;   &lt;td&gt;The default minimum duration of media that the player will attempt to ensure is buffered at all times, in milliseconds.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;maxBufferMs&lt;/td&gt; &#xA;   &lt;td&gt;number&lt;/td&gt; &#xA;   &lt;td&gt;The default maximum duration of media that the player will attempt to buffer, in milliseconds.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bufferForPlaybackMs&lt;/td&gt; &#xA;   &lt;td&gt;number&lt;/td&gt; &#xA;   &lt;td&gt;The default duration of media that must be buffered for playback to start or resume following a user action such as a seek, in milliseconds.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bufferForPlaybackAfterRebufferMs&lt;/td&gt; &#xA;   &lt;td&gt;number&lt;/td&gt; &#xA;   &lt;td&gt;The default duration of media that must be buffered for playback to resume after a rebuffer, in milliseconds. A rebuffer is defined to be caused by buffer depletion rather than a user action.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;maxHeapAllocationPercent&lt;/td&gt; &#xA;   &lt;td&gt;number&lt;/td&gt; &#xA;   &lt;td&gt;The percentage of available heap that the video can use to buffer, between 0 and 1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;minBackBufferMemoryReservePercent&lt;/td&gt; &#xA;   &lt;td&gt;number&lt;/td&gt; &#xA;   &lt;td&gt;The percentage of available app memory at which during startup the back buffer will be disabled, between 0 and 1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;minBufferMemoryReservePercent&lt;/td&gt; &#xA;   &lt;td&gt;number&lt;/td&gt; &#xA;   &lt;td&gt;The percentage of available app memory to keep in reserve that prevents buffer from using it, between 0 and 1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;This prop should only be set when you are setting the source, changing it after the media is loaded will cause it to be reloaded.&lt;/p&gt; &#xA;&lt;p&gt;Example with default values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bufferConfig={{&#xA;  minBufferMs: 15000,&#xA;  maxBufferMs: 50000,&#xA;  bufferForPlaybackMs: 2500,&#xA;  bufferForPlaybackAfterRebufferMs: 5000&#xA;}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Platforms: Android ExoPlayer&lt;/p&gt; &#xA;&lt;h4&gt;currentPlaybackTime&lt;/h4&gt; &#xA;&lt;p&gt;When playing an HLS live stream with a &lt;code&gt;EXT-X-PROGRAM-DATE-TIME&lt;/code&gt; tag configured, then this property will contain the epoch value in msec.&lt;/p&gt; &#xA;&lt;p&gt;Platforms: Android ExoPlayer, iOS&lt;/p&gt; &#xA;&lt;h4&gt;controls&lt;/h4&gt; &#xA;&lt;p&gt;Determines whether to show player controls.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;false (default)&lt;/strong&gt; - Don&#39;t show player controls&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;true&lt;/strong&gt; - Show player controls&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note on iOS, controls are always shown when in fullscreen mode.&lt;/p&gt; &#xA;&lt;h3&gt;contentStartTime&lt;/h3&gt; &#xA;&lt;p&gt;The start time in ms for SSAI content. This determines at what time to load the video info like resolutions. Use this only when you have SSAI stream where ads resolution is not the same as content resolution.&lt;/p&gt; &#xA;&lt;p&gt;For Android MediaPlayer, you will need to build your own controls or use a package like &lt;a href=&#34;https://github.com/itsnubix/react-native-video-controls&#34;&gt;react-native-video-controls&lt;/a&gt; or &lt;a href=&#34;https://github.com/cornedor/react-native-video-player&#34;&gt;react-native-video-player&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note on Android ExoPlayer, native controls are available by default. If needed, you can also add your controls or use a package like [react-native-video-controls].&lt;/p&gt; &#xA;&lt;p&gt;Platforms: Android ExoPlayer, iOS, react-native-dom&lt;/p&gt; &#xA;&lt;h4&gt;disableFocus&lt;/h4&gt; &#xA;&lt;p&gt;Determines whether video audio should override background music/audio in Android devices.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;** false (default)** - Override background audio/music&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;true&lt;/strong&gt; - Let background audio/music from other apps play&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Platforms: Android Exoplayer&lt;/p&gt; &#xA;&lt;h4&gt;disableDisconnectError&lt;/h4&gt; &#xA;&lt;p&gt;Determines if the player needs to throw an error when connection is lost or not&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;false (default)&lt;/strong&gt; - Player will throw an error when connection is lost&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;true&lt;/strong&gt; - Player will keep trying to buffer when network connect is lost&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Platforms: Android Exoplayer&lt;/p&gt; &#xA;&lt;h3&gt;DRM&lt;/h3&gt; &#xA;&lt;p&gt;To setup DRM please follow &lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/DRM.md&#34;&gt;this guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Platforms: Android Exoplayer, iOS&lt;/p&gt; &#xA;&lt;h4&gt;filter&lt;/h4&gt; &#xA;&lt;p&gt;Add video filter&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;FilterType.NONE (default)&lt;/strong&gt; - No Filter&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FilterType.INVERT&lt;/strong&gt; - CIColorInvert&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FilterType.MONOCHROME&lt;/strong&gt; - CIColorMonochrome&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FilterType.POSTERIZE&lt;/strong&gt; - CIColorPosterize&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FilterType.FALSE&lt;/strong&gt; - CIFalseColor&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FilterType.MAXIMUMCOMPONENT&lt;/strong&gt; - CIMaximumComponent&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FilterType.MINIMUMCOMPONENT&lt;/strong&gt; - CIMinimumComponent&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FilterType.CHROME&lt;/strong&gt; - CIPhotoEffectChrome&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FilterType.FADE&lt;/strong&gt; - CIPhotoEffectFade&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FilterType.INSTANT&lt;/strong&gt; - CIPhotoEffectInstant&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FilterType.MONO&lt;/strong&gt; - CIPhotoEffectMono&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FilterType.NOIR&lt;/strong&gt; - CIPhotoEffectNoir&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FilterType.PROCESS&lt;/strong&gt; - CIPhotoEffectProcess&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FilterType.TONAL&lt;/strong&gt; - CIPhotoEffectTonal&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FilterType.TRANSFER&lt;/strong&gt; - CIPhotoEffectTransfer&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FilterType.SEPIA&lt;/strong&gt; - CISepiaTone&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more details on these filters refer to the &lt;a href=&#34;https://developer.apple.com/library/archive/documentation/GraphicsImaging/Reference/CoreImageFilterReference/index.html#//apple_ref/doc/uid/TP30000136-SW55&#34;&gt;iOS docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Notes:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Using a filter can impact CPU usage. A workaround is to save the video with the filter and then load the saved video.&lt;/li&gt; &#xA; &lt;li&gt;Video filter is currently not supported on HLS playlists.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;filterEnabled&lt;/code&gt; must be set to &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Platforms: iOS&lt;/p&gt; &#xA;&lt;h4&gt;filterEnabled&lt;/h4&gt; &#xA;&lt;p&gt;Enable video filter.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;false (default)&lt;/strong&gt; - Don&#39;t enable filter&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;true&lt;/strong&gt; - Enable filter&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Platforms: iOS&lt;/p&gt; &#xA;&lt;h4&gt;fullscreen&lt;/h4&gt; &#xA;&lt;p&gt;Controls whether the player enters fullscreen on play.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;false (default)&lt;/strong&gt; - Don&#39;t display the video in fullscreen&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;true&lt;/strong&gt; - Display the video in fullscreen&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Platforms: iOS&lt;/p&gt; &#xA;&lt;h4&gt;fullscreenAutorotate&lt;/h4&gt; &#xA;&lt;p&gt;If a preferred &lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#fullscreenorientation&#34;&gt;fullscreenOrientation&lt;/a&gt; is set, causes the video to rotate to that orientation but permits rotation of the screen to orientation held by user. Defaults to TRUE.&lt;/p&gt; &#xA;&lt;p&gt;Platforms: iOS&lt;/p&gt; &#xA;&lt;h4&gt;fullscreenOrientation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;all (default)&lt;/strong&gt; -&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;landscape&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;portrait&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Platforms: iOS&lt;/p&gt; &#xA;&lt;h4&gt;headers&lt;/h4&gt; &#xA;&lt;p&gt;Pass headers to the HTTP client. Can be used for authorization. Headers must be a part of the source object.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;source={{&#xA;  uri: &#34;https://www.example.com/video.mp4&#34;,&#xA;  headers: {&#xA;    Authorization: &#39;bearer some-token-value&#39;,&#xA;    &#39;X-Custom-Header&#39;: &#39;some value&#39;&#xA;  }&#xA;}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Platforms: Android ExoPlayer&lt;/p&gt; &#xA;&lt;h4&gt;hideShutterView&lt;/h4&gt; &#xA;&lt;p&gt;Controls whether the ExoPlayer shutter view (black screen while loading) is enabled.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;false (default)&lt;/strong&gt; - Show shutter view&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;true&lt;/strong&gt; - Hide shutter view&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Platforms: Android ExoPlayer&lt;/p&gt; &#xA;&lt;h4&gt;id&lt;/h4&gt; &#xA;&lt;p&gt;Set the DOM id element so you can use document.getElementById on web platforms. Accepts string values.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;id=&#34;video&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Platforms: react-native-dom&lt;/p&gt; &#xA;&lt;h4&gt;ignoreSilentSwitch&lt;/h4&gt; &#xA;&lt;p&gt;Controls the iOS silent switch behavior&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&#34;inherit&#34; (default)&lt;/strong&gt; - Use the default AVPlayer behavior&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&#34;ignore&#34;&lt;/strong&gt; - Play audio even if the silent switch is set&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&#34;obey&#34;&lt;/strong&gt; - Don&#39;t play audio if the silent switch is set&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Platforms: iOS&lt;/p&gt; &#xA;&lt;h4&gt;maxBitRate&lt;/h4&gt; &#xA;&lt;p&gt;Sets the desired limit, in bits per second, of network bandwidth consumption when multiple video streams are available for a playlist.&lt;/p&gt; &#xA;&lt;p&gt;Default: 0. Don&#39;t limit the maxBitRate.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;maxBitRate={2000000} // 2 megabits&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Platforms: Android ExoPlayer, iOS&lt;/p&gt; &#xA;&lt;h4&gt;minLoadRetryCount&lt;/h4&gt; &#xA;&lt;p&gt;Sets the minimum number of times to retry loading data before failing and reporting an error to the application. Useful to recover from transient internet failures.&lt;/p&gt; &#xA;&lt;p&gt;Default: 3. Retry 3 times.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;minLoadRetryCount={5} // retry 5 times&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Platforms: Android ExoPlayer&lt;/p&gt; &#xA;&lt;h4&gt;mixWithOthers&lt;/h4&gt; &#xA;&lt;p&gt;Controls how Audio mix with other apps.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&#34;inherit&#34; (default)&lt;/strong&gt; - Use the default AVPlayer behavior&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&#34;mix&#34;&lt;/strong&gt; - Audio from this video mixes with audio from other apps.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&#34;duck&#34;&lt;/strong&gt; - Reduces the volume of other apps while audio from this video plays.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Platforms: iOS&lt;/p&gt; &#xA;&lt;h4&gt;muted&lt;/h4&gt; &#xA;&lt;p&gt;Controls whether the audio is muted&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;false (default)&lt;/strong&gt; - Don&#39;t mute audio&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;true&lt;/strong&gt; - Mute audio&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Platforms: all&lt;/p&gt; &#xA;&lt;h4&gt;paused&lt;/h4&gt; &#xA;&lt;p&gt;Controls whether the media is paused&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;false (default)&lt;/strong&gt; - Don&#39;t pause the media&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;true&lt;/strong&gt; - Pause the media&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Platforms: all&lt;/p&gt; &#xA;&lt;h4&gt;pictureInPicture&lt;/h4&gt; &#xA;&lt;p&gt;Determine whether the media should played as picture in picture.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;false (default)&lt;/strong&gt; - Don&#39;t not play as picture in picture&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;true&lt;/strong&gt; - Play the media as picture in picture&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Platforms: iOS&lt;/p&gt; &#xA;&lt;h4&gt;playInBackground&lt;/h4&gt; &#xA;&lt;p&gt;Determine whether the media should continue playing while the app is in the background. This allows customers to continue listening to the audio.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;false (default)&lt;/strong&gt; - Don&#39;t continue playing the media&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;true&lt;/strong&gt; - Continue playing the media&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To use this feature on iOS, you must:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/library/archive/documentation/Audio/Conceptual/AudioSessionProgrammingGuide/AudioSessionBasics/AudioSessionBasics.html#//apple_ref/doc/uid/TP40007875-CH3-SW3&#34;&gt;Enable Background Audio&lt;/a&gt; in your Xcode project&lt;/li&gt; &#xA; &lt;li&gt;Set the ignoreSilentSwitch prop to &#34;ignore&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Platforms: Android ExoPlayer, Android MediaPlayer, iOS&lt;/p&gt; &#xA;&lt;h4&gt;playWhenInactive&lt;/h4&gt; &#xA;&lt;p&gt;Determine whether the media should continue playing when notifications or the Control Center are in front of the video.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;false (default)&lt;/strong&gt; - Don&#39;t continue playing the media&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;true&lt;/strong&gt; - Continue playing the media&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Platforms: iOS&lt;/p&gt; &#xA;&lt;h4&gt;poster&lt;/h4&gt; &#xA;&lt;p&gt;An image to display while the video is loading &lt;br&gt;Value: string with a URL for the poster, e.g. &#34;&lt;a href=&#34;https://baconmockup.com/300/200/&#34;&gt;https://baconmockup.com/300/200/&lt;/a&gt;&#34;&lt;/p&gt; &#xA;&lt;p&gt;Platforms: all&lt;/p&gt; &#xA;&lt;h4&gt;posterResizeMode&lt;/h4&gt; &#xA;&lt;p&gt;Determines how to resize the poster image when the frame doesn&#39;t match the raw video dimensions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&#34;contain&#34; (default)&lt;/strong&gt; - Scale the image uniformly (maintain the image&#39;s aspect ratio) so that both dimensions (width and height) of the image will be equal to or less than the corresponding dimension of the view (minus padding).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&#34;center&#34;&lt;/strong&gt; - Center the image in the view along both dimensions. If the image is larger than the view, scale it down uniformly so that it is contained in the view.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&#34;cover&#34;&lt;/strong&gt; - Scale the image uniformly (maintain the image&#39;s aspect ratio) so that both dimensions (width and height) of the image will be equal to or larger than the corresponding dimension of the view (minus padding).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&#34;none&#34;&lt;/strong&gt; - Don&#39;t apply resize&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&#34;repeat&#34;&lt;/strong&gt; - Repeat the image to cover the frame of the view. The image will keep its size and aspect ratio. (iOS only)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&#34;stretch&#34;&lt;/strong&gt; - Scale width and height independently, This may change the aspect ratio of the src.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Platforms: all&lt;/p&gt; &#xA;&lt;h4&gt;preferredForwardBufferDuration&lt;/h4&gt; &#xA;&lt;p&gt;The duration the player should buffer media from the network ahead of the playhead to guard against playback disruption. Sets the &lt;a href=&#34;https://developer.apple.com/documentation/avfoundation/avplayeritem/1643630-preferredforwardbufferduration&#34;&gt;preferredForwardBufferDuration&lt;/a&gt; instance property on AVPlayerItem.&lt;/p&gt; &#xA;&lt;p&gt;Default: 0&lt;/p&gt; &#xA;&lt;p&gt;Platforms: iOS&lt;/p&gt; &#xA;&lt;h4&gt;preventsDisplaySleepDuringVideoPlayback&lt;/h4&gt; &#xA;&lt;p&gt;Controls whether or not the display should be allowed to sleep while playing the video. Default is not to allow display to sleep.&lt;/p&gt; &#xA;&lt;p&gt;Default: true&lt;/p&gt; &#xA;&lt;p&gt;Platforms: iOS, Android&lt;/p&gt; &#xA;&lt;h4&gt;progressUpdateInterval&lt;/h4&gt; &#xA;&lt;p&gt;Delay in milliseconds between onProgress events in milliseconds.&lt;/p&gt; &#xA;&lt;p&gt;Default: 250.0&lt;/p&gt; &#xA;&lt;p&gt;Platforms: all&lt;/p&gt; &#xA;&lt;h3&gt;rate&lt;/h3&gt; &#xA;&lt;p&gt;Speed at which the media should play.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;0.0&lt;/strong&gt; - Pauses the video&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;1.0&lt;/strong&gt; - Play at normal speed&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Other values&lt;/strong&gt; - Slow down or speed up playback&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Platforms: all&lt;/p&gt; &#xA;&lt;p&gt;Note: For Android MediaPlayer, rate is only supported on Android 6.0 and higher devices.&lt;/p&gt; &#xA;&lt;h4&gt;repeat&lt;/h4&gt; &#xA;&lt;p&gt;Determine whether to repeat the video when the end is reached&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;false (default)&lt;/strong&gt; - Don&#39;t repeat the video&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;true&lt;/strong&gt; - Repeat the video&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Platforms: all&lt;/p&gt; &#xA;&lt;h4&gt;reportBandwidth&lt;/h4&gt; &#xA;&lt;p&gt;Determine whether to generate onBandwidthUpdate events. This is needed due to the high frequency of these events on ExoPlayer.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;false (default)&lt;/strong&gt; - Don&#39;t generate onBandwidthUpdate events&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;true&lt;/strong&gt; - Generate onBandwidthUpdate events&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Platforms: Android ExoPlayer&lt;/p&gt; &#xA;&lt;h4&gt;resizeMode&lt;/h4&gt; &#xA;&lt;p&gt;Determines how to resize the video when the frame doesn&#39;t match the raw video dimensions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&#34;none&#34; (default)&lt;/strong&gt; - Don&#39;t apply resize&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&#34;contain&#34;&lt;/strong&gt; - Scale the video uniformly (maintain the video&#39;s aspect ratio) so that both dimensions (width and height) of the video will be equal to or less than the corresponding dimension of the view (minus padding).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&#34;cover&#34;&lt;/strong&gt; - Scale the video uniformly (maintain the video&#39;s aspect ratio) so that both dimensions (width and height) of the image will be equal to or larger than the corresponding dimension of the view (minus padding).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&#34;stretch&#34;&lt;/strong&gt; - Scale width and height independently, This may change the aspect ratio of the src.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Platforms: Android ExoPlayer, Android MediaPlayer, iOS, Windows UWP&lt;/p&gt; &#xA;&lt;h4&gt;selectedAudioTrack&lt;/h4&gt; &#xA;&lt;p&gt;Configure which audio track, if any, is played.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;selectedAudioTrack={{&#xA;  type: Type,&#xA;  value: Value&#xA;}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;selectedAudioTrack={{&#xA;  type: &#34;title&#34;,&#xA;  value: &#34;Dubbing&#34;&#xA;}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Value&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#34;system&#34; (default)&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;   &lt;td&gt;Play the audio track that matches the system language. If none match, play the first track.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#34;disabled&#34;&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;   &lt;td&gt;Turn off audio&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#34;title&#34;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Play the audio track with the title specified as the Value, e.g. &#34;French&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#34;language&#34;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Play the audio track with the language specified as the Value, e.g. &#34;fr&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#34;index&#34;&lt;/td&gt; &#xA;   &lt;td&gt;number&lt;/td&gt; &#xA;   &lt;td&gt;Play the audio track with the index specified as the value, e.g. 0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;If a track matching the specified Type (and Value if appropriate) is unavailable, the first audio track will be played. If multiple tracks match the criteria, the first match will be used.&lt;/p&gt; &#xA;&lt;p&gt;Platforms: Android ExoPlayer, iOS&lt;/p&gt; &#xA;&lt;h4&gt;selectedTextTrack&lt;/h4&gt; &#xA;&lt;p&gt;Configure which text track (caption or subtitle), if any, is shown.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;selectedTextTrack={{&#xA;  type: Type,&#xA;  value: Value&#xA;}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;selectedTextTrack={{&#xA;  type: &#34;title&#34;,&#xA;  value: &#34;English Subtitles&#34;&#xA;}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Value&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#34;system&#34; (default)&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;   &lt;td&gt;Display captions only if the system preference for captions is enabled&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#34;disabled&#34;&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;   &lt;td&gt;Don&#39;t display a text track&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#34;title&#34;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Display the text track with the title specified as the Value, e.g. &#34;French 1&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#34;language&#34;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Display the text track with the language specified as the Value, e.g. &#34;fr&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#34;index&#34;&lt;/td&gt; &#xA;   &lt;td&gt;number&lt;/td&gt; &#xA;   &lt;td&gt;Display the text track with the index specified as the value, e.g. 0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Both iOS &amp;amp; Android (only 4.4 and higher) offer Settings to enable Captions for hearing impaired people. If &#34;system&#34; is selected and the Captions Setting is enabled, iOS/Android will look for a caption that matches that customer&#39;s language and display it.&lt;/p&gt; &#xA;&lt;p&gt;If a track matching the specified Type (and Value if appropriate) is unavailable, no text track will be displayed. If multiple tracks match the criteria, the first match will be used.&lt;/p&gt; &#xA;&lt;p&gt;Platforms: Android ExoPlayer, iOS&lt;/p&gt; &#xA;&lt;h4&gt;selectedVideoTrack&lt;/h4&gt; &#xA;&lt;p&gt;Configure which video track should be played. By default, the player uses Adaptive Bitrate Streaming to automatically select the stream it thinks will perform best based on available bandwidth.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;selectedVideoTrack={{&#xA;  type: Type,&#xA;  value: Value&#xA;}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;selectedVideoTrack={{&#xA;  type: &#34;resolution&#34;,&#xA;  value: 480&#xA;}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Value&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#34;auto&#34; (default)&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;   &lt;td&gt;Let the player determine which track to play using ABR&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#34;disabled&#34;&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;   &lt;td&gt;Turn off video&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#34;resolution&#34;&lt;/td&gt; &#xA;   &lt;td&gt;number&lt;/td&gt; &#xA;   &lt;td&gt;Play the video track with the height specified, e.g. 480 for the 480p stream&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#34;index&#34;&lt;/td&gt; &#xA;   &lt;td&gt;number&lt;/td&gt; &#xA;   &lt;td&gt;Play the video track with the index specified as the value, e.g. 0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;If a track matching the specified Type (and Value if appropriate) is unavailable, ABR will be used.&lt;/p&gt; &#xA;&lt;p&gt;Platforms: Android ExoPlayer&lt;/p&gt; &#xA;&lt;h4&gt;source&lt;/h4&gt; &#xA;&lt;p&gt;Sets the media source. You can pass an asset loaded via require or an object with a uri.&lt;/p&gt; &#xA;&lt;p&gt;Setting the source will trigger the player to attempt to load the provided media with all other given props. Please be sure that all props are provided before/at the same time as setting the source.&lt;/p&gt; &#xA;&lt;p&gt;Rendering the player component with a null source will init the player, and start playing once a source value is provided.&lt;/p&gt; &#xA;&lt;p&gt;Providing a null source value after loading a previous source will stop playback, and clear out the previous source content.&lt;/p&gt; &#xA;&lt;p&gt;The docs for this prop are incomplete and will be updated as each option is investigated and tested.&lt;/p&gt; &#xA;&lt;h5&gt;Asset loaded via require&lt;/h5&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;const sintel = require(&#39;./sintel.mp4&#39;);&#xA;&#xA;source={sintel}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;URI string&lt;/h5&gt; &#xA;&lt;p&gt;A number of URI schemes are supported by passing an object with a &lt;code&gt;uri&lt;/code&gt; attribute.&lt;/p&gt; &#xA;&lt;h6&gt;Web address (http://, https://)&lt;/h6&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;source={{uri: &#39;https://www.sample-videos.com/video/mp4/720/big_buck_bunny_720p_10mb.mp4&#39; }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Platforms: all&lt;/p&gt; &#xA;&lt;h6&gt;File path (file://)&lt;/h6&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;source={{ uri: &#39;file:///sdcard/Movies/sintel.mp4&#39; }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Your app will need to request permission to read external storage if you&#39;re accessing a file outside your app.&lt;/p&gt; &#xA;&lt;p&gt;Platforms: Android ExoPlayer, Android MediaPlayer, possibly others&lt;/p&gt; &#xA;&lt;h6&gt;iPod Library (ipod-library://)&lt;/h6&gt; &#xA;&lt;p&gt;Path to a sound file in your iTunes library. Typically shared from iTunes to your app.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;source={{ uri: &#39;ipod-library:///path/to/music.mp3&#39; }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Using this feature adding an entry for NSAppleMusicUsageDescription to your Info.plist file as described &lt;a href=&#34;https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Platforms: iOS&lt;/p&gt; &#xA;&lt;h5&gt;Explicit mimetype for the stream&lt;/h5&gt; &#xA;&lt;p&gt;Provide a member &lt;code&gt;type&lt;/code&gt; with value (&lt;code&gt;mpd&lt;/code&gt;/&lt;code&gt;m3u8&lt;/code&gt;/&lt;code&gt;ism&lt;/code&gt;) inside the source object. Sometimes is needed when URL extension does not match with the mimetype that you are expecting, as seen on the next example. (Extension is .ism -smooth streaming- but file served is on format mpd -mpeg dash-)&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;source={{ uri: &#39;http://host-serving-a-type-different-than-the-extension.ism/manifest(format=mpd-time-csf)&#39;,&#xA;type: &#39;mpd&#39; }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Other protocols&lt;/h6&gt; &#xA;&lt;p&gt;The following other types are supported on some platforms, but aren&#39;t fully documented yet: &lt;code&gt;content://, ms-appx://, ms-appdata://, assets-library://&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;stereoPan&lt;/h4&gt; &#xA;&lt;p&gt;Adjust the balance of the left and right audio channels. Any value between –1.0 and 1.0 is accepted.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;-1.0&lt;/strong&gt; - Full left&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;0.0 (default)&lt;/strong&gt; - Center&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;1.0&lt;/strong&gt; - Full right&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Platforms: Android MediaPlayer&lt;/p&gt; &#xA;&lt;h4&gt;textTracks&lt;/h4&gt; &#xA;&lt;p&gt;Load one or more &#34;sidecar&#34; text tracks. This takes an array of objects representing each track. Each object should have the format:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;title&lt;/td&gt; &#xA;   &lt;td&gt;Descriptive name for the track&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;language&lt;/td&gt; &#xA;   &lt;td&gt;2 letter &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes&#34;&gt;ISO 639-1 code&lt;/a&gt; representing the language&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;type&lt;/td&gt; &#xA;   &lt;td&gt;Mime type of the track&lt;br&gt; * TextTrackType.SRT - SubRip (.srt)&lt;br&gt; * TextTrackType.TTML - TTML (.ttml)&lt;br&gt; * TextTrackType.VTT - WebVTT (.vtt)&lt;br&gt;iOS only supports VTT, Android ExoPlayer supports all 3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;uri&lt;/td&gt; &#xA;   &lt;td&gt;URL for the text track. Currently, only tracks hosted on a webserver are supported&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;On iOS, sidecar text tracks are only supported for individual files, not HLS playlists. For HLS, you should include the text tracks as part of the playlist.&lt;/p&gt; &#xA;&lt;p&gt;Note: Due to iOS limitations, sidecar text tracks are not compatible with Airplay. If textTracks are specified, AirPlay support will be automatically disabled.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import { TextTrackType }, Video from &#39;react-native-video&#39;;&#xA;&#xA;textTracks={[&#xA;  {&#xA;    title: &#34;English CC&#34;,&#xA;    language: &#34;en&#34;,&#xA;    type: TextTrackType.VTT, // &#34;text/vtt&#34;&#xA;    uri: &#34;https://bitdash-a.akamaihd.net/content/sintel/subtitles/subtitles_en.vtt&#34;&#xA;  },&#xA;  {&#xA;    title: &#34;Spanish Subtitles&#34;,&#xA;    language: &#34;es&#34;,&#xA;    type: TextTrackType.SRT, // &#34;application/x-subrip&#34;&#xA;    uri: &#34;https://durian.blender.org/wp-content/content/subtitles/sintel_es.srt&#34;&#xA;  }&#xA;]}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Platforms: Android ExoPlayer, iOS&lt;/p&gt; &#xA;&lt;h4&gt;trackId&lt;/h4&gt; &#xA;&lt;p&gt;Configure an identifier for the video stream to link the playback context to the events emitted.&lt;/p&gt; &#xA;&lt;p&gt;Platforms: Android ExoPlayer&lt;/p&gt; &#xA;&lt;h4&gt;useTextureView&lt;/h4&gt; &#xA;&lt;p&gt;Controls whether to output to a TextureView or SurfaceView.&lt;/p&gt; &#xA;&lt;p&gt;SurfaceView is more efficient and provides better performance but has two limitations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It can&#39;t be animated, transformed or scaled&lt;/li&gt; &#xA; &lt;li&gt;You can&#39;t overlay multiple SurfaceViews&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;useTextureView can only be set at same time you&#39;re setting the source.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;true (default)&lt;/strong&gt; - Use a TextureView&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;false&lt;/strong&gt; - Use a SurfaceView&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Platforms: Android ExoPlayer&lt;/p&gt; &#xA;&lt;h4&gt;useSecureView&lt;/h4&gt; &#xA;&lt;p&gt;Force the output to a SurfaceView and enables the secure surface.&lt;/p&gt; &#xA;&lt;p&gt;This will override useTextureView flag.&lt;/p&gt; &#xA;&lt;p&gt;SurfaceView is is the only one that can be labeled as secure.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;true&lt;/strong&gt; - Use security&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;false (default)&lt;/strong&gt; - Do not use security&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Platforms: Android ExoPlayer&lt;/p&gt; &#xA;&lt;h4&gt;volume&lt;/h4&gt; &#xA;&lt;p&gt;Adjust the volume.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;1.0 (default)&lt;/strong&gt; - Play at full volume&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;0.0&lt;/strong&gt; - Mute the audio&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Other values&lt;/strong&gt; - Reduce volume&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Platforms: all&lt;/p&gt; &#xA;&lt;h4&gt;localSourceEncryptionKeyScheme&lt;/h4&gt; &#xA;&lt;p&gt;Set the url scheme for stream encryption key for local assets&lt;/p&gt; &#xA;&lt;p&gt;Type: String&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;localSourceEncryptionKeyScheme=&#34;my-offline-key&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Platforms: iOS&lt;/p&gt; &#xA;&lt;h3&gt;Event props&lt;/h3&gt; &#xA;&lt;h4&gt;onAudioBecomingNoisy&lt;/h4&gt; &#xA;&lt;p&gt;Callback function that is called when the audio is about to become &#39;noisy&#39; due to a change in audio outputs. Typically this is called when audio output is being switched from an external source like headphones back to the internal speaker. It&#39;s a good idea to pause the media when this happens so the speaker doesn&#39;t start blasting sound.&lt;/p&gt; &#xA;&lt;p&gt;Payload: none&lt;/p&gt; &#xA;&lt;p&gt;Platforms: Android ExoPlayer, iOS&lt;/p&gt; &#xA;&lt;h4&gt;onBandwidthUpdate&lt;/h4&gt; &#xA;&lt;p&gt;Callback function that is called when the available bandwidth changes.&lt;/p&gt; &#xA;&lt;p&gt;Payload:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bitrate&lt;/td&gt; &#xA;   &lt;td&gt;number&lt;/td&gt; &#xA;   &lt;td&gt;The estimated bitrate in bits/sec&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  bitrate: 1000000&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: On Android ExoPlayer, you must set the &lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#reportbandwidth&#34;&gt;reportBandwidth&lt;/a&gt; prop to enable this event. This is due to the high volume of events generated.&lt;/p&gt; &#xA;&lt;p&gt;Platforms: Android ExoPlayer&lt;/p&gt; &#xA;&lt;h4&gt;onBuffer&lt;/h4&gt; &#xA;&lt;p&gt;Callback function that is called when the player buffers.&lt;/p&gt; &#xA;&lt;p&gt;Payload:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;isBuffering&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;Boolean indicating whether buffering is active&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  isBuffering: true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Platforms: Android ExoPlayer, iOS&lt;/p&gt; &#xA;&lt;h4&gt;onEnd&lt;/h4&gt; &#xA;&lt;p&gt;Callback function that is called when the player reaches the end of the media.&lt;/p&gt; &#xA;&lt;p&gt;Payload: none&lt;/p&gt; &#xA;&lt;p&gt;Platforms: all&lt;/p&gt; &#xA;&lt;h4&gt;onExternalPlaybackChange&lt;/h4&gt; &#xA;&lt;p&gt;Callback function that is called when external playback mode for current playing video has changed. Mostly useful when connecting/disconnecting to Apple TV – it&#39;s called on connection/disconnection.&lt;/p&gt; &#xA;&lt;p&gt;Payload:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;isExternalPlaybackActive&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;Boolean indicating whether external playback mode is active&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  isExternalPlaybackActive: true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Platforms: iOS&lt;/p&gt; &#xA;&lt;h4&gt;onFullscreenPlayerWillPresent&lt;/h4&gt; &#xA;&lt;p&gt;Callback function that is called when the player is about to enter fullscreen mode.&lt;/p&gt; &#xA;&lt;p&gt;Payload: none&lt;/p&gt; &#xA;&lt;p&gt;Platforms: Android ExoPlayer, Android MediaPlayer, iOS&lt;/p&gt; &#xA;&lt;h4&gt;onFullscreenPlayerDidPresent&lt;/h4&gt; &#xA;&lt;p&gt;Callback function that is called when the player has entered fullscreen mode.&lt;/p&gt; &#xA;&lt;p&gt;Payload: none&lt;/p&gt; &#xA;&lt;p&gt;Platforms: Android ExoPlayer, Android MediaPlayer, iOS&lt;/p&gt; &#xA;&lt;h4&gt;onFullscreenPlayerWillDismiss&lt;/h4&gt; &#xA;&lt;p&gt;Callback function that is called when the player is about to exit fullscreen mode.&lt;/p&gt; &#xA;&lt;p&gt;Payload: none&lt;/p&gt; &#xA;&lt;p&gt;Platforms: Android ExoPlayer, Android MediaPlayer, iOS&lt;/p&gt; &#xA;&lt;h4&gt;onFullscreenPlayerDidDismiss&lt;/h4&gt; &#xA;&lt;p&gt;Callback function that is called when the player has exited fullscreen mode.&lt;/p&gt; &#xA;&lt;p&gt;Payload: none&lt;/p&gt; &#xA;&lt;p&gt;Platforms: Android ExoPlayer, Android MediaPlayer, iOS&lt;/p&gt; &#xA;&lt;h4&gt;onLoad&lt;/h4&gt; &#xA;&lt;p&gt;Callback function that is called when the media is loaded and ready to play.&lt;/p&gt; &#xA;&lt;p&gt;Payload:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;currentPosition&lt;/td&gt; &#xA;   &lt;td&gt;number&lt;/td&gt; &#xA;   &lt;td&gt;Time in seconds where the media will start&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;duration&lt;/td&gt; &#xA;   &lt;td&gt;number&lt;/td&gt; &#xA;   &lt;td&gt;Length of the media in seconds&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;naturalSize&lt;/td&gt; &#xA;   &lt;td&gt;object&lt;/td&gt; &#xA;   &lt;td&gt;Properties:&lt;br&gt; * width - Width in pixels that the video was encoded at&lt;br&gt; * height - Height in pixels that the video was encoded at&lt;br&gt; * orientation - &#34;portrait&#34; or &#34;landscape&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;audioTracks&lt;/td&gt; &#xA;   &lt;td&gt;array&lt;/td&gt; &#xA;   &lt;td&gt;An array of audio track info objects with the following properties:&lt;br&gt; * index - Index number&lt;br&gt; * title - Description of the track&lt;br&gt; * language - 2 letter &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes&#34;&gt;ISO 639-1&lt;/a&gt; or 3 letter &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_ISO_639-2_codes&#34;&gt;ISO639-2&lt;/a&gt; language code&lt;br&gt; * type - Mime type of track&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;textTracks&lt;/td&gt; &#xA;   &lt;td&gt;array&lt;/td&gt; &#xA;   &lt;td&gt;An array of text track info objects with the following properties:&lt;br&gt; * index - Index number&lt;br&gt; * title - Description of the track&lt;br&gt; * language - 2 letter &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes&#34;&gt;ISO 639-1&lt;/a&gt; or 3 letter &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_ISO_639-2_codes&#34;&gt;ISO 639-2&lt;/a&gt; language code&lt;br&gt; * type - Mime type of track&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;videoTracks&lt;/td&gt; &#xA;   &lt;td&gt;array&lt;/td&gt; &#xA;   &lt;td&gt;An array of video track info objects with the following properties:&lt;br&gt; * trackId - ID for the track&lt;br&gt; * bitrate - Bit rate in bits per second&lt;br&gt; * codecs - Comma separated list of codecs&lt;br&gt; * height - Height of the video&lt;br&gt; * width - Width of the video&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{ &#xA;  canPlaySlowForward: true,&#xA;  canPlayReverse: false,&#xA;  canPlaySlowReverse: false,&#xA;  canPlayFastForward: false,&#xA;  canStepForward: false,&#xA;  canStepBackward: false,&#xA;  currentTime: 0,&#xA;  duration: 5910.208984375,&#xA;  naturalSize: {&#xA;     height: 1080&#xA;     orientation: &#39;landscape&#39;&#xA;     width: &#39;1920&#39;&#xA;  },&#xA;  audioTracks: [&#xA;    { language: &#39;es&#39;, title: &#39;Spanish&#39;, type: &#39;audio/mpeg&#39;, index: 0 },&#xA;    { language: &#39;en&#39;, title: &#39;English&#39;, type: &#39;audio/mpeg&#39;, index: 1 }&#xA;  ],&#xA;  textTracks: [&#xA;    { title: &#39;#1 French&#39;, language: &#39;fr&#39;, index: 0, type: &#39;text/vtt&#39; },&#xA;    { title: &#39;#2 English CC&#39;, language: &#39;en&#39;, index: 1, type: &#39;text/vtt&#39; },&#xA;    { title: &#39;#3 English Director Commentary&#39;, language: &#39;en&#39;, index: 2, type: &#39;text/vtt&#39; }&#xA;  ],&#xA;  videoTracks: [&#xA;    { bitrate: 3987904, codecs: &#34;avc1.640028&#34;, height: 720, trackId: &#34;f1-v1-x3&#34;, width: 1280 },&#xA;    { bitrate: 7981888, codecs: &#34;avc1.640028&#34;, height: 1080, trackId: &#34;f2-v1-x3&#34;, width: 1920 },&#xA;    { bitrate: 1994979, codecs: &#34;avc1.4d401f&#34;, height: 480, trackId: &#34;f3-v1-x3&#34;, width: 848 }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Platforms: all&lt;/p&gt; &#xA;&lt;h4&gt;onLoadStart&lt;/h4&gt; &#xA;&lt;p&gt;Callback function that is called when the media starts loading.&lt;/p&gt; &#xA;&lt;p&gt;Payload:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;isNetwork&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;type&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;uri&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  isNetwork: true,&#xA;  type: &#39;&#39;,&#xA;  uri: &#39;https://bitdash-a.akamaihd.net/content/sintel/hls/playlist.m3u8&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Platforms: all&lt;/p&gt; &#xA;&lt;h4&gt;onPlaybackStateChanged&lt;/h4&gt; &#xA;&lt;p&gt;Callback function that is called when the playback state changes.&lt;/p&gt; &#xA;&lt;p&gt;Payload:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;isPlaying&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  isPlaying: true,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Platforms: Android ExoPlayer&lt;/p&gt; &#xA;&lt;h4&gt;onReadyForDisplay&lt;/h4&gt; &#xA;&lt;p&gt;Callback function that is called when the first video frame is ready for display. This is when the poster is removed.&lt;/p&gt; &#xA;&lt;p&gt;Payload: none&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS: &lt;a href=&#34;https://developer.apple.com/documentation/avkit/avplayerviewcontroller/1615830-readyfordisplay?language=objc&#34;&gt;readyForDisplay&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Android: &lt;a href=&#34;https://developer.android.com/reference/android/media/MediaPlayer#MEDIA_INFO_VIDEO_RENDERING_START&#34;&gt;MEDIA_INFO_VIDEO_RENDERING_START&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Android ExoPlayer &lt;a href=&#34;https://exoplayer.dev/doc/reference/com/google/android/exoplayer2/Player.html#STATE_READY&#34;&gt;STATE_READY&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Platforms: Android ExoPlayer, Android MediaPlayer, iOS, Web&lt;/p&gt; &#xA;&lt;h4&gt;onPictureInPictureStatusChanged&lt;/h4&gt; &#xA;&lt;p&gt;Callback function that is called when picture in picture becomes active or inactive.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;isActive&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;Boolean indicating whether picture in picture is active&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;isActive: true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Platforms: iOS&lt;/p&gt; &#xA;&lt;h4&gt;onPlaybackRateChange&lt;/h4&gt; &#xA;&lt;p&gt;Callback function that is called when the rate of playback changes - either paused or starts/resumes.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;playbackRate&lt;/td&gt; &#xA;   &lt;td&gt;number&lt;/td&gt; &#xA;   &lt;td&gt;0 when playback is paused, 1 when playing at normal speed. Other values when playback is slowed down or sped up&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  playbackRate: 0, // indicates paused&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Platforms: all&lt;/p&gt; &#xA;&lt;h4&gt;onProgress&lt;/h4&gt; &#xA;&lt;p&gt;Callback function that is called every progressUpdateInterval milliseconds with info about which position the media is currently playing.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;currentTime&lt;/td&gt; &#xA;   &lt;td&gt;number&lt;/td&gt; &#xA;   &lt;td&gt;Current position in seconds&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;playableDuration&lt;/td&gt; &#xA;   &lt;td&gt;number&lt;/td&gt; &#xA;   &lt;td&gt;Position to where the media can be played to using just the buffer in seconds&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;seekableDuration&lt;/td&gt; &#xA;   &lt;td&gt;number&lt;/td&gt; &#xA;   &lt;td&gt;Position to where the media can be seeked to in seconds. Typically, the total length of the media&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  currentTime: 5.2,&#xA;  playableDuration: 34.6,&#xA;  seekableDuration: 888&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Platforms: all&lt;/p&gt; &#xA;&lt;h4&gt;onSeek&lt;/h4&gt; &#xA;&lt;p&gt;Callback function that is called when a seek completes.&lt;/p&gt; &#xA;&lt;p&gt;Payload:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;currentTime&lt;/td&gt; &#xA;   &lt;td&gt;number&lt;/td&gt; &#xA;   &lt;td&gt;The current time after the seek&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;seekTime&lt;/td&gt; &#xA;   &lt;td&gt;number&lt;/td&gt; &#xA;   &lt;td&gt;The requested time&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  currentTime: 100.5&#xA;  seekTime: 100&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Both the currentTime &amp;amp; seekTime are reported because the video player may not seek to the exact requested position in order to improve seek performance.&lt;/p&gt; &#xA;&lt;p&gt;Platforms: Android ExoPlayer, Android MediaPlayer, iOS, Windows UWP&lt;/p&gt; &#xA;&lt;h4&gt;onRestoreUserInterfaceForPictureInPictureStop&lt;/h4&gt; &#xA;&lt;p&gt;Callback function that corresponds to Apple&#39;s &lt;a href=&#34;https://developer.apple.com/documentation/avkit/avpictureinpicturecontrollerdelegate/1614703-pictureinpicturecontroller?language=objc&#34;&gt;&lt;code&gt;restoreUserInterfaceForPictureInPictureStopWithCompletionHandler&lt;/code&gt;&lt;/a&gt;. Call &lt;code&gt;restoreUserInterfaceForPictureInPictureStopCompleted&lt;/code&gt; inside of this function when done restoring the user interface.&lt;/p&gt; &#xA;&lt;p&gt;Payload: none&lt;/p&gt; &#xA;&lt;p&gt;Platforms: iOS&lt;/p&gt; &#xA;&lt;h4&gt;onTimedMetadata&lt;/h4&gt; &#xA;&lt;p&gt;Callback function that is called when timed metadata becomes available&lt;/p&gt; &#xA;&lt;p&gt;Payload:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;metadata&lt;/td&gt; &#xA;   &lt;td&gt;array&lt;/td&gt; &#xA;   &lt;td&gt;Array of metadata objects&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  metadata: [&#xA;    { value: &#39;Streaming Encoder&#39;, identifier: &#39;TRSN&#39; },&#xA;    { value: &#39;Internet Stream&#39;, identifier: &#39;TRSO&#39; },&#xA;    { value: &#39;Any Time You Like&#39;, identifier: &#39;TIT2&#39; }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Support for timed metadata on Android MediaPlayer is limited at best and only compatible with some videos. It requires a target SDK of 23 or higher.&lt;/p&gt; &#xA;&lt;p&gt;Platforms: Android ExoPlayer, Android MediaPlayer, iOS&lt;/p&gt; &#xA;&lt;h3&gt;Methods&lt;/h3&gt; &#xA;&lt;p&gt;Methods operate on a ref to the Video element. You can create a ref using code like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;return (&#xA;  &amp;lt;Video source={...}&#xA;    ref={ref =&amp;gt; (this.player = ref)} /&amp;gt;&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;dismissFullscreenPlayer&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;dismissFullscreenPlayer()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Take the player out of fullscreen mode.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;this.player.dismissFullscreenPlayer();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Platforms: Android ExoPlayer, Android MediaPlayer, iOS&lt;/p&gt; &#xA;&lt;h4&gt;presentFullscreenPlayer&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;presentFullscreenPlayer()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Put the player in fullscreen mode.&lt;/p&gt; &#xA;&lt;p&gt;On iOS, this displays the video in a fullscreen view controller with controls.&lt;/p&gt; &#xA;&lt;p&gt;On Android ExoPlayer &amp;amp; MediaPlayer, this puts the navigation controls in fullscreen mode. It is not a complete fullscreen implementation, so you will still need to apply a style that makes the width and height match your screen dimensions to get a fullscreen video.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;this.player.presentFullscreenPlayer();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Platforms: Android ExoPlayer, Android MediaPlayer, iOS&lt;/p&gt; &#xA;&lt;h4&gt;save&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;save(): Promise&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Save video to your Photos with current filter prop. Returns promise.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;let response = await this.player.save();&#xA;let path = response.uri;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Currently only supports highest quality export&lt;/li&gt; &#xA; &lt;li&gt;Currently only supports MP4 export&lt;/li&gt; &#xA; &lt;li&gt;Currently only supports exporting to user&#39;s cache directory with a generated UUID filename.&lt;/li&gt; &#xA; &lt;li&gt;User will need to remove the saved video through their Photos app&lt;/li&gt; &#xA; &lt;li&gt;Works with cached videos as well. (Checkout video-caching example)&lt;/li&gt; &#xA; &lt;li&gt;If the video is has not began buffering (e.g. there is no internet connection) then the save function will throw an error.&lt;/li&gt; &#xA; &lt;li&gt;If the video is buffering then the save function promise will return after the video has finished buffering and processing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Future:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Will support multiple qualities through options&lt;/li&gt; &#xA; &lt;li&gt;Will support more formats in the future through options&lt;/li&gt; &#xA; &lt;li&gt;Will support custom directory and file name through options&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Platforms: iOS&lt;/p&gt; &#xA;&lt;h4&gt;restoreUserInterfaceForPictureInPictureStopCompleted&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;restoreUserInterfaceForPictureInPictureStopCompleted(restored)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This function corresponds to the completion handler in Apple&#39;s &lt;a href=&#34;https://developer.apple.com/documentation/avkit/avpictureinpicturecontrollerdelegate/1614703-pictureinpicturecontroller?language=objc&#34;&gt;restoreUserInterfaceForPictureInPictureStop&lt;/a&gt;. IMPORTANT: This function must be called after &lt;code&gt;onRestoreUserInterfaceForPictureInPictureStop&lt;/code&gt; is called.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;this.player.restoreUserInterfaceForPictureInPictureStopCompleted(true);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Platforms: iOS&lt;/p&gt; &#xA;&lt;h4&gt;seek()&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;seek(seconds)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Seek to the specified position represented by seconds. seconds is a float value.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;seek()&lt;/code&gt; can only be called after the &lt;code&gt;onLoad&lt;/code&gt; event has fired. Once completed, the &lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#onseek&#34;&gt;onSeek&lt;/a&gt; event will be called.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;this.player.seek(200); // Seek to 3 minutes, 20 seconds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Platforms: all&lt;/p&gt; &#xA;&lt;h5&gt;Exact seek&lt;/h5&gt; &#xA;&lt;p&gt;By default iOS seeks within 100 milliseconds of the target position. If you need more accuracy, you can use the seek with tolerance method:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;seek(seconds, tolerance)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;tolerance is the max distance in milliseconds from the seconds position that&#39;s allowed. Using a more exact tolerance can cause seeks to take longer. If you want to seek exactly, set tolerance to 0.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;this.player.seek(120, 50); // Seek to 2 minutes with +/- 50 milliseconds accuracy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Platforms: iOS&lt;/p&gt; &#xA;&lt;h3&gt;iOS App Transport Security&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;By default, iOS will only load encrypted (https) urls. If you want to load content from an unencrypted (http) source, you will need to modify your Info.plist file and add the following entry:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/docs/AppTransportSecuritySetting.png&#34; width=&#34;50%&#34;&gt; &#xA;&lt;p&gt;For more detailed info check this &lt;a href=&#34;https://cocoacasts.com/how-to-add-app-transport-security-exception-domains&#34;&gt;article&lt;/a&gt;&lt;/p&gt;  &#xA;&lt;h3&gt;Audio Mixing&lt;/h3&gt; &#xA;&lt;p&gt;At some point in the future, react-native-video will include an Audio Manager for configuring how videos mix with other apps playing sounds on the device.&lt;/p&gt; &#xA;&lt;p&gt;On iOS, if you would like to allow other apps to play music over your video component, make the following change:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;AppDelegate.m&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;#import &amp;lt;AVFoundation/AVFoundation.h&amp;gt;  // import&#xA;&#xA;- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions&#xA;{&#xA;  ...&#xA;  [[AVAudioSession sharedInstance] setCategory:AVAudioSessionCategoryAmbient error:nil];  // allow&#xA;  ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the &lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/#ignoresilentswitch&#34;&gt;ignoreSilentSwitch&lt;/a&gt; prop.&lt;/p&gt;  &#xA;&lt;h3&gt;Android Expansion File Usage&lt;/h3&gt; &#xA;&lt;p&gt;Expansions files allow you to ship assets that exceed the 100MB apk size limit and don&#39;t need to be updated each time you push an app update.&lt;/p&gt; &#xA;&lt;p&gt;This only supports mp4 files and they must not be compressed. Example command line for preventing compression:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;zip -r -n .mp4 *.mp4 player.video.example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Within your render function, assuming you have a file called&#xA;// &#34;background.mp4&#34; in your expansion file. Just add your main and (if applicable) patch version&#xA;&amp;lt;Video source={{uri: &#34;background&#34;, mainVer: 1, patchVer: 0}} // Looks for .mp4 file (background.mp4) in the given expansion version.&#xA;       resizeMode=&#34;cover&#34;           // Fill the whole screen at aspect ratio.&#xA;       style={styles.backgroundVideo} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Load files with the RN Asset System&lt;/h3&gt; &#xA;&lt;p&gt;The asset system &lt;a href=&#34;http://www.reactnative.com/react-native-v0-14-0-released/&#34;&gt;introduced in RN &lt;code&gt;0.14&lt;/code&gt;&lt;/a&gt; allows loading image resources shared across iOS and Android without touching native code. As of RN &lt;code&gt;0.31&lt;/code&gt; &lt;a href=&#34;https://github.com/facebook/react-native/commit/91ff6868a554c4930fd5fda6ba8044dbd56c8374&#34;&gt;the same is true&lt;/a&gt; of mp4 video assets for Android. As of &lt;a href=&#34;https://github.com/facebook/react-native/releases/tag/v0.33.0&#34;&gt;RN &lt;code&gt;0.33&lt;/code&gt;&lt;/a&gt; iOS is also supported. Requires &lt;code&gt;react-native-video@0.9.0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;lt;Video&#xA;  source={require(&#39;../assets/video/turntable.mp4&#39;)}&#xA;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Play in background on iOS&lt;/h3&gt; &#xA;&lt;p&gt;To enable audio to play in background on iOS the audio session needs to be set to &lt;code&gt;AVAudioSessionCategoryPlayback&lt;/code&gt;. See &lt;a href=&#34;https://developer.apple.com/library/ios/qa/qa1668/_index.html&#34;&gt;Apple documentation&lt;/a&gt; for additional details. (NOTE: there is now a ticket to &lt;a href=&#34;https://github.com/react-native-community/react-native-video/issues/310&#34;&gt;expose this as a prop&lt;/a&gt; )&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;See an &lt;a href=&#34;https://github.com/brentvatne/react-native-login/raw/56c47a5d1e23781e86e19b27e10427fd6391f666/App/Screens/UserInfoScreen.js#L32-L35&#34;&gt;Example integration&lt;/a&gt; in &lt;code&gt;react-native-login&lt;/code&gt; &lt;em&gt;note that this example uses an older version of this library, before we used &lt;code&gt;export default&lt;/code&gt; -- if you use &lt;code&gt;require&lt;/code&gt; you will need to do &lt;code&gt;require(&#39;react-native-video&#39;).default&lt;/code&gt; as per instructions above.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Try the included &lt;a href=&#34;https://github.com/react-native-video/react-native-video/tree/master/examples&#34;&gt;VideoPlayer example&lt;/a&gt; yourself:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone git@github.com:react-native-community/react-native-video.git&#xA;cd react-native-video/example&#xA;npm install&#xA;open ios/VideoPlayer.xcodeproj&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then &lt;code&gt;Cmd+R&lt;/code&gt; to start the React Packager, build and run the project in the simulator.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/jhabdas/lumpen-radio&#34;&gt;Lumpen Radio&lt;/a&gt; contains another example integration using local files and full screen background video.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Updating&lt;/h2&gt; &#xA;&lt;h3&gt;Version 6.0.0&lt;/h3&gt; &#xA;&lt;h4&gt;iOS&lt;/h4&gt; &#xA;&lt;p&gt;In your project Podfile add support for static dependency linking. This is required to support the new Promises subdependency in the iOS swift conversion.&lt;/p&gt; &#xA;&lt;p&gt;Add &lt;code&gt;use_frameworks! :linkage =&amp;gt; :static&lt;/code&gt; just under &lt;code&gt;platform :ios&lt;/code&gt; in your ios project Podfile.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-video/react-native-video/master/examples/basic/ios/Podfile#L5&#34;&gt;See the example ios project for reference&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Version 5.0.0&lt;/h3&gt; &#xA;&lt;p&gt;Probably you want to update your gradle version:&lt;/p&gt; &#xA;&lt;h4&gt;gradle-wrapper.properties&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;- distributionUrl=https\://services.gradle.org/distributions/gradle-3.3-all.zip&#xA;+ distributionUrl=https\://services.gradle.org/distributions/gradle-5.1.1-all.zip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;strong&gt;android/app/build.gradle&lt;/strong&gt;&lt;/h4&gt; &#xA;&lt;p&gt;From version &amp;gt;= 5.0.0, you have to apply this changes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;dependencies {&#xA;   ...&#xA;    compile project(&#39;:react-native-video&#39;)&#xA;+   implementation &#34;androidx.appcompat:appcompat:1.0.0&#34;&#xA;-   implementation &#34;com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}&#34;&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;strong&gt;android/gradle.properties&lt;/strong&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Migrating to AndroidX (needs version &amp;gt;= 5.0.0):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle.properties&#34;&gt;android.useAndroidX=true&#xA;android.enableJetifier=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Version 4.0.0&lt;/h3&gt; &#xA;&lt;h4&gt;Gradle 3 and target SDK 26 requirement&lt;/h4&gt; &#xA;&lt;p&gt;In order to support ExoPlayer 2.9.0, you must use version 3 or higher of the Gradle plugin. This is included by default in React Native 0.57.&lt;/p&gt; &#xA;&lt;h4&gt;ExoPlayer 2.9.0 Java 1.8 requirement&lt;/h4&gt; &#xA;&lt;p&gt;ExoPlayer 2.9.0 uses some Java 1.8 features, so you may need to enable support for Java 1.8 in your app/build.gradle file. If you get an error, compiling with ExoPlayer like: &lt;code&gt;Default interface methods are only supported starting with Android N (--min-api 24)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add the following to your app/build.gradle file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;android {&#xA;   ... // Various other settings go here&#xA;   compileOptions {&#xA;     targetCompatibility JavaVersion.VERSION_1_8&#xA;   }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;ExoPlayer no longer detaches&lt;/h4&gt; &#xA;&lt;p&gt;When using a router like the react-navigation TabNavigator, switching between tab routes would previously cause ExoPlayer to detach causing the video player to pause. We now don&#39;t detach the view, allowing the video to continue playing in a background tab. This matches the behavior for iOS. Android MediaPlayer will crash if it detaches when switching routes, so its behavior has not been changed.&lt;/p&gt; &#xA;&lt;h4&gt;useTextureView now defaults to true&lt;/h4&gt; &#xA;&lt;p&gt;The SurfaceView, which ExoPlayer has been using by default has a number of quirks that people are unaware of and often cause issues. This includes not supporting animations or scaling. It also causes strange behavior if you overlay two videos on top of each other, because the SurfaceView will &lt;a href=&#34;https://developer.android.com/reference/android/view/SurfaceView&#34;&gt;punch a hole&lt;/a&gt; through other views. Since TextureView doesn&#39;t have these issues and behaves in the way most developers expect, it makes sense to make it the default.&lt;/p&gt; &#xA;&lt;p&gt;TextureView is not as fast as SurfaceView, so you may still want to enable SurfaceView support. To do this, you can set &lt;code&gt;useTextureView={false}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Version 3.0.0&lt;/h3&gt; &#xA;&lt;h4&gt;All platforms now auto-play&lt;/h4&gt; &#xA;&lt;p&gt;Previously, on Android ExoPlayer if the paused prop was not set, the media would not automatically start playing. The only way it would work was if you set &lt;code&gt;paused={false}&lt;/code&gt;. This has been changed to automatically play if paused is not set so that the behavior is consistent across platforms.&lt;/p&gt; &#xA;&lt;h4&gt;All platforms now keep their paused state when returning from the background&lt;/h4&gt; &#xA;&lt;p&gt;Previously, on Android MediaPlayer if you setup an AppState event when the app went into the background and set a paused prop so that when you returned to the app the video would be paused it would be ignored.&lt;/p&gt; &#xA;&lt;p&gt;Note, Windows does not have a concept of an app going into the background, so this doesn&#39;t apply there.&lt;/p&gt; &#xA;&lt;h4&gt;Use Android target SDK 27 by default&lt;/h4&gt; &#xA;&lt;p&gt;Version 3.0 updates the Android build tools and SDK to version 27. React Native is in the process of &lt;a href=&#34;https://github.com/facebook/react-native/issues/18095#issuecomment-395596130&#34;&gt;switchting over&lt;/a&gt; to SDK 27 in preparation for Google&#39;s requirement that new Android apps &lt;a href=&#34;https://android-developers.googleblog.com/2017/12/improving-app-security-and-performance.html&#34;&gt;use SDK 26&lt;/a&gt; by August 2018.&lt;/p&gt; &#xA;&lt;p&gt;You will either need to install the version 27 SDK and version 27.0.3 buildtools or modify your build.gradle file to configure react-native-video to use the same build settings as the rest of your app as described below.&lt;/p&gt; &#xA;&lt;h5&gt;Using app build settings&lt;/h5&gt; &#xA;&lt;p&gt;You will need to create a &lt;code&gt;project.ext&lt;/code&gt; section in the top-level build.gradle file (not app/build.gradle). Fill in the values from the example below using the values found in your app/build.gradle file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;// Top-level build file where you can add configuration options common to all sub-projects/modules.&#xA;&#xA;buildscript {&#xA;    ... // Various other settings go here&#xA;}&#xA;&#xA;allprojects {&#xA;    ... // Various other settings go here&#xA;&#xA;    project.ext {&#xA;        compileSdkVersion = 23&#xA;        buildToolsVersion = &#34;23.0.1&#34;&#xA;&#xA;        minSdkVersion = 16&#xA;        targetSdkVersion = 22&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you encounter an error &lt;code&gt;Could not find com.android.support:support-annotations:27.0.0.&lt;/code&gt; reinstall your Android Support Repository.&lt;/p&gt; &#xA;&lt;h2&gt;Black Screen on Release build (Android)&lt;/h2&gt; &#xA;&lt;p&gt;If your video work on Debug mode, but on Release you see only black screen, please, check the link to your video. If you use &#39;http&#39; protocol there, you will need to add next string to your AndroidManifest.xml file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;application&#xA; ...&#xA; android:usesCleartextTraffic=&#34;true&#34;&#xA;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;TODOS&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add support for playing multiple videos in a sequence (will interfere with current &lt;code&gt;repeat&lt;/code&gt; implementation)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Callback to get buffering progress for remote videos&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Bring API closer to HTML5 &lt;code&gt;&amp;lt;Video&amp;gt;&lt;/code&gt; &lt;a href=&#34;http://devdocs.io/html/element/video&#34;&gt;reference&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Useful resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/react-native-video/react-native-video/raw/master/API.md&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/react-native-video/react-native-video/raw/master/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;react-native-video&lt;/strong&gt; was originally created by &lt;a href=&#34;https://github.com/brentvatne&#34;&gt;Brent Vatne&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>elunez/eladmin</title>
    <updated>2022-06-12T01:31:50Z</updated>
    <id>tag:github.com,2022-06-12:/elunez/eladmin</id>
    <link href="https://github.com/elunez/eladmin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;项目基于 Spring Boot 2.1.0 、 Jpa、 Spring Security、redis、Vue的前后端分离的后台管理系统，项目采用分模块开发方式， 权限控制采用 RBAC，支持数据字典与数据权限管理，支持一键生成前后端代码，支持动态路由&lt;/p&gt;&lt;hr&gt;&lt;h1 style=&#34;text-align: center&#34;&gt;EL-ADMIN 后台管理系统&lt;/h1&gt; &#xA;&lt;div style=&#34;text-align: center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/elunez/eladmin/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%20License%202.0-blue.svg?sanitize=true&#34; alt=&#34;AUR&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitee.com/elunez/eladmin&#34;&gt;&lt;img src=&#34;https://gitee.com/elunez/eladmin/badge/star.svg?theme=white&#34; alt=&#34;star&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/elunez/eladmin&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/elunez/eladmin.svg?style=social&amp;amp;label=Stars&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/elunez/eladmin&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/elunez/eladmin.svg?style=social&amp;amp;label=Fork&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h4&gt;项目简介&lt;/h4&gt; &#xA;&lt;p&gt;一个基于 Spring Boot 2.1.0 、 Spring Boot Jpa、 JWT、Spring Security、Redis、Vue的前后端分离的后台管理系统&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;开发文档：&lt;/strong&gt; &lt;a href=&#34;https://el-admin.vip&#34;&gt;https://el-admin.vip&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;体验地址：&lt;/strong&gt; &lt;a href=&#34;https://el-admin.vip/demo&#34;&gt;https://el-admin.vip/demo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;账号密码：&lt;/strong&gt; &lt;code&gt;admin / 123456&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;项目源码&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;后端源码&lt;/th&gt; &#xA;   &lt;th&gt;前端源码&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;github&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/elunez/eladmin&#34;&gt;https://github.com/elunez/eladmin&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/elunez/eladmin-web&#34;&gt;https://github.com/elunez/eladmin-web&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;码云&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://gitee.com/elunez/eladmin&#34;&gt;https://gitee.com/elunez/eladmin&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://gitee.com/elunez/eladmin-web&#34;&gt;https://gitee.com/elunez/eladmin-web&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;主要特性&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;使用最新技术栈，社区资源丰富。&lt;/li&gt; &#xA; &lt;li&gt;高效率开发，代码生成器可一键生成前后端代码&lt;/li&gt; &#xA; &lt;li&gt;支持数据字典，可方便地对一些状态进行管理&lt;/li&gt; &#xA; &lt;li&gt;支持接口限流，避免恶意请求导致服务层压力过大&lt;/li&gt; &#xA; &lt;li&gt;支持接口级别的功能权限与数据权限，可自定义操作&lt;/li&gt; &#xA; &lt;li&gt;自定义权限注解与匿名接口注解，可快速对接口拦截与放行&lt;/li&gt; &#xA; &lt;li&gt;对一些常用地前端组件封装：表格数据请求、数据字典等&lt;/li&gt; &#xA; &lt;li&gt;前后端统一异常拦截处理，统一输出异常，避免繁琐的判断&lt;/li&gt; &#xA; &lt;li&gt;支持在线用户管理与服务器性能监控，支持限制单用户登录&lt;/li&gt; &#xA; &lt;li&gt;支持运维管理，可方便地对远程服务器的应用进行部署与管理&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;系统功能&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;用户管理：提供用户的相关配置，新增用户后，默认密码为123456&lt;/li&gt; &#xA; &lt;li&gt;角色管理：对权限与菜单进行分配，可根据部门设置角色的数据权限&lt;/li&gt; &#xA; &lt;li&gt;菜单管理：已实现菜单动态路由，后端可配置化，支持多级菜单&lt;/li&gt; &#xA; &lt;li&gt;部门管理：可配置系统组织架构，树形表格展示&lt;/li&gt; &#xA; &lt;li&gt;岗位管理：配置各个部门的职位&lt;/li&gt; &#xA; &lt;li&gt;字典管理：可维护常用一些固定的数据，如：状态，性别等&lt;/li&gt; &#xA; &lt;li&gt;系统日志：记录用户操作日志与异常日志，方便开发人员定位排错&lt;/li&gt; &#xA; &lt;li&gt;SQL监控：采用druid 监控数据库访问性能，默认用户名admin，密码123456&lt;/li&gt; &#xA; &lt;li&gt;定时任务：整合Quartz做定时任务，加入任务日志，任务运行情况一目了然&lt;/li&gt; &#xA; &lt;li&gt;代码生成：高灵活度生成前后端代码，减少大量重复的工作任务&lt;/li&gt; &#xA; &lt;li&gt;邮件工具：配合富文本，发送html格式的邮件&lt;/li&gt; &#xA; &lt;li&gt;七牛云存储：可同步七牛云存储的数据到系统，无需登录七牛云直接操作云数据&lt;/li&gt; &#xA; &lt;li&gt;支付宝支付：整合了支付宝支付并且提供了测试账号，可自行测试&lt;/li&gt; &#xA; &lt;li&gt;服务监控：监控服务器的负载情况&lt;/li&gt; &#xA; &lt;li&gt;运维管理：一键部署你的应用&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;项目结构&lt;/h4&gt; &#xA;&lt;p&gt;项目采用按功能分模块的开发方式，结构如下&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eladmin-common&lt;/code&gt; 为系统的公共模块，各种工具类，公共配置存在该模块&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eladmin-system&lt;/code&gt; 为系统核心模块也是项目入口模块，也是最终需要打包部署的模块&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eladmin-logging&lt;/code&gt; 为系统的日志模块，其他模块如果需要记录日志需要引入该模块&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eladmin-tools&lt;/code&gt; 为第三方工具模块，包含：图床、邮件、云存储、本地存储、支付宝&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eladmin-generator&lt;/code&gt; 为系统的代码生成模块，代码生成的模板在 system 模块中&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;详细结构&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;- eladmin-common 公共模块&#xA;    - annotation 为系统自定义注解&#xA;    - aspect 自定义注解的切面&#xA;    - base 提供了Entity、DTO基类和mapstruct的通用mapper&#xA;    - config 自定义权限实现、redis配置、swagger配置、Rsa配置等&#xA;    - exception 项目统一异常的处理&#xA;    - utils 系统通用工具类&#xA;- eladmin-system 系统核心模块（系统启动入口）&#xA;&#x9;- config 配置跨域与静态资源，与数据权限&#xA;&#x9;    - thread 线程池相关&#xA;&#x9;- modules 系统相关模块(登录授权、系统监控、定时任务、运维管理等)&#xA;- eladmin-logging 系统日志模块&#xA;- eladmin-tools 系统第三方工具模块&#xA;- eladmin-generator 系统代码生成模块&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;特别鸣谢&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;感谢 &lt;a href=&#34;https://www.jetbrains.com/&#34;&gt;JetBrains&lt;/a&gt; 提供的非商业开源软件开发授权&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;感谢 &lt;a href=&#34;https://www.qiniu.com/&#34;&gt;七牛云&lt;/a&gt; 提供的免费云存储与CDN加速支持&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;感谢 &lt;a href=&#34;https://github.com/PanJiaChen/vue-element-admin&#34;&gt;PanJiaChen&lt;/a&gt; 大佬提供的前端模板&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;感谢 &lt;a href=&#34;https://github.com/moxun1639&#34;&gt;Moxun&lt;/a&gt; 大佬提供的前端 Curd 通用组件&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;感谢 &lt;a href=&#34;https://gitee.com/zhy6599&#34;&gt;zhy6599&lt;/a&gt; 大佬提供的后端运维管理相关功能&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;感谢 &lt;a href=&#34;https://github.com/everhopingandwaiting&#34;&gt;j.yao.SUSE&lt;/a&gt; 大佬提供的匿名接口与Redis限流等功能&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;感谢 &lt;a href=&#34;https://github.com/d15801543974&#34;&gt;d15801543974&lt;/a&gt; 大佬提供的基于注解的通用查询方式&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;项目捐赠&lt;/h4&gt; &#xA;&lt;p&gt;项目的发展离不开你的支持，请作者喝杯咖啡吧☕ &lt;a href=&#34;https://el-admin.vip/donation/&#34;&gt;Donate&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;反馈交流&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;QQ交流群：一群：&#xA;  &lt;strike&gt;&#xA;   891137268&#xA;  &lt;/strike&gt; 、二群：&#xA;  &lt;strike&gt;&#xA;   947578238&#xA;  &lt;/strike&gt;、三群：659622532&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>