<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-26T01:31:25Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>aeron-io/aeron</title>
    <updated>2025-01-26T01:31:25Z</updated>
    <id>tag:github.com,2025-01-26:/aeron-io/aeron</id>
    <link href="https://github.com/aeron-io/aeron" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Efficient reliable UDP unicast, UDP multicast, and IPC message transport&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Aeron&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/real-logic/aeron/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/real-logic/Aeron.svg?sanitize=true&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.javadoc.io/doc/io.aeron/aeron-all&#34;&gt;&lt;img src=&#34;https://www.javadoc.io/badge/io.aeron/aeron-all.svg?sanitize=true&#34; alt=&#34;Javadocs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/real-logic/aeron/actions&#34;&gt;&lt;img src=&#34;https://github.com/real-logic/aeron/workflows/Continuous%20Integration/badge.svg?sanitize=true&#34; alt=&#34;Actions Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/real-logic/aeron/actions&#34;&gt;&lt;img src=&#34;https://github.com/real-logic/aeron/workflows/CodeQL/badge.svg?sanitize=true&#34; alt=&#34;CodeQL Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Efficient reliable UDP unicast, UDP multicast, and IPC message transport. Java, C, and C++ clients are available in this repository, and a &lt;a href=&#34;https://github.com/AdaptiveConsulting/Aeron.NET&#34;&gt;.NET client&lt;/a&gt; is available. All clients can exchange messages across machines, or on the same machine via IPC, very efficiently. Message streams can be recorded by the &lt;a href=&#34;https://github.com/real-logic/aeron/tree/master/aeron-archive&#34;&gt;Archive&lt;/a&gt; module to persistent storage for later, or real-time, replay. Aeron &lt;a href=&#34;https://github.com/real-logic/aeron/tree/master/aeron-cluster&#34;&gt;Cluster&lt;/a&gt; provides support for fault-tolerant services as replicated state machines based on the &lt;a href=&#34;https://raft.github.io/&#34;&gt;Raft&lt;/a&gt; consensus algorithm.&lt;/p&gt; &#xA;&lt;p&gt;Performance is the key focus. A design goal for Aeron is to be the highest throughput with the lowest and most predictable latency of any messaging system. Aeron integrates with &lt;a href=&#34;https://github.com/real-logic/simple-binary-encoding&#34;&gt;Simple Binary Encoding (SBE)&lt;/a&gt; for the best possible message encoding and decoding performance. Many of the data structures used in the creation of Aeron have been factored out to the &lt;a href=&#34;https://github.com/real-logic/agrona&#34;&gt;Agrona&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;p&gt;For details of usage, protocol specification, FAQ, etc. please check out the &lt;a href=&#34;https://github.com/real-logic/aeron/wiki&#34;&gt;Wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For the latest version information and changes see the &lt;a href=&#34;https://github.com/real-logic/aeron/wiki/Change-Log&#34;&gt;Change Log&lt;/a&gt; with Java &lt;strong&gt;downloads&lt;/strong&gt; at &lt;a href=&#34;http://search.maven.org/#search%7Cga%7C1%7Caeron&#34;&gt;Maven Central&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Aeron is owned and operated by Adaptive Financial Consulting. Originally created by Martin Thompson and Todd Montgomery, the Aeron team joined Adaptive in 2022.&lt;/p&gt; &#xA;&lt;p&gt;For Business users, to get started with Aeron Premium, please visit &lt;a href=&#34;https://aeron.io&#34;&gt;Aeron.io&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We provide a range of services including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Training for development and operations with Aeron and Aeron Cluster.&lt;/li&gt; &#xA; &lt;li&gt;Consulting, for example if you’re not sure how to design your system or need help tuning your system.&lt;/li&gt; &#xA; &lt;li&gt;We also offer a number of proprietary enhancements on top of Aeron and Aeron Cluster such as kernel bypass (ef_vi, AWS DPDK, and VMA) for increased performance, and blazing fast encryption with ATS.&lt;/li&gt; &#xA; &lt;li&gt;If you’re building a new trading system, we have experienced Aeron developers who can help.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please get in touch at &lt;a href=&#34;mailto:sales@aeron.io?subject=Aeron&#34;&gt;sales@aeron.io&lt;/a&gt; if you would like to learn more about any of these.&lt;/p&gt; &#xA;&lt;h3&gt;How do I use Aeron?&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/real-logic/aeron/wiki/Java-Programming-Guide&#34;&gt;Java Programming Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/real-logic/aeron/wiki/Cpp-Programming-Guide&#34;&gt;C++11 Programming Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/real-logic/aeron/wiki/Best-Practices-Guide&#34;&gt;Best Practices Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/real-logic/aeron/wiki/Monitoring-and-Debugging&#34;&gt;Monitoring and Debugging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/real-logic/aeron/wiki/Configuration-Options&#34;&gt;Configuration Options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/real-logic/aeron/wiki/Channel-Configuration&#34;&gt;Channel Specific Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/real-logic/aeron/wiki/Aeron-Archive&#34;&gt;Aeron Archive (Durable/Persistent Stream Storage)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/real-logic/aeron/tree/master/aeron-cluster&#34;&gt;Aeron Cluster (Fault Tolerant Services)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aeron.io/docs/&#34;&gt;Aeron Docs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;How does Aeron work?&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/real-logic/aeron/wiki/Transport-Protocol-Specification&#34;&gt;Transport Protocol Specification&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/real-logic/aeron/wiki/Design-Overview&#34;&gt;Design Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/real-logic/aeron/wiki/Design-Principles&#34;&gt;Design Principles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/real-logic/aeron/wiki/Flow-and-Congestion-Control&#34;&gt;Flow Control Semantics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/real-logic/aeron/wiki/Media-Driver-Operation&#34;&gt;Media Driver Operation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;How do I hack on Aeron?&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/real-logic/aeron/wiki/Hacking-on-Aeron&#34;&gt;Hacking on Aeron&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/real-logic/aeron/wiki/Performance-Testing&#34;&gt;Performance Testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/real-logic/aeron/wiki/Building-Aeron&#34;&gt;Building Aeron&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;License (See LICENSE file for full license)&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2014-2025 Real Logic Limited.&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://www.apache.org/licenses/LICENSE-2.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>apache/polaris</title>
    <updated>2025-01-26T01:31:25Z</updated>
    <id>tag:github.com,2025-01-26:/apache/polaris</id>
    <link href="https://github.com/apache/polaris" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Apache Polaris, the interoperable, open source catalog for Apache Iceberg&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Apache Polaris (incubating)&lt;/h1&gt; &#xA;&lt;p&gt;Apache Polaris™ is an open-source, fully-featured catalog for Apache Iceberg™. It implements Iceberg&#39;s &lt;a href=&#34;https://github.com/apache/iceberg/raw/main/open-api/rest-catalog-open-api.yaml&#34;&gt;REST API&lt;/a&gt;, enabling seamless multi-engine interoperability across a wide range of platforms, including Apache Doris™, Apache Flink®, Apache Spark™, StarRocks, and Trino.&lt;/p&gt; &#xA;&lt;p&gt;Documentation is available at &lt;a href=&#34;https://polaris.apache.org&#34;&gt;https://polaris.apache.org&lt;/a&gt;, including &lt;a href=&#34;https://polaris.apache.org/index.html#tag/polaris-management-service_other&#34;&gt;Polaris management API doc&lt;/a&gt; and &lt;a href=&#34;https://polaris.apache.org/index.html#tag/Configuration-API&#34;&gt;Apache Iceberg REST API doc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;mailto:dev-subscribe@polaris.apache.org&#34;&gt;Subscribe to the dev mailing list&lt;/a&gt; to join discussions via email or browse &lt;a href=&#34;https://lists.apache.org/list.html?dev@polaris.apache.org&#34;&gt;the archives&lt;/a&gt;. Check out the &lt;a href=&#34;https://raw.githubusercontent.com/apache/polaris/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING guide&lt;/a&gt; for contribution guidelines.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://polaris-catalog.zulipchat.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Zulip-Chat-blue?color=3d4db3&amp;amp;logo=zulip&amp;amp;style=for-the-badge&amp;amp;logoColor=white&#34; alt=&#34;Zulip&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/polaris/actions/workflows/gradle.yml?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/apache/polaris/gradle.yml?branch=main&amp;amp;label=Main%20CI&amp;amp;logo=Github&amp;amp;style=for-the-badge&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building and Running&lt;/h2&gt; &#xA;&lt;p&gt;Apache Polaris is organized into the following modules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;polaris-core&lt;/code&gt; - The main Polaris entity definitions and core business logic&lt;/li&gt; &#xA; &lt;li&gt;API modules (implementing the Iceberg REST API and Polaris management API): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;polaris-api-management-model&lt;/code&gt; - The Polaris management model&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;polaris-api-management-service&lt;/code&gt; - The Polaris management service&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;polaris-api-iceberg-service&lt;/code&gt; - The Iceberg REST service&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Service modules: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;polaris-service-common&lt;/code&gt; - The main components of the Polaris server&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Quarkus runtime modules: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;polaris-quarkus-service&lt;/code&gt; - The Quarkus-specific components of the Polaris server&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;polaris-quarkus-defaults&lt;/code&gt; - The Quarkus-specific configuration defaults&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;polaris-quarkus-server&lt;/code&gt; - The Polaris server runtime&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;polaris-quarkus-admin-tool&lt;/code&gt; - The Polaris admin &amp;amp; maintenance tool&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Persistence modules: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;polaris-jpa-model&lt;/code&gt; - The JPA entity definitions&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;polaris-eclipselink&lt;/code&gt; - The Eclipselink implementation of the MetaStoreManager interface&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Apache Polaris is built using Gradle with Java 21+ and Docker 27+.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;./gradlew build&lt;/code&gt; - To build and run tests. Make sure Docker is running, as the integration tests depend on it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;./gradlew assemble&lt;/code&gt; - To skip tests.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;./gradlew test&lt;/code&gt; - To run unit tests and integration tests.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;./gradlew polarisServerRun&lt;/code&gt; - To run the Polaris server locally; the server is reachable at localhost:8181. This is also suitable for running regression tests, or for connecting with Spark. See below for more information on regression tests.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;./regtests/run_spark_sql.sh&lt;/code&gt; - To connect from Spark SQL. Here are some example commands to run in the Spark SQL shell:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;create database db1;&#xA;show databases;&#xA;create table db1.table1 (id int, name string);&#xA;insert into db1.table1 values (1, &#39;a&#39;);&#xA;select * from db1.table1;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;More build and run options&lt;/h3&gt; &#xA;&lt;h4&gt;Running in Docker&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;./gradlew clean :polaris-quarkus-server:assemble -Dquarkus.container-image.build=true&lt;/code&gt; - To build the image locally.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docker run -p 8181:8181 -p 8182:8182 apache/polaris:latest&lt;/code&gt; - To run the image.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Running in Kubernetes&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;./run.sh&lt;/code&gt; - To run Polaris as a mini-deployment locally. This will create a Kind cluster, then deploy one pod and one service. The service is available on ports &lt;code&gt;8181&lt;/code&gt; and &lt;code&gt;8182&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kubectl port-forward svc/polaris-service -n polaris 8181:8181 8182:8182&lt;/code&gt; - To create secure connections between a local machine and a pod within the cluster for both service and health/metrics endpoints: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://localhost:8182/q/metrics&#34;&gt;http://localhost:8182/q/metrics&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://localhost:8182/q/health&#34;&gt;http://localhost:8182/q/health&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kubectl get pods -n polaris&lt;/code&gt; - To check the status of the pods.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kubectl get deployment -n polaris&lt;/code&gt; - To check the status of the deployment.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kubectl describe deployment polaris-deployment -n polaris&lt;/code&gt; - To troubleshoot if things aren&#39;t working as expected.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Running regression tests&lt;/h4&gt; &#xA;&lt;p&gt;Regression tests can be run in a local environment or in a Docker environment.&lt;/p&gt; &#xA;&lt;p&gt;To run regression tests locally, you first need to start Polaris, then run the tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./gradlew polarisServerRun&#xA;env POLARIS_HOST=localhost ./regtests/run.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run regression tests in a Docker environment, you can use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker compose -f regtests/docker-compose.yml up --build --exit-code-from regtest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Building docs&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docs are generated using &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; using the &lt;a href=&#34;https://www.docsy.dev/docs/&#34;&gt;Docsy&lt;/a&gt; theme.&lt;/li&gt; &#xA; &lt;li&gt;To view the site locally, run &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;site/bin/run-hugo-in-docker.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/apache/polaris/main/site/README.md&#34;&gt;README in &lt;code&gt;site/&lt;/code&gt;&lt;/a&gt; for more information.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Apache Polaris is under the Apache License Version 2.0. See the &lt;a href=&#34;https://raw.githubusercontent.com/apache/polaris/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;ASF Incubator disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;Apache Polaris™ is an effort undergoing incubation at The Apache Software Foundation (ASF), sponsored by the Apache Incubator. Incubation is required of all newly accepted projects until a further review indicates that the infrastructure, communications, and decision making process have stabilized in a manner consistent with other successful ASF projects. While incubation status is not necessarily a reflection of the completeness or stability of the code, it does indicate that the project has yet to be fully endorsed by the ASF.&lt;/p&gt; &#xA;&lt;p&gt;&lt;sub&gt;Apache®, Apache Polaris™, Apache Iceberg™, Apache Spark™ are either registered trademarks or trademarks of the Apache Software Foundation in the United States and/or other countries.&lt;/sub&gt;&lt;/p&gt;</summary>
  </entry>
</feed>