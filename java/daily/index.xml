<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-04T01:37:06Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jianjianai/NewBingGoGo-Web</title>
    <updated>2023-05-04T01:37:06Z</updated>
    <id>tag:github.com,2023-05-04:/jianjianai/NewBingGoGo-Web</id>
    <link href="https://github.com/jianjianai/NewBingGoGo-Web" rel="alternate"></link>
    <summary type="html">&lt;p&gt;一个基于微软OpenAI ChatGPT GPT4的New Bing接口的Web服务。 提供了好看的对话页面。 实现了微软New Bing的大多数功能，还添加了一些自己的特色功能。 开源免费。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NewBingGoGo-web&lt;/h1&gt; &#xA;&lt;p&gt;一个基于微软OpenAI ChatGPT GPT4的New Bing接口的Web服务。 提供了好看的对话页面。 实现了微软New Bing的大多数功能，还添加了一些自己的特色功能。 开源免费。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jianjianai/NewBingGoGo-Web/master/docs/img/1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;演示站点：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;java &lt;a href=&#34;https://newbinggogo-web.zeabur.app/&#34;&gt;https://newbinggogo-web.zeabur.app/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;cloudflareWorker.js &lt;a href=&#34;https://bingweb.xn--xyza.top/&#34;&gt;https://bingweb.xn--xyza.top/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;功能介绍&lt;/h2&gt; &#xA;&lt;p&gt;此服务可直接通过网页访问也可以作为NewBingGoGo插件的魔法链接服务使用。&lt;/p&gt; &#xA;&lt;h4&gt;&lt;strong&gt;直接访问&lt;/strong&gt;&lt;/h4&gt; &#xA;&lt;p&gt;直接访问需要在配置文件中设置共享账号，可以设置多个共享账号随机访问。&lt;/p&gt; &#xA;&lt;h4&gt;&lt;strong&gt;作为魔法链接&lt;/strong&gt;&lt;/h4&gt; &#xA;&lt;p&gt;作为魔法链接使用时，不会使用配置文件中的共享账号。用户需要登录自己的微软账号。&lt;/p&gt; &#xA;&lt;h2&gt;部署方法&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jianjianai/NewBingGoGo-Web/wiki/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8&#34;&gt;快速入门 wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;更加强大的插件版&lt;/h2&gt; &#xA;&lt;p&gt;web版才发布不久，后续会逐渐完善功能。插件版有的功能web版也会逐步添加完善。目前如果想要更好的体验欢迎前往插件版。&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitee.com/jja8/NewBingGoGo&#34;&gt;NewBingGoGo : 简单开始和NewBing聊天 gitee&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;功能&lt;/th&gt; &#xA;   &lt;th&gt;插件版&lt;/th&gt; &#xA;   &lt;th&gt;web版&lt;/th&gt; &#xA;   &lt;th&gt;描述&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;聊天&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;和New Bing对话，提出问题。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;生成图片&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;在有更创造力选项中让New Bing生成图片&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;提示词&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;使用提示词使AI更好地理解需求&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;免登录&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;无需登录，直接使用。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;创作&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;使用New Bing生成文章，Edge浏览器New Bing侧边栏的撰写功能&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;小窗&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;在页面中打开小窗，可根据当前页面内容对话。Edge浏览器侧边栏的聊天功能&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;聊天记录&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;保存聊天记录，可查看或继续聊天&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;登录微软账号&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;登录微软账号，使用自己的账号访问New Bing&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;内容卡片&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;显示天气，查找图片，地图等等。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>DEVOPS-WITH-WEB-DEV/springboot-k8s</title>
    <updated>2023-05-04T01:37:06Z</updated>
    <id>tag:github.com,2023-05-04:/DEVOPS-WITH-WEB-DEV/springboot-k8s</id>
    <link href="https://github.com/DEVOPS-WITH-WEB-DEV/springboot-k8s" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;springboot-crud-k8s&lt;/h1&gt; &#xA;&lt;p&gt;Run &amp;amp; Deploy Spring Boot CRUD Application With MySQL on K8S&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>fabienrenaud/java-json-benchmark</title>
    <updated>2023-05-04T01:37:06Z</updated>
    <id>tag:github.com,2023-05-04:/fabienrenaud/java-json-benchmark</id>
    <link href="https://github.com/fabienrenaud/java-json-benchmark" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Performance testing of serialization and deserialization of Java JSON libraries&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/fabienrenaud/java-json-benchmark&#34;&gt;&lt;img src=&#34;https://travis-ci.org/fabienrenaud/java-json-benchmark.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Benchmark of Java JSON libraries&lt;/h1&gt; &#xA;&lt;h2&gt;Purpose&lt;/h2&gt; &#xA;&lt;p&gt;This project benchmarks the throughput performance of a variety of Java Json libraries using &lt;a href=&#34;http://openjdk.java.net/projects/code-tools/jmh/&#34;&gt;JMH&lt;/a&gt;. It covers the following libraries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/avaje/avaje-jsonb&#34;&gt;avaje-jsonb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/boonproject/boon&#34;&gt;boon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ngs-doo/dsl-json&#34;&gt;dsl-json&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alibaba/fastjson&#34;&gt;fastjson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://flexjson.sourceforge.net/&#34;&gt;flexjson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://owlike.github.io/genson/&#34;&gt;genson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/gson&#34;&gt;gson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FasterXML/jackson&#34;&gt;jackson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jsonp.java.net/&#34;&gt;jakarta-json&lt;/a&gt; (from Oracle)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://johnzon.apache.org/&#34;&gt;johnzon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jdereg/json-io&#34;&gt;json-io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.google.com/archive/p/json-simple/&#34;&gt;json-simple&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://netplex.github.io/json-smart/&#34;&gt;json-smart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bluelinelabs/LoganSquare&#34;&gt;logansquare&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ralfstx/minimal-json&#34;&gt;minimal-json&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bolerio/mjson&#34;&gt;mjson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/square/moshi&#34;&gt;moshi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mmastrac/nanojson&#34;&gt;nanojson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stleary/JSON-java&#34;&gt;org.json&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://senthilganeshs.github.io/jsonp/&#34;&gt;purejson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/quarkusio/qson&#34;&gt;qson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tapestry.apache.org/json.html&#34;&gt;tapestry&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/javadev/underscore-java&#34;&gt;underscore-java&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When available, both databinding and &#39;stream&#39; (custom packing and unpacking) implementations are tested. Two different kinds of &lt;a href=&#34;https://raw.githubusercontent.com/fabienrenaud/java-json-benchmark/master/src/main/java/com/github/fabienrenaud/jjb/model/&#34;&gt;models&lt;/a&gt; are evaluated with payloads of 1, 10, 100 and 1000 KB size:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fabienrenaud/java-json-benchmark/master/src/main/java/com/github/fabienrenaud/jjb/model/Users.java&#34;&gt;&lt;code&gt;Users&lt;/code&gt;&lt;/a&gt;: uses primitive types, String, List and simple POJOs; and&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fabienrenaud/java-json-benchmark/master/src/main/java/com/github/fabienrenaud/jjb/model/Clients.java&#34;&gt;&lt;code&gt;Clients&lt;/code&gt;&lt;/a&gt;: adds arrays, enum, UUID, LocalDate&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This benchmark is written to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;randomly generate payloads upon static loading of the JVM/benchmark; the &lt;em&gt;seed&lt;/em&gt; is also shared across runs&lt;/li&gt; &#xA; &lt;li&gt;read data from RAM&lt;/li&gt; &#xA; &lt;li&gt;write data to reusable output streams (when possible); this reduces allocation pressure&lt;/li&gt; &#xA; &lt;li&gt;consume all output streams; to avoid dead code elimination optimization&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Not evaluated are: RAM utilization, compression, payloads &amp;gt; 1 MB.&lt;/p&gt; &#xA;&lt;h2&gt;Results&lt;/h2&gt; &#xA;&lt;p&gt;The benchmarks are written with &lt;a href=&#34;http://openjdk.java.net/projects/code-tools/jmh/&#34;&gt;JMH&lt;/a&gt; and for Java 17.&lt;/p&gt; &#xA;&lt;p&gt;The results here-below were computed on April the 30th, 2023 with the following libraries and versions:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Library&lt;/th&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;avaje-jsonb&lt;/td&gt; &#xA;   &lt;td&gt;1.4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;boon&lt;/td&gt; &#xA;   &lt;td&gt;0.34&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dsl-json&lt;/td&gt; &#xA;   &lt;td&gt;1.10.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fastjson&lt;/td&gt; &#xA;   &lt;td&gt;2.0.27&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;flexjson&lt;/td&gt; &#xA;   &lt;td&gt;3.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;genson&lt;/td&gt; &#xA;   &lt;td&gt;1.6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gson&lt;/td&gt; &#xA;   &lt;td&gt;2.10.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;jackson&lt;/td&gt; &#xA;   &lt;td&gt;2.14.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;jodd json&lt;/td&gt; &#xA;   &lt;td&gt;6.0.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;johnzon&lt;/td&gt; &#xA;   &lt;td&gt;1.2.19&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;jakarta&lt;/td&gt; &#xA;   &lt;td&gt;2.1.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;json-io&lt;/td&gt; &#xA;   &lt;td&gt;4.14.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;simplejson&lt;/td&gt; &#xA;   &lt;td&gt;1.1.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;json-smart&lt;/td&gt; &#xA;   &lt;td&gt;2.4.10&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;logansquare&lt;/td&gt; &#xA;   &lt;td&gt;1.3.7&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;minimal-json&lt;/td&gt; &#xA;   &lt;td&gt;0.9.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mjson&lt;/td&gt; &#xA;   &lt;td&gt;1.4.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;moshi&lt;/td&gt; &#xA;   &lt;td&gt;1.14.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nanojson&lt;/td&gt; &#xA;   &lt;td&gt;1.8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;org.json&lt;/td&gt; &#xA;   &lt;td&gt;20230227&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;purejson&lt;/td&gt; &#xA;   &lt;td&gt;1.0.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;qson&lt;/td&gt; &#xA;   &lt;td&gt;1.1.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tapestry&lt;/td&gt; &#xA;   &lt;td&gt;5.8.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;underscore&lt;/td&gt; &#xA;   &lt;td&gt;1.88&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;yasson&lt;/td&gt; &#xA;   &lt;td&gt;3.0.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.google.com/spreadsheets/d/1KB2V8kxtXIgudNO4SpfYqZKn3z5OnFBP6bZVB9K2RUE/edit?usp=sharing&#34;&gt;All graphs and sheets are available in this google doc.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fabienrenaud/java-json-benchmark/master/archive/raw-results-2023-04-30.md&#34;&gt;Raw JMH results are available here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;Users&lt;/code&gt; model&lt;/h3&gt; &#xA;&lt;p&gt;Uses: primitive types, String, List and simple POJOs&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Deserialization performance&lt;/strong&gt; &lt;img src=&#34;https://docs.google.com/spreadsheets/d/e/2PACX-1vQjiR_OOk6FXipfmKiZCil9yAdM4BSPViKIOh0lvAEHcD-gVy_lGiUX86VBhr_xrzcz4VsLSHIzq2qY/pubchart?oid=1217359585&amp;amp;format=image&#34; alt=&#34;json deserialization performance for primitive types, String, List and simple POJOs&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Serialization performance&lt;/strong&gt; &lt;img src=&#34;https://docs.google.com/spreadsheets/d/e/2PACX-1vQjiR_OOk6FXipfmKiZCil9yAdM4BSPViKIOh0lvAEHcD-gVy_lGiUX86VBhr_xrzcz4VsLSHIzq2qY/pubchart?oid=296776676&amp;amp;format=image&#34; alt=&#34;json serialization performance for primitive types, String, List and simple POJOs&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;Clients&lt;/code&gt; model&lt;/h3&gt; &#xA;&lt;p&gt;Uses: primitive types, String, List and simple POJOs, arrays, enum, UUID, LocalDate&lt;/p&gt; &#xA;&lt;p&gt;Note: fewer libraries are tested with this model due to lack of support for some of the evaluated types.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Deserialization performance&lt;/strong&gt; &lt;img src=&#34;https://docs.google.com/spreadsheets/d/e/2PACX-1vQjiR_OOk6FXipfmKiZCil9yAdM4BSPViKIOh0lvAEHcD-gVy_lGiUX86VBhr_xrzcz4VsLSHIzq2qY/pubchart?oid=684555912&amp;amp;format=image&#34; alt=&#34;json deserialization performance for primitive types, String, List and simple POJOs, arrays, enum, UUID, LocalDate&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Serialization performance&lt;/strong&gt; &lt;img src=&#34;https://docs.google.com/spreadsheets/d/e/2PACX-1vQjiR_OOk6FXipfmKiZCil9yAdM4BSPViKIOh0lvAEHcD-gVy_lGiUX86VBhr_xrzcz4VsLSHIzq2qY/pubchart?oid=2004244401&amp;amp;format=image&#34; alt=&#34;json serialization performance for primitive types, String, List and simple POJOs, arrays, enum, UUID, LocalDate&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Benchmark configuration&lt;/h3&gt; &#xA;&lt;p&gt;Tests were run on an &lt;a href=&#34;https://aws.amazon.com/ec2/instance-types/c5/&#34;&gt;Amazon EC2 c5.xlarge&lt;/a&gt; (4 vCPU, 8 GiB RAM)&lt;/p&gt; &#xA;&lt;p&gt;JMH info:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# JMH version: 1.35&#xA;# VM version: JDK 17.0.6, OpenJDK 64-Bit Server VM, 17.0.6+10-LTS&#xA;# VM invoker: /usr/lib/jvm/java-17-amazon-corretto.x86_64/bin/java&#xA;# VM options: -Xms2g -Xmx2g --add-opens=java.base/java.time=ALL-UNNAMED&#xA;# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)&#xA;# Warmup: 5 iterations, 10 s each&#xA;# Measurement: 10 iterations, 3 s each&#xA;# Timeout: 10 min per iteration&#xA;# Threads: 16 threads, will synchronize iterations&#xA;# Benchmark mode: Throughput, ops/time&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run&lt;/h2&gt; &#xA;&lt;h3&gt;Local run&lt;/h3&gt; &#xA;&lt;p&gt;Prerequisites:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JDK 17; and JAVA_HOME set.&lt;/li&gt; &#xA; &lt;li&gt;make&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By default, running &lt;code&gt;./run ser&lt;/code&gt; (&lt;code&gt;./run deser&lt;/code&gt; respectively) will run all -- stream and databind -- serialization (deserialization respectively) benchmarks with 1 KB payloads of &lt;em&gt;Users&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also specify which libs, apis, payload-sizes and number of iterations (and more) you want to run. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./run deser --apis stream --libs genson,jackson&#xA;./run ser --apis databind,stream --libs jackson&#xA;./run deser --apis stream --libs dsljson,jackson --size 10 --datatype users&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Type &lt;code&gt;./run help ser&lt;/code&gt; or &lt;code&gt;./run help deser&lt;/code&gt; to print help for those commands.&lt;/p&gt; &#xA;&lt;p&gt;If you wish to run &lt;em&gt;all&lt;/em&gt; benchmarks used to generate the reports above, you can run &lt;code&gt;./run-everything&lt;/code&gt;. This will take several hours to complete, so be patient.&lt;/p&gt; &#xA;&lt;h2&gt;Run on AWS&lt;/h2&gt; &#xA;&lt;p&gt;Prerequisites:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JDK 17; and JAVA_HOME set.&lt;/li&gt; &#xA; &lt;li&gt;make&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.packer.io/&#34;&gt;packer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html&#34;&gt;awscli&lt;/a&gt; and configured via &lt;code&gt;aws configure&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then, simply run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make packer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Any help to improve the existing benchmarks or write ones for other libraries is welcome.&lt;/p&gt; &#xA;&lt;p&gt;Adding a JSON library to the benchmark requires little work and you can find numerous examples in the commit history. For instance:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Addition of moshi: &lt;a href=&#34;https://github.com/fabienrenaud/java-json-benchmark/commit/6af2c0a7091b12a9dc768e49499682b97ea57ff6&#34;&gt;https://github.com/fabienrenaud/java-json-benchmark/commit/6af2c0a7091b12a9dc768e49499682b97ea57ff6&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Addition of jodd: &lt;a href=&#34;https://github.com/fabienrenaud/java-json-benchmark/commit/288a4e61496588ed4c0a80e1f107f34f9a2c985c&#34;&gt;https://github.com/fabienrenaud/java-json-benchmark/commit/288a4e61496588ed4c0a80e1f107f34f9a2c985c&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Addition of json-simple: &lt;a href=&#34;https://github.com/fabienrenaud/java-json-benchmark/commit/1e1e559c39a6eddc3dd7d7cea777fc7861415469&#34;&gt;https://github.com/fabienrenaud/java-json-benchmark/commit/1e1e559c39a6eddc3dd7d7cea777fc7861415469&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Pull requests are welcome.&lt;/p&gt;</summary>
  </entry>
</feed>