<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-30T01:34:00Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Melledy/LunarCore</title>
    <updated>2023-11-30T01:34:00Z</updated>
    <id>tag:github.com,2023-11-30:/Melledy/LunarCore</id>
    <link href="https://github.com/Melledy/LunarCore" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lunar Core&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Language&lt;/em&gt;&lt;/strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Melledy/LunarCore/development/README.md&#34;&gt;EN&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/Melledy/LunarCore/development/README_zh-CN.md&#34;&gt;简中&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/Melledy/LunarCore/development/README_ja-JP.md&#34;&gt;日本語&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;p&gt;A game server reimplementation for version 1.5.0 of a certain turn-based anime game for educational purposes. For any extra support, questions, or discussions, check out our &lt;a href=&#34;https://discord.gg/cfPKJ6N5hw&#34;&gt;discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Notable features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Basic game features: Logging in, team setup, inventory, basic scene/entity management&lt;/li&gt; &#xA; &lt;li&gt;Monster battles working&lt;/li&gt; &#xA; &lt;li&gt;Natural world monster/prop/NPC spawns&lt;/li&gt; &#xA; &lt;li&gt;Most character techniques are handled&lt;/li&gt; &#xA; &lt;li&gt;Npc shops handled&lt;/li&gt; &#xA; &lt;li&gt;Gacha system&lt;/li&gt; &#xA; &lt;li&gt;Mail system&lt;/li&gt; &#xA; &lt;li&gt;Friend system (Assists are not working yet)&lt;/li&gt; &#xA; &lt;li&gt;Forgotten hall (with 1.4.0 features)&lt;/li&gt; &#xA; &lt;li&gt;Simulated universe (Runs can be finished, but many features are missing)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Running the server and client&lt;/h1&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.oracle.com/java/technologies/javase/jdk17-archive-downloads.html&#34;&gt;Java 17 JDK&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Recommended&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mongodb.com/try/download/community&#34;&gt;MongoDB 4.0+&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Compiling the server&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the files from &lt;a href=&#34;https://gitlab.com/Melledy/LunarCore-Protos&#34;&gt;https://gitlab.com/Melledy/LunarCore-Protos&lt;/a&gt; and place the proto folder into your server directory&lt;/li&gt; &#xA; &lt;li&gt;Open your system terminal, and compile the server with &lt;code&gt;./gradlew jar&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create a folder named &lt;code&gt;resources&lt;/code&gt; in your server directory&lt;/li&gt; &#xA; &lt;li&gt;Download the &lt;code&gt;Config&lt;/code&gt;, &lt;code&gt;TextMap&lt;/code&gt;, and &lt;code&gt;ExcelBin&lt;/code&gt; folders from &lt;a href=&#34;https://github.com/Dimbreath/StarRailData&#34;&gt;https://github.com/Dimbreath/StarRailData&lt;/a&gt; and place them into your resources folder.&lt;/li&gt; &#xA; &lt;li&gt;Download the &lt;code&gt;Config&lt;/code&gt; folder from &lt;a href=&#34;https://gitlab.com/Melledy/LunarCore-Configs&#34;&gt;https://gitlab.com/Melledy/LunarCore-Configs&lt;/a&gt; and place them into your resouces folder. REPLACE any files that your system asks about. These are for world spawns and are quite important for the server.&lt;/li&gt; &#xA; &lt;li&gt;Run the server with &lt;code&gt;java -jar LunarCore.jar&lt;/code&gt; from your system terminal. Lunar Core comes with a built-in internal MongoDB server for its database, so no Mongodb installation is required. However, it is highly recommended to install Mongodb anyway.&lt;/li&gt; &#xA; &lt;li&gt;If you have &lt;code&gt;autoCreateAccount&lt;/code&gt; set to true in the config, then you can skip creating an account. Otherwise, use the &lt;code&gt;/account&lt;/code&gt; command in the server console to create one.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Connecting with the client (Fiddler)&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Login with the client to an official server and Hoyoverse account at least once to download game data.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install and have &lt;a href=&#34;https://www.telerik.com/fiddler&#34;&gt;Fiddler Classic&lt;/a&gt; running.&lt;/li&gt; &#xA; &lt;li&gt;Set fiddler to decrypt https traffic. (Tools -&amp;gt; Options -&amp;gt; HTTPS -&amp;gt; Decrypt HTTPS traffic) Make sure &lt;code&gt;ignore server certificate errors&lt;/code&gt; is checked as well.&lt;/li&gt; &#xA; &lt;li&gt;Copy and paste the following code into the Fiddlerscript tab of Fiddler Classic:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;import System;&#xA;import System.Windows.Forms;&#xA;import Fiddler;&#xA;import System.Text.RegularExpressions;&#xA;&#xA;class Handlers&#xA;{&#xA;    static function OnBeforeRequest(oS: Session) {&#xA;        if (oS.host.EndsWith(&#34;.starrails.com&#34;) || oS.host.EndsWith(&#34;.hoyoverse.com&#34;) || oS.host.EndsWith(&#34;.mihoyo.com&#34;) || oS.host.EndsWith(&#34;.bhsr.com&#34;)) {&#xA;            oS.host = &#34;localhost&#34;; // This can also be replaced with another IP address.&#xA;        }&#xA;    }&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Login with your account name, the password can be set to anything.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Server commands&lt;/h3&gt; &#xA;&lt;p&gt;Server commands can be run in the server console or in-game. There is a dummy user named &#34;Server&#34; in every player&#39;s friends list that you can message to use in-game commands.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/account {create | delete} [username] (reserved player uid). Creates or deletes an account.&#xA;/avatar lv(level) p(ascension) r(eidolon) s(skill levels). Sets the current avatar&#39;s properties&#xA;/clear {relics | lightcones | materials | items}. Removes filtered items from the player inventory.&#xA;/gender {male | female}. Sets the player gender.&#xA;/give [item id] x[amount]. Gives the targetted player an item.&#xA;/giveall {materials | avatars}. Gives the targeted player items.&#xA;/help. Displays a list of available commands.&#xA;/mail [content]. Sends the targeted player a system mail.&#xA;/permission {add | remove | clear} [permission]. Gives/removes a permission from the targeted player.&#xA;/reload. Reloads the server config.&#xA;/scene [scene id] [floor id]. Teleports the player to the specified scene.&#xA;/spawn [monster/prop id] x[amount] s[stage id]. Spawns a monster or prop near the targeted player.&#xA;/unstuck @[player id]. Unstucks an offline player if theyre in a scene that doesnt load.&#xA;/worldlevel [world level]. Sets the targeted player&#39;s equilibrium level.&#xA;/refill. Refills your skill points in open world.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>makemyownlife/platform-sms</title>
    <updated>2023-11-30T01:34:00Z</updated>
    <id>tag:github.com,2023-11-30:/makemyownlife/platform-sms</id>
    <link href="https://github.com/makemyownlife/platform-sms" rel="alternate"></link>
    <summary type="html">&lt;p&gt;简单的短信网关服务，提供客户端 SDK ，支持阿里云，腾讯云，亿美短信发送，适用于中小型公司。您的 ⭐️ ⭐️⭐️Star⭐️⭐️ ⭐️，是我的动力！如果您觉得还不错，请点上一颗小星星。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/makemyownlife/platform-sms/master/doc/images/gongzhonghaonew.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;1 简介&lt;/h1&gt; &#xA;&lt;p&gt;一个简单易用的短信网关服务，提供客户端 SDK ，支持阿里云，腾讯云，亿美短信发送，适用于中小型公司。&lt;/p&gt; &#xA;&lt;p&gt;功能包含：&lt;strong&gt;应用管理&lt;/strong&gt;、&lt;strong&gt;渠道管理&lt;/strong&gt;、&lt;strong&gt;单发短信&lt;/strong&gt;、&lt;strong&gt;单发短信&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;客户端和服务端两种发送短信的模式，可以参看这篇文章： &lt;a href=&#34;https://mp.weixin.qq.com/s/hwMRHrBe4WxgxPkNXixIvg&#34;&gt;Java应用中如何发送短信&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;2 工作原理&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/makemyownlife/platform-sms/master/doc/images/server.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;核心流程如下：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;前端调用应用服务接口发送短信 ;&lt;/li&gt; &#xA; &lt;li&gt;应用服务收到短信请求后，调用 SDK 接口根据模版发送短信；&lt;/li&gt; &#xA; &lt;li&gt;短信平台服务收到请求，根据路由算法选择配置的渠道（比如阿里云、腾讯云）发送短信；&lt;/li&gt; &#xA; &lt;li&gt;短信成功发送到用户手机。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;3 环境准备&lt;/h1&gt; &#xA;&lt;p&gt;短信平台服务是 JAVA 应用，所以必须安装 JDK（1.8或更高版本），安装并配置环境变量 JAVA_HOME，然后将包含在 JAVA_HOME 中的 bin 目录追加到 PATH 变量中。&lt;/p&gt; &#xA;&lt;p&gt;短信平台服务依赖外部 &lt;strong&gt;MySQL&lt;/strong&gt; 和 &lt;strong&gt;Redis&lt;/strong&gt; 两个服务 ，所以在部署之前必须安装好前置数据库。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://javayong.cn/pics/sms/platformsmsmysqlredis.png?a=2&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;4 部署流程&lt;/h1&gt; &#xA;&lt;h2&gt;4.1 创建数据库以及相关表&lt;/h2&gt; &#xA;&lt;p&gt;创建数据库&lt;code&gt;tech_platform&lt;/code&gt; ，执行&lt;code&gt; doc/sql&lt;/code&gt; 目录下的 &lt;code&gt; tech_platform.sql&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;p&gt;执行后效果如下：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/makemyownlife/platform-sms/master/doc/images/tables.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;4.1 修改部署包配置&lt;/h2&gt; &#xA;&lt;p&gt;从 Release 下载 &lt;code&gt;platform-sms-admin.tar.gz&lt;/code&gt; ，解压缩后，进入 &lt;code&gt;conf &lt;/code&gt;目录 。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/makemyownlife/platform-sms/master/doc/images/adminconfdir.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;编辑 &lt;code&gt;application.yml &lt;/code&gt; 文件：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/makemyownlife/platform-sms/master/doc/images/prepare.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;进入 bin 目录，启动服务：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bin/startup.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;5 操作流程&lt;/h1&gt; &#xA;&lt;h2&gt;5.1 登录页面&lt;/h2&gt; &#xA;&lt;p&gt;服务启动后，访问地址：&lt;code&gt;http://localhost:8089&lt;/code&gt; 。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/makemyownlife/platform-sms/master/doc/images/login.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;用户名和密码存储在 &lt;code&gt;conf&lt;/code&gt; 目录的 &lt;code&gt;application.yml&lt;/code&gt;，默认用户名密码分别是：admin/admin1984 。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;5.2 新建应用&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/makemyownlife/platform-sms/master/doc/images/createapp.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;应用信息包含应用名称、应用 &lt;code&gt;appKey&lt;/code&gt; , &lt;code&gt;应用秘钥&lt;/code&gt;，&lt;code&gt;备注&lt;/code&gt;。其中，应用 key 和 密钥在使用客户端 SDK 时需要配置 。&lt;/p&gt; &#xA;&lt;h2&gt;5.3 新建渠道&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/makemyownlife/platform-sms/master/doc/images/createchannel.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;注意：因为腾讯云的 SDK 请求 中需要携带 APPID ，所以 Beta 版中将 appId 存储在附件属性。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;5.4 创建模版&lt;/h2&gt; &#xA;&lt;p&gt;在&lt;code&gt;模版管理&lt;/code&gt;模块，点击&lt;code&gt;新建模版&lt;/code&gt;按钮。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/makemyownlife/platform-sms/master/doc/images/createtemplate.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;新建模版时，签名名称必须和渠道申请的签名必须一致。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;下图展示了笔者的腾讯云申请的签名，笔者创建的模版必须和腾讯云账号的签名保持一致。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/makemyownlife/platform-sms/master/doc/images/tencentsign.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;创建完模版之后，需要绑定渠道，我们需要在三方渠道先创建短信模版，然后提交绑定。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1、三方渠道先创建短信模版&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/makemyownlife/platform-sms/master/doc/images/applytencenttemplate.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;如上图，笔者创建了编号为 1955325 的短信模版，因为我们需要在绑定界面绑定该渠道的模版，理论上在短信平台创建的模版可以绑定多个渠道。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2、绑定渠道&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/makemyownlife/platform-sms/master/doc/images/bingdingtemplate.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;绑定完成之后，可以在模版管理页面查看模版列表 。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/makemyownlife/platform-sms/master/doc/images/templatelist.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;5.5 发送短信&lt;/h2&gt; &#xA;&lt;p&gt;发送短信可以参考 DEMO 模块：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/makemyownlife/platform-sms/master/doc/images/demoproject.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;01 添加依赖&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;com.courage&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;platform-sms-client&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;${parent.version}&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;02 客户端配置&lt;/h3&gt; &#xA;&lt;p&gt;首先在 &lt;code&gt;application.yml &lt;/code&gt;中配置如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;sms:&#xA;  smsServerUrl: http://localhost:8089&#xA;  appKey: qQjEiFzn80v8VM4h&#xA;  appSecret: 9c465ece754bd26a9be77f3d0e2606bd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;然后编写配置类：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@Configuration&#xA;public class SmsConfiguration {&#xA;&#xA;​    @Value(&#34;${sms.smsServerUrl}&#34;)&#xA;​    private String smsServerUrl;&#xA;&#xA;​    @Value(&#34;${sms.appKey}&#34;)&#xA;​    private String appKey;&#xA;&#xA;​    @Value(&#34;${sms.appSecret}&#34;)&#xA;​    private String appSecret;&#xA;&#xA;​    @Bean&#xA;​    public SmsSenderClient createClient() {&#xA;​        SmsConfig smsConfig = new SmsConfig();&#xA;​        smsConfig.setAppKey(appKey);&#xA;​        smsConfig.setSmsServerUrl(smsServerUrl);&#xA;​        smsConfig.setAppSecret(appSecret);&#xA;​        SmsSenderClient smsSenderClient = new SmsSenderClient(smsConfig);&#xA;​        return smsSenderClient;&#xA;​    }&#xA;&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;03 单发短信&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Autowired&#xA;private SmsSenderClient smsSenderClient;&#xA;&#xA;@GetMapping(&#34;/test&#34;)&#xA;public String test() {&#xA;    String mobile = &#34;15011319235&#34;;&#xA;    String templateId = &#34;523419101760679938&#34;;&#xA;    // 你好，你的信息是：${code}&#xA;    Map&amp;lt;String, String&amp;gt; param = new HashMap&amp;lt;String, String&amp;gt;();&#xA;    param.put(&#34;code&#34;, &#34;1234&#34;);&#xA;    SmsSenderResult senderResult = smsSenderClient.sendSmsByTemplateId(mobile, templateId, param);&#xA;    System.out.println(&#34;senderResult:&#34; + JSON.toJSONString*(senderResult));&#xA;    return &#34;hello , first short message !&#34;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt;</summary>
  </entry>
</feed>