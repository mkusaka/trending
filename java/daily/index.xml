<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-24T01:33:08Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ddd-by-examples/library</title>
    <updated>2023-09-24T01:33:08Z</updated>
    <id>tag:github.com,2023-09-24:/ddd-by-examples/library</id>
    <link href="https://github.com/ddd-by-examples/library" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A comprehensive Domain-Driven Design example with problem space strategic analysis and various tactical patterns.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/ddd-by-examples/library&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/ddd-by-examples/library.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/ddd-by-examples/library&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/ddd-by-examples/library/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Code Coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Table of contents&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ddd-by-examples/library/master/#about&#34;&gt;About&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ddd-by-examples/library/master/#domain-description&#34;&gt;Domain description&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ddd-by-examples/library/master/#general-assumptions&#34;&gt;General assumptions&lt;/a&gt;&lt;br&gt; 3.1 &lt;a href=&#34;https://raw.githubusercontent.com/ddd-by-examples/library/master/#process-discovery&#34;&gt;Process discovery&lt;/a&gt;&lt;br&gt; 3.2 &lt;a href=&#34;https://raw.githubusercontent.com/ddd-by-examples/library/master/#project-structure-and-architecture&#34;&gt;Project structure and architecture&lt;/a&gt;&lt;br&gt; 3.3 &lt;a href=&#34;https://raw.githubusercontent.com/ddd-by-examples/library/master/#aggregates&#34;&gt;Aggregates&lt;/a&gt;&lt;br&gt; 3.4 &lt;a href=&#34;https://raw.githubusercontent.com/ddd-by-examples/library/master/#events&#34;&gt;Events&lt;/a&gt;&lt;br&gt; 3.4.1 &lt;a href=&#34;https://raw.githubusercontent.com/ddd-by-examples/library/master/#events-in-repositories&#34;&gt;Events in Repositories&lt;/a&gt;&lt;br&gt; 3.5 &lt;a href=&#34;https://raw.githubusercontent.com/ddd-by-examples/library/master/#archunit&#34;&gt;ArchUnit&lt;/a&gt;&lt;br&gt; 3.6 &lt;a href=&#34;https://raw.githubusercontent.com/ddd-by-examples/library/master/#functional-thinking&#34;&gt;Functional thinking&lt;/a&gt;&lt;br&gt; 3.7 &lt;a href=&#34;https://raw.githubusercontent.com/ddd-by-examples/library/master/#no-orm&#34;&gt;No ORM&lt;/a&gt;&lt;br&gt; 3.8 &lt;a href=&#34;https://raw.githubusercontent.com/ddd-by-examples/library/master/#architecture-code-gap&#34;&gt;Architecture-code gap&lt;/a&gt;&lt;br&gt; 3.9 &lt;a href=&#34;https://raw.githubusercontent.com/ddd-by-examples/library/master/#model-code-gap&#34;&gt;Model-code gap&lt;/a&gt;&lt;br&gt; 3.10 &lt;a href=&#34;https://raw.githubusercontent.com/ddd-by-examples/library/master/#spring&#34;&gt;Spring&lt;/a&gt;&lt;br&gt; 3.11 &lt;a href=&#34;https://raw.githubusercontent.com/ddd-by-examples/library/master/#tests&#34;&gt;Tests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ddd-by-examples/library/master/#how-to-contribute&#34;&gt;How to contribute&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ddd-by-examples/library/master/#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;This is a project of a library, driven by real &lt;a href=&#34;https://raw.githubusercontent.com/ddd-by-examples/library/master/#domain-description&#34;&gt;business requirements&lt;/a&gt;. We use techniques strongly connected with Domain Driven Design, Behavior-Driven Development, Event Storming, User Story Mapping.&lt;/p&gt; &#xA;&lt;h2&gt;Domain description&lt;/h2&gt; &#xA;&lt;p&gt;A public library allows patrons to place books on hold at its various library branches. Available books can be placed on hold only by one patron at any given point in time. Books are either circulating or restricted, and can have retrieval or usage fees. A restricted book can only be held by a researcher patron. A regular patron is limited to five holds at any given moment, while a researcher patron is allowed an unlimited number of holds. An open-ended book hold is active until the patron checks out the book, at which time it is completed. A closed-ended book hold that is not completed within a fixed number of days after it was requested will expire. This check is done at the beginning of a day by taking a look at daily sheet with expiring holds. Only a researcher patron can request an open-ended hold duration. Any patron with more than two overdue checkouts at a library branch will get a rejection if trying a hold at that same library branch. A book can be checked out for up to 60 days. Check for overdue checkouts is done by taking a look at daily sheet with overdue checkouts. Patron interacts with his/her current holds, checkouts, etc. by taking a look at patron profile. Patron profile looks like a daily sheet, but the information there is limited to one patron and is not necessarily daily. Currently a patron can see current holds (not canceled nor expired) and current checkouts (including overdue). Also, he/she is able to hold a book and cancel a hold.&lt;/p&gt; &#xA;&lt;p&gt;How actually a patron knows which books are there to lend? Library has its catalogue of books where books are added together with their specific instances. A specific book instance of a book can be added only if there is book with matching ISBN already in the catalogue. Book must have non-empty title and price. At the time of adding an instance we decide whether it will be Circulating or Restricted. This enables us to have book with same ISBN as circulated and restricted at the same time (for instance, there is a book signed by the author that we want to keep as Restricted)&lt;/p&gt; &#xA;&lt;h2&gt;General assumptions&lt;/h2&gt; &#xA;&lt;h3&gt;Process discovery&lt;/h3&gt; &#xA;&lt;p&gt;The first thing we started with was domain exploration with the help of Big Picture EventStorming. The description you found in the previous chapter, landed on our virtual wall:&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ddd-by-examples/library/master/docs/images/eventstorming-domain-desc.png&#34; alt=&#34;Event Storming Domain description&#34;&gt;&lt;br&gt; The EventStorming session led us to numerous discoveries, modeled with the sticky notes:&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ddd-by-examples/library/master/docs/images/eventstorming-big-picture.jpg&#34; alt=&#34;Event Storming Big Picture&#34;&gt;&lt;br&gt; During the session we discovered following definitions:&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ddd-by-examples/library/master/docs/images/eventstorming-definitions.png&#34; alt=&#34;Event Storming Definitions&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This made us think of real life scenarios that might happen. We discovered them described with the help of the &lt;strong&gt;Example mapping&lt;/strong&gt;:&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ddd-by-examples/library/master/docs/images/example-mapping.png&#34; alt=&#34;Example mapping&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This in turn became the base for our &lt;em&gt;Design Level&lt;/em&gt; sessions, where we analyzed each example:&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ddd-by-examples/library/master/docs/images/eventstorming-design-level.jpg&#34; alt=&#34;Example mapping&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please follow the links below to get more details on each of the mentioned steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ddd-by-examples/library/master/docs/big-picture.md&#34;&gt;Big Picture EventStorming&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ddd-by-examples/library/master/docs/example-mapping.md&#34;&gt;Example Mapping&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ddd-by-examples/library/master/docs/design-level.md&#34;&gt;Design Level EventStorming&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Project structure and architecture&lt;/h3&gt; &#xA;&lt;p&gt;At the very beginning, not to overcomplicate the project, we decided to assign each bounded context to a separate package, which means that the system is a modular monolith. There are no obstacles, though, to put contexts into maven modules or finally into microservices.&lt;/p&gt; &#xA;&lt;p&gt;Bounded contexts should (amongst others) introduce autonomy in the sense of architecture. Thus, each module encapsulating the context has its own local architecture aligned to problem complexity. In the case of a context, where we identified true business logic (&lt;strong&gt;lending&lt;/strong&gt;) we introduced a domain model that is a simplified (for the purpose of the project) abstraction of the reality and utilized hexagonal architecture. In the case of a context, that during Event Storming turned out to lack any complex domain logic, we applied CRUD-like local architecture.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ddd-by-examples/library/master/docs/images/architecture-big-picture.png&#34; alt=&#34;Architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If we are talking about hexagonal architecture, it lets us separate domain and application logic from frameworks (and infrastructure). What do we gain with this approach? Firstly, we can unit test most important part of the application - &lt;strong&gt;business logic&lt;/strong&gt; - usually without the need to stub any dependency. Secondly, we create ourselves an opportunity to adjust infrastructure layer without the worry of breaking the core functionality. In the infrastructure layer we intensively use Spring Framework as probably the most mature and powerful application framework with an incredible test support. More information about how we use Spring you will find &lt;a href=&#34;https://raw.githubusercontent.com/ddd-by-examples/library/master/#spring&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As we already mentioned, the architecture was driven by Event Storming sessions. Apart from identifying contexts and their complexity, we could also make a decision that we separate read and write models (CQRS). As an example you can have a look at &lt;strong&gt;Patron Profiles&lt;/strong&gt; and &lt;em&gt;Daily Sheets&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Aggregates&lt;/h3&gt; &#xA;&lt;p&gt;Aggregates discovered during Event Storming sessions communicate with each other with events. There is a contention, though, should they be consistent immediately or eventually? As aggregates in general determine business boundaries, eventual consistency sounds like a better choice, but choices in software are never costless. Providing eventual consistency requires some infrastructural tools, like message broker or event store. That&#39;s why we could (and did) start with immediate consistency.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Good architecture is the one which postpones all important decisions&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;... that&#39;s why we made it easy to change the consistency model, providing tests for each option, including basic implementations based on &lt;strong&gt;DomainEvents&lt;/strong&gt; interface, which can be adjusted to our needs and toolset in future. Let&#39;s have a look at following examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Immediate consistency&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;def &#39;should synchronize Patron, Book and DailySheet with events&#39;() {&#xA;    given:&#xA;        bookRepository.save(book)&#xA;    and:&#xA;        patronRepo.publish(patronCreated())&#xA;    when:&#xA;        patronRepo.publish(placedOnHold(book))&#xA;    then:&#xA;        patronShouldBeFoundInDatabaseWithOneBookOnHold(patronId)&#xA;    and:&#xA;        bookReactedToPlacedOnHoldEvent()&#xA;    and:&#xA;        dailySheetIsUpdated()&#xA;}&#xA;&#xA;boolean bookReactedToPlacedOnHoldEvent() {&#xA;    return bookRepository.findBy(book.bookId).get() instanceof BookOnHold&#xA;}&#xA;&#xA;boolean dailySheetIsUpdated() {&#xA;    return new JdbcTemplate(datasource).query(&#34;select count(*) from holds_sheet s where s.hold_by_patron_id = ?&#34;,&#xA;            [patronId.patronId] as Object[],&#xA;            new ColumnMapRowMapper()).get(0)&#xA;            .get(&#34;COUNT(*)&#34;) == 1&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Please note that here we are just reading from database right after events are being published&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Simple implementation of the event bus is based on Spring application events:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@AllArgsConstructor&#xA;public class JustForwardDomainEventPublisher implements DomainEvents {&#xA;&#xA;    private final ApplicationEventPublisher applicationEventPublisher;&#xA;&#xA;    @Override&#xA;    public void publish(DomainEvent event) {&#xA;        applicationEventPublisher.publishEvent(event);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Eventual consistency&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;def &#39;should synchronize Patron, Book and DailySheet with events&#39;() {&#xA;    given:&#xA;        bookRepository.save(book)&#xA;    and:&#xA;        patronRepo.publish(patronCreated())&#xA;    when:&#xA;        patronRepo.publish(placedOnHold(book))&#xA;    then:&#xA;        patronShouldBeFoundInDatabaseWithOneBookOnHold(patronId)&#xA;    and:&#xA;        bookReactedToPlacedOnHoldEvent()&#xA;    and:&#xA;        dailySheetIsUpdated()&#xA;}&#xA;&#xA;void bookReactedToPlacedOnHoldEvent() {&#xA;    pollingConditions.eventually {&#xA;        assert bookRepository.findBy(book.bookId).get() instanceof BookOnHold&#xA;    }&#xA;}&#xA;&#xA;void dailySheetIsUpdated() {&#xA;    pollingConditions.eventually {&#xA;        assert countOfHoldsInDailySheet() == 1&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Please note that the test looks exactly the same as previous one, but now we utilized Groovy&#39;s &lt;strong&gt;PollingConditions&lt;/strong&gt; to perform asynchronous functionality tests&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Sample implementation of event bus is following:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@AllArgsConstructor&#xA;public class StoreAndForwardDomainEventPublisher implements DomainEvents {&#xA;&#xA;    private final JustForwardDomainEventPublisher justForwardDomainEventPublisher;&#xA;    private final EventsStorage eventsStorage;&#xA;&#xA;    @Override&#xA;    public void publish(DomainEvent event) {&#xA;        eventsStorage.save(event);&#xA;    }&#xA;&#xA;    @Scheduled(fixedRate = 3000L)&#xA;    @Transactional&#xA;    public void publishAllPeriodically() {&#xA;        List&amp;lt;DomainEvent&amp;gt; domainEvents = eventsStorage.toPublish();&#xA;        domainEvents.forEach(justForwardDomainEventPublisher::publish);&#xA;        eventsStorage.published(domainEvents);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To clarify, we should always aim for aggregates that can handle a business operation atomically (transactionally if you like), so each aggregate should be as independent and decoupled from other aggregates as possible. Thus, eventual consistency is promoted. As we already mentioned, it comes with some tradeoffs, so from the pragmatic point of view immediate consistency is also a choice. You might ask yourself a question now: &lt;em&gt;What if I don&#39;t have any events yet?&lt;/em&gt;. Well, a pragmatic approach would be to encapsulate the communication between aggregates in a &lt;em&gt;Service-like&lt;/em&gt; class, where you could call proper aggregates line by line explicitly.&lt;/p&gt; &#xA;&lt;h3&gt;Events&lt;/h3&gt; &#xA;&lt;p&gt;Talking about inter-aggregate communication, we must remember that events reduce coupling, but don&#39;t remove it completely. Thus, it is very vital to share(publish) only those events, that are necessary for other aggregates to exist and function. Otherwise there is a threat that the level of coupling will increase introducing &lt;strong&gt;feature envy&lt;/strong&gt;, because other aggregates might start using those events to perform actions they are not supposed to perform. A solution to this problem could be the distinction of domain events and integration events, which will be described here soon.&lt;/p&gt; &#xA;&lt;h3&gt;Events in Repositories&lt;/h3&gt; &#xA;&lt;p&gt;Repositories are one of the most popular design pattern. They abstract our domain model from data layer. In other words, they deal with state. That said, a common use-case is when we pass a new state to our repository, so that it gets persisted. It may look like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class BusinessService {&#xA;   &#xA;    private final PatronRepository patronRepository;&#xA;    &#xA;    void businessMethod(PatronId patronId) {&#xA;        Patron patron = patronRepository.findById(patronId);&#xA;        //do sth&#xA;        patronRepository.save(patron);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Conceptually, between 1st and 3rd line of that business method we change state of our Patron from A to B. This change might be calculated by dirty checking or we might just override entire Patron state in the database. Third option is &lt;em&gt;Let&#39;s make implicit explicit&lt;/em&gt; and actually call this state change A-&amp;gt;B an &lt;strong&gt;event&lt;/strong&gt;. After all, event-driven architecture is all about promoting state changes as domain events.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to this our domain model may become immutable and just return events as results of invoking a command like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public BookPlacedOnHold placeOnHold(AvailableBook book) {&#xA;      ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And our repository might operate directly on events like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface PatronRepository {&#xA;     void save(PatronEvent event) {&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ArchUnit&lt;/h3&gt; &#xA;&lt;p&gt;One of the main components of a successful project is technical leadership that lets the team go in the right direction. Nevertheless, there are tools that can support teams in keeping the code clean and protect the architecture, so that the project won&#39;t become a Big Ball of Mud, and thus will be pleasant to develop and to maintain. The first option, the one we proposed, is &lt;a href=&#34;https://www.archunit.org/&#34;&gt;ArchUnit&lt;/a&gt; - a Java architecture test tool. ArchUnit lets you write unit tests of your architecture, so that it is always consistent with initial vision. Maven modules could be an alternative as well, but let&#39;s focus on the former.&lt;/p&gt; &#xA;&lt;p&gt;In terms of hexagonal architecture, it is essential to ensure, that we do not mix different levels of abstraction (hexagon levels):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@ArchTest&#xA;public static final ArchRule model_should_not_depend_on_infrastructure =&#xA;    noClasses()&#xA;        .that()&#xA;        .resideInAPackage(&#34;..model..&#34;)&#xA;        .should()&#xA;        .dependOnClassesThat()&#xA;        .resideInAPackage(&#34;..infrastructure..&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and that frameworks do not affect the domain model&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@ArchTest&#xA;public static final ArchRule model_should_not_depend_on_spring =&#xA;    noClasses()&#xA;        .that()&#xA;        .resideInAPackage(&#34;..io.pillopl.library.lending..model..&#34;)&#xA;        .should()&#xA;        .dependOnClassesThat()&#xA;        .resideInAPackage(&#34;org.springframework..&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Functional thinking&lt;/h3&gt; &#xA;&lt;p&gt;When you look at the code you might find a scent of functional programming. Although we do not follow a &lt;em&gt;clean&lt;/em&gt; FP, we try to think of business processes as pipelines or workflows, utilizing functional style through following concepts.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Please note that this is not a reference project for FP.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Immutable objects&lt;/h4&gt; &#xA;&lt;p&gt;Each class that represents a business concept is immutable, thanks to which we:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;provide full encapsulation and objects&#39; states protection,&lt;/li&gt; &#xA; &lt;li&gt;secure objects for multithreaded access,&lt;/li&gt; &#xA; &lt;li&gt;control all side effects much clearer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Pure functions&lt;/h4&gt; &#xA;&lt;p&gt;We model domain operations, discovered in Design Level Event Storming, as pure functions, and declare them in both domain and application layers in the form of Java&#39;s functional interfaces. Their implementations are placed in infrastructure layer as ordinary methods with side effects. Thanks to this approach we can follow the abstraction of ubiquitous language explicitly, and keep this abstraction implementation-agnostic. As an example, you could have a look at &lt;code&gt;FindAvailableBook&lt;/code&gt; interface and its implementation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@FunctionalInterface&#xA;public interface FindAvailableBook {&#xA;&#xA;    Option&amp;lt;AvailableBook&amp;gt; findAvailableBookBy(BookId bookId);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@AllArgsConstructor&#xA;class BookDatabaseRepository implements FindAvailableBook {&#xA;&#xA;    private final JdbcTemplate jdbcTemplate;&#xA;&#xA;    @Override&#xA;    public Option&amp;lt;AvailableBook&amp;gt; findAvailableBookBy(BookId bookId) {&#xA;        return Match(findBy(bookId)).of(&#xA;                Case($Some($(instanceOf(AvailableBook.class))), Option::of),&#xA;                Case($(), Option::none)&#xA;        );&#xA;    }  &#xA;&#xA;    Option&amp;lt;Book&amp;gt; findBy(BookId bookId) {&#xA;        return findBookById(bookId)&#xA;                .map(BookDatabaseEntity::toDomainModel);&#xA;    }&#xA;&#xA;    private Option&amp;lt;BookDatabaseEntity&amp;gt; findBookById(BookId bookId) {&#xA;        return Try&#xA;                .ofSupplier(() -&amp;gt; of(jdbcTemplate.queryForObject(&#34;SELECT b.* FROM book_database_entity b WHERE b.book_id = ?&#34;,&#xA;                                      new BeanPropertyRowMapper&amp;lt;&amp;gt;(BookDatabaseEntity.class), bookId.getBookId())))&#xA;                .getOrElse(none());&#xA;    }  &#xA;} &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Type system&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;Type system - like&lt;/em&gt; modelling - we modelled each domain object&#39;s state discovered during EventStorming as separate classes: &lt;code&gt;AvailableBook&lt;/code&gt;, &lt;code&gt;BookOnHold&lt;/code&gt;, &lt;code&gt;CheckedOutBook&lt;/code&gt;. With this approach we provide much clearer abstraction than having a single &lt;code&gt;Book&lt;/code&gt; class with an enum-based state management. Moving the logic to these specific classes brings Single Responsibility Principle to a different level. Moreover, instead of checking invariants in every business method we leave the role to the compiler. As an example, please consider following scenario: &lt;em&gt;you can place on hold only a book that is currently available&lt;/em&gt;. We could have done it in a following way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public Either&amp;lt;BookHoldFailed, BookPlacedOnHoldEvents&amp;gt; placeOnHold(Book book) {&#xA;  if (book.status == AVAILABLE) {  &#xA;      ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;but we use the &lt;em&gt;type system&lt;/em&gt; and declare method of following signature&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public Either&amp;lt;BookHoldFailed, BookPlacedOnHoldEvents&amp;gt; placeOnHold(AvailableBook book) {&#xA;      ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The more errors we discover at compile time the better.&lt;/p&gt; &#xA;&lt;p&gt;Yet another advantage of applying such type system is that we can represent business flows and state transitions with functions much easier. As an example, following functions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;placeOnHold: AvailableBook -&amp;gt; BookHoldFailed | BookPlacedOnHold&#xA;cancelHold: BookOnHold -&amp;gt; BookHoldCancelingFailed | BookHoldCanceled&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;are much more concise and descriptive than these:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;placeOnHold: Book -&amp;gt; BookHoldFailed | BookPlacedOnHold&#xA;cancelHold: Book -&amp;gt; BookHoldCancelingFailed | BookHoldCanceled&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;as here we have a lot of constraints hidden within function implementations.&lt;/p&gt; &#xA;&lt;p&gt;Moreover if you think of your domain as a set of operations (functions) that are being executed on business objects (aggregates) you don&#39;t think of any execution model (like async processing). It is fine, because you don&#39;t have to. Domain functions are free from I/O operations, async, and other side-effects-prone things, which are put into the infrastructure layer. Thanks to this, we can easily test them without mocking mentioned parts.&lt;/p&gt; &#xA;&lt;h4&gt;Monads&lt;/h4&gt; &#xA;&lt;p&gt;Business methods might have different results. One might return a value or a &lt;code&gt;null&lt;/code&gt;, throw an exception when something unexpected happens or just return different objects under different circumstances. All those situations are typical to object-oriented languages like Java, but do not fit into functional style. We are dealing with this issues with monads (monadic containers provided by &lt;a href=&#34;https://www.vavr.io&#34;&gt;Vavr&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;When a method returns optional value, we use the &lt;code&gt;Option&lt;/code&gt; monad:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Option&amp;lt;Book&amp;gt; findBy(BookId bookId) {&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When a method might return one of two possible values, we use the &lt;code&gt;Either&lt;/code&gt; monad:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Either&amp;lt;BookHoldFailed, BookPlacedOnHoldEvents&amp;gt; placeOnHold(AvailableBook book) {&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When an exception might occur, we use &lt;code&gt;Try&lt;/code&gt; monad:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Try&amp;lt;Result&amp;gt; placeOnHold(@NonNull PlaceOnHoldCommand command) {&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thanks to this, we can follow the functional programming style, but we also enrich our domain language and make our code much more readable for the clients.&lt;/p&gt; &#xA;&lt;h4&gt;Pattern Matching&lt;/h4&gt; &#xA;&lt;p&gt;Depending on a type of a given book object we often need to perform different actions. Series of if/else or switch/case statements could be a choice, but it is the pattern matching that provides the most conciseness and flexibility. With the code like below we can check numerous patterns against objects and access their constituents, so our code has a minimal dose of language-construct noise:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private Book handleBookPlacedOnHold(Book book, BookPlacedOnHold bookPlacedOnHold) {&#xA;    return API.Match(book).of(&#xA;        Case($(instanceOf(AvailableBook.class)), availableBook -&amp;gt; availableBook.handle(bookPlacedOnHold)),&#xA;        Case($(instanceOf(BookOnHold.class)), bookOnHold -&amp;gt; raiseDuplicateHoldFoundEvent(bookOnHold, bookPlacedOnHold)),&#xA;        Case($(), () -&amp;gt; book)&#xA;    );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;(No) ORM&lt;/h3&gt; &#xA;&lt;p&gt;If you run &lt;code&gt;mvn dependency:tree&lt;/code&gt; you won&#39;t find any JPA implementation. Although we think that ORM solutions (like Hibernate) are very powerful and useful, we decided not to use them, as we wouldn&#39;t utilize their features. What features are talking about? Lazy loading, caching, dirty checking. Why don&#39;t we need them? We want to have more control over SQL queries and minimize the object-relational impedance mismatch ourselves. Moreover, thanks to relatively small aggregates, containing as little data as it is required to protect the invariants, we don&#39;t need the lazy loading mechanism either. With Hexagonal Architecture we have the ability to separate domain and persistence models and test them independently. Moreover, we can also introduce different persistence strategies for different aggregates. In this project, we utilize both plain SQL queries and &lt;code&gt;JdbcTemplate&lt;/code&gt; and use new and very promising project called Spring Data JDBC, that is free from the JPA-related overhead mentioned before. Please find below an example of a repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;interface PatronEntityRepository extends CrudRepository&amp;lt;PatronDatabaseEntity, Long&amp;gt; {&#xA;&#xA;    @Query(&#34;SELECT p.* FROM patron_database_entity p where p.patron_id = :patronId&#34;)&#xA;    PatronDatabaseEntity findByPatronId(@Param(&#34;patronId&#34;) UUID patronId);&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At the same time we propose other way of persisting aggregates, with plain SQL queries and &lt;code&gt;JdbcTemplate&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@AllArgsConstructor&#xA;class BookDatabaseRepository implements BookRepository, FindAvailableBook, FindBookOnHold {&#xA;&#xA;    private final JdbcTemplate jdbcTemplate;&#xA;&#xA;    @Override&#xA;    public Option&amp;lt;Book&amp;gt; findBy(BookId bookId) {&#xA;        return findBookById(bookId)&#xA;                .map(BookDatabaseEntity::toDomainModel);&#xA;    }&#xA;&#xA;    private Option&amp;lt;BookDatabaseEntity&amp;gt; findBookById(BookId bookId) {&#xA;        return Try&#xA;                .ofSupplier(() -&amp;gt; of(jdbcTemplate.queryForObject(&#34;SELECT b.* FROM book_database_entity b WHERE b.book_id = ?&#34;,&#xA;                                     new BeanPropertyRowMapper&amp;lt;&amp;gt;(BookDatabaseEntity.class), bookId.getBookId())))&#xA;                .getOrElse(none());&#xA;    }&#xA;    &#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Please note that despite having the ability to choose different persistence implementations for aggregates it is recommended to stick to one option within the app/team&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Architecture-code gap&lt;/h3&gt; &#xA;&lt;p&gt;We put a lot of attention to keep the consistency between the overall architecture (including diagrams) and the code structure. Having identified bounded contexts we could organize them in modules (packages, to be more specific). Thanks to this we gain the famous microservices&#39; autonomy, while having a monolithic application. Each package has well defined public API, encapsulating all implementation details by using package-protected or private scopes.&lt;/p&gt; &#xA;&lt;p&gt;Just by looking at the package structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;└── library&#xA;    ├── catalogue&#xA;    ├── commons&#xA;    │&amp;nbsp;&amp;nbsp; ├── aggregates&#xA;    │&amp;nbsp;&amp;nbsp; ├── commands&#xA;    │&amp;nbsp;&amp;nbsp; └── events&#xA;    │&amp;nbsp;&amp;nbsp;     └── publisher&#xA;    └── lending&#xA;        ├── book&#xA;        │&amp;nbsp;&amp;nbsp; ├── application&#xA;        │&amp;nbsp;&amp;nbsp; ├── infrastructure&#xA;        │&amp;nbsp;&amp;nbsp; └── model&#xA;        ├── dailysheet&#xA;        │&amp;nbsp;&amp;nbsp; ├── infrastructure&#xA;        │&amp;nbsp;&amp;nbsp; └── model&#xA;        ├── librarybranch&#xA;        │&amp;nbsp;&amp;nbsp; └── model&#xA;        ├── patron&#xA;        │&amp;nbsp;&amp;nbsp; ├── application&#xA;        │&amp;nbsp;&amp;nbsp; ├── infrastructure&#xA;        │&amp;nbsp;&amp;nbsp; └── model&#xA;        └── patronprofile&#xA;            ├── infrastructure&#xA;            ├── model&#xA;            └── web&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;you can see that the architecture is screaming that it has two bounded contexts: &lt;strong&gt;catalogue&lt;/strong&gt; and &lt;strong&gt;lending&lt;/strong&gt;. Moreover, the &lt;strong&gt;lending context&lt;/strong&gt; is built around five business objects: &lt;strong&gt;book&lt;/strong&gt;, &lt;strong&gt;dailysheet&lt;/strong&gt;, &lt;strong&gt;librarybranch&lt;/strong&gt;, &lt;strong&gt;patron&lt;/strong&gt;, and &lt;strong&gt;patronprofile&lt;/strong&gt;, while &lt;strong&gt;catalogue&lt;/strong&gt; has no subpackages, which suggests that it might be a CRUD with no complex logic inside. Please find the architecture diagram below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ddd-by-examples/library/master/docs/c4/component-diagram.png&#34; alt=&#34;Component diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Yet another advantage of this approach comparing to packaging by layer for example is that in order to deliver a functionality you would usually need to do it in one package only, which is the aforementioned autonomy. This autonomy, then, could be transferred to the level of application as soon as we split our &lt;em&gt;context-packages&lt;/em&gt; into separate microservices. Following this considerations, autonomy can be given away to a product team that can take care of the whole business area end-to-end.&lt;/p&gt; &#xA;&lt;h3&gt;Model-code gap&lt;/h3&gt; &#xA;&lt;p&gt;In our project we do our best to reduce &lt;em&gt;model-code gap&lt;/em&gt; to bare minimum. It means we try to put equal attention to both the model and the code and keep them consistent. Below you will find some examples.&lt;/p&gt; &#xA;&lt;h4&gt;Placing on hold&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ddd-by-examples/library/master/docs/images/placing_on_hold.jpg&#34; alt=&#34;Placing on hold&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Starting with the easiest part, below you will find the model classes corresponding to depicted command and events:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Value&#xA;class PlaceOnHoldCommand {&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Value&#xA;class BookPlacedOnHold implements PatronEvent {&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Value&#xA;class MaximumNumberOfHoldsReached implements PatronEvent {&#xA;    ...    &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Value&#xA;class BookHoldFailed implements PatronEvent {&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We know it might not look impressive now, but if you have a look at the implementation of an aggregate, you will see that the code reflects not only the aggregate name, but also the whole scenario of &lt;code&gt;PlaceOnHold&lt;/code&gt; command handling. Let us uncover the details:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Patron {&#xA;&#xA;    public Either&amp;lt;BookHoldFailed, BookPlacedOnHoldEvents&amp;gt; placeOnHold(AvailableBook book) {&#xA;        return placeOnHold(book, HoldDuration.openEnded());&#xA;    }&#xA;    &#xA;    ...&#xA;}    &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The signature of &lt;code&gt;placeOnHold&lt;/code&gt; method screams, that it is possible to place a book on hold only when it is available (more information about protecting invariants by compiler you will find in &lt;a href=&#34;https://raw.githubusercontent.com/ddd-by-examples/library/master/#type-system&#34;&gt;Type system section&lt;/a&gt;). Moreover, if you try to place available book on hold it can &lt;strong&gt;either&lt;/strong&gt; fail (&lt;code&gt;BookHoldFailed&lt;/code&gt;) or produce some events - what events?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Value&#xA;class BookPlacedOnHoldEvents implements PatronEvent {&#xA;    @NonNull UUID eventId = UUID.randomUUID();&#xA;    @NonNull UUID patronId;&#xA;    @NonNull BookPlacedOnHold bookPlacedOnHold;&#xA;    @NonNull Option&amp;lt;MaximumNumberOfHoldsReached&amp;gt; maximumNumberOfHoldsReached;&#xA;&#xA;    @Override&#xA;    public Instant getWhen() {&#xA;        return bookPlacedOnHold.when;&#xA;    }&#xA;&#xA;    public static BookPlacedOnHoldEvents events(BookPlacedOnHold bookPlacedOnHold) {&#xA;        return new BookPlacedOnHoldEvents(bookPlacedOnHold.getPatronId(), bookPlacedOnHold, Option.none());&#xA;    }&#xA;&#xA;    public static BookPlacedOnHoldEvents events(BookPlacedOnHold bookPlacedOnHold, MaximumNumberOfHoldsReached maximumNumberOfHoldsReached) {&#xA;        return new BookPlacedOnHoldEvents(bookPlacedOnHold.patronId, bookPlacedOnHold, Option.of(maximumNumberOfHoldsReached));&#xA;    }&#xA;&#xA;    public List&amp;lt;DomainEvent&amp;gt; normalize() {&#xA;        return List.&amp;lt;DomainEvent&amp;gt;of(bookPlacedOnHold).appendAll(maximumNumberOfHoldsReached.toList());&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;BookPlacedOnHoldEvents&lt;/code&gt; is a container for &lt;code&gt;BookPlacedOnHold&lt;/code&gt; event, and - if patron has 5 book placed on hold already - &lt;code&gt;MaximumNumberOfHoldsReached&lt;/code&gt; (please mind the &lt;code&gt;Option&lt;/code&gt; monad). You can see now how perfectly the code reflects the model.&lt;/p&gt; &#xA;&lt;p&gt;It is not everything, though. In the picture above you can also see a big rectangular yellow card with rules (policies) that define the conditions that need to be fulfilled in order to get the given result. All those rules are implemented as functions &lt;strong&gt;either&lt;/strong&gt; allowing or rejecting the hold:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ddd-by-examples/library/master/docs/images/placing-on-hold-policy-restricted.png&#34; alt=&#34;Restricted book policy&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;PlacingOnHoldPolicy onlyResearcherPatronsCanHoldRestrictedBooksPolicy = (AvailableBook toHold, Patron patron, HoldDuration holdDuration) -&amp;gt; {&#xA;    if (toHold.isRestricted() &amp;amp;&amp;amp; patron.isRegular()) {&#xA;        return left(Rejection.withReason(&#34;Regular patrons cannot hold restricted books&#34;));&#xA;    }&#xA;    return right(new Allowance());&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ddd-by-examples/library/master/docs/images/placing-on-hold-policy-overdue.png&#34; alt=&#34;Overdue checkouts policy&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;PlacingOnHoldPolicy overdueCheckoutsRejectionPolicy = (AvailableBook toHold, Patron patron, HoldDuration holdDuration) -&amp;gt; {&#xA;    if (patron.overdueCheckoutsAt(toHold.getLibraryBranch()) &amp;gt;= OverdueCheckouts.MAX_COUNT_OF_OVERDUE_RESOURCES) {&#xA;        return left(Rejection.withReason(&#34;cannot place on hold when there are overdue checkouts&#34;));&#xA;    }&#xA;    return right(new Allowance());&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ddd-by-examples/library/master/docs/images/placing-on-hold-policy-max.png&#34; alt=&#34;Max number of holds policy&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;PlacingOnHoldPolicy regularPatronMaximumNumberOfHoldsPolicy = (AvailableBook toHold, Patron patron, HoldDuration holdDuration) -&amp;gt; {&#xA;    if (patron.isRegular() &amp;amp;&amp;amp; patron.numberOfHolds() &amp;gt;= PatronHolds.MAX_NUMBER_OF_HOLDS) {&#xA;        return left(Rejection.withReason(&#34;patron cannot hold more books&#34;));&#xA;    }&#xA;    return right(new Allowance());&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ddd-by-examples/library/master/docs/images/placing-on-hold-policy-open-ended.png&#34; alt=&#34;Open ended hold policy&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;PlacingOnHoldPolicy onlyResearcherPatronsCanPlaceOpenEndedHolds = (AvailableBook toHold, Patron patron, HoldDuration holdDuration) -&amp;gt; {&#xA;    if (patron.isRegular() &amp;amp;&amp;amp; holdDuration.isOpenEnded()) {&#xA;        return left(Rejection.withReason(&#34;regular patron cannot place open ended holds&#34;));&#xA;    }&#xA;    return right(new Allowance());&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Spring&lt;/h4&gt; &#xA;&lt;p&gt;Spring Framework seems to be the most popular Java framework ever used. Unfortunately it is also quite common to overuse its features in the business code. What you find in this project is that the domain packages are fully focused on modelling business problems, and are free from any DI, which makes it easy to unit-test it which is invaluable in terms of code reliability and maintainability. It does not mean, though, that we do not use Spring Framework - we do. Below you will find some details:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Each bounded context has its own independent application context. It means that we removed the runtime coupling, which is a step towards extracting modules (and microservices). How did we do that? Let&#39;s have a look: &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@SpringBootConfiguration&#xA;@EnableAutoConfiguration&#xA;public class LibraryApplication {&#xA;&#xA;    public static void main(String[] args) {&#xA;        new SpringApplicationBuilder()&#xA;                .parent(LibraryApplication.class)&#xA;                .child(LendingConfig.class).web(WebApplicationType.SERVLET)&#xA;                .sibling(CatalogueConfiguration.class).web(WebApplicationType.NONE)&#xA;                .run(args);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;As you could see above, we also try not to use component scan wherever possible. Instead we utilize &lt;code&gt;@Configuration&lt;/code&gt; classes where we define module specific beans in the infrastructure layer. Those configuration classes are explicitly declared in the main application class.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Tests&lt;/h3&gt; &#xA;&lt;p&gt;Tests are written in a BDD manner, expressing stories defined with Example Mapping. It means we utilize both TDD and Domain Language discovered with Event Storming.&lt;/p&gt; &#xA;&lt;p&gt;We also made an effort to show how to create a DSL, that enables to write tests as if they were sentences taken from the domain descriptions. Please find an example below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;def &#39;should make book available when hold canceled&#39;() {&#xA;    given:&#xA;        BookDSL bookOnHold = aCirculatingBook() with anyBookId() locatedIn anyBranch() placedOnHoldBy anyPatron()&#xA;    and:&#xA;        PatronEvent.BookHoldCanceled bookHoldCanceledEvent = the bookOnHold isCancelledBy anyPatron()&#xA;&#xA;    when:&#xA;        AvailableBook availableBook = the bookOnHold reactsTo bookHoldCanceledEvent&#xA;    then:&#xA;        availableBook.bookId == bookOnHold.bookId&#xA;        availableBook.libraryBranch == bookOnHold.libraryBranchId&#xA;        availableBook.version == bookOnHold.version&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Please also note the &lt;strong&gt;when&lt;/strong&gt; block, where we manifest the fact that books react to cancellation event&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to contribute&lt;/h2&gt; &#xA;&lt;p&gt;The project is still under construction, so if you like it enough to collaborate, just let us know or simply create a Pull Request.&lt;/p&gt; &#xA;&lt;h2&gt;How to Build&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Java 11&lt;/li&gt; &#xA; &lt;li&gt;Maven&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Quickstart&lt;/h3&gt; &#xA;&lt;p&gt;You can run the library app by simply typing the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ mvn spring-boot:run&#xA;...&#xA;...&#xA;2019-04-03 15:55:39.162  INFO 18957 --- [           main] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 2 endpoint(s) beneath base path &#39;/actuator&#39;&#xA;2019-04-03 15:55:39.425  INFO 18957 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path &#39;&#39;&#xA;2019-04-03 15:55:39.428  INFO 18957 --- [           main] io.pillopl.library.LibraryApplication    : Started LibraryApplication in 5.999 seconds (JVM running for 23.018)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build a Jar package&lt;/h3&gt; &#xA;&lt;p&gt;You can build a jar with maven like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ mvn clean package&#xA;...&#xA;...&#xA;[INFO] Building jar: /home/pczarkowski/development/spring/library/target/library-0.0.1-SNAPSHOT.jar&#xA;[INFO] ------------------------------------------------------------------------&#xA;[INFO] BUILD SUCCESS&#xA;[INFO] ------------------------------------------------------------------------&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build with Docker&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;ve already built the jar file you can run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;docker build -t spring/library .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Otherwise you can build the jar file using the multistage dockerfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;docker build -t spring/library -f Dockerfile.build .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Either way once built you can run it like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ docker run -ti --rm --name spring-library -p 8080:8080 spring/library&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Production ready metrics and visualization&lt;/h3&gt; &#xA;&lt;p&gt;To run the application as well as Prometheus and Grafana dashboard for visualizing metrics you can run all services:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If everything goes well, you can access the following services at given location:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://localhost:8080/actuator/prometheus&#34;&gt;http://localhost:8080/actuator/prometheus&lt;/a&gt; - published Micrometer metrics&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://localhost:9090&#34;&gt;http://localhost:9090&lt;/a&gt; - Prometheus dashboard&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; - Grafana dashboard&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In order to see some metrics, you must create a dashboard. Go to &lt;code&gt;Create&lt;/code&gt; -&amp;gt; &lt;code&gt;Import&lt;/code&gt; and select attached &lt;code&gt;jvm-micrometer_rev8.json&lt;/code&gt;. File has been pulled from &lt;code&gt;https://grafana.com/grafana/dashboards/4701&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please note application will be run with &lt;code&gt;local&lt;/code&gt; Spring profile to setup some initial data.&lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://leanpub.com/introducing_eventstorming&#34;&gt;Introducing EventStorming&lt;/a&gt; by Alberto Brandolini&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pragprog.com/book/swdddf/domain-modeling-made-functional&#34;&gt;Domain Modelling Made Functional&lt;/a&gt; by Scott Wlaschin&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://softwarearchitecturefordevelopers.com&#34;&gt;Software Architecture for Developers&lt;/a&gt; by Simon Brown&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Clean-Architecture-Craftsmans-Software-Structure/dp/0134494164&#34;&gt;Clean Architecture&lt;/a&gt; by Robert C. Martin&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215&#34;&gt;Domain-Driven Design: Tackling Complexity in the Heart of Software&lt;/a&gt; by Eric Evans&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>