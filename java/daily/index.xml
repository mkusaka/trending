<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-31T01:30:31Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>GXhunter/rpc-framework</title>
    <updated>2023-10-31T01:30:31Z</updated>
    <id>tag:github.com,2023-10-31:/GXhunter/rpc-framework</id>
    <link href="https://github.com/GXhunter/rpc-framework" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;rpc-framework&lt;/h1&gt; &#xA;&lt;h2&gt;介绍&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/GXhunter/rpc-framework&#34;&gt;rpc-framework&lt;/a&gt; 是一款基于 Netty+Kyro+Zookeeper 实现的 RPC 框架。代码注释详细，结构清晰，非常适合阅读和学习。&lt;/p&gt; &#xA;&lt;p&gt;由于笔者自身精力和能力有限，如果大家觉得有需要改进和完善的地方的话，欢迎 fork 本项目，然后 clone 到本地，在本地修改后提交 PR 给我，我会在第一时间 Review 你的代码。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;我们先从一个基本的 RPC 框架设计思路说起！&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;一个基本的 RPC 框架设计思路&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt; ：我们这里说的 RPC 框架指的是：可以让客户端直接调用服务端方法就像调用本地方法一样简单的框架，比如我前面介绍的 Dubbo、Motan、gRPC 这些。 如果需要和 HTTP 协议打交道，解析和封装 HTTP 请求和响应。这类框架并不能算是“RPC 框架”，比如 Feign。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;一个最简单的 RPC 框架使用示意图如下图所示,这也是 &lt;a href=&#34;https://github.com/GXhunter/rpc-framework&#34;&gt;rpc-framework&lt;/a&gt; 目前的架构 ：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GXhunter/rpc-framework/master/images/rpc-architure.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;服务提供端 Server 向注册中心注册服务，服务消费者 Client 通过注册中心拿到服务相关信息，然后再通过网络请求服务提供端 Server。&lt;/p&gt; &#xA;&lt;p&gt;作为 RPC 框架领域的佼佼者&lt;a href=&#34;https://github.com/apache/dubbo&#34;&gt;Dubbo&lt;/a&gt;的架构如下图所示,和我们上面画的大体也是差不多的。&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/GXhunter/rpc-framework/master/images/dubbo-architure.jpg&#34; style=&#34;zoom:80%;&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;一般情况下， RPC 框架不仅要提供服务发现功能，还要提供负载均衡、容错等功能，这样的 RPC 框架才算真正合格的。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;简单说一下设计一个最基本的 RPC 框架的思路：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GXhunter/rpc-framework/master/images/rpc-architure-detail.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;注册中心&lt;/strong&gt; ：注册中心首先是要有的，推荐使用 Zookeeper。注册中心负责服务地址的注册与查找，相当于目录服务。服务端启动的时候将服务名称及其对应的地址(ip+port)注册到注册中心，服务消费端根据服务名称找到对应的服务地址。有了服务地址之后，服务消费端就可以通过网络请求服务端了。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;网络传输&lt;/strong&gt; ：既然要调用远程的方法就要发请求，请求中至少要包含你调用的类名、方法名以及相关参数吧！推荐基于 NIO 的 Netty 框架。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;序列化&lt;/strong&gt; ：既然涉及到网络传输就一定涉及到序列化，你不可能直接使用 JDK 自带的序列化吧！JDK 自带的序列化效率低并且有安全漏洞。 所以，你还要考虑使用哪种序列化协议，比较常用的有 hession2、kyro、protostuff。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;动态代理&lt;/strong&gt; ： 另外，动态代理也是需要的。因为 RPC 的主要目的就是让我们调用远程方法像调用本地方法一样简单，使用动态代理可以屏蔽远程方法调用的细节比如网络传输。也就是说当你调用远程方法的时候，实际会通过代理对象来传输网络请求，不然的话，怎么可能直接就调用到远程方法呢？&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;负载均衡&lt;/strong&gt; ：负载均衡也是需要的。为啥？举个例子我们的系统中的某个服务的访问量特别大，我们将这个服务部署在了多台服务器上，当客户端发起请求的时候，多台服务器都可以处理这个请求。那么，如何正确选择处理该请求的服务器就很关键。假如，你就要一台服务器来处理该服务的请求，那该服务部署在多台服务器的意义就不复存在了。负载均衡就是为了避免单个服务器响应同一请求，容易造成服务器宕机、崩溃等问题，我们从负载均衡的这四个字就能明显感受到它的意义。&lt;/li&gt; &#xA; &lt;li&gt;......&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;项目基本情况&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;使用 Netty（基于 NIO）替代 BIO 实现网络传输；&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;使用开源的序列化机制 Kyro（也可以用其它的）替代 JDK 自带的序列化机制；&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;使用 Zookeeper 管理相关服务地址信息&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Netty 重用 Channel 避免重复连接服务端&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 使用 &lt;code&gt;CompletableFuture&lt;/code&gt; 包装接受客户端返回结果（之前的实现是通过 &lt;code&gt;AttributeMap&lt;/code&gt; 绑定到 Channel 上实现的）&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;增加 Netty 心跳机制&lt;/strong&gt; : 保证客户端和服务端的连接不被断掉，避免重连。&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;客户端调用远程服务的时候进行负载均衡&lt;/strong&gt; ：调用服务的时候，从很多服务地址中根据相应的负载均衡算法选取一个服务地址。ps：目前实现了随机负载均衡算法与一致性哈希算法。&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;处理一个接口有多个类实现的情况&lt;/strong&gt; ：对服务分组，发布服务的时候增加一个 group 参数即可。&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;集成 Spring 通过注解注册服务&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;集成 Spring 通过注解进行服务消费&lt;/strong&gt; 。参考： &lt;a href=&#34;https://github.com/GXhunter/rpc-framework/pull/10&#34;&gt;PR#10&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;增加服务版本号&lt;/strong&gt; ：建议使用两位数字版本，如：1.0，通常在接口不兼容时版本号才需要升级。为什么要增加服务版本号？为后续不兼容升级提供可能，比如服务接口增加方法，或服务模型增加字段，可向后兼容，删除方法或删除字段，将不兼容，枚举类型新增字段也不兼容，需通过变更版本号升级。&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;对 SPI 机制的运用&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;客户端与服务端通信协议（数据包结构）重新设计&lt;/strong&gt; ，可以将原有的 &lt;code&gt;RpcRequest&lt;/code&gt;和 &lt;code&gt;RpcReuqest&lt;/code&gt; 对象作为消息体，然后增加如下字段（可以参考：《Netty 入门实战小册》和 Dubbo 框架对这块的设计）： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;魔数&lt;/strong&gt; ： 通常是 4 个字节。这个魔数主要是为了筛选来到服务端的数据包，有了这个魔数之后，服务端首先取出前面四个字节进行比对，能够在第一时间识别出这个数据包并非是遵循自定义协议的，也就是无效数据包，为了安全考虑可以直接关闭连接以节省资源。&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;序列化器编号&lt;/strong&gt; ：标识序列化的方式，比如是使用 Java 自带的序列化，还是 json，kyro 等序列化方式。&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;消息体长度&lt;/strong&gt; ： 运行时计算出来。&lt;/li&gt; &#xA;   &lt;li&gt;......&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;设置 gzip 压缩&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;运行项目&lt;/h2&gt; &#xA;&lt;h3&gt;导入项目&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;在空白目录执行：&lt;code&gt;git clone git@github.com:GXhunter/rpc-framework.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;在clone后的根目录执行：&lt;code&gt;mvn clean instgall&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;运行 zookeeper&lt;/h3&gt; &#xA;&lt;p&gt;这里使用 Docker 来下载安装。&lt;/p&gt; &#xA;&lt;p&gt;下载：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker pull zookeeper:3.5.8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;运行：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -d --name zookeeper -p 2181:2181 zookeeper:3.5.8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;使用方法&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;不论服务/消费端都需要进行下属两个步骤&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;1. maven依赖&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;dependency&amp;gt;&#xA;    &#x9;&amp;lt;groupId&amp;gt;com.github.gxhunter&amp;lt;/groupId&amp;gt;&#xA;    &#x9;&amp;lt;artifactId&amp;gt;rpc-framework-core&amp;lt;/artifactId&amp;gt;&#xA;    &#x9;&amp;lt;version&amp;gt;${rpc-version}&amp;lt;/version&amp;gt;&#xA;    &amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. 注册中心配置&lt;/h3&gt; &#xA;&lt;p&gt;在 &lt;code&gt;resources&lt;/code&gt;目录下新建&lt;code&gt;rpc.properties&lt;/code&gt;文件，内容为:&lt;code&gt;rpc.zookeeper.address=${zookeeperAddress}&lt;/code&gt;,例如&lt;code&gt;rpc.zookeeper.address=localhost:2181&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;代码示例&lt;/h1&gt; &#xA;&lt;p&gt;示例代码分为API、server、client三个模块&lt;/p&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;pom&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&amp;gt;&#xA;&amp;lt;project xmlns=&#34;http://maven.apache.org/POM/4.0.0&#34;&#xA;         xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;&#xA;         xsi:schemaLocation=&#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&#34;&amp;gt;&#xA;    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;&#xA;&#xA;    &amp;lt;groupId&amp;gt;org.example&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;rpc-api&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;&#xA;&#xA;    &amp;lt;properties&amp;gt;&#xA;        &amp;lt;maven.compiler.source&amp;gt;8&amp;lt;/maven.compiler.source&amp;gt;&#xA;        &amp;lt;maven.compiler.target&amp;gt;8&amp;lt;/maven.compiler.target&amp;gt;&#xA;        &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;&#xA;    &amp;lt;/properties&amp;gt;&#xA;&#xA;    &amp;lt;dependencies&amp;gt;&#xA;        &amp;lt;dependency&amp;gt;&#xA;            &amp;lt;groupId&amp;gt;com.github.gxhunter&amp;lt;/groupId&amp;gt;&#xA;            &amp;lt;artifactId&amp;gt;rpc-framework-common&amp;lt;/artifactId&amp;gt;&#xA;            &amp;lt;version&amp;gt;1.0&amp;lt;/version&amp;gt;&#xA;        &amp;lt;/dependency&amp;gt;&#xA;&#xA;    &amp;lt;/dependencies&amp;gt;&#xA;&#xA;&#xA;&amp;lt;/project&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;接口&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.github.gxhunter.rpc.common.annotation.RpcClient;&#xA;&#xA;@RpcClient(&#34;RServer&#34;)&#xA;public interface TestServer {&#xA;    String getVersion();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;服务端&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;服务端maven的pom文件&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&amp;gt;&#xA;&amp;lt;project xmlns=&#34;http://maven.apache.org/POM/4.0.0&#34; xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;&#xA;    xsi:schemaLocation=&#34;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&#34;&amp;gt;&#xA;    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;&#xA;    &amp;lt;parent&amp;gt;&#xA;        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&#xA;        &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;&#xA;        &amp;lt;version&amp;gt;2.7.15&amp;lt;/version&amp;gt;&#xA;        &amp;lt;relativePath/&amp;gt; &amp;lt;!-- lookup parent from repository --&amp;gt;&#xA;    &amp;lt;/parent&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;com.rpc.server&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;rpc-server&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt;&#xA;    &amp;lt;name&amp;gt;rpc-server&amp;lt;/name&amp;gt;&#xA;    &amp;lt;description&amp;gt;rpc-server&amp;lt;/description&amp;gt;&#xA;    &amp;lt;properties&amp;gt;&#xA;        &amp;lt;java.version&amp;gt;8&amp;lt;/java.version&amp;gt;&#xA;    &amp;lt;/properties&amp;gt;&#xA;    &amp;lt;dependencies&amp;gt;&#xA;        &amp;lt;dependency&amp;gt;&#xA;            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&#xA;            &amp;lt;artifactId&amp;gt;spring-boot-starter&amp;lt;/artifactId&amp;gt;&#xA;        &amp;lt;/dependency&amp;gt;&#xA;        &#xA;        &amp;lt;!-- rpc-api 此包只写接口，服务端/客户端都需要依赖此包，用于规范服务端接接口实现，同时用于客户端生成动态代理--&amp;gt;&#xA;        &amp;lt;dependency&amp;gt;&#xA;            &amp;lt;groupId&amp;gt;org.example&amp;lt;/groupId&amp;gt;&#xA;            &amp;lt;artifactId&amp;gt;rpc-api&amp;lt;/artifactId&amp;gt;&#xA;            &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;&#xA;        &amp;lt;/dependency&amp;gt;&#xA;        &amp;lt;dependency&amp;gt;&#xA;            &amp;lt;groupId&amp;gt;com.github.gxhunter&amp;lt;/groupId&amp;gt;&#xA;            &amp;lt;artifactId&amp;gt;rpc-framework-core&amp;lt;/artifactId&amp;gt;&#xA;            &amp;lt;version&amp;gt;1.0&amp;lt;/version&amp;gt;&#xA;        &amp;lt;/dependency&amp;gt;&#xA;&#xA;&#xA;        &amp;lt;dependency&amp;gt;&#xA;            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&#xA;            &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;&#xA;            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&#xA;        &amp;lt;/dependency&amp;gt;&#xA;    &amp;lt;/dependencies&amp;gt;&#xA;&#xA;    &amp;lt;build&amp;gt;&#xA;        &amp;lt;plugins&amp;gt;&#xA;            &amp;lt;plugin&amp;gt;&#xA;                &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&#xA;                &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt;&#xA;            &amp;lt;/plugin&amp;gt;&#xA;        &amp;lt;/plugins&amp;gt;&#xA;    &amp;lt;/build&amp;gt;&#xA;&#xA;&amp;lt;/project&amp;gt;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;服务端对接口具体实现&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@RpcService&#xA;public class TestServerImpl implements TestServer {&#xA;    @Override&#xA;    public String getVersion() {&#xA;        return &#34;23.0&#34;;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;启动主类&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;&#xA;import com.github.gxhunter.rpc.core.annotation.EnableRpcServices;&#xA;import com.github.gxhunter.rpc.core.server.IRpcServer;&#xA;import com.github.gxhunter.rpc.core.server.NettyRpcServer;&#xA;import org.springframework.boot.SpringApplication;&#xA;import org.springframework.boot.autoconfigure.SpringBootApplication;&#xA;import org.springframework.context.annotation.Bean;&#xA;&#xA;@SpringBootApplication&#xA;//指定服务名&#xA;@EnableRpcServices(serverName = &#34;RServer&#34;)&#xA;public class RpcServerApplication {&#xA;&#x9;@Bean&#xA;&#x9;public IRpcServer rpcServer() {&#xA;&#x9;&#x9;return new NettyRpcServer();&#xA;&#x9;}&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;SpringApplication.run(RpcServerApplication.class, args).getBean(IRpcServer.class).start();&#xA;&#x9;}&#xA;&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;消费端&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;pom&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&amp;gt;&#xA;&amp;lt;project xmlns=&#34;http://maven.apache.org/POM/4.0.0&#34; xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;&#xA;         xsi:schemaLocation=&#34;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&#34;&amp;gt;&#xA;    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;&#xA;    &amp;lt;parent&amp;gt;&#xA;        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&#xA;        &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;&#xA;        &amp;lt;version&amp;gt;2.7.15&amp;lt;/version&amp;gt;&#xA;        &amp;lt;relativePath/&amp;gt; &amp;lt;!-- lookup parent from repository --&amp;gt;&#xA;    &amp;lt;/parent&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;com.example&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;rpc-client&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt;&#xA;    &amp;lt;name&amp;gt;rpc-client&amp;lt;/name&amp;gt;&#xA;    &amp;lt;description&amp;gt;rpc-client&amp;lt;/description&amp;gt;&#xA;    &amp;lt;properties&amp;gt;&#xA;        &amp;lt;java.version&amp;gt;8&amp;lt;/java.version&amp;gt;&#xA;    &amp;lt;/properties&amp;gt;&#xA;    &amp;lt;dependencies&amp;gt;&#xA;        &amp;lt;dependency&amp;gt;&#xA;            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&#xA;            &amp;lt;artifactId&amp;gt;spring-boot-starter&amp;lt;/artifactId&amp;gt;&#xA;        &amp;lt;/dependency&amp;gt;&#xA;        &amp;lt;dependency&amp;gt;&#xA;            &amp;lt;groupId&amp;gt;org.example&amp;lt;/groupId&amp;gt;&#xA;            &amp;lt;artifactId&amp;gt;rpc-api&amp;lt;/artifactId&amp;gt;&#xA;            &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;&#xA;        &amp;lt;/dependency&amp;gt;&#xA;        &amp;lt;dependency&amp;gt;&#xA;            &amp;lt;groupId&amp;gt;com.github.gxhunter&amp;lt;/groupId&amp;gt;&#xA;            &amp;lt;artifactId&amp;gt;rpc-framework-core&amp;lt;/artifactId&amp;gt;&#xA;            &amp;lt;version&amp;gt;1.0&amp;lt;/version&amp;gt;&#xA;        &amp;lt;/dependency&amp;gt;&#xA;&#xA;&#xA;        &amp;lt;dependency&amp;gt;&#xA;            &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt;&#xA;            &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt;&#xA;            &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt;&#xA;        &amp;lt;/dependency&amp;gt;&#xA;    &amp;lt;/dependencies&amp;gt;&#xA;&#xA;    &amp;lt;build&amp;gt;&#xA;        &amp;lt;plugins&amp;gt;&#xA;            &amp;lt;plugin&amp;gt;&#xA;                &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&#xA;                &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt;&#xA;                &amp;lt;configuration&amp;gt;&#xA;                    &amp;lt;excludes&amp;gt;&#xA;                        &amp;lt;exclude&amp;gt;&#xA;                            &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt;&#xA;                            &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt;&#xA;                        &amp;lt;/exclude&amp;gt;&#xA;                    &amp;lt;/excludes&amp;gt;&#xA;                &amp;lt;/configuration&amp;gt;&#xA;            &amp;lt;/plugin&amp;gt;&#xA;        &amp;lt;/plugins&amp;gt;&#xA;    &amp;lt;/build&amp;gt;&#xA;&#xA;&amp;lt;/project&amp;gt;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;入口类&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@SpringBootApplication&#xA;//配置api接口所在的位置&#xA;@EnableRpcClients(basePackages = &#34;com.rpc.learn.api&#34;)&#xA;public class RpcClientApplication {&#xA;&#xA;    public static void main(String[] args) {&#xA;        ConfigurableApplicationContext context = SpringApplication.run(RpcClientApplication.class, args);&#xA;        System.out.println(context.getBean(TestServer.class).getVersion());&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>TEAMMATES/teammates</title>
    <updated>2023-10-31T01:30:31Z</updated>
    <id>tag:github.com,2023-10-31:/TEAMMATES/teammates</id>
    <link href="https://github.com/TEAMMATES/teammates" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This is the project website for the TEAMMATES feedback management tool for education&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TEAMMATES Developer Web Site&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/TEAMMATES/teammates/actions&#34;&gt;&lt;img src=&#34;https://github.com/TEAMMATES/teammates/workflows/Component%20Tests/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions Build Status Component Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/TEAMMATES/teammates/actions&#34;&gt;&lt;img src=&#34;https://github.com/TEAMMATES/teammates/workflows/E2E%20Tests/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions Build Status E2E Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/TEAMMATES/teammates&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/TEAMMATES/teammates/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/TEAMMATES/teammates/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPLv2-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;TEAMMATES is a free online tool for managing peer evaluations and other feedback paths of your students. It is provided as a cloud-based service for educators/students and is currently used by hundreds of universities across the world.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/TEAMMATES/teammates/master/src/web/assets/images/overview.png&#34; width=&#34;600&#34;&gt; &#xA;&lt;p&gt;This is the developer web site for TEAMMATES. &lt;strong&gt;Click &lt;a href=&#34;http://teammatesv4.appspot.com/&#34;&gt;here&lt;/a&gt; to go to the TEAMMATES product website.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://teammates.github.io/teammates&#34;&gt;&lt;strong&gt;Documentation for Developers&lt;/strong&gt; &lt;span&gt;📖&lt;/span&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/TEAMMATES/teammates/milestones?direction=desc&amp;amp;sort=due_date&amp;amp;state=closed&#34;&gt;Version History&lt;/a&gt; | &lt;a href=&#34;https://www.openhub.net/p/teammatesonline&#34;&gt;Project Stats&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Interested to join TEAMMATES developer team?&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions from developers, especially students. Here are some resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://teammates.github.io/teammates/contributing-doc.html&#34;&gt;&lt;strong&gt;Contributor Orientation Guide&lt;/strong&gt;&lt;/a&gt;: This document describes what you need to know/do to become a contributor.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TEAMMATES/teammates/wiki&#34;&gt;&lt;strong&gt;Project ideas page&lt;/strong&gt;&lt;/a&gt;: These are for those who would like to do a relatively bigger projects with TEAMMATES (e.g. summer internships).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;TEAMMATES team wishes to thank the following invaluable contributions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.comp.nus.edu.sg&#34;&gt;&lt;strong&gt;School of Computing, National University of Singapore (NUS)&lt;/strong&gt;&lt;/a&gt;, for providing us with the infrastructure support to run the project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nus.edu.sg/cdtl&#34;&gt;&lt;strong&gt;Centre for Development of Teaching and Learning (CDTL)&lt;/strong&gt;&lt;/a&gt; of NUS, for supporting us with several &lt;em&gt;Teaching Enhancement Grants&lt;/em&gt; over the years.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Learning Innovation Fund-Technology (LIF-T)&lt;/strong&gt; initiative of NUS, for funding us for the 2015-2018 period.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Google Summer of Code&lt;/strong&gt; Program, for including TEAMMATES as a mentor organization in &lt;em&gt;GSoC2014&lt;/em&gt;, &lt;em&gt;GSoC2015&lt;/em&gt;, &lt;em&gt;GSoC2016&lt;/em&gt;, &lt;em&gt;GSoC2017&lt;/em&gt; and &lt;em&gt;GSoC2018&lt;/em&gt; editions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Facebook Open Academy&lt;/strong&gt; Program, for including TEAMMATES as a mentor organization in FBOA 2016.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Jet Brains&lt;/strong&gt;, for the &lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;Intellij IDEA&lt;/a&gt; licences&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TEAMMATES/teammates/master/src/web/assets/images/yklogo.png&#34; width=&#34;100&#34;&gt; &lt;a href=&#34;https://www.yourkit.com&#34;&gt;&lt;strong&gt;YourKit LLC&lt;/strong&gt;&lt;/a&gt;, for providing us with free licenses for the &lt;a href=&#34;https://www.yourkit.com/java/profiler&#34;&gt;YourKit Java Profiler&lt;/a&gt; (an industry leading profiler tool for Java applications).&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TEAMMATES/teammates/master/src/web/assets/images/saucelabs.png&#34; width=&#34;100&#34;&gt; &lt;a href=&#34;https://saucelabs.com&#34;&gt;&lt;strong&gt;SauceLabs&lt;/strong&gt;&lt;/a&gt;, for providing us with a free &lt;a href=&#34;https://saucelabs.com/open-source&#34;&gt;Open Sauce account&lt;/a&gt; for cross-browser testing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contacting us&lt;/h2&gt; &#xA;&lt;p&gt;The best way to contact us is to &lt;a href=&#34;https://github.com/TEAMMATES/teammates/issues/new&#34;&gt;post a message in our issue tracker&lt;/a&gt;. Our issue tracker doubles as a discussion forum. You can use it for things like asking questions about the project or requesting technical help.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively (less preferred), you can email us at &lt;strong&gt;&lt;a href=&#34;mailto:teammates@comp.nus.edu.sg&#34;&gt;teammates@comp.nus.edu.sg&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Nekogram/Nekogram</title>
    <updated>2023-10-31T01:30:31Z</updated>
    <id>tag:github.com,2023-10-31:/Nekogram/Nekogram</id>
    <link href="https://github.com/Nekogram/Nekogram" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Nekogram is an open-source third-party Telegram client with not many but useful mods.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🐾 Nekogram&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://neko.crowdin.com/nekogram&#34;&gt;&lt;img src=&#34;https://badges.crowdin.net/e/a094217ac83905ae1625526d59bba8dc/localized.svg?sanitize=true&#34; alt=&#34;Crowdin&#34;&gt;&lt;/a&gt;&lt;br&gt; Nekogram is a third-party Telegram client with not many but useful modifications.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Website: &lt;a href=&#34;https://nekogram.app&#34;&gt;https://nekogram.app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Telegram channel: &lt;a href=&#34;https://t.me/nekoupdates&#34;&gt;https://t.me/nekoupdates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Downloads: &lt;a href=&#34;https://nekogram.app/download&#34;&gt;https://nekogram.app/download&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Feedback: &lt;a href=&#34;https://github.com/Nekogram/Nekogram/issues&#34;&gt;https://github.com/Nekogram/Nekogram/issues&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;API, Protocol documentation&lt;/h2&gt; &#xA;&lt;p&gt;Telegram API manuals: &lt;a href=&#34;https://core.telegram.org/api&#34;&gt;https://core.telegram.org/api&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;MTProto protocol manuals: &lt;a href=&#34;https://core.telegram.org/mtproto&#34;&gt;https://core.telegram.org/mtproto&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Compilation Guide&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the Nekogram source code ( &lt;code&gt;git clone https://github.com/Nekogram/Nekogram.git&lt;/code&gt; )&lt;/li&gt; &#xA; &lt;li&gt;Fill out storeFile, storePassword, keyAlias, keyPassword in local.properties to access your release.keystore&lt;/li&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://console.firebase.google.com/&#34;&gt;https://console.firebase.google.com/&lt;/a&gt;, create two android apps with application IDs tw.nekomimi.nekogram and tw.nekomimi.nekogram.beta, turn on firebase messaging and download &lt;code&gt;google-services.json&lt;/code&gt;, which should be copied into &lt;code&gt;TMessagesProj&lt;/code&gt; folder.&lt;/li&gt; &#xA; &lt;li&gt;Open the project in the Studio (note that it should be opened, NOT imported).&lt;/li&gt; &#xA; &lt;li&gt;Fill out values in &lt;code&gt;TMessagesProj/src/main/java/tw/nekomimi/nekogram/Extra.java&lt;/code&gt; – there’s a link for each of the variables showing where and which data to obtain.&lt;/li&gt; &#xA; &lt;li&gt;You are ready to compile Nekogram.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Localization&lt;/h2&gt; &#xA;&lt;p&gt;Nekogram is forked from Telegram, thus most locales follows the translations of Telegram for Android, checkout &lt;a href=&#34;https://translations.telegram.org/en/android/&#34;&gt;https://translations.telegram.org/en/android/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As for the Nekogram specialized strings, we use Crowdin to translate Nekogram. Join project at &lt;a href=&#34;https://neko.crowdin.com/nekogram&#34;&gt;https://neko.crowdin.com/nekogram&lt;/a&gt;. Help us bring Nekogram to the world!&lt;/p&gt;</summary>
  </entry>
</feed>