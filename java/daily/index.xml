<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-08T01:33:57Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hazelcast/hazelcast</title>
    <updated>2022-10-08T01:33:57Z</updated>
    <id>tag:github.com,2022-10-08:/hazelcast/hazelcast</id>
    <link href="https://github.com/hazelcast/hazelcast" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open-source distributed computation and storage platform&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hazelcast&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://slack.hazelcast.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/slack-chat-green.svg?sanitize=true&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://javadoc.io/doc/com.hazelcast/hazelcast/5.0&#34;&gt;&lt;img src=&#34;https://javadoc.io/badge2/com.hazelcast/hazelcast/5.0/javadoc.svg?sanitize=true&#34; alt=&#34;javadoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/docker/pulls/hazelcast/hazelcast&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/hazelcast/hazelcast&#34; alt=&#34;Docker pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/hazelcast/hazelcast/alerts&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/alerts/g/hazelcast/hazelcast.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;Total Alerts&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/hazelcast/hazelcast/context:java&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/grade/java/g/hazelcast/hazelcast.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;Code Quality: Java&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=hz-os-master&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=hz-os-master&amp;amp;metric=alert_status&#34; alt=&#34;Quality Gate Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;What is Hazelcast&lt;/h2&gt; &#xA;&lt;p&gt;Hazelcast is a distributed computation and storage platform for consistently low-latency querying, aggregation and stateful computation against event streams and traditional data sources. It allows you to quickly build resource-efficient, real-time applications. You can deploy it at any scale from small edge devices to a large cluster of cloud instances.&lt;/p&gt; &#xA;&lt;p&gt;A cluster of Hazelcast nodes share both the data storage and computational load which can dynamically scale up and down. When you add new nodes to the cluster, the data is automatically rebalanced across the cluster, and currently running computational tasks (known as jobs) snapshot their state and scale with processing guarantees.&lt;/p&gt; &#xA;&lt;h2&gt;When to use Hazelcast&lt;/h2&gt; &#xA;&lt;p&gt;Hazelcast provides a platform that can handle multiple types of workloads for building real-time applications.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Stateful data processing over streaming data or data at rest&lt;/li&gt; &#xA; &lt;li&gt;Querying streaming and batch data sources directly using SQL&lt;/li&gt; &#xA; &lt;li&gt;Ingesting data through a library of connectors and serving it using low-latency SQL queries&lt;/li&gt; &#xA; &lt;li&gt;Pushing updates to applications on events&lt;/li&gt; &#xA; &lt;li&gt;Low-latency queue-based or pub-sub messaging&lt;/li&gt; &#xA; &lt;li&gt;Fast access to contextual and transactional data via caching patterns such as read/write-through and write-behind&lt;/li&gt; &#xA; &lt;li&gt;Distributed coordination for microservices&lt;/li&gt; &#xA; &lt;li&gt;Replicating data from one region to another or between data centers in the same region&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Stateful and fault-tolerant data processing and querying over data streams and data at rest using SQL or dataflow API&lt;/li&gt; &#xA; &lt;li&gt;A comprehensive library of connectors such as Kafka, Hadoop, S3, RDBMS, JMS and many more&lt;/li&gt; &#xA; &lt;li&gt;Distributed messaging using pub-sub and queues&lt;/li&gt; &#xA; &lt;li&gt;Distributed, partitioned, queryable key-value store with event listeners, which can also be used to store contextual data for enriching event streams with low latency&lt;/li&gt; &#xA; &lt;li&gt;A production-ready Raft-implementation which allows lineralizable (CP) concurrency primitives such as distributed locks.&lt;/li&gt; &#xA; &lt;li&gt;Tight integration for deploying machine learning models with Python to a data processing pipeline&lt;/li&gt; &#xA; &lt;li&gt;Cloud-native, run everywhere architecture&lt;/li&gt; &#xA; &lt;li&gt;Zero-downtime operations with rolling upgrades&lt;/li&gt; &#xA; &lt;li&gt;At-least-once and exactly-once processing guarantees for stream processing pipelines&lt;/li&gt; &#xA; &lt;li&gt;Data replication between data centers and geographic regions using WAN&lt;/li&gt; &#xA; &lt;li&gt;Microsecond performance for key-value point lookups and pub-sub&lt;/li&gt; &#xA; &lt;li&gt;Unique data processing architecture results in 99.99% latency of under 10ms for streaming queries with millions of events per second.&lt;/li&gt; &#xA; &lt;li&gt;Client libraries in &lt;a href=&#34;https://github.com/hazelcast/hazelcast&#34;&gt;Java&lt;/a&gt;, &lt;a href=&#34;https://github.com/hazelcast/hazelcast-python-client&#34;&gt;Python&lt;/a&gt;, &lt;a href=&#34;https://github.com/hazelcast/hazelcast-nodejs-client&#34;&gt;Node.js&lt;/a&gt;, &lt;a href=&#34;https://github.com/hazelcast/hazelcast-csharp-client&#34;&gt;.NET&lt;/a&gt;, &lt;a href=&#34;https://github.com/hazelcast/hazelcast-cpp-client&#34;&gt;C++&lt;/a&gt; and &lt;a href=&#34;https://github.com/hazelcast/hazelcast-go-client&#34;&gt;Go&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Operational Data Store&lt;/h3&gt; &#xA;&lt;p&gt;Hazelcast provides distributed in-memory data structures which are partitioned, replicated and queryable. One of the main use cases for Hazelcast is for storing a &lt;em&gt;working set&lt;/em&gt; of data for fast querying and access.&lt;/p&gt; &#xA;&lt;p&gt;The main data structure underlying Hazelcast, called &lt;code&gt;IMap&lt;/code&gt;, is a key-value store which has a rich set of features, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Integration with &lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/pipelines/sources-sinks.htm&#34;&gt;data sources&lt;/a&gt; for one time or continuous ingestion&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/data-structures/map.html#loading-and-storing-persistent-data&#34;&gt;Read-through and write-through&lt;/a&gt; caching patterns&lt;/li&gt; &#xA; &lt;li&gt;Indexing and querying through &lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/query/sql-overview.html&#34;&gt;SQL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Processing entries in place for &lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/computing/entry-processor.html&#34;&gt;atomic updates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/data-structures/map.html#map-eviction&#34;&gt;Expiring items&lt;/a&gt; automatically based on certain criteria like TTL or last access time&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/performance/near-cache.html&#34;&gt;Near cache&lt;/a&gt; for caching entries on the client&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/events/object-events.html&#34;&gt;Listeners&lt;/a&gt; for pushing changes to clients&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/wan/wan.html&#34;&gt;Data Replication&lt;/a&gt; between datacenters (Enterprise version only)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/storage/persistence.html&#34;&gt;Persistence&lt;/a&gt; of data on disk (Enterprise version only)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Hazelcast stores data in &lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/consistency-and-replication/replication-algorithm.html&#34;&gt;partitions&lt;/a&gt;, which are distributed to all the nodes. You can increase the storage capacity by adding additional nodes, and if one of the nodes go down, the data is restored automatically from the backup replicas.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/hazelcast/hazelcast/master/images/replication.png&#34;&gt; &#xA;&lt;p&gt;You can interact with maps using SQL or a programming language client of your choice. You can create and interact with a map as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE MAPPING myMap (name varchar EXTERNAL NAME &#34;__key&#34;, age INT EXTERNAL NAME &#34;this&#34;) &#xA;TYPE IMap&#xA;OPTIONS (&#39;keyFormat&#39;=&#39;varchar&#39;,&#39;valueFormat&#39;=&#39;int&#39;);&#xA;INSERT INTO myMap VALUES(&#39;Jake&#39;, 29);&#xA;SELECT * FROM myMap;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The same can be done programmatically as follows using one of the &lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/clients/hazelcast-clients.html&#34;&gt;supported programming languages&lt;/a&gt;. Here are some exmaples in Java and Python:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;var hz = HazelcastClient.newHazelcastClient();&#xA;IMap&amp;lt;String, Integer&amp;gt; map = hz.getMap(&#34;myMap&#34;);&#xA;map.set(Alice, 25);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import hazelcast&#xA;&#xA;client = hazelcast.HazelcastClient()&#xA;my_map = client.get_map(&#34;myMap&#34;)&#xA;age = my_map.get(&#34;Alice&#34;).result()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other programming languages supported are &lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/clients/dotnet.html&#34;&gt;C#&lt;/a&gt;, &lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/clients/cplusplus.html&#34;&gt;C++&lt;/a&gt;, &lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/clients/nodejs.html&#34;&gt;Node.js&lt;/a&gt; and &lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/clients/go.html&#34;&gt;Go&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can ingest data directly from the many &lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/pipelines/sources-sinks.html&#34;&gt;sources supported&lt;/a&gt; using SQL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE MAPPING csv_ages (name VARCHAR, age INT)&#xA;TYPE File&#xA;OPTIONS (&#39;format&#39;=&#39;csv&#39;,&#xA;    &#39;path&#39;=&#39;/data&#39;, &#39;glob&#39;=&#39;data.csv&#39;);&#xA;SINK INTO myMap&#xA;SELECT name, age FROM csv_ages;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hazelcast also provides additional data structures such as ReplicatedMap, Set, MultiMap and List. For a full list, refer to the &lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/data-structures/distributed-data-structures.html&#34;&gt;distributed data structures&lt;/a&gt; section of the docs.&lt;/p&gt; &#xA;&lt;h3&gt;Stateful Data Processing&lt;/h3&gt; &#xA;&lt;p&gt;Hazelcast has a built-in data processing engine called &lt;a href=&#34;https://arxiv.org/abs/2103.10169&#34;&gt;Jet&lt;/a&gt;. Jet can be used to build both streaming and batch data pipelines that are elastic. You can use it to process large volumes of real-time events or huge batches of static datasets. To give a sense of scale, a single node of Hazelcast has been proven to &lt;a href=&#34;https://jet-start.sh/blog/2020/08/05/gc-tuning-for-jet&#34;&gt;aggregate 10 million events per second&lt;/a&gt; with latency under 10 milliseconds. A cluster of Hazelcast nodes can process &lt;a href=&#34;https://hazelcast.com/blog/billion-events-per-second-with-millisecond-latency-streaming-analytics-at-giga-scale/&#34;&gt;billion events per second&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/hazelcast/hazelcast/master/images/latency.png&#34;&gt; &#xA;&lt;p&gt;An application which aggregates millions of sensor readings per second with 10-millisecond resolution from Kafka looks like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;var hz = Hazelcast.bootstrappedInstance();&#xA;&#xA;var p = Pipeline.create();&#xA;&#xA;p.readFrom(KafkaSources.&amp;lt;String, Reading&amp;gt;kafka(kafkaProperties, &#34;sensors&#34;))&#xA; .withTimestamps(event -&amp;gt; event.getValue().timestamp(), 10) // use event timestamp, allowed lag in ms&#xA; .groupingKey(reading -&amp;gt; reading.sensorId())&#xA; .window(sliding(1_000, 10)) // sliding window of 1s by 10ms&#xA; .aggregate(averagingDouble(reading -&amp;gt; reading.temperature()))&#xA; .writeTo(Sinks.logger());&#xA;&#xA;hz.getJet().newJob(p).join();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the following command to deploy the application to the server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/hazelcast submit analyze-sensors.jar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Jet supports advanced streaming features such as &lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/fault-tolerance/fault-tolerance.html&#34;&gt;exactly-once processing&lt;/a&gt; and &lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/architecture/event-time-processing.html&#34;&gt;watermarks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Data Processing using SQL&lt;/h4&gt; &#xA;&lt;p&gt;Jet also powers the &lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/query/sql-overview.html&#34;&gt;SQL engine&lt;/a&gt; in Hazelcast which can execute both streaming and batch queries. Internally, all SQL queries are converted to Jet jobs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE MAPPING trades (&#xA;    id BIGINT,&#xA;    ticker VARCHAR,&#xA;    price DECIMAL,&#xA;    amount BIGINT)&#xA;TYPE Kafka&#xA;OPTIONS (&#xA;    &#39;valueFormat&#39; = &#39;json&#39;,&#xA;    &#39;bootstrap.servers&#39; = &#39;kafka:9092&#39;&#xA;);&#xA;SELECT ticker, ROUND(price * 100) AS price_cents, amount&#xA;  FROM trades&#xA;  WHERE price * amount &amp;gt; 100;&#xA;+------------+----------------------+-------------------+&#xA;|ticker      |           price_cents|             amount|&#xA;+------------+----------------------+-------------------+&#xA;|EFGH        |                  1400|                 20|&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Messaging&lt;/h3&gt; &#xA;&lt;p&gt;Hazelcast provides lightweight options for adding messaging to your application. The two main constructs for messaging are topics and queues.&lt;/p&gt; &#xA;&lt;h4&gt;Topics&lt;/h4&gt; &#xA;&lt;p&gt;Topics provide a publish-subscribe pattern where each message is fanned out to multiple subscribers. See the examples below in Java and Python:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;var hz = Hazelcast.bootstrappedInstance();&#xA;ITopic&amp;lt;String&amp;gt; topic = hz.getTopic(&#34;my_topic&#34;);&#xA;topic.addMessageListener(msg -&amp;gt; System.out.println(msg));&#xA;topic.publish(&#34;message&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;topic = client.get_topic(&#34;my_topic&#34;)&#xA;&#xA;def handle_message(msg):&#xA;    print(&#34;Received message %s&#34;  % msg.message)&#xA;topic.add_listener(on_message=handle_message)&#xA;topic.publish(&#34;my-message&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For examples in other languages, please refer to the &lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/data-structures/topic.html&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Queues&lt;/h4&gt; &#xA;&lt;p&gt;Queues provide FIFO-semantics and you can add items from one client and remove from another. See the examples below in Java and Python:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;var client = Hazelcast.newHazelcastClient();&#xA;IQueue&amp;lt;String&amp;gt; queue = client.getQueue(&#34;my_queue&#34;);&#xA;queue.put(&#34;new-item&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import hazelcast&#xA;&#xA;client = hazelcast.HazelcastClient()&#xA;q = client.get_queue(&#34;my_queue&#34;)&#xA;my_item = q.take().result()&#xA;print(&#34;Received item %s&#34; % my_item)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For examples in other languages, please refer to the &lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/data-structures/queue.html&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Get Started&lt;/h2&gt; &#xA;&lt;p&gt;Follow the &lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/getting-started/install-hazelcast&#34;&gt;Getting Started Guide&lt;/a&gt; to install and start using Hazelcast.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://docs.hazelcast.com/&#34;&gt;documentation&lt;/a&gt; for in-depth details about how to install Hazelcast and an overview of the features.&lt;/p&gt; &#xA;&lt;h2&gt;Get Help&lt;/h2&gt; &#xA;&lt;p&gt;You can use the following channels for getting help with Hazelcast:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://groups.google.com/group/hazelcast&#34;&gt;Hazelcast mailing list&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://slack.hazelcast.com/&#34;&gt;Slack&lt;/a&gt; for chatting with the development team and other Hazelcast users.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/tags/hazelcast&#34;&gt;Stack Overflow&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Thanks for your interest in contributing! The easiest way is to just send a pull request. Have a look at the &lt;a href=&#34;https://github.com/hazelcast/hazelcast-jet/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22&#34;&gt;issues&lt;/a&gt; marked as good first issue for some guidance.&lt;/p&gt; &#xA;&lt;h3&gt;Building From Source&lt;/h3&gt; &#xA;&lt;p&gt;Building Hazelcast requires at minimum JDK 1.8. Pull the latest source from the repository and use Maven install (or package) to build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git pull origin master&#xA;$ mvn clean package -Dtests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, there is a &lt;code&gt;quick&lt;/code&gt; build activated by setting the &lt;code&gt;-Dquick&lt;/code&gt; system property that skips tests, checkstyle validation, javadoc and source plugins and does not build &lt;code&gt;extensions&lt;/code&gt; and &lt;code&gt;distribution&lt;/code&gt; modules.&lt;/p&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;p&gt;Take into account that the default build executes thousands of tests which may take a considerable amount of time. Hazelcast has 3 testing profiles:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Default: Type &lt;code&gt;mvn test&lt;/code&gt; to run quick/integration tests (those can be run in parallel without using network).&lt;/li&gt; &#xA; &lt;li&gt;Slow Tests: Type &lt;code&gt;mvn test -P slow-test&lt;/code&gt; to run tests that are either slow or cannot be run in parallel.&lt;/li&gt; &#xA; &lt;li&gt;All Tests: Type &lt;code&gt;mvn test -P all-tests&lt;/code&gt; to run all tests serially using network.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some tests require Docker to run. Set &lt;code&gt;-Dhazelcast.disable.docker.tests&lt;/code&gt; system property to ignore them.&lt;/p&gt; &#xA;&lt;h2&gt;Trigger Phrases in the Pull Request Conversation&lt;/h2&gt; &#xA;&lt;p&gt;When you create a pull request (PR), it must pass a build-and-test procedure. Maintainers will be notified about your PR, and they can trigger the build using special comments. These are the phrases you may see used in the comments on your PR:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;run-lab-run&lt;/code&gt; - run the default PR builder&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;run-lts-compilers&lt;/code&gt; - compiles the sources with JDK 11 and JDK 17 (without running tests)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;run-ee-compile&lt;/code&gt; - compile hazelcast-enterprise with this PR&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;run-ee-tests&lt;/code&gt; - run tests from hazelcast-enterprise with this PR&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;run-windows&lt;/code&gt; - run the tests on a Windows machine (HighFive is not supported here)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;run-with-jdk17&lt;/code&gt; - run the tests with JDK 17&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;run-with-ibm-jdk-8&lt;/code&gt; - run the tests with IBM JDK 8&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;run-cdc-debezium-tests&lt;/code&gt; - run all tests in the &lt;code&gt;extensions/cdc-debezium&lt;/code&gt; module&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;run-cdc-mysql-tests&lt;/code&gt; - run all tests in the &lt;code&gt;extensions/cdc-mysql&lt;/code&gt; module&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;run-cdc-postgres-tests&lt;/code&gt; - run all tests in the &lt;code&gt;extensions/cdc-postgres&lt;/code&gt; module&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;run-s3-tests&lt;/code&gt; - run all tests in the &lt;code&gt;extensions/s3&lt;/code&gt; module&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;code&gt;run-nightly-tests&lt;/code&gt; - run nightly (slow) tests. WARNING: Use with care as this is a resource consuming task.&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Where not indicated, the builds run on a Linux machine with Oracle JDK 8.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Source code in this repository is covered by one of two licenses:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/index.html#licenses-and-support&#34;&gt;Apache License 2.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://hazelcast.com/hazelcast-community-license&#34;&gt;Hazelcast Community License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The default license throughout the repository is Apache License 2.0 unless the header specifies another license.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.yourkit.com/&#34;&gt;&lt;img src=&#34;https://www.yourkit.com/images/yklogo.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;http://www.yourkit.com/&#34;&gt;YourKit&lt;/a&gt; for supporting open source software by providing us a free license for their Java profiler.&lt;/p&gt; &#xA;&lt;p&gt;We owe (the good parts of) our CLI tool&#39;s user experience to &lt;a href=&#34;https://picocli.info/&#34;&gt;picocli&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2008-2022, Hazelcast, Inc. All Rights Reserved.&lt;/p&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;http://www.hazelcast.com/&#34;&gt;www.hazelcast.com&lt;/a&gt; for more info.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>resilience4j/resilience4j</title>
    <updated>2022-10-08T01:33:57Z</updated>
    <id>tag:github.com,2022-10-08:/resilience4j/resilience4j</id>
    <link href="https://github.com/resilience4j/resilience4j" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Resilience4j is a fault tolerance library designed for Java8 and functional programming&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Fault tolerance library designed for functional programming&lt;/h1&gt; &#xA;&lt;div id=&#34;preamble&#34;&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://github.com/resilience4j/resilience4j/actions/workflows/gradle-build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://img.shields.io/nexus/r/io.github.resilience4j/resilience4j-circuitbreaker?nexusVersion=3&amp;amp;server=https%3A%2F%2Fnexus.pentaho.org&#34; alt=&#34;Release&#34;&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://img.shields.io/nexus/s/io.github.resilience4j/resilience4j-circuitbreaker?server=https%3A%2F%2Foss.sonatype.org&#34; alt=&#34;Snapshot&#34;&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;http://www.apache.org/licenses/LICENSE-2.0.txt&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/license-ASF2-blue.svg?sanitize=true&#34; alt=&#34;Apache License 2&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://sonarcloud.io/dashboard?id=resilience4j_resilience4j&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=resilience4j_resilience4j&amp;amp;metric=coverage&#34; alt=&#34;Coverage&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://sonarcloud.io/dashboard?id=resilience4j_resilience4j&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=resilience4j_resilience4j&amp;amp;metric=sqale_rating&#34; alt=&#34;Maintainability&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://sonarcloud.io/dashboard?id=resilience4j_resilience4j&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=resilience4j_resilience4j&amp;amp;metric=reliability_rating&#34; alt=&#34;Reliability&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://sonarcloud.io/dashboard?id=resilience4j_resilience4j&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=resilience4j_resilience4j&amp;amp;metric=security_rating&#34; alt=&#34;Security&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://sonarcloud.io/dashboard?id=resilience4j_resilience4j&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=resilience4j_resilience4j&amp;amp;metric=vulnerabilities&#34; alt=&#34;Vulnerabilities&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://sonarcloud.io/dashboard?id=resilience4j_resilience4j&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=resilience4j_resilience4j&amp;amp;metric=bugs&#34; alt=&#34;Bugs&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://vshymanskyy.github.io/StandWithUkraine&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/banner2-direct.svg?sanitize=true&#34; alt=&#34;SWUbanner&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div id=&#34;toc&#34; class=&#34;toc&#34;&gt; &#xA;   &lt;div id=&#34;toctitle&#34; class=&#34;title&#34;&gt;&#xA;    Table of Contents&#xA;   &lt;/div&gt; &#xA;   &lt;ul class=&#34;sectlevel1&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/resilience4j/resilience4j/master/#_introduction&#34;&gt;1. Introduction&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/resilience4j/resilience4j/master/#_documentation&#34;&gt;2. Documentation&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/resilience4j/resilience4j/master/#_overview&#34;&gt;3. Overview&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/resilience4j/resilience4j/master/#_resilience_patterns&#34;&gt;4. Resilience patterns&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/resilience4j/resilience4j/master/#_spring_boot&#34;&gt;5. Spring Boot&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/resilience4j/resilience4j/master/#_usage_examples&#34;&gt;6. Usage examples&lt;/a&gt; &#xA;     &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/resilience4j/resilience4j/master/#circuitbreaker-retry-fallback&#34;&gt;6.1. CircuitBreaker, Retry and Fallback&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/resilience4j/resilience4j/master/#ratelimiter&#34;&gt;6.2. RateLimiter&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/resilience4j/resilience4j/master/#bulkhead&#34;&gt;6.3. Bulkhead&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/resilience4j/resilience4j/master/#events&#34;&gt;7. Consume emitted events&lt;/a&gt; &#xA;     &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/resilience4j/resilience4j/master/#_examples&#34;&gt;7.1. Examples&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/resilience4j/resilience4j/master/#_talks&#34;&gt;8. Talks&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/resilience4j/resilience4j/master/#_companies_that_use_resilience4j&#34;&gt;9. Companies that use Resilience4j&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/resilience4j/resilience4j/master/#_license&#34;&gt;10. License&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_introduction&#34;&gt;1. Introduction&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Resilience4j is a lightweight fault tolerance library inspired by &lt;a href=&#34;https://github.com/Netflix/Hystrix&#34;&gt;Netflix Hystrix&lt;/a&gt;, but designed for Java 8 and functional programming. Lightweight, because the library only uses &lt;a href=&#34;http://www.vavr.io/&#34;&gt;Vavr&lt;/a&gt;, which does not have any other external library dependencies. Netflix Hystrix, in contrast, has a compile dependency to &lt;a href=&#34;https://github.com/Netflix/archaius&#34;&gt;Archaius&lt;/a&gt; which has many more external library dependencies such as Guava and Apache Commons Configuration.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;admonitionblock warning&#34;&gt; &#xA;   &lt;table&gt; &#xA;    &lt;tbody&gt;&#xA;     &lt;tr&gt; &#xA;      &lt;td class=&#34;icon&#34;&gt; &#xA;       &lt;div class=&#34;title&#34;&gt;&#xA;        Warning&#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;      &lt;td class=&#34;content&#34;&gt; Netflix Hystrix is no longer in active development, and is currently in maintenance mode. &lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt;&#xA;   &lt;/table&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Resilience4j provides higher-order functions (decorators) to enhance any functional interface, lambda expression or method reference with a Circuit Breaker, Rate Limiter, Retry or Bulkhead. You can stack more than one decorator on any functional interface, lambda expression or method reference. The advantage is that you have the choice to select the decorators you need and nothing else.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;// Create a CircuitBreaker with default configuration&#xA;CircuitBreaker circuitBreaker = CircuitBreaker.ofDefaults(&#34;backendService&#34;);&#xA;&#xA;// Create a Retry with default configuration&#xA;// 3 retry attempts and a fixed time interval between retries of 500ms&#xA;Retry retry = Retry.ofDefaults(&#34;backendService&#34;);&#xA;&#xA;// Create a Bulkhead with default configuration&#xA;Bulkhead bulkhead = Bulkhead.ofDefaults(&#34;backendService&#34;);&#xA;&#xA;Supplier&amp;lt;String&amp;gt; supplier = () -&amp;gt; backendService&#xA;  .doSomething(param1, param2);&#xA;&#xA;// Decorate your call to backendService.doSomething()&#xA;// with a Bulkhead, CircuitBreaker and Retry&#xA;// **note: you will need the resilience4j-all dependency for this&#xA;Supplier&amp;lt;String&amp;gt; decoratedSupplier = Decorators.ofSupplier(supplier)&#xA;  .withCircuitBreaker(circuitBreaker)&#xA;  .withBulkhead(bulkhead)&#xA;  .withRetry(retry)&#xA;  .decorate();&#xA;&#xA;// Execute the decorated supplier and recover from any exception&#xA;String result = Try.ofSupplier(decoratedSupplier)&#xA;  .recover(throwable -&amp;gt; &#34;Hello from Recovery&#34;).get();&#xA;&#xA;// When you don&#39;t want to decorate your lambda expression,&#xA;// but just execute it and protect the call by a CircuitBreaker.&#xA;String result = circuitBreaker&#xA;  .executeSupplier(backendService::doSomething);&#xA;&#xA;// You can also run the supplier asynchronously in a ThreadPoolBulkhead&#xA; ThreadPoolBulkhead threadPoolBulkhead = ThreadPoolBulkhead&#xA;  .ofDefaults(&#34;backendService&#34;);&#xA;&#xA;// The Scheduler is needed to schedule a timeout on a non-blocking CompletableFuture&#xA;ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(3);&#xA;TimeLimiter timeLimiter = TimeLimiter.of(Duration.ofSeconds(1));&#xA;&#xA;CompletableFuture&amp;lt;String&amp;gt; future = Decorators.ofSupplier(supplier)&#xA;    .withThreadPoolBulkhead(threadPoolBulkhead)&#xA;    .withTimeLimiter(timeLimiter, scheduler)&#xA;    .withCircuitBreaker(circuitBreaker)&#xA;    .withFallback(asList(TimeoutException.class, CallNotPermittedException.class, BulkheadFullException.class),&#xA;      throwable -&amp;gt; &#34;Hello from Recovery&#34;)&#xA;    .get().toCompletableFuture();&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;admonitionblock note&#34;&gt; &#xA;   &lt;table&gt; &#xA;    &lt;tbody&gt;&#xA;     &lt;tr&gt; &#xA;      &lt;td class=&#34;icon&#34;&gt; &#xA;       &lt;div class=&#34;title&#34;&gt;&#xA;        Note&#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;      &lt;td class=&#34;content&#34;&gt; With Resilience4j you don’t have to go all-in, you can &lt;a href=&#34;https://mvnrepository.com/artifact/io.github.resilience4j&#34;&gt;&lt;strong&gt;pick what you need&lt;/strong&gt;&lt;/a&gt;. &lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt;&#xA;   &lt;/table&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_documentation&#34;&gt;2. Documentation&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Setup and usage is described in our &lt;strong&gt;&lt;a href=&#34;https://resilience4j.readme.io/docs&#34;&gt;User Guide&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/resilience4j-docs-ja/resilience4j-docs-ja&#34;&gt;有志による日本語訳(非公式) Japanese translation by volunteers(Unofficial)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/lmhmhl/Resilience4j-Guides-Chinese&#34;&gt;这是Resilience4j的非官方中文文档 Chinese translation by volunteers(Unofficial)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_overview&#34;&gt;3. Overview&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Resilience4j provides several core modules:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;resilience4j-circuitbreaker: Circuit breaking&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;resilience4j-ratelimiter: Rate limiting&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;resilience4j-bulkhead: Bulkheading&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;resilience4j-retry: Automatic retrying (sync and async)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;resilience4j-timelimiter: Timeout handling&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;resilience4j-cache: Result caching&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;There are also add-on modules for metrics, Retrofit, Feign, Kotlin, Spring, Ratpack, Vertx, RxJava2 and more.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;admonitionblock note&#34;&gt; &#xA;   &lt;table&gt; &#xA;    &lt;tbody&gt;&#xA;     &lt;tr&gt; &#xA;      &lt;td class=&#34;icon&#34;&gt; &#xA;       &lt;div class=&#34;title&#34;&gt;&#xA;        Note&#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;      &lt;td class=&#34;content&#34;&gt; Find out full list of modules in our &lt;strong&gt;&lt;a href=&#34;https://resilience4j.readme.io/docs#section-modularization&#34;&gt;User Guide&lt;/a&gt;&lt;/strong&gt;. &lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt;&#xA;   &lt;/table&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;admonitionblock tip&#34;&gt; &#xA;   &lt;table&gt; &#xA;    &lt;tbody&gt;&#xA;     &lt;tr&gt; &#xA;      &lt;td class=&#34;icon&#34;&gt; &#xA;       &lt;div class=&#34;title&#34;&gt;&#xA;        Tip&#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;      &lt;td class=&#34;content&#34;&gt; For core modules package or &lt;code&gt;Decorators&lt;/code&gt; builder see &lt;strong&gt;&lt;a href=&#34;https://mvnrepository.com/artifact/io.github.resilience4j/resilience4j-all&#34;&gt;resilience4j-all&lt;/a&gt;&lt;/strong&gt;. &lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt;&#xA;   &lt;/table&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_resilience_patterns&#34;&gt;4. Resilience patterns&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;table class=&#34;tableblock frame-all grid-all stretch&#34;&gt; &#xA;   &lt;colgroup&gt; &#xA;    &lt;col style=&#34;width: 25%;&#34;&gt; &#xA;    &lt;col style=&#34;width: 25%;&#34;&gt; &#xA;    &lt;col style=&#34;width: 25%;&#34;&gt; &#xA;    &lt;col style=&#34;width: 25%;&#34;&gt; &#xA;   &lt;/colgroup&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th class=&#34;tableblock halign-left valign-top&#34;&gt;name&lt;/th&gt; &#xA;     &lt;th class=&#34;tableblock halign-left valign-top&#34;&gt;how does it work?&lt;/th&gt; &#xA;     &lt;th class=&#34;tableblock halign-left valign-top&#34;&gt;description&lt;/th&gt; &#xA;     &lt;th class=&#34;tableblock halign-left valign-top&#34;&gt;links&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;strong&gt;Retry&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;repeats failed executions&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Many faults are transient and may self-correct after a short delay.&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/resilience4j/resilience4j/master/#circuitbreaker-retry-fallback&#34;&gt;overview&lt;/a&gt;, &lt;a href=&#34;https://resilience4j.readme.io/docs/retry&#34;&gt;documentation&lt;/a&gt;, &lt;a href=&#34;https://resilience4j.readme.io/docs/getting-started-3#annotations&#34;&gt;Spring&lt;/a&gt;&lt;/p&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;strong&gt;Circuit Breaker&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;temporary blocks possible failures&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;When a system is seriously struggling, failing fast is better than making clients wait.&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/resilience4j/resilience4j/master/#circuitbreaker-retry-fallback&#34;&gt;overview&lt;/a&gt;, &lt;a href=&#34;https://resilience4j.readme.io/docs/circuitbreaker&#34;&gt;documentation&lt;/a&gt;, &lt;a href=&#34;https://resilience4j.readme.io/docs/feign&#34;&gt;Feign&lt;/a&gt;, &lt;a href=&#34;https://resilience4j.readme.io/docs/retrofit&#34;&gt;Retrofit&lt;/a&gt;, &lt;a href=&#34;https://resilience4j.readme.io/docs/getting-started-3#annotations&#34;&gt;Spring&lt;/a&gt;&lt;/p&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;strong&gt;Rate Limiter&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;limits executions/period&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Limit the rate of incoming requests.&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/resilience4j/resilience4j/master/#ratelimiter&#34;&gt;overview&lt;/a&gt;, &lt;a href=&#34;https://resilience4j.readme.io/docs/ratelimiter&#34;&gt;documentation&lt;/a&gt;, &lt;a href=&#34;https://resilience4j.readme.io/docs/feign&#34;&gt;Feign&lt;/a&gt;, &lt;a href=&#34;https://resilience4j.readme.io/docs/retrofit&#34;&gt;Retrofit&lt;/a&gt;, &lt;a href=&#34;https://resilience4j.readme.io/docs/getting-started-3#annotations&#34;&gt;Spring&lt;/a&gt;&lt;/p&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;strong&gt;Time Limiter&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;limits duration of execution&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Beyond a certain wait interval, a successful result is unlikely.&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;a href=&#34;https://resilience4j.readme.io/docs/timeout&#34;&gt;documentation&lt;/a&gt;, &lt;a href=&#34;https://resilience4j.readme.io/docs/retrofit&#34;&gt;Retrofit&lt;/a&gt;, &lt;a href=&#34;https://resilience4j.readme.io/docs/getting-started-3#annotations&#34;&gt;Spring&lt;/a&gt;&lt;/p&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;strong&gt;Bulkhead&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;limits concurrent executions&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Resources are isolated into pools so that if one fails, the others will continue working.&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/resilience4j/resilience4j/master/#bulkhead&#34;&gt;overview&lt;/a&gt;, &lt;a href=&#34;https://resilience4j.readme.io/docs/bulkhead&#34;&gt;documentation&lt;/a&gt;, &lt;a href=&#34;https://resilience4j.readme.io/docs/getting-started-3#annotations&#34;&gt;Spring&lt;/a&gt;&lt;/p&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;strong&gt;Cache&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;memorizes a successful result&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Some proportion of requests may be similar.&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;a href=&#34;https://resilience4j.readme.io/docs/cache&#34;&gt;documentation&lt;/a&gt;&lt;/p&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;strong&gt;Fallback&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;provides an alternative result for failures&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Things will still fail - plan what you will do when that happens.&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/resilience4j/resilience4j/master/#circuitbreaker-retry-fallback&#34;&gt;Try::recover&lt;/a&gt;, &lt;a href=&#34;https://resilience4j.readme.io/docs/getting-started-3#section-annotations&#34;&gt;Spring&lt;/a&gt;, &lt;a href=&#34;https://resilience4j.readme.io/docs/feign&#34;&gt;Feign&lt;/a&gt;&lt;/p&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;em&gt;Above table is based on &lt;a href=&#34;https://github.com/App-vNext/Polly#resilience-policies&#34;&gt;Polly: resilience policies&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;admonitionblock note&#34;&gt; &#xA;   &lt;table&gt; &#xA;    &lt;tbody&gt;&#xA;     &lt;tr&gt; &#xA;      &lt;td class=&#34;icon&#34;&gt; &#xA;       &lt;div class=&#34;title&#34;&gt;&#xA;        Note&#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;      &lt;td class=&#34;content&#34;&gt; To find more information about resilience patterns check &lt;a href=&#34;https://raw.githubusercontent.com/resilience4j/resilience4j/master/#Talks&#34;&gt;&lt;strong&gt;Talks&lt;/strong&gt;&lt;/a&gt; section. Find out more about components in our &lt;strong&gt;&lt;a href=&#34;https://resilience4j.readme.io/docs/getting-started-2&#34;&gt;User Guide&lt;/a&gt;&lt;/strong&gt;. &lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt;&#xA;   &lt;/table&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_spring_boot&#34;&gt;5. Spring Boot&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Setup and usage in Spring Boot 2 is demonstrated &lt;a href=&#34;https://github.com/resilience4j/resilience4j-spring-boot2-demo&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_usage_examples&#34;&gt;6. Usage examples&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;circuitbreaker-retry-fallback&#34;&gt;6.1. CircuitBreaker, Retry and Fallback&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The following example shows how to decorate a lambda expression (Supplier) with a CircuitBreaker and how to retry the call at most 3 times when an exception occurs. You can configure the wait interval between retries and also configure a custom backoff algorithm.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The example uses Vavr’s Try Monad to recover from an exception and invoke another lambda expression as a fallback, when even all retries have failed.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;// Simulates a Backend Service&#xA;public interface BackendService {&#xA;    String doSomething();&#xA;}&#xA;&#xA;// Create a CircuitBreaker (use default configuration)&#xA;CircuitBreaker circuitBreaker = CircuitBreaker.ofDefaults(&#34;backendName&#34;);&#xA;// Create a Retry with at most 3 retries and a fixed time interval between retries of 500ms&#xA;Retry retry = Retry.ofDefaults(&#34;backendName&#34;);&#xA;&#xA;// Decorate your call to BackendService.doSomething() with a CircuitBreaker&#xA;Supplier&amp;lt;String&amp;gt; decoratedSupplier = CircuitBreaker&#xA;    .decorateSupplier(circuitBreaker, backendService::doSomething);&#xA;&#xA;// Decorate your call with automatic retry&#xA;decoratedSupplier = Retry&#xA;    .decorateSupplier(retry, decoratedSupplier);&#xA;&#xA;// Execute the decorated supplier and recover from any exception&#xA;String result = Try.ofSupplier(decoratedSupplier)&#xA;    .recover(throwable -&amp;gt; &#34;Hello from Recovery&#34;).get();&#xA;&#xA;// When you don&#39;t want to decorate your lambda expression,&#xA;// but just execute it and protect the call by a CircuitBreaker.&#xA;String result = circuitBreaker.executeSupplier(backendService::doSomething);&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_circuitbreaker_and_rxjava2&#34;&gt;6.1.1. CircuitBreaker and RxJava2&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;The following example shows how to decorate an Observable by using the custom RxJava operator.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;CircuitBreaker circuitBreaker = CircuitBreaker.ofDefaults(&#34;testName&#34;);&#xA;Observable.fromCallable(backendService::doSomething)&#xA;    .compose(CircuitBreakerOperator.of(circuitBreaker))&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;admonitionblock note&#34;&gt; &#xA;     &lt;table&gt; &#xA;      &lt;tbody&gt;&#xA;       &lt;tr&gt; &#xA;        &lt;td class=&#34;icon&#34;&gt; &#xA;         &lt;div class=&#34;title&#34;&gt;&#xA;          Note&#xA;         &lt;/div&gt; &lt;/td&gt; &#xA;        &lt;td class=&#34;content&#34;&gt; Resilience4j also provides RxJava operators for &lt;code&gt;RateLimiter&lt;/code&gt;, &lt;code&gt;Bulkhead&lt;/code&gt;, &lt;code&gt;TimeLimiter&lt;/code&gt; and &lt;code&gt;Retry&lt;/code&gt;. Find out more in our &lt;strong&gt;&lt;a href=&#34;https://resilience4j.readme.io/docs/getting-started-2&#34;&gt;User Guide&lt;/a&gt;&lt;/strong&gt;. &lt;/td&gt; &#xA;       &lt;/tr&gt; &#xA;      &lt;/tbody&gt;&#xA;     &lt;/table&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_circuitbreaker_and_spring_reactor&#34;&gt;6.1.2. CircuitBreaker and Spring Reactor&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;The following example shows how to decorate a Mono by using the custom Reactor operator.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;CircuitBreaker circuitBreaker = CircuitBreaker.ofDefaults(&#34;testName&#34;);&#xA;Mono.fromCallable(backendService::doSomething)&#xA;    .transformDeferred(CircuitBreakerOperator.of(circuitBreaker))&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;admonitionblock note&#34;&gt; &#xA;     &lt;table&gt; &#xA;      &lt;tbody&gt;&#xA;       &lt;tr&gt; &#xA;        &lt;td class=&#34;icon&#34;&gt; &#xA;         &lt;div class=&#34;title&#34;&gt;&#xA;          Note&#xA;         &lt;/div&gt; &lt;/td&gt; &#xA;        &lt;td class=&#34;content&#34;&gt; Resilience4j also provides Reactor operators for &lt;code&gt;RateLimiter&lt;/code&gt;, &lt;code&gt;Bulkhead&lt;/code&gt;, &lt;code&gt;TimeLimiter&lt;/code&gt; and &lt;code&gt;Retry&lt;/code&gt;. Find out more in our &lt;strong&gt;&lt;a href=&#34;https://resilience4j.readme.io/docs/getting-started-1&#34;&gt;User Guide&lt;/a&gt;&lt;/strong&gt;. &lt;/td&gt; &#xA;       &lt;/tr&gt; &#xA;      &lt;/tbody&gt;&#xA;     &lt;/table&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;ratelimiter&#34;&gt;6.2. RateLimiter&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The following example shows how to restrict the calling rate of some method to be not higher than 1 request/second.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;// Create a custom RateLimiter configuration&#xA;RateLimiterConfig config = RateLimiterConfig.custom()&#xA;    .timeoutDuration(Duration.ofMillis(100))&#xA;    .limitRefreshPeriod(Duration.ofSeconds(1))&#xA;    .limitForPeriod(1)&#xA;    .build();&#xA;// Create a RateLimiter&#xA;RateLimiter rateLimiter = RateLimiter.of(&#34;backendName&#34;, config);&#xA;&#xA;// Decorate your call to BackendService.doSomething()&#xA;Supplier&amp;lt;String&amp;gt; restrictedSupplier = RateLimiter&#xA;    .decorateSupplier(rateLimiter, backendService::doSomething);&#xA;&#xA;// First call is successful&#xA;Try&amp;lt;String&amp;gt; firstTry = Try.ofSupplier(restrictedSupplier);&#xA;assertThat(firstTry.isSuccess()).isTrue();&#xA;&#xA;// Second call fails, because the call was not permitted&#xA;Try&amp;lt;String&amp;gt; secondTry = Try.of(restrictedSupplier);&#xA;assertThat(secondTry.isFailure()).isTrue();&#xA;assertThat(secondTry.getCause()).isInstanceOf(RequestNotPermitted.class);&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;bulkhead&#34;&gt;6.3. Bulkhead&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;There are two isolation strategies and bulkhead implementations.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_semaphorebulkhead&#34;&gt;6.3.1. SemaphoreBulkhead&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;The following example shows how to decorate a lambda expression with a Bulkhead. A Bulkhead can be used to limit the amount of parallel executions. This bulkhead abstraction should work well across a variety of threading and io models. It is based on a semaphore, and unlike Hystrix, does not provide &#34;shadow&#34; thread pool option.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;// Create a custom Bulkhead configuration&#xA;BulkheadConfig config = BulkheadConfig.custom()&#xA;    .maxConcurrentCalls(150)&#xA;    .maxWaitDuration(100)&#xA;    .build();&#xA;&#xA;Bulkhead bulkhead = Bulkhead.of(&#34;backendName&#34;, config);&#xA;&#xA;Supplier&amp;lt;String&amp;gt; supplier = Bulkhead&#xA;    .decorateSupplier(bulkhead, backendService::doSomething);&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;threadpoolbulkhead&#34;&gt;6.3.2. ThreadPoolBulkhead&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;The following example shows how to use a lambda expression with a ThreadPoolBulkhead which uses a bounded queue and a fixed thread pool.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;// Create a custom ThreadPoolBulkhead configuration&#xA;ThreadPoolBulkheadConfig config = ThreadPoolBulkheadConfig.custom()&#xA;    .maxThreadPoolSize(10)&#xA;    .coreThreadPoolSize(2)&#xA;    .queueCapacity(20)&#xA;    .build();&#xA;&#xA;ThreadPoolBulkhead bulkhead = ThreadPoolBulkhead.of(&#34;backendName&#34;, config);&#xA;&#xA;// Decorate or execute immediately a lambda expression with a ThreadPoolBulkhead.&#xA;Supplier&amp;lt;CompletionStage&amp;lt;String&amp;gt;&amp;gt; supplier = ThreadPoolBulkhead&#xA;    .decorateSupplier(bulkhead, backendService::doSomething);&#xA;&#xA;CompletionStage&amp;lt;String&amp;gt; execution = bulkhead&#xA;    .executeSupplier(backendService::doSomething);&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;events&#34;&gt;7. Consume emitted events&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;code&gt;CircuitBreaker&lt;/code&gt;, &lt;code&gt;RateLimiter&lt;/code&gt;, &lt;code&gt;Cache&lt;/code&gt;, &lt;code&gt;Bulkhead&lt;/code&gt;, &lt;code&gt;TimeLimiter&lt;/code&gt; and &lt;code&gt;Retry&lt;/code&gt; components emit a stream of events. It can be consumed for logging, assertions and any other purpose.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_examples&#34;&gt;7.1. Examples&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;A &lt;code&gt;CircuitBreakerEvent&lt;/code&gt; can be a state transition, a circuit breaker reset, a successful call, a recorded error or an ignored error. All events contains additional information like event creation time and processing duration of the call. If you want to consume events, you have to register an event consumer.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;circuitBreaker.getEventPublisher()&#xA;    .onSuccess(event -&amp;gt; logger.info(...))&#xA;    .onError(event -&amp;gt; logger.info(...))&#xA;    .onIgnoredError(event -&amp;gt; logger.info(...))&#xA;    .onReset(event -&amp;gt; logger.info(...))&#xA;    .onStateTransition(event -&amp;gt; logger.info(...));&#xA;// Or if you want to register a consumer listening to all events, you can do:&#xA;circuitBreaker.getEventPublisher()&#xA;    .onEvent(event -&amp;gt; logger.info(...));&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;You can use RxJava or Spring Reactor Adapters to convert the &lt;code&gt;EventPublisher&lt;/code&gt; into a Reactive Stream. The advantage of a Reactive Stream is that you can use RxJava’s &lt;code&gt;observeOn&lt;/code&gt; operator to specify a different Scheduler that the CircuitBreaker will use to send notifications to its observers/consumers.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;RxJava2Adapter.toFlowable(circuitBreaker.getEventPublisher())&#xA;    .filter(event -&amp;gt; event.getEventType() == Type.ERROR)&#xA;    .cast(CircuitBreakerOnErrorEvent.class)&#xA;    .subscribe(event -&amp;gt; logger.info(...))&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;admonitionblock note&#34;&gt; &#xA;    &lt;table&gt; &#xA;     &lt;tbody&gt;&#xA;      &lt;tr&gt; &#xA;       &lt;td class=&#34;icon&#34;&gt; &#xA;        &lt;div class=&#34;title&#34;&gt;&#xA;         Note&#xA;        &lt;/div&gt; &lt;/td&gt; &#xA;       &lt;td class=&#34;content&#34;&gt; You can also consume events from other components. Find out more in our &lt;strong&gt;&lt;a href=&#34;https://resilience4j.readme.io/&#34;&gt;User Guide&lt;/a&gt;&lt;/strong&gt;. &lt;/td&gt; &#xA;      &lt;/tr&gt; &#xA;     &lt;/tbody&gt;&#xA;    &lt;/table&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_talks&#34;&gt;8. Talks&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;table class=&#34;tableblock frame-all grid-all stretch&#34;&gt; &#xA;   &lt;colgroup&gt; &#xA;    &lt;col style=&#34;width: 25%;&#34;&gt; &#xA;    &lt;col style=&#34;width: 25%;&#34;&gt; &#xA;    &lt;col style=&#34;width: 25%;&#34;&gt; &#xA;    &lt;col style=&#34;width: 25%;&#34;&gt; &#xA;   &lt;/colgroup&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;0:34&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=kR2sm1zelI4&#34;&gt;Battle of the Circuit Breakers: Resilience4J vs Istio&lt;/a&gt;&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Nicolas Frankel&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;GOTO Berlin&lt;/p&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;0:33&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=AwcjOhD91Q0&#34;&gt;Battle of the Circuit Breakers: Istio vs. Hystrix/Resilience4J&lt;/a&gt;&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Nicolas Frankel&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;JFuture&lt;/p&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;0:42&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=KosSsZEqS-k&amp;amp;t=157&#34;&gt;Resilience patterns in the post-Hystrix world&lt;/a&gt;&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Tomasz Skowroński&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Cloud Native Warsaw&lt;/p&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;0:52&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=NHVxrLb3jFI&#34;&gt;Building Robust and Resilient Apps Using Spring Boot and Resilience4j&lt;/a&gt;&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;David Caron&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;SpringOne&lt;/p&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;0:22&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=gvDvOWtPLVY&amp;amp;t=140&#34;&gt;Hystrix is dead, now what?&lt;/a&gt;&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Tomasz Skowroński&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;DevoxxPL&lt;/p&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_companies_that_use_resilience4j&#34;&gt;9. Companies that use Resilience4j&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;strong&gt;Deutsche Telekom&lt;/strong&gt; (In an application with over 400 million requests per day)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;strong&gt;AOL&lt;/strong&gt; (In an application with low latency requirements)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;strong&gt;Netpulse&lt;/strong&gt; (In a system with 40+ integrations)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;strong&gt;wescale.de&lt;/strong&gt; (In a B2B integration platform)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;strong&gt;Topia&lt;/strong&gt; (In an HR application built with microservices architecture)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;strong&gt;Auto Trader Group plc&lt;/strong&gt; (The largest Britain digital automotive marketplace)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;strong&gt;PlayStation Network&lt;/strong&gt; (A platform backend)&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_license&#34;&gt;10. License&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Copyright 2020 Robert Winkler, Bohdan Storozhuk, Mahmoud Romeh, Dan Maas and others&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;literalblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>rnmapbox/maps</title>
    <updated>2022-10-08T01:33:57Z</updated>
    <id>tag:github.com,2022-10-08:/rnmapbox/maps</id>
    <link href="https://github.com/rnmapbox/maps" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Mapbox react native module for creating custom maps&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mapbox Maps SDK for React Native&lt;/h1&gt; &#xA;&lt;table style=&#34;border: none; border-width: 0px&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr style=&#34;border: none; border-width: 0px&#34;&gt; &#xA;   &lt;td style=&#34;border: none; border-width: 0px&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/assets/mapbox_logo.png&#34; height=&#34;75&#34;&gt; &lt;/td&gt; &#xA;   &lt;td style=&#34;border: none; border-width: 0px&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/assets/React-icon.svg?sanitize=true&#34; height=&#34;75&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://badge.fury.io/js/%40rnmapbox%2Fmaps&#34;&gt;&lt;img src=&#34;https://badge.fury.io/js/%40rnmapbox%2Fmaps.svg?sanitize=true&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/rnmapbox/maps/actions/workflows/on-push.yml?branch=main&#34;&gt;&lt;img src=&#34;https://github.com/rnmapbox/maps/actions/workflows/on-push.yml/badge.svg?branch=main&#34; alt=&#34;iOS &amp;amp; Android Build&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;em&gt;A community-supported, open-source React Native library for building maps with the &lt;a href=&#34;https://www.mapbox.com/ios-sdk/&#34;&gt;Mapbox Maps SDK for iOS&lt;/a&gt; and &lt;a href=&#34;https://www.mapbox.com/android-sdk/&#34;&gt;Mapbox Maps SDK for Android&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;News &amp;amp; Discussions&lt;/h2&gt; &#xA;&lt;h4&gt;&lt;span style=&#34;color:red&#34;&gt;→&lt;/span&gt; Future of this repo: participate in the &lt;a href=&#34;https://github.com/rnmapbox/maps/discussions/1680&#34;&gt;discussion thread&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;&lt;span style=&#34;color:red&#34;&gt;→&lt;/span&gt; Call for additional maintainers &lt;a href=&#34;https://github.com/rnmapbox/maps/discussions/1551&#34;&gt;discussion thread&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;&lt;span style=&#34;color:red&#34;&gt;→&lt;/span&gt; This README is for the unreleased 10* branch. Please see &lt;a href=&#34;https://github.com/rnmapbox/maps/tree/v8&#34;&gt;v8 branch&lt;/a&gt; for documentation on 8.* releases&lt;/h4&gt; &#xA;&lt;hr&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/assets/intro-examples.png&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/assets/beta-maps-example-point-annotation-960-d280759f6a3d8d75458f399c7a044926.webp&#34; width=&#34;1200&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/assets/beta-maps-guides-migrate-3d-terrain-960-48b1080117817ccfd92e434d0df7546f.webp&#34; width=&#34;1200&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/assets/maps-examples-building-extrusions-960-aaa140cce77da4e8b2dd216032b191b6.webp&#34; width=&#34;1200&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/assets/maps-examples-data-driven-symbols-960-2e2061a6b8127ef305c1b6c159f8dc65.webp&#34; width=&#34;1200&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Supported Implementations&lt;/h3&gt; &#xA;&lt;p&gt;At the moment, the following implementations are supported:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;em&gt;RNMapboxMapsImpl&lt;/em&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;em&gt;Notes&lt;/em&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mapbox&lt;/td&gt; &#xA;   &lt;td&gt;New &lt;a href=&#34;https://www.mapbox.com/mobile-maps-sdk&#34;&gt;Mapbox v10&lt;/a&gt; implementation - recommended&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;maplibre&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/maplibre/maplibre-gl-native&#34;&gt;MapLibre&lt;/a&gt; opensource fork of Mapbox SDKs - will be dropped in next version&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mapbox-gl&lt;/td&gt; &#xA;   &lt;td&gt;Legacy mapbox implementation &lt;a href=&#34;https://docs.mapbox.com/android/legacy/maps/guides/&#34;&gt;iOS&lt;/a&gt; &lt;a href=&#34;https://docs.mapbox.com/ios/legacy/maps/guides/&#34;&gt;Android&lt;/a&gt; - legacy, will be dropped in next version&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;em&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/ios/install.md&#34;&gt;iOS&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/android/install.md&#34;&gt;Android&lt;/a&gt; setup guide for more details on setting &lt;code&gt;RNMapboxMapsImpl&lt;/code&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisite&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;On Android we support from version 6 (API 23) upwards&lt;/li&gt; &#xA; &lt;li&gt;Please &lt;a href=&#34;https://account.mapbox.com/auth/signup/&#34;&gt;Sign Up to Mapbox&lt;/a&gt; to get the Mapbox Access Token.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org&#34;&gt;node&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/&#34;&gt;npm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://facebook.github.io/react-native/&#34;&gt;React Native&lt;/a&gt; (0.60+)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Step 1 - Install Package:&lt;/h3&gt; &#xA;&lt;h4&gt;Using &lt;code&gt;yarn&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Install the latest source from git:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yarn add rnmapbox/maps#main&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using &lt;code&gt;npm&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Install the latest source from git:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install --save rnmapbox/maps#main&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Installing other versions&lt;/h4&gt; &#xA;&lt;p&gt;Replace &lt;code&gt;rnmapbox/maps#main&lt;/code&gt; with the following to install other versions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;@rnmapbox/maps&lt;/code&gt; installs the latest release&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Using &lt;code&gt;expo&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Please follow the &lt;a href=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/plugin/install.md&#34;&gt;Expo Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Step 2 - Installation Guides:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/android/install.md&#34;&gt;Android&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/ios/install.md&#34;&gt;iOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/plugin/install.md&#34;&gt;Expo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/example&#34;&gt;Example&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Getting Started&lt;/h3&gt; &#xA;&lt;p&gt;For more information, check out our &lt;a href=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/docs/GettingStarted.md&#34;&gt;Getting Started&lt;/a&gt; section&lt;/p&gt; &#xA;&lt;h2&gt;Run Project&lt;/h2&gt; &#xA;&lt;p&gt;Before you run your project be sure you have completed the Installation Guides for Android or iOS.&lt;/p&gt; &#xA;&lt;h3&gt;Run iOS Simulator&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Run with yarn&#xA;yarn run ios&#xA;&#xA;# or Run with NPM&#xA;npm run ios&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run Android Emulator&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Run with yarn&#xA;yarn run android&#xA;&#xA;# or Run with NPM&#xA;npm run android&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Adding a map&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import React from &#39;react&#39;;&#xA;import { StyleSheet, View } from &#39;react-native&#39;;&#xA;import MapboxGL from &#39;@rnmapbox/maps&#39;;&#xA;&#xA;MapboxGL.setAccessToken(&#39;&amp;lt;YOUR_ACCESSTOKEN&amp;gt;&#39;);&#xA;&#xA;const App = () =&amp;gt; {&#xA;  return (&#xA;    &amp;lt;View style={styles.page}&amp;gt;&#xA;      &amp;lt;View style={styles.container}&amp;gt;&#xA;        &amp;lt;MapboxGL.MapView style={styles.map} /&amp;gt;&#xA;      &amp;lt;/View&amp;gt;&#xA;    &amp;lt;/View&amp;gt;&#xA;  );&#xA;}&#xA;&#xA;export default App;&#xA;&#xA;const styles = StyleSheet.create({&#xA;  page: {&#xA;    flex: 1,&#xA;    justifyContent: &#39;center&#39;,&#xA;    alignItems: &#39;center&#39;,&#xA;  },&#xA;  container: {&#xA;    height: 300,&#xA;    width: 300,&#xA;  },&#xA;  map: {&#xA;    flex: 1&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;h3&gt;Components&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/docs/MapView.md&#34;&gt;MapView&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/docs/Light.md&#34;&gt;Light&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/docs/StyleSheet.md&#34;&gt;StyleSheet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/docs/PointAnnotation.md&#34;&gt;PointAnnotation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/docs/MarkerView.md&#34;&gt;MarkerView&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/docs/Callout.md&#34;&gt;Callout&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/docs/Camera.md&#34;&gt;Camera&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/docs/UserLocation.md&#34;&gt;UserLocation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/docs/Images.md&#34;&gt;Images&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Sources&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/docs/VectorSource.md&#34;&gt;VectorSource&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/docs/ShapeSource.md&#34;&gt;ShapeSource&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/docs/RasterSource.md&#34;&gt;RasterSource&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/docs/RasterDemSource.md&#34;&gt;RasterDemSource&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Layers&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/docs/BackgroundLayer.md&#34;&gt;BackgroundLayer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/docs/CircleLayer.md&#34;&gt;CircleLayer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/docs/FillExtrusionLayer.md&#34;&gt;FillExtrusionLayer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/docs/FillLayer.md&#34;&gt;FillLayer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/docs/LineLayer.md&#34;&gt;LineLayer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/docs/RasterLayer.md&#34;&gt;RasterLayer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/docs/SymbolLayer.md&#34;&gt;SymbolLayer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/docs/HeatmapLayer.md&#34;&gt;HeatmapLayer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/docs/SkyLayer.md&#34;&gt;SkyLayer&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Terrain&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/docs/Terrain.md&#34;&gt;Terrain&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/docs/Atmosphere.md&#34;&gt;Atmosphere&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Offline&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/docs/OfflineManager.md&#34;&gt;OfflineManager&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/docs/snapshotManager.md&#34;&gt;SnapshotManager&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Misc&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/docs/MapboxGL.md&#34;&gt;MapboxGL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/docs/CustomHttpHeaders.md&#34;&gt;CustomHttpHeaders&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/docs/Logger.md&#34;&gt;Logger&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Expo Support&lt;/h2&gt; &#xA;&lt;p&gt;This package is not available in the &lt;a href=&#34;https://expo.io/client&#34;&gt;Expo Go&lt;/a&gt; app. Learn how you can use it with &lt;a href=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/plugin/install.md&#34;&gt;custom dev clients&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Testing with Jest&lt;/h2&gt; &#xA;&lt;p&gt;This library provides some mocks which are necessary for running tests.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;jest&#34;: {&#xA;  &#34;preset&#34;: &#34;react-native&#34;,&#xA;  &#34;setupFilesAfterEnv&#34;: [&#34;@rnmapbox/maps/setup-jest&#34;],&#xA;  &#34;transformIgnorePatterns&#34;: [&#xA;      &#34;node_modules/(?!(...|@rnmapbox))&#34;&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Help drive this repo forward - be a sponsor. Add a comment &lt;a href=&#34;https://github.com/rnmapbox/maps/discussions/1551&#34;&gt;here&lt;/a&gt; to discuss your sponsorship.&lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt;&#xA;&lt;table style=&#34;border: none; border-width: 0px&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://scouttohunt.com/&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/assets/sponsors/sth.png&#34; alt=&#34;Scout To Hunt&#34; height=&#34;60&#34;&gt; &lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://terrain.dance/&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rnmapbox/maps/main/assets/sponsors/terrain.dance.png&#34; alt=&#34;Terrain Dance LLC&#34; height=&#34;60&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;p&gt;&lt;a href=&#34;https://scouttohunt.com/&#34; target=&#34;_blank&#34;&gt;Scout To Hunt&lt;/a&gt;&lt;/p&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://terrain.dance/&#34; target=&#34;_blank&#34;&gt;Terrain Dance&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Developer Group&lt;/h2&gt; &#xA;&lt;p&gt;Have a question or need some help? Join our &lt;a href=&#34;https://gitter.im/rnmapbox/Lobby&#34;&gt;Gitter developer group&lt;/a&gt;!&lt;/p&gt;</summary>
  </entry>
</feed>