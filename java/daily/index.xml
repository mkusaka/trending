<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-21T01:38:24Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>NationalSecurityAgency/ghidra</title>
    <updated>2022-09-21T01:38:24Z</updated>
    <id>tag:github.com,2022-09-21:/NationalSecurityAgency/ghidra</id>
    <link href="https://github.com/NationalSecurityAgency/ghidra" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ghidra is a software reverse engineering (SRE) framework&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/NationalSecurityAgency/ghidra/master/Ghidra/Features/Base/src/main/resources/images/GHIDRA_3.png&#34; width=&#34;400&#34;&gt; &#xA;&lt;h1&gt;Ghidra Software Reverse Engineering Framework&lt;/h1&gt; &#xA;&lt;p&gt;Ghidra is a software reverse engineering (SRE) framework created and maintained by the &lt;a href=&#34;https://www.nsa.gov&#34;&gt;National Security Agency&lt;/a&gt; Research Directorate. This framework includes a suite of full-featured, high-end software analysis tools that enable users to analyze compiled code on a variety of platforms including Windows, macOS, and Linux. Capabilities include disassembly, assembly, decompilation, graphing, and scripting, along with hundreds of other features. Ghidra supports a wide variety of processor instruction sets and executable formats and can be run in both user-interactive and automated modes. Users may also develop their own Ghidra extension components and/or scripts using Java or Python.&lt;/p&gt; &#xA;&lt;p&gt;In support of NSA&#39;s Cybersecurity mission, Ghidra was built to solve scaling and teaming problems on complex SRE efforts, and to provide a customizable and extensible SRE research platform. NSA has applied Ghidra SRE capabilities to a variety of problems that involve analyzing malicious code and generating deep insights for SRE analysts who seek a better understanding of potential vulnerabilities in networks and systems.&lt;/p&gt; &#xA;&lt;p&gt;If you are a U.S. citizen interested in projects like this, to develop Ghidra and other cybersecurity tools for NSA to help protect our nation and its allies, consider applying for a &lt;a href=&#34;https://www.intelligencecareers.gov/nsa&#34;&gt;career with us&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Security Warning&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING:&lt;/strong&gt; There are known security vulnerabilities within certain versions of Ghidra. Before proceeding, please read through Ghidra&#39;s &lt;a href=&#34;https://github.com/NationalSecurityAgency/ghidra/security/advisories&#34;&gt;Security Advisories&lt;/a&gt; for a better understanding of how you might be impacted.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;To install an official pre-built multi-platform Ghidra release:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://adoptium.net/temurin/releases&#34;&gt;JDK 17 64-bit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Download a Ghidra &lt;a href=&#34;https://github.com/NationalSecurityAgency/ghidra/releases&#34;&gt;release file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Extract the Ghidra release file&lt;/li&gt; &#xA; &lt;li&gt;Launch Ghidra: &lt;code&gt;./ghidraRun&lt;/code&gt; (or &lt;code&gt;ghidraRun.bat&lt;/code&gt; for Windows)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For additional information and troubleshooting tips about installing and running a Ghidra release, please refer to &lt;code&gt;docs/InstallationGuide.html&lt;/code&gt; which can be found in your extracted Ghidra release directory.&lt;/p&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;To create the latest development build for your platform from this source repository:&lt;/p&gt; &#xA;&lt;h5&gt;Install build tools:&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://adoptium.net/temurin/releases&#34;&gt;JDK 17 64-bit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gradle.org/releases/&#34;&gt;Gradle 7.3+&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;make, gcc, and g++ (Linux/macOS-only)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://visualstudio.microsoft.com/vs/community/&#34;&gt;Microsoft Visual Studio&lt;/a&gt; (Windows-only)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Download and extract the source:&lt;/h5&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/NationalSecurityAgency/ghidra/archive/refs/heads/master.zip&#34;&gt;Download from GitHub&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ unzip ghidra-master&#xA;$ cd ghidra-master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Instead of downloading the compressed source, you may instead want to clone the GitHub repository: &lt;code&gt;git clone https://github.com/NationalSecurityAgency/ghidra.git&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Download additional build dependencies into source repository:&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gradle -I gradle/support/fetchDependencies.gradle init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Create development build:&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gradle buildGhidra&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The compressed development build will be located at &lt;code&gt;build/dist/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more detailed information on building Ghidra, please read the &lt;a href=&#34;https://raw.githubusercontent.com/NationalSecurityAgency/ghidra/master/DevGuide.md&#34;&gt;Developer Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Develop&lt;/h2&gt; &#xA;&lt;h3&gt;User Scripts and Extensions&lt;/h3&gt; &#xA;&lt;p&gt;Ghidra installations support users writing custom scripts and extensions via the &lt;em&gt;GhidraDev&lt;/em&gt; plugin for Eclipse. The plugin and its corresponding instructions can be found within a Ghidra release at &lt;code&gt;Extensions/Eclipse/GhidraDev/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Advanced Development&lt;/h3&gt; &#xA;&lt;p&gt;To develop the Ghidra tool itself, it is highly recommended to use Eclipse, which the Ghidra development process has been highly customized for.&lt;/p&gt; &#xA;&lt;h5&gt;Install build and development tools:&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Follow the above &lt;a href=&#34;https://raw.githubusercontent.com/NationalSecurityAgency/ghidra/master/#build&#34;&gt;build instructions&lt;/a&gt; so the build completes without errors&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://www.eclipse.org/downloads/packages/&#34;&gt;Eclipse IDE for Java Developers&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Prepare the development environment:&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gradle prepdev eclipse buildNatives&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Import Ghidra projects into Eclipse:&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;File&lt;/em&gt; -&amp;gt; &lt;em&gt;Import...&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;General&lt;/em&gt; | &lt;em&gt;Existing Projects into Workspace&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Select root directory to be your downloaded or cloned ghidra source repository&lt;/li&gt; &#xA; &lt;li&gt;Check &lt;em&gt;Search for nested projects&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Click &lt;em&gt;Finish&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When Eclipse finishes building the projects, Ghidra can be launched and debugged with the provided &lt;strong&gt;Ghidra&lt;/strong&gt; Eclipse &lt;em&gt;run configuration&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more detailed information on developing Ghidra, please read the &lt;a href=&#34;https://raw.githubusercontent.com/NationalSecurityAgency/ghidra/master/DevGuide.md&#34;&gt;Developer Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to contribute bug fixes, improvements, and new features back to Ghidra, please take a look at our &lt;a href=&#34;https://raw.githubusercontent.com/NationalSecurityAgency/ghidra/master/CONTRIBUTING.md&#34;&gt;Contributor Guide&lt;/a&gt; to see how you can participate in this open source project.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lukas-krecan/ShedLock</title>
    <updated>2022-09-21T01:38:24Z</updated>
    <id>tag:github.com,2022-09-21:/lukas-krecan/ShedLock</id>
    <link href="https://github.com/lukas-krecan/ShedLock" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Distributed lock for your scheduled tasks&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ShedLock&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-ASF2-blue.svg?sanitize=true&#34; alt=&#34;Apache License 2&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/lukas-krecan/ShedLock/actions&#34;&gt;&lt;img src=&#34;https://github.com/lukas-krecan/ShedLock/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/net.javacrumbs.shedlock/shedlock-parent&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/net.javacrumbs.shedlock/shedlock-parent/badge.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;ShedLock makes sure that your scheduled tasks are executed at most once at the same time. If a task is being executed on one node, it acquires a lock which prevents execution of the same task from another node (or thread). Please note, that &lt;strong&gt;if one task is already being executed on one node, execution on other nodes does not wait, it is simply skipped&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;ShedLock uses an external store like Mongo, JDBC database, Redis, Hazelcast, ZooKeeper or others for coordination.&lt;/p&gt; &#xA;&lt;p&gt;Feedback and pull-requests welcome!&lt;/p&gt; &#xA;&lt;h4&gt;ShedLock is not a distributed scheduler&lt;/h4&gt; &#xA;&lt;p&gt;Please note that ShedLock is not and will never be full-fledged scheduler, it&#39;s just a lock. If you need a distributed scheduler, please use another project (&lt;a href=&#34;https://github.com/kagkarlsson/db-scheduler&#34;&gt;db-scheduler&lt;/a&gt;, &lt;a href=&#34;https://www.jobrunr.io/en/&#34;&gt;JobRunr&lt;/a&gt;). ShedLock is designed to be used in situations where you have scheduled tasks that are not ready to be executed in parallel, but can be safely executed repeatedly. Moreover, the locks are time-based and ShedLock assumes that clocks on the nodes are synchronized.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lukas-krecan/ShedLock/master/#components&#34;&gt;Components&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lukas-krecan/ShedLock/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lukas-krecan/ShedLock/master/#configure-lockprovider&#34;&gt;Lock Providers&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lukas-krecan/ShedLock/master/#jdbctemplate&#34;&gt;JdbcTemplate&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lukas-krecan/ShedLock/master/#r2dbc&#34;&gt;R2DBC&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lukas-krecan/ShedLock/master/#micronaut-data-jdbc&#34;&gt;Micronaut Data Jdbc&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lukas-krecan/ShedLock/master/#mongo&#34;&gt;Mongo&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lukas-krecan/ShedLock/master/#dynamodb&#34;&gt;DynamoDB&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lukas-krecan/ShedLock/master/#dynamodb-2&#34;&gt;DynamoDB 2&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lukas-krecan/ShedLock/master/#zookeeper-using-curator&#34;&gt;ZooKeeper (using Curator)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lukas-krecan/ShedLock/master/#redis-using-spring-redisconnectionfactory&#34;&gt;Redis (using Spring RedisConnectionFactory)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lukas-krecan/ShedLock/master/#redis-using-spring-reactiveredisconnectionfactory&#34;&gt;Redis (using Spring ReactiveRedisConnectionFactory)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lukas-krecan/ShedLock/master/#redis-using-jedis&#34;&gt;Redis (using Jedis)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lukas-krecan/ShedLock/master/#hazelcast&#34;&gt;Hazelcast&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lukas-krecan/ShedLock/master/#couchbase&#34;&gt;Couchbase&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lukas-krecan/ShedLock/master/#elasticsearch&#34;&gt;ElasticSearch&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lukas-krecan/ShedLock/master/#opensearch&#34;&gt;OpenSearch&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lukas-krecan/ShedLock/master/#cosmosdb&#34;&gt;CosmosDB&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lukas-krecan/ShedLock/master/#cassandra&#34;&gt;Cassandra&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lukas-krecan/ShedLock/master/#consul&#34;&gt;Consul&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lukas-krecan/ShedLock/master/#arangodb&#34;&gt;ArangoDB&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lukas-krecan/ShedLock/master/#neo4j&#34;&gt;Neo4j&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lukas-krecan/ShedLock/master/#etcd&#34;&gt;Etcd&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lukas-krecan/ShedLock/master/#apache-ignite&#34;&gt;Apache Ignite&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lukas-krecan/ShedLock/master/#Multi-tenancy&#34;&gt;Multi-tenancy&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lukas-krecan/ShedLock/master/#In-Memory&#34;&gt;In-Memory&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lukas-krecan/ShedLock/master/#Memcached&#34;&gt;Memcached&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lukas-krecan/ShedLock/master/#duration-specification&#34;&gt;Duration specification&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lukas-krecan/ShedLock/master/#extending-the-lock&#34;&gt;Extending the lock&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lukas-krecan/ShedLock/master/#micronaut-integration&#34;&gt;Micronaut integration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lukas-krecan/ShedLock/master/#locking-without-a-framework&#34;&gt;Locking without a framework&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lukas-krecan/ShedLock/master/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lukas-krecan/ShedLock/master/#modes-of-spring-integration&#34;&gt;Modes of Spring integration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lukas-krecan/ShedLock/master/#scheduled-method-proxy&#34;&gt;Scheduled method proxy&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lukas-krecan/ShedLock/master/#taskscheduler-proxy&#34;&gt;TaskScheduler proxy&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lukas-krecan/ShedLock/master/#release-notes&#34;&gt;Release notes&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Components&lt;/h2&gt; &#xA;&lt;p&gt;Shedlock consists of three parts&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Core - The locking mechanism&lt;/li&gt; &#xA; &lt;li&gt;Integration - integration with your application, using Spring AOP, Micronaut AOP or manual code&lt;/li&gt; &#xA; &lt;li&gt;Lock provider - provides the lock using an external process like SQL database, Mongo, Redis and others&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To use ShedLock, you do the following&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Enable and configure Scheduled locking&lt;/li&gt; &#xA; &lt;li&gt;Annotate your scheduled tasks&lt;/li&gt; &#xA; &lt;li&gt;Configure a Lock Provider&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Enable and configure Scheduled locking (Spring)&lt;/h3&gt; &#xA;&lt;p&gt;First of all, we have to import the project&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;net.javacrumbs.shedlock&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;shedlock-spring&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;4.42.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we need to integrate the library with Spring. In order to enable schedule locking use &lt;code&gt;@EnableSchedulerLock&lt;/code&gt; annotation&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Configuration&#xA;@EnableScheduling&#xA;@EnableSchedulerLock(defaultLockAtMostFor = &#34;10m&#34;)&#xA;class MySpringConfiguration {&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Annotate your scheduled tasks&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import net.javacrumbs.shedlock.spring.annotation.SchedulerLock;&#xA;&#xA;...&#xA;&#xA;@Scheduled(...)&#xA;@SchedulerLock(name = &#34;scheduledTaskName&#34;)&#xA;public void scheduledTask() {&#xA;    // To assert that the lock is held (prevents misconfiguration errors)&#xA;    LockAssert.assertLocked();&#xA;    // do something&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;@SchedulerLock&lt;/code&gt; annotation has several purposes. First of all, only annotated methods are locked, the library ignores all other scheduled tasks. You also have to specify the name for the lock. Only one task with the same name can be executed at the same time.&lt;/p&gt; &#xA;&lt;p&gt;You can also set &lt;code&gt;lockAtMostFor&lt;/code&gt; attribute which specifies how long the lock should be kept in case the executing node dies. This is just a fallback, under normal circumstances the lock is released as soon the tasks finishes. &lt;strong&gt;You have to set &lt;code&gt;lockAtMostFor&lt;/code&gt; to a value which is much longer than normal execution time.&lt;/strong&gt; If the task takes longer than &lt;code&gt;lockAtMostFor&lt;/code&gt; the resulting behavior may be unpredictable (more than one process will effectively hold the lock).&lt;/p&gt; &#xA;&lt;p&gt;If you do not specify &lt;code&gt;lockAtMostFor&lt;/code&gt; in &lt;code&gt;@SchedulerLock&lt;/code&gt; default value from &lt;code&gt;@EnableSchedulerLock&lt;/code&gt; will be used.&lt;/p&gt; &#xA;&lt;p&gt;Lastly, you can set &lt;code&gt;lockAtLeastFor&lt;/code&gt; attribute which specifies minimum amount of time for which the lock should be kept. Its main purpose is to prevent execution from multiple nodes in case of really short tasks and clock difference between the nodes.&lt;/p&gt; &#xA;&lt;p&gt;All the annotations support Spring Expression Language (SpEL).&lt;/p&gt; &#xA;&lt;h4&gt;Example&lt;/h4&gt; &#xA;&lt;p&gt;Let&#39;s say you have a task which you execute every 15 minutes and which usually takes few minutes to run. Moreover, you want to execute it at most once per 15 minutes. In that case, you can configure it like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import net.javacrumbs.shedlock.core.SchedulerLock;&#xA;&#xA;&#xA;@Scheduled(cron = &#34;0 */15 * * * *&#34;)&#xA;@SchedulerLock(name = &#34;scheduledTaskName&#34;, lockAtMostFor = &#34;14m&#34;, lockAtLeastFor = &#34;14m&#34;)&#xA;public void scheduledTask() {&#xA;    // do something&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By setting &lt;code&gt;lockAtMostFor&lt;/code&gt; we make sure that the lock is released even if the node dies and by setting &lt;code&gt;lockAtLeastFor&lt;/code&gt; we make sure it&#39;s not executed more than once in fifteen minutes. Please note that &lt;strong&gt;&lt;code&gt;lockAtMostFor&lt;/code&gt; is just a safety net in case that the node executing the task dies, so set it to a time that is significantly larger than maximum estimated execution time.&lt;/strong&gt; If the task takes longer than &lt;code&gt;lockAtMostFor&lt;/code&gt;, it may be executed again and the results will be unpredictable (more processes will hold the lock).&lt;/p&gt; &#xA;&lt;h3&gt;Configure LockProvider&lt;/h3&gt; &#xA;&lt;p&gt;There are several implementations of LockProvider.&lt;/p&gt; &#xA;&lt;h4&gt;JdbcTemplate&lt;/h4&gt; &#xA;&lt;p&gt;First, create lock table (&lt;strong&gt;please note that &lt;code&gt;name&lt;/code&gt; has to be primary key&lt;/strong&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;# MySQL, MariaDB&#xA;CREATE TABLE shedlock(name VARCHAR(64) NOT NULL, lock_until TIMESTAMP(3) NOT NULL,&#xA;    locked_at TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP(3), locked_by VARCHAR(255) NOT NULL, PRIMARY KEY (name));&#xA;&#xA;# Postgres&#xA;CREATE TABLE shedlock(name VARCHAR(64) NOT NULL, lock_until TIMESTAMP NOT NULL,&#xA;    locked_at TIMESTAMP NOT NULL, locked_by VARCHAR(255) NOT NULL, PRIMARY KEY (name));&#xA;&#xA;# Oracle&#xA;CREATE TABLE shedlock(name VARCHAR(64) NOT NULL, lock_until TIMESTAMP(3) NOT NULL,&#xA;    locked_at TIMESTAMP(3) NOT NULL, locked_by VARCHAR(255) NOT NULL, PRIMARY KEY (name));&#xA;&#xA;# MS SQL&#xA;CREATE TABLE shedlock(name VARCHAR(64) NOT NULL, lock_until datetime2 NOT NULL,&#xA;    locked_at datetime2 NOT NULL, locked_by VARCHAR(255) NOT NULL, PRIMARY KEY (name));&#xA;&#xA;# DB2&#xA;CREATE TABLE shedlock(name VARCHAR(64) NOT NULL PRIMARY KEY, lock_until TIMESTAMP NOT NULL,&#xA;    locked_at TIMESTAMP NOT NULL, locked_by VARCHAR(255) NOT NULL);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use &lt;a href=&#34;https://raw.githubusercontent.com/lukas-krecan/ShedLock/master/micronaut/test/micronaut-jdbc/src/main/resources/db/liquibase-changelog.xml&#34;&gt;this&lt;/a&gt; liquibase change-set.&lt;/p&gt; &#xA;&lt;p&gt;Add dependency&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;net.javacrumbs.shedlock&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;shedlock-provider-jdbc-template&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;4.42.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import net.javacrumbs.shedlock.provider.jdbctemplate.JdbcTemplateLockProvider;&#xA;&#xA;...&#xA;@Bean&#xA;public LockProvider lockProvider(DataSource dataSource) {&#xA;            return new JdbcTemplateLockProvider(&#xA;                JdbcTemplateLockProvider.Configuration.builder()&#xA;                .withJdbcTemplate(new JdbcTemplate(dataSource))&#xA;                .usingDbTime() // Works on Postgres, MySQL, MariaDb, MS SQL, Oracle, DB2, HSQL and H2&#xA;                .build()&#xA;            );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By specifying &lt;code&gt;usingDbTime()&lt;/code&gt; the lock provider will use UTC time based on the DB server clock. If you do not specify this option, clock from the app server will be used (the clocks on app servers may not be synchronized thus leading to various locking issues).&lt;/p&gt; &#xA;&lt;p&gt;For more fine-grained configuration use other options of the &lt;code&gt;Configuration&lt;/code&gt; object&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;new JdbcTemplateLockProvider(builder()&#xA;    .withTableName(&#34;shdlck&#34;)&#xA;    .withColumnNames(new ColumnNames(&#34;n&#34;, &#34;lck_untl&#34;, &#34;lckd_at&#34;, &#34;lckd_by&#34;))&#xA;    .withJdbcTemplate(new JdbcTemplate(getDatasource()))&#xA;    .withLockedByValue(&#34;my-value&#34;)&#xA;    .build())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to specify a schema, you can set it in the table name using the usual dot notation &lt;code&gt;new JdbcTemplateLockProvider(datasource, &#34;my_schema.shedlock&#34;)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Warning&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Do not manually delete lock row from the DB table.&lt;/strong&gt; ShedLock has an in-memory cache of existing lock rows so the row will NOT be automatically recreated until application restart. If you need to, you can edit the row/document, risking only that multiple locks will be held.&lt;/p&gt; &#xA;&lt;h4&gt;R2DBC&lt;/h4&gt; &#xA;&lt;p&gt;If you are really brave, you can try experimental R2DBC support. Please keep in mind that the capabilities of this lock provider are really limited and that the whole ecosystem around R2DBC is in flux and may easily break.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;net.javacrumbs.shedlock&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;shedlock-provider-r2dbc&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;4.42.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and use it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Override&#xA;protected LockProvider getLockProvider() {&#xA;    return new R2dbcLockProvider(connectionFactory);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;I recommend using &lt;a href=&#34;https://github.com/r2dbc/r2dbc-pool&#34;&gt;R2DBC connection pool&lt;/a&gt;, unless you are connecting to Oracle that does not work with the pool.&lt;/p&gt; &#xA;&lt;h4&gt;Micronaut Data Jdbc&lt;/h4&gt; &#xA;&lt;p&gt;If you are using Micronaut data and you do not want to add dependency on Spring JDBC, you can use Micronaut JDBC support. Just be aware that it has just a basic functionality when compared to the JdbcTemplate provider.&lt;/p&gt; &#xA;&lt;p&gt;First, create lock table as described in the &lt;a href=&#34;https://raw.githubusercontent.com/lukas-krecan/ShedLock/master/#jdbctemplate&#34;&gt;JdbcTemplate&lt;/a&gt; section above.&lt;/p&gt; &#xA;&lt;p&gt;Add dependency&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;net.javacrumbs.shedlock&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;shedlock-provider-jdbc-micronaut&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;4.42.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import net.javacrumbs.shedlock.provider.jdbc.micronaut.MicronautJdbcLockProvider;&#xA;&#xA;...&#xA;@Singleton&#xA;public LockProvider lockProvider(TransactionOperations&amp;lt;Connection&amp;gt; transactionManager) {&#xA;    return new MicronautJdbcLockProvider(transactionManager);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Mongo&lt;/h4&gt; &#xA;&lt;p&gt;Import the project&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;net.javacrumbs.shedlock&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;shedlock-provider-mongo&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;4.42.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import net.javacrumbs.shedlock.provider.mongo.MongoLockProvider;&#xA;&#xA;...&#xA;&#xA;@Bean&#xA;public LockProvider lockProvider(MongoClient mongo) {&#xA;    return new MongoLockProvider(mongo.getDatabase(databaseName))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that MongoDB integration requires Mongo &amp;gt;= 2.4 and mongo-java-driver &amp;gt;= 3.7.0&lt;/p&gt; &#xA;&lt;h4&gt;Reactive Mongo&lt;/h4&gt; &#xA;&lt;p&gt;Import the project&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;net.javacrumbs.shedlock&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;shedlock-provider-mongo-reactivestreams&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;4.42.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import net.javacrumbs.shedlock.provider.mongo.reactivestreams.ReactiveStreamsMongoLockProvider;&#xA;&#xA;...&#xA;&#xA;@Bean&#xA;public LockProvider lockProvider(MongoClient mongo) {&#xA;    return new ReactiveStreamsMongoLockProvider(mongo.getDatabase(databaseName))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that MongoDB integration requires Mongo &amp;gt;= 4.x and mongodb-driver-reactivestreams 1.x&lt;/p&gt; &#xA;&lt;h4&gt;DynamoDB&lt;/h4&gt; &#xA;&lt;p&gt;This depends on AWS SDK v1.&lt;/p&gt; &#xA;&lt;p&gt;Import the project&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;net.javacrumbs.shedlock&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;shedlock-provider-dynamodb&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;4.42.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import net.javacrumbs.shedlock.provider.dynamodb.DynamoDBLockProvider;&#xA;&#xA;...&#xA;&#xA;@Bean&#xA;public LockProvider lockProvider(com.amazonaws.services.dynamodbv2.document.DynamoDB dynamoDB) {&#xA;    return new DynamoDBLockProvider(dynamoDB.getTable(&#34;Shedlock&#34;));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Please note that the lock table must be created externally with &lt;code&gt;_id&lt;/code&gt; as a partition key. &lt;code&gt;DynamoDBUtils#createLockTable&lt;/code&gt; may be used for creating it programmatically. A table definition is available from &lt;code&gt;DynamoDBLockProvider&lt;/code&gt;&#39;s Javadoc.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;DynamoDB 2&lt;/h4&gt; &#xA;&lt;p&gt;This depends on AWS SDK v2.&lt;/p&gt; &#xA;&lt;p&gt;Import the project&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;net.javacrumbs.shedlock&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;shedlock-provider-dynamodb2&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;4.42.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import net.javacrumbs.shedlock.provider.dynamodb2.DynamoDBLockProvider;&#xA;&#xA;...&#xA;&#xA;@Bean&#xA;public LockProvider lockProvider(software.amazon.awssdk.services.dynamodb.DynamoDbClient dynamoDB) {&#xA;    return new DynamoDBLockProvider(dynamoDB, &#34;Shedlock&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Please note that the lock table must be created externally with &lt;code&gt;_id&lt;/code&gt; as a partition key. &lt;code&gt;DynamoDBUtils#createLockTable&lt;/code&gt; may be used for creating it programmatically. A table definition is available from &lt;code&gt;DynamoDBLockProvider&lt;/code&gt;&#39;s Javadoc.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;ZooKeeper (using Curator)&lt;/h4&gt; &#xA;&lt;p&gt;Import&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;net.javacrumbs.shedlock&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;shedlock-provider-zookeeper-curator&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;4.42.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and configure&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import net.javacrumbs.shedlock.provider.zookeeper.curator.ZookeeperCuratorLockProvider;&#xA;&#xA;...&#xA;&#xA;@Bean&#xA;public LockProvider lockProvider(org.apache.curator.framework.CuratorFramework client) {&#xA;    return new ZookeeperCuratorLockProvider(client);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, nodes for locks will be created under &lt;code&gt;/shedlock&lt;/code&gt; node.&lt;/p&gt; &#xA;&lt;h4&gt;Redis (using Spring RedisConnectionFactory)&lt;/h4&gt; &#xA;&lt;p&gt;Import&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;net.javacrumbs.shedlock&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;shedlock-provider-redis-spring&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;4.42.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and configure&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import net.javacrumbs.shedlock.provider.redis.spring.RedisLockProvider;&#xA;import org.springframework.data.redis.connection.RedisConnectionFactory;&#xA;&#xA;...&#xA;&#xA;@Bean&#xA;public LockProvider lockProvider(RedisConnectionFactory connectionFactory) {&#xA;    return new RedisLockProvider(connectionFactory, ENV);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Redis (using Spring ReactiveRedisConnectionFactory)&lt;/h4&gt; &#xA;&lt;p&gt;Import&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;net.javacrumbs.shedlock&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;shedlock-provider-redis-spring&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;4.42.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and configure&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import net.javacrumbs.shedlock.provider.redis.spring.ReactiveRedisLockProvider;&#xA;import org.springframework.data.redis.connection.ReactiveRedisConnectionFactory;&#xA;&#xA;...&#xA;&#xA;@Bean&#xA;public LockProvider lockProvider(ReactiveRedisConnectionFactory connectionFactory) {&#xA;    return new ReactiveRedisLockProvider.Builder(connectionFactory)&#xA;        .environment(ENV)&#xA;        .build();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Redis lock provider uses classical lock mechanism as described &lt;a href=&#34;https://redis.io/commands/setnx#design-pattern-locking-with-codesetnxcode&#34;&gt;here&lt;/a&gt; which may not be reliable in case of Redis master failure.&lt;/p&gt; &#xA;&lt;p&gt;If you are still using Spring Data Redis 1, import special lock provider &lt;code&gt;shedlock-provider-redis-spring-1&lt;/code&gt; which works around issue #105 or upgrade to Spring Data Redis 2 or higher.&lt;/p&gt; &#xA;&lt;h4&gt;Redis (using Jedis)&lt;/h4&gt; &#xA;&lt;p&gt;Import&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;net.javacrumbs.shedlock&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;!-- Jedis &amp;lt; 4 --&amp;gt;&#xA;    &amp;lt;!-- &amp;lt;artifactId&amp;gt;shedlock-provider-redis-jedis&amp;lt;/artifactId&amp;gt; --&amp;gt;&#xA;    &amp;lt;!-- For Jedis &amp;gt;= 4 --&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;shedlock-provider-redis-jedis4&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;4.42.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and configure&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import net.javacrumbs.shedlock.provider.redis.jedis.JedisLockProvider;&#xA;&#xA;...&#xA;&#xA;@Bean&#xA;public LockProvider lockProvider(JedisPool jedisPool) {&#xA;    return new JedisLockProvider(jedisPool, ENV);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Hazelcast&lt;/h4&gt; &#xA;&lt;p&gt;Import the project&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;net.javacrumbs.shedlock&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;!-- Hazelcast &amp;lt; 4 support is dropped --&amp;gt;&#xA;    &amp;lt;!-- Hazelcast &amp;gt;= 4 --&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;shedlock-provider-hazelcast4&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;4.42.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import net.javacrumbs.shedlock.provider.hazelcast4.HazelcastLockProvider;&#xA;&#xA;...&#xA;&#xA;@Bean&#xA;public HazelcastLockProvider lockProvider(HazelcastInstance hazelcastInstance) {&#xA;    return new HazelcastLockProvider(hazelcastInstance);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Couchbase&lt;/h4&gt; &#xA;&lt;p&gt;Import the project&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;net.javacrumbs.shedlock&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;!-- Couchbase &amp;lt; 3 --&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;shedlock-provider-couchbase-javaclient&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;!-- Couchbase &amp;gt;= 3 --&amp;gt;&#xA;    &amp;lt;!-- &amp;lt;artifactId&amp;gt;shedlock-provider-couchbase-javaclient3&amp;lt;/artifactId&amp;gt; --&amp;gt;&#xA;    &amp;lt;version&amp;gt;4.42.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import net.javacrumbs.shedlock.provider.couchbase.javaclient.CouchbaseLockProvider;&#xA;&#xA;...&#xA;&#xA;@Bean&#xA;public CouchbaseLockProvider lockProvider(Bucket bucket) {&#xA;    return new CouchbaseLockProvider(bucket);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Couchbase 3 use &lt;code&gt;shedlock-provider-couchbase-javaclient3&lt;/code&gt; module and &lt;code&gt;net.javacrumbs.shedlock.provider.couchbase3&lt;/code&gt; package.&lt;/p&gt; &#xA;&lt;h4&gt;Elasticsearch&lt;/h4&gt; &#xA;&lt;p&gt;I am really not sure it&#39;s a good idea to use Elasticsearch as a lock provider. But if you have no other choice, you can. Import the project&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;net.javacrumbs.shedlock&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;shedlock-provider-elasticsearch8&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;4.42.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import static net.javacrumbs.shedlock.provider.elasticsearch8.ElasticsearchLockProvider;&#xA;&#xA;...&#xA;&#xA;@Bean&#xA;public ElasticsearchLockProvider lockProvider(ElasticsearchClient client) {&#xA;    return new ElasticsearchLockProvider(client);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;OpenSearch&lt;/h4&gt; &#xA;&lt;p&gt;Import the project&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;net.javacrumbs.shedlock&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;shedlock-provider-opensearch&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;4.36.1&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import static net.javacrumbs.shedlock.provider.opensearch.OpenSearchLockProvider;&#xA;&#xA;...&#xA;&#xA;@Bean&#xA;public OpenSearchLockProvider lockProvider(RestHighLevelClient highLevelClient) {&#xA;    return new OpenSearchLockProvider(highLevelClient);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;CosmosDB&lt;/h4&gt; &#xA;&lt;p&gt;CosmosDB support is provided by a third-party module available &lt;a href=&#34;https://github.com/jesty/shedlock-provider-cosmosdb&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Cassandra&lt;/h4&gt; &#xA;&lt;p&gt;Import the project&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;net.javacrumbs.shedlock&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;shedlock-provider-cassandra&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;4.42.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import net.javacrumbs.shedlock.provider.cassandra.CassandraLockProvider;&#xA;&#xA;...&#xA;&#xA;@Bean&#xA;public CassandraLockProvider lockProvider(CqlSession cqlSession) {&#xA;    return new CassandraLockProvider(Configuration.builder().withCqlSession(session));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example for creating default keyspace and table in local Cassandra instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE KEYSPACE shedlock with replication={&#39;class&#39;:&#39;SimpleStrategy&#39;, &#39;replication_factor&#39;:1} and durable_writes=true;&#xA;CREATE TABLE shedlock.lock (name text PRIMARY KEY, lockUntil timestamp, lockedAt timestamp, lockedBy text);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please, note that CassandraLockProvider uses Cassandra driver v4, which is part of Spring Boot since 2.3.&lt;/p&gt; &#xA;&lt;h4&gt;Consul&lt;/h4&gt; &#xA;&lt;p&gt;ConsulLockProvider has one limitation: lockAtMostFor setting will have a minimum value of 10 seconds. It is dictated by consul&#39;s session limitations.&lt;/p&gt; &#xA;&lt;p&gt;Import the project&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;net.javacrumbs.shedlock&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;shedlock-provider-consul&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;4.42.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import net.javacrumbs.shedlock.provider.consul.ConsulLockProvider;&#xA;&#xA;...&#xA;&#xA;@Bean // for micronaut please define preDestroy property @Bean(preDestroy=&#34;close&#34;)&#xA;public ConsulLockProvider lockProvider(com.ecwid.consul.v1.ConsulClient consulClient) {&#xA;    return new ConsulLockProvider(consulClient);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please, note that Consul lock provider uses &lt;a href=&#34;https://github.com/Ecwid/consul-api&#34;&gt;ecwid consul-api client&lt;/a&gt;, which is part of spring cloud consul integration (the &lt;code&gt;spring-cloud-starter-consul-discovery&lt;/code&gt; package).&lt;/p&gt; &#xA;&lt;h4&gt;ArangoDB&lt;/h4&gt; &#xA;&lt;p&gt;Import the project&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;net.javacrumbs.shedlock&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;shedlock-provider-arangodb&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;4.42.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import net.javacrumbs.shedlock.provider.arangodb.ArangoLockProvider;&#xA;&#xA;...&#xA;&#xA;@Bean&#xA;public ArangoLockProvider lockProvider(final ArangoOperations arangoTemplate) {&#xA;    return new ArangoLockProvider(arangoTemplate.driver().db(DB_NAME));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please, note that ArangoDB lock provider uses ArangoDB driver v6.7, which is part of &lt;a href=&#34;https://github.com/arangodb/spring-data&#34;&gt;arango-spring-data&lt;/a&gt; in version 3.3.0.&lt;/p&gt; &#xA;&lt;h4&gt;Neo4j&lt;/h4&gt; &#xA;&lt;p&gt;Import the project&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;net.javacrumbs.shedlock&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;shedlock-provider-neo4j&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;4.42.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import net.javacrumbs.shedlock.core.LockConfiguration;&#xA;&#xA;...&#xA;&#xA;@Bean&#xA;Neo4jLockProvider lockProvider(org.neo4j.driver.Driver driver) {&#xA;    return new Neo4jLockProvider(driver);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please make sure that &lt;code&gt;neo4j-java-driver&lt;/code&gt; version used by &lt;code&gt;shedlock-provider-neo4j&lt;/code&gt; matches the driver version used in your project (if you use &lt;code&gt;spring-boot-starter-data-neo4j&lt;/code&gt;, it is probably provided transitively).&lt;/p&gt; &#xA;&lt;h4&gt;Etcd&lt;/h4&gt; &#xA;&lt;p&gt;Import the project&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;net.javacrumbs.shedlock&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;shedlock-provider-etcd-jetcd&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;4.42.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import net.javacrumbs.shedlock.provider.etcd.jetcd.EtcdLockProvider;&#xA;&#xA;...&#xA;&#xA;@Bean&#xA;public LockProvider lockProvider(Client client) {&#xA;    return new EtcdLockProvider(client);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Apache Ignite&lt;/h4&gt; &#xA;&lt;p&gt;Import the project&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;net.javacrumbs.shedlock&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;shedlock-provider-ignite&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;4.42.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import net.javacrumbs.shedlock.provider.ignite.IgniteLockProvider;&#xA;&#xA;...&#xA;&#xA;@Bean&#xA;public LockProvider lockProvider(Ignite ignite) {&#xA;    return new IgniteLockProvider(ignite);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Multi-tenancy&lt;/h4&gt; &#xA;&lt;p&gt;If you have multi-tenancy use-case you can use a lock provider similar to this one (see the full &lt;a href=&#34;https://github.com/lukas-krecan/ShedLock/raw/master/providers/jdbc/shedlock-provider-jdbc-template/src/test/java/net/javacrumbs/shedlock/provider/jdbctemplate/MultiTenancyLockProviderIntegrationTest.java#L87&#34;&gt;example&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private static abstract class MultiTenancyLockProvider implements LockProvider {&#xA;    private final ConcurrentHashMap&amp;lt;String, LockProvider&amp;gt; providers = new ConcurrentHashMap&amp;lt;&amp;gt;();&#xA;&#xA;    @Override&#xA;    public @NonNull Optional&amp;lt;SimpleLock&amp;gt; lock(@NonNull LockConfiguration lockConfiguration) {&#xA;        String tenantName = getTenantName(lockConfiguration);&#xA;        return providers.computeIfAbsent(tenantName, this::createLockProvider).lock(lockConfiguration);&#xA;    }&#xA;&#xA;    protected abstract LockProvider createLockProvider(String tenantName) ;&#xA;&#xA;    protected abstract String getTenantName(LockConfiguration lockConfiguration);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;In-Memory&lt;/h4&gt; &#xA;&lt;p&gt;If you want to use a lock provider in tests there is an in-Memory implementation.&lt;/p&gt; &#xA;&lt;p&gt;Import the project&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;net.javacrumbs.shedlock&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;shedlock-provider-inmemory&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;4.42.0&amp;lt;/version&amp;gt;&#xA;    &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import net.javacrumbs.shedlock.provider.inmemory.InMemoryLockProvider;&#xA;&#xA;...&#xA;&#xA;@Bean&#xA;public LockProvider lockProvider() {&#xA;    return new InMemoryLockProvider();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Memcached (using spymemcached)&lt;/h4&gt; &#xA;&lt;p&gt;Please, be aware that memcached is not a database but a cache. It means that if the cache is full, &lt;a href=&#34;https://stackoverflow.com/questions/6868256/memcached-eviction-prior-to-key-expiry/10456364#10456364&#34;&gt;the lock may be released prematurely&lt;/a&gt; &lt;strong&gt;Use only if you know what you are doing.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Import&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;net.javacrumbs.shedlock&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;shedlock-provider-memcached-spy&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;4.42.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and configure&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import net.javacrumbs.shedlock.provider.memcached.spy.MemcachedLockProvider;&#xA;&#xA;...&#xA;&#xA;@Bean&#xA;public LockProvider lockProvider(net.spy.memcached.MemcachedClient client) {&#xA;    return new MemcachedLockProvider(client, ENV);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;P.S.:&lt;/p&gt; &#xA;&lt;p&gt;Memcached Standard Protocol:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A key (arbitrary string up to 250 bytes in length. No space or newlines for ASCII mode)&lt;/li&gt; &#xA; &lt;li&gt;An expiration time, in &lt;code&gt;seconds&lt;/code&gt;. &#39;0&#39; means never expire. Can be up to 30 days. After 30 days, is treated as a unix timestamp of an exact date. (support &lt;code&gt;seconds&lt;/code&gt;、&lt;code&gt;minutes&lt;/code&gt;、&lt;code&gt;days&lt;/code&gt;, and less than &lt;code&gt;30&lt;/code&gt; days)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Duration specification&lt;/h2&gt; &#xA;&lt;p&gt;All the annotations where you need to specify a duration support the following formats&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;duration+unit - &lt;code&gt;1s&lt;/code&gt;, &lt;code&gt;5ms&lt;/code&gt;, &lt;code&gt;5m&lt;/code&gt;, &lt;code&gt;1d&lt;/code&gt; (Since 4.0.0)&lt;/li&gt; &#xA; &lt;li&gt;duration in ms - &lt;code&gt;100&lt;/code&gt; (only Spring integration)&lt;/li&gt; &#xA; &lt;li&gt;ISO-8601 - &lt;code&gt;PT15M&lt;/code&gt; (see &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html#parse-java.lang.CharSequence-&#34;&gt;Duration.parse()&lt;/a&gt; documentation)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Extending the lock&lt;/h2&gt; &#xA;&lt;p&gt;There are some use-cases which require to extend currently held lock. You can use LockExtender in the following way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;LockExtender.extendActiveLock(Duration.ofMinutes(5), ZERO);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that not all lock provider implementations support lock extension.&lt;/p&gt; &#xA;&lt;h2&gt;KeepAliveLockProvider&lt;/h2&gt; &#xA;&lt;p&gt;There is also KeepAliveLockProvider that is able to keep the lock alive by periodically extending it. It can be used by wrapping the original lock provider. My personal opinion is that it should be used only in special cases, it adds more complexity to the library and the flow is harder to reason about so please use moderately.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Bean&#xA;public LockProvider lockProvider(...) {&#xA;    return new  KeepAliveLockProvider(new XyzProvider(...), scheduler);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;KeepAliveLockProvider extends the lock in the middle of the lockAtMostFor interval. For example, if the lockAtMostFor is 10 minutes the lock is extended every 5 minutes for 10 minutes until the lock is released. Please note that the minimal lockAtMostFor time supported by this provider is 30s.&lt;/p&gt; &#xA;&lt;h2&gt;Micronaut integration&lt;/h2&gt; &#xA;&lt;p&gt;Since version 4.0.0, it&#39;s possible to use Micronaut framework for integration&lt;/p&gt; &#xA;&lt;p&gt;Import the project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;net.javacrumbs.shedlock&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;shedlock-micronaut&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;4.42.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configure default lockAtMostFor value (application.yml):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;shedlock:&#xA;  defaults:&#xA;    lock-at-most-for: 1m&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configure lock provider:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Singleton&#xA;public LockProvider lockProvider() {&#xA;    ... select and configure your lock provider&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configure the scheduled task:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Scheduled(fixedDelay = &#34;1s&#34;)&#xA;@SchedulerLock(name = &#34;myTask&#34;)&#xA;public void myTask() {&#xA;    assertLocked();&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Locking without a framework&lt;/h2&gt; &#xA;&lt;p&gt;It is possible to use ShedLock without a framework&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;LockingTaskExecutor executor = new DefaultLockingTaskExecutor(lockProvider);&#xA;&#xA;...&#xA;&#xA;Instant lockAtMostUntil = Instant.now().plusSeconds(600);&#xA;executor.executeWithLock(runnable, new LockConfiguration(&#34;lockName&#34;, lockAtMostUntil));&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Extending the lock&lt;/h2&gt; &#xA;&lt;p&gt;Some lock providers support extension of the lock. For the time being, it requires manual lock manipulation, directly using &lt;code&gt;LockProvider&lt;/code&gt; and calling &lt;code&gt;extend&lt;/code&gt; method on the &lt;code&gt;SimpleLock&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Modes of Spring integration&lt;/h2&gt; &#xA;&lt;p&gt;ShedLock supports two modes of Spring integration. One that uses an AOP proxy around scheduled method (PROXY_METHOD) and one that proxies TaskScheduler (PROXY_SCHEDULER)&lt;/p&gt; &#xA;&lt;h4&gt;Scheduled Method proxy&lt;/h4&gt; &#xA;&lt;p&gt;Since version 4.0.0, the default mode of Spring integration is an AOP proxy around the annotated method.&lt;/p&gt; &#xA;&lt;p&gt;The main advantage of this mode is that it plays well with other frameworks that want to somehow alter the default Spring scheduling mechanism. The disadvantage is that the lock is applied even if you call the method directly. If the method returns a value and the lock is held by another process, null or an empty Optional will be returned (primitive return types are not supported).&lt;/p&gt; &#xA;&lt;p&gt;Final and non-public methods are not proxied so either you have to make your scheduled methods public and non-final or use TaskScheduler proxy.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/lukas-krecan/ShedLock/raw/master/documentation/method_proxy.png&#34; alt=&#34;Method proxy sequenceDiagram&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;TaskScheduler proxy&lt;/h4&gt; &#xA;&lt;p&gt;This mode wraps Spring &lt;code&gt;TaskScheduler&lt;/code&gt; in an AOP proxy. &lt;strong&gt;This mode does not play well with instrumentation libraries&lt;/strong&gt; like opentelementry that also wrap TaskScheduler. Please only use it if you know what you are doing. It can be switched-on like this (PROXY_SCHEDULER was the default method before 4.0.0):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@EnableSchedulerLock(interceptMode = PROXY_SCHEDULER)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you do not specify your task scheduler, a default one is created for you. If you have special needs, just create a bean implementing &lt;code&gt;TaskScheduler&lt;/code&gt; interface and it will get wrapped into the AOP proxy automatically.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Bean&#xA;public TaskScheduler taskScheduler() {&#xA;    return new MySpecialTaskScheduler();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can define a bean of type &lt;code&gt;ScheduledExecutorService&lt;/code&gt; and it will automatically get used by the tasks scheduling mechanism.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/lukas-krecan/ShedLock/raw/master/documentation/scheduler_proxy.png&#34; alt=&#34;TaskScheduler proxy sequence diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Spring XML configuration&lt;/h3&gt; &#xA;&lt;p&gt;Spring XML configuration is not supported as of version 3.0.0. If you need it, please use version 2.6.0 or file an issue explaining why it is needed.&lt;/p&gt; &#xA;&lt;h2&gt;Lock assert&lt;/h2&gt; &#xA;&lt;p&gt;To prevent misconfiguration errors, like AOP misconfiguration, missing annotation etc., you can assert that the lock works by using LockAssert:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Scheduled(...)&#xA;@SchedulerLock(..)&#xA;public void scheduledTask() {&#xA;    // To assert that the lock is held (prevents misconfiguration errors)&#xA;    LockAssert.assertLocked();&#xA;    // do something&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In unit tests you can switch-off the assertion by calling &lt;code&gt;LockAssert.TestHelper.makeAllAssertsPass(true)&lt;/code&gt; on given thread (as in this &lt;a href=&#34;https://github.com/lukas-krecan/ShedLock/commit/e8d63b7c56644c4189e0a8b420d8581d6eae1443&#34;&gt;example&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Kotlin gotchas&lt;/h2&gt; &#xA;&lt;p&gt;The library is tested with Kotlin and works fine. The only issue is Spring AOP which does not work on final method. If you use &lt;code&gt;@SchedulerLock&lt;/code&gt; with &lt;code&gt;@Scheduled&lt;/code&gt; annotation, everything should work since Kotlin Spring compiler plugin will automatically &#39;open&#39; the method for you. If &lt;code&gt;@Scheduled&lt;/code&gt; annotation is not present, you have to open the method by yourself.&lt;/p&gt; &#xA;&lt;h2&gt;Caveats&lt;/h2&gt; &#xA;&lt;p&gt;Locks in ShedLock have an expiration time which leads to the following possible issues.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If the task runs longer than &lt;code&gt;lockAtMostFor&lt;/code&gt;, the task can be executed more than once&lt;/li&gt; &#xA; &lt;li&gt;If the clock difference between two nodes is more than &lt;code&gt;lockAtLeastFor&lt;/code&gt; or minimal execution time the task can be executed more than once.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;Help, ShedLock does not do what it&#39;s supposed to do!&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Upgrade to the newest version&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://github.com/lukas-krecan/ShedLock#lock-assert&#34;&gt;LockAssert&lt;/a&gt; to ensure that AOP is correctly configured.&lt;/li&gt; &#xA; &lt;li&gt;Check the storage. If you are using JDBC, check the ShedLock table. If it&#39;s empty, ShedLock is not properly configured. If there is more than one record with the same name, you are missing a primary key.&lt;/li&gt; &#xA; &lt;li&gt;Use ShedLock debug log. ShedLock logs interesting information on DEBUG level with logger name &lt;code&gt;net.javacrumbs.shedlock&lt;/code&gt;. It should help you to see what&#39;s going on.&lt;/li&gt; &#xA; &lt;li&gt;For short-running tasks consider using &lt;code&gt;lockAtLeastFor&lt;/code&gt;. If the tasks are short-running, they could be executed one after another, &lt;code&gt;lockAtLeastFor&lt;/code&gt; can prevent it.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Requirements and dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Java 8&lt;/li&gt; &#xA; &lt;li&gt;slf4j-api&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Release notes&lt;/h1&gt; &#xA;&lt;h2&gt;4.42.0 (2022-09-16)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Deprecate old Couchbase lock provider&lt;/li&gt; &#xA; &lt;li&gt;Dependency updates&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.41.0 (2022-08-17)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Couchbase collection support (thanks @mesuutt)&lt;/li&gt; &#xA; &lt;li&gt;Dependency updates&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.40.0 (2022-08-11)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed caching issues when the app is started by the DB does not exist yet (#1129)&lt;/li&gt; &#xA; &lt;li&gt;Dependency updates&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.39.0 (2022-07-26)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduced elasticsearch8 LockProvider and deperecated the orignal one (thanks @MarAra)&lt;/li&gt; &#xA; &lt;li&gt;Dependency updates&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.38.0 (2022-07-02)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ReactiveRedisLockProvider added (thanks @ericwcc)&lt;/li&gt; &#xA; &lt;li&gt;Dependency updates&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.37.0 (2022-06-14)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OpenSearch provider (thanks @Pinny3)&lt;/li&gt; &#xA; &lt;li&gt;Fix wrong reference to reactive Mongo in BOM #1048&lt;/li&gt; &#xA; &lt;li&gt;Dependency updates&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.36.0 (2022-05-28)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;shedlock-bom module added&lt;/li&gt; &#xA; &lt;li&gt;Dependency updates&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.35.0 (2022-05-16)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neo4j allows to specify database thanks @SergeyPlatonov&lt;/li&gt; &#xA; &lt;li&gt;Dependency updates&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.34.0 (2022-04-09)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dropped support for Hazelcast &amp;lt;= 3 as it has unfixed vulnerability&lt;/li&gt; &#xA; &lt;li&gt;Dropped support for Spring Data Redis 1 as it is not supported&lt;/li&gt; &#xA; &lt;li&gt;Dependency updates&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.33.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;memcached provider added (thanks @pinkhello)&lt;/li&gt; &#xA; &lt;li&gt;Dependency updates&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.32.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JDBC provider does not change autocommit attribute&lt;/li&gt; &#xA; &lt;li&gt;Dependency updates&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.31.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Jedis 4 lock provider&lt;/li&gt; &#xA; &lt;li&gt;Dependency updates&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.30.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In-memory lock provider added (thanks @kkocel)&lt;/li&gt; &#xA; &lt;li&gt;Dependency updates&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.29.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;R2DBC support added (thanks @sokomishalov)&lt;/li&gt; &#xA; &lt;li&gt;Library upgrades&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.28.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neo4j lock provider added (thanks @thimmwork)&lt;/li&gt; &#xA; &lt;li&gt;Library upgrades&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.27.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ability to set transaction isolation in JdbcTemplateLockProvider&lt;/li&gt; &#xA; &lt;li&gt;Library upgrades&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.26.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;KeepAliveLockProvider introduced&lt;/li&gt; &#xA; &lt;li&gt;Library upgrades&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.25.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;LockExtender added&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.24.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for Apache Ignite (thanks @wirtsleg)&lt;/li&gt; &#xA; &lt;li&gt;Library upgrades&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.23.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ability to set serialConsistencyLevel in Cassandra (thanks @DebajitKumarPhukan)&lt;/li&gt; &#xA; &lt;li&gt;Introduced shedlock-provider-jdbc-micronaut module (thanks @drmaas)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.22.1&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Catching and logging Cassandra exception&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.22.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for custom keyspace in Cassandra provider&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.21.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Elastic unlock using IMMEDIATE refresh policy #422&lt;/li&gt; &#xA; &lt;li&gt;DB2 JDBC lock provider uses microseconds in DB time&lt;/li&gt; &#xA; &lt;li&gt;Various library upgrades&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.20.1&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed DB JDBC server time #378&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.20.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for etcd (thanks grofoli)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.19.1&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed devtools compatibility #368&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.19.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for enhanced configuration in Cassandra provider (thanks DebajitKumarPhukan)&lt;/li&gt; &#xA; &lt;li&gt;LockConfigurationExtractor exposed as a Spring bean #359&lt;/li&gt; &#xA; &lt;li&gt;Handle CannotSerializeTransactionException #364&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.18.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed Consul support for tokens and added enhanced Consul configuration (thanks DrWifey)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.17.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Consul support for tokens&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.16.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Spring - EnableSchedulerLock.order param added to specify AOP proxy order&lt;/li&gt; &#xA; &lt;li&gt;JDBC - Log unexpected exceptions at ERROR level&lt;/li&gt; &#xA; &lt;li&gt;Hazelcast upgraded to 4.1&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.15.1&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fix session leak in Consul provider #340 (thanks @haraldpusch)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.15.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ArangoDB lock provider added (thanks @patrick-birkle)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.14.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for Couchbase 3 driver (thanks @blitzenzzz)&lt;/li&gt; &#xA; &lt;li&gt;Removed forgotten configuration files form micronaut package (thanks @drmaas)&lt;/li&gt; &#xA; &lt;li&gt;Shutdown hook for Consul (thanks @kaliy)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.13.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for Consul (thanks @kaliy)&lt;/li&gt; &#xA; &lt;li&gt;Various dependencies updated&lt;/li&gt; &#xA; &lt;li&gt;Deprecated default LockConfiguration constructor&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.12.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lazy initialization of SqlStatementsSource #258&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.11.1&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MongoLockProvider uses mongodb-driver-sync&lt;/li&gt; &#xA; &lt;li&gt;Removed deprecated constructors from MongoLockProvider&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.10.1&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;New Mongo reactive streams driver (thanks @codependent)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.9.3&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed JdbcTemplateLockProvider useDbTime() locking #244 thanks @gjorgievskivlatko&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.9.2&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Do not fail on DB type determining code if DB connection is not available&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.9.1&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for server time in DB2&lt;/li&gt; &#xA; &lt;li&gt;removed shedlock-provider-jdbc-internal module&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.9.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for server time in JdbcTemplateLockProvider&lt;/li&gt; &#xA; &lt;li&gt;Using custom non-null annotations&lt;/li&gt; &#xA; &lt;li&gt;Trimming time precision to milliseconds&lt;/li&gt; &#xA; &lt;li&gt;Micronaut upgraded to 1.3.4&lt;/li&gt; &#xA; &lt;li&gt;Add automatic DB tests for Oracle, MariaDB and MS SQL.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.8.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DynamoDB 2 module introduced (thanks Mark Egan)&lt;/li&gt; &#xA; &lt;li&gt;JDBC template code refactored to not log error on failed insert in Postgres &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;INSERT .. ON CONFLICT UPDATE is used for Postgres&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.7.1&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make LockAssert.TestHelper public&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.7.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;New module for Hazelcasts 4&lt;/li&gt; &#xA; &lt;li&gt;Ability to switch-off LockAssert in unit tests&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.6.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for Meta annotations and annotation inheritance in Spring&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.5.2&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Made compatible with PostgreSQL JDBC Driver 42.2.11&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.5.1&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Inject redis template&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.5.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ClockProvider introduced&lt;/li&gt; &#xA; &lt;li&gt;MongoLockProvider(MongoDatabase) introduced&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.4.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for non-void returning methods when PROXY_METHOD interception is used&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.3.1&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduced shedlock-provider-redis-spring-1 to make it work around Spring Data Redis 1 issue #105 (thanks @rygh4775)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.3.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Jedis dependency upgraded to 3.2.0&lt;/li&gt; &#xA; &lt;li&gt;Support for JedisCluster&lt;/li&gt; &#xA; &lt;li&gt;Tests upgraded to JUnit 5&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.2.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cassandra provider (thanks @mitjag)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.1.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;More configuration option for JdbcTemplateProvider&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.0.4&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Allow configuration of key prefix in RedisLockProvider #181 (thanks @krm1312)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.0.3&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed junit dependency scope #179&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.0.2&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fix NPE caused by Redisson #178&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.0.1&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DefaultLockingTaskExecutor made reentrant #175&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.0.0&lt;/h2&gt; &#xA;&lt;p&gt;Version 4.0.0 is a major release changing quite a lot of stuff&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;net.javacrumbs.shedlock.core.SchedulerLock&lt;/code&gt; has been replaced by &lt;code&gt;net.javacrumbs.shedlock.spring.annotation.SchedulerLock&lt;/code&gt;. The original annotation has been in wrong module and was too complex. Please use the new annotation, the old one still works, but in few years it will be removed.&lt;/li&gt; &#xA; &lt;li&gt;Default intercept mode changed from &lt;code&gt;PROXY_SCHEDULER&lt;/code&gt; to &lt;code&gt;PROXY_METHOD&lt;/code&gt;. The reason is that there were a lot of issues with &lt;code&gt;PROXY_SCHEDULER&lt;/code&gt; (for example #168). You can still use &lt;code&gt;PROXY_SCHEDULER&lt;/code&gt; mode if you specify it manually.&lt;/li&gt; &#xA; &lt;li&gt;Support for more readable &lt;a href=&#34;https://raw.githubusercontent.com/lukas-krecan/ShedLock/master/#duration-specification&#34;&gt;duration strings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Support for lock assertion &lt;code&gt;LockAssert.assertLocked()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lukas-krecan/ShedLock/master/#micronaut-integration&#34;&gt;Support for Micronaut&lt;/a&gt; added&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;3.0.1&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed bean definition configuration #171&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;3.0.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;EnableSchedulerLock.mode&lt;/code&gt; renamed to &lt;code&gt;interceptMode&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use standard Spring AOP configuration to honor Spring Boot config (supports &lt;code&gt;proxyTargetClass&lt;/code&gt; flag)&lt;/li&gt; &#xA; &lt;li&gt;Removed deprecated SpringLockableTaskSchedulerFactoryBean and related classes&lt;/li&gt; &#xA; &lt;li&gt;Removed support for XML configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;2.6.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Updated dependency to Spring 2.1.9&lt;/li&gt; &#xA; &lt;li&gt;Support for lock extensions (beta)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;2.5.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Zookeeper supports &lt;em&gt;lockAtMostFor&lt;/em&gt; and &lt;em&gt;lockAtLeastFor&lt;/em&gt; params&lt;/li&gt; &#xA; &lt;li&gt;Better debug logging&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;2.4.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed potential deadlock in Hazelcast (thanks @HubertTatar)&lt;/li&gt; &#xA; &lt;li&gt;Finding class level annotation in proxy method mode (thanks @volkovs)&lt;/li&gt; &#xA; &lt;li&gt;ScheduledLockConfigurationBuilder deprecated&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;2.3.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;LockProvides is initialized lazilly so it does not change DataSource initialization order&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;2.2.1&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MongoLockProvider accepts MongoCollection as a constructor param&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;2.2.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DynamoDBLockProvider added&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;2.1.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MongoLockProvider rewritten to use upsert&lt;/li&gt; &#xA; &lt;li&gt;ElasticsearchLockProvider added&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;2.0.1&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;AOP proxy and annotation configuration support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;1.3.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Can set Timezone to JdbcTemplateLock provider&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;1.2.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for Couchbase (thanks to @MoranVaisberg)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;1.1.1&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Spring RedisLockProvider refactored to use RedisTemplate&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;1.1.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for transaction manager in JdbcTemplateLockProvider (thanks to @grmblfrz)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;1.0.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Upgraded dependencies to Spring 5 and Spring Data 2&lt;/li&gt; &#xA; &lt;li&gt;Removed deprecated net.javacrumbs.shedlock.provider.jedis.JedisLockProvider (use net.javacrumbs.shedlock.provider.redis.jedis.JedisLockProvide instead)&lt;/li&gt; &#xA; &lt;li&gt;Removed deprecated SpringLockableTaskSchedulerFactory (use ScheduledLockConfigurationBuilder instead)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;0.18.2&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ablility to clean lock cache&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;0.18.1&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;shedlock-provider-redis-spring made compatible with spring-data-redis 1.x.x&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;0.18.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added shedlock-provider-redis-spring (thanks to @siposr)&lt;/li&gt; &#xA; &lt;li&gt;shedlock-provider-jedis moved to shedlock-provider-redis-jedis&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;0.17.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for SPEL in lock name annotation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;0.16.1&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatically closing TaskExecutor on Spring shutdown&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;0.16.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Removed spring-test from shedlock-spring compile time dependencies&lt;/li&gt; &#xA; &lt;li&gt;Added Automatic-Module-Names&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;0.15.1&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Hazelcast works with remote cluster&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;0.15.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed ScheduledLockConfigurationBuilder interfaces #32&lt;/li&gt; &#xA; &lt;li&gt;Hazelcast code refactoring&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;0.14.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for Hazelcast (thanks to @peyo)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;0.13.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Jedis constructor made more generic (thanks to @mgrzeszczak)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;0.12.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for property placeholders in annotation lockAtMostForString/lockAtLeastForString&lt;/li&gt; &#xA; &lt;li&gt;Support for composed annotations&lt;/li&gt; &#xA; &lt;li&gt;ScheduledLockConfigurationBuilder introduced (deprecating SpringLockableTaskSchedulerFactory)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;0.11.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for Redis (thanks to @clamey)&lt;/li&gt; &#xA; &lt;li&gt;Checking that lockAtMostFor is in the future&lt;/li&gt; &#xA; &lt;li&gt;Checking that lockAtMostFor is larger than lockAtLeastFor&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;0.10.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;jdbc-template-provider does not participate in task transaction&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;0.9.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for @SchedulerLock annotations on proxied classes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;0.8.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;LockableTaskScheduler made AutoClosable so it&#39;s closed upon Spring shutdown&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;0.7.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for lockAtLeastFor&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;0.6.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Possible to configure defaultLockFor time so it does not have to be repeated in every annotation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;0.5.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ZooKeeper nodes created under /shedlock by default&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;0.4.1&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JdbcLockProvider insert does not fail on DataIntegrityViolationException&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;0.4.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Extracted LockingTaskExecutor&lt;/li&gt; &#xA; &lt;li&gt;LockManager.executeIfNotLocked renamed to executeWithLock&lt;/li&gt; &#xA; &lt;li&gt;Default table name in JDBC lock providers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;0.3.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;@ShedlulerLock.name&lt;/code&gt; made obligatory&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@ShedlulerLock.lockForMillis&lt;/code&gt; renamed to lockAtMostFor&lt;/li&gt; &#xA; &lt;li&gt;Adding plain JDBC LockProvider&lt;/li&gt; &#xA; &lt;li&gt;Adding ZooKeepr LockProvider&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>linkedin/cruise-control</title>
    <updated>2022-09-21T01:38:24Z</updated>
    <id>tag:github.com,2022-09-21:/linkedin/cruise-control</id>
    <link href="https://github.com/linkedin/cruise-control" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cruise-control is the first of its kind to fully automate the dynamic workload rebalance and self-healing of a Kafka cluster. It provides great value to Kafka users by simplifying the operation of Kafka clusters.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cruise Control for Apache Kafka&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/linkedin/cruise-control&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/linkedin/cruise-control.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Introduction&lt;/h3&gt; &#xA;&lt;p&gt;Cruise Control is a product that helps run Apache Kafka clusters at large scale. Due to the popularity of Apache Kafka, many companies have bigger and bigger Kafka clusters. At LinkedIn, we have ~7K+ Kafka brokers, which means broker deaths are an almost daily occurrence and balancing the workload of Kafka also becomes a big overhead.&lt;/p&gt; &#xA;&lt;p&gt;Kafka Cruise Control is designed to address this operation scalability issue.&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;p&gt;Kafka Cruise Control provides the following features out of the box:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Resource utilization tracking for brokers, topics, and partitions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Query the current Kafka cluster state to see the online and offline partitions, in-sync and out-of-sync replicas, replicas under &lt;code&gt;min.insync.replicas&lt;/code&gt;, online and offline logDirs, and distribution of replicas in the cluster.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Multi-goal rebalance proposal generation for:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Rack-awareness&lt;/li&gt; &#xA;   &lt;li&gt;Resource capacity violation checks (CPU, DISK, Network I/O)&lt;/li&gt; &#xA;   &lt;li&gt;Per-broker replica count violation check&lt;/li&gt; &#xA;   &lt;li&gt;Resource utilization balance (CPU, DISK, Network I/O)&lt;/li&gt; &#xA;   &lt;li&gt;Leader traffic distribution&lt;/li&gt; &#xA;   &lt;li&gt;Replica distribution for topics&lt;/li&gt; &#xA;   &lt;li&gt;Global replica distribution&lt;/li&gt; &#xA;   &lt;li&gt;Global leader replica distribution&lt;/li&gt; &#xA;   &lt;li&gt;Custom goals that you wrote and plugged in&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Anomaly detection, alerting, and self-healing for the Kafka cluster, including:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Goal violation&lt;/li&gt; &#xA;   &lt;li&gt;Broker failure detection&lt;/li&gt; &#xA;   &lt;li&gt;Metric anomaly detection&lt;/li&gt; &#xA;   &lt;li&gt;Disk failure detection (not available in &lt;code&gt;kafka_0_11_and_1_0&lt;/code&gt; branch)&lt;/li&gt; &#xA;   &lt;li&gt;Slow broker detection (not available in &lt;code&gt;kafka_0_11_and_1_0&lt;/code&gt; branch)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Admin operations, including:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Add brokers&lt;/li&gt; &#xA;   &lt;li&gt;Remove brokers&lt;/li&gt; &#xA;   &lt;li&gt;Demote brokers&lt;/li&gt; &#xA;   &lt;li&gt;Rebalance the cluster&lt;/li&gt; &#xA;   &lt;li&gt;Fix offline replicas (not available in &lt;code&gt;kafka_0_11_and_1_0&lt;/code&gt; branch)&lt;/li&gt; &#xA;   &lt;li&gt;Perform preferred leader election (PLE)&lt;/li&gt; &#xA;   &lt;li&gt;Fix offline replicas&lt;/li&gt; &#xA;   &lt;li&gt;Adjust replication factor&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Environment Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;migrate_to_kafka_2_5&lt;/code&gt; branch of Cruise Control is compatible with Apache Kafka &lt;code&gt;2.5&lt;/code&gt; (i.e. &lt;a href=&#34;https://github.com/linkedin/cruise-control/releases&#34;&gt;Releases&lt;/a&gt; with &lt;code&gt;2.5.*&lt;/code&gt;), &lt;code&gt;2.6&lt;/code&gt; (i.e. &lt;a href=&#34;https://github.com/linkedin/cruise-control/releases&#34;&gt;Releases&lt;/a&gt; with &lt;code&gt;2.5.11+&lt;/code&gt;), &lt;code&gt;2.7&lt;/code&gt; (i.e. &lt;a href=&#34;https://github.com/linkedin/cruise-control/releases&#34;&gt;Releases&lt;/a&gt; with &lt;code&gt;2.5.36+&lt;/code&gt;), &lt;code&gt;2.8&lt;/code&gt; (i.e. &lt;a href=&#34;https://github.com/linkedin/cruise-control/releases&#34;&gt;Releases&lt;/a&gt; with &lt;code&gt;2.5.66+&lt;/code&gt;), &lt;code&gt;3.0&lt;/code&gt; (i.e. &lt;a href=&#34;https://github.com/linkedin/cruise-control/releases&#34;&gt;Releases&lt;/a&gt; with &lt;code&gt;2.5.85+&lt;/code&gt;), and &lt;code&gt;3.1&lt;/code&gt; (i.e. &lt;a href=&#34;https://github.com/linkedin/cruise-control/releases&#34;&gt;Releases&lt;/a&gt; with &lt;code&gt;2.5.85+&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;migrate_to_kafka_2_4&lt;/code&gt; branch of Cruise Control is compatible with Apache Kafka &lt;code&gt;2.4&lt;/code&gt; (i.e. &lt;a href=&#34;https://github.com/linkedin/cruise-control/releases&#34;&gt;Releases&lt;/a&gt; with &lt;code&gt;2.4.*&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;kafka_2_0_to_2_3&lt;/code&gt; branch (deprecated) of Cruise Control is compatible with Apache Kafka &lt;code&gt;2.0&lt;/code&gt;, &lt;code&gt;2.1&lt;/code&gt;, &lt;code&gt;2.2&lt;/code&gt;, and &lt;code&gt;2.3&lt;/code&gt; (i.e. &lt;a href=&#34;https://github.com/linkedin/cruise-control/releases&#34;&gt;Releases&lt;/a&gt; with &lt;code&gt;2.0.*&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;kafka_0_11_and_1_0&lt;/code&gt; branch (deprecated) of Cruise Control is compatible with Apache Kafka &lt;code&gt;0.11.0.0&lt;/code&gt;, &lt;code&gt;1.0&lt;/code&gt;, and &lt;code&gt;1.1&lt;/code&gt; (i.e. &lt;a href=&#34;https://github.com/linkedin/cruise-control/releases&#34;&gt;Releases&lt;/a&gt; with &lt;code&gt;0.1.*&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;The current default branch of Cruise Control is &lt;code&gt;migrate_to_kafka_2_4&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;message.format.version&lt;/code&gt; &lt;code&gt;0.10.0&lt;/code&gt; and above is needed.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;kafka_2_0_to_2_3&lt;/code&gt; and &lt;code&gt;kafka_0_11_and_1_0&lt;/code&gt; branches compile with &lt;code&gt;Scala 2.11&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The branch &lt;code&gt;migrate_to_kafka_2_4&lt;/code&gt; compiles with &lt;code&gt;Scala 2.12&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The branch &lt;code&gt;migrate_to_kafka_2_5&lt;/code&gt; compile with &lt;code&gt;Scala 2.13&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;This project requires Java 11.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Known Compatibility Issues&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for Apache Kafka &lt;code&gt;2.0&lt;/code&gt;, &lt;code&gt;2.1&lt;/code&gt;, &lt;code&gt;2.2&lt;/code&gt;, and &lt;code&gt;2.3&lt;/code&gt; requires &lt;a href=&#34;https://issues.apache.org/jira/browse/KAFKA-8875&#34;&gt;KAFKA-8875&lt;/a&gt; hotfix.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Quick Start&lt;/h3&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt;Get Cruise Control &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;(Option-1): via &lt;code&gt;git clone&lt;/code&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;git clone https://github.com/linkedin/cruise-control.git &amp;amp;&amp;amp; cd cruise-control/&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;(Option-2): via browsing the available releases: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Browse &lt;code&gt;https://github.com/linkedin/cruise-control/releases&lt;/code&gt; to pick a release -- e.g. &lt;code&gt;0.1.10&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Get and extract the release: &lt;code&gt;wget https://github.com/linkedin/cruise-control/archive/0.1.10.tar.gz &amp;amp;&amp;amp; tar zxvf 0.1.10.tar.gz &amp;amp;&amp;amp; cd cruise-control-0.1.10/&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Initialize the local repo: &lt;code&gt;git init &amp;amp;&amp;amp; git add . &amp;amp;&amp;amp; git commit -m &#34;Init local repo.&#34; &amp;amp;&amp;amp; git tag -a 0.1.10 -m &#34;Init local version.&#34;&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;This step is required if &lt;code&gt;CruiseControlMetricsReporter&lt;/code&gt; is used for metrics collection (i.e. the default for Cruise Control). The metrics reporter periodically samples the Kafka raw metrics on the broker and sends them to a Kafka topic. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;./gradlew jar&lt;/code&gt; (Note: This project requires Java 11)&lt;/li&gt; &#xA;   &lt;li&gt;Copy &lt;code&gt;./cruise-control-metrics-reporter/build/libs/cruise-control-metrics-reporter-A.B.C.jar&lt;/code&gt; (Where &lt;code&gt;A.B.C&lt;/code&gt; is the version of the Cruise Control) to your Kafka server dependency jar folder. For Apache Kafka, the folder would be &lt;code&gt;core/build/dependant-libs-SCALA_VERSION/&lt;/code&gt; (for a Kafka source checkout) or &lt;code&gt;libs/&lt;/code&gt; (for a Kafka release download).&lt;/li&gt; &#xA;   &lt;li&gt;Modify Kafka server configuration to set &lt;code&gt;metric.reporters&lt;/code&gt; to &lt;code&gt;com.linkedin.kafka.cruisecontrol.metricsreporter.CruiseControlMetricsReporter&lt;/code&gt;. For Apache Kafka, server properties are located at &lt;code&gt;./config/server.properties&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;If &lt;code&gt;SSL&lt;/code&gt; is enabled, ensure that the relevant client configurations are properly set for all brokers in &lt;code&gt;./config/server.properties&lt;/code&gt;. Note that &lt;code&gt;CruiseControlMetricsReporter&lt;/code&gt; takes all configurations for vanilla &lt;code&gt;KafkaProducer&lt;/code&gt; with a prefix of &lt;code&gt;cruise.control.metrics.reporter.&lt;/code&gt; -- e.g. &lt;code&gt;cruise.control.metrics.reporter.ssl.truststore.password&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;If the default broker cleanup policy is &lt;code&gt;compact&lt;/code&gt;, make sure that the topic to which Cruise Control metrics reporter should send messages is created with the &lt;code&gt;delete&lt;/code&gt; cleanup policy -- the default metrics reporter topic is &lt;code&gt;__CruiseControlMetrics&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Start ZooKeeper and Kafka server (&lt;a href=&#34;https://kafka.apache.org/quickstart&#34;&gt;See tutorial&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Modify &lt;code&gt;config/cruisecontrol.properties&lt;/code&gt; of Cruise Control: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;(Required) fill in &lt;code&gt;bootstrap.servers&lt;/code&gt; and &lt;code&gt;zookeeper.connect&lt;/code&gt; to the Kafka cluster to be monitored.&lt;/li&gt; &#xA;   &lt;li&gt;(Required) update &lt;code&gt;capacity.config.file&lt;/code&gt; to the path of your capacity file. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Capacity file is a JSON file that provides the capacity of the brokers&lt;/li&gt; &#xA;     &lt;li&gt;You can start Cruise Control server with the default file (&lt;code&gt;config/capacityJBOD.json&lt;/code&gt;), but it may not reflect the actual capacity of the brokers&lt;/li&gt; &#xA;     &lt;li&gt;See &lt;a href=&#34;https://github.com/linkedin/cruise-control/wiki/Configurations#brokercapacityconfigurationfileresolver-configurations&#34;&gt;BrokerCapacityConfigurationFileResolver configurations&lt;/a&gt; for more information and examples&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;(Optional) set &lt;code&gt;metric.sampler.class&lt;/code&gt; to your implementation (the default sampler class is &lt;code&gt;CruiseControlMetricsReporterSampler&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;(Optional) set &lt;code&gt;sample.store.class&lt;/code&gt; to your implementation if you have one (the default &lt;code&gt;SampleStore&lt;/code&gt; is &lt;code&gt;KafkaSampleStore&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run the following command &lt;pre&gt;&lt;code&gt;./gradlew jar copyDependantLibs&#xA;./kafka-cruise-control-start.sh [-jars PATH_TO_YOUR_JAR_1,PATH_TO_YOUR_JAR_2] config/cruisecontrol.properties [port]&#xA;&lt;/code&gt;&lt;/pre&gt; JAR files correspond to your applications and &lt;code&gt;port&lt;/code&gt; enables customizing the Cruise Control port number (default: &lt;code&gt;9090&lt;/code&gt;). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;(Note) To emit Cruise Control JMX metrics on a particular port (e.g. &lt;code&gt;56666&lt;/code&gt;), &lt;code&gt;export JMX_PORT=56666&lt;/code&gt; before running &lt;code&gt;kafka-cruise-control-start.sh&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;(Verify your setup) Visit &lt;code&gt;http://localhost:9090/kafkacruisecontrol/state&lt;/code&gt; (or &lt;code&gt;http://localhost:\[port\]/kafkacruisecontrol/state&lt;/code&gt; if you specified the port when starting Cruise Control).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cruise Control will need some time to read the raw Kafka metrics from the cluster.&lt;/li&gt; &#xA; &lt;li&gt;The metrics of a newly up broker may take a few minutes to get stable. Cruise Control will drop the inconsistent metrics (e.g when topic bytes-in is higher than broker bytes-in), so first few windows may not have enough valid partitions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;REST API&lt;/h3&gt; &#xA;&lt;p&gt;Cruise Control provides a &lt;a href=&#34;https://github.com/linkedin/cruise-control/wiki/REST-APIs&#34;&gt;REST API&lt;/a&gt; for users to interact with. See the wiki page for more details.&lt;/p&gt; &#xA;&lt;h3&gt;How Does It Work&lt;/h3&gt; &#xA;&lt;p&gt;Cruise Control relies on the recent load information of replicas to optimize the cluster.&lt;/p&gt; &#xA;&lt;p&gt;Cruise Control periodically collects resource utilization samples at both broker- and partition-level to infer the traffic pattern of each partition. Based on the traffic characteristics and distribution of all the partitions, it derives the load impact of each partition over the brokers. Cruise Control then builds a workload model to simulate the workload of the Kafka cluster. The goal optimizer explores different ways to generate cluster workload optimization proposals based on the user-specified list of goals.&lt;/p&gt; &#xA;&lt;p&gt;Cruise Control also monitors the liveness of all the brokers in the cluster. To avoid the loss of redundancy, Cruise Control automatically moves replicas from failed brokers to alive ones.&lt;/p&gt; &#xA;&lt;p&gt;For more details about how Cruise Control achieves that, see &lt;a href=&#34;https://www.slideshare.net/JiangjieQin/introduction-to-kafka-cruise-control-68180931&#34;&gt;these slides&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Configurations for Cruise Control&lt;/h3&gt; &#xA;&lt;p&gt;To read more about the configurations. Check the &lt;a href=&#34;https://github.com/linkedin/cruise-control/wiki/Configurations&#34;&gt;configurations wiki page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Artifactory&lt;/h3&gt; &#xA;&lt;p&gt;Published at &lt;a href=&#34;https://linkedin.jfrog.io/linkedin/webapp/#/artifacts/browse/tree/General/cruise-control&#34;&gt;Jfrog Artifactory&lt;/a&gt;. See &lt;a href=&#34;https://github.com/linkedin/cruise-control/releases&#34;&gt;available releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Pluggable Components&lt;/h3&gt; &#xA;&lt;p&gt;More about pluggable components can be found in the &lt;a href=&#34;https://github.com/linkedin/cruise-control/wiki/Pluggable-Components&#34;&gt;pluggable components wiki page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Metric Sampler&lt;/h4&gt; &#xA;&lt;p&gt;The metric sampler enables users to deploy Cruise Control to various environments and work with the existing metric systems.&lt;/p&gt; &#xA;&lt;p&gt;Cruise Control provides a metrics reporter that can be configured in your Apache Kafka server. Metrics reporter generates performance metrics to a Kafka metrics topic that can be consumed by Cruise Control.&lt;/p&gt; &#xA;&lt;h4&gt;Sample Store&lt;/h4&gt; &#xA;&lt;p&gt;The Sample Store enables storage of collected metric samples and training samples in an external storage.&lt;/p&gt; &#xA;&lt;p&gt;Metric sampling uses derived data from the raw metrics, and the accuracy of the derived data depends on the metadata of the cluster at that point. Hence, when we look at the old metrics, if we do not know the metadata at the point the metric was collected, the derived data would not be accurate. Sample Store helps solving this problem by storing the derived data directly to an external storage for later loading.&lt;/p&gt; &#xA;&lt;p&gt;The default Sample Store implementation produces metric samples back to Kafka.&lt;/p&gt; &#xA;&lt;h4&gt;Goals&lt;/h4&gt; &#xA;&lt;p&gt;The goals in Cruise Control are pluggable with different priorities. The default goals in order of decreasing priority are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;RackAwareGoal&lt;/strong&gt; - Ensures that all replicas of each partition are assigned in a rack aware manner -- i.e. no more than one replica of each partition resides in the same rack.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;RackAwareDistributionGoal&lt;/strong&gt; - A relaxed version of &lt;code&gt;RackAwareGoal&lt;/code&gt;. Contrary to &lt;code&gt;RackAwareGoal&lt;/code&gt;, as long as replicas of each partition can achieve a perfectly even distribution across the racks, this goal lets placement of multiple replicas of a partition into a single rack.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;MinTopicLeadersPerBrokerGoal&lt;/strong&gt; - Ensures that each alive broker has at least a certain number of leader replica of each topic in a configured set of topics&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ReplicaCapacityGoal&lt;/strong&gt; - Ensures that the maximum number of replicas per broker is under the specified maximum limit.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DiskCapacityGoal&lt;/strong&gt; - Ensures that Disk space usage of each broker is below a given threshold.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NetworkInboundCapacityGoal&lt;/strong&gt; - Ensures that inbound network utilization of each broker is below a given threshold.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NetworkOutboundCapacityGoal&lt;/strong&gt; - Ensures that outbound network utilization of each broker is below a given threshold.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CpuCapacityGoal&lt;/strong&gt; - Ensures that CPU utilization of each broker is below a given threshold.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ReplicaDistributionGoal&lt;/strong&gt; - Attempts to make all the brokers in a cluster have a similar number of replicas.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;PotentialNwOutGoal&lt;/strong&gt; - Ensures that the potential network output (when all the replicas in the broker become leaders) on each of the broker do not exceed the broker’s network outbound bandwidth capacity.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DiskUsageDistributionGoal&lt;/strong&gt; - Attempts to keep the Disk space usage variance among brokers within a certain range relative to the average Disk utilization.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NetworkInboundUsageDistributionGoal&lt;/strong&gt; - Attempts to keep the inbound network utilization variance among brokers within a certain range relative to the average inbound network utilization.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NetworkOutboundUsageDistributionGoal&lt;/strong&gt; - Attempts to keep the outbound network utilization variance among brokers within a certain range relative to the average outbound network utilization.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CpuUsageDistributionGoal&lt;/strong&gt; - Attempts to keep the CPU usage variance among brokers within a certain range relative to the average CPU utilization.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;LeaderReplicaDistributionGoal&lt;/strong&gt; - Attempts to make all the brokers in a cluster have a similar number of leader replicas.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;LeaderBytesInDistributionGoal&lt;/strong&gt; - Attempts to equalize the leader bytes in rate on each host.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;TopicReplicaDistributionGoal&lt;/strong&gt; - Attempts to maintain an even distribution of any topic&#39;s partitions across the entire cluster.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;PreferredLeaderElectionGoal&lt;/strong&gt; - Simply move the leaders to the first replica of each partition.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;KafkaAssignerDiskUsageDistributionGoal&lt;/strong&gt; - (Kafka-assigner mode) Attempts to distribute disk usage evenly among brokers based on swap.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;IntraBrokerDiskCapacityGoal&lt;/strong&gt; - (Rebalance-disk mode, not available in &lt;code&gt;kafka_0_11_and_1_0&lt;/code&gt; branch) Ensures that Disk space usage of each disk is below a given threshold.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;IntraBrokerDiskUsageDistributionGoal&lt;/strong&gt; - (Rebalance-disk mode, not available in &lt;code&gt;kafka_0_11_and_1_0&lt;/code&gt; branch) Attempts to keep the Disk space usage variance among disks within a certain range relative to the average broker Disk utilization.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Anomaly Notifier&lt;/h4&gt; &#xA;&lt;p&gt;The anomaly notifier allows users to be notified when an anomaly is detected. Anomalies include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Broker failure&lt;/li&gt; &#xA; &lt;li&gt;Goal violation&lt;/li&gt; &#xA; &lt;li&gt;Metric anomaly&lt;/li&gt; &#xA; &lt;li&gt;Disk failure (not available in &lt;code&gt;kafka_0_11_and_1_0&lt;/code&gt; branch)&lt;/li&gt; &#xA; &lt;li&gt;Slow brokers (not available in &lt;code&gt;kafka_0_11_and_1_0&lt;/code&gt; branch)&lt;/li&gt; &#xA; &lt;li&gt;Topic replication factor anomaly (not available in &lt;code&gt;kafka_0_11_and_1_0&lt;/code&gt; branch)&lt;/li&gt; &#xA; &lt;li&gt;Topic partition size anomaly (not available in &lt;code&gt;kafka_0_11_and_1_0&lt;/code&gt; branch)&lt;/li&gt; &#xA; &lt;li&gt;Maintenance Events (not available in &lt;code&gt;kafka_0_11_and_1_0&lt;/code&gt; branch)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In addition to anomaly notifications, users can enable actions to be taken in response to an anomaly by turning self-healing on for the relevant anomaly detectors. Multiple anomaly detectors work in harmony using distinct mitigation mechanisms. Their actions broadly fall into the following categories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;fix&lt;/strong&gt; - fix the problem right away (e.g. start a rebalance, fix offline replicas)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;check&lt;/strong&gt; - check the situation again after a configurable delay (e.g. adopt a grace period before fixing broker failures)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ignore&lt;/strong&gt; - ignore the anomaly (e.g. self-healing is disabled)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>