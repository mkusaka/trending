<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-12T01:32:00Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>alibaba/spring-ai-alibaba</title>
    <updated>2024-12-12T01:32:00Z</updated>
    <id>tag:github.com,2024-12-12:/alibaba/spring-ai-alibaba</id>
    <link href="https://github.com/alibaba/spring-ai-alibaba" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Application Framework for Java Developers&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://sca.aliyun.com/ai/&#34;&gt;Spring AI Alibaba&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alibaba/spring-ai-alibaba/main/README-zh.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An AI application framework for Java developers built on top of Spring AI that provides seamless integration with Alibaba Cloud QWen LLM services and cloud-native infrastructures.&lt;/p&gt; &#xA;&lt;h2&gt;Get Started&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://sca.aliyun.com/ai/get-started/&#34;&gt;quick start&lt;/a&gt; for how to quickly add generative AI to your Spring Boot applications.&lt;/p&gt; &#xA;&lt;p&gt;Overall, it takes only two steps to turn your Spring Boot application into an intelligent agent:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Because Spring AI Alibaba is developed based on Spring Boot 3.x, it requires JDK version 17 and above.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Add &#39;spring-ai-alibaba-starter&#39; dependency to your project.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;&#x9;&amp;lt;groupId&amp;gt;com.alibaba.cloud.ai&amp;lt;/groupId&amp;gt;&#xA;&#x9;&amp;lt;artifactId&amp;gt;spring-ai-alibaba-starter&amp;lt;/artifactId&amp;gt;&#xA;&#x9;&amp;lt;version&amp;gt;1.0.0-M3.2&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;NOTICE: Since spring-ai related packages haven&#39;t been published to the central repo yet, it&#39;s needed to add the following maven repository to your project in order to successfully resolve artifacts like spring-ai-core.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;repositories&amp;gt;&#xA;&#x9;&amp;lt;repository&amp;gt;&#xA;&#x9;&#x9;&amp;lt;id&amp;gt;spring-milestones&amp;lt;/id&amp;gt;&#xA;&#x9;&#x9;&amp;lt;name&amp;gt;Spring Milestones&amp;lt;/name&amp;gt;&#xA;&#x9;&#x9;&amp;lt;url&amp;gt;https://repo.spring.io/milestone&amp;lt;/url&amp;gt;&#xA;&#x9;&#x9;&amp;lt;snapshots&amp;gt;&#xA;&#x9;&#x9;&#x9;&amp;lt;enabled&amp;gt;false&amp;lt;/enabled&amp;gt;&#xA;&#x9;&#x9;&amp;lt;/snapshots&amp;gt;&#xA;&#x9;&amp;lt;/repository&amp;gt;&#xA;&amp;lt;/repositories&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;p&gt;Addendum: If the mirrorOf tag in your local Maven settings. xml is configured with the wildcard *, please modify it according to the following example.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;mirror&amp;gt;&#xA;  &amp;lt;id&amp;gt;xxxx&amp;lt;/id&amp;gt;&#xA;  &amp;lt;mirrorOf&amp;gt;*,!spring-milestones&amp;lt;/mirrorOf&amp;gt;&#xA;  &amp;lt;name&amp;gt;xxxx&amp;lt;/name&amp;gt;&#xA;  &amp;lt;url&amp;gt;xxxx&amp;lt;/url&amp;gt;&#xA;&amp;lt;/mirror&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Inject &lt;code&gt;ChatClient&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@RestController&#xA;public class ChatController {&#xA;&#xA;&#x9;private final ChatClient chatClient;&#xA;&#xA;&#x9;public ChatController(ChatClient.Builder builder) {&#xA;&#x9;&#x9;this.chatClient = builder.build();&#xA;&#x9;}&#xA;&#xA;&#x9;@GetMapping(&#34;/chat&#34;)&#xA;&#x9;public String chat(String input) {&#xA;&#x9;&#x9;return this.chatClient.prompt()&#xA;&#x9;&#x9;&#x9;&#x9;.user(input)&#xA;&#x9;&#x9;&#x9;&#x9;.call()&#xA;&#x9;&#x9;&#x9;&#x9;.content();&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;More examples can be found at &lt;a href=&#34;https://raw.githubusercontent.com/alibaba/spring-ai-alibaba/main/spring-ai-alibaba-examples&#34;&gt;spring-ai-alibaba-examples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Hello World&lt;/li&gt; &#xA; &lt;li&gt;Chat Model&lt;/li&gt; &#xA; &lt;li&gt;Multi Model&lt;/li&gt; &#xA; &lt;li&gt;Function Calling&lt;/li&gt; &#xA; &lt;li&gt;Structured Output&lt;/li&gt; &#xA; &lt;li&gt;Prompt&lt;/li&gt; &#xA; &lt;li&gt;RAG&lt;/li&gt; &#xA; &lt;li&gt;Flight Booking Playground, an advanced example showcasing usage of prompt template, function calling, chat memory and rag at the same time.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Core Features&lt;/h2&gt; &#xA;&lt;p&gt;Spring AI Alibaba provides the following features, read the &lt;a href=&#34;https://sca.aliyun.com/ai&#34;&gt;documentation&lt;/a&gt; on our website for more details of how to use these features.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for Alibaba Cloud QWen Model and Dashscope Model service.&lt;/li&gt; &#xA; &lt;li&gt;Support high-level AI agent abstraction -- ChatClient.&lt;/li&gt; &#xA; &lt;li&gt;Support various Model types like Chat, Text to Image, Audio Transcription, Text to Speech.&lt;/li&gt; &#xA; &lt;li&gt;Both synchronous and stream API options are supported.&lt;/li&gt; &#xA; &lt;li&gt;Mapping of AI Model output to POJOs.&lt;/li&gt; &#xA; &lt;li&gt;Portable API across Vector Store providers.&lt;/li&gt; &#xA; &lt;li&gt;Function calling.&lt;/li&gt; &#xA; &lt;li&gt;Spring Boot Auto Configuration and Starters.&lt;/li&gt; &#xA; &lt;li&gt;RAG (Retrieval-Augmented Generation) support: DocumentReader, Splitter, Embedding, VectorStore, and Retriever.&lt;/li&gt; &#xA; &lt;li&gt;Support conversation with ChatMemory&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;Spring AI Alibaba aims to reduce the complexity of building ai native java applications, from development, evaluation to deployment and observability. In order to achieve that, we provide both open-source framework and ecosystem integrations around it, below are the features that we plan to support in the near future:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Prompt Template Management&lt;/li&gt; &#xA; &lt;li&gt;Event Driven AI Application&lt;/li&gt; &#xA; &lt;li&gt;Support of more Vector Databases&lt;/li&gt; &#xA; &lt;li&gt;Function Deployment&lt;/li&gt; &#xA; &lt;li&gt;Observability&lt;/li&gt; &#xA; &lt;li&gt;AI proxy support: prompt filtering, rate limit, multiple Model, etc.&lt;/li&gt; &#xA; &lt;li&gt;Development Tools&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alibaba/spring-ai-alibaba/main/docs/imgs/spring-ai-alibaba-arch.png&#34; alt=&#34;ai-native-architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.spring.io/spring-ai/reference/index.html&#34;&gt;Spring AI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sca.aliyun.com/docs/ai/overview/&#34;&gt;Spring AI Alibaba&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://help.aliyun.com/zh/model-studio/getting-started/what-is-model-studio/&#34;&gt;Alibaba Cloud Dashscope Model Service Platform (阿里云百炼模型服务及应用开发平台)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contact Us&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dingtalk Group (钉钉群), search &lt;code&gt;64485010179&lt;/code&gt; and join.&lt;/li&gt; &#xA; &lt;li&gt;Wechat Group (微信公众号), scan the QR code below and follow us.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/alibaba/spring-ai-alibaba/main/docs/imgs/wechat-account.png&#34; style=&#34;width:260px;&#34;&gt;</summary>
  </entry>
</feed>