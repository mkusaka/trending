<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-10T01:34:33Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>SpindleSec/cve-2022-31692</title>
    <updated>2022-11-10T01:34:33Z</updated>
    <id>tag:github.com,2022-11-10:/SpindleSec/cve-2022-31692</id>
    <link href="https://github.com/SpindleSec/cve-2022-31692" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A project demonstrating an app that is vulnerable to Spring Security authorization bypass CVE-2022-31692&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CVE-2022-31692 Demo&lt;/h1&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;A simple Spring Boot application demonstrating configuration that is vulnerable to &lt;a href=&#34;https://tanzu.vmware.com/security/cve-2022-31692&#34;&gt;CVE-2022-31692&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This vulnerability may attract attention due to its severity - it has a CVSS 3.x base score of 9.8 as it allows authentication bypass. The purpose of this project is to demonstrate the conditions described in the advisory, which lead to the vulnerability being applicable.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The application expects that Spring Security applies security to forward and include dispatcher types.&lt;/li&gt; &#xA; &lt;li&gt;The application uses the &lt;code&gt;AuthorizationFilter&lt;/code&gt; either manually or via the &lt;code&gt;authorizeHttpRequests()&lt;/code&gt; method.&lt;/li&gt; &#xA; &lt;li&gt;The application configures the &lt;code&gt;FilterChainProxy&lt;/code&gt; to apply to forward and/or include requests (e.g. &lt;code&gt;spring.security.filter.dispatcher-types = request, error, async, forward, include&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;The application may forward or include the request to a higher privilege-secured endpoint.&lt;/li&gt; &#xA; &lt;li&gt;The application configures Spring Security to apply to every dispatcher type via &lt;code&gt;authorizeHttpRequests().shouldFilterAllDispatcherTypes(true)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For reference, I&#39;m pretty sure &lt;a href=&#34;https://github.com/spring-projects/spring-security/commit/1f481aafff14f324ffe2b43a973d3d5f54ae92d4&#34;&gt;this&lt;/a&gt; is the commit that addresses the vulnerability.&lt;/p&gt; &#xA;&lt;h2&gt;Demonstration&lt;/h2&gt; &#xA;&lt;p&gt;The application has three URLs:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;/&lt;/code&gt; The index page&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/admin&lt;/code&gt; An admin page, which requires the user to provide Basic auth (creds &#34;user&#34;/&#34;pass&#34;) and be assigned the ROLE_ADMIN role&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/forward&lt;/code&gt; A server-side forward to the admin page&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Access controls are specified via authorizeHttpRequests() in the SecurityConfig class.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.authorizeHttpRequests((authz) -&amp;gt; authz&#xA;&#x9;.antMatchers(&#34;/&#34;).permitAll()&#xA;&#x9;.antMatchers(&#34;/forward&#34;).permitAll()&#xA;&#x9;.antMatchers(&#34;/admin&#34;).hasAuthority(&#34;ROLE_ADMIN&#34;)&#xA;&#x9;.shouldFilterAllDispatcherTypes(true)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Expected behaviours&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;User accesses &lt;code&gt;/&lt;/code&gt; and is not authenticated (thanks to &lt;code&gt;permitAll()&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;User accesses &lt;code&gt;/admin&lt;/code&gt; . They don&#39;t provide authentication, and the request is rejected (401 Not authorized).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;User accesses &lt;code&gt;/admin&lt;/code&gt; . They provide valid authentication, but the request is still rejected (403 Unauthorised) because they do not have the required role &lt;code&gt;.hasAuthority(&#34;ROLE_ADMIN&#34;)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;User accesses &lt;code&gt;/forward&lt;/code&gt;. Their requests passes through the security filter chain for GET /forward, which passes as valid (thanks to &lt;code&gt;permitAll()&lt;/code&gt;). The controller processes the request, and returns &lt;code&gt;forward:/admin&lt;/code&gt; to the Dispatcher. As instructed by the &lt;code&gt;spring.security.filter.dispatcher-types&lt;/code&gt; and &lt;code&gt;.shouldFilterAllDispatcherTypes(true)&lt;/code&gt; settings, this is a FORWARD type, so should be passed through the filter chain again. This second pass through the filter results in the request being rejected (again, thanks to &lt;code&gt;hasAuthority(&#34;ROLE_ADMIN&#34;)&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Actual behaviour&lt;/h3&gt; &#xA;&lt;p&gt;User accesses &lt;code&gt;/forward&lt;/code&gt;, the request is passed through the filter chain once, and passes as valid. The forward is processed, but instead of being passed through the chain again, it is just passed as valid, and the admin page is returned.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cyrildiagne/ar-cptext</title>
    <updated>2022-11-10T01:34:33Z</updated>
    <id>tag:github.com,2022-11-10:/cyrildiagne/ar-cptext</id>
    <link href="https://github.com/cyrildiagne/ar-cptext" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AR Copy Paste - Text Proto&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AR Copy Paste - Text Proto&lt;/h1&gt; &#xA;&lt;p&gt;An AR+ML prototype that extract text from your surroundings using &lt;a href=&#34;https://raw.githubusercontent.com/cyrildiagne/ar-cptext/master/#&#34;&gt;MLKit&lt;/a&gt; and interactively transfer to desktop using &lt;a href=&#34;https://raw.githubusercontent.com/cyrildiagne/ar-cptext/master/#&#34;&gt;ARCore&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/cyrildiagne/ar-cptext/master/#&#34;&gt;Electron&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more technical informations: &lt;a href=&#34;https://twitter.com/cyrildiagne&#34;&gt;Thread with technical insights&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This is a highly experimental research prototype (I can only provide minimal support)&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;re looking for an app based on this research: &lt;a href=&#34;https://arcopypaste.app&#34;&gt;arcopypaste.app&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup &amp;amp; run&lt;/h2&gt; &#xA;&lt;p&gt;This prototype runs as 2 separate modules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cyrildiagne/ar-cptext/master/mobile&#34;&gt;Mobile&lt;/a&gt; - A native Android mobile app&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cyrildiagne/ar-cptext/master/desktop&#34;&gt;Desktop&lt;/a&gt; - A cross platform desktop app made with Electron&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Thanks and aknowledgements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/digital-curry/firebase-mlkit-textdetection-in-android-using-firebase-ml-vision-apis-with-live-camera-72ef47ad4ebd&#34;&gt;Ajeet Kumar Medium Post&lt;/a&gt; about Text Detection with MLKit&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>spring-cloud/spring-cloud-kubernetes</title>
    <updated>2022-11-10T01:34:33Z</updated>
    <id>tag:github.com,2022-11-10:/spring-cloud/spring-cloud-kubernetes</id>
    <link href="https://github.com/spring-cloud/spring-cloud-kubernetes" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Kubernetes integration with Spring Cloud Discovery Client, Configuration, etc...&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>