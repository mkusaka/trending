<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-16T01:32:35Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>alibaba/AGEIPort</title>
    <updated>2022-12-16T01:32:35Z</updated>
    <id>tag:github.com,2022-12-16:/alibaba/AGEIPort</id>
    <link href="https://github.com/alibaba/AGEIPort" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AGEIPort Alibaba Generic Export Import Framework&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/AGEIPort/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/AGEIPort/community.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/alibaba/AGEIPort/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-green&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;长期招聘，联系邮箱：&lt;a href=&#34;mailto:guijie.rgj@alibaba-inc.com&#34;&gt;guijie.rgj@alibaba-inc.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;简介&lt;/h2&gt; &#xA;&lt;p&gt;AGEIPort 是数字供应链孵化并在阿里巴巴集团内广泛使用的一套性能卓越、稳定可靠、功能丰富、易于扩展、生态完整的数据导入导出方案，致力于帮助开发者在toB复杂业务场景下能够快速交付高性能、体验优、易维护的数据导入导出功能，如用户页面上的Excel/CSV数据文件上传和下载。目前在阿里巴巴集团内部已有盒马、菜鸟、本地生活、阿里健康、钉钉、淘系等部门有较多使用，并成为多个技术组件的基础底座，经历多次618和双11大促考验，稳定导入导出数据300~400亿条/月。&lt;/p&gt; &#xA;&lt;p&gt;AGEIPort 基于事件驱动架构设计整体框架，并遵循先进的设计理念：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;透明化的集群/单机执行、串行/并行执行，可以大幅提升数据处理性能，开发者只需关注业务逻辑处理。&lt;/li&gt; &#xA; &lt;li&gt;支持实时任务进度计算和反馈，避免MOCK数据处理进度，提升用户体验。&lt;/li&gt; &#xA; &lt;li&gt;面向toB复杂业务场景，从多种方式（声明定义、动态定义）、多种维度（配置、插件、策略、SPI）可以满足各种场景的个性需求，可作为平台化、PaaS/SaaS型产品的基础底座。&lt;/li&gt; &#xA; &lt;li&gt;沉淀多种组件，多种场景、多种功能开箱即用。&lt;/li&gt; &#xA; &lt;li&gt;秉承GitOps设计理念，将相关的不可变基础设施封装在应用Git仓库内部，可以使交付物更快、更稳定和更安全的发布和回滚。&lt;/li&gt; &#xA; &lt;li&gt;去中心化架构，业务应用自组集群资源隔离，保证业务功能有较高的隔离性、可伸缩性和可用性。&lt;/li&gt; &#xA; &lt;li&gt;标准化任务处流程和代码编写，定义出一个数据处理任务的流程与用户需实现的接口，接口间职责分离，标准化用户导入导出代码的编写，提高代码的可维护性。&lt;/li&gt; &#xA; &lt;li&gt;明确业务领域对象，通过设计泛型接口，明确导入导出代码中的领域模型，可以避免业务代码中大量使用Map、JSON传参，提高代码的可维护性。&lt;/li&gt; &#xA; &lt;li&gt;记录业务代码执行过程，辅助支持业务代码性能优化&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;GEI整体架构如图所示&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alibaba/AGEIPort/master/docs/zh/img/architechture.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;代码层面主要主要分为3个模块&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;ageiport-processor（必须模块），processor模块是框架的核心，对应上图的大部分逻辑。开发者在需要执行数据处理的业务应用中依赖并实现此模块中对应的接口，将业务逻辑编写到接口实现中，任务执行过程中会回调用户实现的接口，向用户的业务代码传输数据执行业务逻辑。processor 模块中包括本地API和HTTPAPI，用户可以在当前或者外部应用调用接口，创建任务实例在processor所在的业务应用创建并执行。&lt;/li&gt; &#xA; &lt;li&gt;ageiport-task（必须模块），task模块是框架任务处理模块，与数据库交互，向processor模块暴露HTTP接口，以支持processor模块任务执行过程中对任务定义和任务实例进行增删改查。开发者需要部署此模块并连接自己的数据库，设置部署此模块的节点网络（如DNS/K8S Service等）保证processor模块网络访问到此task模块的部署节点&lt;/li&gt; &#xA; &lt;li&gt;ageiport-web（可选模块），web模块为前端页面提供的HTTP/Websocket接口（如任务创建、查询、上传文件、下载文件等），减少开发者重复开发Controller代码，对应上图中红色部分。若web模块的功能不符合要求用户可以自行编写Controller代码，调用processor模块的HTTPAPI创建任务实例在processor所在的业务应用创建并执行。后续会开源与web模块配套的前端组件，提高开发者生产效率。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;基本概念&lt;/h2&gt; &#xA;&lt;h3&gt;主任务（Main Task）&lt;/h3&gt; &#xA;&lt;p&gt;执行一次导入导出任务，框架会选择一台业务机器作为主任务机器，主任务机器执行GEI框架的代码，执行一些逻辑包括接受本次任务、任务分片，任务分发、任务进度统计、文件合并等工作。 ps：单机模式主任务和子任务在一台机器&lt;/p&gt; &#xA;&lt;h3&gt;子任务(Sub Task)&lt;/h3&gt; &#xA;&lt;p&gt;子任务是用户逻辑代码的执行者，每个子任务执行的是整体任务的一部分，举个例子，导出1000条数据，如果分成10个子任务执行，每个子任务只负责自己范围的100条数据的导出。默认的子任务是根据totalCount和sliceSize计算得出切分为几个子任务，子任务分片逻辑可自定义。&lt;/p&gt; &#xA;&lt;h3&gt;分片（Slice）&lt;/h3&gt; &#xA;&lt;p&gt;分片顾名思义，就是将一次导入导出的全量数据或条件分成一个个的片段，每个分片是整体的一部分。以导出来说，根据本次导出数据量和配置的分片大小，框架计算总共分多少片，每一片的size和偏移(offset)是多少。&lt;/p&gt; &#xA;&lt;h3&gt;偏移（Offset）&lt;/h3&gt; &#xA;&lt;p&gt;框架中偏移的概念用在分片中，举一个例子，一次导出10000条数据，分片大小为1000，则第一个分片的偏移为0，第二个分片的偏移为1000，依次类推。&lt;/p&gt; &#xA;&lt;h4&gt;动态列（Dynamic Column）&lt;/h4&gt; &#xA;&lt;p&gt;很多场景下导入导出文件的数据列是动态变化的，比如7月8日导出的数据列名称是7.8/7.9/7.10，7月9日导出的数据列名称是7.9/7.10/7.11&lt;/p&gt; &#xA;&lt;h4&gt;泛型参数QUERY&lt;/h4&gt; &#xA;&lt;p&gt;QueryObject，映射到查询参数的类，比如查询参数{&#34;name&#34;:&#34;tom&#34;}，则QueryObject应包含name字段，前端传递{&#34;name&#34;:&#34;tom&#34;}参数时，会构造出一个 name=tom的QueryObject。&lt;/p&gt; &#xA;&lt;h4&gt;泛型参数VIEW&lt;/h4&gt; &#xA;&lt;p&gt;ViewObject，映射到文件中某行数据的类，比如Excel中的每行数据会被构造为这里的一个对象。&lt;/p&gt; &#xA;&lt;h4&gt;泛型参数DATA&lt;/h4&gt; &#xA;&lt;p&gt;DataObject，映射到实际写入数据源或接口的类型，一般是ViewObject执行转换后得到的类型，从文件中读取的数据，很多情况下不能直接插入数据源，需要补齐一些数据，或者添加一些额外的字段，这时候就需要有个补齐或转换操作。如果没有这种需求，V和D可以定义为相同的类型。&lt;/p&gt; &#xA;&lt;h2&gt;快速开始&lt;/h2&gt; &#xA;&lt;p&gt;所有示例代码在ageiport-test模块中可见&lt;/p&gt; &#xA;&lt;p&gt;Maven依赖&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;ageiport-processor-core&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt;&#xA;    &amp;lt;scope&amp;gt;compile&amp;lt;/scope&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;org.junit.jupiter&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;junit-jupiter&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;5.8.2&amp;lt;/version&amp;gt;&#xA;    &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;   &amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;1.18.22&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;定义几个导入导出用到的POJO分别对应QUERY/VIEW/DATA三个泛型&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@ToString&#xA;@Getter&#xA;@Setter&#xA;public class Data {&#xA;    private Integer id;&#xA;    private String name;&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;@Getter&#xA;@Setter&#xA;public class Query {&#xA;    private Integer totalCount = 10000;&#xA;    private List&amp;lt;View&amp;gt; checkErrorData;&#xA;    private List&amp;lt;View&amp;gt; writeErrorData;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;@Getter&#xA;@Setter&#xA;public class View {&#xA;    @ViewField(headerName = &#34;编码&#34;)&#xA;    private Integer id;&#xA;    @ViewField(headerName = &#34;姓名&#34;)&#xA;    private String name;&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;导出&lt;/h3&gt; &#xA;&lt;p&gt;更多样例及文档说明：&lt;a href=&#34;https://raw.githubusercontent.com/alibaba/AGEIPort/master/docs/zh/%E5%AF%BC%E5%87%BA%E6%A0%B7%E4%BE%8B%E5%8F%8A%E6%96%87%E6%A1%A3%E8%AF%B4%E6%98%8E.md&#34;&gt;导出样例及文档说明&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;第1步，实现导出Processor&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;实现ExportProcessor接口，并使用上文定义POJO Query、Data、View作为接口的泛型参数&lt;/li&gt; &#xA; &lt;li&gt;实现ExportProcessor接口的TotalCount方法，根据Query返回当前导出的总条数（比如根据Query构造Select Count SQL，并返回Count值）&lt;/li&gt; &#xA; &lt;li&gt;实现ExportProcessor接口的queryData方法，根据Query返回当前分页的实际数据（比如根据Query构造Select ... limit n,m SQL，并返回数据行），如果TotalCount有10000，分片大小默认为1000，则queryData方法会被并行调用10次，入参BizExportPage会携带不同分页信息。&lt;/li&gt; &#xA; &lt;li&gt;实现ExportProcessor接口的convert方法，根据页面展示规则，把queryData返回的Data列表转为View列表。View列表会最终输出给用户。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;import com.alibaba.ageiport.common.utils.BeanUtils;&#xA;import com.alibaba.ageiport.processor.core.annotation.ExportSpecification;&#xA;import com.alibaba.ageiport.processor.core.exception.BizException;&#xA;import com.alibaba.ageiport.processor.core.model.api.BizExportPage;&#xA;import com.alibaba.ageiport.processor.core.model.api.BizUser;&#xA;import com.alibaba.ageiport.processor.core.task.exporter.ExportProcessor;&#xA;import com.alibaba.ageiport.test.processor.core.model.Data;&#xA;import com.alibaba.ageiport.test.processor.core.model.Query;&#xA;import com.alibaba.ageiport.test.processor.core.model.View;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.List;&#xA;&#xA;&#xA;//1.实现ExportProcessor接口&#xA;@ExportSpecification(code = &#34;StandaloneExportProcessor&#34;, name = &#34;StandaloneExportProcessor&#34;)&#xA;public class StandaloneExportProcessor implements ExportProcessor&amp;lt;Query, Data, View&amp;gt; {&#xA;&#xA;    //2.实现ExportProcessor接口的TotalCount方法&#xA;    @Override&#xA;    public Integer totalCount(BizUser bizUser, Query query) throws BizException {&#xA;        return query.getTotalCount();&#xA;    }&#xA;&#xA;    //3.实现ExportProcessor接口的queryData方法&#xA;    @Override&#xA;    public List&amp;lt;Data&amp;gt; queryData(BizUser user, Query query, BizExportPage bizExportPage) throws BizException {&#xA;        List&amp;lt;Data&amp;gt; dataList = new ArrayList&amp;lt;&amp;gt;();&#xA;&#xA;        Integer totalCount = query.getTotalCount();&#xA;        for (int i = 1; i &amp;lt;= totalCount; i++) {&#xA;            final Data data = new Data();&#xA;            data.setId(i);&#xA;            data.setName(&#34;name&#34; + i);&#xA;            dataList.add(data);&#xA;        }&#xA;        return dataList;&#xA;    }&#xA;&#xA;    //4.实现ExportProcessor接口的convert方法&#xA;    @Override&#xA;    public List&amp;lt;View&amp;gt; convert(BizUser user, Query query, List&amp;lt;Data&amp;gt; data) throws BizException {&#xA;        List&amp;lt;View&amp;gt; dataList = new ArrayList&amp;lt;&amp;gt;();&#xA;        for (Data datum : data) {&#xA;            View view = BeanUtils.cloneProp(datum, View.class);&#xA;            dataList.add(view);&#xA;        }&#xA;        return dataList;&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;第2步，注册第1步实现的导出Processor&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;项目目录的resources文件夹下创建META-INF文件夹&lt;/li&gt; &#xA; &lt;li&gt;META-INF文件夹下创建名为com.alibaba.ageiport.processor.core.Processor的文本文件&lt;/li&gt; &#xA; &lt;li&gt;添加一行配置记录：StandaloneExportProcessor=com.alibaba.ageiport.test.processor.core.exporter.StandaloneExportProcessor，其中等号左侧为ExportSpecification中的code，等号右侧为导出实现类的全类名&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;第3步，运行单元测试，执行任务&lt;/p&gt; &#xA;&lt;p&gt;此步骤实际生产环境中一般由API触发，用户在页面点击触发执行导出任务&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;初始化AgeiPort实例，在单测中为了尽可能少的依赖外部组件，我们使用AgeiPortOptions.Debug()测试配置来初始化AgeiPort实例。若为生产环境，AgeiPort实例应被维护到应用的上下文中，比如在Spring的Configuration中初始化AgeiPort并作为一个bean存储在Spring上下文中。&lt;/li&gt; &#xA; &lt;li&gt;构造查询参数TaskExecuteParam，必须传入：TaskSpecificationCode，标识某一个任务）；BizUserId标识当前任务的触发人，上文定义的Query对象需要以JSON的格式传入。&lt;/li&gt; &#xA; &lt;li&gt;调用本地方法executeTask，开始执行任务，并获取任务实例ID。用户可根据自身技术线路封装远程调用接口。processor包中也包含了可远程执行任务的HTTP API，详情见：API参考文档。&lt;/li&gt; &#xA; &lt;li&gt;使用内部封装的TaskHelp方法判断任务是否执行成功，TestHelp类主要是封装了一些判断任务执行状态的断言，在后文中给出代码&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;import com.alibaba.ageiport.common.utils.JsonUtil;&#xA;import com.alibaba.ageiport.processor.core.AgeiPort;&#xA;import com.alibaba.ageiport.processor.core.AgeiPortOptions;&#xA;import com.alibaba.ageiport.processor.core.spi.service.TaskExecuteParam;&#xA;import com.alibaba.ageiport.processor.core.spi.service.TaskExecuteResult;&#xA;import com.alibaba.ageiport.test.processor.core.TestHelper;&#xA;import com.alibaba.ageiport.test.processor.core.model.Query;&#xA;import lombok.SneakyThrows;&#xA;import lombok.extern.slf4j.Slf4j;&#xA;import org.junit.jupiter.api.Assertions;&#xA;import org.junit.jupiter.api.Test;&#xA;&#xA;@Slf4j&#xA;public class StandaloneExportProcessorTest {&#xA;&#xA;    @SneakyThrows&#xA;    @Test&#xA;    public void test() {&#xA;        //1.初始化AgeiPort实例&#xA;        AgeiPortOptions options = new AgeiPortOptions();&#xA;        AgeiPortOptions.Debug debug = new AgeiPortOptions.Debug();&#xA;        options.setDebug(debug);&#xA;        AgeiPort ageiPort = AgeiPort.ageiPort(options);&#xA;&#xA;        //2.构造查询参数TaskExecuteParam&#xA;        Query query = new Query();&#xA;        query.setTotalCount(100);&#xA;&#xA;        //3.调用本地方法executeTask，开始执行任务，并获取任务实例ID。&#xA;        TaskExecuteParam request = new TaskExecuteParam();&#xA;        request.setTaskSpecificationCode(StandaloneExportProcessor.class.getSimpleName());&#xA;        request.setBizUserId(&#34;userId&#34;);&#xA;        request.setBizQuery(JsonUtil.toJsonString(query));&#xA;        TaskExecuteResult response = ageiPort.getTaskService().executeTask(request);&#xA;        Assertions.assertTrue(response.getSuccess());&#xA;&#xA;        //4.使用内部封装的TaskHelp方法判断任务是否执行成功&#xA;        TestHelper testHelper = new TestHelper(ageiPort);&#xA;        testHelper.assertWithFile(response.getMainTaskId(), query.getTotalCount());&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;第4步，查询任务进度，下载导出文件，见assertWithFile方法&lt;/p&gt; &#xA;&lt;p&gt;此步骤生产环境中一般由API触发，在用户触发任务后，页面自动轮询任务进度，最终将生成的文件返回给用户，详见API参考文档。&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;创建进度查询请求参数GetTaskProgressParam，其中MainTaskId为上文创建任务返回的任务ID&lt;/li&gt; &#xA; &lt;li&gt;调用本地方法，查询任务进度。用户可根据自身技术线路封装远程调用接口。processor包中也包含了可远程执行任务的HTTP API，详情见：API参考文档。&lt;/li&gt; &#xA; &lt;li&gt;轮询任务进度，直至任务完成或出错&lt;/li&gt; &#xA; &lt;li&gt;任务完成后，查询任务实例信息，任务输出的文件信息&lt;/li&gt; &#xA; &lt;li&gt;下载文件到本地&lt;/li&gt; &#xA; &lt;li&gt;断言判断产生的文件是否符合期望&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;import com.alibaba.ageiport.common.feature.FeatureUtils;&#xA;import com.alibaba.ageiport.common.utils.JsonUtil;&#xA;import com.alibaba.ageiport.ext.arch.ExtensionLoader;&#xA;import com.alibaba.ageiport.processor.core.AgeiPort;&#xA;import com.alibaba.ageiport.processor.core.constants.MainTaskFeatureKeys;&#xA;import com.alibaba.ageiport.processor.core.model.core.ColumnHeader;&#xA;import com.alibaba.ageiport.processor.core.model.core.impl.ColumnHeaderImpl;&#xA;import com.alibaba.ageiport.processor.core.model.core.impl.ColumnHeadersImpl;&#xA;import com.alibaba.ageiport.processor.core.model.core.impl.MainTask;&#xA;import com.alibaba.ageiport.processor.core.spi.file.DataGroup;&#xA;import com.alibaba.ageiport.processor.core.spi.file.FileReader;&#xA;import com.alibaba.ageiport.processor.core.spi.file.FileReaderFactory;&#xA;import com.alibaba.ageiport.processor.core.spi.service.TaskProgressParam;&#xA;import com.alibaba.ageiport.processor.core.spi.service.TaskProgressResult;&#xA;import lombok.extern.slf4j.Slf4j;&#xA;import org.junit.jupiter.api.Assertions;&#xA;&#xA;import java.io.File;&#xA;import java.io.InputStream;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;&#xA;&#xA;@Slf4j&#xA;public class TestHelper {&#xA;&#xA;    private AgeiPort ageiPort;&#xA;&#xA;    public TestHelper(AgeiPort ageiPort) {&#xA;        this.ageiPort = ageiPort;&#xA;    }&#xA;&#xA;    public String file(String fileName) {&#xA;        return &#34;.&#34; + File.separator + &#34;files&#34; + File.separator + &#34;import-xlsx&#34; + File.separator + fileName;&#xA;    }&#xA;&#xA;    public void assertWithoutFile(String mainTaskId) throws InterruptedException {&#xA;        GetTaskProgressParam progressRequest = new GetTaskProgressParam();&#xA;        progressRequest.setMainTaskId(mainTaskId);&#xA;        TaskProgressResult taskProgress = ageiPort.getTaskService().getTaskProgress(progressRequest);&#xA;        int sleepTime = 0;&#xA;        log.info(&#34;getTaskProgress, taskProgress:{}&#34;, taskProgress);&#xA;        while (taskProgress == null || !taskProgress.getIsFinished() &amp;amp;&amp;amp; !taskProgress.getIsError()) {&#xA;            Thread.sleep(1000);&#xA;            if (sleepTime++ &amp;gt; 100) {&#xA;                Assertions.assertTrue(taskProgress.getIsFinished() || taskProgress.getIsError());&#xA;            }&#xA;            taskProgress = ageiPort.getTaskService().getTaskProgress(progressRequest);&#xA;            if (taskProgress != null) {&#xA;                log.info(&#34;getTaskProgress, percent:{}, stageName:{}&#34;, taskProgress.getPercent(), taskProgress.getStageName());&#xA;            } else {&#xA;                log.info(&#34;no progress...&#34;);&#xA;            }&#xA;        }&#xA;        Assertions.assertTrue(taskProgress.getIsFinished());&#xA;        Assertions.assertEquals(1, taskProgress.getPercent());&#xA;    }&#xA;&#xA;    public void assertWithFile(String mainTaskId, Integer outputCount) throws InterruptedException {&#xA;        //1.创建进度查询请求参数GetTaskProgressParam&#xA;        GetTaskProgressParam progressRequest = new GetTaskProgressParam();&#xA;        progressRequest.setMainTaskId(mainTaskId);&#xA;        //2.调用本地方法，查询任务进度。&#xA;        TaskProgressResult taskProgress = ageiPort.getTaskService().getTaskProgress(progressRequest);&#xA;        int sleepTime = 0;&#xA;        log.info(&#34;getTaskProgress, taskProgress:{}&#34;, taskProgress);&#xA;        //3.轮询任务进度，直至任务完成或出错&#xA;        while (taskProgress == null || !taskProgress.getIsFinished() &amp;amp;&amp;amp; !taskProgress.getIsError()) {&#xA;            Thread.sleep(1000);&#xA;            if (sleepTime++ &amp;gt; 100) {&#xA;                Assertions.assertTrue(taskProgress.getIsFinished() || taskProgress.getIsError());&#xA;            }&#xA;            taskProgress = ageiPort.getTaskService().getTaskProgress(progressRequest);&#xA;            if (taskProgress != null) {&#xA;                log.info(&#34;getTaskProgress, percent:{}, stageName:{}&#34;, taskProgress.getPercent(), taskProgress.getStageName());&#xA;            } else {&#xA;                log.info(&#34;no progress...&#34;);&#xA;            }&#xA;        }&#xA;        Assertions.assertTrue(taskProgress.getIsFinished());&#xA;        Assertions.assertEquals(1, taskProgress.getPercent());&#xA;&#xA;        //4.任务完成后，查询任务实例信息，任务输出的文件信息&#xA;        MainTask mainTask = ageiPort.getTaskServerClient().getMainTask(taskProgress.getMainTaskId());&#xA;        String fileKey = FeatureUtils.getFeature(mainTask.getFeature(), MainTaskFeatureKeys.OUTPUT_FILE_KEY);&#xA;        boolean exists = ageiPort.getFileStore().exists(fileKey, new HashMap&amp;lt;&amp;gt;());&#xA;        Assertions.assertTrue(exists);&#xA;&#xA;        String runtimeParam = mainTask.getRuntimeParam();&#xA;        String fileType = FeatureUtils.getFeature(runtimeParam, MainTaskFeatureKeys.RT_FILE_TYPE_KEY);&#xA;        String headersString = FeatureUtils.getFeature(runtimeParam, MainTaskFeatureKeys.RT_COLUMN_HEADERS_KEY);&#xA;        List&amp;lt;ColumnHeaderImpl&amp;gt; columnHeaderList = JsonUtil.toArrayObject(headersString, ColumnHeaderImpl.class);&#xA;        List&amp;lt;ColumnHeader&amp;gt; columnHeaderList1 = new ArrayList&amp;lt;&amp;gt;(columnHeaderList);&#xA;        ColumnHeadersImpl headers = new ColumnHeadersImpl(columnHeaderList1);&#xA;&#xA;        //5.下载文件到本地&#xA;        InputStream inputStream = ageiPort.getFileStore().get(fileKey, new HashMap&amp;lt;&amp;gt;());&#xA;        String outputFileReaderFactory = ageiPort.getOptions().getFileTypeReaderSpiMappings().get(fileType);&#xA;        final FileReaderFactory factory = ExtensionLoader.getExtensionLoader(FileReaderFactory.class).getExtension(outputFileReaderFactory);&#xA;&#xA;        //6.断言判断产生的文件是否符合期望&#xA;        FileReader fileReader = factory.create(ageiPort, mainTask, headers);&#xA;        fileReader.read(inputStream);&#xA;        DataGroup dataGroup = fileReader.finish();&#xA;        int count = 0;&#xA;        List&amp;lt;DataGroup.Data&amp;gt; data = dataGroup.getData();&#xA;        for (DataGroup.Data datum : data) {&#xA;            if (datum.getItems() != null) {&#xA;                count += datum.getItems().size();&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;导入&lt;/h3&gt; &#xA;&lt;p&gt;更多样例及文档说明：&lt;a href=&#34;https://raw.githubusercontent.com/alibaba/AGEIPort/master/docs/zh/%E5%AF%BC%E5%85%A5%E6%A0%B7%E4%BE%8B%E5%8F%8A%E6%96%87%E6%A1%A3%E8%AF%B4%E6%98%8E.md&#34;&gt;导入样例及文档说明&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;第0步，准备导入文件&lt;/p&gt; &#xA;&lt;p&gt;此步骤在生产环境中不需要，一般导入的文件由用户通过Web页面上传&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;项目目录的resources文件夹下创建import-xlsx文件夹&lt;/li&gt; &#xA; &lt;li&gt;在import-xlsx文件夹创建StandaloneImportProcessor.xlsx文件，包含两列编码、姓名（与View中的字段对应）&lt;/li&gt; &#xA; &lt;li&gt;在StandaloneImportProcessor.xlsx文件添加一些数据&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;第1步，实现导入Processor&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;实现ImportProcessor接口，并使用上文定义POJO Query、Data、View作为接口的泛型参数&lt;/li&gt; &#xA; &lt;li&gt;实现ImportProcessor接口的convertAndCheck方法，此方法负责检查导入的数据，文件中的View对象转为Data对象。返回值BizImportResult&amp;lt;View, Data&amp;gt;，当无错误数据时BizImportResult只设置View即可，若有错误数据则需设置View，View最终会被写到文件中输出给用户。&lt;/li&gt; &#xA; &lt;li&gt;实现ExportProcessor接口的write方法，此方法负责执行写入业务逻辑。返回值BizImportResult&amp;lt;View, Data&amp;gt;，当无错误数据时BizImportResult只设置View即可，若有错误数据则需设置View，View最终会被写到文件中输出给用户。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;&#xA;import com.alibaba.ageiport.common.logger.Logger;&#xA;import com.alibaba.ageiport.common.logger.LoggerFactory;&#xA;import com.alibaba.ageiport.common.utils.JsonUtil;&#xA;import com.alibaba.ageiport.processor.core.annotation.ImportSpecification;&#xA;import com.alibaba.ageiport.processor.core.model.api.BizUser;&#xA;import com.alibaba.ageiport.processor.core.task.importer.ImportProcessor;&#xA;import com.alibaba.ageiport.processor.core.task.importer.model.BizImportResult;&#xA;import com.alibaba.ageiport.processor.core.task.importer.model.BizImportResultImpl;&#xA;import com.alibaba.ageiport.test.processor.core.model.Data;&#xA;import com.alibaba.ageiport.test.processor.core.model.Query;&#xA;import com.alibaba.ageiport.test.processor.core.model.View;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.List;&#xA;&#xA;&#xA;//1.实现ImportProcessor接口&#xA;@ImportSpecification(code = &#34;StandaloneImportProcessor&#34;, name = &#34;StandaloneImportProcessor&#34;)&#xA;public class StandaloneImportProcessor implements ImportProcessor&amp;lt;Query, Data, View&amp;gt; {&#xA;&#xA;    Logger logger = LoggerFactory.getLogger(StandaloneImportProcessor.class);&#xA;&#xA;    //2.实现ImportProcessor接口的convertAndCheck方法&#xA;    @Override&#xA;    public BizImportResult&amp;lt;View, Data&amp;gt; convertAndCheck(BizUser user, Query query, List&amp;lt;View&amp;gt; views) {&#xA;        BizImportResultImpl&amp;lt;View, Data&amp;gt; result = new BizImportResultImpl&amp;lt;&amp;gt;();&#xA;&#xA;        List&amp;lt;Data&amp;gt; data = new ArrayList&amp;lt;&amp;gt;();&#xA;        for (View view : views) {&#xA;            Data datum = new Data();&#xA;            datum.setId(view.getId());&#xA;            datum.setName(view.getName());&#xA;            data.add(datum);&#xA;        }&#xA;&#xA;        result.setData(data);&#xA;        result.setView(query.getCheckErrorData());&#xA;        return result;&#xA;    }&#xA;&#xA;    //3.实现ExportProcessor接口的write方法，此方法负责执行写入业务逻辑。&#xA;    @Override&#xA;    public BizImportResult&amp;lt;View, Data&amp;gt; write(BizUser user, Query query, List&amp;lt;Data&amp;gt; data) {&#xA;        BizImportResultImpl&amp;lt;View, Data&amp;gt; result = new BizImportResultImpl&amp;lt;&amp;gt;();&#xA;        logger.info(JsonUtil.toJsonString(data));&#xA;        result.setView(query.getWriteErrorData());&#xA;        return result;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;第2步，注册第1步实现的导入Processor&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;项目目录的resources文件夹下创建META-INF文件夹&lt;/li&gt; &#xA; &lt;li&gt;META-INF文件夹下创建名为com.alibaba.ageiport.processor.core.Processor的文本文件&lt;/li&gt; &#xA; &lt;li&gt;添加一行配置记录：StandaloneImportProcessor=com.alibaba.ageiport.test.processor.core.importer.StandaloneImportProcessor，其中等号左侧为ImportSpecification中的code，等号右侧为导出实现类的全类名&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;第3步，运行单元测试，执行任务&lt;/p&gt; &#xA;&lt;p&gt;此步骤实际生产环境中一般由API触发，是用户从页面点击导入按钮上传文件触发的。&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;初始化AgeiPort实例，在单测中为了尽可能少的依赖外部组件，我们使用AgeiPortOptions.Debug()测试配置来初始化AgeiPort实例。若为生产环境，AgeiPort实例应被维护到应用的上下文中，比如在Spring的Configuration中初始化AgeiPort并作为一个bean存储在Spring上下文中。&lt;/li&gt; &#xA; &lt;li&gt;读取文件并将文件上传到文件存储中，获取文件的Key。&lt;/li&gt; &#xA; &lt;li&gt;构造查询参数TaskExecuteParam，必须传入：TaskSpecificationCode，标识某一个任务；BizUserId标识当前任务的触发人；InputFileKey为第2步中获取到的文件Key；上文定义的Query对象需要以JSON的格式传入。&lt;/li&gt; &#xA; &lt;li&gt;调用本地方法executeTask，开始执行任务，并获取任务实例ID。用户可根据自身技术线路封装远程调用接口。processor包中也包含了可远程执行任务的HTTP API，详情见：API参考文档。&lt;/li&gt; &#xA; &lt;li&gt;使用内部封装的TaskHelp方法判断任务是否执行成功，TestHelp类主要是封装了一些判断任务执行状态的断言，在后文中给出代码&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;import com.alibaba.ageiport.common.collections.Lists;&#xA;import com.alibaba.ageiport.common.utils.JsonUtil;&#xA;import com.alibaba.ageiport.processor.core.AgeiPort;&#xA;import com.alibaba.ageiport.processor.core.AgeiPortOptions;&#xA;import com.alibaba.ageiport.processor.core.spi.service.TaskExecuteParam;&#xA;import com.alibaba.ageiport.processor.core.spi.service.TaskExecuteResult;&#xA;import com.alibaba.ageiport.test.processor.core.TestHelper;&#xA;import com.alibaba.ageiport.test.processor.core.model.Query;&#xA;import com.alibaba.ageiport.test.processor.core.model.View;&#xA;import lombok.SneakyThrows;&#xA;import lombok.extern.slf4j.Slf4j;&#xA;import org.junit.jupiter.api.Assertions;&#xA;import org.junit.jupiter.api.Test;&#xA;&#xA;import java.io.InputStream;&#xA;import java.util.HashMap;&#xA;import java.util.UUID;&#xA;&#xA;@Slf4j&#xA;public class StandaloneImportProcessorTest {&#xA;&#xA;    //本例运行不会返回错误数据&#xA;    @SneakyThrows&#xA;    @Test&#xA;    public void test() {&#xA;        //1.初始化AgeiPort实例&#xA;        AgeiPortOptions options = new AgeiPortOptions();&#xA;        AgeiPortOptions.Debug debug = new AgeiPortOptions.Debug();&#xA;        options.setDebug(debug);&#xA;        AgeiPort ageiPort = AgeiPort.ageiPort(options);&#xA;&#xA;        //2.读取文件，并上传到文件存储中&#xA;        String taskCode = StandaloneImportProcessor.class.getSimpleName();&#xA;        TestHelper testHelper = new TestHelper(ageiPort);&#xA;        String filePath = testHelper.file(taskCode + &#34;.xlsx&#34;);&#xA;        InputStream inputStream = this.getClass().getClassLoader().getResourceAsStream(filePath);&#xA;        String fileKey = UUID.randomUUID().toString();&#xA;        ageiPort.getFileStore().save(fileKey, inputStream, new HashMap&amp;lt;&amp;gt;());&#xA;&#xA;        //3.构造查询参数TaskExecuteParam&#xA;        TaskExecuteParam request = new TaskExecuteParam();&#xA;        Query query = new Query();&#xA;        query.setTotalCount(100);&#xA;        request.setTaskSpecificationCode(taskCode);&#xA;        request.setBizUserId(&#34;userId&#34;);&#xA;        request.setBizQuery(JsonUtil.toJsonString(query));&#xA;        request.setInputFileKey(fileKey);&#xA;&#xA;        //4.调用本地方法executeTask，开始执行任务，并获取任务实例ID&#xA;        TaskExecuteResult response = ageiPort.getTaskService().executeTask(request);&#xA;&#xA;        //5.使用内部封装的TaskHelp方法判断任务是否执行成功&#xA;        Assertions.assertTrue(response.getSuccess());&#xA;        testHelper.assertWithoutFile(response.getMainTaskId());&#xA;    }&#xA;&#xA;    //本例运行会返回错误数据&#xA;    @SneakyThrows&#xA;    @Test&#xA;    public void testHasCheckError() {&#xA;        //1.初始化AgeiPort实例&#xA;        AgeiPortOptions options = new AgeiPortOptions();&#xA;        AgeiPortOptions.Debug debug = new AgeiPortOptions.Debug();&#xA;        options.setDebug(debug);&#xA;        AgeiPort ageiPort = AgeiPort.ageiPort(options);&#xA;&#xA;        //2.读取文件，并上传到文件存储中&#xA;        String taskCode = StandaloneImportProcessor.class.getSimpleName();&#xA;        TestHelper testHelper = new TestHelper(ageiPort);&#xA;        String filePath = testHelper.file(taskCode + &#34;.xlsx&#34;);&#xA;        InputStream inputStream = this.getClass().getClassLoader().getResourceAsStream(filePath);&#xA;        String fileKey = UUID.randomUUID().toString();&#xA;        ageiPort.getFileStore().save(fileKey, inputStream, new HashMap&amp;lt;&amp;gt;());&#xA;&#xA;        //3.构造查询参数TaskExecuteParam&#xA;        TaskExecuteParam request = new TaskExecuteParam();&#xA;        Query query = new Query();&#xA;        View view = new View();&#xA;        view.setId(1);&#xA;        view.setName(&#34;name1&#34;);&#xA;        query.setCheckErrorData(Lists.newArrayList(view));&#xA;        query.setTotalCount(100);&#xA;        request.setTaskSpecificationCode(taskCode);&#xA;        request.setBizUserId(&#34;userId&#34;);&#xA;        request.setBizQuery(JsonUtil.toJsonString(query));&#xA;        request.setInputFileKey(fileKey);&#xA;        &#xA;        //4.调用本地方法executeTask，开始执行任务，并获取任务实例ID&#xA;        TaskExecuteResult response = ageiPort.getTaskService().executeTask(request);&#xA;&#xA;        //5.使用内部封装的TaskHelp方法判断任务是否执行成功&#xA;        Assertions.assertTrue(response.getSuccess());&#xA;        testHelper.assertWithFile(response.getMainTaskId(), query.getErrorCount());&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;第4步，查询任务进度，下载导出文件，见assertWithFile方法&lt;/p&gt; &#xA;&lt;p&gt;此步骤生产环境中一般由API触发，在用户触发任务后，页面自动轮询任务进度，最终将生成的文件返回给用户，详见API参考文档。&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;创建进度查询请求参数GetTaskProgressParam，其中MainTaskId为上文创建任务返回的任务ID&lt;/li&gt; &#xA; &lt;li&gt;调用本地方法，查询任务进度。用户可根据自身技术线路封装远程调用接口。processor包中也包含了可远程执行任务的HTTP API，详情见：API参考文档。&lt;/li&gt; &#xA; &lt;li&gt;轮询任务进度，直至任务完成或出错&lt;/li&gt; &#xA; &lt;li&gt;若convertAndCheck和write方法返回的BizImportResult包含View，View数据会被写入到输出文件中&lt;/li&gt; &#xA; &lt;li&gt;若导入有错误数据文件输出，下载文件到本地&lt;/li&gt; &#xA; &lt;li&gt;若已下载错误文件，断言判断错误文件中的数据是否符合预期&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;import com.alibaba.ageiport.common.feature.FeatureUtils;&#xA;import com.alibaba.ageiport.common.utils.JsonUtil;&#xA;import com.alibaba.ageiport.ext.arch.ExtensionLoader;&#xA;import com.alibaba.ageiport.processor.core.AgeiPort;&#xA;import com.alibaba.ageiport.processor.core.constants.MainTaskFeatureKeys;&#xA;import com.alibaba.ageiport.processor.core.model.core.ColumnHeader;&#xA;import com.alibaba.ageiport.processor.core.model.core.impl.ColumnHeaderImpl;&#xA;import com.alibaba.ageiport.processor.core.model.core.impl.ColumnHeadersImpl;&#xA;import com.alibaba.ageiport.processor.core.model.core.impl.MainTask;&#xA;import com.alibaba.ageiport.processor.core.spi.file.DataGroup;&#xA;import com.alibaba.ageiport.processor.core.spi.file.FileReader;&#xA;import com.alibaba.ageiport.processor.core.spi.file.FileReaderFactory;&#xA;import com.alibaba.ageiport.processor.core.spi.service.TaskProgressParam;&#xA;import com.alibaba.ageiport.processor.core.spi.service.TaskProgressResult;&#xA;import lombok.extern.slf4j.Slf4j;&#xA;import org.junit.jupiter.api.Assertions;&#xA;&#xA;import java.io.File;&#xA;import java.io.InputStream;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;&#xA;&#xA;@Slf4j&#xA;public class TestHelper {&#xA;&#xA;    private AgeiPort ageiPort;&#xA;&#xA;    public TestHelper(AgeiPort ageiPort) {&#xA;        this.ageiPort = ageiPort;&#xA;    }&#xA;&#xA;    public String file(String fileName) {&#xA;        return &#34;.&#34; + File.separator + &#34;files&#34; + File.separator + &#34;import-xlsx&#34; + File.separator + fileName;&#xA;    }&#xA;&#xA;    public void assertWithoutFile(String mainTaskId) throws InterruptedException {&#xA;        //1.创建进度查询请求参数GetTaskProgressParam&#xA;        GetTaskProgressParam progressRequest = new GetTaskProgressParam();&#xA;        progressRequest.setMainTaskId(mainTaskId);&#xA;        //2.调用本地方法，查询任务进度。&#xA;        TaskProgressResult taskProgress = ageiPort.getTaskService().getTaskProgress(progressRequest);&#xA;        int sleepTime = 0;&#xA;        log.info(&#34;getTaskProgress, taskProgress:{}&#34;, taskProgress);&#xA;        //3.轮询任务进度，直至任务完成或出错&#xA;        while (taskProgress == null || !taskProgress.getIsFinished() &amp;amp;&amp;amp; !taskProgress.getIsError()) {&#xA;            Thread.sleep(1000);&#xA;            if (sleepTime++ &amp;gt; 100) {&#xA;                Assertions.assertTrue(taskProgress.getIsFinished() || taskProgress.getIsError());&#xA;            }&#xA;            taskProgress = ageiPort.getTaskService().getTaskProgress(progressRequest);&#xA;            if (taskProgress != null) {&#xA;                log.info(&#34;getTaskProgress, percent:{}, stageName:{}&#34;, taskProgress.getPercent(), taskProgress.getStageName());&#xA;            } else {&#xA;                log.info(&#34;no progress...&#34;);&#xA;            }&#xA;        }&#xA;        Assertions.assertTrue(taskProgress.getIsFinished());&#xA;        Assertions.assertEquals(1, taskProgress.getPercent());&#xA;    }&#xA;&#xA;    public void assertWithFile(String mainTaskId, Integer outputCount) throws InterruptedException {&#xA;        //1.创建进度查询请求参数GetTaskProgressParam&#xA;        GetTaskProgressParam progressRequest = new GetTaskProgressParam();&#xA;        progressRequest.setMainTaskId(mainTaskId);&#xA;        //2.调用本地方法，查询任务进度。&#xA;        TaskProgressResult taskProgress = ageiPort.getTaskService().getTaskProgress(progressRequest);&#xA;        int sleepTime = 0;&#xA;        log.info(&#34;getTaskProgress, taskProgress:{}&#34;, taskProgress);&#xA;        //3.轮询任务进度，直至任务完成或出错&#xA;        while (taskProgress == null || !taskProgress.getIsFinished() &amp;amp;&amp;amp; !taskProgress.getIsError()) {&#xA;            Thread.sleep(1000);&#xA;            if (sleepTime++ &amp;gt; 100) {&#xA;                Assertions.assertTrue(taskProgress.getIsFinished() || taskProgress.getIsError());&#xA;            }&#xA;            taskProgress = ageiPort.getTaskService().getTaskProgress(progressRequest);&#xA;            if (taskProgress != null) {&#xA;                log.info(&#34;getTaskProgress, percent:{}, stageName:{}&#34;, taskProgress.getPercent(), taskProgress.getStageName());&#xA;            } else {&#xA;                log.info(&#34;no progress...&#34;);&#xA;            }&#xA;        }&#xA;        Assertions.assertTrue(taskProgress.getIsFinished());&#xA;        Assertions.assertEquals(1, taskProgress.getPercent());&#xA;&#xA;        //4.任务完成后，查询任务实例信息，任务输出的文件信息&#xA;        MainTask mainTask = ageiPort.getTaskServerClient().getMainTask(taskProgress.getMainTaskId());&#xA;        String fileKey = FeatureUtils.getFeature(mainTask.getFeature(), MainTaskFeatureKeys.OUTPUT_FILE_KEY);&#xA;        boolean exists = ageiPort.getFileStore().exists(fileKey, new HashMap&amp;lt;&amp;gt;());&#xA;        Assertions.assertTrue(exists);&#xA;&#xA;        String runtimeParam = mainTask.getRuntimeParam();&#xA;        String fileType = FeatureUtils.getFeature(runtimeParam, MainTaskFeatureKeys.RT_FILE_TYPE_KEY);&#xA;        String headersString = FeatureUtils.getFeature(runtimeParam, MainTaskFeatureKeys.RT_COLUMN_HEADERS_KEY);&#xA;        List&amp;lt;ColumnHeaderImpl&amp;gt; columnHeaderList = JsonUtil.toArrayObject(headersString, ColumnHeaderImpl.class);&#xA;        List&amp;lt;ColumnHeader&amp;gt; columnHeaderList1 = new ArrayList&amp;lt;&amp;gt;(columnHeaderList);&#xA;        ColumnHeadersImpl headers = new ColumnHeadersImpl(columnHeaderList1);&#xA;&#xA;        //5.下载文件到本地&#xA;        InputStream inputStream = ageiPort.getFileStore().get(fileKey, new HashMap&amp;lt;&amp;gt;());&#xA;        String outputFileReaderFactory = ageiPort.getOptions().getFileTypeReaderSpiMappings().get(fileType);&#xA;        final FileReaderFactory factory = ExtensionLoader.getExtensionLoader(FileReaderFactory.class).getExtension(outputFileReaderFactory);&#xA;&#xA;        //6.断言判断产生的文件是否符合期望&#xA;        FileReader fileReader = factory.create(ageiPort, mainTask, headers);&#xA;        fileReader.read(inputStream);&#xA;        DataGroup dataGroup = fileReader.finish();&#xA;        int count = 0;&#xA;        List&amp;lt;DataGroup.Data&amp;gt; data = dataGroup.getData();&#xA;        for (DataGroup.Data datum : data) {&#xA;            if (datum.getItems() != null) {&#xA;                count += datum.getItems().size();&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;更多文档&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alibaba/AGEIPort/master/docs/zh/API%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3.md&#34;&gt;API参考文档&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alibaba/AGEIPort/master/docs/zh/%E5%AF%BC%E5%85%A5%E6%A0%B7%E4%BE%8B%E5%8F%8A%E6%96%87%E6%A1%A3%E8%AF%B4%E6%98%8E.md&#34;&gt;导入样例及文档说明&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alibaba/AGEIPort/master/docs/zh/%E5%AF%BC%E5%87%BA%E6%A0%B7%E4%BE%8B%E5%8F%8A%E6%96%87%E6%A1%A3%E8%AF%B4%E6%98%8E.md&#34;&gt;导出样例及文档说明&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;谁在使用&lt;/h2&gt; &#xA;&lt;p&gt;阿里巴巴：数字供应链、盒马、菜鸟、本地生活、阿里健康、钉钉、淘系、阿里云&lt;/p&gt; &#xA;&lt;h2&gt;联系我们&lt;/h2&gt; &#xA;&lt;p&gt;目前钉钉群受到了一些管控策略影响暂无，若有问题优先提交Issue。AGEIPort的研发同学会定期解答问题，紧急问题可联系龄一（&lt;a href=&#34;mailto:guijie.rgj@alibaba-inc.com&#34;&gt;guijie.rgj@alibaba-inc.com&lt;/a&gt;）&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Nalen98/GhidraEmu</title>
    <updated>2022-12-16T01:32:35Z</updated>
    <id>tag:github.com,2022-12-16:/Nalen98/GhidraEmu</id>
    <link href="https://github.com/Nalen98/GhidraEmu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Native Pcode emulator&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GhidraEmu&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Nalen98/GhidraEmu/main/images/logo.png&#34; width=&#34;300&#34; height=&#34;300&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt; This experimental Ghidra plugin allows you to easily deal with native pcode emulation. No scripts anymore, just use it from Ghidra. It can be useful for working with a variety of exotic processors, support for which is not implemented in common emulators.&lt;/p&gt; &#xA;&lt;p&gt;If the processor/vm supported by Ghidra for reverse engineering — it can be emulated! Example, eBPF instructions emulation below:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Nalen98/GhidraEmu/main/images/emuExample.gif&#34; alt=&#34;GhidraEmu&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What can it do&lt;/h2&gt; &#xA;&lt;p&gt;In fact, the plugin is an extended wrapper around the classes inside the package &lt;code&gt;ghidra.app.emulator&lt;/code&gt;. Here is what has been implemented:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Works with all architectures that Ghidra supports, so you can add exotic processors and emulate the such programs&lt;/li&gt; &#xA; &lt;li&gt;CPU context, stack, and heap emulation&lt;/li&gt; &#xA; &lt;li&gt;Applying patched bytes through Ghidra GUI to influence the course of emulation&lt;/li&gt; &#xA; &lt;li&gt;Breakpoints to control emulation process&lt;/li&gt; &#xA; &lt;li&gt;Displaying of changed bytes during emulation in Ghidra&#39;s ByteViewer&lt;/li&gt; &#xA; &lt;li&gt;Hook some libc functions (but it is still poor)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Although PCode emulation ideally implies the unification, most processors need their own approach, so feel free to contact the issue if you encounter errors. I would really like to test all of procs, but it&#39;s hardly possible.&lt;/p&gt; &#xA;&lt;h2&gt;What it can&#39;t&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Step inside external library functions (EmulatorHelper restrictions)&lt;/li&gt; &#xA; &lt;li&gt;Syscall emulation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;All plugin windows in one set&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Nalen98/GhidraEmu/main/images/Finished.png&#34; alt=&#34;GhidraEmu&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;h3&gt;Menu window&lt;/h3&gt; &#xA;&lt;p&gt;Contains all plugin&#39;s windows - Stack view, Registers, Breakpoints view, and Main window.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Nalen98/GhidraEmu/main/images/menu.png&#34; alt=&#34;GhidraEmu menu&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Popup window&lt;/h3&gt; &#xA;&lt;p&gt;Contains hotkeys for setting start and end addresses of emulation, breakpoints and applying changed bytes to emulator.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/Nalen98/GhidraEmu/main/images/Popup.png&#34; width=&#34;700&#34; height=&#34;200&#34;&gt; &#xA;&lt;h4&gt;Registers view&lt;/h4&gt; &#xA;&lt;p&gt;Change registers as you want. Setting as link register (green arrow) will help emulator let it know which register contains return address. Plugin knows how it goes via stack, lr register, AARCH64 and mips registers. If you have an exotic one, select link register and press the button.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/Nalen98/GhidraEmu/main/images/Registers.gif&#34;&gt; &#xA;&lt;h4&gt;Stack view&lt;/h4&gt; &#xA;&lt;p&gt;When you open your program in Сode browser GhidraEmu will map stack space automatically. Stack pointer will be set at the middle of stack range. It was done to allow you to set values at top or bottom stack frames. Set your values as you want. Scroll it if you get some freezes on updating or resetting. During the emulation process, if the program needs more space for the stack, the plugin will allocate it automatically.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/Nalen98/GhidraEmu/main/images/Stack.gif&#34; width=&#34;320&#34; height=&#34;250&#34;&gt; &#xA;&lt;h4&gt;Breakpoints view&lt;/h4&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/Nalen98/GhidraEmu/main/images/Breaks.gif&#34;&gt; &#xA;&lt;h4&gt;RAM view&lt;/h4&gt; &#xA;&lt;p&gt;If any bytes change during the emulation, you will see them in the classic ByteViewer. Do not worry, they will be reset to their original values after pressing &lt;strong&gt;&#34;Reset&#34;&lt;/strong&gt; button.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/Nalen98/GhidraEmu/main/images/update_bytes.gif&#34;&gt; &#xA;&lt;h4&gt;Apply patched bytes&lt;/h4&gt; &#xA;&lt;p&gt;If you changed something, let emulator know about changed bytes (stack updates automatically, no need for it). After changing, select them (will be green), and press this option (or hotkey &#34;M&#34;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Nalen98/GhidraEmu/main/images/ApplyPatchedBytes.png&#34; alt=&#34;GhidraEmu apply patched bytes&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Console&lt;/h4&gt; &#xA;&lt;p&gt;Here plugin prints output information.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Nalen98/GhidraEmu/main/images/Console.png&#34; alt=&#34;GhidraEmu console&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Before you start&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;A few important points to consider&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Don&#39;t forget to analyze your program in Ghidra, emulator depends on it.&lt;/li&gt; &#xA; &lt;li&gt;As already mentioned, set the link register if you have an exotic processor/vm.&lt;/li&gt; &#xA; &lt;li&gt;If you have changed any bytes through the ByteViewer, the plugin won&#39;t restore them to their original values during resetting emulation state.&lt;/li&gt; &#xA; &lt;li&gt;Before closing the project in Ghidra, you should press the &#34;Reset&#34; button and reset the state of the last emulation, if such an action was not performed. This is important, because at the moment of closing, transactions for repainting traced instructions in the listing will not be executed, as well as transactions for restoring program bytes after emulation. This can lead in the future not only to the contemplation of the &#34;old yellow parrot&#34;, which is the least problem, but the bytes modified as a result of emulation will remain as such and will not return to their original values (unless the project is rolled back in Ghidra, of course).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download Release version of extension and install it in Ghidra &lt;code&gt;File → Install Extensions...&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use gradle to build extension: &lt;code&gt;GHIDRA_INSTALL_DIR=${GHIDRA_HOME} gradle&lt;/code&gt; and use Ghidra to install it: &lt;code&gt;File → Install Extensions...&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;In CodeBrowser go to &lt;code&gt;File → Configure → Experimental&lt;/code&gt; and select checkbox.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;p&gt;Got some bugs while using the plugin or have ideas for improvements? Don&#39;t be shy to open new Issue and I&#39;ll figure it out.&lt;/p&gt; &#xA;&lt;h2&gt;Future work&lt;/h2&gt; &#xA;&lt;p&gt;EmulatorHelper restrictions don&#39;t allow using program space in another. So your external shared library, for example, will never know about program memory space and vice versa. So you can&#39;t emulate it as one process with one memory space. Let me know if I&#39;m missing something here.&lt;/p&gt;</summary>
  </entry>
</feed>