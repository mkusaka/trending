<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-07T01:32:13Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kdn251/interviews</title>
    <updated>2022-08-07T01:32:13Z</updated>
    <id>tag:github.com,2022-08-07:/kdn251/interviews</id>
    <link href="https://github.com/kdn251/interviews" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Everything you need to know to get the job.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Interviews&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Your personal guide to Software Engineering technical interviews. Video solutions to the following interview problems with detailed explanations can be found &lt;a href=&#34;https://www.youtube.com/channel/UCKvwPt6BifPP54yzH99ff1g&#34;&gt;here&lt;/a&gt;. &lt;a href=&#34;https://www.youtube.com/channel/UCKvwPt6BifPP54yzH99ff1g&#34; style=&#34;display:block;&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/images/youtube.png?raw=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;Maintainer - &lt;a href=&#34;https://github.com/kdn251&#34;&gt;Kevin Naughton Jr.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Translations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/README-zh-cn.md&#34;&gt;简体中文&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/#youtube&#34;&gt;YouTube&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/#the-daily-byte&#34;&gt;The Daily Byte&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/#instagram&#34;&gt;Instagram&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/#articles&#34;&gt;Articles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/#online-judges&#34;&gt;Online Judges&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/#live-coding-practice&#34;&gt;Live Coding Practice&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/#data-structures&#34;&gt;Data Structures&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/#algorithms&#34;&gt;Algorithms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/#greedy-algorithms&#34;&gt;Greedy Algorithms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/#bitmasks&#34;&gt;Bitmasks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/#runtime-analysis&#34;&gt;Runtime Analysis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/#video-lectures&#34;&gt;Video Lectures&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/#interview-books&#34;&gt;Interview Books&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/#computer-science-news&#34;&gt;Computer Science News&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/#directory-tree&#34;&gt;Directory Tree&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;YouTube&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCKvwPt6BifPP54yzH99ff1g&#34;&gt;Kevin Naughton Jr.&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;The Daily Byte&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bit.ly/2BaaSaK&#34;&gt;FAANG Interview Prep&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Instagram&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bit.ly/2SM8SLZ&#34;&gt;Kevin Naughton Jr.&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Articles&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@Naughton/starting-work-b06e10f6007e&#34;&gt;Starting Work&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Online Judges&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://leetcode.com/&#34;&gt;LeetCode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vjudge.net/&#34;&gt;Virtual Judge&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.careercup.com/&#34;&gt;CareerCup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hackerrank.com/&#34;&gt;HackerRank&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codefights.com/&#34;&gt;CodeFights&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://open.kattis.com/&#34;&gt;Kattis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hackerearth.com&#34;&gt;HackerEarth&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codility.com/programmers/lessons/1-iterations/&#34;&gt;Codility&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://codeforces.com/&#34;&gt;Code Forces&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codechef.com/&#34;&gt;Code Chef&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.spoj.com/&#34;&gt;Sphere Online Judge - SPOJ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.interviewbit.com/&#34;&gt;InterviewBit&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Live Coding Practice&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pramp.com/ref/gt4&#34;&gt;Pramp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.gainlo.co/#!/&#34;&gt;Gainlo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://refdash.com/&#34;&gt;Refdash&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.interviewing.io/&#34;&gt;Interviewing.io&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Data Structures&lt;/h2&gt; &#xA;&lt;h3&gt;Linked List&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;em&gt;Linked List&lt;/em&gt; is a linear collection of data elements, called nodes, each pointing to the next node by means of a pointer. It is a data structure consisting of a group of nodes which together represent a sequence.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Singly-linked list&lt;/strong&gt;: linked list in which each node points to the next node and the last node points to null&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Doubly-linked list&lt;/strong&gt;: linked list in which each node has two pointers, p and n, such that p points to the previous node and n points to the next node; the last node&#39;s n pointer points to null&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Circular-linked list&lt;/strong&gt;: linked list in which each node points to the next node and the last node points back to the first node&lt;/li&gt; &#xA; &lt;li&gt;Time Complexity: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Access: &lt;code&gt;O(n)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Search: &lt;code&gt;O(n)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Insert: &lt;code&gt;O(1)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Remove: &lt;code&gt;O(1)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Stack&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;em&gt;Stack&lt;/em&gt; is a collection of elements, with two principle operations: &lt;em&gt;push&lt;/em&gt;, which adds to the collection, and &lt;em&gt;pop&lt;/em&gt;, which removes the most recently added element&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Last in, first out data structure (LIFO)&lt;/strong&gt;: the most recently added object is the first to be removed&lt;/li&gt; &#xA; &lt;li&gt;Time Complexity: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Access: &lt;code&gt;O(n)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Search: &lt;code&gt;O(n)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Insert: &lt;code&gt;O(1)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Remove: &lt;code&gt;O(1)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Queue&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;em&gt;Queue&lt;/em&gt; is a collection of elements, supporting two principle operations: &lt;em&gt;enqueue&lt;/em&gt;, which inserts an element into the queue, and &lt;em&gt;dequeue&lt;/em&gt;, which removes an element from the queue&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;First in, first out data structure (FIFO)&lt;/strong&gt;: the oldest added object is the first to be removed&lt;/li&gt; &#xA; &lt;li&gt;Time Complexity: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Access: &lt;code&gt;O(n)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Search: &lt;code&gt;O(n)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Insert: &lt;code&gt;O(1)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Remove: &lt;code&gt;O(1)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Tree&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;em&gt;Tree&lt;/em&gt; is an undirected, connected, acyclic graph&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Binary Tree&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;em&gt;Binary Tree&lt;/em&gt; is a tree data structure in which each node has at most two children, which are referred to as the &lt;em&gt;left child&lt;/em&gt; and &lt;em&gt;right child&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Full Tree&lt;/strong&gt;: a tree in which every node has either 0 or 2 children&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Perfect Binary Tree&lt;/strong&gt;: a binary tree in which all interior nodes have two children and all leave have the same depth&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Complete Tree&lt;/strong&gt;: a binary tree in which every level &lt;em&gt;except possibly the last&lt;/em&gt; is full and all nodes in the last level are as far left as possible&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Binary Search Tree&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A binary search tree, sometimes called BST, is a type of binary tree which maintains the property that the value in each node must be greater than or equal to any value stored in the left sub-tree, and less than or equal to any value stored in the right sub-tree&lt;/li&gt; &#xA; &lt;li&gt;Time Complexity: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Access: &lt;code&gt;O(log(n))&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Search: &lt;code&gt;O(log(n))&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Insert: &lt;code&gt;O(log(n))&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Remove: &lt;code&gt;O(log(n))&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/images/BST.png?raw=true&#34; alt=&#34;Binary Search Tree&#34; width=&#34;400&#34; height=&#34;500&#34;&gt; &#xA;&lt;h3&gt;Trie&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A trie, sometimes called a radix or prefix tree, is a kind of search tree that is used to store a dynamic set or associative array where the keys are usually Strings. No node in the tree stores the key associated with that node; instead, its position in the tree defines the key with which it is associated. All the descendants of a node have a common prefix of the String associated with that node, and the root is associated with the empty String.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/images/trie.png?raw=true&#34; alt=&#34;Alt text&#34; title=&#34;Trie&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Fenwick Tree&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A Fenwick tree, sometimes called a binary indexed tree, is a tree in concept, but in practice is implemented as an implicit data structure using an array. Given an index in the array representing a vertex, the index of a vertex&#39;s parent or child is calculated through bitwise operations on the binary representation of its index. Each element of the array contains the pre-calculated sum of a range of values, and by combining that sum with additional ranges encountered during an upward traversal to the root, the prefix sum is calculated&lt;/li&gt; &#xA; &lt;li&gt;Time Complexity: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Range Sum: &lt;code&gt;O(log(n))&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Update: &lt;code&gt;O(log(n))&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/images/fenwickTree.png?raw=true&#34; alt=&#34;Alt text&#34; title=&#34;Fenwick Tree&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Segment Tree&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A Segment tree, is a tree data structure for storing intervals, or segments. It allows querying which of the stored segments contain a given point&lt;/li&gt; &#xA; &lt;li&gt;Time Complexity: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Range Query: &lt;code&gt;O(log(n))&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Update: &lt;code&gt;O(log(n))&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/images/segmentTree.png?raw=true&#34; alt=&#34;Alt text&#34; title=&#34;Segment Tree&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Heap&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;em&gt;Heap&lt;/em&gt; is a specialized tree based structure data structure that satisfies the &lt;em&gt;heap&lt;/em&gt; property: if A is a parent node of B, then the key (the value) of node A is ordered with respect to the key of node B with the same ordering applying across the entire heap. A heap can be classified further as either a &#34;max heap&#34; or a &#34;min heap&#34;. In a max heap, the keys of parent nodes are always greater than or equal to those of the children and the highest key is in the root node. In a min heap, the keys of parent nodes are less than or equal to those of the children and the lowest key is in the root node&lt;/li&gt; &#xA; &lt;li&gt;Time Complexity: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Access Max / Min: &lt;code&gt;O(1)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Insert: &lt;code&gt;O(log(n))&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Remove Max / Min: &lt;code&gt;O(log(n))&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/images/heap.png?raw=true&#34; alt=&#34;Max Heap&#34; width=&#34;400&#34; height=&#34;500&#34;&gt; &#xA;&lt;h3&gt;Hashing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Hashing&lt;/em&gt; is used to map data of an arbitrary size to data of a fixed size. The values returned by a hash function are called hash values, hash codes, or simply hashes. If two keys map to the same value, a collision occurs&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hash Map&lt;/strong&gt;: a &lt;em&gt;hash map&lt;/em&gt; is a structure that can map keys to values. A hash map uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found.&lt;/li&gt; &#xA; &lt;li&gt;Collision Resolution&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Separate Chaining&lt;/strong&gt;: in &lt;em&gt;separate chaining&lt;/em&gt;, each bucket is independent, and contains a list of entries for each index. The time for hash map operations is the time to find the bucket (constant time), plus the time to iterate through the list&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Open Addressing&lt;/strong&gt;: in &lt;em&gt;open addressing&lt;/em&gt;, when a new entry is inserted, the buckets are examined, starting with the hashed-to-slot and proceeding in some sequence, until an unoccupied slot is found. The name open addressing refers to the fact that the location of an item is not always determined by its hash value&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/images/hash.png?raw=true&#34; alt=&#34;Alt text&#34; title=&#34;Hashing&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Graph&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;em&gt;Graph&lt;/em&gt; is an ordered pair of G = (V, E) comprising a set V of vertices or nodes together with a set E of edges or arcs, which are 2-element subsets of V (i.e. an edge is associated with two vertices, and that association takes the form of the unordered pair comprising those two vertices)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Undirected Graph&lt;/strong&gt;: a graph in which the adjacency relation is symmetric. So if there exists an edge from node u to node v (u -&amp;gt; v), then it is also the case that there exists an edge from node v to node u (v -&amp;gt; u)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Directed Graph&lt;/strong&gt;: a graph in which the adjacency relation is not symmetric. So if there exists an edge from node u to node v (u -&amp;gt; v), this does &lt;em&gt;not&lt;/em&gt; imply that there exists an edge from node v to node u (v -&amp;gt; u)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/images/graph.png?raw=true&#34; alt=&#34;Graph&#34; width=&#34;400&#34; height=&#34;500&#34;&gt; &#xA;&lt;h2&gt;Algorithms&lt;/h2&gt; &#xA;&lt;h3&gt;Sorting&lt;/h3&gt; &#xA;&lt;h4&gt;Quicksort&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Stable: &lt;code&gt;No&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Time Complexity: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Best Case: &lt;code&gt;O(nlog(n))&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Worst Case: &lt;code&gt;O(n^2)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Average Case: &lt;code&gt;O(nlog(n))&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/images/quicksort.gif?raw=true&#34; alt=&#34;Alt text&#34; title=&#34;Quicksort&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Mergesort&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Mergesort&lt;/em&gt; is also a divide and conquer algorithm. It continuously divides an array into two halves, recurses on both the left subarray and right subarray and then merges the two sorted halves&lt;/li&gt; &#xA; &lt;li&gt;Stable: &lt;code&gt;Yes&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Time Complexity: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Best Case: &lt;code&gt;O(nlog(n))&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Worst Case: &lt;code&gt;O(nlog(n))&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Average Case: &lt;code&gt;O(nlog(n))&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/images/mergesort.gif?raw=true&#34; alt=&#34;Alt text&#34; title=&#34;Mergesort&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Bucket Sort&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Bucket Sort&lt;/em&gt; is a sorting algorithm that works by distributing the elements of an array into a number of buckets. Each bucket is then sorted individually, either using a different sorting algorithm, or by recursively applying the bucket sorting algorithm&lt;/li&gt; &#xA; &lt;li&gt;Time Complexity: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Best Case: &lt;code&gt;Ω(n + k)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Worst Case: &lt;code&gt;O(n^2)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Average Case:&lt;code&gt;Θ(n + k)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/images/bucketsort.png?raw=true&#34; alt=&#34;Alt text&#34; title=&#34;Bucket Sort&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Radix Sort&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Radix Sort&lt;/em&gt; is a sorting algorithm that like bucket sort, distributes elements of an array into a number of buckets. However, radix sort differs from bucket sort by &#39;re-bucketing&#39; the array after the initial pass as opposed to sorting each bucket and merging&lt;/li&gt; &#xA; &lt;li&gt;Time Complexity: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Best Case: &lt;code&gt;Ω(nk)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Worst Case: &lt;code&gt;O(nk)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Average Case: &lt;code&gt;Θ(nk)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Graph Algorithms&lt;/h3&gt; &#xA;&lt;h4&gt;Depth First Search&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Depth First Search&lt;/em&gt; is a graph traversal algorithm which explores as far as possible along each branch before backtracking&lt;/li&gt; &#xA; &lt;li&gt;Time Complexity: &lt;code&gt;O(|V| + |E|)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/images/dfsbfs.gif?raw=true&#34; alt=&#34;Alt text&#34; title=&#34;DFS / BFS Traversal&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Breadth First Search&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Breadth First Search&lt;/em&gt; is a graph traversal algorithm which explores the neighbor nodes first, before moving to the next level neighbors&lt;/li&gt; &#xA; &lt;li&gt;Time Complexity: &lt;code&gt;O(|V| + |E|)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/images/dfsbfs.gif?raw=true&#34; alt=&#34;Alt text&#34; title=&#34;DFS / BFS Traversal&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Topological Sort&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Topological Sort&lt;/em&gt; is the linear ordering of a directed graph&#39;s nodes such that for every edge from node u to node v, u comes before v in the ordering&lt;/li&gt; &#xA; &lt;li&gt;Time Complexity: &lt;code&gt;O(|V| + |E|)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Dijkstra&#39;s Algorithm&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Dijkstra&#39;s Algorithm&lt;/em&gt; is an algorithm for finding the shortest path between nodes in a graph&lt;/li&gt; &#xA; &lt;li&gt;Time Complexity: &lt;code&gt;O(|V|^2)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/images/dijkstra.gif?raw=true&#34; alt=&#34;Alt text&#34; title=&#34;Dijkstra&#39;s&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Bellman-Ford Algorithm&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Bellman-Ford Algorithm&lt;/em&gt; is an algorithm that computes the shortest paths from a single source node to all other nodes in a weighted graph&lt;/li&gt; &#xA; &lt;li&gt;Although it is slower than Dijkstra&#39;s, it is more versatile, as it is capable of handling graphs in which some of the edge weights are negative numbers&lt;/li&gt; &#xA; &lt;li&gt;Time Complexity: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Best Case: &lt;code&gt;O(|E|)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Worst Case: &lt;code&gt;O(|V||E|)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/images/bellman-ford.gif?raw=true&#34; alt=&#34;Alt text&#34; title=&#34;Bellman-Ford&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Floyd-Warshall Algorithm&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Floyd-Warshall Algorithm&lt;/em&gt; is an algorithm for finding the shortest paths in a weighted graph with positive or negative edge weights, but no negative cycles&lt;/li&gt; &#xA; &lt;li&gt;A single execution of the algorithm will find the lengths (summed weights) of the shortest paths between &lt;em&gt;all&lt;/em&gt; pairs of nodes&lt;/li&gt; &#xA; &lt;li&gt;Time Complexity: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Best Case: &lt;code&gt;O(|V|^3)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Worst Case: &lt;code&gt;O(|V|^3)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Average Case: &lt;code&gt;O(|V|^3)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Prim&#39;s Algorithm&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Prim&#39;s Algorithm&lt;/em&gt; is a greedy algorithm that finds a minimum spanning tree for a weighted undirected graph. In other words, Prim&#39;s find a subset of edges that forms a tree that includes every node in the graph&lt;/li&gt; &#xA; &lt;li&gt;Time Complexity: &lt;code&gt;O(|V|^2)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/images/prim.gif?raw=true&#34; alt=&#34;Alt text&#34; title=&#34;Prim&#39;s Algorithm&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Kruskal&#39;s Algorithm&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Kruskal&#39;s Algorithm&lt;/em&gt; is also a greedy algorithm that finds a minimum spanning tree in a graph. However, in Kruskal&#39;s, the graph does not have to be connected&lt;/li&gt; &#xA; &lt;li&gt;Time Complexity: &lt;code&gt;O(|E|log|V|)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/images/kruskal.gif?raw=true&#34; alt=&#34;Alt text&#34; title=&#34;Kruskal&#39;s Algorithm&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Greedy Algorithms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Greedy Algorithms&lt;/em&gt; are algorithms that make locally optimal choices at each step in the hope of eventually reaching the globally optimal solution&lt;/li&gt; &#xA; &lt;li&gt;Problems must exhibit two properties in order to implement a Greedy solution:&lt;/li&gt; &#xA; &lt;li&gt;Optimal Substructure &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;An optimal solution to the problem contains optimal solutions to the given problem&#39;s subproblems&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;The Greedy Property &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;An optimal solution is reached by &#34;greedily&#34; choosing the locally optimal choice without ever reconsidering previous choices&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Example - Coin Change &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Given a target amount V cents and a list of denominations of n coins, i.e. we have coinValue[i] (in cents) for coin types i from [0...n - 1], what is the minimum number of coins that we must use to represent amount V? Assume that we have an unlimited supply of coins of any type&lt;/li&gt; &#xA;   &lt;li&gt;Coins - Penny (1 cent), Nickel (5 cents), Dime (10 cents), Quarter (25 cents)&lt;/li&gt; &#xA;   &lt;li&gt;Assume V = 41. We can use the Greedy algorithm of continuously selecting the largest coin denomination less than or equal to V, subtract that coin&#39;s value from V, and repeat.&lt;/li&gt; &#xA;   &lt;li&gt;V = 41 | 0 coins used&lt;/li&gt; &#xA;   &lt;li&gt;V = 16 | 1 coin used (41 - 25 = 16)&lt;/li&gt; &#xA;   &lt;li&gt;V = 6 | 2 coins used (16 - 10 = 6)&lt;/li&gt; &#xA;   &lt;li&gt;V = 1 | 3 coins used (6 - 5 = 1)&lt;/li&gt; &#xA;   &lt;li&gt;V = 0 | 4 coins used (1 - 1 = 0)&lt;/li&gt; &#xA;   &lt;li&gt;Using this algorithm, we arrive at a total of 4 coins which is optimal&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Bitmasks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bitmasking is a technique used to perform operations at the bit level. Leveraging bitmasks often leads to faster runtime complexity and helps limit memory usage&lt;/li&gt; &#xA; &lt;li&gt;Test kth bit: &lt;code&gt;s &amp;amp; (1 &amp;lt;&amp;lt; k);&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Set kth bit: &lt;code&gt;s |= (1 &amp;lt;&amp;lt; k);&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Turn off kth bit: &lt;code&gt;s &amp;amp;= ~(1 &amp;lt;&amp;lt; k);&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Toggle kth bit: &lt;code&gt;s ^= (1 &amp;lt;&amp;lt; k);&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Multiple by 2&lt;sup&gt;n&lt;/sup&gt;: &lt;code&gt;s &amp;lt;&amp;lt; n;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Divide by 2&lt;sup&gt;n&lt;/sup&gt;: &lt;code&gt;s &amp;gt;&amp;gt; n;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Intersection: &lt;code&gt;s &amp;amp; t;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Union: &lt;code&gt;s | t;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Set Subtraction: &lt;code&gt;s &amp;amp; ~t;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Extract lowest set bit: &lt;code&gt;s &amp;amp; (-s);&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Extract lowest unset bit: &lt;code&gt;~s &amp;amp; (s + 1);&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Swap Values: &lt;code&gt;x ^= y; y ^= x; x ^= y;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Runtime Analysis&lt;/h2&gt; &#xA;&lt;h4&gt;Big O Notation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Big O Notation&lt;/em&gt; is used to describe the upper bound of a particular algorithm. Big O is used to describe worst case scenarios&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/images/bigO.png?raw=true&#34; alt=&#34;Alt text&#34; title=&#34;Theta Notation&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Little O Notation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Little O Notation&lt;/em&gt; is also used to describe an upper bound of a particular algorithm; however, Little O provides a bound that is not asymptotically tight&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Big Ω Omega Notation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Big Omega Notation&lt;/em&gt; is used to provide an asymptotic lower bound on a particular algorithm&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/images/bigOmega.png?raw=true&#34; alt=&#34;Alt text&#34; title=&#34;Theta Notation&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Little ω Omega Notation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Little Omega Notation&lt;/em&gt; is used to provide a lower bound on a particular algorithm that is not asymptotically tight&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Theta Θ Notation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Theta Notation&lt;/em&gt; is used to provide a bound on a particular algorithm such that it can be &#34;sandwiched&#34; between two constants (one for an upper limit and one for a lower limit) for sufficiently large values&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kdn251/interviews/master/images/theta.png?raw=true&#34; alt=&#34;Alt text&#34; title=&#34;Theta Notation&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Video Lectures&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Data Structures &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://archive.org/details/ucberkeley-webcast?&amp;amp;and%5B%5D=subject%3A%22Computer%20Science%22&amp;amp;and%5B%5D=subject%3A%22CS%22&#34;&gt;UC Berkeley Data Structures&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=T0yzrZL1py0&amp;amp;list=PLUl4u3cNGP61hsJNdULdudlRL493b-XZf&amp;amp;index=1&#34;&gt;MIT Advanced Data Structures&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Algorithms &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=HtSuA80QTyo&amp;amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&amp;amp;index=1&#34;&gt;MIT Introduction to Algorithms&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PL6ogFv-ieghdoGKGg2Bik3Gl1glBTEu8c&#34;&gt;MIT Advanced Algorithms&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://archive.org/details/ucberkeley-webcast?&amp;amp;and%5B%5D=subject%3A%22Computer%20Science%22&amp;amp;and%5B%5D=subject%3A%22CS%22&#34;&gt;UC Berkeley Algorithms&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Interview Books&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Competitive-Programming-3rd-Steven-Halim/dp/B00FG8MNN8&#34;&gt;Competitive Programming 3 - Steven Halim &amp;amp; Felix Halim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/0984782850/ref=sr_1_1?s=books&amp;amp;ie=UTF8&#34;&gt;Cracking The Coding Interview - Gayle Laakmann McDowell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Cracking-PM-Interview-Product-Technology-ebook/dp/B00ISYMUR6/ref=sr_1_1?s=books&amp;amp;ie=UTF8&#34;&gt;Cracking The PM Interview - Gayle Laakmann McDowell &amp;amp; Jackie Bavaro&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Introduction-Algorithms-3rd-MIT-Press/dp/0262033844/ref=sr_1_1?ie=UTF8&amp;amp;qid=1490295989&amp;amp;sr=8-1&amp;amp;keywords=Introduction+to+Algorithms&#34;&gt;Introduction to Algorithms - Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest &amp;amp; Clifford Stein&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Computer Science News&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://news.ycombinator.com/&#34;&gt;Hacker News&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lobste.rs/&#34;&gt;Lobsters&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Directory Tree&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;.&#xA;├── Array&#xA;│&amp;nbsp;&amp;nbsp; ├── bestTimeToBuyAndSellStock.java&#xA;│&amp;nbsp;&amp;nbsp; ├── findTheCelebrity.java&#xA;│&amp;nbsp;&amp;nbsp; ├── gameOfLife.java&#xA;│&amp;nbsp;&amp;nbsp; ├── increasingTripletSubsequence.java&#xA;│&amp;nbsp;&amp;nbsp; ├── insertInterval.java&#xA;│&amp;nbsp;&amp;nbsp; ├── longestConsecutiveSequence.java&#xA;│&amp;nbsp;&amp;nbsp; ├── maximumProductSubarray.java&#xA;│&amp;nbsp;&amp;nbsp; ├── maximumSubarray.java&#xA;│&amp;nbsp;&amp;nbsp; ├── mergeIntervals.java&#xA;│&amp;nbsp;&amp;nbsp; ├── missingRanges.java&#xA;│&amp;nbsp;&amp;nbsp; ├── productOfArrayExceptSelf.java&#xA;│&amp;nbsp;&amp;nbsp; ├── rotateImage.java&#xA;│&amp;nbsp;&amp;nbsp; ├── searchInRotatedSortedArray.java&#xA;│&amp;nbsp;&amp;nbsp; ├── spiralMatrixII.java&#xA;│&amp;nbsp;&amp;nbsp; ├── subsetsII.java&#xA;│&amp;nbsp;&amp;nbsp; ├── subsets.java&#xA;│&amp;nbsp;&amp;nbsp; ├── summaryRanges.java&#xA;│&amp;nbsp;&amp;nbsp; ├── wiggleSort.java&#xA;│&amp;nbsp;&amp;nbsp; └── wordSearch.java&#xA;├── Backtracking&#xA;│&amp;nbsp;&amp;nbsp; ├── androidUnlockPatterns.java&#xA;│&amp;nbsp;&amp;nbsp; ├── generalizedAbbreviation.java&#xA;│&amp;nbsp;&amp;nbsp; └── letterCombinationsOfAPhoneNumber.java&#xA;├── BinarySearch&#xA;│&amp;nbsp;&amp;nbsp; ├── closestBinarySearchTreeValue.java&#xA;│&amp;nbsp;&amp;nbsp; ├── firstBadVersion.java&#xA;│&amp;nbsp;&amp;nbsp; ├── guessNumberHigherOrLower.java&#xA;│&amp;nbsp;&amp;nbsp; ├── pow(x,n).java&#xA;│&amp;nbsp;&amp;nbsp; └── sqrt(x).java&#xA;├── BitManipulation&#xA;│&amp;nbsp;&amp;nbsp; ├── binaryWatch.java&#xA;│&amp;nbsp;&amp;nbsp; ├── countingBits.java&#xA;│&amp;nbsp;&amp;nbsp; ├── hammingDistance.java&#xA;│&amp;nbsp;&amp;nbsp; ├── maximumProductOfWordLengths.java&#xA;│&amp;nbsp;&amp;nbsp; ├── numberOf1Bits.java&#xA;│&amp;nbsp;&amp;nbsp; ├── sumOfTwoIntegers.java&#xA;│&amp;nbsp;&amp;nbsp; └── utf-8Validation.java&#xA;├── BreadthFirstSearch&#xA;│&amp;nbsp;&amp;nbsp; ├── binaryTreeLevelOrderTraversal.java&#xA;│&amp;nbsp;&amp;nbsp; ├── cloneGraph.java&#xA;│&amp;nbsp;&amp;nbsp; ├── pacificAtlanticWaterFlow.java&#xA;│&amp;nbsp;&amp;nbsp; ├── removeInvalidParentheses.java&#xA;│&amp;nbsp;&amp;nbsp; ├── shortestDistanceFromAllBuildings.java&#xA;│&amp;nbsp;&amp;nbsp; ├── symmetricTree.java&#xA;│&amp;nbsp;&amp;nbsp; └── wallsAndGates.java&#xA;├── DepthFirstSearch&#xA;│&amp;nbsp;&amp;nbsp; ├── balancedBinaryTree.java&#xA;│&amp;nbsp;&amp;nbsp; ├── battleshipsInABoard.java&#xA;│&amp;nbsp;&amp;nbsp; ├── convertSortedArrayToBinarySearchTree.java&#xA;│&amp;nbsp;&amp;nbsp; ├── maximumDepthOfABinaryTree.java&#xA;│&amp;nbsp;&amp;nbsp; ├── numberOfIslands.java&#xA;│&amp;nbsp;&amp;nbsp; ├── populatingNextRightPointersInEachNode.java&#xA;│&amp;nbsp;&amp;nbsp; └── sameTree.java&#xA;├── Design&#xA;│&amp;nbsp;&amp;nbsp; └── zigzagIterator.java&#xA;├── DivideAndConquer&#xA;│&amp;nbsp;&amp;nbsp; ├── expressionAddOperators.java&#xA;│&amp;nbsp;&amp;nbsp; └── kthLargestElementInAnArray.java&#xA;├── DynamicProgramming&#xA;│&amp;nbsp;&amp;nbsp; ├── bombEnemy.java&#xA;│&amp;nbsp;&amp;nbsp; ├── climbingStairs.java&#xA;│&amp;nbsp;&amp;nbsp; ├── combinationSumIV.java&#xA;│&amp;nbsp;&amp;nbsp; ├── countingBits.java&#xA;│&amp;nbsp;&amp;nbsp; ├── editDistance.java&#xA;│&amp;nbsp;&amp;nbsp; ├── houseRobber.java&#xA;│&amp;nbsp;&amp;nbsp; ├── paintFence.java&#xA;│&amp;nbsp;&amp;nbsp; ├── paintHouseII.java&#xA;│&amp;nbsp;&amp;nbsp; ├── regularExpressionMatching.java&#xA;│&amp;nbsp;&amp;nbsp; ├── sentenceScreenFitting.java&#xA;│&amp;nbsp;&amp;nbsp; ├── uniqueBinarySearchTrees.java&#xA;│&amp;nbsp;&amp;nbsp; └── wordBreak.java&#xA;├── HashTable&#xA;│&amp;nbsp;&amp;nbsp; ├── binaryTreeVerticalOrderTraversal.java&#xA;│&amp;nbsp;&amp;nbsp; ├── findTheDifference.java&#xA;│&amp;nbsp;&amp;nbsp; ├── groupAnagrams.java&#xA;│&amp;nbsp;&amp;nbsp; ├── groupShiftedStrings.java&#xA;│&amp;nbsp;&amp;nbsp; ├── islandPerimeter.java&#xA;│&amp;nbsp;&amp;nbsp; ├── loggerRateLimiter.java&#xA;│&amp;nbsp;&amp;nbsp; ├── maximumSizeSubarraySumEqualsK.java&#xA;│&amp;nbsp;&amp;nbsp; ├── minimumWindowSubstring.java&#xA;│&amp;nbsp;&amp;nbsp; ├── sparseMatrixMultiplication.java&#xA;│&amp;nbsp;&amp;nbsp; ├── strobogrammaticNumber.java&#xA;│&amp;nbsp;&amp;nbsp; ├── twoSum.java&#xA;│&amp;nbsp;&amp;nbsp; └── uniqueWordAbbreviation.java&#xA;├── LinkedList&#xA;│&amp;nbsp;&amp;nbsp; ├── addTwoNumbers.java&#xA;│&amp;nbsp;&amp;nbsp; ├── deleteNodeInALinkedList.java&#xA;│&amp;nbsp;&amp;nbsp; ├── mergeKSortedLists.java&#xA;│&amp;nbsp;&amp;nbsp; ├── palindromeLinkedList.java&#xA;│&amp;nbsp;&amp;nbsp; ├── plusOneLinkedList.java&#xA;│&amp;nbsp;&amp;nbsp; ├── README.md&#xA;│&amp;nbsp;&amp;nbsp; └── reverseLinkedList.java&#xA;├── Queue&#xA;│&amp;nbsp;&amp;nbsp; └── movingAverageFromDataStream.java&#xA;├── README.md&#xA;├── Sort&#xA;│&amp;nbsp;&amp;nbsp; ├── meetingRoomsII.java&#xA;│&amp;nbsp;&amp;nbsp; └── meetingRooms.java&#xA;├── Stack&#xA;│&amp;nbsp;&amp;nbsp; ├── binarySearchTreeIterator.java&#xA;│&amp;nbsp;&amp;nbsp; ├── decodeString.java&#xA;│&amp;nbsp;&amp;nbsp; ├── flattenNestedListIterator.java&#xA;│&amp;nbsp;&amp;nbsp; └── trappingRainWater.java&#xA;├── String&#xA;│&amp;nbsp;&amp;nbsp; ├── addBinary.java&#xA;│&amp;nbsp;&amp;nbsp; ├── countAndSay.java&#xA;│&amp;nbsp;&amp;nbsp; ├── decodeWays.java&#xA;│&amp;nbsp;&amp;nbsp; ├── editDistance.java&#xA;│&amp;nbsp;&amp;nbsp; ├── integerToEnglishWords.java&#xA;│&amp;nbsp;&amp;nbsp; ├── longestPalindrome.java&#xA;│&amp;nbsp;&amp;nbsp; ├── longestSubstringWithAtMostKDistinctCharacters.java&#xA;│&amp;nbsp;&amp;nbsp; ├── minimumWindowSubstring.java&#xA;│&amp;nbsp;&amp;nbsp; ├── multiplyString.java&#xA;│&amp;nbsp;&amp;nbsp; ├── oneEditDistance.java&#xA;│&amp;nbsp;&amp;nbsp; ├── palindromePermutation.java&#xA;│&amp;nbsp;&amp;nbsp; ├── README.md&#xA;│&amp;nbsp;&amp;nbsp; ├── reverseVowelsOfAString.java&#xA;│&amp;nbsp;&amp;nbsp; ├── romanToInteger.java&#xA;│&amp;nbsp;&amp;nbsp; ├── validPalindrome.java&#xA;│&amp;nbsp;&amp;nbsp; └── validParentheses.java&#xA;├── Tree&#xA;│&amp;nbsp;&amp;nbsp; ├── binaryTreeMaximumPathSum.java&#xA;│&amp;nbsp;&amp;nbsp; ├── binaryTreePaths.java&#xA;│&amp;nbsp;&amp;nbsp; ├── inorderSuccessorInBST.java&#xA;│&amp;nbsp;&amp;nbsp; ├── invertBinaryTree.java&#xA;│&amp;nbsp;&amp;nbsp; ├── lowestCommonAncestorOfABinaryTree.java&#xA;│&amp;nbsp;&amp;nbsp; ├── sumOfLeftLeaves.java&#xA;│&amp;nbsp;&amp;nbsp; └── validateBinarySearchTree.java&#xA;├── Trie&#xA;│&amp;nbsp;&amp;nbsp; ├── addAndSearchWordDataStructureDesign.java&#xA;│&amp;nbsp;&amp;nbsp; ├── implementTrie.java&#xA;│&amp;nbsp;&amp;nbsp; └── wordSquares.java&#xA;└── TwoPointers&#xA;    ├── 3Sum.java&#xA;    ├── 3SumSmaller.java&#xA;    ├── mergeSortedArray.java&#xA;    ├── minimumSizeSubarraySum.java&#xA;    ├── moveZeros.java&#xA;    ├── removeDuplicatesFromSortedArray.java&#xA;    ├── reverseString.java&#xA;    └── sortColors.java&#xA;&#xA;18 directories, 124 files&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>jammy928/CoinExchange_CryptoExchange_Java</title>
    <updated>2022-08-07T01:32:13Z</updated>
    <id>tag:github.com,2022-08-07:/jammy928/CoinExchange_CryptoExchange_Java</id>
    <link href="https://github.com/jammy928/CoinExchange_CryptoExchange_Java" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The best Java open source crypto currency exchange platform, bitcoin exchange based on Java | BTC exchange | ETH exchange | digital currency exchange | trading platform | matching trading engine. This project is based on the development of Spring Cloud microservices and can be used to build and secondary development of digital currency exchanges…&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Crypto-Exchange / Coin-Exchange&lt;/h1&gt; &#xA;&lt;h1&gt;Maybe The best open source core code exchange in the entire net, the architecture/code quality is visible.&lt;/h1&gt; &#xA;&lt;h1&gt;I think this may be the best choice for you to build an exchange or secondary development&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Statement 1: I have been working in the new company. I will take the time to update some descriptive things here so that everyone can compile, build, and develop&lt;br&gt; Statement 2: The APP source code and the trading robot source code are not open source (provided for a fee), if necessary, email: &lt;a href=&#34;mailto:837385225@qq.com&#34;&gt;837385225@qq.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;I am a chinese，so chinese is my mother language, But I can also use both English and Japanese to communicate with you.&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;This project is a bitcoin exchange based on Java (SpringCloud) | BTC exchange | ETH exchange | digital currency exchange | trading platform | matching trading engine. This project is based on the development of Spring Cloud microservices, which can be used to build and secondary development digital currency exchanges, and has a complete system component.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Match trading engine.&lt;/li&gt; &#xA; &lt;li&gt;Background management (back-end + front-end)&lt;/li&gt; &#xA; &lt;li&gt;Frontend (transaction page, event page, personal center, etc.)）&lt;/li&gt; &#xA; &lt;li&gt;Native Android APP source code&lt;/li&gt; &#xA; &lt;li&gt;Native Apple APP source code&lt;/li&gt; &#xA; &lt;li&gt;Currency wallet RPC source code&lt;/li&gt; &#xA; &lt;li&gt;Multi Language Support（Simple Chinese、English）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0422/182754_a150e134_2182501.png&#34; alt=&#34;PC&#34; title=&#34;QQ截图20200422182717.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0422/182544_05863aa2_2182501.png&#34; alt=&#34;APP&#34; title=&#34;幻灯片1.PNG&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0422/182559_860d3c60_2182501.png&#34; alt=&#34;APP&#34; title=&#34;幻灯片2.PNG&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;System architecture overview&lt;/h2&gt; &#xA;&lt;p&gt;Just draw a few sketches, just look at it。。。&lt;/p&gt; &#xA;&lt;h4&gt;Overall structure&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://hashcome-cos-1251041754.cos.ap-hongkong.myqcloud.com/githubimages/Overall%20Structure.png&#34; alt=&#34;整体架构&#34; title=&#34;1.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Logical architecture&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://hashcome-cos-1251041754.cos.ap-hongkong.myqcloud.com/githubimages/Architect-2.png&#34; alt=&#34;逻辑架构&#34; title=&#34;2.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Deployment architecture&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://hashcome-cos-1251041754.cos.ap-hongkong.myqcloud.com/githubimages/Deployment%20Architecture.png&#34; alt=&#34;部署架构&#34; title=&#34;1117.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Dependencies&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://hashcome-cos-1251041754.cos.ap-hongkong.myqcloud.com/githubimages/Dependencies.png&#34; alt=&#34;依赖关系&#34; title=&#34;QQ截图20200407194419.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;System demonstration video&lt;/h2&gt; &#xA;&lt;p&gt;PC front end (user web end)：&lt;a href=&#34;https://gitee.com/cexchange/CoinExchange/attach_files&#34;&gt;https://gitee.com/cexchange/CoinExchange/attach_files&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Mobile APP：&lt;a href=&#34;https://gitee.com/cexchange/CoinExchange/attach_files&#34;&gt;https://gitee.com/cexchange/CoinExchange/attach_files&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Management background：&lt;a href=&#34;https://gitee.com/cexchange/CoinExchange/attach_files&#34;&gt;https://gitee.com/cexchange/CoinExchange/attach_files&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Development Reference&lt;/h2&gt; &#xA;&lt;p&gt;Development Reference Document：&lt;a href=&#34;https://gitee.com/cexchange/CoinExchange/blob/master/DEVELOP.md&#34;&gt;https://gitee.com/cexchange/CoinExchange/blob/master/DEVELOP.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Manage background screenshots：&lt;a href=&#34;https://gitee.com/cexchange/CoinExchange/tree/master/09_DOC/%E7%AE%A1%E7%90%86%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%E6%88%AA%E5%9B%BE&#34;&gt;https://gitee.com/cexchange/CoinExchange/tree/master/09_DOC/管理后台截图&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About server configuration and deployment&lt;/h2&gt; &#xA;&lt;p&gt;If you want to build an exchange system on your computer or cloud server, I have prepared some basic deployment manuals. Of course, installing software on linux/unix is not a simple matter. You need to have a certain Linux basics and command line skills, but also the courage and patience to solve problems, I wish you success!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jammy928/CoinExchange_CryptoExchange_Java/master/09_DOC/00_%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/%E6%8E%A8%E8%8D%90%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE.md&#34;&gt;Server Configuration Reference Manual&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jammy928/CoinExchange_CryptoExchange_Java/master/09_DOC/00_%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/%E5%AE%89%E8%A3%85%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83.md&#34;&gt;Installation Basic Environment Manual&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jammy928/CoinExchange_CryptoExchange_Java/master/09_DOC/00_%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/install.sh&#34;&gt;Service deployment script&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jammy928/CoinExchange_CryptoExchange_Java/master/09_DOC/00_%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/%E5%AE%89%E8%A3%85MySql.md&#34;&gt;Install MySql Manual&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jammy928/CoinExchange_CryptoExchange_Java/master/09_DOC/00_%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/%E5%AE%89%E8%A3%85Redis.md&#34;&gt;Install Redis Manual&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jammy928/CoinExchange_CryptoExchange_Java/master/09_DOC/00_%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/%E5%AE%89%E8%A3%85Zookeeper.md&#34;&gt;Install Zookeeper Manual&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jammy928/CoinExchange_CryptoExchange_Java/master/09_DOC/00_%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/%E5%AE%89%E8%A3%85Kafka.md&#34;&gt;Install Kafka Manual&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jammy928/CoinExchange_CryptoExchange_Java/master/09_DOC/00_%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/%E5%AE%89%E8%A3%85Mongodb.md&#34;&gt;nstall Mongodb manual&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jammy928/CoinExchange_CryptoExchange_Java/master/09_DOC/00_%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/%E6%90%AD%E5%BB%BABTC%E9%92%B1%E5%8C%85.md&#34;&gt;Building a BTC wallet node manual&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jammy928/CoinExchange_CryptoExchange_Java/master/09_DOC/00_%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/%E6%90%AD%E5%BB%BAETH%E9%92%B1%E5%8C%85.md&#34;&gt;Building ETH Wallet Node Manual&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jammy928/CoinExchange_CryptoExchange_Java/master/09_DOC/00_%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/%E6%90%AD%E5%BB%BAUSDT%E9%92%B1%E5%8C%85.md&#34;&gt;Manual of Building USDT Wallet Node&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About SpringCloud&lt;/h2&gt; &#xA;&lt;p&gt;Spring Cloud is an ordered collection of frameworks. It uses Spring Boot&#39;s development convenience to subtly simplify the development of distributed system infrastructure, such as service discovery registration, configuration center, message bus, load balancing, circuit breaker, data monitoring, etc., can be done using Spring Boot&#39;s development style One click to start and deploy. Spring Cloud does not repeat the manufacturing of wheels. It just combines the mature and practical service frameworks developed by various companies. The re-encapsulation through the Spring Boot style shields the complex configuration and implementation principles, and finally gives the development The author has left a set of distributed system development kits that are simple to understand, easy to deploy, and easy to maintain. In general, a complete Spring Cloud framework should be as shown in the following figure:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0408/133052_3ec984df_2182501.png&#34; alt=&#34;SpringCloud框架图&#34; title=&#34;图片2.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are unfamiliar with Spring Cloud, you can simply learn about Spring Cloud related tutorials first, so that you will come back to this project and it will be easier to get started. As a reminder, because the Springcloud framework diagram is a complete architecture, we will tailor some content appropriately during development to make development and deployment faster, so there are some discrepancies.&lt;/p&gt; &#xA;&lt;h2&gt;About Matchmaking Trading Engine&lt;/h2&gt; &#xA;&lt;p&gt;The system uses memory matching for the transaction queue, Kafka is used for matching order information transmission, MongoDB persists the order transaction details, and MySQL records the overall order transaction. Among them, the 01_Framework/Exchange project is mainly responsible for memory matching, and the 01_Framework/Market project is mainly responsible for order transaction persistence, market generation, market push and other services, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;K-line data, the intervals are: 1 minute, 5 minutes, 15 minutes, 30 minutes, 1 hour, 1 day, 1 week, 1 month&lt;/li&gt; &#xA; &lt;li&gt;Market depth data for all trading pairs&lt;/li&gt; &#xA; &lt;li&gt;The latest prices of all trading pairs&lt;/li&gt; &#xA; &lt;li&gt;Recently traded pairs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Modes supported by memory matching transactions&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Matching of limit order and limit order&lt;/li&gt; &#xA; &lt;li&gt;Matching market orders and limit orders&lt;/li&gt; &#xA; &lt;li&gt;Matching limit orders with market orders&lt;/li&gt; &#xA; &lt;li&gt;Matching market orders with market orders&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Limit &amp;amp; Market Order Processing Logic&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://hashcome-cos-1251041754.cos.ap-hongkong.myqcloud.com/githubimages/Limit%20Market%20price%20trading.png&#34; alt=&#34;限价&amp;amp;市价订单处理逻辑&#34; title=&#34;2222.png&#34;&gt; Note: This picture is a long time ago, the logic in the latest code is more complicated&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Other features supported by match engine&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;In addition to the ordinary matching functions of limit and market prices, the matching trading engine of this system also introduces an active transaction mode. By setting the trading start time, initial issuance volume, initial issuance price, and activity of trading pairs (such as BTC/USDT) Modes and other parameters can formulate a wealth of matching transaction modes to meet different matching modes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;for example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The exchange is expected to launch the trading pair AAA/USDT at 12:00:00 on August 8, 2020, but as a newly launched currency, how can it work without activity? The project party or the exchange decided to come up with 10,000 AAA at a price of 0.0001USDT (market price: 0.0005) for everyone to snap up. The system supports the setting of such activities.&lt;/p&gt; &#xA;&lt;p&gt;In addition, if the project party or the exchange decides to take out 10,000 AAAs to issue at the price of 0.0001USDT, I don’t want everyone to snap up, but hope that all users who recharge USDT can divide 10,000 AAAs on average. This system also supports the setting of this activity .&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;to sum up&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;n short, this system supports a highly customized matching mode. At the same time, you can also develop your own matching transaction mode, just by modifying the matching logic in the Exchange project.&lt;/p&gt; &#xA;&lt;h2&gt;About the technical composition&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Backend development：Spring、SpringMVC、SpringData、SpringCloud、SpringBoot&lt;/li&gt; &#xA; &lt;li&gt;DataBase：Mysql、Mongodb&lt;/li&gt; &#xA; &lt;li&gt;Other：redis、kafka、Ali OSS、Tencent Captcha&lt;/li&gt; &#xA; &lt;li&gt;Frontend：Vue、iView、less&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demo website&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.bizzan.com&#34;&gt;https://www.bizzan.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This was done for the customer, but later the customer stopped operating, so this website was left, because I don’t have server permissions, so this website may not be accessible at any time.&lt;/p&gt; &#xA;&lt;p&gt;Building a test site requires purchasing several cloud servers, which cost a lot, so I did not set up a test station myself, but the system is complete and has passed the commercial and practical operation test for nearly a year.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;About trading robots&lt;br&gt; Trading robots are automatic trading programs that can automatically trade based on external market conditions, so that the exchange&#39;s trading pair prices are consistent with the external, preventing losses caused by some users &#34;moving bricks&#34;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;==============================================&lt;/p&gt; &#xA;&lt;h2&gt;System operating environment&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Centos 6.8&lt;/li&gt; &#xA; &lt;li&gt;MySQL 5.5.16&lt;/li&gt; &#xA; &lt;li&gt;Redis-x64-3.2.100&lt;/li&gt; &#xA; &lt;li&gt;Mongodb 3.6.13&lt;/li&gt; &#xA; &lt;li&gt;kafka_2.11-2.2.1&lt;/li&gt; &#xA; &lt;li&gt;nginx-1.16.0&lt;/li&gt; &#xA; &lt;li&gt;JRE 8u241&lt;/li&gt; &#xA; &lt;li&gt;JDK 1.8&lt;/li&gt; &#xA; &lt;li&gt;Vue&lt;/li&gt; &#xA; &lt;li&gt;Zookeeper&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Recommended configuration for production environment&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://hashcome-cos-1251041754.cos.ap-hongkong.myqcloud.com/githubimages/Server%20configuration.png&#34; alt=&#34;生产环境建议配置&#34; title=&#34;QQ截图20200406204341.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;File directory description&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;00_framework&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;└─———admin Background management API&lt;/p&gt; &#xA;&lt;p&gt;└─———bitrade-job Task management（Empty）&lt;/p&gt; &#xA;&lt;p&gt;└─———chat OTC Chat&lt;/p&gt; &#xA;&lt;p&gt;└─———cloud SpringCloud Eureka&lt;/p&gt; &#xA;&lt;p&gt;└─———core Core&lt;/p&gt; &#xA;&lt;p&gt;└─———exchange match trading&lt;/p&gt; &#xA;&lt;p&gt;└─———exchange-api order API&lt;/p&gt; &#xA;&lt;p&gt;└─———exchange-core order core&lt;/p&gt; &#xA;&lt;p&gt;└─———jar Other lib&lt;/p&gt; &#xA;&lt;p&gt;└─———market market API、K-line service&lt;/p&gt; &#xA;&lt;p&gt;└─———otc-api OTC trade API&lt;/p&gt; &#xA;&lt;p&gt;└─———otc-core OTC core&lt;/p&gt; &#xA;&lt;p&gt;└─———sql SQL script&lt;/p&gt; &#xA;&lt;p&gt;└─———ucenter-api user API&lt;/p&gt; &#xA;&lt;p&gt;└─———wallet wallet&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;01_wallet_rpc&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;└─———bitcoin&lt;/p&gt; &#xA;&lt;p&gt;└─———bsv&lt;/p&gt; &#xA;&lt;p&gt;└─———btm&lt;/p&gt; &#xA;&lt;p&gt;└─———eos&lt;/p&gt; &#xA;&lt;p&gt;└─———erc-eusdt&lt;/p&gt; &#xA;&lt;p&gt;└─———erc-token（可对接各种ERC20币种）&lt;/p&gt; &#xA;&lt;p&gt;└─———eth&lt;/p&gt; &#xA;&lt;p&gt;└─———ltc&lt;/p&gt; &#xA;&lt;p&gt;└─———usdt&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;02_App_Android&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;03_App_IOS&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;04_Web_Admin&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;05_Web_Front&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Use tutorial&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Prepare the mysql database and create a database named &#34;xxxx&#34;&lt;/li&gt; &#xA; &lt;li&gt;Prepare redis cache database&lt;/li&gt; &#xA; &lt;li&gt;Prepare kafka streaming environment (first configure to run zookper, then configure to run kafka)&lt;/li&gt; &#xA; &lt;li&gt;Prepare mongodb database environment, create users admin, xxxx, create bitrade database&lt;/li&gt; &#xA; &lt;li&gt;Prepare Alibaba Cloud OSS (modify the place to be configured in the project)&lt;/li&gt; &#xA; &lt;li&gt;Prepare nginx and modify the configuration file (optional, need to be configured for official launch)&lt;/li&gt; &#xA; &lt;li&gt;Modify the configuration file in the framework code to prepare the environment configuration parameters&lt;/li&gt; &#xA; &lt;li&gt;Compile to generate jar executable file&lt;/li&gt; &#xA; &lt;li&gt;Run cloud.jar (microservices registration center)&lt;/li&gt; &#xA; &lt;li&gt;Run exchange.jar (match trading engine)&lt;/li&gt; &#xA; &lt;li&gt;Run market.jar (Quote Center, need to wait for Exchange.jar to fully start)&lt;/li&gt; &#xA; &lt;li&gt;Run ucenter.jar (User Center)&lt;/li&gt; &#xA; &lt;li&gt;Run other modules (wallet.jar, chat.jar, otc-api.jar, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Open mysql and import the xxxxxxx.sql file in the sql folder in the framework code. Note that if the trigger sql reports an error, you need to add a trigger for the wallet table&lt;/li&gt; &#xA; &lt;li&gt;Run the front-end vue project&lt;/li&gt; &#xA; &lt;li&gt;Run the back-end vue project&lt;/li&gt; &#xA; &lt;li&gt;Run wallet RPC&lt;/li&gt; &#xA; &lt;li&gt;Run the automated trading robot program (the code in this part is not uploaded, but it does not affect)&lt;/li&gt; &#xA; &lt;li&gt;Run the Admin project (the service does not depend on other services, so you can just run this project and directly view the background)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Technical Support&lt;/h2&gt; &#xA;&lt;p&gt;This digital currency trading system is a project developed by my company for an exchange. The exchange has ceased operations due to team reasons, and our company was disbanded in February. Since I participated in the project, I was responsible for overall R&amp;amp;D management, architecture design and customer docking, so I mastered all the codes.&lt;/p&gt; &#xA;&lt;p&gt;There are some places that need special attention in the use of the function of this system, such as other operations after the new transaction pair, improper operation will cause data disorder errors.&lt;/p&gt; &#xA;&lt;p&gt;I can provide paid technical assistance and use training guidance!&lt;/p&gt; &#xA;&lt;p&gt;Email：&lt;a href=&#34;mailto:877070886@qq.com&#34;&gt;877070886@qq.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Precautions&lt;/h2&gt; &#xA;&lt;p&gt;When the memory is insufficient, enter top in the Linux console to view the java process occupies a lot of memory (a java process occupies more than 1G), because there are many jar packages to run, so you need to control the memory used by certain jar packages, you can choose A few less resource intensive projects are as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;java -jar -Xms128m -Xmx128m -Xmn200m -Xss256k  admin-api.jar&#xA;&#xA;java -jar -Xms512m -Xmx512m -Xmn200m -Xss256k  cloud.jar&#xA;&#xA;java -jar -Xms512m -Xmx512m -Xmn200m -Xss256k  wallet.jar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;About Mail &amp;amp; SMS&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;This system supports the operation status of the system for sending emails and short messages&lt;/li&gt; &#xA; &lt;li&gt;System notification/alarm support: user registration, user authentication, user recharge/withdrawal, currency RPC operation status, system resource usage monitoring, etc. 24 kinds of monitoring&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Questions about database scripts&lt;/h2&gt; &#xA;&lt;p&gt;Some reported that there is no complete SQL file. This is because the successfully compiled Jar will automatically map the Entity to a database structure after the first run. The SQL in the project only completes some database structures that Springcloud cannot complete. The automatic database configuration is located in the application.properties configuration file:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;#jpa&lt;br&gt; spring.jpa.show-sql=true&lt;br&gt; spring.data.jpa.repositories.enabled=true&lt;br&gt; spring.jpa.hibernate.ddl-auto=update&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;spring.jpa.hibernate.ddl-auto=update This configuration will automatically update the database structure.&lt;/p&gt; &#xA;&lt;h2&gt;Core function description (user side)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 1. Registration/login/real-name authentication/audit (currently only supports mobile phones, secondary development can be added to the mail, very simple)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 2. Banner/Announcement/Help/Customized page (Banner supports separate settings for PC and APP, helps support various classification modes)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 3. Fiat currency C2C transaction/fiat currency OTC transaction (supports two fiat currency models, the platform can undertake C2C fiat currency exchange in the early stage of the project, and OTC transactions can be opened later)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 4. Coin trading (support for limit order, market order, and other commission modes can be added for secondary development)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 5. Invite registered/promotion partners (support for ranking statistics on the number of invited promoters and commissions by day, week and month)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 6. Innovation Lab (there are many supported functions in this part, and itemized explanations. In addition, the APP does not support this function for the time being)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;[x] 6-1. First launch panic buying activity mode (for example, when issuing a new trading pair, a certain number of currencies can be set on the trading pair for panic buying)&lt;/li&gt; &#xA;  &lt;li&gt;[x] 6-2. The first distribution mode of activity (for example, before issuing the BTC/USDT trading pair, the official took out 5BTC for the activity, and divided the BTC equally according to how much USDT the user recharged mortgaged)&lt;/li&gt; &#xA;  &lt;li&gt;[x] 6-3. Panic buying mode (for example, before the ZZZ/USDT trading pair is issued, the ZZZ currency price is 5USDT, and the official issuance activity price is 0.5USDT, you can use this mode)&lt;/li&gt; &#xA;  &lt;li&gt;[x] 6-4. Control panel sharing mode (such as 6-3, only average distribution)&lt;/li&gt; &#xA;  &lt;li&gt;[x] 6-5. Mining machine activity mode (support users to mortgage a certain amount of currency, and the official promise to return a certain amount of currency every month)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 7. Red envelope function (support platform and official to issue a certain amount of currency red envelope, this function is suitable for user fission)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 8. Various basic management such as user asset management, flow management, commission management, real name management&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Core function description (management side)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 1. Summary (view platform operating data, including transaction amount, registered number, recharge, etc.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 2. Member management (member information management, member real name verification, member real name management, member balance management, member recharge/freeze balance, etc.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 3. Invitation management (member invitation information, member invitation ranking management)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 4. CTC management (CTC order management, flow management, acceptor management)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 5. Content management (PC advertising management, APP advertising management, announcement management, help management)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 6. Financial management (charge and withdrawal management, financial flow management, reconciliation management, currency wallet balance management)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 7. Currency management (new trading pair, management trading pair, new trading robot, setting trading robot parameters, setting market engine/trading engine, revoking all orders)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 8. Event management (new activity, mining machine subscription, panic buying/division management)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 9. Red envelope management (platform red envelope management, user red envelope management)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 10. System management (role management, department management, user management, authority management, currency management, RPC management, version management)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 11. Margin management (this function is considered in design, but not used during actual operation)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 12. OTC management (advertising management, order management, OTC currency management, surrender management, etc., this function has not been verified by actual operation)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About blockchain wallet RPC&lt;/h2&gt; &#xA;&lt;p&gt;This project provides two wallet docking methods, one is self-built node + blockchain browser, and the other is third-party wallet docking. If you want to use a self-built node or blockchain browser, you can directly compile the code in 00_framework. If you want to use a third-party wallet for docking, you can download the project files of the YouDun wallet in the 07_Uduncloud folder and copy them to 00_framework.&lt;/p&gt; &#xA;&lt;p&gt;After you get the code, you can not connect the blockchain nodes during the debugging and running of this project, which will not have much impact; even if you do not connect the blockchain nodes, you can deploy one of them with matching transaction function Trading platform (just that users cannot recharge their wallet addresses).&lt;/p&gt; &#xA;&lt;p&gt;When you are gradually familiar with the entire system, and have a certain basic reserve of blockchain operation principles, node construction, and blockchain browser, you can start to study the projects under the &lt;strong&gt;01_wallet_rpc&lt;/strong&gt; folder. Each currency corresponds to different data access methods. Most blockchain projects have the same or very similar wallet operation methods. For example, Bitcoin derivatives such as BTC, LTC, BCH, BSV, BCD, etc., have almost the same API operations. The same; another example is ETH, when you master the operation of a contract currency, the operation of other digital currencies based on ETH is almost the same. So, basically when you spend time understanding one, you understand a bunch of currencies.&lt;/p&gt; &#xA;&lt;p&gt;The wallet operation scheme used in this project is also different, and as far as possible to show you different usages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Self-built full nodes such as BTC and USDT now require almost 300G of hard disk space;&lt;/li&gt; &#xA; &lt;li&gt;Like ETH, self-built light nodes are used (&lt;a href=&#34;https://www.cnblogs.com/bizzan/p/11341713.html&#34;&gt;Reference Article&lt;/a&gt;), because the full node requires too much hard disk space;&lt;/li&gt; &#xA; &lt;li&gt;Such as BCH, BSV, etc., use a third-party blockchain browser to obtain data;&lt;/li&gt; &#xA; &lt;li&gt;Like XRP, the official has provided an interface to access block data ([Ripple API GitHub address] (&lt;a href=&#34;https://github.com/ripple/ripple-lib/&#34;&gt;https://github.com/ripple/ripple-lib/&lt;/a&gt;))&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Generally speaking, when the amount of funds exchanged by the exchange is not large, you can explore it yourself, but when the amount of funds exchanged is large, if you are not confident about operating your wallet, you can also use a third-party wallet service Of course, this requires you to negotiate with the wallet service provider to pay an annual fee or something.&lt;/p&gt; &#xA;&lt;p&gt;The following figure is a brief explanatory diagram of the user recharge monitoring logic, just take a look at it:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0327/162223_5d418523_2182501.png&#34; alt=&#34;充值逻辑&#34; title=&#34;13981024-76374161aedf70d6.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;System display (PC front end)&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0327/135803_75ec9a0b_2182501.png&#34; alt=&#34;首页&#34; title=&#34;01_首页.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0327/135834_4a5fb1c4_2182501.png&#34; alt=&#34;币币交易&#34; title=&#34;02_币币交易.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0327/135902_a7286b9c_2182501.png&#34; alt=&#34;法币交易&#34; title=&#34;03_法币交易CTC.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0322/193759_edc5dc7b_2182501.png&#34; alt=&#34;登录&#34; title=&#34;图片5.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0327/135930_0c02d004_2182501.png&#34; alt=&#34;活动/创新实验室&#34; title=&#34;04_创新实验室.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0327/140037_074a81a4_2182501.png&#34; alt=&#34;创新实验室详情&#34; title=&#34;创新实验室详情.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0327/140003_9b962fe7_2182501.png&#34; alt=&#34;推广合伙人&#34; title=&#34;07_推广合伙人.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0322/193852_3ad12a6f_2182501.png&#34; alt=&#34;公告&#34; title=&#34;图片8.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0322/193902_ef09925e_2182501.png&#34; alt=&#34;帮助&#34; title=&#34;图片9.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;System operation display (APP front end)&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0322/193927_9940ca7c_2182501.jpeg&#34; alt=&#34;首页&#34; title=&#34;图片10.jpg&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0322/193941_ff5a16a2_2182501.jpeg&#34; alt=&#34;行情&#34; title=&#34;图片11.jpg&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0322/193951_abf7b5b6_2182501.jpeg&#34; alt=&#34;K线&#34; title=&#34;图片12.jpg&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0322/194003_d14a772a_2182501.jpeg&#34; alt=&#34;交易&#34; title=&#34;图片13.jpg&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0322/194021_a047d3a5_2182501.jpeg&#34; alt=&#34;个人中心&#34; title=&#34;图片14.jpg&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0322/194059_faeeeb4a_2182501.jpeg&#34; alt=&#34;个人资产管理&#34; title=&#34;图片15.jpg&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0322/194112_7ae11b00_2182501.jpeg&#34; alt=&#34;邀请管理&#34; title=&#34;图片16.jpg&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Some pages on the mobile phone Web&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0325/130921_7d8dee06_2182501.jpeg&#34; alt=&#34;APP下载&#34; title=&#34;12.jpg&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0325/130936_18809c8f_2182501.jpeg&#34; alt=&#34;抢红包&#34; title=&#34;11.jpg&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0325/130948_e36b562d_2182501.jpeg&#34; alt=&#34;活动/创新实验室&#34; title=&#34;13.jpg&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;System operation display (back-end)&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0322/194251_9b5293ff_2182501.png&#34; alt=&#34;登录&#34; title=&#34;图片17.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0322/194305_f83e4f90_2182501.png&#34; alt=&#34;首页&#34; title=&#34;图片18.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0322/194321_73eb8f58_2182501.png&#34; alt=&#34;用户管理&#34; title=&#34;图片19.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0322/194337_fd257186_2182501.png&#34; alt=&#34;邀请管理&#34; title=&#34;图片20.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0322/194406_ebe7328d_2182501.png&#34; alt=&#34;法币交易订单管理&#34; title=&#34;图片21.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0322/194433_4fb39b0a_2182501.png&#34; alt=&#34;首页Banner管理&#34; title=&#34;图片22.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0322/194450_1eb7bb6f_2182501.png&#34; alt=&#34;交易对管理&#34; title=&#34;图片23.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0322/194505_204d23ce_2182501.png&#34; alt=&#34;活动管理&#34; title=&#34;图片24.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0322/194531_e12eb93a_2182501.png&#34; alt=&#34;红包管理&#34; title=&#34;图片25.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0322/194618_fe17409a_2182501.png&#34; alt=&#34;币种管理&#34; title=&#34;图片26.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0322/194654_bd0acbe7_2182501.png&#34; alt=&#34;OTC管理，后端开发完成，前端未对接&#34; title=&#34;图片27.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;APP download picture example&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0324/182826_f0617759_2182501.png&#34; alt=&#34;输入图片说明&#34; title=&#34;download1.png&#34;&gt; &lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0324/182834_7a82f8a8_2182501.png&#34; alt=&#34;输入图片说明&#34; title=&#34;download2.png&#34;&gt; &lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0324/182840_c3d08fb7_2182501.png&#34; alt=&#34;输入图片说明&#34; title=&#34;download3.png&#34;&gt; &lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0324/182850_8b19fe57_2182501.png&#34; alt=&#34;输入图片说明&#34; title=&#34;download4.png&#34;&gt; &lt;img src=&#34;https://images.gitee.com/uploads/images/2020/0324/182856_9206a79a_2182501.png&#34; alt=&#34;输入图片说明&#34; title=&#34;download5.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Attention&lt;/h2&gt; &#xA;&lt;p&gt;Anyone who uses this source code to engage in commercial activities and causes losses to others and himself is not responsible for me!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bazelbuild/bazel</title>
    <updated>2022-08-07T01:32:13Z</updated>
    <id>tag:github.com,2022-08-07:/bazelbuild/bazel</id>
    <link href="https://github.com/bazelbuild/bazel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;a fast, scalable, multi-language and extensible build system&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://bazel.build&#34;&gt;Bazel&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;{Fast, Correct} - Choose two&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Build and test software of any size, quickly and reliably.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Speed up your builds and tests&lt;/strong&gt;: Bazel rebuilds only what is necessary. With advanced local and distributed caching, optimized dependency analysis and parallel execution, you get fast and incremental builds.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;One tool, multiple languages&lt;/strong&gt;: Build and test Java, C++, Android, iOS, Go, and a wide variety of other language platforms. Bazel runs on Windows, macOS, and Linux.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Scalable&lt;/strong&gt;: Bazel helps you scale your organization, codebase, and continuous integration solution. It handles codebases of any size, in multiple repositories or a huge monorepo.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Extensible to your needs&lt;/strong&gt;: Easily add support for new languages and platforms with Bazel&#39;s familiar extension language. Share and re-use language rules written by the growing Bazel community.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://bazel.build/install&#34;&gt;Install Bazel&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://bazel.build/contribute/getting-started&#34;&gt;Get started with Bazel&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Follow our tutorials:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bazel.build/tutorials/cpp&#34;&gt;Build C++&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bazel.build/tutorials/java&#34;&gt;Build Java&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bazel.build/tutorials/android-app&#34;&gt;Android&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bazel.build/tutorials/ios-app&#34;&gt;iOS&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bazel.build/docs/user-manual&#34;&gt;Bazel command line&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bazel.build/reference/be/overview&#34;&gt;Rule reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bazel.build/reference/query&#34;&gt;Use the query command&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bazel.build/rules/concepts&#34;&gt;Extend Bazel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bazel.build/reference/test-encyclopedia&#34;&gt;Write tests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bazel.build/community/roadmaps&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bazelbuild/bazel/wiki/Bazel-Users&#34;&gt;Who is using Bazel?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reporting a Vulnerability&lt;/h2&gt; &#xA;&lt;p&gt;To report a security issue, please email &lt;a href=&#34;mailto:security@bazel.build&#34;&gt;security@bazel.build&lt;/a&gt; with a description of the issue, the steps you took to create the issue, affected versions, and, if known, mitigations for the issue. Our vulnerability management team will respond within 3 working days of your email. If the issue is confirmed as a vulnerability, we will open a Security Advisory. This project follows a 90 day disclosure timeline.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing to Bazel&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/bazelbuild/bazel/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://buildkite.com/bazel/bazel-bazel&#34;&gt;&lt;img src=&#34;https://badge.buildkite.com/1fd282f8ad98c3fb10758a821e5313576356709dd7d11e9618.svg?status=master&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>