<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-06-20T01:32:19Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pixelsdb/pixels</title>
    <updated>2025-06-20T01:32:19Z</updated>
    <id>tag:github.com,2025-06-20:/pixelsdb/pixels</id>
    <link href="https://github.com/pixelsdb/pixels" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An efficient storage and compute engine for both on-prem and cloud-native data analytics.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Pixels&lt;/h1&gt; &#xA;&lt;p&gt;The core of Pixels is a columnar storage engine designed for data lakes and warehouses. It is optimized for analytical tables stored in on-premises and cloud-native storage systems, including S3, GCS, HDFS, Redis, and local file systems. Pixels outperforms Parquet, which is the most widely used columnar format in today&#39;s lakehouses, by up to two orders of magnitude.&lt;/p&gt; &#xA;&lt;p&gt;We have integrated Pixels with popular query engines including DuckDB (1.1.0), Trino (405 and 466), StarRocks (3.3.5), PrestoDB (0.279), and Hive (2.3+).&lt;/p&gt; &#xA;&lt;p&gt;The DuckDB integration and the C++ implementation of Pixels Reader are in the &lt;a href=&#34;https://raw.githubusercontent.com/pixelsdb/pixels/master/cpp&#34;&gt;cpp&lt;/a&gt; folder. The other integrations are opensourced in separate repositories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pixelsdb/pixels-trino&#34;&gt;Pixels Connector for Trino&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pixelsdb/pixels-presto&#34;&gt;Pixels Connector for PrestoDB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pixelsdb/starrocks&#34;&gt;StarRocks with Pixels Integration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pixelsdb/pixels-hive&#34;&gt;Pixels SerDe for Hive&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Pixels also has its own query engine &lt;a href=&#34;https://raw.githubusercontent.com/pixelsdb/pixels/master/pixels-turbo&#34;&gt;Pixels-Turbo&lt;/a&gt;. It prioritizes processing queries in an autoscaling MPP cluster (currently based on Trino) and exploits serverless functions (e.g, &lt;a href=&#34;https://aws.amazon.com/lambda/&#34;&gt;AWS Lambda&lt;/a&gt; or &lt;a href=&#34;https://github.com/vhive-serverless/vHive&#34;&gt;vHive / Knative&lt;/a&gt;) to accelerate the processing of workload spikes. With &lt;code&gt;Pixels-Turbo&lt;/code&gt;, we can achieve better performance and cost-efficiency for continuous workloads while not compromising elasticity for workload spikes.&lt;/p&gt; &#xA;&lt;p&gt;Based on Pixels-Turbo, we implement &lt;a href=&#34;https://github.com/pixelsdb/pixels-rover&#34;&gt;Pixels-Rover&lt;/a&gt;, a web-based query interface that provides users with a complete experience of serverless query processing, natural-language-to-SQL translation, and flexible service levels in query urgency. It allows users to select whether to execute the query immediately, within a grace period, or eventually. Pixels-Turbo can apply different resource scheduling and query execution policies for Different levels of query urgency, which will result in different monetary costs on resources.&lt;/p&gt; &#xA;&lt;h2&gt;Build Pixels&lt;/h2&gt; &#xA;&lt;p&gt;Pixels is mainly implemented in Java (with some JNI hooks of system calls and C/C++ libs), while there is a C++ implementation of the Pixels Reader. The &lt;a href=&#34;https://raw.githubusercontent.com/pixelsdb/pixels/master/cpp/README.md&#34;&gt;C++ document&lt;/a&gt; gives the instructions of using the C++ reader. Here we explain how to build and use the Java components.&lt;/p&gt; &#xA;&lt;p&gt;JDK 8 (or above) and Maven 3.8 (or above) are required to build Pixels. Earlier Maven versions may work but are not tested. After installing these prerequisites, clone the Pixels codebase into any &lt;code&gt;SRC_BASE&lt;/code&gt; directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/pixelsdb/pixels.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Enter &lt;code&gt;SRC_BASE/pixels&lt;/code&gt;, use &lt;code&gt;mvn install&lt;/code&gt; to build and install it to the local Maven repository.&lt;/p&gt; &#xA;&lt;p&gt;It may take a couple of minutes to complete. After that, find jar files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;pixels-daemon-*-full.jar&lt;/code&gt; in &lt;code&gt;pixels-daemon/target&lt;/code&gt;,this is the jar to run Pixels daemons.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pixels-cli-*-full.jar&lt;/code&gt; in &lt;code&gt;pixels-cli/target&lt;/code&gt;, this is the jar of Pixels command line tool.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;They will be used in the installation of Pixels.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: Some Junit tests in Pixels access some low-level packages in the JDK, such as sun.nio and java.nio. Compiling and running such test cases require lower version JDKs (e.g., 1.8). However, these tests are not necessary for the aforementioned build process.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Pixels is compatible with different query engines, such as Trino, Presto, and Hive. The query engine integrations also can be built using maven. For example, to build the Trino integration for Pixels, just git clone &lt;a href=&#34;https://github.com/pixelsdb/pixels-trino&#34;&gt;pixels-trino&lt;/a&gt;, and build it using &lt;code&gt;mvn package&lt;/code&gt; in the local git repository.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Pixels by itself is compatible with Java 8+ and Maven 3.8+. However, third-party query engines such as Trino may require a later JDK (e.g., Trino 405/466 requires JDK17.0.3+/23.0.0+) and Maven. It is fine to build the query engine integration (e.g., &lt;code&gt;pixels-trino&lt;/code&gt;) with the same or higher versions of JDK and Maven than Pixels.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Develop Pixels in IntelliJ&lt;/h2&gt; &#xA;&lt;p&gt;If you want to develop Pixels in Intellij, open &lt;code&gt;SRC_BASE/pixels&lt;/code&gt; as a maven project. When the project is fully indexed and the dependencies are successfully downloaded, you can build Pixels using the maven plugin (as an alternative of &lt;code&gt;mvn package&lt;/code&gt;), run and debug unit tests, and debug Pixels by setting up a &lt;em&gt;Remote JVM Debug&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In some versions of IntelliJ, the default &lt;code&gt;idea.max.intellisense.filesize&lt;/code&gt; in IntelliJ may be not large enough for the source files generated by ProtoBuf. Hence, the large generated source file will be considered as plain text file in the user interface. To solve this problem, set this property to at least &lt;code&gt;3600&lt;/code&gt; (i.e., 3.6MB) in &lt;code&gt;Help&lt;/code&gt; -&amp;gt; &lt;code&gt;Edit Custom Properties...&lt;/code&gt; and restart Intellij.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;To run or debug the unit tests or the main classes of Pixels in Intellij, set the &lt;code&gt;PIXELS_HOME&lt;/code&gt; environment variable for &lt;code&gt;Junit&lt;/code&gt; or &lt;code&gt;Application&lt;/code&gt; in &lt;code&gt;Run&lt;/code&gt; -&amp;gt; &lt;code&gt;Edit Configurations&lt;/code&gt; -&amp;gt; &lt;code&gt;Edit Configuration Templetes&lt;/code&gt;. Ensure that the &lt;code&gt;PIXELS_HOME&lt;/code&gt; directory exists and follow the instructions in &lt;a href=&#34;https://raw.githubusercontent.com/pixelsdb/pixels/master/docs/INSTALL.md#install-pixels&#34;&gt;Install Pixels&lt;/a&gt; to put the &lt;code&gt;pixels.properties&lt;/code&gt; into &lt;code&gt;PIXELS_HOME/etc&lt;/code&gt; and create the &lt;code&gt;logs&lt;/code&gt; directory where the log files will be written into.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Deploy and Evaluate Pixels&lt;/h2&gt; &#xA;&lt;p&gt;You can follow the &lt;a href=&#34;https://raw.githubusercontent.com/pixelsdb/pixels/master/docs/INSTALL.md&#34;&gt;Installation&lt;/a&gt; instructions to deploy Pixels in a cluster, and learn how to use Pixels and evaluate its performance following &lt;a href=&#34;https://raw.githubusercontent.com/pixelsdb/pixels/master/docs/TPC-H.md&#34;&gt;TPC-H Evaluation&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/pixelsdb/pixels/master/docs/CLICKBENCH.md&#34;&gt;ClickBench Evaluation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions to Pixels and its subprojects. If you are interested in contributing to Pixels, please read our &lt;a href=&#34;https://github.com/pixelsdb/pixels/wiki/Git-Workflow&#34;&gt;Git Workflow&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Publications&lt;/h2&gt; &#xA;&lt;p&gt;Pixels is an academic system aims at providing production-grade quality. It supports all the functionalities required by TPC-H and is compatible with the mainstream data analytic ecosystems. The key ideas and insights in Pixels are elaborated in the following publications.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;ICDE&#39;25&lt;/code&gt; &lt;a href=&#34;https://arxiv.org/abs/2405.19784&#34;&gt;PixelsDB: Serverless and NL-Aided Data Analytics with Flexible Service Levels and Prices&lt;/a&gt;&lt;br&gt; Haoqiong Bian, Dongyang Geng, Haoyang Li, Yunpeng Chai, Anastasia Ailamaki&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;arXiv&#39;24&lt;/code&gt; &lt;a href=&#34;https://arxiv.org/abs/2409.01388&#34;&gt;Serverless Query Processing with Flexible Performance SLAs and Prices&lt;/a&gt;&lt;br&gt; Haoqiong Bian, Dongyang Geng, Yunpeng Chai, Anastasia Ailamaki&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;SIGMOD&#39;23&lt;/code&gt; &lt;a href=&#34;https://doi.org/10.1145/3589306&#34;&gt;Using Cloud Functions as Accelerator for Elastic Data Analytics&lt;/a&gt;&lt;br&gt; Haoqiong Bian, Tiannan Sha, Anastasia Ailamaki&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;EDBT&#39;22&lt;/code&gt; &lt;a href=&#34;https://doi.org/10.48786/edbt.2022.33&#34;&gt;Columnar Storage Optimization and Caching for Data Lakes (short)&lt;/a&gt;&lt;br&gt; Guodong Jin, Haoqiong Bian, Yueguo Chen, Xiaoyong Du&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;ICDE&#39;22&lt;/code&gt; &lt;a href=&#34;https://doi.org/10.1109/ICDE53745.2022.00276&#34;&gt;Pixels: An Efficient Column Store for Cloud Data Lakes&lt;/a&gt;&lt;br&gt; Haoqiong Bian, Anastasia Ailamaki&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;CIDR&#39;20&lt;/code&gt; &lt;a href=&#34;https://www.cidrdb.org/cidr2020/gongshow2020/gongshow/abstracts/cidr2020_abstract74.pdf&#34;&gt;Pixels: Multiversion Wide Table Store for Data Lakes (abstract)&lt;/a&gt;&lt;br&gt; Haoqiong Bian&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;ICDE&#39;18&lt;/code&gt; &lt;a href=&#34;https://doi.org/10.1109/ICDE.2018.00200&#34;&gt;Rainbow: Adaptive Layout Optimization for Wide Tables (demo)&lt;/a&gt;&lt;br&gt; Haoqiong Bian, Youxian Tao, Guodong Jin, Yueguo Chen, Xiongpai Qin, Xiaoyong Du&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;SIGMOD&#39;17&lt;/code&gt; &lt;a href=&#34;https://doi.org/10.1145/3035918.3035930&#34;&gt;Wide Table Layout Optimization by Column Ordering and Duplication&lt;/a&gt;&lt;br&gt; Haoqiong Bian, Ying Yan, Wenbo Tao, Liang Jeff Chen, Yueguo Chen, Xiaoyong Du, Thomas Moscibroda&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
</feed>