<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-22T01:33:54Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jeremylong/DependencyCheck</title>
    <updated>2022-09-22T01:33:54Z</updated>
    <id>tag:github.com,2022-09-22:/jeremylong/DependencyCheck</id>
    <link href="https://github.com/jeremylong/DependencyCheck" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OWASP dependency-check is a software composition analysis utility that detects publicly disclosed vulnerabilities in application dependencies.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://mvnrepository.com/artifact/org.owasp/dependency-check-maven&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/org.owasp/dependency-check-maven.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/jeremylong/DependencyCheck/workflows/Build%20and%20Deploy/badge.svg?branch=main&#34; alt=&#34;Build and Deploy&#34;&gt; &lt;a href=&#34;https://scan.coverity.com/projects/dependencycheck&#34;&gt;&lt;img src=&#34;https://img.shields.io/coverity/scan/1654.svg?sanitize=true&#34; alt=&#34;Coverity Scan Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codacy.com/app/jeremylong/DependencyCheck?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=jeremylong/DependencyCheck&amp;amp;utm_campaign=Badge_Grade&#34;&gt;&lt;img src=&#34;https://api.codacy.com/project/badge/Grade/6b6021d481dc41a888c5da0d9ecf9494&#34; alt=&#34;Codacy Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/843&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/843/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%202-blue.svg?sanitize=true&#34; alt=&#34;Apache 2.0 License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.toolswatch.org/2018/05/black-hat-arsenal-usa-2018-the-w0w-lineup/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/toolswatch/badges/master/arsenal/usa/2018.svg?sanitize=true&#34; alt=&#34;Black Hat Arsenal&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.toolswatch.org/2015/06/black-hat-arsenal-usa-2015-speakers-lineup/&#34;&gt;&lt;img src=&#34;https://www.toolswatch.org/badges/arsenal/2015.svg?sanitize=true&#34; alt=&#34;Black Hat Arsenal&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.toolswatch.org/2014/06/black-hat-usa-2014-arsenal-tools-speaker-list/&#34;&gt;&lt;img src=&#34;https://www.toolswatch.org/badges/arsenal/2014.svg?sanitize=true&#34; alt=&#34;Black Hat Arsenal&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.toolswatch.org/2013/06/announcement-blackhat-arsenal-usa-2013-selected-tools/&#34;&gt;&lt;img src=&#34;https://www.toolswatch.org/badges/arsenal/2013.svg?sanitize=true&#34; alt=&#34;Black Hat Arsenal&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Dependency-Check&lt;/h1&gt; &#xA;&lt;p&gt;Dependency-Check is a Software Composition Analysis (SCA) tool that attempts to detect publicly disclosed vulnerabilities contained within a project&#39;s dependencies. It does this by determining if there is a Common Platform Enumeration (CPE) identifier for a given dependency. If found, it will generate a report linking to the associated CVE entries.&lt;/p&gt; &#xA;&lt;p&gt;Documentation and links to production binary releases can be found on the &lt;a href=&#34;http://jeremylong.github.io/DependencyCheck/&#34;&gt;github pages&lt;/a&gt;. Additionally, more information about the architecture and ways to extend dependency-check can be found on the &lt;a href=&#34;https://github.com/jeremylong/DependencyCheck/wiki&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;7.0.0 Upgrade Notice&lt;/h2&gt; &#xA;&lt;p&gt;If upgrading to 7.0.0 or higher, there were breaking changes. If you get an error indicating you can&#39;t connect to the database you will need to run the purge command to remove the old database:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;gradle: &lt;code&gt;./gradlew dependencyCheckPurge&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;maven: &lt;code&gt;mvn org.owasp:dependency-check-maven:7.0.0:purge&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;cli: &lt;code&gt;dependency-check.sh --purge&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Homebrew users upgrading to dependency-check 7.0.0 will need to purge their old database.&lt;/p&gt; &#xA;&lt;h2&gt;Current Releases&lt;/h2&gt; &#xA;&lt;h3&gt;Jenkins Plugin&lt;/h3&gt; &#xA;&lt;p&gt;For instructions on the use of the Jenkins plugin please see the &lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/OWASP+Dependency-Check+Plugin&#34;&gt;OWASP Dependency-Check Plugin page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Command Line&lt;/h3&gt; &#xA;&lt;p&gt;More detailed instructions can be found on the &lt;a href=&#34;http://jeremylong.github.io/DependencyCheck/dependency-check-cli/&#34;&gt;dependency-check github pages&lt;/a&gt;. The latest CLI can be downloaded from github in the &lt;a href=&#34;https://github.com/jeremylong/DependencyCheck/releases&#34;&gt;releases section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On *nix&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./bin/dependency-check.sh -h&#xA;$ ./bin/dependency-check.sh --out . --scan [path to jar files to be scanned]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; .\bin\dependency-check.bat -h&#xA;&amp;gt; .\bin\dependency-check.bat --out . --scan [path to jar files to be scanned]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Mac with &lt;a href=&#34;http://brew.sh&#34;&gt;Homebrew&lt;/a&gt; Note - homebrew users upgrading from 5.x to 6.0.0 will need to run &lt;code&gt;dependency-check.sh --purge&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ brew update &amp;amp;&amp;amp; brew install dependency-check&#xA;$ dependency-check -h&#xA;$ dependency-check --out . --scan [path to jar files to be scanned]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Maven Plugin&lt;/h3&gt; &#xA;&lt;p&gt;More detailed instructions can be found on the &lt;a href=&#34;http://jeremylong.github.io/DependencyCheck/dependency-check-maven&#34;&gt;dependency-check-maven github pages&lt;/a&gt;. By default, the plugin is tied to the &lt;code&gt;verify&lt;/code&gt; phase (i.e. &lt;code&gt;mvn verify&lt;/code&gt;). Alternatively, one can directly invoke the plugin via &lt;code&gt;mvn org.owasp:dependency-check-maven:check&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The dependency-check plugin can be configured using the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;project&amp;gt;&#xA;    &amp;lt;build&amp;gt;&#xA;        &amp;lt;plugins&amp;gt;&#xA;            ...&#xA;            &amp;lt;plugin&amp;gt;&#xA;              &amp;lt;groupId&amp;gt;org.owasp&amp;lt;/groupId&amp;gt;&#xA;              &amp;lt;artifactId&amp;gt;dependency-check-maven&amp;lt;/artifactId&amp;gt;&#xA;              &amp;lt;executions&amp;gt;&#xA;                  &amp;lt;execution&amp;gt;&#xA;                      &amp;lt;goals&amp;gt;&#xA;                          &amp;lt;goal&amp;gt;check&amp;lt;/goal&amp;gt;&#xA;                      &amp;lt;/goals&amp;gt;&#xA;                  &amp;lt;/execution&amp;gt;&#xA;              &amp;lt;/executions&amp;gt;&#xA;            &amp;lt;/plugin&amp;gt;&#xA;            ...&#xA;        &amp;lt;/plugins&amp;gt;&#xA;        ...&#xA;    &amp;lt;/build&amp;gt;&#xA;    ...&#xA;&amp;lt;/project&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ant Task&lt;/h3&gt; &#xA;&lt;p&gt;For instructions on the use of the Ant Task, please see the &lt;a href=&#34;http://jeremylong.github.io/DependencyCheck/dependency-check-ant&#34;&gt;dependency-check-ant github page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;For installation to pass, you must have the following components installed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Java: &lt;code&gt;java -version&lt;/code&gt; 1.8&lt;/li&gt; &#xA; &lt;li&gt;Maven: &lt;code&gt;mvn -version&lt;/code&gt; 3.5.0 and higher&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Tests cases require:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;dotnet core version 6.0&lt;/li&gt; &#xA; &lt;li&gt;Go: &lt;code&gt;go version&lt;/code&gt; 1.12 and higher&lt;/li&gt; &#xA; &lt;li&gt;Ruby &lt;a href=&#34;https://github.com/rubysec/bundler-audit#install&#34;&gt;bundler-audit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://classic.yarnpkg.com/en/docs/install/&#34;&gt;Yarn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pnpm.io/installation&#34;&gt;pnpm&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development Usage&lt;/h2&gt; &#xA;&lt;p&gt;The following instructions outline how to compile and use the current snapshot. While every intention is to maintain a stable snapshot it is recommended that the release versions listed above be used.&lt;/p&gt; &#xA;&lt;p&gt;The repository has some large files due to test resources. The team has tried to clean up the history as much as possible. However, it is recommended that you perform a shallow clone to save yourself time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --depth 1 https://github.com/jeremylong/DependencyCheck.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On *nix&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mvn -s settings.xml install&#xA;$ ./cli/target/release/bin/dependency-check.sh -h&#xA;$ ./cli/target/release/bin/dependency-check.sh --out . --scan ./src/test/resources&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; mvn -s settings.xml install&#xA;&amp;gt; .\cli\target\release\bin\dependency-check.bat -h&#xA;&amp;gt; .\cli\target\release\bin\dependency-check.bat --out . --scan ./src/test/resources&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then load the resulting &#39;dependency-check-report.html&#39; into your favorite browser.&lt;/p&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;In the following example it is assumed that the source to be checked is in the current working directory and the reports will be written to &lt;code&gt;$(pwd)/odc-reports&lt;/code&gt;. Persistent data and cache directories are used, allowing you to destroy the container after running.&lt;/p&gt; &#xA;&lt;p&gt;For Linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/sh&#xA;&#xA;DC_VERSION=&#34;latest&#34;&#xA;DC_DIRECTORY=$HOME/OWASP-Dependency-Check&#xA;DC_PROJECT=&#34;dependency-check scan: $(pwd)&#34;&#xA;DATA_DIRECTORY=&#34;$DC_DIRECTORY/data&#34;&#xA;CACHE_DIRECTORY=&#34;$DC_DIRECTORY/data/cache&#34;&#xA;&#xA;if [ ! -d &#34;$DATA_DIRECTORY&#34; ]; then&#xA;    echo &#34;Initially creating persistent directory: $DATA_DIRECTORY&#34;&#xA;    mkdir -p &#34;$DATA_DIRECTORY&#34;&#xA;fi&#xA;if [ ! -d &#34;$CACHE_DIRECTORY&#34; ]; then&#xA;    echo &#34;Initially creating persistent directory: $CACHE_DIRECTORY&#34;&#xA;    mkdir -p &#34;$CACHE_DIRECTORY&#34;&#xA;fi&#xA;&#xA;# Make sure we are using the latest version&#xA;docker pull owasp/dependency-check:$DC_VERSION&#xA;&#xA;docker run --rm \&#xA;    -e user=$USER \&#xA;    -u $(id -u ${USER}):$(id -g ${USER}) \&#xA;    --volume $(pwd):/src:z \&#xA;    --volume &#34;$DATA_DIRECTORY&#34;:/usr/share/dependency-check/data:z \&#xA;    --volume $(pwd)/odc-reports:/report:z \&#xA;    owasp/dependency-check:$DC_VERSION \&#xA;    --scan /src \&#xA;    --format &#34;ALL&#34; \&#xA;    --project &#34;$DC_PROJECT&#34; \&#xA;    --out /report&#xA;    # Use suppression like this: (where /src == $pwd)&#xA;    # --suppression &#34;/src/security/dependency-check-suppression.xml&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;@echo off&#xA;&#xA;set DC_VERSION=&#34;latest&#34;&#xA;set DC_DIRECTORY=%USERPROFILE%\OWASP-Dependency-Check&#xA;SET DC_PROJECT=&#34;dependency-check scan: %CD%&#34;&#xA;set DATA_DIRECTORY=&#34;%DC_DIRECTORY%\data&#34;&#xA;set CACHE_DIRECTORY=&#34;%DC_DIRECTORY%\data\cache&#34;&#xA;&#xA;IF NOT EXIST %DATA_DIRECTORY% (&#xA;    echo Initially creating persistent directory: %DATA_DIRECTORY%&#xA;    mkdir %DATA_DIRECTORY%&#xA;)&#xA;IF NOT EXIST %CACHE_DIRECTORY% (&#xA;    echo Initially creating persistent directory: %CACHE_DIRECTORY%&#xA;    mkdir %CACHE_DIRECTORY%&#xA;)&#xA;&#xA;rem Make sure we are using the latest version&#xA;docker pull owasp/dependency-check:%DC_VERSION%&#xA;&#xA;docker run --rm ^&#xA;    --volume %CD%:/src ^&#xA;    --volume %DATA_DIRECTORY%:/usr/share/dependency-check/data ^&#xA;    --volume %CD%/odc-reports:/report ^&#xA;    owasp/dependency-check:%DC_VERSION% ^&#xA;    --scan /src ^&#xA;    --format &#34;ALL&#34; ^&#xA;    --project &#34;%DC_PROJECT%&#34; ^&#xA;    --out /report&#xA;    rem Use suppression like this: (where /src == %CD%)&#xA;    rem --suppression &#34;/src/security/dependency-check-suppression.xml&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building From Source&lt;/h2&gt; &#xA;&lt;p&gt;To build dependency-check (using Java 8) run the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mvn -s settings.xml install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building the documentation&lt;/h2&gt; &#xA;&lt;p&gt;The documentation on the &lt;a href=&#34;http://jeremylong.github.io/DependencyCheck/&#34;&gt;github pages&lt;/a&gt; is generated from this repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mvn -s settings.xml site  site:staging&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once done, point your browser to &lt;code&gt;./target/staging/index.html&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building The Docker Image&lt;/h2&gt; &#xA;&lt;p&gt;To build dependency-check docker image run the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mvn -s settings.xml install&#xA;./build-docker.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Permission to modify and redistribute is granted under the terms of the Apache 2.0 license. See the &lt;a href=&#34;https://raw.githubusercontent.com/jeremylong/DependencyCheck/master/LICENSE.txt&#34;&gt;LICENSE.txt&lt;/a&gt; file for the full license.&lt;/p&gt; &#xA;&lt;p&gt;Dependency-Check makes use of several other open source libraries. Please see the &lt;a href=&#34;https://github.com/jeremylong/DependencyCheck/raw/master/NOTICE.txt&#34;&gt;NOTICE.txt&lt;/a&gt; file for more information.&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2012-2022 Jeremy Long. All Rights Reserved.&lt;/p&gt;</summary>
  </entry>
</feed>