<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-13T01:41:22Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>williamfiset/Algorithms</title>
    <updated>2022-06-13T01:41:22Z</updated>
    <id>tag:github.com,2022-06-13:/williamfiset/Algorithms</id>
    <link href="https://github.com/williamfiset/Algorithms" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A collection of algorithms and data structures&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/williamfiset/Algorithms/workflows/Java%20CI%20with%20Gradle/badge.svg?sanitize=true&#34; alt=&#34;Java CI with Gradle&#34;&gt; &lt;img src=&#34;https://github.com/williamfiset/Algorithms/workflows/README%20URL%20Checker/badge.svg?sanitize=true&#34; alt=&#34;README Checker&#34;&gt; &lt;a href=&#34;https://www.paypal.com/donate?hosted_button_id=JUP2HZ6JUPB5C&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-PayPal-green.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Algorithms &amp;amp; data structures project&lt;/h1&gt; &#xA;&lt;p&gt;Algorithms and data structures are fundamental to efficient code and good software design. Creating and designing excellent algorithms is required for being an exemplary programmer. This repository&#39;s goal is to demonstrate how to correctly implement common data structures and algorithms in the simplest and most elegant ways.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;This repository is contribution friendly &lt;span&gt;😃&lt;/span&gt;. If you&#39;d like to add or improve an algorithm, your contribution is welcome! Please be sure to checkout the &lt;a href=&#34;https://github.com/williamfiset/Algorithms/wiki&#34;&gt;Wiki&lt;/a&gt; for instructions.&lt;/p&gt; &#xA;&lt;h3&gt;Other programming languages?&lt;/h3&gt; &#xA;&lt;p&gt;This repository provides algorithm implementations in Java, however there are other forks that provide implementations in other languages, most notably:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;C++/Python&lt;/strong&gt;: &lt;a href=&#34;https://github.com/akzare/Algorithms&#34;&gt;https://github.com/akzare/Algorithms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Rust&lt;/strong&gt;: &lt;a href=&#34;https://github.com/TianyiShi2001/Algorithms&#34;&gt;https://github.com/TianyiShi2001/Algorithms&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Running an algorithm implementation&lt;/h1&gt; &#xA;&lt;p&gt;To compile and run any of the algorithms here, you need at least JDK version 8. Gradle can make things more convenient for you, but it is not required.&lt;/p&gt; &#xA;&lt;h2&gt;Running with Gradle (recommended)&lt;/h2&gt; &#xA;&lt;p&gt;This project supports the &lt;a href=&#34;https://docs.gradle.org/current/userguide/gradle_wrapper.html&#34;&gt;Gradle Wrapper&lt;/a&gt;. The Gradle wrapper automatically downloads Gradle at the first time it runs, so expect a delay when running the first command below.&lt;/p&gt; &#xA;&lt;p&gt;If you are on Windows, use &lt;code&gt;gradlew.bat&lt;/code&gt; instead of &lt;code&gt;./gradlew&lt;/code&gt; below.&lt;/p&gt; &#xA;&lt;p&gt;Run a single algorithm like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew run -Palgorithm=&amp;lt;algorithm-subpackage&amp;gt;.&amp;lt;algorithm-class&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can run a single algorithm specifying the full class name&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew run -Pmain=&amp;lt;algorithm-fully-qualified-class-name&amp;gt;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew run -Palgorithm=search.BinarySearch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew run -Pmain=com.williamfiset.algorithms.search.BinarySearch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compiling and running with only a JDK&lt;/h2&gt; &#xA;&lt;h3&gt;Create a classes folder&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd Algorithms&#xA;mkdir classes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Compile the algorithm&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;javac -sourcepath src/main/java -d classes src/main/java/ &amp;lt;relative-path-to-java-source-file&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run the algorithm&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;java -cp classes &amp;lt;class-fully-qualified-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ javac -d classes -sourcepath src/main/java src/main/java/com/williamfiset/algorithms/search/BinarySearch.java&#xA;$ java -cp classes com.williamfiset.algorithms.search.BinarySearch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Data Structures&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=q4fnJZr8ztY&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/balancedtree&#34;&gt;Balanced Trees&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/balancedtree/AVLTreeRecursive.java&#34;&gt;AVL Tree (recursive)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/balancedtree/RedBlackTree.java&#34;&gt;Red Black Tree (recursive)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=JfSdGQdAzq8&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/binarysearchtree/BinarySearchTree.java&#34;&gt;Binary Search Tree&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/binarysearchtree/SplayTree.java&#34;&gt;Splay Tree&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=PEnFFiQe1pM&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/dynamicarray&#34;&gt;Dynamic Array&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/dynamicarray/IntArray.java&#34;&gt;Dynamic array (integer only, fast)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/dynamicarray/DynamicArray.java&#34;&gt;Dynamic array (generic)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=RgITNht_f4Q&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/fenwicktree&#34;&gt;Fenwick Tree&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/fenwicktree/FenwickTreeRangeQueryPointUpdate.java&#34;&gt;Fenwick Tree (range query, point updates)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/fenwicktree/FenwickTreeRangeUpdatePointQuery.java&#34;&gt;Fenwick Tree (range update, point query)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/fibonacciheap&#34;&gt;Fibonacci Heap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=2E54GqF0H4s&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/hashtable&#34;&gt;Hashtable&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/hashtable/HashTableDoubleHashing.java&#34;&gt;Hashtable (double hashing)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/hashtable/HashTableLinearProbing.java&#34;&gt;Hashtable (linear probing)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/hashtable/HashTableQuadraticProbing.java&#34;&gt;Hashtable (quadratic probing)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/hashtable/HashTableSeparateChaining.java&#34;&gt;Hashtable (separate chaining)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=-Yn5DU0_-lw&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/linkedlist/DoublyLinkedList.java&#34;&gt;Linked List&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=wptevk0bshY&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/priorityqueue&#34;&gt;Priority Queue&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/priorityqueue/BinaryHeap.java&#34;&gt;Min Binary Heap&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/priorityqueue/MinIndexedBinaryHeap.java&#34;&gt;Min Indexed Binary Heap (sorted key-value pairs, similar to hash-table)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/priorityqueue/MinDHeap.java&#34;&gt;Min D-Heap&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=DT8xZ0Uf8wo&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/priorityqueue/MinIndexedDHeap.java&#34;&gt;Min Indexed D-Heap (sorted key-value pairs, similar to hash-table)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=KxzhEQ-zpDc&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/queue&#34;&gt;Queue&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/queue/IntQueue.java&#34;&gt;Queue (integer only, fixed size, fast)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/queue/Queue.java&#34;&gt;Queue (linked list, generic)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/segmenttree&#34;&gt;Segment Tree&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/CompactSegmentTree.java&#34;&gt;Segment tree (array based, compact)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/Node.java&#34;&gt;Segment tree (pointer implementation)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/uUatD9AudXo&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/sparsetable/SparseTable.java&#34;&gt;Sparse Table&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=L3ud3rXpIxA&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/stack&#34;&gt;Stack&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/stack/IntStack.java&#34;&gt;Stack (integer only, fixed size, fast)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/stack/ListStack.java&#34;&gt;Stack (linked list, generic)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/stack/ArrayStack.java&#34;&gt;Stack (array, generic)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=zqKlL3ZpTqs&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/suffixarray&#34;&gt;Suffix Array&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/suffixarray/SuffixArraySlow.java&#34;&gt;Suffix Array (O(n²logn) construction)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/suffixarray/SuffixArrayMed.java&#34;&gt;Suffix Array (O(nlog²(n)) construction)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/suffixarray/SuffixArrayFast.java&#34;&gt;Suffix Array (O(nlog(n)) construction)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/trie/Trie.java&#34;&gt;Trie&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ibjEGG7ylHk&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/datastructures/unionfind/UnionFind.java&#34;&gt;Union Find&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Dynamic Programming&lt;/h1&gt; &#xA;&lt;h2&gt;Dynamic Programming Classics&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/dp/CoinChange.java&#34;&gt;Coin change problem&lt;/a&gt; &lt;strong&gt;- O(nW)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/dp/EditDistanceIterative.java&#34;&gt;Edit distance (iterative)&lt;/a&gt; &lt;strong&gt;- O(nm)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/dp/EditDistanceRecursive.java&#34;&gt;Edit distance (recursive)&lt;/a&gt; &lt;strong&gt;- O(nm)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=cJ21moQpofY&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/dp/Knapsack_01.java&#34;&gt;Knapsack 0/1&lt;/a&gt; &lt;strong&gt;- O(nW)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/dp/KnapsackUnbounded.java&#34;&gt;Knapsack unbounded (0/∞)&lt;/a&gt; &lt;strong&gt;- O(nW)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/dp/MaximumSubarray.java&#34;&gt;Maximum contiguous subarray&lt;/a&gt; &lt;strong&gt;- O(n)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/dp/LongestCommonSubsequence.java&#34;&gt;Longest Common Subsequence (LCS)&lt;/a&gt; &lt;strong&gt;- O(nm)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/dp/LongestIncreasingSubsequence.java&#34;&gt;Longest Increasing Subsequence (LIS)&lt;/a&gt; &lt;strong&gt;- O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/dp/LongestPalindromeSubsequence.java&#34;&gt;Longest Palindrome Subsequence (LPS)&lt;/a&gt; &lt;strong&gt;- O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=cY4HiiFHO1o&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/TspDynamicProgrammingIterative.java&#34;&gt;Traveling Salesman Problem (dynamic programming, iterative)&lt;/a&gt; &lt;strong&gt;- O(n&lt;sup&gt;2&lt;/sup&gt;2&lt;sup&gt;n&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/TspDynamicProgrammingRecursive.java&#34;&gt;Traveling Salesman Problem (dynamic programming, recursive)&lt;/a&gt; &lt;strong&gt;- O(n&lt;sup&gt;2&lt;/sup&gt;2&lt;sup&gt;n&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/dp/MinimumWeightPerfectMatching.java&#34;&gt;Minimum Weight Perfect Matching (iterative, complete graph)&lt;/a&gt; &lt;strong&gt;- O(n&lt;sup&gt;2&lt;/sup&gt;2&lt;sup&gt;n&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Dynamic Programming Problem Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Adhoc&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=_tur2nPkIKo&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/williamfiset/Algorithms/raw/master/src/main/java/com/williamfiset/algorithms/dp/examples/magicalcows/MagicalCows.java&#34;&gt;Magic Cows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/oQQO_n57SB0&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/williamfiset/Algorithms/raw/master/src/main/java/com/williamfiset/algorithms/dp/examples/narrowartgallery/NarrowArtGalleryRecursive.java&#34;&gt;Narrow Art Gallery&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Tiling problems&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/yn2jnmlepY8&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/williamfiset/Algorithms/raw/master/src/main/java/com/williamfiset/algorithms/dp/examples/tilingdominoes/TilingDominoes.java&#34;&gt;Tiling Dominoes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=CecjOo4Zo-g&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/dp/examples/domino-and-tromino-tiling&#34;&gt;Tiling Dominoes and Trominoes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/pPgBZqY_Xh0&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/williamfiset/Algorithms/raw/master/src/main/java/com/williamfiset/algorithms/dp/examples/scenes/Scenes.java&#34;&gt;Mountain Scenes&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Geometry&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/AngleBetweenVectors2D.java&#34;&gt;Angle between 2D vectors&lt;/a&gt; &lt;strong&gt;- O(1)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/AngleBetweenVectors3D.java&#34;&gt;Angle between 3D vectors&lt;/a&gt; &lt;strong&gt;- O(1)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/CircleCircleIntersectionPoints.js&#34;&gt;Circle-circle intersection point(s)&lt;/a&gt; &lt;strong&gt;- O(1)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/LineCircleIntersection.js&#34;&gt;Circle-line intersection point(s)&lt;/a&gt; &lt;strong&gt;- O(1)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/LineSegmentCircleIntersection.js&#34;&gt;Circle-line segment intersection point(s)&lt;/a&gt; &lt;strong&gt;- O(1)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/PointCircleTangent.java&#34;&gt;Circle-point tangent line(s)&lt;/a&gt; &lt;strong&gt;- O(1)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/ClosestPairOfPoints.java&#34;&gt;Closest pair of points (line sweeping algorithm)&lt;/a&gt; &lt;strong&gt;- O(nlog(n))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/CollinearPoints.java&#34;&gt;Collinear points test (are three 2D points on the same line)&lt;/a&gt; &lt;strong&gt;- O(1)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/ConvexHullGrahamScan.java&#34;&gt;Convex hull (Graham Scan algorithm)&lt;/a&gt; &lt;strong&gt;- O(nlog(n))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/ConvexHullMonotoneChainsAlgorithm.java&#34;&gt;Convex hull (Monotone chain algorithm)&lt;/a&gt; &lt;strong&gt;- O(nlog(n))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/ConvexPolygonArea.java&#34;&gt;Convex polygon area&lt;/a&gt; &lt;strong&gt;- O(n)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/ConvexPolygonCutWithLineSegment.java&#34;&gt;Convex polygon cut&lt;/a&gt; &lt;strong&gt;- O(n)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/ConvexPolygonContainsPoint.java&#34;&gt;Convex polygon contains points&lt;/a&gt; &lt;strong&gt;- O(log(n))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/CoplanarPoints.java&#34;&gt;Coplanar points test (are four 3D points on the same plane)&lt;/a&gt; &lt;strong&gt;- O(1)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/Line.java&#34;&gt;Line class (handy infinite line class)&lt;/a&gt; &lt;strong&gt;- O(1)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/LineCircleIntersection.js&#34;&gt;Line-circle intersection point(s)&lt;/a&gt; &lt;strong&gt;- O(1)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/LineSegmentCircleIntersection.js&#34;&gt;Line segment-circle intersection point(s)&lt;/a&gt; &lt;strong&gt;- O(1)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/LineSegmentToGeneralForm.java&#34;&gt;Line segment to general form (ax + by = c)&lt;/a&gt; &lt;strong&gt;- O(1)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/LineSegmentLineSegmentIntersection.java&#34;&gt;Line segment-line segment intersection&lt;/a&gt; &lt;strong&gt;- O(1)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/LongitudeLatitudeGeographicDistance.java&#34;&gt;Longitude-Latitude geographic distance&lt;/a&gt; &lt;strong&gt;- O(1)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/PointInsideTriangle.java&#34;&gt;Point is inside triangle check&lt;/a&gt; &lt;strong&gt;- O(1)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/PointRotation.java&#34;&gt;Point rotation about point&lt;/a&gt; &lt;strong&gt;- O(1)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/TriangleArea.java&#34;&gt;Triangle area algorithms&lt;/a&gt; &lt;strong&gt;- O(1)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/CircleCircleIntersectionArea.java&#34;&gt;[UNTESTED] Circle-circle intersection area&lt;/a&gt; &lt;strong&gt;- O(1)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/geometry/CircularSegmentArea.java&#34;&gt;[UNTESTED] Circular segment area&lt;/a&gt; &lt;strong&gt;- O(1)&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Graph theory&lt;/h1&gt; &#xA;&lt;h3&gt;Tree algorithms&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=2FFq2_je7Lg&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/treealgorithms/RootingTree.java&#34;&gt;Rooting an undirected tree&lt;/a&gt; &lt;strong&gt;- O(V+E)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=OCKvEMF0Xac&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/treealgorithms/TreeIsomorphism.java&#34;&gt;Identifying isomorphic trees&lt;/a&gt; &lt;strong&gt;- O(?)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=nzF_9bjDzdc&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/treealgorithms/TreeCenter.java&#34;&gt;Tree center(s)&lt;/a&gt; &lt;strong&gt;- O(V+E)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/treealgorithms/TreeDiameter.java&#34;&gt;Tree diameter&lt;/a&gt; &lt;strong&gt;- O(V+E)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=sD1IoalFomA&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/treealgorithms/LowestCommonAncestorEulerTour.java&#34;&gt;Lowest Common Ancestor (LCA, Euler tour)&lt;/a&gt; &lt;strong&gt;- O(1) queries, O(nlogn) preprocessing&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Network flow&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/networkflow/BipartiteGraphCheckAdjacencyList.java&#34;&gt;Bipartite graph verification (adjacency list)&lt;/a&gt; &lt;strong&gt;- O(V+E)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=LdOnanfc5TM&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/networkflow/FordFulkersonDfsSolverAdjacencyList.java&#34;&gt;Max flow &amp;amp; Min cut (Ford-Fulkerson with DFS, adjacency list)&lt;/a&gt; &lt;strong&gt;- O(fE)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/networkflow/FordFulkersonDFSAdjacencyMatrix.java&#34;&gt;Max flow &amp;amp; Min cut (Ford-Fulkerson with DFS, adjacency matrix)&lt;/a&gt; &lt;strong&gt;- O(fV&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=RppuJYwlcI8&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/networkflow/EdmondsKarpAdjacencyList.java&#34;&gt;Max flow &amp;amp; Min cut (Edmonds-Karp, adjacency list)&lt;/a&gt; &lt;strong&gt;- O(VE&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/1ewLrXUz4kk&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/networkflow/CapacityScalingSolverAdjacencyList.java&#34;&gt;Max flow &amp;amp; Min cut (Capacity scaling, adjacency list)&lt;/a&gt; &lt;strong&gt;- O(E&lt;sup&gt;2&lt;/sup&gt;log&lt;sub&gt;2&lt;/sub&gt;(U))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/M6cm8UeeziI&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/networkflow/Dinics.java&#34;&gt;Max flow &amp;amp; Min cut (Dinic&#39;s, adjacency list)&lt;/a&gt; &lt;strong&gt;- O(EV&lt;sup&gt;2&lt;/sup&gt;) or O(E√V) for bipartite graphs&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/networkflow/MaximumCardinalityBipartiteMatchingAugmentingPathAdjacencyList.java&#34;&gt;Maximum Cardinality Bipartite Matching (augmenting path algorithm, adjacency list)&lt;/a&gt; &lt;strong&gt;- O(VE)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/networkflow/MinCostMaxFlowWithBellmanFord.java&#34;&gt;Min Cost Max Flow (Bellman-Ford, adjacency list)&lt;/a&gt; &lt;strong&gt;- O(E&lt;sup&gt;2&lt;/sup&gt;V&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/networkflow/MinCostMaxFlowJohnsons.java&#34;&gt;Min Cost Max Flow (Johnson&#39;s algorithm, adjacency list)&lt;/a&gt; &lt;strong&gt;- O(E&lt;sup&gt;2&lt;/sup&gt;Vlog(V))&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Main graph theory algorithms&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/ArticulationPointsAdjacencyList.java&#34;&gt;Articulation points/cut vertices (adjacency list)&lt;/a&gt; &lt;strong&gt;- O(V+E)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/BellmanFordEdgeList.java&#34;&gt;Bellman-Ford (edge list, negative cycles, fast &amp;amp; optimized)&lt;/a&gt; &lt;strong&gt;- O(VE)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=lyw4FaxrwHg&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/BellmanFordAdjacencyList.java&#34;&gt;Bellman-Ford (adjacency list, negative cycles)&lt;/a&gt; &lt;strong&gt;- O(VE)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/BellmanFordAdjacencyMatrix.java&#34;&gt;Bellman-Ford (adjacency matrix, negative cycles)&lt;/a&gt; &lt;strong&gt;- O(V&lt;sup&gt;3&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=oDqjPvD54Ss&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/BreadthFirstSearchAdjacencyListIterative.java&#34;&gt;Breadth first search (adjacency list)&lt;/a&gt; &lt;strong&gt;- O(V+E)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/BreadthFirstSearchAdjacencyListIterativeFastQueue.java&#34;&gt;Breadth first search (adjacency list, fast queue)&lt;/a&gt; &lt;strong&gt;- O(V+E)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/BridgesAdjacencyList.java&#34;&gt;Bridges/cut edges (adjacency list)&lt;/a&gt; &lt;strong&gt;- O(V+E)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/ConnectedComponentsAdjacencyList.java&#34;&gt;Find connected components (adjacency list, union find)&lt;/a&gt; &lt;strong&gt;- O(Elog(E))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/ConnectedComponentsDfsSolverAdjacencyList.java&#34;&gt;Find connected components (adjacency list, DFS)&lt;/a&gt; &lt;strong&gt;- O(V+E)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/DepthFirstSearchAdjacencyListIterative.java&#34;&gt;Depth first search (adjacency list, iterative)&lt;/a&gt; &lt;strong&gt;- O(V+E)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/DepthFirstSearchAdjacencyListIterativeFastStack.java&#34;&gt;Depth first search (adjacency list, iterative, fast stack)&lt;/a&gt; &lt;strong&gt;- O(V+E)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=7fujbpJ0LB4&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/DepthFirstSearchAdjacencyListRecursive.java&#34;&gt;Depth first search (adjacency list, recursive)&lt;/a&gt; &lt;strong&gt;- O(V+E)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=pSqmAO-m7Lk&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/DijkstrasShortestPathAdjacencyList.java&#34;&gt;Dijkstra&#39;s shortest path (adjacency list, lazy implementation)&lt;/a&gt; &lt;strong&gt;- O(Elog(V))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=pSqmAO-m7Lk&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/DijkstrasShortestPathAdjacencyListWithDHeap.java&#34;&gt;Dijkstra&#39;s shortest path (adjacency list, eager implementation + D-ary heap)&lt;/a&gt; &lt;strong&gt;- O(Elog&lt;sub&gt;E/V&lt;/sub&gt;(V))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=8MpoO2zA2l4&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/EulerianPathDirectedEdgesAdjacencyList.java&#34;&gt;Eulerian Path (directed edges)&lt;/a&gt; &lt;strong&gt;- O(E+V)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=4NQ3HnhyNfQ&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/FloydWarshallSolver.java&#34;&gt;Floyd Warshall algorithm (adjacency matrix, negative cycle check)&lt;/a&gt; &lt;strong&gt;- O(V&lt;sup&gt;3&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/GraphDiameter.java&#34;&gt;Graph diameter (adjacency list)&lt;/a&gt; &lt;strong&gt;- O(VE)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=cIBFEhD77b4&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/Kahns.java&#34;&gt;Kahn&#39;s algorithm (topological sort, adjacency list)&lt;/a&gt; &lt;strong&gt;- O(E+V)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/KruskalsEdgeList.java&#34;&gt;Kruskal&#39;s min spanning tree algorithm (edge list, union find)&lt;/a&gt; &lt;strong&gt;- O(Elog(E))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=JZBQLXgSGfs&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/KruskalsEdgeListPartialSortSolver.java&#34;&gt;Kruskal&#39;s min spanning tree algorithm (edge list, union find, lazy sorting)&lt;/a&gt; &lt;strong&gt;- O(Elog(E))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/Kosaraju.java&#34;&gt;Kosaraju&#39;s strongly connected components algorithm (adjacency list)&lt;/a&gt; &lt;strong&gt;- O(V+E)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=jsmMtJpPnhU&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/LazyPrimsAdjacencyList.java&#34;&gt;Prim&#39;s min spanning tree algorithm (lazy version, adjacency list)&lt;/a&gt; &lt;strong&gt;- O(Elog(E))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/LazyPrimsAdjacencyMatrix.java&#34;&gt;Prim&#39;s min spanning tree algorithm (lazy version, adjacency matrix)&lt;/a&gt; &lt;strong&gt;- O(V&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=xq3ABa-px_g&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/EagerPrimsAdjacencyList.java&#34;&gt;Prim&#39;s min spanning tree algorithm (eager version, adjacency list)&lt;/a&gt; &lt;strong&gt;- O(Elog(V))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/SteinerTree.java&#34;&gt;Steiner tree (minimum spanning tree generalization)&lt;/a&gt; &lt;strong&gt;- O(V&lt;sup&gt;3&lt;/sup&gt; + V&lt;sup&gt;2&lt;/sup&gt; _ 2&lt;sup&gt;T&lt;/sup&gt; + V _ 3&lt;sup&gt;T&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=wUgWX0nc4NY&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/TarjanSccSolverAdjacencyList.java&#34;&gt;Tarjan&#39;s strongly connected components algorithm (adjacency list)&lt;/a&gt; &lt;strong&gt;- O(V+E)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=eL-KzMXSXXI&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/TopologicalSortAdjacencyList.java&#34;&gt;Topological sort (acyclic graph, adjacency list)&lt;/a&gt; &lt;strong&gt;- O(V+E)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/TopologicalSortAdjacencyMatrix.java&#34;&gt;Topological sort (acyclic graph, adjacency matrix)&lt;/a&gt; &lt;strong&gt;- O(V&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/TspBruteForce.java&#34;&gt;Traveling Salesman Problem (brute force)&lt;/a&gt; &lt;strong&gt;- O(n!)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=cY4HiiFHO1o&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/TspDynamicProgrammingIterative.java&#34;&gt;Traveling Salesman Problem (dynamic programming, iterative)&lt;/a&gt; &lt;strong&gt;- O(n&lt;sup&gt;2&lt;/sup&gt;2&lt;sup&gt;n&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/graphtheory/TspDynamicProgrammingRecursive.java&#34;&gt;Traveling Salesman Problem (dynamic programming, recursive)&lt;/a&gt; &lt;strong&gt;- O(n&lt;sup&gt;2&lt;/sup&gt;2&lt;sup&gt;n&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Linear algebra&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/linearalgebra/FreivaldsAlgorithm.java&#34;&gt;Freivald&#39;s algorithm (matrix multiplication verification)&lt;/a&gt; &lt;strong&gt;- O(kn&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/linearalgebra/GaussianElimination.java&#34;&gt;Gaussian elimination (solve system of linear equations)&lt;/a&gt; &lt;strong&gt;- O(cr&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/linearalgebra/ModularLinearAlgebra.java&#34;&gt;Gaussian elimination (modular version, prime finite field)&lt;/a&gt; &lt;strong&gt;- O(cr&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/linearalgebra/LinearRecurrenceSolver.java&#34;&gt;Linear recurrence solver (finds nth term in a recurrence relation)&lt;/a&gt; &lt;strong&gt;- O(m&lt;sup&gt;3&lt;/sup&gt;log(n))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/linearalgebra/MatrixDeterminantLaplaceExpansion.java&#34;&gt;Matrix determinant (Laplace/cofactor expansion)&lt;/a&gt; &lt;strong&gt;- O((n+2)!)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/linearalgebra/MatrixInverse.java&#34;&gt;Matrix inverse&lt;/a&gt; &lt;strong&gt;- O(n&lt;sup&gt;3&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/linearalgebra/MatrixMultiplication.java&#34;&gt;Matrix multiplication&lt;/a&gt; &lt;strong&gt;- O(n&lt;sup&gt;3&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/linearalgebra/MatrixPower.java&#34;&gt;Matrix power&lt;/a&gt; &lt;strong&gt;- O(n&lt;sup&gt;3&lt;/sup&gt;log(p))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/linearalgebra/RotateSquareMatrixInplace.java&#34;&gt;Square matrix rotation&lt;/a&gt; &lt;strong&gt;- O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Mathematics&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/math/ChineseRemainderTheorem.java&#34;&gt;[UNTESTED] Chinese remainder theorem&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/math/SieveOfEratosthenes.java&#34;&gt;Prime number sieve (sieve of Eratosthenes)&lt;/a&gt; &lt;strong&gt;- O(nlog(log(n)))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/math/CompressedPrimeSieve.java&#34;&gt;Prime number sieve (sieve of Eratosthenes, compressed)&lt;/a&gt; &lt;strong&gt;- O(nlog(log(n)))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/math/EulerTotientFunction.java&#34;&gt;Totient function (phi function, relatively prime number count)&lt;/a&gt; &lt;strong&gt;- O(n&lt;sup&gt;1/4&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/math/EulerTotientFunctionWithSieve.java&#34;&gt;Totient function using sieve (phi function, relatively prime number count)&lt;/a&gt; &lt;strong&gt;- O(nlog(log(n)))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/math/ExtendedEuclideanAlgorithm.java&#34;&gt;Extended euclidean algorithm&lt;/a&gt; &lt;strong&gt;- ~O(log(a + b))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/math/GCD.java&#34;&gt;Greatest Common Divisor (GCD)&lt;/a&gt; &lt;strong&gt;- ~O(log(a + b))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/math/FastFourierTransform.java&#34;&gt;Fast Fourier transform (quick polynomial multiplication)&lt;/a&gt; &lt;strong&gt;- O(nlog(n))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/math/FastFourierTransformComplexNumbers.java&#34;&gt;Fast Fourier transform (quick polynomial multiplication, complex numbers)&lt;/a&gt; &lt;strong&gt;- O(nlog(n))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/math/IsPrime.java&#34;&gt;Primality check&lt;/a&gt; &lt;strong&gt;- O(√n)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/math/RabinMillerPrimalityTest.py&#34;&gt;Primality check (Rabin-Miller)&lt;/a&gt; &lt;strong&gt;- O(k)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/math/LCM.java&#34;&gt;Least Common Multiple (LCM)&lt;/a&gt; &lt;strong&gt;- ~O(log(a + b))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/math/ModularInverse.java&#34;&gt;Modular inverse&lt;/a&gt; &lt;strong&gt;- ~O(log(a + b))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/math/PrimeFactorization.java&#34;&gt;Prime factorization (pollard rho)&lt;/a&gt; &lt;strong&gt;- O(n&lt;sup&gt;1/4&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/math/RelativelyPrime.java&#34;&gt;Relatively prime check (coprimality check)&lt;/a&gt; &lt;strong&gt;- ~O(log(a + b))&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Other&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/other/BitManipulations.java&#34;&gt;Bit manipulations&lt;/a&gt; &lt;strong&gt;- O(1)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/other/Permutations.java&#34;&gt;List permutations&lt;/a&gt; &lt;strong&gt;- O(n!)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=RnlHPR0lyOE&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/other/PowerSet.java&#34;&gt;Power set (set of all subsets)&lt;/a&gt; &lt;strong&gt;- O(2&lt;sup&gt;n&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/other/Combinations.java&#34;&gt;Set combinations&lt;/a&gt; &lt;strong&gt;- O(n choose r)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/other/CombinationsWithRepetition.java&#34;&gt;Set combinations with repetition&lt;/a&gt; &lt;strong&gt;- O((n+r-1) choose r)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/other/SlidingWindowMaximum.java&#34;&gt;Sliding Window Minimum/Maximum&lt;/a&gt; &lt;strong&gt;- O(1)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/other/SquareRootDecomposition.java&#34;&gt;Square Root Decomposition&lt;/a&gt; &lt;strong&gt;- O(1) point updates, O(√n) range queries&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/other/UniqueCombinations.java&#34;&gt;Unique set combinations&lt;/a&gt; &lt;strong&gt;- O(n choose r)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/other/LazyRangeAdder.java&#34;&gt;Lazy Range Adder&lt;/a&gt; &lt;strong&gt;- O(1) range updates, O(n) to finalize all updates&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Search algorithms&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/search/BinarySearch.java&#34;&gt;Binary search (real numbers)&lt;/a&gt; &lt;strong&gt;- O(log(n))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/search/InterpolationSearch.java&#34;&gt;Interpolation search (discrete discrete)&lt;/a&gt; &lt;strong&gt;- O(n) or O(log(log(n))) with uniform input&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/search/TernarySearch.java&#34;&gt;Ternary search (real numbers)&lt;/a&gt; &lt;strong&gt;- O(log(n))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/search/TernarySearchDiscrete.java&#34;&gt;Ternary search (discrete numbers)&lt;/a&gt; &lt;strong&gt;- O(log(n))&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Sorting algorithms&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/sorting/BubbleSort.java&#34;&gt;Bubble sort&lt;/a&gt; &lt;strong&gt;- O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/sorting/BucketSort.java&#34;&gt;Bucket sort&lt;/a&gt; &lt;strong&gt;- Θ(n + k)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/sorting/CountingSort.java&#34;&gt;Counting sort&lt;/a&gt; &lt;strong&gt;- O(n + k)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/sorting/Heapsort.java&#34;&gt;Heapsort&lt;/a&gt; &lt;strong&gt;- O(nlog(n))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/sorting/InsertionSort.java&#34;&gt;Insertion sort&lt;/a&gt; &lt;strong&gt;- O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/sorting/MergeSort.java&#34;&gt;Mergesort&lt;/a&gt; &lt;strong&gt;- O(nlog(n))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/sorting/QuickSort.java&#34;&gt;Quicksort (in-place, Hoare partitioning)&lt;/a&gt; &lt;strong&gt;- Θ(nlog(n))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/sorting/QuickSort3.java&#34;&gt;Quicksort3 (Dutch National Flag algorithm)&lt;/a&gt; &lt;strong&gt;- Θ(nlog(n))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/sorting/SelectionSort.java&#34;&gt;Selection sort&lt;/a&gt; &lt;strong&gt;- O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/sorting/RadixSort.java&#34;&gt;Radix sort&lt;/a&gt; &lt;strong&gt;- O(n*w)&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;String algorithms&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/strings/BoothsAlgorithm.java&#34;&gt;Booth&#39;s algorithm (finds lexicographically smallest string rotation)&lt;/a&gt; &lt;strong&gt;- O(n)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/strings/KMP.java&#34;&gt;Knuth-Morris-Pratt algorithm (finds pattern matches in text)&lt;/a&gt; &lt;strong&gt;- O(n+m)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/strings/LongestCommonPrefixArray.java&#34;&gt;Longest Common Prefix (LCP) array&lt;/a&gt; &lt;strong&gt;- O(nlog(n)) bounded by SA construction, otherwise O(n)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Ic80xQFWevc&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/strings/LongestCommonSubstring.java&#34;&gt;Longest Common Substring (LCS)&lt;/a&gt; &lt;strong&gt;- O(nlog(n)) bounded by SA construction, otherwise O(n)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=OptoHwC3D-Y&#34;&gt;&lt;span&gt;🎥&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/strings/LongestRepeatedSubstring.java&#34;&gt;Longest Repeated Substring (LRS)&lt;/a&gt; &lt;strong&gt;- O(nlog(n))&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/strings/ManachersAlgorithm.java&#34;&gt;Manacher&#39;s algorithm (finds all palindromes in text)&lt;/a&gt; &lt;strong&gt;- O(n)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/strings/RabinKarp.java&#34;&gt;Rabin-Karp algorithm (finds pattern match positions in text)&lt;/a&gt; &lt;strong&gt;- O(n+m)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamfiset/Algorithms/master/src/main/java/com/williamfiset/algorithms/strings/SubstringVerificationSuffixArray.java&#34;&gt;Substring verification with suffix array&lt;/a&gt; &lt;strong&gt;- O(nlog(n)) SA construction and O(mlog(n)) per query&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;This repository is released under the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT license&lt;/a&gt;. In short, this means you are free to use this software in any personal, open-source or commercial projects. Attribution is optional but appreciated.&lt;/p&gt; &#xA;&lt;h1&gt;Donate&lt;/h1&gt; &#xA;&lt;p&gt;Consider donating to support my creation of educational content:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.paypal.com/donate?hosted_button_id=JUP2HZ6JUPB5C&#34;&gt;&lt;img src=&#34;https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif&#34; alt=&#34;paypal&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Twi1ight/CSAgent</title>
    <updated>2022-06-13T01:41:22Z</updated>
    <id>tag:github.com,2022-06-13:/Twi1ight/CSAgent</id>
    <link href="https://github.com/Twi1ight/CSAgent" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CobaltStrike 4.x通用白嫖及汉化加载器&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CSAgent&lt;/h1&gt; &#xA;&lt;p&gt;CobaltStrike 4.x通用白嫖及汉化加载器&lt;/p&gt; &#xA;&lt;p&gt;采用javaagent+javassist的方式动态修改jar包，可直接加载原版cobaltstrike.jar，理论上支持到目前为止的所有4.x版本&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt;：汉化原理部分代码白嫖于外面公开的汉化版本，非我原创&lt;/p&gt; &#xA;&lt;p&gt;这可能是迄今为止最全面、最详细、最牛逼的汉化版本，主要体现在：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;汉化内容更详细，非机翻，所有文字是我一句句人工翻译的，不只简单的汉化了菜单，各类错误、说明信息都有汉化，尤其是用正则表达式覆盖了各类动态生成的错误信息&lt;/li&gt; &#xA; &lt;li&gt;汉化范围更全面，之前的各类汉化版都是没有完全汉化按钮的，因为这里涉及到java的一个坑，汉化后可能导致按钮功能失效，本版本对所有按钮全覆盖； 另外，针对Beacon终端交互内的命令及命令帮助也都有详尽的汉化说明，部分命令还加上了我个人的说明见解&lt;/li&gt; &#xA; &lt;li&gt;汉化方式更先进，并非纯粹的正则替换，针对菜单、命令、命令帮助说明的汉化利用了Cobalt Strike加载资源文件的特性，直接翻译资源文件即可，无需再做动态替换，性能更高，后续版本更新也更方便 针对界面的各类说明、标签汉化，全部写入配置文件中，后续版本只需修改这部分配置即可，无需再修改java代码&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;使用方法&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;下载CSAgent.zip解压，将原版cobaltstrike.jar放到解压目录中，确保CSAgent.jar、resources文件夹、scripts文件夹和cobaltstrike.jar处于同级目录&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Twi1ight/CSAgent/github/images/8tree.jpg?raw=true&#34; alt=&#34;文件目录结构&#34; title=&#34;文件目录结构&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;替换cobaltstrike、teamserver、agscript、c2lint、cobaltstrike.bat文件中的解密key，目前内置的key为4.4版本&lt;/p&gt; &lt;p&gt;各个版本的官方解密key：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;4.0 1be5be52c6255c33558e8a1cb667cb06&#xA;4.1 80e32a742060b884419ba0c171c9aa76&#xA;4.2 b20d487addd4713418f2d5a3ae02a7a0&#xA;4.3 3a4425490f389aeec312bdd758ad2b99&#xA;4.4 5e98194a01c6b48fa582a6a9fcbb92d6&#xA;4.5 f38eb3d1a335b252b58bc2acde81b542&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;正常使用teamserver和cobaltstrike脚本启动即可，用法与以前无任何差别，windows使用cobaltstrike.bat启动&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;对于仅想使用破解功能的朋友，只需删除resources文件夹和scripts文件夹即可去除汉化&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;效果&lt;/h2&gt; &#xA;&lt;p&gt;主界面&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Twi1ight/CSAgent/github/images/1%E4%B8%BB%E7%95%8C%E9%9D%A2.jpg?raw=true&#34; alt=&#34;主界面&#34; title=&#34;主界面&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Console&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Twi1ight/CSAgent/github/images/2%E5%91%BD%E4%BB%A4.jpg?raw=true&#34; alt=&#34;命令&#34; title=&#34;命令&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;命令帮助&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Twi1ight/CSAgent/github/images/3%E5%91%BD%E4%BB%A4%E5%B8%AE%E5%8A%A9.jpg?raw=true&#34; alt=&#34;命令帮助&#34; title=&#34;命令帮助&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;生成payload&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Twi1ight/CSAgent/github/images/4payload%E7%94%9F%E6%88%90.jpg?raw=true&#34; alt=&#34;payload生成&#34; title=&#34;payload生成&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;监听器&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Twi1ight/CSAgent/github/images/5%E7%9B%91%E5%90%AC%E5%99%A8.jpg?raw=true&#34; alt=&#34;监听器&#34; title=&#34;监听器&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;偏好设置&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Twi1ight/CSAgent/github/images/6%E5%81%8F%E5%A5%BD%E8%AE%BE%E7%BD%AE.jpg?raw=true&#34; alt=&#34;偏好设置&#34; title=&#34;偏好设置&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;版本信息&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Twi1ight/CSAgent/github/images/7%E7%89%88%E6%9C%AC.jpg?raw=true&#34; alt=&#34;版本&#34; title=&#34;版本&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>EngineHub/WorldEdit</title>
    <updated>2022-06-13T01:41:22Z</updated>
    <id>tag:github.com,2022-06-13:/EngineHub/WorldEdit</id>
    <link href="https://github.com/EngineHub/WorldEdit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🗺️ Minecraft map editor and mod&lt;/p&gt;&lt;hr&gt;&lt;h1&gt; &lt;img src=&#34;https://raw.githubusercontent.com/EngineHub/WorldEdit/master/worldedit-logo.svg?sanitize=true&#34; alt=&#34;WorldEdit&#34; width=&#34;400&#34;&gt; &lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;A Minecraft Map Editor... that runs in-game!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;With selections, schematics, copy and paste, brushes, and scripting!&lt;/li&gt; &#xA; &lt;li&gt;Use it in creative, survival in single player or on your server.&lt;/li&gt; &#xA; &lt;li&gt;Use it on your Minecraft server to fix grieving and mistakes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Java Edition required. WorldEdit is compatible with Forge, Fabric, Bukkit, Spigot, Paper, and Sponge.&lt;/p&gt; &#xA;&lt;h2&gt;Download WorldEdit&lt;/h2&gt; &#xA;&lt;p&gt;This place contains the Java code for WorldEdit, but if you want to just use WorldEdit, get the mod or plugin from these pages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For the mod: &lt;a href=&#34;https://www.curseforge.com/minecraft/mc-mods/worldedit&#34;&gt;https://www.curseforge.com/minecraft/mc-mods/worldedit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For the server plugin: &lt;a href=&#34;https://dev.bukkit.org/projects/worldedit&#34;&gt;https://dev.bukkit.org/projects/worldedit&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Edit the Code&lt;/h2&gt; &#xA;&lt;p&gt;Want to add new features to WorldEdit or fix bugs yourself? You can get the game running, with WorldEdit, from the code here, without any additional outside steps, by doing the following &lt;em&gt;four&lt;/em&gt; things:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download WorldEdit&#39;s source code and put it somewhere. We recommend you use something called Git if you already know how to use it, but &lt;a href=&#34;https://github.com/EngineHub/WorldEdit/archive/master.zip&#34;&gt;you can also just download a .zip file&lt;/a&gt;. (If you plan on contributing the changes, you will need to figure out Git.)&lt;/li&gt; &#xA; &lt;li&gt;Install any version of Java greater than or equal to 16. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Note that if you do &lt;em&gt;not&lt;/em&gt; install JDK 16 exactly, Gradle will download it for you on first run. However, it is still required to have some form of Java installed for Gradle to start at all.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Open terminal / command prompt / bash and navigate to the directory where you put the source code.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;strong&gt;one&lt;/strong&gt; of these following commands: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Mac OS X / Linux: &lt;code&gt;./gradlew :worldedit-fabric:runClient&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Windows - Command Prompt: &lt;code&gt;gradlew :worldedit-fabric:runClient&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Windows - PowerShell: &lt;code&gt;.\gradlew :worldedit-fabric:runClient&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;🎉 That&#39;s it. 🎉 It takes a long time to actually transform WorldEdit into a mod. If it succeeds, &lt;strong&gt;the Minecraft game will open and you can create a single player world with WorldEdit&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you make changes to the code, you have to restart the game by re-running the command for your changes to take effect. If there are errors in your Java syntax, the command will fail.&lt;/p&gt; &#xA;&lt;p&gt;For additional information about compiling WorldEdit, see &lt;a href=&#34;https://raw.githubusercontent.com/EngineHub/WorldEdit/master/COMPILING.md&#34;&gt;COMPILING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using a Java IDE&lt;/h3&gt; &#xA;&lt;p&gt;To edit WorldEdit in a Java IDE, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download and install &lt;a href=&#34;https://www.jetbrains.com/idea/download/&#34;&gt;IntelliJ IDEA Community Edition&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;In the IDE, open the folder that you saved WorldEdit&#39;s code in. This creates a new project in IDEA.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;That&#39;s pretty much it.&lt;/p&gt; &#xA;&lt;p&gt;If you want to be able to run the game also, follow these instructions:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to Run -&amp;gt; Edit Configurations.&lt;/li&gt; &#xA; &lt;li&gt;Add a Gradle task: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Choose &lt;code&gt;worldedit-fabric&lt;/code&gt; for the project.&lt;/li&gt; &#xA;   &lt;li&gt;For the tasks, type in &lt;code&gt;runClient&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Click OK&lt;/li&gt; &#xA; &lt;li&gt;Under the Run menu again, go to &#34;Debug [your new task]&#34;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Speeding up the Edit-Test-Edit-Test Cycle&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s a little annoying have to restart the game to test your changes. The best way to reduce the time is to run the server instead (using &lt;code&gt;runServer&lt;/code&gt; instead of &lt;code&gt;runClient&lt;/code&gt;) and then reconnect to the server after restarting it.&lt;/p&gt; &#xA;&lt;h2&gt;Submitting Your Changes&lt;/h2&gt; &#xA;&lt;p&gt;WorldEdit is open source (specifically licensed under GPL v3), so note that your contributions will also be open source. The best way to submit a change is to create a fork on GitHub, put your changes there, and then create a &#34;pull request&#34; on our WorldEdit repository.&lt;/p&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://raw.githubusercontent.com/EngineHub/WorldEdit/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for important guidelines to follow.&lt;/p&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://enginehub.org/&#34;&gt;Visit our website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/enginehub&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/EngineHub/WorldEdit/issues&#34;&gt;Issue tracker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://builds.enginehub.org&#34;&gt;Continuous integration&lt;/a&gt; &lt;a href=&#34;https://ci.enginehub.org/viewType.html?buildTypeId=bt10&amp;amp;guest=1&#34;&gt;&lt;img src=&#34;https://ci.enginehub.org/app/rest/builds/buildType:bt10,branch:master/statusIcon.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://worldedit.enginehub.org/en/latest/&#34;&gt;End-user documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>