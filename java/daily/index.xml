<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-24T01:32:37Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>LaurieWired/GhidraMCP</title>
    <updated>2025-07-24T01:32:37Z</updated>
    <id>tag:github.com,2025-07-24:/LaurieWired/GhidraMCP</id>
    <link href="https://github.com/LaurieWired/GhidraMCP" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MCP Server for Ghidra&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/LaurieWired/GhidraMCP/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/LaurieWired/GhidraMCP&#34; alt=&#34;GitHub release (latest by date)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/LaurieWired/GhidraMCP/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/LaurieWired/GhidraMCP&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/LaurieWired/GhidraMCP/network/members&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/LaurieWired/GhidraMCP&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/LaurieWired/GhidraMCP/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/LaurieWired/GhidraMCP&#34; alt=&#34;GitHub contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/lauriewired&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/lauriewired?style=social&#34; alt=&#34;Follow @lauriewired&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/4986d702-be3f-4697-acce-aea55cd79ad3&#34; alt=&#34;ghidra_MCP_logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;ghidraMCP&lt;/h1&gt; &#xA;&lt;p&gt;ghidraMCP is an Model Context Protocol server for allowing LLMs to autonomously reverse engineer applications. It exposes numerous tools from core Ghidra functionality to MCP clients.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/36080514-f227-44bd-af84-78e29ee1d7f9&#34;&gt;https://github.com/user-attachments/assets/36080514-f227-44bd-af84-78e29ee1d7f9&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;p&gt;MCP Server + Ghidra Plugin&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Decompile and analyze binaries in Ghidra&lt;/li&gt; &#xA; &lt;li&gt;Automatically rename methods and data&lt;/li&gt; &#xA; &lt;li&gt;List methods, classes, imports, and exports&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://ghidra-sre.org&#34;&gt;Ghidra&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Python3&lt;/li&gt; &#xA; &lt;li&gt;MCP &lt;a href=&#34;https://github.com/modelcontextprotocol/python-sdk&#34;&gt;SDK&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Ghidra&lt;/h2&gt; &#xA;&lt;p&gt;First, download the latest &lt;a href=&#34;https://github.com/LaurieWired/GhidraMCP/releases&#34;&gt;release&lt;/a&gt; from this repository. This contains the Ghidra plugin and Python MCP client. Then, you can directly import the plugin into Ghidra.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run Ghidra&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;code&gt;File&lt;/code&gt; -&amp;gt; &lt;code&gt;Install Extensions&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Click the &lt;code&gt;+&lt;/code&gt; button&lt;/li&gt; &#xA; &lt;li&gt;Select the &lt;code&gt;GhidraMCP-1-2.zip&lt;/code&gt; (or your chosen version) from the downloaded release&lt;/li&gt; &#xA; &lt;li&gt;Restart Ghidra&lt;/li&gt; &#xA; &lt;li&gt;Make sure the GhidraMCPPlugin is enabled in &lt;code&gt;File&lt;/code&gt; -&amp;gt; &lt;code&gt;Configure&lt;/code&gt; -&amp;gt; &lt;code&gt;Developer&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Optional&lt;/em&gt;: Configure the port in Ghidra with &lt;code&gt;Edit&lt;/code&gt; -&amp;gt; &lt;code&gt;Tool Options&lt;/code&gt; -&amp;gt; &lt;code&gt;GhidraMCP HTTP Server&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Video Installation Guide:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/75f0c176-6da1-48dc-ad96-c182eb4648c3&#34;&gt;https://github.com/user-attachments/assets/75f0c176-6da1-48dc-ad96-c182eb4648c3&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;MCP Clients&lt;/h2&gt; &#xA;&lt;p&gt;Theoretically, any MCP client should work with ghidraMCP. Three examples are given below.&lt;/p&gt; &#xA;&lt;h2&gt;Example 1: Claude Desktop&lt;/h2&gt; &#xA;&lt;p&gt;To set up Claude Desktop as a Ghidra MCP client, go to &lt;code&gt;Claude&lt;/code&gt; -&amp;gt; &lt;code&gt;Settings&lt;/code&gt; -&amp;gt; &lt;code&gt;Developer&lt;/code&gt; -&amp;gt; &lt;code&gt;Edit Config&lt;/code&gt; -&amp;gt; &lt;code&gt;claude_desktop_config.json&lt;/code&gt; and add the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;ghidra&#34;: {&#xA;      &#34;command&#34;: &#34;python&#34;,&#xA;      &#34;args&#34;: [&#xA;        &#34;/ABSOLUTE_PATH_TO/bridge_mcp_ghidra.py&#34;,&#xA;        &#34;--ghidra-server&#34;,&#xA;        &#34;http://127.0.0.1:8080/&#34;&#xA;      ]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, edit this file directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/Users/YOUR_USER/Library/Application Support/Claude/claude_desktop_config.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The server IP and port are configurable and should be set to point to the target Ghidra instance. If not set, both will default to localhost:8080.&lt;/p&gt; &#xA;&lt;h2&gt;Example 2: Cline&lt;/h2&gt; &#xA;&lt;p&gt;To use GhidraMCP with &lt;a href=&#34;https://cline.bot&#34;&gt;Cline&lt;/a&gt;, this requires manually running the MCP server as well. First run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python bridge_mcp_ghidra.py --transport sse --mcp-host 127.0.0.1 --mcp-port 8081 --ghidra-server http://127.0.0.1:8080/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The only &lt;em&gt;required&lt;/em&gt; argument is the transport. If all other arguments are unspecified, they will default to the above. Once the MCP server is running, open up Cline and select &lt;code&gt;MCP Servers&lt;/code&gt; at the top.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/88e1f336-4729-46ee-9b81-53271e9c0ce0&#34; alt=&#34;Cline select&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then select &lt;code&gt;Remote Servers&lt;/code&gt; and add the following, ensuring that the url matches the MCP host and port:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Server Name: GhidraMCP&lt;/li&gt; &#xA; &lt;li&gt;Server URL: &lt;code&gt;http://127.0.0.1:8081/sse&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Example 3: 5ire&lt;/h2&gt; &#xA;&lt;p&gt;Another MCP client that supports multiple models on the backend is &lt;a href=&#34;https://github.com/nanbingxyz/5ire&#34;&gt;5ire&lt;/a&gt;. To set up GhidraMCP, open 5ire and go to &lt;code&gt;Tools&lt;/code&gt; -&amp;gt; &lt;code&gt;New&lt;/code&gt; and set the following configurations:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Tool Key: ghidra&lt;/li&gt; &#xA; &lt;li&gt;Name: GhidraMCP&lt;/li&gt; &#xA; &lt;li&gt;Command: &lt;code&gt;python /ABSOLUTE_PATH_TO/bridge_mcp_ghidra.py&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Building from Source&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Copy the following files from your Ghidra directory to this project&#39;s &lt;code&gt;lib/&lt;/code&gt; directory:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Ghidra/Features/Base/lib/Base.jar&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Ghidra/Features/Decompiler/lib/Decompiler.jar&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Ghidra/Framework/Docking/lib/Docking.jar&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Ghidra/Framework/Generic/lib/Generic.jar&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Ghidra/Framework/Project/lib/Project.jar&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Ghidra/Framework/SoftwareModeling/lib/SoftwareModeling.jar&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Ghidra/Framework/Utility/lib/Utility.jar&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Ghidra/Framework/Gui/lib/Gui.jar&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Build with Maven by running:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;mvn clean package assembly:single&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The generated zip file includes the built Ghidra plugin and its resources. These files are required for Ghidra to recognize the new extension.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;lib/GhidraMCP.jar&lt;/li&gt; &#xA; &lt;li&gt;extensions.properties&lt;/li&gt; &#xA; &lt;li&gt;Module.manifest&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>