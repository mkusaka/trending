<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-15T01:29:57Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>spring-projects/spring-data-redis</title>
    <updated>2024-03-15T01:29:57Z</updated>
    <id>tag:github.com,2024-03-15:/spring-projects/spring-data-redis</id>
    <link href="https://github.com/spring-projects/spring-data-redis" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Provides support to increase developer productivity in Java when using Redis, a key-value store. Uses familiar Spring concepts such as a template classes for core API usage and lightweight repository style data access.&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>liyupi/yu-rpc</title>
    <updated>2024-03-15T01:29:57Z</updated>
    <id>tag:github.com,2024-03-15:/liyupi/yu-rpc</id>
    <link href="https://github.com/liyupi/yu-rpc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;从 0 到 1，带你开发自己的 RPC 框架&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;鱼皮 RPC 框架&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;从 0 到 1，带你开发自己的 RPC 框架&lt;/p&gt; &#xA; &lt;p&gt;鱼皮原创项目教程系列：&lt;a href=&#34;https://yuyuanweb.feishu.cn/wiki/SePYwTc9tipQiCktw7Uc7kujnCd&#34;&gt;https://yuyuanweb.feishu.cn/wiki/SePYwTc9tipQiCktw7Uc7kujnCd&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;项目介绍&lt;/h2&gt; &#xA;&lt;p&gt;基于 Java + Etcd + Vert.x 的高性能 RPC 框架，用新颖的技术栈从 0 到 1 带大家开发轮子。教程由浅入深，可以学习并实践基于 Vert.x 的网络服务器、序列化器、基于 Etcd 和 ZooKeeper 的注册中心、反射、动态代理、自定义网络协议、多种设计模式（单例 / 工厂 / 装饰者等）、负载均衡器设计、重试和容错机制、Spring Boot Starter 注解驱动开发等，大幅提升架构设计能力。&lt;/p&gt; &#xA;&lt;p&gt;项目分为基础版和扩展版：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;基础版只需学几个小时，就能写在简历上的小项目~&lt;/li&gt; &#xA; &lt;li&gt;扩展版将是充满亮点的技术类项目，搭配一个业务项目，让简历更有竞争力。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;开始学习或了解详情：&lt;a href=&#34;https://yuyuanweb.feishu.cn/wiki/EweIwSYsXiEvCDkzS8BcTiAonyc&#34;&gt;手写 RPC 框架（24 年最新）&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;开源地址：&lt;a href=&#34;https://github.com/liyupi/yu-rpc&#34;&gt;https://github.com/liyupi/yu-rpc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;项目展示&lt;/h2&gt; &#xA;&lt;p&gt;目录结构：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/liyupi/yu-rpc/master/docs/tutorial.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;详细的保姆级文字教程：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/liyupi/yu-rpc/master/docs/structure.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;技术选型&lt;/h2&gt; &#xA;&lt;h3&gt;后端&lt;/h3&gt; &#xA;&lt;p&gt;后端技术以 Java 为主，但所有的思想和设计都是可以复用到其他语言的，代码不同罢了。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;⭐️ Vert.x 框架&lt;/li&gt; &#xA; &lt;li&gt;⭐️ Etcd 云原生存储中间件（jetcd 客户端）&lt;/li&gt; &#xA; &lt;li&gt;ZooKeeper 分布式协调工具（curator 客户端）&lt;/li&gt; &#xA; &lt;li&gt;⭐️ SPI 机制&lt;/li&gt; &#xA; &lt;li&gt;⭐️ 多种序列化器 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;JSON 序列化&lt;/li&gt; &#xA;   &lt;li&gt;Kryo 序列化&lt;/li&gt; &#xA;   &lt;li&gt;Hessian 序列化&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;⭐️ 多种设计模式 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;双检锁单例模式&lt;/li&gt; &#xA;   &lt;li&gt;工厂模式&lt;/li&gt; &#xA;   &lt;li&gt;代理模式&lt;/li&gt; &#xA;   &lt;li&gt;装饰者模式&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;⭐️ Spring Boot Starter 开发&lt;/li&gt; &#xA; &lt;li&gt;反射和注解驱动&lt;/li&gt; &#xA; &lt;li&gt;Guava Retrying 重试库&lt;/li&gt; &#xA; &lt;li&gt;JUnit 单元测试&lt;/li&gt; &#xA; &lt;li&gt;Logback 日志库&lt;/li&gt; &#xA; &lt;li&gt;Hutool、Lombok 工具库&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;源码目录&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;yu-rpc-core：鱼皮 RPC 框架核心代码&lt;/li&gt; &#xA; &lt;li&gt;yu-rpc-easy：鱼皮 RPC 框架简易版（适合新手入门）&lt;/li&gt; &#xA; &lt;li&gt;example-common：示例代码公用模块&lt;/li&gt; &#xA; &lt;li&gt;example-consumer：示例服务消费者&lt;/li&gt; &#xA; &lt;li&gt;example-provider：示例服务提供者&lt;/li&gt; &#xA; &lt;li&gt;example-springboot-consumer：示例服务消费者（Spring Boot 框架）&lt;/li&gt; &#xA; &lt;li&gt;example-springboot-provider：示例服务提供者（Spring Boot 框架）&lt;/li&gt; &#xA; &lt;li&gt;yu-rpc-spring-boot-starter：注解驱动的 RPC 框架，可在 Spring Boot 项目中快速使用&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;项目教程大纲&lt;/h2&gt; &#xA;&lt;p&gt;这个项目内容非常多，大家可以看看有没有自己想学的知识点。&lt;/p&gt; &#xA;&lt;h3&gt;第一章：RPC 框架简易版&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;RPC 基本概念和作用&lt;/li&gt; &#xA; &lt;li&gt;RPC 框架实现思路 | 基本设计&lt;/li&gt; &#xA; &lt;li&gt;RPC 框架实现思路 | 扩展设计&lt;/li&gt; &#xA; &lt;li&gt;简易版 RPC 开发 | 项目初始化&lt;/li&gt; &#xA; &lt;li&gt;简易版 RPC 开发 | web 服务器&lt;/li&gt; &#xA; &lt;li&gt;简易版 RPC 开发 | 本地服务注册器&lt;/li&gt; &#xA; &lt;li&gt;简易版 RPC 开发 | 序列化器&lt;/li&gt; &#xA; &lt;li&gt;简易版 RPC 开发 | 请求处理器&lt;/li&gt; &#xA; &lt;li&gt;简易版 RPC 开发 | 消费者代理&lt;/li&gt; &#xA; &lt;li&gt;简易版 RPC 开发 | 测试验证&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;第二章：RPC 框架扩展版&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;全局配置加载 | 扩展版项目初始化&lt;/li&gt; &#xA; &lt;li&gt;全局配置加载 | 配置加载实现&lt;/li&gt; &#xA; &lt;li&gt;全局配置加载 | 维护全局配置对象&lt;/li&gt; &#xA; &lt;li&gt;接口 Mock 设计实现&lt;/li&gt; &#xA; &lt;li&gt;序列化器 | 主流序列化器对比&lt;/li&gt; &#xA; &lt;li&gt;序列化器 | 多种序列化器实现&lt;/li&gt; &#xA; &lt;li&gt;序列化器 | SPI 机制&lt;/li&gt; &#xA; &lt;li&gt;序列化器 | 可扩展序列化器实现（SPI + 工厂模式）&lt;/li&gt; &#xA; &lt;li&gt;注册中心 | 注册中心核心能力&lt;/li&gt; &#xA; &lt;li&gt;注册中心 | 注册中心技术选型&lt;/li&gt; &#xA; &lt;li&gt;注册中心 | Etcd 云原生中间件入门&lt;/li&gt; &#xA; &lt;li&gt;注册中心 | 基于 Etcd 实现注册中心&lt;/li&gt; &#xA; &lt;li&gt;注册中心 | 可扩展注册中心实现（SPI + 工厂模式）&lt;/li&gt; &#xA; &lt;li&gt;注册中心优化 | 心跳检测和续期机制&lt;/li&gt; &#xA; &lt;li&gt;注册中心优化 | 服务节点下线机制&lt;/li&gt; &#xA; &lt;li&gt;注册中心优化 | 消费端服务缓存&lt;/li&gt; &#xA; &lt;li&gt;注册中心优化 | 缓存更新（Etcd 监听机制）&lt;/li&gt; &#xA; &lt;li&gt;注册中心优化 | ZooKeeper 注册中心实现&lt;/li&gt; &#xA; &lt;li&gt;自定义协议 | 需求分析及方案设计&lt;/li&gt; &#xA; &lt;li&gt;自定义协议 | 消息结构设计（参考 Dubbo）&lt;/li&gt; &#xA; &lt;li&gt;自定义协议 | 网络传输设计（基于 Vert.x 实现 TCP 服务器）&lt;/li&gt; &#xA; &lt;li&gt;自定义协议 | 编码 / 解码器&lt;/li&gt; &#xA; &lt;li&gt;自定义协议 | TCP 请求处理器&lt;/li&gt; &#xA; &lt;li&gt;自定义协议 | TCP 请求客户端&lt;/li&gt; &#xA; &lt;li&gt;自定义协议 | 粘包半包问题分析&lt;/li&gt; &#xA; &lt;li&gt;自定义协议 | 使用 Vert.x 解决粘包半包问题&lt;/li&gt; &#xA; &lt;li&gt;自定义协议 | 客户端代码优化（装饰者模式）&lt;/li&gt; &#xA; &lt;li&gt;负载均衡 | 负载均衡概念和常用算法&lt;/li&gt; &#xA; &lt;li&gt;负载均衡 | 一致性 Hash&lt;/li&gt; &#xA; &lt;li&gt;负载均衡 | 多种负载均衡器实现&lt;/li&gt; &#xA; &lt;li&gt;负载均衡 | 可扩展负载均衡器实现（SPI + 工厂模式）&lt;/li&gt; &#xA; &lt;li&gt;重试机制 | 重试等待策略&lt;/li&gt; &#xA; &lt;li&gt;重试机制 | 重试方案设计&lt;/li&gt; &#xA; &lt;li&gt;重试机制 | 多种重试策略实现&lt;/li&gt; &#xA; &lt;li&gt;重试机制 | 可扩展重试策略实现（SPI + 工厂模式）&lt;/li&gt; &#xA; &lt;li&gt;容错机制 | 容错策略和实现方式&lt;/li&gt; &#xA; &lt;li&gt;容错机制 | 容错方案设计&lt;/li&gt; &#xA; &lt;li&gt;容错机制 | 多种容错策略实现&lt;/li&gt; &#xA; &lt;li&gt;容错机制 | 可扩展容错策略实现（SPI + 工厂模式）&lt;/li&gt; &#xA; &lt;li&gt;启动机制 | 框架快速启动类&lt;/li&gt; &#xA; &lt;li&gt;启动机制 | 注解驱动设计&lt;/li&gt; &#xA; &lt;li&gt;启动机制 | Spring Boot Starter 注解驱动实现&lt;/li&gt; &#xA; &lt;li&gt;项目扩展思路&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;完整项目教程学习&lt;/h2&gt; &#xA;&lt;p&gt;点击 &lt;a href=&#34;https://yuyuanweb.feishu.cn/wiki/SDtMwjR1DituVpkz5MLc3fZLnzb&#34;&gt;加入编程导航&lt;/a&gt; ，鱼皮往期 &lt;a href=&#34;https://yuyuanweb.feishu.cn/wiki/SePYwTc9tipQiCktw7Uc7kujnCd&#34;&gt;所有原创项目&lt;/a&gt; 均可学习。&lt;/p&gt;</summary>
  </entry>
</feed>