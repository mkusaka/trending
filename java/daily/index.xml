<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-11T01:37:30Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>xCollateral/VulkanMod</title>
    <updated>2022-06-11T01:37:30Z</updated>
    <id>tag:github.com,2022-06-11:/xCollateral/VulkanMod</id>
    <link href="https://github.com/xCollateral/VulkanMod" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Vulkan renderer mod for Minecraft.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xCollateral/VulkanMod/main/#&#34;&gt;&lt;img src=&#34;https://media.discordapp.net/attachments/963349566839738369/969920960373334076/Vlogo.png?width=300&amp;amp;height=300&#34; alt=&#34;Logo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;h1&gt;VulkanMod&lt;/h1&gt; &#xA; &lt;p&gt;This is a fabric mod that rewrites Minecraft OpenGL renderer to use Vulkan API.&lt;/p&gt; &#xA; &lt;p&gt;Demostration Video:&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://youtu.be/sbr7UxcAmOE&#34;&gt;&lt;img src=&#34;http://img.youtube.com/vi/sbr7UxcAmOE/0.jpg&#34; alt=&#34;Demostration Video&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/xCollateral/VulkanMod/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/xCollateral/VulkanMod/total?color=red&amp;amp;logo=github&amp;amp;style=for-the-badge&#34; alt=&#34;Download&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://discord.gg/FVXg7AYR2Q&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Discord-7289DA?style=for-the-badge&amp;amp;logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://ko-fi.com/V7V7CHHJV&#34;&gt;&lt;img src=&#34;https://ko-fi.com/img/githubbutton_sm.svg?sanitize=true&#34; alt=&#34;ko-fi&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;h2&gt;Installation&lt;/h2&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Fabric mod loader is needed.&lt;/li&gt; &#xA;  &lt;li&gt;Move &lt;code&gt;VulkanMod.jar&lt;/code&gt; to &lt;code&gt;mods&lt;/code&gt; folder of your Minecraft Instance.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h2&gt;Installation on macOS in ManyMC:&lt;/h2&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Install latest Fabric version for 1.18.2&lt;/li&gt; &#xA;  &lt;li&gt;Edit the LWJGL meta like this &lt;a href=&#34;https://cdn.discordapp.com/attachments/963180554193354785/983774971421659216/Screen_Shot_2022-06-07_at_17.48.10.png&#34;&gt;screenshot&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Paste &lt;a href=&#34;https://paste.gg/p/anonymous/064546decf4241e9bdeed650bcf655f7&#34;&gt;this&lt;/a&gt; in the LWJGL meta.&lt;/li&gt; &#xA;  &lt;li&gt;Done! Launch the game!&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;h2&gt;Known Issues&lt;/h2&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Linux and macOS may not work.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h2&gt;Notes&lt;/h2&gt; &#xA; &lt;p&gt;This is still a pre-alpha mod. Bugs are to be expected.&lt;/p&gt; &#xA; &lt;div&gt;&lt;/div&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>TooTallNate/Java-WebSocket</title>
    <updated>2022-06-11T01:37:30Z</updated>
    <id>tag:github.com,2022-06-11:/TooTallNate/Java-WebSocket</id>
    <link href="https://github.com/TooTallNate/Java-WebSocket" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A barebones WebSocket client and server implementation written in 100% Java.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Java WebSockets&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/marci4/Java-WebSocket-Dev&#34;&gt;&lt;img src=&#34;https://travis-ci.org/marci4/Java-WebSocket-Dev.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.javadoc.io/doc/org.java-websocket/Java-WebSocket&#34;&gt;&lt;img src=&#34;https://www.javadoc.io/badge/org.java-websocket/Java-WebSocket.svg?sanitize=true&#34; alt=&#34;Javadocs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://mvnrepository.com/artifact/org.java-websocket/Java-WebSocket&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/org.java-websocket/Java-WebSocket.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://oss.sonatype.org/content/repositories/snapshots/org/java-websocket/Java-WebSocket/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nexus/s/https/oss.sonatype.org/org.java-websocket/Java-WebSocket.svg?sanitize=true&#34; alt=&#34;Sonatype Nexus (Snapshots)&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository contains a barebones WebSocket server and client implementation written in 100% Java. The underlying classes are implemented &lt;code&gt;java.nio&lt;/code&gt;, which allows for a non-blocking event-driven model (similar to the &lt;a href=&#34;https://html.spec.whatwg.org/multipage/web-sockets.html&#34;&gt;WebSocket API&lt;/a&gt; for web browsers).&lt;/p&gt; &#xA;&lt;p&gt;Implemented WebSocket protocol versions are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://tools.ietf.org/html/rfc6455&#34;&gt;RFC 6455&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://tools.ietf.org/html/rfc7692&#34;&gt;RFC 7692&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/TooTallNate/Java-WebSocket/wiki/Drafts&#34;&gt;Here&lt;/a&gt; some more details about protocol versions/drafts. &lt;a href=&#34;https://github.com/TooTallNate/Java-WebSocket/wiki/PerMessageDeflateExample&#34;&gt;PerMessageDeflateExample&lt;/a&gt; enable the extension with reference to both a server and client example.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Dependency management tools&lt;/h3&gt; &#xA;&lt;p&gt;Below is a brief guide to using dependency management tools like maven or gradle.&lt;/p&gt; &#xA;&lt;h4&gt;Maven&lt;/h4&gt; &#xA;&lt;p&gt;To use maven add this dependency to your pom.xml:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;  &amp;lt;groupId&amp;gt;org.java-websocket&amp;lt;/groupId&amp;gt;&#xA;  &amp;lt;artifactId&amp;gt;Java-WebSocket&amp;lt;/artifactId&amp;gt;&#xA;  &amp;lt;version&amp;gt;1.5.3&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Gradle&lt;/h4&gt; &#xA;&lt;p&gt;To use Gradle add the maven central repository to your repositories list:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;mavenCentral()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can just add the latest version to your build.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;compile &#34;org.java-websocket:Java-WebSocket:1.5.3&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or this option if you use gradle 7.0 and above.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;implementation &#39;org.java-websocket:Java-WebSocket:1.5.3&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Logging&lt;/h4&gt; &#xA;&lt;p&gt;This library uses &lt;a href=&#34;https://www.slf4j.org/&#34;&gt;SLF4J&lt;/a&gt; for logging and does not ship with any default logging implementation.&lt;/p&gt; &#xA;&lt;p&gt;Exceptions are using the log level &lt;code&gt;ERROR&lt;/code&gt; and debug logging will be done with log level &lt;code&gt;TRACE&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Feel free to use whichever logging framework you desire and use the corresponding &lt;a href=&#34;https://mvnrepository.com/artifact/org.slf4j&#34;&gt;binding&lt;/a&gt; in your dependency management.&lt;/p&gt; &#xA;&lt;p&gt;If you want to get started, take a look at the SimpleLogger &lt;a href=&#34;https://github.com/TooTallNate/Java-WebSocket/wiki/SimpleLogger-example&#34;&gt;example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Standalone jar&lt;/h3&gt; &#xA;&lt;p&gt;If you do not use any dependency management tool, you can find the latest standalone jar &lt;a href=&#34;https://github.com/TooTallNate/Java-WebSocket/releases/latest&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Writing your own WebSocket Server&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;org.java_websocket.server.WebSocketServer&lt;/code&gt; abstract class implements the server-side of the &lt;a href=&#34;http://www.whatwg.org/specs/web-socket-protocol/&#34;&gt;WebSocket Protocol&lt;/a&gt;. A WebSocket server by itself doesn&#39;t do anything except establish socket connections though HTTP. After that it&#39;s up to &lt;strong&gt;your&lt;/strong&gt; subclass to add purpose.&lt;/p&gt; &#xA;&lt;p&gt;An example for a WebSocketServer can be found in both the &lt;a href=&#34;https://github.com/TooTallNate/Java-WebSocket/wiki#server-example&#34;&gt;wiki&lt;/a&gt; and the &lt;a href=&#34;https://github.com/TooTallNate/Java-WebSocket/tree/master/src/main/example&#34;&gt;example&lt;/a&gt; folder.&lt;/p&gt; &#xA;&lt;h2&gt;Writing your own WebSocket Client&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;org.java_websocket.client.WebSocketClient&lt;/code&gt; abstract class can connect to valid WebSocket servers. The constructor expects a valid &lt;code&gt;ws://&lt;/code&gt; URI to connect to. Important events &lt;code&gt;onOpen&lt;/code&gt;, &lt;code&gt;onClose&lt;/code&gt;, &lt;code&gt;onMessage&lt;/code&gt; and &lt;code&gt;onError&lt;/code&gt; get fired throughout the life of the WebSocketClient, and must be implemented in &lt;strong&gt;your&lt;/strong&gt; subclass.&lt;/p&gt; &#xA;&lt;p&gt;An example for a WebSocketClient can be found in both the &lt;a href=&#34;https://github.com/TooTallNate/Java-WebSocket/wiki#client-example&#34;&gt;wiki&lt;/a&gt; and the &lt;a href=&#34;https://github.com/TooTallNate/Java-WebSocket/tree/master/src/main/example&#34;&gt;example&lt;/a&gt; folder.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;You can find a lot of examples &lt;a href=&#34;https://github.com/TooTallNate/Java-WebSocket/tree/master/src/main/example&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;WSS Support&lt;/h2&gt; &#xA;&lt;p&gt;This library supports wss. To see how to use wss please take a look at the examples.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you do not have a valid &lt;strong&gt;certificate&lt;/strong&gt; in place then you will have to create a self signed one. Browsers will simply refuse the connection in case of a bad certificate and will not ask the user to accept it. So the first step will be to make a browser to accept your self signed certificate. ( &lt;a href=&#34;https://bugzilla.mozilla.org/show_bug.cgi?id=594502&#34;&gt;https://bugzilla.mozilla.org/show_bug.cgi?id=594502&lt;/a&gt; ).&lt;br&gt; If the websocket server url is &lt;code&gt;wss://localhost:8000&lt;/code&gt; visit the url &lt;code&gt;https://localhost:8000&lt;/code&gt; with your browser. The browser will recognize the handshake and allow you to accept the certificate.&lt;/p&gt; &#xA;&lt;p&gt;The vm option &lt;code&gt;-Djavax.net.debug=all&lt;/code&gt; can help to find out if there is a problem with the certificate.&lt;/p&gt; &#xA;&lt;p&gt;It is currently not possible to accept ws and wss connections at the same time via the same websocket server instance.&lt;/p&gt; &#xA;&lt;p&gt;For some reason Firefox does not allow multiple connections to the same wss server if the server uses a different port than the default port (443).&lt;/p&gt; &#xA;&lt;p&gt;If you want to use &lt;code&gt;wss&lt;/code&gt; on the android platform you should take a look at &lt;a href=&#34;https://github.com/TooTallNate/Java-WebSocket/wiki/FAQ:-Secure-WebSockets#wss-on-android&#34;&gt;this&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;I ( @Davidiusdadi ) would be glad if you would give some feedback whether wss is working fine for you or not.&lt;/p&gt; &#xA;&lt;h2&gt;Minimum Required JDK&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Java-WebSocket&lt;/code&gt; is known to work with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Java 1.7 and higher&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Other JRE implementations may work as well, but haven&#39;t been tested.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Everything found in this repo is licensed under an MIT license. See the &lt;code&gt;LICENSE&lt;/code&gt; file for specifics.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>grpc/grpc-java</title>
    <updated>2022-06-11T01:37:30Z</updated>
    <id>tag:github.com,2022-06-11:/grpc/grpc-java</id>
    <link href="https://github.com/grpc/grpc-java" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Java gRPC implementation. HTTP/2 based RPC&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gRPC-Java - An RPC library and framework&lt;/h1&gt; &#xA;&lt;p&gt;gRPC-Java works with JDK 8. gRPC-Java clients are supported on Android API levels 19 and up (KitKat and later). Deploying gRPC servers on an Android device is not supported.&lt;/p&gt; &#xA;&lt;p&gt;TLS usage typically requires using Java 8, or Play Services Dynamic Security Provider on Android. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/grpc/grpc-java/master/SECURITY.md&#34;&gt;Security Readme&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;b&gt;Homepage:&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://grpc.io/&#34;&gt;grpc.io&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;b&gt;Mailing List:&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://groups.google.com/forum/#!forum/grpc-io&#34;&gt;grpc-io@googlegroups.com&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/grpc/grpc?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/grpc/grpc.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/grpc/grpc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/grpc/grpc-java&#34;&gt;&lt;img src=&#34;https://travis-ci.org/grpc/grpc-java.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/grpc/grpc-java?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/grpc/grpc-java/badge.svg?branch=master&amp;amp;service=github&#34; alt=&#34;Line Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/grpc/grpc-java&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/grpc/grpc-java/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Branch-adjusted Line Coverage Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;For a guided tour, take a look at the &lt;a href=&#34;https://grpc.io/docs/languages/java/quickstart&#34;&gt;quick start guide&lt;/a&gt; or the more explanatory &lt;a href=&#34;https://grpc.io/docs/languages/java/basics&#34;&gt;gRPC basics&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/grpc/grpc-java/tree/v1.47.0/examples&#34;&gt;examples&lt;/a&gt; and the &lt;a href=&#34;https://github.com/grpc/grpc-java/tree/v1.47.0/examples/android&#34;&gt;Android example&lt;/a&gt; are standalone projects that showcase the usage of gRPC.&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;Download &lt;a href=&#34;https://search.maven.org/search?q=g:io.grpc%20AND%20v:1.47.0&#34;&gt;the JARs&lt;/a&gt;. Or for Maven with non-Android, add to your &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;  &amp;lt;groupId&amp;gt;io.grpc&amp;lt;/groupId&amp;gt;&#xA;  &amp;lt;artifactId&amp;gt;grpc-netty-shaded&amp;lt;/artifactId&amp;gt;&#xA;  &amp;lt;version&amp;gt;1.47.0&amp;lt;/version&amp;gt;&#xA;  &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&amp;lt;dependency&amp;gt;&#xA;  &amp;lt;groupId&amp;gt;io.grpc&amp;lt;/groupId&amp;gt;&#xA;  &amp;lt;artifactId&amp;gt;grpc-protobuf&amp;lt;/artifactId&amp;gt;&#xA;  &amp;lt;version&amp;gt;1.47.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&amp;lt;dependency&amp;gt;&#xA;  &amp;lt;groupId&amp;gt;io.grpc&amp;lt;/groupId&amp;gt;&#xA;  &amp;lt;artifactId&amp;gt;grpc-stub&amp;lt;/artifactId&amp;gt;&#xA;  &amp;lt;version&amp;gt;1.47.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&amp;lt;dependency&amp;gt; &amp;lt;!-- necessary for Java 9+ --&amp;gt;&#xA;  &amp;lt;groupId&amp;gt;org.apache.tomcat&amp;lt;/groupId&amp;gt;&#xA;  &amp;lt;artifactId&amp;gt;annotations-api&amp;lt;/artifactId&amp;gt;&#xA;  &amp;lt;version&amp;gt;6.0.53&amp;lt;/version&amp;gt;&#xA;  &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or for Gradle with non-Android, add to your dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;runtimeOnly &#39;io.grpc:grpc-netty-shaded:1.47.0&#39;&#xA;implementation &#39;io.grpc:grpc-protobuf:1.47.0&#39;&#xA;implementation &#39;io.grpc:grpc-stub:1.47.0&#39;&#xA;compileOnly &#39;org.apache.tomcat:annotations-api:6.0.53&#39; // necessary for Java 9+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Android client, use &lt;code&gt;grpc-okhttp&lt;/code&gt; instead of &lt;code&gt;grpc-netty-shaded&lt;/code&gt; and &lt;code&gt;grpc-protobuf-lite&lt;/code&gt; instead of &lt;code&gt;grpc-protobuf&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;implementation &#39;io.grpc:grpc-okhttp:1.47.0&#39;&#xA;implementation &#39;io.grpc:grpc-protobuf-lite:1.47.0&#39;&#xA;implementation &#39;io.grpc:grpc-stub:1.47.0&#39;&#xA;compileOnly &#39;org.apache.tomcat:annotations-api:6.0.53&#39; // necessary for Java 9+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Development snapshots are available in &lt;a href=&#34;https://oss.sonatype.org/content/repositories/snapshots/&#34;&gt;Sonatypes&#39;s snapshot repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Generated Code&lt;/h2&gt; &#xA;&lt;p&gt;For protobuf-based codegen, you can put your proto files in the &lt;code&gt;src/main/proto&lt;/code&gt; and &lt;code&gt;src/test/proto&lt;/code&gt; directories along with an appropriate plugin.&lt;/p&gt; &#xA;&lt;p&gt;For protobuf-based codegen integrated with the Maven build system, you can use &lt;a href=&#34;https://www.xolstice.org/protobuf-maven-plugin/&#34;&gt;protobuf-maven-plugin&lt;/a&gt; (Eclipse and NetBeans users should also look at &lt;code&gt;os-maven-plugin&lt;/code&gt;&#39;s &lt;a href=&#34;https://github.com/trustin/os-maven-plugin#issues-with-eclipse-m2e-or-other-ides&#34;&gt;IDE documentation&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;build&amp;gt;&#xA;  &amp;lt;extensions&amp;gt;&#xA;    &amp;lt;extension&amp;gt;&#xA;      &amp;lt;groupId&amp;gt;kr.motd.maven&amp;lt;/groupId&amp;gt;&#xA;      &amp;lt;artifactId&amp;gt;os-maven-plugin&amp;lt;/artifactId&amp;gt;&#xA;      &amp;lt;version&amp;gt;1.6.2&amp;lt;/version&amp;gt;&#xA;    &amp;lt;/extension&amp;gt;&#xA;  &amp;lt;/extensions&amp;gt;&#xA;  &amp;lt;plugins&amp;gt;&#xA;    &amp;lt;plugin&amp;gt;&#xA;      &amp;lt;groupId&amp;gt;org.xolstice.maven.plugins&amp;lt;/groupId&amp;gt;&#xA;      &amp;lt;artifactId&amp;gt;protobuf-maven-plugin&amp;lt;/artifactId&amp;gt;&#xA;      &amp;lt;version&amp;gt;0.6.1&amp;lt;/version&amp;gt;&#xA;      &amp;lt;configuration&amp;gt;&#xA;        &amp;lt;protocArtifact&amp;gt;com.google.protobuf:protoc:3.19.2:exe:${os.detected.classifier}&amp;lt;/protocArtifact&amp;gt;&#xA;        &amp;lt;pluginId&amp;gt;grpc-java&amp;lt;/pluginId&amp;gt;&#xA;        &amp;lt;pluginArtifact&amp;gt;io.grpc:protoc-gen-grpc-java:1.47.0:exe:${os.detected.classifier}&amp;lt;/pluginArtifact&amp;gt;&#xA;      &amp;lt;/configuration&amp;gt;&#xA;      &amp;lt;executions&amp;gt;&#xA;        &amp;lt;execution&amp;gt;&#xA;          &amp;lt;goals&amp;gt;&#xA;            &amp;lt;goal&amp;gt;compile&amp;lt;/goal&amp;gt;&#xA;            &amp;lt;goal&amp;gt;compile-custom&amp;lt;/goal&amp;gt;&#xA;          &amp;lt;/goals&amp;gt;&#xA;        &amp;lt;/execution&amp;gt;&#xA;      &amp;lt;/executions&amp;gt;&#xA;    &amp;lt;/plugin&amp;gt;&#xA;  &amp;lt;/plugins&amp;gt;&#xA;&amp;lt;/build&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For non-Android protobuf-based codegen integrated with the Gradle build system, you can use &lt;a href=&#34;https://github.com/google/protobuf-gradle-plugin&#34;&gt;protobuf-gradle-plugin&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;plugins {&#xA;    id &#39;com.google.protobuf&#39; version &#39;0.8.18&#39;&#xA;}&#xA;&#xA;protobuf {&#xA;  protoc {&#xA;    artifact = &#34;com.google.protobuf:protoc:3.19.2&#34;&#xA;  }&#xA;  plugins {&#xA;    grpc {&#xA;      artifact = &#39;io.grpc:protoc-gen-grpc-java:1.47.0&#39;&#xA;    }&#xA;  }&#xA;  generateProtoTasks {&#xA;    all()*.plugins {&#xA;      grpc {}&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The prebuilt protoc-gen-grpc-java binary uses glibc on Linux. If you are compiling on Alpine Linux, you may want to use the &lt;a href=&#34;https://pkgs.alpinelinux.org/package/edge/testing/x86_64/grpc-java&#34;&gt;Alpine grpc-java package&lt;/a&gt; which uses musl instead.&lt;/p&gt; &#xA;&lt;p&gt;For Android protobuf-based codegen integrated with the Gradle build system, also use protobuf-gradle-plugin but specify the &#39;lite&#39; options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;plugins {&#xA;    id &#39;com.google.protobuf&#39; version &#39;0.8.18&#39;&#xA;}&#xA;&#xA;protobuf {&#xA;  protoc {&#xA;    artifact = &#34;com.google.protobuf:protoc:3.19.2&#34;&#xA;  }&#xA;  plugins {&#xA;    grpc {&#xA;      artifact = &#39;io.grpc:protoc-gen-grpc-java:1.47.0&#39;&#xA;    }&#xA;  }&#xA;  generateProtoTasks {&#xA;    all().each { task -&amp;gt;&#xA;      task.builtins {&#xA;        java { option &#39;lite&#39; }&#xA;      }&#xA;      task.plugins {&#xA;        grpc { option &#39;lite&#39; }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API Stability&lt;/h2&gt; &#xA;&lt;p&gt;APIs annotated with &lt;code&gt;@Internal&lt;/code&gt; are for internal use by the gRPC library and should not be used by gRPC users. APIs annotated with &lt;code&gt;@ExperimentalApi&lt;/code&gt; are subject to change in future releases, and library code that other projects may depend on should not use these APIs.&lt;/p&gt; &#xA;&lt;p&gt;We recommend using the &lt;a href=&#34;https://github.com/grpc/grpc-java-api-checker&#34;&gt;grpc-java-api-checker&lt;/a&gt; (an &lt;a href=&#34;https://github.com/google/error-prone&#34;&gt;Error Prone&lt;/a&gt; plugin) to check for usages of &lt;code&gt;@ExperimentalApi&lt;/code&gt; and &lt;code&gt;@Internal&lt;/code&gt; in any library code that depends on gRPC. It may also be used to check for &lt;code&gt;@Internal&lt;/code&gt; usage or unintended &lt;code&gt;@ExperimentalApi&lt;/code&gt; consumption in non-library code.&lt;/p&gt; &#xA;&lt;h2&gt;How to Build&lt;/h2&gt; &#xA;&lt;p&gt;If you are making changes to gRPC-Java, see the &lt;a href=&#34;https://raw.githubusercontent.com/grpc/grpc-java/master/COMPILING.md&#34;&gt;compiling instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;High-level Components&lt;/h2&gt; &#xA;&lt;p&gt;At a high level there are three distinct layers to the library: &lt;em&gt;Stub&lt;/em&gt;, &lt;em&gt;Channel&lt;/em&gt;, and &lt;em&gt;Transport&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Stub&lt;/h3&gt; &#xA;&lt;p&gt;The Stub layer is what is exposed to most developers and provides type-safe bindings to whatever datamodel/IDL/interface you are adapting. gRPC comes with a &lt;a href=&#34;https://github.com/google/grpc-java/raw/master/compiler&#34;&gt;plugin&lt;/a&gt; to the protocol-buffers compiler that generates Stub interfaces out of &lt;code&gt;.proto&lt;/code&gt; files, but bindings to other datamodel/IDL are easy and encouraged.&lt;/p&gt; &#xA;&lt;h3&gt;Channel&lt;/h3&gt; &#xA;&lt;p&gt;The Channel layer is an abstraction over Transport handling that is suitable for interception/decoration and exposes more behavior to the application than the Stub layer. It is intended to be easy for application frameworks to use this layer to address cross-cutting concerns such as logging, monitoring, auth, etc.&lt;/p&gt; &#xA;&lt;h3&gt;Transport&lt;/h3&gt; &#xA;&lt;p&gt;The Transport layer does the heavy lifting of putting and taking bytes off the wire. The interfaces to it are abstract just enough to allow plugging in of different implementations. Note the transport layer API is considered internal to gRPC and has weaker API guarantees than the core API under package &lt;code&gt;io.grpc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;gRPC comes with three Transport implementations:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The Netty-based transport is the main transport implementation based on &lt;a href=&#34;https://netty.io&#34;&gt;Netty&lt;/a&gt;. It is for both the client and the server.&lt;/li&gt; &#xA; &lt;li&gt;The OkHttp-based transport is a lightweight transport based on &lt;a href=&#34;https://square.github.io/okhttp/&#34;&gt;OkHttp&lt;/a&gt;. It is mainly for use on Android and is for client only.&lt;/li&gt; &#xA; &lt;li&gt;The in-process transport is for when a server is in the same process as the client. It is useful for testing, while also being safe for production use.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>