<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-24T01:39:06Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bruce-pang/pRPC</title>
    <updated>2023-06-24T01:39:06Z</updated>
    <id>tag:github.com,2023-06-24:/bruce-pang/pRPC</id>
    <link href="https://github.com/bruce-pang/pRPC" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A lightweight and easy-to-use RPC framework created by Bruce Pang&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;pRPC&lt;/h1&gt; &#xA;&lt;p&gt;目前发布第一版：&lt;/p&gt; &#xA;&lt;h2&gt;介绍&lt;/h2&gt; &#xA;&lt;p&gt;该框架是一个采用Netty实现的Rpc框架，适用于Spring Boot项目，计划更新支持SpringCloud，SpringCloudAlibaba。 核心代码模块都有清晰的注解，主要是用于学习之用。&lt;/p&gt; &#xA;&lt;h3&gt;开发环境介绍&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;JDK：1.8&#xA;maven：3.8.6&#xA;Spring Boot：2.1.2.RELEASE&#xA;Netty：4.1.66.Final&#xA;zookeeper：3.4.10&#xA;nacos：1.3.0&#xA;lombok：1.16.18&#xA;fastjson：1.2.76&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;工程结构&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/bruce-pang/pRPC/assets/125526597/82903f41-5ee9-4fcc-b6fc-cbc7abf8cd85&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;安装教程&lt;/h2&gt; &#xA;&lt;p&gt;在pom文件中加上依赖：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;            &amp;lt;dependency&amp;gt;&#xA;                &amp;lt;groupId&amp;gt;com.brucepang.prpc&amp;lt;/groupId&amp;gt;&#xA;                &amp;lt;artifactId&amp;gt;prpc-protocol&amp;lt;/artifactId&amp;gt;&#xA;                &amp;lt;version&amp;gt;1.3.0&amp;lt;/version&amp;gt;&#xA;            &amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;使用说明&lt;/h2&gt; &#xA;&lt;p&gt;该工程中:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;prpc-protocol为prpc框架本身，可以导出jar包作为使用；&#xA;prpc-registry为服务发现工程，目前支持zookeeper和nacos；&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;其余子工程分别对应为demo：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;prpc-protocol ---&amp;gt; 框架本身&#xA;prpc-registry ---&amp;gt; 注册中心与服务发现&#xA;prpc-api ---&amp;gt; demo：公共代码&#xA;prpc-provider ---&amp;gt; demo：服务提供方&#xA;prpc-consumer ---&amp;gt; demo：服务调用方&#xA;prpc-registry ---&amp;gt; 服务发现与注册&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;快速体验【纯体验，不写代码篇】：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1.打开zookeeper或nacos&#xA;    注意：&#xA;     1.1 zookeeper本项目采用的是3.4.10版本，如果使用3.5.x版本，需要修改prpc-registry pom.xml中的curator-version为3.x.x以上版本,以下为项目中的配置：&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;properties&amp;gt;&#xA;        &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;&#xA;        &amp;lt;!--&#xA;            Curator 2.x.x - compatible with both ZooKeeper 3.4.x and ZooKeeper 3.5.x&#xA;            Curator 3.x.x - compatible only with ZooKeeper 3.5.x and includes support for new features such as dynamic reconfiguration, etc.&#xA;        --&amp;gt;&#xA;        &amp;lt;curator-version&amp;gt;2.13.0&amp;lt;/curator-version&amp;gt;&#xA;    &amp;lt;/properties&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;2.打开prpc-provider工程，配置application.yml，如下是参数配置：&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;com:&#xA;  brucepang:&#xA;    prpc:&#xA;      server:&#xA;        servicePort: 20880 # 服务端口【本地调用使用】&#xA;        registryType: 0 # 注册中心类型 0：zookeeper 1：eureka 2：nacos&#xA;        registryAddress: 192.168.56.1:2181 # 注册中心地址 zookeeper默认端口2181， eureka默认端口8761， nacos默认端口8848&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;3.若不需要编写业务代码，直接运行PrpcProviderApplication.java，即可启动服务提供方。&#xA;4.打开prpc-consumer工程，配置application.yml，如下是参数配置：&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;com:&#xA;  brucepang:&#xA;    prpc:&#xA;      client:&#xA;        enableRegistry: false # 是否启用注册中心, 默认true&#xA;        serviceAddress: 192.168.56.1 # 服务地址【本地调用使用】&#xA;        servicePort: 20880 # 服务端口【本地调用使用】&#xA;#         registryAddress: 192.168.56.1:8848 # 注册中心地址 zookeeper默认端口2181， eureka默认端口8761， nacos默认端口8848&#xA;#         registryType: 2 # 注册中心类型 0：zookeeper 1：eureka 2：nacos&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;5.若不需要编写业务代码，直接运行PrpcConsumerApplication.java，即可启动服务调用方。&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;6.启动完成后， 访问&lt;a href=&#34;http://localhost:8080/hello?name=BrucePang%EF%BC%8C%E6%82%A8%E8%83%BD%E5%A4%9F%E7%9C%8B%E5%88%B0%EF%BC%9A&#34;&gt;http://localhost:8080/hello?name=BrucePang，您能够看到：&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/bruce-pang/pRPC/assets/125526597/be4768f0-ad3c-49d7-9069-d7770a47578f&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;访问http://localhost:8080/fire?name=刘三石，您能够看到：&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/bruce-pang/pRPC/assets/125526597/51ea4a6b-b5b8-4791-aace-98fb16fdafea&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;框架目前只是功能基础实现版，尚有很多优化点， 例如：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1.目前只支持zookeeper和nacos，后续会支持eureka；&#xA;2.反射调用使用的是jdk动态代理，性能远远比不上asm字节码生成，后续会支持asm字节码生成；&#xA;3.服务列表目前每次都是远程获取的，尚未做本地缓存，后续会支持本地缓存&#xA;4.打包成springboot-starter，方便使用；&#xA;5.序列化使用jdk自带的序列化，性能远远比不上msgpack，后续会支持msgpack；&#xA;6.为了实现切换本地调用和远程调用，目前使用了有比较多冗余代码没有采用合适的设计模式，后续会优化；&#xA;....&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;本版本总结：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1.基于netty实现了基本的rpc功能；&#xA;2.期间对于spring生命周期的理解更加深刻，并且对于spring的底层组件使用场景有了更深刻的印象；&#xA;3.实现了最基本的负载均衡，目前只支持随机负载均衡；&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;天涯何处无芳草，给颗星星好不好┭┮﹏┭┮]&lt;/h3&gt; &#xA;&lt;h3&gt;后续会持续更新，欢迎大家提出宝贵意见，一起学习，一起进步。&lt;/h3&gt;</summary>
  </entry>
  <entry>
    <title>thaycacac/java</title>
    <updated>2023-06-24T01:39:06Z</updated>
    <id>tag:github.com,2023-06-24:/thaycacac/java</id>
    <link href="https://github.com/thaycacac/java" rel="alternate"></link>
    <summary type="html">&lt;p&gt;All source java, data structures and algorithms, lab java...&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Java FPT&lt;/h1&gt; &#xA;&lt;p&gt;This repo include all source code java when I learned in university.&lt;/p&gt; &#xA;&lt;h3&gt;PRO192 - Java Core&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Code in class&lt;/li&gt; &#xA; &lt;li&gt;Project in class (DuyDT)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;PRJ311 - Desktop Java Applications&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bank for Practical Exam&lt;/li&gt; &#xA; &lt;li&gt;Example Practical Exam&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;CSD201 - Data Structures and Algorithms&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;My Linked List&lt;/li&gt; &#xA; &lt;li&gt;My Stack&lt;/li&gt; &#xA; &lt;li&gt;Recursion&lt;/li&gt; &#xA; &lt;li&gt;My Tree&lt;/li&gt; &#xA; &lt;li&gt;My Graph&lt;/li&gt; &#xA; &lt;li&gt;My Hash Table&lt;/li&gt; &#xA; &lt;li&gt;My Sorting&lt;/li&gt; &#xA; &lt;li&gt;Bank for Practical Exam&lt;/li&gt; &#xA; &lt;li&gt;Example Practical Exam&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;LAB211 - OOP with Java Lab&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Included three lesson that I passed (TuanVM)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;LAB221 - Desktop Java Lab&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Included two lesson that I passed (TuanVM)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;PRJ321 - Web-based Java Applications&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Code in class&lt;/li&gt; &#xA; &lt;li&gt;Example Practical Exam&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;LAB231 - Web Java Lab&lt;/h3&gt; &#xA;&lt;p&gt;Just included two lesson that I passed (TuanVM)&lt;/p&gt;</summary>
  </entry>
</feed>