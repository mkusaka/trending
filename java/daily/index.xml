<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-21T01:36:44Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>linux-china/chatgpt-spring-boot-starter</title>
    <updated>2023-06-21T01:36:44Z</updated>
    <id>tag:github.com,2023-06-21:/linux-china/chatgpt-spring-boot-starter</id>
    <link href="https://github.com/linux-china/chatgpt-spring-boot-starter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Spring Boot ChatGPT Starter&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ChatGPT Spring Boot Starter&lt;/h1&gt; &#xA;&lt;p&gt;Spring Boot ChatGPT starter with ChatGPT chat and functions support.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Base on Spring Boot 3.0+&lt;/li&gt; &#xA; &lt;li&gt;Async with Spring Webflux&lt;/li&gt; &#xA; &lt;li&gt;Support ChatGPT Chat Stream&lt;/li&gt; &#xA; &lt;li&gt;Support ChatGPT functions&lt;/li&gt; &#xA; &lt;li&gt;No third-party library: base on Spring 6 HTTP interface&lt;/li&gt; &#xA; &lt;li&gt;GraalVM native image support&lt;/li&gt; &#xA; &lt;li&gt;Azure OpenAI support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Get Started&lt;/h1&gt; &#xA;&lt;h3&gt;Add dependency&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;code&gt;chatgpt-spring-boot-starter&lt;/code&gt; dependency in your pom.xml.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&#xA;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;org.mvnsearch&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;chatgpt-spring-boot-starter&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;0.2.1&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add configuration&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;code&gt;openai.api.key&lt;/code&gt; in &lt;code&gt;application.properties&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;# OpenAI API Token, or you can set environment variable OPENAI_API_KEY&#xA;openai.api.key=sk-xxxx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use Azure OpenAI, you can add &lt;code&gt;openai.api.url&lt;/code&gt; in &lt;code&gt;application.properties&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;openai.api.key=1138xxxx9037&#xA;openai.api.url=https://YOUR_RESOURCE_NAME.openai.azure.com/openai/deployments/YOUR_DEPLOYMENT_NAME/chat/completions?api-version=2023-05-15&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Call ChatGPT Service&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;&#xA;@RestController&#xA;public class ChatRobotController {&#xA;    @Autowired&#xA;    private ChatGPTService chatGPTService;&#xA;&#xA;    @PostMapping(&#34;/chat&#34;)&#xA;    public Mono&amp;lt;String&amp;gt; chat(@RequestBody String content) {&#xA;        return chatGPTService.chat(ChatCompletionRequest.of(content))&#xA;                .map(ChatCompletionResponse::getReplyText);&#xA;    }&#xA;&#xA;    @GetMapping(&#34;/stream-chat&#34;)&#xA;    public Flux&amp;lt;String&amp;gt; streamChat(@RequestParam String content) {&#xA;        return chatGPTService.stream(ChatCompletionRequest.of(content))&#xA;                .map(ChatCompletionResponse::getReplyText);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;ChatGPT functions&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a Spring Bean with &lt;code&gt;@Component&lt;/code&gt; and implement &lt;code&gt;GPTFunctionsStub&lt;/code&gt; interface. Annotate GPT functions with &lt;code&gt;@GPTFunction&lt;/code&gt; annotation, and annotate function parameters with &lt;code&gt;@Parameter&lt;/code&gt; annotation. &lt;code&gt;@Nonnull&lt;/code&gt; means that the parameter is required.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;&#xA;import jakarta.annotation.Nonnull;&#xA;&#xA;@Component&#xA;public class GPTFunctions implements GPTFunctionsStub {&#xA;&#xA;    public record SendEmailRequest(&#xA;            @Nonnull @Parameter(&#34;Recipients of email&#34;) List&amp;lt;String&amp;gt; recipients,&#xA;            @Nonnull @Parameter(&#34;Subject of email&#34;) String subject,&#xA;            @Parameter(&#34;Content of email&#34;) String content) {&#xA;    }&#xA;&#xA;    @GPTFunction(name = &#34;send_email&#34;, value = &#34;Send email to receiver&#34;)&#xA;    public String sendEmail(SendEmailRequest request) {&#xA;        System.out.println(&#34;Recipients: &#34; + String.join(&#34;,&#34;, request.recipients));&#xA;        System.out.println(&#34;Subject: &#34; + request.subject);&#xA;        System.out.println(&#34;Content:\n&#34; + request.content);&#xA;        return &#34;Email sent to &#34; + String.join(&#34;,&#34;, request.recipients) + &#34; successfully!&#34;;&#xA;    }&#xA;&#xA;    public record SQLQueryRequest(&#xA;            @Parameter(required = true, value = &#34;SQL to query&#34;) String sql) {&#xA;    }&#xA;&#xA;    @GPTFunction(name = &#34;execute_sql_query&#34;, value = &#34;Execute SQL query and return the result set&#34;)&#xA;    public String executeSQLQuery(SQLQueryRequest request) {&#xA;        System.out.println(&#34;Execute SQL: &#34; + request.sql);&#xA;        return &#34;id, name, salary\n1,Jackie,8000\n2,Libing,78000\n3,Sam,7500&#34;;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Call GPT function by &lt;code&gt;response.getReplyCombinedText()&lt;/code&gt; or &lt;code&gt;chatMessage.getFunctionCall().getFunctionStub().call()&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class ChatGPTServiceImplTest {&#xA;    @Test&#xA;    public void testChatWithFunctions() throws Exception {&#xA;        final String prompt = &#34;Hi Jackie, could you write an email to Libing(libing.chen@gmail.com) and Sam(linux_china@hotmail.com) and invite them to join Mike&#39;s birthday party at 4 pm tomorrow? Thanks!&#34;;&#xA;        final ChatCompletionRequest request = ChatCompletionRequest.functions(prompt, List.of(&#34;send_email&#34;));&#xA;        final ChatCompletionResponse response = chatGPTService.chat(request).block();&#xA;        // display reply combined text with function call&#xA;        System.out.println(response.getReplyCombinedText());&#xA;        // call function manually&#xA;        for (ChatMessage chatMessage : response.getReply()) {&#xA;            final FunctionCall functionCall = chatMessage.getFunctionCall();&#xA;            if (functionCall != null) {&#xA;                final Object result = functionCall.getFunctionStub().call();&#xA;                System.out.println(result);&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    @Test&#xA;    public void testExecuteSQLQuery() {&#xA;        String context = &#34;You are SQL developer. Write SQL according to requirements, and execute it in MySQL database.&#34;;&#xA;        final String prompt = &#34;Query all employees whose salary is greater than the average.&#34;;&#xA;        final ChatCompletionRequest request = ChatCompletionRequest.functions(prompt, List.of(&#34;execute_sql_query&#34;));&#xA;        // add prompt context as system message&#xA;        request.addMessage(ChatMessage.systemMessage(context));&#xA;        final ChatCompletionResponse response = chatGPTService.chat(request).block();&#xA;        System.out.println(response.getReplyCombinedText());&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ChatGPT Functions use cases:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Structure Output: such as SQL, JSON, CSV, YAML etc., then delegate functions to process them.&lt;/li&gt; &#xA; &lt;li&gt;Commands: such as send_email, post on Twitter.&lt;/li&gt; &#xA; &lt;li&gt;DevOps: such as generate K8S yaml file, then call K8S functions to deploy it.&lt;/li&gt; &#xA; &lt;li&gt;Search Matching: bind search with functions, such as search for a book, then call function to show it.&lt;/li&gt; &#xA; &lt;li&gt;Spam detection: email spam, advertisement spam etc&lt;/li&gt; &#xA; &lt;li&gt;PipeLine: you can think function as a node in pipeline. After process by function, and you can pass it to ChatGPT again.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to have a simple test for ChatGPT functions, you can install &lt;a href=&#34;https://plugins.jetbrains.com/plugin/21671-chatgpt-with-markdown&#34;&gt;ChatGPT with Markdown JetBrains IDE Plugin&lt;/a&gt;, and take a look at &lt;a href=&#34;https://raw.githubusercontent.com/linux-china/chatgpt-spring-boot-starter/main/chat.gpt&#34;&gt;chat.gpt file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;FAQ&lt;/h1&gt; &#xA;&lt;h3&gt;OpenAI REST API proxy&lt;/h3&gt; &#xA;&lt;p&gt;Please refer &lt;a href=&#34;https://raw.githubusercontent.com/linux-china/chatgpt-spring-boot-starter/main/src/test/java/org/mvnsearch/chatgpt/demo/OpenAIProxyController.java&#34;&gt;OpenAIProxyController&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;&#xA;@RestController&#xA;public class OpenAIProxyController {&#xA;    @Autowired&#xA;    private OpenAIChatAPI openAIChatAPI;&#xA;&#xA;    @PostMapping(&#34;/v1/chat/completions&#34;)&#xA;    public Publisher&amp;lt;ChatCompletionResponse&amp;gt; completions(@RequestBody ChatCompletionRequest request) {&#xA;        return openAIChatAPI.proxy(request);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Of course, you can use standard URL &lt;code&gt;http://localhost:8080/v1/chat/completions&lt;/code&gt; to call Azure OpenAI API.&lt;/p&gt; &#xA;&lt;h3&gt;Prompt templates&lt;/h3&gt; &#xA;&lt;p&gt;How to manage prompts in Java? Now my suggestion is to adopt properties file format, and use MessageFormat to format. Please take a look at &lt;a href=&#34;https://raw.githubusercontent.com/linux-china/chatgpt-spring-boot-starter/main/src/test/java/org/mvnsearch/chatgpt/demo/service/PromptManager.java&#34;&gt;PromptManager&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;References&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://platform.openai.com/docs/api-reference/chat&#34;&gt;OpenAI chat API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/&#34;&gt;Spring Boot 3.0+&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.spring.io/spring-framework/reference/web/webflux.html&#34;&gt;Spring Boot Webflux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.spring.io/spring-framework/reference/integration/rest-clients.html#rest-http-interface&#34;&gt;Spring 6 HTTP interface&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/cd/E23095_01/Platform.93/ATGProgGuide/html/s0204propertiesfileformat01.html&#34;&gt;Properties File Format&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/text/MessageFormat.html&#34;&gt;MessageFormat JavaDoc&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>