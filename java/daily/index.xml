<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-18T01:31:24Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>MoshiCoCo/Apple-Monitor</title>
    <updated>2023-09-18T01:31:24Z</updated>
    <id>tag:github.com,2023-09-18:/MoshiCoCo/Apple-Monitor</id>
    <link href="https://github.com/MoshiCoCo/Apple-Monitor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;一个用 Java 实现的 Apple 商店库存监控,支持bark,dingtalk，微信等方式推送实时库存信息。目前支持中国和日本地区。An Apple store inventory monitoring implemented in Java, supports bark, dingtalk, WeChat and other methods to push real-time inventory information. Currently supports China and Japan regions.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1 align=&#34;center&#34;&gt;AppleMonitor&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/MoshiCoCo/Apple-Monitor/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/MoshiCoCo/Apple-Monitor?style=flat-square&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/MoshiCoCo/Apple-Monitor/network&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/MoshiCoCo/Apple-Monitor?style=flat-square&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/MoshiCoCo/Apple-Monitor/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/MoshiCoCo/Apple-Monitor?style=flat-square&#34; alt=&#34;GitHub issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/MoshiCoCo/Apple-Monitor/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/MoshiCoCo/Apple-Monitor?style=flat-square&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/MoshiCoCo/Apple-Monitor/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/MoshiCoCo/Apple-Monitor/total?style=flat-square&#34; alt=&#34;GitHub All Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/MoshiCoCo/Apple-Monitor/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/MoshiCoCo/Apple-Monitor?style=flat-square&#34; alt=&#34;GitHub release (latest SemVer)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hits.seeyoufarm.com&#34;&gt;&lt;img src=&#34;https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fgithub.com%2FJunzhouLiu%2FBILIBILI-HELPER-PRE&amp;amp;count_bg=%2379C83D&amp;amp;title_bg=%23555555&amp;amp;icon=&amp;amp;icon_color=%23E7E7E7&amp;amp;title=hits&amp;amp;edge_flat=true&#34; alt=&#34;Hits&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MoshiCoCo/Apple-Monitor/main/#applemonitor&#34;&gt;AppleMonitor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MoshiCoCo/Apple-Monitor/main/#%E4%BD%BF%E7%94%A8%E6%95%88%E6%9E%9C&#34;&gt;使用效果&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MoshiCoCo/Apple-Monitor/main/#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8&#34;&gt;如何使用&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MoshiCoCo/Apple-Monitor/main/#%E6%94%AF%E6%8C%81%E7%9A%84%E6%8E%A8%E9%80%81%E6%96%B9%E5%BC%8F&#34;&gt;支持的推送方式&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MoshiCoCo/Apple-Monitor/main/#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98&#34;&gt;常见问题&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MoshiCoCo/Apple-Monitor/main/#%E5%85%B3%E6%B3%A8%E6%88%91&#34;&gt;关注我&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MoshiCoCo/Apple-Monitor/main/#%E8%87%B4%E8%B0%A2&#34;&gt;致谢&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MoshiCoCo/Apple-Monitor/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MoshiCoCo/Apple-Monitor/main/#stargazers-over-time&#34;&gt;Stargazers over time&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;AppleMonitor&lt;/h2&gt; &#xA;&lt;p&gt;一个用 Java 实现的 Apple 线下商店库存监控工具,支持bark,飞书机器人等消息推送方式。&lt;/p&gt; &#xA;&lt;p&gt;目前已经支持监控中国大陆，中国香港，中国澳门，中国台湾，日本等地区的苹果商店。&lt;/p&gt; &#xA;&lt;p&gt;Currently, it supports monitoring Apple Stores in mainland China, Hong Kong, Macau, China Taiwan, Japan and other regions.&lt;/p&gt; &#xA;&lt;h2&gt;使用效果&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MoshiCoCo/Apple-Monitor/main/docs/images/view.png&#34; alt=&#34;效果图&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;如何使用&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;下载构建的产物压缩包 &lt;a href=&#34;https://github.com/MoshiCoCo/Apple-Monitor/releases&#34;&gt;releases版本&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;解压压缩包，文件内会包含一个可执行的jar和一份config.json配置文件，以及说明文档若干。&lt;/li&gt; &#xA; &lt;li&gt;编辑config.json配置你需要监控的产品型号以及地区即可，可支持cron表达式自定义监控频率。&lt;/li&gt; &#xA; &lt;li&gt;执行命令 &lt;code&gt;java -jar apple-monitor-v0.0.9.jar&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;配置文件参数解释&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;值&lt;/th&gt; &#xA;   &lt;th&gt;含义&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cronExpressions&lt;/td&gt; &#xA;   &lt;td&gt;执行的cron表达式,建议执行时间间隔设置为 （监控的设备型号数*3）秒，如果你不会写corn表达式，建议使用程序输出的推荐表达式&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;country&lt;/td&gt; &#xA;   &lt;td&gt;需要监控的国家，目前仅支持&#34;CN&#34;，&#34;JP&#34; ，CN-MACAO，CN-HK，CN-TW&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;location&lt;/td&gt; &#xA;   &lt;td&gt;你所在的区域，要用苹果官网风格的地址，例如 广东 深圳 南山区 或者 重庆 重庆 XX区&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;deviceCodeList&lt;/td&gt; &#xA;   &lt;td&gt;Object List&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;deviceCode&lt;/td&gt; &#xA;   &lt;td&gt;需要监控的产品代码 &lt;a href=&#34;https://raw.githubusercontent.com/MoshiCoCo/Apple-Monitor/main/docs/apple-device-codes.md&#34;&gt;产品型号列表&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;storeWhiteList&lt;/td&gt; &#xA;   &lt;td&gt;商店白名单，一个区域可能有多个商店，仅监控白名单中的商店，模糊匹配，不填则默认监控所有&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pushConfigs&lt;/td&gt; &#xA;   &lt;td&gt;Object List 推送配置&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;barkPushUrl&lt;/td&gt; &#xA;   &lt;td&gt;bark推送服务器地址,默认为 &lt;a href=&#34;https://api.day.app/push&#34;&gt;https://api.day.app/push&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;barkPushToken&lt;/td&gt; &#xA;   &lt;td&gt;bark token &lt;a href=&#34;https://raw.githubusercontent.com/MoshiCoCo/Apple-Monitor/main/docs/use-bark.md&#34;&gt;获取BarkToken请参考&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;feishuBotWebhooks&lt;/td&gt; &#xA;   &lt;td&gt;飞书机器人webhook地址&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;feishuBotSecret&lt;/td&gt; &#xA;   &lt;td&gt;飞书机器人secret&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;配置文件示例&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;appleTaskConfig&#34;: {&#xA;    &#34;cronExpressions&#34;: &#34;*/12 * * * * ?&#34;,&#xA;    &#34;country&#34;: &#34;CN&#34;,&#xA;    &#34;location&#34;: &#34;广东 深圳 南山区&#34;,&#xA;    &#34;deviceCodeList&#34;: [&#xA;      {&#xA;        &#34;deviceCode&#34;: &#34;MTQA3CH/A&#34;,&#xA;        &#34;storeWhiteList&#34;: [&#xA;          &#34;益田假日&#34;&#xA;        ],&#xA;        &#34;pushConfigs&#34;: [&#xA;          {&#xA;            &#34;barkPushUrl&#34;: &#34;https://api.day.app/push&#34;,&#xA;            &#34;barkPushToken&#34;: &#34;你的token&#34;,&#xA;            &#34;feishuBotWebhooks&#34;: &#34;&#34;,&#xA;            &#34;feishuBotSecret&#34;: &#34;&#34;&#xA;          }&#xA;        ]&#xA;      },&#xA;      {&#xA;        &#34;deviceCode&#34;: &#34;MTQC3CH/A&#34;,&#xA;        &#34;storeWhiteList&#34;: [&#xA;          &#34;益田假日&#34;&#xA;        ],&#xA;        &#34;pushConfigs&#34;: [&#xA;          {&#xA;            &#34;barkPushUrl&#34;: &#34;&#34;,&#xA;            &#34;barkPushToken&#34;: &#34;&#34;,&#xA;            &#34;feishuBotWebhooks&#34;: &#34;&#34;,&#xA;            &#34;feishuBotSecret&#34;: &#34;&#34;&#xA;          }&#xA;        ]&#xA;      }&#xA;    ]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;注： 如果需要监控日本地区的情况，请将country设置为JP， location设置为你所在的区域邮编，例如：197-0804，deviceCodes设置为你需要监控的产品型号（日本版本型号），storeWhiteList设置为你需要监控的商店，例如 新宿 ，不填则默认监控所有。&lt;/p&gt; &#xA;&lt;p&gt;日本地域プロファイル参照例 &lt;a href=&#34;https://raw.githubusercontent.com/MoshiCoCo/Apple-Monitor/main/src/main/resources/config-jp.json&#34;&gt;config-jp.json&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;如何使用Bark请参考 &lt;a href=&#34;https://raw.githubusercontent.com/MoshiCoCo/Apple-Monitor/main/docs/use-bark.md&#34;&gt;Bark使用文档&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;苹果产品型号代码请参考 &lt;a href=&#34;https://raw.githubusercontent.com/MoshiCoCo/Apple-Monitor/main/docs/apple-device-codes.md&#34;&gt;产品型号列表&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;支持的推送方式&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;feishu bot&lt;/li&gt; &#xA; &lt;li&gt;bark&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;常见问题&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;如果使用 Windows 系统的CMD执行出现乱码，执行前先执行 &lt;code&gt;chcp 65001&lt;/code&gt; 这条命令。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;关注我&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MoshiCoCo/Apple-Monitor/main/docs/images/wxgzh.png&#34; alt=&#34;wechatOrCode&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;免责&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;本项目仅用于学习研究，禁止任何人用于商业及非法用途，如产生法律纠纷与本人无关。&lt;/li&gt; &#xA; &lt;li&gt;本项目为开源项目，若相关公司有异议，请邮件联系作者，作者收到邮件后会及时处理。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;致谢&lt;/h2&gt; &#xA;&lt;p&gt;感谢 JetBrains 对本项目的支持。&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.jetbrains.com/?from=Apple-Monitor&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MoshiCoCo/Apple-Monitor/main/docs/images/jetbrains.svg?sanitize=true&#34; alt=&#34;JetBrains&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;h2&gt;Stargazers over time&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/MoshiCoCo/Apple-Monitor&#34;&gt;&lt;img src=&#34;https://starchart.cc/MoshiCoCo/Apple-Monitor.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ch4mpy/spring-addons</title>
    <updated>2023-09-18T01:31:24Z</updated>
    <id>tag:github.com,2023-09-18:/ch4mpy/spring-addons</id>
    <link href="https://github.com/ch4mpy/spring-addons" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ease spring OAuth2 resource-servers configuration and testing&lt;/p&gt;&lt;hr&gt;&lt;p&gt;7.x is a break through in usability: all 6 &lt;code&gt;spring-addons&lt;/code&gt; Boot starters are merged into a single one: &lt;a href=&#34;https://repo1.maven.org/maven2/com/c4-soft/springaddons/spring-addons-starter-oidc/&#34;&gt;&lt;code&gt;com.c4-soft.springaddons:spring-addons-starter-oidc&lt;/code&gt;&lt;/a&gt;, and so are 4 of the test libs: &lt;a href=&#34;https://repo1.maven.org/maven2/com/c4-soft/springaddons/spring-addons-starter-oidc-test/&#34;&gt;&lt;code&gt;com.c4-soft.springaddons:spring-addons-starter-oidc-test&lt;/code&gt;&lt;/a&gt;. To use the test annotations without the starter, the dependency is unchanged: &lt;a href=&#34;https://repo1.maven.org/maven2/com/c4-soft/springaddons/spring-addons-oauth2-test/&#34;&gt;&lt;code&gt;com.c4-soft.springaddons:spring-addons-oauth2-test&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please follow the &lt;a href=&#34;https://github.com/ch4mpy/spring-addons/raw/master/7.0.0-migration-guide.md&#34;&gt;migration guide&lt;/a&gt; to move from &lt;code&gt;6.x&lt;/code&gt; to &lt;code&gt;7.1.8&lt;/code&gt;. There is no urge to do so on existing projects as 6.2.x patches should be published untill the end of 2023.&lt;/p&gt; &#xA;&lt;p&gt;All samples and tutorials sources are migrated to latest starter and test annotations, but some READMEs might still need a refresh. Please make sure you refer to source code for up to date configuration.&lt;/p&gt; &#xA;&lt;h1&gt;Ease OpenID Configuration &amp;amp; Tests in Spring Boot 3&lt;/h1&gt; &#xA;&lt;p&gt;The libraries hosted in this repo shine in two domains:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;providing with annotations to mock OAuth2 &lt;code&gt;Authentication&lt;/code&gt; for JUnit &lt;code&gt;@Test&lt;/code&gt; and &lt;code&gt;@ParameterizedTest&lt;/code&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;@WithMockAuthentication&lt;/code&gt; with &lt;code&gt;@AuthenticationSource&lt;/code&gt; and &lt;code&gt;@ParameterizedAuthentication&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;@WithJwt&lt;/code&gt; which uses the JWT authentication converter defined in security configuration to build the right type of &lt;code&gt;Authentication&lt;/code&gt; (with the right authorities and name) based on a JSON file on he classpath (or plain Java String&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;@WithOpaqueToken&lt;/code&gt; same as &lt;code&gt;@WithJwt&lt;/code&gt; for introspection, using the &lt;code&gt;OpaqueTokenAuthenticationConverter&lt;/code&gt; in the security configuration&lt;/li&gt; &#xA;   &lt;li&gt;more specialized annotations for specific authentication implementations (&lt;code&gt;@WithOAuth2Login&lt;/code&gt;, &lt;code&gt;@WithOidcLogin&lt;/code&gt;, etc.) or to use as elements for your own test annotations in applications using custom OAuth2 &lt;code&gt;Authentication&lt;/code&gt; implementations&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;pushing OIDC auto-configuration to the next level in Spring Boot 3 applications. As shown in &lt;strong&gt;&lt;a href=&#34;https://github.com/ch4mpy/spring-addons/tree/master/samples/tutorials&#34;&gt;Tutorials&lt;/a&gt;&lt;/strong&gt;, with 0 Java conf (just properties), we can configure: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;authorities mapping (source claims, prefix and case transformation), without having to provide authentication converter, user service or &lt;code&gt;GrantedAuthoritiesMapper&lt;/code&gt; in each app&lt;/li&gt; &#xA;   &lt;li&gt;fine grained CORS configuration (per path matcher), which enables to override allowed origins as environment variable when switching from &lt;code&gt;localhost&lt;/code&gt; to &lt;code&gt;dev&lt;/code&gt; or &lt;code&gt;prod&lt;/code&gt; environments&lt;/li&gt; &#xA;   &lt;li&gt;sessions &amp;amp; CSRF disabled by default on resource server and enabled on clients. If a cookie repo is chosen for CSRF (as required by Angular, React, Vue, etc.), then the right request handler is configured and a filter to actually set the cookie is added&lt;/li&gt; &#xA;   &lt;li&gt;basic access control: &lt;code&gt;permitAll&lt;/code&gt; for a list of path matchers and &lt;code&gt;authenticated&lt;/code&gt; as default (to be fine tuned with method security or a configuration post-processor bean)&lt;/li&gt; &#xA;   &lt;li&gt;for clients only: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;logout success handler for OPs not strictly following the standard (exotic parameter names or missing &lt;code&gt;end_session_endpoint&lt;/code&gt; in OpenID configuration). Auth0 and Amazon Cognito are samples of such OPs.&lt;/li&gt; &#xA;     &lt;li&gt;client host and port explicitly provided in login configuration to avoid &lt;a href=&#34;https://github.com/spring-projects/spring-security/issues/12307&#34;&gt;redirection issues when the client does not use 8080 (or 8443 if SSL is enabled)&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;add custom params to authorization-code request (like the &lt;code&gt;audience&lt;/code&gt; required by Auth0). This parameters are defined in application properties for each client registration.&lt;/li&gt; &#xA;     &lt;li&gt;multi-tenancy: allow users to be logged in with more than one OpenID Provider and keep track of their different &lt;code&gt;Authentication&lt;/code&gt; instances (one per OP, with most probably different &lt;code&gt;subject&lt;/code&gt; and user name).&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Jump to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ch4mpy/spring-addons/master/#drawbacks&#34;&gt;0. Risks Of Using This Libs And Mitigations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ch4mpy/spring-addons/master/#oidc-starter&#34;&gt;1. Spring Boot OIDC Starter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ch4mpy/spring-addons/master/#unit-tests&#34;&gt;2. Unit &amp;amp; Integration Testing With Security&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ch4mpy/spring-addons/master/#start&#34;&gt;3. Where to Start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ch4mpy/spring-addons/master/#versions&#34;&gt;4. Versions &amp;amp; Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ch4mpy/spring-addons/master/#release-notes&#34;&gt;5. Release Notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ch4mpy/spring-addons/master/#maven-central&#34;&gt;6. Maven-Central Reminders&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;0. &lt;a name=&#34;drawbacks&#34;&gt;&lt;/a&gt;Risks Of Using This Libs And Mitigations&lt;/h2&gt; &#xA;&lt;p&gt;Neither the owner of this repo nor any of the contributors are part of Spring Security team. At best, some are occasional contributors to the &#34;official&#34; framework.&lt;/p&gt; &#xA;&lt;p&gt;However, unless you have a deep knowledge of Spring Security for OAuth2, using &lt;code&gt;spring-addons-starter-oidc&lt;/code&gt; might actually be safer than experimenting with the conf by yourself. And the more popularity this repo gets, the safer it is: more people detect potential issues, more people can keep it alive if its initiator disapears and, if some features where to become popular enough, Spring team could consider pulling it in the official framework.&lt;/p&gt; &#xA;&lt;p&gt;Also, all you have to do to opt-out &lt;code&gt;spring-addons-starter-oidc&lt;/code&gt; at any point in time is writing Spring Security Configuration by yourself. Refer to tutorials if you need some guidance to do that, the following are written without &lt;code&gt;spring-addons-starter-oidc&lt;/code&gt; (just &lt;code&gt;spring-boot-starter-oauth2-client&lt;/code&gt; or &lt;code&gt;spring-boot-starter-oauth2-resource-server&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ch4mpy/spring-addons/tree/master/samples/tutorials/reactive-client&#34;&gt;reactive-client&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ch4mpy/spring-addons/tree/master/samples/tutorials/reactive-resource-server&#34;&gt;reactive-resource-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ch4mpy/spring-addons/tree/master/samples/tutorials/servlet-client&#34;&gt;servlet-client&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ch4mpy/spring-addons/tree/master/samples/tutorials/servlet-resource-server&#34;&gt;servlet-resource-server&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;What are the identified risks of using the resources from such a repo and how can you protect against it?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;what if the updates to latest dependencies stop and no PR are merged anymore?&lt;/em&gt; You can fork this repo and start a new branch from the last tag you like&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;what if the library takes a direction I don&#39;t like?&lt;/em&gt; Same as for a stale repo&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;what if the owner deletes this repo or makes it private?&lt;/em&gt; The source code for each release is published to maven-central. You can get the source &lt;a href=&#34;https://repo1.maven.org/maven2/com/c4-soft/springaddons/&#34;&gt;there&lt;/a&gt; or from any of the forks on Github (about 50 in August 2023).&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;what is the risk of vulnerabilities introduced by the code in this libs?&lt;/em&gt; This depends on the lib: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;libs to be used during tests (&lt;code&gt;spring-addons-oauth2-test&lt;/code&gt; and &lt;code&gt;spring-addons-starter-oidc-test&lt;/code&gt;) should be imported with &lt;code&gt;test&lt;/code&gt; scope =&amp;gt; it should not be present at runtime =&amp;gt; no risk in production&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;spring-addons-starter-oidc&lt;/code&gt; does some auto-configuration for you: it defines Spring beans involved in your application security. So yes, if a default is missconfigured in this lib, it can have an impact on your app. You should however consider that: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;an increasing number of user inspect it and open issues or PRs when detecting a problem (the community is probably much bigger than your team working at detecting Spring Security configuration issues in your own projects)&lt;/li&gt; &#xA;     &lt;li&gt;having code centralised at one place and reused at many places reduces the risk of a careless mistake in one of your app&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;1. &lt;a name=&#34;oidc-starter&#34;&gt;&lt;/a&gt;Spring Boot Starter&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;This starters is designed to push auto-configuration to the next level&lt;/strong&gt; and does nothing more than helping you to configure Spring Security beans using application properties.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;spring-addons-oidc-starter&lt;/code&gt; does not replace &lt;code&gt;spring-boot-starter-oauth2-resource-server&lt;/code&gt; and &lt;code&gt;spring-boot-starter-oauth2-client&lt;/code&gt;, it uses application properties to configure a few beans designed to be picked by Spring Boot official &#34;starters&#34;. The aim is to reduce Java code and ease application deployment across environments. In most cases, you should need 0 Java conf. An effort was made to make &lt;a href=&#34;https://github.com/ch4mpy/spring-addons/tree/master/samples/tutorials&#34;&gt;tutorials&lt;/a&gt;, Javadoc as informative as possible. Please refer there for more details.&lt;/p&gt; &#xA;&lt;p&gt;If you are curious enough, you might inspect what is auto-configured (and under which conditions) by reading the source code, starting from the &lt;a href=&#34;https://github.com/ch4mpy/spring-addons/raw/master/spring-addons-starter-oidc/src/main/resources/META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports&#34;&gt;org.springframework.boot.autoconfigure.AutoConfiguration.imports&lt;/a&gt; file, which is the Spring Boot standard entry-point defining what is loaded when a jar is on the classpath.&lt;/p&gt; &#xA;&lt;p&gt;You can refer to &lt;a href=&#34;https://sourcespy.com/github/ch4mpyspringaddons/&#34;&gt;module, dependency, class and other diagrams&lt;/a&gt; for a general overview of the repository.&lt;/p&gt; &#xA;&lt;h3&gt;1.1. Usage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you are not absolutely sure why you need an OAuth2 client (with &lt;code&gt;oauth2Login&lt;/code&gt; in Spring, but secured with sessions, not access tokens) or an OAuth2 resource server configuration (secured with access tokens, not sessions, but without &lt;code&gt;oauth2Login&lt;/code&gt;), please read the &lt;a href=&#34;https://github.com/ch4mpy/spring-addons/tree/master/samples/tutorials#1-oauth2-essentials&#34;&gt;OAuth2 essentials section&lt;/a&gt; of the tutorials.&lt;/strong&gt; This might save you a lot of time and effort.&lt;/p&gt; &#xA;&lt;p&gt;Add &lt;code&gt;com.c4-soft.springaddons:spring-addons-starter-oidc&lt;/code&gt; to your dependencies, in addition to &lt;code&gt;org.springframework.boot:spring-boot-starter-oauth2-client&lt;/code&gt; or &lt;code&gt;org.springframework.boot:spring-boot-starter-oauth2-resource-server&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If configuring an Outh2 client (with &lt;code&gt;oauth2Login&lt;/code&gt;), define the standard Spring Boot &lt;code&gt;provider&lt;/code&gt; and &lt;code&gt;registration&lt;/code&gt; properties for OAuth2 clients.&lt;/p&gt; &#xA;&lt;p&gt;If configuring an OAuth2 resource server with access token introspection, define the standard Spring Boot &lt;code&gt;opaquetoken&lt;/code&gt; properties.&lt;/p&gt; &#xA;&lt;p&gt;Then, define the relevant &lt;code&gt;com.c4-soft.springaddons.oidc&lt;/code&gt; properties for your use case. There are many complete &lt;a href=&#34;https://github.com/ch4mpy/spring-addons/tree/master/samples&#34;&gt;samples&lt;/a&gt; and &lt;a href=&#34;https://github.com/ch4mpy/spring-addons/tree/master/samples/tutorials&#34;&gt;tutorials&lt;/a&gt; you should refer to, but here are a few demos for different use-cases and OpenID Providers:&lt;/p&gt; &#xA;&lt;h4&gt;1.1.1. Resource Server with JWT decoder&lt;/h4&gt; &#xA;&lt;p&gt;For a REST API secured with JWT access tokens, you need:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;&#x9;&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&#xA;&#x9;&amp;lt;!-- For a reactive application, use spring-boot-starter-webflux instead --&amp;gt;&#xA;&#x9;&amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&amp;lt;dependency&amp;gt;&#xA;&#x9;&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&#xA;&#x9;&amp;lt;artifactId&amp;gt;spring-boot-starter-oauth2-resource-server&amp;lt;/artifactId&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&#xA;&amp;lt;dependency&amp;gt;&#xA;&#x9;&amp;lt;groupId&amp;gt;com.c4-soft.springaddons&amp;lt;/groupId&amp;gt;&#xA;&#x9;&amp;lt;artifactId&amp;gt;spring-addons-starter-oidc&amp;lt;/artifactId&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;com:&#xA;  c4-soft:&#xA;    springaddons:&#xA;      oidc:&#xA;        ops:&#xA;        - iss: https://oidc.c4-soft.com/auth/realms/master&#xA;          username-claim: preferred_username&#xA;          authorities:&#xA;          - path: $.realm_access.roles&#xA;          - path: $.resource_access.*.roles&#xA;        resourceserver:&#xA;          permit-all:&#xA;          - &#34;/greet/public&#34;&#xA;          cors:&#xA;          - path: /**&#xA;            allowed-origin-patterns: http://localhost:4200&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Above configuration will create an application without sessions nor CSRF protection, and 401 will be answered to unauthorized requests to protected resources.&lt;/p&gt; &#xA;&lt;h4&gt;1.1.2. Client&lt;/h4&gt; &#xA;&lt;p&gt;For an app serving Thymeleaf templates with login and logout:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;&#x9;&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&#xA;&#x9;&amp;lt;!-- For a reactive application, use spring-boot-starter-webflux instead --&amp;gt;&#xA;&#x9;&amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&amp;lt;dependency&amp;gt;&#xA;&#x9;&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&#xA;&#x9;&amp;lt;artifactId&amp;gt;spring-boot-starter-thymeleaf&amp;lt;/artifactId&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&amp;lt;dependency&amp;gt;&#xA;&#x9;&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&#xA;&#x9;&amp;lt;artifactId&amp;gt;spring-boot-starter-oauth2-client&amp;lt;/artifactId&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&#xA;&amp;lt;dependency&amp;gt;&#xA;&#x9;&amp;lt;groupId&amp;gt;com.c4-soft.springaddons&amp;lt;/groupId&amp;gt;&#xA;&#x9;&amp;lt;artifactId&amp;gt;spring-addons-starter-oidc&amp;lt;/artifactId&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cognito-issuer: https://cognito-idp.us-west-2.amazonaws.com/us-west-2_RzhmgLwjl&#xA;cognito-client-id: change-me&#xA;cognito-secret: change-me&#xA;&#xA;spring:&#xA;  security:&#xA;    oauth2:&#xA;      client:&#xA;        provider:&#xA;          cognito:&#xA;            issuer-uri: ${cognito-issuer}&#xA;        registration:&#xA;          cognito-authorization-code:&#xA;            authorization-grant-type: authorization_code&#xA;            client-id: ${cognito-client-id}&#xA;            client-secret: ${cognito-secret}&#xA;            provider: cognito&#xA;            scope: openid,profile,email,offline_access&#xA;com:&#xA;  c4-soft:&#xA;    springaddons:&#xA;      oidc:&#xA;        ops:&#xA;        - iss: ${cognito-issuer}&#xA;          username-claim: username&#xA;          authorities:&#xA;          - path: cognito:groups&#xA;        client:&#xA;          security-matchers:&#xA;          - /**&#xA;          permit-all:&#xA;          - /login/**&#xA;          - /oauth2/**&#xA;          - /&#xA;          # Auth0 and Cognito do not follow strictly the OpenID RP-Initiated Logout spec and need specific configuration&#xA;          oauth2-logout:&#xA;            cognito-authorization-code:&#xA;              uri: https://spring-addons.auth.us-west-2.amazoncognito.com/logout&#xA;              client-id-request-param: client_id&#xA;              post-logout-uri-request-param: logout_uri&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Above configuration will create an application secured with sessions (not access tokens), with CSRF protection enabled, and unauthorized requests to protected resources will be redirected to login.&lt;/p&gt; &#xA;&lt;h4&gt;1.1.3. Client and Resource Server&lt;/h4&gt; &#xA;&lt;p&gt;For an app exposing publicly both&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Thymeleaf templates secured with session (with login and logout), all templates being served with &lt;code&gt;/ui&lt;/code&gt; prefix (but index which is at &lt;code&gt;/&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;a REST API secured with access token&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;&#x9;&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&#xA;&#x9;&amp;lt;!-- In a reactive application, use only spring-boot-starter-webflux --&amp;gt;&#xA;&#x9;&amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&amp;lt;dependency&amp;gt;&#xA;&#x9;&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&#xA;&#x9;&amp;lt;!-- Used for WebClient to call the REST API from controllers serving Thymeleaf templates --&amp;gt;&#xA;&#x9;&amp;lt;artifactId&amp;gt;spring-boot-starter-webflux&amp;lt;/artifactId&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&amp;lt;dependency&amp;gt;&#xA;&#x9;&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&#xA;&#x9;&amp;lt;artifactId&amp;gt;spring-boot-starter-thymeleaf&amp;lt;/artifactId&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&amp;lt;dependency&amp;gt;&#xA;&#x9;&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&#xA;&#x9;&amp;lt;artifactId&amp;gt;spring-boot-starter-oauth2-client&amp;lt;/artifactId&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&amp;lt;dependency&amp;gt;&#xA;&#x9;&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&#xA;&#x9;&amp;lt;artifactId&amp;gt;spring-boot-starter-oauth2-resource-server&amp;lt;/artifactId&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&#xA;&amp;lt;dependency&amp;gt;&#xA;&#x9;&amp;lt;groupId&amp;gt;com.c4-soft.springaddons&amp;lt;/groupId&amp;gt;&#xA;&#x9;&amp;lt;artifactId&amp;gt;spring-addons-starter-oidc&amp;lt;/artifactId&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;auth0-issuer: https://oidc.c4-soft.com/auth/realms/master&#xA;auth0-client-id: change-me&#xA;auth0-secret: change-me&#xA;&#xA;spring:&#xA;  security:&#xA;    oauth2:&#xA;      client:&#xA;        provider:&#xA;          auth0:&#xA;            issuer-uri: ${auth0-issuer}&#xA;        registration:&#xA;          auth0-authorization-code:&#xA;            authorization-grant-type: authorization_code&#xA;            client-id: ${auth0-client-id}&#xA;            client-secret: ${auth0-secret}&#xA;            provider: auth0&#xA;            scope: openid,profile,email,offline_access&#xA;com:&#xA;  c4-soft:&#xA;    springaddons:&#xA;      oidc:&#xA;        ops:&#xA;        - iss: ${auth0-issuer}&#xA;          username-claim: $[&#39;https://c4-soft.com/user&#39;][&#39;name&#39;]&#xA;          authorities:&#xA;          - path: $[&#39;https://c4-soft.com/user&#39;][&#39;roles&#39;]&#xA;          - path: $.permissions&#xA;        client:&#xA;          security-matchers:&#xA;          - /login/**&#xA;          - /oauth2/**&#xA;          - /logout&#xA;          - /&#xA;          - /ui/**&#xA;          permit-all:&#xA;          - /login/**&#xA;          - /oauth2/**&#xA;          - /&#xA;          # Auth0 and Cognito do not follow strictly the OpenID RP-Initiated Logout spec and need specific configuration&#xA;          oauth2-logout:&#xA;            auth0-authorization-code:&#xA;              uri: ${auth0-issuer}v2/logout&#xA;              client-id-request-param: client_id&#xA;              post-logout-uri-request-param: returnTo&#xA;          # Auth0 requires an &#34;audience&#34; parameter in authorization-code request to deliver JWTs&#xA;          authorization-request-params:&#xA;            auth0-authorization-code:&#xA;            - name: audience&#xA;              value: demo.c4-soft.com&#xA;        resourceserver:&#xA;          permit-all:&#xA;          - &#34;/greet/public&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the above configuration, two distinct security filter-chains will be defined:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a client one with sessions (and CSRF protection enabled), intercepting all requests to UI templates as well as those involved in login and logout, and redirecting to login unauthorized requests to protected templates.&lt;/li&gt; &#xA; &lt;li&gt;a resource server one acting as default (with lowest precedence to process all requests that were not matched with client filter-chain &lt;code&gt;securityMatchers&lt;/code&gt;), without sessions (requests are secured with JWT access tokens) nor CSRF protections, and returning 401 to unauthorized requests to protected resources.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.2. Customizing Auto-Configuration&lt;/h3&gt; &#xA;&lt;p&gt;First use your IDE auto-completion to check if there isn&#39;t an existing application property covering your needs: a lot is configurable from properties, and all properties are documented.&lt;/p&gt; &#xA;&lt;p&gt;You can override about any &lt;code&gt;@Bean&lt;/code&gt; defined by spring-addons (almost all are &lt;code&gt;@ConditionalOnMissingBean&lt;/code&gt;). Here are a few handy ones:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;(Reactive)JwtAbstractAuthenticationTokenConverter&lt;/code&gt;: take control on the &lt;code&gt;Authentication&lt;/code&gt; instance built after a JWT was successfully decoded and validated&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(Reactive)OpaqueTokenAuthenticationConverter&lt;/code&gt;: take control on the &lt;code&gt;Authentication&lt;/code&gt; instance built after an access token was successfully introspected&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ClaimSetAuthoritiesConverter&lt;/code&gt;: opt-out the &lt;code&gt;ConfigurableClaimSetAuthoritiesConverter&lt;/code&gt;, responsible for authorities mapping&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GrantedAuthoritiesMapper&lt;/code&gt;: in OAuth2 clients, opt-out the default &lt;code&gt;GrantedAuthoritiesMapper&lt;/code&gt; (which delegates authorities mapping to the &lt;code&gt;ConfigurableClaimSetAuthoritiesConverter&lt;/code&gt; just above)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(Reactive)AuthenticationManagerResolver&lt;/code&gt;: opt-out the authentication manager implementing static multi-tenancy for resource servers with JWT decoders&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ResourceServerAuthorizeExchangeSpecPostProcessor&lt;/code&gt;, &lt;code&gt;ClientAuthorizeExchangeSpecPostProcessor&lt;/code&gt;, &lt;code&gt;ClientAuthorizeExchangeSpecPostProcessor&lt;/code&gt; or &lt;code&gt;ResourceServerAuthorizeExchangeSpecPostProcessor&lt;/code&gt;: fine grained access control from configuration (an alternative is using &lt;code&gt;@Enable(Reactive)MethodSecurity&lt;/code&gt; and &lt;code&gt;@PreAuthorize&lt;/code&gt; on controller methods)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ResourceServerHttpSecurityPostProcessor&lt;/code&gt; or &lt;code&gt;ClientHttpSecurityPostProcessor&lt;/code&gt;: post-process spring-addons auto-configured &lt;code&gt;SecurityFilterChains&lt;/code&gt; (this enables to change absolutely anything from it).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.3. Disabling &lt;code&gt;spring-addons-oidc-starter&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The easiest way is to exclude it from the classpath, but you may also turn the auto-configuration off by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;setting &lt;code&gt;com.c4-soft.springaddons.oidc.resourceserver.enabled&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; (this disables the resource server &lt;code&gt;SecurityFilterChain&lt;/code&gt; bean instantiation, as well as all of its default dependencies)&lt;/li&gt; &#xA; &lt;li&gt;leaving &lt;code&gt;com.c4-soft.springaddons.oidc.client.securityMatcher&lt;/code&gt; empty (this disables the client &lt;code&gt;SecurityFilterChain&lt;/code&gt; bean instantiation, as well as all of its default dependencies)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;2. &lt;a name=&#34;unit-tests&#34;&gt;&lt;/a&gt;Unit &amp;amp; Integration Testing With Security&lt;/h2&gt; &#xA;&lt;p&gt;Testing method security (&lt;code&gt;@PreAuthorize&lt;/code&gt;, &lt;code&gt;@PostFilter&lt;/code&gt;, etc.) requires to configure the security context. &lt;code&gt;Spring-security-test&lt;/code&gt; provides with &lt;code&gt;MockMvc&lt;/code&gt; request post-processors and &lt;code&gt;WebTestClient&lt;/code&gt; mutators to do so, but this requires the context of a request, which limits its usage to testing secured controllers.&lt;/p&gt; &#xA;&lt;p&gt;To test method security on any type of &lt;code&gt;@Component&lt;/code&gt; (&lt;code&gt;@Controller&lt;/code&gt;, off course, but also &lt;code&gt;@Service&lt;/code&gt; and &lt;code&gt;@Repository&lt;/code&gt;) there are only two options: build tests security context by yourself and populate it with stubbed / mocked authentications, or use annotations to do it for you. &lt;strong&gt;This lib conatins annotations to configure test security context with OAuth2 authentication at your hand.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;An &lt;a href=&#34;https://www.baeldung.com/spring-oauth-testing-access-control&#34;&gt;article covering the usage of OAuth2 test annotations from this lib&lt;/a&gt; was published on Baeldung. This, along with all &lt;a href=&#34;https://github.com/ch4mpy/spring-addons/tree/master/samples&#34;&gt;samples&lt;/a&gt; and &lt;a href=&#34;https://github.com/ch4mpy/spring-addons/tree/master/samples/tutorials&#34;&gt;tutorials&lt;/a&gt; source-code (which contain a lot of unit and integration testing), should be enough to get you started.&lt;/p&gt; &#xA;&lt;p&gt;However, since this article was published, test annotations have improved.&lt;/p&gt; &#xA;&lt;h3&gt;2.1. Sample&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s consider the following secured &lt;code&gt;@Service&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Service&#xA;public class SecuredService {&#xA;    @PreAuthorize(&#34;hasAuthority(&#39;NICE&#39;)&#34;)&#xA;    String nice() {&#xA;        return &#34;Dear %s, glad to see you!&#34;.formatted(SecurityContextHolder.getContext().getAuthentication().getName());&#xA;    }&#xA;    &#xA;    @PreAuthorize(&#34;isAuthenticated()&#34;)&#xA;    String hello() {&#xA;        return &#34;Hello %s.&#34;.formatted(SecurityContextHolder.getContext().getAuthentication().getName());&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, let&#39;s assume that you have a staging environment with a few representative users (&#34;personas&#34; if you are familiar with UX), for which you can get sample access tokens, and dump the claims in JSON files in test resources in (by decoding JWTs with a tool like &lt;a href=&#34;https://jwt.io&#34;&gt;https://jwt.io&lt;/a&gt; or introspecting opaque tokens). In the following, we&#39;ll consider you have a user named &lt;code&gt;brice&lt;/code&gt; with &lt;code&gt;NICE&lt;/code&gt; authority and another one named &lt;code&gt;igor&lt;/code&gt; without the &lt;code&gt;NICE&lt;/code&gt; authority. We&#39;ll also consider you have dumped sample claim-sets in &lt;code&gt;brice.json&lt;/code&gt; and &lt;code&gt;igor.json&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;2.1.1. Using &lt;code&gt;@WithMockAuthentication&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;When testing RBAC (role-based access control), defining just authorities is frequently enough. Sometimes, defining the &lt;code&gt;Authentication#name&lt;/code&gt; is necessary and in a few cases, application code needs a specific &lt;code&gt;Authentication&lt;/code&gt; implementation. &lt;code&gt;@WithMockAuthentication&lt;/code&gt; was designed to meet this requirements:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@SpringBootTest(classes = { SecurityConfig.class, MessageService.class })&#xA;class MessageServiceTests {&#xA;&#xA;&#x9;@Autowired&#xA;&#x9;private SecuredService securedService;&#xA;&#x9;&#xA;&#x9;@Test&#xA;&#x9;@WithMockAuthentication(&#34;BAD_BOY&#34;)&#xA;&#x9;void givenUserIsNotGrantedWithNice_whenCallNice_thenThrows() {&#xA;&#x9;&#x9;assertThrows(Exception.class, () -&amp;gt; securedService.nice());&#xA;&#x9;}&#xA;&#xA;&#x9;@Test&#xA;&#x9;@WithMockAuthentication(name = &#34;brice&#34;, authorities = &#34;NICE&#34;)&#xA;&#x9;void givenUserIsNice_whenCallNice_thenReturnsGreeting() {&#xA;&#x9;&#x9;assertThat(securedService.nice()).isEqualTo(&#34;Dear brice, glad to see you!&#34;);&#xA;&#x9;}&#xA;&#xA;&#x9;@ParameterizedTest&#xA;&#x9;@AuthenticationSource(&#xA;&#x9;    @WithMockAuthentication(name = &#34;brice&#34;, authorities = &#34;NICE&#34;),&#xA;&#x9;    @WithMockAuthentication(name = &#34;ch4mp&#34;, authorities = { &#34;VERY_NICE&#34;, &#34;AUTHOR&#34; }))&#xA;&#x9;void givenUserIsAuthenticated_whenCallHello_thenReturnsGreeting(@ParameterizedAuthentication Authentication auth) {&#xA;&#x9;&#x9;assertThat(securedService.hello()).isEqualTo(&#34;Hello %s.&#34;.formatted(auth.getName()));&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2.1.1. Using &lt;code&gt;@WithJwt&lt;/code&gt; or &lt;code&gt;@WithOpaqueToken&lt;/code&gt; with JSON claim-sets&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;@WithJwt&lt;/code&gt; and &lt;code&gt;@WithOpaqueToken&lt;/code&gt; enable to load those claim-sets and turn it into &lt;code&gt;Authentication&lt;/code&gt; instances using the authentication converter from your security configuration, and as so, with the same type, authorities, name and claims as at runtime.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@AddonsWebmvcComponentTest // omit if you&#39;re not using the starter, this loads a minimal subset of spring-addons security conf&#xA;@SpringBootTest(classes = { SecurityConfig.class, MessageService.class })&#xA;class MessageServiceTests {&#xA;&#xA;&#x9;@Autowired&#xA;&#x9;private SecuredService securedService;&#xA;&#xA;&#x9;@Autowired&#xA;&#x9;WithJwt.AuthenticationFactory authFactory;&#xA;&#x9;&#xA;&#x9;@Test&#xA;&#x9;@WithJwt(&#34;igor.json&#34;)&#xA;&#x9;void givenUserIsIgor_whenCallNice_thenThrows() {&#xA;&#x9;&#x9;assertThrows(Exception.class, () -&amp;gt; securedService.nice());&#xA;&#x9;}&#xA;&#xA;&#x9;@Test&#xA;&#x9;@WithJwt(&#34;brice.json&#34;)&#xA;&#x9;void givenUserIsBrice_whenCallNice_thenReturnsGreeting() {&#xA;&#x9;&#x9;assertThat(securedService.nice()).isEqualTo(&#34;Dear brice, glad to see you!&#34;);&#xA;&#x9;}&#xA;&#xA;&#x9;@ParameterizedTest&#xA;&#x9;@MethodSource(&#34;identities&#34;)&#xA;&#x9;void givenUserIsAuthenticated_whenCallHello_thenReturnsGreeting(@ParameterizedAuthentication Authentication auth) {&#xA;&#x9;&#x9;assertThat(securedService.hello()).isEqualTo(&#34;Hello %s.&#34;.formatted(auth.getName()));&#xA;&#x9;}&#xA;&#xA;&#x9;Stream&amp;lt;AbstractAuthenticationToken&amp;gt; identities() {&#xA;&#x9;&#x9;return authFactory.authenticationsFrom(&#34;brice.json&#34;, &#34;igor.json&#34;);&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are we few things worth noting above:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;we are testing a &lt;code&gt;@Service&lt;/code&gt; having methods decorated with &lt;code&gt;@PreAuthorize&lt;/code&gt;, without &lt;code&gt;MockMvc&lt;/code&gt; or &lt;code&gt;WebTestClient&lt;/code&gt; (and their request post-processors or mutators)&lt;/li&gt; &#xA; &lt;li&gt;authorities and username will be coherent with claims during tests (it is not necessarily the case when we declare the 3 separately as done with MockMvc request post-processors and WebTestClient mutators). &lt;code&gt;WithJwt.AuthenticationFactory&lt;/code&gt; uses the JWT authorities converter found in security configuration. As a consequence, &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;authorities&lt;/code&gt; are resolved from claims, just as it is at runtime.&lt;/li&gt; &#xA; &lt;li&gt;the claims are loaded from a JSON files in the test classpath&lt;/li&gt; &#xA; &lt;li&gt;we are using JUnit 5 &lt;code&gt;@ParameterizedTest&lt;/code&gt;: the test will run once for each of the authentication in the stream provided by the &lt;code&gt;identities&lt;/code&gt; method&lt;/li&gt; &#xA; &lt;li&gt;annotations fit so well with BDD (given-when-then): the test pre-conditions (given) are decorating the test instead of cluttering its content like MockMvc request post-processors and WebTestClient mutators do&lt;/li&gt; &#xA; &lt;li&gt;annotations can be very brief and expressive&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2.2. Which Dependency / Annotation to Use&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;spring-addons-oauth2-test&lt;/code&gt; is enough to use test annotations, but if you opted for &lt;code&gt;spring-addons-starter-oidc&lt;/code&gt;, then &lt;code&gt;spring-addons-starter-oidc-test&lt;/code&gt; is better suited as it comes with tooling to load spring-addons auto-configuration during tests (refer to the many samples for usage).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;@WithMockAuthentication&lt;/code&gt; should be enough to test applications with RBAC (role-based access control): it allows to easily define &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;authorities&lt;/code&gt;, as well as the Authentication an principal types to mock if your application code expects something specific.&lt;/p&gt; &#xA;&lt;p&gt;In case your access-control uses more than just name and authorities, you&#39;ll probably need to define claim-set details. In this case, &lt;code&gt;@WithJwt&lt;/code&gt; and &lt;code&gt;@WithOpaqueToken&lt;/code&gt; can come pretty handy as it uses respectively the JWT or OpaqueToken authentication converter in your security configuration to build the authentication instance, using a JSON payload from the classpath (or a plain Java String): you might just dump payloads of access tokens for representative users in test resources (use a tool like &lt;a href=&#34;https://jwt.io&#34;&gt;https://jwt.io&lt;/a&gt; to easily get those payloads). This starters are designed to push auto-configuration one step further. In most cases, you should need 0 Java conf. An effort was made to make &lt;a href=&#34;https://github.com/ch4mpy/spring-addons/tree/master/samples/tutorials&#34;&gt;tutorials&lt;/a&gt;, Javadoc and modules READMEs as informative as possible. Please refer there for more details. Additionally refer to &lt;a href=&#34;https://sourcespy.com/github/ch4mpyspringaddons/&#34;&gt;module, dependency, class and other diagrams&lt;/a&gt; for a general overview of the repository.&lt;/p&gt; &#xA;&lt;h2&gt;3. &lt;a name=&#34;start&#34;&gt;&lt;/a&gt;Where to Start&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ch4mpy/spring-addons/tree/master/samples/tutorials&#34;&gt;Tutorials&lt;/a&gt; which cover:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;just enough OAuth2 theory&lt;/li&gt; &#xA; &lt;li&gt;dev environment configuration (SSL certificate, Keycloak)&lt;/li&gt; &#xA; &lt;li&gt;various resource-servers security configuration scenarios&lt;/li&gt; &#xA; &lt;li&gt;security rules unit-testing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ch4mpy/spring-addons/tree/master/samples&#34;&gt;Samples&lt;/a&gt; cover:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;@Controller&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt; and &lt;code&gt;@Repository&lt;/code&gt; &lt;strong&gt;unit testing&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;integration testing&lt;/strong&gt; (&lt;code&gt;@SpringBootTest&lt;/code&gt;) with mocked authentication&lt;/li&gt; &#xA; &lt;li&gt;all combinations with choices from the following 3 points: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;webmvc / webflux&lt;/li&gt; &#xA;   &lt;li&gt;JWT decoder / access token introspection&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;OAuthentication&amp;lt;OpenidClaimSet&amp;gt;&lt;/code&gt; / Spring default &lt;code&gt;Authentication&lt;/code&gt; implementation (&lt;code&gt;JwtAuthenticationToken&lt;/code&gt; for JWT decoder or &lt;code&gt;BearerTokenAuthentication&lt;/code&gt; for token introspection)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4. &lt;a name=&#34;versions&#34;&gt;&lt;/a&gt;Versions &amp;amp; Requirements&lt;/h2&gt; &#xA;&lt;p&gt;6.x and 7.X branch are designed for spring-boot 3 and requires JDK 17 as minimum.&lt;/p&gt; &#xA;&lt;p&gt;I could forget to update README before releasing, so please refer to &lt;a href=&#34;https://repo1.maven.org/maven2/com/c4-soft/springaddons/spring-addons/&#34;&gt;maven central&lt;/a&gt; to pick latest available release&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;properties&amp;gt;&#xA;        &amp;lt;springaddons.version&amp;gt;7.1.8&amp;lt;/springaddons.version&amp;gt;&#xA;    &amp;lt;/properties&amp;gt;&#xA;    &amp;lt;dependencies&amp;gt;&#xA;&#xA;        &amp;lt;!-- to pull addons stater with its companion for unit-tests --&amp;gt;&#xA;        &amp;lt;dependency&amp;gt;&#xA;            &amp;lt;groupId&amp;gt;com.c4-soft.springaddons&amp;lt;/groupId&amp;gt;&#xA;            &amp;lt;artifactId&amp;gt;spring-addons-starter-oidc&amp;lt;/artifactId&amp;gt;&#xA;            &amp;lt;version&amp;gt;${springaddons.version}&amp;lt;/version&amp;gt;&#xA;        &amp;lt;/dependency&amp;gt;&#xA;        &amp;lt;dependency&amp;gt;&#xA;            &amp;lt;groupId&amp;gt;com.c4-soft.springaddons&amp;lt;/groupId&amp;gt;&#xA;            &amp;lt;artifactId&amp;gt;spring-addons-starter-oidc-test&amp;lt;/artifactId&amp;gt;&#xA;            &amp;lt;version&amp;gt;${springaddons.version}&amp;lt;/version&amp;gt;&#xA;            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&#xA;        &amp;lt;/dependency&amp;gt;&#xA;&#xA;        &amp;lt;!-- If you don&#39;t want to use the starter but need test annotations --&amp;gt;&#xA;        &amp;lt;dependency&amp;gt;&#xA;            &amp;lt;groupId&amp;gt;com.c4-soft.springaddons&amp;lt;/groupId&amp;gt;&#xA;            &amp;lt;artifactId&amp;gt;spring-addons-oauth2-test&amp;lt;/artifactId&amp;gt;&#xA;            &amp;lt;version&amp;gt;${springaddons.version}&amp;lt;/version&amp;gt;&#xA;            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&#xA;        &amp;lt;/dependency&amp;gt;&#xA;&#xA;    &amp;lt;/dependencies&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;5. &lt;a name=&#34;release-notes&#34;&gt;&lt;/a&gt;Release Notes&lt;/h2&gt; &#xA;&lt;p&gt;2.0 comes with a noticeable amount of breaking changes. So lets start tracking features.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ch4mpy/spring-addons/master/#release-notes-7&#34;&gt;&lt;code&gt;7.x&lt;/code&gt; Branch&lt;/a&gt; contains a single starter for all scenarios (reactive / servlet, client / resource server, JWT decoder / introspection). Compatible with Spring 6.1.x (Boot 3.1.x) and as so requires JDK 17 or above.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ch4mpy/spring-addons/master/#release-notes-6&#34;&gt;&lt;code&gt;6.x&lt;/code&gt; Branch&lt;/a&gt; contains 6 different starters &lt;code&gt;spring-addons-{webmvc|webflux}-{jwt-resource-server|introspecting-resource-server|client}&lt;/code&gt;. Compatible with Spring 6.1.x (Boot 3.1.x) and as so requires JDK 17 or above.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ch4mpy/spring-addons/master/#release-notes-5&#34;&gt;&lt;code&gt;5.x&lt;/code&gt; Branch&lt;/a&gt; is compatible with Spring 5, Boot 2, Keycloak adapters for Spring and JDKs down to 1.8 but is not maintained anymore.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;5.1. &lt;a name=&#34;release-notes-7&#34;&gt;&lt;/a&gt;&lt;code&gt;7.x&lt;/code&gt; Branch&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;7.1.8&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fix servlet resource server with introspection auto-configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;7.1.7&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Enable to configure post-login and post-logout host (defaulted to client URI for backward compatibility)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;7.1.5&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Spring Boot 3.1.3&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;7.1.4&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ch4mpy/spring-addons/issues/144&#34;&gt;gh-144&lt;/a&gt; remove useless dependency on spring-session.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;7.1.1&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Remove Back-Channel Logout experimental support. Follow the &lt;a href=&#34;https://github.com/spring-projects/spring-security/pull/12570&#34;&gt;PR on Spring Security&lt;/a&gt; for official support.&lt;/li&gt; &#xA; &lt;li&gt;Multi-tenancy support on OAuth2 clients is now optional and disabled by default. Set &lt;code&gt;com.c4-soft.springaddons.oidc.client.multi-tenancy-enabled=true&lt;/code&gt; to keep it activated.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ch4mpy/spring-addons/issues/140&#34;&gt;gh-140&lt;/a&gt;: use AOP instead of custom authorized-client repositories to support multi-tenancy on OAuth2 clients. That way, any configured authorized-client repository is instrumented (no need to proxy or extand spring-addons one).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;7.0.8&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;client &lt;code&gt;SecurityFilterChain&lt;/code&gt; with &lt;code&gt;LOWEST_PRIORITY - 1&lt;/code&gt; (instead of &lt;code&gt;HIGHEST_PRIORITY + 1&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WWW_Authenticate&lt;/code&gt; header with &lt;code&gt;Bearer&lt;/code&gt; value for resource servers unauthorized requests (instead of &lt;code&gt;Basic&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;7.0.7&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Spring Boot 3.1.2&lt;/li&gt; &#xA; &lt;li&gt;force usage of &lt;code&gt;AntPathRequestMatcher&lt;/code&gt; when defining &lt;code&gt;permit-all&lt;/code&gt; in servlet implementations because of &lt;a href=&#34;https://spring.io/security/cve-2023-34035&#34;&gt;https://spring.io/security/cve-2023-34035&lt;/a&gt; (Spring &lt;code&gt;6.1.2&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;7.0.6&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fix the a confusion between user subject and principal name in &lt;code&gt;SpringAddons(Server)OAuth2AuthorizedClientRepository&lt;/code&gt; which could cause an authorized client not to be found when using another claim than subject as principal name.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;7.0.3&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fix the condition to add a filter inserting CSRF protection cookie to responses&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;7.0.0&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/ch4mpy/spring-addons/raw/master/7.0.0-migration-guide.md&#34;&gt;migration guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;merge all 6 starters into a single one&lt;/li&gt; &#xA; &lt;li&gt;reduce test libs count to 2: one with just annotations and another to ease testing of apps using the starter&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;5.2. &lt;a name=&#34;release-notes-6&#34;&gt;&lt;/a&gt;&lt;code&gt;6.x&lt;/code&gt; Branch&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;6.2.3&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Spring Boot 3.1.3&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;6.2.2&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;force usage of &lt;code&gt;AntPathRequestMatcher&lt;/code&gt; when defining &lt;code&gt;permit-all&lt;/code&gt; in servlet implementations because of &lt;a href=&#34;https://spring.io/security/cve-2023-34035&#34;&gt;https://spring.io/security/cve-2023-34035&lt;/a&gt; (Spring &lt;code&gt;6.1.2&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;6.2.1&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Spring Boot 3.1.2&lt;/li&gt; &#xA; &lt;li&gt;Fix the a confusion between user subject and principal name in &lt;code&gt;SpringAddons(Server)OAuth2AuthorizedClientRepository&lt;/code&gt; which could cause an authorized client not to be found when using another claim than subject as principal name.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;6.2.0&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;remove &lt;code&gt;OAuth2AuthenticationFactory&lt;/code&gt;: instead, use &lt;code&gt;Converter&amp;lt;Jwt, ? extends AbstractAuthenticationToken&amp;gt;&lt;/code&gt;, &lt;code&gt;Converter&amp;lt;Jwt, ? extends Mono&amp;lt;? extends AbstractAuthenticationToken&amp;gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;OpaqueTokenAuthenticationConverter&lt;/code&gt; or &lt;code&gt;ReactiveOpaqueTokenAuthenticationConverter&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;create &lt;code&gt;@WithJwt&lt;/code&gt; to build OAuth2 &lt;code&gt;Authentication&lt;/code&gt; during tests, using a JSON string or file on the classpath and submitting it to the JWT authentication converter. All samples and tutorials are updated with this new annotation.&lt;/li&gt; &#xA; &lt;li&gt;deprecate &lt;code&gt;@WithMockJwt&lt;/code&gt; and &lt;code&gt;@OpenId&lt;/code&gt; (use the new &lt;code&gt;@WithJwt&lt;/code&gt; instead)&lt;/li&gt; &#xA; &lt;li&gt;remove the archetypes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;6.1.16&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ch4mpy/spring-addons/issues/133&#34;&gt;gh-133&lt;/a&gt; Add a property to auto configure an &lt;code&gt;audience&lt;/code&gt; JWT validator (if present, the &lt;code&gt;aud&lt;/code&gt; claim in the token will be checked to contain the URI provided in the conf)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;6.1.15&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ch4mpy/spring-addons/issues/129&#34;&gt;gh-129&lt;/a&gt; Auto-configure (with application properties) additional parameters for authorization-code request. This allows, for instance, to send an &lt;code&gt;audience&lt;/code&gt; as required by Auth0. Additional parameters are defined for each client registration. In the following sample, &lt;code&gt;client-registration&lt;/code&gt; &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; references an existing entries in spring.security.oauth2.client.registration:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;com:&#xA;  c4-soft:&#xA;    springaddons:&#xA;      security:&#xA;        client:&#xA;          authorization-request-params:&#xA;            client-registration-a:&#xA;            - name: audience&#xA;              value: demo.c4-soft.com&#xA;            client-registration-b:&#xA;            - name: kc_idp_hint&#xA;              value: google&#xA;            - name: machin&#xA;              value: chose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;6.1.14&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ch4mpy/spring-addons/issues/128&#34;&gt;gh-128&lt;/a&gt; add &lt;code&gt;@ClasspathClaims&lt;/code&gt; to load claims from a JSON file in the classpath (test resources for instance).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Test&#xA;@WithMockJwtAuth(&#xA;  authorities = &#34;ROLE_AUTHORIZED_PERSONNEL&#34;,&#xA;  claims = @OpenIdClaims(&#xA;    usernameClaim = &#34;$[&#39;https://c4-soft.com/user&#39;][&#39;name&#39;]&#34;,&#xA;    jsonFile = @ClasspathClaims(&#34;ch4mp.json&#34;)))&#xA;void givenUserIsAuthenticatedWithJsonClaims_whenGetClaims_thenOk() throws Exception {&#xA;  api.get(&#34;/greet&#34;).andExpect(status().isOk()).andExpect(content().string(&#34;Hello Ch4mp! You are granted with [ROLE_AUTHORIZED_PERSONNEL].&#34;));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ch4mpy/spring-addons/issues/127&#34;&gt;gh-127&lt;/a&gt; add a &lt;code&gt;json&lt;/code&gt; property to @OpenIdClaims to define all calims with a JSON string&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@WithMockJwtAuth(&#xA;authorities = { &#34;ROLE_AUTHORIZED_PERSONNEL&#34; },&#xA;claims = @OpenIdClaims(&#xA;  usernameClaim = &#34;$[&#39;https://c4-soft.com/user&#39;][&#39;name&#39;]&#34;,&#xA;  json = &#34;&#34;&#34;&#xA;{&#xA;  &#34;https://c4-soft.com/user&#34;: {&#xA;    &#34;name&#34;: &#34;Ch4mp&#34;,&#xA;    &#34;email&#34;: &#34;ch4mp@c4-soft.com&#34;&#xA;  },&#xA;  &#34;aud&#34;: &#34;https://localhost:7082&#34;&#xA;}&#34;&#34;&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;6.1.13&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ch4mpy/spring-addons/issues/125&#34;&gt;gh-125&lt;/a&gt; Split claims used as &lt;code&gt;GrantedAuthority&lt;/code&gt; source on comma and space (for instance, &lt;code&gt;scope&lt;/code&gt; claim is usually a single string with comma separated scopes).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;6.1.12&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ch4mpy/spring-addons/issues/122&#34;&gt;gh-122&lt;/a&gt; Support for parametrized OAuth2 Authentications in &lt;code&gt;@ParameterizedTest&lt;/code&gt;. In the following sample, &lt;strong&gt;mind the &lt;code&gt;@JwtAuthenticationSource&lt;/code&gt;&lt;/strong&gt; (decoring test) &lt;strong&gt;and &lt;code&gt;@ParameterizedJwtAuth&lt;/code&gt;&lt;/strong&gt; (decoring test method parameter). The first annotation defines the different authentication instances, the second inserts the one for the current test in the security context and provides it as test method parameter:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@ParameterizedTest&#xA;@JwtAuthenticationSource({ @WithMockJwtAuth(&#34;NICE&#34;), @WithMockJwtAuth(&#34;VERY_NICE&#34;) })&#xA;void givenUserIsGrantedWithAnyNiceAuthority_whenGetRestricted_thenOk(@ParameterizedJwtAuth JwtAuthenticationToken auth) throws Exception {&#xA;&#x9;api.perform(get(&#34;/restricted&#34;))&#xA;&#x9;&#x9;&#x9;.andExpect(status().isOk())&#xA;&#x9;&#x9;&#x9;.andExpect(jsonPath(&#34;$.body&#34;).value(&#34;You are so nice!&#34;));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above will run two distinct tests in sequence, one with each of the provided &lt;code&gt;@WithMockJwtAuth&lt;/code&gt;. Same for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;@WithMockBearerTokenAuthentication&lt;/code&gt; with &lt;code&gt;@BearerAuthenticationSource&lt;/code&gt; and &lt;code&gt;@ParameterizedBearerAuth&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@OpenId&lt;/code&gt; with &lt;code&gt;@OpenIdAuthenticationSource&lt;/code&gt; and &lt;code&gt;@ParameterizedOpenId&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@WithOAuth2Login&lt;/code&gt; with &lt;code&gt;@OAuth2LoginAuthenticationSource&lt;/code&gt; and &lt;code&gt;@ParameterizedOAuth2Login&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@WithOidcLogin&lt;/code&gt; with &lt;code&gt;@OidcLoginAuthenticationSource&lt;/code&gt; and &lt;code&gt;@ParameterizedOidcLogin&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;6.1.11&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Spring Boot 3.1.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;6.1.10&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Spring Boot 3.0.7&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;6.1.9&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ch4mpy/spring-addons/issues/112&#34;&gt;gh-112&lt;/a&gt; fix CSRF token exposed to Javascript in servlets applications. Thanks to @giovannicandido for spotting and fixing this.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;6.1.8&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Spring Boot 3.0.6&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;6.1.7&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;create &lt;code&gt;ServletConfigurationSupport&lt;/code&gt; and &lt;code&gt;ReactiveConfigurationSupport&lt;/code&gt; in &lt;code&gt;spring-addons-{webmvc|webflux}-core&lt;/code&gt; to remove code duplication from starters&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;6.1.5&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;add new helpers to type private claims in test annotations for &lt;code&gt;Double&lt;/code&gt;, &lt;code&gt;URIs&lt;/code&gt;, &lt;code&gt;URLs&lt;/code&gt; and &lt;code&gt;Date&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;add 1 level of nested claims to &lt;code&gt;@Claims&lt;/code&gt;, the test annotation to define private claims in OAuth2 test annotations. It is not possible to describe recursive structures with annotation (annotation with a node of the same type as itself), which is an issue to describe a JSON document. To configure further nested claims, it is still possible to use &lt;code&gt;@JsonObjectClaim&lt;/code&gt; with serialized JSON strings. Sample usage with all possible types of claims (hopefully, it will never be necessary to configure as many claims in a single test):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@WithMockJwtAuth(authorities = &#34;ROLE_AUTHORIZED_PERSONNEL&#34;, claims = @OpenIdClaims(sub = &#34;Ch4mpy&#34;, otherClaims = @Claims(&#xA;        intClaims = { @IntClaim(name = &#34;int1&#34;, value = 42), @IntClaim(name = &#34;int2&#34;, value = 51) },&#xA;        longClaims = { @LongClaim(name = &#34;long1&#34;, value = 42), @LongClaim(name = &#34;long2&#34;, value = 51) },&#xA;        doubleClaims = { @DoubleClaim(name = &#34;double1&#34;, value = 4.2), @DoubleClaim(name = &#34;double2&#34;, value = 5.1) },&#xA;        stringClaims = { @StringClaim(name = &#34;str1&#34;, value = &#34;String 1&#34;), @StringClaim(name = &#34;str2&#34;, value = &#34;String 2&#34;) },&#xA;        uriClaims = { @StringClaim(name = &#34;uri1&#34;, value = &#34;https://localhost:8080/greet&#34;), @StringClaim(name = &#34;uri2&#34;, value = &#34;https://localhost:4200/home#greet&#34;) },&#xA;        urlClaims = { @StringClaim(name = &#34;url1&#34;, value = &#34;https://localhost:8080/greet&#34;), @StringClaim(name = &#34;url2&#34;, value = &#34;https://localhost:4200/home&#34;) },&#xA;        epochSecondClaims = { @IntClaim(name = &#34;epoch1&#34;, value = 1670978400), @IntClaim(name = &#34;epoch2&#34;, value = 1680648172)},&#xA;        dateClaims = { @StringClaim(name = &#34;date1&#34;, value = &#34;2022-12-14T00:40:00.000+00:00&#34;), @StringClaim(name = &#34;date1&#34;, value = &#34;2023-04-04T00:42:00.000+00:00&#34;) },&#xA;        stringArrayClaims = { @StringArrayClaim(name = &#34;strArr1&#34;, value = { &#34;a&#34;, &#34;b&#34;, &#34;c&#34; }), @StringArrayClaim(name = &#34;strArr2&#34;, value = { &#34;D&#34;, &#34;E&#34;, &#34;F&#34; }) },&#xA;        jsonObjectClaims = { @JsonObjectClaim(name = &#34;obj1&#34;, value = obj1), @JsonObjectClaim(name = &#34;obj2&#34;, value = obj2)},&#xA;        jsonObjectArrayClaims = @JsonObjectArrayClaim(name = &#34;objArr1&#34;, value = { obj3, obj4}),&#xA;        nestedClaims = { @NestedClaims(&#xA;                name = &#34;https://c4-soft.com/user&#34;,&#xA;                intClaims = { @IntClaim(name = &#34;nested_int1&#34;, value = 42), @IntClaim(name = &#34;nested_int2&#34;, value = 51) },&#xA;                longClaims = { @LongClaim(name = &#34;nested_long1&#34;, value = 42), @LongClaim(name = &#34;nested_long2&#34;, value = 51) },&#xA;                doubleClaims = { @DoubleClaim(name = &#34;nested_double1&#34;, value = 4.2), @DoubleClaim(name = &#34;nested_double2&#34;, value = 5.1) },&#xA;                stringClaims = { @StringClaim(name = &#34;nested_str1&#34;, value = &#34;String 1&#34;), @StringClaim(name = &#34;nested_str2&#34;, value = &#34;String 2&#34;) },&#xA;                uriClaims = { @StringClaim(name = &#34;nested_uri1&#34;, value = &#34;https://localhost:8080/greet&#34;), @StringClaim(name = &#34;nested_uri2&#34;, value = &#34;https://localhost:4200/home#greet&#34;) },&#xA;                urlClaims = { @StringClaim(name = &#34;nested_url1&#34;, value = &#34;https://localhost:8080/greet&#34;), @StringClaim(name = &#34;nested_url2&#34;, value = &#34;https://localhost:4200/home&#34;) },&#xA;                epochSecondClaims = { @IntClaim(name = &#34;nested_epoch1&#34;, value = 1670978400), @IntClaim(name = &#34;nested_epoch2&#34;, value = 1680648172)},&#xA;                dateClaims = { @StringClaim(name = &#34;nested_date1&#34;, value = &#34;2022-12-14T00:40:00.000+00:00&#34;), @StringClaim(name = &#34;nested_date1&#34;, value = &#34;2023-04-04T00:42:00.000+00:00&#34;) },&#xA;                stringArrayClaims = { @StringArrayClaim(name = &#34;nested_strArr1&#34;, value = { &#34;a&#34;, &#34;b&#34;, &#34;c&#34; }), @StringArrayClaim(name = &#34;nested_strArr2&#34;, value = { &#34;D&#34;, &#34;E&#34;, &#34;F&#34; }) },&#xA;                jsonObjectClaims = { @JsonObjectClaim(name = &#34;nested_obj1&#34;, value = obj1), @JsonObjectClaim(name = &#34;nested_obj2&#34;, value = obj2)},&#xA;                jsonObjectArrayClaims = @JsonObjectArrayClaim(name = &#34;nested_objArr1&#34;, value = { obj3, obj4}))})))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;6.1.4&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;gh-106: Properties to disable spring-addons security filter-chain auto-configuration: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;for clients: empty path-matchers array or &lt;code&gt;com.c4-soft.springaddons.security.client.enabled=false&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;for resource servers: &lt;code&gt;com.c4-soft.springaddons.security.enabled=false&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;6.1.3&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;fix CSRF protection configuration (apply &lt;a href=&#34;https://docs.spring.io/spring-security/reference/5.8/migration/servlet/exploits.html#_i_am_using_a_single_page_application_with_cookiecsrftokenrepository&#34;&gt;https://docs.spring.io/spring-security/reference/5.8/migration/servlet/exploits.html#_i_am_using_a_single_page_application_with_cookiecsrftokenrepository&lt;/a&gt; and &lt;a href=&#34;https://docs.spring.io/spring-security/reference/5.8/migration/reactive.html#_i_am_using_angularjs_or_another_javascript_framework&#34;&gt;https://docs.spring.io/spring-security/reference/5.8/migration/reactive.html#_i_am_using_angularjs_or_another_javascript_framework&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;rework the Javadoc and README of all 6 OAuth2 starters&lt;/li&gt; &#xA; &lt;li&gt;introduce a Back-Channel Logout client implementation to both client starters&lt;/li&gt; &#xA; &lt;li&gt;rework BFF and resource server &amp;amp; client tutorials with spring-addons client starters&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;6.1.2&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;boot 3.0.4&lt;/li&gt; &#xA; &lt;li&gt;add a BFF tutorial&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;6.1.1&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;add &lt;a href=&#34;https://github.com/ch4mpy/spring-addons/tree/master/webmvc/spring-addons-webmvc-client&#34;&gt;spring-addons-webmvc-client&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;add &lt;a href=&#34;https://github.com/ch4mpy/spring-addons/tree/master/webflux/spring-addons-webflux-client&#34;&gt;spring-addons-webflux-client&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;in both client starters, add a logout handler for OP with RP-Initiated logout implementations which do not comply with OIDC standard. This handler is configurable from properties (logout end-point and post-logout URIs). See &lt;a href=&#34;https://github.com/ch4mpy/spring-addons/tree/master/samples/tutorials/resource-server_with_ui&#34;&gt;&lt;code&gt;resource-server_with_ui&lt;/code&gt; tutorial&lt;/a&gt; for details.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;6.1.0&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;breaking change in properties:&lt;/strong&gt; authorities mapping is now configured per claim JSON path (instead of per issuer). This enables to use different prefix (and case) for different claims (for instance &lt;code&gt;SCOPE_&lt;/code&gt; for &lt;code&gt;scope&lt;/code&gt; claim and &lt;code&gt;ROLE_&lt;/code&gt; for &lt;code&gt;realm_access.roles&lt;/code&gt; one). As a consequence, &lt;code&gt;com.c4-soft.springaddons.security.issuers[].authorities.claims[]&lt;/code&gt; is replaced with &lt;code&gt;com.c4-soft.springaddons.security.issuers[].authorities[].path&lt;/code&gt;.Also, &lt;code&gt;prefix&lt;/code&gt; as well as &lt;code&gt;case&lt;/code&gt; are put at the same level as (JSON) &lt;code&gt;path&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Sample migration with YAML:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;com:&#xA;  c4-soft:&#xA;    springaddons:&#xA;      security:&#xA;        issuers:&#xA;        - location: ${keycloak-issuer}&#xA;          username-claim: preferred_username&#xA;          authorities:&#xA;            prefix: ROLE_&#xA;            claims:&#xA;            - realm_access.roles&#xA;            - resource_access.client1.roles&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Becomes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;com:&#xA;  c4-soft:&#xA;    springaddons:&#xA;      security:&#xA;        issuers:&#xA;        - location: ${keycloak-issuer}&#xA;          username-claim: $.preferred_username&#xA;          authorities:&#xA;          - path: $.realm_access.roles&#xA;            prefix: ROLE_&#xA;          - path: $.resource_access.client1.roles&#xA;            prefix: ROLE_&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#34;pseudo&#34; JSON path for username and authorities claims is now actual JSON path. This means that &lt;code&gt;$.resource_access.*.roles&lt;/code&gt; will be successfully accepted. Thanks to JSON path syntax, this is not a breaking change (&lt;code&gt;$.resource_access.client1.roles&lt;/code&gt; and &lt;code&gt;resource_access.client1.roles&lt;/code&gt; are interpreted the same)&lt;/li&gt; &#xA; &lt;li&gt;bump to Spring Boot 3.0.3&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;6.0.16&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add a &lt;code&gt;username-clame&lt;/code&gt; configuration property to define, per issuer, from which claim of the access token should be retrieved the username (what is returned by &lt;code&gt;Authentication::getName&lt;/code&gt;). Default is subject for backward compatibility&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;6.0.15&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ch4mpy/spring-addons/issues/100&#34;&gt;gh-100&lt;/a&gt; prevent a NPE in reactive resource-server using JWT spring-addons starter when the issuer in an access token is not listed in conf. All credits go to &lt;a href=&#34;https://github.com/lArtiquel&#34;&gt;lArtiquel&lt;/a&gt; who spotted the bug and submitted the fix.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;6.0.13&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;create &lt;code&gt;ServerHttpRequestSupport&lt;/code&gt; and &lt;code&gt;HttpServletRequestSupport&lt;/code&gt; to help statically access to the request in current context (usage in authentication converters for instance&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;6.0.12&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;add &lt;code&gt;@WithOAuth2Login&lt;/code&gt; and &lt;code&gt;@WithOidcLogin&lt;/code&gt; to populate test security-context with an &lt;code&gt;OAuth2AuthenticationToken&lt;/code&gt; instance (with respectively &lt;code&gt;DefaultOAuth2User&lt;/code&gt; and &lt;code&gt;DefaultOidcUser&lt;/code&gt; as principal)&lt;/li&gt; &#xA; &lt;li&gt;bump to spring-boot &lt;code&gt;3.0.2&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;default authorities collection in tests annotations, &lt;code&gt;MockMvc&lt;/code&gt; post-processors and &lt;code&gt;WebTestClient&lt;/code&gt; mutators is set to empty array (instead of &lt;code&gt;{ &#34;ROLE_USER&#34; }&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;6.0.11&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ch4mpy/spring-addons/issues/86&#34;&gt;gh-86&lt;/a&gt; &lt;code&gt;OAuthentication::setDetails&lt;/code&gt; &lt;a href=&#34;https://github.com/spring-projects/spring-security/issues/11822&#34;&gt;should not throw&lt;/a&gt; until spring-security 6.1 is released&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ch4mpy/spring-addons/issues/87&#34;&gt;gh-87&lt;/a&gt; spring-addons JWT starters should start even if &lt;code&gt;spring.security.oauth2.resourceserver.jwt.issuer-uri&lt;/code&gt; is set in configuration properties&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;6.0.10&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ch4mpy/spring-addons/issues/83&#34;&gt;gh-83&lt;/a&gt; do not force traffic to http when SSL is not enabled (just force https when SSL is enabled)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;6.0.9&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make OAuthentication immutable&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;6.0.7&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;release with spring-boot 3.0.0 GA as transitive dependency&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;6.0.1&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ch4mpy/spring-addons/tree/master/samples&#34;&gt;samples&lt;/a&gt; for all combinations of: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;webmvc / webflux&lt;/li&gt; &#xA;   &lt;li&gt;JWT decoder / access token introspection&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;OAuthentication&amp;lt;OpenidClaimSet&amp;gt;&lt;/code&gt; / Spring default &lt;code&gt;Authentication&lt;/code&gt; implementation (&lt;code&gt;JwtAuthenticationToken&lt;/code&gt; for JWT decoder or &lt;code&gt;BearerTokenAuthentication&lt;/code&gt; for token introspection)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;minor fixes (@WithMockAuthentication and reactive + introspection starter)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;6.0.0&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Switch to spring-boot 3 (and spring-security 6)&lt;/li&gt; &#xA; &lt;li&gt;Stop supporting the &lt;a href=&#34;https://github.com/keycloak/keycloak/discussions/10187&#34;&gt;very deprecated Keycloak libs for spring&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;5.3. &lt;a name=&#34;release-notes-5&#34;&gt;&lt;/a&gt;&lt;code&gt;5.x&lt;/code&gt; branch&lt;/h3&gt; &#xA;&lt;p&gt;This branch is not maintained anymore. Only versions compatible with Spring 6.1.x (Boot 3.1.x) and JDK &amp;gt;= 17 are maintained.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;5.4.2&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ch4mpy/spring-addons/issues/100&#34;&gt;gh-100&lt;/a&gt; prevent a NPE in reactive resource-server using JWT spring-addons starter when the issuer in an access token is not listed in conf. All credits go to &lt;a href=&#34;https://github.com/lArtiquel&#34;&gt;lArtiquel&lt;/a&gt; who spotted the bug and submitted the fix.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;5.4.0&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use a single bean name for &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;ServletSecurityBeans&lt;/code&gt; and &lt;code&gt;ReactiveSecurityBeans&lt;/code&gt;: AddonsSecurityBeans&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;@AutoConfigureAddonsSecurity{Webmvc|Weblux}{Jwt|Introspecting}&lt;/code&gt;: &lt;code&gt;@AutoConfigureAddonsSecurity&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;@AutoConfigureAddonsWebSecurity&lt;/code&gt; to do the same as existing &lt;code&gt;@AutoConfigureAddonsSecurity&lt;/code&gt; which now loads authorities converter only (useful to unit-test @Components that are not @Controller).&lt;/li&gt; &#xA; &lt;li&gt;More options for CSRF configuration (enum property instead of a boolean) and CSRF disabled by default when session-management is state-less.&lt;/li&gt; &#xA; &lt;li&gt;Compatibility with JDK 1.8 and spring-boot 2.6 (get version 6.x for spring-boot 3 and JDK 17)&lt;/li&gt; &#xA; &lt;li&gt;webflux dependencies cleanup (were pulling some servlet dependencies)&lt;/li&gt; &#xA; &lt;li&gt;All samples now demo @Service and @Repository unit-tests in addition to @Controller ones.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;5.3.0&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Use &lt;code&gt;JwtAuthenticationToken&lt;/code&gt; or &lt;code&gt;BearerAuthenticationToken&lt;/code&gt; by default in resource-server starters. For some reason, &lt;code&gt;OAuthentication&amp;lt;OpenidClaimSet&amp;gt;&lt;/code&gt; frightens rookies.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;make &lt;code&gt;OAuth2AuthenticationFactory&lt;/code&gt; &lt;code&gt;@Bean&lt;/code&gt; optional.&lt;/li&gt; &#xA; &lt;li&gt;remove &lt;code&gt;OAuth2ClaimsConverter&lt;/code&gt; (interface definition and @ConditionalOnMissingBean)&lt;/li&gt; &#xA; &lt;li&gt;remove the recently added &lt;code&gt;oauth2-authentication-factory-enabled&lt;/code&gt; property (instead, evaluate if an &lt;code&gt;OAuth2AuthenticationFactory&lt;/code&gt; bean was provided)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;5.2.2&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;resource-server starter main beans (&lt;code&gt;Security(Web)FilterChain&lt;/code&gt;) are no-longer &#34;conditional on missing&#34;: if you dan&#39;t want it, don&#39;t pull starter lib.&lt;/li&gt; &#xA; &lt;li&gt;add &lt;code&gt;oauth2-authentication-factory-enabled&lt;/code&gt; flag to easily fall-back to Spring default OAuth2 &lt;code&gt;Authentication&lt;/code&gt; implementations (&lt;code&gt;JwtAuthenticationToken&lt;/code&gt; and &lt;code&gt;BearerTokenAuthentication&lt;/code&gt; for resource-servers with respectively JWT decoder or opaque token introspection)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;5.1.3&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;keycloak 19&lt;/li&gt; &#xA; &lt;li&gt;release with JDK 17 and boot 2.7.2&lt;/li&gt; &#xA; &lt;li&gt;release with JDK 1.8 and boot 2.6.10&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;5.1.0&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support token introspection for resource-servers.&lt;/li&gt; &#xA; &lt;li&gt;Rename &lt;code&gt;spring-addons-*-jwt-resource-server-test&lt;/code&gt; to &lt;code&gt;spring-addons-*-test&lt;/code&gt; as it apply for both JWT and introspection&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;5.0.0&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Rename modules to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;have all module names start with &lt;code&gt;spring-addons&lt;/code&gt; prefix, then intermediate module if any (&lt;code&gt;archetypes&lt;/code&gt;, &lt;code&gt;samples&lt;/code&gt;, &lt;code&gt;starters&lt;/code&gt;, &lt;code&gt;webmvc&lt;/code&gt; or &lt;code&gt;webflux&lt;/code&gt;) and last what leaf module aims at&lt;/li&gt; &#xA; &lt;li&gt;better reflect what it do&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For instance, &lt;code&gt;spring-security-oauth2-webmvc-addons&lt;/code&gt; only applies to resource-servers secured with JWTs (not to opaque tokens) -&amp;gt; renamed to &lt;code&gt;spring-addons-webmvc-jwt-resource-server&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Rename &lt;code&gt;com.c4-soft.springaddons.security.token-issuers&lt;/code&gt; configuration properties to &lt;code&gt;com.c4-soft.springaddons.security.issuers&lt;/code&gt; for the same reason: only accepts JWT token issuers (and not opaque token issuers with introspection end-point for instance)&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;4.5.0&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;CSRF enabled by default, using &lt;code&gt;CookieCsrfTokenRepository&lt;/code&gt; if session management is &#34;stateless&#34;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;4.4.4&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ch4mpy/spring-addons/issues/53&#34;&gt;gh-53 GenericMethodSecurityExpressionHandler should accept expression root suppliers for many authentication type&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;4.4.2&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;add &lt;a href=&#34;https://github.com/ch4mpy/spring-addons/tree/master/spring-addons-starters-recaptcha&#34;&gt;reCAPTCHA validation spring-boot starter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;4.4.1&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;rename &lt;code&gt;@WithMockOidcAuth&lt;/code&gt; to shorter and more expressive &lt;code&gt;@OpenId&lt;/code&gt;: it populates test security context with an OAuth2 &lt;code&gt;Àuthentication&lt;/code&gt; containing an OpenID claim-set&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;4.4.0&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;rename &lt;code&gt;OpenidClaimSet&lt;/code&gt; to &lt;code&gt;OpenidClaimSet&lt;/code&gt;: more expressive as this class contains OpenID token claims only&lt;/li&gt; &#xA; &lt;li&gt;rename &lt;code&gt;OAuthentication&lt;/code&gt; to &lt;code&gt;OAuthentication&lt;/code&gt;: it has no more adherence to OpenID (just specific to authentication with encoded claims in a bearer string)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;4.3.2&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Slight properties rework. Now, to configure issuers and authorities mapping:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# should be set to where your authorization-server is&#xA;com.c4-soft.springaddons.security.issuers[0].location=https://localhost:8443/realms/master&#xA;&#xA;# should be configured with a list of private-claims this authorization-server puts user roles into&#xA;# below is default Keycloak conf for a `spring-addons` client with client roles mapper enabled&#xA;com.c4-soft.springaddons.security.issuers[0].authorities.claims=realm_access.roles,resource_access.spring-addons-public.roles,resource_access.spring-addons-confidential.roles&#xA;&#xA;# use IDE auto-completion or see SpringAddonsSecurityProperties javadoc for complete configuration properties list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where &lt;code&gt;caze&lt;/code&gt; is one of &lt;code&gt;unchanged&lt;/code&gt;, &lt;code&gt;upper&lt;/code&gt; or &lt;code&gt;lower&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;4.3.0&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ch4mpy/spring-addons/issues/50&#34;&gt;gh-50&lt;/a&gt;: One entry per authorization-server for authorities mapping (see samples &lt;code&gt;application.properties&lt;/code&gt; files for new configuration structure).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ch4mpy/spring-addons/issues/51&#34;&gt;gh-51&lt;/a&gt;: Group archetypes, webmvc and webflux modules.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;4.2.1&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ch4mpy/spring-addons/issues/49&#34;&gt;gh-49&lt;/a&gt;: Samples in dedicated modules. All samples are moved from libs tests to &lt;a href=&#34;https://github.com/ch4mpy/spring-addons/tree/master/samples&#34;&gt;&lt;code&gt;samples&lt;/code&gt;&lt;/a&gt; module, with one sub-module per sample.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;4.2.0&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Cleanup and prepare for spring-boot 3:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ch4mpy/spring-addons/issues/46&#34;&gt;gh-46&lt;/a&gt;: split webmvc &amp;amp; webflux content from &lt;code&gt;spring-addons-oauth2&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ch4mpy/spring-addons/issues/47&#34;&gt;gh-47&lt;/a&gt;: provide &lt;code&gt;SecurityFilterChain&lt;/code&gt; bean instead of extending &lt;code&gt;WebSecurityConfigurerAdapter&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ch4mpy/spring-addons/issues/48&#34;&gt;gh-48&lt;/a&gt;: make use of spring-boot &lt;code&gt;@AutoConfiguration&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;4.1.5&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Replace multiple JWT issuers JwtDecoder (from 4.1.4) with &lt;code&gt;AuthenticationManagerResolver&lt;/code&gt; @Beans&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;4.1.4&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JwtDecoder for configuring multiple JWT issuers (single resource server accepting IDs from two or more authorization-servers)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;4.1.3&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;finer configuration control with &lt;code&gt;SpringAddonsSecurityProperties&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;4.0.0&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;move keycloak related code to &lt;code&gt;spring-addons-keycloak&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;3.2.0&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Master branch back to single JDK: 17&lt;/li&gt; &#xA; &lt;li&gt;Create &lt;code&gt;jdk1.8&lt;/code&gt; and &lt;code&gt;jdk11&lt;/code&gt; branches&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;3.1.16&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add &lt;a href=&#34;https://github.com/ch4mpy/spring-addons/raw/master/spring-addons-archetypes-webmvc-multimodule&#34;&gt;spring-addons-archetypes-webmvc-multimodule&lt;/a&gt; to boostrap native-ready Spring REST API with webmvc, JPA, OpenAPI and OpenID security.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;3.1.13&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add a &lt;a href=&#34;https://github.com/ch4mpy/spring-addons/raw/master/custom-oidc-authentication-impl.MD&#34;&gt;sample&lt;/a&gt; with &lt;code&gt;OpenidClaimSet&lt;/code&gt; specialisation (parse private claims in addition to authorities).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;3.1.12&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Improve &lt;code&gt;OidcReactiveApiSecurityConfig&lt;/code&gt; and &lt;code&gt;OidcServletApiSecurityConfig&lt;/code&gt; usability: ease security beans replacement (including authorities and authentication converter for use cases where OAuthentication is not enough)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;3.1.11&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Rename &lt;code&gt;SecurityProperties&lt;/code&gt; to less conflicting &lt;code&gt;SpringAddonsSecurityProperties&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;3.1.10&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Turn &lt;code&gt;AbstractOidc...ApiSecurityConfig&lt;/code&gt; into &lt;code&gt;Oidc...ApiSecurityConfig&lt;/code&gt; with default authorities mapper being keycloak or Auth0 depending on &lt;code&gt;com.c4-soft.springaddons.security.keycloak.client-id&lt;/code&gt; being set or not&lt;/li&gt; &#xA; &lt;li&gt;More CORS and authorities mapping configuration in &lt;code&gt;SecurityProperties&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;3.1.8&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fix missing JTI claim mapping from &lt;code&gt;@OpenIdClaims&lt;/code&gt; (&lt;a href=&#34;https://github.com/ch4mpy/spring-addons/issues/35&#34;&gt;gh-35&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;3.1.7&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add &lt;code&gt;AbstractOidcReactiveApiSecurityConfig&lt;/code&gt; to &lt;code&gt;spring-addons-oauth2&lt;/code&gt;. It provides with reasonable default WebSecurityConfig for a reactive (weblux) based API secured with OAuthentication.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;3.1.6&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add &lt;code&gt;AbstractOidcServletApiSecurityConfig&lt;/code&gt; to &lt;code&gt;spring-addons-oauth2&lt;/code&gt;. It provides with reasonable default WebSecurityConfig for a servlet based API secured with OAuthentication.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;3.1.4&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;lombok with provided scope (&lt;a href=&#34;https://github.com/ch4mpy/spring-addons/issues/31&#34;&gt;gh-31&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;3.1.3&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;spring-boot 2.6.1&lt;/li&gt; &#xA; &lt;li&gt;release with JDK version (compilation and runtime target)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;3.1.0&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;spring-boot 2.6&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;3.0.0&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;in OAuth2 related test annotations all claims are now grouped under a single &lt;code&gt;claims = @OpenIdClaims(...)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@WithMockJwtAuth&lt;/code&gt; in addition to &lt;code&gt;@WithMockKeycloakAuth&lt;/code&gt; and &lt;code&gt;@WithMockOidcAuth&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;some code cleanup, quite a bunch of code removed and some renaming (including breaking changes, reason for new major version)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;2.6.6&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;import spring-boot 2.5.5 BOM (instead of inheriting 2.5.4 POM)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;2.6.5&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Downgrade Java compatibility to 1.8&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;2.6.1&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;spring-boot 2.5.4&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;2.6.0&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;replace &lt;code&gt;KeycloakOidcIdAuthenticationConverter&lt;/code&gt; with &lt;code&gt;SynchronizedJwt2OidcIdAuthenticationConverter&lt;/code&gt; and complement it with &lt;code&gt;ReactiveJwt2OidcIdAuthenticationConverter&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;remove references to Keycloak from &lt;code&gt;spring-addons-oauth2&lt;/code&gt; (implementations where mostly useless)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;2.5.4&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;bump Keycloak BOM to 14.0.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;2.5.3&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;bump spring-boot to 2.5&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;2.5.1&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;introduce &lt;code&gt;@JsonObjectClaim&lt;/code&gt; and &lt;code&gt;@JsonArrayClaim&lt;/code&gt; to configure complex private claims. Sample: &lt;code&gt;@WithMockKeycloakAuth(otherClaims = @ClaimSet(jsonObjectClaims = @JsonObjectClaim(name = &#34;foo&#34;, value = &#34;{\&#34;bar\&#34;:\&#34;bad\&#34;, \&#34;nested\&#34;:{\&#34;deep\&#34;:\&#34;her\&#34;}, \&#34;arr\&#34;:[1,2,3]}&#34;)))&lt;/code&gt; or &lt;code&gt;@WithMockOidcId(privateClaims = @JsonObjectClaim(name = &#34;foo&#34;, value = &#34;{\&#34;bar\&#34;:\&#34;bad\&#34;, \&#34;nested\&#34;:{\&#34;deep\&#34;:\&#34;her\&#34;}, \&#34;arr\&#34;:[1,2,3]}&#34;))&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;2.4.1&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ch4mpy/spring-addons/issues/14&#34;&gt;issue #14&lt;/a&gt; added jti and nbf (from JWT spec) to @IdTokenClaims (an ID token is a JWT)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ch4mpy/spring-addons/issues/14&#34;&gt;issue #14&lt;/a&gt; added session_state to @IdTokenClaims as per &lt;a href=&#34;https://openid.net/specs/openid-connect-session-1_0.html#CreatingUpdatingSessions&#34;&gt;https://openid.net/specs/openid-connect-session-1_0.html#CreatingUpdatingSessions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ch4mpy/spring-addons/issues/14&#34;&gt;issue #14&lt;/a&gt; rename &lt;code&gt;privateClaims&lt;/code&gt; to &lt;code&gt;otherClaims&lt;/code&gt; in &lt;code&gt;@WithMockKeycloakAuth&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ch4mpy/spring-addons/issues/15&#34;&gt;issue #15&lt;/a&gt; &lt;code&gt;GrantedAuthoritiesMapper&lt;/code&gt; is now optional in test config. Defaulted to &lt;code&gt;NullAuthoritiesMapper&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;2.4.0&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;rename &lt;code&gt;ServletKeycloakAuthUnitTestingSupport::keycloakAuthenticationToken()&lt;/code&gt; to &lt;code&gt;authentication()&lt;/code&gt; to improve API fluidity (&lt;code&gt;api.with(keycloak.authentication()).get(...)&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;2.3.0&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;implementation closer to &lt;a href=&#34;https://openid.net/specs/openid-connect-core-1_0.html&#34;&gt;open ID specs&lt;/a&gt;: split claims into &lt;code&gt;@IdTokenClaims&lt;/code&gt; and &lt;code&gt;@OidcStandardClaims&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;re-use OIDC ID annotations into &lt;code&gt;@WithMockKeycloakAuth&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;2.2.0&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;OidcId::getName()&lt;/code&gt; returns &lt;code&gt;subject&lt;/code&gt; claim instead of &lt;code&gt;preferred_username&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;replace &lt;code&gt;name&lt;/code&gt; with &lt;code&gt;subject&lt;/code&gt; in &lt;code&gt;@WithMockOidcId&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;replace &lt;code&gt;name&lt;/code&gt; from &lt;code&gt;@WithMockKeycloakAuth&lt;/code&gt; with &lt;code&gt;preferedUsername&lt;/code&gt; in &lt;code&gt;@WithAccessToken&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;support for private claims in &lt;code&gt;@WithMockOidcId&lt;/code&gt; and &lt;code&gt;@WithMockKeycloakAuth&lt;/code&gt; (claims with values of type &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;String&lt;/code&gt; and &lt;code&gt;String[]&lt;/code&gt; only)&lt;/li&gt; &#xA; &lt;li&gt;add missing subject claim in Keycloak access and ID tokens&lt;/li&gt; &#xA; &lt;li&gt;compose &lt;code&gt;@WithAccessToken&lt;/code&gt; with &lt;code&gt;@WithKeycloakIDToken&lt;/code&gt; instead of repeting properties (&lt;code&gt;AccessToken&lt;/code&gt; extends &lt;code&gt;IDToken&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;add advanced &lt;code&gt;@WithMockKeycloakAuth&lt;/code&gt; sample usage in &lt;a href=&#34;https://github.com/ch4mpy/spring-addons/tree/master/spring-addons-oauth2-test&#34;&gt;&lt;code&gt;spring-addons-oauth2-test&lt;/code&gt; README&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;2.1.0&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;fix Keycloak typo (was wrongly spelled Keycloack at many places)&lt;/li&gt; &#xA; &lt;li&gt;add samples with authrities retieved from a DB instead of the JWT for both OAuthentication and JwtAuthenticationToken&lt;/li&gt; &#xA; &lt;li&gt;add sample involving &lt;code&gt;keycloak-spring-boot-starter&lt;/code&gt; and &lt;code&gt;keycloak-spring-security-adapter&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;2.0.0&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This release is still focused on unit-testing Spring OAuth2 applications&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;@WithMockAuthentication&lt;/code&gt; annotation along with &lt;code&gt;mockAuthentication()&lt;/code&gt; servlet (webmvc) and reactive (webflux) flow APIs. You choose the &lt;code&gt;Authentication&lt;/code&gt; type, the framework feeds the security context with a Mockito mock. This is dead simple but should cover 99% of test cases. I wonder why I didn&#39;t think of it sooner...&lt;/li&gt; &#xA; &lt;li&gt;Focus solely on adding to Spring &lt;code&gt;Authentication&lt;/code&gt; implementations and tests tooling (no more alternatives, with an exception for &lt;code&gt;OidcId&lt;/code&gt; which overlaps Spring&#39;s &lt;code&gt;OidcIdToken&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Split &lt;code&gt;webmvc&lt;/code&gt; (servlets) and &lt;code&gt;webflux&lt;/code&gt; (reactive) code in distinct libs to ease dependency management&lt;/li&gt; &#xA; &lt;li&gt;Re-shuffle packages and jars (less code, less jars, more expressive package names)&lt;/li&gt; &#xA; &lt;li&gt;WIP: Extensives samples and tests. Samples are boot apps under &lt;code&gt;src/test&lt;/code&gt; to keep jars small&lt;/li&gt; &#xA; &lt;li&gt;Use Keycloak as authorisation-server for all resource-server samples, each of which configuring a specific &lt;code&gt;Authentication&lt;/code&gt; impl&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that I chose Keycloak because it&#39;s a feature rich, easy to setup authorisation-server. It should not be much of an effort to migrate sample resource-servers to another one, with an exception of those using &lt;code&gt;KeycloakAuthenticationToken&lt;/code&gt; as authentication impl, of course.&lt;/p&gt; &#xA;&lt;h2&gt;6. &lt;a name=&#34;maven-central&#34;&gt;&lt;/a&gt;Maven-Central Reminders&lt;/h2&gt; &#xA;&lt;p&gt;Cheat-sheets for me when setting up a new development environment&lt;/p&gt; &#xA;&lt;h3&gt;6.1. GPG Sigin Key&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gpg --list-keys&#xA;# if key absent, then generate one with&#xA;gpg --gen-key&#xA;# publish public key to one of supported servers &#xA;export GPG_PUB_KEY=(replace with &#34;pub&#34; key)&#xA;gpg --keyserver http://pgp.mit.edu:11371/ --send-keys $GPG_PUB_KEY&#xA;gpg --keyserver http://keyserver.ubuntu.com:11371/ --send-keys $GPG_PUB_KEY&#xA;gpg --keyserver https://keys.openpgp.org/ --send-keys $GPG_PUB_KEY&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;6.2. ~/.m2/settings.xml&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&amp;gt;&#xA;&amp;lt;settings xmlns=&#34;http://maven.apache.org/SETTINGS/1.0.0&#34;&#xA;          xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;&#xA;          xsi:schemaLocation=&#34;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&#34;&amp;gt;&#xA;  &amp;lt;servers&amp;gt;&#xA;    &amp;lt;server&amp;gt;&#xA;      &amp;lt;!-- OSSRH Jira account --&amp;gt;&#xA;      &amp;lt;id&amp;gt;ossrh&amp;lt;/id&amp;gt;&#xA;      &amp;lt;username&amp;gt;ch4mpy&amp;lt;/username&amp;gt;&#xA;      &amp;lt;password&amp;gt;${env.OSSRH_PWD}&amp;lt;/password&amp;gt;&amp;lt;!-- password retrieved from environment variable --&amp;gt;&#xA;    &amp;lt;/server&amp;gt;&#xA;  &amp;lt;/servers&amp;gt;&#xA;&#xA;  &amp;lt;profiles&amp;gt;&#xA;    &amp;lt;profile&amp;gt;&#xA;      &amp;lt;id&amp;gt;ossrh&amp;lt;/id&amp;gt;&#xA;      &amp;lt;activation&amp;gt;&#xA;        &amp;lt;activeByDefault&amp;gt;true&amp;lt;/activeByDefault&amp;gt;&#xA;      &amp;lt;/activation&amp;gt;&#xA;      &amp;lt;properties&amp;gt;&#xA;        &amp;lt;gpg.executable&amp;gt;gpg&amp;lt;/gpg.executable&amp;gt;&#xA;        &amp;lt;gpg.passphrase&amp;gt;${env.GPG_PWD}&amp;lt;/gpg.passphrase&amp;gt;&amp;lt;!-- password retrieved from environment variable --&amp;gt;&#xA;      &amp;lt;/properties&amp;gt;&#xA;    &amp;lt;/profile&amp;gt;&#xA;  &amp;lt;/profiles&amp;gt;&#xA;&amp;lt;/settings&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add-opens for releasing with JDK 17: &lt;code&gt;export JDK_JAVA_OPTIONS=&#39;--add-opens java.base/java.util=ALL-UNNAMED --add-opens java.base/java.lang.reflect=ALL-UNNAMED --add-opens java.base/java.text=ALL-UNNAMED --add-opens java.desktop/java.awt.font=ALL-UNNAMED&#39;&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>TNG/ArchUnit</title>
    <updated>2023-09-18T01:31:24Z</updated>
    <id>tag:github.com,2023-09-18:/TNG/ArchUnit</id>
    <link href="https://github.com/TNG/ArchUnit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Java architecture test library, to specify and assert architecture rules in plain Java&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/TNG/ArchUnit/actions/workflows/build.yml?query=branch%3Amain++&#34;&gt;&lt;img src=&#34;https://github.com/TNG/ArchUnit/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://search.maven.org/#search%7Cgav%7C1%7Cg%3A%22com.tngtech.archunit%22%20&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/com.tngtech.archunit/archunit/badge.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/TNG/ArchUnit/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/TNG/ArchUnit.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/TNG/ArchUnit/main/logo/ArchUnit-Logo.png&#34; height=&#34;64&#34; alt=&#34;ArchUnit&#34;&gt; &#xA;&lt;p&gt;ArchUnit is a free, simple and extensible library for checking the architecture of your Java code. That is, ArchUnit can check dependencies between packages and classes, layers and slices, check for cyclic dependencies and more. It does so by analyzing given Java bytecode, importing all classes into a Java code structure. ArchUnit&#39;s main focus is to automatically test architecture and coding rules, using any plain Java unit testing framework.&lt;/p&gt; &#xA;&lt;h2&gt;An Example&lt;/h2&gt; &#xA;&lt;h4&gt;Add the Maven Central dependency to your project&lt;/h4&gt; &#xA;&lt;h6&gt;Gradle&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code&gt;testImplementation &#39;com.tngtech.archunit:archunit:1.1.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Maven&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;com.tngtech.archunit&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;archunit&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;1.1.0&amp;lt;/version&amp;gt;&#xA;    &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Create a test&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.tngtech.archunit.core.domain.JavaClasses;&#xA;import com.tngtech.archunit.core.importer.ClassFileImporter;&#xA;import com.tngtech.archunit.lang.ArchRule;&#xA;&#xA;import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.classes;&#xA;&#xA;public class MyArchitectureTest {&#xA;    @Test&#xA;    public void some_architecture_rule() {&#xA;        JavaClasses importedClasses = new ClassFileImporter().importPackages(&#34;com.myapp&#34;);&#xA;    &#xA;        ArchRule rule = classes()... // see next section&#xA;    &#xA;        rule.check(importedClasses);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Let the API guide you&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TNG/ArchUnit/main/ArchUnit-API.gif&#34; alt=&#34;ArchUnit Fluent API&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Where to look next&lt;/h2&gt; &#xA;&lt;p&gt;For further information, check out the user guide at &lt;a href=&#34;http://archunit.org&#34;&gt;http://archunit.org&lt;/a&gt; or test examples for the current release at &lt;a href=&#34;https://github.com/TNG/ArchUnit-Examples&#34;&gt;ArchUnit Examples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;ArchUnit is published under the Apache License 2.0, see &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;It redistributes some third party libraries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ASM (&lt;a href=&#34;http://asm.ow2.org&#34;&gt;http://asm.ow2.org&lt;/a&gt;), under BSD Licence&lt;/li&gt; &#xA; &lt;li&gt;Google Guava (&lt;a href=&#34;https://github.com/google/guava&#34;&gt;https://github.com/google/guava&lt;/a&gt;), under Apache License 2.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All licenses for ArchUnit and redistributed libraries can be found within the &lt;a href=&#34;https://raw.githubusercontent.com/TNG/ArchUnit/main/licenses&#34;&gt;licenses&lt;/a&gt; folder.&lt;/p&gt;</summary>
  </entry>
</feed>