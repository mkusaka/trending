<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-19T01:32:30Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kumaransg/LLD</title>
    <updated>2022-06-19T01:32:30Z</updated>
    <id>tag:github.com,2022-06-19:/kumaransg/LLD</id>
    <link href="https://github.com/kumaransg/LLD" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Curated Collection of all Low level design Questions and implementation asked in major Tech companies , Get yourself prepared for the LLD round and ace the interview.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Low level Design / Machine Coding Question Collections&lt;/h1&gt; &#xA;&lt;br&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;What is Machine Coding Round ?&lt;/h3&gt; &#xA;&lt;br&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Machine Coding Round has become very popular interview round in most Product and startup companies like Flipkart, Cleartrip, navi and Udaan,the way the round is structured is the candidate will be provided with a Problem statement and the minimum set of features which needs to implemented within the 90 min window period, we as a candidate need to identity the data models, the service interfaces which will be consumed by the clients and other set of functions and classes, we should be able to present the same to the panel with are design choices / design patterns being made / used and the complete working code.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;What is the purpose behind this LLD repo ?&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;During my recent Preparation, found out that there was no single resources where we get a collections of all the questions and the corresponding Answers, so currently updating the repo with all the materials I found out from the web and the Questions which has been asked during my interview. feel free to contribute any questions you have got during your recent interview.There other useful YT channel and Git repo which are attached in the resources section.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;What is target Audience, do all companies ask ?&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you are currently targeting/looking out for any SDE - I,II opportunities. It totally depends on the company you interviewing with, you can check with the HR if they evaluate via machine coding round, but certain companies do ask a object oriented design round where they focus only on one particular feature and DB design as well, so its good get practiced with few problems beforehand.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;br&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Below are the list of LLD problem which are asked during my machine coding rounds from tech companies and the resources I collected.&lt;/h4&gt; &#xA;&lt;br&gt; &#xA;&lt;h5&gt;Note : page is under construction, you can click on the individual packages to view all the questions and solutions.&lt;/h5&gt; &#xA;&lt;hr&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Low Level Design Question &lt;br&gt;&lt;br&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Question Link to PDF / Drive &lt;br&gt;&lt;br&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Company Asked&lt;br&gt;&lt;br&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Credits to author &lt;br&gt;&lt;br&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/kumaransg/LLD/tree/main/Cricket%20Match%20Dashboard&#34;&gt;Cricket Match Dashboard&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://leetcode.com/discuss/interview-question/990227/udaan-assignment-cricket-match-dashboard&#34;&gt;Leetcode&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Udaan Assignment&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/kumaransg/LLD/tree/main/Event_calendar_flipkart&#34;&gt;Event Calendar&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/kumaransg/LLD/raw/main/Event_calendar_flipkart/Event%20Calendar.pdf&#34;&gt;PDF link&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Flipkart LLD Question&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/kumaransg/LLD/tree/main/FoodKart&#34;&gt;FoodKart or food ordering System&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://docs.google.com/document/d/1Bmkz9omByHqVvwU45cvkBRSwJAPKw9yaDsRlEnCg_lg/edit#&#34;&gt;Doc link&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Flipkart LLD Question&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/kumaransg/LLD/tree/main/StockExchange&#34;&gt;Stock Exchange&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/kumaransg/LLD/tree/main/StockExchange&#34;&gt;Problem Link&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Navi LLD Question&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/kumaransg/LLD/tree/main/PropertyHunt&#34;&gt;PropertyHunt or property Listing site&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/kumaransg/LLD/tree/main/PropertyHunt/Question%20Image&#34;&gt;Question image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ClearTrip LLD Question&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/kumaransg/LLD/tree/main/ledger_company_navi&#34;&gt;ledger company&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.geektrust.in/coding-problem/backend/ledger-co&#34;&gt;Question Link&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Navi LLD Question&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/gauravmassand/ledger-company&#34;&gt;Github code&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/kumaransg/LLD/tree/main/leetcode-lld-flipkart-coding-blox&#34;&gt;Leetcode Like platform LLD&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/kumaransg/LLD/raw/main/leetcode-lld-flipkart-coding-blox/SDE2-%20MC%20Question.pdf&#34;&gt;PDF link&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Flipkart LLD Question&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/hocyadav/leetcode-lld-flipkart-coding-blox&#34;&gt;Github code&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;br&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Frequently asked Problems&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Low Level Design Question&lt;/th&gt; &#xA;   &lt;th&gt;Question Link to PDF / Drive&lt;/th&gt; &#xA;   &lt;th&gt;Company Asked&lt;/th&gt; &#xA;   &lt;th&gt;Credits to author&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kumaransg/LLD/tree/main/Ride%20Sharing%20&#34;&gt;Ride Sharing like App&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kumaransg/LLD/tree/main/Ride%20Sharing%20/RideShare_MachineCoding_Sample&#34;&gt;Problem Link&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Frequently asked in all companies&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;br&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Contribute&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Contributions welcome!&lt;/p&gt; &#xA;&lt;p&gt;If you found this resource helpful, give it a üåü otherwise contribute to it and give it a ‚≠êÔ∏è.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Re-engineering-Domain-Driven-Design/Accounting</title>
    <updated>2022-06-19T01:32:30Z</updated>
    <id>tag:github.com,2022-06-19:/Re-engineering-Domain-Driven-Design/Accounting</id>
    <link href="https://github.com/Re-engineering-Domain-Driven-Design/Accounting" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Re-engineering-Domain-Driven-Design/Accounting/main/README.zh-cn.md&#34;&gt;‰∏≠ÊñáÁâà&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Business Background&lt;/h1&gt; &#xA;&lt;p&gt;This is a simple accounting system, which keeps transactions to different accounts based on business documents. For example, sales settlement is such a business document. Based on what&#39;s in the details, it may require to keep transactions in cash account, credit account and in transit account.&lt;/p&gt; &#xA;&lt;p&gt;The model shown as below:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Re-engineering-Domain-Driven-Design/Accounting/main/public/model.jpg?raw=true&#34; alt=&#34;Model&#34; title=&#34;Model&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Smart Domain Architecture Pattern&lt;/h1&gt; &#xA;&lt;p&gt;A brief introduction to Smart Domain Architecture can be found &lt;a href=&#34;https://raw.githubusercontent.com/Re-engineering-Domain-Driven-Design/Accounting/main/public/Smart%20Domain%20Pattern.pdf?raw=true&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To apply the Smart Domain architecture pattern as the implementation pattern of domain driven design, first, you should explicitly model the associations between entities. Remember, you have to provide a root association. Customers in this example:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Re-engineering-Domain-Driven-Design/Accounting/main/public/association.jpg?raw=true&#34; alt=&#34;Association&#34; title=&#34;Associations&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;All association objects are just plain interfaces. For my personal taste, I used inner interfaces. You can find detailed codes in module domain:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Customer implements Entity&amp;lt;String, CustomerDescription&amp;gt; {&#xA;    private SourceEvidences sourceEvidences;&#xA;&#xA;    private Accounts accounts;&#xA;&#xA;    public HasMany&amp;lt;String, SourceEvidence&amp;lt;?&amp;gt;&amp;gt; sourceEvidences() {&#xA;        return sourceEvidences;&#xA;    }&#xA;&#xA;    public HasMany&amp;lt;String, Account&amp;gt; accounts() {&#xA;        return accounts;&#xA;    }&#xA;&#xA;    public interface SourceEvidences extends HasMany&amp;lt;String, SourceEvidence&amp;lt;?&amp;gt;&amp;gt; {&#xA;        SourceEvidence&amp;lt;?&amp;gt; add(SourceEvidenceDescription description);&#xA;    }&#xA;&#xA;    public interface Accounts extends HasMany&amp;lt;String, Account&amp;gt; {&#xA;        void update(Account account, Account.AccountChange change);&#xA;    }&#xA;}&#xA;&#xA;public class Account implements Entity&amp;lt;String, AccountDescription&amp;gt; {&#xA;    private Transactions transactions;&#xA;&#xA;    public HasMany&amp;lt;String, Transaction&amp;gt; transactions() {&#xA;        return transactions;&#xA;    }&#xA;&#xA;    public interface Transactions extends HasMany&amp;lt;String, Transaction&amp;gt; {&#xA;        Transaction add(Account account, SourceEvidence&amp;lt;?&amp;gt; evidence, TransactionDescription description);&#xA;    }&#xA;}&#xA;&#xA;public interface SourceEvidence&amp;lt;Description extends SourceEvidenceDescription&amp;gt; extends Entity&amp;lt;String, Description&amp;gt; {&#xA;    HasMany&amp;lt;String, Transaction&amp;gt; transactions();&#xA;&#xA;    interface Transactions extends HasMany&amp;lt;String, Transaction&amp;gt; {&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice, I used a wider interface inside the entity, but a narrower interface for outside reader model. Thus, would allow me to encapsulate association manipulation logic within entity.&lt;/p&gt; &#xA;&lt;h2&gt;Expose API over model&lt;/h2&gt; &#xA;&lt;p&gt;After build the object model, now it is time to expose the model via REST API. It is really easy to design the API on top of the model:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Re-engineering-Domain-Driven-Design/Accounting/main/public/api.jpg?raw=true&#34; alt=&#34;API&#34; title=&#34;API&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Implement the root association(Customers) as JAX-RS root resource:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Path(&#34;/customers&#34;)&#xA;public class CustomersApi {&#xA;    private Customers customers;&#xA;&#xA;    @Inject&#xA;    public CustomersApi(Customers customers) {&#xA;        this.customers = customers;&#xA;    }&#xA;&#xA;    @Path(&#34;{id}&#34;)&#xA;    public CustomerApi findById(@PathParam(&#34;id&#34;) String id) {&#xA;        return customers.findById(id).map(CustomerApi::new).orElse(null);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Entity can be implemented as sub-resource:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class CustomerApi {&#xA;    private Customer customer;&#xA;&#xA;    public CustomerApi(Customer customer) {&#xA;        this.customer = customer;&#xA;    }&#xA;&#xA;    @GET&#xA;    public CustomerModel get(@Context UriInfo info) {&#xA;        return new CustomerModel(customer, info);&#xA;    }&#xA;&#xA;    @Path(&#34;source-evidences&#34;)&#xA;    public SourceEvidencesApi sourceEvidences(@Context ResourceContext context) {&#xA;        return context.initResource(new SourceEvidencesApi(customer));&#xA;    }&#xA;&#xA;    @Path(&#34;accounts&#34;)&#xA;    public AccountsApi accounts() {&#xA;        return new AccountsApi(customer);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As well as association objects. As shown in the code below, it is a sub-resource for Customer.SourceEvidences interface:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class SourceEvidencesApi {&#xA;    private Customer customer;&#xA;&#xA;    @Inject&#xA;    private SourceEvidenceReader reader;&#xA;&#xA;    public SourceEvidencesApi(Customer customer) {&#xA;        this.customer = customer;&#xA;    }&#xA;&#xA;    @GET&#xA;    @Path(&#34;{evidence-id}&#34;)&#xA;    public SourceEvidenceModel findById(@PathParam(&#34;evidence-id&#34;) String id,&#xA;                                        @Context UriInfo info) {&#xA;        return customer.sourceEvidences().findByIdentity(id).map(evidence -&amp;gt; SourceEvidenceModel.of(customer, evidence, info))&#xA;                .orElseThrow(() -&amp;gt; new WebApplicationException(Response.Status.NOT_FOUND));&#xA;    }&#xA;&#xA;    @GET&#xA;    public CollectionModel&amp;lt;SourceEvidenceModel&amp;gt; findAll(@Context UriInfo info, @DefaultValue(&#34;0&#34;) @QueryParam(&#34;page&#34;) int page) {&#xA;        return new Pagination&amp;lt;&amp;gt;(customer.sourceEvidences().findAll(), 40).page(page,&#xA;                evidence -&amp;gt; SourceEvidenceModel.simple(customer, evidence, info),&#xA;                p -&amp;gt; sourceEvidences(info).queryParam(&#34;page&#34;, p).build(customer.getIdentity()));&#xA;    }&#xA;&#xA;    @POST&#xA;    public Response create(String json, @Context UriInfo info) {&#xA;        SourceEvidence evidence = customer.add(reader.read(json)&#xA;                .orElseThrow(() -&amp;gt; new WebApplicationException(Response.Status.NOT_ACCEPTABLE)).description());&#xA;        return Response.created(ApiTemplates.sourceEvidence(info).build(customer.getIdentity(), evidence.getIdentity())).build();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can check out the api module for more information. Particularly, in api test, I didn&#39;t use any database. All the logic were tested over the abstraction of association objects.&lt;/p&gt; &#xA;&lt;h3&gt;Implementing Association Objects&lt;/h3&gt; &#xA;&lt;p&gt;Last but not least, implementing association objects with proper lifecycle semantic. Take the association between source evidence and transaction for example, it could be an in memory association, which means that every time source evidence read into memory, the associated transactions will be read as well. Or you can call it &lt;strong&gt;aggregated&lt;/strong&gt; lifecycle.&lt;/p&gt; &#xA;&lt;p&gt;Meanwhile, the association between account and transactions may better be from database, since account may record tons of transactions. Or you can call it &lt;strong&gt;reference&lt;/strong&gt; lifecycle:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Re-engineering-Domain-Driven-Design/Accounting/main/public/lifecycle.jpg?raw=true&#34; alt=&#34;ÁîüÂëΩÂë®Êúü&#34; title=&#34;ÁîüÂëΩÂë®Êúü&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This may be counterintuitive. Many DDD practitioners may say account-transaction should be an aggregation, and source evidence-transaction may be a reference. We represent the conceptual aggregation relationship by URI: the primary URI(self link) of account is /customers/{cid}/accounts/{aid}/transactions/{tid}, not /customers/{cid}/source-evidences/{sid}/transactions/{tid}.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Confusing aggregation relationship with lifecycle is a persistent problem with domain-driven design&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Aggregated lifecycle implemented by package reengineering.ddd.mybatis.memory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import reengineering.ddd.mybatis.memory.EntityList;&#xA;&#xA;public class SourceEvidenceTransactions extends EntityList&amp;lt;String, Transaction&amp;gt; implements SourceEvidence.Transactions {&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Reference lifecycle implemented by package reengineering.ddd.mybatis.database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import reengineering.ddd.mybatis.database.EntityList;&#xA;&#xA;public class AccountTransactions extends EntityList&amp;lt;String, Transaction&amp;gt; implements Account.Transactions {&#xA;    &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this example, association object were implemented by MyBatis. You can find the code in module persistent/mybatis.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jetlinks/jetlinks-community</title>
    <updated>2022-06-19T01:32:30Z</updated>
    <id>tag:github.com,2022-06-19:/jetlinks/jetlinks-community</id>
    <link href="https://github.com/jetlinks/jetlinks-community" rel="alternate"></link>
    <summary type="html">&lt;p&gt;JetLinks Âü∫‰∫éJava8,Spring Boot 2.x ,WebFlux,Netty,Vert.x,ReactorÁ≠âÂºÄÂèë, ÊòØ‰∏Ä‰∏™ÂÖ®ÂìçÂ∫îÂºèÁöÑ‰ºÅ‰∏öÁ∫ßÁâ©ËÅîÁΩëÂπ≥Âè∞„ÄÇÊîØÊåÅÁªü‰∏ÄÁâ©Ê®°ÂûãÁÆ°ÁêÜ,Â§öÁßçËÆæÂ§á,Â§öÁßçÂéÇÂÆ∂,Áªü‰∏ÄÁÆ°ÁêÜ„ÄÇÁªü‰∏ÄËÆæÂ§áËøûÊé•ÁÆ°ÁêÜ,Â§öÂçèËÆÆÈÄÇÈÖç(TCP,MQTT,UDP,CoAP,HTTPÁ≠â),Â±èËîΩÁΩëÁªúÁºñÁ®ãÂ§çÊùÇÊÄß,ÁÅµÊ¥ªÊé•ÂÖ•‰∏çÂêåÂéÇÂÆ∂‰∏çÂêåÂçèËÆÆÁ≠âËÆæÂ§á„ÄÇÂÆûÊó∂Êï∞ÊçÆÂ§ÑÁêÜ,ËÆæÂ§áÂëäË≠¶,Ê∂àÊÅØÈÄöÁü•,Êï∞ÊçÆËΩ¨Âèë„ÄÇÂú∞ÁêÜ‰ΩçÁΩÆ,Êï∞ÊçÆÂèØËßÜÂåñÁ≠â„ÄÇËÉΩÂ∏ÆÂä©‰Ω†Âø´ÈÄüÂª∫Á´ãÁâ©ËÅîÁΩëÁõ∏ÂÖ≥‰∏öÂä°Á≥ªÁªü„ÄÇ&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JetLinks Áâ©ËÅîÁΩëÂü∫Á°ÄÂπ≥Âè∞&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/jetlinks/jetlinks-community/Auto%20Deploy%20Docker?label=docker&#34; alt=&#34;GitHub Workflow Status&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/version-1.12--RELEASE-brightgreen&#34; alt=&#34;Version&#34;&gt; &lt;a href=&#34;https://app.codacy.com/gh/jetlinks/jetlinks-community?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=jetlinks/jetlinks-community&amp;amp;utm_campaign=Badge_Grade_Settings&#34;&gt;&lt;img src=&#34;https://api.codacy.com/project/badge/Grade/e8d527d692c24633aba4f869c1c5d6ad&#34; alt=&#34;Codacy Badge&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://visitor-badge.glitch.me/badge?page_id=jetlinks&#34; alt=&#34;jetlinks&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://qm.qq.com/cgi-bin/qm/qr?k=LGf0OPQqvLGdJIZST3VTcypdVWhdfAOG&amp;amp;jump_from=webapi&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/QQ%E2%91%A0%E7%BE%A4-2021514-brightgreen&#34; alt=&#34;QQ‚ë†Áæ§2021514&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://qm.qq.com/cgi-bin/qm/qr?k=IMas2cH-TNsYxUcY8lRbsXqPnA2sGHYQ&amp;amp;jump_from=webapi&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/QQ%E2%91%A1%E7%BE%A4-324606263-brightgreen&#34; alt=&#34;QQ‚ë°Áæ§324606263&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://qm.qq.com/cgi-bin/qm/qr?k=K5m27CkhDn3B_Owr-g6rfiTBC5DKEY59&amp;amp;jump_from=webapi&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/QQ%E2%91%A2%E7%BE%A4-647954464-brightgreen&#34; alt=&#34;QQ‚ë¢Áæ§647954464&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;JetLinks Âü∫‰∫éJava8,Spring Boot 2.x,WebFlux,Netty,Vert.x,ReactorÁ≠âÂºÄÂèë, ÊòØ‰∏Ä‰∏™ÂºÄÁÆ±Âç≥Áî®,ÂèØ‰∫åÊ¨°ÂºÄÂèëÁöÑ‰ºÅ‰∏öÁ∫ßÁâ©ËÅîÁΩëÂü∫Á°ÄÂπ≥Âè∞„ÄÇÂπ≥Âè∞ÂÆûÁé∞‰∫ÜÁâ©ËÅîÁΩëÁõ∏ÂÖ≥ÁöÑ‰ºóÂ§öÂü∫Á°ÄÂäüËÉΩ, ËÉΩÂ∏ÆÂä©‰Ω†Âø´ÈÄüÂª∫Á´ãÁâ©ËÅîÁΩëÁõ∏ÂÖ≥‰∏öÂä°Á≥ªÁªü„ÄÇ&lt;/p&gt; &#xA;&lt;h2&gt;Ê†∏ÂøÉÁâπÊÄß&lt;/h2&gt; &#xA;&lt;p&gt;ÊîØÊåÅÁªü‰∏ÄÁâ©Ê®°ÂûãÁÆ°ÁêÜ,Â§öÁßçËÆæÂ§á,Â§öÁßçÂéÇÂÆ∂,Áªü‰∏ÄÁÆ°ÁêÜ„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;Áªü‰∏ÄËÆæÂ§áËøûÊé•ÁÆ°ÁêÜ,Â§öÂçèËÆÆÈÄÇÈÖç(TCP,MQTT,UDP,CoAP,HTTPÁ≠â),Â±èËîΩÁΩëÁªúÁºñÁ®ãÂ§çÊùÇÊÄß,ÁÅµÊ¥ªÊé•ÂÖ•‰∏çÂêåÂéÇÂÆ∂‰∏çÂêåÂçèËÆÆÁöÑËÆæÂ§á„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;ÁÅµÊ¥ªÁöÑËßÑÂàôÂºïÊìé,ËÆæÂ§áÂëäË≠¶,Ê∂àÊÅØÈÄöÁü•,Êï∞ÊçÆËΩ¨Âèë.&lt;/p&gt; &#xA;&lt;p&gt;Âº∫Â§ßÁöÑReactorQLÂºïÊìé,‰ΩøÁî®SQLÊù•Â§ÑÁêÜÂÆûÊó∂Êï∞ÊçÆ.&lt;/p&gt; &#xA;&lt;p&gt;Âú∞ÁêÜ‰ΩçÁΩÆ:Áªü‰∏ÄÁÆ°ÁêÜÂú∞ÁêÜ‰ΩçÁΩÆ‰ø°ÊÅØ,ÊîØÊåÅÂå∫ÂüüÊêúÁ¥¢.&lt;/p&gt; &#xA;&lt;p&gt;ÂÆòÊñπQQ: ‚ë†Áæ§ &lt;a href=&#34;https://qm.qq.com/cgi-bin/qm/qr?k=LGf0OPQqvLGdJIZST3VTcypdVWhdfAOG&amp;amp;jump_from=webapi&#34;&gt;2021514&lt;/a&gt; , ‚ë°Áæ§ &lt;a href=&#34;https://qm.qq.com/cgi-bin/qm/qr?k=IMas2cH-TNsYxUcY8lRbsXqPnA2sGHYQ&amp;amp;jump_from=webapi&#34;&gt;324606263&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ÊäÄÊúØÊ†à&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://spring.io/projects/spring-boot&#34;&gt;Spring Boot 2.3.x&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://spring.io/&#34;&gt;Spring WebFlux&lt;/a&gt; ÂìçÂ∫îÂºèWebÊîØÊåÅ&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://r2dbc.io/&#34;&gt;R2DBC&lt;/a&gt; ÂìçÂ∫îÂºèÂÖ≥Á≥ªÂûãÊï∞ÊçÆÂ∫ìÈ©±Âä®&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://projectreactor.io/&#34;&gt;Project Reactor&lt;/a&gt; ÂìçÂ∫îÂºèÁºñÁ®ãÊ°ÜÊû∂&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://netty.io/&#34;&gt;Netty&lt;/a&gt; ,&lt;a href=&#34;https://vertx.io/&#34;&gt;Vert.x&lt;/a&gt; È´òÊÄßËÉΩÁΩëÁªúÁºñÁ®ãÊ°ÜÊû∂&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.elastic.co/cn/products/enterprise-search&#34;&gt;ElasticSearch&lt;/a&gt; ÂÖ®ÊñáÊ£ÄÁ¥¢ÔºåÊó•ÂøóÔºåÊó∂Â∫èÊï∞ÊçÆÂ≠òÂÇ®&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.postgresql.org&#34;&gt;PostgreSQL&lt;/a&gt; ‰∏öÂä°ÂäüËÉΩÊï∞ÊçÆÁÆ°ÁêÜ&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hs-web&#34;&gt;hsweb framework 4&lt;/a&gt; ‰∏öÂä°ÂäüËÉΩÂü∫Á°ÄÊ°ÜÊû∂&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Êû∂ÊûÑ&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jetlinks/jetlinks-community/master/platform.svg?sanitize=true&#34; alt=&#34;platform&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ËÆæÂ§áÊé•ÂÖ•ÊµÅÁ®ã&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jetlinks/jetlinks-community/master/flow.svg?sanitize=true&#34; alt=&#34;flow&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Ê®°Âùó&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;--jetlinks-community&#xA;------|----docker&#xA;------|------|----dev-env       # ÂêØÂä®ÂºÄÂèëÁéØÂ¢É&#xA;------|------|----run-all       # ÂêØÂä®ÂÖ®ÈÉ®,ÈÄöËøáhttp://localhost:9000 ËÆøÈóÆÁ≥ªÁªü.&#xA;------|----jetlinks-components  # ÂÖ¨ÂÖ±ÁªÑ‰ª∂Ê®°Âùó&#xA;------|----jetlinks-manager     # ‰∏öÂä°ÁÆ°ÁêÜÊ®°Âùó&#xA;------|----jetlinks-standalone  # ÊúçÂä°ÂêØÂä®Ê®°Âùó&#xA;------|----simulator            # ËÆæÂ§áÊ®°ÊãüÂô®&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ÊñáÊ°£&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://doc.jetlinks.cn/basics-guide/quick-start.html&#34;&gt;Âø´ÈÄüÂºÄÂßã&lt;/a&gt; &lt;a href=&#34;http://doc.jetlinks.cn/dev-guide/start.html&#34;&gt;ÂºÄÂèëÊñáÊ°£&lt;/a&gt; &lt;a href=&#34;http://doc.jetlinks.cn/common-problems/network-components.html&#34;&gt;Â∏∏ËßÅÈóÆÈ¢ò&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>