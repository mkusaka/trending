<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-06T01:38:39Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>spring-guides/gs-rest-service</title>
    <updated>2023-03-06T01:38:39Z</updated>
    <id>tag:github.com,2023-03-06:/spring-guides/gs-rest-service</id>
    <link href="https://github.com/spring-guides/gs-rest-service" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Building a RESTful Web Service :: Learn how to create a RESTful web service with Spring.&lt;/p&gt;&lt;hr&gt;&lt;div id=&#34;toc&#34; class=&#34;toc&#34;&gt; &#xA; &lt;div id=&#34;toctitle&#34;&gt;&#xA;  Table of Contents&#xA; &lt;/div&gt; &#xA; &lt;ul class=&#34;sectlevel1&#34;&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spring-guides/gs-rest-service/main/#_what_you_will_build&#34;&gt;What You Will Build&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spring-guides/gs-rest-service/main/#_what_you_need&#34;&gt;What You Need&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spring-guides/gs-rest-service/main/#scratch&#34;&gt;Starting with Spring Initializr&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spring-guides/gs-rest-service/main/#initial&#34;&gt;Create a Resource Representation Class&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spring-guides/gs-rest-service/main/#_create_a_resource_controller&#34;&gt;Create a Resource Controller&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spring-guides/gs-rest-service/main/#_test_the_service&#34;&gt;Test the Service&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spring-guides/gs-rest-service/main/#_summary&#34;&gt;Summary&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spring-guides/gs-rest-service/main/#_see_also&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;paragraph&#34;&gt; &#xA; &lt;p&gt;This guide walks you through the process of creating a “Hello, World” RESTful web service with Spring.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_what_you_will_build&#34;&gt;What You Will Build&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;You will build a service that will accept HTTP GET requests at &lt;code&gt;&lt;a href=&#34;http://localhost:8080/greeting&#34; class=&#34;bare&#34;&gt;http://localhost:8080/greeting&lt;/a&gt;&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;It will respond with a JSON representation of a greeting, as the following listing shows:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;exampleblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{&#34;id&#34;:1,&#34;content&#34;:&#34;Hello, World!&#34;}&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;You can customize the greeting with an optional &lt;code&gt;name&lt;/code&gt; parameter in the query string, as the following listing shows:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;exampleblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;http://localhost:8080/greeting?name=User&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;The &lt;code&gt;name&lt;/code&gt; parameter value overrides the default value of &lt;code&gt;World&lt;/code&gt; and is reflected in the response, as the following listing shows:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;exampleblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{&#34;id&#34;:1,&#34;content&#34;:&#34;Hello, User!&#34;}&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_what_you_need&#34;&gt;What You Need&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spring-guides/getting-started-macros/main/prereq_editor_jdk_buildtools.adoc&#34; class=&#34;bare&#34;&gt;https://raw.githubusercontent.com/spring-guides/getting-started-macros/main/prereq_editor_jdk_buildtools.adoc&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spring-guides/getting-started-macros/main/how_to_complete_this_guide.adoc&#34; class=&#34;bare&#34;&gt;https://raw.githubusercontent.com/spring-guides/getting-started-macros/main/how_to_complete_this_guide.adoc&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;scratch&#34;&gt;Starting with Spring Initializr&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;You can use this &lt;a href=&#34;https://start.spring.io/#!type=maven-project&amp;amp;groupId=com.example&amp;amp;artifactId=rest-service&amp;amp;name=rest-service&amp;amp;description=Demo%20project%20for%20Spring%20Boot&amp;amp;packageName=com.example.rest-service&amp;amp;dependencies=web&#34;&gt;pre-initialized project&lt;/a&gt; and click Generate to download a ZIP file. This project is configured to fit the examples in this tutorial.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;To manually initialize the project:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;olist arabic&#34;&gt; &#xA;   &lt;ol class=&#34;arabic&#34;&gt; &#xA;    &lt;li&gt; &lt;p&gt;Navigate to &lt;a href=&#34;https://start.spring.io&#34; class=&#34;bare&#34;&gt;https://start.spring.io&lt;/a&gt;. This service pulls in all the dependencies you need for an application and does most of the setup for you.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Choose either Gradle or Maven and the language you want to use. This guide assumes that you chose Java.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Click &lt;strong&gt;Dependencies&lt;/strong&gt; and select &lt;strong&gt;Spring Web&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Click &lt;strong&gt;Generate&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Download the resulting ZIP file, which is an archive of a web application that is configured with your choices.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ol&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;admonitionblock note&#34;&gt; &#xA;   &lt;table&gt; &#xA;    &lt;tbody&gt;&#xA;     &lt;tr&gt; &#xA;      &lt;td class=&#34;icon&#34;&gt; &#xA;       &lt;div class=&#34;title&#34;&gt;&#xA;        Note&#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;      &lt;td class=&#34;content&#34;&gt; If your IDE has the Spring Initializr integration, you can complete this process from your IDE. &lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt;&#xA;   &lt;/table&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;admonitionblock note&#34;&gt; &#xA;   &lt;table&gt; &#xA;    &lt;tbody&gt;&#xA;     &lt;tr&gt; &#xA;      &lt;td class=&#34;icon&#34;&gt; &#xA;       &lt;div class=&#34;title&#34;&gt;&#xA;        Note&#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;      &lt;td class=&#34;content&#34;&gt; You can also fork the project from Github and open it in your IDE or other editor. &lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt;&#xA;   &lt;/table&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;initial&#34;&gt;Create a Resource Representation Class&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Now that you have set up the project and build system, you can create your web service.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Begin the process by thinking about service interactions.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;The service will handle &lt;code&gt;GET&lt;/code&gt; requests for &lt;code&gt;/greeting&lt;/code&gt;, optionally with a &lt;code&gt;name&lt;/code&gt; parameter in the query string. The &lt;code&gt;GET&lt;/code&gt; request should return a &lt;code&gt;200 OK&lt;/code&gt; response with JSON in the body that represents a greeting. It should resemble the following output:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;exampleblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{&#xA;    &#34;id&#34;: 1,&#xA;    &#34;content&#34;: &#34;Hello, World!&#34;&#xA;}&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;The &lt;code&gt;id&lt;/code&gt; field is a unique identifier for the greeting, and &lt;code&gt;content&lt;/code&gt; is the textual representation of the greeting.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;To model the greeting representation, create a resource representation class. To do so, provide a Java record class for the &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;content&lt;/code&gt; data, as the following listing (from &lt;code&gt;src/main/java/com/example/restservice/Greeting.java&lt;/code&gt;) shows:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;link:complete/src/main/java/com/example/restservice/Greeting.java[]&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;exampleblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;div class=&#34;admonitionblock note&#34;&gt; &#xA;     &lt;table&gt; &#xA;      &lt;tbody&gt;&#xA;       &lt;tr&gt; &#xA;        &lt;td class=&#34;icon&#34;&gt; &#xA;         &lt;div class=&#34;title&#34;&gt;&#xA;          Note&#xA;         &lt;/div&gt; &lt;/td&gt; &#xA;        &lt;td class=&#34;content&#34;&gt; This application uses the &lt;a href=&#34;https://github.com/FasterXML/jackson&#34;&gt;Jackson JSON&lt;/a&gt; library to automatically marshal instances of type &lt;code&gt;Greeting&lt;/code&gt; into JSON. Jackson is included by default by the web starter. &lt;/td&gt; &#xA;       &lt;/tr&gt; &#xA;      &lt;/tbody&gt;&#xA;     &lt;/table&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_create_a_resource_controller&#34;&gt;Create a Resource Controller&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;In Spring’s approach to building RESTful web services, HTTP requests are handled by a controller. These components are identified by the &lt;a href=&#34;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/RestController.html&#34;&gt;&lt;code&gt;@RestController&lt;/code&gt;&lt;/a&gt; annotation, and the &lt;code&gt;GreetingController&lt;/code&gt; shown in the following listing (from &lt;code&gt;src/main/java/com/example/restservice/GreetingController.java&lt;/code&gt;) handles &lt;code&gt;GET&lt;/code&gt; requests for &lt;code&gt;/greeting&lt;/code&gt; by returning a new instance of the &lt;code&gt;Greeting&lt;/code&gt; class:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;exampleblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;link:complete/src/main/java/com/example/restservice/GreetingController.java[]&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;This controller is concise and simple, but there is plenty going on under the hood. We break it down step by step.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;The &lt;code&gt;@GetMapping&lt;/code&gt; annotation ensures that HTTP GET requests to &lt;code&gt;/greeting&lt;/code&gt; are mapped to the &lt;code&gt;greeting()&lt;/code&gt; method.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;admonitionblock note&#34;&gt; &#xA;   &lt;table&gt; &#xA;    &lt;tbody&gt;&#xA;     &lt;tr&gt; &#xA;      &lt;td class=&#34;icon&#34;&gt; &#xA;       &lt;div class=&#34;title&#34;&gt;&#xA;        Note&#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;      &lt;td class=&#34;content&#34;&gt; There are companion annotations for other HTTP verbs (e.g. &lt;code&gt;@PostMapping&lt;/code&gt; for POST). There is also a &lt;code&gt;@RequestMapping&lt;/code&gt; annotation that they all derive from, and can serve as a synonym (e.g. &lt;code&gt;@RequestMapping(method=GET)&lt;/code&gt;). &lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt;&#xA;   &lt;/table&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;code&gt;@RequestParam&lt;/code&gt; binds the value of the query string parameter &lt;code&gt;name&lt;/code&gt; into the &lt;code&gt;name&lt;/code&gt; parameter of the &lt;code&gt;greeting()&lt;/code&gt; method. If the &lt;code&gt;name&lt;/code&gt; parameter is absent in the request, the &lt;code&gt;defaultValue&lt;/code&gt; of &lt;code&gt;World&lt;/code&gt; is used.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;The implementation of the method body creates and returns a new &lt;code&gt;Greeting&lt;/code&gt; object with &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;content&lt;/code&gt; attributes based on the next value from the &lt;code&gt;counter&lt;/code&gt; and formats the given &lt;code&gt;name&lt;/code&gt; by using the greeting &lt;code&gt;template&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;A key difference between a traditional MVC controller and the RESTful web service controller shown earlier is the way that the HTTP response body is created. Rather than relying on a view technology to perform server-side rendering of the greeting data to HTML, this RESTful web service controller populates and returns a &lt;code&gt;Greeting&lt;/code&gt; object. The object data will be written directly to the HTTP response as JSON.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;This code uses Spring &lt;a href=&#34;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/RestController.html&#34;&gt;&lt;code&gt;@RestController&lt;/code&gt;&lt;/a&gt; annotation, which marks the class as a controller where every method returns a domain object instead of a view. It is shorthand for including both &lt;code&gt;@Controller&lt;/code&gt; and &lt;code&gt;@ResponseBody&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;The &lt;code&gt;Greeting&lt;/code&gt; object must be converted to JSON. Thanks to Spring’s HTTP message converter support, you need not do this conversion manually. Because &lt;a href=&#34;https://github.com/FasterXML/jackson&#34;&gt;Jackson 2&lt;/a&gt; is on the classpath, Spring’s &lt;a href=&#34;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/json/MappingJackson2HttpMessageConverter.html&#34;&gt;&lt;code&gt;MappingJackson2HttpMessageConverter&lt;/code&gt;&lt;/a&gt; is automatically chosen to convert the &lt;code&gt;Greeting&lt;/code&gt; instance to JSON.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spring-guides/getting-started-macros/main/spring-boot-application-new-path.adoc&#34; class=&#34;bare&#34;&gt;https://raw.githubusercontent.com/spring-guides/getting-started-macros/main/spring-boot-application-new-path.adoc&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spring-guides/getting-started-macros/main/build_an_executable_jar_subhead.adoc&#34; class=&#34;bare&#34;&gt;https://raw.githubusercontent.com/spring-guides/getting-started-macros/main/build_an_executable_jar_subhead.adoc&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spring-guides/getting-started-macros/main/build_an_executable_jar_with_both.adoc&#34; class=&#34;bare&#34;&gt;https://raw.githubusercontent.com/spring-guides/getting-started-macros/main/build_an_executable_jar_with_both.adoc&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Logging output is displayed. The service should be up and running within a few seconds.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_test_the_service&#34;&gt;Test the Service&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Now that the service is up, visit &lt;code&gt;&lt;a href=&#34;http://localhost:8080/greeting&#34; class=&#34;bare&#34;&gt;http://localhost:8080/greeting&lt;/a&gt;&lt;/code&gt;, where you should see:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;exampleblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{&#34;id&#34;:1,&#34;content&#34;:&#34;Hello, World!&#34;}&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Provide a &lt;code&gt;name&lt;/code&gt; query string parameter by visiting &lt;code&gt;&lt;a href=&#34;http://localhost:8080/greeting?name=User&#34; class=&#34;bare&#34;&gt;http://localhost:8080/greeting?name=User&lt;/a&gt;&lt;/code&gt;. Notice how the value of the &lt;code&gt;content&lt;/code&gt; attribute changes from &lt;code&gt;Hello, World!&lt;/code&gt; to &lt;code&gt;Hello, User!&lt;/code&gt;, as the following listing shows:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;exampleblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{&#34;id&#34;:2,&#34;content&#34;:&#34;Hello, User!&#34;}&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;This change demonstrates that the &lt;code&gt;@RequestParam&lt;/code&gt; arrangement in &lt;code&gt;GreetingController&lt;/code&gt; is working as expected. The &lt;code&gt;name&lt;/code&gt; parameter has been given a default value of &lt;code&gt;World&lt;/code&gt; but can be explicitly overridden through the query string.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Notice also how the &lt;code&gt;id&lt;/code&gt; attribute has changed from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;2&lt;/code&gt;. This proves that you are working against the same &lt;code&gt;GreetingController&lt;/code&gt; instance across multiple requests and that its &lt;code&gt;counter&lt;/code&gt; field is being incremented on each call as expected.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_summary&#34;&gt;Summary&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Congratulations! You have just developed a RESTful web service with Spring.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_see_also&#34;&gt;See Also&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;The following guides may also be helpful:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://spring.io/guides/gs/accessing-gemfire-data-rest/&#34;&gt;Accessing GemFire Data with REST&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://spring.io/guides/gs/accessing-mongodb-data-rest/&#34;&gt;Accessing MongoDB Data with REST&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://spring.io/guides/gs/accessing-data-mysql/&#34;&gt;Accessing data with MySQL&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://spring.io/guides/gs/accessing-data-rest/&#34;&gt;Accessing JPA Data with REST&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://spring.io/guides/gs/accessing-neo4j-data-rest/&#34;&gt;Accessing Neo4j Data with REST&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://spring.io/guides/gs/consuming-rest/&#34;&gt;Consuming a RESTful Web Service&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://spring.io/guides/gs/consuming-rest-angularjs/&#34;&gt;Consuming a RESTful Web Service with AngularJS&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://spring.io/guides/gs/consuming-rest-jquery/&#34;&gt;Consuming a RESTful Web Service with jQuery&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://spring.io/guides/gs/consuming-rest-restjs/&#34;&gt;Consuming a RESTful Web Service with rest.js&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://spring.io/guides/gs/securing-web/&#34;&gt;Securing a Web Application&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://spring.io/guides/tutorials/rest/&#34;&gt;Building REST services with Spring&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://spring.io/guides/tutorials/react-and-spring-data-rest/&#34;&gt;React.js and Spring Data REST&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://spring.io/guides/gs/spring-boot/&#34;&gt;Building an Application with Spring Boot&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://spring.io/guides/gs/testing-restdocs/&#34;&gt;Creating API Documentation with Restdocs&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://spring.io/guides/gs/rest-service-cors/&#34;&gt;Enabling Cross Origin Requests for a RESTful Web Service&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://spring.io/guides/gs/rest-hateoas/&#34;&gt;Building a Hypermedia-Driven RESTful Web Service&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://spring.io/guides/gs/circuit-breaker/&#34;&gt;Circuit Breaker&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spring-guides/getting-started-macros/main/footer.adoc&#34; class=&#34;bare&#34;&gt;https://raw.githubusercontent.com/spring-guides/getting-started-macros/main/footer.adoc&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
</feed>