<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-07T01:34:18Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>opengoofy/hippo4j</title>
    <updated>2022-09-07T01:34:18Z</updated>
    <id>tag:github.com,2022-09-07:/opengoofy/hippo4j</id>
    <link href="https://github.com/opengoofy/hippo4j" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📌 强大的动态线程池框架，附带监控报警功能，支持 JDK、Tomcat、Jetty、Undertow 线程池；RocketMQ、Dubbo、Alibaba Dubbo、RabbitMQ、Hystrix 消费线程池（更多框架线程池还在适配中）。内置两种使用模式：轻量级依赖配置中心以及无中间件依赖版本。&lt;/p&gt;&lt;hr&gt;&lt;img align=&#34;center&#34; width=&#34;400&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/77398366/181906454-b46f6a14-7c2c-4b8f-8b0a-40432521bed8.png&#34;&gt; &#xA;&lt;h1&gt;动态可观测线程池框架，提高线上运行保障能力&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitee.com/agentart/hippo4j&#34;&gt;&lt;img src=&#34;https://gitee.com/agentart/hippo4j/badge/star.svg?theme=gvp&#34; alt=&#34;Gitee&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/opengoofy/hippo4j&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/opengoofy/hippo4j&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://store.docker.com/community/images/hippo4j/hippo4j-server&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/hippo4j/hippo4j-server.svg?sanitize=true&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/opengoofy/hippo4j/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/opengoofy/hippo4j?color=3ba272&#34; alt=&#34;Contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/opengoofy/hippo4j/raw/develop/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/opengoofy/hippo4j?color=5470c6&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;线程池痛点&lt;/h2&gt; &#xA;&lt;p&gt;线程池是一种基于池化思想管理线程的工具，使用线程池可以减少创建销毁线程的开销，避免线程过多导致系统资源耗尽。在高并发以及大批量的任务处理场景，线程池的使用是必不可少的。&lt;/p&gt; &#xA;&lt;p&gt;如果有在项目中实际使用线程池，相信你可能会遇到以下痛点：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;线程池随便定义，线程资源过多，造成服务器高负载。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;线程池参数不易评估，随着业务的并发提升，业务面临出现故障的风险。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;线程池任务执行时间超过平均执行周期，开发人员无法感知。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;线程池任务堆积，触发拒绝策略，影响既有业务正常运行。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;当业务出现超时、熔断等问题时，因为没有监控，无法确定是不是线程池引起。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;原生线程池不支持运行时变量的传递，比如 MDC 上下文遇到线程池就 GG。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;无法执行优雅关闭，当项目关闭时，大量正在运行的线程池任务被丢弃。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;线程池运行中，任务执行停止，怀疑发生死锁或执行耗时操作，但是无从下手。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;什么是 Hippo-4J&lt;/h2&gt; &#xA;&lt;p&gt;Hippo-4J 通过对 JDK 线程池增强，以及扩展三方框架底层线程池等功能，为业务系统提高线上运行保障能力。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;全局管控 - 管理应用线程池实例；&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;动态变更 - 应用运行时动态变更线程池参数，包括不限于：核心、最大线程数、阻塞队列容量、拒绝策略等；&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;通知报警 - 内置四种报警通知策略，线程池活跃度、容量水位、拒绝策略以及任务执行时间超长；&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;运行监控 - 实时查看线程池运行时数据，最近半小时线程池运行数据图表展示；&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;功能扩展 - 支持线程池任务传递上下文；项目关闭时，支持等待线程池在指定时间内完成任务；&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;多种模式 - 内置两种使用模式：&lt;a href=&#34;https://hippo4j.cn/docs/user_docs/getting_started/config/hippo4j-config-start&#34;&gt;依赖配置中心&lt;/a&gt; 和 &lt;a href=&#34;https://hippo4j.cn/docs/user_docs/getting_started/server/hippo4j-server-start&#34;&gt;无中间件依赖&lt;/a&gt;；&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;容器管理 - Tomcat、Jetty、Undertow 容器线程池运行时查看和线程数变更；&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;中间件适配 - Apache RocketMQ、Dubbo、RabbitMQ、Hystrix 消费线程池运行时数据查看和线程数变更。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;开源作者为爱发电不容易，看完有收获，右上角帮忙点个小星星 🤩&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;快速开始&lt;/h2&gt; &#xA;&lt;p&gt;对于本地演示目的，请参阅 &lt;a href=&#34;https://hippo4j.cn/docs/user_docs/user_guide/quick-start&#34;&gt;Quick start&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;演示环境：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://console.hippo4j.cn/index.html&#34;&gt;http://console.hippo4j.cn/index.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;用户名/密码：hippo4j/hippo4j&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;荣誉墙&lt;/h2&gt; &#xA;&lt;p&gt;Hippo-4J 获得了一些宝贵的荣誉，肯定了 Hippo-4J 作为一款开源框架所带来的价值。&lt;/p&gt; &#xA;&lt;img align=&#34;center&#34; width=&#34;680&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/77398366/187014905-b50bdc8b-ca0e-4137-9a02-1e6b06106191.jpg&#34;&gt; &#xA;&lt;h2&gt;开发者&lt;/h2&gt; &#xA;&lt;p&gt;Hippo-4J 获得的成就属于每一位对 Hippo-4J 做出过贡献的成员，感谢各位的付出。&lt;/p&gt; &#xA;&lt;p&gt;如果屏幕前的同学有意提交 Hippo-4J，请参考 &lt;a href=&#34;https://github.com/opengoofy/hippo4j/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22&#34;&gt;good first issue&lt;/a&gt; 或者 &lt;a href=&#34;https://github.com/opengoofy/hippo4j/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+pro+issue%22&#34;&gt;good pro issue&lt;/a&gt; 任务列表。&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/opengoofy/hippo4j/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/hippo4j/contributors.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;友情链接&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/dromara/sa-token&#34;&gt;[ Sa-Token ]&lt;/a&gt;：一个轻量级 java 权限认证框架，让鉴权变得简单、优雅！&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/dromara/hertzbeat&#34;&gt;[ HertzBeat ]&lt;/a&gt;：易用友好的云监控系统, 无需 Agent, 强大自定义监控能力。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Snailclimb/JavaGuide&#34;&gt;[ JavaGuide ]&lt;/a&gt;：一份涵盖大部分 Java 程序员所需要掌握的核心知识。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/itwanger/toBeBetterJavaer&#34;&gt;[ toBeBetterJavaer ]&lt;/a&gt;：一份通俗易懂、风趣幽默的 Java 学习指南。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;联系我&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/77398366/185774220-c11951f9-e130-4d60-8204-afb5c51d4401.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;扫码添加微信，备注：hippo4j，邀您加入群聊。若图片加载不出来，访问 &lt;a href=&#34;https://hippo4j.cn/docs/user_docs/other/group&#34;&gt;官网站点&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>CarGuo/GSYVideoPlayer</title>
    <updated>2022-09-07T01:34:18Z</updated>
    <id>tag:github.com,2022-09-07:/CarGuo/GSYVideoPlayer</id>
    <link href="https://github.com/CarGuo/GSYVideoPlayer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;视频播放器（IJKplayer、ExoPlayer、MediaPlayer），HTTPS，支持弹幕，外挂字幕，支持滤镜、水印、gif截图，片头广告、中间广告，多个同时播放，支持基本的拖动，声音、亮度调节，支持边播边缓存，支持视频自带rotation的旋转（90,270之类），重力旋转与手动旋转的同步支持，支持列表播放 ，列表全屏动画，视频加载速度，列表小窗口支持拖动，动画效果，调整比例，多分辨率切换，支持切换播放器，进度条小窗口预览，列表切换详情页面无缝播放，rtsp、concat、mpeg。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/CarGuo/GSYVideoPlayer/master/img/home_logo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;支持 &lt;a href=&#34;https://github.com/Bilibili/ijkplayer&#34;&gt;IJKPlayer&lt;/a&gt; EXOPlayer2、MediaPlayer、AliPlayer，实现了多功能的视频播放器。 (请仔细阅读下方各项说明，大多数问题可在下方找到解答)。&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h2&gt;&lt;a href=&#34;https://gitee.com/CarGuo/GSYVideoPlayer&#34;&gt;如果克隆太慢或者图片看不到，可尝试从码云地址下载&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;功能&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;缓存&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;边播边缓存，使用了&lt;a href=&#34;https://github.com/danikula/AndroidVideoCache&#34;&gt;AndroidVideoCache&lt;/a&gt;；ExoPlayer使用SimpleCache。&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;协议&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;h263\4\5、Https、concat、rtsp、hls、rtmp、crypto、mpeg等等。&lt;a href=&#34;https://github.com/CarGuo/GSYVideoPlayer/raw/master/doc/DECODERS.md&#34;&gt;（ijk模式格式支持）&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;滤镜&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;简单滤镜（马赛克、黑白、色彩过滤、高斯、模糊、模糊等等20多种）、动画、（水印、画面多重播放等）。&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;帧图&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;视频第一帧、视频帧截图功能，视频生成gif功能。&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;播放&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;列表播放、列表连续播放、重力旋转与手动旋转、视频本身rotation旋转属性、快播和慢播、网络视频加载速度。&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;画面&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;调整显示比例:默认、16:9、4:3、填充；播放时旋转画面角度（0,90,180,270）；镜像旋转。&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;内核&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;IJKPlayer、EXOPlayer、MediaPlayer、AliPlayer切换、自定义内核&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;布局&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;全屏与非全屏两套布局切换、没有任何操作控件的纯播放支持、弹幕功能、继承自定义任何布局。&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;播放&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;单例播放、多个同时播放、视频列表滑动自动播放、列表切换详情页面无缝播放。&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;窗口&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;小窗口、多窗体下（包括桌面）的小窗口播放。&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;广告&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;片头广告、跳过广告支持、中间插入广告功能。&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;字幕&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/CarGuo/GSYVideoPlayer/tree/master/app/src/main/java/com/example/gsyvideoplayer/exosubtitle&#34;&gt;exo2模式下支持自定增加外挂字幕&lt;/a&gt;。&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;dash&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;exo2 模式支持dash&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;stream&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;支持元数据播放&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;更多&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;暂停前后台切换不黑屏；调整不同清晰度的支持；无缝切换支持；锁定/解锁全屏点击功能；进度条小窗口预览（测试）。&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;自定义&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;可自定义渲染层、自定义管理层、自定义播放层（控制层）、自定义缓存层。&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://jitpack.io/#CarGuo/GSYVideoPlayer&#34;&gt;&lt;img src=&#34;https://jitpack.io/v/CarGuo/GSYVideoPlayer.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.travis-ci.com/CarGuo/GSYVideoPlayer&#34;&gt;&lt;img src=&#34;https://app.travis-ci.com/CarGuo/GSYVideoPlayer.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/CarGuo/GSYVideoPlayer/actions&#34;&gt;&lt;img src=&#34;https://github.com/CarGuo/GSYVideoPlayer/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Github Actions&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/CarGuo/GSYVideoPlayer/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/CarGuo/GSYVideoPlayer.svg?sanitize=true&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/CarGuo/GSYVideoPlayer/network&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/CarGuo/GSYVideoPlayer.svg?sanitize=true&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/CarGuo/GSYVideoPlayer/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/CarGuo/GSYVideoPlayer.svg?sanitize=true&#34; alt=&#34;GitHub issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/CarGuo/GSYVideoPlayer/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/CarGuo/GSYVideoPlayer.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;公众号&lt;/th&gt; &#xA;   &lt;th&gt;掘金&lt;/th&gt; &#xA;   &lt;th&gt;知乎&lt;/th&gt; &#xA;   &lt;th&gt;CSDN&lt;/th&gt; &#xA;   &lt;th&gt;简书&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GSYTech&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://juejin.im/user/582aca2ba22b9d006b59ae68/posts&#34;&gt;点我&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.zhihu.com/people/carguo&#34;&gt;点我&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://blog.csdn.net/ZuoYueLiang&#34;&gt;点我&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.jianshu.com/u/6e613846e1ea&#34;&gt;点我&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://img.cdn.guoshuyu.cn/WeChat-Code&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/CarGuo/GSYVideoPlayer/releases&#34;&gt;--------------Demo APK 下载地址---------------&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;一、使用依赖&lt;/h2&gt; &#xA;&lt;h4&gt;7.0 版本开始使用了anndroidx，support版本请看6.x.x，请查看：&lt;a href=&#34;https://github.com/CarGuo/GSYVideoPlayer/raw/master/doc/UPDATE_VERSION.md&#34;&gt;--- 版本更新说明 - 入口&lt;/a&gt;。&lt;/h4&gt; &#xA;&lt;h3&gt;1、Jitpack 引入方法（推荐， JCenter 即将关闭）&lt;/h3&gt; &#xA;&lt;h4&gt;First、在project下的build.gradle添加&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;allprojects {&#xA;    repositories {&#xA;&#x9;&#x9;...&#xA;        maven { url &#39;https://jitpack.io&#39; }&#xA;        maven { url &#34;https://maven.aliyun.com/repository/public&#34; }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;你可以选择下面三种的其中一种，在module下的build.gradle添加。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h4&gt;A、直接引入&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt; //完整版引入&#xA; implementation &#39;com.github.CarGuo.GSYVideoPlayer:GSYVideoPlayer:v8.3.4-release-jitpack&#39;&#xA;&#xA;&#xA; //是否需要AliPlayer模式&#xA; implementation &#39;com.github.CarGuo.GSYVideoPlayer:GSYVideoPlayer-aliplay:v8.3.4-release-jitpack&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;B、添加java和你想要的so支持：&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt; implementation &#39;com.github.CarGuo.GSYVideoPlayer:gsyVideoPlayer-java:v8.3.4-release-jitpack&#39;&#xA;&#xA; //是否需要ExoPlayer模式&#xA; implementation &#39;com.github.CarGuo.GSYVideoPlayer:GSYVideoPlayer-exo2:v8.3.4-release-jitpack&#39;&#xA;&#xA; //是否需要AliPlayer模式&#xA; implementation &#39;com.github.CarGuo.GSYVideoPlayer:GSYVideoPlayer-aliplay:v8.3.4-release-jitpack&#39;&#xA;&#xA; //根据你的需求ijk模式的so&#xA; implementation &#39;com.github.CarGuo.GSYVideoPlayer:gsyVideoPlayer-arm64:v8.3.4-release-jitpack&#39;&#xA; implementation &#39;com.github.CarGuo.GSYVideoPlayer:gsyVideoPlayer-armv7a:v8.3.4-release-jitpack&#39;&#xA; implementation &#39;com.github.CarGuo.GSYVideoPlayer:gsyVideoPlayer-armv5:v8.3.4-release-jitpack&#39;&#xA; implementation &#39;com.github.CarGuo.GSYVideoPlayer:gsyVideoPlayer-x86:v8.3.4-release-jitpack&#39;&#xA; implementation &#39;com.github.CarGuo.GSYVideoPlayer:gsyVideoPlayer-x64:v8.3.4-release-jitpack&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;C、支持其他格式协议的（mpeg，rtsp, concat、crypto协议）&lt;/h4&gt; &#xA;&lt;p&gt;A、B普通版本支持263/264/265等，对于mpeg编码会有声音无画面情况。 C 引入的so支持mpeg编码和其他补充协议，但是so包相对变大。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; implementation &#39;com.github.CarGuo.GSYVideoPlayer:gsyVideoPlayer-java:v8.3.4-release-jitpack&#39;&#xA;&#xA; //是否需要ExoPlayer模式&#xA; implementation &#39;com.github.CarGuo.GSYVideoPlayer:GSYVideoPlayer-exo2:v8.3.4-release-jitpack&#39;&#xA;&#xA; //是否需要AliPlayer模式&#xA; implementation &#39;com.github.CarGuo.GSYVideoPlayer:GSYVideoPlayer-aliplay:v8.3.4-release-jitpack&#39;&#xA;&#xA; //更多ijk的编码支持&#xA; implementation &#39;com.github.CarGuo.GSYVideoPlayer:gsyVideoPlayer-ex_so:v8.3.4-release-jitpack&#39;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;代码中的全局切换支持（更多请参看下方文档和demo）&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;//EXOPlayer内核，支持格式更多&#xA;PlayerFactory.setPlayManager(Exo2PlayerManager.class);&#xA;//系统内核模式&#xA;PlayerFactory.setPlayManager(SystemPlayerManager.class);&#xA;//ijk内核，默认模式&#xA;PlayerFactory.setPlayManager(IjkPlayerManager.class);&#xA;//aliplay 内核，默认模式&#xA;PlayerFactory.setPlayManager(AliPlayerManager.class);&#xA;&#xA;&#xA;//exo缓存模式，支持m3u8，只支持exo&#xA;CacheFactory.setCacheManager(ExoPlayerCacheManager.class);&#xA;//代理缓存模式，支持所有模式，不支持m3u8等，默认&#xA;CacheFactory.setCacheManager(ProxyCacheManager.class);&#xA;&#xA;&#xA;&#xA;//切换渲染模式&#xA;GSYVideoType.setShowType(GSYVideoType.SCREEN_MATCH_FULL);&#xA;//默认显示比例&#xA;GSYVideoType.SCREEN_TYPE_DEFAULT = 0;&#xA;//16:9&#xA;GSYVideoType.SCREEN_TYPE_16_9 = 1;&#xA;//4:3&#xA;GSYVideoType.SCREEN_TYPE_4_3 = 2;&#xA;//全屏裁减显示，为了显示正常 CoverImageView 建议使用FrameLayout作为父布局&#xA;GSYVideoType.SCREEN_TYPE_FULL = 4;&#xA;//全屏拉伸显示，使用这个属性时，surface_container建议使用FrameLayout&#xA;GSYVideoType.SCREEN_MATCH_FULL = -4;&#xA;/***&#xA; * SCREEN_TYPE_CUSTOM 下自定义显示比例&#xA; * @param screenScaleRatio  高宽比，如 16：9&#xA; */&#xA;public static void setScreenScaleRatio(float screenScaleRatio)&#xA;&#xA;&#xA;//切换绘制模式&#xA;GSYVideoType.setRenderType(GSYVideoType.SUFRACE);&#xA;GSYVideoType.setRenderType(GSYVideoType.GLSURFACE);&#xA;GSYVideoType.setRenderType(GSYVideoType.TEXTURE);&#xA;&#xA;&#xA;//ijk关闭log&#xA;IjkPlayerManager.setLogLevel(IjkMediaPlayer.IJK_LOG_SILENT);&#xA;&#xA;&#xA;//exoplayer自定义MediaSource&#xA;ExoSourceManager.setExoMediaSourceInterceptListener(new ExoMediaSourceInterceptListener() {&#xA;    @Override&#xA;    public MediaSource getMediaSource(String dataSource, boolean preview, boolean cacheEnable, boolean isLooping, File cacheDir) {&#xA;        //可自定义MediaSource&#xA;        return null;&#xA;    }&#xA;});&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/CarGuo/GSYVideoPlayer/raw/master/doc/DEPENDENCIES.md&#34;&gt;--- 更多依赖方式请点击 - &lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;二、其他推荐&lt;/h2&gt; &#xA;&lt;h3&gt;* 我所在的技术社区：&lt;a href=&#34;https://juejin.cn/user/817692379985752/posts&#34;&gt;掘金&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;* QQ群，有兴趣的欢迎（平时吹水吐槽多，因为人数饱和，就是日常瞎扯）：174815284 。&lt;/h3&gt; &#xA;&lt;h3&gt;* &lt;a href=&#34;https://github.com/CarGuo/gsy_github_app_flutter&#34;&gt;Flutter Github客户端&lt;/a&gt; 、&lt;a href=&#34;https://github.com/CarGuo/GSYGithubAPP&#34;&gt;React Native Github客户端&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/CarGuo/GSYGithubAPPWeex&#34;&gt;Weex Github客户端&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/CarGuo/GSYGithubAPPKotlin&#34;&gt;原生 Kotlin Github客户端&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;* &lt;a href=&#34;https://github.com/microshow/RxFFmpeg&#34;&gt;RxFFmpeg Android 的音视频编辑工具&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;* &lt;a href=&#34;https://github.com/qingkouwei/oarplayer&#34;&gt;oarplayer Rtmp播放器,基于MediaCodec与srs-librtmp,不依赖ffmpeg&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;三、文档Wiki&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;文档&lt;/th&gt; &#xA;   &lt;th&gt;传送门&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;使用说明&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/CarGuo/GSYVideoPlayer/raw/master/doc/USE.md&#34;&gt;--- 简单使用，快速上手文档&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;建议阅读&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;&lt;strong&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/HjSdmAsHuvixCH_EWdvk3Q&#34;&gt;--- 移动开发者必知的音视频基础知识&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;项目解析说明&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/CarGuo/GSYVideoPlayer/raw/master/doc/GSYVIDEO_PLAYER_PROJECT_INFO.md&#34;&gt;--- 项目解析说明、包含项目架构和解析&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;接口文档入口&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/CarGuo/GSYVideoPlayer/wiki&#34;&gt;--- 使用说明、接口文档 - 入口&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;问题集锦入口&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/CarGuo/GSYVideoPlayer/raw/master/doc/QUESTION.md&#34;&gt;--- 问题集锦 - 入口（大部分你遇到的问题都在这里解决） &lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;编码格式&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/CarGuo/GSYVideoPlayer/raw/master/doc/DECODERS.md&#34;&gt;--- IJK so文件配置格式说明&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;编译自定义SO&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/CarGuo/GSYVideoPlayer/raw/master/doc/BUILD_SO.md&#34;&gt;--- IJKPlayer编译自定义SO - 入口&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;版本更新说明&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/CarGuo/GSYVideoPlayer/raw/master/doc/UPDATE_VERSION.md&#34;&gt;--- 版本更新说明 - 入口&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;compileSdk 太高&lt;/td&gt; &#xA;   &lt;td&gt;--- &lt;strong&gt;&lt;a href=&#34;https://github.com/CarGuo/GSYVideoPlayer/issues/3514&#34;&gt;#3514&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/CarGuo/GSYVideoPlayer/master/img/StructureChart2.jpg&#34; alt=&#34;框架图&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;四、运行效果&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h3&gt;1、打开一个播放(旋转、镜像、填充)&lt;/h3&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/CarGuo/GSYVideoPlayer/master/img/11.gif&#34; width=&#34;240px&#34; height=&#34;426px&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h3&gt;2、列表/详情模式(动画、旋转、小窗体)&lt;/h3&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/CarGuo/GSYVideoPlayer/master/img/22.gif&#34; width=&#34;240px&#34; height=&#34;426px&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/CarGuo/GSYVideoPlayer/master/img/33.gif&#34; width=&#34;240px&#34; height=&#34;426px&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/CarGuo/GSYVideoPlayer/master/img/44.gif&#34; width=&#34;240px&#34; height=&#34;426px&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h3&gt;3、弹幕&lt;/h3&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/CarGuo/GSYVideoPlayer/master/img/55.gif&#34; width=&#34;240px&#34; height=&#34;426px&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h3&gt;4、滤镜和GL动画&lt;/h3&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/CarGuo/GSYVideoPlayer/master/img/09.gif&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h3&gt;6、背景铺满模糊播放&lt;/h3&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/CarGuo/GSYVideoPlayer/master/img/99.png&#34; width=&#34;426px&#34; height=&#34;240px&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h3&gt;7、进度条小窗口预览&lt;/h3&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/CarGuo/GSYVideoPlayer/master/img/07.gif&#34; height=&#34;240px&#34;&gt; &#xA;&lt;h2&gt;五、近期版本&lt;/h2&gt; &#xA;&lt;h3&gt;v8.3.4-release-jitpack (2022-09-01)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;update exo 2.18.1&lt;/li&gt; &#xA; &lt;li&gt;fix #3673&lt;/li&gt; &#xA; &lt;li&gt;fix #3677&lt;/li&gt; &#xA; &lt;li&gt;fix #3676&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;v8.3.3-release-jitpack (2022-07-14)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ijk 增加支持 assets 播放支持&lt;/li&gt; &#xA; &lt;li&gt;fix #3625&lt;/li&gt; &#xA; &lt;li&gt;fix #3615&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;v8.3.2-release-jitpack (2022-06-24)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;update exo 2.18.0&lt;/li&gt; &#xA; &lt;li&gt;fix #3608 兼容副屏幕&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;v8.3.1-release-jitpack (2022-06-23)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;fix #3609&lt;/li&gt; &#xA; &lt;li&gt;fix #3600&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;v8.3.0-release-jitpack (2022-06-06)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;fix #3559 ProxyCacheManager&lt;/li&gt; &#xA; &lt;li&gt;remove dependencies: transitionsEverywhere&lt;/li&gt; &#xA; &lt;li&gt;fix #3568 HttpProxyCache &amp;amp; HttpUrlSource&lt;/li&gt; &#xA; &lt;li&gt;support AliPlayer&lt;/li&gt; &#xA; &lt;li&gt;surfaceView 支持截图&lt;/li&gt; &#xA; &lt;li&gt;fix #3580&lt;/li&gt; &#xA; &lt;li&gt;feat(Media DataSource): Video playback data source supports data input stream.(Currently only IJK kernel is supported) (#3582)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;非 androidx 版本为 6.0.3 以下版本。更多兼容版本请查阅版本更新。&lt;/h3&gt; &#xA;&lt;h3&gt;更多版本请查阅：&lt;a href=&#34;https://github.com/CarGuo/GSYVideoPlayer/raw/master/doc/UPDATE_VERSION.md&#34;&gt;版本更新说明&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;六、关于Issues&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;提问题前可先查阅上方文档和说明，请在Demo中复现问题。&#xA;&#xA;问题说明：&#xA;&#xA;1、说明那个Demo中哪个页面。&#xA;2、问题显现和重现步骤。&#xA;3、补充问题的视频流url，截图。&#xA;4、补充问题的机型，android版本。&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;七、混淆&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;-keep class com.shuyu.gsyvideoplayer.video.** { *; }&#xA;-dontwarn com.shuyu.gsyvideoplayer.video.**&#xA;-keep class com.shuyu.gsyvideoplayer.video.base.** { *; }&#xA;-dontwarn com.shuyu.gsyvideoplayer.video.base.**&#xA;-keep class com.shuyu.gsyvideoplayer.utils.** { *; }&#xA;-dontwarn com.shuyu.gsyvideoplayer.utils.**&#xA;-keep class tv.danmaku.ijk.** { *; }&#xA;-dontwarn tv.danmaku.ijk.**&#xA;&#xA;-keep public class * extends android.view.View{&#xA;    *** get*();&#xA;    void set*(***);&#xA;    public &amp;lt;init&amp;gt;(android.content.Context);&#xA;    public &amp;lt;init&amp;gt;(android.content.Context, java.lang.Boolean);&#xA;    public &amp;lt;init&amp;gt;(android.content.Context, android.util.AttributeSet);&#xA;    public &amp;lt;init&amp;gt;(android.content.Context, android.util.AttributeSet, int);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;温馨提示&lt;/h2&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://gitee.com/CarGuo/GSYVideoPlayer&#34;&gt;如果克隆太慢，可尝试从码云地址下载&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;关于自定义和出现问题的请先看问题集锦、demo、issue。&#xA;&#xA;多了解一些音视频的基础常识，对容器，音视频编码，ffmpeg先做一些了解，以及mediacodec等的不同。&#xA;尽量少出现为什么别的能播的问题哟。&#xA;&#xA;播放器的可自定义还是挺高的，定制请参考demo，多看源码。现在的功能有些多，demo也在不断的更新。&#xA;&#xA;一些新功能和项目结构也在不断的调整。&#xA;&#xA;欢迎提出问题，谢谢。&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;依赖大小参考&lt;/h2&gt; &#xA;&lt;p&gt;建议使用ndk过滤，详细参考 &lt;a href=&#34;http://www.jianshu.com/p/86e4b336c17d&#34;&gt;参考第四条 ： 4、NDK的so支持&lt;/a&gt; &lt;img src=&#34;https://ooo.0o0.ooo/2017/06/15/5941f343a39f5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Star History Chart&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#CarGuo/GSYVideoPlayer&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=CarGuo/GSYVideoPlayer&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;非常感谢您的支持&lt;/h2&gt; &#xA;&lt;h4&gt;撸码不易，如果对你有所帮助，欢迎您的赞赏&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://img.cdn.guoshuyu.cn/thanks.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;请参看IJKPlayer和AndroidVideoCache相关协议。&#xA;项目最开始是从jiecao过来的，改着改着直接重构了。&#xA;偶尔有一变量和方法名可能还有点jiaozi的影子，但是基本是一个新项目。&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>CyrilFeng/Q-calculator</title>
    <updated>2022-09-07T01:34:18Z</updated>
    <id>tag:github.com,2022-09-07:/CyrilFeng/Q-calculator</id>
    <link href="https://github.com/CyrilFeng/Q-calculator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;高性能优惠叠加计算框架&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Q-calculator 高性能优惠叠加计算框架&lt;/h2&gt; &#xA;&lt;h4&gt;Maintainer:&lt;/h4&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/CyrilFeng/Q-calculator/master/READMEIMG/maintainers.png&#34; width=&#34;40%&#34;&gt; &#xA;&lt;h4&gt;背景：&lt;/h4&gt; &#xA;&lt;p&gt;优惠是营销转化链路的重要抓手，对刺激用户消费起到至关重要的作用，目前市场上的优惠主要包含活动（如拼多多的砍一刀、天猫农场、新用户首购、复购、积分等）和券（如折扣券、代金券、商品券、买A赠B等），复杂的优惠规则让用户很难自行计算优惠叠加的顺序，对于参加了多个活动、有多个优惠券情况尤为明显。&lt;/p&gt; &#xA;&lt;p&gt;优惠的计算顺序可以分为平行式和渐进式，其中平行式优惠之间没有依赖关系，而渐进式优惠之间则存在依赖关系，即下一个优惠取决于上一步的优惠结果，假设小明消费了100元，有一个8折优惠券和一个满100-20的优惠券，则这2个优惠的使用顺序有以下两种情况：&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/CyrilFeng/Q-calculator/master/READMEIMG/rela1.png&#34; width=&#34;70%&#34;&gt; &#xA;&lt;p&gt;&lt;code&gt;Q-calculator&lt;/code&gt;采用很多新颖的算法实现了高性能求解优惠最优排列。&lt;/p&gt; &#xA;&lt;h4&gt;核心计算类 Permutation&amp;lt;T extends GoodsItem&amp;gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;Permutation&lt;/code&gt;是一个抽象类，是&lt;code&gt;Q-calculator&lt;/code&gt;的核心，在&lt;code&gt;Permutation&lt;/code&gt;中使用了很多优化策略来保证性能，这些策略包括：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;预存的排列数结果集&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;这么设计的原因是在业务场景中需要频繁的计算排列，对于某个长度的序列，其排列结果是固定的。在&lt;code&gt;Permutation&lt;/code&gt;类中的&lt;code&gt;PERMUTATIONS&lt;/code&gt;属性存放了7以内的排列数结果集，这里使用了&lt;code&gt;Byte&lt;/code&gt;来存储，因此占用的内存空间非常小。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;private final static Map&amp;lt;Integer,Collection&amp;lt;List&amp;lt;Byte&amp;gt;&amp;gt;&amp;gt; PERMUTATIONS = Maps.newHashMap();&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;这个动作在类加载即完成，如果对7不满意，可以调整&lt;code&gt;SUPPORTEDSIZE&lt;/code&gt;的大小，7是我们在实现中摸出来的兼顾业务和性能的参数，大家可以根据自己的需要来调整。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;public final static int SUPPORTEDSIZE = 7;&#xA;&#xA;static{&#xA;      //前置计算 1-SUPPORTEDSIZE 之间所有排列组合&#xA;    for(byte i=1;i&amp;lt;=SUPPORTEDSIZE;i++){&#xA;       PERMUTATIONS.put((int)i,Collections2.permutations(IntStream.range(0,i).boxed().map(x-&amp;gt;(byte)x.intValue()).collect(Collectors.toList())));&#xA;      }&#xA;  }&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;$A_n^3$ 级别缓存&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;相对于传统的&lt;code&gt;Key-Value&lt;/code&gt;结构，求解 $A_n^n$ 问题的缓存需要特殊设计，对一个优惠集合而言 $A_n^3$ 意味着缓存 n x (n-1) x (n-2) 条数据，默认n为7则需要缓存210条数据，兼顾内存大小和缓存带来的性能收益， $A_n^3$ 是最为合适的。&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Permutation&lt;/code&gt;的成员变量&lt;code&gt;cache&lt;/code&gt;来实现高性能缓存。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;private final Map&amp;lt;Integer, CalcState&amp;lt;T&amp;gt;&amp;gt; cache = Maps.newHashMap();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;可能你已经注意到，&lt;code&gt;cache&lt;/code&gt;的键是&lt;code&gt;Integer&lt;/code&gt;类型的，的确，通常&lt;code&gt;String&lt;/code&gt;会更常用，然而在万次计算的场景下，&lt;code&gt;String&lt;/code&gt;的拼接已经成了瓶颈。 为了实现高性能的键，&lt;code&gt;Permutation&lt;/code&gt;通过位移对&lt;code&gt;Byte&lt;/code&gt;数组的前3为进行扰动，确保键的唯一性和性能。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;private static Integer calcKey(List&amp;lt;Byte&amp;gt; a){&#xA;       return  a.size()&amp;gt;=3?(a.get(0) &amp;lt;&amp;lt; 6)+ (a.get(1) &amp;lt;&amp;lt; 3) + a.get(2):0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Permutation&lt;/code&gt;提供了保存点来实现 $A_n^3$ 级别缓存，&lt;code&gt;CalcState&lt;/code&gt; 记录了计算到第3步的状态，包括当前订单优惠金额和计算过程、已享用优惠的商品等，这些属性的保存和回放&lt;code&gt;Permutation&lt;/code&gt;已经帮你做好了，&lt;code&gt;Permutation&lt;/code&gt;额外提供了抽象的保存和回放方法来满足你的个性化诉求。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;   /**&#xA;     * 业务将状态记录到保存点&#xA;     * @param state 保存点对象&#xA;     */&#xA;    protected abstract void makeSnapshot(CalcState&amp;lt;T&amp;gt; state,DiscountContext&amp;lt;T&amp;gt; context);&#xA;&#xA;    /**&#xA;     * 业务返回保存点状态&#xA;     * @param state 保存点对象&#xA;     */&#xA;    protected abstract void backToSnapshot(CalcState&amp;lt;T&amp;gt; state,DiscountContext&amp;lt;T&amp;gt; context);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;优惠计算是有优先级的，必须保证属性&lt;code&gt;calculateGroup&lt;/code&gt;值小的在前面运算，当&lt;code&gt;backToSnapshot&lt;/code&gt;发生时，需要额外判断缓存中最后一个优惠和当前准备计算优惠之间的关系，若不满足则直接跳出。&lt;code&gt;checkIfWakeUpJump&lt;/code&gt;方法将在缓存被使用后立刻判断是否需要继续下去。&lt;/p&gt; &#xA;&lt;h4&gt;上下文类 DiscountContext&amp;lt;T extends GoodsItem&amp;gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;DiscountContext&lt;/code&gt;是上下文，也是&lt;code&gt;Permutation&lt;/code&gt;的成员变量，&lt;code&gt;DiscountContext&lt;/code&gt;同样包含很多优化策略：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CalcStage数组&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;在变更最频繁也是最重要的计算步骤对象&lt;code&gt;CalcStage&lt;/code&gt;使用数组存储，该数组随着上下文创建而创建，在&lt;code&gt;Permutation&lt;/code&gt;中使用&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;Arrays.fill(arr,null);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;将数组清空并让它投入下一次计算，这样一次全排列过程中，数组只会被创建一次，避免了频繁创建数组带来的性能损耗。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;预计算&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;DiscountContext&lt;/code&gt;的初始化方法是静态的&lt;code&gt;create&lt;/code&gt;方法，该方法将商品和优惠进行绑定，同时执行一些用户自定义的逻辑，我们称之为&lt;code&gt;预计算&lt;/code&gt;，预计算的结果会被保存在&lt;code&gt;DiscountContext&lt;/code&gt;的&lt;code&gt;preCompute&lt;/code&gt;属性，可以在后续的计算中直接取用，一劳永逸，避免了在后续的高速迭代中做相同的事情，比如商品分组、求和等等。&lt;/p&gt; &#xA;&lt;h4&gt;预计算 PreCompute&amp;lt;T extends GoodsItem&amp;gt;&lt;/h4&gt; &#xA;&lt;p&gt;预计算提供了接口，要使用预计算首先需要实现PreCompute接口&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;public interface PreCompute&amp;lt;T extends GoodsItem&amp;gt; {&#xA;    /**&#xA;     * 判断符合条件的活动类型，符合才会执行preComputeItems&#xA;     */&#xA;    Set&amp;lt;String&amp;gt; matchTypes();&#xA;&#xA;    /**&#xA;     * 对商品做一些复杂集合操作&#xA;     * @param items 当前参与优惠的商品&#xA;     * @param discount 当前优惠&#xA;     * @param preCompute 存储计算的结果&#xA;     */&#xA;     void preComputeItems(List&amp;lt;T&amp;gt; items, DiscountWrapper discount, Map&amp;lt;String,Object&amp;gt; preCompute);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;此外需要在资源目录下建立&lt;code&gt;calculator-core.properties&lt;/code&gt;文件，配置内容如下&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;precompute.path=你要扫描的包&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;PreComputeHolder&lt;/code&gt;将处理所有的&lt;code&gt;PreCompute&lt;/code&gt;实现类，只有&lt;code&gt;matchTypes&lt;/code&gt;匹配的情况下&lt;code&gt;preComputeItems&lt;/code&gt;方法才会被执行。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;public class PreComputeHolder {&#xA;    public static Set&amp;lt;PreCompute&amp;gt; COMPUTES= Sets.newHashSet();&#xA;    private final static String PATH = &#34;precompute.path&#34;;&#xA;&#xA;    static{&#xA;        Properties properties = new Properties();&#xA;        try {&#xA;              properties = PropertiesLoaderUtils.loadProperties(new FileSystemResource(Objects.requireNonNull(PreComputeHolder.class.getClassLoader().getResource(&#34;calculator-core.properties&#34;)).getPath()));&#xA;        } catch (Exception ignore) {&#xA;        }&#xA;        String path = properties.getProperty(PATH);&#xA;        if(StringUtils.isNotBlank(path)){&#xA;            Reflections reflections = new Reflections(path);&#xA;            Set&amp;lt;Class&amp;lt;? extends PreCompute&amp;gt;&amp;gt; subTypes = reflections.getSubTypesOf(PreCompute.class);&#xA;            for(Class&amp;lt;? extends PreCompute&amp;gt; clazz:subTypes){&#xA;                try {&#xA;                    COMPUTES.add(clazz.newInstance());&#xA;                } catch (Exception ignore) {&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;计算器 Calculator&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;Calculator&lt;/code&gt;是单个优惠的计算接口，它有&lt;code&gt;calcWarp&lt;/code&gt;一个方法，负责具体的优惠计算，但&lt;code&gt;calcWarp&lt;/code&gt;需要承担一些内部的事情，因此我们提供了抽象类&lt;code&gt;AbstractCalculator&lt;/code&gt;实现了&lt;code&gt;calcWarp&lt;/code&gt;，并最终暴露了一个更简单的&lt;code&gt;calc&lt;/code&gt;方法给使用者。&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;AbstractCalculator&lt;/code&gt;的内容如下，&lt;code&gt;calcWarp&lt;/code&gt;方法负责创建&lt;code&gt;CalcStage&lt;/code&gt;，维护&lt;code&gt;CalcStage&lt;/code&gt;数组等内部工作，这对使用者来说是透明的，使用者实现&lt;code&gt;calc&lt;/code&gt;就好。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;public abstract class AbstractCalculator&amp;lt;T extends GoodsItem&amp;gt; implements Calculator&amp;lt;T&amp;gt; {&#xA;    public long calcWarp(DiscountContext&amp;lt;T&amp;gt; context, DiscountWrapper discountWrapper, Map&amp;lt;Long, T&amp;gt; records, byte idx, int i) {&#xA;        CalcStage stage = new CalcStage();&#xA;        CalcResult cr = context.getCalcResult();&#xA;        long price= cr.getCurPrice();&#xA;        stage.setBeforeCalcPrice(price);&#xA;        price = calc(context, discountWrapper,records, price, stage);&#xA;        if(price&amp;lt;0){&#xA;            return price;&#xA;        }&#xA;        stage.setAfterCalcPrice(price);&#xA;        stage.setIndex(idx);&#xA;        stage.setStageType(discountWrapper.getType());&#xA;        cr.setCurPrice(price);&#xA;        if(stage.getBeforeCalcPrice()&amp;gt;stage.getAfterCalcPrice()) {&#xA;            cr.getCurStages()[i] = stage;&#xA;        }&#xA;        return price;&#xA;    }&#xA;&#xA;    /**&#xA;     * 返回该优惠下的最终要支付的金额,若不符合则返回 prevStagePrice&#xA;     * @param context 上下文&#xA;     * @param discountWrapper 优惠信息&#xA;     * @param records 记录享受过优惠的单品，key是calculateId，这里只提供容器，添加和判断规则由使用者自行决定&#xA;     * @param prevStagePrice 上一步计算的订单的价格&#xA;     * @param curStage 当前stage&#xA;     * @return&#xA;     */&#xA;    public abstract  long calc(DiscountContext&amp;lt;T&amp;gt; context, DiscountWrapper discountWrapper, Map&amp;lt;Long,T&amp;gt; records, long prevStagePrice, CalcStage curStage);&#xA;&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;最终用户继承&lt;code&gt;AbstractCalculator&lt;/code&gt;，需要在&lt;code&gt;Component&lt;/code&gt;注解中指定一个值，而&lt;code&gt;CalculatorRouter&lt;/code&gt;将通过这个值来路由到具体的优惠计算器。这个值和&lt;code&gt;DiscountWrapper&lt;/code&gt;中的&lt;code&gt;type&lt;/code&gt;属性是对应的。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;@Component(&#34;manjian&#34;)&#xA;public class ManjianCalc extends AbstractCalculator&amp;lt;GoodsItem&amp;gt; {&#xA;......&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;共享互斥协议 DiscountGroup&lt;/h4&gt; &#xA;&lt;p&gt;共享互斥协议是一个数组，数组中最多有2个对象，最少1个对象，若只有1个对象，则该对象必然为共享组，即组内优惠可以叠加使用&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;[&#xA;    {&#xA;        &#34;relation&#34;: &#34;share&#34;,&#xA;        &#34;items&#34;:&#xA;        [&#xA;            {&#xA;                &#34;type&#34;: &#34;activity0&#34;,&#xA;                &#34;id&#34;: &#34;11&#34;&#xA;            }&#xA;            ,&#xA;            {&#xA;                &#34;type&#34;: &#34;activity4&#34;,&#xA;                &#34;id&#34;: &#34;13&#34;&#xA;            } &#xA;            ,&#xA;            {&#xA;                &#34;type&#34;: &#34;coupon1&#34;,&#xA;                 &#34;id&#34;: &#34;14&#34;&#xA;            }&#xA;        ]&#xA;    }]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;相应地，数组中包含2个对象，则第1个对象的&lt;code&gt;relation&lt;/code&gt;可以为&lt;code&gt;share&lt;/code&gt;或者&lt;code&gt;exclude&lt;/code&gt;，第二个对象的&lt;code&gt;relation&lt;/code&gt;必须为&lt;code&gt;exclude&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;[&#xA;    {&#xA;        &#34;relation&#34;: &#34;share&#34;,&#xA;        &#34;items&#34;:&#xA;        [&#xA;            {&#xA;                &#34;type&#34;: &#34;activity0&#34;,&#xA;                &#34;id&#34;: &#34;11&#34;&#xA;            },&#xA;            {&#xA;                &#34;type&#34;: &#34;card3&#34;,&#xA;                &#34;id&#34;:&#34;12&#34;&#xA;            }&#xA;        ]&#xA;    },&#xA;    {&#xA;        &#34;relation&#34;: &#34;exclude&#34;,&#xA;        &#34;items&#34;:&#xA;        [&#xA;            {&#xA;                &#34;type&#34;: &#34;card1&#34;,&#xA;                &#34;id&#34;: &#34;18&#34;&#xA;            },&#xA;            {&#xA;                &#34;type&#34;: &#34;coupon1&#34;,&#xA;                &#34;id&#34;: &#34;22&#34;&#xA;            }&#xA;        ]&#xA;    }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;最终将转化为共享组，比如上面的协议将转化为下面2个共享组&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;activity0-card3-card1&lt;/code&gt;&lt;br&gt; &lt;code&gt;activity0-card3-coupon1&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;工具类 &lt;code&gt;DiscountGroupUtil&lt;/code&gt; 提供了协议转共享组的方法，由于共享组可能很长，所以先和用户当前订单可享的优惠进行一个交叉过滤，为了提升过滤的性能，要将当前可用优惠转成二级&lt;code&gt;Map&lt;/code&gt;，这个&lt;code&gt;Map&lt;/code&gt;的外层键是协议中的&lt;code&gt;type&lt;/code&gt;，第二层键是协议中的&lt;code&gt;id&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;public static List&amp;lt;Pair&amp;lt;Set&amp;lt;DiscountWrapper&amp;gt;,Set&amp;lt;DiscountWrapper&amp;gt;&amp;gt;&amp;gt; transform(List&amp;lt;List&amp;lt;DiscountGroup&amp;gt;&amp;gt; groups, Map&amp;lt;String, Map&amp;lt;String,DiscountWrapper&amp;gt;&amp;gt; inMap);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;为了保证算力，我们将用户本单可享的优惠分别装在2个集合中，左侧集合的大小为&lt;code&gt;SUPPORTEDSIZE&lt;/code&gt;，也就是算力之内的、重点保障的优惠，而右侧的集合则尽力而为去叠加即可。&lt;br&gt; 从稳定性角度来讲，我们需要给计算次数做一个统计，并在压测中摸清楚阈值，我们提供了&lt;code&gt;LimitingUtil.count&lt;/code&gt;统计进入&lt;code&gt;calc&lt;/code&gt;方法的次数，显然在没有开启缓存的情况下，计算次数为 $A_n^n$ x n，在开启缓存的情况下，计算次数为 $A_n^n$ x (n-3) + $A_n^3$&lt;/p&gt; &#xA;&lt;h4&gt;CASE&lt;/h4&gt; &#xA;&lt;p&gt;看了这么多概念，我们可以在&lt;code&gt;cn.qmai.discount.demo&lt;/code&gt;找到调用的具体case&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;@Controller&#xA;public class TestController {&#xA;&#xA;    private final CalculatorRouter calculatorRouter;&#xA;&#xA;    public TestController(CalculatorRouter calculatorRouter) {&#xA;        this.calculatorRouter = calculatorRouter;&#xA;    }&#xA;&#xA;    @RequestMapping(&#34;test&#34;)&#xA;    @ResponseBody&#xA;    public Object test() {&#xA;        //mock商品&#xA;        List&amp;lt;GoodsItem&amp;gt; items = mockItems();&#xA;        //mock组关系并转化为共享组&#xA;        List&amp;lt;Pair&amp;lt;Set&amp;lt;DiscountWrapper&amp;gt;,Set&amp;lt;DiscountWrapper&amp;gt;&amp;gt;&amp;gt; pairs = transform(mockGroups());&#xA;        //全局最优计算过程&#xA;        List&amp;lt;CalcStage&amp;gt; globalStages=Lists.newArrayList();&#xA;        int count = 0;&#xA;        //订单总金额&#xA;        long totalPrice = items.stream().mapToLong(GoodsInfo::getSalePrice).sum();&#xA;        long globalPrice = totalPrice;&#xA;        //构建计算流&#xA;        Flowable flowable = (Flowable) new Flowable().build(calculatorRouter);&#xA;        for(Pair&amp;lt;Set&amp;lt;DiscountWrapper&amp;gt;,Set&amp;lt;DiscountWrapper&amp;gt;&amp;gt; set:pairs) {&#xA;            //统计算力&#xA;            count += LimitingUtil.count(set.getLeft().size());&#xA;            if(count&amp;gt;N){&#xA;                break;&#xA;            }&#xA;            List&amp;lt;DiscountWrapper&amp;gt; wrappers = Lists.newArrayList(set.getLeft());&#xA;            DiscountContext&amp;lt;GoodsItem&amp;gt; ctx = DiscountContext.create(totalPrice, Lists.newArrayList(items), wrappers);&#xA;            flowable.perm(ctx);&#xA;            if(ctx.getCalcResult().getFinalPrice() &amp;lt; globalPrice) {&#xA;                globalStages = Arrays.asList(ctx.getCalcResult().getStages());&#xA;                globalPrice = ctx.getCalcResult().getFinalPrice();&#xA;            }&#xA;        }&#xA;        return Pair.of(globalPrice,globalStages);&#xA;    }&#xA;&#xA;    private List&amp;lt;List&amp;lt;DiscountGroup&amp;gt;&amp;gt; mockGroups(){&#xA;        List&amp;lt;List&amp;lt;DiscountGroup&amp;gt;&amp;gt; groups = Lists.newArrayList();&#xA;        DiscountGroup group = new DiscountGroup();&#xA;        group.setRelation(GroupRelation.SHARE.getType());&#xA;        group.setItems(Lists.newArrayList(new Item(&#34;zhekou&#34;,&#34;1&#34;),new Item(&#34;manjian&#34;,&#34;2&#34;),new Item(&#34;manzeng&#34;,&#34;3&#34;)));&#xA;        groups.add(Lists.newArrayList(group));&#xA;        return groups;&#xA;    }&#xA;&#xA;    private List&amp;lt;GoodsItem&amp;gt; mockItems(){&#xA;        IdGenerator idGenerator = IdGenerator.getInstance();&#xA;        GoodsInfo goodsInfo = GoodsInfo.of(1001L,2001L,null,4,20 * 100,&#34;产品1&#34;,null);&#xA;        GoodsInfo goodsInfo2 = GoodsInfo.of(1001L,2002L,null,2,10 * 100,&#34;产品1&#34;,null);&#xA;        List&amp;lt;GoodsItem&amp;gt; items = GoodsItem.generateItems(goodsInfo,idGenerator,x-&amp;gt;x.getExtra().put(Constant.UPDATEABLEPRICE,x.getSalePrice()));&#xA;        items.addAll(GoodsItem.generateItems(goodsInfo2,idGenerator,x-&amp;gt;x.getExtra().put(Constant.UPDATEABLEPRICE,x.getSalePrice())));&#xA;        return items;&#xA;    }&#xA;&#xA;    private List&amp;lt;Pair&amp;lt;Set&amp;lt;DiscountWrapper&amp;gt;,Set&amp;lt;DiscountWrapper&amp;gt;&amp;gt;&amp;gt; transform(List&amp;lt;List&amp;lt;DiscountGroup&amp;gt;&amp;gt; groups){&#xA;        List&amp;lt;DiscountWrapper&amp;gt; wrapperList = Lists.newArrayList(&#xA;                DiscountWrapper.of(&#34;zhekou&#34;, &#34;1&#34;, &#34;折扣&#34;, false, new DiscountConfig()),&#xA;                DiscountWrapper.of(&#34;manjian&#34;, &#34;2&#34;, &#34;满减&#34;, false, new DiscountConfig())&#xA;        );&#xA;        Map&amp;lt;String, Map&amp;lt;String,DiscountWrapper&amp;gt;&amp;gt; inMap = wrapperList.stream().collect(Collectors.toMap(DiscountWrapper::getType, x-&amp;gt;ImmutableMap.of(x.getId(),x)));&#xA;        return DiscountGroupUtil.transform(groups,inMap);&#xA;    }&#xA;&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>