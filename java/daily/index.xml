<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-05T01:27:58Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kspalaiologos/kamilalisp</title>
    <updated>2024-03-05T01:27:58Z</updated>
    <id>tag:github.com,2024-03-05:/kspalaiologos/kamilalisp</id>
    <link href="https://github.com/kspalaiologos/kamilalisp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A functional, flexible and concise Lisp.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/kspalaiologos/kamilalisp/raw/v0.2/logo.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;KamilaLisp Two: Electric Boogaloo&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codecov.io/gh/kspalaiologos/kamilalisp&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/kspalaiologos/kamilalisp/branch/v0.2/graph/badge.svg?token=V9D86RYQO8&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kspalaiologos/kamilalisp/actions/workflows/maven.yml&#34;&gt;&lt;img src=&#34;https://github.com/kspalaiologos/kamilalisp/actions/workflows/maven.yml/badge.svg?sanitize=true&#34; alt=&#34;Java CI with Maven&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://wakatime.com/badge/user/c3a8c589-783c-4ab2-be05-93fa48bc9a94/project/1c00d725-551f-46d2-a691-1408603a8707.svg?sanitize=true&#34; alt=&#34;WakaTime&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/kspalaiologos/kamilalisp&#34; alt=&#34;GitHub&#34;&gt; &lt;a href=&#34;https://github.com/kspalaiologos/kamilalisp&#34;&gt;&lt;img src=&#34;https://tokei.rs/b1/github/kspalaiologos/kamilalisp&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;span class=&#34;badge-patreon&#34;&gt;&lt;a href=&#34;https://patreon.com/kspalaiologos&#34; title=&#34;Donate to this project using Patreon&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/patreon-donate-yellow.svg?sanitize=true&#34; alt=&#34;Patreon donate button&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;A functional, flexible and concise Lisp inspired by Haskell and APL, among others. A ground-up rewrite.&lt;/p&gt; &#xA;&lt;p&gt;Useful links:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Read the book: &lt;a href=&#34;https://raw.githubusercontent.com/kspalaiologos/kamilalisp/v0.2/doc/main.pdf&#34;&gt;An introduction to functional and array programming&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;You need &lt;strong&gt;Java17 JDK or newer&lt;/strong&gt; installed to build KamilaLisp yourself.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/kspalaiologos/kamilalisp&#xA;cd kamilalisp&#xA;mvn package&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you could download a pre-compiled JAR file for use with &lt;strong&gt;Java 17 or newer&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export VERSION=0.3.0.1&#xA;mkdir kamilalisp &amp;amp;&amp;amp; cd kamilalisp&#xA;# Download the KamilaLisp JAR&#xA;curl -L -O https://github.com/kspalaiologos/kamilalisp/releases/download/v$VERSION/kamilalisp-$VERSION.jar&#xA;# Verify the signature&#xA;curl -L -O https://github.com/kspalaiologos/kamilalisp/releases/download/v$VERSION/kamilalisp-$VERSION.jar.asc&#xA;curl https://palaiologos.rocks/pub.pgp | gpg --import # Or alternatively: gpg --recv-keys C868F0B6DE38409D&#xA;gpg --verify kamilalisp-$VERSION.jar.asc kamilalisp-$VERSION.jar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;KamilaLisp allows for actor programming, concurrent programming, imperative programming, functional programming, array programming, pure functional programming, object-oriented programming, rudimentary logic programming, mathematical programming, backend development, numerical and scientific computation, scripting and system administration, symbolic computation (real and complex analysis), tacit (point-free) programming, concurrent programming and event-driven programming. In more detail:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Arbitrary precision complex, integer and decimal arithmetic.&lt;/li&gt; &#xA; &lt;li&gt;A fully-featured, remote IDE capable of communicating with KamilaLisp instances over the network. Supports multiple workspaces, contains an implementation of a hybrid tiling/floating window manager and editors.&lt;/li&gt; &#xA; &lt;li&gt;Many mathematical functions (bernoulli, gamma, trigonometry, arcus functions, hyperbolic functions, inverse hyperbolic functions, FFT, IFFT)&lt;/li&gt; &#xA; &lt;li&gt;Bit operations&lt;/li&gt; &#xA; &lt;li&gt;Number theoretic, combinatoric and linear algebraic functions (permutations, Levi-Civita, etc...)&lt;/li&gt; &#xA; &lt;li&gt;Functional higher order functions (fold, scan, all, none, some, converge, takewhile, dropwhile)&lt;/li&gt; &#xA; &lt;li&gt;Functional parallelism (parallel map and filter)&lt;/li&gt; &#xA; &lt;li&gt;Mu-recursive functions (SML projections, mu-recursive substitution operator).&lt;/li&gt; &#xA; &lt;li&gt;Prototype-based object orientation.&lt;/li&gt; &#xA; &lt;li&gt;No memory side effects, all collections are persistent.&lt;/li&gt; &#xA; &lt;li&gt;Possibilities of writing code in pure functional paradigm.&lt;/li&gt; &#xA; &lt;li&gt;Suffix array and Burrows-Wheeler transform construction.&lt;/li&gt; &#xA; &lt;li&gt;APL-style array processing (grade-up, grade-down, find, range, where, encode, decode, replicate, etc...).&lt;/li&gt; &#xA; &lt;li&gt;APL-style symbols for common operations.&lt;/li&gt; &#xA; &lt;li&gt;Set operations.&lt;/li&gt; &#xA; &lt;li&gt;Read/write support for JSON, CSV, XML, Base64, XZ, gzip, lz4, bzip2, tar and zip.&lt;/li&gt; &#xA; &lt;li&gt;Date and time manipulations.&lt;/li&gt; &#xA; &lt;li&gt;Integrated development environment - supports remote IDE sessions, compressed KamilaLisp code format, project management, multi-workspace and multi-session workflows, broadcasting/synchronising project data among multiple remote sessions.&lt;/li&gt; &#xA; &lt;li&gt;Persistent hashmaps, reactive hashmap literals.&lt;/li&gt; &#xA; &lt;li&gt;PNG, BMP, JPG and JPEG image I/O.&lt;/li&gt; &#xA; &lt;li&gt;File I/O (read, write, append).&lt;/li&gt; &#xA; &lt;li&gt;Basic matrix operations (LU decomposition, transpose, trace, matrix multiplication easily implemented as &lt;code&gt;$(foldl + 0)%[1] \outer-product * A \matrix:transpose A&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Performance benchmarks to measure GC time, average, median and standard deviation between runs of various expressions.&lt;/li&gt; &#xA; &lt;li&gt;Module system.&lt;/li&gt; &#xA; &lt;li&gt;Streams&lt;/li&gt; &#xA; &lt;li&gt;Process management (using &lt;code&gt;sh:process&lt;/code&gt;) - manipulating input/output streams, etc...&lt;/li&gt; &#xA; &lt;li&gt;HTTP server - supports resource handlers, path handlers, complex routing, cookies, ...&lt;/li&gt; &#xA; &lt;li&gt;SQL database connection, auxiliary database drivers, statements, queries, prepared statements.&lt;/li&gt; &#xA; &lt;li&gt;Symbolic matrix LU decomposition, symbolic determinants.&lt;/li&gt; &#xA; &lt;li&gt;Pattern matching.&lt;/li&gt; &#xA; &lt;li&gt;Memoization.&lt;/li&gt; &#xA; &lt;li&gt;Imperative programming support.&lt;/li&gt; &#xA; &lt;li&gt;Networking (&lt;code&gt;net:fetch&lt;/code&gt;, &lt;code&gt;net:wget&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Sockets (&lt;code&gt;net:client&lt;/code&gt;, &lt;code&gt;net:server&lt;/code&gt; and their SSL counterparts).&lt;/li&gt; &#xA; &lt;li&gt;Parallel processing using the actor model (daemon threads, task threads, message passing paradigm).&lt;/li&gt; &#xA; &lt;li&gt;Regular expressions.&lt;/li&gt; &#xA; &lt;li&gt;KamilaLisp as a shell (implementations of &lt;code&gt;sh:ls&lt;/code&gt;, &lt;code&gt;sh:glob&lt;/code&gt;, &lt;code&gt;sh:mv&lt;/code&gt;, &lt;code&gt;sh:basename&lt;/code&gt;, etc... - all usable from the REPL and from code, as they return plain data structures, launching and manipulating external processes).&lt;/li&gt; &#xA; &lt;li&gt;String functions (Shannon entropy, unicode handling, byte buffers, levenshtein distance, string interpolation/formatting)&lt;/li&gt; &#xA; &lt;li&gt;On-The-Fly Lexical scanner generation.&lt;/li&gt; &#xA; &lt;li&gt;Function compositions, partial application, variadic functions, static scoping.&lt;/li&gt; &#xA; &lt;li&gt;Tail call optimisation.&lt;/li&gt; &#xA; &lt;li&gt;Limits, complex limits.&lt;/li&gt; &#xA; &lt;li&gt;Indefinite integrals.&lt;/li&gt; &#xA; &lt;li&gt;Differentiation&lt;/li&gt; &#xA; &lt;li&gt;Polynomial factoring.&lt;/li&gt; &#xA; &lt;li&gt;Laurent, Taylor, MacLaurin and Puiseux series expansion.&lt;/li&gt; &#xA; &lt;li&gt;Functional de Bruijn indices.&lt;/li&gt; &#xA; &lt;li&gt;Possibility to write standalone non-interactive scripts.&lt;/li&gt; &#xA; &lt;li&gt;Symbolic matrix operations.&lt;/li&gt; &#xA; &lt;li&gt;Machine word operations (flt64:..., cmplx64:...) - Bessel functions, Hurwitz Zeta, Riemann Zeta, Upper/Lower Incomplete Gamma, Gamma, LogGamma, Pochhammer symbol, erf, erfc, Inverse erf, Inverse erfc, Digamma, Trigamma, Polygamma, Airy Ai, Bessel I, J, K and Y functions, Lerch Phi, Spence&#39;s function, Lambert W and Polylogarithm.&lt;/li&gt; &#xA; &lt;li&gt;Prompt styling.&lt;/li&gt; &#xA; &lt;li&gt;Portable.&lt;/li&gt; &#xA; &lt;li&gt;Graph data structure (e.g. directed, acyclic, weighted, etc...).&lt;/li&gt; &#xA; &lt;li&gt;Graph colouring (Saturation degree, greedy, largest degree first, smallest degree last, chordal, refinement, Brown backtrack).&lt;/li&gt; &#xA; &lt;li&gt;Graph clustering (Givman-Newman, k-Spanning tree, label propagation).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;SKI calculus:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;; SKI calculus&#xA;(defun SKI x&#xA;   (match x&#xA;      ((((S &#39;x) &#39;y) &#39;z) (tie (tie x z) (tie y z)))&#xA;      (((K &#39;x) &#39;y) x)&#xA;      ((I &#39;x) x)&#xA;      ((&#39;x &#39;y) (tie (SKI x) (SKI y)))&#xA;      (&#39;x x)))&#xA;&#xA;converge SKI &#39;(((S I) I) K)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;List operations and point-free programming:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;; Take numbers from 0 to 9999, sum the resulting list and its reverse,&#xA;; then take the amount of unique items, and verify if it equals one.&#xA;= 1 \⍴∘⊙∘[+ #0 ⌽] \⍳ 10000&#xA;&#xA;; In Haskell:&#xA;; (==1) . length . nub $ zipWith (+) &amp;lt;$&amp;gt; id &amp;lt;*&amp;gt; reverse $ [0..10000]&#xA;&#xA;; In APL:&#xA;; 1=⍴∪(⊢+⌽)⍳10000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;KamilaLisp is distributed under the GNU General Public License v3. See &lt;a href=&#34;https://github.com/kspalaiologos/kamilalisp/v0.2/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Lisp Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MalbolgeLISP v1.0-v1.2 - initial prototypes.&lt;/li&gt; &#xA; &lt;li&gt;KamilaLisp v0.1 (beta) - initial Java prototype, concept exploration.&lt;/li&gt; &#xA; &lt;li&gt;KamilaLisp v0.2 (beta) - design solidifying, API documentation.&lt;/li&gt; &#xA; &lt;li&gt;KamilaLisp v0.3 (release) - polishing more features, improved non-beta versioning scheme.&lt;/li&gt; &#xA; &lt;li&gt;KamilaLisp v0.4 (WIP) - a compiler and bytecode virtual machine.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;v0.3 versioning guide&lt;/h1&gt; &#xA;&lt;p&gt;Every KamilaLisp v0.3 release will be signed with PGP and package maintainers are advised to verify the signature. Every release will be tagged as &lt;code&gt;0.3.x.y&lt;/code&gt; where a bump of &lt;code&gt;x&lt;/code&gt; signifies a breaking change, while the bump of &lt;code&gt;y&lt;/code&gt; signifies a non-breaking change.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ReVanced/revanced-integrations</title>
    <updated>2024-03-05T01:27:58Z</updated>
    <id>tag:github.com,2024-03-05:/ReVanced/revanced-integrations</id>
    <link href="https://github.com/ReVanced/revanced-integrations" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🔩 ReVanced Integrations containing classes to be merged by ReVanced Patcher&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🔩 ReVanced Integrations&lt;/h1&gt; &#xA;&lt;p&gt;The official ReVanced Integrations containing classes to be merged by ReVanced Patcher.&lt;/p&gt; &#xA;&lt;h2&gt;❓ How to use debugging:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage on Windows: &lt;code&gt;adb logcat | findstr &#34;revanced&#34; &amp;gt; log.txt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Usage on Linux: &lt;code&gt;adb logcat | grep --line-buffered &#34;revanced&#34; &amp;gt; log.txt&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This will write the log to a file called log.txt which you can view then.&lt;/p&gt;</summary>
  </entry>
</feed>