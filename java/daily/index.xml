<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-04-26T01:32:02Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>eclipse/openvsx</title>
    <updated>2025-04-26T01:32:02Z</updated>
    <id>tag:github.com,2025-04-26:/eclipse/openvsx</id>
    <link href="https://github.com/eclipse/openvsx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open-source registry for VS Code extensions&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Eclipse Open VSX&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitpod.io/#https://github.com/eclipse/openvsx&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod&#34; alt=&#34;Gitpod Ready-to-Code&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://workspaces.openshift.com#https://github.com/eclipse/openvsx&#34;&gt;&lt;img src=&#34;https://www.eclipse.org/che/contribute.svg?sanitize=true&#34; alt=&#34;Contribute&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://join.slack.com/t/openvsxworkinggroup/shared_invite/zt-2y07y1ggy-ct3IfJljjGI6xWUQ9llv6A&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Slack-Join%20workspace-4A154B?logo=slack&amp;amp;logoColor=white&#34; alt=&#34;Slack workspace&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/eclipse/openvsx/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/eclipse/openvsx&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/eclipse/openvsx/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/tag/eclipse/openvsx?sort=semver&#34; alt=&#34;GitHub tag&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/eclipse/openvsx/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/eclipse/openvsx/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://develocity-staging.eclipse.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Revved%20up%20by-Develocity-06A0CE?logo=Gradle&amp;amp;labelColor=02303A&#34; alt=&#34;Revved up by Develocity&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Open VSX is a &lt;a href=&#34;https://projects.eclipse.org/projects/ecd.openvsx&#34;&gt;vendor-neutral&lt;/a&gt; open-source alternative to the &lt;a href=&#34;https://marketplace.visualstudio.com/vscode&#34;&gt;Visual Studio Marketplace&lt;/a&gt;. It provides a server application that manages &lt;a href=&#34;https://code.visualstudio.com/api&#34;&gt;VS Code extensions&lt;/a&gt; in a database, a web application similar to the VS Code Marketplace, and a command-line tool for publishing extensions similar to &lt;a href=&#34;https://code.visualstudio.com/api/working-with-extensions/publishing-extension#vsce&#34;&gt;vsce&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A public instance of Open VSX is running at &lt;a href=&#34;https://open-vsx.org/&#34;&gt;open-vsx.org&lt;/a&gt;. Please report issues related to that instance at &lt;a href=&#34;https://github.com/EclipseFdn/open-vsx.org&#34;&gt;EclipseFdn/open-vsx.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For information on publishing and managing extensions at open-vsx.org, please see the &lt;a href=&#34;https://github.com/EclipseFdn/open-vsx.org/wiki&#34;&gt;EclipseFdn/open-vsx.org wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/eclipse/openvsx/wiki&#34;&gt;openvsx Wiki&lt;/a&gt; for documentation of general concepts and usage of this project.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The easiest way to get a development environment for this project is to open it in &lt;a href=&#34;https://gitpod.io/&#34;&gt;Gitpod&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitpod.io/#https://github.com/eclipse/openvsx&#34;&gt;&lt;img src=&#34;https://gitpod.io/button/open-in-gitpod.svg?sanitize=true&#34; alt=&#34;Open in Gitpod&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Click &lt;em&gt;Open Browser&lt;/em&gt; on port 3000 to see the running web application.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open a development environment in &lt;a href=&#34;https://docs.redhat.com/en/documentation/red_hat_openshift_dev_spaces&#34;&gt;Red Hat OpenShift Dev Spaces&lt;/a&gt;, it is an open source product based on Eclipse Che that is running on &lt;a href=&#34;https://www.redhat.com/en/technologies/cloud-computing/openshift/dedicated&#34;&gt;OpenShift Dedicated&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://workspaces.openshift.com#https://github.com/eclipse/openvsx&#34;&gt;&lt;img src=&#34;https://www.eclipse.org/che/contribute.svg?sanitize=true&#34; alt=&#34;Open in Dev Spaces&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;cli&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn build&lt;/code&gt; — build the library and &lt;code&gt;ovsx&lt;/code&gt; command&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn watch&lt;/code&gt; — watch (build continuously)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The command line tool is available at &lt;code&gt;cli/lib/ovsx&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;webui&lt;/h3&gt; &#xA;&lt;p&gt;The default frontend is the one bundled in the Docker image, and is also used for testing in the development environment. It depends on the compiled library, so make sure to build or watch the library before you build or watch the default frontend.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn build&lt;/code&gt; — build the library&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn watch&lt;/code&gt; — watch (build continuously)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn build:default&lt;/code&gt; — build the default frontend (run webpack)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn watch:default&lt;/code&gt; — run webpack in watch mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn start:default&lt;/code&gt; — start Express to serve the frontend on port 3000&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The Express server is started automatically in Gitpod. A restart is usually not necessary.&lt;/p&gt; &#xA;&lt;h3&gt;server&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;./gradlew build&lt;/code&gt; — build and test the server&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;./gradlew assemble -t&lt;/code&gt; — build continuously (the server is restarted after every change)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;./gradlew runServer&lt;/code&gt; — start the Spring server on port 8080&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;./scripts/test-report.sh&lt;/code&gt; — display test results on port 8081&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The Spring server is started automatically in Gitpod. It includes &lt;code&gt;spring-boot-devtools&lt;/code&gt; which detects changes in the compiled class files and restarts the server.&lt;/p&gt; &#xA;&lt;h3&gt;OAuth Setup&lt;/h3&gt; &#xA;&lt;p&gt;If you would like to test authorization through GitHub, you need to &lt;a href=&#34;https://developer.github.com/apps/building-oauth-apps/creating-an-oauth-app/&#34;&gt;create an OAuth app&lt;/a&gt; with a callback URL pointing to the exposed port 8080 of your Gitpod workspace. You can get it by calling a script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;server/scripts/callback-url.sh github&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the callback URL needs to be &lt;a href=&#34;https://github.com/settings/developers&#34;&gt;updated on GitHub&lt;/a&gt; whenever you create a fresh Gitpod workspace.&lt;/p&gt; &#xA;&lt;p&gt;After you created the GitHub OAuth app, the next step is to copy the &lt;em&gt;Client ID&lt;/em&gt; and &lt;em&gt;Client Secret&lt;/em&gt; into &lt;a href=&#34;https://www.gitpod.io/docs/environment-variables/&#34;&gt;Gitpod environment variables&lt;/a&gt; named &lt;code&gt;GITHUB_CLIENT_ID&lt;/code&gt; and &lt;code&gt;GITHUB_CLIENT_SECRET&lt;/code&gt; and bound to this repository. If you change the variables in a running workspace, run &lt;code&gt;scripts/generate-properties.sh&lt;/code&gt; in the &lt;code&gt;server&lt;/code&gt; directory to update the application properties.&lt;/p&gt; &#xA;&lt;p&gt;With these settings in place, you should be able to log in by authorizing your OAuth app.&lt;/p&gt; &#xA;&lt;h3&gt;Docker Compose Setup&lt;/h3&gt; &#xA;&lt;p&gt;If you prefer to quickly get started with a local, docker-based development environment, you can use the approach described in our &lt;a href=&#34;https://raw.githubusercontent.com/eclipse/openvsx/master/doc/development.md#using-docker-compose&#34;&gt;docker compose setup&lt;/a&gt;. You can use our docker compose profiles, allowing you the option to either run a service directly in a docker container or to manually build and run it on your local machine.&lt;/p&gt; &#xA;&lt;h3&gt;Google Cloud Setup&lt;/h3&gt; &#xA;&lt;p&gt;If you would like to test file storage via Google Cloud, follow these steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a &lt;a href=&#34;https://cloud.google.com/&#34;&gt;GCP&lt;/a&gt; project and a bucket.&lt;/li&gt; &#xA; &lt;li&gt;Make the bucket public by granting the role &#34;Storage Object Viewer&#34; to &lt;code&gt;allUsers&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cloud.google.com/storage/docs/configuring-cors#configure-cors-bucket&#34;&gt;Configure CORS&lt;/a&gt; on the bucket with origin &lt;code&gt;&#34;*&#34;&lt;/code&gt; and method &lt;code&gt;&#34;GET&#34;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Create environment variables named &lt;code&gt;GCP_PROJECT_ID&lt;/code&gt; and &lt;code&gt;GCS_BUCKET_ID&lt;/code&gt; containing your GCP project and bucket identifiers. If you change the variables in a running workspace, run &lt;code&gt;scripts/generate-properties.sh&lt;/code&gt; in the &lt;code&gt;server&lt;/code&gt; directory to update the application properties.&lt;/li&gt; &#xA; &lt;li&gt;Create a GCP service account with role &#34;Storage Object Admin&#34; and copy its credentials file into your workspace.&lt;/li&gt; &#xA; &lt;li&gt;Create an environment variable &lt;code&gt;GOOGLE_APPLICATION_CREDENTIALS&lt;/code&gt; containing the path to the credentials file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Azure Setup&lt;/h3&gt; &#xA;&lt;p&gt;If you would like to test file storage via Azure Blob, follow these steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a file &lt;a href=&#34;https://portal.azure.com/&#34;&gt;storage account&lt;/a&gt; and a container named &lt;code&gt;openvsx-resources&lt;/code&gt; (a different name is possible if you change the &lt;code&gt;ovsx.storage.azure.blob-container&lt;/code&gt; property).&lt;/li&gt; &#xA; &lt;li&gt;Allow Blob public access in the storage account and set the container&#39;s public access level to &#34;Blob&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Configure CORS in your storage account with origin &lt;code&gt;&#34;*&#34;&lt;/code&gt;, method &lt;code&gt;&#34;GET&#34;&lt;/code&gt; and allowed headers &lt;code&gt;&#34;x-market-client-id, x-market-user-id, x-client-name, x-client-version, x-machine-id, x-client-commit&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create an environment variable &lt;code&gt;AZURE_SERVICE_ENDPOINT&lt;/code&gt; with the &#34;Blob service&#34; URL of your storage account. If you change the variables in a running workspace, run &lt;code&gt;scripts/generate-properties.sh&lt;/code&gt; in the &lt;code&gt;server&lt;/code&gt; directory to update the application properties.&lt;/li&gt; &#xA; &lt;li&gt;Generate a &#34;Shared access signature&#34; and put its token into an environment variable &lt;code&gt;AZURE_SAS_TOKEN&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you also would like to test download count via Azure Blob, follow these steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create an additional &lt;a href=&#34;https://portal.azure.com/&#34;&gt;storage account&lt;/a&gt; for diagnostics logging. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;IMPORTANT: set the same location as the file storage account (e.g. North Europe).&lt;/li&gt; &#xA;   &lt;li&gt;Disable Blob public access.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;In the file storage account &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Open the diagnostic settings (&lt;code&gt;Monitoring&lt;/code&gt; -&amp;gt; &lt;code&gt;Diagnostic settings (preview)&lt;/code&gt;). &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Click &lt;code&gt;blob&lt;/code&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;Click &lt;code&gt;Add diagnostic setting&lt;/code&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;Select &lt;code&gt;StorageRead&lt;/code&gt;, &lt;code&gt;Transaction&lt;/code&gt; and &lt;code&gt;Archive to a storage account&lt;/code&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;Select the diagnostic storage account you created in the previous step as &lt;code&gt;Storage account&lt;/code&gt;.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Back to the diagnostic storage account &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Navigate to &lt;code&gt;Data Storage&lt;/code&gt;-&amp;gt; &lt;code&gt;Containers&lt;/code&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;The &lt;code&gt;insights-logs-storageread&lt;/code&gt; container should have been added (it might take a few minutes and you might need to do some test downloads or it won&#39;t get created).&lt;/li&gt; &#xA;     &lt;li&gt;Create a &#34;Shared access token&#34; for the &lt;code&gt;insights-logs-storageread&lt;/code&gt; container. &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;Click on the &lt;code&gt;insights-logs-storageread&lt;/code&gt; container. &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;Click on &lt;code&gt;Settings&lt;/code&gt; -&amp;gt; &lt;code&gt;Shared access token&lt;/code&gt; &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;Must have &lt;code&gt;Read&lt;/code&gt; and &lt;code&gt;List&lt;/code&gt; permissions.&lt;/li&gt; &#xA;           &lt;li&gt;Set the expiry date to a reasonable value&lt;/li&gt; &#xA;           &lt;li&gt;Set the &#34;Allowed IP Addresses&#34; to the server&#39;s IP address.&lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Go to &lt;code&gt;Data Management&lt;/code&gt;-&amp;gt; &lt;code&gt;Lifecycle management&lt;/code&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Create a rule, so that logs don&#39;t pile up and the download count service stays performant.&lt;/li&gt; &#xA;     &lt;li&gt;Select &lt;code&gt;Limit blobs with filters&lt;/code&gt;, &lt;code&gt;Block blobs&lt;/code&gt; and &lt;code&gt;Base blobs&lt;/code&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;Pick number of days (e.g. 7).&lt;/li&gt; &#xA;     &lt;li&gt;Enter &lt;code&gt;insights-logs-storageread/resourceId=&lt;/code&gt; blob prefix to limit the rule to the &lt;code&gt;insights-logs-storageread&lt;/code&gt; container.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;You need to add two environment variables to your server environment &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;AZURE_LOGS_SERVICE_ENDPOINT&lt;/code&gt; with the &#34;Blob service&#34; URL of your diagnostic storage account. The URL must end with a slash!&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AZURE_LOGS_SAS_TOKEN&lt;/code&gt; with the shared access token for the &lt;code&gt;insights-logs-storageread&lt;/code&gt; container.&lt;/li&gt; &#xA;   &lt;li&gt;If you change the variables in a running workspace, run &lt;code&gt;scripts/generate-properties.sh&lt;/code&gt; in the &lt;code&gt;server&lt;/code&gt; directory to update the application properties.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Amazon S3 Setup&lt;/h3&gt; &#xA;&lt;p&gt;If you would like to test file storage via Amazon S3, follow these steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Login to the AWS Console and create an &lt;a href=&#34;https://s3.console.aws.amazon.com/s3/home?refid=ft_card&#34;&gt;S3 storage bucket&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Go to the bucket&#39;s &lt;code&gt;Permissions&lt;/code&gt; tab. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Disable the &lt;code&gt;Block all public access&lt;/code&gt; setting.&lt;/li&gt; &#xA;   &lt;li&gt;Add a &lt;code&gt;Cross-origin resource sharing (CORS)&lt;/code&gt; configuration: &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[&#xA;  {&#xA;      &#34;AllowedHeaders&#34;: [&#xA;          &#34;*&#34;&#xA;      ],&#xA;      &#34;AllowedMethods&#34;: [&#xA;          &#34;GET&#34;,&#xA;          &#34;HEAD&#34;&#xA;      ],&#xA;      &#34;AllowedOrigins&#34;: [&#xA;          &#34;*&#34;&#xA;      ],&#xA;      &#34;ExposeHeaders&#34;: []&#xA;  }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Follow the steps for &lt;a href=&#34;https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys&#34;&gt;programmatic access&lt;/a&gt; to create your access key id and secret access key&lt;/li&gt; &#xA; &lt;li&gt;Configure the following environment variables on your server environment &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;AWS_ACCESS_KEY_ID&lt;/code&gt; with your access key id&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AWS_SECRET_ACCESS_KEY&lt;/code&gt; with your secret access key&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AWS_REGION&lt;/code&gt; with your bucket region name&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AWS_SERVICE_ENDPOINT&lt;/code&gt; with the url of your S3 provider if not using AWS (for AWS do not set)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AWS_BUCKET&lt;/code&gt; with your bucket name&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AWS_PATH_STYLE_ACCESS&lt;/code&gt; whether or not to use path style access, (defaults to &lt;code&gt;false&lt;/code&gt;) &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Path-style access: &lt;code&gt;https://s3.&amp;lt;region&amp;gt;.amazonaws.com/&amp;lt;bucket-name&amp;gt;/&amp;lt;resource-key&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Virtual-style access: &lt;code&gt;https://&amp;lt;bucket-name&amp;gt;.s3.&amp;lt;region&amp;gt;.amazonaws.com/&amp;lt;resource-key&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.eclipse.org/legal/epl-2.0/&#34;&gt;Eclipse Public License 2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>msfroh/lucene-university</title>
    <updated>2025-04-26T01:32:02Z</updated>
    <id>tag:github.com,2025-04-26:/msfroh/lucene-university</id>
    <link href="https://github.com/msfroh/lucene-university" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Self-contained worked examples of Apache Lucene features and functionality&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Self-contained Lucene examples&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains some examples of &lt;a href=&#34;https://lucene.apache.org/&#34;&gt;Apache Lucene&lt;/a&gt; features with verbose explanations as code comments written in Markdown.&lt;/p&gt; &#xA;&lt;p&gt;The goal is to provide code samples that can be used a few ways:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Read the source code. The comments should make what&#39;s going on pretty clear.&lt;/li&gt; &#xA; &lt;li&gt;Open a code sample in your IDE and step through it with a debugger. Follow along with the comments as you go. Make changes to the code and see what happens. (Some examples include suggested changes.)&lt;/li&gt; &#xA; &lt;li&gt;Read the code and documentation as a web page generated with &lt;a href=&#34;https://ashkenas.com/docco/&#34;&gt;Docco&lt;/a&gt; over at &lt;a href=&#34;https://msfroh.github.io/lucene-university/docs/SimpleSearch.html&#34;&gt;https://msfroh.github.io/lucene-university/docs/SimpleSearch.html&lt;/a&gt;. (Go to the &#34;Jump to...&#34; box in the top-right to load other examples.) This should feel kind of like reading a book.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;This repository currently depends on Lucene 10, which requires JDK 21 or higher.&lt;/p&gt; &#xA;&lt;p&gt;You can clone the repository and build the examples with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/msfroh/lucene-university.git&#xA;cd lucene-university&#xA;./gradlew build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using IntelliJ, you can use &#34;File -&amp;gt; New -&amp;gt; Project from Existing Sources...&#34; and point it to the location where the code was cloned. Select &#34;Import Project from Existing Model&#34; and choose &#34;Gradle&#34; (assuming you have the Gradle plugin installed). If you run into errors regarding class file versions, you may need to go to &#34;File -&amp;gt; Project Structure...&#34; to make sure that you have selected the correct JDK (21 or higher) and set an appropriate language level.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! Check the &lt;a href=&#34;https://github.com/msfroh/lucene-university/issues&#34;&gt;GitHub issues&lt;/a&gt; for requests and suggestions for material to cover. If there is something else you think could use a worked example, feel free to directly open a pull request with an example or create an issue requesting one.&lt;/p&gt; &#xA;&lt;p&gt;Code examples should satisfy the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Each source file should be self-contained and should only import Lucene and Java classes. The example class should not inherit from anything else. If you need a small helper class, make it a &lt;code&gt;private static&lt;/code&gt; inner class.&lt;/li&gt; &#xA; &lt;li&gt;Each example class should have a &lt;code&gt;public static void main&lt;/code&gt; method that clearly walks through the steps to demonstrate the given feature.&lt;/li&gt; &#xA; &lt;li&gt;Each example should start with a comment with a large header (&lt;code&gt;// # This is title text&lt;/code&gt;), and a summary explaining what the example is about, before the &lt;code&gt;package&lt;/code&gt; declaration.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;All code in this repository is licensed under the Apache License, Version 2.0. See the LICENSE file in the root of the repository for the full text of the license.&lt;/p&gt;</summary>
  </entry>
</feed>