<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-28T01:37:28Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>alibaba/druid</title>
    <updated>2022-07-28T01:37:28Z</updated>
    <id>tag:github.com,2022-07-28:/alibaba/druid</id>
    <link href="https://github.com/alibaba/druid" rel="alternate"></link>
    <summary type="html">&lt;p&gt;阿里云计算平台DataWorks(https://help.aliyun.com/document_detail/137663.html) 团队出品，为监控而生的数据库连接池&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;druid&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/alibaba/fastjson2/actions/workflows/ci.yaml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/alibaba/fastjson2/Java%20CI/main?logo=github&amp;amp;logoColor=white&#34; alt=&#34;Java CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/alibaba/druid/branch/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/alibaba/driud/main?logo=codecov&amp;amp;logoColor=white&#34; alt=&#34;Codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/com.alibaba/druid/&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/com.alibaba/druid/badge.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/alibaba/druid/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/alibaba/druid.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%202-4EB1BA.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;git clone &lt;a href=&#34;https://github.com/alibaba/druid.git&#34;&gt;https://github.com/alibaba/druid.git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;cd druid &amp;amp;&amp;amp; mvn install&lt;/li&gt; &#xA; &lt;li&gt;have fun.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;相关阿里云产品&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://help.aliyun.com/document_detail/137663.html&#34;&gt;DataWorks数据集成&lt;/a&gt; &lt;img src=&#34;https://github.com/alibaba/druid/raw/master/doc/dataworks_datax.png&#34; alt=&#34;DataWorks&#34;&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;中文 &lt;a href=&#34;https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98&#34;&gt;https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;English &lt;a href=&#34;https://github.com/alibaba/druid/wiki/FAQ&#34;&gt;https://github.com/alibaba/druid/wiki/FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Druid Spring Boot Starter &lt;a href=&#34;https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter&#34;&gt;https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>netty/netty</title>
    <updated>2022-07-28T01:37:28Z</updated>
    <id>tag:github.com,2022-07-28:/netty/netty</id>
    <link href="https://github.com/netty/netty" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Netty project - an event-driven asynchronous network application framework&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/netty/netty/workflows/Build%20project/badge.svg?sanitize=true&#34; alt=&#34;Build project&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Netty Project&lt;/h1&gt; &#xA;&lt;p&gt;Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp;amp; clients.&lt;/p&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://netty.io/&#34;&gt;Web Site&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://netty.io/downloads.html&#34;&gt;Downloads&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://netty.io/wiki/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/netty_project&#34;&gt;@netty_project&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/q4aQ2XjaCa&#34;&gt;Official Discord server&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to build&lt;/h2&gt; &#xA;&lt;p&gt;For the detailed information about building and developing Netty, please visit &lt;a href=&#34;https://netty.io/wiki/developer-guide.html&#34;&gt;the developer guide&lt;/a&gt;. This page only gives very basic information.&lt;/p&gt; &#xA;&lt;p&gt;You require the following to build Netty:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Latest stable &lt;a href=&#34;https://adoptium.net/&#34;&gt;OpenJDK 8&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Latest stable &lt;a href=&#34;https://maven.apache.org/&#34;&gt;Apache Maven&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;If you are on Linux or MacOS, you need &lt;a href=&#34;https://netty.io/wiki/native-transports.html&#34;&gt;additional development packages&lt;/a&gt; installed on your system, because you&#39;ll build the native transport.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that this is build-time requirement. JDK 5 (for 3.x) or 6 (for 4.0+ / 4.1+) is enough to run your Netty-based application.&lt;/p&gt; &#xA;&lt;h2&gt;Branches to look&lt;/h2&gt; &#xA;&lt;p&gt;Development of all versions takes place in each branch whose name is identical to &lt;code&gt;&amp;lt;majorVersion&amp;gt;.&amp;lt;minorVersion&amp;gt;&lt;/code&gt;. For example, the development of 3.9 and 4.1 resides in &lt;a href=&#34;https://github.com/netty/netty/tree/3.9&#34;&gt;the branch &#39;3.9&#39;&lt;/a&gt; and &lt;a href=&#34;https://github.com/netty/netty/tree/4.1&#34;&gt;the branch &#39;4.1&#39;&lt;/a&gt; respectively.&lt;/p&gt; &#xA;&lt;h2&gt;Usage with JDK 9+&lt;/h2&gt; &#xA;&lt;p&gt;Netty can be used in modular JDK9+ applications as a collection of automatic modules. The module names follow the reverse-DNS style, and are derived from subproject names rather than root packages due to historical reasons. They are listed below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;io.netty.all&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;io.netty.buffer&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;io.netty.codec&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;io.netty.codec.dns&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;io.netty.codec.haproxy&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;io.netty.codec.http&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;io.netty.codec.http2&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;io.netty.codec.memcache&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;io.netty.codec.mqtt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;io.netty.codec.redis&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;io.netty.codec.smtp&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;io.netty.codec.socks&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;io.netty.codec.stomp&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;io.netty.codec.xml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;io.netty.common&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;io.netty.handler&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;io.netty.handler.proxy&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;io.netty.resolver&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;io.netty.resolver.dns&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;io.netty.transport&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;io.netty.transport.epoll&lt;/code&gt; (&lt;code&gt;native&lt;/code&gt; omitted - reserved keyword in Java)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;io.netty.transport.kqueue&lt;/code&gt; (&lt;code&gt;native&lt;/code&gt; omitted - reserved keyword in Java)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;io.netty.transport.unix.common&lt;/code&gt; (&lt;code&gt;native&lt;/code&gt; omitted - reserved keyword in Java)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;io.netty.transport.rxtx&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;io.netty.transport.sctp&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;io.netty.transport.udt&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Automatic modules do not provide any means to declare dependencies, so you need to list each used module separately in your &lt;code&gt;module-info&lt;/code&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>trinodb/trino</title>
    <updated>2022-07-28T01:37:28Z</updated>
    <id>tag:github.com,2022-07-28:/trinodb/trino</id>
    <link href="https://github.com/trinodb/trino" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official repository of Trino, the distributed SQL query engine for big data, formerly known as PrestoSQL (https://trino.io)&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://trino.io/&#34;&gt;&lt;img alt=&#34;Trino Logo&#34; src=&#34;https://raw.githubusercontent.com/trinodb/trino/master/.github/homepage.png&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt;Trino is a fast distributed SQL query engine for big data analytics.&lt;/b&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; See the &lt;a href=&#34;https://trino.io/docs/current/&#34;&gt;User Manual&lt;/a&gt; for deployment instructions and end user documentation. &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://trino.io/download.html&#34;&gt; &lt;img src=&#34;https://img.shields.io/maven-central/v/io.trino/trino-server.svg?label=Trino&#34; alt=&#34;Trino download&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://trino.io/slack.html&#34;&gt; &lt;img src=&#34;https://img.shields.io/static/v1?logo=slack&amp;amp;logoColor=959DA5&amp;amp;label=Slack&amp;amp;labelColor=333a41&amp;amp;message=join%20conversation&amp;amp;color=3AC358&#34; alt=&#34;Trino Slack&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://trino.io/trino-the-definitive-guide.html&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Trino%3A%20The%20Definitive%20Guide-download-brightgreen&#34; alt=&#34;Trino: The Definitive Guide book download&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/trinodb/trino/master/.github/DEVELOPMENT.md&#34;&gt;DEVELOPMENT&lt;/a&gt; for information about code style, development process, and guidelines.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/trinodb/trino/master/.github/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for contribution requirements.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;See the project &lt;a href=&#34;https://raw.githubusercontent.com/trinodb/trino/master/.github/SECURITY.md&#34;&gt;security policy&lt;/a&gt; for information about reporting vulnerabilities.&lt;/p&gt; &#xA;&lt;h2&gt;Build requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mac OS X or Linux&lt;/li&gt; &#xA; &lt;li&gt;Java 11.0.11+, 64-bit&lt;/li&gt; &#xA; &lt;li&gt;Docker&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building Trino&lt;/h2&gt; &#xA;&lt;p&gt;Trino is a standard Maven project. Simply run the following command from the project root directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./mvnw clean install -DskipTests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On the first build, Maven downloads all the dependencies from the internet and caches them in the local repository (&lt;code&gt;~/.m2/repository&lt;/code&gt;), which can take a while, depending on your connection speed. Subsequent builds are faster.&lt;/p&gt; &#xA;&lt;p&gt;Trino has a comprehensive set of tests that take a considerable amount of time to run, and are thus disabled by the above command. These tests are run by the CI system when you submit a pull request. We recommend only running tests locally for the areas of code that you change.&lt;/p&gt; &#xA;&lt;h2&gt;Running Trino in your IDE&lt;/h2&gt; &#xA;&lt;h3&gt;Overview&lt;/h3&gt; &#xA;&lt;p&gt;After building Trino for the first time, you can load the project into your IDE and run the server. We recommend using &lt;a href=&#34;http://www.jetbrains.com/idea/&#34;&gt;IntelliJ IDEA&lt;/a&gt;. Because Trino is a standard Maven project, you easily can import it into your IDE. In IntelliJ, choose &lt;em&gt;Open Project&lt;/em&gt; from the &lt;em&gt;Quick Start&lt;/em&gt; box or choose &lt;em&gt;Open&lt;/em&gt; from the &lt;em&gt;File&lt;/em&gt; menu and select the root &lt;code&gt;pom.xml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;After opening the project in IntelliJ, double check that the Java SDK is properly configured for the project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open the File menu and select Project Structure&lt;/li&gt; &#xA; &lt;li&gt;In the SDKs section, ensure that JDK 11 is selected (create one if none exist)&lt;/li&gt; &#xA; &lt;li&gt;In the Project section, ensure the Project language level is set to 11&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Running a testing server&lt;/h3&gt; &#xA;&lt;p&gt;The simplest way to run Trino for development is to run the &lt;code&gt;TpchQueryRunner&lt;/code&gt; class. It will start a development version of the server that is configured with the TPCH connector. You can then use the CLI to execute queries against this server. Many other connectors have their own &lt;code&gt;*QueryRunner&lt;/code&gt; class that you can use when working on a specific connector.&lt;/p&gt; &#xA;&lt;h3&gt;Running the full server&lt;/h3&gt; &#xA;&lt;p&gt;Trino comes with sample configuration that should work out-of-the-box for development. Use the following options to create a run configuration:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Main Class: &lt;code&gt;io.trino.server.DevelopmentServer&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;VM Options: &lt;code&gt;-ea -Dconfig=etc/config.properties -Dlog.levels-file=etc/log.properties -Djdk.attach.allowAttachSelf=true&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Working directory: &lt;code&gt;$MODULE_DIR$&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use classpath of module: &lt;code&gt;trino-server-dev&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The working directory should be the &lt;code&gt;trino-server-dev&lt;/code&gt; subdirectory. In IntelliJ, using &lt;code&gt;$MODULE_DIR$&lt;/code&gt; accomplishes this automatically.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;VM options&lt;/code&gt; doesn&#39;t exist in the dialog, you need to select &lt;code&gt;Modify options&lt;/code&gt; and enable &lt;code&gt;Add VM options&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Running the CLI&lt;/h3&gt; &#xA;&lt;p&gt;Start the CLI to connect to the server and run SQL queries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;client/trino-cli/target/trino-cli-*-executable.jar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run a query to see the nodes in the cluster:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;SELECT * FROM system.runtime.nodes;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run a query against the TPCH connector:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;SELECT * FROM tpch.tiny.region;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>