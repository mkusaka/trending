<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-09T01:31:45Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tjake/Jlama</title>
    <updated>2024-06-09T01:31:45Z</updated>
    <id>tag:github.com,2024-06-09:/tjake/Jlama</id>
    <link href="https://github.com/tjake/Jlama" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Jlama is a modern Java inference engine for LLMs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ü¶ô Jlama: A modern Java inference engine for LLMs&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/tjake/Jlama/main/docs/jlama.jpg&#34; width=&#34;300&#34; height=&#34;300&#34; alt=&#34;Cute Jlama&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/com.github.tjake/jlama-core&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/com.github.tjake/jlama-core/badge.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üöÄ Features&lt;/h2&gt; &#xA;&lt;p&gt;Model Support:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Gemma Models&lt;/li&gt; &#xA; &lt;li&gt;Llama &amp;amp; Llama2 Models&lt;/li&gt; &#xA; &lt;li&gt;Mistral &amp;amp; Mixtral Models&lt;/li&gt; &#xA; &lt;li&gt;GPT-2 Models&lt;/li&gt; &#xA; &lt;li&gt;BERT Models&lt;/li&gt; &#xA; &lt;li&gt;BPE Tokenizers&lt;/li&gt; &#xA; &lt;li&gt;WordPiece Tokenizers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Implements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Flash Attention&lt;/li&gt; &#xA; &lt;li&gt;Mixture of Experts&lt;/li&gt; &#xA; &lt;li&gt;Huggingface &lt;a href=&#34;https://github.com/huggingface/safetensors&#34;&gt;SafeTensors&lt;/a&gt; model and tokenizer format&lt;/li&gt; &#xA; &lt;li&gt;Support for F32, F16, BF16 models&lt;/li&gt; &#xA; &lt;li&gt;Support for Q8, Q4, Q5 model quantization&lt;/li&gt; &#xA; &lt;li&gt;Distributed Inference!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Jlama is built with Java 21 and utilizes the new &lt;a href=&#34;https://openjdk.org/jeps/448&#34;&gt;Vector API&lt;/a&gt; for faster inference.&lt;/p&gt; &#xA;&lt;h2&gt;‚≠ê Give us a star!&lt;/h2&gt; &#xA;&lt;p&gt;Like what you see? Please consider giving this a star (‚òÖ)!&lt;/p&gt; &#xA;&lt;h2&gt;ü§î What is it used for?&lt;/h2&gt; &#xA;&lt;p&gt;Add LLM Inference directly to your Java application.&lt;/p&gt; &#xA;&lt;h2&gt;üî¨ Demo&lt;/h2&gt; &#xA;&lt;p&gt;Jlama includes a simple UI if you just want to chat with an llm.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./run-cli.sh download tjake/llama2-7b-chat-hf-jlama-Q4&#xA;./run-cli.sh serve models/llama2-7b-chat-hf-jlama-Q4&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;open browser to &lt;a href=&#34;http://localhost:8080/ui/index.html&#34;&gt;http://localhost:8080/ui/index.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/tjake/Jlama/main/docs/demo.png&#34; alt=&#34;Demo chat&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;üïµÔ∏è‚Äç‚ôÄÔ∏è How to use&lt;/h2&gt; &#xA;&lt;p&gt;Jlama includes a cli tool to run models via the &lt;code&gt;run-cli.sh&lt;/code&gt; command. Before you do that first download one or more models from huggingface.&lt;/p&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;./run-cli.sh download&lt;/code&gt; command to download models from huggingface.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./run-cli.sh download gpt2-medium&#xA;./run-cli.sh download -t XXXXXXXX meta-llama/Llama-2-7b-chat-hf&#xA;./run-cli.sh download intfloat/e5-small-v2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run the cli tool to chat with the model or complete a prompt.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./run-cli.sh complete -p &#34;The best part of waking up is &#34; -t 0.7 -tc 16 -q Q4 -wq I8 models/Llama-2-7b-chat-hf&#xA;./run-cli.sh chat -p &#34;Tell me a joke about cats.&#34; -t 0.7 -tc 16 -q Q4 -wq I8 models/Llama-2-7b-chat-hf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üß™ Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Llama 2 7B&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Here is a poem about cats, incluing emojis: &#xA;This poem uses emojis to add an extra layer of meaning and fun to the text.&#xA;Cat, cat, so soft and sweet,&#xA;Purring, cuddling, can&#39;t be beat. üêàüíï&#xA;Fur so soft, eyes so bright,&#xA;Playful, curious, such a delight. üò∫üîç&#xA;Laps so warm, naps so long,&#xA;Sleepy, happy, never wrong. üò¥üòç&#xA;Pouncing, chasing, always fun,&#xA;Kitty&#39;s joy, never done. üêæüéâ&#xA;Whiskers twitch, ears so bright,&#xA;Cat&#39;s magic, pure delight. üîÆüí´&#xA;With a mew and a purr,&#xA;Cat&#39;s love, forever sure. üíïüêà&#xA;So here&#39;s to cats, so dear,&#xA;Purrfect, adorable, always near. üíïüêà&#xA;&#xA;elapsed: 37s, 159.518982ms per token&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;GPT-2 (355M parameters)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;In a shocking finding, scientist discovered a herd of unicorns living in a remote, previously unexplored valley, &#xA;in the Andes Mountains. Even more surprising to the researchers was the fact that the unicorns spoke perfect English.&#xA;a long and diverse and interesting story is told in this book. The author writes:&#xA;...&#xA;the stories of the unicornes seem to be based on the most vivid and vivid imagination; they are the stories of animals that are a kind of &#39;spirit animal&#39; , a partly-human spiritual animal that speaks in perfect English , and that often keep their language under mysterious and inaccessible circumstances.&#xA;...&#xA;While the unicorn stories are mostly about animals, they tell us about animals from other animal species. The unicorn stories are remarkable because they tell us about animals that are not animals at all . They speak and sing in perfect English , and they are very much human beings.&#xA;...&#xA;This book is not about the unicorn. It is not about anything in particular . It is about a brief and distinct group of animal beings who have been called into existence in a particular remote and unexplored valley in the Andes Mountains. They speak perfect English , and they are very human beings.&#xA;...&#xA;The most surprising thing about the tales of the unicorn&#xA;&#xA;elapsed: 10s, 49.437500ms per token&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üó∫Ô∏è Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support more models&lt;/li&gt; &#xA; &lt;li&gt;&lt;s&gt;Add pure java tokenizers&lt;/s&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;s&gt;Support Quantization (e.g. k-quantization)&lt;/s&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add LoRA support&lt;/li&gt; &#xA; &lt;li&gt;GraalVM support&lt;/li&gt; &#xA; &lt;li&gt;&lt;s&gt;Add distributed inference&lt;/s&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üè∑Ô∏è License and Citation&lt;/h2&gt; &#xA;&lt;p&gt;The code is available under &lt;a href=&#34;https://raw.githubusercontent.com/tjake/Jlama/main/LICENSE&#34;&gt;Apache License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you find this project helpful in your research, please cite this work at&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@misc{jlama2024,&#xA;    title = {Jlama: A modern Java inference engine for large language models},&#xA;    url = {https://github.com/tjake/jlama},&#xA;    author = {T Jake Luciani},&#xA;    month = {January},&#xA;    year = {2024}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>youtube/cobalt</title>
    <updated>2024-06-09T01:31:45Z</updated>
    <id>tag:github.com,2024-06-09:/youtube/cobalt</id>
    <link href="https://github.com/youtube/cobalt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cobalt is a lightweight HTML5 application container&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cobalt &lt;a href=&#34;https://github.com/youtube/cobalt/raw/main/BUILD_STATUS.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Build%20Matrix-blueviolet&#34; alt=&#34;Build Matrix&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codecov.io/github/youtube/cobalt&#34;&gt;&lt;img src=&#34;https://codecov.io/github/youtube/cobalt/branch/main/graph/badge.svg?token=RR6MKKNYNV&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/youtube/cobalt/actions/workflows/lint.yaml?query=event%3Apush+branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/youtube/cobalt/actions/workflows/lint.yaml/badge.svg?branch=main&amp;amp;event=push&#34; alt=&#34;lint&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/youtube/cobalt/actions/workflows/gradle.yaml?query=event%3Apush+branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/youtube/cobalt/actions/workflows/gradle.yaml/badge.svg?branch=main&amp;amp;event=push&#34; alt=&#34;java&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/youtube/cobalt/actions/workflows/pytest.yaml?query=event%3Apush+branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/youtube/cobalt/actions/workflows/pytest.yaml/badge.svg?branch=main&amp;amp;event=push&#34; alt=&#34;python&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/youtube/cobalt/actions/workflows/android.yaml?query=event%3Apush+branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/youtube/cobalt/actions/workflows/android.yaml/badge.svg?branch=main&amp;amp;event=push&#34; alt=&#34;android&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/youtube/cobalt/actions/workflows/evergreen.yaml?query=event%3Apush+branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/youtube/cobalt/actions/workflows/evergreen.yaml/badge.svg?branch=main&amp;amp;event=push&#34; alt=&#34;evergreen&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/youtube/cobalt/actions/workflows/linux.yaml?query=event%3Apush+branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/youtube/cobalt/actions/workflows/linux.yaml/badge.svg?branch=main&amp;amp;event=push&#34; alt=&#34;linux&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/youtube/cobalt/actions/workflows/raspi-2.yaml?query=event%3Apush+branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/youtube/cobalt/actions/workflows/raspi-2.yaml/badge.svg?branch=main&amp;amp;event=push&#34; alt=&#34;raspi-2&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/youtube/cobalt/actions/workflows/win32.yaml?query=event%3Apush+branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/youtube/cobalt/actions/workflows/win32.yaml/badge.svg?branch=main&amp;amp;event=push&#34; alt=&#34;win32&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/youtube/cobalt/actions/workflows/xb1.yaml?query=event%3Apush+branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/youtube/cobalt/actions/workflows/xb1.yaml/badge.svg?branch=main&amp;amp;event=push&#34; alt=&#34;xb1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Cobalt is a lightweight application container (i.e. an application runtime, like a JVM or the Flash Player) that is compatible with a subset of the W3C HTML5 specifications. If you author a single-page web application (SPA) that complies with the Cobalt Subset of W3C standards, it will run as well as possible on all the devices that Cobalt supports.&lt;/p&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;The Cobalt Authors originally maintained a port of Chromium called H5VCC, the HTML5 Video Container for Consoles, ported to each of the major game consoles, designed to run our HTML5-based video browse and play application. This took a long time to port to each platform, consisted of 9 million lines of C++ code (before we touched it), was dangerous to modify without unintended consequences, and was thoroughly designed for a resource-rich, multi-process environment (e.g. a desktop, laptop, or modern smartphone).&lt;/p&gt; &#xA;&lt;p&gt;After wrestling with this for several years, we imagined an environment that was not designed for traditional scrolling web content, but was intended to be a runtime environment for rich client applications built with the same technologies -- HTML, CSS, JavaScript -- and designed from the ground-up to run on constrained, embedded, Living Room Consumer Electronics (CE) devices, such as Game Consoles, Set-Top Boxes (e.g. Cable, Satellite), OTT devices (e.g. Roku, Apple TV, Chromecast, Fire TV), Blu-ray Disc Players, and Smart TVs.&lt;/p&gt; &#xA;&lt;p&gt;These constraints (not intended to be a canonical list) make this device spectrum vastly different from the desktop computer environment targeted by Chromium, FireFox, and IE:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Limited Memory.&lt;/strong&gt; All except the very latest, expensive CE devices have a very small amount of memory available for applications. This usually is somewhere in the ballpark of 500MB, including graphics and media memory, as opposed to multiple gigabytes of CPU memory (and more gigabytes of GPU memory) in modern desktop and laptop computers, and mobile devices.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Slow CPUs.&lt;/strong&gt; Most CE devices have much slower CPUs than what is available on even a budget desktop computer. Minor performance concerns can be greatly exaggerated, which seriously affects priorities. Cobalt currently expects a 4-core 32-bit ARMv7 CPU as a baseline.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Minimal GPU.&lt;/strong&gt; Not all CE devices have a monster GPU to throw shaders at to offload CPU work. As CE devices now have a standard GPU (though not nearly as powerful as even a laptop), OpenGL ES 2.0 is now required by Cobalt.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sometimes No JIT.&lt;/strong&gt; Many CE devices are dealing with &#34;High-Value Content,&#34; and, as such, are very sensitive to security concerns. Ensuring that writable pages are not executable is a strong security protocol that can prevent a wide spectrum of attacks. But, as a side effect, this also means no ability to JIT.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Heterogeneous Development Environments.&lt;/strong&gt; This is slowly evening out, but all CE devices run on custom hardware, often with proprietary methods of building, packaging, deploying, and running programs. Sometimes the toolchain doesn&#39;t support latest C++ language features. Sometimes the OS does not support POSIX, or it is only partially implemented. Sometimes the program entry point is in another language or architecture that requires a &#34;trampoline&#34; over to native binary code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;No navigation.&lt;/strong&gt; The point of a Single-Page Application is that you don&#39;t go through the HTTP page dance every time you switch screens. It&#39;s slow, and provides poor user feedback, not to mention a jarring transition. Instead, one loads data from an XMLHttpRequest (XHR), and then updates one&#39;s DOM to reflect the new data. AJAX! Web 2.0!!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;The Cobalt Authors forked H5VCC, removed most of the Chromium code -- in particular WebCore and the Chrome Renderer and Compositor -- and built up from scratch an implementation of a simplified subset of HTML, the CSS Box Model for layout, and the Web APIs that were really needed to build a full-screen SPA browse and play application.&lt;/p&gt; &#xA;&lt;p&gt;The Cobalt technology stack has these major components, roughly in a high-level application to a low-level platform order:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Web Implementation&lt;/strong&gt; - This is where the W3C standards are implemented, ultimately producing an annotated DOM tree that can be passed into the Layout Engine to produce a Render Tree. Cobalt uses a forked copy of &lt;a href=&#34;https://www.chromium.org/blink/webidl/&#34;&gt;Chrome Blink&#39;s Web IDL compiler&lt;/a&gt; to turn JavaScript IDLs to generated C++ bindings code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;JavaScript Engine&lt;/strong&gt; - We have, perhaps surprisingly, &lt;em&gt;not&lt;/em&gt; written our own JavaScript Engine from scratch. Cobalt is running on &lt;a href=&#34;https://v8.dev&#34;&gt;Chromiums V8&lt;/a&gt; JavaScript engine. V8 supports all of our target platforms, including very restricted ones where write-and-execute memory pages (needed for JIT) are not available.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Layout Engine&lt;/strong&gt; - The Layout Engine takes an annotated DOM Document produced by the Web Implementation and JavaScript Engine working together, and calculates a tree of rendering commands to send to the renderer (i.e. a Render Tree). It caches intermediate layout artifacts so that subsequent incremental layouts can be sped up.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Renderer/Skia&lt;/strong&gt; - The Renderer walks a Render Tree produced by the Layout Engine, rasterizes it using the &lt;a href=&#34;https://skia.org/&#34;&gt;Chromium graphics library Skia&lt;/a&gt;, and swaps it to the front buffer. This is accomplished using Hardware Skia on OpenGL ES 2.0. Note that the renderer runs in a different thread from the Layout Engine, and can interpolate animations that do not require re-layout. This decouples rendering from Layout and JavaScript, allowing for smooth, consistent animations on platforms with a variety of capabilities.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Net / Media&lt;/strong&gt; - These are Chromium&#39;s Network and Media engines. We are using them directly, as they don&#39;t cause any particular problems with the extra constraints listed above.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Base&lt;/strong&gt; - This is Chromium&#39;s &#34;Base&#34; library, which contains a wide variety of useful things used throughout Cobalt, Net, and Media. Cobalt uses a combination of standard C++ containers (e.g. vector, string) and Base as the foundation library for all of its code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Other Third-party Libraries&lt;/strong&gt; - Most of these are venerable, straight-C, open-source libraries that are commonly included in other open-source software. Mostly format decoders and parsers (e.g. libpng, libxml2, zlib). We fork these from Chromium, as we want them to be the most battle-tested versions of these libraries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Starboard&lt;/strong&gt; - &lt;strong&gt;Starboard&lt;/strong&gt; is the Cobalt porting interface. One major difference between Cobalt and Chromium is that we have created a hard straight-C porting layer, and ported ALL of the compiled code, including Base and all third-party libraries, to use it instead of directly using POSIX standard libraries, which are not consistent, even on modern systems (see Android, Windows, MacOS X, and iOS). Additionally, Starboard includes APIs that haven&#39;t been effectively standardized across platforms, such as display Window creation, Input events, and Media playback. A good overview of which OS interfaces are abstracted by Starboard can be found in the &lt;a href=&#34;https://cobalt.dev/reference/starboard/modules/configuration.html&#34;&gt;reference documentation.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ANGLE and Glimp&lt;/strong&gt; &lt;a href=&#34;https://angleproject.org/&#34;&gt;&lt;strong&gt;ANGLE&lt;/strong&gt; is a Chromium library&lt;/a&gt; that adapts OpenGL ES 2.0 graphics to various other platform-native graphics APIs. Cobalt uses it on Windows platforms to run on DirectX. Glimp is a similar custom adapter layer that translatest from GL ES2.0 to PlayStation native graphics.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;The Cobalt Subset&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Oh, we got both kinds of HTML tags,&lt;br&gt; we got &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;! &lt;br&gt; We even have CSS Flexbox now, hooray!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://cobalt.dev/development/reference/supported-features.html&#34;&gt;Cobalt Subset specification&lt;/a&gt; for more details on which tags, properties, and Web APIs are supported in Cobalt.&lt;/p&gt; &#xA;&lt;h2&gt;Interesting Source Locations&lt;/h2&gt; &#xA;&lt;p&gt;All source locations are specified relative to &lt;code&gt;src/&lt;/code&gt; (this directory).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;base/&lt;/code&gt; - Chromium&#39;s Base library. Contains common utilities, and a light platform abstraction, which has been superseded in Cobalt by Starboard.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;net/&lt;/code&gt; - Chromium&#39;s Network library. Contains enough infrastructure to support the network needs of an HTTP User-Agent (like Chromium or Cobalt), an HTTP server, a DIAL server, and several abstractions for networking primitives. Also contains SPDY and QUIC implementations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cobalt/&lt;/code&gt; - The home of all Cobalt application code. This includes the Web Implementation, Layout Engine, Renderer, and some other Cobalt-specific features. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;cobalt/build/&lt;/code&gt; - The core build generation system, &lt;code&gt;gn.py&lt;/code&gt;, and configurations for supported platforms.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cobalt/doc/&lt;/code&gt; - Contains a wide range of detailed information and guides on Cobalt features, functionality and best practices for Cobalt development.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cobalt/media/&lt;/code&gt; - Chromium&#39;s Media library. Contains all the code that parses, processes, and manages buffers of video and audio data. It send the buffers to the SbPlayer implementation for playback.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;starboard/&lt;/code&gt; - Cobalt&#39;s porting layer. Please see Starboard&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/youtube/cobalt/main/starboard/README.md&#34;&gt;&lt;code&gt;README.md&lt;/code&gt;&lt;/a&gt; for more detailed information about porting Starboard (and Cobalt) to a new platform.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;third_party/&lt;/code&gt; - Where all of Cobalt&#39;s third-party dependencies live. We don&#39;t mean to be pejorative, we love our third-party libraries! This location is dictated by Google OSS release management rules...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building and Running the Code&lt;/h2&gt; &#xA;&lt;p&gt;See the below reference port setup guides for more details:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/youtube/cobalt/main/cobalt/site/docs/development/setup-linux.md&#34;&gt;Linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/youtube/cobalt/main/cobalt/site/docs/development/setup-raspi.md&#34;&gt;Raspi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/youtube/cobalt/main/cobalt/site/docs/development/setup-android.md&#34;&gt;Android&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/youtube/cobalt/main/cobalt/site/docs/development/setup-docker.md&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/youtube/cobalt/main/cobalt/site/docs/development/setup-rdk.md&#34;&gt;RDK&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build Types&lt;/h2&gt; &#xA;&lt;p&gt;Cobalt has four build optimization levels, going from the slowest, least optimized, with the most debug information at the top (debug) to the fastest, most optimized, and with the least debug information at the bottom (gold):&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Type&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Optimizations&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Logging&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Asserts&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Debug Info&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Console&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;debug&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;None&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Full&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Full&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Full&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enabled&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;devel&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Full&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Full&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Full&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Full&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enabled&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;qa&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Full&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Limited&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;None&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;None&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enabled&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;gold&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Full&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;None&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;None&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;None&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disabled&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;When building for release, you should always use a gold build for the final product.&lt;/p&gt; &#xA;&lt;h2&gt;Origin of this Repository&lt;/h2&gt; &#xA;&lt;p&gt;This is a fork of the chromium repository at &lt;a href=&#34;http://git.chromium.org/git/chromium.git&#34;&gt;http://git.chromium.org/git/chromium.git&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>confluentinc/parallel-consumer</title>
    <updated>2024-06-09T01:31:45Z</updated>
    <id>tag:github.com,2024-06-09:/confluentinc/parallel-consumer</id>
    <link href="https://github.com/confluentinc/parallel-consumer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Parallel Apache Kafka client wrapper with per message ACK, client side queueing, a simpler consumer/producer API with key concurrency and extendable non-blocking IO processing.&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>