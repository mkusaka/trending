<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-12T01:31:44Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>qiurunze123/miaosha</title>
    <updated>2022-08-12T01:31:44Z</updated>
    <id>tag:github.com,2022-08-12:/qiurunze123/miaosha</id>
    <link href="https://github.com/qiurunze123/miaosha" rel="alternate"></link>
    <summary type="html">&lt;p&gt;⭐⭐⭐⭐秒杀系统设计与实现.互联网工程师进阶与分析🙋🐓&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/qiurunze123/imageall/master/miaoshashejitu.png&#34; alt=&#34;互联网 Java 秒杀系统设计与架构&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;邮箱 : &lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/QiuRunZe_key@163.com&#34;&gt;QiuRunZe_key@163.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Github : &lt;a href=&#34;https://github.com/qiurunze123&#34;&gt;https://github.com/qiurunze123&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;微信(阿里推荐-可帮忙推荐 与 修改简历 )：微信名称：qiurunzeaixiaoju 群人数较多 备注 年限-姓名 加我后我来拉你进群&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;为大家举办这个活动 团队的人都有经验可以帮着大家修改简历 日期持续到6-18号 过后可能需要再约时间 大家看到后可加我 免费的哈！也是一个和专家沟通的机会&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;QQ : &lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/3341386488&#34;&gt;3341386488&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;QQ群1(秒杀架构一群) :&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/qiurunze123/imageall/master/qq.png&#34; alt=&#34;整体流程&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;QQ群2(秒杀架构二群) :&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/qiurunze123/imageall/master/miaosha22.png&#34; alt=&#34;整体流程&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;QQ群3(多线程交流群 三高系统 -- 并发框架) :&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/qiurunze123/imageall/master/%E9%AB%98%E5%B9%B6%E5%8F%91.png&#34; alt=&#34;整体流程&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/qiurunze123&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/language-Java-yellow.svg?sanitize=true&#34; alt=&#34;Travis&#34;&gt;&lt;/a&gt; 高并发大流量如何进行秒杀架构，我对这部分知识做了一个系统的整理，写了一套系统。本GitHub还有许多其他的知识，随时欢迎探讨与骚扰！本文还在更新如果文章出现瑕疵请及时与我联系！&lt;/p&gt; &#xA;&lt;p&gt;文章还有许多不足，我仍在不断改进！如果你本地没有这些环境,可以先找我要我的阿里云地址,看效果！ ps: 本文章基础思路来自于若鱼1919老师！大家可以关注老师的课和博客很不错,老师很nice！ 谢谢大家 ！课程地址：&lt;a href=&#34;https://coding.imooc.com/class/168.html&#34;&gt;https://coding.imooc.com/class/168.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;一点小建议：学习本系列知识之前，如果你完全没接触过 &lt;code&gt;MQ&lt;/code&gt;、&lt;code&gt;SpringBoot&lt;/code&gt;、&lt;code&gt;Redis&lt;/code&gt;、&lt;code&gt;Dubbo&lt;/code&gt;、&lt;code&gt;ZK&lt;/code&gt; 、&lt;code&gt;Maven&lt;/code&gt;,&lt;code&gt;lua&lt;/code&gt;等，那么我建议你可以先在网上搜一下每一块知识的快速入门， 也可以下载本项目边做边学习，我的项目完全是实战加讲解不想写一堆的文章，浪费我们的生命，你还不懂内层含义，想要明白就边实际操作边学习，效果会更好！加油💪💪&lt;/p&gt; &#xA;&lt;h3&gt;最初版本请下载 (&lt;a href=&#34;https://pan.baidu.com/s/1sld8RBSvLe2q4gc-Z-fVAQ&#34;&gt;https://pan.baidu.com/s/1sld8RBSvLe2q4gc-Z-fVAQ&lt;/a&gt;)&lt;/h3&gt; &#xA;&lt;h3&gt;如果想先看dubbo + zk 了解请下载we-miaosha ，miaosha-order 为项目分离示例项目！会不断完善！此版本为springboot2.0+ 请使JDK1.8+&lt;/h3&gt; &#xA;&lt;h3&gt;start 维护 开始搭建&lt;/h3&gt; &#xA;&lt;h2&gt;重点 --- 启动与运行&lt;/h2&gt; &#xA;&lt;p&gt;*** 如何搭建以及接入新思想 （新版本请进入）***&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/qiurunze123/aircrafttravel&#34;&gt;程序如何搭建新版本并运行起来&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;软件环境 : 请选择稳定版&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/qiurunze123/imageall/master/miaosha.png&#34; alt=&#34;整体流程&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;未来设计图 : 未来设计&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/qiurunze123/imageall/master/miaoshafuture.png&#34; alt=&#34;整体流程&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;软件环境 : mysql 数据库表设计&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/qiurunze123/imageall/master/miaoshasql.png&#34; alt=&#34;整体流程&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;1.需注意 因为秒杀，大促，打折等活动进行频繁，所以需要单独建立秒杀_....表来管理否则会经常进行回归&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;2.本sql只是进行模拟，现实情况比这个信息要复杂的多，你可以把它看作是一个简化版本的sql&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;3.访问地址 &lt;a href=&#34;http://localhost:8080/login/to_login&#34;&gt;http://localhost:8080/login/to_login&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;以下所有内容都已完成，但是因内容多需逐渐整理上传！ 专题的部分也会尽快上传更新！ 立个flag 半年内吧争取全部更新完！各位稍安勿躁！&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/code-criterion.md&#34;&gt;如要提交代码请先看--提交合并代码规范提交者的后面都会有署名方便大家问问题&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;ID&lt;/th&gt; &#xA;   &lt;th&gt;Problem&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Article&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;000&lt;/td&gt; &#xA;   &lt;td&gt;如何解决卖超问题&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/code-solve.md&#34;&gt;解决思路&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;001&lt;/td&gt; &#xA;   &lt;td&gt;如何对本项目进行jmeter压测&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/jemter-solve.md&#34;&gt;解决思路&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;003&lt;/td&gt; &#xA;   &lt;td&gt;全局异常处理拦截&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/code-solve.md&#34;&gt;解决思路&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;003&lt;/td&gt; &#xA;   &lt;td&gt;页面级缓存thymeleafViewResolver&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/code-solve.md&#34;&gt;解决思路&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;004&lt;/td&gt; &#xA;   &lt;td&gt;对象级缓存redis🙋🐓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/code-solve.md&#34;&gt;解决思路&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;005&lt;/td&gt; &#xA;   &lt;td&gt;订单处理队列rabbitmq&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/code-solve.md&#34;&gt;解决思路&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;006&lt;/td&gt; &#xA;   &lt;td&gt;解决分布式session&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/code-solve.md&#34;&gt;解决思路&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;007&lt;/td&gt; &#xA;   &lt;td&gt;秒杀安全 -- 安全性设计&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/code-solve.md&#34;&gt;解决思路&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;008&lt;/td&gt; &#xA;   &lt;td&gt;通用缓存key的封装采用什么设计模式&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/code-solve.md&#34;&gt;解决思路&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;009&lt;/td&gt; &#xA;   &lt;td&gt;redis的库存如何与数据库的库存保持一致&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/code-solve.md&#34;&gt;解决思路&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;010&lt;/td&gt; &#xA;   &lt;td&gt;为什么redis数量会减少为负数&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/code-solve.md&#34;&gt;解决思路&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;011&lt;/td&gt; &#xA;   &lt;td&gt;为什么要单独维护一个秒杀结束标志&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/code-solve.md&#34;&gt;解决思路&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;012&lt;/td&gt; &#xA;   &lt;td&gt;rabbitmq如何做到消息不重复不丢失即使服务器重启&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/code-solve.md&#34;&gt;解决思路&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;013&lt;/td&gt; &#xA;   &lt;td&gt;为什么threadlocal存储user对象，原理&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/code-solve.md&#34;&gt;解决思路&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;014&lt;/td&gt; &#xA;   &lt;td&gt;maven 隔离&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/code-solve.md&#34;&gt;解决思路&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;015&lt;/td&gt; &#xA;   &lt;td&gt;服务降级--服务熔断(过载保护)(未更新)）&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/code-solve.md&#34;&gt;解决思路&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;016&lt;/td&gt; &#xA;   &lt;td&gt;redis 分布式锁实现方法&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/code-solve.md&#34;&gt;解决思路&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;017&lt;/td&gt; &#xA;   &lt;td&gt;定时关单模拟与分布式锁(未更新文章--代码已更新)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/time-close.md&#34;&gt;解决思路&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;018&lt;/td&gt; &#xA;   &lt;td&gt;tomcat配置和优化&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/(/docs/tomcat-good.md)&#34;&gt;解决思路&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;018&lt;/td&gt; &#xA;   &lt;td&gt;tomcat集群配置&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/tomcat-group.md&#34;&gt;解决思路&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;020&lt;/td&gt; &#xA;   &lt;td&gt;Nginx优化（前端缓存）&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/ngnix-good.md&#34;&gt;解决思路&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;021&lt;/td&gt; &#xA;   &lt;td&gt;重点 *** RPC分布式补偿如何解决(已更新 两种写法)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/code-rpc.md&#34;&gt;解决思路&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;022&lt;/td&gt; &#xA;   &lt;td&gt;分布式事物解决方案（已更新 -- 最新的思路和写法）&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/code-rpc.md&#34;&gt;解决思路&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;023&lt;/td&gt; &#xA;   &lt;td&gt;mysql主从复制思路及实操（未更新代码）&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/mysql-master-slave.md&#34;&gt;解决思路&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;024&lt;/td&gt; &#xA;   &lt;td&gt;如何进行分库分表&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/mysql-master-slave.md&#34;&gt;解决思路&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;025&lt;/td&gt; &#xA;   &lt;td&gt;秒杀类似场景sql的写法注意事项有哪些？&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/mysql-master-slave.md&#34;&gt;解决思路&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;026&lt;/td&gt; &#xA;   &lt;td&gt;如何利用lua脚本进行操作限流与分布式锁（可保证原子性）？&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/redis-good.md&#34;&gt;解决思路&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;027&lt;/td&gt; &#xA;   &lt;td&gt;如何利用lua脚本进行分布式锁操作？&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/redis-good.md&#34;&gt;解决思路&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;028&lt;/td&gt; &#xA;   &lt;td&gt;网站访问统计实现？&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/code-solve.md&#34;&gt;解决思路&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;028&lt;/td&gt; &#xA;   &lt;td&gt;项目进行dubbo + zk 改造 (已完成dubbo嵌入--springboot 与dubbo结合xml版本)？&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/code-solve.md&#34;&gt;解决思路&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;029&lt;/td&gt; &#xA;   &lt;td&gt;dubbo客户端 dubbo-admin管理平台 搭建安装&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/dubbo-admin.md&#34;&gt;解决思路&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;030&lt;/td&gt; &#xA;   &lt;td&gt;如何利用dubbo 的mock 来进行服务降级本地伪装 ?? (有更好的方式进群@我)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/dubbo-zk.md&#34;&gt;解决思路&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;031&lt;/td&gt; &#xA;   &lt;td&gt;*** 如何利用lua + redis 取代 nigix + lua 脚本进行分布式限流 (请看miaosha-2version) ？ ***&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/redis-good.md&#34;&gt;解决思路&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;032&lt;/td&gt; &#xA;   &lt;td&gt;多数据源配置 如何进行多数据源配置&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/code-solve.md&#34;&gt;解决思路&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/fenbushi.md&#34;&gt;分布式系统发展历程（已更新）&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/jvm-goods.md&#34;&gt;生产环境内存调优&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/mybatis-code.md&#34;&gt;mybatis源码解析与使用--未更新&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/redis-good.md&#34;&gt;redis 使用与进阶以及如何进行集群--已更新&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/redis-code.md&#34;&gt;spring源码--未更新&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/dubbo-zk.md&#34;&gt;分布式治理框架-dubbo - zk - 解析--更新中&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/qiurunze123/threadandjuc&#34;&gt;多线程分析以及三高多线程demo系统 &lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/redis-code.md&#34;&gt;微服务框架--未更新&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;-------------------------------------------------|&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/mysql.md&#34;&gt;mysql数据库优化及架构学习&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h5&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/mysql.md&#34;&gt;mysql数据库设计规范(已更新)&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;h5&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/mysql-1.md&#34;&gt;mysql数据库设计实例(已更新)&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;h5&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/mysql-2.md&#34;&gt;mysql数据库执行计划分析（已更新）&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;h5&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/mysql-3.md&#34;&gt;mysql数据库备份和恢复(已更新)&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;h5&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/mysql-3.md&#34;&gt;mysql数据库架构变迁(已更新)&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;h5&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/mysql-mvcc.md&#34;&gt;mysql数据库MVCC(已更新)&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;p&gt;--------------------------------------------------|&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/netty.md&#34;&gt;netty专题(已更新 by liuxiangyu)&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/linux.md&#34;&gt;linux专题&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/code-solve.md&#34;&gt;面试专题（最后更新）--未更新&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h6&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qiurunze123/miaosha/master/docs/maven-wrapper.md&#34;&gt;maven-wrapper介绍(add by zhangkai)&lt;/a&gt;&lt;/h6&gt;</summary>
  </entry>
  <entry>
    <title>spring-cloud/spring-cloud-gateway</title>
    <updated>2022-08-12T01:31:44Z</updated>
    <id>tag:github.com,2022-08-12:/spring-cloud/spring-cloud-gateway</id>
    <link href="https://github.com/spring-cloud/spring-cloud-gateway" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Gateway built on Spring Framework and Spring Boot providing routing and more.&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>confluentinc/ksql</title>
    <updated>2022-08-12T01:31:44Z</updated>
    <id>tag:github.com,2022-08-12:/confluentinc/ksql</id>
    <link href="https://github.com/confluentinc/ksql" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The database purpose-built for stream processing applications.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/confluentinc/ksql/master/ksql-rocket.png&#34; alt=&#34;KSQL rocket&#34;&gt; ksqlDB&lt;/h1&gt; &#xA;&lt;h3&gt;The database purpose-built for stream processing applications&lt;/h3&gt; &#xA;&lt;h1&gt;Overview&lt;/h1&gt; &#xA;&lt;p&gt;ksqlDB is a database for building stream processing applications on top of Apache Kafka. It is &lt;strong&gt;distributed&lt;/strong&gt;, &lt;strong&gt;scalable&lt;/strong&gt;, &lt;strong&gt;reliable&lt;/strong&gt;, and &lt;strong&gt;real-time&lt;/strong&gt;. ksqlDB combines the power of real-time stream processing with the approachable feel of a relational database through a familiar, lightweight SQL syntax. ksqlDB offers these core primitives:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://docs.ksqldb.io/en/latest/concepts/collections/streams/&#34;&gt;Streams&lt;/a&gt; and &lt;a href=&#34;https://docs.ksqldb.io/en/latest/concepts/collections/tables/&#34;&gt;tables&lt;/a&gt;&lt;/strong&gt; - Create relations with schemas over your Apache Kafka topic data&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://docs.ksqldb.io/en/latest/concepts/materialized-views/&#34;&gt;Materialized views&lt;/a&gt;&lt;/strong&gt; - Define real-time, incrementally updated materialized views over streams using SQL&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://docs.ksqldb.io/en/latest/concepts/queries/push/&#34;&gt;Push queries&lt;/a&gt;&lt;/strong&gt;- Continuous queries that push incremental results to clients in real time&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://docs.ksqldb.io/en/latest/concepts/queries/pull/&#34;&gt;Pull queries&lt;/a&gt;&lt;/strong&gt; - Query materialized views on demand, much like with a traditional database&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://docs.ksqldb.io/en/latest/concepts/connectors&#34;&gt;Connect&lt;/a&gt;&lt;/strong&gt; - Integrate with any &lt;a href=&#34;https://docs.confluent.io/current/connect/index.html&#34;&gt;Kafka Connect&lt;/a&gt; data source or sink, entirely from within ksqlDB&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Composing these powerful primitives enables you to build a complete streaming app with just SQL statements, minimizing complexity and operational overhead. ksqlDB supports a wide range of operations including aggregations, joins, windowing, sessionization, and much more. You can find more ksqlDB tutorials and resources &lt;a href=&#34;https://developer.confluent.io/tutorials/use-cases.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Follow the &lt;a href=&#34;https://ksqldb.io/quickstart.html&#34;&gt;ksqlDB quickstart&lt;/a&gt; to get started in just a few minutes.&lt;/li&gt; &#xA; &lt;li&gt;Read through the &lt;a href=&#34;https://docs.ksqldb.io&#34;&gt;ksqlDB documentation&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Take a look at some &lt;a href=&#34;https://developer.confluent.io/tutorials/use-cases.html&#34;&gt;ksqlDB use case recipes&lt;/a&gt; for examples of common patterns.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://docs.ksqldb.io/&#34;&gt;ksqlDB documentation&lt;/a&gt; for the latest stable release.&lt;/p&gt; &#xA;&lt;h1&gt;Use Cases and Examples&lt;/h1&gt; &#xA;&lt;h2&gt;Materialized views&lt;/h2&gt; &#xA;&lt;p&gt;ksqlDB allows you to define materialized views over your streams and tables. Materialized views are defined by what is known as a &#34;persistent query&#34;. These queries are known as persistent because they maintain their incrementally updated results using a table.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE TABLE hourly_metrics AS&#xA;  SELECT url, COUNT(*)&#xA;  FROM page_views&#xA;  WINDOW TUMBLING (SIZE 1 HOUR)&#xA;  GROUP BY url EMIT CHANGES;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Results may be &lt;strong&gt;&#34;pulled&#34;&lt;/strong&gt; from materialized views on demand via &lt;code&gt;SELECT&lt;/code&gt; queries. The following query will return a single row:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM hourly_metrics&#xA;  WHERE url = &#39;http://myurl.com&#39; AND WINDOWSTART = &#39;2019-11-20T19:00&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Results may also be continuously &lt;strong&gt;&#34;pushed&#34;&lt;/strong&gt; to clients via streaming &lt;code&gt;SELECT&lt;/code&gt; queries. The following streaming query will push to the client all incremental changes made to the materialized view:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM hourly_metrics EMIT CHANGES;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Streaming queries will run perpetually until they are explicitly terminated.&lt;/p&gt; &#xA;&lt;h2&gt;Streaming ETL&lt;/h2&gt; &#xA;&lt;p&gt;Apache Kafka is a popular choice for powering data pipelines. ksqlDB makes it simple to transform data within the pipeline, readying messages to cleanly land in another system.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE STREAM vip_actions AS&#xA;  SELECT userid, page, action&#xA;  FROM clickstream c&#xA;  LEFT JOIN users u ON c.userid = u.user_id&#xA;  WHERE u.level = &#39;Platinum&#39; EMIT CHANGES;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Anomaly Detection&lt;/h2&gt; &#xA;&lt;p&gt;ksqlDB is a good fit for identifying patterns or anomalies on real-time data. By processing the stream as data arrives you can identify and properly surface out of the ordinary events with millisecond latency.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE TABLE possible_fraud AS&#xA;  SELECT card_number, count(*)&#xA;  FROM authorization_attempts&#xA;  WINDOW TUMBLING (SIZE 5 SECONDS)&#xA;  GROUP BY card_number&#xA;  HAVING count(*) &amp;gt; 3 EMIT CHANGES;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Monitoring&lt;/h2&gt; &#xA;&lt;p&gt;Kafka&#39;s ability to provide scalable ordered records with stream processing make it a common solution for log data monitoring and alerting. ksqlDB lends a familiar syntax for tracking, understanding, and managing alerts.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE TABLE error_counts AS&#xA;  SELECT error_code, count(*)&#xA;  FROM monitoring_stream&#xA;  WINDOW TUMBLING (SIZE 1 MINUTE)&#xA;  WHERE  type = &#39;ERROR&#39;&#xA;  GROUP BY error_code EMIT CHANGES;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Integration with External Data Sources and Sinks&lt;/h2&gt; &#xA;&lt;p&gt;ksqlDB includes native integration with &lt;a href=&#34;https://docs.ksqldb.io/en/latest/concepts/connectors&#34;&gt;Kafka Connect&lt;/a&gt; data sources and sinks, effectively providing a unified SQL interface over a &lt;a href=&#34;https://www.confluent.io/hub&#34;&gt;broad variety of external systems&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The following query is a simple persistent streaming query that will produce all of its output into a topic named &lt;code&gt;clicks_transformed&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE STREAM clicks_transformed AS&#xA;  SELECT userid, page, action&#xA;  FROM clickstream c&#xA;  LEFT JOIN users u ON c.userid = u.user_id EMIT CHANGES;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Rather than simply send all continuous query output into a Kafka topic, it is often very useful to route the output into another datastore. ksqlDB&#39;s Kafka Connect integration makes this pattern very easy.&lt;/p&gt; &#xA;&lt;p&gt;The following statement will create a Kafka Connect sink connector that continuously sends all output from the above streaming ETL query directly into Elasticsearch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt; CREATE SINK CONNECTOR es_sink WITH (&#xA;  &#39;connector.class&#39; = &#39;io.confluent.connect.elasticsearch.ElasticsearchSinkConnector&#39;,&#xA;  &#39;key.converter&#39;   = &#39;org.apache.kafka.connect.storage.StringConverter&#39;,&#xA;  &#39;topics&#39;          = &#39;clicks_transformed&#39;,&#xA;  &#39;key.ignore&#39;      = &#39;true&#39;,&#xA;  &#39;schema.ignore&#39;   = &#39;true&#39;,&#xA;  &#39;type.name&#39;       = &#39;&#39;,&#xA;  &#39;connection.url&#39;  = &#39;http://elasticsearch:9200&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;community&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Join the Community&lt;/h1&gt; &#xA;&lt;p&gt;For user help, questions or queries about ksqlDB please use our &lt;a href=&#34;https://groups.google.com/forum/#!forum/ksql-users&#34;&gt;user Google Group&lt;/a&gt; or our public Slack channel #ksqldb in &lt;a href=&#34;https://slackpass.io/confluentcommunity&#34;&gt;Confluent Community Slack&lt;/a&gt;. Everyone is welcome!&lt;/p&gt; &#xA;&lt;p&gt;You can get help, learn how to contribute to ksqlDB, and find the latest news by &lt;a href=&#34;https://www.confluent.io/contact-us-thank-you/&#34;&gt;connecting with the Confluent community&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more general questions about the Confluent Platform please post in the &lt;a href=&#34;https://groups.google.com/forum/#!forum/confluent-platform&#34;&gt;Confluent Google group&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing and building from source&lt;/h1&gt; &#xA;&lt;p&gt;Contributions to the code, examples, documentation, etc. are very much appreciated.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Report issues and bugs directly in &lt;a href=&#34;https://github.com/confluentinc/ksql/issues&#34;&gt;this GitHub project&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Learn how to work with the ksqlDB source code, including building and testing ksqlDB as well as contributing code changes to ksqlDB by reading our &lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/ksql/master/CONTRIBUTING.md&#34;&gt;Development and Contribution guidelines&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;One good way to get started is by tackling a &lt;a href=&#34;https://github.com/confluentinc/ksql/labels/good%20first%20issue&#34;&gt;newbie issue&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;The project is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/ksql/master/LICENSE&#34;&gt;Confluent Community License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Apache, Apache Kafka, Kafka, and associated open source project names are trademarks of the &lt;a href=&#34;https://www.apache.org/&#34;&gt;Apache Software Foundation&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
</feed>