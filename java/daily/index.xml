<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-25T01:38:36Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cvzhanshi-ursula/wechatpush</title>
    <updated>2022-08-25T01:38:36Z</updated>
    <id>tag:github.com,2022-08-25:/cvzhanshi-ursula/wechatpush</id>
    <link href="https://github.com/cvzhanshi-ursula/wechatpush" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Java公众号推送早安问候以及天气预报&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>alibaba/SREWorks</title>
    <updated>2022-08-25T01:38:36Z</updated>
    <id>tag:github.com,2022-08-25:/alibaba/SREWorks</id>
    <link href="https://github.com/alibaba/SREWorks" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cloud Native DataOps &amp; AIOps Platform | 云原生运维平台 | 一站式数据化、智能化运维SaaS应用套件（交付、监测、管理、控制、运营、服务）&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/alibaba/SREWorks/main/paas/sw-frontend/src/publicMedia/sreworks-logo.png&#34; width=&#34;120&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; SREWorks &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;b&gt; Cloud Native DataOps &amp;amp; AIOps Platform &lt;/b&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/alibaba/SREWorks/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/alibaba/sreworks&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/repo-size/alibaba/sreworks&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.yuque.com/sreworks-doc/docs&#34; target=&#34;_blank&#34;&gt;Documentation&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; English | &lt;a href=&#34;https://raw.githubusercontent.com/alibaba/SREWorks/main/README-CN.md&#34;&gt;中文&lt;/a&gt;&lt;a&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;SREWorks: Alibaba Cloud Big Data SRE team&#39;s cloud-native operation and maintenance (O&amp;amp;M) platform was born out of nearly a decade of business precipitation, using the thinking of &#34;Big Data and AI&#34; for O&amp;amp;M work（we call it DataOps and AIOps）, to help more practitioners use DataOps and AIOps to do a efficient O&amp;amp;M work.&lt;/p&gt; &#xA;&lt;p&gt;Google suggested a job title of SRE (Site Reliability Engineer) in 2003. It consists of a team of software engineers and system administrators who place a premium on O &amp;amp; M personnel&#39;s development skills, forcing them to devote less than half of their time to daily tasks and the other half to the creation of automation technologies to decrease labor needs.&lt;/p&gt; &#xA;&lt;p&gt;SREWorks focuses on the application-centric one-stop &#34;cloud native&#34; and &#34;DataOps and AIOps&#34; O &amp;amp; M SaaS management suite as an engineering practice for the Alibaba Cloud Big Data SRE team&#39;s SRE concept. It enables companies to achieve the delivery and maintenance of cloud-native apps and resources via two primary capabilities: enterprise application and resource management and O &amp;amp; M development.&lt;/p&gt; &#xA;&lt;p&gt;Alibaba Cloud Big Data SRE team has been working hard to practice the &#34;DataOps and AIOps&#34; concept, the industry&#39;s DataOps (data operation and maintenance) first proposed by the team, is naturally close to big data and AI, is very familiar with Big Data &amp;amp; AI technology, and has the big data and AI computing power resources on demand, has been working hard to practice the &#34;DataOps and AIOps&#34; concept, the industry&#39;s DataOps Standard O &amp;amp; M warehouses, data O &amp;amp; M platforms, and operation centers are among the end-to-end DataOps closed-loop engineering methods in the SREWorks.&lt;/p&gt; &#xA;&lt;p&gt;There are many excellent open-source O &amp;amp; M platforms that reflect cloud-native scenarios in the traditional IT O&amp;amp;M field. There are currently no systematic O &amp;amp; M solutions available. With the rise of the cloud-native era, the Alibaba Cloud Big Data SRE team will open-source its O &amp;amp; M platform, SREWorks, in the hopes of providing O &amp;amp; M engineers with an out-of-the-box experience.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alibaba/SREWorks/main/paas/sw-frontend/docs/pictures/1650534633770-0f784bd7-1996-473a-9b6f-91a54064a155.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alibaba/SREWorks/main/paas/sw-frontend/docs/documents/rr5g10.md&#34;&gt;Quick Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alibaba/SREWorks/main/paas/sw-frontend/docs/documents/mzz07m.md&#34;&gt;Installation from source code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.yuque.com/sreworks-doc/docs/&#34;&gt;Document&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wj.qq.com/s2/10565748/53da/&#34;&gt;Online Demo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alibaba/SREWorks/main/ROADMAP.md&#34;&gt;ROADMAP&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;d love to accept your patches and contributions to SREWorks. Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/alibaba/SREWorks/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for a few small guidelines you need to follow.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Wechat Chat Group (&lt;em&gt;Chinese&lt;/em&gt;): Broker wechat to add you into the user group.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/alibaba/SREWorks/main/paas/sw-frontend/src/publicMedia/weixin.jpg&#34; width=&#34;100&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dingtalk Chat Group (&lt;em&gt;Chinese&lt;/em&gt;): 35853026&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/alibaba/SREWorks/main/paas/sw-frontend/src/publicMedia/ding.jpg&#34; width=&#34;100&#34;&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Contributions to the SREWorks are expected to adhere to our &lt;a href=&#34;https://raw.githubusercontent.com/alibaba/SREWorks/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SeleniumHQ/selenium</title>
    <updated>2022-08-25T01:38:36Z</updated>
    <id>tag:github.com,2022-08-25:/SeleniumHQ/selenium</id>
    <link href="https://github.com/SeleniumHQ/selenium" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A browser automation framework and ecosystem.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Selenium&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SeleniumHQ/selenium/actions/workflows/ci-ruby.yml&#34;&gt;&lt;img src=&#34;https://github.com/SeleniumHQ/selenium/actions/workflows/ci-ruby.yml/badge.svg?sanitize=true&#34; alt=&#34;CI - Ruby&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/SeleniumHQ/selenium/actions/workflows/ci-python.yml&#34;&gt;&lt;img src=&#34;https://github.com/SeleniumHQ/selenium/actions/workflows/ci-python.yml/badge.svg?sanitize=true&#34; alt=&#34;CI - Python&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/SeleniumHQ/selenium/actions/workflows/ci-javascript.yml&#34;&gt;&lt;img src=&#34;https://github.com/SeleniumHQ/selenium/actions/workflows/ci-javascript.yml/badge.svg?sanitize=true&#34; alt=&#34;CI - JavaScript&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/SeleniumHQ/selenium/actions/workflows/ci-java.yml&#34;&gt;&lt;img src=&#34;https://github.com/SeleniumHQ/selenium/actions/workflows/ci-java.yml/badge.svg?sanitize=true&#34; alt=&#34;CI - Java&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://selenium.dev&#34;&gt;&lt;img src=&#34;https://selenium.dev/images/selenium_logo_square_green.png&#34; width=&#34;180&#34; alt=&#34;Selenium&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Selenium is an umbrella project encapsulating a variety of tools and libraries enabling web browser automation. Selenium specifically provides an infrastructure for the &lt;a href=&#34;https://w3c.github.io/webdriver/&#34;&gt;W3C WebDriver specification&lt;/a&gt; — a platform and language-neutral coding interface compatible with all major web browsers.&lt;/p&gt; &#xA;&lt;p&gt;The project is made possible by volunteer contributors who&#39;ve generously donated thousands of hours in code development and upkeep.&lt;/p&gt; &#xA;&lt;p&gt;Selenium&#39;s source code is made available under the &lt;a href=&#34;https://github.com/SeleniumHQ/selenium/raw/trunk/LICENSE&#34;&gt;Apache 2.0 license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Narrative documentation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://selenium.dev/documentation/&#34;&gt;User Manual&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;API documentation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://seleniumhq.github.io/selenium/docs/api/dotnet/&#34;&gt;C#&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://seleniumhq.github.io/selenium/docs/api/javascript/&#34;&gt;JavaScript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://seleniumhq.github.io/selenium/docs/api/java/index.html&#34;&gt;Java&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://seleniumhq.github.io/selenium/docs/api/py/&#34;&gt;Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://seleniumhq.github.io/selenium/docs/api/rb/&#34;&gt;Ruby&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Pull Requests&lt;/h2&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://github.com/SeleniumHQ/selenium/raw/trunk/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; before submitting your pull requests.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bazelbuild/bazelisk&#34;&gt;Bazelisk&lt;/a&gt;, a Bazel wrapper that automatically downloads the version of Bazel specified in &lt;code&gt;.bazelversion&lt;/code&gt; file and transparently passes through all command-line arguments to the real Bazel binary.&lt;/li&gt; &#xA; &lt;li&gt;The latest version of the &lt;a href=&#34;https://openjdk.java.net/&#34;&gt;Java 11 OpenJDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;java&lt;/code&gt; and &lt;code&gt;jar&lt;/code&gt; on the &lt;code&gt;$PATH&lt;/code&gt; (make sure you use &lt;code&gt;java&lt;/code&gt; executable from JDK but not JRE). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;To test this, try running the command &lt;code&gt;javac&lt;/code&gt;. This command won&#39;t exist if you only have the JRE installed. If you&#39;re met with a list of command-line options, you&#39;re referencing the JDK properly.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;Python 3.7+&lt;/a&gt; and &lt;code&gt;python&lt;/code&gt; on the &lt;code&gt;PATH&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ruby-lang.org/en/documentation/installation/&#34;&gt;Ruby 3+&lt;/a&gt; and &lt;code&gt;ruby&lt;/code&gt; on the &lt;code&gt;PATH&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://tox.readthedocs.org/&#34;&gt;The tox automation project&lt;/a&gt; for Python: &lt;code&gt;pip install tox&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;macOS users: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Install the latest version of Xcode including the command-line tools. This command should work &lt;code&gt;xcode-select --install&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Apple Silicon Macs should add &lt;code&gt;build --host_platform=//:rosetta&lt;/code&gt; to their &lt;code&gt;.bazelrc.local&lt;/code&gt; file. We are working to make sure this isn&#39;t required in the long run.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Windows users: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Latest version of &lt;a href=&#34;https://www.visualstudio.com/&#34;&gt;Visual Studio&lt;/a&gt; with command line tools and build tools installed&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;BAZEL_VS&lt;/code&gt; environment variable should point to the location of the build tools, e.g. &lt;code&gt;C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;BAZEL_VC&lt;/code&gt; environment variable should point to the location of the command line tools, e.g. &lt;code&gt;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;BAZEL_VC_FULL_VERSION&lt;/code&gt; environment variable should contain the version of the installed command line tools, e.g. &lt;code&gt;14.27.29110&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;A detailed setup guide can be seen on Jim Evan&#39;s &lt;a href=&#34;http://jimevansmusic.blogspot.com/2020/04/setting-up-windows-development.html&#34;&gt;post&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;If the Jim&#39;s blog instructions were followed, also make sure &lt;code&gt;C:\tools\msys65\usr\bin&lt;/code&gt; is on the &lt;code&gt;PATH&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Internet Explorer Driver&lt;/h3&gt; &#xA;&lt;p&gt;If you plan to compile the &lt;a href=&#34;https://github.com/SeleniumHQ/selenium/wiki/InternetExplorerDriver&#34;&gt;IE driver&lt;/a&gt;, you also need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.visualstudio.com/&#34;&gt;Visual Studio 2008&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;32 and 64-bit cross compilers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The build will work on any platform, but the tests for IE will be skipped silently if you are not building on Windows.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;h3&gt;Contribute with GitPod&lt;/h3&gt; &#xA;&lt;p&gt;GitPod provides a ready to use environment to develop.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitpod.io/#https://github.com/SeleniumHQ/selenium&#34;&gt;&lt;img src=&#34;https://gitpod.io/button/open-in-gitpod.svg?sanitize=true&#34; alt=&#34;Open in Gitpod&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To configure and use your local machine, keep reading.&lt;/p&gt; &#xA;&lt;h3&gt;Bazel&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bazel.build/&#34;&gt;Bazel&lt;/a&gt; was built by the fine folks at Google. Bazel manages dependency downloads, generates the Selenium binaries, executes tests, and does it all rather quickly.&lt;/p&gt; &#xA;&lt;p&gt;More detailed instructions for getting Bazel running are below, but if you can successfully get the java and javascript folders to build without errors, you should be confident that you have the correct binaries on your system.&lt;/p&gt; &#xA;&lt;h3&gt;Before Building&lt;/h3&gt; &#xA;&lt;p&gt;Ensure that you have Firefox installed and the latest &lt;a href=&#34;https://github.com/mozilla/geckodriver/releases/&#34;&gt;&lt;code&gt;geckodriver&lt;/code&gt;&lt;/a&gt; on your &lt;code&gt;$PATH&lt;/code&gt;. You may have to update this from time to time.&lt;/p&gt; &#xA;&lt;h3&gt;Common Build Targets&lt;/h3&gt; &#xA;&lt;h4&gt;Java&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to see Java Build Steps&lt;/summary&gt; &#xA; &lt;p&gt;To build the most commonly-used modules of Selenium from source, execute this command from the root project folder:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel build java/...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If you want to test you can run then you can do so by running the following command&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel test //java/... --test_size_filters=small,medium,large --test_tag_filters=&amp;lt;browser&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The &lt;code&gt;test_size_filters&lt;/code&gt; argument takes small, medium, large. Small are akin to unit tests, medium is akin to integration tests, and large is akin to end to end tests.&lt;/p&gt; &#xA; &lt;p&gt;The &lt;code&gt;test_tag_filters&lt;/code&gt; allow us to pass in browser names and a few different tags that we can find in the code base.&lt;/p&gt; &#xA; &lt;p&gt;To build the Grid deployment jar, run this command:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel build grid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The log will show where the output jar is located.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;JavaScript&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to see JavaScript Build Steps&lt;/summary&gt; &#xA; &lt;p&gt;If you want to build all the JavaScript code you can run:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel build javascript/...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;To build the NodeJS bindings you will need to run:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel build //javascript/node/selenium-webdriver&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;To run the tests run:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel test //javascript/node/selenium-webdriver:tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;You can pass in the environment variable &lt;code&gt;SELENIUM_BROWSER&lt;/code&gt; with the name of the browser.&lt;/p&gt; &#xA; &lt;p&gt;To publish to NPM run:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel run //javascript/node/selenium-webdriver:selenium-webdriver.publish&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;Python&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to see Python Build Steps&lt;/summary&gt; &#xA; &lt;p&gt;If you want to build the python bindings run:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel build //py:selenium&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;To run the tests run:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel test //py:test-&amp;lt;browsername&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If you add &lt;code&gt;--//common:pin_browsers&lt;/code&gt; it will download the browsers and drivers for you to use.&lt;/p&gt; &#xA; &lt;p&gt;To install locally run:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel build //py:selenium-wheel&#xA;pip install bazel-bin/py/selenium-*.whl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;To publish run:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel build //py:selenium-wheel&#xA;twine upload bazel-bin/py/selenium-*.whl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;Ruby&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to see Ruby Build Steps&lt;/summary&gt; &#xA; &lt;p&gt;To build the Ruby code run:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel build //rb/...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;.NET&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to see .NET Build Steps&lt;/summary&gt; &#xA; &lt;p&gt;To build the .NET code run:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel build //dotnet/...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Also&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel build //dotnet/test/common:chrome&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Build Details&lt;/h3&gt; &#xA;&lt;p&gt;Bazel files are called BUILD.bazel, and the order the modules are built is determined by the build system. If you want to build an individual module (assuming all dependent modules have previously been built), try the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel test javascript/atoms:test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case, &lt;code&gt;javascript/atoms&lt;/code&gt; is the module directory, &lt;code&gt;test&lt;/code&gt; is a target in that directory&#39;s &lt;code&gt;BUILD.bazel&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;As you see &lt;em&gt;build targets&lt;/em&gt; scroll past in the log, you may want to run them individually.&lt;/p&gt; &#xA;&lt;h3&gt;Build Output&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;bazel&lt;/code&gt; makes a top-level group of directories with the &lt;code&gt;bazel-&lt;/code&gt; prefix on each directory.&lt;/p&gt; &#xA;&lt;h3&gt;Common Tasks (Bazel)&lt;/h3&gt; &#xA;&lt;p&gt;To build the bulk of the Selenium binaries from source, run the following command from the root folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel build java/... javascript/...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run tests within a particular area of the project, use the &#34;test&#34; command, followed by the folder or target. Tests are tagged with &#34;small&#34;, &#34;medium&#34;, or &#34;large&#34;, and can be filtered with the &lt;code&gt;--test_size_filters&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel test --test_size_filters=small,medium java/...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Bazel&#39;s &#34;test&#34; command will run &lt;em&gt;all&lt;/em&gt; tests in the package, including integration tests. Expect the &lt;code&gt;test java/...&lt;/code&gt; to launch browsers and consume a considerable amount of time and resources.&lt;/p&gt; &#xA;&lt;p&gt;To bump the versions of the pinned browsers to their latest stable versions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel run scripts:pinned_browsers &amp;gt; temp.bzl &amp;amp;&amp;amp; mv temp.bzl common/repositories.bzl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Editing Code&lt;/h3&gt; &#xA;&lt;p&gt;Most of the team use either Intellij IDEA or VS.Code for their day-to-day editing. If you&#39;re working in IntelliJ, then we highly recommend installing the &lt;a href=&#34;https://plugins.jetbrains.com/plugin/8609-bazel&#34;&gt;Bazel IJ plugin&lt;/a&gt; which is documented on &lt;a href=&#34;https://plugins.jetbrains.com/plugin/8609-bazel&#34;&gt;its own site&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you do use IntelliJ and the Bazel plugin, there is a project view checked into the tree in &lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/selenium/trunk/scripts/ij.bazelproject&#34;&gt;scripts/ij.bazelproject&lt;/a&gt; which will make it easier to get up running, and editing code :)&lt;/p&gt; &#xA;&lt;h2&gt;Tour&lt;/h2&gt; &#xA;&lt;p&gt;The codebase is generally segmented around the languages used to write the component. Selenium makes extensive use of JavaScript, so let&#39;s start there. First of all, start the development server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel run debug-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, navigate to &lt;a href=&#34;http://localhost:2310/javascript&#34;&gt;http://localhost:2310/javascript&lt;/a&gt;. You&#39;ll find the contents of the &lt;code&gt;javascript/&lt;/code&gt; directory being shown. We use the &lt;a href=&#34;https://developers.google.com/closure/library/&#34;&gt;Closure Library&lt;/a&gt; for developing much of the JavaScript, so now navigate to &lt;a href=&#34;http://localhost:2310/javascript/atoms/test&#34;&gt;http://localhost:2310/javascript/atoms/test&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The tests in this directory are normal HTML files with names ending with &lt;code&gt;_test.html&lt;/code&gt;. Click on one to load the page and run the test.&lt;/p&gt; &#xA;&lt;h2&gt;Help with &lt;code&gt;go&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;More general, but basic, help for &lt;code&gt;go&lt;/code&gt;…&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./go --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;go&lt;/code&gt; is a wrapper around &lt;a href=&#34;http://rake.rubyforge.org/&#34;&gt;Rake&lt;/a&gt;, so you can use the standard commands such as &lt;code&gt;rake -T&lt;/code&gt; to get more information about available targets.&lt;/p&gt; &#xA;&lt;h2&gt;Maven &lt;em&gt;per se&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Selenium is not built with Maven. It is built with &lt;code&gt;bazel&lt;/code&gt;, though that is invoked with &lt;code&gt;go&lt;/code&gt; as outlined above, so you do not have to learn too much about that.&lt;/p&gt; &#xA;&lt;p&gt;That said, it is possible to relatively quickly build Selenium pieces for Maven to use. You are only really going to want to do this when you are testing the cutting-edge of Selenium development (which we welcome) against your application. Here is the quickest way to build and deploy into your local maven repository (&lt;code&gt;~/.m2/repository&lt;/code&gt;), while skipping Selenium&#39;s own tests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./go maven-install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The maven jars should now be in your local &lt;code&gt;~/.m2/repository&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Updating Java dependencies&lt;/h2&gt; &#xA;&lt;p&gt;The coordinates (&lt;em&gt;groupId&lt;/em&gt;:&lt;em&gt;artifactId&lt;/em&gt;:&lt;em&gt;version&lt;/em&gt;) of the Java dependencies are defined in the file &lt;a href=&#34;https://github.com/SeleniumHQ/selenium/raw/trunk/java/maven_deps.bzl&#34;&gt;maven_deps.bzl&lt;/a&gt;. The process to modify these dependencies is the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;(Optional) If we want to detect the dependencies which are not updated, we can use the following command for automatic discovery:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel run @maven//:outdated&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Modify &lt;a href=&#34;https://github.com/SeleniumHQ/selenium/raw/trunk/java/maven_deps.bzl&#34;&gt;maven_deps.bzl&lt;/a&gt;. For instance, we can bump the version of a given artifact detected in the step before.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Repin dependencies. This process is required to update the file &lt;a href=&#34;https://github.com/SeleniumHQ/selenium/raw/trunk/java/maven_install.json&#34;&gt;maven_install.json&lt;/a&gt;, which is used to manage the Maven dependencies tree (see &lt;a href=&#34;https://github.com/bazelbuild/rules_jvm_external&#34;&gt;rules_jvm_external&lt;/a&gt; for further details). The command to carry out this step is the following:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;REPIN=1 bazel run @unpinned_maven//:pin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;(Optional) If we use IntelliJ with the Bazel plugin, we need to synchronize our project. To that aim, we click on &lt;em&gt;Bazel&lt;/em&gt; → &lt;em&gt;Sync&lt;/em&gt; → &lt;em&gt;Sync Project with BUILD Files&lt;/em&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Running browser tests on Linux&lt;/h2&gt; &#xA;&lt;p&gt;In order to run Browser tests, you first need to install the browser-specific drivers, such as &lt;a href=&#34;https://github.com/mozilla/geckodriver/releases&#34;&gt;&lt;code&gt;geckodriver&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://chromedriver.chromium.org/&#34;&gt;&lt;code&gt;chromedriver&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&#34;https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/&#34;&gt;&lt;code&gt;edgedriver&lt;/code&gt;&lt;/a&gt;. These need to be on your &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By default, Bazel runs these tests in your current X-server UI. If you prefer, you can alternatively run them in a virtual or nested X-server.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run the X server &lt;code&gt;Xvfb :99&lt;/code&gt; or &lt;code&gt;Xnest :99&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run a window manager, for example, &lt;code&gt;DISPLAY=:99 jwm&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run the tests you are interested in:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel test --test_env=DISPLAY=:99 //java/... --test_tag_filters=chrome&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An easy way to run tests in a virtual X-server is to use Bazel&#39;s &lt;code&gt;--run_under&lt;/code&gt; functionality:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bazel test --run_under=&#34;xvfb-run -a&#34; //java/... --test_tag_filters=chrome&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Bazel Installation/Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;Selenium Build Docker Image&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re finding it hard to set up a development environment using bazel and you have access to Docker, then you can build a Docker image suitable for building and testing Selenium in from the Dockerfile in the &lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/selenium/trunk/scripts/dev-image/Dockerfile&#34;&gt;dev image&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;MacOS&lt;/h3&gt; &#xA;&lt;h4&gt;bazelisk&lt;/h4&gt; &#xA;&lt;p&gt;Bazelisk is a Mac-friendly launcher for Bazel. To install, follow these steps:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew tap bazelbuild/tap &amp;amp;&amp;amp; \&#xA;brew uninstall bazel; \&#xA;brew install bazelbuild/tap/bazelisk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Xcode&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;re getting errors that mention Xcode, you&#39;ll need to install the command-line tools.&lt;/p&gt; &#xA;&lt;p&gt;Bazel for Mac requires some additional steps to configure properly. First things first: use the Bazelisk project (courtesy of philwo), a pure golang implementation of Bazel. In order to install Bazelisk, first verify that your Xcode will cooperate: execute the following command:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;xcode-select -p&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If the value is &lt;code&gt;/Applications/Xcode.app/Contents/Developer/&lt;/code&gt;, you can proceed with bazelisk installation. If, however, the return value is &lt;code&gt;/Library/Developer/CommandLineTools/&lt;/code&gt;, you&#39;ll need to redirect the Xcode system to the correct value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo xcode-select -s /Applications/Xcode.app/Contents/Developer/&#xA;sudo xcodebuild -license&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The first command will prompt you for a password. The second step requires you to read a new Xcode license, and then accept it by typing &#34;agree&#34;.&lt;/p&gt; &#xA;&lt;p&gt;(Thanks to &lt;a href=&#34;https://github.com/bazelbuild/bazel/issues/4314&#34;&gt;this thread&lt;/a&gt; for these steps)&lt;/p&gt;</summary>
  </entry>
</feed>