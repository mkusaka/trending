<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-17T01:36:46Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>horoc/treetops</title>
    <updated>2023-06-17T01:36:46Z</updated>
    <id>tag:github.com,2023-06-17:/horoc/treetops</id>
    <link href="https://github.com/horoc/treetops" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast LightGBM tree model interference Java library which is based on ASM dynamic code generation framework.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üçÉ Treetops&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT%20-green.svg?label=license&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://github.com/horoc/treetops/actions/workflows/gradle.yml&#34;&gt;&lt;img src=&#34;https://github.com/horoc/treetops/actions/workflows/gradle.yml/badge.svg?branch=master&#34; alt=&#34;Continuous Integration&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/horoc/treetops/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/horoc/treetops&#34; alt=&#34;GitHub Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://openjdk.java.net/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Java-8+-green?logo=openjdk&amp;amp;logoColor=white&#34; alt=&#34;Java support&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/horoc/treetops&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/repo-size/horoc/treetops&#34; alt=&#34;GitHub repo size&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;üöÄ Fast LightGBM tree model interference lib which is based on ASM dynamic code generation framework.&lt;/p&gt; &#xA; &lt;p&gt;üêí Easy to integrate with Java project, no need to install extra libs.&lt;/p&gt; &#xA; &lt;p&gt;üíØ Fully implemented by Java, easy to customize your own functionality.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;How Fast&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/horoc/treetops/master/docs/imgs/benchmark.png&#34; width=&#34;80%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Specification&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Asm: Generated lightGBM predictor based on ASM framework.&lt;/li&gt; &#xA; &lt;li&gt;Simple: Tree-based data structure predictor which follows the LightGBM cpp official implementation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Test Models&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;bc: model trained by breast cancer dataset (100 trees, binary)&lt;/li&gt; &#xA; &lt;li&gt;ch: model trained by california housing dataset (100 trees, regression)&lt;/li&gt; &#xA; &lt;li&gt;db: model trained by diabetes dataset (100 trees, regression)&lt;/li&gt; &#xA; &lt;li&gt;wn: model trained by wine dataset (300 trees, classification)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Environment&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CPU: Intel Xeon Cooper Lake 3.4GHz, 4C&lt;/li&gt; &#xA; &lt;li&gt;Memory: 8G&lt;/li&gt; &#xA; &lt;li&gt;JDK: zulu JDK 8&lt;/li&gt; &#xA; &lt;li&gt;Tools: Jmh, test config see &lt;code&gt;AverageTimeBenchmarkTemplate.java&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;Currently, we have published the &lt;code&gt;0.1.0&lt;/code&gt; version.&lt;/p&gt; &#xA;&lt;p&gt;Add dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;implementation &#39;io.github.horoc:treetops-core:0.1.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Model&lt;/h3&gt; &#xA;&lt;p&gt;You can train your own model or just use the test model files for testing.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Test model path: &lt;code&gt;treetops-core/src/test/resources&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;API&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// model name must only contain character: [a-zA-z0-9_]&#xA;Predictor predictor = TreePredictorFactory.newInstance(&#34;your_model_name_v0&#34;, filePathOfYourModel);&#xA;predictor.predict(features);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to save the generated class file and have a look, you can specify the save path.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Predictor predictor = TreePredictorFactory.newInstance(&#34;your_model_name_v0&#34;, filePathOfYourModel, pathToSaveYourClass);&#xA;predictor.predict(features);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to compare with the simple predictor (disable genernation), you can create predictor by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Predictor predictor = TreePredictorFactory.newInstance(&#34;your_model_name_v0&#34;, &#34;&#34;, false);&#xA;predictor.predict(features);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Core Idea&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;u&gt;What treetops mainly do is translate the model file into a hardcode class instead of storing it in a tree-based data structure, and that&#39;s the core idea of treetops.&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;For example, the following configuration is one of the trees in a model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Tree=0&#xA;num_leaves=4&#xA;num_cat=0&#xA;split_feature=1 2 2&#xA;split_gain=0.568011 0.483606 0.45669&#xA;threshold=0.73144941452196321 0.90708366268745222 0.85551601478390116&#xA;decision_type=2 2 2&#xA;left_child=1 -1 -2&#xA;right_child=2 -3 -4&#xA;leaf_value=0.49510661266514339 0.50645382200299838 0.50688948369558862 0.49040602357823876&#xA;leaf_weight=326 114 39 21&#xA;leaf_count=326 114 39 21&#xA;internal_value=0.498415 0.496366 0.503957&#xA;internal_weight=0 365 135&#xA;internal_count=500 365 135&#xA;is_linear=0&#xA;shrinkage=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The output decision value of this tree is based on every internal and leaf node&#39;s split strategy and value.&lt;/p&gt; &#xA;&lt;p&gt;According to the config, we can see there are three internal nodes and four leave nodes. If we store this tree in a tree-based data structure, we would need to iterate from the root to the leaves to make a decision. However, this process can result in lots of memory accesses and function calls. This also affects the hit rate of the CPU instruction cache.&lt;/p&gt; &#xA;&lt;p&gt;If we hardcode the tree structure, we could optimize this overhead.&lt;/p&gt; &#xA;&lt;p&gt;A generated tree decision function is like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;private tree_0([D)D&#xA;  ... ...&#xA;    IFEQ L0&#xA;    GOTO L1&#xA;   L0&#xA;   FRAME APPEND [D]&#xA;    DLOAD 2&#xA;    LDC 0.7314494145219632&#xA;    DCMPG&#xA;    IFGE L2&#xA;    GOTO L1&#xA;   L1&#xA;&#xA;   ... ...&#xA;&#xA;   L8&#xA;   FRAME SAME&#xA;    LDC 0.49040602357823876&#xA;    DRETURN&#xA;    MAXSTACK = 4&#xA;    MAXLOCALS = 4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;the corresponding java code :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    private double tree_0(double[] var1) {&#xA;        double var2 = var1[1];&#xA;        if (var2 == var2 &amp;amp;&amp;amp; !(var2 &amp;lt; 0.7314494145219632D)) {&#xA;            var2 = var1[2];&#xA;            return var2 == var2 &amp;amp;&amp;amp; !(var2 &amp;lt; 0.8555160147839012D) ? 0.49040602357823876D : 0.5064538220029984D;&#xA;        } else {&#xA;            var2 = var1[2];&#xA;            return var2 == var2 &amp;amp;&amp;amp; !(var2 &amp;lt; 0.9070836626874522D) ? 0.5068894836955886D : 0.4951066126651434D;&#xA;        }&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;we precompute the decision rules and use conditional statements to evaluate input features based on the tree config. This can be particularly advantageous for large trees, as dynamic traversal can become a significant bottleneck.&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chen Zhou&lt;/strong&gt; - &lt;em&gt;Initial work&lt;/em&gt; - &lt;a href=&#34;https://github.com/horoc&#34;&gt;ChenZhou&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See also the list of &lt;a href=&#34;https://github.com/horoc/treetops/contributors&#34;&gt;contributors&lt;/a&gt; who participated in this project.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the MIT License - see the &lt;a href=&#34;https://raw.githubusercontent.com/horoc/treetops/master/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt; file for details&lt;/p&gt;</summary>
  </entry>
</feed>