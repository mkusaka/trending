<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-24T01:28:44Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mik3y/usb-serial-for-android</title>
    <updated>2024-04-24T01:28:44Z</updated>
    <id>tag:github.com,2024-04-24:/mik3y/usb-serial-for-android</id>
    <link href="https://github.com/mik3y/usb-serial-for-android" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Android USB host serial driver library for CDC, FTDI, Arduino and other devices.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/mik3y/usb-serial-for-android/actions&#34;&gt;&lt;img src=&#34;https://github.com/mik3y/usb-serial-for-android/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;Actions Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://jitpack.io/#mik3y/usb-serial-for-android&#34;&gt;&lt;img src=&#34;https://jitpack.io/v/mik3y/usb-serial-for-android.svg?sanitize=true&#34; alt=&#34;Jitpack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codacy.com/gh/kai-morich/usb-serial-for-android-mik3y/dashboard?utm_source=gh&amp;amp;utm_medium=referral&amp;amp;utm_content=&amp;amp;utm_campaign=Badge_grade&#34;&gt;&lt;img src=&#34;https://app.codacy.com/project/badge/Grade/ef799bba8a7343818af0a90eba3ecb46&#34; alt=&#34;Codacy&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/mik3y/usb-serial-for-android&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/mik3y/usb-serial-for-android/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;usb-serial-for-android&lt;/h1&gt; &#xA;&lt;p&gt;This is a driver library for communication with Arduinos and other USB serial hardware on Android, using the &lt;a href=&#34;http://developer.android.com/guide/topics/connectivity/usb/host.html&#34;&gt;Android USB Host Mode (OTG)&lt;/a&gt; available since Android 3.1 and working reliably since Android 4.2.&lt;/p&gt; &#xA;&lt;p&gt;No root access, ADK, or special kernel drivers are required; all drivers are implemented in Java. You get a raw serial port with &lt;code&gt;read()&lt;/code&gt;, &lt;code&gt;write()&lt;/code&gt;, and &lt;a href=&#34;https://github.com/mik3y/usb-serial-for-android/wiki/FAQ#Feature_Matrix&#34;&gt;other functions&lt;/a&gt; for use with your own protocols.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Add library to your project:&lt;/p&gt; &#xA;&lt;p&gt;Add jitpack.io repository to your root build.gradle:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;allprojects {&#xA;    repositories {&#xA;        ...&#xA;        maven { url &#39;https://jitpack.io&#39; }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Starting with gradle 6.8 you can alternatively add jitpack.io repository to your settings.gradle:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencyResolutionManagement {&#xA;    repositories {&#xA;        ...&#xA;        maven { url &#39;https://jitpack.io&#39; }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If using gradle kotlin use line&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle.kts&#34;&gt;        maven(url = &#34;https://jitpack.io&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add library to dependencies&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;    implementation &#39;com.github.mik3y:usb-serial-for-android:3.7.0&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; If the app should be notified when a device is attached, add &lt;a href=&#34;https://github.com/mik3y/usb-serial-for-android/raw/master/usbSerialExamples/src/main/res/xml/device_filter.xml&#34;&gt;device_filter.xml&lt;/a&gt; to your project&#39;s &lt;code&gt;res/xml/&lt;/code&gt; directory and configure in your &lt;code&gt;AndroidManifest.xml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;activity&#xA;    android:name=&#34;...&#34;&#xA;    ...&amp;gt;&#xA;    &amp;lt;intent-filter&amp;gt;&#xA;        &amp;lt;action android:name=&#34;android.hardware.usb.action.USB_DEVICE_ATTACHED&#34; /&amp;gt;&#xA;    &amp;lt;/intent-filter&amp;gt;&#xA;    &amp;lt;meta-data&#xA;        android:name=&#34;android.hardware.usb.action.USB_DEVICE_ATTACHED&#34;&#xA;        android:resource=&#34;@xml/device_filter&#34; /&amp;gt;&#xA;&amp;lt;/activity&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; Use it! Example code snippet:&lt;/p&gt; &#xA;&lt;p&gt;open device:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    // Find all available drivers from attached devices.&#xA;    UsbManager manager = (UsbManager) getSystemService(Context.USB_SERVICE);&#xA;    List&amp;lt;UsbSerialDriver&amp;gt; availableDrivers = UsbSerialProber.getDefaultProber().findAllDrivers(manager);&#xA;    if (availableDrivers.isEmpty()) {&#xA;        return;&#xA;    }&#xA;&#xA;    // Open a connection to the first available driver.&#xA;    UsbSerialDriver driver = availableDrivers.get(0);&#xA;    UsbDeviceConnection connection = manager.openDevice(driver.getDevice());&#xA;    if (connection == null) {&#xA;        // add UsbManager.requestPermission(driver.getDevice(), ..) handling here&#xA;        return;&#xA;    }&#xA;&#xA;    UsbSerialPort port = driver.getPorts().get(0); // Most devices have just one port (port 0)&#xA;    port.open(connection);&#xA;    port.setParameters(115200, 8, UsbSerialPort.STOPBITS_1, UsbSerialPort.PARITY_NONE);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then use direct read/write&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    port.write(request, WRITE_WAIT_MILLIS);&#xA;    len = port.read(response, READ_WAIT_MILLIS);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or direct write + event driven read:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    usbIoManager = new SerialInputOutputManager(usbSerialPort, this);&#xA;    usbIoManager.start();&#xA;    ...&#xA;    port.write(&#34;hello&#34;.getBytes(), WRITE_WAIT_MILLIS);&#xA;    &#xA;@Override&#xA;public void onNewData(byte[] data) {&#xA;    runOnUiThread(() -&amp;gt; { textView.append(new String(data)); });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and finally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    port.close();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a simple example, see &lt;a href=&#34;https://github.com/mik3y/usb-serial-for-android/raw/master/usbSerialExamples&#34;&gt;UsbSerialExamples&lt;/a&gt; folder in this project.&lt;/p&gt; &#xA;&lt;p&gt;For a more complete example with background service to stay connected while the app is not visible or rotating, see separate github project &lt;a href=&#34;https://github.com/kai-morich/SimpleUsbTerminal&#34;&gt;SimpleUsbTerminal&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Probing for Unrecognized Devices&lt;/h2&gt; &#xA;&lt;p&gt;Sometimes you may need to do a little extra work to support devices which usb-serial-for-android doesn&#39;t (yet) know about -- but which you know to be compatible with one of the built-in drivers. This may be the case for a brand new device or for one using a custom VID/PID pair.&lt;/p&gt; &#xA;&lt;p&gt;UsbSerialProber is a class to help you find and instantiate compatible UsbSerialDrivers from the tree of connected UsbDevices. Normally, you will use the default prober returned by &lt;code&gt;UsbSerialProber.getDefaultProber()&lt;/code&gt;, which uses USB interface types and the built-in list of well-known VIDs and PIDs that are supported by our drivers.&lt;/p&gt; &#xA;&lt;p&gt;To use your own set of rules, create and use a custom prober:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Probe for our custom FTDI device, which use VID 0x1234 and PID 0x0001 and 0x0002.&#xA;ProbeTable customTable = new ProbeTable();&#xA;customTable.addProduct(0x1234, 0x0001, FtdiSerialDriver.class);&#xA;customTable.addProduct(0x1234, 0x0002, FtdiSerialDriver.class);&#xA;&#xA;UsbSerialProber prober = new UsbSerialProber(customTable);&#xA;List&amp;lt;UsbSerialDriver&amp;gt; drivers = prober.findAllDrivers(usbManager);&#xA;// ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: as of v3.5.0 this library detects CDC devices by USB interface types instead of fixed VID+PID, so custom probers are typically not required any more for CDC devices.&lt;/p&gt; &#xA;&lt;p&gt;Of course, nothing requires you to use UsbSerialProber at all: you can instantiate driver classes directly if you know what you&#39;re doing; just supply a compatible UsbDevice.&lt;/p&gt; &#xA;&lt;h2&gt;Compatible Devices&lt;/h2&gt; &#xA;&lt;p&gt;This library supports USB to serial converter chips:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FTDI FT232R, FT232H, FT2232H, FT4232H, FT230X, FT231X, FT234XD&lt;/li&gt; &#xA; &lt;li&gt;Prolific PL2303&lt;/li&gt; &#xA; &lt;li&gt;Silabs CP2102, CP210*&lt;/li&gt; &#xA; &lt;li&gt;Qinheng CH340, CH341A, CH9102&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;devices implementing the CDC/ACM protocol like&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Arduino using ATmega32U4&lt;/li&gt; &#xA; &lt;li&gt;Digispark using V-USB software USB&lt;/li&gt; &#xA; &lt;li&gt;BBC micro:bit using ARM mbed DAPLink firmware&lt;/li&gt; &#xA; &lt;li&gt;...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;and some device specific drivers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GsmModem devices, e.g. for Unisoc based Fibocom GSM modems&lt;/li&gt; &#xA; &lt;li&gt;Chrome OS CCD (Closed Case Debugging)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Help &amp;amp; Discussion&lt;/h2&gt; &#xA;&lt;p&gt;For common problems, see the &lt;a href=&#34;https://github.com/mik3y/usb-serial-for-android/wiki/FAQ&#34;&gt;FAQ&lt;/a&gt; wiki page.&lt;/p&gt; &#xA;&lt;p&gt;Are you using the library? Add your project to &lt;a href=&#34;https://github.com/mik3y/usb-serial-for-android/wiki/Projects-Using-usb-serial-for-android&#34;&gt;ProjectsUsingUsbSerialForAndroid&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>