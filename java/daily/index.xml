<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-21T01:33:44Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Y4tacker/JavaSec</title>
    <updated>2022-10-21T01:33:44Z</updated>
    <id>tag:github.com,2022-10-21:/Y4tacker/JavaSec</id>
    <link href="https://github.com/Y4tacker/JavaSec" rel="alternate"></link>
    <summary type="html">&lt;p&gt;a rep for documenting my study, may be from 0 to 0.1&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JavaSec&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://socialify.git.ci/Y4tacker/JavaSec/image?description=1&amp;amp;font=Source%20Code%20Pro&amp;amp;forks=1&amp;amp;issues=1&amp;amp;language=1&amp;amp;name=1&amp;amp;owner=1&amp;amp;pulls=1&amp;amp;stargazers=1&amp;amp;theme=Dark&#34; alt=&#34;JavaSec&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;0.For Me&lt;/h2&gt; &#xA;&lt;p&gt;仅仅只是想写给自己看&lt;/p&gt; &#xA;&lt;p&gt;一个记录我Java安全学习过程的仓库，本仓库不是真正意义上的教学仓库(rep中的内容都是我在平时的一些笔记没有很强逻辑性，内容水平自然也是参差不齐，可能有些对我来说很简单的便忽略不计对其他人来说却是难点，因此作为一个学习目录的话可能会好很多)，单纯这是笔者简单记一些笔记，顺便见证自己从0到0.1的过程吧，另外后面如果看到一些好的东西在学习完之后也会贴上链接，少了很多介绍性的东西，以后等厉害了再慢慢补充吧.当然如果感觉还不错的话，师傅们记得给个 Star 呀 ~&lt;/p&gt; &#xA;&lt;p align=&#34;right&#34;&gt;@Y4tacker&lt;/p&gt; &#xA;&lt;p align=&#34;right&#34;&gt;2021年10月18日，梦的开始&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;1.基础篇&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%8F%8D%E5%B0%84/%E5%8F%8D%E5%B0%84.md&#34;&gt;Java反射&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/tree/main/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E9%80%9A%E8%BF%87%E5%8F%8D%E5%B0%84%E4%BF%AE%E6%94%B9%E7%94%A8final%E4%BF%AE%E9%A5%B0%E7%9A%84%E5%8F%98%E9%87%8F&#34;&gt;补充:通过反射修改用final static修饰的变量&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.md&#34;&gt;Java动态代理&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mi1k7ea.com/2019/09/15/%E6%B5%85%E6%9E%90JNDI%E6%B3%A8%E5%85%A5/&#34;&gt;JNDI注入&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/47794528/answer/672095170&#34;&gt;反序列化&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E4%B8%8E%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E4%B8%8E%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B.md&#34;&gt;类加载器与双亲委派模型&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://max.book118.com/html/2021/0415/5213012132003221.shtm&#34;&gt;两种实现Java类隔离加载的方法&lt;/a&gt;(当然同名目录下也有pdf，防止以后站不在了)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/ClassLoader(%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6)/ClassLoader(%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6).md&#34;&gt;ClassLoader(类加载机制)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/SPI/SPI.md&#34;&gt;SPI学习&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://wjlshare.com/archives/1582&#34;&gt;JavaAgent&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/166530442&#34;&gt;JMX&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ZhangZiSheng001/02-jmx-demo&#34;&gt;JMX补充学习这哥们写的不错&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mi1k7ea.com/2021/08/06/%E6%B5%85%E6%9E%90JDWP%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/&#34;&gt;JDWP远程执行命令&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/coldridgeValley/p/5816414.html&#34;&gt;Tomcat中容器的pipeline机制(学了以后更好帮助Tomcat-Valve类型内存马理解)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/tree/main/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/ASM%E5%AD%A6%E4%B9%A0/index.md&#34;&gt;ASM学习+Class文件结构了解+JVM一些简单知识&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Xpath%E6%B3%A8%E5%85%A5/index.md&#34;&gt;Xpath注入&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.runoob.com/jsp/jsp-jstl.html&#34;&gt;JSTL(看菜鸟教程即可)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/JEP290%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/index.md&#34;&gt;JEP290基础概念&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Java%E4%B8%AD%E7%9A%84XXE/index.md&#34;&gt;Java中的XXE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/%E5%85%B6%E4%BB%96/%E9%80%9A%E8%BF%87%E5%8F%8D%E5%B0%84%E6%89%AB%E6%8F%8F%E8%A2%AB%E6%B3%A8%E8%A7%A3%E4%BF%AE%E9%A5%B0%E7%9A%84%E7%B1%BB/index.md&#34;&gt;通过反射扫描被注解修饰的类&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;2.反序列化&lt;/h2&gt; &#xA;&lt;p&gt;很早前学了，后面补上，更多是说一点关键的东西，不会很详细，好吧这里再拓展成反序列化专区好了&lt;/p&gt; &#xA;&lt;p&gt;如果想系统学习的话这部分还是更推荐p牛的Java安全漫谈，我只是简单写写便于自己复习而已&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/%E5%85%B6%E4%BB%96/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BURLDNS/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BURLDNS.md&#34;&gt;Java反序列化之URLDNS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/2.%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%93%E5%8C%BA/CommonsCollections1/CommonsCollections1.md&#34;&gt;CommonsCollections1笔记&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/2.%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%93%E5%8C%BA/CommonsCollections2/CommonsCollections2.md&#34;&gt;CommonsCollections2笔记&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/2.%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%93%E5%8C%BA/CommonsCollections3/CommonsCollections3.md&#34;&gt;CommonsCollections3笔记&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/2.%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%93%E5%8C%BA/CommonsCollections5/CommonsCollections5.md&#34;&gt;CommonsCollections5笔记&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/2.%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%93%E5%8C%BA/CommonsCollections6-HashSet/CommonsCollections6-HashSet.md&#34;&gt;CommonsCollections6-HashSet笔记&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/2.%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%93%E5%8C%BA/CommonsCollections6-HashMap/CommonsCollections6-HashMap.md&#34;&gt;CommonsCollections6-HashMap笔记&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/2.%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%93%E5%8C%BA/CommonsCollections6-Shiro1.2.4/CommonsCollections6-Shiro1.2.4.md&#34;&gt;CommonsCollections6-Shiro1.2.4笔记&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/2.%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%93%E5%8C%BA/CommonsCollections7/CommonsCollections7.md&#34;&gt;CommonsCollections7笔记&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/2.%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%93%E5%8C%BA/%E4%BD%BF%E7%94%A8TemplatesImpl%E6%94%B9%E9%80%A0CommonsCollections2/%E4%BD%BF%E7%94%A8TemplatesImpl%E6%94%B9%E9%80%A0CommonsCollections2.md&#34;&gt;使用TemplatesImpl改造CommonsCollections2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/2.%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%93%E5%8C%BA/CommonsBeanutils1/CommonsBeanutils1%E7%AC%94%E8%AE%B0.md&#34;&gt;CommonsBeanutils1笔记&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/2.%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%93%E5%8C%BA/CommonsBeanutils1-Shiro(%E6%97%A0CC%E4%BE%9D%E8%B5%96)/CommonsBeanutils1-Shiro(%E6%97%A0CC%E4%BE%9D%E8%B5%96).md&#34;&gt;CommonsBeanutils1-Shiro(无CC依赖)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/2.%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%93%E5%8C%BA/FileUpload/index.md&#34;&gt;FileUpload1-写文件\删除文件&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/2.%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%93%E5%8C%BA/C3P0/C3P0.md&#34;&gt;C3P0利用链简单分析&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.yulegeyu.com/2021/10/10/JAVA%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BC3P0%E4%B8%8D%E5%87%BA%E7%BD%91%E5%88%A9%E7%94%A8/&#34;&gt;C3P0Tomcat不出网利用(思路就是之前高版本JNDI注入的思路)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/2.%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%93%E5%8C%BA/%E5%8F%8D%E5%88%B6Ysoserial0.0.6%E7%89%88%E6%9C%AC-JRMP/%E5%8F%8D%E5%88%B6Ysoserial0.0.6%E7%89%88%E6%9C%AC-JRMP.md&#34;&gt;反制Ysoserial0.0.6版本-JRMP(打个标签weblogic搞定后看看)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/2.%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%93%E5%8C%BA/CommonsCollections11/CommonsCollections11.md&#34;&gt;网上看到的神秘套娃CommonsCollections11&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://y4tacker.github.io/2022/02/08/year/2022/2/SnakeYAML%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8A%E5%8F%AF%E5%88%A9%E7%94%A8Gadget%E5%88%86%E6%9E%90/&#34;&gt;SnakeYAML反序列化及可利用Gadget&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://y4tacker.github.io/2022/02/08/year/2022/2/SnakeYAML%E5%AE%9E%E7%8E%B0Gadget%E6%8E%A2%E6%B5%8B/&#34;&gt;SnakeYAML出网探测Gadget(自己瞎琢磨出来的，不过在1.7以下版本就不行)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://y4tacker.github.io/2022/02/10/year/2022/2/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/&#34;&gt;XStream反序列化学习&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gv7.me/articles/2020/deserialization-of-serialvesionuid-conflicts-using-a-custom-classloader/&#34;&gt;解决反序列化serialVesionUID不一致问题(BestMatch：打破双亲委派对jbxz用工具最方便)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://y4tacker.github.io/2022/03/07/year/2022/3/ROME%E6%94%B9%E9%80%A0%E8%AE%A1%E5%88%92/&#34;&gt;自己搞的把ROME利用链长度缩小4400-1320(Base64)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/2.%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%93%E5%8C%BA/JDK7u21/index.md&#34;&gt;JDK7u21&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/2.%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%93%E5%8C%BA/AspectJWeaver/AspectJWeaver.md&#34;&gt;AspectJWeaver写文件&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/2.%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%93%E5%8C%BA/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9C%A8%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%BD%93%E4%B8%AD%E5%80%BC%E5%BE%97%E5%85%B3%E6%B3%A8%E7%9A%84%E7%82%B9/index.md&#34;&gt;反序列化在渗透测试当中值得关注的点&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/KncxkSIZ7HVXZ0iNAX8xPA&#34;&gt;构造java探测class反序列化gadget&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/2.%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%93%E5%8C%BA/URLDNS%E6%8E%A2%E6%B5%8Bclass%E7%9A%84%E8%A1%A5%E5%85%85/index.md&#34;&gt;对URLDNS探测class的补充(为什么本地明明没有这个类却有&#34;DNS解析&#34;)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;3.Fastjson/Jackson专区&lt;/h2&gt; &#xA;&lt;p&gt;可以对比jackson简单学习下，这里我也会简单提一下jackson的一些利用，当然不会很详细，但是会简单列出一些触发原理，而且有些payload是共通的，这里也不以收集各个依赖下利用的payload为主&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/3.FastJson%E4%B8%93%E5%8C%BA/Jackson%E7%9A%84%E5%88%A9%E7%94%A8%E8%A7%A6%E5%8F%91/index.md&#34;&gt;Jackson的利用触发及小细节&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/3.FastJson%E4%B8%93%E5%8C%BA/Fastjson%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/Fastjson%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95.md&#34;&gt;Fastjson基本用法&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/3.FastJson%E4%B8%93%E5%8C%BA/Fastjson1.1.15-1.2.4%E4%B8%8EBCEL%E5%AD%97%E8%8A%82%E7%A0%81%E5%8A%A0%E8%BD%BD/Fastjson1.1.15-1.2.4%E4%B8%8EBCEL%E5%AD%97%E8%8A%82%E7%A0%81%E5%8A%A0%E8%BD%BD.md&#34;&gt;Fastjson1.1.15-1.2.4与BCEL字节码加载&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/3.FastJson%E4%B8%93%E5%8C%BA/Fastjson1.22-1.24/Fastjson1.22-1.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90%E4%B9%8BJNDI/Fastjson1.22-1.24.md&#34;&gt;Fastjson1.22-1.24反序列化分析之JNDI&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/3.FastJson%E4%B8%93%E5%8C%BA/Fastjson1.22-1.24/Fastjson1.22-1.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90%E4%B9%8BTemplateImpl/Fastjson1.22-1.24.md&#34;&gt;Fastjson1.22-1.24反序列化分析之TemplateImpl&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/3.FastJson%E4%B8%93%E5%8C%BA/Bypass/Fastjson1.2.25-1.2.41%E8%A1%A5%E4%B8%81%E7%BB%95%E8%BF%87/Fastjson1.2.25-1.2.41%E8%A1%A5%E4%B8%81%E7%BB%95%E8%BF%87.md&#34;&gt;Fastjson1.2.25-1.2.41补丁绕过(用L;绕过、需要开启autotype)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/3.FastJson%E4%B8%93%E5%8C%BA/Bypass/Fastjson1.2.25-1.2.42%E8%A1%A5%E4%B8%81%E7%BB%95%E8%BF%87/Fastjson1.2.25-1.2.42%E8%A1%A5%E4%B8%81%E7%BB%95%E8%BF%87.md&#34;&gt;Fastjson1.2.25-1.2.42补丁绕过(双写L;绕过、需要开启autotype)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/3.FastJson%E4%B8%93%E5%8C%BA/Bypass/Fastjson1.2.25-1.2.43%E8%A1%A5%E4%B8%81%E7%BB%95%E8%BF%87/Fastjson1.2.25-1.2.43%E8%A1%A5%E4%B8%81%E7%BB%95%E8%BF%87.md&#34;&gt;Fastjson1.2.25-1.2.43补丁绕过(用左中括号绕过、需要开启autotype)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/3.FastJson%E4%B8%93%E5%8C%BA/Bypass/Fastjson1.2.25-1.2.45%E8%A1%A5%E4%B8%81%E7%BB%95%E8%BF%87/Fastjson1.2.25-1.2.45%E8%A1%A5%E4%B8%81%E7%BB%95%E8%BF%87.md&#34;&gt;Fastjson1.2.25-1.2.45补丁绕过(mybatis的3.x版本且&amp;lt;3.5.0、需要开启autotype)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/3.FastJson%E4%B8%93%E5%8C%BA/Bypass/Fastjson1.2.25-1.2.47%E7%BB%95%E8%BF%87%E6%97%A0%E9%9C%80AutoType/Fastjson1.2.25-1.2.47%E7%BB%95%E8%BF%87%E6%97%A0%E9%9C%80AutoType.md&#34;&gt;Fastjson1.2.25-1.2.47绕过&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.anquanke.com/post/id/232774&#34;&gt;Fastjson1.2.48-1.2.68反序列化漏洞&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://su18.org/post/fastjson-1.2.68/#getter-%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8&#34;&gt;Fastjson1.2.68不使用ref引用，不用parseObject触发get方法&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzUzNDMyNjI3Mg==&amp;amp;mid=2247484866&amp;amp;idx=1&amp;amp;sn=23fb7897f6e54cdf61031a65c602487d&amp;amp;scene=21#wechat_redirect&#34;&gt;关于blackhat2021披露的fastjson1.2.68链的一些细节，防止公众号以后找不到同目录下有备份&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/3.FastJson%E4%B8%93%E5%8C%BA/%E5%85%B6%E4%BB%96/L3HCTF%202021%20Official%20Write%20Up.pdf&#34;&gt;2021L3HCTF中关于Fastjson1.2.68的骚操作&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/3.FastJson%E4%B8%93%E5%8C%BA/%E6%9C%89%E8%B6%A3Trick/FastJson%20Trick.md&#34;&gt;一些有趣的Trick&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.Weblogic专区(暂时不想看)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/4.Weblogic%E4%B8%93%E5%8C%BA/T3%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0/T3%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0.md&#34;&gt;T3协议学习&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/4.Weblogic%E4%B8%93%E5%8C%BA/CVE-2015-4852%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/CVE-2015-4852%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90.md&#34;&gt;CVE-2015-4852复现分析&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://xz.aliyun.com/t/7228&#34;&gt;Weblogic使用ClassLoader和RMI来回显命令执行结果&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://pyn3rd.github.io/2022/06/18/Weblogic-SSRF-Involving-Deserialized-JDBC-Connection/&#34;&gt;Weblogic SSRF Involving Deserialized JDBC Connection&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;5.内存马学习专区&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/5.%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/Tomcat/Tomcat%E4%BB%8B%E7%BB%8D/Tomcat%E4%BB%8B%E7%BB%8D.md&#34;&gt;JavaWeb与Tomcat介绍&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/5.%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/Tomcat/Tomcat-Listener%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC/Tomcat-Listener%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC.md&#34;&gt;Tomcat-Listener型内存马&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/5.%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/Tomcat/Tomcat-Filter%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC/Tomcat-Filter%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC.md&#34;&gt;Tomcat-Filter型内存马&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/5.%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/Tomcat/Tomcat-Servlet%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC/Tomcat-Servlet%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC.md&#34;&gt;Tomcat-Servlet型内存马&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/x4pxmeqC1DvRi9AdxZ-0Lw&#34;&gt;Tomcat-Valve内存马&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/RuP8cfjUXnLVJezBBBqsYw&#34;&gt;Tomcat-Upgrade内存马&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/veo/wsMemShell&#34;&gt;WebSocket代理内存马&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/uHxQf86zHJvg9frTbjdIdA&#34;&gt;Executor内存马的实现&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://wjlshare.com/archives/1582&#34;&gt;浅谈 Java Agent 内存马(网上看到大师傅写的很详细直接搬运工了)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/tree/main/5.%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/Spring/%E9%92%88%E5%AF%B9springboot%E7%9A%84controller%E5%86%85%E5%AD%98%E9%A9%AC&#34;&gt;SpringBoot内存马学习-通过添加新路由&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/5.%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/Spring/%E5%88%A9%E7%94%A8intercetor%E6%B3%A8%E5%85%A5Spring%E5%86%85%E5%AD%98%E9%A9%AC/index.md&#34;&gt;利用intercetor注入Spring内存马&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/5.%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/Tomcat/Timer%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC/index.md&#34;&gt;Timer型内存马&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/1ZiLD396088TxiW_dUOFsQ&#34;&gt;看不见的Jsp-Webshell(有点像平时CTF里面php的不死马的效果)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/7b3Fyu_K6ZRgKlp6RkdYoA&#34;&gt;看不见的 Jsp-WebShell 第二式增强之无痕&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gv7.me/articles/2022/the-spring-cloud-gateway-inject-memshell-through-spel-expressions/&#34;&gt;Spring cloud gateway通过SPEL注入内存马&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;6.JavaAgent学习专区&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/6.JavaAgent/JavaInstrument%E6%8F%92%E6%A1%A9%E6%8A%80%E6%9C%AF/JavaInstrument%E6%8F%92%E6%A1%A9%E6%8A%80%E6%9C%AF.md&#34;&gt;Java Instrument插桩技术初体验&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/6.JavaAgent/PreMain%E4%B9%8BaddTransformer%E4%B8%8EredefineClasses%E7%94%A8%E6%B3%95%E5%AD%A6%E4%B9%A0/PreMain%E4%B9%8BaddTransformer%E4%B8%8EredefineClasses%E7%94%A8%E6%B3%95%E5%AD%A6%E4%B9%A0.md&#34;&gt;PreMain之addTransformer与redefineClasses用法学习&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/6.JavaAgent/AgentMain/AgentMain.md&#34;&gt;AgentMain(JVM启动后动态Instrument)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;后面因为一些原因打算更系统学习，感觉在这里面直接添加有点臃肿，故开了一个新的repo来记录整个学习阶段，移步&lt;a href=&#34;https://github.com/Y4tacker/RaspLearning&#34;&gt;RaspLearning&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;7.Struts2学习专区&lt;/h2&gt; &#xA;&lt;p&gt;一开始不想搞这个是因为很少人用了，后面想了一下可以具体看看struts2当中对OGNL策略如何做提升处理学学别人的绕过(Ps:不教怎么复现搭建环境)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/7.Struts2%E4%B8%93%E5%8C%BA/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.md&#34;&gt;Struts2简介与漏洞环境搭建&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/7.Struts2%E4%B8%93%E5%8C%BA/s2-001%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/Struts2-001.md&#34;&gt;S2-001学习(由于是第一篇我还是分析的比较详细，后面不会重复本篇里面的一些流程内容)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/7.Struts2%E4%B8%93%E5%8C%BA/S2-002%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/S2-002%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90.md&#34;&gt;S2-002学习(太鸡肋了感觉实战也比较难出现)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/7.Struts2%E4%B8%93%E5%8C%BA/s2-003%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/index.md&#34;&gt;S2-003学习(比较有趣的一个洞很多小细节)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/7.Struts2%E4%B8%93%E5%8C%BA/s2-005%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/index.md&#34;&gt;S2-005学习(通过Ognl将上下文_memberAccess中的acceptProperties设为空绕过)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/7.Struts2%E4%B8%93%E5%8C%BA/S2-007%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/index.md&#34;&gt;S2-007学习(字符串拼接导致OGNL解析)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/7.Struts2%E4%B8%93%E5%8C%BA/S2-008%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/index.md&#34;&gt;S2-008学习(很鸡肋，稍微有点用的有开启devMode解析任意Ognl)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;后面突然觉得调试的过程很无聊我也不感兴趣，更感兴趣的是关于Struts当中Ognl的攻防所以后面更偏向于这方面研究，而不再具体跟踪中间的调用过程&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/7.Struts2%E4%B8%93%E5%8C%BA/S2-015%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/index.md&#34;&gt;S2-015学习(静态方法受限制以及没有setAllowStaticMethodAccess后如何绕过)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/7.Struts2%E4%B8%93%E5%8C%BA/S2-032%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/index.md&#34;&gt;S2-032学习(清空_memberAccess当中excludedXXX限制通过构造函数调用/使用DefaultMemberAccess覆盖SecurityMemberAccess绕过限制)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/7.Struts2%E4%B8%93%E5%8C%BA/S2-045%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/index.md&#34;&gt;S2-045学习(通过container获取全局共享的OgnlUtil实例来清除SecurityMemberAccess当中属性的限制)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/7.Struts2%E4%B8%93%E5%8C%BA/S2-057%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/index.md&#34;&gt;S2-057学习(突破#context被删除限制，从attr作用域获取context对象)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;8.关于Tomcat的一些小研究&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/8.%E5%85%B3%E4%BA%8ETomcat%E7%9A%84%E4%B8%80%E4%BA%9B%E5%88%86%E4%BA%AB/JSTL%E7%9A%84%E5%8F%AF%E5%88%A9%E7%94%A8%E7%82%B9/index.md&#34;&gt;JSTL的可利用点&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/8.%E5%85%B3%E4%BA%8ETomcat%E7%9A%84%E4%B8%80%E4%BA%9B%E5%88%86%E4%BA%AB/%E4%B8%80%E6%AC%A1jsp%E7%9A%84%E5%A5%87%E5%BC%82%E6%8E%A2%E7%B4%A2/1.md&#34;&gt;一次jsp的奇异探索&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/8.%E5%85%B3%E4%BA%8ETomcat%E7%9A%84%E4%B8%80%E4%BA%9B%E5%88%86%E4%BA%AB/Tomcat%E5%86%99%E6%96%87%E4%BB%B6%E6%96%B0%E5%88%A9%E7%94%A8%E6%80%9D%E8%B7%AF/DC.md&#34;&gt;Tomcat写文件新利用思路&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/8.%E5%85%B3%E4%BA%8ETomcat%E7%9A%84%E4%B8%80%E4%BA%9B%E5%88%86%E4%BA%AB/%E4%B8%A4%E4%B8%AA%E5%85%B3%E4%BA%8ETomcat%E7%9A%84%E9%97%AE%E9%A2%98/1.md&#34;&gt;两个关于Tomcat的问题&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/8.%E5%85%B3%E4%BA%8ETomcat%E7%9A%84%E4%B8%80%E4%BA%9B%E5%88%86%E4%BA%AB/Common-fileupload%E7%BB%84%E4%BB%B6%E7%BB%95%E8%BF%87/Java%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%A4%A7%E6%9D%80%E5%99%A8-%E7%BB%95waf(%E9%92%88%E5%AF%B9commons-fileupload%E7%BB%84%E4%BB%B6).md&#34;&gt;Java文件上传大杀器-绕waf(针对commons-fileupload组件)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://y4tacker.github.io/2022/06/19/year/2022/6/%E6%8E%A2%E5%AF%BBTomcat%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2%E7%BB%95waf%E6%96%B0%E5%A7%BF%E5%8A%BF/&#34;&gt;探寻Tomcat文件上传流量层面绕waf新姿势&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;9.JDBC Attack&lt;/h2&gt; &#xA;&lt;p&gt;关于Make JDBC Attacks Brilliant Again的简单记录，当我们在 JDBC Connection URL可控的情况下，攻击者可以进行什么样的攻击？这部分可以配合&lt;a href=&#34;https://tttang.com/archive/1405/&#34;&gt;探索高版本 JDK 下 JNDI 漏洞的利用方法&lt;/a&gt;来进行拓展攻击&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/2.%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%93%E5%8C%BA/MySQL-JDBC-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/MySQL%20JDBC-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E.md&#34;&gt;MySQL-JDBC-反序列化漏洞&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;(补充各版本区别)&lt;a href=&#34;https://www.anquanke.com/post/id/203086&#34;&gt;MySQL JDBC 客户端反序列化漏洞分析&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://xz.aliyun.com/t/10923&#34;&gt;对fnmsd关于detectCustomCollations触发点的版本纠正&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/9.JDBC%20Attack/h2/index.md&#34;&gt;H2-RCE&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/9.JDBC%20Attack/ModeShape/index.md&#34;&gt;ModeShape-JNDI&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/9.JDBC%20Attack/IBM-DB2/index.md&#34;&gt;IBM DB2-JNDI&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/9.JDBC%20Attack/Apache-Derby/index.md&#34;&gt;Apache Derby可触发反序列化&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/9.JDBC%20Attack/SQLite/index.md&#34;&gt;SQLite SSRF&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/9.JDBC%20Attack/PostGreSQL/index.md&#34;&gt;PostgreSQL-RCE(敌不动我不动，你先发poc我放心)&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://tttang.com/archive/1462/&#34;&gt;Make JDBC Attacks Brilliant Again 番外篇(作为上面Postgresql的拓展)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Y4tacker/hue-hive-rce&#34;&gt;Hive-RCE&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;10.关于JNDI的整理&lt;/h2&gt; &#xA;&lt;p&gt;因为比较重要单独列出来了&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://su18.org/post/rmi-attack/&#34;&gt;Java RMI 攻击由浅入深(深入源码，师傅写的很好)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://paper.seebug.org/942/#classreference-factory&#34;&gt;如何绕过高版本 JDK 的限制进行 JNDI 注入利用&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;(自己写的流程补充)&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/%E5%85%B6%E4%BB%96/%E9%AB%98%E4%BD%8E%E7%89%88JDK%E4%B8%8B%E7%9A%84JNDI%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E6%B5%81%E7%A8%8B%E8%B7%9F%E8%B8%AA/%E9%AB%98%E4%BD%8E%E7%89%88JDK%E4%B8%8B%E7%9A%84JNDI%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E6%B5%81%E7%A8%8B%E8%B7%9F%E8%B8%AA.md&#34;&gt;高低版JDK下的JNDI注入绕过流程跟踪(Jdk8u191+)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tttang.com/archive/1405/&#34;&gt;探索高版本 JDK 下 JNDI 漏洞的利用方法&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xz.aliyun.com/t/10656&#34;&gt;JNDI jdk高版本绕过—— Druid&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;11.Spring&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/5.%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/Spring/springboot-tomcat%E5%9B%9E%E6%98%BE/index.md&#34;&gt;SpirngBoot下结合Tomcat实现无OOB方式下的回显&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://y4tacker.github.io/2022/02/07/year/2022/2/%E4%BD%8E%E7%89%88%E6%9C%ACSpringBoot-SpEL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/&#34;&gt;低版本SpringBoot-SpEL表达式注入漏洞复现分析&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://y4tacker.github.io/2022/02/08/year/2022/2/SpringCloud-SnakeYAML-RCE/&#34;&gt;SpringCloud-SnakeYAML-RCE(高版本不可用)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/LandGrey/SpringBootVulExploit&#34;&gt;Spring Boot Vulnerability Exploit Check List&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/%E5%85%B6%E4%BB%96/SSRF%20to%20RCE%20with%20Jolokia%20and%20MBeans%20%E2%80%A2%20Think%20Love%20Share.pdf&#34;&gt;SSRF to Rce with Jolokia and Mbeans&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/11.Spring/CVE-2022-22947%20SpringCloudGateWay%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/index.md&#34;&gt;CVE-2022-22947 SpringCloudGateWay 远程代码执行&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hosch3n.github.io/2022/03/26/SpringCloudFunction%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/&#34;&gt;Spring Cloud Function-SPEL(利用面不大)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://rui0.cn/archives/1158&#34;&gt;SpringMVC框架任意代码执行漏洞(CVE-2010-1622)分析&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://xz.aliyun.com/t/11129&#34;&gt;Spring Beans RCE分析(CVE-2022-22965)(我还是喜欢叫Spring4shell，自己懒得写了，这篇还可以，稍微注意下AccessLogValve这个类WBS)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://xz.aliyun.com/t/11484&#34;&gt;Spring Data MongoDB SpEL表达式注入(CVE-2022-22980)(能看但是有些逻辑还是讲得很混乱总体而已还是好的作为参考即可)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;12.Shiro&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/12.Shiro/%E6%B5%85%E8%B0%88Shiro%E6%89%A7%E8%A1%8C%E4%BB%BB%E6%84%8F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96gadget%E7%9A%84%E6%96%B9%E6%A1%88/index.md&#34;&gt;浅谈Shiro执行任意反序列化gadget的方案&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/12.Shiro/CVE-2010-3863%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87/index.md&#34;&gt;CVE-2010-3863权限绕过(通过/./admin绕过/admin,/abc/../admin)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/12.Shiro/CVE-2016-6802%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87/index.md&#34;&gt;CVE-2016-6802权限绕过(通过/abc/../y4tacker/admin绕过)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/phith0n/JavaThings/raw/master/shiroattack/src/main/java/com/govuln/shiroattack/CommonsCollectionsShiro.java&#34;&gt;Shiro550-TemplatesImpl(CC6-Shiro)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/phith0n/JavaThings/raw/master/shiroattack/src/main/java/com/govuln/shiroattack/CommonsBeanutils1Shiro.java&#34;&gt;CommonsBeanutils与无 commons-collections的Shiro反序列化利用&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.lmxspace.com/2020/08/24/%E4%B8%80%E7%A7%8D%E5%8F%A6%E7%B1%BB%E7%9A%84shiro%E6%A3%80%E6%B5%8B%E6%96%B9%E5%BC%8F/&#34;&gt;另类的shiro检验key的检测方式&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tttang.com/archive/1457/&#34;&gt;shiro反序列化漏洞攻击拓展面--修改key&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/12.Shiro/Tomcat-Header%E9%95%BF%E5%BA%A6%E5%8F%97%E9%99%90%E7%AA%81%E7%A0%B4shiro%E5%9B%9E%E6%98%BE/index.md&#34;&gt;Tomcat-Header长度受限突破shiro回显&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/12.Shiro/SHIRO682/index.md&#34;&gt;Spring下Shiro&amp;lt;1.5.0权限绕过(/unauthorize/)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/12.Shiro/CVE-2020-13933%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87/index.md&#34;&gt;CVE-2020-13933特殊场景权限绕过(通过/unauthorize/%3b)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/tree/main/11.Spring/SpringBoot2.3.0%E4%B8%8BShiro%3C%3D1.5.1%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87&#34;&gt;SpringBoot2.3.0下Shiro&amp;lt;=1.5.1权限绕过(通过/aa;/%2e%2e/unauthorize绕过对/unauthorize拦截，当然也可以不用目录穿越/;y4tacker/unauthorize也可以)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/12.Shiro/Spring-Shiro1.5.2%20Bypass/index.md&#34;&gt;Spring-Shiro1.5.2 Bypass(通过/unauthorize/a%252Fa绕过对/unauthorize/*的权限限制)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;这里再贴一个小笔记：&lt;code&gt;Class.forName&lt;/code&gt;不支持原生类型，但其他类型都是ok。&lt;code&gt;Class.loadClass&lt;/code&gt;不能加载原生类型和数组类型，其他类型也都ok&lt;/p&gt; &#xA;&lt;h2&gt;13.回显相关技术学习&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.00theway.org/2020/01/17/java-god-s-eye/&#34;&gt;通杀漏洞利用回显方法-linux平台&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://xz.aliyun.com/t/7307&#34;&gt;linux下java反序列化通杀回显方法的低配版实现&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://xz.aliyun.com/t/7348&#34;&gt;Tomcat中一种半通用回显方法&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;14. JSPWebshell&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/threedr3am/JSP-Webshells&#34;&gt;JSP-Webshells集合(三梦的总结挺全面的利用点)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://y4tacker.github.io/2022/05/16/year/2022/5/JspWebShell%E6%96%B0%E5%A7%BF%E5%8A%BF%E8%A7%A3%E8%AF%BB/&#34;&gt;JspWebShell新姿势解读&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://y4tacker.github.io/2022/02/03/year/2022/2/jsp%E6%96%B0webshell%E7%9A%84%E6%8E%A2%E7%B4%A2%E4%B9%8B%E6%97%85/&#34;&gt;jsp新webshell的探索之旅&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;15.Waf&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://y4tacker.github.io/2022/02/25/year/2022/2/Java%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%A4%A7%E6%9D%80%E5%99%A8-%E7%BB%95waf(%E9%92%88%E5%AF%B9commons-fileupload%E7%BB%84%E4%BB%B6)/&#34;&gt;Java文件上传大杀器-绕waf(针对commons-fileupload组件)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://y4tacker.github.io/2022/06/19/year/2022/6/%E6%8E%A2%E5%AF%BBTomcat%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2%E7%BB%95waf%E6%96%B0%E5%A7%BF%E5%8A%BF/&#34;&gt;探寻Java文件上传流量层面waf绕过姿势系列一&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://y4tacker.github.io/2022/06/21/year/2022/6/%E6%8E%A2%E5%AF%BBJava%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2waf%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E7%B3%BB%E5%88%97%E4%BA%8C/&#34;&gt;探寻Java文件上传流量层面waf绕过姿势系列二&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://gv7.me/articles/2021/java-deserialize-data-bypass-waf-by-adding-a-lot-of-dirty-data/&#34;&gt;Java反序列化数据绕WAF之加大量脏数据 | 回忆飘如雪 (gv7.me)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://y4tacker.github.io/2022/02/05/year/2022/2/%E5%AF%B9Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%95%B0%E6%8D%AE%E7%BB%95WAF%E6%96%B0%E5%A7%BF%E5%8A%BF%E7%9A%84%E8%A1%A5%E5%85%85/&#34;&gt;Java反序列化脏数据新姿势-对大师傅的姿势补充(个人的小研究)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://y4tacker.github.io/2022/03/30/year/2022/3/%E6%B5%85%E8%B0%88Fastjson%E7%BB%95waf/&#34;&gt;Fastjson词法引擎绕waf&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;16.漏洞复现&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xz.aliyun.com/t/11527&#34;&gt;Apache Commons Configuration 远程代码执行(虽然是配置文件RCE但也有学习意义)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/16.%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2022-33891/index.md&#34;&gt;Apache Spark shell command injection vulnerability via Spark UI(之前很早前在我的各个知识星球分享了)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/16.%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2022-41852/index.md&#34;&gt;Apache Commons JXPath 远程代码执行&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;17.模板引擎相关&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/nice0e3/p/16218857.html&#34;&gt;velocity 模板注入&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/nice0e3/p/16217471.html&#34;&gt;freemarker 模板注入&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/%E6%AF%94%E8%B5%9B%E5%8F%8D%E6%80%9D/2022/8/uiuctf-pebble/index.md&#34;&gt;pebble模板注入&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xz.aliyun.com/t/10514&#34;&gt;thymeleaf模板注入&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://y4tacker.github.io/2022/04/14/year/2022/4/Enjoy%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%88%86%E6%9E%90/&#34;&gt;国产Jfinal用的Enjoy模板引擎主要研究不出网利用&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;18.各框架对URI处理的特性及Trick&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xz.aliyun.com/t/7544&#34;&gt;Tomcat URL解析差异性导致的安全问题(网上看到的主要关注HttpServletRequest中几个解析URL的函数这个问题)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/8.%E5%85%B3%E4%BA%8ETomcat%E7%9A%84%E4%B8%80%E4%BA%9B%E5%88%86%E4%BA%AB/Tomcat%E4%B8%ADurl%E8%A7%A3%E6%9E%90%E7%89%B9%E6%80%A7/index.md&#34;&gt;Tomcat中url解析特性&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/11.Spring/SpringBoot2.3.0%E4%BB%A5%E4%B8%8B%E8%B7%AF%E7%94%B1%252e%E8%B7%A8%E7%9B%AE%E5%BD%95%E5%A4%84%E7%90%86(%E5%8F%AF%E7%94%A8%E4%BA%8E%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87)/index.md&#34;&gt;SpringBoot2.3.0以下路由%2e跨目录处理(可用于权限绕过)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;19.Hacking FernFlower Decompiler(准备上议题后放)&lt;/h2&gt; &#xA;&lt;p&gt;如何影响idea反编译但不影响代码执行，暂时不想放出来，之后会放出来&lt;/p&gt; &#xA;&lt;h2&gt;20.ASM与JVM学习&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/coding-way/p/6600647.html&#34;&gt;JAVA虚拟机执行模型(关注引入了栈映射帧，用于加快虚拟机中类验证过程的速度)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/25109942/what-is-a-stack-map-frame&#34;&gt;What is a stack map frame&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;这里比较有意思的是：Java 1.7引入了此选项以加速类验证。框架分为两部分：变量类型和堆栈类型。第一帧由方法类型描述。在每个GOTO / JUMP调用之后，您需要提供堆栈映射框架的更新描述。为了节省空间，可以使用SAME，APPEND等选项，也可以通过指定变量类型的FULL数组再次描述所有变量。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/clayjj/p/7698035.html&#34;&gt;为什么JVM需要DUP指令&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;其他分享&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://y4tacker.github.io/2022/05/09/year/2022/5/GadgetInspector%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/&#34;&gt;GadgetInspector源码分析&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/%E5%85%B6%E4%BB%96/CVE-2021-2471%20JDBC-XXE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/CVE-2021-2471%20JDBC-XXE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90.md&#34;&gt;CVE-2021-2471 JDBC-XXE漏洞分析&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/%E5%85%B6%E4%BB%96/spring-messaging%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/spring-messaging%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90.md&#34;&gt;spring-messaging 远程代码执行漏洞分析&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://threedr3am.github.io/2020/06/12/CVE-2020-9484%20Tomcat-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/&#34;&gt;CVE-2020-9484 Tomcat-RCE漏洞分析报告(备注:三梦师傅的文章，提升了我对Tomcat配置的了解)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://paper.seebug.org/1133/&#34;&gt;Java “后反序列化漏洞” 利用思路&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://y4tacker.github.io/2022/02/03/year/2022/2/Servlet%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/&#34;&gt;关于Servlet的线程安全问题&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/%E5%85%B6%E4%BB%96/BypassSM/bypasssm.md&#34;&gt;BypassSM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://blog.gm7.org/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E5%BA%93/02.%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/01.Java%E5%AE%89%E5%85%A8/03.%E5%BA%94%E7%94%A8%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/06.log4j2_rce%E5%88%86%E6%9E%90.html#%E5%A4%8D%E7%8E%B0&#34;&gt;Log4j2-RCE分析&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/wh4am1/p/14681335.html&#34;&gt;Spring Boot FatJar任意写目录漏洞导致Getshell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/%E5%85%B6%E4%BB%96/%E5%88%A9%E7%94%A8TemplatesImpl%E6%89%A7%E8%A1%8C%E5%AD%97%E8%8A%82%E7%A0%81/%E5%88%A9%E7%94%A8TemplatesImpl%E6%89%A7%E8%A1%8C%E5%AD%97%E8%8A%82%E7%A0%81.md&#34;&gt;利用TemplatesImpl执行字节码&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/4.Weblogic%E4%B8%93%E5%8C%BA/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A1%A5%E4%B8%81%E5%96%9C%E6%AC%A2%E6%89%93%E5%9C%A8resolveClass/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A1%A5%E4%B8%81%E5%96%9C%E6%AC%A2%E6%89%93%E5%9C%A8resolveClass.md&#34;&gt;为什么补丁都喜欢打在resolveClass&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.anquanke.com/post/id/151398&#34;&gt;Java沙箱绕过&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/k1n9/k1n9.github.io/raw/aeeb609fe6a25d67bc2dc5f990a501368fb25409/_posts/2017-08-24-attack-jmx-rmi.md&#34;&gt;JMX RMI攻击利用&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://threedr3am.github.io/2021/11/18/%E4%B8%80%E7%A7%8D%E6%99%AE%E9%81%8D%E5%AD%98%E5%9C%A8%E4%BA%8Ejava%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BC%BA%E9%99%B7-Memory%20DoS/#more&#34;&gt;一种普遍存在于java系统的缺陷 - Memory DoS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/%E5%85%B6%E4%BB%96/%E5%85%B3%E9%97%AD%E7%99%BE%E5%BA%A6%E7%9A%84Rasp/index.md&#34;&gt;如何关闭百度的Rasp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://paper.seebug.org/1689/#_1&#34;&gt;漫谈 JEP 290&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/QCfqO2BJuhSOr58rldZzxA&#34;&gt;Java Web —— 从内存中Dump JDBC数据库明文密码(还挺好玩的)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forum.butian.net/share/886&#34;&gt;普通EL表达式命令回显的简单研究&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/%E5%85%B6%E4%BB%96/Maven/index.md&#34;&gt;如何带依赖打包Jar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/%E5%85%B6%E4%BB%96/Java%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/Java%E8%A7%A6%E5%8F%91%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E7%82%B9.md&#34;&gt;一些Java二次反序列化的点(持续收集)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://y4tacker.github.io/2022/05/28/year/2022/5/OpenRasp%E5%88%86%E6%9E%90/&#34;&gt;自己写的OpenRasp分析&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xz.aliyun.com/t/11450&#34;&gt;tomcat-jmxproxy-rce-exp(挺骚的感觉留个后门啥的不错)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/1135/unomi_exploit&#34;&gt;Apache Unomi 表达式注入攻防&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xz.aliyun.com/t/8099&#34;&gt;JEXL3表达式注入&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/jH8TNvY8bAu0m2kQBvpQyg&#34;&gt;利用JVMTI实现JAR包加密(还没看很牛逼就是了)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;比赛反思&lt;/h2&gt; &#xA;&lt;p&gt;特地加了一栏吧，希望从比赛当中了解Java相关的东西学习一些新的点！&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/%E6%AF%94%E8%B5%9B%E5%8F%8D%E6%80%9D/2022/3/Codegate2022/index.md&#34;&gt;Codegate2022(关键词:绕过开头file协议读文件、xpath注入读系统配置)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/tree/main/%E6%AF%94%E8%B5%9B%E5%8F%8D%E6%80%9D/2022/3/SUSCTF2022&#34;&gt;SUSCTF2022(关键词:绕rasp、fastjson、xxe)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://y4tacker.github.io/2022/03/07/year/2022/3/ROME%E6%94%B9%E9%80%A0%E8%AE%A1%E5%88%92/&#34;&gt;D^3CTF2022(关键词:ROME链缩短、Mybatis与Ognl)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://y4tacker.github.io/2022/03/21/year/2022/3/2022%E8%99%8E%E7%AC%A6CTF-Java%E9%83%A8%E5%88%86/&#34;&gt;虎符CTF2022(关键词:Hessian反序列化、Rome二次反序列化、java.security.SignedObject#getObject、UnixPrintService命令执行、Tabby)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://y4tacker.github.io/2022/04/24/year/2022/4/2022MRCTF-Java%E9%83%A8%E5%88%86/&#34;&gt;MRCTF2022(关键词:Kryo反序列化、Rome二次反序列化、内存马、Bypass SerialKiller黑名单-找替代类)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/%E6%AF%94%E8%B5%9B%E5%8F%8D%E6%80%9D/2022/3/2022GooGleCTF/index.md&#34;&gt;GoogleCTF2022(关键词：Log4j2、Bundle、ReDoS)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y4tacker/JavaSec/raw/main/%E6%AF%94%E8%B5%9B%E5%8F%8D%E6%80%9D/2022/8/uiuctf-pebble/index.md&#34;&gt;UIUCTF2022-Spoink(关键词：Pebble最新模板注入Bypass、Spring中无路由上传文件处理)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;环境&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/QAX-A-Team/WeblogicEnvironment&#34;&gt;如何远程调试Weblogic&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/35454131&#34;&gt;使用idea进行tomcat源码调试&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Todolist&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;解决反序列化serialVesionUID不一致问题--已经拿下&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xz.aliyun.com/t/10916&#34;&gt;Dubbo学习之后开启&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xz.aliyun.com/t/10075#toc-5&#34;&gt;无文件落地Agent型内存马植入(Java内存攻击技术漫谈-Rebyond)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;自己对所有文件上传框架Trick总结&lt;/li&gt; &#xA; &lt;li&gt;消化腾讯大师傅写的关于文件上传waf&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;注意事项&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;本仓库仅用于合法合规用途，严禁用于违法违规用途。&lt;/li&gt; &#xA; &lt;li&gt;本工具中所涉及的漏洞均为网上已公开。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;优质博客&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://y4tacker.github.io/&#34;&gt;Y4tacker(自己的能不写吗)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://threedr3am.github.io/&#34;&gt;三梦&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://su18.org/&#34;&gt;su18&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://landgrey.me/&#34;&gt;landgrey&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gv7.me/&#34;&gt;回忆飘如雪&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;更多&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://api.star-history.com/svg?repos=Y4tacker/JavaSec&amp;amp;type=Timeline&#34; div align=&#34;center/&#34;&gt;&#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>apache/avro</title>
    <updated>2022-10-21T01:33:44Z</updated>
    <id>tag:github.com,2022-10-21:/apache/avro</id>
    <link href="https://github.com/apache/avro" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Apache Avro is a data serialization system.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Apache Avro™&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apache/avro/actions/workflows/test-lang-c.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/avro/actions/workflows/test-lang-c.yml/badge.svg?sanitize=true&#34; alt=&#34;test c&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/avro/actions/workflows/test-lang-csharp.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/avro/actions/workflows/test-lang-csharp.yml/badge.svg?sanitize=true&#34; alt=&#34;test c#&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/avro/actions/workflows/test-lang-c++.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/avro/actions/workflows/test-lang-c++.yml/badge.svg?sanitize=true&#34; alt=&#34;test c++&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/avro/actions/workflows/test-lang-java.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/avro/actions/workflows/test-lang-java.yml/badge.svg?sanitize=true&#34; alt=&#34;test java&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/avro/actions/workflows/test-lang-js.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/avro/actions/workflows/test-lang-js.yml/badge.svg?sanitize=true&#34; alt=&#34;test javascript&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/avro/actions/workflows/test-lang-perl.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/avro/actions/workflows/test-lang-perl.yml/badge.svg?sanitize=true&#34; alt=&#34;test perl&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/avro/actions/workflows/test-lang-ruby.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/avro/actions/workflows/test-lang-ruby.yml/badge.svg?sanitize=true&#34; alt=&#34;test ruby&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/avro/actions/workflows/test-lang-py.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/avro/actions/workflows/test-lang-py.yml/badge.svg?sanitize=true&#34; alt=&#34;test python&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/avro/actions/workflows/test-lang-php.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/avro/actions/workflows/test-lang-php.yml/badge.svg?sanitize=true&#34; alt=&#34;test php&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apache/avro/actions/workflows/test-lang-rust-ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/avro/actions/workflows/test-lang-rust-ci.yml/badge.svg?sanitize=true&#34; alt=&#34;rust continuous integration&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/avro/actions/workflows/test-lang-rust-clippy.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/avro/actions/workflows/test-lang-rust-clippy.yml/badge.svg?sanitize=true&#34; alt=&#34;rust clippy check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/avro/actions/workflows/test-lang-rust-audit.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/avro/actions/workflows/test-lang-rust-audit.yml/badge.svg?sanitize=true&#34; alt=&#34;rust security audit&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apache/avro/actions/workflows/codeql-csharp-analysis.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/avro/actions/workflows/codeql-csharp-analysis.yml/badge.svg?sanitize=true&#34; alt=&#34;codeql c#&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/avro/actions/workflows/codeql-java-analysis.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/avro/actions/workflows/codeql-java-analysis.yml/badge.svg?sanitize=true&#34; alt=&#34;codeql java&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/avro/actions/workflows/codeql-js-analysis.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/avro/actions/workflows/codeql-js-analysis.yml/badge.svg?sanitize=true&#34; alt=&#34;codeql javascript&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/avro/actions/workflows/codeql-py-analysis.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/avro/actions/workflows/codeql-py-analysis.yml/badge.svg?sanitize=true&#34; alt=&#34;codeql python&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Apache Avro™ is a data serialization system.&lt;/p&gt; &#xA;&lt;p&gt;Learn more about Avro, please visit our website at:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://avro.apache.org/&#34;&gt;https://avro.apache.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To contribute to Avro, please read:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cwiki.apache.org/confluence/display/AVRO/How+To+Contribute&#34;&gt;https://cwiki.apache.org/confluence/display/AVRO/How+To+Contribute&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- Arranged this way for easy copy-pasting and editor string manipulation --&gt;</summary>
  </entry>
</feed>