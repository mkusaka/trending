<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-25T02:30:51Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>spring-projects-experimental/spring-ai</title>
    <updated>2023-08-25T02:30:51Z</updated>
    <id>tag:github.com,2023-08-25:/spring-projects-experimental/spring-ai</id>
    <link href="https://github.com/spring-projects-experimental/spring-ai" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Spring AI project aims to streamline the development of applications that incorporate artificial intelligence functionality without unnecessary complexity.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Spring AI &lt;a href=&#34;https://github.com/spring-projects-experimental/spring-ai/actions/workflows/continuous-integration.yml&#34;&gt;&lt;img src=&#34;https://github.com/spring-projects-experimental/spring-ai/actions/workflows/continuous-integration.yml/badge.svg?sanitize=true&#34; alt=&#34;build status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to the Spring AI project!&lt;/p&gt; &#xA;&lt;p&gt;The Spring AI project provides a Spring-friendly API and abstractions for developing AI applications.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s make your &lt;code&gt;@Beans&lt;/code&gt; intelligent!&lt;/p&gt; &#xA;&lt;h2&gt;Project Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/spring-projects-experimental/spring-ai/issues&#34;&gt;Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.spring.io/spring-ai/reference/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.spring.io/spring-ai/docs/current-SNAPSHOT/&#34;&gt;JavaDocs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;Check out the workshop below but if you want to add the necessary goodies by hand, you will need to add the snapshot repository&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;  &amp;lt;repositories&amp;gt;&#xA;    &amp;lt;repository&amp;gt;&#xA;      &amp;lt;id&amp;gt;spring-snapshots&amp;lt;/id&amp;gt;&#xA;      &amp;lt;name&amp;gt;Spring Snapshots&amp;lt;/name&amp;gt;&#xA;      &amp;lt;url&amp;gt;https://repo.spring.io/snapshot&amp;lt;/url&amp;gt;&#xA;      &amp;lt;releases&amp;gt;&#xA;        &amp;lt;enabled&amp;gt;false&amp;lt;/enabled&amp;gt;&#xA;      &amp;lt;/releases&amp;gt;&#xA;    &amp;lt;/repository&amp;gt;&#xA;  &amp;lt;/repositories&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And the Spring Boot Starter depending on if you are using Azure Open AI or Open AI.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Azure OpenAI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;dependency&amp;gt;&#xA;        &amp;lt;groupId&amp;gt;org.springframework.experimental.ai&amp;lt;/groupId&amp;gt;&#xA;        &amp;lt;artifactId&amp;gt;spring-ai-azure-openai-spring-boot-starter&amp;lt;/artifactId&amp;gt;&#xA;        &amp;lt;version&amp;gt;0.2.0-SNAPSHOT&amp;lt;/version&amp;gt;&#xA;    &amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OpenAI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;dependency&amp;gt;&#xA;        &amp;lt;groupId&amp;gt;org.springframework.experimental.ai&amp;lt;/groupId&amp;gt;&#xA;        &amp;lt;artifactId&amp;gt;spring-ai-openai-spring-boot-starter&amp;lt;/artifactId&amp;gt;&#xA;        &amp;lt;version&amp;gt;0.2.0-SNAPSHOT&amp;lt;/version&amp;gt;&#xA;    &amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Workshop&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can try out the features of Spring AI by following the &lt;a href=&#34;https://github.com/markpollack/spring-ai-azure-workshop&#34;&gt;workshop material for Azure OpenAI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;To use the workshop material with OpenAI (not Azure&#39;s offering) you will need to &lt;em&gt;replace&lt;/em&gt; the Azure Open AI Boot Starter in the &lt;code&gt;pom.xml&lt;/code&gt; with the Open AI Boot Starter.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;dependency&amp;gt;&#xA;        &amp;lt;groupId&amp;gt;org.springframework.experimental.ai&amp;lt;/groupId&amp;gt;&#xA;        &amp;lt;artifactId&amp;gt;spring-ai-openai-spring-boot-starter&amp;lt;/artifactId&amp;gt;&#xA;        &amp;lt;version&amp;gt;0.2.0-SNAPSHOT&amp;lt;/version&amp;gt;&#xA;    &amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Despite the extensive history of AI, Java&#39;s role in this domain has been relatively minor. This is mainly due to the historical reliance on efficient algorithms developed in languages such as C/C++, with Python serving as a bridge to access these libraries. The majority of ML/AI tools were built around the Python ecosystem. However, recent progress in Generative AI, spurred by innovations like OpenAI&#39;s ChatGPT, has popularized the interaction with pre-trained models via HTTP. This eliminates much of the dependency on C/C++/Python libraries and opens the door to the use of programming languages such as Java.&lt;/p&gt; &#xA;&lt;p&gt;The Python libraries &lt;a href=&#34;https://docs.langchain.com/docs/&#34;&gt;LangChain&lt;/a&gt; and &lt;a href=&#34;https://gpt-index.readthedocs.io/en/latest/getting_started/concepts.html&#34;&gt;LlamaIndex&lt;/a&gt; have become popular to implement Generative AI solutions and can be implemented in other programming languages. These Python libraries share foundational themes with Spring projects, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Portable Service Abstractions&lt;/li&gt; &#xA; &lt;li&gt;Modularity&lt;/li&gt; &#xA; &lt;li&gt;Extensibility&lt;/li&gt; &#xA; &lt;li&gt;Reduction of boilerplate code&lt;/li&gt; &#xA; &lt;li&gt;Integration with diverse data sources&lt;/li&gt; &#xA; &lt;li&gt;Prebuilt solutions for common use cases&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Taking inspiration from these libraries, the Spring AI project aims to provide a similar experience for Spring developers in the AI domain.&lt;/p&gt; &#xA;&lt;h2&gt;Feature Overview&lt;/h2&gt; &#xA;&lt;p&gt;The following is a feature list resembling those found in the LangChain documentation. The initial features lay the foundation, with subsequent, more complex features building upon them.&lt;/p&gt; &#xA;&lt;p&gt;You can find more details in the &lt;a href=&#34;https://docs.spring.io/spring-ai/reference/&#34;&gt;Reference Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Not all features listed here are implemented yet, but a good amount are :)&lt;/p&gt; &#xA;&lt;h3&gt;Model I/O&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;AI Models:&lt;/strong&gt; A foundational feature is a common client API for interacting with generative AI Models. A common API enables you to develop an application targeting OpenAI&#39;s ChatGPT HTTP interface and easily switch to Azure&#39;s OpenAI service, as an example.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Prompts:&lt;/strong&gt; At the center of the AI model interaction is the Prompt - a set of instructions for the AI model to respond to. Creating an effective Prompt is part art and part science, giving rise to the discipline of Prompt Engineering. Prompts utilize a templating engine, enabling easy replacement of data within prompt text placeholders.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output Parsers:&lt;/strong&gt; The AI responses are typically a raw &lt;code&gt;java.lang.String&lt;/code&gt;. Output Parsers transform the raw String into structured formats like CSV or JSON, to make the output usable in a programming environment. Output Parsers may also do additional post-processing on the response String.&lt;/p&gt; &#xA;&lt;h3&gt;Incorporating your data&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Data Management:&lt;/strong&gt; A significant innovation in Generative AI involves enabling the model to understand your proprietary data without having to retrain the model&#39;s weights. Retraining a model is a complex and compute-intensive task. Recent Generative AI models have billions of parameters that require specialized hard-to-find hardware making it practically impossible to retrain the largest of models. Instead, the &#39;In-context&#39; learning technique lets you more easily incorporate your data into the pre-trained model. This data can be from text files, HTML, database results, etc. Effectively incorporating your data in an AI model requires specific techniques critical for developing successful solutions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Vector Stores:&lt;/strong&gt; A widely used technique to incorporate your data in a AI model is using Vector Databases. Vector Databases help to classify which part of your documents are most relevant for the AI model to use in creating a response. Examples of Vector Databases are Chroma, Pinecone, Weaviate, Mongo Atlas, and RediSearch. Spring IO abstracts these databases, allowing easy swapping of implementations.&lt;/p&gt; &#xA;&lt;h3&gt;Chaining together multiple AI model interactions&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Chains:&lt;/strong&gt; Many AI solutions require multiple AI interactions to respond to a single user input. &#34;Chains&#34; organize these interactions, offering modular AI workflows that promote reusability. While you can create custom Chains tailored to your specific use case, pre-configured use-case-specific Chains are provided to accelerate your development. Use-cases such as Question-Answering, Text Generation, and Summarization are examples.&lt;/p&gt; &#xA;&lt;h3&gt;Memory&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Memory:&lt;/strong&gt; To support multiple AI model interactions, your application must recall the previous inputs and outputs. A variety of algorithms are available for different scenarios, often backed by databases like Redis, Cassandra, MongoDB, Postgres, and other database technologies.&lt;/p&gt; &#xA;&lt;h3&gt;Agents&lt;/h3&gt; &#xA;&lt;p&gt;Beyond Chains, Agents represent the next level of sophistication. Agents use the AI models themselves to determine the techniques and steps to respond to a user&#39;s query. Agents might even dynamically access external data sources to retrieve information necessary for responding to a user. It&#39;s getting a bit funky, isn&#39;t it?&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;To build with only unit tests&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./mvnw clean package&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build including integration tests. You will need to set environment variables for API keys to OpenAI&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./mvww clean package -Pintegration-tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build the docs&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./mvnw -pl spring-ai-docs antora&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The docs are then in the directory &lt;code&gt;spring-ai-docs/target/antora/site/index.html&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
</feed>