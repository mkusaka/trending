<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-18T01:40:04Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>constanline/XQuickEnergy</title>
    <updated>2023-07-18T01:40:04Z</updated>
    <id>tag:github.com,2023-07-18:/constanline/XQuickEnergy</id>
    <link href="https://github.com/constanline/XQuickEnergy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;XQuickEnergy&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/constanline/XQuickEnergy/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/constanline/XQuickEnergy.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/constanline/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/constanline/XQuickEnergy.svg?sanitize=true&#34; alt=&#34;Latest Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/constanline/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/constanline/XQuickEnergy/total.svg?sanitize=true&#34; alt=&#34;All Releases Download&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;主要功能&lt;/h2&gt; &#xA;&lt;p&gt;感谢蚂蚁森林对绿化事业的贡献。快速收取蚂蚁森林能量，也为祖国的绿化事业出一份微薄之力~&lt;/p&gt; &#xA;&lt;h2&gt;更新计划&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 修复原版森林功能&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 增加I18n中文&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 增加同步步数功能 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 允许自定义步数&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 修复原版农场功能&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 森林完善 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 增加收能量限制&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 能量雨开关&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 赠送能量雨列表&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 签到&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 浇水功能&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 7:00-7:30只收能量&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 优化收能量逻辑&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 双击卡功能&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 保活模式&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 好友昵称&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 神奇海洋&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 蚂蚁新村&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;目前没有大小号、号码切换的计划&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;使用说明&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;本APP是为了学习研究用，不得进行任何形式的转发，发布，传播。&lt;/li&gt; &#xA; &lt;li&gt;请于24小时内卸载本APP。若使用期间造成任何损失，作者不负任何责任。&lt;/li&gt; &#xA; &lt;li&gt;本APP不篡改，不修改，不获取任何个人信息及其支付宝信息。&lt;/li&gt; &#xA; &lt;li&gt;本APP使用者因为违反本声明的规定而触犯中华人民共和国法律的，一切后果自负，作者不承担任何责任。&lt;/li&gt; &#xA; &lt;li&gt;凡以任何方式直接、间接使用APP者，视为自愿接受本声明的约束。&lt;/li&gt; &#xA; &lt;li&gt;本APP如无意中侵犯了某个媒体或个人的知识产权，请来信或来电告之，作者将立即删除。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;授权说明&lt;/h2&gt; &#xA;&lt;p&gt;本项目基于 &lt;a href=&#34;https://github.com/pansong291/XQuickEnergy&#34;&gt;XQuickEnergy&lt;/a&gt; 开发，遵循 Apache-2.0 协议&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lx5555/mePush</title>
    <updated>2023-07-18T01:40:04Z</updated>
    <id>tag:github.com,2023-07-18:/lx5555/mePush</id>
    <link href="https://github.com/lx5555/mePush" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;pre&gt;&lt;code&gt;                                  消息推送平台-mePush&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;项目演示地址：&lt;a href=&#34;http://8.130.126.21:3000/&#34;&gt;http://8.130.126.21:3000/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;消息推送平台mePush介绍&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;背景(只要有消息发送需求就可以用这个平台)：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1.广告商投放广告&#xA;2.验证码短信下发&#xA;3.通知类，警告类信息下发，例如某用户关注的主播开播了，系统警告线程池线程数达到阈值&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/lx5555/mePush/assets/71442208/0d3917b3-362e-4ede-b389-7707ff583634&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;技术栈：&lt;/strong&gt; Springboot, MyBatis, Apollo, Kafka, Redis, DynamicTp, Flink, GrayLog, xxl-job&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;核心功能：&lt;/strong&gt; 不同渠道不同类型的消息发送，消息的全链路生命周期追踪&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/lx5555/mePush/assets/71442208/53258233-432d-40be-8772-6d763df74b53&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;如何使用：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;创建账号（选择渠道！！！接入姿势查看对应官方文档1.qq邮箱开启POP3/IMAP/SMTP/Exchange/CardDAV/CalDAV服务即可 2.短信去对应渠道官网开通服务：&lt;a href=&#34;https://console.cloud.tencent.com/smsv2&#34;&gt;https://console.cloud.tencent.com/smsv2&lt;/a&gt; 3.企业微信：&lt;a href=&#34;https://developer.work.weixin.qq.com/document/path/91201%EF%BC%89%EF%BC%9A&#34;&gt;https://developer.work.weixin.qq.com/document/path/91201）：&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/lx5555/mePush/assets/71442208/636e0f00-ddc3-4bdc-b0e9-1b67a4156b87&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;创建模板（选择刚才创建的账号作为发送账号）：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/lx5555/mePush/assets/71442208/26559425-84d6-4e14-81db-8ff2b66c5a9d&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;填写发送账号，标题和文案&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/lx5555/mePush/assets/71442208/37587c61-6ab6-46b4-aa64-298649302649&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;设计思路（待补充）：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;1.消息隔离&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/lx5555/mePush/assets/71442208/5799a96d-29bb-49cc-9d45-1249479b83e2&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;2.全链路追踪&lt;/p&gt; &#xA;&lt;p&gt;两种角度：用户角度（给用户反馈为什么消息发送失败） + 模板角度（广告曝光量）&lt;/p&gt; &#xA;&lt;p&gt;3.补偿机制&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>alipay/fury</title>
    <updated>2023-07-18T01:40:04Z</updated>
    <id>tag:github.com,2023-07-18:/alipay/fury</id>
    <link href="https://github.com/alipay/fury" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A blazing fast multi-language serialization framework powered by jit and zero-copy&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img width=&#34;77%&#34; alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/alipay/fury/main/docs/images/logo/fury-logo.svg?sanitize=true&#34;&gt;&#xA; &lt;br&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;Fury: Blazing Fast Serialization&lt;/h1&gt; &#xA;&lt;p&gt;Fury is a blazing fast multi-language serialization framework powered by jit(just-in-time compilation) and zero-copy.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://furyio.org&#34;&gt;https://furyio.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Multiple languages: Java/Python/C++/Golang/Javascript.&lt;/li&gt; &#xA; &lt;li&gt;Zero-copy: cross-language out-of-band serialization inspired by &lt;a href=&#34;https://peps.python.org/pep-0574/&#34;&gt;pickle5&lt;/a&gt; and off-heap read/write.&lt;/li&gt; &#xA; &lt;li&gt;High performance: A highly-extensible JIT framework to generate serializer code at runtime in an async multi-thread way to speed serialization, providing 20-170x speed up by: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;reduce memory access by inline variable in generated code.&lt;/li&gt; &#xA;   &lt;li&gt;reduce virtual method invocation by inline call in generated code.&lt;/li&gt; &#xA;   &lt;li&gt;reduce conditional branching.&lt;/li&gt; &#xA;   &lt;li&gt;reduce hash lookup.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Multiple binary protocols: object graph, row format and so on.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In addition to cross-language serialization, Fury also features at:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Drop-in replace Java serialization frameworks such as JDK/Kryo/Hessian without modifying any code, but 100x faster. It can greatly improve the efficiency of high-performance RPC calls, data transfer and object persistence.&lt;/li&gt; &#xA; &lt;li&gt;JDK serialization 100% compatible, support java custom serialization &lt;code&gt;writeObject/readObject/writeReplace/readResolve/readObjectNoData&lt;/code&gt; natively.&lt;/li&gt; &#xA; &lt;li&gt;Supports shared and circular reference object serialization for golang.&lt;/li&gt; &#xA; &lt;li&gt;Supports automatic object serialization for golang.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Protocols&lt;/h2&gt; &#xA;&lt;p&gt;Different scenarios have different serialization requirements. Fury designed and implemented multiple binary protocols for those requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cross-language object graph protocol: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Cross-language serialize any object automatically, no need for IDL definition, schema compilation and object to/from protocol conversion.&lt;/li&gt; &#xA;   &lt;li&gt;Support shared reference and circular reference, no duplicate data or recursion error.&lt;/li&gt; &#xA;   &lt;li&gt;Support object polymorphism.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Native java/python object graph protocol: highly-optimized based on type system of the language.&lt;/li&gt; &#xA; &lt;li&gt;Row format protocol: a cache-friendly binary random access format, supports skipping serialization and partial serialization, and can convert to column-format automatically.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;New protocols can be added easily based on fury existing buffer, encoding, meta, codegen and other capabilities. All of those share same codebase, and the optimization for one protocol can be reused by another protocol.&lt;/p&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;Different serialization frameworks are suitable for different scenarios, and benchmark results here are for reference only.&lt;/p&gt; &#xA;&lt;p&gt;If you need to benchmark for your specific scenario, make sure all serialization frameworks are appropriately configured for that scenario.&lt;/p&gt; &#xA;&lt;p&gt;Dynamic serialization frameworks supports polymorphism and reference, which has more cost compared to static serialization frameworks, unless it uses the jit techniques as fury did. Since fury will generate code at runtime, please warm up before collecting benchmark statistics.&lt;/p&gt; &#xA;&lt;h3&gt;Java Serialization&lt;/h3&gt; &#xA;&lt;p&gt;Title containing &#34;compatible&#34; represent schema compatible mode: support type forward/backward compatibility.&lt;/p&gt; &#xA;&lt;p&gt;Title without &#34;compatible&#34; represent schema consistent mode: class schema must be same between serialization and deserialization.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Struct&lt;/code&gt; is a class with &lt;a href=&#34;https://github.com/alipay/fury/tree/main/docs/benchmarks#Struct&#34;&gt;100 primitive fields&lt;/a&gt;, &lt;code&gt;MediaContent&lt;/code&gt; is a class from &lt;a href=&#34;https://github.com/eishay/jvm-serializers/raw/master/tpc/src/data/media/MediaContent.java&#34;&gt;jvm-serializers&lt;/a&gt;, &lt;code&gt;Sample&lt;/code&gt; is a class from &lt;a href=&#34;https://github.com/EsotericSoftware/kryo/raw/master/benchmarks/src/main/java/com/esotericsoftware/kryo/benchmarks/data/Sample.java&#34;&gt;kryo benchmark&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;24%&#34; alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/alipay/fury/main/docs/benchmarks/compatible/bench_serialize_compatible_STRUCT_to_directBuffer_tps.png&#34;&gt; &lt;img width=&#34;24%&#34; alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/alipay/fury/main/docs/benchmarks/compatible/bench_serialize_compatible_MEDIA_CONTENT_to_array_tps.png&#34;&gt; &lt;img width=&#34;24%&#34; alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/alipay/fury/main/docs/benchmarks/serialization/bench_serialize_MEDIA_CONTENT_to_array_tps.png&#34;&gt; &lt;img width=&#34;24%&#34; alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/alipay/fury/main/docs/benchmarks/serialization/bench_serialize_SAMPLE_to_array_tps.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;24%&#34; alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/alipay/fury/main/docs/benchmarks/compatible/bench_deserialize_compatible_STRUCT_from_directBuffer_tps.png&#34;&gt; &lt;img width=&#34;24%&#34; alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/alipay/fury/main/docs/benchmarks/compatible/bench_deserialize_compatible_MEDIA_CONTENT_from_array_tps.png&#34;&gt; &lt;img width=&#34;24%&#34; alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/alipay/fury/main/docs/benchmarks/deserialization/bench_deserialize_MEDIA_CONTENT_from_array_tps.png&#34;&gt; &lt;img width=&#34;24%&#34; alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/alipay/fury/main/docs/benchmarks/deserialization/bench_deserialize_SAMPLE_from_array_tps.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/alipay/fury/tree/main/docs/benchmarks&#34;&gt;benchmarks&lt;/a&gt; for more benchmarks about type forward/backward compatibility, off-heap support, zero-copy serialization.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Java&lt;/h3&gt; &#xA;&lt;p&gt;Nightly snapshot:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;repositories&amp;gt;&#xA;  &amp;lt;repository&amp;gt;&#xA;    &amp;lt;id&amp;gt;sonatype&amp;lt;/id&amp;gt;&#xA;    &amp;lt;url&amp;gt;https://s01.oss.sonatype.org/content/repositories/snapshots&amp;lt;/url&amp;gt;&#xA;    &amp;lt;releases&amp;gt;&#xA;      &amp;lt;enabled&amp;gt;false&amp;lt;/enabled&amp;gt;&#xA;    &amp;lt;/releases&amp;gt;&#xA;    &amp;lt;snapshots&amp;gt;&#xA;      &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;&#xA;    &amp;lt;/snapshots&amp;gt;&#xA;  &amp;lt;/repository&amp;gt;&#xA;&amp;lt;/repositories&amp;gt;&#xA;&amp;lt;dependency&amp;gt;&#xA;  &amp;lt;groupId&amp;gt;org.furyio&amp;lt;/groupId&amp;gt;&#xA;  &amp;lt;artifactId&amp;gt;fury-core&amp;lt;/artifactId&amp;gt;&#xA;  &amp;lt;version&amp;gt;0.1.0-SNAPSHOT&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&amp;lt;!-- row/arrow format support --&amp;gt;&#xA;&amp;lt;!-- &amp;lt;dependency&amp;gt;&#xA;  &amp;lt;groupId&amp;gt;org.furyio&amp;lt;/groupId&amp;gt;&#xA;  &amp;lt;artifactId&amp;gt;fury-format&amp;lt;/artifactId&amp;gt;&#xA;  &amp;lt;version&amp;gt;0.1.0-SNAPSHOT&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt; --&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Release version: coming soon.&lt;/p&gt; &#xA;&lt;h3&gt;Python&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Python whl will be released soon. &#xA;# Currently you need to install from the source.&#xA;git clone https://github.com/alipay/fury.git&#xA;cd fury/python&#xA;pip install -v -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;JavaScript&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install @furyjs/fury&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Golang&lt;/h3&gt; &#xA;&lt;p&gt;Coming soon.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Here we give a quick start about how to use fury, see &lt;a href=&#34;https://github.com/alipay/fury/raw/main/docs/README.md&#34;&gt;user guide&lt;/a&gt; for more details about &lt;a href=&#34;https://github.com/alipay/fury/raw/main/docs/guide/java_object_graph_guide.md&#34;&gt;java&lt;/a&gt;, &lt;a href=&#34;https://github.com/alipay/fury/raw/main/docs/guide/xlang_object_graph_guide.md&#34;&gt;cross language&lt;/a&gt;, and &lt;a href=&#34;https://github.com/alipay/fury/raw/main/docs/guide/row_format_guide.md&#34;&gt;row format&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Fury java object graph serialization&lt;/h3&gt; &#xA;&lt;p&gt;If you don&#39;t have cross-language requirements, using this mode will have better performance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import io.fury.Fury;&#xA;import java.util.List;&#xA;import java.util.Arrays;&#xA;&#xA;public class Example {&#xA;  public static void main(String[] args) {&#xA;    SomeClass object = new SomeClass();&#xA;    // Note that Fury instances should be reused between &#xA;    // multiple serializations of different objects.&#xA;    {&#xA;      Fury fury = Fury.builder().withLanguage(Language.JAVA)&#xA;        .withRefTracking(true)&#xA;        // Allow to deserialize objects unknown types,&#xA;        // more flexible but less secure.&#xA;        // .withSecureMode(false)&#xA;        .build();&#xA;      // Registering types can reduce class name serialization overhead, but not mandatory.&#xA;      // If secure mode enabled, all custom types must be registered.&#xA;      fury.register(SomeClass.class);&#xA;      byte[] bytes = fury.serialize(object);&#xA;      System.out.println(fury.deserialize(bytes));&#xA;    }&#xA;    {&#xA;      ThreadSafeFury fury = Fury.builder().withLanguage(Language.JAVA)&#xA;        // Allow to deserialize objects unknown types,&#xA;        // more flexible but less secure.&#xA;        // .withSecureMode(false)&#xA;        .withRefTracking(true)&#xA;        .buildThreadSafeFury();&#xA;      byte[] bytes = fury.serialize(object);&#xA;      System.out.println(fury.deserialize(bytes));&#xA;    }&#xA;    {&#xA;      ThreadSafeFury fury = new ThreadSafeFury(() -&amp;gt; {&#xA;        Fury f = Fury.builder().withLanguage(Language.JAVA)&#xA;          .withRefTracking(true).build();&#xA;        f.register(SomeClass.class);&#xA;        return f;&#xA;      });&#xA;      byte[] bytes = fury.serialize(object);&#xA;      System.out.println(fury.deserialize(bytes));&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cross-language object graph serialization&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Java&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.google.common.collect.ImmutableMap;&#xA;import io.fury.*;&#xA;&#xA;import java.util.Map;&#xA;&#xA;public class ReferenceExample {&#xA;  public static class SomeClass {&#xA;    SomeClass f1;&#xA;    Map&amp;lt;String, String&amp;gt; f2;&#xA;    Map&amp;lt;String, String&amp;gt; f3;&#xA;  }&#xA;&#xA;  public static Object createObject() {&#xA;    SomeClass obj = new SomeClass();&#xA;    obj.f1 = obj;&#xA;    obj.f2 = ImmutableMap.of(&#34;k1&#34;, &#34;v1&#34;, &#34;k2&#34;, &#34;v2&#34;);&#xA;    obj.f3 = obj.f2;&#xA;    return obj;&#xA;  }&#xA;&#xA;  // mvn exec:java -Dexec.mainClass=&#34;io.fury.examples.ReferenceExample&#34;&#xA;  public static void main(String[] args) {&#xA;    Fury fury = Fury.builder().withLanguage(Language.XLANG)&#xA;      .withRefTracking(true).build();&#xA;    fury.register(SomeClass.class, &#34;example.SomeClass&#34;);&#xA;    byte[] bytes = fury.serialize(createObject());&#xA;    // bytes can be data serialized by other languages.&#xA;    System.out.println(fury.deserialize(bytes));&#xA;    ;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from typing import Dict&#xA;import pyfury&#xA;&#xA;class SomeClass:&#xA;    f1: &#34;SomeClass&#34;&#xA;    f2: Dict[str, str]&#xA;    f3: Dict[str, str]&#xA;&#xA;fury = pyfury.Fury(ref_tracking=True)&#xA;fury.register_class(SomeClass, &#34;example.SomeClass&#34;)&#xA;obj = SomeClass()&#xA;obj.f2 = {&#34;k1&#34;: &#34;v1&#34;, &#34;k2&#34;: &#34;v2&#34;}&#xA;obj.f1, obj.f3 = obj, obj.f2&#xA;data = fury.serialize(obj)&#xA;# bytes can be data serialized by other languages.&#xA;print(fury.deserialize(data))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Golang&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import furygo &#34;github.com/alipay/fury/fury/go/fury&#34;&#xA;import &#34;fmt&#34;&#xA;&#xA;func main() {&#xA;&#x9;type SomeClass struct {&#xA;&#x9;&#x9;F1 *SomeClass&#xA;&#x9;&#x9;F2 map[string]string&#xA;&#x9;&#x9;F3 map[string]string&#xA;&#x9;}&#xA;&#x9;fury := furygo.NewFury(true)&#xA;&#x9;if err := fury.RegisterTagType(&#34;example.SomeClass&#34;, SomeClass{}); err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#x9;value := &amp;amp;SomeClass{F2: map[string]string{&#34;k1&#34;: &#34;v1&#34;, &#34;k2&#34;: &#34;v2&#34;}}&#xA;&#x9;value.F3 = value.F2&#xA;&#x9;value.F1 = value&#xA;&#x9;bytes, err := fury.Marshal(value)&#xA;&#x9;if err != nil {&#xA;&#x9;}&#xA;&#x9;var newValue interface{}&#xA;&#x9;// bytes can be data serialized by other languages.&#xA;&#x9;if err := fury.Unmarshal(bytes, &amp;amp;newValue); err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#x9;fmt.Println(newValue)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Row format&lt;/h3&gt; &#xA;&lt;h4&gt;Java&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Bar {&#xA;  String f1;&#xA;  List&amp;lt;Long&amp;gt; f2;&#xA;}&#xA;&#xA;public class Foo {&#xA;  int f1;&#xA;  List&amp;lt;Integer&amp;gt; f2;&#xA;  Map&amp;lt;String, Integer&amp;gt; f3;&#xA;  List&amp;lt;Bar&amp;gt; f4;&#xA;}&#xA;&#xA;Encoder&amp;lt;Foo&amp;gt; encoder = Encoders.bean(Foo.class);&#xA;Foo foo = new Foo();&#xA;foo.f1 = 10;&#xA;foo.f2 = IntStream.range(0, 1000000).boxed().collect(Collectors.toList());&#xA;foo.f3 = IntStream.range(0, 1000000).boxed().collect(Collectors.toMap(i -&amp;gt; &#34;k&#34;+i, i-&amp;gt;i));&#xA;List&amp;lt;Bar&amp;gt; bars = new ArrayList&amp;lt;&amp;gt;(1000000);&#xA;for (int i = 0; i &amp;lt; 1000000; i++) {&#xA;  Bar bar = new Bar();&#xA;  bar.f1 = &#34;s&#34;+i;&#xA;  bar.f2 = LongStream.range(0, 10).boxed().collect(Collectors.toList());&#xA;  bars.add(bar);&#xA;}&#xA;foo.f4 = bars;&#xA;// Can be zero-copy read by python&#xA;BinaryRow binaryRow = encoder.toRow(foo);&#xA;// can be data from python&#xA;Foo newFoo = encoder.fromRow(binaryRow);&#xA;// zero-copy read List&amp;lt;Integer&amp;gt; f2&#xA;BinaryArray binaryArray2 = binaryRow.getArray(1);&#xA;// zero-copy read List&amp;lt;Bar&amp;gt; f4&#xA;BinaryArray binaryArray4 = binaryRow.getArray(4);&#xA;// zero-copy read 11th element of `readList&amp;lt;Bar&amp;gt; f4`&#xA;BinaryRow barStruct = binaryArray4.getStruct(10);&#xA;&#xA;// zero-copy read 6th of f2 of 11th element of `readList&amp;lt;Bar&amp;gt; f4`&#xA;barStruct.getArray(1).getLong(5);&#xA;Encoder&amp;lt;Bar&amp;gt; barEncoder = Encoders.bean(Bar.class);&#xA;// deserialize part of data.&#xA;Bar newBar = barEncoder.fromRow(barStruct);&#xA;Bar newBar2 = barEncoder.fromRow(binaryArray4.getStruct(20));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Python&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@dataclass&#xA;class Bar:&#xA;    f1: str&#xA;    f2: List[pa.int64]&#xA;@dataclass&#xA;class Foo:&#xA;    f1: pa.int32&#xA;    f2: List[pa.int32]&#xA;    f3: Dict[str, pa.int32]&#xA;    f4: List[Bar]&#xA;&#xA;encoder = pyfury.encoder(Foo)&#xA;foo = Foo(f1=10, f2=list(range(1000_000)),&#xA;         f3={f&#34;k{i}&#34;: i for i in range(1000_000)},&#xA;         f4=[Bar(f1=f&#34;s{i}&#34;, f2=list(range(10))) for i in range(1000_000)])&#xA;binary: bytes = encoder.to_row(foo).to_bytes()&#xA;foo_row = pyfury.RowData(encoder.schema, binary)&#xA;print(foo_row.f2[100000], foo_row.f4[100000].f1, foo_row.f4[200000].f2[5])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;h3&gt;Schema Compatibility&lt;/h3&gt; &#xA;&lt;p&gt;Fury java object graph serialization support class schema forward/backward compatibility. The serialization peer and deserialization peer can add/delete fields independently.&lt;/p&gt; &#xA;&lt;p&gt;We plan to add support cross-language serialization after &lt;a href=&#34;https://github.com/alipay/fury/issues/203&#34;&gt;meta compression&lt;/a&gt; are finished.&lt;/p&gt; &#xA;&lt;h3&gt;Binary Compatibility&lt;/h3&gt; &#xA;&lt;p&gt;We are still improving our protocols, binary compatibility are not ensured between fury releases for now. Please &lt;code&gt;shade&lt;/code&gt; fury if you will upgrade fury in the future.&lt;/p&gt; &#xA;&lt;p&gt;Binary compatibility will be ensured before fury 1.0.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;Static serialization are secure. But dynamic serialization such as fury java/python native serialization supports deserialize unregistered types, which provides more dynamics and flexibility, but also introduce security risks.&lt;/p&gt; &#xA;&lt;p&gt;For example, the deserialization may invoke &lt;code&gt;init&lt;/code&gt; constructor or &lt;code&gt;equals&lt;/code&gt;/&lt;code&gt;hashCode&lt;/code&gt; method, if the method body contains malicious code, the system will be at risks.&lt;/p&gt; &#xA;&lt;p&gt;Fury provides a secure mode option and enabled by default for such protocols, which allows only deserializing trusted registered types or built-in types. &lt;strong&gt;Do not disable secure mode or class registration checks unless you can ensure your environment is indeed secure&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;RoadMap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Meta compression, auto meta sharing and cross-language schema compatibility.&lt;/li&gt; &#xA; &lt;li&gt;AOT Framework for c++/golang/rust to generate code statically.&lt;/li&gt; &#xA; &lt;li&gt;C++/Rust object graph serialization support&lt;/li&gt; &#xA; &lt;li&gt;Golang/Rust/NodeJS row format support&lt;/li&gt; &#xA; &lt;li&gt;ProtoBuffer compatibility support&lt;/li&gt; &#xA; &lt;li&gt;Protocols for features and knowledge graph serialization&lt;/li&gt; &#xA; &lt;li&gt;Continuously improve our serialization infrastructure for any new protocols&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Please read our &lt;a href=&#34;https://github.com/alipay/fury/raw/main/docs/development.md&#34;&gt;project development guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting involved&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Purpose&lt;/th&gt; &#xA;   &lt;th&gt;Estimated Response Time&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/alipay/fury/issues&#34;&gt;GitHub Issues&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;For reporting bugs and filing feature requests.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt; 1 days&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://join.slack.com/t/fury-project/shared_invite/zt-1u8soj4qc-ieYEu7ciHOqA2mo47llS8A&#34;&gt;Slack&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;For collaborating with other Fury users and latest announcements about Fury.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt; 2 days&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://stackoverflow.com/questions/tagged/fury&#34;&gt;StackOverflow&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;For asking questions about how to use Fury.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt; 2 days&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.zhihu.com/column/c_1638859452651765760&#34;&gt;Zhihu&lt;/a&gt; &lt;a href=&#34;https://twitter.com/fury_community&#34;&gt;Twitter&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/@FurySerialization&#34;&gt;Youtube&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Follow us for latest announcements about Fury.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt; 2 days&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WeChat Official Account(微信公众号) / Dingding Group(钉钉群)&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div style=&#34;text-align:center;&#34;&gt;&#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/alipay/fury/main/docs/images/fury_wechat_12.jpg&#34; alt=&#34;WeChat Official Account &#34; width=&#34;20%&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/alipay/fury/main/docs/images/fury_dingtalk.png&#34; alt=&#34;Dingding Group&#34; width=&#34;20%&#34;&gt; &#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt; 2 days&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>