<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-20T01:33:15Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>houbb/sensitive-word</title>
    <updated>2024-01-20T01:33:15Z</updated>
    <id>tag:github.com,2024-01-20:/houbb/sensitive-word</id>
    <link href="https://github.com/houbb/sensitive-word" rel="alternate"></link>
    <summary type="html">&lt;p&gt;👮‍♂️The sensitive word tool for java.(敏感词/违禁词/违法词/脏词。基于 DFA 算法实现的高性能 java 敏感词过滤工具框架。请勿发布涉及政治、广告、营销、翻墙、违反国家法律法规等内容。高性能敏感词检测过滤组件，附带繁体简体互换，支持全角半角互换，汉字转拼音，模糊搜索等功能。)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;sensitive-word&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/houbb/sensitive-word&#34;&gt;sensitive-word&lt;/a&gt; 基于 DFA 算法实现的高性能敏感词工具。&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://mvnrepository.com/artifact/com.github.houbb/sensitive-word&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/com.github.houbb/sensitive-word/badge.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/houbb/sensitive-word&#34;&gt;&lt;img src=&#34;https://badges.frapsoft.com/os/v2/open-source.svg?v=103&#34; alt=&#34;Open Source Love&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/houbb/sensitive-word/raw/master/LICENSE.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache2-FF0080.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://houbb.github.io/opensource/sensitive-word&#34;&gt;在线体验&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;创作目的&lt;/h2&gt; &#xA;&lt;p&gt;实现一款好用敏感词工具。&lt;/p&gt; &#xA;&lt;p&gt;基于 DFA 算法实现，目前敏感词库内容收录 6W+（源文件 18W+，经过一次删减）。&lt;/p&gt; &#xA;&lt;p&gt;后期将进行持续优化和补充敏感词库，并进一步提升算法的性能。&lt;/p&gt; &#xA;&lt;p&gt;希望可以细化敏感词的分类，感觉工作量比较大，暂时没有进行。&lt;/p&gt; &#xA;&lt;h2&gt;特性&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;6W+ 词库，且不断优化更新&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;基于 fluent-api 实现，使用优雅简洁&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/houbb/sensitive-word#benchmark&#34;&gt;基于 DFA 算法，性能为 7W+ QPS，应用无感&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/houbb/sensitive-word#%E6%A0%B8%E5%BF%83%E6%96%B9%E6%B3%95&#34;&gt;支持敏感词的判断、返回、脱敏等常见操作&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/houbb/sensitive-word#%E6%9B%B4%E5%A4%9A%E7%89%B9%E6%80%A7&#34;&gt;支持常见的格式转换&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;全角半角互换、英文大小写互换、数字常见形式的互换、中文繁简体互换、英文常见形式的互换、忽略重复词等&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/houbb/sensitive-word#%E6%9B%B4%E5%A4%9A%E6%A3%80%E6%B5%8B%E7%AD%96%E7%95%A5&#34;&gt;支持敏感词检测、邮箱检测、数字检测、网址检测等&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/houbb/sensitive-word#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9B%BF%E6%8D%A2%E7%AD%96%E7%95%A5&#34;&gt;支持自定义替换策略&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/houbb/sensitive-word#%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8&#34;&gt;支持用户自定义敏感词和白名单&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/houbb/sensitive-word#%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E7%94%A8%E6%88%B7%E8%87%AA%E5%AE%9A%E4%B9%89&#34;&gt;支持数据的数据动态更新（用户自定义），实时生效&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/houbb/sensitive-word#%E6%95%8F%E6%84%9F%E8%AF%8D%E6%A0%87%E7%AD%BE&#34;&gt;支持敏感词的标签接口&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/houbb/sensitive-word#%E5%BF%BD%E7%95%A5%E5%AD%97%E7%AC%A6&#34;&gt;支持跳过一些特殊字符，让匹配更灵活&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;变更日志&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/houbb/sensitive-word/raw/master/CHANGE_LOG.md&#34;&gt;CHANGE_LOG.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;更多资料&lt;/h2&gt; &#xA;&lt;h3&gt;敏感词控台&lt;/h3&gt; &#xA;&lt;p&gt;有时候敏感词有一个控台，配置起来会更加灵活方便。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/rQo75cfMU_OEbTJa0JGMGg&#34;&gt;java 如何实现开箱即用的敏感词控台服务？&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;敏感词标签文件&lt;/h3&gt; &#xA;&lt;p&gt;梳理了大量的敏感词标签文件，可以让我们的敏感词更加方便。&lt;/p&gt; &#xA;&lt;p&gt;这两个资料阅读可在下方文章获取：&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/m40ZnR6YF6WgPrArUSZ_0g&#34;&gt;v0.11.0-敏感词新特性及对应标签文件&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;快速开始&lt;/h1&gt; &#xA;&lt;h2&gt;准备&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;JDK1.7+&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Maven 3.x+&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Maven 引入&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;com.github.houbb&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;sensitive-word&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;0.12.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;核心方法&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;SensitiveWordHelper&lt;/code&gt; 作为敏感词的工具类，核心方法如下：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;方法&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;参数&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;返回值&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;contains(String)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;待验证的字符串&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;布尔值&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;验证字符串是否包含敏感词&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;replace(String, ISensitiveWordReplace)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;使用指定的替换策略替换敏感词&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;字符串&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;返回脱敏后的字符串&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;replace(String, char)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;使用指定的 char 替换敏感词&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;字符串&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;返回脱敏后的字符串&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;replace(String)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;使用 &lt;code&gt;*&lt;/code&gt; 替换敏感词&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;字符串&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;返回脱敏后的字符串&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;findAll(String)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;待验证的字符串&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;字符串列表&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;返回字符串中所有敏感词&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;findFirst(String)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;待验证的字符串&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;字符串&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;返回字符串中第一个敏感词&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;findAll(String, IWordResultHandler)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;IWordResultHandler 结果处理类&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;字符串列表&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;返回字符串中所有敏感词&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;findFirst(String, IWordResultHandler)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;IWordResultHandler 结果处理类&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;字符串&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;返回字符串中第一个敏感词&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;tags(String)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;获取敏感词的标签&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;敏感词字符串&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;返回敏感词的标签列表&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;判断是否包含敏感词&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;final String text = &#34;五星红旗迎风飘扬，毛主席的画像屹立在天安门前。&#34;;&#xA;&#xA;Assert.assertTrue(SensitiveWordHelper.contains(text));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;返回第一个敏感词&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;final String text = &#34;五星红旗迎风飘扬，毛主席的画像屹立在天安门前。&#34;;&#xA;&#xA;String word = SensitiveWordHelper.findFirst(text);&#xA;Assert.assertEquals(&#34;五星红旗&#34;, word);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;SensitiveWordHelper.findFirst(text) 等价于：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String word = SensitiveWordHelper.findFirst(text, WordResultHandlers.word());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;WordResultHandlers.raw() 可以保留对应的下标信息：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;final String text = &#34;五星红旗迎风飘扬，毛主席的画像屹立在天安门前。&#34;;&#xA;&#xA;IWordResult word = SensitiveWordHelper.findFirst(text, WordResultHandlers.raw());&#xA;Assert.assertEquals(&#34;WordResult{startIndex=0, endIndex=4}&#34;, word.toString());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;返回所有敏感词&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;final String text = &#34;五星红旗迎风飘扬，毛主席的画像屹立在天安门前。&#34;;&#xA;&#xA;List&amp;lt;String&amp;gt; wordList = SensitiveWordHelper.findAll(text);&#xA;Assert.assertEquals(&#34;[五星红旗, 毛主席, 天安门]&#34;, wordList.toString());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;返回所有敏感词用法上类似于 SensitiveWordHelper.findFirst()，同样也支持指定结果处理类。&lt;/p&gt; &#xA;&lt;p&gt;SensitiveWordHelper.findAll(text) 等价于：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;List&amp;lt;String&amp;gt; wordList = SensitiveWordHelper.findAll(text, WordResultHandlers.word());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;WordResultHandlers.raw() 可以保留对应的下标信息：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;final String text = &#34;五星红旗迎风飘扬，毛主席的画像屹立在天安门前。&#34;;&#xA;&#xA;List&amp;lt;IWordResult&amp;gt; wordList = SensitiveWordHelper.findAll(text, WordResultHandlers.raw());&#xA;Assert.assertEquals(&#34;[WordResult{startIndex=0, endIndex=4}, WordResult{startIndex=9, endIndex=12}, WordResult{startIndex=18, endIndex=21}]&#34;, wordList.toString());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;默认的替换策略&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;final String text = &#34;五星红旗迎风飘扬，毛主席的画像屹立在天安门前。&#34;;&#xA;String result = SensitiveWordHelper.replace(text);&#xA;Assert.assertEquals(&#34;****迎风飘扬，***的画像屹立在***前。&#34;, result);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;指定替换的内容&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;final String text = &#34;五星红旗迎风飘扬，毛主席的画像屹立在天安门前。&#34;;&#xA;String result = SensitiveWordHelper.replace(text, &#39;0&#39;);&#xA;Assert.assertEquals(&#34;0000迎风飘扬，000的画像屹立在000前。&#34;, result);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;自定义替换策略&lt;/h3&gt; &#xA;&lt;p&gt;V0.2.0 支持该特性。&lt;/p&gt; &#xA;&lt;p&gt;场景说明：有时候我们希望不同的敏感词有不同的替换结果。比如【游戏】替换为【电子竞技】，【失业】替换为【灵活就业】。&lt;/p&gt; &#xA;&lt;p&gt;诚然，提前使用字符串的正则替换也可以，不过性能一般。&lt;/p&gt; &#xA;&lt;p&gt;使用例子：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;/**&#xA; * 自定替换策略&#xA; * @since 0.2.0&#xA; */&#xA;@Test&#xA;public void defineReplaceTest() {&#xA;    final String text = &#34;五星红旗迎风飘扬，毛主席的画像屹立在天安门前。&#34;;&#xA;&#xA;    ISensitiveWordReplace replace = new MySensitiveWordReplace();&#xA;    String result = SensitiveWordHelper.replace(text, replace);&#xA;&#xA;    Assert.assertEquals(&#34;国家旗帜迎风飘扬，教员的画像屹立在***前。&#34;, result);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;其中 &lt;code&gt;MySensitiveWordReplace&lt;/code&gt; 是我们自定义的替换策略，实现如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class MyWordReplace implements IWordReplace {&#xA;&#xA;    @Override&#xA;    public void replace(StringBuilder stringBuilder, final char[] rawChars, IWordResult wordResult, IWordContext wordContext) {&#xA;        String sensitiveWord = InnerWordCharUtils.getString(rawChars, wordResult);&#xA;        // 自定义不同的敏感词替换策略，可以从数据库等地方读取&#xA;        if(&#34;五星红旗&#34;.equals(sensitiveWord)) {&#xA;            stringBuilder.append(&#34;国家旗帜&#34;);&#xA;        } else if(&#34;毛主席&#34;.equals(sensitiveWord)) {&#xA;            stringBuilder.append(&#34;教员&#34;);&#xA;        } else {&#xA;            // 其他默认使用 * 代替&#xA;            int wordLength = wordResult.endIndex() - wordResult.startIndex();&#xA;            for(int i = 0; i &amp;lt; wordLength; i++) {&#xA;                stringBuilder.append(&#39;*&#39;);&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;我们针对其中的部分词做固定映射处理，其他的默认转换为 &lt;code&gt;*&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;h2&gt;IWordResultHandler 结果处理类&lt;/h2&gt; &#xA;&lt;p&gt;IWordResultHandler 可以对敏感词的结果进行处理，允许用户自定义。&lt;/p&gt; &#xA;&lt;p&gt;内置实现见 &lt;code&gt;WordResultHandlers&lt;/code&gt; 工具类：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;WordResultHandlers.word()&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;只保留敏感词单词本身。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;WordResultHandlers.raw()&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;保留敏感词相关信息，包含敏感词的开始和结束下标。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;WordResultHandlers.wordTags()&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;同时保留单词，和对应的词标签信息。&lt;/p&gt; &#xA;&lt;h3&gt;使用实例&lt;/h3&gt; &#xA;&lt;p&gt;所有测试案例参见 &lt;a href=&#34;https://github.com/houbb/sensitive-word/raw/master/src/test/java/com/github/houbb/sensitive/word/core/SensitiveWordHelperTest.java&#34;&gt;SensitiveWordHelperTest&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;1）基本例子&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;final String text = &#34;五星红旗迎风飘扬，毛主席的画像屹立在天安门前。&#34;;&#xA;&#xA;List&amp;lt;String&amp;gt; wordList = SensitiveWordHelper.findAll(text);&#xA;Assert.assertEquals(&#34;[五星红旗, 毛主席, 天安门]&#34;, wordList.toString());&#xA;List&amp;lt;String&amp;gt; wordList2 = SensitiveWordHelper.findAll(text, WordResultHandlers.word());&#xA;Assert.assertEquals(&#34;[五星红旗, 毛主席, 天安门]&#34;, wordList2.toString());&#xA;&#xA;List&amp;lt;IWordResult&amp;gt; wordList3 = SensitiveWordHelper.findAll(text, WordResultHandlers.raw());&#xA;Assert.assertEquals(&#34;[WordResult{startIndex=0, endIndex=4}, WordResult{startIndex=9, endIndex=12}, WordResult{startIndex=18, endIndex=21}]&#34;, wordList3.toString());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;wordTags 例子&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;我们在 &lt;code&gt;dict_tag_test.txt&lt;/code&gt; 文件中指定对应词的标签信息。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;final String text = &#34;五星红旗迎风飘扬，毛主席的画像屹立在天安门前。&#34;;&#xA;&#xA;// 默认敏感词标签为空&#xA;List&amp;lt;WordTagsDto&amp;gt; wordList1 = SensitiveWordHelper.findAll(text, WordResultHandlers.wordTags());&#xA;Assert.assertEquals(&#34;[WordTagsDto{word=&#39;五星红旗&#39;, tags=[]}, WordTagsDto{word=&#39;毛主席&#39;, tags=[]}, WordTagsDto{word=&#39;天安门&#39;, tags=[]}]&#34;, wordList1.toString());&#xA;&#xA;List&amp;lt;WordTagsDto&amp;gt; wordList2 = SensitiveWordBs.newInstance()&#xA;        .wordTag(WordTags.file(&#34;dict_tag_test.txt&#34;))&#xA;        .init()&#xA;        .findAll(text, WordResultHandlers.wordTags());&#xA;Assert.assertEquals(&#34;[WordTagsDto{word=&#39;五星红旗&#39;, tags=[政治, 国家]}, WordTagsDto{word=&#39;毛主席&#39;, tags=[政治, 伟人, 国家]}, WordTagsDto{word=&#39;天安门&#39;, tags=[政治, 国家, 地址]}]&#34;, wordList2.toString());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;更多特性&lt;/h1&gt; &#xA;&lt;p&gt;后续的诸多特性，主要是针对各种针对各种情况的处理，尽可能的提升敏感词命中率。&lt;/p&gt; &#xA;&lt;p&gt;这是一场漫长的攻防之战。&lt;/p&gt; &#xA;&lt;h2&gt;样式处理&lt;/h2&gt; &#xA;&lt;h3&gt;忽略大小写&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;final String text = &#34;fuCK the bad words.&#34;;&#xA;&#xA;String word = SensitiveWordHelper.findFirst(text);&#xA;Assert.assertEquals(&#34;fuCK&#34;, word);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;忽略半角圆角&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;final String text = &#34;ｆｕｃｋ the bad words.&#34;;&#xA;&#xA;String word = SensitiveWordHelper.findFirst(text);&#xA;Assert.assertEquals(&#34;ｆｕｃｋ&#34;, word);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;忽略数字的写法&lt;/h3&gt; &#xA;&lt;p&gt;这里实现了数字常见形式的转换。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;final String text = &#34;这个是我的微信：9⓿二肆⁹₈③⑸⒋➃㈤㊄&#34;;&#xA;&#xA;List&amp;lt;String&amp;gt; wordList = SensitiveWordHelper.findAll(text);&#xA;Assert.assertEquals(&#34;[9⓿二肆⁹₈③⑸⒋➃㈤㊄]&#34;, wordList.toString());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;忽略繁简体&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;final String text = &#34;我爱我的祖国和五星紅旗。&#34;;&#xA;&#xA;List&amp;lt;String&amp;gt; wordList = SensitiveWordHelper.findAll(text);&#xA;Assert.assertEquals(&#34;[五星紅旗]&#34;, wordList.toString());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;忽略英文的书写格式&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;final String text = &#34;Ⓕⓤc⒦ the bad words&#34;;&#xA;&#xA;List&amp;lt;String&amp;gt; wordList = SensitiveWordHelper.findAll(text);&#xA;Assert.assertEquals(&#34;[Ⓕⓤc⒦]&#34;, wordList.toString());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;忽略重复词&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;final String text = &#34;ⒻⒻⒻfⓤuⓤ⒰cⓒ⒦ the bad words&#34;;&#xA;&#xA;List&amp;lt;String&amp;gt; wordList = SensitiveWordBs.newInstance()&#xA;        .ignoreRepeat(true)&#xA;        .init()&#xA;        .findAll(text);&#xA;Assert.assertEquals(&#34;[ⒻⒻⒻfⓤuⓤ⒰cⓒ⒦]&#34;, wordList.toString());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;更多检测策略&lt;/h2&gt; &#xA;&lt;h3&gt;邮箱检测&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;final String text = &#34;楼主好人，邮箱 sensitiveword@xx.com&#34;;&#xA;&#xA;List&amp;lt;String&amp;gt; wordList = SensitiveWordHelper.findAll(text);&#xA;Assert.assertEquals(&#34;[sensitiveword@xx.com]&#34;, wordList.toString());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;连续数字检测&lt;/h3&gt; &#xA;&lt;p&gt;一般用于过滤手机号/QQ等广告信息。&lt;/p&gt; &#xA;&lt;p&gt;V0.2.1 之后，支持通过 &lt;code&gt;numCheckLen(长度)&lt;/code&gt; 自定义检测的长度。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;final String text = &#34;你懂得：12345678&#34;;&#xA;&#xA;// 默认检测 8 位&#xA;List&amp;lt;String&amp;gt; wordList = SensitiveWordBs.newInstance().init().findAll(text);&#xA;Assert.assertEquals(&#34;[12345678]&#34;, wordList.toString());&#xA;&#xA;// 指定数字的长度，避免误杀&#xA;List&amp;lt;String&amp;gt; wordList2 = SensitiveWordBs.newInstance()&#xA;        .numCheckLen(9)&#xA;        .init()&#xA;        .findAll(text);&#xA;Assert.assertEquals(&#34;[]&#34;, wordList2.toString());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;网址检测&lt;/h3&gt; &#xA;&lt;p&gt;用于过滤常见的网址信息。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;final String text = &#34;点击链接 www.baidu.com查看答案&#34;;&#xA;&#xA;List&amp;lt;String&amp;gt; wordList = SensitiveWordBs.newInstance().init().findAll(text);&#xA;Assert.assertEquals(&#34;[链接, www.baidu.com]&#34;, wordList.toString());&#xA;&#xA;Assert.assertEquals(&#34;点击** *************查看答案&#34;, SensitiveWordBs&#xA;                .newInstance()&#xA;                .init()&#xA;                .replace(text));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;引导类特性配置&lt;/h1&gt; &#xA;&lt;h2&gt;说明&lt;/h2&gt; &#xA;&lt;p&gt;上面的特性默认都是开启的，有时业务需要灵活定义相关的配置特性。&lt;/p&gt; &#xA;&lt;p&gt;所以 v0.0.14 开放了属性配置。&lt;/p&gt; &#xA;&lt;h2&gt;配置方法&lt;/h2&gt; &#xA;&lt;p&gt;为了让使用更加优雅，统一使用 fluent-api 的方式定义。&lt;/p&gt; &#xA;&lt;p&gt;用户可以使用 &lt;code&gt;SensitiveWordBs&lt;/code&gt; 进行如下定义：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;SensitiveWordBs wordBs = SensitiveWordBs.newInstance()&#xA;        .ignoreCase(true)&#xA;        .ignoreWidth(true)&#xA;        .ignoreNumStyle(true)&#xA;        .ignoreChineseStyle(true)&#xA;        .ignoreEnglishStyle(true)&#xA;        .ignoreRepeat(false)&#xA;        .enableNumCheck(true)&#xA;        .enableEmailCheck(true)&#xA;        .enableUrlCheck(true)&#xA;        .enableWordCheck(true)&#xA;        .numCheckLen(8)&#xA;        .wordTag(WordTags.none())&#xA;        .charIgnore(SensitiveWordCharIgnores.defaults())&#xA;        .init();&#xA;&#xA;final String text = &#34;五星红旗迎风飘扬，毛主席的画像屹立在天安门前。&#34;;&#xA;Assert.assertTrue(wordBs.contains(text));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;配置说明&lt;/h2&gt; &#xA;&lt;p&gt;其中各项配置的说明如下：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;序号&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;方法&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;说明&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;默认值&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ignoreCase&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;忽略大小写&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ignoreWidth&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;忽略半角圆角&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ignoreNumStyle&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;忽略数字的写法&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;4&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ignoreChineseStyle&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;忽略中文的书写格式&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;5&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ignoreEnglishStyle&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;忽略英文的书写格式&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;6&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ignoreRepeat&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;忽略重复词&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;7&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;enableNumCheck&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;是否启用数字检测。&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;8&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;enableEmailCheck&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;是有启用邮箱检测&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;9&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;enableUrlCheck&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;是否启用链接检测&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;10&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;enableWordCheck&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;是否启用敏感单词检测&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;11&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;numCheckLen&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;数字检测，自定义指定长度。&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;12&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;wordTag&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;词对应的标签&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;none&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;13&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;charIgnore&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;忽略的字符&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;none&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;忽略字符&lt;/h1&gt; &#xA;&lt;h2&gt;说明&lt;/h2&gt; &#xA;&lt;p&gt;我们的敏感词一般都是比较连续的，比如【傻帽】&lt;/p&gt; &#xA;&lt;p&gt;那就有大聪明发现，可以在中间加一些字符，比如【傻!@#$帽】跳过检测，但是骂人等攻击力不减。&lt;/p&gt; &#xA;&lt;p&gt;那么，如何应对这些类似的场景呢？&lt;/p&gt; &#xA;&lt;p&gt;我们可以指定特殊字符的跳过集合，忽略掉这些无意义的字符即可。&lt;/p&gt; &#xA;&lt;p&gt;v0.11.0 开始支持&lt;/p&gt; &#xA;&lt;h2&gt;例子&lt;/h2&gt; &#xA;&lt;p&gt;其中 charIgnore 对应的字符策略，用户可以自行灵活定义。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;final String text = &#34;傻@冒，狗+东西&#34;;&#xA;&#xA;//默认因为有特殊字符分割，无法识别&#xA;List&amp;lt;String&amp;gt; wordList = SensitiveWordBs.newInstance().init().findAll(text);&#xA;Assert.assertEquals(&#34;[]&#34;, wordList.toString());&#xA;&#xA;// 指定忽略的字符策略，可自行实现。&#xA;List&amp;lt;String&amp;gt; wordList2 = SensitiveWordBs.newInstance()&#xA;        .charIgnore(SensitiveWordCharIgnores.specialChars())&#xA;        .init()&#xA;        .findAll(text);&#xA;&#xA;Assert.assertEquals(&#34;[傻@冒, 狗+东西]&#34;, wordList2.toString());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;敏感词标签&lt;/h1&gt; &#xA;&lt;h2&gt;说明&lt;/h2&gt; &#xA;&lt;p&gt;有时候我们希望对敏感词加一个分类标签：比如社情、暴/力等等。&lt;/p&gt; &#xA;&lt;p&gt;这样后续可以按照标签等进行更多特性操作，比如只处理某一类的标签。&lt;/p&gt; &#xA;&lt;p&gt;支持版本：v0.10.0&lt;/p&gt; &#xA;&lt;h2&gt;入门例子&lt;/h2&gt; &#xA;&lt;h3&gt;接口&lt;/h3&gt; &#xA;&lt;p&gt;这里只是一个抽象的接口，用户可以自行定义实现。比如从数据库查询等。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface IWordTag {&#xA;&#xA;    /**&#xA;     * 查询标签列表&#xA;     * @param word 脏词&#xA;     * @return 结果&#xA;     */&#xA;    Set&amp;lt;String&amp;gt; getTag(String word);&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;配置文件&lt;/h3&gt; &#xA;&lt;p&gt;我们可以自定义 dict 标签文件，通过 WordTags.file() 创建一个 WordTag 实现。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;dict_tag_test.txt&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;五星红旗 政治,国家&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;格式如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;敏感词 tag1,tag2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;实现&lt;/h3&gt; &#xA;&lt;p&gt;具体的效果如下，在引导类设置一下即可。&lt;/p&gt; &#xA;&lt;p&gt;默认的 wordTag 是空的。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String filePath = &#34;dict_tag_test.txt&#34;;&#xA;IWordTag wordTag = WordTags.file(filePath);&#xA;&#xA;SensitiveWordBs sensitiveWordBs = SensitiveWordBs.newInstance()&#xA;        .wordTag(wordTag)&#xA;        .init();&#xA;&#xA;Assert.assertEquals(&#34;[政治, 国家]&#34;, sensitiveWordBs.tags(&#34;五星红旗&#34;).toString());;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;后续会考虑引入一个内置的标签文件策略。&lt;/p&gt; &#xA;&lt;h1&gt;动态加载（用户自定义）&lt;/h1&gt; &#xA;&lt;h2&gt;情景说明&lt;/h2&gt; &#xA;&lt;p&gt;有时候我们希望将敏感词的加载设计成动态的，比如控台修改，然后可以实时生效。&lt;/p&gt; &#xA;&lt;p&gt;v0.0.13 支持了这种特性。&lt;/p&gt; &#xA;&lt;h2&gt;接口说明&lt;/h2&gt; &#xA;&lt;p&gt;为了实现这个特性，并且兼容以前的功能，我们定义了两个接口。&lt;/p&gt; &#xA;&lt;h3&gt;IWordDeny&lt;/h3&gt; &#xA;&lt;p&gt;接口如下，可以自定义自己的实现。&lt;/p&gt; &#xA;&lt;p&gt;返回的列表，表示这个词是一个敏感词。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;/**&#xA; * 拒绝出现的数据-返回的内容被当做是敏感词&#xA; * @author binbin.hou&#xA; * @since 0.0.13&#xA; */&#xA;public interface IWordDeny {&#xA;&#xA;    /**&#xA;     * 获取结果&#xA;     * @return 结果&#xA;     * @since 0.0.13&#xA;     */&#xA;    List&amp;lt;String&amp;gt; deny();&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;比如：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class MyWordDeny implements IWordDeny {&#xA;&#xA;    @Override&#xA;    public List&amp;lt;String&amp;gt; deny() {&#xA;        return Arrays.asList(&#34;我的自定义敏感词&#34;);&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;IWordAllow&lt;/h3&gt; &#xA;&lt;p&gt;接口如下，可以自定义自己的实现。&lt;/p&gt; &#xA;&lt;p&gt;返回的列表，表示这个词不是一个敏感词。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;/**&#xA; * 允许的内容-返回的内容不被当做敏感词&#xA; * @author binbin.hou&#xA; * @since 0.0.13&#xA; */&#xA;public interface IWordAllow {&#xA;&#xA;    /**&#xA;     * 获取结果&#xA;     * @return 结果&#xA;     * @since 0.0.13&#xA;     */&#xA;    List&amp;lt;String&amp;gt; allow();&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class MyWordAllow implements IWordAllow {&#xA;&#xA;    @Override&#xA;    public List&amp;lt;String&amp;gt; allow() {&#xA;        return Arrays.asList(&#34;五星红旗&#34;);&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;配置使用&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;接口自定义之后，当然需要指定才能生效。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;为了让使用更加优雅，我们设计了引导类 &lt;code&gt;SensitiveWordBs&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;p&gt;可以通过 wordDeny() 指定敏感词，wordAllow() 指定非敏感词，通过 init() 初始化敏感词字典。&lt;/p&gt; &#xA;&lt;h3&gt;系统的默认配置&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;SensitiveWordBs wordBs = SensitiveWordBs.newInstance()&#xA;        .wordDeny(WordDenys.system())&#xA;        .wordAllow(WordAllows.system())&#xA;        .init();&#xA;&#xA;final String text = &#34;五星红旗迎风飘扬，毛主席的画像屹立在天安门前。&#34;;&#xA;Assert.assertTrue(wordBs.contains(text));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;备注：init() 对于敏感词 DFA 的构建是比较耗时的，一般建议在应用初始化的时候&lt;strong&gt;只初始化一次&lt;/strong&gt;。而不是重复初始化！&lt;/p&gt; &#xA;&lt;h3&gt;指定自己的实现&lt;/h3&gt; &#xA;&lt;p&gt;我们可以测试一下自定义的实现，如下:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String text = &#34;这是一个测试，我的自定义敏感词。&#34;;&#xA;&#xA;SensitiveWordBs wordBs = SensitiveWordBs.newInstance()&#xA;        .wordDeny(new MyWordDeny())&#xA;        .wordAllow(new MyWordAllow())&#xA;        .init();&#xA;&#xA;Assert.assertEquals(&#34;[我的自定义敏感词]&#34;, wordBs.findAll(text).toString());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;这里只有 &lt;code&gt;我的自定义敏感词&lt;/code&gt; 是敏感词，而 &lt;code&gt;测试&lt;/code&gt; 不是敏感词。&lt;/p&gt; &#xA;&lt;p&gt;当然，这里是全部使用我们自定义的实现，一般建议使用系统的默认配置+自定义配置。&lt;/p&gt; &#xA;&lt;p&gt;可以使用下面的方式。&lt;/p&gt; &#xA;&lt;h3&gt;同时配置多个&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;多个敏感词&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;WordDenys.chains()&lt;/code&gt; 方法，将多个实现合并为同一个 IWordDeny。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;多个白名单&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;WordAllows.chains()&lt;/code&gt; 方法，将多个实现合并为同一个 IWordAllow。&lt;/p&gt; &#xA;&lt;p&gt;例子：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String text = &#34;这是一个测试。我的自定义敏感词。&#34;;&#xA;&#xA;IWordDeny wordDeny = WordDenys.chains(WordDenys.system(), new MyWordDeny());&#xA;IWordAllow wordAllow = WordAllows.chains(WordAllows.system(), new MyWordAllow());&#xA;&#xA;SensitiveWordBs wordBs = SensitiveWordBs.newInstance()&#xA;        .wordDeny(wordDeny)&#xA;        .wordAllow(wordAllow)&#xA;        .init();&#xA;&#xA;Assert.assertEquals(&#34;[我的自定义敏感词]&#34;, wordBs.findAll(text).toString());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;这里都是同时使用了系统默认配置，和自定义的配置。&lt;/p&gt; &#xA;&lt;p&gt;注意：&lt;strong&gt;我们初始化了新的 wordBs，那么用新的 wordBs 去判断。而不是用以前的 &lt;code&gt;SensitiveWordHelper&lt;/code&gt; 工具方法，工具方法配置是默认的！&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;spring 整合&lt;/h1&gt; &#xA;&lt;h2&gt;背景&lt;/h2&gt; &#xA;&lt;p&gt;实际使用中，比如可以在页面配置修改，然后实时生效。&lt;/p&gt; &#xA;&lt;p&gt;数据存储在数据库中，下面是一个伪代码的例子，可以参考 &lt;a href=&#34;https://github.com/houbb/sensitive-word/raw/master/src/test/java/com/github/houbb/sensitive/word/spring/SpringSensitiveWordConfig.java&#34;&gt;SpringSensitiveWordConfig.java&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;要求，版本 v0.0.15 及其以上。&lt;/p&gt; &#xA;&lt;h2&gt;自定义数据源&lt;/h2&gt; &#xA;&lt;p&gt;简化伪代码如下，数据的源头为数据库。&lt;/p&gt; &#xA;&lt;p&gt;MyDdWordAllow 和 MyDdWordDeny 是基于数据库为源头的自定义实现类。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Configuration&#xA;public class SpringSensitiveWordConfig {&#xA;&#xA;    @Autowired&#xA;    private MyDdWordAllow myDdWordAllow;&#xA;&#xA;    @Autowired&#xA;    private MyDdWordDeny myDdWordDeny;&#xA;&#xA;    /**&#xA;     * 初始化引导类&#xA;     * @return 初始化引导类&#xA;     * @since 1.0.0&#xA;     */&#xA;    @Bean&#xA;    public SensitiveWordBs sensitiveWordBs() {&#xA;        SensitiveWordBs sensitiveWordBs = SensitiveWordBs.newInstance()&#xA;                .wordAllow(WordAllows.chains(WordAllows.system(), myDdWordAllow))&#xA;                .wordDeny(myDdWordDeny)&#xA;                // 各种其他配置&#xA;                .init();&#xA;&#xA;        return sensitiveWordBs;&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;敏感词库的初始化较为耗时，建议程序启动时做一次 init 初始化。&lt;/p&gt; &#xA;&lt;h2&gt;动态变更&lt;/h2&gt; &#xA;&lt;p&gt;为了保证敏感词修改可以实时生效且保证接口的尽可能简化，此处没有新增 add/remove 的方法。&lt;/p&gt; &#xA;&lt;p&gt;而是在调用 &lt;code&gt;sensitiveWordBs.init()&lt;/code&gt; 的时候，根据 IWordDeny+IWordAllow 重新构建敏感词库。&lt;/p&gt; &#xA;&lt;p&gt;因为初始化可能耗时较长（秒级别），所有优化为 init 未完成时&lt;strong&gt;不影响旧的词库功能，完成后以新的为准&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Component&#xA;public class SensitiveWordService {&#xA;&#xA;    @Autowired&#xA;    private SensitiveWordBs sensitiveWordBs;&#xA;&#xA;    /**&#xA;     * 更新词库&#xA;     *&#xA;     * 每次数据库的信息发生变化之后，首先调用更新数据库敏感词库的方法。&#xA;     * 如果需要生效，则调用这个方法。&#xA;     *&#xA;     * 说明：重新初始化不影响旧的方法使用。初始化完成后，会以新的为准。&#xA;     */&#xA;    public void refresh() {&#xA;        // 每次数据库的信息发生变化之后，首先调用更新数据库敏感词库的方法，然后调用这个方法。&#xA;        sensitiveWordBs.init();&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如上，你可以在数据库词库发生变更时，需要词库生效，主动触发一次初始化 &lt;code&gt;sensitiveWordBs.init();&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;p&gt;其他使用保持不变，无需重启应用。&lt;/p&gt; &#xA;&lt;h1&gt;Benchmark&lt;/h1&gt; &#xA;&lt;p&gt;V0.6.0 以后，添加对应的 benchmark 测试。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/houbb/sensitive-word/raw/master/src/test/java/com/github/houbb/sensitive/word/benchmark/BenchmarkTimesTest.java&#34;&gt;BenchmarkTimesTest&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;环境&lt;/h2&gt; &#xA;&lt;p&gt;测试环境为普通的笔记本:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;处理器&#x9;12th Gen Intel(R) Core(TM) i7-1260P   2.10 GHz&#xA;机带 RAM&#x9;16.0 GB (15.7 GB 可用)&#xA;系统类型&#x9;64 位操作系统, 基于 x64 的处理器&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ps: 不同环境会有差异，但是比例基本稳定。&lt;/p&gt; &#xA;&lt;h2&gt;测试效果记录&lt;/h2&gt; &#xA;&lt;p&gt;测试数据：100+ 字符串，循环 10W 次。&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;序号&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;场景&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;耗时&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;备注&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;只做敏感词，无任何格式转换&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1470ms，约 7.2W QPS&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;追求极致性能，可以这样配置&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;只做敏感词，支持全部格式转换&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2744ms，约 3.7W QPS&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;满足大部分场景&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;STAR&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/houbb/sensitive-word&#34;&gt;&lt;img src=&#34;https://starchart.cc/houbb/sensitive-word.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;后期 road-map&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;移除单个汉字的敏感词，在中国，要把词组当做一次词，降低误判率。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;支持单个的敏感词变化？&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;remove、add、edit?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;敏感词标签接口支持&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;敏感词处理时标签支持&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;wordData 的内存占用对比 + 优化&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;用户指定自定义的词组，同时允许指定词组的组合获取，更加灵活&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;FormatCombine/CheckCombine/AllowDenyCombine 组合策略，允许用户自定义。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;word check 策略的优化，统一遍历+转换&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;添加 ThreadLocal 等性能优化&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;拓展阅读&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://houbb.github.io/2020/01/07/sensitive-word&#34;&gt;敏感词工具实现思路&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://houbb.github.io/2020/01/07/sensitive-word-dfa&#34;&gt;DFA 算法讲解&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://houbb.github.io/2020/01/07/sensitive-word-slim&#34;&gt;敏感词库优化流程&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/rQo75cfMU_OEbTJa0JGMGg&#34;&gt;java 如何实现开箱即用的敏感词控台服务？&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/m40ZnR6YF6WgPrArUSZ_0g&#34;&gt;v0.11.0-敏感词新特性及对应标签文件&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/63926529df364f09bcb203a8a9016854.png&#34; alt=&#34;wechat&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;NLP 开源矩阵&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/houbb/pinyin&#34;&gt;pinyin 汉字转拼音&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/houbb/pinyin2hanzi&#34;&gt;pinyin2hanzi 拼音转汉字&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/houbb/segment&#34;&gt;segment 高性能中文分词&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/houbb/opencc4j&#34;&gt;opencc4j 中文繁简体转换&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/houbb/nlp-hanzi-similar&#34;&gt;nlp-hanzi-similar 汉字相似度&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/houbb/word-checker&#34;&gt;word-checker 拼写检测&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/houbb/sensitive-word&#34;&gt;sensitive-word 敏感词&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>