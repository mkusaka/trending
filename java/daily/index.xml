<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-05T01:37:59Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ityouknow/spring-boot-examples</title>
    <updated>2022-10-05T01:37:59Z</updated>
    <id>tag:github.com,2022-10-05:/ityouknow/spring-boot-examples</id>
    <link href="https://github.com/ityouknow/spring-boot-examples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;about learning Spring Boot via examples. Spring Boot 教程、技术栈示例代码，快速简单上手教程。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Spring Boot 学习示例&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/Spring%20Boot-2.0-brightgreen.svg?sanitize=true&#34; alt=&#34;Spring Boot 2.0&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Mysql-5.6-blue.svg?sanitize=true&#34; alt=&#34;Mysql 5.6&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/JDK-1.8-brightgreen.svg?sanitize=true&#34; alt=&#34;JDK 1.8&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Maven-3.5.0-yellowgreen.svg?sanitize=true&#34; alt=&#34;Maven&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/license-MPL--2.0-blue.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Spring Boot 使用的各种示例，以最简单、最实用为标准，此开源项目中的每个示例都以最小依赖，最简单为标准，帮助初学者快速掌握 Spring Boot 各组件的使用。&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ityouknow/awesome-spring-boot&#34;&gt;Spring Boot 中文索引&lt;/a&gt; &amp;nbsp;| &amp;nbsp; &lt;a href=&#34;https://github.com/ityouknow/spring-cloud-examples&#34;&gt;Spring Cloud学习示例代码&lt;/a&gt; &amp;nbsp;| &amp;nbsp; &lt;a href=&#34;https://github.com/ityouknow/spring-boot-leaning&#34;&gt;Spring Boot 精品课程&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ityouknow/spring-boot-examples/master/README_EN.md&#34;&gt;English&lt;/a&gt; &amp;nbsp;| &amp;nbsp; &lt;a href=&#34;https://github.com/ityouknow/spring-boot-examples&#34;&gt;Github地址&lt;/a&gt; &amp;nbsp;| &amp;nbsp; &lt;a href=&#34;https://gitee.com/ityouknow/spring-boot-examples&#34;&gt;码云地址&lt;/a&gt; &amp;nbsp;| &amp;nbsp; &lt;a href=&#34;https://github.com/ityouknow/spring-boot-examples/tree/Spring-Boot-1.0&#34;&gt;Spring Boot 1.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;推荐程序员都关注的一个漫画公众号&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://www.ityouknow.com/assets/images/cartoon.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;关注后，回复：&lt;strong&gt;java&lt;/strong&gt; 获取超过 10万 人领取的 Java 知识体系/面试必看资料。&lt;/p&gt; &#xA;&lt;h2&gt;Spring Boot 2.0&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/ityouknow/spring-boot-leaning&#34;&gt;Spring Boot 2.0 最全使用教程&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/cloudfavorites/favorites-web&#34;&gt;Favorites-web&lt;/a&gt;：云收藏（Spring Boot 2.0 实战开源项目）&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ityouknow/spring-boot-examples/tree/master/spring-boot-hello&#34;&gt;spring-boot-hello&lt;/a&gt;：Spring Boot 2.0 Hello World 示例&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ityouknow/spring-boot-examples/tree/master/spring-boot-banner&#34;&gt;spring-boot-banner&lt;/a&gt;：Spring Boot 定制 Banner 示例&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ityouknow/spring-boot-examples/tree/master/spring-boot-docker&#34;&gt;spring-boot-docker&lt;/a&gt;：使用 Docker 部署 Spring Boot 示例&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ityouknow/spring-boot-examples/tree/master/dockercompose-springboot-mysql-nginx&#34;&gt;dockercompose-springboot-mysql-nginx&lt;/a&gt; ：Docker Compose + Spring Boot + Nginx + Mysql 示例&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ityouknow/spring-boot-examples/tree/master/spring-boot-commandLineRunner&#34;&gt;spring-boot-commandLineRunner&lt;/a&gt; ：Spring Boot 使用 commandLineRunner 实现项目启动时资源初始化示例&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ityouknow/spring-boot-examples/tree/master/spring-boot-web-thymeleaf&#34;&gt;spring-boot-web-thymeleaf&lt;/a&gt; ：Spring Boot 使用 thymeleaf 实现布局、验参、增删改查示例&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ityouknow/spring-boot-examples/tree/master/spring-boot-memcache-spymemcached&#34;&gt;spring-boot-memcache-spymemcached&lt;/a&gt; ：Spring Boot 使用 spymemcached 集成 memcache 示例&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ityouknow/spring-boot-examples/tree/master/spring-boot-webflux&#34;&gt;spring-boot-webflux&lt;/a&gt; ：Spring Boot webflux 示例&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ityouknow/spring-boot-examples/tree/master/spring-boot-elasticsearch&#34;&gt;spring-boot-elasticsearch&lt;/a&gt; ：Spring Boot elasticsearch 示例&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ityouknow/spring-boot-examples/tree/master/spring-boot-swagger&#34;&gt;spring-boot-swagger&lt;/a&gt; ：Spring Boot swagger2 示例&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ityouknow/spring-boot-examples/tree/master/spring-boot-mybatis-plus&#34;&gt;spring-boot-mybatis-plus&lt;/a&gt; ：Spring Boot 集成 MyBatis Plus 示例&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;参考文章&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.ityouknow.com/springboot/2018/03/01/spring-boot-2.0.html&#34;&gt;Spring Boot 2(一)：【重磅】Spring Boot 2.0权威发布&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.ityouknow.com/springboot/2018/03/03/spring-boot-banner.html&#34;&gt;Spring Boot 2(二)：Spring Boot 2.0尝鲜-动态 Banner&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.ityouknow.com/springboot/2018/03/05/spring-boot-open-source.html&#34;&gt;Spring Boot 2(三)：Spring Boot 开源软件都有哪些？&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.ityouknow.com/springboot/2018/03/19/spring-boot-docker.html&#34;&gt;Spring Boot 2(四)：使用 Docker 部署 Spring Boot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.ityouknow.com/springboot/2018/03/28/dockercompose-springboot-mysql-nginx.html&#34;&gt;Spring Boot 2(五)：Docker Compose + Spring Boot + Nginx + Mysql 实践&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.ityouknow.com/springboot/2018/04/02/docker-favorites.html&#34;&gt;Spring Boot 2(六)：使用 Docker 部署 Spring Boot 开源软件云收藏&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.ityouknow.com/springboot/2018/05/03/spring-boot-commandLineRunner.html&#34;&gt;Spring Boot 2(七)：Spring Boot 如何解决项目启动时初始化资源&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.ityouknow.com/springboot/2018/09/01/spring-boot-memcached.html&#34;&gt;Spring Boot 2(八)：Spring Boot 集成 Memcached&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.ityouknow.com/springboot/2018/11/03/spring-boot-2.1.html&#34;&gt;Spring Boot 2 (九)：【重磅】Spring Boot 2.1.0 权威发布&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.ityouknow.com/springboot/2019/01/03/spring-pivotal.html&#34;&gt;Spring Boot/Cloud 研发团队介绍&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.ityouknow.com/springboot/2019/02/12/spring-boot-webflux.html&#34;&gt;Spring Boot 2 (十)：Spring Boot 中的响应式编程和 WebFlux 入门&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;下方示例已经全部升级到 2.X&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ityouknow/spring-boot-examples/tree/master/spring-boot-helloWorld&#34;&gt;spring-boot-helloWorld&lt;/a&gt;：Spring Boot 的 hello World 版本&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ityouknow/spring-boot-examples/tree/master/spring-boot-web&#34;&gt;spring-boot-web&lt;/a&gt;：Spring Boot Web 开发综合示例&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ityouknow/spring-boot-examples/tree/master/spring-boot-redis&#34;&gt;spring-boot-redis&lt;/a&gt;：Spring Boot 集成 Redis 示例&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ityouknow/spring-boot-examples/tree/master/spring-boot-jpa&#34;&gt;spring-boot-jpa&lt;/a&gt;：Spring Boot 使用 Jpa 各种示例&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ityouknow/spring-boot-examples/tree/master/spring-boot-mybatis/spring-boot-mybatis-annotation&#34;&gt;spring-boot-mybaits-annotation&lt;/a&gt;：注解版本&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ityouknow/spring-boot-examples/tree/master/spring-boot-mybatis/spring-boot-mybatis-xml&#34;&gt;spring-boot-mybaits-xml&lt;/a&gt;：Xml 配置版本&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ityouknow/spring-boot-examples/tree/master/spring-boot-mybatis/spring-boot-mybatis-xml-mulidatasource&#34;&gt;spring-boot-mybatis-xml-mulidatasource&lt;/a&gt;：Spring Boot + Mybatis (Xml 版） 多数据源最简解决方案&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ityouknow/spring-boot-examples/tree/master/spring-boot-mybatis/spring-boot-mybatis-annotation-mulidatasource&#34;&gt;spring-boot-mybatis-annotation-mulidatasource&lt;/a&gt;：Spring Boot + Mybatis（注解版）多数据源最简解决方案&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ityouknow/spring-boot-examples/tree/master/spring-boot-thymeleaf&#34;&gt;spring-boot-thymeleaf&lt;/a&gt;：Spring Boot 使用 Thymeleaf 详细示例&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ityouknow/spring-boot-examples/tree/master/spring-boot-jpa-thymeleaf-curd&#34;&gt;spring-boot-jpa-thymeleaf-curd&lt;/a&gt;：Spring Boot + Jpa + Thymeleaf 增删改查示例&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ityouknow/spring-boot-examples/tree/master/spring-boot-rabbitmq&#34;&gt;spring-boot-rabbitmq&lt;/a&gt;：Spring Boot 和 Rabbitmq 各种消息应用案例&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ityouknow/spring-boot-examples/tree/master/spring-boot-scheduler&#34;&gt;spring-boot-scheduler&lt;/a&gt;：Spring Boot 和定时任务案例&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ityouknow/spring-boot-examples/tree/master/spring-boot-mail&#34;&gt;spring-boot-mail&lt;/a&gt;：Spring Boot 和邮件服务&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ityouknow/spring-boot-examples/tree/master/spring-boot-mongodb/spring-boot-mongodb&#34;&gt;spring-boot-mongodb&lt;/a&gt;：Spring Boot 和 Mongodb 的使用&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ityouknow/spring-boot-examples/tree/master/spring-boot-mongodb/spring-boot-multi-mongodb&#34;&gt;spring-boot-multi-mongodb&lt;/a&gt;：Spring Boot 和 Mongodb 多数据源的使用&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ityouknow/spring-boot-examples/tree/master/spring-boot-package-war&#34;&gt;spring-boot-package-war&lt;/a&gt;： Spring Boot 打包成 War 包示例&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ityouknow/spring-boot-examples/tree/master/spring-boot-shiro&#34;&gt;spring-boot-shiro&lt;/a&gt;：Spring Boot 整合 Shiro Rbac 示例&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ityouknow/spring-boot-examples/tree/master/spring-boot-file-upload&#34;&gt;spring-boot-file-upload&lt;/a&gt;：使用 Spring Boot 上传文件示例&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ityouknow/spring-boot-examples/tree/master/spring-boot-fastDFS&#34;&gt;spring-boot-fastDFS&lt;/a&gt;：Spring Boot 整合 FastDFS 示例&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ityouknow/spring-boot-examples/tree/master/spring-boot-actuator&#34;&gt;spring-boot-actuator&lt;/a&gt;：Spring Boot Actuator 使用示例&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ityouknow/spring-boot-examples/tree/master/spring-boot-admin-simple&#34;&gt;spring-boot-admin-simple&lt;/a&gt;：Spring Boot Admin 的使用示例&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;参考文章&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.ityouknow.com/springboot/2016/01/06/spring-boot-quick-start.html&#34;&gt;Spring Boot(一)：入门篇&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.ityouknow.com/springboot/2016/02/03/spring-boot-web.html&#34;&gt;Spring Boot(二)：Web 综合开发&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.ityouknow.com/springboot/2016/03/06/spring-boot-redis.html&#34;&gt;Spring Boot(三)：Spring Boot 中 Redis 的使用&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.ityouknow.com/springboot/2016/05/01/spring-boot-thymeleaf.html&#34;&gt;Spring Boot(四)：Thymeleaf 使用详解&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.ityouknow.com/springboot/2016/08/20/spring-boot-jpa.html&#34;&gt;Spring Boot(五)：Spring Data Jpa 的使用&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.ityouknow.com/springboot/2016/11/06/spring-boot-mybatis.html&#34;&gt;Spring Boot(六)：如何优雅的使用 Mybatis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.ityouknow.com/springboot/2016/11/25/spring-boot-multi-mybatis.html&#34;&gt;Spring Boot(七)：Spring Boot + Mybatis 多数据源最简解决方案&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.ityouknow.com/springboot/2016/11/30/spring-boot-rabbitMQ.html&#34;&gt;Spring Boot(八)：RabbitMQ 详解&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.ityouknow.com/springboot/2016/12/02/spring-boot-scheduler.html&#34;&gt;Spring Boot(九)：定时任务&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.ityouknow.com/springboot/2017/05/06/spring-boot-mail.html&#34;&gt;Spring Boot(十)：邮件服务&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.ityouknow.com/springboot/2017/05/08/spring-boot-mongodb.html&#34;&gt;Spring Boot(十一)：Spring Boot 中 Mongodb 的使用&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.ityouknow.com/springboot/2017/05/09/spring-boot-deploy.html&#34;&gt;Spring Boot(十二)：Spring Boot 如何测试打包部署&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.ityouknow.com/springboot/2017/06/22/spring-boot-tips.html&#34;&gt;Spring Boot(十三)：Spring Boot 小技巧&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.ityouknow.com/springboot/2017/06/26/spring-boot-shiro.html&#34;&gt;Spring Boot(十四)：Spring Boot 整合 Shiro-登录认证和权限管理&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.ityouknow.com/springboot/2017/09/23/spring-boot-jpa-thymeleaf-curd.html&#34;&gt;Spring Boot(十五)：Spring Boot + Jpa + Thymeleaf 增删改查示例&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.ityouknow.com/springboot/2017/11/11/spring-boot-jenkins.html&#34;&gt;Spring Boot(十六)：使用 Jenkins 部署 Spring Boot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.ityouknow.com/springboot/2018/01/12/spring-boot-upload-file.html&#34;&gt;Spring Boot(十七)：使用 Spring Boot 上传文件&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.ityouknow.com/springboot/2018/01/16/spring-boot-fastdfs.html&#34;&gt;Spring Boot(十八)：使用 Spring Boot 集成 FastDFS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.ityouknow.com/springboot/2018/02/06/spring-boot-actuator.html&#34;&gt;Spring Boot(十九)：使用 Spring Boot Actuator 监控应用&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.ityouknow.com/springboot/2018/02/11/spring-boot-admin.html&#34;&gt;Spring Boot(二十)：使用 spring-boot-admin 对 Spring Boot 服务进行监控&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://www.ityouknow.com/springboot/2016/09/26/spring-boot-opensource-favorites.html&#34;&gt;Spring Boot 实战：我们的第一款开源项目&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;如果大家想了解关于 Spring Boot 的其它方面应用，也可以以&lt;a href=&#34;https://github.com/ityouknow/spring-boot-examples/issues&#34;&gt;issues&lt;/a&gt;的形式反馈给我，我后续来完善。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;关注公众号：纯洁的微笑，回复&#34;springboot&#34;进群交流&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://www.ityouknow.com/assets/images/keeppuresmile_430.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hneemann/Digital</title>
    <updated>2022-10-05T01:37:59Z</updated>
    <id>tag:github.com,2022-10-05:/hneemann/Digital</id>
    <link href="https://github.com/hneemann/Digital" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A digital logic designer and circuit simulator.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/hneemann/Digital/releases/latest/download/Digital.zip&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hneemann/Digital/master/distribution/Download.svg?sanitize=true&#34; alt=&#34;Download&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://travis-ci.com/hneemann/Digital.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt; &lt;a href=&#34;https://codecov.io/gh/hneemann/Digital&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/hneemann/Digital/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Digital&lt;/h1&gt; &#xA;&lt;p&gt;Digital is an easy-to-use digital logic designer and circuit simulator designed for educational purposes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hneemann/Digital/master/distribution/screenshot.png&#34; alt=&#34;screnshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hneemann/Digital/master/distribution/screenshot2.png&#34; alt=&#34;screnshot2&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/hneemann/Digital/releases/latest/download/Digital.zip&#34;&gt;Download&lt;/a&gt; and Installation&lt;/h2&gt; &#xA;&lt;p&gt;There is no installation required, just unpack the &lt;em&gt;Digital.zip&lt;/em&gt; file, which is available for &lt;a href=&#34;https://github.com/hneemann/Digital/releases/latest/download/Digital.zip&#34;&gt;download&lt;/a&gt;. On Linux start the shell script and on Windows and MacOS the JAR file can be started directly. A Java Runtime Environment (at least JRE 8) is required to run Digital. On Windows the easiest way to get Java is to install the binaries provided by the &lt;a href=&#34;https://adoptium.net/&#34;&gt;Eclipse Temurin&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;p&gt;If there are any problems starting Digital on your system, please try to run Digital from a command line within the &lt;em&gt;Digital&lt;/em&gt; folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;java -jar Digital.jar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;These are the main features of Digital:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visualization of signal states with measurement graphs.&lt;/li&gt; &#xA; &lt;li&gt;Single gate mode to analyze oscillations.&lt;/li&gt; &#xA; &lt;li&gt;Analysis and synthesis of combinatorial and sequential circuits.&lt;/li&gt; &#xA; &lt;li&gt;Simple testing of circuits: You can create test cases and execute them to verify your design.&lt;/li&gt; &#xA; &lt;li&gt;Many examples: From a transmission gate D-flip-flop to a complete (simple) MIPS-like single cycle CPU.&lt;/li&gt; &#xA; &lt;li&gt;Includes a simple editor for finite state machines (FSM). A FSM can then be converted to a state transition table and a circuit implementing the FSM (See &lt;a href=&#34;https://raw.githubusercontent.com/hneemann/Digital/master/#additional-screenshots&#34;&gt;screenshot&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Contains a library with the most commonly used 74xx series integrated circuits.&lt;/li&gt; &#xA; &lt;li&gt;Supports generic circuits. This allows the creation of circuits that can be parameterized when used. In this way, it is possible, for e.g., to create a barrel shifter with a selectable bit width.&lt;/li&gt; &#xA; &lt;li&gt;Good performance: The example processor can be clocked at 120 kHz.&lt;/li&gt; &#xA; &lt;li&gt;Supports large circuits: The &#34;Conway&#39;s Game of Life&#34; example consists of about 2400 active components and works just fine.&lt;/li&gt; &#xA; &lt;li&gt;It is possible to use custom components which are implemented in Java and packed in a jar file. See this &lt;a href=&#34;https://github.com/hneemann/digitalCustomComponents&#34;&gt;example&lt;/a&gt; for details.&lt;/li&gt; &#xA; &lt;li&gt;Simple remote &lt;a href=&#34;https://github.com/hneemann/Assembler/raw/master/src/main/java/de/neemann/assembler/gui/RemoteInterface.java&#34;&gt;TCP interface&lt;/a&gt; which e.g. allows an &lt;a href=&#34;https://github.com/hneemann/Assembler&#34;&gt;assembler IDE&lt;/a&gt; to control the simulator.&lt;/li&gt; &#xA; &lt;li&gt;Components can be described using VHDL or Verilog. The open source VHDL simulator &lt;a href=&#34;http://ghdl.free.fr/&#34;&gt;ghdl&lt;/a&gt; needs to be installed to simulate a VHDL defined component, and the open source Verilog simulator &lt;a href=&#34;http://iverilog.icarus.com/&#34;&gt;Icarus Verilog&lt;/a&gt; is required to simulate a Verilog defined component.&lt;/li&gt; &#xA; &lt;li&gt;A circuit can be exported to VHDL or Verilog. There is also direct support for the &lt;a href=&#34;https://reference.digilentinc.com/reference/programmable-logic/basys-3/start&#34;&gt;BASYS3 Board&lt;/a&gt; and the &lt;a href=&#34;https://tinyfpga.com/&#34;&gt;TinyFPGA BX&lt;/a&gt; board. See the documentation for details. The examples folder contains a variant of the example CPU, which runs on a BASYS3 board.&lt;/li&gt; &#xA; &lt;li&gt;Direct export of JEDEC files which you can flash to a &lt;a href=&#34;https://www.microchip.com/wwwproducts/en/ATF16V8C&#34;&gt;GAL16v8&lt;/a&gt; or a &lt;a href=&#34;https://www.microchip.com/wwwproducts/en/ATF22V10C&#34;&gt;GAL22v10&lt;/a&gt;. These chips are somewhat outdated (introduced in 1985!) but sufficient for beginners exercises, easy to understand and well documented. Also the &lt;a href=&#34;https://www.microchip.com/design-centers/programmable-logic/spld-cpld/cpld-atf15xx-family&#34;&gt;ATF150x&lt;/a&gt; chips are supported which offer up to 128 macro-cells and in system programming. See the &lt;a href=&#34;https://github.com/hneemann/Digital/releases/latest&#34;&gt;documentation&lt;/a&gt; for details.&lt;/li&gt; &#xA; &lt;li&gt;SVG export of circuits, including a LaTeX/Inkscape compatible SVG version (see &lt;a href=&#34;https://www.ctan.org/tex-archive/info/svg-inkscape&#34;&gt;ctan&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;No legacy code.&lt;/li&gt; &#xA; &lt;li&gt;Good test coverage (about 80%; Neither the GUI tests nor the HDL simulator integration tests are running on the Travis-CI build servers, so CodeCov measures only about 50%). Almost all examples contain test cases which ensure that they work correctly.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The latest changes that have not yet been released are listed in the &lt;a href=&#34;https://raw.githubusercontent.com/hneemann/Digital/master/distribution/ReleaseNotes.txt&#34;&gt;release notes&lt;/a&gt;. You can find the latest pre-release builds &lt;a href=&#34;https://infdigital.dhbw-mosbach.de/&#34;&gt;here&lt;/a&gt;. In the pre release builds the automated GUI tests are usually not executed. All other tests, including the HDL tests, were executed without errors.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/hneemann/Digital/releases/latest&#34;&gt;documentation&lt;/a&gt; is available in English, German, Spanish, Portuguese, French, Italian and simplified Chinese. It is still very incomplete but it contains a chapter &#34;First Steps&#34; which explains the basic usage of Digital. The documentation also contains a list of available 74xx chips and a list of available keyboard shortcuts.&lt;/p&gt; &#xA;&lt;h2&gt;Translations&lt;/h2&gt; &#xA;&lt;p&gt;So far Digital is available in English, German, Spanish, Portuguese, French, Italian and simplified Chinese. If someone wants to add a new translation, please let me &lt;a href=&#34;mailto:digital-simulator@web.de&#34;&gt;know&lt;/a&gt;. I can provide you with a special file for translation. This file is much easier to translate than the &lt;a href=&#34;https://github.com/hneemann/Digital/raw/master/src/main/resources/lang&#34;&gt;files&lt;/a&gt; used directly by Digital. So you don&#39;t have to deal with GitHub or the Java source code. Simply add the respective translation of the English text to this file and send it back to &lt;a href=&#34;mailto:digital-simulator@web.de&#34;&gt;me&lt;/a&gt;. If you want to know how to create the necessary files yourself, see &lt;a href=&#34;https://github.com/hneemann/Digital/raw/master/src/main/resources/lang/howTo.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Comments&lt;/h2&gt; &#xA;&lt;p&gt;If you want to send a bug report or feature request please use the GitHub &lt;a href=&#34;https://github.com/hneemann/Digital/issues/new&#34;&gt;issue tracker&lt;/a&gt;. This helps me to improve Digital, so do not hesitate. If you have general questions, you can also use the new GitHub &lt;a href=&#34;https://github.com/hneemann/Digital/discussions&#34;&gt;Discussions&lt;/a&gt; to ask your questions without creating an issue.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s also possible to send a private message to &lt;a href=&#34;mailto:digital-simulator@web.de&#34;&gt;digital-simulator@web.de&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;Prior to the development of Digital, I used &lt;a href=&#34;http://www.cburch.com/logisim/&#34;&gt;Logisim&lt;/a&gt;, developed by Carl Burch. If you are familiar with Logisim you will recognize the wire color scheme.&lt;/p&gt; &#xA;&lt;p&gt;Logisim is a excellent and proven tool for teaching purposes, that has been actively developed until 2011. In 2013 Carl Burch has started the development of a new simulator called &lt;a href=&#34;http://www.toves.org/&#34;&gt;Toves&lt;/a&gt;. In his &lt;a href=&#34;http://www.toves.org/blog/&#34;&gt;blog&lt;/a&gt; he explained why he decided to develop a new simulator instead of improving Logisim. In short: In his opinion, there are weaknesses in Logisim&#39;s architecture that are too difficult to overcome. Unfortunately, the development of Toves was discontinued at a very early stage.&lt;/p&gt; &#xA;&lt;p&gt;In 2014, Carl Burch finally &lt;a href=&#34;http://www.cburch.com/logisim/retire-note.html&#34;&gt;discontinued&lt;/a&gt; the development of Logisim. Since Logisim was released as open source, there are a number of forks to continue the work on Logisim:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/reds-heig/logisim-evolution&#34;&gt;Logisim-Evolution&lt;/a&gt; by people of a group of swiss institutes (Haute École Spécialisée Bernoise, Haute École du paysage, d&#39;ingénierie et d&#39;architecture de Genève, and Haute École d&#39;Ingénierie et de Gestion du Canton de Vaud)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lawrancej/logisim&#34;&gt;Logisim&lt;/a&gt; by Joseph Lawrance at Wentworth Institute of Technology, Boston, MA&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.google.com/archive/p/logisim-iitd/&#34;&gt;Logisim-iitd&lt;/a&gt; from the Indian Institute of Technology Delhi&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.cs.cornell.edu/courses/cs3410/2015sp/&#34;&gt;Logisim&lt;/a&gt; from the CS3410 course of the Cornell University&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;But as far as I know, these projects do not work on solving the architectural difficulties. They are more about adding features and fixing bugs. In &lt;a href=&#34;https://github.com/reds-heig/logisim-evolution&#34;&gt;Logisim-Evolution&lt;/a&gt;, for example, a VHDL/Verilog export and a really nice FPGA board integration was added.&lt;/p&gt; &#xA;&lt;p&gt;So I also decided to implement a new simulator completely from scratch and started the implementation of Digital in March 2016. In the meantime a development level has been reached which is comparable to Logisim. In some areas (performance, testing of circuits, circuit analysis, hardware support) Logisim has already been exceeded.&lt;/p&gt; &#xA;&lt;p&gt;Below I would like to explain briefly the reasons which led me to start a new development:&lt;/p&gt; &#xA;&lt;h3&gt;Switch On&lt;/h3&gt; &#xA;&lt;p&gt;In Logisim there is no real &#34;switching on&#34; of a circuit. The simulation is running also while you are modifying it. This causes sometimes an unexpected behaviour. So it is possible to build a simple master-slave flip-flop which works fine. But after a circuit reset the flip-flop does not work anymore. Since the circuit is not switched on, there is no settling time to bring the circuit to a stable condition after its completion. A master-slave JK-flip-flop can only be implemented with a reset input, and this reset input needs to be activated to make the circuit operational.&lt;/p&gt; &#xA;&lt;p&gt;To understand how Digital deals with this issue, you have to look at how the simulation works in Digital: Digital uses an event based simulator approach, i.e. each time a gate undergoes a change at one of its inputs, the new input states are read, however, the outputs of the gate are not updated instantly. Only when all gates involved have read their inputs, the outputs of all gates are updated. All gates seem to change synchronously, i.e. they seem to have all the exact same gate delay time. However, an undesirable feature of this approach is that even a simple RS flip-flop might not be able to reach a stable state. The same problem Logisim has.&lt;/p&gt; &#xA;&lt;p&gt;To solve that problem, the &#34;switching on&#34; is introduced and a different simulation mode is used during the settling time right after switching on the circuit: Each time a gate undergoes a change at one of its inputs all gate inputs are read and their outputs are updated immediately. This happens gatewise in random order until no further changes occur and the circuit reaches a stable state. The gates appear to have random delay times now. This way, a master-slave flip-flop reaches a stable state after &#34;switch on&#34;, however, the final state is still undefined.&lt;/p&gt; &#xA;&lt;p&gt;To start a circuit in a defined state a special reset gate is used. This gate has a single output which is low during settling time and goes high when settling time is over.&lt;/p&gt; &#xA;&lt;p&gt;A disadvantage of this approach is the fact that a running simulation cannot be changed. In order to do so, the circuit needs be switched off, modified and switched on again. However, this procedure is also advisable for real circuits.&lt;/p&gt; &#xA;&lt;h3&gt;Oscillations&lt;/h3&gt; &#xA;&lt;p&gt;With Logisim it is hard to find the root cause for oscillating circuits. If Logisim detects an oscillation, a corresponding message is issued, but it is not possible to investigate the cause in more detail, so it is difficult to understand what happens.&lt;/p&gt; &#xA;&lt;p&gt;The synchronous update of all gates, which have seen a change at one of their inputs may also cause oscillations in Digital. In such a case, the oscillation is detected and simulation stops. However, there is also a single gate mode which allows to propagate a signal change gate by gate. This feature allows to follow the way through the circuit. After each step, all gates with a change at one of their inputs are highlighted. This way you can see how a signal change propagates in a circuit, thus you are able to find the root cause of an oscillation.&lt;/p&gt; &#xA;&lt;h3&gt;Embedded circuits&lt;/h3&gt; &#xA;&lt;p&gt;Similar to Logisim, Digital also allows to embed previously saved circuits in new designs, so hierarchical circuits can be created. However, in Digital embedded circuits are included as often as the circuit is used. This is similar to a C program in which all function calls are compiled as inlined functions. And this is also similar to a real circuit: Each sub circuit is &#34;physically present&#34; as often as it is used in the design. Although this approach increases the size of the data structure of the simulation model in memory, it simplifies the simulation itself. Thus, for example, the inputs and outputs of an embedded circuit are not specifically treat, they simply don&#39;t exist anymore after the formation of the simulation model. Even bidirectional connections can be implemented easily. Because of that approach for instance a embedded AND gate in a sub circuit behaves exactly like an AND gate inserted at top level although there is actually no difference between these two variants from the simulation models perspective. Logisim works somewhat different, which sometimes leads to surprises like unexpected signal propagation times and which makes it difficult to use bidirectional pins.&lt;/p&gt; &#xA;&lt;h3&gt;Performance&lt;/h3&gt; &#xA;&lt;p&gt;If a complete processor is simulated, it is possible to calculate the simulation without an update of the graphical representation. A simple processor (see example) can be simulated with a 120kHz clock (Intel® Core ™ i5-3230M CPU @ 2.60GHz), which is suitable also for more complex assembly exercises like Conway&#39;s Game of Life. There is a break gate having a single input. If this input changes from low to high this quick run is stopped. This way, an assembler instruction BRK can be implemented, which then can be used to insert break points in assembly language programs. So the debugging of assembly programs becomes very simple.&lt;/p&gt; &#xA;&lt;h3&gt;Debugging&lt;/h3&gt; &#xA;&lt;p&gt;In Logisim there is no easy way to debug an assembly program in a simulated processor. Digital offers a simple TCP-based remote control interface, so an &lt;a href=&#34;https://github.com/hneemann/Assembler&#34;&gt;assembler IDE&lt;/a&gt; can be used to control the simulator and load assembly programs into the simulated processor, start the program, perform single steps and so on. If a &#34;single step&#34; or a &#34;run to next BRK instruction&#34; is triggered by the assembly IDE, the actual used address of the program memory is returned to the assembler IDE. This allows the assembler IDE to highlight the actual executed instruction. In this way it is very easy to debug an assembly program executed by a simulated processor.&lt;/p&gt; &#xA;&lt;h3&gt;Circuit Synthesis&lt;/h3&gt; &#xA;&lt;p&gt;Logisim is able to generate combinatorial circuits from a truth table and vice versa. In Digital, this is also possible. In addition, a sequential circuit can be generated from an appropriate state transition table. You can specify both the transition circuit and the output circuit. The minimization of the expressions is done by the method of Quine and McCluskey. The truth table also can derived from a circuit which contains simple combinatorial logic, D flip-flops or JK flip-flops, including the generation of the state transition table. Note, however, that a flip-flop build of combinatorial gates is not recognized as such. The analysis of sequential circuits only works with purely combinatorial logic combined with the build-in D or JK flip-flops. Once a truth table or state transition table has been created, a JEDEC file can be exported for a &lt;a href=&#34;http://www.atmel.com/devices/ATF16V8C.aspx&#34;&gt;GAL16v8&lt;/a&gt; or a &lt;a href=&#34;http://www.atmel.com/devices/ATF22V10C.aspx&#34;&gt;GAL22v10&lt;/a&gt;. After that, this file can be flashed onto a appropriate GAL. As mentioned above these GALs are quite old but with 8/10 macro-cells sufficient for beginners exercises. If more macro-cells are required, see the PDF documentation for details on how to set up Digital to support the &lt;a href=&#34;http://www.microchip.com/wwwproducts/en/ATF1502AS&#34;&gt;ATF1502&lt;/a&gt; and &lt;a href=&#34;http://www.microchip.com/wwwproducts/en/ATF1504AS&#34;&gt;ATF1504&lt;/a&gt; CPLDs which offer 32/64 macro-cells and In System Programming. It is also possible to export a circuit to VHDL or Verilog to run it on an FPGA. But the necessary HDL synthesis is sometimes a bit time-consuming and in my experience slows down the workflow in a lab exercise too much, especially if only simple circuits are required and the students change the circuit over and over again.&lt;/p&gt; &#xA;&lt;h2&gt;How do I get set up?&lt;/h2&gt; &#xA;&lt;p&gt;If you want to build Digital from the source code:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;At first clone the repository.&lt;/li&gt; &#xA; &lt;li&gt;A JDK (at least JDK 8) is required (either the Oracle JDK or OpenJDK)&lt;/li&gt; &#xA; &lt;li&gt;maven is used as build system, so the easiest way is to install &lt;a href=&#34;https://maven.apache.org/&#34;&gt;maven&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;After that you can simply run &lt;code&gt;mvn install&lt;/code&gt; to build Digital.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;mvn site&lt;/code&gt; to create a findbugs and a JaCoCo code coverage report.&lt;/li&gt; &#xA; &lt;li&gt;Most IDEs (Eclipse, NetBeans, IntelliJ) are able to import the &lt;code&gt;pom.xml&lt;/code&gt; to create a project.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribution guidelines&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you want to contribute, please open a GitHub issue first. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A discussion should avoid duplicate or unnecessary work.&lt;/li&gt; &#xA;   &lt;li&gt;Before you send a pull request, make sure that at least &lt;code&gt;mvn install&lt;/code&gt; runs without errors.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t introduce new findbugs issues.&lt;/li&gt; &#xA; &lt;li&gt;Try to keep the test coverage high. The target is a minimum of 80% test coverage.&lt;/li&gt; &#xA; &lt;li&gt;So far, there are only a few GUI tests, so that the overall test coverage is only slightly below 80%. Try to keep the amount of untested GUI code low.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Many thanks to the following persons for their help:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ivan de Jesus Deras Tabora from the Universidad Tecnológica Centroamericana in Honduras has implemented the verilog code generator and almost all the necessary verilog templates.&lt;/li&gt; &#xA; &lt;li&gt;Theldo Cruz Franqueira from the Pontifícia Universidade Católica de Minas Gerais in Brazil has provided the Portuguese translation.&lt;/li&gt; &#xA; &lt;li&gt;Ángel Millán from the Instituto de Educación Secundaria Ies Virgen de Villadiego in Peñaflor (Sevilla), Spain has provided the Spanish translation.&lt;/li&gt; &#xA; &lt;li&gt;XinJun Ma (&lt;a href=&#34;https://github.com/itviewer&#34;&gt;@itviewer&lt;/a&gt;) has provided the Chinese translation.&lt;/li&gt; &#xA; &lt;li&gt;Nicolas Maltais (&lt;a href=&#34;https://github.com/maltaisn&#34;&gt;@maltaisn&lt;/a&gt;) has provided the French translation.&lt;/li&gt; &#xA; &lt;li&gt;Luca Cavallari (&lt;a href=&#34;https://github.com/psiwray&#34;&gt;@psiwray&lt;/a&gt;) has provided the Italian translation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Additional Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hneemann/Digital/master/distribution/screenshot3.png&#34; alt=&#34;screnshot3&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>RipMeApp/ripme</title>
    <updated>2022-10-05T01:37:59Z</updated>
    <id>tag:github.com,2022-10-05:/RipMeApp/ripme</id>
    <link href="https://github.com/RipMeApp/ripme" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Downloads albums in bulk&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RipMe &lt;a href=&#34;https://github.com/RipMeApp/ripme/raw/master/LICENSE.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-blue.svg?sanitize=true&#34; alt=&#34;Licensed under the MIT License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/RipMeApp/Lobby?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/RipMeApp/Lobby.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/RipMeApp/Lobby&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.reddit.com/r/ripme/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/discuss-on%20reddit-blue.svg?sanitize=true&#34; alt=&#34;Subreddit&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/RipMeApp/ripme&#34;&gt;&lt;img src=&#34;https://travis-ci.org/RipMeApp/ripme.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/RipMeApp/ripme?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/RipMeApp/ripme/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Contribute&lt;/h1&gt; &#xA;&lt;p&gt;RipMe is maintained with ♥️ and in our limited free time by &lt;strong&gt;&lt;a href=&#34;https://github.com/metaprime&#34;&gt;@MetaPrime&lt;/a&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;a href=&#34;https://github.com/cyian-1756&#34;&gt;@cyian-1756&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&#34;https://github.com/kevin51jiang&#34;&gt;@kevin51jiang&lt;/a&gt;&lt;/strong&gt;. If you&#39;d like to contribute but aren&#39;t good with code, help keep us happy with a small contribution!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.paypal.me/ripmeapp&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PayPal-Buy_us...-lightgrey.svg?sanitize=true&#34; alt=&#34;Tip with PayPal&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.paypal.com/paypalme/ripmeapp/send?amount=5.00&amp;amp;currencyCode=USD&amp;amp;locale.x=en_US&amp;amp;country.x=US&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/coffee-%245-green.svg?sanitize=true&#34; alt=&#34;Tip with PayPal&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.paypal.com/paypalme/ripmeapp/send?amount=10.00&amp;amp;currencyCode=USD&amp;amp;locale.x=en_US&amp;amp;country.x=US&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/beer-%2410-yellow.svg?sanitize=true&#34; alt=&#34;Tip with PayPal&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.paypal.com/paypalme/ripmeapp/send?amount=20.00&amp;amp;currencyCode=USD&amp;amp;locale.x=en_US&amp;amp;country.x=US&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lunch-%2420-orange.svg?sanitize=true&#34; alt=&#34;Tip with PayPal&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.paypal.com/paypalme/ripmeapp/send?amount=50.00&amp;amp;currencyCode=USD&amp;amp;locale.x=en_US&amp;amp;country.x=US&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dinner-%2450-red.svg?sanitize=true&#34; alt=&#34;Tip with PayPal&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.paypal.me/ripmeapp&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/custom_amount-...-lightgrey.svg?sanitize=true&#34; alt=&#34;Tip with PayPal&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;About&lt;/h1&gt; &#xA;&lt;p&gt;RipMe is an album ripper for various websites. It is a cross-platform tool that runs on your computer, and requires Java 8. RipMe has been tested and confirmed working on Windows, Linux and MacOS.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/UCQNjeg.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Downloads&lt;/h2&gt; &#xA;&lt;p&gt;Download &lt;code&gt;ripme.jar&lt;/code&gt; from the &lt;a href=&#34;https://github.com/ripmeapp/ripme/releases&#34;&gt;latest release&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: If you&#39;re currently using version 1.2.x, 1.3.x or 1.7.49, you will not automatically get updates to the newest versions. We recommend downloading the latest version from the link above.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;For information about running the &lt;code&gt;.jar&lt;/code&gt; file, see &lt;a href=&#34;https://github.com/ripmeapp/ripme/wiki/How-To-Run-RipMe&#34;&gt;the How To Run wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;On macOS, there is a &lt;a href=&#34;https://github.com/Homebrew/homebrew-cask/raw/master/Casks/ripme.rb&#34;&gt;cask&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install --cask ripme &amp;amp;&amp;amp; xattr -d com.apple.quarantine /Applications/ripme.jar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ripmeapp/ripme/raw/master/ripme.json&#34;&gt;Changelog&lt;/a&gt; &lt;strong&gt;(ripme.json)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Quickly downloads all images in an online album. &lt;a href=&#34;https://github.com/ripmeapp/ripme/wiki/Supported-Sites&#34;&gt;See supported sites&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Easily re-rip albums to fetch new content&lt;/li&gt; &#xA; &lt;li&gt;Built in updater&lt;/li&gt; &#xA; &lt;li&gt;Skips already downloaded images by default&lt;/li&gt; &#xA; &lt;li&gt;Can auto skip e-hentai and nhentai albums containing certain tags. &lt;a href=&#34;https://github.com/RipMeApp/ripme/wiki/Config-options#nhentaiblacklisttags&#34;&gt;See here for how to enable&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Download a range of urls. &lt;a href=&#34;https://github.com/RipMeApp/ripme/wiki/How-To-Run-RipMe#downloading-a-url-range&#34;&gt;See here for how&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;List of Supported Sites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;imgur&lt;/li&gt; &#xA; &lt;li&gt;twitter&lt;/li&gt; &#xA; &lt;li&gt;tumblr&lt;/li&gt; &#xA; &lt;li&gt;instagram&lt;/li&gt; &#xA; &lt;li&gt;flickr&lt;/li&gt; &#xA; &lt;li&gt;photobucket&lt;/li&gt; &#xA; &lt;li&gt;reddit&lt;/li&gt; &#xA; &lt;li&gt;gonewild&lt;/li&gt; &#xA; &lt;li&gt;motherless&lt;/li&gt; &#xA; &lt;li&gt;imagefap&lt;/li&gt; &#xA; &lt;li&gt;imagearn&lt;/li&gt; &#xA; &lt;li&gt;seenive&lt;/li&gt; &#xA; &lt;li&gt;vinebox&lt;/li&gt; &#xA; &lt;li&gt;8muses&lt;/li&gt; &#xA; &lt;li&gt;deviantart&lt;/li&gt; &#xA; &lt;li&gt;xhamster&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ripmeapp/ripme/wiki/Supported-Sites&#34;&gt;(more)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Not Supported?&lt;/h2&gt; &#xA;&lt;p&gt;Request support for more sites by adding a comment to &lt;a href=&#34;https://github.com/RipMeApp/ripme/issues/38&#34;&gt;this Github issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re a developer, you can add your own Ripper by following the wiki guide: &lt;a href=&#34;https://github.com/ripmeapp/ripme/wiki/How-To-Create-A-Ripper-for-HTML-websites&#34;&gt;How To Create A Ripper for HTML Websites&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Compiling &amp;amp; Building&lt;/h1&gt; &#xA;&lt;p&gt;The project uses &lt;a href=&#34;https://gradle.org&#34;&gt;Gradle&lt;/a&gt; or &lt;a href=&#34;http://maven.apache.org/&#34;&gt;Maven&lt;/a&gt;. Therefor both commands are given. To build the .jar file, navigate to the root project directory and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mvn clean compile assembly:single&#xA;mvn -B package assembly:single -Dmaven.test.skip=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./gradlew clean build&#xA;./gradlew clean build -x test --warning-mode all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will include all dependencies in the JAR. One can skip executing the tests as well.&lt;/p&gt; &#xA;&lt;h1&gt;Running Tests&lt;/h1&gt; &#xA;&lt;p&gt;Tests can be marked as beeing slow, or flaky. Default is to run all but the flaky tests. Slow tests can be excluded to run. slow and flaky tests can be run on its own. After building you can run tests, quoting might be necessary depending on your shell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mvn test&#xA;mvn test -DexcludedGroups= -Dgroups=flaky,slow&#xA;mvn test &#39;-Dgroups=!slow&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./gradlew test&#xA;./gradlew test -DexcludeTags= -DincludeTags=flaky,slow&#xA;./gradlew test &#39;-DincludeTags=!slow&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that some tests may fail as sites change and our rippers become out of date. Start by building and testing a released version of RipMe and then ensure that any changes you make do not cause more tests to break.&lt;/p&gt;</summary>
  </entry>
</feed>