<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-02-20T01:32:11Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dependency-check/DependencyCheck</title>
    <updated>2025-02-20T01:32:11Z</updated>
    <id>tag:github.com,2025-02-20:/dependency-check/DependencyCheck</id>
    <link href="https://github.com/dependency-check/DependencyCheck" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OWASP dependency-check is a software composition analysis utility that detects publicly disclosed vulnerabilities in application dependencies.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://mvnrepository.com/artifact/org.owasp/dependency-check-maven&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/org.owasp/dependency-check-maven.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dependency-check/DependencyCheck/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/dependency-check/DependencyCheck/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build and Deploy Snapshot&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scan.coverity.com/projects/dependencycheck&#34;&gt;&lt;img src=&#34;https://img.shields.io/coverity/scan/1654.svg?sanitize=true&#34; alt=&#34;Coverity Scan Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codacy.com/app/jeremylong/DependencyCheck?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=jeremylong/DependencyCheck&amp;amp;utm_campaign=Badge_Grade&#34;&gt;&lt;img src=&#34;https://api.codacy.com/project/badge/Grade/6b6021d481dc41a888c5da0d9ecf9494&#34; alt=&#34;Codacy Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/843&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/843/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%202-blue.svg?sanitize=true&#34; alt=&#34;Apache 2.0 License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.blackhat.com/us-18/arsenal.html#jeremy-long&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/toolswatch/badges/master/arsenal/usa/2018.svg?sanitize=true&#34; alt=&#34;Black Hat Arsenal&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.blackhat.com/us-15/arsenal.html#jeremy-long&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/toolswatch/badges/master/arsenal/usa/2015.svg?sanitize=true&#34; alt=&#34;Black Hat Arsenal&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.blackhat.com/us-14/arsenal.html#Long&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/toolswatch/badges/master/arsenal/usa/2014.svg?sanitize=true&#34; alt=&#34;Black Hat Arsenal&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.blackhat.com/us-13/arsenal.html#Long&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/toolswatch/badges/master/arsenal/usa/2013.svg?sanitize=true&#34; alt=&#34;Black Hat Arsenal&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Dependency-Check&lt;/h1&gt; &#xA;&lt;p&gt;Dependency-Check is a Software Composition Analysis (SCA) tool that attempts to detect publicly disclosed vulnerabilities contained within a project&#39;s dependencies. It does this by determining if there is a Common Platform Enumeration (CPE) identifier for a given dependency. If found, it will generate a report linking to the associated CVE entries.&lt;/p&gt; &#xA;&lt;p&gt;Documentation and links to production binary releases can be found on the &lt;a href=&#34;https://dependency-check.github.io/DependencyCheck&#34;&gt;github pages&lt;/a&gt;. Additionally, more information about the architecture and ways to extend dependency-check can be found on the &lt;a href=&#34;https://github.com/dependency-check/DependencyCheck/wiki&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Notice&lt;/h2&gt; &#xA;&lt;p&gt;This product uses the NVD API but is not endorsed or certified by the NVD.&lt;/p&gt; &#xA;&lt;h2&gt;Breaking Changes in 11.0.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Java 11 is now required to run dependency-check 11.0.0 or higher&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;H2 database upgrade&lt;/p&gt; &lt;p&gt;11.0.0 contains breaking changes using the local H2 database. A full download of the NVD data will occur. Note that if you are using a shared data directory the h2 database file is not compatible with older versions of dependency-check. If you run into problems you may need to run a purge:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;gradle: &lt;code&gt;./gradlew dependencyCheckPurge&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;maven: &lt;code&gt;mvn org.owasp:dependency-check-maven:9.0.0:purge&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;cli: &lt;code&gt;dependency-check.sh --purge&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Mandatory Upgrade Notice&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Upgrading to 10.0.2 or later is mandatory&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Older versions of dependency-check are causing numerous, duplicative requests that end in processing failures are causing unnecassary load on the NVD API. Dependency-check 10.0.2 uses an updated &lt;code&gt;User-Agent&lt;/code&gt; header that will allow the NVD to block calls from the older client.&lt;/p&gt; &#xA;&lt;h3&gt;NVD API Key Highly Recommended&lt;/h3&gt; &#xA;&lt;p&gt;Dependency-check has moved from using the NVD data-feed to the NVD API. Users of dependency-check are &lt;strong&gt;highly&lt;/strong&gt; encouraged to obtain an NVD API Key; see &lt;a href=&#34;https://nvd.nist.gov/developers/request-an-api-key&#34;&gt;https://nvd.nist.gov/developers/request-an-api-key&lt;/a&gt; Without an NVD API Key dependency-check&#39;s updates will be &lt;strong&gt;extremely slow&lt;/strong&gt;. Please see the documentation for the cli, maven, gradle, or ant integrations on how to set the NVD API key.&lt;/p&gt; &#xA;&lt;h4&gt;The NVD API Key, CI, and Rate Limiting&lt;/h4&gt; &#xA;&lt;p&gt;The NVD API has enforced rate limits. If you are using a single API KEY and multiple builds occur you could hit the rate limit and receive 403 errors. In a CI environment one must use a caching strategy.&lt;/p&gt; &#xA;&lt;h4&gt;Gradle build Environment&lt;/h4&gt; &#xA;&lt;p&gt;With 9.0.0 users may encounter issues with &lt;code&gt;NoSuchMethodError&lt;/code&gt; exceptions due to dependency resolution. If you encounter this issue you will need to pin some of the transitive dependencies of dependency-check to specific versions. For example:&lt;/p&gt; &#xA;&lt;p&gt;/buildSrc/build.gradle&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;dependencies {&#xA;    constraints {&#xA;        // org.owasp.dependencycheck needs at least this version of jackson. Other plugins pull in older versions..&#xA;        add(&#34;implementation&#34;, &#34;com.fasterxml.jackson:jackson-bom:2.16.1&#34;)&#xA;&#xA;        // org.owasp.dependencycheck needs these versions. Other plugins pull in older versions..&#xA;        add(&#34;implementation&#34;, &#34;org.apache.commons:commons-lang3:3.14.0&#34;)&#xA;        add(&#34;implementation&#34;, &#34;org.apache.commons:commons-text:1.11.0&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;h3&gt;Java Version&lt;/h3&gt; &#xA;&lt;p&gt;Minimum Java Version: Java 11&lt;/p&gt; &#xA;&lt;h3&gt;Internet Access&lt;/h3&gt; &#xA;&lt;p&gt;OWASP dependency-check requires access to several externally hosted resources. For more information see &lt;a href=&#34;https://dependency-check.github.io/DependencyCheck/data/index.html&#34;&gt;Internet Access Required&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Build Tools&lt;/h3&gt; &#xA;&lt;p&gt;In order to analyze some technology stacks dependency-check may require other development tools to be installed. Some of the analysis listed below may be experimental and require the experimental analyzers to be enabled.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;To analyze .NET Assemblies the dotnet 8 run time or SDK must be installed. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Assemblies targeting other run times can be analyzed - but 8 is required to run the analysis.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;If analyzing GoLang projects &lt;code&gt;go&lt;/code&gt; must be installed.&lt;/li&gt; &#xA; &lt;li&gt;The analysis of &lt;code&gt;Elixir&lt;/code&gt; projects requires &lt;code&gt;mix_audit&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The analysis of &lt;code&gt;npm&lt;/code&gt;, &lt;code&gt;pnpm&lt;/code&gt;, and &lt;code&gt;yarn&lt;/code&gt; projects requires &lt;code&gt;npm&lt;/code&gt;, &lt;code&gt;pnpm&lt;/code&gt;, or &lt;code&gt;yarn&lt;/code&gt; to be installed. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The analysis performed utilize the respective &lt;code&gt;audit&lt;/code&gt; feature of each.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;The analysis of Ruby is a wrapper around &lt;code&gt;bundle-audit&lt;/code&gt;, which must be installed.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Current Releases&lt;/h2&gt; &#xA;&lt;h3&gt;Jenkins Plugin&lt;/h3&gt; &#xA;&lt;p&gt;For instructions on the use of the Jenkins plugin please see the &lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/OWASP+Dependency-Check+Plugin&#34;&gt;OWASP Dependency-Check Plugin page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Command Line&lt;/h3&gt; &#xA;&lt;p&gt;More detailed instructions can be found on the &lt;a href=&#34;https://dependency-check.github.io/DependencyCheck/dependency-check-cli/&#34;&gt;dependency-check github pages&lt;/a&gt;. The latest CLI can be downloaded from github in the &lt;a href=&#34;https://github.com/dependency-check/DependencyCheck/releases&#34;&gt;releases section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Downloading the latest release:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ VERSION=$(curl -s https://dependency-check.github.io/DependencyCheck/current.txt)&#xA;$ curl -Ls &#34;https://github.com/dependency-check/DependencyCheck/releases/download/v$VERSION/dependency-check-$VERSION-release.zip&#34; --output dependency-check.zip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On *nix&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./bin/dependency-check.sh -h&#xA;$ ./bin/dependency-check.sh --out . --scan [path to jar files to be scanned]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; .\bin\dependency-check.bat -h&#xA;&amp;gt; .\bin\dependency-check.bat --out . --scan [path to jar files to be scanned]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Mac with &lt;a href=&#34;http://brew.sh&#34;&gt;Homebrew&lt;/a&gt; Note - homebrew users upgrading from 5.x to 6.0.0 will need to run &lt;code&gt;dependency-check.sh --purge&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ brew update &amp;amp;&amp;amp; brew install dependency-check&#xA;$ dependency-check -h&#xA;$ dependency-check --out . --scan [path to jar files to be scanned]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Maven Plugin&lt;/h3&gt; &#xA;&lt;p&gt;More detailed instructions can be found on the &lt;a href=&#34;https://dependency-check.github.io/DependencyCheck/dependency-check-maven&#34;&gt;dependency-check-maven github pages&lt;/a&gt;. By default, the plugin is tied to the &lt;code&gt;verify&lt;/code&gt; phase (i.e. &lt;code&gt;mvn verify&lt;/code&gt;). Alternatively, one can directly invoke the plugin via &lt;code&gt;mvn org.owasp:dependency-check-maven:check&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The dependency-check plugin can be configured using the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;project&amp;gt;&#xA;    &amp;lt;build&amp;gt;&#xA;        &amp;lt;plugins&amp;gt;&#xA;            ...&#xA;            &amp;lt;plugin&amp;gt;&#xA;              &amp;lt;groupId&amp;gt;org.owasp&amp;lt;/groupId&amp;gt;&#xA;              &amp;lt;artifactId&amp;gt;dependency-check-maven&amp;lt;/artifactId&amp;gt;&#xA;              &amp;lt;executions&amp;gt;&#xA;                  &amp;lt;execution&amp;gt;&#xA;                      &amp;lt;goals&amp;gt;&#xA;                          &amp;lt;goal&amp;gt;check&amp;lt;/goal&amp;gt;&#xA;                      &amp;lt;/goals&amp;gt;&#xA;                  &amp;lt;/execution&amp;gt;&#xA;              &amp;lt;/executions&amp;gt;&#xA;            &amp;lt;/plugin&amp;gt;&#xA;            ...&#xA;        &amp;lt;/plugins&amp;gt;&#xA;        ...&#xA;    &amp;lt;/build&amp;gt;&#xA;    ...&#xA;&amp;lt;/project&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Gradle Plugin&lt;/h3&gt; &#xA;&lt;p&gt;For instructions on the use of the Gradle Plugin, please see the &lt;a href=&#34;https://dependency-check.github.io/DependencyCheck/dependency-check-gradle&#34;&gt;dependency-check-gradle github page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Ant Task&lt;/h3&gt; &#xA;&lt;p&gt;For instructions on the use of the Ant Task, please see the &lt;a href=&#34;https://dependency-check.github.io/DependencyCheck/dependency-check-ant&#34;&gt;dependency-check-ant github page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;For installation to pass, you must have the following components installed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Java: &lt;code&gt;java -version&lt;/code&gt; 11.0&lt;/li&gt; &#xA; &lt;li&gt;Maven: &lt;code&gt;mvn -version&lt;/code&gt; 3.5.0 and higher&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Tests cases require:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;dotnet core version 8.0&lt;/li&gt; &#xA; &lt;li&gt;Go: &lt;code&gt;go version&lt;/code&gt; 1.12 and higher&lt;/li&gt; &#xA; &lt;li&gt;Ruby &lt;a href=&#34;https://github.com/rubysec/bundler-audit#install&#34;&gt;bundler-audit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://classic.yarnpkg.com/en/docs/install/&#34;&gt;Yarn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pnpm.io/installation&#34;&gt;pnpm&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development Usage&lt;/h2&gt; &#xA;&lt;p&gt;The following instructions outline how to compile and use the current snapshot. While every intention is to maintain a stable snapshot it is recommended that the release versions listed above be used.&lt;/p&gt; &#xA;&lt;p&gt;The repository has some large files due to test resources. The team has tried to clean up the history as much as possible. However, it is recommended that you perform a shallow clone to save yourself time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --depth 1 https://github.com/dependency-check/DependencyCheck.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On *nix&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mvn -s settings.xml install&#xA;$ ./cli/target/release/bin/dependency-check.sh -h&#xA;$ ./cli/target/release/bin/dependency-check.sh --out . --scan ./src/test/resources&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; mvn -s settings.xml install&#xA;&amp;gt; .\cli\target\release\bin\dependency-check.bat -h&#xA;&amp;gt; .\cli\target\release\bin\dependency-check.bat --out . --scan ./src/test/resources&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then load the resulting &#39;dependency-check-report.html&#39; into your favorite browser.&lt;/p&gt; &#xA;&lt;h4&gt;Building without running tests&lt;/h4&gt; &#xA;&lt;p&gt;To speed up your turnaround cycle times, you can also compile without running the tests each time:&lt;br&gt; &lt;code&gt;mvn -s settings.xml install -DskipTests=true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please remember to at least run the tests once before opening the PR. :)&lt;/p&gt; &#xA;&lt;h3&gt;IntelliJ Idea&lt;/h3&gt; &#xA;&lt;p&gt;To be able to debug your tests in IntelliJ Idea, you can introduce a maven configuration that executes your test and enables debugging with breakpoints etc.&lt;br&gt; Basically, you do what´s described in &lt;a href=&#34;https://www.jetbrains.com/help/idea/work-with-tests-in-maven.html#run_single_test&#34;&gt;https://www.jetbrains.com/help/idea/work-with-tests-in-maven.html#run_single_test&lt;/a&gt; and set the &lt;code&gt;forkCount&lt;/code&gt; to 0, otherwise debugging won´t work.&lt;/p&gt; &#xA;&lt;p&gt;Step by step:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Run -&amp;gt; Edit Configurations&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;+ (Add new configuration) -&amp;gt; Maven&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Give the Configuration a name, e.g. &lt;code&gt;Run tests&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Choose working directory, e.g. &lt;code&gt;core&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;In &lt;code&gt;command line&lt;/code&gt;, enter &lt;code&gt;-DforkCount=0 -f pom.xml -s ../settings.xml test&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Press &lt;code&gt;OK&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Run -&amp;gt; Debug&lt;/code&gt;, then choose the newly created run configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;IntelliJ will now execute the test run for the &lt;code&gt;core&lt;/code&gt; subproject with enabled debugging. Breakpoints set anywhere in code should work.&lt;/p&gt; &#xA;&lt;h4&gt;Only test one function or one class&lt;/h4&gt; &#xA;&lt;p&gt;If you would like to speed up your turnaround cycle times, you can also just test one function or one test class.&lt;br&gt; This works by adding &lt;code&gt;-Dtest=MyTestClass&lt;/code&gt; or &lt;code&gt;-Dtest=MyTestClass#myTestFunction&lt;/code&gt; to the run configuration. The complete command line in the run configuration then would be:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;-Dtest=MyTestClass#myTestFunction -DforkCount=0 -f pom.xml -s ../settings.xml test&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;In the following example it is assumed that the source to be checked is in the current working directory and the reports will be written to &lt;code&gt;$(pwd)/odc-reports&lt;/code&gt;. Persistent data and cache directories are used, allowing you to destroy the container after running.&lt;/p&gt; &#xA;&lt;p&gt;For Linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/sh&#xA;&#xA;DC_VERSION=&#34;latest&#34;&#xA;DC_DIRECTORY=$HOME/OWASP-Dependency-Check&#xA;DC_PROJECT=&#34;dependency-check scan: $(pwd)&#34;&#xA;DATA_DIRECTORY=&#34;$DC_DIRECTORY/data&#34;&#xA;CACHE_DIRECTORY=&#34;$DC_DIRECTORY/data/cache&#34;&#xA;&#xA;if [ ! -d &#34;$DATA_DIRECTORY&#34; ]; then&#xA;    echo &#34;Initially creating persistent directory: $DATA_DIRECTORY&#34;&#xA;    mkdir -p &#34;$DATA_DIRECTORY&#34;&#xA;fi&#xA;if [ ! -d &#34;$CACHE_DIRECTORY&#34; ]; then&#xA;    echo &#34;Initially creating persistent directory: $CACHE_DIRECTORY&#34;&#xA;    mkdir -p &#34;$CACHE_DIRECTORY&#34;&#xA;fi&#xA;&#xA;# Make sure we are using the latest version&#xA;docker pull owasp/dependency-check:$DC_VERSION&#xA;&#xA;docker run --rm \&#xA;    -e user=$USER \&#xA;    -u $(id -u ${USER}):$(id -g ${USER}) \&#xA;    --volume $(pwd):/src:z \&#xA;    --volume &#34;$DATA_DIRECTORY&#34;:/usr/share/dependency-check/data:z \&#xA;    --volume $(pwd)/odc-reports:/report:z \&#xA;    owasp/dependency-check:$DC_VERSION \&#xA;    --scan /src \&#xA;    --format &#34;ALL&#34; \&#xA;    --project &#34;$DC_PROJECT&#34; \&#xA;    --out /report&#xA;    # Use suppression like this: (where /src == $pwd)&#xA;    # --suppression &#34;/src/security/dependency-check-suppression.xml&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;@echo off&#xA;&#xA;set DC_VERSION=&#34;latest&#34;&#xA;set DC_DIRECTORY=%USERPROFILE%\OWASP-Dependency-Check&#xA;SET DC_PROJECT=&#34;dependency-check scan: %CD%&#34;&#xA;set DATA_DIRECTORY=&#34;%DC_DIRECTORY%\data&#34;&#xA;set CACHE_DIRECTORY=&#34;%DC_DIRECTORY%\data\cache&#34;&#xA;&#xA;IF NOT EXIST %DATA_DIRECTORY% (&#xA;    echo Initially creating persistent directory: %DATA_DIRECTORY%&#xA;    mkdir %DATA_DIRECTORY%&#xA;)&#xA;IF NOT EXIST %CACHE_DIRECTORY% (&#xA;    echo Initially creating persistent directory: %CACHE_DIRECTORY%&#xA;    mkdir %CACHE_DIRECTORY%&#xA;)&#xA;&#xA;rem Make sure we are using the latest version&#xA;docker pull owasp/dependency-check:%DC_VERSION%&#xA;&#xA;docker run --rm ^&#xA;    --volume %CD%:/src ^&#xA;    --volume %DATA_DIRECTORY%:/usr/share/dependency-check/data ^&#xA;    --volume %CD%/odc-reports:/report ^&#xA;    owasp/dependency-check:%DC_VERSION% ^&#xA;    --scan /src ^&#xA;    --format &#34;ALL&#34; ^&#xA;    --project &#34;%DC_PROJECT%&#34; ^&#xA;    --out /report&#xA;    rem Use suppression like this: (where /src == %CD%)&#xA;    rem --suppression &#34;/src/security/dependency-check-suppression.xml&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building From Source&lt;/h2&gt; &#xA;&lt;p&gt;To build dependency-check (using Java 11) run the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mvn -s settings.xml install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running dependency-check on dependency-check&lt;/h2&gt; &#xA;&lt;p&gt;Dependency-check references several vulnerable dependencies that are never used except as test resources. All of these optional test dependencies are included in the &lt;code&gt;test-dependencies&lt;/code&gt; profile. To run dependency-check against itself simple exclude the &lt;code&gt;test-dependencies&lt;/code&gt; profile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mvn org.owasp:dependency-check-maven:aggregate -P-test-dependencies -DskipProvidedScope=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building the documentation&lt;/h2&gt; &#xA;&lt;p&gt;The documentation on the &lt;a href=&#34;https://dependency-check.github.io/DependencyCheck/&#34;&gt;github pages&lt;/a&gt; is generated from this repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mvn -s settings.xml site  site:staging&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once done, point your browser to &lt;code&gt;./target/staging/index.html&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building The Docker Image&lt;/h2&gt; &#xA;&lt;p&gt;To build dependency-check docker image run the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mvn -s settings.xml install&#xA;./build-docker.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Permission to modify and redistribute is granted under the terms of the Apache 2.0 license. See the &lt;a href=&#34;https://raw.githubusercontent.com/dependency-check/DependencyCheck/main/LICENSE.txt&#34;&gt;LICENSE.txt&lt;/a&gt; file for the full license.&lt;/p&gt; &#xA;&lt;p&gt;Dependency-Check makes use of several other open source libraries. Please see the &lt;a href=&#34;https://github.com/dependency-check/DependencyCheck/raw/main/NOTICE.txt&#34;&gt;NOTICE.txt&lt;/a&gt; file for more information.&lt;/p&gt; &#xA;&lt;p&gt;This product uses the NVD API but is not endorsed or certified by the NVD.&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2012-2024 Jeremy Long. All Rights Reserved.&lt;/p&gt;</summary>
  </entry>
</feed>