<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-22T01:30:47Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>spring-projects/spring-integration</title>
    <updated>2024-08-22T01:30:47Z</updated>
    <id>tag:github.com,2024-08-22:/spring-projects/spring-integration</id>
    <link href="https://github.com/spring-projects/spring-integration" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Spring Integration provides an extension of the Spring programming model to support the well-known Enterprise Integration Patterns (EIP)&lt;/p&gt;&lt;hr&gt;&lt;img align=&#34;right&#34; width=&#34;250&#34; height=&#34;250&#34; src=&#34;https://spring.io/img/projects/spring-integration.svg?v=2&#34;&gt; &#xA;&lt;h1&gt;Spring Integration&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/spring-projects/spring-integration/actions/workflows/ci-snapshot.yml&#34;&gt;&lt;img src=&#34;https://github.com/spring-projects/spring-integration/actions/workflows/ci-snapshot.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ge.spring.io/scans?search.rootProjectNames=spring-integration&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Revved%20up%20by-Develocity-06A0CE?logo=Gradle&amp;amp;labelColor=02303A&#34; alt=&#34;Revved up by Develocity&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Extends the Spring programming model to support the well-known Enterprise Integration Patterns. Spring Integration enables lightweight messaging within Spring-based applications and supports integration with external systems via declarative adapters. Those adapters provide a higher-level of abstraction over Spring’s support for remoting, messaging, and scheduling. Spring Integration’s primary goal is to provide a simple model for building enterprise integration solutions while maintaining the separation of concerns that is essential for producing maintainable, testable code.&lt;/p&gt; &#xA;&lt;p&gt;Using the Spring Framework encourages developers to code using interfaces and use dependency injection (DI) to provide a Plain Old Java Object (POJO) with the dependencies it needs to perform its tasks. Spring Integration takes this concept one step further, where POJOs are wired together using a messaging paradigm and individual components may not be aware of other components in the application. Such an application is built by assembling fine-grained reusable components to form a higher level of functionality. With careful design, these flows can be modularized and also reused at an even higher level.&lt;/p&gt; &#xA;&lt;p&gt;In addition to wiring together fine-grained components, Spring Integration provides a wide selection of channel adapters and gateways to communicate with external systems. Channel Adapters are used for one-way integration (send or receive); gateways are used for request/reply scenarios (inbound or outbound).&lt;/p&gt; &#xA;&lt;h1&gt;Installation and Getting Started&lt;/h1&gt; &#xA;&lt;p&gt;First, you need dependencies in your POM/Gradle:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;org.springframework.integration&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;spring-integration-core&amp;lt;/artifactId&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which is also pulled transitively if you deal with target protocol channel adapters. For example for Apache Kafka support you need just this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;org.springframework.integration&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;spring-integration-kafka&amp;lt;/artifactId&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For annotations or Java DSL configuration you need to &lt;em&gt;enable&lt;/em&gt; Spring Integration in the application context:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@EnableIntegration&#xA;@Configuration&#xA;public class ExampleConfiguration {&#xA;    &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Code of Conduct&lt;/h1&gt; &#xA;&lt;p&gt;Please see our &lt;a href=&#34;https://github.com/spring-projects/.github/raw/main/CODE_OF_CONDUCT.md&#34;&gt;Code of conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Reporting Security Vulnerabilities&lt;/h1&gt; &#xA;&lt;p&gt;Please see our &lt;a href=&#34;https://github.com/spring-projects/spring-integration/security/policy&#34;&gt;Security policy&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;The Spring Integration maintains reference documentation (&lt;a href=&#34;https://docs.spring.io/spring-integration/reference/&#34;&gt;published&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/spring-projects/spring-integration/main/src/reference/antora&#34;&gt;source&lt;/a&gt;), GitHub &lt;a href=&#34;https://github.com/spring-projects/spring-integration/wiki&#34;&gt;wiki pages&lt;/a&gt;, and an &lt;a href=&#34;https://docs.spring.io/spring-integration/docs/current/api/&#34;&gt;API reference&lt;/a&gt;. There are also &lt;a href=&#34;https://spring.io/guides&#34;&gt;guides and tutorials&lt;/a&gt; across Spring projects.&lt;/p&gt; &#xA;&lt;h1&gt;Checking out and Building&lt;/h1&gt; &#xA;&lt;p&gt;To check out the project and build from the source, do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git://github.com/spring-projects/spring-integration.git&#xA;cd spring-integration&#xA;./gradlew clean test&#xA;&#xA;or&#xA;&#xA;./gradlew clean testAll&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The latter runs additional tests (those annotated with &lt;code&gt;@LongRunningIntegrationTest&lt;/code&gt;); it is a more thorough test but takes quite a lot longer to run.&lt;/p&gt; &#xA;&lt;p&gt;The test results are captured in &lt;code&gt;build/reports/tests/test&lt;/code&gt; (or &lt;code&gt;.../testAll&lt;/code&gt;) under each module (in HTML format).&lt;/p&gt; &#xA;&lt;p&gt;Add &lt;code&gt;--continue&lt;/code&gt; to the command to perform a complete build, even if there are failing tests in some modules; otherwise the build will stop after the current module(s) being built are completed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; While Spring Integration runs with Java SE 17 or higher, a Java 17 compiler is required to build the project.&lt;/p&gt; &#xA;&lt;p&gt;To build and install jars into your local Maven cache:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew build publishToMavenLocal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build api Javadoc (results will be in &lt;code&gt;build/api&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew api&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build the reference documentation (results will be in &lt;code&gt;build/site&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew antora&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build complete distribution including &lt;code&gt;-dist&lt;/code&gt;, &lt;code&gt;-docs&lt;/code&gt;, and &lt;code&gt;-schema&lt;/code&gt; zip files (results will be in &lt;code&gt;build/distributions&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew dist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Using Eclipse or Spring Tool Suite (with BuildShip Plugin)&lt;/h1&gt; &#xA;&lt;p&gt;If you have the BuildShip plugin installed,&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;File -&amp;gt; Import -&amp;gt; Gradle -&amp;gt; Existing Gradle Project&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Using Eclipse or Spring Tool Suite (when the BuildShip Plugin is not installed)&lt;/h1&gt; &#xA;&lt;p&gt;To generate Eclipse metadata (.classpath and .project files, etc.), do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew eclipse&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once complete, you may then import the projects into Eclipse as usual:&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;File -&amp;gt; Import -&amp;gt; General -&amp;gt; Existing projects into workspace&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Browse to the &lt;em&gt;&#39;spring-integration&#39;&lt;/em&gt; root directory. All projects should import free of errors.&lt;/p&gt; &#xA;&lt;h1&gt;Using IntelliJ IDEA&lt;/h1&gt; &#xA;&lt;p&gt;To import the project into IntelliJ IDEA:&lt;/p&gt; &#xA;&lt;p&gt;File -&amp;gt; Open... -&amp;gt; and select build.gradle from spring-integration project root directory&lt;/p&gt; &#xA;&lt;h1&gt;Guidelines&lt;/h1&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://github.com/spring-projects/spring-integration/raw/main/CONTRIBUTING.adoc&#34;&gt;Contributor Guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Resources&lt;/h1&gt; &#xA;&lt;p&gt;For more information, please visit the Spring Integration website at: &lt;a href=&#34;https://spring.io/projects/spring-integration/&#34;&gt;https://spring.io/projects/spring-integration&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>