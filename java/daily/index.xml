<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-27T01:33:16Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>xerial/snappy-java</title>
    <updated>2023-09-27T01:33:16Z</updated>
    <id>tag:github.com,2023-09-27:/xerial/snappy-java</id>
    <link href="https://github.com/xerial/snappy-java" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Snappy compressor/decompressor for Java&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;snappy-java &lt;a href=&#34;https://travis-ci.org/xerial/snappy-java&#34;&gt;&lt;img src=&#34;https://travis-ci.org/xerial/snappy-java.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/org.xerial.snappy/snappy-java/&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/org.xerial.snappy/snappy-java/badge.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://javadoc.io/doc/org.xerial.snappy/snappy-java&#34;&gt;&lt;img src=&#34;https://javadoc.io/badge2/org.xerial.snappy/snappy-java/javadoc.svg?sanitize=true&#34; alt=&#34;Javadoc&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;snappy-java is a Java port of the &lt;a href=&#34;https://github.com/google/snappy&#34;&gt;snappy&lt;/a&gt;, a fast C++ compresser/decompresser developed by Google.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fast compression/decompression around 200~400MB/sec.&lt;/li&gt; &#xA; &lt;li&gt;Less memory usage. SnappyOutputStream uses only 32KB+ in default.&lt;/li&gt; &#xA; &lt;li&gt;JNI-based implementation to achieve comparable performance to the native C++ version. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Although snappy-java uses JNI, it can be used safely with multiple class loaders (e.g. Tomcat, etc.).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Compression/decompression of Java primitive arrays (&lt;code&gt;float[]&lt;/code&gt;, &lt;code&gt;double[]&lt;/code&gt;, &lt;code&gt;int[]&lt;/code&gt;, &lt;code&gt;short[]&lt;/code&gt;, &lt;code&gt;long[]&lt;/code&gt;, etc.) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;To improve the compression ratios of these arrays, you can use a fast data-rearrangement implementation (&lt;a href=&#34;https://oss.sonatype.org/service/local/repositories/releases/archive/org/xerial/snappy/snappy-java/1.1.8/snappy-java-1.1.8-javadoc.jar/!/org/xerial/snappy/BitShuffle.html&#34;&gt;&lt;code&gt;BitShuffle&lt;/code&gt;&lt;/a&gt;) before compression&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Portable across various operating systems; Snappy-java contains native libraries built for Window/Mac/Linux, etc. snappy-java loads one of these libraries according to your machine environment (It looks system properties, &lt;code&gt;os.name&lt;/code&gt; and &lt;code&gt;os.arch&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Simple usage. Add the snappy-java-(version).jar file to your classpath. Then call compression/decompression methods in &lt;code&gt;org.xerial.snappy.Snappy&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/snappy/raw/master/framing_format.txt&#34;&gt;Framing-format support&lt;/a&gt; (Since 1.1.0 version)&lt;/li&gt; &#xA; &lt;li&gt;OSGi support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License Version 2.0&lt;/a&gt;. Free for both commercial and non-commercial use.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Snappy&#39;s main target is very high-speed compression/decompression with reasonable compression size. So the compression ratio of snappy-java is modest and about the same as &lt;code&gt;LZF&lt;/code&gt; (ranging 20%-100% according to the dataset).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Here are some &lt;a href=&#34;https://github.com/ning/jvm-compressor-benchmark/wiki&#34;&gt;benchmark results&lt;/a&gt;, comparing snappy-java and the other compressors &lt;code&gt;LZO-java&lt;/code&gt;/&lt;code&gt;LZF&lt;/code&gt;/&lt;code&gt;QuickLZ&lt;/code&gt;/&lt;code&gt;Gzip&lt;/code&gt;/&lt;code&gt;Bzip2&lt;/code&gt;. Thanks &lt;a href=&#34;http://twitter.com/#!/cowtowncoder&#34;&gt;Tatu Saloranta @cotowncoder&lt;/a&gt; for providing the benchmark suite.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The benchmark result indicates snappy-java is the fastest compressor/decompressor in Java: &lt;a href=&#34;https://ning.github.io/jvm-compressor-benchmark/results/canterbury-roundtrip-2011-07-28/index.html&#34;&gt;https://ning.github.io/jvm-compressor-benchmark/results/canterbury-roundtrip-2011-07-28/index.html&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The decompression speed is twice as fast as the others: &lt;a href=&#34;https://ning.github.io/jvm-compressor-benchmark/results/canterbury-uncompress-2011-07-28/index.html&#34;&gt;https://ning.github.io/jvm-compressor-benchmark/results/canterbury-uncompress-2011-07-28/index.html&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/org.xerial.snappy/snappy-java/&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/org.xerial.snappy/snappy-java/badge.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://javadoc.io/doc/org.xerial.snappy/snappy-java&#34;&gt;&lt;img src=&#34;https://javadoc.io/badge2/org.xerial.snappy/snappy-java/javadoc.svg?sanitize=true&#34; alt=&#34;Javadoc&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xerial/snappy-java/master/Milestone.md&#34;&gt;Release Notes&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The current stable version is available from here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Release version: &lt;a href=&#34;https://repo1.maven.org/maven2/org/xerial/snappy/snappy-java/&#34;&gt;https://repo1.maven.org/maven2/org/xerial/snappy/snappy-java/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Snapshot version (the latest beta version): &lt;a href=&#34;https://oss.sonatype.org/content/repositories/snapshots/org/xerial/snappy/snappy-java/&#34;&gt;https://oss.sonatype.org/content/repositories/snapshots/org/xerial/snappy/snappy-java/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using with Maven&lt;/h3&gt; &#xA;&lt;p&gt;Snappy-java is available from Maven&#39;s central repository. Add the following dependency to your pom.xml:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;&#xA;  &amp;lt;groupId&amp;gt;org.xerial.snappy&amp;lt;/groupId&amp;gt;&#xA;  &amp;lt;artifactId&amp;gt;snappy-java&amp;lt;/artifactId&amp;gt;&#xA;  &amp;lt;version&amp;gt;(version)&amp;lt;/version&amp;gt;&#xA;  &amp;lt;type&amp;gt;jar&amp;lt;/type&amp;gt;&#xA;  &amp;lt;scope&amp;gt;compile&amp;lt;/scope&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using with sbt&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;libraryDependencies += &#34;org.xerial.snappy&#34; % &#34;snappy-java&#34; % &#34;(version)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;First, import &lt;code&gt;org.xerial.snapy.Snappy&lt;/code&gt; in your Java code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import org.xerial.snappy.Snappy;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then use &lt;code&gt;Snappy.compress(byte[])&lt;/code&gt; and &lt;code&gt;Snappy.uncompress(byte[])&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String input = &#34;Hello snappy-java! Snappy-java is a JNI-based wrapper of &#34;&#xA;     + &#34;Snappy, a fast compresser/decompresser.&#34;;&#xA;byte[] compressed = Snappy.compress(input.getBytes(&#34;UTF-8&#34;));&#xA;byte[] uncompressed = Snappy.uncompress(compressed);&#xA;&#xA;String result = new String(uncompressed, &#34;UTF-8&#34;);&#xA;System.out.println(result);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition, high-level methods (&lt;code&gt;Snappy.compress(String)&lt;/code&gt;, &lt;code&gt;Snappy.compress(float[] ..)&lt;/code&gt; etc. ) and low-level ones (e.g. &lt;code&gt;Snappy.rawCompress(.. )&lt;/code&gt;, &lt;code&gt;Snappy.rawUncompress(..)&lt;/code&gt;, etc.), which minimize memory copies, can be used.&lt;/p&gt; &#xA;&lt;h3&gt;Stream-based API&lt;/h3&gt; &#xA;&lt;p&gt;Stream-based compressor/decompressor &lt;code&gt;SnappyOutputStream&lt;/code&gt;/&lt;code&gt;SnappyInputStream&lt;/code&gt; are also available for reading/writing large data sets. &lt;code&gt;SnappyFramedOutputStream&lt;/code&gt;/&lt;code&gt;SnappyFramedInputStream&lt;/code&gt; can be used for the &lt;a href=&#34;https://github.com/google/snappy/raw/master/framing_format.txt&#34;&gt;framing format&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See also &lt;a href=&#34;https://oss.sonatype.org/service/local/repositories/releases/archive/org/xerial/snappy/snappy-java/1.1.3-M1/snappy-java-1.1.3-M1-javadoc.jar/!/index.html&#34;&gt;Javadoc API&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Compatibility Notes&lt;/h4&gt; &#xA;&lt;p&gt;The original Snappy format definition did not define a file format. It later added a &#34;framing&#34; format to define a file format, but by this point major software was already using an industry standard instead -- represented in this library by the &lt;code&gt;SnappyOutputStream&lt;/code&gt; and &lt;code&gt;SnappyInputStream&lt;/code&gt; methods.&lt;/p&gt; &#xA;&lt;p&gt;For interoperability with other libraries, check that compatible formats are used. Note that not all libraries support all variants.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;SnappyOutputStream&lt;/code&gt; and &lt;code&gt;SnappyInputStream&lt;/code&gt; use &lt;code&gt;[magic header:16 bytes]([block size:int32][compressed data:byte array])*&lt;/code&gt; format. You can read the result of &lt;code&gt;Snappy.compress&lt;/code&gt; with &lt;code&gt;SnappyInputStream&lt;/code&gt;, but you cannot read the compressed data generated by &lt;code&gt;SnappyOutputStream&lt;/code&gt; with &lt;code&gt;Snappy.uncompress&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SnappyHadoopCompatibleOutputStream&lt;/code&gt; does not emit a file header but write out the current block size as a preemble to each block&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Data format compatibility matrix:&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Write\Read&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;code&gt;Snappy.uncompress&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;code&gt;SnappyInputStream&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;code&gt;SnappyFramedInputStream&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;code&gt;org.apache.hadoop.io.compress.SnappyCodec&lt;/code&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Snappy.compress&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ok&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ok&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;x&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SnappyOutputStream&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;x&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ok&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;x&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SnappyFramedOutputStream&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;x&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;x&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ok&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SnappyHadoopCompatibleOutputStream&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;x&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;x&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;x&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ok&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;BitShuffle API (Since 1.1.3-M2)&lt;/h3&gt; &#xA;&lt;p&gt;BitShuffle is an algorithm that reorders data bits (shuffle) for efficient compression (e.g., a sequence of integers, float values, etc.). To use BitShuffle routines, import &lt;code&gt;org.xerial.snapy.BitShuffle&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import org.xerial.snappy.BitShuffle;&#xA;&#xA;int[] data = new int[] {1, 3, 34, 43, 34};&#xA;byte[] shuffledByteArray = BitShuffle.shuffle(data);&#xA;byte[] compressed = Snappy.compress(shuffledByteArray);&#xA;byte[] uncompressed = Snappy.uncompress(compressed);&#xA;int[] result = BitShuffle.unshuffleIntArray(uncompress);&#xA;&#xA;System.out.println(result);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Shuffling and unshuffling of primitive arrays (e.g., &lt;code&gt;short[]&lt;/code&gt;, &lt;code&gt;long[]&lt;/code&gt;, &lt;code&gt;float[]&lt;/code&gt;, &lt;code&gt;double[]&lt;/code&gt;, etc.) are supported. See &lt;a href=&#34;http://static.javadoc.io/org.xerial.snappy/snappy-java/1.1.3-M1/org/xerial/snappy/BitShuffle.html&#34;&gt;Javadoc&lt;/a&gt; for the details.&lt;/p&gt; &#xA;&lt;h3&gt;Setting classpath&lt;/h3&gt; &#xA;&lt;p&gt;If you have snappy-java-(VERSION).jar in the current directory, use &lt;code&gt;-classpath&lt;/code&gt; option as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ javac -classpath &#34;.;snappy-java-(VERSION).jar&#34; Sample.java  # in Windows&#xA;or&#xA;$ javac -classpath &#34;.:snappy-java-(VERSION).jar&#34; Sample.java  # in Mac or Linux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Public discussion group&lt;/h2&gt; &#xA;&lt;p&gt;Post bug reports or feature request to the Issue Tracker: &lt;a href=&#34;https://github.com/xerial/snappy-java/issues&#34;&gt;https://github.com/xerial/snappy-java/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Public discussion forum is here: &lt;a href=&#34;http://groups.google.com/group/xerial?hl=en&#34;&gt;Xerial Public Discussion Group&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;For developers&lt;/h2&gt; &#xA;&lt;p&gt;snappy-java uses sbt (simple build tool for Scala) as a build tool. Here is a simple usage&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./sbt            # enter sbt console&#xA;&amp;gt; ~test            # run tests upon source code change&#xA;&amp;gt; ~testOnly        # run tests that matches a given name pattern  &#xA;&amp;gt; publishM2        # publish jar to $HOME/.m2/repository&#xA;&amp;gt; package          # create jar file&#xA;&amp;gt; findbugs         # Produce findbugs report in target/findbugs&#xA;&amp;gt; jacoco:cover     # Report the code coverage of tests to target/jacoco folder    &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to see detailed debug messages, launch sbt with &lt;code&gt;-Dloglevel=debug&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./sbt -Dloglevel=debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the details of sbt usage, see my blog post: &lt;a href=&#34;http://xerial.org/blog/2014/03/24/sbt/&#34;&gt;Building Java Projects with sbt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Building from the source code&lt;/h3&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/xerial/snappy-java/raw/master/BUILD.md&#34;&gt;build instruction&lt;/a&gt;. Building from the source code is an option when your OS platform and CPU architecture is not supported. To build snappy-java, you need Git, JDK (1.6 or higher), g++ compiler (mingw in Windows) etc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/xerial/snappy-java.git&#xA;$ cd snappy-java&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When building on Solaris, use &lt;code&gt;gmake&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A file &lt;code&gt;target/snappy-java-$(version).jar&lt;/code&gt; is the product additionally containing the native library built for your platform.&lt;/p&gt; &#xA;&lt;h3&gt;Creating a new release&lt;/h3&gt; &#xA;&lt;p&gt;GitHub action [https://github.com/xerial/snappy-java/blob/master/.github/workflows/release.yml] will publish a new relase to Maven Central (Sonatype) when a new tag vX.Y.Z is pushed.&lt;/p&gt; &#xA;&lt;h2&gt;Miscellaneous Notes&lt;/h2&gt; &#xA;&lt;h3&gt;Using snappy-java with Tomcat 6 (or higher) Web Server&lt;/h3&gt; &#xA;&lt;p&gt;Simply put the snappy-java&#39;s jar to WEB-INF/lib folder of your web application. Usual JNI-library specific problem no longer exists since snappy-java version 1.0.3 or higher can be loaded by multiple class loaders.&lt;/p&gt; &#xA;&lt;h3&gt;Configure snappy-java using property file&lt;/h3&gt; &#xA;&lt;p&gt;Prepare org-xerial-snappy.properties file (under the root path of your library) in Java&#39;s property file format. Here is a list of the available properties:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;org.xerial.snappy.lib.path (directory containing a snappyjava&#39;s native library)&lt;/li&gt; &#xA; &lt;li&gt;org.xerial.snappy.lib.name (library file name)&lt;/li&gt; &#xA; &lt;li&gt;org.xerial.snappy.tempdir (temporary directory to extract a native library bundled in snappy-java)&lt;/li&gt; &#xA; &lt;li&gt;org.xerial.snappy.use.systemlib (if this value is true, use system installed libsnappyjava.so looking the path specified by java.library.path)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Snappy-java is developed by &lt;a href=&#34;http://www.xerial.org/leo&#34;&gt;Taro L. Saito&lt;/a&gt;. Twitter &lt;a href=&#34;http://twitter.com/#!/taroleo&#34;&gt;@taroleo&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pedroSG94/RootEncoder</title>
    <updated>2023-09-27T01:33:16Z</updated>
    <id>tag:github.com,2023-09-27:/pedroSG94/RootEncoder</id>
    <link href="https://github.com/pedroSG94/RootEncoder" rel="alternate"></link>
    <summary type="html">&lt;p&gt;RootEncoder for Android (rtmp-rtsp-stream-client-java) is a stream encoder to push video/audio to media servers using protocols RTMP, RTSP and SRT with all code written in Java/Kotlin&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RootEncoder for Android&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://android-arsenal.com/details/1/5333&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Android%20Arsenal-rtmp%20rtsp%20stream%20client%20java-green.svg?style=true&#34; alt=&#34;Android Arsenal&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://jitpack.io/#pedroSG94/RootEncoder&#34;&gt;&lt;img src=&#34;https://jitpack.io/v/pedroSG94/RootEncoder.svg?sanitize=true&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pedroSG94.github.io/RootEncoder&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/library-documentation-orange&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;strong&gt;Sponsored with 💖 &amp;nbsp; by&lt;/strong&gt;&lt;br&gt; &lt;a href=&#34;https://getstream.io/?utm_source=github.com/pedroSG94/rtmp-rtsp-stream-client-java&amp;amp;utm_medium=github&amp;amp;utm_campaign=oss_sponsorship&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://stream-blog-v2.imgix.net/blog/wp-content/uploads/f7401112f41742c4e173c30d4f318cb8/stream_logo_white.png?w=350&#34; alt=&#34;Stream Chat&#34; style=&#34;margin: 8px&#34;&gt; &lt;/a&gt; &lt;br&gt; Enterprise Grade APIs for Feeds &amp;amp; Chat. &lt;a href=&#34;https://getstream.io/tutorials/android-chat/?utm_source=https://github.com/pedroSG94/rtmp-rtsp-stream-client-java&amp;amp;utm_medium=github&amp;amp;utm_content=developer&amp;amp;utm_term=java&#34; target=&#34;_blank&#34;&gt;Try the Android Chat tutorial&lt;/a&gt; 💬 &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;RootEncoder (rtmp-rtsp-stream-client-java) is a stream encoder to push video/audio to media servers using protocols RTMP, RTSP and SRT with all code written in Java/Kotlin&lt;/p&gt; &#xA;&lt;p&gt;Note: The library was renamed from rtmp-rtsp-stream-client-java to RootEncoder after add SRT protocol because the name has no sense anymore&lt;/p&gt; &#xA;&lt;p&gt;If you need a player see this project:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pedroSG94/vlc-example-streamplayer&#34;&gt;https://github.com/pedroSG94/vlc-example-streamplayer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;iOS version (under develop):&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pedroSG94/rtmp-rtsp-stream-client-swift&#34;&gt;https://github.com/pedroSG94/rtmp-rtsp-stream-client-swift&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Wiki&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pedroSG94/RootEncoder/wiki&#34;&gt;https://github.com/pedroSG94/RootEncoder/wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Permissions:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;uses-permission android:name=&#34;android.permission.INTERNET&#34; /&amp;gt;&#xA;&amp;lt;uses-permission android:name=&#34;android.permission.RECORD_AUDIO&#34; /&amp;gt;&#xA;&amp;lt;uses-permission android:name=&#34;android.permission.CAMERA&#34; /&amp;gt;&#xA;&amp;lt;!--Only for record video/audio--&amp;gt;&#xA;&amp;lt;uses-permission android:name=&#34;android.permission.WRITE_EXTERNAL_STORAGE&#34; /&amp;gt;&#xA;&amp;lt;!--Optional for play store--&amp;gt;&#xA;&amp;lt;uses-feature android:name=&#34;android.hardware.camera&#34; android:required=&#34;false&#34; /&amp;gt;&#xA;&amp;lt;uses-feature android:name=&#34;android.hardware.camera.autofocus&#34; android:required=&#34;false&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compile&lt;/h2&gt; &#xA;&lt;p&gt;To use this library in your project with gradle add this to your build.gradle:&lt;/p&gt; &#xA;&lt;h3&gt;Version 2.2.6 or less&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;allprojects {&#xA;  repositories {&#xA;    maven { url &#39;https://jitpack.io&#39; }&#xA;  }&#xA;}&#xA;dependencies {&#xA;  implementation &#39;com.github.pedroSG94.rtmp-rtsp-stream-client-java:rtplibrary:2.2.6&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Version 2.2.7 or more&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;allprojects {&#xA;  repositories {&#xA;    maven { url &#39;https://jitpack.io&#39; }&#xA;  }&#xA;}&#xA;dependencies {&#xA;  implementation &#39;com.github.pedroSG94.RootEncoder:library:2.2.8&#39;&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Android min API 16.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Encoder:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support &lt;a href=&#34;https://developer.android.com/reference/android/hardware/Camera.html&#34;&gt;camera1&lt;/a&gt; and &lt;a href=&#34;https://developer.android.com/reference/android/hardware/camera2/package-summary.html&#34;&gt;camera2&lt;/a&gt; API&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Encoder type buffer to buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Encoder type surface to buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Audio noise suppressor.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Audio echo cancellation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Disable/Enable video and audio while streaming.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Switch camera while streaming.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Change video bitrate while streaming (API 19+).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; H264, H265 and AAC hardware/software encoding.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Force video and audio Codec to use hardware/software encoding (Not recommended).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Record MP4 file while streaming (API 18+).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Set Image, Gif or Text to stream on real time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; OpenGL real time filters. &lt;a href=&#34;https://github.com/pedroSG94/RootEncoder/wiki/Real-time-filters&#34;&gt;More info&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Stream from video and audio files like mp4, webm, mp3, etc (Limited by device decoders). &lt;a href=&#34;https://github.com/pedroSG94/RootEncoder/wiki/Stream-from-file&#34;&gt;More info&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Stream device screen (API 21+).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;RTMP:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Get upload bandwidth used.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; RTSP auth (adobe and llnw).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; H264, H265 (&lt;a href=&#34;https://github.com/veovera/enhanced-rtmp/tree/main&#34;&gt;Using RTMP enhanced&lt;/a&gt;) and AAC support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; RTMPS (under TLS)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; RTMPT and RTMPTS (tunneled and tunneled under TLS)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; AMF0&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; AMF3&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;RTSP:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Get upload bandwidth used.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; RTMP auth (basic and digest).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; H264, H265 and AAC support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; TCP/UDP.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; RTSPS.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;SRT (beta):&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Get upload bandwidth used.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; H264, H265 and AAC support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Resend lost packets&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; SRT auth.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Encrypt&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://haivision.github.io/srt-rfc/draft-sharabayko-srt.html&#34;&gt;https://haivision.github.io/srt-rfc/draft-sharabayko-srt.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Other related projects:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pedroSG94/RTSP-Server&#34;&gt;https://github.com/pedroSG94/RTSP-Server&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pedroSG94/AndroidReStreamer&#34;&gt;https://github.com/pedroSG94/AndroidReStreamer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pedroSG94/Stream-USB-test&#34;&gt;https://github.com/pedroSG94/Stream-USB-test&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;3rd party projects:&lt;/h3&gt; &#xA;&lt;p&gt;Projects related with the library developed by other users. Contact with user owner if you have any problem or question.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FunnyDevs/rtmp-rtsp-stream-client-java-recordcontrollers&#34;&gt;https://github.com/FunnyDevs/rtmp-rtsp-stream-client-java-recordcontrollers&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Real time filters:&lt;/h2&gt; &#xA;&lt;h3&gt;NOTE:&lt;/h3&gt; &#xA;&lt;p&gt;In library version 2.0.9, the filters was refactored. Check the wiki link to migrate your implementation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pedroSG94/RootEncoder/wiki/Real-time-filters&#34;&gt;https://github.com/pedroSG94/RootEncoder/wiki/Real-time-filters&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Looking for sponsors&lt;/h2&gt; &#xA;&lt;p&gt;This library need sponsors to get new devices or pay platforms to test and debug errors. Any donation or sponsor is welcome! If you are interested. You can contact me by email or donate directly on &lt;a href=&#34;https://github.com/sponsors/pedroSG94&#34;&gt;Github&lt;/a&gt; or &lt;a href=&#34;https://www.paypal.com/paypalme/pedroSG94&#34;&gt;Paypal&lt;/a&gt; Thank you!&lt;/p&gt; &#xA;&lt;h2&gt;Use example:&lt;/h2&gt; &#xA;&lt;p&gt;This code is a basic example. I recommend you go to Activities in app module and see all examples.&lt;/p&gt; &#xA;&lt;h3&gt;RTMP:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;&#xA;//default&#xA;&#xA;//create builder&#xA;RtmpCamera1 rtmpCamera1 = new RtmpCamera1(openGlView, connectCheckerRtmp);&#xA;//start stream&#xA;if (rtmpCamera1.prepareAudio() &amp;amp;&amp;amp; rtmpCamera1.prepareVideo()) {&#xA;  rtmpCamera1.startStream(&#34;rtmp://yourEndPoint&#34;);&#xA;} else {&#xA; /**This device cant init encoders, this could be for 2 reasons: The encoder selected doesnt support any configuration setted or your device hasnt a H264 or AAC encoder (in this case you can see log error valid encoder not found)*/&#xA;}&#xA;//stop stream&#xA;rtmpCamera1.stopStream();&#xA;&#xA;//with params&#xA;&#xA;//create builder&#xA;RtmpCamera1 rtmpCamera1 = new RtmpCamera1(openGlView, connectCheckerRtmp);&#xA;//start stream&#xA;if (rtmpCamera1.prepareAudio(int bitrate, int sampleRate, boolean isStereo, boolean echoCanceler,&#xA;      boolean noiseSuppressor) &amp;amp;&amp;amp; rtmpCamera1.prepareVideo(int width, int height, int fps, int bitrate, int rotation)) {&#xA;  rtmpCamera1.startStream(&#34;rtmp://yourEndPoint&#34;);&#xA;} else {&#xA; /**This device cant init encoders, this could be for 2 reasons: The encoder selected doesnt support any configuration setted or your device hasnt a H264 or AAC encoder (in this case you can see log error valid encoder not found)*/&#xA;}&#xA;//stop stream&#xA;rtmpCamera1.stopStream();&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;RTSP:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;&#xA;//default&#xA;&#xA;//create builder&#xA;//by default TCP protocol.&#xA;RtspCamera1 rtspCamera1 = new RtspCamera1(openGlView, connectCheckerRtsp);&#xA;//start stream&#xA;if (rtspCamera1.prepareAudio() &amp;amp;&amp;amp; rtspCamera1.prepareVideo()) {&#xA;  rtspCamera1.startStream(&#34;rtsp://yourEndPoint&#34;);&#xA;} else {&#xA; /**This device cant init encoders, this could be for 2 reasons: The encoder selected doesnt support any configuration setted or your device hasnt a H264 or AAC encoder (in this case you can see log error valid encoder not found)*/&#xA;}&#xA;//stop stream&#xA;rtspCamera1.stopStream();&#xA;&#xA;//with params&#xA;&#xA;//create builder&#xA;RtspCamera1 rtspCamera1 = new RtspCamera1(openGlView, connectCheckerRtsp);&#xA;rtspCamera1.setProtocol(protocol);&#xA;//start stream&#xA;if (rtspCamera1.prepareAudio(int bitrate, int sampleRate, boolean isStereo, boolean echoCanceler,&#xA;      boolean noiseSuppressor) &amp;amp;&amp;amp; rtspCamera1.prepareVideo(int width, int height, int fps, int bitrate, int rotation)) {&#xA;  rtspCamera1.startStream(&#34;rtsp://yourEndPoint&#34;);&#xA;} else {&#xA; /**This device cant init encoders, this could be for 2 reasons: The encoder selected doesnt support any configuration setted or your device hasnt a H264 or AAC encoder (in this case you can see log error valid encoder not found)*/&#xA;}&#xA;//stop stream&#xA;rtspCamera1.stopStream();&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>