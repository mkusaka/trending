<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-31T01:37:45Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>FCL-Team/FoldCraftLauncher</title>
    <updated>2023-07-31T01:37:45Z</updated>
    <id>tag:github.com,2023-07-31:/FCL-Team/FoldCraftLauncher</id>
    <link href="https://github.com/FCL-Team/FoldCraftLauncher" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fold Craft Launcher, an Android Minecraft : Java Edition launcher.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img width=&#34;75&#34; src=&#34;https://raw.githubusercontent.com/FCL-Team/FoldCraftLauncher/main/FCL/src/main/res/drawable/img_app.png&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Fold Craft Launcher&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/Android-3DDC84?style=for-the-badge&amp;amp;logo=android&amp;amp;logoColor=white&#34; alt=&#34;Android&#34;&gt; &lt;a href=&#34;https://discord.gg/ffhvuXTwyV&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Discord-4903FC?style=for-the-badge&amp;amp;logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://qm.qq.com/cgi-bin/qm/qr?_wv=1027&amp;amp;k=LwxydGEvBZJnn09sXOjkQo9tuuLcYwx5&amp;amp;authKey=seyY5pPUCIHMWS5FqVryq926T0G2GarSXetpxxV9DJxBVt%2FPcg1vxN%2F%2FXpsCowyk&amp;amp;noverify=0&amp;amp;group_code=762054349&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/QQ-4903FC?style=for-the-badge&amp;amp;logoColor=white&#34; alt=&#34;QQ&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/FCL-Team/FoldCraftLauncher/total?color=green&amp;amp;style=for-the-badge&#34; alt=&#34;Downloads&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://afdian.net/@tungs&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/sponsor-30363D?style=for-the-badge&amp;amp;logo=GitHub-Sponsors&amp;amp;logoColor=#EA4AAA&#34; alt=&#34;Sponsor&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://fcl-team.github.io/&#34;&gt;Fold Craft Launcher&lt;/a&gt;: The software attempts to launch Minecraft: Java Edition on Android devices, allowing players to manage Games, Mods, Controls and More.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Run Minecraft: Java Edition directly on your Android device&lt;/strong&gt;, with mod support and all versions of the Game.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Run Minecraft on all versions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Run Forge, LiteLoader, OptiFine, Fabric, Quilt and others&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Java 8 and Java 17&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Mouse Virtual&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Download Mods, ModPacks, ResourcePacks and Worlds&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Using Shaders (with VirGL)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Create custom controllers&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Customizable launcher themes and colors&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; And much more!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Screenshots&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/FCL-Team/FoldCraftLauncher/main/.github/images/ui_main_light.jpg&#34; alt=&#34;GameScreen1&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/FCL-Team/FoldCraftLauncher/main/.github/images/ui_main_dark.jpg&#34; alt=&#34;GameScreen2&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/FCL-Team/FoldCraftLauncher/main/.github/images/game.jpg&#34; alt=&#34;GameScreen3&#34;&gt;&lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Compilation&lt;/h1&gt; &#xA;&lt;p&gt;You can compile the software using &lt;strong&gt;Android Studio&lt;/strong&gt;, with the &lt;strong&gt;Android SDK &amp;amp; NDK&lt;/strong&gt; packages. Clone the remote repository from the following URL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://github.com/FCL-Team/FoldCraftLauncher.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After that, use Android Studio to compile the code.&lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;The software is distributed under &lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0.html&#34;&gt;GPL-v3&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Fold Craft Launcher is free software: you can redistribute it and/or modify&#xA;it under the terms of the GNU General Public License as published by&#xA;the Free Software Foundation, either version 3 of the License, or&#xA;(at your option) any later version.&#xA;&#xA;Fold Craft Launcher is distributed in the hope that it will be useful,&#xA;but WITHOUT ANY WARRANTY; without even the implied warranty of&#xA;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#xA;GNU General Public License for more details.&#xA;&#xA;You should have received a copy of the GNU General Public License&#xA;along with Fold Craft Launcher.  If not, see &amp;lt;https://www.gnu.org/licenses/&amp;gt;.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Third Party Components&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/huanghongxun/HMCL&#34;&gt;HMCL&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/AOF-Dev/Boat&#34;&gt;Boat and related projects&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/PojavLauncherTeam/PojavLauncher&#34;&gt;PojavLauncher and related projects&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/yushijinhun/authlib-injector&#34;&gt;authlib-injector&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Sponsor&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://afdian.net/@tungs&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/sponsor-30363D?style=for-the-badge&amp;amp;logo=GitHub-Sponsors&amp;amp;logoColor=#EA4AAA&#34; alt=&#34;Sponsor&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>raphaelLacerda/java-treino-programacao</title>
    <updated>2023-07-31T01:37:45Z</updated>
    <id>tag:github.com,2023-07-31:/raphaelLacerda/java-treino-programacao</id>
    <link href="https://github.com/raphaelLacerda/java-treino-programacao" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Exercício CaminhoArquivo - BUG e REFACTORING&lt;/h1&gt; &#xA;&lt;p&gt;O código da classe CaminhoArquivo está bugado! O desenvolvedor fez testes na classe CaminhoArquivoTest. Sabe-se que esses testes estão corretos e especificam como deve ser o comportamento da classe.&lt;/p&gt; &#xA;&lt;h2&gt;O que fazer?&lt;/h2&gt; &#xA;&lt;p&gt;O seu trabalho será dividido em três partes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Consertar o bug no código e fazer o teste passar (comentar a anotação @Disable)&lt;/li&gt; &#xA; &lt;li&gt;Refatorar o código. Técnicas como análise de complexidade ciclomática, duplicação de código, clean code e LOC serão utilizadas para avaliação;&lt;/li&gt; &#xA; &lt;li&gt;Adicionar um caso de teste para o cenário no qual o ID não é informado&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Atenção, a assinatura do método deve ser mantida, assim como os testes da classe CaminhoArquivoTest&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Exercício Teste de Unidade e Mock&lt;/h1&gt; &#xA;&lt;p&gt;Neste exercício vamos focar em testes de unidade, mocks e refatoração&lt;/p&gt; &#xA;&lt;h2&gt;Descrição do problema 1&lt;/h2&gt; &#xA;&lt;p&gt;A classe Banco é responsável por manter as contas dos clientes. Porém, os usuários estão reclamando lentidão quando tentam buscar por uma conta de um cliente específico.&lt;/p&gt; &#xA;&lt;p&gt;Você como desenvolvedor deve:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fazer os testes de unidade da classe banco para os métodos &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;adicionarConta&lt;/li&gt; &#xA;   &lt;li&gt;pesquisarContaDoCliente&lt;/li&gt; &#xA;   &lt;li&gt;listarContasAltaRenda&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Refatorar o método pesquisarContaDoCliente para resolver os problemas de lentidão&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Descrição do problema 2&lt;/h2&gt; &#xA;&lt;p&gt;A classe SistemaBancario é responsável por registrar os bancos junto ao Bacen. Bacen é um Gateway que faz chamadas ao WebService do Bacen. É necessário testar a classe SistemaBancario unitariamente, logo precisamos de uma solução para isolar a classe Bacen.&lt;/p&gt; &#xA;&lt;p&gt;Para isolar a classe Bacen você deve implementá-la de três maneiras diferentes&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;usando um Fake&lt;/li&gt; &#xA; &lt;li&gt;usando um Stub&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Os seguintes cenário deve ser testado:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Caso o cadastro do banco no Bacen tenha sido feito com sucesso, ele retorna o número de registro do Banco&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Agora, usando um mock com Mockito e definindo os comportamentos da classe Bacen para o caso de sucesso e o de falha, além do cenário de sucesso, implemente o cenário abaixo.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Caso o cadastro do banco no Bacen tenha dado algum problema, a exceção BancoNaoCadastradoException do tipo RuntimeException deve ser retornada. Use o assertThrows para isso.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Exercício CRUD - nova funcionalidade com testes&lt;/h1&gt; &#xA;&lt;p&gt;Este exercício tem o objetivo de identificar habilidades relacionadas a requisições HTTP, arquitetura REST, uso de API&#39;s para persistência de dados&lt;/p&gt; &#xA;&lt;h2&gt;Instruções para o seu código&lt;/h2&gt; &#xA;&lt;p&gt;Para rodar local basta executar&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker-compose up --build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Acessar &lt;a href=&#34;http://localhost:8080/api/ola&#34;&gt;http://localhost:8080/api/ola&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Para parar o container&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker-compose down&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;pacote DOMAIN.model&lt;/h3&gt; &#xA;&lt;p&gt;A sua classe de domain Auno deve ser:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Criar aluno com id (auto gerado), nome (not null) e email;&lt;/li&gt; &#xA; &lt;li&gt;Usar anotações do JPA para fazer o mapeamento&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;pacote DOMAIN.repository&lt;/h3&gt; &#xA;&lt;p&gt;A sua classe de repository AlunoRepository deve ser:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;estender a interface JpaRepository&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://docs.spring.io/spring-data/data-jpa/docs/current/api/org/springframework/data/jpa/repository/JpaRepository.html&#34;&gt;https://docs.spring.io/spring-data/data-jpa/docs/current/api/org/springframework/data/jpa/repository/JpaRepository.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;pacote APPLICATION.controller&lt;/h3&gt; &#xA;&lt;p&gt;A sua classe de controller AlunoController deve ser:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ter o método find, list, save, update e delete.&lt;/li&gt; &#xA; &lt;li&gt;find deve buscar por um aluno específico recebendo o ID no path param - GET &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;retornar 200 como status code&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;list deve listar todos os alunos - GET &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;retornar 200 como status code&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;save deve salvar um novo aluno - POST &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;retornar 201 como status code&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;put deve atualizar todos os atributos de um aluno recebendo o ID no path param - PUT &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;retornar 200 como status code&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;delete deve remover um aluno - DELETE &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;retornar 200 como status code&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Atenção no método FIND, caso não exista um aluno o valor retornado deve ser 404. Já no mesmo LIST, deve retornar uma colleção vazia com o status code 200.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Instruções para o testes&lt;/h2&gt; &#xA;&lt;h3&gt;pacote application.controller&lt;/h3&gt; &#xA;&lt;p&gt;Criar uma classe de testes AlunoControllerTest e fazer os testes de API (e2e).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Teste apenas o cenário de POST de Aluno&lt;/li&gt; &#xA; &lt;li&gt;Use a classe HelloControllerTest como modelo.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;dica, utiliza o método .body(BodyInserters.fromValue()) para fazer o parser do objeto para Json&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/reactive/function/client/WebClient.RequestBodySpec.html#body(java.lang.Object,java.lang.Class)&#34;&gt;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/reactive/function/client/WebClient.RequestBodySpec.html#body(java.lang.Object,java.lang.Class)&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/reactive/function/BodyInserters.html#fromValue(T)&#34;&gt;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/reactive/function/BodyInserters.html#fromValue(T)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Sugestões&lt;/h1&gt; &#xA;&lt;p&gt;Implementar os meus casos com JavaScript&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Jasmine, Karma, Mocha&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Implementar os meus casos com Python&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;pytest&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>langchain4j/langchain4j</title>
    <updated>2023-07-31T01:37:45Z</updated>
    <id>tag:github.com,2023-07-31:/langchain4j/langchain4j</id>
    <link href="https://github.com/langchain4j/langchain4j" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Java version of LangChain&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LangChain for Java: Supercharge your Java application with the power of LLMs&lt;/h1&gt; &#xA;&lt;h2&gt;Project goals&lt;/h2&gt; &#xA;&lt;p&gt;The goal of this project is to simplify the integration of AI/LLM capabilities into your Java application.&lt;/p&gt; &#xA;&lt;p&gt;This can be achieved thanks to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;A simple and coherent layer of abstractions&lt;/strong&gt;, designed to ensure that your code does not depend on concrete implementations such as LLM providers, embedding store providers, etc. This allows for easy swapping of components.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Numerous implementations of the above-mentioned abstractions&lt;/strong&gt;, providing you with a variety of LLMs and embedding stores to choose from.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Range of in-demand features on top of LLMs, such as:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The capability to &lt;strong&gt;ingest your own data&lt;/strong&gt; (documentation, codebase, etc.), allowing the LLM to act and respond based on your data.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Autonomous agents&lt;/strong&gt; for delegating tasks (defined on the fly) to the LLM, which will strive to complete them.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Prompt templates&lt;/strong&gt; to help you achieve the highest possible quality of LLM responses.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Memory&lt;/strong&gt; to provide context to the LLM for your current and past conversations.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Structured outputs&lt;/strong&gt; for receiving responses from the LLM with a desired structure as Java POJOs.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&#34;AI Services&#34;&lt;/strong&gt; for declaratively defining complex AI behavior behind a simple API.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Chains&lt;/strong&gt; to reduce the need for extensive boilerplate code in common use-cases.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Auto-moderation&lt;/strong&gt; to ensure that all inputs and outputs to/from the LLM are not harmful.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;News&lt;/h2&gt; &#xA;&lt;p&gt;26 July:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We&#39;ve added integration with &lt;a href=&#34;https://localai.io/&#34;&gt;LocalAI&lt;/a&gt;. Now, you can use LLMs hosted locally!&lt;/li&gt; &#xA; &lt;li&gt;Added support for &lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/ServiceWithStreamingExample.java&#34;&gt;response streaming in AI Services&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;21 July:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Now, you can do &lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/InProcessEmbeddingModelExamples.java&#34;&gt;text embedding inside your JVM&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;17 July:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can now try out OpenAI&#39;s &lt;code&gt;gpt-3.5-turbo&lt;/code&gt; and &lt;code&gt;text-embedding-ada-002&lt;/code&gt; models with LangChain4j for free, without needing an OpenAI account and keys! Simply use the API key &#34;demo&#34;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;15 July:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added EmbeddingStoreIngestor&lt;/li&gt; &#xA; &lt;li&gt;Redesigned document loaders (see FileSystemDocumentLoader)&lt;/li&gt; &#xA; &lt;li&gt;Simplified ConversationalRetrievalChain&lt;/li&gt; &#xA; &lt;li&gt;Renamed DocumentSegment into TextSegment&lt;/li&gt; &#xA; &lt;li&gt;Added output parsers for numeric types&lt;/li&gt; &#xA; &lt;li&gt;Added @UserName for AI Services&lt;/li&gt; &#xA; &lt;li&gt;Fixed &lt;a href=&#34;https://github.com/langchain4j/langchain4j/issues/23&#34;&gt;23&lt;/a&gt; and &lt;a href=&#34;https://github.com/langchain4j/langchain4j/issues/24&#34;&gt;24&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;11 July:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added &lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/ServiceWithDynamicToolsExample.java&#34;&gt;&#34;Dynamic Tools&#34;&lt;/a&gt;: Now, the LLM can generate code for tasks that require precise calculations, such as math and string manipulation. This will be dynamically executed in a style akin to GPT-4&#39;s code interpreter! We use &lt;a href=&#34;https://rapidapi.com/judge0-official/api/judge0-ce/pricing&#34;&gt;Judge0, hosted by Rapid API&lt;/a&gt;, for code execution. You can subscribe and receive 50 free executions per day.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;5 July:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Now you can &lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/spring-boot-example/src/test/java/dev/example/CustomerSupportApplicationTest.java&#34;&gt;add your custom knowledge base to &#34;AI Services&#34;&lt;/a&gt;. Relevant information will be automatically retrieved and injected into the prompt. This way, the LLM will have a context of your data and will answer based on it!&lt;/li&gt; &#xA; &lt;li&gt;The current date and time can now be automatically injected into the prompt using special &lt;code&gt;{{current_date}}&lt;/code&gt;, &lt;code&gt;{{current_time}}&lt;/code&gt; and &lt;code&gt;{{current_date_time}}&lt;/code&gt; placeholders.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;3 July:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added support for Spring Boot 3&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;2 July:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/spring-boot-example/src/test/java/dev/example/CustomerSupportApplicationTest.java&#34;&gt;Added Spring Boot Starter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Added support for HuggingFace models&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;1 July:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/ServiceWithToolsExample.java&#34;&gt;Added &#34;Tools&#34;&lt;/a&gt; (support for OpenAI functions)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Highlights&lt;/h2&gt; &#xA;&lt;p&gt;You can declaratively define concise &#34;AI Services&#34; that are powered by LLMs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;interface Assistant {&#xA;&#xA;    String chat(String userMessage);&#xA;}&#xA;&#xA;    Assistant assistant = AiServices.create(Assistant.class, model);&#xA;&#xA;    String answer = assistant.chat(&#34;Hello&#34;);&#xA;    &#xA;    System.out.println(answer); // Hello! How can I assist you today?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use LLM as a classifier:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;enum Sentiment {&#xA;    POSITIVE, NEUTRAL, NEGATIVE;&#xA;}&#xA;&#xA;interface SentimentAnalyzer {&#xA;&#xA;    @UserMessage(&#34;Analyze sentiment of {{it}}&#34;)&#xA;    Sentiment analyzeSentimentOf(String text);&#xA;&#xA;    @UserMessage(&#34;Does {{it}} have a positive sentiment?&#34;)&#xA;    boolean isPositive(String text);&#xA;}&#xA;&#xA;    SentimentAnalyzer sentimentAnalyzer = AiServices.create(SentimentAnalyzer.class, model);&#xA;&#xA;    Sentiment sentiment = sentimentAnalyzer.analyzeSentimentOf(&#34;It is good!&#34;);&#xA;    // POSITIVE&#xA;&#xA;    boolean positive = sentimentAnalyzer.isPositive(&#34;It is bad!&#34;);&#xA;    // false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can easily extract structured information from unstructured data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class Person {&#xA;&#xA;    private String firstName;&#xA;    private String lastName;&#xA;    private LocalDate birthDate;&#xA;&#xA;    public String toString() {...}&#xA;}&#xA;&#xA;interface PersonExtractor {&#xA;&#xA;    @UserMessage(&#34;Extract information about a person from {{it}}&#34;)&#xA;    Person extractPersonFrom(String text);&#xA;}&#xA;&#xA;    PersonExtractor extractor = AiServices.create(PersonExtractor.class, model);&#xA;&#xA;    String text = &#34;In 1968, amidst the fading echoes of Independence Day, &#34;&#xA;            + &#34;a child named John arrived under the calm evening sky. &#34;&#xA;            + &#34;This newborn, bearing the surname Doe, marked the start of a new journey.&#34;;&#xA;&#xA;    Person person = extractor.extractPersonFrom(text);&#xA;    // Person { firstName = &#34;John&#34;, lastName = &#34;Doe&#34;, birthDate = 1968-07-04 }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can define more sophisticated prompt templates using mustache syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;interface Translator {&#xA;&#xA;    @SystemMessage(&#34;You are a professional translator into {{language}}&#34;)&#xA;    @UserMessage(&#34;Translate the following text: {{text}}&#34;)&#xA;    String translate(@V(&#34;text&#34;) String text, @V(&#34;language&#34;) String language);&#xA;}&#xA;&#xA;    Translator translator = AiServices.create(Translator.class, model);&#xA;&#xA;    String translation = translator.translate(&#34;Hello, how are you?&#34;, &#34;Italian&#34;);&#xA;    // Ciao, come stai?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can provide tools that LLMs can use! Can be anything: retrieve information from DB, call APIs, etc. See example &lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/ServiceWithToolsExample.java&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Java: 8 or higher&lt;/li&gt; &#xA; &lt;li&gt;Spring Boot: 2 or 3&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Add LangChain4j dependency to your project:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Maven: &lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;dev.langchain4j&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;langchain4j&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;0.18.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Gradle: &lt;pre&gt;&lt;code&gt;implementation &#39;dev.langchain4j:langchain4j:0.18.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Import your OpenAI/HuggingFace API key:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String apiKey = System.getenv(&#34;OPENAI_API_KEY&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can use the API key &#34;demo&#34; to test OpenAI, which we provide for free. &lt;a href=&#34;https://github.com/langchain4j/langchain4j#how-to-get-an-api-key&#34;&gt;How to gen an API key?&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create an instance of a model and start interacting:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;OpenAiChatModel model = OpenAiChatModel.withApiKey(apiKey);&#xA;&#xA;AiMessage answer = model.sendUserMessage(&#34;Hello world!&#34;);&#xA;&#xA;System.out.println(answer.text()); // Hello! How can I assist you today?&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Code examples&lt;/h2&gt; &#xA;&lt;p&gt;Please see more examples of how LangChain4j can be used:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/tree/main/other-examples/src/main/java&#34;&gt;Examples in plain Java&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/spring-boot-example/src/test/java/dev/example/CustomerSupportApplicationTest.java&#34;&gt;Example with Spring Boot&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;Please note that the library is in active development and:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Many features are still missing. We are working hard on implementing them ASAP.&lt;/li&gt; &#xA; &lt;li&gt;API might change at any moment. At this point, we prioritize good design in the future over backward compatibility now. We hope for your understanding.&lt;/li&gt; &#xA; &lt;li&gt;We need your input! Please &lt;a href=&#34;https://github.com/langchain4j/langchain4j/issues/new/choose&#34;&gt;let us know&lt;/a&gt; what features you need and your concerns about the current implementation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Current capabilities:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;AI Services: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/SimpleServiceExample.java&#34;&gt;Simple&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/ServiceWithMemoryExample.java&#34;&gt;With Memory&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/ServiceWithToolsExample.java&#34;&gt;With Tools&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/ServiceWithAutoModerationExample.java&#34;&gt;With Auto-Moderation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/OtherServiceExamples.java&#34;&gt;With Structured Outputs, Structured Prompts, etc&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Integration with &lt;a href=&#34;https://platform.openai.com/docs/introduction&#34;&gt;OpenAI (ChatGPT)&lt;/a&gt; for: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://platform.openai.com/docs/guides/chat&#34;&gt;Chats&lt;/a&gt; (sync + streaming + functions)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://platform.openai.com/docs/guides/completion&#34;&gt;Completions&lt;/a&gt; (sync + streaming)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://platform.openai.com/docs/guides/embeddings&#34;&gt;Embeddings&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Integration with &lt;a href=&#34;https://huggingface.co/docs/api-inference/index&#34;&gt;HuggingFace Inference API&lt;/a&gt; for: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/docs/api-inference/detailed_parameters#text-generation-task&#34;&gt;Chats&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/docs/api-inference/detailed_parameters#text-generation-task&#34;&gt;Completions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/docs/api-inference/detailed_parameters#feature-extraction-task&#34;&gt;Embeddings&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Integration with &lt;a href=&#34;https://localai.io/&#34;&gt;LocalAI&lt;/a&gt; for: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Chats (sync + streaming + functions)&lt;/li&gt; &#xA;   &lt;li&gt;Completions (sync + streaming)&lt;/li&gt; &#xA;   &lt;li&gt;Embeddings&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/ChatMemoryExamples.java&#34;&gt;Memory for Chats&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/ChatWithDocumentsExamples.java&#34;&gt;Chat with Documents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Integration with &lt;a href=&#34;https://docs.pinecone.io/docs/overview&#34;&gt;Pinecone&lt;/a&gt; embedding store&lt;/li&gt; &#xA; &lt;li&gt;In-memory embedding store (for prototyping and testing)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/OtherServiceExamples.java&#34;&gt;Structured outputs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/PromptTemplateExamples.java&#34;&gt;Prompt templates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/StructuredPromptTemplateExamples.java&#34;&gt;Structured prompt templates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/StreamingExamples.java&#34;&gt;Streaming of LLM responses&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/ChatWithDocumentsExamples.java&#34;&gt;Loading text and PDF documents from the file system and via URL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/langchain4j/langchain4j-examples/raw/main/other-examples/src/main/java/ChatWithDocumentsExamples.java&#34;&gt;Splitting documents into segments&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;by paragraph&lt;/li&gt; &#xA;   &lt;li&gt;by sentence&lt;/li&gt; &#xA;   &lt;li&gt;by character count&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Token count estimation (so that you can predict how much you will pay)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Coming soon:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Extending &#34;AI Service&#34; features&lt;/li&gt; &#xA; &lt;li&gt;Integration with more LLM providers (commercial and open)&lt;/li&gt; &#xA; &lt;li&gt;Integrations with more embedding stores (commercial and open)&lt;/li&gt; &#xA; &lt;li&gt;Support for more document types&lt;/li&gt; &#xA; &lt;li&gt;Long-term memory for chatbots and agents&lt;/li&gt; &#xA; &lt;li&gt;Chain-of-Thought and Tree-of-Thought&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Request features&lt;/h2&gt; &#xA;&lt;p&gt;Please &lt;a href=&#34;https://github.com/langchain4j/langchain4j/issues/new/choose&#34;&gt;let us know&lt;/a&gt; what features you need!&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Please help us make this open-source library better by contributing.&lt;/p&gt; &#xA;&lt;h2&gt;Use cases&lt;/h2&gt; &#xA;&lt;p&gt;You might ask why would I need all of this? Here are a couple of examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You want to implement a custom AI-powered chatbot that has access to your data and behaves the way you want it: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Customer support chatbot that can: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;politely answer customer questions&lt;/li&gt; &#xA;     &lt;li&gt;take /change/cancel orders&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Educational assistant that can: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Teach various subjects&lt;/li&gt; &#xA;     &lt;li&gt;Explain unclear parts&lt;/li&gt; &#xA;     &lt;li&gt;Assess user&#39;s understanding/knowledge&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;You want to process a lot of unstructured data (files, web pages, etc) and extract structured information from them. For example: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;extract insights from customer reviews and support chat history&lt;/li&gt; &#xA;   &lt;li&gt;extract interesting information from the websites of your competitors&lt;/li&gt; &#xA;   &lt;li&gt;extract insights from CVs of job applicants&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;You want to generate information, for example: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Emails tailored for each of your customers&lt;/li&gt; &#xA;   &lt;li&gt;Content for your app/website: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Blog posts&lt;/li&gt; &#xA;     &lt;li&gt;Stories&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;You want to transform information, for example: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Summarize&lt;/li&gt; &#xA;   &lt;li&gt;Proofread and rewrite&lt;/li&gt; &#xA;   &lt;li&gt;Translate&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Best practices&lt;/h2&gt; &#xA;&lt;p&gt;We highly recommend watching &lt;a href=&#34;https://www.deeplearning.ai/short-courses/chatgpt-prompt-engineering-for-developers/&#34;&gt;this amazing 90-minute tutorial&lt;/a&gt; on prompt engineering best practices, presented by Andrew Ng (DeepLearning.AI) and Isa Fulford (OpenAI). This course will teach you how to use LLMs efficiently and achieve the best possible results. Good investment of your time!&lt;/p&gt; &#xA;&lt;p&gt;Here are some best practices for using LLMs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Be responsible. Use AI for Good.&lt;/li&gt; &#xA; &lt;li&gt;Be specific. The more specific your query, the best results you will get.&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;a href=&#34;https://arxiv.org/pdf/2205.11916.pdf&#34;&gt;magical &#34;Let’s think step by step&#34; instruction&lt;/a&gt; to your prompt.&lt;/li&gt; &#xA; &lt;li&gt;Specify steps to achieve the desired goal yourself. This will make the LLM do what you want it to do.&lt;/li&gt; &#xA; &lt;li&gt;Provide examples. Sometimes it is best to show LLM a few examples of what you want instead of trying to explain it.&lt;/li&gt; &#xA; &lt;li&gt;Ask LLM to provide structured output (JSON, XML, etc). This way you can parse response more easily and distinguish different parts of it.&lt;/li&gt; &#xA; &lt;li&gt;Use unusual delimiters, such as ```triple backticks``` to help the LLM distinguish data or input from instructions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to get an API key&lt;/h2&gt; &#xA;&lt;p&gt;You will need an API key from OpenAI (paid) or HuggingFace (free) to use LLMs hosted by them.&lt;/p&gt; &#xA;&lt;p&gt;We recommend using OpenAI LLMs (&lt;code&gt;gpt-3.5-turbo&lt;/code&gt; and &lt;code&gt;gpt-4&lt;/code&gt;) as they are by far the most capable and are reasonably priced.&lt;/p&gt; &#xA;&lt;p&gt;It will cost approximately $0.01 to generate 10 pages (A4 format) of text with &lt;code&gt;gpt-3.5-turbo&lt;/code&gt;. With &lt;code&gt;gpt-4&lt;/code&gt;, the cost will be $0.30 to generate the same amount of text. However, for some use cases, this higher cost may be justified.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.howtogeek.com/885918/how-to-get-an-openai-api-key/&#34;&gt;How to get OpenAI API key&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For embeddings, we recommend using one of the models from the &lt;a href=&#34;https://huggingface.co/spaces/mteb/leaderboard&#34;&gt;HuggingFace MTEB leaderboard&lt;/a&gt;. You&#39;ll have to find the best one for your specific use case.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s how to get a HuggingFace API key:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create an account on &lt;a href=&#34;https://huggingface.co&#34;&gt;https://huggingface.co&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://huggingface.co/settings/tokens&#34;&gt;https://huggingface.co/settings/tokens&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Generate a new access token&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>