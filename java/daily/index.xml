<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-22T01:35:51Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Enndfp/simple-framework</title>
    <updated>2024-01-22T01:35:51Z</updated>
    <id>tag:github.com,2024-01-22:/Enndfp/simple-framework</id>
    <link href="https://github.com/Enndfp/simple-framework" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SimpleFramework 是一个简易版的 Spring 框架，专注于实现 Spring 的三大核心功能：IOC（控制反转）、AOP（面向切面编程）和 MVC（模型-视图-控制器）。该项目旨在通过重新构建这些关键功能，为开发者提供深入理解 Spring 框架架构和设计理念的机会，同时也是一种提升 Java 开发技术能力的实践。&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://img.enndfp.cn/202401181958108.png&#34; style=&#34;zoom:80%;&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;简体中文&lt;/strong&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/Enndfp/simple-framework/main/README-EN.md&#34;&gt;English&lt;/a&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;🌟 SimpleFramework&lt;/h1&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;b&gt;🛠️ 造轮子项目：从头实现Spring框架&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/Java-1.8-orange&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/CGLIB-3.3.0-green&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/AspectJWeaver-1.9.5-yellowgreen&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/javax.servlet.jsp--api-2.3.3-blue&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/javax.servlet--api-4.0.1-lightgrey&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/Gson-2.8.6-yellow&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/Slf4j--log4j12-1.7.28-yellow&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/Lombok-1.18.30-blue&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;📖 项目简介&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Spring框架在Java开发界占据了举足轻重的地位，这主要归功于其易于理解和功能强大的特性。它广泛应用了多种设计模式，为项目提供了规范化的架构。更重要的是，Spring作为一个开源框架，为广大开发者提供了学习和提升的机会，为Java开发带来了一种革新的春风。&lt;/p&gt; &#xA; &lt;p&gt;鉴于Spring的这些优势，很多Java开发者渴望使用基础技术来实现一个类似于Spring的框架。这种做法不仅是对Spring架构和设计理念的深入理解，也是一种技术能力的展示。因此，“simple-framework”项目应运而生，旨在通过实现一个简化版的Spring框架，使开发者更容易地理解其核心概念，同时也能够提升自己在Java开发领域的技术水平。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple-Framework是一个免费的开源项目，面向所有个人和企业，提供易于使用和学习的Java开发框架，支持开发者社区的共同进步与创新。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🚀 技术亮点&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Java 1.8&lt;/strong&gt;: 提供优化的性能和稳定性，是Java开发的基石。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CGLIB 3.3.0 &amp;amp; AspectJWeaver 1.9.5&lt;/strong&gt;: 强大的库，为AOP提供了坚实的基础。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Java Servlet API &amp;amp; Gson &amp;amp; Lombok&lt;/strong&gt;: 这些技术共同构成了一个强大的Web应用开发环境。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📚 项目架构图&lt;/h2&gt; &#xA;&lt;h3&gt;🔄 IOC&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.enndfp.cn/202401182054883.png&#34; alt=&#34;image-20240118205412786&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;🔀 AOP&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.enndfp.cn/202401191332233.png&#34; alt=&#34;image-20240119133233090&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;🕸️ MVC&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.enndfp.cn/202401191421810.png&#34; alt=&#34;image-20240119142136722&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;✨ 主要功能&lt;/h2&gt; &#xA;&lt;p&gt;本项目是一个&lt;strong&gt;简易版本的Spring框架&lt;/strong&gt;，实现了Spring框架的三大核心功能：&lt;strong&gt;IOC&lt;/strong&gt;（控制反转）、&lt;strong&gt;AOP&lt;/strong&gt;（面向切面编程）和&lt;strong&gt;MVC&lt;/strong&gt;（模型-视图-控制器），并将其分为以下核心包：&lt;/p&gt; &#xA;&lt;h4&gt;📦 Core包&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;功能&lt;/strong&gt;: Core包实现了框架的&lt;strong&gt;核心功能&lt;/strong&gt;，包括&lt;strong&gt;Bean的扫描加载&lt;/strong&gt;、&lt;strong&gt;容器的维护&lt;/strong&gt;、&lt;strong&gt;单例模式的实现&lt;/strong&gt;，以及&lt;strong&gt;自定义Bean的处理&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;实现方式&lt;/strong&gt;: 利用&lt;strong&gt;Java反射机制&lt;/strong&gt;动态扫描和加载指定包下的类，识别并处理不同类型的注解（如 &lt;code&gt;@Component&lt;/code&gt;, &lt;code&gt;@Controller&lt;/code&gt; 等）以管理不同种类的Bean。同时，它实现了&lt;strong&gt;单例模式&lt;/strong&gt;，确保每个Bean只被实例化一次，并提供了操作Bean的基本方法，例如添加、获取和管理Bean实例。&lt;/p&gt; &#xA;&lt;h4&gt;💉 Inject包&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;功能&lt;/strong&gt;: Inject包负责&lt;strong&gt;依赖注入&lt;/strong&gt;，包括处理 &lt;code&gt;@Autowired&lt;/code&gt; 注解，实现&lt;strong&gt;单例模式下的依赖注入&lt;/strong&gt;，以及为&lt;strong&gt;接口注入实现类&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;实现方式&lt;/strong&gt;: 通过&lt;strong&gt;Java反射机制&lt;/strong&gt;扫描Bean的字段，查找带有 &lt;code&gt;@Autowired&lt;/code&gt; 注解的字段，并利用Bean容器获取并注入所需依赖。它支持单例模式下的依赖注入，确保依赖的一致性和唯一性。同时，它也能为接口动态地注入适当的实现类，提高了代码的灵活性和可维护性。&lt;/p&gt; &#xA;&lt;h4&gt;🔍 AOP包&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;功能&lt;/strong&gt;: AOP包遵循&lt;strong&gt;面向切面编程思想&lt;/strong&gt;，使用 &lt;code&gt;Aspect&lt;/code&gt; 和 &lt;code&gt;Order&lt;/code&gt; 注解来标识和排序切面类，通过&lt;strong&gt;CGlib动态代理&lt;/strong&gt;和&lt;strong&gt;AspectJWeaver&lt;/strong&gt;实现横切逻辑的织入，动态修改方法逻辑。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;实现方式&lt;/strong&gt;: 利用&lt;strong&gt;CGlib&lt;/strong&gt;创建目标类的代理，并通过实现 &lt;code&gt;MethodInterceptor&lt;/code&gt; 接口来拦截方法调用。这允许在方法执行前后执行切面逻辑（如日志记录、权限检查等）。同时，通过&lt;strong&gt;AspectJ&lt;/strong&gt;的表达式语言提供对被代理类更精细的控制，使得可以根据不同的需要对方法逻辑进行修改和增强。&lt;/p&gt; &#xA;&lt;h4&gt;🌐 MVC包&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;功能&lt;/strong&gt;: MVC包处理&lt;strong&gt;请求分发相关功能&lt;/strong&gt;，包括重构 &lt;code&gt;DispatcherServlet&lt;/code&gt;，实现 &lt;code&gt;RequestProcessorChain&lt;/code&gt; 和 &lt;code&gt;RequestProcessor&lt;/code&gt; 矩阵，以及 &lt;code&gt;ResultRender&lt;/code&gt; 矩阵，完成多种请求的处理与响应渲染。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;实现方式&lt;/strong&gt;: 通过 &lt;code&gt;DispatcherServlet&lt;/code&gt; 作为&lt;strong&gt;中心控制器&lt;/strong&gt;，处理所有的HTTP请求并将其分发到相应的处理器。利用 &lt;code&gt;RequestProcessorChain&lt;/code&gt; 管理和执行一系列请求处理器，以处理不同类型的请求（如静态资源、控制器方法等）。&lt;code&gt;ResultRender&lt;/code&gt; 矩阵负责根据处理结果选择合适的渲染策略，例如渲染HTML页面或返回JSON数据，确保响应正确地渲染和返回给客户端。&lt;/p&gt; &#xA;&lt;h2&gt;💡 快速上手指南&lt;/h2&gt; &#xA;&lt;p&gt;要开始使用 &lt;strong&gt;SimpleFramework&lt;/strong&gt;，您可以采取以下步骤：&lt;/p&gt; &#xA;&lt;h3&gt;📥 方法一：源码使用&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;克隆仓库：&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/Enndfp/simple-framework.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;导入项目到您的IDE（例如IntelliJ IDEA）。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;在 &lt;code&gt;demo&lt;/code&gt; 目录下进行相关测试。这与使用Spring Boot开发项目类似。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;📦 方法二：War包部署&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;构建项目并生成War包。&lt;/li&gt; &#xA; &lt;li&gt;将War包部署到您的Servlet容器中，如Apache Tomcat。&lt;/li&gt; &#xA; &lt;li&gt;启动容器，应用将自动部署。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;🌟 示例代码&lt;/h3&gt; &#xA;&lt;p&gt;以下是一个简单的示例，展示了如何在您的项目中使用 &lt;strong&gt;SimpleFramework&lt;/strong&gt;：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.simpleframework.core.BeanContainer;&#xA;&#xA;public class MyApplication {&#xA;    public static void main(String[] args) {&#xA;        // 初始化容器&#xA;        BeanContainer container = BeanContainer.getInstance();&#xA;        container.loadBeans(&#34;com.yourpackage&#34;);&#xA;&#xA;        // 使用容器获取Bean&#xA;        MyService myService = (MyService) container.getBean(MyService.class);&#xA;        myService.doSomething();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;在这个例子中，我们首先获取了 &lt;code&gt;BeanContainer&lt;/code&gt; 的实例，然后加载了指定包路径下的所有Bean。之后，我们从容器中获取了 &lt;code&gt;MyService&lt;/code&gt; 类的实例，并调用了其方法。&lt;/p&gt;</summary>
  </entry>
</feed>