<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-07T01:35:23Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>abh80/smart-edge</title>
    <updated>2022-10-07T01:35:23Z</updated>
    <id>tag:github.com,2022-10-07:/abh80/smart-edge</id>
    <link href="https://github.com/abh80/smart-edge" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Alternative to dynamic island for android (better than other similar projects)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Smart Edge (Early Access) &lt;a href=&#34;https://github.com/abh80/smart-edge/actions/workflows/release.yml&#34;&gt;&lt;img src=&#34;https://github.com/abh80/smart-edge/actions/workflows/release.yml/badge.svg?sanitize=true&#34; alt=&#34;Build &amp;amp; Publish Debug APK&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Alternative to dynamic island for android.&lt;/p&gt; &#xA;&lt;h1&gt;Downloads&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/abh80/smart-edge/releases/download/20107/release.apk&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/abh80/smart-edge?color=7885FF&amp;amp;label=Android-Apk&amp;amp;logo=android&amp;amp;style=for-the-badge&#34; alt=&#34;Download Button&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Previews&lt;/h1&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/50198413/192252474-15852727-e487-4094-ae0f-bfc0f2c4ff06.png&#34; width=&#34;500&#34;&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/50198413/192252553-ee8fa52d-a3ec-4292-83a0-8ec3d9bb7787.png&#34; width=&#34;500&#34;&gt;</summary>
  </entry>
  <entry>
    <title>InvisiblePro/Hacktoberfest-2022</title>
    <updated>2022-10-07T01:35:23Z</updated>
    <id>tag:github.com,2022-10-07:/InvisiblePro/Hacktoberfest-2022</id>
    <link href="https://github.com/InvisiblePro/Hacktoberfest-2022" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This is the Repository for Hacktoberfest 2022, specially for contribution and get the pull request accepted!! All Languages are accepted!&lt;/p&gt;&lt;hr&gt;&lt;br&gt;  &#xA;&lt;link rel=&#34;icon&#34; href=&#34;https://raw.githubusercontent.com/InvisiblePro/Hacktoberfest-2022/main/.github/logo.jpeg&#34;&gt;  &#xA;&lt;h1 align=&#34;center&#34;&gt; Hacktoberfest 2022&lt;/h1&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt; Hacktoberfest is for everyone!..&lt;/h2&gt; &#xA;&lt;img src=&#34;https://res.cloudinary.com/practicaldev/image/fetch/s--n6yDj0MN--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/12t9r8j7n9ynxbdzhs5p.png&#34; align=&#34;center&#34; width=&#34;1000px&#34;&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;#HappyHacking&lt;/h1&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;üî• Register Yourself for Hacktoberfest and make four pull requests between October 1st-31st to grab free SWAGS! üî•&lt;/h3&gt; &#xA;&lt;h3&gt;Please star the Repo if you like it üòâ‚ú®&lt;/h3&gt; &#xA;&lt;h3&gt;Please go through this Poll about your experience with this &lt;a href=&#34;https://github.com/InvisiblePro/Hacktoberfest-2022/discussions/44&#34;&gt;Repo&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;IMPORTANT!&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Dont forget to go through &lt;a href=&#34;https://github.com/InvisiblePro/Hacktoberfest-2022/raw/main/CODE_OF_CONDUCT.md&#34;&gt;CODE_OF_CONDUCT&lt;/a&gt;, &lt;a href=&#34;https://github.com/InvisiblePro/Hacktoberfest-2022/raw/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.MD&lt;/a&gt; and &lt;a href=&#34;https://github.com/InvisiblePro/Hacktoberfest-2022/raw/main/SECURITY.md&#34;&gt;SECURITY.MD&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Everyone must fill the Comments while submitting their PR!! consider this as compulsory otherwise PR wont be accpeted!!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Any PR voilating CODE_OF_CONDUCT won&#39;t be accepcted and will be labelled as &#39;bug&#39;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;#HappyHacking!!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3 align=&#34;right&#34;&gt;---- InvisiblePro&lt;/h3&gt; &#xA;&lt;h2&gt;What&#39;s for you?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Get involved in the contribution and benchmark your skills and talents!! ‚ú®‚ú®&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Get your questions/doubts to be answered by the experts.....&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Share your creative ideas and get support in it!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Showcase your previous works as a motivation for others and get feedback from experts.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Resources to get you started and sharpening your programming skills.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;And lot of things coming from you.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Feel Free to Ask anything without any hesitation.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to do contributions ‚ÅâÔ∏è&lt;/h2&gt; &#xA;&lt;h3&gt;1. Fork the Project üç¥&lt;/h3&gt; &#xA;&lt;p&gt;Fork this repository and make changes in programs as required. Then Push it on your Forked Repo for further Actions. Do not use special characters in the template above.&lt;/p&gt; &#xA;&lt;h3&gt;2. Write a Good Commit Message :-)&lt;/h3&gt; &#xA;&lt;p&gt;You have written some code in your branch, and are ready to commit. So, make sure that you have written it without any errors, clean commit messages.&lt;/p&gt; &#xA;&lt;h3&gt;3. Lastly, submit your Pull Request ‚úÖ&lt;/h3&gt; &#xA;&lt;p&gt;Go through the checklist on the pull request template to guarantee your submission is valid. Our team will review your application, approve and merge your submission if everything is correct. Otherwise, you will get notified of the changes requested in the pull request comment section.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Don&#39;t Forget to add the project in the Respected Programming language folder, if your language&#39;s folder isn&#39;t there, then Inform us to do so or you can do it by your own self as a contribution...!&lt;/li&gt; &#xA; &lt;li&gt;All the codes/programs would be checked and verified then only pull request will be accepted!!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;center&gt; &#xA; &lt;p&gt;&lt;em&gt;&lt;b&gt;Disclaimer:&lt;/b&gt;&lt;/em&gt;&lt;/p&gt; &#xA; &lt;p&gt;Don&#39;t just pull request for sake! All the work should be loyal and being in working condition....!&lt;/p&gt; &#xA;&lt;/center&gt; &#xA;&lt;p&gt;Please check first and then send your codes with description.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;&#34;All the best for the event&#34; ‚ú®&lt;/h3&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/InvisiblePro&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/GitHub-InvisiblePro-blue?logo=github&amp;amp;style=for-the-badge&#34; alt=&#34;InvisiblePro&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>FasterXML/jackson-databind</title>
    <updated>2022-10-07T01:35:23Z</updated>
    <id>tag:github.com,2022-10-07:/FasterXML/jackson-databind</id>
    <link href="https://github.com/FasterXML/jackson-databind" rel="alternate"></link>
    <summary type="html">&lt;p&gt;General data-binding package for Jackson (2.x): works on streaming API (core) implementation(s)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Overview&lt;/h1&gt; &#xA;&lt;p&gt;This project contains the general-purpose data-binding functionality and tree-model for &lt;a href=&#34;https://raw.githubusercontent.com/jackson&#34;&gt;Jackson Data Processor&lt;/a&gt;. It builds on &lt;a href=&#34;https://raw.githubusercontent.com/jackson-core&#34;&gt;Streaming API&lt;/a&gt; (stream parser/generator) package, and uses &lt;a href=&#34;https://raw.githubusercontent.com/jackson-annotations&#34;&gt;Jackson Annotations&lt;/a&gt; for configuration. Project is licensed under &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License 2.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;While the original use case for Jackson was JSON data-binding, it can now be used to read content encoded in other data formats as well, as long as parser and generator implementations exist. Naming of classes uses word &#39;JSON&#39; in many places even though there is no actual hard dependency to JSON format.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Build (CI)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/FasterXML/jackson-databind/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://github.com/FasterXML/jackson-databind/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;Build (github)&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Artifact&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/com.fasterxml.jackson.core/jackson-databind&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/com.fasterxml.jackson.core/jackson-databind/badge.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OSS Sponsorship&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://tidelift.com/subscription/pkg/maven-com-fasterxml-jackson-core-jackson-databind?utm_source=maven-com-fasterxml-jackson-core-jackson-databind&amp;amp;utm_medium=referral&amp;amp;utm_campaign=readme&#34;&gt;&lt;img src=&#34;https://tidelift.com/badges/package/maven/com.fasterxml.jackson.core:jackson-databind&#34; alt=&#34;Tidelift&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Javadocs&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.javadoc.io/doc/com.fasterxml.jackson.core/jackson-databind&#34;&gt;&lt;img src=&#34;https://javadoc.io/badge/com.fasterxml.jackson.core/jackson-databind.svg?sanitize=true&#34; alt=&#34;Javadoc&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Code coverage (2.14)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://codecov.io/github/FasterXML/jackson-databind?branch=2.14&#34;&gt;&lt;img src=&#34;https://codecov.io/github/FasterXML/jackson-databind/coverage.svg?branch=2.14&#34; alt=&#34;codecov.io&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CodeQ (LGTM.com)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://lgtm.com/projects/g/FasterXML/jackson-databind/alerts/&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/alerts/g/FasterXML/jackson-databind.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;LGTM alerts&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/FasterXML/jackson-databind/context:java&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/grade/java/g/FasterXML/jackson-databind.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;Language grade: Java&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Get it!&lt;/h1&gt; &#xA;&lt;h2&gt;Maven&lt;/h2&gt; &#xA;&lt;p&gt;Functionality of this package is contained in Java package &lt;code&gt;com.fasterxml.jackson.databind&lt;/code&gt;, and can be used using following Maven dependency:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;properties&amp;gt;&#xA;  ...&#xA;  &amp;lt;!-- Use the latest version whenever possible. --&amp;gt;&#xA;  &amp;lt;jackson.version&amp;gt;2.13.2&amp;lt;/jackson.version&amp;gt;&#xA;  ...&#xA;&amp;lt;/properties&amp;gt;&#xA;&#xA;&amp;lt;dependencies&amp;gt;&#xA;  ...&#xA;  &amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;com.fasterxml.jackson.core&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;jackson-databind&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;${jackson.version}&amp;lt;/version&amp;gt;&#xA;  &amp;lt;/dependency&amp;gt;&#xA;  ...&#xA;&amp;lt;/dependencies&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Package also depends on &lt;code&gt;jackson-core&lt;/code&gt; and &lt;code&gt;jackson-annotations&lt;/code&gt; packages, but when using build tools like Maven or Gradle, dependencies are automatically included. You may, however, want to use &lt;a href=&#34;https://raw.githubusercontent.com/jackson-bom&#34;&gt;jackson-bom&lt;/a&gt; to ensure compatible versions of dependencies. If not using build tool that can handle dependencies using project&#39;s &lt;code&gt;pom.xml&lt;/code&gt;, you will need to download and include these 2 jars explicitly.&lt;/p&gt; &#xA;&lt;h2&gt;Non-Maven dependency resolution&lt;/h2&gt; &#xA;&lt;p&gt;For use cases that do not automaticall resolve dependencies from Maven repositories, you can still download jars from &lt;a href=&#34;https://repo1.maven.org/maven2/com/fasterxml/jackson/core/jackson-databind/&#34;&gt;Central Maven repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Databind jar is also a functional OSGi bundle, with proper import/export declarations, so it can be use on OSGi container as is.&lt;/p&gt; &#xA;&lt;p&gt;Jackson 2.10 and above include &lt;code&gt;module-info.class&lt;/code&gt; definitions so the jar is also a proper Java Module (JPMS).&lt;/p&gt; &#xA;&lt;p&gt;Jackson 2.12 and above include additional Gradle 6 Module Metadata for version alignment with Gradle.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Use It!&lt;/h1&gt; &#xA;&lt;p&gt;More comprehensive documentation can be found from &lt;a href=&#34;https://raw.githubusercontent.com/jackson-docs&#34;&gt;Jackson-docs&lt;/a&gt; repository; as well as from &lt;a href=&#34;https://raw.githubusercontent.com/FasterXML/wiki&#34;&gt;Wiki&lt;/a&gt; of this project. But here are brief introductionary tutorials, in recommended order of reading.&lt;/p&gt; &#xA;&lt;h2&gt;1 minute tutorial: POJOs to JSON and back&lt;/h2&gt; &#xA;&lt;p&gt;The most common usage is to take piece of JSON, and construct a Plain Old Java Object (&#34;POJO&#34;) out of it. So let&#39;s start there. With simple 2-property POJO like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Note: can use getters/setters as well; here we just use public fields directly:&#xA;public class MyValue {&#xA;  public String name;&#xA;  public int age;&#xA;  // NOTE: if using getters/setters, can keep fields `protected` or `private`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;we will need a &lt;code&gt;com.fasterxml.jackson.databind.ObjectMapper&lt;/code&gt; instance, used for all data-binding, so let&#39;s construct one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ObjectMapper mapper = new ObjectMapper(); // create once, reuse&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default instance is fine for our use -- we will learn later on how to configure mapper instance if necessary. Usage is simple:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MyValue value = mapper.readValue(new File(&#34;data.json&#34;), MyValue.class);&#xA;// or:&#xA;value = mapper.readValue(new URL(&#34;http://some.com/api/entry.json&#34;), MyValue.class);&#xA;// or:&#xA;value = mapper.readValue(&#34;{\&#34;name\&#34;:\&#34;Bob\&#34;, \&#34;age\&#34;:13}&#34;, MyValue.class);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And if we want to write JSON, we do the reverse:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;mapper.writeValue(new File(&#34;result.json&#34;), myResultObject);&#xA;// or:&#xA;byte[] jsonBytes = mapper.writeValueAsBytes(myResultObject);&#xA;// or:&#xA;String jsonString = mapper.writeValueAsString(myResultObject);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So far so good?&lt;/p&gt; &#xA;&lt;h2&gt;3 minute tutorial: Generic collections, Tree Model&lt;/h2&gt; &#xA;&lt;p&gt;Beyond dealing with simple Bean-style POJOs, you can also handle JDK &lt;code&gt;List&lt;/code&gt;s, &lt;code&gt;Map&lt;/code&gt;s:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Map&amp;lt;String, Integer&amp;gt; scoreByName = mapper.readValue(jsonSource, Map.class);&#xA;List&amp;lt;String&amp;gt; names = mapper.readValue(jsonSource, List.class);&#xA;&#xA;// and can obviously write out as well&#xA;mapper.writeValue(new File(&#34;names.json&#34;), names);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;as long as JSON structure matches, and types are simple. If you have POJO values, you need to indicate actual type (note: this is NOT needed for POJO properties with &lt;code&gt;List&lt;/code&gt; etc types):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Map&amp;lt;String, ResultValue&amp;gt; results = mapper.readValue(jsonSource,&#xA;   new TypeReference&amp;lt;Map&amp;lt;String, ResultValue&amp;gt;&amp;gt;() { } );&#xA;// why extra work? Java Type Erasure will prevent type detection otherwise&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(note: no extra effort needed for serialization, regardless of generic types)&lt;/p&gt; &#xA;&lt;p&gt;But wait! There is more!&lt;/p&gt; &#xA;&lt;p&gt;While dealing with &lt;code&gt;Map&lt;/code&gt;s, &lt;code&gt;List&lt;/code&gt;s and other &#34;simple&#34; Object types (Strings, Numbers, Booleans) can be simple, Object traversal can be cumbersome. This is where Jackson&#39;s &lt;a href=&#34;https://github.com/FasterXML/jackson-databind/wiki/JacksonTreeModel&#34;&gt;Tree model&lt;/a&gt; can come in handy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// can be read as generic JsonNode, if it can be Object or Array; or,&#xA;// if known to be Object, as ObjectNode, if array, ArrayNode etc:&#xA;ObjectNode root = mapper.readTree(&#34;stuff.json&#34;);&#xA;String name = root.get(&#34;name&#34;).asText();&#xA;int age = root.get(&#34;age&#34;).asInt();&#xA;&#xA;// can modify as well: this adds child Object as property &#39;other&#39;, set property &#39;type&#39;&#xA;root.with(&#34;other&#34;).put(&#34;type&#34;, &#34;student&#34;);&#xA;String json = mapper.writeValueAsString(root);&#xA;&#xA;// with above, we end up with something like as &#39;json&#39; String:&#xA;// {&#xA;//   &#34;name&#34; : &#34;Bob&#34;, &#34;age&#34; : 13,&#xA;//   &#34;other&#34; : {&#xA;//      &#34;type&#34; : &#34;student&#34;&#xA;//   }&#xA;// }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Tree Model can be more convenient than data-binding, especially in cases where structure is highly dynamic, or does not map nicely to Java classes.&lt;/p&gt; &#xA;&lt;h2&gt;5 minute tutorial: Streaming parser, generator&lt;/h2&gt; &#xA;&lt;p&gt;As convenient as data-binding (to/from POJOs) can be; and as flexible as Tree model can be, there is one more canonical processing model available: incremental (aka &#34;streaming&#34;) model. It is the underlying processing model that data-binding and Tree Model both build upon, but it is also exposed to users who want ultimate performance and/or control over parsing or generation details.&lt;/p&gt; &#xA;&lt;p&gt;For in-depth explanation, look at &lt;a href=&#34;https://github.com/FasterXML/jackson-core&#34;&gt;Jackson Core component&lt;/a&gt;. But let&#39;s look at a simple teaser to whet your appetite.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ObjectMapper mapper = ...;&#xA;// First: write simple JSON output&#xA;File jsonFile = new File(&#34;test.json&#34;);&#xA;// note: method added in Jackson 2.11 (earlier would need to use&#xA;// mapper.getFactory().createGenerator(...)&#xA;JsonGenerator g = f.createGenerator(jsonFile, JsonEncoding.UTF8);&#xA;// write JSON: { &#34;message&#34; : &#34;Hello world!&#34; }&#xA;g.writeStartObject();&#xA;g.writeStringField(&#34;message&#34;, &#34;Hello world!&#34;);&#xA;g.writeEndObject();&#xA;g.close();&#xA;&#xA;// Second: read file back&#xA;try (JsonParser p = mapper.createParser(jsonFile)) {&#xA;  JsonToken t = p.nextToken(); // Should be JsonToken.START_OBJECT&#xA;  t = p.nextToken(); // JsonToken.FIELD_NAME&#xA;  if ((t != JsonToken.FIELD_NAME) || !&#34;message&#34;.equals(p.getCurrentName())) {&#xA;   // handle error&#xA;  }&#xA;  t = p.nextToken();&#xA;  if (t != JsonToken.VALUE_STRING) {&#xA;   // similarly&#xA;  }&#xA;  String msg = p.getText();&#xA;  System.out.printf(&#34;My message to you is: %s!\n&#34;, msg);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;10 minute tutorial: configuration&lt;/h2&gt; &#xA;&lt;p&gt;There are two entry-level configuration mechanisms you are likely to use: &lt;a href=&#34;https://github.com/FasterXML/jackson-databind/wiki/JacksonFeatures&#34;&gt;Features&lt;/a&gt; and &lt;a href=&#34;https://github.com/FasterXML/jackson-annotations&#34;&gt;Annotations&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Commonly used Features&lt;/h3&gt; &#xA;&lt;p&gt;Here are examples of configuration features that you are most likely to need to know about.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s start with higher-level data-binding configuration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// SerializationFeature for changing how JSON is written&#xA;&#xA;// to enable standard indentation (&#34;pretty-printing&#34;):&#xA;mapper.enable(SerializationFeature.INDENT_OUTPUT);&#xA;// to allow serialization of &#34;empty&#34; POJOs (no properties to serialize)&#xA;// (without this setting, an exception is thrown in those cases)&#xA;mapper.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);&#xA;// to write java.util.Date, Calendar as number (timestamp):&#xA;mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);&#xA;&#xA;// DeserializationFeature for changing how JSON is read as POJOs:&#xA;&#xA;// to prevent exception when encountering unknown property:&#xA;mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);&#xA;// to allow coercion of JSON empty String (&#34;&#34;) to null Object value:&#xA;mapper.enable(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition, you may need to change some of low-level JSON parsing, generation details:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// JsonParser.Feature for configuring parsing settings:&#xA;&#xA;// to allow C/C++ style comments in JSON (non-standard, disabled by default)&#xA;// (note: with Jackson 2.5, there is also `mapper.enable(feature)` / `mapper.disable(feature)`)&#xA;mapper.configure(JsonParser.Feature.ALLOW_COMMENTS, true);&#xA;// to allow (non-standard) unquoted field names in JSON:&#xA;mapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true);&#xA;// to allow use of apostrophes (single quotes), non standard&#xA;mapper.configure(JsonParser.Feature.ALLOW_SINGLE_QUOTES, true);&#xA;&#xA;// JsonGenerator.Feature for configuring low-level JSON generation:&#xA;&#xA;// to force escaping of non-ASCII characters:&#xA;mapper.configure(JsonGenerator.Feature.ESCAPE_NON_ASCII, true);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Full set of features are explained on &lt;a href=&#34;https://github.com/FasterXML/jackson-databind/wiki/JacksonFeatures&#34;&gt;Jackson Features&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h3&gt;Annotations: changing property names&lt;/h3&gt; &#xA;&lt;p&gt;The simplest annotation-based approach is to use &lt;code&gt;@JsonProperty&lt;/code&gt; annotation like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class MyBean {&#xA;   private String _name;&#xA;&#xA;   // without annotation, we&#39;d get &#34;theName&#34;, but we want &#34;name&#34;:&#xA;   @JsonProperty(&#34;name&#34;)&#xA;   public String getTheName() { return _name; }&#xA;&#xA;   // note: it is enough to add annotation on just getter OR setter;&#xA;   // so we can omit it here&#xA;   public void setTheName(String n) { _name = n; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are other mechanisms to use for systematic naming changes: see &lt;a href=&#34;https://github.com/FasterXML/jackson-databind/wiki/JacksonCustomNamingConvention&#34;&gt;Custom Naming Convention&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;Note, too, that you can use &lt;a href=&#34;https://github.com/FasterXML/jackson-databind/wiki/JacksonMixinAnnotations&#34;&gt;Mix-in Annotations&lt;/a&gt; to associate all annotations.&lt;/p&gt; &#xA;&lt;h3&gt;Annotations: Ignoring properties&lt;/h3&gt; &#xA;&lt;p&gt;There are two main annotations that can be used to to ignore properties: &lt;code&gt;@JsonIgnore&lt;/code&gt; for individual properties; and &lt;code&gt;@JsonIgnoreProperties&lt;/code&gt; for per-class definition&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// means that if we see &#34;foo&#34; or &#34;bar&#34; in JSON, they will be quietly skipped&#xA;// regardless of whether POJO has such properties&#xA;@JsonIgnoreProperties({ &#34;foo&#34;, &#34;bar&#34; })&#xA;public class MyBean&#xA;{&#xA;   // will not be written as JSON; nor assigned from JSON:&#xA;   @JsonIgnore&#xA;   public String internal;&#xA;&#xA;   // no annotation, public field is read/written normally&#xA;   public String external;&#xA;&#xA;   @JsonIgnore&#xA;   public void setCode(int c) { _code = c; }&#xA;&#xA;   // note: will also be ignored because setter has annotation!&#xA;   public int getCode() { return _code; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As with renaming, note that annotations are &#34;shared&#34; between matching fields, getters and setters: if only one has &lt;code&gt;@JsonIgnore&lt;/code&gt;, it affects others. But it is also possible to use &#34;split&#34; annotations, to for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class ReadButDontWriteProps {&#xA;   private String _name;&#xA;   @JsonProperty public void setName(String n) { _name = n; }&#xA;   @JsonIgnore public String getName() { return _name; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;in this case, no &#34;name&#34; property would be written out (since &#39;getter&#39; is ignored); but if &#34;name&#34; property was found from JSON, it would be assigned to POJO property!&lt;/p&gt; &#xA;&lt;p&gt;For a more complete explanation of all possible ways of ignoring properties when writing out JSON, check &lt;a href=&#34;http://www.cowtowncoder.com/blog/archives/2011/02/entry_443.html&#34;&gt;&#34;Filtering properties&#34;&lt;/a&gt; article.&lt;/p&gt; &#xA;&lt;h3&gt;Annotations: using custom constructor&lt;/h3&gt; &#xA;&lt;p&gt;Unlike many other data-binding packages, Jackson does not require you to define &#34;default constructor&#34; (constructor that does not take arguments). While it will use one if nothing else is available, you can easily define that an argument-taking constructor is used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class CtorBean&#xA;{&#xA;  public final String name;&#xA;  public final int age;&#xA;&#xA;  @JsonCreator // constructor can be public, private, whatever&#xA;  private CtorBean(@JsonProperty(&#34;name&#34;) String name,&#xA;    @JsonProperty(&#34;age&#34;) int age)&#xA;  {&#xA;      this.name = name;&#xA;      this.age = age;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Constructors are especially useful in supporting use of &lt;a href=&#34;http://www.cowtowncoder.com/blog/archives/2010/08/entry_409.html&#34;&gt;Immutable objects&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can also define &#34;factory methods&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class FactoryBean&#xA;{&#xA;    // fields etc omitted for brevity&#xA;&#xA;    @JsonCreator&#xA;    public static FactoryBean create(@JsonProperty(&#34;name&#34;) String name) {&#xA;      // construct and return an instance&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that use of a &#34;creator method&#34; (&lt;code&gt;@JsonCreator&lt;/code&gt; with &lt;code&gt;@JsonProperty&lt;/code&gt; annotated arguments) does not preclude use of setters: you can mix and match properties from constructor/factory method with ones that are set via setters or directly using fields.&lt;/p&gt; &#xA;&lt;h2&gt;Tutorial: fancier stuff, conversions&lt;/h2&gt; &#xA;&lt;p&gt;One useful (but not very widely known) feature of Jackson is its ability to do arbitrary POJO-to-POJO conversions. Conceptually you can think of conversions as sequence of 2 steps: first, writing a POJO as JSON, and second, binding that JSON into another kind of POJO. Implementation just skips actual generation of JSON, and uses more efficient intermediate representation.&lt;/p&gt; &#xA;&lt;p&gt;Conversions work between any compatible types, and invocation is as simple as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ResultType result = mapper.convertValue(sourceObject, ResultType.class);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and as long as source and result types are compatible -- that is, if to-JSON, from-JSON sequence would succeed -- things will &#34;just work&#34;. But here are couple of potentially useful use cases:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Convert from List&amp;lt;Integer&amp;gt; to int[]&#xA;List&amp;lt;Integer&amp;gt; sourceList = ...;&#xA;int[] ints = mapper.convertValue(sourceList, int[].class);&#xA;// Convert a POJO into Map!&#xA;Map&amp;lt;String,Object&amp;gt; propertyMap = mapper.convertValue(pojoValue, Map.class);&#xA;// ... and back&#xA;PojoType pojo = mapper.convertValue(propertyMap, PojoType.class);&#xA;// decode Base64! (default byte[] representation is base64-encoded String)&#xA;String base64 = &#34;TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24sIGJ1dCBieSB0aGlz&#34;;&#xA;byte[] binary = mapper.convertValue(base64, byte[].class);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Basically, Jackson can work as a replacement for many Apache Commons components, for tasks like base64 encoding/decoding, and handling of &#34;dyna beans&#34; (Maps to/from POJOs).&lt;/p&gt; &#xA;&lt;h2&gt;Tutorial: Builder design pattern + Jackson&lt;/h2&gt; &#xA;&lt;p&gt;The Builder design pattern is a creational design pattern and can be used to create complex objects step by step. If we have an object that needs multiple checks on other dependencies, In such cases, it is preferred to use builder design pattern.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s consider the person structure, which has some optional fields&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Person {&#xA;    private final String name;&#xA;    private final Integer age;&#xA; &#xA;    // getters&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let‚Äôs see how we can employ its power in deserialization. First of all, let‚Äôs declare a private all-arguments constructor, and a Builder class.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private Person(String name, Integer age) {&#xA;    this.name = name;&#xA;    this.age = age;&#xA;}&#xA; &#xA;static class Builder {&#xA;    String name;&#xA;    Integer age;&#xA;    &#xA;    Builder withName(String name) {&#xA;        this.name = name;&#xA;        return this;&#xA;    }&#xA;    &#xA;    Builder withAge(Integer age) {&#xA;        this.age = age;&#xA;        return this;&#xA;    }&#xA;    &#xA;    public Person build() {&#xA;        return new Person(name, age);&#xA;    } &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;First of all, we need to mark our class with &lt;code&gt;@JsonDeserialize&lt;/code&gt; annotation, passing a builder parameter with a fully qualified domain name of a builder class. After that, we need to annotate the builder class itself as &lt;code&gt;@JsonPOJOBuilder&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@JsonDeserialize(builder = Person.Builder.class)&#xA;public class Person {&#xA;    //...&#xA;    &#xA;    @JsonPOJOBuilder&#xA;    static class Builder {&#xA;        //...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A simple unit test will be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String json = &#34;{\&#34;name\&#34;:\&#34;Hassan\&#34;,\&#34;age\&#34;:23}&#34;;&#xA;Person person = new ObjectMapper().readValue(json, Person.class);&#xA; &#xA;assertEquals(&#34;Hassan&#34;, person.getName());&#xA;assertEquals(23, person.getAge().intValue());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your builder pattern implementation uses other prefixes for methods or uses other names than build() for the builder method Jackson also provide a handy way for you.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you have a builder class uses the &#34;set&#34; prefix for its methods and use the create() method instead of build() for building the whole class, you have to annotate your class like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@JsonPOJOBuilder(buildMethodName = &#34;create&#34;, withPrefix = &#34;set&#34;)&#xA;static class Builder {&#xA;    String name;&#xA;    Integer age;&#xA;    &#xA;    Builder setName(String name) {&#xA;        this.name = name;&#xA;        return this;&#xA;    }&#xA;    &#xA;    Builder setAge(Integer age) {&#xA;        this.age = age;&#xA;        return this;&#xA;    }&#xA;    &#xA;    public Person create() {&#xA;        return new Person(name, age);&#xA;    } &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Overall, Jackson library is very powerful in deserializing objects using builder pattern.&lt;/p&gt; &#xA;&lt;h1&gt;Contribute!&lt;/h1&gt; &#xA;&lt;p&gt;We would love to get your contribution, whether it&#39;s in form of bug reports, Requests for Enhancement (RFE), documentation, or code patches.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/FasterXML/jackson/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for details on things like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Community, ways to interact (mailing lists, gitter)&lt;/li&gt; &#xA; &lt;li&gt;Issue tracking (&lt;a href=&#34;https://github.com/FasterXML/jackson-databind/issues&#34;&gt;GitHub Issues&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Paperwork: CLA (just once before the first merged contribution)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Limitation on Dependencies by Core Components&lt;/h2&gt; &#xA;&lt;p&gt;One additional limitation exists for so-called core components (streaming api, jackson-annotations and jackson-databind): no additional dependencies are allowed beyond:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Core components may rely on any methods included in the supported JDK &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Minimum Java version is Java 7 for Jackson 2.7 - 2.12 of &lt;code&gt;jackson-databind&lt;/code&gt; and most non-core components&lt;/li&gt; &#xA;   &lt;li&gt;Minimum Java version is Java 8 for Jackson 2.13 and later&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Jackson-databind (this package) depends on the other two (annotations, streaming).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This means that anything that has to rely on additional APIs or libraries needs to be built as an extension, usually a Jackson module.&lt;/p&gt; &#xA;&lt;h2&gt;Branches&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;master&lt;/code&gt; branch is for developing the next major Jackson version -- 3.0 -- but there are active maintenance branches in which much of development happens:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;2.14&lt;/code&gt; is the branch for &#34;next&#34; minor version to release (as of April 2022)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;2.13&lt;/code&gt; is the current stable minor 2.x version&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;2.12&lt;/code&gt; is for selected backported fixes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Older branches are usually not maintained after being declared as closed on &lt;a href=&#34;https://github.com/FasterXML/jackson/wiki/Jackson-Releases&#34;&gt;Jackson Releases&lt;/a&gt; page, but exist just in case a rare emergency patch is needed. All released versions have matching git tags (&lt;code&gt;jackson-dataformats-binary-2.12.3&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Differences from Jackson 1.x&lt;/h2&gt; &#xA;&lt;p&gt;Project contains versions 2.0 and above: source code for last (1.x) release, 1.9, is available at &lt;a href=&#34;https://raw.githubusercontent.com/jackson-1&#34;&gt;Jackson-1&lt;/a&gt; repo.&lt;/p&gt; &#xA;&lt;p&gt;Main differences compared to 1.x &#34;mapper&#34; jar are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Maven build instead of Ant&lt;/li&gt; &#xA; &lt;li&gt;Java package is now &lt;code&gt;com.fasterxml.jackson.databind&lt;/code&gt; (instead of &lt;code&gt;org.codehaus.jackson.map&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;h3&gt;Community support&lt;/h3&gt; &#xA;&lt;p&gt;Jackson components are supported by the Jackson community through mailing lists, Gitter forum, Github issues. See &lt;a href=&#34;https://raw.githubusercontent.com/jackson#participation-contributing&#34;&gt;Participation, Contributing&lt;/a&gt; for full details.&lt;/p&gt; &#xA;&lt;h3&gt;Enterprise support&lt;/h3&gt; &#xA;&lt;p&gt;Available as part of the Tidelift Subscription.&lt;/p&gt; &#xA;&lt;p&gt;The maintainers of &lt;code&gt;jackson-databind&lt;/code&gt; and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. &lt;a href=&#34;https://tidelift.com/subscription/pkg/maven-com-fasterxml-jackson-core-jackson-databind?utm_source=maven-com-fasterxml-jackson-core-jackson-databind&amp;amp;utm_medium=referral&amp;amp;utm_campaign=enterprise&amp;amp;utm_term=repo&#34;&gt;Learn more.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Further reading&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jackson-docs&#34;&gt;Overall Jackson Docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FasterXML/jackson-databind/wiki&#34;&gt;Project wiki page&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Related:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FasterXML/jackson-annotations&#34;&gt;Core annotations&lt;/a&gt; package defines annotations commonly used for configuring databinding details&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FasterXML/jackson-core&#34;&gt;Core parser/generator&lt;/a&gt; package defines low-level incremental/streaming parsers, generators&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jackson&#34;&gt;Jackson Project Home&lt;/a&gt; has links to all modules&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jackson-docs&#34;&gt;Jackson Docs&lt;/a&gt; is project&#39;s documentation hub&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>