<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-28T01:34:37Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tronprotocol/java-tron</title>
    <updated>2022-12-28T01:34:37Z</updated>
    <id>tag:github.com,2022-12-28:/tronprotocol/java-tron</id>
    <link href="https://github.com/tronprotocol/java-tron" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Java implementation of the Tron whitepaper&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;br&gt; &lt;img width=&#34;20%&#34; src=&#34;https://github.com/tronprotocol/wiki/raw/master/images/java-tron.jpg?raw=true&#34;&gt; &lt;br&gt; java-tron &lt;br&gt; &lt;/h1&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt; Java implementation of the &lt;a href=&#34;https://tron.network&#34;&gt;Tron Protocol&lt;/a&gt; &lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://gitter.im/tronprotocol/allcoredev&#34;&gt; &lt;img src=&#34;https://camo.githubusercontent.com/da2edb525cde1455a622c58c0effc3a90b9a181c/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/tronprotocol/java-tron&#34;&gt; &lt;img src=&#34;https://travis-ci.org/tronprotocol/java-tron.svg?branch=develop&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/tronprotocol/java-tron&#34;&gt; &lt;img src=&#34;https://codecov.io/gh/tronprotocol/java-tron/branch/develop/graph/badge.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/tronprotocol/java-tron/issues&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues/tronprotocol/java-tron.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/tronprotocol/java-tron/pulls&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues-pr/tronprotocol/java-tron.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/tronprotocol/java-tron/graphs/contributors&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/contributors/tronprotocol/java-tron.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/tronprotocol/java-tron/develop/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/tronprotocol/java-tron.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tronprotocol/java-tron/develop/#What%E2%80%99s-TRON&#34;&gt;What’s TRON?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tronprotocol/java-tron/develop/#Building-the-source&#34;&gt;Building the Source Code&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tronprotocol/java-tron/develop/#Getting-the-Source-Code&#34;&gt;Getting the Source Code&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tronprotocol/java-tron/develop/#Build&#34;&gt;Build&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tronprotocol/java-tron/develop/#Running-java-tron&#34;&gt;Running java-tron&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tronprotocol/java-tron/develop/#Community&#34;&gt;Community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tronprotocol/java-tron/develop/#Contribution&#34;&gt;Contribution&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tronprotocol/java-tron/develop/#Resources&#34;&gt;Resources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tronprotocol/java-tron/develop/#License&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What&#39;s TRON?&lt;/h2&gt; &#xA;&lt;p&gt;TRON is a project dedicated to building the infrastructure for a truly decentralized Internet.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Tron Protocol, one of the largest blockchain-based operating systems in the world, offers scalable, high-availability and high-throughput support that underlies all the decentralized applications in the TRON ecosystem.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Tron Virtual Machine (TVM) allows anyone to develop decentralized applications (DAPPs) for themselves or their communities with smart contracts thereby making decentralized crowdfunding and token issuance easier than ever.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;TRON enables large-scale development and engagement. With over 2000 transactions per second (TPS), high concurrency, low latency, and massive data transmission. It is ideal for building decentralized entertainment applications. Free features and incentive systems allow developers to create premium app experiences for users.&lt;/p&gt; &#xA;&lt;h1&gt;Building the source&lt;/h1&gt; &#xA;&lt;p&gt;Building java-tron requires &lt;code&gt;git&lt;/code&gt; and &lt;code&gt;Oracle JDK 1.8&lt;/code&gt; to be installed, other JDK versions are not supported yet. Make sure you operate on &lt;code&gt;Linux&lt;/code&gt; and &lt;code&gt;MacOS&lt;/code&gt; operating systems.&lt;/p&gt; &#xA;&lt;p&gt;Clone the repo and switch to the &lt;code&gt;master&lt;/code&gt; branch&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/tronprotocol/java-tron.git&#xA;$ cd java-tron&#xA;$ git checkout -t origin/master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then run the following command to build java-tron, the &lt;code&gt;FullNode.jar&lt;/code&gt; file can be found in &lt;code&gt;java-tron/build/libs/&lt;/code&gt; after build successful.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./gradlew clean build -x test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Running java-tron&lt;/h1&gt; &#xA;&lt;p&gt;Running java-tron requires &lt;code&gt;Oracle JDK 1.8&lt;/code&gt; to be installed, other JDK versions are not supported yet. Make sure you operate on &lt;code&gt;Linux&lt;/code&gt; and &lt;code&gt;MacOS&lt;/code&gt; operating systems.&lt;/p&gt; &#xA;&lt;p&gt;Get the mainnet configurate file: &lt;a href=&#34;https://github.com/tronprotocol/tron-deployment/raw/master/main_net_config.conf&#34;&gt;main_net_config.conf&lt;/a&gt;, other network configuration files can be find &lt;a href=&#34;https://github.com/tronprotocol/tron-deployment&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Hardware Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Minimum:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CPU with 8 cores&lt;/li&gt; &#xA; &lt;li&gt;16GB RAM&lt;/li&gt; &#xA; &lt;li&gt;1TB free storage space to sync the Mainnet&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Recommended:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CPU with 16+ cores(32+ cores for a super representative)&lt;/li&gt; &#xA; &lt;li&gt;32GB+ RAM(64GB+ for a super representative)&lt;/li&gt; &#xA; &lt;li&gt;High Performance SSD with at least 1.5TB free space&lt;/li&gt; &#xA; &lt;li&gt;100+ MB/s download Internet service&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running a full node for mainnet&lt;/h2&gt; &#xA;&lt;p&gt;Full node has full historical data, it is the entry point into the TRON network , it can be used by other processes as a gateway into the TRON network via HTTP and GRPC endpoints. You can interact with the TRON network through full node：transfer assets, deploy contracts, interact with contracts and so on. &lt;code&gt;-c &lt;/code&gt; parameter specifies a configuration file to run a full node:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ nohup java -Xms9G -Xmx9G -XX:ReservedCodeCacheSize=256m \&#xA;             -XX:MetaspaceSize=256m -XX:MaxMetaspaceSize=512m \&#xA;             -XX:MaxDirectMemorySize=1G -XX:+PrintGCDetails \&#xA;             -XX:+PrintGCDateStamps  -Xloggc:gc.log \&#xA;             -XX:+UseConcMarkSweepGC -XX:NewRatio=2 \&#xA;             -XX:+CMSScavengeBeforeRemark -XX:+ParallelRefProcEnabled \&#xA;             -XX:+HeapDumpOnOutOfMemoryError \&#xA;             -XX:+UseCMSInitiatingOccupancyOnly  -XX:CMSInitiatingOccupancyFraction=70 \&#xA;             -jar FullNode.jar -c main_net_config.conf &amp;gt;&amp;gt; start.log 2&amp;gt;&amp;amp;1 &amp;amp;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running a super representative node for mainnet&lt;/h2&gt; &#xA;&lt;p&gt;Adding the &lt;code&gt;--witness&lt;/code&gt; parameter to the startup command, full node will run as a super representative node. The super representative node supports all the functions of the full node and also supports block production. Before running, make sure you have a super representative account and get votes from others，once the number of obtained votes ranks in the top 27, your super representative node will participate in block production.&lt;/p&gt; &#xA;&lt;p&gt;Fill in the private key of super representative address into the &lt;code&gt;localwitness&lt;/code&gt; list in the &lt;code&gt;main_net_config.conf&lt;/code&gt;, here is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; localwitness = [&#xA;     650950B193DDDDB35B6E48912DD28F7AB0E7140C1BFDEFD493348F02295BD812&#xA; ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then run the following command to start the node:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ nohup java -Xms9G -Xmx9G -XX:ReservedCodeCacheSize=256m \&#xA;             -XX:MetaspaceSize=256m -XX:MaxMetaspaceSize=512m \&#xA;             -XX:MaxDirectMemorySize=1G -XX:+PrintGCDetails \&#xA;             -XX:+PrintGCDateStamps  -Xloggc:gc.log \&#xA;             -XX:+UseConcMarkSweepGC -XX:NewRatio=2 \&#xA;             -XX:+CMSScavengeBeforeRemark -XX:+ParallelRefProcEnabled \&#xA;             -XX:+HeapDumpOnOutOfMemoryError \&#xA;             -XX:+UseCMSInitiatingOccupancyOnly  -XX:CMSInitiatingOccupancyFraction=70 \&#xA;             -jar FullNode.jar --witness -c main_net_config.conf &amp;gt;&amp;gt; start.log 2&amp;gt;&amp;amp;1 &amp;amp;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quick Start Tool&lt;/h2&gt; &#xA;&lt;p&gt;An easier way to build and run java-tron is to use &lt;code&gt;start.sh&lt;/code&gt;, &lt;code&gt;start.sh&lt;/code&gt; is a quick start script written in shell language, you can use it to build and run java-tron quickly and easily.&lt;/p&gt; &#xA;&lt;p&gt;Here are some common use cases of the scripting tool&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &lt;code&gt;start.sh&lt;/code&gt; to start a full node with the downloaded &lt;code&gt;FullNode.jar&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;start.sh&lt;/code&gt; to download the latest &lt;code&gt;FullNode.jar&lt;/code&gt; and start a full node.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;start.sh&lt;/code&gt; to download the latest source code and compile a &lt;code&gt;FullNode.jar&lt;/code&gt; and then start a full node.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more details, please refer to the tool &lt;a href=&#34;https://raw.githubusercontent.com/tronprotocol/java-tron/develop/shell.md&#34;&gt;guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Run inside Docker container&lt;/h2&gt; &#xA;&lt;p&gt;One of the quickest ways to get &lt;code&gt;java-tron&lt;/code&gt; up and running on your machine is by using Docker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ docker run -d --name=&#34;java-tron&#34; \&#xA;             -v /your_path/output-directory:/java-tron/output-directory \&#xA;             -v /your_path/logs:/java-tron/logs \&#xA;             -p 8090:8090 -p 18888:18888 -p 50051:50051 \&#xA;             tronprotocol/java-tron \&#xA;             -c /java-tron/config/main_net_config.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will mount the &lt;code&gt;output-directory&lt;/code&gt; and &lt;code&gt;logs&lt;/code&gt; directories on the host, the docker.sh tool can also be used to simplify the use of docker, see more &lt;a href=&#34;https://raw.githubusercontent.com/tronprotocol/java-tron/develop/docker/docker.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Community&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/hqKvyAM&#34;&gt;Tron Developers &amp;amp; SRs&lt;/a&gt; is Tron&#39;s official Discord channel. Feel free to join this channel if you have any questions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://t.me/troncoredevscommunity&#34;&gt;Core Devs Community&lt;/a&gt; is the Telegram channel for java-tron community developers. If you want to contribute to java-tron, please join this channel.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/tronprotocol/allcoredev&#34;&gt;tronprotocol/allcoredev&lt;/a&gt; is the official Gitter channel for developers.&lt;/p&gt; &#xA;&lt;h1&gt;Contribution&lt;/h1&gt; &#xA;&lt;p&gt;Thank you for considering to help out with the source code! If you&#39;d like to contribute to java-tron, please see the &lt;a href=&#34;https://raw.githubusercontent.com/tronprotocol/java-tron/develop/CONTRIBUTING.md&#34;&gt;Contribution Guide&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h1&gt;Resources&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@coredevs&#34;&gt;Medium&lt;/a&gt; java-tron&#39;s official technical articles are published there.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tronprotocol.github.io/documentation-en/introduction/&#34;&gt;Documentation&lt;/a&gt; java-tron&#39;s official technical documentation website.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://nileex.io/&#34;&gt;Test network&lt;/a&gt; A stable test network of TRON contributed by TRON community.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tronscan.org/#/&#34;&gt;Tronscan&lt;/a&gt; TRON network blockchain browser.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tronprotocol/wallet-cli&#34;&gt;Wallet-cli&lt;/a&gt; TRON network wallet using command line.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tronprotocol/tips&#34;&gt;TIP&lt;/a&gt; TRON Improvement Proposal (TIP) describes standards for the TRON network.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tronprotocol/tips/tree/master/tp&#34;&gt;TP&lt;/a&gt; TRON Protocol (TP) describes standards already implemented in TRON network but not published as a TIP.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;java-tron is released under the &lt;a href=&#34;https://github.com/tronprotocol/java-tron/raw/master/LICENSE&#34;&gt;LGPLv3 license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>API-Security/APIKit</title>
    <updated>2022-12-28T01:34:37Z</updated>
    <id>tag:github.com,2022-12-28:/API-Security/APIKit</id>
    <link href="https://github.com/API-Security/APIKit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;APIKit：Discovery, Scan and Audit APIs Toolkit All In One.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;APIKit：Discovery, Scan and Audit APIs Toolkit All In One.&lt;/h1&gt; &#xA;&lt;h1&gt;介绍&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;APIKit&lt;/strong&gt;是&lt;a href=&#34;https://github.com/API-Security&#34;&gt;APISecurity社区&lt;/a&gt;发布的第一个开源项目。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;APIKit&lt;/strong&gt;是基于&lt;code&gt;BurpSuite&lt;/code&gt;提供的&lt;code&gt;JavaAPI&lt;/code&gt;开发的插件。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;APIKit&lt;/strong&gt;可以主动/被动扫描发现应用泄露的&lt;code&gt;API文档&lt;/code&gt;，并将&lt;code&gt;API文档&lt;/code&gt;解析成&lt;code&gt;BurpSuite&lt;/code&gt;中的数据包用于&lt;strong&gt;API安全测试&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/API-Security/APIKit/main/img/APIKit_ch.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;实际使用效果如图： &lt;img src=&#34;https://raw.githubusercontent.com/API-Security/APIKit/main/img/demo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;API技术指纹支持&lt;/h1&gt; &#xA;&lt;p&gt;APIKit v1.0支持的API技术的指纹有：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; GraphQL&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; OpenAPI-Swagger&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; SpringbootActuator&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; SOAP-WSDL&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;更多的API指纹正在努力更新~&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; REST-WADL&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; gRPC&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; UPnP&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 更多主流API技术...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;安装&lt;/h1&gt; &#xA;&lt;p&gt;打开&lt;code&gt;BurpSuite&lt;/code&gt;页面,点击Extender然后选择Extensions,添加APIKit.jar。 &lt;img src=&#34;https://raw.githubusercontent.com/API-Security/APIKit/main/img/install.png&#34; alt=&#34;&#34;&gt; 然后APIKit会对进入到&lt;code&gt;BurpSuite&lt;/code&gt;的流量进行被动扫描。解析完成后可以在APIKit面板查看结果，同样Burpsuite的DashBoard也会有issue提示。 &lt;img src=&#34;https://raw.githubusercontent.com/API-Security/APIKit/main/img/demo.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/API-Security/APIKit/main/img/dashboard.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;配置&lt;/h1&gt; &#xA;&lt;p&gt;默认情况下Request和Cookie都不开启。 &lt;img src=&#34;https://raw.githubusercontent.com/API-Security/APIKit/main/img/config.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Send with Cookie&lt;/h2&gt; &#xA;&lt;p&gt;开启Cookie，可以把包的Cookie存下来，生成请求的时候保留Cookie。&lt;/p&gt; &#xA;&lt;h2&gt;Auto Request Sending&lt;/h2&gt; &#xA;&lt;p&gt;开启对API的请求，注意开启API请求后。你需要明确以下几点：&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. 本工具仅面向合法授权的企业安全建设行为，如您需要测试本工具的可用性，请自行搭建靶机环境。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. 在使用本工具进行检测时，您应确保该行为符合当地的法律法规，并且已经取得了足够的授权。请勿对非授权目标进行请求。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. 如您在使用本工具的过程中存在任何非法行为或造成其他损失，您需自行承担相应后果，我们将不承担任何法律及连带责任。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;4. 在安装并使用本工具前，请您务必审慎阅读、充分理解各条款内容，限制、免责条款或者其他涉及您重大权益的条款可能会以加粗、加下划线等形式提示您重点注意。 除非您已充分阅读、完全理解并接受本协议所有条款，否则，请您不要安装并使用本工具。您的使用行为或者您以其他任何明示或者默示方式表示接受本协议的，即视为您已阅读并同意本协议的约束。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;选择开启Auto Request Sending后，可以对子API进行自动化鉴权测试，快速发现API未授权访问漏洞。 &lt;img src=&#34;https://raw.githubusercontent.com/API-Security/APIKit/main/img/req.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;被动扫描&lt;/h1&gt; &#xA;&lt;p&gt;默认情况下流经BurpSuite的流量都会进行API探测解析和扫描。&lt;/p&gt; &#xA;&lt;h1&gt;主动扫描&lt;/h1&gt; &#xA;&lt;p&gt;在任何一个Burpsuite可以右键打开更多选项的页面中，都可以&lt;strong&gt;点击右键&lt;/strong&gt;，选择&lt;strong&gt;Do API scan&lt;/strong&gt;来发起一次主动扫描。 &lt;img src=&#34;https://raw.githubusercontent.com/API-Security/APIKit/main/img/activescan.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;API漏洞自动扫描&lt;/h1&gt; &#xA;&lt;p&gt;所有与&lt;code&gt;BurpSuite&lt;/code&gt;联动的工具均可联动APIKit。比如xray。&lt;/p&gt; &#xA;&lt;h2&gt;xray配置&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./xray_darwin_amd64 webscan --listen 127.0.0.1:7777  --html-output APIKit.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/API-Security/APIKit/main/img/xray.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;BurpSuite配置&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/API-Security/APIKit/main/img/xrayburp.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;实战案例&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;某授权项目站点为/xxgateway/index，APIKit帮助发现/xxgateway/actuator并最后完成RCE。&lt;/li&gt; &#xA; &lt;li&gt;某SRC站点使用了swagger，使用APIKit和xray联动遍历所有的API，最终发现多个高危严重漏洞。&lt;/li&gt; &#xA; &lt;li&gt;更多白/黑盒测试...&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;TODO&lt;/h1&gt; &#xA;&lt;h2&gt;更多的API指纹&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Jolokia&lt;/li&gt; &#xA; &lt;li&gt;REST-WADL&lt;/li&gt; &#xA; &lt;li&gt;gRPC&lt;/li&gt; &#xA; &lt;li&gt;UPnP&lt;/li&gt; &#xA; &lt;li&gt;更多主流API技术...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;更多实用功能&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fuzz鉴权绕过漏洞&lt;/li&gt; &#xA; &lt;li&gt;检测请求返回包中敏感信息 — 发现js中泄露的API — 常见数据解析依赖库识别，比如Fastjson等&lt;/li&gt; &#xA; &lt;li&gt;更多实用功能...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;项目地址&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/API-Security/APIKit&#34;&gt;https://github.com/API-Security/APIKit&lt;/a&gt; &lt;img src=&#34;https://raw.githubusercontent.com/API-Security/APIKit/main/img/APISecurity.png&#34; alt=&#34;&#34;&gt; &lt;strong&gt;API Security是一个分享一切和API安全相关的工具、漏洞环境、书籍、技术文章、新闻资讯、最佳实践白皮书等资料的社区。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;API Security知识星球永久免费，欢迎对API安全感兴趣的信息安全爱好者一起学习交流。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/API-Security/APIKit/main/img/zsxq.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>LinShunKang/MyPerf4J</title>
    <updated>2022-12-28T01:34:37Z</updated>
    <id>tag:github.com,2022-12-28:/LinShunKang/MyPerf4J</id>
    <link href="https://github.com/LinShunKang/MyPerf4J" rel="alternate"></link>
    <summary type="html">&lt;p&gt;High performance Java APM. Powered by ASM. Try it. Test it. If you feel its better, use it.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;简体中文 | &lt;a href=&#34;https://raw.githubusercontent.com/LinShunKang/MyPerf4J/develop/README.EN.md&#34;&gt;English&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;MyPerf4J&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;一个针对高并发、低延迟应用设计的高性能 Java 性能监控和统计工具。&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/LinShunKang/MyPerf4J&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/LinShunKang/MyPerf4J/all.svg?sanitize=true&#34; alt=&#34;GitHub (pre-)release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.com/LinShunKang/MyPerf4J&#34;&gt;&lt;img src=&#34;https://travis-ci.com/LinShunKang/MyPerf4J.svg?branch=develop&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/LinShunKang/MyPerf4J?branch=develop&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/LinShunKang/MyPerf4J/badge.svg?branch=develop&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/LinShunKang/MyPerf4J/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/LinShunKang/MyPerf4J.svg?sanitize=true&#34; alt=&#34;GitHub issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/LinShunKang/MyPerf4J/issues?q=is%3Aissue+is%3Aclosed&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-closed/LinShunKang/MyPerf4J.svg?sanitize=true&#34; alt=&#34;GitHub closed issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/LinShunKang/MyPerf4J/develop/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/LinShunKang/MyPerf4J.svg?sanitize=true&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;价值&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;快速定位性能瓶颈&lt;/li&gt; &#xA; &lt;li&gt;快速定位故障原因&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;优势&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LinShunKang/MyPerf4J/wiki/%E6%80%A7%E8%83%BD%E5%BC%80%E9%94%80&#34;&gt;高性能&lt;/a&gt;: 单线程支持每秒 &lt;strong&gt;1600 万次&lt;/strong&gt; 响应时间的记录，每次记录只花费 &lt;strong&gt;63 纳秒&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LinShunKang/MyPerf4J/wiki/%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86#%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86&#34;&gt;无侵入&lt;/a&gt;: 采用 &lt;strong&gt;JavaAgent&lt;/strong&gt; 方式，对应用程序完全无侵入，无需修改应用代码&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LinShunKang/MyPerf4J/wiki/%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86#%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8&#34;&gt;低内存&lt;/a&gt;: 采用&lt;strong&gt;内存复用&lt;/strong&gt;的方式，整个生命周期只产生极少的临时对象，不影响应用程序的 GC&lt;/li&gt; &#xA; &lt;li&gt;高实时: 支持&lt;strong&gt;秒级统计&lt;/strong&gt;，最低统计粒度为 &lt;strong&gt;1 秒&lt;/strong&gt;，并且是&lt;strong&gt;全量统计&lt;/strong&gt;，不丢失任何一次记录&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;文档&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LinShunKang/MyPerf4J/wiki/English-Doc&#34;&gt;English Doc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LinShunKang/MyPerf4J/wiki/Chinese-Doc&#34;&gt;中文文档&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;监控指标&lt;/h2&gt; &#xA;&lt;p&gt;MyPerf4J 为每个应用收集数十个监控指标，所有的监控指标都是实时采集和展现的。&lt;/p&gt; &#xA;&lt;p&gt;下面是 MyPerf4J 目前支持的监控指标列表:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://grafana.com/dashboards/7766&#34;&gt;Method Metrics&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/LinShunKang/MyPerf4J/wiki/%E6%8C%87%E6%A0%87#method-metrics&#34;&gt;RPS，Count，Avg，Min，Max，StdDev，TP50, TP90, TP95, TP99, TP999, TP9999, TP100&lt;/a&gt; &lt;img src=&#34;https://raw.githubusercontent.com/LinShunKang/Objects/master/MyPerf4J-InfluxDB-Method_Show_Operation.gif&#34; alt=&#34;Markdown&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://grafana.com/dashboards/8787&#34;&gt;JVM Metrics&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/LinShunKang/MyPerf4J/wiki/%E6%8C%87%E6%A0%87#jvm-thread-metrics&#34;&gt;Thread&lt;/a&gt;，&lt;a href=&#34;https://github.com/LinShunKang/MyPerf4J/wiki/%E6%8C%87%E6%A0%87#jvm-memory-metrics&#34;&gt;Memory&lt;/a&gt;，&lt;a href=&#34;https://github.com/LinShunKang/MyPerf4J/wiki/%E6%8C%87%E6%A0%87#jvm-bytebuff-metrics&#34;&gt;ByteBuff&lt;/a&gt;，&lt;a href=&#34;https://github.com/LinShunKang/MyPerf4J/wiki/%E6%8C%87%E6%A0%87#jvm-gc-metrics&#34;&gt;GC&lt;/a&gt;，&lt;a href=&#34;https://github.com/LinShunKang/MyPerf4J/wiki/%E6%8C%87%E6%A0%87#jvm-class-metrics&#34;&gt;Class&lt;/a&gt;，&lt;a href=&#34;https://github.com/LinShunKang/MyPerf4J/wiki/%E6%8C%87%E6%A0%87#jvm-compilation-metrics&#34;&gt;Compilation&lt;/a&gt;，&lt;a href=&#34;https://github.com/LinShunKang/MyPerf4J/wiki/%E6%8C%87%E6%A0%87#jvm-filedescriptor-metrics&#34;&gt;FileDescriptor&lt;/a&gt; &lt;img src=&#34;https://github.com/LinShunKang/Objects/raw/master/images/JVM_Metrics_Dashboard_V2.png?raw=true&#34; alt=&#34;Markdown&#34;&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;想知道如何实现上述效果？请先按照&lt;a href=&#34;https://github.com/LinShunKang/MyPerf4J#%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8&#34;&gt;快速启动&lt;/a&gt;的描述启动应用，再按照&lt;a href=&#34;https://github.com/LinShunKang/MyPerf4J/wiki/InfluxDB_&#34;&gt;这里&lt;/a&gt;的描述进行安装配置即可。&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;快速启动&lt;/h2&gt; &#xA;&lt;p&gt;MyPerf4J 采用 JavaAgent 配置方式，&lt;strong&gt;透明化&lt;/strong&gt;接入应用，对应用代码完全&lt;strong&gt;没有侵入&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;h3&gt;下载&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;下载并解压 &lt;a href=&#34;https://github.com/LinShunKang/Objects/raw/master/zips/CN/MyPerf4J-ASM-3.3.0-SNAPSHOT.zip?raw=true&#34;&gt;MyPerf4J-ASM.zip&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;阅读解压出的 &lt;code&gt;README&lt;/code&gt; 文件&lt;/li&gt; &#xA; &lt;li&gt;修改解压出的 &lt;code&gt;MyPerf4J.properties&lt;/code&gt; 配置文件中 &lt;code&gt;app_name&lt;/code&gt;、&lt;code&gt;metrics.log.xxx&lt;/code&gt; 和 &lt;code&gt;filter.packages.include&lt;/code&gt; 的配置值&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;查看&lt;a href=&#34;https://github.com/LinShunKang/Objects/raw/master/jars/MyPerf4J-3.x.properties&#34;&gt;配置文件模板&lt;/a&gt;。想了解更多的配置？请看&lt;a href=&#34;https://github.com/LinShunKang/MyPerf4J/wiki/3.x-%E9%85%8D%E7%BD%AE&#34;&gt;这里&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;配置&lt;/h3&gt; &#xA;&lt;p&gt;在 JVM 启动参数里加上以下两个参数&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;-javaagent:/path/to/MyPerf4J-ASM.jar&lt;/li&gt; &#xA; &lt;li&gt;-DMyPerf4JPropFile=/path/to/MyPerf4J.properties&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;形如：java -javaagent:/path/to/MyPerf4J-ASM.jar -DMyPerf4JPropFile=/path/to/MyPerf4J.properties &lt;code&gt;-jar yourApp.jar&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;运行&lt;/h3&gt; &#xA;&lt;p&gt;启动应用，监控日志输出到 /path/to/log/method_metrics.log:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;MyPerf4J Method Metrics [2020-01-01 12:49:57, 2020-01-01 12:49:58]&#xA;Method[6]                            Type        Level  TimePercent      RPS  Avg(ms)  Min(ms)  Max(ms)    StdDev    Count     TP50     TP90     TP95     TP99    TP999   TP9999&#xA;DemoServiceImpl.getId2(long)      General      Service      322.50%     6524     0.49        0        1     0.50      6524        0        1        1        1        1        1&#xA;DemoServiceImpl.getId3(long)      General      Service      296.10%     4350     0.68        0        1     0.47      4350        1        1        1        1        1        1&#xA;DemoServiceImpl.getId4(long)      General      Service      164.60%     2176     0.76        0        1     0.43      2176        1        1        1        1        1        1&#xA;DemoServiceImpl.getId1(long)      General      Service        0.00%     8704     0.00        0        0     0.00      8704        0        0        0        0        0        0&#xA;DemoDAO.getId1(long)         DynamicProxy          DAO        0.00%     2176     0.00        0        0     0.00      2176        0        0        0        0        0        0&#xA;DemoDAO.getId2()             DynamicProxy          DAO        0.00%     2176     0.00        0        0     0.00      2176        0        0        0        0        0        0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;卸载&lt;/h3&gt; &#xA;&lt;p&gt;在 JVM 启动参数中去掉以下两个参数，重启即可卸载此工具。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;-javaagent:/path/to/MyPerf4J-ASM.jar&lt;/li&gt; &#xA; &lt;li&gt;-DMyPerf4JPropFile=/path/to/MyPerf4J.properties&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;构建&lt;/h2&gt; &#xA;&lt;p&gt;您可以自行构建 MyPerf4J-ASM.jar&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;git clone &lt;a href=&#34;mailto:git@github.com&#34;&gt;git@github.com&lt;/a&gt;:LinShunKang/MyPerf4J.git&lt;/li&gt; &#xA; &lt;li&gt;mvn clean package&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;MyPerf4J-ASM-${MyPerf4J-version}.jar 在 MyPerf4J-ASM/target/ 目录下&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;问题&lt;/h2&gt; &#xA;&lt;p&gt;如果您有任何问题、疑问或者建议，您可以 &lt;a href=&#34;https://github.com/LinShunKang/MyPerf4J/issues/new/choose&#34;&gt;提交Issue&lt;/a&gt; 或者 &lt;a href=&#34;mailto:linshunkang.chn@gmail.com&#34;&gt;发送邮件&lt;/a&gt; ：）&lt;/p&gt; &#xA;&lt;p&gt;注意，为了保障大家的时间，请保证您已经&lt;strong&gt;完整阅读过&lt;/strong&gt;以下内容：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LinShunKang/MyPerf4J/wiki/%E6%8F%90%E9%97%AE%E6%A8%A1%E6%9D%BF&#34;&gt;提问模板&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LinShunKang/MyPerf4J#%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8&#34;&gt;快速启动&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LinShunKang/MyPerf4J/wiki/Chinese-Doc&#34;&gt;中文文档&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LinShunKang/MyPerf4J/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98&#34;&gt;常见问题&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;已知用户&lt;/h2&gt; &#xA;&lt;p&gt;如果您在使用 MyPerf4J，请告诉我，您的使用对我来说非常重要：&lt;a href=&#34;https://github.com/LinShunKang/MyPerf4J/issues/30&#34;&gt;https://github.com/LinShunKang/MyPerf4J/issues/30&lt;/a&gt;（按登记顺序排列）&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/LinShunKang/Objects/raw/master/logos/Boss_300x300.png?raw=true&#34; width=&#34;80&#34; height=&#34;80&#34;&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; &#xA; &lt;img src=&#34;https://github.com/LinShunKang/Objects/raw/master/logos/Lever.jpeg?raw=true&#34; width=&#34;240&#34; height=&#34;80&#34;&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; &#xA; &lt;img src=&#34;https://github.com/LinShunKang/Objects/raw/master/logos/dianzhang_303x303.jpeg?raw=true&#34; width=&#34;80&#34; height=&#34;80&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;鸣谢&lt;/h2&gt; &#xA;&lt;p&gt;感谢 JetBrains &lt;a href=&#34;https://www.jetbrains.com/community/opensource/#support&#34;&gt;OpenSourceSupport&lt;/a&gt; 所提供的支持 : )&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://resources.jetbrains.com/storage/products/company/brand/logos/jb_beam.svg?sanitize=true&#34; width=&#34;200&#34; height=&#34;200&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;项目捐赠&lt;/h2&gt; &#xA;&lt;p&gt;如果 MyPerf4J 对您有帮助，可以使用微信扫描下面的赞赏码，请我喝杯咖啡 : )&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/LinShunKang/Objects/raw/master/logos/WechatIMG16.jpeg?raw=true&#34; width=&#34;200&#34; height=&#34;200&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;参考项目&lt;/h2&gt; &#xA;&lt;p&gt;MyPerf4J 是受以下项目启发而来：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/perf4j/perf4j&#34;&gt;Perf4J&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alibaba/TProfiler&#34;&gt;TProfiler&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;更多信息&lt;/h2&gt; &#xA;&lt;p&gt;想更深入的了解 MyPerf4J？请看 &lt;a href=&#34;https://github.com/LinShunKang/MyPerf4J/wiki/Chinese-Doc&#34;&gt;https://github.com/LinShunKang/MyPerf4J/wiki/Chinese-Doc&lt;/a&gt;。&lt;/p&gt;</summary>
  </entry>
</feed>