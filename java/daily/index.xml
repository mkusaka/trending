<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-07T01:38:42Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>iBotPeaches/Apktool</title>
    <updated>2023-03-07T01:38:42Z</updated>
    <id>tag:github.com,2023-03-07:/iBotPeaches/Apktool</id>
    <link href="https://github.com/iBotPeaches/Apktool" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A tool for reverse engineering Android apk files&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;Apktool&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;This is the repository for Apktool. If you are looking for the Apktool website. Click &lt;a href=&#34;https://github.com/iBotPeaches/Apktool/tree/gh-pages&#34;&gt;here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/iBotPeaches/Apktool?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/iBotPeaches/Apktool.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/iBotPeaches/Apktool&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/iBotPeaches/Apktool/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/iBotPeaches/Apktool/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/iBotPeaches/Apktool/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%202.0-brightgreen.svg?sanitize=true&#34; alt=&#34;Software License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;It is a tool for reverse engineering 3rd party, closed, binary Android apps. It can decode resources to nearly original form and rebuild them after making some modifications; it makes possible to debug smali code step by step. Also it makes working with app easier because of project-like files structure and automation of some repetitive tasks like building apk, etc.&lt;/p&gt; &#xA;&lt;p&gt;It is NOT intended for piracy and other non-legal uses. It could be used for localizing, adding some features or support for custom platforms and other GOOD purposes. Just try to be fair with authors of an app, that you use and probably like.&lt;/p&gt; &#xA;&lt;h4&gt;Support&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ibotpeaches.github.io/Apktool/&#34;&gt;Project Page&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://web.libera.chat/&#34;&gt;#apktool on libera.chat&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Sponsored by&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sourcetoad.com/cool-tools/apktool/&#34;&gt;Sourcetoad&lt;/a&gt; - helping with a weekly sponsorship for continued improvement and maintenance of the project.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;IDE of Choice&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;JetBrains IntelliJ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Security Vulnerabilities&lt;/h4&gt; &#xA;&lt;p&gt;If you discover a security vulnerability within Apktool, please send an e-mail to Connor Tumbleson at connor.tumbleson(at)gmail.com. All security vulnerabilities will be promptly addressed.&lt;/p&gt; &#xA;&lt;h4&gt;Links&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bitbucket.org/iBotPeaches/apktool/downloads&#34;&gt;Downloads&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://connortumbleson.com/apktool/&#34;&gt;Downloads Mirror&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ibotpeaches.github.io/Apktool/build/&#34;&gt;How to Build&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ibotpeaches.github.io/Apktool/documentation/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iBotPeaches/Apktool/issues&#34;&gt;Bug Reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitter.im/iBotPeaches/Apktool&#34;&gt;Chat on Gitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ibotpeaches.github.io/Apktool/changes/&#34;&gt;Changelog/Information&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forum.xda-developers.com/t/util-dec-2-2020-apktool-tool-for-reverse-engineering-apk-files.1755243/&#34;&gt;XDA Post&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iBotPeaches/Apktool&#34;&gt;Source (Github)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bitbucket.org/iBotPeaches/apktool/&#34;&gt;Source (Bitbucket)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>piomin/sample-spring-microservices-new</title>
    <updated>2023-03-07T01:38:42Z</updated>
    <id>tag:github.com,2023-03-07:/piomin/sample-spring-microservices-new</id>
    <link href="https://github.com/piomin/sample-spring-microservices-new" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Demo for Spring Boot 3(`master` branch)/2(other branches) and Spring Cloud microservices with distributed configuration (Spring Cloud Config), service discovery (Eureka), API gateway (Spring Cloud Gateway, Zuul), Swagger/OpenAPI documentation (Springdoc), logs correlation using Spring Cloud Sleuth/Micrometer OTEL and many more&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Microservices with Spring Cloud Advanced Demo Project &lt;a href=&#34;https://twitter.com/piotr_minkowski&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/piotr_minkowski.svg?style=social&amp;amp;logo=twitter&amp;amp;label=Follow%20Me&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/piomin/sample-spring-microservices-new&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/piomin/sample-spring-microservices-new.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sonarcloud.io/dashboard?id=piomin_sample-spring-microservices-new&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/images/project_badges/sonarcloud-black.svg?sanitize=true&#34; alt=&#34;SonarCloud&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=piomin_sample-spring-microservices-new&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=piomin_sample-spring-microservices-new&amp;amp;metric=bugs&#34; alt=&#34;Bugs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=piomin_sample-spring-microservices-new&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=piomin_sample-spring-microservices-new&amp;amp;metric=coverage&#34; alt=&#34;Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=piomin_sample-spring-microservices-new&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=piomin_sample-spring-microservices-new&amp;amp;metric=ncloc&#34; alt=&#34;Lines of Code&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;In this project I&#39;m demonstrating you the most interesting features of &lt;a href=&#34;https://spring.io/projects/spring-cloud&#34;&gt;Spring Cloud Project&lt;/a&gt; for building microservice-based architecture.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Currently you may find here some examples of microservices implementation using different projects from Spring Cloud. All the examples are divided into the branches and described in a separated articles on my blog. Here&#39;s a full list of available examples:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;(This example has been update to the latest version of Spring Cloud without Zuul) Using Spring Cloud Netlix &lt;strong&gt;Eureka&lt;/strong&gt; as a discovery server, &lt;strong&gt;Zuul&lt;/strong&gt; as a gateway, &lt;strong&gt;OpenFeign&lt;/strong&gt; for communication and Spring Cloud Config Server. The example is available in the branch &lt;a href=&#34;https://github.com/piomin/sample-spring-microservices-new/tree/master&#34;&gt;master&lt;/a&gt;. A detailed guide may be find in the following article: &lt;a href=&#34;https://piotrminkowski.com/2018/04/26/quick-guide-to-microservices-with-spring-boot-2-0-eureka-and-spring-cloud/&#34;&gt;Quick Guide to Microservices with Spring Boot 2.0, Eureka and Spring Cloud&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Using Spring Cloud Alibaba &lt;strong&gt;Nacos&lt;/strong&gt; as a discovery and configuration server, &lt;strong&gt;Zuul&lt;/strong&gt; and &lt;strong&gt;OpenFeign&lt;/strong&gt;. The example is available in the branch &lt;a href=&#34;https://github.com/piomin/sample-spring-microservices-new/tree/alibaba&#34;&gt;alibaba&lt;/a&gt;. A detailed guide may be find in the following article: &lt;a href=&#34;https://piotrminkowski.com/2018/11/15/microservices-with-spring-cloud-alibaba/&#34;&gt;Microservices with Spring Cloud Alibaba&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Using Spring Cloud with Spring Boot support for &lt;strong&gt;GraphQL&lt;/strong&gt; for building microservices, &lt;strong&gt;Apollo&lt;/strong&gt; for inter-service communication and &lt;strong&gt;Eureka&lt;/strong&gt; as a discovery server. The example is available in the branch &lt;a href=&#34;https://github.com/piomin/sample-spring-microservices-new/tree/graphql&#34;&gt;graphql&lt;/a&gt;. A detailed guide may be find in the following article: &lt;a href=&#34;https://piotrminkowski.com/2018/08/16/graphql-the-future-of-microservices/&#34;&gt;GraphQL â€“ The Future of Microservices?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Using Spring Boot and partially Spring Cloud for building microservices deployed on &lt;strong&gt;OpenShift&lt;/strong&gt; with &lt;strong&gt;Source-2-Image&lt;/strong&gt; mechanism. The example is available in the branch &lt;a href=&#34;https://github.com/piomin/sample-spring-microservices-new/tree/openshift&#34;&gt;openshift&lt;/a&gt;. A detailed guide may be find in the following article: &lt;a href=&#34;https://piotrminkowski.com/2019/01/08/running-java-microservices-on-openshift-using-source-2-image/&#34;&gt;Running Java Microservices on OpenShift using Source-2-Image&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Using &lt;a href=&#34;http://ernestort.github.io/Trampoline/&#34;&gt;Trampoline&lt;/a&gt; for managing group of Spring Boot microservices locally. The example is available in the branch &lt;a href=&#34;https://github.com/piomin/sample-spring-microservices-new/tree/trampoline&#34;&gt;trampoline&lt;/a&gt;. A detailed guide may be find in the following article: &lt;a href=&#34;https://piotrminkowski.com/2018/06/08/managing-spring-boot-apps-locally-with-trampoline/&#34;&gt;Managing Spring Boot apps locally with Trampoline&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;Build the apps with images (we need ji for &lt;code&gt;config-service&lt;/code&gt; since it contains &lt;code&gt;curl&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ mvn clean package -Pbuild-image jib:dockerBuild&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run all the containers with &lt;code&gt;docker-compose&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the most cases you need to have Maven and JDK8+. In the fourth example with OpenShift you will have to run &lt;strong&gt;Minishift&lt;/strong&gt; on your machine. The best way to run the sample applications is with IDEs like IntelliJ IDEA or Eclipse.&lt;/p&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;Our sample microservices-based system consists of the following modules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;gateway-service&lt;/strong&gt; - a module that Spring Cloud Netflix Zuul for running Spring Boot application that acts as a proxy/gateway in our architecture.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;config-service&lt;/strong&gt; - a module that uses Spring Cloud Config Server for running configuration server in the &lt;code&gt;native&lt;/code&gt; mode. The configuration files are placed on the classpath.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;discovery-service&lt;/strong&gt; - a module that depending on the example it uses Spring Cloud Netflix Eureka or Spring Cloud Netlix Alibaba Nacos as an embedded discovery server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;employee-service&lt;/strong&gt; - a module containing the first of our sample microservices that allows to perform CRUD operation on in-memory repository of employees&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;department-service&lt;/strong&gt; - a module containing the second of our sample microservices that allows to perform CRUD operation on in-memory repository of departments. It communicates with employee-service.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;organization-service&lt;/strong&gt; - a module containing the third of our sample microservices that allows to perform CRUD operation on in-memory repository of organizations. It communicates with both employee-service and organization-service.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following picture illustrates the architecture described above.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://piotrminkowski.files.wordpress.com/2018/04/spring-cloud-1.png&#34; title=&#34;Architecture&#34;&gt;&lt;br&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Minestom/Minestom</title>
    <updated>2023-03-07T01:38:42Z</updated>
    <id>tag:github.com,2023-03-07:/Minestom/Minestom</id>
    <link href="https://github.com/Minestom/Minestom" rel="alternate"></link>
    <summary type="html">&lt;p&gt;1.19.2 Lightweight Minecraft server&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Minestom/Minestom/master/banner_dark.png#gh-dark-mode-only&#34; alt=&#34;banner&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Minestom/Minestom/master/banner_light.png#gh-light-mode-only&#34; alt=&#34;banner&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Minestom&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Minestom/Minestom/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/Minestom/Minestom?style=for-the-badge&amp;amp;color=b2204c&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/RichardLitt/standard-readme&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/readme%20style-standard-brightgreen.svg?style=for-the-badge&#34; alt=&#34;standard-readme compliant&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://minestom.github.io/Minestom/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/documentation-javadocs-4d7a97?style=for-the-badge&#34; alt=&#34;javadocs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://wiki.minestom.net/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/documentation-wiki-74aad6?style=for-the-badge&#34; alt=&#34;wiki&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/pkFRvqB&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/706185253441634317?label=discord&amp;amp;style=for-the-badge&amp;amp;color=7289da&#34; alt=&#34;discord-banner&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Minestom is an open-source library that enables developers to create their own Minecraft server software, without any code from Mojang.&lt;/p&gt; &#xA;&lt;p&gt;The main difference between Mojang&#39;s vanilla server and a minestom-based server, is that ours does not contain any features by default! However, we have a complete API which is designed to allow you to make anything possible, with ease.&lt;/p&gt; &#xA;&lt;p&gt;This is a developer API not meant to be used by end-users. Replacing Bukkit/Forge/Sponge with this &lt;strong&gt;will not work&lt;/strong&gt; since we do not implement any of their APIs.&lt;/p&gt; &#xA;&lt;h1&gt;Table of contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Minestom/Minestom/master/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Minestom/Minestom/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Minestom/Minestom/master/#why-minestom&#34;&gt;Why Minestom?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Minestom/Minestom/master/#advantages-and-disadvantages&#34;&gt;Advantages &amp;amp; Disadvantages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Minestom/Minestom/master/#api&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Minestom/Minestom/master/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Minestom/Minestom/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Minestom/Minestom/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;p&gt;Minestom is not installed like Bukkit/Forge/Sponge. As Minestom is a Java library, it must be loaded the same way any other Java library may be loaded. This means you need to add Minestom as a dependency, add your code and compile by yourself.&lt;/p&gt; &#xA;&lt;p&gt;For adding the required repositories and dependencies, &lt;a href=&#34;https://wiki.minestom.net/setup/dependencies&#34;&gt;check this out&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The newest version can be found &lt;a href=&#34;https://jitpack.io/#Minestom/Minestom&#34;&gt;here: &lt;img src=&#34;https://jitpack.io/v/Minestom/Minestom.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Our own WIP implementation for Vanilla can be found &lt;a href=&#34;https://github.com/Minestom/VanillaReimplementation&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;An example of how to use the Minestom library is available &lt;a href=&#34;https://raw.githubusercontent.com/Minestom/Minestom/master/demo&#34;&gt;here&lt;/a&gt;. Alternatively you can check the official &lt;a href=&#34;https://wiki.minestom.net/&#34;&gt;wiki&lt;/a&gt; or the &lt;a href=&#34;https://minestom.github.io/Minestom/&#34;&gt;javadocs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Why Minestom?&lt;/h1&gt; &#xA;&lt;p&gt;Minecraft has evolved a lot since its release, most of the servers today do not take advantage of vanilla features and even have to struggle because of them. Our target audience is those who want to make a server that benefits little from vanilla features. e.g. creative, kitpvp. The goal is to offer more performance for those who need it. In other words, it makes sense to use Minestom when it takes less time to implement every missing vanilla feature you want than removing every vanilla feature that will slow you down.&lt;/p&gt; &#xA;&lt;h1&gt;Advantages and Disadvantages&lt;/h1&gt; &#xA;&lt;p&gt;Minestom isn&#39;t perfect, our choices make it much better for some cases, worse for some others.&lt;/p&gt; &#xA;&lt;h2&gt;Advantages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Remove the overhead of vanilla features&lt;/li&gt; &#xA; &lt;li&gt;Multi-threaded&lt;/li&gt; &#xA; &lt;li&gt;Instance system (Collections of blocks and entities) which is much more scalable than worlds&lt;/li&gt; &#xA; &lt;li&gt;Open-source&lt;/li&gt; &#xA; &lt;li&gt;Modern API&lt;/li&gt; &#xA; &lt;li&gt;No more legacy NMS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Disadvantages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Does not work with Bukkit/Forge/Sponge plugins or mods&lt;/li&gt; &#xA; &lt;li&gt;Does not work with older clients (using a proxy with ViaBackwards is possible)&lt;/li&gt; &#xA; &lt;li&gt;Bad for those who want a vanilla experience&lt;/li&gt; &#xA; &lt;li&gt;Longer to develop something playable&lt;/li&gt; &#xA; &lt;li&gt;Multi-threaded environments need extra consideration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;API&lt;/h1&gt; &#xA;&lt;p&gt;Even if we do not include anything by default in the game, we simplify the way you add them, here is a preview.&lt;/p&gt; &#xA;&lt;h2&gt;Instances&lt;/h2&gt; &#xA;&lt;p&gt;It is our major concept, worlds are great for survival with friends, but when it scales up it can become unmanageable. The best examples can be found in Skyblock or minigames, not being able to separate each part properly and being forced to save everything in files, not to say the overhead caused by unnecessary data contained in them. Instances are a lightweight solution to it, being able to have every chunk in memory only, copying and sending it to another player in no time, with custom serialization and much more...&lt;/p&gt; &#xA;&lt;p&gt;Being able to create instances directly on the go is a must-have, we believe it can push many more projects forward.&lt;/p&gt; &#xA;&lt;p&gt;Instances also come with performance benefits, unlike some others which will be fully single-threaded or maybe using one thread per world we are using a set number of threads (pool) to manage all chunks independently from instances, meaning using more CPU power.&lt;/p&gt; &#xA;&lt;h2&gt;Blocks&lt;/h2&gt; &#xA;&lt;p&gt;Minestom by default does not know what is a chest, you will have to tell him that it opens an inventory. Every &#34;special blocks&#34; (which aren&#39;t only visual) need a specialized handler. After applying this handler, you have a block that can be placed anywhere simply. However, all blocks are visually there, they just won&#39;t have interaction by default.&lt;/p&gt; &#xA;&lt;h2&gt;Entities&lt;/h2&gt; &#xA;&lt;p&gt;The terms &#34;passive&#34; or &#34;aggressive&#34; monsters do not exist, nobody stops you from making a flying chicken rushing into any players coming too close, doing so with NMS is a real mess because of obfuscation and the large inheritance.&lt;/p&gt; &#xA;&lt;h2&gt;Inventories&lt;/h2&gt; &#xA;&lt;p&gt;It is a field where Minecraft evolved a lot, inventories are now used a lot as client&amp;lt;-&amp;gt;server interface with clickable items and callback, we support these interactions natively without the need of programming your solution.&lt;/p&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;p&gt;Commands are the simplest way of communication between clients and server. Since 1.13 Minecraft has incorporated a new library denominated &#34;Brigadier&#34;, we then integrated an API designed to use the full potential of args types.&lt;/p&gt; &#xA;&lt;h1&gt;Credits&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://github.com/Minestom/Minestom/graphs/contributors&#34;&gt;contributors&lt;/a&gt; of the project&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.vg/&#34;&gt;The Minecraft Coalition&lt;/a&gt; and &lt;a href=&#34;https://github.com/mcdevs&#34;&gt;&lt;code&gt;#mcdevs&lt;/code&gt;&lt;/a&gt; - protocol and file formats research.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://minecraft.gamepedia.com/Minecraft_Wiki&#34;&gt;The Minecraft Wiki&lt;/a&gt; for all their useful info&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ej-technologies.com/products/jprofiler/overview.html&#34;&gt;JProfiler&lt;/a&gt; for their amazing Java profiler&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/Minestom/Minestom/master/CONTRIBUTING.md&#34;&gt;the contributing file&lt;/a&gt;! All WIP features are previewed as Draft PRs&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/Minestom/Minestom/LICENSE&#34;&gt;Apache License Version 2.0&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>