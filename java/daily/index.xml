<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-09-14T01:30:43Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>unitycatalog/unitycatalog</title>
    <updated>2024-09-14T01:30:43Z</updated>
    <id>tag:github.com,2024-09-14:/unitycatalog/unitycatalog</id>
    <link href="https://github.com/unitycatalog/unitycatalog" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open, Multi-modal Catalog for Data &amp; AI&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/unitycatalog/unitycatalog/main/docs/assets/images/uc-logo.png&#34; width=&#34;600px&#34;&gt; &#xA;&lt;h1&gt;Unity Catalog: Open, Multimodal Catalog for Data &amp;amp; AI&lt;/h1&gt; &#xA;&lt;p&gt;Unity Catalog is the industryâ€™s only universal catalog for data and AI.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multimodal interface supports any format, engine, and asset&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Multi-format support: It is extensible and supports Delta Lake, Apache Iceberg and Apache Hudi via UniForm, Apache Parquet, JSON, CSV, and many others.&lt;/li&gt; &#xA;   &lt;li&gt;Multi-engine support: With its open APIs, data cataloged in Unity can be read by many leading compute engines.&lt;/li&gt; &#xA;   &lt;li&gt;Multimodal: It supports all your data and AI assets, including tables, files, functions, AI models.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Open source API and implementation&lt;/strong&gt; - OpenAPI spec and OSS implementation (Apache 2.0 license). It is also compatible with Apache Hive&#39;s metastore API and Apache Iceberg&#39;s REST catalog API. Unity Catalog is currently a sandbox project with LF AI and Data Foundation (part of the Linux Foundation).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Unified governance&lt;/strong&gt; for data and AI - Govern and secure tabular data, unstructured assets, and AI assets with a single interface.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The first release of Unity Catalog focuses on a core set of APIs for tables, unstructured data, and AI assets - with more to come soon on governance, access, and client interoperability. This is just the beginning!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/unitycatalog/unitycatalog/main/docs/assets/images/uc.png&#34; alt=&#34;UC Hero Image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Vibrant ecosystem&lt;/h3&gt; &#xA;&lt;p&gt;This is a community effort. Unity Catalog is supported by&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/&#34;&gt;Amazon Web Services&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.confluent.io/&#34;&gt;Confluent&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Eventual-Inc/Daft&#34;&gt;Daft (Eventual)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.getdbt.com/&#34;&gt;dbt Labs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://duckdblabs.com/&#34;&gt;DuckDB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.fivetran.com/&#34;&gt;Fivetran&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cloud.google.com/&#34;&gt;Google Cloud&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://granica.ai/&#34;&gt;Granica&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.immuta.com/&#34;&gt;Immuta&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.informatica.com/&#34;&gt;Informatica&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lancedb.com/&#34;&gt;LanceDB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.langchain.com/&#34;&gt;LangChain&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.llamaindex.ai/&#34;&gt;LlamaIndex&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://azure.microsoft.com&#34;&gt;Microsoft Azure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nvidia.com/&#34;&gt;NVIDIA&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.onehouse.ai/&#34;&gt;Onehouse&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.puppygraph.com/&#34;&gt;PuppyGraph&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.salesforce.com/&#34;&gt;Salesforce&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://celerdata.com/&#34;&gt;StarRocks (CelerData)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/spiceai/spiceai&#34;&gt;Spice AI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.tecton.ai/&#34;&gt;Tecton&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://unstructured.io/&#34;&gt;Unstructured&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Unity Catalog is proud to be hosted by the LF AI &amp;amp; Data Foundation.&lt;/p&gt; &#xA;&lt;a href=&#34;https://lfaidata.foundation/projects&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/unitycatalog/unitycatalog/main/docs/assets/images/lfaidata-project-badge-sandbox-color.png&#34; width=&#34;200px&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Quickstart - Hello UC!&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s take Unity Catalog for spin. In this guide, we are going to do the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In one terminal, run the UC server.&lt;/li&gt; &#xA; &lt;li&gt;In another terminal, we will explore the contents of the UC server using a CLI. An example project is provided to demonstrate how to use the UC SDK for various assets as well as provide a convenient way to explore the content of any UC server implementation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;You have to ensure that your local environment has the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone this repository.&lt;/li&gt; &#xA; &lt;li&gt;Ensure the &lt;code&gt;JAVA_HOME&lt;/code&gt; environment variable your terminal is configured to point to JDK17.&lt;/li&gt; &#xA; &lt;li&gt;Compile the project using &lt;code&gt;build/sbt package&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you prefer to run this using the Unity Catalog Dockerized Environment, please refer to the Docker &lt;a href=&#34;https://raw.githubusercontent.com/unitycatalog/unitycatalog/main/docker/README.md&#34;&gt;README.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Run the UC Server&lt;/h3&gt; &#xA;&lt;p&gt;In a terminal, in the cloned repository root directory, start the UC server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bin/start-uc-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the remaining steps, continue in a different terminal.&lt;/p&gt; &#xA;&lt;h3&gt;Operate on Delta tables with the CLI&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s list the tables.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bin/uc table list --catalog unity --schema default&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should see a few tables. Some details are truncated because of the nested nature of the data. To see all the content, you can add &lt;code&gt;--output jsonPretty&lt;/code&gt; to any command.&lt;/p&gt; &#xA;&lt;p&gt;Next, let&#39;s get the metadata of one of those tables.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bin/uc table get --full_name unity.default.numbers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can see that it is a Delta table. Now, specifically for Delta tables, this CLI can print a snippet of the contents of a Delta table (powered by the &lt;a href=&#34;https://delta.io/blog/delta-kernel/&#34;&gt;Delta Kernel Java&lt;/a&gt; project). Let&#39;s try that.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bin/uc table read --full_name unity.default.numbers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Operate on Delta tables with DuckDB&lt;/h3&gt; &#xA;&lt;p&gt;For operating on tables with DuckDB, you will have to &lt;a href=&#34;https://duckdb.org/docs/installation/&#34;&gt;install it&lt;/a&gt; (version 1.0). Let&#39;s start DuckDB and install a couple of extensions. To start DuckDB, run the command &lt;code&gt;duckdb&lt;/code&gt; in the terminal. Then, in the DuckDB shell, run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;install uc_catalog from core_nightly;&#xA;load uc_catalog;&#xA;install delta;&#xA;load delta;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have installed these extensions before, you may have to run &lt;code&gt;update extensions&lt;/code&gt; and restart DuckDB for the following steps to work.&lt;/p&gt; &#xA;&lt;p&gt;Now that we have DuckDB all set up, let&#39;s try connecting to UC by specifying a secret.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE SECRET (&#xA;      TYPE UC,&#xA;      TOKEN &#39;not-used&#39;,&#xA;      ENDPOINT &#39;http://127.0.0.1:8080&#39;,&#xA;      AWS_REGION &#39;us-east-2&#39;&#xA; );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should see it print a short table saying &lt;code&gt;Success&lt;/code&gt; = &lt;code&gt;true&lt;/code&gt;. Then we attach the &lt;code&gt;unity&lt;/code&gt; catalog to DuckDB.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;ATTACH &#39;unity&#39; AS unity (TYPE UC_CATALOG);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we are ready to query. Try the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SHOW ALL TABLES;&#xA;SELECT * from unity.default.numbers;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should see the tables listed and the contents of the &lt;code&gt;numbers&lt;/code&gt; table printed. To quit DuckDB, press &lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;D&lt;/code&gt; (if your platform supports it), press &lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;C&lt;/code&gt;, or use the &lt;code&gt;.exit&lt;/code&gt; command in the DuckDB shell.&lt;/p&gt; &#xA;&lt;h3&gt;Interact with the Unity Catalog UI&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/unitycatalog/unitycatalog/main/docs/assets/images/uc-ui.png&#34; alt=&#34;UC UI&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To use the Unity Catalog UI, start a new terminal and ensure you have already started the UC server (e.g., &lt;code&gt;./bin/start-uc-server&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd /ui&#xA;yarn install&#xA;yarn start&#xA;open localhost:3000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;CLI tutorial&lt;/h2&gt; &#xA;&lt;p&gt;You can interact with a Unity Catalog server to create and manage catalogs, schemas and tables, operate on volumes and functions from the CLI, and much more. See the &lt;a href=&#34;https://raw.githubusercontent.com/unitycatalog/unitycatalog/main/docs/usage/cli.md&#34;&gt;cli usage&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;APIs and Compatibility&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open API specification: The Unity Catalog Rest API is documented &lt;a href=&#34;https://raw.githubusercontent.com/unitycatalog/unitycatalog/main/api&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Compatibility and stability: The APIs are currently evolving and should not be assumed to be stable.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building Unity Catalog&lt;/h2&gt; &#xA;&lt;p&gt;Unity Catalog can be built using &lt;a href=&#34;https://www.scala-sbt.org/&#34;&gt;sbt&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To build UC (incl. &lt;a href=&#34;https://raw.githubusercontent.com/unitycatalog/unitycatalog/main/connectors/spark&#34;&gt;Spark Integration&lt;/a&gt; module), run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;build/sbt clean package publishLocal spark/publishLocal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Refer to &lt;a href=&#34;https://www.scala-sbt.org/1.x/docs/&#34;&gt;sbt docs&lt;/a&gt; for more commands.&lt;/p&gt; &#xA;&lt;h2&gt;Deployment&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To create a tarball that can be used to deploy the UC server or run the CLI, run the following: &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;build/sbt createTarball&#xA;&lt;/code&gt;&lt;/pre&gt; This will create a tarball in the &lt;code&gt;target&lt;/code&gt; directory. See the full &lt;a href=&#34;https://raw.githubusercontent.com/unitycatalog/unitycatalog/main/docs/deployment.md&#34;&gt;deployment guide&lt;/a&gt; for more details.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compiling and testing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install JDK 17 by whatever mechanism is appropriate for your system, and set that version to be the default Java version (e.g. via the env variable &lt;code&gt;JAVA_HOME&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;To compile all the code without running tests, run the following: &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;build/sbt clean compile&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To compile and execute tests, run the following: &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;build/sbt -J-Xmx2G clean test&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To execute tests with coverage, run the following: &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;build/sbt -J-Xmx2G jacoco&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To update the API specification, just update the &lt;code&gt;api/all.yaml&lt;/code&gt; and then run the following: &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;build/sbt generate&#xA;&lt;/code&gt;&lt;/pre&gt; This will regenerate the OpenAPI data models in the UC server and data models + APIs in the client SDK.&lt;/li&gt; &#xA; &lt;li&gt;To format the code, run the following: &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;build/sbt javafmtAll&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setting up IDE&lt;/h2&gt; &#xA;&lt;p&gt;IntelliJ is the recommended IDE to use when developing Unity Catalog. The below steps outline how to add the project to IntelliJ:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone Unity Catalog into a local folder, such as &lt;code&gt;~/unitycatalog&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;code&gt;File&lt;/code&gt; &amp;gt; &lt;code&gt;New Project&lt;/code&gt; &amp;gt; &lt;code&gt;Project from Existing Sources...&lt;/code&gt; and select &lt;code&gt;~/unitycatalog&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Under &lt;code&gt;Import project from external model&lt;/code&gt; select &lt;code&gt;sbt&lt;/code&gt;. Click &lt;code&gt;Next&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Click &lt;code&gt;Finish&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Java code adheres to the &lt;a href=&#34;https://google.github.io/styleguide/javaguide.html&#34;&gt;Google style&lt;/a&gt;, which is verified via &lt;code&gt;build/sbt javafmtCheckAll&lt;/code&gt; during builds. In order to automatically fix Java code style issues, please use &lt;code&gt;build/sbt javafmtAll&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Configuring Code Formatter for Eclipse/IntelliJ&lt;/h3&gt; &#xA;&lt;p&gt;Follow the instructions for &lt;a href=&#34;https://github.com/google/google-java-format#eclipse&#34;&gt;Eclipse&lt;/a&gt; or &lt;a href=&#34;https://github.com/google/google-java-format#intellij-android-studio-and-other-jetbrains-ides&#34;&gt;IntelliJ&lt;/a&gt; to install the &lt;strong&gt;google-java-format&lt;/strong&gt; plugin (note the required manual actions for IntelliJ).&lt;/p&gt; &#xA;&lt;h3&gt;Using more recent JDKs&lt;/h3&gt; &#xA;&lt;p&gt;The build script &lt;a href=&#34;https://raw.githubusercontent.com/unitycatalog/unitycatalog/main/build.sbt#L14&#34;&gt;checks for a lower bound on the JDK&lt;/a&gt; but the &lt;a href=&#34;https://raw.githubusercontent.com/unitycatalog/unitycatalog/main/project/build.properties&#34;&gt;current SBT version&lt;/a&gt; imposes an upper bound. Please check the &lt;a href=&#34;https://docs.scala-lang.org/overviews/jdk-compatibility/overview.html&#34;&gt;JDK compatibility&lt;/a&gt; documentation for more information&lt;/p&gt; &#xA;&lt;h3&gt;Serving the documentation with mkdocs&lt;/h3&gt; &#xA;&lt;p&gt;Create a virtual environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Create virtual environment&#xA;python -m venv uc_docs_venv&#xA;&#xA;# Activate virtual environment (Linux/macOS)&#xA;source uc_docs_venv/bin/activate&#xA;&#xA;# Activate virtual environment (Windows)&#xA;uc_docs_venv\Scripts\activate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install the required dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pip install -r requirements-docs.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then serve the docs with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdocs serve&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>