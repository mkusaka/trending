<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-01T01:32:15Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>runtimeverification/k</title>
    <updated>2024-07-01T01:32:15Z</updated>
    <id>tag:github.com,2024-07-01:/runtimeverification/k</id>
    <link href="https://github.com/runtimeverification/k" rel="alternate"></link>
    <summary type="html">&lt;p&gt;K Framework Tools 7.0&lt;/p&gt;&lt;hr&gt;&lt;hr&gt; &#xA;&lt;h2&gt;copyright: Copyright (c) Runtime Verification, Inc. All Rights Reserved. permalink: README.html&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://matrix.to/#/#k:matrix.org&#34;&gt;Join the chat on Matrix&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;The K Framework is a tool for designing and modeling programming languages and software/hardware systems. At the core of the K Framework is a programming, modeling, and specification language called K. The K Framework includes tools for compiling K specifications to build interpreters, model checkers, verifiers, associated documentation, and more.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;If you are not a K developer, but just want to get started using K, we provide a streamlined installation process for any system that supports &lt;a href=&#34;https://nixos.org/download.html&#34;&gt;Nix&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bash &amp;lt;(curl https://kframework.org/install)&#xA;kup install k&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information on the &lt;code&gt;kup&lt;/code&gt; tool and other packaged releases of K, please refer to our &lt;a href=&#34;https://raw.githubusercontent.com/runtimeverification/k/master/k-distribution/INSTALL.md&#34;&gt;installation notes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Preface&lt;/h2&gt; &#xA;&lt;p&gt;This is a readme file for &lt;em&gt;K developers&lt;/em&gt;. Users should feel comfortable using the command line, as we do not provide GUI tools at this time.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;K-based tool users&lt;/em&gt; should:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Consult their tool documentation for build/installation instructions.&lt;/li&gt; &#xA; &lt;li&gt;If needed, download a &lt;a href=&#34;https://github.com/runtimeverification/k/releases/&#34;&gt;packaged release&lt;/a&gt; of the K Framework as part of their tool setup process.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you are interested in quickly trying out the K Framework without building from source, please see our &lt;a href=&#34;https://github.com/runtimeverification/k/raw/master/k-distribution/INSTALL.md&#34;&gt;packaged release installation guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The rest of this file assumes you intend to build and install the K Framework from source.&lt;/p&gt; &#xA;&lt;p&gt;Note that the K Framework can only be built on (x86-64) Linux-like systems, e.g., this also includes macOS/brew (x86-64) as well as the Windows Subsystem for Linux. All 32-bit systems are &lt;strong&gt;not supported&lt;/strong&gt;. See the &lt;a href=&#34;https://github.com/runtimeverification/k/raw/master/k-distribution/INSTALL.md&#34;&gt;installation notes&lt;/a&gt; for details about supported configurations and system setup.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/runtimeverification/k/master/#prerequisite-install-guide&#34;&gt;Prerequisite Install Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/runtimeverification/k/master/#build-and-install-guide&#34;&gt;Build and Install Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/runtimeverification/k/master/#ide-setup&#34;&gt;IDE Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/runtimeverification/k/master/#running-the-test-suite&#34;&gt;Running the Test Suite&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/runtimeverification/k/master/#changing-the-kore-data-structures&#34;&gt;Changing the KORE Data Structures&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/runtimeverification/k/master/#building-the-final-release-directoryarchives&#34;&gt;Building the Final Release Directory/Archives&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/runtimeverification/k/master/#compiling-definitions-and-running-programs&#34;&gt;Compiling Definitions and Running Programs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/runtimeverification/k/master/#installing-python-support&#34;&gt;Installing Python Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/runtimeverification/k/master/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Prerequisite Install Guide&lt;/h1&gt; &#xA;&lt;p&gt;Before building and installing the K Framework, the following prerequisites must first be installed.&lt;/p&gt; &#xA;&lt;h2&gt;The Short Version&lt;/h2&gt; &#xA;&lt;p&gt;On Ubuntu Linux 22.04 (Jammy):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git submodule update --init --recursive&#xA;sudo apt-get install    \&#xA;    bison               \&#xA;    build-essential     \&#xA;    clang-15            \&#xA;    cmake               \&#xA;    curl                \&#xA;    flex                \&#xA;    g++                 \&#xA;    gcc                 \&#xA;    libboost-test-dev   \&#xA;    libfmt-dev          \&#xA;    libgmp-dev          \&#xA;    libjemalloc-dev     \&#xA;    libmpfr-dev         \&#xA;    libsecp256k1-dev    \&#xA;    libyaml-dev         \&#xA;    libz3-dev           \&#xA;    lld-15              \&#xA;    llvm-15-tools       \&#xA;    m4                  \&#xA;    maven               \&#xA;    openjdk-17-jdk      \&#xA;    pkg-config          \&#xA;    python3             \&#xA;    python3-dev         \&#xA;    z3                  \&#xA;    zlib1g-dev&#xA;curl -sSL https://get.haskellstack.org/ | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you install this list of dependencies, continue directly to the &lt;a href=&#34;https://raw.githubusercontent.com/runtimeverification/k/master/#build-and-install-guide&#34;&gt;Build and Install Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On macOS using &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git submodule update --init --recursive&#xA;brew install    \&#xA;    bison       \&#xA;    boost       \&#xA;    cmake       \&#xA;    flex        \&#xA;    fmt         \&#xA;    gcc         \&#xA;    gmp         \&#xA;    openjdk     \&#xA;    jemalloc    \&#xA;    libyaml     \&#xA;    llvm        \&#xA;    make        \&#xA;    maven       \&#xA;    mpfr        \&#xA;    pkg-config  \&#xA;    python      \&#xA;    secp256k1   \&#xA;    stack       \&#xA;    zlib        \&#xA;    z3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;The Long Version&lt;/h2&gt; &#xA;&lt;p&gt;The following dependencies are needed either at build time or runtime:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/bison/&#34;&gt;bison&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.boost.org/&#34;&gt;boost&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cmake.org/&#34;&gt;cmake&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/westes/flex&#34;&gt;flex&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fmt.dev/&#34;&gt;fmt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gcc.gnu.org/&#34;&gt;gcc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gmplib.org/&#34;&gt;gmp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openjdk.java.net/&#34;&gt;jdk&lt;/a&gt; (version 17 or greater)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jemalloc/jemalloc&#34;&gt;libjemalloc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bitcoin-core/secp256k1&#34;&gt;libsecp256k1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pyyaml.org/wiki/LibYAML&#34;&gt;libyaml&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://llvm.org/&#34;&gt;llvm&lt;/a&gt; (We require version 15 or greater for clang, lld, and llvm-tools. On some distributions, the utilities below are also needed and packaged separately.) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://clang.llvm.org/&#34;&gt;clang&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://lld.llvm.org/&#34;&gt;lld&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/make/&#34;&gt;make&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://maven.apache.org/&#34;&gt;maven&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.mpfr.org/&#34;&gt;mpfr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freedesktop.org/wiki/Software/pkg-config/&#34;&gt;pkg-config&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.python.org&#34;&gt;python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.haskellstack.org/en/stable/README/&#34;&gt;stack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zlib.net/&#34;&gt;zlib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Z3Prover/z3&#34;&gt;z3&lt;/a&gt; (on some distributions libz3 is also needed and packaged separately) Note that you need version 4.12.1 of Z3, which may require you to build and install from source if your package manager does not supply it. Other versions are known to have bugs and performance regressions likely to cause issues in the K test suite.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Typically, these can all be installed from your package manager. On some system configurations, special installation steps or post-installation configuration steps are required. See the notes below.&lt;/p&gt; &#xA;&lt;h3&gt;Installation Notes&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Java Development Kit (required JDK 17 or higher)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Linux: Download from package manager (e.g. &lt;code&gt;sudo apt-get install openjdk-17-jdk&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;macOS/brew: Download from package manager (e.g. &lt;code&gt;brew install java&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;To make sure that everything works you should be able to call &lt;code&gt;java -version&lt;/code&gt; and &lt;code&gt;javac -version&lt;/code&gt; from a terminal.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;LLVM&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;macOS/brew: Since LLVM is distributed as a keg-only package, we must explicitly make it available for command line usage. See the results of the &lt;code&gt;brew info llvm&lt;/code&gt; command for more information on how to do this.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Flex / Bison&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;macOS/brew: The versions of these packages supplied by the OS are too old, and are not compatible with the K build. You must ensure that the Homebrew-installed versions are first on your &lt;code&gt;PATH&lt;/code&gt; when building K (i.e. &lt;code&gt;which flex&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; &lt;code&gt;/usr/bin/flex&lt;/code&gt;).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Apache Maven&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Linux: Download from package manager (e.g. &lt;code&gt;sudo apt-get install maven&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;macOS/brew: Download it from a package manager or from &lt;a href=&#34;http://maven.apache.org/download.cgi&#34;&gt;http://maven.apache.org/download.cgi&lt;/a&gt; and follow the instructions on the webpage.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;Maven usually requires setting an environment variable &lt;code&gt;JAVA_HOME&lt;/code&gt; pointing to the installation directory of the JDK (not to be mistaken with JRE).&lt;/p&gt; &lt;p&gt;You can test if it works by calling &lt;code&gt;mvn -version&lt;/code&gt; in a terminal. This will provide the information about the JDK Maven is using, in case it is the wrong one.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Haskell Stack&lt;/p&gt; &lt;p&gt;To install, go to &lt;a href=&#34;https://docs.haskellstack.org/en/stable/README/&#34;&gt;https://docs.haskellstack.org/en/stable/README/&lt;/a&gt; and follow the instructions. You may need to do &lt;code&gt;stack upgrade&lt;/code&gt; to ensure the latest version of Haskell Stack.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Build and Install Guide&lt;/h1&gt; &#xA;&lt;h2&gt;Building with Maven&lt;/h2&gt; &#xA;&lt;p&gt;Checkout the project source at your desired location and call &lt;code&gt;mvn package&lt;/code&gt; from the main directory to build the distribution. For convenient usage, you can update your &lt;code&gt;$PATH&lt;/code&gt; with &lt;code&gt;&amp;lt;checkout-dir&amp;gt;/k-distribution/target/release/k/bin&lt;/code&gt; (strongly recommended, but optional).&lt;/p&gt; &#xA;&lt;p&gt;You are also encouraged to set the environment variable &lt;code&gt;MAVEN_OPTS&lt;/code&gt; to &lt;code&gt;-XX:+TieredCompilation&lt;/code&gt;, which will significantly speed up the incremental build process.&lt;/p&gt; &#xA;&lt;h3&gt;Apple Silicon Support&lt;/h3&gt; &#xA;&lt;p&gt;K is fully tested and supported on ARM (M1/M2) family macOS machines. However, to work around an &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4373&#34;&gt;upstream bug&lt;/a&gt; in the Haskell / Stack ecosystem, care needs to be taken when initially building K from source. Before running any Maven commands, the Haskell Stack build needs to be configured without Homebrew&#39;s LLVM appearing on your &lt;code&gt;$PATH&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;First, run the following command from the K source root:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd haskell-backend/src/main/native/haskell-backend &amp;amp;&amp;amp; stack setup &amp;amp;&amp;amp; cd -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, ensure that Homebrew-installed versions of &lt;code&gt;llvm-config&lt;/code&gt;, &lt;code&gt;flex&lt;/code&gt; and &lt;code&gt;bison&lt;/code&gt; are on your &lt;code&gt;PATH&lt;/code&gt; ahead of any macOS-supplied versions. &lt;a href=&#34;https://direnv.net/&#34;&gt;&lt;code&gt;direnv&lt;/code&gt;&lt;/a&gt; offers a convenient way to automate this. To do so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install direnv&#xA;# Follow the instructions at https://direnv.net/docs/hook.html&#xA;# ...for example, if your shell is bash, run:&#xA;#   echo &#39;eval &#34;$(direnv hook bash)&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;# then restart your shell.&#xA;cp macos-envrc .envrc&#xA;direnv allow&#xA;# You should see a message like:&#xA;#   direnv: loading .../k/.envrc&#xA;#   direnv: export ~PATH&#xA;# The llvm-config binary should also be on your PATH; check with:&#xA;which llvm-config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you subsequently encounter errors when building the Haskell components of K (the Haskell backend and booster), try removing the entire Stack cache (&lt;code&gt;~/.stack&lt;/code&gt;) and retrying the instructions above.&lt;/p&gt; &#xA;&lt;h2&gt;Building with Nix flakes (Recommended)&lt;/h2&gt; &#xA;&lt;p&gt;We now support building K using &lt;a href=&#34;https://nixos.wiki/wiki/Flakes&#34;&gt;nix flakes&lt;/a&gt;. To set up nix flakes you will need to be on &lt;code&gt;nix&lt;/code&gt; 2.4 or higher and follow the instructions &lt;a href=&#34;https://nixos.wiki/wiki/Flakes&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you are on a standard Linux distribution, such as Ubuntu, first &lt;a href=&#34;https://nixos.org/download.html#download-nix&#34;&gt;install nix&lt;/a&gt; and then enable flakes by editing either &lt;code&gt;~/.config/nix/nix.conf&lt;/code&gt; or &lt;code&gt;/etc/nix/nix.conf&lt;/code&gt; and adding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;experimental-features = nix-command flakes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is needed to expose the Nix 2.0 CLI and flakes support that are hidden behind feature-flags.&lt;/p&gt; &#xA;&lt;p&gt;By default, Nix will build the project and its transitive dependencies from source, which can take up to an hour. We recommend setting up &lt;a href=&#34;https://app.cachix.org/cache/kore&#34;&gt;the binary cache&lt;/a&gt; to speed up the build process significantly. You will also need to add the following sections to &lt;code&gt;/etc/nix/nix.conf&lt;/code&gt; or, if you are a trusted user, &lt;code&gt;~/.config/nix/nix.conf&lt;/code&gt; (if you don&#39;t know what a &#34;trusted user&#34; is, you probably want to do the former):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;trusted-public-keys = ... hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=&#xA;substituters = ... https://cache.iog.io&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;i.e. if the file was originally&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;substituters = https://cache.nixos.org&#xA;trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;it will now read&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;substituters = https://cache.nixos.org https://cache.iog.io&#xA;trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build the K Framework itself, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nix build .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will build all of K and put a link to the resulting binaries in the &lt;code&gt;result/&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: Mac users, especially those running M1/M2 Macs may find nix segfaulting on occasion. If this happens, try running the nix command like this: &lt;code&gt;GC_DONT_GC=1 nix build .&lt;/code&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to temporarily add the K binaries (such as &lt;code&gt;kompile&lt;/code&gt; or &lt;code&gt;kast&lt;/code&gt;) to the current shell, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nix shell .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the integration tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nix build .#test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you change any &lt;code&gt;pom.xml&lt;/code&gt;, you must run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nix run .#update-maven&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and commit the updated &lt;code&gt;nix/mavenix.lock&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h1&gt;IDE Setup&lt;/h1&gt; &#xA;&lt;h2&gt;General&lt;/h2&gt; &#xA;&lt;p&gt;You should run K from the k-distribution project, because it is the only project to have the complete classpath and therefore all backends.&lt;/p&gt; &#xA;&lt;h2&gt;IntelliJ IDEA&lt;/h2&gt; &#xA;&lt;p&gt;IntelliJ IDEA comes with built-in maven integration. For more information, refer to the &lt;a href=&#34;http://wiki.jetbrains.net/intellij/Creating_and_importing_Maven_projects&#34;&gt;IntelliJ IDEA wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Running the Test Suite&lt;/h1&gt; &#xA;&lt;p&gt;To completely test the current version of the K framework, run &lt;code&gt;mvn verify&lt;/code&gt;. This normally takes roughly 30 minutes on a fast machine. If you are interested only in running the unit tests and checkstyle goals, run &lt;code&gt;mvn verify -DskipKTest&lt;/code&gt; to skip the lengthy &lt;code&gt;ktest&lt;/code&gt; execution.&lt;/p&gt; &#xA;&lt;h1&gt;Building the Final Release Directory/Archives&lt;/h1&gt; &#xA;&lt;p&gt;Call &lt;code&gt;mvn install&lt;/code&gt; in the base directory. This will attach an artifact to the local maven repository containing a zip and tar.gz of the distribution.&lt;/p&gt; &#xA;&lt;p&gt;The functionality to create a tagged release is currently incomplete.&lt;/p&gt; &#xA;&lt;h1&gt;Compiling Definitions and Running Programs&lt;/h1&gt; &#xA;&lt;p&gt;Assuming k-distribution/target/release/k/bin is in your path, you can compile definitions using the &lt;code&gt;kompile&lt;/code&gt; command. To execute a program you can use &lt;code&gt;krun&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For running either program in the debugger, use the main class &lt;code&gt;org.kframework.main.Main&lt;/code&gt; with an additional argument &lt;code&gt;-kompile&lt;/code&gt; or &lt;code&gt;-krun&lt;/code&gt; added before other command line arguments, and use the classpath from the &lt;code&gt;k-distribution&lt;/code&gt; module.&lt;/p&gt; &#xA;&lt;h1&gt;Installing Python Support&lt;/h1&gt; &#xA;&lt;p&gt;Python tools for K can be found under &lt;a href=&#34;https://github.com/runtimeverification/pyk&#34;&gt;runtimeverification/pyk&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Troubleshooting&lt;/h1&gt; &#xA;&lt;p&gt;Common build-time error messages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Error: JAVA_HOME not found in your environment. Please set the JAVA_HOME variable in your environment to match the location of your Java installation.&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Make sure &lt;code&gt;JAVA_HOME&lt;/code&gt; points to the JDK and not the JRE directory.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;[WARNING] Cannot get the branch information from the git repository: Detecting the current branch failed: &#39;git&#39; is not recognized as an internal or external command, operable program or batch file.&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;git&lt;/code&gt; might not be installed on your system. Make sure that you can execute &lt;code&gt;git&lt;/code&gt; from the command line.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;1) Error injecting constructor, java.lang.Error: Unresolved compilation problems: The import org.kframework.parser.outer.Outer cannot be resolved Outer cannot be resolved&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You may run into this issue if target/generated-sources/javacc is not added to the build path of your IDE. Generally this is solved by regenerating your project / re-syncing it with the pom.xml.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;[ERROR] Failed to execute goal org.apache.maven.plugins:maven-antrun-plugin:1.7:run (build-haskell) on project haskell-backend: An Ant BuildException has occured: exec returned: 1&lt;/code&gt;&lt;/p&gt; &lt;p&gt;and scrolling up, you see an error message similar to:&lt;/p&gt; &lt;p&gt;&lt;code&gt;[exec] Installing GHC ... [exec] ghc-pkg: Couldn&#39;t open database $HOME/.stack/programs/x86_64-linux/ghc-tinfo6-8.10.1/lib/ghc-8.10.1/package.conf.d for modification: {handle: $HOME/.stack/programs/x86_64-linux/ghc-tinfo6-8.10.1/lib/ghc-8.10.1/package.conf.d/package.cache.lock}: hLock: invalid argument (Invalid argument)&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you are using a &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/wsl/compare-versions&#34;&gt;WSL version 1 environment&lt;/a&gt;, then you have encountered a known issue with the latest versions of GHC. In this case, please either: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;upgrade to &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/wsl/install-win10&#34;&gt;WSL version 2&lt;/a&gt;,&lt;/li&gt; &#xA;     &lt;li&gt;install a &lt;a href=&#34;https://github.com/runtimeverification/k/releases/&#34;&gt;packaged release for your WSL version 1 distribution&lt;/a&gt;,&lt;/li&gt; &#xA;     &lt;li&gt;switch to a supported system configuration (e.g. Linux on a virtual machine), or&lt;/li&gt; &#xA;     &lt;li&gt;if you do not need the symbolic execution capabilities of the K Framework, disable them at build time (and remove the GHC dependency) by doing: &lt;code&gt;mvn package -Dhaskell.backend.skip&lt;/code&gt;.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When building with nix and getting:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;error: hash mismatch in fixed-output derivation &#39;/nix/store/wjz7gjqs3cch9lgdjhs1fnb8wfl352vd-k-6.1.0-dirty-maven-deps.drv&#39;:&#xA;        specified: sha256-kLpjMj05uC94/5vGMwMlFzLKNFOKey◊Nvq/vmB6pHTAo=&#xA;            got:    sha256-fFlRqlLDZnVuoJniPvXjqdYEjnKxmFCEniavau/1gcQ=&#xA;error: 1 dependencies of derivation &#39;/nix/store/79hazjbxp8829wpjvhh9c7kzc1m0ii22-k-6.1.0-dirty.drv&#39; failed to build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;copy the &lt;code&gt;got:&lt;/code&gt; hash (&lt;code&gt;sha256-fFlRqlLDZnVuoJniPvXjqdYEjnKxmFCEniavau/1gcQ=&lt;/code&gt;) and replace it in &lt;code&gt;flake.nix&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;k-framework = { haskell-backend-bins, llvm-kompile-libs }:&#xA;    prev.callPackage ./nix/k.nix {&#xA;        mvnHash = &#34;sha256-fFlRqlLDZnVuoJniPvXjqdYEjnKxmFCEniavau/1gcQ=&#34;;&#xA;        ...&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;[ERROR] Failed to execute goal ... org.apache.maven.artifact.resolver.ArtifactNotFoundException: The following artifacts could not be resolved: org.scala-lang:scala-compiler&lt;span&gt;🫙&lt;/span&gt;2.12.18 ...&lt;/code&gt; Add &lt;code&gt;&#34;org.scala-lang:scala-compiler:2.12.18&#34;&lt;/code&gt; (without the &lt;code&gt;jar:&lt;/code&gt;) to &lt;code&gt;manualMvnArtifacts&lt;/code&gt; in &lt;code&gt;flake.nix&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If something unexpected happens and the project fails to build, try &lt;code&gt;mvn clean&lt;/code&gt; and rebuild the entire project. Generally speaking, however, the project should build incrementally without needing to be cleaned first.&lt;/p&gt; &#xA;&lt;p&gt;If you are doing work with snapshot dependencies, you can update them to the latest version by running maven with the &lt;code&gt;-U&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;p&gt;If you are configuring artifacts in a repository and need to purge the local repository&#39;s cache of artifacts, you can run &lt;code&gt;mvn dependency:purge-local-repository&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If tests fail but you want to run the build anyway to see what happens, you can use &lt;code&gt;mvn package -DskipTests&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you still cannot build, please contact a K developer.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>unicode-org/cldr</title>
    <updated>2024-07-01T01:32:15Z</updated>
    <id>tag:github.com,2024-07-01:/unicode-org/cldr</id>
    <link href="https://github.com/unicode-org/cldr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The home of the Unicode Common Locale Data Repository&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Unicode CLDR Project&lt;/h1&gt; &#xA;&lt;p&gt;For current CLDR release information, see &lt;a href=&#34;https://cldr.unicode.org/index/downloads/&#34;&gt;cldr.unicode.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;main&lt;/code&gt; branch:&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/unicode-org/cldr/actions?query=branch%3Amain+workflow%3A%22cldr-mvn%22&#34;&gt;&lt;img src=&#34;https://github.com/unicode-org/cldr/workflows/cldr-mvn/badge.svg?sanitize=true&#34; alt=&#34;cldr-mvn&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/unicode-org/cldr/actions?query=branch%3Amain+workflow%3A%22Ansible+Lint%22&#34;&gt;&lt;img src=&#34;https://github.com/unicode-org/cldr/workflows/Ansible%20Lint/badge.svg?sanitize=true&#34; alt=&#34;Ansible Lint&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/unicode-org/cldr/actions/workflows/gh-pages.yml&#34;&gt;&lt;img src=&#34;https://github.com/unicode-org/cldr/actions/workflows/gh-pages.yml/badge.svg?sanitize=true&#34; alt=&#34;Publish to gh-pages&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/unicode-org/cldr/actions/workflows/codeql-analysis.yml&#34;&gt;&lt;img src=&#34;https://github.com/unicode-org/cldr/actions/workflows/codeql-analysis.yml/badge.svg?sanitize=true&#34; alt=&#34;CodeQL&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;Update: 2024-04-22&lt;/p&gt; &#xA;&lt;!-- [inapplicable lines are commented out.]--&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; CLDR 46 is in development and not recommended for use at this stage.&lt;/p&gt; &#xA;&lt;!--**Note:**  This is the milestone 1 version of CLDR 46, intended for those wishing to do pre-release testing. It is not recommended for production use.--&gt; &#xA;&lt;!--**Note:** This is a preliminary version of CLDR 46, intended for those wishing to do pre-release testing. It is not recommended for production use.--&gt; &#xA;&lt;!-- **Note:**  This is a pre-release candidate version of CLDR 46, intended for testing. It is not recommended for production use. --&gt; &#xA;&lt;!--This is the final release version of CLDR 46.--&gt; &#xA;&lt;h3&gt;What is CLDR?&lt;/h3&gt; &#xA;&lt;p&gt;The Unicode Common Locale Data Repository (CLDR) provides key building blocks for software to support the world&#39;s languages, with the largest and most extensive standard repository of locale data available. This data is used by a &lt;a href=&#34;https://cldr.unicode.org/index#h.ezpykkomyltl&#34;&gt;wide spectrum of companies&lt;/a&gt; for their software internationalization and localization, adapting software to the conventions of different languages for such common software tasks.&lt;/p&gt; &#xA;&lt;p&gt;See for further information:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://cldr.unicode.org/index/downloads&#34; title=&#34;CLDR Download Page&#34;&gt;CLDR releases and downloads&lt;/a&gt;, including the data files and LDML specification associated with each release&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://cldr.unicode.org/index/downloads#Repository_Organization&#34; title=&#34;CLDR Download Page, Repository Organization&#34;&gt;Repository organization&lt;/a&gt;, describing the organization of files within this repository&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://cldr.unicode.org/development/cldr-tools&#34; title=&#34;CLDR Tools Page&#34;&gt;Building and running CLDR Tools&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;Most data submissions are done via the &lt;a href=&#34;https://st.unicode.org/cldr-apps/&#34;&gt;CLDR Survey Tool&lt;/a&gt;, which is open and available on predetermined cycles. Click &lt;a href=&#34;https://www.unicode.org/cldr/survey_tool.html&#34;&gt;HERE&lt;/a&gt; for information on how to obtain a survey tool account.&lt;/p&gt; &#xA;&lt;p&gt;For details about code and other contributions, see &lt;a href=&#34;https://raw.githubusercontent.com/unicode-org/cldr/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Spotless&lt;/h4&gt; &#xA;&lt;p&gt;A source formatter is now used, please see &lt;a href=&#34;https://raw.githubusercontent.com/unicode-org/cldr/main/tools/README.md#spotless&#34;&gt;spotless&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h3&gt;Copyright &amp;amp; Licenses&lt;/h3&gt; &#xA;&lt;p&gt;Copyright © 2004-2024 Unicode, Inc. Unicode and the Unicode Logo are registered trademarks of Unicode, Inc. in the United States and other countries.&lt;/p&gt; &#xA;&lt;p&gt;The project is released under &lt;a href=&#34;https://raw.githubusercontent.com/unicode-org/cldr/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that some CLDR tools depend on libraries managed via Maven; use of these libraries is governed by separate license agreements.&lt;/p&gt; &#xA;&lt;p&gt;A CLA is required to contribute to this project - please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/unicode-org/cldr/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file (or start a Pull Request) for more information.&lt;/p&gt;</summary>
  </entry>
</feed>