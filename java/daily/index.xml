<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-06-07T01:32:32Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>DragonKingpin/Hydra</title>
    <updated>2025-06-07T01:32:32Z</updated>
    <id>tag:github.com,2025-06-07:/DragonKingpin/Hydra</id>
    <link href="https://github.com/DragonKingpin/Hydra" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Hydra九头龙，面向PB级别知识库取数、情报系统、数据平台、大规模控制调度系统。建设云计算资源管理、任务/服务统一调度、数仓、微服务化、中台基建系统化能力。——以实现大规模分布式爬虫搜索引擎为例。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bean Nuts Hazelnut Hydra &lt;br&gt; 九头龙，分布式操作系统&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;strong&gt; Adhoc, OLAP, 搜索引擎, 知识库, 知识图谱, 量化, 微服务, 服务与任务编排, 并行计算与分布式系统设计, 矢量图调度, 大规模分布式爬虫, 大数据处理, 数据仓库, 云计算, 中台 &lt;/strong&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://docs.nutsky.com/docs/hazelnut_sauron_zh_cn&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/%E6%96%87%E6%A1%A3-%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87-blue.svg?sanitize=true&#34; alt=&#34;简体中文文档&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/DragonKingpin/Hydra/raw/beta/CHANGELOG.md&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/ChangeLog-English-blue.svg?sanitize=true&#34; alt=&#34;Update Log&#34;&gt; &lt;/a&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://www.oracle.com/technetwork/java/javase/downloads/index.html&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/JDK-11+-green.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/DragonKingpin/Hydra&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/DragonKingpin/Hydra.svg?sanitize=true&#34; alt=&#34;github stars&#34;&gt; &lt;/a&gt; &lt;a target=&#34;_blank&#34; href=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Process-Developing-yellow&#34; alt=&#34;github stars&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt;简体中文&lt;/b&gt; | &lt;b&gt;English[TODO]&lt;/b&gt; | &lt;a href=&#34;https://www.nutsky.com&#34;&gt;Nuts Projects&lt;/a&gt; | &lt;a href=&#34;https://www.dragonking.cn&#34; target=&#34;_blank&#34;&gt;Dragon King&lt;/a&gt; | &lt;a href=&#34;https://www.wkwja.cn&#34; target=&#34;_blank&#34;&gt;Ken 老板&lt;/a&gt; | &lt;a href=&#34;https://www.geniusay.com&#34; target=&#34;_blank&#34;&gt;Genius 老板&lt;/a&gt; | &lt;a href=&#34;https://www.welsir.com&#34; target=&#34;_blank&#34;&gt;Welsir 老板&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; 文档（持续增量更新）: &lt;a href=&#34;https://docs.nutsky.com/docs/hazelnut_sauron_zh_cn&#34; target=&#34;_blank&#34;&gt;https://docs.nutsky.com/docs/hazelnut_sauron_zh_cn&lt;/a&gt; | 真实集群搭建过程: &lt;a href=&#34;https://zhuanlan.zhihu.com/p/634851956&#34; target=&#34;_blank&#34;&gt;https://zhuanlan.zhihu.com/p/634851956&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;📖 Abstract&lt;/h2&gt; &#xA;&lt;p&gt;Would you like to own the &#34;God Eyes&#34;? Do you crave power? Do you wish to wield all information at your fingertips? &lt;strong&gt;Now, data is all you need!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Hazelnut and Hydra ecosystem is a powerful data analysis &#34;Elder Brain&#34; designed specifically for &#34;TJ&#34; individuals, &#39;all information all I need&#39;. &lt;strong&gt;Hey, commander!&lt;/strong&gt; We build a unique personal PB level data warehouse, knowledge base, and search engine just for you, your exclusive &#34;God Eyes&#34; !&lt;/p&gt; &#xA;&lt;p&gt;Hydra is a cloud computing-oriented, multi-task scheduling, big data, communication, service-oriented, which is the distributed operating system. Hydra helps build data products such as Adhoc analysis, OLAP, search engines, knowledge bases, knowledge graphs, quantitative systems, and data platforms.&lt;/p&gt; &#xA;&lt;h2&gt;📖 摘要 / 简介&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;你想拥有‘上帝之眼’吗？你渴望力量吗？你希望一切信息尽在掌控吗？这个时代，数据即使世界！&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Hazelnut、Hydra 生态，专为&#34;TJ&#34;人打造的大规模数据分析“主脑”，一切尽在掌握之中。 为你打造独一无二的的个人PB级数仓、知识库和搜索引擎，你的专属&#39;上帝之眼&#39;，一切数据为所欲为！&lt;/p&gt; &#xA;&lt;p&gt;不会集群？不会中间件？不会分布式？不会云计算？我是小白？Don`t worry，持续更新的保姆级教程和实例最小系统，弹性结构、系统可大可小，丐版技术也能玩转云和大数据。&lt;/p&gt; &#xA;&lt;h3&gt;字多不看？太高端听不懂？几个场景助你快速了解Hydra理念。&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;大规模知识库&lt;/strong&gt;：构造你的私人知识库，关联任何你感兴趣的知识图谱（金融、新闻、学术、游戏、音乐、电影、视频、小说、美食等），生成巨型知识库和图谱，并交给GPT等大模型给你生成属于你的&lt;code&gt;上帝报告&lt;/code&gt;。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;数据仓库&lt;/strong&gt;：海量数据，任你处置，你可以打造自己的数据&lt;code&gt;天眼&lt;/code&gt;，甚至可以乘坐时光机，在数据世界中随意穿行。你就是上帝，历史的变迁，触手可及。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;数据集市&lt;/strong&gt;：打造你的个人GPT，随着算力平民化、大模型技术的平民化。未来，你不想拥有自己的GPT吗？你只需要不断收集属于你的数据集，未来打造你的专属GPT、Diffusion等。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;大型采集&lt;/strong&gt;：统一并行架构打造大规模战略采集系统，多个实例助你快速入门： 1).维基百科全站爬取；2).Urban Dictionary全站爬取；3).imdb爬取；4).编年史子项目，每日全世界新闻采集，打造互联网记忆库与情报系统； 5).金融数据大规模采集（面向资金流向建模）；6).IP反查、ISP追踪、DNS/rDNS、域名、NIC等搜索引擎基架数据采集；等。（避免争议，不提供任何有争议的代码和数据）&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;数据平台&lt;/strong&gt;：面向战略和战术数据分析系统，构建和打通其他开源数据产品，面向BI、OLAP、ETL、数仓、取数、情报等专业大数据分析系统。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;中台架构&lt;/strong&gt;：面向系统性实现上层应用、面向抽象、统一化，支撑大规模并行、大数据架构，信息、控制、调度、审计、权限等元架构分离。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;🏆 20万行源码，3A史诗巨献&lt;/h3&gt; &#xA;&lt;p&gt;底层 Hydra = 手撕 &lt;code&gt;双工多路RPC&lt;/code&gt; + &lt;code&gt;分布式文件系统&lt;/code&gt; + &lt;code&gt;存储卷系统&lt;/code&gt; + &lt;code&gt;MapReduce&lt;/code&gt; + &lt;code&gt;运行支持库&lt;/code&gt; + &lt;code&gt;操作系统内核&lt;/code&gt; + &lt;code&gt;消息中间件统一总线&lt;/code&gt;&lt;br&gt; 应用层衍生子项目（Sparta 中台服务组）：分布式搜索引擎、分布式对象存储、CDN、任务控制系统、服务管理系统等。&lt;br&gt; 该仓库为Java 11实现版本（由C/C++版本重构），非GUI大部分不直接基于第三方框架，前端工程（如BI）部分会与其他开源项目打通。 此外由于本项目工程量、复杂度和工作量较大，本人精力、能力有限，错误和功能完整性不足是不可避免的，还希望各位读者大佬批评指正。&lt;br&gt; 最后，由于本人精力和工作时间等问题，该公开版本为beta版本，一部分功能未完全实现，后续会不断迭代，欢迎关注。&lt;/p&gt; &#xA;&lt;h3&gt;什么是 Hydra，他能干嘛？&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Hydra 由 &lt;a href=&#34;https://www.dragonking.cn&#34; target=&#34;_blank&#34;&gt;DragonKing&lt;/a&gt; 及其团队原创的分布式基架系统， 面向系统性构建上层大型应用。Hydra的设计基础首先是面向控制的，用于实现大规模控制，进而实现通用任务、服务操作系统。 与其他操作系统设计理念类似，倡导内核做事、统筹规划。&lt;/li&gt; &#xA; &lt;li&gt;其设计根源是基于对中台架构的创新和一体化，并尝试构造更一致的内核， 目前的设计尝试由一个迷你中台和云系统（&lt;a href=&#34;https://www.nutsky.com&#34;&gt;豆子坚果云&lt;/a&gt;）不断自底向上迭代。&lt;/li&gt; &#xA; &lt;li&gt;Hydra基架如下图所示，自顶向下整体分为三层：应用（具体）、中级（典型）、底层（抽象）。对应图中应用层、中级应用中台、中台层。&lt;/li&gt; &#xA; &lt;li&gt;一个操作系统至少需要实现对任务、服务、资源、存储、消息、信号、权限等子系统的控制和管理。 Hydra也是如此，但是由于时间和性价比问题，资源管理内核由具体的第三方系统代理（如Yarn）。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;全局架构鸟瞰图&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/DragonKingpin/Hydra/beta/assets/imgs/architect/architect_frame_global_2.png&#34; alt=&#34;HydraArchitecture&#34;&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;支持统一高度抽象化的任务、事务、服务等编排，一套接口，可分级、可本地、可集群。&lt;/li&gt; &#xA; &lt;li&gt;抽象统一分布式资源树系统，场景树、服务树、任务树、部署树、配置树、存储树等。&lt;/li&gt; &#xA; &lt;li&gt;可多级、可嵌套的编排系统，支持配置域管理、复杂配置动态解耦、可继承和重写的多域配置管理。&lt;/li&gt; &#xA; &lt;li&gt;可事务化抽象进程、线程模型，让远端服务通过RPC或通信组件通过一套接口，像本地进程一样进行统一管理。&lt;/li&gt; &#xA; &lt;li&gt;可事务图化编排方法论设计，就像TensorFlow，更抽象简单的服务、任务设计模式。事务和任务编排支持序列和并行两种模式，更支持性能模式。确保事务绝对执行、回滚、性能执行、并行等多种范式。&lt;/li&gt; &#xA; &lt;li&gt;面向统一解释器模式方法论和过程化设计，事务和任务编排逻辑化，支持循环控制、条件控制、散转控制、原子化等。&lt;/li&gt; &#xA; &lt;li&gt;抽象统一任务管理器体系，统一生命周期设计，多类任务一套“任务管理器”，就像本地系统一样简单。&lt;/li&gt; &#xA; &lt;li&gt;抽象统一系统架构体系，可中心化、可联邦化、可链式化，一切皆有可能。&lt;/li&gt; &#xA; &lt;li&gt;抽象统一外部文件系统，基于Common VFS 统一文件系统管理，从复杂底层存储中解放。&lt;/li&gt; &#xA; &lt;li&gt;抽象统一内核文件系统，支持级联逻辑卷（简单卷、跨区卷、条带卷）可自由容量编排规划，分布式对象文件系统，支持多种文件系统操作。&lt;/li&gt; &#xA; &lt;li&gt;抽象统一数据处理体系，泛容器化思想，抽象化DAO、DTO、Data Manipulation架构，一切皆可是Map、List、Set和Table等。&lt;/li&gt; &#xA; &lt;li&gt;抽象化部署模式和抽象云部署，无论是任何系统、本地进程、虚拟机部署、容器部署等。Hydra为您统一，“小程序”化进程模型，就像Springboot一样简单。&lt;/li&gt; &#xA; &lt;li&gt;基于分治和MapReduce思想设计，面向大数据处理处理系统设计。&lt;/li&gt; &#xA; &lt;li&gt;双工多路RPC设计基于Netty和NIO，支持双向控制（服务端可被动控制客户端），双端可收发，支持JSON、BSON、Protobuf（Java全自动动态编译）。&lt;/li&gt; &#xA; &lt;li&gt;传统实例化、IOC化、C/C++风格化，多种对象生命周期模式，更有趣的系统设计。&lt;/li&gt; &#xA; &lt;li&gt;可分级、分组、嵌套、级联的设计方法论，确保更灵活的大型系统设计，确保系统结构清晰、规整、可视、整整齐齐。&lt;/li&gt; &#xA; &lt;li&gt;无需担心抽象，无需担心&#34;吹牛逼&#34;，我们尽可能通过实际案例和有效代码，展示系统功能，也欢迎commit。——以实现小型爬虫搜索引擎为例。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;子系统、框架和实例系统&lt;/h3&gt; &#xA;&lt;h4&gt;Bean Nuts Hazelnut Sauron Radium (索伦·镭，分布式爬虫引擎)&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;该部分为分布式爬虫引擎、爬虫大数据处理、清洗、持久化框架系统的实现。面向分布式大规模系统性爬虫设计，支持任务编排和并行流水线爬虫、支持周期和定时大规模爬虫、支持并行离线数据处理。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Bean Nuts Hazelnut Sauron Shadow (索伦·暗影，以爬虫、小型搜索引擎为例)&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;该部分基于Pinecone、Ulfhedinn、Slime、Hydra、Radium等子框架最终设计的搜索引擎（数据采集、数据处理侧）应用实例。&lt;/li&gt; &#xA; &lt;li&gt;多个实例助你快速入门：1).维基百科全站爬取；2).Urban Dictionary全站爬取；3).imdb爬取；4).编年史子项目，每日全世界新闻采集，打造你的互联网记忆库；等。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Bean Nuts Hazelnut Sauron Eyes - The God View (索伦·之眼，数据知识图谱化与检索系统[用户侧终端应用])&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;数据检索引擎演示实例参考SauronEyes (&lt;a href=&#34;https://god.nutsky.com&#34;&gt;https://god.nutsky.com&lt;/a&gt; | &lt;a href=&#34;http://www.godview.net&#34;&gt;http://www.godview.net&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;⚔ 目录&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DragonKingpin/Hydra/beta/#%E4%B8%80%E6%8F%8F%E8%BF%B0&#34;&gt;一、描述&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DragonKingpin/Hydra/beta/#11%E6%A1%86%E6%9E%B6%E7%BB%84%E6%88%90&#34;&gt;1.1、框架组成&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DragonKingpin/Hydra/beta/#111%E5%9F%BA%E7%A1%80%E8%BF%90%E8%A1%8C%E6%94%AF%E6%8C%81%E5%BA%93&#34;&gt;1.1.1、Pinecone 基础运行支持库&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DragonKingpin/Hydra/beta/#1111%E6%89%A9%E5%B1%95%E5%AE%B9%E5%99%A8&#34;&gt;1.1.1.1、扩展容器&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DragonKingpin/Hydra/beta/#1112%E5%B7%A5%E5%85%B7%E5%BA%93&#34;&gt;1.1.1.2、工具库&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DragonKingpin/Hydra/beta/#112%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B3%BB%E7%BB%9F%E6%94%AF%E6%8C%81%E6%A1%86%E6%9E%B6&#34;&gt;1.1.2、Slime 大数据系统支持框架&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DragonKingpin/Hydra/beta/#113%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B3%BB%E7%BB%9F%E6%94%AF%E6%8C%81%E5%BA%93&#34;&gt;1.1.3、Ulfhedinn 基础运行支持库，第三方依赖版&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DragonKingpin/Hydra/beta/#114%E5%88%86%E5%B8%83%E5%BC%8F%E3%80%81%E4%BB%BB%E5%8A%A1%E7%B3%BB%E7%BB%9F%E6%A1%86%E6%9E%B6&#34;&gt;1.1.4、Hydra 分布式、任务系统框架&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DragonKingpin/Hydra/beta/#114%E5%88%86%E5%B8%83%E5%BC%8F%E3%80%81%E4%BB%BB%E5%8A%A1%E7%B3%BB%E7%BB%9F%E6%A1%86%E6%9E%B6&#34;&gt;1.1.5、Radium 分布式爬虫系统框架&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DragonKingpin/Hydra/beta/#12%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%9D%97%E7%BB%84%E6%88%90&#34;&gt;1.2、功能模块组成&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DragonKingpin/Hydra/beta/#121%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%BA%93&#34;&gt;1.2.1、网络通信库&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DragonKingpin/Hydra/beta/#1211%E6%B5%81%E5%A4%84%E7%90%86%E6%A8%A1%E5%9D%97&#34;&gt;1.2.1.1、流处理模块&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DragonKingpin/Hydra/beta/#%E4%BA%8C%E7%BC%96%E8%AF%91%E3%80%81%E4%BD%BF%E7%94%A8&#34;&gt;二、编译、使用&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DragonKingpin/Hydra/beta/#%E4%B8%89%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E8%AF%B4%E6%98%8E&#34;&gt;三、目录结构说明&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DragonKingpin/Hydra/beta/#31TODO&#34;&gt;3.1、TODO&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DragonKingpin/Hydra/beta/#%E5%9B%9B%E4%BD%BF%E7%94%A8%E8%AE%B8%E5%8F%AF&#34;&gt;四、使用许可&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DragonKingpin/Hydra/beta/#%E4%BA%94%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE&#34;&gt;五、参考文献&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DragonKingpin/Hydra/beta/#%E5%85%AD%E8%87%B4%E8%B0%A2&#34;&gt;六、致谢&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DragonKingpin/Hydra/beta/#%E4%B8%83%E9%A2%98%E5%A4%96%E8%AF%9D&#34;&gt;七、题外话&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;一、📝 描述&lt;/h2&gt; &#xA;&lt;h3&gt;1.1、框架组成&lt;/h3&gt; &#xA;&lt;h4&gt;全局中央架构鸟瞰图（抽象全局架构）&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/DragonKingpin/Hydra/beta/assets/imgs/architect/architect_frame_global.png&#34; alt=&#34;HydraArchitecture&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;1.1.1、Pinecone 基础运行支持库&lt;/h4&gt; &#xA;&lt;h5&gt;1.1.1.1、 扩展容器&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;LinkedTreeMap&lt;/li&gt; &#xA; &lt;li&gt;ScopeMap (多域查找树、Map), 实现和支持类似动态语言（如JS、PHP、Python等）的底层继承数据结构，支持两类子模型（单继承、多继承）， 可以实现多域查找的功能。&lt;/li&gt; &#xA; &lt;li&gt;Dictium、Dictionary（字典接口模型），实现和支持类似动态语言（如PHP、Python等）的Array、字典查找，Map和可索引对象进一步抽象化。&lt;/li&gt; &#xA; &lt;li&gt;Multi*Map (多种MultiValueMap范式)，实现支持多种多值Map的实现，如MultiCollectionMap、MultiSetMap等。&lt;/li&gt; &#xA; &lt;li&gt;Top (TopN问题通用解决)，实现和支持堆法、有序树法、多值有序树法三种实现。&lt;/li&gt; &#xA; &lt;li&gt;distinct (差异器)，实现传统Set法、分治法、Bloom等的集合差异分析器。&lt;/li&gt; &#xA; &lt;li&gt;affinity (亲缘性器)，实现和支持对亲缘抽象字典的继承、重写等。&lt;/li&gt; &#xA; &lt;li&gt;tabulate (遍历器)，实现以列表式对抽象字典的内部递归，并列表化和分析亲缘关系。&lt;/li&gt; &#xA; &lt;li&gt;ShardList (非复制式共享数组)，由 @Geniusay 贡献。&lt;/li&gt; &#xA; &lt;li&gt;TrieMap (前缀树Map)，支持非递归迭代器，类文件系统完整功能前缀树，Symbolic Reparse 引用挂载点。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;1.1.1.2、工具库&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;JSON库，BSON，JPlus(JSON++)库 (面向可二次开发、设计的自由JSON设计)，可以重写JSONEncoder、JSONDecoder、JSONCompiler、JSONDecompiler、注入器等。&lt;/li&gt; &#xA; &lt;li&gt;Name命名空间库&lt;/li&gt; &#xA; &lt;li&gt;lang (Java包和扩展库)，支持各类类扫描方法、包扫描方法、遍历和收集方法、加载、多域扫描等。&lt;/li&gt; &#xA; &lt;li&gt;GUID (由@kenssa4eedfd贡献)，统一分布式ID，魔改百度Uid，GUID64、GUID72，支持随机混淆。&lt;/li&gt; &#xA; &lt;li&gt;TODO TODO&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;1.1.2、Hydra&lt;/h4&gt; &#xA;&lt;h5&gt;1.1.2.1、系统架构、骨架设计&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;HierarchySystem，阶级系统(Master-Slaver推广架构)&lt;/li&gt; &#xA; &lt;li&gt;FederalSystem，联邦系统(面向投票式设计) [BETA, 20250101]&lt;/li&gt; &#xA; &lt;li&gt;BlockSystem，块式系统(面向边缘、链式系统设计)。让你的每台设备都成为你专属链上节点。 [BETA, 20250101]&lt;/li&gt; &#xA; &lt;li&gt;CascadeComponent, 级联组件设计，支持亲缘性回收控制，“The Omega Device”，级联回收主键引用。&lt;/li&gt; &#xA; &lt;li&gt;分布式容器（分布式多域树等）&lt;/li&gt; &#xA; &lt;li&gt;分布式微内核&lt;br&gt; 借鉴WinNT、Unix，支持KernelObject、挂载点、统一内核对象管理。&lt;br&gt; Unix风格内核句柄路径化，如分布式挂载 /proc/、/dev/ 等。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;1.1.2.2、统一调度编排系统&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Orchestration (事务、任务编排子系统)，面向统一解释器模式方法论和过程化设计，事务和任务编排逻辑化，支持循环控制、条件控制、散转控制、原子化等，更支持事务完整性设计。&lt;/li&gt; &#xA; &lt;li&gt;Auto (简易命令模式，可编程自动机系统)，实现支持Automaton简易生产-消费命令队列，实现支持PeriodicAutomaton可编程Timer，实现支持Marshalling流水线指令编排器。(更多Timer和算法持续更新中)&lt;/li&gt; &#xA; &lt;li&gt;Vector DAG（矢量图）， 本文提出一种通用的大规模矢量DAG（Vector DAG）图模型，用于支撑高性能调度、编排与控制任务，适配亿级以上节点规模的实际应用场景。通过拓扑拆分、矢量化子图划分及多种并发图算法，实现了大规模调度控制能力。 算法支持关键路径计算、节点可达性判断、剪枝优化、最小生成子图合并及最短路径计算等核心图处理能力。 &lt;a href=&#34;https://docs.nutsky.com/docs/hazelnut_sauron_zh_cn/uniform_massive_graph_dispatch&#34;&gt;https://docs.nutsky.com/docs/hazelnut_sauron_zh_cn/uniform_massive_graph_dispatch&lt;/a&gt; &lt;img src=&#34;https://raw.githubusercontent.com/DragonKingpin/Hydra/beta/assets/imgs/vdag_architecture.png&#34; alt=&#34;VDAGArchitecture&#34;&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;1.1.2.3、小程序系统&lt;/h5&gt; &#xA;&lt;p&gt;Servgram，小程序系统，是的这很微信，不过是服务端的小程序哦！进一步抽象和推广进程思想，任何服务介质（本地、虚拟机、容器等），一切服务、一切任务等。 一切统一和谐，一套调度、一套接口、一套操作，生命周期整整齐齐（满足你的控制欲），更可冗余确保稳定。&lt;br&gt; 配合任务编排和事务编排，多个任务，一套系统全包干。 (TODO，远端进程进一步实现、实现统一分布式锁接口)&lt;/p&gt; &#xA;&lt;h5&gt;1.1.2.4、统一消息分发系统&lt;/h5&gt; &#xA;&lt;h5&gt;1.1.2.5、WolfMC RPC&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;基于Netty设计的原创消息控制中间件，支持RPC模式。&lt;/li&gt; &#xA; &lt;li&gt;支持JSON、BSON、Protobuf，更多RPC协议和数据结构持续更新中。[TODO 分片、泳道]&lt;/li&gt; &#xA; &lt;li&gt;支持双工通信，双端可收可发。（服务端可被动控制客户端，双路Channel池设计）&lt;/li&gt; &#xA; &lt;li&gt;全自动Protobuf动态编译，支持直接接口代理（类似Mybatis Mapper工厂）。&lt;/li&gt; &#xA; &lt;li&gt;支持异步回调，类似AJAX。&lt;/li&gt; &#xA; &lt;li&gt;支持同步回调。&lt;/li&gt; &#xA; &lt;li&gt;配合MessageExpress, 支持类似 Spring Controller 式消息控制。&lt;/li&gt; &#xA; &lt;li&gt;支持AOP、IOC，可以自动依赖注入，支持类似Controller范式和消息注解拦截。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;1.1.2.6、统一服务注册、发现、管理系统&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;服务树&lt;br&gt; 支持多级分类的服务树，可以设置多级命名空间，如 &lt;code&gt;Name1.Name2.应用1.服务1&lt;/code&gt;。&lt;br&gt; 支持元信息继承、多引用、节点回收、支持复杂服务管理分类。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;1.1.2.7、分布式微内核&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;配置树、分布式注册表&lt;br&gt; &#34;盗版&#34; Apollo，支持分布式配置管理。一个配置中心，就像 Windows注册表一样。&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;统一DOM / 前缀树 抽象化，支持自定义节点（插件设计），文件系统式设计。&lt;/li&gt; &#xA;   &lt;li&gt;支持配置继承&lt;/li&gt; &#xA;   &lt;li&gt;支持Hard Link 引用(标记法引用计数，有循环引用检测 / inode 表设计)&lt;/li&gt; &#xA;   &lt;li&gt;支持选择器 （路径选择器、XPath）&lt;/li&gt; &#xA;   &lt;li&gt;支持大数据（数据库基准）&lt;/li&gt; &#xA;   &lt;li&gt;路径缓存设计&lt;/li&gt; &#xA;   &lt;li&gt;改进非递归DFS路径寻址算法&lt;/li&gt; &#xA;   &lt;li&gt;兼容Windows 配置表风格&lt;/li&gt; &#xA;   &lt;li&gt;支持移动、复制（支持递归级联，复制 / 移动文件夹和配置项）&lt;/li&gt; &#xA;   &lt;li&gt;支持 JSON、XML 等原始文本或动态数据格式，支持 JSON、XML 与注册表混转。&lt;/li&gt; &#xA;   &lt;li&gt;支持配置动态渲染（EL表达式、逻辑循环支持）&lt;/li&gt; &#xA;   &lt;li&gt;数据库操作和底层分离，支持数据库、内存、Redis等任意数据源&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;任务树&lt;br&gt; 任务、进程分类、分组和编排系统。&lt;br&gt; 对一级挂载点 &lt;code&gt;/proc/${proc_guid}/task&lt;/code&gt; 的二级挂载和分类。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;部署树、部署管理器&lt;br&gt; 多种部署模式（如容器、虚拟机、PaaS等），分类、分组和编排系统，类似 Windows 设备管理器。&lt;br&gt; 抽象部署设备类似传统操作系统的物理设备，通过编写驱动，实现对部署子系统的管理。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;场景树&lt;br&gt; 功能分类、分组和编排系统。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;统一用户系统&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;内核级统一用户、凭证、角色、权限管理。&lt;/li&gt; &#xA;   &lt;li&gt;统一单点登录中台化设计。&lt;/li&gt; &#xA;   &lt;li&gt;支持域、组、用户三级设计。&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;1.1.2.8、分布式存储系统&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;卷系统 &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;物理卷，多种数据源设计&lt;/li&gt; &#xA;   &lt;li&gt;简单卷&lt;/li&gt; &#xA;   &lt;li&gt;跨区卷&lt;/li&gt; &#xA;   &lt;li&gt;条带卷，基于状态机无锁编程化并行存储，采用基于差分多路缓存滑动窗口、DFA、FIFO多线程缓存等算法优化的高性能条带卷设计。 &lt;img src=&#34;https://raw.githubusercontent.com/DragonKingpin/Hydra/beta/assets/imgs/volume_architecture.png&#34; alt=&#34;VolumeArchitecture&#34;&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;应用层面本项目提供了物理卷与逻辑卷的管理后台方便用户的管理与使用 &lt;img src=&#34;https://raw.githubusercontent.com/DragonKingpin/Hydra/beta/assets/imgs/logic_volume_manage.png&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/DragonKingpin/Hydra/beta/assets/imgs/logic_volume_create.png&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/DragonKingpin/Hydra/beta/assets/imgs/physical_volume_manage.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;分布式文件系统&lt;br&gt; Hydra 是基于多级级联的大型系统架构，UOFS同样沿用了Hydra的整体架构体系，采样全局级联的设计。支持存储节点、索引节点、卷节点等每一层级的级联设计。 &lt;img src=&#34;https://raw.githubusercontent.com/DragonKingpin/Hydra/beta/assets/imgs/fs_architecture.svg?sanitize=true&#34; alt=&#34;FileSystemArchitecture&#34;&gt; 应用层面本项目不仅提供了文件浏览器的核心功能，还支持文件预览、多集群上传、外部挂载、文件完整性验证等。 &lt;img src=&#34;https://raw.githubusercontent.com/DragonKingpin/Hydra/beta/assets/imgs/file_manage.png&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/DragonKingpin/Hydra/beta/assets/imgs/file_preview.png&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/DragonKingpin/Hydra/beta/assets/imgs/external_mounting.png&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/DragonKingpin/Hydra/beta/assets/imgs/property_view.png&#34; alt=&#34;image&#34;&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;3.基于UOFS的CDN(文件分发网络) 本项目基于UOFS结合Kafka、RocketMQ、服务管理中心等提供了保证数据一致性的CDN服务,并提供文件版本管理与站点管理。 &lt;img src=&#34;https://raw.githubusercontent.com/DragonKingpin/Hydra/beta/assets/imgs/site_manage.png&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/DragonKingpin/Hydra/beta/assets/imgs/file_distribution_and_synchronization.png&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/DragonKingpin/Hydra/beta/assets/imgs/file_version_manage.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;版本管理&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;1.1.2.9、统一资源管理、分配接口系统［TODO］&lt;/h5&gt; &#xA;&lt;h5&gt;1.1.2.10、图形管理界面［TODO］&lt;/h5&gt; &#xA;&lt;h5&gt;1.1.2.11、TODO&lt;/h5&gt; &#xA;&lt;h4&gt;1.1.3、Slime 史莱姆大数据支持库&lt;/h4&gt; &#xA;&lt;h5&gt;1.1.3.1、统一块抽象、管理、分配系统（泛块式、抽象页面（连续、离散、自定义）、帧、分区、簇等）&lt;/h5&gt; &#xA;&lt;h5&gt;1.1.3.2、Mapper、Querier 抽象映射、查询器，统一接口多种实现（本地、数据库、缓存、数据仓库等）&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;优化和缓存版RDBMapper、IndexableMapper，使用多种缓存策略，泛容器化API接口使用。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;1.1.3.3、统一缓存库和查询优化库、支持LRU、冷热优化、页面缓存、页面LRU、多级缓存等多策略实现。&lt;/h5&gt; &#xA;&lt;h5&gt;1.1.3.4、Source抽象数据源库、支持RDB-ibatis、NoSQL、缓存、文件等扩展。&lt;/h5&gt; &#xA;&lt;h5&gt;1.1.3.5、Reducer库[TODO]，更多Reduce策略实现、接口&lt;/h5&gt; &#xA;&lt;h4&gt;1.1.4、Radium 分布式爬虫和搜索引擎数据取回、任务编排、处理、持久化框架&lt;/h4&gt; &#xA;&lt;h5&gt;1.1.4.1、一站式爬虫数据处理范式&lt;/h5&gt; &#xA;&lt;p&gt;基于Map-Reduce思想，面向TB-PB级别数据处理，统一任务编号、映射、处理。 范式包含 Reaver（掠夺者，数据取回器），Stalker（潜伏者，面向批量爬虫索引嗅探），Embezzler（洗钱者，面向批处理爬虫数据处理）。&lt;/p&gt; &#xA;&lt;h5&gt;1.1.4.2、统一多任务调度、配置、编排系统&lt;/h5&gt; &#xA;&lt;p&gt;支持事务型、Best-Effort等多种任务粒度控制。 支持分组、嵌套、多级任务调度，支持子任务继承父任务关系、血缘性。 支持任务回滚、熔断等接口设计。 TODO&lt;/p&gt; &#xA;&lt;h2&gt;二、🧬 编译、使用&lt;/h2&gt; &#xA;&lt;h3&gt;编译&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;项目使用Maven管理，使用jdk11以上版本即可运行。&lt;/li&gt; &#xA; &lt;li&gt;编译得到jar包，即插即用，随意部署。&lt;/li&gt; &#xA; &lt;li&gt;或使用 IntelliJ IDEA 直接打开即可。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;最小系统使用&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;无需特意配置环境变量等信息。&lt;/li&gt; &#xA; &lt;li&gt;系统配置文件，默认位于&#34;./system/setup/..&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json5&#34;&gt;    &#34;Orchestration&#34;         : {&#xA;      &#34;Name&#34;: &#34;ServgramOrchestrator&#34;,&#xA;      &#34;Type&#34;: &#34;Parallel&#34;, // Enum: { Sequential, Parallel, Loop }&#xA;&#xA;      // Servgram-Classes scanning package-scopes&#xA;      &#34;ServgramScopes&#34;: [&#xA;        &#34;com.sauron.heist.heistron&#34;&#xA;      ],&#xA;&#xA;      &#34;Transactions&#34;: [&#xA;        { &#34;Name&#34;: &#34;Heist&#34;, &#34;Type&#34;: &#34;Sequential&#34;, &#34;Primary&#34;: true }&#xA;      ]&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;默认启动 &lt;code&gt;Heist&lt;/code&gt; （爬虫）任务&lt;/li&gt; &#xA; &lt;li&gt;检查 &lt;code&gt;Heist&lt;/code&gt; 小程序配置，默认位于&#34;./system/setup/heist.json5&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json5&#34;&gt;    &#34;Orchestration&#34;    : {&#xA;        &#34;Name&#34;: &#34;HeistronOrchestrator&#34;,&#xA;        &#34;Type&#34;: &#34;Parallel&#34;, // Enum: { Sequential, Parallel, Loop }&#xA;    &#xA;        &#34;DirectlyLoad&#34; : {&#xA;          &#34;Prefix&#34;: [],&#xA;          &#34;Suffix&#34;: [ &#34;Heist&#34; ]&#xA;        },&#xA;    &#xA;        &#34;ServgramScopes&#34;: [&#xA;          &#34;com.sauron.shadow.heists&#34;,&#xA;          &#34;com.sauron.shadow.chronicle&#34;&#xA;        ],&#xA;    &#xA;        // 修改这里，可运行例程 &#39;Void&#39; , 最小系统演示&#xA;        &#34;Transactions&#34;: [&#xA;          { &#34;Name&#34;: &#34;Void&#34;, &#34;Type&#34;: &#34;Sequential&#34; /* Enum: { Sequential, Parallel, SequentialActions, ParallelActions, LoopActions }*/ },&#xA;        ]&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;检查 &lt;code&gt;Void&lt;/code&gt; 小小程序配置，默认位于&#34;./system/setup/heists/Void.json5&#34;，原则上注意大小写&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json5&#34;&gt;    &#34;Orchestration&#34;         : {&#xA;        &#34;Name&#34;: &#34;VoidOrchestrator&#34;,&#xA;        &#34;Type&#34;: &#34;Parallel&#34;, // Enum: { Sequential, Parallel, Loop }&#xA;    &#xA;        &#34;Transactions&#34;: [&#xA;          { &#34;Name&#34;: &#34;Jesus&#34;, &#34;Type&#34;: &#34;Sequential&#34;  },&#xA;          { &#34;Name&#34;: &#34;Satan&#34;, &#34;Type&#34;: &#34;Sequential&#34;  },&#xA;          { &#34;Name&#34;: &#34;Rick&#34; , &#34;Type&#34;: &#34;Sequential&#34;  }&#xA;        ]&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;正常启动，将开始本地流水线序列调度 &#34;Jesus&#34;、&#34;Satan&#34;、&#34;Rick&#34;三个大任务和其子任务。&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/DragonKingpin/Hydra/beta/assets/imgs/demo_result.png&#34; alt=&#34;最小系统成功运行图&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;三、🔨 目录结构说明&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TODO&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;四、🔬 使用许可&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MIT (保留本许可后，可随意分发、修改，欢迎参与贡献)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;五、📚 参考文献&lt;/h2&gt; &#xA;&lt;p&gt;(参考文献包括Nuts家族 C/C++、Java等子语言运行支持库、本项目框架、本项目等所有涉及的子项目的总参考文献、源码、设计、 专利等相关资料。便于读者了解相关技术（设计）的源头和底层方法论，作者向相关参考项目（以及未直接列出项目）作者表示崇高敬意和感谢。)&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;C/C++ STL (容器、运行支持库设计，算法、设计模式和数据结构)&lt;/li&gt; &#xA; &lt;li&gt;Java JDK (容器、运行支持库设计，算法、设计模式和数据结构)&lt;/li&gt; &#xA; &lt;li&gt;Go SDK (容器、运行支持库设计，算法、设计模式和数据结构)&lt;/li&gt; &#xA; &lt;li&gt;PHP 5.6 Source (解释器、相关支持库设计)&lt;/li&gt; &#xA; &lt;li&gt;MySQL Source (参考多个设计思想和部分思想实现)&lt;/li&gt; &#xA; &lt;li&gt;Linux Kernel (参考多个设计思想和部分思想实现)&lt;/li&gt; &#xA; &lt;li&gt;Win95 Kernel (Reveal Edition)，Win32Apis，Runtime framework&lt;/li&gt; &#xA; &lt;li&gt;WinNT 窗口事件思想、回调函数注入等&lt;/li&gt; &#xA; &lt;li&gt;C/C++ Boost&lt;/li&gt; &#xA; &lt;li&gt;C/C++ ACL -- One advanced C/C++ library for Unix/Windows.&lt;/li&gt; &#xA; &lt;li&gt;Java Springframework Family (How IOC/AOP/etc works)&lt;/li&gt; &#xA; &lt;li&gt;Hadoop MapReduce (How it works)&lt;/li&gt; &#xA; &lt;li&gt;Python TensorFlow (Graph, how it orchestras)&lt;/li&gt; &#xA; &lt;li&gt;Javascript DOM 设计、CSS选择器等&lt;/li&gt; &#xA; &lt;li&gt;其他若干个小框架、工具库、语言等（如Apache Commons、org.json、fastcgi、fastjson、libevent等），本文表示崇高敬意和感谢。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;六、🐣 致谢&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;必须感谢长江存储，不然我还要多花几倍钱买固态，感谢某东和某宝折扣~。&lt;/li&gt; &#xA; &lt;li&gt;TODO&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;七、🐱 题外话&lt;/h2&gt; &#xA;&lt;h3&gt;7.1 FQA&lt;/h3&gt; &#xA;&lt;h5&gt;7.1.1. 更新时间？&lt;/h5&gt; &#xA;&lt;p&gt;很遗憾已经上班牛马了，更新速率减低到(3h/pd)，但每周仍然保证更新！&lt;/p&gt; &#xA;&lt;h5&gt;7.1.2. Bean Nuts XXX是啥？&lt;/h5&gt; &#xA;&lt;p&gt;系统命名法，Bean是我第一个上网冲浪网名，Nuts是计算机领域根项目，Pinecone等坚果是子领域项目（如面向框架、面向业务等）,后面是子项目。&lt;/p&gt; &#xA;&lt;h5&gt;7.1.3. 为毛用Java？&lt;/h5&gt; &#xA;&lt;p&gt;本项目一开始就是C/C++写的，但是由于该项目难度和工作量，一直找不到合适的人一起开发，且维护成本随项目迭代成指数增长，心有余而力不足，但后续根据时间可能出Go版本。&lt;/p&gt; &#xA;&lt;h5&gt;7.1.4. 这种偏底层项目Java有无性能影响？&lt;/h5&gt; &#xA;&lt;p&gt;底层上肯定有一定影响，但Java是工业界非常优秀的实践之一，且那一点点Tiny性能损失与指数级代码维护相比，以人为本，问题不大。&lt;/p&gt; &#xA;&lt;h5&gt;7.1.5. 这种项目怎么维护、学习？&lt;/h5&gt; &#xA;&lt;p&gt;数仓和这类底层项目建设是系统工程，实践中很少有个人或非商业团队愿意耗资数万搭建小数仓体系的，哪怕在公司上班的同学没有一定职级也很难接触海量真实大数据。 实践中原始爬下来的海量4K小文件（或用户采集数据）-&amp;gt;数据结构化处理-&amp;gt;入库入仓-&amp;gt;大数据检索-&amp;gt;调用大模型API或生成图谱类-&amp;gt;并发检索等完整的数据血缘、链路是非常系统、昂贵且复杂的建设。 且我们不像大公司一样财大气粗，服务器算力和不要钱一样，因此技术选型不能直接照搬中台那一套，我们需要考虑非常多的真实场景。 本人会不断自底向上真实搭建这样一套接地气的迷你云计算、中台体系，通过代码和终端来分享、发现和真实维护。&lt;/p&gt; &#xA;&lt;h5&gt;7.1.6. 这种项目的要学习需要多少知识储备？&lt;/h5&gt; &#xA;&lt;p&gt;很多东西的建设都是系统工程，系统两字易写却难做，很多人需要一生去真正理解系统两字。 与传统业务项目的CRUD不同，这类项目是全链路的，说大是迷你搭建整个中台、云体系，说小可以说是造操作系统小玩具。 吹牛逼容易、落地困难，我要的核心是落地，&#34;我真有一头牛&#34;，因此这里没有一堆高大上的技术概念、技术黑话，很多技术和概念我会去简化、落地化而不是去卷所谓“优化”。 最后这个问题没有答案，迭代就是学习，就是储备，小白也有资格成长。&lt;/p&gt; &#xA;&lt;h3&gt;7.2 预告&lt;/h3&gt; &#xA;&lt;p&gt;[20万行，4年+迭代工作量] Bean Nuts Pinecone Draco C/C++ Edition (松果·龙族，运行支持框架)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;C/C++ 版运行支持框架，“盗版”JDK，参考并C++重写HashMap、LinkdedHashMap、LinkdedTreeMap、BPlusTree等若干容器。&lt;/li&gt; &#xA; &lt;li&gt;JSON、XML、HTML、DOM、CSS、Lock等若干小工具个实现。&lt;/li&gt; &#xA; &lt;li&gt;FastCGI版，“盗版”Spring + PHP风格。 【直接支持C/C++手搓后端，以本人个人博客网站为例，&lt;a href=&#34;https://www.rednest.cn&#34;&gt;Red Nest&lt;/a&gt;】&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;7.3 更多关联子系统、框架和实例系统&lt;/h3&gt; &#xA;&lt;h4&gt;Bean Nuts Pinecone Ursus Java Edition (松果·熊族，运行支持框架)&lt;/h4&gt; &#xA;&lt;p&gt;底层数据结构、算法、运行支持库、框架等支持系统。（位于本项目Pinecones/Pinecone）&lt;/p&gt; &#xA;&lt;h4&gt;Bean Nuts Walnut Ulfhedinn Java Edition (核桃·狼皮狂战士，操作系统底层、第三方API封装SDK)&lt;/h4&gt; &#xA;&lt;p&gt;Java版本未完全系统化实现，本欲迁移C/C++版本下的实现，但JVM和JDK把大部分都实现了，很尴尬。Java下使用涉及第三方API的封装将由该模块职能负责。（位于本项目Pinecones/Ulfhedinn）&lt;/p&gt; &#xA;&lt;h4&gt;Bean Nuts Walnut Sparta (核桃·斯巴达，图形界面交互系统)&lt;/h4&gt; &#xA;&lt;p&gt;本双月疯狂构建中。构建完将支持本系统以及与其他子系统的的图形界面、控制台双交互，系统将基于Springboot实现构建。（位于本项目Walnuts/Sparta）&lt;/p&gt; &#xA;&lt;h3&gt;7.4 ☣ 技术债声明, Acknowledgement ⚠&lt;/h3&gt; &#xA;&lt;p&gt;非严谨说明，由于本人技术栈杂、本人习惯等，且涉及项目历史长、本项目工程量巨大。可能导致部分概念、设计、不一定是当前Java技术栈体系下最优实现或最紧扣概念的设计。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;举个栗子：本人学习方法是先脑补，再补过程和概念，且先保业务开发进度的方法论（先验和迁移学习，说人话就是快速混用其他技术栈概念或实践，而非完美调研，反正不影响结果和功能）。 因此可能存在概念出错、不严谨，后续再还技术债的现象，但这不影响我们持续认真检查以确保最终质量。&lt;/li&gt; &#xA; &lt;li&gt;永无止境、实践出真知：Rome was not built in a day, 项目涉及的技术门类较多，这个项目是我本科和研究生期间的业余爱好项目。 虽然已尽可能搭建真实平台、实践、学习，但本人工作经验有限，因此不能保证不犯错误（甚至低级错误），欢迎批评指正，持续迭代。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;📈 项目活跃表&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://repobeats.axiom.co/api/embed/0ae23655bb105addf8d90a999df36f690d615af7.svg?sanitize=true&#34; alt=&#34;Alt&#34; title=&#34;Repobeats analytics image&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>