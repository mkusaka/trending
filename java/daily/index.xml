<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-08T01:35:51Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>skinny85/jilt</title>
    <updated>2024-01-08T01:35:51Z</updated>
    <id>tag:github.com,2024-01-08:/skinny85/jilt</id>
    <link href="https://github.com/skinny85/jilt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Java annotation processor for auto-generating Builder (including Type-Safe Builder) classes&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Jilt &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/cc.jilt/jilt&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/cc.jilt/jilt/badge.svg?style=flat&#34; alt=&#34;Download&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/skinny85/jilt/actions/workflows/build.yaml&#34;&gt;&lt;img src=&#34;https://github.com/skinny85/jilt/actions/workflows/build.yaml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Jilt is a &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/javax/annotation/processing/Processor.html&#34;&gt;Java annotation processor&lt;/a&gt; used for automatically generating classes that implement the &lt;a href=&#34;https://en.wikipedia.org/wiki/Builder_pattern#Java&#34;&gt;Builder design pattern&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Jilt&#39;s &#34;killer features&#34; compared to other tools in this same space are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for the Type-Safe (sometimes also called Staged, or Telescopic, or Step) variant of the Builder pattern. For more information on the Type-Safe Builder pattern, check out my &lt;a href=&#34;http://endoflineblog.com/type-safe-builder-pattern-in-java-and-the-jilt-library&#34;&gt;blog article on the subject&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The capability to generate Builders for any class, and without requiring any modifications to the target classes&#39; source code.&lt;/li&gt; &#xA; &lt;li&gt;Seamless interoperability with other annotation processors, most noticeably &lt;a href=&#34;https://projectlombok.org/&#34;&gt;Lombok&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Jilt is purely a code generator - it does not add any overhead, nor any runtime dependencies, to your code.&lt;/p&gt; &#xA;&lt;h4&gt;Example&lt;/h4&gt; &#xA;&lt;p&gt;Given this class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import org.jilt.Builder;&#xA;&#xA;@Builder&#xA;public final class Person {&#xA;    public final String name;&#xA;    public final boolean isAdult;&#xA;    &#xA;    public Person(String name, boolean isAdult) {&#xA;        this.name = name;&#xA;        this.isAdult = isAdult;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...Jilt will generate the following Builder code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class PersonBuilder {&#xA;    public static PersonBuilder person() {&#xA;        return new PersonBuilder();&#xA;    }&#xA;&#xA;    private String name;&#xA;    private boolean isAdult;&#xA;&#xA;    public PersonBuilder name(String name) {&#xA;        this.name = name;&#xA;        return this;&#xA;    }&#xA;    &#xA;    public PersonBuilder isAdult(boolean isAdult) {&#xA;        this.isAdult = isAdult;&#xA;        return this;&#xA;    }&#xA;    &#xA;    public Person build() {&#xA;        return new Person(name, isAdult);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://raw.githubusercontent.com/skinny85/jilt/master/#customizing-the-generated-code&#34;&gt;documentation below&lt;/a&gt; for ways to customize what Jilt generates.&lt;/p&gt; &#xA;&lt;h4&gt;Getting Jilt&lt;/h4&gt; &#xA;&lt;p&gt;Jilt is available from the &lt;a href=&#34;https://search.maven.org/search?q=g:cc.jilt&#34;&gt;Maven Central&lt;/a&gt; repository.&lt;/p&gt; &#xA;&lt;p&gt;Example Maven settings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependencies&amp;gt;&#xA;    &amp;lt;dependency&amp;gt;&#xA;        &amp;lt;groupId&amp;gt;cc.jilt&amp;lt;/groupId&amp;gt;&#xA;        &amp;lt;artifactId&amp;gt;jilt&amp;lt;/artifactId&amp;gt;&#xA;        &amp;lt;version&amp;gt;1.2&amp;lt;/version&amp;gt;&#xA;        &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt; &amp;lt;!-- Jilt is not needed at runtime --&amp;gt;&#xA;    &amp;lt;/dependency&amp;gt;&#xA;&amp;lt;/dependencies&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example Gradle settings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;repositories {&#xA;    mavenCentral()&#xA;}&#xA;&#xA;dependencies {&#xA;    // ...&#xA;    compileOnly &#39;cc.jilt:jilt:1.2&#39; // Jilt is not needed at runtime&#xA;    annotationProcessor &#39;cc.jilt:jilt:1.2&#39; // you might also need this dependency in newer Gradle versions&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re not using dependency managers, you can &lt;a href=&#34;https://repo1.maven.org/maven2/cc/jilt/jilt/1.2/jilt-1.2.jar&#34;&gt;download the JAR directly&lt;/a&gt; (it&#39;s distributed as a self-contained JAR, you don&#39;t need any additional dependencies for it) and add it to your classpath.&lt;/p&gt; &#xA;&lt;h4&gt;Customizing the generated code&lt;/h4&gt; &#xA;&lt;h5&gt;@Builder on classes&lt;/h5&gt; &#xA;&lt;p&gt;When you place the &lt;code&gt;@Builder&lt;/code&gt; annotation on the class itself, the resulting Builder will have as properties all instance fields of that class (you can mark a field with the &lt;code&gt;@Builder.Ignore&lt;/code&gt; annotation to exclude it from being added to the Builder), and will build the instance of that class assuming it has a constructor taking all of those properties as arguments, in the same order they were declared in the class. This allows you to easily use Jilt with &lt;a href=&#34;https://projectlombok.org/&#34;&gt;Lombok&lt;/a&gt;; for instance, the above example could have been rewritten as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import org.jilt.Builder;&#xA;import lombok.Data;&#xA;&#xA;@Builder&#xA;@Data&#xA;public final class Person {&#xA;    private final String name;&#xA;    private final boolean isAdult;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;@Builder on constructors&lt;/h5&gt; &#xA;&lt;p&gt;You can also place the annotation on a constructor; in that case, the Builder properties will be the constructor parameters, and the instance will be created by calling the constructor. So, this code will produce the same Builder as the above example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import org.jilt.Builder;&#xA;&#xA;public final class Person {&#xA;    public final String name;&#xA;    public final boolean isAdult;&#xA;    private int thisFieldWillBeIgnoredByTheBuilder;&#xA;&#xA;    @Builder&#xA;    public Person(String name, boolean isAdult) {&#xA;        this.name = name;&#xA;        this.isAdult = isAdult;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;@Builder on static methods&lt;/h5&gt; &#xA;&lt;p&gt;Finally, you can also place the &lt;code&gt;@Builder&lt;/code&gt; annotation on a (static) method. In that case, the built class will be the return type of the method, and the Builder properties will be all of the method parameters, in the same order as they were declared in the method. The instance will be created by making a call to the annotated method.&lt;/p&gt; &#xA;&lt;p&gt;This is the most flexible way of generating Builders in Jilt - you have full control of the code constructing the final instance, which allows you to do things like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Generate Builders for classes without modifying their source code, or for classes that you don&#39;t control (from libraries, for example).&lt;/li&gt; &#xA; &lt;li&gt;Generate Builders for classes with non-standard ways to construct them (for example, those that use setters instead of constructor parameters).&lt;/li&gt; &#xA; &lt;li&gt;Customize the construction behavior - for example, add validations, or default property values.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here is an example illustrating the possibilities:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import org.jilt.Builder;&#xA;&#xA;import java.util.Date;&#xA;&#xA;public abstract class DateFactory {&#xA;    @Builder(packageName = &#34;com.example&#34;)&#xA;    public static Date make(int month, int day, int year) {&#xA;        // validation&#xA;        if (month &amp;lt; 1 || month &amp;gt; 12)&#xA;            throw new IllegalArgumentException(&#34;month must be between 1 and 12&#34;);&#xA;&#xA;        // default value&#xA;        if (day == 0)&#xA;            day = 1;&#xA;&#xA;        // non-standard construction&#xA;        return new Date(year + 1900, month - 1, day);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And you can use the Builder like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.example.DateBuilder;&#xA;import org.junit.Assert;&#xA;import org.junit.Test;&#xA;&#xA;import java.util.Date;&#xA;&#xA;public class DateFactoryTest {&#xA;    @Test&#xA;    public void use_date_builder() throws Exception {&#xA;        Date date = DateBuilder.date()&#xA;                .month(12)&#xA;                .year(23)&#xA;                .build();&#xA;&#xA;        Assert.assertEquals(11, date.getMonth());&#xA;        Assert.assertEquals(1, date.getDay());&#xA;        Assert.assertEquals(1923, date.getYear());&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Type-Safe Builders&lt;/h5&gt; &#xA;&lt;p&gt;All of the Builders shown so far were &#34;regular&#34; Builders. Using the &lt;code&gt;@Builder&lt;/code&gt;&#39;s &lt;code&gt;style&lt;/code&gt; attribute, you can instead generate a Type-Safe (also called Staged, or Telescopic, or Step) Builder by setting &lt;code&gt;style&lt;/code&gt; to &lt;code&gt;BuilderStyle.TYPE_SAFE&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A Type-Safe Builder generates interfaces for each property of the Builder, and enforces that they have to be initialized before constructing the final instance. The order of construction will be exactly as the order of the properties in the Builder.&lt;/p&gt; &#xA;&lt;p&gt;For a longer and more in-depth introduction to the Type-Safe Builder pattern variant, check out my &lt;a href=&#34;http://endoflineblog.com/type-safe-builder-pattern-in-java-and-the-jilt-library&#34;&gt;blog article on the subject&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;So, this slightly modified code from above:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import org.jilt.Builder;&#xA;import org.jilt.BuilderStyle;&#xA;&#xA;@Builder(style = BuilderStyle.TYPE_SAFE)&#xA;public final class Person {&#xA;    public final String name;&#xA;    public final boolean isAdult;&#xA;&#xA;    public Person(String name, boolean isAdult) {&#xA;        this.name = name;&#xA;        this.isAdult = isAdult;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...generates a Builder that can be only used as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Person person = PersonBuilder.person()&#xA;    .name(&#34;John Doe&#34;) // this has to be &#39;name&#39; for the code to compile&#xA;    .isAdult(true) // this has to be &#39;isAdult&#39; for the code to compile&#xA;    .build(); // this has to be &#39;build&#39; for the code to compile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Optional properties&lt;/h5&gt; &#xA;&lt;p&gt;When using Type-Safe Builders, there are often properties that the client can, but doesn&#39;t have to, provide in order to construct a valid instance of the target class - the property could be optional, it could have some default, etc.&lt;/p&gt; &#xA;&lt;p&gt;When using the &lt;code&gt;TYPE_SAFE&lt;/code&gt; Builder style, you can mark a field or constructor/static method parameter (depending on where you placed the &lt;code&gt;@Builder&lt;/code&gt; annotation) optional by annotating it with the &lt;code&gt;@Opt&lt;/code&gt; annotation. All optional Builder properties will be grouped into a single interface (the same containing the &lt;code&gt;build&lt;/code&gt; method), which means the client can (but doesn&#39;t have to) provide them, after all of the required properties have been set. If a value for an optional property is not set, Jilt will construct the instance with the 0-value for that property&#39;s type (&lt;code&gt;0&lt;/code&gt; for &lt;code&gt;int&lt;/code&gt; and other numeric types,&lt;code&gt;null&lt;/code&gt; for reference types, etc.) as the value of the property.&lt;/p&gt; &#xA;&lt;p&gt;For example, a Builder for this class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import org.jilt.Builder;&#xA;import org.jilt.BuilderStyle;&#xA;import org.jilt.Opt;&#xA;&#xA;public final class User {&#xA;    public final String email, username, firstName, lastName, displayName;&#xA;&#xA;    @Builder(style = BuilderStyle.TYPE_SAFE)&#xA;    public User(String email, @Opt String username, String firstName,&#xA;                String lastName, @Opt String displayName) {&#xA;        this.email = email;&#xA;        this.username = username == null ? email : username;&#xA;        this.firstName = firstName;&#xA;        this.lastName = lastName;&#xA;        this.displayName = displayName == null&#xA;           ? firstName + &#34; &#34; + lastName&#xA;           : displayName;&#xA;   }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...can be used as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;User user = UserBuilder.user()&#xA;    .email(&#34;email@example.com&#34;) // this has to be &#39;email&#39; to compile&#xA;    .firstName(&#34;John&#34;) // this is not &#39;username&#39;, because that is an optional property&#xA;    .lastName(&#34;Doe&#34;) // this has to be &#39;lastName&#39; to compile&#xA;    .displayName(&#34;johnnyd&#34;) // this could be &#39;username&#39;, or skipped&#xA;    .build();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Type-Safe with ungrouped optionals style&lt;/h5&gt; &#xA;&lt;p&gt;There is one more Builder style - &lt;code&gt;TYPE_SAFE_UNGROUPED_OPTIONALS&lt;/code&gt;. It&#39;s very similar to &lt;code&gt;TYPE_SAFE&lt;/code&gt; - it only differs in the treatment of optional properties. Instead of bundling them together at the end of the build process like &lt;code&gt;TYPE_SAFE&lt;/code&gt;, this style retains the original order of the properties, but allows you to &#39;skip&#39; setting those that are optional, bypassing them and moving to the next required property. This is mostly useful in cases where a class has a lot of properties, but very few optional ones.&lt;/p&gt; &#xA;&lt;p&gt;For example, for the same code as the above &lt;code&gt;TYPE_SAFE&lt;/code&gt; example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import org.jilt.Builder;&#xA;import org.jilt.BuilderStyle;&#xA;import org.jilt.Opt;&#xA;&#xA;public final class User {&#xA;    public final String email, username, firstName, lastName, displayName;&#xA;&#xA;    @Builder(style = BuilderStyle.TYPE_SAFE_UNGROUPED_OPTIONALS)&#xA;    public User(String email, @Opt String username, String firstName,&#xA;                String lastName, @Opt String displayName) {&#xA;        this.email = email;&#xA;        this.username = username == null ? email : username;&#xA;        this.firstName = firstName;&#xA;        this.lastName = lastName;&#xA;        this.displayName = displayName == null&#xA;           ? firstName + &#34; &#34; + lastName&#xA;           : displayName;&#xA;   }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...the generated &lt;code&gt;TYPE_SAFE_UNGROUPED_OPTIONALS&lt;/code&gt; Builder can be used as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;User user = UserBuilder.user()&#xA;    .email(&#34;email@example.com&#34;) // this has to be &#39;email&#39; to compile - required property&#xA;    .username(&#34;johnnyd&#34;) // this line could be commented out - optional property&#xA;    .firstName(&#34;John&#34;) // this has to be &#39;firstName&#39; to compile - required property&#xA;    .lastName(&#34;Doe&#34;) // this has to be &#39;lastName&#39; to compile - required property&#xA;    .displayName(&#34;Unknown&#34;) // this line could be commented out - optional property&#xA;    .build();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Other @Builder attributes&lt;/h5&gt; &#xA;&lt;p&gt;In addition to&lt;code&gt;style&lt;/code&gt;, the &lt;code&gt;@Builder&lt;/code&gt; annotation has a bunch of attributes that allow you to control practically all aspects of the generated Builder (all of them are optional):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;className&lt;/code&gt; allows you to change the generated Builder&#39;s name. The default name is &lt;code&gt;&amp;lt;BuiltClass&amp;gt;Builder&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;packageName&lt;/code&gt; allows you to change the package the generated Builder will reside in. The default is for the Builder to be in the same package that the built class is in.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;setterPrefix&lt;/code&gt; allows you to add a prefix to the names of the generated setter methods. The default is to not have any prefix (the setter names will be the same as the property names).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;factoryMethod&lt;/code&gt; allows you to change the name of the generated static factory method for constructing Builder instances. The default is for the name to be equal to the uncapitalized name of the built class (for example, &lt;code&gt;person&lt;/code&gt; when building a &lt;code&gt;Person&lt;/code&gt; class).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;buildMethod&lt;/code&gt; allows you to change the name of the final method invoked on the Builder to obtain an instance of the built class. The default name of that method is &lt;code&gt;build&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;@BuilderInterfaces annotation&lt;/h5&gt; &#xA;&lt;p&gt;When generating a Type-Safe Builder (so, when the &lt;code&gt;@Builder.style&lt;/code&gt; attribute is set to either &lt;code&gt;BuilderStyle.TYPE_SAFE&lt;/code&gt; or &lt;code&gt;BuilderStyle.TYPE_SAFE_UNGROUPED_OPTIONALS&lt;/code&gt;), you can also place the &lt;code&gt;@BuilderInterfaces&lt;/code&gt; annotation on the same element &lt;code&gt;@Builder&lt;/code&gt; is on (so, a class, constructor, or static method). This annotation is used to customize the interfaces generated to ensure the type-safety of the resulting Builder. It has the following attributes (all of them are optional):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;outerName&lt;/code&gt; allows you to change the name of the outer interface that the per-property interfaces will be generated inside of (this is in order not to pollute the global namespace). The default name is &lt;code&gt;&amp;lt;BuiltClass&amp;gt;Builders&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;packageName&lt;/code&gt; allows you to change the package the generated interfaces will reside in. The default is for the interfaces to reside in the same package as the one the Builder will be generated in.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;innerNames&lt;/code&gt; allows you to set the pattern that will be used for naming the per-property generated interfaces. The character &lt;code&gt;*&lt;/code&gt; in the pattern will be substituted with the (capitalized) name of the property. The default name for the interfaces is simply the (capitalized) name of its corresponding property - so, the same as the pattern &lt;code&gt;&#34;*&#34;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lastInnerName&lt;/code&gt; allows you to change the name of the final interface - the one containing the &lt;code&gt;build&lt;/code&gt; method, which is invoked to obtain an instance of the target class. The default name for that interface is &lt;code&gt;Optionals&lt;/code&gt; for &lt;code&gt;BuilderStyle.TYPE_SAFE&lt;/code&gt; Builders, and &lt;code&gt;Build&lt;/code&gt; for &lt;code&gt;BuilderStyle.TYPE_SAFE_UNGROUPED_OPTIONALS&lt;/code&gt; ones.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Working in an IDE&lt;/h4&gt; &#xA;&lt;p&gt;Annotation processors can be a little tricky to get working correctly in an IDE. Here are some tips for the most popular ones:&lt;/p&gt; &#xA;&lt;h5&gt;Intellij IDEA&lt;/h5&gt; &#xA;&lt;p&gt;Make sure to enable annotation processing (&lt;code&gt;File&lt;/code&gt; -&amp;gt; &lt;code&gt;Settings&lt;/code&gt; -&amp;gt; &lt;code&gt;Build, Execution, Deployment&lt;/code&gt; -&amp;gt; &lt;code&gt;Compiler&lt;/code&gt; -&amp;gt; &lt;code&gt;Annotation Processors&lt;/code&gt;, check the box that says &lt;code&gt;Enable annotation processing&lt;/code&gt;). Now, the code should run fine at this point, but you might still get errors in the IDE because it can&#39;t find the sources for the generated Builder classes. In that case, it might be a good idea to change the radio button labelled &lt;code&gt;Store generated sources relative to&lt;/code&gt; in that same menu screen from &lt;code&gt;Module output directory&lt;/code&gt; (the default) to &lt;code&gt;Module content root&lt;/code&gt;. If you do that, make sure to mark the directories with the generated code as source directories (right click on them in the file tree -&amp;gt; &lt;code&gt;Mark directory as&lt;/code&gt; -&amp;gt; &lt;code&gt;Sources Root&lt;/code&gt; or &lt;code&gt;Test Sources Root&lt;/code&gt;, the names of the directories are &lt;code&gt;generated&lt;/code&gt; and &lt;code&gt;generated_tests&lt;/code&gt; by default).&lt;/p&gt; &#xA;&lt;h5&gt;Eclipse&lt;/h5&gt; &#xA;&lt;p&gt;Eclipse is a lot more cumbersome. Right click on the project -&amp;gt; &lt;code&gt;Properties&lt;/code&gt; -&amp;gt; &lt;code&gt;Java Compiler&lt;/code&gt; (expand the submenus) -&amp;gt; &lt;code&gt;Annotation Processing&lt;/code&gt;, tick the &lt;code&gt;Enable project-specific settings&lt;/code&gt; checkbox, and then &lt;code&gt;Enable annotation processing&lt;/code&gt;. Then, go to the &lt;code&gt;Factory Path&lt;/code&gt; submenu, tick the &lt;code&gt;Enable project-specific settings&lt;/code&gt; checkbox there, and add the Jilt JAR to the Factory path. Make sure that the &lt;code&gt;Generated source directory&lt;/code&gt; is marked as a Source Folder.&lt;/p&gt; &#xA;&lt;h4&gt;License&lt;/h4&gt; &#xA;&lt;p&gt;Jilt is open-source software, released under the Apache Version 2.0 License. See the &lt;a href=&#34;https://raw.githubusercontent.com/skinny85/jilt/master/License.txt&#34;&gt;License file&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kingtaeyeon/equity-calculator</title>
    <updated>2024-01-08T01:35:51Z</updated>
    <id>tag:github.com,2024-01-08:/kingtaeyeon/equity-calculator</id>
    <link href="https://github.com/kingtaeyeon/equity-calculator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;权益计算框架&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;背景介绍&lt;/h3&gt; &#xA;&lt;p&gt;在电商领域中，运营策略往往能直接影响到平台的收益，最常见的运营策略之一就是赠送优惠券了。在用户选完商品后，电商系统需要对用户所拥有且能使用的优惠券来计算出当前结算的最优惠金额，而有些类型的优惠券又是可叠加计算的，也就是说优惠券的计算顺序不一样，最终的计算出的实付金额也就不一样。&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/kingtaeyeon/equity-calculator/main/MATERIAL/rela.png&#34; width=&#34;60%&#34;&gt; &#xA;&lt;p&gt;假如某用户有7种不同类型的优惠券（下文简称权益），那么就需要计算7! * 7也就是35280次。 这个计算量是非常庞大的。因此，本系统实现了很多新颖的设计来求出用户优惠券叠加计算的最优解并且保证了接口的响应时间。&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/kingtaeyeon/equity-calculator/main/MATERIAL/RT.jpg&#34; width=&#34;1000&#34;&gt; &#xA;&lt;h3&gt;项目设计&lt;/h3&gt; &#xA;&lt;h4&gt;核心计算类 Permutation&amp;lt;T extends GoodsItem&amp;gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;Permutation&lt;/code&gt;是&lt;code&gt;equity-calculator&lt;/code&gt;的核心部分。它是一个抽象类，在&lt;code&gt;Permutation&lt;/code&gt;中设计了以下优化策略来保证性能：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;预存排列组合 这么设计的原因是在业务场景中需要频繁的计算排列，对于某个长度的序列，其排列结果是固定的。在Permutation类中的PERMUTATIONS属性存放了7以内的排列数结果集，这里使用了Byte来存储，因此占用的内存空间非常小。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;private final static Map&amp;lt;Integer,Collection&amp;lt;List&amp;lt;Byte&amp;gt;&amp;gt;&amp;gt; PERMUTATIONS = Maps.newHashMap();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;这个动作在类加载即完成，如果对7不满意，可以调整SUPPORTEDSIZE的大小，7是在实现中兼顾业务和性能最佳的参数，大家可以根据自己的需要来调整。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;public final static int SUPPORTEDSIZE = 7;&#xA;&#xA;static{&#xA;      //前置计算 1-SUPPORTEDSIZE 之间所有排列组合&#xA;    for(byte i=1;i&amp;lt;=SUPPORTEDSIZE;i++){&#xA;       PERMUTATIONS.put((int)i,Collections2.permutations(IntStream.range(0,i).boxed().map(x-&amp;gt;(byte)x.intValue()).collect(Collectors.toList())));&#xA;      }&#xA;  }&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;$A_n^3$ 级别缓存&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;相对于传统的&lt;code&gt;Key-Value&lt;/code&gt;结构，求解 $A_n^n$ 问题的缓存需要特殊设计，对一个优惠集合而言 $A_n^3$ 意味着缓存 n x (n-1) x (n-2) 条数据，默认n为7则需要缓存210条数据，兼顾内存大小和缓存带来的性能收益， $A_n^3$ 是最为合适的。&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Permutation&lt;/code&gt;的成员变量&lt;code&gt;cache&lt;/code&gt;来实现高性能缓存。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;private final Map&amp;lt;Integer, CalcState&amp;lt;T&amp;gt;&amp;gt; cache = Maps.newHashMap();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;cache&lt;/code&gt;的键是采用&lt;code&gt;Integer&lt;/code&gt;类型的，通常&lt;code&gt;String&lt;/code&gt;会更常用，然而在万次计算的场景下，&lt;code&gt;String&lt;/code&gt;的拼接已经成了瓶颈。 为了实现高性能的键，&lt;code&gt;Permutation&lt;/code&gt;通过位移对&lt;code&gt;Byte&lt;/code&gt;数组的前3位进行扰动，确保键的唯一性和性能。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;private static Integer calcKey(List&amp;lt;Byte&amp;gt; a){&#xA;       return  a.size()&amp;gt;=3?(a.get(0) &amp;lt;&amp;lt; 6)+ (a.get(1) &amp;lt;&amp;lt; 3) + a.get(2):0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Permutation&lt;/code&gt;提供了保存点来实现 $A_n^3$ 级别缓存，&lt;code&gt;CalcState&lt;/code&gt; 记录了计算到第3步的状态，包括当前订单优惠金额和计算过程、已享用优惠的商品等，这些属性的保存和回放&lt;code&gt;Permutation&lt;/code&gt;已经帮你做好了，&lt;code&gt;Permutation&lt;/code&gt;额外提供了抽象的保存和回放方法来满足你的个性化诉求。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;   /**&#xA;     * 业务将状态记录到保存点&#xA;     * @param state 保存点对象&#xA;     */&#xA;    protected abstract void makeSnapshot(DiscountContext&amp;lt;T&amp;gt; context, CalcState&amp;lt;T&amp;gt; state);&#xA;&#xA;    /**&#xA;     * 业务返回保存点状态&#xA;     * @param state 保存点对象&#xA;     */&#xA;    protected abstract void backToSnapshot(DiscountContext&amp;lt;T&amp;gt; context, CalcState&amp;lt;T&amp;gt; state);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;优惠计算是有优先级的，必须保证属性&lt;code&gt;calculateGroup&lt;/code&gt;值小的在前面运算，当&lt;code&gt;backToSnapshot&lt;/code&gt;发生时，需要额外判断缓存中最后一个优惠和当前准备计算优惠之间的关系，若不满足则直接跳出。&lt;code&gt;checkIfWakeUpJump&lt;/code&gt;方法将在缓存被使用后立刻判断是否需要继续下去。&lt;/p&gt; &#xA;&lt;h4&gt;上下文类 DiscountContext&amp;lt;T extends GoodsItem&amp;gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;DiscountContext&lt;/code&gt;是权益叠加计算过程中被不断传递和修改的上下文，也是&lt;code&gt;Permutation&lt;/code&gt;的成员变量，&lt;code&gt;DiscountContext&lt;/code&gt;同样包含很多优化策略：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CalcStage数组&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;在变更最频繁也是最重要的计算步骤对象&lt;code&gt;CalcStage&lt;/code&gt;使用数组存储，该数组随着上下文创建而创建，在&lt;code&gt;Permutation&lt;/code&gt;中使用&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;Arrays.fill(arr,null);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;将该数组清空并让它投入下一次计算，这样一次全排列过程中，数组只会被创建一次，避免了频繁创建数组带来的性能损耗。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;预计算&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;DiscountContext&lt;/code&gt;的初始化方法是静态的&lt;code&gt;create&lt;/code&gt;方法，该方法将商品和权益进行绑定，同时执行一些用户自定义的逻辑，这个过程简称为&lt;code&gt;预计算&lt;/code&gt;，预计算的结果会被保存在&lt;code&gt;DiscountContext&lt;/code&gt;的&lt;code&gt;preCompute&lt;/code&gt;属性，可以在后续的计算中直接取用，一劳永逸，避免了在后续的高速迭代中做相同的事情，比如商品分组、求和等等。&lt;/p&gt; &#xA;&lt;h4&gt;预计算 PreCompute&amp;lt;T extends GoodsItem&amp;gt;&lt;/h4&gt; &#xA;&lt;p&gt;预计算提供了接口，要使用预计算首先需要实现PreCompute接口&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;public interface PreCompute&amp;lt;T extends GoodsItem&amp;gt; {&#xA;    /**&#xA;     * 判断符合条件的活动类型，符合才会执行preComputeItems&#xA;     */&#xA;    Set&amp;lt;String&amp;gt; matchTypes();&#xA;&#xA;    /**&#xA;     * 对商品做一些复杂集合操作&#xA;     * @param items 当前参与优惠的商品&#xA;     * @param discount 当前优惠&#xA;     * @param preCompute 存储计算的结果&#xA;     */&#xA;     void preComputeItems(List&amp;lt;T&amp;gt; items, DiscountWrapper discount, Map&amp;lt;String,Object&amp;gt; preCompute);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;此外需要在资源目录下建立&lt;code&gt;calculator-core.properties&lt;/code&gt;文件，配置内容如下&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;precompute.path=你要扫描的包&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;PreComputeHolder&lt;/code&gt;将处理所有的&lt;code&gt;PreCompute&lt;/code&gt;实现类，只有&lt;code&gt;matchTypes&lt;/code&gt;匹配的情况下&lt;code&gt;preComputeItems&lt;/code&gt;方法才会被执行。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;public class PreComputeHolder {&#xA;    public static Set&amp;lt;PreCompute&amp;gt; COMPUTES= Sets.newHashSet();&#xA;    private final static String PATH = &#34;precompute.path&#34;;&#xA;&#xA;    static{&#xA;        Properties properties = new Properties();&#xA;        try {&#xA;              properties = PropertiesLoaderUtils.loadProperties(new FileSystemResource(Objects.requireNonNull(PreComputeHolder.class.getClassLoader().getResource(&#34;calculator-core.properties&#34;)).getPath()));&#xA;        } catch (Exception ignore) {&#xA;        }&#xA;        String path = properties.getProperty(PATH);&#xA;        if(StringUtils.isNotBlank(path)){&#xA;            Reflections reflections = new Reflections(path);&#xA;            Set&amp;lt;Class&amp;lt;? extends PreCompute&amp;gt;&amp;gt; subTypes = reflections.getSubTypesOf(PreCompute.class);&#xA;            for(Class&amp;lt;? extends PreCompute&amp;gt; clazz:subTypes){&#xA;                try {&#xA;                    COMPUTES.add(clazz.newInstance());&#xA;                } catch (Exception ignore) {&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;计算器 Calculator&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;Calculator&lt;/code&gt;是单个优惠的计算接口，它有&lt;code&gt;calcWarp&lt;/code&gt;一个方法，负责具体的优惠计算，但&lt;code&gt;calcWarp&lt;/code&gt;需要承担一些内部的事情，因此提供了抽象类&lt;code&gt;AbstractCalculator&lt;/code&gt;实现了&lt;code&gt;calcWarp&lt;/code&gt;，并最终暴露了一个更简单的&lt;code&gt;calc&lt;/code&gt;方法给使用者。&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;AbstractCalculator&lt;/code&gt;的内容如下，&lt;code&gt;calcWarp&lt;/code&gt;方法负责创建&lt;code&gt;CalcStage&lt;/code&gt;，维护&lt;code&gt;CalcStage&lt;/code&gt;数组等内部工作，这对使用者来说是透明的，使用者实现&lt;code&gt;calc&lt;/code&gt;就好。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;public abstract class AbstractCalculator&amp;lt;T extends GoodsItem&amp;gt; implements Calculator&amp;lt;T&amp;gt; {&#xA;    public long calcWarp(DiscountContext&amp;lt;T&amp;gt; context, DiscountWrapper discountWrapper, Map&amp;lt;Long, T&amp;gt; records, byte idx, int i) {&#xA;        CalcStage stage = new CalcStage();&#xA;        CalcResult cr = context.getCalcResult();&#xA;        long price= cr.getCurPrice();&#xA;        stage.setBeforeCalcPrice(price);&#xA;        price = calc(context, discountWrapper,records, price, stage);&#xA;        if(price&amp;lt;0){&#xA;            return price;&#xA;        }&#xA;        stage.setAfterCalcPrice(price);&#xA;        stage.setIndex(idx);&#xA;        stage.setStageType(discountWrapper.getType());&#xA;        cr.setCurPrice(price);&#xA;        if(stage.getBeforeCalcPrice()&amp;gt;stage.getAfterCalcPrice()) {&#xA;            cr.getCurStages()[i] = stage;&#xA;        }&#xA;        return price;&#xA;    }&#xA;&#xA;    /**&#xA;     * 返回该优惠下的最终要支付的金额,若不符合则返回 prevStagePrice&#xA;     * @param context 上下文&#xA;     * @param discountWrapper 优惠信息&#xA;     * @param records 记录享受过优惠的单品，key是calculateId，这里只提供容器，添加和判断规则由使用者自行决定&#xA;     * @param prevStagePrice 上一步计算的订单的价格&#xA;     * @param curStage 当前stage&#xA;     * @return&#xA;     */&#xA;    public abstract  long calc(DiscountContext&amp;lt;T&amp;gt; context, DiscountWrapper discountWrapper, Map&amp;lt;Long,T&amp;gt; records, long prevStagePrice, CalcStage curStage);&#xA;&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;最终用户继承&lt;code&gt;AbstractCalculator&lt;/code&gt;，需要在&lt;code&gt;Component&lt;/code&gt;注解中指定一个值，而&lt;code&gt;CalculatorRouter&lt;/code&gt;将通过这个值来路由到具体的权益计算器。这个值和&lt;code&gt;DiscountWrapper&lt;/code&gt;中的&lt;code&gt;type&lt;/code&gt;属性是对应的。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;@Component(&#34;discount&#34;)&#xA;public class DiscountCalc extends AbstractCalculator&amp;lt;GoodsItem&amp;gt; {&#xA;......&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>rememberber/WePush</title>
    <updated>2024-01-08T01:35:51Z</updated>
    <id>tag:github.com,2024-01-08:/rememberber/WePush</id>
    <link href="https://github.com/rememberber/WePush" rel="alternate"></link>
    <summary type="html">&lt;p&gt;专注批量推送的小而美的工具，目前支持：模板消息-公众号、模板消息-小程序、微信客服消息、微信企业号/企业微信消息、阿里云短信、阿里大于模板短信 、腾讯云短信、云片网短信、E-Mail、HTTP请求、钉钉、华为云短信、百度云短信、又拍云短信、七牛云短信&lt;/p&gt;&lt;hr&gt;&lt;a href=&#34;https://gitee.com/zhoubochina/WePush&#34;&gt; &lt;img alt=&#34;WePush-Logo&#34; src=&#34;https://gitee.com/zhoubochina/WePush/raw/master/screen_shoot/logo-128.png&#34;&gt; &lt;/a&gt; &#xA;&lt;h1&gt;WePush&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;专注批量推送的小而美的工具&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitee.com/zhoubochina/WePush&#34;&gt;&lt;img src=&#34;https://gitee.com/zhoubochina/WePush/badge/star.svg?theme=blue&#34; alt=&#34;码云Gitee&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rememberber/WePush&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/rememberber/WePush.svg?sanitize=true&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rememberber/WePush/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/rememberber/WePush.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rememberber/WePush/raw/master/LICENSE.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/rememberber/WePush.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;支持的平台&lt;/h2&gt; &#xA;&lt;p&gt;Windows • Linux • macOS&lt;/p&gt; &#xA;&lt;h3&gt;目前已经支持的消息类型&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;模板消息-公众号&lt;/li&gt; &#xA; &lt;li&gt;模板消息-小程序&lt;/li&gt; &#xA; &lt;li&gt;订阅消息-小程序&lt;/li&gt; &#xA; &lt;li&gt;微信客服消息&lt;/li&gt; &#xA; &lt;li&gt;微信企业号/企业微信消息&lt;/li&gt; &#xA; &lt;li&gt;小程序统一服务消息&lt;/li&gt; &#xA; &lt;li&gt;钉钉&lt;/li&gt; &#xA; &lt;li&gt;阿里云短信&lt;/li&gt; &#xA; &lt;li&gt;阿里大于模板短信&lt;/li&gt; &#xA; &lt;li&gt;腾讯云短信&lt;/li&gt; &#xA; &lt;li&gt;华为云短信&lt;/li&gt; &#xA; &lt;li&gt;百度云短信&lt;/li&gt; &#xA; &lt;li&gt;又拍云短信&lt;/li&gt; &#xA; &lt;li&gt;七牛云短信&lt;/li&gt; &#xA; &lt;li&gt;云片网短信&lt;/li&gt; &#xA; &lt;li&gt;E-Mail&lt;/li&gt; &#xA; &lt;li&gt;HTTP请求（单次、批量、压测）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;计划中支持的消息类型&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;网易云信短信&lt;/li&gt; &#xA; &lt;li&gt;榛子云短信&lt;/li&gt; &#xA; &lt;li&gt;Luosimao短信&lt;/li&gt; &#xA; &lt;li&gt;极光短信&lt;/li&gt; &#xA; &lt;li&gt;极光推送&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;功能&amp;amp;亮点&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;支持自定义消息内容并批量推送&lt;/li&gt; &#xA; &lt;li&gt;支持变量消息（可实现根据发送目标用户不同每条消息内容不一样）&lt;/li&gt; &#xA; &lt;li&gt;支持消息编辑、预览、消息管理&lt;/li&gt; &#xA; &lt;li&gt;支持通过文件导入用户（txt、csv、excel）&lt;/li&gt; &#xA; &lt;li&gt;支持通过MySQL导入用户&lt;/li&gt; &#xA; &lt;li&gt;支持微信公众号全员推送&lt;/li&gt; &#xA; &lt;li&gt;支持微信全家桶消息（公众号、小程序、企业号）&lt;/li&gt; &#xA; &lt;li&gt;支持各种粒度的定时推送&lt;/li&gt; &#xA; &lt;li&gt;支持推送历史管理和失败重新推送&lt;/li&gt; &#xA; &lt;li&gt;支持多账号管理和切换（微信）&lt;/li&gt; &#xA; &lt;li&gt;支持各种搜索、导入、导出&lt;/li&gt; &#xA; &lt;li&gt;小而美的可视化界面，支持亮暗多种外观风格&lt;/li&gt; &#xA; &lt;li&gt;支持全局字体字号设置&lt;/li&gt; &#xA; &lt;li&gt;支持推送结果邮件通知&lt;br&gt; ……&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;截图速览&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rememberber/WePush/master/assets/screen_shoot/1.png&#34; alt=&#34;Overview&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rememberber/WePush/master/assets/screen_shoot/2.png&#34; alt=&#34;Overview&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rememberber/WePush/master/assets/screen_shoot/3.png&#34; alt=&#34;Overview&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rememberber/WePush/master/assets/screen_shoot/4.png&#34; alt=&#34;Overview&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rememberber/WePush/master/assets/screen_shoot/5.png&#34; alt=&#34;Overview&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rememberber/WePush/master/assets/screen_shoot/7.png&#34; alt=&#34;Overview&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rememberber/WePush/master/assets/screen_shoot/6.png&#34; alt=&#34;Overview&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rememberber/WePush/master/assets/screen_shoot/theme.png&#34; alt=&#34;Overview&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;安装文件下载&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitee.com/zhoubochina/WePush/releases&#34;&gt;WePush下载地址&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;使用到的一些小技术点&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Java&lt;/li&gt; &#xA; &lt;li&gt;Java Swing&lt;/li&gt; &#xA; &lt;li&gt;线程池&lt;/li&gt; &#xA; &lt;li&gt;连接池（数据库：HikariCP、HTTP：PoolingHttpClient）&lt;/li&gt; &#xA; &lt;li&gt;HttpClient&lt;/li&gt; &#xA; &lt;li&gt;HttpAsyncClient&lt;/li&gt; &#xA; &lt;li&gt;定时任务&lt;/li&gt; &#xA; &lt;li&gt;SQLite&lt;/li&gt; &#xA; &lt;li&gt;MyBatis&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;遇到的麻烦和挑战&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Swing界面不好控制，导致需要投入较多精力和耐心&lt;/li&gt; &#xA; &lt;li&gt;工作过于饱和，经常到半夜很晚才挤出一点时间&lt;/li&gt; &#xA; &lt;li&gt;要做的事情有很多，比如WePush中间件及其附属的集消息中心、通知报警、任务、批量、重试、统计等于一身的方便部署的Web管理应用&lt;/li&gt; &#xA; &lt;li&gt;陪家人时间变少或无&lt;/li&gt; &#xA; &lt;li&gt;锻炼身体时间变少或无&lt;/li&gt; &#xA; &lt;li&gt;越来越发现需要不断学习源码和底层的重要性&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;特别感谢&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitee.com/binary/weixin-java-tools&#34;&gt;WxJava&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;http://hutool.cn/&#34;&gt;Hutool&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.formdev.com/flatlaf/&#34;&gt;FlatLaf&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;开发&amp;amp;构建&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitee.com/zhoubochina/WePush/wikis/build&#34;&gt;https://gitee.com/zhoubochina/WePush/wikis/build&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;使用帮助&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitee.com/zhoubochina/WePush/wikis/help&#34;&gt;https://gitee.com/zhoubochina/WePush/wikis/help&lt;/a&gt;&lt;br&gt; QQ交流群：&lt;/p&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;a href=&#34;https://gitee.com/zhoubochina/WePush/wikis/help&#34;&gt; &lt;img alt=&#34;WePush&#34; src=&#34;https://gitee.com/zhoubochina/WePush/raw/master/screen_shoot/wepush-qq-group.png&#34; height=&#34;200&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h3&gt;鼓励&amp;amp;赞赏&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;如果WePush对您有所帮助或便利，&lt;br&gt; 欢迎对我每天下班和周末时光的努力进行肯定，&lt;br&gt; 您的赞赏将会给我带来更多动力&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;a href=&#34;https://gitee.com/zhoubochina/WePush&#34;&gt; &lt;img alt=&#34;WePush&#34; src=&#34;https://gitee.com/zhoubochina/WePush/raw/master/screen_shoot/wx-zanshang.jpg&#34;&gt; &lt;/a&gt; &lt;/p&gt;</summary>
  </entry>
</feed>