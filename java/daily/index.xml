<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-01T01:37:27Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Hongmiao0207/chatgpt-java</title>
    <updated>2024-01-01T01:37:27Z</updated>
    <id>tag:github.com,2024-01-01:/Hongmiao0207/chatgpt-java</id>
    <link href="https://github.com/Hongmiao0207/chatgpt-java" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ChatGPT Java, it supports some of OpenAI&#39;s official interfaces (all interfaces will be supported in the future) and provides a conversational mode based on command-line chat.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ChatGPT-Java&lt;/h1&gt; &#xA;&lt;h2&gt;Project Overview&lt;/h2&gt; &#xA;&lt;p&gt;This project is a Java implementation of ChatGPT, supporting the OpenAI official API. It is currently in development, with the goal to evolve into a comprehensive Java SDK for OpenAI. This SDK is intended to facilitate quick and easy integration of OpenAI&#39;s capabilities into Java projects.&lt;/p&gt; &#xA;&lt;p&gt;In addition to API support, this project features a command-line mode for ChatGPT interactions. This allows users to engage in conversational dialogue directly through the command line, providing an easy and interactive way to explore ChatGPT&#39;s functionalities.&lt;/p&gt; &#xA;&lt;h2&gt;Technical Architecture&lt;/h2&gt; &#xA;&lt;p&gt;The project is built on the Spring Boot framework, leveraging the power and simplicity it offers for developing stand-alone, production-grade applications.&lt;/p&gt; &#xA;&lt;p&gt;Key aspects of the technical architecture include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Reactive Programming&lt;/strong&gt;: Both the service and test stages of the project utilize reactive programming paradigms. This approach offers improved scalability and a more efficient way to handle asynchronous data streams.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Testing Framework&lt;/strong&gt;: The project uses JUnit 5 for testing. This modern testing framework for Java applications allows for more flexible and powerful testing scenarios.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Logging&lt;/strong&gt;: SLF4J (Simple Logging Facade for Java) is used for logging purposes. It serves as a simple facade or abstraction for various logging frameworks, allowing the end-user to plug in the desired logging framework at deployment time.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Utility Tools&lt;/strong&gt;: For ease of development, the project incorporates Hutool‚Äîa set of tools that include a rich set of features while remaining simple to use.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Token Calculation Algorithm&lt;/strong&gt;: The project employs the open-source token calculation algorithm from knuddelsgmbh/jtokkit. This algorithm is crucial for accurately calculating and handling token-based operations essential for interfacing with the OpenAI API.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Future Goals&lt;/h2&gt; &#xA;&lt;p&gt;The vision for this project is to continuously extend its capabilities, eventually offering full support for all the features of the OpenAI API. The aim is to provide a robust, efficient, and easy-to-use Java SDK that can be seamlessly integrated into a wide range of Java applications, from small-scale projects to large enterprise systems.&lt;/p&gt; &#xA;&lt;p&gt;Stay tuned for updates and enhancements as this project evolves.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cBioPortal/cbioportal</title>
    <updated>2024-01-01T01:37:27Z</updated>
    <id>tag:github.com,2024-01-01:/cBioPortal/cbioportal</id>
    <link href="https://github.com/cBioPortal/cbioportal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;cBioPortal for Cancer Genomics&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;cBioPortal&lt;/h1&gt; &#xA;&lt;p&gt;The cBioPortal for Cancer Genomics provides visualization, analysis, and download of large-scale cancer genomics data sets. For a short intro on cBioPortal, see &lt;a href=&#34;https://docs.google.com/presentation/d/1hm0G77UklZnpQfFvywBfW2ZIsy8deKi5r1RfJarOPLg/edit?usp=sharing&#34;&gt;these introductory slides&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to know how to setup a private instance of the portal and/or get set up for developing, see the &lt;a href=&#34;https://docs.cbioportal.org&#34;&gt;documentation&lt;/a&gt;. For details on contributing code changes via pull requests, see our &lt;a href=&#34;https://raw.githubusercontent.com/cBioPortal/cbioportal/master/CONTRIBUTING.md&#34;&gt;Contributing document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are interested in coordinating the development of new features, please contact &lt;a href=&#34;mailto:cbioportal@cbioportal.org&#34;&gt;cbioportal@cbioportal.org&lt;/a&gt; or reach out on &lt;a href=&#34;https://slack.cbioportal.org&#34;&gt;https://slack.cbioportal.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üìò Documentation&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://docs.cbioportal.org&#34;&gt;https://docs.cbioportal.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ü§ù License&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/cBioPortal/cbioportal/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üíª Run Backend&lt;/h2&gt; &#xA;&lt;p&gt;cBioPortal consists of several components, please read the &lt;a href=&#34;https://docs.cbioportal.org/architecture-overview/&#34;&gt;Architecture docs&lt;/a&gt; to figure out what repo would be relevant to edit. If you e.g. only want to make frontend changes, one can directly edit &lt;a href=&#34;https://github.com/cbioportal/cbioportal-frontend&#34;&gt;the frontend repo&lt;/a&gt; instead. Read the instructions in that repo for more info on how to do frontend development. This repo only contains the backend part. Before editing the backend, it&#39;s good to read the &lt;a href=&#34;https://raw.githubusercontent.com/cBioPortal/cbioportal/master/docs/Backend-Code-Organization.md&#34;&gt;backend code organization&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Local Development&lt;/h3&gt; &#xA;&lt;h4&gt;What MySQL database to use&lt;/h4&gt; &#xA;&lt;p&gt;We recommend to set up a MySQL database using &lt;a href=&#34;https://github.com/cBioPortal/cbioportal-docker-compose&#34;&gt;Docker Compose&lt;/a&gt;. It&#39;s useful to know how to do this as it allows you to import any dataset of your choice. For debugging production issues, we also have a database available with all the data on &lt;a href=&#34;https://cbioportal.org&#34;&gt;https://cbioportal.org&lt;/a&gt; that one can connect to directly. Please reach out on slack to get the credentials.&lt;/p&gt; &#xA;&lt;h4&gt;Command Line&lt;/h4&gt; &#xA;&lt;p&gt;If you want to run the cBioPortal web app from the command line please follow these instructions. First, we want to make sure that all ports are open for the services set up through &lt;a href=&#34;https://github.com/cBioPortal/cbioportal-docker-compose&#34;&gt;docker compose&lt;/a&gt; (i.e. not just accessible to other containers within the same Docker Compose file). To do so, in the &lt;a href=&#34;https://github.com/cBioPortal/cbioportal-docker-compose&#34;&gt;docker compose repo&lt;/a&gt; run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker compose -f docker-compose.yml -f open-ports.yml up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This should open the ports. Now we are ready to run the cBioPortal web app locally. You can compile the backend code with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export JAVA_HOME=/Library/Java/JavaVirtualMachines/temurin-11.jdk/Contents/Home/ &amp;amp;&amp;amp; mvn -DskipTests clean install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: change &lt;code&gt;JAVA_HOME&lt;/code&gt; to point to a JDK 11 version. If everything compiles correctly you can then run the app like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;java -Xms2g -Xmx4g \&#xA;     -Dauthenticate=noauthsessionservice \&#xA;     -Dsession.service.url=http://localhost:5000/api/sessions/my_portal/ \&#xA;     -Dsession.service.origin=&#39;*&#39; \&#xA;     -Dspring.datasource.username=cbio_user \&#xA;     -Dspring.datasource.password=somepassword \&#xA;     -Dspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver \&#xA;     -Dspring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect \&#xA;     -Dspring.datasource.url=&#39;jdbc:mysql://cbio_user:somepassword@localhost:3306/cbioportal?useSSL=false&amp;amp;allowPublicKeyRetrieval=true&#39; \&#xA;     -Dshow.civic=true \&#xA;     -Dskin.footer=&#39;&#39; \&#xA;     -Dapp.name=&#39;my-portal&#39; \&#xA;     -Ddbconnector=dbcp \&#xA;     -cp &#34;$PWD:$PWD/BOOT-INF/lib/*&#34; \&#xA;     org.cbioportal.PortalApplication&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The app should now show up at &lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Deploy your development image inside Docker Compose&lt;/h4&gt; &#xA;&lt;p&gt;Another option is to deploy your development image directly into the &lt;a href=&#34;https://github.com/cBioPortal/cbioportal-docker-compose/raw/5da068f0eb9b4f42db52ab5e91321b26a1826d7a/docker-compose.yml#L6&#34;&gt;docker-compose&lt;/a&gt; file. First build the image like this&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build -t cbioportal/cbioportal:my-dev-cbioportal-image -f docker/web-and-data/Dockerfile .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then change the &lt;a href=&#34;https://github.com/cBioPortal/cbioportal-docker-compose/raw/master/.env&#34;&gt;env file&lt;/a&gt; to use &lt;code&gt;cbioportal/cbioportal:my-dev-cbioportal-image&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Local Development&lt;/h3&gt; &#xA;&lt;p&gt;Note: internally we have a dev database available with the public data set that one can connect to directly. Please reach out on slack to get the credentials. It is usually best to use a small test dataset, but if a copy of the production database is necessary for e.g. fixing a bug specific to production data that can be useful.&lt;/p&gt; &#xA;&lt;h3&gt;üïµÔ∏è‚Äç‚ôÄÔ∏è Debugging&lt;/h3&gt; &#xA;&lt;p&gt;If you want to attach a debugger you can change the &lt;code&gt;docker-compose.yml&lt;/code&gt; file to include the paramaters: &lt;code&gt;-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005&lt;/code&gt; (make sure to expose the debug port by adding &lt;code&gt;5005:5005&lt;/code&gt; in the ports section of the cbioportal container). If you are running the java app outside of docker you can add the same parameters to the java command line arguments instead.&lt;/p&gt; &#xA;&lt;p&gt;You can then use a JAVA IDE to connect to that port. E.g. in &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;VSCode&lt;/a&gt;, one would add the following configuration to &lt;code&gt;launch.json&lt;/code&gt; to connect:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    &#34;version&#34;: &#34;0.2.0&#34;,&#xA;    &#34;configurations&#34;: [&#xA;        {&#xA;            &#34;type&#34;: &#34;java&#34;,&#xA;            &#34;name&#34;: &#34;Debug (Attach)&#34;,&#xA;            &#34;request&#34;: &#34;attach&#34;,&#xA;            &#34;hostName&#34;: &#34;localhost&#34;,&#xA;            &#34;port&#34;: 5005,&#xA;            &#34;projectName&#34;: &#34;cbioportal&#34;&#xA;        }&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üå≥ Branch Information&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;main branch&lt;/th&gt; &#xA;   &lt;th&gt;upcoming release branch&lt;/th&gt; &#xA;   &lt;th&gt;later release candidate branch&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Branch name&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/cBioPortal/cbioportal/tree/master&#34;&gt;&lt;code&gt;master&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;--&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/cBioPortal/cbioportal/tree/rc&#34;&gt;&lt;code&gt;rc&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Description&lt;/td&gt; &#xA;   &lt;td&gt;All bug fixes and features not requiring database migrations go here. This code is either already in production or will be released this week&lt;/td&gt; &#xA;   &lt;td&gt;Next release that requires database migrations. Thorough manual product review often takes place for this branch before release&lt;/td&gt; &#xA;   &lt;td&gt;Later releases with features that require database migrations. This is useful to allow merging in new features without affecting the upcoming release. Could be seen as a development branch, but note that only high quality pull requests are merged. That is the feature should be pretty much ready for release after merge.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Live instance&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.cbioportal.org&#34;&gt;https://www.cbioportal.org&lt;/a&gt; / &lt;a href=&#34;https://master.cbioportal.org&#34;&gt;https://master.cbioportal.org&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;--&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://rc.cbioportal.org&#34;&gt;https://rc.cbioportal.org&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Live instance version&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.cbioportal.org/api/info&#34;&gt;https://www.cbioportal.org/api/info&lt;/a&gt; / &lt;a href=&#34;https://master.cbioportal.org/api/info&#34;&gt;https://master.cbioportal.org/api/info&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;--&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://rc.cbioportal.org/api/info&#34;&gt;https://rc.cbioportal.org/api/info&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Docker Image&lt;/td&gt; &#xA;   &lt;td&gt;cbioportal/cbioportal:master&lt;/td&gt; &#xA;   &lt;td&gt;--&lt;/td&gt; &#xA;   &lt;td&gt;cbioportal/cbioportal:rc&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Kubernetes Config&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/knowledgesystems/knowledgesystems-k8s-deployment/raw/master/cbioportal/cbioportal_spring_boot.yaml&#34;&gt;production&lt;/a&gt; / &lt;a href=&#34;https://github.com/knowledgesystems/knowledgesystems-k8s-deployment/raw/master/cbioportal/cbioportal_backend_master.yaml&#34;&gt;master&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;--&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/knowledgesystems/knowledgesystems-k8s-deployment/raw/master/cbioportal/cbioportal_backend_rc.yaml&#34;&gt;rc&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Status&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/cBioPortal/cbioportal/actions/workflows/core-test.yml?query=branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/cbioportal/cbioportal/workflows/Core%20tests/badge.svg?sanitize=true&#34; alt=&#34;master build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/cBioPortal/cbioportal/actions/workflows/integration-test.yml?query=branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/cbioportal/cbioportal/workflows/Integration%20tests/badge.svg?sanitize=true&#34; alt=&#34;master build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/cBioPortal/cbioportal/actions/workflows/dockerimage.yml?query=branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/cbioportal/cbioportal/workflows/Docker%20Image%20CI/badge.svg?sanitize=true&#34; alt=&#34;master build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/cBioPortal/cbioportal/actions/workflows/validate-data.yml?query=branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/cbioportal/cbioportal/workflows/Python%20validator/badge.svg?sanitize=true&#34; alt=&#34;master build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.circleci.com/pipelines/github/cBioPortal/cbioportal?branch=master&amp;amp;filter=all&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/cBioPortal/cbioportal/tree/master.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;--&lt;/td&gt; &#xA;   &lt;td&gt;--&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;üöÄ Releases&lt;/h2&gt; &#xA;&lt;p&gt;Release Notes on GitHub:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cBioPortal/cbioportal/releases&#34;&gt;https://github.com/cBioPortal/cbioportal/releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;See also the cBioPortal News section for user focused release information:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.cbioportal.org/news&#34;&gt;https://www.cbioportal.org/news&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Docker Images are available for each tag and branch:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/repository/docker/cbioportal/cbioportal/tags&#34;&gt;https://hub.docker.com/repository/docker/cbioportal/cbioportal/tags&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üëâ Other Repos&lt;/h2&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://docs.cbioportal.org/2.1-deployment/architecture-overview&#34;&gt;Architecture docs&lt;/a&gt; to see how these relate:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cBioPortal/cbioportal-frontend&#34;&gt;https://github.com/cBioPortal/cbioportal-frontend&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cbioportal/session-service&#34;&gt;https://github.com/cbioportal/session-service&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cBioPortal/datahub/&#34;&gt;https://github.com/cBioPortal/datahub/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>