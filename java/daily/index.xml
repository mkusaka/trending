<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-23T01:29:35Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>chiteroman/FrameworkPatch</title>
    <updated>2024-05-23T01:29:35Z</updated>
    <id>tag:github.com,2024-05-23:/chiteroman/FrameworkPatch</id>
    <link href="https://github.com/chiteroman/FrameworkPatch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Modify framework.jar to build on system level a valid certificate chain&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Framework Patch&lt;/h1&gt; &#xA;&lt;p&gt;Modify framework.jar to build a valid certificate chain.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Intermediate Windows and Linux knowledge.&lt;/li&gt; &#xA; &lt;li&gt;Intermediate Java and Smali knowledge.&lt;/li&gt; &#xA; &lt;li&gt;WSL (only in Windows).&lt;/li&gt; &#xA; &lt;li&gt;Java.&lt;/li&gt; &#xA; &lt;li&gt;7zip.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In GNU/Linux distro, install this packages (I use Ubuntu in WSL2):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt update&#xA;sudo apt full-upgrade -y&#xA;sudo apt install -y default-jdk zipalign&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;SystemRW&lt;/h2&gt; &#xA;&lt;p&gt;To make system rw you can use @lebigmac scripts: &lt;a href=&#34;https://systemrw.com/download.php&#34;&gt;https://systemrw.com/download.php&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For my vayu, I used this: &lt;a href=&#34;https://mega.nz/file/TQ42WApL#ky3OzPwEKQeKrFGJYygqEr07zsidEqYAd7lSu9-ceEM&#34;&gt;https://mega.nz/file/TQ42WApL#ky3OzPwEKQeKrFGJYygqEr07zsidEqYAd7lSu9-ceEM&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;FLASH IN CUSTOM RECOVERY. AFTER FLASHING; REBOOT TO RECOVERY AGAIN TO START MODIFYING SYSTEM.&lt;/p&gt; &#xA;&lt;h2&gt;Tutorial&lt;/h2&gt; &#xA;&lt;p&gt;First, cd to a working (and clean) directory.&lt;/p&gt; &#xA;&lt;p&gt;Pull framework.jar from your device:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;adb pull /system/framework/framework.jar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, compile &lt;a href=&#34;https://github.com/google/smali&#34;&gt;smali&lt;/a&gt;: (Use WSL if you are in Windows)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --depth=1 https://github.com/google/smali.git&#xA;cd smali&#xA;./gradlew build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then pick smali and baksmali fatJars and paste to working dir.&lt;/p&gt; &#xA;&lt;p&gt;Using 7zip extract framework.jar to framework/ directory.&lt;/p&gt; &#xA;&lt;p&gt;Now using &lt;a href=&#34;https://github.com/skylot/jadx&#34;&gt;jadx&lt;/a&gt; open framework.jar and check these classes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;android.security.keystore2.AndroidKeyStoreSpi&lt;/li&gt; &#xA; &lt;li&gt;android.app.Instrumentation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You must check in where .dex they are, you can know by checking upper text in class declaration, something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/* loaded from: classes3.dex */&#xA;public class AndroidKeyStoreSpi extends KeyStoreSpi&#xA;&#xA;/* loaded from: classes.dex */&#xA;public class Instrumentation &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now using baksmali.jar, decompile that .dex files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;java -jar baksmali.jar d framework/classes3.dex -o classes3&#xA;java -jar baksmali.jar d framework/classes.dex -o classes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After .dex files are decompiled, you must search in folders for this files and modify like this:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;AndroidKeyStoreSpi.smali:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Search for method &#34;engineGetCertificateChain&#34; and near the end should be a line like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;const/4 v4, 0x0&#xA;aput-object v2, v3, v4&#xA;return-object v3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this example:&lt;/p&gt; &#xA;&lt;p&gt;v2 -&amp;gt; leaf cert. v3 -&amp;gt; certificate chain. v4 -&amp;gt; 0, the position to insert the leaf cert in certificate chain.&lt;/p&gt; &#xA;&lt;p&gt;It may be different in your .smali file. Do not copy and paste...&lt;/p&gt; &#xA;&lt;p&gt;After aput operation, you must add this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;invoke-static {XX}, Lcom/android/internal/util/framework/Android;-&amp;gt;modifyCertificates([Ljava/security/cert/Certificate;)[Ljava/security/cert/Certificate;&#xA;move-result-object XX&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace XX with the leaf certificate register.&lt;/p&gt; &#xA;&lt;p&gt;So the final code (in this example) should be this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;const/4 v4, 0x0&#xA;aput-object v2, v3, v4&#xA;invoke-static {v3}, Lcom/android/internal/util/framework/Android;-&amp;gt;modifyCertificates([Ljava/security/cert/Certificate;)[Ljava/security/cert/Certificate;&#xA;move-result-object v3&#xA;return-object v3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Instrumentation.smali:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Search for &#34;newApplication&#34; methods and before the return operation, add this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;invoke-static {XX}, Lcom/android/internal/util/framework/Android;-&amp;gt;onNewApp(Landroid/content/Context;)V&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace XX with the Context register.&lt;/p&gt; &#xA;&lt;p&gt;Now compile again the files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;java -jar smali.jar a -a {API_LEVEL} classes3 -o framework/classes3.dex&#xA;java -jar smali.jar a -a {API_LEVEL} classes -o framework/classes.dex&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace {API_LEVEL} with the Android version you are running.&lt;/p&gt; &#xA;&lt;p&gt;Open this project in Android Studio and change EC and RSA keys, you must provide keybox private keys. Compile as release and copy classes.dex file.&lt;/p&gt; &#xA;&lt;p&gt;Now add a number greater than the one that already exists in the framework/.&lt;/p&gt; &#xA;&lt;p&gt;For example, if the greatest number is classes5.dex, you must copy it as classes6.dex&lt;/p&gt; &#xA;&lt;p&gt;Using 7zip recompile as .zip all framework/ files without compression.&lt;/p&gt; &#xA;&lt;p&gt;After you have the framework.zip use zipalign:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;zipalign -f -p -v -z 4 framework.zip framework.jar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now move framework.jar to /system/framework, you can use Magisk module to replace it or mount /system as read-write and replace it.&lt;/p&gt;</summary>
  </entry>
</feed>