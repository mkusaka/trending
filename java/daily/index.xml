<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-28T01:36:59Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>linkedin/venice</title>
    <updated>2022-09-28T01:36:59Z</updated>
    <id>tag:github.com,2022-09-28:/linkedin/venice</id>
    <link href="https://github.com/linkedin/venice" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Venice, Derived Data Platform for planet-scale workloads.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Venice&lt;/h1&gt; &#xA;&lt;p&gt;Venice is a derived data storage platform, providing the following characteristics:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;High throughput asynchronous ingestion from batch and streaming sources (e.g. &lt;a href=&#34;https://github.com/apache/hadoop&#34;&gt;Hadoop&lt;/a&gt; and &lt;a href=&#34;https://github.com/apache/samza&#34;&gt;Samza&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Low latency online reads via remote queries or in-process caching.&lt;/li&gt; &#xA; &lt;li&gt;Active-active replication between regions with CRDT-based conflict resolution.&lt;/li&gt; &#xA; &lt;li&gt;Multi-cluster support within each region with operator-driven cluster assignment.&lt;/li&gt; &#xA; &lt;li&gt;Multi-tenancy, horizontal scalability and elasticity within each cluster.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The above makes Venice particularly suitable as the stateful component backing a Feature Store, such as &lt;a href=&#34;https://github.com/feathr-ai/feathr&#34;&gt;Feathr&lt;/a&gt;. AI applications feed the output of their ML training jobs into Venice and then query the data for use during online inference workloads.&lt;/p&gt; &#xA;&lt;h2&gt;Write Path&lt;/h2&gt; &#xA;&lt;p&gt;The Venice write path can be broken down into three granularities: full dataset swap, insertion of many rows into an existing dataset, and updates of some columns of some rows. All three granularities are supported by Hadoop and Samza, thus leading to the below full matrix of supported operations:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Hadoop&lt;/th&gt; &#xA;   &lt;th&gt;Samza&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Full dataset swap&lt;/td&gt; &#xA;   &lt;td&gt;Full Push Job&lt;/td&gt; &#xA;   &lt;td&gt;Reprocessing Job&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Insertion of some rows into an existing dataset&lt;/td&gt; &#xA;   &lt;td&gt;Incremental Push Job&lt;/td&gt; &#xA;   &lt;td&gt;Real-Time Job&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Updates to some columns of some rows&lt;/td&gt; &#xA;   &lt;td&gt;Incremental Push Job doing Write Compute&lt;/td&gt; &#xA;   &lt;td&gt;Real-Time Job doing Write Compute&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Hybrid Stores&lt;/h3&gt; &#xA;&lt;p&gt;Moreover, the three granularities of write operations can all be mixed within a single dataset. A dataset which gets full dataset swaps in addition to row insertion or row updates is called &lt;em&gt;hybrid&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As part of configuring a store to be &lt;em&gt;hybrid&lt;/em&gt;, an important concept is the &lt;em&gt;rewind time&lt;/em&gt;, which defines how far back should recent real-time writes be rewound and applied on top of the new generation of the dataset getting swapped in.&lt;/p&gt; &#xA;&lt;p&gt;Leveraging this mechanism, it is possible to overlay the output of a stream processing job on top of that of a batch job. If using partial updates, then it is possible to have some of the columns be updated in real-time and some in batch, and these two sets of columns can either overlap or be disjoint, as desired.&lt;/p&gt; &#xA;&lt;h3&gt;Write Compute&lt;/h3&gt; &#xA;&lt;p&gt;Write Compute includes two kinds of operations, which can be performed on the value associated with a given key:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Partial update&lt;/strong&gt;: set the content of a field within the value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Collection merging&lt;/strong&gt;: add or remove entries in a set or map.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Read Path&lt;/h2&gt; &#xA;&lt;p&gt;Venice supports the following read APIs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Single get&lt;/strong&gt;: get the value associated with a single key&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Batch get&lt;/strong&gt;: get the values associated with a set of keys&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Read compute&lt;/strong&gt;: project some fields and/or compute some function on the fields of values associated with a set of keys.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Read Compute&lt;/h3&gt; &#xA;&lt;p&gt;When using the read compute DSL, the following functions are currently supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dot product&lt;/strong&gt;: perform a dot product on the float vector stored in a given field, against another float vector provided as query param, and return the resulting scalar.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cosine similarity&lt;/strong&gt;: perform a cosine similarity on the float vector stored in a given field, against another float vector provided as query param, and return the resulting scalar.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hadamard product&lt;/strong&gt;: perform a Hadamard product on the float vector stored in a given field, against another float vector provided as query param, and return the resulting vector.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Collection count&lt;/strong&gt;: return the number of items in the collection stored in a given field.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Client Modes&lt;/h3&gt; &#xA;&lt;p&gt;There are two main client modes for accessing Venice data:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Classical Venice&lt;/strong&gt;: perform remote queries against Venice&#39;s distributed backend service. In this mode, read compute queries are pushed down to the backend and only the computation results are returned to the client.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Da Vinci&lt;/strong&gt;: eagerly load some or all partitions of the dataset and perform queries against the resulting local cache. Future updates to the data continue to be streamed in and applied to the local cache.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/linkedin/venice/master/quickstart/README.md&#34;&gt;Venice quickstart&lt;/a&gt; to create your own Venice cluster and play around with some features like creating a data store, batch push, incremental push, and single get.&lt;/p&gt; &#xA;&lt;h1&gt;Previously Published Content&lt;/h1&gt; &#xA;&lt;p&gt;The following blog posts have previously been published about Venice:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2015: &lt;a href=&#34;https://engineering.linkedin.com/distributed-systems/prototyping-venice-derived-data-platform&#34;&gt;Prototyping Venice: Derived Data Platform&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2017: &lt;a href=&#34;https://engineering.linkedin.com/blog/2017/02/building-venice-with-apache-helix&#34;&gt;Building Venice with Apache Helix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2017: &lt;a href=&#34;https://engineering.linkedin.com/blog/2017/04/building-venice--a-production-software-case-study&#34;&gt;Building Venice: A Production Software Case Study&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2018: &lt;a href=&#34;https://engineering.linkedin.com/blog/2018/04/venice-performance-optimization&#34;&gt;Venice Performance Optimization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2021: &lt;a href=&#34;https://engineering.linkedin.com/blog/2021/taming-memory-fragmentation-in-venice-with-jemalloc&#34;&gt;Taming memory fragmentation in Venice with Jemalloc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2022: &lt;a href=&#34;https://engineering.linkedin.com/blog/2022/supporting-large-fanout-use-cases-at-scale-in-venice&#34;&gt;Supporting large fanout use cases at scale in Venice&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2022: &lt;a href=&#34;https://engineering.linkedin.com/blog/2022/open-sourcing-venice--linkedin-s-derived-data-platform&#34;&gt;Open Sourcing Venice – LinkedIn’s Derived Data Platform&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following talks have been given about Venice:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2018: &lt;a href=&#34;https://www.youtube.com/watch?v=Usz8E4S-hZE&#34;&gt;Venice with Apache Kafka &amp;amp; Samza&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019: &lt;a href=&#34;https://www.infoq.com/presentations/recommendation-massive-data/&#34;&gt;People You May Know: Fast Recommendations over Massive Data&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2019: &lt;a href=&#34;https://www.youtube.com/watch?v=znd-Q6IvCqY&#34;&gt;Enabling next generation models for PYMK Scale&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Keep in mind that older content reflects an earlier phase of the project and may not be entirely correct anymore.&lt;/p&gt; &#xA;&lt;h1&gt;Community Resources&lt;/h1&gt; &#xA;&lt;p&gt;Feel free to engage with the community using our:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://communityinviter.com/apps/venicedb/venice&#34;&gt;Slack workspace&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/14129519/&#34;&gt;LinkedIn group&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/VeniceDataBase&#34;&gt;Twitter handle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GitHub &lt;a href=&#34;https://github.com/linkedin/venice/issues&#34;&gt;issues&lt;/a&gt; and &lt;a href=&#34;https://github.com/linkedin/venice/discussions&#34;&gt;discussions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/linkedin/venice/master/CONTRIBUTING.md&#34;&gt;contributor&#39;s guide&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>MinhQuan992/design-patterns</title>
    <updated>2022-09-28T01:36:59Z</updated>
    <id>tag:github.com,2022-09-28:/MinhQuan992/design-patterns</id>
    <link href="https://github.com/MinhQuan992/design-patterns" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This project contains many sample codes for demonstrating the usage of some common design patterns.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;STUDY COMMON DESIGN PATTERNS&lt;/h1&gt; &#xA;&lt;h2&gt;1. About this project&lt;/h2&gt; &#xA;&lt;p&gt;This project contains many sample codes for demonstrating the usage of the following design patterns:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/MinhQuan992/design-patterns/main/01-strategy/README.md&#34;&gt;The Strategy Pattern&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The Observer Pattern.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The Decorator Pattern.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The Factory Pattern.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The Singleton Pattern.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The Command Pattern.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The Adapter and Facade Patterns.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The Template Method Pattern.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The Iterator and Composite Patterns.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The State Pattern.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The Proxy Pattern.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;2. Reference&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The problem in each module is from the book &lt;a href=&#34;https://www.oreilly.com/library/view/head-first-design/9781492077992/&#34;&gt;Head First Design Patterns, 2nd Edition&lt;/a&gt; by Eric Freeman and Elisabeth Robson.&lt;/li&gt; &#xA; &lt;li&gt;The code in this project is referenced from that book.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>jojoldu/freelec-springboot2-webservice</title>
    <updated>2022-09-28T01:36:59Z</updated>
    <id>tag:github.com,2022-09-28:/jojoldu/freelec-springboot2-webservice</id>
    <link href="https://github.com/jojoldu/freelec-springboot2-webservice" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;스프링부트2로 웹서비스 출시하기 (프리렉)&lt;/h1&gt; &#xA;&lt;p&gt;예제 코드&lt;/p&gt; &#xA;&lt;h2&gt;주의&lt;/h2&gt; &#xA;&lt;p&gt;이 프로젝트는 실제로 실행하면 정상작동 하지 않습니다. &lt;strong&gt;구글/네이버 토큰 정보가 없기 떄문&lt;/strong&gt;입니다.&lt;br&gt; 테스트 코드 수행만 정상적으로 되니 &lt;strong&gt;코드만 참고하세요&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;오타 &amp;amp; 오류 제보&lt;/h2&gt; &#xA;&lt;p&gt;상단의 &lt;a href=&#34;https://github.com/jojoldu/freelec-springboot2-webservice/issues&#34;&gt;Issue 탭&lt;/a&gt;에서 검색 혹은 추가 이슈등록을 부탁드립니다!&lt;/p&gt; &#xA;&lt;h3&gt;질문 올리는 법&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;페이지 번호&lt;/li&gt; &#xA; &lt;li&gt;문제가 된 프로젝트가 올라간 Github 저장소 주소&lt;/li&gt; &#xA; &lt;li&gt;문제가 된 로그 혹은 콘솔 출력 화면&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;을 함께 포함해서 남겨주세요.&lt;br&gt; 그렇지 않으면 확인 하기가 너무 어렵습니다.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jojoldu/freelec-springboot2-webservice/issues/100&#34;&gt;이슈 참고&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;프로젝트 환경 점검&lt;/h2&gt; &#xA;&lt;p&gt;이 책의 모든 예제는 다음의 환경에서 진행됩니다.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Java 8&lt;/li&gt; &#xA; &lt;li&gt;Gradle 4.x&lt;/li&gt; &#xA; &lt;li&gt;Spring Boot 2.1.x&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;즉, 현재 spring.io 에서 만들어주는 기본 환경인 &lt;strong&gt;Spring Boot 2.2.x&lt;/strong&gt;와 &lt;strong&gt;Gradle 5.x&lt;/strong&gt;에서는 정상작동 하지 않습니다.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Spring Boot 2.2와 Gradle 5로 오면서 너무 많은 설정들이 변경되었습니다. 현재 실무에서 가장 많이 사용되는 버전들인 2.1.x와 Gradle 4를 선택할 수 밖에 없는 이유입니다.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;아래를 따라 본인의 프로젝트 환경을 점검해보세요.&lt;/p&gt; &#xA;&lt;h3&gt;Gradle 버전 체크&lt;/h3&gt; &#xA;&lt;p&gt;먼저 현재 프로젝트의 그레이들 버전을 체크해봅니다.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jojoldu/freelec-springboot2-webservice/master/image/1.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;위와 같이 5 버전을 사용중인게 확인된다면&lt;br&gt; 인텔리제이에서 &lt;code&gt;alt+F12&lt;/code&gt; (윈도우/맥 동일) 을 눌러 해당 프로젝트 기준으로 터미널을 열어봅니다.&lt;br&gt; 거기서 아래와 같이 명령어를 실행하시면 됩니다.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gradlew wrapper --gradle-version 4.10.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Spring Boot 버전 체크&lt;/h3&gt; &#xA;&lt;p&gt;Spring Boot 버전은 다음과 같이 되어있어야 합니다.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;build.gradle&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;buildscript {&#xA;    ext {&#xA;        springBootVersion = &#39;2.1.7.RELEASE&#39; // 2.1.7, 2.1.8, 2.1.9 다 괜찮습니다.&#xA;    }&#xA;    repositories {&#xA;        mavenCentral()&#xA;        jcenter()&#xA;    }&#xA;    dependencies {&#xA;        classpath(&#34;org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;아래와 같이 되어있으면 안됩니다.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;plugins {&#xA;    id &#39;org.springframework.boot&#39; version &#39;2.2.1.RELEASE&#39;&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;이외 나머지는 프로젝트 코드와 책 내용을 참고하시면 됩니다.&lt;/p&gt;</summary>
  </entry>
</feed>