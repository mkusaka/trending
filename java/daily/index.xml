<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-25T01:32:49Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>liuyulet/lana</title>
    <updated>2022-12-25T01:32:49Z</updated>
    <id>tag:github.com,2022-12-25:/liuyulet/lana</id>
    <link href="https://github.com/liuyulet/lana" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lana-boot&lt;/h1&gt; &#xA;&lt;p&gt;努努力，搞一个自定义审批内容的OA 技术栈主要使用：jdk8+springboot2.6+mysql+minio+maven3.5+knife4j&lt;/p&gt; &#xA;&lt;p&gt;欢迎点个Stars支持一下哦&lt;/p&gt; &#xA;&lt;h1&gt;现应用场景：&lt;/h1&gt; &#xA;&lt;p&gt;目前用于研发团队中的进度安排，创建计划--创建任务，并绑定执行流程，用来需求、研发、测试、实施、运维人员的任务安排、执行结果留存、执行计划把控。&lt;/p&gt; &#xA;&lt;h1&gt;后续计划1：&lt;/h1&gt; &#xA;&lt;p&gt;修改完善并结合表单设计器（先阶段表单设计器在：个人中心--表单设计菜单下。具体使用正在搞...），整合微信通知、邮箱通知、有必要的话就整合短信通知。让任务能够简单及时分配，以及快速通知。&lt;/p&gt; &#xA;&lt;h2&gt;项目设置与使用&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;环境要求：&#xA;jdk8&#xA;maven5.3+&#xA;&#xA;mysql8.0&#xA;minio，并且创建data桶，以及设置好权限&#xA;&#xA;&#xA;运行配置：&#xA;&#xA;1、下载代码：https://github.com/liuyulet/lana&#xA;2、导入编辑器（idea）&#xA;3、构建项目（刷新maven等）&#xA;4、修改配置文件（数据库、minio、等配置，具体修改位置查看application.yml、application-dev.yml文件）&#xA;5、推荐安装easycode、lombok、mybatisx、mybatisx long free等插件&#xA;6、运行项目&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;1.0 基础特性&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;项目管理;&lt;/li&gt; &#xA; &lt;li&gt;任务管理;&lt;/li&gt; &#xA; &lt;li&gt;计划控制管理;&lt;/li&gt; &#xA; &lt;li&gt;协作流程管理;&lt;/li&gt; &#xA; &lt;li&gt;组织角色管理;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;截图&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/liuyulet/lana/master/src/main/resources/imgs/img.png&#34; alt=&#34;img.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/liuyulet/lana/master/src/main/resources/imgs/img_2.png&#34; alt=&#34;img_2.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/liuyulet/lana/master/src/main/resources/imgs/img_3.png&#34; alt=&#34;img_3.png&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/liuyulet/lana/master/src/main/resources/imgs/img_4.png&#34; alt=&#34;img_4.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/liuyulet/lana/master/src/main/resources/imgs/img_5.png&#34; alt=&#34;img_5.png&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/liuyulet/lana/master/src/main/resources/imgs/img_6.png&#34; alt=&#34;img_6.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/liuyulet/lana/master/src/main/resources/imgs/img_7.png&#34; alt=&#34;img_7.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/liuyulet/lana/master/src/main/resources/imgs/img_8.png&#34; alt=&#34;img_8.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/liuyulet/lana/master/src/main/resources/imgs/img9.png&#34; alt=&#34;img9.png&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/liuyulet/lana/master/src/main/resources/imgs/img10.png&#34; alt=&#34;img10.png&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>JanDoeTian/ThunderExchange</title>
    <updated>2022-12-25T01:32:49Z</updated>
    <id>tag:github.com,2022-12-25:/JanDoeTian/ThunderExchange</id>
    <link href="https://github.com/JanDoeTian/ThunderExchange" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ThunderExchange is my open source stock exchange system featuring distributed gateway for order collection and ring buffer for high performance order matching. Beware this is my university project and is to be used at your own risk!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Warning&lt;span&gt;💥&lt;/span&gt;!&lt;/h1&gt; &#xA;&lt;p&gt;This is my university project and there is no guarantee to the quality of the system, &lt;strong&gt;please use for learning purpose only &lt;span&gt;🎓&lt;/span&gt;&lt;/strong&gt;!&lt;/p&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;ThunderExchange is an exchange system build with mainstream technologies such as Spring cloud, Vertx, Disruptor etc. It features a gateway module which serves as the HTTP server for the front-end, a order collector and maching core which sits in a centralized location such as a colocation centre.&lt;/p&gt; &#xA;&lt;p&gt;The system consists of two parts, the regional part is spread across the globe and function as a regional gateway to accept orders that are nearest to client location, the colocation part is where the exchange sits.&lt;/p&gt; &#xA;&lt;p&gt;This two part design guarantees scalability, reliability and high performance in the following way:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;👪&lt;/span&gt; Scalability : To handle more client, just add more gateways and order collectors.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🍼&lt;/span&gt; Reliability: Traffic surge resistance and very little service down-time enabled by &lt;strong&gt;RAFT mechanism&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🚀&lt;/span&gt; High performance: &lt;strong&gt;Lockless multithreading&lt;/strong&gt; with &lt;strong&gt;native thread-safe data structure&lt;/strong&gt; provides &lt;strong&gt;blazing fast&lt;/strong&gt;&lt;span&gt;😻&lt;/span&gt; order matching.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;System Structure&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/JanDoeTian/ThunderExchange/main/bb.jpeg?raw=true&#34; alt=&#34;Alt text&#34; title=&#34;System Structure&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The System consists of 5 main parts, namely: &lt;strong&gt;App Service&lt;/strong&gt; , &lt;strong&gt;Socket GateWay&lt;/strong&gt; , &lt;strong&gt;Order Queue&lt;/strong&gt;, &lt;strong&gt;Matching Engine&lt;/strong&gt; and &lt;strong&gt;Publisher&lt;/strong&gt;. Each of them serve a distinct function, with carefullly decoupled communications, they enable scability and high performance.&lt;/p&gt; &#xA;&lt;h3&gt;App Service:&lt;/h3&gt; &#xA;&lt;p&gt;Build with Spring framework, which is a popular Java application framework. It provides a comprehensive set of features for building applications, including a lightweight container, support for dependency injection, and tools for managing transactions and data access. Spring makes it easy to create complex, enterprise-grade applications that are modular, reusable, and easy to test.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;App Service&lt;/strong&gt; module handles request from Frontend through REST protocol, this includes accounting functions such as query account balance, trading functions such as placing orders, view positions etc. More importantly, it serve as a &lt;em&gt;consumer&lt;/em&gt; of MQTT for trades that have been published by the &lt;strong&gt;publisher&lt;/strong&gt; module.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Baseflow/PhotoView</title>
    <updated>2022-12-25T01:32:49Z</updated>
    <id>tag:github.com,2022-12-25:/Baseflow/PhotoView</id>
    <link href="https://github.com/Baseflow/PhotoView" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Implementation of ImageView for Android that supports zooming, by various touch gestures.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PhotoView&lt;/h1&gt; &#xA;&lt;p&gt;PhotoView aims to help produce an easily usable implementation of a zooming Android ImageView.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://jitpack.io/#chrisbanes/PhotoView&#34;&gt;&lt;img src=&#34;https://jitpack.io/v/chrisbanes/PhotoView.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;[&lt;img src=&#34;https://user-images.githubusercontent.com/12352397/85141529-94648e80-b24f-11ea-9a14-a845fb43b181.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Dependency&lt;/h2&gt; &#xA;&lt;p&gt;Add this in your root &lt;code&gt;build.gradle&lt;/code&gt; file (&lt;strong&gt;not&lt;/strong&gt; your module &lt;code&gt;build.gradle&lt;/code&gt; file):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;allprojects {&#xA;    repositories {&#xA;        maven { url &#34;https://www.jitpack.io&#34; }&#xA;    }&#xA;}&#xA;&#xA;buildscript {&#xA;    repositories {&#xA;        maven { url &#34;https://www.jitpack.io&#34; }&#xA;    }&#x9;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, add the library to your module &lt;code&gt;build.gradle&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;    implementation &#39;com.github.chrisbanes:PhotoView:latest.release.here&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Out of the box zooming, using multi-touch and double-tap.&lt;/li&gt; &#xA; &lt;li&gt;Scrolling, with smooth scrolling fling.&lt;/li&gt; &#xA; &lt;li&gt;Works perfectly when used in a scrolling parent (such as ViewPager).&lt;/li&gt; &#xA; &lt;li&gt;Allows the application to be notified when the displayed Matrix has changed. Useful for when you need to update your UI based on the current zoom/scroll position.&lt;/li&gt; &#xA; &lt;li&gt;Allows the application to be notified when the user taps on the Photo.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;There is a &lt;a href=&#34;https://github.com/chrisbanes/PhotoView/tree/master/sample&#34;&gt;sample&lt;/a&gt; provided which shows how to use the library in a more advanced way, but for completeness, here is all that is required to get PhotoView working:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;com.github.chrisbanes.photoview.PhotoView&#xA;    android:id=&#34;@+id/photo_view&#34;&#xA;    android:layout_width=&#34;match_parent&#34;&#xA;    android:layout_height=&#34;match_parent&#34;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;PhotoView photoView = (PhotoView) findViewById(R.id.photo_view);&#xA;photoView.setImageResource(R.drawable.image);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it!&lt;/p&gt; &#xA;&lt;h2&gt;Issues With ViewGroups&lt;/h2&gt; &#xA;&lt;p&gt;There are some ViewGroups (ones that utilize onInterceptTouchEvent) that throw exceptions when a PhotoView is placed within them, most notably &lt;a href=&#34;http://developer.android.com/reference/android/support/v4/view/ViewPager.html&#34;&gt;ViewPager&lt;/a&gt; and &lt;a href=&#34;https://developer.android.com/reference/android/support/v4/widget/DrawerLayout.html&#34;&gt;DrawerLayout&lt;/a&gt;. This is a framework issue that has not been resolved. In order to prevent this exception (which typically occurs when you zoom out), take a look at &lt;a href=&#34;https://github.com/chrisbanes/PhotoView/raw/master/sample/src/main/java/com/github/chrisbanes/photoview/sample/HackyDrawerLayout.java&#34;&gt;HackyDrawerLayout&lt;/a&gt; and you can see the solution is to simply catch the exception. Any ViewGroup which uses onInterceptTouchEvent will also need to be extended and exceptions caught. Use the &lt;a href=&#34;https://github.com/chrisbanes/PhotoView/raw/master/sample/src/main/java/com/github/chrisbanes/photoview/sample/HackyDrawerLayout.java&#34;&gt;HackyDrawerLayout&lt;/a&gt; as a template of how to do so. The basic implementation is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class HackyProblematicViewGroup extends ProblematicViewGroup {&#xA;&#xA;    public HackyProblematicViewGroup(Context context) {&#xA;        super(context);&#xA;    }&#xA;&#xA;    @Override&#xA;    public boolean onInterceptTouchEvent(MotionEvent ev) {&#xA;        try {&#xA;            return super.onInterceptTouchEvent(ev);&#xA;        } catch (IllegalArgumentException e) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//uncomment if you really want to see these errors&#xA;            //e.printStackTrace();&#xA;            return false;&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage with Fresco&lt;/h2&gt; &#xA;&lt;p&gt;Due to the complex nature of Fresco, this library does not currently support Fresco. See &lt;a href=&#34;https://github.com/ongakuer/PhotoDraweeView&#34;&gt;this project&lt;/a&gt; as an alternative solution.&lt;/p&gt; &#xA;&lt;h2&gt;Subsampling Support&lt;/h2&gt; &#xA;&lt;p&gt;This library aims to keep the zooming implementation simple. If you are looking for an implementation that supports subsampling, check out &lt;a href=&#34;https://github.com/davemorrissey/subsampling-scale-image-view&#34;&gt;this project&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2018 Chris Banes&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>