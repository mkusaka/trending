<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-12T01:36:21Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>honghuangdc/soybean-admin-java</title>
    <updated>2023-03-12T01:36:21Z</updated>
    <id>tag:github.com,2023-03-12:/honghuangdc/soybean-admin-java</id>
    <link href="https://github.com/honghuangdc/soybean-admin-java" rel="alternate"></link>
    <summary type="html">&lt;p&gt;soybean-admin的后端服务java版&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://i.loli.net/2021/11/24/x5lLfuSnEawBAgi.png&#34;&gt; &#xA; &lt;h1&gt;Soybean Admin Java&lt;/h1&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://search.maven.org/artifact/org.springframework.boot/spring-boot-dependencies&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/org.springframework.boot/spring-boot-dependencies.svg?label=Spring%20Boot&amp;amp;logo=Spring&#34; alt=&#34;Spring Boot&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://search.maven.org/artifact/org.springframework.cloud/spring-cloud-dependencies&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/org.springframework.cloud/spring-cloud-dependencies.svg?label=Spring%20Cloud&amp;amp;logo=Spring&#34; alt=&#34;Spring Cloud&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://search.maven.org/artifact/com.alibaba.cloud/spring-cloud-alibaba-dependencies&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.alibaba.cloud/spring-cloud-alibaba-dependencies.svg?label=Spring%20Cloud%20Alibaba&amp;amp;logo=Spring&#34; alt=&#34;Spring Cloud Alibaba&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Docker-success&#34; alt=&#34;Docker&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docker--compose-success&#34; alt=&#34;docker--compose&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Portainer-success&#34; alt=&#34;Portainer&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/skywalking-inactive&#34; alt=&#34;skywalking&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/elasticsearch-important&#34; alt=&#34;elasticsearch&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/fluentd-important&#34; alt=&#34;fluentd&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/kibana-important&#34; alt=&#34;kibana&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/grafana-ff69b4&#34; alt=&#34;grafana&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/prometheus-ff69b4&#34; alt=&#34;prometheus&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/loki-ff69b4&#34; alt=&#34;loki&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;简介&lt;/h2&gt; &#xA;&lt;p&gt;Soybean Admin Java 是一个基于 Spring-Boot、Spring-Cloud、Spring-Cloud-Alibaba、Nacos、Mybatis-Plus、Oauth2.0、Redis、RabbitMq、Mysql等基本组件开发的开箱即用Sass微服务架构平台&lt;/p&gt; &#xA;&lt;h2&gt;说明&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;目前功能暂时只有基本租户sass基础能力，如需新功能请提ISSUE&lt;/li&gt; &#xA; &lt;li&gt;当前开源中台众多，项目初衷不为在众多开源项目中脱颖而出，旨在传统java开发者对云原生环境有整体的认知；以及对于各种中间件的适用场景和使用方式&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;项目示例&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://120.48.68.52:30385/default/img/iShot_2022-08-22_22.36.48.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://120.48.68.52:30385/default/img/iShot_2022-08-22_22.40.07.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://120.48.68.52:30385/default/img/iShot_2022-08-22_22.44.07.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://120.48.68.52:30385/default/img/iShot_2022-08-22_22.47.13.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://120.48.68.52:30385/default/img/iShot_2022-08-22_22.52.45.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://120.48.68.52:30385/default/img/iShot_2022-08-22_22.55.37.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;开发环境部署&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;先决条件 &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Docker-success&#34; alt=&#34;Docker&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docker--compose-success&#34; alt=&#34;docker--compose&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  # 推荐安装portainer作为本地docker可视化管理平台&#xA;  $ docker volume create portainer_data&#xA;  $ docker run -d -p 8000:8000 -p 9443:9443 --name portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:2.14.2&#xA;&#xA;  # 首先创建开发环境网络隔离&#xA;  $ docker network create dev&#xA;&#xA;  # 进入deploy/env-build/docker/dev/fluentd目录下运行&#xA;  $ docker build -t fluent/fluentd:me .&#xA;&#xA;  # 进入deploy/env-build/docker/dev目录下运行&#xA;  $ docker-compose up -d&#xA;&#xA;  tips: 静等以上镜像容器创建完毕,用时可能会很长,建议去打一把游戏&#xA;&#xA;  # 以上镜像安装完有两点问题&#xA;  1 mysql不能执行初始化脚本,解决方案先手动将附件中的nacos.sql和soybean-admin-local.sql手动执行下&#xA;  2 docker-compose.yaml中的dev-web需要引用fluentd,案例中的172.18.0.12地址需要根据实际docker中fluentd在dev网络中的地址进行修改[linux环境不需要修改,大概知道问题原因,开发环境暂时按照此方案手动处理],修改后再次执行docker-compose up -d&#xA;&#xA;  tips: 如果一路顺利在Portainer控制台中所有容器应该是全部启动且没有报错的状态&#xA;&#xA;  以上开发环境搭建完成后按以下步骤启动&#xA;  1. 进入soybean-dependencies指定maven clean install(idea maven控制台也可以)&#xA;  2. 进入soybean-framework指定maven clean install&#xA;  3. 依次编译打包并启动soybean-gateway,soybean-uaa,soybean-monitor,soybean-demo&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;前端建设中&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>sqlancer/sqlancer</title>
    <updated>2023-03-12T01:36:21Z</updated>
    <id>tag:github.com,2023-03-12:/sqlancer/sqlancer</id>
    <link href="https://github.com/sqlancer/sqlancer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Automated testing to find logic bugs in database systems&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/sqlancer/sqlancer/actions&#34;&gt;&lt;img src=&#34;https://github.com/sqlancer/sqlancer/workflows/ci/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/sqlancer_dbms&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/sqlancer_dbms?style=social&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;SQLancer&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sqlancer/sqlancer/master/media/logo/png/sqlancer_logo_logo_pos_500.png&#34; alt=&#34;SQLancer&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;SQLancer (Synthesized Query Lancer) is a tool to automatically test Database Management Systems (DBMS) in order to find logic bugs in their implementation. We refer to logic bugs as those bugs that cause the DBMS to fetch an incorrect result set (e.g., by omitting a record).&lt;/p&gt; &#xA;&lt;p&gt;SQLancer operates in the following two phases:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Database generation: The goal of this phase is to create a populated database, and stress the DBMS to increase the probability of causing an inconsistent database state that could be detected subsequently. First, random tables are created. Then, randomly SQL statements are chosen to generate, modify, and delete data. Also other statements, such as those to create indexes as well as views and to set DBMS-specific options are sent to the DBMS. &lt;strong&gt;New: we support query plan guided generation now. See Generation Approaches below.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Testing: The goal of this phase is to detect the logic bugs based on the generated database. See Testing Approaches below.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;p&gt;Requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Java 11 or above&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://maven.apache.org/&#34;&gt;Maven&lt;/a&gt; (&lt;code&gt;sudo apt install maven&lt;/code&gt; on Ubuntu)&lt;/li&gt; &#xA; &lt;li&gt;The DBMS that you want to test (embedded DBMSs such as DuckDB, H2, and SQLite do not require a setup)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following commands clone SQLancer, create a JAR, and start SQLancer to test SQLite using Non-optimizing Reference Engine Construction (NoREC):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/sqlancer/sqlancer&#xA;cd sqlancer&#xA;mvn package -DskipTests&#xA;cd target&#xA;java -jar sqlancer-*.jar --num-threads 4 sqlite3 --oracle NoREC&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the execution prints progress information every five seconds, then the tool works as expected. Note that SQLancer might find bugs in SQLite. Before reporting these, be sure to check that they can still be reproduced when using the latest development version. The shortcut CTRL+C can be used to terminate SQLancer manually. If SQLancer does not find any bugs, it executes infinitely. The option &lt;code&gt;--num-tries&lt;/code&gt; can be used to control after how many bugs SQLancer terminates. Alternatively, the option &lt;code&gt;--timeout-seconds&lt;/code&gt; can be used to specify the maximum duration that SQLancer is allowed to run.&lt;/p&gt; &#xA;&lt;p&gt;If you launch SQLancer without parameters, available options and commands are displayed. Note that general options that are supported by all DBMS-testing implementations (e.g., &lt;code&gt;--num-threads&lt;/code&gt;) need to precede the name of DBMS to be tested (e.g., &lt;code&gt;sqlite3&lt;/code&gt;). Options that are supported only for specific DBMS (e.g., &lt;code&gt;--test-rtree&lt;/code&gt; for SQLite3), or options for which each testing implementation provides different values (e.g. &lt;code&gt;--oracle NoREC&lt;/code&gt;) need to go after the DBMS name.&lt;/p&gt; &#xA;&lt;h1&gt;Testing Approaches&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Approach&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Pivoted Query Synthesis (PQS)&lt;/td&gt; &#xA;   &lt;td&gt;PQS is the first technique that we designed and implemented. It randomly selects a row, called a pivot row, for which a query is generated that is guaranteed to fetch the row. If the row is not contained in the result set, a bug has been detected. It is fully described &lt;a href=&#34;https://arxiv.org/abs/2001.04174&#34;&gt;here&lt;/a&gt;. PQS is the most powerful technique, but also requires more implementation effort than the other two techniques. It is currently unmaintained.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Non-optimizing Reference Engine Construction (NoREC)&lt;/td&gt; &#xA;   &lt;td&gt;NoREC aims to find optimization bugs. It is described &lt;a href=&#34;https://www.manuelrigger.at/preprints/NoREC.pdf&#34;&gt;here&lt;/a&gt;. It translates a query that is potentially optimized by the DBMS to one for which hardly any optimizations are applicable, and compares the two result sets. A mismatch between the result sets indicates a bug in the DBMS.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ternary Logic Partitioning (TLP)&lt;/td&gt; &#xA;   &lt;td&gt;TLP partitions a query into three partitioning queries, whose results are composed and compare to the original query&#39;s result set. A mismatch in the result sets indicates a bug in the DBMS. In contrast to NoREC and PQS, it can detect bugs in advanced features such as aggregate functions.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Generation Approaches&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Approach&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Random Generation&lt;/td&gt; &#xA;   &lt;td&gt;Random generation is the default test case generation approach in SQLancer. First, random tables are generated. Then queries are randomly generated based on the schemas of the tables.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Query Plan Guidance (QPG)&lt;/td&gt; &#xA;   &lt;td&gt;QPG is a test case generation method guided by query plan coverage. Given a database state, we mutate it after no new unique query plans have been observed by randomly-generated queries on the database state aiming to cover more unique query plans for exposing more logics of DBMSs. This approach is enabled by option &lt;code&gt;--qpg-enable&lt;/code&gt; and now supports TLP and NoREC oracles for SQLite, CockroachDB, and TiDB.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Please find the &lt;code&gt;.bib&lt;/code&gt; entries &lt;a href=&#34;https://raw.githubusercontent.com/sqlancer/sqlancer/master/docs/PAPERS.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Supported DBMS&lt;/h1&gt; &#xA;&lt;p&gt;Since SQL dialects differ widely, each DBMS to be tested requires a separate implementation.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;DBMS&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;   &lt;th&gt;Expression Generation&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SQLite&lt;/td&gt; &#xA;   &lt;td&gt;Working&lt;/td&gt; &#xA;   &lt;td&gt;Untyped&lt;/td&gt; &#xA;   &lt;td&gt;This implementation is currently affected by a significant performance regression that still needs to be investigated&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MySQL&lt;/td&gt; &#xA;   &lt;td&gt;Working&lt;/td&gt; &#xA;   &lt;td&gt;Untyped&lt;/td&gt; &#xA;   &lt;td&gt;Running this implementation likely uncovers additional, unreported bugs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PostgreSQL&lt;/td&gt; &#xA;   &lt;td&gt;Working&lt;/td&gt; &#xA;   &lt;td&gt;Typed&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Citus (PostgreSQL Extension)&lt;/td&gt; &#xA;   &lt;td&gt;Working&lt;/td&gt; &#xA;   &lt;td&gt;Typed&lt;/td&gt; &#xA;   &lt;td&gt;This implementation extends the PostgreSQL implementation of SQLancer, and was contributed by the Citus team.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MariaDB&lt;/td&gt; &#xA;   &lt;td&gt;Preliminary&lt;/td&gt; &#xA;   &lt;td&gt;Untyped&lt;/td&gt; &#xA;   &lt;td&gt;The implementation of this DBMS is very preliminary, since we stopped extending it after all but one of our bug reports were addressed. Running it likely uncovers additional, unreported bugs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CockroachDB&lt;/td&gt; &#xA;   &lt;td&gt;Working&lt;/td&gt; &#xA;   &lt;td&gt;Typed&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TiDB&lt;/td&gt; &#xA;   &lt;td&gt;Working&lt;/td&gt; &#xA;   &lt;td&gt;Untyped&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DuckDB&lt;/td&gt; &#xA;   &lt;td&gt;Working&lt;/td&gt; &#xA;   &lt;td&gt;Untyped, Generic&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ClickHouse&lt;/td&gt; &#xA;   &lt;td&gt;Preliminary&lt;/td&gt; &#xA;   &lt;td&gt;Untyped, Generic&lt;/td&gt; &#xA;   &lt;td&gt;Implementing the different table engines was not convenient, which is why only a very preliminary implementation exists.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TDEngine&lt;/td&gt; &#xA;   &lt;td&gt;Removed&lt;/td&gt; &#xA;   &lt;td&gt;Untyped&lt;/td&gt; &#xA;   &lt;td&gt;We removed the TDEngine implementation since all but one of our bug reports were still unaddressed five months after we reported them.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OceanBase&lt;/td&gt; &#xA;   &lt;td&gt;Working&lt;/td&gt; &#xA;   &lt;td&gt;Untyped&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;YugabyteDB&lt;/td&gt; &#xA;   &lt;td&gt;Working&lt;/td&gt; &#xA;   &lt;td&gt;Typed (YSQL), Untyped (YCQL)&lt;/td&gt; &#xA;   &lt;td&gt;YSQL implementation based on Postgres code. YCQL implementation is primitive for now and uses Cassandra JDBC driver as a proxy interface.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Databend&lt;/td&gt; &#xA;   &lt;td&gt;Working&lt;/td&gt; &#xA;   &lt;td&gt;Typed&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;QuestDB&lt;/td&gt; &#xA;   &lt;td&gt;Working&lt;/td&gt; &#xA;   &lt;td&gt;Untyped, Generic&lt;/td&gt; &#xA;   &lt;td&gt;The implementation of QuestDB is still WIP, current version covers very basic data types, operations and SQL keywords.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CnosDB&lt;/td&gt; &#xA;   &lt;td&gt;Working&lt;/td&gt; &#xA;   &lt;td&gt;Typed&lt;/td&gt; &#xA;   &lt;td&gt;The implementation of CnosDB currently uses Restful API.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Using SQLancer&lt;/h1&gt; &#xA;&lt;h2&gt;Logs&lt;/h2&gt; &#xA;&lt;p&gt;SQLancer stores logs in the &lt;code&gt;target/logs&lt;/code&gt; subdirectory. By default, the option &lt;code&gt;--log-each-select&lt;/code&gt; is enabled, which results in every SQL statement that is sent to the DBMS being logged. The corresponding file names are postfixed with &lt;code&gt;-cur.log&lt;/code&gt;. In addition, if SQLancer detects a logic bug, it creates a file with the extension &lt;code&gt;.log&lt;/code&gt;, in which the statements to reproduce the bug are logged.&lt;/p&gt; &#xA;&lt;h2&gt;Reducing a Bug&lt;/h2&gt; &#xA;&lt;p&gt;After finding a bug, it is useful to produce a minimal test case before reporting the bug, to save the DBMS developers&#39; time and effort. For many test cases, &lt;a href=&#34;https://embed.cs.utah.edu/creduce/&#34;&gt;C-Reduce&lt;/a&gt; does a great job.&lt;/p&gt; &#xA;&lt;h2&gt;Found Bugs&lt;/h2&gt; &#xA;&lt;p&gt;We would appreciate it if you mention SQLancer when you report bugs found by it. We would also be excited to know if you are using SQLancer to find bugs, or if you have extended it to test another DBMS (also if you do not plan to contribute it to this project). SQLancer has found over 400 bugs in widely-used DBMS, which are listed &lt;a href=&#34;https://www.manuelrigger.at/dbms-bugs/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Community&lt;/h1&gt; &#xA;&lt;p&gt;We have created a &lt;a href=&#34;https://join.slack.com/t/sqlancer/shared_invite/zt-eozrcao4-ieG29w1LNaBDMF7OB_~ACg&#34;&gt;Slack workspace&lt;/a&gt; to discuss SQLancer, and DBMS testing in general. SQLancer&#39;s official Twitter handle is &lt;a href=&#34;https://twitter.com/sqlancer_dbms&#34;&gt;@sqlancer_dbms&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;FAQ&lt;/h1&gt; &#xA;&lt;h2&gt;I am running SQLancer on the latest version of a supported DBMS. Is it expected that SQLancer prints many AssertionErrors?&lt;/h2&gt; &#xA;&lt;p&gt;In many cases, SQLancer does not support the latest version of a DBMS. You can check the &lt;a href=&#34;https://github.com/sqlancer/sqlancer/raw/master/.github/workflows/main.yml&#34;&gt;&lt;code&gt;.github/workflows/main.yml&lt;/code&gt;&lt;/a&gt; file to determine which version we use in our CI tests, which corresponds to the currently supported version of that DBMS. SQLancer should print only an &lt;code&gt;AssertionError&lt;/code&gt; and produce a corresponding log file, if it has identified a bug. To upgrade SQLancer to support a new DBMS version, either two options are advisable: (1) the generators can be updated to no longer generate certain patterns that might cause errors (e.g., which might be the case if a keyword or option is no longer supported) or (2) the newly-appearing errors can be added as &lt;a href=&#34;https://github.com/sqlancer/sqlancer/raw/354d591cfcd37fa1de85ec77ec933d5d975e947a/src/sqlancer/common/query/ExpectedErrors.java&#34;&gt;expected errors&lt;/a&gt; so that SQLancer ignores them when they appear (e.g., this is useful if some error-inducing patterns cannot easily be avoided).&lt;/p&gt; &#xA;&lt;p&gt;Another reason for many failures on a supported version could be that error messages are printed in a non-English locale (which would then be visible in the stack trace). In such a case, try setting the DBMS&#39; locale to English (e.g., see the &lt;a href=&#34;https://www.postgresql.org/docs/current/locale.html&#34;&gt;PostgreSQL homepage&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;When starting SQLancer, I get an error such as &#34;database &#39;test&#39; does not exist&#34;. How can I run SQLancer without this error?&lt;/h2&gt; &#xA;&lt;p&gt;For some DBMSs, SQLancer expects that a database &#34;test&#34; exists, which it then uses as an initial database to connect to. If you have not yet created such a database, you can use a command such as &lt;code&gt;CREATE DATABASE test&lt;/code&gt; to create this database (e.g., see the &lt;a href=&#34;https://www.postgresql.org/docs/current/sql-createdatabase.html&#34;&gt;PostgreSQL documentation&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h1&gt;Additional Documentation&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sqlancer/sqlancer/master/CONTRIBUTING.md&#34;&gt;Contributing to SQLancer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sqlancer/sqlancer/master/docs/PAPERS.md&#34;&gt;Papers and .bib entries&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Releases&lt;/h1&gt; &#xA;&lt;p&gt;Official release are available on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sqlancer/sqlancer/releases&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://search.maven.org/artifact/com.sqlancer/sqlancer&#34;&gt;Maven Central&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/mrigger/sqlancer&#34;&gt;DockerHub&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Additional Resources&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A talk on Ternary Logic Partitioning (TLP) and SQLancer is available on &lt;a href=&#34;https://www.youtube.com/watch?v=Np46NQ6lqP8&#34;&gt;YouTube&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;An (older) Pivoted Query Synthesis (PQS) talk is available on &lt;a href=&#34;https://www.youtube.com/watch?v=yzENTaWe7qg&#34;&gt;YouTube&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;PingCAP has implemented PQS, NoREC, and TLP in a tool called &lt;a href=&#34;https://github.com/chaos-mesh/go-sqlancer&#34;&gt;go-sqlancer&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;More information on our DBMS testing efforts and the bugs we found is available &lt;a href=&#34;https://www.manuelrigger.at/dbms-bugs/&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>asLody/VirtualApp</title>
    <updated>2023-03-12T01:36:21Z</updated>
    <id>tag:github.com,2023-03-12:/asLody/VirtualApp</id>
    <link href="https://github.com/asLody/VirtualApp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Virtual Engine for Android(Support 12.0 in business version)&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/asLody/VirtualApp/master/README_eng.md&#34; title=&#34;English&#34;&gt;English Doc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;p align=&#34;center&#34;&gt;VA产品说明&amp;amp;开发指导&lt;/p&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;VA是什么?&lt;/h2&gt; &#xA;&lt;p&gt;VirtualApp(简称：VA)是一款运行于Android系统的沙盒产品，可以理解为轻量级的“Android虚拟机”。其产品形态为高可扩展，可定制的集成SDK，您可以基于VA或者使用VA定制开发各种看似不可能完成的项目。VA目前被广泛应用于APP多开、小游戏合集、手游加速器、手游租号、手游手柄免激活、VR程序移植、区块链、移动办公安全、军队政府数据隔离、手机模拟信息、脚本自动化、插件化开发、无感知热更新、云控等技术领域。&lt;br&gt; &lt;strong&gt;Github上代码已在2017年12月份停止更新，商业版代码在持续更新中，如需授权获得最新代码，请联系微信：10890&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;VA中的术语&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;术语&lt;/th&gt; &#xA;   &lt;th&gt;解释&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;宿主&lt;/td&gt; &#xA;   &lt;td&gt;集成VirtualApp类库（lib）的App叫做宿主&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;宿主插件&lt;/td&gt; &#xA;   &lt;td&gt;用于在同一个手机,运行另一种ABI的宿主包,又称做插件包,扩展包,宿主插件包,宿主扩展包&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;虚拟App/VApp&lt;/td&gt; &#xA;   &lt;td&gt;VA的虚拟环境多开的app&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;外部App&lt;/td&gt; &#xA;   &lt;td&gt;手机真实环境安装的app&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;VA技术架构&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/xxxyanchenxxx/temp@1.0/doc/va_architecture.jpg&#34; alt=&#34;&#34;&gt;&lt;br&gt; VA技术一共涉及到了Android的APP层，Framework层以及Native层。&lt;br&gt; 一个APP想要在Android系统上运行，必须要安装后系统才会接纳。安装到VA内部的APP实际上并没有安装到系统中，所以正常情况下是无法运行的。那如何才能让它运行呢？&lt;br&gt; 答：那就只有“欺骗”系统，让系统认为已经安装。而这个“欺骗”过程就是VA Framework的核心工作内容，也是整个VA的核心技术原理。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;下面介绍下在这3个层次分别做了什么事情：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;层次&lt;/th&gt; &#xA;   &lt;th&gt;主要工作&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VA Space&lt;/td&gt; &#xA;   &lt;td&gt;由VA提供了一个内部的空间，用于安装要在其内部运行的APP，这个空间是系统隔离的。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VA Framework&lt;/td&gt; &#xA;   &lt;td&gt;这一层主要给Android Framework和VAPP做代理，这也是VA的核心。VA提供了一套自己的VA Framework，处于Android Framework与VA APP之间。&lt;br&gt;1. 对于VAPP，其访问的所有系统Service均已被 &lt;code&gt;VA Framework&lt;/code&gt; 代理，它会修改VAPP的请求参数，将其中与VAPP安装信息相关的全部参数修改为宿主的参数之后发送给Android Framework（有部分请求会发送给自己的VA Server直接处理而不再发送给Android系统）。这样Android Framework收到VAPP请求后检查参数就会认为没有问题。&lt;br&gt;2. 待Android系统对该请求处理完成返回结果时，VA Framework同样也会拦截住该返回结果，此时再将原来修改过的参数全部还原为VAPP请求时发送的。&lt;br&gt;这样VAPP与Android系统的交互也就能跑通了。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VA Native&lt;/td&gt; &#xA;   &lt;td&gt;在这一层主要为了完成2个工作，IO重定向和VA APP与Android系统交互的请求修改。&lt;br&gt;1. IO重定向是因为可能有部分APP会通过写死的绝对路径访问，但是如果APP没有安装到系统，这个路径是不存在的，通过IO重定向，则将其转向VA内部安装的路径。&lt;br&gt;2. 另外有部分jni函数在VA Framework中无法hook的，所以需要在native层来做hook。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;总结： 通过上面技术架构可以看到，VA内部的APP实际是跑在VA自己的VA Framework之上。 VA已将其内部APP的全部系统请求进行拦截，通过这项技术也能对APP进行全面控制，而不仅仅只是多开。并且为了方便开发者，VA还提供了SDK以及Hook SDK。&lt;/p&gt; &#xA;&lt;h2&gt;VA进程架构&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/xxxyanchenxxx/temp@1.0/doc/va_process.jpg&#34; alt=&#34;&#34;&gt;&lt;br&gt; VA运行时有5类进程：CHILD进程，VA Host Main进程，VA Host Plugin进程，VAPP Client进程，VAServer进程。 VA为了同时支持32位APP与64位APP，需要安装2个包：一个主包，一个插件包(在本文档中主包是32位，插件包是64位)。 2个包也是必须的，因为一个包只能运行在一种模式下，要么32位，要么64位。所以对于32位的APP，VA使用32位的主包去运行，对于64位的APP，VA则使用64位的插件包去运行。 在主包中含了VA的所有代码，插件包中只有一段加载主包代码执行的代码，无其他代码。所以插件包几乎不用更新，只需要更新主包即可。 另外主包是选择用32位还是64位，可以在配置文件中修改(比如对于要上GooglePlay的用户，会修改为主包64位，插件包32位)。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;各类进程的作用与解释如下：&lt;/strong&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;进程类型&lt;/th&gt; &#xA;   &lt;th&gt;作用&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CHILD&lt;/td&gt; &#xA;   &lt;td&gt;由VA Host集成的其他进程，比如：保活进程，推送进程等。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VA Host Main&lt;/td&gt; &#xA;   &lt;td&gt;VA主包的UI主界面所在的进程。默认主包是32位，插件包是64位，可在配置文件中修改切换。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VA Host Plugin&lt;/td&gt; &#xA;   &lt;td&gt;支持64位APP的插件包所在进程。默认主包是32位，插件包是64位，可在配置文件中修改切换。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VAPP Client&lt;/td&gt; &#xA;   &lt;td&gt;安装到VA中的APP启动后产生的进程，在运行时会将io.busniess.va:pxxx进程名修改VAPP的真实进程名。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VAServer&lt;/td&gt; &#xA;   &lt;td&gt;VA Server的所在的进程，用于处理VA中不交予系统处理的请求。比如APP的安装处理。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;VA几乎能满足您的一切需求&lt;/h2&gt; &#xA;&lt;p&gt;通过上面的技术架构，我们可以了解到VA可以对APP进行全面的控制，并且提供了Hook SDK，几乎能满足您在各个领域的一切需求：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;可以满足您的&lt;strong&gt;双开/多开&lt;/strong&gt;需求&lt;br&gt; VA可以让您在同一部手机上安装多个微信/QQ/WhatsApp/Facebook等APP，实现一部手机，多个账号同时登录。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;可以满足您的&lt;strong&gt;移动安全&lt;/strong&gt;需求&lt;br&gt; VA提供了一整套内部与外部的隔离机制，包括但不限于(文件隔离/组件隔离/进程通讯隔离)，简单的说VA内部就是一个“完全独立的空间”。 通过VA可将工作事务与个人事务安全的隔离，互不干扰。稍作定制即可实现应用行为审计、数据加密、数据采集、数据防泄漏、防攻击泄密等移动安全相关的需求。&lt;br&gt; &lt;strong&gt;2.1 应用行为审计&lt;/strong&gt;&lt;br&gt; 通过VA提供的HOOK能力可以实现实时监测用户使用行为，将违规信息上传到服务器；并能轻易实现诸如时间围栏(在某个时间段内能否使用应用的某个功能)、地理围栏(在某个区域内能否使用应用的某个功能)、敏感关键字过滤拦截等功能需求。&lt;br&gt; &lt;strong&gt;2.2 数据加密&lt;/strong&gt;&lt;br&gt; 通过VA提供的HOOK能力可以实现对应用的全部数据/文件加密，保证数据/文件落地安全。&lt;br&gt; &lt;strong&gt;2.3 数据采集&lt;/strong&gt;&lt;br&gt; 通过VA提供的HOOK能力可以实现应用数据的实时无感上传需求，如聊天记录、转账记录等，防止事后删除无法追溯。&lt;br&gt; &lt;strong&gt;2.4 数据防泄漏&lt;/strong&gt;&lt;br&gt; 通过VA提供的HOOK能力可以实现应用防复制/粘贴、防截屏/录屏、防分享/转发、水印溯源等需求。&lt;br&gt; &lt;strong&gt;2.5 防攻击泄密&lt;/strong&gt;&lt;br&gt; 通过VA提供的应用管控能力可以将APP获取短信/通讯录/通话记录/后台录音/后台拍照/浏览历史/位置信息等隐私相关的行为完全控制在沙盒中，防止木马/恶意APP获取到用户真实的隐私数据，造成泄密等严重后果。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;可以满足您的&lt;strong&gt;免ROOT HOOK&lt;/strong&gt;需求&lt;br&gt; VA提供了Java与Native的Hook能力，通过VA，您可以轻易实现诸如虚拟定位、改机、APP监控管理、移动安全等各种场景需要的功能。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;可以满足您的&lt;strong&gt;APP静默安装&lt;/strong&gt;需求&lt;br&gt; VA提供了APP静默安装，静默升级，静默卸载的能力。如应用商店或游戏中心在集成VA后可以避免需要用户手动点击确认安装的操作，做到下载后立即安装到VA内，给用户带来“小程序”搬的体验，彻底避免了应用不易被用户安装上的问题。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;可以满足您的&lt;strong&gt;APP管控&lt;/strong&gt;需求&lt;br&gt; 您可以通过VA清楚的掌握APP访问了哪些系统API，哪些敏感数据，哪些设备信息等。比如APP是否访问了联系人，相册，通话记录，是否访问了用户的地理位置等信息。 当然，您还可以通过VA控制或者构造自定义的信息给这些APP。不仅于此，您还可以获取到APP的私有数据，比如聊天数据库等。总之通过VA提供的应用管控能力，您可以轻易控制APP的一切行为，甚至修改APP与服务器交互内容等。 &lt;br&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;可以满足您的&lt;strong&gt;海外市场&lt;/strong&gt;需求&lt;br&gt; VA实现了对Google服务的支持，以支持海外的App运行，比如Twitter、Messenger、WhatsApp、Instagram、FaceBook、Youtube等。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;可以满足您的&lt;strong&gt;VR程序移植&lt;/strong&gt;需求&lt;br&gt; 可以通过VA的Hook能力拦截VR设备的API，让您无需改动代码即可将VR程序移植到新的设备。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;可以满足您&lt;strong&gt;几乎一切能想到&lt;/strong&gt;的需求&lt;br&gt; VA对于内部的App具有完全的监管和控制能力，几乎能满足您的一切需求！&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;同时VA也是该技术领域&lt;strong&gt;唯一一款&lt;/strong&gt;对外商业授权的产品&lt;br&gt; 截止目前已有&lt;strong&gt;上百家&lt;/strong&gt;授权客户在付费使用VirtualApp商业版代码，集成VirtualApp代码的APP&lt;strong&gt;日启动&lt;/strong&gt;次数&lt;strong&gt;超过2亿次&lt;/strong&gt;，众多安卓工程师向我们提供不同场景下的用户反馈，通过我们技术团队不断优化迭代，不断提升产品性能与兼容性！&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;VA的特有能力&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;克隆能力&lt;br&gt; 可以克隆外部系统中已经安装的App，并在内部运行，互不干扰。典型应用场景为App双开。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;免安装能力&lt;br&gt; 除了克隆已安装之外，VA可以直接在内部安装(外部无感知)apk，并在内部直接运行。典型应用场景为插件化，独立应用市场等。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;多开能力&lt;br&gt; VA不仅可以“双开”，独特的多用户模式支持用户在内部无限多开同一个App。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;内外隔离能力&lt;br&gt; VA是一个标准的沙盒，或者说“虚拟机”，提供了一整套内部与外部的隔离机制，包括但不限于(文件隔离/组件隔离/进程通讯隔离)，简单的说VA内部就是一个“完全独立的空间”。在此基础之上，稍作定制即可实现一部手机上的“虚拟手机”。当然您也可以发挥想象，定制成应用于数据加密，数据隔离，隐私保护，企业管理的应用系统。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;对于内部App的完全控制能力&lt;br&gt; VA对于内部的App具有完全的监控和控制能力，这点在未Root的外部环境中是绝对无法实现的。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;详细(下拉打开)&lt;/summary&gt; 1. 服务请求控制，首先VA直接提供了一些服务请求的拦截，您可以在集成VA的时候方便的定制这些服务请求，包括但远不限于(App请求安装apk/App请求打开某些文件/App请求定位数据/App请求手机信息等等)&#xA; &lt;br&gt;&#xA; &lt;br&gt; 2. 系统API控制，VA虚拟并实现了整个安卓系统框架，这也是VA可以免安装在内部运行apk的原理，您可以对虚拟框架的实现进行修改以动态监测分析App的行为等；除此之外，您还可模拟一些系统行为以实现一些在外部难以实现的需求(例如游戏手柄)。&#xA; &lt;br&gt;&#xA; &lt;br&gt; 3. 内存读写，VA可以无需Root读写内部App进程的内存。&#xA; &lt;br&gt;&#xA; &lt;br&gt; 4. 免Root调试，VA可以免Root调试(ptrace)内部的App进程，基于此您还可以实现免Root的进程注入。&#xA; &lt;br&gt;&#xA; &lt;br&gt; 5. 加载任意“插件”和“行为”，VA内部的App进程由VA的框架Client端代码派生而来，所以您可以在进程的入口代码插入任何“加载”以及“控制”逻辑。这些实现都非常简单。&#xA; &lt;br&gt;&#xA; &lt;br&gt; 6. 方法Hook，VA内置了一套运行于Android各个版本(直到AndroidQ)的Xposed框架以及native hook框架，基于此您可以方便的Hook任意内部App的任意Java/Native方法。可以轻松实现一个免Root的Xposed环境(有实例代码)。&#xA; &lt;br&gt;&#xA; &lt;br&gt; 7. 文件控制，VA内置了完整的文件重定向，可以方便的控制内部App的文件的读写，基于此可以实现对文件的保护加密等功能。&#xA; &lt;br&gt;&#xA; &lt;br&gt; 8. 注：以上控制能力均有实现代码或者实例以作参考。 &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;VA的其他特性&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;高性能&lt;br&gt; 进程级“虚拟机”，VA独特的实现方式让其性能几乎于原生App一致，更不需要普通虚拟机漫长的启动。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;全版本支持&lt;br&gt; 支持5.0-13.0，支持32位/64位app，支持ARM以及X86处理器。并且支持未来将更新的Android版本。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;易扩展与集成&lt;br&gt; VA 的集成方式与普通Android库类似，即使您的App已经完成上线，您也方便的可以集成VA，享受VA带来的能力。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;支持Google服务&lt;br&gt; 提供Google服务的支持，以支持海外的App&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;VA与其他技术方案对比&lt;/h2&gt; &#xA;&lt;p&gt;在做企业级移动安全时，往往需要对APP进行管控，以下是列出的可能技术方案对比：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;技术方案&lt;/th&gt; &#xA;   &lt;th&gt;原理简介&lt;/th&gt; &#xA;   &lt;th&gt;点评&lt;/th&gt; &#xA;   &lt;th&gt;运行性能&lt;/th&gt; &#xA;   &lt;th&gt;兼容稳定性&lt;/th&gt; &#xA;   &lt;th&gt;项目维护成本&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;二次打包&lt;/td&gt; &#xA;   &lt;td&gt;通过反编译目标APP，加入自己的控制代码，重新打包&lt;/td&gt; &#xA;   &lt;td&gt;1.现在的APP几乎都有加固或防篡改保护，重打包已是一件非常困难的事&lt;br&gt; 2.手机系统也会检测APP是否被重打包，如果重打包，会直接提示用户存在安全风险，甚至不让安装&lt;br&gt;3.针对每一个APP，甚至每一个版本都要深入去逆向分析，耗时耗力，难于维护&lt;/td&gt; &#xA;   &lt;td&gt;优秀&lt;/td&gt; &#xA;   &lt;td&gt;差&lt;/td&gt; &#xA;   &lt;td&gt;高&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;定制ROM&lt;/td&gt; &#xA;   &lt;td&gt;通过定制系统源码，编译刷到指定手机&lt;/td&gt; &#xA;   &lt;td&gt;只能针对指定的内部手机，局限性太大，无法扩展&lt;/td&gt; &#xA;   &lt;td&gt;优秀&lt;/td&gt; &#xA;   &lt;td&gt;优秀&lt;/td&gt; &#xA;   &lt;td&gt;高&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ROOT手机&lt;/td&gt; &#xA;   &lt;td&gt;通过ROOT手机，刷入xposed等类似框架&lt;/td&gt; &#xA;   &lt;td&gt;1.ROOT手机现在本身已是一件不太可能的事&lt;br&gt; 2.现实中也很难让用户能去ROOT自己的手机&lt;/td&gt; &#xA;   &lt;td&gt;优秀&lt;/td&gt; &#xA;   &lt;td&gt;差&lt;/td&gt; &#xA;   &lt;td&gt;高&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VA&lt;/td&gt; &#xA;   &lt;td&gt;轻量级虚拟机，速度快，对设备要求低&lt;/td&gt; &#xA;   &lt;td&gt;无上述风险点&lt;/td&gt; &#xA;   &lt;td&gt;优秀&lt;/td&gt; &#xA;   &lt;td&gt;优秀，有上百家企业在同时测试反馈&lt;/td&gt; &#xA;   &lt;td&gt;低，VA提供了API并有专业的技术团队保障项目稳定运行&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;br&gt; 通过以上对比可以看出，VA是一款优秀的产品，并且能降低您的开发维护成本！ &#xA;&lt;h2&gt;集成VA步骤&lt;/h2&gt; &#xA;&lt;p&gt;第1步：在您的Application中调用VA接口&lt;code&gt;VirtualCore.get().startup()&lt;/code&gt;来启动VA引擎&lt;br&gt; 第2步:调用VA接口&lt;code&gt;VirtualCore.get().installPackageAsUser(userId, packageName)&lt;/code&gt;将目标APP安装到VA中&lt;br&gt; 第3步:调用VA接口&lt;code&gt;VActivityManager.get().launchApp(userId, packageName)&lt;/code&gt;启动APP&lt;br&gt; &lt;strong&gt;仅通过以上3个API就完成了基础使用，VA已屏蔽了复杂的技术细节，并提供了接口API，让您的开发变得很简单！&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;VA的兼容稳定性&lt;/h2&gt; &#xA;&lt;p&gt;VA已被&lt;strong&gt;上百家&lt;/strong&gt;企业进行了广泛测试，包含&lt;strong&gt;数十家上市公司高标准&lt;/strong&gt;的测试及反馈，几乎涵盖了海内外的各种机型设备和场景！ 为您的稳定运行提供了充分的保障！&lt;/p&gt; &#xA;&lt;p&gt;截止目前，支持的系统版本:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;系统版本&lt;/th&gt; &#xA;   &lt;th&gt;是否支持&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5.0&lt;/td&gt; &#xA;   &lt;td&gt;支持&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5.1&lt;/td&gt; &#xA;   &lt;td&gt;支持&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6.0&lt;/td&gt; &#xA;   &lt;td&gt;支持&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;7.0&lt;/td&gt; &#xA;   &lt;td&gt;支持&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8.0&lt;/td&gt; &#xA;   &lt;td&gt;支持&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;9.1&lt;/td&gt; &#xA;   &lt;td&gt;支持&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;10.0&lt;/td&gt; &#xA;   &lt;td&gt;支持&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;11.0&lt;/td&gt; &#xA;   &lt;td&gt;支持&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;12.0&lt;/td&gt; &#xA;   &lt;td&gt;支持&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;13.0&lt;/td&gt; &#xA;   &lt;td&gt;支持&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;支持的APP类型:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;APP类型&lt;/th&gt; &#xA;   &lt;th&gt;是否支持&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;32位APP&lt;/td&gt; &#xA;   &lt;td&gt;支持&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;64位APP&lt;/td&gt; &#xA;   &lt;td&gt;支持&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;支持的HOOK类型:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Hook类型&lt;/th&gt; &#xA;   &lt;th&gt;是否支持&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Java Hook&lt;/td&gt; &#xA;   &lt;td&gt;支持&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Native Hook&lt;/td&gt; &#xA;   &lt;td&gt;支持&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;支持的CPU类型:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Hook类型&lt;/th&gt; &#xA;   &lt;th&gt;是否支持&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ARM 32&lt;/td&gt; &#xA;   &lt;td&gt;支持&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ARM 64&lt;/td&gt; &#xA;   &lt;td&gt;支持&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;集成VA遇到问题如何反馈？&lt;/h2&gt; &#xA;&lt;p&gt;购买授权后我们会建立微信群，有任何问题可以随时反馈给我们，并根据优先级在第一时间处理！&lt;/p&gt; &#xA;&lt;h2&gt;VA开发文档&lt;/h2&gt; &#xA;&lt;p&gt;VA开发文档请参考：&lt;a href=&#34;https://raw.githubusercontent.com/asLody/VirtualApp/master/doc/VADev.md&#34;&gt;开发文档&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;授权说明&lt;/h2&gt; &#xA;&lt;p&gt;VirtualApp虚拟机技术归属于：济宁市罗盒网络科技有限公司，于2015年至2021年申请多项VirtualApp知识产权，&lt;code&gt;受中华人民共和国知识产权法保护&lt;/code&gt;。当您需要使用Github上的代码时，&lt;strong&gt;请购买商业授权&lt;/strong&gt;，获取商业授权后将可以收到最新VirtualApp商业版全部源代码。上百家授权客户在付费使用VirtualApp商业版代码，集成VirtualApp代码的APP日启动次数超过2亿次，众多安卓工程师向我们提供不同场景下的用户反馈，通过我们技术团队不断优化迭代，VirtualApp商业版代码性能更好、兼容性更高。&lt;code&gt;当您的公司获取授权后，将成为其中一员，享受这些不断迭代完善后的技术成果。并可以和我们的授权客户进行运营、技术及商业上的互动合作。&lt;/code&gt;&lt;/p&gt; &#xA;&lt;br&gt; 负责人：张总 &#xA;&lt;br&gt; 微信：10890 &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;严重声明&lt;/h2&gt; &#xA;&lt;p&gt;您如果未经授权将VirtualApp用于&lt;strong&gt;内部使用、商业牟利或上传应用市场&lt;/strong&gt;，我们将取证后报警（侵犯著作权罪）或起诉，这将对您所属公司造成刑事责任及法律诉讼，影响到您公司的商誉和投资。&lt;code&gt;购买商业授权为您节省大量开发、测试和完善兼容性的时间，让您更多时间用于创新及盈利。&lt;/code&gt;罗盒科技已在2020年报警和起诉了一些个人及公司。&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;为响应国家对于知识产权的保护号召！凡举报自己所在公司或其他公司未经授权，违法使用VirtualApp代码开发产品的，一经核实给予现金奖励。我们会对举报人身份保密！举报联系微信：10890&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;商业版主要更新&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;兼容最新Android 13.0&lt;/li&gt; &#xA; &lt;li&gt;不易被杀毒软件误报&lt;/li&gt; &#xA; &lt;li&gt;框架优化，性能大幅提升&lt;/li&gt; &#xA; &lt;li&gt;手机系统及APP兼容性大幅提升&lt;/li&gt; &#xA; &lt;li&gt;完美运行Google服务&lt;/li&gt; &#xA; &lt;li&gt;支持运行纯64位App&lt;/li&gt; &#xA; &lt;li&gt;内置&lt;code&gt;XPosed Hook&lt;/code&gt;框架&lt;/li&gt; &#xA; &lt;li&gt;增加定位模拟代码&lt;/li&gt; &#xA; &lt;li&gt;增加改机代码&lt;/li&gt; &#xA; &lt;li&gt;其他400+项问题的修复和改进，详情请见下表&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;2017年-2023年商业版代码更新详细&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;2023年1月27号 至 2023年 2月16号 商业版代码更新内容&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;437、修复mOpPackageName空指针&lt;br&gt; 436、修复13.0上PackageManager几个flags参数导致的crash&lt;br&gt; 435、修复VAPP返回主页的Intent crash&lt;br&gt; 434、TelecomManagerStub API适配&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2022年12月9号 至 2023年 1月26号 商业版代码更新内容&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;433、修复PendingIntent flag处理问题&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2022年11月9号 至 2022年 12月8号 商业版代码更新内容&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;432、修复Facebook在某些情况下无法启动的问题&lt;br&gt; 431、启动外部App时，排除对VA自身的判断&lt;br&gt; 430、修复queryIntentServices过滤规则&lt;br&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;2017年 12月 至 2022年 11 月 8 日 商业版代码更新内容(下拉打开)&lt;/summary&gt; &#xA; &lt;p&gt;&lt;strong&gt;2022年10月9号 至 2022年 11月8号 商业版代码更新内容&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;429、修复当VA_AUTHORITY_PREFIX不等于包名时找不到Provider的问题：&#34;Failed to find provider info ...&#34;&lt;br&gt; 428、getPermissionActivityIntent处理&lt;br&gt; 427、修复特殊情况下,检查权限无限弹窗&lt;br&gt; 426、强调Intent使用外部通讯录(如果被第三方接管,建议使用外部可见)&lt;br&gt; 425、新增几个Java API适配&lt;br&gt; 424、修复修复部分后台Activity跳转问题&lt;br&gt; 423、修复在10.0+上后台Activity无法启动的问题&lt;br&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;2022年 8月20号 至 2022年 10月8号 商业版代码更新内容&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;422、新功能:增加启动插件Activity代理，绕过后台5s限制&lt;br&gt; 421、修复Provider在10.0+上crash的问题&lt;br&gt; 420、适配最新版微信&lt;br&gt; 419、适配克隆时不显示sdcard上的APK&lt;br&gt; 418、适配12.0+上PendingIntent Flags必须为FLAG_UPDATE_CURRENT/FLAG_IMMUTABLE&lt;br&gt; 417、修复MediaProvider因为ACCESS_MEDIA_LOCATION 权限检查导致的crash&lt;br&gt; 416、修复12.0+上debug模式下hook失败的问题&lt;br&gt; 415、适配在Multi User账户下crash的问题&lt;br&gt; 414、适配由于后台限制导致VA Core启动插件中Activity失败的问题&lt;br&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;2022年 7月27号 至 2022年 8月19号 商业版代码更新内容&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;413、Android 13.0继续适配&lt;br&gt; 412、主版调整为64bit&lt;br&gt; 411、修复某些华为手机上App无法打开的问题&lt;br&gt; 410、修复OPPO 13.0上无法打开应用的问题&lt;br&gt; 409、修复百度语音TTS的调用问题&lt;br&gt; 408、修复数据隔离后仍可以访问sdcard根目录的问题&lt;br&gt; 407、修复鸿蒙手机上的崩溃问题&lt;br&gt; 406、修复Debug模式下Hook失效问题&lt;br&gt; 405、添加对BinderInvocationStub的混淆处理，避免混淆后崩溃问题&lt;br&gt; 404、修复Native层调用free函数可能导致崩溃的问题&lt;br&gt; 403、修复微信由于虚拟文件系统导致的崩溃问题&lt;br&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;2022年 7月9号 至 2022年 7月26号 商业版代码更新内容&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;402、Android 13.0适配&lt;br&gt; 401、修复开启虚拟储存后文件路径的处理问题&lt;br&gt; 400、修复12.0上Notification没有提示的问题&lt;br&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;2022年 4月28号 至 2022年 5月31号 商业版代码更新内容&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;399、修复onGetCallingUid hook引起的崩溃问题&lt;br&gt; 398、修复微信8.0.22启动崩溃的问题&lt;br&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;2022年 4月5号 至 2022年 4月27号 商业版代码更新内容&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;397、去掉sandhook中一些多余的hook代码，避免某些APP无法启动&lt;br&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;2022年 3月13号 至 2022年 4月5号 商业版代码更新内容&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;396、新增功能:在VA中实现内置media provider，以支持媒体库隔离等需求&lt;br&gt; 395、修复微信/QQ使用语音时崩溃&lt;br&gt; 394、蓝牙崩溃问题适配&lt;br&gt; 393、增加部分Log&lt;br&gt; 392、删除一些无用代码&lt;br&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;2022年 1月22号 至 2022年 3月12号 商业版代码更新内容&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;391、修复华为手机上StorageManager没有被hook的问题&lt;br&gt; 390、修复最新版微信无法从SD卡启动的问题&lt;br&gt; 389、PackageInfo中增加对requestedPermissionsFlags字段的处理&lt;br&gt; 388、新增VSettingsProvider，避免内置应用没有权限操作settings provider导致异常&lt;br&gt; 387、修复微信等APP启动黑屏，ANR等问题&lt;br&gt; 386、新增对MediaProvider的hook&lt;br&gt; 385、新增对插件shareUserId的处理，从而可以配置将插件的数据放到主包中&lt;br&gt; 384、新增可以配置是否将Tinker禁用&lt;br&gt; 383、修复Android 12权限处理适配&lt;br&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;2021年 12月30号 至 2022年 1月21号 商业版代码更新内容&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;382、Sandhook适配12.0&lt;br&gt; 381、修复Sandhook在部分11.0上不生效的问题&lt;br&gt; 380、增加编译选项VA_FULL_EXT控制是否将VA源码编译到插件,满足加固场景。&lt;br&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;2021年 11月24号 至 2021年 12月29号 商业版代码更新内容&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;379、Android 12.0第一轮适配已完成&lt;br&gt; 378、Demo App在11.0上增加文件权限检测&lt;br&gt; 377、修复静态广播接收者在独立进程无法接收广播的问题&lt;br&gt; 376、修复微信第一次登录可能crash问题&lt;br&gt; 375、修复部分APP无法显示头像问题&lt;br&gt; 374、修复在部分OPPO手机上打不开问题&lt;br&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;2021年 9月21号 至 2021年 11月23号 商业版代码更新内容&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;373、修复WhatsApp在360手机上黑屏问题&lt;br&gt; 372、增加VA内外广播通信测试demo&lt;br&gt; 371、修复抖音极速版兼容性问题&lt;br&gt; 370、修复readlinkat返回值精度&lt;br&gt; 369、修复从外部安装app,没有引用org.apache.http.legacy的问题&lt;br&gt; 368、修复华为Nova 5i, 64位主包兼容性&lt;br&gt; 367、修复11.0上外部存储重定向问题&lt;br&gt; 366、修复11.0上GMS登录问题&lt;br&gt; 365、修复11.0 部分APP读写sdcard报错的问题&lt;br&gt; 364、修复va core进程死亡后，APP可能打不开的问题&lt;br&gt; 363、增加未安装插件时无法启动的错误日志&lt;br&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;2021年 8月22号 至 2021年 9月20号 商业版代码更新内容&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;362、横屏重新适配&lt;br&gt; 361、修复部分APP通过file协议安装后无法打开的问题&lt;br&gt; 360、修复传递给JobIntentService中Intent数据丢失问题&lt;br&gt; 359、修复JobIntentService第二次调用无法工作的问题&lt;br&gt; 358、修复华为手机上某些APP奔溃的问题&lt;br&gt; 357、修复小米手机上游戏登录问题&lt;br&gt; 356、修复某些应用加固后无法打开的问题&lt;br&gt; 355、增加对关联启动权限检测&lt;br&gt; 354、targetSdk 30适配&lt;br&gt; 353、修复targetSdk为30时，某些应用无法上网的问题&lt;br&gt; 352、修复targetSdk为30时，sdcard无法访问的问题&lt;br&gt; 351、编译脚本中使用cmake替换gradle task&lt;br&gt; 350、移除过时文档&lt;br&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;2021年 8月7号 至 2021年 8月21号 商业版代码更新内容&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;349、调整优化gradle脚本&lt;br&gt; 348、hidedenApiBypass支持Android R+&lt;br&gt; 347、targetSdk 30 支持&lt;br&gt; 346、修复VIVO系统服务bug&lt;br&gt; 345、修复VIVO手机无法使用摄像头的bug&lt;br&gt; 344、修复dex加载异常状态的获取&lt;br&gt; 343、修复Android R上libart.so路径问题&lt;br&gt; 342、修复Andoid Q+ 删除通知的bug&lt;br&gt; 341、修复APN uri的权限检查&lt;br&gt; 340、修复Android R暂停恢复线程状态&lt;br&gt; 339、修复debug模式下部分hook失效情况&lt;br&gt; 338、修复hook在R之后的一些bug&lt;br&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;2021年 4月25号 至 2021年 8月6号 商业版代码更新内容&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;337、修复探探部分手机不能上传头像问题&lt;br&gt; 336、修复Android 10 华为设备IO重定向问题&lt;br&gt; 335、调整横竖屏逻辑,减少异常情况发生&lt;br&gt; 334、添加Activity生命周期的回调接口&lt;br&gt; 333、修复Android 12的广播问题&lt;br&gt; 332、修复微信部分界面状态异常的BUG&lt;br&gt; 331、修复Outlook、One drive、Teams、Zoom等海外app的支持&lt;br&gt; 330、修复Android 11 一个权限请求BUG&lt;br&gt; 329、修复部分cocos2d引擎只显示半屏的问题&lt;br&gt; 328、修复微信在多用户下不能发送文件的问题&lt;br&gt; 327、split apk 支持&lt;br&gt; 326、Android S 支持&lt;br&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;2021年 2月24号 至 2021年 4月24号 商业版代码更新内容&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;325、适配多用户环境&lt;br&gt; 324、修复新版微信的兼容问题&lt;br&gt; 323、兼容更多企业级加固&lt;br&gt; 322、支持VAPP设置电源优化&lt;br&gt; 321、修复缺失权限声明&lt;br&gt; 320、修复Android 11上android.test.base库的引用&lt;br&gt; 319、优化ext插件判断&lt;br&gt; 318、优化安装时ABI的选择&lt;br&gt; 317、修复Google文档在Android 11上崩溃的问题&lt;br&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;2020年 10月15号 至 2021年 2月23号 商业版代码更新内容&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;316、解决新版爱加密、邦邦等加固的兼容性&lt;br&gt; 315、修复WhatsApp不显示冷启动Splash的问题&lt;br&gt; 314、优化对系统app的识别&lt;br&gt; 313、完善多用户环境下的支持&lt;br&gt; 312、解决ext插件部分情况下卡死的问题&lt;br&gt; 311、支持Google Play在容器中下载APP&lt;br&gt; 310、修复Android 11 QQ无法显示图片的问题&lt;br&gt; 309、兼容Android 11运行Google Service&lt;br&gt; 308、解决Android 11无法运行chromium&lt;br&gt; 307、支持Hook @CriticalNative Method&lt;br&gt; 306、修复JDK 13无法编译运行的问题&lt;br&gt; 305、修复Service部分情况可能crash的问题&lt;br&gt; 304、修复Android 11无法加载外部存储私有数据的问题&lt;br&gt; 303、修复低版本app无法使用org.apache.http.legacy的问题&lt;br&gt; 302、修复某些情况系统任务栈只显示最后一个的问题&lt;br&gt; 301、完善不同平台的构建脚本&lt;br&gt; 300、修复Android 11无法读取obb的问题&lt;br&gt; 299、解决软件无法向后兼容的问题&lt;br&gt; 298、重构VApp安装框架&lt;br&gt; 297、重构virtual文件系统&lt;br&gt; 296、修复某些情况下WebView无法启动的问题&lt;br&gt; 295、修复VApp卸载重装的BUG&lt;br&gt; 294、修复LOL手游的登录异常问题&lt;br&gt; 293、支持安装Splits APK&lt;br&gt; 292、支持动态配置主包环境&lt;br&gt; 291、修复32位QQ调用64位微信卡顿的问题&lt;br&gt; 290、修复Messenger调用Facebook崩溃的问题&lt;br&gt; 289、优化对Google服务框架的支持&lt;br&gt; 288、实现新的扩展包同步机制&lt;br&gt; 287、修复Android 11正式版的异常问题&lt;br&gt; 286、添加系统Package缓存，优化性能&lt;br&gt; 285、修复disabled组件还能被PMS查询的BUG&lt;br&gt; 284、修复微信部分界面Launch行为异常的问题&lt;br&gt; 283、修复ContentProvider.getCallingPackage返回Host包名的BUG&lt;br&gt; 282、修复uid虚拟化的BUG，解决部分app权限检查失败的问题&lt;br&gt; 281、重写PendingIntent, IntentSender的实现&lt;br&gt; 280、优化进程管理，修复长期存在的概率性进程死锁问题&lt;br&gt; 279、重写Service实现，Service生命周期更准确，不容易被杀死&lt;br&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;2020年 9月13号 至 2020年 10月15号 商业版代码更新内容&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;278、修复 64 位 App 无法调用 32 位 App 的问题&lt;br&gt; 277、修复 Android R 加载 HttpClient 的问题 &lt;br&gt; 276、修复 Android R debug 模式下的崩溃问题&lt;br&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;2020年 8月23号 至 2020年 9月12号 商业版代码更新内容&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;275、添加缺失的 service hook&lt;br&gt; 274、修复百度翻译无法启动的问题 &lt;br&gt; 273、修复 GP 下载的 split app 无法启动的问题&lt;br&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;2020年 7月10号 至 2020年 8月22号 商业版代码更新内容&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;272、修复 Service 创建&lt;br&gt; 271、添加 NotificationService 缺失的 Hook&lt;br&gt; 270、修复 Yotube 崩溃&lt;br&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;2020年 5月19号 至 2020年 7月9号 商业版代码更新内容&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;269、初步适配 Android 11 beta1&lt;br&gt; 268、修复小红书多开闪退的问题&lt;br&gt; 267、修复某些 App 多开报“应用签名被篡改”的问题&lt;br&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;2020年 4月24号 至 2020年 5月18号 商业版代码更新内容&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;266、修复 sh 调用错误&lt;br&gt; 265、修复 9.0 以上最新版 Facebook 无法登陆的问题&lt;br&gt; 264、帮助企业微信修复启动虚拟存储的情况下无法拍照的问题&lt;br&gt; 263、修复某些情况下 64位 app 打不开 Activity 的问题&lt;br&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;2020年 3月24号 至 2020年 4月23号 商业版代码更新内容&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;262、修复 Vivo 设备提示安装游戏 SDK 的问题&lt;br&gt; 261、修复 Android Q 无法加载部分系统 so 的问题&lt;br&gt; 260、修复华为设备微博未响应&lt;br&gt; 259、忽略不必要的权限检查造成的崩溃&lt;br&gt; 258、修复 WPS 分享文件崩溃的问题&lt;br&gt; 257、部分 10.0 设备的闪退问题&lt;br&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;2020年 3月7号 至 2020年 3月23号 商业版代码更新内容&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;256、修复微信同时打开两个页面问题&lt;br&gt; 255、修复微信登陆成功但是返回登陆页面的问题&lt;br&gt; 254、修复最新版 QQ 无法下载附件的问题&lt;br&gt; 253、更新 SandHook 版本&lt;br&gt; 252、修复 9.0 以上安装未签名Apk问题 &lt;br&gt; 251、修复 10.0 的定位问题&lt;br&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;2020年 1月16号 至 2020年 3月6号 商业版代码更新内容&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;250、调整 lib 重定向逻辑&lt;br&gt; 249、修复三星 10.0 系统上的崩溃问题&lt;br&gt; 248、修复 release build 的 hook 异常&lt;br&gt; 247、增加 SandHook 的 proguard 规则&lt;br&gt; 246、修复对部分 App 中 VirtualApk 的兼容问题 &lt;br&gt; 245、修复 VA 内部请求安装 apk 失败的问题&lt;br&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;2019年 12月26号 至 2020年 1月15号 商业版代码更新内容&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;244、修复 Android Q 遗漏的 hook&lt;br&gt; 243、禁用 Emui10 的 AutoFill&lt;br&gt; 242、增加新 api 结束所有 activity&lt;br&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;2019年 12月15号 至 2019年 12月25号 商业版代码更新内容&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;241、修复 Emui10 上企业微信等 App 无法启动的问题&lt;br&gt; 240、修复在 4.x 可能导致的崩溃&lt;br&gt; 239、升级 SandHook 修复对 Thread 类的 Hook&lt;br&gt; 238、修复 Android Q 某些接口导致的权限问题&lt;br&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;2019年 11月20号 至 2019年 12月14号 商业版代码更新内容&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;237、修复 Notification 缓存导致的崩溃&lt;br&gt; 236、修复高版本 Notification 的 classloader 问题&lt;br&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;2019年 11月9号 至 2019年 11月19号 商业版代码更新内容&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;235、修复 Android 5.x 的 ART Hook &lt;br&gt; 234、修复 ART Hook 可能导致的死锁问题 &lt;br&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;2019年 11月2号 至 2019年 11月8号 商业版代码更新内容&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;233、修复 WPS, 网易邮箱等在 Q 设备上崩溃的问题 &lt;br&gt; 232、修复汤姆猫跑酷在部分 Q 设备上崩溃的问题 &lt;br&gt; 231、修复 QQ 在部分 Q 设备上崩溃的问题 &lt;br&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;2019年 10月25号 至 2019年 11月1号 商业版代码更新内容&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;230、修复克隆 Google Play 下载的 64位 App&lt;br&gt; 229、修复企业微信 &lt;br&gt; 228、修复 Telegram &lt;br&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;2019年 10月8号 至 2019年 10月24号 商业版代码更新内容&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;227、修复 Android P 下 AppOspManager 的异常 &lt;br&gt; 226、添加 Android P 下 ActivityTaskManager 丢失的 Hook &lt;br&gt; 225、修复 Android P 下 Activity Top Resume 异常 &lt;br&gt; 224、支持在系统多用户模式下运行! &lt;br&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;2019年 10月8号 商业版代码更新内容&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;223、修复Android P 以上内部 app 返回桌面异常的问题 &lt;br&gt; 222、64位分支支持 Android Q &lt;br&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;2019年 9月20号 至 2019年 10月7号 商业版代码更新内容&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;221、修复安装在扩展插件中的 apk 无法正确显示图标和名称的问题 &lt;br&gt; 220、修复 twitter 无法打开的问题 &lt;br&gt; 219、正式兼容 Android Q 正式版! &lt;br&gt; 218、修复 Android Q 某些 Activity 无法再次打开的问题 &lt;br&gt; 217、初步适配 Android Q 正式版 &lt;br&gt; 216、修复数个64位分支的 Bug &lt;br&gt; 215、新增加支持32位插件的64位分支，该分支支持32位旧设备并且64位设备在32位插件的情况下可以支持32位旧应用 &lt;br&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;2017年 12月 至 2019年 7月 30 日 商业版代码更新内容&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;214、改进 App 层提示信息 &lt;br&gt; 213、改进部分编码 &lt;br&gt; 212、修复从宿主向插件发送广播的方法 &lt;br&gt; 211、兼容最新版 gradle 插件 &lt;br&gt; 210、增加广播命名空间以避免多个使用 VA 技术的 App 互相干扰 &lt;br&gt; 209、修复 IMO 打不开的问题 &lt;br&gt; 208、修复部分 ContentProvider 找不到的问题 &lt;br&gt; 207、支持纯32位模式，以兼容老设备 &lt;br&gt; 206、初步支持纯64位模式，以应对8月份的谷歌市场的策略变化 &lt;br&gt; 205、适配到 Android Q beta4 &lt;br&gt; 204、修复了货拉拉无法安装的问题&lt;br&gt; 203、优化了64位apk的判定逻辑&lt;br&gt; 202、修复配置网络证书的 App 的联网&lt;br&gt; 201、重构组件状态管理&lt;br&gt; 200、优化 MIUI/EMUI ContentProvider 兼容性&lt;br&gt; 199、修复 StorageStats Hook&lt;br&gt; 198、修复快手无法登陆&lt;br&gt; 197、修复 YY 无法启动，更好的兼容插件化框架&lt;br&gt; 196、修复 Facebook 登陆&lt;br&gt; 195、修复 Google Play 下载的 App 无法找到 so 的问题(皇室战争)&lt;br&gt; 194、修复 split apk 支持&lt;br&gt; 193、修复 Youtube 无法启动&lt;br&gt; 192、修复优酷无法启动的问题&lt;br&gt; 191、修复多开时app间可能存在广播namespace冲突的BUG&lt;br&gt; 190、采用新的策略绕过Android P以后的Hidden Policy API&lt;br&gt; 189、适配Android Q(beta1)&lt;br&gt; 188、修复华为设备部分app无法识别存储的问题&lt;br&gt; 187、修复启动进程可能失败导致app无法运行的问题&lt;br&gt; 186、修复4.4设备部分native符号无法找到的问题&lt;br&gt; 185、修复部分设备WebView包名获取失败的问题&lt;br&gt; 184、修复Service细节处理的问题&lt;br&gt; 183、优化启动速度&lt;br&gt; 182、修复WebView在少数机型加载失败的情况&lt;br&gt; 181、修复Lib决策的问题&lt;br&gt; 180、修复部分华为机型无法读取内存卡的问题&lt;br&gt; 179、修复Service可能存在的问题&lt;br&gt; 178、允许根据intent判断Activity是否在外部启动&lt;br&gt; 177、修复部分机型上Gms和Google Play启动到了不正确的环境&lt;br&gt; 176、修复新实现的StaticBroadcast导致的兼容性问题&lt;br&gt; 175、修复Android P上无法使用apache.http.legacy的问题&lt;br&gt; 174、实现Native trace&lt;br&gt; 173、优化IO Redirect性能&lt;br&gt; 172、修复wechat部分时候出现网络无法连接的问题&lt;br&gt; 171、修复小概率process attach不正确的BUG&lt;br&gt; 170、开始下一阶段的ROADMAP&lt;br&gt; 169、解决Android P无法注册超过1000个广播导致的问题&lt;br&gt; 168、修复可能导致ANR的DeadLock&lt;br&gt; 167、修复部分app动态加载so失败的问题&lt;br&gt; 166、修复免安装运行环境下部分机型第一次打开出现黑屏的问题&lt;br&gt; 165、兼容适配多款主流的Android模拟器&lt;br&gt; 164、优化启动性能&lt;br&gt; 163、解决多个内存泄露问题&lt;br&gt; 162、修复IO Redirect优先级的问题&lt;br&gt; 161、修复8.0以下设备Messenger无网络连接的问题&lt;br&gt; 160、修复双开时外部app卸载时内部app仍然保留的BUG&lt;br&gt; 159、修复部分腾讯加固无法运行的问题&lt;br&gt; 158、修复Instagram无法登录Facebook的BUG&lt;br&gt; 157、修复进程小概率可能重复启动的BUG&lt;br&gt; 156、修复GET_PERMISSIONS没有获取权限的BUG&lt;br&gt; 155、修复startActivityIntentSender的BUG&lt;br&gt; 154、修复vivo设备部分Activity无法启动的问题&lt;br&gt; 153、修复app无法调用外部app选择文件的问题&lt;br&gt; 152、完善Android P的兼容&lt;br&gt; 151、兼容Android P的Google服务&lt;br&gt; 150、解决Messenger部分功能异常&lt;br&gt; 149、完善IO Redirect&lt;br&gt; 148、大量适配Gms, 修复Gms运行过程中进程无限重启的问题&lt;br&gt; 147、重新实现Service的运行机制&lt;br&gt; 146、完善64bit，提供了部分ROM配置64bit Engine权限的API&lt;br&gt; 145、修复了4.4设备上的Activity启动问题&lt;br&gt; 144、支持excludeFromRecent属性&lt;br&gt; 143、修复Instagram无法Facebook登录的问题&lt;br&gt; 142、修复Facebook第一次登录闪退的问题&lt;br&gt; 141、支持以64位模式运行Gms、Google play、Play game&lt;br&gt; 140、支持在双开/免安装运行的Google play中下载和安装app&lt;br&gt; 139、修复DownloadManager的BUG&lt;br&gt; 138、修复Google play返回上层时重启界面的BUG&lt;br&gt; 137、修复免安装模式下so决策问题&lt;br&gt; 136、优化构建脚本，便于引入项目&lt;br&gt; 135、修复移动MM SDK无法启动的问题&lt;br&gt; 134、修复微信摇一摇的BUG&lt;br&gt; 133、修复中兴设备不稳定的BUG&lt;br&gt; 132、支持ARM64下的IO Redirect&lt;br&gt; 131、修复USE_OUTSIDE模式下外部app更新时，内部app没有更新的BUG&lt;br&gt; 130、兼容最新Android 9.0(代号: pie) 及正式版之前发布的四个Preview版本&lt;br&gt; 129、兼容内置houdini的x86设备&lt;br&gt; 128、WindowPreview技术，使app启动与真实app达到一样的速度&lt;br&gt; 127、新的ActivityStack以提高app运行质量&lt;br&gt; 126、解决接入Atlas Framework的app运行异常的问题&lt;br&gt; 125、现在可以定义虚拟app返回桌面的具体行为&lt;br&gt; 124、现在双开模式下app随系统动态更新，不需要手动检查&lt;br&gt; 123、支持targetSdkVersion &amp;gt;= 26时仍可正常运行低版本的app&lt;br&gt; 122、兼容腾讯游戏管家的QDroid虚拟引擎 (beta)&lt;br&gt; 121、大量重构底层代码，大幅提升运行速度&lt;br&gt; 120、修复网易新闻分享到微博后无法取消的问题&lt;br&gt; 119、修复App自定义权限无法识别的问题&lt;br&gt; 118、修复墨迹天气app无法启动的问题&lt;br&gt; 117、修复部分政府app无法启动的问题&lt;br&gt; 116、API的变动详见代码&lt;br&gt; 115、修复三星系列应用的相互调用问题&lt;br&gt; 114、修复小米应用在非小米系统的账号问题&lt;br&gt; 113、修复分享/发送等第三方调用，返回页面不正常&lt;br&gt; 112、修复应用宝提示不能安装&lt;br&gt; 111、调用第三方app，对uri进行加密&lt;br&gt; 110、适配前刘海&lt;br&gt; 109、适配小米rom的hook&lt;br&gt; 108、适配努比亚录音问题&lt;br&gt; 107、内部悬浮窗权限控制&lt;br&gt; 106、优化自定义通知栏的处理&lt;br&gt; 105、修复Context的INCLUDE_CODE权限问题&lt;br&gt; 104、适配华为，oppo的角标&lt;br&gt; 103、修复百度视频的进程重启问题&lt;br&gt; 102、修复某些snapchat的无法启动问题&lt;br&gt; 101、适配autofill服务，例如piexl系列&lt;br&gt; 100、完善64位的io hook&lt;br&gt; 99、优化hook库的兼容性，加回dlopen&lt;br&gt; 98、64位扩展包的so移到32位主包。（jni代码改动后，在Run之前，请先build一次）&lt;br&gt; 97、通知栏改动：适配8.1的通知渠道；移除应用时，移除应用的全部通知&lt;br&gt; 96、兼容部分app，需要设置android:largeHeap=true&lt;br&gt; 95、修复ffmpeg库的视频无法播放问题&lt;br&gt; 94、优化横竖屏切换&lt;br&gt; 93、降低通过Intent.ACTION_VIEW调用外部Activity限制。&lt;br&gt; 92、兼容MG SDK&lt;br&gt; 91、64位支持还在开发阶段&lt;br&gt; 90、更新混淆配置app/proguard-rules.pro，必须加规则-dontshrink&lt;br&gt; 89、优化模拟机型，例如：模拟后，某些app不出现设备验证&lt;br&gt; 88、提高dex2oat兼容性&lt;br&gt; 87、优化模拟定位&lt;br&gt; 86、移除dlopen&lt;br&gt; 85、targetVersion可以改为26：支持targetVersion&amp;lt;23的app动态权限申请，支持targetVersion&amp;lt;24的文件Uri&lt;br&gt; 84、installPackage改为默认异步形式&lt;br&gt; 83、为了支持64位模式，换回aidl&lt;br&gt; 82、去掉SettingHandler现在可以动态设置特殊规则，规则会存储，不需要重复设置&lt;br&gt; 81、增加2个native_setup&lt;br&gt; 80、提高jobService兼容性&lt;br&gt; 79、ShortcutService相关：关联VASettings.ENABLE_INNER_SHORTCUT&lt;br&gt; 78、为了稳定性和运行效率，去掉上个版本的蓝牙，wifi，不声明权限的适配。&lt;br&gt; 77、增加app启动异常的广播Constants.ACTION_PROCESS_ERROR&lt;br&gt; 76、修复少数游戏横屏判断问题&lt;br&gt; 75、demo增加机型模拟&lt;br&gt; 74、适配vivo一个自定义权限（后台弹窗）VA是把一个历史acitivty返回前台，vivo需要这个权限。&lt;br&gt; 73、如果没有蓝牙权限，返回默认值（海外用）&lt;br&gt; 72、修复uid权限检查问题&lt;br&gt; 71、安全性更新，内部应用的文件权限控制&lt;br&gt; 70、提高内部app调用的兼容性，第三方登录，分享&lt;br&gt; 69、自动过滤没权限的外部ContentProvider&lt;br&gt; 68、增加功能：内部app的权限检查（默认关闭）&lt;br&gt; 67、机型模拟:Build类和build.prop&lt;br&gt; 66、提高对乐固加固的app兼容性&lt;br&gt; 65、适配三星wifimanager&lt;br&gt; 64、修复ipc框架一个参数传递问题（IPCMethod这个类必须更新）&lt;br&gt; 63、补全7.0通知栏的hook&lt;br&gt; 62、修正8.0动态快捷菜单的hook&lt;br&gt; 61、SettingHandler新增一个适配接口，主要适配各种游戏&lt;br&gt; 60、功能改动：google自动安装改为手动安装，避免第一次启动时间过久&lt;br&gt; 59、可以禁止访问外部某个ContentProvider&lt;br&gt; 58、适配华为桌面图标数量&lt;br&gt; 57、权限分类注释，标注可删除权限。&lt;br&gt; 56、增加双开模式的app跟随外部升级的开关。&lt;br&gt; 55、提高app的jni兼容性。&lt;br&gt; 54、提高对app集成其他插件框架的兼容性。&lt;br&gt; 53、增加设置接口，根据包名进行设置。&lt;br&gt; 52、增加Uri的适配范围，支持通过Uri分享和查看文件。&lt;br&gt; 51、修复一个在三星8.0的问题。&lt;br&gt; 50、提高对系统自带的app组件兼容性，更好兼容chrome webview，google service。&lt;br&gt; 49、提高ART稳定性&lt;br&gt; 48、增加相机适配范围&lt;br&gt; 47、支持内部App在8.0下的快捷方式管理&lt;br&gt; 46、修复exec异常&lt;br&gt; 45、提高稳定性（修复微信登录闪退）&lt;br&gt; 44、解决微信数据库崩溃问题&lt;br&gt; 43、修复部分4.4设备崩溃问题&lt;br&gt; 42、修复后台应用易被杀死，土豆视频黑屏，新浪微博无法打开，优酷两次返回无法退出。&lt;br&gt; 41、增加应用的保活机制，双开APP更不易被杀死。&lt;br&gt; 40、优化虚拟引擎启动性能。&lt;br&gt; 39、兼容了大部分的加固，第三方APP兼容性对比上一版提升40%+。&lt;br&gt; 38、修复某些rom下，快捷方式图标不正确&lt;br&gt; 37、兼容以前组件StubFileProvider&lt;br&gt; 36、适配部分新ROM的虚拟IMEI&lt;br&gt; 35、改善进程初始化代码，增加稳定性&lt;br&gt; 34、添加内部发送Intent.ACTION_BOOT_COMPLETED的广播，可以设置开关&lt;br&gt; 33、适配关联google play游戏，支持游戏使用google登录&lt;br&gt; 32、适配android O的google service框架&lt;br&gt; 31、适配android O 快捷方式&lt;br&gt; 30、适配耳机模式&lt;br&gt; 29、某些rom对intent的大小限制，demo添加缩放快捷方式图标代码&lt;br&gt; 28、修复多开情况下一个bug&lt;br&gt; 27、修复某些情况下MediaController的bug&lt;br&gt; 26、修复4.1.2的StubFileProvider报错&lt;br&gt; 25、分享的uri处理&lt;br&gt; 24、修复跨app调用Activity的回调&lt;br&gt; 23、前台服务的通知栏拦截开关&lt;br&gt; 22、附带doc&lt;br&gt; 21、完善VA内部的intent的CHOOSE回调&lt;br&gt; 20、Android O的通知栏适配2&lt;br&gt; 19、ipc框架优化, 提高判断binder的存活准确性&lt;br&gt; 18、jni的log开关 Android.mk:LOCAL_CFLAGS += -DLOG_ENABLE&lt;br&gt; 17、混淆配置&lt;br&gt; 16、Android O的通知栏适配&lt;br&gt; 15、修复部分app网络卡的问题&lt;br&gt; 14、适配 android 8.0的dl_open（jni加载）&lt;br&gt; 13、修复华为emui8.0的一个bug&lt;br&gt; 12、完善定位&lt;br&gt; 11、设置手机信息，imei伪装算法&lt;br&gt; 10、适配8.0某个功能（主要app：whatsapp）&lt;br&gt; 9、修复内部微信等应用，无法更新图片，视频&lt;br&gt; 8、demo增加安装监听，自动升级克隆模式的应用&lt;br&gt; 7、7.0的file provider适配&lt;br&gt; 6、增加了定位代码&lt;br&gt; 5、代码进行了架构优化&lt;br&gt; 4、与开源版不同的特征&lt;br&gt; 3、解决了微信被封的一些问题&lt;br&gt; 2、修复了部分机型兼容性&lt;br&gt; 1、修复了12个小BUG&lt;br&gt;&lt;/p&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
</feed>