<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-18T01:37:25Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dromara/dynamic-tp</title>
    <updated>2023-01-18T01:37:25Z</updated>
    <id>tag:github.com,2023-01-18:/dromara/dynamic-tp</id>
    <link href="https://github.com/dromara/dynamic-tp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🔥🔥🔥轻量级动态线程池，内置监控告警功能，集成三方中间件线程池管理，基于主流配置中心（已支持Nacos、Apollo，Zookeeper、Consul、Etcd，可通过SPI自定义实现）。Lightweight dynamic threadpool, with monitoring and alarming functions, base on popular config centers (already support Nacos、Apollo、Zookeeper、Consul, can be customized through SPI).&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;logo&#34; src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/119d7277b1c747479d5980825a078912~tplv-k3u1fbpfcp-zoom-1.image&#34; width=&#34;50%&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;strong&gt;基于配置中心的轻量级动态线程池，内置监控告警功能，可通过SPI自定义扩展实现&lt;/strong&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://gitee.com/dromara/dynamic-tp&#34;&gt;&lt;img src=&#34;https://gitee.com/dromara/dynamic-tp/badge/star.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitee.com/dromara/dynamic-tp/members&#34;&gt;&lt;img src=&#34;https://gitee.com/dromara/dynamic-tp/badge/fork.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dromara/dynamic-tp&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/dromara/dynamic-tp?style=flat-square&amp;amp;logo=github&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dromara/dynamic-tp/network/members&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/dromara/dynamic-tp?style=flat-square&amp;amp;logo=GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dromara/dynamic-tp/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/dromara/dynamic-tp.svg?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/530709dc29604630b6d1537d7c160ea5~tplv-k3u1fbpfcp-watermark.image&#34;&gt;&lt;img src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ddfaed2cce2a47608fb0c0c375a10f08~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;备注加群&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; 官网： &lt;a href=&#34;https://dynamictp.cn&#34;&gt;https://dynamictp.cn&lt;/a&gt; 🔥 &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;背景&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;使用线程池 ThreadPoolExecutor 过程中你是否有以下痛点呢？&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;1.代码中创建了一个 ThreadPoolExecutor，但是不知道那几个核心参数设置多少比较合适&lt;/p&gt; &#xA; &lt;p&gt;2.凭经验设置参数值，上线后发现需要调整，改代码重启服务，非常麻烦&lt;/p&gt; &#xA; &lt;p&gt;3.线程池相对开发人员来说是个黑盒，运行情况不能及时感知到，直到出现问题&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;如果你有以上痛点，动态可监控线程池（DynamicTp）或许能帮助到你。&lt;/p&gt; &#xA;&lt;p&gt;如果看过 ThreadPoolExecutor 的源码，大概可以知道它对核心参数基本都有提供 set / get 方法以及一些扩展方法，可以在运行时动态修改、获取相应的值。&lt;/p&gt; &#xA;&lt;p&gt;现在大多数的互联网项目其实都会微服务化部署，有一套自己的服务治理体系，微服务组件中的分布式配置中心扮演的就是动态修改配置， 实时生效的角色。那么我们是否可以结合配置中心来做运行时线程池参数的动态调整呢？答案是肯定的，而且配置中心相对都是高可用的， 使用它也不用过于担心配置推送出现问题这类事儿，而且也能减少研发动态线程池组件的难度和工作量。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;综上，可以总结出以下的背景&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;广泛性：在 Java 开发中，想要提高系统性能，线程池已经是一个 90%以上的人都会选择使用的基础工具&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;不确定性：项目中可能会创建很多线程池，既有 IO 密集型的，也有 CPU 密集型的，但线程池的参数并不好确定；需要有套机制在运行过程中动态去调整参数&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;无感知性，线程池运行过程中的各项指标一般感知不到；需要有套监控报警机制在事前、事中就能让开发人员感知到线程池的运行状况，及时处理&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;高可用性，配置变更需要及时推送到客户端；需要有高可用的配置管理推送服务，配置中心是现在大多数互联网系统都会使用的组件，与之结合可以大幅度减少开发量及接入难度&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;简介&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;基于以上背景分析，我们对线程池 ThreadPoolExecutor 做一些扩展增强，主要实现以下目标&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;1.实现对运行中线程池参数的动态修改，实时生效&lt;/p&gt; &#xA; &lt;p&gt;2.实时监控线程池的运行状态，触发设置的报警策略时报警，报警信息推送办公平台&lt;/p&gt; &#xA; &lt;p&gt;3.定时采集线程池指标数据，配合像 grafana 这种可视化监控平台做大盘监控&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;经过多个版本的迭代，目前最新版本 v1.0.9 具有以下特性&lt;/strong&gt; ✅&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;代码零侵入&lt;/strong&gt;：我们改变了线程池以往的使用姿势，所有配置均放在配置中心，服务启动时会从配置中心拉取配置生成线程池对象放到 Spring 容器中，使用时直接从 Spring 容器中获取，对业务代码零侵入&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;通知告警&lt;/strong&gt;：提供多种报警维度（配置变更通知、活性报警、容量阈值报警、拒绝触发报警、任务执行或等待超时报警），已支持企业微信、钉钉、飞书、邮件报警，同时提供 SPI 接口可自定义扩展实现&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;运行监控&lt;/strong&gt;：定时采集线程池指标数据，支持通过 MicroMeter、JsonLog 日志输出、Endpoint 三种方式，可通过 SPI 接口自定义扩展实现&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;任务增强&lt;/strong&gt;：提供任务包装功能，实现 TaskWrapper 接口即可，如 MdcTaskWrapper、TtlTaskWrapper、SwTraceTaskWrapper，可以支持线程池上下文信息传递&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;多配置中心支持&lt;/strong&gt;：基于主流配置中心实现线程池参数动态调整，实时生效，已支持 Nacos、Apollo、Zookeeper、Consul、Etcd，同时也提供 SPI 接口可自定义扩展实现&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;中间件线程池管理&lt;/strong&gt;：集成管理常用第三方组件的线程池，已集成 Tomcat、Jetty、Undertow、Dubbo、RocketMq、Hystrix、Grpc、Motan、Okhttp3、Brpc、Tars 等组件的线程池管理（调参、监控报警）&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;轻量简单&lt;/strong&gt;：基于 SpringBoot 实现，引入 starter，接入只需简单 4 步就可完成，顺利 3 分钟搞定&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;多模式&lt;/strong&gt;：参考 Tomcat 线程池提供了 IO 密集型场景使用的 EagerDtpExecutor 线程池&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;兼容性&lt;/strong&gt;：JUC 普通线程池和 Spring 中的 ThreadPoolTaskExecutor 也可以被框架监控，@Bean 定义时加 @DynamicTp 注解即可&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;可靠性&lt;/strong&gt;：框架提供的线程池实现 Spring 生命周期方法，可以在 Spring 容器关闭前尽可能多的处理队列中的任务&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;高可扩展&lt;/strong&gt;：框架核心功能都提供 SPI 接口供用户自定义个性化实现（配置中心、配置文件解析、通知告警、监控数据采集、任务包装等等）&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;线上大规模应用&lt;/strong&gt;：参考&lt;a href=&#34;https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html&#34;&gt;美团线程池实践&lt;/a&gt;，美团内部已经有该理论成熟的应用经验&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;设计&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;框架功能大体可以分为以下几个模块&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;1.配置变更监听模块&lt;/p&gt; &#xA; &lt;p&gt;2.服务内部线程池管理模块&lt;/p&gt; &#xA; &lt;p&gt;3.三方组件线程池管理模块&lt;/p&gt; &#xA; &lt;p&gt;4.监控模块&lt;/p&gt; &#xA; &lt;p&gt;5.通知告警模块&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/38e4bf71d2c84b7ba67d7059b5432a7e~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;技术架构&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;详细查看官网文档，&lt;a href=&#34;https://dynamictp.cn/guide/introduction/architecture.html&#34;&gt;架构设计&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;使用&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;接入步骤&lt;/p&gt; &lt;p&gt;1.引入相应配置中心的依赖，具体见下述 maven 依赖&lt;/p&gt; &lt;p&gt;2.配置中心配置线程池实例，配置见下述（给出的是全配置项，不用的可以删除）&lt;/p&gt; &lt;p&gt;3.启动类加 @EnableDynamicTp 注解&lt;/p&gt; &lt;p&gt;4.使用 @Resource 或 @Autowired 进行依赖注入，或通过 DtpRegistry.getDtpExecutor(&#34;name&#34;)获取&lt;/p&gt; &lt;p&gt;5.通过以上 4 步就可以使用了，是不是感觉超简单&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;maven 依赖，见官网文档，&lt;a href=&#34;https://dynamictp.cn/guide/use/maven.html&#34;&gt;maven 依赖&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;线程池配置，见官网文档，&lt;a href=&#34;https://dynamictp.cn/guide/use/config.html&#34;&gt;配置文件&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;代码使用，见官网文档，&lt;a href=&#34;https://dynamictp.cn/guide/use/code.html&#34;&gt;代码使用&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;更详细使用实例请参考 &lt;code&gt;example&lt;/code&gt; 工程&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;通知报警&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;触发报警阈值会推送相应报警消息（活性、容量、拒绝、任务等待超时、任务执行超时），且会高亮显示相应字段&lt;/p&gt; &lt;p&gt;更多见官网文档，&lt;a href=&#34;https://dynamictp.cn/guide/notice/alarm.html&#34;&gt;通知报警&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d65151e3e9ca460eac18f30ea6be05d3~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;告警&#34; width=&#34;50%&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;配置变更会推送通知消息，且会高亮变更的字段&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/30093a6ede914887bb5566139352fb8b~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;变更通知&#34; width=&#34;50%&#34;&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;监控&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ec5a7d1a31e7418ba5d9a101a5c03826~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;监控数据&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;通过 collectType 属性配置监控指标采集类型，默认 logging&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;MicroMeter：通过引入相关 MicroMeter 依赖采集到相应的平台（如 Prometheus，InfluxDb...）&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Logging：定时采集指标数据以 Json 日志格式输出磁盘， 地址 ${logPath}/dynamictp/${appName}.monitor.log&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;{&#34;datetime&#34;: &#34;2022-04-17 11:35:15.208&#34;, &#34;app_name&#34;: &#34;dynamic-tp-nacos-cloud-demo&#34;, &#34;thread_pool_metrics&#34;: {&#34;activeCount&#34;:0,&#34;queueSize&#34;:0,&#34;largestPoolSize&#34;:0,&#34;poolSize&#34;:0,&#34;rejectHandlerName&#34;:&#34;CallerRunsPolicy&#34;,&#34;queueCapacity&#34;:2000,&#34;fair&#34;:false,&#34;queueTimeoutCount&#34;:0,&#34;rejectCount&#34;:0,&#34;waitTaskCount&#34;:0,&#34;taskCount&#34;:0,&#34;runTimeoutCount&#34;:0,&#34;queueRemainingCapacity&#34;:2000,&#34;corePoolSize&#34;:4,&#34;queueType&#34;:&#34;VariableLinkedBlockingQueue&#34;,&#34;completedTaskCount&#34;:0,&#34;dynamic&#34;:true,&#34;maximumPoolSize&#34;:6,&#34;poolName&#34;:&#34;dtpExecutor1&#34;}}&#xA;{&#34;datetime&#34;: &#34;2022-04-17 11:35:15.209&#34;, &#34;app_name&#34;: &#34;dynamic-tp-nacos-cloud-demo&#34;, &#34;thread_pool_metrics&#34;: {&#34;activeCount&#34;:0,&#34;queueSize&#34;:0,&#34;largestPoolSize&#34;:0,&#34;poolSize&#34;:0,&#34;rejectHandlerName&#34;:&#34;CallerRunsPolicy&#34;,&#34;queueCapacity&#34;:2000,&#34;fair&#34;:false,&#34;queueTimeoutCount&#34;:0,&#34;rejectCount&#34;:0,&#34;waitTaskCount&#34;:0,&#34;taskCount&#34;:0,&#34;runTimeoutCount&#34;:0,&#34;queueRemainingCapacity&#34;:2000,&#34;corePoolSize&#34;:2,&#34;queueType&#34;:&#34;TaskQueue&#34;,&#34;completedTaskCount&#34;:0,&#34;dynamic&#34;:true,&#34;maximumPoolSize&#34;:4,&#34;poolName&#34;:&#34;dtpExecutor2&#34;}}&#xA;{&#34;datetime&#34;: &#34;2022-04-17 11:35:15.209&#34;, &#34;app_name&#34;: &#34;dynamic-tp-nacos-cloud-demo&#34;, &#34;thread_pool_metrics&#34;: {&#34;activeCount&#34;:0,&#34;queueSize&#34;:0,&#34;largestPoolSize&#34;:0,&#34;poolSize&#34;:0,&#34;queueCapacity&#34;:2147483647,&#34;fair&#34;:false,&#34;queueTimeoutCount&#34;:0,&#34;rejectCount&#34;:0,&#34;waitTaskCount&#34;:0,&#34;taskCount&#34;:0,&#34;runTimeoutCount&#34;:0,&#34;queueRemainingCapacity&#34;:2147483647,&#34;corePoolSize&#34;:1,&#34;queueType&#34;:&#34;LinkedBlockingQueue&#34;,&#34;completedTaskCount&#34;:0,&#34;dynamic&#34;:false,&#34;maximumPoolSize&#34;:1,&#34;poolName&#34;:&#34;commonExecutor&#34;}}&#xA;{&#34;datetime&#34;: &#34;2022-04-17 11:35:15.209&#34;, &#34;app_name&#34;: &#34;dynamic-tp-nacos-cloud-demo&#34;, &#34;thread_pool_metrics&#34;: {&#34;activeCount&#34;:0,&#34;queueSize&#34;:0,&#34;largestPoolSize&#34;:100,&#34;poolSize&#34;:100,&#34;queueCapacity&#34;:2147483647,&#34;fair&#34;:false,&#34;queueTimeoutCount&#34;:0,&#34;rejectCount&#34;:0,&#34;waitTaskCount&#34;:0,&#34;taskCount&#34;:177,&#34;runTimeoutCount&#34;:0,&#34;queueRemainingCapacity&#34;:2147483647,&#34;corePoolSize&#34;:100,&#34;queueType&#34;:&#34;TaskQueue&#34;,&#34;completedTaskCount&#34;:177,&#34;dynamic&#34;:false,&#34;maximumPoolSize&#34;:400,&#34;poolName&#34;:&#34;tomcatWebServerTp&#34;}}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;暴露 EndPoint 端点(dynamic-tp)，可以通过 http 方式请求&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[&#xA;    {&#xA;        &#34;dtp_name&#34;: &#34;remoting-call&#34;,&#xA;        &#34;core_pool_size&#34;: 6,&#xA;        &#34;maximum_pool_size&#34;: 12,&#xA;        &#34;queue_type&#34;: &#34;SynchronousQueue&#34;,&#xA;        &#34;queue_capacity&#34;: 0,&#xA;        &#34;queue_size&#34;: 0,&#xA;        &#34;fair&#34;: false,&#xA;        &#34;queue_remaining_capacity&#34;: 0,&#xA;        &#34;active_count&#34;: 0,&#xA;        &#34;task_count&#34;: 21760,&#xA;        &#34;completed_task_count&#34;: 21760,&#xA;        &#34;largest_pool_size&#34;: 12,&#xA;        &#34;pool_size&#34;: 6,&#xA;        &#34;wait_task_count&#34;: 0,&#xA;        &#34;reject_count&#34;: 124662,&#xA;        &#34;reject_handler_name&#34;: &#34;CallerRunsPolicy&#34;&#xA;    }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#dromara/dynamic-tp&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=dromara/dynamic-tp&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;知识星球&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/894a4e918ff14c13b4a66d3f30f7ff7e~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;联系我&lt;/h2&gt; &#xA;&lt;p&gt;看到这儿，&lt;strong&gt;请给项目一个 star&lt;/strong&gt;，你的支持是我们前进的动力！&lt;/p&gt; &#xA;&lt;p&gt;使用过程中有任何问题，或者对项目有什么想法或者建议，可以加入社群，跟 500+ 群友一起交流讨论。&lt;/p&gt; &#xA;&lt;p&gt;微信群已满 200 人，可以关注微信公众号，加我个人微信拉群（备注：dynamic-tp）。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/530709dc29604630b6d1537d7c160ea5~tplv-k3u1fbpfcp-watermark.image&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;鸣谢&lt;/h2&gt; &#xA;&lt;p&gt;感谢 JetBrains 对开源项目的支持&lt;/p&gt; &#xA;&lt;a href=&#34;https://jb.gg/OpenSourceSupport&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/8643542/160519107-199319dc-e1cf-4079-94b7-01b6b8d23aa6.png&#34; align=&#34;left&#34; height=&#34;150&#34; width=&#34;150&#34; alt=&#34;JetBrains&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>traccar/traccar</title>
    <updated>2023-01-18T01:37:25Z</updated>
    <id>tag:github.com,2023-01-18:/traccar/traccar</id>
    <link href="https://github.com/traccar/traccar" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Traccar GPS Tracking System&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://www.traccar.org&#34;&gt;Traccar&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Traccar is an open source GPS tracking system. This repository contains Java-based back-end service. It supports more than 200 GPS protocols and more than 2000 models of GPS tracking devices. Traccar can be used with any major SQL database system. It also provides easy to use &lt;a href=&#34;https://www.traccar.org/traccar-api/&#34;&gt;REST API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Other parts of Traccar solution include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/traccar/traccar-web&#34;&gt;Traccar web app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/traccar/traccar-manager-android&#34;&gt;Traccar Manager Android app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/traccar/traccar-manager-ios&#34;&gt;Traccar Manager iOS app&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There is also a set of mobile apps that you can use for tracking mobile devices:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/traccar/traccar-client-android&#34;&gt;Traccar Client Android app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/traccar/traccar-client-ios&#34;&gt;Traccar Client iOS app&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Some of the available features include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Real-time GPS tracking&lt;/li&gt; &#xA; &lt;li&gt;Driver behaviour monitoring&lt;/li&gt; &#xA; &lt;li&gt;Detailed and summary reports&lt;/li&gt; &#xA; &lt;li&gt;Geofencing functionality&lt;/li&gt; &#xA; &lt;li&gt;Alarms and notifications&lt;/li&gt; &#xA; &lt;li&gt;Account and device management&lt;/li&gt; &#xA; &lt;li&gt;Email and SMS support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://www.traccar.org/build/&#34;&gt;build from source documentation&lt;/a&gt; on the official website.&lt;/p&gt; &#xA;&lt;h2&gt;Team&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Anton Tananaev (&lt;a href=&#34;mailto:anton@traccar.org&#34;&gt;anton@traccar.org&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Andrey Kunitsyn (&lt;a href=&#34;mailto:andrey@traccar.org&#34;&gt;andrey@traccar.org&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Apache License, Version 2.0&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;    http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>openjdk/jmh</title>
    <updated>2023-01-18T01:37:25Z</updated>
    <id>tag:github.com,2023-01-18:/openjdk/jmh</id>
    <link href="https://github.com/openjdk/jmh" rel="alternate"></link>
    <summary type="html">&lt;p&gt;https://openjdk.org/projects/code-tools/jmh&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Java Microbenchmark Harness (JMH)&lt;/h1&gt; &#xA;&lt;p&gt;JMH is a Java harness for building, running, and analysing nano/micro/milli/macro benchmarks written in Java and other languages targeting the JVM.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Basic Considerations&lt;/h3&gt; &#xA;&lt;p&gt;The recommended way to run a JMH benchmark is to use Maven to setup a standalone project that depends on the jar files of your application. This approach is preferred to ensure that the benchmarks are correctly initialized and produce reliable results. It is possible to run benchmarks from within an existing project, and even from within an IDE, however setup is more complex and the results are less reliable.&lt;/p&gt; &#xA;&lt;p&gt;In all cases, the key to using JMH is enabling the annotation- or bytecode-processors to generate the synthetic benchmark code. Maven archetypes are the primary mechanism used to bootstrap the project that has the proper build configuration. We strongly recommend new users make use of the archetype to setup the correct environment.&lt;/p&gt; &#xA;&lt;h3&gt;Samples&lt;/h3&gt; &#xA;&lt;p&gt;In order to understand JMH tests and maybe write your own, it might be useful to work through the &lt;a href=&#34;https://github.com/openjdk/jmh/tree/master/jmh-samples/src/main/java/org/openjdk/jmh/samples&#34;&gt;JMH Samples&lt;/a&gt;. See the test comments for run instructions.&lt;/p&gt; &#xA;&lt;h3&gt;Preferred Usage: Command Line&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 1. Setting up the benchmarking project.&lt;/strong&gt; The following command will generate the new JMH-driven project in &lt;code&gt;test&lt;/code&gt; folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mvn archetype:generate \&#xA;  -DinteractiveMode=false \&#xA;  -DarchetypeGroupId=org.openjdk.jmh \&#xA;  -DarchetypeArtifactId=jmh-java-benchmark-archetype \&#xA;  -DgroupId=org.sample \&#xA;  -DartifactId=test \&#xA;  -Dversion=1.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to benchmark an alternative JVM language, use another archetype artifact ID from the &lt;a href=&#34;https://repo.maven.apache.org/maven2/org/openjdk/jmh/&#34;&gt;list of existing ones&lt;/a&gt;, it usually amounts to replacing &lt;code&gt;java&lt;/code&gt; to another language in the artifact ID given above. Using alternative archetypes may require additional changes in the build configuration, see the &lt;code&gt;pom.xml&lt;/code&gt; in the generated project.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 2. Building the benchmarks.&lt;/strong&gt; After the project is generated, you can build it with the following Maven command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd test/&#xA;$ mvn clean verify&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 3. Running the benchmarks.&lt;/strong&gt; After the build is done, you will get the self-contained executable JAR, which holds your benchmark, and all essential JMH infrastructure code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ java -jar target/benchmarks.jar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run with &lt;code&gt;-h&lt;/code&gt; to see the command line options available.&lt;/p&gt; &#xA;&lt;p&gt;When dealing with large projects, it is customary to keep the benchmarks in a separate sub-project, which then depends on the tested modules via the usual build dependencies.&lt;/p&gt; &#xA;&lt;h3&gt;IDE Support&lt;/h3&gt; &#xA;&lt;p&gt;While the command line approach is the suggested one, some people prefer to use IDEs. The user experience varies between different IDEs, but we will outline the general things here. Running benchmarks from the IDE is generally not recommended due to generally uncontrolled environment in which the benchmarks run.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 1. Setting up the benchmarking project.&lt;/strong&gt; Some IDEs provide the GUI to create the Maven project from the given archetype. Make sure your IDE knows about Central archetype catalog, and look for &lt;code&gt;org.openjdk.jmh:jmh-${lang}-benchmark-archetype&lt;/code&gt; there. Alternatively, you can use the command line to generate the benchmark project, see above.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE: JMH is not intended to be used in the same way as a typical testing library such as JUnit. Simply adding the &lt;code&gt;jmh-core&lt;/code&gt; jar file to your build is not enough to be able to run benchmarks.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 2. Building the benchmarks.&lt;/strong&gt; Most IDEs are able to open/import Maven projects, and infer the build configuration from Maven project configuration. IDEA and NetBeans are able to build JMH benchmark projects with little to no effort. Eclipse build configuration may need to set up JMH annotation processors to run.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 3. Running the benchmarks.&lt;/strong&gt; There is no direct support for JMH benchmarks in the IDE, but one can use JMH Java API to invoke the benchmark. It usually amounts to having the &lt;code&gt;main&lt;/code&gt; method, which will then call into JMH. See &lt;a href=&#34;https://github.com/openjdk/jmh/tree/master/jmh-samples/src/main/java/org/openjdk/jmh/samples&#34;&gt;JMH Samples&lt;/a&gt; for the examples of this approach. Before you run any benchmark, the project build is required. Most IDEs do this automatically, but some do require explicit build action to be added before the run: adding Maven target &lt;code&gt;verify&lt;/code&gt; should help there.&lt;/p&gt; &#xA;&lt;h3&gt;Other Build Systems&lt;/h3&gt; &#xA;&lt;p&gt;JMH project does not ship the build scripts for build systems other that Maven. But there are community-supported bindings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/melix/jmh-gradle-plugin&#34;&gt;Gradle JMH Plugin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ktoso/sbt-jmh&#34;&gt;Scala SBT JMH Plugin&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to build with an alternative build system, you may want to see the &lt;a href=&#34;https://github.com/openjdk/jmh/tree/master/jmh-ant-sample&#34;&gt;Ant sample&lt;/a&gt; which describes the steps to build JMH benchmark projects.&lt;/p&gt; &#xA;&lt;h2&gt;Support and Development&lt;/h2&gt; &#xA;&lt;h3&gt;Pre-Requisite Steps&lt;/h3&gt; &#xA;&lt;p&gt;Make sure you did this before publishing the benchmark, and/or requesting the JMH feature:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;JMH annotations Javadocs and Samples are essential reading.&lt;/strong&gt; Follow the &lt;a href=&#34;https://github.com/openjdk/jmh/tree/master/jmh-samples/src/main/java/org/openjdk/jmh/samples&#34;&gt;JMH Samples&lt;/a&gt; to get familiar with the API, use cases, culprits, and pitfalls in building the benchmarks and using JMH.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Your benchmarks should be peer-reviewed.&lt;/strong&gt; Do not assume that a nice harness will magically free you from considering benchmarking pitfalls. We only promise to make avoiding them easier, not avoiding them completely.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Make sure you tried these things before getting support:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Archetypes provide the golden build configuration.&lt;/strong&gt; Try to generate the clean JMH benchmark project and transplant the benchmark there. This is important to try when upgrading to the newer JMH versions, since the minute differences in the build configurations may attribute to the failures you are seeing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Current development code is usually leaner, meaner, and better.&lt;/strong&gt; Make sure you are running the latest JMH version, and/or try to run with bleeding edge JMH to see if the issue is already fixed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;See if your question/issue was discussed already.&lt;/strong&gt; Look around mailing list archives to see if there is already an answer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If all these did not help, you are welcome to report the issue.&lt;/p&gt; &#xA;&lt;h3&gt;Reporting Harness and Test Bugs&lt;/h3&gt; &#xA;&lt;p&gt;If you have the access to &lt;a href=&#34;https://bugs.openjdk.org/browse/CODETOOLS-7902762?jql=project%20%3D%20CODETOOLS%20AND%20resolution%20%3D%20Unresolved%20AND%20component%20%3D%20tools%20AND%20Subcomponent%20%3D%20jmh&#34;&gt;OpenJDK Bug System&lt;/a&gt;, please submit the bug there:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Project: CODETOOLS&lt;/li&gt; &#xA; &lt;li&gt;Component: tools&lt;/li&gt; &#xA; &lt;li&gt;Sub-component: jmh&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Alternatively, you can join the &lt;a href=&#34;https://mail.openjdk.org/mailman/listinfo/jmh-dev&#34;&gt;JMH Mailing List&lt;/a&gt; and report the bugs there.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;JMH project accepts pull requests, like other OpenJDK projects. If you have never contributed to OpenJDK before, then bots would require you to &lt;a href=&#34;http://openjdk.org/contribute&#34;&gt;sign OCA first&lt;/a&gt;. Normally, you don&#39;t need to post patches anywhere else, or post to mailing lists, etc. If you do want to have a wider discussion about JMH, please refer to &lt;a href=&#34;https://mail.openjdk.org/mailman/listinfo/jmh-dev&#34;&gt;jmh-dev&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Short instructions to build, test bleeding-edge JMH, and install its JAR to local Maven repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mvn clean install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you already have the benchmark project, then it is enough to change JMH dependencies version to the latest &lt;code&gt;SNAPSHOT&lt;/code&gt; version (look up the actual latest version in &lt;a href=&#34;https://github.com/openjdk/jmh/raw/master/pom.xml&#34;&gt;root &lt;code&gt;pom.xml&lt;/code&gt;&lt;/a&gt;). If not, create the JMH benchmark project and change the version there.&lt;/p&gt; &#xA;&lt;p&gt;GitHub workflow &#34;JMH Pre-Integration Tests&#34; should pass on the changes. It would be triggered for PRs. You can also trigger it manually for your branch.&lt;/p&gt; &#xA;&lt;h2&gt;Related projects&lt;/h2&gt; &#xA;&lt;p&gt;These projects are supported by community, not by OpenJDK/JMH developers.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/artyushov/idea-jmh-plugin&#34;&gt;IntelliJ IDEA JMH Plugin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/brianfromoregon/jmh-plugin&#34;&gt;Jenkins JMH Plugin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/presidentio/teamcity-plugin-jmh&#34;&gt;Teamcity JMH Plugin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jzillmann/jmh-visualizer&#34;&gt;Visualize JMH Benchmarks&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>