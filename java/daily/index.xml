<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-08T01:36:54Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>google/google-java-format</title>
    <updated>2023-08-08T01:36:54Z</updated>
    <id>tag:github.com,2023-08-08:/google/google-java-format</id>
    <link href="https://github.com/google/google-java-format" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Reformats Java source code to comply with Google Java Style.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;google-java-format&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;google-java-format&lt;/code&gt; is a program that reformats Java source code to comply with &lt;a href=&#34;https://google.github.io/styleguide/javaguide.html&#34;&gt;Google Java Style&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Using the formatter&lt;/h2&gt; &#xA;&lt;h3&gt;from the command-line&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/google/google-java-format/releases&#34;&gt;Download the formatter&lt;/a&gt; and run it with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;java -jar /path/to/google-java-format-${GJF_VERSION?}-all-deps.jar &amp;lt;options&amp;gt; [files...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The formatter can act on whole files, on limited lines (&lt;code&gt;--lines&lt;/code&gt;), on specific offsets (&lt;code&gt;--offset&lt;/code&gt;), passing through to standard-out (default) or altered in-place (&lt;code&gt;--replace&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;To reformat changed lines in a specific patch, use &lt;a href=&#34;https://github.com/google/google-java-format/raw/master/scripts/google-java-format-diff.py&#34;&gt;&lt;code&gt;google-java-format-diff.py&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/em&gt; &lt;em&gt;There is no configurability as to the formatter&#39;s algorithm for formatting. This is a deliberate design decision to unify our code formatting on a single format.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;IntelliJ, Android Studio, and other JetBrains IDEs&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://plugins.jetbrains.com/plugin/8527&#34;&gt;google-java-format IntelliJ plugin&lt;/a&gt; is available from the plugin repository. To install it, go to your IDE&#39;s settings and select the &lt;code&gt;Plugins&lt;/code&gt; category. Click the &lt;code&gt;Marketplace&lt;/code&gt; tab, search for the &lt;code&gt;google-java-format&lt;/code&gt; plugin, and click the &lt;code&gt;Install&lt;/code&gt; button.&lt;/p&gt; &#xA;&lt;p&gt;The plugin will be disabled by default. To enable it in the current project, go to &lt;code&gt;File→Settings...→google-java-format Settings&lt;/code&gt; (or &lt;code&gt;IntelliJ IDEA→Preferences...→Other Settings→google-java-format Settings&lt;/code&gt; on macOS) and check the &lt;code&gt;Enable google-java-format&lt;/code&gt; checkbox. (A notification will be presented when you first open a project offering to do this for you.)&lt;/p&gt; &#xA;&lt;p&gt;To enable it by default in new projects, use &lt;code&gt;File→Other Settings→Default Settings...&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When enabled, it will replace the normal &lt;code&gt;Reformat Code&lt;/code&gt; and &lt;code&gt;Optimize Imports&lt;/code&gt; actions.&lt;/p&gt; &#xA;&lt;h4&gt;IntelliJ JRE Config&lt;/h4&gt; &#xA;&lt;p&gt;The google-java-format plugin uses some internal classes that aren&#39;t available without extra configuration. To use the plugin, go to &lt;code&gt;Help→Edit Custom VM Options...&lt;/code&gt; and paste in these lines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED&#xA;--add-exports=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED&#xA;--add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED&#xA;--add-exports=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED&#xA;--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED&#xA;--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you&#39;ve done that, restart the IDE.&lt;/p&gt; &#xA;&lt;h3&gt;Eclipse&lt;/h3&gt; &#xA;&lt;p&gt;The latest version of the &lt;code&gt;google-java-format&lt;/code&gt; Eclipse plugin can be downloaded from the &lt;a href=&#34;https://github.com/google/google-java-format/releases&#34;&gt;releases page&lt;/a&gt;. Drop it into the Eclipse &lt;a href=&#34;http://help.eclipse.org/neon/index.jsp?topic=%2Forg.eclipse.platform.doc.isv%2Freference%2Fmisc%2Fp2_dropins_format.html&#34;&gt;drop-ins folder&lt;/a&gt; to activate the plugin.&lt;/p&gt; &#xA;&lt;p&gt;The plugin adds a &lt;code&gt;google-java-format&lt;/code&gt; formatter implementation that can be configured in &lt;code&gt;Window &amp;gt; Preferences &amp;gt; Java &amp;gt; Code Style &amp;gt; Formatter &amp;gt; Formatter Implementation&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Third-party integrations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Gradle plugins &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/diffplug/spotless/tree/main/plugin-gradle#google-java-format&#34;&gt;spotless&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/sherter/google-java-format-gradle-plugin&#34;&gt;sherter/google-java-format-gradle-plugin&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Apache Maven plugins &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/diffplug/spotless/tree/main/plugin-maven#google-java-format&#34;&gt;spotless&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/spotify/fmt-maven-plugin&#34;&gt;spotify/fmt-maven-plugin&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/talios/googleformatter-maven-plugin&#34;&gt;talios/googleformatter-maven-plugin&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Cosium/maven-git-code-format&#34;&gt;Cosium/maven-git-code-format&lt;/a&gt;: A maven plugin that automatically deploys google-java-format as a pre-commit git hook.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;SBT plugins &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/sbt/sbt-java-formatter&#34;&gt;sbt/sbt-java-formatter&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/features/actions&#34;&gt;Github Actions&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/axel-op/googlejavaformat-action&#34;&gt;googlejavaformat-action&lt;/a&gt;: Automatically format your Java files when you push on github&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;as a library&lt;/h3&gt; &#xA;&lt;p&gt;The formatter can be used in software which generates java to output more legible java code. Just include the library in your maven/gradle/etc. configuration.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;google-java-format&lt;/code&gt; uses internal javac APIs for parsing Java source. The following JVM flags are required when running on JDK 16 and newer, due to &lt;a href=&#34;https://openjdk.java.net/jeps/396&#34;&gt;JEP 396: Strongly Encapsulate JDK Internals by Default&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED&#xA;--add-exports=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED&#xA;--add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED&#xA;--add-exports=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED&#xA;--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED&#xA;--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Maven&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;  &amp;lt;groupId&amp;gt;com.google.googlejavaformat&amp;lt;/groupId&amp;gt;&#xA;  &amp;lt;artifactId&amp;gt;google-java-format&amp;lt;/artifactId&amp;gt;&#xA;  &amp;lt;version&amp;gt;${google-java-format.version}&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Gradle&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;dependencies {&#xA;  implementation &#39;com.google.googlejavaformat:google-java-format:$googleJavaFormatVersion&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then use the formatter through the &lt;code&gt;formatSource&lt;/code&gt; methods. E.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String formattedSource = new Formatter().formatSource(sourceString);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;CharSource source = ...&#xA;CharSink output = ...&#xA;new Formatter().formatSource(source, output);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your starting point should be the instance methods of &lt;code&gt;com.google.googlejavaformat.java.Formatter&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building from source&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;mvn install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/google/google-java-format/master/CONTRIBUTING.md&#34;&gt;the contributors guide&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Copyright 2015 Google Inc.&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;); you may not&#xA;use this file except in compliance with the License. You may obtain a copy of&#xA;the License at&#xA;&#xA;    http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS, WITHOUT&#xA;WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the&#xA;License for the specific language governing permissions and limitations under&#xA;the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>amuthansakthivel/TheOneFramework</title>
    <updated>2023-08-08T01:36:54Z</updated>
    <id>tag:github.com,2023-08-08:/amuthansakthivel/TheOneFramework</id>
    <link href="https://github.com/amuthansakthivel/TheOneFramework" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Web, Mobile and Api Automation using Selenide, Rest Assured, Junit5 and Allure&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://sonarcloud.io/summary/new_code?id=amuthansakthivel_theoneframework&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/images/project_badges/sonarcloud-orange.svg?sanitize=true&#34; alt=&#34;SonarCloud&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Selenide + Rest Assured + Junit5 + Allure for Web, Mobile,and Api Automation&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;One single framework to automate web, mobile and api.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Preferred Java Version : JDK-11&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Libraries Used&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/selenide/selenide&#34;&gt;Selenide for web and mobile automation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rest-assured/rest-assured&#34;&gt;Rest Assured for Api automation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://junit.org/junit5/&#34;&gt;Junit5 as testing framework&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.qameta.io/allure/&#34;&gt;Allure for reporting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/matteobaccan/owner&#34;&gt;Owner for properties file management&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/projectlombok/lombok&#34;&gt;Lombok to avoid boilerplates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mtedone.github.io/podam/usage.html&#34;&gt;PODAM for test data generation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DiUS/java-faker&#34;&gt;Java Faker for random data&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://assertj.github.io/doc/&#34;&gt;AssertJ for fluent assertion of Api&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Video tutorials&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=5vrYMfsxkGY&amp;amp;list=PL9ok7C7Yn9A9YyRISFrxHdaxb5qqrxp_i&#34;&gt;Selenide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=fvATui0vptM&amp;amp;list=PL9ok7C7Yn9A-zVNGOdON0vYGevPD9nVwy&#34;&gt;Selenide-Appium&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=aMkFmtqRUbE&amp;amp;list=PL9ok7C7Yn9A-JaUtcMwevO_FfbFNRYLfU&#34;&gt;Rest-Assured&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=VpsnP9-jMNc&amp;amp;list=PL9ok7C7Yn9A_JtAB1-ZmrO7ugRq0rP83q&#34;&gt;SDET Essentials playlist&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Sample Web Test&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@SmokeTest&#xA;class AddEmployeeTest extends WebTestSetup {&#xA;&#xA;  private final EmployeeDetails employeeDetails = EmployeeTestData.getRandomEmployeeDetails();&#xA;  private final LoginDetails loginDetails = LoginTestData.getValidLoginDetails();&#xA;&#xA;  @WebTest&#xA;  void testAddEmployee() {&#xA;    LoginPage.getInstance()&#xA;        .loginToApplication(loginDetails)&#xA;        .navigateToEmployeeInformationPage()&#xA;        .addNewEmployee(employeeDetails)&#xA;        .checkWhetherEmployeeCreatedSuccessfully();&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Sample Mobile Test&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@RegressionTest&#xA;class AddToCartTest extends MobileTestSetup {&#xA;&#xA;    @MobileTest&#xA;    void addAProductToCart() {&#xA;        ProductDetailsScreen productDetailsScreen = screen(ProductDetailsScreen.class);&#xA;        productDetailsScreen&#xA;                .selectProduct()&#xA;                .checkWhetherAddToCartButtonIsPresent();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Sample Api Test&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@RegressionTest&#xA;class CreateUserTest extends ApiTestSetUp {&#xA;&#xA;    private final UserDetails userDetails = UserTestData.getUserDetails();&#xA;&#xA;    @ApiTest&#xA;    void createUser() {&#xA;        Response response = CreateUserApi.createUser(userDetails);&#xA;&#xA;        assertThat(response)&#xA;                .statusCodeIs(201)&#xA;                .canBeDeserializedTo(CreateUserResponse.class)&#xA;                .hasKeyWithValue(&#34;job&#34;, userDetails.getJob())&#xA;                .andMatchingRule(e-&amp;gt; e.jsonPath().getString(&#34;name&#34;).equalsIgnoreCase(userDetails.getName()))&#xA;                .matchesSchemaInFile(&#34;create-user-response-schema.json&#34;)&#xA;                .assertAll(); //don&#39;t forget to call assertAll&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;To run web tests:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;mvn clean test -Dgroups=web -Dselenide.browser=chrome&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;mvn clean test -Dgroups=web -Dselenide.browser=firefox&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;To run mobile tests:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Local-Android | &lt;code&gt;mvn clean test -Dgroups=mobile -Dselenide.browser=com.tmb.provider.mobile.local.AndroidAppProvider&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Local-Ios | &lt;code&gt;mvn clean test -Dgroups=mobile -Dselenide.browser=com.tmb.provider.mobile.local.IosAppProvider&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Lambda-Test-Android | &lt;code&gt;mvn clean test -Dgroups=mobile -Dselenide.browser=com.tmb.provider.mobile.remote.LambdaTestAndroidAppProvider&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;To run api tests:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;API - &lt;code&gt;mvn clean test -Dgroups=api&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;To generate allure report after execution&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Install Allure in the machine - &lt;code&gt;brew install allure&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Open allure reports - &lt;code&gt;allure serve ./target/allure-results&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SpigotMC/BungeeCord</title>
    <updated>2023-08-08T01:36:54Z</updated>
    <id>tag:github.com,2023-08-08:/SpigotMC/BungeeCord</id>
    <link href="https://github.com/SpigotMC/BungeeCord" rel="alternate"></link>
    <summary type="html">&lt;p&gt;BungeeCord, the 6th in a generation of server portal suites. Efficiently proxies and maintains connections and transport between multiple Minecraft servers.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;BungeeCord&lt;/h1&gt; &#xA;&lt;h2&gt;Layer 7 proxy designed to link Minecraft servers.&lt;/h2&gt; &#xA;&lt;p&gt;BungeeCord is a sophisticated proxy and API designed mainly to teleport players between multiple Minecraft servers. It is the latest incarnation of similar software written by the author from 2011-present.&lt;/p&gt; &#xA;&lt;h2&gt;Information&lt;/h2&gt; &#xA;&lt;p&gt;BungeeCord is maintained by &lt;a href=&#34;https://www.spigotmc.org/&#34;&gt;SpigotMC&lt;/a&gt; and has its own &lt;a href=&#34;https://www.spigotmc.org/go/bungeecord&#34;&gt;discussion thread&lt;/a&gt; with plenty of helpful information and links.&lt;/p&gt; &#xA;&lt;h3&gt;Security warning&lt;/h3&gt; &#xA;&lt;p&gt;As your Minecraft servers have to run without authentication (online-mode=false) for BungeeCord to work, this poses a new security risk. Users may connect to your servers directly, under any username they wish to use. The kick &#34;If you wish to use IP forwarding, please enable it in your BungeeCord config as well!&#34; does not protect your Spigot servers.&lt;/p&gt; &#xA;&lt;p&gt;To combat this, you need to restrict access to these servers for example with a firewall (please see &lt;a href=&#34;https://www.spigotmc.org/wiki/firewall-guide/&#34;&gt;firewall guide&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Source&lt;/h2&gt; &#xA;&lt;p&gt;Source code is currently available on &lt;a href=&#34;https://www.spigotmc.org/go/bungeecord-git&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Binaries&lt;/h2&gt; &#xA;&lt;p&gt;Precompiled binaries are available for end users on &lt;a href=&#34;https://www.spigotmc.org/go/bungeecord-dl&#34;&gt;Jenkins&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;(c) 2012-2023 SpigotMC Pty. Ltd.&lt;/p&gt;</summary>
  </entry>
</feed>