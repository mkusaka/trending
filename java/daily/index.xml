<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-22T01:31:39Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>TGX-Android/Telegram-X</title>
    <updated>2022-06-22T01:31:39Z</updated>
    <id>tag:github.com,2022-06-22:/TGX-Android/Telegram-X</id>
    <link href="https://github.com/TGX-Android/Telegram-X" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The main repository of Telegram X — official alternative Telegram client for Android. Check out the $25,000 contest in the pinned issue.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=org.thunderdog.challegram&#34;&gt;Telegram X&lt;/a&gt; — a slick experimental Telegram client based on &lt;a href=&#34;https://core.telegram.org/tdlib&#34;&gt;TDLib&lt;/a&gt;.&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TGX-Android/Telegram-X/main/images/feature.png&#34; alt=&#34;Telegram X&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is the complete source code and the build instructions for the official alternative Android client for the Telegram messenger, based on the &lt;a href=&#34;https://core.telegram.org/api&#34;&gt;Telegram API&lt;/a&gt; and the &lt;a href=&#34;https://core.telegram.org/mtproto&#34;&gt;MTProto&lt;/a&gt; secure protocol via &lt;a href=&#34;https://github.com/TGX-Android/tdlib&#34;&gt;TDLib&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://play.google.com/store/apps/details?id=org.thunderdog.challegram&#34;&gt;&lt;strong&gt;Telegram X&lt;/strong&gt; on Google Play&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://play.google.com/apps/testing/org.thunderdog.challegram&#34;&gt;Subscribe to Beta&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://t.me/tgx_log&#34;&gt;APKs and Build Info&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://t.me/tgx_bot&#34;&gt;Bot to verify APK hash&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build instructions&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;At least &lt;strong&gt;5,34GB&lt;/strong&gt; of free disk space: &lt;strong&gt;487,10MB&lt;/strong&gt; for source codes and around &lt;strong&gt;4,85GB&lt;/strong&gt; for files generated after building all variants&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;4GB&lt;/strong&gt; of RAM&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;macOS&lt;/strong&gt; or &lt;strong&gt;Linux&lt;/strong&gt;-based operating system. &lt;strong&gt;Windows&lt;/strong&gt; platform is not yet supported in &lt;a href=&#34;https://raw.githubusercontent.com/TGX-Android/Telegram-X/main/scripts&#34;&gt;scripts&lt;/a&gt; that build native dependencies, however, it might be easy to patch them in order to make it work.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;macOS&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;git with LFS, wget and sed: &lt;code&gt;$ brew install git git-lfs wget gsed &amp;amp;&amp;amp; git lfs install&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Ubuntu&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;git with LFS: &lt;code&gt;# apt install git git-lfs&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;$ git lfs install&lt;/code&gt; for the current user, if you didn&#39;t have &lt;code&gt;git-lfs&lt;/code&gt; previously installed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;$ git clone --recursive --depth=1 --shallow-submodules https://github.com/TGX-Android/Telegram-X tgx&lt;/code&gt; — clone &lt;strong&gt;Telegram X&lt;/strong&gt; with submodules&lt;/li&gt; &#xA; &lt;li&gt;In case you forgot the &lt;code&gt;--recursive&lt;/code&gt; flag, &lt;code&gt;cd&lt;/code&gt; into &lt;code&gt;tgx&lt;/code&gt; directory and: &lt;code&gt;$ git submodule init &amp;amp;&amp;amp; git submodule update --init --recursive --depth=1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create &lt;code&gt;keystore.properties&lt;/code&gt; file outside of source tree with the following properties:&lt;br&gt;&lt;code&gt;keystore.file&lt;/code&gt;: absolute path to the keystore file&lt;br&gt;&lt;code&gt;keystore.password&lt;/code&gt;: password for the keystore&lt;br&gt;&lt;code&gt;key.alias&lt;/code&gt;: key alias that will be used to sign the app&lt;br&gt;&lt;code&gt;key.password&lt;/code&gt;: key password.&lt;br&gt;&lt;strong&gt;Warning&lt;/strong&gt;: keep this file safe and make sure nobody, except you, has access to it. For production builds one could use a separate user with home folder encryption to avoid harm from physical theft&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$ cd tgx&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;$ scripts/./setup.sh&lt;/code&gt; and follow up the instructions&lt;/li&gt; &#xA; &lt;li&gt;If you specified package name that&#39;s different from the one Telegram X uses, &lt;a href=&#34;https://firebase.google.com/docs/android/setup&#34;&gt;setup Firebase&lt;/a&gt; and replace &lt;code&gt;google-services.json&lt;/code&gt; with the one that&#39;s suitable for the &lt;code&gt;app.id&lt;/code&gt; you need&lt;/li&gt; &#xA; &lt;li&gt;Now you can open the project using &lt;strong&gt;&lt;a href=&#34;https://developer.android.com/studio/&#34;&gt;Android Studio&lt;/a&gt;&lt;/strong&gt; or build manually from the command line: &lt;code&gt;./gradlew assembleUniversalRelease&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Available flavors&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;arm64&lt;/code&gt;: &lt;strong&gt;arm64-v8a&lt;/strong&gt; build with &lt;code&gt;minSdkVersion&lt;/code&gt; set to &lt;code&gt;21&lt;/code&gt; (&lt;strong&gt;Lollipop&lt;/strong&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;arm32&lt;/code&gt;: &lt;strong&gt;armeabi-v7a&lt;/strong&gt; build&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;x64&lt;/code&gt;: &lt;strong&gt;x86_64&lt;/strong&gt; build with &lt;code&gt;minSdkVersion&lt;/code&gt; set to &lt;code&gt;21&lt;/code&gt; (&lt;strong&gt;Lollipop&lt;/strong&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;x86&lt;/code&gt;: &lt;strong&gt;x86&lt;/strong&gt; build&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;universal&lt;/code&gt;: universal build that includes native bundles for all platforms.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reproducing public builds&lt;/h2&gt; &#xA;&lt;p&gt;In order to verify that there is no additional source code injected inside official APKs, you must use &lt;strong&gt;Ubuntu 21.04&lt;/strong&gt; and comply with the following requirements:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create user called &lt;code&gt;vk&lt;/code&gt; with the home directory located at &lt;code&gt;/home/vk&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clone &lt;code&gt;tgx&lt;/code&gt; repository to &lt;code&gt;/home/vk/tgx&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Check out the specific commit you want to verify&lt;/li&gt; &#xA; &lt;li&gt;In rare cases of builds that include unmerged pull requests, you must follow actions performed by &lt;a href=&#34;https://github.com/TGX-Android/Publisher/raw/main/main.js&#34;&gt;Publisher&#39;s&lt;/a&gt; &lt;code&gt;fetchPr&lt;/code&gt; and &lt;code&gt;squashPr&lt;/code&gt; tasks&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd&lt;/code&gt; into &lt;code&gt;tgx&lt;/code&gt; folder and install dependencies: &lt;code&gt;# apt install $(cat reproducible-builds/dependencies.txt)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Follow up the build instruction from the previous section&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;$ apkanalyzer apk compare --different-only &amp;lt;remote-apk&amp;gt; &amp;lt;reproduced-apk&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;If only signature files and metadata differ, build reproduction is successful.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;In future build reproduction might become easier. Here&#39;s a list of related PR-welcome TODOs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Project path must not affect the resulting &lt;code&gt;.so&lt;/code&gt; files, so user &amp;amp; project location requirement could be removed&lt;/li&gt; &#xA; &lt;li&gt;When building native binaries on &lt;strong&gt;macOS&lt;/strong&gt;, &lt;code&gt;.comment&lt;/code&gt; ELF section differs from the one built with &lt;strong&gt;Linux&lt;/strong&gt; version of NDK. It must be removed or made deterministic without any side-effects like breaking &lt;code&gt;native-debug-symbols.zip&lt;/code&gt; (or should be reported to NDK team?)&lt;/li&gt; &#xA; &lt;li&gt;It might be a good idea to use &lt;code&gt;--build-id=0x&amp;lt;commit&amp;gt;&lt;/code&gt; instead of &lt;code&gt;--build-id=none&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Checksums of cold APK builds always differ, even though the same keystore applied and generated inner APK contents do not differ. Real cause must be investigated and fixed, if possible.&lt;br&gt;To generate cold build, invoke &lt;code&gt;$ scripts/./reset.sh&lt;/code&gt; and &lt;code&gt;$ scripts/./setup.sh --skip-sdk-setup&lt;/code&gt;.&lt;br&gt;&lt;strong&gt;Warning&lt;/strong&gt;: this will also reset changes inside some of the submodules (&lt;a href=&#34;https://raw.githubusercontent.com/TGX-Android/Telegram-X/main/app/jni/thirdparty/ffmpeg&#34;&gt;ffmpeg&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/TGX-Android/Telegram-X/main/app/jni/thirdparty/libvpx&#34;&gt;libvpx&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/TGX-Android/Telegram-X/main/app/jni/thirdparty/webp&#34;&gt;webp&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/TGX-Android/Telegram-X/main/app/jni/thirdparty/opus&#34;&gt;opus&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/TGX-Android/Telegram-X/main/app/jni/thirdparty/exoplayer&#34;&gt;ExoPlayer&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Move local pull requests squash-merging from &lt;a href=&#34;https://github.com/TGX-Android/Publisher&#34;&gt;Publisher&lt;/a&gt; to some script inside this repository to make reproduction of builds that include them easier.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;i&gt;PS: &lt;a href=&#34;https://www.docker.com&#34;&gt;Docker&lt;/a&gt; is not considered an option, as it just hides away these tasks, and requires that all published APKs must be built using it.&lt;/i&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Verifying side-loaded APKs&lt;/h2&gt; &#xA;&lt;p&gt;If you downloaded &lt;strong&gt;Telegram X&lt;/strong&gt; APK from somewhere and would like to simply verify whether it&#39;s an original APK without any injected malicious source code, you need to get checksum (&lt;code&gt;SHA-256&lt;/code&gt;, &lt;code&gt;SHA-1&lt;/code&gt; or &lt;code&gt;MD5&lt;/code&gt;) of the downloaded APK file and find whether it corresponds to any known &lt;strong&gt;Telegram X&lt;/strong&gt; version.&lt;/p&gt; &#xA;&lt;p&gt;In order to obtain &lt;strong&gt;SHA-256&lt;/strong&gt; of the APK:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;$ sha256sum &amp;lt;path-to-apk&amp;gt;&lt;/code&gt; on &lt;strong&gt;Ubuntu&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$ shasum -a 256 &amp;lt;path-to-apk&amp;gt;&lt;/code&gt; on &lt;strong&gt;macOS&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once obtained, there are three ways to find out the commit for the specific checksum:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sending checksum to &lt;a href=&#34;https://t.me/tgx_bot&#34;&gt;&lt;code&gt;@tgx_bot&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Searching for a checksum in &lt;a href=&#34;https://t.me/tgx_log&#34;&gt;&lt;code&gt;@tgx_log&lt;/code&gt;&lt;/a&gt;. You can do so without need in installing any Telegram client by using this URL format: &lt;a href=&#34;https://t.me/s/tgx_log?q=c541ebb0a3ae7bb6e6bd155530f375d567b8aef1761fdd942fb5d69af62e24ae&#34;&gt;&lt;code&gt;https://t.me/s/tgx_log?q={checksum}&lt;/code&gt;&lt;/a&gt; (click to see in action). Note: unpublished builds cannot be verified this way.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Telegram X&lt;/code&gt; is licensed under the terms of the GNU General Public License v3.0.&lt;/p&gt; &#xA;&lt;p&gt;For more information, see &lt;a href=&#34;https://raw.githubusercontent.com/TGX-Android/Telegram-X/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;License of components and third-party dependencies it relies on might differ, check &lt;code&gt;LICENSE&lt;/code&gt; file in the corresponding folder.&lt;/p&gt; &#xA;&lt;h3&gt;Third-party dependencies&lt;/h3&gt; &#xA;&lt;p&gt;List of third-party components used in &lt;strong&gt;Telegram X&lt;/strong&gt; can be found &lt;a href=&#34;https://raw.githubusercontent.com/TGX-Android/Telegram-X/main/docs/THIRDPARTY.md&#34;&gt;here&lt;/a&gt;. Additionally you can check the specific commit of the third-party component used, for example, &lt;a href=&#34;https://raw.githubusercontent.com/TGX-Android/Telegram-X/main/app/jni/thirdparty&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/TGX-Android/Telegram-X/main/thirdparty&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Telegram X&lt;/strong&gt; welcomes contributions. Check out &lt;a href=&#34;https://raw.githubusercontent.com/TGX-Android/Telegram-X/main/docs/PULL_REQUEST_TEMPLATE.md&#34;&gt;pull request template&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/TGX-Android/Telegram-X/main/docs/GUIDE.md&#34;&gt;guide for contributors&lt;/a&gt; to learn more about Telegram X internals before creating the first pull request.&lt;/p&gt; &#xA;&lt;p&gt;If you are a regular user and experience a problem with Telegram X, the best place to look for solution is &lt;a href=&#34;https://t.me/tgandroidtests&#34;&gt;Telegram X chat&lt;/a&gt; — a community with over 4 thousand members. Please do not use this repository to ask questions: if you have general issue with Telegram, refer to &lt;a href=&#34;http://telegram.org/faq&#34;&gt;FAQ&lt;/a&gt; or contact &lt;a href=&#34;https://telegram.org/faq#telegram-support&#34;&gt;Telegram Support&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>apache/nifi</title>
    <updated>2022-06-22T01:31:39Z</updated>
    <id>tag:github.com,2022-06-22:/apache/nifi</id>
    <link href="https://github.com/apache/nifi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Apache NiFi&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://nifi.apache.org/&#34;&gt;&lt;img src=&#34;https://nifi.apache.org/assets/images/apache-nifi-logo.svg?sanitize=true&#34; width=&#34;300&#34; height=&#34;126&#34; alt=&#34;Apache NiFi&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apache/nifi/actions/workflows/ci-workflow.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/nifi/workflows/ci-workflow/badge.svg?sanitize=true&#34; alt=&#34;ci-workflow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/nifi/actions/workflows/system-tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/nifi/workflows/system-tests/badge.svg?sanitize=true&#34; alt=&#34;system-tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/apache/nifi/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/apache/nifi.svg?sanitize=true&#34; alt=&#34;Docker pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://nifi.apache.org/download.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/org.apache.nifi/nifi-utils.svg?sanitize=true&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://s.apache.org/nifi-community-slack&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-on%20Slack-brightgreen.svg?sanitize=true&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nifi.apache.org/&#34;&gt;Apache NiFi&lt;/a&gt; is an easy to use, powerful, and reliable system to process and distribute data.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/nifi/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/nifi/main/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/nifi/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/nifi/main/#minifi-subproject&#34;&gt;MiNiFi subproject&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/nifi/main/#registry-subproject&#34;&gt;Registry subproject&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/nifi/main/#getting-help&#34;&gt;Getting Help&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/nifi/main/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/nifi/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/nifi/main/#export-control&#34;&gt;Export Control&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Apache NiFi was made for dataflow. It supports highly configurable directed graphs of data routing, transformation, and system mediation logic. Some of its key features include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Web-based user interface &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Seamless experience for design, control, and monitoring&lt;/li&gt; &#xA;   &lt;li&gt;Multi-tenant user experience&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Highly configurable &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Loss tolerant vs guaranteed delivery&lt;/li&gt; &#xA;   &lt;li&gt;Low latency vs high throughput&lt;/li&gt; &#xA;   &lt;li&gt;Dynamic prioritization&lt;/li&gt; &#xA;   &lt;li&gt;Flows can be modified at runtime&lt;/li&gt; &#xA;   &lt;li&gt;Back pressure&lt;/li&gt; &#xA;   &lt;li&gt;Scales up to leverage full machine capability&lt;/li&gt; &#xA;   &lt;li&gt;Scales out with zero-leader clustering model&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Data Provenance &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Track dataflow from beginning to end&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Designed for extension &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Build your own processors and more&lt;/li&gt; &#xA;   &lt;li&gt;Enables rapid development and effective testing&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Secure &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;SSL, SSH, HTTPS, encrypted content, etc...&lt;/li&gt; &#xA;   &lt;li&gt;Pluggable fine-grained role-based authentication/authorization&lt;/li&gt; &#xA;   &lt;li&gt;Multiple teams can manage and share specific portions of the flow&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Minimum Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JDK 8 Update 251&lt;/li&gt; &#xA; &lt;li&gt;Apache Maven 3.6.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Read through the &lt;a href=&#34;https://nifi.apache.org/quickstart.html&#34;&gt;quickstart guide for development&lt;/a&gt;. It will include information on getting a local copy of the source, give pointers on issue tracking, and provide some warnings about common problems with development environments.&lt;/p&gt; &#xA;&lt;p&gt;For a more comprehensive guide to development and information about contributing to the project read through the &lt;a href=&#34;https://nifi.apache.org/developer-guide.html&#34;&gt;NiFi Developer&#39;s Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;p&gt;Run &lt;code&gt;mvn clean install&lt;/code&gt; or for parallel build execute &lt;code&gt;mvn -T 2.0C clean install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The parallel build should take around fifteen minutes on modern hardware.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;laptop:nifi myuser$ mvn -T 2.0C clean install&#xA;[INFO] Scanning for projects...&#xA;[INFO] Inspecting build with total of 115 modules...&#xA;    ...tens of thousands of lines elided...&#xA;[INFO] ------------------------------------------------------------------------&#xA;[INFO] BUILD SUCCESS&#xA;[INFO] ------------------------------------------------------------------------&#xA;[INFO] Total time: 09:24 min (Wall Clock)&#xA;[INFO] Finished at: 2015-04-30T00:30:36-05:00&#xA;[INFO] Final Memory: 173M/1359M&#xA;[INFO] ------------------------------------------------------------------------&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;mvn clean install -DskipTests&lt;/code&gt; to skip unit test execution.&lt;/p&gt; &#xA;&lt;h3&gt;Deploying&lt;/h3&gt; &#xA;&lt;p&gt;Change directories to &lt;code&gt;nifi-assembly&lt;/code&gt;. The &lt;code&gt;target&lt;/code&gt; directory contains binary archives.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;laptop:nifi myuser$ cd nifi-assembly&#xA;laptop:nifi-assembly myuser$ ls -lhd target/nifi*&#xA;drwxr-xr-x  3 myuser  mygroup   102B Apr 30 00:29 target/nifi-1.0.0-SNAPSHOT-bin&#xA;-rw-r--r--  1 myuser  mygroup   144M Apr 30 00:30 target/nifi-1.0.0-SNAPSHOT-bin.tar.gz&#xA;-rw-r--r--  1 myuser  mygroup   144M Apr 30 00:30 target/nifi-1.0.0-SNAPSHOT-bin.zip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Copy the &lt;code&gt;nifi-VERSION-bin.tar.gz&lt;/code&gt; or &lt;code&gt;nifi-VERSION-bin.zip&lt;/code&gt; to a separate deployment directory. Extracting the distribution will create a new directory named for the version.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;laptop:nifi-assembly myuser$ mkdir ~/example-nifi-deploy&#xA;laptop:nifi-assembly myuser$ tar xzf target/nifi-*-bin.tar.gz -C ~/example-nifi-deploy&#xA;laptop:nifi-assembly myuser$ ls -lh ~/example-nifi-deploy/&#xA;total 0&#xA;drwxr-xr-x  10 myuser  mygroup   340B Apr 30 01:06 nifi-1.0.0-SNAPSHOT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Starting&lt;/h3&gt; &#xA;&lt;p&gt;Change directories to the deployment location and run the following command to start NiFi.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;laptop:~ myuser$ cd ~/example-nifi-deploy/nifi-*&#xA;laptop:nifi-1.0.0-SNAPSHOT myuser$ ./bin/nifi.sh start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running &lt;code&gt;bin/nifi.sh start&lt;/code&gt; starts NiFi in the background and exits. Use &lt;code&gt;--wait-for-init&lt;/code&gt; with an optional timeout in seconds to wait for a complete startup before exiting.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;laptop:nifi-1.0.0-SNAPSHOT myuser$ ./bin/nifi.sh start --wait-for-init 120&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Authenticating&lt;/h3&gt; &#xA;&lt;p&gt;The default configuration generates a random username and password on startup. NiFi writes the generated credentials to the application log located in &lt;code&gt;logs/nifi-app.log&lt;/code&gt; under the NiFi installation directory.&lt;/p&gt; &#xA;&lt;p&gt;The following command can be used to find the generated credentials on operating systems with &lt;code&gt;grep&lt;/code&gt; installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;laptop:nifi-1.0.0-SNAPSHOT myuser$ grep Generated logs/nifi-app*log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NiFi logs the generated credentials as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Generated Username [USERNAME]&#xA;Generated Password [PASSWORD]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;USERNAME&lt;/code&gt; will be a random UUID composed of 36 characters. The &lt;code&gt;PASSWORD&lt;/code&gt; will be a random string composed of 32 characters. The generated credentials will be stored in &lt;code&gt;conf/login-identity-providers.xml&lt;/code&gt; with the password stored using bcrypt hashing. Record these credentials in a secure location for access to NiFi.&lt;/p&gt; &#xA;&lt;p&gt;The random username and password can be replaced with custom credentials using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./bin/nifi.sh set-single-user-credentials &amp;lt;username&amp;gt; &amp;lt;password&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running&lt;/h3&gt; &#xA;&lt;p&gt;Open the following link in a web browser to access NiFi: &lt;a href=&#34;https://localhost:8443/nifi&#34;&gt;https://localhost:8443/nifi&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The web browser will display a warning message indicating a potential security risk due to the self-signed certificate NiFi generated during initialization. Accepting the potential security risk and continuing to load the interface is an option for initial development installations. Production deployments should provision a certificate from a trusted certificate authority and update the NiFi keystore and truststore configuration.&lt;/p&gt; &#xA;&lt;p&gt;Accessing NiFi after accepting the self-signed certificate will display the login screen. &lt;img src=&#34;https://raw.githubusercontent.com/apache/nifi/main/nifi-docs/src/main/asciidoc/images/nifi-login.png?raw=true&#34; alt=&#34;NiFi Login Screen&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Using the generated credentials, enter the generated username in the &lt;code&gt;User&lt;/code&gt; field and the generated password in the &lt;code&gt;Password&lt;/code&gt; field, then select &lt;code&gt;LOG IN&lt;/code&gt; to access the system. &lt;img src=&#34;https://raw.githubusercontent.com/apache/nifi/main/nifi-docs/src/main/asciidoc/images/nifi-flow-authenticated.png?raw=true&#34; alt=&#34;NiFi Flow Authenticated Screen&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Configuring&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://nifi.apache.org/docs/nifi-docs/html/user-guide.html&#34;&gt;NiFi User Guide&lt;/a&gt; describes how to build a data flow.&lt;/p&gt; &#xA;&lt;h3&gt;Stopping&lt;/h3&gt; &#xA;&lt;p&gt;Run the following command to stop NiFi:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;laptop:~ myuser$ cd ~/example-nifi-deploy/nifi-*&#xA;laptop:nifi-1.0.0-SNAPSHOT myuser$ ./bin/nifi.sh stop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;MiNiFi subproject&lt;/h2&gt; &#xA;&lt;p&gt;MiNiFi is a child project effort of Apache NiFi. It is a complementary data collection approach that supplements the core tenets of &lt;a href=&#34;https://nifi.apache.org/&#34;&gt;NiFi&lt;/a&gt; in dataflow management, focusing on the collection of data at the source of its creation.&lt;/p&gt; &#xA;&lt;p&gt;Specific goals for MiNiFi are comprised of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;small and lightweight footprint&lt;/li&gt; &#xA; &lt;li&gt;central management of agents&lt;/li&gt; &#xA; &lt;li&gt;generation of data provenance&lt;/li&gt; &#xA; &lt;li&gt;integration with NiFi for follow-on dataflow management and full chain of custody of information&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Perspectives of the role of MiNiFi should be from the perspective of the agent acting immediately at, or directly adjacent to, source sensors, systems, or servers.&lt;/p&gt; &#xA;&lt;p&gt;To run:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Change directory to &#39;minifi-assembly&#39;. In the target directory, there should be a build of minifi.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  $ cd minifi-assembly&#xA;  $ ls -lhd target/minifi*&#xA;  drwxr-xr-x  3 user  staff   102B Jul  6 13:07 minifi-1.14.0-SNAPSHOT-bin&#xA;  -rw-r--r--  1 user  staff    39M Jul  6 13:07 minifi-1.14.0-SNAPSHOT-bin.tar.gz&#xA;  -rw-r--r--  1 user  staff    39M Jul  6 13:07 minifi-1.14.0-SNAPSHOT-bin.zip&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For testing ongoing development you could use the already unpacked build present in the directory named &#34;minifi-&lt;em&gt;version&lt;/em&gt;-bin&#34;, where &lt;em&gt;version&lt;/em&gt; is the current project version. To deploy in another location make use of either the tarball or zipfile and unpack them wherever you like. The distribution will be within a common parent directory named for the version.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  $ mkdir ~/example-minifi-deploy&#xA;  $ tar xzf target/minifi-*-bin.tar.gz -C ~/example-minifi-deploy&#xA;  $ ls -lh ~/example-minifi-deploy/&#xA;  total 0&#xA;  drwxr-xr-x  10 user  staff   340B Jul 6 01:06 minifi-1.14.0-SNAPSHOT&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To run MiNiFi:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Change directory to the location where you installed MiNiFi and run it.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  $ cd ~/example-minifi-deploy/minifi-*&#xA;  $ ./bin/minifi.sh start&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;View the logs located in the logs folder $ tail -F ~/example-minifi-deploy/logs/minifi-app.log&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For help building your first data flow and sending data to a NiFi instance see the System Admin Guide located in the docs folder or making use of the minifi-toolkit, which aids in adapting NiFi templates to MiNiFi YAML configuration file format.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are testing ongoing development, you will likely want to stop your instance.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  $ cd ~/example-minifi-deploy/minifi-*&#xA;  $ ./bin/minifi.sh stop&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Docker Build&lt;/h3&gt; &#xA;&lt;p&gt;To build:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run a full NiFi build (see above for instructions). Then from the minifi/ subdirectory, execute &lt;code&gt;mvn -P docker clean install&lt;/code&gt;. This will run the full build, create a docker image based on it, and run docker-compose integration tests. After it completes successfully, you should have an apacheminifi:${minifi.version} image that can be started with the following command (replacing ${minifi.version} with the current maven version of your branch):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -d -v YOUR_CONFIG.YML:/opt/minifi/minifi-${minifi.version}/conf/config.yml apacheminifi:${minifi.version}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Registry subproject&lt;/h2&gt; &#xA;&lt;p&gt;Registry—a subproject of Apache NiFi—is a complementary application that provides a central location for storage and management of shared resources across one or more instances of NiFi and/or MiNiFi.&lt;/p&gt; &#xA;&lt;h3&gt;Getting Registry Started&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Build NiFi (see &lt;a href=&#34;https://raw.githubusercontent.com/apache/nifi/main/#getting-started&#34;&gt;Getting Started for NiFi&lt;/a&gt; )&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;p&gt;Build only the Registry subproject:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd nifi/nifi-registry&#xA;mvn clean install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you wish to enable style and license checks, specify the contrib-check profile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mvn clean install -Pcontrib-check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Start Registry&lt;/p&gt; &lt;p&gt;cd nifi-registry/nifi-registry-assembly/target/nifi-registry-&#xA;   &lt;version&gt;&#xA;    -bin/nifi-registry-&#xA;    &lt;version&gt;&#xA;     / ./bin/nifi-registry.sh start&#xA;    &lt;/version&gt;&#xA;   &lt;/version&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Note that the application web server can take a while to load before it is accessible.&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Accessing the application web UI&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;With the default settings, the application UI will be available at &lt;a href=&#34;http://localhost:18080/nifi-registry&#34;&gt;http://localhost:18080/nifi-registry&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Accessing the application REST API&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you wish to test against the application REST API, you can access the REST API directly. With the default settings, the base URL of the REST API will be at &lt;code&gt;http://localhost:18080/nifi-registry-api&lt;/code&gt;. A UI for testing the REST API will be available at &lt;a href=&#34;http://localhost:18080/nifi-registry-api/swagger/ui.html&#34;&gt;http://localhost:18080/nifi-registry-api/swagger/ui.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Accessing the application logs&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Logs will be available in &lt;code&gt;logs/nifi-registry-app.log&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Database Testing&lt;/h3&gt; &#xA;&lt;p&gt;In order to ensure that NiFi Registry works correctly against different relational databases, the existing integration tests can be run against different databases by leveraging the &lt;a href=&#34;https://www.testcontainers.org/&#34;&gt;Testcontainers framework&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Spring profiles are used to control the DataSource factory that will be made available to the Spring application context. DataSource factories are provided that use the Testcontainers framework to start a Docker container for a given database and create a corresponding DataSource. If no profile is specified then an H2 DataSource will be used by default and no Docker containers are required.&lt;/p&gt; &#xA;&lt;p&gt;Assuming Docker is running on the system where the build is running, then the following commands can be run:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Target Database&lt;/th&gt; &#xA;   &lt;th&gt;Build Command&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;All supported&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;mvn verify -Ptest-all-dbs&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;H2 (default)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;mvn verify&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MariaDB 10.3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;mvn verify -Pcontrib-check -Dspring.profiles.active=mariadb-10-3&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MySQL 8&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;mvn verify -Pcontrib-check -Dspring.profiles.active=mysql-8&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PostgreSQL 10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;mvn verify -Dspring.profiles.active=postgres-10&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For a full list of the available DataSource factories, consult the &lt;code&gt;nifi-registry-test&lt;/code&gt; module.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Help&lt;/h2&gt; &#xA;&lt;p&gt;If you have questions, you can reach out to our mailing list: &lt;a href=&#34;mailto:dev@nifi.apache.org&#34;&gt;dev@nifi.apache.org&lt;/a&gt; (&lt;a href=&#34;https://lists.apache.org/list.html?dev@nifi.apache.org&#34;&gt;archive&lt;/a&gt;). For more interactive discussions, community members can often be found in the following locations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Apache NiFi Slack Workspace: &lt;a href=&#34;https://apachenifi.slack.com/&#34;&gt;https://apachenifi.slack.com/&lt;/a&gt;&lt;/p&gt; &lt;p&gt;New users can join the workspace using the following &lt;a href=&#34;https://s.apache.org/nifi-community-slack&#34;&gt;invite link&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;IRC: #nifi on &lt;a href=&#34;https://webchat.freenode.net/?channels=#nifi&#34;&gt;irc.freenode.net&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To submit a feature request or bug report, please file a Jira at &lt;a href=&#34;https://issues.apache.org/jira/projects/NIFI/issues&#34;&gt;https://issues.apache.org/jira/projects/NIFI/issues&lt;/a&gt;. If this is a &lt;strong&gt;security vulnerability report&lt;/strong&gt;, please email &lt;a href=&#34;mailto:security@nifi.apache.org&#34;&gt;security@nifi.apache.org&lt;/a&gt; directly and review the &lt;a href=&#34;https://nifi.apache.org/security.html&#34;&gt;Apache NiFi Security Vulnerability Disclosure&lt;/a&gt; and &lt;a href=&#34;https://www.apache.org/security/committers.html&#34;&gt;Apache Software Foundation Security&lt;/a&gt; processes first.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://nifi.apache.org/&#34;&gt;https://nifi.apache.org/&lt;/a&gt; for the latest NiFi documentation.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://nifi.apache.org/minifi&#34;&gt;https://nifi.apache.org/minifi&lt;/a&gt; and &lt;a href=&#34;https://cwiki.apache.org/confluence/display/MINIFI&#34;&gt;https://cwiki.apache.org/confluence/display/MINIFI&lt;/a&gt; for the latest MiNiFi-specific documentation.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://nifi.apache.org/registry&#34;&gt;https://nifi.apache.org/registry&lt;/a&gt; for the latest Registry-specific documentation.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Except as otherwise noted this software is licensed under the &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;Apache License, Version 2.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;https://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;/p&gt; &#xA;&lt;h2&gt;Export Control&lt;/h2&gt; &#xA;&lt;p&gt;This distribution includes cryptographic software. The country in which you currently reside may have restrictions on the import, possession, use, and/or re-export to another country, of encryption software. BEFORE using any encryption software, please check your country&#39;s laws, regulations and policies concerning the import, possession, or use, and re-export of encryption software, to see if this is permitted. See &lt;a href=&#34;https://www.wassenaar.org/&#34;&gt;https://www.wassenaar.org/&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;The U.S. Government Department of Commerce, Bureau of Industry and Security (BIS), has classified this software as Export Commodity Control Number (ECCN) 5D002.C.1, which includes information security software using or performing cryptographic functions with asymmetric algorithms. The form and manner of this Apache Software Foundation distribution makes it eligible for export under the License Exception ENC Technology Software Unrestricted (TSU) exception (see the BIS Export Administration Regulations, Section 740.13) for both object code and source code.&lt;/p&gt; &#xA;&lt;p&gt;The following provides more details on the included cryptographic software:&lt;/p&gt; &#xA;&lt;p&gt;Apache NiFi uses BouncyCastle, JCraft Inc., and the built-in Java cryptography libraries for SSL, SSH, and the protection of sensitive configuration parameters. See&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bouncycastle.org/about.html&#34;&gt;https://bouncycastle.org/about.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.jcraft.com/c-info.html&#34;&gt;http://www.jcraft.com/c-info.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.oracle.com/corporate/security-practices/corporate/governance/global-trade-compliance.html&#34;&gt;https://www.oracle.com/corporate/security-practices/corporate/governance/global-trade-compliance.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;for more details on each of these libraries cryptography features.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Mr-xn/RedTeam_BlueTeam_HW</title>
    <updated>2022-06-22T01:31:39Z</updated>
    <id>tag:github.com,2022-06-22:/Mr-xn/RedTeam_BlueTeam_HW</id>
    <link href="https://github.com/Mr-xn/RedTeam_BlueTeam_HW" rel="alternate"></link>
    <summary type="html">&lt;p&gt;红蓝对抗以及护网相关工具和资料，内存shellcode（cs+msf）和内存马查杀工具&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RedTeam_BlueTeam_HW&lt;/h1&gt; &#xA;&lt;p&gt;红蓝对抗以及护网相关工具和资料&lt;/p&gt; &#xA;&lt;h3&gt;HW 相关文档和工具&lt;a href=&#34;https://raw.githubusercontent.com/Mr-xn/RedTeam_BlueTeam_HW/main/hw%E7%9B%B8%E5%85%B3%E9%A1%B9%E7%9B%AE.md&#34;&gt;点我&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;File 列表(&lt;code&gt;tree -N .&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;├── Blue_Tools&#xA;│&amp;nbsp;&amp;nbsp; ├── BlueTeam_ABC_123.jar&#xA;│&amp;nbsp;&amp;nbsp; ├── CobaltStrikeScan.exe&#xA;│&amp;nbsp;&amp;nbsp; ├── DuckMemoryScan.exe&#xA;│&amp;nbsp;&amp;nbsp; └── LiqunShield.7z&#xA;├── LICENSE&#xA;├── README.md&#xA;├── Red_Tools&#xA;│&amp;nbsp;&amp;nbsp; ├── LiqunKit 综合漏洞利用工具.7z&#xA;│&amp;nbsp;&amp;nbsp; ├── TPScan.jar&#xA;│&amp;nbsp;&amp;nbsp; ├── ThinkPHP.V2.3.by蓝鲸.jar&#xA;│&amp;nbsp;&amp;nbsp; ├── ThinkphpGUI-1.3-SNAPSHOT.jar&#xA;│&amp;nbsp;&amp;nbsp; ├── Windows&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── NoApiUser.exe&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── win.md&#xA;│&amp;nbsp;&amp;nbsp; ├── readme.md&#xA;│&amp;nbsp;&amp;nbsp; └── 图形化漏洞利用Demo-JavaFX版.7z&#xA;├── hostnamePot.jar&#xA;├── hw&#xA;│&amp;nbsp;&amp;nbsp; ├── 2020年9月安全监测报告「护网期间高危漏洞使用情况」.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── 2020护网中的漏洞.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── 2021HW参考_防守方经验总结.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── 2021HW行动红队作战手册.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── 2021实战攻防企业红蓝对抗实践指南-长亭.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── CTF-陇剑杯之内存分析-虚拟机内存取证.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── HW攻守思路3.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── HW多人运动溯源反制指北.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── HW弹药库之红队作战手册.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── Tomcat Filter类型内存马与查杀技术学习.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── mysql.Linux.zip&#xA;│&amp;nbsp;&amp;nbsp; ├── mysql.windows.zip&#xA;│&amp;nbsp;&amp;nbsp; ├── 微软sysmon使用总结.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── 【应急响应】windows入侵检查流程.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── 使用内存签名检测 Cobalt Strike.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── 红队视角下的防御体系构建.pdf&#xA;│&amp;nbsp;&amp;nbsp; └── 蓝队视角下的防御体系突破.pdf&#xA;├── hw相关项目.md&#xA;├── img&#xA;│&amp;nbsp;&amp;nbsp; └── 1.jpeg&#xA;├── main.md&#xA;├── script&#xA;│&amp;nbsp;&amp;nbsp; └── winSensorCheck.bat&#xA;└── security_wike.md&#xA;&#xA;6 directories, 37 files&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;另一个压缩包文件列表: HVV资料.7z&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;HVV资料&#xA;├── 1.自我排查&#xA;│&amp;nbsp;&amp;nbsp; ├── 安全加固-Linux安全加固手册.url&#xA;│&amp;nbsp;&amp;nbsp; ├── 安全加固-Windows安全加固手册.url&#xA;│&amp;nbsp;&amp;nbsp; ├── 安全加固-护网行动，2020年具体防护措施.url&#xA;│&amp;nbsp;&amp;nbsp; ├── 资产收集-安全护网前信息收集.url&#xA;│&amp;nbsp;&amp;nbsp; ├── 资产收集-全流程信息收集方法总结.url&#xA;│&amp;nbsp;&amp;nbsp; ├── 资产收集-企业安全做好这三点，护网没在怕的.url&#xA;│&amp;nbsp;&amp;nbsp; └── 企业做好这些，不怕HW.txt&#xA;├── 10.红队手册&#xA;│&amp;nbsp;&amp;nbsp; ├── HW弹药库之红队作战手册.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── 微软sysmon使用总结.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── 红队资料集锦.md&#xA;│&amp;nbsp;&amp;nbsp; ├── 使用内存签名检测 Cobalt Strike.pdf&#xA;│&amp;nbsp;&amp;nbsp; └── 红队研发从入门到精通之书籍推荐密码RedCore.7z&#xA;├── 2.安全运营&#xA;│&amp;nbsp;&amp;nbsp; ├── 安全运营-我理解的安全运营.url&#xA;│&amp;nbsp;&amp;nbsp; ├── 安全运营-从运营角度看安全团队的成长.url&#xA;│&amp;nbsp;&amp;nbsp; ├── 企业蓝军建设思考(甲方可参考,项目经理-安全顾问可参考).url&#xA;│&amp;nbsp;&amp;nbsp; ├── 安全运营三部曲：概念篇.url&#xA;│&amp;nbsp;&amp;nbsp; ├── 安全运营三部曲：安全响应中心与企业文化.url&#xA;│&amp;nbsp;&amp;nbsp; └── 安全运营三部曲：安全生态与运营国际接轨.url&#xA;├── 3.研判分析&#xA;│&amp;nbsp;&amp;nbsp; ├── CTF-MISC-日志分析.url&#xA;│&amp;nbsp;&amp;nbsp; ├── 流量分析.url&#xA;│&amp;nbsp;&amp;nbsp; ├── 企业安全日志分析系统建设.url&#xA;│&amp;nbsp;&amp;nbsp; ├── 流量分析在安全攻防上的探索实践.url&#xA;│&amp;nbsp;&amp;nbsp; └── 日志审计系统的基本原理与部署方式.url&#xA;├── 4.溯源反打&#xA;│&amp;nbsp;&amp;nbsp; ├── HW多人运动溯源反制指北.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── mysql蜜罐Linux.zip&#xA;│&amp;nbsp;&amp;nbsp; ├── mysql蜜罐windows.zip&#xA;│&amp;nbsp;&amp;nbsp; ├── 调查Web应用攻击事件：如何通过服务器日志文件追踪攻击者.url&#xA;│&amp;nbsp;&amp;nbsp; ├── 安全分析--追踪溯源的找人思路.url&#xA;│&amp;nbsp;&amp;nbsp; ├── 红蓝对抗-反制.url&#xA;│&amp;nbsp;&amp;nbsp; ├── 蓝队反制.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── 攻击溯源手段.url&#xA;│&amp;nbsp;&amp;nbsp; ├── 红蓝演习对抗之溯源篇.url&#xA;│&amp;nbsp;&amp;nbsp; ├── 安全攻击溯源思路及案例.url&#xA;│&amp;nbsp;&amp;nbsp; ├── 红蓝对抗中的溯源反制实战.url&#xA;│&amp;nbsp;&amp;nbsp; ├── 蓝队实战溯源反制手册分享.url&#xA;│&amp;nbsp;&amp;nbsp; ├── 追踪邮件发送者的地理位置.url&#xA;│&amp;nbsp;&amp;nbsp; └── 浅谈攻击溯源的一些常见思路.url&#xA;├── 5.HVV必备报告模板&#xA;│&amp;nbsp;&amp;nbsp; ├── HW总结模板.txt&#xA;│&amp;nbsp;&amp;nbsp; ├── HW总结报告模板之一.url&#xA;│&amp;nbsp;&amp;nbsp; └── HW总结报告模板之二.url&#xA;├── 6.历年护网总结&#xA;│&amp;nbsp;&amp;nbsp; ├── 2019年护网行动必备防御手册(V1).pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── 2020年9月安全监测报告「护网期间高危漏洞使用情况」.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── 2020护网中的漏洞.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── 2021HW参考_防守方经验总结.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── 2021HW行动红队作战手册.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── 2021实战攻防企业红蓝对抗实践指南-长亭.pdf&#xA;│&amp;nbsp;&amp;nbsp; └── 一次攻防实战演习复盘总结.pdf&#xA;├── 7.防御必备&#xA;│&amp;nbsp;&amp;nbsp; ├── HW防守手册.TXT&#xA;│&amp;nbsp;&amp;nbsp; ├── HW攻守思路3.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── “护网2019”防守应对手册.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── 防守基础安全指引v5.4.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── 红队视角下的防御体系构建.pdf&#xA;│&amp;nbsp;&amp;nbsp; └── 蓝队视角下的防御体系突破.pdf&#xA;├── 8.应急响应&#xA;│&amp;nbsp;&amp;nbsp; ├── Tomcat Filter类型内存马与查杀技术学习.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── 应急响应-总结.url&#xA;│&amp;nbsp;&amp;nbsp; ├── 应急响应-护网Linux应急处置操作手册-Tools篇.url&#xA;│&amp;nbsp;&amp;nbsp; ├── 【应急响应】windows入侵检查流程.pdf&#xA;│&amp;nbsp;&amp;nbsp; └── 护网行动专项应急演练方案.pdf&#xA;├── 9.护网行动培训材料&#xA;│&amp;nbsp;&amp;nbsp; ├── HW01-护网保障概述-v2.0.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── HW02-前期自查工作要点-v2.0.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── HW03-资产梳理实战指导-v1.1.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── HW04-漏洞扫描实施标准-v1.0.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── HW05-常见安全漏洞加固-v1.0.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── HW06-弱口令扫描实施标准-v1.0.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── HW07-网络安全防护分析-v1.0.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── HW08-关键安全配置解析-v1.5.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── HW09-安全加固实施标准-v1.0.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── HW10-NTI平台使用培训-v1.0.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── HW11-态势感知平台分析培训-v1.0.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── HW12-IPS分析培训-v1.0.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── HW12-WAF分析培训-v1.0.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── HW13-ESPC平台分析培训-v1.0.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── HW14-TAC产品分析培训-v1.0.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── HW15-全流量平台分析培训-v1.0.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── HW16-告警日志分析技术-v1.1.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── HW17-快速应急响应技术-v1.0.pdf&#xA;│&amp;nbsp;&amp;nbsp; ├── HW18-安全事件闭环流程管理-v1.0.pdf&#xA;│&amp;nbsp;&amp;nbsp; └── HW19-对抗攻击思路及常用手法解析-v1.0.pdf&#xA;├── 更多HW资料.txt&#xA;├── 奇安信-实战攻防之紫队视角下的实战攻防演习组织.pdf&#xA;├── 奇安信-实战攻防演习之红队视角下的防御体系突破.pdf&#xA;└── 奇安信-实战攻防演习之蓝队视角下的防御体系构建.pdf&#xA;&#xA;10 directories, 82 files&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;路过的HXD记得给个star+follwer！&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://mir.cr/RUZ0EHNA&#34;&gt;其他资料下载地址一&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;http://disk.scan.cm/zlsec/zlsec_info/document/HW&#34;&gt;其他资料下载地址二&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>