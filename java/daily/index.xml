<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-27T01:38:15Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dataease/dataease</title>
    <updated>2022-08-27T01:38:15Z</updated>
    <id>tag:github.com,2022-08-27:/dataease/dataease</id>
    <link href="https://github.com/dataease/dataease" rel="alternate"></link>
    <summary type="html">&lt;p&gt;人人可用的开源数据可视化分析工具。&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://dataease.io&#34;&gt;&lt;img src=&#34;https://dataease.oss-cn-hangzhou.aliyuncs.com/img/dataease-logo.png&#34; alt=&#34;DataEase&#34; width=&#34;300&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;人人可用的开源数据可视化分析工具&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.gnu.org/licenses/old-licenses/gpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/dataease/dataease?color=%231890FF&#34; alt=&#34;License: GPL v3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codacy.com/gh/dataease/dataease?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=dataease/dataease&amp;amp;utm_campaign=Badge_Grade_Dashboard&#34;&gt;&lt;img src=&#34;https://app.codacy.com/project/badge/Grade/da67574fd82b473992781d1386b937ef&#34; alt=&#34;Codacy&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dataease/dataease/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/dataease/dataease&#34; alt=&#34;Latest release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dataease/dataease&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/dataease/dataease?color=%231890FF&amp;amp;style=flat-square&#34; alt=&#34;Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dataease/dataease/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/dataease/dataease/total&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;什么是 DataEase？&lt;/h2&gt; &#xA;&lt;p&gt;DataEase 是开源的数据可视化分析工具，帮助用户快速分析数据并洞察业务趋势，从而实现业务的改进与优化。DataEase 支持丰富的数据源连接，能够通过拖拉拽方式快速制作图表，并可以方便的与他人分享。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://dataease.io/images/screenshot/de-chart-new.jpg&#34; alt=&#34;de-architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;DataEase 的功能包括：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;图表展示：支持 PC 端、移动端、大屏;&lt;/li&gt; &#xA; &lt;li&gt;图表制作：支持丰富的图表类型(Apache ECharts / AntV)、支持拖拉拽方式快速制作仪表板;&lt;/li&gt; &#xA; &lt;li&gt;数据引擎：支持直连模式、本地模式(基于 Apache Doris / Kettle 实现);&lt;/li&gt; &#xA; &lt;li&gt;数据连接：支持数据仓库/数据湖、OLAP 数据库、OLTP 数据库、Excel 数据文件、API 等各种数据源。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;DataEase 的优势&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;开源开放：零门槛，线上快速获取和安装；快速获取用户反馈、按月发布新版本；&lt;/li&gt; &#xA; &lt;li&gt;简单易用：极易上手，通过鼠标点击和拖拽即可完成分析；&lt;/li&gt; &#xA; &lt;li&gt;秒级响应：集成 Apache Doris，超大数据量下秒级查询返回延时；&lt;/li&gt; &#xA; &lt;li&gt;安全分享：支持多种数据分享方式，确保数据安全。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;DataEase 支持的数据源&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://dataease.io/images/dataSource/excel.jpg&#34; alt=&#34;excel&#34; border=&#34;0&#34; width=&#34;155&#34; height=&#34;107&#34;&gt; &lt;img src=&#34;https://dataease.io/images/dataSource/mysql.png&#34; alt=&#34;mysql&#34; border=&#34;0&#34; width=&#34;155&#34; height=&#34;107&#34;&gt; &lt;img src=&#34;https://dataease.io/images/dataSource/oracle.jpg&#34; alt=&#34;oracle&#34; border=&#34;0&#34; width=&#34;155&#34; height=&#34;107&#34;&gt; &lt;img src=&#34;https://dataease.io/images/dataSource/sqlservel.jpg&#34; alt=&#34;sqlserver&#34; border=&#34;0&#34; width=&#34;155&#34; height=&#34;107&#34;&gt; &lt;img src=&#34;https://dataease.io/images/dataSource/mariadb.jpg&#34; alt=&#34;mariadb&#34; border=&#34;0&#34; width=&#34;155&#34; height=&#34;107&#34;&gt; &lt;img src=&#34;https://dataease.io/images/dataSource/elasticsearch.jpg&#34; alt=&#34;elasticsearch&#34; border=&#34;0&#34; width=&#34;155&#34; height=&#34;107&#34;&gt; &lt;img src=&#34;https://dataease.io/images/dataSource/clickhouse.jpg&#34; alt=&#34;clickhouse&#34; border=&#34;0&#34; width=&#34;155&#34; height=&#34;107&#34;&gt; &lt;img src=&#34;https://dataease.io/images/dataSource/doris.jpg&#34; alt=&#34;doris&#34; border=&#34;0&#34; width=&#34;155&#34; height=&#34;107&#34;&gt; &lt;img src=&#34;https://dataease.io/images/dataSource/mongodb.jpg&#34; alt=&#34;mongodb&#34; border=&#34;0&#34; width=&#34;155&#34; height=&#34;107&#34;&gt; &lt;img src=&#34;https://dataease.io/images/dataSource/redshift.jpg&#34; alt=&#34;redshift&#34; border=&#34;0&#34; width=&#34;155&#34; height=&#34;107&#34;&gt; &lt;img src=&#34;https://dataease.io/images/dataSource/hive.png&#34; alt=&#34;hive&#34; border=&#34;0&#34; width=&#34;155&#34; height=&#34;107&#34;&gt; &lt;img src=&#34;https://dataease.io/images/dataSource/DB2.jpg&#34; alt=&#34;DB2&#34; border=&#34;0&#34; width=&#34;155&#34; height=&#34;107&#34;&gt; &lt;img src=&#34;https://dataease.io/images/dataSource/API.jpg&#34; alt=&#34;API&#34; border=&#34;0&#34; width=&#34;155&#34; height=&#34;107&#34;&gt; &lt;img src=&#34;https://dataease.io/images/dataSource/TiDB.jpg&#34; alt=&#34;TiDB&#34; border=&#34;0&#34; width=&#34;155&#34; height=&#34;107&#34;&gt; &lt;img src=&#34;https://dataease.io/images/dataSource/StarRocks.jpg&#34; alt=&#34;StarRocks&#34; border=&#34;0&#34; width=&#34;155&#34; height=&#34;107&#34;&gt; &lt;img src=&#34;https://dataease.io/images/dataSource/PrestoDB.jpg&#34; alt=&#34;PrestoDB&#34; border=&#34;0&#34; width=&#34;155&#34; height=&#34;107&#34;&gt; &lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;更多数据源支持持续增加中...&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;DataEase 模板市场&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dataease.io/templates/&#34;&gt;模板市场&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://dataease.io/images/templates/templates.gif&#34; alt=&#34;模板市场&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;更多优质模板持续增加中...&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;快速开始&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;在线体验&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;环境地址：&lt;a href=&#34;https://dataease.fit2cloud.com/&#34;&gt;https://dataease.fit2cloud.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;用户名：demo&lt;/li&gt; &#xA; &lt;li&gt;密码：dataease&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;一键安装&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;仅需两步快速安装 DataEase：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;准备一台不小于 8 G内存的 64位 Linux 主机；&lt;/li&gt; &#xA; &lt;li&gt;以 root 用户执行如下命令一键安装 DataEase。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -sSL https://github.com/dataease/dataease/releases/latest/download/quick_start.sh | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;学习资料&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dataease.io/docs/&#34;&gt;在线文档&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dataease.io/video.html&#34;&gt;教学视频&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://edu.fit2cloud.com/page/2635362?navIndex=0&#34;&gt;在线学习班&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;加入微信交流群&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://dataease.oss-cn-hangzhou.aliyuncs.com/img/wechat-group.png&#34; width=&#34;156&#34; height=&#34;156&#34;&gt; &#xA;&lt;h2&gt;DataEase 的技术栈&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;前端：&lt;a href=&#34;https://vuejs.org/&#34;&gt;Vue.js&lt;/a&gt;、&lt;a href=&#34;https://element.eleme.cn/&#34;&gt;Element&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;图库：&lt;a href=&#34;https://github.com/apache/echarts&#34;&gt;Apache ECharts&lt;/a&gt;、&lt;a href=&#34;https://antv.vision/zh&#34;&gt;AntV&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;后端：&lt;a href=&#34;https://spring.io/projects/spring-boot&#34;&gt;Spring Boot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;中间件：&lt;a href=&#34;https://www.mysql.com/&#34;&gt;MySQL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;数据处理：&lt;a href=&#34;https://github.com/pentaho/pentaho-kettle&#34;&gt;Kettle&lt;/a&gt;、&lt;a href=&#34;https://github.com/apache/incubator-doris/&#34;&gt;Apache Doris&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;基础设施：&lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#dataease/dataease&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=dataease/dataease&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2014-2022 飞致云 FIT2CLOUD, All rights reserved.&lt;/p&gt; &#xA;&lt;p&gt;Licensed under The GNU General Public License version 3 (GPLv3) (the &#34;License&#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0.html&#34;&gt;https://www.gnu.org/licenses/gpl-3.0.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>wuyouzhuguli/SpringAll</title>
    <updated>2022-08-27T01:38:15Z</updated>
    <id>tag:github.com,2022-08-27:/wuyouzhuguli/SpringAll</id>
    <link href="https://github.com/wuyouzhuguli/SpringAll" rel="alternate"></link>
    <summary type="html">&lt;p&gt;循序渐进，学习Spring Boot、Spring Boot &amp; Shiro、Spring Batch、Spring Cloud、Spring Cloud Alibaba、Spring Security &amp; Spring Security OAuth2，博客Spring系列源码：https://mrbird.cc&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Spring 系列教程&lt;/h2&gt; &#xA;&lt;p&gt;该仓库为个人博客&lt;a href=&#34;https://mrbird.cc&#34;&gt;https://mrbird.cc&lt;/a&gt;中Spring系列源码，包含Spring Boot、Spring Boot &amp;amp; Shiro、Spring Cloud，Spring Boot &amp;amp; Spring Security &amp;amp; Spring Security OAuth2，如果该系列教程对您有帮助的话，还请点个star给予精神支持！🐤&lt;/p&gt; &#xA;&lt;h3&gt;Spring Boot教程&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/%E5%BC%80%E5%90%AFSpring-Boot.html&#34;&gt;开启Spring Boot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Boot%20basic%20config.html&#34;&gt;Spring Boot基础配置&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Boot%20Mybatis.html&#34;&gt;Spring Boot中使用MyBatis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Boot%20JdbcTemplate.html&#34;&gt;Spring Boot中使用JdbcTemplate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Boot-MyBatis%20Druid.html&#34;&gt;Spring Boot MyBatis配置Druid多数据源&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Boot-JdbcTemplate%20Druid.html&#34;&gt;Spring Boot JdbcTemplate配置Druid多数据源&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Boot-AOP%20log.html&#34;&gt;Spring Boot AOP记录用户操作日志&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Boot%E4%BD%BF%E7%94%A8thymeleaf.html&#34;&gt;Spring Boot中使用thymeleaf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Boot%20cache.html&#34;&gt;Spring Boot中使用Redis缓存数据&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Boot%20cache.html&#34;&gt;Spring Boot中使用Ehcache缓存数据&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Boot%20JSON.html&#34;&gt;Spring Boot中的JSON技术&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Boot%20TESTing.html&#34;&gt;Spring Boot中编写单元测试&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Boot-Swagger2-RESTful-API.html&#34;&gt;Spring Boot整合Swagger2构建RESTful API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Acutator-Spring-Boot.html&#34;&gt;使用Actuator监控Spring Boot应用&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Boot-Email.html&#34;&gt;使用Spring Boot发送邮件&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Boot-Admin.html&#34;&gt;使用Spring Boot Admin监控服务&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Boot-Devtools.html&#34;&gt;Spring Boot Devtools热部署&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Boot-logback.html&#34;&gt;Spring Boot logback日志配置&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Boot%20war.html&#34;&gt;Spring Boot项目打包成war包&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Linux%20Spring-Boot-jar.html&#34;&gt;Linux下部署Spring Boot jar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Jsoup%20XSS.html&#34;&gt;Spring Boot中使用Jsoup防御XSS攻击&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Boot-Exception.html&#34;&gt;Spring Boot异常处理&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Boot-Filter-Interceptor.html&#34;&gt;Spring Boot中使用过滤器和拦截器&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/MyBatis%20common%20Mapper%20PageHelper.html&#34;&gt;Spring Boot整合MyBatis通用Mapper和PageHelper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/deepin-springboot-autoconfig.html&#34;&gt;深入学习Spring Boot自动装配&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/deepin-springboot-application.html&#34;&gt;深入学习Spring Boot中的SpringApplication&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Boot-Hibernate-Validator-Params-Check.html&#34;&gt;Spring Boot配合Hibernate Validator参数校验&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Boot-Diy-Resolver.html&#34;&gt;自定义Spring Boot 内容协商&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Boot-Deal-CORS.html&#34;&gt;Spring Boot 中处理跨域&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Boot-Async.html&#34;&gt;Spring Boot 中的异步调用&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Boot-Kafka.html&#34;&gt;Spring Boot 整合Kafka&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Boot-Mongo-DB-CRUD.html&#34;&gt;Spring Boot整合Mongo DB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Boot-2-0-WebFlux.html&#34;&gt;Spring Boot 2.0 WebFlux编程&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Boot-WebFlux-CRUD.html&#34;&gt;Spring Boot WebFlux增删改查样例&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Boot%E6%95%B4%E5%90%88WebSocket.html&#34;&gt;Spring Boot整合WebSocket&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Spring Boot &amp;amp; Shiro教程&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Boot-shiro%20Authentication.html&#34;&gt;Spring Boot Shiro用户认证&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Boot-Shiro%20Remember-Me.html&#34;&gt;Spring Boot Shiro Remember Me&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Boot-Shiro%20Authorization.html&#34;&gt;Spring Boot Shiro权限控制&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Boot-Shiro%20cache.html&#34;&gt;Spring Boot Shiro Redis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Boot-Shiro%20cache.html&#34;&gt;Spring Boot Shiro Ehcache&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Boot-Themeleaf%20Shiro%20tag.html&#34;&gt;Spring Boot Thymeleaf中使用Shiro标签&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Boot-Shiro%20session.html&#34;&gt;Spring Boot Shiro在线会话管理&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wuyouzhuguli/SpringAll/tree/master/62.Spring-Boot-Shiro-JWT&#34;&gt;Spring Boot Shiro整合JWT&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Spring Boot &amp;amp; Security教程&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Boot&amp;amp;Spring-Security.html&#34;&gt;Spring Boot中开启Spring Security&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Security-Authentication.html&#34;&gt;Spring Security自定义用户认证&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Security-ValidateCode.html&#34;&gt;Spring Security添加图形验证码&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Security-RememberMe.html&#34;&gt;Spring Security添加记住我功能&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Security-SmsCode.html&#34;&gt;Spring Security短信验证码登录&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Security-Session-Manage.html&#34;&gt;Spring Security Session管理&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Security-logout.html&#34;&gt;Spring Security退出登录&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Security-Permission.html&#34;&gt;Spring Security权限控制&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Security-OAuth2-Guide.html&#34;&gt;Spring Security OAuth2入门&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Security-OAuth2-Customize.html&#34;&gt;Spring Security OAuth2自定义Token获取方式&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Security-OAuth2-Token-Config.html&#34;&gt;Spring Security OAuth2自定义令牌配置&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Security-OAuth2-SSO.html&#34;&gt;Spring Security OAuth2单点登录&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Spring Cloud教程&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Cloud%20and%20MicroService.html&#34;&gt;初识Spring Cloud与微服务&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Cloud-Eureka.html&#34;&gt;Spring Cloud Eureka服务治理&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Cloud-Ribbon-LoadBalance.html&#34;&gt;Spring Cloud Ribbon客户端负载均衡&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Cloud-Hystrix-Circuit-Breaker.html&#34;&gt;Spring Cloud Hystrix服务容错&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Cloud-Hystrix-Dashboard.html&#34;&gt;Spring Cloud Hystrix Dashboard仪表盘&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Cloud-Hystrix-Dashboard.html&#34;&gt;Spring Cloud Hystrix Dashboard仪表盘 &amp;amp; RabbitMQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Cloud-Feign.html&#34;&gt;Spring Cloud Feign 声明式服务调用&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Cloud-Zuul-Router.html&#34;&gt;Spring Cloud Zuul服务网关&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Cloud-Config.html&#34;&gt;Spring Cloud Config统一配置管理&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Cloud-Bus.html&#34;&gt;使用Spring Cloud Bus刷新配置&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Cloud-sleuth.html&#34;&gt;使用Spring Cloud Sleuth跟踪微服务&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Cloud-Consul.html&#34;&gt;Spring Cloud Consul服务治理&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Cloud-Alibaba-Nacos%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83.html&#34;&gt;Spring Cloud Alibaba Nacos注册中心&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Cloud-Alibaba-Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83.html&#34;&gt;Spring Cloud Alibaba Nacos配置中心&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Sentinel%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%AF%A6%E8%A7%A3.html&#34;&gt;Spring Cloud Alibaba Sentinel控制台详解&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Cloud-Alibaba-Sentinel-SentinelResource.html&#34;&gt;Spring Cloud Alibaba Sentinel @SentinelResource&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Spring Boot &amp;amp;&amp;amp; Dubbo教程&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Boot-Dubbo-Zookeeper.html&#34;&gt;Spring Boot整合Dubbo&amp;amp;Zookeeper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/dubbo-mointor.html&#34;&gt;监控Dubbo服务&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Dubbo-High-Availability.html&#34;&gt;Dubbo的高可用&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Spring Boot &amp;amp;&amp;amp; Spring Batch教程&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Batch%E5%85%A5%E9%97%A8.html&#34;&gt;Spring Batch入门&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Batch%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE.html&#34;&gt;Spring Batch读取数据&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Batch%E8%BE%93%E5%87%BA%E6%95%B0%E6%8D%AE.html&#34;&gt;Spring Batch输出数据&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Batch%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE.html&#34;&gt;Spring Batch处理数据&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Batch%E7%9B%91%E5%90%AC%E5%99%A8.html&#34;&gt;Spring Batch监听器&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Batch%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.html&#34;&gt;Spring Batch异常处理&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Batch%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6.html&#34;&gt;Spring Batch任务调度&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Spring&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Bean-Regist.html&#34;&gt;深入学习Spring组件注册&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring-Bean-Lifecycle.html&#34;&gt;深入学习Spring Bean生命周期&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Spring-BeanPostProcessor-InstantiationAwareBeanPostProcessor.html&#34;&gt;深入理解Spring BeanPostProcessor &amp;amp; InstantiationAwareBeanPostProcessor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3BeanFactoryPostProcessor-BeanDefinitionRegistryPostProcessor.html&#34;&gt;深入理解BeanFactoryPostProcessor &amp;amp; BeanDefinitionRegistryPostProcessor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Spring-AOP%E5%8E%9F%E7%90%86.html&#34;&gt;深入理解Spring AOP原理&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/Spring%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1%E5%8E%9F%E7%90%86.html&#34;&gt;Spring声明式事务原理&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Spring%E4%BA%8B%E4%BB%B6%E5%8F%91%E5%B8%83%E4%B8%8E%E7%9B%91%E5%90%AC.html&#34;&gt;深入理解Spring事件发布与监听&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrbird.cc/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Spring%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96.html&#34;&gt;深入理解Spring循环依赖&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;持续更新中...&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sqshq/piggymetrics</title>
    <updated>2022-08-27T01:38:15Z</updated>
    <id>tag:github.com,2022-08-27:/sqshq/piggymetrics</id>
    <link href="https://github.com/sqshq/piggymetrics" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Microservice Architecture with Spring Boot, Spring Cloud and Docker&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/sqshq/PiggyMetrics&#34;&gt;&lt;img src=&#34;https://travis-ci.org/sqshq/PiggyMetrics.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/sqshq/PiggyMetrics?branch=master&#34;&gt;&lt;img src=&#34;https://codecov.io/github/sqshq/PiggyMetrics/coverage.svg?branch=master&#34; alt=&#34;codecov.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sqshq/PiggyMetrics/raw/master/LICENCE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/mashape/apistatus.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/sqshq/PiggyMetrics?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/sqshq/PiggyMetrics.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/sqshq/PiggyMetrics&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Piggy Metrics&lt;/h1&gt; &#xA;&lt;p&gt;Piggy Metrics is a simple financial advisor app built to demonstrate the &lt;a href=&#34;http://martinfowler.com/microservices/&#34;&gt;Microservice Architecture Pattern&lt;/a&gt; using Spring Boot, Spring Cloud and Docker. The project is intended as a tutorial, but you are welcome to fork it and turn it into something else!&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/6069066/13864234/442d6faa-ecb9-11e5-9929-34a9539acde0.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://cloud.githubusercontent.com/assets/6069066/13830155/572e7552-ebe4-11e5-918f-637a49dff9a2.gif&#34; alt=&#34;Piggy Metrics&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Functional services&lt;/h2&gt; &#xA;&lt;p&gt;Piggy Metrics is decomposed into three core microservices. All of them are independently deployable applications organized around certain business domains.&lt;/p&gt; &#xA;&lt;img width=&#34;880&#34; alt=&#34;Functional services&#34; src=&#34;https://cloud.githubusercontent.com/assets/6069066/13900465/730f2922-ee20-11e5-8df0-e7b51c668847.png&#34;&gt; &#xA;&lt;h4&gt;Account service&lt;/h4&gt; &#xA;&lt;p&gt;Contains general input logic and validation: incomes/expenses items, savings and account settings.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Path&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;User authenticated&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Available from UI&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GET&lt;/td&gt; &#xA;   &lt;td&gt;/accounts/{account}&lt;/td&gt; &#xA;   &lt;td&gt;Get specified account data&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GET&lt;/td&gt; &#xA;   &lt;td&gt;/accounts/current&lt;/td&gt; &#xA;   &lt;td&gt;Get current account data&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;×&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;×&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GET&lt;/td&gt; &#xA;   &lt;td&gt;/accounts/demo&lt;/td&gt; &#xA;   &lt;td&gt;Get demo account data (pre-filled incomes/expenses items, etc)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;×&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PUT&lt;/td&gt; &#xA;   &lt;td&gt;/accounts/current&lt;/td&gt; &#xA;   &lt;td&gt;Save current account data&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;×&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;×&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;POST&lt;/td&gt; &#xA;   &lt;td&gt;/accounts/&lt;/td&gt; &#xA;   &lt;td&gt;Register new account&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;×&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Statistics service&lt;/h4&gt; &#xA;&lt;p&gt;Performs calculations on major statistics parameters and captures time series for each account. Datapoint contains values normalized to base currency and time period. This data is used to track cash flow dynamics during the account lifetime.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Path&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;User authenticated&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Available from UI&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GET&lt;/td&gt; &#xA;   &lt;td&gt;/statistics/{account}&lt;/td&gt; &#xA;   &lt;td&gt;Get specified account statistics&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GET&lt;/td&gt; &#xA;   &lt;td&gt;/statistics/current&lt;/td&gt; &#xA;   &lt;td&gt;Get current account statistics&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;×&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;×&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GET&lt;/td&gt; &#xA;   &lt;td&gt;/statistics/demo&lt;/td&gt; &#xA;   &lt;td&gt;Get demo account statistics&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;×&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PUT&lt;/td&gt; &#xA;   &lt;td&gt;/statistics/{account}&lt;/td&gt; &#xA;   &lt;td&gt;Create or update time series datapoint for specified account&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Notification service&lt;/h4&gt; &#xA;&lt;p&gt;Stores user contact information and notification settings (reminders, backup frequency etc). Scheduled worker collects required information from other services and sends e-mail messages to subscribed customers.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Path&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;User authenticated&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Available from UI&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GET&lt;/td&gt; &#xA;   &lt;td&gt;/notifications/settings/current&lt;/td&gt; &#xA;   &lt;td&gt;Get current account notification settings&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;×&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;×&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PUT&lt;/td&gt; &#xA;   &lt;td&gt;/notifications/settings/current&lt;/td&gt; &#xA;   &lt;td&gt;Save current account notification settings&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;×&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;×&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Notes&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Each microservice has its own database, so there is no way to bypass API and access persistence data directly.&lt;/li&gt; &#xA; &lt;li&gt;MongoDB is used as a primary database for each of the services.&lt;/li&gt; &#xA; &lt;li&gt;All services are talking to each other via the Rest API&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Infrastructure&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://spring.io/projects/spring-cloud&#34;&gt;Spring cloud&lt;/a&gt; provides powerful tools for developers to quickly implement common distributed systems patterns - &lt;img width=&#34;880&#34; alt=&#34;Infrastructure services&#34; src=&#34;https://cloud.githubusercontent.com/assets/6069066/13906840/365c0d94-eefa-11e5-90ad-9d74804ca412.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Config service&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cloud.spring.io/spring-cloud-config/spring-cloud-config.html&#34;&gt;Spring Cloud Config&lt;/a&gt; is horizontally scalable centralized configuration service for the distributed systems. It uses a pluggable repository layer that currently supports local storage, Git, and Subversion.&lt;/p&gt; &#xA;&lt;p&gt;In this project, we are going to use &lt;code&gt;native profile&lt;/code&gt;, which simply loads config files from the local classpath. You can see &lt;code&gt;shared&lt;/code&gt; directory in &lt;a href=&#34;https://github.com/sqshq/PiggyMetrics/tree/master/config/src/main/resources&#34;&gt;Config service resources&lt;/a&gt;. Now, when Notification-service requests its configuration, Config service responses with &lt;code&gt;shared/notification-service.yml&lt;/code&gt; and &lt;code&gt;shared/application.yml&lt;/code&gt; (which is shared between all client applications).&lt;/p&gt; &#xA;&lt;h5&gt;Client side usage&lt;/h5&gt; &#xA;&lt;p&gt;Just build Spring Boot application with &lt;code&gt;spring-cloud-starter-config&lt;/code&gt; dependency, autoconfiguration will do the rest.&lt;/p&gt; &#xA;&lt;p&gt;Now you don&#39;t need any embedded properties in your application. Just provide &lt;code&gt;bootstrap.yml&lt;/code&gt; with application name and Config service url:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;spring:&#xA;  application:&#xA;    name: notification-service&#xA;  cloud:&#xA;    config:&#xA;      uri: http://config:8888&#xA;      fail-fast: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;With Spring Cloud Config, you can change application config dynamically.&lt;/h5&gt; &#xA;&lt;p&gt;For example, &lt;a href=&#34;https://github.com/sqshq/PiggyMetrics/raw/master/notification-service/src/main/java/com/piggymetrics/notification/service/EmailServiceImpl.java&#34;&gt;EmailService bean&lt;/a&gt; is annotated with &lt;code&gt;@RefreshScope&lt;/code&gt;. That means you can change e-mail text and subject without rebuild and restart the Notification service.&lt;/p&gt; &#xA;&lt;p&gt;First, change required properties in Config server. Then make a refresh call to the Notification service: &lt;code&gt;curl -H &#34;Authorization: Bearer #token#&#34; -XPOST http://127.0.0.1:8000/notifications/refresh&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You could also use Repository &lt;a href=&#34;http://cloud.spring.io/spring-cloud-config/spring-cloud-config.html#_push_notifications_and_spring_cloud_bus&#34;&gt;webhooks to automate this process&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Notes&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;@RefreshScope&lt;/code&gt; doesn&#39;t work with &lt;code&gt;@Configuration&lt;/code&gt; classes and doesn&#39;t ignores &lt;code&gt;@Scheduled&lt;/code&gt; methods&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fail-fast&lt;/code&gt; property means that Spring Boot application will fail startup immediately, if it cannot connect to the Config Service.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Auth service&lt;/h3&gt; &#xA;&lt;p&gt;Authorization responsibilities are extracted to a separate server, which grants &lt;a href=&#34;https://tools.ietf.org/html/rfc6749&#34;&gt;OAuth2 tokens&lt;/a&gt; for the backend resource services. Auth Server is used for user authorization as well as for secure machine-to-machine communication inside the perimeter.&lt;/p&gt; &#xA;&lt;p&gt;In this project, I use &lt;a href=&#34;https://tools.ietf.org/html/rfc6749#section-4.3&#34;&gt;&lt;code&gt;Password credentials&lt;/code&gt;&lt;/a&gt; grant type for users authorization (since it&#39;s used only by the UI) and &lt;a href=&#34;https://tools.ietf.org/html/rfc6749#section-4.4&#34;&gt;&lt;code&gt;Client Credentials&lt;/code&gt;&lt;/a&gt; grant for service-to-service communciation.&lt;/p&gt; &#xA;&lt;p&gt;Spring Cloud Security provides convenient annotations and autoconfiguration to make this really easy to implement on both server and client side. You can learn more about that in &lt;a href=&#34;http://cloud.spring.io/spring-cloud-security/spring-cloud-security.html&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On the client side, everything works exactly the same as with traditional session-based authorization. You can retrieve &lt;code&gt;Principal&lt;/code&gt; object from the request, check user roles using the expression-based access control and &lt;code&gt;@PreAuthorize&lt;/code&gt; annotation.&lt;/p&gt; &#xA;&lt;p&gt;Each PiggyMetrics client has a scope: &lt;code&gt;server&lt;/code&gt; for backend services and &lt;code&gt;ui&lt;/code&gt; - for the browser. We can use &lt;code&gt;@PreAuthorize&lt;/code&gt; annotation to protect controllers from an external access:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@PreAuthorize(&#34;#oauth2.hasScope(&#39;server&#39;)&#34;)&#xA;@RequestMapping(value = &#34;accounts/{name}&#34;, method = RequestMethod.GET)&#xA;public List&amp;lt;DataPoint&amp;gt; getStatisticsByAccountName(@PathVariable String name) {&#xA;&#x9;return statisticsService.findByAccountName(name);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;API Gateway&lt;/h3&gt; &#xA;&lt;p&gt;API Gateway is a single entry point into the system, used to handle requests and routing them to the appropriate backend service or by &lt;a href=&#34;http://techblog.netflix.com/2013/01/optimizing-netflix-api.html&#34;&gt;aggregating results from a scatter-gather call&lt;/a&gt;. Also, it can be used for authentication, insights, stress and canary testing, service migration, static response handling and active traffic management.&lt;/p&gt; &#xA;&lt;p&gt;Netflix opensourced &lt;a href=&#34;http://techblog.netflix.com/2013/06/announcing-zuul-edge-service-in-cloud.html&#34;&gt;such an edge service&lt;/a&gt; and Spring Cloud allows to use it with a single &lt;code&gt;@EnableZuulProxy&lt;/code&gt; annotation. In this project, we use Zuul to store some static content (the UI application) and to route requests to appropriate the microservices. Here&#39;s a simple prefix-based routing configuration for the Notification service:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;zuul:&#xA;  routes:&#xA;    notification-service:&#xA;        path: /notifications/**&#xA;        serviceId: notification-service&#xA;        stripPrefix: false&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That means all requests starting with &lt;code&gt;/notifications&lt;/code&gt; will be routed to the Notification service. There is no hardcoded addresses, as you can see. Zuul uses &lt;a href=&#34;https://github.com/sqshq/PiggyMetrics/raw/master/README.md#service-discovery&#34;&gt;Service discovery&lt;/a&gt; mechanism to locate Notification service instances and also &lt;a href=&#34;https://github.com/sqshq/PiggyMetrics/raw/master/README.md#http-client-load-balancer-and-circuit-breaker&#34;&gt;Circuit Breaker and Load Balancer&lt;/a&gt;, described below.&lt;/p&gt; &#xA;&lt;h3&gt;Service Discovery&lt;/h3&gt; &#xA;&lt;p&gt;Service Discovery allows automatic detection of the network locations for all registered services. These locations might have dynamically assigned addresses due to auto-scaling, failures or upgrades.&lt;/p&gt; &#xA;&lt;p&gt;The key part of Service discovery is the Registry. In this project, we use Netflix Eureka. Eureka is a good example of the client-side discovery pattern, where client is responsible for looking up the locations of available service instances and load balancing between them.&lt;/p&gt; &#xA;&lt;p&gt;With Spring Boot, you can easily build Eureka Registry using the &lt;code&gt;spring-cloud-starter-eureka-server&lt;/code&gt; dependency, &lt;code&gt;@EnableEurekaServer&lt;/code&gt; annotation and simple configuration properties.&lt;/p&gt; &#xA;&lt;p&gt;Client support enabled with &lt;code&gt;@EnableDiscoveryClient&lt;/code&gt; annotation a &lt;code&gt;bootstrap.yml&lt;/code&gt; with application name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;spring:&#xA;  application:&#xA;    name: notification-service&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This service will be registered with the Eureka Server and provided with metadata such as host, port, health indicator URL, home page etc. Eureka receives heartbeat messages from each instance belonging to the service. If the heartbeat fails over a configurable timetable, the instance will be removed from the registry.&lt;/p&gt; &#xA;&lt;p&gt;Also, Eureka provides a simple interface where you can track running services and a number of available instances: &lt;code&gt;http://localhost:8761&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Load balancer, Circuit breaker and Http client&lt;/h3&gt; &#xA;&lt;h4&gt;Ribbon&lt;/h4&gt; &#xA;&lt;p&gt;Ribbon is a client side load balancer which gives you a lot of control over the behaviour of HTTP and TCP clients. Compared to a traditional load balancer, there is no need in additional network hop - you can contact desired service directly.&lt;/p&gt; &#xA;&lt;p&gt;Out of the box, it natively integrates with Spring Cloud and Service Discovery. &lt;a href=&#34;https://github.com/sqshq/PiggyMetrics#service-discovery&#34;&gt;Eureka Client&lt;/a&gt; provides a dynamic list of available servers so Ribbon could balance between them.&lt;/p&gt; &#xA;&lt;h4&gt;Hystrix&lt;/h4&gt; &#xA;&lt;p&gt;Hystrix is the implementation of &lt;a href=&#34;http://martinfowler.com/bliki/CircuitBreaker.html&#34;&gt;Circuit Breaker Pattern&lt;/a&gt;, which gives us a control over latency and network failures while communicating with other services. The main idea is to stop cascading failures in the distributed environment - that helps to fail fast and recover as soon as possible - important aspects of a fault-tolerant system that can self-heal.&lt;/p&gt; &#xA;&lt;p&gt;Moreover, Hystrix generates metrics on execution outcomes and latency for each command, that we can use to &lt;a href=&#34;https://github.com/sqshq/PiggyMetrics#monitor-dashboard&#34;&gt;monitor system&#39;s behavior&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Feign&lt;/h4&gt; &#xA;&lt;p&gt;Feign is a declarative Http client which seamlessly integrates with Ribbon and Hystrix. Actually, a single &lt;code&gt;spring-cloud-starter-feign&lt;/code&gt; dependency and &lt;code&gt;@EnableFeignClients&lt;/code&gt; annotation gives us a full set of tools, including Load balancer, Circuit Breaker and Http client with reasonable default configuration.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example from the Account Service:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@FeignClient(name = &#34;statistics-service&#34;)&#xA;public interface StatisticsServiceClient {&#xA;&#xA;&#x9;@RequestMapping(method = RequestMethod.PUT, value = &#34;/statistics/{accountName}&#34;, consumes = MediaType.APPLICATION_JSON_UTF8_VALUE)&#xA;&#x9;void updateStatistics(@PathVariable(&#34;accountName&#34;) String accountName, Account account);&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Everything you need is just an interface&lt;/li&gt; &#xA; &lt;li&gt;You can share &lt;code&gt;@RequestMapping&lt;/code&gt; part between Spring MVC controller and Feign methods&lt;/li&gt; &#xA; &lt;li&gt;Above example specifies just a desired service id - &lt;code&gt;statistics-service&lt;/code&gt;, thanks to auto-discovery through Eureka&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Monitor dashboard&lt;/h3&gt; &#xA;&lt;p&gt;In this project configuration, each microservice with Hystrix on board pushes metrics to Turbine via Spring Cloud Bus (with AMQP broker). The Monitoring project is just a small Spring boot application with the &lt;a href=&#34;https://github.com/Netflix/Turbine&#34;&gt;Turbine&lt;/a&gt; and &lt;a href=&#34;https://github.com/Netflix-Skunkworks/hystrix-dashboard&#34;&gt;Hystrix Dashboard&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s see observe the behavior of our system under load: Statistics Service imitates a delay during the request processing. The response timeout is set to 1 second:&lt;/p&gt; &#xA;&lt;img width=&#34;880&#34; src=&#34;https://cloud.githubusercontent.com/assets/6069066/14194375/d9a2dd80-f7be-11e5-8bcc-9a2fce753cfe.png&#34;&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;img width=&#34;212&#34; src=&#34;https://cloud.githubusercontent.com/assets/6069066/14127349/21e90026-f628-11e5-83f1-60108cb33490.gif&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img width=&#34;212&#34; src=&#34;https://cloud.githubusercontent.com/assets/6069066/14127348/21e6ed40-f628-11e5-9fa4-ed527bf35129.gif&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img width=&#34;212&#34; src=&#34;https://cloud.githubusercontent.com/assets/6069066/14127346/21b9aaa6-f628-11e5-9bba-aaccab60fd69.gif&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img width=&#34;212&#34; src=&#34;https://cloud.githubusercontent.com/assets/6069066/14127350/21eafe1c-f628-11e5-8ccd-a6b6873c046a.gif&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;0 ms delay&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;500 ms delay&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;800 ms delay&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1100 ms delay&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Well behaving system. Throughput is about 22 rps. Small number of active threads in the Statistics service. Median service time is about 50 ms.&lt;/td&gt; &#xA;   &lt;td&gt;The number of active threads is growing. We can see purple number of thread-pool rejections and therefore about 40% of errors, but the circuit is still closed.&lt;/td&gt; &#xA;   &lt;td&gt;Half-open state: the ratio of failed commands is higher than 50%, so the circuit breaker kicks in. After sleep window amount of time, the next request goes through.&lt;/td&gt; &#xA;   &lt;td&gt;100 percent of the requests fail. The circuit is now permanently open. Retry after sleep time won&#39;t close the circuit again because a single request is too slow.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Log analysis&lt;/h3&gt; &#xA;&lt;p&gt;Centralized logging can be very useful while attempting to identify problems in a distributed environment. Elasticsearch, Logstash and Kibana stack lets you search and analyze your logs, utilization and network activity data with ease.&lt;/p&gt; &#xA;&lt;h3&gt;Distributed tracing&lt;/h3&gt; &#xA;&lt;p&gt;Analyzing problems in distributed systems can be difficult, especially trying to trace requests that propagate from one microservice to another.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cloud.spring.io/spring-cloud-sleuth/&#34;&gt;Spring Cloud Sleuth&lt;/a&gt; solves this problem by providing support for the distributed tracing. It adds two types of IDs to the logging: &lt;code&gt;traceId&lt;/code&gt; and &lt;code&gt;spanId&lt;/code&gt;. &lt;code&gt;spanId&lt;/code&gt; represents a basic unit of work, for example sending an HTTP request. The traceId contains a set of spans forming a tree-like structure. For example, with a distributed big-data store, a trace might be formed by a PUT request. Using &lt;code&gt;traceId&lt;/code&gt; and &lt;code&gt;spanId&lt;/code&gt; for each operation we know when and where our application is as it processes a request, making reading logs much easier.&lt;/p&gt; &#xA;&lt;p&gt;The logs are as follows, notice the &lt;code&gt;[appname,traceId,spanId,exportable]&lt;/code&gt; entries from the Slf4J MDC:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;2018-07-26 23:13:49.381  WARN [gateway,3216d0de1384bb4f,3216d0de1384bb4f,false] 2999 --- [nio-4000-exec-1] o.s.c.n.z.f.r.s.AbstractRibbonCommand    : The Hystrix timeout of 20000ms for the command account-service is set lower than the combination of the Ribbon read and connect timeout, 80000ms.&#xA;2018-07-26 23:13:49.562  INFO [account-service,3216d0de1384bb4f,404ff09c5cf91d2e,false] 3079 --- [nio-6000-exec-1] c.p.account.service.AccountServiceImpl   : new account has been created: test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;code&gt;appname&lt;/code&gt;&lt;/em&gt;: The name of the application that logged the span from the property &lt;code&gt;spring.application.name&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;code&gt;traceId&lt;/code&gt;&lt;/em&gt;: This is an ID that is assigned to a single request, job, or action&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;code&gt;spanId&lt;/code&gt;&lt;/em&gt;: The ID of a specific operation that took place&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;code&gt;exportable&lt;/code&gt;&lt;/em&gt;: Whether the log should be exported to &lt;a href=&#34;https://zipkin.io/&#34;&gt;Zipkin&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Infrastructure automation&lt;/h2&gt; &#xA;&lt;p&gt;Deploying microservices, with their interdependence, is much more complex process than deploying a monolithic application. It is really important to have a fully automated infrastructure. We can achieve following benefits with Continuous Delivery approach:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The ability to release software anytime&lt;/li&gt; &#xA; &lt;li&gt;Any build could end up being a release&lt;/li&gt; &#xA; &lt;li&gt;Build artifacts once - deploy as needed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here is a simple Continuous Delivery workflow, implemented in this project:&lt;/p&gt; &#xA;&lt;img width=&#34;880&#34; src=&#34;https://cloud.githubusercontent.com/assets/6069066/14159789/0dd7a7ce-f6e9-11e5-9fbb-a7fe0f4431e3.png&#34;&gt; &#xA;&lt;p&gt;In this &lt;a href=&#34;https://github.com/sqshq/PiggyMetrics/raw/master/.travis.yml&#34;&gt;configuration&lt;/a&gt;, Travis CI builds tagged images for each successful git push. So, there are always the &lt;code&gt;latest&lt;/code&gt; images for each microservice on &lt;a href=&#34;https://hub.docker.com/r/sqshq/&#34;&gt;Docker Hub&lt;/a&gt; and older images, tagged with git commit hash. It&#39;s easy to deploy any of them and quickly rollback, if needed.&lt;/p&gt; &#xA;&lt;h2&gt;Let&#39;s try it out&lt;/h2&gt; &#xA;&lt;p&gt;Note that starting 8 Spring Boot applications, 4 MongoDB instances and a RabbitMq requires at least 4Gb of RAM.&lt;/p&gt; &#xA;&lt;h4&gt;Before you start&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install Docker and Docker Compose.&lt;/li&gt; &#xA; &lt;li&gt;Change environment variable values in &lt;code&gt;.env&lt;/code&gt; file for more security or leave it as it is.&lt;/li&gt; &#xA; &lt;li&gt;Build the project: &lt;code&gt;mvn package [-DskipTests]&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Production mode&lt;/h4&gt; &#xA;&lt;p&gt;In this mode, all latest images will be pulled from Docker Hub. Just copy &lt;code&gt;docker-compose.yml&lt;/code&gt; and hit &lt;code&gt;docker-compose up&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Development mode&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;d like to build images yourself, you have to clone the repository and build artifacts using maven. After that, run &lt;code&gt;docker-compose -f docker-compose.yml -f docker-compose.dev.yml up&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;docker-compose.dev.yml&lt;/code&gt; inherits &lt;code&gt;docker-compose.yml&lt;/code&gt; with additional possibility to build images locally and expose all containers ports for convenient development.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to start applications in Intellij Idea you need to either use &lt;a href=&#34;https://plugins.jetbrains.com/plugin/7861-envfile&#34;&gt;EnvFile plugin&lt;/a&gt; or manually export environment variables listed in &lt;code&gt;.env&lt;/code&gt; file (make sure they were exported: &lt;code&gt;printenv&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;h4&gt;Important endpoints&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://localhost:80&#34;&gt;http://localhost:80&lt;/a&gt; - Gateway&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://localhost:8761&#34;&gt;http://localhost:8761&lt;/a&gt; - Eureka Dashboard&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://localhost:9000/hystrix&#34;&gt;http://localhost:9000/hystrix&lt;/a&gt; - Hystrix Dashboard (Turbine stream link: &lt;code&gt;http://turbine-stream-service:8080/turbine/turbine.stream&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://localhost:15672&#34;&gt;http://localhost:15672&lt;/a&gt; - RabbitMq management (default login/password: guest/guest)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributions are welcome!&lt;/h2&gt; &#xA;&lt;p&gt;PiggyMetrics is open source, and would greatly appreciate your help. Feel free to suggest and implement any improvements.&lt;/p&gt;</summary>
  </entry>
</feed>