<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-12T01:37:24Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>siavash79/AOSPMods</title>
    <updated>2022-09-12T01:37:24Z</updated>
    <id>tag:github.com,2022-09-12:/siavash79/AOSPMods</id>
    <link href="https://github.com/siavash79/AOSPMods" rel="alternate"></link>
    <summary type="html">&lt;p&gt;mixed Xposed+Magisk module for customization of AOSP-based Android 12+&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/siavash79/AOSPMods/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/siavash79/aospmods?color=green&amp;amp;include_prereleases&amp;amp;label=Download&#34; alt=&#34;Latest Release&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/siavash79/aospmods/total?color=red&amp;amp;label=Downloads%20-%20Stable%20Channel&#34; alt=&#34;Downloads - Stable channel&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sh-ort.app/1fjst&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url?label=XDA%20Developers&amp;amp;logo=XDA-Developers&amp;amp;style=social&amp;amp;url=https%3A%2F%2Fsh-ort.app%2F1fjst&#34; alt=&#34;XDA URL&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://t.me/AOSPMods_Support&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url?label=Telegram&amp;amp;logo=telegram&amp;amp;style=social&amp;amp;url=https%3A%2F%2Ft.me%2FAOSPMods_Support&#34; alt=&#34;Telegram URL&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/siavash79/AOSPMods/master/.github/AOSP_Mods_Header.png&#34; alt=&#34;Header Image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a mixed Xposed+Magisk module, which is made to allow customizations that are not originally designed in AOSP (Android Open Source Project).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;(Current) Features:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Back gesture customization&lt;/li&gt; &#xA; &lt;li&gt;(3-Button navigation) Hold back to kill app&lt;/li&gt; &#xA; &lt;li&gt;Hide navigation bar&lt;/li&gt; &#xA; &lt;li&gt;Light QS Theme&lt;/li&gt; &#xA; &lt;li&gt;Vibrate on QS tile tap&lt;/li&gt; &#xA; &lt;li&gt;One-Finger QS panel pulldown&lt;/li&gt; &#xA; &lt;li&gt;Customize 4G/LTE icon&lt;/li&gt; &#xA; &lt;li&gt;Combined signal Icons&lt;/li&gt; &#xA; &lt;li&gt;Double-tap to sleep&lt;/li&gt; &#xA; &lt;li&gt;Customization on Battery icon style and size&lt;/li&gt; &#xA; &lt;li&gt;Configure build number text in QS footer&lt;/li&gt; &#xA; &lt;li&gt;Hide fingerprint circle (Pixel 6)&lt;/li&gt; &#xA; &lt;li&gt;Lockscreen shortcut customization&lt;/li&gt; &#xA; &lt;li&gt;Configure carrier text in lock screen&lt;/li&gt; &#xA; &lt;li&gt;Disable screenshot sound&lt;/li&gt; &#xA; &lt;li&gt;Power button long-press to toggle Torch&lt;/li&gt; &#xA; &lt;li&gt;Double-tap to wake&lt;/li&gt; &#xA; &lt;li&gt;Network Monitor&lt;/li&gt; &#xA; &lt;li&gt;Statusbar Height&lt;/li&gt; &#xA; &lt;li&gt;Statusbar Padding&lt;/li&gt; &#xA; &lt;li&gt;Quick Settings Row &amp;amp; Column numbers&lt;/li&gt; &#xA; &lt;li&gt;Quick Settings tiles text size&lt;/li&gt; &#xA; &lt;li&gt;Internet / Wifi + Cell Tiles&lt;/li&gt; &#xA; &lt;li&gt;Navbar pill thickness&lt;/li&gt; &#xA; &lt;li&gt;Navbar pill theme&lt;/li&gt; &#xA; &lt;li&gt;Keyboard height&lt;/li&gt; &#xA; &lt;li&gt;Icon shapes&lt;/li&gt; &#xA; &lt;li&gt;Statusbar Icon styles&lt;/li&gt; &#xA; &lt;li&gt;Fonts&lt;/li&gt; &#xA; &lt;li&gt;Themed Icons&lt;/li&gt; &#xA; &lt;li&gt;SystemUI Tuner&lt;/li&gt; &#xA; &lt;li&gt;Brightness Slider in Quick QS&lt;/li&gt; &#xA; &lt;li&gt;Battery Bar&lt;/li&gt; &#xA; &lt;li&gt;Volume Longpress to skip music&lt;/li&gt; &#xA; &lt;li&gt;QS Tiles Styles&lt;/li&gt; &#xA; &lt;li&gt;Dark Theme Styles&lt;/li&gt; &#xA; &lt;li&gt;Longpress on settings icon (in QS) to launch AOSPMods manager&lt;/li&gt; &#xA; &lt;li&gt;Expand/Collapse all notifications&lt;/li&gt; &#xA; &lt;li&gt;Tablet taskbar (12.1+)&lt;/li&gt; &#xA; &lt;li&gt;Music album art on lockscreen (with blur / grayscale)&lt;/li&gt; &#xA; &lt;li&gt;Dual-tone QS header&lt;/li&gt; &#xA; &lt;li&gt;Pin code scramble for extra security&lt;/li&gt; &#xA; &lt;li&gt;Disable over-scroll effect&lt;/li&gt; &#xA; &lt;li&gt;VoLTE Icon&lt;/li&gt; &#xA; &lt;li&gt;Double Tap Torch&lt;/li&gt; &#xA; &lt;li&gt;Multi-row statusbar&lt;/li&gt; &#xA; &lt;li&gt;Editable notification icon limit&lt;/li&gt; &#xA; &lt;li&gt;Variable-supported text on lockscreen/AOD&lt;/li&gt; &#xA; &lt;li&gt;Easy unlock&lt;/li&gt; &#xA; &lt;li&gt;Option to disable fingerprint sensor while the screen is off&lt;/li&gt; &#xA; &lt;li&gt;Option to ignore the display cutout&lt;/li&gt; &#xA; &lt;li&gt;Option to adjust media volume steps&lt;/li&gt; &#xA; &lt;li&gt;Option to allow upside-down rotation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Of course, this is an ongoing work and the feature list will get longer through time&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Compatibility:&lt;/strong&gt; This module is designed based on AOSP source code. What does it mean? it means that it&#39;s expected to work on Roms (Firmwares) which are built based on fairly unmodified Android source code. This means, mainly, Pixel Phones (3, 4, 4a, 5, 5a, 6), and any other Roms that haven&#39;t heavily modified the original Android codes. Our feedbacks show that AOSPMods is compatible with Pixel stock Roms and Pixel Experience (normal edition). The mod can also be installed on ArrowOS, Pixel Experience (Plus Edition), ProtonAOSP and LineageOS with &lt;em&gt;some&lt;/em&gt; broken features.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android 12: Compatible&lt;/li&gt; &#xA; &lt;li&gt;Android 12.1 (12L): Compatible&lt;/li&gt; &#xA; &lt;li&gt;Android 13: Compatible&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Compatible Roms (see above)&lt;/li&gt; &#xA; &lt;li&gt;Device Rooted by Magisk 24.2+&lt;/li&gt; &#xA; &lt;li&gt;LSPosed (Zygisk Version)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;How to install:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install the magisk module&lt;/li&gt; &#xA; &lt;li&gt;Reboot (bootloops are not expected)&lt;/li&gt; &#xA; &lt;li&gt;You can use AOSPMods app to configure the module&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The module is released in 2 flavors, which download and update procedures are different:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Stable release:&lt;br&gt; Manual Install/Update: through repository&#39;s Github release page (link below)&lt;br&gt; Automated updates: through magisk manager, or through in-app updater&lt;/li&gt; &#xA; &lt;li&gt;Canary release:&lt;br&gt; Manual Install/Update: only through repository&#39;s Actions page&lt;br&gt; Automated install/updates: only through in-app updater - updates will NOT appear in release section, and will NOT count against the module&#39;s download count&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*No matter which flavor you&#39;re on, you can always switch to the other one with in-app updater&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Credits / Thanks:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android Team&lt;/li&gt; &#xA; &lt;li&gt;@topjohnwu for Magisk&lt;/li&gt; &#xA; &lt;li&gt;@rovo89 for Xposed&lt;/li&gt; &#xA; &lt;li&gt;Team LSPosed&lt;/li&gt; &#xA; &lt;li&gt;Team EvolutionX (Specially @kdrag0n). Most of the mods are based on their work&lt;/li&gt; &#xA; &lt;li&gt;apsun@github for remote-preferences&lt;/li&gt; &#xA; &lt;li&gt;@nijel8 for double-tap to wake&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Translations:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;@ElTifo Portuguese&lt;/li&gt; &#xA; &lt;li&gt;@cracky5322 Chinese Traditional&lt;/li&gt; &#xA; &lt;li&gt;@JohnsonRan Chinese Simplified&lt;/li&gt; &#xA; &lt;li&gt;@TireX228 Russian&lt;/li&gt; &#xA; &lt;li&gt;@ygorigor Romanian&lt;/li&gt; &#xA; &lt;li&gt;@krystianokris Polish&lt;/li&gt; &#xA; &lt;li&gt;@HofaTheRipper German&lt;/li&gt; &#xA; &lt;li&gt;@acuicultor Spanish&lt;/li&gt; &#xA; &lt;li&gt;@tomaja18 Spanish&lt;/li&gt; &#xA; &lt;li&gt;@n3rd3x3 Spanish&lt;/li&gt; &#xA; &lt;li&gt;@TeaqariaWTF Turkish&lt;/li&gt; &#xA; &lt;li&gt;@EleoXDA Turkish, German, Russian&lt;/li&gt; &#xA; &lt;li&gt;@nmayorga092 Spanish&lt;/li&gt; &#xA; &lt;li&gt;@vitalitk Ukrainian&lt;/li&gt; &#xA; &lt;li&gt;@siavash79 Persian&lt;/li&gt; &#xA; &lt;li&gt;@abalam1980 Dutch&lt;/li&gt; &#xA; &lt;li&gt;@trinhloivn Vietnamese&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Brought to you by:&lt;/strong&gt; @siavash79 &amp;amp; @ElTifo&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>anujd64/Thunder</title>
    <updated>2022-09-12T01:37:24Z</updated>
    <id>tag:github.com,2022-09-12:/anujd64/Thunder</id>
    <link href="https://github.com/anujd64/Thunder" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Android app to stream and download your media stored in Google Drive in an Awesome way !!&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;&lt;strong&gt;⚡ Thunder&lt;/strong&gt; :&lt;/h3&gt; &#xA;&lt;p&gt;An Android app to stream and download your media stored in Google Drive in an Awesome way !!&lt;/p&gt; &#xA;&lt;p&gt;(Just Movies for now)&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/anujd64/Thunder/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/anujd64/Thunder/total?color=%233DDC84&amp;amp;logo=android&amp;amp;logoColor=%23fff&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;*Haven&#39;t finalized the name yet I&#39;m open to suggestions&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;🔘 Getting Started&lt;/strong&gt; :&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s say you have a bunch of movies lying around in your Drive What you need to do is :&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Generate an index for the shared drive/folder&lt;/li&gt; &#xA; &lt;li&gt;Deploy to Cloudflare (All instructions on the &lt;a href=&#34;https://gitlab.com/GoogleDriveIndex/Google-Drive-Index&#34;&gt;Google Drive Index&lt;/a&gt; its super easy)&lt;/li&gt; &#xA; &lt;li&gt;Add the index link to movies folder link ( and username/password if you configured that for index ) in the settings tab, wait until it&#39;s done adding&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;There you go you have your media Library which sources files from Drive. (Probably will add video demo soon)&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;📱 Screenshots&lt;/strong&gt; :&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/anujd64/Thunder/raw/main/Screenshots/Home.jpg?raw=true&#34; style=&#34;width: 23%;margin:16px;&#34;&gt;&amp;nbsp;&amp;nbsp; &lt;img src=&#34;https://github.com/anujd64/Thunder/raw/main/Screenshots/Library.jpg?raw=true&#34; style=&#34;width: 23%;margin:16px;&#34;&gt;&amp;nbsp;&amp;nbsp; &lt;img src=&#34;https://github.com/anujd64/Thunder/raw/main/Screenshots/MovieDetails1.jpg?raw=true&#34; style=&#34;width: 23%;margin:16px;&#34;&gt;&amp;nbsp;&amp;nbsp; &lt;img src=&#34;https://github.com/anujd64/Thunder/raw/main/Screenshots/MovieDetails2.jpg?raw=true&#34; style=&#34;width: 23%;margin:16px;&#34;&gt;&amp;nbsp;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;🔥 Features&lt;/strong&gt; :&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Stream and Download media directly&lt;/li&gt; &#xA; &lt;li&gt;No Ads whatsoever&lt;/li&gt; &#xA; &lt;li&gt;Cool UI&lt;/li&gt; &#xA; &lt;li&gt;You can change Subtitle &amp;amp; Audio tracks while streaming&lt;/li&gt; &#xA; &lt;li&gt;If your phone hardware supports it you can stream it whatever it maybe HDR, HDR10, Dolby Vision&lt;/li&gt; &#xA; &lt;li&gt;The app was made to solve a tiny problem with amazing projects like Plex and Jellyfin which cannot use Drive as a source directly&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;strong&gt;🛠️ To Do&lt;/strong&gt; :&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add support for Shows&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Better Player UI&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Remember Playback Position&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add Sort to Library&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Browse by genre&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add animations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;strong&gt;📋 Notes&lt;/strong&gt; :&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Added support GOIndex and Maple&#39;s GDindex (GOIndex is unreliable try refreshing if files aren&#39;t added)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Currently video is only hardware decoded (I think) That&#39;s why HEVC content might not play at all&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Does not directly interact with Drive rather scrapes the index for movies. The index does the talking to the Drive api&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For Now, sub-folders of current folder aren&#39;t searched for files(Searching recursively would take a ton of time but is possible)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Naming of the files does matter it&#39;s better if your files are named like this&lt;/p&gt; &lt;pre&gt;&lt;code&gt; movie.2049.2160p.whatever&#xA; movie.returns.2099.2160p.whatever&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Even if your files aren&#39;t correctly named there is an alternative algorithm which might just extract necessary info.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Media files with no TMDB info are also shown in the library.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Rarely some files might be mislabled if there is another movie of same name on TMDB.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ideally your folder should contain movie files only like&lt;/p&gt; &lt;pre&gt;&lt;code&gt; 📂Movies&#xA; &#x9;└───movie.name.2049.2160p.garbage&#xA; &#x9;└───movie.returns.2069.2160p.whatever&#xA; &#x9;└───movie.returns.again.?.2099.2160p.whatever&#xA; &#x9;└───📂Subfolder &amp;lt;- this folder will not be scanned&#xA; &#x9;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you want to request a feature create an issue with request feature tag&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Dependencies:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Glide&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xdrop/fuzzywuzzy&#34;&gt;FuzzyWuzzy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Room DB&lt;/li&gt; &#xA; &lt;li&gt;Exoplayer&lt;/li&gt; &#xA; &lt;li&gt;BlurView&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Special Thanks to:&lt;br&gt; &lt;a href=&#34;https://gitlab.com/GoogleDriveIndex/Google-Drive-Index&#34;&gt;Google Drive Index&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/sanjit-sinha/Bhadoo-Index-Scraper&#34;&gt;Bhadoo-Index-Scraper&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To build your Own: Set the &#34;TMDB_API_KEY&#34; in Constants class to your key&lt;/p&gt; &#xA;&lt;h3&gt;WANT TO CONTRIBUTE ?&lt;/h3&gt; &#xA;&lt;p&gt;All contributions are welcome also request new features and report any bugs or issue at discord/telegram. &lt;a href=&#34;https://discord.gg/Y8h26bAm&#34;&gt;Discord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://t.me/+qbLDmvEgC65lMWI1&#34;&gt;Telegram&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;DISCLAIMER&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Thunder only scrapes links from various drive indexes provided by user.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Thunder or its developer doesn&#39;t host any of the contents, it uses TMDB Api to fetch info.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://shields-io-visitor-counter.herokuapp.com/badge?page=anujd64.Thunder&#34; alt=&#34;Visitor count&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>aws/event-ruler</title>
    <updated>2022-09-12T01:37:24Z</updated>
    <id>tag:github.com,2022-09-12:/aws/event-ruler</id>
    <link href="https://github.com/aws/event-ruler" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Event Ruler&lt;/h1&gt; &#xA;&lt;p&gt;Event Ruler (called Ruler in rest of the doc for brevity) is a Java library that allows matching &lt;strong&gt;Rules&lt;/strong&gt; to &lt;strong&gt;Events&lt;/strong&gt;. An event is a list of fields, which may be given as name/value pairs or as a JSON object. A rule associates event field names with lists of possible values. There are two reasons to use Ruler:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;It&#39;s fast; the time it takes to match Events doesn&#39;t depend on the number of Rules.&lt;/li&gt; &#xA; &lt;li&gt;Customers like the JSON &#34;query language&#34; for expressing rules.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Contents:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/event-ruler/main/#ruler-by-example&#34;&gt;Ruler by Example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/event-ruler/main/#and-and-or-relationship-among-fields-with-ruler&#34;&gt;And and Or With Ruler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/event-ruler/main/#how-to-use-ruler&#34;&gt;How to Use Ruler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/event-ruler/main/#json-text-matching&#34;&gt;JSON Text Matching&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/event-ruler/main/#json-array-matching&#34;&gt;JSON Array Matching&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/event-ruler/main/#compiling-and-checking-rules&#34;&gt;Compiling and Checking Rules&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/event-ruler/main/#performance&#34;&gt;Performance&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;It&#39;s easiest to explain by example.&lt;/p&gt; &#xA;&lt;h2&gt;Ruler by Example&lt;/h2&gt; &#xA;&lt;p&gt;An Event is a JSON object. Here&#39;s an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;  &#34;version&#34;: &#34;0&#34;,&#xA;  &#34;id&#34;: &#34;ddddd4-aaaa-7777-4444-345dd43cc333&#34;,&#xA;  &#34;detail-type&#34;: &#34;EC2 Instance State-change Notification&#34;,&#xA;  &#34;source&#34;: &#34;aws.ec2&#34;,&#xA;  &#34;account&#34;: &#34;012345679012&#34;,&#xA;  &#34;time&#34;: &#34;2017-10-02T16:24:49Z&#34;,&#xA;  &#34;region&#34;: &#34;us-east-1&#34;,&#xA;  &#34;resources&#34;: [&#xA;    &#34;arn:aws:ec2:us-east-1:123456789012:instance/i-000000aaaaaa00000&#34;&#xA;  ],&#xA;  &#34;detail&#34;: {&#xA;    &#34;c-count&#34;: 5,&#xA;    &#34;d-count&#34;: 3,&#xA;    &#34;x-limit&#34;: 301.8,&#xA;    &#34;source-ip&#34;: &#34;10.0.0.33&#34;,&#xA;    &#34;instance-id&#34;: &#34;i-000000aaaaaa00000&#34;,&#xA;    &#34;state&#34;: &#34;running&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also see this as a set of name/value pairs. For brevity, we present only a sampling. Ruler has APIs for providing events both in JSON form and as name/value pairs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    +--------------+------------------------------------------+&#xA;    | name         | value                                    |&#xA;    |--------------|------------------------------------------|&#xA;    | source       | &#34;aws.ec2&#34;                                |&#xA;    | detail-type  | &#34;EC2 Instance State-change Notification&#34; |&#xA;    | detail.state | &#34;running&#34;                                |&#xA;    +--------------+------------------------------------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Events in the JSON form may be provided in the form of a raw JSON String, or a parsed &lt;a href=&#34;https://fasterxml.github.io/jackson-databind/javadoc/2.12/com/fasterxml/jackson/databind/JsonNode.html&#34;&gt;Jackson JsonNode&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Simple matching&lt;/h3&gt; &#xA;&lt;p&gt;The rules in this section all match the sample event above:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;  &#34;detail-type&#34;: [ &#34;EC2 Instance State-change Notification&#34; ],&#xA;  &#34;resources&#34;: [ &#34;arn:aws:ec2:us-east-1:123456789012:instance/i-000000aaaaaa00000&#34; ],&#xA;  &#34;detail&#34;: {&#xA;    &#34;state&#34;: [ &#34;initializing&#34;, &#34;running&#34; ]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will match any event with the provided values for the &lt;code&gt;resource&lt;/code&gt;, &lt;code&gt;detail-type&lt;/code&gt;, and &lt;code&gt;detail.state&lt;/code&gt; values, ignoring any other fields in the event. It would also match if the value of &lt;code&gt;detail.state&lt;/code&gt; had been &lt;code&gt;&#34;initializing&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Values in rules are always provided as arrays, and match if the value in the event is one of the values provided in the array. The reference to &lt;code&gt;resources&lt;/code&gt; shows that if the value in the event is also an array, the rule matches if the intersection between the event array and rule-array is non-empty.&lt;/p&gt; &#xA;&lt;h3&gt;Prefix matching&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;  &#34;time&#34;: [ { &#34;prefix&#34;: &#34;2017-10-02&#34; } ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Prefix matches only work on string-valued fields.&lt;/p&gt; &#xA;&lt;h3&gt;Suffix matching&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;  &#34;source&#34;: [ { &#34;suffix&#34;: &#34;ec2&#34; } ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Suffix matches only work on string-valued fields.&lt;/p&gt; &#xA;&lt;h3&gt;Equals-ignore-case matching&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;  &#34;source&#34;: [ { &#34;equals-ignore-case&#34;: &#34;EC2&#34; } ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Equals-ignore-case matches only work on string-valued fields.&lt;/p&gt; &#xA;&lt;h3&gt;Wildcard matching&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;  &#34;source&#34;: [ { &#34;wildcard&#34;: &#34;Simple*Service&#34; } ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Wildcard matches only work on string-valued fields. A single value can contain zero to many wildcard characters, but consecutive wildcard characters are not allowed. To match the asterisk character specifically, a wildcard character can be escaped with a backslash. Two consecutive backslashes (i.e. a backslash escaped with a backslash) represents the actual backslash character. A backslash escaping any character other than asterisk or backslash is not allowed.&lt;/p&gt; &#xA;&lt;h3&gt;Anything-but matching&lt;/h3&gt; &#xA;&lt;p&gt;Anything-but matching does what the name says: matches anything &lt;em&gt;except&lt;/em&gt; what&#39;s provided in the rule.&lt;/p&gt; &#xA;&lt;p&gt;Anything-but works with single string and numeric values or lists, which have to contain entirely strings or entirely numerics. It also may be applied to a prefix match.&lt;/p&gt; &#xA;&lt;p&gt;Single anything-but (string, then numeric):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;  &#34;detail&#34;: {&#xA;    &#34;state&#34;: [ { &#34;anything-but&#34;: &#34;initializing&#34; } ]&#xA;  }&#xA;}&#xA;&#xA;{&#xA;  &#34;detail&#34;: {&#xA;    &#34;x-limit&#34;: [ { &#34;anything-but&#34;: 123 } ]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Anything-but list (strings):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;  &#34;detail&#34;: {&#xA;    &#34;state&#34;: [ { &#34;anything-but&#34;: [ &#34;stopped&#34;, &#34;overloaded&#34; ] } ]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Anything-but list (numbers):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;  &#34;detail&#34;: {&#xA;    &#34;x-limit&#34;: [ { &#34;anything-but&#34;: [ 100, 200, 300 ] } ]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Anything-but prefix:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;  &#34;detail&#34;: {&#xA;    &#34;state&#34;: [ { &#34;anything-but&#34;: { &#34;prefix&#34;: &#34;init&#34; } } ]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Numeric matching&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;  &#34;detail&#34;: {&#xA;    &#34;c-count&#34;: [ { &#34;numeric&#34;: [ &#34;&amp;gt;&#34;, 0, &#34;&amp;lt;=&#34;, 5 ] } ],&#xA;    &#34;d-count&#34;: [ { &#34;numeric&#34;: [ &#34;&amp;lt;&#34;, 10 ] } ],&#xA;    &#34;x-limit&#34;: [ { &#34;numeric&#34;: [ &#34;=&#34;, 3.018e2 ] } ]&#xA;  }&#xA;}  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Above, the references to &lt;code&gt;c-count&lt;/code&gt;, &lt;code&gt;d-count&lt;/code&gt;, and &lt;code&gt;x-limit&lt;/code&gt; illustrate numeric matching, and only work with values that are JSON numbers. Numeric matching is limited to value between -5.0e9 and +5.0e9 inclusive, with 15 digits of precision, that is to say 6 digits to the right of the decimal point.&lt;/p&gt; &#xA;&lt;h3&gt;IP Address Matching&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;  &#34;detail&#34;: {&#xA;    &#34;source-ip&#34;: [ { &#34;cidr&#34;: &#34;10.0.0.0/24&#34; } ]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This also works with IPv6 addresses.&lt;/p&gt; &#xA;&lt;h3&gt;Exists matching&lt;/h3&gt; &#xA;&lt;p&gt;Exists matching works on the presence or absence of a field in the JSON event.&lt;/p&gt; &#xA;&lt;p&gt;The rule below will match any event which has a detail.c-count field present.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;  &#34;detail&#34;: {&#xA;    &#34;c-count&#34;: [ { &#34;exists&#34;: true  } ]&#xA;  }&#xA;}  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The rule below will match any event which has no detail.c-count field.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;  &#34;detail&#34;: {&#xA;    &#34;c-count&#34;: [ { &#34;exists&#34;: false  } ]&#xA;  }&#xA;}  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; &lt;code&gt;Exists&lt;/code&gt; match &lt;strong&gt;only works on the leaf nodes.&lt;/strong&gt; It does not work on intermediate nodes.&lt;/p&gt; &#xA;&lt;p&gt;As an example, the above example for &lt;code&gt;exists : false &lt;/code&gt; would match the event below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;  &#34;detail-type&#34;: [ &#34;EC2 Instance State-change Notification&#34; ],&#xA;  &#34;resources&#34;: [ &#34;arn:aws:ec2:us-east-1:123456789012:instance/i-000000aaaaaa00000&#34; ],&#xA;  &#34;detail&#34;: {&#xA;    &#34;state&#34;: [ &#34;initializing&#34;, &#34;running&#34; ]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;but would also match the event below because &lt;code&gt;c-count&lt;/code&gt; is not a leaf node:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;  &#34;detail-type&#34;: [ &#34;EC2 Instance State-change Notification&#34; ],&#xA;  &#34;resources&#34;: [ &#34;arn:aws:ec2:us-east-1:123456789012:instance/i-000000aaaaaa00000&#34; ],&#xA;  &#34;detail&#34;: {&#xA;    &#34;state&#34;: [ &#34;initializing&#34;, &#34;running&#34; ]&#xA;    &#34;c-count&#34; : {&#xA;       &#34;c1&#34; : 100&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Complex example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;  &#34;time&#34;: [ { &#34;prefix&#34;: &#34;2017-10-02&#34; } ],&#xA;  &#34;detail&#34;: {&#xA;    &#34;state&#34;: [ { &#34;anything-but&#34;: &#34;initializing&#34; } ],&#xA;    &#34;c-count&#34;: [ { &#34;numeric&#34;: [ &#34;&amp;gt;&#34;, 0, &#34;&amp;lt;=&#34;, 5 ] } ],&#xA;    &#34;d-count&#34;: [ { &#34;numeric&#34;: [ &#34;&amp;lt;&#34;, 10 ] } ],&#xA;    &#34;x-limit&#34;: [ { &#34;anything-but&#34;: [ 100, 200, 300 ] } ],&#xA;    &#34;source-ip&#34;: [ { &#34;cidr&#34;: &#34;10.0.0.0/8&#34; } ]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;And and Or Relationship among fields with Ruler&lt;/h1&gt; &#xA;&lt;h3&gt;Default &#34;And&#34; relationship&lt;/h3&gt; &#xA;&lt;p&gt;As the examples above show, Ruler considers a rule to match if &lt;strong&gt;all&lt;/strong&gt; of the fields named in the rule match, and it considers a field to match if &lt;strong&gt;any&lt;/strong&gt; of the provided field values match, &lt;strong&gt;that is to say Ruler has applied &#34;And&#34; logic to all fields by default without &#34;And&#34; primitive is required&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&#34;Or&#34; relationship&lt;/h3&gt; &#xA;&lt;p&gt;There are two ways to reach the &#34;Or&#34; effects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add multiple rules with the same rule name and each individual rule will be treated as one of &#34;Or&#34; condition by Ruler. Refer to below under &lt;strong&gt;addRule()&lt;/strong&gt; section on how to achieve an &#34;Or&#34; effect in that way.&lt;/li&gt; &#xA; &lt;li&gt;Use the &#34;$or&#34; primitive to express the &#34;Or&#34; relationship within the rule.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;The &#34;$or&#34; Primitive&lt;/h4&gt; &#xA;&lt;p&gt;The &#34;$or&#34; primitive to allow the customer directly describe the &#34;Or&#34; relationship among fields in the rule.&lt;/p&gt; &#xA;&lt;p&gt;Ruler recognizes &#34;Or&#34; relationship &lt;strong&gt;only&lt;/strong&gt; when the rule has met &lt;strong&gt;all&lt;/strong&gt; below conditions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;There is &#34;$or&#34; on field attribute in the rule followed with an array – e.g. &#34;$or&#34;: []&lt;/li&gt; &#xA; &lt;li&gt;There are 2+ objects in the &#34;$or&#34; array at least : &#34;$or&#34;: [{}, {}]&lt;/li&gt; &#xA; &lt;li&gt;There has no filed name using Ruler keywords in Object of &#34;$or&#34; array, refer to RESERVED_FIELD_NAMES_IN_OR_RELATIONSHIP in &lt;code&gt;/src/main/software/amazon/event/ruler/Constants.java#L38&lt;/code&gt; for example, below rule will be not parsed as &#34;Or&#34; relationship because &#34;numeric&#34; and &#34;prefix&#34; are Ruler reserved keywords. &lt;pre&gt;&lt;code&gt;{ &#xA;   &#34;$or&#34;: [ {&#34;numeric&#34; : 123}, {&#34;prefix&#34;: &#34;abc&#34;} ] &#xA;} &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Otherwise, Ruler just treats the &#34;$or&#34; as normal filed name the same as other string in the rule.&lt;/p&gt; &#xA;&lt;h4&gt;Rule examples with &#34;$or&#34; Primitive&lt;/h4&gt; &#xA;&lt;p&gt;Normal &#34;Or&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Effect of &#34;source&#34; &amp;amp;&amp;amp; (&#34;metricName&#34; || &#34;namespace&#34;)&#xA;{&#xA;  &#34;source&#34;: [ &#34;aws.cloudwatch&#34; ], &#xA;  &#34;$or&#34;: [&#xA;    { &#34;metricName&#34;: [ &#34;CPUUtilization&#34;, &#34;ReadLatency&#34; ] },&#xA;    { &#34;namespace&#34;: [ &#34;AWS/EC2&#34;, &#34;AWS/ES&#34; ] }&#xA;  ] &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Parallel &#34;Or&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Effect of (&#34;metricName&#34; || &#34;namespace&#34;) &amp;amp;&amp;amp; (&#34;detail.source&#34; || &#34;detail.detail-type&#34;)&#xA;{&#xA;  &#34;$or&#34;: [&#xA;    { &#34;metricName&#34;: [ &#34;CPUUtilization&#34;, &#34;ReadLatency&#34; ] },&#xA;    { &#34;namespace&#34;: [ &#34;AWS/EC2&#34;, &#34;AWS/ES&#34; ] }&#xA;  ], &#xA;  &#34;detail&#34; : {&#xA;    &#34;$or&#34;: [&#xA;      { &#34;source&#34;: [ &#34;aws.cloudwatch&#34; ] },&#xA;      { &#34;detail-type&#34;: [ &#34;CloudWatch Alarm State Change&#34;] }&#xA;    ]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&#34;Or&#34; has an &#34;And&#34; inside&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Effect of (&#34;source&#34; &amp;amp;&amp;amp; (&#34;metricName&#34; || (&#34;metricType &amp;amp;&amp;amp; &#34;namespace&#34;) || &#34;scope&#34;))&#xA;{&#xA;  &#34;source&#34;: [ &#34;aws.cloudwatch&#34; ],&#xA;  &#34;$or&#34;: [&#xA;    { &#34;metricName&#34;: [ &#34;CPUUtilization&#34;, &#34;ReadLatency&#34; ] },&#xA;    {&#xA;      &#34;metricType&#34;: [ &#34;MetricType&#34; ] ,&#xA;      &#34;namespace&#34;: [ &#34;AWS/EC2&#34;, &#34;AWS/ES&#34; ]&#xA;    },&#xA;    { &#34;scope&#34;: [ &#34;Service&#34; ] }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Nested &#34;Or&#34; and &#34;And&#34;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Effect of (&#34;source&#34; &amp;amp;&amp;amp; (&#34;metricName&#34; || (&#34;metricType &amp;amp;&amp;amp; &#34;namespace&#34; &amp;amp;&amp;amp; (&#34;metricId&#34; || &#34;spaceId&#34;)) || &#34;scope&#34;))&#xA;{&#xA;  &#34;source&#34;: [ &#34;aws.cloudwatch&#34; ],&#xA;  &#34;$or&#34;: [&#xA;    { &#34;metricName&#34;: [ &#34;CPUUtilization&#34;, &#34;ReadLatency&#34; ] },&#xA;    {&#xA;      &#34;metricType&#34;: [ &#34;MetricType&#34; ] ,&#xA;      &#34;namespace&#34;: [ &#34;AWS/EC2&#34;, &#34;AWS/ES&#34; ],&#xA;      &#34;$or&#34; : [&#xA;        { &#34;metricId&#34;: [ 1234 ] },&#xA;        { &#34;spaceId&#34;: [ 1000 ] }&#xA;      ]&#xA;    },&#xA;    { &#34;scope&#34;: [ &#34;Service&#34; ] }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;The backward compatibility of using &#34;$or&#34; as filed name in the rule&lt;/h4&gt; &#xA;&lt;p&gt;&#34;$or&#34; is possibly already used as a normal key in some applications (though its likely rare). For these cases, Ruler tries its best to maintain the backward compatibility. Only when the 3 conditions mentioned above, will ruler change behaviour because it assumes your rule really wanted an OR and was mis-configured until today. For example, the rule below will keep working as normal rule with treating &#34;$or&#34; as normal field name in the rule and event:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;    &#34;source&#34;: [ &#34;aws.cloudwatch&#34; ],&#xA;    &#34;$or&#34;: {&#xA;        &#34;metricType&#34;: [ &#34;MetricType&#34; ] , &#xA;        &#34;namespace&#34;: [ &#34;AWS/EC2&#34;, &#34;AWS/ES&#34; ]&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Refer to &lt;code&gt;/src/test/data/normalRulesWithOrWording.json&lt;/code&gt; for more examples that &#34;$or&#34; is parsed as normal field name by Ruler.&lt;/p&gt; &#xA;&lt;h4&gt;Caveat&lt;/h4&gt; &#xA;&lt;p&gt;The keyword &#34;$or&#34; as &#34;Or&#34; relationship primitive should not be designed as normal field in both Events and Rules. Ruler supports the legacy rules where &#34;$or&#34; is parsed as normal field name to keep backward compatibility and give time for team to migrate their legacy &#34;$or&#34; usage away from their events and rules as normal filed name. Mix usage of &#34;$or&#34; as &#34;Or&#34; primitive, and &#34;$or&#34; as normal field name is not supported intentionally by Ruler to avoid the super awkward ambiguities on &#34;$or&#34; from occurring.&lt;/p&gt; &#xA;&lt;h1&gt;How to use Ruler&lt;/h1&gt; &#xA;&lt;p&gt;There are two ways to use Ruler. You can compile multiple rules into a &#34;Machine&#34;, and then use either of its &lt;code&gt;rulesForEvent()&lt;/code&gt; method or &lt;code&gt;rulesForJSONEvent()&lt;/code&gt; methods to check which of the rules match any Event. The difference between these two methods is discussed below. This discussion will use &lt;code&gt;rulesForEvent()&lt;/code&gt; generically except where the difference matters.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can use a single static boolean method to determine whether an individual event matches a particular rule.&lt;/p&gt; &#xA;&lt;h2&gt;Static Rule Matching&lt;/h2&gt; &#xA;&lt;p&gt;There is a single static boolean method &lt;code&gt;Ruler.matchesRule(event, rule)&lt;/code&gt; - both arguments are provided as JSON strings.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: There is another deprecated method called &lt;code&gt;Ruler.matches(event, rule)&lt;/code&gt;which should not be used as its results are inconsistent with &lt;code&gt;rulesForJSONEvent()&lt;/code&gt; and &lt;code&gt;rulesForEvent()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Matching with a Machine&lt;/h2&gt; &#xA;&lt;p&gt;The matching time does not depend on the number of rules. This is the best choice if you have multiple possible rules you want to select from, and especially if you have a way to store the compiled Machine.&lt;/p&gt; &#xA;&lt;p&gt;The matching time is impacted by the degree of non-determinism introduced by wildcard rules. Performance deteriorates as an increasing number of the wildcard rule prefixes match a theoretical worst-case event. To avoid this, wildcard rules pertaining to the same event field should avoid common prefixes leading up to their first wildcard character. If a common prefix is required, then use the minimum number of wildcard characters and limit repeating character sequences that occur following a wildcard character. MachineComplexityEvaluator can be used to evaluate a machine and determine the degree of non-determinism, or &#34;complexity&#34; (i.e. how many wildcard rule prefixes match a theoretical worst-case event). Here are some data points showing a typical decrease in performance for increasing complexity scores.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Complexity = 1, Events per Second = 140,000&lt;/li&gt; &#xA; &lt;li&gt;Complexity = 17, Events per Second = 12,500&lt;/li&gt; &#xA; &lt;li&gt;Complexity = 34, Events per Second = 3500&lt;/li&gt; &#xA; &lt;li&gt;Complexity = 50, Events per Second = 2500&lt;/li&gt; &#xA; &lt;li&gt;Complexity = 100, Events per Second = 1250&lt;/li&gt; &#xA; &lt;li&gt;Complexity = 275, Events per Second = 100 (extrapolated data point)&lt;/li&gt; &#xA; &lt;li&gt;Complexity = 650, Events per Second = 10 (extrapolated data point)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The main class you&#39;ll interact with implements state-machine based rule matching. The interesting methods are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;addRule()&lt;/code&gt; - adds a new rule to the machine&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;deleteRule()&lt;/code&gt; - deletes a rule from the machine&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rulesForEvent()&lt;/code&gt;/&lt;code&gt;rulesForJSONEvent()&lt;/code&gt; - finds the rules in the machine that match an event&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are two flavors: &lt;code&gt;Machine&lt;/code&gt; and &lt;code&gt;GenericMachine&amp;lt;T&amp;gt;&lt;/code&gt;. Machine is simply &lt;code&gt;GenericMachine&amp;lt;String&amp;gt;&lt;/code&gt;. The API refers to the generic type as &#34;name&#34;, which reflects history: The String version was built first and the strings it stored and returned were thought of as rule names.&lt;/p&gt; &#xA;&lt;p&gt;For safety, the type used to &#34;name&#34; rules should be immutable. If you change the content of an object while it&#39;s being used as a rule name, this may break the operation of Ruler.&lt;/p&gt; &#xA;&lt;h3&gt;addRule()&lt;/h3&gt; &#xA;&lt;p&gt;All forms of this method have the same first argument, a String which provides the name of the Rule and is returned by &lt;code&gt;rulesForEvent()&lt;/code&gt;. The rest of the arguments provide the name/value pairs. They may be provided in JSON as in the examples above (via a String, a Reader, an InputStream, or &lt;code&gt;byte[]&lt;/code&gt;), or as a &lt;code&gt;Map&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt;&lt;/code&gt;, where the keys are the field names and the values are the list of possible matches; using the example above, there would be a key named &lt;code&gt;detail.state&lt;/code&gt; whose value would be the list containing &lt;code&gt;&#34;initializing&#34;&lt;/code&gt; and &lt;code&gt;&#34;running&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note: This method (and also &lt;code&gt;deleteRule()&lt;/code&gt;) is synchronized, so only one thread may be updating the machine at any point in time.&lt;/p&gt; &#xA;&lt;h4&gt;Rules and rule names&lt;/h4&gt; &#xA;&lt;p&gt;You can call &lt;code&gt;addRule()&lt;/code&gt; multiple times with the same name but multiple different name/value patterns, thus achieving an &#34;or&#34; relationship; &lt;code&gt;rulesForEvent()&lt;/code&gt; will return that name if any of the patterns match.&lt;/p&gt; &#xA;&lt;p&gt;For example, suppose you call &lt;code&gt;addRule()&lt;/code&gt; with rule name as &#34;R1&#34; and add the following pattern:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;  &#34;detail&#34;: {&#xA;    &#34;c-count&#34;: [ { &#34;numeric&#34;: [ &#34;&amp;gt;&#34;, 0, &#34;&amp;lt;=&#34;, 5 ] } ]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you call it again with the same name but a different pattern:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;  &#34;detail&#34;: {&#xA;    &#34;x-limit&#34;: [ { &#34;numeric&#34;: [ &#34;=&#34;, 3.018e2 ] } ]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After this, &lt;code&gt;rulesForEvent()&lt;/code&gt; will return &#34;R1&#34; for &lt;strong&gt;either&lt;/strong&gt; a &lt;code&gt;c-count&lt;/code&gt; value of 2 &lt;strong&gt;or&lt;/strong&gt; an &lt;code&gt;x-limit&lt;/code&gt; value of 301.8.&lt;/p&gt; &#xA;&lt;h3&gt;deleteRule()&lt;/h3&gt; &#xA;&lt;p&gt;This is a mirror-image of &lt;code&gt;addRule()&lt;/code&gt;; in each case the first argument is the rule name, given as a String. Subsequent arguments provide the names and values, and may be given in any of the same ways as with &lt;code&gt;addRule()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note: This method (and also &lt;code&gt;addRule()&lt;/code&gt;) is synchronized, so only one thread may be updating the machine at any point in time.&lt;/p&gt; &#xA;&lt;p&gt;The operation of this API can be subtle. The Machine compiles the mapping of name/value patterns to Rule names into a finite automaton, but does not remember what patterns are mapped to a given Rule name. Thus, there is no requirement that the pattern in a &lt;code&gt;deleteRule()&lt;/code&gt; exactly match that in the corresponding &lt;code&gt;addRule()&lt;/code&gt;. Ruler will look for matches to the name/value patterns and see if they give a match to a rule with the provided name, and if so remove them. Bear in mind that while performing &lt;code&gt;deleteRule()&lt;/code&gt; calls that do not exactly match the corresponding &lt;code&gt;addRule()&lt;/code&gt; calls will not fail and will not leave the machine in an inconsistent state, they may cause &#34;garbage&#34; to build up in the Machine.&lt;/p&gt; &#xA;&lt;p&gt;A specific consequence is that if you have called &lt;code&gt;addRule()&lt;/code&gt; multiple times with the same name but different patterns, as illustrated above in the &lt;em&gt;Rules and rule names&lt;/em&gt; section, you would have to call &lt;code&gt;deleteRule()&lt;/code&gt; the same number of times, with the same associated patterns, to remove all references to that rule name from the machine.&lt;/p&gt; &#xA;&lt;h3&gt;rulesForEvent() / rulesForJSONEvent()&lt;/h3&gt; &#xA;&lt;p&gt;This method returns a &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; for Machine (and &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; for GenericMachine) which contains the names of the rules that match the provided event. The event may be provided to either method as a single &lt;code&gt;String&lt;/code&gt; representing its JSON form.&lt;/p&gt; &#xA;&lt;p&gt;The event may also be provided to &lt;code&gt;rulesForEvent()&lt;/code&gt; as a collection of strings which alternate field names and values, and must be sorted lexically by field-name. This may be a &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; or &lt;code&gt;String[]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Providing the event in JSON is the recommended approach and has several advantages. First of all, populating the String list or array with alternating name/value quantities, in an order sorted by name, is tricky, and Ruler doesn&#39;t help, just fails to work correctly if the list is improperly structured. Adding to the difficulty, the representation of field values, provided as strings, must follow JSON-syntax rules - see below under &lt;em&gt;JSON text matching&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Finally, the list/array version of an event makes it impossible for Ruler to recognize array structures and provide array-consistent matching, described below in this document. The &lt;code&gt;rulesForEvent(String eventJSON)&lt;/code&gt; API is deprecated in favor of &lt;code&gt;rulesForJSONEvent()&lt;/code&gt; specifically because it does not support array-consistent matching.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rulesForJSONEvent()&lt;/code&gt; also has the advantage that the code which turns the JSON form of the event into a sorted list has been extensively profiled and optimized.&lt;/p&gt; &#xA;&lt;p&gt;The performance of &lt;code&gt;rulesForEvent()&lt;/code&gt; and &lt;code&gt;rulesForJSONEvent()&lt;/code&gt; do not depend on the number of rules added with &lt;code&gt;addRule()&lt;/code&gt;. &lt;code&gt;rulesForJSONEvent()&lt;/code&gt; is generally faster because of the optimized event processing. If you do your own event processing and call &lt;code&gt;rulesForEvent()&lt;/code&gt; with a pre-sorted list of name and values, that is faster still; but you may not be able to do the field-list preparation as fast as &lt;code&gt;rulesForJSONEvent()&lt;/code&gt; does.&lt;/p&gt; &#xA;&lt;h3&gt;The Patterns API&lt;/h3&gt; &#xA;&lt;p&gt;If you think of your events as name/value pairs rather than nested JSON-style documents, the &lt;code&gt;Patterns&lt;/code&gt; class (and its &lt;code&gt;Range&lt;/code&gt; subclass) may be useful in constructing rules. The following static methods are useful.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static ValuePatterns exactMatch(final String value);&#xA;public static ValuePatterns prefixMatch(final String prefix);&#xA;public static ValuePatterns suffixMatch(final String suffix);&#xA;public static ValuePatterns equalsIgnoreCaseMatch(final String value);&#xA;public static ValuePatterns wildcardMatch(final String value);&#xA;public static AnythingBut anythingButMatch(final String anythingBut);&#xA;public static AnythingBut anythingButPrefix(final String prefix);&#xA;public static ValuePatterns numericEquals(final double val);&#xA;public static Range lessThan(final double val);&#xA;public static Range lessThanOrEqualTo(final double val);&#xA;public static Range greaterThan(final double val);&#xA;public static Range greaterThanOrEqualTo(final double val);&#xA;public static Range between(final double bottom, final boolean openBottom, final double top, final boolean openTop);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you have constructed appropriate &lt;code&gt;Patterns&lt;/code&gt; matchers with these methods, you can use the following form of &lt;code&gt;Machine.addRule()&lt;/code&gt; to add them to your machine:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public void addPatternRule(final String name, final Map&amp;lt;String, List&amp;lt;Patterns&amp;gt;&amp;gt; namevals);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;JSON text matching&lt;/h2&gt; &#xA;&lt;p&gt;The field values in rules must be provided in their JSON representations. That is to say, string values must be enclosed in &#34;quotes&#34;. Unquoted values are allowed, such as numbers (&lt;code&gt;-3.0e5&lt;/code&gt;) and certain JSON-specific literals (&lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, and &lt;code&gt;null&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;This can be entirely ignored if rules are provided to &lt;code&gt;addRule()&lt;/code&gt;() in JSON form, or if you are working with Patterns as opposed to literal strings. But if you are providing rules as name/value pairs, and you want to specify that the field &#34;xyz&#34; matches the string &#34;true&#34;, that has to be expressed as &lt;code&gt;&#34;xyz&#34;, &#34;\&#34;true\&#34;&#34;&lt;/code&gt;. On the other hand, &lt;code&gt;&#34;xyz&#34;, &#34;true&#34;&lt;/code&gt; would match only the JSON literal &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;JSON Array Matching&lt;/h2&gt; &#xA;&lt;p&gt;Ruler supports rule-matching for events containing arrays, but only when the event is provided in JSON form - when it&#39;s a list of pre-sorted fields, the array structure in the event is lost. The behavior also depends on whether you use &lt;code&gt;rulesForEvent()&lt;/code&gt; or &lt;code&gt;rulesForJSONEvent&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Consider the following Event.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;  &#34;employees&#34;:[&#xA;    { &#34;firstName&#34;:&#34;John&#34;, &#34;lastName&#34;:&#34;Doe&#34; },&#xA;    { &#34;firstName&#34;:&#34;Anna&#34;, &#34;lastName&#34;:&#34;Smith&#34; },&#xA;    { &#34;firstName&#34;:&#34;Peter&#34;, &#34;lastName&#34;:&#34;Jones&#34; }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then this rule will match:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{ &#34;employees&#34;: { &#34;firstName&#34;: [ &#34;Anna&#34; ] } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That is to say, the array structure is &#34;crushed out&#34; of the rule pattern, and any contained objects are treated as if they are the value of the parent field. This works for multi-level arrays too:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;  &#34;employees&#34;:[&#xA;    [&#xA;      { &#34;firstName&#34;:&#34;John&#34;, &#34;lastName&#34;:&#34;Doe&#34; },&#xA;      { &#34;firstName&#34;:&#34;Anna&#34;, &#34;lastName&#34;:&#34;Smith&#34; }&#xA;    ],&#xA;    [&#xA;      { &#34;firstName&#34;:&#34;Peter&#34;, &#34;lastName&#34;:&#34;Jones&#34; }&#xA;    ]&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In earlier versions of Ruler, the only Machine-based matching method was &lt;code&gt;rulesForEvent()&lt;/code&gt; which unfortunately will also match the following rule:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{ &#34;employees&#34;: { &#34;firstName&#34;: [ &#34;Anna&#34; ], &#34;lastName&#34;: [ &#34;Jones&#34; ] } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As a fix, Ruler introduced &lt;code&gt;rulesForJSONEvent()&lt;/code&gt; which, as the name suggests, only matches events provided in JSON form. &lt;code&gt;rulesForJsonEvent()&lt;/code&gt; will &lt;em&gt;not&lt;/em&gt; match the &#34;Anna&#34;/&#34;Jones&#34; rule above.&lt;/p&gt; &#xA;&lt;p&gt;Formally: &lt;code&gt;rulesForJSONEvent()&lt;/code&gt; will refuse to recognize any match in which any two fields are within JSON objects that are in different elements of the same array. In practice, this means that it does about what you would expect.&lt;/p&gt; &#xA;&lt;h2&gt;Compiling and checking rules&lt;/h2&gt; &#xA;&lt;p&gt;There is a supporting class &lt;code&gt;com.amazon.fsm.ruler.RuleCompiler&lt;/code&gt;. It contains a method named &lt;code&gt;check()&lt;/code&gt; which accepts a JSON rule definition and returns a String value which, if null, means that the rule was syntactically valid. If the return value is non-Null it contains a human-readable error message describing the problem.&lt;/p&gt; &#xA;&lt;p&gt;For convenience, it also contains a method named &lt;code&gt;compile()&lt;/code&gt; which works just like &lt;code&gt;check()&lt;/code&gt; but signals an error by throwing an IOException and, on success, returns a &lt;code&gt;Map&amp;lt;String&amp;gt;, List&amp;lt;String&amp;gt;&amp;gt;&lt;/code&gt; in the form that Machine&#39;s &lt;code&gt;addRule()&lt;/code&gt; method expects. Since the Machine class uses this internally, this method may be a time-saver.&lt;/p&gt; &#xA;&lt;h4&gt;Caveat: Compiled rules and JSON keys with dots&lt;/h4&gt; &#xA;&lt;p&gt;When Ruler compiles keys, it uses dot (&lt;code&gt;.&lt;/code&gt;) as the joining character. This means it will compile the following two rules to the same internal representation&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;## has no dots in keys&#xA;{ &#34;detail&#34; : { &#34;state&#34;: { &#34;status&#34;: [ &#34;running&#34; ] } } }&#xA;&#xA;## has dots in keys&#xA;{ &#34;detail&#34; : { &#34;state.status&#34;: [ &#34;running&#34; ] } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It also means that these rules will match against following two events :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;## has no dots in keys&#xA;{ &#34;detail&#34; : { &#34;state&#34;: { &#34;status&#34;: &#34;running&#34; } } }&#xA;&#xA;## has dots in keys&#xA;{ &#34;detail&#34; : { &#34;state.status&#34;: &#34;running&#34;  } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This behaviour may change in future version (to avoid any confusions) and should not be relied upon.&lt;/p&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;We measure Ruler&#39;s performance by compiling multiple rules into a Machine and matching events provided as JSON strings.&lt;/p&gt; &#xA;&lt;p&gt;A benchmark which processes 213,068 JSON events with average size about 900 bytes against 5 each exact-match, prefix-match, suffix-match, equals-ignore-case-match, wildcard-match, numeric-match, and anything-but-match rules and counts the matches, yields the following on a 2019 MacBook:&lt;/p&gt; &#xA;&lt;p&gt;Events are processed at over 220K/second except for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;equals-ignore-case matches, which are processed at over 180K/second.&lt;/li&gt; &#xA; &lt;li&gt;wildcard matches, which are processed at over 170K/second.&lt;/li&gt; &#xA; &lt;li&gt;anything-but matches, which are processed at over 110K/second.&lt;/li&gt; &#xA; &lt;li&gt;numeric matches, which are processed at over 2.5K/second.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Suggestions for better performance&lt;/h3&gt; &#xA;&lt;p&gt;Here are some suggestions on processing rules and events:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If your team is still using old API -- rulesForEvent, switch to rulesForJSONEvent API. Due to limited resource, old API will not be maintained well thought contributions are always welcomed.&lt;/li&gt; &#xA; &lt;li&gt;If your team does event flattening by yourself, you are recommended to use Ruler to flatten the event, just pass Json string or Json node. We have many optimizations within Ruler parsing code.&lt;/li&gt; &#xA; &lt;li&gt;if your team does Rule Json parsing by yourself, you are recommended to just pass the Json described rule string directly to Ruler, in which will do some pre-processing, e.g. add “”.&lt;/li&gt; &#xA; &lt;li&gt;In order to well protect the system and prevent ruler from hitting worse condition, limit number of fields in event and rule, e.g. for big event, consider to split to multiple small event and call ruler multiple times. while number of rule is purely depending on your memory budget which is up to you to decide that, but number of fields described in the rule is most important and sensitive on performance, if possible, try to design it as small as possible.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;From performance consideration, Ruler is sensitive on below items, so, when you design the schema of your even and rule, here are some suggestions:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Try to make Key be diverse both in event and rules, the more heterogeneous fields in event and rule, the higher performance.&lt;/li&gt; &#xA; &lt;li&gt;Shorten number of fields inside rules, the less key in the rules, the short path to find them out.&lt;/li&gt; &#xA; &lt;li&gt;Shorten number of fields inside event, the less key inside event, the less attempts will be required to find out rules.&lt;/li&gt; &#xA; &lt;li&gt;Shorten number of possible value in […](e.g. “a”:[1,2,3 …100] ) both inside event and rules, the more value, the more branches produced in FSM to iterator, then the more time takes for matching.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/aws/event-ruler/main/CONTRIBUTING.md#security-issue-notifications&#34;&gt;CONTRIBUTING&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the Apache-2.0 License. See &lt;a href=&#34;https://raw.githubusercontent.com/aws/event-ruler/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
</feed>