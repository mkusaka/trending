<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-19T01:34:33Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>apangin/nalim</title>
    <updated>2022-10-19T01:34:33Z</updated>
    <id>tag:github.com,2022-10-19:/apangin/nalim</id>
    <link href="https://github.com/apangin/nalim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast Java native interface based on JVMCI&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nalim&lt;/h1&gt; &#xA;&lt;p&gt;Nalim is a library for linking Java methods to native functions using &lt;a href=&#34;https://openjdk.org/jeps/243&#34;&gt;JVMCI&lt;/a&gt; (JVM compiler interface).&lt;/p&gt; &#xA;&lt;p&gt;Unlike other Java frameworks for native library access, nalim does not use JNI and therefore does not incur &lt;a href=&#34;https://stackoverflow.com/a/24747484/3448419&#34;&gt;JNI related overhead&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When calling a native function with nalim&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a thread does not switch from &lt;code&gt;in_Java&lt;/code&gt; to &lt;code&gt;in_native&lt;/code&gt; state and back;&lt;/li&gt; &#xA; &lt;li&gt;no memory barrier is involved;&lt;/li&gt; &#xA; &lt;li&gt;no JNI handles are created;&lt;/li&gt; &#xA; &lt;li&gt;exception checks and safepoint checks are omitted;&lt;/li&gt; &#xA; &lt;li&gt;native function can access primitive arrays directly in the heap.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As a result, native calls become faster comparing to JNI, especially when a target function is short. In this sense, nalim is similar to &lt;a href=&#34;https://stackoverflow.com/a/36309652/3448419&#34;&gt;JNI Critical Natives&lt;/a&gt;, but relies on a standard supported interface. JNI Critical Natives have been &lt;a href=&#34;https://bugs.openjdk.org/browse/JDK-8233343&#34;&gt;deprecated&lt;/a&gt; in JDK 16 and &lt;a href=&#34;https://bugs.openjdk.org/browse/JDK-8258192&#34;&gt;obsoleted&lt;/a&gt; since JDK 18, so nalim can serve as a replacement.&lt;/p&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;h4&gt;1. Basic usage&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Libc {&#xA;&#xA;    @Link&#xA;    public static native int getuid();&#xA;&#xA;    @Link&#xA;    public static native int getgid();&#xA;&#xA;    static {&#xA;        Linker.linkClass(Libc.class);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;System.out.println(&#34;My user id = &#34; + Libc.getuid());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. Linking by a different name&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Mem {&#xA;&#xA;   @Link(name = &#34;malloc&#34;)&#xA;   public static native long allocate(long size);&#xA;&#xA;   @Link(name = &#34;free&#34;)&#xA;   public static native void release(long ptr);&#xA;&#xA;   static {&#xA;      Linker.linkClass(Mem.class);&#xA;   }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3. Working with arrays&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Library(&#34;ssl&#34;)&#xA;public class LibSSL {&#xA;&#xA;    public static byte[] sha256(byte[] data) {&#xA;        byte[] digest = new byte[32];&#xA;        SHA256(data, data.length, digest);&#xA;        return digest;&#xA;    }&#xA;&#xA;    @Link&#xA;    private static native void SHA256(byte[] data, int len, byte[] digest);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;4. Inlining raw machine code&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Cpu {&#xA;&#xA;    // rdtsc&#xA;    // shl    $0x20,%rdx&#xA;    // or     %rdx,%rax&#xA;    // ret&#xA;    @Code({15, 49, 72, -63, -30, 32, 72, 9, -48, -61})&#xA;    public static native long rdtsc();&#xA;&#xA;    static {&#xA;        Linker.linkClass(Cpu.class);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running&lt;/h3&gt; &#xA;&lt;h4&gt;1. As an agent&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;java -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI \&#xA;     -javaagent:nalim.jar -cp &amp;lt;classpath&amp;gt; MainClass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is the simplest way to add nalim to your application, as the agent exports all required JDK internal packages for you.&lt;/p&gt; &#xA;&lt;p&gt;The agent optionally accepts a list of classes whose native methods will be automatically linked at startup:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-javaagent:nalim.jar=com.example.MyLib,com.example.OtherLib&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. On the classpath&lt;/h4&gt; &#xA;&lt;p&gt;If not adding nalim as an agent, you&#39;ll have to add all required &lt;code&gt;--add-exports&lt;/code&gt; manually.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;java -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI                \&#xA;     --add-exports jdk.internal.vm.ci/jdk.vm.ci.code=ALL-UNNAMED      \&#xA;     --add-exports jdk.internal.vm.ci/jdk.vm.ci.code.site=ALL-UNNAMED \&#xA;     --add-exports jdk.internal.vm.ci/jdk.vm.ci.hotspot=ALL-UNNAMED   \&#xA;     --add-exports jdk.internal.vm.ci/jdk.vm.ci.meta=ALL-UNNAMED      \&#xA;     --add-exports jdk.internal.vm.ci/jdk.vm.ci.runtime=ALL-UNNAMED   \&#xA;     -cp nalim.jar:app.jar MainClass &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Performance&lt;/h3&gt; &#xA;&lt;p&gt;JMH benchmark for comparing regular JNI calls with nalim calls is available &lt;a href=&#34;https://github.com/apangin/nalim/raw/master/example/one/nalim/bench&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The following results were obtained on Intel Core i7-1280P CPU with JDK 17.0.4.1.&lt;/p&gt; &#xA;&lt;h4&gt;Simple native method&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;static native int add(int a, int b);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Benchmark           Mode  Cnt  Score   Error  Units&#xA;JniBench.add_jni    avgt   10  6,535 ± 0,225  ns/op&#xA;JniBench.add_nalim  avgt   10  0,862 ± 0,035  ns/op&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Array processing&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;static native long max(long[] array, int length);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Benchmark           (length)  Mode  Cnt    Score   Error  Units&#xA;JniBench.max_jni          10  avgt   10   25,103 ± 0,994  ns/op&#xA;JniBench.max_jni         100  avgt   10   55,981 ± 2,930  ns/op&#xA;JniBench.max_jni        1000  avgt   10  433,106 ± 1,661  ns/op&#xA;JniBench.max_nalim        10  avgt   10    3,477 ± 0,215  ns/op&#xA;JniBench.max_nalim       100  avgt   10   38,368 ± 2,348  ns/op&#xA;JniBench.max_nalim      1000  avgt   10  420,540 ± 4,049  ns/op&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Supported platforms&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Linux:&lt;/strong&gt; amd64 aarch64&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;macOS:&lt;/strong&gt; amd64 aarch64&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Windows:&lt;/strong&gt; amd64&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Limitations&lt;/h3&gt; &#xA;&lt;p&gt;A native function called with nalim has certain limitations comparing to a regular JNI function.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;It must be &lt;code&gt;static&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;It does not have access to &lt;code&gt;JNIEnv&lt;/code&gt; and therefore cannot call JNI functions, in particular, it cannot throw exceptions.&lt;/li&gt; &#xA; &lt;li&gt;Only primitive types and primitive arrays can be passed as arguments.&lt;/li&gt; &#xA; &lt;li&gt;A function must return as soon as possible, since it blocks JVM from reaching a safepoint.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>jhipster/jhipster-lite</title>
    <updated>2022-10-19T01:34:33Z</updated>
    <id>tag:github.com,2022-10-19:/jhipster/jhipster-lite</id>
    <link href="https://github.com/jhipster/jhipster-lite" rel="alternate"></link>
    <summary type="html">&lt;p&gt;JHipster Lite ⚡ is a development platform to generate, develop &amp; deploy modern web applications &amp; microservices architecture, step by step.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://www.jhipster.tech/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jhipster/jhipster-artwork/main/logos/lite/JHipster-Lite-neon-blue.png&#34; alt=&#34;Logo JHipster Lite&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;JHipster Lite ⚡&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jhipster/jhipster-lite/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/jhipster/jhipster-lite&#34; alt=&#34;JHipster Lite version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repo.maven.apache.org/maven2/tech/jhipster/lite/jhlite/&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/tech.jhipster.lite/jhlite?color=blue&#34; alt=&#34;JHipster Lite Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/jhipster/jhipster-lite&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Docker%20Hub-jhipster%2Fjhipster--lite-blue.svg?style=flat&#34; alt=&#34;JHipster Lite Docker Hub&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jhipster/jhipster-lite/actions&#34;&gt;&lt;img src=&#34;https://github.com/jhipster/jhipster-lite/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/jhipster/jhipster-lite&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/jhipster/jhipster-lite/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/project/overview?id=jhipster_jhipster-lite&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=jhipster_jhipster-lite&amp;amp;metric=coverage&#34; alt=&#34;sonarcloud-coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sonarcloud.io/project/overview?id=jhipster_jhipster-lite&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=jhipster_jhipster-lite&amp;amp;metric=alert_status&#34; alt=&#34;sonarcloud-quality-gate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/project/overview?id=jhipster_jhipster-lite&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=jhipster_jhipster-lite&amp;amp;metric=sqale_rating&#34; alt=&#34;sonarcloud-maintainability&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sonarcloud.io/project/overview?id=jhipster_jhipster-lite&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=jhipster_jhipster-lite&amp;amp;metric=bugs&#34; alt=&#34;sonarcloud-bugs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/project/overview?id=jhipster_jhipster-lite&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=jhipster_jhipster-lite&amp;amp;metric=vulnerabilities&#34; alt=&#34;sonarcloud-vulnerabilities&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/project/overview?id=jhipster_jhipster-lite&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=jhipster_jhipster-lite&amp;amp;metric=security_rating&#34; alt=&#34;sonarcloud-security&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/project/overview?id=jhipster_jhipster-lite&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=jhipster_jhipster-lite&amp;amp;metric=code_smells&#34; alt=&#34;sonarcloud-code-smells&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.jhipster.tech/&#34;&gt;JHipster&lt;/a&gt; is a development platform to quickly generate, develop &amp;amp; deploy modern web applications &amp;amp; microservice architectures.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;JHipster Lite&lt;/strong&gt; will help you to start your project, by generating step by step only what you need.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The generated code uses &lt;a href=&#34;https://raw.githubusercontent.com/jhipster/jhipster-lite/main/documentation/hexagonal-architecture.md&#34;&gt;Hexagonal Architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The technical code is separated from your business code&lt;/li&gt; &#xA; &lt;li&gt;You will only generate the code you want, no additional unused code&lt;/li&gt; &#xA; &lt;li&gt;The best quality as possible: 💯% coverage, 0 code smell, no duplication 😎&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Some videos&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/RnLGnY-vzLI&#34;&gt;What is JHipster Lite and why should you care?&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/juliendubois&#34;&gt;Julien Dubois&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/mEECPRZjajI&#34;&gt;Simple WebServices with JHipster Lite&lt;/a&gt; by &lt;a href=&#34;https://www.linkedin.com/in/colin-damon/&#34;&gt;Colin Damon&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Choosing&lt;/h2&gt; &#xA;&lt;p&gt;The original JHipster and JHLite are &lt;strong&gt;not the same thing&lt;/strong&gt;, they are &lt;strong&gt;not generating the same code&lt;/strong&gt; and &lt;strong&gt;not serving the same purpose&lt;/strong&gt;! Here are some choice elements you can take into account:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jhipster/jhipster-lite/main/documentation/jhlite-choice.png&#34; alt=&#34;Choosing JHipster&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;h3&gt;Java&lt;/h3&gt; &#xA;&lt;p&gt;You need to have Java 17 :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openjdk.java.net/projects/jdk/17/&#34;&gt;JDK 17&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Node.js and NPM&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org/&#34;&gt;Node.js&lt;/a&gt;: we use Node to run a development web server and build the project. Depending on your system, you can install Node either from source or as a pre-packaged bundle.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After installing Node, you should be able to run the following command to install development tools.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm ci&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will only need to run this command when dependencies change in &lt;a href=&#34;https://raw.githubusercontent.com/jhipster/jhipster-lite/main/package.json&#34;&gt;package.json&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Test the project&lt;/h2&gt; &#xA;&lt;p&gt;To launch tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./mvnw clean test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To launch tests and integration tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./mvnw clean verify&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Lint&lt;/h2&gt; &#xA;&lt;p&gt;We use multiple linters check and lint your code:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://eslint.org/&#34;&gt;ESlint&lt;/a&gt; for JavaScript/TypeScript&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/prettier/prettier&#34;&gt;Prettier&lt;/a&gt; for the format &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/jhipster/prettier-java&#34;&gt;prettier-java&lt;/a&gt; for Java&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stylelint.io/&#34;&gt;Stylelint&lt;/a&gt; for style &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/stylelint-scss&#34;&gt;stylelint-scss&lt;/a&gt; for SCSS&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/pug-lint&#34;&gt;pug-lint&lt;/a&gt; for Pug&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To check:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run lint:ci&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To lint and fix all code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run lint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sonar Analysis&lt;/h2&gt; &#xA;&lt;p&gt;To launch local Sonar Analysis:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker compose -f src/main/docker/sonar.yml up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./mvnw clean verify sonar:sonar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So you can check the result at &lt;a href=&#34;http://localhost:9001&#34;&gt;http://localhost:9001&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Run the project&lt;/h2&gt; &#xA;&lt;p&gt;You can run the project using Maven, as &lt;code&gt;spring-boot:run&lt;/code&gt; is the default target:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./mvnw&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, first, you can package as jar:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./mvnw package&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;java -jar target/*.jar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So you can navigate to &lt;a href=&#34;http://localhost:7471&#34;&gt;http://localhost:7471&lt;/a&gt; in your browser.&lt;/p&gt; &#xA;&lt;h2&gt;Docker/Podman Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;To start a local instance of JHipster Lite, go to your desired application folder and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm --pull=always -p 7471:7471 -v $(pwd):/tmp/jhlite:Z -it jhipster/jhipster-lite:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with podman:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;podman run --rm --pull=always -p 7471:7471 -v $(pwd):/tmp/jhlite:Z -u root -it jhipster/jhipster-lite:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, go to &lt;a href=&#34;http://localhost:7471&#34;&gt;http://localhost:7471&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;e2e tests&lt;/h2&gt; &#xA;&lt;p&gt;You need to run the project first. Then, you can run the end-to-end tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run e2e&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or in headless mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run e2e:headless&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Glyph&lt;/h2&gt; &#xA;&lt;p&gt;If you need to add a new glyph icon, please notice we are using &lt;a href=&#34;https://fontello.com/&#34;&gt;Fontello&lt;/a&gt;. Please read the &lt;a href=&#34;https://github.com/fontello/fontello/wiki/Help&#34;&gt;help&lt;/a&gt; Fontello section for any questions.&lt;/p&gt; &#xA;&lt;p&gt;To add a new glyph using Fontello, please launch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm run glyph:open&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, when you&#39;ve finished, please download the config only and replace it under &lt;code&gt;src/main/glyph/config.json&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Now you&#39;re able to launch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm run glyph:build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will replace the current &lt;em&gt;CSS&lt;/em&gt; and &lt;em&gt;font&lt;/em&gt; files into the sources.&lt;/p&gt; &#xA;&lt;h2&gt;Generate your project&lt;/h2&gt; &#xA;&lt;p&gt;Once started, go to &lt;a href=&#34;http://localhost:7471&#34;&gt;http://localhost:7471&lt;/a&gt;, select your option and generate the code you want, step by step, and only what you need.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We are honoured by any contributions you may have small or large. Please refer to our &lt;a href=&#34;https://github.com/jhipster/jhipster-lite/raw/main/CONTRIBUTING.md&#34;&gt;contribution guidelines and instructions document&lt;/a&gt; for any information about contributing to the project.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Support this project by becoming a sponsor! &lt;a href=&#34;https://opencollective.com/generator-jhipster&#34;&gt;Become a sponsor&lt;/a&gt; or &lt;a href=&#34;https://www.jhipster.tech/sponsors/&#34;&gt;learn more about sponsoring the project&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Thank you to our sponsors!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Platinum Sponsors&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt; &lt;a href=&#34;https://developer.okta.com/signup?utm_source=JHipster&amp;amp;utm_medium=logo&amp;amp;utm_campaign=Platinum-Sponsor&#34; target=&#34;_blank&#34;&gt; &lt;img width=&#34;425em&#34; src=&#34;https://www.jhipster.tech/images/open-collective/okta.png&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Gold Sponsors&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt; &lt;a href=&#34;http://www.octoconsulting.com/&#34; target=&#34;_blank&#34;&gt; &lt;img width=&#34;200em&#34; src=&#34;https://www.jhipster.tech/images/open-collective/octoconsulting.png&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt; &lt;a href=&#34;https://dev.entando.org/jhipster&#34; target=&#34;_blank&#34;&gt; &lt;img width=&#34;200em&#34; src=&#34;https://www.jhipster.tech/images/open-collective/entandoe.png&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt; &lt;a href=&#34;https://www.datastax.com/&#34; target=&#34;_blank&#34;&gt; &lt;img width=&#34;200em&#34; src=&#34;https://www.jhipster.tech/images/open-collective/datastax.png&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Bronze sponsors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/generator-jhipster&#34;&gt;&lt;img src=&#34;https://opencollective.com/generator-jhipster/tiers/bronze-sponsor.svg?avatarHeight=120&amp;amp;width=890&#34; alt=&#34;BronzeSponsors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Backers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Thank you to all our backers!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/generator-jhipster&#34;&gt;&lt;img src=&#34;https://opencollective.com/generator-jhipster/tiers/backer.svg?avatarHeight=70&amp;amp;width=890&#34; alt=&#34;Backers&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>