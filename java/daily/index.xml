<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-09-27T01:31:12Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>FasterXML/jackson-core</title>
    <updated>2024-09-27T01:31:12Z</updated>
    <id>tag:github.com,2024-09-27:/FasterXML/jackson-core</id>
    <link href="https://github.com/FasterXML/jackson-core" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Core part of Jackson that defines Streaming API as well as basic shared abstractions&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Overview&lt;/h1&gt; &#xA;&lt;p&gt;This project contains core low-level incremental (&#34;streaming&#34;) parser and generator abstractions used by &lt;a href=&#34;https://github.com/FasterXML/jackson&#34;&gt;Jackson Data Processor&lt;/a&gt;. It also includes the default implementation of handler types (parser, generator) that handle JSON format. The core abstractions are not JSON specific, although naming does contain &#39;JSON&#39; in many places, due to historical reasons. Only packages that specifically contain word &#39;json&#39; are JSON-specific.&lt;/p&gt; &#xA;&lt;p&gt;This package is the base on which &lt;a href=&#34;https://github.com/FasterXML/jackson-databind&#34;&gt;Jackson data-binding&lt;/a&gt; package builds on. It is licensed under &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License 2.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternate data format implementations (like &lt;a href=&#34;https://github.com/FasterXML/jackson-dataformats-binary/tree/master/smile&#34;&gt;Smile (binary JSON)&lt;/a&gt;, &lt;a href=&#34;https://github.com/FasterXML/jackson-dataformat-xml&#34;&gt;XML&lt;/a&gt;, &lt;a href=&#34;https://github.com/FasterXML/jackson-dataformats-text/tree/master/csv&#34;&gt;CSV&lt;/a&gt;, &lt;a href=&#34;https://github.com/FasterXML/jackson-dataformats-binary/tree/master/protobuf&#34;&gt;Protobuf&lt;/a&gt;, and &lt;a href=&#34;https://github.com/FasterXML/jackson-dataformats-binary/tree/master/cbor&#34;&gt;CBOR&lt;/a&gt;) also build on this base package, implementing the core interfaces, making it possible to use standard &lt;a href=&#34;https://github.com/FasterXML/jackson-databind&#34;&gt;data-binding package&lt;/a&gt; regardless of underlying data format.&lt;/p&gt; &#xA;&lt;p&gt;Project contains versions 2.0 and above: source code for earlier (1.x) versions can be found from &lt;a href=&#34;https://raw.githubusercontent.com/jackson-1&#34;&gt;Jackson-1&lt;/a&gt; github repo.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Build (CI)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/FasterXML/jackson-core/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://github.com/FasterXML/jackson-core/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;Build (github)&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Artifact&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/com.fasterxml.jackson.core/jackson-core&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/com.fasterxml.jackson.core/jackson-core/badge.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OSS Sponsorship&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://tidelift.com/subscription/pkg/maven-com-fasterxml-jackson-core-jackson-core?utm_source=maven-com-fasterxml-jackson-core-jackson-core&amp;amp;utm_medium=referral&amp;amp;utm_campaign=readme&#34;&gt;&lt;img src=&#34;https://tidelift.com/badges/package/maven/com.fasterxml.jackson.core:jackson-core&#34; alt=&#34;Tidelift&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Javadocs&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://javadoc.io/doc/com.fasterxml.jackson.core/jackson-core&#34;&gt;&lt;img src=&#34;https://javadoc.io/badge/com.fasterxml.jackson.core/jackson-core.svg?sanitize=true&#34; alt=&#34;Javadoc&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Code coverage (2.18)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://codecov.io/github/FasterXML/jackson-core?branch=2.18&#34;&gt;&lt;img src=&#34;https://codecov.io/github/FasterXML/jackson-core/coverage.svg?branch=2.18&#34; alt=&#34;codecov.io&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CodeQ (ClusterFuzz)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&amp;amp;can=1&amp;amp;q=proj:jackson-core&#34;&gt;&lt;img src=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/badges/jackson-core.svg?sanitize=true&#34; alt=&#34;Fuzzing Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OpenSSF Score&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://securityscorecards.dev/viewer/?uri=github.com/FasterXML/jackson-core&#34;&gt;&lt;img src=&#34;https://api.securityscorecards.dev/projects/github.com/FasterXML/jackson-core/badge&#34; alt=&#34;OpenSSF Scorecard&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Get it!&lt;/h1&gt; &#xA;&lt;h2&gt;Maven&lt;/h2&gt; &#xA;&lt;p&gt;Functionality of this package is contained in Java package &lt;code&gt;com.fasterxml.jackson.core&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To use the package, you need to use following Maven dependency:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;com.fasterxml.jackson.core&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;jackson-core&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;${jackson.version.core}&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or download jars from Maven repository or links on &lt;a href=&#34;https://raw.githubusercontent.com/FasterXML/wiki&#34;&gt;Wiki&lt;/a&gt;. Core jar is a functional OSGi bundle, with proper import/export declarations.&lt;/p&gt; &#xA;&lt;p&gt;Package has no external dependencies, except for testing (which uses &lt;code&gt;JUnit&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Non-Maven&lt;/h2&gt; &#xA;&lt;p&gt;For non-Maven use cases, you download jars from &lt;a href=&#34;https://repo1.maven.org/maven2/com/fasterxml/jackson/core/jackson-core/&#34;&gt;Central Maven repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Core jar is also a functional OSGi bundle, with proper import/export declarations, so it can be use on OSGi container as is.&lt;/p&gt; &#xA;&lt;p&gt;Jackson 2.10 and above include &lt;code&gt;module-info.class&lt;/code&gt; definitions so the jar is also a proper Java module (JPMS).&lt;/p&gt; &#xA;&lt;p&gt;Jackson 2.12 and above include additional Gradle 6 Module Metadata for version alignment with Gradle.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Use it!&lt;/h1&gt; &#xA;&lt;h2&gt;General&lt;/h2&gt; &#xA;&lt;p&gt;Usage typically starts with creation of a reusable (and thread-safe, once configured) &lt;code&gt;JsonFactory&lt;/code&gt; instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Builder-style since 2.10:&#xA;JsonFactory factory = JsonFactory.builder()&#xA;// configure, if necessary:&#xA;     .enable(JsonReadFeature.ALLOW_JAVA_COMMENTS)&#xA;     .build();&#xA;&#xA;// older 2.x mechanism, still supported for 2.x&#xA;JsonFactory factory = new JsonFactory();&#xA;// configure, if necessary:&#xA;factory.enable(JsonReadFeature.ALLOW_JAVA_COMMENTS);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you have an &lt;code&gt;ObjectMapper&lt;/code&gt; (from &lt;a href=&#34;https://github.com/FasterXML/jackson-databind&#34;&gt;Jackson Databind package&lt;/a&gt;) handy; if so, you can do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;JsonFactory factory = objectMapper.getFactory();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage, simple reading&lt;/h2&gt; &#xA;&lt;p&gt;All reading is by using &lt;code&gt;JsonParser&lt;/code&gt; (or its sub-classes, in case of data formats other than JSON), instance of which is constructed by &lt;code&gt;JsonFactory&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;An example can be found from &lt;a href=&#34;http://www.cowtowncoder.com/blog/archives/2009/01/entry_132.html&#34;&gt;Reading and Writing Event Streams&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage, simple writing&lt;/h2&gt; &#xA;&lt;p&gt;All writing is by using &lt;code&gt;JsonGenerator&lt;/code&gt; (or its sub-classes, in case of data formats other than JSON), instance of which is constructed by &lt;code&gt;JsonFactory&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;An example can be found from &lt;a href=&#34;http://www.cowtowncoder.com/blog/archives/2009/01/entry_132.html&#34;&gt;Reading and Writing Event Streams&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Processing limits&lt;/h2&gt; &#xA;&lt;p&gt;Starting with &lt;a href=&#34;https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.15&#34;&gt;Jackson 2.15&lt;/a&gt;, Jackson has configurable limits for some aspects of input decoding and output generation.&lt;/p&gt; &#xA;&lt;p&gt;Implemented limits are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Length are expressed in input/output units -- &lt;code&gt;byte&lt;/code&gt;s or &lt;code&gt;char&lt;/code&gt;s -- depending on input source&lt;/li&gt; &#xA; &lt;li&gt;Defined as longest allowed length, but not necessarily imposed at 100% accuracy: that is, if maximum allowed length is specified as 1000 units, something with length of, say 1003 may not cause exception (but 1500 would typically do)&lt;/li&gt; &#xA; &lt;li&gt;Defined using new &lt;code&gt;StreamReadConstraints&lt;/code&gt; / &lt;code&gt;StreamWriteConstraints&lt;/code&gt; classes, configurable on per-&lt;code&gt;JsonFactory&lt;/code&gt; basis&lt;/li&gt; &#xA; &lt;li&gt;Main focus is to reduce likelihood of excessive memory usage/retention and/or processing costs; not validation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Input parsing limits&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Maximum Number token length (2.15+): (see &lt;a href=&#34;https://github.com/FasterXML/jackson-core/issues/815&#34;&gt;https://github.com/FasterXML/jackson-core/issues/815&lt;/a&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Default: Maximum 1000 for both integral and floating-point numbers.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Maximum String value length (2.15+): (see &lt;a href=&#34;https://github.com/FasterXML/jackson-core/issues/863&#34;&gt;https://github.com/FasterXML/jackson-core/issues/863&lt;/a&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Default: 20_000_000 (20 million) (since 2.15.1; 2.15.0 had lower limit, 5 million)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Maximum Input nesting depth (2.15+): (see &lt;a href=&#34;https://github.com/FasterXML/jackson-core/pull/943&#34;&gt;https://github.com/FasterXML/jackson-core/pull/943&lt;/a&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Default: 1000 levels&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Maximum Property name length (2.16+): (see &lt;a href=&#34;https://github.com/FasterXML/jackson-core/issues/1047&#34;&gt;https://github.com/FasterXML/jackson-core/issues/1047&lt;/a&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Default: 50,000&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Maximum Document length (2.16+): (see &lt;a href=&#34;https://github.com/FasterXML/jackson-core/issues/1046&#34;&gt;https://github.com/FasterXML/jackson-core/issues/1046&lt;/a&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Default: Unlimited (-1)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Output generation limits&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Maximum Output nesting depth (2.16+): (see &lt;a href=&#34;https://github.com/FasterXML/jackson-core/pull/1055&#34;&gt;https://github.com/FasterXML/jackson-core/pull/1055&lt;/a&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Default: 1000 levels&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Re-configuring limits&lt;/h3&gt; &#xA;&lt;p&gt;You can change per-factory limits as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;JsonFactory f = JsonFactory.builder()&#xA;  .streamReadConstraints(StreamReadConstraints.builder().maxDocumentLength(10_000_000L).build())&#xA;  .streamReadConstraints(StreamReadConstraints.builder().maxNumberLength(250).build())&#xA;  .streamWriteConstraints(StreamWriteConstraints.builder().maxNestingDepth(2000).build())&#xA;  .build();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Error Report Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Starting with &lt;a href=&#34;https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.16&#34;&gt;Jackson 2.16&lt;/a&gt;, Jackson offers configurable behavior around error-reporting.&lt;/p&gt; &#xA;&lt;p&gt;Currently supported configuration options are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;maxErrorTokenLength&lt;/code&gt; : Maximum length of token to include in error messages (2.16+): (see &lt;a href=&#34;https://github.com/FasterXML/jackson-core/issues/1066&#34;&gt;#1066&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;maxRawContentLength&lt;/code&gt; : Maximum length of raw content to include in error messages (2.16+): (see &lt;a href=&#34;https://github.com/FasterXML/jackson-core/issues/1066&#34;&gt;#1066&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;... see &lt;a href=&#34;https://raw.githubusercontent.com/FasterXML/jackson-core/2.18/#example&#34;&gt;Example&lt;/a&gt; section below.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;JsonFactory f = JsonFactory.builder()&#xA; .errorReportConfiguration(ErrorReportConfiguration.builder()&#xA;   .maxErrorTokenLength(1004)&#xA;   .maxRawContentLength(2008)&#xA;   .build()&#xA; ).build();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;h3&gt;JDK&lt;/h3&gt; &#xA;&lt;p&gt;Jackson-core package baseline JDK requirement:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Versions 2.0 - 2.13 require JDK 6&lt;/li&gt; &#xA; &lt;li&gt;Versions 2.14 and above require JDK 8&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;List is incomplete due to recent addition of compatibility checker.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2.13: Android SDK 19+&lt;/li&gt; &#xA; &lt;li&gt;2.14 and above: Android SDK 26+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;for information on Android SDK versions to Android Release names see &lt;a href=&#34;https://en.wikipedia.org/wiki/Android_version_history&#34;&gt;Android version history&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Release Process&lt;/h2&gt; &#xA;&lt;p&gt;Starting with Jackson 2.15, releases of this module will be &lt;a href=&#34;https://slsa.dev/&#34;&gt;SLSA&lt;/a&gt; compliant: see issue #844 for details.&lt;/p&gt; &#xA;&lt;p&gt;Release process is triggered by&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./release.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;script which uses Maven Release plug-in under the hood (earlier release plug-in was directly invoked).&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;h3&gt;Community support&lt;/h3&gt; &#xA;&lt;p&gt;Jackson components are supported by the Jackson community through mailing lists, Gitter forum, Github issues. See &lt;a href=&#34;https://raw.githubusercontent.com/jackson#participation-contributing&#34;&gt;Participation, Contributing&lt;/a&gt; for full details.&lt;/p&gt; &#xA;&lt;h3&gt;Enterprise support&lt;/h3&gt; &#xA;&lt;p&gt;Available as part of the &lt;a href=&#34;https://tidelift.com/subscription/pkg/maven-com-fasterxml-jackson-core-jackson-databind&#34;&gt;Tidelift&lt;/a&gt; Subscription.&lt;/p&gt; &#xA;&lt;p&gt;The maintainers of &lt;code&gt;jackson-core&lt;/code&gt; and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. &lt;a href=&#34;https://tidelift.com/subscription/pkg/maven-com-fasterxml-jackson-core-jackson-core?utm_source=maven-com-fasterxml-jackson-core-jackson-core&amp;amp;utm_medium=referral&amp;amp;utm_campaign=enterprise&amp;amp;utm_term=repo&#34;&gt;Learn more.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Further reading&lt;/h1&gt; &#xA;&lt;h2&gt;Differences from Jackson 1.x&lt;/h2&gt; &#xA;&lt;p&gt;Project contains versions 2.0 and above: source code for the latest 1.x version (1.9.13) is available from &lt;a href=&#34;https://github.com/FasterXML/jackson-1&#34;&gt;FasterXML/jackson-1&lt;/a&gt; repo (unmaintained).&lt;/p&gt; &#xA;&lt;p&gt;Note that the main differences compared to 1.0 core jar are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Maven build instead of Ant&lt;/li&gt; &#xA; &lt;li&gt;Annotations carved out to a separate package (that this package depends on)&lt;/li&gt; &#xA; &lt;li&gt;Java package is now &lt;code&gt;com.fasterxml.jackson.core&lt;/code&gt; (instead of &lt;code&gt;org.codehaus.jackson&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Project &lt;a href=&#34;https://raw.githubusercontent.com/FasterXML/wiki&#34;&gt;Wiki&lt;/a&gt; has JavaDocs and links to downloadable artifacts&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FasterXML/jackson&#34;&gt;Jackson (portal)&lt;/a&gt; has links to all FasterXML-maintained &#34;official&#34; Jackson components&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FasterXML/jackson-docs&#34;&gt;Jackson Docs&lt;/a&gt; is the portal/hub for all kinds of Jackson documentation&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>apache/parquet-java</title>
    <updated>2024-09-27T01:31:12Z</updated>
    <id>tag:github.com,2024-09-27:/apache/parquet-java</id>
    <link href="https://github.com/apache/parquet-java" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Apache Parquet Java&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Parquet Java (formerly Parquet MR) &lt;a href=&#34;https://github.com/apache/parquet-java/actions&#34;&gt;&lt;img src=&#34;https://github.com/apache/parquet-java/workflows/Test/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains a Java implementation of &lt;a href=&#34;https://parquet.apache.org/&#34;&gt;Apache Parquet&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Apache Parquet is an open source, column-oriented data file format designed for efficient data storage and retrieval. It provides high performance compression and encoding schemes to handle complex data in bulk and is supported in many programming language and analytics tools.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/apache/parquet-format&#34;&gt;parquet-format&lt;/a&gt; repository contains the file format specificiation.&lt;/p&gt; &#xA;&lt;p&gt;Parquet uses the &lt;a href=&#34;https://github.com/julienledem/redelm/wiki/The-striping-and-assembly-algorithms-from-the-Dremel-paper&#34;&gt;record shredding and assembly algorithm&lt;/a&gt; described in the Dremel paper to represent nested structures. You can find additional details about the format and intended use cases in our &lt;a href=&#34;http://www.slideshare.net/julienledem/parquet-hadoop-summit-2013&#34;&gt;Hadoop Summit 2013 presentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;Parquet-Java uses Maven to build and depends on the thrift compiler (protoc is now managed by maven plugin).&lt;/p&gt; &#xA;&lt;h3&gt;Install Thrift&lt;/h3&gt; &#xA;&lt;p&gt;To build and install the thrift compiler, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget -nv http://archive.apache.org/dist/thrift/0.20.0/thrift-0.20.0.tar.gz&#xA;tar xzf thrift-0.20.0.tar.gz&#xA;cd thrift-0.20.0&#xA;chmod +x ./configure&#xA;./configure --disable-libs&#xA;sudo make install -j&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re on OSX and use homebrew, you can instead install Thrift 0.20.0 with &lt;code&gt;brew&lt;/code&gt; and ensure that it comes first in your &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install thrift&#xA;export PATH=&#34;/usr/local/opt/thrift@0.20.0/bin:$PATH&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build Parquet with Maven&lt;/h3&gt; &#xA;&lt;p&gt;Once protobuf and thrift are available in your path, you can build the project by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;LC_ALL=C ./mvnw clean install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Parquet is a very active project, and new features are being added quickly. Here are a few features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type-specific encoding&lt;/li&gt; &#xA; &lt;li&gt;Hive integration (deprecated)&lt;/li&gt; &#xA; &lt;li&gt;Pig integration&lt;/li&gt; &#xA; &lt;li&gt;Cascading integration (deprecated)&lt;/li&gt; &#xA; &lt;li&gt;Crunch integration&lt;/li&gt; &#xA; &lt;li&gt;Apache Arrow integration&lt;/li&gt; &#xA; &lt;li&gt;Scrooge integration (deprecated)&lt;/li&gt; &#xA; &lt;li&gt;Impala integration (non-nested)&lt;/li&gt; &#xA; &lt;li&gt;Java Map/Reduce API&lt;/li&gt; &#xA; &lt;li&gt;Native Avro support&lt;/li&gt; &#xA; &lt;li&gt;Native Thrift support&lt;/li&gt; &#xA; &lt;li&gt;Native Protocol Buffers support&lt;/li&gt; &#xA; &lt;li&gt;Complex structure support&lt;/li&gt; &#xA; &lt;li&gt;Run-length encoding (RLE)&lt;/li&gt; &#xA; &lt;li&gt;Bit Packing&lt;/li&gt; &#xA; &lt;li&gt;Adaptive dictionary encoding&lt;/li&gt; &#xA; &lt;li&gt;Predicate pushdown&lt;/li&gt; &#xA; &lt;li&gt;Column stats&lt;/li&gt; &#xA; &lt;li&gt;Delta encoding&lt;/li&gt; &#xA; &lt;li&gt;Index pages&lt;/li&gt; &#xA; &lt;li&gt;Java Vector API support (experimental)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Java Vector API support&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;The feature is experimental and is currently not part of the parquet distribution&lt;/code&gt;. Parquet-Java has supported Java Vector API to speed up reading, to enable this feature:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Java 17+, 64-bit&lt;/li&gt; &#xA; &lt;li&gt;Requiring the CPU to support instruction sets: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;avx512vbmi&lt;/li&gt; &#xA;   &lt;li&gt;avx512_vbmi2&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;To build the jars: &lt;code&gt;./mvnw clean package -P vector-plugins&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;For Apache Spark to enable this feature: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Build parquet and replace the parquet-encoding-{VERSION}.jar on the spark jars folder&lt;/li&gt; &#xA;   &lt;li&gt;Build parquet-encoding-vector and copy parquet-encoding-vector-{VERSION}.jar to the spark jars folder&lt;/li&gt; &#xA;   &lt;li&gt;Edit spark class#VectorizedRleValuesReader, function#readNextGroup refer to parquet class#ParquetReadRouter, function#readBatchUsing512Vector&lt;/li&gt; &#xA;   &lt;li&gt;Build spark with maven and replace spark-sql_2.12-{VERSION}.jar on the spark jars folder&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Map/Reduce integration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apache/parquet-java/raw/master/parquet-hadoop/src/main/java/org/apache/parquet/hadoop/ParquetInputFormat.java&#34;&gt;Input&lt;/a&gt; and &lt;a href=&#34;https://github.com/apache/parquet-java/raw/master/parquet-hadoop/src/main/java/org/apache/parquet/hadoop/ParquetOutputFormat.java&#34;&gt;Output&lt;/a&gt; formats. Note that to use an Input or Output format, you need to implement a WriteSupport or ReadSupport class, which will implement the conversion of your object to and from a Parquet schema.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;ve implemented this for 2 popular data formats to provide a clean migration path as well:&lt;/p&gt; &#xA;&lt;h3&gt;Thrift&lt;/h3&gt; &#xA;&lt;p&gt;Thrift integration is provided by the &lt;a href=&#34;https://github.com/apache/parquet-java/tree/master/parquet-thrift&#34;&gt;parquet-thrift&lt;/a&gt; sub-project.&lt;/p&gt; &#xA;&lt;h3&gt;Avro&lt;/h3&gt; &#xA;&lt;p&gt;Avro conversion is implemented via the &lt;a href=&#34;https://github.com/apache/parquet-java/tree/master/parquet-avro&#34;&gt;parquet-avro&lt;/a&gt; sub-project.&lt;/p&gt; &#xA;&lt;h3&gt;Protobuf&lt;/h3&gt; &#xA;&lt;p&gt;Protobuf conversion is implemented via the &lt;a href=&#34;https://github.com/apache/parquet-java/tree/master/parquet-protobuf&#34;&gt;parquet-protobuf&lt;/a&gt; sub-project.&lt;/p&gt; &#xA;&lt;h3&gt;Create your own objects&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The ParquetOutputFormat can be provided a WriteSupport to write your own objects to an event based RecordConsumer.&lt;/li&gt; &#xA; &lt;li&gt;the ParquetInputFormat can be provided a ReadSupport to materialize your own objects by implementing a RecordMaterializer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the APIs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apache/parquet-java/tree/master/parquet-column/src/main/java/org/apache/parquet/io/api&#34;&gt;Record conversion API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apache/parquet-java/tree/master/parquet-hadoop/src/main/java/org/apache/parquet/hadoop/api&#34;&gt;Hadoop API&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Apache Pig integration&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://github.com/apache/parquet-java/raw/master/parquet-pig/src/main/java/org/apache/parquet/pig/ParquetLoader.java&#34;&gt;Loader&lt;/a&gt; and a &lt;a href=&#34;https://github.com/apache/parquet-java/raw/master/parquet-pig/src/main/java/org/apache/parquet/pig/ParquetStorer.java&#34;&gt;Storer&lt;/a&gt; are provided to read and write Parquet files with Apache Pig&lt;/p&gt; &#xA;&lt;p&gt;Storing data into Parquet in Pig is simple:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-- options you might want to fiddle with&#xA;SET parquet.page.size 1048576 -- default. this is your min read/write unit.&#xA;SET parquet.block.size 134217728 -- default. your memory budget for buffering data&#xA;SET parquet.compression lzo -- or you can use none, gzip, snappy&#xA;STORE mydata into &#39;/some/path&#39; USING parquet.pig.ParquetStorer;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Reading in Pig is also simple:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mydata = LOAD &#39;/some/path&#39; USING parquet.pig.ParquetLoader();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the data was stored using Pig, things will &#34;just work&#34;. If the data was stored using another method, you will need to provide the Pig schema equivalent to the data you stored (you can also write the schema to the file footer while writing it -- but that&#39;s pretty advanced). We will provide a basic automatic schema conversion soon.&lt;/p&gt; &#xA;&lt;h2&gt;Hive integration&lt;/h2&gt; &#xA;&lt;p&gt;Hive integration is provided via the &lt;a href=&#34;https://github.com/apache/parquet-java/tree/master/parquet-hive&#34;&gt;parquet-hive&lt;/a&gt; sub-project.&lt;/p&gt; &#xA;&lt;p&gt;Hive integration is now deprecated within the Parquet project. It is now maintained by Apache Hive.&lt;/p&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;To run the unit tests: &lt;code&gt;./mvnw test&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To build the jars: &lt;code&gt;./mvnw package&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The build runs in &lt;a href=&#34;https://github.com/apache/parquet-java/actions&#34;&gt;GitHub Actions&lt;/a&gt;: &lt;a href=&#34;https://github.com/apache/parquet-java/actions&#34;&gt;&lt;img src=&#34;https://github.com/apache/parquet-java/workflows/Test/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Add Parquet as a dependency in Maven&lt;/h2&gt; &#xA;&lt;p&gt;The current release is version &lt;code&gt;1.14.1&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;  &amp;lt;dependencies&amp;gt;&#xA;    &amp;lt;dependency&amp;gt;&#xA;      &amp;lt;groupId&amp;gt;org.apache.parquet&amp;lt;/groupId&amp;gt;&#xA;      &amp;lt;artifactId&amp;gt;parquet-common&amp;lt;/artifactId&amp;gt;&#xA;      &amp;lt;version&amp;gt;1.14.1&amp;lt;/version&amp;gt;&#xA;    &amp;lt;/dependency&amp;gt;&#xA;    &amp;lt;dependency&amp;gt;&#xA;      &amp;lt;groupId&amp;gt;org.apache.parquet&amp;lt;/groupId&amp;gt;&#xA;      &amp;lt;artifactId&amp;gt;parquet-encoding&amp;lt;/artifactId&amp;gt;&#xA;      &amp;lt;version&amp;gt;1.14.1&amp;lt;/version&amp;gt;&#xA;    &amp;lt;/dependency&amp;gt;&#xA;    &amp;lt;dependency&amp;gt;&#xA;      &amp;lt;groupId&amp;gt;org.apache.parquet&amp;lt;/groupId&amp;gt;&#xA;      &amp;lt;artifactId&amp;gt;parquet-column&amp;lt;/artifactId&amp;gt;&#xA;      &amp;lt;version&amp;gt;1.14.1&amp;lt;/version&amp;gt;&#xA;    &amp;lt;/dependency&amp;gt;&#xA;    &amp;lt;dependency&amp;gt;&#xA;      &amp;lt;groupId&amp;gt;org.apache.parquet&amp;lt;/groupId&amp;gt;&#xA;      &amp;lt;artifactId&amp;gt;parquet-hadoop&amp;lt;/artifactId&amp;gt;&#xA;      &amp;lt;version&amp;gt;1.14.1&amp;lt;/version&amp;gt;&#xA;    &amp;lt;/dependency&amp;gt;&#xA;  &amp;lt;/dependencies&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How To Contribute&lt;/h3&gt; &#xA;&lt;p&gt;We prefer to receive contributions in the form of GitHub pull requests. Please send pull requests against the &lt;a href=&#34;https://github.com/apache/parquet-java&#34;&gt;parquet-java&lt;/a&gt; Git repository. If you&#39;ve previously forked Parquet from its old location, you will need to add a remote or update your origin remote to &lt;a href=&#34;https://github.com/apache/parquet-java.git&#34;&gt;https://github.com/apache/parquet-java.git&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are looking for some ideas on what to contribute, check out jira issues for this project labeled &lt;a href=&#34;https://issues.apache.org/jira/browse/PARQUET-5?jql=project%20%3D%20PARQUET%20and%20labels%20%3D%20pick-me-up%20and%20status%20%3D%20open&#34;&gt;&#34;pick-me-up&#34;&lt;/a&gt;. Comment on the issue and/or contact &lt;a href=&#34;http://mail-archives.apache.org/mod_mbox/parquet-dev/&#34;&gt;dev@parquet.apache.org&lt;/a&gt; with your questions and ideas.&lt;/p&gt; &#xA;&lt;p&gt;If you’d like to report a bug but don’t have time to fix it, you can still post it to our &lt;a href=&#34;https://issues.apache.org/jira/browse/PARQUET&#34;&gt;issue tracker&lt;/a&gt;, or email the mailing list &lt;a href=&#34;http://mail-archives.apache.org/mod_mbox/parquet-dev/&#34;&gt;dev@parquet.apache.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To contribute a patch:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Break your work into small, single-purpose patches if possible. It’s much harder to merge in a large change with a lot of disjoint features.&lt;/li&gt; &#xA; &lt;li&gt;Create a JIRA for your patch on the &lt;a href=&#34;https://issues.apache.org/jira/browse/PARQUET&#34;&gt;Parquet Project JIRA&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Submit the patch as a GitHub pull request against the master branch. For a tutorial, see the GitHub guides on forking a repo and sending a pull request. Prefix your pull request name with the JIRA name (ex: &lt;a href=&#34;https://github.com/apache/parquet-java/pull/240&#34;&gt;https://github.com/apache/parquet-java/pull/240&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Make sure that your code passes the unit tests. You can run the tests with &lt;code&gt;./mvnw test&lt;/code&gt; in the root directory.&lt;/li&gt; &#xA; &lt;li&gt;Add new unit tests for your code.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;We tend to do fairly close readings of pull requests, and you may get a lot of comments. Some common issues that are not code structure related, but still important:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use 2 spaces for whitespace. Not tabs, not 4 spaces. The number of the spacing shall be 2.&lt;/li&gt; &#xA; &lt;li&gt;Give your operators some room. Not &lt;code&gt;a+b&lt;/code&gt; but &lt;code&gt;a + b&lt;/code&gt; and not &lt;code&gt;foo(int a,int b)&lt;/code&gt; but &lt;code&gt;foo(int a, int b)&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Generally speaking, stick to the &lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/documentation/codeconvtoc-136057.html&#34;&gt;Sun Java Code Conventions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Make sure tests pass!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thank you for getting involved!&lt;/p&gt; &#xA;&lt;h2&gt;Authors and contributors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apache/parquet-java/graphs/contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/parquet-java/master/dev/COMMITTERS.md&#34;&gt;Committers&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;We hold ourselves and the Parquet developer community to two codes of conduct:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.apache.org/foundation/policies/conduct.html&#34;&gt;The Apache Software Foundation Code of Conduct&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/twitter/code-of-conduct/raw/master/code-of-conduct.md&#34;&gt;The Twitter OSS Code of Conduct&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Discussions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mailing list: &lt;a href=&#34;http://mail-archives.apache.org/mod_mbox/parquet-dev/&#34;&gt;dev@parquet.apache.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Bug tracker: &lt;a href=&#34;https://issues.apache.org/jira/browse/PARQUET&#34;&gt;jira&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Discussions also take place in github pull requests&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0: &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>