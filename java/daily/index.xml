<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-28T01:37:49Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>FrankCYB/JavaGPT</title>
    <updated>2023-04-28T01:37:49Z</updated>
    <id>tag:github.com,2023-04-28:/FrankCYB/JavaGPT</id>
    <link href="https://github.com/FrankCYB/JavaGPT" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Java GUI to interface ChatGPT API&lt;/p&gt;&lt;hr&gt;&lt;div&gt; &#xA; &lt;img src=&#34;https://i.imgur.com/Lv2dBHU.png&#34; alt=&#34;Image description&#34; style=&#34;display: inline-block; width: 80px; height: 80px;&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;JavaGPT&lt;/h1&gt; &#xA;&lt;p&gt;A Java GUI that interfaces ChatGPT API.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/EbL1VRv.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chat Streaming &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Just like the website, responses will generate in real time&lt;/li&gt; &#xA;   &lt;li&gt;You can terminate a response while it is in progress&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Chat History &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;See and interact with previous chats&lt;/li&gt; &#xA;   &lt;li&gt;Saves chats as .json for easy external modification and viewing&lt;/li&gt; &#xA;   &lt;li&gt;Accessible through the &#34;Load Chat&#34; button&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/q3s1frY.gif&#34; alt=&#34;Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chat Titles &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Autogenerate titles like ChatGPT website&lt;/li&gt; &#xA;   &lt;li&gt;Manually name chats if preferred&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Revert Chats &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Be able to void previous prompts and responses from chat&lt;/li&gt; &#xA;   &lt;li&gt;You can revert multiple times&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;HTML Viewer &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;View your chat content in HTML&lt;/li&gt; &#xA;   &lt;li&gt;Supports Markdown Language syntax&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/W0pzIic.gif&#34; alt=&#34;HTML View&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Import premade prompts&lt;/li&gt; &#xA; &lt;li&gt;Save chats to file&lt;/li&gt; &#xA; &lt;li&gt;Support for ChatGPT 4, and 3.5 models&lt;/li&gt; &#xA; &lt;li&gt;Cross platform&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;To get started download the &lt;a href=&#34;https://github.com/FrankCYB/JavaGPT/releases/latest&#34; title=&#34;Latest release page&#34;&gt;latest release&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Afterwords, extract the archieve&lt;/p&gt; &#xA;&lt;p&gt;Then open the config.properties file in a text editor&lt;/p&gt; &#xA;&lt;p&gt;Add your &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34; title=&#34;ChatGPT API-Key&#34;&gt;ChatGPT API-Key&lt;/a&gt; on line 4 after &#34;apikey=&#34;&lt;/p&gt; &#xA;&lt;p&gt;Run JavaGPT.jar and enjoy! 😁&lt;/p&gt; &#xA;&lt;h2&gt;Config Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;apikey=ENTER_CHAT_GPT_API_KEY_HERE&#xA;model=gpt-3.5-turbo&#x9;&#x9;#Model used for ChatGPT Client (Supported Models: gpt-4, gpt-3.5-turbo, etc) &amp;gt; All supported models here &#34;https://platform.openai.com/docs/models/gpt-3-5&#34;&#xA;maxTokens=1024&#x9;&#x9;&#x9;#Max ammount of tokens allowed per ChatGPT API request&#xA;timeout=30&#x9;&#x9;&#x9;#Adjust allowed wait time for prompt response from ChatGPT API&#xA;proxyip= &#x9;&#x9;&#x9;#Proxy IP&#xA;proxyport= &#x9;&#x9;&#x9;#Proxy port number&#xA;proxytype= &#x9;&#x9;&#x9;#Options: SOCKS,HTTP,HTTPS&#xA;autotitle=true&#x9;&#x9;&#x9;#Adjusts wether new chats will automatically generate file name titles based on the context of the chat&#xA;autoscroll=true&#x9;&#x9;&#x9;#Adjusts wether chat will scroll as new text is added&#xA;EnterToSubmit=true&#x9;&#x9;#Adjusts wether the Enter key should be used to submit or to create new lines&#xA;chat_history=&#x9;&#x9;&#x9;#Adjust wether chats will save automatically&#xA;chat_location_override=&#x9;&#x9;#Overrides default &#34;chat_history&#34; folder path (Original path is set to the location of the jar file on runtime)&#xA;WindowSize=&#x9;&#x9;&#x9;#Adjusts JFrame (Window) size. Options: small,medium,large (Set to &#34;medium&#34; by default)&#xA;Theme=dark&#x9;&#x9;&#x9;#Themes JFrame (Window) to set config. Options: dark,light&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Java 8 or higher&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Important note for legacy systems&lt;/h2&gt; &#xA;&lt;p&gt;If your on a legacy Windows system such as 98, ME, 2000, and XP, there are additional steps involved to get Java 8 to run properly. &lt;br&gt; I made a guide on how to get Java 8 to run on these various OSs in a reddit thread. Link can be found &lt;a href=&#34;https://www.reddit.com/r/windows/comments/12t9ax3/comment/jh1h1qm/?utm_source=share&amp;amp;utm_medium=web2x&amp;amp;context=3&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Final notes&lt;/h2&gt; &#xA;&lt;p&gt;If you enjoy JavaGPT and would like to support me in future updates and projects, please feel free to show your support by buying me a ☕&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/FrankCYB&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: 41px !important;width: 174px !important;box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Also, shoutout to TheoKanning and his contributors for making &lt;a href=&#34;https://github.com/TheoKanning/openai-java&#34; title=&#34;Project page&#34;&gt;OpenAI-Java&lt;/a&gt; : A ChatGPT API wrapper for Java&lt;/p&gt; &#xA;&lt;p&gt;Made my life much easier 😁👍&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SolarisNeko/datetime233</title>
    <updated>2023-04-28T01:37:49Z</updated>
    <id>tag:github.com,2023-04-28:/SolarisNeko/datetime233</id>
    <link href="https://github.com/SolarisNeko/datetime233" rel="alternate"></link>
    <summary type="html">&lt;p&gt;DateTime233 is a zero-designed DateTime API by flux-style. 重新设计的整套 DateTime API~&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DateTime233&lt;/h1&gt; &#xA;&lt;h2&gt;Introduce | 简介&lt;/h2&gt; &#xA;&lt;p&gt;This is a zero-start design DateTime Utils, used to flux DateTime233 API.&lt;/p&gt; &#xA;&lt;p&gt;从 0 开始设计的 DateTime 工具, flux-style DateTime233 API.&lt;/p&gt; &#xA;&lt;h2&gt;Use&lt;/h2&gt; &#xA;&lt;h3&gt;maven&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;com.neko233&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;datetime233&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;0.0.5&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;gradle&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;implementation(&#34;com.neko233:datetime233:0.0.5&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Support JDK | JDK 版本支持&lt;/h2&gt; &#xA;&lt;p&gt;latest support version:&lt;/p&gt; &#xA;&lt;p&gt;JDK 8 = 0.0.5&lt;/p&gt; &#xA;&lt;p&gt;JDK 11 = 0.0.5&lt;/p&gt; &#xA;&lt;p&gt;JDK 17 = 0.0.5&lt;/p&gt; &#xA;&lt;h2&gt;Terminology 术语/概念须知&lt;/h2&gt; &#xA;&lt;p&gt;originTimeMs = millis second = 毫秒, 从 1970-01-01 00:00:00 至今&lt;/p&gt; &#xA;&lt;p&gt;zoneTimeMs = zone time ms = 时区下的毫秒, 从 1970-01-01 00:00:00 至今&lt;/p&gt; &#xA;&lt;p&gt;DateTime = yyyy-MM-dd HH:mm:ss 组成的日期时间&lt;/p&gt; &#xA;&lt;p&gt;Period = 周期 = [start, endMs] -&amp;gt; {startMs, endMs, expireMs, refreshMs}&lt;/p&gt; &#xA;&lt;p&gt;refreshMs = period refresh by refreshMs / time, like 100ms refresh , in 1 s have 10 refresh count.&lt;/p&gt; &#xA;&lt;h3&gt;介绍&lt;/h3&gt; &#xA;&lt;p&gt;DateTime233 is a flux-style utils, He can connect LocalDateTime/Date seamlessly.&lt;/p&gt; &#xA;&lt;p&gt;无缝衔接 JDK LocalDateTime 和 Date&lt;/p&gt; &#xA;&lt;p&gt;License 为 Apache2.0&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;h3&gt;Maven&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&#xA;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;com.neko233&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;datetime233&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;0.0.5&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Gradle&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;implementation group: &#39;com.neko233&#39;, name: &#39;datetime233&#39;, version: &#39;0.0.5&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;初衷 / 痛点&lt;/h2&gt; &#xA;&lt;p&gt;Enough of DateTime/Date, to do a lot of their own packaging. And there are few functions that are supported.&lt;/p&gt; &#xA;&lt;p&gt;受够了 LocalDateTime, Date 的局限性, 要做大量自己的封装. 并且支持的功能还很少.&lt;/p&gt; &#xA;&lt;h1&gt;Code&lt;/h1&gt; &#xA;&lt;h2&gt;Java&lt;/h2&gt; &#xA;&lt;h3&gt;DateTime233 日期时间&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;&#xA;import org.jetbrains.annotations.NotNull;&#xA;import org.junit.Assert;&#xA;import org.junit.Test;&#xA;&#xA;import java.text.SimpleDateFormat;&#xA;import java.time.DayOfWeek;&#xA;import java.time.LocalDateTime;&#xA;import java.time.format.DateTimeFormatter;&#xA;import java.util.Date;&#xA;import java.util.concurrent.TimeUnit;&#xA;&#xA;import static org.junit.Assert.assertEquals;&#xA;import static org.junit.Assert.assertThrows;&#xA;&#xA;/**&#xA; * @author SolarisNeko&#xA; * Date on 2023-04-23&#xA; */&#xA;public class DateTime233Test {&#xA;&#xA;    public static final String YYYY_MM_DD_HH_MM_SS = &#34;yyyy-MM-dd HH:mm:ss&#34;;&#xA;&#xA;&#xA;    @Test&#xA;    public void test_sync_jdk_dateTime() {&#xA;        DateTime233 of = DateTime233.of(&#34;2010-01-01&#34;, &#34;yyyy-MM-dd&#34;);&#xA;        LocalDateTime of1 = LocalDateTime.of(2010, 1, 1, 0, 0, 0);&#xA;&#xA;        for (int i = 0; i &amp;lt; 367; i++) {&#xA;            DateTime233 dateTime233 = of.plusDays(i);&#xA;            String jdkDateTimeString = of1.plusDays(i)&#xA;                    .format(DateTimeFormatter.ofPattern(YYYY_MM_DD_HH_MM_SS));&#xA;            assertEquals(jdkDateTimeString, dateTime233.toString(&#34;yyyy-MM-dd HH:mm:ss&#34;));&#xA;        }&#xA;    }&#xA;&#xA;&#xA;    @Test&#xA;    public void test_sync_jdk_weekday() {&#xA;        DateTime233 of = DateTime233.of(&#34;2010-01-01&#34;, &#34;yyyy-MM-dd&#34;);&#xA;        LocalDateTime of1 = LocalDateTime.of(2010, 1, 1, 0, 0, 0);&#xA;&#xA;        for (int i = 0; i &amp;lt; 367; i++) {&#xA;            DateTime233 dateTime233 = of.plusDays(i);&#xA;            DayOfWeek dayOfWeek = of1.plusDays(i)&#xA;                    .getDayOfWeek();&#xA;&#xA;            int jdkWeekDay = dayOfWeek.getValue();&#xA;            int weekDay = dateTime233.weekDay();&#xA;&#xA;            if (jdkWeekDay != weekDay) {&#xA;                String format = String.format(&#34;jdkWeek = %s, dateTime233 week = %s, dateTime = %s&#34;, jdkWeekDay, weekDay, dateTime233);&#xA;                System.err.println(format);&#xA;                Assert.fail();&#xA;            }&#xA;&#xA;        }&#xA;    }&#xA;&#xA;    @Test&#xA;    public void test_special_format_1() {&#xA;        DateTime233 of = DateTime233.of(&#34;2010/01/01&#34;, &#34;yyyy/MM/dd&#34;);&#xA;        assertEquals(&#34;2010-01-01 00:00:00&#34;, of.toString());&#xA;    }&#xA;&#xA;    @Test&#xA;    public void test_special_format_2() {&#xA;        DateTime233 of2 = DateTime233.of(&#34;2010.01.01&#34;, &#34;yyyy,MM,dd&#34;);&#xA;        assertEquals(&#34;2010-01-01 00:00:00&#34;, of2.toString());&#xA;    }&#xA;&#xA;    @Test&#xA;    public void test_special_format_3() {&#xA;        DateTime233 of3 = DateTime233.of(&#34;2010,01,01&#34;, &#34;yyyy.MM.dd&#34;);&#xA;        assertEquals(&#34;2010-01-01 00:00:00&#34;, of3.toString());&#xA;    }&#xA;&#xA;&#xA;    @Test&#xA;    public void test_weekday_1() {&#xA;        DateTime233 of = DateTime233.of(&#34;2010-01-31&#34;, &#34;yyyy-MM-dd&#34;);&#xA;        assertEquals(7, of.weekDay());&#xA;    }&#xA;&#xA;&#xA;    @Test&#xA;    public void test_weekday_2() {&#xA;        // 2023-12-31&#xA;        DateTime233 of = DateTime233.of(1703952000000L);&#xA;&#xA;        assertEquals(7, of.weekDay());&#xA;    }&#xA;&#xA;    @Test&#xA;    public void gmtOffset() {&#xA;        int zoneId = DateTime233.now().gmtZoneId();&#xA;        assertEquals(8, zoneId);&#xA;    }&#xA;&#xA;    @Test&#xA;    public void year() {&#xA;        int year = DateTime233.now().year();&#xA;        assertEquals(year, LocalDateTime.now().getYear());&#xA;    }&#xA;&#xA;    @Test&#xA;    public void year_set() {&#xA;        DateTime233 of = DateTime233.of(&#34;2010-01-01&#34;, &#34;yyyy-MM-dd&#34;);&#xA;        DateTime233 year1 = of.year(2020);&#xA;&#xA;        assertEquals(2020, year1.year());&#xA;        assertEquals(&#34;2020-01-01&#34;, year1.toString(&#34;yyyy-MM-dd&#34;));&#xA;    }&#xA;&#xA;    @Test&#xA;    public void month() {&#xA;        int month = DateTime233.now().month();&#xA;        assertEquals(month, LocalDateTime.now().getMonth().getValue());&#xA;    }&#xA;&#xA;    @Test&#xA;    public void month_set_ok() {&#xA;        DateTime233 of = DateTime233.of(&#34;2010-01-01&#34;, &#34;yyyy-MM-dd&#34;);&#xA;        DateTime233 dateTime = of.month(11);&#xA;&#xA;        assertEquals(11, dateTime.month());&#xA;        assertEquals(&#34;2010-11-01&#34;, dateTime.toString(&#34;yyyy-MM-dd&#34;));&#xA;    }&#xA;&#xA;    @Test&#xA;    public void month_set_error() {&#xA;        DateTime233 of = DateTime233.of(&#34;2010-01-01&#34;, &#34;yyyy-MM-dd&#34;);&#xA;&#xA;        assertThrows(IllegalArgumentException.class, () -&amp;gt; {&#xA;            DateTime233 dateTime = of.month(13);&#xA;        });&#xA;&#xA;    }&#xA;&#xA;&#xA;    @Test&#xA;    public void day() {&#xA;        int day = DateTime233.now().day();&#xA;        assertEquals(day, LocalDateTime.now().getDayOfMonth());&#xA;    }&#xA;&#xA;    @Test&#xA;    public void day_set() {&#xA;        DateTime233 of = DateTime233.of(&#34;2010-01-01&#34;, &#34;yyyy-MM-dd&#34;);&#xA;        DateTime233 dateTime = of.day(10);&#xA;&#xA;        assertEquals(10, dateTime.day());&#xA;        assertEquals(&#34;2010-01-10&#34;, dateTime.toString(&#34;yyyy-MM-dd&#34;));&#xA;    }&#xA;&#xA;&#xA;    @Test&#xA;    public void hour() {&#xA;        int hour = DateTime233.now().hour();&#xA;        assertEquals(hour, LocalDateTime.now().getHour());&#xA;    }&#xA;&#xA;&#xA;    @Test&#xA;    public void hour_set() {&#xA;        DateTime233 of = DateTime233.of(&#34;2010-01-01 00:00:00&#34;, &#34;yyyy-MM-dd HH:mm:ss&#34;);&#xA;        DateTime233 dateTime = of.hour(10);&#xA;&#xA;        assertEquals(10, dateTime.hour());&#xA;        assertEquals(&#34;2010-01-01 10:00:00&#34;, dateTime.toString(&#34;yyyy-MM-dd HH:mm:ss&#34;));&#xA;    }&#xA;&#xA;&#xA;    @Test&#xA;    public void minute() {&#xA;        int minute = DateTime233.now().minute();&#xA;        assertEquals(minute, LocalDateTime.now().getMinute());&#xA;    }&#xA;&#xA;&#xA;    @Test&#xA;    public void minute_set() {&#xA;        DateTime233 of = DateTime233.of(&#34;2010-01-01 00:00:00&#34;, &#34;yyyy-MM-dd HH:mm:ss&#34;);&#xA;        DateTime233 dateTime = of.minute(10);&#xA;&#xA;        assertEquals(10, dateTime.minute());&#xA;        assertEquals(&#34;2010-01-01 00:10:00&#34;, dateTime.toString(&#34;yyyy-MM-dd HH:mm:ss&#34;));&#xA;    }&#xA;&#xA;&#xA;    @Test&#xA;    public void second() {&#xA;        int second = DateTime233.now().second();&#xA;        assertEquals(second, LocalDateTime.now().getSecond());&#xA;    }&#xA;&#xA;&#xA;    @Test&#xA;    public void second_set() {&#xA;        DateTime233 of = DateTime233.of(&#34;2010-01-01 00:00:00&#34;, &#34;yyyy-MM-dd HH:mm:ss&#34;);&#xA;        DateTime233 dateTime = of.second(10);&#xA;&#xA;        assertEquals(10, dateTime.second());&#xA;        assertEquals(&#34;2010-01-01 00:00:10&#34;, dateTime.toString(&#34;yyyy-MM-dd HH:mm:ss&#34;));&#xA;    }&#xA;&#xA;&#xA;    @Test&#xA;    public void plusYears() {&#xA;        DateTime233 dateTime = DateTime233.now().plusYears(1);&#xA;        assertEquals(getDateTimeString(LocalDateTime.now().plusYears(1)), dateTime.toString());&#xA;    }&#xA;&#xA;    @Test&#xA;    public void minusYears() {&#xA;        DateTime233 dateTime = DateTime233.now().minusYears(1);&#xA;        if (dateTime.isLearYear()) {&#xA;            dateTime = dateTime.plusDays(1);&#xA;        }&#xA;        assertEquals(getDateTimeString(LocalDateTime.now().minusYears(1)), dateTime.toString());&#xA;    }&#xA;&#xA;    @Test&#xA;    public void plusMonths() {&#xA;        DateTime233 dateTime = DateTime233.now().plusMonths(1);&#xA;        assertEquals(getDateTimeString(LocalDateTime.now().plusMonths(1)), dateTime.toString());&#xA;    }&#xA;&#xA;    @Test&#xA;    public void minusMonths() {&#xA;        DateTime233 dateTime = DateTime233.now().minusMonths(1);&#xA;        assertEquals(getDateTimeString(LocalDateTime.now().minusMonths(1)), dateTime.toString());&#xA;    }&#xA;&#xA;    @Test&#xA;    public void plusDays() {&#xA;        DateTime233 dateTime = DateTime233.now().plusDays(1);&#xA;        LocalDateTime now = LocalDateTime.now();&#xA;        assertEquals(getDateTimeString(now.plusDays(1)), dateTime.toString());&#xA;    }&#xA;&#xA;&#xA;    @Test&#xA;    public void minusDays() {&#xA;        DateTime233 dateTime = DateTime233.now().minusDays(1);&#xA;        assertEquals(getDateTimeString(LocalDateTime.now().minusDays(1)), dateTime.toString());&#xA;    }&#xA;&#xA;    @Test&#xA;    public void plusHours() {&#xA;        DateTime233 dateTime = DateTime233.now().plusHours(1);&#xA;        assertEquals(getDateTimeString(LocalDateTime.now().plusHours(1)), dateTime.toString());&#xA;    }&#xA;&#xA;    @Test&#xA;    public void minusHours() {&#xA;        DateTime233 dateTime = DateTime233.now().minusHours(1);&#xA;        assertEquals(getDateTimeString(LocalDateTime.now().minusHours(1)), dateTime.toString());&#xA;    }&#xA;&#xA;    @Test&#xA;    public void plusMinutes() {&#xA;        DateTime233 dateTime = DateTime233.now().plusMinutes(1);&#xA;        assertEquals(getDateTimeString(LocalDateTime.now().plusMinutes(1)), dateTime.toString());&#xA;    }&#xA;&#xA;    @Test&#xA;    public void minusMinutes() {&#xA;        DateTime233 dateTime = DateTime233.now().minusMinutes(1);&#xA;        assertEquals(getDateTimeString(LocalDateTime.now().minusMinutes(1)), dateTime.toString());&#xA;    }&#xA;&#xA;    @Test&#xA;    public void plusSeconds() {&#xA;        DateTime233 dateTime = DateTime233.now().plusSeconds(1);&#xA;        assertEquals(getDateTimeString(LocalDateTime.now().plusSeconds(1)), dateTime.toString());&#xA;    }&#xA;&#xA;    @NotNull&#xA;    private static String getDateTimeString(LocalDateTime dateTime) {&#xA;        return dateTime&#xA;                .format(DateTimeFormatter.ofPattern(&#34;yyyy-MM-dd HH:mm:ss&#34;));&#xA;    }&#xA;&#xA;&#xA;    @Test&#xA;    public void toLocalDateTime() {&#xA;        DateTime233 now = DateTime233.now();&#xA;        LocalDateTime localDateTime = now.toLocalDateTime();&#xA;&#xA;        String format = localDateTime.format(DateTimeFormatter.ofPattern(YYYY_MM_DD_HH_MM_SS));&#xA;        assertEquals(format, now.toString());&#xA;    }&#xA;&#xA;    @Test&#xA;    public void toDate() {&#xA;        DateTime233 now = DateTime233.now();&#xA;        Date date = now.toDate();&#xA;        String format = new SimpleDateFormat(YYYY_MM_DD_HH_MM_SS).format(date);&#xA;        assertEquals(format, now.toString());&#xA;    }&#xA;&#xA;    @Test&#xA;    public void getWeekday_Monday_1() {&#xA;        // 周一&#xA;        DateTime233 of = DateTime233.of(&#34;2023-01-09 09:00:00&#34;, &#34;yyyy-MM-dd HH:mm:ss&#34;);&#xA;        int weekDay = of.weekDay();&#xA;        assertEquals(1, weekDay);&#xA;    }&#xA;&#xA;    @Test&#xA;    public void getWeekday_Tuesday_2() {&#xA;        // 周二&#xA;        DateTime233 of = DateTime233.of(&#34;2023-01-10 09:00:00&#34;, &#34;yyyy-MM-dd HH:mm:ss&#34;);&#xA;        int weekDay = of.weekDay();&#xA;        assertEquals(2, weekDay);&#xA;    }&#xA;&#xA;    @Test&#xA;    public void getWeekday_Wednesday_3() {&#xA;        // 周三&#xA;        DateTime233 of = DateTime233.of(&#34;2023-01-11 09:00:00&#34;, &#34;yyyy-MM-dd HH:mm:ss&#34;);&#xA;        int weekDay = of.weekDay();&#xA;        assertEquals(3, weekDay);&#xA;    }&#xA;&#xA;    @Test&#xA;    public void getWeekday_Thursday_4() {&#xA;        // 周四&#xA;        DateTime233 of = DateTime233.of(&#34;2023-01-12 09:00:00&#34;, &#34;yyyy-MM-dd HH:mm:ss&#34;);&#xA;        int weekDay = of.weekDay();&#xA;        assertEquals(4, weekDay);&#xA;    }&#xA;&#xA;    @Test&#xA;    public void getWeekday_Friday_5() {&#xA;        // 周五&#xA;        DateTime233 of = DateTime233.of(&#34;2023-01-13 09:00:00&#34;, &#34;yyyy-MM-dd HH:mm:ss&#34;);&#xA;        int weekDay = of.weekDay();&#xA;        assertEquals(5, weekDay);&#xA;    }&#xA;&#xA;    @Test&#xA;    public void getWeekday_Saturday_6() {&#xA;        // 周六&#xA;        DateTime233 of = DateTime233.of(&#34;2023-01-14 09:00:00&#34;, &#34;yyyy-MM-dd HH:mm:ss&#34;);&#xA;        int weekDay = of.weekDay();&#xA;        assertEquals(6, weekDay);&#xA;    }&#xA;&#xA;    @Test&#xA;    public void getWeekday_Sunday_7() {&#xA;        // 周日&#xA;        DateTime233 of = DateTime233.of(&#34;2023-01-15 09:00:00&#34;, &#34;yyyy-MM-dd HH:mm:ss&#34;);&#xA;        int weekDay = of.weekDay();&#xA;        assertEquals(7, weekDay);&#xA;    }&#xA;&#xA;    @Test&#xA;    public void getWeekday_sameTo_jdk_LocalDateTime() {&#xA;        int weekDay = DateTime233.now().weekDay();&#xA;        assertEquals(LocalDateTime.now().getDayOfWeek().getValue(), weekDay);&#xA;    }&#xA;&#xA;    @Test&#xA;    public void isEquals() {&#xA;        DateTime233 one = DateTime233.of(&#34;2023-01-01&#34;, &#34;yyyy-MM-dd&#34;);&#xA;        DateTime233 two = DateTime233.of(&#34;2023-01-01&#34;, &#34;yyyy-MM-dd&#34;);&#xA;        assertEquals(true, one.isEquals(two));&#xA;    }&#xA;&#xA;    @Test&#xA;    public void isAfter() {&#xA;        DateTime233 one = DateTime233.of(&#34;2023-01-02&#34;, &#34;yyyy-MM-dd&#34;);&#xA;        DateTime233 two = DateTime233.of(&#34;2023-01-01&#34;, &#34;yyyy-MM-dd&#34;);&#xA;        assertEquals(true, one.isAfter(two));&#xA;    }&#xA;&#xA;    @Test&#xA;    public void isBefore() {&#xA;        DateTime233 one = DateTime233.of(&#34;2023-01-01&#34;, &#34;yyyy-MM-dd&#34;);&#xA;        DateTime233 two = DateTime233.of(&#34;2023-01-02&#34;, &#34;yyyy-MM-dd&#34;);&#xA;        assertEquals(true, one.isBefore(two));&#xA;    }&#xA;&#xA;    @Test&#xA;    public void diff() {&#xA;        DateTime233 one = DateTime233.of(&#34;2023-01-01&#34;, &#34;yyyy-MM-dd&#34;);&#xA;        DateTime233 two = DateTime233.of(&#34;2023-01-02&#34;, &#34;yyyy-MM-dd&#34;);&#xA;        assertEquals(-1, one.diff(two, TimeUnit.DAYS));&#xA;    }&#xA;&#xA;    @Test&#xA;    public void diffAbs() {&#xA;        DateTime233 one = DateTime233.of(&#34;2023-01-01&#34;, &#34;yyyy-MM-dd&#34;);&#xA;        DateTime233 two = DateTime233.of(&#34;2023-01-02&#34;, &#34;yyyy-MM-dd&#34;);&#xA;        assertEquals(1, one.diffAbs(two, TimeUnit.DAYS));&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Period233 周期&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;&#xA;&#xA;import com.neko233.datetime.DateTime233;&#xA;import org.junit.Assert;&#xA;import org.junit.Test;&#xA;&#xA;import java.util.List;&#xA;import java.util.concurrent.TimeUnit;&#xA;import java.util.stream.Collectors;&#xA;&#xA;/**&#xA; * @author SolarisNeko&#xA; * Date on 2023-04-25&#xA; */&#xA;public class Period233Test {&#xA;&#xA;&#xA;&#xA;    @Test&#xA;    public void getAllWeekends() {&#xA;        DateTime233 of = DateTime233.of(&#34;2023-01-01&#34;, &#34;yyyy-MM-dd&#34;);&#xA;        DateTime233 end = DateTime233.of(&#34;2024-01-01&#34;, &#34;yyyy-MM-dd&#34;);&#xA;        Period233 between = Period233.between(of, end);&#xA;&#xA;&#xA;        List&amp;lt;String&amp;gt; collect = between.getAllWeekends()&#xA;                .stream()&#xA;                .map(DateTime233::toString)&#xA;                .collect(Collectors.toList());&#xA;&#xA;&#xA;    }&#xA;&#xA;    @Test&#xA;    public void step() {&#xA;        DateTime233 of = DateTime233.of(&#34;2023-01-01&#34;, &#34;yyyy-MM-dd&#34;);&#xA;        DateTime233 end = DateTime233.of(&#34;2024-01-01&#34;, &#34;yyyy-MM-dd&#34;);&#xA;        Period233 between = Period233.between(of, end);&#xA;&#xA;        PeriodDaddy233 periodDaddy = between.splitByFixTimeStep(1, TimeUnit.DAYS);&#xA;        int childPeriodCount = periodDaddy.getChildPeriodCount();&#xA;&#xA;        Assert.assertEquals(365, childPeriodCount);&#xA;    }&#xA;&#xA;    @Test&#xA;    public void dynamic() {&#xA;        DateTime233 of = DateTime233.of(&#34;2023-01-01&#34;, &#34;yyyy-MM-dd&#34;);&#xA;        DateTime233 end = DateTime233.of(&#34;2024-01-01&#34;, &#34;yyyy-MM-dd&#34;);&#xA;        Period233 between = Period233.between(of, end);&#xA;&#xA;        PeriodDaddy233 periodsChain = between.generateDynamicPeriod((count) -&amp;gt; {&#xA;            return count * TimeUnit.DAYS.toMillis(1);&#xA;        }, (count) -&amp;gt; {&#xA;            return 0L;&#xA;        });&#xA;        periodsChain.forEach(period -&amp;gt; {&#xA;            DateTime233 startDt = DateTime233.of(period.getStartMs());&#xA;            DateTime233 endDt = DateTime233.of(period.getEndMs());&#xA;            DateTime233 expireDt = DateTime233.of(period.getExpireMs());&#xA;        });&#xA;    }&#xA;&#xA;    @Test&#xA;    public void step_complex() {&#xA;        DateTime233 of = DateTime233.of(&#34;2023-01-01&#34;, &#34;yyyy-MM-dd&#34;);&#xA;        DateTime233 end = DateTime233.of(&#34;2024-01-01&#34;, &#34;yyyy-MM-dd&#34;);&#xA;        Period233 between = Period233.between(of, end);&#xA;&#xA;        PeriodDaddy233 periodsDad = between.splitByFixTimeStep(30, TimeUnit.DAYS, 30, TimeUnit.DAYS);&#xA;        periodsDad.forEach(period -&amp;gt; {&#xA;            DateTime233 startDt = DateTime233.of(period.getStartMs());&#xA;            DateTime233 endDt = DateTime233.of(period.getEndMs());&#xA;            DateTime233 expireDt = DateTime233.of(period.getExpireMs());&#xA;        });&#xA;    }&#xA;&#xA;&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>