<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-28T01:33:54Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>apache/incubator-celeborn</title>
    <updated>2022-11-28T01:33:54Z</updated>
    <id>tag:github.com,2022-11-28:/apache/incubator-celeborn</id>
    <link href="https://github.com/apache/incubator-celeborn" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Apache Celeborn is an elastic and high-performance service for shuffle and spilled data.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Apache Celeborn (Incubating)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apache/incubator-celeborn/actions/workflows/maven.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/incubator-celeborn/actions/workflows/maven.yml/badge.svg?sanitize=true&#34; alt=&#34;Celeborn CI&#34;&gt;&lt;/a&gt;&lt;br&gt; Celeborn is dedicated to improving the efficiency and elasticity of different map-reduce engines and provides an elastic, high-efficient management service for shuffle data.&lt;/p&gt; &#xA;&lt;h2&gt;Internals&lt;/h2&gt; &#xA;&lt;h3&gt;Architecture&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apache/incubator-celeborn/main/assets/img/rss.jpg&#34; alt=&#34;Celeborn architecture&#34;&gt; Celeborn has three primary components: Master, Worker, and Client. Master manages all resources and syncs shard states with each other based on Raft. Worker processes read-write requests and merges data for each reducer. LifecycleManager maintains metadata of each shuffle and runs within the Spark driver.&lt;/p&gt; &#xA;&lt;h3&gt;Feature&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Disaggregate Compute and storage.&lt;/li&gt; &#xA; &lt;li&gt;Push-based shuffle write and merged shuffle read.&lt;/li&gt; &#xA; &lt;li&gt;High availability and high fault tolerance.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Shuffle Process&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apache/incubator-celeborn/main/assets/img/shuffle-procedure.jpg&#34; alt=&#34;Celeborn shuffle&#34;&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Mappers lazily ask LifecycleManager to registerShuffle.&lt;/li&gt; &#xA; &lt;li&gt;LifecycleManager requests slots from Master.&lt;/li&gt; &#xA; &lt;li&gt;Workers reserve slots and create corresponding files.&lt;/li&gt; &#xA; &lt;li&gt;Mappers get worker locations from LifecycleManager.&lt;/li&gt; &#xA; &lt;li&gt;Mappers push data to specified workers.&lt;/li&gt; &#xA; &lt;li&gt;Workers merge and replicate data to its peer.&lt;/li&gt; &#xA; &lt;li&gt;Workers flush to disk periodically.&lt;/li&gt; &#xA; &lt;li&gt;Mapper tasks accomplish and trigger MapperEnd event.&lt;/li&gt; &#xA; &lt;li&gt;When all mapper tasks are complete, workers commit files.&lt;/li&gt; &#xA; &lt;li&gt;Reducers ask for file locations.&lt;/li&gt; &#xA; &lt;li&gt;Reducers read shuffle data.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Load Balance&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apache/incubator-celeborn/main/assets/img/rss_load_balance.jpg&#34; alt=&#34;Load Balance&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;We introduce slots to achieve load balance. We will equally distribute partitions on every Celeborn worker by tracking slots usage. The Slot is a logical concept in Celeborn Worker that represents how many partitions can be allocated on each Celeborn Worker. Celeborn Worker&#39;s slot count is decided by &lt;code&gt;total usable disk size / average shuffle file size&lt;/code&gt;. Celeborn worker&#39;s slot count decreases when a partition is allocated and increments when a partition is freed.&lt;/p&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;Celeborn supports Spark 2.4/3.0/3.1/3.2/3.3 and only tested under Java 8.&lt;/p&gt; &#xA;&lt;p&gt;Build for Spark&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./dev/make-distribution.sh -Pspark-2.4/-Pspark-3.0/-Pspark-3.1/-Pspark-3.2/-Pspark-3.3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;package apache-celeborn-${project.version}-bin.tgz will be generated.&lt;/p&gt; &#xA;&lt;h3&gt;Package Details&lt;/h3&gt; &#xA;&lt;p&gt;Build procedure will create a compressed package.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    ├── RELEASE                         &#xA;    ├── bin                             &#xA;    ├── conf                            &#xA;    ├── master-jars                     &#xA;    ├── worker-jars                     &#xA;    ├── sbin                            &#xA;    └── spark          // Spark client jars&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Compatibility&lt;/h3&gt; &#xA;&lt;p&gt;Celeborn server is compatible with all supported Spark versions. You can run different Spark versions with the same Celeborn server. It doesn&#39;t matter whether Celeborn server is compiled with -Pspark-2.4/3.0/3.1/3.2/3.3. However, Celeborn client must be consistent with the version of the Spark. For example, if you are running Spark 2.4, you must compile Celeborn client with -Pspark-2.4; if you are running Spark 3.2, you must compile Celeborn client with -Pspark-3.2.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Celeborn cluster composes of Master and Worker nodes, the Master supports both single and HA mode(Raft-based) deployments.&lt;/p&gt; &#xA;&lt;h3&gt;Deploy Celeborn&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Unzip the tarball to &lt;code&gt;$CELEBORN_HOME&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Modify environment variables in &lt;code&gt;$CELEBORN_HOME/conf/celeborn-env.sh&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;EXAMPLE:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;#!/usr/bin/env bash&#xA;CELEBORN_MASTER_MEMORY=4g&#xA;CELEBORN_WORKER_MEMORY=2g&#xA;CELEBORN_WORKER_OFFHEAP_MEMORY=4g&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Modify configurations in &lt;code&gt;$CELEBORN_HOME/conf/celeborn-defaults.conf&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;EXAMPLE: single master cluster&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;# used by client and worker to connect to master&#xA;celeborn.master.endpoints clb-master:9097&#xA;&#xA;# used by master to bootstrap&#xA;celeborn.master.host clb-master&#xA;celeborn.master.port 9097&#xA;&#xA;celeborn.metrics.enabled true&#xA;celeborn.worker.flush.buffer.size 256k&#xA;celeborn.worker.storage.dirs /mnt/disk1/,/mnt/disk2&#xA;# If your hosts have disk raid or use lvm, set celeborn.worker.monitor.disk.enabled to false&#xA;celeborn.worker.monitor.disk.enabled false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;EXAMPLE: HA cluster&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;# used by client and worker to connect to master&#xA;celeborn.master.endpoints clb-1:9097,clb-2:9098,clb-3:9099&#xA;&#xA;# used by master nodes to bootstrap, every node should know the topology of whole cluster, for each node,&#xA;# `celeborn.ha.master.node.id` should be unique, and `celeborn.ha.master.node.&amp;lt;id&amp;gt;.host` is required&#xA;celeborn.ha.enabled true&#xA;celeborn.ha.master.node.id 1&#xA;celeborn.ha.master.node.1.host clb-1&#xA;celeborn.ha.master.node.1.port 9097&#xA;celeborn.ha.master.node.1.ratis.port 9872&#xA;celeborn.ha.master.node.2.host clb-2&#xA;celeborn.ha.master.node.2.port 9098&#xA;celeborn.ha.master.node.2.ratis.port 9873&#xA;celeborn.ha.master.node.3.host clb-3&#xA;celeborn.ha.master.node.3.port 9099&#xA;celeborn.ha.master.node.3.ratis.port 9874&#xA;celeborn.ha.master.ratis.raft.server.storage.dir /mnt/disk1/rss_ratis/&#xA;&#xA;celeborn.metrics.enabled true&#xA;celeborn.worker.flush.buffer.size 256k&#xA;celeborn.worker.storage.dirs /mnt/disk1/,/mnt/disk2&#xA;# If your hosts have disk raid or use lvm, set celeborn.worker.monitor.disk.enabled to false&#xA;celeborn.worker.monitor.disk.enabled false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Copy Celeborn and configurations to all nodes&lt;/li&gt; &#xA; &lt;li&gt;Start Celeborn master &lt;code&gt;$CELEBORN_HOME/sbin/start-master.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Start Celeborn worker For single master cluster : &lt;code&gt;$CELEBORN_HOME/sbin/start-worker.sh rss://&amp;lt;master-host&amp;gt;:&amp;lt;master-port&amp;gt;&lt;/code&gt; For HA cluster :&lt;code&gt;$CELEBORN_HOME/sbin/start-worker.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;If Celeborn start success, the output of Master&#39;s log should be like this:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-angular2html&#34;&gt;22/10/08 19:29:11,805 INFO [main] Dispatcher: Dispatcher numThreads: 64&#xA;22/10/08 19:29:11,875 INFO [main] TransportClientFactory: mode NIO threads 64&#xA;22/10/08 19:29:12,057 INFO [main] Utils: Successfully started service &#39;MasterSys&#39; on port 9097.&#xA;22/10/08 19:29:12,113 INFO [main] Master: Metrics system enabled.&#xA;22/10/08 19:29:12,125 INFO [main] HttpServer: master: HttpServer started on port 9098.&#xA;22/10/08 19:29:12,126 INFO [main] Master: Master started.&#xA;22/10/08 19:29:57,842 INFO [dispatcher-event-loop-19] Master: Registered worker&#xA;Host: 192.168.15.140&#xA;RpcPort: 37359&#xA;PushPort: 38303&#xA;FetchPort: 37569&#xA;ReplicatePort: 37093&#xA;SlotsUsed: 0()&#xA;LastHeartbeat: 0&#xA;Disks: {/mnt/disk1=DiskInfo(maxSlots: 6679, committed shuffles 0 shuffleAllocations: Map(), mountPoint: /mnt/disk1, usableSpace: 448284381184, avgFlushTime: 0, activeSlots: 0) status: HEALTHY dirs , /mnt/disk3=DiskInfo(maxSlots: 6716, committed shuffles 0 shuffleAllocations: Map(), mountPoint: /mnt/disk3, usableSpace: 450755608576, avgFlushTime: 0, activeSlots: 0) status: HEALTHY dirs , /mnt/disk2=DiskInfo(maxSlots: 6713, committed shuffles 0 shuffleAllocations: Map(), mountPoint: /mnt/disk2, usableSpace: 450532900864, avgFlushTime: 0, activeSlots: 0) status: HEALTHY dirs , /mnt/disk4=DiskInfo(maxSlots: 6712, committed shuffles 0 shuffleAllocations: Map(), mountPoint: /mnt/disk4, usableSpace: 450456805376, avgFlushTime: 0, activeSlots: 0) status: HEALTHY dirs }&#xA;WorkerRef: null&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Deploy Spark client&lt;/h3&gt; &#xA;&lt;p&gt;Copy $CELEBORN_HOME/spark/*.jar to $SPARK_HOME/jars/&lt;/p&gt; &#xA;&lt;h3&gt;Spark Configuration&lt;/h3&gt; &#xA;&lt;p&gt;To use Celeborn, following spark configurations should be added.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;spark.shuffle.manager org.apache.spark.shuffle.celeborn.RssShuffleManager&#xA;# must use kryo serializer because java serializer do not support relocation&#xA;spark.serializer org.apache.spark.serializer.KryoSerializer&#xA;&#xA;# celeborn master&#xA;spark.celeborn.master.endpoints clb-1:9097,clb-2:9098,clb-3:9099&#xA;spark.shuffle.service.enabled false&#xA;&#xA;# options: hash, sort&#xA;# Hash shuffle writer use (partition count) * (celeborn.push.buffer.size) * (spark.executor.cores) memory.&#xA;# Sort shuffle writer use less memory than hash shuffle writer, if your shuffle partition count is large, try to use sort hash writer.  &#xA;spark.celeborn.shuffle.writer.mode hash&#xA;&#xA;# we recommend set spark.celeborn.push.replicate.enabled to true to enable server-side data replication &#xA;spark.celeborn.push.replicate.enabled true&#xA;&#xA;# Support for Spark AQE only tested under Spark 3&#xA;# we recommend set localShuffleReader to false to get better performance of Celeborn&#xA;spark.sql.adaptive.localShuffleReader.enabled false&#xA;&#xA;# we recommend enabling aqe support to gain better performance&#xA;spark.sql.adaptive.enabled true&#xA;spark.sql.adaptive.skewJoin.enabled true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Best Practice&lt;/h3&gt; &#xA;&lt;p&gt;If you want to set up a production-ready Celeborn cluster, your cluster should have at least 3 masters and at least 4 workers. Masters and works can be deployed on the same node but should not deploy multiple masters or workers on the same node. See more detail in &lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-celeborn/main/docs/configuration.md&#34;&gt;CONFIGURATIONS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Support Spark Dynamic Allocation&lt;/h3&gt; &#xA;&lt;p&gt;We provide a patch to enable users to use Spark with both Dynamic Resource Allocation(DRA) and Celeborn. For Spark2.x check &lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-celeborn/main/assets/spark-patch/RSS_RDA_spark2.patch&#34;&gt;Spark2 Patch&lt;/a&gt;.&lt;br&gt; For Spark3.x check &lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-celeborn/main/assets/spark-patch/RSS_RDA_spark3.patch&#34;&gt;Spark3 Patch&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Metrics&lt;/h3&gt; &#xA;&lt;p&gt;Celeborn has various metrics. &lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-celeborn/main/METRICS.md&#34;&gt;METRICS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Community and Support&lt;/h2&gt; &#xA;&lt;h3&gt;Subscribe Mailing Lists&lt;/h3&gt; &#xA;&lt;p&gt;Mail List is the most recognized form of communication in Apache community. Contact us through the following mailing list.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Name&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Scope&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;mailto:dev@celeborn.apache.org&#34;&gt;dev@celeborn.apache.org&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Development-related discussions&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;mailto:dev-subscribe@celeborn.apache.org&#34;&gt;Subscribe&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;mailto:dev-unsubscribe@celeborn.apache.org&#34;&gt;Unsubscribe&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://mail-archives.apache.org/mod_mbox/celeborn-dev/&#34;&gt;Archives&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Report Issues or Submit Pull Request&lt;/h3&gt; &#xA;&lt;p&gt;If you meet any questions, feel free to file a 🔗&lt;a href=&#34;https://issues.apache.org/jira/projects/CELEBORN/issues&#34;&gt;Jira Ticket&lt;/a&gt; or connect us on Slack 🔗&lt;a href=&#34;https://join.slack.com/t/apachecelebor-kw08030/shared_invite/zt-1ju3hd5j8-4Z5keMdzpcVMspe4UJzF4Q&#34;&gt;Slack&lt;/a&gt; and fix it by submitting a 🔗&lt;a href=&#34;https://github.com/apache/incubator-celeborn/pulls&#34;&gt;Pull Request&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;How to Contribute&lt;/h3&gt; &#xA;&lt;p&gt;This is an active open-source project. We are always open to developers who want to use the system or contribute to it. See more detail in &lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-celeborn/main/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;NOTICE&lt;/h2&gt; &#xA;&lt;p&gt;If you need to fully restart a Celeborn cluster in HA mode, you must clean ratis meta storage first because ratis meta will store expired states of the last running cluster.&lt;/p&gt; &#xA;&lt;p&gt;Here are some instructions:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Stop all workers.&lt;/li&gt; &#xA; &lt;li&gt;Stop all masters.&lt;/li&gt; &#xA; &lt;li&gt;Clean all master&#39;s ratis meta storage directory(celeborn.ha.master.ratis.raft.server.storage.dir).&lt;/li&gt; &#xA; &lt;li&gt;Start all masters.&lt;/li&gt; &#xA; &lt;li&gt;Start all workers.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>spring-projects-experimental/spring-modulith</title>
    <updated>2022-11-28T01:33:54Z</updated>
    <id>tag:github.com,2022-11-28:/spring-projects-experimental/spring-modulith</id>
    <link href="https://github.com/spring-projects-experimental/spring-modulith" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Spring Modulith&lt;/h1&gt; &#xA;&lt;div id=&#34;preamble&#34;&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Spring Modulith allows developers to build well-structured Spring Boot applications and guides developers in finding and working with &lt;a href=&#34;https://docs.spring.io/spring-modulith/docs/current-SNAPSHOT/reference/html/#fundamentals.modules.application-modules&#34;&gt;application modules&lt;/a&gt; driven by the domain. It supports the &lt;a href=&#34;https://docs.spring.io/spring-modulith/docs/current-SNAPSHOT/reference/html/#verification&#34;&gt;verification&lt;/a&gt; of such modular arrangements, &lt;a href=&#34;https://docs.spring.io/spring-modulith/docs/current-SNAPSHOT/reference/html/#testing&#34;&gt;integration testing&lt;/a&gt; individual modules, &lt;a href=&#34;https://docs.spring.io/spring-modulith/docs/current-SNAPSHOT/reference/html/#observability&#34;&gt;observing&lt;/a&gt; the application’s behavior on the module level and creating &lt;a href=&#34;https://docs.spring.io/spring-modulith/docs/current-SNAPSHOT/reference/html/#documentation&#34;&gt;documentation snippets&lt;/a&gt; based on the arrangement created.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_quickstart&#34;&gt;Quickstart&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;olist arabic&#34;&gt; &#xA;   &lt;ol class=&#34;arabic&#34;&gt; &#xA;    &lt;li&gt; &lt;p&gt;Create a Spring Boot application on &lt;a href=&#34;https://start.spring.io&#34; class=&#34;bare&#34;&gt;https://start.spring.io&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Create a Java package arrangement that puts business modules as &lt;a href=&#34;https://docs.spring.io/spring-modulith/docs/current-SNAPSHOT/reference/html/#fundamentals&#34;&gt;direct sub-packages of the application’s main package&lt;/a&gt;.&lt;/p&gt; &#xA;     &lt;div class=&#34;listingblock&#34;&gt; &#xA;      &lt;div class=&#34;content&#34;&gt; &#xA;       &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;□ Example&#xA;└─ □ src/main/java&#xA;   ├─ □ example           &amp;lt;1&amp;gt;&#xA;   |  └─ Application.java&#xA;   ├─ □ example.inventory &amp;lt;2&amp;gt;&#xA;   |  └─ …&#xA;   └─ □ example.order     &amp;lt;2&amp;gt;&#xA;      └─ …&lt;/code&gt;&lt;/pre&gt; &#xA;      &lt;/div&gt; &#xA;     &lt;/div&gt; &#xA;     &lt;div class=&#34;colist arabic&#34;&gt; &#xA;      &lt;ol&gt; &#xA;       &lt;li&gt; &lt;p&gt;The application root package&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;Application module packages&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;/ol&gt; &#xA;     &lt;/div&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Create &lt;a href=&#34;https://docs.spring.io/spring-modulith/docs/current-SNAPSHOT/reference/html/#fundamentals.modules.application-modules&#34;&gt;an &lt;code&gt;ApplicationModules&lt;/code&gt; model&lt;/a&gt;, run &lt;a href=&#34;https://docs.spring.io/spring-modulith/docs/current-SNAPSHOT/reference/html/#verification&#34;&gt;verifications&lt;/a&gt; and &lt;a href=&#34;https://docs.spring.io/spring-modulith/docs/current-SNAPSHOT/reference/html/#documentation&#34;&gt;create documentation snippets&lt;/a&gt;.&lt;/p&gt; &#xA;     &lt;div class=&#34;listingblock&#34;&gt; &#xA;      &lt;div class=&#34;content&#34;&gt; &#xA;       &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;class ApplicationTests {&#xA;&#xA;  @Test&#xA;  void writeDocumentationSnippets() {&#xA;&#xA;    var modules = ApplicationModules.of(Application.class).verify(); &lt;b class=&#34;conum&#34;&gt;(1)&lt;/b&gt;&#xA;&#xA;    new Documenter(modules) &lt;b class=&#34;conum&#34;&gt;(2)&lt;/b&gt;&#xA;      .writeModulesAsPlantUml()&#xA;      .writeIndividualModulesAsPlantUml();&#xA;  }&#xA;}&lt;/code&gt;&lt;/pre&gt; &#xA;      &lt;/div&gt; &#xA;     &lt;/div&gt; &#xA;     &lt;div class=&#34;colist arabic&#34;&gt; &#xA;      &lt;ol&gt; &#xA;       &lt;li&gt; &lt;p&gt;Creates application module model and &lt;a href=&#34;https://docs.spring.io/spring-modulith/docs/current-SNAPSHOT/reference/html/#verification&#34;&gt;verifies its structure&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;Renders &lt;a href=&#34;https://docs.spring.io/spring-modulith/docs/current-SNAPSHOT/reference/html/#documentation&#34;&gt;Asciidoctor snippets&lt;/a&gt; (component diagrams, application module canvas) to &lt;code&gt;target/modulith-docs&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;/ol&gt; &#xA;     &lt;/div&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Run &lt;a href=&#34;https://docs.spring.io/spring-modulith/docs/current-SNAPSHOT/reference/html/#testing&#34;&gt;integration tests&lt;/a&gt; for individual application modules.&lt;/p&gt; &#xA;     &lt;div class=&#34;listingblock&#34;&gt; &#xA;      &lt;div class=&#34;content&#34;&gt; &#xA;       &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;□ Example&#xA;└─ □ src/test/java&#xA;   └─ □ example.order&#xA;      └─ OrderModuleIntegrationTests.java&lt;/code&gt;&lt;/pre&gt; &#xA;      &lt;/div&gt; &#xA;     &lt;/div&gt; &#xA;     &lt;div class=&#34;listingblock&#34;&gt; &#xA;      &lt;div class=&#34;content&#34;&gt; &#xA;       &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;@ApplicationModuleTests&#xA;class OrderModuleIntegrationTests {&#xA;&#xA;  @Test&#xA;  void someTestMethod() { … }&#xA;}&lt;/code&gt;&lt;/pre&gt; &#xA;      &lt;/div&gt; &#xA;     &lt;/div&gt; &lt;/li&gt; &#xA;   &lt;/ol&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_reference_documentation&#34;&gt;Reference documentation&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Find the reference documentation &lt;a href=&#34;https://docs.spring.io/spring-modulith/docs/current-SNAPSHOT/reference/html/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_contributing&#34;&gt;Contributing&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;a href=&#34;https://help.github.com/articles/creating-a-pull-request&#34;&gt;Pull requests&lt;/a&gt; are welcome. Note, that we expect everyone to follow the &lt;a href=&#34;https://github.com/spring-projects/.github/raw/main/CODE_OF_CONDUCT.md&#34;&gt;code of conduct&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_license&#34;&gt;License&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Spring Modulith is Open Source software released under the &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;Apache 2.0 license&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>PraktikumJava/m1-t6-jar</title>
    <updated>2022-11-28T01:33:54Z</updated>
    <id>tag:github.com,2022-11-28:/PraktikumJava/m1-t6-jar</id>
    <link href="https://github.com/PraktikumJava/m1-t6-jar" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Приложение по учёту книг.&lt;/h1&gt;</summary>
  </entry>
</feed>