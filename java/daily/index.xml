<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-19T01:34:43Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>woowacourse-precourse/java-bridge</title>
    <updated>2022-11-19T01:34:43Z</updated>
    <id>tag:github.com,2022-11-19:/woowacourse-precourse/java-bridge</id>
    <link href="https://github.com/woowacourse-precourse/java-bridge" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;미션 - 다리 건너기&lt;/h1&gt; &#xA;&lt;h2&gt;🔍 진행 방식&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;미션은 &lt;strong&gt;기능 요구 사항, 프로그래밍 요구 사항, 과제 진행 요구 사항&lt;/strong&gt; 세 가지로 구성되어 있다.&lt;/li&gt; &#xA; &lt;li&gt;세 개의 요구 사항을 만족하기 위해 노력한다. 특히 기능을 구현하기 전에 기능 목록을 만들고, 기능 단위로 커밋 하는 방식으로 진행한다.&lt;/li&gt; &#xA; &lt;li&gt;기능 요구 사항에 기재되지 않은 내용은 스스로 판단하여 구현한다.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📮 미션 제출 방법&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;미션 구현을 완료한 후 GitHub을 통해 제출해야 한다. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;GitHub을 활용한 제출 방법은 &lt;a href=&#34;https://github.com/woowacourse/woowacourse-docs/tree/master/precourse&#34;&gt;프리코스 과제 제출&lt;/a&gt; 문서를 참고해 제출한다.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;GitHub에 미션을 제출한 후 &lt;a href=&#34;https://apply.techcourse.co.kr&#34;&gt;우아한테크코스 지원&lt;/a&gt; 사이트에 접속하여 프리코스 과제를 제출한다. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;자세한 방법은 &lt;a href=&#34;https://github.com/woowacourse/woowacourse-docs/tree/master/precourse#%EC%A0%9C%EC%B6%9C-%EA%B0%80%EC%9D%B4%EB%93%9C&#34;&gt;제출 가이드&lt;/a&gt; 참고&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Pull Request만 보내고 지원 플랫폼에서 과제를 제출하지 않으면 최종 제출하지 않은 것으로 처리되니 주의한다.&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🚨 과제 제출 전 체크 리스트 - 0점 방지&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;기능 구현을 모두 정상적으로 했더라도 &lt;strong&gt;요구 사항에 명시된 출력값 형식을 지키지 않을 경우 0점으로 처리&lt;/strong&gt;한다.&lt;/li&gt; &#xA; &lt;li&gt;기능 구현을 완료한 뒤 아래 가이드에 따라 테스트를 실행했을 때 모든 테스트가 성공하는지 확인한다.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;테스트가 실패할 경우 0점으로 처리&lt;/strong&gt;되므로, 반드시 확인 후 제출한다.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;테스트 실행 가이드&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;터미널에서 &lt;code&gt;java -version&lt;/code&gt;을 실행하여 Java 버전이 11인지 확인한다. 또는 Eclipse 또는 IntelliJ IDEA와 같은 IDE에서 Java 11로 실행되는지 확인한다.&lt;/li&gt; &#xA; &lt;li&gt;터미널에서 Mac 또는 Linux 사용자의 경우 &lt;code&gt;./gradlew clean test&lt;/code&gt; 명령을 실행하고,&lt;br&gt; Windows 사용자의 경우 &lt;code&gt;gradlew.bat clean test&lt;/code&gt; 명령을 실행할 때 모든 테스트가 아래와 같이 통과하는지 확인한다.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;BUILD SUCCESSFUL in 0s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;🚀 기능 요구 사항&lt;/h2&gt; &#xA;&lt;p&gt;위아래 둘 중 하나의 칸만 건널 수 있는 다리를 끝까지 건너가는 게임이다.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;위아래 두 칸으로 이루어진 다리를 건너야 한다. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;다리는 왼쪽에서 오른쪽으로 건너야 한다.&lt;/li&gt; &#xA;   &lt;li&gt;위아래 둘 중 하나의 칸만 건널 수 있다.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;다리의 길이를 숫자로 입력받고 생성한다. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;다리를 생성할 때 위 칸과 아래 칸 중 건널 수 있는 칸은 0과 1 중 무작위 값을 이용해서 정한다.&lt;/li&gt; &#xA;   &lt;li&gt;위 칸을 건널 수 있는 경우 U, 아래 칸을 건널 수 있는 경우 D값으로 나타낸다.&lt;/li&gt; &#xA;   &lt;li&gt;무작위 값이 0인 경우 아래 칸, 1인 경우 위 칸이 건널 수 있는 칸이 된다.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;다리가 생성되면 플레이어가 이동할 칸을 선택한다. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;이동할 때 위 칸은 대문자 U, 아래 칸은 대문자 D를 입력한다.&lt;/li&gt; &#xA;   &lt;li&gt;이동한 칸을 건널 수 있다면 O로 표시한다. 건널 수 없다면 X로 표시한다.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;다리를 끝까지 건너면 게임이 종료된다.&lt;/li&gt; &#xA; &lt;li&gt;다리를 건너다 실패하면 게임을 재시작하거나 종료할 수 있다. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;재시작해도 처음에 만든 다리로 재사용한다.&lt;/li&gt; &#xA;   &lt;li&gt;게임 결과의 총 시도한 횟수는 첫 시도를 포함해 게임을 종료할 때까지 시도한 횟수를 나타낸다.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;사용자가 잘못된 값을 입력할 경우 &lt;code&gt;IllegalArgumentException&lt;/code&gt;를 발생시키고, &#34;[ERROR]&#34;로 시작하는 에러 메시지를 출력 후 그 부분부터 입력을 다시 받는다. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Exception&lt;/code&gt;이 아닌 &lt;code&gt;IllegalArgumentException&lt;/code&gt;, &lt;code&gt;IllegalStateException&lt;/code&gt; 등과 같은 명확한 유형을 처리한다.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;입출력 요구 사항&lt;/h3&gt; &#xA;&lt;h4&gt;입력&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;자동으로 생성할 다리 길이를 입력 받는다. 3 이상 20 이하의 숫자를 입력할 수 있으며 올바른 값이 아니면 예외 처리한다.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;라운드마다 플레이어가 이동할 칸을 입력 받는다. U(위 칸)와 D(아래 칸) 중 하나의 문자를 입력할 수 있으며 올바른 값이 아니면 예외 처리한다.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;U&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;게임 재시작/종료 여부를 입력 받는다. R(재시작)과 Q(종료) 중 하나의 문자를 입력할 수 있으며 올바른 값이 아니면 예외 처리한다.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;R&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;출력&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;게임 시작 문구&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;다리 건너기 게임을 시작합니다.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;게임 종료 문구&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;최종 게임 결과&#xA;[ O |   |   ]&#xA;[   | O | O ]&#xA;&#xA;게임 성공 여부: 성공&#xA;총 시도한 횟수: 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;사용자가 이동할 때마다 다리 건너기 결과의 출력 형식은 실행 결과 예시를 참고한다. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;이동할 수 있는 칸을 선택한 경우 O 표시&lt;/li&gt; &#xA;   &lt;li&gt;이동할 수 없는 칸을 선택한 경우 X 표시&lt;/li&gt; &#xA;   &lt;li&gt;선택하지 않은 칸은 공백 한 칸으로 표시&lt;/li&gt; &#xA;   &lt;li&gt;다리의 시작은 &lt;code&gt;[&lt;/code&gt;, 다리의 끝은 &lt;code&gt;]&lt;/code&gt;으로 표시&lt;/li&gt; &#xA;   &lt;li&gt;다리 칸의 구분은 &lt;code&gt;|&lt;/code&gt;(앞뒤 공백 포함) 문자열로 구분&lt;/li&gt; &#xA;   &lt;li&gt;현재까지 건넌 다리를 모두 출력&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;예외 상황 시 에러 문구를 출력해야 한다. 단, 에러 문구는 &#34;[ERROR]&#34;로 시작해야 한다.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;[ERROR] 다리 길이는 3부터 20 사이의 숫자여야 합니다.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;실행 결과 예시&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;다리 건너기 게임을 시작합니다.&#xA;&#xA;다리의 길이를 입력해주세요.&#xA;3&#xA;&#xA;이동할 칸을 선택해주세요. (위: U, 아래: D)&#xA;U&#xA;[ O ]&#xA;[   ]&#xA;&#xA;이동할 칸을 선택해주세요. (위: U, 아래: D)&#xA;U&#xA;[ O | X ]&#xA;[   |   ]&#xA;&#xA;게임을 다시 시도할지 여부를 입력해주세요. (재시도: R, 종료: Q)&#xA;R&#xA;이동할 칸을 선택해주세요. (위: U, 아래: D)&#xA;U&#xA;[ O ]&#xA;[   ]&#xA;&#xA;이동할 칸을 선택해주세요. (위: U, 아래: D)&#xA;D&#xA;[ O |   ]&#xA;[   | O ]&#xA;&#xA;이동할 칸을 선택해주세요. (위: U, 아래: D)&#xA;D&#xA;[ O |   |   ]&#xA;[   | O | O ]&#xA;&#xA;최종 게임 결과&#xA;[ O |   |   ]&#xA;[   | O | O ]&#xA;&#xA;게임 성공 여부: 성공&#xA;총 시도한 횟수: 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;다리 건너기 게임을 시작합니다.&#xA;&#xA;다리의 길이를 입력해주세요.&#xA;3&#xA;&#xA;이동할 칸을 선택해주세요. (위: U, 아래: D)&#xA;U&#xA;[ O ]&#xA;[   ]&#xA;&#xA;이동할 칸을 선택해주세요. (위: U, 아래: D)&#xA;U&#xA;[ O | X ]&#xA;[   |   ]&#xA;&#xA;게임을 다시 시도할지 여부를 입력해주세요. (재시도: R, 종료: Q)&#xA;Q&#xA;최종 게임 결과&#xA;[ O | X ]&#xA;[   |   ]&#xA;&#xA;게임 성공 여부: 실패&#xA;총 시도한 횟수: 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;🎯 프로그래밍 요구 사항&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JDK 11 버전에서 실행 가능해야 한다. &lt;strong&gt;JDK 11에서 정상적으로 동작하지 않을 경우 0점 처리한다.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;프로그램 실행의 시작점은 &lt;code&gt;Application&lt;/code&gt;의 &lt;code&gt;main()&lt;/code&gt;이다.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;build.gradle&lt;/code&gt; 파일을 변경할 수 없고, 외부 라이브러리를 사용하지 않는다.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/woowacourse/woowacourse-docs/tree/master/styleguide/java&#34;&gt;Java 코드 컨벤션&lt;/a&gt; 가이드를 준수하며 프로그래밍한다.&lt;/li&gt; &#xA; &lt;li&gt;프로그램 종료 시 &lt;code&gt;System.exit()&lt;/code&gt;를 호출하지 않는다.&lt;/li&gt; &#xA; &lt;li&gt;프로그램 구현이 완료되면 &lt;code&gt;ApplicationTest&lt;/code&gt;의 모든 테스트가 성공해야 한다. &lt;strong&gt;테스트가 실패할 경우 0점 처리한다.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;프로그래밍 요구 사항에서 달리 명시하지 않는 한 파일, 패키지 이름을 수정하거나 이동하지 않는다.&lt;/li&gt; &#xA; &lt;li&gt;indent(인덴트, 들여쓰기) depth를 3이 넘지 않도록 구현한다. 2까지만 허용한다. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;예를 들어 while문 안에 if문이 있으면 들여쓰기는 2이다.&lt;/li&gt; &#xA;   &lt;li&gt;힌트: indent(인덴트, 들여쓰기) depth를 줄이는 좋은 방법은 함수(또는 메서드)를 분리하면 된다.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;3항 연산자를 쓰지 않는다.&lt;/li&gt; &#xA; &lt;li&gt;함수(또는 메서드)가 한 가지 일만 하도록 최대한 작게 만들어라.&lt;/li&gt; &#xA; &lt;li&gt;JUnit 5와 AssertJ를 이용하여 본인이 정리한 기능 목록이 정상 동작함을 테스트 코드로 확인한다.&lt;/li&gt; &#xA; &lt;li&gt;else 예약어를 쓰지 않는다. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;힌트: if 조건절에서 값을 return 하는 방식으로 구현하면 else를 사용하지 않아도 된다.&lt;/li&gt; &#xA;   &lt;li&gt;else를 쓰지 말라고 하니 switch/case로 구현하는 경우가 있는데 switch/case도 허용하지 않는다.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;도메인 로직에 단위 테스트를 구현해야 한다. 단, UI(System.out, System.in, Scanner) 로직은 제외한다. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;핵심 로직을 구현하는 코드와 UI를 담당하는 로직을 분리해 구현한다.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;추가된 요구 사항&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;함수(또는 메서드)의 길이가 10라인을 넘어가지 않도록 구현한다. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;함수(또는 메서드)가 한 가지 일만 잘하도록 구현한다.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;메서드의 파라미터 개수는 최대 3개까지만 허용한다.&lt;/li&gt; &#xA; &lt;li&gt;아래 있는 &lt;code&gt;InputView&lt;/code&gt;, &lt;code&gt;OutputView&lt;/code&gt;, &lt;code&gt;BridgeGame&lt;/code&gt;, &lt;code&gt;BridgeMaker&lt;/code&gt;, &lt;code&gt;BridgeRandomNumberGenerator&lt;/code&gt; 클래스의 요구사항을 참고하여 구현한다. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;각 클래스의 제약 사항은 아래 클래스별 세부 설명을 참고한다.&lt;/li&gt; &#xA;   &lt;li&gt;이외 필요한 클래스(또는 객체)와 메서드는 자유롭게 구현할 수 있다.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;InputView&lt;/code&gt; 클래스에서만 &lt;code&gt;camp.nextstep.edu.missionutils.Console&lt;/code&gt; 의 &lt;code&gt;readLine()&lt;/code&gt; 메서드를 이용해 사용자의 입력을 받을 수 있다.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;BridgeGame&lt;/code&gt; 클래스에서 &lt;code&gt;InputView&lt;/code&gt;, &lt;code&gt;OutputView&lt;/code&gt; 를 사용하지 않는다.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;InputView 클래스&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;제공된 &lt;code&gt;InputView&lt;/code&gt; 클래스를 활용해 구현해야 한다.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;InputView&lt;/code&gt;의 패키지는 변경할 수 있다.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;InputView&lt;/code&gt;의 메서드의 시그니처(인자, 이름)와 반환 타입은 변경할 수 있다.&lt;/li&gt; &#xA; &lt;li&gt;사용자 값 입력을 위해 필요한 메서드를 추가할 수 있다.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class InputView {&#xA;&#xA;    public int readBridgeSize() {&#xA;        return 0;&#xA;    }&#xA;&#xA;    public String readMoving() {&#xA;        return null;&#xA;    }&#xA;&#xA;    public String readGameCommand() {&#xA;        return null;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;OutputView 클래스&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;제공된 &lt;code&gt;OutputView&lt;/code&gt; 클래스를 활용해 구현해야 한다.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OutputView&lt;/code&gt;의 패키지는 변경할 수 있다.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OutputView&lt;/code&gt;의 메서드의 이름은 변경할 수 없고, 인자와 반환 타입은 필요에 따라 추가하거나 변경할 수 있다.&lt;/li&gt; &#xA; &lt;li&gt;값 출력을 위해 필요한 메서드를 추가할 수 있다.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class OutputView {&#xA;&#xA;    public void printMap() {&#xA;    }&#xA;&#xA;    public void printResult() {&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;BridgeGame 클래스&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;제공된 &lt;code&gt;BridgeGame&lt;/code&gt; 클래스를 활용해 구현해야 한다.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BridgeGame&lt;/code&gt;에 필드(인스턴스 변수)를 추가할 수 있다.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BridgeGame&lt;/code&gt;의 패키지는 변경할 수 있다.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BridgeGame&lt;/code&gt;의 메서드의 이름은 변경할 수 없고, 인자와 반환 타입은 필요에 따라 추가하거나 변경할 수 있다.&lt;/li&gt; &#xA; &lt;li&gt;게임 진행을 위해 필요한 메서드를 추가 하거나 변경할 수 있다.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class BridgeGame {&#xA;&#xA;    public void move() {&#xA;    }&#xA;&#xA;    public void retry() {&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;BridgeMaker 클래스&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;제공된 &lt;code&gt;BridgeMaker&lt;/code&gt; 클래스를 활용해 구현해야 한다.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BridgeMaker&lt;/code&gt;의 필드(인스턴스 변수)를 변경할 수 없다.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BridgeMaker&lt;/code&gt;의 메서드의 시그니처(인자, 이름)와 반환 타입은 변경할 수 없다.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class BridgeMaker {&#xA;&#xA;    public List&amp;lt;String&amp;gt; makeBridge(int size) {&#xA;        return null;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;BridgeRandomNumberGenerator 클래스&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Random 값 추출은 제공된 &lt;code&gt;bridge.BridgeRandomNumberGenerator&lt;/code&gt;의 &lt;code&gt;generate()&lt;/code&gt;를 활용한다.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BridgeRandomNumberGenerator&lt;/code&gt;, &lt;code&gt;BridgeNumberGenerator&lt;/code&gt; 클래스의 코드는 변경할 수 없다.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;사용 예시&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;다리 칸을 생성하기 위한 Random 값은 아래와 같이 추출한다.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;int number = bridgeNumberGenerator.generate();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;라이브러리&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/woowacourse-projects/mission-utils&#34;&gt;&lt;code&gt;camp.nextstep.edu.missionutils&lt;/code&gt;&lt;/a&gt;에서 제공하는 &lt;code&gt;Console&lt;/code&gt; API를 사용하여 구현해야 한다. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;사용자가 입력하는 값은 &lt;code&gt;camp.nextstep.edu.missionutils.Console&lt;/code&gt;의 &lt;code&gt;readLine()&lt;/code&gt;을 활용한다.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;✏️ 과제 진행 요구 사항&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;미션은 &lt;a href=&#34;https://github.com/woowacourse-precourse/java-bridge&#34;&gt;java-bridge&lt;/a&gt; 저장소를 Fork &amp;amp; Clone해 시작한다.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;기능을 구현하기 전 &lt;code&gt;docs/README.md&lt;/code&gt;에 구현할 기능 목록을 정리&lt;/strong&gt;해 추가한다.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Git의 커밋 단위는 앞 단계에서 &lt;code&gt;docs/README.md&lt;/code&gt;에 정리한 기능 목록 단위&lt;/strong&gt;로 추가한다. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://gist.github.com/stephenparish/9941e89d80e2bc58a153&#34;&gt;커밋 메시지 컨벤션&lt;/a&gt; 가이드를 참고해 커밋 메시지를 작성한다.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;과제 진행 및 제출 방법은 &lt;a href=&#34;https://github.com/woowacourse/woowacourse-docs/tree/master/precourse&#34;&gt;프리코스 과제 제출&lt;/a&gt; 문서를 참고한다.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>raphw/byte-buddy</title>
    <updated>2022-11-19T01:34:43Z</updated>
    <id>tag:github.com,2022-11-19:/raphw/byte-buddy</id>
    <link href="https://github.com/raphw/byte-buddy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Runtime code generation for the Java virtual machine.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Byte Buddy&lt;/h1&gt; &#xA;&lt;a href=&#34;https://bytebuddy.net&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/raphw/byte-buddy/gh-pages/images/logo-bg.png&#34; alt=&#34;Byte Buddy logo&#34; height=&#34;180px&#34; align=&#34;right&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;runtime code generation for the Java virtual machine&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/raphw/byte-buddy/actions&#34;&gt;&lt;img src=&#34;https://github.com/raphw/byte-buddy/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Actions Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://snyk.io/test/github/raphw/byte-buddy&#34;&gt;&lt;img src=&#34;https://snyk-widget.herokuapp.com/badge/mvn/net.bytebuddy/byte-buddy/badge.svg?sanitize=true&#34; alt=&#34;Security Score&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/r/raphw/byte-buddy?branch=master&#34;&gt;&lt;img src=&#34;https://img.shields.io/coveralls/raphw/byte-buddy/master.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/net.bytebuddy/byte-buddy-parent&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/net.bytebuddy/byte-buddy-parent/badge.svg#&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/6251&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/6251/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Byte Buddy is a code generation and manipulation library for creating and modifying Java classes during the runtime of a Java application and without the help of a compiler. Other than the code generation utilities that &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Proxy.html&#34;&gt;ship with the Java Class Library&lt;/a&gt;, Byte Buddy allows the creation of arbitrary classes and is not limited to implementing interfaces for the creation of runtime proxies. Furthermore, Byte Buddy offers a convenient API for changing classes either manually, using a Java agent or during a build.&lt;/p&gt; &#xA;&lt;p&gt;In order to use Byte Buddy, one does not require an understanding of Java byte code or the &lt;a href=&#34;https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html&#34;&gt;class file format&lt;/a&gt;. In contrast, Byte Buddy’s API aims for code that is concise and easy to understand for everybody. Nevertheless, Byte Buddy remains fully customizable down to the possibility of defining custom byte code. Furthermore, the API was designed to be as non-intrusive as possible and as a result, Byte Buddy does not leave any trace in the classes that were created by it. For this reason, the generated classes can exist without requiring Byte Buddy on the class path. Because of this feature, Byte Buddy’s mascot was chosen to be a ghost.&lt;/p&gt; &#xA;&lt;p&gt;Byte Buddy is written in Java 5 but supports the generation of classes for any Java version. Byte Buddy is a light-weight library and only depends on the visitor API of the Java byte code parser library &lt;a href=&#34;https://asm.ow2.io/&#34;&gt;ASM&lt;/a&gt; which does itself &lt;a href=&#34;https://repo1.maven.org/maven2/org/ow2/asm/asm/5.0.4/asm-5.0.4.pom&#34;&gt;not require any further dependencies&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;At first sight, runtime code generation can appear to be some sort of black magic that should be avoided and only few developers write applications that explicitly generate code during their runtime. However, this picture changes when creating libraries that need to interact with arbitrary code and types that are unknown at compile time. In this context, a library implementer must often choose between either requiring a user to implement library-proprietary interfaces or to generate code at runtime when the user’s types becomes first known to the library. Many known libraries such as for example &lt;em&gt;Spring&lt;/em&gt; or &lt;em&gt;Hibernate&lt;/em&gt; choose the latter approach which is popular among their users under the term of using &lt;a href=&#34;https://en.wikipedia.org/wiki/Plain_Old_Java_Object&#34;&gt;&lt;em&gt;Plain Old Java Objects&lt;/em&gt;&lt;/a&gt;. As a result, code generation has become an ubiquitous concept in the Java space. Byte Buddy is an attempt to innovate the runtime creation of Java types in order to provide a better tool set to those relying on code generation.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;a href=&#34;https://bytebuddy.net&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/raphw/byte-buddy/gh-pages/images/dukeschoice.jpg&#34; alt=&#34;Duke&#39;s Choice award&#34; height=&#34;110px&#34; align=&#34;left&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;In October 2015, Byte Buddy was distinguished with a &lt;a href=&#34;https://www.oracle.com/corporate/pressrelease/dukes-award-102815.html&#34;&gt;&lt;em&gt;Duke&#39;s Choice award&lt;/em&gt;&lt;/a&gt; by Oracle. The award appreciates Byte Buddy for its &#34;&lt;em&gt;tremendous amount of innovation in Java Technology&lt;/em&gt;&#34;. We feel very honored for having received this award and want to thank all users and everybody else who helped making Byte Buddy the success it has become. We really appreciate it!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Byte Buddy offers excellent performance at production quality. It is stable and in use by distinguished frameworks and tools such as &lt;a href=&#34;https://site.mockito.org/&#34;&gt;Mockito&lt;/a&gt;, &lt;a href=&#34;https://hibernate.org/&#34;&gt;Hibernate&lt;/a&gt; , &lt;a href=&#34;https://github.com/FasterXML/jackson&#34;&gt;Jackson&lt;/a&gt;, &lt;a href=&#34;https://bazel.build/&#34;&gt;Google&#39;s Bazel build system&lt;/a&gt; and &lt;a href=&#34;https://github.com/raphw/byte-buddy/wiki/Projects-using-Byte-Buddy&#34;&gt;many others&lt;/a&gt;. Byte Buddy is also used by a large number of commercial products to great result. It is currently downloaded over 75 million times a year.&lt;/p&gt; &#xA;&lt;h2&gt;Hello World&lt;/h2&gt; &#xA;&lt;p&gt;Saying &lt;em&gt;Hello World&lt;/em&gt; with Byte Buddy is as easy as it can get. Any creation of a Java class starts with an instance of the &lt;code&gt;ByteBuddy&lt;/code&gt; class which represents a configuration for creating new types:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Class&amp;lt;?&amp;gt; dynamicType = new ByteBuddy()&#xA;  .subclass(Object.class)&#xA;  .method(ElementMatchers.named(&#34;toString&#34;))&#xA;  .intercept(FixedValue.value(&#34;Hello World!&#34;))&#xA;  .make()&#xA;  .load(getClass().getClassLoader())&#xA;  .getLoaded();&#xA;assertThat(dynamicType.newInstance().toString(), is(&#34;Hello World!&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default &lt;code&gt;ByteBuddy&lt;/code&gt; configuration which is used in the above example creates a Java class in the newest version of the class file format that is understood by the processing Java virtual machine. As hopefully obvious from the example code, the created type will extend the &lt;code&gt;Object&lt;/code&gt; class and overrides its &lt;code&gt;toString&lt;/code&gt; method which should return a fixed value of &lt;code&gt;Hello World!&lt;/code&gt;. The method to be overridden is identified by a so-called &lt;code&gt;ElementMatcher&lt;/code&gt;. In the above example, a predefined element matcher &lt;code&gt;named(String)&lt;/code&gt; is used which identifies methods by their exact names. Byte Buddy comes with numerous predefined and well-tested matchers which are collected in the &lt;code&gt;ElementMatchers&lt;/code&gt; class and which can be easily composed. The creation of custom matchers is however as simple as implementing the (&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/FunctionalInterface.html&#34;&gt;functional&lt;/a&gt;) &lt;code&gt;ElementMatcher&lt;/code&gt; interface.&lt;/p&gt; &#xA;&lt;p&gt;For implementing the &lt;code&gt;toString&lt;/code&gt; method, the &lt;code&gt;FixedValue&lt;/code&gt; class defines a constant return value for the overridden method. Defining a constant value is only one example of many method interceptors that ship with Byte Buddy. By implementing the &lt;code&gt;Implementation&lt;/code&gt; interface, a method could however even be defined by custom byte code.&lt;/p&gt; &#xA;&lt;p&gt;Finally, the described Java class is created and then loaded into the Java virtual machine. For this purpose, a target class loader is required. Eventually, we can convince ourselves of the result by calling the &lt;code&gt;toString&lt;/code&gt; method on an instance of the created class and finding the return value to represent the constant value we expected.&lt;/p&gt; &#xA;&lt;h2&gt;A more complex example&lt;/h2&gt; &#xA;&lt;p&gt;Of course, a &lt;em&gt;Hello World example&lt;/em&gt; is a too simple use case for evaluating the quality of a code generation library. In reality, a user of such a library wants to perform more complex manipulations, for example by introducing hooks into the execution path of a Java program. Using Byte Buddy, doing so is however equally simple. The following example gives a taste of how method calls can be intercepted.&lt;/p&gt; &#xA;&lt;p&gt;Byte Buddy expresses dynamically defined method implementations by instances of the &lt;code&gt;Implementation&lt;/code&gt; interface. In the previous example, &lt;code&gt;FixedValue&lt;/code&gt; that implements this interface was already demonstrated. By implementing this interface, a user of Byte Buddy can go to the length of defining custom byte code for a method. Normally, it is however easier to use Byte Buddy&#39;s predefined implementations such as &lt;code&gt;MethodDelegation&lt;/code&gt; which allows for implementing any method in plain Java. Using this implementation is straight forward as it operates by delegating the control flow to any POJO. As an example of such a POJO, Byte Buddy can for example redirect a call to the only method of the following class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class GreetingInterceptor {&#xA;  public Object greet(Object argument) {&#xA;    return &#34;Hello from &#34; + argument;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the above &lt;code&gt;GreetingInterceptor&lt;/code&gt; does not depend on any Byte Buddy type. This is good news because none of the classes that Byte Buddy generates require Byte Buddy on the class path! Given the above &lt;code&gt;GreetingInterceptor&lt;/code&gt;, we can use Byte Buddy to implement the Java 8 &lt;code&gt;java.util.function.Function&lt;/code&gt; interface and its abstract &lt;code&gt;apply&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Class&amp;lt;? extends java.util.function.Function&amp;gt; dynamicType = new ByteBuddy()&#xA;  .subclass(java.util.function.Function.class)&#xA;  .method(ElementMatchers.named(&#34;apply&#34;))&#xA;  .intercept(MethodDelegation.to(new GreetingInterceptor()))&#xA;  .make()&#xA;  .load(getClass().getClassLoader())&#xA;  .getLoaded();&#xA;assertThat((String) dynamicType.newInstance().apply(&#34;Byte Buddy&#34;), is(&#34;Hello from Byte Buddy&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Executing the above code, Byte Buddy implements Java&#39;s &lt;code&gt;Function&lt;/code&gt; interface and implements the &lt;code&gt;apply&lt;/code&gt; method as a delegation to an instance of the &lt;code&gt;GreetingInterceptor&lt;/code&gt; POJO that we defined before. Now, every time that the &lt;code&gt;Function::apply&lt;/code&gt; method is called, the control flow is dispatched to &lt;code&gt;GreetingInterceptor::greet&lt;/code&gt; and the latter method&#39;s return value is returned from the interface&#39;s method.&lt;/p&gt; &#xA;&lt;p&gt;Interceptors can be defined to take with more generic inputs and outputs by annotating the interceptor&#39;s parameters. When Byte Buddy discovers an annotation, the library injects the dependency that the interceptor parameter requires. An example for a more general interceptor is the following class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class GeneralInterceptor {&#xA;  @RuntimeType&#xA;  public Object intercept(@AllArguments Object[] allArguments,&#xA;                          @Origin Method method) {&#xA;    // intercept any method of any signature&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the above interceptor, any intercepted method could be matched and processed. For example, when matching &lt;code&gt;Function::apply&lt;/code&gt;, the method&#39;s arguments would be passed as the single element of an array. Also, a &lt;code&gt;Method&lt;/code&gt; reference to &lt;code&gt;Fuction::apply&lt;/code&gt; would be passed as the interceptor&#39;s second argument due to the &lt;code&gt;@Origin&lt;/code&gt; annotation. By declaring the &lt;code&gt;@RuntimeType&lt;/code&gt; annotation on the method, Byte Buddy finally casts the returned value to the return value of the intercepted method if this is necessary. In doing so, Byte Buddy also applies automatic boxing and unboxing.&lt;/p&gt; &#xA;&lt;p&gt;Besides the annotations that were already mentioned there exist plenty of other predefined annotations. For example, when using the &lt;code&gt;@SuperCall&lt;/code&gt; annotation on a &lt;code&gt;Runnable&lt;/code&gt; or &lt;code&gt;Callable&lt;/code&gt; type, Byte Buddy injects proxy instances that allow for an invocation of a non-abstract super method if such a method exists. And even if Byte Buddy does not cover a use case, Byte Buddy offers an extension mechanism for defining custom annotations.&lt;/p&gt; &#xA;&lt;p&gt;You might expect that using these annotations ties your code to Byte Buddy. However, Java ignores annotations in case that they are not visible to a class loader. This way, generated code can still exist without Byte Buddy! You can find more information on the &lt;code&gt;MethodDelegation&lt;/code&gt; and on all of its predefined annotations in its &lt;em&gt;javadoc&lt;/em&gt; and in Byte Buddy&#39;s tutorial.&lt;/p&gt; &#xA;&lt;h2&gt;Changing existing classes&lt;/h2&gt; &#xA;&lt;p&gt;Byte Buddy is not limited to creating subclasses but is also capable of redefining existing code. To do so, Byte Buddy offers a convenient API for defining so-called &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/package-summary.html&#34;&gt;Java agents&lt;/a&gt;. Java agents are plain old Java programs that can be used to alter the code of an existing Java application during its runtime. As an example, we can use Byte Buddy to change methods to print their execution time. For this, we first define an interceptor similar to the interceptors in the previous examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class TimingInterceptor {&#xA;  @RuntimeType&#xA;  public static Object intercept(@Origin Method method, &#xA;                                 @SuperCall Callable&amp;lt;?&amp;gt; callable) {&#xA;    long start = System.currentTimeMillis();&#xA;    try {&#xA;      return callable.call();&#xA;    } finally {&#xA;      System.out.println(method + &#34; took &#34; + (System.currentTimeMillis() - start));&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using a Java agent, we can now apply this interceptor to all types that match an &lt;code&gt;ElementMatcher&lt;/code&gt; for a &lt;code&gt;TypeDescription&lt;/code&gt;. For the example, we choose to add the above interceptor to all types with a name that ends in &lt;code&gt;Timed&lt;/code&gt;. This is done for the sake of simplicity whereas an annotation would probably be a more appropriate alternative to mark such classes for a production agent. Using Byte Buddy&#39;s &lt;code&gt;AgentBuilder&lt;/code&gt; API, creating a Java agent is as easy as defining the following agent class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class TimerAgent {&#xA;  public static void premain(String arguments, &#xA;                             Instrumentation instrumentation) {&#xA;    new AgentBuilder.Default()&#xA;      .type(ElementMatchers.nameEndsWith(&#34;Timed&#34;))&#xA;      .transform((builder, type, classLoader, module, protectionDomain) -&amp;gt; &#xA;          builder.method(ElementMatchers.any())&#xA;                 .intercept(MethodDelegation.to(TimingInterceptor.class))&#xA;      ).installOn(instrumentation);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similar to Java&#39;s &lt;code&gt;main&lt;/code&gt; method, the &lt;code&gt;premain&lt;/code&gt; method is the entry point to any Java agent from which we apply the redefinition. As one argument, a Java agent receives an instance of the &lt;code&gt;Instrumentation&lt;/code&gt; interface which allows Byte Buddy to hook into the JVM&#39;s standard API for runtime class redefinition.&lt;/p&gt; &#xA;&lt;p&gt;This program is packaged together with a manifest file with the &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/package-summary.html&#34;&gt;&lt;code&gt;Premain-Class&lt;/code&gt; attribute&lt;/a&gt; pointing to the &lt;code&gt;TimerAgent&lt;/code&gt;. The resulting &lt;em&gt;jar&lt;/em&gt; file can now be added to any Java application by setting &lt;code&gt;-javaagent:timingagent.jar&lt;/code&gt; similar to adding a jar to the class path. With the agent active, all classes ending in &lt;code&gt;Timed&lt;/code&gt; do now print their execution time to the console.&lt;/p&gt; &#xA;&lt;p&gt;Byte Buddy is also capable of applying so-called runtime attachments by disabling class file format changes and using the &lt;code&gt;Advice&lt;/code&gt; instrumentation. Please refer to the &lt;em&gt;javadoc&lt;/em&gt; of the &lt;code&gt;Advice&lt;/code&gt; and the &lt;code&gt;AgentBuilder&lt;/code&gt; class for further information. Byte Buddy also offers the explicit change of Java classes via a &lt;code&gt;ByteBuddy&lt;/code&gt; instance or by using the Byte Buddy &lt;em&gt;Maven&lt;/em&gt; and &lt;em&gt;Gradle&lt;/em&gt; plugins.&lt;/p&gt; &#xA;&lt;h2&gt;Where to go from here?&lt;/h2&gt; &#xA;&lt;p&gt;Byte Buddy is a comprehensive library and we only scratched the surface of Byte Buddy&#39;s capabilities. However, Byte Buddy aims for being easy to use by providing a domain-specific language for creating classes. Most runtime code generation can be done by writing readable code and without any knowledge of Java&#39;s class file format. If you want to learn more about Byte Buddy, you can find such a &lt;a href=&#34;https://bytebuddy.net/#/tutorial&#34;&gt;tutorial on Byte Buddy&#39;s web page&lt;/a&gt; ( There is also &lt;a href=&#34;https://notes.diguage.com/byte-buddy-tutorial/&#34;&gt;a Chinese translation available&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Furthermore, Byte Buddy comes with a &lt;a href=&#34;https://bytebuddy.net/#/javadoc&#34;&gt;detailed in-code documentation&lt;/a&gt; and extensive test case coverage which can also serve as example code. Finally, you can find an up-to-date list of articles and presentations on Byte Buddy &lt;a href=&#34;https://github.com/raphw/byte-buddy/wiki/Web-Resources&#34;&gt;in the wiki&lt;/a&gt;. When using Byte Buddy, make also sure to read the following information on maintaining a project dependency.&lt;/p&gt; &#xA;&lt;h2&gt;Getting support&lt;/h2&gt; &#xA;&lt;h4&gt;Commercial&lt;/h4&gt; &#xA;&lt;p&gt;The use of Byte Buddy is free and does not require the purchase of a license. To get the most out of the library or to secure an easy start, it is however possible to purchase training, development hours or support plans. Rates are dependent on the scope and duration of an engagement. Please get in touch with &lt;a href=&#34;mailto:rafael.wth@gmail.com&#34;&gt;rafael.wth@gmail.com&lt;/a&gt; for further information.&lt;/p&gt; &#xA;&lt;h4&gt;Tidelift&lt;/h4&gt; &#xA;&lt;p&gt;Byte Buddy is &lt;a href=&#34;https://tidelift.com/subscription/pkg/maven-net-bytebuddy-byte-buddy?utm_source=byte-buddy&amp;amp;utm_medium=referral&#34;&gt;listed on Tidelift&lt;/a&gt; . If you are not using Byte Buddy to an extent where you want to purchase explicit support and want to support the open source community in general, please consider a subscription.&lt;/p&gt; &#xA;&lt;h4&gt;GitHub sponsors&lt;/h4&gt; &#xA;&lt;p&gt;You can support my work via &lt;a href=&#34;https://github.com/sponsors/raphw&#34;&gt;GitHub sponsors&lt;/a&gt;. Note that this option is only meant for commercial actors who are looking for a simple payment channel and that do not expect support in return. Support via GitHub Sponsors is not possible to maintain VAT compliance. Please reach out for a direct support agreement instead.&lt;/p&gt; &#xA;&lt;h4&gt;Free&lt;/h4&gt; &#xA;&lt;p&gt;General questions can be asked on &lt;a href=&#34;https://stackoverflow.com/questions/tagged/byte-buddy&#34;&gt;Stack Overflow&lt;/a&gt; or on the &lt;a href=&#34;https://groups.google.com/forum/#!forum/byte-buddy&#34;&gt;Byte Buddy mailing list&lt;/a&gt; which also serve as an archive for questions. Of course, bug reports will be considered also outside of a commercial plan. For open source projects, it is sometimes possible to receive extended help for taking Byte Buddy into use.&lt;/p&gt; &#xA;&lt;h2&gt;Dependency and API evolution&lt;/h2&gt; &#xA;&lt;p&gt;Byte Buddy is written on top of &lt;a href=&#34;https://asm.ow2.io&#34;&gt;ASM&lt;/a&gt;, a mature and well-tested library for reading and writing compiled Java classes. In order to allow for advanced type manipulations, Byte Buddy is intentionally exposing the ASM API to its users. Of course, the direct use of ASM remains fully optional and most users will most likely never require it. This choice was made such that a user of Byte Buddy is not restrained to its higher-level functionality but can implement custom implementations without a fuss when it is necessary.&lt;/p&gt; &#xA;&lt;p&gt;ASM has previously changed its public API but added a mechanism for API compatibility starting with version 4 of the library. In order to avoid version conflicts with such older versions, Byte Buddy repackages the ASM dependency into its own namespace. If you want to use ASM directly, the &lt;code&gt;byte-buddy-dep&lt;/code&gt; artifact offers a version of Byte Buddy with an explicit dependency to ASM. When doing so, you &lt;strong&gt;must&lt;/strong&gt; repackage &lt;em&gt;both&lt;/em&gt; Byte Buddy and ASM into your namespace to avoid version conflicts.&lt;/p&gt; &#xA;&lt;p&gt;Please note the &lt;a href=&#34;https://github.com/raphw/byte-buddy/raw/master/SECURITY.md&#34;&gt;security policy&lt;/a&gt; of this project.&lt;/p&gt; &#xA;&lt;h2&gt;License and development&lt;/h2&gt; &#xA;&lt;p&gt;Byte Buddy is licensed under the liberal and business-friendly &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;&lt;em&gt;Apache Licence, Version 2.0&lt;/em&gt;&lt;/a&gt; and is freely available on GitHub. Additionally, the &lt;em&gt;byte-buddy&lt;/em&gt; distribution bundles ASM which is released under &lt;a href=&#34;https://asm.ow2.io/license.html&#34;&gt;a 3-clause BSD license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Byte Buddy binaries are published to the repositories of Maven Central and on JCenter. The artifacts signatures can be validated against &lt;a href=&#34;https://keys.openpgp.org/search?q=rafael.wth@gmail.com&#34;&gt;this PGP public key&lt;/a&gt; beginning with Byte Buddy 1.10.3. Older versions can be validated against &lt;a href=&#34;https://keyserver.ubuntu.com/pks/lookup?op=get&amp;amp;search=0xf42b96b8648b5c4a1c43a62fbb2914c1fa0811c3&#34;&gt;this older and weaker certificate&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;p&gt;The project is built using &lt;a href=&#34;https://maven.apache.org/&#34;&gt;Maven&lt;/a&gt;. From your shell, cloning and building the project would go something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/raphw/byte-buddy.git&#xA;cd byte-buddy&#xA;mvn package&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On these commands, Byte Buddy is cloned from GitHub and built on your machine. Further build options are listed in the root POM file. Byte Buddy can be built with any JDK of at least version 6. It is however recommended to use a JDK of at least version 8 as the builds for version 6 and 7 require the usage of unencrypted HTTP. Its support is only meant for running tests against this JDK version and can expose you to man-in-the-middle attacks. Therefore, these builds should be avoided. Byte Buddy is currently tested for versions 6 and upwards of the JDK on CI servers.&lt;/p&gt; &#xA;&lt;p&gt;Please use GitHub&#39;s &lt;a href=&#34;https://github.com/raphw/byte-buddy/issues&#34;&gt;issue tracker&lt;/a&gt; for reporting bugs. When committing code, please provide test cases that prove the functionality of your features or that demonstrate a bug fix. Furthermore, make sure you are not breaking any existing test cases. If possible, please take the time to write some documentation. For feature requests or general feedback, you can also use the &lt;a href=&#34;https://github.com/raphw/byte-buddy/issues&#34;&gt;issue tracker&lt;/a&gt; or contact us on &lt;a href=&#34;https://groups.google.com/forum/#!forum/byte-buddy&#34;&gt;our mailing list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supporters&lt;/h2&gt; &#xA;&lt;p&gt;The work on Byte Buddy is also possible thanks to a row of supporters that have dedicated regular resources and attention to the project. Please take your time to have a look at those supporters and their offerings.&lt;/p&gt; &#xA;&lt;a href=&#34;https://www.scienta.no&#34;&gt; &lt;img src=&#34;https://bytebuddy.net/logos/scienta.png&#34; height=&#34;50&#34; alt=&#34;Scienta AS&#34;&gt; &lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &#xA;&lt;a href=&#34;https://www.instana.com&#34;&gt; &lt;img src=&#34;https://bytebuddy.net/logos/instana.png&#34; height=&#34;50&#34; alt=&#34;Instana&#34;&gt; &lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &#xA;&lt;a href=&#34;https://www.sqreen.com&#34;&gt; &lt;img src=&#34;https://bytebuddy.net/logos/sqreen.png&#34; height=&#34;50&#34; alt=&#34;Sqreen&#34;&gt; &lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &#xA;&lt;a href=&#34;https://www.elastic.co&#34;&gt; &lt;img src=&#34;https://bytebuddy.net/logos/elastic.png&#34; height=&#34;50&#34; alt=&#34;Elastic&#34;&gt; &lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &#xA;&lt;a href=&#34;https://www.spotify.com&#34;&gt; &lt;img src=&#34;https://bytebuddy.net/logos/spotify.png&#34; height=&#34;50&#34; alt=&#34;Spotify&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>EhViewer-NekoInverter/EhViewer</title>
    <updated>2022-11-19T01:34:43Z</updated>
    <id>tag:github.com,2022-11-19:/EhViewer-NekoInverter/EhViewer</id>
    <link href="https://github.com/EhViewer-NekoInverter/EhViewer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🥥 EhViewer-NekoInverter [白E] [DEPRECATED]&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/EhViewer-NekoInverter/EhViewer/eh-1.7.27.x/app/src/main/ic_launcher-playstore.png&#34; width=&#34;150&#34;&gt; &lt;br&gt;EhViewer-NekoInverter [DEPRECATED]&lt;br&gt; &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/EhViewer-NekoInverter/EhViewer/actions/workflows/ci.yml&#34;&gt; &lt;img src=&#34;https://github.com/EhViewer-NekoInverter/EhViewer/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Github Actions&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/EhViewer-NekoInverter/EhViewer/raw/eh-1.7.27.x/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/EhViewer-NekoInverter/EhViewer&#34; alt=&#34;LICENSE&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h3&gt; &lt;a href=&#34;https://github.com/EhViewer-NekoInverter/EhViewer#描述&#34;&gt; 描述 &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href=&#34;https://github.com/EhViewer-NekoInverter/EhViewer#下载&#34;&gt; 下载 &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href=&#34;https://github.com/EhViewer-NekoInverter/EhViewer#链接&#34;&gt; 链接 &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href=&#34;https://github.com/EhViewer-NekoInverter/EhViewer#问题&#34;&gt; 问题 &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href=&#34;https://github.com/EhViewer-NekoInverter/EhViewer#截图&#34;&gt; 截图 &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href=&#34;https://github.com/EhViewer-NekoInverter/EhViewer#感谢&#34;&gt; 感谢 &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href=&#34;https://github.com/EhViewer-NekoInverter/EhViewer#许可证&#34;&gt; 许可证 &lt;/a&gt; &lt;/h3&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;描述&lt;/h1&gt; &#xA;&lt;p&gt;NekoInverter 版的 EhViewer [白E]，原作者已不再维护&lt;/p&gt; &#xA;&lt;p&gt;本人与 NekoInverter 无任何关系，本仓库仅作自用目的，不开放 issue，&lt;del&gt;仅保证最低限度的可用性&lt;/del&gt; 看心情&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;可能需要 Android 10 及以上版本系统才能使用，&lt;/del&gt; 按理来说 Android 8 以上应该都可以，如果闪退就是不兼容，换别的用吧&lt;/p&gt; &#xA;&lt;p&gt;如果你可以接受 MD3 风格，那 &lt;a href=&#34;https://github.com/Ehviewer-Overhauled/Ehviewer&#34;&gt;Overhauled 版&lt;/a&gt; [彩E] 应该是最好的选择，但本仓库存在的理由也在于此，我实在不能接受 MD3 🌚🌚&lt;/p&gt; &#xA;&lt;h1&gt;下载&lt;/h1&gt; &#xA;&lt;p&gt;请前往 &lt;a href=&#34;https://github.com/EhViewer-NekoInverter/EhViewer/actions&#34;&gt;Github Actions&lt;/a&gt; 下载最新 CI 版本，需要登录 Github 账号&lt;/p&gt; &#xA;&lt;p&gt;也可以前往 &lt;a href=&#34;https://github.com/EhViewer-NekoInverter/EhViewer/releases&#34;&gt;Github Releases&lt;/a&gt; 下载发行版，无需登录账号，但可能不是最新的&lt;/p&gt; &#xA;&lt;h1&gt;链接&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;EhViewer 各版本链接&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Overhauled 版 [彩E，推荐使用]：&lt;a href=&#34;https://github.com/Ehviewer-Overhauled/Ehviewer&#34;&gt;https://github.com/Ehviewer-Overhauled/Ehviewer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Epix 版 [绿E MOD，最接近原版]：&lt;a href=&#34;https://github.com/exzhawk/EhViewer&#34;&gt;https://github.com/exzhawk/EhViewer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;SXJ 版 [绿E新版，与其他版本不兼容]：&lt;a href=&#34;https://github.com/xiaojieonly/Ehviewer_CN_SXJ&#34;&gt;https://github.com/xiaojieonly/Ehviewer_CN_SXJ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;Hippo Seven 版 [绿E原版，半停更，最新 &lt;a href=&#34;https://t.me/ehviewer/2127118&#34;&gt;1.7.8&lt;/a&gt;]：&lt;a href=&#34;https://github.com/seven332/EhViewer&#34;&gt;https://github.com/seven332/EhViewer&lt;/a&gt;&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;NekoInverter 版 [白E，已停更，最新 &lt;a href=&#34;https://t.me/ehviewer/2029210&#34;&gt;1.7.26.4&lt;/a&gt;]：&lt;a href=&#34;https://gitlab.com/NekoInverter/EhViewer&#34;&gt;https://gitlab.com/NekoInverter/EhViewer&lt;/a&gt;&lt;/del&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;其他 E-Hentai Viewer 链接&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FEhViewer [全平台]：&lt;a href=&#34;https://github.com/honjow/FEhViewer&#34;&gt;https://github.com/honjow/FEhViewer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;JHenTai [全平台]：&lt;a href=&#34;https://github.com/jiangtian616/JHenTai&#34;&gt;https://github.com/jiangtian616/JHenTai&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dai-Hentai [iOS]：&lt;a href=&#34;https://github.com/DaidoujiChen/Dai-Hentai&#34;&gt;https://github.com/DaidoujiChen/Dai-Hentai&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;EhPanda [iOS]：&lt;a href=&#34;https://github.com/EhPanda-Team/EhPanda&#34;&gt;https://github.com/EhPanda-Team/EhPanda&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Shinsi2 [iOS]：&lt;a href=&#34;https://github.com/LonelyRun/Shinsi2&#34;&gt;https://github.com/LonelyRun/Shinsi2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;E-Viewer [UWP]：&lt;a href=&#34;https://github.com/OpportunityLiu/E-Viewer&#34;&gt;https://github.com/OpportunityLiu/E-Viewer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ehentai-QT [桌面端]：&lt;a href=&#34;https://github.com/tonquer/ehentai-qt&#34;&gt;https://github.com/tonquer/ehentai-qt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Violet [移动端]：&lt;a href=&#34;https://github.com/project-violet/violet&#34;&gt;https://github.com/project-violet/violet&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;支持 E-Hentai 的聚合阅读器&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tachiyomi [Android]：&lt;a href=&#34;https://tachiyomi.org&#34;&gt;https://tachiyomi.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Hentoid [Android]：&lt;a href=&#34;https://github.com/avluis/Hentoid&#34;&gt;https://github.com/avluis/Hentoid&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Yealico [iOS]：&lt;a href=&#34;https://apps.apple.com/cn/app/yealico/id1359000639&#34;&gt;https://apps.apple.com/cn/app/yealico/id1359000639&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;E-Hentai 官方网站&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://e-hentai.org&#34;&gt;https://e-hentai.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://exhentai.org&#34;&gt;https://exhentai.org&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;问题&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;里站无法跳页&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;网站更新去掉了页码，详见 &lt;a href=&#34;https://forums.e-hentai.org/index.php?showtopic=261743&#34;&gt;https://forums.e-hentai.org/index.php?showtopic=261743&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;目前表站和里站均已应用此更改，请及时更新你的软件&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;挂梯子后打不开&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;尝试关闭 设置-高级 中的 “内置 hosts.txt” 和 “域名前置”&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;首次登录进不去里站&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;确保你的账号有里站权限，且&lt;strong&gt;登录时必须使用干净的欧美 IP&lt;/strong&gt;，登录成功后可换用其他 IP 不受影响&lt;/li&gt; &#xA; &lt;li&gt;你也可以使用 Cookie 登录&lt;/li&gt; &#xA; &lt;li&gt;不要讲什么浏览器、别的 APP 打得开，你退出重登一样会进不去&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;登录界面被跳过&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;检查是否使用了具有跳广告等功能的软件&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;其它任何白屏、509、Sad Panda 问题&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;换 IP，换到能用为止&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;标签汉化打开了没效果&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;汉化包为在线资源，请确保你的网络可以访问 GitHub，然后多开关几次试试&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;我订阅了标签，但是订阅页面提示我没有订阅&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;打开任意一个画廊后再返回访问订阅页面&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;你这个软件怎么报毒啊&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;啊对对对，有毒，别用&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;那么多软件，哪个版本好用&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;一个个试，爱用哪个用哪个&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;其他问题&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;请善用搜索引擎，或者去 E-Hentai 论坛提问&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;截图&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/EhViewer-NekoInverter/EhViewer/eh-1.7.27.x/art/screenshot-01.png&#34; alt=&#34;screenshot-01&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;感谢&lt;/h1&gt; &#xA;&lt;p&gt;本项目受到了诸多开源项目的帮助&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://source.android.com/&#34;&gt;AOSP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/h6ah4i/android-advancedrecyclerview&#34;&gt;android-advancedrecyclerview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://commons.apache.org/proper/commons-lang/&#34;&gt;Apache Commons Lang&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://apng.sourceforge.net/&#34;&gt;apng&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://giflib.sourceforge.net&#34;&gt;giflib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/greenrobot/greenDAO&#34;&gt;greenDAO&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jhy/jsoup&#34;&gt;jsoup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://libjpeg-turbo.virtualgl.org/&#34;&gt;libjpeg-turbo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.libpng.org/pub/png/libpng.html&#34;&gt;libpng&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/square/okhttp&#34;&gt;okhttp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/forge/roaster&#34;&gt;roaster&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/amlcurran/ShowcaseView&#34;&gt;ShowcaseView&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TiroTypeworks/Slabo&#34;&gt;Slabo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://home.ccil.org/~cowan/tagsoup/&#34;&gt;TagSoup&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;许可证&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2014-2019 Hippo Seven&#xA;Copyright 2020-2022 NekoInverter&#xA;&#xA;EhViewer is free software:&#xA;you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation,&#xA;either version 3 of the License, or (at your option) any later version.&#xA;&#xA;EhViewer is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;&#xA;without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&#xA;See the GNU General Public License for more details.&#xA;&#xA;You should have received a copy of the GNU General Public License along with EhViewer.&#xA;If not, see &amp;lt;https://www.gnu.org/licenses/&amp;gt;.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>