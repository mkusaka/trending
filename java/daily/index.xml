<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-03T01:33:16Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>opensearch-project/OpenSearch</title>
    <updated>2022-07-03T01:33:16Z</updated>
    <id>tag:github.com,2022-07-03:/opensearch-project/OpenSearch</id>
    <link href="https://github.com/opensearch-project/OpenSearch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🔎 Open source distributed and RESTful search engine.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://opensearch.org/assets/img/opensearch-logo-themed.svg?sanitize=true&#34; height=&#34;64px&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/opensearch-project/OpenSearch/main/#welcome&#34;&gt;Welcome!&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/opensearch-project/OpenSearch/main/#project-resources&#34;&gt;Project Resources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/opensearch-project/OpenSearch/main/#code-of-conduct&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/opensearch-project/OpenSearch/main/#security&#34;&gt;Security&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/opensearch-project/OpenSearch/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/opensearch-project/OpenSearch/main/#copyright&#34;&gt;Copyright&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/opensearch-project/OpenSearch/main/#trademark&#34;&gt;Trademark&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Welcome!&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;OpenSearch&lt;/strong&gt; is &lt;a href=&#34;https://aws.amazon.com/blogs/opensource/introducing-opensearch/&#34;&gt;a community-driven, open source fork&lt;/a&gt; of &lt;a href=&#34;https://en.wikipedia.org/wiki/Elasticsearch&#34;&gt;Elasticsearch&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Kibana&#34;&gt;Kibana&lt;/a&gt; following the &lt;a href=&#34;https://opensource.org/node/1099&#34;&gt;licence change&lt;/a&gt; in early 2021. We&#39;re looking to sustain (and evolve!) a search and analytics suite for the multitude of businesses who are dependent on the rights granted by the original, &lt;a href=&#34;https://raw.githubusercontent.com/opensearch-project/OpenSearch/main/LICENSE.txt&#34;&gt;Apache v2.0 License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Project Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://opensearch.org/&#34;&gt;Project Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://opensearch.org/downloads.html&#34;&gt;Downloads&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://opensearch.org/docs/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Need help? Try &lt;a href=&#34;https://discuss.opendistrocommunity.dev/&#34;&gt;Forums&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://opensearch.org/#principles&#34;&gt;Project Principles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/opensearch-project/OpenSearch/main/CONTRIBUTING.md&#34;&gt;Contributing to OpenSearch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/opensearch-project/OpenSearch/main/MAINTAINERS.md&#34;&gt;Maintainer Responsibilities&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/opensearch-project/OpenSearch/main/RELEASING.md&#34;&gt;Release Management&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/opensearch-project/OpenSearch/main/ADMINS.md&#34;&gt;Admin Responsibilities&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/opensearch-project/OpenSearch/main/TESTING.md&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/opensearch-project/OpenSearch/main/SECURITY.md&#34;&gt;Security&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://raw.githubusercontent.com/opensearch-project/OpenSearch/main/CODE_OF_CONDUCT.md&#34;&gt;Amazon Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://aws.github.io/code-of-conduct-faq&#34;&gt;Code of Conduct FAQ&lt;/a&gt;, or contact &lt;a href=&#34;mailto:opensource-codeofconduct@amazon.com&#34;&gt;opensource-codeofconduct@amazon.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our &lt;a href=&#34;http://aws.amazon.com/security/vulnerability-reporting/&#34;&gt;vulnerability reporting page&lt;/a&gt; or directly via email to &lt;a href=&#34;mailto:aws-security@amazon.com&#34;&gt;aws-security@amazon.com&lt;/a&gt;. Please do &lt;strong&gt;not&lt;/strong&gt; create a public GitHub issue.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/opensearch-project/OpenSearch/main/LICENSE.txt&#34;&gt;Apache v2.0 License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;Copyright OpenSearch Contributors. See &lt;a href=&#34;https://raw.githubusercontent.com/opensearch-project/OpenSearch/main/NOTICE.txt&#34;&gt;NOTICE&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Trademark&lt;/h2&gt; &#xA;&lt;p&gt;OpenSearch is a registered trademark of Amazon Web Services.&lt;/p&gt; &#xA;&lt;p&gt;OpenSearch includes certain Apache-licensed Elasticsearch code from Elasticsearch B.V. and other source code. Elasticsearch B.V. is not the source of that other source code. ELASTICSEARCH is a registered trademark of Elasticsearch B.V.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>veo/wsMemShell</title>
    <updated>2022-07-03T01:33:16Z</updated>
    <id>tag:github.com,2022-07-03:/veo/wsMemShell</id>
    <link href="https://github.com/veo/wsMemShell" rel="alternate"></link>
    <summary type="html">&lt;p&gt;websocket cmd内存马 wscmd.jsp websocket 代理内存马 wsproxy.jsp&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;strong&gt;WebSocket 内存马，一种新型内存马技术&lt;/strong&gt;&lt;/h1&gt; &#xA;&lt;h3&gt;1.前言&lt;/h3&gt; &#xA;&lt;p&gt;WebSocket是一种全双工通信协议，即客户端可以向服务端发送请求，服务端也可以主动向客户端推送数据。这样的特点，使得它在一些实时性要求比较高的场景效果斐然（比如微信朋友圈实时通知、在线协同编辑等）。主流浏览器以及一些常见服务端通信框架（Tomcat、netty、undertow、webLogic等）都对WebSocket进行了技术支持。&lt;/p&gt; &#xA;&lt;h3&gt;2.版本&lt;/h3&gt; &#xA;&lt;p&gt;2013年以前还没出JSR356标准，Tomcat就对Websocket做了支持，自定义API，再后来有了JSR356，Tomcat立马紧跟潮流，废弃自定义的API，实现JSR356那一套，这就使得在Tomcat7.0.47之后的版本和之前的版本实现方式并不一样，接入方式也改变了。&lt;/p&gt; &#xA;&lt;p&gt;JSR356 是java制定的websocket编程规范，属于Java EE 7 的一部分，所以要实现websocket内存马并不需要任何第三方依赖&lt;/p&gt; &#xA;&lt;h3&gt;3.服务端实现方式&lt;/h3&gt; &#xA;&lt;h4&gt;（1）注解方式&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;@ServerEndpoint(value = &#34;/ws/{userId}&#34;, encoders = {MessageEncoder.class}, decoders = {MessageDecoder.class}, configurator = MyServerConfigurator.class)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Tomcat在启动时会默认通过 WsSci 内的 ServletContainerInitializer 初始化 Listener 和 servlet。然后再扫描 &lt;code&gt;classpath&lt;/code&gt;下带有 &lt;code&gt;@ServerEndpoint&lt;/code&gt;注解的类进行 &lt;code&gt;addEndpoint&lt;/code&gt;加入websocket服务&lt;/p&gt; &#xA;&lt;p&gt;所以即使 Tomcat 没有扫描到 &lt;code&gt;@ServerEndpoint&lt;/code&gt;注解的类，也会进行Listener和 servlet注册，这就是为什么所有Tomcat启动都能在memshell scanner内看到WsFilter&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/veo/wsMemShell/main/image/1.png&#34; alt=&#34;image-1&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;（2）继承抽象类Endpoint方式&lt;/h4&gt; &#xA;&lt;p&gt;继承抽象类 &lt;code&gt;Endpoint&lt;/code&gt;方式比加注解 &lt;code&gt;@ServerEndpoint&lt;/code&gt;方式更麻烦，主要是需要自己实现 &lt;code&gt;MessageHandler&lt;/code&gt;和 &lt;code&gt;ServerApplicationConfig&lt;/code&gt;。&lt;code&gt;@ServerEndpoint&lt;/code&gt;的话都是使用默认的，原理上差不多，只是注解更自动化，更简洁&lt;/p&gt; &#xA;&lt;p&gt;可以用代码更方便的控制 ServerEndpointConfig 内的属性&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ServerEndpointConfig serverEndpointConfig = ServerEndpointConfig.Builder.create(WebSocketServerEndpoint3.class, &#34;/ws/{userId}&#34;).decoders(decoderList).encoders(encoderList).configurator(new MyServerConfigurator()).build();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3.websocket内存马实现方法&lt;/h3&gt; &#xA;&lt;p&gt;之前提到过 Tomcat 在启动时会默认通过 WsSci 内的 ServletContainerInitializer 初始化 Listener 和 servlet。然后再扫描 &lt;code&gt;classpath&lt;/code&gt;下带有 &lt;code&gt;@ServerEndpoint&lt;/code&gt;注解的类进行 &lt;code&gt;addEndpoint&lt;/code&gt;加入websocket服务&lt;/p&gt; &#xA;&lt;p&gt;那如果在服务启动后我们再 addEndpoint 加入websocket服务行不行呢？答案是肯定的，而且非常简单只需要三步。创建一个ServerEndpointConfig，获取ws ServerContainer，加入 ServerEndpointConfig，即可&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ServerEndpointConfig config = ServerEndpointConfig.Builder.create(EndpointInject.class, &#34;/ws&#34;).build();&#xA;ServerContainer container = (ServerContainer) req.getServletContext().getAttribute(ServerContainer.class.getName());&#xA;container.addEndpoint(config);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;4.效果&lt;/h3&gt; &#xA;&lt;p&gt;首先利用i.jsp注入一个websocket服务，路径为/x，注入后利用ws连接即可执行命令&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/veo/wsMemShell/main/image/2.png&#34; alt=&#34;image-2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;且通过memshell scanner查询不到任何异常（因为根本就没注册新的 Listener、servlet 或者 Filter）&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/veo/wsMemShell/main/image/3.png&#34; alt=&#34;image-3&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;5.代理&lt;/h3&gt; &#xA;&lt;p&gt;WebSocket是一种全双工通信协议，它可以用来做代理，且速度和普通的TCP代理一样快，这也是我研究websocket内存马的原因。&lt;/p&gt; &#xA;&lt;p&gt;例如有一台不出网主机，有反序列化漏洞。&lt;/p&gt; &#xA;&lt;p&gt;以前在这种场景下，可能会考虑上reGeorg或者利用端口复用来搭建代理。&lt;/p&gt; &#xA;&lt;p&gt;现在可以利用反序列化漏洞直接注入websocket代理内存马，然后直接连上用上全双工通信协议的代理。&lt;/p&gt; &#xA;&lt;p&gt;注入完内存马以后，使用 Gost：&lt;a href=&#34;https://github.com/go-gost/gost&#34;&gt;https://github.com/go-gost/gost&lt;/a&gt; 连接代理&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gost -L &#34;socks5://:1080&#34; -F &#34;ws://127.0.0.1:8080?path=/proxy&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;然后连接本地1080端口socks5即可使用代理&lt;/p&gt; &#xA;&lt;h2&gt;版权声明&lt;/h2&gt; &#xA;&lt;p&gt;完整代码：&lt;a href=&#34;https://github.com/veo/wsMemShell&#34;&gt;https://github.com/veo/wsMemShell&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;本文章著作权归作者所有。转载请注明出处！&lt;a href=&#34;https://github.com/veo&#34;&gt;https://github.com/veo&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>WeiYe-Jing/datax-web</title>
    <updated>2022-07-03T01:33:16Z</updated>
    <id>tag:github.com,2022-07-03:/WeiYe-Jing/datax-web</id>
    <link href="https://github.com/WeiYe-Jing/datax-web" rel="alternate"></link>
    <summary type="html">&lt;p&gt;DataX集成可视化页面，选择数据源即可一键生成数据同步任务，支持RDBMS、Hive、HBase、ClickHouse、MongoDB等数据源，批量创建RDBMS数据同步任务，集成开源调度系统，支持分布式、增量同步数据、实时查看运行日志、监控执行器资源、KILL运行进程、数据源信息加密等。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/WeiYe-Jing/datax-web&#34; alt=&#34;GitHub contributors&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues/WeiYe-Jing/datax-web&#34; alt=&#34;GitHub issues&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/WeiYe-Jing/datax-web&#34; alt=&#34;GitHub&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/languages/code-size/WeiYe-Jing/datax-web&#34; alt=&#34;GitHub code size in bytes&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/qq%E7%BE%A4-776939467-green.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;DataX-Web&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/WeiYe-Jing/datax-web&#34;&gt;&lt;img src=&#34;https://starchart.cc/WeiYe-Jing/datax-web.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;DataX Web是在DataX之上开发的分布式数据同步工具，提供简单易用的 操作界面，降低用户使用DataX的学习成本，缩短任务配置时间，避免配置过程中出错。用户可通过页面选择数据源即可创建数据同步任务，支持RDBMS、Hive、HBase、ClickHouse、MongoDB等数据源，RDBMS数据源可批量创建数据同步任务，支持实时查看数据同步进度及日志并提供终止同步功能，集成并二次开发xxl-job可根据时间、自增主键增量同步数据。&lt;/p&gt; &#xA;&lt;p&gt;任务&#34;执行器&#34;支持集群部署，支持执行器多节点路由策略选择，支持超时控制、失败重试、失败告警、任务依赖，执行器CPU.内存.负载的监控等等。后续还将提供更多的数据源支持、数据转换UDF、表结构同步、数据同步血缘等更为复杂的业务场景。&lt;/p&gt; &#xA;&lt;h1&gt;Architecture diagram：&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/DataX-Web.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;System Requirements&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Language: Java 8（jdk版本建议1.8.201以上）&lt;br&gt; Python2.7(支持Python3需要修改替换datax/bin下面的三个python文件，替换文件在doc/datax-web/datax-python3下)&lt;/li&gt; &#xA; &lt;li&gt;Environment: MacOS, Windows,Linux&lt;/li&gt; &#xA; &lt;li&gt;Database: Mysql5.7&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;1、通过Web构建DataX Json；&lt;/li&gt; &#xA; &lt;li&gt;2、DataX Json保存在数据库中，方便任务的迁移，管理；&lt;/li&gt; &#xA; &lt;li&gt;3、Web实时查看抽取日志，类似Jenkins的日志控制台输出功能；&lt;/li&gt; &#xA; &lt;li&gt;4、DataX运行记录展示，可页面操作停止DataX作业；&lt;/li&gt; &#xA; &lt;li&gt;5、支持DataX定时任务，支持动态修改任务状态、启动/停止任务，以及终止运行中任务，即时生效；&lt;/li&gt; &#xA; &lt;li&gt;6、调度采用中心式设计，支持集群部署；&lt;/li&gt; &#xA; &lt;li&gt;7、任务分布式执行，任务&#34;执行器&#34;支持集群部署；&lt;/li&gt; &#xA; &lt;li&gt;8、执行器会周期性自动注册任务, 调度中心将会自动发现注册的任务并触发执行；&lt;/li&gt; &#xA; &lt;li&gt;9、路由策略：执行器集群部署时提供丰富的路由策略，包括：第一个、最后一个、轮询、随机、一致性HASH、最不经常使用、最近最久未使用、故障转移、忙碌转移等；&lt;/li&gt; &#xA; &lt;li&gt;10、阻塞处理策略：调度过于密集执行器来不及处理时的处理策略，策略包括：单机串行（默认）、丢弃后续调度、覆盖之前调度；&lt;/li&gt; &#xA; &lt;li&gt;11、任务超时控制：支持自定义任务超时时间，任务运行超时将会主动中断任务；&lt;/li&gt; &#xA; &lt;li&gt;12、任务失败重试：支持自定义任务失败重试次数，当任务失败时将会按照预设的失败重试次数主动进行重试；&lt;/li&gt; &#xA; &lt;li&gt;13、任务失败告警；默认提供邮件方式失败告警，同时预留扩展接口，可方便的扩展短信、钉钉等告警方式；&lt;/li&gt; &#xA; &lt;li&gt;14、用户管理：支持在线管理系统用户，存在管理员、普通用户两种角色；&lt;/li&gt; &#xA; &lt;li&gt;15、任务依赖：支持配置子任务依赖，当父任务执行结束且执行成功后将会主动触发一次子任务的执行, 多个子任务用逗号分隔；&lt;/li&gt; &#xA; &lt;li&gt;16、运行报表：支持实时查看运行数据，以及调度报表，如调度日期分布图，调度成功分布图等；&lt;/li&gt; &#xA; &lt;li&gt;17、指定增量字段，配置定时任务自动获取每次的数据区间，任务失败重试，保证数据安全；&lt;/li&gt; &#xA; &lt;li&gt;18、页面可配置DataX启动JVM参数；&lt;/li&gt; &#xA; &lt;li&gt;19、数据源配置成功后添加手动测试功能；&lt;/li&gt; &#xA; &lt;li&gt;20、可以对常用任务进行配置模板，在构建完JSON之后可选择关联模板创建任务；&lt;/li&gt; &#xA; &lt;li&gt;21、jdbc添加hive数据源支持，可在构建JSON页面选择数据源生成column信息并简化配置；&lt;/li&gt; &#xA; &lt;li&gt;22、优先通过环境变量获取DataX文件目录，集群部署时不用指定JSON及日志目录；&lt;/li&gt; &#xA; &lt;li&gt;23、通过动态参数配置指定hive分区，也可以配合增量实现增量数据动态插入分区；&lt;/li&gt; &#xA; &lt;li&gt;24、任务类型由原来DataX任务扩展到Shell任务、Python任务、PowerShell任务；&lt;/li&gt; &#xA; &lt;li&gt;25、添加HBase数据源支持，JSON构建可通过HBase数据源获取hbaseConfig，column；&lt;/li&gt; &#xA; &lt;li&gt;26、添加MongoDB数据源支持，用户仅需要选择collectionName即可完成json构建；&lt;/li&gt; &#xA; &lt;li&gt;27、添加执行器CPU、内存、负载的监控页面；&lt;/li&gt; &#xA; &lt;li&gt;28、添加24类插件DataX JSON配置样例&lt;/li&gt; &#xA; &lt;li&gt;29、公共字段（创建时间，创建人，修改时间，修改者）插入或更新时自动填充&lt;/li&gt; &#xA; &lt;li&gt;30、对swagger接口进行token验证&lt;/li&gt; &#xA; &lt;li&gt;31、任务增加超时时间，对超时任务kill datax进程，可配合重试策略避免网络问题导致的datax卡死。&lt;/li&gt; &#xA; &lt;li&gt;32、添加项目管理模块，可对任务分类管理；&lt;/li&gt; &#xA; &lt;li&gt;33、对RDBMS数据源增加批量任务创建功能，选择数据源，表即可根据模板批量生成DataX同步任务；&lt;/li&gt; &#xA; &lt;li&gt;34、JSON构建增加ClickHouse数据源支持；&lt;/li&gt; &#xA; &lt;li&gt;35、执行器CPU.内存.负载的监控页面图形化；&lt;/li&gt; &#xA; &lt;li&gt;36、RDBMS数据源增量抽取增加主键自增方式并优化页面参数配置；&lt;/li&gt; &#xA; &lt;li&gt;37、更换MongoDB数据源连接方式,重构HBase数据源JSON构建模块；&lt;/li&gt; &#xA; &lt;li&gt;38、脚本类型任务增加停止功能；&lt;/li&gt; &#xA; &lt;li&gt;39、rdbms json构建增加postSql，并支持构建多个preSql，postSql；&lt;/li&gt; &#xA; &lt;li&gt;40、数据源信息加密算法修改及代码优化；&lt;/li&gt; &#xA; &lt;li&gt;41、日志页面增加DataX执行结果统计数据；&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Quick Start：&lt;/h1&gt; &#xA;&lt;h5&gt;请点击：&lt;a href=&#34;https://github.com/WeiYe-Jing/datax-web/raw/master/userGuid.md&#34;&gt;Quick Start&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;h5&gt;Linux：&lt;a href=&#34;https://github.com/WeiYe-Jing/datax-web/raw/master/doc/datax-web/datax-web-deploy.md&#34;&gt;一键部署&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;h1&gt;Introduction：&lt;/h1&gt; &#xA;&lt;h3&gt;1.执行器配置(使用开源项目xxl-job)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/executor.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;1、&#34;调度中心OnLine:&#34;右侧显示在线的&#34;调度中心&#34;列表, 任务执行结束后, 将会以failover的模式进行回调调度中心通知执行结果, 避免回调的单点风险;&lt;/li&gt; &#xA; &lt;li&gt;2、&#34;执行器列表&#34; 中显示在线的执行器列表, 可通过&#34;OnLine 机器&#34;查看对应执行器的集群机器;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;执行器属性说明&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/add_executor.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1、AppName: （与datax-executor中application.yml的datax.job.executor.appname保持一致）&#xA;   每个执行器集群的唯一标示AppName, 执行器会周期性以AppName为对象进行自动注册。可通过该配置自动发现注册成功的执行器, 供任务调度时使用;&#xA;2、名称: 执行器的名称, 因为AppName限制字母数字等组成,可读性不强, 名称为了提高执行器的可读性;&#xA;3、排序: 执行器的排序, 系统中需要执行器的地方,如任务新增, 将会按照该排序读取可用的执行器列表;&#xA;4、注册方式：调度中心获取执行器地址的方式；&#xA;    自动注册：执行器自动进行执行器注册，调度中心通过底层注册表可以动态发现执行器机器地址；&#xA;    手动录入：人工手动录入执行器的地址信息，多地址逗号分隔，供调度中心使用；&#xA;5、机器地址：&#34;注册方式&#34;为&#34;手动录入&#34;时有效，支持人工维护执行器的地址信息；&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2.创建数据源&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/add_datasource.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;第四步使用&lt;/p&gt; &#xA;&lt;h3&gt;3.创建任务模版&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/template_list.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;第四步使用&lt;/p&gt; &#xA;&lt;h3&gt;4. 构建JSON脚本&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;1.步骤一，步骤二，选择第二步中创建的数据源，JSON构建目前支持的数据源有hive,mysql,oracle,postgresql,sqlserver,hbase,mongodb,clickhouse 其它数据源的JSON构建正在开发中,暂时需要手动编写。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/build.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2.字段映射&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/mapping.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;3.点击构建，生成json,此时可以选择复制json然后创建任务，选择datax任务，将json粘贴到文本框。也可以点击选择模版，直接生成任务。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/select_template.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;5.批量创建任务&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/batch_build_r.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/batch_build_w.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;6.任务创建介绍（关联模版创建任务不再介绍，具体参考4. 构建JSON脚本）&lt;/h3&gt; &#xA;&lt;h4&gt;支持DataX任务,Shell任务，Python任务，PowerShell任务&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/datax.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/shell.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;阻塞处理策略：调度过于密集执行器来不及处理时的处理策略；&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;单机串行：调度请求进入单机执行器后，调度请求进入FIFO队列并以串行方式运行；&lt;/li&gt; &#xA;   &lt;li&gt;丢弃后续调度：调度请求进入单机执行器后，发现执行器存在运行的调度任务，本次请求将会被丢弃并标记为失败；&lt;/li&gt; &#xA;   &lt;li&gt;覆盖之前调度：调度请求进入单机执行器后，发现执行器存在运行的调度任务，将会终止运行中的调度任务并清空队列，然后运行本地调度任务；&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;增量增新建议将阻塞策略设置为丢弃后续调度或者单机串行&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;设置单机串行时应该注意合理设置重试次数(失败重试的次数*每次执行时间&amp;lt;任务的调度周期)，重试的次数如果设置的过多会导致数据重复，例如任务30秒执行一次，每次执行时间需要20秒，设置重试三次，如果任务失败了，第一个重试的时间段为1577755680-1577756680，重试任务没结束，新任务又开启，那新任务的时间段会是1577755680-1577758680&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/WeiYe-Jing/datax-web/raw/master/doc/datax-web/increment-desc.md&#34;&gt;增量参数设置&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/WeiYe-Jing/datax-web/raw/master/doc/datax-web/partition-dynamic-param.md&#34;&gt;分区参数设置&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;7. 任务列表&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/job.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;8. 可以点击查看日志，实时获取日志信息,终止正在执行的datax进程&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/log_stat.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://datax-web.oss-cn-hangzhou.aliyuncs.com/img/log_detail.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;9.任务资源监控&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://datax-web.oss-cn-hangzhou.aliyuncs.com/img/monitor.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;10. admin可以创建用户，编辑用户信息&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/user.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;UI&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/WeiYe-Jing/datax-web-ui&#34;&gt;前端github地址&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;项目成员&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;water&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;非常荣幸成为datax-web的Committer，从早期datax手工编写任务+配置，到datax-web界面化勾选创建任务+配置信息+调度管理，datax-web将数据同步工作的效率提升不少，相信后面后成为etl中不可或缺的生产力……&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alecor&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;非常荣幸成为datax-web的Committer，datax-web旨在帮助用户从datax配置中解放出来，提供datax的Web化的管理能力。希望datax-web能为更多有需要的人服务，带来更好的简单、易用的体验！&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;zhouhongfa&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;liukunyuan&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;感谢贡献！&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Contributions are welcome! Open a pull request to fix a bug, or open an Issue to discuss a new feature or change.&lt;/p&gt; &#xA;&lt;p&gt;欢迎参与项目贡献！比如提交PR修复一个bug，或者新建 Issue 讨论新特性或者变更。&lt;/p&gt; &#xA;&lt;h1&gt;Copyright and License&lt;/h1&gt; &#xA;&lt;p&gt;MIT License&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2020 WeiYe&lt;/p&gt; &#xA;&lt;p&gt;产品开源免费，并且将持续提供免费的社区技术支持。个人或企业内部可自由的接入和使用。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;欢迎在 &lt;a href=&#34;https://github.com/WeiYe-Jing/datax-web/issues/93&#34;&gt;登记地址&lt;/a&gt; 登记，登记仅仅为了产品推广和提升社区开发的动力。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;v-2.1.2&lt;/h1&gt; &#xA;&lt;h3&gt;新增&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;添加项目管理模块，可对任务分类管理；&lt;/li&gt; &#xA; &lt;li&gt;对RDBMS数据源增加批量任务创建功能，选择数据源，表即可根据模板批量生成DataX同步任务；&lt;/li&gt; &#xA; &lt;li&gt;JSON构建增加ClickHouse数据源支持；&lt;/li&gt; &#xA; &lt;li&gt;执行器CPU.内存.负载的监控页面图形化；&lt;/li&gt; &#xA; &lt;li&gt;RDBMS数据源增量抽取增加主键自增方式并优化页面参数配置；&lt;/li&gt; &#xA; &lt;li&gt;更换MongoDB数据源连接方式,重构HBase数据源JSON构建模块；&lt;/li&gt; &#xA; &lt;li&gt;脚本类型任务增加停止功能；&lt;/li&gt; &#xA; &lt;li&gt;rdbms json构建增加postSql，并支持构建多个preSql，postSql；&lt;/li&gt; &#xA; &lt;li&gt;合并datax-registry模块到datax-rpc中； 10.数据源信息加密算法修改及代码优化； 11.时间增量同步支持更多时间格式； 12.日志页面增加DataX执行结果统计数据；&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;升级：&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;PostgreSql，SQLServer，Oracle 数据源JSON构建增加schema name选择；&lt;/li&gt; &#xA; &lt;li&gt;DataX JSON中的字段名称与数据源关键词一致问题优化；&lt;/li&gt; &#xA; &lt;li&gt;任务管理页面按钮展示优化；&lt;/li&gt; &#xA; &lt;li&gt;日志管理页面增加任务描述信息；&lt;/li&gt; &#xA; &lt;li&gt;JSON构建前端form表单不能缓存数据问题修复;&lt;/li&gt; &#xA; &lt;li&gt;HIVE JSON构建增加头尾选项参数;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;备注：&lt;/h3&gt; &#xA;&lt;p&gt;2.1.1版本不建议升级，数据源信息加密方式变更会导致之前已加密的数据源解密失败，任务运行失败。 如果需要升级请重建数据源，任务。&lt;/p&gt; &#xA;&lt;h1&gt;v-2.1.1&lt;/h1&gt; &#xA;&lt;h3&gt;新增&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;添加HBase数据源支持，JSON构建可通过HBase数据源获取hbaseConfig，column；&lt;/li&gt; &#xA; &lt;li&gt;添加MongoDB数据源支持，用户仅需要选择collectionName即可完成json构建；&lt;/li&gt; &#xA; &lt;li&gt;添加执行器CPU.内存.负载的监控页面；&lt;/li&gt; &#xA; &lt;li&gt;添加24类插件DataX JSON配置样例&lt;/li&gt; &#xA; &lt;li&gt;公共字段（创建时间，创建人，修改时间，修改者）插入或更新时自动填充&lt;/li&gt; &#xA; &lt;li&gt;对swagger接口进行token验证&lt;/li&gt; &#xA; &lt;li&gt;任务增加超时时间，对超时任务kill datax进程，可配合重试策略避免网络问题导致的datax卡死。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;升级：&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;数据源管理对用户名和密码进行加密，提高安全性；&lt;/li&gt; &#xA; &lt;li&gt;对JSON文件中的用户名密码进行加密，执行DataX任务时解密&lt;/li&gt; &#xA; &lt;li&gt;对页面菜单整理，图标升级，提示信息等交互优化；&lt;/li&gt; &#xA; &lt;li&gt;日志输出取消项目类名等无关信息，减小文件大小，优化大文件输出，优化页面展示；&lt;/li&gt; &#xA; &lt;li&gt;logback为从yml中获取日志路径配置&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;修复：&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;任务日志过大时，查看日志报错，请求超时；&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;提交代码&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/WeiYe-Jing/datax-web/issues/190&#34;&gt;参与贡献&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Contact us&lt;/h1&gt; &#xA;&lt;h3&gt;个人微信&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/WechatIMG2.jpeg?x-oss-process=image/resize,w_230,h_230&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;QQ交流群&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/qrcode3.jpeg?x-oss-process=image/resize,w_250,h_300&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>