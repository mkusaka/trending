<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-29T01:32:14Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Snailclimb/guide-rpc-framework</title>
    <updated>2023-08-29T01:32:14Z</updated>
    <id>tag:github.com,2023-08-29:/Snailclimb/guide-rpc-framework</id>
    <link href="https://github.com/Snailclimb/guide-rpc-framework" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A custom RPC framework implemented by Netty+Kyro+Zookeeper.（一款基于 Netty+Kyro+Zookeeper 实现的自定义 RPC 框架-附详细实现过程和相关教程。）&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;guide-rpc-framework&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://javaguide.cn/zhuanlan/handwritten-rpc-framework.html&#34;&gt;该 RPC 框架配套教程已经更新在我的星球，点击此链接了解详情。&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt; 中文| &lt;a href=&#34;https://raw.githubusercontent.com/Snailclimb/guide-rpc-framework/master/README-EN.md&#34;&gt;English&lt;/a&gt; &lt;/p&gt; &#xA; &lt;p&gt; &lt;a href=&#34;https://github.com/Snailclimb/guide-rpc-framework&#34;&gt;Github&lt;/a&gt; | &lt;a href=&#34;https://gitee.com/SnailClimb/guide-rpc-framework &#34;&gt;Gitee&lt;/a&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;前言&lt;/h2&gt; &#xA;&lt;p&gt;虽说 RPC 的原理实际不难，但是，自己在实现的过程中自己也遇到了很多问题。&lt;a href=&#34;https://github.com/Snailclimb/guide-rpc-framework&#34;&gt;guide-rpc-framework&lt;/a&gt; 目前只实现了 RPC 框架最基本的功能，一些可优化点都在下面提到了，有兴趣的小伙伴可以自行完善。&lt;/p&gt; &#xA;&lt;p&gt;通过这个简易的轮子，你可以学到 RPC 的底层原理和原理以及各种 Java 编码实践的运用。&lt;/p&gt; &#xA;&lt;p&gt;你甚至可以把 &lt;a href=&#34;https://github.com/Snailclimb/guide-rpc-framework&#34;&gt;guide-rpc-framework&lt;/a&gt; 当做你的毕设/项目经验的选择，这是非常不错！对比其他求职者的项目经验都是各种系统，造轮子肯定是更加能赢得面试官的青睐。&lt;/p&gt; &#xA;&lt;p&gt;如果你要将 &lt;a href=&#34;https://github.com/Snailclimb/guide-rpc-framework&#34;&gt;guide-rpc-framework&lt;/a&gt; 当做你的毕设/项目经验的话，我希望你一定要搞懂，而不是直接复制粘贴我的思想。你可以 fork 我的项目，然后进行优化。如果你觉得的优化是有价值的话，你可以提交 PR 给我，我会尽快处理。&lt;/p&gt; &#xA;&lt;h2&gt;介绍&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Snailclimb/guide-rpc-framework&#34;&gt;guide-rpc-framework&lt;/a&gt; 是一款基于 Netty+Kyro+Zookeeper 实现的 RPC 框架。代码注释详细，结构清晰，并且集成了 Check Style 规范代码结构，非常适合阅读和学习。&lt;/p&gt; &#xA;&lt;p&gt;由于 Guide哥自身精力和能力有限，如果大家觉得有需要改进和完善的地方的话，欢迎 fork 本项目，然后 clone 到本地，在本地修改后提交 PR 给我，我会在第一时间 Review 你的代码。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;我们先从一个基本的 RPC 框架设计思路说起！&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;一个基本的 RPC 框架设计思路&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt; ：我们这里说的 RPC 框架指的是：可以让客户端直接调用服务端方法就像调用本地方法一样简单的框架，比如我前面介绍的 Dubbo、Motan、gRPC 这些。 如果需要和 HTTP 协议打交道，解析和封装 HTTP 请求和响应。这类框架并不能算是“RPC 框架”，比如 Feign。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;一个最简单的 RPC 框架使用示意图如下图所示,这也是 &lt;a href=&#34;https://github.com/Snailclimb/guide-rpc-framework&#34;&gt;guide-rpc-framework&lt;/a&gt; 目前的架构 ：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Snailclimb/guide-rpc-framework/master/images/rpc-architure.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;服务提供端 Server 向注册中心注册服务，服务消费者 Client 通过注册中心拿到服务相关信息，然后再通过网络请求服务提供端 Server。&lt;/p&gt; &#xA;&lt;p&gt;作为 RPC 框架领域的佼佼者&lt;a href=&#34;https://github.com/apache/dubbo&#34;&gt;Dubbo&lt;/a&gt;的架构如下图所示,和我们上面画的大体也是差不多的。&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/Snailclimb/guide-rpc-framework/master/images/dubbo-architure.jpg&#34; style=&#34;zoom:80%;&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;一般情况下， RPC 框架不仅要提供服务发现功能，还要提供负载均衡、容错等功能，这样的 RPC 框架才算真正合格的。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;简单说一下设计一个最基本的 RPC 框架的思路：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Snailclimb/guide-rpc-framework/master/images/rpc-architure-detail.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;注册中心&lt;/strong&gt; ：注册中心首先是要有的，推荐使用 Zookeeper。注册中心负责服务地址的注册与查找，相当于目录服务。服务端启动的时候将服务名称及其对应的地址(ip+port)注册到注册中心，服务消费端根据服务名称找到对应的服务地址。有了服务地址之后，服务消费端就可以通过网络请求服务端了。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;网络传输&lt;/strong&gt; ：既然要调用远程的方法就要发请求，请求中至少要包含你调用的类名、方法名以及相关参数吧！推荐基于 NIO 的 Netty 框架。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;序列化&lt;/strong&gt; ：既然涉及到网络传输就一定涉及到序列化，你不可能直接使用 JDK 自带的序列化吧！JDK 自带的序列化效率低并且有安全漏洞。 所以，你还要考虑使用哪种序列化协议，比较常用的有 hession2、kyro、protostuff。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;动态代理&lt;/strong&gt; ： 另外，动态代理也是需要的。因为 RPC 的主要目的就是让我们调用远程方法像调用本地方法一样简单，使用动态代理可以屏蔽远程方法调用的细节比如网络传输。也就是说当你调用远程方法的时候，实际会通过代理对象来传输网络请求，不然的话，怎么可能直接就调用到远程方法呢？&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;负载均衡&lt;/strong&gt; ：负载均衡也是需要的。为啥？举个例子我们的系统中的某个服务的访问量特别大，我们将这个服务部署在了多台服务器上，当客户端发起请求的时候，多台服务器都可以处理这个请求。那么，如何正确选择处理该请求的服务器就很关键。假如，你就要一台服务器来处理该服务的请求，那该服务部署在多台服务器的意义就不复存在了。负载均衡就是为了避免单个服务器响应同一请求，容易造成服务器宕机、崩溃等问题，我们从负载均衡的这四个字就能明显感受到它的意义。&lt;/li&gt; &#xA; &lt;li&gt;......&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;项目基本情况和可优化点&lt;/h3&gt; &#xA;&lt;p&gt;为了循序渐进，最初的是时候，我是基于传统的 &lt;strong&gt;BIO&lt;/strong&gt; 的方式 &lt;strong&gt;Socket&lt;/strong&gt; 进行网络传输，然后利用 &lt;strong&gt;JDK 自带的序列化机制&lt;/strong&gt; 来实现这个 RPC 框架的。后面，我对原始版本进行了优化，已完成的优化点和可以完成的优化点我都列在了下面 👇。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;为什么要把可优化点列出来？&lt;/strong&gt; 主要是想给哪些希望优化这个 RPC 框架的小伙伴一点思路。欢迎大家 fork 本仓库，然后自己进行优化。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;使用 Netty（基于 NIO）替代 BIO 实现网络传输；&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;使用开源的序列化机制 Kyro（也可以用其它的）替代 JDK 自带的序列化机制；&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;使用 Zookeeper 管理相关服务地址信息&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Netty 重用 Channel 避免重复连接服务端&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 使用 &lt;code&gt;CompletableFuture&lt;/code&gt; 包装接受客户端返回结果（之前的实现是通过 &lt;code&gt;AttributeMap&lt;/code&gt; 绑定到 Channel 上实现的） 详见：&lt;a href=&#34;https://raw.githubusercontent.com/Snailclimb/guide-rpc-framework/master/docs/%E4%BD%BF%E7%94%A8CompletableFuture%E4%BC%98%E5%8C%96%E6%8E%A5%E5%8F%97%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E7%AB%AF%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C.md&#34;&gt;使用 CompletableFuture 优化接受服务提供端返回结果&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;增加 Netty 心跳机制&lt;/strong&gt; : 保证客户端和服务端的连接不被断掉，避免重连。&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;客户端调用远程服务的时候进行负载均衡&lt;/strong&gt; ：调用服务的时候，从很多服务地址中根据相应的负载均衡算法选取一个服务地址。ps：目前实现了随机负载均衡算法与一致性哈希算法。&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;处理一个接口有多个类实现的情况&lt;/strong&gt; ：对服务分组，发布服务的时候增加一个 group 参数即可。&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;集成 Spring 通过注解注册服务&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;集成 Spring 通过注解进行服务消费&lt;/strong&gt; 。参考： &lt;a href=&#34;https://github.com/Snailclimb/guide-rpc-framework/pull/10&#34;&gt;PR#10&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;增加服务版本号&lt;/strong&gt; ：建议使用两位数字版本，如：1.0，通常在接口不兼容时版本号才需要升级。为什么要增加服务版本号？为后续不兼容升级提供可能，比如服务接口增加方法，或服务模型增加字段，可向后兼容，删除方法或删除字段，将不兼容，枚举类型新增字段也不兼容，需通过变更版本号升级。&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;对 SPI 机制的运用&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;增加可配置比如序列化方式、注册中心的实现方式,避免硬编码&lt;/strong&gt; ：通过 API 配置，后续集成 Spring 的话建议使用配置文件的方式进行配置&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;客户端与服务端通信协议（数据包结构）重新设计&lt;/strong&gt; ，可以将原有的 &lt;code&gt;RpcRequest&lt;/code&gt;和 &lt;code&gt;RpcReuqest&lt;/code&gt; 对象作为消息体，然后增加如下字段（可以参考：《Netty 入门实战小册》和 Dubbo 框架对这块的设计）： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;魔数&lt;/strong&gt; ： 通常是 4 个字节。这个魔数主要是为了筛选来到服务端的数据包，有了这个魔数之后，服务端首先取出前面四个字节进行比对，能够在第一时间识别出这个数据包并非是遵循自定义协议的，也就是无效数据包，为了安全考虑可以直接关闭连接以节省资源。&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;序列化器编号&lt;/strong&gt; ：标识序列化的方式，比如是使用 Java 自带的序列化，还是 json，kyro 等序列化方式。&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;消息体长度&lt;/strong&gt; ： 运行时计算出来。&lt;/li&gt; &#xA;   &lt;li&gt;......&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;编写测试为重构代码提供信心&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;服务监控中心（类似dubbo admin）&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;设置 gzip 压缩&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;项目模块概览&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Snailclimb/guide-rpc-framework/master/images/RPC%E6%A1%86%E6%9E%B6%E5%90%84%E4%B8%AA%E6%A8%A1%E5%9D%97%E4%BB%8B%E7%BB%8D.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;运行项目&lt;/h2&gt; &#xA;&lt;h3&gt;导入项目&lt;/h3&gt; &#xA;&lt;p&gt;fork 项目到自己的仓库，然后克隆项目到自己的本地：&lt;code&gt;git clone git@github.com:username/guide-rpc-framework.git&lt;/code&gt;，使用 IDEA 打开，等待项目初始化完成。&lt;/p&gt; &#xA;&lt;h3&gt;初始化 git hooks&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;这一步主要是为了在 commit 代码之前，跑 Check Style，保证代码格式没问题，如果有问题的话就不能提交。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;以下演示的是 Mac/Linux 对应的操作，Window 用户需要手动将 &lt;code&gt;config/git-hooks&lt;/code&gt; 目录下的&lt;code&gt;pre-commit&lt;/code&gt; 文件拷贝到 项目下的 &lt;code&gt;.git/hooks/&lt;/code&gt; 目录。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;执行下面这些命令：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;➜  guide-rpc-framework git:(master) ✗ chmod +x ./init.sh&#xA;➜  guide-rpc-framework git:(master) ✗ ./init.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;init.sh&lt;/code&gt; 这个脚本的主要作用是将 git commit 钩子拷贝到项目下的 &lt;code&gt;.git/hooks/&lt;/code&gt; 目录，这样你每次 commit 的时候就会执行了。&lt;/p&gt; &#xA;&lt;h3&gt;CheckStyle 插件下载和配置&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;IntelliJ IDEA-&amp;gt; Preferences-&amp;gt;Plugins-&amp;gt;搜索下载 CheckStyle 插件&lt;/code&gt;，然后按照如下方式进行配置。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Snailclimb/guide-rpc-framework/master/images/setting-check-style.png&#34; alt=&#34;CheckStyle 插件下载和配置&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;配置完成之后，按照如下方式使用这个插件！&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Snailclimb/guide-rpc-framework/master/images/run-check-style.png&#34; alt=&#34;插件使用方式&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;下载运行 zookeeper&lt;/h3&gt; &#xA;&lt;p&gt;这里使用 Docker 来下载安装。&lt;/p&gt; &#xA;&lt;p&gt;下载：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker pull zookeeper:3.5.8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;运行：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -d --name zookeeper -p 2181:2181 zookeeper:3.5.8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;使用&lt;/h2&gt; &#xA;&lt;h3&gt;服务提供端&lt;/h3&gt; &#xA;&lt;p&gt;实现接口：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Slf4j&#xA;@RpcService(group = &#34;test1&#34;, version = &#34;version1&#34;)&#xA;public class HelloServiceImpl implements HelloService {&#xA;    static {&#xA;        System.out.println(&#34;HelloServiceImpl被创建&#34;);&#xA;    }&#xA;&#xA;    @Override&#xA;    public String hello(Hello hello) {&#xA;        log.info(&#34;HelloServiceImpl收到: {}.&#34;, hello.getMessage());&#xA;        String result = &#34;Hello description is &#34; + hello.getDescription();&#xA;        log.info(&#34;HelloServiceImpl返回: {}.&#34;, result);&#xA;        return result;&#xA;    }&#xA;}&#xA;&#x9;&#xA;@Slf4j&#xA;public class HelloServiceImpl2 implements HelloService {&#xA;&#xA;    static {&#xA;        System.out.println(&#34;HelloServiceImpl2被创建&#34;);&#xA;    }&#xA;&#xA;    @Override&#xA;    public String hello(Hello hello) {&#xA;        log.info(&#34;HelloServiceImpl2收到: {}.&#34;, hello.getMessage());&#xA;        String result = &#34;Hello description is &#34; + hello.getDescription();&#xA;        log.info(&#34;HelloServiceImpl2返回: {}.&#34;, result);&#xA;        return result;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;发布服务(使用 Netty 进行传输)：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;/**&#xA; * Server: Automatic registration service via @RpcService annotation&#xA; *&#xA; * @author shuang.kou&#xA; * @createTime 2020年05月10日 07:25:00&#xA; */&#xA;@RpcScan(basePackage = {&#34;github.javaguide.serviceimpl&#34;})&#xA;public class NettyServerMain {&#xA;    public static void main(String[] args) {&#xA;        // Register service via annotation&#xA;        new AnnotationConfigApplicationContext(NettyServerMain.class);&#xA;        NettyServer nettyServer = new NettyServer();&#xA;        // Register service manually&#xA;        HelloService helloService2 = new HelloServiceImpl2();&#xA;        RpcServiceProperties rpcServiceConfig = RpcServiceProperties.builder()&#xA;                .group(&#34;test2&#34;).version(&#34;version2&#34;).build();&#xA;        nettyServer.registerService(helloService2, rpcServiceConfig);&#xA;        nettyServer.start();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;服务消费端&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Component&#xA;public class HelloController {&#xA;&#xA;    @RpcReference(version = &#34;version1&#34;, group = &#34;test1&#34;)&#xA;    private HelloService helloService;&#xA;&#xA;    public void test() throws InterruptedException {&#xA;        String hello = this.helloService.hello(new Hello(&#34;111&#34;, &#34;222&#34;));&#xA;        //如需使用 assert 断言，需要在 VM options 添加参数：-ea&#xA;        assert &#34;Hello description is 222&#34;.equals(hello);&#xA;        Thread.sleep(12000);&#xA;        for (int i = 0; i &amp;lt; 10; i++) {&#xA;            System.out.println(helloService.hello(new Hello(&#34;111&#34;, &#34;222&#34;)));&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ClientTransport rpcRequestTransport = new SocketRpcClient();&#xA;RpcServiceProperties rpcServiceConfig = RpcServiceProperties.builder()&#xA;        .group(&#34;test2&#34;).version(&#34;version2&#34;).build();&#xA;RpcClientProxy rpcClientProxy = new RpcClientProxy(rpcRequestTransport, rpcServiceConfig);&#xA;HelloService helloService = rpcClientProxy.getProxy(HelloService.class);&#xA;String hello = helloService.hello(new Hello(&#34;111&#34;, &#34;222&#34;));&#xA;System.out.println(hello);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;相关问题&lt;/h2&gt; &#xA;&lt;h3&gt;为什么要造这个轮子？Dubbo 不香么？&lt;/h3&gt; &#xA;&lt;p&gt;写这个 RPC 框架主要是为了通过造轮子的方式来学习，检验自己对于自己所掌握的知识的运用。&lt;/p&gt; &#xA;&lt;p&gt;实现一个简单的 RPC 框架实际是比较容易的，不过，相比于手写 AOP 和 IoC 还是要难一点点，前提是你搞懂了 RPC 的基本原理。&lt;/p&gt; &#xA;&lt;p&gt;我之前从理论层面在我的知识星球分享过如何实现一个 RPC。不过理论层面的东西只是支撑，你看懂了理论可能只能糊弄住面试官。咱程序员这一行还是最需要动手能力，即使你是架构师级别的人物。当你动手去实践某个东西，将理论付诸实践的时候，你就会发现有很多坑等着你。&lt;/p&gt; &#xA;&lt;p&gt;大家在实际项目上还是要尽量少造轮子，有优秀的框架之后尽量就去用，Dubbo 在各个方面做的都比较好和完善。&lt;/p&gt; &#xA;&lt;h3&gt;如果我要自己写的话，需要提前了解哪些知识&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Java&lt;/strong&gt; ：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;动态代理机制；&lt;/li&gt; &#xA; &lt;li&gt;序列化机制以及各种序列化框架的对比，比如 hession2、kyro、protostuff。&lt;/li&gt; &#xA; &lt;li&gt;线程池的使用；&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CompletableFuture&lt;/code&gt; 的使用&lt;/li&gt; &#xA; &lt;li&gt;......&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Netty&lt;/strong&gt; ：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;使用 Netty 进行网络传输；&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ByteBuf&lt;/code&gt; 介绍&lt;/li&gt; &#xA; &lt;li&gt;Netty 粘包拆包&lt;/li&gt; &#xA; &lt;li&gt;Netty 长连接和心跳机制&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Zookeeper&lt;/strong&gt; :&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;基本概念；&lt;/li&gt; &#xA; &lt;li&gt;数据结构；&lt;/li&gt; &#xA; &lt;li&gt;如何使用 Netflix 公司开源的 zookeeper 客户端框架 Curator 进行增删改查；&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;教程&lt;/h2&gt; &#xA;&lt;p&gt;Guide 的星球正在更新《从零开始手把手教你实现一个简单的 RPC 框架》。扫描下方二维码关注“&lt;strong&gt;JavaGuide&lt;/strong&gt;”后回复 “&lt;strong&gt;星球&lt;/strong&gt;”即可。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/167598cd2e17b8ec.png&#34; alt=&#34;我的公众号&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kiegroup/kie-tools</title>
    <updated>2023-08-29T01:32:14Z</updated>
    <id>tag:github.com,2023-08-29:/kiegroup/kie-tools</id>
    <link href="https://github.com/kiegroup/kie-tools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tools for KIE&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img width=&#34;40%&#34; src=&#34;https://raw.githubusercontent.com/kiegroup/kie-tools/main/docs/kie.svg?sanitize=true&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;The &lt;strong&gt;&lt;a href=&#34;http://kie.org&#34;&gt;KIE Community&lt;/a&gt;&lt;/strong&gt; is a home for leading Open Source projects that play a role in delivering solutions around Business Automation and Artificial Intelligence in the Cloud.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kiegroup/kie-tools/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/kiegroup/kie-tools.svg?sanitize=true&#34; alt=&#34;GitHub Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kiegroup/kie-tools/network/members&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/kiegroup/kie-tools.svg?sanitize=true&#34; alt=&#34;GitHub Forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/kiegroup/kie-tools.svg?sanitize=true&#34; alt=&#34;GitHub Issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kiegroup/kie-tools/pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-pr/kiegroup/kie-tools.svg?style=flat-square&#34; alt=&#34;Pull Requests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kiegroup/kie-tools/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/kiegroup/kie-tools.svg?style=flat-square&#34; alt=&#34;Contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kiegroup/kie-tools/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/kiegroup/kie-tools.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/KieCommunity?lang=en&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/KieCommunity.svg?label=Follow&amp;amp;style=social&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository contains tooling applications and libraries for KIE projects.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Work in progress 🔨&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build from source&lt;/h2&gt; &#xA;&lt;p&gt;To start building the KIE Tools project, you&#39;re going to need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Node &lt;code&gt;18&lt;/code&gt; &lt;em&gt;(To install, follow these instructions: &lt;a href=&#34;https://nodejs.org/en/download/package-manager/&#34;&gt;https://nodejs.org/en/download/package-manager/&lt;/a&gt;)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;pnpm &lt;code&gt;7.26.3&lt;/code&gt; &lt;em&gt;(To install, follow these instructions: &lt;a href=&#34;https://pnpm.io/installation&#34;&gt;https://pnpm.io/installation&lt;/a&gt;)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Maven &lt;code&gt;3.8.6&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Java &lt;code&gt;11&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Go &lt;code&gt;1.20.7&lt;/code&gt; &lt;em&gt;(To install, follow these instructions: &lt;a href=&#34;https://go.dev/doc/install&#34;&gt;https://go.dev/doc/install&lt;/a&gt;)&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;ℹ️ NOTE:&lt;/strong&gt; Some packages will require that &lt;code&gt;make&lt;/code&gt; is available as well.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;ℹ️ NOTE:&lt;/strong&gt; *nix users will also need:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;lib-gtk-3-dev&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;appindicator3-0.1&lt;/code&gt; (&lt;code&gt;libayatana-appindicator3-dev&lt;/code&gt; or &lt;code&gt;libappindicator-gtk3-devel&lt;/code&gt; and &lt;code&gt;gir1.2-appindicator3-0.1&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;ℹ️ NOTE:&lt;/strong&gt; Users of Fedora or RHEL will need to add a repository:&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;sudo yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;After installing the tools above, you&#39;ll need to download the dependencies and link the packages locally. Simply run:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;pnpm bootstrap&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To install only the dependencies that are relevant to the package called &lt;code&gt;[pkg-name]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;pnpm bootstrap -F [pkg-name]...&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;⚠️ NOTE:&lt;/strong&gt; Here, &lt;code&gt;...&lt;/code&gt; is actually &lt;strong&gt;necessary&lt;/strong&gt;! They&#39;re part of a &lt;a href=&#34;https://pnpm.io/filtering#--filter-package_name-1&#34;&gt;&lt;code&gt;pnpm&lt;/code&gt; filter&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After dependencies are installed, you&#39;ll be able to build. To do so, you&#39;ll have two choices - &lt;code&gt;dev&lt;/code&gt;, or &lt;code&gt;prod&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that it is recommended that you specify which package you want to build, so replace &lt;code&gt;[pkg-name]&lt;/code&gt; with the name of the desired package on one of the commands below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;pnpm -F [pkg-name]... build:dev&lt;/code&gt; - This is fast, but not as strict. It skips tests, linters, and some type checks. Be prepared for the CI to fail on your PRs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pnpm -F [pkg-name]... build:prod&lt;/code&gt; - The default command to build production-ready packages. Use that to make sure your changes are correct.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;⚠️ NOTE:&lt;/strong&gt; Here, &lt;code&gt;...&lt;/code&gt; is actually &lt;strong&gt;necessary&lt;/strong&gt;! They&#39;re part of a &lt;a href=&#34;https://pnpm.io/filtering#--filter-package_name-1&#34;&gt;&lt;code&gt;pnpm&lt;/code&gt; filter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;ℹ️ NOTE:&lt;/strong&gt; If you want to build &lt;em&gt;everything&lt;/em&gt;, run &lt;code&gt;pnpm -r build:dev&lt;/code&gt; or &lt;code&gt;pnpm -r build:prod&lt;/code&gt;. It&#39;s going to take a while, though :)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;ℹ️ NOTE:&lt;/strong&gt; The KIE Tools build is parameterized by several Environment Variables. For an extensive list of these variables, please see the list printed by the &lt;code&gt;bootstrap&lt;/code&gt; script.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;ℹ️ NOTE:&lt;/strong&gt; Final artifacts will be on &lt;code&gt;{packages,examples}/*/dist&lt;/code&gt; directories.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Applications&lt;/h2&gt; &#xA;&lt;p&gt;The KIE Tools project contains several applications. To develop each one of them individually, refer to the instructions below.&lt;/p&gt; &#xA;&lt;h4&gt;VS Code Extension (DMN, BPMN, SceSim, and PMML Editors)&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;After you&#39;ve successfully built the project following the instructions above, open the &lt;code&gt;packages/kie-editors-dev-vscode-extension&lt;/code&gt; folder on VS Code. Use a new VS Code window so that the &lt;code&gt;packages/kie-editors-dev-vscode-extension&lt;/code&gt; folder shows up as root in the VS Code explorer.&lt;/li&gt; &#xA; &lt;li&gt;From there, you can Run the extension or the integration tests by using the &lt;code&gt;Debug&lt;/code&gt; menu/section. You can also use the respective shortcuts (F5 to start debugging, for instance).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; To run the VS Code extension in development mode, you need &lt;code&gt;webpack&lt;/code&gt; and &lt;code&gt;webpack-cli&lt;/code&gt; to be globally installed on NPM. Normally you can do that with &lt;code&gt;npm install -g webpack@^5.36.2 webpack-cli@^4.7.0&lt;/code&gt;, but &lt;code&gt;sudo&lt;/code&gt; may be required depending on your installation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Remember!&lt;/strong&gt; If you make changes to any package other than &lt;code&gt;packages/kie-editors-dev-vscode-extension&lt;/code&gt;, you have to manually rebuild them before relaunching the extension on VS Code.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;VS Code Extension (Serverless Workflow Editor)&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;After you&#39;ve successfully built the project following the instructions above, open the &lt;code&gt;packages/serverless-workflow-vscode-extension&lt;/code&gt; folder on VS Code. Use a new VS Code window so that the &lt;code&gt;packages/serverless-workflow-vscode-extension&lt;/code&gt; folder shows up as root in the VS Code explorer.&lt;/li&gt; &#xA; &lt;li&gt;From there, you can Run the extension or the integration tests by using the &lt;code&gt;Debug&lt;/code&gt; menu/section. You can also use the respective shortcuts (F5 to start debugging, for instance).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Remember!&lt;/strong&gt; If you make changes to any package other than &lt;code&gt;packages/serverless-workflow-vscode-extension&lt;/code&gt;, you have to manually rebuild them before relaunching the extension on VS Code.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Chrome Extension (DMN, BPMN, and SceSim Editors)&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;After you&#39;ve successfully built the project following the instructions above, open the &lt;code&gt;packages/chrome-extension-pack-kogito-kie-editors&lt;/code&gt; folder on your favourite IDE. You can import the entire repo as well if you want to make changes to other packages.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pnpm build:dev&lt;/code&gt; on &lt;code&gt;packages/chrome-extension-pack-kogito-kie-editors&lt;/code&gt;. This will create a version of the Chrome Extension that fetches the envelope locally.&lt;/li&gt; &#xA; &lt;li&gt;Open a terminal and run &lt;code&gt;pnpm start&lt;/code&gt; on &lt;code&gt;packages/chrome-extension-pack-kogito-kie-editors&lt;/code&gt;. This will start a &lt;code&gt;webpack serve&lt;/code&gt; instance with the editors and their envelope. We use that because we don&#39;t pack the Chrome Extension bundle with the editors inside. Instead, we fetch them from GitHub pages.&lt;/li&gt; &#xA; &lt;li&gt;You also have to enable invalid certificates for resources loaded from localhost in your browser. To do that, go to &lt;code&gt;chrome://flags/#allow-insecure-localhost&lt;/code&gt; in your Chrome browser and enable this flag. Alternativelly, you can go to &lt;code&gt;https://localhost:9001&lt;/code&gt; and add an exception.&lt;/li&gt; &#xA; &lt;li&gt;Open Chrome and go to &lt;code&gt;chrome://extensions&lt;/code&gt;. Enable &#34;Developer mode&#34; in the top-right corner and click on &#34;Load unpacked&#34;. Choose the &lt;code&gt;packages/chrome-extension-pack-kogito-kie-editors/dist&lt;/code&gt; folder.&lt;/li&gt; &#xA; &lt;li&gt;From now on you can use the development version of the extension. &lt;strong&gt;Remember!&lt;/strong&gt; After each change, you have to rebuild the changed modules and hit the &#34;Refresh&#34; button of the extension card.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Chrome Extension (Serverless Workflow Editor)&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;After you&#39;ve successfully built the project following the instructions above, open the &lt;code&gt;packages/chrome-extension-serverless-workflow-editor&lt;/code&gt; folder on your favourite IDE. You can import the entire repo as well if you want to make changes to other packages.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pnpm build:dev&lt;/code&gt; on &lt;code&gt;packages/chrome-extension-serverless-workflow-editor&lt;/code&gt;. This will create a version of the Chrome Extension that fetches the envelope locally.&lt;/li&gt; &#xA; &lt;li&gt;Open a terminal and run &lt;code&gt;pnpm start&lt;/code&gt; on &lt;code&gt;packages/chrome-extension-serverless-workflow-editor&lt;/code&gt;. This will start a &lt;code&gt;webpack serve&lt;/code&gt; instance with the editors and their envelope. We use that because we don&#39;t pack the Chrome Extension bundle with the editors inside. Instead, we fetch them from GitHub pages.&lt;/li&gt; &#xA; &lt;li&gt;You also have to enable invalid certificates for resources loaded from localhost in your browser. To do that, go to &lt;code&gt;chrome://flags/#allow-insecure-localhost&lt;/code&gt; in your Chrome browser and enable this flag. Alternativelly, you can go to &lt;code&gt;https://localhost:9000&lt;/code&gt; and add an exception.&lt;/li&gt; &#xA; &lt;li&gt;Open Chrome and go to &lt;code&gt;chrome://extensions&lt;/code&gt;. Enable &#34;Developer mode&#34; in the top-right corner and click on &#34;Load unpacked&#34;. Choose the &lt;code&gt;packages/chrome-extension-serverless-workflow-editor/dist&lt;/code&gt; folder.&lt;/li&gt; &#xA; &lt;li&gt;From now on you can use the development version of the extension. &lt;strong&gt;Remember!&lt;/strong&gt; After each change, you have to rebuild the changed modules and hit the &#34;Refresh&#34; button of the extension card.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;KIE Sandbox&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;After you&#39;ve successfully built the project following the instructions above, go to &lt;code&gt;packages/online-editor&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Open a terminal and run &lt;code&gt;pnpm start&lt;/code&gt;. This will start a &lt;code&gt;webpack serve&lt;/code&gt; instance with the Online Editor resources.&lt;/li&gt; &#xA; &lt;li&gt;From now on you can use the development version of the Online Editor by accessing &lt;code&gt;https://localhost:9001&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run the CORS Proxy by running &lt;code&gt;pnpm start&lt;/code&gt; at &lt;code&gt;packages/cors-proxy&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Serverless Logic Web Tools&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;After you&#39;ve successfully built the project following the instructions above, go to &lt;code&gt;packages/serverless-logic-web-tools&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Open a terminal and run &lt;code&gt;pnpm start&lt;/code&gt;. This will start a &lt;code&gt;webpack serve&lt;/code&gt; instance with the Serverless Logic Web Tools resources.&lt;/li&gt; &#xA; &lt;li&gt;From now on you can use the development version of the Serverless Logic Web Tools by accessing &lt;code&gt;https://localhost:9020&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run the CORS Proxy by running &lt;code&gt;pnpm start&lt;/code&gt; at &lt;code&gt;packages/cors-proxy&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Standalone Editors (DMN and BPMN)&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;After you&#39;ve successfully built the project following the instructions above, go to &lt;code&gt;packages/kie-editors-standalone&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Open a terminal and run &lt;code&gt;pnpm start&lt;/code&gt;. This will start a &lt;code&gt;webpack serve&lt;/code&gt; instance with the Standalone Editors test page.&lt;/li&gt; &#xA; &lt;li&gt;From now on you can use the development version of the Standalone DMN Editor by accessing &lt;code&gt;https://localhost:9001/resources/dmn&lt;/code&gt; and the Standalone BPMN Editor by accessing &lt;code&gt;https://localhost:9001/resources/bpmn&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Knative Workflow plugin&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kiegroup/kie-tools/main/packages/kn-plugin-workflow/README.md&#34;&gt;Read the documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Libraries&lt;/h2&gt; &#xA;&lt;h4&gt;Stunner Editors&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;stunner-editors&lt;/code&gt; package contains the BPMN, DMN, and SceSim Editors that are used in many applications of KIE Tools. After cloning the repo, start with a fresh build.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;pnpm bootstrap -F @kie-tools/stunner-editors...&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;pnpm -F @kie-tools/stunner-editors... build:dev&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After that, you&#39;re ready to start developing the Editors individually.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;BPMN&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Located at &lt;code&gt;packages/stunner-editors/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-kogito-runtime&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Run &lt;code&gt;mvn clean gwt:run&lt;/code&gt; to start. To enable live-reloading capability, run &lt;code&gt;mvn clean gwt:run -Phot-reload&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;DMN&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Located at &lt;code&gt;packages/stunner-editors/kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-runtime&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Run &lt;code&gt;mvn clean gwt:run&lt;/code&gt; to start. To enable live-reloading capability, run &lt;code&gt;mvn clean gwt:run -Phot-reload&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;If you want to enable live-reloading capabilities of the React components that are part of the DMN Editor, follow &lt;a href=&#34;https://raw.githubusercontent.com/kiegroup/kie-tools/main/packages/stunner-editors/docs/live-reload-dmn-loader.md&#34;&gt;these steps&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Test Scenario (SceSim)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Located at &lt;code&gt;packages/stunner-editors/drools-wb-screens/drools-wb-scenario-simulation-editor/drools-wb-scenario-simulation-editor-kogito-testing&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Run &lt;code&gt;mvn clean gwt:run&lt;/code&gt; to start.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>