<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-10T01:35:22Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>linkedin/coral</title>
    <updated>2023-09-10T01:35:22Z</updated>
    <id>tag:github.com,2023-09-10:/linkedin/coral</id>
    <link href="https://github.com/linkedin/coral" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Coral is a translation, analysis, and query rewrite engine for SQL and other relational languages.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Coral&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/linkedin/coral/master/docs/coral-logo.jpg&#34; width=&#34;400&#34; title=&#34;Coral Logo&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Coral&lt;/strong&gt; is a SQL translation, analysis, and rewrite engine. It establishes a standard intermediate representation, Coral IR, which captures the semantics of relational algebraic expressions independently of any SQL dialect. Coral IR is defined in two forms: one is the at the abstract syntax tree (AST) layer, and the other is at the logical plan layer. Both forms are isomorphic and convertible to each other.&lt;/p&gt; &#xA;&lt;p&gt;Coral exposes APIs for implementing conversions between SQL dialects and Coral IR in both directions. Currently, Coral supports converting HiveQL and Spark SQL to Coral IR, and converting Coral IR to HiveQL, Spark SQL, and Trino SQL. With multiple SQL dialects supported, Coral can be used to translate SQL statements and views defined in one dialect to equivalent ones in another dialect. It can also be used to interoperate between engines and SQL-powered data sources. For dialect conversion examples, see the modules &lt;a href=&#34;https://raw.githubusercontent.com/linkedin/coral/master/coral-hive&#34;&gt;coral-hive&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/linkedin/coral/master/coral-spark&#34;&gt;coral-spark&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/linkedin/coral/master/coral-trino&#34;&gt;coral-trino&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Coral also exposes APIs for Coral IR rewrite and manipulation. This includes rewriting Coral IR expressions to produce semantically equivalent, but more performant expressions. For example, Coral automates incremental view maintenance by rewriting a view definition to an incremental one. See the module &lt;a href=&#34;https://raw.githubusercontent.com/linkedin/coral/master/coral-incremental&#34;&gt;coral-incremental&lt;/a&gt; for more details. Other Coral rewrite applications include data governance and policy enforcement.&lt;/p&gt; &#xA;&lt;p&gt;Coral can be used as a library in other projects, or as a service. See instructions below for more details.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/10084105/141652009-eeacfab4-0e7b-4320-9379-6c3f8641fcf1.png&#34; width=&#34;30&#34; title=&#34;Slack Logo&#34;&gt; Slack&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Join the discussion with the community on Slack &lt;a href=&#34;https://join.slack.com/t/coral-sql/shared_invite/zt-s8te92up-qU5PSG~spK33ovPPL5v96A&#34;&gt;here&lt;/a&gt;!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Modules&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Coral&lt;/strong&gt; consists of following modules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Coral-Hive: Converts HiveQL to Coral IR (can be typically used with Spark SQL as well).&lt;/li&gt; &#xA; &lt;li&gt;Coral-Trino: Converts Coral IR to Trino SQL. Converting Trino SQL to Coral IR is WIP.&lt;/li&gt; &#xA; &lt;li&gt;Coral-Spark: Converts Coral IR to Spark SQL (can be typically used with HiveQL as well).&lt;/li&gt; &#xA; &lt;li&gt;Coral-Dbt: Integrates Coral with DBT. It enables applying Coral transformations on DBT models.&lt;/li&gt; &#xA; &lt;li&gt;Coral-Incremental: Derives an incremental query from input SQL for incremental view maintenance.&lt;/li&gt; &#xA; &lt;li&gt;Coral-Schema: Derives Avro schema of view using view logical plan and input Avro schemas of base tables.&lt;/li&gt; &#xA; &lt;li&gt;Coral-Spark-Plan [WIP]: Converts Spark plan strings to equivalent logical plan.&lt;/li&gt; &#xA; &lt;li&gt;Coral-Visualization: Visualizes Coral SqlNode and RelNode trees and renders them to an output file.&lt;/li&gt; &#xA; &lt;li&gt;Coral-Service: Service that exposes REST APIs that allow users to interact with Coral (see &lt;a href=&#34;https://raw.githubusercontent.com/linkedin/coral/master/#Coral-as-a-Service&#34;&gt;Coral-as-a-Service&lt;/a&gt; for more details).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Version Upgrades&lt;/h2&gt; &#xA;&lt;p&gt;This project adheres to semantic versioning, where the format x.y.z represents major, minor, and patch version upgrades. Consideration should be given to potential changes required when integrating different versions of this project.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Major version Upgrade&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A major version upgrade represents a version change that introduces backward incompatibility by removal or renaming of classes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Minor version Upgrade&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A minor version upgrade represents a version change that introduces backward incompatibility by removal or renaming of methods.&lt;/p&gt; &#xA;&lt;p&gt;Please carefully review the release notes and documentation accompanying each version upgrade to understand the specific changes and the recommended steps for migration.&lt;/p&gt; &#xA;&lt;h2&gt;How to Build&lt;/h2&gt; &#xA;&lt;p&gt;Clone the repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/linkedin/coral.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./gradlew clean build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that this project requires Python 3 and Java 8 to run. Either set &lt;code&gt;JAVA_HOME&lt;/code&gt; to the home of an appropriate version and then use &lt;code&gt;./gradlew clean build&lt;/code&gt; as described above, or set the &lt;code&gt;org.gradle.java.home&lt;/code&gt; gradle property to the Java home of an appropriate version as below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./gradlew -Dorg.gradle.java.home=/path/to/java/home clean build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;The project is under active development and we welcome contributions of different forms. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/linkedin/coral/master/CONTRIBUTING.md&#34;&gt;Contribution Agreement&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://engineering.linkedin.com/blog/2020/coral&#34;&gt;Coral: A SQL translation, analysis, and rewrite engine for modern data lakehouses&lt;/a&gt;, LinkedIn Engineering Blog, 12/10/2020.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.slideshare.net/walaa_eldin_moustafa/incremental-view-maintenance-with-coral-dbt-and-iceberg&#34;&gt;Incremental View Maintenance with Coral, DBT, and Iceberg&lt;/a&gt;, Tech Talk, Iceberg Meetup, 5/11/2023.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.slideshare.net/walaa_eldin_moustafa/coral-transport-udfs-building-blocks-of-a-postmodern-data-warehouse-229545076&#34;&gt;Coral &amp;amp; Transport UDFs: Building Blocks of a Postmodern Data Warehouse&lt;/a&gt;, Tech-talk, Facebook HQ, 2/28/2020.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://engineering.linkedin.com/blog/2018/11/using-translatable-portable-UDFs&#34;&gt;Transport: Towards Logical Independence Using Translatable Portable UDFs&lt;/a&gt;, LinkedIn Engineering Blog, 11/14/2018.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://engineering.linkedin.com/blog/2017/11/dali-views--functions-as-a-service-for-big-data&#34;&gt;Dali Views: Functions as a Service for Big Data&lt;/a&gt;, LinkedIn Engineering Blog, 11/9/2017.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Coral-as-a-Service&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Coral-as-a-Service&lt;/strong&gt; or simply, &lt;strong&gt;Coral Service&lt;/strong&gt; is a service that exposes REST APIs that allow users to interact with Coral without necessarily coming from a compute engine. Currently, the service supports an API for query translation between different dialects and another for interacting with a local Hive Metastore to create example databases, tables, and views so they can be referenced in the translation API. The service can be used in two modes: remote Hive Metastore mode, and local Hive Metastore mode. The remote mode uses an existing (already deployed) Hive Metastore to resolve tables and views, while the local one creates an empty embedded Hive Metastore so users can add their own table and view definitions.&lt;/p&gt; &#xA;&lt;h3&gt;API Reference&lt;/h3&gt; &#xA;&lt;h4&gt;/api/translations/translate&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;strong&gt;POST&lt;/strong&gt; API which takes JSON request body containing following parameters and returns the translated query:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;fromLanguage&lt;/code&gt;: Input dialect (e.g., spark, trino, hive -- see below for supported inputs)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;toLanguage&lt;/code&gt;: Output dialect (e.g., spark, trino, hive -- see below for supported outputs)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;query&lt;/code&gt;: SQL query to translate between two dialects&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;/api/catalog-ops/execute&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;strong&gt;POST&lt;/strong&gt; API which takes a SQL statement to create a database/table/view in the local metastore (note: this endpoint is only available with Coral Service in local metastore mode).&lt;/p&gt; &#xA;&lt;h3&gt;Instructions to use with examples&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone &lt;a href=&#34;https://github.com/linkedin/coral&#34;&gt;Coral repo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/linkedin/coral.git  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;From the root directory of Coral, access the coral-service module&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd coral-service  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Build&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;../gradlew clean build  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;To run Coral Service using the &lt;strong&gt;local metastore&lt;/strong&gt;:&lt;/h4&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Run&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;../gradlew bootRun --args=&#39;--spring.profiles.active=localMetastore&#39;  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;To run Coral Service using the &lt;strong&gt;remote metastore&lt;/strong&gt;:&lt;/h4&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Add your kerberos client keytab file to &lt;code&gt;coral-service/src/main/resources&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Appropriately replace all instances of &lt;code&gt;SET_ME&lt;/code&gt; in &lt;code&gt;coral-service/src/main/resources/hive.properties&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;../gradlew bootRun  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also specify a custom location of &lt;code&gt;hive.properties&lt;/code&gt; file through &lt;code&gt;--hivePropsLocation&lt;/code&gt; as follows&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; ./gradlew bootRun --args=&#39;--hivePropsLocation=/tmp/hive.properties&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can interact with the service using your &lt;a href=&#34;https://raw.githubusercontent.com/linkedin/coral/master/#coral-service-ui&#34;&gt;browser&lt;/a&gt; or the &lt;a href=&#34;https://raw.githubusercontent.com/linkedin/coral/master/#coral-service-cli&#34;&gt;CLI&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Coral Service UI&lt;/h3&gt; &#xA;&lt;p&gt;After running &lt;code&gt;../gradlew bootRun --args=&#39;--spring.profiles.active=localMetastore&#39;&lt;/code&gt; (for local metastore mode) or &lt;code&gt;../gradlew bootRun&lt;/code&gt; (for remote metastore mode) from coral-service module, the UI can be accessed from the browser. Use the URL &lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt; to run the UI on a local browser.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/linkedin/coral/master/docs/coral-service-ui/start.png&#34; title=&#34;Coral Service UI&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;The UI provides 2 features:&lt;/p&gt; &#xA;&lt;h4&gt;Create a database/table/view in local metastore mode&lt;/h4&gt; &#xA;&lt;p&gt;This feature is only available with Coral Service in local metastore mode, it calls &lt;code&gt;/api/catalog-ops/execute&lt;/code&gt; API above.&lt;/p&gt; &#xA;&lt;p&gt;You can enter a SQL statement to create a database/table/view in the local metastore:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/linkedin/coral/master/docs/coral-service-ui/creation.png&#34; title=&#34;Coral Service Creation Feature&#34;&gt; &lt;/p&gt; &#xA;&lt;h4&gt;Translate SQL from source language to target language&lt;/h4&gt; &#xA;&lt;p&gt;This feature is available with Coral Service in both local and remote metastore modes, it calls &lt;code&gt;/api/translations/translate&lt;/code&gt; API above.&lt;/p&gt; &#xA;&lt;p&gt;You can enter a SQL query and specify the source and target language to use Coral translation service:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/linkedin/coral/master/docs/coral-service-ui/translation.png&#34; title=&#34;Coral Service Translation Feature&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Coral Service CLI&lt;/h3&gt; &#xA;&lt;p&gt;Apart from the UI above, you can also interact with the service using the CLI.&lt;/p&gt; &#xA;&lt;p&gt;Example workflow for local metastore mode:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a database called &lt;code&gt;db1&lt;/code&gt; in local metastore using the &lt;code&gt;/api/catalog-ops/execute&lt;/code&gt; endpoint&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl --header &#34;Content-Type: application/json&#34; \&#xA;  --request POST \&#xA;  --data &#34;CREATE DATABASE IF NOT EXISTS db1&#34; \&#xA;  http://localhost:8080/api/catalog-ops/execute&#xA;&#xA;Creation successful&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Create a table called &lt;code&gt;airport&lt;/code&gt; within &lt;code&gt;db1&lt;/code&gt; in local metastore using the &lt;code&gt;/api/catalog-ops/execute&lt;/code&gt; endpoint&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl --header &#34;Content-Type: application/json&#34; \&#xA;  --request POST \&#xA;  --data &#34;CREATE TABLE IF NOT EXISTS db1.airport(name string, country string, area_code int, code string, datepartition string)&#34; \&#xA;  http://localhost:8080/api/catalog-ops/execute&#xA;&#xA;Creation successful&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Translate a query on &lt;code&gt;db1.airport&lt;/code&gt; in local metastore using the &lt;code&gt;/api/translations/translate&lt;/code&gt; endpoint&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl --header &#34;Content-Type: application/json&#34; \&#xA;  --request POST \&#xA;  --data &#39;{&#xA;    &#34;fromLanguage&#34;:&#34;hive&#34;, &#xA;    &#34;toLanguage&#34;:&#34;trino&#34;, &#xA;    &#34;query&#34;:&#34;SELECT * FROM db1.airport&#34;&#xA;  }&#39; \&#xA;  http://localhost:8080/api/translations/translate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The translation result is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Original query in HiveQL:&#xA;SELECT * FROM db1.airport&#xA;Translated to Trino SQL:&#xA;SELECT &#34;name&#34;, &#34;country&#34;, &#34;area_code&#34;, &#34;code&#34;, &#34;datepartition&#34;&#xA;FROM &#34;db1&#34;.&#34;airport&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Currently Supported Translation Flows&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Hive to Trino&lt;/li&gt; &#xA; &lt;li&gt;Hive to Spark&lt;/li&gt; &#xA; &lt;li&gt;Trino to Spark&lt;br&gt; Note: During Trino to Spark translations, views referenced in queries are considered to be defined in HiveQL and hence cannot be used when translating a view from Trino. Currently, only referencing base tables is supported in Trino queries. This translation path is currently a POC and may need further improvements.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>apache/incubator-kie-optaplanner</title>
    <updated>2023-09-10T01:35:22Z</updated>
    <id>tag:github.com,2023-09-10:/apache/incubator-kie-optaplanner</id>
    <link href="https://github.com/apache/incubator-kie-optaplanner" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AI constraint solver in Java to optimize the vehicle routing problem, employee rostering, task assignment, maintenance scheduling, conference scheduling and other planning problems.&lt;/p&gt;&lt;hr&gt;&lt;div class=&#34;imageblock text-center&#34;&gt; &#xA; &lt;div class=&#34;content&#34;&gt; &#xA;  &lt;a class=&#34;image&#34; href=&#34;https://www.optaplanner.org/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apache/incubator-kie-optaplanner/main/optaplanner-docs/src/modules/ROOT/images/shared/optaPlannerLogo.png&#34; alt=&#34;optaPlannerLogo&#34; width=&#34;OptaPlanner&#34; height=&#34;150&#34;&gt;&lt;/a&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;paragraph&#34;&gt; &#xA; &lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://ossindex.sonatype.org/component/pkg:maven/org.optaplanner/optaplanner-bom&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/org.optaplanner/optaplanner-bom?logo=apache-maven&amp;amp;style=for-the-badge&#34; alt=&#34;Maven artifact&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://stackoverflow.com/questions/tagged/optaplanner&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/stackoverflow-ask_question-orange.svg?logo=stackoverflow&amp;amp;style=for-the-badge&#34; alt=&#34;Stackoverflow&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://kie.zulipchat.com/#narrow/stream/232679-optaplanner&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/zulip-join_chat-brightgreen.svg?logo=zulip&amp;amp;style=for-the-badge&#34; alt=&#34;Join Zulip Chat&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://github.com/kiegroup/optaplanner/pulse&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/commit-activity/m/kiegroup/optaplanner?label=commits&amp;amp;style=for-the-badge&#34; alt=&#34;Commit Activity&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/kiegroup/optaplanner?style=for-the-badge&amp;amp;logo=apache&#34; alt=&#34;Livense&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://github.com/kiegroup/optaplanner/actions/workflows/pull_request.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/JVM-11—​17-brightgreen.svg?style=for-the-badge&#34; alt=&#34;JVM support&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://maven.apache.org/install.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Maven-3.x-blue?style=for-the-badge&#34; alt=&#34;Maven&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://github.com/kiegroup/optaplanner/actions/workflows/pull_request.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/languages/code-size/kiegroup/optaplanner?style=for-the-badge&#34; alt=&#34;Code size&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;paragraph&#34;&gt; &#xA; &lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://sonarcloud.io/dashboard?id=org.optaplanner:optaplanner&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=org.optaplanner:optaplanner&amp;amp;style=for-the-badge&amp;amp;metric=reliability_rating&#34; alt=&#34;Reliability Rating&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://sonarcloud.io/dashboard?id=org.optaplanner:optaplanner&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=org.optaplanner:optaplanner&amp;amp;metric=security_rating&#34; alt=&#34;Security Rating&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://sonarcloud.io/dashboard?id=org.optaplanner:optaplanner&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=org.optaplanner:optaplanner&amp;amp;metric=sqale_rating&#34; alt=&#34;Maintainability Rating&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://sonarcloud.io/dashboard?id=org.optaplanner:optaplanner&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=org.optaplanner:optaplanner&amp;amp;metric=coverage&#34; alt=&#34;Coverage&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;paragraph&#34;&gt; &#xA; &lt;p&gt;A fast, easy-to-use, open source AI constraint solver for software developers&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_looking_for_quickstarts&#34;&gt;Looking for Quickstarts?&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;OptaPlanner’s quickstarts are located in the &lt;a href=&#34;https://github.com/kiegroup/optaplanner-quickstarts&#34;&gt;optaplanner-quickstarts repository&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_quick_development_start&#34;&gt;Quick development start&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;To build and run from source:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre&gt;$ mvn clean install -Dquickly&#xA;$ cd optaplanner-examples&#xA;$ mvn exec:java&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;To develop with IntelliJ IDEA, Eclipse or VSCode, open the root &lt;code&gt;pom.xml&lt;/code&gt; as a new project and configure a &lt;em&gt;Run/Debug configuration&lt;/em&gt; like this:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;Type: Application&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Main class: &lt;code&gt;org.optaplanner.examples.app.OptaPlannerExamplesApp&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;VM options: &lt;code&gt;-Xmx2G -server&lt;/code&gt; (memory only needed when using the big datasets in the examples)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Program arguments: (none)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Working directory: &lt;code&gt;$MODULE_DIR$&lt;/code&gt; (must resolve to optaplanner-examples directory)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Use classpath of module: &lt;code&gt;optaplanner-examples&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_contributing_to_optaplanner&#34;&gt;Contributing to OptaPlanner&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;This is an open source project, and you are more than welcome to contribute &lt;span&gt;❤️&lt;/span&gt;!&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;If you’re just starting out with OptaPlanner and want to contribute, take a look at our &lt;a href=&#34;https://issues.redhat.com/issues/?jql=project%20%3D%20PLANNER%20AND%20status%20in%20(Open%2C%20Reopened)%20AND%20labels%20%3D%20starter%20ORDER%20BY%20priority%20DESC&#34;&gt;starter issues&lt;/a&gt;. They’re specifically chosen to be easier for first time contributors.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;If you want to contribute or start an opinionated discussion, join our &lt;a href=&#34;https://groups.google.com/g/optaplanner-dev&#34;&gt;discussion&lt;/a&gt; or send an e-mail directly to &lt;a href=&#34;mailto:optaplanner-dev@googlegroups.com&#34;&gt;optaplanner-dev@googlegroups.com&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;If you want to submit an issue, check out the &lt;a href=&#34;https://issues.redhat.com/projects/PLANNER/issues&#34;&gt;OptaPlanner Jira project&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_time_to_make_a_change&#34;&gt;Time to make a change?&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Every change must be submitted through a GitHub pull request (PR). OptaPlanner uses continuous integration (CI). The OptaPlanner CI runs checks against your branch after you submit the PR to ensure that your PR doesn’t introduce errors. If the CI identifies a potential problem, our friendly PR maintainers will help you resolve it.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_contributing&#34;&gt;Contributing&lt;/h3&gt; &#xA;   &lt;div class=&#34;olist arabic&#34;&gt; &#xA;    &lt;ol class=&#34;arabic&#34;&gt; &#xA;     &lt;li&gt; &lt;p&gt;Fork it (&lt;a href=&#34;https://github.com/kiegroup/optaplanner&#34; class=&#34;bare&#34;&gt;https://github.com/kiegroup/optaplanner&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Create your feature branch: (&lt;code&gt;git checkout -b feature&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Commit your changes with a comment: (&lt;code&gt;git commit -am &#39;Add some feature&#39;&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Push to the branch to GitHub: (&lt;code&gt;git push origin feature&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Create a new pull request.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ol&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_code_standards&#34;&gt;Code standards&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Your code is automatically formatted according to the &lt;em&gt;Import and Code Style&lt;/em&gt; conventions during every Maven build. CI checks enforce those conventions too, so be sure to build your project with maven before creating your PR:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre&gt;mvn clean install&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;For information about how to set up code style checks, see &lt;a href=&#34;https://github.com/kiegroup/optaplanner/raw/main/build/optaplanner-ide-config/ide-configuration.adoc&#34;&gt;IDE Setup Instructions&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_building_your_optaplanner_project&#34;&gt;Building your OptaPlanner project&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Use one of the following ways to build your OptaPlanner project:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;span&gt;🚀&lt;/span&gt; &lt;strong&gt;build-fast&lt;/strong&gt;: &lt;code&gt;mvn clean install -Dquickly&lt;/code&gt; skips any checks and code analysis (~1 min)&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;span&gt;🔨&lt;/span&gt; &lt;strong&gt;build-normally&lt;/strong&gt;: &lt;code&gt;mvn clean install&lt;/code&gt; runs tests, checks code style, skips documentation (~17 min)&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;span&gt;🧾&lt;/span&gt; &lt;strong&gt;build-doc&lt;/strong&gt;: &lt;code&gt;mvn clean install&lt;/code&gt; at &lt;code&gt;optaplanner/optaplanner-docs&lt;/code&gt; creates asciidoctor documentation &lt;code&gt;target/optaplanner-docs-*/html_single/index.html&lt;/code&gt; (~2 min)&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;span&gt;🦾&lt;/span&gt; &lt;strong&gt;build-all&lt;/strong&gt;: &lt;code&gt;mvn clean install -Dfull&lt;/code&gt; runs all checks + creates documentation and distribution files (~20 min)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_optaplanner_ci_status&#34;&gt;OptaPlanner CI status&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;You can check the CI status of the OptaPlanner repositories from the &lt;a href=&#34;https://kiegroup.github.io/optaplanner/&#34;&gt;Chain Status webpage&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_jenkins_ci_jobs_need_vpn_access&#34;&gt;Jenkins CI Jobs (need VPN access)&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;All Jenkins jobs can be found under the OptaPlanner folder: &lt;a href=&#34;https://eng-jenkins-csb-business-automation.apps.ocp-c1.prod.psi.redhat.com/job/KIE/job/optaplanner&#34; class=&#34;bare&#34;&gt;https://eng-jenkins-csb-business-automation.apps.ocp-c1.prod.psi.redhat.com/job/KIE/job/optaplanner&lt;/a&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Interesting Jenkins CI jobs (need VPN access):&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://eng-jenkins-csb-business-automation.apps.ocp-c1.prod.psi.redhat.com/job/KIE/job/optaplanner/job/main/job/tools/job/update-quarkus-all/&#34;&gt;Update Quarkus version&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://eng-jenkins-csb-business-automation.apps.ocp-c1.prod.psi.redhat.com/job/KIE/job/optaplanner/job/main/job/tools/job/update-drools-optaplanner/&#34;&gt;Update Drools version&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://eng-jenkins-csb-business-automation.apps.ocp-c1.prod.psi.redhat.com/job/KIE/job/optaplanner/job/main/job/release/job/optaplanner-release&#34;&gt;Release pipeline&lt;/a&gt; (only available on release branches)&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://eng-jenkins-csb-business-automation.apps.ocp-c1.prod.psi.redhat.com/job/KIE/job/optaplanner/job/main/job/release/job/optaplanner-post-release&#34;&gt;Post-Release pipeline&lt;/a&gt; (only available on release branches)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
</feed>