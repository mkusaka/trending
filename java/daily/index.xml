<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-18T01:35:14Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>alibaba/jvm-sandbox</title>
    <updated>2022-10-18T01:35:14Z</updated>
    <id>tag:github.com,2022-10-18:/alibaba/jvm-sandbox</id>
    <link href="https://github.com/alibaba/jvm-sandbox" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Real - time non-invasive AOP framework container based on JVM&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://github.com/alibaba/jvm-sandbox/wiki/img/BANNER.png&#34; alt=&#34;BANNER&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/alibaba/jvm-sandbox&#34;&gt;&lt;img src=&#34;https://travis-ci.org/alibaba/jvm-sandbox.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/alibaba/jvm-sandbox&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/alibaba/jvm-sandbox/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/license/alibaba/arthas.svg?sanitize=true&#34; alt=&#34;license&#34;&gt; &lt;a href=&#34;http://isitmaintained.com/project/alibaba/jvm-sandbox&#34; title=&#34;Average time to resolve an issue&#34;&gt;&lt;img src=&#34;http://isitmaintained.com/badge/resolution/alibaba/jvm-sandbox.svg?sanitize=true&#34; alt=&#34;Average time to resolve an issue&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://isitmaintained.com/project/alibaba/jvm-sandbox&#34; title=&#34;Percentage of issues still open&#34;&gt;&lt;img src=&#34;http://isitmaintained.com/badge/open/alibaba/jvm-sandbox.svg?sanitize=true&#34; alt=&#34;Percentage of issues still open&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;JVM沙箱容器，一种JVM的非侵入式运行期AOP解决方案&lt;br&gt; Real - time non-invasive AOP framework container based on JVM&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;目标群体&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/btraceio/btrace&#34;&gt;BTRACE&lt;/a&gt;好强大，也曾技痒想做一个更便捷、更适合自己的问题定位工具，既可支持线上链路监控排查，也可支持单机版问题定位。&lt;/li&gt; &#xA; &lt;li&gt;有时候突然一个问题反馈上来，需要入参才能完成定位，但恰恰没有任何日志，甚至出现在别人的代码里，好想开发一个工具可以根据需要动态添加日志，最好还能按照业务ID进行过滤。&lt;/li&gt; &#xA; &lt;li&gt;系统间的异常模拟可以使用的工具很多，可是系统内的异常模拟怎么办，加开关或是用AOP在开发系统中实现，好想开发一个更优雅的异常模拟工具，既能模拟系统间的异常，又能模拟系统内的异常。&lt;/li&gt; &#xA; &lt;li&gt;好想获取行调用链路数据，可以用它识别场景、覆盖率统计等等，覆盖率统计工具不能原生支持，统计链路数据不准确。想自己开发一个工具获取行链路数据。&lt;/li&gt; &#xA; &lt;li&gt;我想开发录制回放、故障模拟、动态日志、行链路获取等等工具，就算我开发完成了，这些工具底层实现原理相同，同时使用，要怎么消除这些工具之间的影响，怎么保证这些工具动态加载，怎么保证动态加载/卸载之后不会影响其他工具，怎么保证在工具有问题的时候，快速消除影响，代码还原&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;如果你有以上研发诉求，那么你就是JVM-SANDBOX(以下简称沙箱容器)的潜在客户。沙箱容器提供&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;动态增强类你所指定的类，获取你想要的参数和行信息甚至改变方法执行&lt;/li&gt; &#xA; &lt;li&gt;动态可插拔容器框架&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;项目简介&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;JVM-SANDBOX（沙箱）实现了一种在不重启、不侵入目标JVM应用的AOP解决方案。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;沙箱的特性&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;无侵入&lt;/code&gt;：目标应用无需重启也无需感知沙箱的存在&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;类隔离&lt;/code&gt;：沙箱以及沙箱的模块不会和目标应用的类相互干扰&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;可插拔&lt;/code&gt;：沙箱以及沙箱的模块可以随时加载和卸载，不会在目标应用留下痕迹&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;多租户&lt;/code&gt;：目标应用可以同时挂载不同租户下的沙箱并独立控制&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;高兼容&lt;/code&gt;：支持JDK[6,11]&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;沙箱常见应用场景&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;线上故障定位&lt;/li&gt; &#xA; &lt;li&gt;线上系统流控&lt;/li&gt; &#xA; &lt;li&gt;线上故障模拟&lt;/li&gt; &#xA; &lt;li&gt;方法请求录制和结果回放&lt;/li&gt; &#xA; &lt;li&gt;动态日志打印&lt;/li&gt; &#xA; &lt;li&gt;安全信息监测和脱敏&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;JVM-SANDBOX还能帮助你做很多很多，取决于你的脑洞有多大了。&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;实时无侵入AOP框架&lt;/h3&gt; &#xA;&lt;p&gt;在常见的AOP框架实现方案中，有静态编织和动态编织两种。&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;静态编织&lt;/strong&gt;：静态编织发生在字节码生成时根据一定框架的规则提前将AOP字节码插入到目标类和方法中，实现AOP；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;动态编织&lt;/strong&gt;：动态编织则允许在JVM运行过程中完成指定方法的AOP字节码增强.常见的动态编织方案大多采用重命名原有方法，再新建一个同签名的方法来做代理的工作模式来完成AOP的功能(常见的实现方案如CgLib)，但这种方式存在一些应用边界： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;侵入性&lt;/strong&gt;：对被代理的目标类需要进行侵入式改造。比如：在Spring中必须是托管于Spring容器中的Bean&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;固化性&lt;/strong&gt;：目标代理方法在启动之后即固化，无法重新对一个已有方法进行AOP增强&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;要解决&lt;code&gt;无侵入&lt;/code&gt;的特性需要AOP框架具备 &lt;strong&gt;在运行时完成目标方法的增强和替换&lt;/strong&gt;。在JDK的规范中运行期重定义一个类必须准循以下原则&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;不允许新增、修改和删除成员变量&lt;/li&gt; &#xA; &lt;li&gt;不允许新增和删除方法&lt;/li&gt; &#xA; &lt;li&gt;不允许修改方法签名&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;JVM-SANDBOX属于基于Instrumentation的动态编织类的AOP框架，&lt;strong&gt;通过精心构造了字节码增强逻辑，使得沙箱的模块能在不违反JDK约束情况下实现对目标应用方法的&lt;code&gt;无侵入&lt;/code&gt;运行时AOP拦截&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;h2&gt;核心原理&lt;/h2&gt; &#xA;&lt;h3&gt;事件驱动&lt;/h3&gt; &#xA;&lt;p&gt;在沙箱的世界观中，任何一个Java方法的调用都可以分解为&lt;code&gt;BEFORE&lt;/code&gt;、&lt;code&gt;RETURN&lt;/code&gt;和&lt;code&gt;THROWS&lt;/code&gt;三个环节，由此在三个环节上引申出对应环节的事件探测和流程控制机制。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// BEFORE&#xA;try {&#xA;&#xA;   /*&#xA;    * do something...&#xA;    */&#xA;&#xA;    // RETURN&#xA;    return;&#xA;&#xA;} catch (Throwable cause) {&#xA;    // THROWS&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;基于&lt;code&gt;BEFORE&lt;/code&gt;、&lt;code&gt;RETURN&lt;/code&gt;和&lt;code&gt;THROWS&lt;/code&gt;三个环节事件分离，沙箱的模块可以完成很多类AOP的操作。&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;可以感知和改变方法调用的入参&lt;/li&gt; &#xA; &lt;li&gt;可以感知和改变方法调用返回值和抛出的异常&lt;/li&gt; &#xA; &lt;li&gt;可以改变方法执行的流程 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;在方法体执行之前直接返回自定义结果对象，原有方法代码将不会被执行&lt;/li&gt; &#xA;   &lt;li&gt;在方法体返回之前重新构造新的结果对象，甚至可以改变为抛出异常&lt;/li&gt; &#xA;   &lt;li&gt;在方法体抛出异常之后重新抛出新的异常，甚至可以改变为正常返回&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;类隔离策略&lt;/h3&gt; &#xA;&lt;p&gt;沙箱通过自定义的SandboxClassLoader破坏了双亲委派的约定，实现了和目标应用的类隔离。所以不用担心加载沙箱会引起应用的类污染、冲突。各模块之间类通过ModuleJarClassLoader实现了各自的独立，达到模块之间、模块和沙箱之间、模块和应用之间互不干扰。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/alibaba/jvm-sandbox/wiki/img/jvm-sandbox-classloader.png&#34; alt=&#34;jvm-sandbox-classloader&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;类增强策略&lt;/h3&gt; &#xA;&lt;p&gt;沙箱通过在BootstrapClassLoader中埋藏的Spy类完成目标类和沙箱内核的通讯&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/alibaba/jvm-sandbox/wiki/img/jvm-sandbox-enhance-class.jpg&#34; alt=&#34;jvm-sandbox-enhance-class&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;整体架构&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/alibaba/jvm-sandbox/wiki/img/jvm-sandbox-architecture.png&#34; alt=&#34;jvm-sandbox-architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;快速安装&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;下载并安装&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 下载最新版本的JVM-SANDBOX&#xA;wget http://ompc.oss-cn-hangzhou.aliyuncs.com/jvm-sandbox/release/sandbox-stable-bin.zip&#xA;&#xA;# 解压&#xA;unzip sandbox-stable-bin.zip&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;挂载目标应用&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 进入沙箱执行脚本&#xA;cd sandbox/bin&#xA;&#xA;# 目标JVM进程33342&#xA;./sandbox.sh -p 33342&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;挂载成功后会提示&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./sandbox.sh -p 33342&#xA;           NAMESPACE : default&#xA;             VERSION : 1.2.0&#xA;                MODE : ATTACH&#xA;         SERVER_ADDR : 0.0.0.0&#xA;         SERVER_PORT : 55756&#xA;      UNSAFE_SUPPORT : ENABLE&#xA;        SANDBOX_HOME : /Users/vlinux/opt/sandbox&#xA;   SYSTEM_MODULE_LIB : /Users/vlinux/opt/sandbox/module&#xA;     USER_MODULE_LIB : ~/.sandbox-module;&#xA; SYSTEM_PROVIDER_LIB : /Users/vlinux/opt/sandbox/provider&#xA;  EVENT_POOL_SUPPORT : DISABLE&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;卸载沙箱&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./sandbox.sh -p 33342 -S&#xA;jvm-sandbox[default] shutdown finished.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;项目背景&lt;/h2&gt; &#xA;&lt;p&gt;2014年&lt;a href=&#34;https://github.com/oldmanpushcart/greys-anatomy&#34;&gt;GREYS&lt;/a&gt;第一版正式发布，一路看着他从无到有，并不断优化强大，感慨羡慕之余，也在想GREYS是不是只能做问题定位。&lt;/p&gt; &#xA;&lt;p&gt;2015年开始根据GREYS的底层代码完成了人生的第一个字节码增强工具——动态日志。之后又萌生了将其拆解成&lt;em&gt;录制回放&lt;/em&gt;、&lt;em&gt;故障模拟&lt;/em&gt;等工具的想法。扪心自问，我是想以一人一个团队的力量建立大而全的工具平台，还是做一个底层中台，让每一位技术人员都可以在它的基础上快速的实现业务功能。我选择了后者。&lt;/p&gt; &#xA;&lt;h2&gt;相关文档&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/alibaba/jvm-sandbox/wiki/Home&#34;&gt;WIKI&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>AntennaPod/AntennaPod</title>
    <updated>2022-10-18T01:35:14Z</updated>
    <id>tag:github.com,2022-10-18:/AntennaPod/AntennaPod</id>
    <link href="https://github.com/AntennaPod/AntennaPod" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A podcast manager for Android&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AntennaPod&lt;/h1&gt; &#xA;&lt;p&gt;This is the official repository of AntennaPod, the easy-to-use, flexible and open-source podcast manager for Android.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=de.danoeh.antennapod&#34;&gt;&lt;img src=&#34;https://play.google.com/intl/en_us/badges/images/generic/en_badge_web_generic.png&#34; alt=&#34;Get it on Google Play&#34; height=&#34;70&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://f-droid.org/app/de.danoeh.antennapod&#34;&gt;&lt;img src=&#34;https://fdroid.gitlab.io/artwork/badge/get-it-on.png&#34; alt=&#34;Get it on F-Droid&#34; height=&#34;70&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AntennaPod/AntennaPod/develop/app/src/main/play/listings/en-US/graphics/phone-screenshots/00.png&#34; alt=&#34;Screenshot 0&#34; height=&#34;200&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/AntennaPod/AntennaPod/develop/app/src/main/play/listings/en-US/graphics/phone-screenshots/01.png&#34; alt=&#34;Screenshot 1&#34; height=&#34;200&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/AntennaPod/AntennaPod/develop/app/src/main/play/listings/en-US/graphics/phone-screenshots/02.png&#34; alt=&#34;Screenshot 2&#34; height=&#34;200&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/AntennaPod/AntennaPod/develop/app/src/main/play/listings/en-US/graphics/phone-screenshots/03.png&#34; alt=&#34;Screenshot 3&#34; height=&#34;200&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/AntennaPod/AntennaPod/develop/app/src/main/play/listings/en-US/graphics/phone-screenshots/04.png&#34; alt=&#34;Screenshot 4&#34; height=&#34;200&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/AntennaPod/AntennaPod/develop/app/src/main/play/listings/en-US/graphics/phone-screenshots/05.png&#34; alt=&#34;Screenshot 5&#34; height=&#34;200&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;p&gt;You can use the &lt;a href=&#34;https://forum.antennapod.org/&#34;&gt;AntennaPod Forum&lt;/a&gt; for discussions about the app or just podcasting in general.&lt;/p&gt; &#xA;&lt;p&gt;Bug reports and feature requests can be submitted &lt;a href=&#34;https://github.com/AntennaPod/AntennaPod/issues&#34;&gt;here&lt;/a&gt; (please read the &lt;a href=&#34;https://github.com/AntennaPod/AntennaPod/raw/master/CONTRIBUTING.md&#34;&gt;instructions&lt;/a&gt; on how to report a bug and how to submit a feature request first!).&lt;/p&gt; &#xA;&lt;p&gt;We also hold regular community calls to discuss anything AntennaPod-related. &lt;a href=&#34;https://forum.antennapod.org/t/monthly-community-call/1869&#34;&gt;Come join the next call&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Help to test AntennaPod&lt;/h2&gt; &#xA;&lt;p&gt;AntennaPod has many users and we don&#39;t want them to run into trouble when we add a new feature. It&#39;s important that we have a significant group test our app, so that we know all possible combinations of phones, Android versions and use cases work as expected. Check out our wiki on how to join our &lt;a href=&#34;https://antennapod.org/documentation/general/beta&#34;&gt;Beta testing program&lt;/a&gt;! If a bug is reported during the beta period, chances are high that it will be fixed before the stable version. If it is reported later, fixing might take another full beta cycle. So definitely let us know if something is not right.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;AntennaPod is licensed under the GNU General Public License (GPL-3.0). You can find the license text in the LICENSE file.&lt;/p&gt; &#xA;&lt;h2&gt;Translating AntennaPod&lt;/h2&gt; &#xA;&lt;p&gt;If you want to translate AntennaPod into another language, you can visit the &lt;a href=&#34;https://www.transifex.com/antennapod/antennapod/&#34;&gt;Transifex project page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building AntennaPod&lt;/h2&gt; &#xA;&lt;p&gt;Information on how to build AntennaPod can be found in the &lt;a href=&#34;https://github.com/AntennaPod/AntennaPod/wiki/Building-AntennaPod&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>arin2002/Coding-questions</title>
    <updated>2022-10-18T01:35:14Z</updated>
    <id>tag:github.com,2022-10-18:/arin2002/Coding-questions</id>
    <link href="https://github.com/arin2002/Coding-questions" rel="alternate"></link>
    <summary type="html">&lt;p&gt;For hacktoberfest do fork and star the repo to participate......You can follow me for more updates :)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Coding-Questions&lt;/h1&gt; &#xA;&lt;p&gt;This Repository have Collection of the Important Coding Questions.&lt;/p&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;p&gt;These are a set of instructions to follow for you to setup the project locally .&lt;/p&gt; &#xA;&lt;h1&gt;Fork the project repository&lt;/h1&gt; &#xA;&lt;p&gt;Fork the repository to you GitHub .&lt;/p&gt; &#xA;&lt;h1&gt;Clone your fork&lt;/h1&gt; &#xA;&lt;p&gt;Click on the code drop down menu. Now you can either download the zip file and extract it on your local system.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/arin2002/Coding-questions.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Navigate to your local folder&lt;/h1&gt; &#xA;&lt;p&gt;Since the clone was downloaded into a subdirectory of your working directory, you can navigate to it using: cd NAME_OF_REPOSITORY.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd Coding-questions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Create a new branch&lt;/h1&gt; &#xA;&lt;p&gt;Use git checkout -b BRANCH_NAME to create a new branch and then immediately switch to it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git checkout -b branch_name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use git branch to show your local branches.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git branch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Make changes in your local repository&lt;/h1&gt; &#xA;&lt;p&gt;Use a text editor or IDE to make the changes you planned to the files in your local repository. Because you checked out a branch in the previous step, any edits you make will only affect that branch.&lt;/p&gt; &#xA;&lt;h1&gt;Git Add and Commit your changes&lt;/h1&gt; &#xA;&lt;p&gt;Use git add -A or git add . to stage your changes and &lt;code&gt;git commit -m &#34;DESCRIPTION OF CHANGES&#34;&lt;/code&gt; to commit them.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .&#xA;git commit -m&#34;&amp;lt;Description of changes&amp;gt;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Push your changes to your fork&lt;/h1&gt; &#xA;&lt;p&gt;When you are done making all of your changes, upload these changes to your fork using git push origin BRANCH_NAME.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push origin &amp;lt;BRANCH_NAME&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Begin the pull request&lt;/h1&gt; &#xA;&lt;p&gt;Return to your fork on GitHub, and refresh the page. You may see a highlighted area that displays your recently pushed branch.&lt;/p&gt; &#xA;&lt;h1&gt;Create the pull request&lt;/h1&gt; &#xA;&lt;p&gt;Before submitting the pull request, you first need to describe the changes you made .&lt;/p&gt;</summary>
  </entry>
</feed>