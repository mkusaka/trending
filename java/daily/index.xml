<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-20T01:36:07Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>SleepyAsh0191/sheep-n-sheep-backend</title>
    <updated>2022-09-20T01:36:07Z</updated>
    <id>tag:github.com,2022-09-20:/SleepyAsh0191/sheep-n-sheep-backend</id>
    <link href="https://github.com/SleepyAsh0191/sheep-n-sheep-backend" rel="alternate"></link>
    <summary type="html">&lt;p&gt;随便用java写的自制羊了个羊服务端，写的很垃圾，勿喷&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;自制&lt;del&gt;羊了个羊&lt;/del&gt;崩了个崩后端，请搭配前端使用&lt;/h2&gt; &#xA;&lt;p&gt;本repo里面的硬编码写的很垃圾（临时工质量），不喜勿喷。&lt;br&gt; 不提供教程，请自行探索。&lt;br&gt; 下载请前往Actions&lt;br&gt; 目前没有连接数据库的计划，请安息。&lt;br&gt; 当然，如果此仓库侵犯了游戏厂商的权益，我会尽快删除。&lt;br&gt; 本仓库使用WTFPL协议。&lt;/p&gt; &#xA;&lt;p&gt;注意：进入游戏后羊群不出现是正常现象。&lt;/p&gt; &#xA;&lt;h3&gt;截图：&lt;/h3&gt; &#xA;&lt;p&gt;个人信息&lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/64446140/190565880-ebde7b50-e172-44c8-b4fa-ca4ff154d7e4.png&#34; alt=&#34;image&#34;&gt;&lt;br&gt; 游戏内&lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/64446140/190565977-7ebbf4fa-ae46-4b7d-895f-4283d8147123.png&#34; alt=&#34;image&#34;&gt;&lt;br&gt; 选择话题队伍&lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/64446140/190566110-361148b6-05be-47b5-a845-832a9868a1d2.png&#34; alt=&#34;image&#34;&gt;&lt;br&gt; 话题模式&lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/64446140/190566203-a8d6ae1e-f806-46c6-b387-adbbc27f0f47.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zhangchuangiie/SimpleKafka</title>
    <updated>2022-09-20T01:36:07Z</updated>
    <id>tag:github.com,2022-09-20:/zhangchuangiie/SimpleKafka</id>
    <link href="https://github.com/zhangchuangiie/SimpleKafka" rel="alternate"></link>
    <summary type="html">&lt;p&gt;一个基于Kafka客户端封装的工具，Kafka开发效率神器&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SimpleKafka（Kafka客户端封装工具类）&lt;/h1&gt; &#xA;&lt;p&gt;一个基于Kafka客户端封装的工具，Kafka开发效率神器&lt;/p&gt; &#xA;&lt;h2&gt;特点：&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;封装了常用的Kafka客户端操作，无需维护配置，无需初始化客户端，真正实现了一行代码调用&lt;/li&gt; &#xA; &lt;li&gt;将连接池的维护封装在工具类里面，多线程使用也无需维护客户端集合&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;使用方式：&lt;/h2&gt; &#xA;&lt;p&gt;只需要集成1个KafkaUtil.java文件即可，修改里面的kafka服务地址即可&lt;/p&gt; &#xA;&lt;h2&gt;典型示例：&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;同步生产:&lt;/strong&gt; LinkedHashMap&amp;lt;String, Object&amp;gt; recordMeta = KafkaUtil.sendToKafka(&#34;RULEa93304e6d844000&#34;,&#34;222&#34;,&#34;aaaa&#34;);&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;异步生产:&lt;/strong&gt; KafkaUtil.sendToKafkaAsync(&#34;RULEa93304e6d844000&#34;, &#34;222&#34;, &#34;aaaa&#34;);&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;消费数据:&lt;/strong&gt; ArrayList&amp;lt;LinkedHashMap&amp;lt;String, Object&amp;gt;&amp;gt; buffer = KafkaUtil.recvFromKafka(&#34;RULEa93304e6d844000&#34;, &#34;group1&#34;);&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;重置偏移:&lt;/strong&gt; KafkaUtil.resetOffsetToEarliest(&#34;RULEa93304e6d844000&#34;, &#34;group1&#34;);&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;接口介绍：&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;kafkaListTopics：&lt;/strong&gt; topic列表&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;createTopic:&lt;/strong&gt; topic创建&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;delTopic:&lt;/strong&gt; topic删除&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;partitionsTopic:&lt;/strong&gt; topic的分区列表，分区和副本数&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;delGroupId:&lt;/strong&gt; 删除groupId&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;descCluster:&lt;/strong&gt; 集群的节点列表&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;kafkaConsumerGroups：&lt;/strong&gt; 消费者列表&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;kafkaConsumerGroups：&lt;/strong&gt; 指定topic的活跃消费者列表&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;sendToKafka：&lt;/strong&gt; 生产数据到指定的topic,同步接口{&#34;topic&#34;:&#34;RULEa93304e6d844000&#34;,&#34;partition&#34;:1,&#34;offset&#34;:681}&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;sendToKafkaAsync：&lt;/strong&gt; 生产数据到指定的topic，异步接口，默认回调&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;sendToKafkaAsync：&lt;/strong&gt; 生产数据到指定的topic，异步接口，自定义回调&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;recvFromKafka：&lt;/strong&gt; 按groupId消费指定topic的数据[{&#34;topic&#34;:&#34;RULEa93304e6d844000&#34;,&#34;key&#34;:&#34;222&#34;,&#34;value&#34;:&#34;aaaa&#34;,&#34;partition&#34;:1,&#34;offset&#34;:681}]&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;recvFromKafkaByOffset：&lt;/strong&gt; 消费指定topic指定partition对应的offset数据&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;recvFromKafkaByTimestamp：&lt;/strong&gt; 消费指定topic指定partition对应的timestamp以后的数据&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;resetOffsetToTimestamp：&lt;/strong&gt; 重置指定topic的offset到对应的timestamp&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;resetOffsetToEarliest：&lt;/strong&gt; 重置指定topic的offset到最早&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;resetOffsetToLatest：&lt;/strong&gt; 重置指定topic的offset到最晚，一般在跳过测试脏数据时候使用&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;consumerPositions：&lt;/strong&gt; 获取当前消费偏移量情况{&#34;partitionNum&#34;:2,&#34;dataNum&#34;:1,&#34;lagNum&#34;:0,&#34;positions&#34;:[{&#34;partition&#34;:0,&#34;begin&#34;:0,&#34;end&#34;:0,&#34;current&#34;:0,&#34;current1&#34;:0,&#34;size&#34;:0,&#34;lag&#34;:0},{&#34;partition&#34;:1,&#34;begin&#34;:681,&#34;end&#34;:682,&#34;current&#34;:682,&#34;current1&#34;:682,&#34;size&#34;:1,&#34;lag&#34;:0}]}&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;topicSize：&lt;/strong&gt; 获取指定topic数据量详情情况 [{&#34;partition&#34;: 0,&#34;begin&#34;: 65,&#34;end&#34;: 65,&#34;size&#34;: 0}]&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;topicSizeAll：&lt;/strong&gt; 获取所有topic数据量详情情况&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;topicSizeStatistics：&lt;/strong&gt; 获取指定topic数据量统计{&#34;partitionNum&#34;:5452,&#34;dataNum&#34;:41570647}&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;topicSizeStatisticsAll：&lt;/strong&gt; 获取所有topic数据量统计{&#34;topicNum&#34;:2550,&#34;partitionNum&#34;:5452,&#34;dataNum&#34;:41570647}&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;接口列表：&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;kafkaListTopics:&lt;/strong&gt; List&#xA;  &lt;string&gt;&#xA;    kafkaListTopics()&#xA;  &lt;/string&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;createTopic:&lt;/strong&gt; void createTopic(String topic)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;delTopic:&lt;/strong&gt; void delTopic(String topic)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;partitionsTopic:&lt;/strong&gt; List&#xA;  &lt;string&gt;&#xA;    partitionsTopic(String topic)&#xA;  &lt;/string&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;delGroupId:&lt;/strong&gt; void delGroupId(String groupId)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;descCluster:&lt;/strong&gt; List&#xA;  &lt;string&gt;&#xA;    descCluster()&#xA;  &lt;/string&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;kafkaConsumerGroups:&lt;/strong&gt; List&#xA;  &lt;string&gt;&#xA;    kafkaConsumerGroups()&#xA;  &lt;/string&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;kafkaConsumerGroups：&lt;/strong&gt; List&#xA;  &lt;string&gt;&#xA;    kafkaConsumerGroups(String topic)&#xA;  &lt;/string&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;sendToKafka：&lt;/strong&gt; LinkedHashMap&amp;lt;String, Object&amp;gt; sendToKafka(String topic, String key, String value)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;sendToKafkaAsync：&lt;/strong&gt; void sendToKafkaAsync(String topic, String key, String value)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;sendToKafkaAsync：&lt;/strong&gt; void sendToKafkaAsync(String topic, String key, String value,Callback callback)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;recvFromKafka：&lt;/strong&gt; ArrayList&amp;lt;LinkedHashMap&amp;lt;String, Object&amp;gt;&amp;gt; recvFromKafka(String topic, String groupId)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;recvFromKafkaByOffset：&lt;/strong&gt; ArrayList&amp;lt;LinkedHashMap&amp;lt;String, Object&amp;gt;&amp;gt; recvFromKafkaByOffset(String topic, String groupId,int partition,long offset)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;recvFromKafkaByTimestamp：&lt;/strong&gt; ArrayList&amp;lt;LinkedHashMap&amp;lt;String, Object&amp;gt;&amp;gt; recvFromKafkaByTimestamp(String topic, String groupId,int partition,long timestamp)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;resetOffsetToTimestamp：&lt;/strong&gt; boolean resetOffsetToTimestamp(String topic, String groupId, long timestamp)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;resetOffsetToEarliest：&lt;/strong&gt; boolean resetOffsetToEarliest(String topic, String groupId)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;resetOffsetToLatest：&lt;/strong&gt; boolean resetOffsetToLatest(String topic, String groupId)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;consumerPositions：&lt;/strong&gt; List&amp;lt;LinkedHashMap&amp;lt;String, Object&amp;gt;&amp;gt; consumerPositions(String topic, String groupId)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;topicSize：&lt;/strong&gt; List&amp;lt;LinkedHashMap&amp;lt;String, Object&amp;gt;&amp;gt; topicSize(String topic)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;topicSizeAll：&lt;/strong&gt; LinkedHashMap&amp;lt;String, Object&amp;gt; topicSizeAll()&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;topicSizeStatistics：&lt;/strong&gt; LinkedHashMap&amp;lt;String, Object&amp;gt; topicSizeStatistics(String topic)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;topicSizeStatisticsAll：&lt;/strong&gt; LinkedHashMap&amp;lt;String, Object&amp;gt; topicSizeStatisticsALL()&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;联系人：&lt;/h2&gt; &#xA;&lt;p&gt;有问题可以联系:&lt;a href=&#34;mailto:zhangchuang@iie.ac.cn&#34;&gt;zhangchuang@iie.ac.cn&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>TheAlgorithms/Java</title>
    <updated>2022-09-20T01:36:07Z</updated>
    <id>tag:github.com,2022-09-20:/TheAlgorithms/Java</id>
    <link href="https://github.com/TheAlgorithms/Java" rel="alternate"></link>
    <summary type="html">&lt;p&gt;All Algorithms implemented in Java&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Algorithms - Java&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/TheAlgorithms/Java/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/TheAlgorithms/Java/actions/workflows/build.yml/badge.svg?branch=master&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/c7MnfGFGa6&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/808045925556682782.svg?logo=discord&amp;amp;colorB=7289DA&amp;amp;style=flat-square&#34; alt=&#34;Discord chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitpod.io/#https://github.com/TheAlgorithms/Java&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod&#34; alt=&#34;Gitpod ready-to-code&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can run and edit the algorithms, or contribute to them using Gitpod.io (a free online development environment) with a single click.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitpod.io/#https://github.com/TheAlgorithms/Java&#34;&gt;&lt;img src=&#34;https://gitpod.io/button/open-in-gitpod.svg?sanitize=true&#34; alt=&#34;Open in Gitpod&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;All algorithms are implemented in Java (for educational purposes)&lt;/h3&gt; &#xA;&lt;p&gt;These implementations are intended for learning purposes. As such, they may be less efficient than the Java standard library.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution Guidelines&lt;/h2&gt; &#xA;&lt;p&gt;Please read our &lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Java/master/CONTRIBUTING.md&#34;&gt;Contribution Guidelines&lt;/a&gt; before you contribute to this project.&lt;/p&gt; &#xA;&lt;h2&gt;Community Channel&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;re on &lt;a href=&#34;https://gitter.im/TheAlgorithms&#34;&gt;Gitter&lt;/a&gt;! Come join us.&lt;/p&gt; &#xA;&lt;h2&gt;Algorithms&lt;/h2&gt; &#xA;&lt;p&gt;Our &lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Java/master/DIRECTORY.md&#34;&gt;directory&lt;/a&gt; has the full list of applications.&lt;/p&gt;</summary>
  </entry>
</feed>