<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-16T01:34:01Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>runelite/runelite</title>
    <updated>2022-08-16T01:34:01Z</updated>
    <id>tag:github.com,2022-08-16:/runelite/runelite</id>
    <link href="https://github.com/runelite/runelite" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open source Old School RuneScape client&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://runelite.net/img/logo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;runelite &lt;a href=&#34;https://github.com/runelite/runelite/actions?query=workflow%3ACI+branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/runelite/runelite/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/ArdAhnN&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/301497432909414422.svg?sanitize=true&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;RuneLite is a free, open source OldSchool RuneScape client.&lt;/p&gt; &#xA;&lt;p&gt;If you have any questions, please join our IRC channel on &lt;a href=&#34;http://qchat.rizon.net/?channels=runelite&amp;amp;uio=d4&#34;&gt;irc.rizon.net #runelite&lt;/a&gt; or alternatively our &lt;a href=&#34;https://discord.gg/ArdAhnN&#34;&gt;Discord&lt;/a&gt; server.&lt;/p&gt; &#xA;&lt;h2&gt;Project Layout&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/runelite/runelite/master/cache/src/main/java/net/runelite/cache&#34;&gt;cache&lt;/a&gt; - Libraries used for reading/writing cache files, as well as the data in it&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/runelite/runelite/master/runelite-api/src/main/java/net/runelite/api&#34;&gt;runelite-api&lt;/a&gt; - RuneLite API, interfaces for accessing the client&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/runelite/runelite/master/runelite-client/src/main/java/net/runelite/client&#34;&gt;runelite-client&lt;/a&gt; - Game client with plugins&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Open the project in your IDE as a Maven project, build the root module and then run the RuneLite class in runelite-client.&lt;br&gt; For more information visit the &lt;a href=&#34;https://github.com/runelite/runelite/wiki&#34;&gt;RuneLite Wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;RuneLite is licensed under the BSD 2-clause license. See the license header in the respective file to be sure.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute and Develop&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ve set up a separate document for our &lt;a href=&#34;https://github.com/runelite/runelite/raw/master/.github/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>CaffeineMC/sodium-fabric</title>
    <updated>2022-08-16T01:34:01Z</updated>
    <id>tag:github.com,2022-08-16:/CaffeineMC/sodium-fabric</id>
    <link href="https://github.com/CaffeineMC/sodium-fabric" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Fabric mod designed to improve frame rates and reduce micro-stutter&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/CaffeineMC/sodium-fabric/1.19.x/next/src/main/resources/assets/sodium/icon.png&#34; width=&#34;128&#34;&gt; &#xA;&lt;h1&gt;Sodium (for Fabric)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/license/CaffeineMC/sodium-fabric.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues/CaffeineMC/sodium-fabric.svg?sanitize=true&#34; alt=&#34;GitHub issues&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/tag/CaffeineMC/sodium-fabric.svg?sanitize=true&#34; alt=&#34;GitHub tag&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sodium is a free and open-source optimization mod for the Minecraft client that improves frame rates, reduces micro-stutter, and fixes graphical issues in Minecraft.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; Sodium has had a lot of time to shape up lately, but the mod is still alpha software. You may run into minor graphical issues or crashes while using it. Additionally, the &lt;a href=&#34;https://fabricmc.net/wiki/documentation:rendering&#34;&gt;Fabric Rendering API&lt;/a&gt; is not yet supported, which may cause crashes and other issues with some mods.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Manual installation (recommended)&lt;/h3&gt; &#xA;&lt;p&gt;You will need Fabric Loader 0.10.x or newer installed in your game in order to load Sodium. If you haven&#39;t installed Fabric mods before, you can find a variety of community guides for doing so &lt;a href=&#34;https://fabricmc.net/wiki/install&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Stable releases&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/release/CaffeineMC/sodium-fabric.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The latest releases of Sodium are published to our &lt;a href=&#34;https://modrinth.com/mod/sodium&#34;&gt;Modrinth&lt;/a&gt; and &lt;a href=&#34;https://github.com/CaffeineMC/sodium-fabric/releases&#34;&gt;GitHub release&lt;/a&gt; pages. Releases are considered by our team to be &lt;strong&gt;suitable for general use&lt;/strong&gt;, but they are not guaranteed to be free of bugs and other issues.&lt;/p&gt; &#xA;&lt;p&gt;Usually, releases will be made available on GitHub slightly sooner than other locations.&lt;/p&gt; &#xA;&lt;h4&gt;Bleeding-edge builds (unstable)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/CaffeineMC/sodium-fabric/actions/workflows/gradle.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/CaffeineMC/sodium-fabric/gradle-ci/1.17.x/dev&#34; alt=&#34;GitHub build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are a player who is looking to get your hands on the latest &lt;strong&gt;bleeding-edge changes for testing&lt;/strong&gt;, consider taking a look at the automated builds produced through our &lt;a href=&#34;https://github.com/CaffeineMC/sodium-fabric/actions/workflows/gradle.yml?query=event%3Apush&#34;&gt;GitHub Actions workflow&lt;/a&gt;. This workflow automatically runs every time a change is pushed to the repository, and as such, the builds it produces will generally reflect the latest snapshot of development.&lt;/p&gt; &#xA;&lt;p&gt;Bleeding edge builds will often include unfinished code that hasn&#39;t been extensively tested. That code may introduce incomplete features, bugs, crashes, and all other kinds of weird issues. You &lt;strong&gt;should not use these bleeding edge builds&lt;/strong&gt; unless you know what you are doing and are comfortable with software debugging. If you report issues using these builds, we will expect that this is the case. Caveat emptor.&lt;/p&gt; &#xA;&lt;h3&gt;CurseForge&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.curseforge.com/minecraft/mc-mods/sodium&#34;&gt;&lt;img src=&#34;http://cf.way2muchnoise.eu/full_394468_downloads.svg?sanitize=true&#34; alt=&#34;CurseForge downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are using the CurseForge client, you can continue to find downloads through our &lt;a href=&#34;https://www.curseforge.com/minecraft/mc-mods/sodium&#34;&gt;CurseForge page&lt;/a&gt;. Unless you are using the CurseForge client, you should prefer the downloads linked on our Modrinth or GitHub release pages above.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Reporting Issues&lt;/h3&gt; &#xA;&lt;p&gt;You can report bugs and crashes by opening an issue on our &lt;a href=&#34;https://github.com/CaffeineMC/sodium-fabric/issues&#34;&gt;issue tracker&lt;/a&gt;. Before opening a new issue, use the search tool to make sure that your issue has not already been reported and ensure that you have completely filled out the issue template. Issues that are duplicates or do not contain the necessary information to triage and debug may be closed.&lt;/p&gt; &#xA;&lt;p&gt;Please note that while the issue tracker is open to feature requests, development is primarily focused on improving hardware compatibility, performance, and finishing any unimplemented features necessary for parity with the vanilla renderer.&lt;/p&gt; &#xA;&lt;h3&gt;Community&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://jellysquid.me/discord&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat%20on-discord-7289DA?logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Discord chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We have an &lt;a href=&#34;https://jellysquid.me/discord&#34;&gt;official Discord community&lt;/a&gt; for all of our projects. By joining, you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Get installation help and technical support with all of our mods&lt;/li&gt; &#xA; &lt;li&gt;Be notified of the latest developments as they happen&lt;/li&gt; &#xA; &lt;li&gt;Get involved and collaborate with the rest of our team&lt;/li&gt; &#xA; &lt;li&gt;... and just hang out with the rest of our community.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Building from sources&lt;/h3&gt; &#xA;&lt;p&gt;Support is not provided for setting up build environments or compiling the mod. We ask that users who are looking to get their hands dirty with the code have a basic understanding of compiling Java/Gradle projects. The basic overview is provided here for those familiar.&lt;/p&gt; &#xA;&lt;h4&gt;Requirements&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JRE 8 or newer (for running Gradle)&lt;/li&gt; &#xA; &lt;li&gt;JDK 8 (optional) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you neither have JDK 8 available on your shell&#39;s path or installed through a supported package manager (such as &lt;a href=&#34;https://sdkman.io&#34;&gt;SDKMAN&lt;/a&gt;), Gradle will automatically download a suitable toolchain from the &lt;a href=&#34;https://adoptopenjdk.net/&#34;&gt;AdoptOpenJDK project&lt;/a&gt; and use it to compile the project. For more information on what package managers are supported and how you can customize this behavior on a system-wide level, please see &lt;a href=&#34;https://docs.gradle.org/current/userguide/toolchains.html&#34;&gt;Gradle&#39;s Toolchain user guide&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Gradle 6.7 or newer (optional) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The &lt;a href=&#34;https://docs.gradle.org/current/userguide/gradle_wrapper.html#sec:using_wrapper&#34;&gt;Gradle wrapper&lt;/a&gt; is provided in this repository can be used instead of installing a suitable version of Gradle yourself. However, if you are building many projects, you may prefer to install it yourself through a suitable package manager as to save disk space and to avoid many different Gradle daemons sitting around in memory.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Building with Gradle&lt;/h4&gt; &#xA;&lt;p&gt;Sodium uses a typical Gradle project structure and can be built by simply running the default &lt;code&gt;build&lt;/code&gt; task. After Gradle finishes building the project, you can find the build artifacts (typical mod binaries, and their sources) in &lt;code&gt;build/libs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; If this is a one-off build, and you would prefer the Gradle daemon does not stick around in memory afterwards, try adding the &lt;a href=&#34;https://docs.gradle.org/current/userguide/gradle_daemon.html#sec:disabling_the_daemon&#34;&gt;&lt;code&gt;--no-daemon&lt;/code&gt; flag&lt;/a&gt; to ensure that the daemon is torn down after the build is complete. However, subsequent builds of the project will &lt;a href=&#34;https://docs.gradle.org/current/userguide/gradle_daemon.html#sec:why_the_daemon&#34;&gt;start more slowly&lt;/a&gt; if the Gradle daemon is not available to be re-used.&lt;/p&gt; &#xA;&lt;p&gt;Build artifacts ending in &lt;code&gt;dev&lt;/code&gt; are outputs containing the sources and compiled classes before they are remapped into stable intermediary names. If you are working in a developer environment and would like to add the mod to your game, you should prefer to use the &lt;code&gt;modRuntime&lt;/code&gt; or &lt;code&gt;modCompile&lt;/code&gt; configurations provided by Loom instead of these outputs.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;Sodium is licensed under GNU LGPLv3, a free and open-source license. For more information, please see the &lt;a href=&#34;https://github.com/CaffeineMC/sodium-fabric/raw/1.16.x/dev/LICENSE.txt&#34;&gt;license file&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>OpenFeign/feign</title>
    <updated>2022-08-16T01:34:01Z</updated>
    <id>tag:github.com,2022-08-16:/OpenFeign/feign</id>
    <link href="https://github.com/OpenFeign/feign" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Feign makes writing java http clients easier&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Feign makes writing java http clients easier&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/OpenFeign/feign?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/OpenFeign/feign&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/OpenFeign/feign/tree/master&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/OpenFeign/feign/tree/master.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://search.maven.org/artifact/io.github.openfeign/feign-core/&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/io.github.openfeign/feign-core/badge.png&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Feign is a Java to HTTP client binder inspired by &lt;a href=&#34;https://github.com/square/retrofit&#34;&gt;Retrofit&lt;/a&gt;, &lt;a href=&#34;https://jax-rs-spec.java.net/nonav/2.0/apidocs/index.html&#34;&gt;JAXRS-2.0&lt;/a&gt;, and &lt;a href=&#34;http://www.oracle.com/technetwork/articles/java/jsr356-1937161.html&#34;&gt;WebSocket&lt;/a&gt;. Feign&#39;s first goal was reducing the complexity of binding &lt;a href=&#34;https://github.com/Netflix/Denominator&#34;&gt;Denominator&lt;/a&gt; uniformly to HTTP APIs regardless of &lt;a href=&#34;http://www.slideshare.net/adrianfcole/99problems&#34;&gt;ReSTfulness&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Why Feign and not X?&lt;/h3&gt; &#xA;&lt;p&gt;Feign uses tools like Jersey and CXF to write java clients for ReST or SOAP services. Furthermore, Feign allows you to write your own code on top of http libraries such as Apache HC. Feign connects your code to http APIs with minimal overhead and code via customizable decoders and error handling, which can be written to any text-based http API.&lt;/p&gt; &#xA;&lt;h3&gt;How does Feign work?&lt;/h3&gt; &#xA;&lt;p&gt;Feign works by processing annotations into a templatized request. Arguments are applied to these templates in a straightforward fashion before output. Although Feign is limited to supporting text-based APIs, it dramatically simplifies system aspects such as replaying requests. Furthermore, Feign makes it easy to unit test your conversions knowing this.&lt;/p&gt; &#xA;&lt;h3&gt;Java Version Compatibility&lt;/h3&gt; &#xA;&lt;p&gt;Feign 10.x and above are built on Java 8 and should work on Java 9, 10, and 11. For those that need JDK 6 compatibility, please use Feign 9.x&lt;/p&gt; &#xA;&lt;h2&gt;Feature overview&lt;/h2&gt; &#xA;&lt;p&gt;This is a map with current key features provided by feign:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://www.plantuml.com/plantuml/proxy?cache=no&amp;amp;src=https://raw.githubusercontent.com/OpenFeign/feign/master/src/docs/overview-mindmap.iuml&#34; alt=&#34;MindMap overview&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Roadmap&lt;/h1&gt; &#xA;&lt;h2&gt;Feign 11 and beyond&lt;/h2&gt; &#xA;&lt;p&gt;Making &lt;em&gt;API&lt;/em&gt; clients easier&lt;/p&gt; &#xA;&lt;h2&gt;Short Term - What we&#39;re working on now. ⏰&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Response Caching &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Support caching of api responses. Allow for users to define under what conditions a response is eligible for caching and what type of caching mechanism should be used.&lt;/li&gt; &#xA;   &lt;li&gt;Support in-memory caching and external cache implementations (EhCache, Google, Spring, etc...)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Complete URI Template expression support &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Support &lt;a href=&#34;https://tools.ietf.org/html/rfc6570#section-1.2&#34;&gt;level 1 through level 4&lt;/a&gt; URI template expressions.&lt;/li&gt; &#xA;   &lt;li&gt;Use &lt;a href=&#34;https://github.com/uri-templates/uritemplate-test&#34;&gt;URI Templates TCK&lt;/a&gt; to verify compliance.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Logger&lt;/code&gt; API refactor &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Refactor the &lt;code&gt;Logger&lt;/code&gt; API to adhere closer to frameworks like SLF4J providing a common mental model for logging within Feign. This model will be used by Feign itself throughout and provide clearer direction on how the &lt;code&gt;Logger&lt;/code&gt; will be used.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Retry&lt;/code&gt; API refactor &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Refactor the &lt;code&gt;Retry&lt;/code&gt; API to support user-supplied conditions and better control over back-off policies. &lt;strong&gt;This may result in non-backward-compatible breaking changes&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Medium Term - What&#39;s up next. ⏲&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Async execution support via &lt;code&gt;CompletableFuture&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Allow for &lt;code&gt;Future&lt;/code&gt; chaining and executor management for the request/response lifecycle. &lt;strong&gt;Implementation will require non-backward-compatible breaking changes&lt;/strong&gt;. However this feature is required before Reactive execution can be considered.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Reactive execution support via &lt;a href=&#34;https://www.reactive-streams.org/&#34;&gt;Reactive Streams&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;For JDK 9+, consider a native implementation that uses &lt;code&gt;java.util.concurrent.Flow&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Support for &lt;a href=&#34;https://projectreactor.io/&#34;&gt;Project Reactor&lt;/a&gt; and &lt;a href=&#34;https://github.com/ReactiveX/RxJava&#34;&gt;RxJava 2+&lt;/a&gt; implementations on JDK 8.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Long Term - The future ☁️&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Additional Circuit Breaker Support. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Support additional Circuit Breaker implementations like &lt;a href=&#34;https://resilience4j.readme.io/&#34;&gt;Resilience4J&lt;/a&gt; and Spring Circuit Breaker&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Basics&lt;/h3&gt; &#xA;&lt;p&gt;Usage typically looks like this, an adaptation of the &lt;a href=&#34;https://github.com/square/retrofit/raw/master/samples/src/main/java/com/example/retrofit/SimpleService.java&#34;&gt;canonical Retrofit sample&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;interface GitHub {&#xA;  @RequestLine(&#34;GET /repos/{owner}/{repo}/contributors&#34;)&#xA;  List&amp;lt;Contributor&amp;gt; contributors(@Param(&#34;owner&#34;) String owner, @Param(&#34;repo&#34;) String repo);&#xA;&#xA;  @RequestLine(&#34;POST /repos/{owner}/{repo}/issues&#34;)&#xA;  void createIssue(Issue issue, @Param(&#34;owner&#34;) String owner, @Param(&#34;repo&#34;) String repo);&#xA;&#xA;}&#xA;&#xA;public static class Contributor {&#xA;  String login;&#xA;  int contributions;&#xA;}&#xA;&#xA;public static class Issue {&#xA;  String title;&#xA;  String body;&#xA;  List&amp;lt;String&amp;gt; assignees;&#xA;  int milestone;&#xA;  List&amp;lt;String&amp;gt; labels;&#xA;}&#xA;&#xA;public class MyApp {&#xA;  public static void main(String... args) {&#xA;    GitHub github = Feign.builder()&#xA;                         .decoder(new GsonDecoder())&#xA;                         .target(GitHub.class, &#34;https://api.github.com&#34;);&#xA;&#xA;    // Fetch and print a list of the contributors to this library.&#xA;    List&amp;lt;Contributor&amp;gt; contributors = github.contributors(&#34;OpenFeign&#34;, &#34;feign&#34;);&#xA;    for (Contributor contributor : contributors) {&#xA;      System.out.println(contributor.login + &#34; (&#34; + contributor.contributions + &#34;)&#34;);&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Interface Annotations&lt;/h3&gt; &#xA;&lt;p&gt;Feign annotations define the &lt;code&gt;Contract&lt;/code&gt; between the interface and how the underlying client should work. Feign&#39;s default contract defines the following annotations:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Annotation&lt;/th&gt; &#xA;   &lt;th&gt;Interface Target&lt;/th&gt; &#xA;   &lt;th&gt;Usage&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@RequestLine&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Method&lt;/td&gt; &#xA;   &lt;td&gt;Defines the &lt;code&gt;HttpMethod&lt;/code&gt; and &lt;code&gt;UriTemplate&lt;/code&gt; for request. &lt;code&gt;Expressions&lt;/code&gt;, values wrapped in curly-braces &lt;code&gt;{expression}&lt;/code&gt; are resolved using their corresponding &lt;code&gt;@Param&lt;/code&gt; annotated parameters.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@Param&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Parameter&lt;/td&gt; &#xA;   &lt;td&gt;Defines a template variable, whose value will be used to resolve the corresponding template &lt;code&gt;Expression&lt;/code&gt;, by name provided as annotation value. If value is missing it will try to get the name from bytecode method parameter name (if the code was compiled with &lt;code&gt;-parameters&lt;/code&gt; flag).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@Headers&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Method, Type&lt;/td&gt; &#xA;   &lt;td&gt;Defines a &lt;code&gt;HeaderTemplate&lt;/code&gt;; a variation on a &lt;code&gt;UriTemplate&lt;/code&gt;. that uses &lt;code&gt;@Param&lt;/code&gt; annotated values to resolve the corresponding &lt;code&gt;Expressions&lt;/code&gt;. When used on a &lt;code&gt;Type&lt;/code&gt;, the template will be applied to every request. When used on a &lt;code&gt;Method&lt;/code&gt;, the template will apply only to the annotated method.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@QueryMap&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Parameter&lt;/td&gt; &#xA;   &lt;td&gt;Defines a &lt;code&gt;Map&lt;/code&gt; of name-value pairs, or POJO, to expand into a query string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@HeaderMap&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Parameter&lt;/td&gt; &#xA;   &lt;td&gt;Defines a &lt;code&gt;Map&lt;/code&gt; of name-value pairs, to expand into &lt;code&gt;Http Headers&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@Body&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Method&lt;/td&gt; &#xA;   &lt;td&gt;Defines a &lt;code&gt;Template&lt;/code&gt;, similar to a &lt;code&gt;UriTemplate&lt;/code&gt; and &lt;code&gt;HeaderTemplate&lt;/code&gt;, that uses &lt;code&gt;@Param&lt;/code&gt; annotated values to resolve the corresponding &lt;code&gt;Expressions&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Overriding the Request Line&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;If there is a need to target a request to a different host then the one supplied when the Feign client was created, or you want to supply a target host for each request, include a &lt;code&gt;java.net.URI&lt;/code&gt; parameter and Feign will use that value as the request target.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@RequestLine(&#34;POST /repos/{owner}/{repo}/issues&#34;)&#xA;void createIssue(URI host, Issue issue, @Param(&#34;owner&#34;) String owner, @Param(&#34;repo&#34;) String repo);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Templates and Expressions&lt;/h3&gt; &#xA;&lt;p&gt;Feign &lt;code&gt;Expressions&lt;/code&gt; represent Simple String Expressions (Level 1) as defined by &lt;a href=&#34;https://tools.ietf.org/html/rfc6570&#34;&gt;URI Template - RFC 6570&lt;/a&gt;. &lt;code&gt;Expressions&lt;/code&gt; are expanded using their corresponding &lt;code&gt;Param&lt;/code&gt; annotated method parameters.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface GitHub {&#xA;&#xA;  @RequestLine(&#34;GET /repos/{owner}/{repo}/contributors&#34;)&#xA;  List&amp;lt;Contributor&amp;gt; contributors(@Param(&#34;owner&#34;) String owner, @Param(&#34;repo&#34;) String repository);&#xA;&#xA;  class Contributor {&#xA;    String login;&#xA;    int contributions;&#xA;  }&#xA;}&#xA;&#xA;public class MyApp {&#xA;  public static void main(String[] args) {&#xA;    GitHub github = Feign.builder()&#xA;                         .decoder(new GsonDecoder())&#xA;                         .target(GitHub.class, &#34;https://api.github.com&#34;);&#xA;&#xA;    /* The owner and repository parameters will be used to expand the owner and repo expressions&#xA;     * defined in the RequestLine.&#xA;     *&#xA;     * the resulting uri will be https://api.github.com/repos/OpenFeign/feign/contributors&#xA;     */&#xA;    github.contributors(&#34;OpenFeign&#34;, &#34;feign&#34;);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Expressions must be enclosed in curly braces &lt;code&gt;{}&lt;/code&gt; and may contain regular expression patterns, separated by a colon &lt;code&gt;:&lt;/code&gt; to restrict resolved values. &lt;em&gt;Example&lt;/em&gt; &lt;code&gt;owner&lt;/code&gt; must be alphabetic. &lt;code&gt;{owner:[a-zA-Z]*}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Request Parameter Expansion&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;RequestLine&lt;/code&gt; and &lt;code&gt;QueryMap&lt;/code&gt; templates follow the &lt;a href=&#34;https://tools.ietf.org/html/rfc6570&#34;&gt;URI Template - RFC 6570&lt;/a&gt; specification for Level 1 templates, which specifies the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Unresolved expressions are omitted.&lt;/li&gt; &#xA; &lt;li&gt;All literals and variable values are pct-encoded, if not already encoded or marked &lt;code&gt;encoded&lt;/code&gt; via a &lt;code&gt;@Param&lt;/code&gt; annotation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We also have limited support for Level 3, Path Style Expressions, with the following restrictions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Maps and Lists are expanded by default.&lt;/li&gt; &#xA; &lt;li&gt;Only Single variable templates are supported.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{;who}             ;who=fred&#xA;{;half}            ;half=50%25&#xA;{;empty}           ;empty&#xA;{;list}            ;list=red;list=green;list=blue&#xA;{;map}             ;semi=%3B;dot=.;comma=%2C&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface MatrixService {&#xA;&#xA;  @RequestLine(&#34;GET /repos{;owners}&#34;)&#xA;  List&amp;lt;Contributor&amp;gt; contributors(@Param(&#34;owners&#34;) List&amp;lt;String&amp;gt; owners);&#xA;&#xA;  class Contributor {&#xA;    String login;&#xA;    int contributions;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;owners&lt;/code&gt; in the above example is defined as &lt;code&gt;Matt, Jeff, Susan&lt;/code&gt;, the uri will expand to &lt;code&gt;/repos;owners=Matt;owners=Jeff;owners=Susan&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;For more information see &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc6570#section-3.2.7&#34;&gt;RFC 6570, Section 3.2.7&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Undefined vs. Empty Values&lt;/h4&gt; &#xA;&lt;p&gt;Undefined expressions are expressions where the value for the expression is an explicit &lt;code&gt;null&lt;/code&gt; or no value is provided. Per &lt;a href=&#34;https://tools.ietf.org/html/rfc6570&#34;&gt;URI Template - RFC 6570&lt;/a&gt;, it is possible to provide an empty value for an expression. When Feign resolves an expression, it first determines if the value is defined, if it is then the query parameter will remain. If the expression is undefined, the query parameter is removed. See below for a complete breakdown.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Empty String&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public void test() {&#xA;   Map&amp;lt;String, Object&amp;gt; parameters = new LinkedHashMap&amp;lt;&amp;gt;();&#xA;   parameters.put(&#34;param&#34;, &#34;&#34;);&#xA;   this.demoClient.test(parameters);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Result&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://localhost:8080/test?param=&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Missing&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public void test() {&#xA;   Map&amp;lt;String, Object&amp;gt; parameters = new LinkedHashMap&amp;lt;&amp;gt;();&#xA;   this.demoClient.test(parameters);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Result&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://localhost:8080/test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Undefined&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public void test() {&#xA;   Map&amp;lt;String, Object&amp;gt; parameters = new LinkedHashMap&amp;lt;&amp;gt;();&#xA;   parameters.put(&#34;param&#34;, null);&#xA;   this.demoClient.test(parameters);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Result&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://localhost:8080/test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/OpenFeign/feign/master/#advanced-usage&#34;&gt;Advanced Usage&lt;/a&gt; for more examples.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;What about slashes? &lt;code&gt;/&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;@RequestLine templates do not encode slash &lt;code&gt;/&lt;/code&gt; characters by default. To change this behavior, set the &lt;code&gt;decodeSlash&lt;/code&gt; property on the &lt;code&gt;@RequestLine&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;What about plus? &lt;code&gt;+&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Per the URI specification, a &lt;code&gt;+&lt;/code&gt; sign is allowed in both the path and query segments of a URI, however, handling of the symbol on the query can be inconsistent. In some legacy systems, the &lt;code&gt;+&lt;/code&gt; is equivalent to the a space. Feign takes the approach of modern systems, where a &lt;code&gt;+&lt;/code&gt; symbol should not represent a space and is explicitly encoded as &lt;code&gt;%2B&lt;/code&gt; when found on a query string.&lt;/p&gt; &#xA; &lt;p&gt;If you wish to use &lt;code&gt;+&lt;/code&gt; as a space, then use the literal &lt;code&gt; &lt;/code&gt; character or encode the value directly as &lt;code&gt;%20&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h5&gt;Custom Expansion&lt;/h5&gt; &#xA;&lt;p&gt;The &lt;code&gt;@Param&lt;/code&gt; annotation has an optional property &lt;code&gt;expander&lt;/code&gt; allowing for complete control over the individual parameter&#39;s expansion. The &lt;code&gt;expander&lt;/code&gt; property must reference a class that implements the &lt;code&gt;Expander&lt;/code&gt; interface:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface Expander {&#xA;    String expand(Object value);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The result of this method adheres to the same rules stated above. If the result is &lt;code&gt;null&lt;/code&gt; or an empty string, the value is omitted. If the value is not pct-encoded, it will be. See &lt;a href=&#34;https://raw.githubusercontent.com/OpenFeign/feign/master/#custom-param-expansion&#34;&gt;Custom @Param Expansion&lt;/a&gt; for more examples.&lt;/p&gt; &#xA;&lt;h4&gt;Request Headers Expansion&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;Headers&lt;/code&gt; and &lt;code&gt;HeaderMap&lt;/code&gt; templates follow the same rules as &lt;a href=&#34;https://raw.githubusercontent.com/OpenFeign/feign/master/#request-parameter-expansion&#34;&gt;Request Parameter Expansion&lt;/a&gt; with the following alterations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Unresolved expressions are omitted. If the result is an empty header value, the entire header is removed.&lt;/li&gt; &#xA; &lt;li&gt;No pct-encoding is performed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/OpenFeign/feign/master/#headers&#34;&gt;Headers&lt;/a&gt; for examples.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;A Note on &lt;code&gt;@Param&lt;/code&gt; parameters and their names&lt;/strong&gt;:&lt;/p&gt; &#xA; &lt;p&gt;All expressions with the same name, regardless of their position on the &lt;code&gt;@RequestLine&lt;/code&gt;, &lt;code&gt;@QueryMap&lt;/code&gt;, &lt;code&gt;@BodyTemplate&lt;/code&gt;, or &lt;code&gt;@Headers&lt;/code&gt; will resolve to the same value. In the following example, the value of &lt;code&gt;contentType&lt;/code&gt;, will be used to resolve both the header and path expression:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface ContentService {&#xA;  @RequestLine(&#34;GET /api/documents/{contentType}&#34;)&#xA;  @Headers(&#34;Accept: {contentType}&#34;)&#xA;  String getDocumentByType(@Param(&#34;contentType&#34;) String type);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Keep this in mind when designing your interfaces.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Request Body Expansion&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;Body&lt;/code&gt; templates follow the same rules as &lt;a href=&#34;https://raw.githubusercontent.com/OpenFeign/feign/master/#request-parameter-expansion&#34;&gt;Request Parameter Expansion&lt;/a&gt; with the following alterations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Unresolved expressions are omitted.&lt;/li&gt; &#xA; &lt;li&gt;Expanded value will &lt;strong&gt;not&lt;/strong&gt; be passed through an &lt;code&gt;Encoder&lt;/code&gt; before being placed on the request body.&lt;/li&gt; &#xA; &lt;li&gt;A &lt;code&gt;Content-Type&lt;/code&gt; header must be specified. See &lt;a href=&#34;https://raw.githubusercontent.com/OpenFeign/feign/master/#body-templates&#34;&gt;Body Templates&lt;/a&gt; for examples.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Customization&lt;/h3&gt; &#xA;&lt;p&gt;Feign has several aspects that can be customized.&lt;br&gt; For simple cases, you can use &lt;code&gt;Feign.builder()&lt;/code&gt; to construct an API interface with your custom components.&lt;br&gt; For request setting, you can use &lt;code&gt;options(Request.Options options)&lt;/code&gt; on &lt;code&gt;target()&lt;/code&gt; to set connectTimeout, connectTimeoutUnit, readTimeout, readTimeoutUnit, followRedirects.&lt;br&gt; For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;interface Bank {&#xA;  @RequestLine(&#34;POST /account/{id}&#34;)&#xA;  Account getAccountInfo(@Param(&#34;id&#34;) String id);&#xA;}&#xA;&#xA;public class BankService {&#xA;  public static void main(String[] args) {&#xA;    Bank bank = Feign.builder()&#xA;        .decoder(new AccountDecoder())&#xA;        .options(new Request.Options(10, TimeUnit.SECONDS, 60, TimeUnit.SECONDS, true))&#xA;        .target(Bank.class, &#34;https://api.examplebank.com&#34;);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multiple Interfaces&lt;/h3&gt; &#xA;&lt;p&gt;Feign can produce multiple api interfaces. These are defined as &lt;code&gt;Target&amp;lt;T&amp;gt;&lt;/code&gt; (default &lt;code&gt;HardCodedTarget&amp;lt;T&amp;gt;&lt;/code&gt;), which allow for dynamic discovery and decoration of requests prior to execution.&lt;/p&gt; &#xA;&lt;p&gt;For example, the following pattern might decorate each request with the current url and auth token from the identity service.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class CloudService {&#xA;  public static void main(String[] args) {&#xA;    CloudDNS cloudDNS = Feign.builder()&#xA;      .target(new CloudIdentityTarget&amp;lt;CloudDNS&amp;gt;(user, apiKey));&#xA;  }&#xA;&#xA;  class CloudIdentityTarget extends Target&amp;lt;CloudDNS&amp;gt; {&#xA;    /* implementation of a Target */&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;p&gt;Feign includes example &lt;a href=&#34;https://raw.githubusercontent.com/OpenFeign/feign/master/example-github&#34;&gt;GitHub&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/OpenFeign/feign/master/example-wikipedia&#34;&gt;Wikipedia&lt;/a&gt; clients. The denominator project can also be scraped for Feign in practice. Particularly, look at its &lt;a href=&#34;https://github.com/Netflix/denominator/tree/master/example-daemon&#34;&gt;example daemon&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Integrations&lt;/h3&gt; &#xA;&lt;p&gt;Feign intends to work well with other Open Source tools. Modules are welcome to integrate with your favorite projects!&lt;/p&gt; &#xA;&lt;h3&gt;Gson&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenFeign/feign/master/gson&#34;&gt;Gson&lt;/a&gt; includes an encoder and decoder you can use with a JSON API.&lt;/p&gt; &#xA;&lt;p&gt;Add &lt;code&gt;GsonEncoder&lt;/code&gt; and/or &lt;code&gt;GsonDecoder&lt;/code&gt; to your &lt;code&gt;Feign.Builder&lt;/code&gt; like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Example {&#xA;  public static void main(String[] args) {&#xA;    GsonCodec codec = new GsonCodec();&#xA;    GitHub github = Feign.builder()&#xA;                         .encoder(new GsonEncoder())&#xA;                         .decoder(new GsonDecoder())&#xA;                         .target(GitHub.class, &#34;https://api.github.com&#34;);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Jackson&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenFeign/feign/master/jackson&#34;&gt;Jackson&lt;/a&gt; includes an encoder and decoder you can use with a JSON API.&lt;/p&gt; &#xA;&lt;p&gt;Add &lt;code&gt;JacksonEncoder&lt;/code&gt; and/or &lt;code&gt;JacksonDecoder&lt;/code&gt; to your &lt;code&gt;Feign.Builder&lt;/code&gt; like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Example {&#xA;  public static void main(String[] args) {&#xA;      GitHub github = Feign.builder()&#xA;                     .encoder(new JacksonEncoder())&#xA;                     .decoder(new JacksonDecoder())&#xA;                     .target(GitHub.class, &#34;https://api.github.com&#34;);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the lighter weight Jackson Jr, use &lt;code&gt;JacksonJrEncoder&lt;/code&gt; and &lt;code&gt;JacksonJrDecoder&lt;/code&gt; from the &lt;a href=&#34;https://raw.githubusercontent.com/OpenFeign/feign/master/jackson-jr&#34;&gt;Jackson Jr Module&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Sax&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenFeign/feign/master/sax&#34;&gt;SaxDecoder&lt;/a&gt; allows you to decode XML in a way that is compatible with normal JVM and also Android environments.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example of how to configure Sax response parsing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Example {&#xA;  public static void main(String[] args) {&#xA;      Api api = Feign.builder()&#xA;         .decoder(SAXDecoder.builder()&#xA;                            .registerContentHandler(UserIdHandler.class)&#xA;                            .build())&#xA;         .target(Api.class, &#34;https://apihost&#34;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;JAXB&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenFeign/feign/master/jaxb&#34;&gt;JAXB&lt;/a&gt; includes an encoder and decoder you can use with an XML API.&lt;/p&gt; &#xA;&lt;p&gt;Add &lt;code&gt;JAXBEncoder&lt;/code&gt; and/or &lt;code&gt;JAXBDecoder&lt;/code&gt; to your &lt;code&gt;Feign.Builder&lt;/code&gt; like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Example {&#xA;  public static void main(String[] args) {&#xA;    Api api = Feign.builder()&#xA;             .encoder(new JAXBEncoder())&#xA;             .decoder(new JAXBDecoder())&#xA;             .target(Api.class, &#34;https://apihost&#34;);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;JAX-RS&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenFeign/feign/master/jaxrs&#34;&gt;JAXRSContract&lt;/a&gt; overrides annotation processing to instead use standard ones supplied by the JAX-RS specification. This is currently targeted at the 1.1 spec.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s the example above re-written to use JAX-RS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;interface GitHub {&#xA;  @GET @Path(&#34;/repos/{owner}/{repo}/contributors&#34;)&#xA;  List&amp;lt;Contributor&amp;gt; contributors(@PathParam(&#34;owner&#34;) String owner, @PathParam(&#34;repo&#34;) String repo);&#xA;}&#xA;&#xA;public class Example {&#xA;  public static void main(String[] args) {&#xA;    GitHub github = Feign.builder()&#xA;                       .contract(new JAXRSContract())&#xA;                       .target(GitHub.class, &#34;https://api.github.com&#34;);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;OkHttp&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenFeign/feign/master/okhttp&#34;&gt;OkHttpClient&lt;/a&gt; directs Feign&#39;s http requests to &lt;a href=&#34;http://square.github.io/okhttp/&#34;&gt;OkHttp&lt;/a&gt;, which enables SPDY and better network control.&lt;/p&gt; &#xA;&lt;p&gt;To use OkHttp with Feign, add the OkHttp module to your classpath. Then, configure Feign to use the OkHttpClient:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Example {&#xA;  public static void main(String[] args) {&#xA;    GitHub github = Feign.builder()&#xA;                     .client(new OkHttpClient())&#xA;                     .target(GitHub.class, &#34;https://api.github.com&#34;);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ribbon&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenFeign/feign/master/ribbon&#34;&gt;RibbonClient&lt;/a&gt; overrides URL resolution of Feign&#39;s client, adding smart routing and resiliency capabilities provided by &lt;a href=&#34;https://github.com/Netflix/ribbon&#34;&gt;Ribbon&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Integration requires you to pass your ribbon client name as the host part of the url, for example &lt;code&gt;myAppProd&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Example {&#xA;  public static void main(String[] args) {&#xA;    MyService api = Feign.builder()&#xA;          .client(RibbonClient.create())&#xA;          .target(MyService.class, &#34;https://myAppProd&#34;);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Java 11 Http2&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenFeign/feign/master/java11&#34;&gt;Http2Client&lt;/a&gt; directs Feign&#39;s http requests to Java11 &lt;a href=&#34;https://openjdk.java.net/jeps/321&#34;&gt;New HTTP/2 Client&lt;/a&gt; that implements HTTP/2.&lt;/p&gt; &#xA;&lt;p&gt;To use New HTTP/2 Client with Feign, use Java SDK 11. Then, configure Feign to use the Http2Client:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;GitHub github = Feign.builder()&#xA;                     .client(new Http2Client())&#xA;                     .target(GitHub.class, &#34;https://api.github.com&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Hystrix&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenFeign/feign/master/hystrix&#34;&gt;HystrixFeign&lt;/a&gt; configures circuit breaker support provided by &lt;a href=&#34;https://github.com/Netflix/Hystrix&#34;&gt;Hystrix&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To use Hystrix with Feign, add the Hystrix module to your classpath. Then use the &lt;code&gt;HystrixFeign&lt;/code&gt; builder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Example {&#xA;  public static void main(String[] args) {&#xA;    MyService api = HystrixFeign.builder().target(MyService.class, &#34;https://myAppProd&#34;);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SOAP&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenFeign/feign/master/soap&#34;&gt;SOAP&lt;/a&gt; includes an encoder and decoder you can use with an XML API.&lt;/p&gt; &#xA;&lt;p&gt;This module adds support for encoding and decoding SOAP Body objects via JAXB and SOAPMessage. It also provides SOAPFault decoding capabilities by wrapping them into the original &lt;code&gt;javax.xml.ws.soap.SOAPFaultException&lt;/code&gt;, so that you&#39;ll only need to catch &lt;code&gt;SOAPFaultException&lt;/code&gt; in order to handle SOAPFault.&lt;/p&gt; &#xA;&lt;p&gt;Add &lt;code&gt;SOAPEncoder&lt;/code&gt; and/or &lt;code&gt;SOAPDecoder&lt;/code&gt; to your &lt;code&gt;Feign.Builder&lt;/code&gt; like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Example {&#xA;  public static void main(String[] args) {&#xA;    Api api = Feign.builder()&#xA;&#x9;     .encoder(new SOAPEncoder(jaxbFactory))&#xA;&#x9;     .decoder(new SOAPDecoder(jaxbFactory))&#xA;&#x9;     .errorDecoder(new SOAPErrorDecoder())&#xA;&#x9;     .target(MyApi.class, &#34;http://api&#34;);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NB: you may also need to add &lt;code&gt;SOAPErrorDecoder&lt;/code&gt; if SOAP Faults are returned in response with error http codes (4xx, 5xx, ...)&lt;/p&gt; &#xA;&lt;h3&gt;SLF4J&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OpenFeign/feign/master/slf4j&#34;&gt;SLF4JModule&lt;/a&gt; allows directing Feign&#39;s logging to &lt;a href=&#34;http://www.slf4j.org/&#34;&gt;SLF4J&lt;/a&gt;, allowing you to easily use a logging backend of your choice (Logback, Log4J, etc.)&lt;/p&gt; &#xA;&lt;p&gt;To use SLF4J with Feign, add both the SLF4J module and an SLF4J binding of your choice to your classpath. Then, configure Feign to use the Slf4jLogger:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Example {&#xA;  public static void main(String[] args) {&#xA;    GitHub github = Feign.builder()&#xA;                     .logger(new Slf4jLogger())&#xA;                     .logLevel(Level.FULL)&#xA;                     .target(GitHub.class, &#34;https://api.github.com&#34;);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Decoders&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Feign.builder()&lt;/code&gt; allows you to specify additional configuration such as how to decode a response.&lt;/p&gt; &#xA;&lt;p&gt;If any methods in your interface return types besides &lt;code&gt;Response&lt;/code&gt;, &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;byte[]&lt;/code&gt; or &lt;code&gt;void&lt;/code&gt;, you&#39;ll need to configure a non-default &lt;code&gt;Decoder&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s how to configure JSON decoding (using the &lt;code&gt;feign-gson&lt;/code&gt; extension):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Example {&#xA;  public static void main(String[] args) {&#xA;    GitHub github = Feign.builder()&#xA;                     .decoder(new GsonDecoder())&#xA;                     .target(GitHub.class, &#34;https://api.github.com&#34;);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to pre-process the response before give it to the Decoder, you can use the &lt;code&gt;mapAndDecode&lt;/code&gt; builder method. An example use case is dealing with an API that only serves jsonp, you will maybe need to unwrap the jsonp before send it to the Json decoder of your choice:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Example {&#xA;  public static void main(String[] args) {&#xA;    JsonpApi jsonpApi = Feign.builder()&#xA;                         .mapAndDecode((response, type) -&amp;gt; jsopUnwrap(response, type), new GsonDecoder())&#xA;                         .target(JsonpApi.class, &#34;https://some-jsonp-api.com&#34;);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If any methods in your interface return type &lt;code&gt;Stream&lt;/code&gt;, you&#39;ll need to configure a &lt;code&gt;StreamDecoder&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s how to configure Stream decoder without delegate decoder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Example {&#xA;  public static void main(String[] args) {&#xA;    GitHub github = Feign.builder()&#xA;            .decoder(StreamDecoder.create((r, t) -&amp;gt; {&#xA;              BufferedReader bufferedReader = new BufferedReader(r.body().asReader(UTF_8));&#xA;              return bufferedReader.lines().iterator();&#xA;            }))&#xA;            .target(GitHub.class, &#34;https://api.github.com&#34;);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s how to configure Stream decoder with delegate decoder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;&#xA;public class Example {&#xA;  public static void main(String[] args) {&#xA;    GitHub github = Feign.builder()&#xA;            .decoder(StreamDecoder.create((r, t) -&amp;gt; {&#xA;              BufferedReader bufferedReader = new BufferedReader(r.body().asReader(UTF_8));&#xA;              return bufferedReader.lines().iterator();&#xA;            }, (r, t) -&amp;gt; &#34;this is delegate decoder&#34;))&#xA;            .target(GitHub.class, &#34;https://api.github.com&#34;);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Encoders&lt;/h3&gt; &#xA;&lt;p&gt;The simplest way to send a request body to a server is to define a &lt;code&gt;POST&lt;/code&gt; method that has a &lt;code&gt;String&lt;/code&gt; or &lt;code&gt;byte[]&lt;/code&gt; parameter without any annotations on it. You will likely need to add a &lt;code&gt;Content-Type&lt;/code&gt; header.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;interface LoginClient {&#xA;  @RequestLine(&#34;POST /&#34;)&#xA;  @Headers(&#34;Content-Type: application/json&#34;)&#xA;  void login(String content);&#xA;}&#xA;&#xA;public class Example {&#xA;  public static void main(String[] args) {&#xA;    client.login(&#34;{\&#34;user_name\&#34;: \&#34;denominator\&#34;, \&#34;password\&#34;: \&#34;secret\&#34;}&#34;);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By configuring an &lt;code&gt;Encoder&lt;/code&gt;, you can send a type-safe request body. Here&#39;s an example using the &lt;code&gt;feign-gson&lt;/code&gt; extension:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;static class Credentials {&#xA;  final String user_name;&#xA;  final String password;&#xA;&#xA;  Credentials(String user_name, String password) {&#xA;    this.user_name = user_name;&#xA;    this.password = password;&#xA;  }&#xA;}&#xA;&#xA;interface LoginClient {&#xA;  @RequestLine(&#34;POST /&#34;)&#xA;  void login(Credentials creds);&#xA;}&#xA;&#xA;public class Example {&#xA;  public static void main(String[] args) {&#xA;    LoginClient client = Feign.builder()&#xA;                              .encoder(new GsonEncoder())&#xA;                              .target(LoginClient.class, &#34;https://foo.com&#34;);&#xA;&#xA;    client.login(new Credentials(&#34;denominator&#34;, &#34;secret&#34;));&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;@Body templates&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;@Body&lt;/code&gt; annotation indicates a template to expand using parameters annotated with &lt;code&gt;@Param&lt;/code&gt;. You will likely need to add a &lt;code&gt;Content-Type&lt;/code&gt; header.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;interface LoginClient {&#xA;&#xA;  @RequestLine(&#34;POST /&#34;)&#xA;  @Headers(&#34;Content-Type: application/xml&#34;)&#xA;  @Body(&#34;&amp;lt;login \&#34;user_name\&#34;=\&#34;{user_name}\&#34; \&#34;password\&#34;=\&#34;{password}\&#34;/&amp;gt;&#34;)&#xA;  void xml(@Param(&#34;user_name&#34;) String user, @Param(&#34;password&#34;) String password);&#xA;&#xA;  @RequestLine(&#34;POST /&#34;)&#xA;  @Headers(&#34;Content-Type: application/json&#34;)&#xA;  // json curly braces must be escaped!&#xA;  @Body(&#34;%7B\&#34;user_name\&#34;: \&#34;{user_name}\&#34;, \&#34;password\&#34;: \&#34;{password}\&#34;%7D&#34;)&#xA;  void json(@Param(&#34;user_name&#34;) String user, @Param(&#34;password&#34;) String password);&#xA;}&#xA;&#xA;public class Example {&#xA;  public static void main(String[] args) {&#xA;    client.xml(&#34;denominator&#34;, &#34;secret&#34;); // &amp;lt;login &#34;user_name&#34;=&#34;denominator&#34; &#34;password&#34;=&#34;secret&#34;/&amp;gt;&#xA;    client.json(&#34;denominator&#34;, &#34;secret&#34;); // {&#34;user_name&#34;: &#34;denominator&#34;, &#34;password&#34;: &#34;secret&#34;}&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Headers&lt;/h3&gt; &#xA;&lt;p&gt;Feign supports settings headers on requests either as part of the api or as part of the client depending on the use case.&lt;/p&gt; &#xA;&lt;h4&gt;Set headers using apis&lt;/h4&gt; &#xA;&lt;p&gt;In cases where specific interfaces or calls should always have certain header values set, it makes sense to define headers as part of the api.&lt;/p&gt; &#xA;&lt;p&gt;Static headers can be set on an api interface or method using the &lt;code&gt;@Headers&lt;/code&gt; annotation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Headers(&#34;Accept: application/json&#34;)&#xA;interface BaseApi&amp;lt;V&amp;gt; {&#xA;  @Headers(&#34;Content-Type: application/json&#34;)&#xA;  @RequestLine(&#34;PUT /api/{key}&#34;)&#xA;  void put(@Param(&#34;key&#34;) String key, V value);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Methods can specify dynamic content for static headers using variable expansion in &lt;code&gt;@Headers&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface Api {&#xA;   @RequestLine(&#34;POST /&#34;)&#xA;   @Headers(&#34;X-Ping: {token}&#34;)&#xA;   void post(@Param(&#34;token&#34;) String token);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In cases where both the header field keys and values are dynamic and the range of possible keys cannot be known ahead of time and may vary between different method calls in the same api/client (e.g. custom metadata header fields such as &#34;x-amz-meta-*&#34; or &#34;x-goog-meta-*&#34;), a Map parameter can be annotated with &lt;code&gt;HeaderMap&lt;/code&gt; to construct a query that uses the contents of the map as its header parameters.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface Api {&#xA;   @RequestLine(&#34;POST /&#34;)&#xA;   void post(@HeaderMap Map&amp;lt;String, Object&amp;gt; headerMap);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These approaches specify header entries as part of the api and do not require any customizations when building the Feign client.&lt;/p&gt; &#xA;&lt;h4&gt;Setting headers per target&lt;/h4&gt; &#xA;&lt;p&gt;To customize headers for each request method on a Target, a RequestInterceptor can be used. RequestInterceptors can be shared across Target instances and are expected to be thread-safe. RequestInterceptors are applied to all request methods on a Target.&lt;/p&gt; &#xA;&lt;p&gt;If you need per method customization, a custom Target is required, as the a RequestInterceptor does not have access to the current method metadata.&lt;/p&gt; &#xA;&lt;p&gt;For an example of setting headers using a &lt;code&gt;RequestInterceptor&lt;/code&gt;, see the &lt;code&gt;Request Interceptors&lt;/code&gt; section.&lt;/p&gt; &#xA;&lt;p&gt;Headers can be set as part of a custom &lt;code&gt;Target&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  static class DynamicAuthTokenTarget&amp;lt;T&amp;gt; implements Target&amp;lt;T&amp;gt; {&#xA;    public DynamicAuthTokenTarget(Class&amp;lt;T&amp;gt; clazz,&#xA;                                  UrlAndTokenProvider provider,&#xA;                                  ThreadLocal&amp;lt;String&amp;gt; requestIdProvider);&#xA;&#xA;    @Override&#xA;    public Request apply(RequestTemplate input) {&#xA;      TokenIdAndPublicURL urlAndToken = provider.get();&#xA;      if (input.url().indexOf(&#34;http&#34;) != 0) {&#xA;        input.insert(0, urlAndToken.publicURL);&#xA;      }&#xA;      input.header(&#34;X-Auth-Token&#34;, urlAndToken.tokenId);&#xA;      input.header(&#34;X-Request-ID&#34;, requestIdProvider.get());&#xA;&#xA;      return input.request();&#xA;    }&#xA;  }&#xA;&#xA;  public class Example {&#xA;    public static void main(String[] args) {&#xA;      Bank bank = Feign.builder()&#xA;              .target(new DynamicAuthTokenTarget(Bank.class, provider, requestIdProvider));&#xA;    }&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These approaches depend on the custom &lt;code&gt;RequestInterceptor&lt;/code&gt; or &lt;code&gt;Target&lt;/code&gt; being set on the Feign client when it is built and can be used as a way to set headers on all api calls on a per-client basis. This can be useful for doing things such as setting an authentication token in the header of all api requests on a per-client basis. The methods are run when the api call is made on the thread that invokes the api call, which allows the headers to be set dynamically at call time and in a context-specific manner -- for example, thread-local storage can be used to set different header values depending on the invoking thread, which can be useful for things such as setting thread-specific trace identifiers for requests.&lt;/p&gt; &#xA;&lt;h3&gt;Advanced usage&lt;/h3&gt; &#xA;&lt;h4&gt;Base Apis&lt;/h4&gt; &#xA;&lt;p&gt;In many cases, apis for a service follow the same conventions. Feign supports this pattern via single-inheritance interfaces.&lt;/p&gt; &#xA;&lt;p&gt;Consider the example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;interface BaseAPI {&#xA;  @RequestLine(&#34;GET /health&#34;)&#xA;  String health();&#xA;&#xA;  @RequestLine(&#34;GET /all&#34;)&#xA;  List&amp;lt;Entity&amp;gt; all();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can define and target a specific api, inheriting the base methods.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;interface CustomAPI extends BaseAPI {&#xA;  @RequestLine(&#34;GET /custom&#34;)&#xA;  String custom();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In many cases, resource representations are also consistent. For this reason, type parameters are supported on the base api interface.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Headers(&#34;Accept: application/json&#34;)&#xA;interface BaseApi&amp;lt;V&amp;gt; {&#xA;&#xA;  @RequestLine(&#34;GET /api/{key}&#34;)&#xA;  V get(@Param(&#34;key&#34;) String key);&#xA;&#xA;  @RequestLine(&#34;GET /api&#34;)&#xA;  List&amp;lt;V&amp;gt; list();&#xA;&#xA;  @Headers(&#34;Content-Type: application/json&#34;)&#xA;  @RequestLine(&#34;PUT /api/{key}&#34;)&#xA;  void put(@Param(&#34;key&#34;) String key, V value);&#xA;}&#xA;&#xA;interface FooApi extends BaseApi&amp;lt;Foo&amp;gt; { }&#xA;&#xA;interface BarApi extends BaseApi&amp;lt;Bar&amp;gt; { }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Logging&lt;/h4&gt; &#xA;&lt;p&gt;You can log the http messages going to and from the target by setting up a &lt;code&gt;Logger&lt;/code&gt;. Here&#39;s the easiest way to do that:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Example {&#xA;  public static void main(String[] args) {&#xA;    GitHub github = Feign.builder()&#xA;                     .decoder(new GsonDecoder())&#xA;                     .logger(new Logger.JavaLogger(&#34;GitHub.Logger&#34;).appendToFile(&#34;logs/http.log&#34;))&#xA;                     .logLevel(Logger.Level.FULL)&#xA;                     .target(GitHub.class, &#34;https://api.github.com&#34;);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;A Note on JavaLogger&lt;/strong&gt;: Avoid using of default &lt;code&gt;JavaLogger()&lt;/code&gt; constructor - it was marked as deprecated and will be removed soon.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The SLF4JLogger (see above) may also be of interest.&lt;/p&gt; &#xA;&lt;p&gt;To filter out sensitive information like authorization or tokens override methods &lt;code&gt;shouldLogRequestHeader&lt;/code&gt; or &lt;code&gt;shouldLogResponseHeader&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Request Interceptors&lt;/h4&gt; &#xA;&lt;p&gt;When you need to change all requests, regardless of their target, you&#39;ll want to configure a &lt;code&gt;RequestInterceptor&lt;/code&gt;. For example, if you are acting as an intermediary, you might want to propagate the &lt;code&gt;X-Forwarded-For&lt;/code&gt; header.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;static class ForwardedForInterceptor implements RequestInterceptor {&#xA;  @Override public void apply(RequestTemplate template) {&#xA;    template.header(&#34;X-Forwarded-For&#34;, &#34;origin.host.com&#34;);&#xA;  }&#xA;}&#xA;&#xA;public class Example {&#xA;  public static void main(String[] args) {&#xA;    Bank bank = Feign.builder()&#xA;                 .decoder(accountDecoder)&#xA;                 .requestInterceptor(new ForwardedForInterceptor())&#xA;                 .target(Bank.class, &#34;https://api.examplebank.com&#34;);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another common example of an interceptor would be authentication, such as using the built-in &lt;code&gt;BasicAuthRequestInterceptor&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Example {&#xA;  public static void main(String[] args) {&#xA;    Bank bank = Feign.builder()&#xA;                 .decoder(accountDecoder)&#xA;                 .requestInterceptor(new BasicAuthRequestInterceptor(username, password))&#xA;                 .target(Bank.class, &#34;https://api.examplebank.com&#34;);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Custom @Param Expansion&lt;/h4&gt; &#xA;&lt;p&gt;Parameters annotated with &lt;code&gt;Param&lt;/code&gt; expand based on their &lt;code&gt;toString&lt;/code&gt;. By specifying a custom &lt;code&gt;Param.Expander&lt;/code&gt;, users can control this behavior, for example formatting dates.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface Api {&#xA;  @RequestLine(&#34;GET /?since={date}&#34;) Result list(@Param(value = &#34;date&#34;, expander = DateToMillis.class) Date date);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Dynamic Query Parameters&lt;/h4&gt; &#xA;&lt;p&gt;A Map parameter can be annotated with &lt;code&gt;QueryMap&lt;/code&gt; to construct a query that uses the contents of the map as its query parameters.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface Api {&#xA;  @RequestLine(&#34;GET /find&#34;)&#xA;  V find(@QueryMap Map&amp;lt;String, Object&amp;gt; queryMap);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This may also be used to generate the query parameters from a POJO object using a &lt;code&gt;QueryMapEncoder&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface Api {&#xA;  @RequestLine(&#34;GET /find&#34;)&#xA;  V find(@QueryMap CustomPojo customPojo);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When used in this manner, without specifying a custom &lt;code&gt;QueryMapEncoder&lt;/code&gt;, the query map will be generated using member variable names as query parameter names. The following POJO will generate query params of &#34;/find?name={name}&amp;amp;number={number}&#34; (order of included query parameters not guaranteed, and as usual, if any value is null, it will be left out).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class CustomPojo {&#xA;  private final String name;&#xA;  private final int number;&#xA;&#xA;  public CustomPojo (String name, int number) {&#xA;    this.name = name;&#xA;    this.number = number;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To setup a custom &lt;code&gt;QueryMapEncoder&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Example {&#xA;  public static void main(String[] args) {&#xA;    MyApi myApi = Feign.builder()&#xA;                 .queryMapEncoder(new MyCustomQueryMapEncoder())&#xA;                 .target(MyApi.class, &#34;https://api.hostname.com&#34;);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When annotating objects with @QueryMap, the default encoder uses reflection to inspect provided objects Fields to expand the objects values into a query string. If you prefer that the query string be built using getter and setter methods, as defined in the Java Beans API, please use the BeanQueryMapEncoder&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Example {&#xA;  public static void main(String[] args) {&#xA;    MyApi myApi = Feign.builder()&#xA;                 .queryMapEncoder(new BeanQueryMapEncoder())&#xA;                 .target(MyApi.class, &#34;https://api.hostname.com&#34;);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Error Handling&lt;/h3&gt; &#xA;&lt;p&gt;If you need more control over handling unexpected responses, Feign instances can register a custom &lt;code&gt;ErrorDecoder&lt;/code&gt; via the builder.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Example {&#xA;  public static void main(String[] args) {&#xA;    MyApi myApi = Feign.builder()&#xA;                 .errorDecoder(new MyErrorDecoder())&#xA;                 .target(MyApi.class, &#34;https://api.hostname.com&#34;);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All responses that result in an HTTP status not in the 2xx range will trigger the &lt;code&gt;ErrorDecoder&lt;/code&gt;&#39;s &lt;code&gt;decode&lt;/code&gt; method, allowing you to handle the response, wrap the failure into a custom exception or perform any additional processing. If you want to retry the request again, throw a &lt;code&gt;RetryableException&lt;/code&gt;. This will invoke the registered &lt;code&gt;Retryer&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Retry&lt;/h3&gt; &#xA;&lt;p&gt;Feign, by default, will automatically retry &lt;code&gt;IOException&lt;/code&gt;s, regardless of HTTP method, treating them as transient network related exceptions, and any &lt;code&gt;RetryableException&lt;/code&gt; thrown from an &lt;code&gt;ErrorDecoder&lt;/code&gt;. To customize this behavior, register a custom &lt;code&gt;Retryer&lt;/code&gt; instance via the builder.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Example {&#xA;  public static void main(String[] args) {&#xA;    MyApi myApi = Feign.builder()&#xA;                 .retryer(new MyRetryer())&#xA;                 .target(MyApi.class, &#34;https://api.hostname.com&#34;);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Retryer&lt;/code&gt;s are responsible for determining if a retry should occur by returning either a &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; from the method &lt;code&gt;continueOrPropagate(RetryableException e);&lt;/code&gt; A &lt;code&gt;Retryer&lt;/code&gt; instance will be created for each &lt;code&gt;Client&lt;/code&gt; execution, allowing you to maintain state bewteen each request if desired.&lt;/p&gt; &#xA;&lt;p&gt;If the retry is determined to be unsuccessful, the last &lt;code&gt;RetryException&lt;/code&gt; will be thrown. To throw the original cause that led to the unsuccessful retry, build your Feign client with the &lt;code&gt;exceptionPropagationPolicy()&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;h3&gt;Metrics&lt;/h3&gt; &#xA;&lt;p&gt;By default, feign won&#39;t collect any metrics.&lt;/p&gt; &#xA;&lt;p&gt;But, it&#39;s possible to add metric collection capabilities to any feign client.&lt;/p&gt; &#xA;&lt;p&gt;Metric Capabilities provide a first-class Metrics API that users can tap into to gain insight into the request/response lifecycle.&lt;/p&gt; &#xA;&lt;h4&gt;Dropwizard Metrics 4&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;public class MyApp {&#xA;  public static void main(String[] args) {&#xA;    GitHub github = Feign.builder()&#xA;                         .addCapability(new Metrics4Capability())&#xA;                         .target(GitHub.class, &#34;https://api.github.com&#34;);&#xA;&#xA;    github.contributors(&#34;OpenFeign&#34;, &#34;feign&#34;);&#xA;    // metrics will be available from this point onwards&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Dropwizard Metrics 5&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;public class MyApp {&#xA;  public static void main(String[] args) {&#xA;    GitHub github = Feign.builder()&#xA;                         .addCapability(new Metrics5Capability())&#xA;                         .target(GitHub.class, &#34;https://api.github.com&#34;);&#xA;&#xA;    github.contributors(&#34;OpenFeign&#34;, &#34;feign&#34;);&#xA;    // metrics will be available from this point onwards&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Micrometer&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;public class MyApp {&#xA;  public static void main(String[] args) {&#xA;    GitHub github = Feign.builder()&#xA;                         .addCapability(new MicrometerCapability())&#xA;                         .target(GitHub.class, &#34;https://api.github.com&#34;);&#xA;&#xA;    github.contributors(&#34;OpenFeign&#34;, &#34;feign&#34;);&#xA;    // metrics will be available from this point onwards&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Static and Default Methods&lt;/h4&gt; &#xA;&lt;p&gt;Interfaces targeted by Feign may have static or default methods (if using Java 8+). These allows Feign clients to contain logic that is not expressly defined by the underlying API. For example, static methods make it easy to specify common client build configurations; default methods can be used to compose queries or define default parameters.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;interface GitHub {&#xA;  @RequestLine(&#34;GET /repos/{owner}/{repo}/contributors&#34;)&#xA;  List&amp;lt;Contributor&amp;gt; contributors(@Param(&#34;owner&#34;) String owner, @Param(&#34;repo&#34;) String repo);&#xA;&#xA;  @RequestLine(&#34;GET /users/{username}/repos?sort={sort}&#34;)&#xA;  List&amp;lt;Repo&amp;gt; repos(@Param(&#34;username&#34;) String owner, @Param(&#34;sort&#34;) String sort);&#xA;&#xA;  default List&amp;lt;Repo&amp;gt; repos(String owner) {&#xA;    return repos(owner, &#34;full_name&#34;);&#xA;  }&#xA;&#xA;  /**&#xA;   * Lists all contributors for all repos owned by a user.&#xA;   */&#xA;  default List&amp;lt;Contributor&amp;gt; contributors(String user) {&#xA;    MergingContributorList contributors = new MergingContributorList();&#xA;    for(Repo repo : this.repos(owner)) {&#xA;      contributors.addAll(this.contributors(user, repo.getName()));&#xA;    }&#xA;    return contributors.mergeResult();&#xA;  }&#xA;&#xA;  static GitHub connect() {&#xA;    return Feign.builder()&#xA;                .decoder(new GsonDecoder())&#xA;                .target(GitHub.class, &#34;https://api.github.com&#34;);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Async execution via &lt;code&gt;CompletableFuture&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Feign 10.8 introduces a new builder &lt;code&gt;AsyncFeign&lt;/code&gt; that allow methods to return &lt;code&gt;CompletableFuture&lt;/code&gt; instances.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;interface GitHub {&#xA;  @RequestLine(&#34;GET /repos/{owner}/{repo}/contributors&#34;)&#xA;  CompletableFuture&amp;lt;List&amp;lt;Contributor&amp;gt;&amp;gt; contributors(@Param(&#34;owner&#34;) String owner, @Param(&#34;repo&#34;) String repo);&#xA;}&#xA;&#xA;public class MyApp {&#xA;  public static void main(String... args) {&#xA;    GitHub github = AsyncFeign.asyncBuilder()&#xA;                         .decoder(new GsonDecoder())&#xA;                         .target(GitHub.class, &#34;https://api.github.com&#34;);&#xA;&#xA;    // Fetch and print a list of the contributors to this library.&#xA;    CompletableFuture&amp;lt;List&amp;lt;Contributor&amp;gt;&amp;gt; contributors = github.contributors(&#34;OpenFeign&#34;, &#34;feign&#34;);&#xA;    for (Contributor contributor : contributors.get(1, TimeUnit.SECONDS)) {&#xA;      System.out.println(contributor.login + &#34; (&#34; + contributor.contributions + &#34;)&#34;);&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Initial implementation include 2 async clients:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;AsyncClient.Default&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AsyncApacheHttp5Client&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Maven’s Bill of Material (BOM)&lt;/h2&gt; &#xA;&lt;p&gt;Keeping all feign libraries on the same version is essential to avoid incompatible binaries. When consuming external dependencies, can be tricky to make sure only one version is present.&lt;/p&gt; &#xA;&lt;p&gt;With that in mind, feign build generates a module called &lt;code&gt;feign-bom&lt;/code&gt; that locks the versions for all &lt;code&gt;feign-*&lt;/code&gt; modules.&lt;/p&gt; &#xA;&lt;p&gt;The Bill Of Material is a special POM file that groups dependency versions that are known to be valid and tested to work together. This will reduce the developers’ pain of having to test the compatibility of different versions and reduce the chances to have version mismatches.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repo1.maven.org/maven2/io/github/openfeign/feign-bom/11.9/feign-bom-11.9.pom&#34;&gt;Here&lt;/a&gt; is one example of what feign BOM file looks like.&lt;/p&gt; &#xA;&lt;h4&gt;Usage&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;project&amp;gt;&#xA;&#xA;...&#xA;&#xA;  &amp;lt;dependencyManagement&amp;gt;&#xA;    &amp;lt;dependencies&amp;gt;&#xA;      &amp;lt;dependency&amp;gt;&#xA;        &amp;lt;groupId&amp;gt;io.github.openfeign&amp;lt;/groupId&amp;gt;&#xA;        &amp;lt;artifactId&amp;gt;feign-bom&amp;lt;/artifactId&amp;gt;&#xA;        &amp;lt;version&amp;gt;??feign.version??&amp;lt;/version&amp;gt;&#xA;        &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;&#xA;        &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;&#xA;      &amp;lt;/dependency&amp;gt;&#xA;    &amp;lt;/dependencies&amp;gt;&#xA;  &amp;lt;/dependencyManagement&amp;gt;&#xA;&amp;lt;/project&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>