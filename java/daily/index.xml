<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-07T01:29:23Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>arpitbbhayani/WikiSe</title>
    <updated>2024-05-07T01:29:23Z</updated>
    <id>tag:github.com,2024-05-07:/arpitbbhayani/WikiSe</id>
    <link href="https://github.com/arpitbbhayani/WikiSe" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A wikipedia search engine that is completely built in Java and works on Wikipedia XML dumps&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WikiSe : Wikipedia Search Engine&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;Arpit Bhayani&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A wikipedia search engine built using:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Java&lt;/li&gt; &#xA; &lt;li&gt;XML Parsing using SAX Parser.&lt;/li&gt; &#xA; &lt;li&gt;Ranking Algorithms&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It works on Wikipedia XML dumps.&lt;br&gt; XML Dump Name : enwiki-latest-pages-articles.xml.bz2&lt;br&gt; XML Dump Link : &lt;a href=&#34;http://dumps.wikimedia.org/enwiki/latest/enwiki-latest-pages-articles.xml.bz2&#34;&gt;http://dumps.wikimedia.org/enwiki/latest/enwiki-latest-pages-articles.xml.bz2&lt;/a&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Implementation basic:&lt;br&gt; High level of indexing which reduces the search time.&lt;br&gt; The index terms are hashed to characters &#39;a&#39; - &#39;z&#39;&lt;br&gt; Index is compressed at bitlevel. ( total size = 9.7GB )&lt;br&gt; Special infobox parsing to provide direct answeres if possible.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Special Features :&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Index compression to make index half of its size. ( bit level compression )&lt;/li&gt; &#xA; &lt;li&gt;Special search fields provided so that user can directly search info infobox.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;e.g. Search Query : website:mumbai&lt;/p&gt; &#xA;&lt;p&gt;Title : mumbai&lt;br&gt; Title : mumbai indians&lt;br&gt; Title : 2012-13 mumbai f.c. season&lt;br&gt; Title : 2008 mumbai attacks&lt;br&gt; Title : maharashtra&lt;br&gt; Title : public transport in mumbai&lt;br&gt; Title : attribution of the 2008 mumbai attacks&lt;br&gt; Title : list of constituencies of maharashtra vidhan sabha&lt;br&gt; Title : wikipedia:files for deletion/2010 april 13&lt;br&gt; Title : list of colleges in mumbai&lt;br&gt; ****** {{url|www.mcgm.gov.in}} ****** &amp;lt;------ Website link&lt;/p&gt; &#xA;&lt;p&gt;Interesting search :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;pratieik&lt;/li&gt; &#xA; &lt;li&gt;chudail&lt;/li&gt; &#xA; &lt;li&gt;joey tribbiani&lt;/li&gt; &#xA; &lt;li&gt;cartoon&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;nick:phoebe buffay powers:batman age:dimple kapadia population:amravati location:takla lake portrayer:joey tribbiani series:joey tribbiani t:priyanka t:priyanka age:priyanka&lt;/p&gt; &#xA;&lt;p&gt;Statistics: On a mchine of configuration : Lenovo Z580 , 4 GB of RAM , 5400rpm hard-disk&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For 100 MB of data &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Size of index ( primary+secondary ) : 24.3 MB&lt;/li&gt; &#xA;   &lt;li&gt;Time to primary index : 9.031 sec&lt;/li&gt; &#xA;   &lt;li&gt;Time to secondary index : 1.041 sec&lt;/li&gt; &#xA;   &lt;li&gt;Time to search : 0.007 sec&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;For 46.7 GB of data Wiki XML Dump : &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Size of index ( primary+secondary ) : 9.7 GB&lt;/li&gt; &#xA;   &lt;li&gt;Time to index : 2hr 28min (average)&lt;/li&gt; &#xA;   &lt;li&gt;Time to search : 0.251 sec (average on 100 searches)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>dmulloy2/ProtocolLib</title>
    <updated>2024-05-07T01:29:23Z</updated>
    <id>tag:github.com,2024-05-07:/dmulloy2/ProtocolLib</id>
    <link href="https://github.com/dmulloy2/ProtocolLib" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Provides read and write access to the Minecraft protocol with Bukkit.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ProtocolLib&lt;/h1&gt; &#xA;&lt;p&gt;Certain tasks are impossible to perform with the standard Bukkit API, and may require working with and even modifying Minecraft directly. A common technique is to modify incoming and outgoing &lt;a href=&#34;https://wiki.vg/Protocol&#34;&gt;packets&lt;/a&gt;, or inject custom packets into the stream. This is quite cumbersome to do, however, and most implementations will break as soon as a new version of Minecraft has been released, mostly due to obfuscation.&lt;/p&gt; &#xA;&lt;p&gt;Critically, different plugins that use this approach may &lt;em&gt;hook&lt;/em&gt; into the same classes, with unpredictable outcomes. More than often this causes plugins to crash, but it may also lead to more subtle bugs.&lt;/p&gt; &#xA;&lt;h3&gt;Resources&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.spigotmc.org/resources/protocollib.1997/&#34;&gt;Resource Page&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ci.dmulloy2.net/job/ProtocolLib&#34;&gt;Dev Builds&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ci.dmulloy2.net/job/ProtocolLib/javadoc/index.html&#34;&gt;JavaDoc&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Compilation&lt;/h3&gt; &#xA;&lt;p&gt;ProtocolLib is built with &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt;. If you have it installed, just run &lt;code&gt;./gradlew build&lt;/code&gt; in the root project folder. Other gradle targets you may be interested in include &lt;code&gt;clean&lt;/code&gt;, &lt;code&gt;test&lt;/code&gt;, and &lt;code&gt;shadowJar&lt;/code&gt;. &lt;code&gt;shadowJar&lt;/code&gt; will create a jar with all dependencies (ByteBuddy) included.&lt;/p&gt; &#xA;&lt;h3&gt;A new API&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;ProtocolLib&lt;/strong&gt; attempts to solve this problem by providing an event API, much like Bukkit, that allows plugins to monitor, modify, or cancel packets sent and received. But, more importantly, the API also hides all the gritty, obfuscated classes with a simple index based read/write system. You no longer have to reference CraftBukkit!&lt;/p&gt; &#xA;&lt;h3&gt;Using ProtocolLib&lt;/h3&gt; &#xA;&lt;p&gt;To use this library, first add ProtocolLib.jar to your Java build path. Then, add ProtocolLib as a dependency or soft dependency to your plugin.yml file like any other plugin:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;depend: [ ProtocolLib ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also add ProtocolLib as a Maven dependency:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;repositories&amp;gt;&#xA;  &amp;lt;repository&amp;gt;&#xA;    &amp;lt;id&amp;gt;dmulloy2-repo&amp;lt;/id&amp;gt;&#xA;    &amp;lt;url&amp;gt;https://repo.dmulloy2.net/repository/public/&amp;lt;/url&amp;gt;&#xA;  &amp;lt;/repository&amp;gt;&#xA;&amp;lt;/repositories&amp;gt;&#xA;&#xA;&amp;lt;dependencies&amp;gt;&#xA;  &amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;com.comphenix.protocol&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;ProtocolLib&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;5.1.0&amp;lt;/version&amp;gt;&#xA;    &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;&#xA;  &amp;lt;/dependency&amp;gt;&#xA;&amp;lt;/dependencies&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use the maven dependency with gradle:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;repositories {&#xA;    maven { url &#34;https://repo.dmulloy2.net/repository/public/&#34; }&#xA;}&#xA;&#xA;dependencies {&#xA;    compileOnly &#39;com.comphenix.protocol:ProtocolLib:5.1.0&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then get a reference to ProtocolManager in onLoad() or onEnable() and you&#39;re good to go.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private ProtocolManager protocolManager;&#xA;&#xA;public void onLoad() {&#xA;    protocolManager = ProtocolLibrary.getProtocolManager();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To listen for packets sent by the server to a client, add a server-side listener:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Disable all sound effects&#xA;protocolManager.addPacketListener(new PacketAdapter(&#xA;    this,&#xA;    ListenerPriority.NORMAL,&#xA;    PacketType.Play.Server.NAMED_SOUND_EFFECT&#xA;) {&#xA;    @Override&#xA;    public void onPacketSending(PacketEvent event) {&#xA;        event.setCancelled(true);&#xA;    }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s also possible to read and modify the content of these packets. For instance, you can create a global censor by listening for Packet3Chat events:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Censor&#xA;protocolManager.addPacketListener(new PacketAdapter(&#xA;    this,&#xA;    ListenerPriority.NORMAL,&#xA;    PacketType.Play.Client.CHAT&#xA;) {&#xA;    @Override&#xA;    public void onPacketReceiving(PacketEvent event) {&#xA;        PacketContainer packet = event.getPacket();&#xA;        String message = packet.getStrings().read(0);&#xA;&#xA;        if (message.contains(&#34;shit&#34;) || message.contains(&#34;damn&#34;)) {&#xA;            event.setCancelled(true);&#xA;            event.getPlayer().sendMessage(&#34;Bad manners!&#34;);&#xA;        }&#xA;    }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sending packets&lt;/h3&gt; &#xA;&lt;p&gt;Normally, you might have to do something ugly like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;PacketPlayOutExplosion fakeExplosion = new PacketPlayOutExplosion(&#xA;    player.getLocation().getX(),&#xA;    player.getLocation().getY(),&#xA;    player.getLocation().getZ(),&#xA;    3.0F,&#xA;    new ArrayList&amp;lt;&amp;gt;(),&#xA;    new Vec3D(&#xA;        player.getVelocity().getX() + 1,&#xA;        player.getVelocity().getY() + 1,&#xA;        player.getVelocity().getZ() + 1&#xA;    )&#xA;);&#xA;&#xA;((CraftPlayer) player).getHandle().b.a(fakeExplosion);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But with ProtocolLib, you can turn that into something more manageable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;PacketContainer fakeExplosion = new PacketContainer(PacketType.Play.Server.EXPLOSION);&#xA;fakeExplosion.getDoubles()&#xA;    .write(0, player.getLocation().getX())&#xA;    .write(1, player.getLocation().getY())&#xA;    .write(2, player.getLocation().getZ());&#xA;fakeExplosion.getFloat().write(0, 3.0F);&#xA;fakeExplosion.getBlockPositionCollectionModifier().write(0, new ArrayList&amp;lt;&amp;gt;());&#xA;fakeExplosion.getVectors().write(0, player.getVelocity().add(new Vector(1, 1, 1)));&#xA;&#xA;protocolManager.sendServerPacket(player, fakeExplosion);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Compatibility&lt;/h3&gt; &#xA;&lt;p&gt;One of the main goals of this project was to achieve maximum compatibility with CraftBukkit. And the end result is quite flexible. It&#39;s likely that I won&#39;t have to update ProtocolLib for anything but bug fixes and new features.&lt;/p&gt; &#xA;&lt;p&gt;How is this possible? It all comes down to reflection in the end. Essentially, no name is hard coded - every field, method and class is deduced by looking at field types, package names or parameter types. It&#39;s remarkably consistent across different versions.&lt;/p&gt;</summary>
  </entry>
</feed>