<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-08T01:31:40Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>CodePhiliaX/fastexcel</title>
    <updated>2025-01-08T01:31:40Z</updated>
    <id>tag:github.com,2025-01-08:/CodePhiliaX/fastexcel</id>
    <link href="https://github.com/CodePhiliaX/fastexcel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;easyexcel作者最新升级版本， 快速、简洁、解决大文件内存溢出的java处理Excel工具&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodePhiliaX/fastexcel/main/README.md&#34;&gt;中文&lt;/a&gt; |&lt;a href=&#34;https://raw.githubusercontent.com/CodePhiliaX/fastexcel/main/README_EN.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/CodePhiliaX/fastexcel/main/README_JP.md&#34;&gt;日本語&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;什么是 FastExcel&lt;/h2&gt; &#xA;&lt;p&gt;FastExcel 是由原 EasyExcel 作者创建的新项目。2023 年我已从阿里离职，近期阿里宣布停止更新 EasyExcel，我决定继续维护和升级这个项目。在重新开始时，我选择为它起名为 FastExcel，以突出这个框架在处理 Excel 文件时的高性能表现，而不仅仅是简单易用。&lt;/p&gt; &#xA;&lt;p&gt;FastExcel 将始终坚持免费开源，并采用最开放的 MIT 协议，使其适用于任何商业化场景。这为开发者和企业提供了极大的自由度和灵活性。FastExcel 的一些显著特点包括：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;1、完全兼容原 EasyExcel 的所有功能和特性，这使得用户可以无缝过渡。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2、从 EasyExcel 迁移到 FastExcel 只需简单地更换包名和 Maven 依赖即可完成升级。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;3、在功能上，比 EasyExcel 提供更多创新和改进。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;4、FastExcel 1.0.0 版本新增了读取 Excel 指定行数和将 Excel 转换为 PDF 的功能。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;我们计划在未来推出更多新特性，以不断提升用户体验和工具实用性。欢迎大家关注 程序员小懒的公众号 关注FastExcel的发展。FastExcel 致力于成为您处理 Excel 文件的最佳选择。&lt;/p&gt; &#xA;&lt;h2&gt;主要特性&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;高性能读写：FastExcel 专注于性能优化，能够高效处理大规模的 Excel 数据。相比一些传统的 Excel 处理库，它能显著降低内存占用。&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;2&#34;&gt; &#xA;   &lt;li&gt;简单易用：该库提供了简洁直观的 API，使得开发者可以轻松集成到项目中，无论是简单的 Excel 操作还是复杂的数据处理都能快速上手。&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;3&#34;&gt; &#xA;   &lt;li&gt;流式操作：FastExcel 支持流式读取，将一次性加载大量数据的问题降到最低。这种设计方式在处理数十万甚至上百万行的数据时尤为重要。&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;安装&lt;/h2&gt; &#xA;&lt;p&gt;下表列出了各版本 FastExcel 基础库对 Java 语言版本最低要求的情况：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;版本&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;jdk版本支持范围&lt;/th&gt; &#xA;   &lt;th&gt;备注&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.0.0+&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;jdk8 - jdk21&lt;/td&gt; &#xA;   &lt;td&gt;目前的master分支，完全兼容easyexcel&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;我们强烈建议您使用最新版本的 FastExcel，因为最新版本中的性能优化、BUG修复和新功能都会让您的使用更加方便。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;当前 FastExcel 底层使用 poi 作为基础包，如果您的项目中已经有 poi 相关组件，需要您手动排除 poi 的相关 jar 包。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Maven&lt;/h3&gt; &#xA;&lt;p&gt;如果您使用 Maven 进行项目构建，请在 &lt;code&gt;pom.xml&lt;/code&gt; 文件中引入以下配置：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;cn.idev.excel&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;fastexcel&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Gradle&lt;/h3&gt; &#xA;&lt;p&gt;如果您使用 Gradle 进行项目构建，请在 &lt;code&gt;build.gradle&lt;/code&gt; 文件中引入以下配置：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;    implementation &#39;cn.idev.excel:fastexcel:1.0.0&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;EasyExcel 与 FastExcel 的区别&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;FastExcel 支持所有 EasyExcel 的功能，但是 FastExcel 的性能更好，更稳定。&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;2&#34;&gt; &#xA;   &lt;li&gt;FastExcel 与 EasyExcel 的 API 完全一致，可以无缝切换。&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;3&#34;&gt; &#xA;   &lt;li&gt;FastExcel 会持续的更新，修复 bug，优化性能，增加新功能。&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;EasyExcel 如何升级到 FastExcel&lt;/h2&gt; &#xA;&lt;h3&gt;1. 修改依赖&lt;/h3&gt; &#xA;&lt;p&gt;将 EasyExcel 的依赖替换为 FastExcel 的依赖，如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;!-- easyexcel 依赖 --&amp;gt;&#xA;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;easyexcel&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;xxxx&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;的依赖替换为&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;cn.idev.excel&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;fastexcel&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. 修改代码&lt;/h3&gt; &#xA;&lt;p&gt;将 EasyExcel 的包名替换为 FastExcel 的包名，如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 将 easyexcel 的包名替换为 FastExcel 的包名&#xA;import com.alibaba.excel.**;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;替换为&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import cn.idev.excel.**;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. 不修改代码直接依赖 FastExcel&lt;/h3&gt; &#xA;&lt;p&gt;如果由于种种原因您不想修改代码，可以直接依赖 FastExcel ，然后在 &lt;code&gt;pom.xml&lt;/code&gt; 文件中直接依赖 FastExcel。 EasyExcel 与 FastExcel 可以共存，但是长期建议替换为 FastExcel。&lt;/p&gt; &#xA;&lt;h3&gt;4. 建议以后使用 FastExcel 类&lt;/h3&gt; &#xA;&lt;p&gt;为了兼容性考虑保留了 EasyExcel 类，但是建议以后使用 FastExcel 类，FastExcel 类是FastExcel 的入口类，功能包含了 EasyExcel 类的所有功能，以后新特性仅在 FastExcel 类中添加。&lt;/p&gt; &#xA;&lt;h2&gt;简单示例：读取 Excel 文件&lt;/h2&gt; &#xA;&lt;p&gt;下面是读取 Excel 文档的例子：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 实现 ReadListener 接口，设置读取数据的操作&#xA;public class DemoDataListener implements ReadListener&amp;lt;DemoData&amp;gt; {&#xA;    @Override&#xA;    public void invoke(DemoData data, AnalysisContext context) {&#xA;        System.out.println(&#34;解析到一条数据&#34; + JSON.toJSONString(data));&#xA;    }&#xA;&#xA;    @Override&#xA;    public void doAfterAllAnalysed(AnalysisContext context) {&#xA;        System.out.println(&#34;所有数据解析完成！&#34;);&#xA;    }&#xA;}&#xA;&#xA;public static void main(String[] args) {&#xA;    String fileName = &#34;demo.xlsx&#34;;&#xA;    // 读取 Excel 文件&#xA;    FastExcel.read(fileName, DemoData.class, new DemoDataListener()).sheet().doRead();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;简单示例：创建 Excel 文件&lt;/h2&gt; &#xA;&lt;p&gt;下面是一个创建 Excel 文档的简单例子：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 示例数据类&#xA;public class DemoData {&#xA;    @ExcelProperty(&#34;字符串标题&#34;)&#xA;    private String string;&#xA;    @ExcelProperty(&#34;日期标题&#34;)&#xA;    private Date date;&#xA;    @ExcelProperty(&#34;数字标题&#34;)&#xA;    private Double doubleData;&#xA;    @ExcelIgnore&#xA;    private String ignore;&#xA;}&#xA;&#xA;// 填充要写入的数据&#xA;private static List&amp;lt;DemoData&amp;gt; data() {&#xA;    List&amp;lt;DemoData&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();&#xA;    for (int i = 0; i &amp;lt; 10; i++) {&#xA;        DemoData data = new DemoData();&#xA;        data.setString(&#34;字符串&#34; + i);&#xA;        data.setDate(new Date());&#xA;        data.setDoubleData(0.56);&#xA;        list.add(data);&#xA;    }&#xA;    return list;&#xA;}&#xA;&#xA;public static void main(String[] args) {&#xA;    String fileName = &#34;demo.xlsx&#34;;&#xA;    // 创建一个名为“模板”的 sheet 页，并写入数据&#xA;    FastExcel.write(fileName, DemoData.class).sheet(&#34;模板&#34;).doWrite(data());&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;关注作者&lt;/h2&gt; &#xA;&lt;p&gt;关注作者“程序员小懒“的公众号加入技术交流群，获取更多技术干货和最新动态。&lt;/p&gt; &#xA;&lt;p&gt;&lt;a&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/b40aebe8-0552-4fb2-b184-4cb64a5b1229&#34; width=&#34;30%&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>