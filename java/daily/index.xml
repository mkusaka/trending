<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-28T01:31:08Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>apache/fury</title>
    <updated>2024-07-28T01:31:08Z</updated>
    <id>tag:github.com,2024-07-28:/apache/fury</id>
    <link href="https://github.com/apache/fury" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A blazingly fast multi-language serialization framework powered by JIT and zero-copy.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img width=&#34;65%&#34; alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/apache/fury/main/docs/images/logo/fury_github_banner.png&#34;&gt;&#xA; &lt;br&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apache/fury/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/apache/fury/ci.yml?branch=main&amp;amp;style=for-the-badge&amp;amp;label=GITHUB%20ACTIONS&amp;amp;logo=github&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://join.slack.com/t/fury-project/shared_invite/zt-1u8soj4qc-ieYEu7ciHOqA2mo47llS8A&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/slack-join-3f0e40?logo=slack&amp;amp;style=for-the-badge&#34; alt=&#34;Slack Channel&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://x.com/ApacheFury&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/@ApacheFury-follow-blue?logo=x&amp;amp;style=for-the-badge&#34; alt=&#34;X&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://search.maven.org/#search%7Cgav%7C1%7Cg:%22org.apache.fury%22%20AND%20a:%22fury-core%22&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/org.apache.fury/fury-core?style=for-the-badge&#34; alt=&#34;Maven Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Apache Fury (incubating)&lt;/strong&gt; is a blazingly-fast multi-language serialization framework powered by &lt;strong&gt;JIT&lt;/strong&gt; (just-in-time compilation) and &lt;strong&gt;zero-copy&lt;/strong&gt;, providing up to 170x performance and ultimate ease of use.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://fury.apache.org&#34;&gt;https://fury.apache.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] Apache Fury (incubating) is an effort undergoing incubation at the Apache Software Foundation (ASF), sponsored by the Apache Incubator PMC.&lt;/p&gt; &#xA; &lt;p&gt;Please read the &lt;a href=&#34;https://raw.githubusercontent.com/apache/fury/main/DISCLAIMER&#34;&gt;DISCLAIMER&lt;/a&gt; and a full explanation of &lt;a href=&#34;https://incubator.apache.org/policy/incubation.html&#34;&gt;&#34;incubating&#34;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multiple languages&lt;/strong&gt;: Java/Python/C++/Golang/JavaScript/Rust/Scala/TypeScript.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Zero-copy&lt;/strong&gt;: Cross-language out-of-band serialization inspired by &lt;a href=&#34;https://peps.python.org/pep-0574/&#34;&gt;pickle5&lt;/a&gt; and off-heap read/write.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;High performance&lt;/strong&gt;: A highly-extensible JIT framework to generate serializer code at runtime in an async multi-thread way to speed serialization, providing 20-170x speed up by: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;reduce memory access by inlining variables in generated code.&lt;/li&gt; &#xA;   &lt;li&gt;reduce virtual method invocation by inline call in generated code.&lt;/li&gt; &#xA;   &lt;li&gt;reduce conditional branching.&lt;/li&gt; &#xA;   &lt;li&gt;reduce hash lookup.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multiple binary protocols&lt;/strong&gt;: Object graph, row format, and so on.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In addition to cross-language serialization, Fury also features at:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Drop-in replace Java serialization frameworks such as JDK/Kryo/Hessian, but 100x faster at most, which can greatly improve the efficiency of high-performance RPC calls, data transfer, and object persistence.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;100% compatible&lt;/strong&gt; with JDK serialization API with much faster implementation: supporting JDK &lt;code&gt;writeObject&lt;/code&gt;/&lt;code&gt;readObject&lt;/code&gt;/&lt;code&gt;writeReplace&lt;/code&gt;/&lt;code&gt;readResolve&lt;/code&gt;/&lt;code&gt;readObjectNoData&lt;/code&gt;/&lt;code&gt;Externalizable&lt;/code&gt; API.&lt;/li&gt; &#xA; &lt;li&gt;Supports &lt;strong&gt;Java 8~21&lt;/strong&gt;, Java 17+ &lt;code&gt;record&lt;/code&gt; is supported too.&lt;/li&gt; &#xA; &lt;li&gt;Supports &lt;a href=&#34;https://raw.githubusercontent.com/apache/fury/main/docs/guide/graalvm_guide.md&#34;&gt;AOT compilation serialization&lt;/a&gt; for &lt;strong&gt;GraalVM native image&lt;/strong&gt;, and no reflection/serialization json config are needed.&lt;/li&gt; &#xA; &lt;li&gt;Supports shared and circular reference object serialization for golang.&lt;/li&gt; &#xA; &lt;li&gt;Supports &lt;a href=&#34;https://raw.githubusercontent.com/apache/fury/main/docs/guide/scala_guide.md&#34;&gt;scala serialization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Supports automatic object serialization for golang.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Protocols&lt;/h2&gt; &#xA;&lt;p&gt;Fury designed and implemented multiple binary protocols for different scenarios:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/fury/main/docs/specification/xlang_serialization_spec.md&#34;&gt;xlang serialization format&lt;/a&gt;&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Cross-language serialize any object automatically, no need for IDL definition, schema compilation and object to/from protocol conversion.&lt;/li&gt; &#xA;   &lt;li&gt;Support optional shared reference and circular reference, no duplicate data or recursion error.&lt;/li&gt; &#xA;   &lt;li&gt;Support object polymorphism.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/fury/main/docs/specification/java_serialization_spec.md&#34;&gt;Java serialization format&lt;/a&gt;&lt;/strong&gt;: Highly-optimized and drop-in replacement for Java serialization.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/fury/main/docs/specification/row_format_spec.md&#34;&gt;Row format format&lt;/a&gt;&lt;/strong&gt;: A cache-friendly binary random access format, supports skipping serialization and partial serialization, and can convert to column-format automatically.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;New protocols can be easily added based on Fury existing buffer, encoding, meta, codegen and other capabilities. All of those share the same codebase, and the optimization for one protocol can be reused by another protocol.&lt;/p&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;Different serialization frameworks are suitable for different scenarios, and benchmark results here are for reference only.&lt;/p&gt; &#xA;&lt;p&gt;If you need to benchmark for your specific scenario, make sure all serialization frameworks are appropriately configured for that scenario.&lt;/p&gt; &#xA;&lt;p&gt;Dynamic serialization frameworks support polymorphism and references, but they often come with a higher cost compared to static serialization frameworks, unless they utilize JIT techniques like Fury does. To ensure accurate benchmark statistics, it is advisable to &lt;strong&gt;warm up&lt;/strong&gt; the system before collecting data due to Fury&#39;s runtime code generation.&lt;/p&gt; &#xA;&lt;h3&gt;Java Serialization&lt;/h3&gt; &#xA;&lt;p&gt;In these charts below, titles containing &#34;compatible&#34; represent schema compatible mode: type forward/backward compatibility is enabled; while titles without &#34;compatible&#34; represent schema consistent mode: class schema must be the same between serialization and deserialization.&lt;/p&gt; &#xA;&lt;p&gt;Where &lt;code&gt;Struct&lt;/code&gt; is a class with &lt;a href=&#34;https://github.com/apache/fury/tree/main/docs/benchmarks#Struct&#34;&gt;100 primitive fields&lt;/a&gt;, &lt;code&gt;MediaContent&lt;/code&gt; is a class from &lt;a href=&#34;https://github.com/eishay/jvm-serializers/raw/master/tpc/src/data/media/MediaContent.java&#34;&gt;jvm-serializers&lt;/a&gt;, and &lt;code&gt;Sample&lt;/code&gt; is a class from &lt;a href=&#34;https://github.com/EsotericSoftware/kryo/raw/master/benchmarks/src/main/java/com/esotericsoftware/kryo/benchmarks/data/Sample.java&#34;&gt;kryo benchmark&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;24%&#34; alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/apache/fury/main/docs/benchmarks/compatible/bench_serialize_compatible_STRUCT_to_directBuffer_tps.png&#34;&gt; &lt;img width=&#34;24%&#34; alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/apache/fury/main/docs/benchmarks/compatible/bench_serialize_compatible_MEDIA_CONTENT_to_array_tps.png&#34;&gt; &lt;img width=&#34;24%&#34; alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/apache/fury/main/docs/benchmarks/serialization/bench_serialize_MEDIA_CONTENT_to_array_tps.png&#34;&gt; &lt;img width=&#34;24%&#34; alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/apache/fury/main/docs/benchmarks/serialization/bench_serialize_SAMPLE_to_array_tps.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;24%&#34; alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/apache/fury/main/docs/benchmarks/compatible/bench_deserialize_compatible_STRUCT_from_directBuffer_tps.png&#34;&gt; &lt;img width=&#34;24%&#34; alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/apache/fury/main/docs/benchmarks/compatible/bench_deserialize_compatible_MEDIA_CONTENT_from_array_tps.png&#34;&gt; &lt;img width=&#34;24%&#34; alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/apache/fury/main/docs/benchmarks/deserialization/bench_deserialize_MEDIA_CONTENT_from_array_tps.png&#34;&gt; &lt;img width=&#34;24%&#34; alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/apache/fury/main/docs/benchmarks/deserialization/bench_deserialize_SAMPLE_from_array_tps.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/apache/fury/tree/main/docs/benchmarks&#34;&gt;benchmarks&lt;/a&gt; for more benchmarks about type forward/backward compatibility, off-heap support, zero-copy serialization.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Java&lt;/h3&gt; &#xA;&lt;p&gt;Nightly snapshot:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;repositories&amp;gt;&#xA;  &amp;lt;repository&amp;gt;&#xA;    &amp;lt;id&amp;gt;apache&amp;lt;/id&amp;gt;&#xA;    &amp;lt;url&amp;gt;https://repository.apache.org/snapshots/&amp;lt;/url&amp;gt;&#xA;    &amp;lt;releases&amp;gt;&#xA;      &amp;lt;enabled&amp;gt;false&amp;lt;/enabled&amp;gt;&#xA;    &amp;lt;/releases&amp;gt;&#xA;    &amp;lt;snapshots&amp;gt;&#xA;      &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;&#xA;    &amp;lt;/snapshots&amp;gt;&#xA;  &amp;lt;/repository&amp;gt;&#xA;&amp;lt;/repositories&amp;gt;&#xA;&amp;lt;dependency&amp;gt;&#xA;  &amp;lt;groupId&amp;gt;org.apache.fury&amp;lt;/groupId&amp;gt;&#xA;  &amp;lt;artifactId&amp;gt;fury-core&amp;lt;/artifactId&amp;gt;&#xA;  &amp;lt;version&amp;gt;0.7.0-SNAPSHOT&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&amp;lt;!-- row/arrow format support --&amp;gt;&#xA;&amp;lt;!-- &amp;lt;dependency&amp;gt;&#xA;  &amp;lt;groupId&amp;gt;org.apache.fury&amp;lt;/groupId&amp;gt;&#xA;  &amp;lt;artifactId&amp;gt;fury-format&amp;lt;/artifactId&amp;gt;&#xA;  &amp;lt;version&amp;gt;0.7.0-SNAPSHOT&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt; --&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Release version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;  &amp;lt;groupId&amp;gt;org.apache.fury&amp;lt;/groupId&amp;gt;&#xA;  &amp;lt;artifactId&amp;gt;fury-core&amp;lt;/artifactId&amp;gt;&#xA;  &amp;lt;version&amp;gt;0.6.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&amp;lt;!-- row/arrow format support --&amp;gt;&#xA;&amp;lt;!-- &amp;lt;dependency&amp;gt;&#xA;  &amp;lt;groupId&amp;gt;org.apache.fury&amp;lt;/groupId&amp;gt;&#xA;  &amp;lt;artifactId&amp;gt;fury-format&amp;lt;/artifactId&amp;gt;&#xA;  &amp;lt;version&amp;gt;0.6.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt; --&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Scala&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sbt&#34;&gt;libraryDependencies += &#34;org.apache.fury&#34; % &#34;fury-core&#34; % &#34;0.6.0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Python&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install pyfury&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;JavaScript&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install @furyjs/fury&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Golang&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get github.com/apache/fury/go/fury&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Here we give a quick start about how to use Fury, see &lt;a href=&#34;https://raw.githubusercontent.com/apache/fury/main/docs/README.md&#34;&gt;user guide&lt;/a&gt; for more details about &lt;a href=&#34;https://raw.githubusercontent.com/apache/fury/main/docs/guide/java_serialization_guide.md&#34;&gt;java&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/apache/fury/main/docs/guide/xlang_serialization_guide.md&#34;&gt;cross language&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/apache/fury/main/docs/guide/row_format_guide.md&#34;&gt;row format&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Fury java object graph serialization&lt;/h3&gt; &#xA;&lt;p&gt;If you don&#39;t have cross-language requirements, using this mode will result in better performance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import org.apache.fury.*;&#xA;import org.apache.fury.config.*;&#xA;import java.util.*;&#xA;&#xA;public class Example {&#xA;  public static void main(String[] args) {&#xA;    SomeClass object = new SomeClass();&#xA;    // Note that Fury instances should be reused between&#xA;    // multiple serializations of different objects.&#xA;    {&#xA;      Fury fury = Fury.builder().withLanguage(Language.JAVA)&#xA;        .requireClassRegistration(true)&#xA;        .build();&#xA;      // Registering types can reduce class name serialization overhead, but not mandatory.&#xA;      // If class registration enabled, all custom types must be registered.&#xA;      fury.register(SomeClass.class);&#xA;      byte[] bytes = fury.serialize(object);&#xA;      System.out.println(fury.deserialize(bytes));&#xA;    }&#xA;    {&#xA;      ThreadSafeFury fury = Fury.builder().withLanguage(Language.JAVA)&#xA;        .requireClassRegistration(true)&#xA;        .buildThreadSafeFury();&#xA;      // Registering types can reduce class name serialization overhead, but not mandatory.&#xA;      // If class registration enabled, all custom types must be registered.&#xA;      fury.register(SomeClass.class);&#xA;      byte[] bytes = fury.serialize(object);&#xA;      System.out.println(fury.deserialize(bytes));&#xA;    }&#xA;    {&#xA;      ThreadSafeFury fury = new ThreadLocalFury(classLoader -&amp;gt; {&#xA;        Fury f = Fury.builder().withLanguage(Language.JAVA)&#xA;          .withClassLoader(classLoader).build();&#xA;        f.register(SomeClass.class);&#xA;        return f;&#xA;      });&#xA;      byte[] bytes = fury.serialize(object);&#xA;      System.out.println(fury.deserialize(bytes));&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cross-language object graph serialization&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Java&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import org.apache.fury.*;&#xA;import org.apache.fury.config.*;&#xA;import java.util.*;&#xA;&#xA;public class ReferenceExample {&#xA;  public static class SomeClass {&#xA;    SomeClass f1;&#xA;    Map&amp;lt;String, String&amp;gt; f2;&#xA;    Map&amp;lt;String, String&amp;gt; f3;&#xA;  }&#xA;&#xA;  public static Object createObject() {&#xA;    SomeClass obj = new SomeClass();&#xA;    obj.f1 = obj;&#xA;    obj.f2 = ofHashMap(&#34;k1&#34;, &#34;v1&#34;, &#34;k2&#34;, &#34;v2&#34;);&#xA;    obj.f3 = obj.f2;&#xA;    return obj;&#xA;  }&#xA;&#xA;  // mvn exec:java -Dexec.mainClass=&#34;org.apache.fury.examples.ReferenceExample&#34;&#xA;  public static void main(String[] args) {&#xA;    Fury fury = Fury.builder().withLanguage(Language.XLANG)&#xA;      .withRefTracking(true).build();&#xA;    fury.register(SomeClass.class, &#34;example.SomeClass&#34;);&#xA;    byte[] bytes = fury.serialize(createObject());&#xA;    // bytes can be data serialized by other languages.&#xA;    System.out.println(fury.deserialize(bytes));&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from typing import Dict&#xA;import pyfury&#xA;&#xA;class SomeClass:&#xA;    f1: &#34;SomeClass&#34;&#xA;    f2: Dict[str, str]&#xA;    f3: Dict[str, str]&#xA;&#xA;fury = pyfury.Fury(ref_tracking=True)&#xA;fury.register_class(SomeClass, type_tag=&#34;example.SomeClass&#34;)&#xA;obj = SomeClass()&#xA;obj.f2 = {&#34;k1&#34;: &#34;v1&#34;, &#34;k2&#34;: &#34;v2&#34;}&#xA;obj.f1, obj.f3 = obj, obj.f2&#xA;data = fury.serialize(obj)&#xA;# bytes can be data serialized by other languages.&#xA;print(fury.deserialize(data))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Golang&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import furygo &#34;github.com/apache/fury/go/fury&#34;&#xA;import &#34;fmt&#34;&#xA;&#xA;func main() {&#xA;&#x9;type SomeClass struct {&#xA;&#x9;&#x9;F1 *SomeClass&#xA;&#x9;&#x9;F2 map[string]string&#xA;&#x9;&#x9;F3 map[string]string&#xA;&#x9;}&#xA;&#x9;fury := furygo.NewFury(true)&#xA;&#x9;if err := fury.RegisterTagType(&#34;example.SomeClass&#34;, SomeClass{}); err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#x9;value := &amp;amp;SomeClass{F2: map[string]string{&#34;k1&#34;: &#34;v1&#34;, &#34;k2&#34;: &#34;v2&#34;}}&#xA;&#x9;value.F3 = value.F2&#xA;&#x9;value.F1 = value&#xA;&#x9;bytes, err := fury.Marshal(value)&#xA;&#x9;if err != nil {&#xA;&#x9;}&#xA;&#x9;var newValue interface{}&#xA;&#x9;// bytes can be data serialized by other languages.&#xA;&#x9;if err := fury.Unmarshal(bytes, &amp;amp;newValue); err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#x9;fmt.Println(newValue)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Row format&lt;/h3&gt; &#xA;&lt;h4&gt;Java&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Bar {&#xA;  String f1;&#xA;  List&amp;lt;Long&amp;gt; f2;&#xA;}&#xA;&#xA;public class Foo {&#xA;  int f1;&#xA;  List&amp;lt;Integer&amp;gt; f2;&#xA;  Map&amp;lt;String, Integer&amp;gt; f3;&#xA;  List&amp;lt;Bar&amp;gt; f4;&#xA;}&#xA;&#xA;RowEncoder&amp;lt;Foo&amp;gt; encoder = Encoders.bean(Foo.class);&#xA;Foo foo = new Foo();&#xA;foo.f1 = 10;&#xA;foo.f2 = IntStream.range(0, 1000000).boxed().collect(Collectors.toList());&#xA;foo.f3 = IntStream.range(0, 1000000).boxed().collect(Collectors.toMap(i -&amp;gt; &#34;k&#34;+i, i-&amp;gt;i));&#xA;List&amp;lt;Bar&amp;gt; bars = new ArrayList&amp;lt;&amp;gt;(1000000);&#xA;for (int i = 0; i &amp;lt; 1000000; i++) {&#xA;  Bar bar = new Bar();&#xA;  bar.f1 = &#34;s&#34;+i;&#xA;  bar.f2 = LongStream.range(0, 10).boxed().collect(Collectors.toList());&#xA;  bars.add(bar);&#xA;}&#xA;foo.f4 = bars;&#xA;// Can be zero-copy read by python&#xA;BinaryRow binaryRow = encoder.toRow(foo);&#xA;// can be data from python&#xA;Foo newFoo = encoder.fromRow(binaryRow);&#xA;// zero-copy read List&amp;lt;Integer&amp;gt; f2&#xA;BinaryArray binaryArray2 = binaryRow.getArray(1);&#xA;// zero-copy read List&amp;lt;Bar&amp;gt; f4&#xA;BinaryArray binaryArray4 = binaryRow.getArray(3);&#xA;// zero-copy read 11th element of `readList&amp;lt;Bar&amp;gt; f4`&#xA;BinaryRow barStruct = binaryArray4.getStruct(10);&#xA;&#xA;// zero-copy read 6th of f2 of 11th element of `readList&amp;lt;Bar&amp;gt; f4`&#xA;barStruct.getArray(1).getInt64(5);&#xA;RowEncoder&amp;lt;Bar&amp;gt; barEncoder = Encoders.bean(Bar.class);&#xA;// deserialize part of data.&#xA;Bar newBar = barEncoder.fromRow(barStruct);&#xA;Bar newBar2 = barEncoder.fromRow(binaryArray4.getStruct(20));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Python&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@dataclass&#xA;class Bar:&#xA;    f1: str&#xA;    f2: List[pa.int64]&#xA;@dataclass&#xA;class Foo:&#xA;    f1: pa.int32&#xA;    f2: List[pa.int32]&#xA;    f3: Dict[str, pa.int32]&#xA;    f4: List[Bar]&#xA;&#xA;encoder = pyfury.encoder(Foo)&#xA;foo = Foo(f1=10, f2=list(range(1000_000)),&#xA;         f3={f&#34;k{i}&#34;: i for i in range(1000_000)},&#xA;         f4=[Bar(f1=f&#34;s{i}&#34;, f2=list(range(10))) for i in range(1000_000)])&#xA;binary: bytes = encoder.to_row(foo).to_bytes()&#xA;foo_row = pyfury.RowData(encoder.schema, binary)&#xA;print(foo_row.f2[100000], foo_row.f4[100000].f1, foo_row.f4[200000].f2[5])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;h3&gt;Schema Compatibility&lt;/h3&gt; &#xA;&lt;p&gt;Fury java object graph serialization supports class schema forward/backward compatibility. The serialization peer and deserialization peer can add/delete fields independently.&lt;/p&gt; &#xA;&lt;p&gt;We plan to add the schema compatibility support of cross-language serialization after &lt;a href=&#34;https://github.com/apache/fury/issues/203&#34;&gt;meta compression&lt;/a&gt; is finished.&lt;/p&gt; &#xA;&lt;h3&gt;Binary Compatibility&lt;/h3&gt; &#xA;&lt;p&gt;We are still improving our protocols, thus binary compatibility is not guaranteed between Fury major releases for now. However, it is guaranteed between minor versions. Please &lt;code&gt;versioning&lt;/code&gt; your data by Fury major version if you will upgrade Fury in the future, see &lt;a href=&#34;https://github.com/apache/fury/raw/main/docs/guide/java_object_graph_guide.md#upgrade-fury&#34;&gt;how to upgrade fury&lt;/a&gt; for further details.&lt;/p&gt; &#xA;&lt;p&gt;Binary compatibility will be guaranteed when Fury 1.0 is released.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;Static serialization is relatively secure. But dynamic serialization such as Fury java/python native serialization supports deserializing unregistered types, which provides more dynamics and flexibility, but also introduce security risks.&lt;/p&gt; &#xA;&lt;p&gt;For example, the deserialization may invoke &lt;code&gt;init&lt;/code&gt; constructor or &lt;code&gt;equals&lt;/code&gt;/&lt;code&gt;hashCode&lt;/code&gt; method, if the method body contains malicious code, the system will be at risk.&lt;/p&gt; &#xA;&lt;p&gt;Fury provides a class registration option that is enabled by default for such protocols, allowing only deserialization of trusted registered types or built-in types. &lt;strong&gt;Do not disable class registration unless you can ensure your environment is secure&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If this option is disabled, you are responsible for serialization security. You can configure &lt;code&gt;org.apache.fury.resolver.ClassChecker&lt;/code&gt; by &lt;code&gt;ClassResolver#setClassChecker&lt;/code&gt; to control which classes are allowed for serialization.&lt;/p&gt; &#xA;&lt;p&gt;To report security vulnerabilities found in Fury, please follow the &lt;a href=&#34;https://apache.org/security/#reporting-a-vulnerability&#34;&gt;ASF vulnerability reporting process&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to Build&lt;/h2&gt; &#xA;&lt;p&gt;Please read the &lt;a href=&#34;https://raw.githubusercontent.com/apache/fury/main/docs/guide/DEVELOPMENT.md&#34;&gt;BUILD&lt;/a&gt; guide for instructions on how to build.&lt;/p&gt; &#xA;&lt;h2&gt;How to Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Please read the &lt;a href=&#34;https://raw.githubusercontent.com/apache/fury/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; guide for instructions on how to contribute.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/apache/fury/main/LICENSE&#34;&gt;Apache License, Version 2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>