<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-09T01:32:41Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>MuntashirAkon/AppManager</title>
    <updated>2022-08-09T01:32:41Z</updated>
    <id>tag:github.com,2022-08-09:/MuntashirAkon/AppManager</id>
    <link href="https://github.com/MuntashirAkon/AppManager" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A full-featured package manager and viewer for Android&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MuntashirAkon/AppManager/master/docs/raw/images/icon.png&#34; alt=&#34;App Manager Logo&#34; height=&#34;150dp&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;App Manager&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://muntashirakon.github.io/AppManager&#34;&gt;Docs&lt;/a&gt; · &lt;a href=&#34;https://github.com/MuntashirAkon/AppManager/releases&#34;&gt;Releases&lt;/a&gt; · &lt;a href=&#34;https://t.me/AppManagerChannel&#34;&gt;Telegram Channel&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;General features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fully reproducible, copylefted libre software (GPLv3+)&lt;/li&gt; &#xA; &lt;li&gt;Material 3 with dynamic colours&lt;/li&gt; &#xA; &lt;li&gt;Displays as much information as possible in the main page&lt;/li&gt; &#xA; &lt;li&gt;Lists activities, broadcast receivers, services, providers, app ops, permissions, signatures, shared libraries, etc. of an application&lt;/li&gt; &#xA; &lt;li&gt;Launch activities and services&lt;/li&gt; &#xA; &lt;li&gt;Create shortcuts of activities&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://muntashirakon.github.io/AppManager/#sec:interceptor-page&#34;&gt;Intercept activities&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Scan for trackers and libraries in apps and list (all or only) tracking classes (and their code dump)&lt;/li&gt; &#xA; &lt;li&gt;View/save the manifest of an app&lt;/li&gt; &#xA; &lt;li&gt;Display app usage, data usage (mobile and Wi-Fi), and app storage info (requires “Usage Access” permission)&lt;/li&gt; &#xA; &lt;li&gt;Install/uninstall APK files (including APKS, APKM and XAPK with OBB files)&lt;/li&gt; &#xA; &lt;li&gt;Share APK files&lt;/li&gt; &#xA; &lt;li&gt;Back up/restore APK files&lt;/li&gt; &#xA; &lt;li&gt;Batch operations&lt;/li&gt; &#xA; &lt;li&gt;Single-click operations&lt;/li&gt; &#xA; &lt;li&gt;Logcat viewer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://muntashirakon.github.io/AppManager/#sec:profiles-page&#34;&gt;Profiles&lt;/a&gt; (including presets for quick debloating)&lt;/li&gt; &#xA; &lt;li&gt;Open an app in Aurora Store or in your favourite F-Droid client directly from App Manager&lt;/li&gt; &#xA; &lt;li&gt;Sign APK files with custom signatures before installing&lt;/li&gt; &#xA; &lt;li&gt;Backup encryption: OpenPGP via OpenKeychain, RSA (hybrid encryption with AES) and AES.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Root/ADB-only features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Revoke runtime (AKA dangerous) and development permissions&lt;/li&gt; &#xA; &lt;li&gt;Change the mode of an app op&lt;/li&gt; &#xA; &lt;li&gt;Display/kill/force-stop running apps or processes&lt;/li&gt; &#xA; &lt;li&gt;Clear app data or app cache&lt;/li&gt; &#xA; &lt;li&gt;View/change net policy&lt;/li&gt; &#xA; &lt;li&gt;Control battery optimization&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Root-only features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Block any activities, broadcast receivers, services, or providers of an app with native import/export as well as Watt and Blocker import support&lt;/li&gt; &#xA; &lt;li&gt;View/edit/delete shared preferences of any app&lt;/li&gt; &#xA; &lt;li&gt;Back up/restore apps with data, rules and extras (such as permissions, battery optimization, SSAID, etc.)&lt;/li&gt; &#xA; &lt;li&gt;View system configurations including blacklisted or whitelisted apps, permissions, etc.&lt;/li&gt; &#xA; &lt;li&gt;View/change SSAID&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;…and many more! This single app combines the features of 5 or 6 apps any tech-savvy person needs!&lt;/p&gt; &#xA;&lt;h3&gt;Upcoming features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;APK editing&lt;/li&gt; &#xA; &lt;li&gt;Routine operations&lt;/li&gt; &#xA; &lt;li&gt;Backup encryption: Elliptive-curve cryptography (ECC)&lt;/li&gt; &#xA; &lt;li&gt;Finder: Find app components, permissions etc. in all apps&lt;/li&gt; &#xA; &lt;li&gt;Enable/disable app actions such as launch on boot&lt;/li&gt; &#xA; &lt;li&gt;Panic responder for Ripple&lt;/li&gt; &#xA; &lt;li&gt;Crash monitor&lt;/li&gt; &#xA; &lt;li&gt;Systemless disabling/uninstalling of the system apps&lt;/li&gt; &#xA; &lt;li&gt;Import/export app list&lt;/li&gt; &#xA; &lt;li&gt;Terminal emulator&lt;/li&gt; &#xA; &lt;li&gt;Database viewer and editor, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://f-droid.org/packages/io.github.muntashirakon.AppManager&#34;&gt;&lt;img src=&#34;https://fdroid.gitlab.io/artwork/badge/get-it-on.png&#34; alt=&#34;Get it on F-Droid&#34; height=&#34;80&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Translations&lt;/h2&gt; &#xA;&lt;p&gt;Help translate &lt;a href=&#34;https://hosted.weblate.org/engage/app-manager/&#34;&gt;the app strings&lt;/a&gt; and &lt;a href=&#34;https://hosted.weblate.org/projects/app-manager/docs/&#34;&gt;the docs&lt;/a&gt; at Hosted Weblate.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hosted.weblate.org/engage/app-manager/&#34;&gt;&lt;img src=&#34;https://hosted.weblate.org/widgets/app-manager/-/multi-auto.svg?sanitize=true&#34; alt=&#34;Translation status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Mirrors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitlab.com/muntashir/AppManager&#34;&gt;GitLab&lt;/a&gt; · &lt;a href=&#34;https://0xacab.org/muntashir/AppManager&#34;&gt;Riseup&lt;/a&gt; · &lt;a href=&#34;https://codeberg.org/muntashir/AppManager&#34;&gt;Codeberg&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MuntashirAkon/AppManager/master/fastlane/metadata/android/en-US/images/phoneScreenshots/1.png&#34; height=&#34;500dp&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MuntashirAkon/AppManager/master/fastlane/metadata/android/en-US/images/phoneScreenshots/2.png&#34; height=&#34;500dp&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MuntashirAkon/AppManager/master/fastlane/metadata/android/en-US/images/phoneScreenshots/3.png&#34; height=&#34;500dp&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MuntashirAkon/AppManager/master/fastlane/metadata/android/en-US/images/phoneScreenshots/4.png&#34; height=&#34;500dp&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MuntashirAkon/AppManager/master/fastlane/metadata/android/en-US/images/phoneScreenshots/5.png&#34; height=&#34;500dp&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MuntashirAkon/AppManager/master/fastlane/metadata/android/en-US/images/phoneScreenshots/6.png&#34; height=&#34;500dp&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MuntashirAkon/AppManager/master/fastlane/metadata/android/en-US/images/phoneScreenshots/7.png&#34; height=&#34;500dp&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MuntashirAkon/AppManager/master/fastlane/metadata/android/en-US/images/phoneScreenshots/8.png&#34; height=&#34;500dp&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MuntashirAkon/AppManager/master/fastlane/metadata/android/en-US/images/phoneScreenshots/9.png&#34; height=&#34;500dp&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Build Instructions&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/MuntashirAkon/AppManager/master/BUILDING.rst&#34;&gt;BUILDING.rst&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/MuntashirAkon/AppManager/master/CONTRIBUTING.rst&#34;&gt;CONTRIBUTING.rst&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Donation and Funding&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Donation or purchasing is not a requirement in order to use app Manager.&lt;/em&gt; While App Manager does not support any purchases, donations can be sent to the owner of App Manager through Open Source Collective.&lt;/p&gt; &#xA;&lt;p&gt;Open Source Collective is a fiscal host in the Open Collective platform which helps the open source projects manage their finances. At present, it supports payments through bank accounts, PayPal, credit or debit cards and cryptocurrencies.&lt;/p&gt; &#xA;&lt;p&gt;Link: &lt;a href=&#34;https://opencollective.com/muntashir&#34;&gt;https://opencollective.com/muntashir&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;By sending donations, the senders agree that they shall not use the donations as a leverage to prioritise their requested features. Feature requests do not require any bounties or donations, and they are prioritised in accordance with the preferences of the owner.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;App Manager accepts any offers of funding/grants.&lt;/strong&gt; Representatives of the interested organization can contact the owner directly at muntashirakon [at] riseup [dot] net (FINGERPRINT: &lt;code&gt;7bad37c2981e41f8f6abea7f58f0b4f26c346fce&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Credits and Libraries&lt;/h2&gt; &#xA;&lt;p&gt;A list of credits and libraries are available in the &lt;strong&gt;About&lt;/strong&gt; section of the app.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>DV8FromTheWorld/JDA</title>
    <updated>2022-08-09T01:32:41Z</updated>
    <id>tag:github.com,2022-08-09:/DV8FromTheWorld/JDA</id>
    <link href="https://github.com/DV8FromTheWorld/JDA" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Java wrapper for the popular chat &amp; VOIP service: Discord https://discord.com&lt;/p&gt;&lt;hr&gt;&lt;img align=&#34;right&#34; src=&#34;https://github.com/DV8FromTheWorld/JDA/raw/assets/assets/readme/logo.png?raw=true&#34; height=&#34;200&#34; width=&#34;200&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DV8FromTheWorld/JDA/master/#download&#34;&gt; &lt;img src=&#34;https://img.shields.io/maven-central/v/net.dv8tion/JDA?color=blue&#34; alt=&#34;maven-central&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://jitpack.io/#DV8FromtheWorld/JDA&#34;&gt; &lt;img src=&#34;https://img.shields.io/jitpack/v/github/DV8FromTheWorld/JDA?label=Snapshots&amp;amp;color=blue&#34; alt=&#34;jitpack&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://ci.dv8tion.net/job/JDA5&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Download-Jenkins-purple.svg?sanitize=true&#34; alt=&#34;jenkins-shield&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/DV8FromTheWorld/JDA/tree/master/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-white.svg?sanitize=true&#34; alt=&#34;license-shield&#34;&gt; &lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/0hMr4ce0tIl3SLv5&#34;&gt; &lt;img src=&#34;https://discord.com/api/guilds/125227483518861312/widget.png&#34; alt=&#34;discord-shield&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/DV8FromTheWorld/JDA/wiki/10)-FAQ&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Wiki-FAQ-blue.svg?sanitize=true&#34; alt=&#34;faq-shield&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/DV8FromTheWorld/JDA/wiki/19)-Troubleshooting&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Wiki-Troubleshooting-darkgreen.svg?sanitize=true&#34; alt=&#34;troubleshooting-shield&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/DV8FromTheWorld/JDA/wiki/0)-Migrating-to-V4&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Wiki-Migrating%20from%20V3-darkgreen.svg?sanitize=true&#34; alt=&#34;migration-shield&#34;&gt; &lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;JDA (Java Discord API)&lt;/h1&gt; &#xA;&lt;p&gt;JDA strives to provide a clean and full wrapping of the Discord REST api and its Websocket-Events for Java. This library is a helpful tool that provides the functionality to create a discord bot in java.&lt;/p&gt; &#xA;&lt;h2&gt;Summary&lt;/h2&gt; &#xA;&lt;p&gt;Due to official statements made by the Discord developers we will no longer support unofficial features. These features are undocumented API endpoints or protocols that are not available to bot-accounts.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Please see the &lt;a href=&#34;https://discord.com/developers/docs/reference&#34;&gt;Discord docs&lt;/a&gt; for more information about bot accounts.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DV8FromTheWorld/JDA/master/#creating-the-jda-object&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DV8FromTheWorld/JDA/master/#sharding-a-bot&#34;&gt;Sharding&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DV8FromTheWorld/JDA/master/#entity-lifetimes&#34;&gt;Entity Lifetimes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DV8FromTheWorld/JDA/master/#download&#34;&gt;Download&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DV8FromTheWorld/JDA/master/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DV8FromTheWorld/JDA/master/#getting-help&#34;&gt;Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DV8FromTheWorld/JDA/master/#third-party-recommendations&#34;&gt;Extensions And Plugins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DV8FromTheWorld/JDA/master/#contributing-to-jda&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DV8FromTheWorld/JDA/master/#dependencies&#34;&gt;Dependencies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DV8FromTheWorld/JDA/master/#related-projects&#34;&gt;Other Libraries&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;UserBots and SelfBots&lt;/h2&gt; &#xA;&lt;p&gt;Discord is currently prohibiting creation and usage of automated client accounts (AccountType.CLIENT). We have officially dropped support for client login as of version &lt;strong&gt;4.2.0&lt;/strong&gt;! Note that JDA is not a good tool to build a custom discord client as it loads all servers/guilds on startup unlike a client which does this via lazy loading instead. If you need a bot, use a bot account from the &lt;a href=&#34;https://discord.com/developers/applications&#34;&gt;Application Dashboard&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://support.discord.com/hc/en-us/articles/115002192352-Automated-user-accounts-self-bots-&#34;&gt;Read More&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Creating the JDA Object&lt;/h2&gt; &#xA;&lt;p&gt;Creating the JDA Object is done via the JDABuilder class. After setting the token and other options via setters, the JDA Object is then created by calling the &lt;code&gt;build()&lt;/code&gt; method. When &lt;code&gt;build()&lt;/code&gt; returns, JDA might not have finished starting up. However, you can use &lt;code&gt;awaitReady()&lt;/code&gt; on the JDA object to ensure that the entire cache is loaded before proceeding. Note that this method is blocking and will cause the thread to sleep until startup has completed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;JDA jda = JDABuilder.createDefault(&#34;token&#34;).build();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;Both the &lt;code&gt;JDABuilder&lt;/code&gt; and the &lt;code&gt;DefaultShardManagerBuilder&lt;/code&gt; allow a set of configurations to improve the experience.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static void main(String[] args) {&#xA;    JDABuilder builder = JDABuilder.createDefault(args[0]);&#xA;    &#xA;    // Disable parts of the cache&#xA;    builder.disableCache(CacheFlag.MEMBER_OVERRIDES, CacheFlag.VOICE_STATE);&#xA;    // Enable the bulk delete event&#xA;    builder.setBulkDeleteSplittingEnabled(false);&#xA;    // Disable compression (not recommended)&#xA;    builder.setCompression(Compression.NONE);&#xA;    // Set activity (like &#34;playing Something&#34;)&#xA;    builder.setActivity(Activity.watching(&#34;TV&#34;));&#xA;    &#xA;    builder.build();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;See &lt;a href=&#34;https://ci.dv8tion.net/job/JDA5/javadoc/net/dv8tion/jda/api/JDABuilder.html&#34;&gt;JDABuilder&lt;/a&gt; and &lt;a href=&#34;https://ci.dv8tion.net/job/JDA5/javadoc/net/dv8tion/jda/api/sharding/DefaultShardManagerBuilder.html&#34;&gt;DefaultShardManagerBuilder&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You can configure the memory usage by changing enabled &lt;code&gt;CacheFlags&lt;/code&gt; on the &lt;code&gt;JDABuilder&lt;/code&gt;. Additionally, you can change the handling of member/user cache by setting either a &lt;code&gt;ChunkingFilter&lt;/code&gt;, disabling &lt;strong&gt;intents&lt;/strong&gt;, or changing the &lt;strong&gt;member cache policy&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public void configureMemoryUsage(JDABuilder builder) {&#xA;    // Disable cache for member activities (streaming/games/spotify)&#xA;    builder.disableCache(CacheFlag.ACTIVITY);&#xA;&#xA;    // Only cache members who are either in a voice channel or owner of the guild&#xA;    builder.setMemberCachePolicy(MemberCachePolicy.VOICE.or(MemberCachePolicy.OWNER));&#xA;&#xA;    // Disable member chunking on startup&#xA;    builder.setChunkingFilter(ChunkingFilter.NONE);&#xA;&#xA;    // Disable presence updates and typing events&#xA;    builder.disableIntents(GatewayIntent.GUILD_PRESENCE, GatewayIntent.GUILD_MESSAGE_TYPING);&#xA;&#xA;    // Consider guilds with more than 50 members as &#34;large&#34;. &#xA;    // Large guilds will only provide online members in their setup and thus reduce bandwidth if chunking is disabled.&#xA;    builder.setLargeThreshold(50);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Listening to Events&lt;/h3&gt; &#xA;&lt;p&gt;The event system in JDA is configured through a hierarchy of classes/interfaces. We offer two implementations for the &lt;code&gt;IEventManager&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;InterfacedEventManager&lt;/strong&gt; which uses an &lt;code&gt;EventListener&lt;/code&gt; interface and the &lt;code&gt;ListenerAdapter&lt;/code&gt; abstract class&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AnnotatedEventManager&lt;/strong&gt; which uses the &lt;code&gt;@SubscribeEvent&lt;/code&gt; annotation that can be applied to methods&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By default the &lt;strong&gt;InterfacedEventManager&lt;/strong&gt; is used. Since you can create your own implementation of &lt;code&gt;IEventManager&lt;/code&gt; this is a very versatile and configurable system. If the aforementioned implementations don&#39;t suit your use-case you can simply create a custom implementation and configure it on the &lt;code&gt;JDABuilder&lt;/code&gt; with &lt;code&gt;setEventManager(...)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Examples:&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Using EventListener&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class ReadyListener implements EventListener&#xA;{&#xA;    public static void main(String[] args)&#xA;            throws LoginException, InterruptedException&#xA;    {&#xA;        // Note: It is important to register your ReadyListener before building&#xA;        JDA jda = JDABuilder.createDefault(&#34;token&#34;)&#xA;            .addEventListeners(new ReadyListener())&#xA;            .build();&#xA;&#xA;        // optionally block until JDA is ready&#xA;        jda.awaitReady();&#xA;    }&#xA;&#xA;    @Override&#xA;    public void onEvent(GenericEvent event)&#xA;    {&#xA;        if (event instanceof ReadyEvent)&#xA;            System.out.println(&#34;API is ready!&#34;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Using ListenerAdapter&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class MessageListener extends ListenerAdapter&#xA;{&#xA;    public static void main(String[] args)&#xA;            throws LoginException&#xA;    {&#xA;        JDA jda = JDABuilder.createDefault(&#34;token&#34;)&#xA;                .enableIntents(GatewayIntent.MESSAGE_CONTENT) // enables explicit access to message.getContentDisplay()&#xA;                .build();&#xA;        //You can also add event listeners to the already built JDA instance&#xA;        // Note that some events may not be received if the listener is added after calling build()&#xA;        // This includes events such as the ReadyEvent&#xA;        jda.addEventListener(new MessageListener());&#xA;    }&#xA;&#xA;    @Override&#xA;    public void onMessageReceived(MessageReceivedEvent event)&#xA;    {&#xA;        if (event.isFromType(ChannelType.PRIVATE))&#xA;        {&#xA;            System.out.printf(&#34;[PM] %s: %s\n&#34;, event.getAuthor().getName(),&#xA;                                    event.getMessage().getContentDisplay());&#xA;        }&#xA;        else&#xA;        {&#xA;            System.out.printf(&#34;[%s][%s] %s: %s\n&#34;, event.getGuild().getName(),&#xA;                        event.getTextChannel().getName(), event.getMember().getEffectiveName(),&#xA;                        event.getMessage().getContentDisplay());&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Ping-Pong Bot&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Bot extends ListenerAdapter&#xA;{&#xA;    public static void main(String[] args) throws LoginException&#xA;    {&#xA;        if (args.length &amp;lt; 1) {&#xA;            System.out.println(&#34;You have to provide a token as first argument!&#34;);&#xA;            System.exit(1);&#xA;        }&#xA;        // args[0] should be the token&#xA;        // We only need 3 intents in this bot. We only respond to messages in guilds and private channels.&#xA;        // All other events will be disabled.&#xA;        JDABuilder.createLight(args[0], GatewayIntent.GUILD_MESSAGES, GatewayIntent.DIRECT_MESSAGES, GatewayIntent.MESSAGE_CONTENT)&#xA;            .addEventListeners(new Bot())&#xA;            .setActivity(Activity.playing(&#34;Type !ping&#34;))&#xA;            .build();&#xA;    }&#xA;    &#xA;    @Override&#xA;    public void onMessageReceived(MessageReceivedEvent event)&#xA;    {&#xA;        Message msg = event.getMessage();&#xA;        if (msg.getContentRaw().equals(&#34;!ping&#34;))&#xA;        {&#xA;            MessageChannel channel = event.getChannel();&#xA;            long time = System.currentTimeMillis();&#xA;            channel.sendMessage(&#34;Pong!&#34;) /* =&amp;gt; RestAction&amp;lt;Message&amp;gt; */&#xA;                   .queue(response /* =&amp;gt; Message */ -&amp;gt; {&#xA;                       response.editMessageFormat(&#34;Pong: %d ms&#34;, System.currentTimeMillis() - time).queue();&#xA;                   });&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Slash-Commands&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Bot extends ListenerAdapter&#xA;{&#xA;    public static void main(String[] args) throws LoginException&#xA;    {&#xA;        if (args.length &amp;lt; 1) {&#xA;            System.out.println(&#34;You have to provide a token as first argument!&#34;);&#xA;            System.exit(1);&#xA;        }&#xA;        // args[0] should be the token&#xA;        // We don&#39;t need any intents for this bot. Slash commands work without any intents!&#xA;        JDA jda = JDABuilder.createLight(args[0], Collections.emptyList())&#xA;            .addEventListeners(new Bot())&#xA;            .setActivity(Activity.playing(&#34;Type /ping&#34;))&#xA;            .build();&#xA;&#xA;        jda.upsertCommand(&#34;ping&#34;, &#34;Calculate ping of the bot&#34;).queue(); // This can take up to 1 hour to show up in the client&#xA;    }&#xA;    &#xA;    @Override&#xA;    public void onSlashCommandInteraction(SlashCommandInteractionEvent event)&#xA;    {&#xA;        if (!event.getName().equals(&#34;ping&#34;)) return; // make sure we handle the right command&#xA;        long time = System.currentTimeMillis();&#xA;        event.reply(&#34;Pong!&#34;).setEphemeral(true) // reply or acknowledge&#xA;             .flatMap(v -&amp;gt;&#xA;                 event.getHook().editOriginalFormat(&#34;Pong: %d ms&#34;, System.currentTimeMillis() - time) // then edit original&#xA;             ).queue(); // Queue both reply and edit&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;RestAction&lt;/h3&gt; &#xA;&lt;p&gt;Through &lt;a href=&#34;https://ci.dv8tion.net/job/JDA5/javadoc/net/dv8tion/jda/api/requests/RestAction.html&#34;&gt;RestAction&lt;/a&gt; we provide request handling with&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ci.dv8tion.net/job/JDA5/javadoc/net/dv8tion/jda/api/requests/RestAction.html#queue%28java.util.function.Consumer%29&#34;&gt;callbacks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ci.dv8tion.net/job/JDA5/javadoc/net/dv8tion/jda/api/requests/RestAction.html#submit%28%29&#34;&gt;promises&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;and &lt;a href=&#34;https://ci.dv8tion.net/job/JDA5/javadoc/net/dv8tion/jda/api/requests/RestAction.html#complete%28%29&#34;&gt;sync&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;and it is up to the user to decide which pattern to utilize. It can be combined with reactive libraries such as &lt;a href=&#34;https://github.com/reactor/reactor-core&#34;&gt;reactor-core&lt;/a&gt; due to being lazy.&lt;/p&gt; &#xA;&lt;p&gt;The RestAction interface also supports a number of operators to avoid callback hell:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ci.dv8tion.net/job/JDA5/javadoc/net/dv8tion/jda/api/requests/RestAction.html#map%28java.util.function.Function%29&#34;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt; Convert the result of the &lt;code&gt;RestAction&lt;/code&gt; to a different value&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ci.dv8tion.net/job/JDA5/javadoc/net/dv8tion/jda/api/requests/RestAction.html#flatMap%28java.util.function.Function%29&#34;&gt;&lt;code&gt;flatMap&lt;/code&gt;&lt;/a&gt; Chain another &lt;code&gt;RestAction&lt;/code&gt; on the result&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ci.dv8tion.net/job/JDA5/javadoc/net/dv8tion/jda/api/requests/RestAction.html#delay%28java.time.Duration%29&#34;&gt;&lt;code&gt;delay&lt;/code&gt;&lt;/a&gt; Delay the element of the previous step&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public RestAction&amp;lt;Void&amp;gt; selfDestruct(MessageChannel channel, String content) {&#xA;    return channel.sendMessage(&#34;The following message will destroy itself in 1 minute!&#34;)&#xA;        .delay(10, SECONDS, scheduler) // edit 10 seconds later&#xA;        .flatMap((it) -&amp;gt; it.editMessage(content))&#xA;        .delay(1, MINUTES, scheduler) // delete 1 minute later&#xA;        .flatMap(Message::delete);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;More Examples&lt;/h3&gt; &#xA;&lt;p&gt;We provide a small set of Examples in the &lt;a href=&#34;https://github.com/DV8FromTheWorld/JDA/tree/master/src/examples/java&#34;&gt;Example Directory&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!--&#xA;TODO: Find good examples&#xA;- [JDA Butler](https://github.com/Almighty-Alpaca/JDA-Butler)&#xA;&#xA;[And many more!](https://github.com/search?q=JDA+discord+bot&amp;type=Repositories&amp;utf8=%E2%9C%93)&#xA;--&gt; &#xA;&lt;h2&gt;Sharding a Bot&lt;/h2&gt; &#xA;&lt;p&gt;Discord allows Bot-accounts to share load across sessions by limiting them to a fraction of the total connected Guilds/Servers of the bot. &lt;br&gt;This can be done using &lt;strong&gt;sharding&lt;/strong&gt; which will limit JDA to only a certain amount of Guilds/Servers including events and entities. Sharding will limit the amount of Guilds/Channels/Users visible to the JDA session so it is recommended to have some kind of elevated management to access information of other shards.&lt;/p&gt; &#xA;&lt;p&gt;To use sharding in JDA you will need to use &lt;code&gt;JDABuilder.useSharding(int shardId, int shardTotal)&lt;/code&gt;. The &lt;strong&gt;shardId&lt;/strong&gt; is 0-based which means the first shard has the ID 0. The &lt;strong&gt;shardTotal&lt;/strong&gt; is the total amount of shards (not 0-based) which can be seen similar to the length of an array, the last shard has the ID of &lt;code&gt;shardTotal - 1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://ci.dv8tion.net/job/JDA5/javadoc/net/dv8tion/jda/api/utils/SessionController.html&#34;&gt;&lt;code&gt;SessionController&lt;/code&gt;&lt;/a&gt; is a tool of the JDABuilder that allows to control state and behaviour between shards (sessions). When using multiple builders to build shards you have to create one instance of this controller and add the same instance to each builder: &lt;code&gt;builder.setSessionController(controller)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Since version &lt;strong&gt;3.4.0&lt;/strong&gt; JDA provides a &lt;code&gt;ShardManager&lt;/code&gt; which automates this building process.&lt;/p&gt; &#xA;&lt;h3&gt;Example Sharding - Using JDABuilder&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static void main(String[] args) throws Exception&#xA;{&#xA;    JDABuilder shardBuilder = JDABuilder.createDefault(args[0]);&#xA;    //register your listeners here using shardBuilder.addEventListeners(...)&#xA;    shardBuilder.addEventListeners(new MessageListener());&#xA;    for (int i = 0; i &amp;lt; 10; i++)&#xA;    {&#xA;        shardBuilder.useSharding(i, 10)&#xA;                    .build();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;When the &lt;code&gt;useSharding&lt;/code&gt; method is invoked for the first time, the builder automatically sets a SessionController internally (if none is present)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Example Sharding - Using DefaultShardManager&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static void main(String[] args) throws Exception&#xA;{&#xA;    DefaultShardManagerBuilder builder = DefaultShardManagerBuilder.createDefault(args[0]);&#xA;    builder.addEventListeners(new MessageListener());&#xA;    builder.build();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Entity Lifetimes&lt;/h2&gt; &#xA;&lt;p&gt;An &lt;strong&gt;Entity&lt;/strong&gt; is the term used to describe types such as &lt;strong&gt;GuildChannel&lt;/strong&gt;/&lt;strong&gt;Message&lt;/strong&gt;/&lt;strong&gt;User&lt;/strong&gt; and other entities that Discord provides. Instances of these entities are created and deleted by JDA when Discord instructs it. This means the lifetime depends on signals provided by the Discord API which are used to create/update/delete entities. This is done through Gateway Events known as &#34;dispatches&#34; that are handled by the JDA WebSocket handlers. When Discord instructs JDA to delete entities, they are simply removed from the JDA cache and lose their references. Once that happens, nothing in JDA interacts or updates the instances of those entities, and they become useless. Discord may instruct to delete these entities randomly for cache synchronization with the API.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;It is not recommended to store &lt;em&gt;any&lt;/em&gt; of these entities for a longer period of time!&lt;/strong&gt; Instead of keeping (e.g.) a &lt;code&gt;User&lt;/code&gt; instance in some field, an ID should be used. With the ID of a user, you can use &lt;code&gt;getUserById(id)&lt;/code&gt; to get and keep the user reference in a local variable (see below).&lt;/p&gt; &#xA;&lt;h3&gt;Entity Updates&lt;/h3&gt; &#xA;&lt;p&gt;When an entity is updated through its manager, they will send a request to the Discord API which will update the state of the entity. The success of this request &lt;strong&gt;does not&lt;/strong&gt; imply the entity has been updated yet. All entities are updated by the aforementioned &lt;strong&gt;Gateway Events&lt;/strong&gt; which means you cannot rely on the cache being updated yet once the execution of a RestAction has completed. Some requests rely on the cache being updated to correctly update the entity. An example of this is updating roles of a member which overrides all roles of the member by sending a list of the new set of roles. This is done by first checking the current cache, the roles the member has right now, and appending or removing the requested roles. If the cache has not yet been updated by an event, this will result in unexpected behavior.&lt;/p&gt; &#xA;&lt;h3&gt;Entity Deletion&lt;/h3&gt; &#xA;&lt;p&gt;Discord may request that a client (the JDA session) invalidates its entire cache. When this happens, JDA will remove all of its current entities and reconnect the session. This is signaled through the &lt;code&gt;ReconnectEvent&lt;/code&gt;. When entities are removed from the JDA cache, they lose access to the encapsulating entities. For instance, a channel loses access to its guild. Once that happens, they are unable to make any API requests through RestAction and instead throw an &lt;code&gt;IllegalStateException&lt;/code&gt;. It is &lt;strong&gt;highly recommended&lt;/strong&gt; to only keep references to entities by storing their &lt;strong&gt;id&lt;/strong&gt; and using the respective &lt;code&gt;get...ById(id)&lt;/code&gt; method when needed.&lt;/p&gt; &#xA;&lt;h4&gt;Example&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class UserLogger extends ListenerAdapter &#xA;{&#xA;    private final long userId;&#xA;    &#xA;    public UserLogger(User user)&#xA;    {&#xA;        this.userId = user.getIdLong();&#xA;    }&#xA;    &#xA;    @Override&#xA;    public void onMessageReceived(MessageReceivedEvent event)&#xA;    {&#xA;        User author = event.getAuthor();&#xA;        Message message = event.getMessage();&#xA;        if (author.getIdLong() == userId)&#xA;        {&#xA;            // Print the message of the user&#xA;            System.out.println(author.getAsTag() + &#34;: &#34; + message.getContentDisplay());&#xA;        }&#xA;    }&#xA;    &#xA;    @Override&#xA;    public void onGuildJoin(GuildJoinEvent event)&#xA;    {&#xA;        JDA api = event.getJDA();&#xA;        User user = api.getUserById(userId); // Acquire a reference to the User instance through the id&#xA;        user.openPrivateChannel().queue((channel) -&amp;gt;&#xA;        {&#xA;            // Send a private message to the user&#xA;            channel.sendMessageFormat(&#34;I have joined a new guild: **%s**&#34;, event.getGuild().getName()).queue();&#xA;        });&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://mvnrepository.com/artifact/net.dv8tion/JDA/latest&#34;&gt; &lt;img src=&#34;https://img.shields.io/maven-central/v/net.dv8tion/JDA?color=blue&#34; alt=&#34;maven-central&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://jitpack.io/#DV8FromtheWorld/JDA&#34;&gt; &lt;img src=&#34;https://img.shields.io/jitpack/v/github/DV8FromTheWorld/JDA?label=Snapshots&amp;amp;color=blue&#34; alt=&#34;jitpack&#34;&gt; &lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Latest Release: &lt;a href=&#34;https://github.com/DV8FromTheWorld/JDA/releases/latest&#34;&gt;GitHub Release&lt;/a&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Be sure to replace the &lt;strong&gt;VERSION&lt;/strong&gt; key below with the one of the versions shown above! For snapshots, please use the instructions provided by &lt;a href=&#34;https://jitpack.io/#DV8FromTheWorld/JDA&#34;&gt;JitPack&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Maven&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;net.dv8tion&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;JDA&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;VERSION&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Maven without Audio&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;net.dv8tion&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;JDA&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;VERSION&amp;lt;/version&amp;gt;&#xA;    &amp;lt;exclusions&amp;gt;&#xA;        &amp;lt;exclusion&amp;gt;&#xA;            &amp;lt;groupId&amp;gt;club.minnced&amp;lt;/groupId&amp;gt;&#xA;            &amp;lt;artifactId&amp;gt;opus-java&amp;lt;/artifactId&amp;gt;&#xA;        &amp;lt;/exclusion&amp;gt;&#xA;    &amp;lt;/exclusions&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Gradle&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;repositories {&#xA;    mavenCentral()&#xA;}&#xA;&#xA;dependencies {&#xA;    //Change &#39;implementation&#39; to &#39;compile&#39; in old Gradle versions&#xA;    implementation(&#34;net.dv8tion:JDA:VERSION&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Gradle without Audio&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;    //Change &#39;implementation&#39; to &#39;compile&#39; in old Gradle versions&#xA;    implementation(&#34;net.dv8tion:JDA:VERSION&#34;) {&#xA;        exclude module: &#39;opus-java&#39;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The snapshot builds are only available via JitPack and require adding the JitPack resolver, you need to specify specific commits to access those builds. Stable releases are published to &lt;a href=&#34;https://mvnrepository.com/artifact/net.dv8tion/JDA&#34;&gt;maven-central&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you do not need any opus de-/encoding done by JDA (voice receive/send with PCM) you can exclude &lt;code&gt;opus-java&lt;/code&gt; entirely. This can be done if you only send audio with an &lt;code&gt;AudioSendHandler&lt;/code&gt; which only sends opus (&lt;code&gt;isOpus() = true&lt;/code&gt;). (See &lt;a href=&#34;https://github.com/sedmelluq/lavaplayer&#34;&gt;lavaplayer&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;If you want to use a custom opus library you can provide the absolute path to &lt;code&gt;OpusLibrary.loadFrom(String)&lt;/code&gt; before using the audio api of JDA. This works without &lt;code&gt;opus-java-natives&lt;/code&gt; as it only requires &lt;code&gt;opus-java-api&lt;/code&gt;. &lt;br&gt;&lt;em&gt;For this setup you should only exclude &lt;code&gt;opus-java-natives&lt;/code&gt; as &lt;code&gt;opus-java-api&lt;/code&gt; is a requirement for en-/decoding.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/discord-java/opus-java&#34;&gt;opus-java&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Logging Framework - SLF4J&lt;/h3&gt; &#xA;&lt;p&gt;JDA is using &lt;a href=&#34;https://www.slf4j.org/&#34;&gt;SLF4J&lt;/a&gt; to log its messages.&lt;/p&gt; &#xA;&lt;p&gt;That means you should add some SLF4J implementation to your build path in addition to JDA. If no implementation is found, following message will be printed to the console on startup:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;SLF4J: Failed to load class &#34;org.slf4j.impl.StaticLoggerBinder&#34;.&#xA;SLF4J: Defaulting to no-operation (NOP) logger implementation&#xA;SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;JDA currently provides a fallback Logger in case that no SLF4J implementation is present. We strongly recommend to use one though, as that can improve speed and allows you to customize the Logger as well as log to files&lt;/p&gt; &#xA;&lt;p&gt;There is a guide for logback-classic available in our wiki: &lt;a href=&#34;https://github.com/DV8FromTheWorld/JDA/wiki/Logging-Setup&#34;&gt;Logging Setup&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Docs can be found on the &lt;a href=&#34;https://ci.dv8tion.net/job/JDA5&#34;&gt;Jenkins&lt;/a&gt; or directly &lt;a href=&#34;https://ci.dv8tion.net/job/JDA5/javadoc/&#34;&gt;here&lt;/a&gt; &lt;br&gt;A simple Wiki can also be found in this repository&#39;s &lt;a href=&#34;https://github.com/DV8FromTheWorld/JDA/wiki&#34;&gt;Wiki section&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Annotations&lt;/h3&gt; &#xA;&lt;p&gt;We use a number of annotations to indicate future plans for implemented functionality such as new features of the Discord API.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DV8FromTheWorld/JDA/raw/development/src/main/java/net/dv8tion/jda/annotations/Incubating.java&#34;&gt;Incubating&lt;/a&gt; &lt;br&gt;This annotation is used to indicate that functionality may change in the future. Often used when a new feature is added.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DV8FromTheWorld/JDA/raw/development/src/main/java/net/dv8tion/jda/annotations/ReplaceWith.java&#34;&gt;ReplaceWith&lt;/a&gt; &lt;br&gt;Paired with &lt;code&gt;@Deprecated&lt;/code&gt; this is used to inform you how the new code-fragment is supposed to look once the hereby annotated functionality is removed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DV8FromTheWorld/JDA/raw/development/src/main/java/net/dv8tion/jda/annotations/ForRemoval.java&#34;&gt;ForRemoval&lt;/a&gt; &lt;br&gt;Paired with &lt;code&gt;@Deprecated&lt;/code&gt; this indicates that we plan to entirely remove the hereby annotated functionality in the future.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DV8FromTheWorld/JDA/raw/development/src/main/java/net/dv8tion/jda/annotations/DeprecatedSince.java&#34;&gt;DeprecatedSince&lt;/a&gt; &lt;br&gt;Paired with &lt;code&gt;@Deprecated&lt;/code&gt; this specifies when a feature was marked as deprecated.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/DV8FromTheWorld/JDA/tree/development/src/main/java/net/dv8tion/jda/annotations&#34;&gt;Sources&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Help&lt;/h2&gt; &#xA;&lt;p&gt;For general troubleshooting you can visit our wiki &lt;a href=&#34;https://github.com/DV8FromTheWorld/JDA/wiki/19)-Troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt; and &lt;a href=&#34;https://github.com/DV8FromTheWorld/JDA/wiki/10)-FAQ&#34;&gt;FAQ&lt;/a&gt;. &lt;br&gt;If you need help, or just want to talk with the JDA or other Devs, you can join the &lt;a href=&#34;https://discord.gg/0hMr4ce0tIl3SLv5&#34;&gt;Official JDA Discord Guild&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively you can also join the &lt;a href=&#34;https://discord.gg/discord-api&#34;&gt;Unofficial Discord API Guild&lt;/a&gt;. Once you joined, you can find JDA-specific help in the &lt;code&gt;#java_jda&lt;/code&gt; channel.&lt;/p&gt; &#xA;&lt;p&gt;For guides and setup help you can also take a look at the &lt;a href=&#34;https://github.com/DV8FromTheWorld/JDA/wiki&#34;&gt;wiki&lt;/a&gt; &lt;br&gt;Especially interesting are the &lt;a href=&#34;https://github.com/DV8FromTheWorld/JDA/wiki/3)-Getting-Started&#34;&gt;Getting Started&lt;/a&gt; and &lt;a href=&#34;https://github.com/DV8FromTheWorld/JDA/wiki/2)-Setup&#34;&gt;Setup&lt;/a&gt; Pages.&lt;/p&gt; &#xA;&lt;h2&gt;Third Party Recommendations&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/sedmelluq/lavaplayer&#34;&gt;LavaPlayer&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Created and maintained by &lt;a href=&#34;https://github.com/sedmelluq&#34;&gt;sedmelluq&lt;/a&gt; &lt;br&gt;LavaPlayer is the most popular library used by Music Bots created in Java. It is highly compatible with JDA and Discord4J and allows to play audio from Youtube, Soundcloud, Twitch, Bandcamp and &lt;a href=&#34;https://github.com/sedmelluq/lavaplayer#supported-formats&#34;&gt;more providers&lt;/a&gt;. &lt;br&gt;The library can easily be expanded to more services by implementing your own AudioSourceManager and registering it.&lt;/p&gt; &#xA;&lt;p&gt;It is recommended to read the &lt;a href=&#34;https://github.com/sedmelluq/lavaplayer#usage&#34;&gt;Usage&lt;/a&gt; section of LavaPlayer to understand a proper implementation. &lt;br&gt;Sedmelluq provided a demo in his repository which presents an example implementation for JDA: &lt;a href=&#34;https://github.com/sedmelluq/lavaplayer/tree/master/demo-jda&#34;&gt;https://github.com/sedmelluq/lavaplayer/tree/master/demo-jda&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/freyacodes/Lavalink&#34;&gt;Lavalink&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Maintained by &lt;a href=&#34;https://github.com/freyacodes&#34;&gt;Freya Arbjerg&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Lavalink is a popular standalone audio sending node based on Lavaplayer. Lavalink was built with scalability in mind, and allows streaming music via many servers. It supports most of Lavaplayer&#39;s features.&lt;/p&gt; &#xA;&lt;p&gt;Lavalink is used by many large bots, as well as bot developers who can not use a Java library like Lavaplayer. If you plan on serving music on a smaller scale with JDA it is often preferable to just use Lavaplayer directly as it is easier.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FredBoat/Lavalink-Client&#34;&gt;Lavalink-Client&lt;/a&gt; is the official Lavalink client for JDA.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/sedmelluq/jda-nas&#34;&gt;jda-nas&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Created and maintained by &lt;a href=&#34;https://github.com/sedmelluq&#34;&gt;sedmelluq&lt;/a&gt; &lt;br&gt;Provides a native implementation for the JDA Audio Send-System to avoid GC pauses.&lt;/p&gt; &#xA;&lt;p&gt;Note that this send system creates an extra UDP-Client which causes audio receive to no longer function properly since discord identifies the sending UDP-Client as the receiver.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;JDABuilder builder = JDABuilder.createDefault(BOT_TOKEN)&#xA;    .setAudioSendFactory(new NativeAudioSendFactory());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/MinnDevelopment/jda-ktx&#34;&gt;jda-ktx&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Created and maintained by &lt;a href=&#34;https://github.com/MinnDevelopment&#34;&gt;MinnDevelopment&lt;/a&gt;. &lt;br&gt;Provides &lt;a href=&#34;https://kotlinlang.org/&#34;&gt;Kotlin&lt;/a&gt; extensions for &lt;strong&gt;RestAction&lt;/strong&gt; and events that provide a more idiomatic Kotlin experience.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;fun main() {&#xA;    val jda = light(BOT_TOKEN)&#xA;    &#xA;    jda.onCommand(&#34;ping&#34;) { event -&amp;gt;&#xA;        val time = measureTime {&#xA;            event.reply(&#34;Pong!&#34;).await() // suspending&#xA;        }.inWholeMilliseconds&#xA;&#xA;        event.hook.editOriginal(&#34;Pong: $time ms&#34;).queue()&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is a number of examples available in the &lt;a href=&#34;https://github.com/MinnDevelopment/jda-ktx/#jda-ktx&#34;&gt;README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;More can be found in our github organization: &lt;a href=&#34;https://github.com/JDA-Applications&#34;&gt;JDA-Applications&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing to JDA&lt;/h2&gt; &#xA;&lt;p&gt;If you want to contribute to JDA, make sure to base your branch off of our &lt;strong&gt;development&lt;/strong&gt; branch (or a feature-branch) and create your PR into that &lt;strong&gt;same&lt;/strong&gt; branch. &lt;strong&gt;We will be rejecting any PRs between branches or into release branches!&lt;/strong&gt; It is very possible that your change might already be in development or you missed something.&lt;/p&gt; &#xA;&lt;p&gt;More information can be found at the wiki page &lt;a href=&#34;https://github.com/DV8FromTheWorld/JDA/wiki/5)-Contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Deprecation Policy&lt;/h3&gt; &#xA;&lt;p&gt;When a feature is introduced to replace or enhance existing functionality we might deprecate old functionality.&lt;/p&gt; &#xA;&lt;p&gt;A deprecated method/class usually has a replacement mentioned in its documentation which should be switched to. Deprecated functionality might or might not exist in the next minor release. (Hint: The minor version is the &lt;code&gt;MM&lt;/code&gt; of &lt;code&gt;XX.MM.RR&lt;/code&gt; in our version format)&lt;/p&gt; &#xA;&lt;p&gt;It is possible that some features are deprecated without replacement, in this case the functionality is no longer supported by either the JDA structure due to fundamental changes (for example automation of a feature) or due to Discord API changes that cause it to be removed.&lt;/p&gt; &#xA;&lt;p&gt;We highly recommend discontinuing usage of deprecated functionality and update by going through each minor release instead of jumping. For instance, when updating from version 3.3.0 to version 3.5.1 you should do the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Update to &lt;code&gt;3.4.RR&lt;/code&gt; and check for deprecation, replace&lt;/li&gt; &#xA; &lt;li&gt;Update to &lt;code&gt;3.5.1&lt;/code&gt; and check for deprecation, replace&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;RR&lt;/code&gt; in version &lt;code&gt;3.4.RR&lt;/code&gt; should be replaced by the latest version that was published for &lt;code&gt;3.4&lt;/code&gt;, you can find out which the latest version was by looking at the &lt;a href=&#34;https://github.com/DV8FromTheWorld/JDA/releases&#34;&gt;release page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies:&lt;/h2&gt; &#xA;&lt;p&gt;This project requires &lt;strong&gt;Java 8+&lt;/strong&gt;.&lt;br&gt; All dependencies are managed automatically by Gradle.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NV Websocket Client &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Version: &lt;strong&gt;2.14&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/TakahikoKawasaki/nv-websocket-client&#34;&gt;Github&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;OkHttp &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Version: &lt;strong&gt;4.9.3&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/square/okhttp&#34;&gt;Github&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Apache Commons Collections4 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Version: &lt;strong&gt;4.4&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://commons.apache.org/proper/commons-collections&#34;&gt;Website&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;jackson &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Version: &lt;strong&gt;2.13.2&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/FasterXML/jackson&#34;&gt;Github&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Trove4j &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Version: &lt;strong&gt;3.0.3&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bitbucket.org/trove4j/trove&#34;&gt;BitBucket&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;slf4j-api &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Version: &lt;strong&gt;1.7.36&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.slf4j.org/&#34;&gt;Website&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;opus-java (optional) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Version: &lt;strong&gt;1.1.1&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/discord-java/opus-java&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Related Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Discord4J/Discord4J&#34;&gt;Discord4J&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/discord-net/Discord.Net&#34;&gt;Discord.NET&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Rapptz/discord.py&#34;&gt;discord.py&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/serenity-rs/serenity&#34;&gt;serenity&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;See also:&lt;/strong&gt; &lt;a href=&#34;https://discord.com/developers/docs/topics/community-resources#libraries&#34;&gt;https://discord.com/developers/docs/topics/community-resources#libraries&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bitcoin-wallet/bitcoin-wallet</title>
    <updated>2022-08-09T01:32:41Z</updated>
    <id>tag:github.com,2022-08-09:/bitcoin-wallet/bitcoin-wallet</id>
    <link href="https://github.com/bitcoin-wallet/bitcoin-wallet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bitcoin Wallet app for your Android device. Standalone Bitcoin node, no centralized backend required.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;BITCOIN WALLET&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to &lt;em&gt;Bitcoin Wallet&lt;/em&gt;, a standalone Bitcoin payment app for your Android device!&lt;/p&gt; &#xA;&lt;p&gt;This project contains several sub-projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;wallet&lt;/strong&gt;: The Android app itself. This is probably what you&#39;re searching for.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;market&lt;/strong&gt;: App description and promo material for the Google Play app store.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;integration-android&lt;/strong&gt;: A tiny library for integrating Bitcoin payments into your own Android app (e.g. donations, in-app purchases).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;sample-integration-android&lt;/strong&gt;: A minimal example app to demonstrate the integration of Bitcoin payments into your Android app.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;PREREQUISITES FOR BUILDING&lt;/h3&gt; &#xA;&lt;p&gt;You&#39;ll need git, a Java 8 or 11 SDK and Gradle 4.4 (or later) for this. We&#39;ll assume Ubuntu 20.04 LTS (Focal Fossa) for the package installs, which comes with OpenJDK 8, OpenJDK 11 and Gradle 4.4.1 out of the box.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# first time only&#xA;sudo apt install git gradle openjdk-8-jdk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a directory for the Android SDK (e.g. &lt;code&gt;android-sdk&lt;/code&gt;) and point the &lt;code&gt;ANDROID_HOME&lt;/code&gt; variable to it.&lt;/p&gt; &#xA;&lt;p&gt;Download the &lt;a href=&#34;https://developer.android.com/studio/index.html#command-tools&#34;&gt;Android SDK Tools&lt;/a&gt; and unpack it to &lt;code&gt;$ANDROID_HOME/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Finally, the last preparative step is acquiring the source code. Again in your workspace, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# first time only&#xA;git clone -b master https://github.com/bitcoin-wallet/bitcoin-wallet.git bitcoin-wallet&#xA;cd bitcoin-wallet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;BUILDING&lt;/h3&gt; &#xA;&lt;p&gt;You can build all sub-projects in all flavors at once using Gradle:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# each time&#xA;gradle clean build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For details about building the wallet see the &lt;a href=&#34;https://raw.githubusercontent.com/bitcoin-wallet/bitcoin-wallet/master/wallet/README.md&#34;&gt;specific README&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>