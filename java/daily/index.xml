<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-19T01:38:10Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tangxiaofeng7/CVE-2023-32315-Openfire-Bypass</title>
    <updated>2023-06-19T01:38:10Z</updated>
    <id>tag:github.com,2023-06-19:/tangxiaofeng7/CVE-2023-32315-Openfire-Bypass</id>
    <link href="https://github.com/tangxiaofeng7/CVE-2023-32315-Openfire-Bypass" rel="alternate"></link>
    <summary type="html">&lt;p&gt;rce&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CVE-2023-32315&lt;/h1&gt; &#xA;&lt;p&gt;0x01 获取返回的JSESSIONID和csrftoken ,构造请求包新增用户(替换JSESSIONID、csrftoken) &lt;img src=&#34;https://raw.githubusercontent.com/tangxiaofeng7/CVE-2023-32315-Openfire-Bypass/main/img/img.png&#34; alt=&#34;img.png&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd CVE-2023-32315-Openfire-Bypass/scan_all&#xA;go mod tidy&#xA;go run main.go -u http://openfire.com:9090&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;0x02 插件编译安装&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mvn clean package&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;或 releases下载插件&lt;/p&gt; &#xA;&lt;p&gt;0x03 上传插件 &lt;img src=&#34;https://raw.githubusercontent.com/tangxiaofeng7/CVE-2023-32315-Openfire-Bypass/main/img/plugin.png&#34; alt=&#34;img.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;0x04 得到webshel &lt;img src=&#34;https://raw.githubusercontent.com/tangxiaofeng7/CVE-2023-32315-Openfire-Bypass/main/img/webshell.png&#34; alt=&#34;img.png&#34;&gt; 0x05 执行命令 &lt;img src=&#34;https://raw.githubusercontent.com/tangxiaofeng7/CVE-2023-32315-Openfire-Bypass/main/img/cmd.png&#34; alt=&#34;img.png&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>MarginaliaSearch/MarginaliaSearch</title>
    <updated>2023-06-19T01:38:10Z</updated>
    <id>tag:github.com,2023-06-19:/MarginaliaSearch/MarginaliaSearch</id>
    <link href="https://github.com/MarginaliaSearch/MarginaliaSearch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Internet search engine for text-oriented websites. Indexing the small, old and weird web.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Marginalia Search&lt;/h1&gt; &#xA;&lt;p&gt;This is the source code for &lt;a href=&#34;https://search.marginalia.nu&#34;&gt;Marginalia Search&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The aim of the project is to develop new and alternative discovery methods for the Internet. It&#39;s an experimental workshop as much as it is a public service, the overarching goal is to elevate the more human, non-commercial sides of the Internet. A side-goal is to do this without requiring datacenters and expensive enterprise hardware, to run this operation on affordable hardware.&lt;/p&gt; &#xA;&lt;h2&gt;Set up&lt;/h2&gt; &#xA;&lt;p&gt;Start by running &lt;a href=&#34;https://raw.githubusercontent.com/MarginaliaSearch/MarginaliaSearch/master/run/setup.sh&#34;&gt;⚙️ run/setup.sh&lt;/a&gt;. This will download supplementary model data that is necessary to run the code. These are also necessary to run the tests.&lt;/p&gt; &#xA;&lt;p&gt;To set up a local test environment, follow the instructions in &lt;a href=&#34;https://raw.githubusercontent.com/MarginaliaSearch/MarginaliaSearch/master/run/readme.md&#34;&gt;📄 run/readme.md&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Hardware Requirements&lt;/h2&gt; &#xA;&lt;p&gt;A production-like environment requires at least 128 Gb of RAM and ideally 2 Tb+ of enterprise grade SSD storage, as well as some additional terabytes of slower harddrives for storing crawl data. It can be made to run on smaller hardware by limiting size of the index.&lt;/p&gt; &#xA;&lt;p&gt;A local developer&#39;s deployment is possible with much smaller hardware (and index size).&lt;/p&gt; &#xA;&lt;h2&gt;Project Structure&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MarginaliaSearch/MarginaliaSearch/master/code/&#34;&gt;📁 code/&lt;/a&gt; - The Source Code. See &lt;a href=&#34;https://raw.githubusercontent.com/MarginaliaSearch/MarginaliaSearch/master/code/readme.md&#34;&gt;📄 code/readme.md&lt;/a&gt; for a further breakdown of the structure and architecture.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MarginaliaSearch/MarginaliaSearch/master/run/&#34;&gt;📁 run/&lt;/a&gt; - Scripts and files used to run the search engine locally&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MarginaliaSearch/MarginaliaSearch/master/third-party/&#34;&gt;📁 third-party/&lt;/a&gt; - Third party code&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MarginaliaSearch/MarginaliaSearch/master/doc/&#34;&gt;📁 doc/&lt;/a&gt; - Supplementary documentation&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MarginaliaSearch/MarginaliaSearch/master/CONTRIBUTING.md&#34;&gt;📄 CONTRIBUTING.md&lt;/a&gt; - How to contribute&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MarginaliaSearch/MarginaliaSearch/master/LICENSE.md&#34;&gt;📄 LICENSE.md&lt;/a&gt; - License terms&lt;/p&gt; &#xA;&lt;h2&gt;Supporting&lt;/h2&gt; &#xA;&lt;p&gt;Consider &lt;a href=&#34;https://memex.marginalia.nu/projects/edge/supporting.gmi&#34;&gt;supporting this project&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;You can email &lt;a href=&#34;mailto:kontakt@marginalia.nu&#34;&gt;kontakt@marginalia.nu&lt;/a&gt; with any questions or feedback.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The bulk of the project is available with AGPL 3.0, with exceptions. Some parts are co-licensed under MIT, third party code may have different licenses. See the appropriate readme.md / license.md.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>1095071913/maozi-cloud-parent</title>
    <updated>2023-06-19T01:38:10Z</updated>
    <id>tag:github.com,2023-06-19:/1095071913/maozi-cloud-parent</id>
    <link href="https://github.com/1095071913/maozi-cloud-parent" rel="alternate"></link>
    <summary type="html">&lt;p&gt;【脚手架】基于 SpringCloud Alibaba Dubbo 二开封装&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;脚手架说明&lt;/h1&gt; &#xA;&lt;p&gt;该脚手架基于微服务开发，给开发人员快速投入业务开发，封装好了一系列的组件入：日志收集、业务通用方法、框架配置、数据包结果集、监控、常用的第三方接口 等一系列功能，后续会不断升级 框架组件、封装更多通用方法或框架组件、第三方接口、接入Kubesphere Istio&lt;/p&gt; &#xA;&lt;p&gt;已有三家公司在用的脚手架，每次更新发版都会经过集成的框架基本可用 压测，请放心使用，有问题请咨询QQ1095071913&lt;/p&gt; &#xA;&lt;h1&gt;架构图&lt;/h1&gt; &#xA;&lt;img src=&#34;https://camo.githubusercontent.com/2a8d393174da1eb4943ebb7c277f6626499130ba06cc251870589a841da22f2e/68747470733a2f2f696d672e616c6963646e2e636f6d2f696d6765787472612f69322f4f31434e30314a386d585568323346596d67327558646c5f2121363030303030303030373232362d302d7470732d323835382d313238322e6a7067&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;目录说明&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;&#xA;maozi-cloud-common&#xA;  maozi-cloud-common-tool                 (工具)&#xA;  maozi-cloud-common-generate-code        (代码生成工具)&#xA;  &#xA;  &#xA;  &#xA;maozi-cloud-config&#xA;  maozi-cloud-config-apollo               (Apollo配置)&#xA;  maozi-cloud-config-arthas               (Arthas配置)&#xA;  maozi-cloud-config-bootadmin            (SpringBootAdmin配置)&#xA;  maozi-cloud-config-db                   (数据库配置)&#xA;  maozi-cloud-config-discovery            (注册中心配置)&#xA;  maozi-cloud-config-dubbo                (Dubbo配置)&#xA;  maozi-cloud-config-feign                (Feign配置)&#xA;  maozi-cloud-config-job                  (XXL-Job配置)&#xA;  maozi-cloud-config-log                  (日志配置)&#xA;  maozi-cloud-config-mvc                  (Controller配置)&#xA;  maozi-cloud-config-redis                (Redis配置)&#xA;  maozi-cloud-config-seata                (Seata配置)&#xA;  maozi-cloud-config-sentinel             (Sentinel配置)&#xA;  maozi-cloud-config-sentry               (Sentry配置)&#xA;  maozi-cloud-config-sso                  (单点登录权限配置)&#xA;  maozi-cloud-config-stream               (MQ Stream配置)&#xA;  maozi-cloud-config-swagger              (接口文档配置)&#xA;  &#xA;  &#xA;  &#xA;maozi-cloud-entity&#xA;  maozi-cloud-base-entity&#xA;    maozi-cloud-base-do                   (Domain Object 基层)&#xA;    maozi-cloud-base-dto                  (Data Transfer Object 基层)&#xA;    maozi-cloud-base-enum                 (枚举 基层)&#xA;    maozi-cloud-base-vo                   (View Object 基层)&#xA;  maozi-cloud-business-entity             &#xA;    maozi-cloud-do                        (Domain Object 聚合依赖)&#xA;      maozi-cloud-seata-do                (服务通用 Seata Domain)  &#xA;    maozi-cloud-dto                       (Data Transfer Object 聚合依赖)&#xA;      maozi-cloud-sso-oauth-dto           (授权服务 Data Transfer Object)&#xA;      maozi-cloud-system-user-dto         (系统用户服务 Data Transfer Object)&#xA;    maozi-cloud-enum                      (枚举 聚合依赖)&#xA;    maozi-cloud-result                    (结果集 基层)&#xA;    maozi-cloud-vo                        (View Object 聚合依赖)&#xA;  &#xA;  &#xA;  &#xA;maozi-cloud-service&#xA;  maozi-cloud-service-base&#xA;    maozi-cloud-service-base-api          (服务接口 基层)&#xA;    maozi-cloud-service-base-impl         (服务接口实现 基层)&#xA;    maozi-cloud-service-base-run          (启动服务 基层)&#xA;  maozi-cloud-service-db-impl             (服务聚合依赖 数据库基层版)&#xA;  maozi-cloud-service-business&#xA;    maozi-cloud-service-impl              (服务聚合依赖 基层)&#xA;      maozi-cloud-service-bd              (百度地图服务接口实现)&#xA;      maozi-cloud-service-qny             (七牛云服务接口实现)&#xA;      maozi-cloud-service-ss              (闪送服务接口实现)&#xA;      maozi-cloud-service-company-wechat  (企业微信服务接口实现)&#xA;    maozi-cloud-service-rest-api          (服务HTTP接口聚合依赖 基层)&#xA;    maozi-cloud-service-rpc-api           (服务RPC接口聚合依赖 基层)&#xA;  maozi-cloud-service-plugin&#xA;    maozi-cloud-service-db-impl           (数据库服务实现 插件基层)&#xA;  &#xA;  &#xA;  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;集成框架版本说明&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;框架&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;版本&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;JDK&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;17&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;兼容JDK8，由于Springboot3只支持17所以在Springboot2.6中先用&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Spring Boot&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2.6.11&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;基于Spring框架的快速开发应用程序框架&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Spring Cloud&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2021.0.4&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Netfix推出微服务一站式服务框架&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Spring Cloud Alibaba&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2021.0.4.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;阿里巴巴推出微服务一站式服务框架&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Spring Cloud Alibaba Dubbo&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3.0.8&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;基于Triple Stream协议 对内 服务与服务之间RPC通信框架&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Spring Cloud Feign&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;跟随SC版本&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;基于HTTP协议 对外 服务与第三方之间RPC通信框架&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Spring Cloud Alibaba Gateway&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;跟随SCA版本&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;黑白名单，鉴权，流量分发 流式处理网关框架&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Spring Cloud Alibaba Stream Rocketmq&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;跟随SCA版本&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;异步消峰消息框架&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Spring Cloud Alibaba Seata&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;跟随SCA版本&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;分布式事务框架&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Spring Cloud Alibaba Sentinel&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;跟随SCA版本&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;监控流量 限流 框架，个人二开支持数据持久化，限流规则持久化Nacos&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Spring Cloud Alibaba Nacos&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;跟随SCA版本&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;分布式服务治理 配置中心 框架&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Spring Boot Admin&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2.6.9&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;基于Actuator分布式JVM监控框架&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Spring Boot Oauth2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;跟随SC版本&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;基于Oauth2协议授权服务器授权单点登录 权限 框架&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Arthas Tunnel&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3.6.7&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;远程进入服务JVM内部监控诊断&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Skywalking&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;8.4.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;接口链路跟踪性能分析&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Mybatis Plus Join&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.2.4&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;基于Mybatis Plus二开 关系型数据库对象关系映射框架 支持连表查询&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Mybatis Plus Actable&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.5.0.RELEASE&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;关系型数据库对象关系映射 正向生成自动建表框架&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Spring Flyway&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;跟随SB版本&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;初始化数据库数据&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Knife4j&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4.0.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;基于Swagger二开 接口文档可视化框架 个人二开新增枚举解析&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;XXL Job&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2.3.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;定时任务框架&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;编译前准备&lt;/h1&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;编译前说明&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;项目不要缺少.git文件 ，不然会编译不过&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;编译前要准备Nexus，既然是微服务那就要做远程仓库方便后续打包上线，如果只是想本地测试没有Nexus的话就不要走Maven Deploy编译&lt;/p&gt; &#xA;&lt;p&gt;我们将会基于Docker来去安装中间件，本地测试的可以考虑安装一个Docker Desktop来进行测试使用，将开始逐步安装&lt;/p&gt; &#xA;&lt;p&gt;Docker Desktop自带Docker Compose，安装K8s也非常方便简单&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Windows11安装Docker Desktop&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;1. 安装WSL&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&#xA;wsl --install&#xA;&#xA;# 若报错提示 “无法解析服务器的名称或地址”，则输入&#xA;# dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart&#xA;# dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart&#xA;# 还是一样则需要在网络和共享设置里，选择当前连接，设置IPv4的属性，更改DNS服务器 114.114.114.114&#xA;# 完成后再执行 &#xA;# wsl --update&#xA;# wsl --install&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;2. 安装Docker Desktop&lt;/h3&gt; &#xA;&lt;p&gt;游览器下载安装包 &lt;a href=&#34;https://docs.docker.com/desktop/release-notes/#4163&#34;&gt;https://docs.docker.com/desktop/release-notes/#4163&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;3. 设置加速镜像仓库&lt;/h3&gt; &#xA;&lt;p&gt;安装完后打开面板点击登录旁边的setting设置，点击Docker Engine 输入&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;builder&#34;: {&#xA;    &#34;gc&#34;: {&#xA;      &#34;defaultKeepStorage&#34;: &#34;20GB&#34;,&#xA;      &#34;enabled&#34;: true&#xA;    }&#xA;  },&#xA;  &#34;experimental&#34;: false,&#xA;  &#34;features&#34;: {&#xA;    &#34;buildkit&#34;: true&#xA;  },&#xA;  &#34;registry-mirrors&#34;: [&#xA;    &#34;https://pn1nqbsb.mirror.aliyuncs.com&#34;,&#xA;    &#34;https://docker.mirrors.ustc.edu.cn&#34;,&#xA;    &#34;https://kubernetes.github.io&#34;&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Docker Compose安装Nexus&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;1. 下载&lt;a href=&#34;https://gitee.com/xmaozi/maozi-cloud-parent-script/blob/release/nexus/docker-compose.yml&#34;&gt;docker-compose.yml&lt;/a&gt;文件&lt;/h3&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;2. 执行&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;设置Maven Setting.xml文件&lt;/h2&gt; &#xA;&lt;p&gt;下载&lt;a href=&#34;https://gitee.com/xmaozi/maozi-cloud-parent-script/blob/release/nexus/maven-config-setting.xml&#34;&gt;MavenSetting&lt;/a&gt;与你本地文件合并到一起，将文件中的 &lt;strong&gt;账号、密码、Nexus地址&lt;/strong&gt; 修改好&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;若你的Nexus地址不是localhost:8081&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;打开项目Parent的Pom.xml文件，找到distributionManagement标签&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;distributionManagement&amp;gt;&#xA;        &amp;lt;repository&amp;gt;&#xA;            &amp;lt;id&amp;gt;nexus-releases&amp;lt;/id&amp;gt;&#xA;            &amp;lt;name&amp;gt;Nexus Release Repository&amp;lt;/name&amp;gt;&#xA;            &amp;lt;url&amp;gt;http://修改Nexus地址/repository/maven-releases/&amp;lt;/url&amp;gt;&#xA;        &amp;lt;/repository&amp;gt;&#xA;        &amp;lt;snapshotRepository&amp;gt;&#xA;            &amp;lt;id&amp;gt;nexus-snapshots&amp;lt;/id&amp;gt;&#xA;            &amp;lt;name&amp;gt;Nexus Snapshot Repository&amp;lt;/name&amp;gt;&#xA;            &amp;lt;url&amp;gt;http://修改Nexus地址/repository/maven-snapshots/&amp;lt;/url&amp;gt;&#xA;        &amp;lt;/snapshotRepository&amp;gt;&#xA;    &amp;lt;/distributionManagement&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;完成以上步骤即可编译 mvn clean deploy&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;测试脚手架前准备&lt;/h1&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;编译后说明&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Nacos版本固定2.0.4&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;该阶段围绕着安装Nacos、添加基础配置进行讲解，目前安装走的Docker Compose进行安装，没有docker的可以拉取Nacos官方代码进行启动，本文档跳过以下安装步骤，导入&lt;a href=&#34;https://gitee.com/xmaozi/maozi-cloud-parent-nacos-config&#34;&gt;Nacos配置文件&lt;/a&gt;即可&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Docker Compose安装Nacos&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;1.下载&lt;a href=&#34;https://gitee.com/xmaozi/maozi-cloud-parent-script/tree/release/nacos/nacos-docker-2.0.4&#34;&gt;Nacos Docker&lt;/a&gt;安装目录&lt;/h3&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;2.导入&lt;a href=&#34;https://gitee.com/xmaozi/maozi-cloud-parent-script/blob/release/nacos/nacos-config-mysql.sql&#34;&gt;SQL脚本&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;3.在下载的GitHub项目上做修改&lt;/h3&gt; &#xA;&lt;p&gt;在env目录上修改nacos-standlone-mysql.env文件&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;PREFER_HOST_MODE=hostname&#xA;MODE=standalone&#xA;SPRING_DATASOURCE_PLATFORM=mysql&#xA;MYSQL_SERVICE_HOST=Mysql IP&#xA;MYSQL_SERVICE_DB_NAME=Nacos数据库名字&#xA;MYSQL_SERVICE_PORT=Mysql端口&#xA;MYSQL_SERVICE_USER=Mysql用户名 &#xA;MYSQL_SERVICE_PASSWORD=Mysql密码&#xA;MYSQL_SERVICE_DB_PARAM=characterEncoding=utf8&amp;amp;connectTimeout=1000&amp;amp;socketTimeout=3000&amp;amp;autoReconnect=true&amp;amp;useSSL=false&amp;amp;serverTimezone=Asia/Shanghai&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;在example目录上修改standalone-mysql-8.yaml&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;若你的Mysql版本不是8就修改standalone-mysql-5.7.yaml&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;standalone-mysql-8.yaml&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: &#34;2&#34;&#xA;services:&#xA;  nacos:&#xA;    image: nacos/nacos-server:${NACOS_VERSION}&#xA;    container_name: nacos-standalone-mysql&#xA;    env_file:&#xA;      - ../env/nacos-standlone-mysql.env&#xA;    volumes:&#xA;      - ./standalone-logs/:/home/nacos/logs&#xA;      - ./init.d/custom.properties:/home/nacos/init.d/custom.properties&#xA;    ports:&#xA;      - &#34;8848:8848&#34;&#xA;      - &#34;9848:9848&#34;&#xA;      - &#34;9555:9555&#34;&#xA;    restart: always&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;standalone-mysql-5.7.yaml&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: &#34;2&#34;&#xA;services:&#xA;  nacos:&#xA;    image: nacos/nacos-server:${NACOS_VERSION}&#xA;    container_name: nacos-standalone-mysql&#xA;    env_file:&#xA;      - ../env/nacos-standlone-mysql.env&#xA;    volumes:&#xA;      - ./standalone-logs/:/home/nacos/logs&#xA;      - ./init.d/custom.properties:/home/nacos/init.d/custom.properties&#xA;    ports:&#xA;      - &#34;8848:8848&#34;&#xA;      - &#34;9848:9848&#34;&#xA;      - &#34;9555:9555&#34;&#xA;    restart: always&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;4.启动Nacos&lt;/h3&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;执行&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;docker-compose -f example/standalone-mysql-8.yaml up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;5.修改Nacos配置文件&lt;/h3&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;若Nacos地址是localhost:8848即可忽然步骤&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;在Nacos配置中搜索&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;cloud-dubbo.yml&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;cloud-nacos.yml&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;将127.0.0.1:8848修改成Nacos地址&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;测试脚手架&lt;/h1&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;测试项目可以用代码生成项目 或 从作者的仓库里找两个已经创建好的项目进行启动测试&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;业务项目：&lt;a href=&#34;https://gitee.com/xmaozi/maozi-cloud-system&#34;&gt;系统服务&lt;/a&gt; 、&lt;a href=&#34;https://gitee.com/xmaozi/maozi-cloud-sso&#34;&gt;授权服务&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;中间件项目：&lt;a href=&#34;https://gitee.com/xmaozi/maozi-cloud-basics-gateway&#34;&gt;网关服务&lt;/a&gt; 、 &lt;a href=&#34;https://gitee.com/xmaozi/maozi-cloud-basics-monitor&#34;&gt;监控服务&lt;/a&gt; 、 &lt;a href=&#34;https://gitee.com/xmaozi/maozi-cloud-basics-sentinel&#34;&gt;流控服务&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;拉取代码后即可编译或启动项目 ，&lt;strong&gt;记住不要少了.git文件 不然会编译失败&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;创建新业务项目&lt;/h1&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;生成代码&lt;/h2&gt; &#xA;&lt;p&gt;打开 &lt;strong&gt;maozi-cloud-common\maozi-cloud-common-generate-code\src\main\java\com\maozi\generate\code\GenerateCodeRun.java&lt;/strong&gt; 执行&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;请输入模块名字（users）：users&#xA;请输入生成地址（D:\project\maozi-cloud-parent\maozi-cloud-common）：D:\project\maozi-cloud-parent\maozi-cloud-common&#xA;请输入是否依赖数据库（yes/no）：yes&#xA;请输入数据库地址如 （默认 localhost:3306）：&#xA;请输入数据库用户名（默认 root）：&#xA;请输入数据库密码（默认 password）：&#xA;请输入数据库名（默认 maozi-cloud-users-localhost-db）：maozi-cloud-users-localhost-db&#xA;请输入子模块名（输入break结束）：user&#xA;请输入表名（输入break结束）：sys_user&#xA;请输入表名实体映射过滤前缀：sys&#xA;请输入表名（输入break结束）：break&#xA;请输入子模块名（输入break结束）：break&#xA;正在生成中   。。。。。。&#xA;代码生成完成   。。。。。&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;创建Nacos配置文件&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;文件名为：{项目名字}.yml&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;如：maozi-cloud-user.yml&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;#端口&#xA;application-port: 2000&#xA;&#xA;# 设置数据库参数 以下值都是默认值 , 无变化可注释掉&#xA;application-datasource-jdbc-url: localhost:3306&#xA;application-datasource-jdbc-username: root&#xA;application-datasource-jdbc-password: password&#xA;application-datasource-db-name: maozi-cloud-user-localhost-db&#xA;&#xA;#白名单&#xA;application-project-whitelist: /user/pc/v1/login&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;Nacos地址默认为localhost:8081，若不是则添加环境变量NACOS_CONFIG_SERVER&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;或找到 &lt;strong&gt;maozi-cloud-service-sso/src/main/resources/bootstrap.properties&lt;/strong&gt; 添加&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;spring.cloud.nacos.config.server-addr={Nacos地址}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;设置Jvm VM参数&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;因为用的是JDK17 所以要设置以下VM参数&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;--add-opens java.base/java.math=ALL-UNNAMED  --add-opens java.base/java.lang=ALL-UNNAMED  --add-opens java.base/java.lang.reflect=ALL-UNNAMED&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;启动服务&lt;/h2&gt; &#xA;&lt;p&gt;启动成功 ，访问 &lt;strong&gt;localhost:{端口}/doc.html&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;新服务包说明&lt;/h1&gt; &#xA;&lt;p&gt;可看&lt;a href=&#34;https://gitee.com/xmaozi/maozi-cloud-system&#34;&gt;MarkDown&lt;/a&gt;文档，里面有说明包作用&lt;/p&gt;</summary>
  </entry>
</feed>