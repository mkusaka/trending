<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-29T01:36:41Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>NemProject/nem</title>
    <updated>2025-07-29T01:36:41Z</updated>
    <id>tag:github.com,2025-07-29:/NemProject/nem</id>
    <link href="https://github.com/NemProject/nem" rel="alternate"></link>
    <summary type="html">&lt;p&gt;number go up ðŸ’¹&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NIS client&lt;/h1&gt; &#xA;&lt;p&gt;This project contains &lt;a href=&#34;https://raw.githubusercontent.com/NemProject/nem/dev/nis&#34;&gt;NEM Infrastructure Server&lt;/a&gt; and all its dependencies. It is the simplest way to quickly build and launch a &lt;a href=&#34;https://nemproject.github.io/nem-docs&#34;&gt;NEM node&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Package Organization&lt;/h2&gt; &#xA;&lt;p&gt;The main folders are:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Folder&lt;/th&gt; &#xA;   &lt;th&gt;Content&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/NemProject/nem/dev/core&#34;&gt;core&lt;/a&gt; dependency.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;deploy&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/NemProject/nem/dev/deploy&#34;&gt;deploy&lt;/a&gt; dependency.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;peer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/NemProject/nem/dev/peer&#34;&gt;peer&lt;/a&gt; dependency.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;nis&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/NemProject/nem/dev/nis&#34;&gt;nis&lt;/a&gt; dependency.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Building the package&lt;/h2&gt; &#xA;&lt;p&gt;The package uses &lt;a href=&#34;https://maven.apache.org/&#34;&gt;Apache Maven&lt;/a&gt; and minimum required Java SDK version to build is &lt;strong&gt;Java 11&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please make sure that the Java version is 11+ by running the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -version&#xA;# should print sth similar to: openjdk version &#34;11.0.2&#34; 2019-01-15&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build the package as usual:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mvn package&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then check that unit tests are passing by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mvn test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optionally, check if the slower integration tests are passing by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mvn failsafe:integration-test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running the package&lt;/h2&gt; &#xA;&lt;p&gt;NIS nodes are configured through &lt;a href=&#34;https://nemproject.github.io/nem-docs/pages/Guides/node-operation/docs.en.html#configuration&#34;&gt;property files&lt;/a&gt;. Create a folder named &lt;code&gt;staging&lt;/code&gt; and add any required property files inside.&lt;/p&gt; &#xA;&lt;p&gt;Then run the node with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -Xms6G -Xmx6G -cp ./staging:./nis/target/libs/*:./nis/target/* org.nem.deploy.CommonStarter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://nemproject.github.io/nem-docs/pages/Guides/node-operation/docs.en.html&#34;&gt;NEM node documentation&lt;/a&gt; to know more about handling NIS nodes.&lt;/p&gt; &#xA;&lt;h3&gt;Running a testnet node&lt;/h3&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;config-user.properties&lt;/code&gt; with the following properties&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# update &amp;lt;ReplaceWithYourName&amp;gt; value below&#xA;cat &amp;gt;&amp;gt; staging/config-user.properties &amp;lt;&amp;lt; EOF&#xA;nis.bootName = &amp;lt;ReplaceWithYourName&amp;gt;&#xA;&#xA;nem.network = testnet&#xA;&#xA;nis.treasuryReissuanceForkHeight = 1&#xA;nis.treasuryReissuanceForkTransactionHashes =&#xA;nis.treasuryReissuanceForkFallbackTransactionHashes =&#xA;nis.multisigMOfNForkHeight = 1&#xA;nis.mosaicsForkHeight = 1&#xA;nis.firstFeeForkHeight = 1&#xA;nis.secondFeeForkHeight = 1&#xA;nis.remoteAccountForkHeight = 1&#xA;nis.mosaicRedefinitionForkHeight = 1&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Before contributing please &lt;a href=&#34;https://raw.githubusercontent.com/NemProject/nem/dev/CONTRIBUTING.md&#34;&gt;read the CONTRIBUTING instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Help&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nemproject.github.io/nem-docs&#34;&gt;NEM Developer Documentation&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nemproject.github.io/nem-docs/pages/Whitepapers/NEM_techRef.pdf&#34;&gt;NEM Technical Reference&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Join the community &lt;a href=&#34;https://discord.gg/xymcity&#34;&gt;Discord server&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you found a bug, &lt;a href=&#34;https://github.com/NemProject/nem.core/issues&#34;&gt;open a new issue&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2014-2021 NEM Contributors, licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/NemProject/nem/dev/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>coze-dev/coze-java</title>
    <updated>2025-07-29T01:36:41Z</updated>
    <id>tag:github.com,2025-07-29:/coze-dev/coze-java</id>
    <link href="https://github.com/coze-dev/coze-java" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Java SDK for the Coze API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Coze Java API SDK&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://central.sonatype.com/artifact/com.coze/coze-api&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.coze/coze-api&#34; alt=&#34;Maven Central Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/coze-dev/coze-java&#34;&gt;&lt;img src=&#34;https://codecov.io/github/coze-dev/coze-java/graph/badge.svg?token=UXitaQ0wp7&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;The Coze API SDK for Java is a powerful tool designed to seamlessly integrate Coze&#39;s open APIs into your projects.&lt;/p&gt; &#xA;&lt;p&gt;Key Features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Full support for Coze open APIs and authentication APIs&lt;/li&gt; &#xA; &lt;li&gt;Both synchronous and asynchronous SDK calls&lt;/li&gt; &#xA; &lt;li&gt;Optimized streaming APIs with Stream object returns&lt;/li&gt; &#xA; &lt;li&gt;Optimized list APIs with Iterator Page object returns&lt;/li&gt; &#xA; &lt;li&gt;Simple and intuitive API design for ease of use&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Importing&lt;/h2&gt; &#xA;&lt;h3&gt;Gradle&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;dependencies {&#xA;    implementation &#39;com.coze:coze-api:+&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Maven&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;com.coze&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;coze-api&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;version&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;   &lt;th&gt;File&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pat auth&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coze-dev/coze-java/main/example/src/main/java/example/auth/TokenAuthExample.java&#34;&gt;TokenAuthExample.java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;oauth by web code&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coze-dev/coze-java/main/example/src/main/java/example/auth/WebOAuthExample.java&#34;&gt;WebOAuthExample.java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;oauth by jwt flow&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coze-dev/coze-java/main/example/src/main/java/example/auth/JWTOAuthExample.java&#34;&gt;JWTsOauthExample.java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;oauth by pkce flow&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coze-dev/coze-java/main/example/src/main/java/example/auth/PKCEOAuthExample.java&#34;&gt;PKCEOauthExample.java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;oauth by device flow&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coze-dev/coze-java/main/example/src/main/java/example/auth/DeviceOAuthExample.java&#34;&gt;DevicesOAuthExample.java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;handle auth exception&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coze-dev/coze-java/main/example/src/main/java/example/auth/HandlerExceptionExample.java&#34;&gt;HandlerExceptionExample.java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bot create, publish and chat&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coze-dev/coze-java/main/example/src/main/java/example/bot/BotPublishExample.java&#34;&gt;PublishBotExample.java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;get bot and bot list&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coze-dev/coze-java/main/example/src/main/java/example/bot/BotRetrieveExample.java&#34;&gt;GetBotExample.java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;non-stream chat&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coze-dev/coze-java/main/example/src/main/java/example/chat/ChatExample.java&#34;&gt;ChatExample.java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;steam chat&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coze-dev/coze-java/main/example/src/main/java/example/chat/StreamChatExample.java&#34;&gt;StreamChatExample.java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;chat with local plugin&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coze-dev/coze-java/main/example/src/main/java/example/chat/SubmitToolOutputExample.java&#34;&gt;SubmitToolOutputExample.java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;chat with image&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coze-dev/coze-java/main/example/src/main/java/example/chat/ChatWithImageExample.java&#34;&gt;ChatWithImageExample.java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;non-stream workflow chat&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coze-dev/coze-java/main/example/src/main/java/example/workflow/RunWorkflowExample.java&#34;&gt;RunWorkflowExample.java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;stream workflow chat&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coze-dev/coze-java/main/example/src/main/java/example/workflow/StreamWorkflowExample.java&#34;&gt;StreamWorkflowExample.java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;stream workflow chat with rx&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coze-dev/coze-java/main/example/src/main/java/example/workflow/StreamWorkflowChatExample.java&#34;&gt;StreamWorkflowChatExample.java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;async workflow run&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coze-dev/coze-java/main/example/src/main/java/example/workflow/AsyncRunWorkflowExample.java&#34;&gt;AsyncRunWorkflowExample.java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;conversation&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coze-dev/coze-java/main/example/src/main/java/example/conversation/ConversationCreateExample.java&#34;&gt;CreateConversationExample.java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;list conversation&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coze-dev/coze-java/main/example/src/main/java/example/conversation/ConversationsListExample.java&#34;&gt;ListConversationsExample.java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;workspace&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coze-dev/coze-java/main/example/src/main/java/example/workspace/WorkspaceListExample.java&#34;&gt;ListWorkspaceExample.java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;create update delete message&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coze-dev/coze-java/main/example/src/main/java/example/conversation/message/MessageCrudExample.java&#34;&gt;ListWorkspaceExample.java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;list message&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coze-dev/coze-java/main/example/src/main/java/example/conversation/message/MessageListExample.java&#34;&gt;ListWorkspaceExample.java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;create update delete document&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coze-dev/coze-java/main/example/src/main/java/example/datasets/document/DocumentCrudExample.java&#34;&gt;DocumentCrudExample.java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;list document&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coze-dev/coze-java/main/example/src/main/java/example/datasets/document/DocumentListExample.java&#34;&gt;DocumentListExample.java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;create update delete dataset&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coze-dev/coze-java/main/example/src/main/java/example/datasets/DatasetCrudExample.java&#34;&gt;DatasetCrudExample.java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;list dataset&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coze-dev/coze-java/main/example/src/main/java/example/datasets/DatasetListExample.java&#34;&gt;DatasetListExample.java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;update image caption&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coze-dev/coze-java/main/example/src/main/java/example/datasets/image/ImageCrudExample.java&#34;&gt;ImageCrudExample.java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;list image&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coze-dev/coze-java/main/example/src/main/java/example/datasets/image/ImageListExample.java&#34;&gt;ImageListExample.java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;duplicate template&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coze-dev/coze-java/main/example/src/main/java/example/template/TemplateDuplicateExample.java&#34;&gt;TemplateDuplicateExample.java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;initial client&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coze-dev/coze-java/main/example/src/main/java/example/service/InitClientExample.java&#34;&gt;InitServiceExample.java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;how to handle exception&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coze-dev/coze-java/main/example/src/main/java/example/service/HandlerExceptionExample.java&#34;&gt;HandlerExceptionExample.java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;get request log id&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coze-dev/coze-java/main/example/src/main/java/example/service/GetLogExample.java&#34;&gt;GetLogExample.java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;set timeout&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coze-dev/coze-java/main/example/src/main/java/example/service/SetRequestTimeoutExample.java&#34;&gt;SetRequestTimeoutExample.java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;websocket chat&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coze-dev/coze-java/main/example/src/main/java/example/websocket/chat/ChatExample.java&#34;&gt;ChatExample.java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;websocket speech synthesis&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coze-dev/coze-java/main/example/src/main/java/example/websocket/audio/speech/WebsocketAudioSpeechExample.java&#34;&gt;WebsocketAudioSpeechExample.java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;websocket transcription&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coze-dev/coze-java/main/example/src/main/java/example/websocket/audio/transcriptions/WebsocketTranscriptionsExample.java&#34;&gt;WebsocketTranscriptionsExample.java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Initialize the Coze Client&lt;/h3&gt; &#xA;&lt;p&gt;To get started, visit &lt;a href=&#34;https://www.coze.com/open/oauth/pats&#34;&gt;https://www.coze.com/open/oauth/pats&lt;/a&gt; (or &lt;a href=&#34;https://www.coze.cn/open/oauth/pats&#34;&gt;https://www.coze.cn/open/oauth/pats&lt;/a&gt; for the CN environment).&lt;/p&gt; &#xA;&lt;p&gt;Create a new token by clicking &#34;Add Token&#34;. Configure the token name, expiration time, and required permissions. Click OK to generate your personal access token.&lt;/p&gt; &#xA;&lt;p&gt;Important: Store your personal access token securely to prevent unauthorized access.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public void example() {&#xA;    // Get an access_token through personal access token or oauth.&#xA;    String token = System.getenv(&#34;COZE_API_TOKEN&#34;);&#xA;    TokenAuth authCli = new TokenAuth(token);&#xA;    /*&#xA;     * The default access is api.coze.com, but if you need to access api.coze.cn&#xA;     * please use baseUrl to configure the API endpoint to access&#xA;     */&#xA;    String baseUrl = System.getenv(&#34;COZE_API_BASE&#34;);&#xA;    CozeAPI coze = new CozeAPI.Builder()&#xA;            .baseURL(baseUrl)&#xA;            .auth(authCli)&#xA;            .client(new OkHttpClient.Builder().build()) &#xA;            .build();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Chat&lt;/h3&gt; &#xA;&lt;p&gt;First, create a bot instance in Coze. The bot ID is the last number in the web link URL.&lt;/p&gt; &#xA;&lt;h4&gt;Non-Stream Chat&lt;/h4&gt; &#xA;&lt;p&gt;The SDK provides a convenient wrapper function for non-streaming chat operations. It handles polling and message retrieval automatically. Use createAndPoll to simplify the process:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public void example() throws Exception {&#xA;    String token = System.getenv(&#34;COZE_API_TOKEN&#34;);&#xA;    String botID = System.getenv(&#34;PUBLISHED_BOT_ID&#34;);&#xA;    String uid = System.getenv(&#34;USER_ID&#34;);&#xA;    CozeAPI coze = new CozeAPI.Builder()&#xA;            .baseURL(System.getenv(&#34;COZE_API_BASE&#34;))&#xA;            .auth(new TokenAuth(token))&#xA;            .readTimeout(10000)&#xA;            .build();&#xA;    ChatReq req = ChatReq.builder()&#xA;                         .botID(botID)&#xA;                         .userID(uid)&#xA;                         .messages(Collections.singletonList(Message.buildUserQuestionText(&#34;What can you do?&#34;)))&#xA;                         .build();&#xA;    ChatPoll chat = coze.chat().createAndPoll(req);&#xA;    for (Message message : chat.messages) {&#xA;        System.out.println(message.content);&#xA;    }&#xA;    if (chat.chat.status == ChatStatus.COMPLETED) {&#xA;        System.out.println(&#34;token usage:&#34; + chat.chat.usage.tokenCount);&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Stream Chat&lt;/h4&gt; &#xA;&lt;p&gt;Use coze.chat.stream() to create a streaming chat session. This returns a Chat Iterator that you can use to process chat events as they arrive:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;&#xA;public void example() {&#xA;    String token = System.getenv(&#34;COZE_API_TOKEN&#34;);&#xA;    String botID = System.getenv(&#34;PUBLISHED_BOT_ID&#34;);&#xA;    String userID = System.getenv(&#34;USER_ID&#34;);&#xA;    TokenAuth authCli = new TokenAuth(token);&#xA;    CozeAPI coze = new CozeAPI.Builder()&#xA;            .baseURL(System.getenv(&#34;COZE_API_BASE&#34;))&#xA;            .auth(authCli)&#xA;            .build();&#xA;    ChatReq req = ChatReq.builder()&#xA;            .botID(botID)&#xA;            .userID(userID)&#xA;            .messages(Collections.singletonList(Message.buildUserQuestionText(&#34;What can you do?&#34;)))&#xA;            .build();&#xA;    Flowable&amp;lt;ChatEvent&amp;gt; resp = coze.chat().stream(req);&#xA;    resp.blockingForEach(event -&amp;gt; {&#xA;        if (ChatEventType.CONVERSATION_MESSAGE_DELTA.equals(event.getEvent())) {&#xA;            System.out.print(event.getMessage().getContent());&#xA;        }&#xA;        if (ChatEventType.CONVERSATION_CHAT_COMPLETED.equals(event.getEvent())) {&#xA;            System.out.println(&#34;Token usage:&#34; + event.getChat().getUsage().getTokenCount());&#xA;        }&#xA;    });&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bots&lt;/h3&gt; &#xA;&lt;p&gt;The SDK enables you to programmatically create, update, publish and list bots:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public void example() {&#xA;    // Get an access_token through personal access token or oauth.&#xA;    String token = System.getenv(&#34;COZE_API_TOKEN&#34;);&#xA;    TokenAuth authCli = new TokenAuth(token);&#xA;    // Init the Coze client through the access_token.&#xA;    CozeAPI coze = new CozeAPI.Builder()&#xA;            .baseURL(System.getenv(&#34;COZE_API_BASE&#34;))&#xA;            .auth(authCli)&#xA;            .build();&#xA;    /*&#xA;    * step one, create a bot&#xA;    * */&#xA;    String workspaceID = System.getenv(&#34;WORKSPACE_ID&#34;);&#xA;    // set the prompt of your bot&#xA;    BotPromptInfo promptInfo = new BotPromptInfo(&#34;your prompt&#34;);&#xA;    // set the onboarding info of your bot&#xA;    BotOnboardingInfo onboardingInfo = BotOnboardingInfo.builder()&#xA;            .prologue(&#34;the prologue of your bot&#34;)&#xA;            .suggestedQuestions(Arrays.asList(&#34;question 1&#34;, &#34;question 2&#34;))&#xA;            .build();&#xA;    // Call the upload file interface to get the avatar id.&#xA;    String avatarPath = &#34;/path/avatar.jpg&#34;;&#xA;    FileInfo avatarInfo = coze.files().upload(avatarPath);&#xA;    // build the request&#xA;    CreateBotReq createReq = CreateBotReq.builder()&#xA;            .spaceID(workspaceID)&#xA;            .description(&#34;the description of your bot&#34;)&#xA;            .name(&#34;the name of your bot&#34;)&#xA;            .promptInfo(promptInfo)&#xA;            .onboardingInfo(onboardingInfo)&#xA;            .iconFileID(avatarInfo.getID())&#xA;            .build();&#xA;    // Invoke the creation interface to create a bot in the draft status, and you can get the bot id.&#xA;    String botID = coze.bots().create(createReq).getBotID();&#xA;    /*&#xA;     * step two, update the bot, you can update the bot after being created&#xA;     * in this example, we will update the avatar of the bot&#xA;     */&#xA;    // Call the publishing interface to publish the bot on the api channel.&#xA;    PublishBotResult updateResp = coze.bots().publish(PublishBotReq.of(botID));&#xA;    /*&#xA;     * step three, you can also modify the bot configuration and republish it.&#xA;     * in this example, we will update the avatar of the bot&#xA;     */&#xA;    // set the onboarding info of your bot&#xA;    // Call the upload file interface to get the avatar id.&#xA;    String newAvatarPath = &#34;/path/new_avatar.jpg&#34;;&#xA;    FileInfo newAvatarInfo = coze.files().upload(newAvatarPath);&#xA;    // build the request&#xA;    UpdateBotReq updateReq = UpdateBotReq.builder()&#xA;            .botID(botID)&#xA;            .iconFileID(newAvatarInfo.getID())&#xA;            .build();&#xA;    // Invoke the update interface to update a bot, It means success that no exception has been thrown.&#xA;    coze.bots().update(updateReq);&#xA;    updateResp = coze.bots().publish(PublishBotReq.of(botID));&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Conversations&lt;/h3&gt; &#xA;&lt;p&gt;The SDK provides comprehensive conversation management capabilities, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Creating new conversations&lt;/li&gt; &#xA; &lt;li&gt;Conducting chat sessions&lt;/li&gt; &#xA; &lt;li&gt;Retrieving message history&lt;/li&gt; &#xA; &lt;li&gt;Managing conversation state&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;&#xA;public void example() {&#xA;    // Get an access_token through personal access token or oauth.&#xA;    String token = System.getenv(&#34;COZE_API_TOKEN&#34;);&#xA;    TokenAuth authCli = new TokenAuth(token);&#xA;    // Init the Coze client through the access_token.&#xA;    CozeAPI coze = new CozeAPI.Builder()&#xA;            .baseURL(System.getenv(&#34;COZE_API_BASE&#34;))&#xA;            .auth(authCli)&#xA;            .readTimeout(10000)&#xA;            .build();&#xA;    // create conversation&#xA;    Conversation resp = coze.conversations().create(new CreateConversationReq());&#xA;    System.out.println(&#34;create conversations&#34; + resp);&#xA;    // retrieve conversation&#xA;    String conversationID = resp.getId();&#xA;    Conversation getResp = coze.conversations().retrieve(RetrieveConversationReq.of(conversationID));&#xA;    System.out.println(&#34;retrieve conversations:&#34; + getResp);&#xA;    // append message to conversation&#xA;    Message msgs = coze.conversations().messages().create(CreateMessageReq&#xA;            .builder()&#xA;            .conversationID(conversationID)&#xA;            // if you want to create object content, you can use followed method to simplify your code&#xA;            .objectContent(&#xA;                    Arrays.asList(MessageObjectString.buildText(&#34;hello&#34;),&#xA;                            MessageObjectString.buildImageByURL(System.getenv(&#34;PICTURE_URL&#34;)),&#xA;                            MessageObjectString.buildFileByURL(System.getenv(&#34;FILE_URL&#34;))))&#xA;            .build());&#xA;    System.out.println(msgs);&#xA;    /*&#xA;    * retrieve message&#xA;    * */&#xA;    Message retrievedMsg = coze.conversations().messages().retrieve(RetrieveMessageReq.builder()&#xA;            .conversationID(conversationID)&#xA;            .messageID(message.getId())&#xA;            .build());&#xA;    System.out.println(retrievedMsg);&#xA;    /*&#xA;    * update message&#xA;    * */&#xA;    UpdateMessageReq updateReq = UpdateMessageReq.builder()&#xA;            .conversationID(conversationID).messageID(message.getId())&#xA;            .content(String.format(&#34;modified message content:%s&#34;, message.getContent()))&#xA;            .contentType(MessageContentType.TEXT).build();&#xA;    Message resp = coze.conversations().messages().update(updateReq);&#xA;    System.out.println(resp);&#xA;    /*&#xA;    * delete message&#xA;    * */&#xA;    Message deletedMsg = coze.conversations().messages().delete(DeleteMessageReq.builder()&#xA;            .conversationID(conversationID)&#xA;            .messageID(message.getId())&#xA;            .build());&#xA;    System.out.println(deletedMsg);&#xA;    // list messages&#xA;    ListMessageReq req = ListMessageReq.builder()&#xA;            .conversationID(conversationID)&#xA;            .limit(limit)&#xA;            .build();&#xA;    PageResult&amp;lt;Message&amp;gt; messages = coze.conversations().messages().list(req);&#xA;    Iterator&amp;lt;Message&amp;gt; iter = messages.getIterator();&#xA;    iter.forEachRemaining(System.out::println);&#xA;    // clear conversation&#xA;    ClearConversationResult clearResp = coze.conversations().clear(ClearConversationReq.of(conversationID));&#xA;    System.out.println(clearResp);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Files&lt;/h3&gt; &#xA;&lt;p&gt;The SDK supports file and image uploads. You can use uploaded files for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bot avatars&lt;/li&gt; &#xA; &lt;li&gt;Multimodal conversations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public void example() {&#xA;    String token = System.getenv(&#34;COZE_API_TOKEN&#34;);&#xA;    TokenAuth authCli = new TokenAuth(token);&#xA;    CozeAPI coze = new CozeAPI.Builder()&#xA;            .baseURL(System.getenv(&#34;COZE_API_BASE&#34;))&#xA;            .auth(authCli)&#xA;            .readTimeout(10000)&#xA;            .build();&#xA;    String filePath = System.getenv(&#34;FILE_PATH&#34;);&#xA;    //*** upload file ***//&#xA;    FileInfo fileInfo = coze.files().upload(filePath);&#xA;    // you can also upload file in byte array&#xA;    FileInfo fileInfo = coze.files().upload(new byte[1024]);&#xA;    //*** retrive file ***//&#xA;    FileInfo retrievedInfo = coze.files().retrieve(fileInfo.getID());&#xA;    System.out.println(retrievedInfo);&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Workflows&lt;/h3&gt; &#xA;&lt;p&gt;Coze also enables users to directly invoke the workflow.&lt;/p&gt; &#xA;&lt;h4&gt;Non-stream workflow run&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static void main(String[] args) {&#xA;// Get an access_token through personal access token or oauth.&#xA;    String token = System.getenv(&#34;COZE_API_TOKEN&#34;);&#xA;    TokenAuth authCli = new TokenAuth(token);&#xA;    // Init the Coze client through the access_token.&#xA;    CozeAPI coze = new CozeAPI.Builder()&#xA;        .baseURL(System.getenv(&#34;COZE_API_BASE&#34;))&#xA;        .auth(authCli)&#xA;        .readTimeout(10000)&#xA;        .build();&#xA;    String workflowID = System.getenv(&#34;WORKSPACE_ID&#34;);&#xA;    // if your workflow need input params, you can send them by map&#xA;    Map&amp;lt;String, Object&amp;gt; data = new HashMap&amp;lt;&amp;gt;();&#xA;    data.put(&#34;param name&#34;, &#34;param values&#34;);&#xA;    RunWorkflowReq.RunWorkflowReqBuilder builder = RunWorkflowReq.builder();&#xA;    builder.workflowID(workflowID).parameters(data);&#xA;    RunWorkflowResp resp = coze.workflows().runs().run(builder.build());&#xA;    System.out.println(resp);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Stream workflow run&lt;/h4&gt; &#xA;&lt;p&gt;The returned result of the streaming interface is an iterator and can be directly iterated.&lt;/p&gt; &#xA;&lt;p&gt;When the workflow incorporates question-and-answer nodes, the streaming interface will return the INTERRUPT event.&lt;/p&gt; &#xA;&lt;p&gt;Users should call the resume interface to submit the results of the question-and-answer.&lt;/p&gt; &#xA;&lt;p&gt;The return value of resume remains an iterator, so recursive processing might be necessary here.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static void main(String[] args) {&#xA;    // Get an access_token through personal access token or oauth.&#xA;    String token = System.getenv(&#34;COZE_API_TOKEN&#34;);&#xA;    TokenAuth authCli = new TokenAuth(token);&#xA;    // Init the Coze client through the access_token.&#xA;    CozeAPI coze = new CozeAPI.Builder()&#xA;            .baseURL(System.getenv(&#34;COZE_API_BASE&#34;))&#xA;            .auth(authCli)&#xA;            .readTimeout(10000)&#xA;            .build();&#xA;    String workflowID = System.getenv(&#34;WORKSPACE_ID&#34;);&#xA;    // if your workflow need input params, you can send them by map&#xA;    Map&amp;lt;String, Object&amp;gt; data = new HashMap&amp;lt;&amp;gt;();&#xA;    data.put(&#34;param name&#34;, &#34;param values&#34;);&#xA;    RunWorkflowReq.RunWorkflowReqBuilder builder = RunWorkflowReq.builder();&#xA;    builder.workflowID(workflowID).parameters(data);&#xA;    Flowable&amp;lt;WorkflowEvent&amp;gt; flowable = coze.workflows().runs().stream(builder.build());&#xA;    handleEvent(flowable, coze, workflowID);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dataset&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static void main(String[] args) {&#xA;    // Get an access_token through personal access token or oauth.&#xA;    String token = System.getenv(&#34;COZE_API_TOKEN&#34;);&#xA;    TokenAuth authCli = new TokenAuth(token);&#xA;    // Init the Coze client through the access_token.&#xA;    CozeAPI coze = new CozeAPI.Builder()&#xA;            .baseURL(System.getenv(&#34;COZE_API_BASE&#34;))&#xA;            .auth(authCli)&#xA;            .readTimeout(10000)&#xA;            .build();&#xA;    Long datasetID = Long.parseLong(System.getenv(&#34;DATASET_ID&#34;));&#xA;    /*&#xA;     * create document in to specific dataset&#xA;     * */&#xA;    CreateDocumentReq createReq = CreateDocumentReq.builder()&#xA;            .datasetID(datasetID)&#xA;            .documentBases(Arrays.asList(&#xA;                    DocumentBase.buildWebPage(&#34;web doc example&#34;, &#34;https://your-website.com&#34;), //create datasets documents by web page&#xA;                    DocumentBase.buildLocalFile(&#34;file doc example&#34;, &#34;your file content&#34;, &#34;txt&#34;))) //create datasets documents by local file&#xA;            .build();&#xA;    CreateDocumentResp creatResp = coze.datasets().documents().create(createReq);&#xA;    List&amp;lt;Long&amp;gt; documentIDs = new ArrayList&amp;lt;&amp;gt;();&#xA;    for (Document documentBase : creatResp.getDocumentInfos()) {&#xA;        documentIDs.add(Long.parseLong(documentBase.getDocumentID()));&#xA;    }&#xA;    /*&#xA;     * update document. It means success that no exception has been thrown&#xA;     * */&#xA;    UpdateDocumentReq updateReq = UpdateDocumentReq.builder()&#xA;            .documentID(documentIDs.get(0))&#xA;            .documentName(&#34;new name&#34;)&#xA;            .build();&#xA;    coze.datasets().documents().update(updateReq);&#xA;    /*&#xA;     * delete document. It means success that no exception has been thrown&#xA;     * */&#xA;    coze.datasets().documents().delete(DeleteDocumentReq.builder().documentIDs(Collections.singletonList(documentIDs.get(0))).build());&#xA;&#xA;    /*&#xA;     * list documents&#xA;     * */&#xA;    ListDocumentReq req = ListDocumentReq.builder()&#xA;                .size(2)&#xA;                .datasetID(datasetID)&#xA;                .page(1)&#xA;                .build();&#xA;&#xA;    // you can use iterator to automatically retrieve next page&#xA;    PageResult&amp;lt;Document&amp;gt; documents = coze.datasets().documents().list(req);&#xA;    Iterator&amp;lt;Document&amp;gt; iter = documents.getIterator();&#xA;    iter.forEachRemaining(System.out::println);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;OAuth App&lt;/h3&gt; &#xA;&lt;h4&gt;Web OAuth App&lt;/h4&gt; &#xA;&lt;p&gt;To create a Web OAuth application:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Visit &lt;a href=&#34;https://www.coze.com/open/oauth/apps&#34;&gt;https://www.coze.com/open/oauth/apps&lt;/a&gt; (or &lt;a href=&#34;https://www.coze.cn/open/oauth/apps&#34;&gt;https://www.coze.cn/open/oauth/apps&lt;/a&gt; for CN environment)&lt;/li&gt; &#xA; &lt;li&gt;Create a new OAuth App of type &#34;Web application&#34;&lt;/li&gt; &#xA; &lt;li&gt;Follow the setup guide at &lt;a href=&#34;https://www.coze.com/docs/developer_guides/oauth_code&#34;&gt;https://www.coze.com/docs/developer_guides/oauth_code&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Upon completion, you&#39;ll receive three critical parameters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Client ID&lt;/li&gt; &#xA; &lt;li&gt;Client secret (store securely)&lt;/li&gt; &#xA; &lt;li&gt;Redirect URI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public void initOAuthClient() {&#xA;    String clientSecret = System.getenv(&#34;COZE_WEB_OAUTH_CLIENT_SECRET&#34;);&#xA;    String clientID = System.getenv(&#34;COZE_WEB_OAUTH_CLIENT_ID&#34;);&#xA;    &#xA;    String cozeAPIBase = System.getenv(&#34;COZE_API_BASE&#34;);&#xA;    if (cozeAPIBase == null || cozeAPIBase.isEmpty()) {&#xA;        cozeAPIBase = Consts.COZE_COM_BASE_URL;&#xA;    }&#xA;    &#xA;    WebOAuthClient oauth = new WebOAuthClient.WebOAuthBuilder()&#xA;            .clientID(clientID)&#xA;            .clientSecret(clientSecret)&#xA;            .baseURL(cozeAPIBase)&#xA;            .build();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The WebOAuth authorization process is to first generate a coze authorization link and send it to the coze user requiring authorization.&lt;/p&gt; &#xA;&lt;p&gt;Once the coze user opens the link, they can see the authorization consent button.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;&#xA;public void genAuthLink() {&#xA;    String redirectURI = System.getenv(&#34;COZE_WEB_OAUTH_REDIRECT_URI&#34;);&#xA;    // Generate the authorization link and direct the user to open it.&#xA;    String oauthURL = oauth.getOAuthURL(redirectURI, null);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After the user clicks the authorization consent button, the coze web page will redirect to the redirect address configured in the authorization link and carry the authorization code and state parameters in the address via the query string.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public void getAccessToken() {&#xA;    /*&#xA;    After the user clicks the authorization consent button, the Coze web page will redirect&#xA;    to the redirect address configured in the authorization link and carry the authorization&#xA;    code and state parameters in the address via the query string.&#xA;    Get from the query of the redirect interface: query.get(&#39;code&#39;)&#xA;    */&#xA;    String code = &#34;mock code&#34;;&#xA;&#xA;    /*&#xA;    After obtaining the code after redirection, the interface to exchange the code for a&#xA;    token can be invoked to generate the Coze access_token of the authorized user.&#xA;    */&#xA;    OAuthToken resp = oauth.getAccessToken(code, redirectURI);&#xA;    System.out.println(resp);&#xA;&#xA;    // Use the access token to init Coze client&#xA;    CozeAPI coze = new CozeAPI.Builder().auth(new TokenAuth(resp.getAccessToken())).baseURL(cozeAPIBase).build();&#xA;&#xA;    // When the token expires, you can also refresh and re-obtain the token&#xA;    resp = oauth.refreshToken(resp.getRefreshToken());&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;JWT OAuth App&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The SDK uses jjwt version 0.11.5. If you are using jjwt version 0.12.x or above:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;You need to exclude jjwt dependencies when importing the SDK:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;for Maven:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;com.coze&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;coze-api&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;0.1.0&amp;lt;/version&amp;gt;&#xA;    &amp;lt;exclusions&amp;gt;&#xA;        &amp;lt;exclusion&amp;gt;&#xA;            &amp;lt;groupId&amp;gt;io.jsonwebtoken&amp;lt;/groupId&amp;gt;&#xA;            &amp;lt;artifactId&amp;gt;jjwt-api&amp;lt;/artifactId&amp;gt;&#xA;        &amp;lt;/exclusion&amp;gt;&#xA;        &amp;lt;exclusion&amp;gt;&#xA;            &amp;lt;groupId&amp;gt;io.jsonwebtoken&amp;lt;/groupId&amp;gt;&#xA;            &amp;lt;artifactId&amp;gt;jjwt-impl&amp;lt;/artifactId&amp;gt;&#xA;        &amp;lt;/exclusion&amp;gt;&#xA;        &amp;lt;exclusion&amp;gt;&#xA;            &amp;lt;groupId&amp;gt;io.jsonwebtoken&amp;lt;/groupId&amp;gt;&#xA;            &amp;lt;artifactId&amp;gt;jjwt-jackson&amp;lt;/artifactId&amp;gt;&#xA;        &amp;lt;/exclusion&amp;gt;&#xA;    &amp;lt;/exclusions&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;for Gradle:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;implementation(&#39;com.coze:coze-api:0.1.0&#39;) {&#xA;    exclude group: &#39;io.jsonwebtoken&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/coze-dev/coze-java/main/example/src/main/java/example/auth/ExampleJWTBuilder.java&#34;&gt;ExampleJWTBuilder.java&lt;/a&gt; to implement your own JWT builder.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set your jwt builder to JWTOAuthClient when initialize it&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;JWTOAuthClient oauth = (new JWTOAuthClient.JWTOAuthBuilder())&#xA;              .privateKey(config.getPrivateKey())&#xA;              .publicKey(config.getPublicKeyId())&#xA;              .clientID(config.getClientId())&#xA;              .baseURL(config.getCozeApiBase())&#xA;              .jwtBuilder(new ExampleJWTBuilder()) // set your jwt builder&#xA;              .build();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Firstly, users need to access &lt;a href=&#34;https://www.coze.com/open/oauth/apps&#34;&gt;https://www.coze.com/open/oauth/apps&lt;/a&gt;. For the cn environment, users need to access &lt;a href=&#34;https://www.coze.cn/open/oauth/apps&#34;&gt;https://www.coze.cn/open/oauth/apps&lt;/a&gt; to create an OAuth App of the type of Service application.&lt;/p&gt; &#xA;&lt;p&gt;The specific creation process can be referred to in the document: &lt;a href=&#34;https://www.coze.com/docs/developer_guides/oauth_jwt&#34;&gt;https://www.coze.com/docs/developer_guides/oauth_jwt&lt;/a&gt;. For the cn environment, it can be accessed at &lt;a href=&#34;https://www.coze.cn/docs/developer_guides/oauth_jwt&#34;&gt;https://www.coze.cn/docs/developer_guides/oauth_jwt&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After the creation is completed, three parameters, namely the client ID, private key, and public key id, can be obtained. For the client secret and public key id, users need to keep it securely to avoid leakage.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public void initOAuthClient() {&#xA;    String cozeAPIBase = System.getenv(&#34;COZE_API_BASE&#34;);&#xA;    if (cozeAPIBase == null || cozeAPIBase.isEmpty()) {&#xA;        cozeAPIBase = &#34;api.coze.cn&#34;;&#xA;    }&#xA;    String jwtOauthClientID = System.getenv(&#34;COZE_JWT_OAUTH_CLIENT_ID&#34;);&#xA;    String jwtOauthPrivateKey = System.getenv(&#34;COZE_JWT_OAUTH_PRIVATE_KEY&#34;);&#xA;    String jwtOauthPrivateKeyFilePath = System.getenv(&#34;COZE_JWT_OAUTH_PRIVATE_KEY_FILE_PATH&#34;);&#xA;    String jwtOauthPublicKeyID = System.getenv(&#34;COZE_JWT_OAUTH_PUBLIC_KEY_ID&#34;);&#xA;    JWTOAuthClient oauth = null;&#xA;    try {&#xA;        jwtOauthPrivateKey = new String(Files.readAllBytes(Paths.get(jwtOauthPrivateKeyFilePath)), StandardCharsets.UTF_8);&#xA;    } catch (IOException e) {&#xA;        e.printStackTrace();&#xA;    }&#xA;    /*&#xA;    The jwt oauth type requires using private to be able to issue a jwt token, and through&#xA;    the jwt token, apply for an access_token from the coze service. The sdk encapsulates&#xA;    this procedure, and only needs to use get_access_token to obtain the access_token under&#xA;    the jwt oauth process.&#xA;    Generate the authorization token&#xA;    The default ttl is 900s, and developers can customize the expiration time, which can be&#xA;    set up to 24 hours at most.&#xA;    */&#xA;    try {&#xA;        oauth = new JWTOAuthClient.JWTOAuthBuilder()&#xA;                .clientID(jwtOauthClientID)&#xA;                .privateKey(jwtOauthPrivateKey)&#xA;                .publicKey(jwtOauthPublicKeyID)&#xA;                .baseURL(cozeAPIBase)&#xA;                .build();&#xA;    } catch (Exception e) {&#xA;        e.printStackTrace();&#xA;        return;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The jwt oauth type requires using private to be able to issue a jwt token, and through the jwt token, apply for an access_token from the coze service.&lt;/p&gt; &#xA;&lt;p&gt;The sdk encapsulates this procedure, and only needs to use get_access_token to obtain the access_token under the jwt oauth process.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;# The jwt process does not require any other operations, you can directly apply for a token&#xA;oauth_token = jwt_oauth_app.get_access_token(ttl=3600)&#xA;&#xA;public void getAccessToken() {&#xA;    // The jwt process does not require any other operations, you can directly apply for a token&#xA;    OAuthToken resp = oauth.getAccessToken(3600);&#xA;&#xA;    // Use the access token to init Coze client&#xA;    CozeAPI coze = new CozeAPI.Builder().auth(new TokenAuth(resp.getAccessToken())).baseURL(cozeAPIBase).build();&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;PKCE OAuth App&lt;/h4&gt; &#xA;&lt;p&gt;PKCE stands for Proof Key for Code Exchange, and it&#39;s an extension to the OAuth 2.0 authorization code flow designed to enhance security for public clients, such as mobile and single-page applications.&lt;/p&gt; &#xA;&lt;p&gt;Firstly, users need to access &lt;a href=&#34;https://www.coze.com/open/oauth/apps&#34;&gt;https://www.coze.com/open/oauth/apps&lt;/a&gt;. For the cn environment, users need to access &lt;a href=&#34;https://www.coze.cn/open/oauth/apps&#34;&gt;https://www.coze.cn/open/oauth/apps&lt;/a&gt; to create an OAuth App of the type of Mobile/PC/Single-page application.&lt;/p&gt; &#xA;&lt;p&gt;The specific creation process can be referred to in the document: &lt;a href=&#34;https://www.coze.com/docs/developer_guides/oauth_pkce&#34;&gt;https://www.coze.com/docs/developer_guides/oauth_pkce&lt;/a&gt;. For the cn environment, it can be accessed at &lt;a href=&#34;https://www.coze.cn/docs/developer_guides/oauth_pkce&#34;&gt;https://www.coze.cn/docs/developer_guides/oauth_pkce&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After the creation is completed, three parameters, namely the client ID can be obtained.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public void initOAuthClient() {&#xA;    String clientID = System.getenv(&#34;COZE_PKCE_OAUTH_CLIENT_ID&#34;);&#xA;    /*&#xA;     * The default access is api.coze.com, but if you need to access api.coze.cn,&#xA;     * please use base_url to configure the api endpoint to access&#xA;     */&#xA;    String cozeAPIBase = System.getenv(&#34;COZE_API_BASE&#34;);&#xA;    if (cozeAPIBase == null || cozeAPIBase.isEmpty()) {&#xA;        cozeAPIBase = Consts.COZE_COM_BASE_URL;&#xA;    }&#xA;    PKCEOAuthClient oauth = new PKCEOAuthClient.PKCEOAuthBuilder()&#xA;            .clientID(clientID)&#xA;            .baseURL(cozeAPIBase)&#xA;            .build();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the pkce oauth process, first, need to select a suitable code_challenge_method. Coze supports two types: plain and s256.&lt;/p&gt; &#xA;&lt;p&gt;Then, based on the selected code_challenge_method type, hash the code_verifier into the code_challenge. Finally, based on the callback address, code_challenge, and code_challenge_method, an authorization link can be generated.&lt;/p&gt; &#xA;&lt;p&gt;The sdk will automatically handle the code_challenge process, and return the code verifier.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;&#xA;public void genAuthLink() {&#xA;    String redirectURI = System.getenv(&#34;COZE_WEB_OAUTH_REDIRECT_URI&#34;);&#xA;    PKCEAuthParam oauthURL = oauth.genOAuthURL(redirectURI, &#34;state&#34;, PKCEOAuthClient.CodeChallengeMethod.S256);&#xA;    System.out.println(oauthURL);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Developers should lead users to open up this authorization link.&lt;/p&gt; &#xA;&lt;p&gt;When the user consents to the authorization, Coze will redirect with the code to the callback address configured by the developer, and the developer can obtain this code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public void getAccessToken() {&#xA;    /*&#xA;    Open the authorization link in your browser and authorize this OAuth App&#xA;    After authorization, you can exchange code_verifier for access token&#xA;    */&#xA;    String code = &#34;mock code&#34;;&#xA;    /*&#xA;    After obtaining the code after redirection, the interface to exchange the code for a&#xA;    token can be invoked to generate the Coze access_token of the authorized user.&#xA;    */&#xA;    OAuthToken resp = oauth.getAccessToken(code, redirectURI, &#34;&#34;);&#xA;    System.out.println(resp);&#xA;    // Use the access token to init Coze client&#xA;    CozeAPI coze = new CozeAPI.Builder().auth(new TokenAuth(resp.getAccessToken())).baseURL(cozeAPIBase).build();&#xA;    // When the token expires, you can also refresh and re-obtain the token&#xA;    resp = oauth.refreshToken(resp.getRefreshToken());&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Device OAuth App&lt;/h4&gt; &#xA;&lt;p&gt;The Device Flow is designed for devices with limited input capabilities or no browser access. This OAuth 2.0 extension enables secure authorization for IoT devices, CLI tools, and other limited-input scenarios.&lt;/p&gt; &#xA;&lt;p&gt;Firstly, users need to access &lt;a href=&#34;https://www.coze.com/open/oauth/apps&#34;&gt;https://www.coze.com/open/oauth/apps&lt;/a&gt;. For the cn environment, users need to access &lt;a href=&#34;https://www.coze.cn/open/oauth/apps&#34;&gt;https://www.coze.cn/open/oauth/apps&lt;/a&gt; to create an OAuth App of the type of TVs/Limited Input devices/Command line programs.&lt;/p&gt; &#xA;&lt;p&gt;The specific creation process can be referred to in the document: &lt;a href=&#34;https://www.coze.com/docs/developer_guides/oauth_device_code&#34;&gt;https://www.coze.com/docs/developer_guides/oauth_device_code&lt;/a&gt;. For the cn environment, it can be accessed at &lt;a href=&#34;https://www.coze.cn/docs/developer_guides/oauth_device_code&#34;&gt;https://www.coze.cn/docs/developer_guides/oauth_device_code&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After the creation is completed, three parameters, namely the client ID can be obtained.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public void initOAuthClient() {&#xA;    String clientID = System.getenv(&#34;COZE_PKCE_OAUTH_CLIENT_ID&#34;);&#xA;    /*&#xA;     * The default access is api.coze.com, but if you need to access api.coze.cn,&#xA;     * please use base_url to configure the api endpoint to access&#xA;     */&#xA;    String cozeAPIBase = System.getenv(&#34;COZE_API_BASE&#34;);&#xA;    if (cozeAPIBase == null || cozeAPIBase.isEmpty()) {&#xA;        cozeAPIBase = Consts.COZE_COM_BASE_URL;&#xA;    }&#xA;    DeviceOAuthClient oauth = new DeviceOAuthClient.DeviceOAuthBuilder()&#xA;        .clientID(clientID)&#xA;        .baseURL(cozeAPIBase)&#xA;        .build();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the device oauth authorization process, developers need to first call the interface of Coze to generate the device code to obtain the user_code and device_code.&lt;/p&gt; &#xA;&lt;p&gt;Then generate the authorization link through the user_code, guide the user to open the link, fill in the user_code, and consent to the authorization.&lt;/p&gt; &#xA;&lt;p&gt;Developers need to call the interface of Coze to generate the token through the device_code.&lt;/p&gt; &#xA;&lt;p&gt;When the user has not authorized or rejected the authorization, the interface will throw an error and return a specific error code.&lt;/p&gt; &#xA;&lt;p&gt;After the user consents to the authorization, the interface will succeed and return the access_token.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// First, you need to request the server to obtain the device code required in the device auth flow&#xA;DeviceAuthCode codeResp = oauth.getDeviceCode();&#xA;&#xA;// The returned device_code contains an authorization link. Developers need to guide users&#xA;// to open up this link.&#xA;// open device_code.verification_url&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The developers then need to use the device_code to poll Coze&#39;s interface to obtain the token.&lt;/p&gt; &#xA;&lt;p&gt;The SDK has encapsulated this part of the code in and handled the different returned error codes. The developers only need to invoke get_access_token.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;try {&#xA;    OAuthToken resp = oauth.getAccessToken(codeResp.getDeviceCode());&#xA;    System.out.println(resp);&#xA;&#xA;    // Use the access token to init Coze client&#xA;    CozeAPI coze = new CozeAPI.Builder().auth(new TokenAuth(resp.getAccessToken())).baseURL(cozeAPIBase).build();&#xA;    // When the token expires, you can also refresh and re-obtain the token&#xA;    resp = oauth.refreshToken(resp.getRefreshToken());&#xA;} catch (CozeAuthException e) {&#xA;    switch (e.getCode()) {&#xA;        case AccessDenied:&#xA;            /*&#xA;            The user rejected the authorization.&#xA;            Developers need to guide the user to open the authorization link again.&#xA;            */&#xA;            break;&#xA;        case ExpiredToken:&#xA;            /*&#xA;            The token has expired. Developers need to guide the user to open&#xA;            the authorization link again.&#xA;            */&#xA;        default:&#xA;            e.printStackTrace();&#xA;            break;&#xA;    }&#xA;} catch (Exception e) {&#xA;    e.printStackTrace();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Streaming usage&lt;/h3&gt; &#xA;&lt;p&gt;Bot chat and workflow run support running in streaming mode.&lt;/p&gt; &#xA;&lt;p&gt;chat streaming example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String token = System.getenv(&#34;COZE_API_TOKEN&#34;);&#xA;String botID = System.getenv(&#34;PUBLISHED_BOT_ID&#34;);&#xA;String userID = System.getenv(&#34;USER_ID&#34;);&#xA;&#xA;TokenAuth authCli = new TokenAuth(token);&#xA;&#xA;// Init the Coze client through the access_token.&#xA;CozeAPI coze = new CozeAPI.Builder()&#xA;        .baseURL(System.getenv(&#34;COZE_API_BASE&#34;))&#xA;        .auth(authCli)&#xA;        .readTimeout(10000)&#xA;        .build();;&#xA;&#xA;/*&#xA; * Step one, create chat&#xA; * Call the coze.chat().stream() method to create a chat. The create method is a streaming&#xA; * chat and will return a Flowable ChatEvent. Developers should iterate the iterator to get&#xA; * chat event and handle them.&#xA; * */&#xA;ChatReq req = ChatReq.builder()&#xA;        .botID(botID)&#xA;        .userID(userID)&#xA;        .messages(Collections.singletonList(Message.buildUserQuestionText(&#34;What can you do?&#34;)))&#xA;        .build();&#xA;&#xA;Flowable&amp;lt;ChatEvent&amp;gt; resp = coze.chat().stream(req);&#xA;resp.blockingForEach(event -&amp;gt; {&#xA;    if (ChatEventType.CONVERSATION_MESSAGE_DELTA.equals(event.getEvent())) {&#xA;        System.out.print(event.getMessage().getContent());&#xA;    }&#xA;    if (ChatEventType.CONVERSATION_CHAT_COMPLETED.equals(event.getEvent())) {&#xA;        System.out.println(&#34;Token usage:&#34; + event.getChat().getUsage().getTokenCount());&#xA;    }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;workflow streaming example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public void streamRun() {&#xA;    // Get an access_token through personal access token or oauth.&#xA;    String token = System.getenv(&#34;COZE_API_TOKEN&#34;);&#xA;    TokenAuth authCli = new TokenAuth(token);&#xA;&#xA;    // Init the Coze client through the access_token.&#xA;    CozeAPI coze = new CozeAPI.Builder()&#xA;            .baseURL(System.getenv(&#34;COZE_API_BASE&#34;))&#xA;            .auth(authCli)&#xA;            .readTimeout(10000)&#xA;            .build();&#xA;&#xA;    String workflowID = System.getenv(&#34;WORKSPACE_ID&#34;);&#xA;&#xA;    // if your workflow need input params, you can send them by map&#xA;    Map&amp;lt;String, Object&amp;gt; data = new HashMap&amp;lt;&amp;gt;();&#xA;    data.put(&#34;param name&#34;, &#34;param values&#34;);&#xA;&#xA;    RunWorkflowReq.RunWorkflowReqBuilder builder = RunWorkflowReq.builder();&#xA;    builder.workflowID(workflowID).parameters(data);&#xA;&#xA;    Flowable&amp;lt;WorkflowEvent&amp;gt; flowable = coze.workflows().runs().stream(builder.build());&#xA;    handleEvent(flowable, coze, workflowID);&#xA;}&#xA;&#xA;private void handleEvent(Flowable&amp;lt;WorkflowEvent&amp;gt; events, CozeAPI coze, String workflowID) {&#xA;    events.subscribe(event -&amp;gt; {&#xA;        switch (event.getEvent()) {&#xA;            case MESSAGE:&#xA;                System.out.println(&#34;Got message&#34; + event.getMessage());&#xA;                break;&#xA;            case ERROR:&#xA;                System.out.println(&#34;Got error&#34; + event.getError());&#xA;                break;&#xA;            case INTERRUPT:&#xA;                handleEvent(coze.workflows().runs().resume(&#xA;                        ResumeRunReq.builder()&#xA;                                .workflowID(workflowID)&#xA;                                .eventID(event.getInterrupt().getInterruptData().getEventID())&#xA;                                .resumeData(&#34;your data&#34;)&#xA;                                .interruptType(event.getInterrupt().getInterruptData().getType())&#xA;                                .build()), coze, workflowID);&#xA;                break;&#xA;            default:&#xA;                break;&#xA;        }&#xA;    }, Throwable::printStackTrace);&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Paginator Iterator&lt;/h3&gt; &#xA;&lt;p&gt;The result returned by all list interfaces is a paginator, which supports iteration.&lt;/p&gt; &#xA;&lt;p&gt;Take the example of listing the bots in a space to explain the three ways to use the paginator iterator:&lt;/p&gt; &#xA;&lt;h4&gt;1. Not using iterators&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String token = System.getenv(&#34;COZE_API_TOKEN&#34;);&#xA;TokenAuth authCli = new TokenAuth(token);&#xA;&#xA;// Init the Coze client through the access_token.&#xA;CozeAPI coze = new CozeAPI.Builder()&#xA;        .baseURL(System.getenv(&#34;COZE_API_BASE&#34;))&#xA;        .auth(authCli)&#xA;        .readTimeout(10000)&#xA;        .build();;&#xA;&#xA;Integer pageNum = 1;&#xA;String workspaceID = System.getenv(&#34;WORKSPACE_ID&#34;);&#xA;ListBotReq listBotReq = ListBotReq.builder()&#xA;        .spaceID(workspaceID)&#xA;        .pageNum(pageNum)&#xA;        .pageSize(10)&#xA;        .build();&#xA;PageResult&amp;lt;SimpleBot&amp;gt; botList = coze.bots().list(listBotReq);&#xA;&#xA;// the api provides two ways for developers to turn pages for all paging interfaces.&#xA;// 1. The first way is to let developers manually call the API to request the next page.&#xA;while (botList.getHasMore()) {&#xA;    pageNum++;&#xA;    listBotReq.setPageNum(pageNum);&#xA;    botList = coze.bots().list(listBotReq);&#xA;}&#xA;&#xA;// 2. The SDK encapsulates an iterator, which can be used to turn pages backward automatically.&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. Iterate over the paginator, getting T&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String token = System.getenv(&#34;COZE_API_TOKEN&#34;);&#xA;TokenAuth authCli = new TokenAuth(token);&#xA;&#xA;// Init the Coze client through the access_token.&#xA;CozeAPI coze = new CozeAPI.Builder()&#xA;        .baseURL(System.getenv(&#34;COZE_API_BASE&#34;))&#xA;        .auth(authCli)&#xA;        .readTimeout(10000)&#xA;        .build();;&#xA;&#xA;Integer pageNum = 1;&#xA;String workspaceID = System.getenv(&#34;WORKSPACE_ID&#34;);&#xA;ListBotReq listBotReq = ListBotReq.builder()&#xA;        .spaceID(workspaceID)&#xA;        .pageNum(pageNum)&#xA;        .pageSize(10)&#xA;        .build();&#xA;PageResult&amp;lt;SimpleBot&amp;gt; botList = coze.bots().list(listBotReq);&#xA;&#xA;// the api provides two ways for developers to turn pages for all paging interfaces.&#xA;// 1. The first way is to let developers manually call the API to request the next page.&#xA;Iterator&amp;lt;SimpleBot&amp;gt; iterator = botList.getIterator();&#xA;while (iterator.hasNext()) {&#xA;    iterator.forEachRemaining(System.out::println);&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;WebSocket&lt;/h3&gt; &#xA;&lt;p&gt;The SDK provides WebSocket interfaces for real-time chat, speech synthesis and speech transcription.&lt;/p&gt; &#xA;&lt;p&gt;You can check the official documentation for more information: &lt;a href=&#34;https://www.coze.cn/open/docs/guides/websocket_openapi&#34;&gt;https://www.coze.cn/open/docs/guides/websocket_openapi&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;WebSocket Chat&lt;/h4&gt; &#xA;&lt;p&gt;WebSocket chat allows real-time communication with bots, including text and audio interactions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;WebsocketChatClient client = coze.websocket()&#xA;    .chat()&#xA;    .create(new WebsocketChatCreateReq(botID, new CallbackHandler()));&#xA;&#xA;// Send audio data&#xA;String audioData = &#34;...&#34;; // Base64 encoded audio data&#xA;client.inputAudioBufferAppend(audioData);&#xA;client.inputAudioBufferComplete();&#xA;&#xA;// Handle responses in callback&#xA;class CallbackHandler extends WebsocketChatCallbackHandler {&#xA;    // Handle text responses&#xA;    @Override&#xA;    public void onConversationMessageDelta(WebsocketChatClient client, ConversationMessageDeltaEvent event) {&#xA;        System.out.printf(&#34;Received: %s\n&#34;, event.getData().getContent());&#xA;    }&#xA;&#xA;    // Handle audio responses  &#xA;    @Override&#xA;    public void onConversationAudioDelta(WebsocketChatClient client, ConversationAudioDeltaEvent event) {&#xA;        byte[] audioData = event.getData().getAudio();&#xA;        // Process audio data...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Speech Synthesis&lt;/h4&gt; &#xA;&lt;p&gt;WebSocket speech synthesis allows real-time text-to-speech conversion:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;WebsocketAudioSpeechClient client = coze.websocket()&#xA;    .audio()&#xA;    .speech()&#xA;    .create(new WebsocketAudioSpeechCreateReq(new CallbackHandler()));&#xA;&#xA;// Configure audio output&#xA;OutputAudio outputAudio = OutputAudio.builder()&#xA;    .voiceId(voiceID)&#xA;    .codec(&#34;pcm&#34;)&#xA;    .speechRate(50)&#xA;    .pcmConfig(PCMConfig.builder().sampleRate(24000).build())&#xA;    .build();&#xA;client.speechUpdate(new SpeechUpdateEventData(outputAudio));&#xA;&#xA;// Send text for synthesis&#xA;client.inputTextBufferAppend(&#34;Hello world!&#34;);&#xA;client.inputTextBufferComplete();&#xA;&#xA;// Handle synthesized audio in callback&#xA;class CallbackHandler extends WebsocketAudioSpeechCallbackHandler {&#xA;    @Override&#xA;    public void onSpeechAudioUpdate(WebsocketAudioSpeechClient client, SpeechAudioUpdateEvent event) {&#xA;        byte[] audioData = event.getDelta();&#xA;        // Process audio data...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Speech Transcription&lt;/h4&gt; &#xA;&lt;p&gt;WebSocket speech transcription provides real-time speech-to-text conversion:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;WebsocketAudioTranscriptionsClient client = coze.websocket()&#xA;    .audio()&#xA;    .transcriptions()&#xA;    .create(new WebsocketAudioTranscriptionsCreateReq(new CallbackHandler()));&#xA;&#xA;// Configure audio input&#xA;InputAudio inputAudio = InputAudio.builder()&#xA;    .sampleRate(24000)&#xA;    .codec(&#34;pcm&#34;)&#xA;    .format(&#34;wav&#34;)&#xA;    .channel(2)&#xA;    .build();&#xA;client.transcriptionsUpdate(new TranscriptionsUpdateEventData(inputAudio));&#xA;&#xA;// Send audio for transcription&#xA;String audioData = &#34;...&#34;; // Base64 encoded audio data&#xA;client.inputAudioBufferAppend(audioData);&#xA;client.inputAudioBufferComplete();&#xA;&#xA;// Handle transcription results in callback&#xA;class CallbackHandler extends WebsocketAudioTranscriptionsCallbackHandler {&#xA;    @Override&#xA;    public void onTranscriptionsMessageUpdate(&#xA;        WebsocketAudioTranscriptionsClient client, &#xA;        TranscriptionsMessageUpdateEvent event) {&#xA;        System.out.println(event.getData().getContent());&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All WebSocket clients support proper resource cleanup:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;try {&#xA;    // Use the client...&#xA;} finally {&#xA;    if (client != null) {&#xA;        client.close();&#xA;    }&#xA;    coze.shutdownExecutor();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>