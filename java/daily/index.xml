<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-17T01:34:50Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>TechEmpower/FrameworkBenchmarks</title>
    <updated>2022-08-17T01:34:50Z</updated>
    <id>tag:github.com,2022-08-17:/TechEmpower/FrameworkBenchmarks</id>
    <link href="https://github.com/TechEmpower/FrameworkBenchmarks" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Source for the TechEmpower Framework Benchmarks project&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Welcome to &lt;a href=&#34;http://www.techempower.com/benchmarks/&#34;&gt;TechEmpower Framework Benchmarks (TFB)&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/TechEmpower/FrameworkBenchmarks/actions?query=workflow%3Abuild+branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/TechEmpower/FrameworkBenchmarks/workflows/build/badge.svg?branch=master&amp;amp;event=push&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re new to the project, welcome! Please feel free to ask questions &lt;a href=&#34;https://github.com/TechEmpower/FrameworkBenchmarks/issues/2978&#34;&gt;here&lt;/a&gt;. We encourage new frameworks and contributors to ask questions. We&#39;re here to help!&lt;/p&gt; &#xA;&lt;p&gt;This project provides representative performance measures across a wide field of web application frameworks. With much help from the community, coverage is quite broad and we are happy to broaden it further with contributions. The project presently includes frameworks on many languages including &lt;code&gt;Go&lt;/code&gt;, &lt;code&gt;Python&lt;/code&gt;, &lt;code&gt;Java&lt;/code&gt;, &lt;code&gt;Ruby&lt;/code&gt;, &lt;code&gt;PHP&lt;/code&gt;, &lt;code&gt;C#&lt;/code&gt;, &lt;code&gt;F#&lt;/code&gt;,&lt;code&gt;Clojure&lt;/code&gt;, &lt;code&gt;Groovy&lt;/code&gt;, &lt;code&gt;Dart&lt;/code&gt;, &lt;code&gt;JavaScript&lt;/code&gt;, &lt;code&gt;Erlang&lt;/code&gt;, &lt;code&gt;Haskell&lt;/code&gt;, &lt;code&gt;Scala&lt;/code&gt;, &lt;code&gt;Perl&lt;/code&gt;, &lt;code&gt;Lua&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, and others. The current tests exercise plaintext responses, JSON serialization, database reads and writes via the object-relational mapper (ORM), collections, sorting, server-side templates, and XSS counter-measures. Future tests will exercise other components and greater computation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.techempower.com/benchmarks/&#34;&gt;Read more and see the results of our tests on cloud and physical hardware&lt;/a&gt;. For descriptions of the test types that we run, see the &lt;a href=&#34;https://github.com/TechEmpower/FrameworkBenchmarks/wiki/Project-Information-Framework-Tests-Overview&#34;&gt;test requirements section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you find yourself in a directory or file that you&#39;re not sure what the purpose is, checkout our &lt;a href=&#34;https://github.com/TechEmpower/FrameworkBenchmarks/wiki/Codebase-File-Structure&#34;&gt;file structure&lt;/a&gt; in our documentation, which will briefly explain the use of relevant directories and files.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start Guide&lt;/h2&gt; &#xA;&lt;p&gt;To get started developing you&#39;ll need to install &lt;a href=&#34;https://docs.docker.com/install/&#34;&gt;docker&lt;/a&gt; or see our &lt;a href=&#34;https://raw.githubusercontent.com/TechEmpower/FrameworkBenchmarks/master/#quick-start-guide-vagrant&#34;&gt;Quick Start Guide using vagrant&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone TFB.&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ git clone https://github.com/TechEmpower/FrameworkBenchmarks.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Change directories&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ cd FrameworkBenchmarks&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run a test.&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ ./tfb --mode verify --test gemini&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Explanation of the &lt;code&gt;./tfb&lt;/code&gt; script&lt;/h3&gt; &#xA;&lt;p&gt;The run script is pretty wordy, but each and every flag is required. If you are using windows, either adapt the docker command at the end of the &lt;code&gt;./tfb&lt;/code&gt; shell script (replacing &lt;code&gt;${SCRIPT_ROOT}&lt;/code&gt; with &lt;code&gt;/c/path/to/FrameworkBenchmarks&lt;/code&gt;), or use vagrant.&lt;/p&gt; &#xA;&lt;p&gt;The command looks like this: &lt;code&gt;docker run -it --rm --network tfb -v /var/run/docker.sock:/var/run/docker.sock -v [FWROOT]:/FrameworkBenchmarks techempower/tfb [ARGS]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-it&lt;/code&gt; tells docker to run this in &#39;interactive&#39; mode and simulate a TTY, so that &lt;code&gt;ctrl+c&lt;/code&gt; is propagated.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--rm&lt;/code&gt; tells docker to remove the container as soon as the toolset finishes running, meaning there aren&#39;t hundreds of stopped containers lying around.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--network=tfb&lt;/code&gt; tells the container to join the &#39;tfb&#39; Docker virtual network&lt;/li&gt; &#xA; &lt;li&gt;The first &lt;code&gt;-v&lt;/code&gt; specifies which Docker socket path to mount as a volume in the running container. This allows docker commands run inside this container to use the host container&#39;s docker to create/run/stop/remove containers.&lt;/li&gt; &#xA; &lt;li&gt;The second &lt;code&gt;-v&lt;/code&gt; mounts the FrameworkBenchmarks source directory as a volume to share with the container so that rebuilding the toolset image is unnecessary and any changes you make on the host system are available in the running toolset container.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;techempower/tfb&lt;/code&gt; is the name of toolset container to run&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;A note on Windows&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docker expects Linux-style paths. If you cloned on your &lt;code&gt;C:\&lt;/code&gt; drive, then &lt;code&gt;[ABS PATH TO THIS DIR]&lt;/code&gt; would be &lt;code&gt;/c/FrameworkBenchmarks&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.docker.com/docker-windows&#34;&gt;Docker for Windows&lt;/a&gt; understands &lt;code&gt;/var/run/docker.sock&lt;/code&gt; even though that is not a valid path on Windows, but only when using Linux containers (it doesn&#39;t work with Windows containers and LCOW). &lt;a href=&#34;https://docs.docker.com/toolbox/toolbox_install_windows/&#34;&gt;Docker Toolbox&lt;/a&gt; &lt;strong&gt;may&lt;/strong&gt; not understand &lt;code&gt;/var/run/docker.sock&lt;/code&gt;, even when using Linux containers - use at your own risk.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Start Guide (Vagrant)&lt;/h2&gt; &#xA;&lt;p&gt;Get started developing quickly by utilizing vagrant with TFB. &lt;a href=&#34;https://git-scm.com&#34;&gt;Git&lt;/a&gt;, &lt;a href=&#34;https://www.virtualbox.org/&#34;&gt;Virtualbox&lt;/a&gt; and &lt;a href=&#34;https://www.vagrantup.com/&#34;&gt;vagrant&lt;/a&gt; are required.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone TFB.&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ git clone https://github.com/TechEmpower/FrameworkBenchmarks.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Change directories&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ cd FrameworkBenchmarks/deployment/vagrant&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build the vagrant virtual machine&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ vagrant up&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run a test&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ vagrant ssh&#xA; $ tfb --mode verify --test gemini&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Add a New Test&lt;/h2&gt; &#xA;&lt;p&gt;Either on your computer, or once you open an SSH connection to your vagrant box, start the new test initialization wizard.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    vagrant@TFB-all:~/FrameworkBenchmarks$ ./tfb --new&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will walk you through the entire process of creating a new test to include in the suite.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;h3&gt;Official Documentation&lt;/h3&gt; &#xA;&lt;p&gt;Our official documentation can be found in the &lt;a href=&#34;https://github.com/TechEmpower/FrameworkBenchmarks/wiki&#34;&gt;wiki&lt;/a&gt;. If you find any errors or areas for improvement within the docs, feel free to open an issue in this repo.&lt;/p&gt; &#xA;&lt;h3&gt;Live Results&lt;/h3&gt; &#xA;&lt;p&gt;Results of continuous benchmarking runs are available in real time &lt;a href=&#34;https://tfb-status.techempower.com/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Data Visualization&lt;/h3&gt; &#xA;&lt;p&gt;If you have a &lt;code&gt;results.json&lt;/code&gt; file that you would like to visualize, you can &lt;a href=&#34;https://tfb-status.techempower.com/share&#34;&gt;do that here&lt;/a&gt;. You can also attach a &lt;code&gt;runid&lt;/code&gt; parameter to that url where &lt;code&gt;runid&lt;/code&gt; is a run listed on &lt;a href=&#34;https://tfb-status.techempower.com&#34;&gt;tfb-status&lt;/a&gt; like so: &lt;a href=&#34;https://www.techempower.com/benchmarks/#section=test&amp;amp;runid=fd07b64e-47ce-411e-8b9b-b13368e988c6&#34;&gt;https://www.techempower.com/benchmarks/#section=test&amp;amp;runid=fd07b64e-47ce-411e-8b9b-b13368e988c6&lt;/a&gt;. If you want to visualize them or compare different results files on bash, here is an unofficial &lt;a href=&#34;https://github.com/joeyleeeeeee97/PlainTextResultsParser&#34;&gt;plaintext results parser&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;The community has consistently helped in making these tests better, and we welcome any and all changes. Reviewing our contribution practices and guidelines will help to keep us all on the same page. The &lt;a href=&#34;https://github.com/TechEmpower/FrameworkBenchmarks/wiki/Development-Contributing-Guide&#34;&gt;contribution guide&lt;/a&gt; can be found in the &lt;a href=&#34;https://github.com/TechEmpower/FrameworkBenchmarks/wiki&#34;&gt;TFB documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Join in the conversation in the &lt;a href=&#34;https://github.com/TechEmpower/FrameworkBenchmarks/discussions&#34;&gt;Discussions tab&lt;/a&gt;, on &lt;a href=&#34;https://twitter.com/tfbenchmarks&#34;&gt;Twitter&lt;/a&gt;, or chat with us on &lt;a href=&#34;https://webchat.freenode.net/&#34;&gt;Freenode&lt;/a&gt; at &lt;code&gt;#techempower-fwbm&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>didi/DoKit</title>
    <updated>2022-08-17T01:34:50Z</updated>
    <id>tag:github.com,2022-08-17:/didi/DoKit</id>
    <link href="https://github.com/didi/DoKit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;一款面向泛前端产品研发全生命周期的效率平台。&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#%E7%AE%80%E4%BB%8B&#34;&gt;简介&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#%E9%A2%86%E5%9F%9F%E7%94%9F%E6%80%81&#34;&gt;领域生态&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C&#34;&gt;使用手册&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97&#34;&gt;更新日志&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#%E7%A4%BE%E5%8C%BA%E6%B4%BB%E5%8A%A8&#34;&gt;社区活动&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#%E5%BC%80%E5%8F%91%E8%83%8C%E6%99%AF&#34;&gt;开发背景&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%9D%97&#34;&gt;功能模块&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#%E4%B8%80%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7wwwdokitcn&#34;&gt;一、平台工具(www.dokit.cn)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#%E4%BA%8C%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7&#34;&gt;二、常用工具&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#%E4%B8%89%E6%80%A7%E8%83%BD%E6%A3%80%E6%B5%8B&#34;&gt;三、性能检测&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#%E5%9B%9B%E8%A7%86%E8%A7%89%E5%B7%A5%E5%85%B7&#34;&gt;四、视觉工具&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#%E4%BA%94weex%E4%B8%93%E9%A1%B9%E5%B7%A5%E5%85%B7cml%E4%B8%93%E9%A1%B9%E5%B7%A5%E5%85%B7&#34;&gt;五、Weex专项工具（CML专项工具）&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#%E5%85%AD%E6%94%AF%E6%8C%81%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E4%B8%9A%E5%8A%A1%E5%B7%A5%E5%85%B7%E9%9B%86%E6%88%90%E5%88%B0%E9%9D%A2%E6%9D%BF%E4%B8%AD&#34;&gt;六、支持自定义的业务工具集成到面板中&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#%E4%B8%83%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%93%E9%A1%B9%E5%B7%A5%E5%85%B7&#34;&gt;七、微信小程序专项工具&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#%E7%9B%B8%E5%85%B3%E6%96%87%E6%A1%A3&#34;&gt;相关文档&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#%E4%B8%80%E7%BE%A4%E6%BB%A1%E5%91%98%EF%BC%8C%E5%B7%B2%E5%BC%80%E4%BA%8C%E7%BE%A4&#34;&gt;微信交流群(一群满员，已开二群)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#qq-%E4%BA%A4%E6%B5%81%E7%BE%A4&#34;&gt;QQ 交流群&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7&#34;&gt;微信公众号&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#%E9%A1%B9%E7%9B%AE%E6%88%90%E5%91%98&#34;&gt;项目成员&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#%E4%BD%BF%E7%94%A8%E6%8F%90%E9%86%92&#34;&gt;使用提醒&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5&#34;&gt;友情链接&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/#%E5%8D%8F%E8%AE%AE&#34;&gt;协议&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;简介&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://pt-starimg.didistatic.com/static/starimg/img/J0WO7tUi9U1616143930629.png&#34; width=&#34;250&#34; alt=&#34;DoraemonKit&#34; align=&#34;left&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/github/license/didi/DoraemonKit.svg?sanitize=true&#34; align=&#34;left&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/Android-3.5.0-blue.svg?sanitize=true&#34; align=&#34;left&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/iOS-3.0.7-yellow.svg?sanitize=true&#34; align=&#34;left&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/Flutter-0.6.0-blue.svg?sanitize=true&#34; align=&#34;left&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/miniapp-0.0.1-red.svg?sanitize=true&#34; align=&#34;left&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&#34; align=&#34;left&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;DoKit诞生于滴滴城运服体验技术部，是一款面向泛前端产品研发全生命周期的效率平台。经过两年的发展，当前DoKit已经发展成了一个相对完整的生态，比如DoKit For Android、DoKit For iOS、DoKit For 小程序、DoKit For Flutter、DoKit For Web。同时我们的项目被BAT以及滴滴、字节、快手、京东等等头部独角兽企业广泛使用并获得良好的口碑。随着dokit.cn平台端的推出，标志着DoKit已经从单纯的效率工具正式进入了效率工具平台的阶段。与此同时我们一直都未停下持续探索的精神，积极地在更多平台领域进行尝试，不给自己设限。我们相信DoKit的未来充满无限可能。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/README_EN.md&#34;&gt;English Readme&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;领域生态&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://pt-starimg.didistatic.com/static/starimg/img/WRUdiWDsw71626696344680.jpg&#34; width=&#34;900&#34; alt=&#34;DoKit 首页效果演示&#34; align=&#34;center&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;使用手册&lt;/h2&gt; &#xA;&lt;p&gt;访问&lt;a href=&#34;https://www.dokit.cn/&#34;&gt;DoKit官网&lt;/a&gt;，点击&#34;&lt;a href=&#34;http://xingyun.xiaojukeji.com/docs/dokit/#/intro&#34;&gt;使用中心&lt;/a&gt;&#34;。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;新用户重点关注：受集团影响当前DoKit平台端不支持新用户注册，老用户不受影响，新用户开放注册时间以官方消息为准！！！另外只有平台端的相关功能需要申请productId，假如不需要相关功能可以不填或者填空。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;温馨提示：当前DoKit的所有功能都只针对Debug环境，Release环境未经过实际验证，所以请大家严格按照官方文档来集成，也不建议大家在Release环境上使用DoKit的任何功能。如果大家一定要在Release环境上使用，请自行进行充分的测试和验证，DoKit官方将不承担任何责任和损失。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;更新日志&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://xingyun.xiaojukeji.com/docs/dokit/#/AndroidReleaseNote&#34;&gt;Android-ReleaseNotes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/Doc/iOS-ReleaseNotes.md&#34;&gt;iOS-ReleaseNotes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/Doc/miniapp-ReleaseNotes.md&#34;&gt;微信小程序-ReleaseNotes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/Flutter/README.md&#34;&gt;DoKit For Flutter-ReleaseNotes&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;社区活动&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;DoKit调研问卷&lt;/strong&gt; 亲爱的DoKit用户,动动你的小手指参与一下我们的官方调研活动吧。我们极度渴望听到你们的声音:&lt;/p&gt; &#xA;&lt;p&gt;链接:&lt;a href=&#34;https://page.juyanwenjuan.com/jy_0CMpJzlu.html&#34;&gt;https://page.juyanwenjuan.com/jy_0CMpJzlu.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://pt-starimg.didistatic.com/static/starimg/img/INLjGkp9wN1597062733948.jpg&#34; width=&#34;250&#34; alt=&#34;DoKit 首页效果演示&#34; align=&#34;center&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;开发背景&lt;/h2&gt; &#xA;&lt;p&gt;每一个稍微有点规模的 App，总会自带一些线下的测试功能代码，比如环境切换功能、帧率查看功能等等，这些功能的切换入口往往放在各式各样的入口中，比如一些特殊的手势，双击 statusBar，双击某一个功能区块，或者新建一个 keyWindow 始终至于 App 最上方等等，而且每一个 App 里面的线下附带功能模块很多是相似的，比如帧率查看、内存和 CPU 监控等等，但是现在基本上都是每个 App 都是自己实现了一份，经历了以上的问题之后，DoKit 就有了它存在的意义。&lt;/p&gt; &#xA;&lt;p&gt;DoKit 是一个功能平台，能够让每一个 App 快速接入一些常用的或者你没有实现的一些辅助开发工具、测试效率工具、视觉辅助工具，而且能够完美在 Doraemon 面板中接入你已经实现的与业务紧密耦合的一些非通有的辅助工具，并搭配我们的&lt;a href=&#34;https://www.dokit.cn&#34;&gt;dokit&lt;/a&gt;平台，让功能得到延伸，接入方便，便于扩展。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;简单总结&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;1、DoKit 能够快速让你的业务测试代码能够在这里统一管理，统一收口；&lt;/p&gt; &#xA;&lt;p&gt;2、DoKit 内置很多常用的工具，避免重复实现，一次接入，你将会拥有强大的工具集合；&lt;/p&gt; &#xA;&lt;p&gt;3、搭配dokit平台，借助&lt;a href=&#34;https://www.dokit.cn/#/index/dataMockPage&#34;&gt;接口Mock&lt;/a&gt;、&lt;a href=&#34;https://www.dokit.cn/#/index/checkDataPage&#34;&gt;健康体检&lt;/a&gt;、&lt;a href=&#34;https://www.dokit.cn/#/index/fileSyncPage&#34;&gt;文件同步助手&lt;/a&gt;、&lt;a href=&#34;&#34;&gt;一机多控&lt;/a&gt;让你方便和他人协同，极大的提升研发过程中的效率。&lt;/p&gt; &#xA;&lt;h2&gt;功能模块&lt;/h2&gt; &#xA;&lt;h3&gt;一、平台工具(&lt;a href=&#34;http://www.dokit.cn&#34;&gt;www.dokit.cn&lt;/a&gt;)&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;【数据Mock】&lt;/strong&gt; App接口Mock解决方案，提供一套基于App网络拦截的接口Mock方案，无需修改代码即可完成对于接口数据的Mock。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【健康体检】&lt;/strong&gt; 一键式操作，整合DoKit多项工具，数据可视化，快速准确定位问题，让你对app的性能了如指掌。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【文件同步助手】&lt;/strong&gt; 通过终端服务，让你的终端空间在平台端完整的展现并提供强大的文件以及数据库操作能力。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【一机多控】&lt;/strong&gt; 主从同步，释放人力，让研发测试效率提升看得见&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;二、常用工具&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;【App 信息查看】&lt;/strong&gt; 快速查看手机信息，App 基础信息、签名相关、权限信息的渠道，避免去手机设置查找或者查看项目源代码的麻烦；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【开发者选项 Android特有】&lt;/strong&gt; 一键跳转开发者选项，避免安卓由于平台差异导致的入口不一致&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【本地语言】&lt;/strong&gt; 一键跳转本地语言，避免安卓由于平台差异导致的入口不一致&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【沙盒浏览】&lt;/strong&gt; App 内部文件浏览的功能，支持删除和预览, 并且能通过 AirDrop 或者其他分享方式上传到 PC 中，进行更加细致的操作；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【MockGPS】&lt;/strong&gt; App 能定位到全国各地，支持地图地位和手动输入经纬度；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【H5任意门】&lt;/strong&gt; 开发测试同学可以快速输入 H5 页面地址，查看该页面效果；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【Crash查看】&lt;/strong&gt; 方便本地打印出出现 Crash 的堆栈；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【子线程UI】&lt;/strong&gt; 快速定位哪一些 UI 操作在非主线程中进行渲染，避免不必要的问题；（iOS独有）&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【清除本地数据】&lt;/strong&gt; 一键删除沙盒中所有数据；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【NSLog】&lt;/strong&gt; 把所有 NSLog 信息打印到UI界面，避免没有开发证书无法调试的尴尬；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【Lumberjack】&lt;/strong&gt; 每一条 CocoaLumberjack 的日志信息，都在在 App 的界面中显示出来，再也不需要导出日志这么麻烦;（iOS独有）&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【DBView】&lt;/strong&gt; 通过网页方便快捷的操作应用内数据库，让数据库的调试变得非常优雅;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【模拟弱网】&lt;/strong&gt; 限制网速，模拟弱网环境下App的运行情况;（android独有）&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【JS脚本】&lt;/strong&gt; 在指定WebView运行JS脚本。（iOS独有）&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;三、性能检测&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;【帧率】&lt;/strong&gt; App 帧率信息提供波形图查看功能，让帧率监控的趋势更加明显；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【CPU】&lt;/strong&gt; App CPU 使用率信息提供波形图查看功能，让 CPU 监控的趋势更加形象；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【内存】&lt;/strong&gt; App 内存使用量信息提供波形图查看功能，让内存监控的趋势更加鲜明；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【流量监控】&lt;/strong&gt; 拦截 App 内部流量信息，提供波形图展示、流量概要展示、流量列表展示、流量筛选、流量详情，对流量信息统一拦截，成为我们 App 中自带的 &#34;Charles&#34;；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【卡顿】&lt;/strong&gt; 锁定 App 出现卡顿的时刻，打印出对应的代码调用堆栈；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【大图检测】&lt;/strong&gt; 通过流量监测，找出所有的大小超标的图片，避免下载大图造成的流量浪费和渲染大图带来的CPU消耗。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【启动耗时】&lt;/strong&gt; 无侵入的统计出App启动过程的总共耗时；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【UI层级检查】&lt;/strong&gt; 检查出每一个页面中层级最深的元素；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【函数耗时】&lt;/strong&gt; 从函数级别分析app性能瓶颈；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【Load】&lt;/strong&gt; 找出所有的Load方法，并给出耗时分析；（iOS独有）&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【内存泄漏】&lt;/strong&gt; 找出App中所有的内存泄漏的问题。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;四、视觉工具&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;【颜色吸管】&lt;/strong&gt; 方便设计师 UI 捉虫的时候，查看每一个组件的颜色值是否设置正确；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【组件检查】&lt;/strong&gt; 可以抓取任意一个UI控件，查看它们的详细信息，包括控件名称、控件位置、背景色、字体颜色、字体大小；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【对齐标尺】&lt;/strong&gt; 参考 Android 系统自带测试工具，能够实时捕获屏幕坐标，并且可以查看组件是否对齐；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【元素边框线】&lt;/strong&gt; 绘制出每一个 UI 组件的边框，对于组件布局有一定的参考意义。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;五、Weex专项工具（CML专项工具）&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;【console日志查看】&lt;/strong&gt; 方便在端上查看每一个Weex文件中的console日志，提供分级和搜索功能；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【storage缓存查看】&lt;/strong&gt; 将Weex中的storage模块的本地缓存数据可视化展示；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【容器信息】&lt;/strong&gt; 查看每一个打开的Weex页面的基本信息和性能数据；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;【DevTool】&lt;/strong&gt; 快速开启Weex DevTool的扫码入口。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;tips ： 如果使用我们滴滴优秀的开源跨端方案 &lt;a href=&#34;https://github.com/didi/chameleon&#34;&gt;chameleon&lt;/a&gt; 也可以集成该工具集合&lt;/p&gt; &#xA;&lt;h3&gt;六、支持自定义的业务工具集成到面板中&lt;/h3&gt; &#xA;&lt;p&gt;统一维护和管理所有的测试模块，详见接入手册&lt;/p&gt; &#xA;&lt;h3&gt;七、微信小程序专项工具&lt;/h3&gt; &#xA;&lt;p&gt;详见 &lt;a href=&#34;https://github.com/didi/DoraemonKit/tree/master/miniapp&#34;&gt;Doraemon mini program debugger&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;相关文档&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/00763123dbc4&#34;&gt;iOS 研发助手 DoKit 技术实现（一）&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/weixin_33847182/article/details/91472599&#34;&gt;iOS 研发助手 DoKit 技术实现（二）&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://juejin.im/post/5d76184ce51d4561d106cc65&#34;&gt;DoKit支持iOS本地crash查看功能&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/weixin_33711647/article/details/88004429&#34;&gt;开源组件 DoKit 之 Android 版本技术实现（一）&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/weixin_34148456/article/details/88004414&#34;&gt;开源组件 DoKit 之 Android 版本技术实现（二）&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://juejin.im/post/5d70bc3051882571ed61e407&#34;&gt;DoKit支持Activity启动耗时统计方案&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://juejin.im/post/5d9bf252518825095c3c5e32&#34;&gt;DoKit 微信小程序SDK对外发布&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://juejin.im/post/5dc3cdfa51882538d22d5948&#34;&gt;滴滴DoKit2.0 - 泛前端开发者的百宝箱&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://juejin.im/post/5e818e29f265da4804697d25&#34;&gt;滴滴正式发布开源客户端研发助手 DoKit 3.0，新特性解读&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://juejin.im/post/5eba5ce15188256d6f268c98&#34;&gt;滴滴DoKit Android核心原理揭秘之函数耗时&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://juejin.im/post/6891887877613944840&#34;&gt;滴滴DoKit Android核心原理揭秘之AOP字节码实现&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;微信交流群(一群满员，已开二群)&lt;/h2&gt; &#xA;&lt;p&gt;搜索&lt;strong&gt;justdokit&lt;/strong&gt;加我微信好友，注意请添加备注：昵称-DoKit社区用户，否则你的申请将不会被验证通过。 &lt;img src=&#34;https://user-images.githubusercontent.com/4486497/147242854-9693daf9-033e-4523-89da-b7b36c72642c.jpg&#34; alt=&#34;51640263734_ pic&#34;&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;QQ 交流群&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://javer.oss-cn-shanghai.aliyuncs.com/doraemon/github/DoraemonKitQQ.jpeg&#34; width=&#34;160&#34; height=&#34;200&#34; alt=&#34;QQ 交流群&#34; align=&#34;left&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;项目成员&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;创始人&lt;/strong&gt; &lt;a href=&#34;https://github.com/yixiangboy&#34;&gt;yixiangboy(易翔)&lt;/a&gt; &lt;strong&gt;负责人&lt;/strong&gt; &lt;a href=&#34;https://github.com/bbssyyuui&#34;&gt;小枫&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;内部核心成员&lt;/strong&gt; &lt;a href=&#34;https://github.com/bbssyyuui&#34;&gt;小枫&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/ChasonTang&#34;&gt;ChasonTang&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/AdamCaoQAQ&#34;&gt;AdamCaoQAQ&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/fangyeqing123&#34;&gt;fangyeqing123&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/RealOnlyone&#34;&gt;RealOnlyone&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/HeyCFarmer&#34;&gt;HeyCFarmer&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/yFeii&#34;&gt;yFeii&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/kabda&#34;&gt;卡布达&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/maxiee&#34;&gt;maxiee&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/zhugeafanti&#34;&gt;zhugeafanti&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;贡献者榜单&lt;/strong&gt; &lt;a href=&#34;https://github.com/yixiangboy&#34;&gt;yixiangboy(易翔)&lt;/a&gt;、 &lt;a href=&#34;https://github.com/jtsky&#34;&gt;jtsky(金台)&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/LinJZong&#34;&gt;LinJZong&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/wanglikun7342&#34;&gt;wanglikun7342&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/jayconscious&#34;&gt;jayconscious&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/excitedhaha&#34;&gt;jellybean&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/xu984386604&#34;&gt;linusflow&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/WangLao100&#34;&gt;wangzhipeng&lt;/a&gt;、 &lt;a href=&#34;https://github.com/BzCoder&#34;&gt;BzCoder&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/changzuozhen&#34;&gt;changzuozhen&lt;/a&gt;、 &lt;a href=&#34;https://github.com/momoxiangbei&#34;&gt;momoxiangbei&lt;/a&gt;、 &lt;a href=&#34;https://github.com/wenquanlebao&#34;&gt;wenquanlebao&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/hiXgb&#34;&gt;hiXgb&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/Chinnko&#34;&gt;Chinnko&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/y644938647&#34;&gt;y644938647&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/wm219&#34;&gt;wm219&lt;/a&gt;、 &lt;a href=&#34;https://github.com/goolong&#34;&gt;goolong&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/miracle9312&#34;&gt;miracle9312&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/lwhsgz123&#34;&gt;lwhsgz123&lt;/a&gt;、 &lt;a href=&#34;https://github.com/huakucha&#34;&gt;huakucha&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/HuginChen&#34;&gt;HuginChen&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/feng562925462&#34;&gt;feng562925462&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/azhon&#34;&gt;azhon&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/rex26&#34;&gt;rex26&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/csc-EricWu&#34;&gt;csc-EricWu&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/xiandanin&#34;&gt;xiandanin&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/0xd-cc&#34;&gt;0xd-cc&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/k373379320&#34;&gt;k373379320&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/fabcz&#34;&gt;fabcz&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/y500&#34;&gt;y500&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/Knight-ZXW&#34;&gt;Knight-ZXW&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/boai&#34;&gt;boai&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/klone1127&#34;&gt;klone1127&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/DeveloperLY&#34;&gt;DeveloperLY&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/sagdragon&#34;&gt;sagdragon&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/ccworld1000&#34;&gt;ccworld1000&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/HDB-Li&#34;&gt;HDB-Li&lt;/a&gt;、 &lt;a href=&#34;https://github.com/yu-jianfeng&#34;&gt;yu-jianfeng&lt;/a&gt;、 &lt;a href=&#34;https://github.com/ydlsl&#34;&gt;ydlsl&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;如何成为外部贡献者？ 提交有意义的PR，并被采纳。&lt;/p&gt; &#xA;&lt;h2&gt;使用提醒&lt;/h2&gt; &#xA;&lt;p&gt;因为SDK目前会配合&lt;a href=&#34;http://www.dokit.cn/&#34;&gt;dokit.cn&lt;/a&gt;平台, 会产生一些网络数据，这些信息我们收集绝不用于任何恶意用途。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;以下为所有涉及到网络请求的部分&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;统计有多少用户集成了dokit&lt;/p&gt; &lt;p&gt;Android : DoraemonStatisticsUtil#uploadUserInfo&lt;/p&gt; &lt;p&gt;iOS : DoraemonStatisticsUtil#upLoadUserInfo&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;统计每个内置kit的使用情况&lt;/p&gt; &lt;p&gt;Android : DataPickManager#realPost&lt;/p&gt; &lt;p&gt;iOS : DoraemonBuriedPointManager#uploadData&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;上传健康体检的相关数据&lt;/p&gt; &lt;p&gt;Android : AppHealthInfoUtil#post&lt;/p&gt; &lt;p&gt;iOS : DoraemonHealthManager#upLoadData&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;数据mock的相关网络请求&lt;/p&gt; &lt;p&gt;Android : NetWorkMockFragment 里涉及到接口mock的相关网络请求&lt;/p&gt; &lt;p&gt;iOS : DoraemonMockManager#queryMockData&amp;amp;uploadSaveData&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;敬请各位用户知晓。&lt;/p&gt; &#xA;&lt;h2&gt;友情链接&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/didi/Hummer&#34;&gt;Hummer&lt;/a&gt;，Hummer 是一套高性能高可用的跨端开发框架，一套代码可以同时支持开发 Android 和 iOS 应用。现已经支持 Vue/TypeScript/JavaScript 三种语法，面向大前端开发人员，总有一款适合你。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/didi/chameleon&#34;&gt;Chameleon&lt;/a&gt;，简写CML，中文意思变色龙，意味着就像变色龙一样能适应不同环境的跨端整体解决方案，达到真正意义上&#34;一套代码，多端运行&#34;的终极目标&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/didi/booster&#34;&gt;Booster&lt;/a&gt; 是一款专门为移动应用设计的易用、轻量级且可扩展的质量优化框架，其目标主要是为了解决随着 APP 复杂度的提升而带来的性能、稳定性、包体积等一系列质量问题。Booster 提供了性能检测、多线程优化、资源索引内联、资源去冗余、资源压缩、系统 Bug 修复等一系列功能模块，可以使得稳定性能够提升 15% ~ 25%，包体积可以减小 1MB ~ 10MB。&lt;strong&gt;同时DoKit插件的底层也是基于Booster进行开发的。&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/didi/AoE&#34;&gt;AoE&lt;/a&gt;，一个终端侧AI集成运行时环境&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/didi/mand-mobile&#34;&gt;Mand Mobile&lt;/a&gt; 一款优秀的面向金融场景的 移动端UI组件库&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;我们团队的技术公众号【滴滴OrangeLab】，欢迎关注，我们会在这里持续输出团队内部比较有深度的技术沉淀和经验分享，欢迎一起交流。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img src=&#34;https://pt-starimg.didistatic.com/static/starimg/img/cPlaMme4g81616682162304.jpg&#34; width=&#34;250&#34;&gt; &#xA;&lt;h2&gt;协议&lt;/h2&gt; &#xA;&lt;img alt=&#34;Apache-2.0 license&#34; src=&#34;https://www.apache.org/img/ASF20thAnniversary.jpg&#34; width=&#34;128&#34;&gt; &#xA;&lt;p&gt;DoKit 基于 Apache-2.0 协议进行分发和使用，更多信息参见 &lt;a href=&#34;https://raw.githubusercontent.com/didi/DoKit/master/LICENSE&#34;&gt;协议文件&lt;/a&gt;。&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>alibaba/compileflow</title>
    <updated>2022-08-17T01:34:50Z</updated>
    <id>tag:github.com,2022-08-17:/alibaba/compileflow</id>
    <link href="https://github.com/alibaba/compileflow" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🎨 core business process engine of Alibaba Halo platform, best process engine for trade scenes. | 一个高性能流程编排引擎&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alibaba/compileflow/master/doc/compileflow-logo.png&#34; alt=&#34;compileflow logo&#34; width=&#34;20%&#34; align=&#34;right&#34;&gt; &#xA;&lt;h1&gt;compileflow&lt;/h1&gt; &#xA;&lt;p&gt;📖 See the &lt;a href=&#34;https://raw.githubusercontent.com/alibaba/compileflow/master/README_CN.md&#34;&gt;📖 中文文档&lt;/a&gt; for the documents in Chinese.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/alibaba/compileflow/actions/workflows/ci.yaml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/alibaba/compileflow/CI/master?logo=github&amp;amp;logoColor=white&#34; alt=&#34;Github Workflow Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/oldratlee/compileflow&#34;&gt;&lt;img src=&#34;https://img.shields.io/appveyor/ci/oldratlee/compileflow/master?logo=appveyor&amp;amp;logoColor=white&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://search.maven.org/artifact/com.alibaba.compileflow/compileflow&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.alibaba.compileflow/compileflow?color=2d545e&amp;amp;logo=apache-maven&amp;amp;logoColor=white&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/alibaba/compileflow/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/alibaba/compileflow.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://openjdk.java.net/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Java-8+-green?logo=OpenJDK&amp;amp;logoColor=white&#34; alt=&#34;Java support&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%202-4D7A97.svg?logo=Apache&amp;amp;logoColor=white&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/alibaba/compileflow/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/alibaba/compileflow&#34; alt=&#34;GitHub Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/alibaba/compileflow/fork&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/alibaba/compileflow&#34; alt=&#34;GitHub Forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/alibaba/compileflow/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/alibaba/compileflow.svg?sanitize=true&#34; alt=&#34;GitHub issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/alibaba/compileflow/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/alibaba/compileflow&#34; alt=&#34;GitHub Contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;1. Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Compileflow is a very lightweight, high-performance, integrable and extensible process engine.&lt;/p&gt; &#xA;&lt;p&gt;The Compileflow process engine is an important part of Taobao Business Process Management(TBBPM), which is dedicated to optimizating operations at Alibaba’s Taobao Marketplace. Specifically, Compileflow is designed to focus on pure memory execution and stateless process engines by converting process files to generate, compile and execute java code.&lt;/p&gt; &#xA;&lt;p&gt;Currently, compileflow powers multiple core systems such as Alibaba&#39;s e-commerce stores and transactions.&lt;/p&gt; &#xA;&lt;p&gt;Compileflow allows developers to design their own business processes through the process editor, which will visualize complex business logic, and build a bridge between designers and development engineers.&lt;/p&gt; &#xA;&lt;h2&gt;2. Design Intention&lt;/h2&gt; &#xA;&lt;p&gt;1.Provide an end-to-end business process solution from design to execution of business development ideas.&lt;/p&gt; &#xA;&lt;p&gt;2.Offer a variety of process engines to realize the visual global architecture, so that strategy easily translates to visualizations, which lead to enhanced business capabilities, processes and system.&lt;/p&gt; &#xA;&lt;p&gt;3.Design an efficient execution engine that can support the company&#39;s rapid deployment of new services, and capable of streamlining processes that accelerate the development response and interaction speed.&lt;/p&gt; &#xA;&lt;h2&gt;3. Features&lt;/h2&gt; &#xA;&lt;p&gt;1.High performance: It is simple and efficient for compiling and executing java code, which is generated by converting process files.&lt;/p&gt; &#xA;&lt;p&gt;2.Diverse application scenarios: Widely used across Alibaba&#39;s mid-platform solutions; supports multiple business scenarios such as shopping guides, transactions.&lt;/p&gt; &#xA;&lt;p&gt;3.Integrable: Lightweight and concise design makes it extremely easy to integrate into various solutions and business scenarios.&lt;/p&gt; &#xA;&lt;p&gt;4.Complete plugin support: Compileflow is currently supported by IntelliJ IDEA and Eclipse plugins. Java code can be dynamically generated and previewed in real-time during the process design. What you see is what you get.&lt;/p&gt; &#xA;&lt;p&gt;5.Process design drawing:Supports exporting to SVG file and unit test code.&lt;/p&gt; &#xA;&lt;h2&gt;4. Quick start&lt;/h2&gt; &#xA;&lt;h3&gt;Step1: Download and install IntelliJ IDEA plugin (optional)&lt;/h3&gt; &#xA;&lt;p&gt;Plugin download address: &lt;a href=&#34;https://github.com/alibaba/compileflow-idea-designer&#34;&gt;https://github.com/alibaba/compileflow-idea-designer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Installation instructions: Please use IntelliJ IDEA local installation method to install. Then restart IntelliJ IDEA to activate.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Step2: Import POM file&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;com.alibaba.compileflow&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;compileflow&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;1.2.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check available version at &lt;a href=&#34;https://search.maven.org/artifact/com.alibaba.compileflow/compileflow&#34;&gt;search.maven.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Compileflow only supports JDK 1.8 and above.&lt;/p&gt; &#xA;&lt;h3&gt;Step3: Process design&lt;/h3&gt; &#xA;&lt;p&gt;Refer to the KTV demo below to understand the configuration of nodes and attributes and the use of APIs through the demonstration and practice of the demo.&lt;/p&gt; &#xA;&lt;p&gt;Demo description: N number of people go to ktv to sing. Each person sing a song. The usual fee for the ktv session is 30 yuan/person, but if the total price exceeds 300 yuan, they would receive 10% off. But if the group&#39;s total fee falls under 300 yuan, they need to pay the full price.&lt;/p&gt; &#xA;&lt;h4&gt;S3.1&lt;/h4&gt; &#xA;&lt;p&gt;Create a bpm file, as shown below:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alibaba/compileflow/master/doc/image/ktv_demo_s1.png&#34; alt=&#34;ktv_demo_s1&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note: The path of the bpm file must be consistent with the code. When the process engine executes in the file loading mode, the file will be found according to the code.&lt;/p&gt; &#xA;&lt;h4&gt;S3.2&lt;/h4&gt; &#xA;&lt;p&gt;Design process through plug-ins or write process xml files directly.&lt;/p&gt; &#xA;&lt;h4&gt;S3.3 invoke process&lt;/h4&gt; &#xA;&lt;p&gt;Write the following unit test:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public void testProcessEngine() {&#xA;    final String code = &#34;bpm.ktv.ktvExample&#34;;&#xA;&#xA;    final Map&amp;lt;String, Object&amp;gt; context = new HashMap&amp;lt;&amp;gt;();&#xA;    final List&amp;lt;String&amp;gt; pList = new ArrayList&amp;lt;&amp;gt;();&#xA;    pList.add(&#34;wuxiang&#34;);&#xA;    pList.add(&#34;xuan&#34;);&#xA;    pList.add(&#34;yusu&#34;);&#xA;    context.put(&#34;pList&#34;, pList);&#xA;&#xA;    final ProcessEngine&amp;lt;TbbpmModel&amp;gt; processEngine = ProcessEngineFactory.getProcessEngine();&#xA;&#xA;    final TbbpmModel tbbpmModel = processEngine.load(code);&#xA;    final OutputStream outputStream = TbbpmModelConverter.getInstance().convertToStream(tbbpmModel);&#xA;    System.out.println(processEngine.getTestCode(code));&#xA;&#xA;    processEngine.preCompile(code);&#xA;&#xA;    System.out.println(processEngine.start(code, context));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compileflow was designed to support the Taobao BPM specification. It has made adaptations to be compatible with the BPMN 2.0 specification, but only supports some of BPMN 2.0 elements. If other elements are needed, it can be extended on the original basis.&lt;/p&gt; &#xA;&lt;h2&gt;5. More information&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/alibaba/compileflow/wiki/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8BDEMO&#34;&gt;DEMO quick start&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/alibaba/compileflow/wiki/%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3&#34;&gt;Detailed description of the original Taobao BPM specification&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;6. Welcome to join the compileflow development group&lt;/h2&gt; &#xA;&lt;p&gt;Please contact @余苏 @徐工 @梵度 @哲良 @无相&lt;/p&gt; &#xA;&lt;h2&gt;Known Users&lt;/h2&gt; &#xA;&lt;p&gt;Welcome to register the company name in this issue: &lt;a href=&#34;https://github.com/alibaba/compileflow/issues/9&#34;&gt;https://github.com/alibaba/compileflow/issues/9&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alibaba/compileflow/master/doc/image/known_users/alibaba.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/alibaba/compileflow/master/doc/image/known_users/alipay.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/alibaba/compileflow/master/doc/image/known_users/aliyun.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/alibaba/compileflow/master/doc/image/known_users/taobao.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/alibaba/compileflow/master/doc/image/known_users/tmall.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>