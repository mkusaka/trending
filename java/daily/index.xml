<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-08T01:38:41Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jaenyeong/Teach_Wanted-PreOnBoarding-Backend-Challenge</title>
    <updated>2023-06-08T01:38:41Z</updated>
    <id>tag:github.com,2023-06-08:/jaenyeong/Teach_Wanted-PreOnBoarding-Backend-Challenge</id>
    <link href="https://github.com/jaenyeong/Teach_Wanted-PreOnBoarding-Backend-Challenge" rel="alternate"></link>
    <summary type="html">&lt;p&gt;원티드 프리온보딩 백엔드 챌린지 6월 과정&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;원티드 프리온보딩 백엔드 챌린지 6월&lt;/h1&gt; &#xA;&lt;p&gt;원티드 플랫폼에서 진행되는 2023년 06월 교육 과정입니다.&lt;br&gt; &lt;a href=&#34;https://www.wanted.co.kr/events/pre_challenge_be_8&#34;&gt;Java 꽉 잡아! : JVM부터 GC, 스레드 동기화까지!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;단순히 Java의 문법만 사용하는 것이 아닌 Java에 대해 더 깊게 알아보고, 이를 통해 무지성 코딩을 지양하고 한 번 더 생각하는 습관을 들여봅니다!&lt;/li&gt; &#xA; &lt;li&gt;클래스 로딩 과정, 바이트코드, JIT 컴파일러 등을 이해하며 자바가 동작하는 방식에 대해 알아봅니다.&lt;/li&gt; &#xA; &lt;li&gt;JVM 메모리 구조와 GC, 스레드 동기화 등 Java 프로그래밍에 필요한 개념들에 대해 알아봅니다.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;커리큘럼&lt;/h2&gt; &#xA;&lt;h3&gt;1-1 Java의 정의와 동작 방식에 대해 살펴봅니다.&lt;/h3&gt; &#xA;&lt;p&gt;[ 키워드 ] Java, JRE, JDK, JVM, AOT, JIT, Java Bytecode, Code Cache, ByteBuddy&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Java의 구성 요소와 동작 방식&lt;/li&gt; &#xA; &lt;li&gt;클래스 로더와 클래스 로딩&lt;/li&gt; &#xA; &lt;li&gt;Java 바이트코드와 코드 캐시&lt;/li&gt; &#xA; &lt;li&gt;바이트코드를 컴파일하는 AOT, JIT 컴파일러&lt;/li&gt; &#xA; &lt;li&gt;[ 아하! 모먼트 ] &#39;내가&#39; 수행 업무와 성과를 따로 기록하는 이유는?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1-2 JVM의 정의와 구조, 메모리에 대해 살펴봅니다.&lt;/h3&gt; &#xA;&lt;p&gt;[ 키워드 ] JVM, JMM(Java Memory Model), Memory Leak, Thread dump, Heap dump&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JVM과 메모리 구조&lt;/li&gt; &#xA; &lt;li&gt;Java 메모리 모델과 메모리 누수&lt;/li&gt; &#xA; &lt;li&gt;스레드덤프를 통한 스레드의 상태 정보 확인&lt;/li&gt; &#xA; &lt;li&gt;힙덤프를 통한 힙 메모리 확인&lt;/li&gt; &#xA; &lt;li&gt;[ 아하! 모먼트 ] &#39;내가&#39; 채용 공고를 볼 때 중요하게 보는 항목은?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1-3 GC(Garbage Collection)의 정의와 Java GC 알고리즘에 대해 살펴봅니다.&lt;/h3&gt; &#xA;&lt;p&gt;[ 키워드 ] SerialGC, Parallel GC, CMS GC, G1 GC, Shenandoah GC, ZGC, Epsilon GC&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;가비지 컬렉션의 정의와 가비지 컬렉터가 처리하는 Heap 영역&lt;/li&gt; &#xA; &lt;li&gt;Heap 영역을 제외한 GC 처리 영역&lt;/li&gt; &#xA; &lt;li&gt;Java에서 지원하는 GC 알고리즘&lt;/li&gt; &#xA; &lt;li&gt;[ 아하! 모먼트 ] &#39;내가&#39; 생각하는 스터디의 핵심 요소와 선호하는 진행 방식은?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1-4 동시성 처리를 위한 스레드 동기화에 대해 살펴봅니다.&lt;/h3&gt; &#xA;&lt;p&gt;[ 키워드 ] Thread Synchronization, Semaphore, Mutex, volatile, synchronized, CAS, java.util.concurrent package, Virtual Thread&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;스레드 동기화와 동시성&lt;/li&gt; &#xA; &lt;li&gt;멀티 스레드 환경에서 발생하는 스레드 동기화 문제&lt;/li&gt; &#xA; &lt;li&gt;Java에서 스레드 동기화를 위해 제공하는 기능&lt;/li&gt; &#xA; &lt;li&gt;JDK 19에 추가된 가상 스레드&lt;/li&gt; &#xA; &lt;li&gt;[ 아하! 모먼트 ] &#39;내가&#39; 코드 리뷰 문화 도입과 개선을 위해 시도한 방법&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;사전 과제 제출하는 법&lt;/h2&gt; &#xA;&lt;h3&gt;(1) &lt;code&gt;Issues&lt;/code&gt; 버튼을 눌러 이슈 페이지로 이동&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jaenyeong/Teach_Wanted-PreOnBoarding-Backend-Challenge/main/resources/howtosubmit/HowToSubmit_1.png&#34; alt=&#34;Issues&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;(2) &lt;code&gt;New issue&lt;/code&gt; 버튼을 눌러 이슈 생성 페이지로 이동&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jaenyeong/Teach_Wanted-PreOnBoarding-Backend-Challenge/main/resources/howtosubmit/HowToSubmit_2.png&#34; alt=&#34;New issue&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;(3) 과제 제출용 템플릿에 있는 &lt;code&gt;Get started&lt;/code&gt; 버튼을 눌러 이슈 작성 페이지로 이동&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jaenyeong/Teach_Wanted-PreOnBoarding-Backend-Challenge/main/resources/howtosubmit/HowToSubmit_3.png&#34; alt=&#34;Get started&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;(4) 1번 질문 영역에 답안 작성 후 2번 &lt;code&gt;Submit new issue&lt;/code&gt; 버튼을 눌러 과제 제출&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jaenyeong/Teach_Wanted-PreOnBoarding-Backend-Challenge/main/resources/howtosubmit/HowToSubmit_4.png&#34; alt=&#34;Submit new issue&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;사전 과제&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Java 입문서(&#39;이것이 자바다&#39;, &#39;자바의 정석&#39; 등)를 완독한 적이 있나요? 기억에 남는 내용을 설명해 주세요!&lt;/li&gt; &#xA; &lt;li&gt;Java 공식 문서를 10분 이상 살펴본 적이 있나요? 있다면 어떤 내용을 살펴보셨나요?&lt;/li&gt; &#xA; &lt;li&gt;인터프리터 방식과 컴파일 방식의 차이점을 서술해 주세요.&lt;/li&gt; &#xA; &lt;li&gt;프로세스와 스레드의 차이점을 서술해 주세요.&lt;/li&gt; &#xA; &lt;li&gt;JVM의 정의와 메모리 구조를 아는 대로 서술해 주세요.&lt;/li&gt; &#xA; &lt;li&gt;Java의 GC 알고리즘 중 하나만 선택해 아는 대로 서술해 주세요.&lt;/li&gt; &#xA; &lt;li&gt;세마포어에 대해서 아는 대로 서술해 주세요.&lt;/li&gt; &#xA; &lt;li&gt;Java의 &lt;code&gt;synchronized&lt;/code&gt;에 대해서 아는 대로 서술해 주세요.&lt;/li&gt; &#xA; &lt;li&gt;강의 커리큘럼과 관련하여 기대하는 내용이나 다뤘으면 하는 내용이 있나요?&lt;/li&gt; &#xA; &lt;li&gt;회사 생활 또는 개발자로서 궁금한 질문이나 고민이 있나요?&lt;/li&gt; &#xA; &lt;li&gt;이외에 추가로 바라는 점이나 하고 싶은 말씀을 남겨주세요!&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>