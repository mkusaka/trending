<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-04T01:31:58Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>apache/kafka</title>
    <updated>2022-08-04T01:31:58Z</updated>
    <id>tag:github.com,2022-08-04:/apache/kafka</id>
    <link href="https://github.com/apache/kafka" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mirror of Apache Kafka&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Apache Kafka&lt;/h1&gt; &#xA;&lt;p&gt;See our &lt;a href=&#34;https://kafka.apache.org&#34;&gt;web site&lt;/a&gt; for details on the project.&lt;/p&gt; &#xA;&lt;p&gt;You need to have &lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/downloads/index.html&#34;&gt;Java&lt;/a&gt; installed.&lt;/p&gt; &#xA;&lt;p&gt;We build and test Apache Kafka with Java 8, 11 and 17. We set the &lt;code&gt;release&lt;/code&gt; parameter in javac and scalac to &lt;code&gt;8&lt;/code&gt; to ensure the generated binaries are compatible with Java 8 or higher (independently of the Java version used for compilation). Java 8 support has been deprecated since Apache Kafka 3.0 and will be removed in Apache Kafka 4.0 (see &lt;a href=&#34;https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=181308223&#34;&gt;KIP-750&lt;/a&gt; for more details).&lt;/p&gt; &#xA;&lt;p&gt;Scala 2.12 and 2.13 are supported and 2.13 is used by default. Scala 2.12 support has been deprecated since Apache Kafka 3.0 and will be removed in Apache Kafka 4.0 (see &lt;a href=&#34;https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=181308218&#34;&gt;KIP-751&lt;/a&gt; for more details). See below for how to use a specific Scala version or all of the supported Scala versions.&lt;/p&gt; &#xA;&lt;h3&gt;Build a jar and run it&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew jar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Follow instructions in &lt;a href=&#34;https://kafka.apache.org/quickstart&#34;&gt;https://kafka.apache.org/quickstart&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Build source jar&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew srcJar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build aggregated javadoc&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew aggregatedJavadoc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build javadoc and scaladoc&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew javadoc&#xA;./gradlew javadocJar # builds a javadoc jar for each module&#xA;./gradlew scaladoc&#xA;./gradlew scaladocJar # builds a scaladoc jar for each module&#xA;./gradlew docsJar # builds both (if applicable) javadoc and scaladoc jars for each module&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run unit/integration tests&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew test # runs both unit and integration tests&#xA;./gradlew unitTest&#xA;./gradlew integrationTest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Force re-running tests without code change&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew -Prerun-tests test&#xA;./gradlew -Prerun-tests unitTest&#xA;./gradlew -Prerun-tests integrationTest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running a particular unit/integration test&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew clients:test --tests RequestResponseTest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Repeatedly running a particular unit/integration test&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;I=0; while ./gradlew clients:test -Prerun-tests --tests RequestResponseTest --fail-fast; do (( I=$I+1 )); echo &#34;Completed run: $I&#34;; sleep 1; done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running a particular test method within a unit/integration test&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew core:test --tests kafka.api.ProducerFailureHandlingTest.testCannotSendToInternalTopic&#xA;./gradlew clients:test --tests org.apache.kafka.clients.MetadataTest.testTimeToNextUpdate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running a particular unit/integration test with log4j output&lt;/h3&gt; &#xA;&lt;p&gt;Change the log4j setting in either &lt;code&gt;clients/src/test/resources/log4j.properties&lt;/code&gt; or &lt;code&gt;core/src/test/resources/log4j.properties&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew clients:test --tests RequestResponseTest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Specifying test retries&lt;/h3&gt; &#xA;&lt;p&gt;By default, each failed test is retried once up to a maximum of five retries per test run. Tests are retried at the end of the test task. Adjust these parameters in the following way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew test -PmaxTestRetries=1 -PmaxTestRetryFailures=5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/gradle/test-retry-gradle-plugin&#34;&gt;Test Retry Gradle Plugin&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h3&gt;Generating test coverage reports&lt;/h3&gt; &#xA;&lt;p&gt;Generate coverage reports for the whole project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew reportCoverage -PenableTestCoverage=true -Dorg.gradle.parallel=false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generate coverage for a single module, i.e.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew clients:reportCoverage -PenableTestCoverage=true -Dorg.gradle.parallel=false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building a binary release gzipped tar ball&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew clean releaseTarGz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The release file can be found inside &lt;code&gt;./core/build/distributions/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Building auto generated messages&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes it is only necessary to rebuild the RPC auto-generated message data when switching between branches, as they could fail due to code changes. You can just run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew processMessages processTestMessages&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running a Kafka broker in ZooKeeper mode&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;./bin/zookeeper-server-start.sh config/zookeeper.properties&#xA;./bin/kafka-server-start.sh config/server.properties&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running a Kafka broker in KRaft (Kafka Raft metadata) mode&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/apache/kafka/raw/trunk/config/kraft/README.md&#34;&gt;config/kraft/README.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Cleaning the build&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew clean&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running a task with one of the Scala versions available (2.12.x or 2.13.x)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Note that if building the jars with a version other than 2.13.x, you need to set the &lt;code&gt;SCALA_VERSION&lt;/code&gt; variable or change it in &lt;code&gt;bin/kafka-run-class.sh&lt;/code&gt; to run the quick start.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can pass either the major version (eg 2.12) or the full version (eg 2.12.7):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew -PscalaVersion=2.12 jar&#xA;./gradlew -PscalaVersion=2.12 test&#xA;./gradlew -PscalaVersion=2.12 releaseTarGz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running a task with all the scala versions enabled by default&lt;/h3&gt; &#xA;&lt;p&gt;Invoke the &lt;code&gt;gradlewAll&lt;/code&gt; script followed by the task(s):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlewAll test&#xA;./gradlewAll jar&#xA;./gradlewAll releaseTarGz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running a task for a specific project&lt;/h3&gt; &#xA;&lt;p&gt;This is for &lt;code&gt;core&lt;/code&gt;, &lt;code&gt;examples&lt;/code&gt; and &lt;code&gt;clients&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew core:jar&#xA;./gradlew core:test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Streams has multiple sub-projects, but you can run all the tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew :streams:testAll&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Listing all gradle tasks&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew tasks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building IDE project&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Note that this is not strictly necessary (IntelliJ IDEA has good built-in support for Gradle projects, for example).&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew eclipse&#xA;./gradlew idea&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;eclipse&lt;/code&gt; task has been configured to use &lt;code&gt;${project_dir}/build_eclipse&lt;/code&gt; as Eclipse&#39;s build directory. Eclipse&#39;s default build directory (&lt;code&gt;${project_dir}/bin&lt;/code&gt;) clashes with Kafka&#39;s scripts directory and we don&#39;t use Gradle&#39;s build directory to avoid known issues with this configuration.&lt;/p&gt; &#xA;&lt;h3&gt;Publishing the jar for all versions of Scala and for all projects to maven&lt;/h3&gt; &#xA;&lt;p&gt;The recommended command is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlewAll publish&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For backwards compatibility, the following also works:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlewAll uploadArchives&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note for this to work you should create/update &lt;code&gt;${GRADLE_USER_HOME}/gradle.properties&lt;/code&gt; (typically, &lt;code&gt;~/.gradle/gradle.properties&lt;/code&gt;) and assign the following variables&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mavenUrl=&#xA;mavenUsername=&#xA;mavenPassword=&#xA;signing.keyId=&#xA;signing.password=&#xA;signing.secretKeyRingFile=&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Publishing the streams quickstart archetype artifact to maven&lt;/h3&gt; &#xA;&lt;p&gt;For the Streams archetype project, one cannot use gradle to upload to maven; instead the &lt;code&gt;mvn deploy&lt;/code&gt; command needs to be called at the quickstart folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd streams/quickstart&#xA;mvn deploy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note for this to work you should create/update user maven settings (typically, &lt;code&gt;${USER_HOME}/.m2/settings.xml&lt;/code&gt;) to assign the following variables&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;settings xmlns=&#34;http://maven.apache.org/SETTINGS/1.0.0&#34;&#xA;   xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;&#xA;   xsi:schemaLocation=&#34;http://maven.apache.org/SETTINGS/1.0.0&#xA;                       https://maven.apache.org/xsd/settings-1.0.0.xsd&#34;&amp;gt;&#xA;...                           &#xA;&amp;lt;servers&amp;gt;&#xA;   ...&#xA;   &amp;lt;server&amp;gt;&#xA;      &amp;lt;id&amp;gt;apache.snapshots.https&amp;lt;/id&amp;gt;&#xA;      &amp;lt;username&amp;gt;${maven_username}&amp;lt;/username&amp;gt;&#xA;      &amp;lt;password&amp;gt;${maven_password}&amp;lt;/password&amp;gt;&#xA;   &amp;lt;/server&amp;gt;&#xA;   &amp;lt;server&amp;gt;&#xA;      &amp;lt;id&amp;gt;apache.releases.https&amp;lt;/id&amp;gt;&#xA;      &amp;lt;username&amp;gt;${maven_username}&amp;lt;/username&amp;gt;&#xA;      &amp;lt;password&amp;gt;${maven_password}&amp;lt;/password&amp;gt;&#xA;    &amp;lt;/server&amp;gt;&#xA;    ...&#xA; &amp;lt;/servers&amp;gt;&#xA; ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installing ALL the jars to the local Maven repository&lt;/h3&gt; &#xA;&lt;p&gt;The recommended command to build for both Scala 2.12 and 2.13 is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlewAll publishToMavenLocal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For backwards compatibility, the following also works:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlewAll install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installing specific projects to the local Maven repository&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew -PskipSigning :streams:publishToMavenLocal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If needed, you can specify the Scala version with &lt;code&gt;-PscalaVersion=2.13&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Building the test jar&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew testJar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Determining how transitive dependencies are added&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew core:dependencies --configuration runtime&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Determining if any dependencies could be updated&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew dependencyUpdates&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running code quality checks&lt;/h3&gt; &#xA;&lt;p&gt;There are two code quality analysis tools that we regularly run, spotbugs and checkstyle.&lt;/p&gt; &#xA;&lt;h4&gt;Checkstyle&lt;/h4&gt; &#xA;&lt;p&gt;Checkstyle enforces a consistent coding style in Kafka. You can run checkstyle using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew checkstyleMain checkstyleTest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The checkstyle warnings will be found in &lt;code&gt;reports/checkstyle/reports/main.html&lt;/code&gt; and &lt;code&gt;reports/checkstyle/reports/test.html&lt;/code&gt; files in the subproject build directories. They are also printed to the console. The build will fail if Checkstyle fails.&lt;/p&gt; &#xA;&lt;h4&gt;Spotbugs&lt;/h4&gt; &#xA;&lt;p&gt;Spotbugs uses static analysis to look for bugs in the code. You can run spotbugs using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew spotbugsMain spotbugsTest -x test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The spotbugs warnings will be found in &lt;code&gt;reports/spotbugs/main.html&lt;/code&gt; and &lt;code&gt;reports/spotbugs/test.html&lt;/code&gt; files in the subproject build directories. Use -PxmlSpotBugsReport=true to generate an XML report instead of an HTML one.&lt;/p&gt; &#xA;&lt;h3&gt;JMH microbenchmarks&lt;/h3&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://openjdk.java.net/projects/code-tools/jmh/&#34;&gt;JMH&lt;/a&gt; to write microbenchmarks that produce reliable results in the JVM.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/apache/kafka/raw/trunk/jmh-benchmarks/README.md&#34;&gt;jmh-benchmarks/README.md&lt;/a&gt; for details on how to run the microbenchmarks.&lt;/p&gt; &#xA;&lt;h3&gt;Common build options&lt;/h3&gt; &#xA;&lt;p&gt;The following options should be set with a &lt;code&gt;-P&lt;/code&gt; switch, for example &lt;code&gt;./gradlew -PmaxParallelForks=1 test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;commitId&lt;/code&gt;: sets the build commit ID as .git/HEAD might not be correct if there are local commits added for build purposes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mavenUrl&lt;/code&gt;: sets the URL of the maven deployment repository (&lt;code&gt;file://path/to/repo&lt;/code&gt; can be used to point to a local repository).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;maxParallelForks&lt;/code&gt;: maximum number of test processes to start in parallel. Defaults to the number of processors available to the JVM.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;maxScalacThreads&lt;/code&gt;: maximum number of worker threads for the scalac backend. Defaults to the lowest of &lt;code&gt;8&lt;/code&gt; and the number of processors available to the JVM. The value must be between 1 and 16 (inclusive).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ignoreFailures&lt;/code&gt;: ignore test failures from junit&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;showStandardStreams&lt;/code&gt;: shows standard out and standard error of the test JVM(s) on the console.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;skipSigning&lt;/code&gt;: skips signing of artifacts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;testLoggingEvents&lt;/code&gt;: unit test events to be logged, separated by comma. For example &lt;code&gt;./gradlew -PtestLoggingEvents=started,passed,skipped,failed test&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;xmlSpotBugsReport&lt;/code&gt;: enable XML reports for spotBugs. This also disables HTML reports as only one can be enabled at a time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;maxTestRetries&lt;/code&gt;: maximum number of retries for a failing test case.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;maxTestRetryFailures&lt;/code&gt;: maximum number of test failures before retrying is disabled for subsequent tests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;enableTestCoverage&lt;/code&gt;: enables test coverage plugins and tasks, including bytecode enhancement of classes required to track said coverage. Note that this introduces some overhead when running tests and hence why it&#39;s disabled by default (the overhead varies, but 15-20% is a reasonable estimate).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scalaOptimizerMode&lt;/code&gt;: configures the optimizing behavior of the scala compiler, the value should be one of &lt;code&gt;none&lt;/code&gt;, &lt;code&gt;method&lt;/code&gt;, &lt;code&gt;inline-kafka&lt;/code&gt; or &lt;code&gt;inline-scala&lt;/code&gt; (the default is &lt;code&gt;inline-kafka&lt;/code&gt;). &lt;code&gt;none&lt;/code&gt; is the scala compiler default, which only eliminates unreachable code. &lt;code&gt;method&lt;/code&gt; also includes method-local optimizations. &lt;code&gt;inline-kafka&lt;/code&gt; adds inlining of methods within the kafka packages. Finally, &lt;code&gt;inline-scala&lt;/code&gt; also includes inlining of methods within the scala library (which avoids lambda allocations for methods like &lt;code&gt;Option.exists&lt;/code&gt;). &lt;code&gt;inline-scala&lt;/code&gt; is only safe if the Scala library version is the same at compile time and runtime. Since we cannot guarantee this for all cases (for example, users may depend on the kafka jar for integration tests where they may include a scala library with a different version), we don&#39;t enable it by default. See &lt;a href=&#34;https://www.lightbend.com/blog/scala-inliner-optimizer&#34;&gt;https://www.lightbend.com/blog/scala-inliner-optimizer&lt;/a&gt; for more details.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Dependency Analysis&lt;/h3&gt; &#xA;&lt;p&gt;The gradle &lt;a href=&#34;https://docs.gradle.org/current/userguide/viewing_debugging_dependencies.html&#34;&gt;dependency debugging documentation&lt;/a&gt; mentions using the &lt;code&gt;dependencies&lt;/code&gt; or &lt;code&gt;dependencyInsight&lt;/code&gt; tasks to debug dependencies for the root project or individual subprojects.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, use the &lt;code&gt;allDeps&lt;/code&gt; or &lt;code&gt;allDepInsight&lt;/code&gt; tasks for recursively iterating through all subprojects:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew allDeps&#xA;&#xA;./gradlew allDepInsight --configuration runtimeClasspath --dependency com.fasterxml.jackson.core:jackson-databind&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These take the same arguments as the builtin variants.&lt;/p&gt; &#xA;&lt;h3&gt;Running system tests&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/apache/kafka/trunk/tests/README.md&#34;&gt;tests/README.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Running in Vagrant&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/apache/kafka/trunk/vagrant/README.md&#34;&gt;vagrant/README.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Contribution&lt;/h3&gt; &#xA;&lt;p&gt;Apache Kafka is interested in building the community; we would welcome any thoughts or &lt;a href=&#34;https://issues.apache.org/jira/browse/KAFKA&#34;&gt;patches&lt;/a&gt;. You can reach us &lt;a href=&#34;http://kafka.apache.org/contact.html&#34;&gt;on the Apache mailing lists&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To contribute follow the instructions here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kafka.apache.org/contributing.html&#34;&gt;https://kafka.apache.org/contributing.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>pmd/pmd</title>
    <updated>2022-08-04T01:31:58Z</updated>
    <id>tag:github.com,2022-08-04:/pmd/pmd</id>
    <link href="https://github.com/pmd/pmd" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An extensible multilanguage static code analyzer.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PMD - source code analyzer&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/pmd/pmd?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/pmd/pmd.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/pmd/pmd&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pmd/pmd/actions&#34;&gt;&lt;img src=&#34;https://github.com/pmd/pmd/workflows/build/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/net.sourceforge.pmd/pmd&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/net.sourceforge.pmd/pmd/badge.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jvm-repo-rebuild/reproducible-central#net.sourceforge.pmd:pmd&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Reproducible_Builds-ok-green?labelColor=blue&#34; alt=&#34;Reproducible Builds&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/pmd/pmd&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/pmd/pmd/badge.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codacy.com/app/pmd/pmd?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=pmd/pmd&amp;amp;utm_campaign=Badge_Grade&#34;&gt;&lt;img src=&#34;https://api.codacy.com/project/badge/Grade/a674ee8642ed44c6ba7633626ee95967&#34; alt=&#34;Codacy Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/pmd/pmd/master/code_of_conduct.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Contributor%20Covenant-v2.0%20adopted-ff69b4.svg?sanitize=true&#34; alt=&#34;Contributor Covenant&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pmd.github.io/latest/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-latest-green&#34; alt=&#34;Documentation (latest)&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;PMD&lt;/strong&gt; is a source code analyzer. It finds common programming flaws like unused variables, empty catch blocks, unnecessary object creation, and so forth. It supports many languages. It can be extended with custom rules. It uses JavaCC and Antlr to parse source files into abstract syntax trees (AST) and runs rules against them to find violations. Rules can be written in Java or using a XPath query.&lt;/p&gt; &#xA;&lt;p&gt;It supports Java, JavaScript, Salesforce.com Apex and Visualforce, Modelica, PLSQL, Apache Velocity, XML, XSL, Scala.&lt;/p&gt; &#xA;&lt;p&gt;Additionally it includes &lt;strong&gt;CPD&lt;/strong&gt;, the copy-paste-detector. CPD finds duplicated code in C/C++, C#, Dart, Fortran, Go, Groovy, Java, JavaScript, JSP, Kotlin, Lua, Matlab, Modelica, Objective-C, Perl, PHP, PLSQL, Python, Ruby, Salesforce.com Apex, Scala, Swift, Visualforce and XML.&lt;/p&gt; &#xA;&lt;p&gt;In the future we hope to add support for data/control flow analysis and automatic (quick) fixes where it makes sense.&lt;/p&gt; &#xA;&lt;h2&gt;🚀 Installation and Usage&lt;/h2&gt; &#xA;&lt;p&gt;Download the latest binary zip from the &lt;a href=&#34;https://github.com/pmd/pmd/releases/latest&#34;&gt;releases&lt;/a&gt; and extract it somewhere.&lt;/p&gt; &#xA;&lt;p&gt;Execute &lt;code&gt;bin/run.sh pmd&lt;/code&gt; or &lt;code&gt;bin\pmd.bat&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://pmd.github.io/latest/pmd_userdocs_installation.html&#34;&gt;Getting Started&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Demo:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This shows how PMD can detect for loops, that can be replaced by for-each loops.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pmd/pmd/master/docs/images/userdocs/pmd-demo.gif&#34; alt=&#34;Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are plugins for Maven and Gradle as well as for various IDEs. See &lt;a href=&#34;https://pmd.github.io/latest/pmd_userdocs_tools.html&#34;&gt;Tools / Integrations&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ℹ️ How to get support?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;How do I? -- Ask a question on &lt;a href=&#34;https://stackoverflow.com/questions/tagged/pmd&#34;&gt;StackOverflow&lt;/a&gt; or on &lt;a href=&#34;https://github.com/pmd/pmd/discussions&#34;&gt;discussions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;I got this error, why? -- Ask a question on &lt;a href=&#34;https://stackoverflow.com/questions/tagged/pmd&#34;&gt;StackOverflow&lt;/a&gt; or on &lt;a href=&#34;https://github.com/pmd/pmd/discussions&#34;&gt;discussions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;I got this error and I&#39;m sure it&#39;s a bug -- file an &lt;a href=&#34;https://github.com/pmd/pmd/issues&#34;&gt;issue&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;I have an idea/request/question -- create a new &lt;a href=&#34;https://github.com/pmd/pmd/discussions&#34;&gt;discussion&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;I have a quick question -- ask on our &lt;a href=&#34;https://gitter.im/pmd/pmd&#34;&gt;Gitter chat&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Where&#39;s your documentation? -- &lt;a href=&#34;https://pmd.github.io/latest/&#34;&gt;https://pmd.github.io/latest/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🤝 Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.&lt;/p&gt; &#xA;&lt;p&gt;Our latest source of PMD can be found on &lt;a href=&#34;https://github.com/pmd/pmd&#34;&gt;GitHub&lt;/a&gt;. Fork us!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pmd/pmd/master/BUILDING.md&#34;&gt;How to build PMD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pmd/pmd/master/CONTRIBUTING.md&#34;&gt;How to contribute to PMD&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The rule designer is developed over at &lt;a href=&#34;https://github.com/pmd/pmd-designer&#34;&gt;pmd/pmd-designer&lt;/a&gt;. Please see &lt;a href=&#34;https://github.com/pmd/pmd-designer#contributing&#34;&gt;its README&lt;/a&gt; for developer documentation.&lt;/p&gt; &#xA;&lt;h2&gt;💵 Financial Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Become a financial contributor and help us sustain our community. &lt;a href=&#34;https://opencollective.com/pmd/contribute&#34;&gt;Contribute&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;✨ Contributors&lt;/h2&gt; &#xA;&lt;p&gt;This project follows the &lt;a href=&#34;https://github.com/all-contributors/all-contributors&#34;&gt;all-contributors&lt;/a&gt; specification. Contributions of any kind welcome!&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/pmd/pmd/master/docs/pages/pmd/projectdocs/credits.md&#34;&gt;credits&lt;/a&gt; for the complete list.&lt;/p&gt; &#xA;&lt;h2&gt;📝 License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pmd/pmd/master/LICENSE&#34;&gt;BSD Style&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>redisson/redisson</title>
    <updated>2022-08-04T01:31:58Z</updated>
    <id>tag:github.com,2022-08-04:/redisson/redisson</id>
    <link href="https://github.com/redisson/redisson" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Redisson - Redis Java client with features of In-Memory Data Grid. Over 50 Redis based Java objects and services: Set, Multimap, SortedSet, Map, List, Queue, Deque, Semaphore, Lock, AtomicLong, Map Reduce, Publish / Subscribe, Bloom filter, Spring Cache, Tomcat, Scheduler, JCache API, Hibernate, MyBatis, RPC, local cache ...&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Redisson - Redis Java client&lt;br&gt;with features of an in-memory data grid&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/org.redisson/redisson&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/org.redisson/redisson/badge.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.javadoc.io/doc/org.redisson/redisson&#34;&gt;&lt;img src=&#34;http://www.javadoc.io/badge/org.redisson/redisson.svg?sanitize=true&#34; alt=&#34;JavaDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;&lt;img src=&#34;http://img.shields.io/:license-apache-brightgreen.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/redisson/redisson#quick-start&#34;&gt;Quick start&lt;/a&gt; | &lt;a href=&#34;https://github.com/redisson/redisson/wiki/Table-of-Content&#34;&gt;Documentation&lt;/a&gt; | &lt;a href=&#34;https://github.com/redisson/redisson/raw/master/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt; | &lt;a href=&#34;https://github.com/redisson/redisson-examples&#34;&gt;Code examples&lt;/a&gt; | &lt;a href=&#34;https://github.com/redisson/redisson/wiki/16.-FAQ&#34;&gt;FAQs&lt;/a&gt; | &lt;a href=&#34;https://github.com/redisson/redisson/issues/new&#34;&gt;Report an issue&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Based on high-performance async and lock-free Java Redis client and &lt;a href=&#34;http://netty.io&#34;&gt;Netty&lt;/a&gt; framework.&lt;br&gt; JDK compatibility: 1.8 - 18, Android&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Redis Replicated setup (also compatible with &lt;a href=&#34;http://docs.aws.amazon.com/AmazonElastiCache/latest/UserGuide/Replication.html&#34;&gt;AWS ElastiCache&lt;/a&gt; and &lt;a href=&#34;https://azure.microsoft.com/en-us/services/cache/&#34;&gt;Azure Redis Cache&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Redis Cluster setup (also compatible with &lt;a href=&#34;http://docs.aws.amazon.com/AmazonElastiCache/latest/UserGuide/Clusters.html&#34;&gt;AWS ElastiCache Cluster&lt;/a&gt;, &lt;a href=&#34;https://aws.amazon.com/memorydb&#34;&gt;Amazon MemoryDB&lt;/a&gt; and &lt;a href=&#34;https://azure.microsoft.com/en-us/services/cache/&#34;&gt;Azure Redis Cache&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Redis Sentinel setup&lt;/li&gt; &#xA; &lt;li&gt;Redis with Master with Slave only&lt;/li&gt; &#xA; &lt;li&gt;Redis Single (also compatible with &lt;a href=&#34;https://azure.microsoft.com/en-us/services/cache/&#34;&gt;Azure Redis Cache&lt;/a&gt; and &lt;a href=&#34;https://cloud.google.com/memorystore/docs/redis/&#34;&gt;Google Cloud Memorystore for Redis&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Thread-safe implementation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/redisson/redisson/wiki/6.-distributed-objects/#615-json-object-holder&#34;&gt;JSON datatype&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/redisson/redisson/wiki/3.-operations-execution#32-reactive-way&#34;&gt;Reactive Streams&lt;/a&gt; API&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/redisson/redisson/wiki/3.-operations-execution#32-reactive-way&#34;&gt;RxJava3&lt;/a&gt; API&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/redisson/redisson/wiki/3.-operations-execution#31-async-way&#34;&gt;Asynchronous&lt;/a&gt; API&lt;/li&gt; &#xA; &lt;li&gt;Asynchronous connection pool&lt;/li&gt; &#xA; &lt;li&gt;Lua scripting&lt;/li&gt; &#xA; &lt;li&gt;Local cache support including &lt;a href=&#34;https://github.com/ben-manes/caffeine&#34;&gt;Caffeine&lt;/a&gt;-based implementation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/redisson/redisson/wiki/6.-Distributed-objects&#34;&gt;Distributed Java objects&lt;/a&gt;&lt;br&gt; Object holder, Binary stream holder, Geospatial holder, BitSet, AtomicLong, AtomicDouble, PublishSubscribe, Bloom filter, HyperLogLog&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/redisson/redisson/wiki/7.-Distributed-collections&#34;&gt;Distributed Java collections&lt;/a&gt;&lt;br&gt; Map, Multimap, Set, List, SortedSet, ScoredSortedSet, LexSortedSet, Queue, Deque, Blocking Queue, Bounded Blocking Queue, Blocking Deque, Delayed Queue, Priority Queue, Priority Deque&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/redisson/redisson/wiki/8.-Distributed-locks-and-synchronizers&#34;&gt;Distributed Java locks and synchronizers&lt;/a&gt;&lt;br&gt; Lock, FairLock, MultiLock, RedLock, ReadWriteLock, Semaphore, PermitExpirableSemaphore, CountDownLatch&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/redisson/redisson/wiki/9.-distributed-services&#34;&gt;Distributed services&lt;/a&gt;&lt;br&gt; Remote service, Live Object service, Executor service, Scheduler service, MapReduce service&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/redisson/redisson/tree/master/redisson-helidon&#34;&gt;Helidon&lt;/a&gt; integration&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/redisson/redisson/tree/master/redisson-micronaut&#34;&gt;Micronaut&lt;/a&gt; integration&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/redisson/redisson/tree/master/redisson-quarkus&#34;&gt;Quarkus&lt;/a&gt; integration&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/redisson/redisson/wiki/14.-Integration-with-frameworks/#142-spring-cache&#34;&gt;Spring Cache&lt;/a&gt; implementation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/redisson/redisson/wiki/14.-Integration-with-frameworks/#148-spring-transaction-manager&#34;&gt;Spring Transaction API&lt;/a&gt; implementation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/redisson/redisson/tree/master/redisson-spring-data&#34;&gt;Spring Data Redis&lt;/a&gt; integration&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/redisson/redisson/tree/master/redisson-spring-boot-starter&#34;&gt;Spring Boot Starter&lt;/a&gt; implementation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/redisson/redisson/tree/master/redisson-hibernate&#34;&gt;Hibernate Cache&lt;/a&gt; implementation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/redisson/redisson/tree/master/redisson-mybatis&#34;&gt;MyBatis Cache&lt;/a&gt; implementation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/redisson/redisson/wiki/10.-Additional-features#104-transactions&#34;&gt;Transactions API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/redisson/redisson/wiki/14.-Integration-with-frameworks/#144-jcache-api-jsr-107-implementation&#34;&gt;JCache API (JSR-107)&lt;/a&gt; implementation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/redisson/redisson/tree/master/redisson-tomcat&#34;&gt;Tomcat Session Manager&lt;/a&gt; implementation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/redisson/redisson/wiki/14.-Integration-with-frameworks/#147-spring-session&#34;&gt;Spring Session&lt;/a&gt; implementation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/redisson/redisson/wiki/10.-additional-features#103-execution-batches-of-commands&#34;&gt;Redis pipelining&lt;/a&gt; (command batches)&lt;/li&gt; &#xA; &lt;li&gt;Supports Android platform&lt;/li&gt; &#xA; &lt;li&gt;Supports auto-reconnection&lt;/li&gt; &#xA; &lt;li&gt;Supports failed to send command auto-retry&lt;/li&gt; &#xA; &lt;li&gt;Supports OSGi&lt;/li&gt; &#xA; &lt;li&gt;Supports SSL&lt;/li&gt; &#xA; &lt;li&gt;Supports many popular codecs (&lt;a href=&#34;https://github.com/jboss-remoting/jboss-marshalling&#34;&gt;JBoss Marshalling&lt;/a&gt;, &lt;a href=&#34;https://github.com/FasterXML/jackson&#34;&gt;Jackson JSON&lt;/a&gt;, &lt;a href=&#34;http://avro.apache.org/&#34;&gt;Avro&lt;/a&gt;, &lt;a href=&#34;http://wiki.fasterxml.com/SmileFormatSpec&#34;&gt;Smile&lt;/a&gt;, &lt;a href=&#34;http://cbor.io/&#34;&gt;CBOR&lt;/a&gt;, &lt;a href=&#34;http://msgpack.org/&#34;&gt;MsgPack&lt;/a&gt;, &lt;a href=&#34;https://github.com/EsotericSoftware/kryo&#34;&gt;Kryo&lt;/a&gt;, &lt;a href=&#34;https://amzn.github.io/ion-docs/&#34;&gt;Amazon Ion&lt;/a&gt;, &lt;a href=&#34;https://github.com/jpountz/lz4-java&#34;&gt;LZ4&lt;/a&gt;, &lt;a href=&#34;https://github.com/xerial/snappy-java&#34;&gt;Snappy&lt;/a&gt; and JDK Serialization)&lt;/li&gt; &#xA; &lt;li&gt;With over 2000 unit tests&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--&#xA;Used by&#xA;================================&#xA;[![Siemens](https://redisson.org/assets/logos/client29.png &#34;Siemens&#34;)](https://www.siemens.com) &amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA;[![BMW GROUP](https://redisson.org/assets/logos/client27.png &#34;BMW GROUP&#34;)](https://www.bmwgroup.com) &amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA;[![AIG](https://redisson.org/assets/logos/client24.png &#34;AIG&#34;)](https://www.aig.com/) &amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA;[![S&amp;P Global](https://redisson.org/assets/logos/client20.png &#34;S&amp;P Global&#34;)](https://www.spglobal.com/) &amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA;[![SAP](https://redisson.org/assets/logos/client12.png &#34;SAP&#34;)](http://www.sap.com/) &amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA;[![EA](https://redisson.org/assets/logos/client1.png &#34;EA&#34;)](http://ea.com/) &amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA;[![Adobe](https://redisson.org/assets/logos/client23.png &#34;Adobe&#34;)](https://www.adobe.com/)  &#xA;&#xA;[![Jeppesen](https://redisson.org/assets/logos/client25.png &#34;Jeppesen&#34;)](https://www.jeppesen.com/) &amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA;[![BROOKHAVEN](https://redisson.org/assets/logos/client6.png &#34;Brookhaven National Laboratory&#34;)](http://bnl.gov/) &amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA;[![New Relic Synthetics](https://redisson.org/assets/logos/client3.png &#34;New Relic Synthetics&#34;)](http://newrelic.com/synthetics) &amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA;[![Netflix](https://redisson.org/assets/logos/client10.png &#34;Netflix&#34;)](https://netflix.com/) &amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA;[![Personal Capital](https://redisson.org/assets/logos/client26.png &#34;Personal Capital&#34;)](https://www.personalcapital.com)  &#xA;&#xA;[![Singtel](https://redisson.org/assets/logos/client5.png &#34;New Relic Synthetics&#34;)](http://singtel.com/) &amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA;[![Baidu](https://redisson.org/assets/logos/client2.png &#34;Baidu&#34;)](http://baidu.com/) &amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA;[![Infor](https://redisson.org/assets/logos/client4.png &#34;Infor&#34;)](http://www.infor.com/) &amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA;[![Crimson Hexagon](https://redisson.org/assets/logos/client7.png &#34;Crimson Hexagon&#34;)](https://www.crimsonhexagon.com/) &amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA;[![ContaAzul](https://redisson.org/assets/logos/client18.png &#34;ContaAzul&#34;)](https://contaazul.com/)&amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA;[![马蜂窝](https://redisson.org/assets/logos/client33.png &#34;马蜂窝&#34;)](http://www.mafengwo.cn/)  &#xA;&#xA;[![Datorama](https://redisson.org/assets/logos/client8.png &#34;Datorama&#34;)](https://datorama.com/)&amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA;[![Ticketmaster](https://redisson.org/assets/logos/client14.png &#34;Ticketmaster&#34;)](http://www.ticketmaster.com/)&amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA;[![NAB](https://redisson.org/assets/logos/client11.png &#34;NAB&#34;)](https://www.nab.com.au/)&amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA;[![Juniper](https://redisson.org/assets/logos/client31.png &#34;Juniper&#34;)](https://www.juniper.net/)&amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA;[![火币](https://redisson.org/assets/logos/client32.png &#34;火币&#34;)](https://www.huobi.com/)&amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA;&#xA;[![Alibaba](https://redisson.org/assets/logos/client19.png &#34;Alibaba&#34;)](http://www.alibaba-inc.com)&amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA;[![Flipkart](https://redisson.org/assets/logos/client21.png &#34;Flipkart&#34;)](https://www.flipkart.com/)&amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA;[![Invaluable](https://redisson.org/assets/logos/client13.png &#34;Invaluable&#34;)](http://www.invaluable.com/)&amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA;[![BBK](https://redisson.org/assets/logos/client22.png &#34;BBK&#34;)](http://www.gdbbk.com/)  &#xA;[![SULAKE](https://redisson.org/assets/logos/client17.png &#34;SULAKE&#34;)](http://www.sulake.com/)&#xA;&#xA;&lt;sub&gt;Logos, product names and all other trademarks displayed on this page belong to their respective holders and used for identification purposes only. Use of these trademarks, names and brands does not imply endorsement.&lt;/sub&gt;&#xA;--&gt; &#xA;&lt;h2&gt;Success stories&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://engineering.datorama.com/moving-from-hazelcast-to-redis-b90a0769d1cb&#34;&gt;Moving from Hazelcast to Redis / Datorama&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://blogs.halodoc.io/why-and-how-we-move-from-hazelcast-to-redis-2/&#34;&gt;Migrating from Hazelcast to Redis / Halodoc&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://carlosbecker.com/posts/distributed-locks-redis/&#34;&gt;Distributed Locking with Redis (Migration from Hazelcast) / ContaAzul&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=JF5R2ucKTEg&#34;&gt;Migrating from Coherence to Redis&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;h4&gt;Maven&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;&#xA;   &amp;lt;groupId&amp;gt;org.redisson&amp;lt;/groupId&amp;gt;&#xA;   &amp;lt;artifactId&amp;gt;redisson&amp;lt;/artifactId&amp;gt;&#xA;   &amp;lt;version&amp;gt;3.17.5&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Gradle&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;compile &#39;org.redisson:redisson:3.17.5&#39;  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;SBT&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;libraryDependencies += &#34;org.redisson&#34; % &#34;redisson&#34; % &#34;3.17.5&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Java&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 1. Create config object&#xA;Config config = new Config();&#xA;config.useClusterServers()&#xA;       // use &#34;rediss://&#34; for SSL connection&#xA;      .addNodeAddress(&#34;redis://127.0.0.1:7181&#34;);&#xA;&#xA;// or read config from file&#xA;config = Config.fromYAML(new File(&#34;config-file.yaml&#34;)); &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 2. Create Redisson instance&#xA;&#xA;// Sync and Async API&#xA;RedissonClient redisson = Redisson.create(config);&#xA;&#xA;// Reactive API&#xA;RedissonReactiveClient redissonReactive = redisson.reactive();&#xA;&#xA;// RxJava3 API&#xA;RedissonRxClient redissonRx = redisson.rxJava();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 3. Get Redis based implementation of java.util.concurrent.ConcurrentMap&#xA;RMap&amp;lt;MyKey, MyValue&amp;gt; map = redisson.getMap(&#34;myMap&#34;);&#xA;&#xA;RMapReactive&amp;lt;MyKey, MyValue&amp;gt; mapReactive = redissonReactive.getMap(&#34;myMap&#34;);&#xA;&#xA;RMapRx&amp;lt;MyKey, MyValue&amp;gt; mapRx = redissonRx.getMap(&#34;myMap&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 4. Get Redis based implementation of java.util.concurrent.locks.Lock&#xA;RLock lock = redisson.getLock(&#34;myLock&#34;);&#xA;&#xA;RLockReactive lockReactive = redissonReactive.getLock(&#34;myLock&#34;);&#xA;&#xA;RLockRx lockRx = redissonRx.getLock(&#34;myLock&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 4. Get Redis based implementation of java.util.concurrent.ExecutorService&#xA;RExecutorService executor = redisson.getExecutorService(&#34;myExecutorService&#34;);&#xA;&#xA;// over 50 Redis based Java objects and services ...&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Try &lt;strong&gt;&lt;a href=&#34;https://redisson.pro&#34;&gt;Redisson PRO&lt;/a&gt;&lt;/strong&gt; with &lt;strong&gt;ultra-fast performance&lt;/strong&gt; and &lt;strong&gt;support by SLA&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Downloads&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&amp;amp;g=org.redisson&amp;amp;a=redisson&amp;amp;v=3.17.5&amp;amp;e=jar&#34;&gt;Redisson 3.17.5&lt;/a&gt;, &lt;a href=&#34;https://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&amp;amp;g=org.redisson&amp;amp;a=redisson-all&amp;amp;v=3.17.5&amp;amp;e=jar&#34;&gt;Redisson node 3.17.5&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;FAQs&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/redisson/redisson/wiki/16.-FAQ#q-what-is-the-cause-of-redistimeoutexception&#34;&gt;Q: What is the cause of RedisTimeoutException?&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/redisson/redisson/wiki/16.-FAQ#q-when-do-i-need-to-shut-down-a-redisson-instance-at-the-end-of-each-request-or-the-end-of-the-life-of-a-thread&#34;&gt;Q: When do I need to shut down a Redisson instance, at the end of each request or the end of the life of a thread?&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/redisson/redisson/wiki/16.-FAQ#q-in-mapcachesetcachespringcachejcache-i-have-set-an-expiry-time-to-an-entry-why-is-it-still-in-redis-when-it-should-be-disappeared&#34;&gt;Q: In MapCache/SetCache/SpringCache/JCache, I have set an expiry time to an entry, why is it still in Redis when it should be disappeared?&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/redisson/redisson/wiki/16.-FAQ#q-how-can-i-perform-pipeliningtransaction-through-redisson&#34;&gt;Q: How can I perform Pipelining/Transaction through Redisson?&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/redisson/redisson/wiki/16.-FAQ#q-is-redisson-thread-safe-can-i-share-an-instance-of-it-between-different-threads&#34;&gt;Q: Is Redisson thread safe? Can I share an instance of it between different threads?&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/redisson/redisson/wiki/16.-FAQ#q-can-i-use-different-encoderdecoders-for-different-tasks&#34;&gt;Q: Can I use different encoder/decoders for different tasks?&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>