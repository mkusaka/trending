<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-16T01:38:43Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>deepjavalibrary/djl</title>
    <updated>2023-06-16T01:38:43Z</updated>
    <id>tag:github.com,2023-06-16:/deepjavalibrary/djl</id>
    <link href="https://github.com/deepjavalibrary/djl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Engine-Agnostic Deep Learning Framework in Java&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/deepjavalibrary/djl/master/website/img/deepjavalibrary.png?raw=true&#34; alt=&#34;DeepJavaLibrary&#34; title=&#34;Deep Java Library&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/deepjavalibrary/djl/workflows/Continuous/badge.svg?sanitize=true&#34; alt=&#34;Continuous&#34;&gt; &lt;img src=&#34;https://github.com/deepjavalibrary/djl/workflows/Docs/badge.svg?sanitize=true&#34; alt=&#34;Docs&#34;&gt; &lt;img src=&#34;https://github.com/deepjavalibrary/djl/workflows/Nightly%20Publish/badge.svg?sanitize=true&#34; alt=&#34;Nightly Publish&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Deep Java Library (DJL)&lt;/h1&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Deep Java Library (DJL) is an open-source, high-level, engine-agnostic Java framework for deep learning. DJL is designed to be easy to get started with and simple to use for Java developers. DJL provides a native Java development experience and functions like any other regular Java library.&lt;/p&gt; &#xA;&lt;p&gt;You don&#39;t have to be machine learning/deep learning expert to get started. You can use your existing Java expertise as an on-ramp to learn and use machine learning and deep learning. You can use your favorite IDE to build, train, and deploy your models. DJL makes it easy to integrate these models with your Java applications.&lt;/p&gt; &#xA;&lt;p&gt;Because DJL is deep learning engine agnostic, you don&#39;t have to make a choice between engines when creating your projects. You can switch engines at any point. To ensure the best performance, DJL also provides automatic CPU/GPU choice based on hardware configuration.&lt;/p&gt; &#xA;&lt;p&gt;DJL&#39;s ergonomic API interface is designed to guide you with best practices to accomplish deep learning tasks. The following pseudocode demonstrates running inference:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    // Assume user uses a pre-trained model from model zoo, they just need to load it&#xA;    Criteria&amp;lt;Image, Classifications&amp;gt; criteria =&#xA;            Criteria.builder()&#xA;                    .optApplication(Application.CV.OBJECT_DETECTION) // find object detection model&#xA;                    .setTypes(Image.class, Classifications.class)    // define input and output&#xA;                    .optFilter(&#34;backbone&#34;, &#34;resnet50&#34;)               // choose network architecture&#xA;                    .build();&#xA;&#xA;    Image img = ImageFactory.getInstance().fromUrl(&#34;http://...&#34;);    // read image&#xA;    try (ZooModel&amp;lt;Image, Classifications&amp;gt; model = criteria.loadModel();&#xA;         Predictor&amp;lt;Image, Classifications&amp;gt; predictor = model.newPredictor()) {&#xA;        Classifications result = predictor.predict(img);&#xA;&#xA;        // get the classification and probability&#xA;        ...&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following pseudocode demonstrates running training:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    // Construct your neural network with built-in blocks&#xA;    Block block = new Mlp(28 * 28, 10, new int[] {128, 64});&#xA;&#xA;    Model model = Model.newInstance(&#34;mlp&#34;); // Create an empty model&#xA;    model.setBlock(block);                  // set neural network to model&#xA;&#xA;    // Get training and validation dataset (MNIST dataset)&#xA;    Dataset trainingSet = new Mnist.Builder().setUsage(Usage.TRAIN) ... .build();&#xA;    Dataset validateSet = new Mnist.Builder().setUsage(Usage.TEST) ... .build();&#xA;&#xA;    // Setup training configurations, such as Initializer, Optimizer, Loss ...&#xA;    TrainingConfig config = setupTrainingConfig();&#xA;    Trainer trainer = model.newTrainer(config);&#xA;    /*&#xA;     * Configure input shape based on dataset to initialize the trainer.&#xA;     * 1st axis is batch axis, we can use 1 for initialization.&#xA;     * MNIST is 28x28 grayscale image and pre processed into 28 * 28 NDArray.&#xA;     */&#xA;    trainer.initialize(new Shape(1, 28 * 28));&#xA;    EasyTrain.fit(trainer, epoch, trainingSet, validateSet);&#xA;&#xA;    // Save the model&#xA;    model.save(modelDir, &#34;mlp&#34;);&#xA;&#xA;    // Close the resources&#xA;    trainer.close();&#xA;    model.close();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/deepjavalibrary/djl/master/docs/quick_start.md&#34;&gt;Getting Started&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/deepjavalibrary/djl/master/docs/README.md#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://d2l.djl.ai/&#34;&gt;DJL&#39;s D2L Book&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://javadoc.djl.ai/&#34;&gt;JavaDoc API Reference&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Release Notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepjavalibrary/djl/releases/tag/v0.22.1&#34;&gt;0.22.1&lt;/a&gt; (&lt;a href=&#34;https://github.com/deepjavalibrary/djl/tree/v0.22.1&#34;&gt;Code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepjavalibrary/djl/releases/tag/v0.21.0&#34;&gt;0.21.0&lt;/a&gt; (&lt;a href=&#34;https://github.com/deepjavalibrary/djl/tree/v0.21.0&#34;&gt;Code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepjavalibrary/djl/releases/tag/v0.20.0&#34;&gt;0.20.0&lt;/a&gt; (&lt;a href=&#34;https://github.com/deepjavalibrary/djl/tree/v0.20.0&#34;&gt;Code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepjavalibrary/djl/releases/tag/v0.19.0&#34;&gt;0.19.0&lt;/a&gt; (&lt;a href=&#34;https://github.com/deepjavalibrary/djl/tree/v0.19.0&#34;&gt;Code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepjavalibrary/djl/releases/tag/v0.18.0&#34;&gt;0.18.0&lt;/a&gt; (&lt;a href=&#34;https://github.com/deepjavalibrary/djl/tree/v0.18.0&#34;&gt;Code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepjavalibrary/djl/releases/tag/v0.17.0&#34;&gt;0.17.0&lt;/a&gt; (&lt;a href=&#34;https://github.com/deepjavalibrary/djl/tree/v0.17.0&#34;&gt;Code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepjavalibrary/djl/releases/tag/v0.16.0&#34;&gt;0.16.0&lt;/a&gt; (&lt;a href=&#34;https://github.com/deepjavalibrary/djl/tree/v0.16.0&#34;&gt;Code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepjavalibrary/djl/releases/tag/v0.15.0&#34;&gt;0.15.0&lt;/a&gt; (&lt;a href=&#34;https://github.com/deepjavalibrary/djl/tree/v0.15.0&#34;&gt;Code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepjavalibrary/djl/releases/tag/v0.14.0&#34;&gt;0.14.0&lt;/a&gt; (&lt;a href=&#34;https://github.com/deepjavalibrary/djl/tree/v0.14.0&#34;&gt;Code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepjavalibrary/djl/releases/tag/v0.13.0&#34;&gt;0.13.0&lt;/a&gt; (&lt;a href=&#34;https://github.com/deepjavalibrary/djl/tree/v0.13.0&#34;&gt;Code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepjavalibrary/djl/releases/tag/v0.12.0&#34;&gt;0.12.0&lt;/a&gt; (&lt;a href=&#34;https://github.com/deepjavalibrary/djl/tree/v0.12.0&#34;&gt;Code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepjavalibrary/djl/releases/tag/v0.11.0&#34;&gt;0.11.0&lt;/a&gt; (&lt;a href=&#34;https://github.com/deepjavalibrary/djl/tree/v0.11.0&#34;&gt;Code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepjavalibrary/djl/releases/tag/v0.10.0&#34;&gt;0.10.0&lt;/a&gt; (&lt;a href=&#34;https://github.com/deepjavalibrary/djl/tree/v0.10.0&#34;&gt;Code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepjavalibrary/djl/releases/tag/v0.9.0&#34;&gt;0.9.0&lt;/a&gt; (&lt;a href=&#34;https://github.com/deepjavalibrary/djl/tree/v0.9.0&#34;&gt;Code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepjavalibrary/djl/releases/tag/v0.8.0&#34;&gt;0.8.0&lt;/a&gt; (&lt;a href=&#34;https://github.com/deepjavalibrary/djl/tree/v0.8.0&#34;&gt;Code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepjavalibrary/djl/releases/tag/v0.6.0&#34;&gt;0.6.0&lt;/a&gt; (&lt;a href=&#34;https://github.com/deepjavalibrary/djl/tree/v0.6.0&#34;&gt;Code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepjavalibrary/djl/releases/tag/v0.5.0&#34;&gt;0.5.0&lt;/a&gt; (&lt;a href=&#34;https://github.com/deepjavalibrary/djl/tree/v0.5.0&#34;&gt;Code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepjavalibrary/djl/releases/tag/v0.4.0&#34;&gt;0.4.0&lt;/a&gt; (&lt;a href=&#34;https://github.com/deepjavalibrary/djl/tree/v0.4.0&#34;&gt;Code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepjavalibrary/djl/releases/tag/v0.3.0&#34;&gt;0.3.0&lt;/a&gt; (&lt;a href=&#34;https://github.com/deepjavalibrary/djl/tree/v0.3.0&#34;&gt;Code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepjavalibrary/djl/releases/tag/v0.2.1&#34;&gt;0.2.1&lt;/a&gt; (&lt;a href=&#34;https://github.com/deepjavalibrary/djl/tree/v0.2.1&#34;&gt;Code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepjavalibrary/djl/releases/tag/v0.2.0&#34;&gt;0.2.0 Initial release&lt;/a&gt; (&lt;a href=&#34;https://github.com/deepjavalibrary/djl/tree/v0.2.0&#34;&gt;Code&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The release of DJL 0.23.0 is planned for June or July 2023.&lt;/p&gt; &#xA;&lt;h2&gt;Building From Source&lt;/h2&gt; &#xA;&lt;p&gt;To build from source, begin by checking out the code. Once you have checked out the code locally, you can build it as follows using Gradle:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# for Linux/macOS:&#xA;./gradlew build&#xA;&#xA;# for Windows:&#xA;gradlew build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To increase build speed, you can use the following command to skip unit tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# for Linux/macOS:&#xA;./gradlew build -x test&#xA;&#xA;# for Windows:&#xA;gradlew build -x test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Importing into eclipse&lt;/h3&gt; &#xA;&lt;p&gt;to import source project into eclipse&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# for Linux/macOS:&#xA;./gradlew eclipse&#xA;&#xA;&#xA;# for Windows:&#xA;gradlew eclipse&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;in eclipse&lt;/p&gt; &#xA;&lt;p&gt;file-&amp;gt;import-&amp;gt;gradle-&amp;gt;existing gradle project&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; please set your workspace text encoding setting to UTF-8&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;You can read our guide to &lt;a href=&#34;https://raw.githubusercontent.com/deepjavalibrary/djl/master/docs/forums.md&#34;&gt;community forums, following DJL, issues, discussions, and RFCs&lt;/a&gt; to figure out the best way to share and find content from the DJL community.&lt;/p&gt; &#xA;&lt;p&gt;Join our &lt;a href=&#34;http://tiny.cc/djl_slack&#34;&gt;&lt;img src=&#34;https://cdn3.iconfinder.com/data/icons/social-media-2169/24/social_media_social_media_logo_slack-512.png&#34; width=&#34;20px&#34;&gt; slack channel&lt;/a&gt; to get in touch with the development team, for questions and discussions.&lt;/p&gt; &#xA;&lt;p&gt;Follow our &lt;a href=&#34;https://twitter.com/deepjavalibrary&#34;&gt;&lt;img src=&#34;https://cdn2.iconfinder.com/data/icons/social-media-2285/512/1_Twitter_colored_svg-512.png&#34; width=&#34;20px&#34;&gt; twitter&lt;/a&gt; to see updates about new content, features, and releases.&lt;/p&gt; &#xA;&lt;p&gt;关注我们 &lt;a href=&#34;https://zhuanlan.zhihu.com/c_1255493231133417472&#34;&gt;&lt;img src=&#34;https://www.iconfinder.com/icons/5060515/download/svg/512&#34; width=&#34;20px&#34;&gt; 知乎专栏&lt;/a&gt; 获取DJL最新的内容！&lt;/p&gt; &#xA;&lt;h2&gt;Useful Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://djl.ai/&#34;&gt;DJL Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.djl.ai/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.djl.ai/docs/demos/index.html&#34;&gt;DJL Demos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://d2l.djl.ai/&#34;&gt;Dive into Deep Learning Book Java version&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/deepjavalibrary/djl/master/LICENSE&#34;&gt;Apache-2.0 License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>deeplearning4j/deeplearning4j</title>
    <updated>2023-06-16T01:38:43Z</updated>
    <id>tag:github.com,2023-06-16:/deeplearning4j/deeplearning4j</id>
    <link href="https://github.com/deeplearning4j/deeplearning4j" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Suite of tools for deploying and training deep learning models using the JVM. Highlights include model import for keras, tensorflow, and onnx/pytorch, a modular and tiny c++ library for running math code and a java based math library on top of the core c++ library. Also includes samediff: a pytorch/tensorflow like library for running deep learni…&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://www.zeljkoobrenovic.com/tools/tech/images/eclipse_deeplearning4j.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://deeplearning4j.konduit.ai/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/user-documentation-blue.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://community.konduit.ai/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Get%20Help-Community%20Forum-blue&#34; alt=&#34;Get help at the community forum&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://javadoc.io/doc/org.deeplearning4j/deeplearning4j-nn&#34;&gt;&lt;img src=&#34;https://javadoc.io/badge2/org.deeplearning4j/deeplearning4j-nn/DL4J%20API%20Doc.svg?sanitize=true&#34; alt=&#34;javadoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://javadoc.io/doc/org.nd4j/nd4j-api&#34;&gt;&lt;img src=&#34;https://javadoc.io/badge2/org.nd4j/nd4j-api/ND4J%20API%20Doc.svg?sanitize=true&#34; alt=&#34;javadoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/deeplearning4j/deeplearning4j/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/eclipse/deeplearning4j&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/commit-activity/m/eclipse/deeplearning4j&#34; alt=&#34;GitHub commit activity&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;&lt;a href=&#34;https://deeplearning4j.konduit.ai/&#34;&gt;Eclipse Deeplearning4J&lt;/a&gt;&lt;/strong&gt; (DL4J) ecosystem is a set of projects intended to support all the needs of a JVM based deep learning application. This means starting with the raw data, loading and preprocessing it from wherever and whatever format it is in to building and tuning a wide variety of simple and complex deep learning networks.&lt;/p&gt; &#xA;&lt;p&gt;Because Deeplearning4J runs on the JVM you can use it with a wide variety of JVM based languages other than Java, like Scala, Kotlin, Clojure and many more.&lt;/p&gt; &#xA;&lt;p&gt;The DL4J stack comprises of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;DL4J&lt;/strong&gt;: High level API to build MultiLayerNetworks and ComputationGraphs with a variety of layers, including custom ones. Supports importing Keras models from h5, including tf.keras models (as of 1.0.0-beta7) and also supports distributed training on Apache Spark&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ND4J&lt;/strong&gt;: General purpose linear algebra library with over 500 mathematical, linear algebra and deep learning operations. ND4J is based on the highly-optimized C++ codebase LibND4J that provides CPU (AVX2/512) and GPU (CUDA) support and acceleration by libraries such as OpenBLAS, OneDNN (MKL-DNN), cuDNN, cuBLAS, etc&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SameDiff&lt;/strong&gt; : Part of the ND4J library, SameDiff is our automatic differentiation / deep learning framework. SameDiff uses a graph-based (define then run) approach, similar to TensorFlow graph mode. Eager graph (TensorFlow 2.x eager/PyTorch) graph execution is planned. SameDiff supports importing TensorFlow frozen model format .pb (protobuf) models. Import for ONNX, TensorFlow SavedModel and Keras models are planned. Deeplearning4j also has full SameDiff support for easily writing custom layers and loss functions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DataVec&lt;/strong&gt;: ETL for machine learning data in a wide variety of formats and files (HDFS, Spark, Images, Video, Audio, CSV, Excel etc)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;LibND4J&lt;/strong&gt; : C++ library that underpins everything. For more information on how the JVM acceses native arrays and operations refer to &lt;a href=&#34;https://github.com/bytedeco/javacpp&#34;&gt;JavaCPP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Python4J&lt;/strong&gt;: Bundled cpython execution for the JVM&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All projects in the DL4J ecosystem support Windows, Linux and macOS. Hardware support includes CUDA GPUs (10.0, 10.1, 10.2 except OSX), x86 CPU (x86_64, avx2, avx512), ARM CPU (arm, arm64, armhf) and PowerPC (ppc64le).&lt;/p&gt; &#xA;&lt;h2&gt;Community Support&lt;/h2&gt; &#xA;&lt;p&gt;For support for the project, please go over to &lt;a href=&#34;https://community.konduit.ai/&#34;&gt;https://community.konduit.ai/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Using Eclipse Deeplearning4J in your project&lt;/h2&gt; &#xA;&lt;p&gt;Deeplearning4J has quite a few dependencies. For this reason we only support usage with a build tool.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependencies&amp;gt;&#xA;  &amp;lt;dependency&amp;gt;&#xA;      &amp;lt;groupId&amp;gt;org.deeplearning4j&amp;lt;/groupId&amp;gt;&#xA;      &amp;lt;artifactId&amp;gt;deeplearning4j-core&amp;lt;/artifactId&amp;gt;&#xA;      &amp;lt;version&amp;gt;1.0.0-M2.1&amp;lt;/version&amp;gt;&#xA;  &amp;lt;/dependency&amp;gt;&#xA;  &amp;lt;dependency&amp;gt;&#xA;      &amp;lt;groupId&amp;gt;org.nd4j&amp;lt;/groupId&amp;gt;&#xA;      &amp;lt;artifactId&amp;gt;nd4j-native-platform&amp;lt;/artifactId&amp;gt;&#xA;      &amp;lt;version&amp;gt;1.0.0-M2.1&amp;lt;/version&amp;gt;&#xA;  &amp;lt;/dependency&amp;gt;&#xA;&amp;lt;/dependencies&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add these dependencies to your pom.xml file to use Deeplearning4J with the CPU backend. A full standalone project example is &lt;a href=&#34;https://github.com/eclipse/deeplearning4j-examples&#34;&gt;available in the example repository&lt;/a&gt;, if you want to start a new Maven project from scratch.&lt;/p&gt; &#xA;&lt;h2&gt;Code samples&lt;/h2&gt; &#xA;&lt;p&gt;Due to DL4J being a multi faceted project with several modules in the mono repo, we recommend looking at the examples for a taste of different usages of the different modules. Below we&#39;ll link to examples for each module.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;ND4J: &lt;a href=&#34;https://github.com/deeplearning4j/deeplearning4j-examples/tree/master/nd4j-ndarray-examples&#34;&gt;https://github.com/deeplearning4j/deeplearning4j-examples/tree/master/nd4j-ndarray-examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;DL4J: &lt;a href=&#34;https://github.com/deeplearning4j/deeplearning4j-examples/tree/master/dl4j-examples&#34;&gt;https://github.com/deeplearning4j/deeplearning4j-examples/tree/master/dl4j-examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Samediff: &lt;a href=&#34;https://github.com/deeplearning4j/deeplearning4j-examples/tree/master/samediff-examples&#34;&gt;https://github.com/deeplearning4j/deeplearning4j-examples/tree/master/samediff-examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Datavec: &lt;a href=&#34;https://github.com/deeplearning4j/deeplearning4j-examples/tree/master/data-pipeline-examples&#34;&gt;https://github.com/deeplearning4j/deeplearning4j-examples/tree/master/data-pipeline-examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Python4j: &lt;a href=&#34;https://deeplearning4j.konduit.ai/python4j/tutorials/quickstart&#34;&gt;https://deeplearning4j.konduit.ai/python4j/tutorials/quickstart&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For users looking for being able to run models from other frameworks, see:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Onnx: &lt;a href=&#34;https://github.com/deeplearning4j/deeplearning4j-examples/tree/master/onnx-import-examples&#34;&gt;https://github.com/deeplearning4j/deeplearning4j-examples/tree/master/onnx-import-examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Tensorflow/Keras: &lt;a href=&#34;https://github.com/deeplearning4j/deeplearning4j-examples/tree/master/tensorflow-keras-import-examples&#34;&gt;https://github.com/deeplearning4j/deeplearning4j-examples/tree/master/tensorflow-keras-import-examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Documentation, Guides and Tutorials&lt;/h2&gt; &#xA;&lt;p&gt;You can find the official documentation for Deeplearning4J and the other libraries of its ecosystem at &lt;a href=&#34;http://deeplearning4j.konduit.ai/&#34;&gt;http://deeplearning4j.konduit.ai/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Want some examples?&lt;/h2&gt; &#xA;&lt;p&gt;We have separate repository with various examples available: &lt;a href=&#34;https://github.com/eclipse/deeplearning4j-examples&#34;&gt;https://github.com/eclipse/deeplearning4j-examples&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building from source&lt;/h2&gt; &#xA;&lt;p&gt;It is preferred to use the official pre-compiled releases (see above). But if you want to build from source, first take a look at the prerequisites for building from source here: &lt;a href=&#34;https://deeplearning4j.konduit.ai/multi-project/how-to-guides/build-from-source&#34;&gt;https://deeplearning4j.konduit.ai/multi-project/how-to-guides/build-from-source&lt;/a&gt;. Various instructions for cpu and gpu builds can be found there. Please go to our &lt;a href=&#34;https://community.konduit.ai/&#34;&gt;forums&lt;/a&gt; for further help.&lt;/p&gt; &#xA;&lt;h2&gt;Running tests&lt;/h2&gt; &#xA;&lt;p&gt;In order to run tests, please see the platform-tests module. This module only runs on jdk 11 (mostly due to spark and bugs with older scala versions + JDK 17)&lt;/p&gt; &#xA;&lt;p&gt;platform-tests allows you to run dl4j for different backends. There are a few properties you can specify on the command line:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;backend.artifactId: this defaults to nd4j-native and will run tests on cpu,you can specify other backends like nd4j-cuda-11.6&lt;/li&gt; &#xA; &lt;li&gt;dl4j.version: You can change the dl4j version that the tests run against. This defaults to 1.0.0-SNAPSHOT.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;More parameters can be found here: &lt;a href=&#34;https://github.com/deeplearning4j/deeplearning4j/raw/c1bf8717e4839c8930e9c43183bf7b94d0cf84dc/platform-tests/pom.xml#L47&#34;&gt;https://github.com/deeplearning4j/deeplearning4j/blob/c1bf8717e4839c8930e9c43183bf7b94d0cf84dc/platform-tests/pom.xml#L47&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Running project in Intellij IDEA:&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Ensure you follow &lt;a href=&#34;https://stackoverflow.com/questions/45370178/exporting-a-package-from-system-module-is-not-allowed-with-release&#34;&gt;https://stackoverflow.com/questions/45370178/exporting-a-package-from-system-module-is-not-allowed-with-release&lt;/a&gt; on jdk 9 or later&lt;/li&gt; &#xA; &lt;li&gt;Ignore all nd4j-shade submodules. Right click on each folder and click: Maven -&amp;gt; Ignore project&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/deeplearning4j/deeplearning4j/master/LICENSE&#34;&gt;Apache License 2.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Commercial Support&lt;/h2&gt; &#xA;&lt;p&gt;Deeplearning4J is actively developed by the team at &lt;a href=&#34;https://konduit.ai&#34;&gt;Konduit K.K.&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;[If you need any commercial support feel free to reach out to us. at &lt;a href=&#34;mailto:support@konduit.ai&#34;&gt;support@konduit.ai&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>