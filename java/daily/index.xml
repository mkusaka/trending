<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-21T01:37:08Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nandorojo/burnt</title>
    <updated>2022-11-21T01:37:08Z</updated>
    <id>tag:github.com,2022-11-21:/nandorojo/burnt</id>
    <link href="https://github.com/nandorojo/burnt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Crunchy toasts for React Native. üçû&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üçû burnt&lt;/h1&gt; &#xA;&lt;p&gt;Cross-platform toasts for React Native, powered by native elements.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/13172299/202289223-8a333223-3afa-49c4-a001-a70c76150ef0.mp4&#34;&gt;https://user-images.githubusercontent.com/13172299/202289223-8a333223-3afa-49c4-a001-a70c76150ef0.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Context&lt;/h2&gt; &#xA;&lt;p&gt;See this &lt;a href=&#34;https://twitter.com/FernandoTheRojo/status/1592923529644625920&#34;&gt;Twitter thread&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What&lt;/h2&gt; &#xA;&lt;p&gt;This is a library with a &lt;code&gt;toast&lt;/code&gt; and &lt;code&gt;alert&lt;/code&gt; method for showing ephemeral UI.&lt;/p&gt; &#xA;&lt;p&gt;Currently, it only works on iOS, by wrapping &lt;a href=&#34;https://github.com/ivanvorobei/SPIndicator&#34;&gt;&lt;code&gt;SPIndicator&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/ivanvorobei/SPAlert&#34;&gt;&lt;code&gt;SPAlert&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Burnt works with both the old &amp;amp; new architectures. It&#39;s built on top of JSI, thanks to Expo&#39;s new module system.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simple, imperative &lt;code&gt;toast&lt;/code&gt; that uses &lt;strong&gt;native&lt;/strong&gt; components under the hood, rather than using React state with JS-based UI.&lt;/li&gt; &#xA; &lt;li&gt;Animated icons&lt;/li&gt; &#xA; &lt;li&gt;iOS App Store-like &lt;code&gt;alert&lt;/code&gt; popups&lt;/li&gt; &#xA; &lt;li&gt;Overlays on top of native iOS modals, unlike JS-based solutions (video)[https://twitter.com/FernandoTheRojo/status/1593632122069291008].&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;import * as Burnt from &#34;burnt&#34;;&#xA;&#xA;Burnt.toast({&#xA;  title: &#34;Burnt installed.&#34;,&#xA;  preset: &#34;done&#34;,&#xA;  message: &#34;See your downloads.&#34;,&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also &lt;code&gt;Burnt.alert()&lt;/code&gt; and &lt;code&gt;Burnt.dismissAllAlerts()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; iOS support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Android support (I probably won&#39;t build this myself, but maybe you could add it!)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Web support (could be cool to use Radix UI...but maybe I&#39;ll leave that part up to Zeego)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Custom iOS icons&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Chances are, I&#39;ll keep this lib to iOS-only (and maybe Android), and then another library can consume it to build a broader API out on the JS side, such as &lt;a href=&#34;https://zeego.dev&#34;&gt;Zeego&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yarn add burnt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Expo&lt;/h3&gt; &#xA;&lt;p&gt;Burnt likely requires Expo SDK 46+.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;expo install burnt expo-build-properties&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the &lt;code&gt;expo-build-properties&lt;/code&gt; plugin to your &lt;code&gt;app.json&lt;/code&gt;/&lt;code&gt;app.config.js&lt;/code&gt;, setting the deployment target to &lt;code&gt;13.0&lt;/code&gt; (or higher):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;export default {&#xA;  plugins: [&#xA;    [&#xA;      &#34;expo-build-properties&#34;,&#xA;      {&#xA;        ios: {&#xA;          deploymentTarget: &#34;13.0&#34;,&#xA;        },&#xA;      },&#xA;    ],&#xA;  ],&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, you&#39;ll need to rebuild your dev client. Burnt will not work in Expo Go.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npx expo prebuild --clean&#xA;npx expo run:ios&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The config plugin ensures that your iOS app has at least iOS 13 as a deployment target, which is required for Burnt (as well as Expo SDK 47+).&lt;/p&gt; &#xA;&lt;h3&gt;Plain React Native&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Solito&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd applications/app&#xA;expo install burnt expo-build-properties&#xA;npx expo prebuild --clean&#xA;npx expo run:ios&#xA;cd ../..&#xA;yarn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Be sure to follow the &lt;a href=&#34;https://raw.githubusercontent.com/nandorojo/burnt/master/#expo&#34;&gt;expo&lt;/a&gt; instructions too.&lt;/p&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;toast&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/13172299/202275423-300671e5-3918-4d5d-acae-0602160de252.mp4&#34;&gt;https://user-images.githubusercontent.com/13172299/202275423-300671e5-3918-4d5d-acae-0602160de252.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;The API changed since recording this video. It now uses object syntax.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;toast(options): Promise&amp;lt;void&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;Burnt.toast({&#xA;  title: &#39;Congrats!&#39;, // required&#xA;&#xA;  preset: &#39;done&#39;,     // or &#34;error&#34;&#xA;&#xA;  message: &#39;&#39;,        // optional&#xA;&#xA;  haptic: &#39;none&#39;      // or &#34;success&#34;, &#34;warning&#34;, &#34;error&#34;&#xA;&#xA;  duration: 2         // duration in seconds&#xA;&#xA;  shouldDismissByDrag: true&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;alert&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/13172299/202275324-4f6cb5f5-a103-49b5-993f-2030fc836edb.mp4&#34;&gt;https://user-images.githubusercontent.com/13172299/202275324-4f6cb5f5-a103-49b5-993f-2030fc836edb.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;The API changed since recording this video. It now uses object syntax.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;alert(options): Promise&amp;lt;void&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;import * as Burnt from &#34;burnt&#34;;&#xA;&#xA;export const alert = () =&amp;gt; {&#xA;  Burnt.alert({&#xA;    title: &#34;Congrats!&#34;, // required&#xA;&#xA;    preset: &#34;done&#34;, // or &#34;error&#34;, &#34;heart&#34;&#xA;&#xA;    message: &#34;&#34;, // optional&#xA;&#xA;    duration: 2, // duration in seconds&#xA;&#xA;    // optional&#xA;    layout: {&#xA;      iconSize: {&#xA;        height: 24,&#xA;        width: 24,&#xA;      },&#xA;&#xA;      // TODO: custom SF Symbols...&#xA;    },&#xA;  });&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;dismissAllAlerts()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Does what you think it does! In the future, I&#39;ll allow async spinners for promises, and it&#39;ll be useful then.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yarn build&#xA;cd example&#xA;npx expo run:ios # do this again whenever you change native code&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can edit the iOS files in &lt;code&gt;ios/&lt;/code&gt;, and then update the JS accordingly in &lt;code&gt;src&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;Special thanks to &lt;a href=&#34;https://twitter.com/tsapeta&#34;&gt;Tomasz Sapeta&lt;/a&gt; for offering help along the way.&lt;/p&gt; &#xA;&lt;p&gt;Expo Modules made this so easy to build, and all with Swift ‚Äì&amp;nbsp;no Objective C. It&#39;s my first time writing Swift, and it was truly a breeze.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sky-map-team/stardroid</title>
    <updated>2022-11-21T01:37:08Z</updated>
    <id>tag:github.com,2022-11-21:/sky-map-team/stardroid</id>
    <link href="https://github.com/sky-map-team/stardroid" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Sky Map (formerly Google Sky Map, open sourced in 2012)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Sky Map &lt;a href=&#34;https://travis-ci.org/sky-map-team/stardroid&#34;&gt;&lt;img src=&#34;https://travis-ci.org/sky-map-team/stardroid.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://lgtm.com/projects/g/sky-map-team/stardroid/context:java&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/grade/java/g/sky-map-team/stardroid.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;Code Quality: Java&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/sky-map-team/stardroid/alerts&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/alerts/g/sky-map-team/stardroid.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;Total Alerts&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is the source repository for Sky Map. You can find it in the &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.google.android.stardroid&#34;&gt;Google Play Store&lt;/a&gt; and on &lt;a href=&#34;https://f-droid.org/en/packages/com.google.android.stardroid/&#34;&gt;F-Droid&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/skymapdevs&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/default-blue.png&#34; alt=&#34;Buy Me A Coffee&#34; height=&#34;41&#34; width=&#34;174&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sky Map is free - there is no charge, no ads and we don&#39;t sell your data. However, some folks have asked if they can contribute in some small way so if you&#39;d like to you can buy us a coffee by clicking on the above link. This is in no way expected or required but if you insist, I&#39;ll take a cappuccino.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;You should see the following two directories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;app: Application source&lt;/li&gt; &#xA; &lt;li&gt;tools: Source for generating binary data used by the app.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To build SkyMap, you can use Android Developer Studio or Gradle. Begin by creating a &lt;code&gt;local.properties&lt;/code&gt; file containing the location of your Android installation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sdk.dir=&amp;lt;path to your SDK&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Android Developer Studio can create this for you. You can regenerate the datafiles and rebuild everything with the &lt;code&gt;build_skymap.sh&lt;/code&gt; script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./build_skymap.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(or its f-droid equivalent).&lt;/p&gt; &#xA;&lt;p&gt;If you just want to quickly regenerate an apk please see the following instructions (note: assembleRelease won&#39;t work because the f-droid flavor needs some tweaking which is done by the shell script - so make sure you build the Gms flavor specifically).&lt;/p&gt; &#xA;&lt;h2&gt;Building a debug apk&lt;/h2&gt; &#xA;&lt;p&gt;From the root directory execute&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew assembleGmsDebug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The apk can be found in &lt;code&gt;app/build/outputs/apk/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building a release apk&lt;/h2&gt; &#xA;&lt;p&gt;(Sky Map team only)&lt;/p&gt; &#xA;&lt;p&gt;Create a file in the app directory called &lt;code&gt;no-checkin.properties&lt;/code&gt; with appropriate values for the keys store-pwd= key-pwd= analytics-key=&lt;/p&gt; &#xA;&lt;p&gt;and overwrite google-services.json with the correct file.&lt;/p&gt; &#xA;&lt;p&gt;From the root directory execute&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew assembleGms&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew assembleGmsRelease&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The apk can be found in &lt;code&gt;app/build/outputs/apk/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Running tests&lt;/h2&gt; &#xA;&lt;p&gt;Unit tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Connected device/emulator required tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew app:connectedAndroidTest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Code and Language Contributions&lt;/h1&gt; &#xA;&lt;p&gt;Yes, we know that Sky Map&#39;s code and UX is very dated. It needs a big overhaul.&lt;/p&gt; &#xA;&lt;p&gt;In general, bug fix contributions are welcome, for example, simple one file fixes or dependency version upgrades. We&#39;re particularly grateful for fixed or new translations since as the app is developed we lose the 100% coverage of non-English languages that we once had.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;However, please email us (or file a feature request) first before embarking on any major changes or feature additions. We may have a different vision for the direction of the app and it would be a pity to do work that we can&#39;t accept and would be wasted.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;It is likely we&#39;ll be slow to respond to emails and PR requests. Depending on what else is going on it might be days, it might be months. I do apologize for that - life is busy. Sometimes the reply might be simply to point you at this documentation, which will seem very ungrateful and unfriendly. Again, I apologize, but it&#39;s the only way to keep up with the emails.&lt;/p&gt; &#xA;&lt;p&gt;Small, focussed PRs to fix bugs or upgrade dependencies etc are very easy for us to approve. If your PR does too much it might get stalled because even if 90% of it is welcome there might be 10% that we&#39;re not happy with. So keep them small if you can. Plus, we&#39;ll be able to review them faster.&lt;/p&gt; &#xA;&lt;p&gt;Thanks for your contributions! They&#39;re definitely appreciated even if our slowness to respond might make it seem otherwise.&lt;/p&gt; &#xA;&lt;h2&gt;Coding Style&lt;/h2&gt; &#xA;&lt;p&gt;We follow the &lt;a href=&#34;https://google.github.io/styleguide/javaguide.html&#34;&gt;Google style guide&lt;/a&gt; (or try to). We wrap at 100 chars and we do not use the common Android style of prefixing member variables with a &#39;m&#39;.&lt;/p&gt;</summary>
  </entry>
</feed>