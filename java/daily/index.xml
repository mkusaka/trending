<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-13T01:36:25Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>davinci1012/pinduoduo_backdoor_unpacker</title>
    <updated>2023-03-13T01:36:25Z</updated>
    <id>tag:github.com,2023-03-13:/davinci1012/pinduoduo_backdoor_unpacker</id>
    <link href="https://github.com/davinci1012/pinduoduo_backdoor_unpacker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Samples and Unpacker of malicious backdoors and exploits developed and used by Pinduoduo&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Pinduoduo恶意代码样本和脱壳机&lt;/h1&gt; &#xA;&lt;p&gt;听说PDD今天开始发律师函删帖抵赖了&lt;img src=&#34;https://user-images.githubusercontent.com/25000885/224233765-5195f16a-f41c-482f-a664-1cf72796651e.png&#34; alt=&#34;PDDNB&#34;&gt;，那就放点新东西出来。&lt;/p&gt; &#xA;&lt;p&gt;拼多多的两个壳，manwe和nvwa之一的manwe脱壳脚本。适用于样本中.mw1文件。.nw0要用nvwa脱壳脚本，过会再放，manwe里面基本已经足够看了。&lt;/p&gt; &#xA;&lt;h2&gt;拼多多manwe一键脱壳脚本&lt;/h2&gt; &#xA;&lt;p&gt;代码在&lt;code&gt;manwe_unpacker&lt;/code&gt;目录，用法如下，或自己改路径：&lt;/p&gt; &#xA;&lt;p&gt;/tmp/mw1.bin放解压出来的文件，在&lt;code&gt;/tmp/final_java/&lt;/code&gt;会生成脱壳后的java class文件，压缩一下拖到jadx里看。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class ManweVmpLoader {&#xA;    public static void main(String[] args) throws Throwable {&#xA;        String firmwarePath = &#34;/tmp/mw1.bin&#34;;&#xA;        ManweVmpDataInputStream inputStream = new ManweVmpDataInputStream(Files.newInputStream(Paths.get(firmwarePath)));&#xA;        ManweVmpDex manweVmpDex = new ManweVmpDex(inputStream);&#xA;        System.out.printf(&#34;Load %d class%n&#34;, manweVmpDex.manweVmpClazzes.length);&#xA;        if (inputStream.available() != 0) {&#xA;            throw new RuntimeException(String.format(&#34;%d bytes remaining&#34;, inputStream.available()));&#xA;        }&#xA;        inputStream.close();&#xA;        if (Files.notExists(Paths.get(&#34;/tmp/final_java/&#34;))) {&#xA;            new File(&#34;/tmp/final_java/&#34;).mkdirs();&#xA;        }&#xA;        manweVmpDex.writeClazzes(&#34;/tmp/final_java/&#34;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;提取出的恶意样本&lt;/h2&gt; &#xA;&lt;p&gt;PDD的恶意代码以加壳后的文件形式组织，APK自带AliveBaseAbility，其他的都是远程下发，以下称为“样本”。因为有些样本是动态下发，不一定全，如果有这里没有的，欢迎Pull Request补充。&lt;/p&gt; &#xA;&lt;p&gt;样本在samples目录中，包含PDD APK自带的样本，以及其动态下发的样本。动态样本为3.2日之前从安装了PDD的手机里/data/data/com.xunmeng.pinduoduo/files/bot/, /data/data/com.xunmeng.pinduoduo/files/.components/提取出，现在新版本可能被PDD删掉了，有兴趣的可以找下装了之前的版本的手机看下，顺便看下&lt;code&gt;app_mango&lt;/code&gt;目录，里面是配置文件，有惊喜。&lt;/p&gt; &#xA;&lt;p&gt;带符号的样本为PDD 6.2.0提取出(&lt;code&gt;samples/old_alive_base_ability_with_symbol/mw1.bin&lt;/code&gt;)，新版本的APP携带的样本去掉了符号。&lt;/p&gt; &#xA;&lt;p&gt;样本各个都是干货，值得看看。AliveBaseAbility是第一步，davinci仓库中提到的dex只是这个evil plan的第三步，这里其他的是第二步。&lt;/p&gt; &#xA;&lt;h2&gt;其他&lt;/h2&gt; &#xA;&lt;p&gt;一视同仁，平等对待才是好的营商环境，纵容、包庇不是。 据说PDD搞这个的100多号人的团队连夜解散了，删库跑路，是吗？又听说PDD这些漏洞手段被曝光停了之后，DAU出现明显下跌，是吗？ 等下，有人敲门说查水表了，我先出&lt;/p&gt; &#xA;&lt;h2&gt;免责声明&lt;/h2&gt; &#xA;&lt;p&gt;仅用于研究用途，禁止和PDD一样作恶，没靠山别学&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>questdb/rust-maven-plugin</title>
    <updated>2023-03-13T01:36:25Z</updated>
    <id>tag:github.com,2023-03-13:/questdb/rust-maven-plugin</id>
    <link href="https://github.com/questdb/rust-maven-plugin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build Rust Cargo crates within a Java Maven Project&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;rust-maven-plugin&lt;/h1&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/questdb/rust-maven-plugin/main/artwork/logo_outline_text.svg?sanitize=true&#34; alt=&#34;rust-maven-plugin&#34;&gt; &#xA;&lt;p&gt;Build Rust Cargo crates within a Java Maven Project.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ mvn clean package&#xA;...&#xA;[INFO] --- rust-maven-plugin:1.0.0:build (str-reverse) @ rust-maven-example ---&#xA;[INFO] Working directory: /home/adam/questdb/repos/rust-maven-plugin/rust-maven-example/src/main/rust/str-reverse&#xA;[INFO] Environment variables:&#xA;[INFO]   REVERSED_STR_PREFIX=&#39;Great Scott, A reversed string!&#39;&#xA;[INFO] Running: cargo build --target-dir /home/adam/questdb/repos/rust-maven-plugin/rust-maven-example/target/rust-maven-plugin/str-reverse --release&#xA;[INFO]    Compiling proc-macro2 v1.0.49&#xA;[INFO]    Compiling quote v1.0.23&#xA;[INFO]    Compiling unicode-ident v1.0.6&#xA;[INFO]    Compiling syn v1.0.107&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Plugin Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The plugin delegates the build to &lt;code&gt;cargo&lt;/code&gt; and supports most of &lt;code&gt;cargo build&lt;/code&gt;&#39;s features.&lt;/li&gt; &#xA; &lt;li&gt;The primary use case is to simplify the build process of &lt;a href=&#34;https://crates.io/crates/jni&#34;&gt;Rust JNI libs&lt;/a&gt; inside a Java &lt;a href=&#34;https://maven.apache.org/&#34;&gt;Maven&lt;/a&gt; project.&lt;/li&gt; &#xA; &lt;li&gt;Additionally, the plugin can also compile binaries.&lt;/li&gt; &#xA; &lt;li&gt;The plugin can copy complied binaries to a custom location and so they can be bundled inside of &lt;code&gt;.jar&lt;/code&gt; files.&lt;/li&gt; &#xA; &lt;li&gt;Support for invoking &lt;code&gt;cargo test&lt;/code&gt; during &lt;code&gt;mvn test&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Points to &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;https://www.rust-lang.org/tools/install&lt;/a&gt; if &lt;code&gt;cargo&lt;/code&gt; isn&#39;t found.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Optional supporting loader library&lt;/h2&gt; &#xA;&lt;p&gt;For your convenience, we&#39;ve also made &lt;code&gt;jar-jni&lt;/code&gt; available: An optional Java library to load JNI dynamic libraries from JARs.&lt;/p&gt; &#xA;&lt;p&gt;Both the plugin and the library support a common directory naming convention to organize and find compiled artifacts for a multitude of platforms.&lt;/p&gt; &#xA;&lt;h1&gt;Complete Example&lt;/h1&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/questdb/rust-maven-plugin/main/rust-maven-example/&#34;&gt;&lt;code&gt;rust-maven-example&lt;/code&gt;&lt;/a&gt; directory for a working example.&lt;/p&gt; &#xA;&lt;p&gt;It also uses the &lt;code&gt;jar-jni&lt;/code&gt; library to load the Rust binaries from the compiled JAR file.&lt;/p&gt; &#xA;&lt;h1&gt;Basic Configuration&lt;/h1&gt; &#xA;&lt;p&gt;Edit your &lt;code&gt;pom.xml&lt;/code&gt; to add the plugin:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;project ...&amp;gt;&#xA;    ...&#xA;&#xA;    &amp;lt;!-- Note: Don&#39;t add rust-maven-plugin to &amp;lt;dependencies&amp;gt;. --&amp;gt;&#xA;&#xA;    &amp;lt;build&amp;gt;&#xA;        &amp;lt;plugins&amp;gt;&#xA;            &amp;lt;plugin&amp;gt;&#xA;                &amp;lt;groupId&amp;gt;org.questdb&amp;lt;/groupId&amp;gt;&#xA;                &amp;lt;artifactId&amp;gt;rust-maven-plugin&amp;lt;/artifactId&amp;gt;&#xA;                &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt;&#xA;                &amp;lt;executions&amp;gt;&#xA;                    &amp;lt;execution&amp;gt;&#xA;                        &amp;lt;id&amp;gt;rust-build-id&amp;lt;/id&amp;gt;&#xA;                        &amp;lt;goals&amp;gt;&#xA;                            &amp;lt;goal&amp;gt;build&amp;lt;/goal&amp;gt;&#xA;                        &amp;lt;/goals&amp;gt;&#xA;                        &amp;lt;configuration&amp;gt;&#xA;                            &amp;lt;path&amp;gt;src/main/rust/your-rust-crate&amp;lt;/path&amp;gt;&#xA;                            &amp;lt;copyTo&amp;gt;${project.build.directory}/classes/io/questdb/example/rust/libs&amp;lt;/copyTo&amp;gt;&#xA;                            &amp;lt;copyWithPlatformDir&amp;gt;true&amp;lt;/copyWithPlatformDir&amp;gt;&#xA;                        &amp;lt;/configuration&amp;gt;&#xA;                    &amp;lt;/execution&amp;gt;&#xA;                &amp;lt;/executions&amp;gt;&#xA;            &amp;lt;/plugin&amp;gt;&#xA;            ...&#xA;        &amp;lt;/plugins&amp;gt;&#xA;    &amp;lt;/build&amp;gt;&#xA;&#xA;&amp;lt;/project&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here, &lt;code&gt;&amp;lt;path&amp;gt;..&amp;lt;/path&amp;gt;&lt;/code&gt; is the path to the Rust crate to build, and it is relative to the &lt;code&gt;pom.xml&lt;/code&gt; file itself. The plugin will invoke &lt;code&gt;cargo build&lt;/code&gt; on the crate.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;&amp;lt;id&amp;gt;&lt;/code&gt; is an arbitrary string that you can use to identify the execution. It does not need to match the crate name.&lt;/p&gt; &#xA;&lt;p&gt;If you need to build multiple crates, you can add multiple executions.&lt;/p&gt; &#xA;&lt;h1&gt;Testing&lt;/h1&gt; &#xA;&lt;p&gt;The plugin can also invoke &lt;code&gt;cargo test&lt;/code&gt; during &lt;code&gt;mvn test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To enable running tests:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Duplicate the &lt;code&gt;&amp;lt;execution&amp;gt;&lt;/code&gt; block above.&lt;/li&gt; &#xA; &lt;li&gt;Change it&#39;s &lt;code&gt;&amp;lt;id&amp;gt;&lt;/code&gt; to a new name.&lt;/li&gt; &#xA; &lt;li&gt;Change the &lt;code&gt;&amp;lt;goal&amp;gt;&lt;/code&gt; to &lt;code&gt;test&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;execution&amp;gt;&#xA;    &amp;lt;id&amp;gt;str-reverse-test&amp;lt;/id&amp;gt;&#xA;    &amp;lt;goals&amp;gt;&#xA;        &amp;lt;goal&amp;gt;test&amp;lt;/goal&amp;gt;&#xA;    &amp;lt;/goals&amp;gt;&#xA;    &amp;lt;configuration&amp;gt;&#xA;        &amp;lt;path&amp;gt;src/main/rust/str-reverse&amp;lt;/path&amp;gt;&#xA;    &amp;lt;/configuration&amp;gt;&#xA;&amp;lt;/execution&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Customizing the build and tests steps&lt;/h1&gt; &#xA;&lt;p&gt;The settings below go in the &lt;code&gt;&amp;lt;configuration&amp;gt;&lt;/code&gt; section of the &lt;code&gt;&amp;lt;execution&amp;gt;&lt;/code&gt; block.&lt;/p&gt; &#xA;&lt;h2&gt;Custom path to the &lt;code&gt;cargo&lt;/code&gt; command&lt;/h2&gt; &#xA;&lt;p&gt;If &lt;code&gt;cargo&lt;/code&gt; isn&#39;t in your &lt;code&gt;PATH&lt;/code&gt;, you can specify the path to the &lt;code&gt;cargo&lt;/code&gt; command with the &lt;code&gt;&amp;lt;cargoPath&amp;gt;&lt;/code&gt; configuration option.&lt;/p&gt; &#xA;&lt;p&gt;You can also specify this on the command line via &lt;code&gt;mvn ... -DcargoPath=...&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Verbosity&lt;/h2&gt; &#xA;&lt;p&gt;The plugin can be configured to forward various verbosity flags to &lt;code&gt;cargo&lt;/code&gt; by setting &lt;code&gt;&amp;lt;verbosity&amp;gt;-v&amp;lt;/verbosity&amp;gt;&lt;/code&gt; (or other value) in the &lt;code&gt;&amp;lt;configuration&amp;gt;&lt;/code&gt; block.&lt;/p&gt; &#xA;&lt;p&gt;Accepted values are:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Value&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;verbosity&amp;gt;&amp;lt;/verbosity&amp;gt;&lt;/code&gt; (or no tag)&lt;/td&gt; &#xA;   &lt;td&gt;Default - no additional flags passed to &lt;code&gt;cargo&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;verbosity&amp;gt;-q&amp;lt;/verbosity&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Quiet&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;verbosity&amp;gt;-v&amp;lt;/verbosity&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Verbose&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;verbosity&amp;gt;-vv&amp;lt;/verbosity&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Very verbose&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Release builds&lt;/h2&gt; &#xA;&lt;p&gt;The plugin can be configured to build in release mode by setting &lt;code&gt;&amp;lt;release&amp;gt;true&amp;lt;/release&amp;gt;&lt;/code&gt; in the &lt;code&gt;&amp;lt;configuration&amp;gt;&lt;/code&gt; block.&lt;/p&gt; &#xA;&lt;p&gt;Building &lt;code&gt;--release&lt;/code&gt; will cut down binary size considerably and should be taken into consideration when shipping binaries in &lt;code&gt;.jar&lt;/code&gt; files.&lt;/p&gt; &#xA;&lt;h2&gt;Specifying Crate Features&lt;/h2&gt; &#xA;&lt;p&gt;The equivalent of &lt;code&gt;cargo build --features feat1,feat2,feat3&lt;/code&gt; is&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;features&amp;gt;&#xA;    &amp;lt;feature&amp;gt;feat1&amp;lt;/feature&amp;gt;&#xA;    &amp;lt;feature&amp;gt;feat2&amp;lt;/feature&amp;gt;&#xA;    &amp;lt;feature&amp;gt;feat3&amp;lt;/feature&amp;gt;&#xA;&amp;lt;/features&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also specify &lt;code&gt;--all-features&lt;/code&gt; via &lt;code&gt;&amp;lt;all-features&amp;gt;true&amp;lt;/all-features&amp;gt;&lt;/code&gt; and &lt;code&gt;--no-default-features&lt;/code&gt; via &lt;code&gt;&amp;lt;no-default-features&amp;gt;true&amp;lt;/no-default-features&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that you can drive features with maven profiles by introducing variables.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;!-- in the plugin configuration --&amp;gt;&#xA;&amp;lt;features&amp;gt;&#xA;    &amp;lt;feature&amp;gt;$rustFeature1&amp;lt;/feature&amp;gt;&#xA;    &amp;lt;feature&amp;gt;$rustFeature2&amp;lt;/feature&amp;gt;&#xA;&amp;lt;/features&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;!-- in the profiles section --&amp;gt;&#xA;&amp;lt;profile&amp;gt;&#xA;    &amp;lt;id&amp;gt;feat-ssl&amp;lt;/id&amp;gt;&#xA;    &amp;lt;properties&amp;gt;&#xA;        &amp;lt;rustFeature1&amp;gt;ssl&amp;lt;/rustFeature1&amp;gt;&#xA;        &amp;lt;rustFeature1&amp;gt;use-rustls&amp;lt;/rustFeature1&amp;gt;&#xA;    &amp;lt;/properties&amp;gt;&#xA;&amp;lt;/profile&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then building with &lt;code&gt;mvn package -P feat-ssl&lt;/code&gt; will call &lt;code&gt;cargo build --features ssl,use-rustls&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Additional cargo arguments&lt;/h2&gt; &#xA;&lt;p&gt;Additional arguments to can go in the &lt;code&gt;&amp;lt;extra-args&amp;gt;&lt;/code&gt; configuration section.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;extra-args&amp;gt;&#xA;    &amp;lt;extra-arg&amp;gt;--verbose&amp;lt;/extra-arg&amp;gt;&#xA;    &amp;lt;extra-arg&amp;gt;--color=always&amp;lt;/extra-arg&amp;gt;&#xA;&amp;lt;/extra-args&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Overriding Environment Variables&lt;/h2&gt; &#xA;&lt;p&gt;The plugin can be configured to override environment variables during the build. This might be useful for setting &lt;code&gt;RUSTFLAGS&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In the &lt;code&gt;&amp;lt;configuration&amp;gt;&lt;/code&gt; section, add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;environmentVariables&amp;gt;&#xA;    &amp;lt;RUSTFLAGS&amp;gt;-C target-cpu=native&amp;lt;/RUSTFLAGS&amp;gt;&#xA;&amp;lt;/environmentVariables&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Cleaning the Rust build&lt;/h1&gt; &#xA;&lt;p&gt;Regular &lt;code&gt;mvn clean&lt;/code&gt; will also clean the Rust build without additional config. This is because the plugin builds crates inside Maven&#39;s &lt;code&gt;target&lt;/code&gt; build directory, via &lt;code&gt;cargo build --target-dir ...&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;De-duplicating build directories when invoking &lt;code&gt;cargo build&lt;/code&gt; without Maven&lt;/h1&gt; &#xA;&lt;p&gt;If you (or your IDE) end up invoking &lt;code&gt;cargo build&lt;/code&gt; on your Rust crate without the plugin, you&#39;ll notice this creates a duplicate &lt;code&gt;target&lt;/code&gt; dir, inside the crate&#39;s directory, that will not be cleaned at the next &lt;code&gt;mvn clean&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To avoid this duplicate &lt;code&gt;target&lt;/code&gt; directory problem, consider adding &lt;code&gt;.cargo/config.toml&lt;/code&gt; files configured to match the &lt;code&gt;--target-dir&lt;/code&gt; argument passed by this plugin.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/questdb/rust-maven-plugin/main/rust-maven-example/src/main/rust/str-reverse/.cargo/config.toml&#34;&gt;.cargo/config.toml&lt;/a&gt; from the &lt;code&gt;str-reverse&lt;/code&gt; crate in the example.&lt;/p&gt; &#xA;&lt;h1&gt;Bundling binaries in the &lt;code&gt;.jar&lt;/code&gt; file&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;code&gt;&amp;lt;copyTo&amp;gt;&lt;/code&gt; configuration (as shown in the example) allows copying the binaries any path. The example however choses to copy them to &lt;code&gt;${project.build.directory}/classes/...&lt;/code&gt;. Anything placed there gets bundled into the JAR file. The &lt;code&gt;classes&lt;/code&gt; directory sits within the &lt;code&gt;target&lt;/code&gt; directory and outside of the source tree.&lt;/p&gt; &#xA;&lt;h2&gt;Binaries in source tree&lt;/h2&gt; &#xA;&lt;p&gt;Placing binaries in the source tree may be the &#34;pragmatic&#34; approach if you need to support IntelliJ which, by default, will not actually invoke &lt;code&gt;maven compile&lt;/code&gt; during its usual operation.&lt;/p&gt; &#xA;&lt;p&gt;If you know a better way around this in IntelliJ do contact us!&lt;/p&gt; &#xA;&lt;p&gt;If you prefer to keep your binaries in the source tree, then you instead configure to copy binaries to the &lt;a href=&#34;https://stackoverflow.com/questions/25786185/what-is-the-purpose-for-the-resource-folder-in-maven&#34;&gt;&lt;code&gt;resources&lt;/code&gt;&lt;/a&gt; directory instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;copyTo&amp;gt;src/main/resources/io/questdb/example/rust/libs&amp;lt;/copyTo&amp;gt;&#xA;&amp;lt;copyWithPlatformDir&amp;gt;true&amp;lt;/copyWithPlatformDir&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In such case, you may opt to move the &lt;code&gt;rust-maven-plugin&lt;/code&gt; inside a &lt;a href=&#34;https://maven.apache.org/guides/introduction/introduction-to-profiles.html&#34;&gt;Maven Profile&lt;/a&gt; and only build the Rust code when you need to.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;project ...&amp;gt;&#xA;    ...&#xA;    &amp;lt;profiles&amp;gt;&#xA;        &amp;lt;profile&amp;gt;&#xA;            &amp;lt;id&amp;gt;rust&amp;lt;/id&amp;gt;&#xA;            &amp;lt;build&amp;gt;&#xA;                &amp;lt;plugins&amp;gt;&#xA;                    &amp;lt;plugin&amp;gt;&#xA;                        &amp;lt;groupId&amp;gt;org.questdb&amp;lt;/groupId&amp;gt;&#xA;                        &amp;lt;artifactId&amp;gt;rust-maven-plugin&amp;lt;/artifactId&amp;gt;&#xA;                        &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then enable the profile in Maven via &lt;code&gt;mvn clean package -P rust ...&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supporting Multiple Platforms&lt;/h2&gt; &#xA;&lt;p&gt;During the binary copy step, the &lt;code&gt;&amp;lt;copyWithPlatformDir&amp;gt;true&amp;lt;/copyWithPlatformDir&amp;gt;&lt;/code&gt; config setting (used in the examples above) will further nest the binaries in a directory named after the platform.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;target&#xA;    classes&#xA;        io/questdb/example/rust/libs/&#xA;            linux-amd64/libstr_reverse.so&#xA;            mac_os_x-aarch64/libstr_reverse.dylib&#xA;            windows-amd64/str_reverse.dll&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you only intend to target one single platform (e.g. linux-amd64), then you don&#39;t need &lt;code&gt;&amp;lt;copyWithPlatformDir&amp;gt;true&amp;lt;/copyWithPlatformDir&amp;gt;&lt;/code&gt; and the plugin will not create a nested directory.&lt;/p&gt; &#xA;&lt;h1&gt;Loading binaries from the &lt;code&gt;.jar&lt;/code&gt; with &lt;code&gt;jar-jni&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;code&gt;jar-jni&lt;/code&gt; library is configured as so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;!-- pom.xml --&amp;gt;&#xA;&amp;lt;project ...&amp;gt;&#xA;    ...&#xA;    &amp;lt;dependencies&amp;gt;&#xA;      &amp;lt;dependency&amp;gt;&#xA;          &amp;lt;groupId&amp;gt;org.questdb&amp;lt;/groupId&amp;gt;&#xA;          &amp;lt;artifactId&amp;gt;jar-jni&amp;lt;/artifactId&amp;gt;&#xA;          &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt;&#xA;      &amp;lt;/dependency&amp;gt;&#xA;    &amp;lt;/dependencies&amp;gt;&#xA;    ...&#xA;&amp;lt;/project&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It helps with bundling JNI native code in &lt;code&gt;.jar&lt;/code&gt; files by establishing a directory naming convention for organising binaries for different operating systems and architectures.&lt;/p&gt; &#xA;&lt;p&gt;Assuming you&#39;ve compiled with &lt;code&gt;&amp;lt;copyWithPlatformDir&amp;gt;true&amp;lt;/copyWithPlatformDir&amp;gt;&lt;/code&gt;, load the binary from the &lt;code&gt;.jar&lt;/code&gt; file with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;JarJniLoader.loadLib(&#xA;    Main.class,&#xA;&#xA;    // A platform-specific path is automatically suffixed to path below.&#xA;    &#34;/io/questdb/example/rust/libs&#34;,&#xA;&#xA;    // The &#34;lib&#34; prefix and &#34;.so|.dynlib|.dll&#34; suffix are added automatically as needed.&#xA;    &#34;str_reverse&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If instead you compiled with &lt;code&gt;&amp;lt;copyWithPlatformDir&amp;gt;false&amp;lt;/copyWithPlatformDir&amp;gt;&lt;/code&gt;, then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;JarJniLoader.loadLib(&#xA;    Main.class,&#xA;    &#34;/io/questdb/example/rust/libs&#34;,&#xA;    &#34;str_reverse&#34;,&#xA;    null);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Contributing &amp;amp; Support&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Test cases, features, docs, tutorials, etc are always welcome.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/questdb/rust-maven-plugin/issues/new/choose&#34;&gt;Raise an issue&lt;/a&gt; if you find bugs.&lt;/li&gt; &#xA; &lt;li&gt;We&#39;ve got a list of open &lt;a href=&#34;https://github.com/questdb/rust-maven-plugin/issues&#34;&gt;issues&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Raise a pull request if you need a new feature.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to talk to us, we&#39;re on &lt;a href=&#34;https://slack.questdb.io/&#34;&gt;Slack&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Also read the &lt;a href=&#34;https://raw.githubusercontent.com/questdb/rust-maven-plugin/main/DEV_NOTES.md&#34;&gt;Developer&#39;s Notes&lt;/a&gt; with instructions on building and running from source.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zendesk/maxwell</title>
    <updated>2023-03-13T01:36:25Z</updated>
    <id>tag:github.com,2023-03-13:/zendesk/maxwell</id>
    <link href="https://github.com/zendesk/maxwell" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Maxwell&#39;s daemon, a mysql-to-json kafka producer&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This is &lt;strong&gt;Maxwell&#39;s daemon&lt;/strong&gt;, a &lt;a href=&#34;https://www.confluent.io/blog/how-change-data-capture-works-patterns-solutions-implementation/&#34;&gt;change data capture&lt;/a&gt; application that reads MySQL binlogs and writes data changes as JSON to Kafka, Kinesis, and other streaming platforms.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/zendesk/maxwell/releases/download/v1.39.6/maxwell-1.39.6.tar.gz&#34;&gt;↓ Download&lt;/a&gt; | &lt;a href=&#34;https://github.com/zendesk/maxwell&#34;&gt;⚝ Source / Community&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/zendesk/maxwell/master/quickstart&#34;&gt;☝ Getting Started&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/zendesk/maxwell/master/config&#34;&gt;☷ Reference&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;What&#39;s it for?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ETL of all sorts&lt;/li&gt; &#xA; &lt;li&gt;maintaining an audit log of all changes to your database&lt;/li&gt; &#xA; &lt;li&gt;cache building/expiring&lt;/li&gt; &#xA; &lt;li&gt;search indexing&lt;/li&gt; &#xA; &lt;li&gt;inter-service communication&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;It goes like this:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  mysql&amp;gt; update `test`.`maxwell` set mycol = 55, daemon = &#39;Stanislaw Lem&#39;;&#xA;  maxwell -&amp;gt; kafka: &#xA;  {&#xA;    &#34;database&#34;: &#34;test&#34;,&#xA;    &#34;table&#34;: &#34;maxwell&#34;,&#xA;    &#34;type&#34;: &#34;insert&#34;,&#xA;    &#34;ts&#34;: 1449786310,&#xA;    &#34;data&#34;: { &#34;id&#34;:1, &#34;daemon&#34;: &#34;Stanislaw Lem&#34;, &#34;mycol&#34;: 55 },&#xA;    &#34;old&#34;: { &#34;mycol&#34;:, 23, &#34;daemon&#34;: &#34;what once was&#34; }&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>