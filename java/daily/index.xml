<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-08T01:30:18Z</updated>
  <subtitle>Daily Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mas-elkhanza/SIMRS-Khanza</title>
    <updated>2023-09-08T01:30:18Z</updated>
    <id>tag:github.com,2023-09-08:/mas-elkhanza/SIMRS-Khanza</id>
    <link href="https://github.com/mas-elkhanza/SIMRS-Khanza" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Software untuk rumah sakit, klinik, puskesmas, dokter pribadi yang sudah digunakan di lebih dari 1000 rumah sakit di sluruh indonesia&lt;/p&gt;&lt;hr&gt;&lt;pre&gt;&lt;code&gt;Software ini adalah Software Menejemen Rumah Sakit/Klinik/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Puskesmas yang gratis, sumber tersedia dan boleh digunakan siapa saja tanpa dikenai biaya apapun. Hal yang tidak boleh dilakukan adalah memperjualbelikan/mengambil keuntungan dari Software ini dalam bentuk apapun tanpa seijin pembuat software (Khanza.Soft Media).&lt;/p&gt; &#xA;&lt;p&gt;Licensi yang dianut di software ini &lt;a href=&#34;https://en.wikipedia.org/wiki/Aladdin_Free_Public_License&#34;&gt;https://en.wikipedia.org/wiki/Aladdin_Free_Public_License&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Informasi dan panduan bisa dicek di halaman &lt;a href=&#34;https://github.com/mas-elkhanza/SIMRS-Khanza/wiki&#34;&gt;https://github.com/mas-elkhanza/SIMRS-Khanza/wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Hasil build/Software jadi bisa di download di &lt;a href=&#34;https://drive.google.com/drive/folders/0ByL--Jg6bdF7RG1NSlVTT2ZPODg&#34;&gt;https://drive.google.com/drive/folders/0ByL--Jg6bdF7RG1NSlVTT2ZPODg&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Bagi yang ingin berdonasi untuk pengembangan SIMRS Khanza bisa lewat BSI 1015369872 atas nama Windiarto&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>fuhao0536/box-im-master</title>
    <updated>2023-09-08T01:30:18Z</updated>
    <id>tag:github.com,2023-09-08:/fuhao0536/box-im-master</id>
    <link href="https://github.com/fuhao0536/box-im-master" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h4&gt;项目介绍&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;盒子IM是一个仿微信实现的网页版聊天软件，目前完全开源，仅用于学习和交流。&lt;/li&gt; &#xA; &lt;li&gt;支持私聊、群聊、离线消息、发送图片、文件、好友在线状态显示等功能。&lt;/li&gt; &#xA; &lt;li&gt;后端采用springboot+netty实现，前端使用vue。&lt;/li&gt; &#xA; &lt;li&gt;服务器支持集群化部署，每个im-server仅处理自身连接用户的消息&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;在线体验&lt;/h4&gt; &#xA;&lt;p&gt;体验地址：&lt;a href=&#34;https://www.boxim.online&#34;&gt;https://www.boxim.online&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;账号： 张三/123456 李四/123456 也可以自行注册账号&lt;/p&gt; &#xA;&lt;p&gt;体验后记得帮忙点个star哟!&lt;/p&gt; &#xA;&lt;h4&gt;项目结构&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;模块&lt;/th&gt; &#xA;   &lt;th&gt;功能&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;im-platform&lt;/td&gt; &#xA;   &lt;td&gt;与页面进行交互，处理业务请求&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;im-server&lt;/td&gt; &#xA;   &lt;td&gt;推送聊天消息&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;im-client&lt;/td&gt; &#xA;   &lt;td&gt;消息推送sdk&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;im-common&lt;/td&gt; &#xA;   &lt;td&gt;公共包&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;本地快速部署&lt;/h4&gt; &#xA;&lt;p&gt;1.安装运行环境&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;安装node:v14.16.0&lt;/li&gt; &#xA; &lt;li&gt;安装jdk:1.8&lt;/li&gt; &#xA; &lt;li&gt;安装maven:3.6.3&lt;/li&gt; &#xA; &lt;li&gt;安装mysql:5.7,密码分别为root/root,运行sql脚本(脚本在im-platfrom的resources/db目录)&lt;/li&gt; &#xA; &lt;li&gt;安装redis:4.0&lt;/li&gt; &#xA; &lt;li&gt;安装minio，命令端口使用9001，并创建一个名为&#34;box-im&#34;的bucket，并设置访问权限为公开&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;2.启动后端服务&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mvn clean package&#xA;java -jar ./im-platform/target/im-platform.jar&#xA;java -jar ./im-server/target/im-server.jar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;3.启动前端ui&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd im-ui&#xA;npm install&#xA;npm run serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;4.访问localhost:8080&lt;/p&gt; &#xA;&lt;h4&gt;快速接入&lt;/h4&gt; &#xA;&lt;p&gt;消息推送的请求代码已经封装在im-client包中，对于需要接入im-server的小伙伴，可以按照下面的教程快速的将IM功能集成到自己的项目中。&lt;/p&gt; &#xA;&lt;p&gt;注意服务器端和网页端都需要接入，服务器端发送消息，网页端接收消息。&lt;/p&gt; &#xA;&lt;p&gt;4.1 服务器端接入&lt;/p&gt; &#xA;&lt;p&gt;引入pom文件&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;com.box&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;im-client&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;1.1.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;内容使用了redis进行通信,所以要配置redis地址：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;spring:&#xA;  redis:&#xA;    host: 127.0.0.1&#xA;    port: 6379&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;直接把IMClient通过@Autowire导进来就可以发送消息了，IMClient 只有2个接口：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;public class IMClient {&#xA;&#xA;    /**&#xA;     * 发送私聊消息&#xA;     *&#xA;     * @param recvId 接收用户id&#xA;     * @param messageInfo 消息体，将转成json发送到客户端&#xA;     */&#xA;    void sendPrivateMessage(Long recvId, PrivateMessageInfo... messageInfo)；&#xA;     &#xA;&#xA;    /**&#xA;     * 发送群聊消息&#xA;     *&#xA;     * @param recvIds 群聊用户id列表&#xA;     * @param messageInfo 消息体，将转成json发送到客户端&#xA;     */&#xA;    void sendGroupMessage(List&amp;lt;Long&amp;gt; recvIds, GroupMessageInfo... messageInfo)；&#xA;      &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;发送私聊消息(群聊也是类似的方式)：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; @Autowired&#xA; private IMClient imClient;&#xA;&#xA; public void sendMessage(){&#xA;    PrivateMessageInfo messageInfo = new PrivateMessageInfo();&#xA;    Long recvId = 1L;&#xA;    messageInfo.setId(123L);&#xA;    messageInfo.setContent(&#34;你好呀&#34;);&#xA;    messageInfo.setType(MessageType.TEXT.getCode());&#xA;    messageInfo.setSendId(userId);&#xA;    messageInfo.setRecvId(recvId);&#xA;    messageInfo.setSendTime(new Date());&#xA;    imClient.sendPrivateMessage(recvId,messageInfo);&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果需要对消息发送的结果进行监听的话，实现MessageListener,并加上@IMListener即可&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@Slf4j&#xA;@IMListener(type = IMListenerType.ALL)&#xA;public class PrivateMessageListener implements MessageListener {&#xA;    &#xA;    @Override&#xA;    public void process(SendResult result){&#xA;        PrivateMessageInfo messageInfo = (PrivateMessageInfo) result.getMessageInfo();&#xA;        if(result.getStatus().equals(IMSendStatus.SUCCESS)){&#xA;            // 消息发送成功&#xA;            log.info(&#34;消息已读，消息id:{}，发送者:{},接收者:{}&#34;,messageInfo.getId(),messageInfo.getSendId(),messageInfo.getRecvId());&#xA;        }&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;4.2 网页端接入 首先将im-ui/src/api/wssocket.js拷贝到自己的项目。&lt;/p&gt; &#xA;&lt;p&gt;接入代码如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import * as wsApi from &#39;./api/wssocket&#39;;&#xA;&#xA;let wsUrl = &#39;ws://localhost:8878/im&#39;&#xA;let userId = 1;&#xA;wsApi.createWebSocket(wsUrl , userId);&#xA;wsApi.onopen(() =&amp;gt; {&#xA;    // 连接打开&#xA;    console.log(&#34;连接成功&#34;);&#xA;});&#xA;wsApi.onmessage((cmd,messageInfo) =&amp;gt; {&#xA;    if (cmd == 2) {&#xA;    &#x9;// 异地登录，强制下线&#xA;    &#x9;console.log(&#34;您已在其他地方登陆，将被强制下线&#34;);&#xA;    } else if (cmd == 3) {&#xA;    &#x9;// 私聊消息&#xA;    &#x9;console.log(messageInfo);&#xA;    } else if (cmd == 4) {&#xA;    &#x9;// 群聊消息&#xA;    &#x9;console.log(messageInfo);&#xA;    }&#xA;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;界面截图&lt;/h4&gt; &#xA;&lt;p&gt;文字聊天： &lt;img src=&#34;https://raw.githubusercontent.com/fuhao0536/box-im-master/master/%E6%88%AA%E5%9B%BE/%E6%96%87%E5%AD%97%E8%81%8A%E5%A4%A9.jpg&#34; alt=&#34;输入图片说明&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;发送图片、文件： &lt;img src=&#34;https://raw.githubusercontent.com/fuhao0536/box-im-master/master/%E6%88%AA%E5%9B%BE/%E5%8F%91%E9%80%81%E5%9B%BE%E7%89%87%E6%96%87%E4%BB%B6.jpg&#34; alt=&#34;输入图片说明&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;发送语音 &lt;img src=&#34;https://raw.githubusercontent.com/fuhao0536/box-im-master/master/%E6%88%AA%E5%9B%BE/%E5%8F%91%E9%80%81%E8%AF%AD%E9%9F%B3.jpg&#34; alt=&#34;输入图片说明&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;群聊： &lt;img src=&#34;https://raw.githubusercontent.com/fuhao0536/box-im-master/master/%E6%88%AA%E5%9B%BE/%E7%BE%A4%E8%81%8A.jpg&#34; alt=&#34;输入图片说明&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;好友列表： &lt;img src=&#34;https://raw.githubusercontent.com/fuhao0536/box-im-master/master/%E6%88%AA%E5%9B%BE/%E5%A5%BD%E5%8F%8B%E5%88%97%E8%A1%A8.jpg&#34; alt=&#34;输入图片说明&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;群聊列表： &lt;img src=&#34;https://raw.githubusercontent.com/fuhao0536/box-im-master/master/%E6%88%AA%E5%9B%BE/%E7%BE%A4%E8%81%8A%E5%88%97%E8%A1%A8.jpg&#34; alt=&#34;输入图片说明&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jaygajera17/E-commerce-project-springBoot</title>
    <updated>2023-09-08T01:30:18Z</updated>
    <id>tag:github.com,2023-09-08:/jaygajera17/E-commerce-project-springBoot</id>
    <link href="https://github.com/jaygajera17/E-commerce-project-springBoot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This a web application Java Based Beginner level project To developing the e-commerce website to Buy/sell the Food Item. We use the Spring Boot to build the back-end part&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Old Version&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jaygajera17/E-commerce-project-springBoot/tree/main&#34;&gt;https://github.com/jaygajera17/E-commerce-project-springBoot/tree/main&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;issue: everytime connection open close for access database&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;New Upgrade ( what&#39;s new)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Hibernate configuration added( database and tables automatically create when run the project)&lt;/li&gt; &#xA; &lt;li&gt;Service classes provide reusable services throughout project&lt;/li&gt; &#xA; &lt;li&gt;dao classes interact with database&lt;/li&gt; &#xA; &lt;li&gt;bug fixed ( product image, security , etc..)&lt;/li&gt; &#xA; &lt;li&gt;support in both eclipse &amp;amp; intellij ide&lt;/li&gt; &#xA; &lt;li&gt;overall redesign entire code that help reusability.&lt;/li&gt; &#xA; &lt;li&gt;disclaimer: currently working on this branch so there may be some bug related to endpoint, and working on cart logic.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository&lt;/li&gt; &#xA; &lt;li&gt;Open the project in your IDE: IntelliJ IDEA (recommended) or Eclipse &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you are using IntelliJ IDEA, make sure the IDE recognizes the project as a Spring Boot project. Also, you must change the working directory of the project so that the views (the actual web pages to be shown) are found by Spring Boot (check out &lt;a href=&#34;https://raw.githubusercontent.com/jaygajera17/E-commerce-project-springBoot/master2/#web-directories&#34;&gt;Web Directories IntelliJ IDEA&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Make sure you are in the &lt;code&gt;JtProject&lt;/code&gt; directory&lt;/li&gt; &#xA; &lt;li&gt;Configure the database connection in &lt;code&gt;application.properties&lt;/code&gt; file (check the &lt;a href=&#34;https://raw.githubusercontent.com/jaygajera17/E-commerce-project-springBoot/master2/#database&#34;&gt;Database&lt;/a&gt; section below for more info)&lt;/li&gt; &#xA; &lt;li&gt;Run the project (by running the &lt;code&gt;main&lt;/code&gt; method in &lt;code&gt;JtSpringProjectApplication.java&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;a href=&#34;http://localhost:8080/&#34;&gt;http://localhost:8080/&lt;/a&gt; in your browser! &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you ran the &lt;a href=&#34;https://github.com/jaygajera17/E-commerce-project-springBoot/raw/master2/JtProject/basedata.sql&#34;&gt;&lt;code&gt;basedata.sql&lt;/code&gt;&lt;/a&gt;script on the database, you can log in with the following credentials as admin; otherwise you&#39;ll have to manually create an admin user in the database: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Username: &lt;code&gt;admin&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Password: &lt;code&gt;123&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Log in as a normal user: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Username: &lt;code&gt;lisa&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Password: &lt;code&gt;765&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Database&lt;/h3&gt; &#xA;&lt;p&gt;MySQL or MariaDB can be used as the database for this project. The database connection can be configured in the &lt;code&gt;application.properties&lt;/code&gt; file, with the appropriate values for the following properties:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;    db.url=jdbc:mysql://[ip address of db]:[port of db]/ecommjava?createDatabaseIfNotExist=true&#xA;    db.username=[username]&#xA;    db.password=[password, if any]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Having done that, you must create some base data in the database. You can do that by running the &lt;code&gt;basedata.sql&lt;/code&gt; script on the database. Check out Google for how to do that, because it depends on what tool you are using to access said database.&lt;/p&gt; &#xA;&lt;h3&gt;Web Directories&lt;/h3&gt; &#xA;&lt;p&gt;The views are located in &lt;code&gt;src/main/webapp/views&lt;/code&gt;, but for some reason, Spring Boot doesn&#39;t recognize that directory. To remedy this, you must change the working directory of the project in your IDE. If you&#39;re using IntelliJ IDEA, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Click on the &#34;Edit Configurations...&#34; button in the top right corner of the IDE&lt;/li&gt; &#xA; &lt;li&gt;Click on the &lt;code&gt;JtSpringProjectApplication&lt;/code&gt; configuration&lt;/li&gt; &#xA; &lt;li&gt;Change the &#34;Working directory&#34; option (if not present, click on &#34;Modify Options&#34; and select from the list) to the &lt;code&gt;$MODULE_WORKING_DIR$&lt;/code&gt; macro&lt;/li&gt; &#xA; &lt;li&gt;Click &#34;Apply&#34; and &#34;OK&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;When you run the project, the views should be found by Spring Boot and you should see a login page in &lt;a href=&#34;http://localhost:8080/&#34;&gt;http://localhost:8080/&lt;/a&gt; (if not logged in previously)!&lt;/p&gt; &#xA;&lt;h1&gt;Workflow&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://github.com/jaygajera17/E-commerce-project-springBoot/assets/81226571/69951cb7-65e2-4225-8681-2542859aaec6&#34; alt=&#34;image&#34;&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Controller&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;control the endpoint and also send data to view( we use ModelAndView method)&lt;/li&gt; &#xA; &lt;li&gt; &lt;pre&gt;&lt;code class=&#34;language-@GetMapping(&amp;quot;login&amp;quot;)&#34;&gt;  public String adminlogin() {&#xA;  &#x9;&#xA;  &#x9;return &#34;adminlogin&#34;;&#xA;  }```&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;whenever /login url is hit , src-&amp;gt;main-&amp;gt;webapp-&amp;gt; adminlogin.jsp file execute&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Models&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;represent data as entity and relationship among them.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;View&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;receive data from controller and show with frontend.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Endpoints&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://localhost:8080/&#34;&gt;http://localhost:8080/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://localhost:8080/register&#34;&gt;http://localhost:8080/register&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://localhost:8080/admin/products&#34;&gt;http://localhost:8080/admin/products&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://localhost:8080/admin/customers&#34;&gt;http://localhost:8080/admin/customers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://localhost:8080/admin/categories&#34;&gt;http://localhost:8080/admin/categories&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://localhost:8080/admin/Dashboard&#34;&gt;http://localhost:8080/admin/Dashboard&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Spring Boot&lt;/h2&gt; &#xA;&lt;p&gt;For any information about Spring Boot, here are some useful links!&lt;/p&gt; &#xA;&lt;h3&gt;Reference Documentation&lt;/h3&gt; &#xA;&lt;p&gt;For further reference, please consider the following sections:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://maven.apache.org/guides/index.html&#34;&gt;Official Apache Maven documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.spring.io/spring-boot/docs/2.6.4/maven-plugin/reference/html/&#34;&gt;Spring Boot Maven Plugin Reference Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.spring.io/spring-boot/docs/2.6.4/maven-plugin/reference/html/#build-image&#34;&gt;Create an OCI image&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.spring.io/spring-boot/docs/2.6.4/reference/htmlsingle/#boot-features-developing-web-applications&#34;&gt;Spring Web&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Guides&lt;/h3&gt; &#xA;&lt;p&gt;The following guides illustrate how to use some features concretely:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://spring.io/guides/gs/rest-service/&#34;&gt;Building a RESTful Web Service&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://spring.io/guides/gs/serving-web-content/&#34;&gt;Serving Web Content with Spring MVC&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://spring.io/guides/tutorials/bookmarks/&#34;&gt;Building REST services with Spring&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Preview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/jaygajera17/E-commerce-project-springBoot/assets/81226571/02a04d3c-1fc9-418c-b231-639f6525d07e&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://github.com/jaygajera17/E-commerce-project-springBoot/assets/81226571/24c4451b-43a6-4c23-a78a-786eab4303b0&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://github.com/jaygajera17/E-commerce-project-springBoot/assets/81226571/93c1baeb-326c-450f-867e-a883900a6644&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Link&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;𝗬𝗼𝘂𝘁𝘂𝗯𝗲 𝗽𝗿𝗼𝗷𝗲𝗰𝘁 𝘃𝗶𝗱𝗲𝗼 𝗪𝗼𝗿𝗸𝗶𝗻𝗴 𝗗𝗲𝗺𝗼 + 𝘀𝘁𝗲𝗽 𝗯𝘆 𝘀𝘁𝗲𝗽 𝗲𝘅𝗲𝗰𝘂𝘁𝗶𝗼𝗻 𝗹𝗶𝗻𝗸 ( old version )::--- &lt;a href=&#34;https://youtu.be/c6WWdINWSlI&#34;&gt; click here &lt;/a&gt; &lt;a href=&#34;https://youtu.be/c6WWdINWSlI&#34;&gt;&lt;img src=&#34;https://img.shields.io/youtube/views/c6WWdINWSlI?style=social&#34; alt=&#34;youtube&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>