<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-01T02:11:14Z</updated>
  <subtitle>Monthly Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Stirling-Tools/Stirling-PDF</title>
    <updated>2024-01-01T02:11:14Z</updated>
    <id>tag:github.com,2024-01-01:/Stirling-Tools/Stirling-PDF</id>
    <link href="https://github.com/Stirling-Tools/Stirling-PDF" rel="alternate"></link>
    <summary type="html">&lt;p&gt;locally hosted web application that allows you to perform various operations on PDF files&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Stirling-Tools/Stirling-PDF/main/docs/stirling.png&#34; width=&#34;80&#34;&gt;&lt;br&gt;&lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt;Stirling-PDF&lt;/h1&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/frooodle/s-pdf&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/frooodle/s-pdf&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/Cn8pWhQRxZ&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1068636748814483718?label=Discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Stirling-Tools/Stirling-PDF/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/v/frooodle/s-pdf/latest&#34; alt=&#34;Docker Image Version (tag latest semver)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Stirling-Tools/stirling-pdf&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/stirling-tools/stirling-pdf?style=social&#34; alt=&#34;GitHub Repo stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.paypal.com/paypalme/froodleplex&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Paypal%20Donate-yellow?style=flat&amp;amp;logo=paypal&#34; alt=&#34;Paypal Donate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sponsors/Frooodle&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Github%20Sponsor-yellow?style=flat&amp;amp;logo=github&#34; alt=&#34;Github Sponser&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cloud.digitalocean.com/apps/new?repo=https://github.com/Stirling-Tools/Stirling-PDF/tree/digitalOcean&amp;amp;refcode=c3210994b1af&#34;&gt;&lt;img src=&#34;https://www.deploytodo.com/do-btn-blue.svg?sanitize=true&#34; alt=&#34;Deploy to DO&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a powerful locally hosted web based PDF manipulation tool using docker that allows you to perform various operations on PDF files, such as splitting merging, converting, reorganizing, adding images, rotating, compressing, and more. This locally hosted web application started as a 100% ChatGPT-made application and has evolved to include a wide range of features to handle all your PDF needs.&lt;/p&gt; &#xA;&lt;p&gt;Stirling PDF makes no outbound calls for any record keeping or tracking.&lt;/p&gt; &#xA;&lt;p&gt;All files and PDFs exist either exclusively on the client side, reside in server memory only during task execution, or temporarily reside in a file solely for the execution of the task. Any file downloaded by the user will have been deleted from the server by that point.&lt;/p&gt; &#xA;&lt;p&gt;Please feel free to submit feature requests or report bugs either through GitHub issues or on our &lt;a href=&#34;https://discord.gg/Cn8pWhQRxZ&#34;&gt;Discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Stirling-Tools/Stirling-PDF/main/images/stirling-home.png&#34; alt=&#34;stirling-home&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dark mode support.&lt;/li&gt; &#xA; &lt;li&gt;Custom download options (see &lt;a href=&#34;https://github.com/Stirling-Tools/Stirling-PDF/raw/main/images/settings.png&#34;&gt;here&lt;/a&gt; for example)&lt;/li&gt; &#xA; &lt;li&gt;Parallel file processing and downloads&lt;/li&gt; &#xA; &lt;li&gt;API for integration with external scripts&lt;/li&gt; &#xA; &lt;li&gt;Optional Login and Authentication support (see &lt;a href=&#34;https://github.com/Stirling-Tools/Stirling-PDF/tree/main#login-authentication&#34;&gt;here&lt;/a&gt; for documentation)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;strong&gt;PDF Features&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Page Operations&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;View and modify PDFs - View multi page PDFs with custom viewing sorting and searching. Plus on page edit features like annotate, draw and adding text and images. (Using PDF.js with Joxit and Liberation.Liberation fonts)&lt;/li&gt; &#xA; &lt;li&gt;Full interactive GUI for merging/splitting/rotating/moving PDFs and their pages.&lt;/li&gt; &#xA; &lt;li&gt;Merge multiple PDFs together into a single resultant file.&lt;/li&gt; &#xA; &lt;li&gt;Split PDFs into multiple files at specified page numbers or extract all pages as individual files.&lt;/li&gt; &#xA; &lt;li&gt;Reorganize PDF pages into different orders.&lt;/li&gt; &#xA; &lt;li&gt;Rotate PDFs in 90-degree increments.&lt;/li&gt; &#xA; &lt;li&gt;Remove pages.&lt;/li&gt; &#xA; &lt;li&gt;Multi-page layout (Format PDFs into a multi-paged page).&lt;/li&gt; &#xA; &lt;li&gt;Scale page contents size by set %.&lt;/li&gt; &#xA; &lt;li&gt;Adjust Contrast.&lt;/li&gt; &#xA; &lt;li&gt;Crop PDF.&lt;/li&gt; &#xA; &lt;li&gt;Auto Split PDF (With physically scanned page dividers).&lt;/li&gt; &#xA; &lt;li&gt;Extract page(s).&lt;/li&gt; &#xA; &lt;li&gt;Convert PDF to a single page.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Conversion Operations&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Convert PDFs to and from images.&lt;/li&gt; &#xA; &lt;li&gt;Convert any common file to PDF (using LibreOffice).&lt;/li&gt; &#xA; &lt;li&gt;Convert PDF to Word/Powerpoint/Others (using LibreOffice).&lt;/li&gt; &#xA; &lt;li&gt;Convert HTML to PDF.&lt;/li&gt; &#xA; &lt;li&gt;URL to PDF.&lt;/li&gt; &#xA; &lt;li&gt;Markdown to PDF.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Security &amp;amp; Permissions&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add and remove passwords.&lt;/li&gt; &#xA; &lt;li&gt;Change/set PDF Permissions.&lt;/li&gt; &#xA; &lt;li&gt;Add watermark(s).&lt;/li&gt; &#xA; &lt;li&gt;Certify/sign PDFs.&lt;/li&gt; &#xA; &lt;li&gt;Sanitize PDFs.&lt;/li&gt; &#xA; &lt;li&gt;Auto-redact text.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Other Operations&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add/Generate/Write signatures.&lt;/li&gt; &#xA; &lt;li&gt;Repair PDFs.&lt;/li&gt; &#xA; &lt;li&gt;Detect and remove blank pages.&lt;/li&gt; &#xA; &lt;li&gt;Compare 2 PDFs and show differences in text.&lt;/li&gt; &#xA; &lt;li&gt;Add images to PDFs.&lt;/li&gt; &#xA; &lt;li&gt;Compress PDFs to decrease their filesize (Using OCRMyPDF).&lt;/li&gt; &#xA; &lt;li&gt;Extract images from PDF.&lt;/li&gt; &#xA; &lt;li&gt;Extract images from Scans.&lt;/li&gt; &#xA; &lt;li&gt;Add page numbers.&lt;/li&gt; &#xA; &lt;li&gt;Auto rename file by detecting PDF header text.&lt;/li&gt; &#xA; &lt;li&gt;OCR on PDF (Using OCRMyPDF).&lt;/li&gt; &#xA; &lt;li&gt;PDF/A conversion (Using OCRMyPDF).&lt;/li&gt; &#xA; &lt;li&gt;Edit metadata.&lt;/li&gt; &#xA; &lt;li&gt;Flatten PDFs.&lt;/li&gt; &#xA; &lt;li&gt;Get all information on a PDF to view or export as JSON.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For a overview of the tasks and the technology each uses please view &lt;a href=&#34;https://github.com/Stirling-Tools/Stirling-PDF/raw/main/Endpoint-groups.md&#34;&gt;Endpoint-groups.md&lt;/a&gt; Hosted instance/demo of the app can be seen &lt;a href=&#34;https://pdf.adminforge.de/&#34;&gt;here&lt;/a&gt; hosted by the team at adminforge.de&lt;/p&gt; &#xA;&lt;h2&gt;Technologies used&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Spring Boot + Thymeleaf&lt;/li&gt; &#xA; &lt;li&gt;PDFBox&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.libreoffice.org/discover/libreoffice/&#34;&gt;LibreOffice&lt;/a&gt; for advanced conversions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ocrmypdf/OCRmyPDF&#34;&gt;OcrMyPdf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;HTML, CSS, JavaScript&lt;/li&gt; &#xA; &lt;li&gt;Docker&lt;/li&gt; &#xA; &lt;li&gt;PDF.js&lt;/li&gt; &#xA; &lt;li&gt;PDF-LIB.js&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;h3&gt;Locally&lt;/h3&gt; &#xA;&lt;p&gt;Please view &lt;a href=&#34;https://github.com/Stirling-Tools/Stirling-PDF/raw/main/LocalRunGuide.md&#34;&gt;https://github.com/Stirling-Tools/Stirling-PDF/blob/main/LocalRunGuide.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Docker / Podman&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/frooodle/s-pdf&#34;&gt;https://hub.docker.com/r/frooodle/s-pdf&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Stirling PDF has 3 different versions, a Full version, Lite, and ultra-Lite. Depending on the types of features you use you may want a smaller image to save on space. To see what the different versions offer please look at our &lt;a href=&#34;https://github.com/Stirling-Tools/Stirling-PDF/raw/main/Version-groups.md&#34;&gt;version mapping&lt;/a&gt; For people that don&#39;t mind about space optimization just use the latest tag. &lt;img src=&#34;https://img.shields.io/docker/image-size/frooodle/s-pdf/latest?label=Stirling-PDF%20Full&#34; alt=&#34;Docker Image Size (tag)&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/image-size/frooodle/s-pdf/latest-lite?label=Stirling-PDF%20Lite&#34; alt=&#34;Docker Image Size (tag)&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/image-size/frooodle/s-pdf/latest-ultra-lite?label=Stirling-PDF%20Ultra-Lite&#34; alt=&#34;Docker Image Size (tag)&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Docker Run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -d \&#xA;  -p 8080:8080 \&#xA;  -v /location/of/trainingData:/usr/share/tesseract-ocr/5/tessdata \&#xA;  -v /location/of/extraConfigs:/configs \&#xA;  -v /location/of/logs:/logs \&#xA;  -e DOCKER_ENABLE_SECURITY=false \&#xA;  --name stirling-pdf \&#xA;  frooodle/s-pdf:latest&#xA;  &#xA;  &#xA;  Can also add these for customisation but are not required&#xA;  &#xA;  -v /location/of/customFiles:/customFiles \&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Docker Compose&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;version: &#39;3.3&#39;&#xA;services:&#xA;  stirling-pdf:&#xA;    image: frooodle/s-pdf:latest&#xA;    ports:&#xA;      - &#39;8080:8080&#39;&#xA;    volumes:&#xA;      - /location/of/trainingData:/usr/share/tesseract-ocr/5/tessdata #Required for extra OCR languages&#xA;      - /location/of/extraConfigs:/configs&#xA;#      - /location/of/customFiles:/customFiles/&#xA;#      - /location/of/logs:/logs/&#xA;    environment:&#xA;      - DOCKER_ENABLE_SECURITY=false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Podman is CLI-compatible with Docker, so simply replace &#34;docker&#34; with &#34;podman&#34;.&lt;/p&gt; &#xA;&lt;h2&gt;Enable OCR/Compression feature&lt;/h2&gt; &#xA;&lt;p&gt;Please view &lt;a href=&#34;https://github.com/Stirling-Tools/Stirling-PDF/raw/main/HowToUseOCR.md&#34;&gt;https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToUseOCR.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Want to add your own language?&lt;/h2&gt; &#xA;&lt;p&gt;Stirling PDF currently supports 21!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;English (English) (en_GB)&lt;/li&gt; &#xA; &lt;li&gt;English (US) (en_US)&lt;/li&gt; &#xA; &lt;li&gt;Arabic (العربية) (ar_AR)&lt;/li&gt; &#xA; &lt;li&gt;German (Deutsch) (de_DE)&lt;/li&gt; &#xA; &lt;li&gt;French (Français) (fr_FR)&lt;/li&gt; &#xA; &lt;li&gt;Spanish (Español) (es_ES)&lt;/li&gt; &#xA; &lt;li&gt;Chinese (简体中文) (zh_CN)&lt;/li&gt; &#xA; &lt;li&gt;Catalan (Català) (ca_CA)&lt;/li&gt; &#xA; &lt;li&gt;Italian (Italiano) (it_IT)&lt;/li&gt; &#xA; &lt;li&gt;Swedish (Svenska) (sv_SE)&lt;/li&gt; &#xA; &lt;li&gt;Polish (Polski) (pl_PL)&lt;/li&gt; &#xA; &lt;li&gt;Romanian (Română) (ro_RO)&lt;/li&gt; &#xA; &lt;li&gt;Korean (한국어) (ko_KR)&lt;/li&gt; &#xA; &lt;li&gt;Portuguese Brazilian (Português) (pt_BR)&lt;/li&gt; &#xA; &lt;li&gt;Russian (Русский) (ru_RU)&lt;/li&gt; &#xA; &lt;li&gt;Basque (Euskara) (eu_ES)&lt;/li&gt; &#xA; &lt;li&gt;Japanese (日本語) (ja_JP)&lt;/li&gt; &#xA; &lt;li&gt;Dutch (Nederlands) (nl_NL)&lt;/li&gt; &#xA; &lt;li&gt;Greek (el_GR)&lt;/li&gt; &#xA; &lt;li&gt;Turkish (Türkçe) (tr_TR)&lt;/li&gt; &#xA; &lt;li&gt;Indonesia (Bahasa Indonesia) (id_ID)&lt;/li&gt; &#xA; &lt;li&gt;Hindi (हिंदी) (hi_IN)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to add your own language to Stirling-PDF please refer &lt;a href=&#34;https://github.com/Stirling-Tools/Stirling-PDF/raw/main/HowToAddNewLanguage.md&#34;&gt;https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;And please create a PR to merge it back in so others can use it!&lt;/p&gt; &#xA;&lt;h2&gt;How to View&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open a web browser and navigate to &lt;code&gt;http://localhost:8080/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use the application by following the instructions on the website.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Customisation&lt;/h2&gt; &#xA;&lt;p&gt;Stirling PDF allows easy customization of the app. Includes things like&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Custom application name&lt;/li&gt; &#xA; &lt;li&gt;Custom slogans, icons, images, and even custom HTML (via file overrides)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are two options for this, either using the generated settings file &lt;code&gt;settings.yml&lt;/code&gt; This file is located in the &lt;code&gt;/configs&lt;/code&gt; directory and follows standard YAML formatting&lt;/p&gt; &#xA;&lt;p&gt;Environment variables are also supported and would override the settings file For example in the settings.yml you have&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;system:&#xA;  defaultLocale: &#39;en-US&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To have this via an environment variable you would have &lt;code&gt;SYSTEM_DEFAULTLOCALE&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Current list of settings is&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;security:&#xA;  enableLogin: false # set to &#39;true&#39; to enable login&#xA;  csrfDisabled: true&#xA;&#xA;system:&#xA;  defaultLocale: &#39;en-US&#39; # Set the default language (e.g. &#39;de-DE&#39;, &#39;fr-FR&#39;, etc)&#xA;  googlevisibility: false # &#39;true&#39; to allow Google visibility (via robots.txt), &#39;false&#39; to disallow&#xA;  customStaticFilePath: &#39;/customFiles/static/&#39; # Directory path for custom static files&#xA;&#xA;#ui:&#xA;#  appName: exampleAppName # Application&#39;s visible name&#xA;#  homeDescription: I am a description # Short description or tagline shown on homepage.&#xA;#  appNameNavbar: navbarName # Name displayed on the navigation bar&#xA;&#xA;endpoints:&#xA;  toRemove: [] # List endpoints to disable (e.g. [&#39;img-to-pdf&#39;, &#39;remove-pages&#39;])&#xA;  groupsToRemove: [] # List groups to disable (e.g. [&#39;LibreOffice&#39;])&#xA;&#xA;metrics:&#xA;  enabled: true # &#39;true&#39; to enable Info APIs endpoints (view http://localhost:8080/swagger-ui/index.html#/API to learn more), &#39;false&#39; to disable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Extra notes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Endpoints. Currently, the endpoints ENDPOINTS_TO_REMOVE and GROUPS_TO_REMOVE can include comma separate lists of endpoints and groups to disable as example ENDPOINTS_TO_REMOVE=img-to-pdf,remove-pages would disable both image-to-pdf and remove pages, GROUPS_TO_REMOVE=LibreOffice Would disable all things that use LibreOffice. You can see a list of all endpoints and groups &lt;a href=&#34;https://github.com/Stirling-Tools/Stirling-PDF/raw/main/Endpoint-groups.md&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;customStaticFilePath. Customise static files such as the app logo by placing files in the /customFiles/static/ directory. An example of customising app logo is placing a /customFiles/static/favicon.svg to override current SVG. This can be used to change any images/icons/css/fonts/js etc in Stirling-PDF&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Environment only parameters&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;SYSTEM_ROOTURIPATH&lt;/code&gt; ie set to &lt;code&gt;/pdf-app&lt;/code&gt; to Set the application&#39;s root URI to &lt;code&gt;localhost:8080/pdf-app&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SYSTEM_CONNECTIONTIMEOUTMINUTES&lt;/code&gt; to set custom connection timeout values&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DOCKER_ENABLE_SECURITY&lt;/code&gt; to tell docker to download security jar (required as true for auth login)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;For those wanting to use Stirling-PDFs backend API to link with their own custom scripting to edit PDFs you can view all existing API documentation &lt;a href=&#34;https://app.swaggerhub.com/apis-docs/Stirling-Tools/Stirling-PDF/&#34;&gt;here&lt;/a&gt; or navigate to /swagger-ui/index.html of your stirling-pdf instance for your versions documentation (Or by following the API button in your settings of Stirling-PDF)&lt;/p&gt; &#xA;&lt;h2&gt;Login authentication&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Stirling-Tools/Stirling-PDF/main/images/login-light.png&#34; alt=&#34;stirling-login&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;User must have the folder ./configs volumed within docker so that it is retained during updates.&lt;/li&gt; &#xA; &lt;li&gt;Docker uses must download the security jar version by setting &lt;code&gt;DOCKER_ENABLE_SECURITY&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in environment variables.&lt;/li&gt; &#xA; &lt;li&gt;Then either enable login via the settings.yml file or via setting &lt;code&gt;SECURITY_ENABLE_LOGIN&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Now the initial user will be generated with username &lt;code&gt;admin&lt;/code&gt; and password &lt;code&gt;stirling&lt;/code&gt;. On login you will be forced to change the password to a new one. You can also use the environment variables &lt;code&gt;SECURITY_INITIALLOGIN_USERNAME&lt;/code&gt; and &lt;code&gt;SECURITY_INITIALLOGIN_PASSWORD&lt;/code&gt; to set your own straight away (Recommended to remove them after user creation).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once the above has been done, on restart, a new stirling-pdf-DB.mv.db will show if everything worked.&lt;/p&gt; &#xA;&lt;p&gt;When you login to Stirling PDF you will be redirected to /login page to login with those default credentials. After login everything should function as normal&lt;/p&gt; &#xA;&lt;p&gt;To access your account settings go to Account settings in the settings cog menu (top right in navbar) This Account settings menu is also where you find your API key.&lt;/p&gt; &#xA;&lt;p&gt;To add new users go to the bottom of Account settings and hit &#39;Admin Settings&#39;, here you can add new users. The different roles mentioned within this are for rate limiting. This is a Work in progress which will be expanding on more in future&lt;/p&gt; &#xA;&lt;p&gt;For API usage you must provide a header with &#39;X-API-Key&#39; and the associated API key for that user.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Q1: What are your planned features?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Progress bar/Tracking&lt;/li&gt; &#xA; &lt;li&gt;Full custom logic pipelines to combine multiple operations together.&lt;/li&gt; &#xA; &lt;li&gt;Folder support with auto scanning to perform operations on&lt;/li&gt; &#xA; &lt;li&gt;Redact text (Via UI not just automated way)&lt;/li&gt; &#xA; &lt;li&gt;Add Forms&lt;/li&gt; &#xA; &lt;li&gt;Multi page layout (Stich PDF pages together) support x rows y columns and custom page sizing&lt;/li&gt; &#xA; &lt;li&gt;Fill forms mannual and automatic&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Q2: Why is my application downloading .htm files?&lt;/h3&gt; &#xA;&lt;p&gt;This is an issue caused commonly by your NGINX configuration. The default file upload size for NGINX is 1MB, you need to add the following in your Nginx sites-available file. &lt;code&gt;client_max_body_size SIZE;&lt;/code&gt; Where &#34;SIZE&#34; is 50M for example for 50MB files.&lt;/p&gt; &#xA;&lt;h3&gt;Q3: Why is my download timing out&lt;/h3&gt; &#xA;&lt;p&gt;NGINX has timeout values by default so if you are running Stirling-PDF behind NGINX you may need to set a timeout value such as adding the config &lt;code&gt;proxy_read_timeout 3600;&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>xuchengsheng/spring-reading</title>
    <updated>2024-01-01T02:11:14Z</updated>
    <id>tag:github.com,2024-01-01:/xuchengsheng/spring-reading</id>
    <link href="https://github.com/xuchengsheng/spring-reading" rel="alternate"></link>
    <summary type="html">&lt;p&gt;涵盖了 Spring 框架的核心概念和关键功能，包括控制反转（IOC）容器的使用，面向切面编程（AOP）的原理与实践，事务管理的方式与实现，Spring MVC 的流程与控制器工作机制，以及 Spring 中数据访问、安全、Boot 自动配置等方面的深入研究。此外，它还包含了 Spring 事件机制的应用、高级主题如缓存抽象和响应式编程，以及对 Spring 源码的编程风格与设计模式的深入探讨。&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img alt=&#34;logo&#34; src=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/image/banner.png&#34; style=&#34;height: 80px&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h2&gt;深入Spring，从源码开始！&lt;/h2&gt; &#xA; &lt;h4&gt;探索Java最受欢迎的框架，理解它的内部机制，带大家从入门到精通。&lt;/h4&gt; &#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/xuchengsheng/spring-reading/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/xuchengsheng/spring-reading?logo=github&amp;amp;logoColor=%23EF2D5E&amp;amp;label=Stars&amp;amp;labelColor=%23000000&amp;amp;color=%23EF2D5E&amp;amp;cacheSeconds=3600&#34; alt=&#34;Stars Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xuchengsheng&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/followers/xuchengsheng?label=Followers&amp;amp;logo=github&amp;amp;logoColor=%23FC521F&amp;amp;labelColor=%231A2477&amp;amp;color=%23FC521F&amp;amp;cacheSeconds=3600&#34; alt=&#34;Follow Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xuchengsheng/spring-reading/fork&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/xuchengsheng/spring-reading?label=Forks&amp;amp;logo=github&amp;amp;logoColor=%23F2BB13&amp;amp;labelColor=%23BE2323&amp;amp;color=%23F2BB13&#34; alt=&#34;Fork Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xuchengsheng/spring-reading/watchers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/watchers/xuchengsheng/spring-reading?label=Watchers&amp;amp;logo=github&amp;amp;logoColor=%23FF4655&amp;amp;labelColor=%234169E1&amp;amp;color=%23FF4655&amp;amp;cacheSeconds=3600&#34; alt=&#34;Watchers Badge&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://visitor-badge.lithub.cc/badge?page_id=github.com/xuchengsheng&amp;amp;left_text=Visitors&#34; alt=&#34;Visitor Badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/WeChat-xcs19930428-%2307C160?logo=wechat&#34; alt=&#34;Wechat Badge&#34;&gt; &lt;a href=&#34;https://blog.csdn.net/duzhuang2399&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/xml?url=https%3A%2F%2Fblog.csdn.net%2Fduzhuang2399&amp;amp;query=%2F%2F*%5B%40id%3D%22userSkin%22%5D%2Fdiv%5B1%5D%2Fdiv%5B2%5D%2Fdiv%5B1%5D%2Fdiv%2Fdiv%5B2%5D%2Fdiv%5B1%5D%2Fdiv%5B1%5D%2Fdiv%5B2%5D%2Fspan&amp;amp;logo=C&amp;amp;logoColor=red&amp;amp;label=CSDN&amp;amp;color=red&amp;amp;cacheSeconds=3600&#34; alt=&#34;CSDN Badge&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; ⚡ &lt;a href=&#34;#技术&#34;&gt;技术&lt;/a&gt; | 👋 &lt;a href=&#34;#简介&#34;&gt;简介&lt;/a&gt; | 🍵 &lt;a href=&#34;#为何做Spring源码分析&#34;&gt;Why&lt;/a&gt; | 🙏 &lt;a href=&#34;#顺手点个星&#34;&gt;点个星&lt;/a&gt; | 🌱 &lt;a href=&#34;#spring-源码阅读系列&#34;&gt;Spring源码&lt;/a&gt; | 💬 &lt;a href=&#34;#与我联系&#34;&gt;联系我&lt;/a&gt; | ⛵ &lt;a href=&#34;#欢迎贡献&#34;&gt;贡献&lt;/a&gt; | 🔄 &lt;a href=&#34;#持续更新中&#34;&gt;更新&lt;/a&gt; | 💻 &lt;a href=&#34;#我的-github-统计&#34;&gt;统计&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;⚡技术&lt;/h2&gt; &#xA;&lt;div align=&#34;left&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/Java-1.8%2B-%23437291?logo=openjdk&amp;amp;logoColor=%23437291&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/Spring-5.3.10-%23437291?logo=Spring&amp;amp;logoColor=%236DB33F&amp;amp;color=%236DB33F&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/SpringBoot-2.5.5-%23437291?logo=SpringBoot&amp;amp;logoColor=%236DB33F&amp;amp;color=%236DB33F&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/Maven-3.6.3-%23437291?logo=Apache%20Maven&amp;amp;logoColor=%23C71A36&amp;amp;color=%23C71A36&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/JSR-330-%2366CCFF?logo=OpenJDK&amp;amp;logoColor=%2366CCFF&amp;amp;color=%2366CCFF&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/JSR-250-%23FF9900?logo=OpenJDK&amp;amp;logoColor=%23FF9900&amp;amp;color=%23FF9900&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;👋简介&lt;/h2&gt; &#xA;&lt;p&gt;大家好呀，我是Lex👨‍💻。我是一名拥有8年经验的Java 后端开发人员👨‍💼，也是一个对 Spring 框架充满热情❤️的程序员。为了帮助那些希望深入了解 Spring 框架的程序员们🧑‍💻，我创建了这个 “Spring 源码阅读系列”📖。通过这个系列，我希望能够与你们共同探索 Spring 的内部工作机制⚙️。如果您有同样的兴趣或问题🤔，请联系我📩！&lt;/p&gt; &#xA;&lt;h2&gt;🍵&lt;strong&gt;为何做Spring源码分析&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;在我作为框架研发的开发者👨‍🔬的工作中，我经常遇到需要深入理解和调整框架行为的情况🔧。这些工作不只是简单地使用框架的API，更多地是需要对框架的内部工作方式有详细的了解🔍。虽然Github上有关于Spring的简化版本📦，这些对于入门学习确实有很大的帮助✅，但当涉及到真实的项目应用时，与真正的Spring框架还是有很大的差异❌。因此，我开始深入研究Spring的源码，希望能够更透彻地理解其内部的工作机制，以便更好地应用到我的实际工作中🧰。分享我的源码分析📝，也是为了给那些希望真正理解Spring，而不仅仅是使用它的开发者提供一些参考和帮助🙌。&lt;/p&gt; &#xA;&lt;h2&gt;🙏顺手点个星&lt;/h2&gt; &#xA;&lt;p&gt;亲爱的朋友们👥，我真的花了很多心思💭去研究和整理这个“Spring 源码阅读系列”📘。如果你觉得这东西还不错👍，或者给你带来了一点点帮助🤗，麻烦点一下星星吧🌟。这真的对我意义重大🎖，每一颗星✨都能让我觉得所有的努力都是值得的💪。我知道这是小事一桩，但你的那一下点击🖱，对我来说就是最好的鼓励🎉。无论如何，都要感谢你抽时间🕰阅读我的内容，真的很感激🙏！&lt;/p&gt; &#xA;&lt;h2&gt;🌱Spring 源码阅读系列&lt;/h2&gt; &#xA;&lt;h4&gt;Spring IOC&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;资源加载与访问&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-resources/spring-resource/README.md&#34;&gt;&lt;code&gt;Resource&lt;/code&gt;&lt;/a&gt;：抽象接口，表示文件、类路径等，用于访问不同来源的资源。&lt;img src=&#34;https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-resources/spring-resource-resourceLoader/README.md&#34;&gt;&lt;code&gt;ResourceLoader&lt;/code&gt;&lt;/a&gt;：资源获取核心接口，实现统一加载不同位置资源的策略。&lt;img src=&#34;https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-resources/spring-resource-resourcePatternResolver/README.md&#34;&gt;&lt;code&gt;ResourcePatternResolver&lt;/code&gt;&lt;/a&gt;：资源模式解析接口，用于灵活加载应用中的多种资源。&lt;img src=&#34;https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-resources/spring-resource-documentLoader/README.md&#34;&gt;&lt;code&gt;DocumentLoader&lt;/code&gt;&lt;/a&gt;：XML文档加载解析核心接口，支持后台自动配置Spring应用。&lt;img src=&#34;https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;元数据与过滤&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-metadata/spring-metadata-metadataReader/README.md&#34;&gt;&lt;code&gt;MetadataReader&lt;/code&gt;&lt;/a&gt;：类元数据获取核心，支持组件扫描、条件化注解、AOP等高级功能。&lt;img src=&#34;https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-metadata/spring-metadata-annotationMetadata/README.md&#34;&gt;&lt;code&gt;AnnotationMetadata&lt;/code&gt;&lt;/a&gt;：动态获取和操作运行时类注解信息。&lt;img src=&#34;https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-metadata/spring-metadata-typeFilter/README.md&#34;&gt;&lt;code&gt;TypeFilter&lt;/code&gt;&lt;/a&gt;：组件扫描时自定义类筛选，支持复杂条件和精确过滤。&lt;img src=&#34;https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-metadata/spring-metadata-condition/README.md&#34;&gt;&lt;code&gt;Condition&lt;/code&gt;&lt;/a&gt;：条件判断，决定Bean创建和配置的灵活机制。&lt;img src=&#34;https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Bean定义与注册&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-beans/spring-bean-beanDefinition/README.md&#34;&gt;&lt;code&gt;BeanDefinition&lt;/code&gt;&lt;/a&gt;：详细描述Bean，支持依赖注入、AOP、作用域控制等核心功能。&lt;img src=&#34;https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-beans/spring-bean-beanDefinitionHolder/README.md&#34;&gt;&lt;code&gt;BeanDefinitionHolder&lt;/code&gt;&lt;/a&gt;：管理和操作BeanDefinition的关键类。&lt;img src=&#34;https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-beans/spring-bean-beanDefinitionRegistry/README.md&#34;&gt;&lt;code&gt;BeanDefinitionRegistry&lt;/code&gt;&lt;/a&gt;：Bean定义注册管理关键接口，处理Bean元数据。&lt;img src=&#34;https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Bean定义读取与扫描&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-beans/spring-bean-xmlBeanDefinitionReader/README.md&#34;&gt;&lt;code&gt;XmlBeanDefinitionReader&lt;/code&gt;&lt;/a&gt;：加载解析XML配置，构建IOC容器，注册Bean定义。&lt;img src=&#34;https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF6347&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-beans/spring-bean-propertiesBeanDefinitionReader/README.md&#34;&gt;&lt;code&gt;PropertiesBeanDefinitionReader&lt;/code&gt;&lt;/a&gt;：属性文件加载，解析为Bean定义。&lt;img src=&#34;https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF6347&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-beans/spring-bean-groovyBeanDefinitionReader/README.md&#34;&gt;&lt;code&gt;GroovyBeanDefinitionReader&lt;/code&gt;&lt;/a&gt;：Groovy脚本解析为Bean定义。&lt;img src=&#34;https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF6347&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-beans/spring-bean-annotatedBeanDefinitionReader/README.md&#34;&gt;&lt;code&gt;AnnotatedBeanDefinitionReader&lt;/code&gt;&lt;/a&gt;：注解配置，自动扫描注册Spring组件，简化Bean定义配置。&lt;img src=&#34;https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF6347&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-beans/spring-bean-classPathBeanDefinitionScanner/README.md&#34;&gt;&lt;code&gt;ClassPathBeanDefinitionScanner&lt;/code&gt;&lt;/a&gt;：类路径扫描注册Spring Bean，支持自动装配。&lt;img src=&#34;https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF6347&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;属性解析和环境配置&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-env/spring-env-propertySource/README.md&#34;&gt;&lt;code&gt;PropertySource&lt;/code&gt;&lt;/a&gt;：管理各种配置源的抽象类，支持灵活地加载和访问应用配置。&lt;img src=&#34;https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-env/spring-env-propertySources/README.md&#34;&gt;&lt;code&gt;PropertySources&lt;/code&gt;&lt;/a&gt;：用于统一管理和访问多个 PropertySource 实例，简化配置数据的处理。&lt;img src=&#34;https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-env/spring-env-propertyResolver/README.md&#34;&gt;&lt;code&gt;PropertyResolver&lt;/code&gt;&lt;/a&gt;：通用属性解析，获取配置值，处理属性缺失，简便灵活。&lt;img src=&#34;https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-env/spring-env-configurablePropertyResolver/README.md&#34;&gt;&lt;code&gt;ConfigurablePropertyResolver&lt;/code&gt;&lt;/a&gt;：属性解析配置，占位符设置，适应不同配置需求。&lt;img src=&#34;https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-env/spring-env-environment/README.md&#34;&gt;&lt;code&gt;Environment&lt;/code&gt;&lt;/a&gt;：应用环境表示，提供属性访问，支持配置文件，实现动态配置。&lt;img src=&#34;https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-env/spring-env-configurableEnvironment/README.md&#34;&gt;&lt;code&gt;ConfigurableEnvironment&lt;/code&gt;&lt;/a&gt;：动态配置应用环境，激活、默认配置，提升应用灵活性。&lt;img src=&#34;https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;验证、数据绑定与类型转换&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-dataops/spring-dataops-validator/README.md&#34;&gt;&lt;code&gt;Validator&lt;/code&gt;&lt;/a&gt;：提供自定义数据验证逻辑，确保模型对象满足业务规则。&lt;img src=&#34;https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-dataops/spring-dataops-propertyEditor/README.md&#34;&gt;&lt;code&gt;PropertyEditor&lt;/code&gt;&lt;/a&gt;：自定义JavaBean属性的转换逻辑，处理属性类型转换。&lt;img src=&#34;https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-dataops/spring-dataops-converter/README.md&#34;&gt;&lt;code&gt;Converter&lt;/code&gt;&lt;/a&gt;：用于不同类型间的转换，定义简单的源至目标类型转换规则。&lt;img src=&#34;https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-dataops/spring-dataops-converterFactory/README.md&#34;&gt;&lt;code&gt;ConverterFactory&lt;/code&gt;&lt;/a&gt;：创建针对特定源类型的转换器，用于类型转换。&lt;img src=&#34;https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-dataops/spring-dataops-genericConverter/README.md&#34;&gt;&lt;code&gt;GenericConverter&lt;/code&gt;&lt;/a&gt;：更复杂的转换器，支持多种源和目标类型转换。&lt;img src=&#34;https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-dataops/spring-dataops-conditionalConverter/README.md&#34;&gt;&lt;code&gt;ConditionalConverter&lt;/code&gt;&lt;/a&gt;：根据条件选择是否执行转换的转换器。&lt;img src=&#34;https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-dataops/spring-dataops-conversionService/README.md&#34;&gt;&lt;code&gt;ConversionService&lt;/code&gt;&lt;/a&gt;：提供统一的类型转换服务接口，管理转换器。&lt;img src=&#34;https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-dataops/spring-dataops-printer/README.md&#34;&gt;&lt;code&gt;Printer&lt;/code&gt;&lt;/a&gt;：用于将对象格式化为文本，专注于格式化输出。&lt;img src=&#34;https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-dataops/spring-dataops-parser/README.md&#34;&gt;&lt;code&gt;Parser&lt;/code&gt;&lt;/a&gt;：用于将文本解析为对象，专注于解析逻辑。&lt;img src=&#34;https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;BeanWrapper&lt;/code&gt;：用于操作JavaBean的属性，实现动态属性设置和获取。&lt;img src=&#34;https://img.shields.io/badge/%E5%8D%B3%E5%B0%86%E6%9B%B4%E6%96%B0-339933&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;AnnotationFormatterFactory&lt;/code&gt;：针对带注解字段的格式化器工厂，链接注解与格式化逻辑。&lt;img src=&#34;https://img.shields.io/badge/%E5%8D%B3%E5%B0%86%E6%9B%B4%E6%96%B0-339933&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Spring 表达式语言（SpEL）&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;ExpressionParser&lt;/code&gt;: 解析字符串形式的 SpEL 表达式，创建并返回 Expression 实例。&lt;img src=&#34;https://img.shields.io/badge/%E5%8D%B3%E5%B0%86%E6%9B%B4%E6%96%B0-339933&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;Expression&lt;/code&gt;: 代表解析后的 SpEL 表达式，提供求值、赋值等功能。&lt;img src=&#34;https://img.shields.io/badge/%E5%8D%B3%E5%B0%86%E6%9B%B4%E6%96%B0-339933&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;EvaluationContext&lt;/code&gt;: 定义用于 SpEL 表达式求值的环境，包括变量、根对象等。&lt;img src=&#34;https://img.shields.io/badge/%E5%8D%B3%E5%B0%86%E6%9B%B4%E6%96%B0-339933&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;PropertyAccessor&lt;/code&gt;: 处理属性的读写操作，支持表达式中的属性访问。&lt;img src=&#34;https://img.shields.io/badge/%E5%8D%B3%E5%B0%86%E6%9B%B4%E6%96%B0-339933&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;MethodResolver&lt;/code&gt;: 在表达式中解析并调用方法，支持自定义方法解析。&lt;img src=&#34;https://img.shields.io/badge/%E5%8D%B3%E5%B0%86%E6%9B%B4%E6%96%B0-339933&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;TypeLocator&lt;/code&gt;: 用于在表达式中定位和引用特定的类型，例如类名。&lt;img src=&#34;https://img.shields.io/badge/%E5%8D%B3%E5%B0%86%E6%9B%B4%E6%96%B0-339933&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;TypeConverter&lt;/code&gt;: 实现不同类型间的转换，用于表达式中的值转换。&lt;img src=&#34;https://img.shields.io/badge/%E5%8D%B3%E5%B0%86%E6%9B%B4%E6%96%B0-339933&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;BeanResolver&lt;/code&gt;: 用于在表达式中解析并访问 Spring 容器中的 beans。&lt;img src=&#34;https://img.shields.io/badge/%E5%8D%B3%E5%B0%86%E6%9B%B4%E6%96%B0-339933&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;ConstructorResolver&lt;/code&gt;: 解析并执行表达式中的构造函数调用。&lt;img src=&#34;https://img.shields.io/badge/%E5%8D%B3%E5%B0%86%E6%9B%B4%E6%96%B0-339933&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;OperatorOverloader&lt;/code&gt;: 用于自定义表达式中的操作符行为，如加减乘除。&lt;img src=&#34;https://img.shields.io/badge/%E5%8D%B3%E5%B0%86%E6%9B%B4%E6%96%B0-339933&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;ParserContext&lt;/code&gt;: 提供解析 SpEL 表达式时的上下文信息。&lt;img src=&#34;https://img.shields.io/badge/%E5%8D%B3%E5%B0%86%E6%9B%B4%E6%96%B0-339933&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;SpelNode&lt;/code&gt;: 构成 SpEL 表达式内部结构的节点，表示表达式的各个部分。&lt;img src=&#34;https://img.shields.io/badge/%E5%8D%B3%E5%B0%86%E6%9B%B4%E6%96%B0-339933&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;LiteralExpression&lt;/code&gt;: 表示简单的文字值表达式，如数字、字符串。&lt;img src=&#34;https://img.shields.io/badge/%E5%8D%B3%E5%B0%86%E6%9B%B4%E6%96%B0-339933&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;CompoundExpression&lt;/code&gt;: 组合多个子表达式，形成复合的 SpEL 表达式。&lt;img src=&#34;https://img.shields.io/badge/%E5%8D%B3%E5%B0%86%E6%9B%B4%E6%96%B0-339933&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Bean定义导入与组合&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;ImportBeanDefinitionRegistrar&lt;/code&gt;：运行时动态注册 Bean，实现灵活配置，扩展配置类功能。&lt;img src=&#34;https://img.shields.io/badge/%E5%8D%B3%E5%B0%86%E6%9B%B4%E6%96%B0-339933&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;ImportSelector&lt;/code&gt;：运行时动态导入配置类，实现条件选择和灵活配置。&lt;img src=&#34;https://img.shields.io/badge/%E5%8D%B3%E5%B0%86%E6%9B%B4%E6%96%B0-339933&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;DeferredImportSelector&lt;/code&gt;：运行时动态导入配置，支持条件选择和按组别延迟加载。&lt;img src=&#34;https://img.shields.io/badge/%E5%8D%B3%E5%B0%86%E6%9B%B4%E6%96%B0-339933&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Bean工厂&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-factory/spring-factory-beanFactory/README.md&#34;&gt;&lt;code&gt;BeanFactory&lt;/code&gt;&lt;/a&gt;：Spring的核心接口，提供对Bean的配置、创建、管理的基本功能。&lt;img src=&#34;https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF6347&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-factory/spring-factory-listableBeanFactory/README.md&#34;&gt;&lt;code&gt;ListableBeanFactory&lt;/code&gt;&lt;/a&gt;：支持按类型获取Bean的集合。&lt;img src=&#34;https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF6347&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-factory/spring-factory-hierarchicalBeanFactory/README.md&#34;&gt;&lt;code&gt;HierarchicalBeanFactory&lt;/code&gt;&lt;/a&gt;：支持父子容器关系，实现Bean定义的层次结构。&lt;img src=&#34;https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF6347&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-factory/spring-factory-configurableBeanFactory/README.md&#34;&gt;&lt;code&gt;ConfigurableBeanFactory&lt;/code&gt;&lt;/a&gt;：提供对BeanFactory配置的扩展，如属性编辑器、作用域等。&lt;img src=&#34;https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF6347&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-factory/spring-factory-autowireCapableBeanFactory/README.md&#34;&gt;&lt;code&gt;AutowireCapableBeanFactory&lt;/code&gt;&lt;/a&gt;：Bean创建、初始化、注入、销毁的核心功能接口。&lt;img src=&#34;https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF6347&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-factory/spring-factory-configurableListableBeanFactory/README.md&#34;&gt;&lt;code&gt;ConfigurableListableBeanFactory&lt;/code&gt;&lt;/a&gt;：支持配置和列表操作的可配置Bean工厂接口。&lt;img src=&#34;https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF6347&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;基于Java的配置&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;ConfigurationClassPostProcessor&lt;/code&gt;：处理@Configuration注解，关键容器启动后置处理器。&lt;img src=&#34;https://img.shields.io/badge/%E5%8D%B3%E5%B0%86%E6%9B%B4%E6%96%B0-339933&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;ConfigurationClassParser&lt;/code&gt;：解析@Configuration，提取Config信息，支持@Bean和条件化配置。&lt;img src=&#34;https://img.shields.io/badge/%E5%8D%B3%E5%B0%86%E6%9B%B4%E6%96%B0-339933&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;容器上下文&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-context/spring-context-classPathXmlApplicationContext/README.md&#34;&gt;&lt;code&gt;ClassPathXmlApplicationContext&lt;/code&gt;&lt;/a&gt;：类路径（classpath）加载 XML 配置文件的上下文。&lt;img src=&#34;https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-context/spring-context-annotationConfigApplicationContext/README.md&#34;&gt;&lt;code&gt;AnnotationConfigApplicationContext&lt;/code&gt;&lt;/a&gt;：注解配置类中加载配置信息的上下文。&lt;img src=&#34;https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;GenericApplicationContext&lt;/code&gt;：支持多种配置方式，XML、注解、手动注册的上下文。&lt;img src=&#34;https://img.shields.io/badge/%E5%8D%B3%E5%B0%86%E6%9B%B4%E6%96%B0-339933&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Bean生命周期&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-core/spring-core-registerBeanDefinition&#34;&gt;&lt;code&gt;Bean的定义注册过程&lt;/code&gt;&lt;/a&gt;：加载与解析配置文件，注册解析Bean定义，类名、作用域、属性等。&lt;img src=&#34;https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-core/spring-core-getBean/README.md&#34;&gt;&lt;code&gt;Bean的初始化过程&lt;/code&gt;&lt;/a&gt;：实例化、属性注入、Aware回调、后置处理器、初始化方法调用、Bean就绪。&lt;img src=&#34;https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-%23FF3030&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-core/spring-core-resolveDependency/README.md&#34;&gt;&lt;code&gt;Bean的依赖解析过程&lt;/code&gt;&lt;/a&gt;：声明依赖，查找依赖，注入依赖，处理循环依赖，延迟依赖解析。&lt;img src=&#34;https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-%23FF3030&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-core/spring-core-destroyBean/README.md&#34;&gt;&lt;code&gt;Bean的销毁过程&lt;/code&gt;&lt;/a&gt;：销毁方法调用，接口回调，后处理清理，通知触发，GC回收资源。&lt;img src=&#34;https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-%23FF3030&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Bean初始化与扩展点&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-interface/spring-interface-initializingBean/README.md&#34;&gt;&lt;code&gt;InitializingBean&lt;/code&gt;&lt;/a&gt;：提供Bean初始化时执行自定义逻辑的接口。&lt;img src=&#34;https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-interface/spring-interface-disposableBean/README.md&#34;&gt;&lt;code&gt;DisposableBean&lt;/code&gt;&lt;/a&gt;：定义Bean销毁前执行清理操作的接口。&lt;img src=&#34;https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-interface/spring-interface-beanDefinitionRegistryPostProcessor/README.md&#34;&gt;&lt;code&gt;BeanDefinitionRegistryPostProcessor&lt;/code&gt;&lt;/a&gt;：在容器启动时，对BeanDefinition进行动态修改或添加。&lt;img src=&#34;https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-interface/spring-interface-beanFactoryPostProcessor/README.md&#34;&gt;&lt;code&gt;BeanFactoryPostProcessor&lt;/code&gt;&lt;/a&gt;：在Bean实例化前，对BeanFactory进行全局修改或配置。&lt;img src=&#34;https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-interface/spring-interface-beanPostProcessor/README.md&#34;&gt;&lt;code&gt;BeanPostProcessor&lt;/code&gt;&lt;/a&gt;：在Bean初始化前后，进行自定义处理，可影响所有Bean。&lt;img src=&#34;https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-interface/spring-interface-instantiationAwareBeanPostProcessor/README.md&#34;&gt;&lt;code&gt;InstantiationAwareBeanPostProcessor&lt;/code&gt;&lt;/a&gt;：提供更深层次的实例化和属性注入控制。&lt;img src=&#34;https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-interface/spring-interface-destructionAwareBeanPostProcessor/README.md&#34;&gt;&lt;code&gt;DestructionAwareBeanPostProcessor&lt;/code&gt;&lt;/a&gt;： 允许在Bean销毁前进行额外的清理操作。&lt;img src=&#34;https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-interface/spring-interface-mergedBeanDefinitionPostProcessor/README.md&#34;&gt;&lt;code&gt;MergedBeanDefinitionPostProcessor&lt;/code&gt;&lt;/a&gt;：在合并Bean定义时，对BeanDefinition进行进一步处理。&lt;img src=&#34;https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-interface/spring-interface-smartInstantiationAwareBeanPostProcessor/README.md&#34;&gt;&lt;code&gt;SmartInstantiationAwareBeanPostProcessor&lt;/code&gt;&lt;/a&gt;：提供更智能的实例化控制。&lt;img src=&#34;https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-interface/spring-interface-smartInitializingSingleton/README.md&#34;&gt;&lt;code&gt;SmartInitializingSingleton&lt;/code&gt;&lt;/a&gt;：在所有单例Bean初始化完成后，执行自定义逻辑。&lt;img src=&#34;https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Aware接口系列&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-aware/spring-aware-beanNameAware/README.md&#34;&gt;&lt;code&gt;BeanNameAware&lt;/code&gt;&lt;/a&gt;：让Bean获取自身在容器中的名字。&lt;img src=&#34;https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-aware/spring-aware-beanClassLoaderAware/README.md&#34;&gt;&lt;code&gt;BeanClassLoaderAware&lt;/code&gt;&lt;/a&gt;：允许Bean获取其类加载器。&lt;img src=&#34;https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-aware/spring-aware-beanFactoryAware/README.md&#34;&gt;&lt;code&gt;BeanFactoryAware&lt;/code&gt;&lt;/a&gt;：提供Bean获取所属的BeanFactory。&lt;img src=&#34;https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-aware/spring-aware-environmentAware/README.md&#34;&gt;&lt;code&gt;EnvironmentAware&lt;/code&gt;&lt;/a&gt;：允许Bean获取应用程序环境配置。&lt;img src=&#34;https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-aware/spring-aware-embeddedValueResolverAware/README.md&#34;&gt;&lt;code&gt;EmbeddedValueResolverAware&lt;/code&gt;&lt;/a&gt;：允许Bean解析嵌入式值占位符。&lt;img src=&#34;https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-aware/spring-aware-beanClassLoaderAware/README.md&#34;&gt;&lt;code&gt;ResourceLoaderAware&lt;/code&gt;&lt;/a&gt;：允许Bean获取资源加载器。&lt;img src=&#34;https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-aware/spring-aware-applicationEventPublisherAware/README.md&#34;&gt;&lt;code&gt;ApplicationEventPublisherAware&lt;/code&gt;&lt;/a&gt;：允许Bean发布应用程序事件。&lt;img src=&#34;https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-aware/spring-aware-messageSourceAware/README.md&#34;&gt;&lt;code&gt;MessageSourceAware&lt;/code&gt;&lt;/a&gt;：允许Bean获取消息源。&lt;img src=&#34;https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-aware/spring-aware-applicationStartupAware/README.md&#34;&gt;&lt;code&gt;ApplicationStartupAware&lt;/code&gt;&lt;/a&gt;：允许Bean获取应用程序启动信息。&lt;img src=&#34;https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-aware/spring-aware-applicationContextAware/README.md&#34;&gt;&lt;code&gt;ApplicationContextAware&lt;/code&gt;&lt;/a&gt;：允许Bean获取应用程序上下文。&lt;img src=&#34;https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-aware/spring-aware-importAware/README.md&#34;&gt;&lt;code&gt;ImportAware&lt;/code&gt;&lt;/a&gt;：允许被导入的配置类获取导入它的类的信息。&lt;img src=&#34;https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;核心注解&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-annotation/spring-annotation-configuration/README.md&#34;&gt;&lt;code&gt;@Configuration&lt;/code&gt;&lt;/a&gt;：声明类为配置类，定义Bean和Bean之间的依赖关系。&lt;img src=&#34;https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-%23FF3030&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-annotation/spring-annotation-componentScan/README.md&#34;&gt;&lt;code&gt;@ComponentScan&lt;/code&gt;&lt;/a&gt;：启用组件扫描，自动发现并注册标记为组件的类。&lt;img src=&#34;https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-%23FF3030&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-annotation/spring-annotation-bean/README.md&#34;&gt;&lt;code&gt;@Bean&lt;/code&gt;&lt;/a&gt;：在配置类中声明方法，返回Bean实例。&lt;img src=&#34;https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-%23FF3030&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-annotation/spring-annotation-import/README.md&#34;&gt;&lt;code&gt;@Import&lt;/code&gt;&lt;/a&gt;：引入其他配置类，将其Bean定义合并到当前容器。&lt;img src=&#34;https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-%23FF3030&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-annotation/spring-annotation-propertySource/README.md&#34;&gt;&lt;code&gt;@PropertySource&lt;/code&gt;&lt;/a&gt;：指定属性文件，加载外部配置到环境中。&lt;img src=&#34;https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-%23FF3030&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-annotation/spring-annotation-dependsOn/README.md&#34;&gt;&lt;code&gt;@DependsOn&lt;/code&gt;&lt;/a&gt;：指定Bean的依赖顺序，确保特定Bean在其他Bean之前初始化。&lt;img src=&#34;https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-%23FF3030&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-annotation/spring-annotation-conditional/README.md&#34;&gt;&lt;code&gt;@Conditional&lt;/code&gt;&lt;/a&gt;：根据条件决定是否创建Bean。&lt;img src=&#34;https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-%23FF3030&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-annotation/spring-annotation-lazy/README.md&#34;&gt;&lt;code&gt;@Lazy&lt;/code&gt;&lt;/a&gt;：指定Bean的延迟初始化，只有在首次使用时才创建。&lt;img src=&#34;https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-%23FF3030&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-annotation/spring-annotation-value/README.md&#34;&gt;&lt;code&gt;@Value&lt;/code&gt;&lt;/a&gt;：注入简单值或表达式到Bean的字段或方法参数。&lt;img src=&#34;https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-%23FF3030&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-annotation/spring-annotation-autowired/README.md&#34;&gt;&lt;code&gt;@Autowired&lt;/code&gt;&lt;/a&gt;：自动装配Bean依赖。&lt;img src=&#34;https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-%23FF3030&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;@Primary&lt;/code&gt;：指定在多个候选Bean中优先选择的首选Bean。&lt;img src=&#34;https://img.shields.io/badge/%E5%8D%B3%E5%B0%86%E6%9B%B4%E6%96%B0-339933&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;@Description&lt;/code&gt;：为Bean提供描述性信息。&lt;img src=&#34;https://img.shields.io/badge/%E5%8D%B3%E5%B0%86%E6%9B%B4%E6%96%B0-339933&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;@Role&lt;/code&gt;：为Bean提供角色提示，用于区分相似类型的Bean。&lt;img src=&#34;https://img.shields.io/badge/%E5%8D%B3%E5%B0%86%E6%9B%B4%E6%96%B0-339933&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;@Indexed&lt;/code&gt;： 标记Bean用于索引。&lt;img src=&#34;https://img.shields.io/badge/%E5%8D%B3%E5%B0%86%E6%9B%B4%E6%96%B0-339933&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;@Order&lt;/code&gt;：指定Bean的加载顺序。&lt;img src=&#34;https://img.shields.io/badge/%E5%8D%B3%E5%B0%86%E6%9B%B4%E6%96%B0-339933&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;JSR规范&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-jsr/spring-jsr330-inject/README.md&#34;&gt;&lt;code&gt;@Inject&lt;/code&gt;&lt;/a&gt;：JSR-330标准的依赖注入注解。&lt;img src=&#34;https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-jsr/spring-jsr330-named/README.md&#34;&gt;&lt;code&gt;@Named&lt;/code&gt;&lt;/a&gt;：JSR-330标准的命名注解。&lt;img src=&#34;https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-jsr/spring-jsr250-resource/README.md&#34;&gt;&lt;code&gt;@Resource&lt;/code&gt;&lt;/a&gt;：Java EE标准的资源注入注解。&lt;img src=&#34;https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-jsr/spring-jsr330-qualifier/README.md&#34;&gt;&lt;code&gt;@Qualifier&lt;/code&gt;&lt;/a&gt;：用于限定注入的Bean。&lt;img src=&#34;https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-jsr/spring-jsr330-scope/README.md&#34;&gt;&lt;code&gt;@Scope&lt;/code&gt;&lt;/a&gt;：指定Bean的作用域。&lt;img src=&#34;https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-jsr/spring-jsr330-singleton/README.md&#34;&gt;&lt;code&gt;@Singleton&lt;/code&gt;&lt;/a&gt;：指定Bean为单例。&lt;img src=&#34;https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-jsr/spring-jsr250-postConstruct/README.md&#34;&gt;&lt;code&gt;@PostConstruct&lt;/code&gt;&lt;/a&gt;：指定初始化方法。&lt;img src=&#34;https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-jsr/spring-jsr250-preDestroy/README.md&#34;&gt;&lt;code&gt;@PreDestroy&lt;/code&gt;&lt;/a&gt;：指定销毁方法。&lt;img src=&#34;https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/spring-jsr/spring-jsr330-provider/README.md&#34;&gt;&lt;code&gt;Provider&lt;/code&gt;&lt;/a&gt;：Java标准库提供的通用Bean工厂接口。&lt;img src=&#34;https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;💬与我联系&lt;/h2&gt; &#xA;&lt;p&gt;✉️ &lt;a href=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/xuchengshengsuper@163.com&#34;&gt;Email&lt;/a&gt; | 💬 &lt;a href=&#34;https://github.com/xuchengsheng/spring-reading/issues&#34;&gt;Issue&lt;/a&gt; | 🌐 &lt;a href=&#34;https://blog.csdn.net/duzhuang2399?type=blog&#34;&gt;CSDN&lt;/a&gt; Me about everything!&lt;/p&gt; &#xA;&lt;h2&gt;⛵欢迎贡献！&lt;/h2&gt; &#xA;&lt;p&gt;如果你发现任何错误🔍或者有改进建议🛠️，欢迎提交 issue 或者 pull request。你的反馈📢对于我非常宝贵💎！&lt;/p&gt; &#xA;&lt;h2&gt;🔄持续更新中&lt;/h2&gt; &#xA;&lt;p&gt;为了给大家提供最新🌱、最有价值的内容💼，我会坚持每天更新这个仓库⏳。每一天，你都可以期待看到一些新的内容或者对已有内容的改进✨。如果你有任何建议或反馈📣，欢迎随时联系我📞。我非常珍视每一个反馈💌，因为这是我持续改进的动力🚀。&lt;/p&gt; &#xA;&lt;h2&gt;💻我的 GitHub 统计&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#xuchengsheng/spring-reading&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=xuchengsheng/spring-reading&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🍱请我吃盒饭？&lt;/h2&gt; &#xA;&lt;p&gt;作者晚上还要写博客✍️,平时还需要工作💼,如果帮到了你可以请作者吃个盒饭🥡&lt;/p&gt; &#xA;&lt;div&gt; &#xA; &lt;img alt=&#34;logo&#34; src=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/image/WeChatPay.png&#34; style=&#34;width: 370px;height: 400px&#34;&gt; &#xA; &lt;img alt=&#34;logo&#34; src=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/image/Alipay.png&#34; style=&#34;width: 370px;height: 400px&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;👥加入我们&lt;/h2&gt; &#xA;&lt;p&gt;📢 想要一起加入我们的精彩微信群吗？跟着以下简单步骤：&lt;/p&gt; &#xA;&lt;p&gt;1️⃣ &lt;strong&gt;扫描我的二维码&lt;/strong&gt;：使用微信的扫一扫功能，扫描下方的二维码，将我添加为你的好友。&lt;/p&gt; &#xA;&lt;div&gt; &#xA; &lt;img alt=&#34;logo&#34; src=&#34;https://raw.githubusercontent.com/xuchengsheng/spring-reading/master/image/wechat-group.jpg&#34; style=&#34;width: 344px;height: 483px&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;2️⃣ &lt;strong&gt;等待好友请求被接受&lt;/strong&gt;：一旦你的好友请求被接受，你将收到一份群组邀请。&lt;/p&gt; &#xA;&lt;p&gt;3️⃣ &lt;strong&gt;点击邀请链接&lt;/strong&gt;：打开邀请链接，立即加入我们的精彩群组！&lt;/p&gt; &#xA;&lt;p&gt;4️⃣ &lt;strong&gt;尽情参与和分享&lt;/strong&gt;：在群组中，你将有机会与其他成员分享观点、经验和信息。我们热切期待你的参与！&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>spring-projects/spring-ai</title>
    <updated>2024-01-01T02:11:14Z</updated>
    <id>tag:github.com,2024-01-01:/spring-projects/spring-ai</id>
    <link href="https://github.com/spring-projects/spring-ai" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Application Framework for AI Engineering&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Spring AI &lt;a href=&#34;https://github.com/spring-projects/spring-ai/actions/workflows/continuous-integration.yml&#34;&gt;&lt;img src=&#34;https://github.com/spring-projects/spring-ai/actions/workflows/continuous-integration.yml/badge.svg?sanitize=true&#34; alt=&#34;build status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to the Spring AI project!&lt;/p&gt; &#xA;&lt;p&gt;The Spring AI project provides a Spring-friendly API and abstractions for developing AI applications.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s make your &lt;code&gt;@Beans&lt;/code&gt; intelligent!&lt;/p&gt; &#xA;&lt;h2&gt;Project Update&lt;/h2&gt; &#xA;&lt;p&gt;&lt;span&gt;🥳&lt;/span&gt; The Spring AI project has graduated out of the repository!&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Breaking Changes&lt;/h3&gt; &#xA;&lt;p&gt;December 20, 2023 Update&lt;/p&gt; &#xA;&lt;p&gt;Refactor the Ollama client and related classes and package names&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Replace the org.springframework.ai.ollama.client.OllamaClient by org.springframework.ai.ollama.OllamaChatClient.&lt;/li&gt; &#xA; &lt;li&gt;The OllamaChatClient method signatures have changed.&lt;/li&gt; &#xA; &lt;li&gt;Rename the org.springframework.ai.autoconfigure.ollama.OllamaProperties into org.springframework.ai.autoconfigure.ollama.OllamaChatProperties and change the suffix to: &lt;code&gt;spring.ai.ollama.chat&lt;/code&gt;. Some of the properties have changed as well.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;December 19, 2023 Update&lt;/p&gt; &#xA;&lt;p&gt;Renaming of AiClient and related classes and packagenames&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Rename AiClient to ChatClient&lt;/li&gt; &#xA; &lt;li&gt;Rename AiResponse to ChatResponse&lt;/li&gt; &#xA; &lt;li&gt;Rename AiStreamClient to StreamingChatClient&lt;/li&gt; &#xA; &lt;li&gt;Rename package org.sf.ai.client to org.sf.ai.chat&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Rename artifact ID of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;transformers-embedding&lt;/code&gt; to &lt;code&gt;spring-ai-transformers&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Moved Maven modules from top level directoryand &lt;code&gt;embedding-clients&lt;/code&gt; subdirectory to all be under a single &lt;code&gt;models&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;December 1, 2023&lt;/p&gt; &#xA;&lt;p&gt;We are transitioning the project&#39;s Group ID:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;FROM&lt;/strong&gt;: &lt;code&gt;org.springframework.experimental.ai&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;TO&lt;/strong&gt;: &lt;code&gt;org.springframework.ai&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Artifacts will still be hosted in the snapshot repository as shown below.&lt;/p&gt; &#xA;&lt;p&gt;The main branch will move to the version &lt;code&gt;0.8.0-SNAPSHOT&lt;/code&gt;. It will be unstable for a week or two. Please use the 0.7.1-SNAPSHOT if you don&#39;t want to be on the bleeding edge.&lt;/p&gt; &#xA;&lt;p&gt;You can access &lt;code&gt;0.7.1-SNAPSHOT&lt;/code&gt; artifacts as before and still access &lt;a href=&#34;https://markpollack.github.io/spring-ai-0.7.1/&#34;&gt;0.7.1-SNAPSHOT Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Cloning the repo&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains &lt;a href=&#34;https://github.com/spring-projects/spring-ai/tree/main/models/spring-ai-transformers/src/main/resources/onnx/all-MiniLM-L6-v2&#34;&gt;large model files&lt;/a&gt;. To clone it you have to either:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ignore the large files (won&#39;t affect the spring-ai behaviour) : &lt;code&gt;GIT_LFS_SKIP_SMUDGE=1 git clone git@github.com:spring-projects/spring-ai.git&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Or install the &lt;a href=&#34;https://git-lfs.com/&#34;&gt;Git Large File Storage&lt;/a&gt; before cloning the repo.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Project Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.spring.io/spring-ai/reference/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/spring-projects/spring-ai/issues&#34;&gt;Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/spring-projects/spring-ai/discussions&#34;&gt;Discussions&lt;/a&gt; - Go here if you have a question, suggestion, or feedback!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.spring.io/spring-ai/docs/current-SNAPSHOT/&#34;&gt;JavaDocs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Educational Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Follow the &lt;a href=&#34;https://raw.githubusercontent.com/spring-projects/spring-ai/main/#workshop&#34;&gt;Workshop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Overview of Spring AI @ Devoxx 2023 &lt;br&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=7OY9fKVxAFQ&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/7OY9fKVxAFQ/default.jpg&#34; alt=&#34;Watch the Devoxx 2023 video&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Introducing Spring AI - Add Generative AI to your Spring Applications &lt;br&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=1g_wuincUdU&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/1g_wuincUdU/default.jpg&#34; alt=&#34;Watch the video&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;The Spring AI project provides artifacts in the Spring Milestone Repository. You will need to add configuration to add a reference to the Spring Milestone repository in your build file. For example, in maven, add the following repository definition.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;  &amp;lt;repositories&amp;gt;&#xA;    &amp;lt;repository&amp;gt;&#xA;      &amp;lt;id&amp;gt;spring-snapshots&amp;lt;/id&amp;gt;&#xA;      &amp;lt;name&amp;gt;Spring Snapshots&amp;lt;/name&amp;gt;&#xA;      &amp;lt;url&amp;gt;https://repo.spring.io/snapshot&amp;lt;/url&amp;gt;&#xA;      &amp;lt;releases&amp;gt;&#xA;        &amp;lt;enabled&amp;gt;false&amp;lt;/enabled&amp;gt;&#xA;      &amp;lt;/releases&amp;gt;&#xA;    &amp;lt;/repository&amp;gt;&#xA;  &amp;lt;/repositories&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And the Spring Boot Starter depending on if you are using Azure Open AI or Open AI.&lt;/p&gt; &#xA;&lt;h3&gt;Main Branch&lt;/h3&gt; &#xA;&lt;p&gt;The main branch has move to version 0.8.0-SNAPSHOT. It will be unstable for a week or two. Please use the 0.7.1-SNAPSHOT if you don&#39;t want to be on the bleeding edge.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Azure OpenAI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;dependency&amp;gt;&#xA;        &amp;lt;groupId&amp;gt;org.springframework.ai&amp;lt;/groupId&amp;gt;&#xA;        &amp;lt;artifactId&amp;gt;spring-ai-azure-openai-spring-boot-starter&amp;lt;/artifactId&amp;gt;&#xA;        &amp;lt;version&amp;gt;0.8.0-SNAPSHOT&amp;lt;/version&amp;gt;&#xA;    &amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OpenAI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;dependency&amp;gt;&#xA;        &amp;lt;groupId&amp;gt;org.springframework.ai&amp;lt;/groupId&amp;gt;&#xA;        &amp;lt;artifactId&amp;gt;spring-ai-openai-spring-boot-starter&amp;lt;/artifactId&amp;gt;&#xA;        &amp;lt;version&amp;gt;0.8.0-SNAPSHOT&amp;lt;/version&amp;gt;&#xA;    &amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;0.7.1-SNAPSHOT&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Azure OpenAI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;dependency&amp;gt;&#xA;        &amp;lt;groupId&amp;gt;org.springframework.ai&amp;lt;/groupId&amp;gt;&#xA;        &amp;lt;artifactId&amp;gt;spring-ai-azure-openai-spring-boot-starter&amp;lt;/artifactId&amp;gt;&#xA;        &amp;lt;version&amp;gt;0.7.1-SNAPSHOT&amp;lt;/version&amp;gt;&#xA;    &amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OpenAI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;dependency&amp;gt;&#xA;        &amp;lt;groupId&amp;gt;org.springframework.ai&amp;lt;/groupId&amp;gt;&#xA;        &amp;lt;artifactId&amp;gt;spring-ai-openai-spring-boot-starter&amp;lt;/artifactId&amp;gt;&#xA;        &amp;lt;version&amp;gt;0.7.1-SNAPSHOT&amp;lt;/version&amp;gt;&#xA;    &amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Vector Stores&lt;/h3&gt; &#xA;&lt;p&gt;Following vector stores are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Azure Vector Store&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;dependency&amp;gt;&#xA;        &amp;lt;groupId&amp;gt;org.springframework.ai&amp;lt;/groupId&amp;gt;&#xA;        &amp;lt;artifactId&amp;gt;spring-ai-azure-vector-store-spring-boot-starter&amp;lt;/artifactId&amp;gt;&#xA;        &amp;lt;version&amp;gt;0.8.0-SNAPSHOT&amp;lt;/version&amp;gt;&#xA;    &amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chroma&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;dependency&amp;gt;&#xA;        &amp;lt;groupId&amp;gt;org.springframework.ai&amp;lt;/groupId&amp;gt;&#xA;        &amp;lt;artifactId&amp;gt;spring-ai-chroma-store-spring-boot-starter&amp;lt;/artifactId&amp;gt;&#xA;        &amp;lt;version&amp;gt;0.8.0-SNAPSHOT&amp;lt;/version&amp;gt;&#xA;    &amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Milvus&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;dependency&amp;gt;&#xA;        &amp;lt;groupId&amp;gt;org.springframework.ai&amp;lt;/groupId&amp;gt;&#xA;        &amp;lt;artifactId&amp;gt;spring-ai-milvus-store-spring-boot-starter&amp;lt;/artifactId&amp;gt;&#xA;        &amp;lt;version&amp;gt;0.8.0-SNAPSHOT&amp;lt;/version&amp;gt;&#xA;    &amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PGVector&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;dependency&amp;gt;&#xA;        &amp;lt;groupId&amp;gt;org.springframework.ai&amp;lt;/groupId&amp;gt;&#xA;        &amp;lt;artifactId&amp;gt;spring-ai-pgvector-store-spring-boot-starter&amp;lt;/artifactId&amp;gt;&#xA;        &amp;lt;version&amp;gt;0.8.0-SNAPSHOT&amp;lt;/version&amp;gt;&#xA;    &amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pinecone&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;dependency&amp;gt;&#xA;        &amp;lt;groupId&amp;gt;org.springframework.ai&amp;lt;/groupId&amp;gt;&#xA;        &amp;lt;artifactId&amp;gt;spring-ai-pinecone-store-spring-boot-starter&amp;lt;/artifactId&amp;gt;&#xA;        &amp;lt;version&amp;gt;0.8.0-SNAPSHOT&amp;lt;/version&amp;gt;&#xA;    &amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Weaviate&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;dependency&amp;gt;&#xA;        &amp;lt;groupId&amp;gt;org.springframework.ai&amp;lt;/groupId&amp;gt;&#xA;        &amp;lt;artifactId&amp;gt;spring-ai-weaviate-store-spring-boot-starter&amp;lt;/artifactId&amp;gt;&#xA;        &amp;lt;version&amp;gt;0.8.0-SNAPSHOT&amp;lt;/version&amp;gt;&#xA;    &amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neo4j&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;dependency&amp;gt;&#xA;        &amp;lt;groupId&amp;gt;org.springframework.ai&amp;lt;/groupId&amp;gt; &#xA;        &amp;lt;artifactId&amp;gt;spring-ai-neo4j-store-spring-boot-starter&amp;lt;/artifactId&amp;gt;&#xA;        &amp;lt;version&amp;gt;0.8.0-SNAPSHOT&amp;lt;/version&amp;gt;&#xA;    &amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Workshop&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can try out the features of Spring AI by following the &lt;a href=&#34;https://github.com/Azure-Samples/spring-ai-azure-workshop&#34;&gt;workshop material for Azure OpenAI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;To use the workshop material with OpenAI (not Azure&#39;s offering) you will need to &lt;em&gt;replace&lt;/em&gt; the Azure Open AI Boot Starter in the &lt;code&gt;pom.xml&lt;/code&gt; with the Open AI Boot Starter.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;dependency&amp;gt;&#xA;        &amp;lt;groupId&amp;gt;org.springframework.ai&amp;lt;/groupId&amp;gt;&#xA;        &amp;lt;artifactId&amp;gt;spring-ai-openai-spring-boot-starter&amp;lt;/artifactId&amp;gt;&#xA;        &amp;lt;version&amp;gt;0.7.1-SNAPSHOT&amp;lt;/version&amp;gt;&#xA;    &amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Despite the extensive history of AI, Java&#39;s role in this domain has been relatively minor. This is mainly due to the historical reliance on efficient algorithms developed in languages such as C/C++, with Python serving as a bridge to access these libraries. The majority of ML/AI tools were built around the Python ecosystem. However, recent progress in Generative AI, spurred by innovations like OpenAI&#39;s ChatGPT, has popularized the interaction with pre-trained models via HTTP. This eliminates much of the dependency on C/C++/Python libraries and opens the door to the use of programming languages such as Java.&lt;/p&gt; &#xA;&lt;p&gt;The Python libraries &lt;a href=&#34;https://docs.langchain.com/docs/&#34;&gt;LangChain&lt;/a&gt; and &lt;a href=&#34;https://gpt-index.readthedocs.io/en/latest/getting_started/concepts.html&#34;&gt;LlamaIndex&lt;/a&gt; have become popular to implement Generative AI solutions and can be implemented in other programming languages. These Python libraries share foundational themes with Spring projects, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Portable Service Abstractions&lt;/li&gt; &#xA; &lt;li&gt;Modularity&lt;/li&gt; &#xA; &lt;li&gt;Extensibility&lt;/li&gt; &#xA; &lt;li&gt;Reduction of boilerplate code&lt;/li&gt; &#xA; &lt;li&gt;Integration with diverse data sources&lt;/li&gt; &#xA; &lt;li&gt;Prebuilt solutions for common use cases&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Taking inspiration from these libraries, the Spring AI project aims to provide a similar experience for Spring developers in the AI domain.&lt;/p&gt; &#xA;&lt;p&gt;Note, that the Spring AI API is not a direct port of either LangChain or LlamaIndex. You will see significant differences in the API if you are familiar with those two projects, though concepts and ideas are fairly portable.&lt;/p&gt; &#xA;&lt;h2&gt;Feature Overview&lt;/h2&gt; &#xA;&lt;p&gt;This is a high level feature overview. The features that are implemented lay the foundation, with subsequent more complex features building upon them.&lt;/p&gt; &#xA;&lt;p&gt;You can find more details in the &lt;a href=&#34;https://docs.spring.io/spring-ai/reference/&#34;&gt;Reference Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Interacting with AI Models&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;AI Client:&lt;/strong&gt; A foundational feature of Spring AI is a standardized client API for interfacing with generative AI models. With this common API, you can initially target g &lt;a href=&#34;https://platform.openai.com/docs/api-reference/chat&#34;&gt;OpenAI&#39;s Chat endpoint&lt;/a&gt; and easily swap about the implementation to use other platforms, such as &lt;a href=&#34;https://huggingface.co/inference-endpoints&#34;&gt;HuggingFace&#39;s Inference Endpoints&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Dive deeper into &lt;a href=&#34;https://docs.spring.io/spring-ai/reference/concepts.html#_models&#34;&gt;Models&lt;/a&gt;. in our concept guide. For usage details, consult the &lt;a href=&#34;https://docs.spring.io/spring-ai/reference/api/aiclient.html&#34;&gt;ChatClient API guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Prompts:&lt;/strong&gt; Central to AI model interaction is the Prompt, which provides specific instructions for the AI to act upon. Crafting an effective Prompt is both an art and science, giving rise to the discipline of &#34;Prompt Engineering&#34;. These prompts often leverage a templating engine for easy data substitution within predefined text using placeholders.&lt;/p&gt; &#xA;&lt;p&gt;Explore more on &lt;a href=&#34;https://docs.spring.io/spring-ai/reference/concepts.html#_prompts&#34;&gt;Prompts&lt;/a&gt; in our concept guide. To learn about the Prompt class, refer to the &lt;a href=&#34;https://docs.spring.io/spring-ai/reference/api/prompt.html&#34;&gt;Prompt API guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Prompt Templates:&lt;/strong&gt; Prompt Templates support the creation of prompts, particularly when a Template Engine is employed.&lt;/p&gt; &#xA;&lt;p&gt;Delve into PromptTemplates in our &lt;a href=&#34;https://docs.spring.io/spring-ai/reference/concepts.html#_prompt_templates&#34;&gt;concept guide&lt;/a&gt;. For a hands-on guide to PromptTemplate, see the &lt;a href=&#34;https://docs.spring.io/spring-ai/reference/api/prompt-template.html&#34;&gt;PromptTemplate API guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output Parsers:&lt;/strong&gt; AI model outputs often come as raw &lt;code&gt;java.lang.String&lt;/code&gt; values. Output Parsers restructure these raw strings into more programmer-friendly formats, such as CSV or JSON.&lt;/p&gt; &#xA;&lt;p&gt;Get insights on Output Parsers in our &lt;a href=&#34;https://docs.spring.io/spring-ai/reference/concepts.html#_output_parsing&#34;&gt;concept guide&lt;/a&gt;.. For implementation details, visit the &lt;a href=&#34;https://docs.spring.io/spring-ai/reference/api/output-parser.html&#34;&gt;OutputParser API guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Incorporating your data&lt;/h3&gt; &#xA;&lt;p&gt;Incorporating proprietary data into Generative AI without retraining the model has been a breakthrough. Retraining models, especially those with billions of parameters, is challenging due to the specialized hardware required. The &#39;In-context&#39; learning technique provides a simpler method to infuse your pre-trained model with data, whether from text files, HTML, or database results. The right techniques are critical for developing successful solutions.&lt;/p&gt; &#xA;&lt;h4&gt;Retrieval Augmented Generation&lt;/h4&gt; &#xA;&lt;p&gt;Retrieval Augmented Generation, or RAG for short, is a pattern that enables you to bring your data to pre-trained models. RAG excels in the &#39;query over your docs&#39; use-case.&lt;/p&gt; &#xA;&lt;p&gt;Learn more about &lt;a href=&#34;https://docs.spring.io/spring-ai/reference/concepts.html#_retrieval_augmented_generation&#34;&gt;Retrieval Augmented Generation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Bringing your data to the model follows an Extract, Transform, and Load (ETL) pattern. The subsequent classes and interfaces support RAG&#39;s data preparation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Documents:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;Document&lt;/code&gt; class encapsulates your data, including text and metadata, for the AI model. While a Document can represent extensive content, such as an entire file, the RAG approach segments content into smaller pieces for inclusion in the prompt. The ETL process uses the interfaces &lt;code&gt;DocumentReader&lt;/code&gt;, &lt;code&gt;DocumentTransformer&lt;/code&gt;, and &lt;code&gt;DocumentWriter&lt;/code&gt;, ending with data storage in a Vector Database. This database later discerns the pieces of data that are pertinent to a user&#39;s query.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Document Readers:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Document Readers produce a &lt;code&gt;List&amp;lt;Document&amp;gt;&lt;/code&gt; from diverse sources like PDFs, Markdown files, and Word documents. Given that many sources are unstructured, Document Readers often segment based on content semantics, avoiding splits within tables or code sections. After the initial creation of the &lt;code&gt;List&amp;lt;Document&amp;gt;&lt;/code&gt;, the data flows through transformers for further refinement.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Document Transformers:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Transformers further modify the &lt;code&gt;List&amp;lt;Document&amp;gt;&lt;/code&gt; by eliminating superfluous data, like PDF margins, or appending metadata (e.g., primary keywords or summaries). Another critical transformation is subdividing documents to fit within the AI model&#39;s token constraints. Each model has a context-window indicating its input and output data limits. Typically, one token equates to about 0.75 words. For instance, in model names like gpt-4-32k, &#34;32K&#34; signifies the token count.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Document Writers:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The final ETL step within RAG involves committing the data segments to a Vector Database. Though the &lt;code&gt;DocumentWriter&lt;/code&gt; interface isn&#39;t exclusively for Vector Database writing, it the main type of implementation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Vector Stores:&lt;/strong&gt; Vector Databases are instrumental in incorporating your data with AI models. They ascertain which document sections the AI should use for generating responses. Examples of Vector Databases include Chroma, Postgres, Pinecone, Weaviate, Mongo Atlas, and Redis. Spring AI&#39;s &lt;code&gt;VectorStore&lt;/code&gt; abstraction permits effortless transitions between database implementations.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;To build with only unit tests&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./mvnw clean package&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build including integration tests. Set API key environment variables for OpenAI and Azure OpenAI before running.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./mvnw clean verify -Pintegration-tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run a specific integration test allowing for up to two attempts to succeed. This is useful when a hosted service is not reliable or times out.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./mvnw -pl vector-stores/spring-ai-pgvector-store -Pintegration-tests -Dfailsafe.rerunFailingTestsCount=2 -Dit.test=PgVectorStoreIT verify&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build the docs&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./mvnw -pl spring-ai-docs antora&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The docs are then in the directory &lt;code&gt;spring-ai-docs/target/antora/site/index.html&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
</feed>