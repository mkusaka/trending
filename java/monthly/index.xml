<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Java Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-01T01:52:40Z</updated>
  <subtitle>Monthly Trending of Java in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>apache/iotdb</title>
    <updated>2023-01-01T01:52:40Z</updated>
    <id>tag:github.com,2023-01-01:/apache/iotdb</id>
    <link href="https://github.com/apache/iotdb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Apache IoTDB&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/iotdb/master/README.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/apache/iotdb/master/README_ZH.md&#34;&gt;中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;IoTDB&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apache/iotdb/actions/workflows/main-unix.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/iotdb/actions/workflows/main-unix.yml/badge.svg?sanitize=true&#34; alt=&#34;Main Mac and Linux&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/iotdb/actions/workflows/main-win.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/iotdb/actions/workflows/main-win.yml/badge.svg?sanitize=true&#34; alt=&#34;Main Win&#34;&gt;&lt;/a&gt;&#xA; &lt;!--[![coveralls](https://coveralls.io/repos/github/apache/iotdb/badge.svg?branch=master)](https://coveralls.io/repos/github/apache/iotdb/badge.svg?branch=master)--&gt; &lt;a href=&#34;https://github.com/apache/iotdb/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/apache/iotdb.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%202-4EB1BA.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github-size-badge.herokuapp.com/apache/iotdb.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/apache/iotdb/total.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/platform-win%20%7C%20macos%20%7C%20linux-yellow.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/java--language-1.8%20%7C%2011%20%7C%2017-blue.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://lgtm.com/projects/g/apache/iotdb/context:java&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/grade/java/g/apache/iotdb.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;Language grade: Java&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://iotdb.apache.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/website-up-down-green-red/https/shields.io.svg?label=iotdb-website&#34; alt=&#34;IoTDB Website&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://search.maven.org/#search%7Cgav%7C1%7Cg:%22org.apache.iotdb%22&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/org.apache.iotdb/iotdb-parent/badge.svg?sanitize=true&#34; alt=&#34;Maven Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitpod.io/#https://github.com/apache/iotdb&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod&#34; alt=&#34;Gitpod Ready-to-Code&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://join.slack.com/t/apacheiotdb/shared_invite/zt-qvso1nj8-7715TpySZtZqmyG5qXQwpg&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/slack-join_chat-white.svg?logo=slack&amp;amp;style=social&#34; alt=&#34;Slack Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Overview&lt;/h1&gt; &#xA;&lt;p&gt;IoTDB (Internet of Things Database) is a data management system for time series data, which provides users with specific services including data collection, storage and analysis. Due to its light weight structure, high performance and usable features, together with its seamless integration with the Hadoop and Spark ecology, IoTDB meets the requirements of massive dataset storage, high throughput data input, and complex data analysis in the industrial IoT field.&lt;/p&gt; &#xA;&lt;h1&gt;Main Features&lt;/h1&gt; &#xA;&lt;p&gt;Main features of IoTDB are as follows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Flexible deployment strategy. IoTDB provides users a one-click installation tool on either the cloud platform or the terminal devices, and a data synchronization tool bridging the data on cloud platform and terminals.&lt;/li&gt; &#xA; &lt;li&gt;Low cost on hardware. IoTDB can reach a high compression ratio of disk storage.&lt;/li&gt; &#xA; &lt;li&gt;Efficient directory structure. IoTDB supports efficient organization for complex time series data structures from intelligent networking devices, organization for time series data from devices of the same type, and fuzzy searching strategy for massive and complex directory of time series data.&lt;/li&gt; &#xA; &lt;li&gt;High-throughput read and write. IoTDB supports millions of low-power devices&#39; strong connection data access, high-speed data read and write for intelligent networking devices and mixed devices mentioned above.&lt;/li&gt; &#xA; &lt;li&gt;Rich query semantics. IoTDB supports time alignment for time series data across devices and measurements, computation in time series field (frequency domain transformation) and rich aggregation function support in time dimension.&lt;/li&gt; &#xA; &lt;li&gt;Easy to get started. IoTDB supports SQL-Like language, JDBC standard API and import/export tools which is easy to use.&lt;/li&gt; &#xA; &lt;li&gt;Seamless integration with state-of-the-practice Open Source Ecosystem. IoTDB supports analysis ecosystems such as, Hadoop, Spark, and visualization tool, such as, Grafana.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For the latest information about IoTDB, please visit &lt;a href=&#34;https://iotdb.apache.org/&#34;&gt;IoTDB official website&lt;/a&gt;. If you encounter any problems or identify any bugs while using IoTDB, please report an issue in &lt;a href=&#34;https://issues.apache.org/jira/projects/IOTDB/issues&#34;&gt;jira&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!-- TOC --&gt; &#xA;&lt;h2&gt;Outline&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/iotdb/master/#iotdb&#34;&gt;IoTDB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/iotdb/master/#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/iotdb/master/#main-features&#34;&gt;Main Features&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/iotdb/master/#outline&#34;&gt;Outline&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/iotdb/master/#quick-start&#34;&gt;Quick Start&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/iotdb/master/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/iotdb/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/iotdb/master/#build-from-source&#34;&gt;Build from source&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/iotdb/master/#configurations&#34;&gt;Configurations&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/iotdb/master/#start&#34;&gt;Start&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/iotdb/master/#start-iotdb&#34;&gt;Start IoTDB&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/iotdb/master/#use-iotdb&#34;&gt;Use IoTDB&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/iotdb/master/#use-cli&#34;&gt;Use Cli&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/iotdb/master/#basic-commands-for-iotdb&#34;&gt;Basic commands for IoTDB&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/iotdb/master/#stop-iotdb&#34;&gt;Stop IoTDB&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/iotdb/master/#only-build-server&#34;&gt;Only build server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/iotdb/master/#only-build-cli&#34;&gt;Only build cli&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/iotdb/master/#usage-of-csv-import-and-export-tool&#34;&gt;Usage of CSV Import and Export Tool&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- /TOC --&gt; &#xA;&lt;h1&gt;Quick Start&lt;/h1&gt; &#xA;&lt;p&gt;This short guide will walk you through the basic process of using IoTDB. For a more detailed introduction, please visit our website&#39;s &lt;a href=&#34;https://iotdb.apache.org/UserGuide/Master/QuickStart/QuickStart.html&#34;&gt;User Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;To use IoTDB, you need to have:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Java &amp;gt;= 1.8 (1.8, 11 to 17 are verified. Please make sure the environment path has been set accordingly).&lt;/li&gt; &#xA; &lt;li&gt;Maven &amp;gt;= 3.6 (If you want to compile and install IoTDB from source code).&lt;/li&gt; &#xA; &lt;li&gt;Set the max open files num as 65535 to avoid &#34;too many open files&#34; error.&lt;/li&gt; &#xA; &lt;li&gt;(Optional) Set the somaxconn as 65535 to avoid &#34;connection reset&#34; error when the system is under high load. &lt;pre&gt;&lt;code&gt;# Linux&#xA;&amp;gt; sudo sysctl -w net.core.somaxconn=65535&#xA;&#xA;# FreeBSD or Darwin&#xA;&amp;gt; sudo sysctl -w kern.ipc.somaxconn=65535&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;IoTDB provides three installation methods, you can refer to the following suggestions, choose the one fits you best:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation from source code. If you need to modify the code yourself, you can use this method.&lt;/li&gt; &#xA; &lt;li&gt;Installation from binary files. Download the binary files from the official website. This is the recommended method, in which you will get a binary released package which is out-of-the-box.&lt;/li&gt; &#xA; &lt;li&gt;Using Docker：The path to the dockerfile is &lt;a href=&#34;https://github.com/apache/iotdb/tree/master/docker/src/main&#34;&gt;https://github.com/apache/iotdb/tree/master/docker/src/main&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here in the Quick Start, we give a brief introduction of using source code to install IoTDB. For further information, please refer to &lt;a href=&#34;https://iotdb.apache.org/UserGuide/Master/QuickStart/QuickStart.html&#34;&gt;User Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Build from source&lt;/h2&gt; &#xA;&lt;h3&gt;Prepare Thrift compiler&lt;/h3&gt; &#xA;&lt;p&gt;Skip this chapter if you are using Windows.&lt;/p&gt; &#xA;&lt;p&gt;As we use Thrift for our RPC module (communication and protocol definition), we involve Thrift during the compilation, so Thrift compiler 0.13.0 (or higher) is required to generate Thrift Java code. Thrift officially provides binary compiler for Windows, but unfortunately, they do not provide that for Unix OSs.&lt;/p&gt; &#xA;&lt;p&gt;If you have permission to install new softwares, use &lt;code&gt;apt install&lt;/code&gt; or &lt;code&gt;yum install&lt;/code&gt; or &lt;code&gt;brew install&lt;/code&gt; to install the Thrift compiler (If you already have installed the thrift compiler, skip this step). Then, you may add the following parameter when running Maven: &lt;code&gt;-Dthrift.download-url=http://apache.org/licenses/LICENSE-2.0.txt -Dthrift.exec.absolute.path=&amp;lt;YOUR LOCAL THRIFT BINARY FILE&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If not, then you have to compile the thrift compiler, and it requires you install a boost library first. Therefore, we compiled a Unix compiler ourselves and put it onto GitHub, and with the help of a maven plugin, it will be downloaded automatically during compilation. This compiler works fine with gcc8 or later, Ubuntu MacOS, and CentOS, but previous versions and other OSs are not guaranteed.&lt;/p&gt; &#xA;&lt;p&gt;If you can not download the thrift compiler automatically because of network problem, you can download it yourself, and then either: rename your thrift file to &lt;code&gt;{project_root}\thrift\target\tools\thrift_0.12.0_0.13.0_linux.exe&lt;/code&gt;; or, add Maven commands: &lt;code&gt;-Dthrift.download-url=http://apache.org/licenses/LICENSE-2.0.txt -Dthrift.exec.absolute.path=&amp;lt;YOUR LOCAL THRIFT BINARY FILE&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Compile IoTDB&lt;/h3&gt; &#xA;&lt;p&gt;You can download the source code from:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/apache/iotdb.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default dev branch is the master branch, If you want to use a released version x.x.x:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git checkout vx.x.x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or checkout to the branch of a big version, e.g., the branch of 1.0 is rel/1.0&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git checkout rel/x.x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build IoTDB from source&lt;/h3&gt; &#xA;&lt;p&gt;Under the root path of iotdb:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; mvn clean package -pl distribution -am -DskipTests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After being built, the IoTDB distribution is located at the folder: &#34;distribution/target&#34;.&lt;/p&gt; &#xA;&lt;h3&gt;Only build cli&lt;/h3&gt; &#xA;&lt;p&gt;Under the root path of iotdb:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; mvn clean package -pl cli -am -DskipTests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After being built, the IoTDB cli is located at the folder &#34;cli/target&#34;.&lt;/p&gt; &#xA;&lt;h3&gt;Build Others&lt;/h3&gt; &#xA;&lt;p&gt;Using &lt;code&gt;-P compile-cpp&lt;/code&gt; for compiling cpp client (For more details, read client-cpp&#39;s Readme file.)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE: Directories &#34;&lt;code&gt;thrift/target/generated-sources/thrift&lt;/code&gt;&#34;, &#34;&lt;code&gt;thrift-sync/target/generated-sources/thrift&lt;/code&gt;&#34;, &#34;&lt;code&gt;thrift-cluster/target/generated-sources/thrift&lt;/code&gt;&#34;, &#34;&lt;code&gt;thrift-influxdb/target/generated-sources/thrift&lt;/code&gt;&#34; and &#34;&lt;code&gt;antlr/target/generated-sources/antlr4&lt;/code&gt;&#34; need to be added to sources roots to avoid compilation errors in the IDE.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;In IDEA, you just need to right click on the root project name and choose &#34;&lt;code&gt;Maven-&amp;gt;Reload Project&lt;/code&gt;&#34; after you run &lt;code&gt;mvn package&lt;/code&gt; successfully.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Configurations&lt;/h3&gt; &#xA;&lt;p&gt;configuration files are under &#34;conf&#34; folder&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;environment config module (&lt;code&gt;datanode-env.bat&lt;/code&gt;, &lt;code&gt;datanode-env.sh&lt;/code&gt;),&lt;/li&gt; &#xA; &lt;li&gt;system config module (&lt;code&gt;iotdb-datanode.properties&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;log config module (&lt;code&gt;logback.xml&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more information, please see &lt;a href=&#34;https://iotdb.apache.org/UserGuide/Master/Reference/Config-Manual.html&#34;&gt;Config Manual&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Start&lt;/h2&gt; &#xA;&lt;p&gt;You can go through the following steps to test the installation. If there is no error returned after execution, the installation is completed.&lt;/p&gt; &#xA;&lt;h3&gt;Start IoTDB&lt;/h3&gt; &#xA;&lt;p&gt;Users can start 1C1D IoTDB by the start-standalone script under the sbin folder.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Unix/OS X&#xA;&amp;gt; sbin/start-standalone.sh&#xA;&#xA;# Windows&#xA;&amp;gt; sbin\start-standalone.bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use IoTDB&lt;/h3&gt; &#xA;&lt;h4&gt;Use Cli&lt;/h4&gt; &#xA;&lt;p&gt;IoTDB offers different ways to interact with server, here we introduce the basic steps of using Cli tool to insert and query data.&lt;/p&gt; &#xA;&lt;p&gt;After installing IoTDB, there is a default user &#39;root&#39;, its default password is also &#39;root&#39;. Users can use this default user to login Cli to use IoTDB. The startup script of Cli is the start-cli script in the folder sbin. When executing the script, user should assign IP, PORT, USER_NAME and PASSWORD. The default parameters are &#34;-h 127.0.0.1 -p 6667 -u root -pw -root&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Here is the command for starting the Cli:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Unix/OS X&#xA;&amp;gt; sbin/start-cli.sh -h 127.0.0.1 -p 6667 -u root -pw root&#xA;&#xA;# Windows&#xA;&amp;gt; sbin\start-cli.bat -h 127.0.0.1 -p 6667 -u root -pw root&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The command line cli is interactive, so you should see the welcome logo and statements if everything is ready:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; _____       _________  ______   ______&#xA;|_   _|     |  _   _  ||_   _ `.|_   _ \&#xA;  | |   .--.|_/ | | \_|  | | `. \ | |_) |&#xA;  | | / .&#39;`\ \  | |      | |  | | |  __&#39;.&#xA; _| |_| \__. | _| |_    _| |_.&#39; /_| |__) |&#xA;|_____|&#39;.__.&#39; |_____|  |______.&#39;|_______/  version x.x.x&#xA;&#xA;&#xA;IoTDB&amp;gt; login successfully&#xA;IoTDB&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Basic commands for IoTDB&lt;/h4&gt; &#xA;&lt;p&gt;Now, let us introduce the way of creating timeseries, inserting data and querying data.&lt;/p&gt; &#xA;&lt;p&gt;The data in IoTDB is organized as timeseries. Each timeseries includes multiple data-time pairs, and is owned by a database. Before defining a timeseries, we should define a database using CREATE DATABASE first, and here is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;IoTDB&amp;gt; CREATE DATABSE root.ln&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can also use SHOW DATABASES to check the database being created:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;IoTDB&amp;gt; SHOW DATABASES&#xA;+-------------+&#xA;|     Database|&#xA;+-------------+&#xA;|      root.ln|&#xA;+-------------+&#xA;Total line number = 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After the database is set, we can use CREATE TIMESERIES to create a new timeseries. When creating a timeseries, we should define its data type and the encoding scheme. Here We create two timeseries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;IoTDB&amp;gt; CREATE TIMESERIES root.ln.wf01.wt01.status WITH DATATYPE=BOOLEAN, ENCODING=PLAIN&#xA;IoTDB&amp;gt; CREATE TIMESERIES root.ln.wf01.wt01.temperature WITH DATATYPE=FLOAT, ENCODING=RLE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to query the specific timeseries, we can use SHOW TIMESERIES &#xA; &lt;path&gt;&#xA;  . &#xA;  &lt;path&gt;&#xA;    represent the location of the timeseries. The default value is &#34;null&#34;, which queries all the timeseries in the system(the same as using &#34;SHOW TIMESERIES root&#34;). Here are some examples:&#xA;  &lt;/path&gt;&#xA; &lt;/path&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Querying all timeseries in the system:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;IoTDB&amp;gt; SHOW TIMESERIES&#xA;+-----------------------------+-----+-------------+--------+--------+-----------+----+----------+&#xA;|                   Timeseries|Alias|Database|DataType|Encoding|Compression|Tags|Attributes|&#xA;+-----------------------------+-----+-------------+--------+--------+-----------+----+----------+&#xA;|root.ln.wf01.wt01.temperature| null|      root.ln|   FLOAT|     RLE|     SNAPPY|null|      null|&#xA;|     root.ln.wf01.wt01.status| null|      root.ln| BOOLEAN|   PLAIN|     SNAPPY|null|      null|&#xA;+-----------------------------+-----+-------------+--------+--------+-----------+----+----------+&#xA;Total line number = 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Querying a specific timeseries(root.ln.wf01.wt01.status):&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;IoTDB&amp;gt; SHOW TIMESERIES root.ln.wf01.wt01.status&#xA;+------------------------+-----+-------------+--------+--------+-----------+----+----------+&#xA;|              timeseries|alias|database|dataType|encoding|compression|tags|attributes|&#xA;+------------------------+-----+-------------+--------+--------+-----------+----+----------+&#xA;|root.ln.wf01.wt01.status| null|      root.ln| BOOLEAN|   PLAIN|     SNAPPY|null|      null|&#xA;+------------------------+-----+-------------+--------+--------+-----------+----+----------+&#xA;Total line number = 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Insert timeseries data is a basic operation of IoTDB, you can use ‘INSERT’ command to finish this. Before insertion, you should assign the timestamp and the suffix path name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;IoTDB&amp;gt; INSERT INTO root.ln.wf01.wt01(timestamp,status) values(100,true);&#xA;IoTDB&amp;gt; INSERT INTO root.ln.wf01.wt01(timestamp,status,temperature) values(200,false,20.71)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The data that you have just inserted will display as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;IoTDB&amp;gt; SELECT status FROM root.ln.wf01.wt01&#xA;+------------------------+------------------------+&#xA;|                    Time|root.ln.wf01.wt01.status|&#xA;+------------------------+------------------------+&#xA;|1970-01-01T00:00:00.100Z|                    true|&#xA;|1970-01-01T00:00:00.200Z|                   false|&#xA;+------------------------+------------------------+&#xA;Total line number = 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also query several timeseries data using one SQL statement:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;IoTDB&amp;gt; SELECT * FROM root.ln.wf01.wt01&#xA;+------------------------+-----------------------------+------------------------+&#xA;|                    Time|root.ln.wf01.wt01.temperature|root.ln.wf01.wt01.status|&#xA;+------------------------+-----------------------------+------------------------+&#xA;|1970-01-01T00:00:00.100Z|                         null|                    true|&#xA;|1970-01-01T00:00:00.200Z|                        20.71|                   false|&#xA;+------------------------+-----------------------------+------------------------+&#xA;Total line number = 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To change the time zone in Cli, you can use the following SQL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;IoTDB&amp;gt; SET time_zone=+08:00&#xA;Time zone has set to +08:00&#xA;IoTDB&amp;gt; SHOW time_zone&#xA;Current time zone: Asia/Shanghai&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add then the query result will show using the new time zone.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;IoTDB&amp;gt; SELECT * FROM root.ln.wf01.wt01&#xA;+-----------------------------+-----------------------------+------------------------+&#xA;|                         Time|root.ln.wf01.wt01.temperature|root.ln.wf01.wt01.status|&#xA;+-----------------------------+-----------------------------+------------------------+&#xA;|1970-01-01T08:00:00.100+08:00|                         null|                    true|&#xA;|1970-01-01T08:00:00.200+08:00|                        20.71|                   false|&#xA;+-----------------------------+-----------------------------+------------------------+&#xA;Total line number = 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The commands to exit the Cli are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;IoTDB&amp;gt; quit&#xA;or&#xA;IoTDB&amp;gt; exit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information about the commands supported by IoTDB SQL, please see &lt;a href=&#34;https://iotdb.apache.org/UserGuide/Master/QuickStart/QuickStart.html&#34;&gt;User Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Stop IoTDB&lt;/h3&gt; &#xA;&lt;p&gt;The server can be stopped with &#34;ctrl-C&#34; or the following script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Unix/OS X&#xA;&amp;gt; sbin/stop-standalone.sh&#xA;&#xA;# Windows&#xA;&amp;gt; sbin\stop-standalone.bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage of CSV Import and Export Tool&lt;/h1&gt; &#xA;&lt;p&gt;see &lt;a href=&#34;https://iotdb.apache.org/UserGuide/Master/Write-And-Delete-Data/CSV-Tool.html&#34;&gt;Usage of CSV Import and Export Tool&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Frequent Questions for Compiling&lt;/h1&gt; &#xA;&lt;p&gt;see &lt;a href=&#34;https://iotdb.apache.org/Development/ContributeGuide.html#_Frequent-Questions-when-Compiling-the-Source-Code&#34;&gt;Frequent Questions when Compiling the Source Code&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Contact Us&lt;/h1&gt; &#xA;&lt;h3&gt;QQ Group&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apache IoTDB User Group: 659990460&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Wechat Group&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add friend: &lt;code&gt;tietouqiao&lt;/code&gt; or &lt;code&gt;liutaohua001&lt;/code&gt;, and then we&#39;ll invite you to the group.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Slack&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://join.slack.com/t/apacheiotdb/shared_invite/zt-qvso1nj8-7715TpySZtZqmyG5qXQwpg&#34;&gt;https://join.slack.com/t/apacheiotdb/shared_invite/zt-qvso1nj8-7715TpySZtZqmyG5qXQwpg&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;see &lt;a href=&#34;https://github.com/apache/iotdb/issues/1995&#34;&gt;Join the community&lt;/a&gt; for more!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>twoyi/twoyi</title>
    <updated>2023-01-01T01:52:40Z</updated>
    <id>tag:github.com,2023-01-01:/twoyi/twoyi</id>
    <link href="https://github.com/twoyi/twoyi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A lightweight Android container on Android&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;h3&gt; &lt;b&gt; Twoyi Platform &lt;/b&gt; &lt;/h3&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA; &lt;p&gt; &lt;b&gt; A lightweight Android container &lt;/b&gt; &lt;/p&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twoyi/twoyi/main/CODE_OF_CONDUCT.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Contributions-welcome-brightgreen?logo=github&#34; alt=&#34;contributions welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twoyi.io&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Website-available-brightgreen?logo=e&#34; alt=&#34;Website&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA; &lt;p&gt; &lt;sub&gt; Made with ❤︎ by &lt;a href=&#34;https://github.com/tiann&#34;&gt; weishu &lt;/a&gt; &lt;/sub&gt; &lt;/p&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt; &lt;a href=&#34;https://twoyi.io&#34;&gt; &lt;img src=&#34;https://github.com/twoyi/twoyi/raw/main/assets/twoyi_screen.jpg?raw=true&#34; alt=&#34;Screenshot&#34; width=&#34;25%&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twoyi/twoyi/main/README_CN.md&#34;&gt;README 中文版&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Twoyi is a lightweight Android container. It runs a nearly complete Android system as a normal app (no root required) on Android. Additionally, it supports Android 8.1 ~ 12.&lt;/p&gt; &#xA;&lt;h2&gt;Capability&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use Taichi·Yang without unlocking the bootloader. Xposed, EdXposed and LSPosed will be supported.&lt;/li&gt; &#xA; &lt;li&gt;Use root on non-rooted devices.&lt;/li&gt; &#xA; &lt;li&gt;Use a few Magisk modules.&lt;/li&gt; &#xA; &lt;li&gt;Implement additional system components such as virtual camera by virtualizing the HAL layer.&lt;/li&gt; &#xA; &lt;li&gt;Do security research such as shelling.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Twoyi is a rootless Android system-level container, which runs a nearly complete Android system as a normal app and is mostly isolated from the main system.&lt;/li&gt; &#xA; &lt;li&gt;The internal Android version is Android 8.1 and Android 10 will be supported.&lt;/li&gt; &#xA; &lt;li&gt;Booting up twoyi is very fast (within three seconds) except for the initialization process.&lt;/li&gt; &#xA; &lt;li&gt;Twoyi is an open source project.&lt;/li&gt; &#xA; &lt;li&gt;The internal system of twoyi will be fully customizable. Because its system is open source, you can fork the project to compile your own system. You can also customize the system components, such as the HAL layer to implement virtual cameras, virtual sensors and other special features.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;Twoyi contains two parts:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The twoyi app, which is actually a UI rendering engine.&lt;/li&gt; &#xA; &lt;li&gt;The internal ROM of twoyi.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This repository contains the twoyi app, and the twoyi ROM is currently being turned into open-source. Therefore, at this moment, the ROM cannot be compiled from source yet.&lt;/p&gt; &#xA;&lt;h3&gt;Build the App manually&lt;/h3&gt; &#xA;&lt;h4&gt;Install Rust&lt;/h4&gt; &#xA;&lt;p&gt;Twoyi is partially written in Rust, so it&#39;s nessesary to &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;install Rust and Cargo&lt;/a&gt; first.&lt;/p&gt; &#xA;&lt;h4&gt;Install cargo-xdk&lt;/h4&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://github.com/tiann/cargo-xdk&#34;&gt;cargo-xdk&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can check if it is installed by running &lt;code&gt;./gradlew cargoBuild&lt;/code&gt;. If it succeeded, you will see libtwoyi.so in &lt;code&gt;app/src/main/jniLibs/arm64-v8a&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;PS. Please use ndk v22 or lower, otherwise it may fail.&lt;/p&gt; &#xA;&lt;h4&gt;Integrating rootfs&lt;/h4&gt; &#xA;&lt;p&gt;Currently you cannot build the ROM yourself, instead you can use the prebuilt ROM. To do that, extract rootfs.7z from the official release apk and copy it to &lt;code&gt;app/src/main/assets&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Build the app with Android Studio&lt;/h3&gt; &#xA;&lt;p&gt;Build it with Android Studio normally.&lt;/p&gt; &#xA;&lt;h3&gt;Build the ROM&lt;/h3&gt; &#xA;&lt;p&gt;WIP&lt;/p&gt; &#xA;&lt;h2&gt;Discussion&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://t.me/twoyi&#34;&gt;Telegram Group&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contact Me&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;mailto:twsxtd@gmail.com&#34;&gt;twsxtd@gmail.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Netflix/conductor</title>
    <updated>2023-01-01T01:52:40Z</updated>
    <id>tag:github.com,2023-01-01:/Netflix/conductor</id>
    <link href="https://github.com/Netflix/conductor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Conductor is a microservices orchestration engine.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Netflix/conductor/main/docs/docs/img/logo.png&#34; alt=&#34;Conductor&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Conductor&lt;/h1&gt; &#xA;&lt;p&gt;Conductor is a platform created by Netflix to orchestrate workflows that span across microservices.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://GitHub.com/Netflix/conductor/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/Netflix/conductor.svg?sanitize=true&#34; alt=&#34;Github release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Netflix/conductor/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Netflix/conductor/actions/workflows/ci.yml/badge.svg?branch=main&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/Netflix/conductor.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/osslifecycle/Netflix/conductor.svg?sanitize=true&#34; alt=&#34;NetflixOSS Lifecycle&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://conductor.netflix.com/&#34;&gt;Main Documentation Site&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;The latest version is &lt;a href=&#34;https://GitHub.com/Netflix/conductor/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/Netflix/conductor.svg?sanitize=true&#34; alt=&#34;Github release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Netflix/conductor/releases/tag/v2.31.8&#34;&gt;2.31.8&lt;/a&gt; is the &lt;strong&gt;final&lt;/strong&gt; release of &lt;code&gt;2.31&lt;/code&gt; branch. As of Feb 2022, &lt;code&gt;1.x&lt;/code&gt; &amp;amp; &lt;code&gt;2.x&lt;/code&gt; versions are no longer supported.&lt;/p&gt; &#xA;&lt;h2&gt;Community Contributions&lt;/h2&gt; &#xA;&lt;p&gt;The modules contributed by the community are housed at &lt;a href=&#34;https://github.com/Netflix/conductor-community&#34;&gt;conductor-community&lt;/a&gt;. Compatible versions of the community modules are released simultaneously with releases of the main modules.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Netflix/conductor/discussions&#34;&gt;Discussion Forum&lt;/a&gt; Please use the forum for questions and discussing ideas and join the community.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Netflix/conductor/main/docs/docs/resources/related.md&#34;&gt;List of Conductor community projects&lt;/a&gt; - Backup tool, Cron like workflow starter, Docker containers...&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started - Building &amp;amp; Running Conductor&lt;/h2&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;The easiest way to get started is with Docker containers. Please follow the instructions &lt;a href=&#34;https://conductor.netflix.com/gettingstarted/docker.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;From Source&lt;/h3&gt; &#xA;&lt;p&gt;Conductor Server is a &lt;a href=&#34;https://spring.io/projects/spring-boot&#34;&gt;Spring Boot&lt;/a&gt; project and follows all applicable conventions. See instructions &lt;a href=&#34;http://conductor.netflix.com/gettingstarted/source.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Published Artifacts&lt;/h2&gt; &#xA;&lt;p&gt;Binaries are available from &lt;a href=&#34;https://artifacts.netflix.net/netflixoss/com/netflix/conductor/&#34;&gt;Netflix OSS Maven&lt;/a&gt; repository, or the &lt;a href=&#34;https://search.maven.org/search?q=g:com.netflix.conductor&#34;&gt;Maven Central Repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Artifact&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;conductor-common&lt;/td&gt; &#xA;   &lt;td&gt;Common models used by various conductor modules&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;conductor-core&lt;/td&gt; &#xA;   &lt;td&gt;Core Conductor module&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;conductor-redis-persistence&lt;/td&gt; &#xA;   &lt;td&gt;Persistence and queue using Redis/Dynomite&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;conductor-cassandra-persistence&lt;/td&gt; &#xA;   &lt;td&gt;Persistence using Cassandra&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;conductor-es6-persistence&lt;/td&gt; &#xA;   &lt;td&gt;Indexing using Elasticsearch 6.X&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;conductor-rest&lt;/td&gt; &#xA;   &lt;td&gt;Spring MVC resources for the core services&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;conductor-ui&lt;/td&gt; &#xA;   &lt;td&gt;node.js based UI for Conductor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;conductor-client&lt;/td&gt; &#xA;   &lt;td&gt;Java client for Conductor that includes helpers for running worker tasks&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;conductor-client-spring&lt;/td&gt; &#xA;   &lt;td&gt;Client starter kit for Spring&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;conductor-server&lt;/td&gt; &#xA;   &lt;td&gt;Spring Boot Web Application&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;conductor-redis-lock&lt;/td&gt; &#xA;   &lt;td&gt;Workflow execution lock implementation using Redis&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;conductor-awss3-storage&lt;/td&gt; &#xA;   &lt;td&gt;External payload storage implementation using AWS S3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;conductor-awssqs-event-queue&lt;/td&gt; &#xA;   &lt;td&gt;Event queue implementation using AWS SQS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;conductor-http-task&lt;/td&gt; &#xA;   &lt;td&gt;Workflow system task implementation to send make requests&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;conductor-json-jq-task&lt;/td&gt; &#xA;   &lt;td&gt;Workflow system task implementation to evaluate JSON using &lt;a href=&#34;https://stedolan.github.io/jq/&#34;&gt;jq&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;conductor-grpc&lt;/td&gt; &#xA;   &lt;td&gt;Protobuf models used by the server and client&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;conductor-grpc-client&lt;/td&gt; &#xA;   &lt;td&gt;gRPC client to interact with the gRPC server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;conductor-grpc-server&lt;/td&gt; &#xA;   &lt;td&gt;gRPC server Application&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;conductor-test-harness&lt;/td&gt; &#xA;   &lt;td&gt;Integration and regression tests&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Database Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The default persistence used is &lt;a href=&#34;https://github.com/Netflix/dynomite&#34;&gt;Dynomite&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For queues, we are relying on &lt;a href=&#34;https://github.com/Netflix/dyno-queues&#34;&gt;dyno-queues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The indexing backend is &lt;a href=&#34;https://www.elastic.co/&#34;&gt;Elasticsearch&lt;/a&gt; (6.x)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JDK 11+&lt;/li&gt; &#xA; &lt;li&gt;UI requires Node 14 to build. Earlier Node versions may work but is untested.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Get Support&lt;/h2&gt; &#xA;&lt;p&gt;Conductor is maintained by Media Workflow Infrastructure team at Netflix. Use Github issue tracking for filing issues and &lt;a href=&#34;https://github.com/Netflix/conductor/discussions&#34;&gt;Discussion Forum&lt;/a&gt; for any other questions, ideas or support requests.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Whether it is a small documentation correction, bug fix or new features, contributions are highly appreciated. We just ask to follow standard oss guidelines. &lt;a href=&#34;https://github.com/Netflix/conductor/discussions&#34;&gt;Discussion Forum&lt;/a&gt; is a good place to ask questions, discuss new features and explore ideas. Please check with us before spending too much time, only to find later that someone else is already working on a similar feature.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;main&lt;/code&gt; branch is the current working branch. Please send your PR&#39;s to &lt;code&gt;main&lt;/code&gt; branch, making sure that it builds on your local system successfully. Also, please make sure all the conflicts are resolved.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2022 Netflix, Inc.&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://www.apache.org/licenses/LICENSE-2.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;/p&gt;</summary>
  </entry>
</feed>