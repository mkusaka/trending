<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-27T01:34:09Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ratatui/ratatui</title>
    <updated>2024-08-27T01:34:09Z</updated>
    <id>tag:github.com,2024-08-27:/ratatui/ratatui</id>
    <link href="https://github.com/ratatui/ratatui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rust library that&#39;s all about cooking up terminal user interfaces (TUIs) 👨‍🍳🐀&lt;/p&gt;&lt;hr&gt;&lt;details&gt; &#xA; &lt;summary&gt;Table of Contents&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ratatui/ratatui/main/#ratatui&#34;&gt;Ratatui&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ratatui/ratatui/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ratatui/ratatui/main/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ratatui/ratatui/main/#other-documentation&#34;&gt;Other Documentation&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ratatui/ratatui/main/#quickstart&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ratatui/ratatui/main/#status-of-this-fork&#34;&gt;Status of this fork&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ratatui/ratatui/main/#rust-version-requirements&#34;&gt;Rust version requirements&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ratatui/ratatui/main/#widgets&#34;&gt;Widgets&lt;/a&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ratatui/ratatui/main/#built-in&#34;&gt;Built in&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ratatui/ratatui/main/#third-party-libraries-bootstrapping-templates-and-widgets&#34;&gt;Third-party libraries, bootstrapping templates and widgets&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ratatui/ratatui/main/#apps&#34;&gt;Apps&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ratatui/ratatui/main/#alternatives&#34;&gt;Alternatives&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ratatui/ratatui/main/#acknowledgments&#34;&gt;Acknowledgments&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ratatui/ratatui/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;!-- cargo-rdme start --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ratatui/ratatui/raw/87ae72dbc756067c97f6400d3e2a58eeb383776e/examples/demo2-destroy.gif?raw=true&#34; alt=&#34;Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://crates.io/crates/ratatui&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/ratatui?logo=rust&amp;amp;style=flat-square&amp;amp;logoColor=E05D44&amp;amp;color=E05D44&#34; alt=&#34;Crate Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/ratatui&#34;&gt;&lt;img src=&#34;https://img.shields.io/docsrs/ratatui?logo=rust&amp;amp;style=flat-square&amp;amp;logoColor=E05D44&#34; alt=&#34;Docs Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ratatui/ratatui/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/ratatui/ratatui/ci.yml?style=flat-square&amp;amp;logo=github&#34; alt=&#34;CI Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://deps.rs/repo/github/ratatui/ratatui&#34;&gt;&lt;img src=&#34;https://deps.rs/repo/github/ratatui/ratatui/status.svg?style=flat-square&#34; alt=&#34;Deps.rs Badge&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://app.codecov.io/gh/ratatui/ratatui&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/ratatui/ratatui?logo=codecov&amp;amp;style=flat-square&amp;amp;token=BAQ8SOKEST&amp;amp;color=C43AC3&amp;amp;logoColor=C43AC3&#34; alt=&#34;Codecov Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ratatui/ratatui/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/l/ratatui?style=flat-square&amp;amp;color=1370D3&#34; alt=&#34;License Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sponsors/ratatui&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/sponsors/ratatui?logo=github&amp;amp;style=flat-square&amp;amp;color=1370D3&#34; alt=&#34;Sponsors Badge&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://discord.gg/pMCEU9hNEj&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1070692720437383208?label=discord&amp;amp;logo=discord&amp;amp;style=flat-square&amp;amp;color=1370D3&amp;amp;logoColor=1370D3&#34; alt=&#34;Discord Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://matrix.to/#/%23ratatui:matrix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/matrix/ratatui-general%3Amatrix.org?style=flat-square&amp;amp;logo=matrix&amp;amp;label=Matrix&amp;amp;color=C43AC3&#34; alt=&#34;Matrix Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://forum.ratatui.rs&#34;&gt;&lt;img src=&#34;https://img.shields.io/discourse/likes?server=https%3A%2F%2Fforum.ratatui.rs&amp;amp;style=flat-square&amp;amp;logo=discourse&amp;amp;label=forum&amp;amp;color=C43AC3&#34; alt=&#34;Forum Badge&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://ratatui.rs/&#34;&gt;Ratatui Website&lt;/a&gt; · &lt;a href=&#34;https://docs.rs/ratatui&#34;&gt;API Docs&lt;/a&gt; · &lt;a href=&#34;https://github.com/ratatui/ratatui/tree/main/examples/README.md&#34;&gt;Examples&lt;/a&gt; · &lt;a href=&#34;https://github.com/ratatui/ratatui/raw/main/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt; · &lt;a href=&#34;https://github.com/ratatui/ratatui/raw/main/BREAKING-CHANGES.md&#34;&gt;Breaking Changes&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/ratatui/ratatui/raw/main/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; · &lt;a href=&#34;https://github.com/ratatui/ratatui/issues/new?labels=bug&amp;amp;projects=&amp;amp;template=bug_report.md&#34;&gt;Report a bug&lt;/a&gt; · &lt;a href=&#34;https://github.com/ratatui/ratatui/issues/new?labels=enhancement&amp;amp;projects=&amp;amp;template=feature_request.md&#34;&gt;Request a Feature&lt;/a&gt; · &lt;a href=&#34;https://github.com/ratatui/ratatui/compare&#34;&gt;Create a Pull Request&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;Ratatui&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ratatui.rs/&#34;&gt;Ratatui&lt;/a&gt; is a crate for cooking up terminal user interfaces in Rust. It is a lightweight library that provides a set of widgets and utilities to build complex Rust TUIs. Ratatui was forked from the &lt;a href=&#34;https://crates.io/crates/tui&#34;&gt;tui-rs&lt;/a&gt; crate in 2023 in order to continue its development.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add &lt;code&gt;ratatui&lt;/code&gt; as a dependency to your cargo.toml:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cargo add ratatui&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ratatui uses &lt;a href=&#34;https://crates.io/crates/crossterm&#34;&gt;Crossterm&lt;/a&gt; by default as it works on most platforms. See the &lt;a href=&#34;https://ratatui.rs/installation/&#34;&gt;Installation&lt;/a&gt; section of the &lt;a href=&#34;https://ratatui.rs/&#34;&gt;Ratatui Website&lt;/a&gt; for more details on how to use other backends (&lt;a href=&#34;https://crates.io/crates/termion&#34;&gt;Termion&lt;/a&gt; / &lt;a href=&#34;https://crates.io/crates/termwiz&#34;&gt;Termwiz&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Ratatui is based on the principle of immediate rendering with intermediate buffers. This means that for each frame, your app must render all widgets that are supposed to be part of the UI. This is in contrast to the retained mode style of rendering where widgets are updated and then automatically redrawn on the next frame. See the &lt;a href=&#34;https://ratatui.rs/concepts/rendering/&#34;&gt;Rendering&lt;/a&gt; section of the &lt;a href=&#34;https://ratatui.rs/&#34;&gt;Ratatui Website&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;p&gt;You can also watch the &lt;a href=&#34;https://www.youtube.com/watch?v=NU0q6NOLJ20&#34;&gt;FOSDEM 2024 talk&lt;/a&gt; about Ratatui which gives a brief introduction to terminal user interfaces and showcases the features of Ratatui, along with a hello world demo.&lt;/p&gt; &#xA;&lt;h2&gt;Other documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ratatui.rs/&#34;&gt;Ratatui Website&lt;/a&gt; - explains the library&#39;s concepts and provides step-by-step tutorials&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forum.ratatui.rs&#34;&gt;Ratatui Forum&lt;/a&gt; - a place to ask questions and discuss the library&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/ratatui&#34;&gt;API Docs&lt;/a&gt; - the full API documentation for the library on docs.rs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ratatui/ratatui/tree/main/examples/README.md&#34;&gt;Examples&lt;/a&gt; - a collection of examples that demonstrate how to use the library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ratatui/ratatui/raw/main/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; - Please read this if you are interested in contributing to the project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ratatui/ratatui/raw/main/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt; - generated by &lt;a href=&#34;https://git-cliff.org&#34;&gt;git-cliff&lt;/a&gt; utilizing &lt;a href=&#34;https://www.conventionalcommits.org&#34;&gt;Conventional Commits&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ratatui/ratatui/raw/main/BREAKING-CHANGES.md&#34;&gt;Breaking Changes&lt;/a&gt; - a list of breaking changes in the library.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;The following example demonstrates the minimal amount of code necessary to setup a terminal and render &#34;Hello World!&#34;. The full code for this example which contains a little more detail is in the &lt;a href=&#34;https://github.com/ratatui/ratatui/tree/main/examples/README.md&#34;&gt;Examples&lt;/a&gt; directory. For more guidance on different ways to structure your application see the &lt;a href=&#34;https://ratatui.rs/concepts/application-patterns/&#34;&gt;Application Patterns&lt;/a&gt; and &lt;a href=&#34;https://ratatui.rs/tutorials/hello-world/&#34;&gt;Hello World tutorial&lt;/a&gt; sections in the &lt;a href=&#34;https://ratatui.rs/&#34;&gt;Ratatui Website&lt;/a&gt; and the various &lt;a href=&#34;https://github.com/ratatui/ratatui/tree/main/examples/README.md&#34;&gt;Examples&lt;/a&gt;. There are also several starter templates available in the &lt;a href=&#34;https://github.com/ratatui/templates/&#34;&gt;templates&lt;/a&gt; repository.&lt;/p&gt; &#xA;&lt;p&gt;Every application built with &lt;code&gt;ratatui&lt;/code&gt; needs to implement the following steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Initialize the terminal&lt;/li&gt; &#xA; &lt;li&gt;A main loop to: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Handle input events&lt;/li&gt; &#xA;   &lt;li&gt;Draw the UI&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Restore the terminal state&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The library contains a [&lt;code&gt;prelude&lt;/code&gt;] module that re-exports the most commonly used traits and types for convenience. Most examples in the documentation will use this instead of showing the full path of each type.&lt;/p&gt; &#xA;&lt;h3&gt;Initialize and restore the terminal&lt;/h3&gt; &#xA;&lt;p&gt;The [&lt;code&gt;Terminal&lt;/code&gt;] type is the main entry point for any Ratatui application. It is a light abstraction over a choice of &lt;a href=&#34;backend::Backend&#34;&gt;&lt;code&gt;Backend&lt;/code&gt;&lt;/a&gt; implementations that provides functionality to draw each frame, clear the screen, hide the cursor, etc. It is parametrized over any type that implements the &lt;a href=&#34;backend::Backend&#34;&gt;&lt;code&gt;Backend&lt;/code&gt;&lt;/a&gt; trait which has implementations for &lt;a href=&#34;https://crates.io/crates/crossterm&#34;&gt;Crossterm&lt;/a&gt;, &lt;a href=&#34;https://crates.io/crates/termion&#34;&gt;Termion&lt;/a&gt; and &lt;a href=&#34;https://crates.io/crates/termwiz&#34;&gt;Termwiz&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Most applications should enter the Alternate Screen when starting and leave it when exiting and also enable raw mode to disable line buffering and enable reading key events. See the &lt;a href=&#34;https://raw.githubusercontent.com/ratatui/ratatui/main/backend&#34;&gt;&lt;code&gt;backend&lt;/code&gt; module&lt;/a&gt; and the &lt;a href=&#34;https://ratatui.rs/concepts/backends/&#34;&gt;Backends&lt;/a&gt; section of the &lt;a href=&#34;https://ratatui.rs/&#34;&gt;Ratatui Website&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h3&gt;Drawing the UI&lt;/h3&gt; &#xA;&lt;p&gt;The drawing logic is delegated to a closure that takes a &lt;a href=&#34;terminal::Frame&#34;&gt;&lt;code&gt;Frame&lt;/code&gt;&lt;/a&gt; instance as argument. The &lt;a href=&#34;terminal::Frame&#34;&gt;&lt;code&gt;Frame&lt;/code&gt;&lt;/a&gt; provides the size of the area to draw to and allows the app to render any &lt;a href=&#34;widgets::Widget&#34;&gt;&lt;code&gt;Widget&lt;/code&gt;&lt;/a&gt; using the provided &lt;a href=&#34;terminal::Frame::render_widget&#34;&gt;&lt;code&gt;render_widget&lt;/code&gt;&lt;/a&gt; method. After this closure returns, a diff is performed and only the changes are drawn to the terminal. See the &lt;a href=&#34;https://ratatui.rs/how-to/widgets/&#34;&gt;Widgets&lt;/a&gt; section of the &lt;a href=&#34;https://ratatui.rs/&#34;&gt;Ratatui Website&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h3&gt;Handling events&lt;/h3&gt; &#xA;&lt;p&gt;Ratatui does not include any input handling. Instead event handling can be implemented by calling backend library methods directly. See the &lt;a href=&#34;https://ratatui.rs/concepts/event-handling/&#34;&gt;Handling Events&lt;/a&gt; section of the &lt;a href=&#34;https://ratatui.rs/&#34;&gt;Ratatui Website&lt;/a&gt; for more info. For example, if you are using &lt;a href=&#34;https://crates.io/crates/crossterm&#34;&gt;Crossterm&lt;/a&gt;, you can use the &lt;a href=&#34;https://docs.rs/crossterm/latest/crossterm/event/index.html&#34;&gt;&lt;code&gt;crossterm::event&lt;/code&gt;&lt;/a&gt; module to handle events.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use std::io::{self, stdout};&#xA;&#xA;use ratatui::{&#xA;    backend::CrosstermBackend,&#xA;    crossterm::{&#xA;        event::{self, Event, KeyCode},&#xA;        terminal::{&#xA;            disable_raw_mode, enable_raw_mode, EnterAlternateScreen, LeaveAlternateScreen,&#xA;        },&#xA;        ExecutableCommand,&#xA;    },&#xA;    widgets::{Block, Paragraph},&#xA;    Frame, Terminal,&#xA;};&#xA;&#xA;fn main() -&amp;gt; io::Result&amp;lt;()&amp;gt; {&#xA;    enable_raw_mode()?;&#xA;    stdout().execute(EnterAlternateScreen)?;&#xA;    let mut terminal = Terminal::new(CrosstermBackend::new(stdout()))?;&#xA;&#xA;    let mut should_quit = false;&#xA;    while !should_quit {&#xA;        terminal.draw(ui)?;&#xA;        should_quit = handle_events()?;&#xA;    }&#xA;&#xA;    disable_raw_mode()?;&#xA;    stdout().execute(LeaveAlternateScreen)?;&#xA;    Ok(())&#xA;}&#xA;&#xA;fn handle_events() -&amp;gt; io::Result&amp;lt;bool&amp;gt; {&#xA;    if event::poll(std::time::Duration::from_millis(50))? {&#xA;        if let Event::Key(key) = event::read()? {&#xA;            if key.kind == event::KeyEventKind::Press &amp;amp;&amp;amp; key.code == KeyCode::Char(&#39;q&#39;) {&#xA;                return Ok(true);&#xA;            }&#xA;        }&#xA;    }&#xA;    Ok(false)&#xA;}&#xA;&#xA;fn ui(frame: &amp;amp;mut Frame) {&#xA;    frame.render_widget(&#xA;        Paragraph::new(&#34;Hello World!&#34;).block(Block::bordered().title(&#34;Greeting&#34;)),&#xA;        frame.size(),&#xA;    );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running this example produces the following output:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ratatui/ratatui/raw/c3c3c289b1eb8d562afb1931adb4dc719cd48490/examples/docsrs-hello.png?raw=true&#34; alt=&#34;docsrs-hello&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Layout&lt;/h2&gt; &#xA;&lt;p&gt;The library comes with a basic yet useful layout management object called &lt;a href=&#34;layout::Layout&#34;&gt;&lt;code&gt;Layout&lt;/code&gt;&lt;/a&gt; which allows you to split the available space into multiple areas and then render widgets in each area. This lets you describe a responsive terminal UI by nesting layouts. See the &lt;a href=&#34;https://ratatui.rs/how-to/layout/&#34;&gt;Layout&lt;/a&gt; section of the &lt;a href=&#34;https://ratatui.rs/&#34;&gt;Ratatui Website&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use ratatui::{&#xA;    layout::{Constraint, Layout},&#xA;    widgets::Block,&#xA;    Frame,&#xA;};&#xA;&#xA;fn ui(frame: &amp;amp;mut Frame) {&#xA;    let [title_area, main_area, status_area] = Layout::vertical([&#xA;        Constraint::Length(1),&#xA;        Constraint::Min(0),&#xA;        Constraint::Length(1),&#xA;    ])&#xA;    .areas(frame.size());&#xA;    let [left_area, right_area] =&#xA;        Layout::horizontal([Constraint::Percentage(50), Constraint::Percentage(50)])&#xA;            .areas(main_area);&#xA;&#xA;    frame.render_widget(Block::bordered().title(&#34;Title Bar&#34;), title_area);&#xA;    frame.render_widget(Block::bordered().title(&#34;Status Bar&#34;), status_area);&#xA;    frame.render_widget(Block::bordered().title(&#34;Left&#34;), left_area);&#xA;    frame.render_widget(Block::bordered().title(&#34;Right&#34;), right_area);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running this example produces the following output:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ratatui/ratatui/raw/c3c3c289b1eb8d562afb1931adb4dc719cd48490/examples/docsrs-layout.png?raw=true&#34; alt=&#34;docsrs-layout&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Text and styling&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;text::Text&#34;&gt;&lt;code&gt;Text&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;text::Line&#34;&gt;&lt;code&gt;Line&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;text::Span&#34;&gt;&lt;code&gt;Span&lt;/code&gt;&lt;/a&gt; types are the building blocks of the library and are used in many places. &lt;a href=&#34;text::Text&#34;&gt;&lt;code&gt;Text&lt;/code&gt;&lt;/a&gt; is a list of &lt;a href=&#34;text::Line&#34;&gt;&lt;code&gt;Line&lt;/code&gt;&lt;/a&gt;s and a &lt;a href=&#34;text::Line&#34;&gt;&lt;code&gt;Line&lt;/code&gt;&lt;/a&gt; is a list of &lt;a href=&#34;text::Span&#34;&gt;&lt;code&gt;Span&lt;/code&gt;&lt;/a&gt;s. A &lt;a href=&#34;text::Span&#34;&gt;&lt;code&gt;Span&lt;/code&gt;&lt;/a&gt; is a string with a specific style.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/ratatui/ratatui/main/style&#34;&gt;&lt;code&gt;style&lt;/code&gt; module&lt;/a&gt; provides types that represent the various styling options. The most important one is &lt;a href=&#34;style::Style&#34;&gt;&lt;code&gt;Style&lt;/code&gt;&lt;/a&gt; which represents the foreground and background colors and the text attributes of a &lt;a href=&#34;text::Span&#34;&gt;&lt;code&gt;Span&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&#34;https://raw.githubusercontent.com/ratatui/ratatui/main/style&#34;&gt;&lt;code&gt;style&lt;/code&gt; module&lt;/a&gt; also provides a &lt;a href=&#34;style::Stylize&#34;&gt;&lt;code&gt;Stylize&lt;/code&gt;&lt;/a&gt; trait that allows short-hand syntax to apply a style to widgets and text. See the &lt;a href=&#34;https://ratatui.rs/how-to/render/style-text/&#34;&gt;Styling Text&lt;/a&gt; section of the &lt;a href=&#34;https://ratatui.rs/&#34;&gt;Ratatui Website&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use ratatui::{&#xA;    layout::{Constraint, Layout},&#xA;    style::{Color, Modifier, Style, Stylize},&#xA;    text::{Line, Span},&#xA;    widgets::{Block, Paragraph},&#xA;    Frame,&#xA;};&#xA;&#xA;fn ui(frame: &amp;amp;mut Frame) {&#xA;    let areas = Layout::vertical([Constraint::Length(1); 4]).split(frame.size());&#xA;&#xA;    let line = Line::from(vec![&#xA;        Span::raw(&#34;Hello &#34;),&#xA;        Span::styled(&#xA;            &#34;World&#34;,&#xA;            Style::new()&#xA;                .fg(Color::Green)&#xA;                .bg(Color::White)&#xA;                .add_modifier(Modifier::BOLD),&#xA;        ),&#xA;        &#34;!&#34;.red().on_light_yellow().italic(),&#xA;    ]);&#xA;    frame.render_widget(line, areas[0]);&#xA;&#xA;    // using the short-hand syntax and implicit conversions&#xA;    let paragraph = Paragraph::new(&#34;Hello World!&#34;.red().on_white().bold());&#xA;    frame.render_widget(paragraph, areas[1]);&#xA;&#xA;    // style the whole widget instead of just the text&#xA;    let paragraph = Paragraph::new(&#34;Hello World!&#34;).style(Style::new().red().on_white());&#xA;    frame.render_widget(paragraph, areas[2]);&#xA;&#xA;    // use the simpler short-hand syntax&#xA;    let paragraph = Paragraph::new(&#34;Hello World!&#34;).blue().on_yellow();&#xA;    frame.render_widget(paragraph, areas[3]);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running this example produces the following output:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ratatui/ratatui/raw/c3c3c289b1eb8d562afb1931adb4dc719cd48490/examples/docsrs-styling.png?raw=true&#34; alt=&#34;docsrs-styling&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- cargo-rdme end --&gt; &#xA;&lt;h2&gt;Status of this fork&lt;/h2&gt; &#xA;&lt;p&gt;In response to the original maintainer &lt;a href=&#34;https://github.com/fdehau&#34;&gt;&lt;strong&gt;Florian Dehau&lt;/strong&gt;&lt;/a&gt;&#39;s issue regarding the &lt;a href=&#34;https://github.com/fdehau/tui-rs/issues/654&#34;&gt;future of &lt;code&gt;tui-rs&lt;/code&gt;&lt;/a&gt;, several members of the community forked the project and created this crate. We look forward to continuing the work started by Florian 🚀&lt;/p&gt; &#xA;&lt;p&gt;In order to organize ourselves, we currently use a &lt;a href=&#34;https://discord.gg/pMCEU9hNEj&#34;&gt;Discord server&lt;/a&gt;, feel free to join and come chat! There is also a &lt;a href=&#34;https://matrix.org/&#34;&gt;Matrix&lt;/a&gt; bridge available at &lt;a href=&#34;https://matrix.to/#/%23ratatui:matrix.org&#34;&gt;#ratatui:matrix.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;While we do utilize Discord for coordinating, it&#39;s not essential for contributing. We have recently launched the &lt;a href=&#34;https://forum.ratatui.rs&#34;&gt;Ratatui Forum&lt;/a&gt;, and our primary open-source workflow is centered around GitHub. For bugs and features, we rely on GitHub. Please &lt;a href=&#34;https://github.com/ratatui/ratatui/issues/new?labels=bug&amp;amp;projects=&amp;amp;template=bug_report.md&#34;&gt;Report a bug&lt;/a&gt;, &lt;a href=&#34;https://github.com/ratatui/ratatui/issues/new?labels=enhancement&amp;amp;projects=&amp;amp;template=feature_request.md&#34;&gt;Request a Feature&lt;/a&gt; or &lt;a href=&#34;https://github.com/ratatui/ratatui/compare&#34;&gt;Create a Pull Request&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please make sure you read the updated &lt;a href=&#34;https://raw.githubusercontent.com/ratatui/ratatui/main/CONTRIBUTING.md&#34;&gt;contributing&lt;/a&gt; guidelines, especially if you are interested in working on a PR or issue opened in the previous repository.&lt;/p&gt; &#xA;&lt;h2&gt;Widgets&lt;/h2&gt; &#xA;&lt;h3&gt;Built in&lt;/h3&gt; &#xA;&lt;p&gt;The library comes with the following &lt;a href=&#34;https://docs.rs/ratatui/latest/ratatui/widgets/index.html&#34;&gt;widgets&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/ratatui/latest/ratatui/widgets/struct.BarChart.html&#34;&gt;BarChart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/ratatui/latest/ratatui/widgets/block/struct.Block.html&#34;&gt;Block&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/ratatui/latest/ratatui/widgets/calendar/index.html&#34;&gt;Calendar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/ratatui/latest/ratatui/widgets/canvas/struct.Canvas.html&#34;&gt;Canvas&lt;/a&gt; which allows rendering &lt;a href=&#34;https://docs.rs/ratatui/latest/ratatui/widgets/canvas/index.html&#34;&gt;points, lines, shapes and a world map&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/ratatui/latest/ratatui/widgets/struct.Chart.html&#34;&gt;Chart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/ratatui/latest/ratatui/widgets/struct.Clear.html&#34;&gt;Clear&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/ratatui/latest/ratatui/widgets/struct.Gauge.html&#34;&gt;Gauge&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/ratatui/latest/ratatui/widgets/struct.List.html&#34;&gt;List&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/ratatui/latest/ratatui/widgets/struct.Paragraph.html&#34;&gt;Paragraph&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/ratatui/latest/ratatui/widgets/scrollbar/struct.Scrollbar.html&#34;&gt;Scrollbar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/ratatui/latest/ratatui/widgets/struct.Sparkline.html&#34;&gt;Sparkline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/ratatui/latest/ratatui/widgets/struct.Table.html&#34;&gt;Table&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/ratatui/latest/ratatui/widgets/struct.Tabs.html&#34;&gt;Tabs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each widget has an associated example which can be found in the &lt;a href=&#34;https://github.com/ratatui/ratatui/tree/main/examples/README.md&#34;&gt;Examples&lt;/a&gt; folder. Run each example with cargo (e.g. to run the gauge example &lt;code&gt;cargo run --example gauge&lt;/code&gt;), and quit by pressing &lt;code&gt;q&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also run all examples by running &lt;code&gt;cargo make run-examples&lt;/code&gt; (requires &lt;code&gt;cargo-make&lt;/code&gt; that can be installed with &lt;code&gt;cargo install cargo-make&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Third-party libraries, bootstrapping templates and widgets&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/uttarayan21/ansi-to-tui&#34;&gt;ansi-to-tui&lt;/a&gt; — Convert ansi colored text to &lt;code&gt;ratatui::text::Text&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/uttarayan21/color-to-tui&#34;&gt;color-to-tui&lt;/a&gt; — Parse hex colors to &lt;code&gt;ratatui::style::Color&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ratatui/templates&#34;&gt;templates&lt;/a&gt; — Starter templates for bootstrapping a Rust TUI application with Ratatui &amp;amp; crossterm&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jkelleyrtp/tui-builder&#34;&gt;tui-builder&lt;/a&gt; — Batteries-included MVC framework for Tui-rs + Crossterm apps&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kegesch/tui-clap-rs&#34;&gt;tui-clap&lt;/a&gt; — Use clap-rs together with Tui-rs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kegesch/tui-log-rs&#34;&gt;tui-log&lt;/a&gt; — Example of how to use logging with Tui-rs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gin66/tui-logger&#34;&gt;tui-logger&lt;/a&gt; — Logger and Widget for Tui-rs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/veeso/tui-realm&#34;&gt;tui-realm&lt;/a&gt; — Tui-rs framework to build stateful applications with a React/Elm inspired approach&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/veeso/tui-realm-treeview&#34;&gt;tui-realm-treeview&lt;/a&gt; — Treeview component for Tui-realm&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/EdJoPaTo/tui-rs-tree-widget&#34;&gt;tui-rs-tree-widgets&lt;/a&gt; — Widget for tree data structures.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/markatk/tui-windows-rs&#34;&gt;tui-windows&lt;/a&gt; — Tui-rs abstraction to handle multiple windows and their rendering&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rhysd/tui-textarea&#34;&gt;tui-textarea&lt;/a&gt; — Simple yet powerful multi-line text editor widget supporting several key shortcuts, undo/redo, text search, etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sayanarijit/tui-input&#34;&gt;tui-input&lt;/a&gt; — TUI input library supporting multiple backends and tui-rs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/a-kenji/tui-term&#34;&gt;tui-term&lt;/a&gt; — A pseudoterminal widget library that enables the rendering of terminal applications as ratatui widgets.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Apps&lt;/h2&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://github.com/ratatui/awesome-ratatui&#34;&gt;awesome-ratatui&lt;/a&gt; for a curated list of awesome apps/libraries built with &lt;code&gt;ratatui&lt;/code&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;p&gt;You might want to checkout &lt;a href=&#34;https://github.com/gyscos/Cursive&#34;&gt;Cursive&lt;/a&gt; for an alternative solution to build text user interfaces in Rust.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;Special thanks to &lt;a href=&#34;https://github.com/nawok&#34;&gt;&lt;strong&gt;Pavel Fomchenkov&lt;/strong&gt;&lt;/a&gt; for his work in designing &lt;strong&gt;an awesome logo&lt;/strong&gt; for the ratatui project and ratatui organization.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ratatui/ratatui/main/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>