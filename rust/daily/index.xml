<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-09T01:35:17Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>reubeno/brush</title>
    <updated>2025-05-09T01:35:17Z</updated>
    <id>tag:github.com,2025-05-09:/reubeno/brush</id>
    <link href="https://github.com/reubeno/brush" rel="alternate"></link>
    <summary type="html">&lt;p&gt;bash/POSIX-compatible shell implemented in Rust&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;brush&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crates.io/crates/brush-shell&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/brush-shell?style=flat-square&#34; alt=&#34;Published version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/brush-shell&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/d/brush-shell?style=flat-square&#34; alt=&#34;Download count&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/crates/msrv/brush-shell&#34; alt=&#34;MSRV&#34;&gt; &lt;img src=&#34;https://tokei.rs/b1/github/reubeno/brush?category=code&#34; alt=&#34;Lines of code badge&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/reubeno/brush/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue?style=flat-square&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/reubeno/brush/actions/workflows/ci.yaml&#34;&gt;&lt;img src=&#34;https://github.com/reubeno/brush/actions/workflows/ci.yaml/badge.svg?sanitize=true&#34; alt=&#34;CI workflow badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/brush/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/vertical-allrepos/brush.svg?sanitize=true&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;brush&lt;/code&gt; (&lt;strong&gt;B&lt;/strong&gt;o(u)rn(e) &lt;strong&gt;RU&lt;/strong&gt;sty &lt;strong&gt;SH&lt;/strong&gt;ell) is a &lt;a href=&#34;https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html&#34;&gt;POSIX-&lt;/a&gt; and &lt;a href=&#34;https://www.gnu.org/software/bash/&#34;&gt;bash-&lt;/a&gt;compatible shell, implemented in Rust. It&#39;s built and tested on Linux and macOS, with experimental support on Windows. (Its Linux build is fully supported running on Windows via WSL.)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/0e64d1b9-7e4e-43be-8593-6c1b9607ac52&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;brush&lt;/code&gt; is functional for interactive use as a daily driver! It can execute most &lt;code&gt;sh&lt;/code&gt; and &lt;code&gt;bash&lt;/code&gt; scripts we&#39;ve encountered. Known limitations are tracked with filed issues. Out of an abundance of caution, we wouldn&#39;t recommend using it yet in &lt;em&gt;production&lt;/em&gt; scenarios in case it doesn&#39;t behave identically to your existing stable shell. (If you do find any behavioral differences, though, please report them with an issue!)&lt;/p&gt; &#xA;&lt;p&gt;Contributions and feedback of all kinds are welcome! For more guidance, please consult our &lt;a href=&#34;https://raw.githubusercontent.com/reubeno/brush/main/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt;. For more technical details, please consult the &lt;a href=&#34;https://raw.githubusercontent.com/reubeno/brush/main/docs/README.md&#34;&gt;documentation&lt;/a&gt; in this repo.&lt;/p&gt; &#xA;&lt;p&gt;This project was originally borne out of curiosity and a desire to learn. We&#39;re doing our best to keep that attitude :).&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;Available for use and distribution under the &lt;a href=&#34;https://raw.githubusercontent.com/reubeno/brush/main/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Try it out!&lt;/h3&gt; &#xA;&lt;p&gt;We don&#39;t publish binary releases of &lt;code&gt;brush&lt;/code&gt;, but if you have a working &lt;code&gt;rust&lt;/code&gt; toolchain installed you can simply run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo install --locked brush-shell&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will install the most recently released version of &lt;code&gt;brush&lt;/code&gt; from &lt;code&gt;crates.io&lt;/code&gt;. Alternatively, for the latest and greatest bits, you can clone this repo and execute &lt;code&gt;cargo run&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t have &lt;code&gt;rust&lt;/code&gt; installed, we recommend installing it via &lt;a href=&#34;https://rustup.rs/&#34;&gt;&lt;code&gt;rustup&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;(If you &lt;em&gt;are&lt;/em&gt; interested in having a binary release, then please let us know in the &#39;Discussions&#39; area of this project or by filing a feature request in &#39;Issues&#39;.)&lt;/p&gt; &#xA;&lt;p&gt;If you are a Nix user, you can also use the registered version.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nix run &#39;github:NixOS/nixpkgs/nixpkgs-unstable#brush&#39; -- --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Arch Linux users can install &lt;code&gt;brush&lt;/code&gt; &lt;a href=&#34;https://aur.archlinux.org/packages/brush&#34;&gt;from the AUR&lt;/a&gt; with their &lt;a href=&#34;https://wiki.archlinux.org/title/AUR_helpers&#34;&gt;AUR helper&lt;/a&gt; of choice, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;paru -S brush&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you run &lt;code&gt;brush&lt;/code&gt;, it should look exactly as &lt;code&gt;bash&lt;/code&gt; would on your system since it processes &lt;code&gt;.bashrc&lt;/code&gt; and other usual configuration. If you&#39;d like to customize the look of &lt;code&gt;brush&lt;/code&gt; to distinguish it from the other shells installed on your system, then you can also author a &lt;code&gt;~/.brushrc&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h3&gt;Known limitations&lt;/h3&gt; &#xA;&lt;p&gt;There are some known gaps in compatibility. Most notably:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Some &lt;code&gt;set&lt;/code&gt; and &lt;code&gt;shopt&lt;/code&gt; options.&lt;/strong&gt; The &lt;code&gt;set&lt;/code&gt; builtin is implemented, as is &lt;code&gt;set -x&lt;/code&gt; and many frequently used &lt;code&gt;set&lt;/code&gt;/&lt;code&gt;shopt&lt;/code&gt; options, but a number aren&#39;t fully implemented. For example, &lt;code&gt;set -e&lt;/code&gt; will execute but its semantics aren&#39;t applied across execution.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Anything tagged with a &lt;code&gt;TODO&lt;/code&gt; comment or where &lt;code&gt;error::unimp()&lt;/code&gt; is used to return a &#34;not implemented&#34; error&lt;/strong&gt;. These aren&#39;t all tracked with GitHub issues right now, but there&#39;s a number of these scattered throughout the code base. Some are indicative of missing functionality that may be straightforward to implement; others may be more complicated.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you feel so inclined, we&#39;d love contributions toward any of the above, with broadening test coverage, deeper compatibility evaluation, or really any other opportunities you can find to help us make this project better.&lt;/p&gt; &#xA;&lt;h2&gt;Testing strategy&lt;/h2&gt; &#xA;&lt;p&gt;This project is primarily tested by comparing its behavior with other existing shells, leveraging the latter as test oracles. The integration tests implemented in this repo include &lt;a href=&#34;https://raw.githubusercontent.com/reubeno/brush/main/brush-shell/tests/cases&#34;&gt;550+ test cases&lt;/a&gt; run on both this shell and an oracle, comparing standard output and exit codes.&lt;/p&gt; &#xA;&lt;p&gt;For more details, please consult the &lt;a href=&#34;https://raw.githubusercontent.com/reubeno/brush/main/docs/reference/integration-testing.md&#34;&gt;reference documentation on integration testing&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;There&#39;s a long list of OSS crates whose shoulders this project rests on. Notably, the following crates are directly relied on for major portions of shell functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nushell/reedline&#34;&gt;&lt;code&gt;reedline&lt;/code&gt;&lt;/a&gt; - for readline-like input and interactive usage&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/clap-rs/clap&#34;&gt;&lt;code&gt;clap&lt;/code&gt;&lt;/a&gt; - command-line parsing, used both by the top-level brush CLI as well as built-in commands&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fancy-regex/fancy-regex&#34;&gt;&lt;code&gt;fancy-regex&lt;/code&gt;&lt;/a&gt; - relied on for everything regex&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tokio-rs/tokio&#34;&gt;&lt;code&gt;tokio&lt;/code&gt;&lt;/a&gt; - async, well, everything&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nix-rust/nix&#34;&gt;&lt;code&gt;nix&lt;/code&gt; rust crate&lt;/a&gt; - higher-level APIs for Unix/POSIX system APIs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For testing, performance benchmarking, and other important engineering support, we use and love:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tikv/pprof-rs&#34;&gt;&lt;code&gt;pprof-rs&lt;/code&gt;&lt;/a&gt; - for sampling-based CPU profiling&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bheisler/criterion.rs&#34;&gt;&lt;code&gt;criterion.rs&lt;/code&gt;&lt;/a&gt; - for statistics-based benchmarking&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/scop/bash-completion&#34;&gt;&lt;code&gt;bash-completion&lt;/code&gt;&lt;/a&gt; - for its completion test suite and general completion support!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Links: other shell implementations&lt;/h2&gt; &#xA;&lt;p&gt;There are a number of other POSIX-ish shells implemented in a non-C/C++ implementation language. Some inspirational examples include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nushell.sh/&#34;&gt;&lt;code&gt;nushell&lt;/code&gt;&lt;/a&gt; - modern Rust-implemented shell (which also provides the &lt;code&gt;reedline&lt;/code&gt; crate we use!)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shellgei/rusty_bash&#34;&gt;&lt;code&gt;rusty_bash&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mvdan/sh&#34;&gt;&lt;code&gt;mvdan/sh&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We&#39;re sure there are plenty more; we&#39;re happy to include links to them as well.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>longbridge/gpui-component</title>
    <updated>2025-05-09T01:35:17Z</updated>
    <id>tag:github.com,2025-05-09:/longbridge/gpui-component</id>
    <link href="https://github.com/longbridge/gpui-component" rel="alternate"></link>
    <summary type="html">&lt;p&gt;UI components for building fantastic desktop application by using GPUI.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GPUI Component&lt;/h1&gt; &#xA;&lt;p&gt;UI components for building fantastic desktop applications using &lt;a href=&#34;https://gpui.rs&#34;&gt;GPUI&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Richness&lt;/strong&gt;: 40+ cross-platform desktop UI components.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Native&lt;/strong&gt;: Inspired by macOS and Windows controls, combined with shadcn/ui design for a modern experience.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Ease of Use&lt;/strong&gt;: Stateless &lt;code&gt;RenderOnce&lt;/code&gt; components, simple and user-friendly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Customizable&lt;/strong&gt;: Built-in &lt;code&gt;Theme&lt;/code&gt; and &lt;code&gt;ThemeColor&lt;/code&gt;, supporting multi-theme and variable-based configurations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Versatile&lt;/strong&gt;: Supports sizes like &lt;code&gt;xs&lt;/code&gt;, &lt;code&gt;sm&lt;/code&gt;, &lt;code&gt;md&lt;/code&gt;, and &lt;code&gt;lg&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Flexible Layout&lt;/strong&gt;: Dock layout for panel arrangements, resizing, and freeform (Tiles) layouts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;High Performance&lt;/strong&gt;: Virtualized Table and List components for smooth large-data rendering.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Content Rendering&lt;/strong&gt;: Native support for Markdown and simple HTML.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Showcase&lt;/h2&gt; &#xA;&lt;p&gt;Here is the first application: &lt;a href=&#34;https://longbridge.com/desktop&#34;&gt;Longbridge Pro&lt;/a&gt;, built using GPUI Component.&lt;/p&gt; &#xA;&lt;img width=&#34;1763&#34; alt=&#34;Image&#34; src=&#34;https://github.com/user-attachments/assets/3e2f4eb7-fd27-4343-b6dc-184465599e99&#34;&gt; &#xA;&lt;p&gt;We built multi-theme support in the application. This feature is not included in GPUI Component itself, but is based on the &lt;code&gt;Theme&lt;/code&gt; feature, so it&#39;s easy to implement.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;GPUI and GPUI Component are still in development, so you need to add dependencies by git.&lt;/p&gt; &#xA;&lt;p&gt;GPUI Component depends on a specific version of &lt;code&gt;gpui&lt;/code&gt; (kept updated with upstream) to include WebView support.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;gpui = { git = &#34;https://github.com/huacnlee/zed.git&#34;, branch = &#34;webview&#34; }&#xA;gpui-component = { git = &#34;https://github.com/longbridge/gpui-component.git&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;WebView&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Still early and experimental; there are a lot of limitations.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;GPUI Component has a &lt;code&gt;WebView&lt;/code&gt; element based on &lt;a href=&#34;https://github.com/tauri-apps/wry&#34;&gt;Wry&lt;/a&gt;. This is an optional feature, which you can enable with a feature flag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;gpui-component = { git = &#34;https://github.com/longbridge/gpui-component.git&#34;, features = [&#34;webview&#34;] }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More usage examples can be found in the &lt;a href=&#34;https://github.com/longbridge/gpui-component/tree/main/crates/story&#34;&gt;story&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;Icons&lt;/h3&gt; &#xA;&lt;p&gt;GPUI Component has an &lt;code&gt;Icon&lt;/code&gt; element, but it does not include SVG files by default.&lt;/p&gt; &#xA;&lt;p&gt;The example uses &lt;a href=&#34;https://lucide.dev&#34;&gt;Lucide&lt;/a&gt; icons, but you can use any icons you like. Just name the SVG files as defined in &lt;a href=&#34;https://github.com/longbridge/gpui-component/raw/main/crates/ui/src/icon.rs#L86&#34;&gt;IconName&lt;/a&gt;. You can add any icons you need to your project.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;We have a gallery of applications built with GPUI Component.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More examples can be found in the &lt;code&gt;examples&lt;/code&gt; directory. You can run them with &lt;code&gt;cargo run --example &amp;lt;example_name&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://raw.githubusercontent.com/longbridge/gpui-component/main/DEVELOPMENT&#34;&gt;DEVELOPMENT&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Apache-2.0&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;UI design based on &lt;a href=&#34;https://ui.shadcn.com&#34;&gt;shadcn/ui&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Icons from &lt;a href=&#34;https://lucide.dev&#34;&gt;Lucide&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>trifectatechfoundation/sudo-rs</title>
    <updated>2025-05-09T01:35:17Z</updated>
    <id>tag:github.com,2025-05-09:/trifectatechfoundation/sudo-rs</id>
    <link href="https://github.com/trifectatechfoundation/sudo-rs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A memory safe implementation of sudo and su.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;sudo-rs&lt;/h1&gt; &#xA;&lt;p&gt;A safety oriented and memory safe implementation of sudo and su written in Rust.&lt;/p&gt; &#xA;&lt;h2&gt;Status of this project&lt;/h2&gt; &#xA;&lt;p&gt;Sudo-rs is being developed further; features you might expect from original sudo may still be unimplemented or not planned. If there is an important one you need, please request it using the issue tracker. If you encounter any usability bugs, also please report them on the &lt;a href=&#34;https://github.com/trifectatechfoundation/sudo-rs/issues&#34;&gt;issue tracker&lt;/a&gt;. Suspected vulnerabilities can be reported on our &lt;a href=&#34;https://github.com/trifectatechfoundation/sudo-rs/security&#34;&gt;security page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;An &lt;a href=&#34;https://raw.githubusercontent.com/trifectatechfoundation/sudo-rs/main/docs/audit/audit-report-sudo-rs.pdf&#34;&gt;audit of sudo-rs version 0.2.0&lt;/a&gt; has been performed in August 2023. The findings from that audit are addressed in the current version.&lt;/p&gt; &#xA;&lt;p&gt;Sudo-rs currently is targeted for Linux-based operating systems only; Linux kernel 5.9 or newer is necessary to run sudo-rs.&lt;/p&gt; &#xA;&lt;h2&gt;Installing sudo-rs&lt;/h2&gt; &#xA;&lt;p&gt;The recommended way to start using &lt;code&gt;sudo-rs&lt;/code&gt; is via the package manager of your Linux distribution.&lt;/p&gt; &#xA;&lt;h3&gt;Debian/Ubuntu&lt;/h3&gt; &#xA;&lt;p&gt;If you are running Debian 13 (trixie) or later, or Ubuntu 24.04 (Noble Numbat) or later, you can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;apt-get install sudo-rs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will offer the functionality using the commands &lt;code&gt;su-rs&lt;/code&gt; and &lt;code&gt;sudo-rs&lt;/code&gt;. If you want to invoke sudo-rs via the usual commands &lt;code&gt;sudo&lt;/code&gt; and &lt;code&gt;su&lt;/code&gt; instead, prepend &lt;code&gt;/usr/lib/cargo/bin&lt;/code&gt; to your current &lt;code&gt;$PATH&lt;/code&gt; variable.&lt;/p&gt; &#xA;&lt;h3&gt;Fedora&lt;/h3&gt; &#xA;&lt;p&gt;If you are running Fedora 38 or later, you can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;dnf install sudo-rs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will offer the functionality using the commands &lt;code&gt;su-rs&lt;/code&gt; and &lt;code&gt;sudo-rs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Arch Linux&lt;/h3&gt; &#xA;&lt;p&gt;Arch Linux can be installed from the distribution repositories:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pacman -S sudo-rs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will offer the functionality using the commands &lt;code&gt;su-rs&lt;/code&gt; and &lt;code&gt;sudo-rs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Installing our pre-compiled x86-64 binaries&lt;/h3&gt; &#xA;&lt;p&gt;You can also switch to sudo-rs manually by using our pre-compiled tarballs. We currently only offer these for x86-64 systems.&lt;/p&gt; &#xA;&lt;p&gt;We recommend installing sudo-rs and su-s in your &lt;code&gt;/usr/local&lt;/code&gt; hierarchy so it can co-exist with your existing sudo installation. You can achieve this using the commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo tar -C /usr/local -xvf sudo-VERSION.tar.gz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and for su-rs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo tar -C /usr/local -xvf su-VERSION.tar.gz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will install sudo-rs and su-rs in &lt;code&gt;/usr/local/bin&lt;/code&gt; using the usual commands &lt;code&gt;sudo&lt;/code&gt; and &lt;code&gt;su&lt;/code&gt;; it will also install our version of &lt;code&gt;visudo&lt;/code&gt; in that location.&lt;/p&gt; &#xA;&lt;p&gt;Of course, if you &lt;strong&gt;don&#39;t&lt;/strong&gt; have Todd Miller&#39;s &lt;code&gt;sudo&lt;/code&gt; installed, you also have to make sure that:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;You manually create a &lt;code&gt;/etc/sudoers&lt;/code&gt; or &lt;code&gt;/etc/sudoers-rs&lt;/code&gt; file, this could be as simple as:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Defaults secure_path=&#34;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&#34;&#xA;&#xA;%sudo ALL=(ALL:ALL) ALL&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;code&gt;sudo-rs&lt;/code&gt; will try to process &lt;code&gt;/etc/sudoers-rs&lt;/code&gt; exists if it exists, otherwise it will use &lt;code&gt;/etc/sudoers&lt;/code&gt;. For an explanation of the sudoers syntax you can look at the &lt;a href=&#34;https://www.sudo.ws/docs/man/sudoers.man/&#34;&gt;sudoers man page&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;(Strongly recommended) You create &lt;code&gt;/etc/pam.d/sudo&lt;/code&gt; and &lt;code&gt;/etc/pam.d/sudo-i&lt;/code&gt; files that contain:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;session required pam_limits.so&#xA;&#xA;@include common-auth&#xA;@include common-account&#xA;@include common-session-noninteractive&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you don&#39;t do this, either a &#34;fallback&#34; PAM policy will be used or &lt;code&gt;sudo-rs&lt;/code&gt; will simply refuse to run since it cannot initialize PAM. On FreeBSD, you may want to put these files in &lt;code&gt;/usr/local/etc/pam.d&lt;/code&gt; instead.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Building from source&lt;/h3&gt; &#xA;&lt;p&gt;Sudo-rs is written in Rust. The minimum required Rust version is 1.70. If your Linux distribution does not package that version (or a later one), you can always install the most recent version through &lt;a href=&#34;https://rustup.rs/&#34;&gt;rustup&lt;/a&gt;. You also need the C development files for PAM (&lt;code&gt;libpam0g-dev&lt;/code&gt; on Debian, &lt;code&gt;pam-devel&lt;/code&gt; on Fedora).&lt;/p&gt; &#xA;&lt;p&gt;On Ubuntu or Debian-based systems, use the following command to install the PAM development library:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install libpam0g-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Fedora, CentOS and other Red Hat-based systems, you can use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo yum install pam-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With dependencies installed, building sudo-rs is a simple matter of:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This produces a binary &lt;code&gt;target/release/sudo&lt;/code&gt;. However, this binary must have the setuid flag set and must be owned by the root user in order to provide any useful functionality. Consult your operating system manual for details.&lt;/p&gt; &#xA;&lt;p&gt;Sudo-rs then also needs the configuration files; please follow the installation suggestions in the previous section.&lt;/p&gt; &#xA;&lt;h3&gt;Feature flags&lt;/h3&gt; &#xA;&lt;h4&gt;--features pam-login&lt;/h4&gt; &#xA;&lt;p&gt;By default, sudo-rs will use the PAM service name &lt;code&gt;sudo&lt;/code&gt;. On Debian and Fedora systems, it is customary that the name &lt;code&gt;sudo-i&lt;/code&gt; is used when the &lt;code&gt;-i / --login&lt;/code&gt; command line option is used. To get this behaviour, enable the &lt;code&gt;pam-login&lt;/code&gt; feature when building:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo build --release --features pam-login&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This feature is enabled on our pre-supplied binaries.&lt;/p&gt; &#xA;&lt;h4&gt;--features apparmor&lt;/h4&gt; &#xA;&lt;p&gt;sudo-rs has support for selecting AppArmor profile on Linux distributions that support AppArmor such as Debian and Ubuntu. To enable this feature, build sudo-rs with apparmor support enabled:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo build --release --features apparmor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This feature is disabled on our pre-supplied binaries.&lt;/p&gt; &#xA;&lt;h2&gt;Differences from original sudo&lt;/h2&gt; &#xA;&lt;p&gt;sudo-rs supports less functionality than sudo. Some of this is by design. In most cases you will get a clear error if you try something that is not supported (e.g. use a configuration flag or command line option that is not implemented).&lt;/p&gt; &#xA;&lt;p&gt;Exceptions to the above, with respect to your &lt;code&gt;/etc/sudoers&lt;/code&gt; configuration:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;use_pty&lt;/code&gt; is enabled by default, but can be disabled.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;env_reset&lt;/code&gt; is ignored --- this is always enabled.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;visiblepw&lt;/code&gt; is ignored --- this is always disabled.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;verifypw&lt;/code&gt; is currently ignored; a password is always necessary for &lt;code&gt;sudo -v&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mail_badpass&lt;/code&gt;, &lt;code&gt;always_set_home&lt;/code&gt;, &lt;code&gt;always_query_group_plugin&lt;/code&gt; and &lt;code&gt;match_group_by_gid&lt;/code&gt; are not applicable to our implementation, but ignored for compatibility reasons.&lt;/li&gt; &#xA; &lt;li&gt;the (NO)PASSWD tag on the &#34;list&#34; pseudocommand will determine whether a password is required for the &lt;code&gt;sudo -U --list&lt;/code&gt; command, instead of &lt;code&gt;listpw&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some other notable restrictions to be aware of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Some functionality is not yet supported; in particular &lt;code&gt;sudoedit&lt;/code&gt; and preventing shell escapes using &lt;code&gt;NOEXEC&lt;/code&gt; and &lt;code&gt;NOINTERCEPT&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Sudo-rs always uses PAM for authentication, so your system must be set up for PAM. Sudo-rs will use the &lt;code&gt;sudo&lt;/code&gt; and &lt;code&gt;sudo-i&lt;/code&gt; service configuration. This also means that resource limits, umasks, etc have to be configured via PAM and not through the sudoers file.&lt;/li&gt; &#xA; &lt;li&gt;sudo-rs will not include the sendmail support of original sudo.&lt;/li&gt; &#xA; &lt;li&gt;The sudoers file must be valid UTF-8.&lt;/li&gt; &#xA; &lt;li&gt;To prevent a common configuration mistake in the sudoers file, wildcards are not supported in &lt;em&gt;argument positions&lt;/em&gt; for a command. E.g., &lt;code&gt;%sudoers ALL = /sbin/fsck*&lt;/code&gt; will allow &lt;code&gt;sudo fsck&lt;/code&gt; and &lt;code&gt;sudo fsck_exfat&lt;/code&gt; as expected, but &lt;code&gt;%sudoers ALL = /bin/rm *.txt&lt;/code&gt; will not allow an operator to run &lt;code&gt;sudo rm README.txt&lt;/code&gt;, nor &lt;code&gt;sudo rm -rf /home .txt&lt;/code&gt;, as with original sudo.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you find a common use case for original sudo missing, please create a feature request for it in our issue tracker.&lt;/p&gt; &#xA;&lt;h2&gt;Aim of the project&lt;/h2&gt; &#xA;&lt;p&gt;Our current target is to build a drop-in replacement for all common use cases of sudo. For the sudoers config syntax this means that we support the default configuration files of common Linux distributions. Our implementation should support all commonly used command line options from the original sudo implementation.&lt;/p&gt; &#xA;&lt;p&gt;Some parts of the original sudo are explicitly not in scope. Sudo has a large and rich history and some of the features available in the original sudo implementation are largely unused or only available for legacy platforms. In order to determine which features make it we both consider whether the feature is relevant for modern systems, and whether it will receive at very least decent usage. Finally, of course, a feature should not compromise the safety of the whole program.&lt;/p&gt; &#xA;&lt;p&gt;Our &lt;code&gt;su&lt;/code&gt; implementation is made using the building blocks we created for our sudo implementation. It is a suitable replacement for the &lt;code&gt;su&lt;/code&gt; distributed by &lt;a href=&#34;https://github.com/util-linux/util-linux&#34;&gt;util-linux&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Future work&lt;/h2&gt; &#xA;&lt;p&gt;While our initial target is a drop-in replacement for most basic use cases of sudo, our work may evolve beyond that target. We are also looking into alternative ways to configure sudo without the sudoers config file syntax and to extract parts of our work in usable crates for other people.&lt;/p&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;p&gt;The initial development of sudo-rs was started and funded by the &lt;a href=&#34;https://www.abetterinternet.org/&#34;&gt;Internet Security Research Group&lt;/a&gt; as part of the &lt;a href=&#34;https://www.memorysafety.org/&#34;&gt;Prossimo project&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;Sudo-rs is an independent implementation, but it incorporates documentation and Rust translations of code from &lt;a href=&#34;https://www.sudo.ws/&#34;&gt;sudo&lt;/a&gt;, maintained by Todd C. Miller. We thank Todd and the other sudo contributors for their work.&lt;/p&gt; &#xA;&lt;p&gt;An independent security audit of sudo-rs was made possible by the &lt;a href=&#34;https://nlnet.nl/&#34;&gt;NLNet Foundation&lt;/a&gt;, who also &lt;a href=&#34;https://nlnet.nl/project/sudo-rs/&#34;&gt;sponsored&lt;/a&gt; work on increased compatibility with the original sudo and the FreeBSD port.&lt;/p&gt; &#xA;&lt;p&gt;The sudo-rs project would not have existed without the support of its sponsors, a full overview is maintained at &lt;a href=&#34;https://trifectatech.org/initiatives/privilege-boundary/&#34;&gt;https://trifectatech.org/initiatives/privilege-boundary/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>