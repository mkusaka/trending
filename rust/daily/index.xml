<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-21T01:36:35Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>BoundaryML/baml</title>
    <updated>2024-06-21T01:36:35Z</updated>
    <id>tag:github.com,2024-06-21:/BoundaryML/baml</id>
    <link href="https://github.com/BoundaryML/baml" rel="alternate"></link>
    <summary type="html">&lt;p&gt;BAML is a templating language to write typed LLM functions using jinja. Check out the promptfiddle.com playground&lt;/p&gt;&lt;hr&gt;&lt;a href=&#34;https://boundaryml.com?utm_source=github&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://www.boundaryml.com/gloo-ai-square-256.png&#34;&gt; &#xA;  &lt;img src=&#34;https://www.boundaryml.com/gloo-ai-square-256.png&#34; height=&#34;64&#34;&gt; &#xA; &lt;/picture&gt; &lt;/a&gt; &#xA;&lt;h1&gt;BAML&lt;/h1&gt; &#xA;&lt;p&gt;An LLM function is a prompt template with some defined input variables, and a specific output type like a class, enum, union, optional string, etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;BAML is a configuration file format to write better and cleaner LLM functions.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;With BAML you can write and test a complex LLM function in 1/10 of the time it takes to setup a python LLM testing environment.&lt;/p&gt; &#xA;&lt;h2&gt;Try it out in the playground -- &lt;a href=&#34;https://promptfiddle.com&#34;&gt;PromptFiddle.com&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Share your creations and ask questions in our &lt;a href=&#34;https://discord.gg/BTNBeXGuaS&#34;&gt;Discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Python and Typescript support&lt;/strong&gt;: Plug-and-play BAML with other languages&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Type validation&lt;/strong&gt;: more resilient to common LLM mistakes than Pydantic or Zod&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Wide model support&lt;/strong&gt;: Ollama, Openai, Anthropic. Tested on small models like Llama2&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Streaming&lt;/strong&gt;: Stream structured partial outputs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Realtime Prompt Previews&lt;/strong&gt;: See the full prompt always, even if it has loops and conditionals&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Testing support&lt;/strong&gt;: Test functions in the playground with 1 click.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Resilience and fallback features&lt;/strong&gt;: Add retries, redundancy, to your LLM calls&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Observability Platform&lt;/strong&gt;: Use Boundary Studio to visualize your functions and replay production requests with 1 click.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Companies using BAML&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zenfetch.com/&#34;&gt;Zenfetch&lt;/a&gt; - ChatGPT for your bookmarks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.vetrec.io/&#34;&gt;Vetrec&lt;/a&gt; - AI-powered Clinical Notes for Veterinarians&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.magnaplay.com/&#34;&gt;MagnaPlay&lt;/a&gt; - Production-quality machine translation for games&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aercompliance.com/&#34;&gt;Aer Compliance&lt;/a&gt; - AI-powered compliance tasks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.usehaven.ai/&#34;&gt;Haven&lt;/a&gt; - Automate Tenant communications with AI&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.muckrock.com/&#34;&gt;Muckrock&lt;/a&gt; - FOIA request tracking and filing&lt;/li&gt; &#xA; &lt;li&gt;and more! &lt;a href=&#34;https://calendly.com/boundaryml/meeting-with-founders&#34;&gt;Let us know&lt;/a&gt; if you want to be showcased or want to work with us 1-1 to solve your usecase.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/ENtBB6kkXH&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1119368998161752075.svg?logo=discord&amp;amp;label=Discord%20Community&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=boundaryml&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/boundaryml?style=social&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/ENtBB6kkXH&#34;&gt;Discord Office Hours&lt;/a&gt; - Come ask us anything! We hold office hours most days (9am - 12pm PST).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.boundaryml.com&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://app.boundaryml.com&#34;&gt;Boundary Studio&lt;/a&gt; - Observability of BAML functions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Starter projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BoundaryML/baml-examples/tree/main/nextjs-starter&#34;&gt;BAML + NextJS 14&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BoundaryML/baml-examples/tree/main/fastapi-starter&#34;&gt;BAML + FastAPI + Streaming&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;A BAML LLM Function&lt;/h2&gt; &#xA;&lt;p&gt;Here is how you extract a &#34;Resume&#34; from a chunk of free-form text. Run this prompt in &lt;a href=&#34;https://promptfiddle.com/extract-resume&#34;&gt;PromptFiddle&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note: BAML syntax highlight is not supported yet in Github -- so we apologize, we&#39;re working on it!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;// Declare some data models for my function, with descriptions&#xA;class Resume {&#xA;  name string&#xA;  education Education[] @description(&#34;Extract in the same order listed&#34;)&#xA;  skills string[] @description(&#34;Only include programming languages&#34;)&#xA;}&#xA;&#xA;class Education {&#xA;  school string&#xA;  degree string&#xA;  year int&#xA;}&#xA;&#xA;function ExtractResume(resume_text: string) -&amp;gt; Resume {&#xA;  // LLM client with params you want (not pictured)&#xA;  client GPT4Turbo&#xA;&#xA;  // BAML prompts use Jinja syntax&#xA;  prompt #&#34;&#xA;    Parse the following resume and return a structured representation of the data in the schema below.&#xA;&#xA;    Resume:&#xA;    ---&#xA;    {{ resume_text }}&#xA;    ---&#xA;&#xA;    {# special Jinja macro to print the output instructions. #}&#xA;    {{ ctx.output_format }}&#xA;&#xA;    JSON:&#xA;  &#34;#&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you&#39;re done iterating on it using the interactive BAML VSCode Playground, you can convert it to Python or TS using the BAML CLI.&lt;/p&gt; &#xA;&lt;h2&gt;Usage in Python&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# baml_client is autogenerated&#xA;from baml_client import baml as b&#xA;# BAML types get converted to Pydantic models&#xA;from baml_client.baml_types import Resume&#xA;&#xA;async def main():&#xA;    resume_text = &#34;&#34;&#34;Jason Doe&#xA;Python, Rust&#xA;University of California, Berkeley, B.S.&#xA;in Computer Science, 2020&#xA;Also an expert in Tableau, SQL, and C++&#xA;&#34;&#34;&#34;&#xA;&#xA;    # this function comes from the autogenerated &#34;baml_client&#34;.&#xA;    # It calls the LLM you specified and handles the parsing.&#xA;    resume = await b.ExtractResume(resume_text)&#xA;&#xA;    # Fully type-checked and validated!&#xA;    assert isinstance(resume, Resume)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage in TypeScript&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;// baml_client is autogenerated&#xA;import baml as b from &#34;@/baml_client&#34;;&#xA;// BAML also auto generates types for all your data models&#xA;import { Resume } from &#34;@/baml_client/types&#34;;&#xA;&#xA;function getResume(resumeUrl: string): Promise&amp;lt;Resume&amp;gt; {&#xA;  const resume_text = await loadResume(resumeUrl);&#xA;  // Call the BAML function, which calls the LLM client you specified&#xA;  // and handles all the parsing.&#xA;  return b.ExtractResume({ resumeText: content });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With BAML you have:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Better output parsing than Pydantic or Zod -- more on this later&lt;/li&gt; &#xA; &lt;li&gt;Your code is looking as clean as ever&lt;/li&gt; &#xA; &lt;li&gt;Calling your LLM feels like calling a normal function, with actual type guarantees.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;BAML Toolchain&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Capabilities&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VSCode Extension &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=gloo.baml&#34;&gt;install&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Syntax highlighting for BAML files&lt;br&gt; Real-time prompt preview &lt;br&gt; Testing UI&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Boundary Studio &lt;a href=&#34;https://app.boundaryml.com&#34;&gt;open&lt;/a&gt;&lt;br&gt;(not open source)&lt;/td&gt; &#xA;   &lt;td&gt;Type-safe observability &lt;br&gt;Labeling&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Python&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;pip install baml-py&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Typescript&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;npm install @boundaryml/baml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;2. Download VSCode extension&lt;/h3&gt; &#xA;&lt;p&gt;Search for &#34;BAML&#34; or &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=boundary.Baml-extension&#34;&gt;Click here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you are using python, enable typechecking in VSCode’s settings.json:&lt;/p&gt; &#xA; &lt;p&gt;&#34;python.analysis.typecheckingMode&#34;: &#34;basic&#34;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;3. Add BAML to any existing project&lt;/h3&gt; &#xA;&lt;p&gt;Typescript: &lt;code&gt;npx baml-cli init&lt;/code&gt; Python: &lt;code&gt;baml-cli init&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;4. OR use these starter projects:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BoundaryML/baml-examples/tree/main/nextjs-starter&#34;&gt;NextJS 14&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BoundaryML/baml-examples/tree/main/fastapi-starter&#34;&gt;FastAPI&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Observability&lt;/h2&gt; &#xA;&lt;p&gt;Analyze, label, and trace each request in &lt;a href=&#34;https://app.boundaryml.com&#34;&gt;Boundary Studio&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/BoundaryML/baml/canary/docs/images/v3/pipeline_view.png&#34; width=&#34;80%&#34; alt=&#34;Boundary Studio&#34;&gt; &#xA;&lt;h2&gt;Why not just use an existing Python framework?&lt;/h2&gt; &#xA;&lt;p&gt;Existing frameworks can work pretty well (especially for very simple prompts), but they run into limitations when working with structured data and complex logic.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Iteration speed is slow&lt;/summary&gt; &#xA; &lt;p&gt;There are two reasons:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;strong&gt;You can&#39;t visualize your prompt in realtime so you need to run it over and over to figure out what string the LLM is actually ingesting.&lt;/strong&gt; This gets much worse if you build your prompt using conditionals and loops, or have structured outputs. BAML&#39;s prompt-preview feature in the playground works even with complex logic.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Poor testing support&lt;/strong&gt;. Testing prompts is 80% of the battle. Developers have to deal with copy pasting prompts from one playground UI to the codebase, and if you have structured outputs you&#39;ll need to generate the pydantic json schema yourself and do more copy-pasting around.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;br&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Pydantic and Zod weren&#39;t made with LLMs in mind&lt;/summary&gt; &#xA; &lt;p&gt;LLMs don&#39;t always output correct JSON.&lt;/p&gt; &#xA; &lt;p&gt;Sometimes you get something like this text blob below, where the json blob is in-between some other text:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;Based on my observations X Y Z...., it seems the answer is:&#xA;{&#xA;  &#34;sentiment&#34;: Happy,&#xA;}&#xA;Hope this is what you wanted!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;This isn&#39;t valid JSON, since it&#39;s missing quotes in &#34;Happy&#34; and has some prefix text that you will have to regex out yourself before trying to parse using Pydantic or Zod. BAML handles this and many more cases, such as identifying &lt;code&gt;Enums&lt;/code&gt; in LLM string responses.. See &lt;a href=&#34;https://raw.githubusercontent.com/BoundaryML/baml/canary/#flexible-parsing&#34;&gt;flexible parsing&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Aliasing issues&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Prompt engineering requires you to think carefully about what the name of each key in the schema is. Rather than changing your code everytime you want to try a new name out, you can alias fields to a different name and convert them back into the original field name during parsing.&lt;/p&gt; &#xA; &lt;p&gt;Here&#39;s how BAML differs from these frameworks:&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Aliasing object fields in Zod&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;const UserSchema = z.object({&#xA;  first_name: z.string(),&#xA;}).transform((user) =&amp;gt; ({&#xA;  firstName: user.first_name&#xA;}));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Aliasing object fields BAML&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;class User {&#xA;  first_name string @alias(&#34;firstName&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Aliasing enum values in Zod/Pydantic&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Zod: not possible&lt;/p&gt; &#xA; &lt;p&gt;Pydantic:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Sentiment(Enum):&#xA;  HAPPY = (&#34;ecstatic&#34;)&#xA;  SAD = (&#34;sad&#34;)&#xA;&#xA;  def __init__(self, alias):&#xA;    self._alias = alias&#xA;&#xA;  @property&#xA;  def alias(self):&#xA;    return self._alias&#xA;&#xA;  @classmethod&#xA;  def from_string(cls, category: str) -&amp;gt; &#34;Sentiment&#34;:&#xA;    for c in cls:&#xA;      if c.alias == alias:&#xA;        return c&#xA;      raise ValueError(f&#34;Invalid alias: {alias}&#34;)&#xA;  ...&#xA;  # more code here to actually parse the aliases&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Aliasing enum values in BAML&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;enum Sentiment {&#xA;  HAPPY @alias(&#34;ecstatic&#34;)&#xA;  SAD @alias(&#34;sad&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;br&gt; Finally, BAML is more of an ecosystem designed to bring you the best developer experience for doing any kind of LLM function-calling, which is why we&#39;ve built tools like the playground and Boundary Studio -- our observability platform. &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Why make a new language?&lt;/h3&gt; &#xA;&lt;p&gt;We basically wanted &lt;a href=&#34;https://jinja.palletsprojects.com/en/3.1.x/&#34;&gt;Jinja&lt;/a&gt;, but with types + function declarations, so we decided to make it happen. Earlier we tried making a YAML-based sdk, and even a Python SDK, but they were not powerful enough.&lt;/p&gt; &#xA;&lt;img src=&#34;https://imgs.xkcd.com/comics/standards.png&#34;&gt; &#xA;&lt;h3&gt;Does BAML use LLMs to generate code?&lt;/h3&gt; &#xA;&lt;p&gt;No, the BAML dependency transpiles the code using Rust 🦀. It takes just a few milliseconds!&lt;/p&gt; &#xA;&lt;h3&gt;What does BAML stand for?&lt;/h3&gt; &#xA;&lt;p&gt;Basically, A Made-up Language&lt;/p&gt; &#xA;&lt;h3&gt;How do I deploy with BAML?&lt;/h3&gt; &#xA;&lt;p&gt;BAML files are only used to generate Python or Typescript code. Just commit the generated code as you would any other python code, and you&#39;re good to go&lt;/p&gt; &#xA;&lt;h3&gt;Is BAML secure?&lt;/h3&gt; &#xA;&lt;p&gt;Your BAML-generated code never talks to our servers. We don’t proxy LLM APIs -- you call them directly from your machine. We only publish traces to our servers if you enable Boundary Studio explicitly.&lt;/p&gt; &#xA;&lt;h3&gt;How do you make money?&lt;/h3&gt; &#xA;&lt;p&gt;BAML and the VSCode extension will always be 100% free and open-source.&lt;/p&gt; &#xA;&lt;p&gt;Our paid capabilities only start if you use Boundary Studio, which focuses on Monitoring, Collecting Feedback, and Improving your AI pipelines. Contact us for pricing details at &lt;a href=&#34;mailto:contact@boundaryml.com?subject=I&#39;d%20love%20to%20learn%20more%20about%20boundary&#34;&gt;contact@boundaryml.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;Please do not file GitHub issues or post on our public forum for security vulnerabilities, as they are public!&lt;/p&gt; &#xA;&lt;p&gt;Boundary takes security issues very seriously. If you have any concerns about BAML or believe you have uncovered a vulnerability, please get in touch via the e-mail address &lt;a href=&#34;mailto:contact@boundaryml.com&#34;&gt;contact@boundaryml.com&lt;/a&gt;. In the message, try to provide a description of the issue and ideally a way of reproducing it. The security team will get back to you as soon as possible.&lt;/p&gt; &#xA;&lt;p&gt;Note that this security address should be used only for undisclosed vulnerabilities. Please report any security problems to us before disclosing it publicly.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Made with ❤️ by Boundary&lt;/p&gt; &#xA;&lt;p&gt;HQ in Seattle, WA&lt;/p&gt; &#xA;&lt;p&gt;P.S. We&#39;re hiring for software engineers. &lt;a href=&#34;https://raw.githubusercontent.com/BoundaryML/baml/canary/founders@boundaryml.com&#34;&gt;Email us&lt;/a&gt; or reach out on &lt;a href=&#34;https://discord.gg/ENtBB6kkXH&#34;&gt;discord&lt;/a&gt;!&lt;/p&gt;</summary>
  </entry>
</feed>