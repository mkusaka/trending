<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-15T01:35:59Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>JohnnyMorganz/StyLua</title>
    <updated>2024-06-15T01:35:59Z</updated>
    <id>tag:github.com,2024-06-15:/JohnnyMorganz/StyLua</id>
    <link href="https://github.com/JohnnyMorganz/StyLua" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An opinionated Lua code formatter&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt; StyLua&lt;br&gt; &lt;a href=&#34;https://crates.io/crates/stylua&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/stylua.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JohnnyMorganz/StyLua/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/JohnnyMorganz/StyLua/actions/workflows/ci.yml/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/JohnnyMorganz/StyLua&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/JohnnyMorganz/StyLua/branch/main/graph/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;/h1&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;An opinionated code formatter for Lua 5.1, 5.2, 5.3, 5.4 and &lt;a href=&#34;https://roblox.github.io/luau/&#34;&gt;Luau&lt;/a&gt;, built using &lt;a href=&#34;https://github.com/Kampfkarren/full-moon&#34;&gt;full-moon&lt;/a&gt;. StyLua is inspired by the likes of &lt;a href=&#34;https://github.com/prettier/prettier&#34;&gt;prettier&lt;/a&gt;, it parses your Lua codebase, and prints it back out from scratch, enforcing a consistent code style.&lt;/p&gt; &#xA;&lt;p&gt;StyLua mainly follows the &lt;a href=&#34;https://roblox.github.io/lua-style-guide/&#34;&gt;Roblox Lua Style Guide&lt;/a&gt;, with a few deviations.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;There are multiple ways to install StyLua:&lt;/p&gt; &#xA;&lt;h3&gt;With Github Releases&lt;/h3&gt; &#xA;&lt;p&gt;Pre-built binaries are available on the &lt;a href=&#34;https://github.com/JohnnyMorganz/StyLua/releases&#34;&gt;GitHub Releases Page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By default, these are built with &lt;strong&gt;all syntax variants enabled (Lua 5.2, 5.3, 5.4 and Luau)&lt;/strong&gt;, to cover all possible codebases. If you would like to format a specific Lua version only, see &lt;a href=&#34;https://raw.githubusercontent.com/JohnnyMorganz/StyLua/main/#from-cratesio&#34;&gt;installing from crates.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;From Crates.io&lt;/h3&gt; &#xA;&lt;p&gt;If you have &lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt; installed, you can install StyLua using cargo. By default, this builds for just Lua 5.1. You can pass the &lt;code&gt;--features &amp;lt;flag&amp;gt;&lt;/code&gt; argument to build for Lua 5.2 (&lt;code&gt;lua52&lt;/code&gt;), Lua 5.3 (&lt;code&gt;lua53&lt;/code&gt;), Lua 5.4 (&lt;code&gt;lua54&lt;/code&gt;) or Luau (&lt;code&gt;luau&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo install stylua&#xA;cargo install stylua --features lua52&#xA;cargo install stylua --features lua53&#xA;cargo install stylua --features lua54&#xA;cargo install stylua --features luau&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;GitHub Actions&lt;/h3&gt; &#xA;&lt;p&gt;You can use the &lt;a href=&#34;https://github.com/marketplace/actions/stylua&#34;&gt;stylua-action&lt;/a&gt; GitHub Action in your CI to install and run StyLua. This action uses the prebuilt GitHub release binaries, instead of running cargo install, for faster CI times.&lt;/p&gt; &#xA;&lt;h3&gt;pre-commit&lt;/h3&gt; &#xA;&lt;p&gt;You can use StyLua with &lt;a href=&#34;https://pre-commit.com/&#34;&gt;pre-commit&lt;/a&gt;. There are 3 possible pre-commit hooks available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;stylua&lt;/code&gt;: installs via cargo - requires the Rust toolchain&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stylua-system&lt;/code&gt;: runs a &lt;code&gt;stylua&lt;/code&gt; binary available on the PATH. The binary must be pre-installed&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stylua-github&lt;/code&gt;: automatically installs the relevant prebuilt binary from GitHub Actions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Add the following to your &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- repo: https://github.com/JohnnyMorganz/StyLua&#xA;  rev: v0.20.0&#xA;  hooks:&#xA;    - id: stylua # or stylua-system / stylua-github&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;npm&lt;/h3&gt; &#xA;&lt;p&gt;StyLua is available as a binary &lt;a href=&#34;https://www.npmjs.com/package/@johnnymorganz/stylua-bin&#34;&gt;published to npm&lt;/a&gt; as &lt;code&gt;@johnnymorganz/stylua-bin&lt;/code&gt;. This is a thin wrapper which installs the binary and allows it to be run through npm.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npx @johnnymorganz/stylua-bin --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;StyLua is also available as a WASM library at &lt;a href=&#34;https://www.npmjs.com/package/@johnnymorganz/stylua&#34;&gt;@johnnymorganz/stylua&lt;/a&gt;. It is usable in Node.js, or in the browser (using a bundler).&lt;/p&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;StyLua is available on the &lt;a href=&#34;https://hub.docker.com/r/johnnymorganz/stylua&#34;&gt;Docker Hub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are using Docker, the easiest way to install StyLua is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;COPY --from=JohnnyMorganz/StyLua:0.20.0 /stylua /usr/bin/stylua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Homebrew&lt;/h3&gt; &#xA;&lt;p&gt;StyLua is available on macOS via the &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt; package manager.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install stylua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Other Installation Methods&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=JohnnyMorganz.stylua&#34;&gt;VSCode Extension&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LPGhatguy/aftman&#34;&gt;Aftman&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;aftman add johnnymorganz/stylua@0.14.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A community maintained package repository. Please note, these packages are maintained by third-parties and we do not control their packaging manifests.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/stylua/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/vertical-allrepos/stylua.svg?header=Community%20Packages&#34; alt=&#34;Community Packages&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Other Editor Integrations&lt;/h3&gt; &#xA;&lt;p&gt;Note that these integrations require the StyLua binary to already be installed and available on your system.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sublime: &lt;a href=&#34;https://github.com/aerobounce/Sublime-Pretty-Lua&#34;&gt;Sublime Text Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Neovim: &lt;a href=&#34;https://github.com/ckipp01/stylua-nvim&#34;&gt;stylua-nvim&lt;/a&gt; / &lt;a href=&#34;https://github.com/wesleimp/stylua.nvim&#34;&gt;stylua.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Once installed, pass the files to format to the CLI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;stylua src/ foo.lua bar.lua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command will format the &lt;code&gt;foo.lua&lt;/code&gt; and &lt;code&gt;bar.lua&lt;/code&gt; file, and search down the &lt;code&gt;src&lt;/code&gt; directory to format any files within it. StyLua can also read from stdin, by using &lt;code&gt;-&lt;/code&gt; as the file name.&lt;/p&gt; &#xA;&lt;h3&gt;Glob Filtering&lt;/h3&gt; &#xA;&lt;p&gt;By default, when searching through a directory, StyLua looks for all files matching the glob &lt;code&gt;**/*.lua&lt;/code&gt; (or &lt;code&gt;**/*.luau&lt;/code&gt; when &lt;code&gt;luau&lt;/code&gt; is enabled) to format. You can also specify an explicit glob pattern to match against when searching:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;stylua --glob &#39;**/*.luau&#39; -- src # format all files in src matching **/*.luau&#xA;stylua -g &#39;*.lua&#39; -g &#39;!*.spec.lua&#39; -- . # format all Lua files except test files ending with `.spec.lua`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note, if you are using the glob argument, it can take in multiple strings, so &lt;code&gt;--&lt;/code&gt; is required to break between the glob pattern and the files to format.&lt;/p&gt; &#xA;&lt;p&gt;By default, glob filtering (and &lt;code&gt;.styluaignore&lt;/code&gt; files) are only applied for directory traversal and searching. Files passed directly (e.g. &lt;code&gt;stylua foo.txt&lt;/code&gt;) will override the glob / ignore and always be formatted. To disable this behaviour, pass the &lt;code&gt;--respect-ignores&lt;/code&gt; flag (&lt;code&gt;stylua --respect-ignores foo.txt&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Filtering using &lt;code&gt;.styluaignore&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can create a &lt;code&gt;.styluaignore&lt;/code&gt; file, with a format similar to &lt;code&gt;.gitignore&lt;/code&gt;. Any files matching the globs in the ignore file will be ignored by StyLua. For example, for a &lt;code&gt;.styluaignore&lt;/code&gt; file with the following contents:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;vendor/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;running &lt;code&gt;stylua .&lt;/code&gt; will ignore the &lt;code&gt;vendor/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;--check&lt;/code&gt;: Checking files for formatting&lt;/h3&gt; &#xA;&lt;p&gt;To check whether files have been formatted (but not write directly to them), use the &lt;code&gt;--check&lt;/code&gt; flag. It will take files as input, and output a diff to stdout instead of rewriting the file contents. If there are files which haven&#39;t been fully formatted, StyLua will exit with status code 1.&lt;/p&gt; &#xA;&lt;p&gt;By default, we provide a custom Standard diff view, but this can be configured:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--output-format=unified&lt;/code&gt;: output a unified diff, which can be consumed by tools like &lt;code&gt;patch&lt;/code&gt; or &lt;code&gt;delta&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--output-format=json&lt;/code&gt;: output JSON representing the changes, useful for machine-readable output&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;code&gt;--verify&lt;/code&gt;: Verifying formatting output&lt;/h3&gt; &#xA;&lt;p&gt;As a safety measure, the &lt;code&gt;--verify&lt;/code&gt; flag can be passed to StyLua, and StyLua will verify the output of all formatting before saving it to a file.&lt;/p&gt; &#xA;&lt;p&gt;If enabled, the tool will re-parse the formatted output to verify if the AST is still valid (no syntax errors) and is similar to the input (possible semantic changes).&lt;/p&gt; &#xA;&lt;p&gt;Useful when adopting StyLua in a large codebase, where it is difficult to verify all formatting is correct. Note that this may produce false positives and negatives - we recommend manual verification as well as running tests to confirm.&lt;/p&gt; &#xA;&lt;h3&gt;Ignoring parts of a file&lt;/h3&gt; &#xA;&lt;p&gt;To skip formatting a particular part of a file, you can add &lt;code&gt;-- stylua: ignore&lt;/code&gt; before it. This may be useful if there is a particular style you want to preseve for readability, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- stylua: ignore&#xA;local matrix = {&#xA;    { 0, 0, 0 },&#xA;    { 0, 0, 0 },&#xA;    { 0, 0, 0 },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Formatting can also be skipped over a block of code using &lt;code&gt;-- stylua: ignore start&lt;/code&gt; and &lt;code&gt;-- stylua: ignore end&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local foo = true&#xA;-- stylua: ignore start&#xA;local   bar   =   false&#xA;local  baz      = 0&#xA;-- stylua: ignore end&#xA;local foobar = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that ignoring cannot cross scope boundaries - once a block is exited, formatting will be re-enabled.&lt;/p&gt; &#xA;&lt;h3&gt;Formatting Ranges&lt;/h3&gt; &#xA;&lt;p&gt;To format a specific range within a file, use &lt;code&gt;--range-start &amp;lt;num&amp;gt;&lt;/code&gt; and/or &lt;code&gt;--range-end &amp;lt;num&amp;gt;&lt;/code&gt;. Both arguments are inclusive and optional - if an argument is not provided, the start/end of the file will be used respectively.&lt;/p&gt; &#xA;&lt;p&gt;Only whole statements lying within the range will be formatted. If part of a statement falls outside the range, the statement will be ignored.&lt;/p&gt; &#xA;&lt;p&gt;In editors, &lt;code&gt;Format Selection&lt;/code&gt; is supported.&lt;/p&gt; &#xA;&lt;h3&gt;Requires Sorting&lt;/h3&gt; &#xA;&lt;p&gt;StyLua has built-in support for sorting require statements. We group consecutive require statements into a single &#34;block&#34;, and then requires are sorted only within that block. Blocks of requires do not move around the file.&lt;/p&gt; &#xA;&lt;p&gt;We only include requires of the form &lt;code&gt;local NAME = require(EXPR)&lt;/code&gt;, and sort lexicographically based on &lt;code&gt;NAME&lt;/code&gt;. (We also sort Roblox services of the form &lt;code&gt;local NAME = game:GetService(EXPR)&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Requires sorting is off by default. To enable it, add the following to your &lt;code&gt;stylua.toml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[sort_requires]&#xA;enabled = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;StyLua is &lt;strong&gt;opinionated&lt;/strong&gt;, so only a few options are provided.&lt;/p&gt; &#xA;&lt;h3&gt;Finding the configuration&lt;/h3&gt; &#xA;&lt;p&gt;The CLI looks for &lt;code&gt;stylua.toml&lt;/code&gt; or &lt;code&gt;.stylua.toml&lt;/code&gt; in the directory where the tool was executed. If not found, we search for an &lt;code&gt;.editorconfig&lt;/code&gt; file, otherwise fall back to the default configuration. This feature can be disabled using &lt;code&gt;--no-editorconfig&lt;/code&gt;. See &lt;a href=&#34;https://editorconfig.org/&#34;&gt;EditorConfig&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;A custom path can be provided using &lt;code&gt;--config-path &amp;lt;path&amp;gt;&lt;/code&gt;. If the path provided is not found/malformed, StyLua will exit with an error.&lt;/p&gt; &#xA;&lt;p&gt;By default, the tool does not search further than the current directory. Recursively searching parent directories can be enabled using &lt;code&gt;--search-parent-directories&lt;/code&gt;. This will keep searching ancestors. If not found, it will then look in &lt;code&gt;$XDG_CONFIG_HOME&lt;/code&gt; / &lt;code&gt;$XDG_CONFIG_HOME/stylua&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: enabling searching outside of the current directory is NOT recommended due to possibilities of conflicting formatting:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;It is recommended to keep a &lt;code&gt;.stylua.toml&lt;/code&gt; file in your project root so that other developers can make use of the same configuration.&lt;/p&gt; &#xA;&lt;p&gt;If a project uses the default configuration of StyLua without a configuration file present, enabling external searching may cause conflicting formatting.&lt;/p&gt; &#xA;&lt;h3&gt;Options&lt;/h3&gt; &#xA;&lt;p&gt;StyLua only offers the following options:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;column_width&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;120&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Approximate line length for printing. Used as a guide for line wrapping - this is not a hard requirement: lines may fall under or over the limit.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;line_endings&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Unix&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Line endings type. Possible options: &lt;code&gt;Unix&lt;/code&gt; (LF) or &lt;code&gt;Windows&lt;/code&gt; (CRLF)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;indent_type&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Tabs&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Indent type. Possible options: &lt;code&gt;Tabs&lt;/code&gt; or &lt;code&gt;Spaces&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;indent_width&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;4&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Character size of single indentation. If &lt;code&gt;indent_type&lt;/code&gt; is set to &lt;code&gt;Tabs&lt;/code&gt;, this option is used as a heuristic to determine column width only.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;quote_style&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;AutoPreferDouble&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Quote style for string literals. Possible options: &lt;code&gt;AutoPreferDouble&lt;/code&gt;, &lt;code&gt;AutoPreferSingle&lt;/code&gt;, &lt;code&gt;ForceDouble&lt;/code&gt;, &lt;code&gt;ForceSingle&lt;/code&gt;. &lt;code&gt;AutoPrefer&lt;/code&gt; styles will prefer the specified quote style, but fall back to the alternative if it has fewer string escapes. &lt;code&gt;Force&lt;/code&gt; styles always use the specified style regardless of escapes.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;call_parentheses&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Always&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Whether parentheses should be applied on function calls with a single string/table argument. Possible options: &lt;code&gt;Always&lt;/code&gt;, &lt;code&gt;NoSingleString&lt;/code&gt;, &lt;code&gt;NoSingleTable&lt;/code&gt;, &lt;code&gt;None&lt;/code&gt;, &lt;code&gt;Input&lt;/code&gt;. &lt;code&gt;Always&lt;/code&gt; applies parentheses in all cases. &lt;code&gt;NoSingleString&lt;/code&gt; omits parentheses on calls with a single string argument. Similarly, &lt;code&gt;NoSingleTable&lt;/code&gt; omits parentheses on calls with a single table argument. &lt;code&gt;None&lt;/code&gt; omits parentheses in both cases. Note: parentheses are still kept in situations where removal can lead to obscurity (e.g. &lt;code&gt;foo &#34;bar&#34;.setup -&amp;gt; foo(&#34;bar&#34;).setup&lt;/code&gt;, since the index is on the call result, not the string). &lt;code&gt;Input&lt;/code&gt; removes all automation and preserves parentheses only if they were present in input code: consistency is not enforced.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;collapse_simple_statement&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Never&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Specify whether to collapse simple statements. Possible options: &lt;code&gt;Never&lt;/code&gt;, &lt;code&gt;FunctionOnly&lt;/code&gt;, &lt;code&gt;ConditionalOnly&lt;/code&gt;, or &lt;code&gt;Always&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Default &lt;code&gt;stylua.toml&lt;/code&gt;, note you do not need to explicitly specify each option if you want to use the defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;column_width = 120&#xA;line_endings = &#34;Unix&#34;&#xA;indent_type = &#34;Tabs&#34;&#xA;indent_width = 4&#xA;quote_style = &#34;AutoPreferDouble&#34;&#xA;call_parentheses = &#34;Always&#34;&#xA;collapse_simple_statement = &#34;Never&#34;&#xA;&#xA;[sort_requires]&#xA;enabled = false&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>restatedev/restate</title>
    <updated>2024-06-15T01:35:59Z</updated>
    <id>tag:github.com,2024-06-15:/restatedev/restate</id>
    <link href="https://github.com/restatedev/restate" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Restate is the platform for building resilient applications that tolerate all infrastructure faults w/o the need for a PhD.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://docs.restate.dev&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/doc-reference-blue&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/restatedev/examples&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/view-examples-blue&#34; alt=&#34;Examples&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/skW3AZ6uGd&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1128210118216007792?logo=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=restatedev&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/restatedev.svg?style=social&amp;amp;label=Follow&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Restate - Building resilient applications made easy!&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://restate.dev/poster_intro_dark.svg&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://restate.dev/poster_intro_2.svg&#34;&gt; &#xA;  &lt;img alt=&#34;Restate overview&#34; src=&#34;https://restate.dev/poster_intro_2.svg?sanitize=true&#34; width=&#34;500&#34;&gt; &#xA; &lt;/picture&gt; &lt;/p&gt; &#xA;&lt;p&gt;Easily build workflows, event-driven applications, and distributed services in a fault-tolerant manner with durable async/await.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://restate.dev&#34;&gt;Restate&lt;/a&gt; is great at building:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://restate.dev/blog/we-replaced-400-lines-of-stepfunctions-asl-with-40-lines-of-typescript-by-making-lambdas-suspendable/&#34;&gt;Lambda Workflows as Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/restatedev/examples/tree/main/end-to-end-applications/typescript/food-ordering&#34;&gt;Transactional RPC Handlers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://restate.dev/blog/restate--kafka-event-driven-apps-where-event-driven-is-an-implementation-detail/&#34;&gt;Event Processing with Kafka&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/restatedev/examples&#34;&gt;Much more&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Get started with Restate&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;🏎 &lt;a href=&#34;https://docs.restate.dev/get_started/quickstart&#34;&gt;Check out our quickstart&lt;/a&gt; to get up and running with Restate in 2 minutes!&lt;/li&gt; &#xA; &lt;li&gt;💡 &lt;a href=&#34;https://docs.restate.dev/get_started/tour&#34;&gt;The tour of Restate&lt;/a&gt; walks you through all features of Restate.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;SDKs&lt;/h2&gt; &#xA;&lt;p&gt;Restate supports the following SDKs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/restatedev/sdk-typescript&#34;&gt;Typescript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/restatedev/sdk-java&#34;&gt;Java and Kotlin&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;We offer pre-built binaries of the CLI and the server for MacOS and Linux.&lt;/p&gt; &#xA;&lt;h3&gt;Install the server&lt;/h3&gt; &#xA;&lt;p&gt;Install via Homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install restatedev/tap/restate-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run via npx:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx @restatedev/restate-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run via docker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -it --network=host docker.io/restatedev/restate:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install the CLI&lt;/h3&gt; &#xA;&lt;p&gt;Install via Homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install restatedev/tap/restate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install via npm:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install --global @restatedev/restate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run via npx:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx @restatedev/restate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also download the binaries from the &lt;a href=&#34;https://github.com/restatedev/restate/releases&#34;&gt;release page&lt;/a&gt; or our &lt;a href=&#34;https://restate.dev/get-restate/&#34;&gt;download page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🤗️ &lt;a href=&#34;https://discord.gg/skW3AZ6uGd&#34;&gt;Join our online community&lt;/a&gt; for help, sharing feedback and talking to the community.&lt;/li&gt; &#xA; &lt;li&gt;📖 &lt;a href=&#34;https://docs.restate.dev&#34;&gt;Check out our documentation&lt;/a&gt; to get quickly started!&lt;/li&gt; &#xA; &lt;li&gt;📣 &lt;a href=&#34;https://twitter.com/restatedev&#34;&gt;Follow us on Twitter&lt;/a&gt; for staying up to date.&lt;/li&gt; &#xA; &lt;li&gt;🙋 &lt;a href=&#34;https://github.com/restatedev/restate/issues&#34;&gt;Create a GitHub issue&lt;/a&gt; for requesting a new feature or reporting a problem.&lt;/li&gt; &#xA; &lt;li&gt;🏠 &lt;a href=&#34;https://github.com/restatedev&#34;&gt;Visit our GitHub org&lt;/a&gt; for exploring other repositories.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Core primitives&lt;/h2&gt; &#xA;&lt;p&gt;The basic primitives Restate offers to simplify application development are the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reliable Execution&lt;/strong&gt;: user code will always run to completion. Intermediate failures result in re-tries that use the durable execution mechanism to recover partial progress and not duplicate already executed steps.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Suspending User Code&lt;/strong&gt;: long-running user code suspends when awaiting on a promise and resume when that promise is resolved.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reliable Communication&lt;/strong&gt;: user code communicates with exactly-once semantics. Restate reliably delivers messages and anchors both sender and receiver in the durable execution to ensure no losses or duplicates can happen.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Durable Timers&lt;/strong&gt;: user code can sleep (and suspend) or schedule calls for later.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Isolation&lt;/strong&gt;: user code can be keyed, which makes Restate scheduled them to obey single-writer-per-key semantics.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Consistent State&lt;/strong&gt;: keyed user code can attach key/value state, which is eagerly pushed into handlers during invocation, and written back upon completion. This is particularly efficient for FaaS deployments (stateful serverless, yay!).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Observability &amp;amp; Introspection&lt;/strong&gt;: Restate automatically generates Open Telemetry traces for the interactions between handlers and gives you a SQL shell to query the distributed state of the application.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We’re excited if you join the Restate community and start contributing! Whether it is feature requests, bug reports, ideas &amp;amp; feedback or PRs, we appreciate any and all contributions. We know that your time is precious and, therefore, deeply value any effort to contribute!&lt;/p&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://raw.githubusercontent.com/restatedev/restate/main/docs/dev/development-guidelines.md&#34;&gt;development guidelines&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/restatedev/restate/main/docs/dev/local-development.md&#34;&gt;tips for local development&lt;/a&gt; to get started.&lt;/p&gt; &#xA;&lt;h2&gt;Versions&lt;/h2&gt; &#xA;&lt;p&gt;Restate follows &lt;a href=&#34;https://semver.org/&#34;&gt;Semantic Versioning&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can safely upgrade from a Restate &lt;code&gt;x.y&lt;/code&gt; to &lt;code&gt;x.(y+1)&lt;/code&gt; release without performing any manual data migration, as Restate performs an automatic data migration for you.&lt;/p&gt; &#xA;&lt;p&gt;To check the compatibility with the SDKs, check the respective READMEs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/restatedev/sdk-java/?tab=readme-ov-file#versions&#34;&gt;SDK-Java&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/restatedev/sdk-typescript/?tab=readme-ov-file#versions&#34;&gt;SDK-Typescript&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Building Restate locally&lt;/h3&gt; &#xA;&lt;p&gt;In order to build Restate locally &lt;a href=&#34;https://github.com/restatedev/restate/raw/main/docs/dev/local-development.md#building-restate&#34;&gt;follow the build instructions&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>