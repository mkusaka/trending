<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-18T01:36:23Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>paradigmxyz/cryo</title>
    <updated>2023-08-18T01:36:23Z</updated>
    <id>tag:github.com,2023-08-18:/paradigmxyz/cryo</id>
    <link href="https://github.com/paradigmxyz/cryo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;cryo is the easiest way to extract blockchain data to parquet, csv, json, or python dataframes&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;‚ùÑÔ∏èüßä cryo üßä‚ùÑÔ∏è&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/paradigmxyz/cryo/actions/workflows/build_and_test.yml&#34;&gt;&lt;img src=&#34;https://github.com/paradigmxyz/cryo/actions/workflows/build_and_test.yml/badge.svg?sanitize=true&#34; alt=&#34;Rust&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cryo&lt;/code&gt; is the easiest way to extract blockchain data to parquet, csv, json, or a python dataframe.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cryo&lt;/code&gt; is also extremely flexible, with &lt;a href=&#34;https://raw.githubusercontent.com/paradigmxyz/cryo/main/#cli-options&#34;&gt;many different options&lt;/a&gt; to control how data is extracted + filtered + formatted&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;code&gt;cryo&lt;/code&gt; is an early WIP, please report bugs + feedback to the issue tracker&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;note that &lt;code&gt;cryo&lt;/code&gt;&#39;s default settings will slam a node too hard for use with 3rd party RPC providers. Instead, &lt;code&gt;--requests-per-second&lt;/code&gt; and &lt;code&gt;--max-concurrent-requests&lt;/code&gt; should be used to impose ratelimits. Such settings will be handled automatically in a future release&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Example Usage&lt;/h2&gt; &#xA;&lt;p&gt;use as &lt;code&gt;cryo &amp;lt;dataset&amp;gt; [OPTIONS]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Example&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Command&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Extract all logs from block 16,000,000 to block 17,000,000&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;cryo logs -b 16M:17M&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Extract blocks, logs, or traces missing from current directory&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;cryo blocks txs traces&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Extract to csv instead of parquet&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;cryo blocks txs traces --csv&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Extract only certain columns&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;cryo blocks --include number timestamp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Dry run to view output schemas or expected work&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;cryo storage_diffs --dry&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Extract all USDC events&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;cryo logs --contract 0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;code&gt;cryo&lt;/code&gt; uses &lt;code&gt;ETH_RPC_URL&lt;/code&gt; env var as the data source unless &lt;code&gt;--rpc &amp;lt;url&amp;gt;&lt;/code&gt; is given&lt;/p&gt; &#xA;&lt;h2&gt;Datasets&lt;/h2&gt; &#xA;&lt;p&gt;cryo can extract the following datasets from EVM nodes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;blocks&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;transactions&lt;/code&gt; (alias = &lt;code&gt;txs&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;logs&lt;/code&gt; (alias = &lt;code&gt;events&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;traces&lt;/code&gt; (alias = &lt;code&gt;call_traces&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;state_diffs&lt;/code&gt; (alias for &lt;code&gt;storage_diffs&lt;/code&gt; + &lt;code&gt;balance_diff&lt;/code&gt; + &lt;code&gt;nonce_diffs&lt;/code&gt; + &lt;code&gt;code_diffs&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;balance_diffs&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;code_diffs&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;storage_diffs&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nonce_diffs&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vm_traces&lt;/code&gt; (alias = &lt;code&gt;opcode_traces&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h4&gt;Method 1: install from source&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/paradigmxyz/cryo&#xA;cd cryo&#xA;cargo install --path ./crates/cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This method requires having rust installed. See &lt;a href=&#34;https://rustup.rs/&#34;&gt;rustup&lt;/a&gt; for instructions.&lt;/p&gt; &#xA;&lt;h4&gt;Method 2: install from crates.io&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo install cryo_cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This method requires having rust installed. See &lt;a href=&#34;https://rustup.rs/&#34;&gt;rustup&lt;/a&gt; for instructions.&lt;/p&gt; &#xA;&lt;p&gt;Make sure that &lt;code&gt;~/.cargo/bin&lt;/code&gt; is on your &lt;code&gt;PATH&lt;/code&gt;. One way to do this is by adding the line &lt;code&gt;export PATH=&#34;$HOME/.cargo/bin:$PATH&#34;&lt;/code&gt; to your &lt;code&gt;~/.bashrc&lt;/code&gt; or &lt;code&gt;~/.profile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Installing &lt;code&gt;cryo_python&lt;/code&gt; from pypi&lt;/h4&gt; &#xA;&lt;p&gt;(make sure rust is installed first, see &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;rustup&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install maturin&#xA;pip install cryo_python&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Installing &lt;code&gt;cryo_python&lt;/code&gt; from source&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install maturin&#xA;git clone https://github.com/paradigmxyz/cryo&#xA;cd cryo/crates/python&#xA;maturin build --release&#xA;pip install &amp;lt;OUTPUT_OF_MATURIN_BUILD&amp;gt;.whl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Data Schema&lt;/h2&gt; &#xA;&lt;p&gt;Many &lt;code&gt;cryo&lt;/code&gt; cli options will affect output schemas by adding/removing columns or changing column datatypes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cryo&lt;/code&gt; will always print out data schemas before collecting any data. To view these schemas without collecting data, use &lt;code&gt;--dry&lt;/code&gt; to perform a dry run.&lt;/p&gt; &#xA;&lt;h4&gt;JSON-RPC&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;cryo&lt;/code&gt; currently obtains all of its data using the &lt;a href=&#34;https://ethereum.org/en/developers/docs/apis/json-rpc/&#34;&gt;JSON-RPC&lt;/a&gt; protocol standard.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;dataset&lt;/th&gt; &#xA;   &lt;th&gt;blocks per request&lt;/th&gt; &#xA;   &lt;th&gt;results per block&lt;/th&gt; &#xA;   &lt;th&gt;method&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Blocks&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;eth_getBlockByNumber&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Transactions&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;multiple&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;eth_getBlockByNumber&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Logs&lt;/td&gt; &#xA;   &lt;td&gt;multiple&lt;/td&gt; &#xA;   &lt;td&gt;multiple&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;eth_getLogs&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Traces&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;multiple&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;trace_block&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;State Diffs&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;multiple&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;trace_replayBlockTransactions&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vm Traces&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;multiple&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;trace_replayBlockTransactions&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;code&gt;cryo&lt;/code&gt; use &lt;a href=&#34;https://github.com/gakonst/ethers-rs&#34;&gt;ethers.rs&lt;/a&gt; to perform JSON-RPC requests, so it can be used any chain that ethers-rs is compatible with. This includes Ethereum, Optimism, Arbitrum, Polygon, BNB, and Avalanche.&lt;/p&gt; &#xA;&lt;p&gt;A future version of &lt;code&gt;cryo&lt;/code&gt; will be able to bypass JSON-RPC and query node data directly.&lt;/p&gt; &#xA;&lt;h2&gt;CLI Options&lt;/h2&gt; &#xA;&lt;p&gt;output of &lt;code&gt;cryo --help&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cryo extracts blockchain data to parquet, csv, or json&#xA;&#xA;Usage: cryo [OPTIONS] &amp;lt;DATATYPE&amp;gt;...&#xA;&#xA;Arguments:&#xA;  &amp;lt;DATATYPE&amp;gt;...  datatype(s) to collect, one or more of:&#xA;                 - blocks&#xA;                 - transactions  (alias = txs)&#xA;                 - logs          (alias = events)&#xA;                 - traces        (alias = call_traces)&#xA;                 - state_diffs   (= balance + code + nonce + storage diffs)&#xA;                 - balance_diffs&#xA;                 - code_diffs&#xA;                 - nonce_diffs&#xA;                 - storage_diffs&#xA;                 - vm_traces     (alias = opcode_traces)&#xA;&#xA;Options:&#xA;  -h, --help     Print help&#xA;  -V, --version  Print version&#xA;&#xA;Content Options:&#xA;  -b, --blocks &amp;lt;BLOCKS&amp;gt;              Block numbers, see syntax below [default: 0:latest]&#xA;  -a, --align                        Align block chunk boundaries to regular intervals&#xA;                                     e.g. (1000, 2000, 3000) instead of (1106, 2106, 3106)&#xA;      --reorg-buffer &amp;lt;N_BLOCKS&amp;gt;      Reorg buffer, save blocks only when they are this old,&#xA;                                     can be a number of blocks [default: 0]&#xA;  -i, --include-columns [&amp;lt;COLS&amp;gt;...]  Columns to include alongside the default output&#xA;  -e, --exclude-columns [&amp;lt;COLS&amp;gt;...]  Columns to exclude from the default output&#xA;      --columns [&amp;lt;COLS&amp;gt;...]          Use these columns instead of the default&#xA;      --hex                          Use hex string encoding for binary columns&#xA;  -s, --sort [&amp;lt;SORT&amp;gt;...]             Columns(s) to sort by&#xA;&#xA;Source Options:&#xA;  -r, --rpc &amp;lt;RPC&amp;gt;                    RPC url [default: ETH_RPC_URL env var]&#xA;      --network-name &amp;lt;NETWORK_NAME&amp;gt;  Network name [default: use name of eth_getChainId]&#xA;&#xA;Acquisition Options:&#xA;  -l, --requests-per-second &amp;lt;limit&amp;gt;  Ratelimit on requests per second&#xA;      --max-concurrent-requests &amp;lt;M&amp;gt;  Global number of concurrent requests&#xA;      --max-concurrent-chunks &amp;lt;M&amp;gt;    Number of chunks processed concurrently&#xA;      --max-concurrent-blocks &amp;lt;M&amp;gt;    Number blocks within a chunk processed concurrently&#xA;  -d, --dry                          Dry run, collect no data&#xA;&#xA;Output Options:&#xA;  -c, --chunk-size &amp;lt;CHUNK_SIZE&amp;gt;      Number of blocks per file [default: 1000]&#xA;      --n-chunks &amp;lt;N_CHUNKS&amp;gt;          Number of files (alternative to --chunk-size)&#xA;  -o, --output-dir &amp;lt;OUTPUT_DIR&amp;gt;      Directory for output files [default: .]&#xA;      --file-suffix &amp;lt;FILE_SUFFIX&amp;gt;    Suffix to attach to end of each filename&#xA;      --overwrite                    Overwrite existing files instead of skipping them&#xA;      --csv                          Save as csv instead of parquet&#xA;      --json                         Save as json instead of parquet&#xA;      --row-group-size &amp;lt;GROUP_SIZE&amp;gt;  Number of rows per row group in parquet file&#xA;      --n-row-groups &amp;lt;N_ROW_GROUPS&amp;gt;  Number of rows groups in parquet file&#xA;      --no-stats                     Do not write statistics to parquet files&#xA;      --compression &amp;lt;NAME [#]&amp;gt;...    Set compression algorithm and level [default: lz4]&#xA;&#xA;Dataset-specific Options:&#xA;      --contract &amp;lt;CONTRACT&amp;gt;          [logs] filter logs by contract address&#xA;      --topic0 &amp;lt;TOPIC0&amp;gt;              [logs] filter logs by topic0 [aliases: event]&#xA;      --topic1 &amp;lt;TOPIC1&amp;gt;              [logs] filter logs by topic1&#xA;      --topic2 &amp;lt;TOPIC2&amp;gt;              [logs] filter logs by topic2&#xA;      --topic3 &amp;lt;TOPIC3&amp;gt;              [logs] filter logs by topic3&#xA;      --log-request-size &amp;lt;N_BLOCKS&amp;gt;  [logs] Number of blocks per log request [default: 1]&#xA;&#xA;&#xA;Block specification syntax&#xA;- can use numbers                    --blocks 5000&#xA;- can use numbers list (use &#34;&#34;)      --blocks &#34;5000 6000 7000&#34;&#xA;- can use ranges                     --blocks 12M:13M 15M:16M&#xA;- numbers can contain { _ . K M B }  5_000 5K 15M 15.5M&#xA;- omiting range end means latest     15.5M: == 15.5M:latest&#xA;- omitting range start means 0       :700 == 0:700&#xA;- minus on start means minus end     -1000:7000 == 6000:7000&#xA;- plus sign on end means plus start  15M:+1000 == 15M:15.001K&#xA;- mix formats                        &#34;15M:+1 1000:1002 -3:1b 2000&#34;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>