<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-21T01:46:37Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cognitive-engineering-lab/aquascope</title>
    <updated>2023-02-21T01:46:37Z</updated>
    <id>tag:github.com,2023-02-21:/cognitive-engineering-lab/aquascope</id>
    <link href="https://github.com/cognitive-engineering-lab/aquascope" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Interactive visualizations of Rust at compile-time and run-time&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;span&gt;Aquascope: Look Beneath the Surface of Rust&lt;/span&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/663326/219528078-e8792f31-02b3-447f-97ed-f3c0fbb4f557.png&#34; style=&#34;float: right; border: 1px solid #555;&#34; height=&#34;250&#34;&gt;&lt;p&gt;&lt;/p&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cognitive-engineering-lab/aquascope/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/cognitive-engineering-lab/aquascope/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/mdbook-aquascope&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/mdbook-aquascope.svg?sanitize=true&#34; alt=&#34;crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cognitive-engineering-lab.github.io/aquascope/doc/aquascope/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-built-blue&#34; alt=&#34;docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Aquascope is a tool that generates interactive visualizations of Rust programs. These visualizations show how Rust&#39;s borrow checker &#34;thinks&#34; about a program, and how a Rust program actually executes. Here is a sample output of Aquascope:&lt;/p&gt; &#xA;&lt;img alt=&#34;Example Aquascope output&#34; src=&#34;https://user-images.githubusercontent.com/663326/219532624-a9605540-dac9-4d9b-a5f2-8a3d1ca81f50.png&#34; height=&#34;550&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cognitive-engineering-lab.github.io/aquascope/&#34;&gt;Click here for a live demo.&lt;/a&gt; Want to learn more about what the diagram means? &lt;a href=&#34;https://rust-book.cs.brown.edu/ch04-01-what-is-ownership.html&#34;&gt;Read the new ownership chapter in our Rust Book Experiment.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; &lt;strong&gt;Aquascope is research software and under active development!&lt;/strong&gt; &lt;span&gt;⚠&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;We provide an &lt;a href=&#34;https://rust-lang.github.io/mdBook/&#34;&gt;mdBook&lt;/a&gt; preprocessor that embeds Aquascope diagrams into an mdBook. To use it, you need to install the &lt;code&gt;mdbook-aquascope&lt;/code&gt; and &lt;code&gt;cargo-aquascope&lt;/code&gt; binaries as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo install mdbook-aquascope&#xA;rustup toolchain install nightly-2022-12-07 -c rust-src rustc-dev llvm-tools-preview miri&#xA;cargo +nightly-2022-12-07 install --git https://github.com/cognitive-engineering-lab/aquascope aquascope_front&#xA;cargo +nightly-2022-12-07 miri setup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;cargo-aquascope&lt;/code&gt; is installed via &lt;code&gt;aquascope_front&lt;/code&gt; and must be installed via git and with a specific nightly toolchain. The &lt;code&gt;miri setup&lt;/code&gt; command is a necessary prerequisite to running the Aquascope interpreter.&lt;/p&gt; &#xA;&lt;h3&gt;From Source&lt;/h3&gt; &#xA;&lt;p&gt;If you want to install from source, you will first need Cargo and &lt;a href=&#34;https://www.npmjs.com/&#34;&gt;npm&lt;/a&gt; installed, then you can run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/cognitive-engineering-lab/aquascope.git&#xA;cd aquascope&#xA;npm install -g graco&#xA;cargo make init-bindings&#xA;cd frontend &amp;amp;&amp;amp; graco prepare&#xA;cargo install --path crates/aquascope_front&#xA;cargo install --path crates/mdbook-aquascope&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;First, enable &lt;code&gt;mdbook-aquascope&lt;/code&gt; in your mdBook&#39;s &lt;code&gt;book.toml&lt;/code&gt; like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# book.toml&#xA;[preprocessor.aquascope]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then add an Aquascope code block to one of your Markdown source files like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;```aquascope,interpreter&#xA;#fn main() {&#xA;let mut s = String::from(&#34;hello &#34;);`[]`&#xA;s.push_str(&#34;world&#34;);`[]`&#xA;#}&#xA;```&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Further documentation on the syntax and configuration of Aquascope blocks will be provided once the interface is more stable.&lt;/p&gt; &#xA;&lt;!--&#xA;### Available visualizations&#xA;&#xA;Currently, Aquascope supports three types of visualizations:&#xA;&#xA;#### Permission boundaries&#xA;&#xA;Aquascope will determine the permission expected for a path usage and display this along with the actual permissions on the path. Unsatisfied permissions provide additional information on hover to help explain the discrepancy.&#xA;&#xA;&lt;table&gt;&#xA;    &lt;tr&gt;&#xA;        &lt;td&gt;&#xA;&lt;pre&gt;&#xA;&lt;code style=&#34;display: block;&#34;&gt;&#xA;```aquascope,boundaries&#xA;fn main() {&#xA;    let mut x = 1;&#xA;    let y = &amp;mut x;&#xA;    println!(&#34;{} = {}&#34;, x, *y);&#xA;}```&#xA;&lt;/code&gt;&#xA;&lt;/pre&gt;&#xA;        &lt;/td&gt;&#xA;        &lt;td&gt;&#xA;            &lt;img src=&#34;https://user-images.githubusercontent.com/20209337/215321806-bba27857-70ed-4371-98bd-5e7b5dfd884f.png&#34; /&gt;&#xA;        &lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;&lt;/table&gt;&#xA;&#xA;#### Permission steps&#xA;&#xA;Tracking how permissions change throughout a program is difficult, especially when factors such as [liveness](https://en.wikipedia.org/wiki/Live-variable_analysis) influence the static analysis. Aquascope will insert _steps_ that show how and _why_ permissions change.&#xA;&#xA;&lt;table&gt;&#xA;    &lt;tr&gt;&#xA;        &lt;td&gt;&#xA;&lt;pre&gt;&#xA;&lt;code style=&#34;display: block;&#34;&gt;&#xA;```aquascope,stepper&#xA;fn main() {&#xA;    let mut x = 1;&#xA;    let y = &amp;mut x;&#xA;    println!(&#34;{} = {}&#34;, x, *y);&#xA;}```&#xA;&lt;/code&gt;&#xA;&lt;/pre&gt;&#xA;        &lt;/td&gt;&#xA;        &lt;td&gt;&#xA;            &lt;img src=&#34;https://user-images.githubusercontent.com/20209337/215321846-377f3adb-9e4b-4d9c-8223-fd344296b32d.png&#34; /&gt;&#xA;        &lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;&lt;/table&gt;&#xA;&#xA;#### Runtime execution&#xA;&#xA;Program state visualization is a well-known tool that visualizes the runtime execution of a program. With Aquascope, you can specify which states of a program you&#39;d like to show, and even run programs that don&#39;t pass the borrow checker!&#xA;&#xA;&lt;table&gt;&#xA;    &lt;tr&gt;&#xA;        &lt;td&gt;&#xA;&lt;pre&gt;&#xA;&lt;code style=&#34;display: block;&#34;&gt;&#xA;```aquascope,interpreter,concreteTypes=true&#xA;fn main() {&#xA;    let m1 = String::from(&#34;Hello&#34;);&#xA;    let m2 = String::from(&#34;world&#34;);`[]`&#xA;    greet(&amp;m1, &amp;m2); // note the ampersands&#xA;    let s = format!(&#34;{} {}&#34;, m1, m2);&#xA;}&#xA;&#xA;fn greet(g1: &amp;String, g2: &amp;String) { // note the ampersands&#xA;`[]`println!(&#34;{} {}!&#34;, g1, g2);&#xA;}```&#xA;&lt;/code&gt;&#xA;&#xA;&lt;/pre&gt;&#xA;        &lt;/td&gt;&#xA;        &lt;td&gt;&#xA;            &lt;img src=&#34;https://user-images.githubusercontent.com/20209337/215325005-6c613d98-8b69-45f3-879a-c68c86940f83.png&#34; /&gt;&#xA;        &lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;&#xA;&lt;/table&gt;&#xA;&#xA;### Aquascope annotations&#xA;&#xA;Aquascope provides a set of annotations for simple customization. Similar to mdBook, any line of code with a preceding `#` is _hidden_. Additionally, each visualization may provide its own set of specific annotations, these are outlined below.&#xA;&#xA;#### Permission steps&#xA;&#xA;Visualizing permission steps can be quite intrusive but oftentimes you may want to just focus on a handful of lines, or even specific paths. This can be achieved by providing a _step annotation_ at the end of a line. For example, the annotation `` `(focus,paths:x)` `` indicates that this line should be focused (shown by default) and all paths except `x` are hidden in a dropdown.&#xA;&#xA;&gt; Note, these annotations are line specific. The default is to show _all_ lines and paths unless something is specified.&#xA;&#xA;&lt;table&gt;&#xA;    &lt;tr&gt;&#xA;        &lt;td&gt;&#xA;&lt;pre&gt;&#xA;&lt;code style=&#34;display: block;&#34;&gt;&#xA;```aquascope,stepper&#xA;# fn main() {&#xA;  let mut x = 1;&#xA;  let y = &amp;x; `(focus,paths:x)`&#xA;  let z = *y; `(focus,paths:x)`&#xA;  x += z;&#xA;# }```&#xA;&lt;/code&gt;&#xA;&lt;/pre&gt;&#xA;        &lt;/td&gt;&#xA;        &lt;td&gt;&#xA;            &lt;kbd&gt;&#xA;                &lt;img src=&#34;https://user-images.githubusercontent.com/20209337/215325679-5ffc4ea8-6246-4d2e-965c-3baddfc26ad4.gif&#34; /&gt;&#xA;            &lt;/kbd&gt;&#xA;        &lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;&lt;/table&gt;&#xA;&#xA;--&gt; &#xA;&lt;h2&gt;Having trouble?&lt;/h2&gt; &#xA;&lt;p&gt;If you want to use Aquascope but are having trouble finding the relevant information, please leave an issue or email us at &lt;a href=&#34;mailto:wcrichto@brown.edu&#34;&gt;wcrichto@brown.edu&lt;/a&gt; and &lt;a href=&#34;mailto:gagray@ethz.ch&#34;&gt;gagray@ethz.ch&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>