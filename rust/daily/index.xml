<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-31T01:40:58Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tokio-rs/prost</title>
    <updated>2024-12-31T01:40:58Z</updated>
    <id>tag:github.com,2024-12-31:/tokio-rs/prost</id>
    <link href="https://github.com/tokio-rs/prost" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PROST! a Protocol Buffers implementation for the Rust Language&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/tokio-rs/prost/workflows/continuous%20integration/badge.svg?sanitize=true&#34; alt=&#34;continuous integration&#34;&gt; &lt;a href=&#34;https://docs.rs/prost/&#34;&gt;&lt;img src=&#34;https://docs.rs/prost/badge.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/prost&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/prost.svg?sanitize=true&#34; alt=&#34;Crate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://deps.rs/repo/github/tokio-rs/prost&#34;&gt;&lt;img src=&#34;https://deps.rs/repo/github/tokio-rs/prost/status.svg?sanitize=true&#34; alt=&#34;Dependency Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/tokio&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/500028886025895936&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;em&gt;PROST!&lt;/em&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;prost&lt;/code&gt; is a &lt;a href=&#34;https://developers.google.com/protocol-buffers/&#34;&gt;Protocol Buffers&lt;/a&gt; implementation for the &lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust Language&lt;/a&gt;. &lt;code&gt;prost&lt;/code&gt; generates simple, idiomatic Rust code from &lt;code&gt;proto2&lt;/code&gt; and &lt;code&gt;proto3&lt;/code&gt; files.&lt;/p&gt; &#xA;&lt;p&gt;Compared to other Protocol Buffers implementations, &lt;code&gt;prost&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Generates simple, idiomatic, and readable Rust types by taking advantage of Rust &lt;code&gt;derive&lt;/code&gt; attributes.&lt;/li&gt; &#xA; &lt;li&gt;Retains comments from &lt;code&gt;.proto&lt;/code&gt; files in generated Rust code.&lt;/li&gt; &#xA; &lt;li&gt;Allows existing Rust types (not generated from a &lt;code&gt;.proto&lt;/code&gt;) to be serialized and deserialized by adding attributes.&lt;/li&gt; &#xA; &lt;li&gt;Uses the &lt;a href=&#34;https://github.com/carllerche/bytes&#34;&gt;&lt;code&gt;bytes::{Buf, BufMut}&lt;/code&gt;&lt;/a&gt; abstractions for serialization instead of &lt;code&gt;std::io::{Read, Write}&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Respects the Protobuf &lt;code&gt;package&lt;/code&gt; specifier when organizing generated code into Rust modules.&lt;/li&gt; &#xA; &lt;li&gt;Preserves unknown enum values during deserialization.&lt;/li&gt; &#xA; &lt;li&gt;Does not include support for runtime reflection or message descriptors.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Using &lt;code&gt;prost&lt;/code&gt; in a Cargo Project&lt;/h2&gt; &#xA;&lt;p&gt;First, add &lt;code&gt;prost&lt;/code&gt; and its public dependencies to your &lt;code&gt;Cargo.toml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ignore&#34;&gt;[dependencies]&#xA;prost = &#34;0.12&#34;&#xA;# Only necessary if using Protobuf well-known types:&#xA;prost-types = &#34;0.12&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The recommended way to add &lt;code&gt;.proto&lt;/code&gt; compilation to a Cargo project is to use the &lt;code&gt;prost-build&lt;/code&gt; library. See the &lt;a href=&#34;https://raw.githubusercontent.com/tokio-rs/prost/master/prost-build&#34;&gt;&lt;code&gt;prost-build&lt;/code&gt; documentation&lt;/a&gt; for more details and examples.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/danburkert/snazzy&#34;&gt;snazzy repository&lt;/a&gt; for a simple start-to-finish example.&lt;/p&gt; &#xA;&lt;h3&gt;MSRV&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;prost&lt;/code&gt; follows the &lt;code&gt;tokio-rs&lt;/code&gt; projects MSRV model and supports 1.60. For more information on the tokio msrv policy you can check it out &lt;a href=&#34;https://github.com/tokio-rs/tokio/#supported-rust-versions&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Generated Code&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;prost&lt;/code&gt; generates Rust code from source &lt;code&gt;.proto&lt;/code&gt; files using the &lt;code&gt;proto2&lt;/code&gt; or &lt;code&gt;proto3&lt;/code&gt; syntax. &lt;code&gt;prost&lt;/code&gt;&#39;s goal is to make the generated code as simple as possible.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;protoc&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;With &lt;code&gt;prost-build&lt;/code&gt; v0.11 release, &lt;code&gt;protoc&lt;/code&gt; will be required to invoke &lt;code&gt;compile_protos&lt;/code&gt; (unless &lt;code&gt;skip_protoc&lt;/code&gt; is enabled). Prost will no longer provide bundled a &lt;code&gt;protoc&lt;/code&gt; or attempt to compile &lt;code&gt;protoc&lt;/code&gt; for users. For install instructions for &lt;code&gt;protoc&lt;/code&gt; please check out the &lt;a href=&#34;https://github.com/protocolbuffers/protobuf#protobuf-compiler-installation&#34;&gt;protobuf install&lt;/a&gt; instructions.&lt;/p&gt; &#xA;&lt;h3&gt;Packages&lt;/h3&gt; &#xA;&lt;p&gt;Prost can now generate code for &lt;code&gt;.proto&lt;/code&gt; files that don&#39;t have a package spec. &lt;code&gt;prost&lt;/code&gt; will translate the Protobuf package into a Rust module. For example, given the &lt;code&gt;package&lt;/code&gt; specifier:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-protobuf,ignore&#34;&gt;package foo.bar;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All Rust types generated from the file will be in the &lt;code&gt;foo::bar&lt;/code&gt; module.&lt;/p&gt; &#xA;&lt;h3&gt;Messages&lt;/h3&gt; &#xA;&lt;p&gt;Given a simple message declaration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-protobuf,ignore&#34;&gt;// Sample message.&#xA;message Foo {&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;prost&lt;/code&gt; will generate the following Rust struct:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,ignore&#34;&gt;/// Sample message.&#xA;#[derive(Clone, Debug, PartialEq, Message)]&#xA;pub struct Foo {&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fields&lt;/h3&gt; &#xA;&lt;p&gt;Fields in Protobuf messages are translated into Rust as public struct fields of the corresponding type.&lt;/p&gt; &#xA;&lt;h4&gt;Scalar Values&lt;/h4&gt; &#xA;&lt;p&gt;Scalar value types are converted as follows:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Protobuf Type&lt;/th&gt; &#xA;   &lt;th&gt;Rust Type&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;double&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;f64&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;float&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;f32&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;int32&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;i32&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;int64&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;i64&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;uint32&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;u32&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;uint64&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;u64&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;sint32&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;i32&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;sint64&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;i64&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;fixed32&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;u32&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;fixed64&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;u64&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;sfixed32&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;i32&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;sfixed64&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;i64&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Vec&amp;lt;u8&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Enumerations&lt;/h4&gt; &#xA;&lt;p&gt;All &lt;code&gt;.proto&lt;/code&gt; enumeration types convert to the Rust &lt;code&gt;i32&lt;/code&gt; type. Additionally, each enumeration type gets a corresponding Rust &lt;code&gt;enum&lt;/code&gt; type. For example, this &lt;code&gt;proto&lt;/code&gt; enum:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-protobuf,ignore&#34;&gt;enum PhoneType {&#xA;  MOBILE = 0;&#xA;  HOME = 1;&#xA;  WORK = 2;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;gets this corresponding Rust enum [^1]:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,ignore&#34;&gt;pub enum PhoneType {&#xA;    Mobile = 0,&#xA;    Home = 1,&#xA;    Work = 2,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;[^1]: Annotations have been elided for clarity. See below for a full example.&lt;/p&gt; &#xA;&lt;p&gt;You can convert a &lt;code&gt;PhoneType&lt;/code&gt; value to an &lt;code&gt;i32&lt;/code&gt; by doing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,ignore&#34;&gt;PhoneType::Mobile as i32&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;#[derive(::prost::Enumeration)]&lt;/code&gt; annotation added to the generated &lt;code&gt;PhoneType&lt;/code&gt; adds these associated functions to the type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,ignore&#34;&gt;impl PhoneType {&#xA;    pub fn is_valid(value: i32) -&amp;gt; bool { ... }&#xA;    #[deprecated]&#xA;    pub fn from_i32(value: i32) -&amp;gt; Option&amp;lt;PhoneType&amp;gt; { ... }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It also adds an &lt;code&gt;impl TryFrom&amp;lt;i32&amp;gt; for PhoneType&lt;/code&gt;, so you can convert an &lt;code&gt;i32&lt;/code&gt; to its corresponding &lt;code&gt;PhoneType&lt;/code&gt; value by doing, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,ignore&#34;&gt;let phone_type = 2i32;&#xA;&#xA;match PhoneType::try_from(phone_type) {&#xA;    Ok(PhoneType::Mobile) =&amp;gt; ...,&#xA;    Ok(PhoneType::Home) =&amp;gt; ...,&#xA;    Ok(PhoneType::Work) =&amp;gt; ...,&#xA;    Err(_) =&amp;gt; ...,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, wherever a &lt;code&gt;proto&lt;/code&gt; enum is used as a field in a &lt;code&gt;Message&lt;/code&gt;, the message will have &#39;accessor&#39; methods to get/set the value of the field as the Rust enum type. For instance, this proto &lt;code&gt;PhoneNumber&lt;/code&gt; message that has a field named &lt;code&gt;type&lt;/code&gt; of type &lt;code&gt;PhoneType&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-protobuf,ignore&#34;&gt;message PhoneNumber {&#xA;  string number = 1;&#xA;  PhoneType type = 2;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will become the following Rust type [^2] with methods &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;set_type&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,ignore&#34;&gt;pub struct PhoneNumber {&#xA;    pub number: String,&#xA;    pub r#type: i32, // the `r#` is needed because `type` is a Rust keyword&#xA;}&#xA;&#xA;impl PhoneNumber {&#xA;    pub fn r#type(&amp;amp;self) -&amp;gt; PhoneType { ... }&#xA;    pub fn set_type(&amp;amp;mut self, value: PhoneType) { ... }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the getter methods will return the Rust enum&#39;s default value if the field has an invalid &lt;code&gt;i32&lt;/code&gt; value.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;enum&lt;/code&gt; type isn&#39;t used directly as a field, because the Protobuf spec mandates that enumerations values are &#39;open&#39;, and decoding unrecognized enumeration values must be possible.&lt;/p&gt; &#xA;&lt;p&gt;[^2]: Annotations have been elided for clarity. See below for a full example.&lt;/p&gt; &#xA;&lt;h4&gt;Field Modifiers&lt;/h4&gt; &#xA;&lt;p&gt;Protobuf scalar value and enumeration message fields can have a modifier depending on the Protobuf version. Modifiers change the corresponding type of the Rust field:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;code&gt;.proto&lt;/code&gt; Version&lt;/th&gt; &#xA;   &lt;th&gt;Modifier&lt;/th&gt; &#xA;   &lt;th&gt;Rust Type&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;proto2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;optional&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;proto2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;required&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;T&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;proto3&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;default&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;T&lt;/code&gt; for scalar types, &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; otherwise&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;proto3&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;optional&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;proto2&lt;/code&gt;/&lt;code&gt;proto3&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;repeated&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Note that in &lt;code&gt;proto3&lt;/code&gt; the default representation for all user-defined message types is &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;, and for scalar types just &lt;code&gt;T&lt;/code&gt; (during decoding, a missing value is populated by &lt;code&gt;T::default()&lt;/code&gt;). If you need a witness of the presence of a scalar type &lt;code&gt;T&lt;/code&gt;, use the &lt;code&gt;optional&lt;/code&gt; modifier to enforce an &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; representation in the generated Rust struct.&lt;/p&gt; &#xA;&lt;h4&gt;Map Fields&lt;/h4&gt; &#xA;&lt;p&gt;Map fields are converted to a Rust &lt;code&gt;HashMap&lt;/code&gt; with key and value type converted from the Protobuf key and value types.&lt;/p&gt; &#xA;&lt;h4&gt;Message Fields&lt;/h4&gt; &#xA;&lt;p&gt;Message fields are converted to the corresponding struct type. The table of field modifiers above applies to message fields, except that &lt;code&gt;proto3&lt;/code&gt; message fields without a modifier (the default) will be wrapped in an &lt;code&gt;Option&lt;/code&gt;. Typically message fields are unboxed. &lt;code&gt;prost&lt;/code&gt; will automatically box a message field if the field type and the parent type are recursively nested in order to avoid an infinite sized struct.&lt;/p&gt; &#xA;&lt;h4&gt;Oneof Fields&lt;/h4&gt; &#xA;&lt;p&gt;Oneof fields convert to a Rust enum. Protobuf &lt;code&gt;oneof&lt;/code&gt;s types are not named, so &lt;code&gt;prost&lt;/code&gt; uses the name of the &lt;code&gt;oneof&lt;/code&gt; field for the resulting Rust enum, and defines the enum in a module under the struct. For example, a &lt;code&gt;proto3&lt;/code&gt; message such as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-protobuf,ignore&#34;&gt;message Foo {&#xA;  oneof widget {&#xA;    int32 quux = 1;&#xA;    string bar = 2;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;generates the following Rust[^3]:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,ignore&#34;&gt;pub struct Foo {&#xA;    pub widget: Option&amp;lt;foo::Widget&amp;gt;,&#xA;}&#xA;pub mod foo {&#xA;    pub enum Widget {&#xA;        Quux(i32),&#xA;        Bar(String),&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;oneof&lt;/code&gt; fields are always wrapped in an &lt;code&gt;Option&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;[^3]: Annotations have been elided for clarity. See below for a full example.&lt;/p&gt; &#xA;&lt;h3&gt;Services&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;prost-build&lt;/code&gt; allows a custom code-generator to be used for processing &lt;code&gt;service&lt;/code&gt; definitions. This can be used to output Rust traits according to an application&#39;s specific needs.&lt;/p&gt; &#xA;&lt;h3&gt;Generated Code Example&lt;/h3&gt; &#xA;&lt;p&gt;Example &lt;code&gt;.proto&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-protobuf,ignore&#34;&gt;syntax = &#34;proto3&#34;;&#xA;package tutorial;&#xA;&#xA;message Person {&#xA;  string name = 1;&#xA;  int32 id = 2;  // Unique ID number for this person.&#xA;  string email = 3;&#xA;&#xA;  enum PhoneType {&#xA;    MOBILE = 0;&#xA;    HOME = 1;&#xA;    WORK = 2;&#xA;  }&#xA;&#xA;  message PhoneNumber {&#xA;    string number = 1;&#xA;    PhoneType type = 2;&#xA;  }&#xA;&#xA;  repeated PhoneNumber phones = 4;&#xA;}&#xA;&#xA;// Our address book file is just one of these.&#xA;message AddressBook {&#xA;  repeated Person people = 1;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and the generated Rust code (&lt;code&gt;tutorial.rs&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,ignore&#34;&gt;#[derive(Clone, PartialEq, ::prost::Message)]&#xA;pub struct Person {&#xA;    #[prost(string, tag=&#34;1&#34;)]&#xA;    pub name: ::prost::alloc::string::String,&#xA;    /// Unique ID number for this person.&#xA;    #[prost(int32, tag=&#34;2&#34;)]&#xA;    pub id: i32,&#xA;    #[prost(string, tag=&#34;3&#34;)]&#xA;    pub email: ::prost::alloc::string::String,&#xA;    #[prost(message, repeated, tag=&#34;4&#34;)]&#xA;    pub phones: ::prost::alloc::vec::Vec&amp;lt;person::PhoneNumber&amp;gt;,&#xA;}&#xA;/// Nested message and enum types in `Person`.&#xA;pub mod person {&#xA;    #[derive(Clone, PartialEq, ::prost::Message)]&#xA;    pub struct PhoneNumber {&#xA;        #[prost(string, tag=&#34;1&#34;)]&#xA;        pub number: ::prost::alloc::string::String,&#xA;        #[prost(enumeration=&#34;PhoneType&#34;, tag=&#34;2&#34;)]&#xA;        pub r#type: i32,&#xA;    }&#xA;    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]&#xA;    #[repr(i32)]&#xA;    pub enum PhoneType {&#xA;        Mobile = 0,&#xA;        Home = 1,&#xA;        Work = 2,&#xA;    }&#xA;}&#xA;/// Our address book file is just one of these.&#xA;#[derive(Clone, PartialEq, ::prost::Message)]&#xA;pub struct AddressBook {&#xA;    #[prost(message, repeated, tag=&#34;1&#34;)]&#xA;    pub people: ::prost::alloc::vec::Vec&amp;lt;Person&amp;gt;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Accessing the &lt;code&gt;protoc&lt;/code&gt; &lt;code&gt;FileDescriptorSet&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;prost_build::Config::file_descriptor_set_path&lt;/code&gt; option can be used to emit a file descriptor set during the build &amp;amp; code generation step. When used in conjunction with the &lt;code&gt;std::include_bytes&lt;/code&gt; macro and the &lt;code&gt;prost_types::FileDescriptorSet&lt;/code&gt; type, applications and libraries using Prost can implement introspection capabilities requiring details from the original &lt;code&gt;.proto&lt;/code&gt; files.&lt;/p&gt; &#xA;&lt;h2&gt;Using &lt;code&gt;prost&lt;/code&gt; in a &lt;code&gt;no_std&lt;/code&gt; Crate&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;prost&lt;/code&gt; is compatible with &lt;code&gt;no_std&lt;/code&gt; crates. To enable &lt;code&gt;no_std&lt;/code&gt; support, disable the &lt;code&gt;std&lt;/code&gt; features in &lt;code&gt;prost&lt;/code&gt; and &lt;code&gt;prost-types&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ignore&#34;&gt;[dependencies]&#xA;prost = { version = &#34;0.6&#34;, default-features = false, features = [&#34;prost-derive&#34;] }&#xA;# Only necessary if using Protobuf well-known types:&#xA;prost-types = { version = &#34;0.6&#34;, default-features = false }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, configure &lt;code&gt;prost-build&lt;/code&gt; to output &lt;code&gt;BTreeMap&lt;/code&gt;s instead of &lt;code&gt;HashMap&lt;/code&gt;s for all Protobuf &lt;code&gt;map&lt;/code&gt; fields in your &lt;code&gt;build.rs&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,ignore&#34;&gt;let mut config = prost_build::Config::new();&#xA;config.btree_map(&amp;amp;[&#34;.&#34;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When using edition 2015, it may be necessary to add an &lt;code&gt;extern crate core;&lt;/code&gt; directive to the crate which includes &lt;code&gt;prost&lt;/code&gt;-generated code.&lt;/p&gt; &#xA;&lt;h2&gt;Serializing Existing Types&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;prost&lt;/code&gt; uses a custom derive macro to handle encoding and decoding types, which means that if your existing Rust type is compatible with Protobuf types, you can serialize and deserialize it by adding the appropriate derive and field annotations.&lt;/p&gt; &#xA;&lt;p&gt;Currently the best documentation on adding annotations is to look at the generated code examples above.&lt;/p&gt; &#xA;&lt;h3&gt;Tag Inference for Existing Types&lt;/h3&gt; &#xA;&lt;p&gt;Prost automatically infers tags for the struct.&lt;/p&gt; &#xA;&lt;p&gt;Fields are tagged sequentially in the order they are specified, starting with &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You may skip tags which have been reserved, or where there are gaps between sequentially occurring tag values by specifying the tag number to skip to with the &lt;code&gt;tag&lt;/code&gt; attribute on the first field after the gap. The following fields will be tagged sequentially starting from the next number.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,ignore&#34;&gt;use prost;&#xA;use prost::{Enumeration, Message};&#xA;&#xA;#[derive(Clone, PartialEq, Message)]&#xA;struct Person {&#xA;    #[prost(string, tag = &#34;1&#34;)]&#xA;    pub id: String, // tag=1&#xA;    // NOTE: Old &#34;name&#34; field has been removed&#xA;    // pub name: String, // tag=2 (Removed)&#xA;    #[prost(string, tag = &#34;6&#34;)]&#xA;    pub given_name: String, // tag=6&#xA;    #[prost(string)]&#xA;    pub family_name: String, // tag=7&#xA;    #[prost(string)]&#xA;    pub formatted_name: String, // tag=8&#xA;    #[prost(uint32, tag = &#34;3&#34;)]&#xA;    pub age: u32, // tag=3&#xA;    #[prost(uint32)]&#xA;    pub height: u32, // tag=4&#xA;    #[prost(enumeration = &#34;Gender&#34;)]&#xA;    pub gender: i32, // tag=5&#xA;    // NOTE: Skip to less commonly occurring fields&#xA;    #[prost(string, tag = &#34;16&#34;)]&#xA;    pub name_prefix: String, // tag=16  (eg. mr/mrs/ms)&#xA;    #[prost(string)]&#xA;    pub name_suffix: String, // tag=17  (eg. jr/esq)&#xA;    #[prost(string)]&#xA;    pub maiden_name: String, // tag=18&#xA;}&#xA;&#xA;#[derive(Clone, Copy, Debug, PartialEq, Eq, Enumeration)]&#xA;pub enum Gender {&#xA;    Unknown = 0,&#xA;    Female = 1,&#xA;    Male = 2,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Nix&lt;/h2&gt; &#xA;&lt;p&gt;The prost project maintains flakes support for local development. Once you have nix and nix flakes setup you can just run &lt;code&gt;nix develop&lt;/code&gt; to get a shell configured with the required dependencies to compile the whole project.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Could &lt;code&gt;prost&lt;/code&gt; be implemented as a serializer for &lt;a href=&#34;https://serde.rs/&#34;&gt;Serde&lt;/a&gt;?&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Probably not, however I would like to hear from a Serde expert on the matter. There are two complications with trying to serialize Protobuf messages with Serde:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Protobuf fields require a numbered tag, and currently there appears to be no mechanism suitable for this in &lt;code&gt;serde&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The mapping of Protobuf type to Rust type is not 1-to-1. As a result, trait-based approaches to dispatching don&#39;t work very well. Example: six different Protobuf field types correspond to a Rust &lt;code&gt;Vec&amp;lt;i32&amp;gt;&lt;/code&gt;: &lt;code&gt;repeated int32&lt;/code&gt;, &lt;code&gt;repeated sint32&lt;/code&gt;, &lt;code&gt;repeated sfixed32&lt;/code&gt;, and their packed counterparts.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;But it is possible to place &lt;code&gt;serde&lt;/code&gt; derive tags onto the generated types, so the same structure can support both &lt;code&gt;prost&lt;/code&gt; and &lt;code&gt;Serde&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;I get errors when trying to run &lt;code&gt;cargo test&lt;/code&gt; on MacOS&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If the errors are about missing &lt;code&gt;autoreconf&lt;/code&gt; or similar, you can probably fix them by running&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ignore&#34;&gt;brew install automake&#xA;brew install libtool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;prost&lt;/code&gt; is distributed under the terms of the Apache License (Version 2.0).&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/tokio-rs/prost/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;Copyright 2022 Dan Burkert &amp;amp; Tokio Contributors&lt;/p&gt;</summary>
  </entry>
</feed>