<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-22T01:41:42Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cncases/cases</title>
    <updated>2024-01-22T01:41:42Z</updated>
    <id>tag:github.com,2024-01-22:/cncases/cases</id>
    <link href="https://github.com/cncases/cases" rel="alternate"></link>
    <summary type="html">&lt;p&gt;中国裁判文书网本地搜索&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;cases&lt;/h1&gt; &#xA;&lt;p&gt;中国裁判文书网搜索&lt;/p&gt; &#xA;&lt;h2&gt;用法&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!CAUTION] 需要磁盘空间 320G 以上，可能需要数小时的时间&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] 在 Linux 平台，如果出现 &lt;code&gt;IO error: ……Too many open files&lt;/code&gt;，可以使用&lt;code&gt;ulimit -n 10000&lt;/code&gt;命令提高文件描述符上限。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;0. 下载程序并创建配置文件&lt;/h3&gt; &#xA;&lt;p&gt;方法一：从 releases 页面下载已编译好的二进制文件（推荐），&lt;a href=&#34;https://github.com/cncases/cases/releases&#34;&gt;https://github.com/cncases/cases/releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;方法二：自行编译&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;## 安装 rust&#xA;curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh&#xA;&#xA;## clone 本仓库&#xA;git clone https://github.com/cncases/cases.git&#xA;&#xA;## 编译，对应程序在 target/release/ 文件夹中&#xA;cargo build -r &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;配置文件参考&lt;a href=&#34;https://raw.githubusercontent.com/cncases/cases/main/config.toml&#34;&gt;config.toml&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;1. 下载原始数据（102G）&lt;/h3&gt; &#xA;&lt;p&gt;方法：通过bt下载，种子文件为 &lt;code&gt;810air.torrent&lt;/code&gt; ，可以从本&lt;a href=&#34;https://raw.githubusercontent.com/cncases/cases/main/810air.torrent&#34;&gt;仓库&lt;/a&gt;下载，也可以通过链接 &lt;a href=&#34;https://files.catbox.moe/810air.torrent&#34;&gt;https://files.catbox.moe/810air.torrent&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;原始数据来源于&lt;a href=&#34;https://www.macrodatas.cn/article/1147471898&#34;&gt;马克数据网&lt;/a&gt;，文书数量超过8500万，约102G。下载后&lt;strong&gt;不要&lt;/strong&gt;解压子文件，将文件路径填写到 &lt;code&gt;config.toml&lt;/code&gt; 中的 &lt;code&gt;raw_data_path&lt;/code&gt; 变量中；&lt;/p&gt; &#xA;&lt;h3&gt;2. 将数据加载到 rocksdb 数据库中&lt;/h3&gt; &#xA;&lt;p&gt;运行 &lt;code&gt;convert config.toml&lt;/code&gt; 程序。此过程会将原始数据放入 rocksdb 数据库中，数据库文件路径为 &lt;code&gt;config.toml&lt;/code&gt; 中的 &lt;code&gt;db&lt;/code&gt; 变量；转换后的数据大小约为 200G，转换可能会花费数小时的时间；如果中途中断，再次运行会从中断处继续。&lt;/p&gt; &#xA;&lt;h3&gt;3. 创建索引&lt;/h3&gt; &#xA;&lt;p&gt;运行 &lt;code&gt;index config.toml&lt;/code&gt; 程序会将数据库中的数据创建索引，索引文件路径为 &lt;code&gt;config.toml&lt;/code&gt; 中的 &lt;code&gt;index_path&lt;/code&gt; 变量；如果中途中断，需要删除 &lt;code&gt;index_path&lt;/code&gt; 中的文件，重新运行 &lt;code&gt;index&lt;/code&gt; 程序；默认情况下，不会索引案件内容，索引大小约为 15.5G，可能会花费数小时的时间。如果需要索引案件内容，需要将index.toml中的 &lt;code&gt;index_with_full_text&lt;/code&gt; 设置为 &lt;code&gt;true&lt;/code&gt;，但是这会使索引文件增加到150G左右，索引时间也会增加到十几个小时。&lt;/p&gt; &#xA;&lt;h3&gt;4. 运行搜索服务&lt;/h3&gt; &#xA;&lt;p&gt;运行 &lt;code&gt;main config.toml&lt;/code&gt; 程序，用浏览器打开&lt;code&gt;config.toml&lt;/code&gt;网址，即可搜索。&lt;/p&gt; &#xA;&lt;h2&gt;说明&lt;/h2&gt; &#xA;&lt;p&gt;当程序和配置文件放在同一目录下，且配置文件命名为 &lt;code&gt;config.toml&lt;/code&gt; 时，可以省略配置文件路径参数。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cncases/cases/main/Screenshot.png&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Ragnt/AngryOxide</title>
    <updated>2024-01-22T01:41:42Z</updated>
    <id>tag:github.com,2024-01-22:/Ragnt/AngryOxide</id>
    <link href="https://github.com/Ragnt/AngryOxide" rel="alternate"></link>
    <summary type="html">&lt;p&gt;802.11 Attack Tool&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AngryOxide 😡&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Ragnt/AngryOxide/master/death.png&#34; alt=&#34;Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;A 802.11 Attack tool built in Rust 🦀 !&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Ragnt/AngryOxide/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Ragnt/AngryOxide/actions/workflows/ci.yml/badge.svg?branch=master&#34; alt=&#34;Builds and Release&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/commit-activity/w/Ragnt/AngryOxide&#34; alt=&#34;GitHub commit activity&#34;&gt; &lt;a href=&#34;https://discord.gg/QsEgaFndsQ&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1194365883099922643&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;AngryOxide was developed as a way to learn Rust, netlink, kernel sockets, and WiFi exploitation all at once.&lt;/p&gt; &#xA;&lt;p&gt;You can get information about how to use the tool in the &lt;a href=&#34;https://github.com/Ragnt/AngryOxide/wiki/User-Guide&#34;&gt;User Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: This project is under HEAVY development and you can expect a very fast release cycle.&lt;/p&gt; &#xA;&lt;p&gt;The overall goal of this tool is to provide a single-interface survey capability with advanced automated attacks that result in valid hashlines you can crack with &lt;a href=&#34;https://hashcat.net/hashcat/&#34;&gt;Hashcat&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This tool is heavily inspired by &lt;a href=&#34;https://github.com/ZerBea/hcxdumptool&#34;&gt;hcxdumptool&lt;/a&gt; and development wouldn&#39;t have been possible without help from ZerBea.&lt;/p&gt; &#xA;&lt;h2&gt;I wanna use it!&lt;/h2&gt; &#xA;&lt;p&gt;You can download pre-compiled binaries of AngryOxide in the &lt;a href=&#34;https://github.com/Ragnt/AngryOxide/releases/latest&#34;&gt;releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can get information about how to use the tool in the &lt;a href=&#34;https://github.com/Ragnt/AngryOxide/wiki/User-Guide&#34;&gt;User Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Active state-based attack engine used to retrieve relevent EAPOL messages from Access Points and clients.&lt;/li&gt; &#xA; &lt;li&gt;Target option that accepts MAC (aabbcc..., aa:bb:cc...) and SSID &#34;Test_SSID&#34; to limit attack scope.&lt;/li&gt; &#xA; &lt;li&gt;Whitelist option to protect specific networks from attacks. Useful if not using targets.&lt;/li&gt; &#xA; &lt;li&gt;Auto Hunt capability to find all target channels and hop between them.&lt;/li&gt; &#xA; &lt;li&gt;A Terminal-UI that presents all relevent data while still living in the terminal for easy usage over SSH.&lt;/li&gt; &#xA; &lt;li&gt;Limits DEAUTHENTICATION frames that can cause more damage than good to the authentication sequence.&lt;/li&gt; &#xA; &lt;li&gt;EAPOL 4-Way-Handshake validation using Nonce Correction, Replay Counter validation, and Temporal validation.&lt;/li&gt; &#xA; &lt;li&gt;Automatically elicits PMKID from access points where available.&lt;/li&gt; &#xA; &lt;li&gt;Utilizes GPSD with ability to set remote GPSD service address.&lt;/li&gt; &#xA; &lt;li&gt;Provides pcapng files with embedded GPS using the &lt;a href=&#34;https://www.kismetwireless.net/docs/dev/pcapng_gps/&#34;&gt;Kismet Format&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Provides a kismetdb file with all frames (with GPS) for post-processing.&lt;/li&gt; &#xA; &lt;li&gt;Wraps all output files in a gzipped tarball.&lt;/li&gt; &#xA; &lt;li&gt;Bash autocompletions for easy interface selection provided.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Attacks&lt;/h2&gt; &#xA;&lt;p&gt;Will by default attack ALL access points in range, unless atleast one target is supplied, at which point the tool will only transmit against defined targets. (But will still passively collect on other access points).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Attempts authentication/association sequence to produce EAPOL Message 1 (PMKID Collection)&lt;/li&gt; &#xA; &lt;li&gt;Attempts to retrieve hidden SSID&#39;s with undirected probe requests.&lt;/li&gt; &#xA; &lt;li&gt;Utilizes Anonymous Reassociation to force Access Points to deauthenticate their own clients (MFP Bypass)&lt;/li&gt; &#xA; &lt;li&gt;Will attempt to send Channel Switch Announcement to send clients to adjacent channels.&lt;/li&gt; &#xA; &lt;li&gt;Attempts to downgrade RSN modes to WPA2-CCMP (Probe Response Injection)&lt;/li&gt; &#xA; &lt;li&gt;Attempts to collect EAPOL M2 from stations based solely on Probe Requests (Rogue AP)&lt;/li&gt; &#xA; &lt;li&gt;Will send controlled deauthentication frames unless told not to (--nodeauth)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All of these attacks are rate-controlled both to prevent erroneous EAPOL timer resets and to maintain some level of OPSEC.&lt;/p&gt; &#xA;&lt;h2&gt;Help&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;❯ angryoxide --help&#xA;Does awesome things... with wifi.&#xA;&#xA;Usage: angryoxide [OPTIONS] --interface &amp;lt;INTERFACE&amp;gt;&#xA;&#xA;Options:&#xA;  -i, --interface &amp;lt;INTERFACE&amp;gt;  Interface to use&#xA;  -c, --channel &amp;lt;CHANNEL&amp;gt;      Optional - Channel to scan. Will use &#34;-c 1 -c 6 -c 11&#34; if none specified&#xA;  -b, --band &amp;lt;BAND&amp;gt;            Optional - Entire band to scan - will include all channels interface can support&#xA;  -t, --target &amp;lt;TARGET&amp;gt;        Optional - Target (MAC or SSID) to attack - will attack everything if none specified&#xA;  -w, --whitelist &amp;lt;WHITELIST&amp;gt;  Optional - Whitelist (MAC or SSID) to NOT attack&#xA;  -o, --output &amp;lt;OUTPUT&amp;gt;        Optional - Output filename&#xA;  -r, --rogue &amp;lt;ROGUE&amp;gt;          Optional - Tx MAC for rogue-based attacks - will randomize if excluded&#xA;      --gpsd &amp;lt;GPSD&amp;gt;            Optional - Alter default HOST:Port for GPSD connection [default: 127.0.0.1:2947]&#xA;      --autohunt               Optional - AO will auto-hunt all channels then lock in on the ones targets are on&#xA;      --headless               Optional - Set the tool to headless mode without a UI. (useful with --headless)&#xA;      --autoexit               Optional - AO will auto-exit when all targets have a valid hashline&#xA;      --notransmit             Optional - Do not transmit - passive only&#xA;      --nodeauth               Optional - Do NOT send deauths (will try other attacks only)&#xA;      --notar                  Optional - Do not tar output files&#xA;  -h, --help                   Print help&#xA;  -V, --version                Print version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building from source&lt;/h2&gt; &#xA;&lt;p&gt;If you want to build from source instead of using precompiled binaries, these are the basic instructions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Install Rust&#xA;curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh&#xA;&#xA;# Clone this repo&#xA;git clone https://github.com/Ragnt/AngryOxide.git&#xA;&#xA;# Build/Install&#xA;cd AngryOxide&#xA;make&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will build from source, install into /usr/bin/angryoxide, and install the bash completions for you.&lt;/p&gt; &#xA;&lt;h3&gt;Cross compiling:&lt;/h3&gt; &#xA;&lt;p&gt;I use &lt;a href=&#34;https://github.com/cross-rs/cross&#34;&gt;cross&lt;/a&gt; to cross compile to embedded architectures.&lt;/p&gt; &#xA;&lt;p&gt;Here is MIPS (mips-unknown-linux-musl) as an example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# make sure you have the nightly installed&#xA;rustup install nightly&#xA;&#xA;# dynamically linked &amp;amp; soft-float&#xA;cross build +nightly --target mips-unknown-linux-musl --release -Zbuild-std&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bash completion script:&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;pkg-config --variable=completionsdir bash-completion&lt;/code&gt; to determine where the completions script should be installed.&lt;/p&gt; &#xA;&lt;p&gt;I use &lt;a href=&#34;https://github.com/3v1n0/zsh-bash-completions-fallback&#34;&gt;zsh-bash-completions-fallback plugin&lt;/a&gt; to enable the bash autocompletion file zsh.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots!&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Ragnt/AngryOxide/master/screenshots/angry_oxide_demo.png&#34; alt=&#34;AccessPoints Page&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Ragnt/AngryOxide/master/screenshots/handshakes.png&#34; alt=&#34;Handshakes Page&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Ragnt/AngryOxide/master/screenshots/status_page.png&#34; alt=&#34;Status Page&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>spellshift/realm</title>
    <updated>2024-01-22T01:41:42Z</updated>
    <id>tag:github.com,2024-01-22:/spellshift/realm</id>
    <link href="https://github.com/spellshift/realm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Realm is a cross platform Red Team engagement platform with a focus on automation and reliability.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/spellshift/realm/main/docs/assets/img/realm_250px.png&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;Realm&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/spellshift/realm/actions/workflows/tests.yml/badge.svg?branch=main&#34; alt=&#34;test-status&#34;&gt; &lt;a href=&#34;https://app.codecov.io/github/spellshift/realm&#34;&gt;&lt;img src=&#34;https://codecov.io/github/spellshift/realm/branch/main/graph/badge.svg?token=KSRPHYDIE4&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/spellshift/realm&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/spellshift/realm&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://rust-reportcard.xuri.me/report/github.com/spellshift/realm&#34;&gt;&lt;img src=&#34;https://rust-reportcard.xuri.me/badge/github.com/spellshift/realm&#34; alt=&#34;Rust Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.realm.pub/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/read%20our-docs-informational&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Realm is a cross platform Red Team engagement platform with a focus on automation and reliability.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/spellshift/realm/main/docs/assets/img/realm_create_quest.png&#34; alt=&#34;realm-logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Agent (imix)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Written in rust with support for MacOS, Linux, and Windows.&lt;/li&gt; &#xA; &lt;li&gt;Supports long running tasks by reading output from tasks in real time.&lt;/li&gt; &#xA; &lt;li&gt;Interval callback times.&lt;/li&gt; &#xA; &lt;li&gt;Simple file based configuration.&lt;/li&gt; &#xA; &lt;li&gt;Embedded files.&lt;/li&gt; &#xA; &lt;li&gt;Built-in interpreter.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Server (tavern)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Web interface.&lt;/li&gt; &#xA; &lt;li&gt;Group actions.&lt;/li&gt; &#xA; &lt;li&gt;graphql backend for easy API access.&lt;/li&gt; &#xA; &lt;li&gt;OAuth login support.&lt;/li&gt; &#xA; &lt;li&gt;Cloud native deployment with pre-made terraform for production deployments.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Built-in interpreter (eldritch)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Reflective DLL Loader.&lt;/li&gt; &#xA; &lt;li&gt;Port scanning.&lt;/li&gt; &#xA; &lt;li&gt;Remote execution over SSH.&lt;/li&gt; &#xA; &lt;li&gt;And much much more: &lt;a href=&#34;https://docs.realm.pub/user-guide/eldritch&#34;&gt;https://docs.realm.pub/user-guide/eldritch&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart guide&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;To deploy a production ready instance see the &lt;a href=&#34;https://docs.realm.pub/user-guide/tavern&#34;&gt;tavern setup guide&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Start the server&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/spellshift/realm.git &amp;amp;&amp;amp; cd realm&#xA;&#xA;go run ./tavern&#xA;&#xA;# If you&#39;d like to test without deploying an agent use the test data.&#xA;ENABLE_TEST_DATA=1 go run ./tavern&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Start the agent&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/spellshift/realm.git&#xA;cd realm/implants/imix&#xA;&#xA;# Create the config file&#xA;cat &amp;lt;&amp;lt;EOF &amp;gt; /tmp/imix-config.json&#xA;{&#xA;    &#34;service_configs&#34;: [],&#xA;    &#34;target_forward_connect_ip&#34;: &#34;127.0.0.1&#34;,&#xA;    &#34;target_name&#34;: &#34;test1234&#34;,&#xA;    &#34;callback_config&#34;: {&#xA;        &#34;interval&#34;: 4,&#xA;        &#34;jitter&#34;: 1,&#xA;        &#34;timeout&#34;: 4,&#xA;        &#34;c2_configs&#34;: [&#xA;        {&#xA;            &#34;priority&#34;: 1,&#xA;            &#34;uri&#34;: &#34;http://127.0.0.1/grpc/&#34;&#xA;        }&#xA;        ]&#xA;    }&#xA;}&#xA;EOF&#xA;&#xA;cargo run -- -c /tmp/imix-config.json&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Want to contribute start here&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.realm.pub/dev-guide/introduction&#34;&gt;https://docs.realm.pub/dev-guide/introduction&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>