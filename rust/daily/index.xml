<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-15T01:37:47Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rlane/oort3</title>
    <updated>2023-10-15T01:37:47Z</updated>
    <id>tag:github.com,2023-10-15:/rlane/oort3</id>
    <link href="https://github.com/rlane/oort3" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A space fleet programming game&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Oort&lt;/h1&gt; &#xA;&lt;p&gt;A space fleet programming game. Hosted at &lt;a href=&#34;http://oort.rs&#34;&gt;http://oort.rs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Prerequisites: &lt;code&gt;cargo install trunk wasm-opt&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run &#34;cargo oort-serve&#34; to start a webserver at &lt;a href=&#34;http://localhost:8080/&#34;&gt;http://localhost:8080/&lt;/a&gt;. The first run will take several minutes to build everything.&lt;/p&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2023 Rich Lane. Licensed under GPLv3, see LICENSE.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Snojj25/linalg-rs</title>
    <updated>2023-10-15T01:37:47Z</updated>
    <id>tag:github.com,2023-10-15:/Snojj25/linalg-rs</id>
    <link href="https://github.com/Snojj25/linalg-rs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Common linear algebra in rust&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;linalg-rs - Linear Algebra library written in rust&lt;/h1&gt; &#xA;&lt;h2&gt;Linear algebra in Rust!&lt;/h2&gt; &#xA;&lt;p&gt;Parallelized using rayon with support for many common datatypes, linalg-rs tries to make matrix operations easier for the user, while still giving you as the user the performance you deserve.&lt;/p&gt; &#xA;&lt;p&gt;Regular matrices have many features already ready, while Sparse ones have most of them. Whenever you want to switch from one to the other, just call &lt;code&gt;from_dense&lt;/code&gt;, or &lt;code&gt;from_sparse&lt;/code&gt; to quickly and easily convert!&lt;/p&gt; &#xA;&lt;p&gt;Need a feature? Please let me/us know!&lt;/p&gt; &#xA;&lt;p&gt;Even have custom declarative macros to create hashmap for your sparse matrices!&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Dens Matrices&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use linalg_rs::{LinAlgFloats, Matrix};&#xA;&#xA;fn main() {&#xA;    let a = Matrix::&amp;lt;f32&amp;gt;::randomize((8, 56));&#xA;    let b = Matrix::&amp;lt;f32&amp;gt;::randomize((56, 8));&#xA;&#xA;    let c = a.matmul(&amp;amp;b).unwrap();&#xA;&#xA;    let res = c.sin().exp(3).unwrap().pow(2).add_val(4.0).abs();&#xA;&#xA;    // To print this beautiful matrix:&#xA;    res.print(5);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sparse Matrices&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use std::collections::HashMap;&#xA;use linalg_rs::{SparseMatrix, SparseMatrixData};&#xA;&#xA;fn main() {&#xA;    let indexes: SparseMatrixData&amp;lt;f64&amp;gt; = smd![&#xA;        ((0, 1), 2.0), &#xA;        ((1, 0), 4.0), &#xA;        ((2, 3), 6.0), &#xA;        ((3, 3), 8.0)&#xA;    ];&#xA;&#xA;    let sparse = SparseMatrix::&amp;lt;f64&amp;gt;::new(indexes, (4, 4));&#xA;&#xA;    sparse.print(3);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More examples can be found &lt;a href=&#34;https://raw.githubusercontent.com/Snojj25/linalg-rs/main/examples/&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Easy to use!&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Blazingly fast&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Linear Algebra module fully functional on f32 and f64&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Optimized matrix multiplication for both sparse and dense matrices&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Easily able to convert between sparse and dense matrices&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Serde support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support for all signed numeric datatypes&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Can be sent over threads&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Sparse matrices&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>