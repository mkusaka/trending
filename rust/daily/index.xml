<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-01T01:40:59Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>FractalFir/rustc_codegen_clr</title>
    <updated>2023-09-01T01:40:59Z</updated>
    <id>tag:github.com,2023-09-01:/FractalFir/rustc_codegen_clr</id>
    <link href="https://github.com/FractalFir/rustc_codegen_clr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This rust compiler backend emmits valid CLR IR, enambling you to use Rust in .NET projects&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;What is rustc_codegen_clr?&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE: this project is a very early proof-of-concept&lt;/em&gt; This is a compiler backend for rustc which targets the .NET platform and runtime, and could enable compiling rust code for the &lt;code&gt;.NET&lt;/code&gt; runtime. This would enable you to use some Rust libraries from C#/F#, with little effort.&lt;/p&gt; &#xA;&lt;h1&gt;.NET runtime has GC, so would not Rusts memory management be useless here?&lt;/h1&gt; &#xA;&lt;p&gt;Rust code usually heavily uses stack instead of Heap. This would speed up code ruining within the CLR runtime too. As for the heap allocated objects, they will be allocated from unmanged(non-GC) memory, and will be allocated/freed exactly like in Rust.&lt;/p&gt; &#xA;&lt;h1&gt;I can already load shared libraries from C# code, so is this not useless? Does this improve interop?&lt;/h1&gt; &#xA;&lt;p&gt;The Rust APIs this codegen exposes to C#/F# code would be only slightly easier to use than something you could expose in a .so or .dll rust library.&lt;/p&gt; &#xA;&lt;p&gt;Interop would still require some effort, but the Rust code would be bundled together with everything else. You will also have the guarantee that types you use from C# are exactly the same as the ones in C#, preventing any issues coming from such mismatch. All types can be safely send between Rust and C#, with exactly the same layout.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, since all Rust code compiled with this codegen can be bundled with C#/F# code, you would no longer need to ship different versions of the library for different architectures. Any architecture supported by CLR would work out of the box, without the exact same binary.&lt;/p&gt; &#xA;&lt;p&gt;You also avoid the cost of switches between code running within the runtime and outside it. While this cost is not something unbearable, it is not something you can easily get rid of, and reducing it has some safety penalties associated with. In this case, all code will run inside the runtime, meaning no transition between code running inside runtime and outside of it will occur.&lt;/p&gt; &#xA;&lt;p&gt;Compiling Rust to CLR is potentially better for the JIT. Since CLR&#39;s JIT now &#34;sees&#34; all the code, it can make better decisions regarding optimization, producing faster code.&lt;/p&gt; &#xA;&lt;h1&gt;Licensing&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;rustc_codegen_clr&lt;/code&gt; is dual licensed under MIT license or Apache License, Version 2.0.&lt;/p&gt; &#xA;&lt;h1&gt;Compatibility?&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;rustc_codegen_clr&lt;/code&gt; is tested solely on Linux x86_64. Anything else &lt;em&gt;should&lt;/em&gt;, but does not have to work.&lt;/p&gt; &#xA;&lt;h1&gt;How far is the project along:&lt;/h1&gt; &#xA;&lt;h2&gt;Functionality&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Basic functions get translated properly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Arithmetic operations work&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Most &lt;code&gt;if&lt;/code&gt;&#39;s work.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Basic &lt;code&gt;match&lt;/code&gt; works.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; While loops work.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Calls&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Basic IL optimization.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Setting value of a reference&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Getting value of a reference&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Creating slices from arrays&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Creating arrays&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Indexing arrays &lt;em&gt;broken&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Getting values of fields&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Setting fields&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Pointer dereferecing&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Basic generics&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; for loops&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Types&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE This section says only if a type can be translated for .NET to understand. This &lt;strong&gt;does not&lt;/strong&gt; mean the type is fully usable.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; All integer and float types are supported.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Tuples are supported&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; References are supported&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Arrays, slices&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Void type&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Combinations of all of the above.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Structs&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Enums&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Traits &lt;em&gt;Some, not all&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; iterators&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Issues&lt;/h1&gt; &#xA;&lt;p&gt;The backend is still very much untested and may contain a litany of buggs. The backend crashes any time it encounters something not supported yet.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>deepfence/ebpfguard</title>
    <updated>2023-09-01T01:40:59Z</updated>
    <id>tag:github.com,2023-09-01:/deepfence/ebpfguard</id>
    <link href="https://github.com/deepfence/ebpfguard" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rust library for writing Linux security policies using eBPF&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/deepfence/ebpfguard/main/images/readme/deepfence-logo.png&#34; alt=&#34;Deepfence Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/deepfence/ebpfguard/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/deepfence/ebpfguard&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/deepfence/ebpfguard/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/deepfence/ebpfguard&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/deepfence/ebpfguard/actions?query=workflow&#34;&gt;&lt;img src=&#34;https://github.com/deepfence/ebpfguard/workflows/build-test/badge.svg?sanitize=true&#34; alt=&#34;Workflow Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/deepfence/ebpfguard/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/deepfence/ebpfguard&#34; alt=&#34;GitHub issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://join.slack.com/t/deepfence-community/shared_invite/zt-podmzle9-5X~qYx8wMaLt9bGWwkSdgQ&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/slack-@deepfence-blue.svg?logo=slack&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; &lt;a href=&#34;https://runacap.com/ross-index/annual-2022/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; &lt;img style=&#34;width: 260px; height: 56px&#34; src=&#34;https://runacap.com/wp-content/uploads/2023/02/Annual_ROSS_badge_black_2022.svg?sanitize=true&#34; alt=&#34;ROSS Index - Fastest Growing Open-Source Startups | Runa Capital&#34; width=&#34;260&#34; height=&#34;56&#34;&gt; &lt;/a&gt; &lt;/h3&gt; &#xA;&lt;h1&gt;Ebpfguard&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Ebpfguard&lt;/strong&gt; is a library for managing Linux security policies. It is based on &lt;a href=&#34;https://www.kernel.org/doc/html/latest/admin-guide/LSM/index.html&#34;&gt;LSM hooks&lt;/a&gt;, but without necessity to write any kernel modules or eBPF programs directly. It allows to write policies in Rust (or YAML) in user space.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s based on eBPF and &lt;a href=&#34;https://aya-rs.dev&#34;&gt;Aya&lt;/a&gt; library, but takes away the need to use them directly.&lt;/p&gt; &#xA;&lt;h2&gt;Usage example&lt;/h2&gt; &#xA;&lt;p&gt;Deny mount operation for all users.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;    const BPF_MAPS_PATH: &amp;amp;str = &#34;/sys/fs/bpf/example_sb_mount&#34;;&#xA;&#xA;    // Create a directory where ebpfguard policy manager can store its BPF&#xA;    // objects (maps).&#xA;    std::fs::create_dir_all(BPF_MAPS_PATH)?;&#xA;&#xA;    // Create a policy manager.&#xA;    let mut policy_manager = PolicyManager::new(BPF_MAPS_PATH)?;&#xA;&#xA;    // Attach the policy manager to the mount LSM hook.&#xA;    let mut sb_mount = policy_manager.attach_sb_mount()?;&#xA;&#xA;    // Get the receiver end of the alerts channel (for the `file_open` LSM&#xA;    // hook).&#xA;    let mut sb_mount_rx = sb_mount.alerts().await?;&#xA;&#xA;    // Define policies which deny mount operations for all processes (except&#xA;    // for the specified subject, if defined).&#xA;    sb_mount&#xA;        .add_policy(SbMount {&#xA;            subject: PolicySubject::All,&#xA;            allow: false,&#xA;        })&#xA;        .await?;&#xA;&#xA;    if let Some(alert) = sb_mount_rx.recv().await {&#xA;        info!(&#xA;            &#34;sb_mount alert: pid={} subject={}&#34;,&#xA;            alert.pid, alert.subject&#xA;        );&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Imports and cargo file are available in &lt;a href=&#34;https://raw.githubusercontent.com/deepfence/ebpfguard/main/examples/readme_mount&#34;&gt;example source code&lt;/a&gt;. For more check out &lt;a href=&#34;https://raw.githubusercontent.com/deepfence/ebpfguard/main/docs/gh/examples.md&#34;&gt;examples doc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported LSM hooks&lt;/h2&gt; &#xA;&lt;p&gt;LSM hooks supported by Ebpfguard are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://elixir.bootlin.com/linux/v6.2.12/source/include/linux/lsm_hooks.h#L62&#34;&gt;&lt;code&gt;bprm_check_security&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://elixir.bootlin.com/linux/v6.2.12/source/include/linux/lsm_hooks.h#L620&#34;&gt;&lt;code&gt;file_open&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://elixir.bootlin.com/linux/v6.2.12/source/include/linux/lsm_hooks.h#L128&#34;&gt;&lt;code&gt;sb_mount&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://elixir.bootlin.com/linux/v6.2.12/source/include/linux/lsm_hooks.h#L147&#34;&gt;&lt;code&gt;sb_remount&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://elixir.bootlin.com/linux/v6.2.12/source/include/linux/lsm_hooks.h#L159&#34;&gt;&lt;code&gt;sb_umount&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://elixir.bootlin.com/linux/v6.2.12/source/include/linux/lsm_hooks.h#L904&#34;&gt;&lt;code&gt;socket_bind&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://elixir.bootlin.com/linux/v6.2.12/source/include/linux/lsm_hooks.h#L912&#34;&gt;&lt;code&gt;socket_connect&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://elixir.bootlin.com/linux/v6.2.12/source/include/linux/lsm_hooks.h#L709&#34;&gt;&lt;code&gt;task_fix_setuid&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://raw.githubusercontent.com/deepfence/ebpfguard/main/docs/gh/prerequisites.md&#34;&gt;prerequisites doc&lt;/a&gt; to set up your environment.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://raw.githubusercontent.com/deepfence/ebpfguard/main/docs/gh/development.md&#34;&gt;development doc&lt;/a&gt; for compillation and testing commands.&lt;/p&gt; &#xA;&lt;h2&gt;Get in touch&lt;/h2&gt; &#xA;&lt;p&gt;Thank you for using Ebpfguard. Please feel welcome to participate in the &lt;a href=&#34;https://raw.githubusercontent.com/deepfence/ebpfguard/main/docs/gh/community.md&#34;&gt;Deepfence community&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://community.deepfence.io&#34;&gt;Deepfence Community Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://join.slack.com/t/deepfence-community/shared_invite/zt-podmzle9-5X~qYx8wMaLt9bGWwkSdgQ&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/slack-@deepfence-brightgreen.svg?logo=slack&#34;&gt;&lt;/a&gt; Got a question, need some help? Find the Deepfence team on Slack&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepfence/ebpfguard/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/deepfence/ebpfguard&#34; alt=&#34;GitHub issues&#34;&gt;&lt;/a&gt; Got a feature request or found a bug? Raise an issue&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- * [![Documentation](https://img.shields.io/badge/documentation-read-green)](https://community.deepfence.io/docs/gh/ebpfguard/) Read the documentation in the [Deepfence Ebpfguard Documentation](https://community.deepfence.io/docs/gh/ebpfguard/) --&gt; &#xA;&lt;!-- * [productsecurity at deepfence dot io](SECURITY.md): Found a security issue? Share it in confidence --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Find out more at &lt;a href=&#34;https://deepfence.io/&#34;&gt;deepfence.io&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Ebpfguard&#39;s userspace part is licensed under &lt;a href=&#34;https://github.com/deepfence/ebpfguard/raw/main/LICENSE&#34;&gt;Apache License, version 2.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;eBPF programs inside ebpfguard-ebpf directory are licensed under &lt;a href=&#34;https://github.com/deepfence/ebpfguard/raw/main/ebpfguard-ebpf/LICENSE&#34;&gt;GNU General Public License, version 2&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>biomejs/biome</title>
    <updated>2023-09-01T01:40:59Z</updated>
    <id>tag:github.com,2023-09-01:/biomejs/biome</id>
    <link href="https://github.com/biomejs/biome" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Toolchain of the web&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Biome - Toolchain of the web&#34; src=&#34;https://raw.githubusercontent.com/biomejs/resources/main/biome-logo-slogan.svg?sanitize=true&#34; width=&#34;400&#34;&gt; &lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://discord.gg/BypW39g6Yc&#34;&gt;&lt;img src=&#34;https://badgen.net/discord/online-members/BypW39g6Yc?icon=discord&amp;amp;label=discord&amp;amp;color=green&#34; alt=&#34;Discord chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/biomejs/biome/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://github.com/biomejs/biome/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;CI on main&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@biomejs/biome/v/latest&#34;&gt;&lt;img src=&#34;https://badgen.net/npm/v/@biomejs/biome?icon=npm&amp;amp;color=green&amp;amp;label=%40biomejs%2Fbiome&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=biomejs.biome&#34;&gt;&lt;img src=&#34;https://badgen.net/vs-marketplace/v/biomejs.biome?label=vscode&amp;amp;icon=visualstudio&amp;amp;color=green&#34; alt=&#34;VSCode version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://open-vsx.org/extension/biomejs/biome&#34;&gt;&lt;img src=&#34;https://badgen.net/open-vsx/version/biomejs/biome?label=open-vsx&amp;amp;color=green&#34; alt=&#34;Open VSX version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;strong&gt;Biome&lt;/strong&gt; formats and lints your code in a &lt;a href=&#34;https://github.com/biomejs/biome/raw/main/benchmark/README.md&#34;&gt;fraction of a second&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Biome&lt;/strong&gt; supports JavaScript, TypeScript, JSON, and CSS. It aims to support &lt;a href=&#34;https://biomejs.dev/internals/language_support/&#34;&gt;all main languages&lt;/a&gt; of modern web development.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Biome&lt;/strong&gt; has sane defaults and requires minimal configuration. &lt;strong&gt;Biome&lt;/strong&gt; helps you as much as possible by displaying detailed and contextualized diagnostics. Read more about our &lt;a href=&#34;https://biomejs.dev/&#34;&gt;project philosophy&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Biome&lt;/strong&gt; unifies functionality that has previously been separate tools. Building upon a shared base allows us to provide a cohesive experience for processing code, displaying errors, parallelizing work, caching, and configuration.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Biome&lt;/strong&gt; is designed to eventually replace &lt;a href=&#34;https://babeljs.io/&#34;&gt;Babel&lt;/a&gt;, &lt;a href=&#34;https://eslint.org/&#34;&gt;ESLint&lt;/a&gt;, &lt;a href=&#34;https://webpack.js.org/&#34;&gt;webpack&lt;/a&gt;, &lt;a href=&#34;https://prettier.io/&#34;&gt;Prettier&lt;/a&gt;, &lt;a href=&#34;https://jestjs.io/&#34;&gt;Jest&lt;/a&gt;, and others.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Biome&lt;/strong&gt; has first-class IDE support, with a sophisticated parser that represents the source text in full fidelity and top-notch error recovery.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Biome&lt;/strong&gt; is &lt;a href=&#34;https://github.com/biomejs/biome/tree/main/LICENSE&#34;&gt;MIT licensed&lt;/a&gt; and moderated under the &lt;a href=&#34;https://github.com/biomejs/biome/tree/main/CODE_OF_CONDUCT.md&#34;&gt;Contributor Covenant Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://biomejs.dev/&#34;&gt;homepage&lt;/a&gt; to learn more about Biome, or directly head to the &lt;a href=&#34;https://biomejs.dev/guides/getting-started/&#34;&gt;Getting Started guide&lt;/a&gt; to start using Biome.&lt;/p&gt;</summary>
  </entry>
</feed>