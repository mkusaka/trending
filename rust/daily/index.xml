<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-16T01:41:55Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bytedance/g3</title>
    <updated>2023-05-16T01:41:55Z</updated>
    <id>tag:github.com,2023-05-16:/bytedance/g3</id>
    <link href="https://github.com/bytedance/g3" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Enterprise-oriented Generic Proxy Solutions&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://www.whatrustisit.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/minimum%20rustc-1.66-green?logo=rust&#34; alt=&#34;minimum rustc: 1.66&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/bytedance/g3/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache_2.0-blue.svg?sanitize=true&#34; alt=&#34;License: Apache 2.0&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;G3 Project&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytedance/g3/master/README.zh_CN.md&#34;&gt;中文版 README&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;This is the project we used to build enterprise-oriented generic proxy solutions, including but not limited to proxy / reverse proxy (WIP) / load balancer (TBD) / nat traversal (TBD).&lt;/p&gt; &#xA;&lt;h2&gt;Components&lt;/h2&gt; &#xA;&lt;p&gt;G3 Project is make up of many components.&lt;/p&gt; &#xA;&lt;p&gt;The project level docs resides in the &lt;em&gt;doc&lt;/em&gt; subdirectory, and you should see the links below for the important ones. Each component will have its own doc in its &lt;em&gt;doc&lt;/em&gt; subdirectory.&lt;/p&gt; &#xA;&lt;h3&gt;g3proxy&lt;/h3&gt; &#xA;&lt;p&gt;A generic forward proxy solution, but you can also use it as tcp streaming / transparent proxy / reverse proxy as we have basic support built in.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/bytedance/g3/master/g3proxy/README.md&#34;&gt;g3proxy&lt;/a&gt; for detailed introduction.&lt;/p&gt; &#xA;&lt;h3&gt;g3tiles&lt;/h3&gt; &#xA;&lt;p&gt;A work in progress reverse proxy solution.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/bytedance/g3/master/g3bench/README.md&#34;&gt;g3bench&lt;/a&gt; for detailed introduction.&lt;/p&gt; &#xA;&lt;h3&gt;g3bench&lt;/h3&gt; &#xA;&lt;p&gt;A benchmark tool, which support HTTP 1.x / HTTP 2 / TLS Handshake / Cloudflare Keyless.&lt;/p&gt; &#xA;&lt;h3&gt;g3mkcert&lt;/h3&gt; &#xA;&lt;p&gt;A tool to make root CA / intermediate CA / TLS server / TLS client certificates.&lt;/p&gt; &#xA;&lt;h3&gt;g3fcgen&lt;/h3&gt; &#xA;&lt;p&gt;Fake certificate generator for g3proxy.&lt;/p&gt; &#xA;&lt;h2&gt;Target Platform&lt;/h2&gt; &#xA;&lt;p&gt;Only Linux is supported currently. But we are open to PRs to add support to other platforms.&lt;/p&gt; &#xA;&lt;h2&gt;Dev-env Setup Guide&lt;/h2&gt; &#xA;&lt;p&gt;Follow &lt;a href=&#34;https://raw.githubusercontent.com/bytedance/g3/master/doc/dev-setup.md&#34;&gt;dev-setup&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Standards&lt;/h2&gt; &#xA;&lt;p&gt;Follow &lt;a href=&#34;https://raw.githubusercontent.com/bytedance/g3/master/doc/standards.md&#34;&gt;standards&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Release and Packaging&lt;/h2&gt; &#xA;&lt;p&gt;We will set tags for each release of each component, in the form &lt;em&gt;&amp;lt;name&amp;gt;-v&amp;lt;version&amp;gt;&lt;/em&gt;. You can use these tags to generate source tarballs. And we have added deb and rpm package files for each component that is ready for distribution.&lt;/p&gt; &#xA;&lt;p&gt;If you want to do a release build:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;generate a release tarball&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./scripts/release/build_tarball.sh &amp;lt;name&amp;gt;-v&amp;lt;version&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;All vendor sources will be added to the source tarball, so you can save the source tarball and build it offline at anywhere that have the compiler and dependencies installed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;build the package&lt;/p&gt; &lt;p&gt;For deb package:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tar xf &amp;lt;name&amp;gt;-&amp;lt;version&amp;gt;.tar.xz&#xA;cd &amp;lt;name&amp;gt;-&amp;lt;version&amp;gt;&#xA;./build_deb_from_tar.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For rpm package:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tar xvf &amp;lt;name&amp;gt;-&amp;lt;version&amp;gt;.tar.xz ./&amp;lt;name&amp;gt;-&amp;lt;version&amp;gt;/&amp;lt;name&amp;gt;.spec&#xA;cp &amp;lt;name&amp;gt;-&amp;lt;version&amp;gt;.tar.xz ~/rpmbuild/SOURCES/&#xA;rpmbuild -ba ./&amp;lt;name&amp;gt;-&amp;lt;version&amp;gt;/&amp;lt;name&amp;gt;.spec&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you want to build a package directly from the git repo:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;For deb package:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./build_deb_from_git.sh &amp;lt;name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For rpm package:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./build_rpm_from_git.sh &amp;lt;name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Please check &lt;a href=&#34;https://raw.githubusercontent.com/bytedance/g3/master/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Please check &lt;a href=&#34;https://raw.githubusercontent.com/bytedance/g3/master/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;If you discover a potential security issue in this project, or think you may have discovered a security issue, we ask that you notify Bytedance Security via our &lt;a href=&#34;https://security.bytedance.com/src&#34;&gt;security center&lt;/a&gt; or &lt;a href=&#34;mailto:sec@bytedance.com&#34;&gt;vulnerability reporting email&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please do &lt;strong&gt;not&lt;/strong&gt; create a public GitHub issue.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/bytedance/g3/master/LICENSE&#34;&gt;Apache-2.0 License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sarah-ek/faer-rs</title>
    <updated>2023-05-16T01:41:55Z</updated>
    <id>tag:github.com,2023-05-16:/sarah-ek/faer-rs</id>
    <link href="https://github.com/sarah-ek/faer-rs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Linear algebra foundation for the Rust programming language&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;faer&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;faer&lt;/code&gt; is a collection of crates that implement low level linear algebra routines in pure Rust. The aim is to eventually provide a fully featured library for linear algebra with focus on portability, correctness, and performance.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://faer-rs.github.io&#34;&gt;official website&lt;/a&gt; and the &lt;code&gt;docs.rs&lt;/code&gt; documentation for code examples and usage instructions.&lt;/p&gt; &#xA;&lt;p&gt;Questions about using the library, contributing, and future directions can be discussed in the &lt;a href=&#34;https://discord.gg/Ak5jDsAFVZ&#34;&gt;Discord server&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;faer-core&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.rs/faer-core&#34;&gt;&lt;img src=&#34;https://docs.rs/faer-core/badge.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/faer-core&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/faer-core.svg?sanitize=true&#34; alt=&#34;Crate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The core module implements matrix structures, as well as BLAS-like matrix operations such as matrix multiplication and solving triangular linear systems.&lt;/p&gt; &#xA;&lt;h2&gt;faer-cholesky&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.rs/faer-cholesky&#34;&gt;&lt;img src=&#34;https://docs.rs/faer-cholesky/badge.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/faer-cholesky&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/faer-cholesky.svg?sanitize=true&#34; alt=&#34;Crate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Cholesky module implements the LLT and LDLT matrix decompositions. These allow for solving symmetric/Hermitian (+positive definite for LLT) linear systems.&lt;/p&gt; &#xA;&lt;h2&gt;faer-lu&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.rs/faer-lu&#34;&gt;&lt;img src=&#34;https://docs.rs/faer-lu/badge.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/faer-lu&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/faer-lu.svg?sanitize=true&#34; alt=&#34;Crate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The LU module implements the LU factorization with row pivoting, as well as the version with full pivoting.&lt;/p&gt; &#xA;&lt;h2&gt;faer-qr&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.rs/faer-qr&#34;&gt;&lt;img src=&#34;https://docs.rs/faer-qr/badge.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/faer-qr&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/faer-qr.svg?sanitize=true&#34; alt=&#34;Crate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The QR module implements the QR decomposition with no pivoting, as well as the version with column pivoting.&lt;/p&gt; &#xA;&lt;h2&gt;faer-svd&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.rs/faer-svd&#34;&gt;&lt;img src=&#34;https://docs.rs/faer-svd/badge.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/faer-svd&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/faer-svd.svg?sanitize=true&#34; alt=&#34;Crate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The SVD module implements the singular value decomposition.&lt;/p&gt; &#xA;&lt;h2&gt;faer-evd&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.rs/faer-evd&#34;&gt;&lt;img src=&#34;https://docs.rs/faer-evd/badge.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/faer-evd&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/faer-evd.svg?sanitize=true&#34; alt=&#34;Crate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The EVD module implements the eigenvalue decomposition for Hermitian and non Hermitian matrices .&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;If you&#39;d like to contribute to &lt;code&gt;faer&lt;/code&gt;, check out the list of &#34;good first issue&#34; issues. These are all (or should be) issues that are suitable for getting started, and they generally include a detailed set of instructions for what to do. Please ask questions on the Discord server or the issue itself if anything is unclear!&lt;/p&gt; &#xA;&lt;h1&gt;Benchmarks&lt;/h1&gt; &#xA;&lt;p&gt;The benchmarks were run on an &lt;code&gt;11th Gen Intel(R) Core(TM) i5-11400 @ 2.60GHz&lt;/code&gt; with 12 threads.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;nalgebra&lt;/code&gt; is used with the &lt;code&gt;matrixmultiply&lt;/code&gt; backend&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ndarray&lt;/code&gt; is used with the &lt;code&gt;openblas&lt;/code&gt; backend&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;eigen&lt;/code&gt; is compiled with &lt;code&gt;-march=native -O3 -fopenmp&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All computations are done on column major matrices containing &lt;code&gt;f64&lt;/code&gt; values.&lt;/p&gt; &#xA;&lt;h2&gt;Matrix multiplication&lt;/h2&gt; &#xA;&lt;p&gt;Multiplication of two square matrices of dimension &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    n       faer  faer(par)    ndarray   nalgebra      eigen&#xA;   32      1.1µs      1.1µs      1.1µs      1.7µs      1.2µs&#xA;   64        8µs        8µs      7.8µs     10.6µs      5.1µs&#xA;   96     27.7µs     10.9µs     26.2µs     34.8µs       10µs&#xA;  128     65.3µs       17µs     35.3µs     78.8µs     32.7µs&#xA;  192    216.4µs     53.8µs     66.6µs    262.3µs     51.8µs&#xA;  256    510.8µs    117.4µs    202.1µs    604.8µs    142.9µs&#xA;  384      1.7ms    339.4µs    437.9µs        2ms      327µs&#xA;  512        4ms    787.8µs      1.3ms      4.7ms      1.2ms&#xA;  640      7.9ms      1.6ms      2.3ms      9.2ms        2ms&#xA;  768     13.8ms      2.9ms      3.6ms       16ms      3.2ms&#xA;  896     22.1ms      4.6ms      6.5ms     25.8ms      5.9ms&#xA; 1024     33.9ms      6.6ms      9.7ms       39ms      8.3ms&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Triangular solve&lt;/h2&gt; &#xA;&lt;p&gt;Solving &lt;code&gt;AX = B&lt;/code&gt; in place where &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; are two square matrices of dimension &lt;code&gt;n&lt;/code&gt;, and &lt;code&gt;A&lt;/code&gt; is a triangular matrix.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    n       faer  faer(par)    ndarray   nalgebra      eigen&#xA;   32      2.3µs      2.3µs      8.5µs      7.1µs      2.9µs&#xA;   64       10µs     10.2µs       26µs     34.4µs     13.4µs&#xA;   96     28.5µs     24.1µs       55µs    101.1µs     36.8µs&#xA;  128     57.8µs       40µs    145.1µs    232.8µs       82µs&#xA;  192      170µs     93.2µs    263.7µs    783.1µs    213.9µs&#xA;  256    371.8µs    166.5µs    650.7µs      1.9ms    494.7µs&#xA;  384      1.1ms    325.1µs      1.4ms      7.2ms      1.3ms&#xA;  512      2.6ms    664.3µs      3.6ms     16.9ms      3.2ms&#xA;  640      4.7ms      1.5ms      5.7ms     33.3ms      5.5ms&#xA;  768        8ms      2.4ms      9.5ms     55.7ms      9.3ms&#xA;  896     12.3ms      3.6ms     13.7ms     88.8ms       14ms&#xA; 1024     18.8ms      5.2ms     20.1ms    130.4ms     22.8ms&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Triangular inverse&lt;/h2&gt; &#xA;&lt;p&gt;Computing &lt;code&gt;A^-1&lt;/code&gt; where &lt;code&gt;A&lt;/code&gt; is a square triangular matrix with dimension &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    n       faer  faer(par)    ndarray   nalgebra      eigen&#xA;   32        5µs     12.4µs      8.5µs      7.1µs      2.9µs&#xA;   64     13.9µs     19.7µs     25.9µs     34.3µs     13.4µs&#xA;   96     32.6µs     40.3µs     54.8µs    101.1µs     36.9µs&#xA;  128     45.7µs     53.1µs      145µs    232.8µs       82µs&#xA;  192      115µs     97.3µs    262.5µs    782.2µs    213.6µs&#xA;  256    199.1µs    143.9µs      641µs      1.9ms    493.7µs&#xA;  384    544.4µs    279.5µs      1.4ms      6.4ms      1.3ms&#xA;  512      1.1ms    456.9µs      3.5ms     15.6ms      3.2ms&#xA;  640        2ms    653.6µs      5.6ms     30.2ms      5.5ms&#xA;  768      3.2ms    956.5µs      9.3ms     51.7ms      9.3ms&#xA;  896      4.8ms      1.5ms     13.4ms     81.8ms       14ms&#xA; 1024      7.2ms      2.4ms     19.9ms    122.5ms     22.6ms&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Cholesky decomposition&lt;/h2&gt; &#xA;&lt;p&gt;Factorizing a square matrix with dimension &lt;code&gt;n&lt;/code&gt; as &lt;code&gt;L×L.T&lt;/code&gt;, where &lt;code&gt;L&lt;/code&gt; is lower triangular.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    n       faer  faer(par)    ndarray   nalgebra      eigen&#xA;   32      2.2µs      2.3µs      3.2µs        2µs      2.2µs&#xA;   64      7.7µs        8µs     38.2µs     10.1µs      8.6µs&#xA;   96     20.4µs     20.6µs     95.3µs     29.7µs     19.8µs&#xA;  128       32µs     32.3µs      298µs     74.3µs     36.2µs&#xA;  192     90.8µs     99.9µs    301.1µs    252.5µs     94.7µs&#xA;  256    166.7µs    157.4µs    694.4µs      610µs      197µs&#xA;  384    470.7µs    451.1µs      1.2ms      2.1ms    543.6µs&#xA;  512      1.1ms    640.8µs      3.7ms      5.1ms      1.2ms&#xA;  640      1.9ms      1.3ms      3.2ms       10ms      2.1ms&#xA;  768      3.3ms      1.8ms      5.5ms     17.3ms      3.5ms&#xA;  896      5.1ms      2.7ms      6.9ms     27.4ms      5.4ms&#xA; 1024      7.8ms      3.4ms     14.5ms     40.4ms      8.1ms&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;LU decomposition with partial pivoting&lt;/h2&gt; &#xA;&lt;p&gt;Factorizing a square matrix with dimension &lt;code&gt;n&lt;/code&gt; as &lt;code&gt;P×L×U&lt;/code&gt;, where &lt;code&gt;P&lt;/code&gt; is a permutation matrix, &lt;code&gt;L&lt;/code&gt; is unit lower triangular and &lt;code&gt;U&lt;/code&gt; is upper triangular.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    n       faer  faer(par)    ndarray   nalgebra      eigen&#xA;   32      4.2µs      4.3µs      5.7µs      4.9µs      3.8µs&#xA;   64     16.7µs     17.4µs     17.5µs     22.4µs     15.6µs&#xA;   96     38.9µs     40.7µs     34.9µs     70.2µs     36.6µs&#xA;  128     74.1µs     75.3µs     99.1µs    172.7µs    128.2µs&#xA;  192    202.6µs    234.3µs      188µs    537.6µs      418µs&#xA;  256    418.9µs    416.5µs    319.2µs      1.3ms    827.9µs&#xA;  384      1.1ms      905µs    880.7µs      4.5ms      1.9ms&#xA;  512      2.4ms      1.7ms      1.5ms     11.2ms      4.3ms&#xA;  640      4.1ms      2.5ms      2.3ms     20.9ms      5.6ms&#xA;  768      6.7ms      3.6ms      3.4ms     36.2ms      8.7ms&#xA;  896     10.2ms      5.2ms      4.8ms     57.1ms     11.3ms&#xA; 1024       15ms      7.3ms      6.8ms     89.3ms     17.2ms&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;LU decomposition with full pivoting&lt;/h2&gt; &#xA;&lt;p&gt;Factorizing a square matrix with dimension &lt;code&gt;n&lt;/code&gt; as &lt;code&gt;P×L×U×Q.T&lt;/code&gt;, where &lt;code&gt;P&lt;/code&gt; and &lt;code&gt;Q&lt;/code&gt; are permutation matrices, &lt;code&gt;L&lt;/code&gt; is unit lower triangular and &lt;code&gt;U&lt;/code&gt; is upper triangular.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    n       faer  faer(par)    ndarray   nalgebra      eigen&#xA;   32      5.8µs      5.8µs          -     14.8µs     12.2µs&#xA;   64     24.6µs     24.5µs          -    105.1µs     72.1µs&#xA;   96       67µs     67.2µs          -    347.5µs      207µs&#xA;  128    155.7µs    155.9µs          -    836.3µs    460.8µs&#xA;  192    456.6µs    457.2µs          -      2.7ms      1.4ms&#xA;  256      1.2ms      1.2ms          -      6.6ms      3.4ms&#xA;  384      3.8ms      3.8ms          -       22ms     10.9ms&#xA;  512     10.2ms      7.9ms          -     52.6ms     26.6ms&#xA;  640     17.7ms     11.9ms          -    101.4ms       50ms&#xA;  768     31.2ms     17.7ms          -    175.3ms     86.1ms&#xA;  896     47.7ms     25.1ms          -    280.5ms    135.4ms&#xA; 1024     75.4ms     38.8ms          -    431.7ms    204.4ms&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;QR decomposition with no pivoting&lt;/h2&gt; &#xA;&lt;p&gt;Factorizing a square matrix with dimension &lt;code&gt;n&lt;/code&gt; as &lt;code&gt;QR&lt;/code&gt;, where &lt;code&gt;Q&lt;/code&gt; is unitary and &lt;code&gt;R&lt;/code&gt; is upper triangular.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    n       faer  faer(par)    ndarray   nalgebra      eigen&#xA;   32     11.9µs     11.9µs     15.1µs      7.9µs      7.1µs&#xA;   64     36.6µs     36.6µs     61.1µs     43.1µs     44.7µs&#xA;   96     75.2µs     75.2µs    321.3µs    139.2µs     79.3µs&#xA;  128    132.3µs    132.9µs    828.1µs      323µs    153.8µs&#xA;  192    335.3µs    335.3µs      1.6ms      1.1ms    388.7µs&#xA;  256    672.7µs    732.2µs      3.4ms      2.5ms    796.3µs&#xA;  384      1.9ms      1.7ms      8.1ms      8.1ms      2.1ms&#xA;  512      4.1ms      3.1ms     15.7ms     18.8ms      4.5ms&#xA;  640      7.4ms      4.6ms     22.8ms     36.1ms        8ms&#xA;  768     12.3ms      6.7ms     35.2ms     61.7ms     13.2ms&#xA;  896     18.7ms      9.4ms     46.6ms     98.1ms     20.5ms&#xA; 1024     27.7ms     13.1ms     68.3ms    150.3ms     30.5ms&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;QR decomposition with column pivoting&lt;/h2&gt; &#xA;&lt;p&gt;Factorizing a square matrix with dimension &lt;code&gt;n&lt;/code&gt; as &lt;code&gt;QRP&lt;/code&gt;, where &lt;code&gt;P&lt;/code&gt; is a permutation matrix, &lt;code&gt;Q&lt;/code&gt; is unitary and &lt;code&gt;R&lt;/code&gt; is upper triangular.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    n       faer  faer(par)    ndarray   nalgebra      eigen&#xA;   32     17.1µs     29.5µs          -     17.9µs      9.6µs&#xA;   64     68.4µs     91.2µs          -      128µs     37.6µs&#xA;   96    163.6µs    187.4µs          -    422.2µs     98.3µs&#xA;  128    319.2µs    372.5µs          -    991.2µs    218.3µs&#xA;  192    841.8µs    894.6µs          -      3.3ms      633µs&#xA;  256      1.8ms      1.7ms          -      7.7ms      1.5ms&#xA;  384      5.7ms      3.9ms          -     25.6ms      5.9ms&#xA;  512     13.3ms      7.4ms          -     60.5ms     16.2ms&#xA;  640     24.8ms     11.3ms          -    117.3ms     28.9ms&#xA;  768       42ms       16ms          -    201.8ms       50ms&#xA;  896     66.4ms     21.5ms          -    323.8ms     78.2ms&#xA; 1024     98.1ms     38.9ms          -    499.7ms    123.2ms&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Matrix inverse&lt;/h2&gt; &#xA;&lt;p&gt;Computing the inverse of a square matrix with dimension &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    n       faer  faer(par)    ndarray   nalgebra      eigen&#xA;   32     18.1µs     34.2µs     10.7µs     21.1µs     10.7µs&#xA;   64     58.2µs     75.9µs     37.9µs     99.1µs       46µs&#xA;   96    142.4µs    134.6µs      205µs    285.3µs    118.8µs&#xA;  128    219.5µs    190.7µs    355.3µs    657.8µs    344.9µs&#xA;  192    592.3µs      458µs    658.1µs      2.2ms    966.3µs&#xA;  256      1.1ms    740.5µs      1.1ms      5.6ms        2ms&#xA;  384      3.1ms      1.6ms      2.4ms     18.8ms        5ms&#xA;  512      6.5ms      2.9ms      4.5ms     44.7ms     11.9ms&#xA;  640       12ms      4.9ms      7.3ms     84.9ms     19.3ms&#xA;  768     19.9ms      7.7ms     11.3ms    145.2ms     31.3ms&#xA;  896     30.3ms     12.2ms     16.7ms      228ms     44.1ms&#xA; 1024     44.6ms     19.2ms       24ms      356ms     68.8ms&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Square matrix singular value decomposition&lt;/h2&gt; &#xA;&lt;p&gt;Computing the SVD of a square matrix with dimension &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    n       faer  faer(par)    ndarray   nalgebra      eigen&#xA;   32    117.7µs    141.8µs     90.3µs    109.8µs    222.7µs&#xA;   64    412.1µs    391.4µs    683.9µs    547.3µs      1.1ms&#xA;   96    923.2µs    920.9µs      1.7ms      1.7ms      2.6ms&#xA;  128      1.7ms      1.6ms      2.9ms      4.7ms      4.6ms&#xA;  192        4ms        4ms      6.7ms     14.9ms      9.9ms&#xA;  256      7.8ms        7ms     11.7ms     46.5ms     17.7ms&#xA;  384     20.8ms       15ms     25.9ms    123.7ms     43.7ms&#xA;  512     45.5ms     27.7ms     51.7ms    466.2ms     84.2ms&#xA;  640     80.3ms     44.2ms     79.3ms    662.8ms      135ms&#xA;  768      131ms     76.1ms    123.4ms      1.48s    209.6ms&#xA;  896    197.6ms    109.9ms    172.4ms      2.13s    293.2ms&#xA; 1024    296.3ms      153ms    254.7ms      4.02s      438ms&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Thin matrix singular value decomposition&lt;/h2&gt; &#xA;&lt;p&gt;Computing the SVD of a rectangular matrix with shape &lt;code&gt;(4096, n)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    n       faer  faer(par)    ndarray   nalgebra      eigen&#xA;   32      1.2ms      1.3ms      5.4ms      5.4ms      3.1ms&#xA;   64      3.4ms      3.3ms     15.6ms       20ms      8.3ms&#xA;   96      6.9ms      5.6ms     30.5ms     45.2ms     17.7ms&#xA;  128     11.4ms      8.5ms       48ms     80.4ms     32.4ms&#xA;  192     23.8ms     16.3ms     63.4ms    185.7ms     55.1ms&#xA;  256     41.2ms     25.7ms     83.6ms    357.3ms     91.1ms&#xA;  384     90.7ms     48.8ms      134ms    911.4ms    204.9ms&#xA;  512    164.8ms     80.3ms    303.4ms      2.02s    384.1ms&#xA;  640    259.1ms    119.7ms      291ms      3.23s    626.8ms&#xA;  768    381.5ms    186.1ms    440.1ms      5.17s    922.5ms&#xA;  896    531.1ms    253.3ms    550.9ms      7.27s      1.29s&#xA; 1024    721.6ms      328ms    850.8ms     10.63s      1.71s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Hermitian matrix eigenvalue decomposition&lt;/h2&gt; &#xA;&lt;p&gt;Computing the EVD of a hermitian matrix with shape &lt;code&gt;(n, n)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    n       faer  faer(par)    ndarray   nalgebra      eigen&#xA;   32     65.3µs     56.7µs    121.5µs     49.9µs     51.1µs&#xA;   64    235.5µs      221µs    611.2µs    295.5µs    208.4µs&#xA;   96    560.8µs    531.9µs      2.6ms    882.9µs    521.2µs&#xA;  128    953.2µs    875.3µs      5.2ms      1.9ms      1.1ms&#xA;  192      2.3ms      2.1ms     15.4ms      5.8ms      3.1ms&#xA;  256      4.1ms      3.6ms     33.9ms     13.5ms      6.8ms&#xA;  384     10.5ms      8.9ms      106ms     43.2ms     21.9ms&#xA;  512     21.5ms     16.3ms    179.5ms    101.5ms     54.4ms&#xA;  640     37.1ms     26.3ms    272.1ms    192.9ms    100.8ms&#xA;  768     59.6ms     38.5ms    405.7ms    328.6ms      171ms&#xA;  896     89.2ms     52.6ms    597.7ms    512.2ms    265.7ms&#xA; 1024    130.4ms     71.9ms    901.7ms    777.8ms      406ms&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Non Hermitian matrix eigenvalue decomposition&lt;/h2&gt; &#xA;&lt;p&gt;Computing the EVD of a matrix with shape &lt;code&gt;(n, n)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    n       faer  faer(par)    ndarray   nalgebra      eigen&#xA;   32    207.4µs    208.6µs    173.4µs          -    224.7µs&#xA;   64        1ms      1.2ms    993.5µs          -      1.1ms&#xA;   96      2.7ms      3.1ms      5.7ms          -      3.2ms&#xA;  128      5.1ms      5.2ms     11.4ms          -      9.3ms&#xA;  192     13.2ms     16.5ms     22.7ms          -     27.2ms&#xA;  256     23.6ms       26ms     49.6ms          -     88.4ms&#xA;  384     57.2ms     62.9ms    103.7ms          -    241.6ms&#xA;  512    128.7ms      133ms    294.8ms          -      906ms&#xA;  640      215ms    201.5ms    418.8ms          -      1.18s&#xA;  768    327.1ms    294.8ms    565.5ms          -      2.89s&#xA;  896    448.8ms    381.8ms    693.6ms          -      3.63s&#xA; 1024    723.6ms    585.2ms    935.1ms          -      7.01s&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>