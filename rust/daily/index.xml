<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-16T01:32:49Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>false-spring/gbfr-logs</title>
    <updated>2024-03-16T01:32:49Z</updated>
    <id>tag:github.com,2024-03-16:/false-spring/gbfr-logs</id>
    <link href="https://github.com/false-spring/gbfr-logs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Overlay DPS Meter for Granblue Fantasy: Relink&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gbfr-logs&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/false-spring/gbfr-logs/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/false-spring/gbfr-logs&#34; alt=&#34;GitHub Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/false-spring/gbfr-logs/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/false-spring/gbfr-logs/total&#34; alt=&#34;GitHub Downloads&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/discord/1203608338344976434?style=flat&amp;amp;label=discord&amp;amp;color=7289da&amp;amp;link=https%3A%2F%2Fdiscord.gg%2FgbsG4CDsru&#34; alt=&#34;Discord&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/false.spring&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/default-orange.png&#34; alt=&#34;Buy Me A Coffee&#34; height=&#34;41&#34; width=&#34;174&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Experimental overlay DPS meter for Granblue Fantasy: Relink, based on the reverse engineering work from &lt;a href=&#34;https://github.com/nyaoouo/GBFR-ACT&#34;&gt;naoouo/GBFR-ACT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;h3&gt;DPS Overlay&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/false-spring/gbfr-logs/main/docs/screenshots/meter.png&#34; alt=&#34;Meter&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Skill Tracking&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/false-spring/gbfr-logs/main/docs/screenshots/skill-tracking.png&#34; alt=&#34;Meter&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Historical Logs&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/false-spring/gbfr-logs/main/docs/screenshots/log-history.png&#34; alt=&#34;Logs&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;DPS Charts&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/false-spring/gbfr-logs/main/docs/screenshots/charting.png&#34; alt=&#34;Charts&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Sigil Tracking&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/false-spring/gbfr-logs/main/docs/screenshots/sigil-tracking.png&#34; alt=&#34;Sigil Tracking&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Multi-language Support&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/false-spring/gbfr-logs/main/docs/screenshots/simplified-chinese.png&#34; alt=&#34;Simplified Chinese&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to install&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://github.com/false-spring/gbfr-logs/releases&#34;&gt;Releases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Download the latest .msi installer and run it.&lt;/li&gt; &#xA; &lt;li&gt;Open GBFR Logs after the game is already running.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Q: The meter isn&#39;t updating or displaying anything.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Try running the program after the game has been launched. Be sure to run the program as admin.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Q: Is this safe? My antivirus is marking the installation as a virus / malware.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You can ignore these as false positives.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GBFR Logs does code injection into the running game process which can look like a virus-like program.&lt;/li&gt; &#xA; &lt;li&gt;GBFR Logs reads game memory and initializes code hooks in order to receive damage data.&lt;/li&gt; &#xA; &lt;li&gt;I recommend adding an exception / whitelisting for the installation folder for the best experience, but you may not need to do so if you haven&#39;t ran into this issue.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Windows Defender: &lt;a href=&#34;https://support.microsoft.com/en-us/windows/add-an-exclusion-to-windows-security-811816c0-4dfd-af4a-47e4-c301afe13b26&#34;&gt;https://support.microsoft.com/en-us/windows/add-an-exclusion-to-windows-security-811816c0-4dfd-af4a-47e4-c301afe13b26&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Q: How do I update?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Same as with installing, you can download the &lt;a href=&#34;https://github.com/false-spring/gbfr-logs/releases&#34;&gt;latest release&lt;/a&gt; and run the installer again and it will update over your old installation.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Q: How do I uninstall?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You can uninstall GBFR Logs the normal way through the Control Panel or by running the uninstall script in the folder where you installed it to. You may also want to remove these folders.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;%AppData%\gbfr-logs&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Q: My issue isn&#39;t listed here, or I have a suggestion.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Feel free to create a &lt;a href=&#34;https://github.com/false-spring/gbfr-logs/issues&#34;&gt;new GitHub issue&lt;/a&gt; or look for the GBFR Logs thread on &lt;a href=&#34;https://discord.gg/gbsG4CDsru&#34;&gt;Discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;For Developers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install nightly Rust (&lt;a href=&#34;https://rustup.rs/&#34;&gt;rustup.rs&lt;/a&gt;) + &lt;a href=&#34;https://nodejs.org/en/download&#34;&gt;Node.js&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Install NPM dependencies with &lt;code&gt;npm install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run tauri dev&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Under the hood&lt;/h2&gt; &#xA;&lt;p&gt;This project is split up into a few subprojects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;src-hook/&lt;/code&gt; - Library that is injected into the game that broadcasts essential damage events.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;src-tauri/&lt;/code&gt; - The Tauri Rust backend that communicates with the hooked process and does parsing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;protocol/&lt;/code&gt; - Defines the message protocol used by hook + back-end.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;src/&lt;/code&gt; - The JS front-end used by the Tauri web app&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;This project would not have been possible without the following folks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nyaoouo/GBFR-ACT&#34;&gt;nyaoouo/GBFR-ACT&lt;/a&gt; for the original reverse engineering work.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Harkains&#34;&gt;Harkain&lt;/a&gt; for their work on formatting and translating skills to friendly English names.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>pvolok/mprocs</title>
    <updated>2024-03-16T01:32:49Z</updated>
    <id>tag:github.com,2024-03-16:/pvolok/mprocs</id>
    <link href="https://github.com/pvolok/mprocs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Run multiple commands in parallel&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mprocs&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;mprocs&lt;/em&gt; runs multiple commands in parallel and shows output of each command separately.&lt;/p&gt; &#xA;&lt;p&gt;When you work on a project you very often need the same list of commands to be running. For example: &lt;code&gt;webpack serve&lt;/code&gt;, &lt;code&gt;jest --watch&lt;/code&gt;, &lt;code&gt;node src/server.js&lt;/code&gt;. With mprocs you can list these command in &lt;code&gt;mprocs.yaml&lt;/code&gt; and run all of them by running &lt;code&gt;mprocs&lt;/code&gt;. Then you can switch between outputs of running commands and interact with them.&lt;/p&gt; &#xA;&lt;p&gt;It is similar to &lt;a href=&#34;https://github.com/open-cli-tools/concurrently&#34;&gt;concurrently&lt;/a&gt; but &lt;em&gt;mprocs&lt;/em&gt; shows output of each command separately and allows to interact with processes (you can even work in &lt;em&gt;vim&lt;/em&gt; inside &lt;em&gt;mprocs&lt;/em&gt;).&lt;/p&gt; &#xA;&lt;!--ts--&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pvolok/mprocs/master/#screenshots&#34;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pvolok/mprocs/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pvolok/mprocs/master/#download-binary-linux-macos-windows&#34;&gt;Download binary (Linux, Macos, Windows)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pvolok/mprocs/master/#npm-linux-macos-windows&#34;&gt;npm (Linux, Macos, Windows)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pvolok/mprocs/master/#homebrew-macos&#34;&gt;homebrew (Macos)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pvolok/mprocs/master/#cargo-all-platforms&#34;&gt;cargo (All platforms)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pvolok/mprocs/master/#scoop-windows&#34;&gt;scoop (Windows)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pvolok/mprocs/master/#aur-arch-linux&#34;&gt;AUR (Arch Linux)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pvolok/mprocs/master/#mpr-debianubuntu&#34;&gt;MPR (Debian/Ubuntu)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pvolok/mprocs/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pvolok/mprocs/master/#config&#34;&gt;Config&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pvolok/mprocs/master/#keymap&#34;&gt;Keymap&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pvolok/mprocs/master/#select-operator&#34;&gt;$select operator&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pvolok/mprocs/master/#running-scripts-from-packagejson&#34;&gt;Running scripts from package.json&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pvolok/mprocs/master/#default-keymap&#34;&gt;Default keymap&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pvolok/mprocs/master/#remote-control&#34;&gt;Remote control&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pvolok/mprocs/master/#faq&#34;&gt;FAQ&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pvolok/mprocs/master/#mprocs-vs-tmuxscreen&#34;&gt;mprocs vs tmux/screen&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- Created by https://github.com/ekalinin/github-markdown-toc --&gt; &#xA;&lt;!-- Added by: pvolok, at: Sun Jul  3 22:53:57 +07 2022 --&gt; &#xA;&lt;!--te--&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/pvolok/mprocs/master/img/screenshot1.png&#34; width=&#34;900&#34; height=&#34;645&#34;&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/pvolok/mprocs/master/img/screenshot2.png&#34; width=&#34;900&#34; height=&#34;645&#34;&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/mprocs/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/vertical-allrepos/mprocs.svg?sanitize=true&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Download binary (Linux, Macos, Windows)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pvolok/mprocs/releases&#34;&gt;Download&lt;/a&gt; executable for your platform and put it into a directory included in PATH.&lt;/p&gt; &#xA;&lt;h3&gt;npm (Linux, Macos, Windows)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install -g mprocs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yarn global add mprocs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;homebrew (Macos, Linux)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install mprocs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;cargo (All platforms)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo install mprocs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;scoop (Windows)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;scoop install mprocs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;AUR (Arch Linux)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yay mprocs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yay mprocs-bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;MPR (Debian/Ubuntu)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone &#39;https://mpr.makedeb.org/mprocs&#39;&#xA;cd mprocs/&#xA;makedeb -si&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run &lt;code&gt;mprocs cmd1 cmd2 …&lt;/code&gt; (example: &lt;code&gt;mprocs &#34;yarn test -w&#34; &#34;webpack serve&#34;&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;OR&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create &lt;code&gt;mprocs.yaml&lt;/code&gt; file&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;mprocs&lt;/code&gt; command&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Example &lt;code&gt;mprocs.yaml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;procs:&#xA;  nvim:&#xA;    cmd: [&#34;nvim&#34;]&#xA;  server:&#xA;    shell: &#34;nodemon server.js&#34;&#xA;  webpack: &#34;webpack serve&#34;&#xA;  tests:&#xA;    shell: &#34;jest -w&#34;&#xA;    env:&#xA;      NODE_ENV: test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Config&lt;/h3&gt; &#xA;&lt;p&gt;There are two kinds of configs: global and local. &lt;em&gt;Global&lt;/em&gt; config is loaded from &lt;code&gt;~/.config/mprocs/mprocs.yaml&lt;/code&gt; (or &lt;code&gt;C:\Users\Alice\AppData\Roaming\mprocs\mprocs.yaml&lt;/code&gt; on Windows). &lt;em&gt;Local&lt;/em&gt; config is loaded from &lt;code&gt;mprocs.yaml&lt;/code&gt; from current directory (or set via cli argument: &lt;code&gt;mprocs --config ./cfg/mprocs.yaml&lt;/code&gt;). Settings in the &lt;em&gt;local&lt;/em&gt; config override settings the &lt;em&gt;global&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;procs&lt;/strong&gt;: &lt;em&gt;object&lt;/em&gt; - Processes to run. Only allowed in local config. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;shell&lt;/strong&gt;: &lt;em&gt;string&lt;/em&gt; - Shell command to run (exactly one of &lt;strong&gt;shell&lt;/strong&gt; or &lt;strong&gt;cmd&lt;/strong&gt; must be provided).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;cmd&lt;/strong&gt;: &lt;em&gt;array&#xA;     &lt;string&gt;&lt;/string&gt;&lt;/em&gt; - Array of command and args to run (exactly one of &lt;strong&gt;shell&lt;/strong&gt; or &lt;strong&gt;cmd&lt;/strong&gt; must be provided).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;cwd&lt;/strong&gt;: &lt;em&gt;string&lt;/em&gt; - Set working directory for the process. Prefix &lt;code&gt;&amp;lt;CONFIG_DIR&amp;gt;&lt;/code&gt; will be replaced with the path of the directory where the config is located.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;env&lt;/strong&gt;: &lt;em&gt;object&amp;lt;string, string|null&amp;gt;&lt;/em&gt; - Set env variables. Object keys are variable names. Assign variable to null, to clear variables inherited from parent process.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;add_path&lt;/strong&gt;: &lt;em&gt;string|array&#xA;     &lt;string&gt;&lt;/string&gt;&lt;/em&gt; - Add entries to the &lt;em&gt;PATH&lt;/em&gt; environment variable.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;autostart&lt;/strong&gt;: &lt;em&gt;bool&lt;/em&gt; - Start process when mprocs starts. Default: &lt;em&gt;true&lt;/em&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;stop&lt;/strong&gt;: &lt;em&gt;&#34;SIGINT&#34;|&#34;SIGTERM&#34;|&#34;SIGKILL&#34;|{send-keys: array&#xA;     &lt;key&gt;&#xA;      }|&#34;hard-kill&#34;&#xA;     &lt;/key&gt;&lt;/em&gt; - A way to stop a process (using &lt;code&gt;x&lt;/code&gt; key or when quitting mprocs).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;hide_keymap_window&lt;/strong&gt;: &lt;em&gt;bool&lt;/em&gt; - Hide the pane at the bottom of the screen showing key bindings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;mouse_scroll_speed&lt;/strong&gt;: &lt;em&gt;integer&lt;/em&gt; - Number of lines to scrollper one mouse scroll.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;proc_list_width&lt;/strong&gt;: &lt;em&gt;integer&lt;/em&gt; - Process list window width.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;keymap_procs&lt;/strong&gt;: &lt;em&gt;object&lt;/em&gt; - Key bindings for process list. See &lt;a href=&#34;https://raw.githubusercontent.com/pvolok/mprocs/master/#keymap&#34;&gt;Keymap&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;keymap_term&lt;/strong&gt;: &lt;em&gt;object&lt;/em&gt; - Key bindings for terminal window. See &lt;a href=&#34;https://raw.githubusercontent.com/pvolok/mprocs/master/#keymap&#34;&gt;Keymap&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;keymap_copy&lt;/strong&gt;: &lt;em&gt;object&lt;/em&gt; - Key bindings for copy mode. See &lt;a href=&#34;https://raw.githubusercontent.com/pvolok/mprocs/master/#keymap&#34;&gt;Keymap&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Keymap&lt;/h4&gt; &#xA;&lt;p&gt;Default key bindings can be overridden in config using &lt;em&gt;keymap_procs&lt;/em&gt;, &lt;em&gt;keymap_term&lt;/em&gt;, or &lt;em&gt;keymap_copy&lt;/em&gt; fields. Available commands are documented in the &lt;a href=&#34;https://raw.githubusercontent.com/pvolok/mprocs/master/#remote-control&#34;&gt;Remote control&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;p&gt;There are three keymap levels:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Default keymaps&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;~/.config/mprocs/mprocs.yaml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;./mprocs.yaml&lt;/code&gt; (can be overridden by the &lt;em&gt;-c/--config&lt;/em&gt; cli arg)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Lower levers override bindings from previous levels. Key bindings from previous levels can be cleared by specifying &lt;code&gt;reset: true&lt;/code&gt; field at the same level as keys.&lt;/p&gt; &#xA;&lt;p&gt;Key bindings are defined between &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt;, e.g., &lt;code&gt;&amp;lt;Enter&amp;gt;&lt;/code&gt; (enter key), &lt;code&gt;&amp;lt;Down&amp;gt;&lt;/code&gt; (down arrow), &lt;code&gt;&amp;lt;Up&amp;gt;&lt;/code&gt; (up arrow), &lt;code&gt;&amp;lt;C-q&amp;gt;&lt;/code&gt; (CTRL + q).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;keymap_procs: # keymap when process list is focused&#xA;  &amp;lt;C-q&amp;gt;: { c: toggle-focus }&#xA;  &amp;lt;C-a&amp;gt;: null # unbind key&#xA;keymap_term: # keymap when terminal is focused&#xA;  reset: true&#xA;  &amp;lt;C-q&amp;gt;: { c: toggle-focus }&#xA;  &amp;lt;C-j&amp;gt;:&#xA;    c: batch&#xA;    cmds:&#xA;      - { c: focus-procs }&#xA;      - { c: next-proc }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;$select&lt;/code&gt; operator&lt;/h4&gt; &#xA;&lt;p&gt;You can define different values depending on the current operating system. Any value in config can be wrapped with a &lt;em&gt;$select&lt;/em&gt; operator. To provide different values based on current OS define an object with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;First field &lt;code&gt;$select: os&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fields defining values for different OSes: &lt;code&gt;macos: value&lt;/code&gt;. Possible values are listed here: &lt;a href=&#34;https://doc.rust-lang.org/std/env/consts/constant.OS.html&#34;&gt;https://doc.rust-lang.org/std/env/consts/constant.OS.html&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Field &lt;code&gt;$else: default value&lt;/code&gt; will be matched if no value was defined for current OS. If current OS is not matched and field &lt;code&gt;$else&lt;/code&gt; is missing, then mprocs will fail to load config.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example &lt;code&gt;mprocs.yaml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;procs:&#xA;  my process:&#xA;    shell:&#xA;      $select: os&#xA;      windows: &#34;echo %TEXT%&#34;&#xA;      $else: &#34;echo $TEXT&#34;&#xA;    env:&#xA;      TEXT:&#xA;        $select: os&#xA;        windows: Windows&#xA;        linux: Linux&#xA;        macos: Macos&#xA;        freebsd: FreeBSD&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Running scripts from package.json&lt;/h4&gt; &#xA;&lt;p&gt;If you run &lt;em&gt;mprocs&lt;/em&gt; with an &lt;code&gt;--npm&lt;/code&gt; argument, it will load scripts from &lt;code&gt;package.json&lt;/code&gt;. But the scripts are not run by default, and you can launch desired scripts manually.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Run mprocs with scripts from package.json&#xA;mprocs --npm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Default keymap&lt;/h3&gt; &#xA;&lt;p&gt;Process list focused:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;q&lt;/code&gt; - Quit (soft kill processes and wait then to exit)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Q&lt;/code&gt; - Force quit (terminate processes)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-a&lt;/code&gt; - Focus output pane&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;x&lt;/code&gt; - Soft kill selected process (send SIGTERM signal, hard kill on Windows)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;X&lt;/code&gt; - Hard kill selected process (send SIGKILL)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;s&lt;/code&gt; - Start selected process, if it is not running&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;r&lt;/code&gt; - Soft kill selected process and restart it when it stops&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;R&lt;/code&gt; - Hard kill selected process and restart it when it stops&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;a&lt;/code&gt; - Add new process&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;d&lt;/code&gt; - Remove selected process (process must be stopped first)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;e&lt;/code&gt; - Rename selected process&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;k&lt;/code&gt; or &lt;code&gt;↑&lt;/code&gt; - Select previous process&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;j&lt;/code&gt; or &lt;code&gt;↓&lt;/code&gt; - Select next process&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-1&lt;/code&gt; - &lt;code&gt;M-8&lt;/code&gt; - Select process 1-8&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-d&lt;/code&gt; or &lt;code&gt;page down&lt;/code&gt; - Scroll output down&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-u&lt;/code&gt; or &lt;code&gt;page up&lt;/code&gt; - Scroll output up&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-e&lt;/code&gt; - Scroll output down by 3 lines&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-y&lt;/code&gt; - Scroll output up by 3 lines&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;z&lt;/code&gt; - Zoom into terminal window&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v&lt;/code&gt; - Enter copy mode&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Process output focused:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;C-a&lt;/code&gt; - Focus processes pane&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Copy mode:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;v&lt;/code&gt; - Start selecting end point&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;c&lt;/code&gt; - Copy selected text&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Esc&lt;/code&gt; - Leave copy mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-a&lt;/code&gt; - Focus processes pane&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-d&lt;/code&gt; or &lt;code&gt;page down&lt;/code&gt; - Scroll output down&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-u&lt;/code&gt; or &lt;code&gt;page up&lt;/code&gt; - Scroll output up&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-e&lt;/code&gt; - Scroll output down by 3 lines&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-y&lt;/code&gt; - Scroll output up by 3 lines&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;h&lt;/code&gt; or &lt;code&gt;↑&lt;/code&gt; - Move cursor up&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;l&lt;/code&gt; or &lt;code&gt;→&lt;/code&gt; - Move cursor right&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;j&lt;/code&gt; or &lt;code&gt;↓&lt;/code&gt; - Move cursor down&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;h&lt;/code&gt; or &lt;code&gt;←&lt;/code&gt; - Move cursor left&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Remote control&lt;/h3&gt; &#xA;&lt;p&gt;Optionally, &lt;em&gt;mprocs&lt;/em&gt; can listen on TCP port for remote commands. You have to define remote control server address in &lt;code&gt;mprocs.yaml&lt;/code&gt; (&lt;code&gt;server: 127.0.0.1:4050&lt;/code&gt;) or via cli argument (&lt;code&gt;mprocs --server 127.0.0.1:4050&lt;/code&gt;). To send a command to running &lt;em&gt;mprocs&lt;/em&gt; instance use the &lt;strong&gt;ctl&lt;/strong&gt; argument: &lt;code&gt;mprocs --ctl &#39;{c: quit}&#39;&lt;/code&gt; or &lt;code&gt;mprocs --ctl &#39;{c: send-key, key: &amp;lt;C-c&amp;gt;}&#39;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Commands are encoded as yaml. Available commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;{c: quit-or-ask}&lt;/code&gt; - Stop processes and quit. If any processes are running, show a confirmation dialog.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{c: quit}&lt;/code&gt; - Stop processes and quit. Does not show confirm dialog.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{c: force-quit}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{c: toggle-focus}&lt;/code&gt; - Toggle focus between process list and terminal.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{c: focus-procs}&lt;/code&gt; - Focus process list&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{c: focus-term}&lt;/code&gt; - Focus process terminal window&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{c: zoom}&lt;/code&gt; - Zoom into terminal window&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{c: next-proc}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{c: prev-proc}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{c: select-proc, index: &amp;lt;PROCESS INDEX&amp;gt;}&lt;/code&gt; - Select process by index, top process has index 0&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{c: start-proc}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{c: term-proc}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{c: kill-proc}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{c: restart-proc}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{c: force-restart-proc}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{c: show-add-proc}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{c: add-proc, cmd: &#34;&amp;lt;SHELL COMMAND&amp;gt;&#34;}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{c: show-remove-proc}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{c: remove-proc, id: &#34;&amp;lt;PROCESS ID&amp;gt;&#34;}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{c: show-rename-proc}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{c: rename-proc, name: &#34;&amp;lt;NEW_NAME&amp;gt;&#34;}&lt;/code&gt; - Rename currently selected process&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{c: scroll-down}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{c: scroll-up}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{c: scroll-down-lines, n: &amp;lt;COUNT&amp;gt;}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{c: scroll-up-lines, n: &amp;lt;COUNT&amp;gt;}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{c: copy-mode-enter}&lt;/code&gt; - Enter copy mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{c: copy-mode-leave}&lt;/code&gt; - Leave copy mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{c: copy-mode-move, dir: &amp;lt;DIRECTION&amp;gt; }&lt;/code&gt; - Move starting or ending position of the selection. Available directions: &lt;code&gt;up/right/down/left&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{c: copy-mode-end}&lt;/code&gt; - Start selecting end point of the selection.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{c: copy-mode-copy}&lt;/code&gt; - Copy selected text to the clipboard and leave copy mode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{c: send-key, key: &#34;&amp;lt;KEY&amp;gt;&#34;}&lt;/code&gt; - Send key to current process. Key examples: &lt;code&gt;&amp;lt;C-a&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;Enter&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{c: batch, cmds: [{c: focus-procs}, …]}&lt;/code&gt; - Send multiple commands&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;mprocs vs tmux/screen&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;mprocs&lt;/em&gt; is meant to make it easier to run specific commands that you end up running repeatedly, such as compilers and test runners. This is in contrast with &lt;em&gt;tmux&lt;/em&gt;, which is usually used to run much more long-lived processes - usually a shell - in each window/pane. Another difference is that &lt;em&gt;tmux&lt;/em&gt; runs a server and a client, which allows the client to detach and reattach later, keeping the processes running. &lt;em&gt;mprocs&lt;/em&gt; is meant more for finite lifetime processes that you keep re-running, but when &lt;em&gt;mprocs&lt;/em&gt; ends, so do the processes it is running within its windows.&lt;/p&gt; &#xA;&lt;h3&gt;Copying doesn&#39;t work in tmux&lt;/h3&gt; &#xA;&lt;p&gt;Tmux doesn&#39;t have escape sequences for copying enabled by default. To enable it add the following to &lt;code&gt;~/.tmux.conf&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;set -g set-clipboard on&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>veryl-lang/veryl</title>
    <updated>2024-03-16T01:32:49Z</updated>
    <id>tag:github.com,2024-03-16:/veryl-lang/veryl</id>
    <link href="https://github.com/veryl-lang/veryl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Veryl: A Modern Hardware Description Language&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://veryl-lang.org&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/veryl-lang/veryl/master/support/logo/veryl_wide.png&#34; alt=&#34;Veryl&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/veryl-lang/veryl/actions&#34;&gt;&lt;img src=&#34;https://github.com/veryl-lang/veryl/workflows/Regression/badge.svg?sanitize=true&#34; alt=&#34;Actions Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/veryl&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/veryl.svg?sanitize=true&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/veryl-lang/veryl/raw/master/CHANGELOG.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/changelog-v0.8.1-green.svg?sanitize=true&#34; alt=&#34;Changelog&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Veryl is a modern hardware description language.&lt;/p&gt; &#xA;&lt;p&gt;This project is under the exploration phase of language design. If you have any idea, please open &lt;a href=&#34;https://github.com/veryl-lang/veryl/issues&#34;&gt;Issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://doc.veryl-lang.org/book&#34;&gt;Document&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://doc.veryl-lang.org/book/ja&#34;&gt;日本語&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://doc.veryl-lang.org/playground&#34;&gt;PlayGround&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation quick links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/veryl-lang/veryl/master/#concepts&#34;&gt;Concepts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/veryl-lang/veryl/master/#example&#34;&gt;Example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/veryl-lang/veryl/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/veryl-lang/veryl/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/veryl-lang/veryl/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/veryl-lang/veryl/master/#contribution&#34;&gt;Contribution&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Concepts&lt;/h2&gt; &#xA;&lt;p&gt;Veryl is designed as a &#34;SystemVerilog Alternative&#34;. There are some design concepts.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simplified syntax &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Based on SystemVerilog / Rust&lt;/li&gt; &#xA;   &lt;li&gt;Removed traditional Verilog syntax&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Transpiler to SystemVerilog &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Human readable SystemVerilog code generation&lt;/li&gt; &#xA;   &lt;li&gt;Interoperability with SystemVerilog&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Integrated tools &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Formatter / Linter&lt;/li&gt; &#xA;   &lt;li&gt;VSCode, vim/neovim integration&lt;/li&gt; &#xA;   &lt;li&gt;Package management based on git&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;// module definition&#xA;module ModuleA #(&#xA;    parameter  ParamA: u32 = 10,&#xA;    localparam ParamB: u32 = 10, // trailing comma is allowed&#xA;) (&#xA;    i_clk : input  logic,&#xA;    i_rst : input  logic,&#xA;    i_sel : input  logic,&#xA;    i_data: input  logic&amp;lt;ParamA&amp;gt; [2], // `[]` means unpacked array in SystemVerilog&#xA;    o_data: output logic&amp;lt;ParamA&amp;gt;    , // `&amp;lt;&amp;gt;` means packed array in SystemVerilog&#xA;) {&#xA;    // localparam declaration&#xA;    //   `parameter` is not allowed in module&#xA;    localparam ParamC: u32 = 10;&#xA;&#xA;    // variable declaration&#xA;    var r_data0: logic&amp;lt;ParamA&amp;gt;;&#xA;    var r_data1: logic&amp;lt;ParamA&amp;gt;;&#xA;&#xA;    // always_ff statement with reset&#xA;    //   `always_ff` can take a mandatory clock and a optional reset&#xA;    //   `if_reset` means `if (i_rst)`. This conceals reset porality&#xA;    //   `()` of `if` is not required&#xA;    //   `=` in `always_ff` is non-blocking assignment&#xA;    always_ff (i_clk, i_rst) {&#xA;        if_reset {&#xA;            r_data0 = 0;&#xA;        } else if i_sel {&#xA;            r_data0 = i_data[0];&#xA;        } else {&#xA;            r_data0 = i_data[1];&#xA;        }&#xA;    }&#xA;&#xA;    // always_ff statement without reset&#xA;    always_ff (i_clk) {&#xA;        r_data1 = r_data0;&#xA;    }&#xA;&#xA;    assign o_data = r_data1;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://doc.veryl-lang.org/book/02_getting_started/01_installation.html&#34;&gt;Document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;// Create a new project&#xA;veryl new [project name]&#xA;&#xA;// Create a new project in an existing directory&#xA;veryl init [path]&#xA;&#xA;// Format the current project&#xA;veryl fmt&#xA;&#xA;// Analyze the current project&#xA;veryl check&#xA;&#xA;// Build target codes corresponding to the current project&#xA;veryl build&#xA;&#xA;// Build the document corresponding to the current project&#xA;veryl doc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For detailed information, see &lt;a href=&#34;https://doc.veryl-lang.org/book&#34;&gt;Document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under either of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apache License, Version 2.0, (&lt;a href=&#34;https://raw.githubusercontent.com/veryl-lang/veryl/master/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;MIT license (&lt;a href=&#34;https://raw.githubusercontent.com/veryl-lang/veryl/master/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;at your option.&lt;/p&gt; &#xA;&lt;h3&gt;Contribution&lt;/h3&gt; &#xA;&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.&lt;/p&gt;</summary>
  </entry>
</feed>