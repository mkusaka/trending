<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-05T01:41:28Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>paritytech/cumulus</title>
    <updated>2023-08-05T01:41:28Z</updated>
    <id>tag:github.com,2023-08-05:/paritytech/cumulus</id>
    <link href="https://github.com/paritytech/cumulus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Write Parachains on Substrate&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cumulus ☁️&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://paritytech.github.io/cumulus/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/cumulus%20docs-master-brightgreen&#34; alt=&#34;Doc&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository contains both the Cumulus SDK and also specific chains implemented on top of this SDK.&lt;/p&gt; &#xA;&lt;p&gt;If you only want to run a &lt;strong&gt;Polkadot Parachain Node&lt;/strong&gt;, check out our &lt;a href=&#34;https://raw.githubusercontent.com/paritytech/cumulus/master/docs/container.md&#34;&gt;container section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Cumulus SDK&lt;/h2&gt; &#xA;&lt;p&gt;A set of tools for writing &lt;a href=&#34;https://substrate.io/&#34;&gt;Substrate&lt;/a&gt;-based &lt;a href=&#34;https://wiki.polkadot.network/en/&#34;&gt;Polkadot&lt;/a&gt; &lt;a href=&#34;https://wiki.polkadot.network/docs/en/learn-parachains&#34;&gt;parachains&lt;/a&gt;. Refer to the included &lt;a href=&#34;https://raw.githubusercontent.com/paritytech/cumulus/master/docs/overview.md&#34;&gt;overview&lt;/a&gt; for architectural details, and the &lt;a href=&#34;https://docs.substrate.io/reference/how-to-guides/parachains/connect-to-a-relay-chain/&#34;&gt;Connect to a relay chain how-to guide&lt;/a&gt; for a guided walk-through of using these tools.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s easy to write blockchains using Substrate, and the overhead of writing parachains&#39; distribution, p2p, database, and synchronization layers should be just as low. This project aims to make it easy to write parachains for Polkadot by leveraging the power of Substrate.&lt;/p&gt; &#xA;&lt;p&gt;Cumulus clouds are shaped sort of like dots; together they form a system that is intricate, beautiful and functional.&lt;/p&gt; &#xA;&lt;h3&gt;Consensus&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/paritytech/cumulus/raw/master/client/consensus/common/src/parachain_consensus.rs&#34;&gt;&lt;code&gt;parachain-consensus&lt;/code&gt;&lt;/a&gt; is a &lt;a href=&#34;https://docs.substrate.io/v3/advanced/consensus&#34;&gt;consensus engine&lt;/a&gt; for Substrate that follows a Polkadot &lt;a href=&#34;https://wiki.polkadot.network/docs/en/learn-architecture#relay-chain&#34;&gt;relay chain&lt;/a&gt;. This will run a Polkadot node internally, and dictate to the client and synchronization algorithms which chain to follow, &lt;a href=&#34;https://wiki.polkadot.network/docs/en/learn-consensus#probabilistic-vs-provable-finality&#34;&gt;finalize&lt;/a&gt;, and treat as best.&lt;/p&gt; &#xA;&lt;h3&gt;Collator&lt;/h3&gt; &#xA;&lt;p&gt;A Polkadot &lt;a href=&#34;https://wiki.polkadot.network/docs/en/learn-collator&#34;&gt;collator&lt;/a&gt; for the parachain is implemented by the &lt;code&gt;polkadot-parachain&lt;/code&gt; binary (previously called &lt;code&gt;polkadot-collator&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;You may run &lt;code&gt;polkadot-parachain&lt;/code&gt; locally after building it or using one of the container option described &lt;a href=&#34;https://raw.githubusercontent.com/paritytech/cumulus/master/docs/container.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Relay Chain Interaction&lt;/h3&gt; &#xA;&lt;p&gt;To operate a parachain node, a connection to the corresponding relay chain is necessary. This can be achieved in one of two ways:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run a full relay chain node within the parachain node (default)&lt;/li&gt; &#xA; &lt;li&gt;Connect to an external relay chain node via WebSocket RPC&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;In-process Relay Chain Node&lt;/h4&gt; &#xA;&lt;p&gt;If an external relay chain node is not specified (default behavior), then a full relay chain node is spawned within the same process.&lt;/p&gt; &#xA;&lt;p&gt;This node has all of the typical components of a regular Polkadot node and will have to fully sync with the relay chain to work.&lt;/p&gt; &#xA;&lt;h5&gt;Example command&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell=&#34;&gt;polkadot-parachain \&#xA;&#x9;--chain parachain-chainspec.json \&#xA;&#x9;--tmp \&#xA;&#x9;-- \&#xA;&#x9;--chain relaychain-chainspec.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;External Relay Chain Node&lt;/h4&gt; &#xA;&lt;p&gt;An external relay chain node is connected via WebsSocket RPC by using the &lt;code&gt;--relay-chain-rpc-urls&lt;/code&gt; command line argument. This option accepts one or more space-separated WebSocket URLs to a full relay chain node. By default, only the first URL will be used, with the rest as a backup in case the connection to the first node is lost.&lt;/p&gt; &#xA;&lt;p&gt;Parachain nodes using this feature won&#39;t have to fully sync with the relay chain to work, so in general they will use fewer system resources.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; At this time, any parachain nodes using this feature will still spawn a significantly cut-down relay chain node in-process. Even though they lack the majority of normal Polkadot subsystems, they will still need to connect directly to the relay chain network.&lt;/p&gt; &#xA;&lt;h5&gt;Example command&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell=&#34;&gt;polkadot-parachain \&#xA;&#x9;--chain parachain-chainspec.json \&#xA;&#x9;--tmp \&#xA;&#x9;--relay-chain-rpc-urls \&#xA;&#x9;&#x9;&#34;ws://relaychain-rpc-endpoint:9944&#34; \&#xA;&#x9;&#x9;&#34;ws://relaychain-rpc-endpoint-backup:9944&#34; \&#xA;&#x9;-- \&#xA;&#x9;--chain relaychain-chainspec.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation and Setup&lt;/h2&gt; &#xA;&lt;p&gt;Before building Cumulus SDK based nodes / runtimes prepare your environment by following Substrate &lt;a href=&#34;https://docs.substrate.io/main-docs/install/&#34;&gt;installation instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To launch a local network, you can use &lt;a href=&#34;https://github.com/paritytech/zombienet&#34;&gt;zombienet&lt;/a&gt; for quick setup and experimentation or follow the &lt;a href=&#34;https://raw.githubusercontent.com/paritytech/cumulus/master/#manual-setup&#34;&gt;manual setup&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Zombienet&lt;/h3&gt; &#xA;&lt;p&gt;We use Zombienet to spin up networks for integration tests and local networks. Follow &lt;a href=&#34;https://github.com/paritytech/zombienet#requirements-by-provider&#34;&gt;these installation steps&lt;/a&gt; to set it up on your machine. A simple network specification with two relay chain nodes and one collator is located at &lt;a href=&#34;https://raw.githubusercontent.com/paritytech/cumulus/master/zombienet/examples/small_network.toml&#34;&gt;zombienet/examples/small_network.toml&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Which provider should I use?&lt;/h4&gt; &#xA;&lt;p&gt;Zombienet offers multiple providers to run networks. Choose the one that best fits your needs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Podman:&lt;/strong&gt; Choose this if you want to spin up a network quick and easy.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Native:&lt;/strong&gt; Choose this if you want to develop and deploy your changes. Requires compilation of the binaries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Kubernetes:&lt;/strong&gt; Choose this for advanced use-cases or running on cloud-infrastructure.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;How to run&lt;/h4&gt; &#xA;&lt;p&gt;To run the example network, use the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Podman provider&#xA;zombienet --provider podman spawn ./zombienet/examples/small_network.toml&#xA;&#xA;# Native provider, assumes polkadot and polkadot-parachains binary in $PATH&#xA;zombienet --provider native spawn ./zombienet/examples/small_network.toml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manual Setup&lt;/h3&gt; &#xA;&lt;h4&gt;Launch the Relay Chain&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Clone&#xA;git clone https://github.com/paritytech/polkadot&#xA;cd polkadot&#xA;&#xA;# Compile Polkadot with the real overseer feature&#xA;cargo build --release --bin polkadot&#xA;&#xA;# Generate a raw chain spec&#xA;./target/release/polkadot build-spec --chain rococo-local --disable-default-bootnode --raw &amp;gt; rococo-local-cfde.json&#xA;&#xA;# Alice&#xA;./target/release/polkadot --chain rococo-local-cfde.json --alice --tmp&#xA;&#xA;# Bob (In a separate terminal)&#xA;./target/release/polkadot --chain rococo-local-cfde.json --bob --tmp --port 30334&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Launch the Parachain&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Clone&#xA;git clone https://github.com/paritytech/cumulus&#xA;cd cumulus&#xA;&#xA;# Compile&#xA;cargo build --release --bin polkadot-parachain&#xA;&#xA;# Export genesis state&#xA;./target/release/polkadot-parachain export-genesis-state &amp;gt; genesis-state&#xA;&#xA;# Export genesis wasm&#xA;./target/release/polkadot-parachain export-genesis-wasm &amp;gt; genesis-wasm&#xA;&#xA;# Collator1&#xA;./target/release/polkadot-parachain --collator --alice --force-authoring --tmp --port 40335 --rpc-port 9946 -- --chain ../polkadot/rococo-local-cfde.json --port 30335&#xA;&#xA;# Collator2&#xA;./target/release/polkadot-parachain --collator --bob --force-authoring --tmp --port 40336 --rpc-port 9947 -- --chain ../polkadot/rococo-local-cfde.json --port 30336&#xA;&#xA;# Parachain Full Node 1&#xA;./target/release/polkadot-parachain --tmp --port 40337 --rpc-port 9948 -- --chain ../polkadot/rococo-local-cfde.json --port 30337&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Register the parachain&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2915325/99548884-1be13580-2987-11eb-9a8b-20be658d34f9.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Asset Hub 🪙&lt;/h2&gt; &#xA;&lt;p&gt;This repository also contains the Asset Hub runtimes. Asset Hub is a system parachain providing an asset store for the Polkadot ecosystem.&lt;/p&gt; &#xA;&lt;h3&gt;Build &amp;amp; Launch a Node&lt;/h3&gt; &#xA;&lt;p&gt;To run an Asset Hub node, you will need to compile the &lt;code&gt;polkadot-parachain&lt;/code&gt; binary:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo build --release --locked --bin polkadot-parachain&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the executable is built, launch the parachain node via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;CHAIN=asset-hub-westend # or asset-hub-kusama&#xA;./target/release/polkadot-parachain --chain $CHAIN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/paritytech/cumulus/master/#manual-setup&#34;&gt;setup instructions&lt;/a&gt; to run a local network for development.&lt;/p&gt; &#xA;&lt;h2&gt;Contracts 📝&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/paritytech/cumulus/master/parachains/runtimes/contracts/contracts-rococo/README.md&#34;&gt;the &lt;code&gt;contracts-rococo&lt;/code&gt; readme&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Bridge-hub 📝&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/paritytech/cumulus/master/parachains/runtimes/bridge-hubs/README.md&#34;&gt;the &lt;code&gt;bridge-hubs&lt;/code&gt; readme&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Rococo 👑&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://polkadot.js.org/apps/?rpc=wss://rococo-rpc.polkadot.io&#34;&gt;Rococo&lt;/a&gt; is becoming a &lt;a href=&#34;https://polkadot.network/blog/rococo-revamp-becoming-a-community-parachain-testbed/&#34;&gt;Community Parachain Testbed&lt;/a&gt; for parachain teams in the Polkadot ecosystem. It supports multiple parachains with the differentiation of long-term connections and recurring short-term connections, to see which parachains are currently connected and how long they will be connected for &lt;a href=&#34;https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Frococo-rpc.polkadot.io#/parachains&#34;&gt;see here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Rococo is an elaborate style of design and the name describes the painstaking effort that has gone into this project.&lt;/p&gt; &#xA;&lt;h3&gt;Build &amp;amp; Launch Rococo Collators&lt;/h3&gt; &#xA;&lt;p&gt;Collators are similar to validators in the relay chain. These nodes build the blocks that will eventually be included by the relay chain for a parachain.&lt;/p&gt; &#xA;&lt;p&gt;To run a Rococo collator you will need to compile the following binary:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo build --release --locked --bin polkadot-parachain&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the executable is built, launch collators for each parachain (repeat once each for chain &lt;code&gt;tick&lt;/code&gt;, &lt;code&gt;trick&lt;/code&gt;, &lt;code&gt;track&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./target/release/polkadot-parachain --chain $CHAIN --validator&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also build &lt;a href=&#34;https://raw.githubusercontent.com/paritytech/cumulus/master/docs/container.md&#34;&gt;using a container&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Parachains&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Frococo-statemint-rpc.polkadot.io#/explorer&#34;&gt;Asset Hub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Frococo-contracts-rpc.polkadot.io#/explorer&#34;&gt;Contracts on Rococo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Frococo.kilt.io#/explorer&#34;&gt;RILT&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The network uses horizontal message passing (HRMP) to enable communication between parachains and the relay chain and, in turn, between parachains. This means that every message is sent to the relay chain, and from the relay chain to its destination parachain.&lt;/p&gt;</summary>
  </entry>
</feed>