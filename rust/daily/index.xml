<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-10T01:37:15Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tari-project/tari</title>
    <updated>2025-05-10T01:37:15Z</updated>
    <id>tag:github.com,2025-05-10:/tari-project/tari</id>
    <link href="https://github.com/tari-project/tari" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Tari protocol&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://coveralls.io/github/tari-project/tari?branch=development&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/tari-project/tari/badge.svg?branch=development&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;The Tari protocol&lt;/h1&gt; &#xA;&lt;p&gt;A number of applications have been developed by the Tari community to implement the Tari protocol. These are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Minotari Base Node&lt;/li&gt; &#xA; &lt;li&gt;Minotari Wallet&lt;/li&gt; &#xA; &lt;li&gt;Minotari Miner&lt;/li&gt; &#xA; &lt;li&gt;Minotari Merge Mining Proxy&lt;/li&gt; &#xA; &lt;li&gt;Minotari Aurora wallets for Android and iOS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Only the first four applications will be discussed in this README (see &lt;a href=&#34;https://github.com/tari-project/wallet-android&#34;&gt;wallet-android&lt;/a&gt; and &lt;a href=&#34;https://github.com/tari-project/wallet-ios&#34;&gt;wallet-ios&lt;/a&gt; for mobile wallets&#39; repos).&lt;/p&gt; &#xA;&lt;h2&gt;Developers&lt;/h2&gt; &#xA;&lt;p&gt;Want to contribute? Start by reading the &lt;a href=&#34;https://raw.githubusercontent.com/tari-project/tari/development/Contributing.md&#34;&gt;Contributing Guide&lt;/a&gt; and the &lt;a href=&#34;https://raw.githubusercontent.com/tari-project/tari/development/docs/src/reviewing_guide.md&#34;&gt;Reviewing Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installing using binaries&lt;/h2&gt; &#xA;&lt;h3&gt;Versions&lt;/h3&gt; &#xA;&lt;p&gt;The recommended running versions of each network are:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Network&lt;/th&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mainnet&lt;/td&gt; &#xA;   &lt;td&gt;2.1.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nextnet&lt;/td&gt; &#xA;   &lt;td&gt;2.1.0-rc.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Esmeralda&lt;/td&gt; &#xA;   &lt;td&gt;2.1.0-pre.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For more detail about versioning, see &lt;a href=&#34;https://github.com/tari-project/tari/raw/development/docs/src/branching_releases.md&#34;&gt;Release Ideology&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Running test&lt;/h3&gt; &#xA;&lt;p&gt;Tests can be run by install Nextest with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo install cargo-nextest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run the tests with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo +nightly ci-test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Download&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://tari.com/downloads/&#34;&gt;Download binaries&lt;/a&gt; from &lt;a href=&#34;https://www.tari.com/&#34;&gt;tari.com&lt;/a&gt;. This is the easiest way to run a Tari node, but you&#39;re essentially trusting the person that built and uploaded them that nothing untoward has happened.&lt;/p&gt; &#xA;&lt;p&gt;Hashes of the binaries are available alongside the downloads. You can get the hash of your download by opening a terminal or command prompt and running the following:&lt;/p&gt; &#xA;&lt;p&gt;(*nix)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;shasum -a256 &amp;lt;PATH_TO_BINARY_INSTALL_FILE&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(Windows)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;certUtil -hashfile &amp;lt;PATH_TO_BINARY_INSTALL_FILE&amp;gt; SHA256&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the result doesn&#39;t match the published hash, don&#39;t run the binary. Note that this only checks that your binary was downloaded correctly; it cannot detect if the binary was replaced by a bad actor. If you need to ensure that your binary matches the source, see &lt;a href=&#34;https://raw.githubusercontent.com/tari-project/tari/development/#building-from-source&#34;&gt;Building from source&lt;/a&gt; below.&lt;/p&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;p&gt;After you have downloaded the binaries, you need to install them. This is easy to do, and works as follows:&lt;/p&gt; &#xA;&lt;h4&gt;On *Nix&lt;/h4&gt; &#xA;&lt;p&gt;Assuming you want to install the Tari applications into your home folder, run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ~&#xA;tar -xf &amp;lt;PATH_TO_BINARY_INSTALL_FILE&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After this, the Tari applications will be located in &lt;code&gt;~/tari_esmeralda_testnet&lt;/code&gt; with a selection of soft links to run them.&lt;/p&gt; &#xA;&lt;h4&gt;On Windows&lt;/h4&gt; &#xA;&lt;p&gt;Just double-click the installer and accept all the default prompts. The Tari applications will be located in the folder you selected during installation, and can be run by double-clicking the various shortcuts or via the Windows menu (&lt;code&gt;Tari Testnet&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Runtime links&lt;/h3&gt; &#xA;&lt;h4&gt;Use the one-click miner&lt;/h4&gt; &#xA;&lt;p&gt;Execute the &lt;code&gt;start_all&lt;/code&gt; soft link/shortcut; this will start everything you need depending on the choices you make when prompted:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tor services started by default&lt;/li&gt; &#xA; &lt;li&gt;Minotari Base Node, or&lt;/li&gt; &#xA; &lt;li&gt;Minotari Base Node &amp;amp; Minotari Wallet, or&lt;/li&gt; &#xA; &lt;li&gt;Minotari Base Node &amp;amp; Minotari Wallet &amp;amp; Minotari Miner, or&lt;/li&gt; &#xA; &lt;li&gt;Minotari Base Node &amp;amp; Minotari Wallet &amp;amp; Minotari Merge Mining Proxy &amp;amp; XMRig&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Start all applications individually&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Execute the &lt;code&gt;start_minotari_node&lt;/code&gt; soft link/shortcut; this will also start the Tor services if not running already that needs to be running before the base node can run (do not close the Tor console).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Execute the &lt;code&gt;start_minotari_console_wallet&lt;/code&gt; soft link/shortcut; this will also start the Tor services that needs to be running before the base node can run (do not close the Tor console).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The Tor console will output &lt;code&gt;[notice] Bootstrapped 100% (done): Done&lt;/code&gt; when the Tor services have fully started.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Depending on your choice of mining:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;SHA3 standalone mining &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Execute the &lt;code&gt;start_minotari_miner&lt;/code&gt; soft link/shortcut.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Merge mining with Monero &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Execute the &lt;code&gt;start_minotari_merge_mining_proxy&lt;/code&gt; soft link/shortcut.&lt;/li&gt; &#xA;     &lt;li&gt;Execute the &lt;code&gt;start_xmrig&lt;/code&gt; shortcut.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building from source&lt;/h2&gt; &#xA;&lt;p&gt;To build the Minotari codebase from source, there are a few dependencies you need to have installed.&lt;/p&gt; &#xA;&lt;h3&gt;Install development packages&lt;/h3&gt; &#xA;&lt;p&gt;First you&#39;ll need to make sure you have a full development environment set up:&lt;/p&gt; &#xA;&lt;h4&gt;(macOS)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew update&#xA;brew install coreutils tor openssl \&#xA;  cmake make libtool autoconf automake protobuf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;(Ubuntu 18.04, including WSL-2 on Windows)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get update&#xA;sudo apt-get -y install openssl libssl-dev pkg-config libsqlite3-dev clang git cmake libc++-dev libc++abi-dev libprotobuf-dev protobuf-compiler libncurses5-dev libncursesw5-dev&#xA;sudo apt-get install -y wget apt-transport-https&#xA;sudo wget -q &#34;https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb&#34;&#xA;sudo dpkg -i packages-microsoft-prod.deb&#xA;sudo apt-get update&#xA;sudo add-apt-repository universe&#xA;sudo apt-get install -y powershell&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;(Windows)&lt;/h4&gt; &#xA;&lt;p&gt;Please follow the instructions &lt;a href=&#34;https://github.com/tari-project/tari/raw/development/buildtools/windows-dev-environment-notes.md&#34;&gt;located here&lt;/a&gt; for instructions on setting up your build environment in Windows.&lt;/p&gt; &#xA;&lt;h3&gt;Build&lt;/h3&gt; &#xA;&lt;p&gt;Grab a cup of coffee and begin the Tari build.&lt;/p&gt; &#xA;&lt;p&gt;(*nix)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd tari&#xA;cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(Windows)&lt;/p&gt; &#xA;&lt;p&gt;This is similar to building in Ubuntu, except the Microsoft Visual Studio environment must be sourced. Open the appropriate &lt;em&gt;x64\x86 Native Tools Command Prompt for VS 2019&lt;/em&gt;, and in your main Tari directory perform the build, which will create the executable inside your &lt;code&gt;%USERPROFILE%\Code\tari\target\release&lt;/code&gt; directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd %USERPROFILE%\Code\tari&#xA;cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A successful build should output something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;   Compiling minotari_wallet v0.0.9 (.../tari/base_layer/wallet)&#xA;   Compiling minotari_wallet_ffi v0.0.9 (.../tari/base_layer/wallet_ffi)&#xA;   Compiling minotari_node v0.0.9 (.../tari/applications/minotari_node)&#xA;    Finished release [optimized] target(s) in 12m 24s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compiled executables can be found at these paths::&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./target/release/minotari_node&#xA;./target/release/minotari_console_wallet&#xA;./target/release/minotari_merge_mining_proxy&#xA;./target/release/minotari_miner&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, &lt;code&gt;cargo&lt;/code&gt; can build and install the executable into &lt;code&gt;~/.cargo/bin&lt;/code&gt; (&lt;code&gt;%USERPROFILE%\.cargo\bin&lt;/code&gt; on Windows), so it will be executable from anywhere on your system:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install --path=applications/minotari_node --force&#xA;cargo install --path=applications/minotari_console_wallet --force&#xA;cargo install --path=applications/minotari_merge_mining_proxy --force&#xA;cargo install --path=applications/minotari_miner --force&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Alternatively, &lt;code&gt;cargo&lt;/code&gt; can build and install the executable into &lt;code&gt;%USERPROFILE%\.cargo\bin&lt;/code&gt;, so it will be executable from anywhere on your system:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install --path=applications/minotari_node --force&#xA;cargo install --path=applications/minotari_console_wallet --force&#xA;cargo install --path=applications/minotari_merge_mining_proxy --force&#xA;cargo install --path=applications/minotari_miner --force&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run&lt;/h3&gt; &#xA;&lt;p&gt;The executables will either be inside your &lt;code&gt;~/tari/target/release&lt;/code&gt; (on Linux) or &lt;code&gt;%USERPROFILE%\Code\tari\target\release&lt;/code&gt; (on Windows) directory, or alternatively, inside your &lt;code&gt;~/.cargo/bin&lt;/code&gt; (on Linux) &lt;code&gt;%USERPROFILE%\.cargo\bin&lt;/code&gt; (on Windows) directory, depending on the build choice above, and must be run from the command line. If the former build method was used, you can run it from that directory, or you more likely want to copy it somewhere more convenient. Make sure to start the Tor service &lt;code&gt;%USERPROFILE%\Code\tari\applications\minotari_node\windows\start_tor.lnk&lt;/code&gt; if running on Windows. Tor is included in the binary if running on Linux or Mac.&lt;/p&gt; &#xA;&lt;p&gt;Running+:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;minotari_node&#xA;&#xA;minotari_console_wallet&#xA;&#xA;minotari_merge_mining_proxy&#xA;&#xA;minotari_miner&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can run the Tari applications from your source directory using &lt;code&gt;cargo&lt;/code&gt;, and just omit the &lt;code&gt;--release&lt;/code&gt; flag if you want to run in debug mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo run --bin minotari_node --release&#xA;&#xA;cargo run --bin minotari_merge_mining_proxy --release&#xA;&#xA;cargo run --bin minotari_console_wallet --release&#xA;&#xA;cargo run --bin minotari_miner --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using all the default options, the blockchain database, wallet database, console wallet database, log files and all configuration files will be created in the &lt;code&gt;~/.tari&lt;/code&gt; (on Linux) or &lt;code&gt;%USERPROFILE%\.tari&lt;/code&gt; (on Windows) directory. Alternatively, by specifying &lt;code&gt;--base-path &amp;lt;base-path&amp;gt;&lt;/code&gt; on the command line as well, all of this will be created in that directory.&lt;/p&gt; &#xA;&lt;h2&gt;Advanced build configurations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vagrant: See &lt;a href=&#34;https://github.com/tari-project/tari/issues/1407&#34;&gt;Building with Vagrant&lt;/a&gt;, using Vagrant to build and run a basenode, as cleanly as possible.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Using Docker&lt;/h2&gt; &#xA;&lt;h3&gt;Running the base node with a Docker image&lt;/h3&gt; &#xA;&lt;p&gt;Minotari Base Node Docker images can be found at &lt;a href=&#34;https://quay.io/repository/tarilabs/minotari_node&#34;&gt;https://quay.io/repository/tarilabs/minotari_node&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Using &lt;code&gt;docker-compose.yaml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;version: &#34;3&#34;&#xA;&#xA;services:&#xA;  minotari_node:&#xA;    image: quay.io/tarilabs/minotari_node:latest-nextnet&#xA;    restart: unless-stopped&#xA;    volumes:&#xA;      - ./data:/root/.tari&#xA;# These 2 params are required for an interactive docker-compose session&#xA;    stdin_open: true&#xA;    tty: true&#xA;    expose:&#xA;      - 18142&#xA;    ports:&#xA;      - &#34;18142:18142&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;docker-compose up -d&lt;/code&gt; to start your docker service.&lt;/p&gt; &#xA;&lt;p&gt;Check the running state with &lt;code&gt;docker-compose ps&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;        Name           Command    State            Ports&#xA;------------------------------------------------------------------&#xA;tbn_minotari_node_1   start.sh   Up      0.0.0.0:18142-&amp;gt;18142/tcp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To connect to the console, use &lt;code&gt;docker ps&lt;/code&gt; to get the container ID to which to attach the `minotari_node`` in Docker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CONTAINER ID        IMAGE                                    COMMAND             CREATED             STATUS              PORTS                      NAMES&#xA;73427509a4bb        quay.io/tarilabs/minotari_node:v0.5.4   &#34;start.sh&#34;          45 minutes ago      Up 26 minutes       0.0.0.0:18142-&amp;gt;18142/tcp   tbn_minotari_node_1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the container ID &lt;code&gt;73427509a4bb&lt;/code&gt;, connect to the &lt;code&gt;minotari_node&lt;/code&gt; console using &lt;code&gt;docker attach 73427509a4bb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; help&#xA;Available commands are:&#xA;help, version, get-chain-metadata, list-peers, reset-offline-peers, ban-peer, unban-peer, list-connections, list-headers,&#xA;check-db, calc-timing, discover-peer, get-block, search-utxo, search-kernel, search-stxo, get-mempool-stats,&#xA;get-mempool-state, whoami, get-state-info, quit, exit&#xA;&amp;gt;&amp;gt; get-chain-metadata&#xA;Height of longest chain : 5228&#xA;Geometric mean of longest chain : 5892870&#xA;Best block : 2c4f92854b2160324b8afebaa476b39be4004d2a7a19c69dd2d4e4da257bfee2&#xA;Pruning horizon : 0&#xA;Effective pruned height : 0&#xA;&amp;gt;&amp;gt; get-state-info&#xA;Current state machine state:&#xA;Synchronizing blocks: Syncing from the following peers:&#xA;510c83279adc7cb7d7dda0aa07&#xA;Syncing 5229/5233&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Mining&lt;/h2&gt; &#xA;&lt;p&gt;The Tari protocol supports hybrid mining; stand-alone or pooled SHA3 mining using the Minotari Miner or merged mining with Monero using the Minotari Merge Mining Proxy in conjunction with XMRig (RandomX-based mining). Blocks to be won by standalone and pooled SHA3 mining have been apportioned to approximately 50% and with Monero merged mining to approximately 50%. This apportionment is deeply baked into the Tari protocol and part of the consensus rules. The 50/50 split is determined by slightly different block target times for each algorithm, that when combined will give an average block time of approximately 120 seconds. Each mining algorithm makes use of Linear Weighted Moving Average (LWMA) maths to gracefully adjust the target difficulties to adhere to the respective target block times. Any block won by either mining algorithm will be accepted, and when there is a tie, a geometric mean calculation will be used to decide the winner. This system is completely fair without any additional empirical meddling to try force a certain outcome.&lt;/p&gt; &#xA;&lt;h3&gt;Tari SHA3 mining&lt;/h3&gt; &#xA;&lt;p&gt;In order to perform SHA3 mining with Tari, the following applications are needed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A Minotari Base Node [&lt;em&gt;to supply blockchain metadata information&lt;/em&gt;];&lt;/li&gt; &#xA; &lt;li&gt;A Minotari Wallet [&lt;em&gt;to collect the Minotari block rewards (coinbase transactions)&lt;/em&gt;];&lt;/li&gt; &#xA; &lt;li&gt;A Minotari Miner [&lt;em&gt;to perform the mining&lt;/em&gt;];&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In order to perform pooled SHA3 mining with Tari, the following applications are needed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;For a pool operator:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A Minotari Base Node [&lt;em&gt;to supply blockchain metadata information&lt;/em&gt;];&lt;/li&gt; &#xA;   &lt;li&gt;A Minotari Wallet [&lt;em&gt;to collect the Minotari block rewards (coinbase transactions)&lt;/em&gt;];&lt;/li&gt; &#xA;   &lt;li&gt;Miningcore [&lt;em&gt;pool software supporting various cryptocurrencies, configured for Tari&lt;/em&gt;]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For a miner:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A Minotari Wallet [&lt;em&gt;to collect the share rewards (pool payouts)&lt;/em&gt;];&lt;/li&gt; &#xA;   &lt;li&gt;A Minotari Miner [&lt;em&gt;to perform the mining&lt;/em&gt;];&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Runtime prerequisites&lt;/h4&gt; &#xA;&lt;p&gt;The Minotari Base Node, Minotari Wallet and Minotari Miner can all run in the same directory. By performing the default installation as described in &lt;a href=&#34;https://raw.githubusercontent.com/tari-project/tari/development/#installing-using-binaries&#34;&gt;Installing using binaries&lt;/a&gt;, all these applications will be available.&lt;/p&gt; &#xA;&lt;p&gt;For MiningCore see the &lt;a href=&#34;https://github.com/tari-project/miningcore/#building-on-debianubuntu&#34;&gt;Linux&lt;/a&gt; and &lt;a href=&#34;https://github.com/tari-project/miningcore/#building-on-windows&#34;&gt;Windows&lt;/a&gt; build instructions.&lt;/p&gt; &#xA;&lt;h4&gt;Configuration prerequisites&lt;/h4&gt; &#xA;&lt;p&gt;The configuration prerequisites are the same for all four Tari applications. After performing a &lt;a href=&#34;https://raw.githubusercontent.com/tari-project/tari/development/#installing-using-binaries&#34;&gt;default installation&lt;/a&gt;, locate the main configuration file (&lt;code&gt;config.toml&lt;/code&gt;), which will be created in the &lt;code&gt;~/tari_esmeralda_testnet/config&lt;/code&gt; (on Linux) or &lt;code&gt;%USERPROFILE%\.tari-testnet\config&lt;/code&gt; (on Windows) directory.&lt;/p&gt; &#xA;&lt;p&gt;With the main configuration file, in addition to the settings already present, the following must also be enabled for the Minotari Base Node and the Minotari Wallet, if they are not enabled already. Under sections &lt;strong&gt;&lt;code&gt;base_node.esmeralda&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;wallet&lt;/code&gt;&lt;/strong&gt; respectively:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[wallet]&#xA;&#xA;grpc_address = &#34;http://127.0.0.1:18143&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;[base_node.esmeralda]&#xA;transport = &#34;tor&#34;&#xA;allow_test_addresses = false&#xA;grpc_enabled = true&#xA;grpc_base_node_address = &#34;http://127.0.0.1:18142&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the Minotari Miner there are some additional settings under section &lt;strong&gt;&lt;code&gt;miner&lt;/code&gt;&lt;/strong&gt; that can be changed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For SHA3 Mining:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;[miner]&#xA;# Number of mining threads&#xA;# Default: number of logical CPU cores&#xA;#num_mining_threads=8&#xA;&#xA;# GRPC address of base node&#xA;# Default: value from `base_node.grpc_base_node_address`&#xA;#base_node_grpc_address = &#34;http://127.0.0.1:18142&#34;&#xA;&#xA;# GRPC address of console wallet&#xA;# Default: value from `wallet.grpc_address`&#xA;#wallet_grpc_address = &#34;http://127.0.0.1:18143&#34;&#xA;&#xA;# Start mining only when base node is bootstrapped&#xA;# and current block height is on the tip of network&#xA;# Default: true&#xA;#mine_on_tip_only=true&#xA;&#xA;# Will check tip with node every N seconds and restart mining&#xA;# if height already taken and option `mine_on_tip_only` is set&#xA;# to true&#xA;# Default: 30 seconds&#xA;#validate_tip_timeout_sec=30&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Uncomment &lt;code&gt;mining_pool_address&lt;/code&gt; and &lt;code&gt;mining_wallet_address&lt;/code&gt;. Adjust the values to your intended configuration. &lt;code&gt;mining_worker_name&lt;/code&gt; is an optional configuration field allowing you to name your worker.&lt;/p&gt; &#xA;&lt;h4&gt;Perform SHA3 mining&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;For SHA3 mining: Tor and the required Tari applications must be started and preferably in this order:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Tor(windows only):&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Windows: &lt;code&gt;Start Tor Serviecs&lt;/code&gt; menu item or &lt;code&gt;start_tor&lt;/code&gt; shortcut in the Tari installation folder.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Tari Base Node:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Linux/OSX: As per &lt;a href=&#34;https://raw.githubusercontent.com/tari-project/tari/development/#runtime-links&#34;&gt;Runtime links&lt;/a&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;Windows: As per &lt;a href=&#34;https://raw.githubusercontent.com/tari-project/tari/development/#runtime-links&#34;&gt;Runtime links&lt;/a&gt; or &lt;code&gt;Start Base Node&lt;/code&gt; menu item or &lt;code&gt;start_minotari_node&lt;/code&gt; shortcut in the Tari installation folder.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Tari Console Wallet:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Linux/OSX: As per &lt;a href=&#34;https://raw.githubusercontent.com/tari-project/tari/development/#runtime-links&#34;&gt;Runtime links&lt;/a&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;Windows: As per &lt;a href=&#34;https://raw.githubusercontent.com/tari-project/tari/development/#runtime-links&#34;&gt;Runtime links&lt;/a&gt; or &lt;code&gt;Start Console Wallet&lt;/code&gt; menu item or &lt;code&gt;start_tari_console_wallet&lt;/code&gt; shortcut in the Tari installation folder.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Tari Miner:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Linux/OSX: As per &lt;a href=&#34;https://raw.githubusercontent.com/tari-project/tari/development/#runtime-links&#34;&gt;Runtime links&lt;/a&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;Windows: As per &lt;a href=&#34;https://raw.githubusercontent.com/tari-project/tari/development/#runtime-links&#34;&gt;Runtime links&lt;/a&gt; or &lt;code&gt;Start Miner&lt;/code&gt; menu item or &lt;code&gt;start_tari_miner&lt;/code&gt; shortcut in the Tari installation folder.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Look out for the following types of messages on the Tari Miner console to confirm that it is connected properly and performing mining:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;2021-02-26 11:24:23.604202000 [minotari_miner] INFO  Connecting to base node at http://127.0.0.1:18151&#xA;2021-02-26 11:24:23.606260800 [minotari_miner] INFO  Connecting to wallet at http://127.0.0.1:18161&#xA;2021-02-26 11:24:23.721890400 [minotari_miner::miner] INFO  Mining thread 0 started&#xA;2021-02-26 11:24:23.722287800 [minotari_miner::miner] INFO  Mining thread 1 started&#xA;2021-02-26 11:24:23.722505500 [minotari_miner::miner] INFO  Mining thread 2 started&#xA;2021-02-26 11:28:19.687855700 [minotari_miner::miner] INFO  Mining thread 2 stopped&#xA;2021-02-26 11:28:19.688251200 [minotari_miner] INFO  Miner 2 found block header BlockHeader { hash: [...], version: 1,&#xA;  height: 8493, prev_hash: [...], timestamp: Some(Timestamp { seconds: 1614331698, nanos: 0 }), output_mr: [...],&#xA;  witness_mr: [...], total_kernel_offset: [...], nonce: 8415580256943728281, pow: Some(ProofOfWork { pow_algo: 2,&#xA;  pow_data: [] }), kernel_mmr_size: 24983, output_mmr_size: 125474 } with difficulty 7316856839&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Tari merge mining&lt;/h3&gt; &#xA;&lt;p&gt;In order to perform merge mining with Tari, the following applications are needed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A Minotari Base Node [&lt;em&gt;to supply blockchain metadata information&lt;/em&gt;];&lt;/li&gt; &#xA; &lt;li&gt;A Minotari Wallet [&lt;em&gt;to collect the Tari block rewards (coinbase transactions)&lt;/em&gt;];&lt;/li&gt; &#xA; &lt;li&gt;A Minotari Merge Mining Proxy [&lt;em&gt;to enable communication between all applications&lt;/em&gt;];&lt;/li&gt; &#xA; &lt;li&gt;XMRig [&lt;em&gt;to perform the mining&lt;/em&gt;];&lt;/li&gt; &#xA; &lt;li&gt;Monero wallet (specifically a stagenet wallet address during testnet; the one provided can be used, or a custom one can be set up) [&lt;em&gt;to collect Monero block rewards (coinbase transactions)&lt;/em&gt;].&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The Minotari Merge Mining Proxy will be the communication gateway between all these applications and will coordinate all activities. It will also submit finalized Minotari and Monero blocks to the respective networks when RandomX is solved at the respective difficulties.&lt;/p&gt; &#xA;&lt;h4&gt;Runtime prerequisites&lt;/h4&gt; &#xA;&lt;p&gt;The Minotari Base Node, Minotari Wallet and Minotari Merge Mining Proxy can all run in the same directory, whereas XMRig will run in its own directory. By performing the default installation as described in &lt;a href=&#34;https://raw.githubusercontent.com/tari-project/tari/development/#installing-using-binaries&#34;&gt;Installing using binaries&lt;/a&gt;, all these applications will be available.&lt;/p&gt; &#xA;&lt;p&gt;XMRig can also be build from sources. If that is your preference, follow these instructions: &lt;a href=&#34;https://xmrig.com/docs/miner/&#34;&gt;https://xmrig.com/docs/miner/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Configuration prerequisites&lt;/h4&gt; &#xA;&lt;h5&gt;Minotari applications&lt;/h5&gt; &#xA;&lt;p&gt;The configuration prerequisites are the same for all three Minotari applications. After performing a &lt;a href=&#34;https://raw.githubusercontent.com/tari-project/tari/development/#installing-using-binaries&#34;&gt;default installation&lt;/a&gt;, locate the main configuration file (&lt;code&gt;config.toml&lt;/code&gt;), which will be created in the &lt;code&gt;~/tari_esmeralda_testnet/config&lt;/code&gt; (on Linux) or &lt;code&gt;%USERPROFILE%\.tari-testnet\config&lt;/code&gt; (on Windows) directory.&lt;/p&gt; &#xA;&lt;p&gt;With the main configuration file, in addition to the settings already present, the following must also be enabled if they are not enabled already:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For the Minotari Base Node and the Minotari Wallet, under sections &lt;strong&gt;&lt;code&gt;base_node.esmeralda&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;wallet&lt;/code&gt;&lt;/strong&gt; respectively &lt;pre&gt;&lt;code&gt;[wallet]&#xA;grpc_address = &#34;http://127.0.0.1:18143&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code&gt;[base_node.esmeralda]&#xA;transpo*_r_*t = &#34;tor&#34;&#xA;allow_test_addresses = false&#xA;base_node_grpc_address = &#34;http://127.0.0.1:18142&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Depending on if you are using solo mining or self-select mining, you will use one of the following:&lt;/p&gt; &#xA;&lt;h6&gt;Solo mining&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;For the Minotari Merge Mining Proxy, under section &lt;strong&gt;&lt;code&gt;merge_mining_proxy&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;[merge_mining_proxy]&#xA;monerod_url = [ # stagenet&#xA;  &#34;http://stagenet.xmr-tw.org:38081&#34;,&#xA;  &#34;http://stagenet.community.xmr.to:38081&#34;,&#xA;  &#34;http://monero-stagenet.exan.tech:38081&#34;,&#xA;  &#34;http://xmr-lux.boldsuck.org:38081&#34;,&#xA;  &#34;http://singapore.node.xmr.pm:38081&#34;,&#xA;]&#xA;&#xA;proxy_host_address = &#34;127.0.0.1:18081&#34;&#xA;proxy_submit_to_origin = true&#xA;monerod_use_auth = false&#xA;monerod_username = &#34;&#34;&#xA;monerod_password = &#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;Self-Select mining&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;For the Minotari Merge Mining Proxy, under section &lt;strong&gt;&lt;code&gt;merge_mining_proxy&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;[merge_mining_proxy]&#xA;monerod_url = [ # stagenet&#xA;  &#34;http://stagenet.xmr-tw.org:38081&#34;,&#xA;  &#34;http://stagenet.community.xmr.to:38081&#34;,&#xA;  &#34;http://monero-stagenet.exan.tech:38081&#34;,&#xA;  &#34;http://xmr-lux.boldsuck.org:38081&#34;,&#xA;  &#34;http://singapore.node.xmr.pm:38081&#34;,&#xA;]&#xA;&#xA;proxy_host_address = &#34;127.0.0.1:18081&#34;&#xA;proxy_submit_to_origin = false&#xA;monerod_use_auth = false&#xA;monerod_username = &#34;&#34;&#xA;monerod_password = &#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The ports &lt;code&gt;18081&lt;/code&gt;, &lt;code&gt;18142&lt;/code&gt; and &lt;code&gt;18143&lt;/code&gt; shown in the example above should not be in use by other processes. If they are, choose different ports. You will need to update the ports in the steps below as well.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;monerod_url&lt;/code&gt; set must contain valid addresses (&lt;code&gt;host:port&lt;/code&gt;) for &lt;code&gt;monerod&lt;/code&gt; that is running Monero mainnet (e.g. &lt;code&gt;[&#34;http://18.132.124.81:18081&#34;]&lt;/code&gt;) or stagenet (e.g. &lt;code&gt;[&#34;http://monero-stagenet.exan.tech:38081&#34;]&lt;/code&gt;), which can be a public node or local instance. To test if the &lt;code&gt;monerod_url&lt;/code&gt; address is working properly, try to paste &lt;code&gt;host:port/get_height&lt;/code&gt; in an internet browser, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://18.132.124.81:18081/get_height&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A typical response would be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;hash&#34;: &#34;ce32dd0a6e3220d57c368f2cd01e5980a9b4d70f02b27274d67142d5b26cb4d6&#34;,&#xA;  &#34;height&#34;: 2277206,&#xA;  &#34;status&#34;: &#34;OK&#34;,&#xA;  &#34;untrusted&#34;: false&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; A guide to setting up a local Monero stagenet on Linux can be found &lt;a href=&#34;https://github.com/tari-project/tari/raw/development/applications/minotari_merge_mining_proxy/monero_stagenet_setup.md&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h5&gt;XMRig configuration&lt;/h5&gt; &#xA;&lt;p&gt;The XMRig configuration must be prepared for either solo or pool merged mining with Monero. It is advisable to use a configuration file for XMRig as this offers more flexibility, otherwise, the configuration parameters can be passed in via the command line upon runtime.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Monero mainnet and stagenet wallet addresses can only be used with the corresponding network. The &lt;code&gt;monerod_url&lt;/code&gt; configuration setting (see &lt;a href=&#34;https://raw.githubusercontent.com/tari-project/tari/development/#minotari-applications&#34;&gt;Minotari applications&lt;/a&gt;) must also correspond to the chosen network.&lt;/li&gt; &#xA; &lt;li&gt;For the solo mining configuration, Monero doesn&#39;t currently support requesting templates to mine on with the address being a subaddress. It is possible to do with the self-select configuration since the template is requested by the miner with the wallet address of the pool.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;Solo-mining&lt;/h6&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://xmrig.com/wizard&#34;&gt;XMRig configuration wizard&lt;/a&gt; can be used to create a solo mining configuration file in JSON format:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Start -&amp;gt; &lt;code&gt;+ New configuration&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Pools -&amp;gt; &lt;code&gt;+ Add daemon&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;With &lt;code&gt;Add new daemon for Solo mining&lt;/code&gt;, complete the required information, then &lt;code&gt;+ Add daemon&lt;/code&gt;: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;Host&lt;/code&gt;, &lt;code&gt;Port&lt;/code&gt;: This must correspond to the &lt;code&gt;proxy_host_address&lt;/code&gt; in the Tari configuration file.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;Secure connection (TLS)&lt;/code&gt;: Uncheck.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;Coin&lt;/code&gt;: Monero.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;Wallet address&lt;/code&gt;: This must be your own stagenet or mainnet wallet address, or you can use these donation addresses: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;Public stagenet address at &lt;a href=&#34;https://coin.fyi/news/monero/stagenet-wallet-8jyt89#&#34;&gt;https://coin.fyi/news/monero/stagenet-wallet-8jyt89#&lt;/a&gt;! &lt;code&gt;55LTR8KniP4LQGJSPtbYDacR7dz8RBFnsfAKMaMuwUNYX6aQbBcovzDPyrQF9KXF9tVU6Xk3K8no1BywnJX6GvZX8yJsXvt&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;Mainnet address &lt;code&gt;&amp;lt;Enter your own mainnet wallet address here&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Backends -&amp;gt; Select &lt;code&gt;CPU&lt;/code&gt; (&lt;code&gt;OpenCL&lt;/code&gt; or &lt;code&gt;CUDA&lt;/code&gt; also possible depending on your computer hardware).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Misc -&amp;gt; With &lt;code&gt;Donate&lt;/code&gt;, type in your preference.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Result -&amp;gt; With &lt;code&gt;Config file&lt;/code&gt;, copy or download, than save as &lt;code&gt;config.json&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Using the public stagenet wallet address above, the resulting configuration file should look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    &#34;autosave&#34;: true,&#xA;    &#34;cpu&#34;: true,&#xA;    &#34;opencl&#34;: false,&#xA;    &#34;cuda&#34;: false,&#xA;    &#34;pools&#34;: [&#xA;        {&#xA;            &#34;coin&#34;: &#34;monero&#34;,&#xA;            &#34;url&#34;: &#34;127.0.0.1:18081&#34;,&#xA;            &#34;user&#34;: &#34;55LTR8KniP4LQGJSPtbYDacR7dz8RBFnsfAKMaMuwUNYX6aQbBcovzDPyrQF9KXF9tVU6Xk3K8no1BywnJX6GvZX8yJsXvt&#34;,&#xA;            &#34;tls&#34;: false,&#xA;            &#34;daemon&#34;: true&#xA;        }&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Pool mining with Self-Select&lt;/h6&gt; &#xA;&lt;p&gt;For pool mining, the configuration file obtained from the &lt;a href=&#34;https://xmrig.com/wizard&#34;&gt;XMRig configuration wizard&lt;/a&gt; must be augmented with Tari specific settings. Using the wizard, create the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Start -&amp;gt; &lt;code&gt;+ New configuration&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Pools -&amp;gt; &lt;code&gt;+ Add pool&lt;/code&gt; -&amp;gt; &lt;code&gt;Custom pool&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;With &lt;code&gt;Add new custom pool&lt;/code&gt;, complete the required information, then &lt;code&gt;+ Add pool&lt;/code&gt;: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;Host&lt;/code&gt;, &lt;code&gt;Port&lt;/code&gt;: This must be for a Monero mainnet mining pool that supports the &lt;code&gt;self-select&lt;/code&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;Secure connection (TLS)&lt;/code&gt;: Check/Uncheck (based on the pool requirements).&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;keepalive&lt;/code&gt;: Check.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;nicehash&lt;/code&gt;: Uncheck.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;User&lt;/code&gt;: This must be your own mainnet wallet address, or you can use this address to donate to Monero: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;Public mainnet address at &lt;a href=&#34;https://www.getmonero.org/get-started/contributing/&#34;&gt;https://www.getmonero.org/get-started/contributing/&lt;/a&gt; &lt;code&gt;888tNkZrPN6JsEgekjMnABU4TBzc2Dt29EPAvkRxbANsAnjyPbb3iQ1YBRk1UXcdRsiKc9dhwMVgN5S9cQUiyoogDavup3H&lt;/code&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;Password&lt;/code&gt;: A custom field that could be your wallet name or some other pool settings.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;Coin&lt;/code&gt;: Monero.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;Algorithm&lt;/code&gt;: rx/0.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Backends -&amp;gt; Select &lt;code&gt;CPU&lt;/code&gt; (&lt;code&gt;OpenCL&lt;/code&gt; or &lt;code&gt;CUDA&lt;/code&gt; also possible depending on your computer hardware).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Misc -&amp;gt; With &lt;code&gt;Donate&lt;/code&gt;, type in your preference.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Result -&amp;gt; With &lt;code&gt;Config file&lt;/code&gt;, copy or download, than save as &lt;code&gt;config.json&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add custom entries for &lt;code&gt;&#34;self-select&#34;: &#34;127.0.0.1:18081&#34;&lt;/code&gt; and &lt;code&gt;&#34;submit-to-origin&#34;: true&lt;/code&gt; in the &lt;code&gt;&#34;pools&#34;&lt;/code&gt; section.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Mining pool &lt;code&gt;cryptonote.social&lt;/code&gt; requires you to add a personalized handle to the wallet address so that you can query your own pool statistics, separated by a full stop, i.e. &lt;code&gt;&amp;lt;YOUR WALLET ADDRESS&amp;gt;.&amp;lt;pool specific user name&amp;gt;&lt;/code&gt;. For demonstration purposes, &lt;code&gt;donatemonero&lt;/code&gt; has been associated with the public mainnet wallet address above. If you go to &lt;a href=&#34;https://cryptonote.social/xmr&#34;&gt;https://cryptonote.social/xmr&lt;/a&gt; and enter &lt;code&gt;donatemonero&lt;/code&gt; in the &lt;code&gt;Username:&lt;/code&gt; text box you will see some merge mining activity for that address. The configuration file used for this exercise is shown below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    &#34;autosave&#34;: true,&#xA;    &#34;cpu&#34;: true,&#xA;    &#34;opencl&#34;: false,&#xA;    &#34;cuda&#34;: false,&#xA;    &#34;pools&#34;: [&#xA;        {&#xA;            &#34;coin&#34;: &#34;monero&#34;,&#xA;            &#34;algo&#34;: &#34;rx/0&#34;,&#xA;            &#34;url&#34;: &#34;cryptonote.social:5555&#34;,&#xA;            &#34;user&#34;: &#34;888tNkZrPN6JsEgekjMnABU4TBzc2Dt29EPAvkRxbANsAnjyPbb3iQ1YBRk1UXcdRsiKc9dhwMVgN5S9cQUiyoogDavup3H.donatemonero&#34;,&#xA;            &#34;pass&#34;: &#34;start_diff=220000;payment_scheme=pprop;donate=0.5&#34;,&#xA;            &#34;tls&#34;: false,&#xA;            &#34;keepalive&#34;: true,&#xA;            &#34;nicehash&#34;: false,&#xA;            &#34;self-select&#34;: &#34;127.0.0.1:18081&#34;,&#xA;            &#34;submit-to-origin&#34;: true&#xA;        }&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Perform merge mining&lt;/h4&gt; &#xA;&lt;p&gt;Tor and the required Minotari applications must be started, preferably in this order:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Tor(windows only):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Windows: &lt;code&gt;Start Tor Serviecs&lt;/code&gt; menu item or &lt;code&gt;start_tor&lt;/code&gt; shortcut in the Tari installation folder.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Tari Base Node:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Linux/OSX: As per &lt;a href=&#34;https://raw.githubusercontent.com/tari-project/tari/development/#runtime-links&#34;&gt;Runtime links&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Windows: As per &lt;a href=&#34;https://raw.githubusercontent.com/tari-project/tari/development/#runtime-links&#34;&gt;Runtime links&lt;/a&gt; or &lt;code&gt;Start Base Node&lt;/code&gt; menu item or &lt;code&gt;start_minotari_node&lt;/code&gt; shortcut in the Tari installation folder.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Tari Console Wallet:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Linux/OSX: As per &lt;a href=&#34;https://raw.githubusercontent.com/tari-project/tari/development/#runtime-links&#34;&gt;Runtime links&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Windows: As per &lt;a href=&#34;https://raw.githubusercontent.com/tari-project/tari/development/#runtime-links&#34;&gt;Runtime links&lt;/a&gt; or &lt;code&gt;Start Console Wallet&lt;/code&gt; menu item or &lt;code&gt;start_minotari_console_wallet&lt;/code&gt; shortcut in the Tari installation folder.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Tari Merge Mining Proxy:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Linux/OSX: As per &lt;a href=&#34;https://raw.githubusercontent.com/tari-project/tari/development/#runtime-links&#34;&gt;Runtime links&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Windows: As per &lt;a href=&#34;https://raw.githubusercontent.com/tari-project/tari/development/#runtime-links&#34;&gt;Runtime links&lt;/a&gt; or &lt;code&gt;Start Merge Mining Proxy&lt;/code&gt; menu item or &lt;code&gt;start_minotari_merge_mining_proxy&lt;/code&gt; shortcut in the Tari installation folder.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In addition, select one of the merge mining options as outlined in solo or pool mining in the next paragraphs.&lt;/p&gt; &#xA;&lt;h5&gt;Solo merged mining with Monero&lt;/h5&gt; &#xA;&lt;p&gt;This paragraph is applicable to solo mining Monero on mainnet or stagenet and solo mining Tari on testnet.&lt;/p&gt; &#xA;&lt;p&gt;Solo merged mining with Monero is supported using the &lt;code&gt;daemon&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;h6&gt;Merge Mining Proxy configuration&lt;/h6&gt; &#xA;&lt;p&gt;As mentioned previously, the &lt;code&gt;monerod_url&lt;/code&gt; field in the &lt;code&gt;config.toml&lt;/code&gt; should be enabled for the corresponding mainnet or stagenet network Monero wallet address:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# URL to monerod&#xA;  monerod_url = [ # mainnet&#xA;  &#34;http://18.132.124.81:18081&#34;,&#xA;  &#34;http://xmr.support:18081&#34;,&#xA;  &#34;http://node1.xmr-tw.org:18081&#34;,&#xA;  &#34;http://xmr.nthrow.nyc:18081&#34;,&#xA;  ]&#xA;  monerod_url = [ # stagenet&#xA;    &#34;http://stagenet.xmr-tw.org:38081&#34;,&#xA;    &#34;http://stagenet.community.xmr.to:38081&#34;,&#xA;    &#34;http://monero-stagenet.exan.tech:38081&#34;,&#xA;    &#34;http://xmr-lux.boldsuck.org:38081&#34;,&#xA;    &#34;http://singapore.node.xmr.pm:38081&#34;,&#xA;  ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Runtime&lt;/h6&gt; &#xA;&lt;p&gt;Ensure the &lt;code&gt;config.json&lt;/code&gt; configuration file discussed in &lt;a href=&#34;https://raw.githubusercontent.com/tari-project/tari/development/#solo-mining&#34;&gt;Solo mining&lt;/a&gt; is copied to the XMRig build or install folder, then start XMRig:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Linux/OSX: Execute &lt;code&gt;./xmrig&lt;/code&gt; in the XMRig build or install folder.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Windows: Execute &lt;code&gt;xmrig&lt;/code&gt; in the XMRig build or install folder, or &lt;code&gt;Start XMRig&lt;/code&gt; menu item or &lt;code&gt;start_xmrig&lt;/code&gt; shortcut in the Tari installation folder.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: On modern Windows versions, coin mining software is blocked by default, for example by Windows Defender. Ensure that these processes are allowed to run when challenged:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;PUA:Win32/CoinMiner&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;PUA:Win64/CoinMiner&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;App:XMRigMiner&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Look out for the following outputs in the XMRig console to confirm that it is connected to the Merge Mining Proxy and accepting jobs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;* POOL #1      127.0.0.1:18081 coin monero&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;[2021-01-21 12:10:18.960]  net      use daemon 127.0.0.1:18081  127.0.0.1&#xA;[2021-01-21 12:10:18.960]  net      new job from 127.0.0.1:18081 diff 286811 algo rx/0 height 756669&#xA;[2021-01-21 12:10:56.730]  cpu      rejected (0/1) diff 286811 &#34;Block not accepted&#34; (656 ms)&#xA;[2021-01-21 12:10:57.398]  net      new job from 127.0.0.1:18081 diff 293330 algo rx/0 height 756670&#xA;[2021-01-21 12:12:23.695]  miner    speed 10s/60s/15m 4089.0 4140.2 n/a H/s max 4390.9 H/s&#xA;[2021-01-21 12:12:57.983]  cpu      accepted (1/1) diff 293330 (594 ms)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;cpu: rejected&lt;/code&gt; and &lt;code&gt;cpu: accepted&lt;/code&gt; messages originate from stagenet or mainnet &lt;code&gt;monerod&lt;/code&gt;, and show the Monero statistics. At this point, the mined and rejected Minotari coinbases should be visible in the Minotari Wallet.&lt;/p&gt; &#xA;&lt;h5&gt;Pool merged mining with Monero (self select)&lt;/h5&gt; &#xA;&lt;p&gt;This paragraph is applicable to pool mining Monero on mainnet and solo mining Minotari on testnet.&lt;/p&gt; &#xA;&lt;p&gt;Pool merged mining with Monero is supported using the &lt;a href=&#34;https://github.com/jtgrassie/monero-pool/raw/master/sss.md&#34;&gt;Stratum mode self-select&lt;/a&gt; option via XMRig. Two mining pools we have tried out that support this feature are &lt;a href=&#34;https://github.com/jtgrassie/monero-pool&#34;&gt;monero-pool&lt;/a&gt;, with its reference pool implementation running &lt;a href=&#34;http://monerop.com/&#34;&gt;here&lt;/a&gt;, and &lt;a href=&#34;https://cryptonote.social/xmr&#34;&gt;cryptonote.social&lt;/a&gt;. With normal self select mode, XMRig requests a Monero block template from a third party and submits the solution to the mining pool. Minotari added a &lt;code&gt;submit-to-origin&lt;/code&gt; option to the self select mode whereby, if a solution has been found that only matches the pool difficulty, XMRig will submit the solution to the pool only; but if the achieved difficulty meets both that of the pool and Minotari, it will be submitted to the Merge Mining Proxy as well as to the mining pool.&lt;/p&gt; &#xA;&lt;h6&gt;Merge Mining Proxy configuration&lt;/h6&gt; &#xA;&lt;p&gt;The &lt;code&gt;monerod_url&lt;/code&gt; field in the &lt;code&gt;config.toml&lt;/code&gt; should be enabled for the mainnet value:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# URL to monerod&#xA;  monerod_url = [ # mainnet&#xA;  &#34;http://18.132.124.81:18081&#34;,&#xA;  &#34;http://xmr.support:18081&#34;,&#xA;  &#34;http://node1.xmr-tw.org:18081&#34;,&#xA;  &#34;http://xmr.nthrow.nyc:18081&#34;,&#xA;  ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Runtime&lt;/h6&gt; &#xA;&lt;p&gt;Ensure the &lt;code&gt;config.json&lt;/code&gt; configuration file discussed in &lt;a href=&#34;https://raw.githubusercontent.com/tari-project/tari/development/#pool-mining-with-self-select&#34;&gt;Pool mining with self select&lt;/a&gt; is copied to the XMRig build or install folder, then start XMRig as before for solo mining.&lt;/p&gt; &#xA;&lt;p&gt;Look out for the following outputs in the XMRig console to confirm that it is connected to the pool and the Merge Mining Proxy and accepting jobs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;* POOL #1      cryptonote.social:5555 coin monero self-select 127.0.0.1:18081 submit-to-origin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;[2021-01-18 11:40:48.392]  net      new job from cryptonote.social:5555 diff 220006 algo rx/0 height 2277084&#xA;[2021-01-18 11:41:22.378]  origin   submitted to origin daemon (1/0)  diff 284557 vs. 371742&#xA;[2021-01-18 11:41:22.812]  cpu      accepted (1/0) diff 220006 (433 ms)&#xA;[2021-01-18 11:41:39.201]  miner    speed 10s/60s/15m 1562.2 1630.4 n/a H/s max 1710.0 H/s&#xA;[2021-01-18 11:42:06.320]  cpu      accepted (2/0) diff 220006 (482 ms)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Status essages &lt;code&gt;origin: submitted to origin daemon (1/0)&lt;/code&gt; and &lt;code&gt;origin: not submitted to origin daemon, difficulty too low (1/1)&lt;/code&gt; pertains to submissions to the Tari network, and &lt;code&gt;cpu: accepted (1/0)&lt;/code&gt; to the pool.&lt;/p&gt; &#xA;&lt;p&gt;Mined and rejected Tari coinbases should be visible in the Tari Console Wallet, and pool shares in the pool interface. If you are using &lt;code&gt;cryptonote.social:5555&lt;/code&gt; as in the example above, go to &lt;a href=&#34;https://cryptonote.social/xmr&#34;&gt;https://cryptonote.social/xmr&lt;/a&gt; and type in your wallet identity under &lt;code&gt;Username:&lt;/code&gt; to see your shares, or try &lt;code&gt;taritest&lt;/code&gt; if you used this configuration example.&lt;/p&gt; &#xA;&lt;h1&gt;Project documentation&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rfc.tari.com&#34;&gt;RFC documents&lt;/a&gt; are hosted on Github Pages. The source markdown is in the &lt;code&gt;RFC&lt;/code&gt; directory.&lt;/li&gt; &#xA; &lt;li&gt;Source code documentation is hosted on &lt;a href=&#34;https://docs.rs&#34;&gt;docs.rs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tari-project/rfcs&#34;&gt;RFC repo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;RFC documents&lt;/h2&gt; &#xA;&lt;p&gt;The RFCs are long-form technical documents proposing changes and features to the Tari network and ecosystem. They are hosted at &lt;a href=&#34;https://rfc.tari.com&#34;&gt;https://rfc.tari.com&lt;/a&gt;, and the RFC repo is at &lt;a href=&#34;https://github.com/tari-project/rfcs&#34;&gt;https://github.com/tari-project/rfcs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Source code documentation&lt;/h3&gt; &#xA;&lt;p&gt;Run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo doc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to generate the documentation. The generated html sits in &lt;code&gt;target/doc/&lt;/code&gt;. Alternatively, to open a specific package&#39;s documentation directly in your browser, run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo doc -p &amp;lt;package&amp;gt; --open&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Conversation channels&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;re generally on &lt;a href=&#34;https://discord.gg/tari&#34;&gt;Discord&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>