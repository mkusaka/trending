<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-28T01:48:17Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hakaioffsec/coffee</title>
    <updated>2023-06-28T01:48:17Z</updated>
    <id>tag:github.com,2023-06-28:/hakaioffsec/coffee</id>
    <link href="https://github.com/hakaioffsec/coffee" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A COFF loader made in Rust&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Coffee&lt;/h1&gt; &#xA;&lt;p&gt;Coffee is a custom implementation of the original Cobalt Strike&#39;s &lt;a href=&#34;https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/topics_aggressor-scripts/as-resources_functions.htm#beacon_inline_execute&#34;&gt;beacon_inline_execute&lt;/a&gt;. It is written in Rust and supports most of the features of the Cobalt Strike compatibility layer. Coffee is structured so it can be used as a library in other projects too.&lt;/p&gt; &#xA;&lt;p&gt;The original blog post can be found here: &lt;a href=&#34;https://labs.hakaioffsec.com/coffee-a-coff-loader-made-in-rust/&#34;&gt;https://labs.hakaioffsec.com/coffee-a-coff-loader-made-in-rust/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ coffee.exe -h&#xA;Coffee: A COFF loader made in Rust&#xA;&#xA;Usage: coffee.exe [OPTIONS] --bof-path &amp;lt;BOF_PATH&amp;gt; [-- &amp;lt;ARGS&amp;gt;...]&#xA;&#xA;Arguments:&#xA;  [ARGS]...  Arguments to the BOF passed after the &#34;--&#34; delimiter, supported types are: str, wstr, int, short&#xA;&#xA;Options:&#xA;  -b, --bof-path &amp;lt;BOF_PATH&amp;gt;      Path to the Beacon Object File (BOF)&#xA;  -e, --entrypoint &amp;lt;ENTRYPOINT&amp;gt;  The entrypoint name to execute in case of a custom entrypoint name [default: go]&#xA;  -v, --verbosity &amp;lt;VERBOSITY&amp;gt;    Verbosity level, 0 = ERROR, 1 = WARN, 2 = INFO, 3 = DEBUG, 4 = TRACE [default: 0]&#xA;  -h, --help                     Print help&#xA;  -V, --version                  Print version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Arguments&lt;/h3&gt; &#xA;&lt;p&gt;Arguments for the BOF can be passed after the &lt;code&gt;--&lt;/code&gt; delimiter. Each argument must be prefixed with the type of the argument followed by a colon (&lt;code&gt;:&lt;/code&gt;). The following types are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;str&lt;/code&gt; - A null-terminated string&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;wstr&lt;/code&gt; - A wide null-terminated string&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;int&lt;/code&gt; - A signed 32-bit integer&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;short&lt;/code&gt; - A signed 16-bit integer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;Using the &lt;code&gt;dir.x64.o&lt;/code&gt; BOF from the &lt;a href=&#34;https://github.com/trustedsec/CS-Situational-Awareness-BOF&#34;&gt;trustedsec/CS-Situational-Awareness-BOF&lt;/a&gt; repository and passing arguments to the BOF:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;coffee.exe --bof-path .\dir.x64.o -- wstr:&#34;C:\\Windows\\System32&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage as library&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo add coffee-ldr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Coffee can be used as a library in other projects. The following example shows how to use Coffee to load a BOF and execute the BOF:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use coffee_ldr::loader::Coffee;&#xA;&#xA;fn main() {&#xA;    let whoami_bof: [u8; 6771] = [&#xA;        0x64, 0x86, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x14, 0x00, 0x00, 0x33, 0x00, 0x00,&#xA;        ...&#xA;    ];&#xA;&#xA;    let _ = Coffee::new(&amp;amp;whoami_bof).unwrap().execute(None, None, None);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The example above will execute the BOF passed as an array of bytes and show the output in console.&lt;/p&gt; &#xA;&lt;p&gt;The detailed documentation can be found at: &lt;a href=&#34;https://docs.rs/coffee-ldr/latest/coffee_ldr/loader/struct.Coffee.html&#34;&gt;https://docs.rs/coffee-ldr/latest/coffee_ldr/loader/struct.Coffee.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building from source&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Rust from &lt;a href=&#34;https://rustup.rs/&#34;&gt;https://rustup.rs/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clone the repository&lt;/li&gt; &#xA; &lt;li&gt;Build the project using&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Coffee is licensed under the GNU GPLv3 license. See &lt;a href=&#34;https://raw.githubusercontent.com/hakaioffsec/coffee/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests are welcome. Please open an issue first to discuss what you would like to change.&lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to the amazing people who have written about COFF loaders and helped me understand the format:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/trustedsec/COFFLoader&#34;&gt;https://github.com/trustedsec/COFFLoader&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Cracked5pider/CoffeeLdr&#34;&gt;https://github.com/Cracked5pider/CoffeeLdr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yamakadi/ldr&#34;&gt;https://github.com/yamakadi/ldr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.trustedsec.com/blog/coffloader-building-your-own-in-memory-loader-or-how-to-run-bofs/&#34;&gt;https://www.trustedsec.com/blog/coffloader-building-your-own-in-memory-loader-or-how-to-run-bofs/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://0xpat.github.io/Malware_development_part_8/&#34;&gt;https://0xpat.github.io/Malware_development_part_8/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://otterhacker.github.io/Malware/CoffLoader.html&#34;&gt;https://otterhacker.github.io/Malware/CoffLoader.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://signal-labs.com/trainings/offensive-tool-development/&#34;&gt;https://signal-labs.com/trainings/offensive-tool-development/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/windows/win32/debug/pe-format#coff-file-header-object-and-image&#34;&gt;https://learn.microsoft.com/en-us/windows/win32/debug/pe-format#coff-file-header-object-and-image&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.cloudflare.com/how-to-execute-an-object-file-part-1/&#34;&gt;https://blog.cloudflare.com/how-to-execute-an-object-file-part-1/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>dzfrias/projectable</title>
    <updated>2023-06-28T01:48:17Z</updated>
    <id>tag:github.com,2023-06-28:/dzfrias/projectable</id>
    <link href="https://github.com/dzfrias/projectable" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üí´ A TUI file manager built for projects&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üí´ projectable&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dzfrias/projectable/main/extras/screenshot.png&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;sub&gt;Preview done with &lt;a href=&#34;https://github.com/sharkdp/bat&#34;&gt;bat&lt;/a&gt;&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;projectable&lt;/strong&gt; is a highly configurable TUI file manager built for projects. You can do handle all your project&#39;s file-based needs from a comfortable and smooth interface.&lt;/p&gt; &#xA;&lt;p&gt;Instead of exploring the depths of your most nested directory, open a file simply from the projectable file listing!&lt;/p&gt; &#xA;&lt;p&gt;Here are just a few builtin things projectable can do:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üîç Preview files&lt;/li&gt; &#xA; &lt;li&gt;üí• Run commands, foreground or background&lt;/li&gt; &#xA; &lt;li&gt;üëÄ Fuzzy search files&lt;/li&gt; &#xA; &lt;li&gt;üìÅ Create files or directories&lt;/li&gt; &#xA; &lt;li&gt;‚ùå Delete files or directories&lt;/li&gt; &#xA; &lt;li&gt;üôà Ignore files based on glob patterns&lt;/li&gt; &#xA; &lt;li&gt;üî≥ Toggle hidden files&lt;/li&gt; &#xA; &lt;li&gt;üéØ Mark files to quick and easy access&lt;/li&gt; &#xA; &lt;li&gt;üôâ Respect gitignore&lt;/li&gt; &#xA; &lt;li&gt;üîî Live update to new files/changes&lt;/li&gt; &#xA; &lt;li&gt;üå≤ View your project as a hierarchy&lt;/li&gt; &#xA; &lt;li&gt;üî¶ Automatically recognize project root, with customizability&lt;/li&gt; &#xA; &lt;li&gt;üíº Run special commands that change on a per-file basis&lt;/li&gt; &#xA; &lt;li&gt;üëì View git changes&lt;/li&gt; &#xA; &lt;li&gt;‚úèÔ∏è Easily write custom commands&lt;/li&gt; &#xA; &lt;li&gt;üìñ Fully configurable with a dead-simple &lt;code&gt;toml&lt;/code&gt; file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üöÄ Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;To get started, you can use one of the following installation methods:&lt;/p&gt; &#xA;&lt;h3&gt;Minimum Supported Rust Version (MSRV)&lt;/h3&gt; &#xA;&lt;p&gt;When installing from Cargo or building from source, the MSRV for &lt;code&gt;projectable&lt;/code&gt; is currently 1.70.x&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;a href=&#34;https://crates.io&#34;&gt;cargo&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo install projectable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew install dzfrias/formulae/projectable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;a href=&#34;https://aur.archlinux.org&#34;&gt;Arch User Repository&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;p&gt;projectable is available from the Arch User Repository though &lt;a href=&#34;https://aur.archlinux.org/packages/projectable&#34;&gt;this package&lt;/a&gt;. Thanks to @Absobel for creating this!&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Releases&lt;/summary&gt; &#xA; &lt;p&gt;Go to the &lt;a href=&#34;https://github.com/dzfrias/projectable/releases&#34;&gt;releases&lt;/a&gt; page, and binaries for every major platform should be there.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Build from source&lt;/summary&gt; &#xA; &lt;p&gt;Requires &lt;a href=&#34;https://github.com/rust-lang/rust&#34;&gt;Rust&lt;/a&gt; to be installed on your computer.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/dzfrias/projectable&#xA;$ cd projectable&#xA;$ cargo build --release&#xA;$ ./target/release/prj&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;To verify installation worked correctly, run &lt;code&gt;prj --version&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After you&#39;ve installed, run &lt;code&gt;prj&lt;/code&gt; to start it up! The default keybinds are vim-like (k for up, j for down), but you can change them in &lt;a href=&#34;https://raw.githubusercontent.com/dzfrias/projectable/main/extras/CONFIG.md&#34;&gt;CONFIG.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;‚å®Ô∏è Keybinds&lt;/h2&gt; &#xA;&lt;p&gt;Here a list of the available actions and their default bindings. For customization, see &lt;a href=&#34;https://raw.githubusercontent.com/dzfrias/projectable/main/extras/CONFIG.md&#34;&gt;CONFIG.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Key&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;j&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Go down&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;k&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Go up&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;enter&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open file or directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;q&lt;/code&gt;/&lt;code&gt;esc&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Quit&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;o&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Expand all&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;O&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Collapse all&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;g&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Go to first&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;G&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Go to last&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;l&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Expand all under directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;h&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Collapse all under directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;n&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;New file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;N&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;New directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;d&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Delete file/directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;r&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Rename file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;R&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Move file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;e&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Execute command (see &lt;a href=&#34;https://raw.githubusercontent.com/dzfrias/projectable/main/#command-syntax&#34;&gt;syntax&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ctrl-c&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Cancel command(s)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;v&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;File-specific command&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ctrl-n&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Go down by three&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ctrl-p&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Go up by three&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Search&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ctrl-d&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Move preview down&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ctrl-u&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Move preview up&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;t&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggle git diff view&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;T&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggle filter for modified files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;.&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggle hidden files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;m&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggle mark on file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;M&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open marks&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;You can make your own keybinds, too! This is of course done in the configuration file, the details of which can be found in &lt;a href=&#34;https://raw.githubusercontent.com/dzfrias/projectable/main/extras/CONFIG.md&#34;&gt;CONFIG.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Command Syntax&lt;/h3&gt; &#xA;&lt;p&gt;The execute command action has some extra features that allow for easy and dynamic command execution.&lt;/p&gt; &#xA;&lt;p&gt;By default commands are run in the background, but this behavior can be changed, so interactive programs like &lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;fzf&lt;/a&gt; work. In the command execution window, prepend &lt;code&gt;!!&lt;/code&gt; to execute in the foreground. For example, &lt;code&gt;!!fzf&lt;/code&gt; will execute &lt;code&gt;fzf&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, use &lt;code&gt;{}&lt;/code&gt; to interpolate the currently selected file into your command. &lt;code&gt;echo {}&lt;/code&gt; would log the file you are currently selecting.&lt;/p&gt; &#xA;&lt;p&gt;Lastly, &lt;code&gt;{...}&lt;/code&gt; will prompt you for input. This is only available in custom commands defined in the config file. So, if you&#39;ve defined a custom command bound to &lt;code&gt;ctrl-b&lt;/code&gt; that executes &lt;code&gt;cargo add {...}&lt;/code&gt;, pressing &lt;code&gt;ctrl-b&lt;/code&gt; will prompt you for something to &lt;code&gt;cargo add&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are also keybinds that integrate with &lt;a href=&#34;https://github.com/tmux/tmux&#34;&gt;tmux&lt;/a&gt;. When entering input to run a command, press &lt;code&gt;ctrl-v&lt;/code&gt; to open a vertical split. &lt;code&gt;ctrl-x&lt;/code&gt; will open a horizontal one, &lt;code&gt;ctrl-n&lt;/code&gt; a new window, and &lt;code&gt;ctrl-f&lt;/code&gt; a floating one.&lt;/p&gt; &#xA;&lt;p&gt;In short:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Item&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;!!&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Execute in foreground&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Interpolate selected file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;{...}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Prompt for input&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ctrl-v&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Vertical split&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ctrl-x&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Horizontal split&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ctrl-n&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;New window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ctrl-f&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Floating window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;‚úçÔ∏è License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/dzfrias/projectable/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>xline-kv/Xline</title>
    <updated>2023-06-28T01:48:17Z</updated>
    <id>tag:github.com,2023-06-28:/xline-kv/Xline</id>
    <link href="https://github.com/xline-kv/Xline" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A geo-distributed KV store for metadata management&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Xline&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/hqDRtYkWzm&#34;&gt;&lt;img src=&#34;https://discordapp.com/api/guilds/1110584535248281760/widget.png?style=shield&#34; alt=&#34;Discord Shield&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/datenlord/Xline/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache--2.0-brightgreen&#34; alt=&#34;Apache 2.0 licensed&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/datenlord/xline/actions&#34;&gt;&lt;img src=&#34;https://github.com/datenlord/xline/actions/workflows/ci.yml/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/datenlord/xline&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/datenlord/xline/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Xline&lt;/code&gt; is a geo-distributed KV store for metadata management. It provides the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Etcd compatible API.&lt;/li&gt; &#xA; &lt;li&gt;Geo-distributed friendly deployment.&lt;/li&gt; &#xA; &lt;li&gt;Compatible with K8s.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;With the wide adoption of cloud computing, multi-cloud has become the mainstream IT architecture for enterprise customers. Multi-cloud (or similarly multi-datacenter), however, obstacles data access across different cloud (or data center) providers to some extent. Further, data isolation and data fragmentation resulting from cloud barriers have become impediments to business growth. The biggest challenge of multi-datacenter architecture is how to maintain &lt;strong&gt;strong data consistency&lt;/strong&gt; and ensure &lt;strong&gt;high performance&lt;/strong&gt; in the race condition of multi-datacenter scenario. Traditional single datacenter solutions cannot meet the availability, performance, and consistency requirements of multi-data center scenarios. This project targets the multi-datacenter scenario, aiming to realize a high-performance multi-cloud metadata management solution, which is critical for businesses with geo-distributed and multi-active deployment requirements.&lt;/p&gt; &#xA;&lt;h2&gt;Innovation&lt;/h2&gt; &#xA;&lt;p&gt;Cross-datacenter network latency is the most important factor that impacts the performance of geo-distributed systems, especially when a consensus protocol is used. We know consensus protocols are popular to use to achieve high availability. For instance, Etcd uses the &lt;a href=&#34;https://raft.github.io/&#34;&gt;Raft&lt;/a&gt; protocol, which is quite popular in recently developed systems.&lt;/p&gt; &#xA;&lt;p&gt;Although Raft is stable and easy to implement, it takes 2 RTTs to complete a consensus request from the view of a client. One RTT takes place between the client and the leader server, and the leader server takes another RTT to broadcast the message to the follower servers. In a geo-distributed environment, an RTT is quite long, varying from tens of milliseconds to hundreds of milliseconds, so 2 RTTs are too long in such cases.&lt;/p&gt; &#xA;&lt;p&gt;We adopt a new consensus protocol named &lt;a href=&#34;https://www.usenix.org/system/files/nsdi19-park.pdf&#34;&gt;CURP&lt;/a&gt; to resolve the above issue. Please refer to the paper for a detailed description. The main benefit of the protocol is reducing 1 RTT when contention is not too high. As far as we know, Xline is the first product to use CURP. For more protocol comparison, please refer to the &lt;a href=&#34;https://xline.cloud/#/blog/2023-01-07-CURP%20%E2%80%94%20Revisit-the-Consensus-Protocol&#34;&gt;blog&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Performance Comparison&lt;/h2&gt; &#xA;&lt;p&gt;We compared Xline with Etcd in a simulated multi-cluster environment. The details of the deployment is shown below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xline-kv/Xline/master/img/xline_test_deployment.jpg&#34; alt=&#34;test deployment&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;We compared the performance with two different workloads. One is 1 key case, the other is 100K key space case. Here&#39;s the test result.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xline-kv/Xline/master/img/xline-key-perf.png&#34; alt=&#34;xline key perf&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s easy to tell Xline has a better performance than Etcd in a geo-distributed multi-cluster environment.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Read the document &lt;a href=&#34;https://raw.githubusercontent.com/xline-kv/Xline/master/doc/quick-start/README.md&#34;&gt;QUICK_START.md&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute Guide&lt;/h2&gt; &#xA;&lt;p&gt;Read the document &lt;a href=&#34;https://raw.githubusercontent.com/xline-kv/Xline/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Read the document &lt;a href=&#34;https://raw.githubusercontent.com/xline-kv/Xline/master/CODE_OF_CONDUCT.md&#34;&gt;CODE_OF_CONDUCT.md&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;v0.1 ~ v0.2&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Support all major ETCD APIs&lt;/li&gt; &#xA;   &lt;li&gt;Support configuration file&lt;/li&gt; &#xA;   &lt;li&gt;Pass validation tests (All the supported etcd APIs and their validation test results can be viewed in &lt;a href=&#34;https://raw.githubusercontent.com/xline-kv/Xline/master/VALIDATION_REPORT.md&#34;&gt;VALIDATION_REPORT.md&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;v0.3 ~ v0.5&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Enable persistent storage&lt;/li&gt; &#xA;   &lt;li&gt;Enable snapshot&lt;/li&gt; &#xA;   &lt;li&gt;Enable cluster membership change&lt;/li&gt; &#xA;   &lt;li&gt;Implement a k8s operator basically&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;v0.6 ~ v0.8&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Enable to export metrics to some monitoring and alerting systems&lt;/li&gt; &#xA;   &lt;li&gt;Enable SSL/TLS certificates&lt;/li&gt; &#xA;   &lt;li&gt;Provide clients implementing in different languages, like go, python (not determined). [Note: Although the Xline is etcd-compatible, we provide an Xline specific client SDK to users for better performance. Currently this SDK is only in Rust lang, and we plan to extend it to other languages]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;v1.0 ~&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Enable chaos engineering to validate the system&#39;s stability&lt;/li&gt; &#xA;   &lt;li&gt;Integration with other CNCF components&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>