<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-20T01:30:28Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mon/bad_apple_virus</title>
    <updated>2023-12-20T01:30:28Z</updated>
    <id>tag:github.com,2023-12-20:/mon/bad_apple_virus</id>
    <link href="https://github.com/mon/bad_apple_virus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bad Apple using Windows windows&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bad Apple but it&#39;s a Windows virus&lt;/h1&gt; &#xA;&lt;p&gt;A high-performance (I&#39;ve never seen &lt;em&gt;anything&lt;/em&gt; like this run in realtime before) rendition of Bad Apple, using Windows windows as the video surface.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s not &lt;em&gt;actually&lt;/em&gt; a virus, but it is reminiscent of the viruses of old that were more of a nuisance than anything.&lt;/p&gt; &#xA;&lt;p&gt;Video demonstration:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=EZpZwunMzuE&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/EZpZwunMzuE/0.jpg&#34; alt=&#34;Flandre Scarlet made out of windows&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Why is it so performant?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;DeferWindowPos&lt;/code&gt; - even the most naive of projects can go from 1fps to 15fps by using this wonderful batched API instead of &lt;code&gt;SetWindowPos&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WS_EX_TOOLWINDOW&lt;/code&gt; to remove the taskbar entry&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SWP_NOREDRAW&lt;/code&gt; when moving/resizing windows&lt;/li&gt; &#xA; &lt;li&gt;Optimised code that only shows/hides/moves windows that need showing/hiding/moving&lt;/li&gt; &#xA; &lt;li&gt;Rust is &lt;em&gt;blazing fast&lt;/em&gt;, don&#39;t you know?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Could it be faster?&lt;/h2&gt; &#xA;&lt;p&gt;I suspect that choosing which windows to move/resize, such that each is resized as little as possible, can increase performance - currently, the windows are just used from largest to smallest, which can result in some location jitter as they fit into different indexes.&lt;/p&gt; &#xA;&lt;h2&gt;Future work&lt;/h2&gt; &#xA;&lt;p&gt;All of these I have done already in small tests, but they&#39;re both difficult to make performant (copy dialogs are particularly slow), and difficult to arrange into a pleasing display.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Spawning &lt;code&gt;MessageBoxA&lt;/code&gt; windows and taking their handle (thus avoiding the need to replicate the layout of &lt;code&gt;MessageBoxA&lt;/code&gt; for each version of Windows you run on)&lt;/li&gt; &#xA; &lt;li&gt;Spawning Vista file copy dialogs using &lt;code&gt;IProgressDialog&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Arranging windows in rolling sine waves, circles, etc&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All of these I have not tried yet, but would be great additions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Water physics using hundreds of scroll bars&lt;/li&gt; &#xA; &lt;li&gt;Basic hard-body physics between windows&lt;/li&gt; &#xA; &lt;li&gt;Error noises synced with the audio (could just pre-render...)&lt;/li&gt; &#xA; &lt;li&gt;Notification bubbles&lt;/li&gt; &#xA; &lt;li&gt;Windows in the taskbar to show text (if the user has large taskbar buttons enabled)&lt;/li&gt; &#xA; &lt;li&gt;A large variety of error messages to delight the user with&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building and such&lt;/h2&gt; &#xA;&lt;p&gt;Should be fine to just &lt;code&gt;cargo build --release&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Look at &lt;code&gt;bad apple.py&lt;/code&gt; for the pre-processing to take an input video and turn it into &lt;code&gt;boxes.bin&lt;/code&gt;, a space-optimized representation of the window bounds for each frame. The script is jank, don&#39;t come complaining.&lt;/p&gt;</summary>
  </entry>
</feed>