<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-24T01:44:09Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>letsgetrusty/api-deployment-example</title>
    <updated>2023-07-24T01:44:09Z</updated>
    <id>tag:github.com,2023-07-24:/letsgetrusty/api-deployment-example</id>
    <link href="https://github.com/letsgetrusty/api-deployment-example" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;API Deployment Example&lt;/h1&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; is installed and running&lt;/li&gt; &#xA; &lt;li&gt;Make sure &lt;a href=&#34;https://crates.io/crates/sqlx-cli&#34;&gt;sqlx cli&lt;/a&gt; is installed&lt;/li&gt; &#xA; &lt;li&gt;Create a &lt;code&gt;.env&lt;/code&gt; file. This file will store environment variables. Specifically, &lt;code&gt;DATABASE_URL&lt;/code&gt; and &lt;code&gt;POSTGRES_PASSWORD&lt;/code&gt;. It should look like this: &lt;pre&gt;&lt;code&gt;DATABASE_URL=postgres://postgres:postgrespw@localhost:5432&#xA;POSTGRES_PASSWORD=postgrespw&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;code&gt;NOTE:&lt;/code&gt; When deploying the API, make sure to change the default PostgreSQL password.&lt;/li&gt; &#xA; &lt;li&gt;Update &lt;code&gt;docker-compose.yml&lt;/code&gt; and change &lt;code&gt;letsgetrusty&lt;/code&gt; to your own Docker Hub username.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Run Locally&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run an instance of PostgreSQL. This can be done via Docker: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull postgres&#xA;docker run --name example-db -e POSTGRES_PASSWORD=postgrespw -p 5432:5432 -d postgres&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run SQL migrations: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sqlx migrate run&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Start server: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo run&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Test routes. I like to use &lt;a href=&#34;https://www.postman.com/&#34;&gt;Postman&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Run Locally using Docker&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run API via Docker Compose: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Test routes. I like to use &lt;a href=&#34;https://www.postman.com/&#34;&gt;Postman&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>zkonduit/ezkl</title>
    <updated>2023-07-24T01:44:09Z</updated>
    <id>tag:github.com,2023-07-24:/zkonduit/ezkl</id>
    <link href="https://github.com/zkonduit/ezkl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ezkl is a library and command-line tool for doing inference for deep learning models and other computational graphs in a zk-snark (ZKML)&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;br&gt; &lt;span&gt;üí≠&lt;/span&gt; &lt;br&gt; &lt;br&gt; EZKL &lt;br&gt; &lt;br&gt; &lt;br&gt; &lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Easy Zero-Knowledge Inference&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/zkonduit/ezkl/actions?query=workflow%3ARust&#34;&gt;&lt;img src=&#34;https://github.com/zkonduit/ezkl/workflows/Rust/badge.svg?sanitize=true&#34; alt=&#34;Test&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ezkl&lt;/code&gt; is a library and command-line tool for doing inference for deep learning models and other computational graphs in a zk-snark (ZKML). It enables the following workflow:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Define a computational graph, for instance a neural network (but really any arbitrary set of operations), as you would normally in pytorch or tensorflow.&lt;/li&gt; &#xA; &lt;li&gt;Export the final graph of operations as an &lt;a href=&#34;https://onnx.ai/&#34;&gt;.onnx&lt;/a&gt; file and some sample inputs to a &lt;code&gt;.json&lt;/code&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;Point &lt;code&gt;ezkl&lt;/code&gt; to the &lt;code&gt;.onnx&lt;/code&gt; and &lt;code&gt;.json&lt;/code&gt; files to generate a ZK-SNARK circuit with which you can prove statements such as:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&#34;I ran this publicly available neural network on some private data and it produced this output&#34;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&#34;I ran my private neural network on some public data and it produced this output&#34;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&#34;I correctly ran this publicly available neural network on some public data and it produced this output&#34;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;In the backend we use &lt;a href=&#34;https://github.com/privacy-scaling-explorations/halo2&#34;&gt;Halo2&lt;/a&gt; as a proof system.&lt;/p&gt; &#xA;&lt;p&gt;The generated proofs can then be used on-chain to verify computation, only the Ethereum Virtual Machine (EVM) is supported at the moment.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you have any questions, we&#39;d love for you to open up a discussion topic in &lt;a href=&#34;https://github.com/zkonduit/ezkl/discussions&#34;&gt;Discussions&lt;/a&gt;. Alternatively, you can join the ‚ú®&lt;a href=&#34;https://t.me/+QRzaRvTPIthlYWMx&#34;&gt;EZKL Community Telegram Group&lt;/a&gt;üí´.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;resources üìñ&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.ezkl.xyz&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;the official ezkl docs page&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/drive/1XuXNKqH7axOelZXyU3gpoTOCvFetIsKu?usp=sharing&#34;&gt;colab notebook demo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;demo of ezkl python bindings on google&#39;s colab&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cargo doc --open&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;compile and open the docs in your default browser locally&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;tutorials&lt;/h4&gt; &#xA;&lt;p&gt;You can find a range of python based tutorials in the &lt;code&gt;examples/notebooks&lt;/code&gt; section. These all assume you have the &lt;code&gt;ezkl&lt;/code&gt; python library installed. If you want the bleeding edge version of the library, you can install it from the &lt;code&gt;main&lt;/code&gt; branch with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m venv .env&#xA;source .env/bin/activate&#xA;pip install -r requirements.txt&#xA;maturin develop --release --features python-bindings&#xA;# dependencies specific to tutorials&#xA;pip install torch pandas numpy seaborn jupyter onnx kaggle py-solc-x web3 librosa tensorflow keras tf2onnx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Getting Started ‚öôÔ∏è&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/45801863/236771676-5bbbbfd1-ba6f-418a-902e-20738ce0e9f0.mp4&#34;&gt;https://user-images.githubusercontent.com/45801863/236771676-5bbbbfd1-ba6f-418a-902e-20738ce0e9f0.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;building the project üî®&lt;/h3&gt; &#xA;&lt;p&gt;Note that the library requires a nightly version of the rust toolchain. You can change the default toolchain by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rustup override set nightly&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After which you may build the library&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A folder &lt;code&gt;./target/release&lt;/code&gt; will be generated. Add this folder to your PATH environment variable to call &lt;code&gt;ezkl&lt;/code&gt; from the CLI.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# For UNIX like systems&#xA;# in .bashrc, .bash_profile, or some other path file&#xA;export PATH=&#34;&amp;lt;replace with where you cloned the repo&amp;gt;/ezkl/target/release:$PATH&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Restart your shell or reload your shell settings&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# example, replace .bash_profile with the file you use to configure your shell&#xA;source ~/.bash_profile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will need a functioning installation of &lt;code&gt;solc&lt;/code&gt; in order to run &lt;code&gt;ezkl&lt;/code&gt; properly. &lt;a href=&#34;https://github.com/crytic/solc-select&#34;&gt;solc-select&lt;/a&gt; is recommended. Follow the instructions on &lt;a href=&#34;https://github.com/crytic/solc-select&#34;&gt;solc-select&lt;/a&gt; to activate &lt;code&gt;solc&lt;/code&gt; in your environment.&lt;/p&gt; &#xA;&lt;h3&gt;Repos&lt;/h3&gt; &#xA;&lt;p&gt;The EZKL project has several libraries and repos.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Repo&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/zkonduit/ezkl&#34;&gt;@zkonduit/ezkl&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;the main ezkl repo in rust with wasm and python bindings&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/zkonduit/pyezkl&#34;&gt;@zkonduit/pyezkl&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;additional functionality written in python to support data science and zero knowledge applications&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Contributing üåé&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re interested in contributing and are unsure where to start, reach out to one of the maintainers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;dante (alexander-camuto)&lt;/li&gt; &#xA; &lt;li&gt;jason (jasonmorton)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More broadly:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;See currently open issues for ideas on how to contribute.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For PRs we use the &lt;a href=&#34;https://www.conventionalcommits.org/en/v1.0.0/&#34;&gt;conventional commits&lt;/a&gt; naming convention.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To report bugs or request new features &lt;a href=&#34;https://github.com/zkonduit/ezkl/issues&#34;&gt;create a new issue within Issues&lt;/a&gt; to inform the greater community.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you shall be licensed to Zkonduit Inc. under the terms and conditions specified in the &lt;a href=&#34;https://github.com/zkonduit/ezkl/raw/main/cla.md&#34;&gt;CLA&lt;/a&gt;, which you agree to by intentionally submitting a contribution. In particular, you have the right to submit the contribution and we can distribute it under the Apache 2.0 license, among other terms and conditions.&lt;/p&gt; &#xA;&lt;h2&gt;No security guarantees&lt;/h2&gt; &#xA;&lt;p&gt;Ezkl is unaudited, beta software undergoing rapid development. There may be bugs. No guarantees of security are made and it should not be relied on in production.&lt;/p&gt;</summary>
  </entry>
</feed>