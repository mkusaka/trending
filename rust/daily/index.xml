<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-21T01:37:23Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cloudwego/sonic-rs</title>
    <updated>2023-10-21T01:37:23Z</updated>
    <id>tag:github.com,2023-10-21:/cloudwego/sonic-rs</id>
    <link href="https://github.com/cloudwego/sonic-rs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fast Rust JSON library based on SIMD.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;sonic-rs&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crates.io/crates/sonic-rs&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/sonic-rs&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/sonic-rs&#34;&gt;&lt;img src=&#34;https://docs.rs/sonic-rs/badge.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.cloudwego.io/&#34;&gt;&lt;img src=&#34;https://img.shields.io/website?up_message=cloudwego&amp;amp;url=https%3A%2F%2Fwww.cloudwego.io%2F&#34; alt=&#34;Website&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/cloudwego/sonic-rs/main/#license&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/l/sonic-rs&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/cloudwego/sonic-rs/actions&#34;&gt;&lt;img src=&#34;https://github.com/cloudwego/sonic-rs/actions/workflows/ci.yaml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/cloudwego/sonic-rs/main/README_ZH.md&#34;&gt;中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A fast Rust JSON library based on SIMD. It has some references to other open-source libraries like &lt;a href=&#34;https://github.com/bytedance/sonic-cpp&#34;&gt;sonic_cpp&lt;/a&gt;, &lt;a href=&#34;https://github.com/serde-rs/json&#34;&gt;serde_json&lt;/a&gt;, &lt;a href=&#34;https://github.com/bytedance/sonic&#34;&gt;sonic&lt;/a&gt;, &lt;a href=&#34;https://github.com/simdjson/simdjson&#34;&gt;simdjson&lt;/a&gt;, &lt;a href=&#34;https://github.com/rust-lang/rust/tree/master/library/core/src/num&#34;&gt;rust-std&lt;/a&gt; and more.&lt;/p&gt; &#xA;&lt;p&gt;The main optimization in sonic-rs is the use of SIMD. However, we do not use the two-stage SIMD algorithms from &lt;code&gt;simd-json&lt;/code&gt;. We primarily use SIMD in the following scenarios:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;parsing/serialize long JSON strings&lt;/li&gt; &#xA; &lt;li&gt;parsing the fraction of float number&lt;/li&gt; &#xA; &lt;li&gt;Getting a specific elem or field from JSON&lt;/li&gt; &#xA; &lt;li&gt;Skipping white spaces when parsing JSON&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;More details about optimization can be found in &lt;a href=&#34;https://raw.githubusercontent.com/cloudwego/sonic-rs/main/docs/performance.md&#34;&gt;performance.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements/Notes&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Support x86_64 or aarch64. Note that the performance in aarch64 is lower and needs optimization.&lt;/li&gt; &#xA; &lt;li&gt;Requires Rust nightly version, as we use the &lt;code&gt;packed_simd&lt;/code&gt; crate.&lt;/li&gt; &#xA; &lt;li&gt;Does NOT validate the UTF-8 when parsing from a slice by default. You can use the &lt;code&gt;utf8&lt;/code&gt; feature to enable validation. The performance loss is about 3% ~ 10%.&lt;/li&gt; &#xA; &lt;li&gt;When using &lt;code&gt;get_from&lt;/code&gt;, &lt;code&gt;get_many&lt;/code&gt;, &lt;code&gt;JsonIter&lt;/code&gt; or &lt;code&gt;RawValue&lt;/code&gt;, &lt;em&gt;&lt;strong&gt;Warn:&lt;/strong&gt;&lt;/em&gt; the JSON should be well-formed and valid.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Serde into Rust struct as &lt;code&gt;serde_json&lt;/code&gt; and &lt;code&gt;serde&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Parse/Serialize JSON for untyped document, which can be mutable.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Get specific fields from a JSON with the blazing performance.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use JSON as a lazy array or object iterator with the blazing performance.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Supprt &lt;code&gt;RawValue&lt;/code&gt;, &lt;code&gt;Number&lt;/code&gt; and &lt;code&gt;RawNumber&lt;/code&gt;(just like Golang&#39;s &lt;code&gt;JsonNumber&lt;/code&gt;) in default.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Quick to use sonic-rs&lt;/h2&gt; &#xA;&lt;p&gt;To ensure that SIMD instruction is used in sonic-rs, you need to add rustflags &lt;code&gt;-C target-cpu=native&lt;/code&gt; and compile on the host machine. For example, Rust flags can be configured in Cargo &lt;a href=&#34;https://raw.githubusercontent.com/cloudwego/sonic-rs/main/.cargo/config&#34;&gt;config&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Choose what features? &lt;code&gt;default&lt;/code&gt;: the fast version that does not validate UTF-8 when parsing for performance. &lt;code&gt;utf8&lt;/code&gt;: provides UTF-8 validation when parsing JSON from a slice.&lt;/p&gt; &#xA;&lt;h2&gt;Benchmark&lt;/h2&gt; &#xA;&lt;p&gt;Benchmarks environemnt:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Architecture:        x86_64&#xA;Model name:          Intel(R) Xeon(R) Platinum 8260 CPU @ 2.40GHz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Benchmarks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Deserialize Struct: Deserialize the JSON into Rust struct. The defined struct and testdata is from [json-benchmark][https://github.com/serde-rs/json-benchmark]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Deseirlize Untyped: Deseialize the JSON into a document&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The serialize benchmarks work in the opposite way.&lt;/p&gt; &#xA;&lt;h3&gt;Deserialize Struct (Enabled utf8 validation)&lt;/h3&gt; &#xA;&lt;p&gt;The benchmark will parse JSON into a Rust struct, and there are no unknown fields in JSON text. All fields are parsed into struct fields in the JSON.&lt;/p&gt; &#xA;&lt;p&gt;Sonic-rs is faster than simd-json because simd-json (Rust) first parses the JSON into a &lt;code&gt;tape&lt;/code&gt;, then parses the &lt;code&gt;tape&lt;/code&gt; into a Rust struct. Sonic-rs directly parses the JSON into a Rust struct, and there are no temporary data structures. The &lt;a href=&#34;https://raw.githubusercontent.com/cloudwego/sonic-rs/main/assets/pngs/&#34;&gt;flamegraph&lt;/a&gt; is profiled in the citm_catalog case.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cargo bench --bench deserialize_struct --features utf8 -- --quiet&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;twitter/sonic_rs::from_slice&#xA;                        time:   [718.60 µs 724.47 µs 731.05 µs]&#xA;twitter/simd_json::from_slice&#xA;                        time:   [1.0325 ms 1.0486 ms 1.0664 ms]&#xA;twitter/serde_json::from_slice&#xA;                        time:   [2.3070 ms 2.3271 ms 2.3506 ms]&#xA;twitter/serde_json::from_str&#xA;                        time:   [1.3797 ms 1.3996 ms 1.4237 ms]&#xA;&#xA;citm_catalog/sonic_rs::from_slice&#xA;                        time:   [1.3413 ms 1.3673 ms 1.3985 ms]&#xA;citm_catalog/simd_json::from_slice&#xA;                        time:   [2.3324 ms 2.4122 ms 2.4988 ms]&#xA;citm_catalog/serde_json::from_slice&#xA;                        time:   [3.0485 ms 3.0965 ms 3.1535 ms]&#xA;citm_catalog/serde_json::from_str&#xA;                        time:   [2.4495 ms 2.4661 ms 2.4836 ms]&#xA;&#xA;canada/sonic_rs::from_slice&#xA;                        time:   [4.3249 ms 4.4713 ms 4.6286 ms]&#xA;canada/simd_json::from_slice&#xA;                        time:   [8.3872 ms 8.5095 ms 8.6519 ms]&#xA;canada/serde_json::from_slice&#xA;                        time:   [6.5207 ms 6.5938 ms 6.6787 ms]&#xA;canada/serde_json::from_str&#xA;                        time:   [6.6534 ms 6.8373 ms 7.0402 ms]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Deserialize Untyped (Enabled utf8 validation)&lt;/h3&gt; &#xA;&lt;p&gt;The benchmark will parse JSON into a document. Sonic-rs seems faster for several reasons:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;There are also no temporary data structures in sonic-rs, as detailed above.&lt;/li&gt; &#xA; &lt;li&gt;Sonic-rs uses a memory arena for the whole document, resulting in fewer memory allocations, better cache-friendliness, and mutability.&lt;/li&gt; &#xA; &lt;li&gt;The JSON object in sonic-rs&#39;s document is actually a vector. Sonic-rs does not build a hashmap.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;cargo bench --bench deserialize_value --features utf8 -- --quiet&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;twitter/sonic_rs_dom::from_slice&#xA;                        time:   [624.60 µs 631.67 µs 639.76 µs]&#xA;twitter/simd_json::slice_to_borrowed_value&#xA;                        time:   [1.2524 ms 1.2784 ms 1.3083 ms]&#xA;twitter/serde_json::from_slice&#xA;                        time:   [4.1991 ms 4.3552 ms 4.5264 ms]&#xA;twitter/serde_json::from_str&#xA;                        time:   [3.0258 ms 3.1086 ms 3.2005 ms]&#xA;twitter/simd_json::slice_to_owned_value&#xA;                        time:   [1.8195 ms 1.8382 ms 1.8583 ms]&#xA;&#xA;citm_catalog/sonic_rs_dom::from_slice&#xA;                        time:   [1.8528 ms 1.8962 ms 1.9452 ms]&#xA;citm_catalog/simd_json::slice_to_borrowed_value&#xA;                        time:   [3.5543 ms 3.6127 ms 3.6814 ms]&#xA;citm_catalog/serde_json::from_slice&#xA;                        time:   [9.0163 ms 9.2052 ms 9.4167 ms]&#xA;citm_catalog/serde_json::from_str&#xA;                        time:   [8.0306 ms 8.1450 ms 8.2843 ms]&#xA;citm_catalog/simd_json::slice_to_owned_value&#xA;                        time:   [4.2538 ms 4.3171 ms 4.3990 ms]&#xA;&#xA;canada/sonic_rs_dom::from_slice&#xA;                        time:   [5.2105 ms 5.2761 ms 5.3474 ms]&#xA;canada/simd_json::slice_to_borrowed_value&#xA;                        time:   [12.557 ms 12.773 ms 13.031 ms]&#xA;canada/serde_json::from_slice&#xA;                        time:   [14.875 ms 15.073 ms 15.315 ms]&#xA;canada/serde_json::from_str&#xA;                        time:   [14.603 ms 14.868 ms 15.173 ms]&#xA;canada/simd_json::slice_to_owned_value&#xA;                        time:   [12.548 ms 12.637 ms 12.737 ms]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Serialize Untyped&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;cargo bench --bench serialize_value -- --quiet&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;We serialize the document into a string. In the following benchmarks, sonic-rs appears faster for the &lt;code&gt;twitter&lt;/code&gt; JSON. The &lt;code&gt;twitter&lt;/code&gt; JSON contains many long JSON strings, which fit well with sonic-rs&#39;s SIMD optimization.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;twitter/sonic_rs::to_string&#xA;                        time:   [380.90 µs 390.00 µs 400.38 µs]&#xA;twitter/serde_json::to_string&#xA;                        time:   [788.98 µs 797.34 µs 807.69 µs]&#xA;twitter/simd_json::to_string&#xA;                        time:   [965.66 µs 981.14 µs 998.08 µs]&#xA;&#xA;citm_catalog/sonic_rs::to_string&#xA;                        time:   [805.85 µs 821.99 µs 841.06 µs]&#xA;citm_catalog/serde_json::to_string&#xA;                        time:   [1.8299 ms 1.8880 ms 1.9498 ms]&#xA;citm_catalog/simd_json::to_string&#xA;                        time:   [1.7356 ms 1.7636 ms 1.7972 ms]&#xA;&#xA;canada/sonic_rs::to_string&#xA;                        time:   [6.5808 ms 6.7082 ms 6.8570 ms]&#xA;canada/serde_json::to_string&#xA;                        time:   [6.4800 ms 6.5747 ms 6.6893 ms]&#xA;canada/simd_json::to_string&#xA;                        time:   [7.3751 ms 7.5690 ms 7.7944 ms]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Serialize Struct&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;cargo bench --bench serialize_struct -- --quiet&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The explanation is as mentioned above.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;twitter/sonic_rs::to_string&#xA;                        time:   [434.03 µs 448.25 µs 463.97 µs]&#xA;twitter/simd_json::to_string&#xA;                        time:   [506.21 µs 515.54 µs 526.35 µs]&#xA;twitter/serde_json::to_string&#xA;                        time:   [719.70 µs 739.97 µs 762.69 µs]&#xA;&#xA;canada/sonic_rs::to_string&#xA;                        time:   [4.6701 ms 4.7481 ms 4.8404 ms]&#xA;canada/simd_json::to_string&#xA;                        time:   [5.8072 ms 5.8793 ms 5.9625 ms]&#xA;canada/serde_json::to_string&#xA;                        time:   [4.5708 ms 4.6281 ms 4.6967 ms]&#xA;&#xA;citm_catalog/sonic_rs::to_string&#xA;                        time:   [624.86 µs 629.54 µs 634.57 µs]&#xA;citm_catalog/simd_json::to_string&#xA;                        time:   [624.10 µs 633.55 µs 644.78 µs]&#xA;citm_catalog/serde_json::to_string&#xA;                        time:   [802.10 µs 814.15 µs 828.10 µs]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get from JSON&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;cargo bench --bench get_from -- --quiet&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The benchmark is getting a specific field from the twitter JSON. In both sonic-rs and gjson, the JSON should be well-formed and valid when using get or get_from. Sonic-rs utilize SIMD to quickly skip unnecessary fields, thus enhancing the performance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;twitter/sonic-rs::get_from_str&#xA;                        time:   [79.432 µs 80.008 µs 80.738 µs]&#xA;twitter/gjson::get      time:   [344.41 µs 351.36 µs 362.03 µs]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Serde into Rust Type&lt;/h3&gt; &#xA;&lt;p&gt;Directly use the &lt;code&gt;Deserialize&lt;/code&gt; or &lt;code&gt;Serialize&lt;/code&gt; trait.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rs&#34;&gt;use sonic_rs::{Deserialize, Serialize}; &#xA;// sonic-rs re-exported them from serde&#xA;// or use serde::{Deserialize, Serialize};&#xA;&#xA;#[derive(Serialize, Deserialize)]&#xA;struct Person {&#xA;    name: String,&#xA;    age: u8,&#xA;    phones: Vec&amp;lt;String&amp;gt;,&#xA;}&#xA;&#xA;fn main() {&#xA;    let data = r#&#34;{&#xA;  &#34;name&#34;: &#34;Xiaoming&#34;,&#xA;  &#34;age&#34;: 18,&#xA;  &#34;phones&#34;: [&#xA;    &#34;+123456&#34;&#xA;  ]&#xA;}&#34;#;&#xA;    let p: Person = sonic_rs::from_str(data).unwrap();&#xA;    assert_eq!(p.age, 18);&#xA;    assert_eq!(p.name, &#34;Xiaoming&#34;);&#xA;    let out = sonic_rs::to_string_pretty(&amp;amp;p).unwrap();&#xA;    assert_eq!(out, data);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get a field from JSON&lt;/h3&gt; &#xA;&lt;p&gt;Get a specific field from a JSON with the &lt;code&gt;pointer&lt;/code&gt; path. The return is a &lt;code&gt;LazyValue&lt;/code&gt;, which is a wrapper of a raw JSON slice. Note that the JSON must be valid and well-formed, otherwise it may return unexpected result.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rs&#34;&gt;use sonic_rs::{get_from_str, pointer, JsonValue, PointerNode};&#xA;&#xA;fn main() {&#xA;    let path = pointer![&#34;a&#34;, &#34;b&#34;, &#34;c&#34;, 1];&#xA;    let json = r#&#34;&#xA;        {&#34;u&#34;: 123, &#34;a&#34;: {&#34;b&#34; : {&#34;c&#34;: [null, &#34;found&#34;]}}}&#xA;    &#34;#;&#xA;    let target = get_from_str(json, path.iter()).unwrap();&#xA;    assert_eq!(target.as_raw_str(), r#&#34;&#34;found&#34;&#34;#);&#xA;    assert_eq!(target.as_str().unwrap(), &#34;found&#34;);&#xA;&#xA;    let path = pointer![&#34;a&#34;, &#34;b&#34;, &#34;c&#34;, &#34;d&#34;];&#xA;    let json = r#&#34;&#xA;        {&#34;u&#34;: 123, &#34;a&#34;: {&#34;b&#34; : {&#34;c&#34;: [null, &#34;found&#34;]}}}&#xA;    &#34;#;&#xA;    // not found from json&#xA;    let target = get_from_str(json, path.iter());&#xA;    assert!(target.is_err());&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Parse and Serialize into untyped Value&lt;/h3&gt; &#xA;&lt;p&gt;Parse a JSON into a document, which is mutable. Be aware that the document is managed by a &lt;code&gt;bump&lt;/code&gt; allocator. It is recommended to convert documents into &lt;code&gt;Object/ObjectMut&lt;/code&gt; or &lt;code&gt;Array/ArrayMut&lt;/code&gt; to make them typed and easier to use.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rs&#34;&gt;use sonic_rs::value::{dom_from_slice, Value};&#xA;use sonic_rs::PointerNode;&#xA;use sonic_rs::{pointer, JsonValue};&#xA;fn main() {&#xA;    let json = r#&#34;{&#xA;        &#34;name&#34;: &#34;Xiaoming&#34;,&#xA;        &#34;obj&#34;: {},&#xA;        &#34;arr&#34;: [],&#xA;        &#34;age&#34;: 18,&#xA;        &#34;address&#34;: {&#xA;            &#34;city&#34;: &#34;Beijing&#34;&#xA;        },&#xA;        &#34;phones&#34;: [&#xA;            &#34;+123456&#34;,&#xA;        ]&#xA;    }&#34;#;&#xA;&#xA;    let mut dom = dom_from_slice(json.as_bytes()).unwrap();&#xA;    // get the value from dom&#xA;    let root = dom.as_value();&#xA;&#xA;    // get key from value&#xA;    let age = root.get(&#34;age&#34;).as_i64();&#xA;    assert_eq!(age.unwrap_or_default(), 18);&#xA;&#xA;    // get by index&#xA;    let first = root[&#34;phones&#34;][0].as_str().unwrap();&#xA;    assert_eq!(first, &#34;+123456&#34;);&#xA;&#xA;    // get by pointer&#xA;    let phones = root.pointer(&amp;amp;pointer![&#34;phones&#34;, 0]);&#xA;    assert_eq!(phones.as_str().unwrap(), &#34;+123456&#34;);&#xA;&#xA;    // convert to mutable object&#xA;    let mut obj = dom.as_object_mut().unwrap();&#xA;    let value = Value::new_bool(true);&#xA;    obj.insert(&#34;inserted&#34;, value);&#xA;    assert!(obj.contains_key(&#34;inserted&#34;));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;JSON Iterator&lt;/h3&gt; &#xA;&lt;p&gt;Parse a object or array JSON into a iterator. The &lt;code&gt;item&lt;/code&gt; of iterator is the &lt;code&gt;LazyValue&lt;/code&gt;, which is wrapper of a raw JSON slice.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rs&#34;&gt;use bytes::Bytes;&#xA;use sonic_rs::{to_array_iter, JsonValue};&#xA;&#xA;fn main() {&#xA;    let json = Bytes::from(r#&#34;[1, 2, 3, 4, 5, 6]&#34;#);&#xA;    let iter = to_array_iter(&amp;amp;json);&#xA;    for (i, v) in iter.enumerate() {&#xA;        assert_eq!(i + 1, v.as_u64().unwrap() as usize);&#xA;    }&#xA;&#xA;    let json = Bytes::from(r#&#34;[1, 2, 3, 4, 5, 6&#34;#);&#xA;    let mut iter = to_array_iter(&amp;amp;json);&#xA;    for _ in iter.iter() {}&#xA;    // deal with errors when invalid json&#xA;    let ret = iter.take_result();&#xA;    assert_eq!(&#xA;        ret.as_ref().err().unwrap().to_string(),&#xA;        &#34;Expected this character to be either a &#39;,&#39; or a &#39;]&#39; while parsing at line 1 column 17&#34;&#xA;    );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;JSON RawValue &amp;amp; Number &amp;amp; RawNumber&lt;/h3&gt; &#xA;&lt;p&gt;If we need parse a JSON value as a raw string, we can use &lt;code&gt;RawValue&lt;/code&gt;. If we need parse a JSON number into a untyped type, we can use &lt;code&gt;Number&lt;/code&gt;. If we need parse a JSON number &lt;em&gt;&lt;strong&gt;without loss of percision&lt;/strong&gt;&lt;/em&gt;, we can use &lt;code&gt;RawNumber&lt;/code&gt;. It likes &lt;code&gt;JsonNumber&lt;/code&gt; in Golang, and can also be parsed from a JSON string.&lt;/p&gt; &#xA;&lt;p&gt;Detailed examples can be found in &lt;a href=&#34;https://raw.githubusercontent.com/cloudwego/sonic-rs/main/examples/raw_value.rs&#34;&gt;raw_value.rs&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/cloudwego/sonic-rs/main/examples/json_number.rs&#34;&gt;json_number.rs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgement&lt;/h2&gt; &#xA;&lt;p&gt;Thanks the following open-source libraries. sonic-rs has some references to other open-source libraries like &lt;a href=&#34;https://github.com/bytedance/sonic-cpp&#34;&gt;sonic_cpp&lt;/a&gt;, &lt;a href=&#34;https://github.com/serde-rs/json&#34;&gt;serde_json&lt;/a&gt;, &lt;a href=&#34;https://github.com/bytedance/sonic&#34;&gt;sonic&lt;/a&gt;, &lt;a href=&#34;https://github.com/simdjson/simdjson&#34;&gt;simdjson&lt;/a&gt;, &lt;a href=&#34;https://github.com/ibireme/yyjson&#34;&gt;yyjson&lt;/a&gt;, &lt;a href=&#34;https://github.com/rust-lang/rust/tree/master/library/core/src/num&#34;&gt;rust-std&lt;/a&gt; and so on.&lt;/p&gt; &#xA;&lt;p&gt;We rewrote many SIMD algorithms from sonic-cpp/sonic/simdjson/yyjson for performance. We reused the de/ser codes and modified necessary parts from serde_json to make high compatibility with &lt;code&gt;serde&lt;/code&gt;. We resued part codes about floating parsing from rust-std to make it more accurate.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please read &lt;code&gt;CONTRIBUTING.md&lt;/code&gt; for information on contributing to sonic-rs.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kaii-lb/overskride</title>
    <updated>2023-10-21T01:37:23Z</updated>
    <id>tag:github.com,2023-10-21:/kaii-lb/overskride</id>
    <link href="https://github.com/kaii-lb/overskride" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple yet powerful bluetooth client.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Overskride&lt;/h1&gt; &#xA;&lt;p&gt;A Bluetooth and Obex client that is straight to the point, DE/WM agnostic, and beautiful :D&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kaii-lb/overskride/main/assets/images/overskride.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;How to install&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo systemctl enable --now bluetooth&#xA;curl -sSL https://github.com/kaii-lb/overskride/releases/latest/download/overskride.flatpak -o ~/Downloads/overskride.flatpak&#xA;sudo flatpak install org.gnome.Platform//45 # only if needed&#xA;sudo flatpak install -y ~/Downloads/overskride.flatpak&#xA;rm ~/Downloads/overskride.flatpak&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Nightly releases&lt;/h1&gt; &#xA;&lt;p&gt;available at &lt;a href=&#34;https://github.com/kaii-lb/overskride/actions&#34;&gt;the actions page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Prerequisites for building&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;gtk4 and libadwaita (development packages)&lt;/li&gt; &#xA; &lt;li&gt;rust&lt;/li&gt; &#xA; &lt;li&gt;cargo&lt;/li&gt; &#xA; &lt;li&gt;bluez (should be installed by default on all distros)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Compiling&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/kaii-lb/overskride &amp;amp;&amp;amp; cd overskride&#xA;meson setup build &amp;amp;&amp;amp; cd build&#xA;meson compile &amp;amp;&amp;amp; meson devenv&#xA;mkdir -p ~/.local/share/glib-2.0/schemas&#xA;cp ../data/io.github.kaii_lb.Overskride.gschema.xml ~/.local/share/glib-2.0/schemas&#xA;glib-compile-schemas ~/.local/share/glib-2.0/schemas&#xA;./src/overskride&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;this should be automated later on but oh well&lt;/h6&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dynamically enumerate and list all devices known/in range&lt;/li&gt; &#xA; &lt;li&gt;Authenticating with devices (aka passkey confirmation)&lt;/li&gt; &#xA; &lt;li&gt;Sending/receiving files&lt;/li&gt; &#xA; &lt;li&gt;Connect/disconnect from devices&lt;/li&gt; &#xA; &lt;li&gt;Rename device&lt;/li&gt; &#xA; &lt;li&gt;Trust or block a device&lt;/li&gt; &#xA; &lt;li&gt;Remove device&lt;/li&gt; &#xA; &lt;li&gt;Turn adapter on/off&lt;/li&gt; &#xA; &lt;li&gt;Set discoverable and its timeout&lt;/li&gt; &#xA; &lt;li&gt;Selecting between multiple adapters&lt;/li&gt; &#xA; &lt;li&gt;Rename adapter&lt;/li&gt; &#xA; &lt;li&gt;Resizing support&lt;/li&gt; &#xA; &lt;li&gt;Sorting devices by rssi (signal strength)&lt;/li&gt; &#xA; &lt;li&gt;Showing errors to user&lt;/li&gt; &#xA; &lt;li&gt;Changing files storage location&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;What doesn&#39;t work&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Audio profiles&lt;/li&gt; &#xA; &lt;li&gt;Auto accept files&lt;/li&gt; &#xA; &lt;li&gt;Battery polling over bluetooth&lt;/li&gt; &#xA; &lt;li&gt;Applet support aka system tray&lt;/li&gt; &#xA; &lt;li&gt;Cancelling send file, for some reason&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>mfontanini/presenterm</title>
    <updated>2023-10-21T01:37:23Z</updated>
    <id>tag:github.com,2023-10-21:/mfontanini/presenterm</id>
    <link href="https://github.com/mfontanini/presenterm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A terminal slideshow tool&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;presenterm&lt;/h2&gt; &#xA;&lt;p&gt;A terminal based slideshow tool.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;em&gt;presenterm&lt;/em&gt; lets you define slideshows that run in your terminal.&lt;/p&gt; &#xA;&lt;p&gt;This tool is heavily inspired by &lt;a href=&#34;https://github.com/maaslalani/slides/&#34;&gt;slides&lt;/a&gt; and &lt;a href=&#34;https://github.com/d0c-s4vage/lookatme&#34;&gt;lookatme&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is how the &lt;a href=&#34;https://raw.githubusercontent.com/mfontanini/presenterm/master/examples/demo.md&#34;&gt;demo presentation&lt;/a&gt; looks like:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mfontanini/presenterm/master/assets/demo.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;There&#39;s different ways to install &lt;em&gt;presenterm&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Pre-built binaries&lt;/h2&gt; &#xA;&lt;p&gt;The recommended way to install &lt;em&gt;presenterm&lt;/em&gt; is to download the latest pre-built version for your system from the &lt;a href=&#34;https://github.com/mfontanini/presenterm/releases&#34;&gt;releases&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h2&gt;Install via cargo&lt;/h2&gt; &#xA;&lt;p&gt;Alternatively, download &lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;rust&lt;/a&gt; and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cargo install presenterm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Latest unreleased version&lt;/h2&gt; &#xA;&lt;p&gt;To run the latest unreleased version clone the repo, then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The output binary will be in &lt;code&gt;./target/release/presenterm&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Arch user repository&lt;/h2&gt; &#xA;&lt;p&gt;presenterm is in the aur as well, So if you have any AUR helpers like paru/yay. You can install it as follows&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;paru/yay -S presenterm-bin # for binary&#xA;paru/yay -S presenterm-git # for Building from source&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Nix Flake&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re a Nix user a Nix Flake is available:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;nix run github:mfontanini/presenterm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Define your presentation in a single markdown file.&lt;/li&gt; &#xA; &lt;li&gt;Image rendering support for iterm2, terminals that support the kitty graphics protocol, or sixel.&lt;/li&gt; &#xA; &lt;li&gt;Customize your presentation&#39;s look by defining themes, including colors, margins, layout (left/center aligned content), footer for every slide, etc.&lt;/li&gt; &#xA; &lt;li&gt;Code highlighting for a wide list of programming languages.&lt;/li&gt; &#xA; &lt;li&gt;Configurable &lt;a href=&#34;https://raw.githubusercontent.com/mfontanini/presenterm/master/docs/layouts.md&#34;&gt;column layouts&lt;/a&gt; that let you structure parts of your slide into columns.&lt;/li&gt; &#xA; &lt;li&gt;Support for an introduction slide that displays the presentation title and your name.&lt;/li&gt; &#xA; &lt;li&gt;Support for slide titles.&lt;/li&gt; &#xA; &lt;li&gt;Create pauses in between each slide so that it progressively renders for a more interactive presentation.&lt;/li&gt; &#xA; &lt;li&gt;Text formatting support for &lt;strong&gt;bold&lt;/strong&gt;, &lt;em&gt;italics&lt;/em&gt;, &lt;del&gt;strikethrough&lt;/del&gt;, and &lt;code&gt;inline code&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Automatically reload your presentation every time it changes for a fast development loop.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Hot reload&lt;/h2&gt; &#xA;&lt;p&gt;Unless you run in presentation mode by passing in the &lt;code&gt;--present&lt;/code&gt; parameter, &lt;em&gt;presenterm&lt;/em&gt; will automatically reload your presentation file every time you save it. &lt;em&gt;presenterm&lt;/em&gt; will also automatically detect which specific slide was modified and jump to it so you don&#39;t have to be jumping back and forth between the source markdown and the presentation to see how the changes look like.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/UTestkjb8M8K2mQgf9rDmzDGA&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/UTestkjb8M8K2mQgf9rDmzDGA.svg?sanitize=true&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Slides&lt;/h2&gt; &#xA;&lt;p&gt;Every slide must be separated by an HTML comment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- end_slide --&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This makes it explicit that you want to end the current slide. Other tools use &lt;code&gt;---&lt;/code&gt; instead which is less explicit and also is a valid markdown element which you may use in your presentation.&lt;/p&gt; &#xA;&lt;h2&gt;Pauses&lt;/h2&gt; &#xA;&lt;p&gt;Just like &lt;a href=&#34;https://github.com/d0c-s4vage/lookatme&#34;&gt;lookatme&lt;/a&gt; does, &lt;em&gt;presenterm&lt;/em&gt; allows pauses in between your slide. This lets you have more interactive presentations where pieces of it start popping up as you move forward through it.&lt;/p&gt; &#xA;&lt;p&gt;Similar to slide delimiters, pauses can be created by using the following HTML comment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- pause --&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Images&lt;/h2&gt; &#xA;&lt;p&gt;Images are supported if you&#39;re using iterm2, a terminal the supports the kitty graphics protocol (such as &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/&#34;&gt;kitty&lt;/a&gt;, of course), or one that supports sixel. sixel support requires building &lt;em&gt;presenterm&lt;/em&gt; with the &lt;code&gt;sixel&lt;/code&gt; feature flag, which is disabled by default. You can do this by passing in the &lt;code&gt;--features sixel&lt;/code&gt; parameters when running &lt;code&gt;cargo build&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cargo build --release --features sixel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: this feature flag is only needed if your terminal emulator only supports sixel. Many terminals support the kitty or iterm2 protocols so this isn&#39;t necessary.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Images are rendered &lt;strong&gt;in their default size&lt;/strong&gt;. This means if your terminal window is 100 pixels wide and your image is 50 pixels wide, it will take up 50% of the width. If an image does not fit in the screen, it will be scaled down to fit it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mfontanini/presenterm/master/assets/demo-image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: image rendering is currently not supported on Windows.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Themes&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;presenterm&lt;/em&gt; supports themes so you can customize your presentation&#39;s look. See the &lt;a href=&#34;https://raw.githubusercontent.com/mfontanini/presenterm/master/themes&#34;&gt;built-in themes&lt;/a&gt; as examples on how to customize them.&lt;/p&gt; &#xA;&lt;p&gt;You can define your own themes and make your presentation use it or you can also customize a theme within your presentation by including a front matter at the beginning of your presentation file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---&#xA;theme:&#xA;  # Specify it by name for built-in themes&#xA;  name: my-favorite-theme&#xA;&#xA;  # Otherwise specify the path for it&#xA;  path: /home/myself/themes/epic.yaml&#xA;&#xA;  # Or override parts of the theme right here&#xA;  override:&#xA;    default:&#xA;      colors:&#xA;        foreground: &#34;beeeff&#34;&#xA;---&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that if you&#39;re in the default hot reload mode, overriding your theme will result in those changes being immediately applied to your presentation. This lets you easily test out color schemes quickly without having to close and reopen the application.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/mfontanini/presenterm/master/docs/themes.md&#34;&gt;documentation&lt;/a&gt; on themes to learn more.&lt;/p&gt; &#xA;&lt;h2&gt;Introduction slide&lt;/h2&gt; &#xA;&lt;p&gt;By including a &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;sub_title&lt;/code&gt; and/or &lt;code&gt;author&lt;/code&gt; attribute in your front matter, you can create an introduction slide at the beginning of your presentation to display those:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---&#xA;title: My first presentation&#xA;sub_title: (in presenterm!)&#xA;author: John Doe&#xA;---&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Slide titles&lt;/h2&gt; &#xA;&lt;p&gt;By using &lt;a href=&#34;https://spec.commonmark.org/0.20/#setext-headers&#34;&gt;setext headers&lt;/a&gt; you can create slide titles. These allow you to have a more slide-title-looking slide titles than using regular markdown headers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;My slide title&#xA;---&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: nothing prevents you from using setext headers somewhere in the middle of a slide, which will make them render as slide titles. Not sure why you&#39;d want that but hey, you&#39;re free to do so!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Column layouts&lt;/h2&gt; &#xA;&lt;p&gt;Column layouts allow you to organize content into columns. You can define 2 or more columns, choose how wide you want them to be, and then put any content into them. For example:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mfontanini/presenterm/master/assets/layouts.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/mfontanini/presenterm/master/docs/layouts.md&#34;&gt;documentation&lt;/a&gt; on layouts to learn more.&lt;/p&gt; &#xA;&lt;h2&gt;Navigation&lt;/h2&gt; &#xA;&lt;p&gt;Navigation should be intuitive: jumping to the next/previous slide can be done by using the arrow, &lt;em&gt;hjkl&lt;/em&gt;, and page up/down keys.&lt;/p&gt; &#xA;&lt;p&gt;Besides this:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Jumping to the first slide: &lt;code&gt;gg&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Jumping to the last slide: &lt;code&gt;G&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Jumping to a specific slide: &lt;code&gt;&amp;lt;slide-number&amp;gt;G&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Exit the presentation: &lt;code&gt;&amp;lt;ctrl&amp;gt;c&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Docs&lt;/h1&gt; &#xA;&lt;p&gt;Some docs on how to configure &lt;em&gt;presenterm&lt;/em&gt; and how it works internally can be found &lt;a href=&#34;https://raw.githubusercontent.com/mfontanini/presenterm/master/docs/README.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>