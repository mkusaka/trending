<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-21T01:38:03Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tokio-rs/turmoil</title>
    <updated>2023-08-21T01:38:03Z</updated>
    <id>tag:github.com,2023-08-21:/tokio-rs/turmoil</id>
    <link href="https://github.com/tokio-rs/turmoil" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Add hardship to your tests&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Turmoil&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;This is very experimental&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add hardship to your tests.&lt;/p&gt; &#xA;&lt;p&gt;Turmoil is a framework for testing distributed systems. It provides deterministic execution by running multiple concurrent hosts within a single thread. It introduces &#34;hardship&#34; into the system via changes in the simulated network. The network can be controlled manually or with a seeded rng.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crates.io/crates/turmoil&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/turmoil.svg?sanitize=true&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/turmoil&#34;&gt;&lt;img src=&#34;https://docs.rs/turmoil/badge.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tokio-rs/turmoil/actions?query=workflow%3ACI+branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/tokio-rs/turmoil/actions/workflows/rust.yml/badge.svg?branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.com/channels/500028886025895936/628283075398467594&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/500028886025895936.svg?logo=discord&amp;amp;style=flat-square&#34; alt=&#34;Discord chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Add this to your &lt;code&gt;Cargo.toml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[dev-dependencies]&#xA;turmoil = &#34;0.5&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See crate documentation for simulation setup instructions.&lt;/p&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tokio-rs/turmoil/tree/main/tests&#34;&gt;/tests&lt;/a&gt; for TCP and UDP.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tokio-rs/turmoil/tree/main/examples/grpc&#34;&gt;&lt;code&gt;gRPC&lt;/code&gt;&lt;/a&gt; using &lt;code&gt;tonic&lt;/code&gt; and &lt;code&gt;hyper&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tokio-rs/turmoil/tree/main/examples/axum&#34;&gt;&lt;code&gt;axum&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/tokio-rs/turmoil/main/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Contribution&lt;/h3&gt; &#xA;&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in &lt;code&gt;turmoil&lt;/code&gt; by you, shall be licensed as MIT, without any additional terms or conditions.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mstange/samply</title>
    <updated>2023-08-21T01:38:03Z</updated>
    <id>tag:github.com,2023-08-21:/mstange/samply</id>
    <link href="https://github.com/mstange/samply" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Command-line sampling profiler for macOS and Linux&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;samply&lt;/h1&gt; &#xA;&lt;p&gt;samply is a command line CPU profiler which uses the &lt;a href=&#34;https://profiler.firefox.com/&#34;&gt;Firefox profiler&lt;/a&gt; as its UI.&lt;/p&gt; &#xA;&lt;p&gt;At the moment it runs on macOS and Linux. Windows support is planned. samply is still under development and far from finished, but works quite well already.&lt;/p&gt; &#xA;&lt;p&gt;Give it a try:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% cargo install samply&#xA;% samply record ./your-command your-arguments&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This spawns &lt;code&gt;./your-command your-arguments&lt;/code&gt; in a subprocess and records a profile of its execution. When the command finishes, samply opens &lt;a href=&#34;https://profiler.firefox.com/&#34;&gt;profiler.firefox.com&lt;/a&gt; in your default browser, loads the recorded profile in it, and starts a local webserver which serves symbol information and source code.&lt;/p&gt; &#xA;&lt;p&gt;Then you can inspect the profile. And you can upload it.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example: &lt;a href=&#34;https://share.firefox.dev/3j3PJoK&#34;&gt;https://share.firefox.dev/3j3PJoK&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a profile of &lt;a href=&#34;https://github.com/mozilla/dump_syms&#34;&gt;dump_syms&lt;/a&gt;, running on macOS, recorded as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;samply record ./dump_syms ~/mold-opt-libxul.so &amp;gt; /dev/null&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can see which functions were running for how long. You can see flame graphs and timelines. You can double-click functions in the call tree to open the source view, and see which lines of code were sampled how many times.&lt;/p&gt; &#xA;&lt;p&gt;All data is kept locally (on disk and in RAM) until you choose to upload your profile.&lt;/p&gt; &#xA;&lt;p&gt;samply is a sampling profiler and collects stack traces, per thread, at some sampling interval (the default 1000Hz, i.e. 1ms). On macOS, both on- and off-cpu samples are collected (so you can see under which stack you were blocking on a lock, for example). On Linux, only on-cpu samples are collected at the moment.&lt;/p&gt; &#xA;&lt;p&gt;On Linux, samply needs access to performance events system for unprivileged users. For this, you can either:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;if using Linux 5.8 or later, set the &lt;code&gt;CAP_PERFMON&lt;/code&gt; capability as effective and permitted for samply (recommended):&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sudo setcap &#39;cap_perfmon+ep&#39; `which samply`&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;allow use of (almost) all events by changing the &lt;code&gt;perf_event_paranoid&lt;/code&gt; kernel variable (not recommended):&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sudo sysctl kernel.perf_event_paranoid=-1 &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you still get a &lt;code&gt;mmap failed&lt;/code&gt; error (an &lt;code&gt;EPERM&lt;/code&gt;), you might also need to increase the &lt;code&gt;mlock&lt;/code&gt; limit, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo sysctl kernel.perf_event_mlock_kb=2048&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a profile from &lt;code&gt;samply record rustup check&lt;/code&gt;: &lt;a href=&#34;https://share.firefox.dev/3hteKZZ&#34;&gt;https://share.firefox.dev/3hteKZZ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ll add some Linux examples when I get a chance.&lt;/p&gt; &#xA;&lt;h2&gt;Turn on debug info for full stacks&lt;/h2&gt; &#xA;&lt;p&gt;If you profile Rust code, make sure to profile a binary which was compiled &lt;strong&gt;in release mode&lt;/strong&gt; and &lt;strong&gt;with debug info&lt;/strong&gt;. This will give you inline stacks and a working source code view.&lt;/p&gt; &#xA;&lt;p&gt;The best way is the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a global cargo profile called &lt;code&gt;profiling&lt;/code&gt;, see below how.&lt;/li&gt; &#xA; &lt;li&gt;Compile with &lt;code&gt;cargo build --profile profiling&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Record with &lt;code&gt;samply record ./target/profiling/yourrustprogram&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To create the &lt;code&gt;profiling&lt;/code&gt; cargo profile, create a text file at &lt;code&gt;~/.cargo/config.toml&lt;/code&gt; with the following content:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[profile.profiling]&#xA;inherits = &#34;release&#34;&#xA;debug = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similar advice applies to other compiled languages. For C++, you&#39;ll want to make sure the &lt;code&gt;-g&lt;/code&gt; flag is included in the compiler invocation.&lt;/p&gt; &#xA;&lt;h2&gt;Known issues&lt;/h2&gt; &#xA;&lt;p&gt;On macOS, samply cannot profile system commands, such as the &lt;code&gt;sleep&lt;/code&gt; command or system &lt;code&gt;python&lt;/code&gt;. This is because system executables are signed in such a way that they block the &lt;code&gt;DYLD_INSERT_LIBRARIES&lt;/code&gt; environment variable, which breaks samply&#39;s ability to siphon out the &lt;code&gt;mach_port&lt;/code&gt; of the process.&lt;/p&gt; &#xA;&lt;p&gt;But you can profile any binaries that you&#39;ve compiled yourself, or which are unsigned or locally-signed (such as anything installed by &lt;code&gt;cargo install&lt;/code&gt; or by &lt;a href=&#34;https://raw.githubusercontent.com/mstange/samply/main/brew.sh&#34;&gt;Homebrew&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under either of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apache License, Version 2.0 (&lt;a href=&#34;https://raw.githubusercontent.com/mstange/samply/main/LICENSE-APACHE&#34;&gt;&lt;code&gt;LICENSE-APACHE&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;MIT license (&lt;a href=&#34;https://raw.githubusercontent.com/mstange/samply/main/LICENSE-MIT&#34;&gt;&lt;code&gt;LICENSE-MIT&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;at your option.&lt;/p&gt; &#xA;&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.&lt;/p&gt;</summary>
  </entry>
</feed>