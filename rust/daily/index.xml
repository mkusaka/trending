<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-17T01:44:45Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>floneum/floneum</title>
    <updated>2023-07-17T01:44:45Z</updated>
    <id>tag:github.com,2023-07-17:/floneum/floneum</id>
    <link href="https://github.com/floneum/floneum" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A graph editor for local AI workflows&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Floneum&lt;/h1&gt; &#xA;&lt;p&gt;Floneum is a graph editor for AI workflows with a focus on community made plugins, local AI and safety.&lt;/p&gt; &#xA;&lt;img width=&#34;1512&#34; alt=&#34;Screenshot 2023-06-18 at 4 26 11 PM&#34; src=&#34;https://github.com/Demonthos/floneum/assets/66571940/c60d621d-72b9-423c-b1d5-57cdb737e449&#34;&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visual interface: You can use Floneum without any knowledge of programming. The visual graph editor makes it easy to combine community made plugins with local AI models&lt;/li&gt; &#xA; &lt;li&gt;Instantly run local large language models: Floneum does not require any external dependencies or even a GPU to run. It uses &lt;a href=&#34;https://github.com/rustformers/llm&#34;&gt;llm&lt;/a&gt; to run large language models locally. Because of this, you can run Floneum with your data without worrying about privacy&lt;/li&gt; &#xA; &lt;li&gt;Plugins: By combining large language models with plugins, you can improve their performance and make models work better for your specific use case. All plugins run in an isolated environment so you don&#39;t need to trust any plugins you load. Plugins can only interact with their environment in a safe way&lt;/li&gt; &#xA; &lt;li&gt;Multi-language plugins: Plugins can use in any language that supports web assembly. In addition to the API that can be accessed in any language, Floneum has a rust wrapper with ergonomic macros that make it simple to create plugins&lt;/li&gt; &#xA; &lt;li&gt;Controlled text generation: Plugins can control the output of the large language models with a process similar to jsonformer or guidance. This allows plugins to force models to output valid json, or any other structure they define. This can be useful when communicating between a language model and a typed API&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are looking to use Floneum, you can read the &lt;a href=&#34;https://floneum.com/docs/user/&#34;&gt;User Documentation&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are looking to develop plugins for Floneum, you can read the &lt;a href=&#34;https://floneum.com/docs/developer/&#34;&gt;Developer Documentation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;If you are interested in Floneum, you can join the &lt;a href=&#34;https://discord.gg/dQdmhuB8q5&#34;&gt;discord&lt;/a&gt; to discuss the project and get help.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Report issues on our &lt;a href=&#34;https://github.com/floneum/floneum/issues&#34;&gt;issue tracker&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Help other users in the Floneum discord&lt;/li&gt; &#xA; &lt;li&gt;If you are interested in contributing, reach out on discord&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>andreabergia/rjvm</title>
    <updated>2023-07-17T01:44:45Z</updated>
    <id>tag:github.com,2023-07-17:/andreabergia/rjvm</id>
    <link href="https://github.com/andreabergia/rjvm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A tiny JVM written in Rust. Learning project&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RJVM&lt;/h1&gt; &#xA;&lt;p&gt;This project is an attempt to write a minimal JVM 7 using Rust.&lt;/p&gt; &#xA;&lt;p&gt;Important note: &lt;strong&gt;this is a hobby project, built for fun and for learning purposes&lt;/strong&gt;. In particular, it is my first real program in Rust and I&#39;ve used to learn the language - thus, I&#39;m sure some parts of the code are not very &#34;idiomatic&#34; Rust since I&#39;m just learning the language.&lt;/p&gt; &#xA;&lt;p&gt;The code quality is definitely not production ready - there are not enough tests, there isn&#39;t enough documentation and some of the initial decision should be revisited. (I.e.: this is not representative of the code I write for work ðŸ˜Š.)&lt;/p&gt; &#xA;&lt;p&gt;The code is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/andreabergia/rjvm/main/LICENSE&#34;&gt;Apache v2 license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What has been implemented and what hasn&#39;t&lt;/h2&gt; &#xA;&lt;p&gt;The current code can execute &lt;a href=&#34;https://raw.githubusercontent.com/andreabergia/rjvm/main/vm/tests/resources/rjvm&#34;&gt;various simple programs&lt;/a&gt;, but it has a lot of limitations.&lt;/p&gt; &#xA;&lt;p&gt;Here is a list of the implemented features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;parsing .class files&lt;/li&gt; &#xA; &lt;li&gt;resolving classes from a jar file, or from a folder&lt;/li&gt; &#xA; &lt;li&gt;execution of real code: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;primitive types, arrays, strings&lt;/li&gt; &#xA;   &lt;li&gt;control flow statements&lt;/li&gt; &#xA;   &lt;li&gt;classes, subclasses, interfaces&lt;/li&gt; &#xA;   &lt;li&gt;methods (virtual, static, natives)&lt;/li&gt; &#xA;   &lt;li&gt;exception throwing and catching&lt;/li&gt; &#xA;   &lt;li&gt;stack traces&lt;/li&gt; &#xA;   &lt;li&gt;garbage collection&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;However, there are a lot of important things not implemented (and not planned to):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;generics&lt;/li&gt; &#xA; &lt;li&gt;threading&lt;/li&gt; &#xA; &lt;li&gt;multi dimensional arrays&lt;/li&gt; &#xA; &lt;li&gt;reflection&lt;/li&gt; &#xA; &lt;li&gt;annotations&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.10&#34;&gt;class file verification&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;I/O&lt;/li&gt; &#xA; &lt;li&gt;just in time code execution (JIT)&lt;/li&gt; &#xA; &lt;li&gt;proper class loaders&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The JVM uses the &lt;em&gt;real classes&lt;/em&gt; from &lt;a href=&#34;https://jdk.java.net/java-se-ri/7&#34;&gt;OpenJDK 7&lt;/a&gt; - meaning the classes such as &lt;code&gt;java.lang.Object&lt;/code&gt;, &lt;code&gt;java.lang.String&lt;/code&gt; or &lt;code&gt;java.lang.Exception&lt;/code&gt; are real production classes, without any modifications. The JVM is &#34;good enough&#34; to parse and execute their code, something which makes me very happy indeed. ðŸ˜Š&lt;/p&gt; &#xA;&lt;p&gt;The VM is limited to 64 bits platforms, as there are quite a few places where I assume that the size of a pointer is exactly 8 bytes.&lt;/p&gt; &#xA;&lt;h2&gt;Implementations that should be modified&lt;/h2&gt; &#xA;&lt;p&gt;One poor implementation detail is that for things like stack overflow, accessing an array out of bounds, divisions by zero, etc. I should be throwing real java exceptions, rather than internal errors that will abort executions. In general, the error handling is not great - there are no details when you get an internal error, something that made debugging more painful than it should have been.&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s also quite a few things whose implementation is quite poor, or not really coherent with the JVM specs, but it is &#34;good enough&#34; to execute some simple code; for example I do not have a class for arrays. If you&#39;re curious, look for the TODO in the code.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;m also quite sure there&#39;s a million bugs in the code. ðŸ˜…&lt;/p&gt; &#xA;&lt;h2&gt;Code structure&lt;/h2&gt; &#xA;&lt;p&gt;The code is currently structured in three crates:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;reader&lt;/code&gt;, which is able to read a &lt;code&gt;.class&lt;/code&gt; file and contains various data structures for modelling their content;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vm&lt;/code&gt;, which contains the virtual machine that can execute the code as a library;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vm_cli&lt;/code&gt;, which contains a very simple command-line launcher to run the vm, in the spirit of the &lt;code&gt;java&lt;/code&gt; executable.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are some unit test and some integration tests - definitely not enough, but since this is not production code but just a learning exercise, I&#39;m not that worried about it. Still, IntelliJ tells me I have a bit above 80% of coverage, which is not bad. The error paths aren&#39;t really tested, though.&lt;/p&gt; &#xA;&lt;p&gt;I use &lt;a href=&#34;https://github.com/casey/just&#34;&gt;just&lt;/a&gt; as a command runner, but most tasks are just cargo commands.&lt;/p&gt; &#xA;&lt;h1&gt;Project status and further works&lt;/h1&gt; &#xA;&lt;p&gt;I consider the project complete. It was super instructive, but I do not plan to keep working on it. I do plan to blog about it &lt;a href=&#34;https://andreabergia.com&#34;&gt;on my website&lt;/a&gt;, though!&lt;/p&gt; &#xA;&lt;p&gt;The only think I&#39;m considering is to extract the &lt;code&gt;reader&lt;/code&gt; crate in a separate repository, and publish it on &lt;a href=&#34;https://crates.io/&#34;&gt;crates.io&lt;/a&gt;, since it could actually be useful to someone else.&lt;/p&gt;</summary>
  </entry>
</feed>