<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-16T01:35:25Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>stellar/soroban-example-dapp</title>
    <updated>2023-09-16T01:35:25Z</updated>
    <id>tag:github.com,2023-09-16:/stellar/soroban-example-dapp</id>
    <link href="https://github.com/stellar/soroban-example-dapp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;End-to-End Example Soroban Dapp&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Soroban Crowdfunding Dapp Example&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/stellar/soroban-example-dapp/main/screenshot.png&#34; alt=&#34;Screenshot of the Example Dapp&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a &lt;a href=&#34;https://nextjs.org/&#34;&gt;Next.js&lt;/a&gt; project, demoing how to build a dapp frontend backed by smart contracts on Stellar.&lt;/p&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;h2&gt;Install Dependencies&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;rustc&lt;/code&gt; &amp;gt;= 1.71.0 with the &lt;code&gt;wasm32-unknown-unknown&lt;/code&gt; target installed. See &lt;a href=&#34;https://soroban.stellar.org/docs/getting-started/setup#install-rust&#34;&gt;https://soroban.stellar.org/docs/getting-started/setup#install-rust&lt;/a&gt; . If you have already a lower version, the easiest way to upgrade is to uninstall (&lt;code&gt;rustup self uninstall&lt;/code&gt;) and install it again.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;soroban-cli&lt;/code&gt;. See &lt;a href=&#34;https://soroban.stellar.org/docs/getting-started/setup#install-the-soroban-cli&#34;&gt;https://soroban.stellar.org/docs/getting-started/setup#install-the-soroban-cli&lt;/a&gt;, but instead of &lt;code&gt;cargo install soroban-cli&lt;/code&gt;, run &lt;code&gt;cargo install_soroban&lt;/code&gt;. This is an alias set up in &lt;a href=&#34;https://raw.githubusercontent.com/stellar/soroban-example-dapp/main/.cargo/config.toml&#34;&gt;.cargo/config.toml&lt;/a&gt;, which pins the local soroban-cli to a specific version. If you add &lt;code&gt;./target/bin/&lt;/code&gt; &lt;a href=&#34;https://linuxize.com/post/how-to-add-directory-to-path-in-linux/&#34;&gt;to your PATH&lt;/a&gt;, then you&#39;ll automatically use this version of &lt;code&gt;soroban-cli&lt;/code&gt; when you&#39;re in this directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you want to run everything locally: &lt;code&gt;docker&lt;/code&gt; (you can run both Standalone and Futurenet backends with it)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Node.js v18&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.freighter.app/&#34;&gt;Freighter Wallet&lt;/a&gt; â‰¥&lt;a href=&#34;https://github.com/stellar/freighter/releases/tag/2.9.1&#34;&gt;v5.0.2&lt;/a&gt;. Or from the Firefox / Chrome extension store. Once installed, enable &#34;Experimental Mode&#34; in the settings (gear icon).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you want to skip step (1) and (2) and avoid installing specific &lt;code&gt;rustc&lt;/code&gt; or &lt;code&gt;soroban-cli&lt;/code&gt; versions, build the &lt;code&gt;soroban-preview&lt;/code&gt; docker image:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;make build-docker&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; - Follow the instructions below for Futurenet or Standalone and ensure that you have funded your wallet address that you intend to use from browser, otherwise the dapp display will be blank and a &#39;Account not found&#39; will be printed on browser&#39;s console only.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Run Backend&lt;/h2&gt; &#xA;&lt;p&gt;Make sure to start from a clean setup:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run clean&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You have three options: 1. Deploy on &lt;a href=&#34;https://soroban.stellar.org/docs/getting-started/deploy-to-futurenet&#34;&gt;Futurenet&lt;/a&gt; using a remote &lt;a href=&#34;https://soroban.stellar.org/docs/getting-started/run-rpc&#34;&gt;RPC&lt;/a&gt; endpoint, 2. Run your own Futerenet RPC node with Docker and deploy to it, 3. run in &lt;a href=&#34;https://soroban.stellar.org/docs/getting-started/deploy-to-a-local-network&#34;&gt;localnet/standalone&lt;/a&gt; mode.&lt;/p&gt; &#xA;&lt;h3&gt;Option 1: Deploy on Futurenet&lt;/h3&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure you have soroban-cli installed, as explained above&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Deploy the contracts and initialize them&lt;/p&gt; &lt;pre&gt;&lt;code&gt;npm run setup&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This runs &lt;code&gt;./initialize.sh futurenet&lt;/code&gt; behind the scenes, which will create a &lt;code&gt;token-admin&lt;/code&gt; identity for you (&lt;code&gt;soroban config identity create token-admin&lt;/code&gt;) and deploy a Fungible Token contract as well as the &lt;a href=&#34;https://raw.githubusercontent.com/stellar/soroban-example-dapp/main/contracts/crowdfund&#34;&gt;crowdfund contract&lt;/a&gt;, with this account as admin.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Select the Futurenet network in your Freighter browser extension&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Option 2: Run your own Futurenet node&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the backend docker container with &lt;code&gt;./quickstart.sh futurenet&lt;/code&gt;, and wait for it to start.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This can take up to 5 minutes to start syncing. You can tell it is working by visiting &lt;a href=&#34;http://localhost:8000/&#34;&gt;http://localhost:8000/&lt;/a&gt;, and look at the &lt;code&gt;ingest_latest_ledger&lt;/code&gt;, field. If it is &lt;code&gt;0&lt;/code&gt;, the quickstart image is not ready yet. The quickstart container also prints console statements on start status, it will print &lt;code&gt;soroban rpc: waiting for ready state...&lt;/code&gt; at first and then &lt;code&gt;soroban rpc: up and ready&lt;/code&gt; when network sync has been reached.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Load the contracts and initialize them&lt;/p&gt; &lt;p&gt;Use your own local soroban-cli:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;./initialize.sh futurenet http://localhost:8000&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Or run it inside the soroban-preview docker container:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;docker exec soroban-preview ./initialize.sh futurenet&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the Futurenet custom network in Freighter (Note, the out-of-the-box &#34;Future Net&#34; network in Freighter will not work with a local quickstart container, so we need to add our own):&lt;/p&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;&lt;/th&gt; &#xA;     &lt;th&gt;&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;Name&lt;/td&gt; &#xA;     &lt;td&gt;Futurenet Local RPC&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;URL&lt;/td&gt; &#xA;     &lt;td&gt;&lt;a href=&#34;http://localhost:8000/soroban/rpc&#34;&gt;http://localhost:8000/soroban/rpc&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;Passphrase&lt;/td&gt; &#xA;     &lt;td&gt;Test SDF Future Network ; October 2022&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;Allow HTTP connection&lt;/td&gt; &#xA;     &lt;td&gt;Enabled&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;Switch to this network&lt;/td&gt; &#xA;     &lt;td&gt;Enabled&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add some Futurenet network lumens to your Freighter wallet.&lt;/p&gt; &lt;p&gt;Visit &lt;a href=&#34;https://laboratory.stellar.org/#create-account&#34;&gt;https://laboratory.stellar.org/#create-account&lt;/a&gt;, and follow the instructions to create your freighter account on Futurenet.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Option 3: Localnet/Standalone&lt;/h3&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;If you didn&#39;t yet, build the &lt;code&gt;soroban-preview&lt;/code&gt; docker image, as described above:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;make build-docker&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In one terminal, run the backend docker containers and wait for them to start:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;./quickstart.sh standalone&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You know that it fully started if it goes into a loop publishing &amp;amp; syncing checkpoints.&lt;/p&gt; &lt;p&gt;You can stop this process with &lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Keep that running, then deploy the contracts and initialize them:&lt;/p&gt; &lt;p&gt;You can use your own local soroban-cli:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;NETWORK=standalone npm run setup&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Or run it inside the soroban-preview docker container:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;docker exec soroban-preview ./initialize.sh standalone&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; this state will be lost if the quickstart docker container is removed, which will happen if you stop the &lt;code&gt;quickstart.sh&lt;/code&gt; process. You will need to re-run &lt;code&gt;./initialize.sh&lt;/code&gt; every time you restart the container.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the Standalone custom network in Freighter&lt;/p&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;&lt;/th&gt; &#xA;     &lt;th&gt;&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;Name&lt;/td&gt; &#xA;     &lt;td&gt;Standalone&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;URL&lt;/td&gt; &#xA;     &lt;td&gt;&lt;a href=&#34;http://localhost:8000/soroban/rpc&#34;&gt;http://localhost:8000/soroban/rpc&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;Passphrase&lt;/td&gt; &#xA;     &lt;td&gt;Standalone Network ; February 2017&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;Allow HTTP connection&lt;/td&gt; &#xA;     &lt;td&gt;Enabled&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;Switch to this network&lt;/td&gt; &#xA;     &lt;td&gt;Enabled&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add some Standalone network lumens to your Freighter wallet.&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Copy the address for your freighter wallet.&lt;/li&gt; &#xA;   &lt;li&gt;Visit &lt;code&gt;http://localhost:8000/friendbot?addr=&amp;lt;your address&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Frontend&lt;/h2&gt; &#xA;&lt;p&gt;Now that you&#39;re running the backend, you can run the development server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; with your browser to see the result.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Before you can &#34;Back this project&#34;, you&#39;ll need to have some EXT (example token) in your freighter wallet. There is a &#34;Mint 100 EXT&#34; button, which will gift you 100 EXT tokens for that purpose.&lt;/p&gt; &#xA;&lt;h1&gt;User Workflows&lt;/h1&gt; &#xA;&lt;p&gt;The contract dev should be able to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone the example repo (this one)&lt;/li&gt; &#xA; &lt;li&gt;Choose their target amount and deadline&lt;/li&gt; &#xA; &lt;li&gt;Deploy their contract to futurenet&lt;/li&gt; &#xA; &lt;li&gt;Deploy a soroban rpc server somewhere (TBD)&lt;/li&gt; &#xA; &lt;li&gt;Deploy the example web ui somewhere (e.g. netlify)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then via the web UI, users should be able to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Connect their wallet (freighter for now)&lt;/li&gt; &#xA; &lt;li&gt;See their current balance(s)&lt;/li&gt; &#xA; &lt;li&gt;See the current fundraising status (total amount &amp;amp; time remaining)&lt;/li&gt; &#xA; &lt;li&gt;See allowed assets (xlm-only for now?)&lt;/li&gt; &#xA; &lt;li&gt;Deposit an allowed asset&lt;/li&gt; &#xA; &lt;li&gt;See their deposit(s) appear on the page as the transactions are confirmed.&lt;/li&gt; &#xA; &lt;li&gt;&#34;Live&#34;-Update the page with the total amount with the new amount&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>CloudCannon/pagefind</title>
    <updated>2023-09-16T01:35:25Z</updated>
    <id>tag:github.com,2023-09-16:/CloudCannon/pagefind</id>
    <link href="https://github.com/CloudCannon/pagefind" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Static low-bandwidth search at scale&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Pagefind&lt;/h1&gt; &#xA;&lt;p&gt;Pagefind is a fully static search library that aims to perform well on large sites, while using as little of your usersâ€™ bandwidth as possible, and without hosting any infrastructure.&lt;/p&gt; &#xA;&lt;p&gt;The full documentation on using Pagefind can be found at &lt;a href=&#34;https://pagefind.app/&#34;&gt;https://pagefind.app/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>