<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-05T01:38:54Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>huytd/goxkey</title>
    <updated>2023-10-05T01:38:54Z</updated>
    <id>tag:github.com,2023-10-05:/huytd/goxkey</id>
    <link href="https://github.com/huytd/goxkey" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bộ gõ tiếng Việt không có chức năng gì ngoài gõ tiếng Việt...&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/huytd/goxkey/main/icons/icon.png&#34; width=&#34;90px&#34;&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;img width=&#34;320&#34; alt=&#34;image&#34; align=&#34;right&#34; src=&#34;https://user-images.githubusercontent.com/613943/213217673-e58c873a-9219-4a33-8487-620a07210206.png&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/huytd/goxkey/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://github.com/huytd/goxkey/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;Build and Tests&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Gõkey&lt;/strong&gt; - A Vietnamese input method editor.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;⚡&lt;/span&gt; Excellent performance (Gen Z translation: Blazing fast!)&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🦀&lt;/span&gt; Written completely in Rust.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;⌨&lt;/span&gt; Supported both Telex and VNI input method.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✨&lt;/span&gt; Focused on typing experience and features that you will use.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;This is my attempt to build an input method editor using only Rust. It&#39;s not the first, and definitely not the last.&lt;/p&gt; &#xA;&lt;p&gt;The goal is to create an input method editor that enable users to type Vietnamese text on the computer using either VNI or TELEX method. Other than that, no other features are planned.&lt;/p&gt; &#xA;&lt;h2&gt;How to install&lt;/h2&gt; &#xA;&lt;p&gt;There are 2 options to download GõKey at this moment: Build from source or Download the Nightly build.&lt;/p&gt; &#xA;&lt;h3&gt;Option 1: Download the Nightly Build&lt;/h3&gt; &#xA;&lt;p&gt;Nightly build is the prebuilt binary that automatically bundled everytime we merged the code to the &lt;code&gt;main&lt;/code&gt; branch.&lt;/p&gt; &#xA;&lt;p&gt;You can download it at the Release page here: &lt;a href=&#34;https://github.com/huytd/goxkey/releases/tag/nightly-build&#34;&gt;https://github.com/huytd/goxkey/releases/tag/nightly-build&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Option 2: Build from source&lt;/h3&gt; &#xA;&lt;p&gt;The source code can be compiled easily:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Get the latest stable version of the Rust compiler (&lt;a href=&#34;https://rustup.rs/&#34;&gt;see here&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the &lt;a href=&#34;https://github.com/burtonageo/cargo-bundle&#34;&gt;cargo-bundle&lt;/a&gt; extension, this is necessary for bundling macOS apps&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Checkout the source code of the &lt;strong&gt;gõkey&lt;/strong&gt; project&lt;/p&gt; &lt;pre&gt;&lt;code&gt;git clone https://github.com/huytd/goxkey &amp;amp;&amp;amp; cd goxkey&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the bundle command:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cargo bundle&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;After that, you&#39;ll find the &lt;code&gt;Gõ Key.app&lt;/code&gt; file in the &lt;code&gt;target/debug/bundle&lt;/code&gt; folder. Copy it to your &lt;code&gt;/Applications&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;(Important!):&lt;/strong&gt; Before you run the app, make you you already allowed Accessibility access for the app. Follow the &lt;a href=&#34;https://github.com/huytd/goxkey/wiki/H%C6%B0%E1%BB%9Bng-d%E1%BA%ABn-s%E1%BB%ADa-l%E1%BB%97i-kh%C3%B4ng-g%C3%B5-%C4%91%C6%B0%E1%BB%A3c-ti%E1%BA%BFng-Vi%E1%BB%87t-tr%C3%AAn-macOS&#34;&gt;guide in the Wiki&lt;/a&gt; to do so.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Without this step, the app will crash and can&#39;t be use.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/core-foundation&#34;&gt;core-foundation&lt;/a&gt;, &lt;a href=&#34;https://crates.io/crates/core-graphics&#34;&gt;core-graphics&lt;/a&gt;: for event handling on macOS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zerox-dg/vi-rs&#34;&gt;vi-rs&lt;/a&gt;: the Vietnamese Input Engine&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Want to support the project?&lt;/h2&gt; &#xA;&lt;p&gt;It would be much appreciated if you want to make a small donation to support my work!&lt;/p&gt; &#xA;&lt;p&gt;Your name will be put on a special place in the application as a thank you gesture from the development team!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ko-fi.com/B0B6NHSJ&#34;&gt;&lt;img src=&#34;https://ko-fi.com/img/githubbutton_sm.svg?sanitize=true&#34; alt=&#34;ko-fi&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>orhun/daktilo</title>
    <updated>2023-10-05T01:38:54Z</updated>
    <id>tag:github.com,2023-10-05:/orhun/daktilo</id>
    <link href="https://github.com/orhun/daktilo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Turn your keyboard into a typewriter! 📇&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/orhun/daktilo&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/orhun/daktilo/main/assets/daktilo-logo.png&#34; width=&#34;400&#34;&gt; &lt;/a&gt; &#xA; &lt;h4&gt;Turn your keyboard into a typewriter! 📇&lt;/h4&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/orhun/daktilo/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/orhun/daktilo?style=flat&amp;amp;labelColor=1D272B&amp;amp;color=819188&amp;amp;logo=GitHub&amp;amp;logoColor=white&#34; alt=&#34;GitHub Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/daktilo/&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/daktilo?style=flat&amp;amp;labelColor=1D272B&amp;amp;color=819188&amp;amp;logo=Rust&amp;amp;logoColor=white&#34; alt=&#34;Crate Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/orhun/daktilo&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/gh/orhun/daktilo?style=flat&amp;amp;labelColor=1D272B&amp;amp;color=819188&amp;amp;logo=Codecov&amp;amp;logoColor=white&#34; alt=&#34;Coverage&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/orhun/daktilo/actions?query=workflow%3A%22Continuous+Integration%22&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/orhun/daktilo/ci.yml?branch=main&amp;amp;style=flat&amp;amp;labelColor=1D272B&amp;amp;color=819188&amp;amp;logo=GitHub%20Actions&amp;amp;logoColor=white&#34; alt=&#34;Continuous Integration&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/orhun/daktilo/actions?query=workflow%3A%22Release%22&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/orhun/daktilo/release.yml?style=flat&amp;amp;labelColor=1D272B&amp;amp;color=819188&amp;amp;logo=GitHub%20Actions&amp;amp;logoColor=white&amp;amp;label=release&#34; alt=&#34;Continuous Deployment&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/daktilo/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docsrs/daktilo?style=flat&amp;amp;labelColor=1D272B&amp;amp;color=819188&amp;amp;logo=Rust&amp;amp;logoColor=white&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;video src=&#34;https://github.com/orhun/daktilo/assets/24392180/b2b0d9c5-422f-401d-a25d-e6bc797d8976&#34; alt=&#34;daktilo demo&#34;&gt; &#xA; &lt;/video&gt;&#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;strong&gt;daktilo&lt;/strong&gt; (&#34;typewriter&#34; in Turkish, pronounced &lt;em&gt;&#34;duck-til-oh&#34;&lt;/em&gt;, derived from the Ancient Greek word &lt;a href=&#34;https://lsj.gr/wiki/%CE%B4%CE%AC%CE%BA%CF%84%CF%85%CE%BB%CE%BF%CF%82&#34;&gt;δάκτυλος&lt;/a&gt; for &#34;finger&#34;) is a small command-line program that plays typewriter sounds every time you press a key. It also offers the flexibility to customize keypress sounds to your liking. You can use the built-in sound presets to create an enjoyable typing experience, whether you&#39;re crafting emails or up to some prank on your boss.&lt;/p&gt; &#xA;&lt;p&gt;✨ Inspiration: &lt;a href=&#34;https://www.youtube.com/watch?v=Bs5TEuZPQl8&#34;&gt;&#34;Taking notes in class with my typewriter&#34;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Now you can recreate this moment without the actual need for a physical typewriter!&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Table of Contents&lt;/summary&gt; &#xA; &lt;!-- vim-markdown-toc GFM --&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/orhun/daktilo/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/orhun/daktilo/main/#supported-platforms&#34;&gt;Supported Platforms&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/orhun/daktilo/main/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/orhun/daktilo/main/#cargo&#34;&gt;Cargo&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/orhun/daktilo/main/#arch-linux&#34;&gt;Arch Linux&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/orhun/daktilo/main/#alpine-linux&#34;&gt;Alpine Linux&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/orhun/daktilo/main/#binary-releases&#34;&gt;Binary releases&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/orhun/daktilo/main/#build-from-source&#34;&gt;Build from source&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/orhun/daktilo/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/orhun/daktilo/main/#configuration&#34;&gt;Configuration&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/orhun/daktilo/main/#adding-custom-presets&#34;&gt;Adding custom presets&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/orhun/daktilo/main/#similar-projects&#34;&gt;Similar Projects&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/orhun/daktilo/main/#acknowledgements&#34;&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/orhun/daktilo/main/#donations&#34;&gt;Donations&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/orhun/daktilo/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/orhun/daktilo/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/orhun/daktilo/main/#copyright&#34;&gt;Copyright&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;!-- vim-markdown-toc --&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Simply run &lt;code&gt;daktilo&lt;/code&gt; for the classic typewriter effect.&lt;/p&gt; &#xA;&lt;p&gt;There are also different presets available:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Preset Name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;default&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;the classic typewriter effect&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;basic&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;an alternative and more basic typewriter effect&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;musicbox&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;plays random notes like a music box&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ducktilo&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;quack quack 🦆&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;drumkit&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;dum, tss, cha! 🥁&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;To list the presets:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;daktilo --list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use a preset:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;daktilo --preset musicbox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Linux &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; X11&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Wayland&lt;a href=&#34;https://github.com/Narsil/rdev#linux&#34;&gt;*&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Windows&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; MacOS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Packaging status&lt;/summary&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://repology.org/project/daktilo/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/vertical-allrepos/daktilo.svg?sanitize=true&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Cargo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;daktilo&lt;/strong&gt; can be installed from &lt;a href=&#34;https://crates.io/crates/daktilo&#34;&gt;crates.io&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo install daktilo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The minimum supported Rust version is &lt;code&gt;1.70.0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On Linux, the following packages should be installed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Arch Linux: &lt;code&gt;alsa-lib libxtst libxi&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Alpine Linux: &lt;code&gt;alsa-lib-dev libxi-dev libxtst-dev&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Debian/Ubuntu: &lt;code&gt;libasound2-dev libxi-dev libxtst-dev&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Arch Linux&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;daktilo&lt;/strong&gt; can be installed from the &lt;a href=&#34;https://archlinux.org/packages/extra/x86_64/daktilo/&#34;&gt;official repositories&lt;/a&gt; using &lt;a href=&#34;https://wiki.archlinux.org/title/Pacman&#34;&gt;pacman&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pacman -S daktilo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Alpine Linux&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;daktilo&lt;/strong&gt; is available for &lt;a href=&#34;https://pkgs.alpinelinux.org/packages?name=daktilo&amp;amp;branch=edge&#34;&gt;Alpine Edge&lt;/a&gt;. It can be installed via &lt;a href=&#34;https://wiki.alpinelinux.org/wiki/Alpine_Package_Keeper&#34;&gt;apk&lt;/a&gt; after enabling the &lt;a href=&#34;https://wiki.alpinelinux.org/wiki/Repositories&#34;&gt;testing repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;apk add daktilo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Binary releases&lt;/h3&gt; &#xA;&lt;p&gt;See the available binaries for different targets from the &lt;a href=&#34;https://github.com/orhun/daktilo/releases&#34;&gt;releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Build from source&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/orhun/daktilo &amp;amp;&amp;amp; cd daktilo/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Build.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;CARGO_TARGET_DIR=target cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Binary will be located at &lt;code&gt;target/release/daktilo&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;daktilo [OPTIONS]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Options&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;-v, --verbose          Enables verbose logging [env: VERBOSE=]&#xA;-p, --preset &amp;lt;PRESET&amp;gt;  Sets the name of the sound preset to use [env: PRESET=]&#xA;-l, --list             Lists the available presets&#xA;-c, --config &amp;lt;PATH&amp;gt;    Sets the configuration file [env: DAKTILO_CONFIG=]&#xA;-i, --init             Writes the default configuration file&#xA;-h, --help             Print help&#xA;-V, --version          Print version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;daktilo&lt;/strong&gt; can be configured with a configuration file using the &lt;a href=&#34;https://en.wikipedia.org/wiki/TOML&#34;&gt;TOML&lt;/a&gt; format.&lt;/p&gt; &#xA;&lt;p&gt;The path of the configuration file can be specified via &lt;code&gt;--config&lt;/code&gt; argument or &lt;code&gt;DAKTILO_CONFIG&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;p&gt;It can also be placed in one of the following global locations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;config_dir&amp;gt;&lt;/code&gt; &lt;code&gt;/&lt;/code&gt; &lt;code&gt;daktilo.toml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;config_dir&amp;gt;&lt;/code&gt; &lt;code&gt;/&lt;/code&gt; &lt;code&gt;daktilo/daktilo.toml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;config_dir&amp;gt;&lt;/code&gt; &lt;code&gt;/&lt;/code&gt; &lt;code&gt;daktilo/config&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;lt;config_dir&amp;gt;&lt;/code&gt; depends on the platform as shown in the following table:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Value&lt;/th&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$XDG_CONFIG_HOME&lt;/code&gt; or &lt;code&gt;$HOME&lt;/code&gt;/.config&lt;/td&gt; &#xA;   &lt;td&gt;/home/orhun/.config&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macOS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$HOME&lt;/code&gt;/Library/Application Support&lt;/td&gt; &#xA;   &lt;td&gt;/Users/Orhun/Library/Application Support&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{FOLDERID_RoamingAppData}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;C:\Users\Orhun\AppData\Roaming&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/orhun/daktilo/main/config/daktilo.toml&#34;&gt;daktilo.toml&lt;/a&gt; for the default configuration options.&lt;/p&gt; &#xA;&lt;p&gt;You can also create the default configuration file in the current directory with &lt;code&gt;--init&lt;/code&gt; flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;daktilo --init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adding custom presets&lt;/h3&gt; &#xA;&lt;p&gt;The configuration file consists of an array of &lt;code&gt;sound_preset&lt;/code&gt; entries.&lt;/p&gt; &#xA;&lt;p&gt;To define an array in TOML, you can create different sections as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[sound_preset]]&#xA;name = &#34;custom&#34;&#xA;key_config = []&#xA;&#xA;[[sound_preset]]&#xA;name = &#34;another_custom&#34;&#xA;key_config = []&#xA;disabled_keys = []&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As shown above, &lt;code&gt;sound_preset&lt;/code&gt; consists of 2 entries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;name&lt;/code&gt;: The name of the preset. It will be used in conjunction with &lt;code&gt;--preset&lt;/code&gt; flag. e.g. &lt;code&gt;--preset custom&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;key_config&lt;/code&gt;: An array of key press/release events for assigning audio files to the specified keys. It can also be used to control the volume etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;disabled_keys&lt;/code&gt;: An array of keys that will not be used for playback.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click for the &lt;a href=&#34;https://docs.rs/rdev/latest/rdev/enum.Key.html&#34;&gt;list of available keys&lt;/a&gt;.&lt;/summary&gt; &#xA; &lt;p&gt;&lt;code&gt;Alt&lt;/code&gt;, &lt;code&gt;AltGr&lt;/code&gt;, &lt;code&gt;Backspace&lt;/code&gt;, &lt;code&gt;CapsLock&lt;/code&gt;, &lt;code&gt;ControlLeft&lt;/code&gt;, &lt;code&gt;ControlRight&lt;/code&gt;, &lt;code&gt;Delete&lt;/code&gt;, &lt;code&gt;DownArrow&lt;/code&gt;, &lt;code&gt;End&lt;/code&gt;, &lt;code&gt;Escape&lt;/code&gt;, &lt;code&gt;F1&lt;/code&gt;, &lt;code&gt;F10&lt;/code&gt;, &lt;code&gt;F11&lt;/code&gt;, &lt;code&gt;F12&lt;/code&gt;, &lt;code&gt;F2&lt;/code&gt;, &lt;code&gt;F3&lt;/code&gt;, &lt;code&gt;F4&lt;/code&gt;, &lt;code&gt;F5&lt;/code&gt;, &lt;code&gt;F6&lt;/code&gt;, &lt;code&gt;F7&lt;/code&gt;, &lt;code&gt;F8&lt;/code&gt;, &lt;code&gt;F9&lt;/code&gt;, &lt;code&gt;Home&lt;/code&gt;, &lt;code&gt;LeftArrow&lt;/code&gt;, &lt;code&gt;MetaLeft&lt;/code&gt;, &lt;code&gt;MetaRight&lt;/code&gt;, &lt;code&gt;PageDown&lt;/code&gt;, &lt;code&gt;PageUp&lt;/code&gt;, &lt;code&gt;Return&lt;/code&gt;, &lt;code&gt;RightArrow&lt;/code&gt;, &lt;code&gt;ShiftLeft&lt;/code&gt;, &lt;code&gt;ShiftRight&lt;/code&gt;, &lt;code&gt;Space&lt;/code&gt;, &lt;code&gt;Tab&lt;/code&gt;, &lt;code&gt;UpArrow&lt;/code&gt;, &lt;code&gt;PrintScreen&lt;/code&gt;, &lt;code&gt;ScrollLock&lt;/code&gt;, &lt;code&gt;Pause&lt;/code&gt;, &lt;code&gt;NumLock&lt;/code&gt;, &lt;code&gt;BackQuote&lt;/code&gt;, &lt;code&gt;Num1&lt;/code&gt;, &lt;code&gt;Num2&lt;/code&gt;, &lt;code&gt;Num3&lt;/code&gt;, &lt;code&gt;Num4&lt;/code&gt;, &lt;code&gt;Num5&lt;/code&gt;, &lt;code&gt;Num6&lt;/code&gt;, &lt;code&gt;Num7&lt;/code&gt;, &lt;code&gt;Num8&lt;/code&gt;, &lt;code&gt;Num9&lt;/code&gt;, &lt;code&gt;Num0&lt;/code&gt;, &lt;code&gt;Minus&lt;/code&gt;, &lt;code&gt;Equal&lt;/code&gt;, &lt;code&gt;KeyQ&lt;/code&gt;, &lt;code&gt;KeyW&lt;/code&gt;, &lt;code&gt;KeyE&lt;/code&gt;, &lt;code&gt;KeyR&lt;/code&gt;, &lt;code&gt;KeyT&lt;/code&gt;, &lt;code&gt;KeyY&lt;/code&gt;, &lt;code&gt;KeyU&lt;/code&gt;, &lt;code&gt;KeyI&lt;/code&gt;, &lt;code&gt;KeyO&lt;/code&gt;, &lt;code&gt;KeyP&lt;/code&gt;, &lt;code&gt;LeftBracket&lt;/code&gt;, &lt;code&gt;RightBracket&lt;/code&gt;, &lt;code&gt;KeyA&lt;/code&gt;, &lt;code&gt;KeyS&lt;/code&gt;, &lt;code&gt;KeyD&lt;/code&gt;, &lt;code&gt;KeyF&lt;/code&gt;, &lt;code&gt;KeyG&lt;/code&gt;, &lt;code&gt;KeyH&lt;/code&gt;, &lt;code&gt;KeyJ&lt;/code&gt;, &lt;code&gt;KeyK&lt;/code&gt;, &lt;code&gt;KeyL&lt;/code&gt;, &lt;code&gt;SemiColon&lt;/code&gt;, &lt;code&gt;Quote&lt;/code&gt;, &lt;code&gt;BackSlash&lt;/code&gt;, &lt;code&gt;IntlBackslash&lt;/code&gt;, &lt;code&gt;KeyZ&lt;/code&gt;, &lt;code&gt;KeyX&lt;/code&gt;, &lt;code&gt;KeyC&lt;/code&gt;, &lt;code&gt;KeyV&lt;/code&gt;, &lt;code&gt;KeyB&lt;/code&gt;, &lt;code&gt;KeyN&lt;/code&gt;, &lt;code&gt;KeyM&lt;/code&gt;, &lt;code&gt;Comma&lt;/code&gt;, &lt;code&gt;Dot&lt;/code&gt;, &lt;code&gt;Slash&lt;/code&gt;, &lt;code&gt;Insert&lt;/code&gt;, &lt;code&gt;KpReturn&lt;/code&gt;, &lt;code&gt;KpMinus&lt;/code&gt;, &lt;code&gt;KpPlus&lt;/code&gt;, &lt;code&gt;KpMultiply&lt;/code&gt;, &lt;code&gt;KpDivide&lt;/code&gt;, &lt;code&gt;Kp0&lt;/code&gt;, &lt;code&gt;Kp1&lt;/code&gt;, &lt;code&gt;Kp2&lt;/code&gt;, &lt;code&gt;Kp3&lt;/code&gt;, &lt;code&gt;Kp4&lt;/code&gt;, &lt;code&gt;Kp5&lt;/code&gt;, &lt;code&gt;Kp6&lt;/code&gt;, &lt;code&gt;Kp7&lt;/code&gt;, &lt;code&gt;Kp8&lt;/code&gt;, &lt;code&gt;Kp9&lt;/code&gt;, &lt;code&gt;KpDelete&lt;/code&gt;, &lt;code&gt;Function&lt;/code&gt;, &lt;code&gt;Unknown&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;As an example, here is how you can configure &lt;code&gt;key_config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;key_config = [&#xA;  { event = &#34;press&#34;, keys = &#34;Return&#34;, files = [{ path = &#34;ding.mp3&#34;, volume = 1.0 }] },&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;event&lt;/code&gt;: &#34;press&#34; or &#34;release&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;keys&lt;/code&gt;: A regular expression (regex) for matching the keys.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;files&lt;/code&gt;: An array of files. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;path&lt;/code&gt;: The absolute path of the file. If the file is embedded in the binary (i.e. if it is inside &lt;code&gt;sounds/&lt;/code&gt; directory) then it is the name of the file without full path.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;volume&lt;/code&gt;: The volume of the sound. The value 1.0 is the &#34;normal&#34; volume (unfiltered input). Any value other than 1.0 will multiply each sample by this value.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you have defined multiple files for a key event, you can also specify a strategy for how to play them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;key_config = [&#xA;  { event = &#34;press&#34;, keys = &#34;.*&#34;, files = [{ path = &#34;1.mp3&#34; }, { path = &#34;2.mp3&#34; }], strategy = &#34;random&#34; },&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Currently supported strategies are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;strategy = &#34;random&#34;&lt;/code&gt;: pick a random file from the list and play it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;strategy = &#34;sequential&#34;&lt;/code&gt;: play the files sequentially.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here is how you can combine everything together:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[sound_preset]]&#xA;# Custom sound preset named &#34;custom&#34;&#xA;name = &#34;custom&#34;&#xA;&#xA;# Key configurations for various events&#xA;key_config = [&#xA;  # When a key starting with &#34;Key&#34; is pressed, play 1.mp3, 2.mp3, and 3.mp3 sequentially&#xA;  { event = &#34;press&#34;, keys = &#34;Key*&#34;, files = [&#xA;    { path = &#34;1.mp3&#34; },&#xA;    { path = &#34;2.mp3&#34; },&#xA;    { path = &#34;3.mp3&#34; },&#xA;  ], strategy = &#34;sequential&#34; },&#xA;&#xA;  # When a key starting with &#34;Key&#34; is released, play 4.mp3&#xA;  { event = &#34;release&#34;, keys = &#34;Key*&#34;, files = [&#xA;    { path = &#34;4.mp3&#34; },&#xA;  ] },&#xA;&#xA;  # When a key starting with &#34;Num&#34; is pressed, play num.mp3 at a very high volume (10.0)&#xA;  { event = &#34;press&#34;, keys = &#34;Num*&#34;, files = [&#xA;    { path = &#34;num.mp3&#34;, volume = 10.0 },&#xA;  ] },&#xA;&#xA;  # When any key is pressed, play a random sound from cat.mp3, dog.mp3, or bird.mp3&#xA;  { event = &#34;press&#34;, keys = &#34;.*&#34;, files = [&#xA;    { path = &#34;cat.mp3&#34; },&#xA;    { path = &#34;dog.mp3&#34; },&#xA;    { path = &#34;bird.mp3&#34; },&#xA;  ], strategy = &#34;random&#34; },&#xA;]&#xA;&#xA;# Disabled keys that won&#39;t trigger any sound events&#xA;disabled_keys = [&#34;CapsLock&#34;, &#34;NumLock&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Similar Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zevv/bucklespring&#34;&gt;&lt;code&gt;bucklespring&lt;/code&gt;&lt;/a&gt;: Nostalgia bucklespring keyboard sound&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rbanffy/selectric-mode&#34;&gt;&lt;code&gt;selectric-mode&lt;/code&gt;&lt;/a&gt;: Make your Emacs sound like a proper typewriter&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;Huge thanks to &lt;a href=&#34;https://github.com/arda-guler/&#34;&gt;H. Arda Güler&lt;/a&gt; for giving me the idea for this project, sharing the inspiration behind it and implementing the first iteration in Python.&lt;/p&gt; &#xA;&lt;p&gt;Kudos! 👾&lt;/p&gt; &#xA;&lt;h2&gt;Donations&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sponsors/orhun&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/sponsors/orhun?style=flat&amp;amp;logo=GitHub&amp;amp;labelColor=1D272B&amp;amp;color=819188&amp;amp;logoColor=white&#34; alt=&#34;Support me on GitHub Sponsors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://patreon.com/join/orhunp&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint.svg?url=https%3A%2F%2Fshieldsio-patreon.vercel.app%2Fapi%3Fusername%3Dorhunp%26type%3Dpatrons&amp;amp;style=flat&amp;amp;logo=Patreon&amp;amp;labelColor=1D272B&amp;amp;color=819188&amp;amp;logoColor=white&#34; alt=&#34;Support me on Patreon&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://patreon.com/join/orhunp&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint.svg?url=https%3A%2F%2Fshieldsio-patreon.vercel.app%2Fapi%3Fusername%3Dorhunp%26type%3Dpledges&amp;amp;style=flat&amp;amp;logo=Patreon&amp;amp;labelColor=1D272B&amp;amp;color=819188&amp;amp;logoColor=white&amp;amp;label=&#34; alt=&#34;Support me on Patreon&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you find &lt;strong&gt;daktilo&lt;/strong&gt; and/or other projects on my &lt;a href=&#34;https://github.com/orhun&#34;&gt;GitHub&lt;/a&gt; useful, consider supporting me on &lt;a href=&#34;https://github.com/sponsors/orhun&#34;&gt;GitHub Sponsors&lt;/a&gt; or &lt;a href=&#34;https://www.patreon.com/join/orhunp&#34;&gt;becoming a patron&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See our &lt;a href=&#34;https://raw.githubusercontent.com/orhun/daktilo/main/CONTRIBUTING.md&#34;&gt;Contribution Guide&lt;/a&gt; and please follow the &lt;a href=&#34;https://raw.githubusercontent.com/orhun/daktilo/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt; in all your interactions with the project.&lt;/p&gt; &#xA;&lt;p&gt;Also, see how you can add new presets &lt;a href=&#34;https://raw.githubusercontent.com/orhun/daktilo/main/CONTRIBUTING.md#how-to-add-new-presets&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/orhun/daktilo/main/LICENSE-MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?style=flat&amp;amp;logo=GitHub&amp;amp;labelColor=1D272B&amp;amp;color=819188&amp;amp;logoColor=white&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/orhun/daktilo/main/LICENSE-APACHE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?style=flat&amp;amp;logo=GitHub&amp;amp;labelColor=1D272B&amp;amp;color=819188&amp;amp;logoColor=white&#34; alt=&#34;License: Apache 2.0&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Licensed under either of &lt;a href=&#34;https://raw.githubusercontent.com/orhun/daktilo/main/LICENSE-APACHE&#34;&gt;Apache License Version 2.0&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/orhun/daktilo/main/LICENSE-MIT&#34;&gt;The MIT License&lt;/a&gt; at your option.&lt;/p&gt; &#xA;&lt;p&gt;🦀 ノ( º _ º ノ) - respect crables!&lt;/p&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;Copyright © 2023, &lt;a href=&#34;mailto:orhunparmaksiz@gmail.com&#34;&gt;Orhun Parmaksız&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>