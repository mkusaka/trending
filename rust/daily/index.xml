<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-03-19T01:34:57Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>smol-rs/smol</title>
    <updated>2025-03-19T01:34:57Z</updated>
    <id>tag:github.com,2025-03-19:/smol-rs/smol</id>
    <link href="https://github.com/smol-rs/smol" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A small and fast async runtime for Rust&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;smol&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/smol-rs/smol/actions&#34;&gt;&lt;img src=&#34;https://github.com/smol-rs/smol/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/smol-rs/smol&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache--2.0_OR_MIT-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/smol&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/smol.svg?sanitize=true&#34; alt=&#34;Cargo&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/smol&#34;&gt;&lt;img src=&#34;https://docs.rs/smol/badge.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://matrix.to/#/%23smol-rs:matrix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/matrix/smol-rs%3Amatrix.org&#34; alt=&#34;Chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/smol-rs/smol/master/assets/images/logo_fullsize_transparent.png&#34; alt=&#34;kitty&#34; width=&#34;100px&#34; style=&#34;float: left;&#34;&gt; &#xA;&lt;p&gt;A small and fast async runtime.&lt;/p&gt; &#xA;&lt;p&gt;This crate simply re-exports other smaller async crates (see the source).&lt;/p&gt; &#xA;&lt;p&gt;To use tokio-based libraries with smol, apply the &lt;a href=&#34;https://docs.rs/async-compat/latest/async_compat/&#34;&gt;&lt;code&gt;async-compat&lt;/code&gt;&lt;/a&gt; adapter to futures and I/O types.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://docs.rs/smol-macros/latest/smol_macros/&#34;&gt;&lt;code&gt;smol-macros&lt;/code&gt;&lt;/a&gt; crate if you want a no proc-macro, fast compiling, easy-to-use async main and/or multi-threaded Executor setup out of the box.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Connect to an HTTP website, make a GET request, and pipe the response to the standard output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,no_run&#34;&gt;use smol::{io, net, prelude::*, Unblock};&#xA;&#xA;fn main() -&amp;gt; io::Result&amp;lt;()&amp;gt; {&#xA;    smol::block_on(async {&#xA;        let mut stream = net::TcpStream::connect(&#34;example.com:80&#34;).await?;&#xA;        let req = b&#34;GET / HTTP/1.1\r\nHost: example.com\r\nConnection: close\r\n\r\n&#34;;&#xA;        stream.write_all(req).await?;&#xA;&#xA;        let mut stdout = Unblock::new(std::io::stdout());&#xA;        io::copy(stream, &amp;amp;mut stdout).await?;&#xA;        Ok(())&#xA;    })&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There&#39;s a lot more in the &lt;a href=&#34;https://github.com/smol-rs/smol/tree/master/examples&#34;&gt;examples&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;Subcrates&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/smol-rs/async-channel&#34;&gt;async-channel&lt;/a&gt; - Multi-producer multi-consumer channels&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/smol-rs/async-executor&#34;&gt;async-executor&lt;/a&gt; - Composable async executors&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/smol-rs/async-fs&#34;&gt;async-fs&lt;/a&gt; - Async filesystem primitives&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/smol-rs/async-io&#34;&gt;async-io&lt;/a&gt; - Async adapter for I/O types, also timers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/smol-rs/async-lock&#34;&gt;async-lock&lt;/a&gt; - Async locks (barrier, mutex, reader-writer lock, semaphore)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/smol-rs/async-net&#34;&gt;async-net&lt;/a&gt; - Async networking primitives (TCP/UDP/Unix)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/smol-rs/async-process&#34;&gt;async-process&lt;/a&gt; - Async interface for working with processes&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/smol-rs/async-task&#34;&gt;async-task&lt;/a&gt; - Task abstraction for building executors&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/smol-rs/blocking&#34;&gt;blocking&lt;/a&gt; - A thread pool for blocking I/O&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/smol-rs/futures-lite&#34;&gt;futures-lite&lt;/a&gt; - A lighter fork of &lt;a href=&#34;https://github.com/rust-lang/futures-rs&#34;&gt;futures&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/smol-rs/polling&#34;&gt;polling&lt;/a&gt; - Portable interface to epoll, kqueue, event ports, and wepoll&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;TLS certificate&lt;/h2&gt; &#xA;&lt;p&gt;Some code examples are using TLS for authentication. The repository contains a self-signed certificate usable for testing, but it should &lt;strong&gt;not&lt;/strong&gt; be used for real-world scenarios. Browsers and tools like curl will show this certificate as insecure.&lt;/p&gt; &#xA;&lt;p&gt;In browsers, accept the security prompt or use &lt;code&gt;curl -k&lt;/code&gt; on the command line to bypass security warnings.&lt;/p&gt; &#xA;&lt;p&gt;The certificate file was generated using &lt;a href=&#34;https://github.com/jsha/minica&#34;&gt;minica&lt;/a&gt; and &lt;a href=&#34;https://www.openssl.org/&#34;&gt;openssl&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;minica --domains localhost -ip-addresses 127.0.0.1 -ca-cert certificate.pem&#xA;openssl pkcs12 -export -out identity.pfx -inkey localhost/key.pem -in localhost/cert.pem&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another useful tool for making certificates is &lt;a href=&#34;https://github.com/FiloSottile/mkcert&#34;&gt;mkcert&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;MSRV Policy&lt;/h2&gt; &#xA;&lt;p&gt;The Minimum Supported Rust Version (MSRV) of this crate is &lt;strong&gt;1.63&lt;/strong&gt;. As a &lt;strong&gt;tentative&lt;/strong&gt; policy, the MSRV will not advance past the &lt;a href=&#34;https://packages.debian.org/stable/rust/rustc&#34;&gt;current Rust version provided by Debian Stable&lt;/a&gt;. At the time of writing, this version of Rust is &lt;em&gt;1.63&lt;/em&gt;. However, the MSRV may be advanced further in the event of a major ecosystem shift or a security vulnerability.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under either of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apache License, Version 2.0 (&lt;a href=&#34;https://raw.githubusercontent.com/smol-rs/smol/master/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;MIT license (&lt;a href=&#34;https://raw.githubusercontent.com/smol-rs/smol/master/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;at your option.&lt;/p&gt; &#xA;&lt;h4&gt;Contribution&lt;/h4&gt; &#xA;&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>0xNineteen/solana-arbitrage-bot</title>
    <updated>2025-03-19T01:34:57Z</updated>
    <id>tag:github.com,2025-03-19:/0xNineteen/solana-arbitrage-bot</id>
    <link href="https://github.com/0xNineteen/solana-arbitrage-bot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;solana arbitrage bot across multiple spot dexs&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;solana arbitrage bot&lt;/h2&gt; &#xA;&lt;p&gt;happy searching :)&lt;/p&gt; &#xA;&lt;h2&gt;layout&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;client/&lt;/code&gt;: off-chain arbitrage bot code&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;program/&lt;/code&gt;: on-chain swap program&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pools/&lt;/code&gt;: dex pool metadata&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;onchain-data/&lt;/code&gt;: analysis of other arbitrage swaps&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mainnet-fork/&lt;/code&gt;: fork mainnet account states to test swap input/output estimates&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;each folder contains a corresponding &lt;code&gt;README.md&lt;/code&gt; which explains how it works&lt;/p&gt; &#xA;&lt;h2&gt;dexs supported&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;serum&lt;/li&gt; &#xA; &lt;li&gt;aldrin&lt;/li&gt; &#xA; &lt;li&gt;saber&lt;/li&gt; &#xA; &lt;li&gt;mercurial&lt;/li&gt; &#xA; &lt;li&gt;orca&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;other notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;we use rust unit tests (with mainnet forking) to ensure our swap quotes are correct (quoted swap amount = actual swap amount)&lt;/li&gt; &#xA; &lt;li&gt;to figure out how to interface with each dex (most dont have rust sdks or even public ts sdks) we reverse engineer how to interact with them through the jupiter-swap sdk (analyzing the npm package folder bc its also not public)&lt;/li&gt; &#xA; &lt;li&gt;in the client we use a brute-force approach to find arb opportunities instead of negative cycle algos bc its much faster and can find all opportunities&lt;/li&gt; &#xA; &lt;li&gt;we also dont calculate the optimal swap input amount for each arb bc its faster to spam multiple decreasing amounts and let the largest one land (this is what the winner of the arbitrage opportunities was doing - eg, send tx with input size N, N/2, N/4, ...)&lt;/li&gt; &#xA; &lt;li&gt;why do we need an on-chain swap program? checkout this &lt;a href=&#34;https://github.com/0xNineteen/blog.md/raw/8292c9c27b29f7d290f022a097511bb07bda4ea3/contents/rust-macros-arbitrage/index.md&#34;&gt;post&lt;/a&gt; out -- if you swap from A -&amp;gt; B -&amp;gt; C you might get more/less of B than expected which effects the swap instruction to C&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;why share this alpha&lt;/h2&gt; &#xA;&lt;p&gt;the life of a lone searcher is a lonely one where you cant share what you find or share your code - while working on this project i realized this is not what im about and thus i open source&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>aws/amazon-q-developer-cli</title>
    <updated>2025-03-19T01:34:57Z</updated>
    <id>tag:github.com,2025-03-19:/aws/amazon-q-developer-cli</id>
    <link href="https://github.com/aws/amazon-q-developer-cli" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Add autocomplete and AI to your existing terminal on macOS &amp; Linux&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Amazon Q Developer for command line Monorepo&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;strong&gt;&lt;code&gt;amazon-q-developer-cli&lt;/code&gt;&lt;/strong&gt; monorepo houses most of the core code for the Amazon Q Developer desktop app and CLI.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install Amazon Q Developer for command line see the AWS public documentation &lt;a href=&#34;https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/command-line-installing.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Several projects live here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/packages/autocomplete/&#34;&gt;&lt;code&gt;autocomplete&lt;/code&gt;&lt;/a&gt; - The autocomplete react app&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/packages/dashboard/&#34;&gt;&lt;code&gt;dashboard&lt;/code&gt;&lt;/a&gt; - The dashboard react app&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/crates/figterm/&#34;&gt;&lt;code&gt;figterm&lt;/code&gt;&lt;/a&gt; - figterm, our headless terminal/pseudoterminal that intercepts the user’s terminal edit buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/crates/q_cli/&#34;&gt;&lt;code&gt;q_cli&lt;/code&gt;&lt;/a&gt; - the &lt;code&gt;q&lt;/code&gt; CLI, allows users to interface with Amazon Q Developer from the command line&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/crates/fig_desktop/&#34;&gt;&lt;code&gt;fig_desktop&lt;/code&gt;&lt;/a&gt; - the Rust desktop app, uses &lt;a href=&#34;https://docs.rs/tao/latest/tao/&#34;&gt;&lt;code&gt;tao&lt;/code&gt;&lt;/a&gt;/&lt;a href=&#34;https://docs.rs/wry/latest/wry/&#34;&gt;&lt;code&gt;wry&lt;/code&gt;&lt;/a&gt; for windowing/webviews&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/crates/fig_input_method/&#34;&gt;&lt;code&gt;fig_input_method&lt;/code&gt;&lt;/a&gt; - The input method used to get cursor position on macOS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/extensions/vscode/&#34;&gt;&lt;code&gt;vscode&lt;/code&gt;&lt;/a&gt; - Contains the VSCode plugin needed for the Amazon Q Developer for command line to work in VSCode&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/extensions/jetbrains/&#34;&gt;&lt;code&gt;jetbrains&lt;/code&gt;&lt;/a&gt; - Contains the VSCode plugin needed for the Amazon Q Developer for command line to work in Jetbrains IDEs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Other folder to be aware of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/build-scripts/&#34;&gt;&lt;code&gt;build-scripts/&lt;/code&gt;&lt;/a&gt; - Contains all python scripts to build, sign, and test the project on macOS and Linux&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/crates/&#34;&gt;&lt;code&gt;crates/&lt;/code&gt;&lt;/a&gt; - Contains all internal rust crates&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/packages/&#34;&gt;&lt;code&gt;packages/&lt;/code&gt;&lt;/a&gt; - Contains all internal npm packages&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/proto/&#34;&gt;&lt;code&gt;proto/&lt;/code&gt;&lt;/a&gt; - &lt;a href=&#34;https://developers.google.com/protocol-buffers/&#34;&gt;protocol buffer&lt;/a&gt; message specification for inter-process communication&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/tests/&#34;&gt;&lt;code&gt;tests/&lt;/code&gt;&lt;/a&gt; - Contain integration tests for the projects&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Below is a high level architecture of how the different components of the app and their IPC:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/docs/assets/architecture.svg?sanitize=true&#34; alt=&#34;architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MacOS &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Xcode 13 or later&lt;/li&gt; &#xA;   &lt;li&gt;Brew&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1. Clone repo&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/aws/amazon-q-for-command-line.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Install platform dependencies&lt;/h3&gt; &#xA;&lt;p&gt;This is all the dep&lt;/p&gt; &#xA;&lt;p&gt;For Debian/Ubuntu:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt update&#xA;sudo apt install build-essential pkg-config jq dpkg curl wget cmake clang libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev libdbus-1-dev libwebkit2gtk-4.1-dev libjavascriptcoregtk-4.1-dev valac libibus-1.0-dev libglib2.0-dev sqlite3 libxdo-dev protobuf-compiler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Arch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pacman -Syu&#xA;sudo pacman -S --needed webkit2gtk base-devel curl wget openssl appmenu-gtk-module gtk3 libappindicator-gtk3 librsvg libvips cmake jq pkgconf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Fedora:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo dnf check-update&#xA;sudo dnf install webkit2gtk3-devel.x86_64 openssl-devel curl wget libappindicator-gtk3 librsvg2-devel jq&#xA;sudo dnf group install &#34;C Development Tools and Libraries&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For MacOS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;xcode-select --install&#xA;brew install mise pnpm protobuf zsh bash fish shellcheck jq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Install Rust toolchain using &lt;a href=&#34;https://rustup.rs&#34;&gt;Rustup&lt;/a&gt;:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh&#xA;rustup default stable&#xA;# for pre-commit hooks the two following commands are required&#xA;rustup toolchain install nightly&#xA;cargo install typos-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For MacOS development make sure the right targets are installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rustup target add x86_64-apple-darwin&#xA;rustup target add aarch64-apple-darwin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. Setup Python and Node using &lt;a href=&#34;https://mise.jdx.dev&#34;&gt;&lt;code&gt;mise&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Add mise integrations to your shell shell&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# zsh&#xA;echo &#39;eval &#34;$(mise activate zsh)&#34;&#39; &amp;gt;&amp;gt; &#34;${ZDOTDIR-$HOME}/.zshrc&#34;&#xA;&#xA;# bash&#xA;echo &#39;eval &#34;$(mise activate bash)&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;&#xA;# fish&#xA;echo &#39;mise activate fish | source&#39; &amp;gt;&amp;gt; ~/.config/fish/config.fish&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install the Python and Node toolchains using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mise trust&#xA;mise install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;4. Setup precommit hooks&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Run `pnpm` in root directory to add pre-commit hooks&#xA;pnpm install --ignore-scripts &amp;amp;&amp;amp; pnpm husky install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/CONTRIBUTING.md#security-issue-notifications&#34;&gt;CONTRIBUTING&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;This repo is dual licensed under MIT and Apache 2.0 licenses.&lt;/p&gt; &#xA;&lt;p&gt;“Amazon Web Services” and all related marks, including logos, graphic designs, and service names, are trademarks or trade dress of AWS in the U.S. and other countries. AWS’s trademarks and trade dress may not be used in connection with any product or service that is not AWS’s, in any manner that is likely to cause confusion among customers, or in any manner that disparages or discredits AWS.&lt;/p&gt;</summary>
  </entry>
</feed>