<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-16T01:45:23Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>crablang/crab</title>
    <updated>2023-04-16T01:45:23Z</updated>
    <id>tag:github.com,2023-04-16:/crablang/crab</id>
    <link href="https://github.com/crablang/crab" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A community fork of a language named after a plant fungus. All of the memory-safe features you love, now with 100% less bureaucracy!&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8974888/231858967-7c37bf1e-335b-4f5a-9760-da97be9f54bb.png&#34; width=&#34;200&#34;&gt; &#xA;&lt;h1&gt;The Crab Programming Language&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/NntY9T2wZp&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/CrabLang_Community%20-Join_us-brightgreen?style=plastic&amp;amp;logo=crablang&#34; alt=&#34;CrabLang Community&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is the main source code repository for &lt;a href=&#34;https://github.com/crablang/crab&#34;&gt;Crab&lt;/a&gt;. It contains the compiler, standard library, and documentation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: this README is for &lt;em&gt;users&lt;/em&gt; rather than &lt;em&gt;contributors&lt;/em&gt;.&lt;/strong&gt; If you wish to &lt;em&gt;contribute&lt;/em&gt; to the compiler, you should read &lt;a href=&#34;https://raw.githubusercontent.com/crablang/crab/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;!TODO&lt;/p&gt; &#xA;&lt;!-- &#xA;Read [&#34;Installation&#34;] from [The Book].&#xA;&#xA;[&#34;Installation&#34;]: https://doc.crablang.org/book/ch01-01-installation.html&#xA;[The Book]: https://doc.crablang.org/book/index.html --&gt; &#xA;&lt;h2&gt;Installing from Source&lt;/h2&gt; &#xA;&lt;p&gt;The Crab build system uses a Python script called &lt;code&gt;x.py&lt;/code&gt; to build the compiler, which manages the bootstrapping process. It lives at the root of the project.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;x.py&lt;/code&gt; command can be run directly on most Unix systems in the following format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./x.py &amp;lt;subcommand&amp;gt; [flags]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is how the documentation and examples assume you are running &lt;code&gt;x.py&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Some alternative ways are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# On a Unix shell if you don&#39;t have the necessary `python3` command&#xA;./x &amp;lt;subcommand&amp;gt; [flags]&#xA;&#xA;# On the Windows Command Prompt (if .py files are configured to run Python)&#xA;x.py &amp;lt;subcommand&amp;gt; [flags]&#xA;&#xA;# You can also run Python yourself, e.g.:&#xA;python x.py &amp;lt;subcommand&amp;gt; [flags]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More information about &lt;code&gt;x.py&lt;/code&gt; can be found by running it with the &lt;code&gt;--help&lt;/code&gt; flag or reading the &lt;a href=&#34;https://crabc-dev-guide.crablang.org/building/how-to-build-and-run.html&#34;&gt;crabc dev guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;Make sure you have installed the dependencies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;python&lt;/code&gt; 3 or 2.7&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;A C compiler (when building for the host, &lt;code&gt;cc&lt;/code&gt; is enough; cross-compiling may need additional compilers)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;curl&lt;/code&gt; (not needed on Windows)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pkg-config&lt;/code&gt; if you are compiling on Linux and targeting Linux&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libiconv&lt;/code&gt; (already included with glibc on Debian-based distros)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To build Crabgo, you&#39;ll also need OpenSSL (&lt;code&gt;libssl-dev&lt;/code&gt; or &lt;code&gt;openssl-devel&lt;/code&gt; on most Unix distros).&lt;/p&gt; &#xA;&lt;p&gt;If building LLVM from source, you&#39;ll need additional tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;g++&lt;/code&gt;, &lt;code&gt;clang++&lt;/code&gt;, or MSVC with versions listed on &lt;a href=&#34;https://llvm.org/docs/GettingStarted.html#host-c-toolchain-both-compiler-and-standard-library&#34;&gt;LLVM&#39;s documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ninja&lt;/code&gt;, or GNU &lt;code&gt;make&lt;/code&gt; 3.81 or later (Ninja is recommended, especially on Windows)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmake&lt;/code&gt; 3.13.4 or later&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libstdc++-static&lt;/code&gt; may be required on some Linux distributions such as Fedora and Ubuntu&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On tier 1 or tier 2 with host tools platforms, you can also choose to download LLVM by setting &lt;code&gt;llvm.download-ci-llvm = true&lt;/code&gt;. Otherwise, you&#39;ll need LLVM installed and &lt;code&gt;llvm-config&lt;/code&gt; in your path. See &lt;a href=&#34;https://crabc-dev-guide.crablang.org/building/new-target.html#using-pre-built-llvm&#34;&gt;the crabc-dev-guide for more info&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Building on a Unix-like system&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the &lt;a href=&#34;https://github.com/crablang/crablang&#34;&gt;source&lt;/a&gt; with &lt;code&gt;git&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/crablang/crab.git&#xA;cd crab&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Configure the build settings:&lt;/p&gt; &lt;p&gt;The CrabLang build system uses a file named &lt;code&gt;config.toml&lt;/code&gt; in the root of the source tree to determine various configuration settings for the build. Set up the defaults intended for distros to get started. You can see a full list of options in &lt;code&gt;config.example.toml&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;printf &#39;profile = &#34;user&#34; \nchangelog-seen = 2 \n&#39; &amp;gt; config.toml&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you plan to use &lt;code&gt;x.py install&lt;/code&gt; to create an installation, it is recommended that you set the &lt;code&gt;prefix&lt;/code&gt; value in the &lt;code&gt;[install]&lt;/code&gt; section to a directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build and install:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./x.py build &amp;amp;&amp;amp; ./x.py install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When complete, &lt;code&gt;./x.py install&lt;/code&gt; will place several programs into &lt;code&gt;$PREFIX/bin&lt;/code&gt;: &lt;code&gt;crabc&lt;/code&gt;, the CrabLang compiler, and &lt;code&gt;crablangdoc&lt;/code&gt;, the API-documentation tool. If you&#39;ve set &lt;code&gt;profile = &#34;user&#34;&lt;/code&gt; or &lt;code&gt;build.extended = true&lt;/code&gt;, it will also include &lt;a href=&#34;https://github.com/crablang/crabgo&#34;&gt;Crabgo&lt;/a&gt;, CrabLang&#39;s package manager.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Building on Windows&lt;/h3&gt; &#xA;&lt;p&gt;On Windows, we suggest using &lt;a href=&#34;https://github.com/microsoft/winget-cli&#34;&gt;winget&lt;/a&gt; to install dependencies by running the following in a terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;winget install -e Python.Python.3&#xA;winget install -e Kitware.CMake&#xA;winget install -e Git.Git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then edit your system&#39;s &lt;code&gt;PATH&lt;/code&gt; variable and add: &lt;code&gt;C:\Program Files\CMake\bin&lt;/code&gt;. See &lt;a href=&#34;https://www.java.com/en/download/help/path.html&#34;&gt;this guide on editing the system &lt;code&gt;PATH&lt;/code&gt;&lt;/a&gt; from the Java documentation.&lt;/p&gt; &#xA;&lt;p&gt;There are two prominent ABIs in use on Windows: the native (MSVC) ABI used by Visual Studio and the GNU ABI used by the GCC toolchain. Which version of CrabLang you need depends largely on what C/C++ libraries you want to interoperate with. Use the MSVC build of CrabLang to interop with software produced by Visual Studio and the GNU build to interop with GNU software built using the MinGW/MSYS2 toolchain.&lt;/p&gt; &#xA;&lt;h4&gt;MinGW&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.msys2.org/&#34;&gt;MSYS2&lt;/a&gt; can be used to easily build CrabLang on Windows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the latest &lt;a href=&#34;https://www.msys2.org/&#34;&gt;MSYS2 installer&lt;/a&gt; and go through the installer.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;mingw32_shell.bat&lt;/code&gt; or &lt;code&gt;mingw64_shell.bat&lt;/code&gt; from the MSYS2 installation directory (e.g. &lt;code&gt;C:\msys64&lt;/code&gt;), depending on whether you want 32-bit or 64-bit CrabLang. (As of the latest version of MSYS2 you have to run &lt;code&gt;msys2_shell.cmd -mingw32&lt;/code&gt; or &lt;code&gt;msys2_shell.cmd -mingw64&lt;/code&gt; from the command line instead.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;From this terminal, install the required tools:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Update package mirrors (may be needed if you have a fresh install of MSYS2)&#xA;pacman -Sy pacman-mirrors&#xA;&#xA;# Install build tools needed for CrabLang. If you&#39;re building a 32-bit compiler,&#xA;# then replace &#34;x86_64&#34; below with &#34;i686&#34;. If you&#39;ve already got Git, Python,&#xA;# or CMake installed and in PATH you can remove them from this list.&#xA;# Note that it is important that you do **not** use the &#39;python2&#39;, &#39;cmake&#39;,&#xA;# and &#39;ninja&#39; packages from the &#39;msys2&#39; subsystem.&#xA;# The build has historically been known to fail with these packages.&#xA;pacman -S git \&#xA;            make \&#xA;            diffutils \&#xA;            tar \&#xA;            mingw-w64-x86_64-python \&#xA;            mingw-w64-x86_64-cmake \&#xA;            mingw-w64-x86_64-gcc \&#xA;            mingw-w64-x86_64-ninja&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate to CrabLang&#39;s source code (or clone it), then build it:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./x.py build &amp;amp;&amp;amp; ./x.py install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;MSVC&lt;/h4&gt; &#xA;&lt;p&gt;MSVC builds of CrabLang additionally require an installation of Visual Studio 2017 (or later) so &lt;code&gt;crabc&lt;/code&gt; can use its linker. The simplest way is to get &lt;a href=&#34;https://visualstudio.microsoft.com/downloads/&#34;&gt;Visual Studio&lt;/a&gt;, check the &#34;C++ build tools&#34; and &#34;Windows 10 SDK&#34; workload.&lt;/p&gt; &#xA;&lt;p&gt;(If you&#39;re installing CMake yourself, be careful that &#34;C++ CMake tools for Windows&#34; doesn&#39;t get included under &#34;Individual components&#34;.)&lt;/p&gt; &#xA;&lt;p&gt;With these dependencies installed, you can build the compiler in a &lt;code&gt;cmd.exe&lt;/code&gt; shell with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python x.py build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Right now, building CrabLang only works with some known versions of Visual Studio. If you have a more recent version installed and the build system doesn&#39;t understand, you may need to force crablangbuild to use an older version. This can be done by manually calling the appropriate vcvars file before running the bootstrap.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-batch&#34;&gt;CALL &#34;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvars64.bat&#34;&#xA;python x.py build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Specifying an ABI&lt;/h4&gt; &#xA;&lt;p&gt;Each specific ABI can also be used from either environment (for example, using the GNU ABI in PowerShell) by using an explicit build triple. The available Windows build triples are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GNU ABI (using GCC) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;i686-pc-windows-gnu&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;x86_64-pc-windows-gnu&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;The MSVC ABI &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;i686-pc-windows-msvc&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;x86_64-pc-windows-msvc&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The build triple can be specified by either specifying &lt;code&gt;--build=&amp;lt;triple&amp;gt;&lt;/code&gt; when invoking &lt;code&gt;x.py&lt;/code&gt; commands, or by creating a &lt;code&gt;config.toml&lt;/code&gt; file (as described in &lt;a href=&#34;https://raw.githubusercontent.com/crablang/crab/master/#installing-from-source&#34;&gt;Installing from Source&lt;/a&gt;), and modifying the &lt;code&gt;build&lt;/code&gt; option under the &lt;code&gt;[build]&lt;/code&gt; section.&lt;/p&gt; &#xA;&lt;h3&gt;Configure and Make&lt;/h3&gt; &#xA;&lt;p&gt;While it&#39;s not the recommended build system, this project also provides a configure script and makefile (the latter of which just invokes &lt;code&gt;x.py&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./configure&#xA;make &amp;amp;&amp;amp; sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;configure&lt;/code&gt; generates a &lt;code&gt;config.toml&lt;/code&gt; which can also be used with normal &lt;code&gt;x.py&lt;/code&gt; invocations.&lt;/p&gt; &#xA;&lt;h2&gt;Building Documentation&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like to build the documentation, it&#39;s almost the same:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./x.py doc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The generated documentation will appear under &lt;code&gt;doc&lt;/code&gt; in the &lt;code&gt;build&lt;/code&gt; directory for the ABI used. That is, if the ABI was &lt;code&gt;x86_64-pc-windows-msvc&lt;/code&gt;, the directory will be &lt;code&gt;build\x86_64-pc-windows-msvc\doc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;p&gt;Since the CrabLang compiler is written in CrabLang, it must be built by a precompiled &#34;snapshot&#34; version of itself (made in an earlier stage of development). As such, source builds require an Internet connection to fetch snapshots, and an OS that can execute the available snapshot binaries.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://doc.crablang.org/nightly/crabc/platform-support.html&#34;&gt;https://doc.crablang.org/nightly/crabc/platform-support.html&lt;/a&gt; for a list of supported platforms. Only &#34;host tools&#34; platforms have a pre-compiled snapshot binary available; to compile for a platform without host tools you must cross-compile.&lt;/p&gt; &#xA;&lt;p&gt;You may find that other platforms work, but these are our officially supported build environments that are most likely to work.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Help&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://www.crablang.org/community&#34;&gt;https://www.crablang.org/community&lt;/a&gt; for a list of chat platforms and forums.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/crablang/crab/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;CrabLang is primarily distributed under the terms of both the MIT license and the Apache License (Version 2.0), with portions covered by various BSD-like licenses.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/crablang/crab/master/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/crablang/crab/master/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/crablang/crab/master/COPYRIGHT&#34;&gt;COPYRIGHT&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Trademark&lt;/h2&gt; &#xA;&lt;p&gt;If you want to use any names or brands associated with Crab or CrabLang, please feel free to do so in any capacity.&lt;/p&gt; &#xA;&lt;p&gt;Third-party logos may be subject to third-party copyrights and trademarks. See &lt;a href=&#34;https://www.crablang.org/policies/licenses&#34;&gt;Licenses&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Boshen/oxc</title>
    <updated>2023-04-16T01:45:23Z</updated>
    <id>tag:github.com,2023-04-16:/Boshen/oxc</id>
    <link href="https://github.com/Boshen/oxc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The JavaScript Oxidation Compiler&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/Boshen/oxc-assets/main/preview-dark-transparent.png&#34; width=&#34;700&#34;&gt; &#xA;  &lt;img alt=&#34;OXC Logo&#34; src=&#34;https://raw.githubusercontent.com/Boshen/oxc-assets/main/preview-white.png&#34; width=&#34;700&#34;&gt; &#xA; &lt;/picture&gt; &lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://discord.gg/9uXCAwqQZW&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1079625926024900739?logo=discord&amp;amp;label=discord&amp;amp;color=brightgreen&#34; alt=&#34;Discord chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Boshen/oxc/actions/workflows/ci.yml?query=event%3Apush+branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/Boshen/oxc/actions/workflows/ci.yml/badge.svg?event=push&amp;amp;branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/oxidation-compiler/v/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/oxidation-compiler/latest?color=brightgreen&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/oxc_parser&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/oxc_parser.svg?sanitize=true&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/oxc_parser&#34;&gt;&lt;img src=&#34;https://docs.rs/oxc_parser/badge.svg?sanitize=true&#34; alt=&#34;Docs.rs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://codecov.io/gh/Boshen/oxc&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/Boshen/oxc/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Code Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Boshen/oxc&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/languages/code-size/Boshen/oxc&#34; alt=&#34;Code Size&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Boshen/oxc/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?color=brightgreen&#34; alt=&#34;MIT licensed&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;The Oxidation Compiler is creating a suite of tools for the JavaScript / TypeScript language:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Boshen/oxc/main/crates/oxc_ast&#34;&gt;AST&lt;/a&gt; - See &lt;a href=&#34;https://docs.rs/oxc_ast&#34;&gt;docs.rs/oxc_ast&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Boshen/oxc/main/crates/oxc_parser&#34;&gt;Parser&lt;/a&gt; - See &lt;a href=&#34;https://docs.rs/oxc_parser&#34;&gt;docs.rs/oxc_parser&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Boshen/oxc/main/crates/oxc_linter&#34;&gt;Linter&lt;/a&gt; - Work in progress. Try it out! &lt;code&gt;npx oxidation-compiler@latest lint path&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Formatter&lt;/li&gt; &#xA; &lt;li&gt;Transpiler&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Boshen/oxc/main/crates/oxc_minifier&#34;&gt;Minifier&lt;/a&gt; - Draft&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Goals&lt;/h2&gt; &#xA;&lt;p&gt;The primary objectives for this project include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a &lt;em&gt;really&lt;/em&gt; fast native program by using the Rust programming language&lt;/li&gt; &#xA; &lt;li&gt;Provide the basic building blocks for creating your own tools by having good API designs&lt;/li&gt; &#xA; &lt;li&gt;Provide good documentation on learning Rust and compiler techniques&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Performance issues are considered as bugs in this project.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project is an invitation for you to come and learn Rust with us, We welcome and appreciate all contributions to this project.&lt;/p&gt; &#xA;&lt;p&gt;To get started, check out &lt;a href=&#34;https://raw.githubusercontent.com/Boshen/oxc/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are unable to contribute code,, you can still participate by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;star and watch this project&lt;/li&gt; &#xA; &lt;li&gt;join us on &lt;a href=&#34;https://discord.gg/9uXCAwqQZW&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/boshen_c&#34;&gt;follow me on twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;provide your wisdom in &lt;a href=&#34;https://github.com/Boshen/oxc/discussions&#34;&gt;discussions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Milestone&lt;/h2&gt; &#xA;&lt;p&gt;As of now, Oxc has a fully working parser and a prototype for the linter.&lt;/p&gt; &#xA;&lt;p&gt;The current objectives are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A MVP (Most Viable Product) for the linter.&lt;/li&gt; &#xA; &lt;li&gt;A prototype for the minifier.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Linter&lt;/h2&gt; &#xA;&lt;p&gt;The linter is fast to the extent that it feels broken.&lt;/p&gt; &#xA;&lt;p&gt;With a few rules implemented, testing in the &lt;a href=&#34;https://github.com/microsoft/vscode&#34;&gt;VSCode&lt;/a&gt; repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;vscode  main ❯ npx oxidation-compiler@latest lint src&#xA;Checked 3479 files in 335ms using 12 cores.&#xA;Found 17 errors.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And also in a huge monorepo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Checked 73660 files in 7415ms using 12 cores.&#xA;Found 470 errors.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On my Intel i7 6-core, the linter is around 84 times faster than ESLint. But we&#39;ll get slightly slower as we add more features.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/Boshen/oxc/main/benchmark/&#34;&gt;benchmark&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h3&gt;Try it out yourself!&lt;/h3&gt; &#xA;&lt;p&gt;The linter is currently usable and it can potentially catch a few mistakes for you:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npx oxidation-compiler@latest lint path&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All feedbacks are welcome.&lt;/p&gt; &#xA;&lt;h2&gt;Parser Conformance&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;cargo coverage&lt;/code&gt; command reports the following conformance summary&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Test262 Summary:&#xA;AST Parsed     : 44000/44000 (100.00%)&#xA;Positive Passed: 44000/44000 (100.00%)&#xA;Negative Passed: 3915/3915 (100.00%)&#xA;&#xA;Babel Summary:&#xA;AST Parsed     : 2065/2071 (99.71%)&#xA;Positive Passed: 2062/2071 (99.57%)&#xA;Negative Passed: 1332/1502 (88.68%)&#xA;&#xA;TypeScript Summary:&#xA;TypeScript Summary:&#xA;AST Parsed     : 2337/2337 (100.00%)&#xA;Positive Passed: 2331/2337 (99.74%)&#xA;Negative Passed: 673/2535 (26.55%)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Test262 conformance is complete. TypeScript parsing is complete.&lt;/p&gt; &#xA;&lt;p&gt;Only unstable stage 3 &lt;code&gt;json-modules&lt;/code&gt; and stage 3 &lt;code&gt;decorators&lt;/code&gt; tests are skipped.&lt;/p&gt; &#xA;&lt;h2&gt;Learning Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;My &lt;a href=&#34;https://boshen.github.io/javascript-parser-in-rust/&#34;&gt;small tutorial on how to write a JavaScript Parser in Rust&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://craftinginterpreters.com&#34;&gt;Crafting Interpreters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[Create an issue and insert your inspirational learning resources here]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Rust cloc&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;───────────────────────────────────────────────────────────────────────────────&#xA;Language    Files       Lines     Blanks    Comments      Code&#xA;───────────────────────────────────────────────────────────────────────────────&#xA;Rust          160       39747       4286        2693     32768&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;This project was incubated with the assistance of these exceptional mentors and their projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rome.tools&#34;&gt;Rome Tools&lt;/a&gt; - &lt;a href=&#34;https://github.com/MichaReiser&#34;&gt;@MichaReiser&lt;/a&gt;, &lt;a href=&#34;https://github.com/ematipico&#34;&gt;@ematipico&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://beta.ruff.rs&#34;&gt;Ruff&lt;/a&gt; - &lt;a href=&#34;https://github.com/charliermarsh&#34;&gt;@charliermarsh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://quick-lint-js.com&#34;&gt;quick-lint-js&lt;/a&gt; - &lt;a href=&#34;https://github.com/strager&#34;&gt;@strager&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://package.elm-lang.org/packages/jfmengels/elm-review/latest&#34;&gt;elm-review&lt;/a&gt; - &lt;a href=&#34;https://github.com/jfmengels&#34;&gt;@jfmengels&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/domonji&#34;&gt;@domonji&lt;/a&gt; for contribution to the TypeScript parser&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Boshen/oxc/main/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Third Party Licenses&lt;/h2&gt; &#xA;&lt;p&gt;Licenses are list in &lt;a href=&#34;https://raw.githubusercontent.com/Boshen/oxc/main/LICENSE-THIRD-PARTY-LICENSE&#34;&gt;THIRD-PARTY-LICENSE&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project partially copies code from the following projects:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Project&lt;/th&gt; &#xA;   &lt;th&gt;License&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/eslint/eslint&#34;&gt;eslint/eslint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/eslint/eslint/raw/main/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/typescript-eslint/typescript-eslint&#34;&gt;typescript-eslint/typescript-eslint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/typescript-eslint/typescript-eslint/raw/main/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/microsoft/TypeScript&#34;&gt;microsoft/TypeScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/microsoft/TypeScript/raw/main/LICENSE.txt&#34;&gt;Apache 2.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/rome/tools&#34;&gt;rome/tools&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/rome/tools/raw/main/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/mozilla-spidermonkey/jsparagus&#34;&gt;mozilla-spidermonkey/jsparagus&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/mozilla-spidermonkey/jsparagus/raw/master/LICENSE-MIT&#34;&gt;MIT&lt;/a&gt; &lt;a href=&#34;https://github.com/mozilla-spidermonkey/jsparagus/raw/master/LICENSE-APACHE-2.0&#34;&gt;Apache 2.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acornjs/acorn&#34;&gt;acorn&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acornjs/acorn/raw/master/acorn/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/zkat/miette&#34;&gt;miette&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/zkat/miette/raw/main/LICENSE&#34;&gt;Apache 2.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/terser/terser&#34;&gt;terser&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/terser/terser/raw/master/LICENSE&#34;&gt;BSD&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>facebook/akd</title>
    <updated>2023-04-16T01:45:23Z</updated>
    <id>tag:github.com,2023-04-16:/facebook/akd</id>
    <link href="https://github.com/facebook/akd" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An implementation of an auditable key directory&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;akd &lt;img src=&#34;https://github.com/facebook/akd/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/h2&gt; &#xA;&lt;p&gt;An implementation of an auditable key directory (also known as a verifiable registry or authenticated dictionary).&lt;/p&gt; &#xA;&lt;p&gt;Auditable key directories can be used to help provide key transparency for end-to-end encrypted messaging.&lt;/p&gt; &#xA;&lt;p&gt;This implementation is based off of the protocols described in &lt;a href=&#34;https://eprint.iacr.org/2018/607&#34;&gt;SEEMless&lt;/a&gt;, with ideas incorporated from &lt;a href=&#34;https://eprint.iacr.org/2023/081&#34;&gt;Parakeet&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This library provides a stateless API for an auditable key directory, meaning that a consumer of this library must provide their own solution for the storage of the entries of the directory.&lt;/p&gt; &#xA;&lt;p&gt;⚠️ &lt;strong&gt;Warning&lt;/strong&gt;: This implementation has not been audited (yet). Use at your own risk!&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The API can be found &lt;a href=&#34;https://docs.rs/akd/&#34;&gt;here&lt;/a&gt; along with an example for usage. To learn more about the technical details behind how the directory is constructed, see &lt;a href=&#34;https://docs.rs/akd_core/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add the following line to the dependencies of your &lt;code&gt;Cargo.toml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;akd = &#34;0.8&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Minimum Supported Rust Version&lt;/h3&gt; &#xA;&lt;p&gt;Rust &lt;strong&gt;1.51&lt;/strong&gt; or higher.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;The original authors of this code are Evan Au (&lt;a href=&#34;https://github.com/afterdusk&#34;&gt;@afterdusk&lt;/a&gt;), Alex Chernyak (&lt;a href=&#34;https://github.com/alexme22&#34;&gt;@alexme22&lt;/a&gt;), Dillon George (&lt;a href=&#34;https://github.com/dillonrg&#34;&gt;@dillonrg&lt;/a&gt;), Sean Lawlor (&lt;a href=&#34;https://github.com/slawlor&#34;&gt;@slawlor&lt;/a&gt;), Kevin Lewi (&lt;a href=&#34;https://github.com/kevinlewi&#34;&gt;@kevinlewi&lt;/a&gt;), Jasleen Malvai (&lt;a href=&#34;https://github.com/jasleen1&#34;&gt;@jasleen1&lt;/a&gt;), and Ercan Ozturk (&lt;a href=&#34;https://github.com/eozturk1&#34;&gt;@eozturk1&lt;/a&gt;). To learn more about contributing to this project, &lt;a href=&#34;https://github.com/facebook/akd/raw/main/CONTRIBUTING.md&#34;&gt;see this document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under either &lt;a href=&#34;https://github.com/facebook/akd/raw/main/LICENSE-APACHE&#34;&gt;Apache 2.0&lt;/a&gt; or &lt;a href=&#34;https://github.com/facebook/akd/raw/main/LICENSE-MIT&#34;&gt;MIT&lt;/a&gt;, at your option.&lt;/p&gt;</summary>
  </entry>
</feed>