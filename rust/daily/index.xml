<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-14T01:34:20Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>zaghaghi/openapi-tui</title>
    <updated>2024-03-14T01:34:20Z</updated>
    <id>tag:github.com,2024-03-14:/zaghaghi/openapi-tui</id>
    <link href="https://github.com/zaghaghi/openapi-tui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Terminal UI to list, browse and run APIs defined with openapi spec.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zaghaghi/openapi-tui/main/static/logo.png&#34; alt=&#34;logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;openapi-tui&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/zaghaghi/openapi-tui/actions&#34;&gt;&lt;img src=&#34;https://github.com/zaghaghi/openapi-tui/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Terminal UI to list, browse and run APIs defined with OpenAPI v3.0 spec.&lt;/p&gt; &#xA;&lt;h1&gt;Demo&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zaghaghi/openapi-tui/main/static/demo.gif&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Nested Components&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zaghaghi/openapi-tui/main/static/nested-refs.gif&#34; alt=&#34;nested-refrences&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Fullscreen&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zaghaghi/openapi-tui/main/static/fullscreen.gif&#34; alt=&#34;fullscreen&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;Install from source:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;‚ùØ cargo install openapi-tui&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or download pre-built artifact from release page.&lt;/p&gt; &#xA;&lt;h2&gt;Distro Packages&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Packaging status&lt;/summary&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://repology.org/project/openapi-tui/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/vertical-allrepos/openapi-tui.svg?sanitize=true&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Arch Linux&lt;/h3&gt; &#xA;&lt;p&gt;You can install using &lt;code&gt;pacman&lt;/code&gt; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;‚ùØ pacman -S openapi-tui&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;‚ùØ openapi-tui --help&#xA;This TUI allows you to list and browse APIs described by the openapi specification.&#xA;&#xA;Usage: openapi-tui [OPTIONS]&#xA;&#xA;Options:&#xA;  -o, --openapi-path &amp;lt;PATH&amp;gt;  Input file, i.e. json or yaml file with openapi specification [default:&#xA;                             openapi.json]&#xA;  -h, --help                 Print help&#xA;  -V, --version              Print version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Keybindings&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Key&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Action&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;‚Üí&lt;/code&gt;, &lt;code&gt;l&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Move to next pane&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;‚Üê&lt;/code&gt;, &lt;code&gt;h&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Move to previous pane&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;‚Üì&lt;/code&gt;, &lt;code&gt;j&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Move down in lists&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;‚Üë&lt;/code&gt;, &lt;code&gt;k&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Move up in lists&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;1...9&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Move between tabs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&#39;f&#39;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Toggle fullscreen pane&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;g&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Go in nested items in lists&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;Backspace&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Get out of nested items in lists&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Milestones&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Viewer&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; OpenAPI v3.1&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Remote API specification&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Pane Fullscreen Mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Nested Components&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Status Line&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Command Line&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Execute&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>alexpovel/srgn</title>
    <updated>2024-03-14T01:34:20Z</updated>
    <id>tag:github.com,2024-03-14:/alexpovel/srgn</id>
    <link href="https://github.com/alexpovel/srgn" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A code surgeon for precise text and code transplantation. A marriage of `tr`/`sed`, `rg` and `tree-sitter`.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;srgn - a code surgeon&lt;/h1&gt; &#xA;&lt;p&gt;A code &lt;strong&gt;s&lt;/strong&gt;u&lt;strong&gt;rg&lt;/strong&gt;eo&lt;strong&gt;n&lt;/strong&gt; for precise text and code transplantation.&lt;/p&gt; &#xA;&lt;p&gt;Born a Unicode-capable &lt;a href=&#34;https://raw.githubusercontent.com/alexpovel/srgn/main/#comparison-with-tr&#34;&gt;descendant of &lt;code&gt;tr&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;srgn&lt;/code&gt; adds useful &lt;a href=&#34;https://raw.githubusercontent.com/alexpovel/srgn/main/#actions&#34;&gt;&lt;em&gt;actions&lt;/em&gt;&lt;/a&gt;, acting within precise, optionally language grammar-aware &lt;a href=&#34;https://raw.githubusercontent.com/alexpovel/srgn/main/#scopes&#34;&gt;&lt;em&gt;scopes&lt;/em&gt;&lt;/a&gt;. It suits use cases where...&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;regex &lt;a href=&#34;https://en.wikipedia.org/wiki/Pumping_lemma_for_regular_languages&#34;&gt;doesn&#39;t cut it&lt;/a&gt; anymore,&lt;/li&gt; &#xA; &lt;li&gt;editor tools such as &lt;em&gt;Rename all&lt;/em&gt; are too specific, and not automatable,&lt;/li&gt; &#xA; &lt;li&gt;precise manipulation, not just matching, is required, and lastly and optionally,&lt;/li&gt; &#xA; &lt;li&gt;Unicode-specific trickery is desired.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;For an &#34;end-to-end&#34; example, consider this Python snippet (&lt;a href=&#34;https://raw.githubusercontent.com/alexpovel/srgn/main/#premade-queries-sample-showcases&#34;&gt;more languages are supported&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#34;&#34;&#34;GNU module.&#34;&#34;&#34;&#xA;&#xA;def GNU_says_moo():&#xA;    &#34;&#34;&#34;The GNU -&amp;gt; say moo -&amp;gt; ‚úÖ&#34;&#34;&#34;&#xA;&#xA;    GNU = &#34;&#34;&#34;&#xA;      GNU&#xA;    &#34;&#34;&#34;  # the GNU...&#xA;&#xA;    print(GNU + &#34; says moo&#34;)  # ...says moo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which with an invocation of&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat gnu.py | srgn --python &#39;doc-strings&#39; &#39;(?&amp;lt;!The )GNU&#39; &#39;GNU üêÇ is not Unix&#39; | srgn --symbols&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;can be manipulated to read&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#34;&#34;&#34;GNU üêÇ is not Unix module.&#34;&#34;&#34;&#xA;&#xA;def GNU_says_moo():&#xA;    &#34;&#34;&#34;The GNU ‚Üí say moo ‚Üí ‚úÖ&#34;&#34;&#34;&#xA;&#xA;    GNU = &#34;&#34;&#34;&#xA;      GNU&#xA;    &#34;&#34;&#34;  # the GNU...&#xA;&#xA;    print(GNU + &#34; says moo&#34;)  # ...says moo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where the changes are limited to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;- &#34;&#34;&#34;GNU module.&#34;&#34;&#34;&#xA;+ &#34;&#34;&#34;GNU üêÇ is not Unix module.&#34;&#34;&#34;&#xA;&#xA;  def GNU_says_moo():&#xA;-     &#34;&#34;&#34;The GNU -&amp;gt; say moo -&amp;gt; ‚úÖ&#34;&#34;&#34;&#xA;+     &#34;&#34;&#34;The GNU ‚Üí say moo ‚Üí ‚úÖ&#34;&#34;&#34;&#xA;&#xA;      GNU = &#34;&#34;&#34;&#xA;        GNU&#xA;      &#34;&#34;&#34;  # the GNU...&#xA;&#xA;      print(GNU + &#34; says moo&#34;)  # ...says moo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which demonstrates:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;language grammar-aware operation: only Python docstrings were manipulated; virtually impossible to replicate in just regex&lt;/p&gt; &lt;p&gt;Skip ahead to &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alexpovel/srgn/main/#premade-queries-sample-showcases&#34;&gt;more such showcases&lt;/a&gt; below&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;advanced regex features such as, in this case, negative lookbehind are supported&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Unicode is natively handled&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;features such as &lt;a href=&#34;https://raw.githubusercontent.com/alexpovel/srgn/main/#symbols&#34;&gt;ASCII symbol replacement&lt;/a&gt; are provided&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Hence the concept of surgical operation: &lt;code&gt;srgn&lt;/code&gt; allows you to be quite precise about the scope of your actions, &lt;em&gt;combining&lt;/em&gt; the power of both &lt;a href=&#34;https://docs.rs/fancy-regex/latest/fancy_regex/index.html&#34;&gt;regular expressions&lt;/a&gt; and &lt;a href=&#34;https://tree-sitter.github.io/tree-sitter/&#34;&gt;parsers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;Without exception, all &lt;code&gt;bash&lt;/code&gt; and &lt;code&gt;console&lt;/code&gt; code snippets in this README are automatically &lt;a href=&#34;https://raw.githubusercontent.com/alexpovel/srgn/main/tests/readme.rs&#34;&gt;tested&lt;/a&gt; using the actual program binary, facilitated by a tiny bash interpreter. What is showcased here is guaranteed to work.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Prebuilt binaries&lt;/h3&gt; &#xA;&lt;p&gt;Download a prebuilt binary from the &lt;a href=&#34;https://github.com/alexpovel/srgn/releases/latest&#34;&gt;releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;cargo-binstall&lt;/h3&gt; &#xA;&lt;p&gt;This crate provides its binaries in a format &lt;a href=&#34;https://github.com/cargo-bins/cargo-binstall/raw/9cfc0cd5f97300925ae60f67712b74970a380aca/SUPPORT.md#support-for-cargo-binstall&#34;&gt;compatible&lt;/a&gt; with &lt;a href=&#34;https://github.com/cargo-bins/cargo-binstall&#34;&gt;&lt;code&gt;cargo-binstall&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install the &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;Rust toolchain&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;cargo install cargo-binstall&lt;/code&gt; (might take a while)&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;cargo binstall srgn&lt;/code&gt; (couple seconds, as it downloads &lt;a href=&#34;https://raw.githubusercontent.com/alexpovel/srgn/main/#prebuilt-binaries&#34;&gt;prebuilt binaries&lt;/a&gt; from GitHub)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;These steps are guaranteed to work‚Ñ¢, as they are &lt;a href=&#34;https://raw.githubusercontent.com/alexpovel/srgn/main/.github/workflows/main.yml&#34;&gt;tested in CI&lt;/a&gt;. They also work if no prebuilt binaries are available for your platform, as the tool will fall back to &lt;a href=&#34;https://raw.githubusercontent.com/alexpovel/srgn/main/#cargo-compile-from-source&#34;&gt;compiling from source&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;CI (GitHub Actions)&lt;/h3&gt; &#xA;&lt;p&gt;All &lt;a href=&#34;https://github.com/actions/runner-images/tree/main/images&#34;&gt;GitHub Actions runner images&lt;/a&gt; come with &lt;code&gt;cargo&lt;/code&gt; preinstalled, and &lt;code&gt;cargo-binstall&lt;/code&gt; provides a convenient &lt;a href=&#34;https://github.com/marketplace/actions/install-cargo-binstall&#34;&gt;GitHub Action&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;jobs:&#xA;  srgn:&#xA;    name: Install srgn in CI&#xA;    # All three major OSes work&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;      - uses: cargo-bins/cargo-binstall@main&#xA;      - name: Install binary&#xA;        run: &amp;gt;&#xA;          cargo binstall&#xA;          --no-confirm&#xA;          srgn&#xA;      - name: Use binary&#xA;        run: srgn --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above concludes in just &lt;a href=&#34;https://github.com/alexpovel/srgn/actions/runs/6605290729/job/17940329899&#34;&gt;5 seconds total&lt;/a&gt;, as no compilation is required. For more context, see &lt;a href=&#34;https://github.com/cargo-bins/cargo-binstall#can-i-use-it-in-ci&#34;&gt;&lt;code&gt;cargo-binstall&lt;/code&gt;&#39;s advise on CI&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Cargo (compile from source)&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install the &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;Rust toolchain&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;A C compiler is required: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;On Linux, &lt;code&gt;gcc&lt;/code&gt; works (tested).&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;On macOS, try &lt;code&gt;clang&lt;/code&gt; (untested).&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;On Windows, &lt;a href=&#34;https://visualstudio.microsoft.com/downloads/&#34;&gt;MSVC&lt;/a&gt; works (tested).&lt;/p&gt; &lt;p&gt;Select &#34;Desktop development with C++&#34; on installation.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;cargo install srgn&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Cargo (as a Rust library)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;cargo add srgn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/alexpovel/srgn/main/#rust-library&#34;&gt;here&lt;/a&gt; for more.&lt;/p&gt; &#xA;&lt;h3&gt;Shell completions&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.rs/clap_complete/4.5.1/clap_complete/shells/enum.Shell.html#variants&#34;&gt;Various shells&lt;/a&gt; are supported for shell completion scripts. For example, append &lt;code&gt;eval &#34;$(srgn --completions zsh)&#34;&lt;/code&gt; to &lt;code&gt;~/.zshrc&lt;/code&gt; for completions in ZSH.&lt;/p&gt; &#xA;&lt;h2&gt;Walkthrough&lt;/h2&gt; &#xA;&lt;p&gt;The tool is designed around &lt;strong&gt;scopes&lt;/strong&gt; and &lt;strong&gt;actions&lt;/strong&gt;. Scopes narrow down the parts of the input to process. Actions then perform the processing. Generally, both scopes and actions are composable, so more than one of each may be passed. Both are optional (but taking no action is pointless); specifying no scope implies the entire input is in scope.&lt;/p&gt; &#xA;&lt;p&gt;At the same time, there is &lt;a href=&#34;https://raw.githubusercontent.com/alexpovel/srgn/main/#comparison-with-tr&#34;&gt;considerable overlap&lt;/a&gt; with plain &lt;a href=&#34;https://www.gnu.org/software/coreutils/manual/html_node/tr-invocation.html&#34;&gt;&lt;code&gt;tr&lt;/code&gt;&lt;/a&gt;: the tool is designed to have close correspondence in the most common use cases, and only go beyond when needed.&lt;/p&gt; &#xA;&lt;h3&gt;Actions&lt;/h3&gt; &#xA;&lt;p&gt;The simplest action is replacement. It is specially accessed (as an argument, not an option) for compatibility with &lt;a href=&#34;https://www.gnu.org/software/coreutils/manual/html_node/tr-invocation.html&#34;&gt;&lt;code&gt;tr&lt;/code&gt;&lt;/a&gt;, and general ergonomics. All other actions are given as flags, or options should they take a value.&lt;/p&gt; &#xA;&lt;h4&gt;Replacement&lt;/h4&gt; &#xA;&lt;p&gt;For example, simple, single-character replacements work as in &lt;a href=&#34;https://www.gnu.org/software/coreutils/manual/html_node/tr-invocation.html&#34;&gt;&lt;code&gt;tr&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;Hello, World!&#39; | srgn &#39;H&#39; &#39;J&#39;&#xA;Jello, World!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The first argument is the scope (literal &lt;code&gt;H&lt;/code&gt; in this case). Anything matched by it is subject to processing (replacement by &lt;code&gt;J&lt;/code&gt;, the second argument, in this case). However, there is &lt;strong&gt;no direct concept of character classes&lt;/strong&gt; as in &lt;a href=&#34;https://www.gnu.org/software/coreutils/manual/html_node/tr-invocation.html&#34;&gt;&lt;code&gt;tr&lt;/code&gt;&lt;/a&gt;. Instead, by default, the scope is a regular expression pattern, so &lt;em&gt;its&lt;/em&gt; &lt;a href=&#34;https://docs.rs/regex/1.9.5/regex/index.html#character-classes&#34;&gt;classes&lt;/a&gt; can be used to similar effect:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;Hello, World!&#39; | srgn &#39;[a-z]&#39; &#39;_&#39;&#xA;H____, W____!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The replacement occurs greedily across the entire match by default (note the &lt;a href=&#34;https://docs.rs/regex/1.9.5/regex/index.html#ascii-character-classes&#34;&gt;UTS character class&lt;/a&gt;, reminiscent of &lt;a href=&#34;https://github.com/coreutils/coreutils/raw/769ace51e8a1129c44ee4e7e209c3b2df2111524/src/tr.c#L322C25-L322C25&#34;&gt;&lt;code&gt;tr&lt;/code&gt;&#39;s &lt;code&gt;[:alnum:]&lt;/code&gt;&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;ghp_oHn0As3cr3T!!&#39; | srgn &#39;ghp_[[:alnum:]]+&#39; &#39;*&#39; # A GitHub token&#xA;*!!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, in the presence of capture groups, the &lt;em&gt;individual characters comprising a capture group match&lt;/em&gt; are treated &lt;em&gt;individually&lt;/em&gt; for processing, allowing a replacement to be repeated:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;Hide ghp_th15 and ghp_th4t&#39; | srgn &#39;(ghp_[[:alnum:]]+)&#39; &#39;*&#39;&#xA;Hide ******** and ********&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Advanced regex features are &lt;a href=&#34;https://docs.rs/fancy-regex/0.11.0/fancy_regex/index.html#syntax&#34;&gt;supported&lt;/a&gt;, for example lookarounds:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;ghp_oHn0As3cr3T&#39; | srgn &#39;(?&amp;lt;=ghp_)([[:alnum:]]+)&#39; &#39;*&#39;&#xA;ghp_***********&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Take care in using these safely, as advanced patterns come without certain &lt;a href=&#34;https://docs.rs/regex/latest/regex/#untrusted-input&#34;&gt;safety and performance guarantees&lt;/a&gt;. If they aren&#39;t used, &lt;a href=&#34;https://docs.rs/fancy-regex/0.11.0/fancy_regex/index.html#&#34;&gt;performance is not impacted&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The replacement is not limited to a single character. It can be any string, for example to fix &lt;a href=&#34;http://regex.info/blog/2006-09-15/247&#34;&gt;this quote&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;&#34;Using regex, I now have no issues.&#34;&#39; | srgn &#39;no issues&#39; &#39;2 problems&#39;&#xA;&#34;Using regex, I now have 2 problems.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The tool is fully Unicode-aware, with useful support for &lt;a href=&#34;https://github.com/rust-lang/regex/raw/061ee815ef2c44101dba7b0b124600fcb03c1912/UNICODE.md#rl12-properties&#34;&gt;certain advanced character classes&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;Mood: üôÇ&#39; | srgn &#39;üôÇ&#39; &#39;üòÄ&#39;&#xA;Mood: üòÄ&#xA;$ echo &#39;Mood: ü§Æü§íü§ßü¶† :(&#39; | srgn &#39;\p{Emoji_Presentation}&#39; &#39;üò∑&#39;&#xA;Mood: üò∑üò∑üò∑üò∑ :(&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Beyond replacement&lt;/h4&gt; &#xA;&lt;p&gt;Seeing how the replacement is merely a static string, its usefulness is limited. This is where &lt;a href=&#34;https://maizure.org/projects/decoded-gnu-coreutils/tr.html&#34;&gt;&lt;code&gt;tr&lt;/code&gt;&#39;s secret sauce&lt;/a&gt; ordinarily comes into play: using its character classes, which are valid in the second position as well, neatly translating from members of the first to the second. Here, those classes are instead regexes, and only valid in first position (the scope). A regular expression being a state machine, it is impossible to match onto a &#39;list of characters&#39;, which in &lt;code&gt;tr&lt;/code&gt; is the second (optional) argument. That concept is out the window, and its flexibility lost.&lt;/p&gt; &#xA;&lt;p&gt;Instead, the offered actions, all of them &lt;strong&gt;fixed&lt;/strong&gt;, are used. A peek at &lt;a href=&#34;https://raw.githubusercontent.com/alexpovel/srgn/main/#use-cases-and-equivalences&#34;&gt;the most common use cases for &lt;code&gt;tr&lt;/code&gt;&lt;/a&gt; reveals that the provided set of actions covers virtually all of them! Feel free to file an issue if your use case is not covered.&lt;/p&gt; &#xA;&lt;p&gt;Onto the next action.&lt;/p&gt; &#xA;&lt;h4&gt;Deletion&lt;/h4&gt; &#xA;&lt;p&gt;Removes whatever is found from the input. Same flag name as in &lt;code&gt;tr&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;Hello, World!&#39; | srgn -d &#39;(H|W|!)&#39;&#xA;ello, orld&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] As the default scope is to match the entire input, it is an error to specify deletion without a scope.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Squeezing&lt;/h4&gt; &#xA;&lt;p&gt;Squeezes repeats of characters matching the scope into single occurrences. Same flag name as in &lt;code&gt;tr&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;Helloooo Woooorld!!!&#39; | srgn -s &#39;(o|!)&#39;&#xA;Hello World!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If a character class is passed, all members of that class are squeezed into whatever class member was encountered first:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;The number is: 3490834&#39; | srgn -s &#39;\d&#39;&#xA;The number is: 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Greediness in matching is not modified, so take care:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;Winter is coming... üåûüåûüåû&#39; | srgn -s &#39;üåû+&#39;&#xA;Winter is coming... üåûüåûüåû&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] The pattern matched the &lt;em&gt;entire&lt;/em&gt; run of suns, so there&#39;s nothing to squeeze. Summer prevails.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Invert greediness if the use case calls for it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;Winter is coming... üåûüåûüåû&#39; | srgn -s &#39;üåû+?&#39; &#39;‚òÉÔ∏è&#39;&#xA;Winter is coming... ‚òÉÔ∏è&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Again, as with &lt;a href=&#34;https://raw.githubusercontent.com/alexpovel/srgn/main/#deletion&#34;&gt;deletion&lt;/a&gt;, specifying squeezing without an &lt;em&gt;explicit&lt;/em&gt; scope is an error. Otherwise, the entire input is squeezed.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Character casing&lt;/h4&gt; &#xA;&lt;p&gt;A good chunk of &lt;code&gt;tr&lt;/code&gt; usage &lt;a href=&#34;https://raw.githubusercontent.com/alexpovel/srgn/main/#changing-character-casing&#34;&gt;falls into this category&lt;/a&gt;. It&#39;s very straightforward.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;Hello, World!&#39; | srgn --lower&#xA;hello, world!&#xA;$ echo &#39;Hello, World!&#39; | srgn --upper&#xA;HELLO, WORLD!&#xA;$ echo &#39;hello, world!&#39; | srgn --titlecase&#xA;Hello, World!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Normalization&lt;/h4&gt; &#xA;&lt;p&gt;Decomposes input according to &lt;a href=&#34;https://en.wikipedia.org/wiki/Unicode_equivalence#Normal_forms&#34;&gt;Normalization Form D&lt;/a&gt;, and then discards code points of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Unicode_character_property#General_Category&#34;&gt;Mark category&lt;/a&gt; (see &lt;a href=&#34;https://www.compart.com/en/unicode/category/Mn&#34;&gt;examples&lt;/a&gt;). That roughly means: take fancy character, rip off dangly bits, throw those away.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;Na√Øve jalape√±o √§rgert mg≈Ça&#39; | srgn -d &#39;\P{ASCII}&#39; # Naive approach&#xA;Nave jalapeo rgert mga&#xA;$ echo &#39;Na√Øve jalape√±o √§rgert mg≈Ça&#39; | srgn --normalize # Normalize is smarter&#xA;Naive jalapeno argert mg≈Ça&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice how &lt;code&gt;mg≈Ça&lt;/code&gt; is out of scope for NFD, as it is &#34;atomic&#34; and thus not decomposable (at least that&#39;s what ChatGPT whispers in my ear).&lt;/p&gt; &#xA;&lt;h4&gt;Symbols&lt;/h4&gt; &#xA;&lt;p&gt;This action replaces multi-character, ASCII symbols with appropriate single-code point, native Unicode counterparts.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;(A --&amp;gt; B) != C --- obviously&#39; | srgn --symbols&#xA;(A ‚ü∂ B) ‚â† C ‚Äî obviously&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, if you&#39;re only interested in math, make use of scoping:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;A &amp;lt;= B --- More is--obviously--possible&#39; | srgn --symbols &#39;&amp;lt;=&#39;&#xA;A ‚â§ B --- More is--obviously--possible&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As there is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Bijection&#34;&gt;1:1 correspondence&lt;/a&gt; between an ASCII symbol and its replacement, the effect is reversible[^1]:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;A ‚áí B&#39; | srgn --symbols --invert&#xA;A =&amp;gt; B&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is only a limited set of symbols supported as of right now, but more can be added.&lt;/p&gt; &#xA;&lt;h4&gt;German&lt;/h4&gt; &#xA;&lt;p&gt;This action replaces alternative spellings of German special characters (ae, oe, ue, ss) with their native versions (√§, √∂, √º, √ü)[^2].&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;Gruess Gott, Neueroeffnungen, Poeten und Abenteuergruetze!&#39; | srgn --german&#xA;Gr√º√ü Gott, Neuer√∂ffnungen, Poeten und Abenteuergr√ºtze!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This action is based on a &lt;a href=&#34;https://raw.githubusercontent.com/alexpovel/srgn/main/data/word-lists/de.txt&#34;&gt;word list&lt;/a&gt; (compile without &lt;code&gt;german&lt;/code&gt; feature if this bloats your binary too much). Note the following features about the above example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;empty scope and replacement: the entire input will be processed, and no replacement is performed&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Poeten&lt;/code&gt; remained as-is, instead of being naively and mistakenly converted to &lt;code&gt;P√∂ten&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;as a (compound) word, &lt;code&gt;Abenteuergr√ºtze&lt;/code&gt; is not going to be found in &lt;a href=&#34;https://www.duden.de/suchen/dudenonline/Abenteuergr%C3%BCtze&#34;&gt;any reasonable word list&lt;/a&gt;, but was handled properly nonetheless&lt;/li&gt; &#xA; &lt;li&gt;while part of a compound word, &lt;code&gt;Abenteuer&lt;/code&gt; remained as-is as well, instead of being incorrectly converted to &lt;code&gt;Abente√ºr&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;lastly, &lt;code&gt;Neueroeffnungen&lt;/code&gt; sneakily forms a &lt;code&gt;ue&lt;/code&gt; element neither constituent word (&lt;code&gt;neu&lt;/code&gt;, &lt;code&gt;Er√∂ffnungen&lt;/code&gt;) possesses, but is still processed correctly (despite the mismatched casings as well)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On request, replacements may be forced, as is potentially useful for names:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;Frau Loetter steht ueber der Mauer.&#39; | srgn --german-naive &#39;(?&amp;lt;=Frau )\w+&#39;&#xA;Frau L√∂tter steht ueber der Mauer.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Through positive lookahead, nothing but the salutation was scoped and therefore changed. &lt;code&gt;Mauer&lt;/code&gt; correctly remained as-is, but &lt;code&gt;ueber&lt;/code&gt; was not processed. A second pass fixes this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;Frau Loetter steht ueber der Mauer.&#39; | srgn --german-naive &#39;(?&amp;lt;=Frau )\w+&#39; | srgn --german&#xA;Frau L√∂tter steht √ºber der Mauer.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;Options and flags pertaining to some &#34;parent&#34; are prefixed with their parent&#39;s name, and will &lt;em&gt;imply&lt;/em&gt; their parent when given, such that the latter does not need to be passed explicitly. That&#39;s why &lt;code&gt;--german-naive&lt;/code&gt; is named as it is, and &lt;code&gt;--german&lt;/code&gt; needn&#39;t be passed.&lt;/p&gt; &#xA; &lt;p&gt;This behavior might change once &lt;code&gt;clap&lt;/code&gt; supports &lt;a href=&#34;https://github.com/clap-rs/clap/issues/2222&#34;&gt;subcommand chaining&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Some branches are undecidable for this modest tool, as it operates without language context. For example, both &lt;code&gt;Busse&lt;/code&gt; (busses) and &lt;code&gt;Bu√üe&lt;/code&gt; (penance) are legal words. By default, replacements are greedily performed if legal (that&#39;s the &lt;a href=&#34;https://en.wikipedia.org/wiki/Principle_of_least_astonishment&#34;&gt;whole point&lt;/a&gt; of &lt;code&gt;srgn&lt;/code&gt;, after all), but there&#39;s a flag for toggling this behavior:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;Busse und Geluebte üôè&#39; | srgn --german&#xA;Bu√üe und Gel√ºbte üôè&#xA;$ echo &#39;Busse üöå und Fussgaenger üö∂‚Äç‚ôÄÔ∏è&#39; | srgn --german-prefer-original&#xA;Busse üöå und Fu√üg√§nger üö∂‚Äç‚ôÄÔ∏è&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Combining Actions&lt;/h3&gt; &#xA;&lt;p&gt;Most actions are composable, unless doing so were nonsensical (like for &lt;a href=&#34;https://raw.githubusercontent.com/alexpovel/srgn/main/#deletion&#34;&gt;deletion&lt;/a&gt;). Their order of application is fixed, so the &lt;em&gt;order&lt;/em&gt; of the flags given has no influence (piping multiple runs is an alternative, if needed). Replacements always occur first. Generally, the CLI is designed to prevent misuse and &lt;a href=&#34;https://en.wikipedia.org/wiki/Principle_of_least_astonishment&#34;&gt;surprises&lt;/a&gt;: it prefers crashing to doing something unexpected (which is subjective, of course). Note that lots of combinations &lt;em&gt;are&lt;/em&gt; technically possible, but might yield nonsensical results.&lt;/p&gt; &#xA;&lt;p&gt;Combining actions might look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;Koeffizienten != Bruecken...&#39; | srgn -Sgu&#xA;KOEFFIZIENTEN ‚â† BR√úCKEN...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A more narrow scope can be specified, and will apply to &lt;em&gt;all&lt;/em&gt; actions equally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;Koeffizienten != Bruecken...&#39; | srgn -Sgu &#39;\b\w{1,8}\b&#39;&#xA;Koeffizienten != BR√úCKEN...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://www.regular-expressions.info/wordboundaries.html&#34;&gt;word boundaries&lt;/a&gt; are required as otherwise &lt;code&gt;Koeffizienten&lt;/code&gt; is matched as &lt;code&gt;Koeffizi&lt;/code&gt; and &lt;code&gt;enten&lt;/code&gt;. Note how the trailing periods cannot be, for example, squeezed. The required scope of &lt;code&gt;\.&lt;/code&gt; would interfere with the given one. Regular piping solves this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;Koeffizienten != Bruecken...&#39; | srgn -Sgu &#39;\b\w{1,8}\b&#39; | srgn -s &#39;\.&#39;&#xA;Koeffizienten != BR√úCKEN.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: regex escaping (&lt;code&gt;\.&lt;/code&gt;) can be circumvent using &lt;a href=&#34;https://raw.githubusercontent.com/alexpovel/srgn/main/#literal-scope&#34;&gt;literal scoping&lt;/a&gt;. The specially treated replacement action is also composable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;Mooood: ü§Æü§íü§ßü¶†!!!&#39; | srgn -s &#39;\p{Emoji}&#39; &#39;üò∑&#39;&#xA;Mooood: üò∑!!!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Emojis are first all replaced, then squeezed. Notice how nothing else is squeezed.&lt;/p&gt; &#xA;&lt;h3&gt;Scopes&lt;/h3&gt; &#xA;&lt;p&gt;Scopes are the second driving concept to &lt;code&gt;srgn&lt;/code&gt;. In the default case, the main scope is a regular expression. The &lt;a href=&#34;https://raw.githubusercontent.com/alexpovel/srgn/main/#actions&#34;&gt;actions&lt;/a&gt; section showcased this use case in some detail, so it&#39;s not repeated here. It is given as a first positional argument.&lt;/p&gt; &#xA;&lt;h4&gt;Language grammar-aware scopes&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;srgn&lt;/code&gt; extends this through premade, language grammar-aware scopes, made possible through the excellent &lt;a href=&#34;https://tree-sitter.github.io/tree-sitter/&#34;&gt;&lt;code&gt;tree-sitter&lt;/code&gt;&lt;/a&gt; library. It offers a &lt;a href=&#34;https://tree-sitter.github.io/tree-sitter/using-parsers#query-syntax&#34;&gt;queries&lt;/a&gt; feature, which works much like pattern matching against a &lt;a href=&#34;https://en.wikipedia.org/wiki/Parse_tree&#34;&gt;tree data structure&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;srgn&lt;/code&gt; comes bundled with a handful of the most useful of these queries. Through its discoverable API (either &lt;a href=&#34;https://raw.githubusercontent.com/alexpovel/srgn/main/#rust-library&#34;&gt;as a library&lt;/a&gt; or via CLI, &lt;code&gt;srgn --help&lt;/code&gt;), one can learn of the supported languages and available, premade queries. Each supported language comes with an escape hatch, allowing you to run your own, custom ad-hoc queries. The hatch comes in the form of &lt;code&gt;--lang-query &amp;lt;S EXPRESSION&amp;gt;&lt;/code&gt;, where &lt;code&gt;lang&lt;/code&gt; is a language such as &lt;code&gt;python&lt;/code&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/alexpovel/srgn/main/#custom-queries&#34;&gt;below&lt;/a&gt; for more on this advanced topic.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;Language scopes are applied &lt;em&gt;first&lt;/em&gt;, so whatever regex aka main scope you pass, it operates on each matched language construct individually.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h5&gt;Premade queries (sample showcases)&lt;/h5&gt; &#xA;&lt;p&gt;This section shows examples for some of the &lt;strong&gt;premade queries&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h6&gt;Mass import (module) renaming (Python, Rust)&lt;/h6&gt; &#xA;&lt;p&gt;As part of a large refactor (say, after an acquisition), imagine all imports of a specific package needed renaming:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import math&#xA;from pathlib import Path&#xA;&#xA;import good_company.infra&#xA;import good_company.aws.auth as aws_auth&#xA;from good_company.util.iter import dedupe&#xA;from good_company.shopping.cart import *  # Ok but don&#39;t do this at home!&#xA;&#xA;good_company = &#34;good_company&#34;  # good_company&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At the same time, a move to &lt;a href=&#34;https://packaging.python.org/en/latest/discussions/src-layout-vs-flat-layout/&#34;&gt;&lt;code&gt;src/&lt;/code&gt; layout&lt;/a&gt; is desired. Achieve this move with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat imports.py | srgn --python &#39;imports&#39; &#39;^good_company&#39; &#39;src.better_company&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which will yield&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import math&#xA;from pathlib import Path&#xA;&#xA;import src.better_company.infra&#xA;import src.better_company.aws.auth as aws_auth&#xA;from src.better_company.util.iter import dedupe&#xA;from src.better_company.shopping.cart import *  # Ok but don&#39;t do this at home!&#xA;&#xA;good_company = &#34;good_company&#34;  # good_company&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note how the last line remains untouched by this particular operation. To run across many files, see &lt;a href=&#34;https://raw.githubusercontent.com/alexpovel/srgn/main/#run-against-multiple-files&#34;&gt;the &lt;code&gt;files&lt;/code&gt; option&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Similar import-related edits are supported for other languages as well, for example Rust:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use std::collections::HashMap;&#xA;&#xA;use good_company::infra;&#xA;use good_company::aws::auth as aws_auth;&#xA;use good_company::util::iter::dedupe;&#xA;use good_company:&lt;span&gt;üõç&lt;/span&gt;:cart::*;&#xA;&#xA;good_company = &#34;good_company&#34;;  // good_company&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which, using&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat imports.rs | srgn --rust &#39;uses&#39; &#39;^good_company&#39; &#39;better_company&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;becomes&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use std::collections::HashMap;&#xA;&#xA;use better_company::infra;&#xA;use better_company::aws::auth as aws_auth;&#xA;use better_company::util::iter::dedupe;&#xA;use better_company:&lt;span&gt;üõç&lt;/span&gt;:cart::*;&#xA;&#xA;good_company = &#34;good_company&#34;;  // good_company&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Assigning &lt;code&gt;TODO&lt;/code&gt;s (TypeScript)&lt;/h6&gt; &#xA;&lt;p&gt;Perhaps you&#39;re using a system of &lt;code&gt;TODO&lt;/code&gt; notes in comments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;class TODOApp {&#xA;    // TODO app for writing TODO lists&#xA;    addTodo(todo: TODO): void {&#xA;        // TODO: everything, actually ü§∑‚Äç‚ôÄÔ∏è&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and &lt;em&gt;usually&lt;/em&gt; assign people to each note. It&#39;s possible to automate assigning yourself to every unassigned note (lucky you!) using&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat todo.ts | srgn --typescript &#39;comments&#39; &#39;TODO(?=:)&#39; &#39;TODO(@poorguy)&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which in this case gives&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;class TODOApp {&#xA;    // TODO app for writing TODO lists&#xA;    addTodo(todo: TODO): void {&#xA;        // TODO(@poorguy): everything, actually ü§∑‚Äç‚ôÄÔ∏è&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice the &lt;a href=&#34;https://www.regular-expressions.info/lookaround.html&#34;&gt;positive lookahead&lt;/a&gt; of &lt;code&gt;(?=:)&lt;/code&gt;, ensuring an actual &lt;code&gt;TODO&lt;/code&gt; note is hit (&lt;code&gt;TODO:&lt;/code&gt;). Otherwise, the other &lt;code&gt;TODO&lt;/code&gt;s mentioned around the comments would be matched as well.&lt;/p&gt; &#xA;&lt;h6&gt;Converting &lt;code&gt;print&lt;/code&gt; calls to proper &lt;code&gt;logging&lt;/code&gt; (Python)&lt;/h6&gt; &#xA;&lt;p&gt;Say there&#39;s code making liberal use of &lt;code&gt;print&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def print_money():&#xA;    &#34;&#34;&#34;Let&#39;s print money üí∏.&#34;&#34;&#34;&#xA;&#xA;    amount = 32&#xA;    print(&#34;Got here.&#34;)&#xA;&#xA;    print_more = lambda s: print(f&#34;Printed {s}&#34;)&#xA;    print_more(23)  # print the stuff&#xA;&#xA;print_money()&#xA;print(&#34;Done.&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and a move to &lt;a href=&#34;https://docs.python.org/3/library/logging.html&#34;&gt;&lt;code&gt;logging&lt;/code&gt;&lt;/a&gt; is desired. That&#39;s fully automated by a call of&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat money.py | srgn --python &#39;function-calls&#39; &#39;^print$&#39; &#39;logging.info&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;yielding&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def print_money():&#xA;    &#34;&#34;&#34;Let&#39;s print money üí∏.&#34;&#34;&#34;&#xA;&#xA;    amount = 32&#xA;    logging.info(&#34;Got here.&#34;)&#xA;&#xA;    print_more = lambda s: logging.info(f&#34;Printed {s}&#34;)&#xA;    print_more(23)  # print the stuff&#xA;&#xA;print_money()&#xA;logging.info(&#34;Done.&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Note the &lt;a href=&#34;https://www.regular-expressions.info/anchors.html&#34;&gt;anchors&lt;/a&gt;: &lt;code&gt;print_more&lt;/code&gt; is a function call as well, but &lt;code&gt;^print$&lt;/code&gt; ensures it&#39;s not matched.&lt;/p&gt; &#xA; &lt;p&gt;The regular expression applies &lt;em&gt;after&lt;/em&gt; grammar scoping, so operates entirely within the already-scoped context.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h6&gt;Remove all comments (C#)&lt;/h6&gt; &#xA;&lt;p&gt;Overdone, comments can turn into &lt;a href=&#34;https://refactoring.guru/smells/comments&#34;&gt;smells&lt;/a&gt;. If not tended to, they might very well start lying:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System.Linq;&#xA;&#xA;public class UserService&#xA;{&#xA;    private readonly AppDbContext _dbContext;&#xA;&#xA;    /// &amp;lt;summary&amp;gt;&#xA;    /// Initializes a new instance of the &amp;lt;see cref=&#34;FileService&#34;/&amp;gt; class.&#xA;    /// &amp;lt;/summary&amp;gt;&#xA;    /// &amp;lt;param name=&#34;dbContext&#34;&amp;gt;The configuration for manipulating text.&amp;lt;/param&amp;gt;&#xA;    public UserService(AppDbContext dbContext)&#xA;    {&#xA;        _dbContext /* the logging context */ = dbContext;&#xA;    }&#xA;&#xA;    /// &amp;lt;summary&amp;gt;&#xA;    /// Uploads a file to the server.&#xA;    /// &amp;lt;/summary&amp;gt;&#xA;    // Method to log users out of the system&#xA;    public void DoWork()&#xA;    {&#xA;        _dbContext.Database.EnsureCreated(); // Ensure the database schema is deleted&#xA;&#xA;        _dbContext.Users.Add(new User /* the car */ { Name = &#34;Alice&#34; });&#xA;&#xA;        /* Begin reading file */&#xA;        _dbContext.SaveChanges();&#xA;&#xA;        var user = _dbContext.Users.Where(/* fetch products */ u =&amp;gt; u.Name == &#34;Alice&#34;).FirstOrDefault();&#xA;&#xA;        /// Delete all records before proceeding&#xA;        if (user /* the product */ != null)&#xA;        {&#xA;            System.Console.WriteLine($&#34;Found user with ID: {user.Id}&#34;);&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So, should you count purging comments among your fetishes, more power to you:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat UserService.cs | srgn --csharp &#39;comments&#39; -d &#39;.*&#39; | srgn -d &#39;[[:blank:]]+\n&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The result is a tidy, yet taciturn:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System.Linq;&#xA;&#xA;public class UserService&#xA;{&#xA;    private readonly AppDbContext _dbContext;&#xA;&#xA;    public UserService(AppDbContext dbContext)&#xA;    {&#xA;        _dbContext  = dbContext;&#xA;    }&#xA;&#xA;    public void DoWork()&#xA;    {&#xA;        _dbContext.Database.EnsureCreated();&#xA;        _dbContext.Users.Add(new User  { Name = &#34;Alice&#34; });&#xA;&#xA;        _dbContext.SaveChanges();&#xA;&#xA;        var user = _dbContext.Users.Where( u =&amp;gt; u.Name == &#34;Alice&#34;).FirstOrDefault();&#xA;&#xA;        if (user  != null)&#xA;        {&#xA;            System.Console.WriteLine($&#34;Found user with ID: {user.Id}&#34;);&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note how all &lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/comments&#34;&gt;different&lt;/a&gt; &lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/xmldoc/&#34;&gt;sorts&lt;/a&gt; of comments were identified and removed. The second pass removes all leftover dangling lines (&lt;code&gt;[:blank:]&lt;/code&gt; is &lt;a href=&#34;https://docs.rs/regex/latest/regex/#ascii-character-classes&#34;&gt;tabs and spaces&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] When deleting (&lt;code&gt;-d&lt;/code&gt;), for reasons of safety and sanity, a scope is &lt;em&gt;required&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h5&gt;Custom queries&lt;/h5&gt; &#xA;&lt;p&gt;Custom queries allow you to create ad-hoc scopes. These might be useful, for example, to create small, ad-hoc, tailor-made linters, for example to catch code such as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if x:&#xA;    return left&#xA;else:&#xA;    return right&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;with an invocation of&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat cond.py | srgn --python-query &#39;(if_statement consequence: (block (return_statement (identifier))) alternative: (else_clause body: (block (return_statement (identifier))))) @cond&#39; --fail-any # will fail&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to hint that the code can be more idiomatically rewritten as &lt;code&gt;return left if x else right&lt;/code&gt;. Another example, this one in Go, is ensuring sensitive fields are not serialized:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;type User struct {&#xA;    Name     string `json:&#34;name&#34;`&#xA;    Token string `json:&#34;token&#34;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which can be caught as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat sensitive.go | srgn --go-query &#39;(field_declaration name: (field_identifier) @name tag: (raw_string_literal) @tag (#match? @name &#34;[tT]oken&#34;) (#not-eq? @tag &#34;`json:\&#34;-\&#34;`&#34;))&#39; --fail-any # will fail&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These matching expressions are a mouthful. A couple resources exist for getting started with your own queries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;the &lt;a href=&#34;https://tree-sitter.github.io/tree-sitter/using-parsers#pattern-matching-with-queries&#34;&gt;official docs on querying&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;the great &lt;a href=&#34;https://tree-sitter.github.io/tree-sitter/playground&#34;&gt;official playground&lt;/a&gt; for interactive use, which makes developing queries a breeze. For example, the above Go sample looks like:&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alexpovel/srgn/main/docs/images/tree-sitter-playground-go-example.png&#34; alt=&#34;tree-sitter playground go example&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://siraben.dev/2022/03/22/tree-sitter-linter.html&#34;&gt;&lt;em&gt;How to write a linter using tree-sitter in an hour&lt;/em&gt;&lt;/a&gt;, a great introduction to the topic in general&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;the official &lt;a href=&#34;https://github.com/tree-sitter/tree-sitter/raw/master/cli/README.md&#34;&gt;&lt;code&gt;tree-sitter&lt;/code&gt; CLI&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;using &lt;code&gt;srgn&lt;/code&gt; with high verbosity (&lt;code&gt;-vvvv&lt;/code&gt;) is supposed to grant detailed insights into what&#39;s happening to your input, including a &lt;a href=&#34;https://docs.rs/tree-sitter/latest/tree_sitter/struct.Node.html#method.to_sexp&#34;&gt;representation of the parsed tree&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Run against multiple files&lt;/h4&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;--files&lt;/code&gt; option to run against multiple files, in-place. This option accepts a &lt;a href=&#34;https://docs.rs/glob/0.3.1/glob/struct.Pattern.html&#34;&gt;glob pattern&lt;/a&gt;. The glob is processed &lt;em&gt;within &lt;code&gt;srgn&lt;/code&gt;&lt;/em&gt;: it must be quoted to prevent premature shell interpretation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;srgn&lt;/code&gt; will process results &lt;a href=&#34;https://github.com/rayon-rs/rayon&#34;&gt;fully parallel&lt;/a&gt;, using all available threads. For example, &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alexpovel/srgn/main/benches/django/&#34;&gt;450k lines of Python&lt;/a&gt; are processed in about a second&lt;/strong&gt;, altering over 1000 lines across a couple hundred files:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alexpovel/srgn/main/docs/images/files-benchmarks.png&#34; alt=&#34;hyperfine benchmarks for files option&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run the &lt;a href=&#34;https://raw.githubusercontent.com/alexpovel/srgn/main/benches/bench-files.sh&#34;&gt;benchmarks&lt;/a&gt; too see performance for your own system.&lt;/p&gt; &#xA;&lt;h4&gt;Explicit failure for (mis)matches&lt;/h4&gt; &#xA;&lt;p&gt;After all scopes are applied, it might turn out no matches were found. The default behavior is to silently succeed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;Some input...&#39; | srgn --delete &#39;\d&#39;&#xA;Some input...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The output matches the specification: all digits are removed. There just happened to be none. No matter how many actions are applied, &lt;strong&gt;the input is returned unprocessed&lt;/strong&gt; once this situation is detected. Hence, no unnecessary work is done.&lt;/p&gt; &#xA;&lt;p&gt;One might prefer receiving explicit feedback (exit code other than zero) on failure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#39;Some input...&#39; | srgn --delete --fail-none &#39;\d&#39;  # will fail&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The inverse scenario is also supported: &lt;strong&gt;failing if anything matched&lt;/strong&gt;. This is useful for checks (for example, in CI) against &#34;undesirable&#34; content. This works much like a custom, ad-hoc linter.&lt;/p&gt; &#xA;&lt;p&gt;Take for example &#34;old-style&#34; Python code, where type hints are not yet &lt;a href=&#34;https://docs.python.org/3/library/typing.html&#34;&gt;surfaced to the syntax-level&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def square(a):&#xA;    &#34;&#34;&#34;Squares a number.&#xA;&#xA;    :param a: The number (type: int or float)&#xA;    &#34;&#34;&#34;&#xA;&#xA;    return a**2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This style can be checked against and &#34;forbidden&#34; using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat oldtyping.py | srgn --python &#39;doc-strings&#39; --fail-any &#39;param.+type&#39;  # will fail&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Literal scope&lt;/h4&gt; &#xA;&lt;p&gt;This causes whatever was passed as the regex scope to be interpreted literally. Useful for scopes containing lots of special characters that otherwise would need to be escaped:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;stuff...&#39; | srgn -d --literal-string &#39;.&#39;&#xA;stuff&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Rust library&lt;/h2&gt; &#xA;&lt;p&gt;While this tool is CLI-first, it is library-very-close-second, and library usage is treated as a first-class citizen just the same. See the &lt;a href=&#34;https://docs.rs/srgn&#34;&gt;library documentation&lt;/a&gt; for more, library-specific details.&lt;/p&gt; &#xA;&lt;h3&gt;Status and stats&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.rs/srgn/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docsrs/srgn&#34; alt=&#34;docs.rs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/alexpovel/srgn&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/alexpovel/srgn/graph/badge.svg?token=IPU7L9BWMV&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/srgn&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/srgn.svg?sanitize=true&#34; alt=&#34;crates&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://deps.rs/repo/github/alexpovel/srgn&#34;&gt;&lt;img src=&#34;https://deps.rs/repo/github/alexpovel/srgn/status.svg?sanitize=true&#34; alt=&#34;dependency status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/XAMPPRocky/tokei#badges&#34;&gt;&lt;img src=&#34;https://tokei.rs/b1/github/alexpovel/srgn?category=code&#34; alt=&#34;Lines of Code&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hitsofcode.com/github/alexpovel/srgn/view?branch=main&#34;&gt;&lt;img src=&#34;https://hitsofcode.com/github/alexpovel/srgn?branch=main&#34; alt=&#34;Hits-of-Code&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note: these apply to the entire repository, including the &lt;a href=&#34;https://raw.githubusercontent.com/alexpovel/srgn/main/src/main.rs&#34;&gt;binary&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Code coverage icicle graph&lt;/h4&gt; &#xA;&lt;p&gt;The code is currently structured as (color indicates coverage):&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codecov.io/gh/alexpovel/srgn/graphs/icicle.svg?token=IPU7L9BWMV&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/alexpovel/srgn/graphs/icicle.svg?token=IPU7L9BWMV&#34; alt=&#34;Code coverage icile graph&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Hover over the rectangles for file names.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;To see how to build, refer to &lt;a href=&#34;https://raw.githubusercontent.com/alexpovel/srgn/main/#cargo-compile-from-source&#34;&gt;compiling from source&lt;/a&gt;. Otherwise, refer to the &lt;a href=&#34;https://raw.githubusercontent.com/alexpovel/srgn/main/CONTRIBUTING.md&#34;&gt;guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Similar tools&lt;/h2&gt; &#xA;&lt;p&gt;An unordered list of similar tools you might be interested in.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ast-grep/ast-grep&#34;&gt;&lt;code&gt;ast-grep&lt;/code&gt;&lt;/a&gt; (very similar)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://semgrep.dev/&#34;&gt;Semgrep&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facebookincubator/fastmod&#34;&gt;&lt;code&gt;fastmod&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/banga/prefactor&#34;&gt;&lt;code&gt;prefactor&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/paul-gauthier/grep-ast&#34;&gt;&lt;code&gt;grep-ast&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dalance/amber&#34;&gt;&lt;code&gt;amber&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chmln/sd&#34;&gt;&lt;code&gt;sd&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;&lt;code&gt;ripgrep&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/orf/ripgrep-structured&#34;&gt;&lt;code&gt;ripgrep-structured&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tree-sitter/tree-sitter/raw/master/cli/README.md&#34;&gt;tree-sitter CLI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tomnomnom/gron&#34;&gt;&lt;code&gt;gron&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://go-ruleguard.github.io/&#34;&gt;Ruleguard&lt;/a&gt; (quite different, but useful for custom linting)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rust-for-linux.com/coccinelle-for-rust&#34;&gt;Coccinelle for Rust&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Comparison with &lt;code&gt;tr&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;srgn&lt;/code&gt; is inspired by &lt;code&gt;tr&lt;/code&gt;, and in its simplest form behaves similarly, but not identically. In theory, &lt;code&gt;tr&lt;/code&gt; is quite flexible. In practice, it is commonly used mainly across a couple specific tasks. Next to its two positional arguments (&#39;arrays of characters&#39;), one finds four flags:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;-c&lt;/code&gt;, &lt;code&gt;-C&lt;/code&gt;, &lt;code&gt;--complement&lt;/code&gt;: complement the first array&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-d&lt;/code&gt;, &lt;code&gt;--delete&lt;/code&gt;: delete characters in the first first array&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-s&lt;/code&gt;, &lt;code&gt;--squeeze-repeats&lt;/code&gt;: squeeze repeats of characters in the first array&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-t&lt;/code&gt;, &lt;code&gt;--truncate-set1&lt;/code&gt;: truncate the first array to the length of the second&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;In &lt;code&gt;srgn&lt;/code&gt;, these are implemented as follows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;is not available directly as an option; instead, negation of regular expression classes can be used (e.g., &lt;code&gt;[^a-z]&lt;/code&gt;), to much more potent, flexible and well-known effect&lt;/li&gt; &#xA; &lt;li&gt;available (via regex)&lt;/li&gt; &#xA; &lt;li&gt;available (via regex)&lt;/li&gt; &#xA; &lt;li&gt;not available: it&#39;s inapplicable to regular expressions, not commonly used and, if used, often misused&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To show how uses of &lt;code&gt;tr&lt;/code&gt; found in the wild can translate to &lt;code&gt;srgn&lt;/code&gt;, consider the following section.&lt;/p&gt; &#xA;&lt;h3&gt;Use cases and equivalences&lt;/h3&gt; &#xA;&lt;p&gt;The following sections are the approximate categories much of &lt;code&gt;tr&lt;/code&gt; usage falls into. They were found using &lt;a href=&#34;https://cs.github.com&#34;&gt;GitHub&#39;s code search&lt;/a&gt;. The corresponding queries are given. Results are from the first page of results at the time. The code samples are links to their respective sources.&lt;/p&gt; &#xA;&lt;p&gt;As the stdin isn&#39;t known (usually dynamic), some representative samples are used and the tool is exercised on those.&lt;/p&gt; &#xA;&lt;h4&gt;Identifier Safety&lt;/h4&gt; &#xA;&lt;p&gt;Making inputs safe for use as identifiers, for example as variable names.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/search?type=code&amp;amp;q=%22tr+-c%22&#34;&gt;Query&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/grafana/grafana/raw/9328fda8ea8384e8cfcf1c78d1fe95d92bbad786/docs/make-docs#L234&#34;&gt;&lt;code&gt;tr -C &#39;[:alnum:]_\n&#39; &#39;_&#39;&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Translates to:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;some-variable? ü§î&#39; | srgn &#39;[^[:alnum:]_\n]&#39; &#39;_&#39;&#xA;some_variable___&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Similar examples are:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/elastic/go-elasticsearch/raw/594de0c207ef5c4804615ebedd043a789ef3ce75/.buildkite/functions/imports.sh#L38&#34;&gt;&lt;code&gt;tr -C &#34;[:alnum:]&#34; &#39;-&#39;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Homebrew/brew/raw/b2cf50bbe10ab996a1e3365545fadabf36df777a/Library/Homebrew/cmd/update.sh#L104&#34;&gt;&lt;code&gt;tr -C &#34;A-Za-z0-9&#34; &#34;_&#34;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/xamarin/xamarin-macios/raw/c14f9ff7c7693ab060c4b84c78075ff975ea7c64/Make.config#L69&#34;&gt;&lt;code&gt;tr -c &#39;[a-zA-Z0-9-]&#39; &#39;-&#39;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/openzfsonwindows/openzfs/raw/61f4ce826122f19a0a0c734efb4c2469b2aa367b/autogen.sh#L22&#34;&gt;&lt;code&gt;tr -C &#39;a-zA-Z0-9@_&#39; &#39;_&#39;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/freebsd/freebsd-src/raw/9dc0c983b0931f359c2ff10d47ad835ef74e929a/libexec/rc/rc.d/jail#L413&#34;&gt;&lt;code&gt;tr -c &#39;[:alnum:]&#39; _&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Translates to:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;some  variabl√™&#39; | srgn &#39;[^[:alnum:]]&#39; &#39;_&#39;&#xA;some__variabl_&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/weaviate/weaviate/raw/169381df70852ef687528ebf81e27869b3017403/ci/push_docker.sh#L26&#34;&gt;&lt;code&gt;tr -c -s &#39;[:alnum:]&#39; &#39;-&#39;&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Translates to:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;üôÇ hell√∂???&#39; | srgn -s &#39;[^[:alnum:]]&#39; &#39;-&#39;&#xA;-hell-&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Literal-to-literal translation&lt;/h4&gt; &#xA;&lt;p&gt;Translates a &lt;em&gt;single&lt;/em&gt;, literal character to another, for example to clean newlines.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/search?q=%22%7C+tr++%22+%28path%3A*.sh+OR+path%3A*.yml+OR+path%3A*.yaml%29&amp;amp;type=code&amp;amp;ref=advsearch&#34;&gt;Query&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/facebook/react-native/raw/d31d16b19cecb893a388fcb141602e8abad4aa76/packages/react-native/sdks/hermes-engine/utils/build-hermes-xcode.sh#L32&#34;&gt;&lt;code&gt;tr &#34; &#34; &#34;;&#34;&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Translates to:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;x86_64 arm64 i386&#39; | srgn &#39; &#39; &#39;;&#39;&#xA;x86_64;arm64;i386&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Similar examples are:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/eyedol/tools/raw/e940fe4484b486aa8d42a76d9305a9227bea7552/backup.sh#L11&#34;&gt;&lt;code&gt;tr &#39; &#39; &#39;-&#39;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/rerun/rerun/raw/aa5ad6360780ddbbb11835654e8f49b3827f15cd/modules/stubbs/lib/functions.sh#L147&#34;&gt;&lt;code&gt;tr &#39;-&#39; &#39;_&#39;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/SDA-SE/cluster-image-scanner/raw/a769be53eae423f57a7f34c429cfa3a2770a859e/images/scan/syft/build.sh#L16&#34;&gt;&lt;code&gt;tr &#39;.&#39; &#34;\n&#34;&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &lt;p&gt;Translates to:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;3.12.1&#39; | srgn --literal-string &#39;.&#39; &#39;\n&#39;  # Escape sequence works&#xA;3&#xA;12&#xA;1&#xA;$ echo &#39;3.12.1&#39; | srgn &#39;\.&#39; &#39;\n&#39;  # Escape regex otherwise&#xA;3&#xA;12&#xA;1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/gtoubassi/dqn-atari/raw/513b307039f4c28b5b517cd542ad625b41f0ef50/logstats.sh#L43&#34;&gt;&lt;code&gt;tr &#39;\n&#39; &#39;,&#39;&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Translates to:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo -ne &#39;Some\nMulti\nLine\nText&#39; | srgn --literal-string &#39;\n&#39; &#39;,&#39;&#xA;Some,Multi,Line,Text&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If escape sequences remain uninterpreted (&lt;code&gt;echo -E&lt;/code&gt;, the default), the scope&#39;s escape sequence will need to be turned into a literal &lt;code&gt;\&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt; as well, as it is otherwise interpreted by the tool as a newline:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo -nE &#39;Some\nMulti\nLine\nText&#39; | srgn --literal-string &#39;\\n&#39; &#39;,&#39;&#xA;Some,Multi,Line,Text&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Similar examples are:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/mhassan2/splunk-n-box/raw/a721af8b8ae6103a7b274651206d4812d37db398/scripts/viz.sh#L427&#34;&gt;&lt;code&gt;tr &#39;\n&#39; &#39; &#39;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ministryofjustice/modernisation-platform-configuration-management/raw/6a1dd9f31a62d68d796ae304165eed1fcb1b822e/ansible/roles/nomis-weblogic/tasks/patch-weblogic.yml#L13&#34;&gt;&lt;code&gt;tr &#34;\n&#34; &#34; &#34;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Removing a character class&lt;/h4&gt; &#xA;&lt;p&gt;Very useful to remove whole categories in one fell swoop.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/search?q=%22%7C+tr++%22+%28path%3A*.sh+OR+path%3A*.yml+OR+path%3A*.yaml%29&amp;amp;type=code&amp;amp;ref=advsearch&#34;&gt;Query&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/CNMAT/OpenSoundControl.org/raw/fb7b3b48ba9ac64eae030e3333f9a980f4f8fd59/build-implementations.sh#L98&#34;&gt;&lt;code&gt;tr -d &#39;[:punct:]&#39;&lt;/code&gt;&lt;/a&gt; which they &lt;a href=&#34;https://github.com/CNMAT/OpenSoundControl.org/raw/fb7b3b48ba9ac64eae030e3333f9a980f4f8fd59/build-implementations.sh#L94&#34;&gt;describe as&lt;/a&gt;:&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Omit all punctuation characters&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;translates to:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;Lots... of... punctuation, man.&#39; | srgn -d &#39;[[:punct:]]&#39;&#xA;Lots of punctuation man&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Lots of use cases also call for &lt;strong&gt;inverting&lt;/strong&gt;, then removing a character class.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/search?type=code&amp;amp;q=%22tr+-c%22&#34;&gt;Query&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/git/git/raw/d6c51973e4a0e889d1a426da08f52b9203fa1df2/t/lib-credential.sh#L542&#34;&gt;&lt;code&gt;tr -cd a-z&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Translates to:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;i RLY love LOWERCASING everything!&#39; | srgn -d &#39;[^[:lower:]]&#39;&#xA;iloveeverything&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/gitlabhq/gitlabhq/raw/e74bf51e817ee50e85b1bbdc34f0443d1088fd68/doc/user/project/service_desk/configure.md?plain=1#L553&#34;&gt;&lt;code&gt;tr -cd &#39;a-zA-Z0-9&#39;&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Translates to:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;All0wed ??? üí•&#39; | srgn -d &#39;[^[:alnum:]]&#39;&#xA;All0wed&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/coredns/coredns/raw/b5e6291115d1e60fed561c64d70341b354e69504/Makefile.release#L94&#34;&gt;&lt;code&gt;tr -cd &#39;[[:digit:]]&#39;&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Translates to:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;{&#34;id&#34;: 34987, &#34;name&#34;: &#34;Harold&#34;}&#39; | srgn -d &#39;[^[:digit:]]&#39;&#xA;34987&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Remove literal character(s)&lt;/h4&gt; &#xA;&lt;p&gt;Identical to replacing them with the empty string.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/search?q=%22%7C+tr+%22&amp;amp;type=code&amp;amp;ref=advsearch&#34;&gt;Query&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ohmyzsh/ohmyzsh/raw/079dbff2c4f22935a71101c511e2285327d8ab68/themes/gallois.zsh-theme#L82&#34;&gt;&lt;code&gt;tr -d &#34;.&#34;&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Translates to:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;1632485561.123456&#39; | srgn -d &#39;\.&#39;  # Unix timestamp&#xA;1632485561123456&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Similar examples are:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/jlevy/the-art-of-command-line/raw/6b50745d2e788add2e8f1ed29010e72659a9a074/README.md?plain=1#L22&#34;&gt;&lt;code&gt;tr -d &#39;\&lt;/code&gt;&#39;`&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/hfg-gmuend/openmoji/raw/9782be9d240513a3d609a4bd6f1176f2d7e1b804/helpers/lib/optimize-build.sh#L77&#34;&gt;&lt;code&gt;tr -d &#39; &#39;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/PaNOSC-ViNYL/SimEx/raw/0ca295ec57864c0e468eba849d3f44f992c59634/Docker/simex_devel/simex_install.sh#L44&#34;&gt;&lt;code&gt;tr -d &#39; &#39;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/kubernetes/raw/37cf2638c975080232990d2fc2c24d0f40c38074/cluster/gce/util.sh#L1690&#34;&gt;&lt;code&gt;tr -d &#39;\r\n&#39;&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Translates to:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo -e &#39;DOS-Style\r\n\r\nLines&#39; | srgn -d &#39;\r\n&#39;&#xA;DOS-StyleLines&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Similar examples are:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/mhassan2/splunk-n-box/raw/a721af8b8ae6103a7b274651206d4812d37db398/scripts/viz.sh#L427&#34;&gt;&lt;code&gt;tr -d &#39;\r&#39;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Cidaas/cidaas-shopware-connect-plugin/raw/519e21a9a385b26803ec442e2a8b59918a948f77/.gitlab-ci.yml#L43&#34;&gt;&lt;code&gt;tr -d &#39;\r&#39;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Squeeze whitespace&lt;/h4&gt; &#xA;&lt;p&gt;Remove repeated whitespace, as it often occurs when slicing and dicing text.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/search?type=code&amp;amp;q=%22+tr+-s%22&#34;&gt;Query&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ohmyzsh/ohmyzsh/raw/bbda81fe4b338f00bbf7c7f33e6d1b12d067dc05/plugins/alias-finder/alias-finder.plugin.zsh#L26&#34;&gt;&lt;code&gt;tr -s &#39;[:space:]&#39;&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Translates to:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;Lots   of  space !&#39; | srgn -s &#39;[[:space:]]&#39;  # Single space stays&#xA;Lots of space !&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Similar examples are:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/facebookresearch/fastText/raw/166ce2c71a497ff81cb62ec151be5b569e1f1be6/.circleci/pull_data.sh#L18&#34;&gt;&lt;code&gt;tr -s &#34; &#34;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Atmosphere-NX/Atmosphere/raw/4fe9a89ab8ed958a3e080d7ee11767bef9cb2d57/atmosphere.mk#L11&#34;&gt;&lt;code&gt;tr -s [:blank:]&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;blank&lt;/code&gt; is &lt;code&gt;\t&lt;/code&gt; and space)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/kovidgoyal/kitty/raw/863adb3e8d8e7229610c6b0e6bc8d48db9becda5/kitty/rc/get_colors.py#L28&#34;&gt;&lt;code&gt;tr -s&lt;/code&gt;&lt;/a&gt; (no argument: this will error out; presumably space was meant)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/google/jax/raw/bf40f75bd59501d66a0e500d255daca3f9f2895e/build/rocm/build_rocm.sh#L65&#34;&gt;&lt;code&gt;tr -s &#39; &#39;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/chromium/chromium/raw/ffed2601d91f4413ca4672a6027c2c05d49df815/docs/linux/minidump_to_core.md?plain=1#L111&#34;&gt;&lt;code&gt;tr -s &#39; &#39;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ceph/ceph/raw/6c387554d8e104727b3e448a1def4f1991be1ff7/src/stop.sh#L188&#34;&gt;&lt;code&gt;tr -s &#39;[:space:]&#39;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/PyO3/pyo3/raw/8f4a26a66ecee4cfa473ada8cb27a57c4533d04f/.netlify/build.sh#L7&#34;&gt;&lt;code&gt;tr -s &#39; &#39;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/doocs/leetcode/raw/4f89e08ed45f7d5e1047767071001073ffe4d32b/solution/0100-0199/0192.Word%20Frequency/README.md?plain=1#L54&#34;&gt;&lt;code&gt;tr -s &#39; &#39; &#39;\n&#39;&lt;/code&gt;&lt;/a&gt; (squeeze, &lt;em&gt;then replace&lt;/em&gt;)&lt;/p&gt; &lt;p&gt;Translates to:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;1969-12-28    13:37:45Z&#39; | srgn -s &#39; &#39; &#39;T&#39;  # ISO8601&#xA;1969-12-28T13:37:45Z&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/cockroachdb/cockroach/raw/985662236d7bf273b93a7b5e32def8e2d1043640/docs/generated/http/BUILD.bazel#L76&#34;&gt;&lt;code&gt;tr -s &#39;[:blank:]&#39; &#39;:&#39;&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Translates to:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo -e &#39;/usr/local/sbin \t /usr/local/bin&#39; | srgn -s &#39;[[:blank:]]&#39; &#39;:&#39;&#xA;/usr/local/sbin:/usr/local/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Changing character casing&lt;/h4&gt; &#xA;&lt;p&gt;A straightforward use case. Upper- and lowercase are often used.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/search?q=%22%7C+tr++%22+%28path%3A*.sh+OR+path%3A*.yml+OR+path%3A*.yaml%29&amp;amp;type=code&amp;amp;ref=advsearch&#34;&gt;Query&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/golang/go/raw/a742ae493ff59a71131706500ce53f85477897f0/src/encoding/xml/xml.go#L1874&#34;&gt;&lt;code&gt;tr A-Z a-z&lt;/code&gt;&lt;/a&gt; (lowercasing)&lt;/p&gt; &lt;p&gt;Translates to:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;WHY ARE WE YELLING?&#39; | srgn --lower&#xA;why are we yelling?&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Notice the default scope. It can be refined to lowercase only long words, for example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;WHY ARE WE YELLING?&#39; | srgn --lower &#39;\b\w{,3}\b&#39;&#xA;why are we YELLING?&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Similar examples are:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/nwchemgit/nwchem/raw/aad4ecd5657055b085b57115314e4d56271ad749/travis/guess_simd.sh#L13&#34;&gt;&lt;code&gt;tr &#39;A-Z&#39; &#39;a-z&#39;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/XIMDEX/xcms/raw/4dd3c055de5cb0eebed28f1e9da87ed731a44a99/bin/lib/util.sh#L47&#34;&gt;&lt;code&gt;tr &#39;[A-Z]&#39; &#39;[a-z]&#39;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/varunjampani/video_prop_networks/raw/4f4a39842bd9112932abe40bad746c174a242bf6/lib/davis/configure.sh#L30&#34;&gt;&lt;code&gt;tr &#39;[A-Z]&#39; &#39;[a-z]&#39;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/PaNOSC-ViNYL/SimEx/raw/0ca295ec57864c0e468eba849d3f44f992c59634/Docker/simex_devel/simex_install.sh#L44&#34;&gt;&lt;code&gt;tr &#39;[:upper:]&#39; &#39;[:lower:]&#39;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/tst-labs/esocial/raw/b678f59bba883a63e91be79d7f2853a57156cf7b/src/esocial-esquemas/generate-java-from-xsd.sh#L11&#34;&gt;&lt;code&gt;tr &#34;[:upper:]&#34; &#34;[:lower:]&#34;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/henrikpersson/potatis/raw/63feb9de28781e4e9c62bd091bd335b87b474cb1/nes-android/install.sh#L10&#34;&gt;&lt;code&gt;tr &#39;[a-z]&#39; &#39;[A-Z]&#39;&lt;/code&gt;&lt;/a&gt; (uppercasing)&lt;/p&gt; &lt;p&gt;Translates to:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;why are we not yelling?&#39; | srgn --upper&#xA;WHY ARE WE NOT YELLING?&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Similar examples are:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/basho/riak-zabbix/raw/423e21c31821a345bf59ec4b2baba06d532a7f30/build_templates.sh#L40&#34;&gt;&lt;code&gt;tr &#39;[a-z]&#39; &#39;[A-Z]&#39;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Fivium/Oracle-Backup-and-Sync/raw/036aace4a8eb45ab7e6e226ddceb08f35c46b9f3/dbsync/scripts/dbsync.sh#L122&#34;&gt;&lt;code&gt;tr &#34;[:lower:]&#34; &#34;[:upper:]&#34;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/jorgeazevedo/xenomai-lab/raw/a2ce85a86f37fd9762905026ce4a1542684c714b/data/.xenomailab/blocks/template/rename.sh#L5&#34;&gt;&lt;code&gt;tr &#34;[:lower:]&#34; &#34;[:upper:]&#34;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;[^1]: Currently, reversibility is not possible for any other action. For example, lowercasing is not the inverse of uppercasing. Information is lost, so it cannot be undone. Structure (imagine mixed case) was lost. Something something entropy... [^2]: Why is such a bizzare, unrelated feature included? As usual, historical reasons. The original, core version of &lt;code&gt;srgn&lt;/code&gt; was merely a Rust rewrite of &lt;a href=&#34;https://github.com/alexpovel/betterletter&#34;&gt;a previous, existing tool&lt;/a&gt;, which was &lt;em&gt;only&lt;/em&gt; concerned with the &lt;em&gt;German&lt;/em&gt; feature. &lt;code&gt;srgn&lt;/code&gt; then grew from there.&lt;/p&gt;</summary>
  </entry>
</feed>