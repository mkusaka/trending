<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-27T01:42:35Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>fishfolk/jumpy</title>
    <updated>2023-05-27T01:42:35Z</updated>
    <id>tag:github.com,2023-05-27:/fishfolk/jumpy</id>
    <link href="https://github.com/fishfolk/jumpy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tactical 2D shooter in fishy pixels style. Made with Rust-lang ðŸ¦€ and Bevy ðŸª¶&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Fish Folk: Jumpy&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/fishfolk/jumpy/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/fishfolk/jumpy/ci.yml?logo=github&amp;amp;labelColor=1e1c24&amp;amp;color=8bcfcf&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://fishfolk.github.io/jumpy/book&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/documentation-fishfolk.github.io-green.svg?labelColor=1e1c24&amp;amp;color=f3ee7a&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/fishfolk/jumpy/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT%20or%20Apache%202-green.svg?label=license&amp;amp;labelColor=1e1c24&amp;amp;color=34925e&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/4smxjcheE5&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-on%20discord-green.svg?logo=discord&amp;amp;logoColor=fff&amp;amp;labelColor=1e1c24&amp;amp;color=8d5b3f&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24392180/151969075-399e9fea-e2de-4340-96a4-0a0e5b79c281.gif&#34; alt=&#34;Fish Folk: Jumpy Preview&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;ðŸ‘‰ &lt;strong&gt;&lt;a href=&#34;https://www.kickstarter.com/projects/erlendsh/fish-folk&#34;&gt;Live on Kickstarter!&lt;/a&gt;&lt;/strong&gt; ðŸ‘ˆ&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Fish Folk: Jumpy is a tactical 2D shooter, played by up to 4 players online or on a shared screen. Aim either left or right; the rest is up to clever movement and positioning in this fish-on-fish brawler! For more information about our origin story (Duck Game et.al.) and big-picture plans, see our &lt;a href=&#34;https://www.notion.so/erlendsh/Fish-Fight-1647ed74217e4e38a59bd28f4f5bc81a&#34;&gt;design document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Web Demo&lt;/h2&gt; &#xA;&lt;p&gt;Jumpy runs in the browser! You can play &lt;a href=&#34;https://fishfolk.github.io/jumpy/player/latest/&#34;&gt;web demo&lt;/a&gt; to try out the game, without needing to install anything on your computer.&lt;/p&gt; &#xA;&lt;p&gt;We recommend using the Chrome browser or other derivatives for best performance, or if you have issues with other browsers.&lt;/p&gt; &#xA;&lt;h3&gt;Key Features (WIP)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2 to 4 players in either Local Multiplayer or Online Play&lt;/li&gt; &#xA; &lt;li&gt;Easy to pick up, emphasizing strategy over twitch reaction&lt;/li&gt; &#xA; &lt;li&gt;Customize characters with hats, saved to your cross-platform profile&lt;/li&gt; &#xA; &lt;li&gt;Create &amp;amp; explore user-made weapons, levels, audio and other scripted extensions&lt;/li&gt; &#xA; &lt;li&gt;Smart level creation tools&lt;/li&gt; &#xA; &lt;li&gt;Tournaments &amp;amp; matchmaking built in&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Status&lt;/h3&gt; &#xA;&lt;p&gt;The game is currently under re-construction as it is being rewritten to use the &lt;a href=&#34;https://bevyengine.org&#34;&gt;Bevy&lt;/a&gt; game engine. There are now 4 stable maps and 4 items in the new version, and the game is nearly ready for another release.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;Anyone involved in the Fish Folk community must follow our &lt;a href=&#34;https://github.com/fishfolk/jumpy/raw/main/CODE_OF_CONDUCT.md&#34;&gt;code of conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to make something for Fish Folk, check out our &lt;a href=&#34;https://github.com/fishfolk/jumpy/labels/help%20wanted&#34;&gt;help-wanted&lt;/a&gt; issues or just ask us on &lt;a href=&#34;https://discord.gg/4smxjcheE5&#34;&gt;Discord&lt;/a&gt;. We&#39;ll soon post an updated roadmap for the next month or two of work ahead.&lt;/p&gt; &#xA;&lt;p&gt;Before committing and opening a PR, please run the following commands and follow their instructions:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;cargo clippy -- -W clippy::correctness -D warnings&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cargo fmt&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Development Build Profiles&lt;/h3&gt; &#xA;&lt;p&gt;By default, Jumpy will build without optimizations for the &lt;code&gt;jumpy_core&lt;/code&gt; and &lt;code&gt;jumpy&lt;/code&gt; crates. This helps reduce re-compile times at the expense of some runtime performance. If you need increased runtime performance during development, you can build with the &lt;code&gt;--profile dev-optimized&lt;/code&gt; option, to optimize all of the crates:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo r --profile dev-optimized&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Learning Materials&lt;/h3&gt; &#xA;&lt;h4&gt;Rust&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cleancut.github.io/rusty_engine/&#34;&gt;Rusty Engine Tutorial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sokoban.iolivia.me/&#34;&gt;Rust sokoban&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pragprog.com/titles/hwrust/hands-on-rust/&#34;&gt;https://pragprog.com/titles/hwrust/hands-on-rust/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Bevy&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bevy-cheatbook.github.io/&#34;&gt;Unofficial Bevy Cheat Book&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Download &amp;amp; play&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the latest version from the &lt;a href=&#34;https://github.com/fishfolk/jumpy/releases&#34;&gt;releases&lt;/a&gt; page.&lt;/li&gt; &#xA; &lt;li&gt;Extract the archive and run the executable. (e.g. &lt;code&gt;./jumpy&lt;/code&gt; or &lt;code&gt;jumpy.exe&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Launcher&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/spicylobstergames/SpicyLauncher&#34;&gt;A cross-platform launcher&lt;/a&gt; is also available for downloading and launching the game easily.&lt;/p&gt; &#xA;&lt;h3&gt;Distro Packages&lt;/h3&gt; &#xA;&lt;h4&gt;Arch Linux&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pacman -S jumpy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Rust with &lt;a href=&#34;https://rustup.rs/&#34;&gt;rustup.rs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clone this repository: &lt;code&gt;git clone https://github.com/fishfolk/jumpy.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd jumpy&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cargo run&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fishfolk/jumpy/main/CREDITS.md&#34;&gt;Fish Folk: Jumpy Credits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Input Icons: &lt;a href=&#34;https://kadith.itch.io/kadiths-free-icons&#34;&gt;Kadith&#39;s Icons&lt;/a&gt; by Kadith&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>paritytech/frontier</title>
    <updated>2023-05-27T01:42:35Z</updated>
    <id>tag:github.com,2023-05-27:/paritytech/frontier</id>
    <link href="https://github.com/paritytech/frontier" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ethereum compatibility layer for Substrate.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Frontier&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/paritytech/frontier/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/paritytech/frontier/rust.yml&#34; alt=&#34;GitHub Workflow Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://matrix.to/#/#frontier:matrix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/matrix/frontier:matrix.org&#34; alt=&#34;Matrix&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Frontier is Substrate&#39;s Ethereum compatibility layer. It allows you to run unmodified Ethereum dapps.&lt;/p&gt; &#xA;&lt;p&gt;The goal of Ethereum compatibility layer is to be able to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run a normal web3 application via the compatibility layer, using local nodes, where an extra bridge binary is acceptable.&lt;/li&gt; &#xA; &lt;li&gt;Be able to import state from Ethereum mainnet.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;h3&gt;Primitives&lt;/h3&gt; &#xA;&lt;p&gt;Those are suitable to be included in a runtime. Primitives are structures shared by higher-level code.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;fp-consensus&lt;/code&gt;: Consensus layer primitives. &lt;img src=&#34;https://img.shields.io/crates/v/fp-consensus&#34; alt=&#34;Crates.io&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fp-evm&lt;/code&gt;: EVM primitives. &lt;img src=&#34;https://img.shields.io/crates/v/fp-evm&#34; alt=&#34;Crates.io&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fp-rpc&lt;/code&gt;: RPC primitives. &lt;img src=&#34;https://img.shields.io/crates/v/fp-rpc&#34; alt=&#34;Crates.io&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fp-storage&lt;/code&gt;: Well-known storage information. &lt;img src=&#34;https://img.shields.io/crates/v/fp-storage&#34; alt=&#34;Crates.io&#34;&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Pallets&lt;/h3&gt; &#xA;&lt;p&gt;Those pallets serve as runtime components for projects using Frontier.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;pallet-evm&lt;/code&gt;: EVM execution handling. &lt;img src=&#34;https://img.shields.io/crates/v/pallet-evm&#34; alt=&#34;Crates.io&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pallet-ethereum&lt;/code&gt;: Ethereum block handling. &lt;img src=&#34;https://img.shields.io/crates/v/pallet-ethereum&#34; alt=&#34;Crates.io&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pallet-dynamic-fee&lt;/code&gt;: Extends the fee handling logic so that it can be changed within the runtime. &lt;img src=&#34;https://img.shields.io/crates/v/pallet-dynamic-fee&#34; alt=&#34;Crates.io&#34;&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;EVM Pallet precompiles&lt;/h3&gt; &#xA;&lt;p&gt;Those precompiles can be used together with &lt;code&gt;pallet-evm&lt;/code&gt; for additional functionalities of the EVM executor.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;pallet-evm-precompile-simple&lt;/code&gt;: Four basic precompiles in Ethereum EVMs. &lt;img src=&#34;https://img.shields.io/crates/v/pallet-evm-precompile-simple&#34; alt=&#34;Crates.io&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pallet-evm-precompile-blake2&lt;/code&gt;: BLAKE2 precompile. &lt;img src=&#34;https://img.shields.io/crates/v/pallet-evm-precompile-blake2&#34; alt=&#34;Crates.io&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pallet-evm-precompile-bn128&lt;/code&gt;: BN128 precompile. &lt;img src=&#34;https://img.shields.io/crates/v/pallet-evm-precompile-bn128&#34; alt=&#34;Crates.io&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pallet-evm-precompile-ed25519&lt;/code&gt;: ED25519 precompile. &lt;img src=&#34;https://img.shields.io/crates/v/pallet-evm-precompile-ed25519&#34; alt=&#34;Crates.io&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pallet-evm-precompile-modexp&lt;/code&gt;: MODEXP precompile. &lt;img src=&#34;https://img.shields.io/crates/v/pallet-evm-precompile-modexp&#34; alt=&#34;Crates.io&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pallet-evm-precompile-sha3fips&lt;/code&gt;: Standard SHA3 precompile. &lt;img src=&#34;https://img.shields.io/crates/v/pallet-evm-precompile-sha3fips&#34; alt=&#34;Crates.io&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pallet-evm-precompile-dispatch&lt;/code&gt;: Enable interoperability between EVM contracts and other Substrate runtime components. &lt;img src=&#34;https://img.shields.io/crates/v/pallet-evm-precompile-dispatch&#34; alt=&#34;Crates.io&#34;&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Client-side libraries&lt;/h3&gt; &#xA;&lt;p&gt;Those are libraries that should be used on client-side to enable RPC, block hash mapping, and other features.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;fc-consensus&lt;/code&gt;: Consensus block import. &lt;img src=&#34;https://img.shields.io/crates/v/fc-consensus&#34; alt=&#34;Crates.io&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fc-db&lt;/code&gt;: Frontier-specific database backend. &lt;img src=&#34;https://img.shields.io/crates/v/fc-db&#34; alt=&#34;Crates.io&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fc-mapping-sync&lt;/code&gt;: Block hash mapping syncing logic. &lt;img src=&#34;https://img.shields.io/crates/v/fc-mapping-sync&#34; alt=&#34;Crates.io&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fc-rpc-core&lt;/code&gt;: Core RPC logic. &lt;img src=&#34;https://img.shields.io/crates/v/fc-rpc-core&#34; alt=&#34;Crates.io&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fc-rpc&lt;/code&gt;: RPC implementation. &lt;img src=&#34;https://img.shields.io/crates/v/fc-rpc&#34; alt=&#34;Crates.io&#34;&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development workflow&lt;/h2&gt; &#xA;&lt;h3&gt;Pull request&lt;/h3&gt; &#xA;&lt;p&gt;All changes (except new releases) are handled through pull requests.&lt;/p&gt; &#xA;&lt;h3&gt;Versioning&lt;/h3&gt; &#xA;&lt;p&gt;Frontier follows &lt;a href=&#34;https://semver.org/&#34;&gt;Semantic Versioning&lt;/a&gt;. An unreleased crate in the repository will have the &lt;code&gt;-dev&lt;/code&gt; suffix in the end, and we do rolling releases.&lt;/p&gt; &#xA;&lt;p&gt;When you make a pull request against this repository, please also update the affected crates&#39; versions, using the following rules. Note that the rules should be applied recursively -- if a change modifies any upper crate&#39;s dependency (even just the &lt;code&gt;Cargo.toml&lt;/code&gt; file), then the upper crate will also need to apply those rules.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, if your change is notable, then you should also modify the corresponding &lt;code&gt;CHANGELOG.md&lt;/code&gt; file, in the &#34;Unreleased&#34; section.&lt;/p&gt; &#xA;&lt;p&gt;If the affected crate already has &lt;code&gt;-dev&lt;/code&gt; suffix:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If your change is a patch, then you do not have to update any versions.&lt;/li&gt; &#xA; &lt;li&gt;If your change introduces a new feature, please check if the local version already had its minor version bumped, if not, bump it.&lt;/li&gt; &#xA; &lt;li&gt;If your change modifies the current interface, please check if the local version already had its major version bumped, if not, bump it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If the affected crate does not yet have &lt;code&gt;-dev&lt;/code&gt; suffix:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If your change is a patch, then bump the patch version, and add &lt;code&gt;-dev&lt;/code&gt; suffix.&lt;/li&gt; &#xA; &lt;li&gt;If your change introduces a new feature, then bump the minor version, and add &lt;code&gt;-dev&lt;/code&gt; suffix.&lt;/li&gt; &#xA; &lt;li&gt;If your change modifies the current interface, then bump the major version, and add &lt;code&gt;-dev&lt;/code&gt; suffix.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If your pull request introduces a new crate, please set its version to &lt;code&gt;1.0.0-dev&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>