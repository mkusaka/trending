<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-24T01:44:19Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>RibirX/Ribir</title>
    <updated>2023-02-24T01:44:19Z</updated>
    <id>tag:github.com,2023-02-24:/RibirX/Ribir</id>
    <link href="https://github.com/RibirX/Ribir" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ribir is a framework for building modern native/wasm cross-platform user interface application.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/RibirX/Ribir/master/website/static/img/logo-animation.gif&#34; width=&#34;480px&#34;&gt; &#xA; &lt;!-- # Ribir --&gt; &#xA; &lt;p&gt;Ribir is a framework for building modern native/wasm cross-platform user interface applications.&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/RibirX/Ribir/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt; &lt;a href=&#34;https://codecov.io/gh/RibirX/ribir&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/RibirX/Ribir/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/RibirX/ribir/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-informational&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://ribir.org/docs/introduction&#34;&gt;Documents&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/RibirX/Ribir/master/ribir/examples/&#34;&gt;Examples&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Principles&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Non-injection and Non-invasive&lt;/strong&gt;: Ribir interacts with the APIs of your data structure, and does not require you to do any pre-design for the user interface. Developers can focus on designing the data struct, logic and APIs. Ribir will neither break your existing logic nor require injecting any of its own objects.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Declarative&lt;/strong&gt;: The user interface is the description of data, the description will automatically react to the data modification. Once you describe your data, the description will keep describing your data.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Purely composed&lt;/strong&gt;: Ribir creates UI via widgets. There is not a base-object, even if the built-in fields are provided in a composed way. For example, only if you use &lt;code&gt;margin&lt;/code&gt; field, the &lt;code&gt;Margin&lt;/code&gt; widget will be composed, if you do not use it, you don&#39;t pay any overhead for &lt;code&gt;Margin&lt;/code&gt;. &#34;Only pay for what you need&#34; is an important guideline for Ribir.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;At First Glance&lt;/h2&gt; &#xA;&lt;div style=&#34;display:inline-block;&#34;&gt; &#xA; &lt;div style=&#34;float:left;height:400px;overflow:scroll; &#34;&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use ribir::prelude::*;&#xA;&#xA;fn main() {&#xA;  let w = widget! {&#xA;    init ctx =&amp;gt; {&#xA;      let ease_in = transitions::EASE_IN.of(ctx);&#xA;      let headline3_style = TypographyTheme::of(ctx).headline3.text.clone();&#xA;    }&#xA;    states {&#xA;      cnt: Stateful::new(0_i32),&#xA;    }&#xA;    Column {&#xA;      Row {&#xA;        margin: EdgeInsets::all(2.),&#xA;        Button {&#xA;          on_tap: move |_| *cnt += 1,&#xA;          margin: EdgeInsets::only_right(2.),&#xA;          ButtonText::new(&#34;Add&#34;)&#xA;        }&#xA;        Button {&#xA;          on_tap: move |_| *cnt -= 1,&#xA;          margin: EdgeInsets::only_right(2.),&#xA;          ButtonText::new(&#34;Sub&#34;)&#xA;        }&#xA;      }&#xA;      Row {&#xA;        Text { text: &#34;current count:&#34; }&#xA;        Text {&#xA;          id: text,&#xA;          text: {&#xA;            let cnt = *cnt;&#xA;            format!(&#34;{cnt}&#34;)&#xA;          },&#xA;          style: headline3_style,&#xA;        }&#xA;      }&#xA;    }&#xA;    Animate {&#xA;      id: animate,&#xA;      transition: ease_in,&#xA;      prop: prop!(text.transform),&#xA;      from: Transform::translation(0., text.layout_height() * -2.)&#xA;    }&#xA;    finally {&#xA;      let_watch!(*cnt)&#xA;        .subscribe(move |_| animate.run());&#xA;    }&#xA;  };&#xA;  app::run(w);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/div&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/RibirX/Ribir/master/website/static/img/counter_demo.gif&#34; style=&#34;float:right;&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;More &lt;a href=&#34;https://raw.githubusercontent.com/RibirX/Ribir/master/ribir/examples/&#34;&gt;Examples&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Write once run anywhere&lt;/strong&gt;: Compile native code for desktop and mobile(not yet), and WASM for Web(not yet). Since Ribir has rather few platform dependencies, it&#39;s not hard to support more platforms by yourself.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Declarative language expanded from Rust syntax&lt;/strong&gt;: The declarative language is based on Rust, so interaction with Rust becomes natural and easy.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Easy custom widget&lt;/strong&gt;: Ribir supports the implementation of custom &lt;code&gt;Compose&lt;/code&gt;, &lt;code&gt;Render&lt;/code&gt; and &lt;code&gt;ComposeChild&lt;/code&gt; widgets, you only need to implement the corresponding traits. Evenmore, you are able to specify the template of the children of &lt;code&gt;ComposeChild&lt;/code&gt;, just by deriving the &lt;code&gt;Template&lt;/code&gt; traits.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Powerful custom theme&lt;/strong&gt;: Specify the theme for the whole application or partial subtree. In the theme, you can configure the palette, icons, animate transitions, widget custom themes, the interactive behavior of widget and even compose more decoration widgets on it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Rich available official widgets&lt;/strong&gt;: A &lt;code&gt;ribir_widgets&lt;/code&gt; library existsï¼Œcontaining common desktop and mobile widgets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;No side effect animations&lt;/strong&gt;: Animation in Ribir is only a visual effect, that won&#39;t affect data. Animate support for any render widgets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Alternative rendering backends&lt;/strong&gt;: The rendering backend is replaceable, you can implement your own rendering to output image, html, svg or any other stuff. Ribir provides developers with a gpu backend basing on &lt;a href=&#34;https://github.com/gfx-rs/wgpu&#34;&gt;wgpu&lt;/a&gt; and perhaps a soft(cpu) render in the future.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support Platform&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Support situation&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macOS&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;iOS&lt;/td&gt; &#xA;   &lt;td&gt;ðŸš§ Not yet&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Android&lt;/td&gt; &#xA;   &lt;td&gt;ðŸš§ Not yet&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Web&lt;/td&gt; &#xA;   &lt;td&gt;ðŸš§ Not yet&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We are grateful to the community for contributing bug fixes and improvements.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;ðŸ˜Ž New to Ribir?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Start learning about the framework by helping us improve our &lt;a href=&#34;https://ribir.org/docs/introduction&#34;&gt;documentation&lt;/a&gt;. Feel free to open a &lt;a href=&#34;https://github.com/RibirX/Ribir/issues/new/choose&#34;&gt;new &#34;Documentation&#34; issue&lt;/a&gt;. We are also very welcome:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Point out to us where our document has misunderstandings&lt;/li&gt; &#xA; &lt;li&gt;Pull requests which improve test coverage&lt;/li&gt; &#xA; &lt;li&gt;Add undocumented code (e.g. built-in widget)&lt;/li&gt; &#xA; &lt;li&gt;Report typo&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more information please readï¼š&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RibirX/Ribir/master/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developers.google.com/blockly/guides/contribute/get-started/write_a_good_issue&#34;&gt;Writing a Good Issue&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;ðŸ¤” Confused about something?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Feel free to go to Discussions and open a &lt;a href=&#34;https://github.com/RibirX/Ribir/discussions/new/choose&#34;&gt;new &#34;Q&amp;amp;A&#34;&lt;/a&gt; to get help from contributors. Often questions lead to improvements to the ergonomics of the framework, better documentation, and even new features!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;ðŸ˜± Found a bug?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please &lt;a href=&#34;https://github.com/RibirX/Ribir/issues/new/choose&#34;&gt;report all bugs&lt;/a&gt;! We are happy to help support developers fix the bugs they find if they are interested and have the time.&lt;/p&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute:&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/RibirX/Ribir/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=RibirX/Ribir&#34; height=&#34;50px&#34;&gt; &lt;/a&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;We also found inspiration from the following frameworks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flutter.dev/&#34;&gt;Flutter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://doc.qt.io/qt-6/qtqml-index.html&#34;&gt;QML&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Ribir is &lt;a href=&#34;https://raw.githubusercontent.com/RibirX/Ribir/master/LICENSE&#34;&gt;MIT licensed&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>twistedfall/opencv-rust</title>
    <updated>2023-02-24T01:44:19Z</updated>
    <id>tag:github.com,2023-02-24:/twistedfall/opencv-rust</id>
    <link href="https://github.com/twistedfall/opencv-rust" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rust bindings for OpenCV 3 &amp; 4&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rust OpenCV bindings&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/twistedfall/opencv-rust/actions?query=workflow%3Aopencv-rust&#34;&gt;&lt;img src=&#34;https://github.com/twistedfall/opencv-rust/workflows/opencv-rust/badge.svg?sanitize=true&#34; alt=&#34;Github Actions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/opencv&#34;&gt;&lt;img src=&#34;https://docs.rs/opencv/badge.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/opencv&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/opencv.svg?sanitize=true&#34; alt=&#34;Package&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Experimental Rust bindings for OpenCV 3 and 4.&lt;/p&gt; &#xA;&lt;p&gt;The API is usable, but unstable and not very battle-tested; use at your own risk.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/twistedfall/opencv-rust/raw/master/CHANGES.md&#34;&gt;Changelog&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Make sure the supported OpenCV version (3.4 or 4.x) and Clang (part of LLVM, needed for automatic binding generation) are installed in your system.&lt;/p&gt; &#xA;&lt;p&gt;Update your Cargo.toml&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;opencv = &#34;0.77.0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Import prelude&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use opencv::prelude::*;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting OpenCV&lt;/h2&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;h4&gt;Arch Linux:&lt;/h4&gt; &#xA;&lt;p&gt;OpenCV package in Arch is suitable for this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pacman -S clang qt5-base opencv&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;and additionally to support more OpenCV modules:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pacman -S vtk glew fmt openmpi&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Ubuntu:&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;apt install libopencv-dev clang libclang-dev&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Other Linux:&lt;/h4&gt; &#xA;&lt;p&gt;You have several options of getting the OpenCV library:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;install it from the repository, make sure to install &lt;code&gt;-dev&lt;/code&gt; packages because they contain headers necessary for the crate build (also check that your package contains &lt;code&gt;pkg_config&lt;/code&gt; or &lt;code&gt;cmake&lt;/code&gt; files).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;build OpenCV manually and set up the following environment variables prior to building the project with &lt;code&gt;opencv&lt;/code&gt; crate:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;PKG_CONFIG_PATH&lt;/code&gt; for the location of &lt;code&gt;*.pc&lt;/code&gt; files or &lt;code&gt;OpenCV_DIR&lt;/code&gt; for the location of &lt;code&gt;*.cmake&lt;/code&gt; files&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; for where to look for the installed &lt;code&gt;*.so&lt;/code&gt; files during runtime&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally, please make sure to install &lt;code&gt;clang&lt;/code&gt; package or its derivative that contains &lt;code&gt;libclang.so&lt;/code&gt; and &lt;code&gt;clang&lt;/code&gt; binary.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Gentoo, Fedora: &lt;code&gt;clang&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Debian, Ubuntu: &lt;code&gt;clang&lt;/code&gt; and &lt;code&gt;libclang-dev&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Windows package&lt;/h3&gt; &#xA;&lt;p&gt;Installing OpenCV is easy through the following sources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;from &lt;a href=&#34;https://chocolatey.org&#34;&gt;chocolatey&lt;/a&gt;, also install &lt;code&gt;llvm&lt;/code&gt; package, it&#39;s required for building:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;choco install llvm opencv&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;also set &lt;code&gt;OPENCV_LINK_LIBS&lt;/code&gt;, &lt;code&gt;OPENCV_LINK_PATHS&lt;/code&gt; and &lt;code&gt;OPENCV_INCLUDE_PATHS&lt;/code&gt; environment variables (see below for details).&lt;/p&gt; &lt;p&gt;Also, check the user guides &lt;a href=&#34;https://github.com/twistedfall/opencv-rust/issues/118#issuecomment-619608278&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://github.com/twistedfall/opencv-rust/issues/113#issue-596076777&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;from &lt;a href=&#34;https://docs.microsoft.com/en-us/cpp/build/vcpkg&#34;&gt;vcpkg&lt;/a&gt;, also install &lt;code&gt;llvm&lt;/code&gt; package, necessary for building:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;vcpkg install llvm opencv4[contrib,nonfree]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You most probably want to set environment variable &lt;code&gt;VCPKGRS_DYNAMIC&lt;/code&gt; to &#34;1&#34; unless you&#39;re specifically targeting a static build.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;macOS package&lt;/h3&gt; &#xA;&lt;p&gt;Get OpenCV from homebrew:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://brew.sh&#34;&gt;homebrew&lt;/a&gt;: &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install opencv&#xA;&lt;/code&gt;&lt;/pre&gt; You will also need a working C++ compiler and libclang, you can install Command Line Tools (&lt;code&gt;xcode-select --install&lt;/code&gt;), XCode (from AppStore) or &lt;code&gt;llvm&lt;/code&gt; (from Brew). You most probably need to also check the item 6 of the troubleshooting below.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Manual build&lt;/h3&gt; &#xA;&lt;p&gt;You can of course always compile OpenCV of the version you prefer manually. This is also supported, but it requires some additional configuration.&lt;/p&gt; &#xA;&lt;p&gt;You need to set up the following environment variables to point to the installed files of your OpenCV build: &lt;code&gt;OPENCV_LINK_LIBS&lt;/code&gt;, &lt;code&gt;OPENCV_LINK_PATHS&lt;/code&gt; and &lt;code&gt;OPENCV_INCLUDE_PATHS&lt;/code&gt; (see below for details).&lt;/p&gt; &#xA;&lt;h3&gt;Static build&lt;/h3&gt; &#xA;&lt;p&gt;Static linking to OpenCV is supported and tested at least on Linux. For some hints on building OpenCV statically please check this &lt;a href=&#34;https://github.com/twistedfall/opencv-rust/issues/364#issuecomment-1308794985&#34;&gt;comment&lt;/a&gt;. Also, you can get some information on how to perform the build in CI scripts: &lt;a href=&#34;https://github.com/twistedfall/opencv-rust/raw/master/ci/install-focal.sh&#34;&gt;install-focal.sh&lt;/a&gt; and &lt;a href=&#34;https://github.com/twistedfall/opencv-rust/raw/master/ci/script.sh&#34;&gt;script.sh&lt;/a&gt;, search for &lt;code&gt;non_static_version&lt;/code&gt; variable.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;One of the common problems is link errors in the end of the build.&lt;/p&gt; &lt;p&gt;Be sure to set up the relevant environment variables that will allow the linker to find the libraries it needs (see below).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You&#39;re getting runtime errors like:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;thread &#39;main&#39; panicked at &#39;called `Result::unwrap()` on an `Err` value: Error { code: -215, message: &#34;OpenCV(4.2.0) /build/opencv/src/opencv-4.2.0/modules/highgui/src/window.cpp:384: error: (-215:Assertion failed) size.width&amp;gt;0 &amp;amp;&amp;amp; size.height&amp;gt;0 in function \&#39;imshow\&#39;\n&#34; }&#39;, src/libcore/result.rs:1188:5&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code&gt;thread &#39;extraction::tests::test_contour_matching&#39; panicked at &#39;called `Result::unwrap()` on an `Err` value: Error { code: -215, message: &#34;OpenCV(4.1.1) /tmp/opencv-20190908-41416-17rm3ol/opencv-4.1.1/modules/core/src/matrix_wrap.cpp:79: error: (-215:Assertion failed) 0 &amp;lt;= i &amp;amp;&amp;amp; i &amp;lt; (int)vv.size() in function \&#39;getMat_\&#39;\n&#34; }&#39;, src/libcore/result.rs:1165:5&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;These errors (note the .cpp source file and &lt;code&gt;Error&lt;/code&gt; return value) are coming from OpenCV itself, not from the crate. It means that you&#39;re using the OpenCV API incorrectly, e.g. passing incompatible or unexpected arguments. Please refer to the OpenCV documentation for details.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You&#39;re getting errors that methods don&#39;t exist or not implemented for specific &lt;code&gt;struct&lt;/code&gt;s, but you can see them in the documentation and in the crate source.&lt;/p&gt; &lt;p&gt;Be sure to import &lt;code&gt;use opencv::prelude::*;&lt;/code&gt;. The crate contains a lot of traits that need to be imported first.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;On Windows, you&#39;re getting the &lt;code&gt;(exit code: 0xc0000135, STATUS_DLL_NOT_FOUND)&lt;/code&gt; error when running the compiled binary.&lt;/p&gt; &lt;p&gt;That often means that Windows can&#39;t find the OpenCV library dll. Be sure to set up &lt;code&gt;PATH&lt;/code&gt; environment variable correctly or copy the dll next to the binary you&#39;re trying to run. Check &lt;a href=&#34;https://github.com/twistedfall/opencv-rust/issues/118#issuecomment-619608278&#34;&gt;that&lt;/a&gt; guide too.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;On Windows with VCPKG you&#39;re getting a lot of linking errors in multiple files like in &lt;a href=&#34;https://github.com/twistedfall/opencv-rust/issues/161&#34;&gt;this issue&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Unless you&#39;re doing a very specific build, you want to have environment variable &lt;code&gt;VCPKGRS_DYNAMIC&lt;/code&gt; set to &#34;1&#34;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;On Windows with OpenCV 4.6.0 you&#39;re getting linking errors related to &lt;code&gt;img_hash&lt;/code&gt; module like in &lt;a href=&#34;https://github.com/twistedfall/opencv-rust/issues/360&#34;&gt;this issue&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Be sure to add &lt;code&gt;opencv_img_hash460&lt;/code&gt; to your &lt;code&gt;OPENCV_LINK_LIBS&lt;/code&gt; environment variable because it&#39;s being built as a separate file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;On macOS you&#39;re getting the &lt;code&gt;dyld: Library not loaded: @rpath/libclang.dylib&lt;/code&gt; error during the build process.&lt;/p&gt; &lt;p&gt;OS can&#39;t find &lt;code&gt;libclang.dylib&lt;/code&gt; dynamic library because it resides in a non-standard path, set up the &lt;code&gt;DYLD_FALLBACK_LIBRARY_PATH&lt;/code&gt; environment variable to point to the path where libclang.dylib can be found, e.g. for Command Line Tools:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;export DYLD_FALLBACK_LIBRARY_PATH=&#34;$(xcode-select --print-path)/usr/lib/&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or XCode:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;export DYLD_FALLBACK_LIBRARY_PATH=&#34;$(xcode-select --print-path)/Toolchains/XcodeDefault.xctoolchain/usr/lib/&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You might be running into the issue on the recent macOS versions where this environment variable remains empty after setting, please check &lt;a href=&#34;https://github.com/twistedfall/opencv-rust/issues/343&#34;&gt;this issue&lt;/a&gt; for some workarounds.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You&#39;re getting the panic: &lt;code&gt;a `libclang` shared library is not loaded on this thread&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Enable the &lt;code&gt;clang-runtime&lt;/code&gt; feature or use crate version &lt;code&gt;0.66&lt;/code&gt; and newer. The reason for the issue is that some crates (like &lt;code&gt;bindgen&lt;/code&gt;) depend on &lt;code&gt;clang-sys&lt;/code&gt; with hard-enabled &lt;code&gt;runtime&lt;/code&gt; feature and because of that cargo makes this feature also enabled for every other crate that depends on &lt;code&gt;clang-sys&lt;/code&gt; (&lt;code&gt;opencv&lt;/code&gt; in this case). During binding generation phase &lt;code&gt;opencv&lt;/code&gt; crate tries to use multiple threads and &lt;code&gt;clang-sys&lt;/code&gt; with &lt;code&gt;runtime&lt;/code&gt; feature enabled doesn&#39;t like that (hence the panic). Enabling &lt;code&gt;clang-runtime&lt;/code&gt; feature switches to using multiple processes instead of multiple threads. This makes the build a bit longer because of the need to build the helper binary, but the end result is the same. Additionally since crate version &lt;code&gt;0.66&lt;/code&gt; this behavior is now the default.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You&#39;re getting &lt;code&gt;&#39;limits&#39; file not found&lt;/code&gt; error during crate build.&lt;/p&gt; &lt;p&gt;This error is caused by the missing/invalid installation of C++ standard library (e.g. libstdc++ for GCC). To fix this make sure that the toolchain you&#39;re using has the corresponding C++ standard library. The toolchain is used through &lt;code&gt;libclang&lt;/code&gt;, so to get useful diagnostic info run:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;clang -E -x c++ - -v&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Look for &lt;code&gt;Selected GCC installation&lt;/code&gt; and &lt;code&gt;#include &amp;lt;...&amp;gt; search starts here&lt;/code&gt; to get the sense of what system toolchain is used by clang. Refer to this &lt;a href=&#34;https://github.com/twistedfall/opencv-rust/issues/322&#34;&gt;issue&lt;/a&gt; for more fixes and workarounds.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Reporting issues&lt;/h2&gt; &#xA;&lt;p&gt;If you still have trouble using the crate after going through the Troubleshooting steps please fill free to report it to the &lt;a href=&#34;https://github.com/twistedfall/opencv-rust/issues&#34;&gt;bugtracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When reporting an issue please state:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Operating system&lt;/li&gt; &#xA; &lt;li&gt;The way you installed OpenCV: package, official binary distribution, manual compilation, etc.&lt;/li&gt; &#xA; &lt;li&gt;OpenCV version&lt;/li&gt; &#xA; &lt;li&gt;Attach the full output of the following command from your project directory: &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;RUST_BACKTRACE=full cargo build -vv &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Environment variables&lt;/h2&gt; &#xA;&lt;p&gt;The following variables must be set when building without &lt;code&gt;pkg_config&lt;/code&gt;, &lt;code&gt;cmake&lt;/code&gt; or &lt;code&gt;vcpkg&lt;/code&gt;. You can set them on any platform, the specified values will override those automatically discovered.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;OPENCV_LINK_LIBS&lt;/code&gt; Comma separated list of library names to link to. &lt;code&gt;.lib&lt;/code&gt;, &lt;code&gt;.so&lt;/code&gt; or &lt;code&gt;.dylib&lt;/code&gt; extension is optional. If you specify the &#34;.framework&#34; extension then build script will link a macOS framework instead of plain shared library. E.g. &#34;opencv_world411&#34;.&lt;/p&gt; &lt;p&gt;If this list starts with &#39;+&#39; (plus sign) then the specified items will be appended to whatever the system probe returned. E.g. a value of &#34;+dc1394&#34; will do a system discovery of the OpenCV library and its linked libraries and then will additionally link &lt;code&gt;dc1394&lt;/code&gt; library at the end. Can be useful if the system probe produces a mostly working setup, but has incomplete link list, or the order is wrong (especially important during static linking).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;OPENCV_LINK_PATHS&lt;/code&gt; Comma separated list of paths to search for libraries to link. E.g. &#34;C:\tools\opencv\build\x64\vc15\lib&#34;. The path list can start with &#39;+&#39;, see &lt;code&gt;OPENCV_LINK_LIBS&lt;/code&gt; for a detailed explanation (e.g. &#34;+/usr/local/lib&#34;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;OPENCV_INCLUDE_PATHS&lt;/code&gt; Comma separated list of paths to search for system include files during compilation. E.g. &#34;C:\tools\opencv\build\include&#34;. One of the directories specified therein must contain &#34;opencv2/core/version.hpp&#34; or &#34;core/version.hpp&#34; file, it&#39;s used to detect the version of the headers. The path list can start with &#39;+&#39;, see &lt;code&gt;OPENCV_LINK_LIBS&lt;/code&gt; for a detailed explanation (e.g. &#34;+/opt/cuda/targets/x86_64-linux/include/&#34;).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following variables are rarely used, but you might need them under some circumstances:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;OPENCV_PACKAGE_NAME&lt;/code&gt; In some cases you might want to override the pkg-config, cmake or vcpkg package name, you can use this environment variable for that. If you set it pkg-config will expect to find the file with that name and &lt;code&gt;.pc&lt;/code&gt; extension in the package directory. Cmake will look for that file with &lt;code&gt;.cmake&lt;/code&gt; extension. And vcpkg will use that name to try to find package in &lt;code&gt;packages&lt;/code&gt; directory under &lt;code&gt;VCPKG_ROOT&lt;/code&gt;. You can also use separate environment variables to set different package names for different package systems:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;OPENCV_PKGCONFIG_NAME&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;OPENCV_CMAKE_NAME&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;OPENCV_VCPKG_NAME&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;OPENCV_CMAKE_BIN&lt;/code&gt; Path to cmake binary (used in OpenCV discovery process using cmake). If not set then just &#34;cmake&#34; will be used. For example, you can set something like &#34;/usr/local/bin/cmake&#34; here.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;OPENCV_DISABLE_PROBES&lt;/code&gt; Comma separated list of OpenCV package auto-discovery systems to exclude from running. Might be useful if one of the higher priority systems is producing incorrect results. Can contain the following values:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;environment - reads data only from the &lt;code&gt;OPENCV_LINK_LIBS&lt;/code&gt;, &lt;code&gt;OPENCV_LINK_PATHS&lt;/code&gt; and &lt;code&gt;OPENCV_INCLUDE_PATHS&lt;/code&gt; environment variables&lt;/li&gt; &#xA;   &lt;li&gt;pkg_config&lt;/li&gt; &#xA;   &lt;li&gt;cmake&lt;/li&gt; &#xA;   &lt;li&gt;vcpkg_cmake - like vcpkg, but only uses vcpkg for path discovery, the actual OpenCV probe is done using cmake (cmake related environment variables are applicable with this probe)&lt;/li&gt; &#xA;   &lt;li&gt;vcpkg&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;OPENCV_MODULE_WHITELIST&lt;/code&gt; and &lt;code&gt;OPENCV_MODULE_BLACKLIST&lt;/code&gt; Not used anymore. These used to be used to select modules that get their binding generated. We have switched to using cargo features for module selection. Please see the section on features to learn how to switch.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following variables affect the building the of the &lt;code&gt;opencv&lt;/code&gt; crate, but belong to external components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;PKG_CONFIG_PATH&lt;/code&gt; Where to look for &lt;code&gt;*.pc&lt;/code&gt; files see the &lt;a href=&#34;https://linux.die.net/man/1/pkg-config&#34;&gt;man pkg-config&lt;/a&gt; Path specified here must contain &lt;code&gt;opencv.pc&lt;/code&gt; (pre OpenCV 4) or &lt;code&gt;opencv4.pc&lt;/code&gt; (OpenCV 4 and later).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;VCPKG_ROOT&lt;/code&gt; and &lt;code&gt;VCPKGRS_DYNAMIC&lt;/code&gt; The root of &lt;code&gt;vcpkg&lt;/code&gt; installation and flag allowing use of &lt;code&gt;*.dll&lt;/code&gt; libraries, see the &lt;a href=&#34;https://docs.rs/vcpkg&#34;&gt;documentation for &lt;code&gt;vcpkg&lt;/code&gt; crate&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;OpenCV_DIR&lt;/code&gt; The directory that contains OpenCV package cmake files. Usually there are &lt;code&gt;OpenCVConfig.cmake&lt;/code&gt;, &lt;code&gt;OpenCVConfig-version.cmake&lt;/code&gt; and &lt;code&gt;OpenCVModules.cmake&lt;/code&gt; in it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; On Linux it sets the list of directories to look for the installed &lt;code&gt;*.so&lt;/code&gt; files during runtime. &lt;a href=&#34;https://tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html&#34;&gt;Linux documentation&lt;/a&gt; has more info. Path specified here must contain &lt;code&gt;libopencv_*.so&lt;/code&gt; files.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;DYLD_LIBRARY_PATH&lt;/code&gt; and &lt;code&gt;DYLD_FALLBACK_LIBRARY_PATH&lt;/code&gt; Similar to &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt;, but for loading &lt;code&gt;*.dylib&lt;/code&gt; files on macOS, see &lt;a href=&#34;https://man.cx/dyld(1)&#34;&gt;man dyld&lt;/a&gt; and &lt;a href=&#34;https://stackoverflow.com/a/3172515&#34;&gt;this SO answer&lt;/a&gt; for more info. Path specified here must contain &lt;code&gt;*.dylib&lt;/code&gt; files.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;PATH&lt;/code&gt; Windows searches for &lt;code&gt;*.dll&lt;/code&gt;s in &lt;code&gt;PATH&lt;/code&gt; among other places, be sure to set it up, or copy required OpenCV &lt;code&gt;*.dll&lt;/code&gt;s next to your binary. Be sure to specify paths in UNIX style (/C/Program Files/Dir) because colon in &lt;code&gt;PATH&lt;/code&gt; might be interpreted as the entry separator. Summary &lt;a href=&#34;https://stackoverflow.com/a/6546427&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;clang crate environment variables See crate&#39;s &lt;a href=&#34;https://github.com/KyleMayes/clang-sys/raw/master/README.md#environment-variables&#34;&gt;README&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Cargo features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;There is a feature named after each OpenCV module (e.g. &lt;code&gt;imgproc&lt;/code&gt;, &lt;code&gt;highgui&lt;/code&gt;, etc.). They are all enabled by default, but if a corresponding module is not found then it will silently be ignored. If you need to select a specific set of modules be sure to disable the default features and provide the required feature set: &lt;pre&gt;&lt;code&gt;opencv = { version = ..., default-features = false, features = [&#34;calib3d&#34;, &#34;features2d&#34;, &#34;flann&#34;]}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rgb&lt;/code&gt; - allow using &lt;a href=&#34;https://crates.io/crates/rgb&#34;&gt;&lt;code&gt;rgb&lt;/code&gt;&lt;/a&gt; crate types as &lt;code&gt;Mat&lt;/code&gt; elements&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;API details&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.rs/opencv&#34;&gt;API Documentation&lt;/a&gt; is automatically translated from OpenCV&#39;s doxygen docs. Most likely you&#39;ll still want to refer to the official &lt;a href=&#34;https://docs.opencv.org/master&#34;&gt;OpenCV C++ documentation&lt;/a&gt; as well.&lt;/p&gt; &#xA;&lt;h3&gt;OpenCV version support&lt;/h3&gt; &#xA;&lt;p&gt;The following OpenCV versions are supported at the moment:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;3.4&lt;/li&gt; &#xA; &lt;li&gt;4.x&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Minimum rustc version (MSRV)&lt;/h3&gt; &#xA;&lt;p&gt;Currently, version 1.59.0 or later is required.&lt;/p&gt; &#xA;&lt;h3&gt;Platform support&lt;/h3&gt; &#xA;&lt;p&gt;Currently, the main development and testing of the crate is performed on Linux, but other major platforms are also supported: macOS and Windows.&lt;/p&gt; &#xA;&lt;p&gt;For some more details please refer to the CI build scripts: &lt;a href=&#34;https://github.com/twistedfall/opencv-rust/raw/master/ci/install-focal.sh&#34;&gt;Linux OpenCV install&lt;/a&gt;, &lt;a href=&#34;https://github.com/twistedfall/opencv-rust/raw/master/ci/install-macos-framework.sh&#34;&gt;macOS OpenCV install as framework&lt;/a&gt;, &lt;a href=&#34;https://github.com/twistedfall/opencv-rust/raw/master/ci/install-macos-brew.sh&#34;&gt;macOS OpenCV install via brew&lt;/a&gt;, &lt;a href=&#34;https://github.com/twistedfall/opencv-rust/raw/master/ci/install-windows-chocolatey.sh&#34;&gt;Windows OpenCV install via Chocolatey&lt;/a&gt;, &lt;a href=&#34;https://github.com/twistedfall/opencv-rust/raw/master/ci/install-windows-vcpkg.sh&#34;&gt;Windows OpenCV install via vcpkg&lt;/a&gt;, &lt;a href=&#34;https://github.com/twistedfall/opencv-rust/raw/master/ci/script.sh&#34;&gt;Test runner script&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Functionality&lt;/h3&gt; &#xA;&lt;p&gt;Generally the crate tries to only wrap OpenCV API and provide some convenience functions to be able to use it in Rust easier. We try to avoid adding any functionality besides that.&lt;/p&gt; &#xA;&lt;h3&gt;Errors&lt;/h3&gt; &#xA;&lt;p&gt;Most functions return a &lt;code&gt;Result&lt;/code&gt; to expose a potential C++ exception. Although some methods like property reads or functions that are marked CV_NOEXCEPT in the OpenCV headers are infallible and return a naked value.&lt;/p&gt; &#xA;&lt;h3&gt;CV_MAKETYPE&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;CV_MAKETYPE&lt;/code&gt; and related &lt;code&gt;CV_MAT_DEPTH&lt;/code&gt; constant functions are available to replace the corresponding OpenCV macros. Yet it&#39;s usually easier to call &lt;code&gt;::opencv_type()&lt;/code&gt; function on the corresponding Rust type. E.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;let t = u16::opencv_type(); // equivalent to CV_MAKETYPE(CV_16U, 1)&#xA;let t = Vec2f::opencv_type(); // equivalent to CV_MAKETYPE(CV_32F, 2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;C++ operators&lt;/h3&gt; &#xA;&lt;p&gt;Some C++ operators are supported, they are converted to the corresponding functions on Rust side. Here is the list with the corresponding function name:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;[]&lt;/code&gt; â†’ &lt;code&gt;get()&lt;/code&gt; or &lt;code&gt;get_mut()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt; â†’ &lt;code&gt;add()&lt;/code&gt;, &lt;code&gt;sub()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt; â†’ &lt;code&gt;mul()&lt;/code&gt;, &lt;code&gt;div()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;()&lt;/code&gt; (function call) â†’ &lt;code&gt;apply()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;*&lt;/code&gt; (deref) â†’ &lt;code&gt;try_deref()&lt;/code&gt; or &lt;code&gt;try_deref_mut()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt; â†’ &lt;code&gt;equals()&lt;/code&gt;, &lt;code&gt;not_equals()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt; â†’ &lt;code&gt;greater_than()&lt;/code&gt;, &lt;code&gt;greater_than_or_equal()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt; â†’ &lt;code&gt;less_than()&lt;/code&gt;, &lt;code&gt;less_than_or_equal()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;++&lt;/code&gt;, &lt;code&gt;--&lt;/code&gt; â†’ &lt;code&gt;incr()&lt;/code&gt;, &lt;code&gt;decr()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt; â†’ &lt;code&gt;and()&lt;/code&gt;, &lt;code&gt;or()&lt;/code&gt;, &lt;code&gt;xor()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;!&lt;/code&gt; â†’ &lt;code&gt;negate()&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Class fields&lt;/h3&gt; &#xA;&lt;p&gt;Fields of OpenCV classes are accessible through setters and getters. Those functions are infallible, they return the value directly instead of &lt;code&gt;Result&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Infallible functions&lt;/h3&gt; &#xA;&lt;p&gt;For infallible functions (like setters) that accept &lt;code&gt;&amp;amp;str&lt;/code&gt; values the following logic applies: if a Rust string passed as argument contains null byte then this string will be truncated up to that null byte. So if for example you pass &#34;123\0456&#34; to the setter, the property will be set to &#34;123&#34;.&lt;/p&gt; &#xA;&lt;h3&gt;Callbacks&lt;/h3&gt; &#xA;&lt;p&gt;Some API functions accept callbacks, e.g. &lt;code&gt;set_mouse_callback&lt;/code&gt;. While currently it&#39;s possible to successfully use those functions there are some limitations to keep in mind. Current implementation of callback handling leaks the passed callback argument. That means that the closure used as a callback will never be freed during the lifetime of a program and moreover Drop will not be called for it. There is a plan to implement possibility to be able to free at least some closures.&lt;/p&gt; &#xA;&lt;h3&gt;Unsafety&lt;/h3&gt; &#xA;&lt;p&gt;Although the crate tries to provide an ergonomic Rust interface for OpenCV, don&#39;t expect Rust safety guarantees at this stage. It&#39;s especially true for the borrow-checking and the shared mutable ownership. Notable example would be &lt;code&gt;Mat&lt;/code&gt; which is a reference counted object in its essence. You can own a seemingly separate &lt;code&gt;Mat&lt;/code&gt; in Rust terms, but it&#39;s going to be a mutable reference to the other &lt;code&gt;Mat&lt;/code&gt; under the hood. Treat safety of the crate&#39;s API as you would treat one of C++, use &lt;code&gt;clone()&lt;/code&gt; when needed.&lt;/p&gt; &#xA;&lt;h2&gt;Contrib modules&lt;/h2&gt; &#xA;&lt;p&gt;To be able to use some modules you need to have &lt;a href=&#34;https://github.com/opencv/opencv_contrib&#34;&gt;&lt;code&gt;opencv_contrib&lt;/code&gt;&lt;/a&gt; installed. You can find the full list of contrib modules &lt;a href=&#34;https://github.com/opencv/opencv_contrib/tree/master/modules&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Missing modules and functions&lt;/h2&gt; &#xA;&lt;p&gt;While most of the API is covered, for various reasons (that might no longer hold) there are modules and functions that are not yet implemented. If a missing module/function is near and dear to you, please file an issue (or better, open a pull request!).&lt;/p&gt; &#xA;&lt;h2&gt;The binding strategy&lt;/h2&gt; &#xA;&lt;p&gt;This crate works similar to the model of python and java&#39;s OpenCV wrappers - it uses libclang to parse the OpenCV C++ headers, generates a C interface to the C++ API, and wraps the C interface in Rust.&lt;/p&gt; &#xA;&lt;p&gt;All the major modules in the C++ API are merged together in a huge &lt;code&gt;cv::&lt;/code&gt; namespace. We instead made one rust module for each major OpenCV module. So, for example, C++ &lt;code&gt;cv::Mat&lt;/code&gt; is &lt;code&gt;opencv::core::Mat&lt;/code&gt; in this crate.&lt;/p&gt; &#xA;&lt;p&gt;The methods and field names have been snake_cased. Methods arguments with default value lose these default values, but they are reported in the API documentation.&lt;/p&gt; &#xA;&lt;p&gt;Overloaded methods have been mostly manually given different names or automatically renamed to *_1, *_2, etc.&lt;/p&gt; &#xA;&lt;h2&gt;Older OpenCV branches support&lt;/h2&gt; &#xA;&lt;h3&gt;OpenCV 2&lt;/h3&gt; &#xA;&lt;p&gt;If you can&#39;t use OpenCV 3.x or higher, the (no longer maintained) &lt;code&gt;0.2.4&lt;/code&gt; version of this crate is known to work with OpenCV &lt;code&gt;2.4.7.13&lt;/code&gt; (and probably other 2.4 versions). Please refer to the README.md file for that version because the crate has gone through the considerable rewrite since.&lt;/p&gt; &#xA;&lt;h3&gt;OpenCV 3.2&lt;/h3&gt; &#xA;&lt;p&gt;The last version with confirmed OpenCV 3.2 support is 0.75.0, after that this branch of OpenCV is no longer tested and supported. It may still work though.&lt;/p&gt; &#xA;&lt;h2&gt;Contributor&#39;s Guide&lt;/h2&gt; &#xA;&lt;p&gt;The binding generator code lives in a separate crate under &lt;a href=&#34;https://raw.githubusercontent.com/twistedfall/opencv-rust/master/binding-generator&#34;&gt;binding-generator&lt;/a&gt;. During the build phase it creates bindings from the header files and puts them into &lt;a href=&#34;https://raw.githubusercontent.com/twistedfall/opencv-rust/master/bindings&#34;&gt;bindings&lt;/a&gt; directory. Those are then transferred to &lt;a href=&#34;https://raw.githubusercontent.com/twistedfall/opencv-rust/master/src&#34;&gt;src&lt;/a&gt; for the consumption by the crate users.&lt;/p&gt; &#xA;&lt;p&gt;The crate itself, as imported by users, consists of generated rust code in &lt;a href=&#34;https://raw.githubusercontent.com/twistedfall/opencv-rust/master/src&#34;&gt;src&lt;/a&gt; committed to the repo. This way, users don&#39;t have to handle the code generation overhead in their builds. When developing this crate, you can test changes to the binding generation using &lt;code&gt;cargo build -vv&lt;/code&gt;. When changing the &lt;code&gt;binding-generator&lt;/code&gt;, be sure to push changes to the generated code!&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re looking for things to improve be sure to search for &lt;code&gt;todo&lt;/code&gt; and &lt;code&gt;fixme&lt;/code&gt; labels in the project source, those usually carry the comment of what exactly needs to be fixed.&lt;/p&gt; &#xA;&lt;p&gt;The license for the original work is &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Special thanks to &lt;a href=&#34;https://github.com/ttacon&#34;&gt;ttacon&lt;/a&gt; for yielding the crate name.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zinclabs/zincobserve</title>
    <updated>2023-02-24T01:44:19Z</updated>
    <id>tag:github.com,2023-02-24:/zinclabs/zincobserve</id>
    <link href="https://github.com/zinclabs/zincobserve" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸš€ 10x easier, ðŸš€ 10x cheaper, ðŸš€ high performance, ðŸš€ petabyte scale - Elasticsearch/Splunk/Datadog alternative for ðŸš€ (logs, metrics, traces).&lt;/p&gt;&lt;hr&gt;&lt;p&gt;ðŸš€ 10x easier, ðŸš€ 10x cheaper, ðŸš€ petabyte scale - Elasticsearch/Splunk/Datadog alternative for ðŸš€ (logs, metrics, traces).&lt;/p&gt; &#xA;&lt;h1&gt;ZincObserve&lt;/h1&gt; &#xA;&lt;p&gt;ZincObserve is a cloud native observability platform built specifically for logs, metrics, traces and analytics designed to work at petabyte scale.&lt;/p&gt; &#xA;&lt;p&gt;It is very simple and easy to operate as opposed to Elasticsearch which requires a couple dozen knobs to understand and tune which you can get up and running in under 2 minutes.&lt;/p&gt; &#xA;&lt;p&gt;It is a drop-in replacement for Elasticsearch if you are just ingesting data using APIs and searching using kibana (Kibana is not supported nor required with zinc. ZincObserve provides its own UI which does not require separate installation unlike kibana).&lt;/p&gt; &#xA;&lt;p&gt;You can reduce your log storage costs by ~140x compared to Elasticsearch by using ZincObserve.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=cPMH1Am2_zM&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zinclabs/zincobserve/main/screenshots/zo_intro_youtube.png&#34; alt=&#34;ZincObserve Introduction&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features:&lt;/h2&gt; &#xA;&lt;p&gt;Some of the features are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Advanced Embedded GUI&lt;/li&gt; &#xA; &lt;li&gt;It&#39;s a drop in replacement for elasticsearch&lt;/li&gt; &#xA; &lt;li&gt;Single binary for installation &amp;amp; running. Binaries available under &lt;a href=&#34;https://github.com/zinclabs/zincobserve/releases&#34;&gt;releases&lt;/a&gt; for multiple platforms.&lt;/li&gt; &#xA; &lt;li&gt;SQL for sophisticated queries, no need to learn yet another query language.&lt;/li&gt; &#xA; &lt;li&gt;Embedded scripting functions for ingestion &amp;amp; query to aid advanced capabilities like enrichment, redaction, log reduction, compliance, etc.&lt;/li&gt; &#xA; &lt;li&gt;Dynamic Schema&lt;/li&gt; &#xA; &lt;li&gt;Out of the box authentication&lt;/li&gt; &#xA; &lt;li&gt;Storage in local Disk, s3, MinIO, GCS&lt;/li&gt; &#xA; &lt;li&gt;Vastly easier to operate&lt;/li&gt; &#xA; &lt;li&gt;Seamless upgrades&lt;/li&gt; &#xA; &lt;li&gt;High availability and clustering&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For full list of features check &lt;a href=&#34;https://docs.zinc.dev/ZincObserve/#project-status-features-and-roadmap&#34;&gt;documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;You can install ZincObserve in under 2 minutes by following the &lt;a href=&#34;https://docs.zinc.dev/ZincObserve/quickstart/&#34;&gt;quickstart&lt;/a&gt; documentation&lt;/p&gt; &#xA;&lt;h1&gt;ZincObserve Cloud&lt;/h1&gt; &#xA;&lt;p&gt;You can also try ZincObserve without installing it in under 2 minutes by trying out ZincObserve Cloud at &lt;a href=&#34;https://observe.zinc.dev&#34;&gt;https://observe.zinc.dev&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;How to get support&lt;/h1&gt; &#xA;&lt;p&gt;Easiest way to get support is to join the &lt;a href=&#34;https://join.slack.com/t/zincobserve/shared_invite/zt-11r96hv2b-UwxUILuSJ1duzl_6mhJwVg&#34;&gt;Slack channel&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;How to develop &amp;amp; contribute to Zinc&lt;/h1&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://raw.githubusercontent.com/zinclabs/zincobserve/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Screenshots&lt;/h1&gt; &#xA;&lt;h2&gt;Home&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zinclabs/zincobserve/main/screenshots/zo_home.png&#34; alt=&#34;Home&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Logs&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zinclabs/zincobserve/main/screenshots/zo_logs.png&#34; alt=&#34;Home&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Log details&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zinclabs/zincobserve/main/screenshots/zo_log_details.png&#34; alt=&#34;Home&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Users&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zinclabs/zincobserve/main/screenshots/zo_add_user.png&#34; alt=&#34;Home&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Streams&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zinclabs/zincobserve/main/screenshots/zo_streams.png&#34; alt=&#34;Home&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Ingestion&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zinclabs/zincobserve/main/screenshots/zo_ingestion.png&#34; alt=&#34;Home&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>