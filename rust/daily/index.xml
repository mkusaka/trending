<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-13T01:36:56Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>piotrostr/listen</title>
    <updated>2025-01-13T01:36:56Z</updated>
    <id>tag:github.com,2025-01-13:/piotrostr/listen</id>
    <link href="https://github.com/piotrostr/listen" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Solana Swiss Army Knife&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/piotrostr/listen/main/frontend/public/listen-more.png&#34; width=&#34;35%&#34;&gt; &lt;br&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://docs.listen-rs.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-API-blue.svg?sanitize=true&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://github.com/piotrostr/listen&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/piotrostr/listen?style=social&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/built_with-Rust-dca282.svg?logo=rust&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;code&gt;listen&lt;/code&gt; is a Solana Swiss-Knife toolkit for algorithmic trading &lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üîç Real-time transaction monitoring&lt;/li&gt; &#xA; &lt;li&gt;üí± Multi-DEX swap execution (Pump.fun, Jupiter V6 API or Raydium)&lt;/li&gt; &#xA; &lt;li&gt;üöÄ Blazingly fast transactions thanks to Jito MEV bundles&lt;/li&gt; &#xA; &lt;li&gt;üìä Price tracking and metrics&lt;/li&gt; &#xA; &lt;li&gt;üß∞ Token management utilities&lt;/li&gt; &#xA; &lt;li&gt;üìà Performance monitoring with Prometheus integration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And more!&lt;/p&gt; &#xA;&lt;p&gt;It works plug&#39;n&#39;play with &lt;a href=&#34;https://github.com/0xPlaygrounds/rig&#34;&gt;$arc rig framework&lt;/a&gt; framework allowing AI Agents interact with the Solana blockchain, see example: &lt;a href=&#34;https://github.com/piotrostr/listen/raw/main/src/agent.rs&#34;&gt;src/agent.rs&lt;/a&gt; and the output &lt;a href=&#34;https://github.com/piotrostr/listen/raw/main/example.png&#34;&gt;image&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For complete rundown of features, check out the CLI output of &lt;code&gt;cargo run&lt;/code&gt; or the &lt;a href=&#34;https://docs.listen-rs.com/&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This repository contains some miscellanous tools for grabbing data from bullx/gmgn.ai/pump.fun unofficial APIs, in &lt;code&gt;bullx&lt;/code&gt;, &lt;code&gt;watcher&lt;/code&gt;, &lt;code&gt;pump-ts&lt;/code&gt; and an analysis module, all which might be useful, though the core of the library is located in the &lt;code&gt;src&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;System Dependencies&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Rust (with nightly toolchain)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;protoc&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;build-essential&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pkg-config&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;libssl-dev&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Configuration&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Copy &lt;code&gt;.env.example&lt;/code&gt; to &lt;code&gt;.env&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Set up &lt;code&gt;auth.json&lt;/code&gt; for JITO authentication (optional, gRPC HTTP/2.0 searcher client)&lt;/li&gt; &#xA;   &lt;li&gt;Populate &lt;code&gt;fund.json&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Both keypairs are in &lt;code&gt;solana-keygen&lt;/code&gt; format, array of 64 bytes, 32 bytes private key and 32 bytes public key.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install dependencies&#xA;sudo apt install protoc build-essential pkg-config libssl-dev&#xA;&#xA;# Build&#xA;cargo build --release&#xA;&#xA;# Run services&#xA;./run-systemd-services.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Transaction Monitoring&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo run -- listen \&#xA;  --worker-count [COUNT] \&#xA;  --buffer-size [SIZE]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Token Swapping&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo run -- swap \&#xA;  --input-mint sol \&#xA;  --output-mint EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v \&#xA;  --amount 10000000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] Default configuration is set for mainnet with small transactions. Ensure proper configuration for testnet usage and carefully review code before execution.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Metrics and Monitoring&lt;/h2&gt; &#xA;&lt;p&gt;Listen includes built-in metrics exposed at &lt;code&gt;localhost:3030/metrics&lt;/code&gt;. To visualize:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start Prometheus:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;prometheus --config=prometheus.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Access metrics at &lt;code&gt;localhost:3030/metrics&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Grafana should show something like this&lt;/p&gt; &#xA;&lt;p&gt;&lt;img width=&#34;910&#34; alt=&#34;image&#34; src=&#34;https://github.com/piotrostr/listen/assets/63755291/95668158-9f7d-4cd2-be84-7c2b893d3f5c&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Advanced Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Swap Profiling&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;stackcollapse.pl&lt;/code&gt; can be installed through&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gh repo clone brendangregg/FlameGraph &amp;amp;&amp;amp; \&#xA;  sudo cp FlameGraph/stackcollapse.pl /usr/local/bin &amp;amp;&amp;amp; \&#xA;  sudo cp FlameGraph/flamegraph.pl /usr/local/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Profile swap performance using DTrace to produce a flamegraph:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./hack/profile-swap.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;1210&#34; alt=&#34;image&#34; src=&#34;https://github.com/piotrostr/listen/assets/63755291/699405b7-adf0-448b-89c1-ba71152dc72b&#34;&gt;</summary>
  </entry>
</feed>