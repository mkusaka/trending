<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-12T01:35:14Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>0xPlaygrounds/rig</title>
    <updated>2024-12-12T01:35:14Z</updated>
    <id>tag:github.com,2024-12-12:/0xPlaygrounds/rig</id>
    <link href="https://github.com/0xPlaygrounds/rig" rel="alternate"></link>
    <summary type="html">&lt;p&gt;‚öôÔ∏èü¶Ä Build portable, modular &amp; lightweight Fullstack Agents&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;img/rig-playgrounds-dark.svg&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;img/rig-playgrounds-light.svg&#34;&gt; &#xA;  &lt;img src=&#34;https://raw.githubusercontent.com/0xPlaygrounds/rig/main/img/rig-playgrounds-light.svg?sanitize=true&#34; style=&#34;width: 40%; height: 40%;&#34; alt=&#34;Rig logo&#34;&gt; &#xA; &lt;/picture&gt; &lt;br&gt; &lt;a href=&#34;https://docs.rig.rs&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%93%96%20docs-rig.rs-dca282.svg?sanitize=true&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://docs.rs/rig-core/latest/rig/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-API%20Reference-dca282.svg?sanitize=true&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://crates.io/crates/rig-core&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/rig-core.svg?color=dca282&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://crates.io/crates/rig-core&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/d/rig-core.svg?color=dca282&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://discord.gg/playgrounds&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/511303648119226382?color=%236d82cc&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=white&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://github.com/0xPlaygrounds/rig&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/0xPlaygrounds/rig?style=social&#34; alt=&#34;stars - rig&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/built_with-Rust-dca282.svg?logo=rust&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://twitter.com/Playgrounds0x&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/Playgrounds0x&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;br&gt; &lt;/p&gt; &amp;nbsp; &#xA;&lt;p&gt;‚ú® If you would like to help spread the word about Rig, please consider starring the repo!&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] Here be dragons! As we plan to ship a torrent of features in the following months, future updates &lt;strong&gt;will&lt;/strong&gt; contain &lt;strong&gt;breaking changes&lt;/strong&gt;. With Rig evolving, we&#39;ll annotate changes and highlight migration paths as we encounter them.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;What is Rig?&lt;/h2&gt; &#xA;&lt;p&gt;Rig is a Rust library for building scalable, modular, and ergonomic &lt;strong&gt;LLM-powered&lt;/strong&gt; applications.&lt;/p&gt; &#xA;&lt;p&gt;More information about this crate can be found in the &lt;a href=&#34;https://docs.rig.rs&#34;&gt;official&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://docs.rs/rig-core/latest/rig/&#34;&gt;crate&lt;/a&gt; (API Reference) documentations.&lt;/p&gt; &#xA;&lt;p&gt;Help us improve Rig by contributing to our &lt;a href=&#34;https://bit.ly/Rig-Feeback-Form&#34;&gt;Feedback form&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/0xPlaygrounds/rig/main/#what-is-rig&#34;&gt;What is Rig?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/0xPlaygrounds/rig/main/#table-of-contents&#34;&gt;Table of contents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/0xPlaygrounds/rig/main/#high-level-features&#34;&gt;High-level features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/0xPlaygrounds/rig/main/#get-started&#34;&gt;Get Started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/0xPlaygrounds/rig/main/#simple-example&#34;&gt;Simple example:&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/0xPlaygrounds/rig/main/#integrations&#34;&gt;Integrations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;High-level features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Full support for LLM completion and embedding workflows&lt;/li&gt; &#xA; &lt;li&gt;Simple but powerful common abstractions over LLM providers (e.g. OpenAI, Cohere) and vector stores (e.g. MongoDB, in-memory)&lt;/li&gt; &#xA; &lt;li&gt;Integrate LLMs in your app with minimal boilerplate&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Get Started&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo add rig-core&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Simple example:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use rig::{completion::Prompt, providers::openai};&#xA;&#xA;#[tokio::main]&#xA;async fn main() {&#xA;    // Create OpenAI client and model&#xA;    // This requires the `OPENAI_API_KEY` environment variable to be set.&#xA;    let openai_client = openai::Client::from_env();&#xA;&#xA;    let gpt4 = openai_client.agent(&#34;gpt-4&#34;).build();&#xA;&#xA;    // Prompt the model and print its response&#xA;    let response = gpt4&#xA;        .prompt(&#34;Who are you?&#34;)&#xA;        .await&#xA;        .expect(&#34;Failed to prompt GPT-4&#34;);&#xA;&#xA;    println!(&#34;GPT-4: {response}&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note using &lt;code&gt;#[tokio::main]&lt;/code&gt; requires you enable tokio&#39;s &lt;code&gt;macros&lt;/code&gt; and &lt;code&gt;rt-multi-thread&lt;/code&gt; features or just &lt;code&gt;full&lt;/code&gt; to enable all features (&lt;code&gt;cargo add tokio --features macros,rt-multi-thread&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;You can find more examples each crate&#39;s &lt;code&gt;examples&lt;/code&gt; (ie. &lt;a href=&#34;https://raw.githubusercontent.com/0xPlaygrounds/rig/main/src/examples&#34;&gt;&lt;code&gt;src/examples&lt;/code&gt;&lt;/a&gt;) directory. More detailed use cases walkthroughs are regularly published on our &lt;a href=&#34;https://dev.to/0thtachi&#34;&gt;Dev.to Blog&lt;/a&gt; and added to Rig&#39;s official documentation &lt;a href=&#34;http://docs.rig.rs&#34;&gt;(docs.rig.rs)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Integrations&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Model Providers&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Vector Stores&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/ChatGPT_logo.svg/1024px-ChatGPT_logo.svg.png&#34; alt=&#34;ChatGPT logo&#34; width=&#34;50em&#34;&gt; &#xA;    &lt;picture&gt;&#xA;     &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://www.fahimai.com/wp-content/uploads/2024/06/Untitled-design-7.png&#34;&gt;&#xA;     &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/4/47/Claude_Ai.svg/1024px-Claude_Ai.svg.png&#34;&gt;&#xA;     &lt;img src=&#34;https://www.fahimai.com/wp-content/uploads/2024/06/Untitled-design-7.png&#34; alt=&#34;Claude Anthropic logo&#34; width=&#34;50em&#34;&gt;&#xA;    &lt;/picture&gt; &lt;br&gt; &lt;img src=&#34;https://cdn.sanity.io/images/rjtqmwfu/production/0adbf394439f4cd0ab8b5b3b6fe1da10c8099024-201x200.svg?sanitize=true&#34; alt=&#34;Cohere logo&#34; width=&#34;50em&#34;&gt; &lt;img src=&#34;https://logospng.org/download/google-gemini/google-gemini-1024.png&#34; style=&#34;background-color: white; border-radius: 10px; padding: 5px 5px ; width: 3em;&#34; alt=&#34;Gemini logo&#34;&gt; &lt;br&gt; &lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/5/57/XAI-Logo.svg/512px-XAI-Logo.svg.png?20240912222841&#34; style=&#34;background-color: white; border-radius: 10px; padding: 5px 5px ; width: 3em;&#34; alt=&#34;xAI logo&#34;&gt; &lt;img src=&#34;https://github.com/user-attachments/assets/4763ae96-ddc9-4f69-ab38-23592e6c4ead&#34; style=&#34;background-color: white; border-radius: 10px; padding: 5px 0px ; width: 4em;&#34; alt=&#34;perplexity logo&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://cdn.prod.website-files.com/6640cd28f51f13175e577c05/664e00a400e23f104ed2b6cd_3b3dd6e8-8a73-5879-84a9-a42d5b910c74.svg?sanitize=true&#34; alt=&#34;Mongo DB logo&#34; width=&#34;50em&#34;&gt; &lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/e/e5/Neo4j-logo_color.png&#34; alt=&#34;Neo4j logo&#34; style=&#34;background-color: white; border-radius: 1em; padding: 1em 1em ; width: 4em;&#34;&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/844/1*Jp6VwF0OcdeyRyW0Ln0RMQ@2x.png&#34; width=&#34;100em&#34; alt=&#34;Lance DB logo&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Vector stores are available as separate companion-crates:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MongoDB vector store: &lt;a href=&#34;https://github.com/0xPlaygrounds/rig/tree/main/rig-mongodb&#34;&gt;&lt;code&gt;rig-mongodb&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;LanceDB vector store: &lt;a href=&#34;https://github.com/0xPlaygrounds/rig/tree/main/rig-lancedb&#34;&gt;&lt;code&gt;rig-lancedb&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Neo4j vector store: &lt;a href=&#34;https://github.com/0xPlaygrounds/rig/tree/main/rig-neo4j&#34;&gt;&lt;code&gt;rig-neo4j&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Qdrant vector store: &lt;a href=&#34;https://github.com/0xPlaygrounds/rig/tree/main/rig-qdrant&#34;&gt;&lt;code&gt;rig-qdrant&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;br&gt; &lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/0xPlaygrounds/rig/main/img/built-by-playgrounds.svg?sanitize=true&#34; alt=&#34;Build by Playgrounds&#34; width=&#34;30%&#34;&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>movementlabsxyz/movement</title>
    <updated>2024-12-12T01:35:14Z</updated>
    <id>tag:github.com,2024-12-12:/movementlabsxyz/movement</id>
    <link href="https://github.com/movementlabsxyz/movement" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Movement Network is a Move-based L2 on Ethereum.&lt;/p&gt;&lt;hr&gt;&lt;a href=&#34;https://movementlabs.xyz/&#34;&gt; &lt;h1 align=&#34;center&#34;&gt; &lt;img alt=&#34;Movement&#34; src=&#34;https://raw.githubusercontent.com/movementlabsxyz/movement/main/img/movement-labs-logo-yellow.png&#34;&gt; &lt;/h1&gt; &lt;/a&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/movementlabsxyz&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1101576619493167217?logo=discord&#34; alt=&#34;Discord badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=movementlabsxyz&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/movementlabsxyz.svg?style=social&amp;amp;label=Follow&#34; alt=&#34;Twitter handle&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Movement SDK is a collection of tools and libraries for building, deploying, and working with Movement Labs infrastructure. The SDK is designed to be modular and extensible, allowing developers to build custom tools and libraries on top of the core components as well as to interact with Movement Labs&#39; own networks.&lt;/p&gt; &#xA;&lt;h2&gt;Important&lt;/h2&gt; &#xA;&lt;p&gt;Unless otherwise specified assume all commands below are run after entering a nix shell with &lt;code&gt;nix develop&lt;/code&gt;. Development is made possible Within the Nix environment with all needed tooling being available. If you are wishing to run the network then this can also be achieved without the need to install &lt;code&gt;nix&lt;/code&gt; with having docker and &lt;a href=&#34;https://github.com/casey/just&#34;&gt;just&lt;/a&gt; installed only.&lt;/p&gt; &#xA;&lt;h2&gt;Organization&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/movementlabsxyz/movement/main/scripts&#34;&gt;&lt;code&gt;scripts&lt;/code&gt;&lt;/a&gt;: Scripts for running Movement Labs software. See the &lt;a href=&#34;https://raw.githubusercontent.com/movementlabsxyz/movement/main/scripts/README.md&#34;&gt;scripts README&lt;/a&gt; for more information about the organization of scripts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/movementlabsxyz/movement/main/process-compose&#34;&gt;&lt;code&gt;process-compose&lt;/code&gt;&lt;/a&gt;: Process compose files for running Movement Labs software. These files are part of the standard flow for running and testing components in the Movement Network. See the &lt;a href=&#34;https://raw.githubusercontent.com/movementlabsxyz/movement/main/scripts/README.md&#34;&gt;scripts README&lt;/a&gt; for more information about the organization of scripts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/movementlabsxyz/movement/main/docker&#34;&gt;&lt;code&gt;docker&lt;/code&gt;&lt;/a&gt;: Dockerfiles for building Movement Labs software and Docker compose files for orchestrating services. See the &lt;a href=&#34;https://raw.githubusercontent.com/movementlabsxyz/movement/main/docker/README.md&#34;&gt;docker README&lt;/a&gt; for more information about the organization of Dockerfiles.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/movementlabsxyz/movement/main/protocol-units&#34;&gt;&lt;code&gt;protocol-units&lt;/code&gt;&lt;/a&gt;: Protocol units for the Movement Network. These are the core building blocks of the Movement Network. See the &lt;a href=&#34;https://raw.githubusercontent.com/movementlabsxyz/movement/main/protocol-units/README.md&#34;&gt;protocol-units README&lt;/a&gt; for more information about the organization of protocol units.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/movementlabsxyz/movement/main/networks&#34;&gt;&lt;code&gt;networks&lt;/code&gt;&lt;/a&gt;: Network runner entry points for the Movement Network. These are the entry points for running the Movement Network. See the &lt;a href=&#34;https://raw.githubusercontent.com/movementlabsxyz/movement/main/networks/README.md&#34;&gt;networks README&lt;/a&gt; for more information about the organization of network runners.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/movementlabsxyz/movement/main/util&#34;&gt;&lt;code&gt;util&lt;/code&gt;&lt;/a&gt;: Utility crates for the Movement SDK. These crates provide useful functions, macros, and types for use in Movement SDK projects. See the &lt;a href=&#34;https://raw.githubusercontent.com/movementlabsxyz/movement/main/util/README.md&#34;&gt;util README&lt;/a&gt; for more information about the organization of utility crates.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/movementlabsxyz/movement/main/proto&#34;&gt;&lt;code&gt;proto&lt;/code&gt;&lt;/a&gt;: Protocol buffer definitions for the Movement Network. These definitions are used to generate code for interacting with the Movement Network. See the &lt;a href=&#34;https://raw.githubusercontent.com/movementlabsxyz/movement/main/proto/README.md&#34;&gt;proto README&lt;/a&gt; for more information about the organization of protocol buffer definitions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Prerequisites (Development)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Nix package manager. Use nix to run and build Movement developer environments. &lt;a href=&#34;https://nix.dev/install-nix&#34;&gt;https://nix.dev/install-nix&lt;/a&gt; or &lt;a href=&#34;https://determinate.systems/posts/determinate-nix-installer/&#34;&gt;https://determinate.systems/posts/determinate-nix-installer/&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Prerequisites (Running Node)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docker and Docker Compose&lt;/li&gt; &#xA; &lt;li&gt;just &lt;a href=&#34;https://github.com/casey/just&#34;&gt;https://github.com/casey/just&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running Natively (Nix required)&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;movement-celestia-da-light-node&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Features&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;build&lt;/code&gt;: Build the &lt;code&gt;movement-celestia-da-light-node&lt;/code&gt; binaries.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;setup&lt;/code&gt;: Run setup for new &lt;code&gt;movement-celestia-da-light-node&lt;/code&gt; network with single node.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;local&lt;/code&gt;: Run a local Celestia Data Availability service. (Default.)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;arabica&lt;/code&gt;: Run an Arabica Celestia Data Availability service. (Overrides local.)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;test&lt;/code&gt;: Run the test suite for the &lt;code&gt;movement-celestia-da-light-node&lt;/code&gt;. (Can be combined with &lt;code&gt;local&lt;/code&gt; or &lt;code&gt;arabica&lt;/code&gt;. Exits on completion by default.)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# example test with local  Celestia Data Availability service&#xA;just movement-celestia-da-light-node native build.setup.test.local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;movement-full-node&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Features&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;build&lt;/code&gt;: Build the &lt;code&gt;movement-full-node&lt;/code&gt; binaries.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;celestia-arabica&lt;/code&gt;: DA on Celestia&#39;s Arabica network&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;celestia-local&lt;/code&gt;: Run a local Celesta Data Availability service.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;celestia-mocha&lt;/code&gt;: DA on Celestia&#39;s Mocha network&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;eth-local&lt;/code&gt;: Settlement on a local Ethereum network&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;eth-holesky&lt;/code&gt;: Settlement on a Holesky Ethereum network&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;setup&lt;/code&gt;: Run setup for new &lt;code&gt;movement-full-node&lt;/code&gt; network with single node.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;indexer&lt;/code&gt;: Run a local indexer&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;test&lt;/code&gt;: run the test suite for &lt;code&gt;movement-full-node&lt;/code&gt;. (Can be combined with &lt;code&gt;local&lt;/code&gt;. Exits on completion by default.)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# example test with local celestia and local ethereum&#xA;just movement-full-node native build.setup.celestia-local.eth-local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run a Movement Node with Docker Compose&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure you have installed the &lt;code&gt;just&lt;/code&gt; command on your system. If not check the &#34;Prerequisites&#34; section of this repo.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When running with &lt;code&gt;docker compose&lt;/code&gt; specify your revision in a file &lt;code&gt;.env&lt;/code&gt; at the root of the project. The file should look like this:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# /path/to/movement/.env&#xA;CONTAINER_REV=0fe2a4f28820c04ca0db07cdd44cafc98b792f3f&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We recommend to use the latest commit of the &#34;main&#34; branch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GIT_ROOT=$(git rev-parse --show-toplevel)&#xA;MOVEMENT_ENV_FILE=&#34;${GIT_ROOT}/.env&#34;&#xA;[[ -n &#34;${GIT_ROOT}&#34; ]] \&#xA;  &amp;amp;&amp;amp; echo  &#34;CONTAINER_REV=$(git rev-parse HEAD)&#34; &amp;gt; &#34;${MOVEMENT_ENV_FILE}&#34;&#xA;echo &#34;INFO: movement version is $(cat ${MOVEMENT_ENV_FILE})&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;movement-full-node&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Features&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;local&lt;/code&gt;: Run a local Celesta Data Availability service.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We only support running the &lt;code&gt;movement-full-node&lt;/code&gt; with a local Celestia Data Availability service via Docker Compose.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# A local Movement network&#xA;just movement-full-node docker-compose local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Under the hood, &lt;code&gt;just&lt;/code&gt; runs&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# working directory = GIT_ROOT&#xA;GIT_ROOT=$(git rev-parse --show-toplevel)&#xA;docker compose --env-file .env \&#xA;               --file docker/compose/movement-full-node/docker-compose.yml \&#xA;               --file docker/compose/movement-full-node/docker-compose.local.yml \&#xA;               up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; if you want to recreate the network, but not rely on the just target above, please read through the scripts to identify the correct &lt;code&gt;docker-compose&lt;/code&gt; files to run.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you are experiencing any issues starting the local network please remove the local &lt;code&gt;./.movement&lt;/code&gt; folder&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; For attesters in order to receive rewards you need to launch the node in &lt;code&gt;Attester&lt;/code&gt; mode. To do this you will need to provide a private key at runtime. This feature is not implemented yet, at this moment.&lt;/p&gt; &#xA;&lt;h2&gt;Services&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;movement-full-node&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Both &lt;code&gt;native&lt;/code&gt; and &lt;code&gt;docker-compose&lt;/code&gt; runners will serve the following services listening on the specified default addresses:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Only APIs intended for the end-user are listed here. For a full list of services, please refer to respective &lt;code&gt;docker-compose&lt;/code&gt; files.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://api.devnet.aptoslabs.com/v1/spec#/&#34;&gt;Aptos REST API&lt;/a&gt;&lt;/strong&gt;: &lt;code&gt;0.0.0.0:30731&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://aptos.dev/apis/#faucet-api-only-testnetdevnet&#34;&gt;Aptos Faucet API&lt;/a&gt;&lt;/strong&gt;: &lt;code&gt;0.0.0.0:30732&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Node Operation&lt;/h2&gt; &#xA;&lt;p&gt;For node operation guides, please begin with the manual &lt;a href=&#34;https://raw.githubusercontent.com/movementlabsxyz/movement/main/docs/movement-node/run/manual/README.md&#34;&gt;node operation docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the Apache 2.0 License - see the &lt;a href=&#34;https://raw.githubusercontent.com/movementlabsxyz/movement/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nexus-xyz/network-api</title>
    <updated>2024-12-12T01:35:14Z</updated>
    <id>tag:github.com,2024-12-12:/nexus-xyz/network-api</id>
    <link href="https://github.com/nexus-xyz/network-api" rel="alternate"></link>
    <summary type="html">&lt;p&gt;High-performance interface for supplying compute to the Nexus network.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nexus Network CLI&lt;/h1&gt; &#xA;&lt;p&gt;A high-performance command-line interface for contributing proofs to the Nexus network.&lt;/p&gt; &#xA;&lt;figure&gt; &#xA; &lt;a href=&#34;https://beta.nexus.xyz/&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/nexus-xyz/network-api/main/assets/images/nexus-network-image.png&#34; alt=&#34;Nexus Network visualization showing a distributed network of interconnected nodes with a &#39;Launch Network&#39; button in the center&#34;&gt; &lt;/a&gt; &#xA; &lt;figcaption&gt; &#xA;  &lt;strong&gt;Verifiable Computation on a Global Scale&lt;/strong&gt;&#xA;  &lt;br&gt; We&#39;re building a global distributed prover network to unite the world&#39;s computers and power a new and better Internet: the Verifiable Internet. Connect to the beta and give it a try today. &#xA; &lt;/figcaption&gt; &#xA;&lt;/figure&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl https://cli.nexus.xyz/ | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t have Rust installed, you will be prompted to install it.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt update &amp;amp;&amp;amp; sudo apt upgrade&#xA;sudo apt install build-essential pkg-config libssl-dev git-all protobuf-compiler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/windows/wsl/install&#34;&gt;Install WSL&lt;/a&gt; first, then follow Linux instructions.&lt;/p&gt; &#xA;&lt;h2&gt;Terms of Use&lt;/h2&gt; &#xA;&lt;p&gt;Use of the CLI is subject to the &lt;a href=&#34;https://nexus.xyz/terms-of-use&#34;&gt;Terms of Use&lt;/a&gt;. First-time users will be prompted to accept the terms. For non-interactive acceptance (e.g., CI environments), use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;NONINTERACTIVE=1 sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Prover Id&lt;/h2&gt; &#xA;&lt;p&gt;The CLI will prompt for your web prover id from &lt;a href=&#34;https://beta.nexus.xyz/&#34;&gt;beta.nexus.xyz&lt;/a&gt; on startup. It is ok to skip this prompt and a random id will be generated, but you&#39;ll be prompted again on startup until your web prover id is entered.&lt;/p&gt; &#xA;&lt;p&gt;The prover id prompt is disabled when NONINTERACTIVE=1 is set. In a server environment, you can manually overwrite $HOME/.nexus/prover-id with your full prover id.&lt;/p&gt; &#xA;&lt;h2&gt;Current Limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Only latest CLI version is supported&lt;/li&gt; &#xA; &lt;li&gt;No prebuilt binaries yet&lt;/li&gt; &#xA; &lt;li&gt;Proof cycle counting coming soon&lt;/li&gt; &#xA; &lt;li&gt;Program submission requires API key (contact &lt;a href=&#34;mailto:growth@nexus.xyz&#34;&gt;growth@nexus.xyz&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Get Help&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nexus.xyz/network#network-faqs&#34;&gt;Network FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/nexus-xyz&#34;&gt;Discord Community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Technical issues? &lt;a href=&#34;https://github.com/nexus-xyz/network-api/issues&#34;&gt;Open an issue&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Repository Structure&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;network-api/&#xA;‚îú‚îÄ‚îÄ assets/       # Media for documentation&#xA;‚îú‚îÄ‚îÄ clients/&#xA;‚îÇ   ‚îî‚îÄ‚îÄ cli/      # Main CLI implementation&#xA;‚îú‚îÄ‚îÄ proto/        # Shared network interface definition&#xA;‚îî‚îÄ‚îÄ public/       # Files hosted at cli.nexus.xyz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/nexus-xyz/network-api/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for development setup and guidelines.&lt;/p&gt;</summary>
  </entry>
</feed>