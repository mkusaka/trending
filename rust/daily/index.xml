<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-05T01:33:30Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>zksecurity/noname</title>
    <updated>2024-06-05T01:33:30Z</updated>
    <id>tag:github.com,2024-06-05:/zksecurity/noname</id>
    <link href="https://github.com/zksecurity/noname" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Noname: a programming language to write zkapps&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Noname&lt;/h1&gt; &#xA;&lt;p&gt;This is &lt;strong&gt;work-in-progress&lt;/strong&gt; to implement a high-level (Rust and Golang-inspired) programming language to write zkapps for &lt;a href=&#34;https://github.com/o1-labs/proof-systems&#34;&gt;kimchi&lt;/a&gt; or &lt;a href=&#34;https://github.com/iden3/snarkjs&#34;&gt;SnarkJS&lt;/a&gt;. The supported arithmetic backends are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Kimchi&lt;/li&gt; &#xA; &lt;li&gt;R1CS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you don&#39;t know what zero-knowledge proofs, zkapps, or kimchi are, check out &lt;a href=&#34;https://minaprotocol.com/blog/kimchi-the-latest-update-to-minas-proof-system&#34;&gt;that blogpost&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can read more about the project on the noname book: &lt;a href=&#34;https://zksecurity.github.io/noname&#34;&gt;https://zksecurity.github.io/noname&lt;/a&gt; or my &lt;a href=&#34;https://cryptologie.net/#article_573&#34;&gt;series of blogposts&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;I invite you to try to &lt;a href=&#34;https://raw.githubusercontent.com/zksecurity/noname/main/#installation&#34;&gt;install&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/zksecurity/noname/main/#usage&#34;&gt;play&lt;/a&gt; with noname. Please provide feedback and suggestions via the &lt;a href=&#34;https://github.com/zksecurity/noname/issues&#34;&gt;issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;For example, here&#39;s a circuit that has one public input and one private input:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use std::crypto;&#xA;&#xA;fn main(pub public_input: Field, private_input: [Field; 2]) {&#xA;    // checks that they add up to 2&#xA;    let x = private_input[0] + private_input[1];&#xA;    assert_eq(x, 2);&#xA;    &#xA;    // checks that one is the hash of the other&#xA;    let digest = crypto::poseidon(private_input);&#xA;    assert_eq(digest[0], public_input);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can compile it with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ noname test --path examples/example.no --private-inputs &#39;{&#34;private_input&#34;: [&#34;1&#34;, &#34;1&#34;]}&#39; --public-inputs &#39;{&#34;public_input&#34;: &#34;3654913405619483358804575553468071097765421484960111776885779739261304758583&#34;}&#39; --debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which will print the assembly, as well as try to create and verify a proof to make sure everything works. The assembly should look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@ noname.0.7.0&#xA;&#xA;c0 = -7792942617772573725741879823703654500237496169155240735183726605099215774906&#xA;// (truncated)&#xA;c164 = 10888828634279127981352133512429657747610298502219125571406085952954136470354&#xA;DoubleGeneric&amp;lt;1&amp;gt;&#xA;DoubleGeneric&amp;lt;1,0,0,0,0&amp;gt;&#xA;Poseidon&amp;lt;c0,c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14&amp;gt;&#xA;Poseidon&amp;lt;c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29&amp;gt;&#xA;Poseidon&amp;lt;c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44&amp;gt;&#xA;Poseidon&amp;lt;c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59&amp;gt;&#xA;Poseidon&amp;lt;c60,c61,c62,c63,c64,c65,c66,c67,c68,c69,c70,c71,c72,c73,c74&amp;gt;&#xA;Poseidon&amp;lt;c75,c76,c77,c78,c79,c80,c81,c82,c83,c84,c85,c86,c87,c88,c89&amp;gt;&#xA;Poseidon&amp;lt;c90,c91,c92,c93,c94,c95,c96,c97,c98,c99,c100,c101,c102,c103,c104&amp;gt;&#xA;Poseidon&amp;lt;c105,c106,c107,c108,c109,c110,c111,c112,c113,c114,c115,c116,c117,c118,c119&amp;gt;&#xA;Poseidon&amp;lt;c120,c121,c122,c123,c124,c125,c126,c127,c128,c129,c130,c131,c132,c133,c134&amp;gt;&#xA;Poseidon&amp;lt;c135,c136,c137,c138,c139,c140,c141,c142,c143,c144,c145,c146,c147,c148,c149&amp;gt;&#xA;Poseidon&amp;lt;c150,c151,c152,c153,c154,c155,c156,c157,c158,c159,c160,c161,c162,c163,c164&amp;gt;&#xA;DoubleGeneric&amp;lt;&amp;gt;&#xA;DoubleGeneric&amp;lt;1,-1&amp;gt;&#xA;(0,0) -&amp;gt; (14,1)&#xA;(1,0) -&amp;gt; (2,2)&#xA;(13,0) -&amp;gt; (14,0)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you run the command with &lt;code&gt;--debug&lt;/code&gt; it should show you what lines created what gates:&lt;/p&gt; &#xA;&lt;img width=&#34;871&#34; alt=&#34;Screen Shot 2022-11-11 at 11 01 45 PM&#34; src=&#34;https://user-images.githubusercontent.com/1316043/201461923-8d6d6756-9faa-40fe-8f71-16334a4cb98d.png&#34;&gt; &#xA;&lt;p&gt;and what lines created what wiring:&lt;/p&gt; &#xA;&lt;img width=&#34;871&#34; alt=&#34;Screen Shot 2022-11-11 at 11 02 38 PM&#34; src=&#34;https://user-images.githubusercontent.com/1316043/201461945-09121d99-1e7c-4204-962f-99cb24e26b50.png&#34;&gt; &#xA;&lt;p&gt;If you pass an invalid input it should fail with an error:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ noname test --path examples/example.no --private-inputs &#39;{&#34;private_input&#34;: [&#34;2&#34;, &#34;1&#34;]}&#39; --public-inputs &#39;{&#34;public_input&#34;: &#34;3654913405619483358804575553468071097765421484960111776885779739261304758583&#34;}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;864&#34; alt=&#34;Screen Shot 2022-11-11 at 11 03 09 PM&#34; src=&#34;https://user-images.githubusercontent.com/1316043/201461958-43677bef-d251-4075-8314-3b22fc3ba05c.png&#34;&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;As this is work in progress, you need to install the compiler from source using &lt;a href=&#34;https://rustup.rs/&#34;&gt;cargo&lt;/a&gt;. You can do this by running the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cargo install --git https://www.github.com/zksecurity/noname&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Simply write &lt;code&gt;noname&lt;/code&gt; in the console to get access to the CLI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ noname&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To create a project, use &lt;code&gt;noname new&lt;/code&gt; to create a project in a new directory, or &lt;code&gt;noname init&lt;/code&gt; to initialize an existing directory. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ noname new --path my_project &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a &lt;code&gt;Noname.toml&lt;/code&gt; manifest file, which contains the name of your project (which must follow a Github &lt;code&gt;user/repo&lt;/code&gt; format) as well as dependencies you&#39;re using (following the same format, as they are retrieved from Github).&lt;/p&gt; &#xA;&lt;p&gt;This will also create a &lt;code&gt;src&lt;/code&gt; directory, which contains a &lt;code&gt;main.no&lt;/code&gt; file, which is the entry point of your program. If you want to create a library, pass the &lt;code&gt;--lib&lt;/code&gt; flag to the &lt;code&gt;new&lt;/code&gt; or &lt;code&gt;init&lt;/code&gt; command of &lt;code&gt;noname&lt;/code&gt;, and it will create a &lt;code&gt;lib.no&lt;/code&gt; file instead.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ tree&#xA;.&#xA;├── Noname.toml&#xA;└── src&#xA;    └── main.no&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then use the following command to check the correctness of your code (and its dependencies):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ noname check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or you can test a full run with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ noname test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which will attempt to create a proof and verify it. See the &lt;a href=&#34;https://raw.githubusercontent.com/zksecurity/noname/main/#examples&#34;&gt;examples&lt;/a&gt; section to see how to use it.&lt;/p&gt; &#xA;&lt;h2&gt;Current limitations&lt;/h2&gt; &#xA;&lt;p&gt;Currently there are no commands to compile a program and produce the compiled prover and verifier parameters. There is also no command to produce a serializable proof.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s not hard, it&#39;s just hasn&#39;t been prioritized.&lt;/p&gt; &#xA;&lt;p&gt;You can also not use third-party libraries (eventhough the CLI might suggest that it works). I think it&#39;s close to be working though.&lt;/p&gt; &#xA;&lt;p&gt;In general, there&#39;s a large number of missing features. I will prioritize what I think needs to be done, but if you have a feature request, please open an &lt;a href=&#34;https://github.com/zksecurity/noname/issues&#34;&gt;issue&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>