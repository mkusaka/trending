<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-07T01:42:52Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tcdi/plrust</title>
    <updated>2023-04-07T01:42:52Z</updated>
    <id>tag:github.com,2023-04-07:/tcdi/plrust</id>
    <link href="https://github.com/tcdi/plrust" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Rust procedural language handler for PostgreSQL&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PL/Rust: A Trusted Procedural Language Handler&lt;/h1&gt; &#xA;&lt;p&gt;PL/Rust is a loadable procedural language that enables writing PostgreSQL functions in the Rust programming language. These functions are compiled to native machine code. Unlike other procedural languages, PL/Rust functions are not interpreted.&lt;/p&gt; &#xA;&lt;p&gt;The top advantages of PL/Rust include writing natively-compiled functions to achieve the absolute best performance, access to Rust&#39;s large development ecosystem, and Rust&#39;s compile-time safety guarantees.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The PL/Rust &lt;a href=&#34;https://tcdi.github.io/plrust/&#34;&gt;documentation is moving&lt;/a&gt; to a more user friendly format. The mdbook format documentation is auto-generated from the main branch.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;PL/Rust provides access to Postgres&#39; Server Programming Interface (SPI) including dynamic queries, prepared statements, and cursors. It also provides safe Rust types over most of Postgres built-in data types, including (but not limited to), TEXT, INT, BIGINT, NUMERIC, FLOAT, DOUBLE PRECISION, DATE, TIME, etc.&lt;/p&gt; &#xA;&lt;p&gt;On x86_64 and aarch64 systems PL/Rust can be a &#34;trusted&#34; procedural language, assuming the proper compilation requirements are met. On other systems, it is perfectly usable as an &#34;untrusted&#34; language but cannot provide the same level of safety guarantees.&lt;/p&gt; &#xA;&lt;p&gt;An example PL/Rust function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- return the character length of a text string&#xA;CREATE FUNCTION strlen(name TEXT) RETURNS int LANGUAGE plrust AS $$&#xA;    Ok(Some(name.unwrap().len() as i32))&#xA;$$;&#xA;&#xA;# select strlen(&#39;Hello, PL/Rust&#39;);&#xA;strlen &#xA;--------&#xA;     14&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;PL/Rust itself is a &lt;a href=&#34;https://github.com/tcdi/pgx&#34;&gt;&lt;code&gt;pgx&lt;/code&gt;&lt;/a&gt;-based Postgres extension. Furthermore, each &lt;code&gt;LANGUAGE plrust&lt;/code&gt; function are themselves mini-pgx extensions. &lt;code&gt;pgx&lt;/code&gt;is a generalized framework for developing Postgres extensions with Rust. Like this project, &lt;code&gt;pgx&lt;/code&gt; is developed by &lt;a href=&#34;https://www.tcdi.com&#34;&gt;TCDI&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The following sections discuss PL/Rusts safety guarantees, configuration settings, and installation instructions.&lt;/p&gt; &#xA;&lt;h1&gt;Installing PL/Rust&lt;/h1&gt; &#xA;&lt;p&gt;Installing PL/Rust and especially &lt;code&gt;postgrestd&lt;/code&gt; requires a normal installation of Rust via &lt;a href=&#34;https://rustup.rs&#34;&gt;&lt;code&gt;rustup&lt;/code&gt;&lt;/a&gt; and for the relevant locations to be writeable on the building host. See the &lt;a href=&#34;https://tcdi.github.io/plrust/install-plrust.html&#34;&gt;Install PL/Rust&lt;/a&gt; section of the documentation for notes on installing PL/Rust and its dependencies.&lt;/p&gt; &#xA;&lt;h2&gt;Cross Compilation Support&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://tcdi.github.io/plrust/install-cross-compile.html&#34;&gt;Cross compliation&lt;/a&gt; section of the documentation for cross-compilation details.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://tcdi.github.io/plrust/config-pg.html&#34;&gt;PostgreSQL Configuration&lt;/a&gt; section of the documentation for notes on configuring PL/Rust in &lt;code&gt;postgresql.conf&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Lints&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://tcdi.github.io/plrust/config-lints.html&#34;&gt;Lints section&lt;/a&gt; of the documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Environment Variables&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://tcdi.github.io/plrust/config-env-var.html&#34;&gt;Environment variables section&lt;/a&gt; of the documentation.&lt;/p&gt; &#xA;&lt;h1&gt;Quickly Getting Started&lt;/h1&gt; &#xA;&lt;p&gt;To quickly get started using PL/Rust for evaluation purposes, install &lt;code&gt;cargo-pgx&lt;/code&gt; following the steps from above, then...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/tcdi/plrust.git&#xA;$ cd plrust/plrust&#xA;$ cargo pgx run pg14&#xA;psql&amp;gt; \q&#xA;&#xA;$ SCRATCH_DIR=/home/${USER}/plrust-scratch&#xA;$ cat &amp;lt;&amp;lt;-EOF &amp;gt;&amp;gt; ~/.pgx/data-14/postgresql.conf&#xA;  plrust.work_dir = &#39;${SCRATCH_DIR}&#39;&#xA;EOF&#xA;$ mkdir -p scratch&#xA;$ chmod -R 777 scratch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run it for real and start writing functions!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo pgx run pg14&#xA;psql&amp;gt; CREATE EXTENSION plrust;&#xA;psql&amp;gt; CREATE FUNCTION strlen(name TEXT) RETURNS int LANGUAGE plrust AS $$&#xA;    Ok(Some(name.unwrap().len() as i32))&#xA;$$;&#xA;psql&amp;gt; select strlen(&#39;Hello, PL/Rust&#39;);&#xA;strlen &#xA;--------&#xA;     14&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Other Notes&lt;/h1&gt; &#xA;&lt;p&gt;In the Postgres world it seems common for procedural languages to have two styles, &#34;trusted&#34; and &#34;untrusted&#34;. The consensus is to name those as &#34;lang&#34; and &#34;langu&#34;, respectively -- where the &#34;u&#34; is supposed to represent &#34;untrusted&#34; (see &#34;plperl&#34; v/s &#34;plperlu&#34; for example).&lt;/p&gt; &#xA;&lt;p&gt;PL/Rust does not do this. The only thing that Postgres uses to determine if a language handler is considered &#34;trusted&#34; is if it was created using &lt;code&gt;CREATE TRUSTED LANGUAGE&lt;/code&gt;. It does not inspect the name.&lt;/p&gt; &#xA;&lt;p&gt;PL/Rust stores the compiled user function binaries as a &lt;code&gt;bytea&lt;/code&gt; in an extension-specific table uniquely key&#39;d with its compilation target.&lt;/p&gt; &#xA;&lt;p&gt;As such, compiling a function with an &#34;untrusted&#34; version of PL/Rust, then installing the &#34;trusted&#34; version and trying to run that function will fail -- &#34;trusted&#34; and &#34;untrusted&#34; are considered different compilation targets and are not compatible with each other, even if the underlying hardware is exactly the same.&lt;/p&gt; &#xA;&lt;p&gt;This does mean that it is not possible to install both &#34;trusted&#34; and &#34;untrusted&#34; versions of PL/Rust on the same Postgres database cluster.&lt;/p&gt; &#xA;&lt;p&gt;In the future, as &lt;code&gt;postgrestd&lt;/code&gt; is ported to more platforms, we will seriously consider having both &lt;code&gt;plrust&lt;/code&gt; and &lt;code&gt;plrustu&lt;/code&gt;. Right now, since &#34;trusted&#34; is only possible on Linux &lt;code&gt;x86_64&lt;/code&gt;/&lt;code&gt;aarch64&lt;/code&gt;, our objective is to drive production installations to be &#34;trusted&#34;, while allowing non-Linux developers the ability to use &lt;code&gt;LANGUAGE plrust&lt;/code&gt; too.&lt;/p&gt; &#xA;&lt;h1&gt;Security Notice&lt;/h1&gt; &#xA;&lt;p&gt;Please read the &lt;a href=&#34;https://raw.githubusercontent.com/tcdi/plrust/main/SECURITY.md&#34;&gt;Security&lt;/a&gt; for directions on reporting a potential security issue.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;PL/Rust is licensed under &#34;The PostgreSQL License&#34;, which can be found &lt;a href=&#34;https://raw.githubusercontent.com/tcdi/plrust/main/LICENSE.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>