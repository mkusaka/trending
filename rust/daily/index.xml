<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-11T01:31:50Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kxxt/tracexec</title>
    <updated>2024-05-11T01:31:50Z</updated>
    <id>tag:github.com,2024-05-11:/kxxt/tracexec</id>
    <link href="https://github.com/kxxt/tracexec" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A small utility for tracing execve{,at} and pre-exec behavior.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;tracexec&lt;/h1&gt; &#xA;&lt;p&gt;A small utility for tracing execve{,at} and pre-exec behavior.&lt;/p&gt; &#xA;&lt;p&gt;tracexec helps you to figure out what and how programs get executed when you execute a command.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s useful for debugging build systems, understanding what shell scripts actually do, figuring out what programs does a proprietary software run, etc.&lt;/p&gt; &#xA;&lt;h2&gt;Showcases&lt;/h2&gt; &#xA;&lt;h3&gt;TUI mode with pseudo terminal&lt;/h3&gt; &#xA;&lt;p&gt;In TUI mode with a pseudo terminal, you can view the details of exec events and interact with the processes within the pseudo terminal at ease.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/kxxt/tracexec/raw/main/screenshots/tui-demo.gif?raw=true&#34; alt=&#34;TUI demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Tracing setuid binaries&lt;/h3&gt; &#xA;&lt;p&gt;With root privileges, you can also trace setuid binaries and see how they work. But do note that this is not compatible with seccomp-bpf optimization so it is much less performant.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo tracexec --user $(whoami) tui -t -- sudo ls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/kxxt/tracexec/raw/main/screenshots/tracing-sudo.png?raw=true&#34; alt=&#34;Tracing sudo ls&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Nested setuid binary tracing is also possible: A real world use case is to trace &lt;code&gt;extra-x86_64-build&lt;/code&gt;(Arch Linux&#39;s build tool that requires sudo):&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/kxxt/tracexec/raw/main/screenshots/tracing-nested-setuid.gif?raw=true&#34; alt=&#34;Tracing extra-x86_64-build&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In this real world example, we can easily see that &lt;code&gt;_FORTIFY_SOURCE&lt;/code&gt; is redefined from &lt;code&gt;2&lt;/code&gt; to &lt;code&gt;3&lt;/code&gt;, which lead to a compiler error.&lt;/p&gt; &#xA;&lt;h3&gt;Log mode&lt;/h3&gt; &#xA;&lt;p&gt;In log mode, by default, &lt;code&gt;tracexec&lt;/code&gt; will print filename, argv and the diff of the environment variables and file descriptors.&lt;/p&gt; &#xA;&lt;p&gt;example: &lt;code&gt;tracexec log -- bash&lt;/code&gt; (In an interactive bash shell)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/sNptWG6De3V5xwUvXJAxWlO3i&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/sNptWG6De3V5xwUvXJAxWlO3i.svg?sanitize=true&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Reconstruct the command line with &lt;code&gt;--show-cmdline&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ tracexec log --show-cmdline -- &amp;lt;command&amp;gt;&#xA;# example:&#xA;$ tracexec log --show-cmdline -- firefox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/AWTG4iHaFPMcEGCVtqAl44YFW&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/AWTG4iHaFPMcEGCVtqAl44YFW.svg?sanitize=true&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Try to reproduce stdio in the reconstructed command line&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;--stdio-in-cmdline&lt;/code&gt; and &lt;code&gt;--fd-in-cmdline&lt;/code&gt; can be used to reproduce(hopefully) the stdio used by a process.&lt;/p&gt; &#xA;&lt;p&gt;But do note that the result might be inaccurate when pipes, sockets, etc are involved.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tracexec log --show-cmdline --stdio-in-cmdline -- bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/NkBTaoNHS7P7bolO0hNuRwGlQ&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/NkBTaoNHS7P7bolO0hNuRwGlQ.svg?sanitize=true&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Show the interpreter indicated by shebang with &lt;code&gt;--show-interpreter&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;And show the cwd with &lt;code&gt;--show-cwd&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ tracexec log --show-interpreter --show-cwd -- &amp;lt;command&amp;gt;&#xA;# example: Running Arch Linux makepkg&#xA;$ tracexec log --show-interpreter --show-cwd -- makepkg -f&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/7jDtrlNRx5XUnDXeDBsMRj09p&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/7jDtrlNRx5XUnDXeDBsMRj09p.svg?sanitize=true&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;From source&lt;/h3&gt; &#xA;&lt;p&gt;Via cargo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo install tracexec --bin tracexec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Arch Linux users can also install from the official repositories via &lt;code&gt;pacman -S tracexec&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Binary&lt;/h3&gt; &#xA;&lt;p&gt;You can download the binary from the &lt;a href=&#34;https://github.com/kxxt/tracexec/releases&#34;&gt;release page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also install &lt;code&gt;tracexec-bin&lt;/code&gt; from AUR.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;General CLI help:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;A small utility for tracing execve{,at} and pre-exec behavior&#xA;&#xA;Usage: tracexec [OPTIONS] &amp;lt;COMMAND&amp;gt;&#xA;&#xA;Commands:&#xA;  log   Run tracexec in logging mode&#xA;  tui   Run tracexec in TUI mode, stdin/out/err are redirected to /dev/null by default&#xA;  help  Print this message or the help of the given subcommand(s)&#xA;&#xA;Options:&#xA;      --color &amp;lt;COLOR&amp;gt;  Control whether colored output is enabled. This flag has no effect on TUI mode. [default: auto] [possible values: auto, always, never]&#xA;  -C, --cwd &amp;lt;CWD&amp;gt;      Change current directory to this path before doing anything&#xA;  -u, --user &amp;lt;USER&amp;gt;    Run as user. This option is only available when running tracexec as root&#xA;  -h, --help           Print help&#xA;  -V, --version        Print version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;TUI Mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Run tracexec in TUI mode, stdin/out/err are redirected to /dev/null by default&#xA;&#xA;Usage: tracexec tui [OPTIONS] -- &amp;lt;CMD&amp;gt;...&#xA;&#xA;Arguments:&#xA;  &amp;lt;CMD&amp;gt;...  command to be executed&#xA;&#xA;Options:&#xA;      --seccomp-bpf &amp;lt;SECCOMP_BPF&amp;gt;&#xA;          seccomp-bpf filtering option [default: auto] [possible values: auto, on, off]&#xA;      --successful-only&#xA;          Only show successful calls&#xA;      --fd-in-cmdline&#xA;          [Experimental] Try to reproduce file descriptors in commandline. This might result in an unexecutable cmdline if pipes, sockets, etc. are involved.&#xA;      --stdio-in-cmdline&#xA;          [Experimental] Try to reproduce stdio in commandline. This might result in an unexecutable cmdline if pipes, sockets, etc. are involved.&#xA;      --show-all-events&#xA;          Set the default filter to show all events. This option can be used in combination with --filter-exclude to exclude some unwanted events.&#xA;      --filter &amp;lt;FILTER&amp;gt;&#xA;          Set the default filter for events. [default: warning,error,exec,tracee-exit]&#xA;      --filter-include &amp;lt;FILTER_INCLUDE&amp;gt;&#xA;          Aside from the default filter, also include the events specified here. [default: &amp;lt;empty&amp;gt;]&#xA;      --filter-exclude &amp;lt;FILTER_EXCLUDE&amp;gt;&#xA;          Exclude the events specified here from the default filter. [default: &amp;lt;empty&amp;gt;]&#xA;  -t, --tty&#xA;          Allocate a pseudo terminal and show it alongside the TUI&#xA;  -f, --follow&#xA;          Keep the event list scrolled to the bottom&#xA;      --terminate-on-exit&#xA;          Instead of waiting for the root child to exit, terminate when the TUI exits&#xA;      --kill-on-exit&#xA;          Instead of waiting for the root child to exit, kill when the TUI exits&#xA;  -A, --active-pane &amp;lt;ACTIVE_PANE&amp;gt;&#xA;          Set the default active pane to use when TUI launches [default: terminal] [possible values: terminal, events]&#xA;  -L, --layout &amp;lt;LAYOUT&amp;gt;&#xA;          Set the layout of the TUI when it launches [default: horizontal] [possible values: horizontal, vertical]&#xA;  -F, --frame-rate &amp;lt;FRAME_RATE&amp;gt;&#xA;          Set the frame rate of the TUI [default: 60.0]&#xA;  -h, --help&#xA;          Print help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Log Mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Run tracexec in logging mode&#xA;&#xA;Usage: tracexec log [OPTIONS] -- &amp;lt;CMD&amp;gt;...&#xA;&#xA;Arguments:&#xA;  &amp;lt;CMD&amp;gt;...  command to be executed&#xA;&#xA;Options:&#xA;      --show-cmdline&#xA;          Print commandline that (hopefully) reproduces what was executed. Note: file descriptors are not handled for now.&#xA;      --show-interpreter&#xA;          Try to show script interpreter indicated by shebang&#xA;      --more-colors&#xA;          More colors&#xA;      --less-colors&#xA;          Less colors&#xA;      --diff-fd&#xA;          Diff file descriptors with the original std{in/out/err}&#xA;      --no-diff-fd&#xA;          Do not diff file descriptors&#xA;      --show-fd&#xA;          Show file descriptors&#xA;      --no-show-fd&#xA;          Do not show file descriptors&#xA;      --diff-env&#xA;          Diff environment variables with the original environment&#xA;      --no-diff-env&#xA;          Do not diff environment variables&#xA;      --show-env&#xA;          Show environment variables&#xA;      --no-show-env&#xA;          Do not show environment variables&#xA;      --show-comm&#xA;          Show comm&#xA;      --no-show-comm&#xA;          Do not show comm&#xA;      --show-argv&#xA;          Show argv&#xA;      --no-show-argv&#xA;          Do not show argv&#xA;      --show-filename&#xA;          Show filename&#xA;      --no-show-filename&#xA;          Do not show filename&#xA;      --show-cwd&#xA;          Show cwd&#xA;      --no-show-cwd&#xA;          Do not show cwd&#xA;      --decode-errno&#xA;          Decode errno values&#xA;      --no-decode-errno&#xA;          &#xA;      --seccomp-bpf &amp;lt;SECCOMP_BPF&amp;gt;&#xA;          seccomp-bpf filtering option [default: auto] [possible values: auto, on, off]&#xA;      --successful-only&#xA;          Only show successful calls&#xA;      --fd-in-cmdline&#xA;          [Experimental] Try to reproduce file descriptors in commandline. This might result in an unexecutable cmdline if pipes, sockets, etc. are involved.&#xA;      --stdio-in-cmdline&#xA;          [Experimental] Try to reproduce stdio in commandline. This might result in an unexecutable cmdline if pipes, sockets, etc. are involved.&#xA;      --show-all-events&#xA;          Set the default filter to show all events. This option can be used in combination with --filter-exclude to exclude some unwanted events.&#xA;      --filter &amp;lt;FILTER&amp;gt;&#xA;          Set the default filter for events. [default: warning,error,exec,tracee-exit]&#xA;      --filter-include &amp;lt;FILTER_INCLUDE&amp;gt;&#xA;          Aside from the default filter, also include the events specified here. [default: &amp;lt;empty&amp;gt;]&#xA;      --filter-exclude &amp;lt;FILTER_EXCLUDE&amp;gt;&#xA;          Exclude the events specified here from the default filter. [default: &amp;lt;empty&amp;gt;]&#xA;  -o, --output &amp;lt;OUTPUT&amp;gt;&#xA;          Output, stderr by default. A single hyphen &#39;-&#39; represents stdout.&#xA;  -h, --help&#xA;          Print help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The recommended way to use &lt;code&gt;tracexec&lt;/code&gt; is to create an alias with your favorite options in your bashrc:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alias tracex=&#39;tracexec log --show-cmdline --show-interpreter --show-children --show-filename --&#39;&#xA;alias txtui=&#39;tracexec tui -t --&#39;&#xA;# Now you can use&#xA;tracex &amp;lt;command&amp;gt;&#xA;txtui &amp;lt;command&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Known issues&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Non UTF-8 strings are converted to UTF-8 in a lossy way, which means that the output may be inaccurate.&lt;/li&gt; &#xA; &lt;li&gt;The output is not stable yet, which means that the output may change in the future.&lt;/li&gt; &#xA; &lt;li&gt;Test coverage is not good enough.&lt;/li&gt; &#xA; &lt;li&gt;The pseudo terminal can&#39;t pass through certain key combinations and terminal features.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Origin&lt;/h2&gt; &#xA;&lt;p&gt;This project was born out of the need to trace the execution of programs.&lt;/p&gt; &#xA;&lt;p&gt;Initially I simply use &lt;code&gt;strace -Y -f -qqq -s99999 -e trace=execve,execveat &amp;lt;command&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;But the output is still too verbose so that&#39;s why I created this project.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;This project takes inspiration from &lt;a href=&#34;https://strace.io/&#34;&gt;strace&lt;/a&gt; and &lt;a href=&#34;https://github.com/JakWai01/lurk&#34;&gt;lurk&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sophiajt/june</title>
    <updated>2024-05-11T01:31:50Z</updated>
    <id>tag:github.com,2024-05-11:/sophiajt/june</id>
    <link href="https://github.com/sophiajt/june" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;June, a gradual, safe systems language&lt;/h1&gt; &#xA;&lt;h2&gt;Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Teachability | Learnability | Readability&lt;/li&gt; &#xA; &lt;li&gt;Efficiency | Productivity&lt;/li&gt; &#xA; &lt;li&gt;Systems and application programming&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also see the &lt;a href=&#34;https://raw.githubusercontent.com/sophiajt/june/main/docs/philosophy.md&#34;&gt;philosophy&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h2&gt;Participating in the closed alpha/beta&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;How to file feedback &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;File feedback as issues on the repo: &lt;a href=&#34;https://github.com/sophiajt/june/issues&#34;&gt;https://github.com/sophiajt/june/issues&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;When you file issues, please also submit the git hash of the revision you&#39;ve built from&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;The June project is still in its early days of development. While we have developed a compiler in tandem with designing the language, both should be considered experimental and pre-alpha in quality. Significant changes to both the language and the compiler should be expected.&lt;/p&gt; &#xA;&lt;h2&gt;Running the test suite&lt;/h2&gt; &#xA;&lt;p&gt;To run the June test suite, be sure to have the following installed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A recent &lt;code&gt;rustc&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;A recent &lt;code&gt;cargo&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;A reasonably good &lt;code&gt;clang&lt;/code&gt; in your path&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The June compiler outputs C code, which you can then build with a C-compatible compiler. The test suite assumes &lt;code&gt;clang&lt;/code&gt; is the compiler that is available. (Note for Windows users: Visual Studio can install &#39;clang&#39; as an optional install)&lt;/p&gt; &#xA;&lt;h2&gt;How to compile&lt;/h2&gt; &#xA;&lt;p&gt;June currently provides some rudimentary support for building june projects. We don&#39;t yet support creating new june projects. June only supports binary projects at the moment, with a main.june file inside a &lt;code&gt;main&lt;/code&gt; folder. The project root is marked by a &lt;code&gt;June.toml&lt;/code&gt; file which is currently empty and unused, but will eventually contain metadata about the project including the output binary name. Inside of a properly setup june project one should be able to build by simply typing &lt;code&gt;june build&lt;/code&gt;. Once the build step completes you should have a binary in &lt;code&gt;build/debug&lt;/code&gt; called&lt;code&gt;main&lt;/code&gt; which you can run manually.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;project_dir/&#xA;    main/&#xA;        main.june&#xA;    June.toml&#xA;    .gitignore&#xA;    build/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, the current version of June can be used compile June code to C by passing the filename directly such as with &lt;code&gt;june main.june&lt;/code&gt;. After outputting C, you&#39;ll need to redirect this to a file, and then use a C compiler to build the June application.&lt;/p&gt; &#xA;&lt;h2&gt;The June language&lt;/h2&gt; &#xA;&lt;p&gt;For more information on the June language, check out &lt;a href=&#34;https://raw.githubusercontent.com/sophiajt/june/main/docs/language.md&#34;&gt;the June language documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Reporting issues&lt;/h2&gt; &#xA;&lt;p&gt;The best way to file issues is to file them through the &lt;a href=&#34;https://github.com/sophiajt/june/issues&#34;&gt;GitHub issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;Our main goal with June is to build out an implementation of its initial design and to test it.&lt;/p&gt; &#xA;&lt;p&gt;As we dogfood, we will likely change the design of the language where we see it doesn&#39;t meet the goals of the project.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;ll likely also work towards support in IDEs (using things like LSP) to make it easier to write larger June projects and get interactive feedback from the tools.&lt;/p&gt;</summary>
  </entry>
</feed>