<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-08-07T01:35:40Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>valadaptive/ntsc-rs</title>
    <updated>2025-08-07T01:35:40Z</updated>
    <id>tag:github.com,2025-08-07:/valadaptive/ntsc-rs</id>
    <link href="https://github.com/valadaptive/ntsc-rs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Free, open-source VHS effect. Standalone application + plugin (After Effects, Premiere, and OpenFX).&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://ntsc.rs&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;./docs/img/logo-darkmode.svg&#34;&gt; &#xA;   &lt;img alt=&#34;ntsc-rs logo&#34; src=&#34;https://raw.githubusercontent.com/valadaptive/ntsc-rs/main/docs/img/logo-lightmode.svg?sanitize=true&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;ntsc-rs&lt;/strong&gt; is a video effect which emulates NTSC and VHS video artifacts. It can be used as an After Effects, Premiere, or OpenFX plugin, or as a standalone application.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/valadaptive/ntsc-rs/main/docs/img/appdemo.png&#34; alt=&#34;Screenshot of the ntsc-rs standalone application&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Download and Install&lt;/h2&gt; &#xA;&lt;p&gt;The latest version of ntsc-rs can be downloaded from &lt;a href=&#34;https://github.com/valadaptive/ntsc-rs/releases&#34;&gt;the releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After downloading, &lt;a href=&#34;https://ntsc.rs/docs/standalone-installation/&#34;&gt;read the documentation for how to run it&lt;/a&gt;. In particular, ntsc-rs will not work properly on Linux unless you install all of the GStreamer packages listed in the documentation.&lt;/p&gt; &#xA;&lt;h2&gt;More information&lt;/h2&gt; &#xA;&lt;p&gt;ntsc-rs is a rough Rust port of &lt;a href=&#34;https://github.com/JargeZ/ntscqt&#34;&gt;ntscqt&lt;/a&gt;, a PyQt-based GUI for &lt;a href=&#34;https://github.com/zhuker/ntsc&#34;&gt;ntsc&lt;/a&gt;, itself a Python port of &lt;a href=&#34;https://github.com/joncampbell123/composite-video-simulator&#34;&gt;composite-video-simulator&lt;/a&gt;. Reimplementing the image processing in multithreaded Rust allows it to run at (mostly) real-time speeds.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s not an exact port--some processing passes have visibly different results, and some new ones have been added.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>category-labs/monad-bft</title>
    <updated>2025-08-07T01:35:40Z</updated>
    <id>tag:github.com,2025-08-07:/category-labs/monad-bft</id>
    <link href="https://github.com/category-labs/monad-bft" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Monad BFT&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/monad-crypto/monad-bft/actions/workflows/randomized.yml/badge.svg?branch=master&#34; alt=&#34;Nightly Tests&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains implementation for the Monad consensus client and JsonRpc server. Monad consensus collects transactions and produces blocks which are written to a ledger filestream. These blocks are consumed by Monad execution, which then updates the state of the blockchain. The &lt;a href=&#34;https://raw.githubusercontent.com/category-labs/monad-bft/master/monad-triedb/README.md&#34;&gt;triedb&lt;/a&gt; is a database which stores block information and the blockchain state.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using Docker&lt;/h3&gt; &#xA;&lt;p&gt;The most straightforward way to start a consensus client + an execution client + a JsonRpc server. Run the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;cd docker/single-node&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nets/run.sh&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Using Cargo&lt;/h3&gt; &#xA;&lt;p&gt;To run a Monad consensus client, follow instructions &lt;a href=&#34;https://raw.githubusercontent.com/category-labs/monad-bft/master/monad-node/README.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To run a JsonRpc server, follow instructions &lt;a href=&#34;https://raw.githubusercontent.com/category-labs/monad-bft/master/monad-rpc/README.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;sequenceDiagram&#xA;autonumber&#xA;    participant D as Driver&#xA;    box Purple Executor&#xA;    participant S as impl Stream&#xA;    participant E as impl Executor&#xA;    end&#xA;    participant State&#xA;    participant PersistenceLogger&#xA;    loop&#xA;    D -&amp;gt;&amp;gt;+ S: CALL next()&#xA;    Note over S: blocks until event ready&#xA;    S --&amp;gt;&amp;gt;- D: RETURN Event&#xA;    D -&amp;gt;&amp;gt; PersistenceLogger: CALL push(Event)&#xA;    D -&amp;gt;&amp;gt;+ State: CALL update(Event)&#xA;    Note over State: mutate state&#xA;    State --&amp;gt;&amp;gt;- D: RETURN Vec&amp;lt;Command&amp;gt;&#xA;    D -&amp;gt;&amp;gt; E: CALL exec(Vec&amp;lt;Command&amp;gt;)&#xA;    Note over E: apply side effects&#xA;    end&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>