<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-17T01:43:17Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>awslabs/mountpoint-s3</title>
    <updated>2023-03-17T01:43:17Z</updated>
    <id>tag:github.com,2023-03-17:/awslabs/mountpoint-s3</id>
    <link href="https://github.com/awslabs/mountpoint-s3" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple, high-throughput file client for mounting an Amazon S3 bucket as a local file system.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mountpoint for Amazon S3&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/awslabs/mountpoint-s3/actions/workflows/rust.yml/badge.svg?branch=main&#34; alt=&#34;CI Status&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Mountpoint for Amazon S3 is a simple, high-throughput file client for &lt;a href=&#34;https://aws.amazon.com/blogs/storage/the-inside-story-on-mountpoint-for-amazon-s3-a-high-performance-open-source-file-client/&#34;&gt;mounting an Amazon S3 bucket as a local file system&lt;/a&gt;. With Mountpoint for Amazon S3, your applications can access objects stored in Amazon S3 through file operations like &lt;code&gt;open&lt;/code&gt; and &lt;code&gt;read&lt;/code&gt;. Mountpoint for Amazon S3 automatically translates these operations into S3 object API calls, giving your applications access to the elastic storage and throughput of Amazon S3 through a file interface.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;File system features&lt;/strong&gt;: Mountpoint for Amazon S3 is optimized for read-heavy workloads that need high throughput. It does not implement the full POSIX specification for file systems, and &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/mountpoint-s3/main/doc/SEMANTICS.md#semantics-tenets&#34;&gt;we don&#39;t intend to implement&lt;/a&gt; features that cannot be efficiently executed against S3&#39;s object APIs. &lt;strong&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/mountpoint-s3/main/doc/SEMANTICS.md&#34;&gt;SEMANTICS.md&lt;/a&gt; for a detailed description of Mountpoint for Amazon S3&#39;s behavior and POSIX support.&lt;/strong&gt; For workloads that need POSIX support, we recommend AWS fully managed file system services like &lt;a href=&#34;https://aws.amazon.com/fsx/lustre/&#34;&gt;Amazon FSx for Lustre&lt;/a&gt; and its &lt;a href=&#34;https://docs.aws.amazon.com/fsx/latest/LustreGuide/create-dra-linked-data-repo.html&#34;&gt;support for linking S3 buckets&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Compatibility&lt;/strong&gt;: Mountpoint for Amazon S3 is designed for high-performance access to the Amazon S3 service. While it may be functional against other storage services that use S3-like APIs, we aren&#39;t able to provide support for those use cases, and they may inadvertently break when we make changes to better support Amazon S3. We welcome contributions of minor compatibility fixes or performance improvements for these services if the changes can be tested against Amazon S3.&lt;/p&gt; &#xA;&lt;h2&gt;Current status&lt;/h2&gt; &#xA;&lt;p&gt;Mountpoint for Amazon S3 is &lt;strong&gt;currently an alpha release and should not be used in production&lt;/strong&gt;. We&#39;re tracking its production readiness and future features on the &lt;a href=&#34;https://github.com/orgs/awslabs/projects/84&#34;&gt;Mountpoint for Amazon S3 public roadmap&lt;/a&gt;. We&#39;re especially interested in early feedback on features, performance, and compatibility. Please send feedback by &lt;a href=&#34;https://github.com/awslabs/mountpoint-s3/issues/new/choose&#34;&gt;opening a GitHub issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are some notable restrictions in this first release:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mountpoint for Amazon S3 is currently &lt;strong&gt;read-only&lt;/strong&gt;, so you won&#39;t be able to write objects back to S3 through the file system. We&#39;re working on &lt;a href=&#34;https://github.com/awslabs/mountpoint-s3/issues/27&#34;&gt;allowing sequential writes to new objects&lt;/a&gt; in a future release.&lt;/li&gt; &#xA; &lt;li&gt;Mountpoint for Amazon S3 does not cache any object data or metadata.&lt;/li&gt; &#xA; &lt;li&gt;The only way to install the alpha release of Mountpoint for Amazon S3 is by compiling from source (see &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/mountpoint-s3/main/#getting-started&#34;&gt;Getting started&lt;/a&gt; below). This will change in a future release.&lt;/li&gt; &#xA; &lt;li&gt;Manual endpoint configuration might be required for some S3 customers (see &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/mountpoint-s3/main/#configuration&#34;&gt;Configuration&lt;/a&gt; below).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;The alpha release of Mountpoint for Amazon S3 is only available by building from source, and only supports Linux. These instructions are for Amazon Linux 2, but other Linux distributions should be similar.&lt;/p&gt; &#xA;&lt;p&gt;First, install dependencies, including the Rust compiler via &lt;a href=&#34;https://rustup.rs/&#34;&gt;rustup&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo yum install fuse fuse-devel cmake3 clang-devel&#xA;curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now clone this repository and its submodules:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --recurse-submodules https://github.com/awslabs/mountpoint-s3.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, compile the client:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd mountpoint-s3&#xA;cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The final binary will be at &lt;code&gt;target/release/mount-s3&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To use the client, first ensure you have &lt;a href=&#34;https://docs.aws.amazon.com/sdkref/latest/guide/access.html&#34;&gt;access to valid AWS credentials&lt;/a&gt;. For example, you could &lt;a href=&#34;https://docs.aws.amazon.com/sdkref/latest/guide/access-users.html&#34;&gt;create a new IAM user and add it to the &lt;code&gt;~/.aws/credentials&lt;/code&gt; file&lt;/a&gt;, or &lt;a href=&#34;https://docs.aws.amazon.com/sdkref/latest/guide/access-iam-roles-for-ec2.html&#34;&gt;configure an EC2 instance with an IAM role&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then run the client, specifying the directory in which your S3 bucket should be mounted (here, &lt;code&gt;~/mnt&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir ~/mnt&#xA;mount-s3 my-s3-bucket-name ~/mnt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The client will run in the background by default, and the &lt;code&gt;~/mnt&lt;/code&gt; directory now gives access to the objects in your S3 bucket.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;For the alpha release, additional configuration is required to use Mountpoint for Amazon S3 in some circumstances:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multiple AWS CLI profiles&lt;/strong&gt;: set the &lt;code&gt;AWS_PROFILE&lt;/code&gt; environment variable to the profile you want to use. Profile selection will be supported via the &lt;code&gt;--profile&lt;/code&gt; command-line argument in the future (&lt;a href=&#34;https://github.com/awslabs/mountpoint-s3/issues/151&#34;&gt;https://github.com/awslabs/mountpoint-s3/issues/151&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;High-bandwidth EC2 instances&lt;/strong&gt;: manually specify the available network bandwidth in Gbps with the &lt;code&gt;--throughput-target-gbps&lt;/code&gt; command-line argument. Defaults to 10 Gbps if not configured. This configuration will be automated in the future (&lt;a href=&#34;https://github.com/awslabs/mountpoint-s3/issues/3&#34;&gt;https://github.com/awslabs/mountpoint-s3/issues/3&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AWS GovCloud, China (Beijing), and China (Ningxia) regions&lt;/strong&gt;: manually specify the S3 endpoint with the &lt;code&gt;--endpoint-url&lt;/code&gt; command-line argument &lt;strong&gt;and&lt;/strong&gt; the region name with the &lt;code&gt;--region&lt;/code&gt; argument. For example, for the AWS GovCloud (US-West) region, specify &lt;code&gt;--endpoint-url https://s3.us-gov-west-1.amazonaws.com --region us-gov-west-1&lt;/code&gt;. See &lt;a href=&#34;https://docs.aws.amazon.com/general/latest/gr/s3.html&#34;&gt;the S3 endpoints documentation&lt;/a&gt; for more details. These regions will be supported via only the &lt;code&gt;--region&lt;/code&gt; command-line argument in the future (&lt;a href=&#34;https://github.com/awslabs/mountpoint-s3/issues/4&#34;&gt;https://github.com/awslabs/mountpoint-s3/issues/4&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Access points&lt;/strong&gt;: use the &lt;a href=&#34;https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-points-alias.html&#34;&gt;bucket-style access point alias&lt;/a&gt; for the access point as the bucket name to mount.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FIPS, dualstack, and transfer acceleration endpoints&lt;/strong&gt;: manually specify the S3 endpoint with the &lt;code&gt;--endpoint-url&lt;/code&gt; command-line argument. See &lt;a href=&#34;https://docs.aws.amazon.com/general/latest/gr/s3.html&#34;&gt;the S3 endpoints documentation&lt;/a&gt; for more details. These endpoints will be configurable in the future (&lt;a href=&#34;https://github.com/awslabs/mountpoint-s3/issues/4&#34;&gt;https://github.com/awslabs/mountpoint-s3/issues/4&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions to Mountpoint for Amazon S3! Please see &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/mountpoint-s3/main/doc/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for more information on how to report bugs or submit pull requests, and &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/mountpoint-s3/main/doc/LOGGING.md&#34;&gt;LOGGING.md&lt;/a&gt; for details on how to capture logging data for bug reports.&lt;/p&gt; &#xA;&lt;h3&gt;Security&lt;/h3&gt; &#xA;&lt;p&gt;If you discover a potential security issue in this project we ask that you notify AWS Security via our &lt;a href=&#34;http://aws.amazon.com/security/vulnerability-reporting/&#34;&gt;vulnerability reporting page&lt;/a&gt;. Please do &lt;strong&gt;not&lt;/strong&gt; create a public GitHub issue.&lt;/p&gt; &#xA;&lt;h3&gt;Code of conduct&lt;/h3&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://aws.github.io/code-of-conduct&#34;&gt;Amazon Open Source Code of Conduct&lt;/a&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/mountpoint-s3/main/doc/CODE_OF_CONDUCT.md&#34;&gt;CODE_OF_CONDUCT.md&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the Apache-2.0 License. It builds on a number of other awesome projects with open source licenses, primarily:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://github.com/cberner/fuser&#34;&gt;fuser&lt;/a&gt; bindings for FUSE (MIT license)&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://docs.aws.amazon.com/sdkref/latest/guide/common-runtime.html&#34;&gt;AWS Common Runtime&lt;/a&gt; for interacting with S3 (Apache-2.0 license)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/mountpoint-s3/main/deny.toml&#34;&gt;deny.toml&lt;/a&gt; for a list of licenses used by our dependencies.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>setzer22/llama-rs</title>
    <updated>2023-03-17T01:43:17Z</updated>
    <id>tag:github.com,2023-03-17:/setzer22/llama-rs</id>
    <link href="https://github.com/setzer22/llama-rs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Run LLaMA inference on CPU, with Rust 🦀🚀🦙&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LLaMA-rs&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Do the LLaMA thing, but now in Rust 🦀🚀🦙&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/setzer22/llama-rs/main/doc/resources/logo2.png&#34; alt=&#34;A llama riding a crab, AI-generated&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;Image by &lt;a href=&#34;https://github.com/darthdeus/&#34;&gt;@darthdeus&lt;/a&gt;, using Stable Diffusion&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ko-fi.com/F1F8DNO5D&#34;&gt;&lt;img src=&#34;https://ko-fi.com/img/githubbutton_sm.svg?sanitize=true&#34; alt=&#34;ko-fi&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crates.io/crates/llama_rs&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/llama-rs.svg?sanitize=true&#34; alt=&#34;Latest version&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;MIT&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/setzer22/llama-rs/main/doc/resources/llama_gif.gif&#34; alt=&#34;Gif showcasing language generation using llama-rs&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;LLaMA-rs&lt;/strong&gt; is a Rust port of the &lt;a href=&#34;https://github.com/ggerganov/llama.cpp&#34;&gt;llama.cpp&lt;/a&gt; project. This allows running inference for Facebook&#39;s &lt;a href=&#34;https://github.com/facebookresearch/llama&#34;&gt;LLaMA&lt;/a&gt; model on a CPU with good performance using full precision, f16 or 4-bit quantized versions of the model.&lt;/p&gt; &#xA;&lt;p&gt;Just like its C++ counterpart, it is powered by the &lt;a href=&#34;https://github.com/ggerganov/ggml&#34;&gt;&lt;code&gt;ggml&lt;/code&gt;&lt;/a&gt; tensor library, achieving the same performance as the original code.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Make sure you have a rust toolchain set up.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Get a copy of the model&#39;s weights[^1]&lt;/li&gt; &#xA; &lt;li&gt;Clone the repository&lt;/li&gt; &#xA; &lt;li&gt;Build (&lt;code&gt;cargo build --release&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Run with &lt;code&gt;cargo run --release -- &amp;lt;ARGS&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;[^1]: The only legal source to get the weights at the time of writing is &lt;a href=&#34;https://github.com/facebookresearch/llama/raw/main/README.md#llama&#34;&gt;this repository&lt;/a&gt;. The choice of words also may or may not hint at the existence of other kinds of sources.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Make sure to build and run in release mode. Debug builds are currently broken.&lt;/p&gt; &#xA;&lt;p&gt;For example, you try the following prompt:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cargo run --release -- -m /data/Llama/LLaMA/7B/ggml-model-q4_0.bin -p &#34;Tell me how cool the Rust programming language is&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Q&amp;amp;A&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Q: Why did you do this?&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; It was not my choice. Ferris appeared to me in my dreams and asked me to rewrite this in the name of the Holy crab.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Q: Seriously now&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; Come on! I don&#39;t want to get into a flame war. You know how it goes, &lt;em&gt;something something&lt;/em&gt; memory &lt;em&gt;something something&lt;/em&gt; cargo is nice, don&#39;t make me say it, everybody knows this already.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Q: I insist.&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; &lt;em&gt;Sheesh! Okaaay&lt;/em&gt;. After seeing the huge potential for &lt;strong&gt;llama.cpp&lt;/strong&gt;, the first thing I did was to see how hard would it be to turn it into a library to embed in my projects. I started digging into the code, and realized the heavy lifting is done by &lt;code&gt;ggml&lt;/code&gt; (a C library, easy to bind to Rust) and the whole project was just around ~2k lines of C++ code (not so easy to bind). After a couple of (failed) attempts to build an HTTP server into the tool, I realized I&#39;d be much more productive if I just ported the code to Rust, where I&#39;m more comfortable.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Q: Is this the real reason?&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; Haha. Of course &lt;em&gt;not&lt;/em&gt;. I just like collecting imaginary internet points, in the form of little stars, that people seem to give to me whenever I embark on pointless quests for &lt;em&gt;rewriting X thing, but in Rust&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Known issues / To-dos&lt;/h2&gt; &#xA;&lt;p&gt;Contributions welcome! Here&#39;s a few pressing issues:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The code only sets the right CFLAGS on Linux. The &lt;code&gt;build.rs&lt;/code&gt; script in &lt;code&gt;ggml_raw&lt;/code&gt; needs to be fixed, so inference &lt;em&gt;will be very slow on every other OS&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The quantization code has not been ported (yet). You can still use the quantized models with llama.cpp.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The code needs to be &#34;library&#34;-fied. It is nice as a showcase binary, but the real potential for this tool is to allow embedding in other services.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; No crates.io release. The name &lt;code&gt;llama-rs&lt;/code&gt; is reserved and I plan to do this soon-ish.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Debug builds are currently broken.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Anything from the original C++ code.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>facebook/buck2</title>
    <updated>2023-03-17T01:43:17Z</updated>
    <id>tag:github.com,2023-03-17:/facebook/buck2</id>
    <link href="https://github.com/facebook/buck2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build system, successor to Buck&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Buck2 &lt;a href=&#34;https://app.circleci.com/pipelines/github/facebookincubator/buck2&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/facebook/buck2.svg?style=svg&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING:&lt;/strong&gt; This project is not yet polished. We are continuing to develop it in the open, but don&#39;t expect it to be suitable for most people until Mar/Apr/May 2023 (at which point we&#39;ll properly announce it). If you try and use it, you will probably have a bad time. If you are willing to work closely with us, please give it a go and &lt;a href=&#34;https://github.com/facebook/buck2/issues&#34;&gt;let us know&lt;/a&gt; what is blocking you.&lt;/p&gt; &#xA;&lt;p&gt;This repo contains the code for the Buck2 build system - the successor to the original &lt;a href=&#34;https://buck.build&#34;&gt;Buck build system&lt;/a&gt;. To understand why it might be interesting, see &lt;a href=&#34;https://raw.githubusercontent.com/facebook/buck2/main/docs/why.md&#34;&gt;this explainer&lt;/a&gt;. For the moment, we only test it on Linux, and don&#39;t recommend running benchmarks as features like the disk cache are not entirely implemented in the open source build.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;h3&gt;Building Buck2&lt;/h3&gt; &#xA;&lt;p&gt;To build Buck2 type &lt;code&gt;cargo build --bin=buck2 --release&lt;/code&gt; from this directory and copy the resulting binary (probably &lt;code&gt;target/release/buck2&lt;/code&gt;) to your &lt;code&gt;$PATH&lt;/code&gt;. Typing &lt;code&gt;buck2 --help&lt;/code&gt; should now work.&lt;/p&gt; &#xA;&lt;p&gt;Build uses prebuilt &lt;code&gt;protoc&lt;/code&gt; binary from &lt;a href=&#34;https://crates.io/crates/protoc-bin-vendored&#34;&gt;protoc-bin-vendored&lt;/a&gt; crate. If these binaries to do not work on your machine (for example, when building for NixOS), path to &lt;code&gt;protoc&lt;/code&gt; binary and protobuf include path can be specified via &lt;code&gt;BUCK2_BUILD_PROTOC&lt;/code&gt; and &lt;code&gt;BUCK2_BUILD_PROTOC_INCLUDE&lt;/code&gt; environment variables.&lt;/p&gt; &#xA;&lt;h3&gt;Building sample targets&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;FIXME(marwhal): This section needs to be made to work&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you &lt;code&gt;cd examples/prelude&lt;/code&gt; and type &lt;code&gt;buck2 build ...&lt;/code&gt; that will build a number of targets in a variety of languages. Doing so requires that &lt;code&gt;python3&lt;/code&gt; and &lt;code&gt;clang&lt;/code&gt; are both on your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Bootstrapping Buck2&lt;/h3&gt; &#xA;&lt;p&gt;To build Buck2 using Buck2:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://github.com/facebookincubator/reindeer&#34;&gt;&lt;code&gt;reindeer&lt;/code&gt;&lt;/a&gt;, which is used to make Buck targets for Rust libraries.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;reindeer --third-party-dir shim/third-party/rust vendor&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;reindeer --third-party-dir shim/third-party/rust buckify --stdout &amp;gt; shim/third-party/rust/BUCK&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;buck2 build :buck2&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that the resulting binary will be compiled without optimisations or &lt;a href=&#34;https://github.com/jemalloc/jemalloc&#34;&gt;jemalloc&lt;/a&gt;, so we recommend using the Cargo-produced binary in further development.&lt;/p&gt; &#xA;&lt;h3&gt;Making your own project&lt;/h3&gt; &#xA;&lt;p&gt;A Buck2 project requires:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;code&gt;.buckconfig&lt;/code&gt; file in the root which has a &lt;code&gt;[repositories]&lt;/code&gt; section listing out interesting cells. We recommend copying from &lt;code&gt;examples/prelude&lt;/code&gt; to ensure it contains the necessary fields.&lt;/li&gt; &#xA; &lt;li&gt;A &lt;code&gt;prelude&lt;/code&gt; directory, which should be produced with &lt;code&gt;git submodule add https://github.com/facebook/buck2-prelude.git prelude&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;A &lt;code&gt;toolchains&lt;/code&gt; directory, which specifies where to find the relevant toolchains. We recommend copying from &lt;code&gt;examples/prelude&lt;/code&gt; to start, but you may wish to use alternative toolchains.&lt;/li&gt; &#xA; &lt;li&gt;Some &lt;code&gt;BUILD&lt;/code&gt; files that specify the targets specific to your project.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Terminology conventions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;em&gt;target&lt;/em&gt;, e.g. &lt;code&gt;fbcode//buck2:buck2&lt;/code&gt;, is something a user defines that is an instance of a &lt;em&gt;rule&lt;/em&gt;, which can be built.&lt;/li&gt; &#xA; &lt;li&gt;A &lt;em&gt;rule&lt;/em&gt;, e.g. &lt;code&gt;cxx_library&lt;/code&gt;, is an implementation of how something is built.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Loading&lt;/em&gt; a &lt;code&gt;TARGETS&lt;/code&gt;/&lt;code&gt;BUCK&lt;/code&gt; file involves evaluating the Starlark and doing attribute coercion/resolution. It can be done with &lt;code&gt;buck2 cquery fbcode//buck2:buck2&lt;/code&gt; or &lt;code&gt;buck2 cquery &#39;deps(fbcode//buck2:buck2)&#39;&lt;/code&gt; to do it recursively.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Analysing&lt;/em&gt; a &lt;em&gt;target&lt;/em&gt; involves running the associated &lt;em&gt;rule&lt;/em&gt; to produce the &lt;em&gt;providers&lt;/em&gt;. It can be done with &lt;code&gt;buck2 audit providers fbcode//buck2:buck2&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Building&lt;/em&gt; a &lt;em&gt;target&lt;/em&gt; involves demanding the &lt;em&gt;artifacts&lt;/em&gt; from a &lt;em&gt;provider&lt;/em&gt; (e.g. &lt;code&gt;DefaultInfo&lt;/code&gt;). It can be done with &lt;code&gt;buck2 build fbcode//buck2:buck2&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Coding conventions&lt;/h2&gt; &#xA;&lt;p&gt;Beyond the obvious (well-tested, easy to read) we prefer guidelines that are automatically enforced, e.g. through &lt;code&gt;rust fmt&lt;/code&gt;, Clippy or the custom linter we have written. Some rules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use the utilities from Gazebo where they are useful, in particular, &lt;code&gt;dupe&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Prefer &lt;code&gt;to_owned&lt;/code&gt; to convert &lt;code&gt;&amp;amp;str&lt;/code&gt; to &lt;code&gt;String&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Qualify &lt;code&gt;anyhow::Result&lt;/code&gt; rather than &lt;code&gt;use anyhow::Result&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Most errors should be returned as &lt;code&gt;anyhow::Result&lt;/code&gt;. Inspecting errors outside tests and the top-level error handler is strongly discouraged.&lt;/li&gt; &#xA; &lt;li&gt;Most errors should be constructed with &lt;code&gt;thiserror&lt;/code&gt; deriving &lt;code&gt;enum&lt;/code&gt; values, not raw &lt;code&gt;anyhow!&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;We use the &lt;code&gt;derivative&lt;/code&gt; library to derive the &lt;code&gt;PartialEq&lt;/code&gt; and &lt;code&gt;Hash&lt;/code&gt; traits when some fields should be ignored.&lt;/li&gt; &#xA; &lt;li&gt;Prefer &lt;code&gt;use crate::foo::bar&lt;/code&gt; over &lt;code&gt;use super::bar&lt;/code&gt; or &lt;code&gt;use crate::foo::*&lt;/code&gt;, apart from test modules which often have &lt;code&gt;use super::*&lt;/code&gt; at the top.&lt;/li&gt; &#xA; &lt;li&gt;Modules should either have submodules or types/functions/constants, but not both.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Error messages&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Names (of variables, targets, files, etc) should be quoted with backticks, e.g. &lt;code&gt;Variable `x` not defined&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Lists should use square brackets, e.g. &lt;code&gt;Available targets: [`aa`, `bb`]&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Error messages should start with an upper case letter. Error messages should not end with a period.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Buck2 is both MIT and Apache License, Version 2.0 licensed, as found in the &lt;a href=&#34;https://raw.githubusercontent.com/facebook/buck2/main/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/facebook/buck2/main/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; files.&lt;/p&gt;</summary>
  </entry>
</feed>