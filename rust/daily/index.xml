<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-24T01:32:56Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>quarylabs/quary</title>
    <updated>2024-02-24T01:32:56Z</updated>
    <id>tag:github.com,2024-02-24:/quarylabs/quary</id>
    <link href="https://github.com/quarylabs/quary" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Transform data together. Model, test and deploy as a team.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://quary.dev&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;img src=&#34;https://storage.googleapis.com/public_hosted_materials/quary.svg?sanitize=true&#34; height=&#34;128&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt;&lt;a href=&#34;https://quary.dev&#34;&gt;quary&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;a href=&#34;https://quary.dev&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a aria-label=&#34;Quary logo&#34; href=&#34;https://www.quary.dev/&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/MADE%20BY%20Quary-000000.svg?style=for-the-badge&amp;amp;logo=Quary&amp;amp;labelColor=000&#34;&gt; &lt;/a&gt; &lt;a aria-label=&#34;License&#34; href=&#34;https://github.com/quarylabs/quary/raw/main/LICENSE&#34;&gt; &lt;img alt=&#34;&#34; src=&#34;https://img.shields.io/npm/l/next.svg?style=for-the-badge&amp;amp;labelColor=000000&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;What is Quary?&lt;/h2&gt; &#xA;&lt;p&gt;Quary enables teams to model, test and deploy data transformations. This core is a fast and lightweight SQL transformation engine written in Rust.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visit &lt;a href=&#34;https://www.quary.dev&#34;&gt;our website&lt;/a&gt; to learn more&lt;/li&gt; &#xA; &lt;li&gt;Visit &lt;a href=&#34;https://www.quary.dev/docs&#34;&gt;our documentation&lt;/a&gt; to learn how to use Quary&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Understanding Quary&lt;/h2&gt; &#xA;&lt;p&gt;Teams use Quary to transform their raw data tables in a data warehouse into actionable trustworthy insights. Users can easily transform their data by writing SQL select statements, which Quary then converts into tables and views within the data warehouse.&lt;/p&gt; &#xA;&lt;p&gt;A Quary project is formed by a collection of these select statements, also known as models. These models often build upon one another, creating a structured flow of data transformation. Quary simplifies the process of visualizing dependencies from the source (raw table) to the final insight. Additionally, it provides testing capabilities for the models at each stage, ensuring data integrity and accuracy.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install quarylabs/quary/quary&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;Check out our template &lt;a href=&#34;https://github.com/quarylabs/template&#34;&gt;here&lt;/a&gt; of an example Quary project. The following commands clone the repo, and run some basic commands.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/quarylabs/template.git&#xA;cd template&#xA;&#xA;quary compile&#xA;quary test -s&#xA;quary run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that you will most likely want to use our &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=Quary.quary-extension&#34;&gt;Visual Studio Code extension&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;quary help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;If you run into any problems using Quary, please let us know. We want Quary to be easy-to-use, so if you are getting confused, it is our fault, not yours. &lt;a href=&#34;https://github.com/quarylabs/quary/issues&#34;&gt;Create an issue&lt;/a&gt; and we&#39;ll be happy to help you out.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>unlimitedbacon/stl-thumb</title>
    <updated>2024-02-24T01:32:56Z</updated>
    <id>tag:github.com,2024-02-24:/unlimitedbacon/stl-thumb</id>
    <link href="https://github.com/unlimitedbacon/stl-thumb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Thumbnail generator for STL files&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;stl-thumb&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/unlimitedbacon/stl-thumb/actions/workflows/build-ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/unlimitedbacon/stl-thumb/workflows/Build/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/unlimitedbacon/stl-thumb/branch/master&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/exol1llladgo3f98/branch/master?svg=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/stl-thumb/latest/stl_thumb/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docsrs/stl-thumb/latest&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/stl-thumb&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/stl-thumb.svg?sanitize=true&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Stl-thumb is a fast lightweight thumbnail generator for STL files. It can show previews for STL files in your file manager on Linux and Windows. It is written in Rust and uses OpenGL.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3131268/116009182-f3f89c80-a5cc-11eb-817d-91e8a9fad279.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Stl-thumb requires 64 bit Windows 7 or later. &lt;a href=&#34;https://github.com/unlimitedbacon/stl-thumb/releases/latest&#34;&gt;Download the installer .exe&lt;/a&gt; for the latest release and run it.&lt;/p&gt; &#xA;&lt;p&gt;The installer will tell the Windows shell to refresh the thumbnail cache, however this does not always seem to work. If your icons do not change then try using the &lt;a href=&#34;https://en.wikipedia.org/wiki/Disk_Cleanup&#34;&gt;Disk Cleanup&lt;/a&gt; utility to clear the thumbnail cache.&lt;/p&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;Stl-thumb works with Gnome and most other similar desktop environements. If you are using the KDE desktop environment then you will also need to install the seperate &lt;a href=&#34;https://github.com/unlimitedbacon/stl-thumb-kde&#34;&gt;&lt;code&gt;stl-thumb-kde&lt;/code&gt;&lt;/a&gt; package.&lt;/p&gt; &#xA;&lt;p&gt;Make sure that your file manager is set to generate previews for files larger than 1 MB. Most file managers have this setting under the Preview tab in their Preferences.&lt;/p&gt; &#xA;&lt;h4&gt;Arch&lt;/h4&gt; &#xA;&lt;p&gt;A package is available &lt;a href=&#34;https://aur.archlinux.org/packages/stl-thumb/&#34;&gt;in the AUR&lt;/a&gt;. Install it manually or using your favorite AUR helper.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ yay -S stl-thumb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Debian / Ubuntu&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/unlimitedbacon/stl-thumb/releases/latest&#34;&gt;Download the .deb package&lt;/a&gt; for your platform (usually amd64) and install it. Packages are also available for armhf (Raspberry Pi) and arm64 (Pine64 and other SBCs).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt install ./stl-thumb_0.4.0_amd64.deb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;openSUSE&lt;/h4&gt; &#xA;&lt;p&gt;For openSUSE Tumblweed there is a user repo available:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo zypper ar -f obs://home:jubalh:stl stl&#xA;$ sudo zypper ref&#xA;$ sudo zypper install stl-thumb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;h3&gt;Building the tool itself:&lt;/h3&gt; &#xA;&lt;p&gt;If you get errors about fontconfig being missing, install the development package&lt;/p&gt; &#xA;&lt;p&gt;You can build the debug version with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cargo build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When your done, build the realease version with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building the .deb-package:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cargo install cargo-deb #this is an additional dependency&#xA;$ cargo deb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building the .rpm-package:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cargo install generate-rpm #this is an additional dependency&#xA;$ cargo generate-rpm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Command Line Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ stl-thumb &amp;lt;STL_FILE&amp;gt; [IMG_FILE]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Options&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;STL_FILE&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;The STL file you want a picture of. Use - to read from stdin instead of a file.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;IMG_FILE&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;The thumbnail image file that will be created. Use - to write to stdout instead of a file.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-s, --size &amp;lt;size&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;Specify width of the image. It will always be a square.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-f, --format &amp;lt;format&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;The format of the image file. If not specified it will be determined from the file extension, or default to PNG if there is no extension. Supported formats: PNG, JPEG, GIF, ICO, BMP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-m, --material &amp;lt;ambient&amp;gt; &amp;lt;diffuse&amp;gt; &amp;lt;specular&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;Colors for rendering the mesh using the Phong reflection model. Requires 3 colors as rgb hex values: ambient, diffuse, and specular. Defaults to blue.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-b, --backround &amp;lt;color&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;The background color with transparency (rgba). Default is ffffff00.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-a, --antialiasing [none, fxaa]&lt;/td&gt; &#xA;   &lt;td&gt;Anti-aliasing method. Default is FXAA, which is fast but may introduce artifacts.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--recalc-normals&lt;/td&gt; &#xA;   &lt;td&gt;Force recalculation of face normals. Use when dealing with malformed STL files.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-x&lt;/td&gt; &#xA;   &lt;td&gt;Display the image in a window instead of saving a file.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-h, --help&lt;/td&gt; &#xA;   &lt;td&gt;Prints help information.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-V, --version&lt;/td&gt; &#xA;   &lt;td&gt;Prints version information.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-v[v][v]&lt;/td&gt; &#xA;   &lt;td&gt;Increase message verbosity. Levels: Errors, Warnings, Info, Debugging&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>golangboy/fast-cloudflare</title>
    <updated>2024-02-24T01:32:56Z</updated>
    <id>tag:github.com,2024-02-24:/golangboy/fast-cloudflare</id>
    <link href="https://github.com/golangboy/fast-cloudflare" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Scan all IP nodes of CloudFlare to find the fastest IP node.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/golangboy/fast-cloudflare/main/README_zh.MD&#34;&gt;中文版&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/golangboy/fast-cloudflare/main/README.MD&#34;&gt;English&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;📖 Introduction&lt;/h1&gt; &#xA;&lt;p&gt;Scan all IP nodes of CloudFlare to find the fastest IP node.&lt;/p&gt; &#xA;&lt;h1&gt;⚡️ Get Started&lt;/h1&gt; &#xA;&lt;h2&gt;🔨️ Build&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/golangboy/fast-cloudflare&#xA;cd fast-cloudflare&#xA;cargo run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Please ensure that you have properly installed the Rust environment.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The scan results will be saved under&lt;code&gt;result\sorted_ping_ip.txt&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🐳 Docker&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -t golangboyme/fast-cloudflare&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/golangboy/fast-cloudflare/main/images/image.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>