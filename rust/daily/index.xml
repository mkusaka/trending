<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-17T01:45:38Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>eclipse-iceoryx/iceoryx2</title>
    <updated>2023-12-17T01:45:38Z</updated>
    <id>tag:github.com,2023-12-17:/eclipse-iceoryx/iceoryx2</id>
    <link href="https://github.com/eclipse-iceoryx/iceoryx2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Eclipse iceoryx2â„¢ - true zero-copy inter-process-communication in pure Rust&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eclipse-iceoryx/iceoryx2/main/benchmarks/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Benchmarks-gray&#34; alt=&#34;Benchmarks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/eclipse-iceoryx/iceoryx2/main/CHANGELOG.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Changelog-gray&#34; alt=&#34;Changelog&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/iceoryx2&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/iceoryx2?color=blue&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/eclipse-iceoryx/iceoryx2/main/examples/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Examples-gray&#34; alt=&#34;Examples&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/eclipse-iceoryx/iceoryx2/main/FAQ.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/FAQ-gray&#34; alt=&#34;FAQ&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/eclipse-iceoryx/iceoryx2/main/ROADMAP.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Roadmap-gray&#34; alt=&#34;Roadmap&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;iceoryx2 - Zero-Copy Lock-Free IPC Purely Written In Rust&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eclipse-iceoryx/iceoryx2/main/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eclipse-iceoryx/iceoryx2/main/#performance&#34;&gt;Performance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eclipse-iceoryx/iceoryx2/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eclipse-iceoryx/iceoryx2/main/#publish-subscribe&#34;&gt;Publish Subscribe&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eclipse-iceoryx/iceoryx2/main/#events&#34;&gt;Events&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eclipse-iceoryx/iceoryx2/main/#custom-configuration&#34;&gt;Custom Configuration&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eclipse-iceoryx/iceoryx2/main/#supported-platforms&#34;&gt;Supported Platforms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eclipse-iceoryx/iceoryx2/main/#language-bindings&#34;&gt;Language Bindings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eclipse-iceoryx/iceoryx2/main/#thanks-to-all-contributors&#34;&gt;Thanks To All Contributors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Welcome to Iceoryx2, the efficient, and ultra-low latency inter-process communication middleware. This library is designed to provide you with fast and reliable zero-copy and lock-free inter-process communication mechanisms.&lt;/p&gt; &#xA;&lt;p&gt;Iceoryx2 is all about providing a seamless experience for inter-process communication, featuring versatile messaging patterns. Whether you&#39;re diving into publish-subscribe, events, or the promise of upcoming features like request-response, pipelines, and blackboard, Iceoryx2 has you covered.&lt;/p&gt; &#xA;&lt;p&gt;One of the features of Iceoryx2 is its consistently low transmission latency regardless of payload size, ensuring a predictable and reliable communication experience.&lt;/p&gt; &#xA;&lt;p&gt;Iceoryx2&#39;s origins can be traced back to &lt;a href=&#34;https://github.com/eclipse-iceoryx/iceoryx&#34;&gt;iceoryx&lt;/a&gt;. By overcoming past technical debts and refining the architecture, Iceoryx2 enables the modularity we&#39;ve always desired.&lt;/p&gt; &#xA;&lt;p&gt;In the near future, Iceoryx2 is poised to support at least the same feature set and platforms as &lt;a href=&#34;https://github.com/eclipse-iceoryx/iceoryx&#34;&gt;iceoryx&lt;/a&gt;, ensuring a seamless transition and offering enhanced capabilities for your inter-process communication needs. So, if you&#39;re looking for lightning-fast, cross-platform communication that doesn&#39;t compromise on performance or modularity, Iceoryx2 is your answer.&lt;/p&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;gantt&#xA;    title Latency (in ns) - 64b payload&#xA;    dateFormat X&#xA;    axisFormat %s&#xA;&#xA;    section iceoryx2&#xA;    240 : 0, 240&#xA;    section iceoryx&#xA;    1000 : 0, 1000&#xA;    section MQueue&#xA;    700 : 0, 700&#xA;    section UDS&#xA;    1500 : 0, 1500&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;gantt&#xA;    title Latency (in ns) - 64kb payload&#xA;    dateFormat X&#xA;    axisFormat %s&#xA;&#xA;    section iceoryx2&#xA;    240 : 0, 240&#xA;    section iceoryx&#xA;    1000 : 0, 1000&#xA;    section MQueue&#xA;    14000 : 0, 14000&#xA;    section UDS&#xA;    23000 : 0, 23000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Benchmark-System&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;CPU:&lt;/strong&gt; Intel(R) Core(TM) i7-10875H CPU @ 2.30GHz&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OS:&lt;/strong&gt; Linux 6.5.9-arch2-1 #1 SMP PREEMPT_DYNAMIC GNU/Linux&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compiler:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;rustc 1.72.1&lt;/li&gt; &#xA;   &lt;li&gt;gcc 13.2.1 20230801&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Publish Subscribe&lt;/h3&gt; &#xA;&lt;p&gt;This minimal example showcases a publisher sending the number 1234 every second, while a subscriber efficiently receives and prints the data.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;publisher.rs&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use core::time::Duration;&#xA;use iceoryx2::prelude::*;&#xA;&#xA;const CYCLE_TIME: Duration = Duration::from_secs(1);&#xA;&#xA;fn main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {&#xA;    let service_name = ServiceName::new(&#34;My/Funk/ServiceName&#34;)?;&#xA;&#xA;    let service = zero_copy::Service::new(&amp;amp;service_name)&#xA;        .publish_subscribe()&#xA;        .open_or_create::&amp;lt;usize&amp;gt;()?;&#xA;&#xA;    let publisher = service.publisher().create()?;&#xA;&#xA;    while let Iox2Event::Tick = Iox2::wait(CYCLE_TIME) {&#xA;        let sample = publisher.loan_uninit()?;&#xA;        let sample = sample.write_payload(1234);&#xA;        publisher.send(sample)?;&#xA;    }&#xA;&#xA;    Ok(())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;subscriber.rs&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use core::time::Duration;&#xA;use iceoryx2::prelude::*;&#xA;&#xA;const CYCLE_TIME: Duration = Duration::from_secs(1);&#xA;&#xA;fn main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {&#xA;    let service_name = ServiceName::new(&#34;My/Funk/ServiceName&#34;)?;&#xA;&#xA;    let service = zero_copy::Service::new(&amp;amp;service_name)&#xA;        .publish_subscribe()&#xA;        .open_or_create::&amp;lt;usize&amp;gt;()?;&#xA;&#xA;    let subscriber = service.subscriber().create()?;&#xA;&#xA;    while let Iox2Event::Tick = Iox2::wait(CYCLE_TIME) {&#xA;        while let Some(sample) = subscriber.receive()? {&#xA;            println!(&#34;received: {:?}&#34;, *sample);&#xA;        }&#xA;    }&#xA;&#xA;    Ok(())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This example is a simplified version of the &lt;a href=&#34;https://raw.githubusercontent.com/eclipse-iceoryx/iceoryx2/main/examples/examples/publish_subscribe/&#34;&gt;publish-subscribe example&lt;/a&gt;. You can execute it by opening two terminals and calling:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Terminal 1:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo run --example publish_subscribe_publisher&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Terminal 2:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo run --example publish_subscribe_subscriber&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Events&lt;/h3&gt; &#xA;&lt;p&gt;This minimal example showcases an event notification between two processes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;notifier.rs&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use core::time::Duration;&#xA;use iceoryx2::prelude::*;&#xA;&#xA;const CYCLE_TIME: Duration = Duration::from_secs(1);&#xA;&#xA;fn main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {&#xA;    let event_name = ServiceName::new(&#34;MyEventName&#34;)?;&#xA;&#xA;    let event = zero_copy::Service::new(&amp;amp;event_name)&#xA;        .event()&#xA;        .open_or_create()?;&#xA;&#xA;    let notifier = event.notifier().create()?;&#xA;&#xA;    let mut counter: u64 = 0;&#xA;    while let Iox2Event::Tick = Iox2::wait(CYCLE_TIME) {&#xA;        counter += 1;&#xA;        notifier.notify_with_custom_event_id(EventId::new(counter))?;&#xA;&#xA;        println!(&#34;Trigger event with id {} ...&#34;, counter);&#xA;    }&#xA;&#xA;    Ok(())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;listener.rs&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use core::time::Duration;&#xA;use iceoryx2::prelude::*;&#xA;&#xA;const CYCLE_TIME: Duration = Duration::from_secs(1);&#xA;&#xA;fn main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {&#xA;    let event_name = ServiceName::new(&#34;MyEventName&#34;)?;&#xA;&#xA;    let event = zero_copy::Service::new(&amp;amp;event_name)&#xA;        .event()&#xA;        .open_or_create()?;&#xA;&#xA;    let mut listener = event.listener().create()?;&#xA;&#xA;    while let Iox2Event::Tick = Iox2::wait(Duration::ZERO) {&#xA;        if let Ok(events) = listener.timed_wait(CYCLE_TIME) {&#xA;            for event_id in events {&#xA;                println!(&#34;event was triggered with id: {:?}&#34;, event_id);&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    Ok(())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This example is a simplified version of the &lt;a href=&#34;https://raw.githubusercontent.com/eclipse-iceoryx/iceoryx2/main/examples/examples/event/&#34;&gt;event example&lt;/a&gt;. You can execute it by opening two terminals and calling:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Terminal 1:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo run --example event_notifier&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Terminal 2:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo run --example event_listener&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Configuration&lt;/h3&gt; &#xA;&lt;p&gt;It is possible to configure default quality of service settings, paths and file suffixes in a custom configuration file. For more details visit the &lt;a href=&#34;https://raw.githubusercontent.com/eclipse-iceoryx/iceoryx2/main/config/&#34;&gt;configuration directory&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;p&gt;The support levels can be adjusted when required.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Operating System&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;State&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Current Support Level&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Target Support Level&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Android&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;planned&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;tier 1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FreeBSD&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;done&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;tier 2&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;tier 1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FreeRTOS&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;planned&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;tier 2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;iOS&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;planned&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;tier 2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux (x86_64)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;done&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;tier 2&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;tier 1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux (aarch64)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;done&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;tier 2&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;tier 1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux (32-bit)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;in-progress&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;tier 3&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;tier 1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mac OS&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;in-progress&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;tier 3&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;tier 2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;QNX&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;planned&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;tier 1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WatchOS&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;planned&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;tier 2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;done&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;tier 2&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;tier 2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;tier 1&lt;/strong&gt; - All safety and security features are working.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;tier 2&lt;/strong&gt; - Works with a restricted security and safety feature set.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;tier 3&lt;/strong&gt; - Work in progress. Might compile and run or not.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Language Bindings&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;State&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C / C++&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;planned&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lua&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;planned&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;planned&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Zig&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;planned&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Thanks To All Contributors&lt;/h2&gt; &#xA;&lt;!-- prettier-ignore-start --&gt; &#xA;&lt;!-- markdownlint-disable --&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt; &lt;a href=&#34;https://github.com/elfenpiff&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/56729169&#34; width=&#34;120px;&#34; alt=&#34;Christian Â»elfenpiffÂ« Eltzschig&#34;&gt;&lt;br&gt; &lt;sub&gt;&lt;b&gt;Christian Â»elfenpiffÂ« Eltzschig&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt; &lt;a href=&#34;https://github.com/elboberido&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/56729607&#34; width=&#34;120px;&#34; alt=&#34;Mathias Â»elBoberidoÂ« Kraus&#34;&gt;&lt;br&gt; &lt;sub&gt;&lt;b&gt;Mathias Â»elBoberidoÂ« Kraus&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- markdownlint-restore --&gt; &#xA;&lt;!-- prettier-ignore-end --&gt;</summary>
  </entry>
</feed>