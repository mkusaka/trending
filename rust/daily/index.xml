<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-18T01:41:06Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>awwsmm/hello-rust-sdl2-wasm</title>
    <updated>2024-01-18T01:41:06Z</updated>
    <id>tag:github.com,2024-01-18:/awwsmm/hello-rust-sdl2-wasm</id>
    <link href="https://github.com/awwsmm/hello-rust-sdl2-wasm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Rust repo which uses SDL2 for user interaction, and which can be run locally or compiled to WASM and run on the web&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;hello-rust-sdl2-wasm&lt;/h1&gt; &#xA;&lt;p&gt;A minimal working &#34;game&#34; written in Rust with SDL2, compiled to WASM.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/awwsmm/hello-rust-sdl2-wasm/master/demo.gif&#34; alt=&#34;a screen recording of the &amp;quot;game&amp;quot;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note: these instructions are written for macOS and Ubuntu. If you&#39;d like to submit instructions for any other OS, please open a PR.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rustup.rs/&#34;&gt;&lt;code&gt;rustup&lt;/code&gt;&lt;/a&gt; must be installed&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git-scm.com/book/en/v2/Getting-Started-Installing-Git&#34;&gt;&lt;code&gt;git&lt;/code&gt;&lt;/a&gt; must be installed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;install &lt;a href=&#34;https://github.com/Rust-SDL2/rust-sdl2?tab=readme-ov-file#requirements&#34;&gt;the SDL2 development libraries&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;On macOS, this is as easy as&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install sdl2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure these libraries are on your &lt;code&gt;LIBRARY_PATH&lt;/code&gt;, as well. If you installed with &lt;code&gt;brew&lt;/code&gt;, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export LIBRARY_PATH=&#34;$LIBRARY_PATH:$(brew --prefix)/lib&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So you don&#39;t have to do this in each new shell you open, maybe also add this to your &lt;code&gt;~/.bashrc&lt;/code&gt; or &lt;code&gt;~/.zshrc&lt;/code&gt; (or other shell startup script).&lt;/p&gt; &#xA;&lt;p&gt;On Ubuntu:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt install libsdl2-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(setting &lt;code&gt;LIBRARY_PATH&lt;/code&gt; is not needed on Ubuntu)&lt;/p&gt; &#xA;&lt;h3&gt;clone this repo and &lt;code&gt;cd&lt;/code&gt; into it&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/awwsmm/hello-rust-sdl2-wasm.git &amp;amp;&amp;amp; cd hello-rust-sdl2-wasm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building locally&lt;/h2&gt; &#xA;&lt;p&gt;To build a desktop (standalone binary executable) app, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cargo run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building for WASM&lt;/h2&gt; &#xA;&lt;p&gt;To build the WASM app instead, there are a few more setup steps.&lt;/p&gt; &#xA;&lt;h3&gt;install the target architecture toolchain&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;rustup target add asmjs-unknown-emscripten&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://emscripten.org/&#34;&gt;emscripten&lt;/a&gt; to convert Rust LLVM bytecode to WASM.&lt;/p&gt; &#xA;&lt;h3&gt;install the &lt;code&gt;emscripten&lt;/code&gt; compiler&lt;/h3&gt; &#xA;&lt;p&gt;On MacOS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install emscripten&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(This will take a few minutes.)&lt;/p&gt; &#xA;&lt;p&gt;On Ubuntu, follow emscripten&#39;s &lt;a href=&#34;https://emscripten.org/docs/getting_started/downloads.html&#34;&gt;recommended installation instructions&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/emscripten-core/emsdk.git &amp;amp;&amp;amp; cd emsdk&#xA;./emsdk install latest&#xA;./emsdk activate latest&#xA;source ./emsdk_env.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;set this one environment variable&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export EMCC_CFLAGS=&#34;-s USE_SDL=2&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;build&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cargo build --target asmjs-unknown-emscripten&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open the browser app with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;open index.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;p&gt;This work is largely based on &lt;a href=&#34;https://puddleofcode.com/story/definitive-guide-to-rust-sdl2-and-emscriptem/&#34;&gt;Micha≈Ç Kalbarczyk&#39;s blog post here&lt;/a&gt;, with some help from &lt;a href=&#34;https://users.rust-lang.org/t/sdl2-emscripten-asmjs-and-invalid-renderer-panic/66567/2&#34;&gt;Greg Buchholz&#39;s message board post here&lt;/a&gt;, which is itself based on &lt;a href=&#34;https://github.com/therocode/rust_emscripten_main_loop&#34;&gt;Tobias Widlund&#39;s work here&lt;/a&gt;. Thanks, all!&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/WebAssembly/Rust_to_Wasm&#34;&gt;Mozilla&#39;s Rust to WASM guide&lt;/a&gt; if you want a simpler Rust-to-WASM example (which doesn&#39;t use SDL2).&lt;/p&gt;</summary>
  </entry>
</feed>