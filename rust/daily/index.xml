<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-14T01:39:20Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>phoxwupsh/turto</title>
    <updated>2023-10-14T01:39:20Z</updated>
    <id>tag:github.com,2023-10-14:/phoxwupsh/turto</id>
    <link href="https://github.com/phoxwupsh/turto" rel="alternate"></link>
    <summary type="html">&lt;p&gt;turto is a simple and easy-to-use Discord music bot that supports customization&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;turto&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/phoxwupsh/turto/raw/main/README.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://github.com/phoxwupsh/turto/raw/main/README.zh-Hant.md&#34;&gt;繁體中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;turto is a simple and easy-to-use Discord music bot that supports customization. Through the following steps, you can have your own turto in minutes.&lt;/p&gt; &#xA;&lt;h2&gt;Deployment&lt;/h2&gt; &#xA;&lt;p&gt;turto depends on FFmpeg and yt-dlp, make sure you have these tools installed, if you haven&#39;t done so, you can follow the following steps to install them. turto also supports Docker, see &lt;a href=&#34;https://github.com/phoxwupsh/turto#if-you-use-docker&#34;&gt;here&lt;/a&gt; if you want to use turto with Docker.&lt;/p&gt; &#xA;&lt;h3&gt;ffmpeg&lt;/h3&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;p&gt;It&#39;s recommanded to install FFmpeg using package manager like &lt;a href=&#34;https://scoop.sh/&#34;&gt;Scoop&lt;/a&gt; (my personal choice), &lt;a href=&#34;https://chocolatey.org/&#34;&gt;Chocolatey&lt;/a&gt; or &lt;a href=&#34;https://www.microsoft.com/p/app-installer/9nblggh4nns1&#34;&gt;winget&lt;/a&gt;. Or you can also download it from &lt;a href=&#34;https://ffmpeg.org/download.html#build-windows&#34;&gt;their official site&lt;/a&gt; and manually add the executable to your system&#39;s PATH environment variable.&lt;/p&gt; &#xA;&lt;h5&gt;Scoop&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;scoop install ffmpeg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Chocolatey&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;choco install ffmpeg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;winget&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;winget install --id=Gyan.FFmpeg -e&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, you can install &lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;Python&lt;/a&gt; and then use &lt;code&gt;pip&lt;/code&gt; to install &lt;code&gt;yt-dlp&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install yt-dlp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Linux&lt;/h4&gt; &#xA;&lt;p&gt;You can install FFmpeg on Linux using package manager. Depends on what distribution you are using, below are commands for some common package managers.&lt;/p&gt; &#xA;&lt;h5&gt;Debian/Ubuntu:&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt-get install ffmpeg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Fedora&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo dnf install ffmpeg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Arch Linux&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo pacman -S ffmpeg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;macOS&lt;/h4&gt; &#xA;&lt;p&gt;You can install FFmpeg on macOS using &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; package manager.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install ffmpeg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;yt-dlp&lt;/h3&gt; &#xA;&lt;p&gt;For installing yt-dlp, you can refer to &lt;a href=&#34;https://github.com/yt-dlp/yt-dlp/wiki/Installation&#34;&gt;this page on their github repository&lt;/a&gt;, they have made instructions for various platforms.&lt;/p&gt; &#xA;&lt;h3&gt;Setup the bot&lt;/h3&gt; &#xA;&lt;p&gt;Since you ensure FFmpeg and yt-dlp are installed, you can download pre-compiled turto binaries from the &lt;a href=&#34;https://github.com/phoxwupsh/turto/releases&#34;&gt;release page&lt;/a&gt;. If the platform that you&#39;re using isn&#39;t provided, you can also compile it yourself.&lt;/p&gt; &#xA;&lt;h4&gt;.env&lt;/h4&gt; &#xA;&lt;p&gt;After you extract the zip file downloaded from the release page, you will see &lt;code&gt;.env&lt;/code&gt; file, open it with text editor then you will see the content is like below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;DISCORD_TOKEN=&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You need to paste you &lt;strong&gt;Token&lt;/strong&gt; right after &lt;code&gt;DISCORD_TOKEN=&lt;/code&gt;, and save the file. If you don&#39;t know what is Token, you can just &lt;a href=&#34;https://www.google.com/search?q=discord+bot+token&#34;&gt;seach &#34;discord bot token&#34;&lt;/a&gt; and there are a lot of tutorials telling how to do. You also need to turn the &lt;strong&gt;MESSAGE CONTENT INTENT&lt;/strong&gt; on, in the same page as you get Token.&lt;/p&gt; &#xA;&lt;h4&gt;config.toml&lt;/h4&gt; &#xA;&lt;p&gt;In the same directory there is also &lt;code&gt;config.toml&lt;/code&gt;, it&#39;s configuration file for the bot. You can edit it with text editor, basically each attributes is just like what the comment said, just make sure you follow the &lt;a href=&#34;https://toml.io/en/v1.0.0&#34;&gt;TOML specification&lt;/a&gt;. The &lt;code&gt;owner&lt;/code&gt; attribute is optional, the bot can still work if you don&#39;t set it.&lt;/p&gt; &#xA;&lt;h3&gt;Launch the bot&lt;/h3&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;p&gt;On Windows you can simply double click the &lt;code&gt;turto.exe&lt;/code&gt; file then the bot will start working, or you can also use Command Prompt or PowerShell.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;.\turto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Linux/macOS&lt;/h4&gt; &#xA;&lt;p&gt;Make sure the exetuable have execute permission, if not, it can be done by&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;chmod +x turto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And you can start the bot by&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./turto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Invite the bot to your guild&lt;/h3&gt; &#xA;&lt;p&gt;You can get your application ID in &lt;a href=&#34;https://discord.com/developers/applications&#34;&gt;Discord Developer Portal&lt;/a&gt; → Applications → &lt;em&gt;Your bot&#39;s application&lt;/em&gt; → General Information, and replace &lt;code&gt;{your application id}&lt;/code&gt; in the URL below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://discord.com/api/oauth2/authorize?client_id={your application id}&amp;amp;permissions=36727808&amp;amp;scope=bot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, you can generate the URL in Discord Developer Portal → Applications → &lt;em&gt;Your bot&#39;s application&lt;/em&gt; → OAuth2 → URL Generator. Make sure to select these following options.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Scopes&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;bot&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bot permissions&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Read Messages/View Channels&lt;/li&gt; &#xA; &lt;li&gt;Send Messages&lt;/li&gt; &#xA; &lt;li&gt;Manage Messages&lt;/li&gt; &#xA; &lt;li&gt;Embed Links&lt;/li&gt; &#xA; &lt;li&gt;Connect&lt;/li&gt; &#xA; &lt;li&gt;Speak&lt;/li&gt; &#xA; &lt;li&gt;Use Voice Activity&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Customize&lt;/h3&gt; &#xA;&lt;p&gt;In the directory where the bot executable is, there are two files &lt;code&gt;help.toml&lt;/code&gt; and &lt;code&gt;template.toml&lt;/code&gt;, you can customize almost every message that the bot will send in these two files, by just simply edit the file with text edtior. For more detail, you can refer to comments in the file.&lt;/p&gt; &#xA;&lt;p&gt;Basically there&#39;s no need to edit these file, since I have written presets for you.&lt;/p&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;Basically you can get instructions of each command using the &lt;code&gt;help&lt;/code&gt; command, there are also some example included. Make sure to add the prefix (&lt;code&gt;command_prefix&lt;/code&gt;) you set in &lt;code&gt;config.toml&lt;/code&gt; before using commands.&lt;/p&gt; &#xA;&lt;h3&gt;Shutdown&lt;/h3&gt; &#xA;&lt;p&gt;If you want to stop the bot, you should press &lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;C&lt;/code&gt;, this make the bot save data of each guilds (playlist and settings) then shutdown. If you close the terminal window directly, the bot would not save the data.&lt;/p&gt; &#xA;&lt;h3&gt;If you use Docker&lt;/h3&gt; &#xA;&lt;p&gt;Run this command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -e DISCORD_TOKEN={you bot token} ghcr.io/phoxwupsh/turto:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You need to replace &lt;code&gt;{you bot token}&lt;/code&gt; with you bot token, that&#39;s it.&lt;/p&gt; &#xA;&lt;h2&gt;Compile&lt;/h2&gt; &#xA;&lt;p&gt;To compile turto, you will need Rust toolchain and CMake.&lt;/p&gt; &#xA;&lt;h3&gt;Rust toolchain&lt;/h3&gt; &#xA;&lt;p&gt;To install Rust toolchain, you can visit &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;here&lt;/a&gt;, and follow the instruction.&lt;/p&gt; &#xA;&lt;p&gt;After you finish the installation, make sure your Rust version is higher than &lt;code&gt;1.70.0&lt;/code&gt;, you can check your Rust version by&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;rustc -V&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CMake&lt;/h3&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;p&gt;If you are using Scoop, Chocolatey or winget, you can install it with them. Or, you can also download the installer &lt;a href=&#34;https://cmake.org/download/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;Scoop&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;scoop install cmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Chocolatey&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;choco install cmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;winget&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;winget install --id=Kitware.CMake -e&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Linux&lt;/h4&gt; &#xA;&lt;p&gt;You can install CMake on Linux using package manager. Depends on what distribution you are using, below are commands for some common package managers. Or, you can also download the installer &lt;a href=&#34;https://cmake.org/download/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;Debian/Ubuntu:&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt-get install cmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Fedora&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo dnf install cmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Arch Linux&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo pacman -S cmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;macOS&lt;/h4&gt; &#xA;&lt;p&gt;You can install FFmpeg on macOS using Homebrew package manager. Or, you can also download the installer &lt;a href=&#34;https://cmake.org/download/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install cmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Get source code&lt;/h4&gt; &#xA;&lt;p&gt;Since you ensure Rust toolchain and CMake are installed, you need to to clone this repository with Git. Or, you can directly download from github thorugh the release page or the Download ZIP.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/phoxwupsh/turto.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Start compiling&lt;/h3&gt; &#xA;&lt;p&gt;Then you can head to the directory where &lt;code&gt;Cargo.toml&lt;/code&gt; is&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd turto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And start compiling&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After it compile successfully, you can see turto executable in directory &lt;code&gt;target&lt;/code&gt; → &lt;code&gt;release&lt;/code&gt;. If you compile turto yourself, you will need &lt;code&gt;.env&lt;/code&gt;, &lt;code&gt;config.toml&lt;/code&gt;, &lt;code&gt;help.toml&lt;/code&gt; and &lt;code&gt;templates.toml&lt;/code&gt; in the same directory with the executable, you can find presets in this repository, with file name end with &lt;code&gt;.template&lt;/code&gt;, you can simply rename them and start using.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>HKalbasi/zngur</title>
    <updated>2023-10-14T01:39:20Z</updated>
    <id>tag:github.com,2023-10-14:/HKalbasi/zngur</id>
    <link href="https://github.com/HKalbasi/zngur" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A C++/Rust interop tool&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Zngur&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hkalbasi/zngur&#34;&gt;&lt;img alt=&#34;github&#34; src=&#34;https://img.shields.io/badge/github-hkalbasi/zngur-8da0cb?style=for-the-badge&amp;amp;labelColor=555555&amp;amp;logo=github&#34; height=&#34;20&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/zngur&#34;&gt;&lt;img alt=&#34;crates.io&#34; src=&#34;https://img.shields.io/crates/v/zngur.svg?style=for-the-badge&amp;amp;color=fc8d62&amp;amp;logo=rust&#34; height=&#34;20&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/zngur&#34;&gt;&lt;img alt=&#34;docs.rs&#34; src=&#34;https://img.shields.io/badge/docs.rs-zngur-66c2a5?style=for-the-badge&amp;amp;labelColor=555555&amp;amp;logo=docs.rs&#34; height=&#34;20&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/hkalbasi/zngur/actions?query=branch%3Amain&#34;&gt;&lt;img alt=&#34;build status&#34; src=&#34;https://img.shields.io/github/actions/workflow/status/hkalbasi/zngur/ci.yml?branch=main&amp;amp;style=for-the-badge&#34; height=&#34;20&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Zngur (/zængɑr/) is a C++/Rust interop tool. It tries to expose arbitrary Rust types, methods and functions, while preserving its semantics and ergonomics as much as possible. Using Zngur, you can use arbitrary Rust crate in your C++ code as easily as using it in normal Rust code, and you can write idiomatic Rusty API for your C++ library inside C++. See &lt;a href=&#34;https://hkalbasi.github.io/zngur/&#34;&gt;the documentation&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &amp;lt;iostream&amp;gt;&#xA;#include &amp;lt;vector&amp;gt;&#xA;&#xA;#include &#34;./generated.h&#34;&#xA;&#xA;// Rust values are available in the `::rust` namespace from their absolute path&#xA;// in Rust&#xA;template &amp;lt;typename T&amp;gt; using Vec = rust::std::vec::Vec&amp;lt;T&amp;gt;;&#xA;template &amp;lt;typename T&amp;gt; using Option = rust::std::option::Option&amp;lt;T&amp;gt;;&#xA;template &amp;lt;typename T&amp;gt; using BoxDyn = rust::Box&amp;lt;rust::Dyn&amp;lt;T&amp;gt;&amp;gt;;&#xA;&#xA;// You can implement Rust traits for your classes&#xA;template &amp;lt;typename T&amp;gt;&#xA;class VectorIterator : public rust::std::iter::Iterator&amp;lt;T&amp;gt; {&#xA;  std::vector&amp;lt;T&amp;gt; vec;&#xA;  size_t pos;&#xA;&#xA;public:&#xA;  VectorIterator(std::vector&amp;lt;T&amp;gt; &amp;amp;&amp;amp;v) : vec(v), pos(0) {}&#xA;  ~VectorIterator() {&#xA;    std::cout &amp;lt;&amp;lt; &#34;vector iterator has been destructed&#34; &amp;lt;&amp;lt; std::endl;&#xA;  }&#xA;&#xA;  Option&amp;lt;T&amp;gt; next() override {&#xA;    if (pos &amp;gt;= vec.size()) {&#xA;      return Option&amp;lt;T&amp;gt;::None();&#xA;    }&#xA;    T value = vec[pos++];&#xA;    // You can construct Rust enum with fields in C++&#xA;    return Option&amp;lt;T&amp;gt;::Some(value);&#xA;  }&#xA;};&#xA;&#xA;int main() {&#xA;  // You can call Rust functions that return things by value, and store that&#xA;  // value in your stack.&#xA;  auto s = Vec&amp;lt;int32_t&amp;gt;::new_();&#xA;  s.push(2);&#xA;  Vec&amp;lt;int32_t&amp;gt;::push(s, 5);&#xA;  s.push(7);&#xA;  Vec&amp;lt;int32_t&amp;gt;::push(s, 3);&#xA;  // You can call Rust functions just like normal Rust.&#xA;  std::cout &amp;lt;&amp;lt; s.clone().into_iter().sum() &amp;lt;&amp;lt; std::endl;&#xA;  // You can catch Rust panics as C++ exceptions&#xA;  try {&#xA;    std::cout &amp;lt;&amp;lt; &#34;s[2] = &#34; &amp;lt;&amp;lt; *s.get(2).unwrap() &amp;lt;&amp;lt; std::endl;&#xA;    std::cout &amp;lt;&amp;lt; &#34;s[4] = &#34; &amp;lt;&amp;lt; *s.get(4).unwrap() &amp;lt;&amp;lt; std::endl;&#xA;  } catch (rust::Panic e) {&#xA;    std::cout &amp;lt;&amp;lt; &#34;Rust panic happened&#34; &amp;lt;&amp;lt; std::endl;&#xA;  }&#xA;  int state = 0;&#xA;  // You can convert a C++ lambda into a `Box&amp;lt;dyn Fn&amp;gt;` and friends.&#xA;  auto f = BoxDyn&amp;lt;rust::Fn&amp;lt;int32_t, int32_t&amp;gt;&amp;gt;::make_box([&amp;amp;](int32_t x) {&#xA;    state += x;&#xA;    std::cout &amp;lt;&amp;lt; &#34;hello &#34; &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &#34; &#34; &amp;lt;&amp;lt; state &amp;lt;&amp;lt; &#34;\n&#34;;&#xA;    return x * 2;&#xA;  });&#xA;  // And pass it to Rust functions that accept closures.&#xA;  auto x = s.into_iter().map(std::move(f)).sum();&#xA;  std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &#34; &#34; &amp;lt;&amp;lt; state &amp;lt;&amp;lt; &#34;\n&#34;;&#xA;  std::vector&amp;lt;int32_t&amp;gt; vec{10, 20, 60};&#xA;  // You can convert a C++ type that implements `Trait` to a `Box&amp;lt;dyn Trait&amp;gt;`.&#xA;  // `make_box` is similar to the `make_unique`, it takes constructor arguments&#xA;  // and construct it inside the `Box` (instead of `unique_ptr`).&#xA;  auto vec_as_iter = BoxDyn&amp;lt;rust::std::iter::Iterator&amp;lt;int32_t&amp;gt;&amp;gt;::make_box&amp;lt;&#xA;      VectorIterator&amp;lt;int32_t&amp;gt;&amp;gt;(std::move(vec));&#xA;  // Then use it like a normal Rust value.&#xA;  auto t = vec_as_iter.collect();&#xA;  // Some utilities are also provided. For example, `zngur_dbg` is the&#xA;  // equivalent of `dbg!` macro.&#xA;  zngur_dbg(t);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;17&#xA;s[2] = 7&#xA;thread &#39;&amp;lt;unnamed&amp;gt;&#39; panicked at &#39;called `Option::unwrap()` on a `None` value&#39;, examples/simple/src/generated.rs:186:39&#xA;note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace&#xA;s[4] = Rust panic happened&#xA;hello 2 2&#xA;hello 5 7&#xA;hello 7 14&#xA;hello 3 17&#xA;34 17&#xA;vector iterator has been destructed&#xA;[main.cpp:71] t = [&#xA;    10,&#xA;    20,&#xA;    60,&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/HKalbasi/zngur/raw/main/examples/simple&#34;&gt;&lt;code&gt;examples/simple&lt;/code&gt;&lt;/a&gt; if you want to build and run it.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h4&gt;License&lt;/h4&gt; &#xA;&lt;sup&gt; Licensed under either of &lt;a href=&#34;https://raw.githubusercontent.com/HKalbasi/zngur/main/LICENSE-APACHE&#34;&gt;Apache License, Version 2.0&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/HKalbasi/zngur/main/LICENSE-MIT&#34;&gt;MIT license&lt;/a&gt; at your option. &lt;/sup&gt; &#xA;&lt;br&gt; &#xA;&lt;sub&gt; Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in this project by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. &lt;/sub&gt;</summary>
  </entry>
</feed>