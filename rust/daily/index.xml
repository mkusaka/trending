<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-11-26T01:37:02Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>trumank/repak</title>
    <updated>2024-11-26T01:37:02Z</updated>
    <id>tag:github.com,2024-11-26:/trumank/repak</id>
    <link href="https://github.com/trumank/repak" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Unreal Engine .pak file library and CLI in rust&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;repak&lt;/h1&gt; &#xA;&lt;p&gt;Library and CLI tool for working with Unreal Engine .pak files.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports reading and writing a wide range of versions&lt;/li&gt; &#xA; &lt;li&gt;Easy to use API while providing low level control: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Only parses index initially and reads file data upon request&lt;/li&gt; &#xA;   &lt;li&gt;Can rewrite index in place to perform append or delete operations without rewriting entire pak&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;repak&lt;/code&gt; CLI&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sane handling of mount points: defaults to &lt;code&gt;../../../&lt;/code&gt; but can be configured via flag&lt;/li&gt; &#xA; &lt;li&gt;2x faster unpacking over &lt;code&gt;UnrealPak&lt;/code&gt;. As much as 30x faster has been observed (on Linux unpacked to ramdisk)&lt;/li&gt; &#xA; &lt;li&gt;Unpacking is guarded against malicious pak that attempt to write to parent directories&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;cli&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ repak --help&#xA;Usage: repak [OPTIONS] &amp;lt;COMMAND&amp;gt;&#xA;&#xA;Commands:&#xA;  info       Print .pak info&#xA;  list       List .pak files&#xA;  hash-list  List .pak files and the SHA256 of their contents. Useful for finding differences between paks&#xA;  unpack     Unpack .pak file&#xA;  pack       Pack directory into .pak file&#xA;  get        Reads a single file to stdout&#xA;  help       Print this message or the help of the given subcommand(s)&#xA;&#xA;Options:&#xA;  -a, --aes-key &amp;lt;AES_KEY&amp;gt;  256 bit AES encryption key as base64 or hex string if the pak is encrypted&#xA;  -h, --help               Print help&#xA;  -V, --version            Print version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;packing&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ find mod&#xA;mod&#xA;mod/assets&#xA;mod/assets/AssetA.uasset&#xA;mod/assets/AssetA.uexp&#xA;&#xA;$ repak pack -v mod&#xA;packing assets/AssetA.uasset&#xA;packing assets/AssetA.uexp&#xA;Packed 4 files to mod.pak&#xA;&#xA;$ repak list mod.pak&#xA;assets/AssetA.uasset&#xA;assets/AssetA.uexp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;unpacking&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ repak --aes-key 0x12345678 unpack MyEncryptedGame.pak&#xA;Unpacked 12345 files to MyEncryptedGame from MyEncryptedGame.pak&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;compatibility&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;UE Version&lt;/th&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;Version Feature&lt;/th&gt; &#xA;   &lt;th&gt;Read&lt;/th&gt; &#xA;   &lt;th&gt;Write&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;Initial&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4.0-4.2&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;NoTimestamps&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4.3-4.15&lt;/td&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;CompressionEncryption&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4.16-4.19&lt;/td&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;IndexEncryption&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4.20&lt;/td&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;RelativeChunkOffsets&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;DeleteRecords&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4.21&lt;/td&gt; &#xA;   &lt;td&gt;7&lt;/td&gt; &#xA;   &lt;td&gt;EncryptionKeyGuid&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4.22&lt;/td&gt; &#xA;   &lt;td&gt;8A&lt;/td&gt; &#xA;   &lt;td&gt;FNameBasedCompression&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4.23-4.24&lt;/td&gt; &#xA;   &lt;td&gt;8B&lt;/td&gt; &#xA;   &lt;td&gt;FNameBasedCompression&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4.25&lt;/td&gt; &#xA;   &lt;td&gt;9&lt;/td&gt; &#xA;   &lt;td&gt;FrozenIndex&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;[^1]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;PathHashIndex&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4.26-5.3[^2]&lt;/td&gt; &#xA;   &lt;td&gt;11&lt;/td&gt; &#xA;   &lt;td&gt;Fnv64BugFix&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;Read&lt;/th&gt; &#xA;   &lt;th&gt;Write&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Compression&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;〰&lt;/span&gt;[^3]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Encrypted Index&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Encrypted Data&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;[^1]: Except for paks compressed using frozen index which has significant complexity and only existed for UE 4.25 anyway. [^2]: As of writing. Later versions are likely supported but untested. [^3]: Zlib, Gzip, and Zstd are supported. Not all compression algorithms are available in all games.&lt;/p&gt; &#xA;&lt;p&gt;Supports reading encrypted (both index and/or data) and compressed paks. Writing does not support compression or encryption yet.&lt;/p&gt; &#xA;&lt;h2&gt;notes&lt;/h2&gt; &#xA;&lt;h3&gt;determinism&lt;/h3&gt; &#xA;&lt;p&gt;As far as I can tell, the index is not necessarily written deterministically by &lt;code&gt;UnrealPak&lt;/code&gt;. &lt;code&gt;repak&lt;/code&gt; uses &lt;code&gt;BTreeMap&lt;/code&gt; in place of &lt;code&gt;HashMap&lt;/code&gt; to deterministically write the index and &lt;em&gt;happens&lt;/em&gt; to rewrite the test paks in the same order, but this more likely than not stops happening on larger pak files.&lt;/p&gt; &#xA;&lt;h3&gt;full directory index&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;UnrealPak&lt;/code&gt; includes a directory entry in the full directory index for all parent directories back to the pak root for a given file path regardless of whether those directories contain any files or just other directories. &lt;code&gt;repak&lt;/code&gt; only includes directories that contain files. So far no functional differences have been observed as a result.&lt;/p&gt; &#xA;&lt;h2&gt;acknowledgements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bananaturtlesandwich/unpak&#34;&gt;unpak&lt;/a&gt;: original crate featuring read-only pak operations&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/panzi/rust-u4pak&#34;&gt;rust-u4pak&lt;/a&gt;&#39;s README detailing the pak file layout&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jieyouxu&#34;&gt;jieyouxu&lt;/a&gt; for serialization implementation of the significantly more complex V11 index&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>