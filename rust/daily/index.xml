<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-20T01:38:07Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>zhu327/workers-tunnel</title>
    <updated>2023-08-20T01:38:07Z</updated>
    <id>tag:github.com,2023-08-20:/zhu327/workers-tunnel</id>
    <link href="https://github.com/zhu327/workers-tunnel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Edge network tunnel implemented using Cloudflare Workers.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;workers-tunnel&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://deploy.workers.cloudflare.com/?url=https://github.com/zhu327/workers-tunnel/tree/main&#34;&gt;&lt;img src=&#34;https://deploy.workers.cloudflare.com/button&#34; alt=&#34;Deploy to Cloudflare Workers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Edge network tunnel implemented using Cloudflare Workers.&lt;/p&gt; &#xA;&lt;p&gt;It is recommended to use Xray as the tunnel client.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/XTLS/Xray-core&#34;&gt;https://github.com/XTLS/Xray-core&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use the following rules to split traffic by file and route Cloudflare IP directly.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Loyalsoldier/v2ray-rules-dat&#34;&gt;https://github.com/Loyalsoldier/v2ray-rules-dat&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Due to the limitations of Cloudflare Workers, UDP proxy is not supported, and it is not possible to use proxy to connect to Cloudflare&#39;s IP addresses. It is recommended to use the following routing configuration to establish a direct connection to Cloudflare&#39;s IP addresses.&lt;/p&gt; &#xA;&lt;p&gt;Replace the domain &lt;code&gt;your.domain.workers.dev&lt;/code&gt; in the following configuration with your Cloudflare Workers domain.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;log&#34;: {&#xA;    &#34;loglevel&#34;: &#34;warning&#34;&#xA;  },&#xA;  &#34;inbounds&#34;: [&#xA;    {&#xA;      &#34;port&#34;: 1080,&#xA;      &#34;protocol&#34;: &#34;socks&#34;,&#xA;      &#34;sniffing&#34;: {&#xA;        &#34;enabled&#34;: true,&#xA;        &#34;destOverride&#34;: [&#xA;          &#34;http&#34;,&#xA;          &#34;tls&#34;&#xA;        ]&#xA;      },&#xA;      &#34;settings&#34;: {&#xA;        &#34;auth&#34;: &#34;noauth&#34;&#xA;      }&#xA;    }&#xA;  ],&#xA;  &#34;outbounds&#34;: [&#xA;    {&#xA;      &#34;settings&#34;: {&#xA;        &#34;vnext&#34;: [&#xA;          {&#xA;            &#34;port&#34;: 443,&#xA;            &#34;users&#34;: [&#xA;              {&#xA;                &#34;id&#34;: &#34;c55ba35f-12f6-436e-a451-4ce982c4ec1c&#34;,&#xA;                &#34;level&#34;: 0,&#xA;                &#34;flow&#34;: &#34;&#34;,&#xA;                &#34;encryption&#34;: &#34;none&#34;&#xA;              }&#xA;            ],&#xA;            &#34;address&#34;: &#34;your.domain.workers.dev&#34;&#xA;          }&#xA;        ]&#xA;      },&#xA;      &#34;protocol&#34;: &#34;vless&#34;,&#xA;      &#34;streamSettings&#34;: {&#xA;        &#34;network&#34;: &#34;ws&#34;,&#xA;        &#34;tlsSettings&#34;: {&#xA;          &#34;serverName&#34;: &#34;your.domain.workers.dev&#34;,&#xA;          &#34;allowInsecure&#34;: true,&#xA;          &#34;fingerprint&#34;: &#34;chrome&#34;&#xA;        },&#xA;        &#34;wsSettings&#34;: {&#xA;          &#34;headers&#34;: {&#xA;            &#34;Host&#34;: &#34;your.domain.workers.dev&#34;&#xA;          },&#xA;          &#34;path&#34;: &#34;ws?ed=512&#34;&#xA;        },&#xA;        &#34;security&#34;: &#34;tls&#34;&#xA;      }&#xA;    },&#xA;    {&#xA;      &#34;protocol&#34;: &#34;freedom&#34;,&#xA;      &#34;settings&#34;: {},&#xA;      &#34;tag&#34;: &#34;direct&#34;&#xA;    }&#xA;  ],&#xA;  &#34;routing&#34;: {&#xA;    &#34;domainStrategy&#34;: &#34;IPIfNonMatch&#34;,&#xA;    &#34;rules&#34;: [&#xA;      {&#xA;        &#34;type&#34;: &#34;field&#34;,&#xA;        &#34;outboundTag&#34;: &#34;direct&#34;,&#xA;        &#34;domain&#34;: [&#xA;          &#34;geosite:cn&#34;&#xA;        ]&#xA;      },&#xA;      {&#xA;        &#34;type&#34;: &#34;field&#34;,&#xA;        &#34;outboundTag&#34;: &#34;direct&#34;,&#xA;        &#34;ip&#34;: [&#xA;          &#34;geoip:cn&#34;,&#xA;          &#34;geoip:private&#34;,&#xA;          &#34;geoip:cloudflare&#34;&#xA;        ]&#xA;      }&#xA;    ]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please refer to the following documentation for development and deployment.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developers.cloudflare.com/workers/runtime-apis/webassembly/rust/&#34;&gt;https://developers.cloudflare.com/workers/runtime-apis/webassembly/rust/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: Before deployment, you need to modify the &lt;code&gt;vars&lt;/code&gt; configuration in &lt;code&gt;wrangler.toml&lt;/code&gt; and change &lt;code&gt;USER_ID&lt;/code&gt; to your UUID.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[vars]&#xA;USER_ID = &#34;c55ba35f-12f6-436e-a451-4ce982c4ec1c&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;To create a &lt;code&gt;my-project&lt;/code&gt; directory using this template, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm init cloudflare my-project workers-tunnel&#xA;# or&#xA;$ yarn create cloudflare my-project workers-tunnel&#xA;# or&#xA;$ pnpm create cloudflare my-project workers-tunnel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Each command invokes &lt;a href=&#34;https://www.npmjs.com/package/create-cloudflare&#34;&gt;&lt;code&gt;create-cloudflare&lt;/code&gt;&lt;/a&gt; for project creation.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;This template starts you off with a &lt;code&gt;src/lib.rs&lt;/code&gt; file, acting as an entrypoint for requests hitting your Worker. Feel free to add more code in this file, or create Rust modules anywhere else for this project to use.&lt;/p&gt; &#xA;&lt;p&gt;With &lt;code&gt;wrangler&lt;/code&gt;, you can build, test, and deploy your Worker with the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# run your Worker in an ideal development workflow (with a local server, file watcher &amp;amp; more)&#xA;$ npm run dev&#xA;&#xA;# deploy your Worker globally to the Cloudflare network (update your wrangler.toml file for configuration)&#xA;$ npm run deploy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read the latest &lt;code&gt;worker&lt;/code&gt; crate documentation here: &lt;a href=&#34;https://docs.rs/worker&#34;&gt;https://docs.rs/worker&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;WebAssembly&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;workers-rs&lt;/code&gt; (the Rust SDK for Cloudflare Workers used in this template) is meant to be executed as compiled WebAssembly, and as such so &lt;strong&gt;must&lt;/strong&gt; all the code you write and depend upon. All crates and modules used in Rust-based Workers projects have to compile to the &lt;code&gt;wasm32-unknown-unknown&lt;/code&gt; triple.&lt;/p&gt; &#xA;&lt;p&gt;Read more about this on the &lt;a href=&#34;https://github.com/cloudflare/workers-rs&#34;&gt;&lt;code&gt;workers-rs&lt;/code&gt;&lt;/a&gt; project README.&lt;/p&gt; &#xA;&lt;h2&gt;Issues&lt;/h2&gt; &#xA;&lt;p&gt;If you have any problems with the &lt;code&gt;worker&lt;/code&gt; crate, please open an issue on the upstream project issue tracker on the &lt;a href=&#34;https://github.com/cloudflare/workers-rs&#34;&gt;&lt;code&gt;workers-rs&lt;/code&gt; repository&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>prefix-dev/pixi</title>
    <updated>2023-08-20T01:38:07Z</updated>
    <id>tag:github.com,2023-08-20:/prefix-dev/pixi</id>
    <link href="https://github.com/prefix-dev/pixi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Package management made easy&lt;/p&gt;&lt;hr&gt;&lt;h1&gt; &lt;a href=&#34;https://github.com/prefix-dev/pixi/&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source srcset=&#34;https://github.com/prefix-dev/pixi/assets/4995967/a3f9ff01-c9fb-4893-83c0-2a3f924df63e&#34; type=&#34;image/webp&#34;&gt; &#xA;   &lt;source srcset=&#34;https://github.com/prefix-dev/pixi/assets/4995967/e42739c4-4cd9-49bb-9d0a-45f8088494b5&#34; type=&#34;image/png&#34;&gt; &#xA;   &lt;img src=&#34;https://github.com/prefix-dev/pixi/assets/4995967/e42739c4-4cd9-49bb-9d0a-45f8088494b5&#34; alt=&#34;banner&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt; &lt;/h1&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/license-BSD--3--Clause-blue?style=flat-square&#34; alt=&#34;License&#34;&gt; &lt;a href=&#34;https://github.com/prefix-dev/pixi/actions/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/prefix-dev/pixi/rust.yml?style=flat-square&amp;amp;branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/kKV8ZxyzY4&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1082332781146800168.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2&amp;amp;style=flat-square&#34; alt=&#34;Project Chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/h1&gt; &#xA;&lt;h1&gt;pixi: Package management made easy&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;pixi&lt;/code&gt; is a cross-platform, multi-language package manager and workflow tool build on the shoulders of the conda ecosystem.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pixi&lt;/code&gt; provides all developers the exceptional experience that is usually found with package managers like &lt;code&gt;cargo&lt;/code&gt; or &lt;code&gt;yarn&lt;/code&gt; but for any language.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/prefix-dev/pixi/assets/885054/64666dee-841d-4680-9a61-7927913bc4e2&#34;&gt;https://github.com/prefix-dev/pixi/assets/885054/64666dee-841d-4680-9a61-7927913bc4e2&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Highlights&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for &lt;strong&gt;multiple languages&lt;/strong&gt; like Python, C++ and R using Conda packages&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;All OS&#39;s&lt;/strong&gt;: Linux, Windows, macOS (including Apple Silicon)&lt;/li&gt; &#xA; &lt;li&gt;A &lt;strong&gt;lockfile&lt;/strong&gt; is always included and always up-to-date.&lt;/li&gt; &#xA; &lt;li&gt;A clean and simple Cargo-like &lt;strong&gt;command-line interface&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Install tools &lt;strong&gt;per-project&lt;/strong&gt; or &lt;strong&gt;system-wide&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Completely written in &lt;strong&gt;Rust&lt;/strong&gt; and build on top of the &lt;strong&gt;&lt;a href=&#34;https://github.com/mamba-org/rattler&#34;&gt;rattler&lt;/a&gt;&lt;/strong&gt; library.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;⚡ &lt;a href=&#34;https://raw.githubusercontent.com/prefix-dev/pixi/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;⚙️ &lt;a href=&#34;https://raw.githubusercontent.com/prefix-dev/pixi/main/examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📚 &lt;a href=&#34;https://prefix.dev/docs/pixi/overview&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;😍 &lt;a href=&#34;https://raw.githubusercontent.com/prefix-dev/pixi/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🔨 &lt;a href=&#34;https://raw.githubusercontent.com/prefix-dev/pixi/main/#pixibuilt&#34;&gt;Built using Pixi&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Status&lt;/h1&gt; &#xA;&lt;p&gt;This project is currently in &lt;em&gt;alpha stage&lt;/em&gt;. There are many features that we want to add. The file formats are still in flux. Expect breaking changes while we work towards a v1.0.&lt;/p&gt; &#xA;&lt;p&gt;Some notable features that we have in the pipeline are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Build and publish&lt;/strong&gt; your project as a Conda package.&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;strong&gt;PyPi packages&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Support &lt;strong&gt;dependencies from source&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Improve docs, examples and user experience&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;pixi&lt;/code&gt; as a binary from the releases. &lt;code&gt;pixi&lt;/code&gt; can be installed on macOS, Linux, and Windows. The provided scripts will automatically download the latest version of &lt;code&gt;pixi&lt;/code&gt;, extract it, and move the &lt;code&gt;pixi&lt;/code&gt; binary to &lt;code&gt;~/.pixi/bin&lt;/code&gt;. If this directory does not already exist, the script will create it.&lt;/p&gt; &#xA;&lt;h2&gt;macOS and Linux&lt;/h2&gt; &#xA;&lt;p&gt;To install Pixi on macOS and Linux, open a terminal and run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -fsSL https://pixi.sh/install.sh | bash&#xA;# or with brew&#xA;brew install pixi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The script will also update your ~/.bash_profile to include ~/.pixi/bin in your PATH, allowing you to invoke the pixi command from anywhere. You might need to restart your terminal or source your shell for the changes to take effect.&lt;/p&gt; &#xA;&lt;h2&gt;Windows&lt;/h2&gt; &#xA;&lt;p&gt;To install Pixi on Windows, open a PowerShell terminal (you may need to run it as an administrator) and run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;iwr -useb https://pixi.sh/install.ps1 | iex&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The script will inform you once the installation is successful and add the ~/.pixi/bin directory to your PATH, which will allow you to run the pixi command from any location.&lt;/p&gt; &#xA;&lt;h2&gt;Install from source&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;pixi&lt;/code&gt; is 100% written in Rust and therefor it can be installed, build and tested with cargo. To start using &lt;code&gt;pixi&lt;/code&gt; from a source build run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cargo install --locked pixi&#xA;# Or to use the the latest `main` branch&#xA;cargo install --locked --git https://github.com/prefix-dev/pixi.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or when you want to make changes use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cargo build&#xA;cargo test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have any issues building because of the dependency on &lt;code&gt;rattler&lt;/code&gt; checkout it&#39;s &lt;a href=&#34;https://github.com/mamba-org/rattler/tree/main#give-it-a-try&#34;&gt;compile steps&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Uninstall&lt;/h2&gt; &#xA;&lt;p&gt;To uninstall the pixi binary should be removed. Delete &lt;code&gt;pixi&lt;/code&gt; from the &lt;code&gt;$PIXI_DIR&lt;/code&gt; which is default to &lt;code&gt;~/.pixi/bin/pixi&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;So on linux its:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;rm ~/.pixi/bin/pixi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and on windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$PIXI_BIN = &#34;$Env:LocalAppData\pixi\bin\pixi&#34;; Remove-Item -Path $PIXI_BIN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After this command you can still use the tools you installed with &lt;code&gt;pixi&lt;/code&gt;. To remove these as well just remove the whole &lt;code&gt;~/.pixi&lt;/code&gt; directory and remove the directory from your path.&lt;/p&gt; &#xA;&lt;h3&gt;Autocompletion&lt;/h3&gt; &#xA;&lt;p&gt;To get autocompletion run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# On unix (MacOS or Linux), pick your shell (use `echo $SHELL` to find the shell you are using.):&#xA;echo &#39;eval &#34;$(pixi completion --shell bash)&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;echo &#39;eval &#34;$(pixi completion --shell zsh)&#34;&#39; &amp;gt;&amp;gt; ~/.zshrc&#xA;echo &#39;pixi completion --shell fish | source&#39; &amp;gt;&amp;gt; ~/.config/fish/config.fish&#xA;echo &#39;eval (pixi completion --shell elvish | slurp)&#39; &amp;gt;&amp;gt; ~/.elvish/rc.elv&#xA;&#xA;# On Windows:&#xA;Add-Content -Path $PROFILE -Value &#39;Invoke-Expression (&amp;amp;pixi completion --shell powershell)&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then restart the shell or source the shell config file.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;The cli looks as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;➜ pixi&#xA;A package management and workflow tool&#xA;&#xA;Usage: pixi [OPTIONS] &amp;lt;COMMAND&amp;gt;&#xA;&#xA;Commands:&#xA;  completion  Generates a completion script for a shell&#xA;  init        Creates a new project&#xA;  add         Adds a dependency to the project&#xA;  run         Runs command in project&#xA;  shell       Start a shell in the pixi environment of the project&#xA;  global      Global is the main entry point for the part of pixi that executes on the global(system) level&#xA;  auth        Login to prefix.dev or anaconda.org servers to access private channels&#xA;  install     Install all dependencies&#xA;  help        Print this message or the help of the given subcommand(s)&#xA;&#xA;Options:&#xA;  -v, --verbose...  More output per occurrence&#xA;  -q, --quiet...    Less output per occurrence&#xA;  -h, --help        Print help&#xA;  -V, --version     Print version&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Creating a pixi project&lt;/h2&gt; &#xA;&lt;p&gt;Initialize a new project and navigate to the project directory&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pixi init myproject&#xA;cd myproject&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the dependencies you want to use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pixi add cowpy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the installed package in its environment&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pixi run cowpy &#34;Thanks for using pixi&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Activate a shell in the environment&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pixi shell&#xA;cowpy &#34;Thanks for using pixi&#34;&#xA;exit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installing a conda package globally&lt;/h2&gt; &#xA;&lt;p&gt;You can also globally install conda packages into their own environment. This behavior is similar to &lt;a href=&#34;https://github.com/pypa/pipx&#34;&gt;&lt;code&gt;pipx&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://github.com/mariusvniekerk/condax&#34;&gt;&lt;code&gt;condax&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pixi global install cowpy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;contributing&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing 😍&lt;/h2&gt; &#xA;&lt;p&gt;We would absolutely love for you to contribute to &lt;code&gt;pixi&lt;/code&gt;! Whether you want to start an issue, fix a bug you encountered, or suggest an improvement, every contribution is greatly appreciated.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re just getting started with our project or stepping into the Rust ecosystem for the first time, we&#39;ve got your back! We recommend beginning with issues labeled as &lt;code&gt;good first issue&lt;/code&gt;. These are carefully chosen tasks that provide a smooth entry point into contributing.These issues are typically more straightforward and are a great way to get familiar with the project.&lt;/p&gt; &#xA;&lt;p&gt;Got questions or ideas, or just want to chat? Join our lively conversations on Discord. We&#39;re very active and would be happy to welcome you to our community. &lt;a href=&#34;https://discord.gg/kKV8ZxyzY4&#34;&gt;Join our discord server today!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;pixibuilt&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Built using pixi&lt;/h2&gt; &#xA;&lt;p&gt;To see whats being built with &lt;code&gt;pixi&lt;/code&gt; check out the &lt;a href=&#34;https://raw.githubusercontent.com/prefix-dev/pixi/main/docs/Community.md&#34;&gt;Community&lt;/a&gt; page.&lt;/p&gt;</summary>
  </entry>
</feed>