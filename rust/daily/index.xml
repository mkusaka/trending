<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-24T02:25:31Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>TabbyML/tabby</title>
    <updated>2023-11-24T02:25:31Z</updated>
    <id>tag:github.com,2023-11-24:/TabbyML/tabby</id>
    <link href="https://github.com/TabbyML/tabby" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Self-hosted AI coding assistant&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;üêæ Tabby&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/TabbyML/tabby/releases/latest&#34;&gt;&lt;img src=&#34;https://shields.io/github/v/release/TabbyML/tabby?sort=semver&#34; alt=&#34;latest release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://makeapullrequest.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/tabbyml/tabby&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/tabbyml/tabby&#34; alt=&#34;Docker pulls&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://join.slack.com/t/tabbycommunity/shared_invite/zt-1xeiddizp-bciR2RtFTaJ37RBxr8VxpA&#34;&gt;&lt;img src=&#34;https://shields.io/badge/Join-Tabby%20Slack-red?logo=slack&#34; alt=&#34;Slack Community&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://calendly.com/tabby_ml/chat-with-tabbyml&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Book-Office%20Hours-purple?logo=googlecalendar&amp;amp;logoColor=white&#34; alt=&#34;Office Hours&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Tabby is a self-hosted AI coding assistant, offering an open-source and on-premises alternative to GitHub Copilot. It boasts several key features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Self-contained, with no need for a DBMS or cloud service.&lt;/li&gt; &#xA; &lt;li&gt;OpenAPI interface, easy to integrate with existing infrastructure (e.g Cloud IDE).&lt;/li&gt; &#xA; &lt;li&gt;Supports consumer-grade GPUs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://tabbyml.github.io/tabby/playground&#34;&gt;&lt;img alt=&#34;Open in Playground&#34; src=&#34;https://img.shields.io/badge/OPEN%20IN%20PLAYGROUND-blue?logo=xcode&amp;amp;style=for-the-badge&amp;amp;logoColor=green&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Demo&#34; src=&#34;https://user-images.githubusercontent.com/388154/230440226-9bc01d05-9f57-478b-b04d-81184eba14ca.gif&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;üî• What&#39;s New&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;11/09/2023&lt;/strong&gt; &lt;a href=&#34;https://github.com/TabbyML/tabby/releases/tag/v0.5.5&#34;&gt;v0.5.5&lt;/a&gt; released! With a redesign of UI + performance improvement.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;10/24/2023&lt;/strong&gt; ‚õ≥Ô∏è Major updates for Tabby IDE plugins across &lt;a href=&#34;https://tabby.tabbyml.com/docs/extensions&#34;&gt;VSCode/Vim/IntelliJ&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;10/15/2023&lt;/strong&gt; RAG-based code completion is enabled by detail in &lt;a href=&#34;https://github.com/TabbyML/tabby/releases/tag/v0.3.0&#34;&gt;v0.3.0&lt;/a&gt;üéâ! Check out the &lt;a href=&#34;https://tabby.tabbyml.com/blog/2023/10/16/repository-context-for-code-completion/&#34;&gt;blogpost&lt;/a&gt; explaining how Tabby utilizes repo-level context to get even smarter!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Archived&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;10/04/2023&lt;/strong&gt; Check out the &lt;a href=&#34;https://tabby.tabbyml.com/docs/models/&#34;&gt;model directory&lt;/a&gt; for the latest models supported by Tabby.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;09/18/2023&lt;/strong&gt; Apple&#39;s M1/M2 Metal inference support has landed in &lt;a href=&#34;https://github.com/TabbyML/tabby/releases/tag/v0.1.1&#34;&gt;v0.1.1&lt;/a&gt;!&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;08/31/2023&lt;/strong&gt; Tabby&#39;s first stable release &lt;a href=&#34;https://github.com/TabbyML/tabby/releases/tag/v0.0.1&#34;&gt;v0.0.1&lt;/a&gt; ü•≥.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;08/28/2023&lt;/strong&gt; Experimental support for the &lt;a href=&#34;https://github.com/TabbyML/tabby/issues/370&#34;&gt;CodeLlama 7B&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;08/24/2023&lt;/strong&gt; Tabby is now on &lt;a href=&#34;https://plugins.jetbrains.com/plugin/22379-tabby&#34;&gt;JetBrains Marketplace&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;üëã Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;You can find our documentation &lt;a href=&#34;https://tabby.tabbyml.com/docs/getting-started&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üìö &lt;a href=&#34;https://tabby.tabbyml.com/docs/installation/&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üíª &lt;a href=&#34;https://tabby.tabbyml.com/docs/extensions/&#34;&gt;IDE/Editor Extensions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;‚öôÔ∏è &lt;a href=&#34;https://tabby.tabbyml.com/docs/configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Run Tabby in 1 Minute&lt;/h3&gt; &#xA;&lt;p&gt;The easiest way to start a Tabby server is by using the following Docker command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it \&#xA;  --gpus all -p 8080:8080 -v $HOME/.tabby:/data \&#xA;  tabbyml/tabby \&#xA;  serve --model TabbyML/StarCoder-1B --device cuda&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For additional options (e.g inference type, parallelism), please refer to the &lt;a href=&#34;https://tabbyml.github.io/tabby&#34;&gt;documentation page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;ü§ù Contributing&lt;/h2&gt; &#xA;&lt;h3&gt;Get the Code&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --recurse-submodules https://github.com/TabbyML/tabby&#xA;cd tabby&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have already cloned the repository, you could run the &lt;code&gt;git submodule update --recursive --init&lt;/code&gt; command to fetch all submodules.&lt;/p&gt; &#xA;&lt;h3&gt;Build&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Set up the Rust environment by following this &lt;a href=&#34;https://www.rust-lang.org/learn/get-started&#34;&gt;tutorial&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the required dependencies:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# For MacOS&#xA;brew install protobuf&#xA;&#xA;# For Ubuntu / Debian&#xA;apt-get install protobuf-compiler libopenblas-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Now, you can build Tabby by running the command &lt;code&gt;cargo build&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Start Hacking!&lt;/h3&gt; &#xA;&lt;p&gt;... and don&#39;t forget to submit a &lt;a href=&#34;https://github.com/TabbyML/tabby/compare&#34;&gt;Pull Request&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üåç Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;#Ô∏è‚É£ &lt;a href=&#34;https://join.slack.com/t/tabbycommunity/shared_invite/zt-1xeiddizp-bciR2RtFTaJ37RBxr8VxpA&#34;&gt;Slack&lt;/a&gt; - connect with the TabbyML community&lt;/li&gt; &#xA; &lt;li&gt;üé§ &lt;a href=&#34;https://twitter.com/Tabby_ML&#34;&gt;Twitter / X&lt;/a&gt; - engage with TabbyML for all things possible&lt;/li&gt; &#xA; &lt;li&gt;üìö &lt;a href=&#34;https://www.linkedin.com/company/tabbyml/&#34;&gt;LinkedIn&lt;/a&gt; - follow for the latest from the community&lt;/li&gt; &#xA; &lt;li&gt;üíå &lt;a href=&#34;https://tinyletter.com/tabbyml/&#34;&gt;Newsletter&lt;/a&gt; - subscribe to unlock Tabby insights and secrets&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;üåü Star History&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#tabbyml/tabby&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=tabbyml/tabby&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kaspanet/rusty-kaspa</title>
    <updated>2023-11-24T02:25:31Z</updated>
    <id>tag:github.com,2023-11-24:/kaspanet/rusty-kaspa</id>
    <link href="https://github.com/kaspanet/rusty-kaspa" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Kaspa full-node and related libraries in the Rust programming language. This is an Alpha version at the initial testing phase.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Kaspa on Rust&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the implementation of the Kaspa full-node and related libraries in the Rust programming language. This is an Alpha version at the initial testing phase, however the node is expected to be fully functional and capable as a drop-in replacement for the Kaspa golang node.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;General prerequisites: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Linux: &lt;code&gt;sudo apt install build-essential libssl-dev pkg-config&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Windows: &lt;a href=&#34;https://gitforwindows.org/&#34;&gt;Git for Windows&lt;/a&gt; or an alternative Git distribution.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install Protobuf (required for gRPC) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Linux: &lt;code&gt;sudo apt install protobuf-compiler libprotobuf-dev&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Windows: &lt;a href=&#34;https://github.com/protocolbuffers/protobuf/releases/download/v21.10/protoc-21.10-win64.zip&#34;&gt;protoc-21.10-win64.zip&lt;/a&gt; and add &lt;code&gt;bin&lt;/code&gt; directory to &lt;code&gt;Path&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;MacOS: &lt;code&gt;brew install protobuf&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install the &lt;a href=&#34;https://clang.llvm.org/&#34;&gt;clang toolchain&lt;/a&gt; (required for RocksDB and WASM &lt;code&gt;secp256k1&lt;/code&gt; builds) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Linux: &lt;code&gt;apt-get install clang-format clang-tidy clang-tools clang clangd libc++-dev libc++1 libc++abi-dev libc++abi1 libclang-dev libclang1 liblldb-dev libllvm-ocaml-dev libomp-dev libomp5 lld lldb llvm-dev llvm-runtime llvm python3-clang&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Windows: Please see &lt;a href=&#34;https://raw.githubusercontent.com/kaspanet/rusty-kaspa/master/#installing-clang-toolchain-on-windows&#34;&gt;Installing clang toolchain on Windows&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;MacOS: Please see &lt;a href=&#34;https://raw.githubusercontent.com/kaspanet/rusty-kaspa/master/#installing-clang-toolchain-on-macos&#34;&gt;Installing clang toolchain on MacOS&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install the &lt;a href=&#34;https://rustup.rs/&#34;&gt;rust toolchain&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;If you already have rust installed, update it by running: &lt;code&gt;rustup update&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install wasm-pack: &lt;code&gt;cargo install wasm-pack&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install wasm32 target: &lt;code&gt;rustup target add wasm32-unknown-unknown&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run the following commands:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/kaspanet/rusty-kaspa&#xA;$ cd rusty-kaspa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running the node&lt;/h2&gt; &#xA;&lt;p&gt;Run the node through the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo run --release --bin kaspad&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And if you want to setup a test node, run the following command instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo run --release --bin kaspad -- --testnet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Mining&lt;/h2&gt; &#xA;&lt;p&gt;Mining is currently supported only on testnet, so once you&#39;ve setup a test node, follow these instructions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Download and unzip the latest binaries bundle of &lt;a href=&#34;https://github.com/kaspanet/kaspad/releases&#34;&gt;kaspanet/kaspad&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In a separate terminal run the kaspanet/kaspad miner:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kaspaminer --testnet --miningaddr kaspatest:qrcqat6l9zcjsu7swnaztqzrv0s7hu04skpaezxk43y4etj8ncwfk308jlcew&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;This will create and feed a DAG with the miner getting block templates from the node and submitting them back when mined. The node processes and stores the blocks while applying all currently implemented logic. Execution can be stopped and resumed, the data is persisted in a database.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can replace the above mining address with your own address by creating one as described &lt;a href=&#34;https://github.com/kaspanet/docs/raw/main/Getting%20Started/Full%20Node%20Installation.md#creating-a-wallet-optional&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Simulation framework (Simpa)&lt;/h2&gt; &#xA;&lt;p&gt;Additionally, the current codebase supports a full in-process network simulation, building an actual DAG over virtual time with virtual delay and benchmarking validation time (following the simulation generation). Execute&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo run --release --bin simpa -- --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to see the full command line configuration supported by &lt;code&gt;simpa&lt;/code&gt;. For instance, the following command will run a simulation producing 1000 blocks with communication delay of 2 seconds and BPS=8, and attempts to fill each block with up to 200 transactions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo run --release --bin simpa -- -t=200 -d=2 -b=8 -n=1000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Logging&lt;/h2&gt; &#xA;&lt;p&gt;Logging in &lt;code&gt;kaspad&lt;/code&gt; and &lt;code&gt;simpa&lt;/code&gt; can be &lt;a href=&#34;https://docs.rs/env_logger/0.10.0/env_logger/#filtering-results&#34;&gt;filtered&lt;/a&gt; either by defining the environment variable &lt;code&gt;RUST_LOG&lt;/code&gt; and/or by adding a &lt;code&gt;--loglevel&lt;/code&gt; argument to the command, ie.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ (cargo run --bin kaspad -- --loglevel info,kaspa_rpc_core=trace,kaspa_grpc_core=trace,consensus=trace,kaspa_core=trace) 2&amp;gt;&amp;amp;1 | tee ~/rusty-kaspa.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Heap-profiling&lt;/h2&gt; &#xA;&lt;p&gt;Heap-profiling in &lt;code&gt;kaspad&lt;/code&gt; and &lt;code&gt;simpa&lt;/code&gt; can be done by enabling &lt;code&gt;heap&lt;/code&gt; feature and profile, ie.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo run --bin kaspad --profile heap --features=heap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will produce &lt;code&gt;{bin-name}-heap.json&lt;/code&gt; file in the root of the workdir, that can be inspected by the &lt;a href=&#34;https://github.com/unofficial-mirror/valgrind/tree/master/dhat&#34;&gt;dhat-viewer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Tests &amp;amp; Benchmarks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To run unit and most integration tests use:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd rusty-kaspa&#xA;$ cargo test --release&#xA;// or install nextest and run&#xA;$ cargo nextest run --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To run current benchmarks:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd rusty-kaspa&#xA;$ cargo bench&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building WASM&lt;/h2&gt; &#xA;&lt;p&gt;To build rusty-kaspa wasm library, do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd wasm&#xA;./build-web&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will produce a wasm library in &lt;code&gt;/web-root&lt;/code&gt; directory&lt;/p&gt; &#xA;&lt;h2&gt;Installing clang toolchain on Windows&lt;/h2&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://github.com/llvm/llvm-project/releases/download/llvmorg-15.0.6/LLVM-15.0.6-win64.exe&#34;&gt;LLVM-15.0.6-win64.exe&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Once LLVM is installed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add the &lt;code&gt;bin&lt;/code&gt; directory of the LLVM installation (&lt;code&gt;C:\Program Files\LLVM\bin&lt;/code&gt;) to PATH&lt;/li&gt; &#xA; &lt;li&gt;set &lt;code&gt;LIBCLANG_PATH&lt;/code&gt; environment variable to point to the &lt;code&gt;bin&lt;/code&gt; directory as well&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; Due to C++ dependency configuration issues, LLVM &lt;code&gt;AR&lt;/code&gt; installation on Windows may not function correctly when switching between WASM and native C++ code compilation (native &lt;code&gt;RocksDB+secp256k1&lt;/code&gt; vs WASM32 builds of &lt;code&gt;secp256k1&lt;/code&gt;). Unfortunately, manually setting &lt;code&gt;AR&lt;/code&gt; environment variable also confuses C++ build toolchain (it should not be set for native but should be set for WASM32 targets). Currently, the best way to address this, is as follows: after installing LLVM on Windows, go to the target &lt;code&gt;bin&lt;/code&gt; installation directory and copy or rename &lt;code&gt;LLVM_AR.exe&lt;/code&gt; to &lt;code&gt;AR.exe&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installing clang toolchain on MacOS&lt;/h2&gt; &#xA;&lt;p&gt;The default XCode installation of &lt;code&gt;llvm&lt;/code&gt; does not support WASM build targets. To build WASM on MacOS you need to install &lt;code&gt;llvm&lt;/code&gt; from homebrew (at the time of writing, the llvm version for MacOS is 16.0.1).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install llvm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Homebrew can use different keg installation locations depending on your configuration. For example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/opt/homebrew/opt/llvm&lt;/code&gt; -&amp;gt; &lt;code&gt;/opt/homebrew/Cellar/llvm/16.0.1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/usr/local/Cellar/llvm/16.0.1&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To determine the installation location you can use &lt;code&gt;brew list llvm&lt;/code&gt; command and then modify the paths below accordingly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;% brew list llvm&#xA;/usr/local/Cellar/llvm/16.0.1/bin/FileCheck&#xA;/usr/local/Cellar/llvm/16.0.1/bin/UnicodeNameMappingGenerator&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have &lt;code&gt;/opt/homebrew/Cellar&lt;/code&gt;, then you should be able to use &lt;code&gt;/opt/homebrew/opt/llvm&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Add the following to your &lt;code&gt;~/.zshrc&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export PATH=&#34;/opt/homebrew/opt/llvm/bin:$PATH&#34;&#xA;export LDFLAGS=&#34;-L/opt/homebrew/opt/llvm/lib&#34;&#xA;export CPPFLAGS=&#34;-I/opt/homebrew/opt/llvm/include&#34;&#xA;export AR=/opt/homebrew/opt/llvm/bin/llvm-ar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Reload the &lt;code&gt;~/.zshrc&lt;/code&gt; file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source ~/.zshrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;JSON and Borsh RPC protocols&lt;/h2&gt; &#xA;&lt;p&gt;In addition to gRPC, Rusty Kaspa integrates an optional wRPC subsystem. wRPC is a high-performance, platform-neutral, Rust-centric, WebSocket-framed RPC implementation that can use Borsh and JSON protocol encoding. JSON protocol messaging is similar to JSON-RPC 1.0, but differs from the specification due to server-side notifications. Borsh encoding is meant for inter-process communication. When using Borsh both client and server should be built from the same codebase. JSON protocol is based on Kaspa data structures and is data-structure-version agnostic. You can connect to the JSON endpoint using any WebSocket library. Built-in RPC clients for JavaScript and TypeScript capable of running in web browsers and Node.js are available as a part of the Kaspa WASM framework.&lt;/p&gt; &#xA;&lt;h2&gt;Enabling wRPC&lt;/h2&gt; &#xA;&lt;p&gt;wRPC subsystem is disabled by default in &lt;code&gt;kaspad&lt;/code&gt; and can be enabled via:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--rpclisten-json = &amp;lt;interface:port&amp;gt;&lt;/code&gt; for JSON protocol&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--rpclisten-borsh = &amp;lt;interface:port&amp;gt;&lt;/code&gt; for Borsh protocol&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;wRPC to gRPC Proxy&lt;/h2&gt; &#xA;&lt;p&gt;wRPC to gRPC Proxy is deprecated and no longer supported.&lt;/p&gt; &#xA;&lt;h2&gt;Native JavaScript &amp;amp; TypeScript RPC clients for Browsers and Node.js environments&lt;/h2&gt; &#xA;&lt;p&gt;Integration in a Browser and Node.js environments is possible using WASM. The JavaScript code is agnostic to which environment it runs in.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; to run in Node.js environment, you must instantiate a W3C WebSocket shim using a &lt;code&gt;WebSocket&lt;/code&gt; crate before initializing Kaspa environment: &lt;code&gt;globalThis.WebSocket = require(&#39;websocket&#39;).w3cwebsocket;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Prerequisites:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;WasmPack: &lt;a href=&#34;https://rustwasm.github.io/wasm-pack/installer/&#34;&gt;https://rustwasm.github.io/wasm-pack/installer/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To test Node.js:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure you have Rust and WasmPack installed&lt;/li&gt; &#xA; &lt;li&gt;Start Golang Kaspad&lt;/li&gt; &#xA; &lt;li&gt;Start wRPC proxy&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd rpc/wrpc/wasm&#xA;./build-node&#xA;cd nodejs&#xA;npm install&#xA;node index&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can take a look at &lt;code&gt;rpc/wrpc/wasm/nodejs/index.js&lt;/code&gt; to see the use of the native JavaScript &amp;amp; TypeScript APIs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; &lt;code&gt;npm install&lt;/code&gt; is needed to install &lt;a href=&#34;https://github.com/theturtle32/WebSocket-Node&#34;&gt;WebSocket&lt;/a&gt; module. When running in the Browser environment, no additional dependencies are necessary because the browser provides the W3C WebSocket class natively.&lt;/p&gt; &#xA;&lt;h2&gt;Wallet CLI&lt;/h2&gt; &#xA;&lt;p&gt;Wallet CLI is now available via the &lt;code&gt;/cli&lt;/code&gt; or &lt;code&gt;/kos&lt;/code&gt; projects.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd cli&#xA;cargo run --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For KOS, please see &lt;a href=&#34;https://raw.githubusercontent.com/kaspanet/rusty-kaspa/master/kos/README.md&#34;&gt;&lt;code&gt;kos/README.md&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Web Browser (WASM):&lt;/p&gt; &#xA;&lt;p&gt;Run an http server inside of &lt;code&gt;wallet/wasm/web&lt;/code&gt; folder. If you don&#39;t have once, you can use &lt;code&gt;basic-http-server&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd wallet/wasm/web&#xA;cargo install basic-http-server&#xA;basic-http-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;em&gt;basic-http-server&lt;/em&gt; will serve on port 4000 by default, so open your web browser and load &lt;a href=&#34;http://localhost:4000&#34;&gt;http://localhost:4000&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The framework is compatible with all major desktop and mobile browsers.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rwf2/Rocket</title>
    <updated>2023-11-24T02:25:31Z</updated>
    <id>tag:github.com,2023-11-24:/rwf2/Rocket</id>
    <link href="https://github.com/rwf2/Rocket" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A web framework for Rust.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rocket&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rwf2/Rocket/actions&#34;&gt;&lt;img src=&#34;https://github.com/rwf2/Rocket/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://rocket.rs&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/web-rocket.rs-red.svg?style=flat&amp;amp;label=https&amp;amp;colorB=d33847&#34; alt=&#34;Rocket Homepage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/rocket&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/rocket.svg?sanitize=true&#34; alt=&#34;Current Crates.io Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://chat.mozilla.org/#/room/#rocket:mozilla.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/style-%23rocket:mozilla.org-blue.svg?style=flat&amp;amp;label=%5Bm%5D&#34; alt=&#34;Matrix: #rocket:mozilla.org&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://kiwiirc.com/client/irc.libera.chat/#rocket&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/style-%23rocket-blue.svg?style=flat&amp;amp;label=Libera.Chat&#34; alt=&#34;IRC: #rocket on irc.libera.chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Rocket is an async web framework for Rust with a focus on usability, security, extensibility, and speed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;#[macro_use] extern crate rocket;&#xA;&#xA;#[get(&#34;/&amp;lt;name&amp;gt;/&amp;lt;age&amp;gt;&#34;)]&#xA;fn hello(name: &amp;amp;str, age: u8) -&amp;gt; String {&#xA;    format!(&#34;Hello, {} year old named {}!&#34;, age, name)&#xA;}&#xA;&#xA;#[launch]&#xA;fn rocket() -&amp;gt; _ {&#xA;    rocket::build().mount(&#34;/hello&#34;, routes![hello])&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Visiting &lt;code&gt;localhost:8000/hello/John/58&lt;/code&gt;, for example, will trigger the &lt;code&gt;hello&lt;/code&gt; route resulting in the string &lt;code&gt;Hello, 58 year old named John!&lt;/code&gt; being sent to the browser. If an &lt;code&gt;&amp;lt;age&amp;gt;&lt;/code&gt; string was passed in that can&#39;t be parsed as a &lt;code&gt;u8&lt;/code&gt;, the route won&#39;t get called, resulting in a 404 error.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Rocket is extensively documented:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rocket.rs/overview/&#34;&gt;Overview&lt;/a&gt;: A brief look at what makes Rocket special.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rocket.rs/guide/quickstart&#34;&gt;Quickstart&lt;/a&gt;: How to get started as quickly as possible.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rocket.rs/guide/getting-started&#34;&gt;Getting Started&lt;/a&gt;: How to start your first Rocket project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rocket.rs/guide/&#34;&gt;Guide&lt;/a&gt;: A detailed guide and reference to Rocket.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://api.rocket.rs/rocket/&#34;&gt;API Documentation&lt;/a&gt;: The &#34;rustdocs&#34;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The official community support channels are &lt;a href=&#34;https://chat.mozilla.org/#/room/#rocket:mozilla.org&#34;&gt;&lt;code&gt;#rocket:mozilla.org&lt;/code&gt;&lt;/a&gt; on Matrix and the bridged &lt;a href=&#34;https://kiwiirc.com/client/irc.libera.chat/#rocket&#34;&gt;&lt;code&gt;#rocket&lt;/code&gt;&lt;/a&gt; IRC channel on Libera.Chat at &lt;code&gt;irc.libera.chat&lt;/code&gt;. We recommend joining us on &lt;a href=&#34;https://chat.mozilla.org/#/room/#rocket:mozilla.org&#34;&gt;Matrix via Element&lt;/a&gt;. If your prefer IRC, you can join via the &lt;a href=&#34;https://kiwiirc.com/client/irc.libera.chat/#rocket&#34;&gt;Kiwi IRC client&lt;/a&gt; or a client of your own.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;An extensive number of examples are provided in the &lt;code&gt;examples/&lt;/code&gt; directory. Each example can be compiled and run with Cargo. For instance, the following sequence of commands builds and runs the &lt;code&gt;Hello, world!&lt;/code&gt; example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd examples/hello&#xA;cargo run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should see &lt;code&gt;Hello, world!&lt;/code&gt; by visiting &lt;code&gt;http://localhost:8000&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building and Testing&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;core&lt;/code&gt; directory contains the three core libraries: &lt;code&gt;lib&lt;/code&gt;, &lt;code&gt;codegen&lt;/code&gt;, and &lt;code&gt;http&lt;/code&gt; published as &lt;code&gt;rocket&lt;/code&gt;, &lt;code&gt;rocket_codegen&lt;/code&gt; and &lt;code&gt;rocket_http&lt;/code&gt;, respectively. The latter two are implementations details and are reexported from &lt;code&gt;rocket&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;p&gt;Rocket&#39;s complete test suite can be run with &lt;code&gt;./scripts/test.sh&lt;/code&gt; from the root of the source tree. The script builds and tests all libraries and examples in all configurations. It accepts the following flags:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--examples&lt;/code&gt;: tests all examples in &lt;code&gt;examples/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--contrib&lt;/code&gt;: tests each &lt;code&gt;contrib&lt;/code&gt; library and feature individually&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--core&lt;/code&gt;: tests each &lt;code&gt;core/lib&lt;/code&gt; feature individually&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--benchmarks&lt;/code&gt;: runs all benchmarks&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--all&lt;/code&gt;: runs all tests in all configurations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally, a &lt;code&gt;+${toolchain}&lt;/code&gt; flag, where &lt;code&gt;${toolchain}&lt;/code&gt; is a valid &lt;code&gt;rustup&lt;/code&gt; toolchain string, can be passed as the first parameter. The flag is forwarded to &lt;code&gt;cargo&lt;/code&gt; commands. Any other extra parameters are passed directly to &lt;code&gt;cargo&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To test crates individually, simply run &lt;code&gt;cargo test --all-features&lt;/code&gt; in the crate&#39;s directory.&lt;/p&gt; &#xA;&lt;h3&gt;Codegen Testing&lt;/h3&gt; &#xA;&lt;p&gt;Code generation diagnostics are tested using &lt;a href=&#34;https://docs.rs/trybuild/1&#34;&gt;&lt;code&gt;trybuild&lt;/code&gt;&lt;/a&gt;; tests can be found in the &lt;code&gt;codegen/tests/ui-fail&lt;/code&gt; directories of respective &lt;code&gt;codegen&lt;/code&gt; crates. Each test is symlinked into sibling &lt;code&gt;ui-fail-stable&lt;/code&gt; and &lt;code&gt;ui-fail-nightly&lt;/code&gt; directories which contain the expected error output for stable and nightly compilers, respectively. To update codegen test UI output, run a codegen test suite with &lt;code&gt;TRYBUILD=overwrite&lt;/code&gt; and inspect the &lt;code&gt;diff&lt;/code&gt; of &lt;code&gt;.std*&lt;/code&gt; files.&lt;/p&gt; &#xA;&lt;h3&gt;API Docs&lt;/h3&gt; &#xA;&lt;p&gt;API documentation is built with &lt;code&gt;./scripts/mk-docs.sh&lt;/code&gt;. The resulting assets are uploaded to &lt;a href=&#34;https://api.rocket.rs/&#34;&gt;api.rocket.rs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Documentation for a released version &lt;code&gt;${x}&lt;/code&gt; can be found at &lt;code&gt;https://api.rocket.rs/v${x}&lt;/code&gt; and &lt;code&gt;https://rocket.rs/v${x}&lt;/code&gt;. For instance, the documentation for &lt;code&gt;0.4&lt;/code&gt; can be found at &lt;a href=&#34;https://api.rocket.rs/v0.4&#34;&gt;https://api.rocket.rs/v0.4&lt;/a&gt; and &lt;a href=&#34;https://rocket.rs/v0.4&#34;&gt;https://rocket.rs/v0.4&lt;/a&gt;. Documentation for unreleased versions in branch &lt;code&gt;${branch}&lt;/code&gt; be found at &lt;code&gt;https://api.rocket.rs/${branch}&lt;/code&gt; and &lt;code&gt;https://rocket.rs/${branch}&lt;/code&gt;. For instance, the documentation for the &lt;code&gt;master&lt;/code&gt; branch can be found at &lt;a href=&#34;https://api.rocket.rs/master&#34;&gt;https://api.rocket.rs/master&lt;/a&gt; and &lt;a href=&#34;https://rocket.rs/master&#34;&gt;https://rocket.rs/master&lt;/a&gt;. Documentation for unreleased branches is updated periodically.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are absolutely, positively welcome and encouraged! Contributions come in many forms. You could:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Submit a feature request or bug report as an &lt;a href=&#34;https://github.com/rwf2/Rocket/issues&#34;&gt;issue&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Ask for improved documentation as an &lt;a href=&#34;https://github.com/rwf2/Rocket/issues&#34;&gt;issue&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Comment on &lt;a href=&#34;https://github.com/rwf2/Rocket/issues?q=is%3Aissue+is%3Aopen+label%3A%22feedback+wanted%22&#34;&gt;issues that require feedback&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Contribute code via &lt;a href=&#34;https://github.com/rwf2/Rocket/pulls&#34;&gt;pull requests&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;We aim to keep Rocket&#39;s code quality at the highest level. This means that any code you contribute must be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Commented:&lt;/strong&gt; Complex and non-obvious functionality must be properly commented.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Documented:&lt;/strong&gt; Public items &lt;em&gt;must&lt;/em&gt; have doc comments with examples, if applicable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Styled:&lt;/strong&gt; Your code&#39;s style should match the existing and surrounding code style.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simple:&lt;/strong&gt; Your code should accomplish its task as simply and idiomatically as possible.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tested:&lt;/strong&gt; You must write (and pass) convincing tests for any new functionality.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Focused:&lt;/strong&gt; Your code should do what it&#39;s supposed to and nothing more.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All pull requests are code reviewed and tested by the CI. Note that unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in Rocket by you shall be dual licensed under the MIT License and Apache License, Version 2.0, without any additional terms or conditions.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Rocket is licensed under either of the following, at your option:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apache License, Version 2.0, (&lt;a href=&#34;https://raw.githubusercontent.com/rwf2/Rocket/master/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;https://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;MIT License (&lt;a href=&#34;https://raw.githubusercontent.com/rwf2/Rocket/master/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;https://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The Rocket website source is licensed under &lt;a href=&#34;https://raw.githubusercontent.com/rwf2/Rocket/master/site#license&#34;&gt;separate terms&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>