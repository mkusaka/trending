<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-15T01:38:54Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>oxc-project/oxc</title>
    <updated>2023-11-15T01:38:54Z</updated>
    <id>tag:github.com,2023-11-15:/oxc-project/oxc</id>
    <link href="https://github.com/oxc-project/oxc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;‚öì A suite of high-performance tools for JavaScript and TypeScript written in Rust.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/Boshen/oxc-assets/main/preview-dark-transparent.png&#34; width=&#34;600&#34;&gt; &#xA;  &lt;img alt=&#34;OXC Logo&#34; src=&#34;https://raw.githubusercontent.com/Boshen/oxc-assets/main/preview-white.png&#34; width=&#34;600&#34;&gt; &#xA; &lt;/picture&gt; &lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/oxc-project/oxc/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;MIT licensed&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/oxc-project/oxc/actions/workflows/ci.yml?query=event%3Apush+branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/oxc-project/oxc/actions/workflows/ci.yml/badge.svg?event=push&amp;amp;branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/oxc-project/oxc&#34;&gt;&lt;img src=&#34;https://codecov.io/github/oxc-project/oxc/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Code Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codspeed.io/oxc-project/oxc&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https://codspeed.io/badge.json&#34; alt=&#34;CodSpeed Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sponsors/Boshen&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/sponsors/Boshen&#34; alt=&#34;Sponsors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://discord.gg/9uXCAwqQZW&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1079625926024900739?logo=discord&amp;amp;label=Discord&#34; alt=&#34;Discord chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://oxc-project.github.io/oxc/playground&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Playground-blue?color=9BE4E0&#34; alt=&#34;Playground&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;‚öì Oxc&lt;/h2&gt; &#xA;&lt;p&gt;The Oxidation Compiler is creating a suite of high-performance tools for JavaScript and TypeScript.&lt;/p&gt; &#xA;&lt;p&gt;Oxc is building a parser, linter, formatter, transpiler, minifier, resolver ... all written in Rust.&lt;/p&gt; &#xA;&lt;h2&gt;üí° Philosophy&lt;/h2&gt; &#xA;&lt;p&gt;This project shares the same philosophies as &lt;a href=&#34;https://biomejs.dev/&#34;&gt;Biome&lt;/a&gt; and &lt;a href=&#34;https://beta.ruff.rs&#34;&gt;Ruff&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;JavaScript tooling could be rewritten in a more performant language.&lt;/li&gt; &#xA; &lt;li&gt;An integrated toolchain can tap into efficiencies that are not available to a disparate set of tools.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;‚ö°Ô∏è Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;The linter is ready to catch mistakes for you. It comes with over 60 default rules and no configuration is required.&lt;/p&gt; &#xA;&lt;p&gt;To start using, install &lt;a href=&#34;https://www.npmjs.com/package/oxlint&#34;&gt;oxlint&lt;/a&gt; or via &lt;code&gt;npx&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx oxlint@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To give you an idea of its capabilities, here is an example from the &lt;a href=&#34;https://github.com/microsoft/vscode&#34;&gt;vscode&lt;/a&gt; repository, which finishes linting 4000+ files in 0.5 seconds.&lt;/p&gt; &#xA;&lt;p float=&#34;left&#34; align=&#34;left&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Boshen/oxc-assets/main/linter-screenshot.png&#34; width=&#34;60%&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;‚ö°Ô∏è Performance&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The parser aim to be the fastest Rust-based ready-for-production parser.&lt;/li&gt; &#xA; &lt;li&gt;The linter is more than 50 times faster than &lt;a href=&#34;https://eslint.org/&#34;&gt;ESLint&lt;/a&gt;, and scales with the number of CPU cores.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p float=&#34;left&#34; align=&#34;middle&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Boshen/bench-javascript-parser-written-in-rust/main/bar-graph.svg?sanitize=true&#34; width=&#34;49%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Boshen/bench-javascript-linter/main/bar-graph.svg?sanitize=true&#34; width=&#34;49%&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;‚å®Ô∏è Programming Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Rust&lt;/h3&gt; &#xA;&lt;p&gt;Individual crates are published, you may use them to build your own JavaScript tools.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The umbrella crate &lt;a href=&#34;https://docs.rs/oxc&#34;&gt;oxc&lt;/a&gt; exports all public crates from this repository.&lt;/li&gt; &#xA; &lt;li&gt;The AST and parser crates &lt;a href=&#34;https://docs.rs/oxc_ast&#34;&gt;oxc_ast&lt;/a&gt; and &lt;a href=&#34;https://docs.rs/oxc_parser&#34;&gt;oxc_parser&lt;/a&gt; are production ready.&lt;/li&gt; &#xA; &lt;li&gt;See &lt;code&gt;crates/*/examples&lt;/code&gt; for example usage.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;While Rust has gained a reputation for its comparatively slower compilation speed, we have dedicated significant effort to fine-tune the Rust compilation speed. Our aim is to minimize any impact on your development workflow, ensuring that developing your own Oxc based tools remains a smooth and efficient experience.&lt;/p&gt; &#xA;&lt;p&gt;This is demonstrated by our &lt;a href=&#34;https://github.com/oxc-project/oxc/actions/workflows/ci.yml?query=branch%3Amain&#34;&gt;CI runs&lt;/a&gt;, where warm runs complete in 5 minutes.&lt;/p&gt; &#xA;&lt;h3&gt;Node.js&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You may use the parser via napi: &lt;a href=&#34;https://www.npmjs.com/package/oxc-parser&#34;&gt;oxc-parser&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;üéØ Tools&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oxc-project/oxc/main/#-ast-and-parser&#34;&gt;AST and Parser&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oxc-project/oxc/main/#-linter&#34;&gt;Linter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oxc-project/oxc/main/#-resolver&#34;&gt;Resolver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oxc-project/oxc/main/#-minifier&#34;&gt;Minifier&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oxc-project/oxc/main/#-formatter&#34;&gt;Formatter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oxc-project/oxc/main/#-transpiler&#34;&gt;Transpiler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oxc-project/oxc/main/#-ezno-type-checker&#34;&gt;Ezno Type Checker&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;üî∏ AST and Parser&lt;/h3&gt; &#xA;&lt;p&gt;Oxc maintains its own AST and parser, which is by far the fastest and most conformant JavaScript and TypeScript (including JSX and TSX) parser written in Rust.&lt;/p&gt; &#xA;&lt;p&gt;As the parser often represents a key performance bottleneck in JavaScript tooling, any minor improvements can have a cascading effect on our downstream tools. By developing our parser, we have the opportunity to explore and implement well-researched performance techniques.&lt;/p&gt; &#xA;&lt;p&gt;While many existing JavaScript tools rely on &lt;a href=&#34;https://github.com/estree/estree&#34;&gt;estree&lt;/a&gt; as their AST specification, a notable drawback is its abundance of ambiguous nodes. This ambiguity often leads to confusion during development with &lt;a href=&#34;https://github.com/estree/estree&#34;&gt;estree&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The Oxc AST differs slightly from the &lt;a href=&#34;https://github.com/estree/estree&#34;&gt;estree&lt;/a&gt; AST by removing ambiguous nodes and introducing distinct types. For example, instead of using a generic &lt;a href=&#34;https://github.com/estree/estree&#34;&gt;estree&lt;/a&gt; &lt;code&gt;Identifier&lt;/code&gt;, the Oxc AST provides specific types such as &lt;code&gt;BindingIdentifier&lt;/code&gt;, &lt;code&gt;IdentifierReference&lt;/code&gt;, and &lt;code&gt;IdentifierName&lt;/code&gt;. This clear distinction greatly enhances the development experience by aligning more closely with the ECMAScript specification.&lt;/p&gt; &#xA;&lt;h4&gt;üèÜ Parser Performance&lt;/h4&gt; &#xA;&lt;p&gt;Our &lt;a href=&#34;https://github.com/Boshen/bench-javascript-parser-written-in-rust&#34;&gt;benchmark&lt;/a&gt; reveals that the Oxc parser surpasses the speed of the &lt;a href=&#34;https://swc.rs&#34;&gt;swc&lt;/a&gt; parser by approximately 2 times and the &lt;a href=&#34;https://biomejs.dev/&#34;&gt;Biome&lt;/a&gt; parser by 3 times.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How is it so fast?&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;AST is allocated in a memory arena (&lt;a href=&#34;https://crates.io/crates/bumpalo&#34;&gt;bumpalo&lt;/a&gt;) for fast AST memory allocation and deallocation.&lt;/li&gt; &#xA;  &lt;li&gt;Short strings are inlined by &lt;a href=&#34;https://crates.io/crates/compact_str&#34;&gt;CompactString&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;No other heap allocations are done except the above two.&lt;/li&gt; &#xA;  &lt;li&gt;Scope binding, symbol resolution and some syntax errors are not done in the parser, they are delegated to the semantic analyzer.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;üî∏ Linter&lt;/h3&gt; &#xA;&lt;p&gt;The linter embraces convention over configuration, eliminating the need for extensive configuration and plugin setup. Unlike other linters like &lt;a href=&#34;https://eslint.org/&#34;&gt;ESLint&lt;/a&gt;, which often require intricate configurations and plugin installations (e.g. &lt;a href=&#34;https://typescript-eslint.io&#34;&gt;@typescript-eslint&lt;/a&gt;), our linter only requires a single command that you can immediately run on your codebase:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx oxlint@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We also plan to port essential plugins such as &lt;a href=&#34;https://www.npmjs.com/package/eslint-plugin-import&#34;&gt;eslint-plugin-import&lt;/a&gt; and &lt;a href=&#34;https://www.npmjs.com/package/eslint-plugin-jest&#34;&gt;eslint-plugin-jest&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;üèÜ Linter Performance&lt;/h4&gt; &#xA;&lt;p&gt;The linter is 50 - 100 times faster than &lt;a href=&#34;https://eslint.org/&#34;&gt;ESLint&lt;/a&gt; depending on the number of rules and number of CPU cores used. It completes in less than a second for most codebases with a few hundred files and completes in a few seconds for larger monorepos. See &lt;a href=&#34;https://github.com/Boshen/bench-javascript-linter&#34;&gt;bench-javascript-linter&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;As an upside, the binary is approximately 3MB, whereas &lt;a href=&#34;https://eslint.org/&#34;&gt;ESLint&lt;/a&gt; and its associated plugin dependencies can easily exceed 100.&lt;/p&gt; &#xA;&lt;p&gt;You may also download the linter binary from the &lt;a href=&#34;https://github.com/oxc-project/oxc/releases/latest&#34;&gt;latest release tag&lt;/a&gt; as a standalone binary, this lets you run the linter without a Node.js installation in your CI.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How is it so fast?&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Oxc parser is used.&lt;/li&gt; &#xA;  &lt;li&gt;AST visit is a fast operation due to linear memory scan from the memory arena.&lt;/li&gt; &#xA;  &lt;li&gt;Files are linted in a multi-threaded environment, so scales with the total number of CPU cores.&lt;/li&gt; &#xA;  &lt;li&gt;Every single lint rule is tuned for performance.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;Linter Plugin&lt;/h4&gt; &#xA;&lt;p&gt;We are currently developing a DSL-based plugin system. The plugin system uses &lt;a href=&#34;https://github.com/obi1kenobi/trustfall&#34;&gt;trustfall&lt;/a&gt; as its query engine and a subset of GraphQL as its query language.&lt;/p&gt; &#xA;&lt;p&gt;You will not need to use JavaScript or Rust to write a plugin, this is useful for QAs and security researchers.&lt;/p&gt; &#xA;&lt;h3&gt;üî∏ Resolver&lt;/h3&gt; &#xA;&lt;p&gt;Module resolution plays a crucial role in JavaScript tooling, especially for tasks like multi-file analysis or bundling. However, it can often become a performance bottleneck. To address this, we are actively working on porting &lt;a href=&#34;https://github.com/webpack/enhanced-resolve&#34;&gt;enhanced-resolve&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/eslint-plugin-import&#34;&gt;eslint-plugin-import&lt;/a&gt; will be our first application for the resolver, since it is currently a performance and complexity blocker for a lot of projects.&lt;/p&gt; &#xA;&lt;h3&gt;üî∏ Transpiler&lt;/h3&gt; &#xA;&lt;p&gt;A transpiler is responsible for turning higher versions of ECMAScript to a lower version that can be used in older browsers. We are currently focusing on an esnext to es2015 transpiler. See the &lt;a href=&#34;https://github.com/oxc-project/oxc/issues/974&#34;&gt;umbrella issue&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h3&gt;üî∏ Minifier&lt;/h3&gt; &#xA;&lt;p&gt;JavaScript minification plays a crucial role in optimizing website performance as it reduces the amount of data sent to users, resulting in faster page loads. This holds tremendous economic value, particularly for e-commerce websites, where every second can equate to millions of dollars.&lt;/p&gt; &#xA;&lt;p&gt;However, existing minifiers typically require a trade-off between compression quality and speed. You have to choose between the slowest for the best compression or the fastest for less compression. But what if we could develop a faster minifier without compromising on compression?&lt;/p&gt; &#xA;&lt;p&gt;We are actively working on a prototype that aims to achieve this goal, by porting all test cases from well-known minifiers such as &lt;a href=&#34;https://github.com/google/closure-compiler&#34;&gt;google-closure-compiler&lt;/a&gt;, &lt;a href=&#34;https://terser.org&#34;&gt;terser&lt;/a&gt;, &lt;a href=&#34;https://esbuild.github.io/&#34;&gt;esbuild&lt;/a&gt;, and &lt;a href=&#34;https://github.com/tdewolff/minify&#34;&gt;tdewolff-minify&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Preliminary results indicate that we are on track to achieve our objectives. With the Oxc minifier, you can expect faster minification times without sacrificing compression quality.&lt;/p&gt; &#xA;&lt;h3&gt;üî∏ Formatter&lt;/h3&gt; &#xA;&lt;p&gt;While &lt;a href=&#34;https://prettier.io&#34;&gt;prettier&lt;/a&gt; has established itself as the de facto code formatter for JavaScript, there is a significant demand in the developer community for a less opinionated alternative. Recognizing this need, our ambition is to undertake research and development to create a new JavaScript formatter that offers increased flexibility and customization options. Unfortunately we are currently lacking the resources to do so.&lt;/p&gt; &#xA;&lt;h3&gt;üî∏ Ezno Type Checker&lt;/h3&gt; &#xA;&lt;p&gt;Developed by @kaleidawave, &lt;a href=&#34;https://github.com/kaleidawave/ezno&#34;&gt;ezno&lt;/a&gt; is a TypeScript checker written in Rust with a focus on static analysis and runtime performance. You may read the &lt;a href=&#34;https://kaleidawave.github.io/posts/introducing-ezno/&#34;&gt;announcement blog post&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;The type checker is available via &lt;code&gt;npx oxidation-compiler@latest check path&lt;/code&gt; and the &lt;a href=&#34;https://oxc-project.github.io/oxc/playground&#34;&gt;playground&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;‚úçÔ∏è Contribute&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/oxc-project/oxc/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for guidance.&lt;/p&gt; &#xA;&lt;p&gt;Check out some of the &lt;a href=&#34;https://github.com/oxc-project/oxc/contribute&#34;&gt;good first issues&lt;/a&gt; or ask us on &lt;a href=&#34;https://discord.gg/9uXCAwqQZW&#34;&gt;Discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are unable to contribute by code, you can still participate by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add a &lt;a href=&#34;https://github.com/oxc-project/oxc/stargazers&#34;&gt;GitHub Star&lt;/a&gt; to the project.&lt;/li&gt; &#xA; &lt;li&gt;Join us on &lt;a href=&#34;https://discord.gg/9uXCAwqQZW&#34;&gt;Discord&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/boshen_c&#34;&gt;Follow me on twitter&lt;/a&gt; and tweet about this project.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üìö Learning Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;My small tutorial on &lt;a href=&#34;https://oxc-project.github.io/javascript-parser-in-rust&#34;&gt;how to write a JavaScript Parser in Rust&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;My small article &lt;a href=&#34;https://rustmagazine.org/issue-3/javascript-compiler/&#34;&gt;Pursuit of Performance on Building a JavaScript Compiler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://craftinginterpreters.com&#34;&gt;Crafting Interpreters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vimeo.com/649009599&#34;&gt;Andrew Kelley - Practical DOD&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üßë‚Äçüíª Maintenance&lt;/h2&gt; &#xA;&lt;p&gt;Oxc is being maintained by &lt;a href=&#34;https://github.com/boshen&#34;&gt;Boshen&lt;/a&gt; as the project lead with the help of &lt;a href=&#34;https://github.com/oxc-project/oxc/graphs/contributors&#34;&gt;contributors&lt;/a&gt; from all over the world.&lt;/p&gt; &#xA;&lt;p&gt;Rules of thumb:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;APIs should be simple and well-documented.&lt;/li&gt; &#xA; &lt;li&gt;All performance issues (runtime and compilation speed) are considered as bugs in this project.&lt;/li&gt; &#xA; &lt;li&gt;Third-party dependencies should be minimal.&lt;/li&gt; &#xA; &lt;li&gt;Monitor code coverage for unused code. Aim for 99% code coverage.&lt;/li&gt; &#xA; &lt;li&gt;Embrace data-oriented design.&lt;/li&gt; &#xA; &lt;li&gt;Prefer smaller PRs. Try &lt;a href=&#34;https://graphite.dev&#34;&gt;graphite.dev&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ü§ù Credits&lt;/h2&gt; &#xA;&lt;p&gt;This project was incubated with the assistance of these exceptional mentors and their projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://biomejs.dev/&#34;&gt;Biome&lt;/a&gt; - &lt;a href=&#34;https://github.com/ematipico&#34;&gt;@ematipico&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://beta.ruff.rs&#34;&gt;Ruff&lt;/a&gt; - &lt;a href=&#34;https://github.com/charliermarsh&#34;&gt;@charliermarsh&lt;/a&gt;, &lt;a href=&#34;https://github.com/MichaReiser&#34;&gt;@MichaReiser&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://quick-lint-js.com&#34;&gt;quick-lint-js&lt;/a&gt; - &lt;a href=&#34;https://github.com/strager&#34;&gt;@strager&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://package.elm-lang.org/packages/jfmengels/elm-review/latest&#34;&gt;elm-review&lt;/a&gt; - &lt;a href=&#34;https://github.com/jfmengels&#34;&gt;@jfmengels&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Special thanks go to&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/domonji&#34;&gt;@domonji&lt;/a&gt; for contribution to the TypeScript parser&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/guan-wy&#34;&gt;@guan-wy&lt;/a&gt; for the &lt;a href=&#34;https://github.com/Boshen/oxc-assets&#34;&gt;project logo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And also&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kaleidawave&#34;&gt;@kaleidawave&lt;/a&gt; for &lt;a href=&#34;https://raw.githubusercontent.com/oxc-project/oxc/main/#-ezno-type-checker&#34;&gt;Ezno Type Checker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zackradisic&#34;&gt;@zackradisic&lt;/a&gt; for &lt;a href=&#34;https://github.com/zackradisic/tyvm&#34;&gt;tyvm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/u9g&#34;&gt;@u9g&lt;/a&gt; for the work in progress &lt;a href=&#34;https://raw.githubusercontent.com/oxc-project/oxc/main/crates/oxc_linter_plugin&#34;&gt;oxc_linter_plugin&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üìñ License&lt;/h2&gt; &#xA;&lt;p&gt;Oxc is free and open-source software licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/oxc-project/oxc/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Oxc partially copies code from the following projects, their licenses are listed in &lt;a href=&#34;https://raw.githubusercontent.com/oxc-project/oxc/main/THIRD-PARTY-LICENSE&#34;&gt;&lt;strong&gt;Third-party library licenses&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Project&lt;/th&gt; &#xA;   &lt;th&gt;License&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/eslint/eslint&#34;&gt;eslint/eslint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/eslint/eslint/raw/main/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/typescript-eslint/typescript-eslint&#34;&gt;typescript-eslint/typescript-eslint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/typescript-eslint/typescript-eslint/raw/main/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/import-js/eslint-plugin-import&#34;&gt;import-js/eslint-plugin-import&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/import-js/eslint-plugin-import/raw/main/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jest-community/eslint-plugin-jest&#34;&gt;jest-community/eslint-plugin-jest&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jest-community/eslint-plugin-jest/raw/main/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/microsoft/TypeScript&#34;&gt;microsoft/TypeScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/microsoft/TypeScript/raw/main/LICENSE.txt&#34;&gt;Apache 2.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/biomejs/biome&#34;&gt;biomejs/biome&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/biomejs/biome/raw/main/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/mozilla-spidermonkey/jsparagus&#34;&gt;mozilla-spidermonkey/jsparagus&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/mozilla-spidermonkey/jsparagus/raw/master/LICENSE-MIT&#34;&gt;MIT&lt;/a&gt; &lt;a href=&#34;https://github.com/mozilla-spidermonkey/jsparagus/raw/master/LICENSE-APACHE-2.0&#34;&gt;Apache 2.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/prettier/prettier&#34;&gt;prettier/prettier&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/prettier/prettier/raw/main/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acornjs/acorn&#34;&gt;acorn&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acornjs/acorn/raw/master/acorn/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/zkat/miette&#34;&gt;zkat/miette&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/zkat/miette/raw/main/LICENSE&#34;&gt;Apache 2.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/sindresorhus/globals&#34;&gt;sindresorhus/globals&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/sindresorhus/globals/raw/main/license&#34;&gt;MIT&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/terser/terser&#34;&gt;terser&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/terser/terser/raw/master/LICENSE&#34;&gt;BSD&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/evanw/esbuild&#34;&gt;evanw/esbuild&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/evanw/esbuild/raw/main/LICENSE.md&#34;&gt;MIT&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/google/closure-compiler&#34;&gt;google/closure-compiler&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/google/closure-compiler#closure-compiler-license&#34;&gt;Apache 2.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/tdewolff/minify&#34;&gt;tdewolff/minify&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/tdewolff/minify/raw/master/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/parcel-bundler/parcel&#34;&gt;parcel-bundler/parcel&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/parcel-bundler/parcel/raw/v2/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dividab/tsconfig-paths&#34;&gt;dividab/tsconfig-paths&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dividab/tsconfig-paths/raw/master/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/tmccombs/json-comments-rs&#34;&gt;tmccombs/json-comments-rs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/tmccombs/json-comments-rs/raw/main/LICENSE&#34;&gt;Apache 2.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>radiant-labs/radiantkit</title>
    <updated>2023-11-15T01:38:54Z</updated>
    <id>tag:github.com,2023-11-15:/radiant-labs/radiantkit</id>
    <link href="https://github.com/radiant-labs/radiantkit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open-source framework to build graphics applications (like Figma, Canva, Miro, etc). Uses Rust, Wasm, wgpu and epaint.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.radiantkit.xyz?utm_source=github&amp;amp;utm_medium=organic&amp;amp;utm_campaign=readme&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/radiant-labs/radiantkit/main/banner.png&#34; alt=&#34;RadiantKit Banner&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt; &lt;b&gt;Build Graphics Apps 10x Faster!&lt;/b&gt; &lt;br&gt; &lt;/h2&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.radiantkit.xyz/&#34;&gt;Website&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://demo.radiantkit.xyz/&#34;&gt;Examples&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;http://docs.radiantkit.xyz/&#34;&gt;Docs&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://join.slack.com/t/radiantkit/shared_invite/zt-25isowtr6-jg3wHcQjRuLxyeT_fELO9Q&#34;&gt;Community&lt;/a&gt; &lt;/h3&gt; &#xA;&lt;h1&gt;RadiantKit&lt;/h1&gt; &#xA;&lt;p&gt;RadiantKit is an in-development framework to build graphics applications (like Figma, Canva, Miro, etc) that&#39;s free and open source.&lt;/p&gt; &#xA;&lt;p&gt;It introduces a node-component-system for efficient rendering, while ensuring complete extensibility. It can support both native and web (via WebAssembly) platforms.&lt;/p&gt; &#xA;&lt;h2&gt;Basic Example&lt;/h2&gt; &#xA;&lt;p&gt;Install rust and follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;cd examples/basic&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cargo run&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Egui Integration Example&lt;/h2&gt; &#xA;&lt;p&gt;Install rust and follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;cd examples/egui&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cargo run&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Web Examples&lt;/h2&gt; &#xA;&lt;p&gt;Install yarn and follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;cd examples/web&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn build:wasm&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn start&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Tauri&lt;/h2&gt; &#xA;&lt;p&gt;Follow steps for web till #3. Then, run &lt;code&gt;yarn tauri dev&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>