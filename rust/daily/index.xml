<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-27T01:35:02Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>crate-ci/typos</title>
    <updated>2024-03-27T01:35:02Z</updated>
    <id>tag:github.com,2024-03-27:/crate-ci/typos</id>
    <link href="https://github.com/crate-ci/typos" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Source code spell checker&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;typos&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Source code spell checker&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Finds and corrects spelling mistakes among source code:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fast enough to run on monorepos&lt;/li&gt; &#xA; &lt;li&gt;Low false positives so you can run on PRs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/crate-ci/typos/master/docs/screenshot.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codecov.io/gh/crate-ci/typos&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/crate-ci/typos/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/typos&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-master-blue.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/crates/l/typos.svg?sanitize=true&#34; alt=&#34;License&#34;&gt; &lt;a href=&#34;https://crates.io/crates/typos-cli&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/typos.svg?sanitize=true&#34; alt=&#34;Crates Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Dual-licensed under &lt;a href=&#34;https://raw.githubusercontent.com/crate-ci/typos/master/LICENSE-MIT&#34;&gt;MIT&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/crate-ci/typos/master/LICENSE-APACHE&#34;&gt;Apache 2.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crate-ci/typos/master/#install&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crate-ci/typos/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crate-ci/typos/master/#false-positives&#34;&gt;False Positives&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crate-ci/typos/master/#integrations&#34;&gt;Integrations&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crate-ci/typos/master/docs/github-action.md&#34;&gt;GitHub Action&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crate-ci/typos/master/docs/pre-commit.md&#34;&gt;pre-commit&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crate-ci/typos/master/#custom&#34;&gt;Custom&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crate-ci/typos/master/#debugging&#34;&gt;Debugging&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crate-ci/typos/master/docs/reference.md&#34;&gt;Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crate-ci/typos/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crate-ci/typos/master/docs/comparison.md&#34;&gt;Comparison with other spell checkers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/crate-ci/typos/wiki&#34;&gt;Projects using typos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crate-ci/typos/master/benchsuite/runs&#34;&gt;Benchmarks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crate-ci/typos/master/docs/design.md&#34;&gt;Design&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crate-ci/typos/master/CONTRIBUTING.md&#34;&gt;Contribute&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crate-ci/typos/master/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/crate-ci/typos/releases&#34;&gt;Download&lt;/a&gt; a pre-built binary (installable via &lt;a href=&#34;https://github.com/crate-ci/gh-install&#34;&gt;gh-install&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Or use rust to install:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo install typos-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; to install:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install typos-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use &lt;a href=&#34;https://conda.io/&#34;&gt;Conda&lt;/a&gt; to install:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;conda install typos&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use &lt;a href=&#34;https://wiki.archlinux.org/title/pacman&#34;&gt;Pacman&lt;/a&gt; to install:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo pacman -S typos&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Most commonly, you&#39;ll either want to see what typos are available with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;typos&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or have them fixed&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;typos --write-changes&#xA;typos -w&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If there is any ambiguity (multiple possible corrections), &lt;code&gt;typos&lt;/code&gt; will just report it to the user and move on.&lt;/p&gt; &#xA;&lt;h3&gt;False-positives&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes, what looks like a typo is intentional, like with people&#39;s names, acronyms, or localized content.&lt;/p&gt; &#xA;&lt;p&gt;To mark a word or an identifier (grouping of words) as valid, add it your &lt;a href=&#34;https://raw.githubusercontent.com/crate-ci/typos/master/docs/reference.md&#34;&gt;&lt;code&gt;_typos.toml&lt;/code&gt;&lt;/a&gt; by declaring itself as the valid spelling:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[default]&#xA;extend-ignore-identifiers-re = [&#xA;    # *sigh* this just isn&#39;t worth the cost of fixing&#xA;    &#34;AttributeID.*Supress.*&#34;,&#xA;]&#xA;&#xA;[default.extend-identifiers]&#xA;# *sigh* this just isn&#39;t worth the cost of fixing&#xA;AttributeIDSupressMenu = &#34;AttributeIDSupressMenu&#34;&#xA;&#xA;[default.extend-words]&#xA;# Don&#39;t correct the surname &#34;Teh&#34;&#xA;teh = &#34;teh&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For cases like localized content, you can disable spell checking of file contents while still checking the file name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[type.po]&#xA;extend-glob = [&#34;*.po&#34;]&#xA;check-file = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(run &lt;code&gt;typos --type-list&lt;/code&gt; to see configured file types)&lt;/p&gt; &#xA;&lt;p&gt;If you need some more flexibility, you can completely exclude some files from consideration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[files]&#xA;extend-exclude = [&#34;localized/*.po&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Integrations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crate-ci/typos/master/docs/github-action.md&#34;&gt;GitHub Actions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crate-ci/typos/master/docs/pre-commit.md&#34;&gt;pre-commit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/putoutjs/putout-processor-typos&#34;&gt;üêäPutout Processor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tekumara/typos-vscode&#34;&gt;Visual Studio Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tekumara/typos-vscode&#34;&gt;typos-lsp (Language Server Protocol server)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Custom&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;typos&lt;/code&gt; provides several building blocks for custom native integrations&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-&lt;/code&gt; reads from &lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;--write-changes&lt;/code&gt; will be written to &lt;code&gt;stdout&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--diff&lt;/code&gt; to provide a diff&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--format json&lt;/code&gt; to get jsonlines with exit code 0 on no errors, code 2 on typos, anything else is an error.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Read file from stdin, write corrected version to stdout&#xA;typos - --write-changes&#xA;# Creates a diff of what would change&#xA;typos dir/file --diff&#xA;# Fully programmatic control&#xA;typos dir/file --format json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Debugging&lt;/h3&gt; &#xA;&lt;p&gt;You can see what the effective config looks like by running&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;typos --dump-config -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then see how typos is processing your project with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;typos --files&#xA;typos --identifiers&#xA;typos --words&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to dig in more, you can enable debug logging with &lt;code&gt;-v&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Why was ... not corrected?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Does the file show up in &lt;code&gt;typos --files&lt;/code&gt;?&lt;/strong&gt; If not, check your config with &lt;code&gt;typos --dump-config -&lt;/code&gt;. The &lt;code&gt;[files]&lt;/code&gt; table controls how we walk files. If you are using &lt;code&gt;files.extend-exclude&lt;/code&gt;, are you running into &lt;a href=&#34;https://github.com/crate-ci/typos/issues/593&#34;&gt;#593&lt;/a&gt;? If you are using &lt;code&gt;files.ignore-vcs = true&lt;/code&gt;, is the file in your &lt;code&gt;.gitignore&lt;/code&gt; but git tracks it anyways? Prefer allowing the file explicitly (see &lt;a href=&#34;https://github.com/crate-ci/typos/issues/909&#34;&gt;#909&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Does the identifier show up in &lt;code&gt;typos --identifiers&lt;/code&gt; or the word show up in &lt;code&gt;typos --words&lt;/code&gt;?&lt;/strong&gt; If not, it might be subject to one of typos&#39; heuristics for detecting non-words (like hashes) or unambiguous words (like words after a &lt;code&gt;\&lt;/code&gt; escape).&lt;/p&gt; &#xA;&lt;p&gt;If it is showing up, likely &lt;code&gt;typos&lt;/code&gt; doesn&#39;t know about it yet.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;typos&lt;/code&gt; maintains a list of known typo corrections to keep the false positive count low so it can safely run unassisted.&lt;/p&gt; &#xA;&lt;p&gt;This is in contrast to most spell checking UIs people use where there is a known list of valid words. In this case, the spell checker tries to guess your intent by finding the closest-looking word. It then has a gauge for when a word isn&#39;t close enough and assumes you know best. The user has the opportunity to verify these corrections and explicitly allow or reject them.&lt;/p&gt; &#xA;&lt;p&gt;For more on the trade offs of these approaches, see &lt;a href=&#34;https://raw.githubusercontent.com/crate-ci/typos/master/docs/design.md&#34;&gt;Design&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To correct it locally, see also our &lt;a href=&#34;https://raw.githubusercontent.com/crate-ci/typos/master/#false-positives&#34;&gt;False Positives documentation&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To contribute your correction, see &lt;a href=&#34;https://raw.githubusercontent.com/crate-ci/typos/master/CONTRIBUTING.md&#34;&gt;Contribute&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>worldcoin/orb-software</title>
    <updated>2024-03-27T01:35:02Z</updated>
    <id>tag:github.com,2024-03-27:/worldcoin/orb-software</id>
    <link href="https://github.com/worldcoin/orb-software" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Software for the orb&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;orb-software&lt;/h1&gt; &#xA;&lt;p&gt;Open source software for &lt;a href=&#34;https://worldcoin.org/blog/engineering/opening-orb-look-inside-worldcoin-biometric-imaging-device&#34;&gt;the orb&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/worldcoin/orb-software/main/docs/orb-wireframe.png&#34; alt=&#34;A wireframe expansion of the orb&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Repository structure&lt;/h2&gt; &#xA;&lt;p&gt;For the most part, every toplevel directory is a separate software component. We also link to some other public repositories, to provide a unified view of the orb&#39;s software. The most important applications on the orb are as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/worldcoin/orb-software/main/orb-attest&#34;&gt;orb-attest&lt;/a&gt;: Talks with the secure element to generate an attestation token for the signup backend service.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/worldcoin/orb-core&#34;&gt;orb-core&lt;/a&gt;: The core signup logic and sensor management of the orb.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/worldcoin/orb-firmware&#34;&gt;orb-firmware&lt;/a&gt;: The firmware for the orb&#39;s microcontrollers (MCUs). This excludes the firmware that runs on the security MCU.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/worldcoin/orb-messages&#34;&gt;orb-messages&lt;/a&gt;: Schemas for messages sent between the Jetson and the MCU.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/worldcoin/orb-secure-element&#34;&gt;orb-secure-element&lt;/a&gt;: Code that interacts with the orb&#39;s secure element - a dedicated security hardened chip that provides a hardware root of trust. Provides important signing functionality.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/worldcoin/orb-software/main/orb-ui&#34;&gt;orb-ui&lt;/a&gt;: Daemon that manages the UI/UX of the orb.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/worldcoin/open-iris&#34;&gt;open-iris&lt;/a&gt;: The iris recognition inference system.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We plan to accept contributions at a later date, but do not have bandwidth to review PRs currently.&lt;/p&gt; &#xA;&lt;p&gt;Likewise, we are providing this source code for the benefit of the community, but cannot commit to any SemVer or API stability guarantees. Be warned: we may change things in a backwards-incompatible way at any time!&lt;/p&gt; &#xA;&lt;h3&gt;Coding Guidelines&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Code must pass CI - see the github actions workflow for the most up to date checks.&lt;/li&gt; &#xA; &lt;li&gt;There can be no copyleft or closed source dependencies.&lt;/li&gt; &#xA; &lt;li&gt;Prefer using cargo &lt;a href=&#34;https://doc.rust-lang.org/cargo/reference/workspaces.html#the-package-table&#34;&gt;workspace inheritance&lt;/a&gt; when possible.&lt;/li&gt; &#xA; &lt;li&gt;Prefer cross-platform code. Please consult &lt;a href=&#34;https://raw.githubusercontent.com/worldcoin/orb-software/main/deps-tests&#34;&gt;deps tests&lt;/a&gt; for more info.&lt;/li&gt; &#xA; &lt;li&gt;Any binaries that do not run on all platforms must be documented as such in their README.md file and added to the tests in &lt;code&gt;deps-tests&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;#![forbid(unsafe_code)]&lt;/code&gt; whenever possible. This narrows the surface area for debugging memory safety issues.&lt;/li&gt; &#xA; &lt;li&gt;Prefer the &lt;a href=&#34;https://docs.rs/nix&#34;&gt;nix crate&lt;/a&gt; for safe unix APIs instead of raw unsafe libc. PRs that use &lt;code&gt;libc&lt;/code&gt; will be rejected if an equivalent safe function in &lt;code&gt;nix&lt;/code&gt; exists.&lt;/li&gt; &#xA; &lt;li&gt;PR names and the final squashed commit that gets merged, should start with an area prefix, like &lt;code&gt;ir-camera:&lt;/code&gt;. This helps disambigutate which part of the monorepo changed at a glance.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;First time Setup&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nixos.org/download.html&#34;&gt;Install nix&lt;/a&gt;. This works for both mac and linux, windows is not supported.&lt;/li&gt; &#xA; &lt;li&gt;Ensure that you have these lines in your &lt;code&gt;~/.config/nix/nix.conf&lt;/code&gt;: &lt;code&gt;experimental-features = nix-command flakes max-jobs = auto&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install direnv: &lt;code&gt;nix profile install nixpkgs#direnv&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://direnv.net/docs/hook.html&#34;&gt;Hook direnv&lt;/a&gt; into your shell.&lt;/li&gt; &#xA; &lt;li&gt;Tell direnv to use the nix flake with &lt;code&gt;cp .envrc.example .envrc&lt;/code&gt;. You can customize this file if you wish. We recommend filling in your cachix token if you have one.&lt;/li&gt; &#xA; &lt;li&gt;Follow the instructions on vendoring proprietary SDKs in the subsequent section.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;direnv allow&lt;/code&gt; in the repository&#39;s root directory.&lt;/li&gt; &#xA; &lt;li&gt;If you are on macos, run the following: &lt;code&gt;brew install dbus brew services start dbus&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Vendoring Proprietary SDKs&lt;/h3&gt; &#xA;&lt;p&gt;Although all of Worldcoin&#39;s code in this repo is open source, some of the sensors on the orb rely on proprietary SDKs provided by their hardware vendors. Luckily, these are accessible without any cost.&lt;/p&gt; &#xA;&lt;p&gt;To get started, you will need to download these SDKs. The process for this depends on if you are officially affiliated with Worldcoin.&lt;/p&gt; &#xA;&lt;h4&gt;If you have access to Worldcoin private repos&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a &lt;a href=&#34;https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#creating-a-fine-grained-personal-access-token&#34;&gt;personal access token&lt;/a&gt; from github to allow you to use private git repos over HTTPS.&lt;/li&gt; &#xA; &lt;li&gt;Append the following to your &lt;code&gt;~/.config/nix/nix.conf&lt;/code&gt;: &lt;pre&gt;&lt;code&gt;access-tokens = github.com=github_pat_YOUR_ACCESS_TOKEN_HERE&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Test everything works so far by running &lt;code&gt;nix flake metadata github:worldcoin/priv-orb-core&lt;/code&gt;. You should see a tree of info. If not, you probably don&#39;t have your personal access token set up right - post in #public-orb-software on slack for help.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;If you don&#39;t have access to Worldcoin private repos&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://developer.thermal.com&#34;&gt;https://developer.thermal.com&lt;/a&gt; and create a developer account.&lt;/li&gt; &#xA; &lt;li&gt;Download the 4.1.0.0 version of the SDK (its in the developer forums).&lt;/li&gt; &#xA; &lt;li&gt;Extract its contents, and note down the dir that &lt;em&gt;contains&lt;/em&gt; the &lt;code&gt;Seek_Thermal_SDK_4.1.0.0&lt;/code&gt; dir. Save this in an environment variable of your choice, such as &lt;code&gt;SEEK_SDK_OVERRIDE&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;modify your &lt;code&gt;.envrc&lt;/code&gt; like this: &lt;code&gt;use flake --override-input seekSdk &#34;$SEEK_SDK_OVERRIDE&#34;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;We use &lt;code&gt;cargo zigbuild&lt;/code&gt; for most things. The following cross-compiles a binary in the &lt;code&gt;foobar&lt;/code&gt; crate to the orb:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo zigbuild --target aarch64-unknown-linux-gnu --release -p foobar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Unless otherwise specified, all code in this repository is dual-licensed under either:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MIT License (&lt;a href=&#34;https://raw.githubusercontent.com/worldcoin/orb-software/main/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Apache License, Version 2.0, with LLVM Exceptions (&lt;a href=&#34;https://raw.githubusercontent.com/worldcoin/orb-software/main/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;at your option. This means you may select the license you prefer to use.&lt;/p&gt; &#xA;&lt;p&gt;Any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.&lt;/p&gt;</summary>
  </entry>
</feed>