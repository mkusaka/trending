<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-23T01:38:02Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>stellar-amenities/assistants</title>
    <updated>2023-12-23T01:38:02Z</updated>
    <id>tag:github.com,2023-12-23:/stellar-amenities/assistants</id>
    <link href="https://github.com/stellar-amenities/assistants" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The ‚≠êÔ∏è Open Source Assistants API allows you to build AI assistants within your own applications with your own models. 75% Cheaper &amp; 23x Faster Assistants. Same API/SDK.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;600&#34; alt=&#34;assistants&#34; src=&#34;https://github.com/stellar-amenities/assistants/assets/25003283/77d78c9a-cc44-492a-b085-8f22e9d5e4ef&#34;&gt; &lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt;‚≠êÔ∏è Open Source Assistants API&lt;/h1&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;Build Powerful AI Assistants In-House, On Your Terms&lt;/h2&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt;75% Cheaper &amp;amp; 23x Faster Assistants. Same API/SDK.&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://codespaces.new/stellar-amenities/assistants?quickstart=1&#34;&gt;&lt;img src=&#34;https://github.com/codespaces/badge.svg?sanitize=true&#34; alt=&#34;Open in GitHub Codespaces&#34; style=&#34;max-width: 100%;&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://discord.gg/pj5VRqqs84&#34;&gt;&lt;img alt=&#34;Join Discord&#34; src=&#34;https://img.shields.io/discord/1066022656845025310?color=blue&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&lt;hr&gt; &#xA;&lt;a href=&#34;https://cal.com/louis030195/unleash-llms&#34;&gt;üìû Need Support? We&#39;re here for you.&lt;/a&gt; &#xA;&lt;br&gt; &#xA;&lt;a href=&#34;https://link.excalidraw.com/readonly/YSE7DNzB2LmEPfVdCqq3&#34;&gt;üñºÔ∏è How it Works ‚Äì Visual Guide&lt;/a&gt; &#xA;&lt;br&gt; &#xA;&lt;a href=&#34;https://github.com/stellar-amenities/assistants/issues/new?assignees=&amp;amp;labels=enhancement&#34;&gt;‚ú® Suggest a Feature&lt;/a&gt; &#xA;&lt;br&gt; &#xA;&lt;a href=&#34;https://github.com/stellar-amenities/assistants/issues/new?assignees=&amp;amp;labels=bug&#34;&gt;‚ù§Ô∏è‚Äçü©π Found a Bug? Let us know.&lt;/a&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Quickstart&lt;/h1&gt; &#xA;&lt;p&gt;Get started in less than a minute through GitHub Codespaces:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codespaces.new/stellar-amenities/assistants?quickstart=1&#34;&gt;&lt;img src=&#34;https://github.com/codespaces/badge.svg?sanitize=true&#34; alt=&#34;Open in GitHub Codespaces&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Why Open Source Assistants API?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Full Control&lt;/strong&gt;: Own your data, your models, and your destiny.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;No Hidden Costs&lt;/strong&gt;: Absolutely free. Seriously, no strings attached.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Customizable&lt;/strong&gt;: Tailor the AI to your specific needs and use cases.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Offline Capabilities&lt;/strong&gt;: Perfect for edge cases or internet-free zones.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OpenAI Compatibility&lt;/strong&gt;: Love OpenAI&#39;s API? We play nice with that too.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simplicity&lt;/strong&gt;: Easy setup, no steep learning curve.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What&#39;s Cooking? ‚Äì Latest News&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[2023/08/19] üî• New example: Open source LLM with code interpreter. &lt;a href=&#34;https://raw.githubusercontent.com/stellar-amenities/assistants/main/examples/hello-world-code-interpreter-mixtral-nodejs/README.md&#34;&gt;Learn more&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;[2023/08/12] üî• New example: Open source LLM with function calling. &lt;a href=&#34;https://raw.githubusercontent.com/stellar-amenities/assistants/main/examples/hello-world-intel-neural-chat-nodejs-function-calling/README.md&#34;&gt;Learn more&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;[2023/29/11] üî• New example: Using mistral-7b, an open source LLM. &lt;a href=&#34;https://raw.githubusercontent.com/stellar-amenities/assistants/main/examples/hello-world-mistral-curl/README.md&#34;&gt;Check it out&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Code Interpreter&lt;/strong&gt;: Runs Python code in a sandboxed environment. (Beta)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Knowledge Retrieval&lt;/strong&gt;: Retrieves external knowledge or documents.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Function Calling&lt;/strong&gt;: Defines and executes custom functions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;File Handling&lt;/strong&gt;: Supports a range of file formats.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Multimodal&lt;/strong&gt;: Supports audio, images, and text. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; image audio text&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; audio text&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; image text (soon)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; text&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What can you build with Assistants?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ai.stellaramenities.space&#34;&gt;Perplexity for Astronauts: Stellar Amenities uses Assistants to let the LLM automatically find the right information on the spacecraft to help Astronauts&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Join the Movement&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;For Developers&lt;/strong&gt;: We&#39;ve got the docs, tools, and a community ready to help you build what&#39;s next.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;For Innovators&lt;/strong&gt;: Looking for an edge in AI? Here&#39;s where you leapfrog the competition.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;For the Visionaries&lt;/strong&gt;: Dreamt of a custom AI assistant? Let&#39;s make it a reality.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Deployment&lt;/h2&gt; &#xA;&lt;p&gt;Please follow &lt;a href=&#34;https://github.com/stellar-amenities/assistants/raw/main/ee/k8s/README.md&#34;&gt;this documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;What&#39;s the difference with LangChain?&lt;/summary&gt; LangChain offers detailed control over AI conversations, while OpenAI&#39;s Assistants API simplifies the process, managing conversation history, data/vector store, and tool switching for you. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Are you related to OpenAI?&lt;/summary&gt; No. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;I don&#39;t use Assistants API. Can I use this?&lt;/summary&gt; We recommend switching to the Assistants API for a more streamlined experience, allowing you to focus more on your product than on infrastructure. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Does the Assistants API support audio and images?&lt;/summary&gt; Images soon, working on it. Audio in a few weeks. &#xA;&lt;/details&gt;</summary>
  </entry>
  <entry>
    <title>GoXLR-on-Linux/goxlr-utility</title>
    <updated>2023-12-23T01:38:02Z</updated>
    <id>tag:github.com,2023-12-23:/GoXLR-on-Linux/goxlr-utility</id>
    <link href="https://github.com/GoXLR-on-Linux/goxlr-utility" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An unofficial GoXLR App replacement for Linux, Windows and MacOS&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://discord.gg/BRBjkkbvmZ&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1124010710138106017.svg?label=Discord&amp;amp;logo=Discord&amp;amp;colorB=7289da&amp;amp;style=flat&#34; alt=&#34;Support Server&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://github.com/goxlr-on-linux/goxlr-utility/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/tag/goxlr-on-linux/goxlr-utility?label=Latest&#34; alt=&#34;GitHub tag (latest SemVer pre-release)&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/goxlr-on-linux/goxlr-utility/build.yml&#34; alt=&#34;GitHub Workflow Status (with event)&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;GoXLR Configuration Utility&lt;/h2&gt; &#xA;&lt;p&gt;An unofficial tool to configure and control a TC-Helicon GoXLR or GoXLR Mini on Linux, MacOS and Windows. &lt;a href=&#34;https://discord.gg/BRBjkkbvmZ&#34;&gt;Click Here&lt;/a&gt; to join our discord!&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Full control over the GoXLR and GoXLR Mini (Similar to the official App)&lt;/li&gt; &#xA; &lt;li&gt;Compatibility with profiles created by the official application&lt;/li&gt; &#xA; &lt;li&gt;An accessible UI designed to work well with Assistive Technologies&lt;/li&gt; &#xA; &lt;li&gt;Remote Access. Control your GoXLR from another computer on your network&lt;/li&gt; &#xA; &lt;li&gt;A Sample &#39;Pre-Buffer&#39;. Record audio from before you press the button&lt;/li&gt; &#xA; &lt;li&gt;Exit Actions, including saving profiles and loading other profiles / lighting&lt;/li&gt; &#xA; &lt;li&gt;Multiple Device Support. Run more than one GoXLR on one PC&lt;/li&gt; &#xA; &lt;li&gt;A CLI and API for basic or advanced scripting and automation&lt;/li&gt; &#xA; &lt;li&gt;Streamdeck Integration (through &lt;a href=&#34;https://github.com/FrostyCoolSlug/goxlr-utility-streamdeck&#34;&gt;https://github.com/FrostyCoolSlug/goxlr-utility-streamdeck&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Downloads&lt;/h2&gt; &#xA;&lt;p&gt;Downloads are available on the &lt;a href=&#34;https://github.com/GoXLR-on-Linux/goxlr-utility/releases/latest&#34;&gt;Releases Page&lt;/a&gt; under the &#39;Assets&#39; header, we currently provide the following files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;.exe&lt;/code&gt; files, usable on Windows&lt;sup&gt;1&lt;/sup&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.deb&lt;/code&gt; files, usable on Debian based systems (Ubuntu, Mint, Pop!_OS, etc)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.rpm&lt;/code&gt; files, usable on Redhat based systems (CentOS, Fedora, etc)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;re an Arch user, updated versions of the utility are available via &lt;a href=&#34;https://aur.archlinux.org/packages/goxlr-utility&#34;&gt;AUR&lt;/a&gt; using the &lt;code&gt;goxlr-utility&lt;/code&gt; package.&lt;br&gt; If you&#39;re a MacOS user, check out the &lt;a href=&#34;https://github.com/Adelenade/GoXlr-Macos&#34;&gt;MacOS Project&lt;/a&gt; for a more integrated implementation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; Windows requires the official device drivers provided by TC-Helicon. If you have the official app installed you don&#39;t need to do anything, otherwise download the latest drivers from TC-Helicon&#39;s website &lt;a href=&#34;https://go.tc-helicon.com/GoXLR_driver_5.12&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Once installed, you can launch the Utility using the &lt;code&gt;GoXLR Utility&lt;/code&gt; item in your Applications Menu, this will launch the utility and configuration UI. The UI will then be accessible via the system tray icon, or (if you don&#39;t have a tray) by re-running the &lt;code&gt;GoXLR Utility&lt;/code&gt; menu item.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re running on Linux, a first configuration step should be to enable &lt;code&gt;Autostart on Login&lt;/code&gt; via System -&amp;gt; Settings. Windows users will get the choice during installation. If you change your mind, you can change the setting.&lt;/p&gt; &#xA;&lt;p&gt;If you want to import your profiles from the official app, simply click on the folder icon in the top right of the relevant profiles pane (either Main or Mic) which will open the directory in your file browser. Copy the profile across from the Official App&#39;s directory (normally &lt;code&gt;Documents/GoXLR&lt;/code&gt;) and they&#39;ll appear in the util ready to load, simply double click them.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re setting up from scratch, the best place to start is configuring your microphone. Head over to the &lt;code&gt;Mic&lt;/code&gt; tab and hit &lt;code&gt;Mic Setup&lt;/code&gt; to configure your microphone type and gain. It may be easier to configure if you first set your Gate Amount to 0, then reconfigure it once your mic is working. Once done, go explore the UI!&lt;/p&gt; &#xA;&lt;h2&gt;The UI&lt;/h2&gt; &#xA;&lt;p&gt;The Utility&#39;s UI is web based, and served directly from the utility to your web browser of choice (if configured, it can also be served to a web browser on another computer). The UI design was modelled around the official application in an attempt to provide a familiar interface for those moving from Windows to other platforms, rather than forcing people to learn a new configuration paradigm.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/574943/255011559-90e69f0d-a42b-4be6-8d99-9e5da1a4df2c.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;Build instructions and other useful information can be found on the project&#39;s &lt;a href=&#34;https://github.com/GoXLR-on-Linux/goxlr-utility/wiki/Compilation-Guide&#34;&gt;wiki&lt;/a&gt;. While it&#39;s a little sparse at the moment, over time it should grow, and requests / feedback are always welcome!&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This project is also not supported by, or affiliated in any way with, TC-Helicon. For the official GoXLR software, please refer to their website.&lt;/p&gt; &#xA;&lt;p&gt;In addition, this project accepts no responsibility or liability for use of this software, or any problems which may occur from its use. Please read the &lt;a href=&#34;https://github.com/GoXLR-on-Linux/goxlr-utility/raw/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>astriaorg/astria</title>
    <updated>2023-12-23T01:38:02Z</updated>
    <id>tag:github.com,2023-12-23:/astriaorg/astria</id>
    <link href="https://github.com/astriaorg/astria" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A monorepo containing all the custom components of the Astria network, a decentralized system that replaces traditional sequencers, offering a shared, permissionless sequencer network.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Astria&lt;/h1&gt; &#xA;&lt;p&gt;Astria replaces centralized sequencers, allowing many rollups to share a single decentralized network of sequencers that‚Äôs simple and permissionless to join. This shared sequencer network provides out-of-the-box censorship resistance, fast block confirmations, and atomic cross-rollup composability ‚Äì all while retaining each rollup‚Äôs sovereignty.&lt;/p&gt; &#xA;&lt;p&gt;This repository contains the custom Astria components that make up the Astria network. Other components of the Astria network can be found in the &lt;a href=&#34;https://github.com/astriaorg&#34;&gt;astriaorg&lt;/a&gt; organization.&lt;/p&gt; &#xA;&lt;p&gt;To run locally, we utilize a dev-cluster which can be found at &lt;a href=&#34;https://github.com/astriaorg/dev-cluster&#34;&gt;astriaorg/dev-cluster&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To learn more about Astria, please visit &lt;a href=&#34;https://astria.org&#34;&gt;astria.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Components&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/astriaorg/astria/tree/main/crates/astria-conductor&#34;&gt;conductor&lt;/a&gt;: conducts blocks from the data availability layer to the execution layer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/astriaorg/astria/tree/main/crates/astria-proto&#34;&gt;proto&lt;/a&gt;: relevant protobufs for Astria types.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/astriaorg/astria/tree/main/crates/astria-sequencer&#34;&gt;sequencer&lt;/a&gt;: ABCI application that defines the sequencer state transition logic.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/astriaorg/astria/tree/main/crates/astria-sequencer-relayer&#34;&gt;sequencer-relayer&lt;/a&gt;: relays blocks from the sequencer chain to the data availability layer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;To build the relevant Astria binaries, you only need &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;Rust&lt;/a&gt; installed.&lt;/p&gt; &#xA;&lt;p&gt;Then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/astriaorg/astria.git&#xA;cd astria&#xA;cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker build&lt;/h3&gt; &#xA;&lt;p&gt;To build a docker image locally you will first need docker installed. With docker installed you can use the following just command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Full command:&#xA;just docker-build &amp;lt;CRATE&amp;gt; &amp;lt;TAG=local&amp;gt;&#xA;#&#xA;# Replace CRATE with what the target binary is ie `astria-sequencer`&#xA;# TAG defaults to `local` but can be changed.&#xA;&#xA;# this command will build a local image tagged as &#39;astria-sequencer:local&#39; &#xA;just docker-build astria-sequencer&#xA;&#xA;# this command will build a local image tagged as &#39;astria-sequencer:debug&#39; &#xA;just docker-build astria-sequencer debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running locally&lt;/h2&gt; &#xA;&lt;p&gt;The entire stack consists of many different binaries. It&#39;s recommended to use the setup located in &lt;a href=&#34;https://github.com/astriaorg/dev-cluster&#34;&gt;astriaorg/dev-cluster&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;To run unit tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;astria-proto&lt;/code&gt; generates its code by running tests (and verifying that nothing changed). In order for its tests to run you also need &lt;a href=&#34;https://buf.build/docs/installation/&#34;&gt;Buf&lt;/a&gt; installed.&lt;/p&gt; &#xA;&lt;h2&gt;Formatting&lt;/h2&gt; &#xA;&lt;p&gt;This project uses &lt;a href=&#34;https://github.com/rust-lang/rustfmt&#34;&gt;rustfmt&lt;/a&gt; to format rust sources, &lt;a href=&#34;https://github.com/tamasfe/taplo&#34;&gt;taplo&lt;/a&gt; to format toml files, and &lt;a href=&#34;https://github.com/DavidAnson/markdownlint-cli2&#34;&gt;markdownlint-cli2&lt;/a&gt; for markdown.&lt;/p&gt; &#xA;&lt;h3&gt;Rust&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Install rustfmt&#xA;rustup +nightly-2023-08-18 component add rustfmt&#xA;# Run rustfmt&#xA;just fmt rust&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Toml&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Install for macOS&#xA;brew install taplo&#xA;# Install for Arch Linux&#xA;sudo pacman -S taplo&#xA;&#xA;# Run&#xA;just fmt toml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Markdown&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Install for macOS w/ homebrew&#xA;brew install markdownlint-cli2&#xA;# Install for Arch Linux&#xA;sudo pacman -S markdownlint-cli2&#xA;# Install with NPM&#xA;npm install markdownlint-cli2 --global&#xA;&#xA;# Run&#xA;just lint md&#xA;&#xA;# Run with docker&#xA;docker run -v $PWD:/workdir davidanson/markdownlint-cli2:v0.8.1 &#34;**/*.md&#34; &#34;#.github&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests should be created against the &lt;code&gt;main&lt;/code&gt; branch. In general, we follow the &#34;fork-and-pull&#34; Git workflow.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork the repo on GitHub&lt;/li&gt; &#xA; &lt;li&gt;Clone the project to your own machine&lt;/li&gt; &#xA; &lt;li&gt;Commit changes to your own branch&lt;/li&gt; &#xA; &lt;li&gt;Push your work back up to your fork&lt;/li&gt; &#xA; &lt;li&gt;Submit a Pull request so that we can review your changes&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;NOTE: Be sure to merge the latest from upstream before making a pull request!&lt;/p&gt; &#xA;&lt;h2&gt;Issues&lt;/h2&gt; &#xA;&lt;p&gt;If you encounter any issues while using this project or have any questions, please open an issue in this repository &lt;a href=&#34;https://github.com/astriaorg/astria/issues&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>