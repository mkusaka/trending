<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-09T01:43:51Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kawasin73/prsqlite</title>
    <updated>2023-08-09T01:43:51Z</updated>
    <id>tag:github.com,2023-08-09:/kawasin73/prsqlite</id>
    <link href="https://github.com/kawasin73/prsqlite" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Pure Rust implementation of SQLite&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;prsqlite - Pure Rust SQLite&lt;/h1&gt; &#xA;&lt;p&gt;Pure Rust implementation of &lt;a href=&#34;https://www.sqlite.org/index.html&#34;&gt;SQLite&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is WIP and my hobby project.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Compatible with database file generated by sqlite3 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;prsqlite uses the SQLite &lt;a href=&#34;https://www.sqlite.org/fileformat2.html#b_tree_pages&#34;&gt;Database File Format&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Support SQL syntax which SQLite supports &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;See &lt;a href=&#34;https://www.sqlite.org/lang.html&#34;&gt;SQL As Understood By SQLite&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Some syntax is not implemented yet.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Zero dependency &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;except dev-dependency.&lt;/li&gt; &#xA;   &lt;li&gt;While developing as WIP, prsqlite is using &lt;code&gt;anyhow&lt;/code&gt; for development velocity. It will be replaced with a proprietary errors in the future.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Validating file format &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;prsqlite does not trust the file is valid unlike sqlite3 and validates pages in the file while parsing.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;trust-file&lt;/code&gt; feature will be added to disable the file validation.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;No unsafe &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Will be supported in the future.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;NOTE: This repository is not stable yet. I may force-push commit tree even on the main branch.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/kawasin73/prsqlite/main/tests/integration_test.rs&#34;&gt;integration_test.rs&lt;/a&gt; for what prsqlite supports.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;prsqlite::Connection::open()&lt;/code&gt; is the entrypoint interface for library users.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rs&#34;&gt;use std::path::Path;&#xA;&#xA;use prsqlite::Connection;&#xA;use prsqlite::NextRow;&#xA;use prsqlite::Value;&#xA;&#xA;let mut conn = Connection::open(Path::new(&#34;path/to/sqlite.db&#34;)).unwrap();&#xA;let mut stmt = conn.prepare(&#34;SELECT * FROM example WHERE col = 1;&#34;).unwrap();&#xA;let mut rows = stmt.execute().unwrap();&#xA;&#xA;let row = rows.next_row().unwrap().unwrap();&#xA;let columns = row.parse().unwrap();&#xA;assert_eq!(columns.get(0), &amp;amp;Value::Integer(1));&#xA;drop(row);&#xA;&#xA;assert!(rows.next().unwrap().is_none());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;prsqlite provides REPL command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/kawasin73/prsqlite.git&#xA;&#xA;$ cd ./prsqlite&#xA;&#xA;$ sqlite3 tmp/sqlite.db&#xA;sqlite&amp;gt; CREATE TABLE example(col1, col2 integer);&#xA;sqlite&amp;gt; CREATE INDEX i_example ON example(col2);&#xA;sqlite&amp;gt; INSERT INTO example(col1, col2) values(null, 1);&#xA;sqlite&amp;gt; INSERT INTO example(col1, col2) values(10, 2);&#xA;sqlite&amp;gt; INSERT INTO example(col1, col2) values(1.1, 3);&#xA;sqlite&amp;gt; INSERT INTO example(col1, col2) values(&#39;Hello prsqlite!&#39;, 4);&#xA;sqlite&amp;gt; INSERT INTO example(col1, col2) values(X&#39;707273716c697465&#39;, 5);&#xA;sqlite&amp;gt; .quit&#xA;&#xA;$ cargo build &amp;amp;&amp;amp; ./target/debug/prsqlite tmp/sqlite.db&#xA;prsqlite&amp;gt; SELECT * FROM sqlite_schema;&#xA;table|example|example|2|CREATE TABLE example(col1, col2 integer)&#xA;index|i_example|example|3|CREATE INDEX i_example ON example(col2)&#xA;prsqlite&amp;gt; SELECT * FROM example;&#xA;|1&#xA;10|2&#xA;1.1|3&#xA;Hello prsqlite!|4&#xA;prsqlite|5&#xA;prsqlite&amp;gt; SELECT col1 FROM example WHERE col2 == 4;&#xA;Hello prsqlite!&#xA;prsqlite&amp;gt; .quit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/kawasin73/prsqlite/main/CONTRIBUTING.md&#34;&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Apache 2.0; see &lt;a href=&#34;https://raw.githubusercontent.com/kawasin73/prsqlite/main/LICENSE&#34;&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This project is not an official Google project. It is not supported by Google and Google specifically disclaims all warranties as to its quality, merchantability, or fitness for a particular purpose.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>supabase/postgres_lsp</title>
    <updated>2023-08-09T01:43:51Z</updated>
    <id>tag:github.com,2023-08-09:/supabase/postgres_lsp</id>
    <link href="https://github.com/supabase/postgres_lsp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Language Server for Postgres&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/supabase/postgres_lsp/main/docs/images/pls-github.png&#34; alt=&#34;Postgres Language Server&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Postgres Language Server&lt;/h1&gt; &#xA;&lt;p&gt;A Language Server for Postgres. Not SQL with flavors, just Postgres.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;ðŸš§ This is in active development and is only ready for collaborators. The majority of work is still ahead, but we&#39;ve verified that the approach works. We&#39;re making this public so that we can develop it in the open with input from the community.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/&#34;&gt;Language Server Protocol&lt;/a&gt; is an open protocol between code editors and servers to provide code intelligence tools such as code completion and syntax highlighting. This project implements such a language server for Postgres, significantly enhancing the developer experience within your favorite editor by adding:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Semantic Highlighting&lt;/li&gt; &#xA; &lt;li&gt;Syntax Error Diagnostics&lt;/li&gt; &#xA; &lt;li&gt;Show SQL comments on hover&lt;/li&gt; &#xA; &lt;li&gt;Auto-Completion&lt;/li&gt; &#xA; &lt;li&gt;Code actions such as &lt;code&gt;Execute the statement under the cursor&lt;/code&gt;, or &lt;code&gt;Execute the current file&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Configurable Code Formatting&lt;/li&gt; &#xA; &lt;li&gt;... and many more&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;Despite the rising popularity of Postgres, support for the PL/pgSQL in IDEs and editors is limited. While there are some &lt;em&gt;generic&lt;/em&gt; SQL Language Servers[^1] offering the Postgres syntax as a &#34;flavor&#34; within the parser, they usually fall short due to the ever-evolving and complex syntax of PostgreSQL. There are a few proprietary IDEs[^2] that work well, but the features are only available within the respective IDE.&lt;/p&gt; &#xA;&lt;p&gt;This Language Server is designed to support Postgres, and only Postgres. The server uses &lt;a href=&#34;https://github.com/pganalyze/libpg_query&#34;&gt;libpg_query&lt;/a&gt;, therefore leveraging the PostgreSQL source to parse the SQL code reliably. Using Postgres within a Language Server might seem unconventional, but it&#39;s the only reliable way of parsing all valid PostgreSQL queries. You can find a longer rationale on why This is the Wayâ„¢ &lt;a href=&#34;https://pganalyze.com/blog/parse-postgresql-queries-in-ruby&#34;&gt;here&lt;/a&gt;. While libpg_query was built to execute SQL, and not to build a language server, any shortcomings have been successfully mitigated in the &lt;code&gt;parser&lt;/code&gt; crate. You can read the &lt;a href=&#34;https://raw.githubusercontent.com/supabase/postgres_lsp/main/crates/parser/src/lib.rs&#34;&gt;commented source code&lt;/a&gt; for more details on the inner workings of the parser.&lt;/p&gt; &#xA;&lt;p&gt;Once the parser is stable, and a robust and scalable data model is implemented, the language server will not only provide basic features such as semantic highlighting, code completion and syntax error diagnostics, but also serve as the user interface for all the great tooling of the Postgres ecosystem.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;This is a proof of concept for building both a concrete syntax tree and an abstract syntax tree from a potentially malformed PostgreSQL source code. The &lt;code&gt;postgres_lsp&lt;/code&gt; crate was created to prove that it works end-to-end, and is just a very basic language server with semantic highlighting and error diagnostics. Before further feature development, we have to complete a bit of groundwork:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;em&gt;Finish the parser&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The parser works, but the enum values for all the different syntax elements and internal conversations are manually written or copied, and, in some places, only cover a few elements required for a simple select statement. To have full coverage without possibilities for a copy and paste error, they should be generated from &lt;code&gt;pg_query.rs&lt;/code&gt; source code. (&lt;a href=&#34;https://github.com/supabase/postgres_lsp/pull/4&#34;&gt;#4&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;There are a few cases such as nested and named dollar quoted strings that cause the parser to fail due to limitations of the regex-based lexer. Nothing that is impossible to fix, or requires any fundamental change in the parser though.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Implement a robust and scalable data model&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This is still in a research phase&lt;/li&gt; &#xA;   &lt;li&gt;A great rationale on the importance of the data model in a language server can be found &lt;a href=&#34;https://matklad.github.io/2023/05/06/zig-language-server-and-cancellation.html&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;rust-analyzer&lt;/code&gt;s &lt;a href=&#34;https://github.com/rust-lang/rust-analyzer/tree/master/crates/base-db&#34;&gt;&lt;code&gt;base-db&lt;/code&gt; crate&lt;/a&gt; will serve as a role model&lt;/li&gt; &#xA;   &lt;li&gt;The &lt;a href=&#34;https://github.com/salsa-rs/salsa&#34;&gt;&lt;code&gt;salsa&lt;/code&gt;&lt;/a&gt; crate will most likely be the underlying data structure&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Setup the language server properly&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This is still in a research phase&lt;/li&gt; &#xA;   &lt;li&gt;Once again &lt;code&gt;rust-analyzer&lt;/code&gt; will serve as a role model, and we will most likely implement the same queueing and cancellation approach&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Implement basic language server features&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Semantic Highlighting&lt;/li&gt; &#xA;   &lt;li&gt;Syntax Error Diagnostics&lt;/li&gt; &#xA;   &lt;li&gt;Show SQL comments on hover&lt;/li&gt; &#xA;   &lt;li&gt;Auto-Completion&lt;/li&gt; &#xA;   &lt;li&gt;Code Actions, such as &lt;code&gt;Execute the statement under the cursor&lt;/code&gt;, or &lt;code&gt;Execute the current file&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;... anything you can think of really&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Integrate all the existing open source tooling&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Show migration file lint errors from &lt;a href=&#34;https://github.com/sbdchd/squawk&#34;&gt;squawk&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Show plpsql lint errors from &lt;a href=&#34;https://github.com/okbob/plpgsql_check&#34;&gt;plpgsql_check&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Build missing pieces&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;An optionated code formatter (think prettier for PostgreSQL)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;(Maybe) Support advanced features with declarative schema management&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Jump to definition&lt;/li&gt; &#xA;   &lt;li&gt;... anything you can think of really&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] This is not ready for production use. Only install this if you want to help with development.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Neovim&lt;/h3&gt; &#xA;&lt;p&gt;Add the postgres_lsp executable to your path, and add the following to your config to use it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lspconfig.configs&#39;).postgres_lsp = {&#xA;  default_config = {&#xA;    name = &#39;postgres_lsp&#39;,&#xA;    cmd = {&#39;postgres_lsp&#39;},&#xA;    filetypes = {&#39;sql&#39;},&#xA;    single_file_support = true,&#xA;    root_dir = util.root_pattern &#39;root-file.txt&#39;&#xA;  }&#xA;}&#xA;&#xA;lsp.configure(&#34;postgres_lsp&#34;, {force_setup = true})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building from source&lt;/h3&gt; &#xA;&lt;p&gt;You&#39;ll need Cargo, Node, and npm installed.&lt;/p&gt; &#xA;&lt;p&gt;If you are using VS Code, you can install both the server and the client extension by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo xtask install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re not using VS Code, you can install the server by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo xtask install --server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The server binary will be installed in &lt;code&gt;.cargo/bin&lt;/code&gt;. Make sure that &lt;code&gt;.cargo/bin&lt;/code&gt; is in &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/psteinroe&#34;&gt;psteinroe&lt;/a&gt; (Maintainer)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rust-lang/rust-analyzer&#34;&gt;rust-analyzer&lt;/a&gt; for implementing such a robust, well documented, and feature-rich language server. Great place to learn from.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sbdchd/squawk&#34;&gt;squawk&lt;/a&gt; and &lt;a href=&#34;https://pganalyze.com&#34;&gt;pganalyze&lt;/a&gt; for inspiring the use of libpg_query.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Footnotes&lt;/h2&gt; &#xA;&lt;p&gt;[^1]: Generic SQL Solutions: &lt;a href=&#34;https://github.com/joe-re/sql-language-server&#34;&gt;sql-language-server&lt;/a&gt;, &lt;a href=&#34;https://github.com/darold/pgFormatter/tree/master&#34;&gt;pgFormatter&lt;/a&gt;, &lt;a href=&#34;https://github.com/nene/sql-parser-cst&#34;&gt;sql-parser-cst&lt;/a&gt; [^2]: Proprietary IDEs: &lt;a href=&#34;https://www.jetbrains.com/datagrip/&#34;&gt;DataGrip&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>