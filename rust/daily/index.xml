<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-14T01:36:52Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>utilForever/2023-MatKor-Rust-Interpreter</title>
    <updated>2023-08-14T01:36:52Z</updated>
    <id>tag:github.com,2023-08-14:/utilForever/2023-MatKor-Rust-Interpreter</id>
    <link href="https://github.com/utilForever/2023-MatKor-Rust-Interpreter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;2023년 고려대학교 MatKor 스터디 - Rust 기초 프로그래밍 + 인터프리터 만들기&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;2023-MatKor-Rust-Interpreter&lt;/h1&gt; &#xA;&lt;p&gt;2023-MatKor-Rust-Interpreter is the material(lecture notes, examples and assignments) repository for learning Rust programming language and making simple interpreter that I&#39;ll teach the club &#39;MatKor&#39; at Korea University in the spring of 2023.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Week 0 (3/16) &lt;a href=&#34;https://raw.githubusercontent.com/utilForever/2023-MatKor-Rust-Interpreter/main/1%20-%20Lecture/230316%20-%20Rust%20Basic%20%2B%20Make%20Interpreter%2C%20Week%200.pdf&#34;&gt;[Lecture]&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Introduction&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Week 1 (3/16) &lt;a href=&#34;https://raw.githubusercontent.com/utilForever/2023-MatKor-Rust-Interpreter/main/1%20-%20Lecture/230316%20-%20Rust%20Basic%20%2B%20Make%20Interpreter%2C%20Week%201.pdf&#34;&gt;[Lecture]&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/utilForever/2023-MatKor-Rust-Interpreter/main/3%20-%20Assignment/230316%20-%20Rust%20Basic%20%2B%20Make%20Interpreter%2C%20Week%201/&#34;&gt;[Assignment]&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/utilForever/2023-MatKor-Rust-Interpreter/main/4%20-%20Solution/230316%20-%20Rust%20Basic%20%2B%20Make%20Interpreter%2C%20Week%201/&#34;&gt;[Solution]&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A Tour of Rust, Part 1&lt;/li&gt; &#xA;   &lt;li&gt;Assignment #1&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Week 2 (3/23) &lt;a href=&#34;https://raw.githubusercontent.com/utilForever/2023-MatKor-Rust-Interpreter/main/1%20-%20Lecture/230323%20-%20Rust%20Basic%20%2B%20Make%20Interpreter%2C%20Week%202.pdf&#34;&gt;[Lecture]&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/utilForever/2023-MatKor-Rust-Interpreter/main/3%20-%20Assignment/230323%20-%20Rust%20Basic%20%2B%20Make%20Interpreter%2C%20Week%202/&#34;&gt;[Assignment]&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/utilForever/2023-MatKor-Rust-Interpreter/main/4%20-%20Solution/230323%20-%20Rust%20Basic%20%2B%20Make%20Interpreter%2C%20Week%202/&#34;&gt;[Solution]&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A Tour of Rust, Part 2&lt;/li&gt; &#xA;   &lt;li&gt;Assignment #2&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Week 3 (3/30) &lt;a href=&#34;https://raw.githubusercontent.com/utilForever/2023-MatKor-Rust-Interpreter/main/1%20-%20Lecture/230330%20-%20Rust%20Basic%20%2B%20Make%20Interpreter%2C%20Week%203.pdf&#34;&gt;[Lecture]&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/utilForever/2023-MatKor-Rust-Interpreter/main/3%20-%20Assignment/230330%20-%20Rust%20Basic%20%2B%20Make%20Interpreter%2C%20Week%203/&#34;&gt;[Assignment]&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/utilForever/2023-MatKor-Rust-Interpreter/main/4%20-%20Solution/230330%20-%20Rust%20Basic%20%2B%20Make%20Interpreter%2C%20Week%203/&#34;&gt;[Solution]&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A Tour of Rust, Part 3&lt;/li&gt; &#xA;   &lt;li&gt;Assignment #3&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Week 4 (4/6) &lt;a href=&#34;https://raw.githubusercontent.com/utilForever/2023-MatKor-Rust-Interpreter/main/1%20-%20Lecture/230406%20-%20Rust%20Basic%20%2B%20Make%20Interpreter%2C%20Week%204.pdf&#34;&gt;[Lecture]&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/utilForever/2023-MatKor-Rust-Interpreter/main/3%20-%20Assignment/230406%20-%20Rust%20Basic%20%2B%20Make%20Interpreter%2C%20Week%204/&#34;&gt;[Assignment]&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/utilForever/2023-MatKor-Rust-Interpreter/main/4%20-%20Solution/230406%20-%20Rust%20Basic%20%2B%20Make%20Interpreter%2C%20Week%204/&#34;&gt;[Solution]&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A Tour of Rust, Part 4&lt;/li&gt; &#xA;   &lt;li&gt;Assignment #4&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Week 5 (4/13) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A Tour of Rust, Part 5&lt;/li&gt; &#xA;   &lt;li&gt;Assignment #5&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Week 6 (5/11) &lt;a href=&#34;https://raw.githubusercontent.com/utilForever/2023-MatKor-Rust-Interpreter/main/2%20-%20Code/230511%20-%20Rust%20Basic%20%2B%20Make%20Interpreter%2C%20Week%206/&#34;&gt;[Code]&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/utilForever/2023-MatKor-Rust-Interpreter/main/3%20-%20Assignment/230511%20-%20Rust%20Basic%20%2B%20Make%20Interpreter%2C%20Week%206/&#34;&gt;[Assignment]&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/utilForever/2023-MatKor-Rust-Interpreter/main/4%20-%20Solution/230511%20-%20Rust%20Basic%20%2B%20Make%20Interpreter%2C%20Week%206/&#34;&gt;[Solution]&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Lexing &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Lexical Analysis&lt;/li&gt; &#xA;     &lt;li&gt;Defining Tokens&lt;/li&gt; &#xA;     &lt;li&gt;The Lexer&lt;/li&gt; &#xA;     &lt;li&gt;Extending our Token Set and Lexer&lt;/li&gt; &#xA;     &lt;li&gt;First REPL&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Assignment #6&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Week 7 (5/18) &lt;a href=&#34;https://raw.githubusercontent.com/utilForever/2023-MatKor-Rust-Interpreter/main/2%20-%20Code/230518%20-%20Rust%20Basic%20%2B%20Make%20Interpreter%2C%20Week%207/&#34;&gt;[Code]&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Parsing, Part 1 &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Parsers&lt;/li&gt; &#xA;     &lt;li&gt;Writing a Parser for the Monkey Programming Language&lt;/li&gt; &#xA;     &lt;li&gt;Parser&#39;s first step: Parsing let statements&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Week 8 (7/7) &lt;a href=&#34;https://raw.githubusercontent.com/utilForever/2023-MatKor-Rust-Interpreter/main/2%20-%20Code/230707%20-%20Rust%20Basic%20%2B%20Make%20Interpreter%2C%20Week%208/&#34;&gt;[Code]&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Parsing, Part 2 &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Parsing Return Statements&lt;/li&gt; &#xA;     &lt;li&gt;Parsing Expressions&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Week 9 (7/13) &lt;a href=&#34;https://raw.githubusercontent.com/utilForever/2023-MatKor-Rust-Interpreter/main/2%20-%20Code/230713%20-%20Rust%20Basic%20%2B%20Make%20Interpreter%2C%20Week%209/&#34;&gt;[Code]&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/utilForever/2023-MatKor-Rust-Interpreter/main/3%20-%20Assignment/230713%20-%20Rust%20Basic%20%2B%20Make%20Interpreter%2C%20Week%209/&#34;&gt;[Assignment]&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Parsing, Part 3 &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;How Pratt Parsing Works&lt;/li&gt; &#xA;     &lt;li&gt;Extending the Parser, Part 1&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Assignment #7&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Week 10 (7/23) &lt;a href=&#34;https://raw.githubusercontent.com/utilForever/2023-MatKor-Rust-Interpreter/main/2%20-%20Code/230723%20-%20Rust%20Basic%20%2B%20Make%20Interpreter%2C%20Week%2010/&#34;&gt;[Code]&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/utilForever/2023-MatKor-Rust-Interpreter/main/3%20-%20Assignment/230723%20-%20Rust%20Basic%20%2B%20Make%20Interpreter%2C%20Week%2010/&#34;&gt;[Assignment]&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Parsing, Part 4 &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Extending the Parser, Part 2&lt;/li&gt; &#xA;     &lt;li&gt;Read-Parse-Print-Loop&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Assignment #8&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Week 11 (7/27) &lt;a href=&#34;https://raw.githubusercontent.com/utilForever/2023-MatKor-Rust-Interpreter/main/2%20-%20Code/230727%20-%20Rust%20Basic%20%2B%20Make%20Interpreter%2C%20Week%2011/&#34;&gt;[Code]&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Evaluation, Part 1 &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Giving Meaning to Symbols&lt;/li&gt; &#xA;     &lt;li&gt;Strategies of Evaluation&lt;/li&gt; &#xA;     &lt;li&gt;A Tree-Walking Interpreter&lt;/li&gt; &#xA;     &lt;li&gt;Representing Objects &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;Foundation of Object System&lt;/li&gt; &#xA;       &lt;li&gt;Integers&lt;/li&gt; &#xA;       &lt;li&gt;Booleans&lt;/li&gt; &#xA;       &lt;li&gt;Null&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;Evaluating Expressions &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;Integer Literals&lt;/li&gt; &#xA;       &lt;li&gt;Completing the REPL&lt;/li&gt; &#xA;       &lt;li&gt;Boolean Literals&lt;/li&gt; &#xA;       &lt;li&gt;Null&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Week 12 (8/6) &lt;a href=&#34;https://raw.githubusercontent.com/utilForever/2023-MatKor-Rust-Interpreter/main/2%20-%20Code/230806%20-%20Rust%20Basic%20%2B%20Make%20Interpreter%2C%20Week%2012/&#34;&gt;[Code]&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Evaluation, Part 2 &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Evaluating Expressions &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;Prefix Expressions&lt;/li&gt; &#xA;       &lt;li&gt;Infix Expressions&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;Conditionals&lt;/li&gt; &#xA;     &lt;li&gt;Return Statements&lt;/li&gt; &#xA;     &lt;li&gt;Error Handling&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Week 13 (8/10) &lt;a href=&#34;https://raw.githubusercontent.com/utilForever/2023-MatKor-Rust-Interpreter/main/2%20-%20Code/230810%20-%20Rust%20Basic%20%2B%20Make%20Interpreter%2C%20Week%2013/&#34;&gt;[Code]&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Evaluation, Part 3 &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Bindings &amp;amp; The Environment&lt;/li&gt; &#xA;     &lt;li&gt;Functions &amp;amp; Function Calls&lt;/li&gt; &#xA;     &lt;li&gt;Who&#39;s taking the trash out?&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Beginner &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://doc.rust-lang.org/book/&#34;&gt;The Rust Programming Language&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/rust-lang/rustlings/&#34;&gt;Rustlings&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://doc.rust-lang.org/stable/rust-by-example/&#34;&gt;Rust By Example&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.ralfj.de/projects/rust-101/main.html&#34;&gt;Rust-101 by Ralf Jung&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://exercism.org/tracks/rust&#34;&gt;Exercism - Rust&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://www.yes24.com/Product/Goods/83075894&#34;&gt;Book: The Rust Programming Language&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.manning.com/books/rust-in-action&#34;&gt;Book: Rust in Action&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.oreilly.com/library/view/programming-rust-2nd/9781492052586/&#34;&gt;Book: Programming Rust&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Intermediate &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://doc.rust-lang.org/std/index.html&#34;&gt;The Standard Library&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://doc.rust-lang.org/edition-guide/index.html&#34;&gt;The Edition Guide&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://doc.rust-lang.org/cargo/index.html&#34;&gt;The Cargo Book&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://doc.rust-lang.org/rustdoc/index.html&#34;&gt;The rustdoc Book&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://doc.rust-lang.org/rustc/index.html&#34;&gt;The rustc Book&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://www.yes24.com/Product/Goods/108570426&#34;&gt;Book: Concurrent Programming&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://rust-for-rustaceans.com/&#34;&gt;Book: Rust for Rustaceans&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Advanced &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://doc.rust-lang.org/reference/index.html&#34;&gt;The Rust Reference&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://doc.rust-lang.org/nomicon/index.html&#34;&gt;The Rustonomicon&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://doc.rust-lang.org/nightly/unstable-book/index.html&#34;&gt;The Rust Unstable Book&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How To Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are always welcome, either reporting issues/bugs or forking the repository and then issuing pull requests when you have completed some additional coding that you feel will be beneficial to the main project. If you are interested in contributing in a more dedicated capacity, then please contact me.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;You can contact me via e-mail (utilForever at gmail.com). I am always happy to answer questions or help with any issues you might have, and please be sure to share any additional work or your creations with me, I love seeing what other people are making.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;img align=&#34;right&#34; src=&#34;http://opensource.org/trademarks/opensource/OSI-Approved-License-100x137.png&#34;&gt; &#xA;&lt;p&gt;The class is licensed under the &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;Copyright © 2023 &lt;a href=&#34;http://www.github.com/utilForever&#34;&gt;Chris Ohk&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>w4/pisshoff</title>
    <updated>2023-08-14T01:36:52Z</updated>
    <id>tag:github.com,2023-08-14:/w4/pisshoff</id>
    <link href="https://github.com/w4/pisshoff" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🧸 fully isolated honeypot ssh server using thrussh&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://i.imgur.com/76FWBbY.png&#34; width=&#34;100px&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;pisshoff&lt;/h1&gt; &#xA;&lt;p&gt;A very simple SSH server using &lt;a href=&#34;https://crates.io/crates/thrussh&#34;&gt;thrussh&lt;/a&gt; that exposes mocked versions of a &lt;code&gt;bash&lt;/code&gt; shell, some commands and SSH subsystems to act as a honeypot for would-be crackers.&lt;/p&gt; &#xA;&lt;p&gt;All actions undertaken on the connection by the client are recorded in JSON format in an audit log file.&lt;/p&gt; &#xA;&lt;h2&gt;What does the server expose?&lt;/h2&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;echo&lt;/li&gt; &#xA; &lt;li&gt;exit&lt;/li&gt; &#xA; &lt;li&gt;ls&lt;/li&gt; &#xA; &lt;li&gt;pwd&lt;/li&gt; &#xA; &lt;li&gt;scp&lt;/li&gt; &#xA; &lt;li&gt;uname&lt;/li&gt; &#xA; &lt;li&gt;whoami&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Subsystems&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;shell&lt;/li&gt; &#xA; &lt;li&gt;sftp&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How?&lt;/h3&gt; &#xA;&lt;p&gt;None of the commands or utilities shell out or otherwise interact with your operating system, you can essentially consider the honeypot &#34;airgapped&#34;. Although for all intents and purposes it &lt;em&gt;feels&lt;/em&gt; like you&#39;re connecting to an actual server, you&#39;re actually interacting with very simple partial reimplementations of common commands and utilities that don&#39;t do anything but return the expected output and write to an audit log.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ssh root@127.0.0.1&#xA;bash-5.1$ pwd&#xA;/root&#xA;bash-5.1$ echo test&#xA;test&#xA;bash-5.1$ uname -a&#xA;Linux cd5079c0d642 5.15.49 #1 SMP PREEMPT Tue Sep 13 07:51:32 UTC 2022 x86_64 GNU/Linux&#xA;bash-5.1$ whoami&#xA;root&#xA;bash-5.1$ exit&#xA;$ echo test &amp;gt; test&#xA;$ scp test root@127.0.0.1:test&#xA;(root@127.0.0.1) Password:&#xA;test                                                                                                      100%    5     0.1KB/s   00:00&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;$ cat audit.log | tail -n 2 | jq&#xA;{&#xA;  &#34;connection_id&#34;: &#34;464d87c9-e8fc-4d24-ab6f-34ee67b094f5&#34;,&#xA;  &#34;ts&#34;: &#34;2023-08-10T20:46:09.837165036Z&#34;,&#xA;  &#34;peer_address&#34;: &#34;127.0.0.1:31732&#34;,&#xA;  &#34;host&#34;: &#34;my-cool-honeypot.dev&#34;,&#xA;  &#34;environment_variables&#34;: [&#xA;    [&#34;LC_TERMINAL_VERSION&#34;, &#34;4.5.20&#34;],&#xA;    [&#34;LANG&#34;, &#34;en_GB.UTF-8&#34;],&#xA;    [&#34;LC_TERMINAL&#34;, &#34;iTerm2&#34;]&#xA;  ],&#xA;  &#34;events&#34;: [&#xA;    {&#xA;      &#34;start_offset&#34;: {&#xA;        &#34;secs&#34;: 1,&#xA;        &#34;nanos&#34;: 362803172&#xA;      },&#xA;      &#34;action&#34;: {&#xA;        &#34;type&#34;: &#34;login-attempt&#34;,&#xA;        &#34;credential-type&#34;: &#34;public-key&#34;,&#xA;        &#34;kind&#34;: &#34;ssh-ed25519&#34;,&#xA;        &#34;fingerprint&#34;: &#34;AAAAC3NzaC1lZDI1NTE5AAAAIK3kwN10QmXsnt7jlZ7mYWXdwjfBmgK3fIp5rji&#34;&#xA;      }&#xA;    },&#xA;    {&#xA;      &#34;start_offset&#34;: {&#xA;        &#34;secs&#34;: 7,&#xA;        &#34;nanos&#34;: 85973767&#xA;      },&#xA;      &#34;action&#34;: {&#xA;        &#34;type&#34;: &#34;login-attempt&#34;,&#xA;        &#34;credential-type&#34;: &#34;username-password&#34;,&#xA;        &#34;username&#34;: &#34;root&#34;,&#xA;        &#34;password&#34;: &#34;root&#34;&#xA;      }&#xA;    },&#xA;    {&#xA;      &#34;start_offset&#34;: {&#xA;        &#34;secs&#34;: 7,&#xA;        &#34;nanos&#34;: 190169895&#xA;      },&#xA;      &#34;action&#34;: {&#xA;        &#34;type&#34;: &#34;shell-requested&#34;&#xA;      }&#xA;    },&#xA;    {&#xA;      &#34;start_offset&#34;: {&#xA;        &#34;secs&#34;: 11,&#xA;        &#34;nanos&#34;: 153124524&#xA;      },&#xA;      &#34;action&#34;: {&#xA;        &#34;type&#34;: &#34;exec-command&#34;,&#xA;        &#34;args&#34;: [&#34;pwd&#34;]&#xA;      }&#xA;    },&#xA;    {&#xA;      &#34;start_offset&#34;: {&#xA;        &#34;secs&#34;: 14,&#xA;        &#34;nanos&#34;: 342192712&#xA;      },&#xA;      &#34;action&#34;: {&#xA;        &#34;type&#34;: &#34;exec-command&#34;,&#xA;        &#34;args&#34;: [&#34;echo&#34;, &#34;test&#34;]&#xA;      }&#xA;    },&#xA;    {&#xA;      &#34;start_offset&#34;: {&#xA;        &#34;secs&#34;: 63,&#xA;        &#34;nanos&#34;: 599852779&#xA;      },&#xA;      &#34;action&#34;: {&#xA;        &#34;type&#34;: &#34;exec-command&#34;,&#xA;        &#34;args&#34;: [&#34;uname&#34;, &#34;-a&#34;]&#xA;      }&#xA;    },&#xA;    {&#xA;      &#34;start_offset&#34;: {&#xA;        &#34;secs&#34;: 67,&#xA;        &#34;nanos&#34;: 368327325&#xA;      },&#xA;      &#34;action&#34;: {&#xA;        &#34;type&#34;: &#34;exec-command&#34;,&#xA;        &#34;args&#34;: [&#34;whoami&#34;]&#xA;      }&#xA;    },&#xA;    {&#xA;      &#34;start_offset&#34;: {&#xA;        &#34;secs&#34;: 166,&#xA;        &#34;nanos&#34;: 208707438&#xA;      },&#xA;      &#34;action&#34;: {&#xA;        &#34;type&#34;: &#34;exec-command&#34;,&#xA;        &#34;args&#34;: [&#34;exit&#34;]&#xA;      }&#xA;    }&#xA;  ]&#xA;}&#xA;{&#xA;  &#34;...&#34;: &#34;...&#34;,&#xA;  &#34;events&#34;: [&#xA;    &#34;...&#34;,&#xA;    {&#xA;      &#34;start_offset&#34;: {&#xA;        &#34;secs&#34;: 4,&#xA;        &#34;nanos&#34;: 196898172&#xA;      },&#xA;      &#34;action&#34;: {&#xA;        &#34;type&#34;: &#34;subsystem-request&#34;,&#xA;        &#34;name&#34;: &#34;sftp&#34;&#xA;      }&#xA;    },&#xA;    {&#xA;      &#34;start_offset&#34;: {&#xA;        &#34;secs&#34;: 4,&#xA;        &#34;nanos&#34;: 404745407&#xA;      },&#xA;      &#34;action&#34;: {&#xA;        &#34;type&#34;: &#34;write-file&#34;,&#xA;        &#34;path&#34;: &#34;test&#34;,&#xA;        &#34;content&#34;: [116, 101, 115, 116, 10] // test&#xA;      }&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running the server&lt;/h2&gt; &#xA;&lt;p&gt;An &lt;a href=&#34;https://github.com/w4/pisshoff/raw/master/pisshoff-server/config.toml&#34;&gt;example configuration&lt;/a&gt; is provided within the repository, running the server is as simple as building the binary using &lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;&lt;code&gt;cargo build --release&lt;/code&gt;&lt;/a&gt; and calling &lt;code&gt;./pisshoff-server -c config.toml&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>martinvonz/jj</title>
    <updated>2023-08-14T01:36:52Z</updated>
    <id>tag:github.com,2023-08-14:/martinvonz/jj</id>
    <link href="https://github.com/martinvonz/jj" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Git-compatible DVCS that is both simple and powerful&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Jujutsu VCS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/license/martinvonz/jj&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/martinvonz/jj&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/release-date/martinvonz/jj&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/crates/v/jj-cli&#34; alt=&#34;&#34;&gt; &lt;br&gt; &lt;img src=&#34;https://github.com/martinvonz/jj/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/codefactor/grade/github/martinvonz/jj/main&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/librariesio/github/martinvonz/jj&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martinvonz/jj/main/#disclaimer&#34;&gt;Disclaimer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martinvonz/jj/main/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martinvonz/jj/main/#status&#34;&gt;Status&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martinvonz/jj/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martinvonz/jj/main/#command-line-completion&#34;&gt;Command-line completion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martinvonz/jj/main/#getting-started&#34;&gt;Getting started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martinvonz/jj/main/#related-work&#34;&gt;Related work&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This is not a Google product. It is an experimental version-control system (VCS). I (Martin von Zweigbergk &lt;a href=&#34;mailto:martinvonz@google.com&#34;&gt;martinvonz@google.com&lt;/a&gt;) started it as a hobby project in late 2019. That said, this is now my full-time project at Google. My presentation from Git Merge 2022 has information about Google&#39;s plans. See the &lt;a href=&#34;https://docs.google.com/presentation/d/1F8j9_UOOSGUN9MvHxPZX_L4bQ9NMcYOp1isn17kTC_M/view&#34;&gt;slides&lt;/a&gt; or the &lt;a href=&#34;https://www.youtube.com/watch?v=bx_LGilOuE4&#34;&gt;recording&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Jujutsu is a &lt;a href=&#34;https://raw.githubusercontent.com/martinvonz/jj/main/docs/git-compatibility.md&#34;&gt;Git-compatible&lt;/a&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Distributed_version_control&#34;&gt;DVCS&lt;/a&gt;. It combines features from Git (data model, &lt;a href=&#34;https://github.com/martinvonz/jj/discussions/49&#34;&gt;speed&lt;/a&gt;), Mercurial (anonymous branching, simple CLI &lt;a href=&#34;https://raw.githubusercontent.com/martinvonz/jj/main/docs/git-comparison.md#the-index&#34;&gt;free from &#34;the index&#34;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/martinvonz/jj/main/docs/revsets.md&#34;&gt;revsets&lt;/a&gt;, powerful history-rewriting), and Pijul/Darcs (&lt;a href=&#34;https://raw.githubusercontent.com/martinvonz/jj/main/docs/conflicts.md&#34;&gt;first-class conflicts&lt;/a&gt;), with features not found in most of them (&lt;a href=&#34;https://raw.githubusercontent.com/martinvonz/jj/main/docs/working-copy.md&#34;&gt;working-copy-as-a-commit&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/martinvonz/jj/main/docs/operation-log.md&#34;&gt;undo functionality&lt;/a&gt;, automatic rebase, &lt;a href=&#34;https://raw.githubusercontent.com/martinvonz/jj/main/docs/technical/concurrency.md&#34;&gt;safe replication via &lt;code&gt;rsync&lt;/code&gt;, Dropbox, or distributed file system&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The command-line tool is called &lt;code&gt;jj&lt;/code&gt; for now because it&#39;s easy to type and easy to replace (rare in English). The project is called &#34;Jujutsu&#34; because it matches &#34;jj&#34;.&lt;/p&gt; &#xA;&lt;p&gt;If you have any questions, please join us on Discord &lt;a href=&#34;https://discord.gg/dkmfj3aGQN&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/968932220549103686.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; or start a &lt;a href=&#34;https://github.com/martinvonz/jj/discussions&#34;&gt;GitHub Discussion&lt;/a&gt;. The &lt;a href=&#34;https://raw.githubusercontent.com/martinvonz/jj/main/docs/glossary.md&#34;&gt;glossary&lt;/a&gt; may also be helpful.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Compatible with Git&lt;/h3&gt; &#xA;&lt;p&gt;Jujutsu has two &lt;a href=&#34;https://raw.githubusercontent.com/martinvonz/jj/main/docs/glossary.md#backend&#34;&gt;backends&lt;/a&gt;. One of them is a Git backend (the other is a native one [^native-backend]). This lets you use Jujutsu as an alternative interface to Git. The commits you create will look like regular Git commits. You can always switch back to Git. The Git support uses the &lt;a href=&#34;https://libgit2.org/&#34;&gt;libgit2&lt;/a&gt; C library.&lt;/p&gt; &#xA;&lt;p&gt;[^native-backend]: At this time, there&#39;s practically no reason to use the native backend. The backend exists mainly to make sure that it&#39;s possible to eventually add functionality that cannot easily be added to the Git backend.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/martinvonz/jj/main/demos/git_compat.png&#34;&gt; &#xA;&lt;h3&gt;The working copy is automatically committed&lt;/h3&gt; &#xA;&lt;p&gt;Jujutsu uses a real commit to represent the working copy. Checking out a commit results a new working-copy commit on top of the target commit. Almost all commands automatically amend the working-copy commit.&lt;/p&gt; &#xA;&lt;p&gt;The working-copy being a commit means that commands never fail because the working copy is dirty (no &#34;error: Your local changes to the following files...&#34;), and there is no need for &lt;code&gt;git stash&lt;/code&gt;. Also, because the working copy is a commit, commands work the same way on the working-copy commit as on any other commit, so you can set the commit message before you&#39;re done with the changes.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/martinvonz/jj/main/demos/working_copy.png&#34;&gt; &#xA;&lt;h3&gt;The repo is the source of truth&lt;/h3&gt; &#xA;&lt;p&gt;With Jujutsu, the working copy plays a smaller role than with Git. Commands snapshot the working copy before they start, then they update the repo, and then the working copy is updated (if the working-copy commit was modified). Almost all commands (even checkout!) operate on the commits in the repo, leaving the common functionality of snapshotting and updating of the working copy to centralized code. For example, &lt;code&gt;jj restore&lt;/code&gt; (similar to &lt;code&gt;git restore&lt;/code&gt;) can restore from any commit and into any commit, and &lt;code&gt;jj describe&lt;/code&gt; can set the commit message of any commit (defaults to the working-copy commit).&lt;/p&gt; &#xA;&lt;h3&gt;Entire repo is under version control&lt;/h3&gt; &#xA;&lt;p&gt;All operations you perform in the repo are recorded, along with a snapshot of the repo state after the operation. This means that you can easily revert to an earlier repo state, or to simply undo a particular operation (which does not necessarily have to be the most recent operation).&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/martinvonz/jj/main/demos/operation_log.png&#34;&gt; &#xA;&lt;h3&gt;Conflicts can be recorded in commits&lt;/h3&gt; &#xA;&lt;p&gt;If an operation results in &lt;a href=&#34;https://raw.githubusercontent.com/martinvonz/jj/main/docs/glossary.md#conflict&#34;&gt;conflicts&lt;/a&gt;, information about those conflicts will be recorded in the commit(s). The operation will succeed. You can then resolve the conflicts later. One consequence of this design is that there&#39;s no need to continue interrupted operations. Instead, you get a single workflow for resolving conflicts, regardless of which command caused them. This design also lets Jujutsu rebase merge commits correctly (unlike both Git and Mercurial).&lt;/p&gt; &#xA;&lt;p&gt;Basic conflict resolution:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/martinvonz/jj/main/demos/resolve_conflicts.png&#34;&gt; &#xA;&lt;p&gt;Juggling conflicts:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/martinvonz/jj/main/demos/juggle_conflicts.png&#34;&gt; &#xA;&lt;h3&gt;Automatic rebase&lt;/h3&gt; &#xA;&lt;p&gt;Whenever you modify a commit, any descendants of the old commit will be rebased onto the new commit. Thanks to the conflict design described above, that can be done even if there are conflicts. Branches pointing to rebased commits will be updated. So will the working copy if it points to a rebased commit.&lt;/p&gt; &#xA;&lt;h3&gt;Comprehensive support for rewriting history&lt;/h3&gt; &#xA;&lt;p&gt;Besides the usual rebase command, there&#39;s &lt;code&gt;jj describe&lt;/code&gt; for editing the description (commit message) of an arbitrary commit. There&#39;s also &lt;code&gt;jj diffedit&lt;/code&gt;, which lets you edit the changes in a commit without checking it out. To split a commit into two, use &lt;code&gt;jj split&lt;/code&gt;. You can even move part of the changes in a commit to any other commit using &lt;code&gt;jj move&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;The tool is quite feature-complete, but some important features like (the equivalent of) &lt;code&gt;git blame&lt;/code&gt; are not yet supported. There are also several performance bugs. It&#39;s also likely that workflows and setups different from what the core developers use are not well supported.&lt;/p&gt; &#xA;&lt;p&gt;I (Martin von Zweigbergk) have almost exclusively used &lt;code&gt;jj&lt;/code&gt; to develop the project itself since early January 2021. I haven&#39;t had to re-clone from source (I don&#39;t think I&#39;ve even had to restore from backup).&lt;/p&gt; &#xA;&lt;p&gt;There &lt;em&gt;will&lt;/em&gt; be changes to workflows and backward-incompatible changes to the on-disk formats before version 1.0.0. Even the binary&#39;s name may change (i.e. away from &lt;code&gt;jj&lt;/code&gt;). For any format changes, we&#39;ll try to implement transparent upgrades (as we&#39;ve done with recent changes), or provide upgrade commands or scripts if requested.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;See below for how to build from source. There are also &lt;a href=&#34;https://github.com/martinvonz/jj/releases&#34;&gt;pre-built binaries&lt;/a&gt; for Windows, Mac, or Linux (musl).&lt;/p&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;On most distributions, you&#39;ll need to build from source using &lt;code&gt;cargo&lt;/code&gt; directly.&lt;/p&gt; &#xA;&lt;h4&gt;Build using &lt;code&gt;cargo&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;First make sure that you have the &lt;code&gt;libssl-dev&lt;/code&gt;, &lt;code&gt;openssl&lt;/code&gt;, and &lt;code&gt;pkg-config&lt;/code&gt; packages installed by running something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt-get install libssl-dev openssl pkg-config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cargo install --git https://github.com/martinvonz/jj.git --locked --bin jj jj-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Nix OS&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;re on Nix OS you can use the flake for this repository. For example, if you want to run &lt;code&gt;jj&lt;/code&gt; loaded from the flake, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;nix run &#39;github:martinvonz/jj&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also add this flake url to your system input flakes. Or you can install the flake to your user profile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;nix profile install &#39;github:martinvonz/jj&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Homebrew&lt;/h4&gt; &#xA;&lt;p&gt;If you use linuxbrew, you can run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install jj&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mac&lt;/h3&gt; &#xA;&lt;h4&gt;Homebrew&lt;/h4&gt; &#xA;&lt;p&gt;If you use Homebrew, you can run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install jj&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;MacPorts&lt;/h4&gt; &#xA;&lt;p&gt;You can also install &lt;code&gt;jj&lt;/code&gt; via &lt;a href=&#34;https://www.macports.org&#34;&gt;MacPorts&lt;/a&gt; (as the &lt;code&gt;jujutsu&lt;/code&gt; port):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo port install jujutsu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(&lt;a href=&#34;https://ports.macports.org/port/jujutsu/&#34;&gt;port page&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h4&gt;From Source&lt;/h4&gt; &#xA;&lt;p&gt;You may need to run some or all of these:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;xcode-select --install&#xA;brew install openssl&#xA;brew install pkg-config&#xA;export PKG_CONFIG_PATH=&#34;$(brew --prefix)/opt/openssl@3/lib/pkgconfig&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cargo install --git https://github.com/martinvonz/jj.git --locked --bin jj jj-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cargo install --git https://github.com/martinvonz/jj.git --locked --bin jj jj-cli --features vendored-openssl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Initial configuration&lt;/h2&gt; &#xA;&lt;p&gt;You may want to configure your name and email so commits are made in your name.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ jj config set --user user.name &#34;Martin von Zweigbergk&#34;&#xA;$ jj config set --user user.email &#34;martinvonz@google.com&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Command-line completion&lt;/h2&gt; &#xA;&lt;p&gt;To set up command-line completion, source the output of &lt;code&gt;jj util completion --bash/--zsh/--fish&lt;/code&gt; (called &lt;code&gt;jj debug completion&lt;/code&gt; in jj &amp;lt;= 0.7.0). Exactly how to source it depends on your shell.&lt;/p&gt; &#xA;&lt;h3&gt;Bash&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;source &amp;lt;(jj util completion)  # --bash is the default&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, with jj &amp;lt;= 0.7.0:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;source &amp;lt;(jj debug completion)  # --bash is the default&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Zsh&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;autoload -U compinit&#xA;compinit&#xA;source &amp;lt;(jj util completion --zsh)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, with jj &amp;lt;= 0.7.0:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;autoload -U compinit&#xA;compinit&#xA;source &amp;lt;(jj debug completion --zsh)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fish&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jj util completion --fish | source&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, with jj &amp;lt;= 0.7.0:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jj debug completion --fish | source&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Xonsh&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;source-bash $(jj util completion)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, with jj &amp;lt;= 0.7.0:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;source-bash $(jj debug completion)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;The best way to get started is probably to go through &lt;a href=&#34;https://raw.githubusercontent.com/martinvonz/jj/main/docs/tutorial.md&#34;&gt;the tutorial&lt;/a&gt;. Also see the &lt;a href=&#34;https://raw.githubusercontent.com/martinvonz/jj/main/docs/git-comparison.md&#34;&gt;Git comparison&lt;/a&gt;, which includes a table of &lt;code&gt;jj&lt;/code&gt; vs. &lt;code&gt;git&lt;/code&gt; commands.&lt;/p&gt; &#xA;&lt;p&gt;As you become more familiar with Jujutsu, the &lt;a href=&#34;https://raw.githubusercontent.com/martinvonz/jj/main/docs/FAQ.md&#34;&gt;FAQ&lt;/a&gt; may help.&lt;/p&gt; &#xA;&lt;h2&gt;Related work&lt;/h2&gt; &#xA;&lt;p&gt;There are several tools trying to solve similar problems as Jujutsu. See &lt;a href=&#34;https://raw.githubusercontent.com/martinvonz/jj/main/docs/related-work.md&#34;&gt;related work&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
</feed>