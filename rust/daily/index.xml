<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-18T01:39:28Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cessen/ropey</title>
    <updated>2025-01-18T01:39:28Z</updated>
    <id>tag:github.com,2025-01-18:/cessen/ropey</id>
    <link href="https://github.com/cessen/ropey" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A utf8 text rope for manipulating and editing large texts.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ropey&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cessen/ropey/actions?query=workflow%3Aci&#34;&gt;&lt;img src=&#34;https://github.com/cessen/ropey/workflows/ci/badge.svg?sanitize=true&#34; alt=&#34;CI Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/ropey&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/ropey.svg?sanitize=true&#34; alt=&#34;Latest Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/ropey&#34;&gt;&lt;img src=&#34;https://docs.rs/ropey/badge.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ropey is a utf8 text rope for Rust, designed to be the backing text-buffer for applications such as text editors. Ropey is fast, robust, and can handle huge texts and memory-incoherent edits with ease.&lt;/p&gt; &#xA;&lt;h2&gt;Example Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;// Load a text file.&#xA;let mut text = ropey::Rope::from_reader(&#xA;    File::open(&#34;my_great_book.txt&#34;)?&#xA;)?;&#xA;&#xA;// Print the 516th line (zero-indexed).&#xA;println!(&#34;{}&#34;, text.line(515));&#xA;&#xA;// Get the start/end char indices of the line.&#xA;let start_idx = text.line_to_char(515);&#xA;let end_idx = text.line_to_char(516);&#xA;&#xA;// Remove the line...&#xA;text.remove(start_idx..end_idx);&#xA;&#xA;// ...and replace it with something better.&#xA;text.insert(start_idx, &#34;The flowers are... so... dunno.\n&#34;);&#xA;&#xA;// Print the changes, along with the previous few lines for context.&#xA;let start_idx = text.line_to_char(511);&#xA;let end_idx = text.line_to_char(516);&#xA;println!(&#34;{}&#34;, text.slice(start_idx..end_idx));&#xA;&#xA;// Write the file back out to disk.&#xA;text.write_to(&#xA;    BufWriter::new(File::create(&#34;my_great_book.txt&#34;)?)&#xA;)?;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;When Should I Use Ropey?&lt;/h2&gt; &#xA;&lt;p&gt;Ropey is designed and built to be the backing text buffer for applications such as text editors, and its design trade-offs reflect that. Ropey is good at:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Handling frequent edits to medium-to-large texts. Even on texts that are multiple gigabytes large, edits are measured in single-digit microseconds.&lt;/li&gt; &#xA; &lt;li&gt;Handling Unicode correctly. It is impossible to create invalid utf8 through Ropey, and all Unicode line endings are correctly tracked including CRLF.&lt;/li&gt; &#xA; &lt;li&gt;Having flat, predictable performance characteristics. Ropey will never be the source of hiccups or stutters in your software.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On the other hand, Ropey is &lt;em&gt;not&lt;/em&gt; good at:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Handling texts smaller than a couple of kilobytes or so. That is to say, Ropey will handle them fine, but Ropey allocates space in kilobyte chunks, which introduces unnecessary bloat if your texts are almost always small.&lt;/li&gt; &#xA; &lt;li&gt;Handling texts that are larger than available memory. Ropey is an in-memory data structure.&lt;/li&gt; &#xA; &lt;li&gt;Getting the best performance for every possible use-case. Ropey puts work into tracking both line endings and unicode scalar values, which is performance overhead you may not need depending on your use-case.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Keep this in mind when selecting Ropey for your project. Ropey is very good at what it does, but like all software it is designed with certain applications in mind.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Strong Unicode support&lt;/h3&gt; &#xA;&lt;p&gt;Ropey&#39;s atomic unit of text is &lt;a href=&#34;https://www.unicode.org/glossary/#unicode_scalar_value&#34;&gt;Unicode scalar values&lt;/a&gt; (or &lt;a href=&#34;https://doc.rust-lang.org/std/primitive.char.html&#34;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;s in Rust) encoded as utf8. All of Ropey&#39;s editing and slicing operations are done in terms of char indices, which prevents accidental creation of invalid utf8 data.&lt;/p&gt; &#xA;&lt;p&gt;Ropey also supports converting between scalar value indices and utf16 code unit indices, for interoperation with external APIs that may still use utf16.&lt;/p&gt; &#xA;&lt;h3&gt;Line-aware&lt;/h3&gt; &#xA;&lt;p&gt;Ropey knows about line breaks, allowing you to index into and iterate over lines of text.&lt;/p&gt; &#xA;&lt;p&gt;The line breaks Ropey recognizes are also configurable at build time via feature flags. See Ropey&#39;s documentation for details.&lt;/p&gt; &#xA;&lt;h3&gt;Rope slices&lt;/h3&gt; &#xA;&lt;p&gt;Ropey has rope slices that allow you to work with just parts of a rope, using all the read-only operations of a full rope including iterators and making sub-slices.&lt;/p&gt; &#xA;&lt;h3&gt;Flexible APIs with low-level access&lt;/h3&gt; &#xA;&lt;p&gt;Although Ropey is intentionally limited in scope, it also provides APIs for efficiently accessing and working with its internal text chunk representation, allowing additional functionality to be efficiently implemented by client code with minimal overhead.&lt;/p&gt; &#xA;&lt;h3&gt;Efficient&lt;/h3&gt; &#xA;&lt;p&gt;Ropey is fast and minimizes memory usage:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On a recent mobile i7 Intel CPU, Ropey performed over 1.8 million small incoherent insertions per second while building up a text roughly 100 MB large. Coherent insertions (i.e. all near the same place in the text) are even faster, doing the same task at over 3.3 million insertions per second.&lt;/li&gt; &#xA; &lt;li&gt;Freshly loading a file from disk only incurs about 10% memory overhead. For example, a 100 MB text file will occupy about 110 MB of memory when loaded by Ropey.&lt;/li&gt; &#xA; &lt;li&gt;Cloning ropes is &lt;em&gt;extremely&lt;/em&gt; cheap. Rope clones share data, so an initial clone only takes 8 bytes of memory. After that, memory usage will grow incrementally as the clones diverge due to edits.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Thread safe&lt;/h3&gt; &#xA;&lt;p&gt;Ropey ensures that even though clones share memory, everything is thread-safe. Clones can be sent to other threads for both reading and writing.&lt;/p&gt; &#xA;&lt;h2&gt;Unsafe code&lt;/h2&gt; &#xA;&lt;p&gt;Ropey uses unsafe code to help achieve some of its space and performance characteristics. Although effort has been put into keeping the unsafe code compartmentalized and making it correct, please be cautious about using Ropey in software that may face adversarial conditions.&lt;/p&gt; &#xA;&lt;p&gt;Auditing, fuzzing, etc. of the unsafe code in Ropey is extremely welcome. If you find any unsoundness, &lt;em&gt;please&lt;/em&gt; file an issue! Also welcome are recommendations for how to remove any of the unsafe code without introducing significant space or performance regressions, or how to compartmentalize the unsafe code even better.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Ropey is licensed under the MIT license (LICENSE.md or &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are absolutely welcome! However, please open an issue to discuss larger changes, to avoid doing a lot of work that may get rejected. Also note that PRs that add dependencies are very likely to be rejected (Ropey aims to have minimal dependencies).&lt;/p&gt; &#xA;&lt;p&gt;An overview of Ropey&#39;s design can be found &lt;a href=&#34;https://github.com/cessen/ropey/raw/master/design/design.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in Ropey by you will be licensed as above, without any additional terms or conditions.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nymtech/nym-vpn-client</title>
    <updated>2025-01-18T01:39:28Z</updated>
    <id>tag:github.com,2025-01-18:/nymtech/nym-vpn-client</id>
    <link href="https://github.com/nymtech/nym-vpn-client" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The NymVPN client apps for desktop and mobile&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Hello and welcome to the NymVPN GitHub page! For more information about NymVPN and to request beta access credentials, visit &lt;a href=&#34;https://nym.com/&#34;&gt;https://nym.com/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;NymVPN client&lt;/h1&gt; &#xA;&lt;p&gt;The NymVPN client is a VPN-like app built on &lt;a href=&#34;https://nym.com/mixnet&#34;&gt;Nym&#39;s signature mixnet&lt;/a&gt;, offering the following &lt;a href=&#34;https://nym.com/features&#34;&gt;features&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Anonymous 5-hop mixnet mode&lt;/li&gt; &#xA; &lt;li&gt;Fast 2-hop WireGuard-based decentralized VPN mode&lt;/li&gt; &#xA; &lt;li&gt;Private credentials using zk-nyms (zero-knowledge proofs)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;NymVPN is available on all major platforms incl. &lt;a href=&#34;https://nym.com/download/android&#34;&gt;Android&lt;/a&gt;, &lt;a href=&#34;https://nym.com/download/ios&#34;&gt;iOS&lt;/a&gt;, &lt;a href=&#34;https://nym.com/download/linux&#34;&gt;Linux&lt;/a&gt;, &lt;a href=&#34;https://nym.com/download/macos&#34;&gt;macOS&lt;/a&gt; and &lt;a href=&#34;https://nym.com/download/windows&#34;&gt;Windows&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;NymVPN relies on &lt;a href=&#34;https://github.com/mullvad/mullvadvpn-app/&#34;&gt;Mullvad open source libraries&lt;/a&gt; to handle setting up local routing and wrapping wireguard-go.&lt;/p&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;https://nym.com/en/blog&#34;&gt;Nym&#39;s blog&lt;/a&gt; for the latest announcements and articles on privacy and security. Visit our &lt;a href=&#34;https://support.nym.com/hc/en-us&#34;&gt;Help Center&lt;/a&gt; or contact our &lt;a href=&#34;https://support.nym.com/hc/en-us/requests/new&#34;&gt;Support team&lt;/a&gt; with any questions about NymVPN.&lt;/p&gt; &#xA;&lt;h2&gt;Core&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;nym-vpn-core&lt;/code&gt; Rust workspace contains among other things the daemon (&lt;code&gt;nym-vpnd&lt;/code&gt;) and the CLI client (&lt;code&gt;nym-vpnc&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nymtech/nym-vpn-client/develop/nym-vpn-core/crates/nym-vpnd&#34;&gt;nym-vpnd&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/nymtech/nym-vpn-client/develop/nym-vpn-core/crates/nym-vpnc&#34;&gt;nym-vpnc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;GUI clients&lt;/h2&gt; &#xA;&lt;p&gt;Interacting either with &lt;code&gt;nym-vpnd&lt;/code&gt; or directly to &lt;code&gt;nym-vpn-lib&lt;/code&gt; using FFI are a number of GUI clients.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nymtech/nym-vpn-client/develop/nym-vpn-android/README.md&#34;&gt;nym-vpn-android&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/nymtech/nym-vpn-client/develop/nym-vpn-apple/README.md&#34;&gt;nym-vpn-apple&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/nymtech/nym-vpn-client/develop/nym-vpn-app/README.md&#34;&gt;nym-vpn-app&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Nym&#39;s mixnet overview&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;                      ┌─►mix──┐  mix     mix&#xA;                      │       │&#xA;            entry     │       │                   exit&#xA;client ───► gateway ──┘  mix  │  mix  ┌─►mix ───► gateway ───► internet&#xA;                              │       │&#xA;                              │       │&#xA;                         mix  └─►mix──┘  mix&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>