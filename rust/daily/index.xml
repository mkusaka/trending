<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-11-10T01:37:12Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bheisler/criterion.rs</title>
    <updated>2024-11-10T01:37:12Z</updated>
    <id>tag:github.com,2024-11-10:/bheisler/criterion.rs</id>
    <link href="https://github.com/bheisler/criterion.rs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Statistics-driven benchmarking library for Rust&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;Criterion.&lt;span&gt;&lt;/span&gt;rs&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; Statistics-driven Microbenchmarking in Rust&#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://bheisler.github.io/criterion.rs/book/getting_started.html&#34;&gt;Getting Started&lt;/a&gt; | &#xA; &lt;a href=&#34;https://bheisler.github.io/criterion.rs/book/index.html&#34;&gt;User Guide&lt;/a&gt; | &#xA; &lt;a href=&#34;https://bheisler.github.io/criterion.rs/criterion/&#34;&gt;Master API Docs&lt;/a&gt; | &#xA; &lt;a href=&#34;https://docs.rs/crate/criterion/&#34;&gt;Released API Docs&lt;/a&gt; | &#xA; &lt;a href=&#34;https://github.com/bheisler/criterion.rs/raw/master/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/bheisler/criterion.rs/actions/workflows/ci.yaml&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/checks-status/rgeometry/rgeometry/main?label=tests&amp;amp;logo=github&#34; alt=&#34;GitHub branch checks state&#34;&gt; &lt;/a&gt; | &#xA; &lt;a href=&#34;https://crates.io/crates/criterion&#34;&gt; &lt;img src=&#34;https://img.shields.io/crates/v/criterion.svg?sanitize=true&#34; alt=&#34;Crates.io&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Criterion.&lt;span&gt;&lt;/span&gt;rs helps you write fast code by detecting and measuring performance improvements or regressions, even small ones, quickly and accurately. You can optimize with confidence, knowing how each change affects the performance of your code.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bheisler/criterion.rs/master/#table-of-contents&#34;&gt;Table of Contents&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bheisler/criterion.rs/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bheisler/criterion.rs/master/#quickstart&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bheisler/criterion.rs/master/#goals&#34;&gt;Goals&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bheisler/criterion.rs/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bheisler/criterion.rs/master/#compatibility-policy&#34;&gt;Compatibility Policy&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bheisler/criterion.rs/master/#maintenance&#34;&gt;Maintenance&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bheisler/criterion.rs/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bheisler/criterion.rs/master/#related-projects&#34;&gt;Related Projects&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bheisler/criterion.rs/master/#criterionrs-extensions&#34;&gt;Criterion.rs Extensions&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Statistics&lt;/strong&gt;: Statistical analysis detects if, and by how much, performance has changed since the last benchmark run&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Charts&lt;/strong&gt;: Uses &lt;a href=&#34;http://www.gnuplot.info/&#34;&gt;gnuplot&lt;/a&gt; to generate detailed graphs of benchmark results&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Stable-compatible&lt;/strong&gt;: Benchmark your code without installing nightly Rust&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Quickstart&lt;/h3&gt; &#xA;&lt;p&gt;In order to generate plots, you must have &lt;a href=&#34;http://www.gnuplot.info/&#34;&gt;gnuplot&lt;/a&gt; installed. See the gnuplot website for installation instructions. See &lt;a href=&#34;https://raw.githubusercontent.com/bheisler/criterion.rs/master/#compatibility-policy&#34;&gt;Compatibility Policy&lt;/a&gt; for details on the minimum supported Rust version.&lt;/p&gt; &#xA;&lt;p&gt;To start with Criterion.&lt;span&gt;&lt;/span&gt;rs, add the following to your &lt;code&gt;Cargo.toml&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[dev-dependencies]&#xA;criterion = { version = &#34;0.5&#34;, features = [&#34;html_reports&#34;] }&#xA;&#xA;[[bench]]&#xA;name = &#34;my_benchmark&#34;&#xA;harness = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, define a benchmark by creating a file at &lt;code&gt;$PROJECT/benches/my_benchmark.rs&lt;/code&gt; with the following contents:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use std::hint::black_box;&#xA;use criterion::{criterion_group, criterion_main, Criterion};&#xA;&#xA;fn fibonacci(n: u64) -&amp;gt; u64 {&#xA;    match n {&#xA;        0 =&amp;gt; 1,&#xA;        1 =&amp;gt; 1,&#xA;        n =&amp;gt; fibonacci(n-1) + fibonacci(n-2),&#xA;    }&#xA;}&#xA;&#xA;fn criterion_benchmark(c: &amp;amp;mut Criterion) {&#xA;    c.bench_function(&#34;fib 20&#34;, |b| b.iter(|| fibonacci(black_box(20))));&#xA;}&#xA;&#xA;criterion_group!(benches, criterion_benchmark);&#xA;criterion_main!(benches);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, run this benchmark with &lt;code&gt;cargo bench&lt;/code&gt;. You should see output similar to the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;     Running target/release/deps/example-423eedc43b2b3a93&#xA;fib 20                  time:   [26.029 us 26.251 us 26.505 us]&#xA;Found 11 outliers among 99 measurements (11.11%)&#xA;  6 (6.06%) high mild&#xA;  5 (5.05%) high severe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://bheisler.github.io/criterion.rs/book/getting_started.html&#34;&gt;Getting Started&lt;/a&gt; guide for more details.&lt;/p&gt; &#xA;&lt;h3&gt;Goals&lt;/h3&gt; &#xA;&lt;p&gt;The primary goal of Criterion.&lt;span&gt;&lt;/span&gt;rs is to provide a powerful and statistically rigorous tool for measuring the performance of code, preventing performance regressions and accurately measuring optimizations. Additionally, it should be as programmer-friendly as possible and make it easy to create reliable, useful benchmarks, even for programmers without an advanced background in statistics.&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;First, thank you for contributing.&lt;/p&gt; &#xA;&lt;p&gt;One great way to contribute to Criterion.&lt;span&gt;&lt;/span&gt;rs is to use it for your own benchmarking needs and report your experiences, file and comment on issues, etc.&lt;/p&gt; &#xA;&lt;p&gt;Code or documentation improvements in the form of pull requests are also welcome. If you&#39;re not sure what to work on, try checking the &lt;a href=&#34;https://github.com/bheisler/criterion.rs/issues?q=is%3Aissue+is%3Aopen+label%3ABeginner&#34;&gt;Beginner label&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If your issues or pull requests have no response after a few days, feel free to ping me (@bheisler).&lt;/p&gt; &#xA;&lt;p&gt;For more details, see the &lt;a href=&#34;https://github.com/bheisler/criterion.rs/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Compatibility Policy&lt;/h3&gt; &#xA;&lt;p&gt;Criterion.&lt;span&gt;&lt;/span&gt;rs supports the last three stable minor releases of Rust. At time of writing, this means Rust 1.59 or later. Older versions may work, but are not guaranteed.&lt;/p&gt; &#xA;&lt;p&gt;Currently, the oldest version of Rust believed to work is 1.57. Future versions of Criterion.&lt;span&gt;&lt;/span&gt;rs may break support for such old versions, and this will not be considered a breaking change. If you require Criterion.&lt;span&gt;&lt;/span&gt;rs to work on old versions of Rust, you will need to stick to a specific patch version of Criterion.&lt;span&gt;&lt;/span&gt;rs.&lt;/p&gt; &#xA;&lt;h3&gt;Maintenance&lt;/h3&gt; &#xA;&lt;p&gt;Criterion.&lt;span&gt;&lt;/span&gt;rs was originally created by Jorge Aparicio &lt;a href=&#34;https://github.com/japaric&#34;&gt;(@japaric)&lt;/a&gt; and is currently being maintained by Brook Heisler &lt;a href=&#34;https://github.com/bheisler&#34;&gt;(@bheisler)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;Criterion.&lt;span&gt;&lt;/span&gt;rs is dual licensed under the Apache 2.0 license and the MIT license.&lt;/p&gt; &#xA;&lt;h3&gt;Related Projects&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bluss/bencher&#34;&gt;bencher&lt;/a&gt; - A port of the libtest benchmark runner to stable Rust&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.serpentine.com/criterion/&#34;&gt;criterion&lt;/a&gt; - The Haskell microbenchmarking library that inspired Criterion.&lt;span&gt;&lt;/span&gt;rs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BurntSushi/cargo-benchcmp&#34;&gt;cargo-benchcmp&lt;/a&gt; - Cargo subcommand to compare the output of two libtest or bencher benchmark runs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ferrous-systems/flamegraph&#34;&gt;cargo-flamegraph&lt;/a&gt; - Cargo subcommand to profile an executable and produce a flamegraph&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Criterion.rs Extensions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/criterion-cycles-per-byte&#34;&gt;criterion-cycles-per-byte&lt;/a&gt; - A custom-measurement plugin that counts the number of CPU cycles used by the benchmark&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/criterion-perf-events&#34;&gt;criterion-perf-events&lt;/a&gt; - A custom-measurement plugin that counts perf events created by the benchmark&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>