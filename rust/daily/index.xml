<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-16T01:39:22Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tonyke-bot/ore-miner</title>
    <updated>2024-04-16T01:39:22Z</updated>
    <id>tag:github.com,2024-04-16:/tonyke-bot/ore-miner</id>
    <link href="https://github.com/tonyke-bot/ore-miner" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ORE Miner built on top of Jito bundle with both CPU and GPU support.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;$ORE Miner&lt;/h1&gt; &#xA;&lt;p&gt;ORE Miner built on top of Jito bundle service by &lt;a href=&#34;https://x.com/tonyke_bot&#34;&gt;@tonyke_bot&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/shoucccc&#34;&gt;@shoucccc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Shipped with both CPU and GPU hashing support.&lt;/p&gt; &#xA;&lt;p&gt;Each miner is able to carry 400 wallets on a single RTX 4090 card. Should expect 10~20% improvement if the code is optimized.&lt;/p&gt; &#xA;&lt;h2&gt;Preparations&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Get a reliable, fastest Solana RPC&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repo and build&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/tonyke-bot/ore-miner.git&#xA;cd ore-miner&#xA;cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;(Optional) Install CUDA development environment&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;(Optional) Build CUDA miner&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./build-cuda-worker.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Generate wallets and fund them with SOL&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Feature&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Evenly consumed SOL: Choose richest wallet to tip bundle and richest wallet in a transaction to pay the transaction fee.&lt;/li&gt; &#xA; &lt;li&gt;Adaptive tip: Automatically adjust tip based on the Jito tip stream.&lt;/li&gt; &#xA; &lt;li&gt;Bulk operation support: mine, register, claim, batch transfer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h4&gt;Mine with GPU&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;export CUDA_VISIBLE_DEVICES=&amp;lt;GPU_INDEX&amp;gt;&#xA;&#xA;cargo run --release -- \&#xA;    --rpc &amp;lt;RPC_URL&amp;gt; \&#xA;    --priority-fee 500000 \                     # Tip used for Jito bundle. If max adaptive tip is set, this will be the initial tip.&#xA;    bundle-mine-gpu \&#xA;    --key-folder &amp;lt;FOLDER_CONTAINS_YOUR_KEYS&amp;gt; \  # Folder contains your Solana keys&#xA;    --max-adaptive-tip 400000 \                 # Max tip used, if this is set, use tip min(tips.p50, max)****&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Multi Claim&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo run --release -- \&#xA;    --rpc &amp;lt;RPC_URL&amp;gt; \&#xA;    --priority-fee 500000 \                     # Tip used for Jito bundle. &#xA;    claim \&#xA;    --key-folder &amp;lt;FOLDER_CONTAINS_YOUR_KEYS&amp;gt; \  # Folder contains your Solana keys&#xA;    --beneficiary &amp;lt;YOUR_PUBKEY_TO_RECEIVE_ORE&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Register&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo run --release -- \&#xA;    --rpc &amp;lt;RPC_URL&amp;gt; \&#xA;    --priority-fee 500000 \                     # Tip used for Jito bundle. &#xA;    register \&#xA;    --key-folder &amp;lt;FOLDER_CONTAINS_YOUR_KEYS&amp;gt; \  # Folder contains your Solana keys&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Buy me ☕️&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SOL: &lt;code&gt;tonyi4UznxNzae5RBinHTU8Gxr91RRGBcdx7mmimN8F&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;EVM: &lt;code&gt;0x45Fce32abB76fd0722882326FBf2d1182e6b982B&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Appreciate your support!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>not-fl3/miniquad</title>
    <updated>2024-04-16T01:39:22Z</updated>
    <id>tag:github.com,2024-04-16:/not-fl3/miniquad</id>
    <link href="https://github.com/not-fl3/miniquad" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cross platform rendering in Rust&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Miniquad&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/not-fl3/miniquad/actions?query=workflow%3A&#34;&gt;&lt;img src=&#34;https://github.com/not-fl3/miniquad/workflows/Cross-compile/badge.svg?sanitize=true&#34; alt=&#34;Github Actions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/miniquad/0.3.13/miniquad/index.html&#34;&gt;&lt;img src=&#34;https://docs.rs/miniquad/badge.svg?version=0.3.13&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/miniquad&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/miniquad.svg?sanitize=true&#34; alt=&#34;Crates.io version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/WfEp6ut&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/710177966440579103.svg?label=discord%20chat&#34; alt=&#34;Discord chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://matrix.to/#/#quad-general:matrix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/matrix/quad-general:matrix.org?label=matrix%20chat&#34; alt=&#34;Matrix&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Miniquad is a manifestation of a dream in a world where we do not need a deep dependencies tree and thousands lines of code to draw things with a computer.&lt;/p&gt; &#xA;&lt;p&gt;Miniquad aims to provide a graphics abstraction that works the same way on any platform with a GPU, being as light weight as possible while covering as many machines as possible.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows, OpenGL 3, OpenGL 2.2;&lt;/li&gt; &#xA; &lt;li&gt;Linux, OpenGL 2.2, OpenGL 3, GLES 2, GLES 3;&lt;/li&gt; &#xA; &lt;li&gt;macOS, OpenGL 3, Metal;&lt;/li&gt; &#xA; &lt;li&gt;iOS, GLES 2, GLES 3, Metal;&lt;/li&gt; &#xA; &lt;li&gt;WASM, WebGL 1 - tested on iOS Safari, Firefox, Chrome;&lt;/li&gt; &#xA; &lt;li&gt;Android, GLES 2, GLES 3.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/TRI50rk.gif&#34; alt=&#34;Imgur&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/not-fl3/miniquad/raw/master/examples/quad.rs&#34;&gt;examples/quad.rs&lt;/a&gt;: &lt;a href=&#34;https://not-fl3.github.io/miniquad-samples/quad.html&#34;&gt;web demo&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/not-fl3/miniquad/raw/master/examples/offscreen.rs&#34;&gt;examples/offscreen.rs&lt;/a&gt;: &lt;a href=&#34;https://not-fl3.github.io/miniquad-samples/offscreen.html&#34;&gt;web demo&lt;/a&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/PonasKovas/miniquad-mandelbrot&#34;&gt;PonasKovas/miniquad-mandelbrot&lt;/a&gt;: &lt;a href=&#34;https://ponaskovas.github.io/miniquad-mandelbrot-wasm-demo/&#34;&gt;web demo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Building examples&lt;/h1&gt; &#xA;&lt;h2&gt;Linux&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo run --example quad&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On NixOS Linux you can use &lt;a href=&#34;https://raw.githubusercontent.com/not-fl3/miniquad/master/shell.nix&#34;&gt;&lt;code&gt;shell.nix&lt;/code&gt;&lt;/a&gt; to start a development environment where Miniquad can be built and run.&lt;/p&gt; &#xA;&lt;h2&gt;Windows&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# both MSVC and GNU target is supported:&#xA;rustup target add x86_64-pc-windows-msvc&#xA;# or&#xA;rustup target add x86_64-pc-windows-gnu&#xA;&#xA;cargo run --example quad&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;WASM&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rustup target add wasm32-unknown-unknown&#xA;cargo build --example quad --target wasm32-unknown-unknown&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then use the following .html to load .wasm:&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;index.html&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;html lang=&#34;en&#34;&amp;gt;&#xA;&#xA;&amp;lt;head&amp;gt;&#xA;    &amp;lt;meta charset=&#34;utf-8&#34;&amp;gt;&#xA;    &amp;lt;title&amp;gt;TITLE&amp;lt;/title&amp;gt;&#xA;    &amp;lt;style&amp;gt;&#xA;        html,&#xA;        body,&#xA;        canvas {&#xA;            margin: 0px;&#xA;            padding: 0px;&#xA;            width: 100%;&#xA;            height: 100%;&#xA;            overflow: hidden;&#xA;            position: absolute;&#xA;            background: black;&#xA;            z-index: 0;&#xA;        }&#xA;    &amp;lt;/style&amp;gt;&#xA;&amp;lt;/head&amp;gt;&#xA;&#xA;&amp;lt;body&amp;gt;&#xA;    &amp;lt;canvas id=&#34;glcanvas&#34; tabindex=&#39;1&#39;&amp;gt;&amp;lt;/canvas&amp;gt;&#xA;    &amp;lt;!-- Minified and statically hosted version of https://github.com/not-fl3/miniquad/blob/master/native/sapp-wasm/js/gl.js --&amp;gt;&#xA;    &amp;lt;script src=&#34;https://not-fl3.github.io/miniquad-samples/gl.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;    &amp;lt;script&amp;gt;load(&#34;quad.wasm&#34;);&amp;lt;/script&amp;gt; &amp;lt;!-- Your compiled wasm file --&amp;gt;&#xA;&amp;lt;/body&amp;gt;&#xA;&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;One of the ways to server static .wasm and .html:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install basic-http-server&#xA;basic-http-server .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Android&lt;/h2&gt; &#xA;&lt;p&gt;Recommended way to build for android is using Docker.&lt;br&gt; miniquad uses slightly modifed version of &lt;code&gt;cargo-apk&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm -v $(pwd)&#34;:/root/src&#34; -w /root/src notfl3/cargo-apk cargo quad-apk build --example quad&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;APK file will be in &lt;code&gt;target/android-artifacts/(debug|release)/apk&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;With &#34;log-impl&#34; enabled all log calls will be forwarded to adb console. No code modifications for Android required, everything should just works.&lt;/p&gt; &#xA;&lt;h2&gt;iOS&lt;/h2&gt; &#xA;&lt;p&gt;To run on the simulator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir MyGame.app&#xA;cargo build --target x86_64-apple-ios --release&#xA;cp target/release/mygame MyGame.app&#xA;# only if the game have any assets&#xA;cp -r assets MyGame.app&#xA;cat &amp;gt; MyGame.app/Info.plist &amp;lt;&amp;lt; EOF&#xA;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&amp;gt;&#xA;&amp;lt;!DOCTYPE plist PUBLIC &#34;-//Apple//DTD PLIST 1.0//EN&#34; &#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&#34;&amp;gt;&#xA;&amp;lt;plist version=&#34;1.0&#34;&amp;gt;&#xA;&amp;lt;dict&amp;gt;&#xA;&amp;lt;key&amp;gt;CFBundleExecutable&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;mygame&amp;lt;/string&amp;gt;&#xA;&amp;lt;key&amp;gt;CFBundleIdentifier&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;com.mygame&amp;lt;/string&amp;gt;&#xA;&amp;lt;key&amp;gt;CFBundleName&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;mygame&amp;lt;/string&amp;gt;&#xA;&amp;lt;key&amp;gt;CFBundleVersion&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;1&amp;lt;/string&amp;gt;&#xA;&amp;lt;key&amp;gt;CFBundleShortVersionString&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;1.0&amp;lt;/string&amp;gt;&#xA;&amp;lt;/dict&amp;gt;&#xA;&amp;lt;/plist&amp;gt;&#xA;EOF&#xA;&#xA;xcrun simctl install booted MyGame.app/&#xA;xcrun simctl launch booted com.mygame&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For details and instructions on provisioning for real iphone, check &lt;a href=&#34;https://macroquad.rs/articles/ios/&#34;&gt;https://macroquad.rs/articles/ios/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Cross Compilation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA;# windows target from linux host:&#xA;# this is how windows builds are tested from linux machine:&#xA;rustup target add x86_64-pc-windows-gnu&#xA;cargo run --example quad --target x86_64-pc-windows-gnu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Goals&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Fast compilation time. Right now it is ~5s from &#34;cargo clean&#34; for both desktop and web.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Cross platform. Amount of platform specific user code required should be kept as little as possible.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Low-end devices support.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Hackability. Working on your own game, highly probable some hardware incompability will be found. Working around that kind of bugs should be easy, implementation details should not be hidden under layers of abstraction.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Forkability. Each platform implementation is, usually, just one pure Rust file. And this file is very copy-paste friendly - it doesnt use any miniquad specific abstractions. It is very easy to just copy some part of miniquad&#39;s platform implementation and use it standalone.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Non-goals&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Ultimate type safety. Library should be entirely safe in Rust&#39;s definition of safe - no UB or memory unsafety. But correct GPU state is not type guaranteed. Feel free to provide safety abstraction in the user code then!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;High-end API, like Vulkan/DirectX 12. Take a look on &lt;a href=&#34;https://github.com/gfx-rs/gfx&#34;&gt;gfx-rs&lt;/a&gt; or &lt;a href=&#34;https://github.com/vulkano-rs/vulkano&#34;&gt;vulkano&lt;/a&gt; instead!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Platinum sponsors&lt;/h1&gt; &#xA;&lt;p&gt;Miniquad is supported by:&lt;/p&gt; &#xA;&lt;p&gt; &lt;a href=&#34;https://embark-studios.com&#34;&gt; &lt;img src=&#34;https://www.embark.dev/img/logo_black.png&#34; width=&#34;201px&#34;&gt; &lt;/a&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mtshiba/pylyzer</title>
    <updated>2024-04-16T01:39:22Z</updated>
    <id>tag:github.com,2024-04-16:/mtshiba/pylyzer</id>
    <link href="https://github.com/mtshiba/pylyzer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fast static code analyzer &amp; language server for Python&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;pylyzer ⚡&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mtshiba/pylyzer/main/images/pylyzer-logo-with-letters.png&#34; alt=&#34;pylyzer_logo_with_letters&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=pylyzer.pylyzer&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener nofollow&#34;&gt;&lt;img src=&#34;https://img.shields.io/visual-studio-marketplace/v/pylyzer.pylyzer?style=flat&amp;amp;label=VS%20Marketplace&amp;amp;logo=visual-studio-code&#34; alt=&#34;vsm-version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mtshiba/pylyzer/releases&#34;&gt;&lt;img alt=&#34;Build status&#34; src=&#34;https://img.shields.io/github/v/release/mtshiba/pylyzer.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mtshiba/pylyzer/actions/workflows/rust.yml&#34;&gt;&lt;img alt=&#34;Build status&#34; src=&#34;https://github.com/mtshiba/pylyzer/actions/workflows/rust.yml/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pylyzer&lt;/code&gt; is a static code analyzer / language server for Python, written in Rust.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;pip&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install pylyzer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;cargo (rust package manager)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo install pylyzer --locked&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] Currently, the stable version of pylyzer cannot be installed with rustc &amp;gt;= 1.76.0 due to a dependency problem. Ref: &lt;a href=&#34;https://github.com/RustPython/Parser/issues/114&#34;&gt;https://github.com/RustPython/Parser/issues/114&lt;/a&gt; You can install the latest version from the source.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;build from source&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/mtshiba/pylyzer.git&#xA;cargo install --path .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure that &lt;code&gt;cargo/rustc&lt;/code&gt; is up-to-date, as pylyzer may be written with the latest language features.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/mtshiba/pylyzer/releases/latest&#34;&gt;GitHub Releases&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;What is the advantage over pylint, pyright, pytype, etc.?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Performance 🌟&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On average, pylyzer can inspect Python scripts more than &lt;strong&gt;100 times faster&lt;/strong&gt; than pytype and pyright &lt;a href=&#34;https://raw.githubusercontent.com/mtshiba/pylyzer/main/#1&#34;&gt;&lt;sup id=&#34;f1&#34;&gt;1&lt;/sup&gt;&lt;/a&gt;. This is largely due to the fact that pylyzer is implemented in Rust.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mtshiba/pylyzer/main/images/performance.png&#34; alt=&#34;performance&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Detailed analysis 🩺&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;pylyzer can do more than the type checking. For example, it can detect out-of-bounds accesses to lists and accesses to nonexistent keys in dicts.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mtshiba/pylyzer/main/images/analysis.png&#34; alt=&#34;analysis&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Reports readability 📖&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;While pytype/pyright&#39;s error reports are illegible, pylyzer shows where the error occurred and provides clear error messages.&lt;/p&gt; &#xA;&lt;h3&gt;pylyzer 😃&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mtshiba/pylyzer/main/images/report.png&#34; alt=&#34;report&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;pyright 🙃&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mtshiba/pylyzer/main/images/pyright_report.png&#34; alt=&#34;pyright_report&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Rich LSP support 📝&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;pylyzer as a language server supports various features, such as completion and renaming (The language server is an adaptation of the Erg Language Server (ELS). For more information on the implemented features, please see &lt;a href=&#34;https://github.com/erg-lang/erg/tree/main/crates/els#readme&#34;&gt;here&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mtshiba/pylyzer/main/images/lsp_support.png&#34; alt=&#34;lsp_support&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mtshiba/pylyzer/main/images/autoimport.gif&#34; alt=&#34;autoimport&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;VSCode extension&lt;/h2&gt; &#xA;&lt;p&gt;You can install the VSCode extension from the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=pylyzer.pylyzer&#34;&gt;Marketplace&lt;/a&gt; or from the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;code --install-extension pylyzer.pylyzer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;What is the difference from &lt;a href=&#34;https://github.com/charliermarsh/ruff&#34;&gt;Ruff&lt;/a&gt;?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/charliermarsh/ruff&#34;&gt;Ruff&lt;/a&gt;, like pylyzer, is a static code analysis tool for Python written in Rust, but Ruff is a linter and pylyzer is a type checker &amp;amp; language server. pylyzer does not perform linting, and Ruff does not perform type checking.&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;pylyzer uses the type checker of &lt;a href=&#34;https://erg-lang.org&#34;&gt;the Erg programming language&lt;/a&gt; internally. This language is a transpiled language that targets Python, and has a static type system.&lt;/p&gt; &#xA;&lt;p&gt;pylyzer converts Python ASTs to Erg ASTs and passes them to Erg&#39;s type checker. It then displays the results with appropriate modifications.&lt;/p&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;pylyzer&#39;s type inspector only assumes (potentially) statically typed code, so you cannot check any code uses reflections, such as &lt;code&gt;exec&lt;/code&gt;, &lt;code&gt;setattr&lt;/code&gt;, etc.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;pylyzer (= Erg&#39;s type system) has its own type declarations for the Python standard APIs. Typing of all APIs is not complete and may result in an error that such an API does not exist.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Since pylyzer&#39;s type checking is conservative, you may encounter many (possibly false positive) errors. We are working on fixing this, but if you are concerned about editor errors, please turn off the diagnostics feature.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;TODOs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; type checking &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; variable&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; operator&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; function/method&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; class&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; type inference &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; variable&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; operator&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; function/method&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; class&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; builtin modules resolving (partially)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; local scripts resolving&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; local packages resolving&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; collection types &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;list&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;dict&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;tuple&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;typing&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;Union&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;Optional&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;Literal&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;Callable&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;TypedDict&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; type variable (&lt;code&gt;TypeVar&lt;/code&gt;, &lt;code&gt;Generic&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;Protocol&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;Final&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;Annotated&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;TypeAlias&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; type guard (&lt;code&gt;TypeGuard&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; others&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;collections.abc&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;Iterable&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;Iterator&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;Mapping&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;Sequence&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; others&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; type assertion (&lt;code&gt;typing.cast&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; type narrowing (&lt;code&gt;is&lt;/code&gt;, &lt;code&gt;isinstance&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;span id=&#34;1&#34; style=&#34;font-size:x-small&#34;&gt;&lt;sup&gt;1&lt;/sup&gt; The performance test was conducted on MacBook (Early 2016) with 1.1 GHz Intel Core m3 processor and 8 GB 1867 MHz LPDDR3 memory.&lt;a href=&#34;https://raw.githubusercontent.com/mtshiba/pylyzer/main/#f1&#34;&gt;↩&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;</summary>
  </entry>
</feed>