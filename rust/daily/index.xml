<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-26T01:46:22Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>alloy-rs/core</title>
    <updated>2023-06-26T01:46:22Z</updated>
    <id>tag:github.com,2023-06-26:/alloy-rs/core</id>
    <link href="https://github.com/alloy-rs/core" rel="alternate"></link>
    <summary type="html">&lt;p&gt;High-performance, well-tested &amp; documented core libraries for Ethereum, in Rust&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Alloy&lt;/h1&gt; &#xA;&lt;p&gt;Core libraries at the root of the Rust Ethereum ecosystem.&lt;/p&gt; &#xA;&lt;p&gt;Alloy is a rewrite of ethers-rs from the ground up, with exciting new features, high performance &amp;amp; excellent docs. Ethers-rs will continue to be maintained until we have feature-parity in Alloy. No action is needed from devs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/alloy-rs/core/actions?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/alloy-rs/core/ci.yml?branch=main&amp;amp;style=for-the-badge&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://t.me/ethers_rs&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?color=neon&amp;amp;style=for-the-badge&amp;amp;url=https%3A%2F%2Ftg.sumanjay.workers.dev%2Fethers_rs&#34; alt=&#34;Telegram chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains the following crates:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alloy-rs/core/main/crates/primitives&#34;&gt;&lt;code&gt;alloy-primitives&lt;/code&gt;&lt;/a&gt; - Primitive integer and byte types&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alloy-rs/core/main/crates/rlp&#34;&gt;&lt;code&gt;alloy-rlp&lt;/code&gt;&lt;/a&gt; - Implementation of &lt;a href=&#34;https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp&#34;&gt;Ethereum RLP serialization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alloy-rs/core/main/crates/rlp-derive&#34;&gt;&lt;code&gt;alloy-rlp-derive&lt;/code&gt;&lt;/a&gt; - Derive macros for &lt;code&gt;alloy-rlp&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alloy-rs/core/main/crates/dyn-abi&#34;&gt;&lt;code&gt;alloy-dyn-abi&lt;/code&gt;&lt;/a&gt; - Run-time ABI and &lt;a href=&#34;https://eips.ethereum.org/EIPS/eip-712&#34;&gt;EIP-712&lt;/a&gt; implementations&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alloy-rs/core/main/crates/sol-types&#34;&gt;&lt;code&gt;alloy-sol-types&lt;/code&gt;&lt;/a&gt; - Compile-time ABI and &lt;a href=&#34;https://eips.ethereum.org/EIPS/eip-712&#34;&gt;EIP-712&lt;/a&gt; implementations&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alloy-rs/core/main/crates/sol-macro&#34;&gt;&lt;code&gt;alloy-sol-macro&lt;/code&gt;&lt;/a&gt; - The &lt;code&gt;sol!&lt;/code&gt; procedural macro&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alloy-rs/core/main/crates/syn-solidity&#34;&gt;&lt;code&gt;syn-solidity&lt;/code&gt;&lt;/a&gt; - &lt;a href=&#34;https://github.com/dtolnay/syn&#34;&gt;&lt;code&gt;syn&lt;/code&gt;&lt;/a&gt;-powered Solidity parser, used by &lt;code&gt;alloy-sol-macro&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Rust Versions&lt;/h2&gt; &#xA;&lt;!--&#xA;When updating this, also update:&#xA;- .clippy.toml&#xA;- Cargo.toml&#xA;- .github/workflows/ci.yml&#xA;--&gt; &#xA;&lt;p&gt;Alloy will keep a rolling MSRV (minimum supported rust version) policy of &lt;strong&gt;at least&lt;/strong&gt; 6 months. When increasing the MSRV, the new Rust version must have been released at least six months ago. The current MSRV is 1.65.0.&lt;/p&gt; &#xA;&lt;p&gt;Note that the MSRV is not increased automatically, and only as part of a minor release.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Thanks for your help improving the project! We are so happy to have you! We have &lt;a href=&#34;https://raw.githubusercontent.com/alloy-rs/core/main/CONTRIBUTING.md&#34;&gt;a contributing guide&lt;/a&gt; to help you get involved in the Alloy project.&lt;/p&gt; &#xA;&lt;p&gt;Pull requests will not be merged unless CI passes, so please ensure that your contribution follows the linting rules and passes clippy.&lt;/p&gt; &#xA;&lt;h2&gt;WASM support&lt;/h2&gt; &#xA;&lt;p&gt;We provide full support for all the &lt;code&gt;wasm*-*&lt;/code&gt; targets. If a crate does not build on a WASM target, please &lt;a href=&#34;https://github.com/alloy-rs/core/issues/new&#34;&gt;open an issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When building for the &lt;code&gt;wasm32-unknown-unknown&lt;/code&gt; target and the &lt;code&gt;&#34;getrandom&#34;&lt;/code&gt; feature is enabled, compilation for the &lt;code&gt;getrandom&lt;/code&gt; crate will fail. This is expected: see &lt;a href=&#34;https://docs.rs/getrandom/#webassembly-support&#34;&gt;their documentation&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;To fix this, either disable the &lt;code&gt;&#34;getrandom&#34;&lt;/code&gt; feature on &lt;code&gt;alloy-core&lt;/code&gt; or add &lt;code&gt;getrandom&lt;/code&gt; to your dependencies with the &lt;code&gt;&#34;js&#34;&lt;/code&gt; feature enabled:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;getrandom = { version = &#34;0.2&#34;, features = [&#34;js&#34;] }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is currently no plan to provide an official JS/TS-accessible library interface, as we believe &lt;a href=&#34;https://viem.sh&#34;&gt;viem&lt;/a&gt; or &lt;a href=&#34;https://docs.ethers.io/v6/&#34;&gt;ethers.js&lt;/a&gt; serve that need very well.&lt;/p&gt; &#xA;&lt;h2&gt;Note on &lt;code&gt;no_std&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;We intend these crates to support &lt;code&gt;no_std&lt;/code&gt; with &lt;code&gt;alloc&lt;/code&gt;, and have written them with that in mind. However, a key dependency, &lt;code&gt;ruint&lt;/code&gt;, does not yet support &lt;code&gt;no_std&lt;/code&gt;. We strive to maintain &lt;code&gt;no_std&lt;/code&gt; + &lt;code&gt;alloc&lt;/code&gt; compatibility, and intend to contribute upstream PRs to achieve it in ruint.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;None of these crates would have been possible without the great work done in:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ethers-io/ethers.js/&#34;&gt;&lt;code&gt;ethers.js&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tomusdrw/rust-web3/&#34;&gt;&lt;code&gt;rust-web3&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/recmo/uint&#34;&gt;&lt;code&gt;ruint&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rust-ethereum/ethabi&#34;&gt;&lt;code&gt;ethabi&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gnosis/ethcontract-rs/&#34;&gt;&lt;code&gt;ethcontract-rs&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/althea-net/guac_rs/&#34;&gt;&lt;code&gt;guac_rs&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>