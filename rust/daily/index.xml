<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-09T01:31:11Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>elodin-sys/elodin</title>
    <updated>2024-03-09T01:31:11Z</updated>
    <id>tag:github.com,2024-03-09:/elodin-sys/elodin</id>
    <link href="https://github.com/elodin-sys/elodin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Physics simulation software for space + aerospace&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.elodin.systems/&#34;&gt; &lt;img alt=&#34;banner&#34; src=&#34;https://github.com/elodin-sys/elodin/assets/1129228/0e0197e9-12ec-42bd-b377-fa3ced2a1b7e&#34;&gt; &lt;/a&gt; &lt;/h1&gt; &#xA;&lt;p&gt;Elodin is a platform for rapid design, testing, and simulation of drones, satellites, and aerospace control systems.&lt;/p&gt; &#xA;&lt;p&gt;Quick Demo: &lt;a href=&#34;https://app.elodin.systems/sandbox/hn/cube-sat&#34;&gt;https://app.elodin.systems/sandbox/hn/cube-sat&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sandbox Alpha: &lt;a href=&#34;https://app.elodin.systems&#34;&gt;https://app.elodin.systems&lt;/a&gt;&lt;br&gt; Docs (WIP): &lt;a href=&#34;https://docs.elodin.systems&#34;&gt;https://docs.elodin.systems&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository is a collection of core libraries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;libs/nox&lt;/code&gt;: Tensor library that compiles to XLA (like JAX, but for Rust).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libs/nox-ecs&lt;/code&gt;: Rust ECS framework built to work with JAX and Nox, that allows you to build your own physics engine.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libs/nox-py&lt;/code&gt;: Python version of &lt;code&gt;nox-ecs&lt;/code&gt;, that works with JAX&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libs/nox-ecs-macros&lt;/code&gt;: Derive macros to generate implementations of ECS and Nox traits.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libs/conduit&lt;/code&gt;: Column-based protocol for transferring ECS data between different systems.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libs/xla-rs&lt;/code&gt;: Rust bindings to XLA&#39;s C++ API (originally based on &lt;a href=&#34;https://github.com/LaurentMazare/xla-rs&#34;&gt;https://github.com/LaurentMazare/xla-rs&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Join us on Discord: &lt;a href=&#34;https://discord.gg/agvGJaZXy5&#34;&gt;https://discord.gg/agvGJaZXy5&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Rust using &lt;a href=&#34;https://rustup.rs&#34;&gt;https://rustup.rs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Setup a new venv with:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fish&#34;&gt;python3 -m venv .venv&#xA; . .venv/bin/activate.fish # or activate.sh if you do not use fish&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Install &lt;code&gt;elodin&lt;/code&gt;, and &lt;code&gt;matplotlib&lt;/code&gt; with&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fish&#34;&gt;pip install libs/nox-py&#xA;pip install matplotlib&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Try running the following code&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt&#xA;import jax.numpy as np&#xA;from elodin import *&#xA;&#xA;@system&#xA;def gravity(q: Query[WorldPos]) -&amp;gt; Query[Force]:&#xA;  return q.map(Force, lambda _p: Force.from_linear(np.array([0.0, -9.81, 0.0])))&#xA;&#xA;@system&#xA;def bounce(q: Query[WorldPos, WorldVel]) -&amp;gt; Query[WorldVel]:&#xA;  return q.map(WorldVel, lambda p, v: jax.lax.cond(&#xA;    jax.lax.max(p.linear()[1], v.linear()[1]) &amp;lt; 0.0,&#xA;    lambda _: WorldVel.from_linear(v.linear() * np.array([1.,-1.,1.]) * 0.85),&#xA;    lambda _: v,&#xA;    operand=None&#xA;  ))&#xA;&#xA;w = WorldBuilder()&#xA;w.spawn(&#xA;    Body(&#xA;        world_pos=WorldPos.from_linear(np.array([0.0, 10.0, 0.0])),&#xA;        world_vel=WorldVel.from_linear(np.array([0.0, 0.0, 0.0])),&#xA;        inertia=Inertia.from_mass(1.0),&#xA;    )&#xA;)&#xA;client = Client.cpu()&#xA;exec = w.build(bounce.pipe(six_dof(1.0 / 60.0, gravity)))&#xA;t = range(500)&#xA;pos = []&#xA;for _ in t:&#xA;    exec.run(client)&#xA;    y = exec.column_array(ComponentId(&#34;world_pos&#34;))[0, 5]&#xA;    pos.append(y)&#xA;fig, ax = plt.subplots()&#xA;ax.plot(t, pos)&#xA;plt.show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under either of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elodin-sys/elodin/main/LICENSES/Apache-2.0.txt&#34;&gt;Apache License, Version 2.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elodin-sys/elodin/main/LICENSES/MIT.txt&#34;&gt;MIT License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;at your option.&lt;/p&gt; &#xA;&lt;h3&gt;Contribution&lt;/h3&gt; &#xA;&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.&lt;/p&gt;</summary>
  </entry>
</feed>