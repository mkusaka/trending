<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-17T01:46:35Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Privoce/vocechat-server-rust</title>
    <updated>2023-02-17T01:46:35Z</updated>
    <id>tag:github.com,2023-02-17:/Privoce/vocechat-server-rust</id>
    <link href="https://github.com/Privoce/vocechat-server-rust" rel="alternate"></link>
    <summary type="html">&lt;p&gt;VoceChat is a superlight rust written social server. Easy integration to your site/app.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Re-decentralized the Internet through personal cloud computing.&lt;/h1&gt; &#xA;&lt;h2&gt;VoceChat is the &lt;code&gt;lightest&lt;/code&gt; chat server prioritizes private hosting! Easy integratation to your app with our open API!&lt;/h2&gt; &#xA;&lt;h3&gt;Quick run&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d --restart=always \&#xA;  -p 3009:3000 \&#xA;  --name vocechat-server \&#xA;  Privoce/vocechat-server:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On browser visit: &lt;a href=&#34;http://localhost:3009/&#34;&gt;http://localhost:3009/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Contact us&lt;/h3&gt; &#xA;&lt;p&gt;Doc: &lt;a href=&#34;https://doc.voce.chat&#34;&gt;https://doc.voce.chat&lt;/a&gt;&lt;br&gt; Chat with us: &lt;a href=&#34;https://voce.chat&#34;&gt;https://voce.chat&lt;/a&gt;&lt;br&gt; Email: &lt;a href=&#34;https://raw.githubusercontent.com/Privoce/vocechat-server-rust/main/han@privoce.com&#34;&gt;han@privoce.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Welcome your help of any form--code, issues, blog articles, social media shares.&lt;/h3&gt; &#xA;&lt;h1&gt;Goal&lt;/h1&gt; &#xA;&lt;p&gt;The goal of Voce is to provide a space owned by &#34;you&#34; on the Internet, just as the name &#34;voce&#34; means in portguese. As cloud computing getting matured, there will be a time in the foreseeable future that netizens like you and me can enjoy the benefit of having a personal cloud space on the Internet--like iCloud, while not only will you have storage, but also a personalized computing layer.&lt;/p&gt; &#xA;&lt;p&gt;Why do we need a private cloud space? The short answer is that information will become our private property and means of communication will be under the control of every netizen.&lt;/p&gt; &#xA;&lt;p&gt;Digital technologies including Internet and the Web make information duplicable and transferable, yet platforms are controlling the ownership and means of production and transmission of most information (content) on the Internet. We are building Voce as an open-sourced tool (not a platform) to empower smaller groups and individuals to become a platform themselves. When various servers get connected to each other, all the information shared among the servers will be duplicated and become the server owner&#39;s private data under private storages.&lt;/p&gt; &#xA;&lt;h1&gt;Personal cloud&lt;/h1&gt; &#xA;&lt;p&gt;We need a &#34;home&#34; as our private property on the Internet, and this home should have features more than just storage. No matter you choose NAS, AWS, Raspberry Pi or your local PC to run VoceChat, it is your own private property--yes, public cloud services like AWS purchased by you is commercially your own property and the data in your cloud is protected from accessing by the public cloud service providers. Features including but not limited to instant messaging, activity posts, private video calls, notes, whiteboard are all desiring and useful on your personal cloud server. Personal cloud is the new PC, and there will be a new software layer with some shared traits--distributed by URL(web app), good API, interoperable profiles. Privoce is currently working on this software layer of personal cloud.&lt;/p&gt; &#xA;&lt;h1&gt;Why Rust&lt;/h1&gt; &#xA;&lt;p&gt;Personal cloud needs efficent solutions. This Rust written server is less than 20MB and runs with great efficiency. Hosting a 20MB private social media server is much more accessible than a 300MB one. Just like cars v. bus, or single family home v. hotels, if Facebook is a grand hotel, VoceChat is like a house. If Matrix and Mastodon are buses, VoceChat is like a car. The next paradigm of the internet is serverless functions + personal storage. Making VoceChat serverless is also a next step.&lt;/p&gt; &#xA;&lt;h1&gt;Webhook, bot, and ways to get interconnected (work in progress)&lt;/h1&gt; &#xA;&lt;p&gt;Social media cannot always stay private if people want new information to be transferred among different servers. The word &#34;social&#34; in social media means multiple nodes communicate with multiple nodes in a synced space (mass to mass). A channel (private or public) should serve the end of this mass to mass data sharing and syncing space. Channel should function as a shared good where members who joined should have the right to store the same chat data (use their server)--this may one day functions like Bitcoin, yet currently, efficiency should be more prioritiezed and admin of the channel could have the right to assign different &#34;power&#34; to members. We have implemented both inbound and outbound webhooks so that it&#39;s possible to sync messages from a VoceChat channel to another channel (slack, discord, or VoceChat) though you will need to write your own server side code to personalize this process (this could be troublesome, and again, serverless could be a good solution).&lt;/p&gt; &#xA;&lt;p&gt;We also found bot super interesting and personal bot services may replace platforms--e.g., we are training some bots based on GPT api that can be added to VoceChat.&lt;/p&gt; &#xA;&lt;p&gt;If you have a proposal on how multiple servers could get interconnected, e.g., should we support Matrix protocal, or other protocal, feel free to share your thougts in the discussions, or directly discuss it with at our chat at &lt;a href=&#34;https://voce.chat&#34;&gt;https://voce.chat&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Free for personal use, require license for non-personal use.&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;VoceChat&lt;/code&gt; is an open-source commercial software. The VoceChat server is the smallest, stablest and most efficient independent chat server on today&#39;s market, which is good for integration to your own app. VoceChat official image is free for personal use, which we define as equal or less than 20 registered users, if you want to integrate VoceChat to your own app/site for a larger user base, you have to purchase a license. The license is 49$/version.&lt;/p&gt; &#xA;&lt;p&gt;Our team also provide customization service. We also provide resale license for NAS and cloud providers who want to collaborate with us.&lt;/p&gt; &#xA;&lt;h3&gt;Project composition:&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Tech&lt;/th&gt; &#xA;   &lt;th&gt;Project&lt;/th&gt; &#xA;   &lt;th&gt;License&lt;/th&gt; &#xA;   &lt;th&gt;Comment&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Server&lt;/td&gt; &#xA;   &lt;td&gt;Rust&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/privoce/vocechat-server-rust&#34;&gt;vocechat-server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Big Time Public License&lt;/td&gt; &#xA;   &lt;td&gt;Server supports Linux, Windows, ARM32/64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Server image&lt;/td&gt; &#xA;   &lt;td&gt;Docker, Shell&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/privoce/vocechat-server/tags&#34;&gt;vocechat-docker&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Creative Commons Attribution-NonCommercial 4.0 International&lt;/td&gt; &#xA;   &lt;td&gt;Official image supports Linux, ARM64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;APP Client&lt;/td&gt; &#xA;   &lt;td&gt;Flutter&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/privoce/vocechat-client&#34;&gt;vocechat-client&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GPLv3&lt;/td&gt; &#xA;   &lt;td&gt;Client supports Android and IOS platforms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Web Client&lt;/td&gt; &#xA;   &lt;td&gt;React&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/privoce/vocechat-web&#34;&gt;vocechat-web&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GPLv3&lt;/td&gt; &#xA;   &lt;td&gt;Web App, integrated management&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Documentation&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docusaurus.io&#34;&gt;docusaurus&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/privoce/vocechat-doc&#34;&gt;vocechat-doc&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GPLv3&lt;/td&gt; &#xA;   &lt;td&gt;Vocechat document website&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Feature list &amp;amp; roadmap&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; DM &amp;amp; Group Chating / 2021-Q4&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Reply, @ to mention a person / 2021-Q4&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Images and large files transmission / 2021-Q4&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Pin / 2022-Q1&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Forward / 2022-Q1&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Favorate / 2022-Q1&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Auto-delete my messages / 2022-Q2&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Voice (now support agora) / 2022-Q4&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Video (now support agora)/ 2022-Q4&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Bot and Webhook (inbound and outbound)/ 2022-Q4&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Role based permission control/ Undecided&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Post, based on ActivityPub/ Undecided&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Matrix Bridge/ Undecided&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Chat with us: &lt;a href=&#34;https://voce.chat&#34;&gt;https://voce.chat&lt;/a&gt; Email: &lt;a href=&#34;mailto:han@privoce.com&#34;&gt;han@privoce.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tandasat/Hypervisor-101-in-Rust</title>
    <updated>2023-02-17T01:46:35Z</updated>
    <id>tag:github.com,2023-02-17:/tandasat/Hypervisor-101-in-Rust</id>
    <link href="https://github.com/tandasat/Hypervisor-101-in-Rust" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The materials of &#34;Hypervisor 101 in Rust&#34;, a one-day long course, to quickly learn hardware-assisted virtualization technology and its application for high-performance fuzzing on Intel/AMD processors.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hypervisor 101 in Rust&lt;/h1&gt; &#xA;&lt;p&gt;The materials of the &#34;Hypervisor 101 in Rust&#34; class held at &lt;a href=&#34;https://gcc.ac/gcc_2023/&#34;&gt;Global Cybersecurity Camp 2023 Singapore&lt;/a&gt;. This repository contains a fuzzing hypervisor for UEFI on Intel/AMD processors, lecture and hands-on exercise materials, and sample corpus and target files.&lt;/p&gt; &#xA;&lt;p&gt;Read the course at &lt;a href=&#34;https://tandasat.github.io/Hypervisor-101-in-Rust/&#34;&gt;https://tandasat.github.io/Hypervisor-101-in-Rust/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Directory structure&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📖&lt;a href=&#34;https://raw.githubusercontent.com/tandasat/Hypervisor-101-in-Rust/main/course/&#34;&gt;course/&lt;/a&gt; for the class materials&lt;/li&gt; &#xA; &lt;li&gt;🦀&lt;a href=&#34;https://raw.githubusercontent.com/tandasat/Hypervisor-101-in-Rust/main/hypervisor/&#34;&gt;hypervisor/&lt;/a&gt; for source code and a detailed description of the fuzzing hypervisor&lt;/li&gt; &#xA; &lt;li&gt;⚙️&lt;a href=&#34;https://raw.githubusercontent.com/tandasat/Hypervisor-101-in-Rust/main/BUILDING.md&#34;&gt;BUILDING.md&lt;/a&gt; for building and funning the hypervisor with sample files under &lt;a href=&#34;https://raw.githubusercontent.com/tandasat/Hypervisor-101-in-Rust/main/tests/&#34;&gt;tests/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Course format&lt;/h2&gt; &#xA;&lt;p&gt;The class materials are designed for an interactive classroom setting and less effective for self-learning due to light explanations. We decided to publish this as it would still be useful to some, however. If you are interested in the interactive class with the author, please check out the schedule of the next public class at &lt;a href=&#34;https://tandasat.github.io/&#34;&gt;System Programming Lab&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Host (class and development) environment &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;📎Windows + WSL&lt;/li&gt; &#xA;   &lt;li&gt;🍎macOS&lt;/li&gt; &#xA;   &lt;li&gt;🐧Ubuntu&lt;/li&gt; &#xA;   &lt;li&gt;Apple Silicon-based macOS, ARM64-based Windows and Ubuntu are also supported. No x64 system required.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Test (target) environment &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Hardware &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Bochs&lt;/li&gt; &#xA;     &lt;li&gt;VMware Fusion or Workstation Pro (if a host has Intel or AMD processors)&lt;/li&gt; &#xA;     &lt;li&gt;Select bare metal models&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;with UEFI&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Andrew Burkett (@drewkett) and Rich Seymour (@rseymour) for mentoring me about Rust&lt;/li&gt; &#xA; &lt;li&gt;Karsten König (@gr4yf0x) and Amir Bazine for encouraging me looking into use of hypervisors for fuzzing&lt;/li&gt; &#xA; &lt;li&gt;Brandon Falk (@gamozolabs) for his inspirational work, Falkvisor&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>paritytech/ink</title>
    <updated>2023-02-17T01:46:35Z</updated>
    <id>tag:github.com,2023-02-17:/paritytech/ink</id>
    <link href="https://github.com/paritytech/ink" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Parity&#39;s ink! to write smart contracts.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/paritytech/ink/master/.images/ink-logo-glow.svg?sanitize=true&#34; alt=&#34;ink!&#34; height=&#34;136&#34;&gt; &#xA; &lt;h1 align=&#34;center&#34;&gt; Parity&#39;s ink! for writing smart contracts &lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://gitlab.parity.io/parity/ink/pipelines?ref=master&#34;&gt;&lt;img src=&#34;https://gitlab.parity.io/parity/ink/badges/master/pipeline.svg?sanitize=true&#34; alt=&#34;linux&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/paritytech/ink/branch/master&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/paritytech/ink/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/paritytech/ink?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/paritytech/ink/badge.svg?branch=master&#34; alt=&#34;coveralls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Aaronepower/tokei#badges&#34;&gt;&lt;img src=&#34;https://tokei.rs/b1/github/paritytech/ink?category=code&#34; alt=&#34;loc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://substrate.stackexchange.com/questions/tagged/ink?tab=Votes&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/click-white.svg?logo=StackExchange&amp;amp;label=ink!%20Support%20on%20StackExchange&amp;amp;labelColor=white&amp;amp;color=blue&#34; alt=&#34;stack-exchange&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/paritytech/ink/master/.images/ink-squid.svg?sanitize=true&#34; alt=&#34;squink, the ink! mascot&#34; style=&#34;vertical-align: middle&#34; align=&#34;left&#34; height=&#34;60&#34;&gt;ink! is an &lt;a href=&#34;https://wiki.haskell.org/Embedded_domain_specific_language&#34;&gt;eDSL&lt;/a&gt; to write smart contracts in Rust for blockchains built on the &lt;a href=&#34;https://github.com/paritytech/substrate&#34;&gt;Substrate&lt;/a&gt; framework. ink! contracts are compiled to WebAssembly.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://docs.substrate.io/tutorials/smart-contracts/&#34;&gt;Guided Tutorial for Beginners&lt;/a&gt;&amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://use.ink&#34;&gt;ink! Documentation Portal&lt;/a&gt;&amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://paritytech.github.io/ink/ink&#34;&gt;Developer Documentation&lt;/a&gt;&lt;/p&gt; &#xA; &lt;br&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;More relevant links:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://substrate.stackexchange.com/questions/tagged/ink?tab=Votes&#34;&gt;Substrate Stack Exchange&lt;/a&gt; ‒ Forum for getting your ink! questions answered&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/paritytech/cargo-contract&#34;&gt;&lt;code&gt;cargo-contract&lt;/code&gt;&lt;/a&gt; ‒ CLI tool for ink! contracts&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://contracts-ui.substrate.io/&#34;&gt;Contracts UI&lt;/a&gt; ‒ Frontend for contract instantiation and interaction&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/paritytech/substrate-contracts-node&#34;&gt;Substrate Contracts Node&lt;/a&gt; ‒ Simple Substrate blockchain which includes smart contract functionality&lt;/li&gt; &#xA; &lt;li&gt;We post announcements on &lt;a href=&#34;https://app.element.io/#/room/#ink:matrix.parity.io&#34;&gt;Matrix&lt;/a&gt; and &lt;a href=&#34;https://discord.com/invite/wGUDt2p&#34;&gt;Discord&lt;/a&gt; (in the &lt;a href=&#34;https://discord.com/channels/722223075629727774/765280480609828864&#34;&gt;&lt;code&gt;ink_smart-contracts&lt;/code&gt;&lt;/a&gt; channel).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paritytech/ink/master/#play-with-it&#34;&gt;Play with It&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paritytech/ink/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paritytech/ink/master/#hello-world--the-flipper&#34;&gt;Hello, World! ‒ The Flipper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paritytech/ink/master/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paritytech/ink/master/#how-it-works&#34;&gt;How it Works&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paritytech/ink/master/#ink-macros--attributes-overview&#34;&gt;ink! Macros &amp;amp; Attributes Overview&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paritytech/ink/master/#entry-point&#34;&gt;Entry Point&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paritytech/ink/master/#trait-definitions&#34;&gt;Trait Definitions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paritytech/ink/master/#off-chain-testing&#34;&gt;Off-chain Testing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paritytech/ink/master/#developer-documentation&#34;&gt;Developer Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paritytech/ink/master/#community-badges&#34;&gt;Community Badges&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paritytech/ink/master/#normal-design&#34;&gt;Normal Design&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paritytech/ink/master/#flat-design&#34;&gt;Flat Design&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paritytech/ink/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paritytech/ink/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Play with It&lt;/h2&gt; &#xA;&lt;p&gt;If you want to have a local setup you can use our &lt;a href=&#34;https://github.com/paritytech/substrate-contracts-node&#34;&gt;&lt;code&gt;substrate-contracts-node&lt;/code&gt;&lt;/a&gt; for a quickstart. It&#39;s a simple Substrate blockchain which includes the Substrate module for smart contract functionality ‒ the &lt;code&gt;contracts&lt;/code&gt; pallet (see &lt;a href=&#34;https://raw.githubusercontent.com/paritytech/ink/master/#how-it-works&#34;&gt;How it Works&lt;/a&gt; for more).&lt;/p&gt; &#xA;&lt;p&gt;We also have a live testnet on &lt;a href=&#34;https://github.com/paritytech/cumulus/#rococo-&#34;&gt;Rococo&lt;/a&gt;. Rococo is a Substrate based parachain which supports ink! smart contracts. For further instructions on using this testnet, follow the instructions in &lt;a href=&#34;https://use.ink/testnet&#34;&gt;our documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For both types of chains the &lt;a href=&#34;https://contracts-ui.substrate.io/&#34;&gt;Contracts UI&lt;/a&gt; can be used to instantiate your contract to a chain and interact with it.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;A prerequisite for compiling smart contracts is to have Rust and Cargo installed. Here&#39;s &lt;a href=&#34;https://doc.rust-lang.org/cargo/getting-started/installation.html&#34;&gt;an installation guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We recommend installing &lt;a href=&#34;https://github.com/paritytech/cargo-contract&#34;&gt;&lt;code&gt;cargo-contract&lt;/code&gt;&lt;/a&gt; as well. It&#39;s a CLI tool which helps set up and manage WebAssembly smart contracts written with ink!:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install cargo-contract --force&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;--force&lt;/code&gt; to ensure you are updated to the most recent &lt;code&gt;cargo-contract&lt;/code&gt; version.&lt;/p&gt; &#xA;&lt;p&gt;In order to initialize a new ink! project you can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo contract new flipper&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a folder &lt;code&gt;flipper&lt;/code&gt; in your work directory. The folder contains a scaffold &lt;code&gt;Cargo.toml&lt;/code&gt; and a &lt;code&gt;lib.rs&lt;/code&gt;, which both contain the necessary building blocks for using ink!.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;lib.rs&lt;/code&gt; contains our hello world contract ‒ the &lt;code&gt;Flipper&lt;/code&gt;, which we explain in the next section.&lt;/p&gt; &#xA;&lt;p&gt;In order to build the contract just execute this command in the &lt;code&gt;flipper&lt;/code&gt; folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo contract build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As a result you&#39;ll get a &lt;code&gt;target/flipper.wasm&lt;/code&gt; file, a &lt;code&gt;metadata.json&lt;/code&gt; file and a &lt;code&gt;&amp;lt;contract-name&amp;gt;.contract&lt;/code&gt; file in the &lt;code&gt;target&lt;/code&gt; folder of your contract. The &lt;code&gt;.contract&lt;/code&gt; file combines the Wasm and metadata into one file and needs to be used when instantiating the contract.&lt;/p&gt; &#xA;&lt;h2&gt;Hello, World! ‒ The Flipper&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;Flipper&lt;/code&gt; contract is a simple contract containing only a single &lt;code&gt;bool&lt;/code&gt; value.&lt;/p&gt; &#xA;&lt;p&gt;It provides methods to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;flip its value from &lt;code&gt;true&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; (and vice versa) and&lt;/li&gt; &#xA; &lt;li&gt;return the current state.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Below you can see the code using ink!.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;#[ink::contract]&#xA;mod flipper {&#xA;    /// The storage of the flipper contract.&#xA;    #[ink(storage)]&#xA;    pub struct Flipper {&#xA;        /// The single `bool` value.&#xA;        value: bool,&#xA;    }&#xA;&#xA;    impl Flipper {&#xA;        /// Instantiates a new Flipper contract and initializes&#xA;        /// `value` to `init_value`.&#xA;        #[ink(constructor)]&#xA;        pub fn new(init_value: bool) -&amp;gt; Self {&#xA;            Self {&#xA;                value: init_value,&#xA;            }&#xA;        }&#xA;&#xA;        /// Flips `value` from `true` to `false` or vice versa.&#xA;        #[ink(message)]&#xA;        pub fn flip(&amp;amp;mut self) {&#xA;            self.value = !self.value;&#xA;        }&#xA;&#xA;        /// Returns the current state of `value`.&#xA;        #[ink(message)]&#xA;        pub fn get(&amp;amp;self) -&amp;gt; bool {&#xA;            self.value&#xA;        }&#xA;    }&#xA;&#xA;    /// Simply execute `cargo test` in order to test your contract&#xA;    /// using the below unit tests.&#xA;    #[cfg(test)]&#xA;    mod tests {&#xA;        use super::*;&#xA;&#xA;        #[ink::test]&#xA;        fn it_works() {&#xA;            let mut flipper = Flipper::new(false);&#xA;            assert_eq!(flipper.get(), false);&#xA;            flipper.flip();&#xA;            assert_eq!(flipper.get(), true);&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/paritytech/ink/raw/master/examples/flipper/lib.rs&#34;&gt;&lt;code&gt;flipper/src/lib.rs&lt;/code&gt;&lt;/a&gt; file in our examples folder contains exactly this code. Run &lt;code&gt;cargo contract build&lt;/code&gt; to build your first ink! smart contract.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;In the &lt;a href=&#34;https://github.com/paritytech/ink/tree/master/examples&#34;&gt;&lt;code&gt;examples&lt;/code&gt;&lt;/a&gt; folder you&#39;ll find a number of examples written in ink!.&lt;/p&gt; &#xA;&lt;p&gt;Some of the most interesting ones:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;delegator&lt;/code&gt; ‒ Implements cross-contract calling.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;trait-erc20&lt;/code&gt; ‒ Defines a trait for &lt;code&gt;Erc20&lt;/code&gt; contracts and implements it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;erc721&lt;/code&gt; ‒ An exemplary implementation of &lt;code&gt;Erc721&lt;/code&gt; NFT tokens.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dns&lt;/code&gt; ‒ A simple &lt;code&gt;DomainNameService&lt;/code&gt; smart contract.&lt;/li&gt; &#xA; &lt;li&gt;…and more, just rummage through the folder 🙃.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To build a single example navigate to the root of the example and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo contract build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should now have an &lt;code&gt;&amp;lt;name&amp;gt;.contract&lt;/code&gt; file in the &lt;code&gt;target&lt;/code&gt; folder of the contract.&lt;/p&gt; &#xA;&lt;p&gt;For information on how to upload this file to a chain, please have a look at the &lt;a href=&#34;https://raw.githubusercontent.com/paritytech/ink/master/#play-with-it&#34;&gt;Play with It&lt;/a&gt; section or our &lt;a href=&#34;https://docs.substrate.io/tutorials/v3/ink-workshop/pt1&#34;&gt;smart contracts workshop&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How it Works&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Substrate&#39;s &lt;a href=&#34;https://docs.substrate.io/v3/runtime/frame&#34;&gt;Framework for Runtime Aggregation of Modularized Entities (FRAME)&lt;/a&gt; contains a module which implements an API for typical functions smart contracts need (storage,querying information about accounts, …). This module is called the &lt;code&gt;contracts&lt;/code&gt; pallet,&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;contracts&lt;/code&gt; pallet requires smart contracts to be uploaded to the blockchain as a Wasm blob.&lt;/li&gt; &#xA; &lt;li&gt;ink! is a smart contract language which targets the API exposed by &lt;code&gt;contracts&lt;/code&gt;. Hence ink! contracts are compiled to Wasm.&lt;/li&gt; &#xA; &lt;li&gt;When executing &lt;code&gt;cargo contract build&lt;/code&gt; an additional file &lt;code&gt;metadata.json&lt;/code&gt; is created. It contains information about e.g. what methods the contract provides for others to call.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ink! Macros &amp;amp; Attributes Overview&lt;/h2&gt; &#xA;&lt;h3&gt;Entry Point&lt;/h3&gt; &#xA;&lt;p&gt;In a module annotated with &lt;code&gt;#[ink::contract]&lt;/code&gt; these attributes are available:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Attribute&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Where Applicable&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;#[ink(storage)]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;On &lt;code&gt;struct&lt;/code&gt; definitions.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Defines the ink! storage struct. There can only be one ink! storage definition per contract.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;#[ink(message)]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Applicable to methods.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Flags a method for the ink! storage struct as message making it available to the API for calling the contract.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;#[ink(constructor)]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Applicable to method.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Flags a method for the ink! storage struct as constructor making it available to the API for instantiating the contract.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;#[ink(event)]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;On &lt;code&gt;struct&lt;/code&gt; definitions.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Defines an ink! event. A contract can define multiple such ink! events.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;#[ink(anonymous)]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Applicable to ink! events.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Tells the ink! codegen to treat the ink! event as anonymous which omits the event signature as topic upon emitting. Very similar to anonymous events in Solidity.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;#[ink(topic)]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Applicable on ink! event field.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Tells the ink! codegen to provide a topic hash for the given field. Every ink! event can only have a limited number of such topic fields. Similar semantics as to indexed event arguments in Solidity.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;#[ink(payable)]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Applicable to ink! messages.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Allows receiving value as part of the call of the ink! message. ink! constructors are implicitly payable.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;#[ink(selector = S:u32)]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Applicable to ink! messages and ink! constructors.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Specifies a concrete dispatch selector for the flagged entity. This allows a contract author to precisely control the selectors of their APIs making it possible to rename their API without breakage.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;#[ink(selector = _)]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Applicable to ink! messages.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Specifies a fallback message that is invoked if no other ink! message matches a selector.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;#[ink(namespace = N:string)]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Applicable to ink! trait implementation blocks.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Changes the resulting selectors of all the ink! messages and ink! constructors within the trait implementation. Allows to disambiguate between trait implementations with overlapping message or constructor names. Use only with great care and consideration!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;#[ink(impl)]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Applicable to ink! implementation blocks.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Tells the ink! codegen that some implementation block shall be granted access to ink! internals even without it containing any ink! messages or ink! constructors.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://paritytech.github.io/ink/ink/attr.contract.html&#34;&gt;here&lt;/a&gt; for a more detailed description of those and also for details on the &lt;code&gt;#[ink::contract]&lt;/code&gt; macro.&lt;/p&gt; &#xA;&lt;h3&gt;Trait Definitions&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;#[ink::trait_definition]&lt;/code&gt; to define your very own trait definitions that are then implementable by ink! smart contracts. See e.g. the &lt;a href=&#34;https://github.com/paritytech/ink/raw/v3.0.0-rc5/examples/trait-erc20/lib.rs#L35-L37&#34;&gt;&lt;code&gt;examples/trait-erc20&lt;/code&gt;&lt;/a&gt; contract on how to utilize it or &lt;a href=&#34;https://paritytech.github.io/ink/ink/attr.trait_definition.html&#34;&gt;the documentation&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h3&gt;Off-chain Testing&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;#[ink::test]&lt;/code&gt; procedural macro enables off-chain testing. See e.g. the &lt;a href=&#34;https://github.com/paritytech/ink/raw/v3.0.0-rc5/examples/erc20/lib.rs#L248-L250&#34;&gt;&lt;code&gt;examples/erc20&lt;/code&gt;&lt;/a&gt; contract on how to utilize those or &lt;a href=&#34;https://paritytech.github.io/ink/ink/attr.test.html&#34;&gt;the documentation&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Developer Documentation&lt;/h2&gt; &#xA;&lt;p&gt;We have &lt;a href=&#34;https://use.ink&#34;&gt;a very comprehensive documentation portal&lt;/a&gt;, but if you are looking for the crate level documentation itself, then these are the relevant links:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Crate&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Docs&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;ink&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://paritytech.github.io/ink/ink&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/click-blue.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Language features exposed by ink!. See &lt;a href=&#34;https://paritytech.github.io/ink/ink/attr.contract.html&#34;&gt;here&lt;/a&gt; for a detailed description of attributes which you can use in an &lt;code&gt;#[ink::contract]&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;ink_storage&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://paritytech.github.io/ink/ink_storage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/click-blue.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Data structures available in ink!.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;ink_env&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://paritytech.github.io/ink/ink_env&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/click-blue.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Low-level interface for interacting with the smart contract Wasm executor. Contains &lt;a href=&#34;https://paritytech.github.io/ink/ink_env/test/index.html&#34;&gt;the off-chain testing API&lt;/a&gt; as well.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;ink_prelude&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://paritytech.github.io/ink/ink_prelude&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/click-blue.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Common API for no_std and std to access alloc crate types.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Community Badges&lt;/h2&gt; &#xA;&lt;h3&gt;Normal Design&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/paritytech/ink&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/paritytech/ink/master/.images/badge.svg?sanitize=true&#34; alt=&#34;Built with ink!&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;[![Built with ink!](https://raw.githubusercontent.com/paritytech/ink/master/.images/badge.svg)](https://github.com/paritytech/ink)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Flat Design&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/paritytech/ink&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/paritytech/ink/master/.images/badge_flat.svg?sanitize=true&#34; alt=&#34;Built with ink!&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;[![Built with ink!](https://raw.githubusercontent.com/paritytech/ink/master/.images/badge_flat.svg)](https://github.com/paritytech/ink)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Visit our &lt;a href=&#34;https://raw.githubusercontent.com/paritytech/ink/master/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;Use the scripts provided under &lt;code&gt;scripts/check-*&lt;/code&gt; directory in order to run checks on either the workspace or all examples. Please do this before pushing work in a PR.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The entire code within this repository is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/paritytech/ink/master/LICENSE&#34;&gt;Apache License 2.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please &lt;a href=&#34;https://www.parity.io/contact/&#34;&gt;contact us&lt;/a&gt; if you have questions about the licensing of our products.&lt;/p&gt;</summary>
  </entry>
</feed>