<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-08T01:35:42Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>PhilippRados/wrecc</title>
    <updated>2024-04-08T01:35:42Z</updated>
    <id>tag:github.com,2024-04-08:/PhilippRados/wrecc</id>
    <link href="https://github.com/PhilippRados/wrecc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A x86_64 C99 compiler written in Rust from scratch&lt;/p&gt;&lt;hr&gt;&lt;div&gt; &#xA; &lt;p align=&#34;left&#34;&gt; &lt;img src=&#34;https://i.ibb.co/1bfxpbb/wreckage-mj.jpg&#34; width=&#34;800&#34;&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/PhilippRados/wrecc/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/PhilippRados/wrecc/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Test&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/license/PhilippRados/wrecc&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/made_for-UNIX-lightgrey&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Architecture-x86--64-blue&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;wrecc&lt;/code&gt; is a small,lean x86-64 C99 compiler written from scratch. The name is a play on the word &lt;em&gt;wreck&lt;/em&gt; which describes a rusting ship on the sea floor. The compiler emits &lt;a href=&#34;https://en.wikipedia.org/wiki/X86-64&#34;&gt;x86-64&lt;/a&gt; assembly in &lt;a href=&#34;https://staffwww.fullcoll.edu/aclifton/courses/cs241/syntax.html&#34;&gt;AT&amp;amp;T syntax&lt;/a&gt;, it adheres to the &lt;a href=&#34;https://wiki.osdev.org/System_V_ABI&#34;&gt;System V ABI&lt;/a&gt; which I could only test for Ubuntu and Macos. There are no dependencies you only need your assembler and linker which the compiler then invokes to create the final binary.&lt;/p&gt; &#xA;&lt;h3&gt;Table of contents&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PhilippRados/wrecc/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PhilippRados/wrecc/master/#binaries&#34;&gt;Pre-built binaries&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PhilippRados/wrecc/master/#cargo&#34;&gt;Cargo&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PhilippRados/wrecc/master/#features&#34;&gt;Features&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PhilippRados/wrecc/master/#preprocessor&#34;&gt;Preprocessor&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PhilippRados/wrecc/master/#compiler&#34;&gt;Compiler&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PhilippRados/wrecc/master/#keywords&#34;&gt;Supported keywords&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PhilippRados/wrecc/master/#unimplemented&#34;&gt;Unimplemented features&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PhilippRados/wrecc/master/#errors&#34;&gt;Error messages&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PhilippRados/wrecc/master/#ast&#34;&gt;Ast pretty-printer&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PhilippRados/wrecc/master/#testing&#34;&gt;Testing&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PhilippRados/wrecc/master/#unit&#34;&gt;Unit-tests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PhilippRados/wrecc/master/#snap&#34;&gt;Snapshot-tests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PhilippRados/wrecc/master/#fuzzer&#34;&gt;Fuzzer&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PhilippRados/wrecc/master/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PhilippRados/wrecc/master/#contribution&#34;&gt;Contribution&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PhilippRados/wrecc/master/#goals&#34;&gt;Project goals&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PhilippRados/wrecc/master/#resources&#34;&gt;Resources&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Pre-built binaries &lt;a name=&#34;binaries&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If you don&#39;t have the rust toolchain installed on your system you can install the latest binary (MacOs, Linux) from the releases directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl --proto &#39;=https&#39; --tlsv1.2 -LsSf https://github.com/PhilippRados/wrecc/releases/download/v0.1.0/wrecc-installer.sh | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cargo&lt;/h3&gt; &#xA;&lt;p&gt;Using &lt;code&gt;cargo binstall&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo binstall wrecc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or building from source&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install wrecc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Since not all keywords are currently implemented wrecc uses &lt;a href=&#34;https://github.com/PhilippRados/wrecc/tree/master/include&#34;&gt;custom standard-headers&lt;/a&gt; which are built directly into the binary&lt;/p&gt; &#xA;&lt;h3&gt;Preprocessor&lt;/h3&gt; &#xA;&lt;p&gt;The preprocessor implements all &lt;a href=&#34;https://en.cppreference.com/w/c/keyword&#34;&gt;C99 preprocessor directives&lt;/a&gt;, except &lt;code&gt;#line&lt;/code&gt;, &lt;code&gt;#error&lt;/code&gt; and &lt;code&gt;#pragma&lt;/code&gt;. Most prominently it currently also misses function-like macros which are on the agenda though.&lt;/p&gt; &#xA;&lt;h3&gt;Compiler&lt;/h3&gt; &#xA;&lt;h4&gt;Supported Keywords &lt;a name=&#34;keywords&#34;&gt;&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;img width=&#34;487&#34; alt=&#34;keywords&#34; src=&#34;https://github.com/PhilippRados/wrecc/assets/60818062/b738b6e0-9ca3-4a8d-9a5a-e1a6da0c31ed&#34;&gt; &#xA;&lt;h4&gt;Other than that it even supports:&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Aggregate initialization with designated initializers&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;struct {&#xA;  union {&#xA;    int foo;&#xA;    long baz;&#xA;  } nested;&#xA;  int array[16];&#xA;} bar = { .nested.foo = 3, .array[6] = 1};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Function pointers&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&#xA;&#xA;typedef int (*BinaryOperation)(int, int);&#xA;typedef struct {&#xA;  BinaryOperation add;&#xA;  BinaryOperation subtract;&#xA;} Calculator;&#xA;&#xA;int add(int a, int b) { return a + b; }&#xA;int subtract(int a, int b) { return a - b; }&#xA;&#xA;int main() {&#xA;  Calculator calc = {add, subtract};&#xA;&#xA;  printf(&#34;Result of addition: %d\n&#34;, calc.add(10, 5));&#xA;  printf(&#34;Result of subtraction: %d\n&#34;, calc.subtract(10, 5));&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Constant folding&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;char **string_offset = (char **)&amp;amp;&#34;hello&#34; + (int)(3 * 1);&#xA;int array[(long)3 * 2 - 1];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;Unimplemented Features &lt;a name=&#34;unimplemented&#34;&gt;&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Aside from the missing keywords these are the main missing features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[&amp;nbsp;]&amp;nbsp;Arrays with unspecified size&lt;/li&gt; &#xA; &lt;li&gt;[&amp;nbsp;]&amp;nbsp;Raw structs/unions as function argument-/return-types&lt;/li&gt; &#xA; &lt;li&gt;[&amp;nbsp;]&amp;nbsp;Floating point types&lt;br&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here is a list of all the stuff still missing: &lt;a href=&#34;https://placid-eris-c19.notion.site/check-all-errors-from-c-testsuite-6f3fa2a3c24a4711b5e89f45354db540&#34;&gt;todo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Error messages &lt;a name=&#34;errors&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Wrecc also has nice looking messages. Error reporting doesn&#39;t stop after the first error. Using the &lt;code&gt;--no-color&lt;/code&gt; option you can switch off color-highlighting in errors. Currently there are only errors and no warnings.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;C code&lt;/th&gt; &#xA;   &lt;th&gt;Errors&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;int foo(void);&#xA;int main() {&#xA;  int a = foo(1);&#xA;  long *p = a;&#xA;&#xA;  return p * 2;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img width=&#34;535&#34; alt=&#34;error&#34; src=&#34;https://github.com/PhilippRados/wrecc/assets/60818062/0b0e0c9f-3600-460c-9da5-1705ef0f83d9&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Ast pretty-printer &lt;a name=&#34;ast&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;When compiling using the &lt;code&gt;--dump-ast&lt;/code&gt; option it prints the parse-tree&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;C code&lt;/th&gt; &#xA;   &lt;th&gt;AST&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;#define SIZE 16&#xA;void foo(char);&#xA;int main() {&#xA;  int arr[SIZE] = {1, 2};&#xA;  char p = (char)(*arr + 3);&#xA;&#xA;  switch (p) {&#xA;  case &#39;c&#39;:&#xA;    foo(p);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code&gt;Declaration:&#xA;-Decl: &#39;foo&#39;&#xA;FuncDef: &#39;main&#39;&#xA;-Declaration:&#xA;--Init: &#39;arr&#39;&#xA;---Aggregate:&#xA;----Scalar:&#xA;-----Literal: 1&#xA;----Scalar:&#xA;-----Literal: 2&#xA;-Declaration:&#xA;--Init: &#39;p&#39;&#xA;---Scalar:&#xA;----Cast: &#39;char&#39;&#xA;-----Grouping:&#xA;------Binary: &#39;+&#39;&#xA;-------Unary: &#39;*&#39;&#xA;--------Ident: &#39;arr&#39;&#xA;-------Literal: 3&#xA;-Switch:&#xA;--Ident: &#39;p&#39;&#xA;--Block:&#xA;---Case:&#xA;----Literal: 99&#xA;----Expr:&#xA;-----FuncCall:&#xA;------Ident: &#39;foo&#39;&#xA;------Ident: &#39;p&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Inspect all options by running &lt;code&gt;wrecc --help&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;h4&gt;Unit tests &lt;a name=&#34;unit&#34;&gt;&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo test --workspace&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Snapshot testing &lt;a name=&#34;snap&#34;&gt;&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This runs all &lt;a href=&#34;https://github.com/PhilippRados/wrecc/tree/master/tests/fixtures&#34;&gt;fixtures&lt;/a&gt; and compares them to the expected &lt;a href=&#34;https://github.com/PhilippRados/wrecc/tree/master/tests/snapshots&#34;&gt;snapshot&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash tests/snapshot_tests.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Fuzzer&lt;/h4&gt; &#xA;&lt;p&gt;Runs the fuzzer using &lt;a href=&#34;https://github.com/rust-fuzz/afl.rs&#34;&gt;afl.rs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;// in fuzzer directory&#xA;cargo afl build&#xA;cargo afl fuzz -i inputs -o outputs target/debug/fuzz_target&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;Reasons for &lt;code&gt;wrecc&lt;/code&gt; not working properly on your machine:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Unsupported architecture/OS&lt;/li&gt; &#xA; &lt;li&gt;Cannot find libc in standard library search paths (can be fixed by passing custom search path using &lt;code&gt;-L &amp;lt;path&amp;gt;&lt;/code&gt; option)&lt;/li&gt; &#xA; &lt;li&gt;If it&#39;s not mentioned in the &lt;a href=&#34;https://raw.githubusercontent.com/PhilippRados/wrecc/master/#unimplemented&#34;&gt;unimplemented features&lt;/a&gt; section then please raise an issue&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;If you want to help me with this compiler I would really welcome it. The easiest place to start is probably by implementing one of the missing keywords/types mentioned in the &lt;a href=&#34;https://raw.githubusercontent.com/PhilippRados/wrecc/master/#unimplemented&#34;&gt;unimplemented features&lt;/a&gt; section. Make sure all tests still pass and implement your own if it&#39;s something new that is not already being tested.&lt;br&gt; Have a look at the &lt;a href=&#34;https://docs.rs/wrecc_compiler/latest/wrecc_compiler/&#34;&gt;documentation&lt;/a&gt; to get a high level overview of the compiler pipeline.&lt;/p&gt; &#xA;&lt;h2&gt;Project goals &lt;a name=&#34;goals&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Not relying on custom headers&lt;/li&gt; &#xA; &lt;li&gt;Passing all C99 tests in &lt;a href=&#34;https://github.com/c-testsuite/c-testsuite&#34;&gt;c-testsuite&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Compiling multiple files at once&lt;/li&gt; &#xA; &lt;li&gt;Compiling real-world C projects like &lt;a href=&#34;https://github.com/git/git/tree/master&#34;&gt;Git&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;p&gt;The following resources helped me in building this compiler:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://craftinginterpreters.com/&#34;&gt;Crafting Interpreters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Engineering a Compiler (Book)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DoctorWkt/acwj&#34;&gt;acwj&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jyn514/saltwater&#34;&gt;saltwater&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rui314/chibicc&#34;&gt;chibicc&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>