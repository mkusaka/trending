<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-03T01:35:07Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Timmmm/anakin</title>
    <updated>2024-04-03T01:35:07Z</updated>
    <id>tag:github.com,2024-04-03:/Timmmm/anakin</id>
    <link href="https://github.com/Timmmm/anakin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Kill orphan processes&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Anakin&lt;/h1&gt; &#xA;&lt;p&gt;This is a tool that runs another command, and kills all the orphans it generates.&lt;/p&gt; &#xA;&lt;p&gt;When a process is killed on Linux, its children are not automatically killed too. Instead they get reparented to the init process (the first process started by the kernel) and live on. In many cases this is not what you want.&lt;/p&gt; &#xA;&lt;p&gt;In particular this was written to handle &lt;code&gt;gitlab-runner&lt;/code&gt; which runs CI jobs. When a job times out &lt;code&gt;gitlab-runner&lt;/code&gt; only kills the process that it started. Any child processes of that may be orphaned and continue running.&lt;/p&gt; &#xA;&lt;p&gt;Anakin uses Linux&#39;s &lt;code&gt;PR_SET_CHILD_SUBREAPER&lt;/code&gt; feature to mark itself as the &#34;child subreaper&#34;, which means any descendants that are orphaned get reparented to this process, instead of the init process. This process then periodically polls its children and kills any that have been orphaned to it.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to install this is with &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 -m pip install anakin2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you have Rust:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install anakin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;There are no arguments. Just prefix your command with &lt;code&gt;anakin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Instead of&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my_program --some --args&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;anakin my_program --some --args&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Logging&lt;/h2&gt; &#xA;&lt;p&gt;Logging is controlled by the following environment variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ANAKIN_LOG&lt;/code&gt;, e.g. &lt;code&gt;ANAKIN_LOG=info&lt;/code&gt; will print when orphans are killed. The default level is &lt;code&gt;error&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ANAKIN_LOG_STYLE&lt;/code&gt; controls the colour output. It can be &lt;code&gt;auto&lt;/code&gt; (default), &lt;code&gt;always&lt;/code&gt; or &lt;code&gt;never&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ANAKIN_LOG_FILE&lt;/code&gt; if set logs to that filename, plus the process ID. Otherwise it logs to stderr.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This is licensed under the MIT license. See the &lt;code&gt;LICENSE-MIT&lt;/code&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hcavarsan/kftray</title>
    <updated>2024-04-03T01:35:07Z</updated>
    <id>tag:github.com,2024-04-03:/hcavarsan/kftray</id>
    <link href="https://github.com/hcavarsan/kftray" rel="alternate"></link>
    <summary type="html">&lt;p&gt;kubect port-forward on steroids 🚀 kftray makes it easy for you to manage and share multiple k8s port forwards right from your menu bar - built with rust 🦀 and ts using tauri&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/hcavarsan/kftray/main/img/logo.png&#34; alt=&#34;KFtray Logo&#34; width=&#34;192&#34; height=&#34;192&#34;&gt; &#xA; &lt;h1&gt;KFtray&lt;/h1&gt; &#xA; &lt;!-- Badges --&gt; &#xA; &lt;a href=&#34;https://nodejs.org/en/&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Node-v21.5.0-brightgreen.svg?style=for-the-badge&#34; alt=&#34;Node.js version&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://tauri.app/&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Tauri-v1.6.1-brightgreen.svg?style=for-the-badge&#34; alt=&#34;Tauri version&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://react.dev&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/React-v18.2.0-brightgreen.svg?style=for-the-badge&#34; alt=&#34;React version&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://www.rust-lang.org/&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Rust-v1.75.0-brightgreen.svg?style=for-the-badge&#34; alt=&#34;Rust version&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/hcavarsan/kftray/releases/latest&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/hcavarsan/kftray/total.svg?style=for-the-badge&#34; alt=&#34;downloads&#34;&gt; &lt;/a&gt; &#xA; &lt;div align=&#34;center&#34;&gt; &#xA;  &lt;h3&gt;A cross-platform system tray app for Kubernetes port-forward management.&lt;/h3&gt; &#xA;  &lt;br&gt; &#xA;  &lt;div&gt; &#xA;   &lt;a href=&#34;https://github.com/hcavarsan/kftray/releases/latest/download/kftray_0.9.0_universal.dmg&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/-Download for macOS-grey.svg?style=for-the-badge&amp;amp;logo=apple&#34; alt=&#34;Download for macOS&#34;&gt; &lt;/a&gt; &#xA;   &lt;a href=&#34;https://github.com/hcavarsan/kftray/releases/latest/download/kftray_0.9.0_x64-setup.exe&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/-Download for Windows-grey.svg?style=for-the-badge&amp;amp;logo=windows&#34; alt=&#34;Download for Windows&#34;&gt; &lt;/a&gt; &#xA;   &lt;a href=&#34;https://github.com/hcavarsan/kftray/releases/latest/download/kftray_0.9.0_amd64.AppImage&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/-Download for Linux-grey.svg?style=for-the-badge&amp;amp;logo=linux&#34; alt=&#34;Download for Linux&#34;&gt; &lt;/a&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;br&gt; &#xA; &lt;/div&gt; &#xA; &lt;h2&gt;Video Demo&lt;/h2&gt; &#xA; &lt;table align=&#34;center&#34;&gt; &#xA;  &lt;tbody&gt;&#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Demo: GitHub Sync&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Demo: Adding a New Configuration&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=BAdL7IzaEh8&#34;&gt; &lt;img src=&#34;https://img.youtube.com/vi/BAdL7IzaEh8/0.jpg&#34; alt=&#34;Kftray Demo: Github Sync&#34; width=&#34;256&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=nqEhmcKeCc4&#34;&gt; &lt;img src=&#34;https://img.youtube.com/vi/nqEhmcKeCc4/0.jpg&#34; alt=&#34;Kftray Demo: Adding a new configuration&#34; width=&#34;256&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt;&#xA; &lt;/table&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;kftray is a cross-platform system tray app made with Tauri (Rust and TypeScript) for Kubernetes users. It simplifies setting up multiple kubectl port forward configurations through a user-friendly interface. Easily store and manage all configurations from local files or GitHub repositories.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Learn More:&lt;/strong&gt; &lt;a href=&#34;https://kftray.hashnode.dev/kubernetes-debugging-handling-multiple-kubectl-port-forward-from-tray&#34;&gt;Blog Post - Kubernetes Debugging with KFtray&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hcavarsan/kftray/main/#-features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hcavarsan/kftray/main/#-installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hcavarsan/kftray/main/#-usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hcavarsan/kftray/main/#-architecture&#34;&gt;Architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hcavarsan/kftray/main/#-contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hcavarsan/kftray/main/#-license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🚀 Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Resilient Port Forwarding Connection:&lt;/strong&gt; Ensures continuous service even if a pod dies, by reconnecting to another running pod automatically.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;One-Click Multiple Port Forwards:&lt;/strong&gt; Allows for the setup of several port forwarding instances at the same time with a single click.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Independent of Kubectl:&lt;/strong&gt; Directly interfaces with the Kubernetes API, eliminating the need for &lt;code&gt;kubectl&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi-Protocol Support:&lt;/strong&gt; Enables access to internal or external servers through a Proxy Relay server deployed in a Kubernetes cluster, including TCP and UDP port forwarding.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Import Configs from Git:&lt;/strong&gt; Store and import configurations directly from Git repositories with a few clicks.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📦 Installation&lt;/h2&gt; &#xA;&lt;p&gt;KFtray is available for macOS and Linux users via Homebrew, and directly from the GitHub releases page for other systems. Here&#39;s how you can get started:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;For macOS and Linux:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA;brew tap hcavarsan/kftray&#xA;&#xA;brew install --HEAD kftray&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For other systems, visit the &lt;a href=&#34;https://github.com/hcavarsan/kftray/releases&#34;&gt;GitHub releases page&lt;/a&gt; for downloadable binaries.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Please check the caveats section for global app creation instructions after installation.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🧭 Usage&lt;/h2&gt; &#xA;&lt;h2&gt;🎛 Configuring Your First Port Forward&lt;/h2&gt; &#xA;&lt;p&gt;In a few simple steps, you can configure your first port forward:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Launch the application&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Open the configuration panel from the tray icon&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Add a new configuration:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Give it a unique alias and set if you want to set the alias as domain to your forward&lt;/li&gt; &#xA;   &lt;li&gt;Indicate if the configuration is for a port forward for a service (common use) or a proxy (port forward to an endpoint via a Kubernetes cluster).&lt;/li&gt; &#xA;   &lt;li&gt;Specify the Kubernetes context&lt;/li&gt; &#xA;   &lt;li&gt;Define the namespace housing your service&lt;/li&gt; &#xA;   &lt;li&gt;Enter the service name&lt;/li&gt; &#xA;   &lt;li&gt;Choose TCP or UDP&lt;/li&gt; &#xA;   &lt;li&gt;Set the local and remote port numbers&lt;/li&gt; &#xA;   &lt;li&gt;Configure a custom local IP address (optional)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Activate Your Configuration&lt;/strong&gt;: With your configuration saved, simply click on the switch button in the main menu to start the port forward in a single por forward or in Start All to start all configurations at the same time .&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Export configurations to a JSON file&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open the main menu in the footer&lt;/li&gt; &#xA; &lt;li&gt;Select the &lt;code&gt;Export Local File&lt;/code&gt; option&lt;/li&gt; &#xA; &lt;li&gt;Choose a file name and location to save the JSON file&lt;/li&gt; &#xA; &lt;li&gt;The JSON file will contain all your current configurations&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can then import this JSON file at any time to restore your configurations.&lt;/p&gt; &#xA;&lt;p&gt;Example Json configuration File:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[&#xA; {&#xA;  &#34;service&#34;: &#34;argocd-server&#34;,&#xA;  &#34;namespace&#34;: &#34;argocd&#34;,&#xA;  &#34;local_port&#34;: 8888,&#xA;  &#34;remote_port&#34;: 8080,&#xA;  &#34;context&#34;: &#34;test-cluster&#34;,&#xA;  &#34;workload_type&#34;: &#34;service&#34;,&#xA;  &#34;protocol&#34;: &#34;tcp&#34;,&#xA;  &#34;remote_address&#34;: &#34;&#34;,&#xA;  &#34;local_address&#34;: &#34;127.0.0.1&#34;,&#xA;  &#34;alias&#34;: &#34;argocd&#34;,&#xA;  &#34;domain_enabled&#34;: true&#xA; }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sharing the configurations through Git&lt;/h2&gt; &#xA;&lt;p&gt;now, with the local json saved, you can share your configurations with your team members by committing the JSON file to a Github repository. This allows for easy collaboration and synchronization of KFtray configurations across your team.&lt;/p&gt; &#xA;&lt;p&gt;To import and sync your github configs in kftray:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the application&#39;s main menu&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Select the button with github icon in the footer menu&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enter the URL of your Git repository and path containing the JSON file&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If your GitHub repository is private, you will need to enter the private token. Credentials are securely saved in the SO keyring (Keychain on macOS). Kftray does not store or save credentials in any local file; they are only stored in the local keyring.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Select the polling time for when Kftray will synchronize configurations and retrieve them from GitHub.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;KFtray will now sync with the Git repository to automatically import any new configurations or changes committed to the JSON file.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This allows you to quickly deploy any port forward changes to all team members. And if someone on your team adds a new configuration, it will be automatically synced to everyone else&#39;s KFtray.&lt;/p&gt; &#xA;&lt;h2&gt;Building from Source&lt;/h2&gt; &#xA;&lt;h4&gt;Requirements&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Node.js and pnpm or yarn for building the frontend.&lt;/li&gt; &#xA; &lt;li&gt;Rust for building the backend.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To compile &lt;code&gt;kftray&lt;/code&gt;, these steps should be followed:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/hcavarsan/kftray.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Navigate to the cloned directory: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd kftray&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install dependencies: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Launch the application in development mode: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm run tauri dev&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;🏗 Architecture&lt;/h2&gt; &#xA;&lt;h3&gt;Server&lt;/h3&gt; &#xA;&lt;p&gt;KFtray Server is a Rust application that relays UDP/TCP traffic to an upstream server. Check the source code &lt;a href=&#34;https://github.com/hcavarsan/kftray/tree/main/kftray-server&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Forwarding Flows&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;TCP Forwarding:&lt;/strong&gt; A local TCP socket, similar to kubectl, can be used to communicate with a Kubernetes pod. This approach offers parallel execution and improved resilience.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;sequenceDiagram&#xA;Application-&amp;gt;&amp;gt;Kubernetes Pod: Opens TCP socket, starts port-forwarding&#xA;Kubernetes Pod--&amp;gt;&amp;gt;Application: Responds with TCP Packet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Proxy TCP Forwarding:&lt;/strong&gt; The local TCP connects to the kftray-server pod, which then sends TCP packet to the upstream server.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;sequenceDiagram&#xA;Application-&amp;gt;&amp;gt;Kubernetes Pod: Socket to kftray-server, facilitates TCP relay&#xA;Kubernetes Pod-&amp;gt;&amp;gt;Remote Service: Relays TCP Packet&#xA;Remote Service--&amp;gt;&amp;gt;Kubernetes Pod: Responds&#xA;Kubernetes Pod--&amp;gt;&amp;gt;Application: Returns TCP Packet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;UDP Forwarding:&lt;/strong&gt; The KFtray client opens a local UDP socket and connects a local TCP socket to the kftray-server pod. The TCP socket sends UDP packets over TCP, which are then forwarded to the upstream server.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;sequenceDiagram&#xA;Application-&amp;gt;&amp;gt;Kubernetes Pod: UDP socket, TCP port-forward to kftray-server&#xA;Kubernetes Pod-&amp;gt;&amp;gt;Service/Remote: Converts to UDP, sends packet&#xA;Service/Remote--&amp;gt;&amp;gt;Kubernetes Pod: Responds with UDP Packet&#xA;Kubernetes Pod--&amp;gt;&amp;gt;Application: Relays as TCP&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;👥 Contributing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🛠 &lt;strong&gt;Pull Requests&lt;/strong&gt;: Feel free to create pull requests for bug fixes, new features, or improvements.&lt;/li&gt; &#xA; &lt;li&gt;📝 &lt;strong&gt;Issues&lt;/strong&gt;: Report bugs, suggest new features, or ask questions.&lt;/li&gt; &#xA; &lt;li&gt;💡 &lt;strong&gt;Feedback&lt;/strong&gt;: Your feedback helps improve kftray.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📄 License&lt;/h2&gt; &#xA;&lt;p&gt;KFtray is available under the &lt;a href=&#34;https://raw.githubusercontent.com/hcavarsan/kftray/main/LICENSE.md&#34;&gt;MIT License&lt;/a&gt;, which is included in the repository. See the LICENSE file for full details.&lt;/p&gt; &#xA;&lt;h2&gt;Stargazers over time&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/hcavarsan/kftray&#34;&gt;&lt;img src=&#34;https://starchart.cc/hcavarsan/kftray.svg?variant=dark&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributors ✨&lt;/h2&gt; &#xA;&lt;p&gt;Thanks goes to these wonderful people (&lt;a href=&#34;https://allcontributors.org/docs/en/emoji-key&#34;&gt;emoji key&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt; &#xA;&lt;!-- prettier-ignore-start --&gt; &#xA;&lt;!-- markdownlint-disable --&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/hcavarsan&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/30353685?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Henrique Cavarsan&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Henrique Cavarsan&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/hcavarsan/kftray/commits?author=hcavarsan&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;http://fandujar.dev&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/6901387?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Filipe Andujar&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Filipe Andujar&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/hcavarsan/kftray/commits?author=fandujar&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- markdownlint-restore --&gt; &#xA;&lt;!-- prettier-ignore-end --&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt; &#xA;&lt;p&gt;This project follows the &lt;a href=&#34;https://github.com/all-contributors/all-contributors&#34;&gt;all-contributors&lt;/a&gt; specification. Contributions of any kind welcome!&lt;/p&gt;</summary>
  </entry>
</feed>