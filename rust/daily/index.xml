<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-07T01:34:56Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>samizdatco/skia-canvas</title>
    <updated>2024-12-07T01:34:56Z</updated>
    <id>tag:github.com,2024-12-07:/samizdatco/skia-canvas</id>
    <link href="https://github.com/samizdatco/skia-canvas" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A GPU-accelerated 2D graphics environment for Node.js&lt;/p&gt;&lt;hr&gt;&lt;a href=&#34;https://skia-canvas.org&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;docs/assets/hero-dark@2x.png&#34;&gt; &#xA;  &lt;img alt=&#34;Skia Canvas&#34; src=&#34;https://raw.githubusercontent.com/samizdatco/skia-canvas/main/docs/assets/hero@2x.png&#34;&gt; &#xA; &lt;/picture&gt; &lt;/a&gt; &#xA;&lt;hr&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;http://skia-canvas.org/getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA; &lt;span&gt;&amp;nbsp;&amp;nbsp;·&amp;nbsp;&amp;nbsp;&lt;/span&gt; &#xA; &lt;a href=&#34;http://skia-canvas.org/api&#34;&gt;Documentation&lt;/a&gt; &#xA; &lt;span&gt;&amp;nbsp;&amp;nbsp;·&amp;nbsp;&amp;nbsp;&lt;/span&gt; &#xA; &lt;a href=&#34;http://skia-canvas.org/releases&#34;&gt;Release Notes&lt;/a&gt; &#xA; &lt;span&gt;&amp;nbsp;&amp;nbsp;·&amp;nbsp;&amp;nbsp;&lt;/span&gt; &#xA; &lt;a href=&#34;https://github.com/samizdatco/skia-canvas/discussions&#34;&gt;Discussion Forum&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Skia Canvas is a browser-less implementation of the HTML Canvas drawing API for Node.js. It is based on Google’s &lt;a href=&#34;https://skia.org&#34;&gt;Skia&lt;/a&gt; graphics engine and, accordingly, produces very similar results to Chrome’s &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element. The library is well suited for use on desktop machines where you can render hardware-accelerated graphics to a window and on the server where it can output a variety of image formats.&lt;/p&gt; &#xA;&lt;p&gt;While the primary goal of this project is to provide a reliable emulation of the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API&#34;&gt;standard API&lt;/a&gt; according to the &lt;a href=&#34;https://html.spec.whatwg.org/multipage/canvas.html&#34;&gt;spec&lt;/a&gt;, it also extends it in a number of areas to take greater advantage of Skia&#39;s advanced graphical features and provide a more expressive coding environment.&lt;/p&gt; &#xA;&lt;p&gt;In particular, Skia Canvas:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;is fast and compact since rendering takes place on the GPU and all the heavy lifting is done by native code written in Rust and C++&lt;/li&gt; &#xA; &lt;li&gt;can render to &lt;a href=&#34;https://skia-canvas.org/api/window&#34;&gt;windows&lt;/a&gt; using an OS-native graphics pipeline and provides a browser-like &lt;a href=&#34;https://skia-canvas.org/api/window#on--off--once&#34;&gt;UI event&lt;/a&gt; framework&lt;/li&gt; &#xA; &lt;li&gt;generates images in both raster (JPEG, PNG, &amp;amp; WEBP) and vector (PDF &amp;amp; SVG) formats&lt;/li&gt; &#xA; &lt;li&gt;can save images to &lt;a href=&#34;https://skia-canvas.org/api/canvas#saveas&#34;&gt;files&lt;/a&gt;, return them as &lt;a href=&#34;https://skia-canvas.org/api/canvas#tobuffer&#34;&gt;Buffers&lt;/a&gt;, or encode &lt;a href=&#34;https://skia-canvas.org/api/canvas#todataurl&#34;&gt;dataURL&lt;/a&gt; strings&lt;/li&gt; &#xA; &lt;li&gt;uses native threads in a &lt;a href=&#34;https://skia-canvas.org/getting-started#multithreading&#34;&gt;user-configurable&lt;/a&gt; worker pool for asynchronous rendering and file I/O&lt;/li&gt; &#xA; &lt;li&gt;can create &lt;a href=&#34;https://skia-canvas.org/api/canvas#newpage&#34;&gt;multiple ‘pages’&lt;/a&gt; on a given canvas and then &lt;a href=&#34;https://skia-canvas.org/api/canvas#saveas&#34;&gt;output&lt;/a&gt; them as a single, multi-page PDF or an image-sequence saved to multiple files&lt;/li&gt; &#xA; &lt;li&gt;can &lt;a href=&#34;https://skia-canvas.org/api/path2d#simplify&#34;&gt;simplify&lt;/a&gt;, &lt;a href=&#34;https://skia-canvas.org/api/path2d#round&#34;&gt;blunt&lt;/a&gt;, &lt;a href=&#34;https://skia-canvas.org/api/path2d#complement-difference-intersect-union-and-xor&#34;&gt;combine&lt;/a&gt;, &lt;a href=&#34;https://skia-canvas.org/api/path2d#trim&#34;&gt;excerpt&lt;/a&gt;, and &lt;a href=&#34;https://skia-canvas.org/api/path2d#points&#34;&gt;atomize&lt;/a&gt; bézier paths using &lt;a href=&#34;https://www.youtube.com/watch?v=OmfliNQsk88&#34;&gt;efficient&lt;/a&gt; boolean operations or point-by-point &lt;a href=&#34;https://skia-canvas.org/api/path2d#interpolate&#34;&gt;interpolation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;provides &lt;a href=&#34;https://skia-canvas.org/api/context#createprojection&#34;&gt;3D perspective&lt;/a&gt; transformations in addition to &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/scale&#34;&gt;scaling&lt;/a&gt;, &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rotate&#34;&gt;rotation&lt;/a&gt;, and &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/translate&#34;&gt;translation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;can fill shapes with vector-based &lt;a href=&#34;https://skia-canvas.org/api/context#createtexture&#34;&gt;Textures&lt;/a&gt; in addition to bitmap-based &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createPattern&#34;&gt;Patterns&lt;/a&gt; and supports line-drawing with custom &lt;a href=&#34;https://skia-canvas.org/api/context#linedashmarker&#34;&gt;markers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;supports the full set of &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/filter&#34;&gt;CSS filter&lt;/a&gt; image processing operators&lt;/li&gt; &#xA; &lt;li&gt;offers rich typographic control including: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;multi-line, &lt;a href=&#34;https://skia-canvas.org/api/context#textwrap&#34;&gt;word-wrapped&lt;/a&gt; text&lt;/li&gt; &#xA;   &lt;li&gt;line-by-line &lt;a href=&#34;https://skia-canvas.org/api/context#measuretext&#34;&gt;text metrics&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;small-caps, ligatures, and other opentype features accessible using standard &lt;a href=&#34;https://skia-canvas.org/api/context#fontvariant&#34;&gt;font-variant&lt;/a&gt; syntax&lt;/li&gt; &#xA;   &lt;li&gt;proportional &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/letterSpacing&#34;&gt;letter-spacing&lt;/a&gt;, &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/wordSpacing&#34;&gt;word-spacing&lt;/a&gt;, and &lt;a href=&#34;https://skia-canvas.org/api/context#font&#34;&gt;leading&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;support for &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Fonts/Variable_Fonts_Guide&#34;&gt;variable fonts&lt;/a&gt; and transparent mapping of weight values&lt;/li&gt; &#xA;   &lt;li&gt;use of non-system fonts &lt;a href=&#34;https://skia-canvas.org/api/font-library#use&#34;&gt;loaded&lt;/a&gt; from local files&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;If you’re running on a supported platform, installation should be as simple as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install skia-canvas&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will download a pre-compiled library from the project’s most recent &lt;a href=&#34;https://github.com/samizdatco/skia-canvas/releases&#34;&gt;release&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Platform Support&lt;/h2&gt; &#xA;&lt;p&gt;The underlying Rust library uses &lt;a href=&#34;https://nodejs.org/api/n-api.html#node-api-version-matrix&#34;&gt;N-API&lt;/a&gt; v8 which allows it to run on Node.js versions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;v12.22+&lt;/li&gt; &#xA; &lt;li&gt;v14.17+&lt;/li&gt; &#xA; &lt;li&gt;v15.12+&lt;/li&gt; &#xA; &lt;li&gt;v16.0.0 and later&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Pre-compiled binaries are available for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux (x64 &amp;amp; arm64)&lt;/li&gt; &#xA; &lt;li&gt;macOS (x64 &amp;amp; Apple silicon)&lt;/li&gt; &#xA; &lt;li&gt;Windows (x64)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Nearly everything you need is statically linked into the library. A notable exception is the &lt;a href=&#34;https://www.freedesktop.org/wiki/Software/fontconfig/&#34;&gt;Fontconfig&lt;/a&gt; library which must be installed separately if you’re running on Linux.&lt;/p&gt; &#xA;&lt;h2&gt;Running in Docker&lt;/h2&gt; &#xA;&lt;p&gt;The library is compatible with Linux systems using &lt;a href=&#34;https://www.gnu.org/software/libc/&#34;&gt;glibc&lt;/a&gt; 2.28 or later as well as Alpine Linux (x64 &amp;amp; arm64) and the &lt;a href=&#34;https://musl.libc.org&#34;&gt;musl&lt;/a&gt; C library it favors. In both cases, Fontconfig must be installed on the system for &lt;code&gt;skia-canvas&lt;/code&gt; to operate correctly.&lt;/p&gt; &#xA;&lt;p&gt;If you are setting up a &lt;a href=&#34;https://nodejs.org/en/docs/guides/nodejs-docker-webapp/&#34;&gt;Dockerfile&lt;/a&gt; that uses &lt;a href=&#34;https://hub.docker.com/_/node&#34;&gt;&lt;code&gt;node&lt;/code&gt;&lt;/a&gt; as its basis, the simplest approach is to set your &lt;code&gt;FROM&lt;/code&gt; image to one of the (Debian-derived) defaults like &lt;code&gt;node:lts&lt;/code&gt;, &lt;code&gt;node:18&lt;/code&gt;, &lt;code&gt;node:16&lt;/code&gt;, &lt;code&gt;node:14-buster&lt;/code&gt;, &lt;code&gt;node:12-buster&lt;/code&gt;, &lt;code&gt;node:bullseye&lt;/code&gt;, &lt;code&gt;node:buster&lt;/code&gt;, or simply:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;FROM node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the ‘slim’ image if you manually install fontconfig:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;FROM node:slim&#xA;RUN apt-get update &amp;amp;&amp;amp; apt-get install -y -q --no-install-recommends libfontconfig1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you wish to use Alpine as the underlying distribution, you can start with something along the lines of:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;FROM node:alpine&#xA;RUN apk update &amp;amp;&amp;amp; apk add fontconfig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compiling from Source&lt;/h2&gt; &#xA;&lt;p&gt;If prebuilt binaries aren’t available for your system you’ll need to compile the portions of this library that directly interface with Skia.&lt;/p&gt; &#xA;&lt;p&gt;Start by installing:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;Rust compiler&lt;/a&gt; and cargo package manager using &lt;a href=&#34;https://rust-lang.github.io/rustup/&#34;&gt;&lt;code&gt;rustup&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;A C compiler toolchain (either LLVM/Clang or MSVC)&lt;/li&gt; &#xA; &lt;li&gt;Python 3 (used by Skia&#39;s &lt;a href=&#34;https://skia.org/docs/user/build/&#34;&gt;build process&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://ninja-build.org&#34;&gt;Ninja&lt;/a&gt; build system&lt;/li&gt; &#xA; &lt;li&gt;On Linux: Fontconfig and OpenSSL&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rust-skia/rust-skia#building&#34;&gt;Detailed instructions&lt;/a&gt; for setting up these dependencies on different operating systems can be found in the ‘Building’ section of the Rust Skia documentation. Once all the necessary compilers and libraries are present, running &lt;code&gt;npm run build&lt;/code&gt; will give you a usable library (after a fairly lengthy compilation process).&lt;/p&gt; &#xA;&lt;h2&gt;Multithreading&lt;/h2&gt; &#xA;&lt;p&gt;When rendering canvases in the background (e.g., by using the asynchronous &lt;a href=&#34;https://skia-canvas.org/api/canvas#saveas&#34;&gt;saveAs&lt;/a&gt; or &lt;a href=&#34;https://skia-canvas.org/api/canvas#tobuffer&#34;&gt;toBuffer&lt;/a&gt; methods), tasks are spawned in a thread pool managed by the &lt;a href=&#34;https://crates.io/crates/rayon&#34;&gt;rayon&lt;/a&gt; library. By default it will create up to as many threads as your CPU has cores. You can see this default value by inspecting any &lt;a href=&#34;https://skia-canvas.org/api/canvas&#34;&gt;Canvas&lt;/a&gt; object&#39;s &lt;a href=&#34;https://skia-canvas.org/api/canvas#engine&#34;&gt;&lt;code&gt;engine.threads&lt;/code&gt;&lt;/a&gt; property. If you wish to override this default, you can set the &lt;code&gt;SKIA_CANVAS_THREADS&lt;/code&gt; environment variable to your preferred value.&lt;/p&gt; &#xA;&lt;p&gt;For example, you can limit your asynchronous processing to two simultaneous tasks by running your script with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;SKIA_CANVAS_THREADS=2 node my-canvas-script.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Generating image files&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {Canvas} from &#39;skia-canvas&#39;&#xA;&#xA;let canvas = new Canvas(400, 400),&#xA;    ctx = canvas.getContext(&#34;2d&#34;),&#xA;    {width, height} = canvas;&#xA;&#xA;let sweep = ctx.createConicGradient(Math.PI * 1.2, width/2, height/2)&#xA;sweep.addColorStop(0, &#34;red&#34;)&#xA;sweep.addColorStop(0.25, &#34;orange&#34;)&#xA;sweep.addColorStop(0.5, &#34;yellow&#34;)&#xA;sweep.addColorStop(0.75, &#34;green&#34;)&#xA;sweep.addColorStop(1, &#34;red&#34;)&#xA;ctx.strokeStyle = sweep&#xA;ctx.lineWidth = 100&#xA;ctx.strokeRect(100,100, 200,200)&#xA;&#xA;// render to multiple destinations using a background thread&#xA;async function render(){&#xA;  // save a ‘retina’ image...&#xA;  await canvas.saveAs(&#34;rainbox.png&#34;, {density:2})&#xA;  // ...or use a shorthand for canvas.toBuffer(&#34;png&#34;)&#xA;  let pngData = await canvas.png&#xA;  // ...or embed it in a string&#xA;  let pngEmbed = `&amp;lt;img src=&#34;${await canvas.toDataURL(&#34;png&#34;)}&#34;&amp;gt;`&#xA;}&#xA;render()&#xA;&#xA;// ...or save the file synchronously from the main thread&#xA;canvas.saveAsSync(&#34;rainbox.pdf&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multi-page sequences&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {Canvas} from &#39;skia-canvas&#39;&#xA;&#xA;let canvas = new Canvas(400, 400),&#xA;    ctx = canvas.getContext(&#34;2d&#34;),&#xA;    {width, height} = canvas&#xA;&#xA;for (const color of [&#39;orange&#39;, &#39;yellow&#39;, &#39;green&#39;, &#39;skyblue&#39;, &#39;purple&#39;]){&#xA;  ctx = canvas.newPage()&#xA;  ctx.fillStyle = color&#xA;  ctx.fillRect(0,0, width, height)&#xA;  ctx.fillStyle = &#39;white&#39;&#xA;  ctx.arc(width/2, height/2, 40, 0, 2 * Math.PI)&#xA;  ctx.fill()&#xA;}&#xA;&#xA;async function render(){&#xA;  // save to a multi-page PDF file&#xA;  await canvas.saveAs(&#34;all-pages.pdf&#34;)&#xA;&#xA;  // save to files named `page-01.png`, `page-02.png`, etc.&#xA;  await canvas.saveAs(&#34;page-{2}.png&#34;)&#xA;}&#xA;render()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rendering to a window&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {Window} from &#39;skia-canvas&#39;&#xA;&#xA;let win = new Window(300, 300)&#xA;win.title = &#34;Canvas Window&#34;&#xA;win.on(&#34;draw&#34;, e =&amp;gt; {&#xA;  let ctx = e.target.canvas.getContext(&#34;2d&#34;)&#xA;  ctx.lineWidth = 25 + 25 * Math.cos(e.frame / 10)&#xA;  ctx.beginPath()&#xA;  ctx.arc(150, 150, 50, 0, 2 * Math.PI)&#xA;  ctx.stroke()&#xA;&#xA;  ctx.beginPath()&#xA;  ctx.arc(150, 150, 10, 0, 2 * Math.PI)&#xA;  ctx.stroke()&#xA;  ctx.fill()&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;This project is deeply indebted to the work of the &lt;a href=&#34;https://github.com/rust-skia/rust-skia&#34;&gt;Rust Skia project&lt;/a&gt; whose Skia bindings provide a safe and idiomatic interface to the mess of C++ that lies underneath. Many thanks to the developers of &lt;a href=&#34;https://github.com/Automattic/node-canvas&#34;&gt;node-canvas&lt;/a&gt; for their terrific set of unit tests. In the absence of an &lt;a href=&#34;https://www.acidtests.org&#34;&gt;Acid Test&lt;/a&gt; for canvas, these routines were invaluable.&lt;/p&gt; &#xA;&lt;h3&gt;Notable contributors&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mpaparno&#34;&gt;@mpaparno&lt;/a&gt; contributed support for SVG rendering, raw image-buffer handling, WEBP import/export and numerous bugfixes&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Salmondx&#34;&gt;@Salmondx&lt;/a&gt; developed the initial Raw image loading &amp;amp; rendering routines&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lucasmerlin&#34;&gt;@lucasmerlin&lt;/a&gt; helped get GPU rendering working on Vulkan&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cprecioso&#34;&gt;@cprecioso&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/saantonandre&#34;&gt;@saantonandre&lt;/a&gt; corrected and expanded upon the TypeScript type definitions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/meihuanyu&#34;&gt;@meihuanyu&lt;/a&gt; contributed filter &amp;amp; path rendering fixes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;© 2020–2024 &lt;a href=&#34;https://samizdat.co&#34;&gt;Samizdat Drafting Co.&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>