<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-24T01:35:31Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cachix/devenv</title>
    <updated>2025-07-24T01:35:31Z</updated>
    <id>tag:github.com,2025-07-24:/cachix/devenv</id>
    <link href="https://github.com/cachix/devenv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast, Declarative, Reproducible, and Composable Developer Environments using Nix&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://devenv.sh&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;logos/devenv-horizontal-light-bg.svg&#34;&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;logos/devenv-horizontal-dark-bg.svg&#34;&gt; &#xA;   &lt;img src=&#34;https://raw.githubusercontent.com/cachix/devenv/main/logos/devenv-horizontal-light-bg.svg?sanitize=true&#34; width=&#34;500px&#34; alt=&#34;devenv logo&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://devenv.sh&#34;&gt;devenv.sh&lt;/a&gt; - Fast, Declarative, Reproducible, and Composable Developer Environments&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://builtwithnix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?logo=nixos&amp;amp;logoColor=white&amp;amp;label=&amp;amp;message=Built%20with%20Nix&amp;amp;color=41439a&#34; alt=&#34;Built with Nix&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/naMgvexb6q&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fdiscord.com%2Fapi%2Finvites%2FnaMgvexb6q%3Fwith_counts%3Dtrue&amp;amp;query=%24.approximate_member_count&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;label=Discord%20users&amp;amp;color=green&amp;amp;style=flat&#34; alt=&#34;Discord channel&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/license/cachix/devenv&#34; alt=&#34;License: Apache 2.0&#34;&gt; &lt;a href=&#34;https://github.com/cachix/devenv/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/cachix/devenv?color=green&amp;amp;label=version&amp;amp;sort=semver&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/cachix/devenv/actions/workflows/buildtest.yml?branch=main&#34;&gt;&lt;img src=&#34;https://github.com/cachix/devenv/actions/workflows/buildtest.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Running &lt;code&gt;devenv init&lt;/code&gt; generates &lt;code&gt;devenv.nix&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;{ pkgs, ... }:&#xA;&#xA;{&#xA;  # https://devenv.sh/basics/&#xA;  env.GREET = &#34;devenv&#34;;&#xA;&#xA;  # https://devenv.sh/packages/&#xA;  packages = [ pkgs.git ];&#xA;&#xA;  enterShell = &#39;&#39;&#xA;    hello&#xA;  &#39;&#39;;&#xA;&#xA;  # https://devenv.sh/tests/&#xA;  enterTest = &#39;&#39;&#xA;    echo &#34;Running tests&#34;&#xA;    git --version | grep --color=auto &#34;${pkgs.git.version}&#34;&#xA;  &#39;&#39;;&#xA;&#xA;  # https://devenv.sh/languages/&#xA;  languages.nix.enable = true;&#xA;&#xA;  # https://devenv.sh/scripts/&#xA;  scripts.hello.exec = &#34;echo hello from $GREET&#34;;&#xA;&#xA;  # https://devenv.sh/services/&#xA;  services.postgres.enable = true;&#xA;&#xA;  # https://devenv.sh/git-hooks/&#xA;  git-hooks.hooks.shellcheck.enable = true;&#xA;&#xA;  # https://devenv.sh/processes/&#xA;  processes.ping.exec = &#34;ping localhost&#34;;&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And &lt;code&gt;devenv shell&lt;/code&gt; activates the environment.&lt;/p&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ devenv&#xA;https://devenv.sh 1.6.0: Fast, Declarative, Reproducible, and Composable Developer Environments&#xA;&#xA;Usage: devenv [OPTIONS] [COMMAND]&#xA;&#xA;Commands:&#xA;  init       Scaffold devenv.yaml, devenv.nix, .gitignore and .envrc.&#xA;  generate   Generate devenv.yaml and devenv.nix using AI&#xA;  shell      Activate the developer environment. https://devenv.sh/basics/&#xA;  update     Update devenv.lock from devenv.yaml inputs. http://devenv.sh/inputs/&#xA;  search     Search for packages and options in nixpkgs. https://devenv.sh/packages/#searching-for-a-file&#xA;  info       Print information about this developer environment.&#xA;  up         Start processes in the foreground. https://devenv.sh/processes/&#xA;  processes  Start or stop processes. https://devenv.sh/processes/&#xA;  tasks      Run tasks. https://devenv.sh/tasks/&#xA;  test       Run tests. http://devenv.sh/tests/&#xA;  container  Build, copy, or run a container. https://devenv.sh/containers/&#xA;  inputs     Add an input to devenv.yaml. https://devenv.sh/inputs/&#xA;  repl       Launch an interactive environment for inspecting the devenv configuration.&#xA;  gc         Delete previous shell generations. See https://devenv.sh/garbage-collection&#xA;  build      Build any attribute in devenv.nix.&#xA;  direnvrc   Print a direnvrc that adds devenv support to direnv. See https://devenv.sh/automatic-shell-activation.&#xA;  version    Print the version of devenv.&#xA;  help       Print this message or the help of the given subcommand(s)&#xA;&#xA;Options:&#xA;  -V, --version&#xA;          Print version information and exit&#xA;&#xA;  -v, --verbose&#xA;          Enable additional debug logs.&#xA;&#xA;  -q, --quiet&#xA;          Silence all logs&#xA;&#xA;      --log-format &amp;lt;LOG_FORMAT&amp;gt;&#xA;          Configure the output format of the logs.&#xA;&#xA;          [default: cli]&#xA;&#xA;          Possible values:&#xA;          - cli:            The default human-readable log format used in the CLI&#xA;          - tracing-full:   A verbose structured log format used for debugging&#xA;          - tracing-pretty: A pretty human-readable log format used for debugging&#xA;&#xA;  -j, --max-jobs &amp;lt;MAX_JOBS&amp;gt;&#xA;          Maximum number of Nix builds at any time.&#xA;&#xA;          [default: 8]&#xA;&#xA;  -u, --cores &amp;lt;CORES&amp;gt;&#xA;          Maximum number CPU cores being used by a single build.&#xA;&#xA;          [default: 2]&#xA;&#xA;  -s, --system &amp;lt;SYSTEM&amp;gt;&#xA;          [default: x86_64-linux]&#xA;&#xA;  -i, --impure&#xA;          Relax the hermeticity of the environment.&#xA;&#xA;      --no-eval-cache&#xA;          Disable caching of Nix evaluation results.&#xA;&#xA;      --refresh-eval-cache&#xA;          Force a refresh of the Nix evaluation cache.&#xA;&#xA;      --offline&#xA;          Disable substituters and consider all previously downloaded files up-to-date.&#xA;&#xA;  -c, --clean [&amp;lt;CLEAN&amp;gt;...]&#xA;          Ignore existing environment variables when entering the shell. Pass a list of comma-separated environment variables to let through.&#xA;&#xA;      --nix-debugger&#xA;          Enter the Nix debugger on failure.&#xA;&#xA;  -n, --nix-option &amp;lt;NAME&amp;gt; &amp;lt;VALUE&amp;gt;&#xA;          Pass additional options to nix commands.&#xA;&#xA;          These options are passed directly to Nix using the --option flag.&#xA;          See `man nix.conf` for the full list of available options.&#xA;&#xA;          Examples:&#xA;            --nix-option sandbox false&#xA;            --nix-option keep-outputs true&#xA;            --nix-option system x86_64-darwin&#xA;&#xA;  -o, --override-input &amp;lt;NAME&amp;gt; &amp;lt;URI&amp;gt;&#xA;          Override inputs in devenv.yaml.&#xA;&#xA;          Examples:&#xA;            --override-input nixpkgs github:NixOS/nixpkgs/nixos-unstable&#xA;            --override-input nixpkgs path:/path/to/local/nixpkgs&#xA;&#xA;  -O, --option &amp;lt;OPTION&amp;gt; &amp;lt;VALUE&amp;gt;&#xA;          Override configuration options with typed values.&#xA;&#xA;          OPTION must include a type: &amp;lt;attribute&amp;gt;:&amp;lt;type&amp;gt;&#xA;          Supported types: string, int, float, bool, path&#xA;&#xA;          Examples:&#xA;            --option languages.rust.channel:string beta&#xA;            --option services.postgres.enable:bool true&#xA;            --option languages.python.version:string 3.10&#xA;&#xA;  -h, --help&#xA;          Print help (see a summary with &#39;-h&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://devenv.sh/getting-started/&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://devenv.sh/basics/&#34;&gt;Basics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://devenv.sh/roadmap/&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://devenv.sh/blog/&#34;&gt;Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://devenv.sh/reference/yaml-options/&#34;&gt;&lt;code&gt;devenv.yaml&lt;/code&gt; reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://devenv.sh/reference/options/&#34;&gt;&lt;code&gt;devenv.nix&lt;/code&gt; reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://devenv.sh/community/contributing/&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>