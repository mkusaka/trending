<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-27T01:39:41Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>evilsocket/legba</title>
    <updated>2023-10-27T01:39:41Z</updated>
    <id>tag:github.com,2023-10-27:/evilsocket/legba</id>
    <link href="https://github.com/evilsocket/legba" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A multiprotocol credentials bruteforcer / password sprayer and enumerator.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;code&gt;Legba&lt;/code&gt; is a multiprotocol credentials bruteforcer / password sprayer and enumerator built with Rust and the Tokio asynchronous runtime in order to achieve better performances and stability while consuming less resources than similar tools.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Work in progress:&lt;/strong&gt; while the tool is functioning well overall, it still requires some testing and the integration of more protocols. If you want to contribute with code and/or testing, feel free to check the list of TODOs with &lt;code&gt;grep -ri --include &#34;*.rs&#34; TODO&lt;/code&gt; ^_^&lt;/p&gt; &#xA;&lt;p&gt;For the building instructions, usage and the list of supported protocols &lt;a href=&#34;https://github.com/evilsocket/legba/wiki&#34;&gt;check the project Wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Legba was made with â™¥ by &lt;a href=&#34;https://www.evilsocket.net/&#34;&gt;Simone Margaritelli&lt;/a&gt; and it&#39;s released under the GPL 3 license.&lt;/p&gt; &#xA;&lt;p&gt;To see the licenses of the project dependencies, install cargo license with &lt;code&gt;cargo install cargo-license&lt;/code&gt; and then run &lt;code&gt;cargo license&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ImageOptim/gifski</title>
    <updated>2023-10-27T01:39:41Z</updated>
    <id>tag:github.com,2023-10-27:/ImageOptim/gifski</id>
    <link href="https://github.com/ImageOptim/gifski" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GIF encoder based on libimagequant (pngquant). Squeezes maximum possible quality from the awful GIF format.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://gif.ski&#34;&gt;&lt;img width=&#34;100%&#34; src=&#34;https://gif.ski/gifski.svg?sanitize=true&#34; alt=&#34;gif.ski&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Highest-quality GIF encoder based on &lt;a href=&#34;https://pngquant.org&#34;&gt;pngquant&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://gif.ski&#34;&gt;gifski&lt;/a&gt;&lt;/strong&gt; converts video frames to GIF animations using pngquant&#39;s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://gif.ski/demo.gif&#34; alt=&#34;(CC) Blender Foundation | gooseberry.blender.org&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s a CLI tool, but it can also be compiled &lt;a href=&#34;https://docs.rs/gifski&#34;&gt;as a C library&lt;/a&gt; for seamless use in other apps.&lt;/p&gt; &#xA;&lt;h2&gt;Download and install&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/ImageOptim/gifski/releases&#34;&gt;releases&lt;/a&gt; page for executables.&lt;/p&gt; &#xA;&lt;p&gt;If you have &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;, you can also get it with &lt;code&gt;brew install gifski&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have &lt;a href=&#34;https://www.rust-lang.org/install.html&#34;&gt;Rust from rustup&lt;/a&gt; (1.63+), you can also build it from source with &lt;a href=&#34;https://lib.rs/crates/gifski&#34;&gt;&lt;code&gt;cargo install gifski&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;gifski is a command-line tool. There is no GUI for Windows or Linux (there is one for &lt;a href=&#34;https://sindresorhus.com/gifski&#34;&gt;macOS&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The recommended way is to first export video as PNG frames. If you have &lt;code&gt;ffmpeg&lt;/code&gt; installed, you can run in terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ffmpeg -i video.webm frame%04d.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then make the GIF from the frames:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gifski -o anim.gif frame*.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also resize frames (with &lt;code&gt;-W &amp;lt;width in pixels&amp;gt;&lt;/code&gt; option). If the input was ever encoded using a lossy video codec it&#39;s recommended to at least halve size of the frames to hide compression artefacts and counter chroma subsampling that was done by the video codec.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;gifski -h&lt;/code&gt; for more options.&lt;/p&gt; &#xA;&lt;h3&gt;Tips for smaller GIF files&lt;/h3&gt; &#xA;&lt;p&gt;Expect to lose a lot of quality for little gain. GIF just isn&#39;t that good at compressing, no matter how much you compromise.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &lt;code&gt;--width&lt;/code&gt; and &lt;code&gt;--height&lt;/code&gt; to make the animation smaller. This makes the biggest difference.&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;--quality=80&lt;/code&gt; (or a lower number) to lower overall quality. You can fine-tune the quality with: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;--lossy-quality=60&lt;/code&gt; lower values make animations noisier/grainy, but reduce file sizes.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;--motion-quality=60&lt;/code&gt; lower values cause smearing or banding in frames with motion, but reduce file sizes.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you need to make a GIF that fits a predefined file size, you have to experiment with different sizes and quality settings. The command line tool will display estimated total file size during compression, but keep in mind that the estimate is very imprecise.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.rust-lang.org/en-US/install.html&#34;&gt;Install Rust via rustup&lt;/a&gt; or run &lt;code&gt;rustup update&lt;/code&gt;. This project only supports up-to-date versions of Rust. You may get compile errors, warnings about &#34;unstable edition&#34;, etc. if you don&#39;t run &lt;code&gt;rustup update&lt;/code&gt; regularly.&lt;/li&gt; &#xA; &lt;li&gt;Clone the repository: &lt;code&gt;git clone https://github.com/ImageOptim/gifski&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;In the cloned directory, run: &lt;code&gt;cargo build --release&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Using from C&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ImageOptim/gifski/raw/main/gifski.h&#34;&gt;See &lt;code&gt;gifski.h&lt;/code&gt;&lt;/a&gt; for &lt;a href=&#34;https://docs.rs/gifski/latest/gifski/c_api/#functions&#34;&gt;the C API&lt;/a&gt;. To build the library, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rustup update&#xA;cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and link with &lt;code&gt;target/release/libgifski.a&lt;/code&gt;. Please observe the &lt;a href=&#34;https://raw.githubusercontent.com/ImageOptim/gifski/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;C dynamic library for package maintainers&lt;/h3&gt; &#xA;&lt;p&gt;The build process uses &lt;a href=&#34;https://lib.rs/cargo-c&#34;&gt;&lt;code&gt;cargo-c&lt;/code&gt;&lt;/a&gt; for building the dynamic library correctly and generating the pkg-config file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rustup update&#xA;cargo install cargo-c&#xA;# build&#xA;cargo cbuild --prefix=/usr --release&#xA;# install&#xA;cargo cinstall --prefix=/usr --release --destdir=pkgroot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;cbuild&lt;/code&gt; command can be omitted, since &lt;code&gt;cinstall&lt;/code&gt; will trigger a build if it hasn&#39;t been done already.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;AGPL 3 or later. I can offer alternative licensing options, including &lt;a href=&#34;https://supso.org/projects/pngquant&#34;&gt;commercial licenses&lt;/a&gt;. Let &lt;a href=&#34;https://kornel.ski/contact&#34;&gt;me&lt;/a&gt; know if you&#39;d like to use it in a product incompatible with this license.&lt;/p&gt; &#xA;&lt;h2&gt;With built-in video support&lt;/h2&gt; &#xA;&lt;p&gt;The tool optionally supports decoding video directly, but unfortunately it relies on ffmpeg 4.x, which may be &lt;em&gt;very hard&lt;/em&gt; to get working, so it&#39;s not enabled by default.&lt;/p&gt; &#xA;&lt;p&gt;You must have &lt;code&gt;ffmpeg&lt;/code&gt; and &lt;code&gt;libclang&lt;/code&gt; installed, both with their C headers installed in default system include paths. Details depend on the platform and version, but you usually need to install packages such as &lt;code&gt;libavformat-dev&lt;/code&gt;, &lt;code&gt;libavfilter-dev&lt;/code&gt;, &lt;code&gt;libavdevice-dev&lt;/code&gt;, &lt;code&gt;libclang-dev&lt;/code&gt;, &lt;code&gt;clang&lt;/code&gt;. Please note that installation of these dependencies may be quite difficult. Especially on macOS and Windows it takes &lt;em&gt;expert knowledge&lt;/em&gt; to just get them installed without wasting several hours on endless stupid installation and compilation errors, which I can&#39;t help with. If you&#39;re cross-compiling, try uncommenting &lt;code&gt;[patch.crates-io]&lt;/code&gt; section at the end of &lt;code&gt;Cargo.toml&lt;/code&gt;, which includes some experimental fixes for ffmpeg.&lt;/p&gt; &#xA;&lt;p&gt;Once you have dependencies installed, compile with &lt;code&gt;cargo build --release --features=video&lt;/code&gt; or &lt;code&gt;cargo build --release --features=video-static&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When compiled with video support &lt;a href=&#34;https://www.ffmpeg.org/legal.html&#34;&gt;ffmpeg licenses&lt;/a&gt; apply. You may need to have a patent license to use H.264/H.265 video (I recommend using VP9/WebM instead).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gifski -o out.gif video.mp4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Cross-compilation for iOS&lt;/h2&gt; &#xA;&lt;p&gt;The easy option is to use the included &lt;code&gt;gifski.xcodeproj&lt;/code&gt; file to build the library automatically for all Apple platforms. Add it as a &lt;a href=&#34;https://lib.rs/crates/cargo-xcode&#34;&gt;subproject&lt;/a&gt; to your Xcode project, and link with &lt;code&gt;gifski-staticlib&lt;/code&gt; Xcode target. See &lt;a href=&#34;https://github.com/sindresorhus/Gifski&#34;&gt;the GUI app&lt;/a&gt; for an example how to integrate the library.&lt;/p&gt; &#xA;&lt;h3&gt;Cross-compilation for iOS manually&lt;/h3&gt; &#xA;&lt;p&gt;Make sure you have Rust installed via &lt;a href=&#34;https://rustup.rs/&#34;&gt;rustup&lt;/a&gt;. Run once:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rustup target add aarch64-apple-ios&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then to build the library:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rustup update&#xA;cargo build --lib --release --target=aarch64-apple-ios&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The build will print &#34;dropping unsupported crate type &lt;code&gt;cdylib&lt;/code&gt;&#34; warning. This is normal and expected when building for iOS (the cdylib option exists for other platforms).&lt;/p&gt; &#xA;&lt;p&gt;This will create a static library in &lt;code&gt;./target/aarch64-apple-ios/release/libgifski.a&lt;/code&gt;. You can add this library to your Xcode project. See &lt;a href=&#34;https://github.com/sindresorhus/Gifski&#34;&gt;gifski.app&lt;/a&gt; for an example how to use libgifski from Swift.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gngpp/ninja</title>
    <updated>2023-10-27T01:39:41Z</updated>
    <id>tag:github.com,2023-10-27:/gngpp/ninja</id>
    <link href="https://github.com/gngpp/ninja" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Reverse engineered ChatGPT proxy&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;br&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/gngpp/ninja/main/README_zh.md&#34;&gt;ç®€ä½“ä¸­æ–‡&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/gngpp/ninja/actions/workflows/CI.yml&#34;&gt;&lt;img src=&#34;https://github.com/gngpp/ninja/actions/workflows/CI.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/gngpp/ninja/actions/workflows/Release.yml&#34;&gt;&lt;img src=&#34;https://github.com/gngpp/ninja/actions/workflows/Release.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/gngpp/ninja/raw/main/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/license-GPL_3.0-blue.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/gngpp/ninja/releases&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/release/gngpp/ninja.svg?style=flat&#34;&gt; &lt;/a&gt;&lt;a href=&#34;https://github.com/gngpp/ninja/releases&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/gngpp/ninja/total?style=flat&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://registry.hub.docker.com/r/gngpp/ninja&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/gngpp/ninja&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/gngpp/ninja/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/gngpp/ninja.svg?sanitize=true&#34; alt=&#34;Docker Image&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;ninja&lt;/h1&gt; &#xA;&lt;p&gt;Reverse engineered &lt;code&gt;ChatGPT&lt;/code&gt; proxy (bypass Cloudflare 403 Access Denied)&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;API key acquisition&lt;/li&gt; &#xA; &lt;li&gt;Email/password account authentication (Google/Microsoft third-party login not supported)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ChatGPT-API&lt;/code&gt;/&lt;code&gt;OpenAI-API&lt;/code&gt;/&lt;code&gt;ChatGPT-to-API&lt;/code&gt; Http API proxy (for third-party client access)&lt;/li&gt; &#xA; &lt;li&gt;Support IP proxy pool (support using Ipv6 subnet as proxy pool)&lt;/li&gt; &#xA; &lt;li&gt;ChatGPT WebUI&lt;/li&gt; &#xA; &lt;li&gt;Very small memory footprint&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Limitations: This cannot bypass OpenAI&#39;s outright IP ban&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;ArkoseLabs&lt;/h3&gt; &#xA;&lt;p&gt;Sending &lt;code&gt;GPT4/GPT-3.5 (already grayscale)/Creating API-Key&lt;/code&gt; dialog requires sending &lt;code&gt;Arkose Token&lt;/code&gt; as a parameter. There are only two supported solutions for the time being.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Use HAR&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;The &lt;code&gt;ChatGPT&lt;/code&gt; official website sends a &lt;code&gt;GPT4&lt;/code&gt; session message, and the browser &lt;code&gt;F12&lt;/code&gt; downloads the &lt;code&gt;https://tcr9i.chat.openai.com/fc/gt2/public_key/35536E1E-65B4-4D96-9D97-6ADB7EFF8147&lt;/code&gt; interface. HAR log file, use the startup parameter &lt;code&gt;--arkose-chat4-har-file&lt;/code&gt; to specify the HAR file path to use (if you do not specify a path, use the default path &lt;code&gt;~/.chat4.openai.com.har&lt;/code&gt;, you can directly upload and update HAR ), supports uploading and updating HAR, request path: &lt;code&gt;/har/upload&lt;/code&gt;, optional upload authentication parameter: &lt;code&gt;--arkose-har-upload-key&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use &lt;a href=&#34;https://yescaptcha.com/i/1Cc5i4&#34;&gt;YesCaptcha&lt;/a&gt; / &lt;a href=&#34;https://dashboard.capsolver.com/passport/register?inviteCode=y7CtB_a-3X6d&#34;&gt;CapSolver&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;The platform performs verification code parsing, start the parameter &lt;code&gt;--arkose-solver&lt;/code&gt; to select the platform (use &lt;code&gt;YesCaptcha&lt;/code&gt; by default), &lt;code&gt;--arkose-solver-key&lt;/code&gt; fill in &lt;code&gt;Client Key&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Both solutions are used, the priority is: &lt;code&gt;HAR&lt;/code&gt; &amp;gt; &lt;code&gt;YesCaptcha&lt;/code&gt; / &lt;code&gt;CapSolver&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;YesCaptcha&lt;/code&gt; / &lt;code&gt;CapSolver&lt;/code&gt; is recommended to be used with HAR. When the verification code is generated, the parser is called for processing. After verification, HAR is more durable.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Currently OpenAI has updated &lt;code&gt;Login&lt;/code&gt; which requires verification of &lt;code&gt;Arkose Token&lt;/code&gt;. The solution is the same as GPT4. Fill in the startup parameters and specify the HAR file &lt;code&gt;--arkose-auth-har-file&lt;/code&gt;. If you don&#39;t want to upload, you can log in through the browser code, which is not required. To create an API-Key, you need to upload the HAR feature file related to the Platform. The acquisition method is the same as above.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Http Server&lt;/h3&gt; &#xA;&lt;h4&gt;Public interface, &lt;code&gt;*&lt;/code&gt; represents any &lt;code&gt;URL&lt;/code&gt; suffix&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;ChatGPT-API&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://host:port/public-api/*&#34;&gt;https://host:port/public-api/*&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://host:port/backend-api/*&#34;&gt;https://host:port/backend-api/*&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;OpenAI-API&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://host:port/v1/*&#34;&gt;https://host:port/v1/*&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Platform-API&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://host:port/dashboard/*&#34;&gt;https://host:port/dashboard/*&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ChatGPT-To-API&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://host:port/to/v1/chat/completions&#34;&gt;https://host:port/to/v1/chat/completions&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;About using &lt;code&gt;ChatGPT&lt;/code&gt; to &lt;code&gt;API&lt;/code&gt;, use &lt;code&gt;AceessToken&lt;/code&gt; directly as &lt;code&gt;API Key&lt;/code&gt;, interface path: &lt;code&gt;/to/v1/chat/completions&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;API documentation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Platfrom API &lt;a href=&#34;https://platform.openai.com/docs/api-reference&#34;&gt;doc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Backend API &lt;a href=&#34;https://raw.githubusercontent.com/gngpp/ninja/main/doc/rest.http&#34;&gt;doc&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Basic services&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ChatGPT WebUI&lt;/li&gt; &#xA; &lt;li&gt;Expose &lt;code&gt;ChatGPT-API&lt;/code&gt;/&lt;code&gt;OpenAI-API&lt;/code&gt; proxies&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;API&lt;/code&gt; prefix is consistent with the official one&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ChatGPT&lt;/code&gt; to &lt;code&gt;API&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Can access third-party clients&lt;/li&gt; &#xA; &lt;li&gt;Can access IP proxy pool to improve concurrency&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Parameter Description&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--level&lt;/code&gt;, environment variable &lt;code&gt;LOG&lt;/code&gt;, log level: default info&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--bind&lt;/code&gt;, environment variable &lt;code&gt;BIND&lt;/code&gt;, service listening address: default 0.0.0.0:7999,&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--tls-cert&lt;/code&gt;, environment variable &lt;code&gt;TLS_CERT&lt;/code&gt;&#39;, TLS certificate public key. Supported format: EC/PKCS8/RSA&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--tls-key&lt;/code&gt;, environment variable &lt;code&gt;TLS_KEY&lt;/code&gt;, TLS certificate private key&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--proxies&lt;/code&gt;, Proxy, supports proxy pool, multiple proxies are separated by &lt;code&gt;,&lt;/code&gt;, format: protocol://user:pass@ip:port, if the local IP is banned, you need to turn off the use of direct IP when using the proxy pool, &lt;code&gt;--disable-direct&lt;/code&gt; turns off direct connection, otherwise your banned local IP will be used according to load balancing&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--workers&lt;/code&gt;, worker threads: default 1&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--disable-webui&lt;/code&gt;, if you donâ€™t want to use the default built-in WebUI, use this parameter to turn it off&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/gngpp/ninja/raw/main/README.md#command-manual&#34;&gt;...&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h4&gt;Ubuntu(Other Linux)&lt;/h4&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Making &lt;a href=&#34;https://github.com/gngpp/ninja/releases/latest&#34;&gt;Releases&lt;/a&gt; has a precompiled deb package, binaries, in Ubuntu, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;wget https://github.com/gngpp/ninja/releases/download/v0.7.3/ninja-0.7.3-x86_64-unknown-linux-musl.deb&#xA;dpkg -i ninja-0.7.3-x86_64-unknown-linux-musl.deb&#xA;ninja run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h4&gt;OpenWrt&lt;/h4&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are pre-compiled ipk files in GitHub &lt;a href=&#34;https://github.com/gngpp/ninja/releases/latest&#34;&gt;Releases&lt;/a&gt;, which currently provide versions of aarch64/x86_64 and other architectures. After downloading, use opkg to install, and use nanopi r4s as example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;wget https://github.com/gngpp/ninja/releases/download/v0.7.3/ninja_0.7.3_aarch64_generic.ipk&#xA;wget https://github.com/gngpp/ninja/releases/download/v0.7.3/luci-app-ninja_1.1.4-1_all.ipk&#xA;wget https://github.com/gngpp/ninja/releases/download/v0.7.3/luci-i18n-ninja-zh-cn_1.1.4-1_all.ipk&#xA;&#xA;opkg install ninja_0.7.3_aarch64_generic.ipk&#xA;opkg install luci-app-ninja_1.1.4-1_all.ipk&#xA;opkg install luci-i18n-ninja-zh-cn_1.1.4-1_all.ipk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h4&gt;Docker&lt;/h4&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run --rm -it -p 7999:7999 --name=ninja \&#xA;  -e WORKERS=1 \&#xA;  -e LOG=info \&#xA;  gngpp/ninja:latest run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docker Compose&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;CloudFlare Warp&lt;/code&gt; is not supported in your region (China), please delete it, or if your &lt;code&gt;VPS&lt;/code&gt; IP can be directly connected to &lt;code&gt;OpenAI&lt;/code&gt;, you can also delete it&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: &#39;3&#39;&#xA;&#xA;services:&#xA;  ninja:&#xA;    image: ghcr.io/gngpp/ninja:latest&#xA;    container_name: ninja&#xA;    restart: unless-stopped&#xA;    environment:&#xA;      - TZ=Asia/Shanghai&#xA;      - PROXIES=socks5://warp:10000&#xA;    command: run&#xA;    ports:&#xA;      - &#34;8080:7999&#34;&#xA;    depends_on:&#xA;      - warp&#xA;&#xA;  warp:&#xA;    container_name: warp&#xA;    image: ghcr.io/gngpp/warp:latest&#xA;    restart: unless-stopped&#xA;&#xA;  watchtower:&#xA;    container_name: watchtower&#xA;    image: containrrr/watchtower&#xA;    volumes:&#xA;      - /var/run/docker.sock:/var/run/docker.sock&#xA;    command: --interval 3600 --cleanup&#xA;    restart: unless-stopped&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Command Manual&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ ninja --help&#xA;Reverse engineered ChatGPT proxy&#xA;&#xA;Usage: ninja [COMMAND]&#xA;&#xA;Commands:&#xA;  run      Run the HTTP server&#xA;  stop     Stop the HTTP server daemon&#xA;  start    Start the HTTP server daemon&#xA;  restart  Restart the HTTP server daemon&#xA;  status   Status of the Http server daemon process&#xA;  log      Show the Http server daemon log&#xA;  gt       Generate config template file (toml format file)&#xA;  help     Print this message or the help of the given subcommand(s)&#xA;&#xA;Options:&#xA;  -h, --help     Print help&#xA;  -V, --version  Print version&#xA;&#xA;$ ninja run --help&#xA;Run the HTTP server&#xA;&#xA;Usage: ninja run [OPTIONS]&#xA;&#xA;Options:&#xA;  -L, --level &amp;lt;LEVEL&amp;gt;&#xA;          Log level (info/debug/warn/trace/error) [env: LOG=] [default: info]&#xA;  -C, --config &amp;lt;CONFIG&amp;gt;&#xA;          Configuration file path (toml format file) [env: CONFIG=]&#xA;  -b, --bind &amp;lt;BIND&amp;gt;&#xA;          Server bind address [env: BIND=] [default: 0.0.0.0:7999]&#xA;  -W, --workers &amp;lt;WORKERS&amp;gt;&#xA;          Server worker-pool size (Recommended number of CPU cores) [default: 1]&#xA;      --concurrent-limit &amp;lt;CONCURRENT_LIMIT&amp;gt;&#xA;          Enforces a limit on the concurrent number of requests the underlying [default: 65535]&#xA;  -x, --proxies &amp;lt;PROXIES&amp;gt;&#xA;          Server proxies pool, Example: protocol://user:pass@ip:port [env: PROXIES=]&#xA;  -i, --interface &amp;lt;INTERFACE&amp;gt;&#xA;          Bind address for outgoing connections (or IPv6 subnet fallback to Ipv4) [env: INTERFACE=]&#xA;  -I, --ipv6-subnet &amp;lt;IPV6_SUBNET&amp;gt;&#xA;          IPv6 subnet, Example: 2001:19f0:6001:48e4::/64 [env: IPV4_SUBNET=]&#xA;      --disable-direct&#xA;          Disable direct connection [env: DISABLE_DIRECT=]&#xA;      --cookie-store&#xA;          Enabled Cookie Store [env: COOKIE_STORE=]&#xA;      --timeout &amp;lt;TIMEOUT&amp;gt;&#xA;          Client timeout (seconds) [default: 600]&#xA;      --connect-timeout &amp;lt;CONNECT_TIMEOUT&amp;gt;&#xA;          Client connect timeout (seconds) [default: 60]&#xA;      --tcp-keepalive &amp;lt;TCP_KEEPALIVE&amp;gt;&#xA;          TCP keepalive (seconds) [default: 60]&#xA;      --pool-idle-timeout &amp;lt;POOL_IDLE_TIMEOUT&amp;gt;&#xA;          Set an optional timeout for idle sockets being kept-alive [default: 90]&#xA;      --tls-cert &amp;lt;TLS_CERT&amp;gt;&#xA;          TLS certificate file path [env: TLS_CERT=]&#xA;      --tls-key &amp;lt;TLS_KEY&amp;gt;&#xA;          TLS private key file path (EC/PKCS8/RSA) [env: TLS_KEY=]&#xA;  -A, --auth-key &amp;lt;AUTH_KEY&amp;gt;&#xA;          Login Authentication Key [env: AUTH_KEY=]&#xA;      --api-prefix &amp;lt;API_PREFIX&amp;gt;&#xA;          WebUI api prefix [env: API_PREFIX=]&#xA;      --preauth-api &amp;lt;PREAUTH_API&amp;gt;&#xA;          PreAuth Cookie API URL [env: PREAUTH_API=] [default: https://ai.fakeopen.com/auth/preauth]&#xA;  -D, --disable-webui&#xA;          Disable WebUI [env: DISABLE_WEBUI=]&#xA;      --cf-site-key &amp;lt;CF_SITE_KEY&amp;gt;&#xA;          Cloudflare turnstile captcha site key [env: CF_SECRET_KEY=]&#xA;      --cf-secret-key &amp;lt;CF_SECRET_KEY&amp;gt;&#xA;          Cloudflare turnstile captcha secret key [env: CF_SITE_KEY=]&#xA;      --arkose-endpoint &amp;lt;ARKOSE_ENDPOINT&amp;gt;&#xA;          Arkose endpoint, Example: https://client-api.arkoselabs.com&#xA;      --arkose-chat3-har-file &amp;lt;ARKOSE_CHAT3_HAR_FILE&amp;gt;&#xA;          About the browser HAR file path requested by ChatGPT GPT-3.5 ArkoseLabs&#xA;      --arkose-chat4-har-file &amp;lt;ARKOSE_CHAT4_HAR_FILE&amp;gt;&#xA;          About the browser HAR file path requested by ChatGPT GPT-4 ArkoseLabs&#xA;      --arkose-auth-har-file &amp;lt;ARKOSE_AUTH_HAR_FILE&amp;gt;&#xA;          About the browser HAR file path requested by Auth ArkoseLabs&#xA;      --arkose-platform-har-file &amp;lt;ARKOSE_PLATFORM_HAR_FILE&amp;gt;&#xA;          About the browser HAR file path requested by Platform ArkoseLabs&#xA;  -K, --arkose-har-upload-key &amp;lt;ARKOSE_HAR_UPLOAD_KEY&amp;gt;&#xA;          HAR file upload authenticate key&#xA;  -s, --arkose-solver &amp;lt;ARKOSE_SOLVER&amp;gt;&#xA;          About ArkoseLabs solver platform [default: yescaptcha]&#xA;  -k, --arkose-solver-key &amp;lt;ARKOSE_SOLVER_KEY&amp;gt;&#xA;          About the solver client key by ArkoseLabs&#xA;  -T, --tb-enable&#xA;          Enable token bucket flow limitation&#xA;      --tb-store-strategy &amp;lt;TB_STORE_STRATEGY&amp;gt;&#xA;          Token bucket store strategy (mem/redis) [default: mem]&#xA;      --tb-redis-url &amp;lt;TB_REDIS_URL&amp;gt;&#xA;          Token bucket redis connection url [default: redis://127.0.0.1:6379]&#xA;      --tb-capacity &amp;lt;TB_CAPACITY&amp;gt;&#xA;          Token bucket capacity [default: 60]&#xA;      --tb-fill-rate &amp;lt;TB_FILL_RATE&amp;gt;&#xA;          Token bucket fill rate [default: 1]&#xA;      --tb-expired &amp;lt;TB_EXPIRED&amp;gt;&#xA;          Token bucket expired (seconds) [default: 86400]&#xA;  -B, --preauth-bind &amp;lt;PREAUTH_BIND&amp;gt;&#xA;          Preauth MITM server bind address [env: PREAUTH_BIND=] [default: 0.0.0.0:8000]&#xA;  -X, --preauth-upstream &amp;lt;PREAUTH_UPSTREAM&amp;gt;&#xA;          Preauth MITM server upstream proxy [env: PREAUTH_UPSTREAM=]&#xA;      --preauth-cert &amp;lt;PREAUTH_CERT&amp;gt;&#xA;          Preauth MITM server CA certificate file path [default: ca/cert.crt]&#xA;      --preauth-key &amp;lt;PREAUTH_KEY&amp;gt;&#xA;          Preauth MITM server CA private key file path [default: ca/key.pem]&#xA;  -h, --help&#xA;          Print help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Platform Support&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;x86_64-unknown-linux-musl&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aarch64-unknown-linux-musl&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;armv7-unknown-linux-musleabi&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;armv7-unknown-linux-musleabihf&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;arm-unknown-linux-musleabi&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;arm-unknown-linux-musleabihf&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;armv5te-unknown-linux-musleabi&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Windows &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;x86_64-pc-windows-msvc&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;MacOS &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;x86_64-apple-darwin&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aarch64-apple-darwin&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Compile&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux compile, Ubuntu machine for example:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/gngpp/ninja.git &amp;amp;&amp;amp; cd ninja&#xA;cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OpenWrt Compile&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd package&#xA;svn co https://github.com/gngpp/ninja/trunk/openwrt&#xA;cd -&#xA;make menuconfig # choose LUCI-&amp;gt;Applications-&amp;gt;luci-app-ninja  &#xA;make V=s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Instructions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open source projects can be modified, but please keep the original author information to avoid losing technical support.&lt;/li&gt; &#xA; &lt;li&gt;Project is standing on the shoulders of other giants, thanks!&lt;/li&gt; &#xA; &lt;li&gt;Submit an issue if there are errors, bugs, etc., and I will fix them.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Preview&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gngpp/ninja/main/doc/img/img0.png&#34; alt=&#34;img0&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/gngpp/ninja/main/doc/img/img1.png&#34; alt=&#34;img1&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>