<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-31T01:35:27Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rust-random/rand</title>
    <updated>2025-01-31T01:35:27Z</updated>
    <id>tag:github.com,2025-01-31:/rust-random/rand</id>
    <link href="https://github.com/rust-random/rand" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Rust library for random number generation.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rand&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rust-random/rand/actions&#34;&gt;&lt;img src=&#34;https://github.com/rust-random/rand/actions/workflows/test.yml/badge.svg?event=push&#34; alt=&#34;Test Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/rand&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/rand.svg?sanitize=true&#34; alt=&#34;Crate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://rust-random.github.io/book/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/book-master-yellow.svg?sanitize=true&#34; alt=&#34;Book&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://rust-random.github.io/rand/rand&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/api-master-yellow.svg?sanitize=true&#34; alt=&#34;API&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/rand&#34;&gt;&lt;img src=&#34;https://docs.rs/rand/badge.svg?sanitize=true&#34; alt=&#34;API&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Rand is a set of crates supporting (pseudo-)random generators:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Built over a standard RNG trait: &lt;a href=&#34;https://docs.rs/rand_core/latest/rand_core/trait.RngCore.html&#34;&gt;&lt;code&gt;rand_core::RngCore&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;With fast implementations of both &lt;a href=&#34;https://rust-random.github.io/book/guide-rngs.html#cryptographically-secure-pseudo-random-number-generators-csprngs&#34;&gt;strong&lt;/a&gt; and &lt;a href=&#34;https://rust-random.github.io/book/guide-rngs.html#basic-pseudo-random-number-generators-prngs&#34;&gt;small&lt;/a&gt; generators: &lt;a href=&#34;https://docs.rs/rand/latest/rand/rngs/index.html&#34;&gt;&lt;code&gt;rand::rngs&lt;/code&gt;&lt;/a&gt;, and more RNGs: &lt;a href=&#34;https://docs.rs/rand_chacha&#34;&gt;&lt;code&gt;rand_chacha&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://docs.rs/rand_xoshiro/&#34;&gt;&lt;code&gt;rand_xoshiro&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://docs.rs/rand_pcg/&#34;&gt;&lt;code&gt;rand_pcg&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/rust-random/rngs/&#34;&gt;rngs repo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/rand/latest/rand/fn.rng.html&#34;&gt;&lt;code&gt;rand::rng&lt;/code&gt;&lt;/a&gt; is an asymptotically-fast, automatically-seeded and reasonably strong generator available on all &lt;code&gt;std&lt;/code&gt; targets&lt;/li&gt; &#xA; &lt;li&gt;Direct support for seeding generators from the &lt;a href=&#34;https://crates.io/crates/getrandom&#34;&gt;getrandom&lt;/a&gt; crate&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;With broad support for random value generation and random processes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/rand/latest/rand/distr/struct.StandardUniform.html&#34;&gt;&lt;code&gt;StandardUniform&lt;/code&gt;&lt;/a&gt; random value sampling, &lt;a href=&#34;https://docs.rs/rand/latest/rand/distr/struct.Uniform.html&#34;&gt;&lt;code&gt;Uniform&lt;/code&gt;&lt;/a&gt;-ranged value sampling and &lt;a href=&#34;https://docs.rs/rand/latest/rand/distr/index.html&#34;&gt;more&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Samplers for a large number of non-uniform random number distributions via our own &lt;a href=&#34;https://docs.rs/rand_distr&#34;&gt;&lt;code&gt;rand_distr&lt;/code&gt;&lt;/a&gt; and via the &lt;a href=&#34;https://docs.rs/statrs/0.13.0/statrs/&#34;&gt;&lt;code&gt;statrs&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Random processes (mostly choose and shuffle) via &lt;a href=&#34;https://docs.rs/rand/latest/rand/seq/index.html&#34;&gt;&lt;code&gt;rand::seq&lt;/code&gt;&lt;/a&gt; traits&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rust-random.github.io/book/portability.html&#34;&gt;Portably reproducible output&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;#[no_std]&lt;/code&gt; compatibility (partial)&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Many&lt;/em&gt; performance optimisations thanks to contributions from the wide user-base&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Rand &lt;strong&gt;is not&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Small (LoC). Most low-level crates are small, but the higher-level &lt;code&gt;rand&lt;/code&gt; and &lt;code&gt;rand_distr&lt;/code&gt; each contain a lot of functionality.&lt;/li&gt; &#xA; &lt;li&gt;Simple (implementation). We have a strong focus on correctness, speed and flexibility, but not simplicity. If you prefer a small-and-simple library, there are alternatives including &lt;a href=&#34;https://crates.io/crates/fastrand&#34;&gt;fastrand&lt;/a&gt; and &lt;a href=&#34;https://crates.io/crates/oorandom&#34;&gt;oorandom&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;A cryptography library. Rand provides functionality for generating unpredictable random data (potentially applicable depending on requirements) but does not provide high-level cryptography functionality.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Rand is a community project and cannot provide legally-binding guarantees of security.&lt;/p&gt; &#xA;&lt;p&gt;Documentation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rust-random.github.io/book&#34;&gt;The Rust Rand Book&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rust-random.github.io/rand&#34;&gt;API reference (master branch)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/rand&#34;&gt;API reference (docs.rs)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Versions&lt;/h2&gt; &#xA;&lt;p&gt;Rand is &lt;em&gt;mature&lt;/em&gt; (suitable for general usage, with infrequent breaking releases which minimise breakage) but not yet at 1.0. Current versions are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Version 0.9 was released in January 2025.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/rust-random/rand/master/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt; or &lt;a href=&#34;https://rust-random.github.io/book/update.html&#34;&gt;Upgrade Guide&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Crate Features&lt;/h2&gt; &#xA;&lt;p&gt;Rand is built with these features enabled by default:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;std&lt;/code&gt; enables functionality dependent on the &lt;code&gt;std&lt;/code&gt; lib&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;alloc&lt;/code&gt; (implied by &lt;code&gt;std&lt;/code&gt;) enables functionality requiring an allocator&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;os_rng&lt;/code&gt; (implied by &lt;code&gt;std&lt;/code&gt;) enables &lt;code&gt;rngs::OsRng&lt;/code&gt;, using the &lt;a href=&#34;https://crates.io/crates/getrandom&#34;&gt;getrandom&lt;/a&gt; crate&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;std_rng&lt;/code&gt; enables inclusion of &lt;code&gt;StdRng&lt;/code&gt;, &lt;code&gt;ThreadRng&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Optionally, the following dependencies can be enabled:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;log&lt;/code&gt; enables logging via &lt;a href=&#34;https://crates.io/crates/log&#34;&gt;log&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally, these features configure Rand:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;small_rng&lt;/code&gt; enables inclusion of the &lt;code&gt;SmallRng&lt;/code&gt; PRNG&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nightly&lt;/code&gt; includes some additions requiring nightly Rust&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;simd_support&lt;/code&gt; (experimental) enables sampling of SIMD values (uniformly random SIMD integers and floats), requiring nightly Rust&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that nightly features are not stable and therefore not all library and compiler versions will be compatible. This is especially true of Rand&#39;s experimental &lt;code&gt;simd_support&lt;/code&gt; feature.&lt;/p&gt; &#xA;&lt;p&gt;Rand supports limited functionality in &lt;code&gt;no_std&lt;/code&gt; mode (enabled via &lt;code&gt;default-features = false&lt;/code&gt;). In this case, &lt;code&gt;OsRng&lt;/code&gt; and &lt;code&gt;from_os_rng&lt;/code&gt; are unavailable (unless &lt;code&gt;os_rng&lt;/code&gt; is enabled), large parts of &lt;code&gt;seq&lt;/code&gt; are unavailable (unless &lt;code&gt;alloc&lt;/code&gt; is enabled), and &lt;code&gt;ThreadRng&lt;/code&gt; is unavailable.&lt;/p&gt; &#xA;&lt;h2&gt;Portability and platform support&lt;/h2&gt; &#xA;&lt;p&gt;Many (but not all) algorithms are intended to have reproducible output. Read more in the book: &lt;a href=&#34;https://rust-random.github.io/book/portability.html&#34;&gt;Portability&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The Rand library supports a variety of CPU architectures. Platform integration is outsourced to &lt;a href=&#34;https://crates.io/crates/getrandom&#34;&gt;getrandom&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;WASM support&lt;/h3&gt; &#xA;&lt;p&gt;Seeding entropy from OS on WASM target &lt;code&gt;wasm32-unknown-unknown&lt;/code&gt; is not &lt;em&gt;automatically&lt;/em&gt; supported by &lt;code&gt;rand&lt;/code&gt; or &lt;code&gt;getrandom&lt;/code&gt;. If you are fine with seeding the generator manually, you can disable the &lt;code&gt;os_rng&lt;/code&gt; feature and use the methods on the &lt;code&gt;SeedableRng&lt;/code&gt; trait. To enable seeding from OS, either use a different target such as &lt;code&gt;wasm32-wasi&lt;/code&gt; or add a direct dependency on &lt;a href=&#34;https://crates.io/crates/getrandom&#34;&gt;getrandom&lt;/a&gt; with the &lt;code&gt;js&lt;/code&gt; feature (if the target supports JavaScript). See &lt;a href=&#34;https://docs.rs/getrandom/latest/getrandom/#webassembly-support&#34;&gt;getrandom#WebAssembly support&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Rand is distributed under the terms of both the MIT license and the Apache License (Version 2.0).&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/rust-random/rand/master/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/rust-random/rand/master/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/rust-random/rand/master/COPYRIGHT&#34;&gt;COPYRIGHT&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
</feed>