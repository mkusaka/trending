<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-10T01:47:02Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hydro-project/hydroflow</title>
    <updated>2023-06-10T01:47:02Z</updated>
    <id>tag:github.com,2023-06-10:/hydro-project/hydroflow</id>
    <link href="https://github.com/hydro-project/hydroflow" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Hydro&#39;s low-level dataflow runtime&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/hydro-project/hydroflow/main/docs/static/img/hydroflow_100.png&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&amp;quot;hf&amp;quot;&#34;&gt; Hydroflow&lt;br&gt; &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://crates.io/crates/hydroflow&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/hydroflow?style=flat-square&amp;amp;logo=rust&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/hydroflow/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs.rs-Hydroflow-blue?style=flat-square&amp;amp;logo=read-the-docs&amp;amp;logoColor=white&#34; alt=&#34;Docs.rs&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Hydroflow is a low-latency dataflow runtime written in Rust. The &lt;a href=&#34;https://hydro.run/docs/hydroflow/ecosystem/&#34;&gt;Hydro Project&lt;/a&gt; will empower developers to harness the full potential of the cloud by making distributed programs easy to specify and automatic to scale. Hydroflow serves as the lowest level in the &lt;a href=&#34;https://hydro.run/docs/hydroflow/ecosystem/&#34;&gt;Hydro stack&lt;/a&gt;, serving as a single-node low-latency runtime with explicit networking. This allows us to support not just data processing pipelines, but distributed protocols (e.g. Paxos) and real-world long-running applications as well.&lt;/p&gt; &#xA;&lt;p&gt;Take a look at the &lt;a href=&#34;https://hydro.run/docs/hydroflow/&#34;&gt;Hydroflow Book&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;The Hydroflow Surface Syntax&lt;/h2&gt; &#xA;&lt;p&gt;Hydroflow comes with a custom &#34;surface syntax&#34; domain-specific language which serves as a very simple, readable IR for specifying single-node Hydroflow programs, intended to be stitched together by the Hydro stack to create larger autoscaling distributed systems.&#39;&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a simple example of the surface syntax. Check out the &lt;a href=&#34;https://hydro.run/playground&#34;&gt;Hydroflow Playground&lt;/a&gt; for an interactive demo.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;source_iter(0..10)&#xA;  -&amp;gt; map(|n| n * n)&#xA;  -&amp;gt; filter(|&amp;amp;n| n &amp;gt; 10)&#xA;  -&amp;gt; foo;&#xA;&#xA;foo = map(|n| (n..=n+1))&#xA;  -&amp;gt; flatten()&#xA;  -&amp;gt; for_each(|n| println!(&#34;Howdy {}&#34;, n));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more, check out the &lt;a href=&#34;https://hydro.run/docs/hydroflow/syntax/&#34;&gt;surface syntax section of the Hydroflow book&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Start with a Template Program&lt;/h2&gt; &#xA;&lt;p&gt;We provide a &lt;code&gt;cargo-generate&lt;/code&gt; template for you to get started from a simple working example.&lt;/p&gt; &#xA;&lt;p&gt;To install &lt;code&gt;cargo-generate&lt;/code&gt;, run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash,&#34;&gt;cargo install cargo-generate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash,&#34;&gt;cargo generate gh:hydro-project/hydroflow-template&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and you will get a well-formed Hydroflow/Rust project to use as a starting point. It provides a simple Echo Server and Client, and advice for adapting it to other uses.&lt;/p&gt; &#xA;&lt;h2&gt;Dev Setup&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://hydro.run/docs/hydroflow/quickstart/setup&#34;&gt;setup section of the book&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;The Examples Container&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;hydroflow/examples&lt;/code&gt; subdirectory of this repository includes a number of examples. To make running these examples in the cloud easier, we&#39;ve created a Docker image that contains compiled versions of those examples. The image is defined in the &lt;code&gt;Dockerfile&lt;/code&gt; in the same directory as this README.&lt;/p&gt; &#xA;&lt;p&gt;If you want to build the examples container locally, you can run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build -t hydroflow-examples .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will build an image suitable for your architecture.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;scripts/multiplatform-docker-build.sh &amp;lt;image name&amp;gt;&lt;/code&gt; script will build both &lt;code&gt;arm64&lt;/code&gt; and &lt;code&gt;amd64&lt;/code&gt; versions of the image and push them to the image name specified. By default, this will push the image to DockerHub; if you want to push the image to another repository, you can pass an image URL as the argument to &lt;code&gt;multiplatform-docker-build.sh&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;p&gt;Example binaries are located in &lt;code&gt;/usr/src/myapp&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>matter-labs/era-sync_vm</title>
    <updated>2023-06-10T01:47:02Z</updated>
    <id>tag:github.com,2023-06-10:/matter-labs/era-sync_vm</id>
    <link href="https://github.com/matter-labs/era-sync_vm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Circuit Implementation of zkVM for zkSync Era&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CPU/GPU Based Prover for zkSync Era&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://zksync.io/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/matter-labs/era-sync_vm/v1.3.2/eraLogo.png&#34; alt=&#34;Logo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;zkSync Era is a layer 2 rollup that uses zero-knowledge proofs to scale Ethereum without compromising on security or decentralization. Since it&#39;s EVM compatible (Solidity/Vyper), 99% of Ethereum projects can redeploy without refactoring or re-auditing a single line of code. zkSync Era also uses an LLVM-based compiler that will eventually let developers write smart contracts in C++, Rust and other popular languages.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The zkSync Era prover is distributed under the terms of either&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apache License, Version 2.0, (&lt;a href=&#34;https://raw.githubusercontent.com/matter-labs/era-sync_vm/v1.3.2/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;MIT license (&lt;a href=&#34;https://raw.githubusercontent.com/matter-labs/era-sync_vm/v1.3.2/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;at your option.&lt;/p&gt; &#xA;&lt;h2&gt;Official Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zksync.io/&#34;&gt;Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/matter-labs&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/zksync&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/zkSyncDevs&#34;&gt;Twitter for Devs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://join.zksync.dev&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;zkSync Era has been through lots of testing and audits. Although it is live, it is still in alpha state and will go through more audits and bug bounties programs. We would love to hear our community&#39;s thoughts and suggestions about it! It is important to state that forking it now can potentially lead to missing important security updates, critical features, and performance improvements.&lt;/p&gt;</summary>
  </entry>
</feed>