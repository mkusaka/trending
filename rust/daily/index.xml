<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-30T01:45:11Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nozwock/yanu</title>
    <updated>2023-04-30T01:45:11Z</updated>
    <id>tag:github.com,2023-04-30:/nozwock/yanu</id>
    <link href="https://github.com/nozwock/yanu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Yet Another NSP Updater for Skyline&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;yanu&lt;/h1&gt; &#xA; &lt;p&gt;Yet Another NSP Updater for &lt;a href=&#34;https://github.com/skyline-emu/skyline&#34;&gt;Skyline&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Consider starring ðŸŒŸ the project if it helped&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Yanu&lt;/strong&gt; is a &lt;strong&gt;Nintendo Switch&lt;/strong&gt; ROM updater designed to work with Skyline on &lt;a href=&#34;https://github.com/nozwock/yanu#android-wtermux&#34;&gt;Android w/Termux&lt;/a&gt;, &lt;a href=&#34;https://github.com/nozwock/yanu#linux&#34;&gt;Linux&lt;/a&gt;, and &lt;a href=&#34;https://github.com/nozwock/yanu#windows&#34;&gt;Windows&lt;/a&gt;, as well as other platforms with the help of &lt;a href=&#34;https://github.com/nozwock/yanu#docker&#34;&gt;Docker images&lt;/a&gt;. It serves as a temporary solution until Skyline supports Updates/DLCs natively.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; - &lt;strong&gt;Doesn&#39;t support DLCs.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Precompiled binaries are available from the &lt;a href=&#34;https://github.com/nozwock/yanu/releases&#34;&gt;GitHub releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Supported File Types&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; NSP&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; XCI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; - Support for others might be added.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Android w/Termux&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Check out &lt;a href=&#34;https://www.youtube.com/watch?v=rsYHWL7G3EI&#34;&gt;Video Tutorial&lt;/a&gt; by Zerokimchi for Android.&lt;/strong&gt; &lt;em&gt;(outdated command in the video)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download &amp;amp; Install &lt;code&gt;Termux&lt;/code&gt; from &lt;a href=&#34;https://f-droid.org/en/packages/com.termux/&#34;&gt;F-droid&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Copy-paste the following in &lt;code&gt;Termux&lt;/code&gt; and hit enter:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;bash &amp;lt;(curl -L https://raw.githubusercontent.com/nozwock/yanu/main/scripts/yanu-bootstrap-termux.sh)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Relevant resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MiXplorer &lt;a href=&#34;https://forum.xda-developers.com/t/app-2-2-mixplorer-v6-x-released-fully-featured-file-manager.1523691/&#34;&gt;XDA Forum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;MiXplorer GDrive &lt;a href=&#34;https://drive.google.com/drive/folders/1BfeK39boriHy-9q76eXLLqbCwfV17-Gv&#34;&gt;download link&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Ensure that your system has all the necessary dependencies installed to build hactool/hacPack/etc. For example: &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo apt -y install gcc-12 g++-12 make git libjpeg-dev binutils-dev libicu-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Download &amp;amp; give executable permission to &lt;code&gt;yanu&lt;/code&gt;: &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;chmod +x yanu-x86_64-unknown-linux-musl&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Just &lt;a href=&#34;https://github.com/nozwock/yanu/releases&#34;&gt;download&lt;/a&gt; &amp;amp; run.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;br&gt; Due to the lack of code-signing, some anti-virus programs may falsely identify the program as malicious. I cannot afford expensive certificates to prevent this. Exercise caution if concerned and consider using tools like &lt;a href=&#34;https://www.virustotal.com&#34;&gt;virustotal.com&lt;/a&gt; or &lt;a href=&#34;https://www.hybrid-analysis.com&#34;&gt;hybrid-analysis.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;Go &lt;a href=&#34;https://github.com/nozwock/yanu/pkgs/container/yanu&#34;&gt;here&lt;/a&gt; to pull the container you wish to use. Once you have the container, you can use it like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;   # Expecting &#39;prod.keys` in pwd&#xA;   docker run -v $(pwd)/prod.keys:/root/.switch/prod.keys -v $(pwd):/work ghcr.io/nozwock/yanu update --base &#39;/path/to/base&#39; --update &#39;/path/to/update&#39; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage (CLI only)&lt;/h2&gt; &#xA;&lt;p&gt;View CLI help with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yanu --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For updating a ROM:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yanu --keyfile &#39;/path/to/keyfile&#39; update --base &#39;/path/to/base&#39; --update &#39;/path/to/update&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set a new &lt;code&gt;Roms Directory&lt;/code&gt; (Used in &lt;code&gt;update-prompt&lt;/code&gt;) with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yanu config --roms-dir &#39;/new/path/here&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For unpacking ROMs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yanu unpack --base &#39;/path/to/base&#39; --update &#39;/path/to/update&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;OR, for only unpacking a single ROM:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yanu unpack --base &#39;/path/to/base&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For repacking unpacked ROM data (with base+update):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yanu repack --controlnca &#39;./base+update.bylies/patchdata/nca_around_1mb.nca&#39; --titleid &#39;BaseGameTitleID&#39; --romfsdir &#39;./base+update.bylies/romfs&#39; --exefsdir &#39;./base+update.bylies/exefs&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;For Windows, adapt the above examples by replacing &lt;code&gt;/&lt;/code&gt; with &lt;code&gt;\&lt;/code&gt; and using the appropriate path to the executable.&lt;/li&gt; &#xA;  &lt;li&gt;Control NCA is typically around 1MB in size.&lt;/li&gt; &#xA;  &lt;li&gt;Yanu only accepts Control Type NCA. If unsure of the Type, trial and error can help narrow down the options.&lt;/li&gt; &#xA;  &lt;li&gt;Check the logs for guidance on which TitleID to use if using the wrong one.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Directories Used&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Used for&lt;/th&gt; &#xA;   &lt;th&gt;Windows&lt;/th&gt; &#xA;   &lt;th&gt;Linux&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Keys&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;%USERPROFILE%\.switch&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$HOME/.switch&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Cache&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;%LOCALAPPDATA%\com.github.nozwock.yanu&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$HOME/.cache/com.github.nozwock.yanu&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Config&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;%APPDATA%\com.github.nozwock.yanu&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$HOME/.config/com.github.nozwock.yanu&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you encounter errors such as &#39;Failed to sync package repos&#39; while installing yanu on Termux, try updating your outdated repositories using: &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;termux-change-repo&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Special Thanks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SciresM/hactool&#34;&gt;hactool&lt;/a&gt;, &lt;a href=&#34;https://github.com/The-4n/hacPack&#34;&gt;hacPack&lt;/a&gt;, &lt;a href=&#34;https://github.com/Atmosphere-NX/hac2l&#34;&gt;hac2l&lt;/a&gt;, &lt;a href=&#34;https://github.com/Thealexbarney/LibHac&#34;&gt;hactoolnet&lt;/a&gt;, and &lt;a href=&#34;https://github.com/The-4n/4NXCI&#34;&gt;4NXCI&lt;/a&gt; are used internally for the heavy lifting.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Pipetto-crypto&#34;&gt;@Pipetto-crypto&lt;/a&gt; for the &lt;code&gt;aarch64-linux&lt;/code&gt; &lt;code&gt;hac2l&lt;/code&gt; binary.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/willfaust/fb90dec409b8918290012031f09a78ef&#34;&gt;Willfaust&#39;s script&lt;/a&gt; for reference.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Kudaes/Bin-Finder</title>
    <updated>2023-04-30T01:45:11Z</updated>
    <id>tag:github.com,2023-04-30:/Kudaes/Bin-Finder</id>
    <link href="https://github.com/Kudaes/Bin-Finder" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Detect EDR&#39;s exceptions by inspecting processes&#39; loaded modules&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Description&lt;/h1&gt; &#xA;&lt;p&gt;This tool looks for either the processes that have a certain binary loaded or the processes that don&#39;t. This is useful in the following scenarios:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It allows to detect processes where an specific EDR/AV dll is not loaded. This could lead to EDR&#39;s exception detection.&lt;/li&gt; &#xA; &lt;li&gt;It allows to obtain the PID of an specific process with a minimum cross process activity (e.g. looking for processes with c:\windows\sytem32\lsass.exe loaded will give us the Lsass&#39; PID).&lt;/li&gt; &#xA; &lt;li&gt;It allows to obtain the PID of a service or a RPC/COM server withouth iterating over each running svchost process.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Maybe you can find other valuable ways to use this tools. These results are obtained avoiding to iterate over &lt;strong&gt;all the processes in the system&lt;/strong&gt; and with a reduced noise.&lt;/p&gt; &#xA;&lt;p&gt;The tool obtains all the processes where a certain binary is loaded by calling &lt;code&gt;NtQueryInformationFile&lt;/code&gt; with the flag &lt;code&gt;FileProcessIdsUsingFileInformation&lt;/code&gt;. Then and only if required, &lt;code&gt;EnumProcesses&lt;/code&gt; is called to obtain all processes&#39; PID, and finally both results are compared in order to obtain a final PID list. If the tool is not running on quiet mode, the final PIDs are translated into the process main module&#39;s fully qualified path.&lt;/p&gt; &#xA;&lt;p&gt;If you want to reduce the cross process activity, use the &lt;strong&gt;quiet&lt;/strong&gt; mode (&lt;code&gt;--quiet&lt;/code&gt; or &lt;code&gt;-q&lt;/code&gt;). In this case, no process handle will be opened, but the tool will only retrieve the PIDs and not the fully qualified paths.&lt;/p&gt; &#xA;&lt;p&gt;The tool is fully compatible with Win10 and later and Windows Server 2016 and later. For older OS versions,the call to &lt;code&gt;OpenProcess&lt;/code&gt; (line &lt;code&gt;src::main.rs:108&lt;/code&gt;) requires &lt;code&gt;PROCESS_QUERY_INFORMATION&lt;/code&gt; and &lt;code&gt;PROCESS_VM_READ&lt;/code&gt; instead of just &lt;code&gt;PROCESS_QUERY_LIMITED_INFORMATION&lt;/code&gt; (or you can just stick to the quiet mode which doesn&#39;t open any process handle).&lt;/p&gt; &#xA;&lt;h1&gt;Compilation&lt;/h1&gt; &#xA;&lt;p&gt;Since we are using &lt;a href=&#34;https://github.com/anvie/litcrypt.rs&#34;&gt;LITCRYPT&lt;/a&gt; plugin to obfuscate string literals, it is required to set up the environment variable LITCRYPT_ENCRYPT_KEY before compiling the code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;C:\Users\User\Desktop\bin_finder\bin_finder&amp;gt; set LITCRYPT_ENCRYPT_KEY=&#34;yoursupersecretkey&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After that, simply compile the code and execute the tool:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;C:\Users\User\Desktop\Bin-Finder&amp;gt; cargo build --release&#xA;C:\Users\User\Desktop\Bin-Finder\target\release&amp;gt; bin_finder.exe -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;Bin-finder has two different usage modes. The default mode will look for all the processes that don&#39;t have loaded the specified binary. For example, we can search for all the processes that do not have loaded the CrowdStrike dll:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Kudaes/Bin-Finder/main/images/find.png&#34; alt=&#34;All processes without CS.&#34; title=&#34;All processes without CS.&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is pretty useful when you are looking for directories/processes within the EDR&#39;s exception list.&lt;/p&gt; &#xA;&lt;p&gt;If you want to reduce the cross process activity, it can be used the quiet mode to retrieve only the PIDs:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Kudaes/Bin-Finder/main/images/find_quiet.png&#34; alt=&#34;All processes without CS.&#34; title=&#34;All processes without CS.&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Also, if you dont know the name or the path of the dll that you are looking for, you can try listing the modules loaded on a regular process using the flag &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--list&lt;/code&gt; (this is also useful to spot whether or not there is an EDR in place):&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Kudaes/Bin-Finder/main/images/list.png&#34; alt=&#34;List modules.&#34; title=&#34;List modules.&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The second usage mode is the reverse lookup (flags &lt;code&gt;-r&lt;/code&gt; or &lt;code&gt;--reverse&lt;/code&gt;), which will look for all the processes that have currently loaded the specified binary. For example, maybe you are interested in getting the PID of the process that is running the StorSvc service. In that case, just make a reverse lookup for the dll that implements the RPC server used by that service:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Kudaes/Bin-Finder/main/images/reverse.png&#34; alt=&#34;Reverse lookup.&#34; title=&#34;Reverse lookup.&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This reverse lookup can also be used to directly obtain a process&#39; PID by specifying its main module&#39;s full path (usually an .exe file) without the need to iterate over all processes in the system. This is how you would obtain all running chrome.exe&#39;s PID:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Kudaes/Bin-Finder/main/images/reverse_exe.png&#34; alt=&#34;Exe reverse lookup.&#34; title=&#34;Reverse lookup.&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Credits&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/ShitSecure&#34;&gt;@ShitSecure&lt;/a&gt; for &lt;a href=&#34;https://gist.github.com/S3cur3Th1sSh1t/d9aad93027aad893adae8805d59e2d73&#34;&gt;this cool script&lt;/a&gt; that inspired me to create this tool.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>