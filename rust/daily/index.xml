<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-01T01:45:20Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dredozubov/polyrhythmix</title>
    <updated>2023-07-01T01:45:20Z</updated>
    <id>tag:github.com,2023-07-01:/dredozubov/polyrhythmix</id>
    <link href="https://github.com/dredozubov/polyrhythmix" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Polyrhythmically-inclinded Midi Drum generator&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Polyrhythmix&lt;/h1&gt; &#xA;&lt;p&gt;Polyrhythmix (Poly) is a command-line assistant designed to generate MIDI files from the description of drum parts. It provides a convenient way to input a DSL (Domain-Specific Language) in the command line, then it calculates when the drum parts will converge together, making it easy to compose polyrhythmic parts with frequent shifts over the bar lines. Additionally, it can generate a bass MIDI track that follows the kick drum.&lt;/p&gt; &#xA;&lt;p&gt;Polyrhythmix is specifically designed to assist musicians and composers working in genres such as modern progressive rock, metal, djent, fusion, and Indian Carnatic music. It aims to simplify the process of creating complex polyrhythmic drum patterns, enabling users to focus on the creative aspects of their compositions.&lt;/p&gt; &#xA;&lt;h1&gt;Motivation&lt;/h1&gt; &#xA;&lt;p&gt;I&#39;m a guitar player, and I use tablature notation editors such as Guitar Pro a lot. However, it gets complicated fast when I write polyrhythmic/polymetric drum parts, because shifts tend to go over the bar lines and it&#39;s hard to make sense it&#39;s correct visually (may be even harder if you listen to it). The other property of such parts is: it tends to unfold from simple ideas such as &#34;I want to create a drum part that will have a 3 against 4 feel with a kick drum against a snare drum&#34;. The other way to think about it is that it has a simple blueprint, but it&#39;s tricky and error-prone to express in Western musical notation. This is why &lt;code&gt;Polyrhythmix&lt;/code&gt; exists. I wanted to have a simple tool to workshop/brainstorm rhythmic ideas and evaluate them by having a MIDI playback. I&#39;m into modern Progressive Rock/Metal music, Fusion, so it all applies very well. I have an impression it may be useful for Indian Carnatic music as well, but I would like to get some insightful confirmation on that.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Drum Generation&lt;/strong&gt;: Polyrhythmix takes a DSL input to define polyrhythmic patterns for various drum instruments. It intelligently calculates when different drum parts will converge, ensuring rhythmic synchronization.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;MIDI File Generation&lt;/strong&gt;: Once the polyrhythmic pattern is defined, Polyrhythmix generates a MIDI file containing the drum parts. This file can be imported into any compatible software or hardware for further editing or playback.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bass Track Generation&lt;/strong&gt;: Polyrhythmix offers an option to generate a bass MIDI track that follows the kick drum. This feature provides a foundation for creating cohesive rhythm sections by synchronizing the bassline with the kick drum pattern.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;For Rust developers (or other people who have cargo on their machine):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install polyrhythmix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;Polyrhythmix runs as an executable with the desired command line options. The available options are as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: poly [OPTIONS]&#xA;&#xA;Options:&#xA;  -K, --kick &amp;lt;KICK&amp;gt;&#xA;          Kick drum pattern&#xA;  -S, --snare &amp;lt;SNARE&amp;gt;&#xA;          Snare drum pattern&#xA;  -H, --hi-hat &amp;lt;HIHAT&amp;gt;&#xA;          Hi-Hat pattern&#xA;  -C, --crash &amp;lt;CRASH&amp;gt;&#xA;          Crash cymbal pattern&#xA;  -t, --tempo &amp;lt;TEMPO&amp;gt;&#xA;          Tempo value [default: 120]&#xA;  -s, --time-signature &amp;lt;TIME_SIGNATURE&amp;gt;&#xA;          Time signature [default: 4/4]&#xA;  -o, --output-file &amp;lt;OUTPUT&amp;gt;&#xA;          Output file path, make a dry run if omitted&#xA;  -B, --follow-kick-drum-with-bass&#xA;          Generate a second MIDI track for the bass following the kick drum&#xA;  -h, --help&#xA;          Print help&#xA;  -V, --version&#xA;          Print version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Polyrhythmix uses a simple DSL (Domain-specific language) for drum patterns. For a more detailed explanation, go to &lt;a href=&#34;https://raw.githubusercontent.com/dredozubov/polyrhythmix/master/#dsl-overview&#34;&gt;DSL Overview&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s say you want to tell if two patterns will converge and how soon. We&#39;ll start with a 3 against 4. The first pattern would be a series of 8th notes on the kick drum&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;poly  --kick &#39;8x--x--&#39; --snare &#39;4-x&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;No output file path was supplied, running a dry run...&#xA;Converges over 3 bars&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We haven&#39;t provided an &lt;code&gt;--output-file&lt;/code&gt; / &lt;code&gt;-o&lt;/code&gt; parameter, so &lt;code&gt;poly&lt;/code&gt; made a dry run. It tells us it will converge in 3 bars. Let&#39;s see how it will look in the MIDI file by adding an output.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;poly  --kick &#39;8x--x--&#39; --snare &#39;4-x&#39; -o out.mid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Converges over 3 bars&#xA;out.mid was written successfully&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Polyrhythmix operates under the assumption that it&#39;s easy to replicate a fully converged pattern in the DAW or tablature editor, so it only generates 3 bars of drums in this case. On Mac OS, I usually do something in lines of &lt;code&gt;poly &amp;lt;OPTIONS&amp;gt; -o out.mid &amp;amp;&amp;amp; open out.mid&lt;/code&gt; or &lt;code&gt;poly &amp;lt;OPTIONS&amp;gt; -o out.mid &amp;amp;&amp;amp; open -a &#39;Guitar Pro 7&#39; out.mid&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This way it defaults to 4/4 as a time signature, but we may want to interpret this rhythmic pattern in 3/4 for example. Let&#39;s try it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;poly --time-signature &#39;3/4&#39; --kick &#39;8x--x--&#39; --snare &#39;4-x&#39; -o out.mid &amp;amp;&amp;amp; open -a &#39;Guitar Pro 7&#39; out.mid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Converges over 2 bars&#xA;out.mid was written successfully&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we can see it converges in 2 bars, not 3. Honestly, I like the 4/4 host time signature better. Let&#39;s get back to it. Also, we can add a crash cymbal and hi-hat patterns too, also we can make it just a bit livelier by increasing the tempo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;poly --time-signature &#39;4/4&#39; --tempo 138 --crash &#39;4x---&#39; --hi-hat &#39;8-xxx&#39; --kick &#39;8x--x--&#39; --snare &#39;4-x&#39; -o out.mid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s cool, but let&#39;s make it even more useful by adding a blueprint for the bass track. Simple way of doing that is to make bass follow the kick drum. &lt;code&gt;Poly&lt;/code&gt; has an option to do this called &lt;code&gt;-B&lt;/code&gt;/&lt;code&gt;--follow-kick-drum-with-bass&lt;/code&gt;. Let&#39;s add it to the previous command to add the bass track to the output file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;poly --time-signature &#39;4/4&#39; --tempo 138 --crash &#39;4x---&#39; --hi-hat &#39;8.t-xxx&#39; --kick &#39;8x--x--&#39; --snare &#39;4-x&#39; -o out.mid -B&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we have two tracks in the output file and you can change the bass notes to create an expected harmonic context.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s try one more thing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;poly -t 115 -K &#39;32xx16xx&#39; -H &#39;8x&#39; -S &#39;4--x-&#39; -B -o bleed.mid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Congratulations, now you have a basic version of &#34;&lt;a href=&#34;https://raw.githubusercontent.com/dredozubov/polyrhythmix/master/doc/bleed.mid&#34;&gt;Bleed&lt;/a&gt;&#34; by Meshuggah!&lt;/p&gt; &#xA;&lt;p&gt;To get to the next level, you need to understand that note groups can be recursive if you nest them. For example &lt;code&gt;(3,8x(3,16x-xx(3,32xx-x))))&lt;/code&gt; would read as &#34;Three repeats of an eighth note hit, then three nested repeats of hit, rest, hit, hit in sixteenth notes, then three repeats of hit, hit, rest, hit in thirty-second notes&#34;. It sure is a mouthful, but the point is: any repeat of a nested child group would be applied to every repeat of the parent group that includes it.&lt;/p&gt; &#xA;&lt;h1&gt;DSL overview&lt;/h1&gt; &#xA;&lt;p&gt;Any pattern can be described by a series of note groups. All notes in the note group have the same length. Possible lengths are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;1&lt;/code&gt; - Whole note&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;2&lt;/code&gt; - Half note&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;4&lt;/code&gt; - Fourth note&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;8&lt;/code&gt; - Eighth note&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;16&lt;/code&gt; - Sixteenth note&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;32&lt;/code&gt; - Thirty-second note&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;64&lt;/code&gt; - Sixty-Fourth note&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.&lt;/code&gt; - dotted note (meaning it has 1.5 lengths of unmodified duration). Dot should be applied after the basic length like this: &lt;code&gt;8.&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;t&lt;/code&gt; - Triplet notes, should be applied after basic lengths and dots. e.g. &lt;code&gt;4.t&lt;/code&gt; means triplets of dotted fourth notes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Now let&#39;s talk about the drums. &lt;code&gt;Poly&lt;/code&gt; has a logic similar to a drum machine, so we only concern ourselves with drum hits and rests:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;x&lt;/code&gt; - Hit&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-&lt;/code&gt; - Rest&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Let&#39;s compose a few simple note groups:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;4x&lt;/code&gt; - a group of a single fourth note.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;8.-x&lt;/code&gt; a group of a rest and a drum hit. Both rest and hit have a length of 8th dotted note each.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It&#39;s possible to repeat a group of notes of the same length with the following syntax:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;(3,8x-x)&lt;/code&gt; means repeat three times a series of hit, rest, hit in eighth notes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Now that we know that, we may sequence multiple groups like this:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;32xx16xx&lt;/code&gt; - Kick pattern from &#34;&lt;a href=&#34;https://raw.githubusercontent.com/dredozubov/polyrhythmix/master/doc/bleed.mid&#34;&gt;Bleed&lt;/a&gt;&#34; by Meshuggah&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note groups can be nested within each other, which interacts in interesting ways with repeats:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;(3,16x(3,8txxx(3,32x-x-x-)))&lt;/code&gt; I&#39;m struggling to make a compelling example, so here&#39;s a triple-nested pattern that converges over 471 bars of 4/4&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Guitar pro remarks&lt;/h2&gt; &#xA;&lt;p&gt;Don&#39;t forget to quantize MIDI imports to 64th notes as it gets increasingly crazier as we get into the wilder note groupings: &lt;img src=&#34;https://raw.githubusercontent.com/dredozubov/polyrhythmix/master/doc/Guitar-Pro-Import.png&#34; alt=&#34;Guitar Pro Import&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Contributions are very welcome, feel free to open issues, open pull requests, and give me feedback regarding this piece of software.&lt;/p&gt; &#xA;&lt;h1&gt;Contact&lt;/h1&gt; &#xA;&lt;p&gt;If you encounter issues or have questions about using Poly, please feel free to reach out to me &lt;a href=&#34;mailto://denis.redozubov@gmail.com&#34;&gt;via email&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>vi3t1/qq-tim-elevation</title>
    <updated>2023-07-01T01:45:20Z</updated>
    <id>tag:github.com,2023-07-01:/vi3t1/qq-tim-elevation</id>
    <link href="https://github.com/vi3t1/qq-tim-elevation" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CVE-2023-34312&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Tencent QQ/TIM Local Privilege Elevation&lt;/h1&gt; &#xA;&lt;p&gt;Affected Products:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;QQ 9.7.1.28940 ~ 9.7.8.29039&lt;/li&gt; &#xA; &lt;li&gt;TIM 3.4.5.22071 ~ 3.4.7.22084&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Affected Components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;QQProtect.exe 4.5.0.9424 (in TIM 3.4.5.22071)&lt;/li&gt; &#xA; &lt;li&gt;QQProtect.exe 4.5.0.9426 (in QQ 9.7.1.28940)&lt;/li&gt; &#xA; &lt;li&gt;QQProtectEngine.dll 4.5.0.9424 (in TIM 3.4.5.22071)&lt;/li&gt; &#xA; &lt;li&gt;QQProtectEngine.dll 4.5.0.9426 (in QQ 9.7.1.28940)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;1. Summary&lt;/h2&gt; &#xA;&lt;p&gt;Tencent &lt;a href=&#34;https://im.qq.com&#34;&gt;QQ&lt;/a&gt; and &lt;a href=&#34;https://tim.qq.com/&#34;&gt;TIM&lt;/a&gt; are two instant messaging softwares developped by Shenzhen Tencent Computer System Co., Ltd. They both have a component &lt;em&gt;QQProtect.exe&lt;/em&gt; locating in &lt;code&gt;%ProgramFiles(x86)%\Common Files\Tencent\QQProtect\bin&lt;/code&gt;. &lt;em&gt;QQProtect.exe&lt;/em&gt; is installed as a Windows service named &lt;em&gt;QPCore&lt;/em&gt; and runs as &lt;code&gt;NT Authority\SYSTEM&lt;/code&gt; automatically when system starts up. Both the component &lt;em&gt;QQProtect.exe&lt;/em&gt; and its dependent DLL &lt;em&gt;QQProtectEngine.dll&lt;/em&gt; have an arbitrary address write vulnerability. An attacker with low privilege can load evil DLL inside QQProtect.exe process by combining the two vulnerability and gets &lt;code&gt;NT Authority\SYSTEM&lt;/code&gt; shell.&lt;/p&gt; &#xA;&lt;h2&gt;2. Vulnerability&lt;/h2&gt; &#xA;&lt;p&gt;The first vulnerability is the code at QQProtect.exe+0x40c9f8:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/vi3t1/qq-tim-elevation/master/image0.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;where &lt;code&gt;a2&lt;/code&gt; is a pointer that can be controlled by an attacker and &lt;code&gt;dword_41a740&lt;/code&gt; is a global variable whose value is &lt;code&gt;0x00000001&lt;/code&gt;. So an attacker can write the value &lt;code&gt;DWORD(1)&lt;/code&gt; at any address.&lt;/p&gt; &#xA;&lt;p&gt;The second vulnerability is the code at QQProtectEngine.dll+0x3B4F6:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/vi3t1/qq-tim-elevation/master/image1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;where &lt;code&gt;v3&lt;/code&gt; is a pointer that can be controlled by an attacker. So an attacker can write the value &lt;code&gt;std::bit_cast&amp;lt;DWORD&amp;gt;(ptr) + 4&lt;/code&gt; at any given address &lt;code&gt;ptr&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;An attacker can tamper with a function pointer resides in &lt;code&gt;QQProtect.exe&lt;/code&gt; and use ROP chains to execute arbitray code easily due to the fact that &lt;code&gt;QQProtect.exe&lt;/code&gt; does not have ASLR protection.&lt;/p&gt; &#xA;&lt;h2&gt;3. Proof of concepts&lt;/h2&gt; &#xA;&lt;p&gt;The poc code is written in Rust language. You should use &lt;code&gt;i686-pc-windows-msvc&lt;/code&gt; toolchain to compile it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cd poc&#xA;$ cargo +stable-i686-pc-windows-msvc build --release --config &#34;build.rustflags = [\&#34;-C\&#34;, \&#34;target-feature=+crt-static\&#34;]&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will get two DLLs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;target\release\tinyxml.dll&#xA;target\release\evil.dll&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then put the two Dlls above and &lt;code&gt;%ProgramFiles(x86)%\Common Files\Tencent\QQProtect\bin\QQProtect.exe&lt;/code&gt; togather in a folder.&lt;/p&gt; &#xA;&lt;p&gt;Finally get &lt;code&gt;NT Authority\SYSTEM&lt;/code&gt; shell with one command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ QQProtect.exe &amp;lt;PATH TO evil.dll&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;4. Demonstration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/vi3t1/qq-tim-elevation/master/demonstration.gif&#34; alt=&#34;demonstration.gif&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hinto-janai/festival</title>
    <updated>2023-07-01T01:45:20Z</updated>
    <id>tag:github.com,2023-07-01:/hinto-janai/festival</id>
    <link href="https://github.com/hinto-janai/festival" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Music player&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Festival&lt;/h1&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/hinto-janai/festival/main/assets/images/icon/512.png&#34; width=&#34;10%&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/hinto-janai/festival/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;Festival is a music player for local album collections.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/hinto-janai/festival/assets/101352116/586e37e7-762d-4dc6-a9c4-9bdc45396961&#34;&gt;https://github.com/hinto-janai/festival/assets/101352116/586e37e7-762d-4dc6-a9c4-9bdc45396961&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Frontends&lt;/h2&gt; &#xA;&lt;p&gt;All the frontends are built on top of the internals, &lt;a href=&#34;https://github.com/hinto-janai/festival/tree/main/shukusai&#34;&gt;&lt;code&gt;shukusai&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Currently, the most full frontend implementation is &lt;a href=&#34;https://github.com/hinto-janai/festival/tree/main/gui&#34;&gt;&lt;code&gt;festival-gui&lt;/code&gt;&lt;/a&gt; (or just called &lt;code&gt;Festival&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Frontend&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Released&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/hinto-janai/festival/tree/main/gui&#34;&gt;&lt;code&gt;festival-gui&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GUI (&lt;a href=&#34;https://github.com/emilk/egui&#34;&gt;&lt;code&gt;egui&lt;/code&gt;&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;🟢 2023-06-28&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/hinto-janai/festival/tree/main/daemon&#34;&gt;&lt;code&gt;festivald&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Daemon (&lt;a href=&#34;https://github.com/MusicPlayerDaemon/MPD&#34;&gt;&lt;code&gt;mpd&lt;/code&gt;&lt;/a&gt;-like)&lt;/td&gt; &#xA;   &lt;td&gt;🔴&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/hinto-janai/festival/tree/main/cli&#34;&gt;&lt;code&gt;festival-cli&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;CLI client&lt;/td&gt; &#xA;   &lt;td&gt;🔴&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/hinto-janai/festival/tree/main/web&#34;&gt;&lt;code&gt;festival-web&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;WASM client&lt;/td&gt; &#xA;   &lt;td&gt;🔴&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For a user guide on Festival, see &lt;a href=&#34;https://github.com/hinto-janai/festival/tree/main/gui&#34;&gt;&lt;code&gt;gui/&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For a broad overview of the internals, see &lt;a href=&#34;https://github.com/hinto-janai/festival/tree/main/shukusai&#34;&gt;&lt;code&gt;shukusai/&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For a comparison between Festival and other music players, see &lt;a href=&#34;https://github.com/hinto-janai/festival/tree/main/comparison&#34;&gt;&lt;code&gt;comparison/&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;General Info&lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;You need &lt;a href=&#34;https://www.rust-lang.org/learn/get-started&#34;&gt;&lt;code&gt;cargo&lt;/code&gt;&lt;/a&gt; and at least &lt;code&gt;rustc 1.70&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;You also need to clone the &lt;code&gt;submodules&lt;/code&gt; that include patched libraries found in &lt;a href=&#34;https://github.com/hinto-janai/festival/tree/main/external&#34;&gt;&lt;code&gt;external/&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --recursive https://github.com/hinto-janai/festival&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The repo is a workspace, with &lt;code&gt;shukusai&lt;/code&gt; and the &lt;code&gt;Frontend&lt;/code&gt;&#39;s all having a top-level directory, e.g:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/hinto-janai/festival/tree/main/shukusai&#34;&gt;&lt;code&gt;shukusai/&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/hinto-janai/festival/tree/main/gui&#34;&gt;&lt;code&gt;gui/&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Building at the root will build all binaries.&lt;/p&gt; &#xA; &lt;p&gt;Currently, the only packages in the workspace are &lt;code&gt;shukusai&lt;/code&gt; and &lt;code&gt;festival-gui&lt;/code&gt;, which gets built as &lt;code&gt;festival[.exe]&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Linux&lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;The pre-compiled Linux binaries are built on Ubuntu 20.04, you&#39;ll need these packages to build:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;sudo apt install libgtk-3-dev libasound2-dev libjack-dev libpulse-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;To build:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Optionally, to create an &lt;code&gt;AppImage&lt;/code&gt; after building, at the repo root, run:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd utils/&#xA;./mk_appimage.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;This will create &lt;code&gt;Festival-v${VERSION}-x86_64.AppImage&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;This requires &lt;code&gt;appimagetool&lt;/code&gt;. If not detected, it will &lt;code&gt;wget&lt;/code&gt; the latest release to &lt;code&gt;/tmp&lt;/code&gt; and use that instead.&lt;/p&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;macOS&lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;To build:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Optionally, to create a &lt;code&gt;Festival.app&lt;/code&gt; after building, at the repo root, run:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd utils/&#xA;./mk_app.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;This will create &lt;code&gt;Festival.app&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;Optionally, to create a &lt;code&gt;.dmg&lt;/code&gt; after that, run:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./mk_dmg.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;This will create &lt;code&gt;Festival-v${VERSION}-macos-(x64|arm64).dmg&lt;/code&gt;, &lt;code&gt;x64&lt;/code&gt; or &lt;code&gt;arm64&lt;/code&gt; depending on your &lt;code&gt;cargo&lt;/code&gt; target.&lt;/p&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Windows&lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;To build:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;There is a &lt;a href=&#34;https://github.com/hinto-janai/festival/raw/main/gui/build.rs&#34;&gt;&lt;code&gt;build.rs&lt;/code&gt;&lt;/a&gt; file in &lt;code&gt;gui/&lt;/code&gt; solely for Windows-specific things:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;It sets the icon in &lt;code&gt;File Explorer&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;It statically links &lt;code&gt;VCRUNTIME140.dll&lt;/code&gt; (the binary will not be portable without this)&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Festival is licensed under the &lt;a href=&#34;https://github.com/hinto-janai/festival/raw/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pdeljanov/Symphonia&#34;&gt;Symphonia&lt;/a&gt;, the audio decoding/demuxing/metadata library used by Festival is licensed under MPL-2.0.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt;  &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Playlists&lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;Festival does not support playlists at the moment.&lt;/p&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Compilations&lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;Festival does not directly support compilations (a single album, but with various artists) at the moment.&lt;/p&gt; &#xA; &lt;p&gt;It will still load the album, but it will be spread out for each different artist.&lt;/p&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Missing music&lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;Your audio files must have proper metadata for Festival to detect it.&lt;/p&gt; &#xA; &lt;p&gt;The required tags are:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Artist&lt;/li&gt; &#xA;  &lt;li&gt;Album&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;If the song title tag does not exist, the filename will be used instead.&lt;/p&gt; &#xA; &lt;p&gt;For more details on metadata related errors, start Festival in a console:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./festival&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;and look for yellow &lt;code&gt;W&lt;/code&gt; (Warn) log messages during a &lt;code&gt;Collection&lt;/code&gt; reset.&lt;/p&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Missing album art&lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;If your audio file has embedded album art, Festival will use it.&lt;/p&gt; &#xA; &lt;p&gt;If no embedded album art metadata is found, Festival will:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Search in the same directory as the file for an image file&lt;/li&gt; &#xA;  &lt;li&gt;Search in the file&#39;s parent directory for an image file&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;If an image file is not found, a default &lt;code&gt;?&lt;/code&gt; album art will be used.&lt;/p&gt; &#xA; &lt;p&gt;The supported image file formats are:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;JPG/JPEG&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;PNG&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;BMP&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;ICO&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;TIFF&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;WebP&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;AVIF&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Metadata editing&lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;Festival is only a music player, not a metadata editor.&lt;/p&gt; &#xA; &lt;p&gt;Some metadata editors you could use:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://kid3.kde.org&#34;&gt;&lt;code&gt;Kid3&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://www.mp3tag.de/en&#34;&gt;&lt;code&gt;mp3tag&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://docs.puddletag.net&#34;&gt;&lt;code&gt;puddletag&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://picard.musicbrainz.org&#34;&gt;&lt;code&gt;MusicBrainz Picard&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Supported audio codecs&lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;The supported audio codecs are:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;AAC&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;ADPCM&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;ALAC&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;FLAC&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;MP3/MP2/MP1/MPA/MPEG&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;Ogg/Vorbis&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;Opus&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;WAV&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;AIFF&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;WavPack&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Supported metadata formats&lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Format&lt;/th&gt; &#xA;    &lt;th&gt;Status&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;ID3v1&lt;/td&gt; &#xA;    &lt;td&gt;Great&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;ID3v2&lt;/td&gt; &#xA;    &lt;td&gt;Great&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;ISO/MP4&lt;/td&gt; &#xA;    &lt;td&gt;Great&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;RIFF&lt;/td&gt; &#xA;    &lt;td&gt;Great&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Vorbis comment (FLAC)&lt;/td&gt; &#xA;    &lt;td&gt;Perfect&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Vorbis comment (OGG)&lt;/td&gt; &#xA;    &lt;td&gt;Perfect&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
</feed>