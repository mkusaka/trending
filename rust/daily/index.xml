<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-04T01:36:43Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>opentensor/subtensor</title>
    <updated>2024-07-04T01:36:43Z</updated>
    <id>tag:github.com,2024-07-04:/opentensor/subtensor</id>
    <link href="https://github.com/opentensor/subtensor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bittensor Blockchain Layer&lt;/p&gt;&lt;hr&gt;&lt;pre&gt;&lt;code class=&#34;language-commandline&#34;&gt;███████╗██╗   ██╗██████╗ ████████╗███████╗███╗   ██╗███████╗ ██████╗ ██████╗&#xA;██╔════╝██║   ██║██╔══██╗╚══██╔══╝██╔════╝████╗  ██║██╔════╝██╔═══██╗██╔══██╗&#xA;███████╗██║   ██║██████╔╝   ██║   █████╗  ██╔██╗ ██║███████╗██║   ██║██████╔╝&#xA;╚════██║██║   ██║██╔══██╗   ██║   ██╔══╝  ██║╚██╗██║╚════██║██║   ██║██╔══██╗&#xA;███████║╚██████╔╝██████╔╝   ██║   ███████╗██║ ╚████║███████║╚██████╔╝██║  ██║&#xA;╚══════╝ ╚═════╝ ╚═════╝    ╚═╝   ╚══════╝╚═╝  ╚═══╝╚══════╝ ╚═════╝ ╚═╝  ╚═╝&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;&lt;strong&gt;Subtensor&lt;/strong&gt; &#xA; &lt;!-- omit in toc --&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/bittensor&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/308323056592486420.svg?sanitize=true&#34; alt=&#34;Discord Chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository contains Bittensor&#39;s substrate-chain. Subtensor contains the trusted logic which:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Runs Bittensor&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/opentensor/subtensor/main/docs/consensus.md&#34;&gt;consensus mechanism&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;Advertises neuron information, IPs, etc., and&lt;/li&gt; &#xA; &lt;li&gt;Facilitates value transfer via TAO.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;System Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The binaries in ./bin/release are x86_64 binaries to be used with the Linux kernel.&lt;/li&gt; &#xA; &lt;li&gt;Subtensor needs ~286 MiB to run.&lt;/li&gt; &#xA; &lt;li&gt;Architectures other than x86_64 are currently not supported.&lt;/li&gt; &#xA; &lt;li&gt;OSs other than Linux and MacOS are currently not supported.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Architectures&lt;/h2&gt; &#xA;&lt;p&gt;Subtensor support the following architectures:&lt;/p&gt; &#xA;&lt;h2&gt;Linux x86_64&lt;/h2&gt; &#xA;&lt;p&gt;Requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux kernel 2.6.32+,&lt;/li&gt; &#xA; &lt;li&gt;glibc 2.11+ A fresh FRAME-based &lt;a href=&#34;https://www.substrate.io/&#34;&gt;Substrate&lt;/a&gt; node, ready for hacking &lt;span&gt;🚀&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;MacOS x86_64&lt;/h2&gt; &#xA;&lt;p&gt;Requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MacOS 10.7+ (Lion+)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Network requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Subtensor needs access to the public internet&lt;/li&gt; &#xA; &lt;li&gt;Subtensor runs on ipv4&lt;/li&gt; &#xA; &lt;li&gt;Subtensor listens on the following ports: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;9944 - Websocket. This port is used by bittensor. It only accepts connections from localhost. Make sure this port is firewalled off from the public domain.&lt;/li&gt; &#xA;   &lt;li&gt;9933 - RPC. This port is opened, but not used.&lt;/li&gt; &#xA;   &lt;li&gt;30333 - p2p socket. This port accepts connections from other subtensor nodes. Make sure your firewall(s) allow incoming traffic to this port.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;It is assumed your default outgoing traffic policy is ACCEPT. If not, make sure outbound traffic to port 30333 is allowed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;For Subnet Development&lt;/h2&gt; &#xA;&lt;p&gt;If you are developing and testing subnet incentive mechanism, you will need to run a local subtensor node. Follow the detailed step-by-step instructions provided in the document &lt;a href=&#34;https://raw.githubusercontent.com/opentensor/subtensor/main/docs/running-subtensor-locally.md&#34;&gt;Running subtensor locally&lt;/a&gt; to run either a lite node or an archive node. Also see the &lt;a href=&#34;https://docs.bittensor.com/subtensor-nodes&#34;&gt;&lt;strong&gt;Subtensor Nodes&lt;/strong&gt; section in Bittensor Developer Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Lite node vs Archive node&lt;/h3&gt; &#xA;&lt;p&gt;For an explanation of lite node, archive node and how you can run your local subtensor node in these modes, see &lt;a href=&#34;https://docs.bittensor.com/subtensor-nodes#lite-node-vs-archive-node&#34;&gt;Lite node vs archive node&lt;/a&gt; section on &lt;a href=&#34;https://docs.bittensor.com/&#34;&gt;Bittensor Developer Docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;For Subtensor Development&lt;/h2&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;First, complete the &lt;a href=&#34;https://raw.githubusercontent.com/opentensor/subtensor/main/docs/rust-setup.md&#34;&gt;basic Rust setup instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Build and Run&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use Rust&#39;s native &lt;code&gt;cargo&lt;/code&gt; command to build and launch the template node:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo run --release -- --dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Build only&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The above &lt;code&gt;cargo run&lt;/code&gt; command will perform an initial build and launch the node. Use the following command to build the node without launching it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!--&#xA;&#xA;/** When I ran &#34;cargo doc&#34; it gave me a bunch of errors. And when I did &#34;cargo doc --open&#34; it gave same bunch of errors, and did not open. Also, I don&#39;t think the binary is &#34;subtensor&#34;. It is &#34;node-subtensor&#34;. We should uncomment this section after testing and validating and fixing this section.&#xA;*/&#xA;&#xA;### Embedded Docs&#xA;&#xA;Once the project has been built, the following command can be used to explore all parameters and&#xA;subcommands:&#xA;&#xA;```sh&#xA;./target/release/subtensor -h&#xA;```&#xA;--&gt; &#xA;&lt;h2&gt;Other ways to launch the node&lt;/h2&gt; &#xA;&lt;p&gt;The above &lt;code&gt;cargo run&lt;/code&gt; command will launch a temporary node and its state will be discarded after you terminate the process. After the project has been built, there are other ways to launch the node.&lt;/p&gt; &#xA;&lt;h3&gt;Single-Node Development Chain&lt;/h3&gt; &#xA;&lt;p&gt;This command will start the single-node development chain with non-persistent state:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./target/release/subtensor --dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Purge the development chain&#39;s state:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./target/release/subtensor purge-chain --dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start the development chain with detailed logging:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;RUST_BACKTRACE=1 ./target/release/subtensor-ldebug --dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running debug with logs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;SKIP_WASM_BUILD=1 RUST_LOG=runtime=debug -- --nocapture&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running individual tests&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;SKIP_WASM_BUILD=1 \&#xA;  RUST_LOG=runtime=debug \&#xA;  cargo test &amp;lt;your test name&amp;gt; \&#xA;  -- --nocapture --color always&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;testing `tests/` tips&lt;/summary&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;code&gt;&amp;lt;package-name&amp;gt;&lt;/code&gt;&lt;/strong&gt; Available members are found within the project root &lt;a href=&#34;https://raw.githubusercontent.com/opentensor/subtensor/main/cargo.toml&#34;&gt;&lt;code&gt;./cargo.toml&lt;/code&gt;&lt;/a&gt; file, each point to a sub-directory containing a &lt;code&gt;cargo.toml&lt;/code&gt; file with a &lt;code&gt;name&lt;/code&gt; defined. for example, &lt;a href=&#34;https://raw.githubusercontent.com/opentensor/subtensor/main/node/cargo.toml&#34;&gt;&lt;code&gt;node/cargo.toml&lt;/code&gt;&lt;/a&gt; has a name of &lt;code&gt;node-subtensor&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;code&gt;&amp;lt;test-name&amp;gt;&lt;/code&gt;&lt;/strong&gt; Available tests are often found within either a &lt;code&gt;tests/&lt;/code&gt; sub-directory or within the relevant &lt;code&gt;src/&lt;/code&gt; file. for example &lt;a href=&#34;https://raw.githubusercontent.com/opentensor/subtensor/main/node/tests/chain_spec.rs&#34;&gt;&lt;code&gt;./node/tests/chain_spec.rs&lt;/code&gt;&lt;/a&gt; has a test named &lt;code&gt;chain_spec&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;example&lt;/strong&gt; All together we can run all tests in &lt;code&gt;chain_spec&lt;/code&gt; file from &lt;code&gt;node-subtensor&lt;/code&gt; project via&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;skip_wasm_build=1 \&#xA;  rust_log=runtime=debug \&#xA;  cargo test \&#xA;  --package node-subtensor \&#xA;  --test chain_spec \&#xA;  -- --color always --nocapture&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Running code coverage&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash scripts/code-coverage.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: They above requires &lt;code&gt;cargo-tarpaulin&lt;/code&gt; is installed to the host, eg. &lt;code&gt;cargo install cargo-tarpaulin&lt;/code&gt; Development chain means that the state of our chain will be in a tmp folder while the nodes are running. Also, &lt;strong&gt;alice&lt;/strong&gt; account will be authority and sudo account as declared in the &lt;a href=&#34;https://github.com/substrate-developer-hub/substrate-node-template/raw/main/node/src/chain_spec.rs#L49&#34;&gt;genesis state&lt;/a&gt;. At the same time the following accounts will be pre-funded:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Alice&lt;/li&gt; &#xA;  &lt;li&gt;Bob&lt;/li&gt; &#xA;  &lt;li&gt;Alice//stash&lt;/li&gt; &#xA;  &lt;li&gt;Bob//stash&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If we want to maintain the chain state between runs, a base path must be added so the db can be stored in the provided folder instead of a temporal one. We could use this folder to store different chain databases, as a different folder will be created per different chain that is ran. The following commands show how to use a newly created folder as our db base path:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Create a folder to use as the db base path&#xA;mkdir my-chain-state&#xA;&#xA;# Use of that folder to store the chain state&#xA;./target/release/node-template --dev --base-path ./my-chain-state/&#xA;&#xA;# Check the folder structure created inside the base path after running the chain&#xA;ls ./my-chain-state&#xA;#&amp;gt; chains&#xA;ls ./my-chain-state/chains/&#xA;#&amp;gt; dev&#xA;ls ./my-chain-state/chains/dev&#xA;#&amp;gt; db keystore network&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Connect with Polkadot-JS Apps Front-end&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Once the node template is running locally, you can connect it with &lt;strong&gt;Polkadot-JS Apps&lt;/strong&gt; front-end to interact with your chain. &lt;a href=&#34;https://polkadot.js.org/apps/#/explorer?rpc=ws://localhost:9944&#34;&gt;Click here&lt;/a&gt; connecting the Apps to your local node template.&lt;/p&gt; &#xA;&lt;h3&gt;Multi-Node Local Testnet&lt;/h3&gt; &#xA;&lt;p&gt;If you want to see the multi-node consensus algorithm in action, refer to our &lt;a href=&#34;https://docs.substrate.io/tutorials/build-a-blockchain/simulate-network/&#34;&gt;Simulate a network tutorial&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Template Structure&lt;/h2&gt; &#xA;&lt;p&gt;A Substrate project such as this consists of a number of components that are spread across a few directories.&lt;/p&gt; &#xA;&lt;h3&gt;Node Capabilities&lt;/h3&gt; &#xA;&lt;p&gt;A blockchain node is an application that allows users to participate in a blockchain network. Substrate-based blockchain nodes expose a number of capabilities:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Networking: Substrate nodes use the &lt;a href=&#34;https://libp2p.io/&#34;&gt;&lt;code&gt;libp2p&lt;/code&gt;&lt;/a&gt; networking stack to allow the nodes in the network to communicate with one another.&lt;/li&gt; &#xA; &lt;li&gt;Consensus: Blockchains must have a way to come to &lt;a href=&#34;https://docs.substrate.io/main-docs/fundamentals/consensus/&#34;&gt;consensus&lt;/a&gt; on the state of the network. Substrate makes it possible to supply custom consensus engines and also ships with several consensus mechanisms that have been built on top of &lt;a href=&#34;https://research.web3.foundation/en/latest/polkadot/NPoS/index.html&#34;&gt;Web3 Foundation research&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;RPC Server: A remote procedure call (RPC) server is used to interact with Substrate nodes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Directory structure&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are several files in the &lt;a href=&#34;https://raw.githubusercontent.com/opentensor/subtensor/main/node/&#34;&gt;&lt;code&gt;node&lt;/code&gt;&lt;/a&gt; directory. Make a note of the following important files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/opentensor/subtensor/main/node/src/chain_spec.rs&#34;&gt;&lt;code&gt;chain_spec.rs&lt;/code&gt;&lt;/a&gt;: A &lt;a href=&#34;https://docs.substrate.io/main-docs/build/chain-spec/&#34;&gt;chain specification&lt;/a&gt; is a source code file that defines a Substrate chain&#39;s initial (genesis) state. Chain specifications are useful for development and testing, and critical when architecting the launch of a production chain. Take note of the &lt;code&gt;development_config&lt;/code&gt; and &lt;code&gt;testnet_genesis&lt;/code&gt; functions, which are used to define the genesis state for the local development chain configuration. These functions identify some &lt;a href=&#34;https://docs.substrate.io/reference/command-line-tools/subkey/&#34;&gt;well-known accounts&lt;/a&gt; and use them to configure the blockchain&#39;s initial state.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/opentensor/subtensor/main/node/src/service.rs&#34;&gt;&lt;code&gt;service.rs&lt;/code&gt;&lt;/a&gt;: This file defines the node implementation. Take note of the libraries that this file imports and the names of the functions it invokes. In particular, there are references to consensus-related topics, such as the &lt;a href=&#34;https://docs.substrate.io/main-docs/fundamentals/consensus/#finalization-and-forks&#34;&gt;block finalization and forks&lt;/a&gt; and other &lt;a href=&#34;https://docs.substrate.io/main-docs/fundamentals/consensus/#default-consensus-models&#34;&gt;consensus mechanisms&lt;/a&gt; such as Aura for block authoring and GRANDPA for finality.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;CLI help&lt;/h3&gt; &#xA;&lt;p&gt;After the node has been &lt;a href=&#34;https://raw.githubusercontent.com/opentensor/subtensor/main/#build&#34;&gt;built&lt;/a&gt;, refer to the embedded documentation to learn more about the capabilities and configuration parameters that it exposes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./target/release/node-subtensor --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Runtime&lt;/h3&gt; &#xA;&lt;p&gt;In Substrate, the terms &#34;runtime&#34; and &#34;state transition function&#34; are analogous - they refer to the core logic of the blockchain that is responsible for validating blocks and executing the state changes they define. The Substrate project in this repository uses &lt;a href=&#34;https://docs.substrate.io/main-docs/fundamentals/runtime-intro/#frame&#34;&gt;FRAME&lt;/a&gt; to construct a blockchain runtime. FRAME allows runtime developers to declare domain-specific logic in modules called &#34;pallets&#34;. At the heart of FRAME is a helpful &lt;a href=&#34;https://docs.substrate.io/reference/frame-macros/&#34;&gt;macro language&lt;/a&gt; that makes it easy to create pallets and flexibly compose them to create blockchains that can address &lt;a href=&#34;https://substrate.io/ecosystem/projects/&#34;&gt;a variety of needs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Review the &lt;a href=&#34;https://raw.githubusercontent.com/opentensor/subtensor/main/runtime/src/lib.rs&#34;&gt;FRAME runtime implementation&lt;/a&gt; included in this template and note the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This file configures several pallets to include in the runtime. Each pallet configuration is defined by a code block that begins with &lt;code&gt;impl $PALLET_NAME::Config for Runtime&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The pallets are composed into a single runtime by way of the &lt;a href=&#34;https://crates.parity.io/frame_support/macro.construct_runtime.html&#34;&gt;&lt;code&gt;construct_runtime!&lt;/code&gt;&lt;/a&gt; macro, which is part of the core FRAME Support &lt;a href=&#34;https://docs.substrate.io/reference/frame-pallets/#system-pallets&#34;&gt;system&lt;/a&gt; library.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Pallets&lt;/h3&gt; &#xA;&lt;p&gt;The runtime in this project is constructed using many FRAME pallets that ship with the &lt;a href=&#34;https://github.com/paritytech/substrate/tree/master/frame&#34;&gt;core Substrate repository&lt;/a&gt; and a template pallet that is &lt;a href=&#34;https://raw.githubusercontent.com/opentensor/subtensor/main/pallets/template/src/lib.rs&#34;&gt;defined in the &lt;code&gt;pallets&lt;/code&gt;&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;A FRAME pallet is compromised of a number of blockchain primitives:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Storage: FRAME defines a rich set of powerful &lt;a href=&#34;https://docs.substrate.io/main-docs/build/runtime-storage/&#34;&gt;storage abstractions&lt;/a&gt; that makes it easy to use Substrate&#39;s efficient key-value database to manage the evolving state of a blockchain.&lt;/li&gt; &#xA; &lt;li&gt;Dispatchables: FRAME pallets define special types of functions that can be invoked (dispatched) from outside of the runtime in order to update its state.&lt;/li&gt; &#xA; &lt;li&gt;Events: Substrate uses &lt;a href=&#34;https://docs.substrate.io/main-docs/build/events-errors/&#34;&gt;events and errors&lt;/a&gt; to notify users of important changes in the runtime.&lt;/li&gt; &#xA; &lt;li&gt;Errors: When a dispatchable fails, it returns an error.&lt;/li&gt; &#xA; &lt;li&gt;Config: The &lt;code&gt;Config&lt;/code&gt; configuration interface is used to define the types and parameters upon which a FRAME pallet depends.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--&#xA;### Run in Docker&#xA;&#xA;First, install [Docker](https://docs.docker.com/get-docker/) and&#xA;[Docker Compose](https://docs.docker.com/compose/install/).&#xA;&#xA;Then run the following command to start a single node development chain.&#xA;&#xA;```bash&#xA;./scripts/docker_run.sh&#xA;```&#xA;&#xA;This command will firstly compile your code, and then start a local development network. You can&#xA;also replace the default command&#xA;(`cargo build --release &amp;&amp; ./target/release/node-template --dev --ws-external`)&#xA;by appending your own. A few useful ones are as follow.&#xA;&#xA;```bash&#xA;# Run Substrate node without re-compiling&#xA;./scripts/docker_run.sh ./target/release/node-template --dev --ws-external&#xA;&#xA;# Purge the local dev chain&#xA;./scripts/docker_run.sh ./target/release/node-template purge-chain --dev&#xA;&#xA;# Check whether the code is compilable&#xA;./scripts/docker_run.sh cargo check&#xA;```&#xA;--&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The MIT License (MIT) Copyright © 2021 Yuma Rao&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;parralax&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>greenbone/openvas-scanner</title>
    <updated>2024-07-04T01:36:43Z</updated>
    <id>tag:github.com,2024-07-04:/greenbone/openvas-scanner</id>
    <link href="https://github.com/greenbone/openvas-scanner" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repository contains the scanner component for Greenbone Community Edition.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://www.greenbone.net/wp-content/uploads/gb_new-logo_horizontal_rgb_small.png&#34; alt=&#34;Greenbone Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;OpenVAS Scanner&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/greenbone/openvas-scanner/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/greenbone/openvas-scanner.svg?sanitize=true&#34; alt=&#34;GitHub releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/greenbone/openvas-scanner/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/greenbone/openvas-scanner.svg?sanitize=true&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/greenbone/openvas-scanner/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/greenbone/openvas-scanner.svg?maxAge=2592000&#34; alt=&#34;Docker Image Size&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/greenbone/openvas-scanner/actions/workflows/control.yml?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/greenbone/openvas-scanner/actions/workflows/control.yml/badge.svg?branch=main&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is the OpenVAS Scanner of the Greenbone Community Edition.&lt;/p&gt; &#xA;&lt;p&gt;It is used for the Greenbone Enterprise appliances and is a full-featured scan engine that executes a continuously updated and extended feed of Vulnerability Tests (VTs).&lt;/p&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;All &lt;a href=&#34;https://github.com/greenbone/openvas/releases&#34;&gt;release files&lt;/a&gt; are signed with the &lt;a href=&#34;https://community.greenbone.net/t/gcf-managing-the-digital-signatures/101&#34;&gt;Greenbone Community Feed integrity key&lt;/a&gt;. This gpg key can be downloaded at &lt;a href=&#34;https://www.greenbone.net/GBCommunitySigningKey.asc&#34;&gt;https://www.greenbone.net/GBCommunitySigningKey.asc&lt;/a&gt; and the fingerprint is &lt;code&gt;8AE4 BE42 9B60 A59B 311C 2E73 9823 FAA6 0ED1 E580&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;This module can be configured, built and installed with following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake .&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For detailed installation requirements and instructions, please see the file &lt;a href=&#34;https://raw.githubusercontent.com/greenbone/openvas-scanner/main/INSTALL.md&#34;&gt;INSTALL.md&lt;/a&gt;. The file also contains instructions for setting up &lt;code&gt;openvas&lt;/code&gt; and for making the scanner available to other GVM modules.&lt;/p&gt; &#xA;&lt;p&gt;If you are not familiar or comfortable building from source code, we recommend that you use the Greenbone Enterprise TRIAL, a prepared virtual machine with a readily available setup. Information regarding the virtual machine is available at &lt;a href=&#34;https://www.greenbone.net/en/testnow&#34;&gt;https://www.greenbone.net/en/testnow&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Rust Implementation&lt;/h2&gt; &#xA;&lt;p&gt;This repository also consists of a &lt;a href=&#34;https://raw.githubusercontent.com/greenbone/openvas-scanner/main/rust/README.md&#34;&gt;rust project&lt;/a&gt; aiming to replace the current scanner stack (openvas-scanner, ospd-openvas, notus-scanner). It simplifies the use of the scanner and centralizes everything needed for scanning. Currently it uses the openvas-scanner as scan engine.&lt;/p&gt; &#xA;&lt;h2&gt;Docker, &lt;a href=&#34;https://greenbone.github.io/docs/latest/22.4/container/&#34;&gt;Greenbone Community Containers&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;If you want to use the docker files provided in this repository you can pull them from &lt;a href=&#34;https://hub.docker.com/r/greenbone/openvas-scanner&#34;&gt;here&lt;/a&gt;. You can also locally build them using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build -t &amp;lt;image-name&amp;gt; -f .docker/prod.Dockerfile .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information about building docker images, see &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/build/&#34;&gt;official man&lt;/a&gt;. We also provide a &lt;a href=&#34;https://greenbone.github.io/docs/latest/22.4/container/&#34;&gt;fully containerized solution&lt;/a&gt; for the Greenbone Community Edition.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Please beware: The Greenbone Community Container are currently under development.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;For any question on the usage of &lt;code&gt;openvas&lt;/code&gt; please use the &lt;a href=&#34;https://community.greenbone.net/&#34;&gt;Greenbone Community Portal&lt;/a&gt;. If you found a problem with the software, please &lt;a href=&#34;https://github.com/greenbone/openvas-scanner/issues&#34;&gt;create an issue&lt;/a&gt; on GitHub. If you are a Greenbone customer you may alternatively or additionally forward your issue to the Greenbone Support Portal.&lt;/p&gt; &#xA;&lt;h2&gt;Maintainer&lt;/h2&gt; &#xA;&lt;p&gt;This project is maintained by &lt;a href=&#34;https://www.greenbone.net/&#34;&gt;Greenbone AG&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Your contributions are highly appreciated. Please &lt;a href=&#34;https://github.com/greenbone/openvas-scanner/pulls&#34;&gt;create a pull request&lt;/a&gt; on GitHub. Remember to commit the contribution agreement as explained in &lt;a href=&#34;https://github.com/greenbone/openvas-scanner/tree/main/RELICENSE&#34;&gt;RELICENSING&lt;/a&gt; folder with your first PR. Bigger changes should be discussed with the development team via the &lt;a href=&#34;https://github.com/greenbone/openvas-scanner/issues&#34;&gt;issues section at GitHub&lt;/a&gt; first.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This repository consists of two scanner implementation, one in programming language C and one in programming language Rust.&lt;/p&gt; &#xA;&lt;p&gt;This module except for the Rust-implementation in directory rust/ is licensed under the GNU General Public License v2.0 only. Single files, however, are licensed either under the GNU General Public License v2.0 only or under GNU General Public License v2.0 or later, please see the &lt;a href=&#34;https://raw.githubusercontent.com/greenbone/openvas-scanner/main/license-details.md&#34;&gt;license-details.md&lt;/a&gt; file for details.&lt;/p&gt; &#xA;&lt;p&gt;The Rust-implementation in directory rust/ is licensed under the GNU General Public License v2.0 or later with OpenSSL exception. Single files, however, are additionally licensed under MIT.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>servo/servo</title>
    <updated>2024-07-04T01:36:43Z</updated>
    <id>tag:github.com,2024-07-04:/servo/servo</id>
    <link href="https://github.com/servo/servo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Servo, the embeddable, independent, memory-safe, modular, parallel web rendering engine&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Servo Parallel Browser Engine Project&lt;/h1&gt; &#xA;&lt;p&gt;Servo is a prototype web browser engine written in the &lt;a href=&#34;https://github.com/rust-lang/rust&#34;&gt;Rust&lt;/a&gt; language. It is currently developed on 64-bit macOS, 64-bit Linux, 64-bit Windows, and Android.&lt;/p&gt; &#xA;&lt;p&gt;Servo welcomes contribution from everyone. See &lt;a href=&#34;https://raw.githubusercontent.com/servo/servo/main/CONTRIBUTING.md&#34;&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/servo/servo/main/docs/HACKING_QUICKSTART.md&#34;&gt;&lt;code&gt;HACKING_QUICKSTART.md&lt;/code&gt;&lt;/a&gt; for help getting started.&lt;/p&gt; &#xA;&lt;p&gt;Visit the &lt;a href=&#34;https://servo.org/&#34;&gt;Servo Project page&lt;/a&gt; for news and guides.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Servo&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/servo/servo&#xA;cd servo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Your CARGO_HOME needs to point to (or be in) the same drive as your Servo repository (&lt;a href=&#34;https://github.com/servo/servo/issues/28530&#34;&gt;#28530&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;The Servo repository is big! If you have an unreliable network connection, consider &lt;a href=&#34;https://github.blog/2020-12-21-get-up-to-speed-with-partial-clone-and-shallow-clone/&#34;&gt;making a shallow clone&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build Setup&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/servo/servo/main/#macos&#34;&gt;macOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/servo/servo/main/#Linux&#34;&gt;Linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/servo/servo/main/#windows&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/servo/servo/wiki/Building-for-Android&#34;&gt;Android&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If these instructions fail or you would like to install dependencies manually, try the &lt;a href=&#34;https://github.com/servo/servo/wiki/Building#manual-build-setup&#34;&gt;manual build setup&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ensure that the version showed by &lt;code&gt;python --version&lt;/code&gt; is &amp;gt;= 3.10:&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://developer.apple.com/xcode/&#34;&gt;Xcode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./mach bootstrap&lt;/code&gt;&lt;br&gt; &lt;em&gt;Note: This will install the recommended version of GStreamer globally on your system.&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install Python (version &amp;gt;= 3.10): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Debian-like:&lt;/strong&gt; Run &lt;code&gt;sudo apt install python3-pip python3-venv&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Fedora:&lt;/strong&gt; Run &lt;code&gt;sudo dnf install python3 python3-pip python3-devel&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Arch:&lt;/strong&gt; Run &lt;code&gt;sudo pacman -S --needed python python-pip&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Gentoo:&lt;/strong&gt; Run &lt;code&gt;sudo emerge dev-python/pip&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./mach bootstrap&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download and run &lt;a href=&#34;https://win.rustup.rs/&#34;&gt;&lt;code&gt;rustup-init.exe&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Make sure to select &lt;em&gt;Quick install via the Visual Studio Community installer&lt;/em&gt; or otherwise install Visual Studio 2022.&lt;/li&gt; &#xA; &lt;li&gt;In the &lt;em&gt;Visual Studio Installer&lt;/em&gt; ensure the following components are installed for Visual Studio 2022: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Windows 10 SDK (10.0.19041.0)&lt;/strong&gt; (&lt;code&gt;Microsoft.VisualStudio.Component.Windows10SDK.19041&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;MSVC v143 - VS 2022 C++ x64/x86 build tools (Latest)&lt;/strong&gt; (&lt;code&gt;Microsoft.VisualStudio.Component.VC.Tools.x86.x64&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;C++ ATL for latest v143 build tools (x86 &amp;amp; x64)&lt;/strong&gt; (&lt;code&gt;Microsoft.VisualStudio.Component.VC.ATL&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;C++ MFC for latest v143 build tools (x86 &amp;amp; x64)&lt;/strong&gt; (&lt;code&gt;Microsoft.VisualStudio.Component.VC.ATLMFC&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://chocolatey.org/&#34;&gt;chocolatey&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://www.python.org/downloads/windows/&#34;&gt;Python 3.11&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;mach bootstrap&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;This will install CMake, Git, and Ninja via choco in an Administrator console. Allow the scripts to run and once the operation finishes, close the new console.&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;refreshenv&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://github.com/servo/servo/wiki/Building#troubleshooting-the-windows-build&#34;&gt;Windows Troubleshooting Tips&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ensure that the following environment variables are set: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;ANDROID_SDK_ROOT&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ANDROID_NDK_ROOT&lt;/code&gt;: &lt;code&gt;$ANDROID_SDK_ROOT/ndk/25.2.9519653/&lt;/code&gt; &lt;code&gt;ANDROID_SDK_ROOT&lt;/code&gt; can be any directory (such as &lt;code&gt;~/android-sdk&lt;/code&gt;). All of the Android build dependencies will be installed there.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install the latest version of the &lt;a href=&#34;https://developer.android.com/studio#command-tools&#34;&gt;Android command-line tools&lt;/a&gt; to &lt;code&gt;$ANDROID_SDK_ROOT/cmdline-tools/latest&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run the following command to install the necessary components: &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --install&#xA; &#34;build-tools;33.0.2&#34; \&#xA; &#34;emulator&#34; \&#xA; &#34;ndk;25.2.9519653&#34; \&#xA; &#34;platform-tools&#34; \&#xA; &#34;platforms;android-33&#34; \&#xA; &#34;system-images;android-33;google_apis;x86_64&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For information about building and running the Android build, see the &lt;a href=&#34;https://github.com/servo/servo/wiki/Building-for-Android&#34;&gt;Android documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;Servo is built with &lt;a href=&#34;https://crates.io/&#34;&gt;Cargo&lt;/a&gt;, the Rust package manager. We also use Mozilla&#39;s Mach tools to orchestrate the build and other tasks. You can call Mach like this:&lt;/p&gt; &#xA;&lt;p&gt;On Unix systems:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./mach [command] [arguments]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows Commandline:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mach.bat [command] [arguments]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The examples below will use Unix, but the same applies to Windows.&lt;/p&gt; &#xA;&lt;h3&gt;The Rust compiler&lt;/h3&gt; &#xA;&lt;p&gt;Servo&#39;s build system uses rustup.rs to automatically download a Rust compiler. This is a specific version of Rust Nightly determined by the &lt;a href=&#34;https://github.com/servo/servo/raw/main/rust-toolchain.toml&#34;&gt;&lt;code&gt;rust-toolchain.toml&lt;/code&gt;&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h3&gt;Normal build&lt;/h3&gt; &#xA;&lt;p&gt;To build Servo in development mode. This is useful for development, but the resulting binary is very slow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./mach build --dev&#xA;./mach run tests/html/about-mozilla.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Release build&lt;/h3&gt; &#xA;&lt;p&gt;For benchmarking, performance testing, or real-world use. Add the &lt;code&gt;--release&lt;/code&gt; flag to create an optimized build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./mach build --release&#xA;./mach run --release tests/html/about-mozilla.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Android build&lt;/h3&gt; &#xA;&lt;p&gt;For an armv7 Android build run the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./mach build --android&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Checking for build errors, without building&lt;/h3&gt; &#xA;&lt;p&gt;If you’re making changes to one crate that cause build errors in another crate, consider this instead of a full build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./mach check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will run &lt;code&gt;cargo check&lt;/code&gt;, which runs the analysis phase of the compiler (and so shows build errors if any) but skips the code generation phase. This can be a lot faster than a full build, though of course it doesn’t produce a binary you can run.&lt;/p&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;p&gt;Run Servo with the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./servo [url] [arguments] # if you run with nightly build&#xA;./mach run [url] [arguments] # if you run with mach&#xA;&#xA;# For example&#xA;./mach run https://www.google.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Commandline Arguments&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-p INTERVAL&lt;/code&gt; turns on the profiler and dumps info to the console every &lt;code&gt;INTERVAL&lt;/code&gt; seconds&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-s SIZE&lt;/code&gt; sets the tile size for painting; defaults to 512&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-z&lt;/code&gt; disables all graphical output; useful for running JS / layout tests&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Z help&lt;/code&gt; displays useful output to debug servo&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Keyboard Shortcuts&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;L&lt;/code&gt; opens URL prompt (&lt;code&gt;Cmd&lt;/code&gt;+&lt;code&gt;L&lt;/code&gt; on Mac)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;R&lt;/code&gt; reloads current page (&lt;code&gt;Cmd&lt;/code&gt;+&lt;code&gt;R&lt;/code&gt; on Mac)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;-&lt;/code&gt; zooms out (&lt;code&gt;Cmd&lt;/code&gt;+&lt;code&gt;-&lt;/code&gt; on Mac)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;=&lt;/code&gt; zooms in (&lt;code&gt;Cmd&lt;/code&gt;+&lt;code&gt;=&lt;/code&gt; on Mac)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Alt&lt;/code&gt;+&lt;code&gt;left arrow&lt;/code&gt; goes backwards in the history (&lt;code&gt;Cmd&lt;/code&gt;+&lt;code&gt;left arrow&lt;/code&gt; on Mac)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Alt&lt;/code&gt;+&lt;code&gt;right arrow&lt;/code&gt; goes forwards in the history (&lt;code&gt;Cmd&lt;/code&gt;+&lt;code&gt;right arrow&lt;/code&gt; on Mac)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;Q&lt;/code&gt; exits Servo (&lt;code&gt;Cmd&lt;/code&gt;+&lt;code&gt;Q&lt;/code&gt; on Mac)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Esc&lt;/code&gt; exits fullscreen&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Runtime dependencies&lt;/h3&gt; &#xA;&lt;h4&gt;Linux&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;GStreamer&lt;/code&gt; &amp;gt;=1.18&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gst-plugins-base&lt;/code&gt; &amp;gt;=1.18&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gst-plugins-good&lt;/code&gt; &amp;gt;=1.18&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gst-plugins-bad&lt;/code&gt; &amp;gt;=1.18&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gst-plugins-ugly&lt;/code&gt; &amp;gt;=1.18&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libXcursor&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libXrandr&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libXi&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libxkbcommon&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vulkan-loader&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Developing&lt;/h2&gt; &#xA;&lt;p&gt;There are lots of mach commands you can use. You can list them with &lt;code&gt;./mach --help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The generated documentation can be found on &lt;a href=&#34;https://doc.servo.org/servo/index.html&#34;&gt;https://doc.servo.org/servo/index.html&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>