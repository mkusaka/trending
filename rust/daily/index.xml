<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-29T01:38:24Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>calyxir/calyx</title>
    <updated>2024-02-29T01:38:24Z</updated>
    <id>tag:github.com,2024-02-29:/calyxir/calyx</id>
    <link href="https://github.com/calyxir/calyx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Intermediate Language (IL) for Hardware Accelerator Generators&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://depot.dev/?utm_source=capra&#34;&gt;&lt;img src=&#34;https://depot.dev/badges/built-with-depot.svg?sanitize=true&#34; alt=&#34;Built with Depot&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://calyxir.org/img/logo-text-magic.svg?sanitize=true&#34; width=&#34;300&#34;&gt; &lt;/p&gt; &lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://calyxir.org&#34;&gt;A Compiler Infrastructure for Accelerator Generators&lt;/a&gt; &lt;/p&gt; &lt;/h1&gt; &#xA;&lt;p&gt;Calyx is an intermediate language and infrastructure for building compilers that generate custom hardware accelerators.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://calyxir.org&#34;&gt;Calyx website&lt;/a&gt;, &lt;a href=&#34;https://docs.calyxir.org&#34;&gt;language documentation&lt;/a&gt; and the &lt;a href=&#34;https://docs.rs/releases/search?query=calyx&#34;&gt;documentation for the source code&lt;/a&gt; for more information. Calyx&#39;s design is based on &lt;a href=&#34;https://rachitnigam.com/files/pubs/calyx.pdf&#34;&gt;our paper&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Quick&lt;/h3&gt; &#xA;&lt;p&gt;If you want to try out the compiler, install it using &lt;code&gt;cargo&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install calyx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will install the &lt;code&gt;calyx&lt;/code&gt; binary can optimize and compile Calyx programs to Verilog or &lt;a href=&#34;https://docs.calyxir.org/running-calyx/fud/circt.html&#34;&gt;CIRCT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Recommended&lt;/h3&gt; &#xA;&lt;p&gt;Follow the &lt;a href=&#34;https://docs.calyxir.org&#34;&gt;getting started&lt;/a&gt; instructions.&lt;/p&gt; &#xA;&lt;h2&gt;Organization&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains the source code for the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/calyx-utils&#34;&gt;&lt;code&gt;calyx-utils&lt;/code&gt;&lt;/a&gt;: Utilities for the Calyx compiler&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/calyx-frontend&#34;&gt;&lt;code&gt;calyx-frontend&lt;/code&gt;&lt;/a&gt;: Parser and frontend AST for the Calyx language.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/calyx-ir&#34;&gt;&lt;code&gt;calyx-ir&lt;/code&gt;&lt;/a&gt;: The Calyx intermediate language.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/calyx-opt&#34;&gt;&lt;code&gt;calyx-opt&lt;/code&gt;&lt;/a&gt;: Optimizations for the Calyx intermediate language.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/calyx&#34;&gt;&lt;code&gt;calyx&lt;/code&gt;&lt;/a&gt;: The Calyx compiler driver.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also use the Calyx compiler as a library and implement your own optimizations. To do this, &lt;a href=&#34;https://docs.rs/calyx-opt/0.2.1/calyx_opt/&#34;&gt;check out the example&lt;/a&gt; provided by the &lt;a href=&#34;https://crates.io/crates/calyx-opt&#34;&gt;&lt;code&gt;calyx-opt&lt;/code&gt;&lt;/a&gt; crate.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rcore-os/arceos</title>
    <updated>2024-02-29T01:38:24Z</updated>
    <id>tag:github.com,2024-02-29:/rcore-os/arceos</id>
    <link href="https://github.com/rcore-os/arceos" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An experimental modular OS written in Rust.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ArceOS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rcore-os/arceos/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/rcore-os/arceos/actions/workflows/build.yml/badge.svg?branch=main&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rcore-os/arceos/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/rcore-os/arceos/actions/workflows/test.yml/badge.svg?branch=main&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://rcore-os.github.io/arceos/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-pages-green&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An experimental modular operating system (or unikernel) written in Rust.&lt;/p&gt; &#xA;&lt;p&gt;ArceOS was inspired a lot by &lt;a href=&#34;https://github.com/unikraft/unikraft&#34;&gt;Unikraft&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;ðŸš§ Working In Progress.&lt;/p&gt; &#xA;&lt;h2&gt;Features &amp;amp; TODOs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Architecture: x86_64, riscv64, aarch64&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Platform: QEMU pc-q35 (x86_64), virt (riscv64/aarch64)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Multi-thread&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; FIFO/RR/CFS scheduler&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; VirtIO net/blk/gpu drivers&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; TCP/UDP net stack using &lt;a href=&#34;https://github.com/smoltcp-rs/smoltcp&#34;&gt;smoltcp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Synchronization/Mutex&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; SMP scheduling with single run queue&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; File system&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Compatible with Linux apps&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Interrupt driven device I/O&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Async I/O&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example apps&lt;/h2&gt; &#xA;&lt;p&gt;Example applications can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/rcore-os/arceos/main/apps/&#34;&gt;apps/&lt;/a&gt; directory. All applications must at least depend on the following modules, while other modules are optional:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcore-os/arceos/main/modules/axruntime/&#34;&gt;axruntime&lt;/a&gt;: Bootstrapping from the bare-metal environment, and initialization.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcore-os/arceos/main/modules/axhal/&#34;&gt;axhal&lt;/a&gt;: Hardware abstraction layer, provides unified APIs for cross-platform.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcore-os/arceos/main/modules/axconfig/&#34;&gt;axconfig&lt;/a&gt;: Platform constants and kernel parameters, such as physical memory base, kernel load addresses, stack size, etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcore-os/arceos/main/modules/axlog/&#34;&gt;axlog&lt;/a&gt;: Multi-level formatted logging.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The currently supported applications (Rust), as well as their dependent modules and features, are shown in the following table:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;App&lt;/th&gt; &#xA;   &lt;th&gt;Extra modules&lt;/th&gt; &#xA;   &lt;th&gt;Enabled features&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcore-os/arceos/main/apps/helloworld/&#34;&gt;helloworld&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A minimal app that just prints a string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcore-os/arceos/main/apps/exception/&#34;&gt;exception&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;paging&lt;/td&gt; &#xA;   &lt;td&gt;Exception handling test&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcore-os/arceos/main/apps/memtest/&#34;&gt;memtest&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;axalloc&lt;/td&gt; &#xA;   &lt;td&gt;alloc, paging&lt;/td&gt; &#xA;   &lt;td&gt;Dynamic memory allocation test&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcore-os/arceos/main/apps/display/&#34;&gt;display&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;axalloc, axdisplay&lt;/td&gt; &#xA;   &lt;td&gt;alloc, paging, display&lt;/td&gt; &#xA;   &lt;td&gt;Graphic/GUI test&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcore-os/arceos/main/apps/task/yield/&#34;&gt;yield&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;axalloc, axtask&lt;/td&gt; &#xA;   &lt;td&gt;alloc, paging, multitask, sched_fifo&lt;/td&gt; &#xA;   &lt;td&gt;Multi-threaded yielding test&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcore-os/arceos/main/apps/task/parallel/&#34;&gt;parallel&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;axalloc, axtask&lt;/td&gt; &#xA;   &lt;td&gt;alloc, paging, multitask, sched_fifo&lt;/td&gt; &#xA;   &lt;td&gt;Parallel computing test (to test synchronization &amp;amp; mutex)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcore-os/arceos/main/apps/task/sleep/&#34;&gt;sleep&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;axalloc, axtask&lt;/td&gt; &#xA;   &lt;td&gt;alloc, paging, multitask, sched_fifo&lt;/td&gt; &#xA;   &lt;td&gt;Thread sleeping test&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcore-os/arceos/main/apps/fs/shell/&#34;&gt;shell&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;axalloc, axdriver, axfs&lt;/td&gt; &#xA;   &lt;td&gt;alloc, paging, fs&lt;/td&gt; &#xA;   &lt;td&gt;A simple shell that responds to filesystem operations&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcore-os/arceos/main/apps/net/httpclient/&#34;&gt;httpclient&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;axalloc, axdriver, axnet&lt;/td&gt; &#xA;   &lt;td&gt;alloc, paging, net&lt;/td&gt; &#xA;   &lt;td&gt;A simple client that sends an HTTP request and then prints the response&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcore-os/arceos/main/apps/net/echoserver/&#34;&gt;echoserver&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;axalloc, axdriver, axnet, axtask&lt;/td&gt; &#xA;   &lt;td&gt;alloc, paging, net, multitask&lt;/td&gt; &#xA;   &lt;td&gt;A multi-threaded TCP server that reverses messages sent by the client&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcore-os/arceos/main/apps/net/httpserver/&#34;&gt;httpserver&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;axalloc, axdriver, axnet, axtask&lt;/td&gt; &#xA;   &lt;td&gt;alloc, paging, net, multitask&lt;/td&gt; &#xA;   &lt;td&gt;A multi-threaded HTTP server that serves a static web page&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Build &amp;amp; Run&lt;/h2&gt; &#xA;&lt;h3&gt;Install build dependencies&lt;/h3&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://github.com/rust-embedded/cargo-binutils&#34;&gt;cargo-binutils&lt;/a&gt; to use &lt;code&gt;rust-objcopy&lt;/code&gt; and &lt;code&gt;rust-objdump&lt;/code&gt; tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo install cargo-binutils&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;for build&amp;amp;run C apps&lt;/h4&gt; &#xA;&lt;p&gt;Install &lt;code&gt;libclang-dev&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install libclang-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Download&amp;amp;Install &lt;code&gt;cross-musl-based toolchains&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# download&#xA;wget https://musl.cc/aarch64-linux-musl-cross.tgz&#xA;wget https://musl.cc/riscv64-linux-musl-cross.tgz&#xA;wget https://musl.cc/x86_64-linux-musl-cross.tgz&#xA;# install&#xA;tar zxf aarch64-linux-musl-cross.tgz&#xA;tar zxf riscv64-linux-musl-cross.tgz&#xA;tar zxf x86_64-linux-musl-cross.tgz&#xA;# exec below command in bash OR add below info in ~/.bashrc&#xA;export PATH=`pwd`/x86_64-linux-musl-cross/bin:`pwd`/aarch64-linux-musl-cross/bin:`pwd`/riscv64-linux-musl-cross/bin:$PATH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dependencies for running apps&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# for Debian/Ubuntu&#xA;sudo apt-get install qemu-system&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# for macos&#xA;brew install qemu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;other systems and arch please refer to &lt;a href=&#34;https://www.qemu.org/download/#linux&#34;&gt;Qemu Download&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Example apps&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# build app in arceos directory&#xA;make A=path/to/app ARCH=&amp;lt;arch&amp;gt; LOG=&amp;lt;log&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where &lt;code&gt;&amp;lt;arch&amp;gt;&lt;/code&gt; should be one of &lt;code&gt;riscv64&lt;/code&gt;, &lt;code&gt;aarch64&lt;/code&gt;ï¼Œ&lt;code&gt;x86_64&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;lt;log&amp;gt;&lt;/code&gt; should be one of &lt;code&gt;off&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;, &lt;code&gt;warn&lt;/code&gt;, &lt;code&gt;info&lt;/code&gt;, &lt;code&gt;debug&lt;/code&gt;, &lt;code&gt;trace&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;path/to/app&lt;/code&gt; is the relative path to the example application.&lt;/p&gt; &#xA;&lt;p&gt;More arguments and targets can be found in &lt;a href=&#34;https://raw.githubusercontent.com/rcore-os/arceos/main/Makefile&#34;&gt;Makefile&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, to run the &lt;a href=&#34;https://raw.githubusercontent.com/rcore-os/arceos/main/apps/net/httpserver/&#34;&gt;httpserver&lt;/a&gt; on &lt;code&gt;qemu-system-aarch64&lt;/code&gt; with 4 cores:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make A=apps/net/httpserver ARCH=aarch64 LOG=info SMP=4 run NET=y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;NET=y&lt;/code&gt; argument is required to enable the network device in QEMU. These arguments (&lt;code&gt;BLK&lt;/code&gt;, &lt;code&gt;GRAPHIC&lt;/code&gt;, etc.) only take effect at runtime not build time.&lt;/p&gt; &#xA;&lt;h3&gt;Your custom apps&lt;/h3&gt; &#xA;&lt;h4&gt;Rust&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a new rust package with &lt;code&gt;no_std&lt;/code&gt; and &lt;code&gt;no_main&lt;/code&gt; environment.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add &lt;code&gt;axstd&lt;/code&gt; dependency and features to enable to &lt;code&gt;Cargo.toml&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[dependencies]&#xA;axstd = { path = &#34;/path/to/arceos/ulib/axstd&#34;, features = [&#34;...&#34;] }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Call library functions from &lt;code&gt;axstd&lt;/code&gt; in your code, just like the Rust &lt;a href=&#34;https://doc.rust-lang.org/std/&#34;&gt;std&lt;/a&gt; library.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build your application with ArceOS, by running the &lt;code&gt;make&lt;/code&gt; command in the application directory:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# in app directory&#xA;make -C /path/to/arceos A=$(pwd) ARCH=&amp;lt;arch&amp;gt; run&#xA;# more args: LOG=&amp;lt;log&amp;gt; SMP=&amp;lt;smp&amp;gt; NET=[y|n] ...&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;All arguments and targets are the same as above.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;C&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create &lt;code&gt;axbuild.mk&lt;/code&gt; and &lt;code&gt;features.txt&lt;/code&gt; in your project:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;app/&#xA;â”œâ”€â”€ foo.c&#xA;â”œâ”€â”€ bar.c&#xA;â”œâ”€â”€ axbuild.mk      # optional, if there is only one `main.c`&#xA;â””â”€â”€ features.txt    # optional, if only use default features&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add build targets to &lt;code&gt;axbuild.mk&lt;/code&gt;, add features to enable to &lt;code&gt;features.txt&lt;/code&gt; (see this &lt;a href=&#34;https://raw.githubusercontent.com/rcore-os/arceos/main/apps/c/sqlite3/&#34;&gt;example&lt;/a&gt;):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# in axbuild.mk&#xA;app-objs := foo.o bar.o&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# in features.txt&#xA;alloc&#xA;paging&#xA;net&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build your application with ArceOS, by running the &lt;code&gt;make&lt;/code&gt; command in the application directory:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# in app directory&#xA;make -C /path/to/arceos A=$(pwd) ARCH=&amp;lt;arch&amp;gt; run&#xA;# more args: LOG=&amp;lt;log&amp;gt; SMP=&amp;lt;smp&amp;gt; NET=[y|n] ...&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;How to build ArceOS for specific platforms and devices&lt;/h3&gt; &#xA;&lt;p&gt;Set the &lt;code&gt;PLATFORM&lt;/code&gt; variable when run &lt;code&gt;make&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Build helloworld for raspi4&#xA;make PLATFORM=aarch64-raspi4 A=apps/helloworld&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may also need to select the corrsponding device drivers by setting the &lt;code&gt;FEATURES&lt;/code&gt; variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Build the shell app for raspi4, and use the SD card driver&#xA;make PLATFORM=aarch64-raspi4 A=apps/fs/shell FEATURES=driver-bcm2835-sdhci&#xA;# Build Redis for the bare-metal x86_64 platform, and use the ixgbe and ramdisk driver&#xA;make PLATFORM=x86_64-pc-oslab A=apps/c/redis FEATURES=driver-ixgbe,driver-ramdisk SMP=4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Design&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rcore-os/arceos/main/doc/figures/ArceOS.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Netflix/bpftop</title>
    <updated>2024-02-29T01:38:24Z</updated>
    <id>tag:github.com,2024-02-29:/Netflix/bpftop</id>
    <link href="https://github.com/Netflix/bpftop" rel="alternate"></link>
    <summary type="html">&lt;p&gt;bpftop provides a dynamic real-time view of running eBPF programs. It displays the average runtime, events per second, and estimated total CPU % for each program.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;bpftop&lt;/h1&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/Netflix/bpftop/main/bpftop-logo.png&#34; width=&#34;75&#34; height=&#34;75&#34;&gt; &#xA;&lt;p&gt;&lt;code&gt;bpftop&lt;/code&gt; provides a dynamic real-time view of running eBPF programs. It displays the average runtime, events per second, and estimated total CPU % for each program. It also provides graphical views of these statistics over time. This tool minimizes overhead by enabling performance statistics only while it is active.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Netflix/bpftop/main/bpftop.gif&#34; alt=&#34;bpftop&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To download the latest release of &lt;code&gt;bpftop&lt;/code&gt;, use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -fLJ https://github.com/Netflix/bpftop/releases/latest/download/bpftop -o bpftop &amp;amp;&amp;amp; chmod +x bpftop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Displays a list of all running eBPF programs on the host, including the ID, type, and name&lt;/li&gt; &#xA; &lt;li&gt;Shows the period and total average runtime for each eBPF program.&lt;/li&gt; &#xA; &lt;li&gt;Calculates the events per second and estimated CPU utilization for each eBPF program&lt;/li&gt; &#xA; &lt;li&gt;Provides a graphical view of the average runtime, events per second, and estimated CPU utilization over a 10-second time period&lt;/li&gt; &#xA; &lt;li&gt;Dynamically updates the list every second&lt;/li&gt; &#xA; &lt;li&gt;Enables the statistics-gathering function only while it is active&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;bpftop&lt;/code&gt; requires &lt;code&gt;sudo&lt;/code&gt; privileges to run.&lt;/li&gt; &#xA; &lt;li&gt;The Linux kernel version must be 5.8 or later.&lt;/li&gt; &#xA; &lt;li&gt;The binary is dynamically linked to &lt;code&gt;libz&lt;/code&gt; and &lt;code&gt;libelf&lt;/code&gt;, so these libraries must be present on the systems where you intend to run &lt;code&gt;bpftop&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Run the following command to start &lt;code&gt;bpftop&lt;/code&gt; on your host:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo ./bpftop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;bpftop&lt;/code&gt; uses the &lt;a href=&#34;https://elixir.bootlin.com/linux/v6.6.16/source/include/uapi/linux/bpf.h#L792&#34;&gt;BPF_ENABLE_STATS&lt;/a&gt; BPF syscall command to enable global eBPF runtime statistics gathering, which is disabled by default to reduce performance overhead. It collects these statistics every second, calculating the average runtime, events per second, and estimated CPU utilization for each eBPF program within that sample period. This information is displayed in a top-like tabular format. Once &lt;code&gt;bpftop&lt;/code&gt; terminates, it disables the statistics-gathering function by deleting the file descriptor returned by &lt;code&gt;BPF_ENABLE_STATS&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building from source&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install and setup &lt;a href=&#34;https://github.com/cross-rs/cross&#34;&gt;cross&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;cross build --release&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>