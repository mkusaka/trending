<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-23T01:40:48Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>chainflip-io/chainflip-backend</title>
    <updated>2023-11-23T01:40:48Z</updated>
    <id>tag:github.com,2023-11-23:/chainflip-io/chainflip-backend</id>
    <link href="https://github.com/chainflip-io/chainflip-backend" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Chainflip backend repo, including the Chainflip Node and CFE.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://codecov.io/gh/chainflip-io/chainflip-backend&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/chainflip-io/chainflip-backend/branch/main/graph/badge.svg?token=20X24B8IXC&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Chainflip&lt;/h1&gt; &#xA;&lt;p&gt;This repo contains everything you need to run a validator node on the Chainflip network.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;The project is organised using rust workspaces. See the &lt;code&gt;Cargo.toml&lt;/code&gt; in this directory for a list of contained workspaces. Each workspace should have its own &lt;code&gt;README&lt;/code&gt; with instructions on how to get started. If not, please raise an issue!&lt;/p&gt; &#xA;&lt;h2&gt;Compile and run tests&lt;/h2&gt; &#xA;&lt;p&gt;To compile the code execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the test suite execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo cf-test-ci&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE:&lt;/em&gt;&lt;/strong&gt; ci-test-ci is an alias for cargo test with additional flags.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;h3&gt;Code style&lt;/h3&gt; &#xA;&lt;p&gt;The best way to ensure that your code is easy to merge, is to copy the project&#39;s pre-commit hook into your local &lt;code&gt;.git/&lt;/code&gt; directory. You can do this with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp .git-hooks/pre-commit .git/hooks/&#xA;chmod +x .git/hooks/pre-commit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since much of the project is reliant on parity substrate, please take inspiration from parity&#39;s &lt;a href=&#34;https://github.com/paritytech/substrate/raw/master/docs/STYLE_GUIDE.md&#34;&gt;Substrate code style&lt;/a&gt; where possible. Please see this as a guideline rather than rigidly enforced rules. We will define and enforce formatting rules with &lt;code&gt;rustfmt&lt;/code&gt; in due course. It should be straightforward to integrate this with your favourite editor for auto-formatting.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;TODO: research and set up .rustfmt and/or .editorconfig settings, and enforce with CI. We may need to have separate settings files for each sub-project since substrate code has some funky settings by default and we may want to stick to a more common setup for our non-substrate components.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Branching and merging&lt;/h3&gt; &#xA;&lt;p&gt;Before making any changes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;create a new branch always.&lt;/li&gt; &#xA; &lt;li&gt;give it a descriptive name: &lt;code&gt;feature/my-awesome-feature&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When your changes are ready, or you just want some feedback:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;open a PR.&lt;/li&gt; &#xA; &lt;li&gt;once the PR is open, avoid force-push, use &lt;code&gt;git merge&lt;/code&gt; instead of &lt;code&gt;git rebase&lt;/code&gt; to merge any upstream changes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Useful commands&lt;/h3&gt; &#xA;&lt;p&gt;The following commands should be executed from the repo root directory.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check formatting:&lt;br&gt; &lt;code&gt;cargo fmt --check&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Format code:&lt;br&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;cargo fmt -- &amp;lt;filename&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cargo fmt --all&lt;/code&gt; (format all packages)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Check the state-chain and cfe compile: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;cargo cf-clippy&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cargo cf-clippy-ci&lt;/code&gt; (This is used by the CI, but you don&#39;t typically need it)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run all unit tests:&lt;br&gt; &lt;code&gt;cargo cf-test&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Expand macros for a given part of the code. You&#39;ll need to pipe output to a file.&lt;br&gt; Requires &lt;em&gt;cargo-expand&lt;/em&gt; (&lt;code&gt;cargo install cargo-expand&lt;/code&gt;):&lt;br&gt; &lt;code&gt;cargo expand &amp;lt;options&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clean up old build objects (sometimes this will fix compile problems): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;cargo clean&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cargo clean -p &amp;lt;package&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Audit external dependencies (The CI runs this &lt;a href=&#34;https://github.com/chainflip-io/chainflip-backend/issues/1175&#34;&gt;https://github.com/chainflip-io/chainflip-backend/issues/1175&lt;/a&gt;):&lt;br&gt; &lt;code&gt;cargo audit&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Localnet&lt;/h2&gt; &#xA;&lt;p&gt;You can run a local single-node testnet (Localnet), in Docker. This will allow you to quickly iterate on a particular commit.&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisits&lt;/h3&gt; &#xA;&lt;p&gt;You will need to download &lt;a href=&#34;https://docs.docker.com/get-docker/&#34;&gt;Docker&lt;/a&gt;, docker-compose and the &lt;a href=&#34;https://developer.1password.com/docs/cli/get-started/&#34;&gt;1Password CLI 2&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Login to 1Password&lt;/h4&gt; &#xA;&lt;p&gt;The simplest way to login is to go via the &lt;a href=&#34;https://developer.1password.com/docs/cli/get-started#step-1-connect-1password-cli-with-the-1password-app&#34;&gt;1Password app&lt;/a&gt; . Make sure you have v8 of 1Password installed.&lt;/p&gt; &#xA;&lt;p&gt;Verify you can connect to 1Password with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;op vault ls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Login to Docker&lt;/h4&gt; &#xA;&lt;p&gt;The script will ask you to log in to our Docker container registry. You will need to create a &lt;a href=&#34;https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token#creating-a-personal-access-token-classic&#34;&gt;Classic PAT&lt;/a&gt; for this.&lt;/p&gt; &#xA;&lt;p&gt;You only need to enable the &lt;code&gt;packages:read&lt;/code&gt; permission.&lt;/p&gt; &#xA;&lt;h3&gt;Creating a Localnet&lt;/h3&gt; &#xA;&lt;p&gt;Localnets use binaries built locally. To create a Localnet for your current branch, you will first need to build. You can use either release or debug builds.&lt;/p&gt; &#xA;&lt;p&gt;From the repo root, run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cargo cf-build # or cargo cf-build-release&#xA;./localnet/manage.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If this is your first Localnet, the script will ask you to authenticate to Docker and 1Password. The script might fail if you haven&#39;t done this yet.&lt;/p&gt; &#xA;&lt;p&gt;After set up completion, you will see the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;‚ùì Would you like to build, recreate or destroy your Localnet? (Type 1, 2, 3, 4 or 5)&#xA;1) build-localnet&#xA;2) recreate&#xA;3) destroy&#xA;4) logs&#xA;5) yeet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; All chaindata and signing DBs will be under&lt;code&gt;/tmp/chainflip&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;build&lt;/strong&gt; - Create a new testnet using a path to the binaries you provide.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;recreate&lt;/strong&gt; - This will simply run destroy, followed by build. You have the option to change the path to the binaries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;destroy&lt;/strong&gt; - Destroy your current Localnet and deletes chaindata.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;logs&lt;/strong&gt; - Tail the logs for your current Localnet.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;yeet&lt;/strong&gt; - Destroy your current Localnet, and remove all data including docker images. You should use this if you are getting some weird caching issues.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Log Filtering&lt;/h3&gt; &#xA;&lt;p&gt;These commands can be used to control which logs the engine outputs at runtime.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;curl -X GET 127.0.0.1:36079/tracing&lt;/code&gt; (Returns the current filtering directives)&lt;/li&gt; &#xA; &lt;li&gt;`curl --json &#39;&#34;debug,warp=off,hyper=off,jsonrpc=off,web3=off,reqwest=off&#34;&#39; (Sets the filter directives so the default is DEBUG, and the logging in modules warp, hyper, jsonrpc, web3, and reqwest is turned off)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;curl -X POST -H &#39;Content-Type: application/json&#39; -d &#39;&#34;debug,warp=off,hyper=off,jsonrpc=off,web3=off,reqwest=off&#34;&#39; 127.0.0.1:36079/tracing&lt;/code&gt; (Equivalent to the above, but without using the --sjon short-hand)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable controls the initial filtering directives if specified at engine startup. &lt;a href=&#34;https://raw.githubusercontent.com/chainflip-io/chainflip-backend/main/localnet%2Fmanage.sh&#34;&gt;manage.sh&lt;/a&gt; The syntax for specifying filtering directives is given here: &lt;a href=&#34;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html&#34;&gt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Testnet&lt;/h2&gt; &#xA;&lt;p&gt;To start a multi node testnet you can use the &lt;a href=&#34;https://github.com/chainflip-io/chainflip-testnet-tools&#34;&gt;chainflip-testnet-tools&lt;/a&gt;. A multi-node testnet can be useful to test more complex test scenarios under more realistic conditions.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bitswired/rustgpt</title>
    <updated>2023-11-23T01:40:48Z</updated>
    <id>tag:github.com,2023-11-23:/bitswired/rustgpt</id>
    <link href="https://github.com/bitswired/rustgpt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;RustGPT is a ChatGPT UI built with Rust + HTMX: the power of Rust coupled with the simplicity of HTMX üíö&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RustGPT ü¶Ä‚ú®&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/bitswired/rustgpt/assets/19983429/980a88b9-93df-48c7-a438-b232d2830e00&#34;&gt;https://github.com/bitswired/rustgpt/assets/19983429/980a88b9-93df-48c7-a438-b232d2830e00&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Welcome to the RustGPT repository! Here, you&#39;ll find a web ChatGPT clone entirely crafted using Rust and HTMX, where technology meets simplicity and performance. üöÄ&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rustgpt.bitswired.com&#34;&gt;Try the RustGPT hosted demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.bitswired.com/en/blog/post/rustgpt-journey-rust-htmx-web-dev&#34;&gt;Read the blog article&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;RustGPT is my latest experiment in cloning the abilities of OpenAI&#39;s ChatGPT. It represents the fourth iteration in a series of clones, each built with different tech stacks to evaluate their functionality in creating a ChatGPT-like application.&lt;/p&gt; &#xA;&lt;p&gt;In this repository, you will find a Rust-based server leveraging the Axum framework combined with HTMX, providing a Rusty web development experience. From database operations to streaming responses, this project covers a broad spectrum of backend functionalities and real-time web interactions.&lt;/p&gt; &#xA;&lt;p&gt;So, for Rust enthusiasts and web developers alike, dive in to explore a world where web development is redefined with the power of Rust!&lt;/p&gt; &#xA;&lt;h2&gt;Features üåü&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Rust with Axum Framework&lt;/strong&gt;: A fast and reliable server that&#39;s all about performance and simplicity.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SQLite&lt;/strong&gt;: A lightweight yet powerful database for all your data persistence needs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Server Sent Events (SSE)&lt;/strong&gt;: Real-time streaming made easy to bring life to the ChatGPT interactions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;HTMX&lt;/strong&gt;: No hefty JavaScript frameworks needed‚ÄîHTMX keeps interactions snappy with simple HTML attributes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tech Stack üõ†Ô∏è&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/launchbadge/sqlx&#34;&gt;&lt;code&gt;sqlx&lt;/code&gt;&lt;/a&gt;: Direct and type-safe SQL queries and migrations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Keats/tera&#34;&gt;&lt;code&gt;tera&lt;/code&gt;&lt;/a&gt;: A templating engine inspired by Jinja2, for rendering the HTML views.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tokio-rs/axum&#34;&gt;&lt;code&gt;axum&lt;/code&gt;&lt;/a&gt;: A web application framework that&#39;s easy to use and incredibly fast.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For those eyeing some client-side WASM magic, you might also want to check out &lt;a href=&#34;https://github.com/yewstack/yew&#34;&gt;Yew&lt;/a&gt; or &lt;a href=&#34;https://github.com/LeptosProject/leptos&#34;&gt;Leptos&lt;/a&gt; for more complex applications.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart üèÅ&lt;/h2&gt; &#xA;&lt;p&gt;Jump right into it by following these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository.&lt;/li&gt; &#xA; &lt;li&gt;Create a .env&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;MIGRATIONS_PATH=db/migrations&#xA;TEMPLATES_PATH=templates&#xA;DATABASE_URL=sqlite:db/db.db&#xA;DATABASE_PATH=db/db.db&#xA;OPENAI_API_KEY=&amp;lt;api-key&amp;gt; (only necessary for tests, users will add their own keys)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Install TailwindCSS Standalone in this repository: &lt;a href=&#34;https://tailwindcss.com/blog/standalone-cli&#34;&gt;https://tailwindcss.com/blog/standalone-cli&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cargo install just&lt;/code&gt;: install Just&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;just init&lt;/code&gt;: install additional tools and migrate the db&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;just dev&lt;/code&gt;: concurrently run tailwind and cargo run in watch mode&lt;/li&gt; &#xA; &lt;li&gt;Open your browser and enjoy chatting with your Rust-powered ChatGPT clone (port 3000 by default)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributing ü§ù&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are what make the open-source community an incredible place to learn, inspire, and create. Any contributions you make are &lt;strong&gt;greatly appreciated&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have a suggestion that would make RustGPT better, please fork the repo and create a pull request. You can also simply open an issue. Don&#39;t forget to give the project a star! Thank you again!&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments üéì&lt;/h2&gt; &#xA;&lt;p&gt;Hats off to the wonderful crates and libraries that made RustGPT possible!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Created with üíö by a Rustacean who believes in the power of Rust for the web! Follow the journey on &lt;a href=&#34;https://www.bitswired.com&#34;&gt;Bitswired&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>curlpipe/ox</title>
    <updated>2023-11-23T01:40:48Z</updated>
    <id>tag:github.com,2023-11-23:/curlpipe/ox</id>
    <link href="https://github.com/curlpipe/ox" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An independent Rust text editor that runs in your terminal!&lt;/p&gt;&lt;hr&gt;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/curlpipe/ox/&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/curlpipe/ox/master/assets/logo.png&#34; alt=&#34;Logo&#34; width=&#34;150&#34; height=&#34;150&#34;&gt; &lt;/a&gt; &lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34; style=&#34;font-size: 50px;&#34;&gt;Ox editor&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34; style=&#34;font-size: 20px;&#34;&gt; Ox is a code editor that runs in your terminal. &lt;br&gt;&lt;br&gt; &lt;/p&gt;&#xA;&lt;div align=&#34;center&#34; style=&#34;display:inline;&#34;&gt; &#xA; &lt;img src=&#34;https://i.postimg.cc/nrs9jksB/image.png&#34; width=&#34;49%&#34;&gt; &#xA; &lt;img src=&#34;https://i.postimg.cc/KcQ0nv1Y/image.png&#34; width=&#34;49%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/curlpipe/ox&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/curlpipe/ox.svg?style=for-the-badge&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/curlpipe/ox&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/curlpipe/ox.svg?style=for-the-badge&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/curlpipe/ox&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/curlpipe/ox.svg?style=for-the-badge&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About The Project&lt;/h2&gt; &#xA;&lt;p&gt;Ox is a code editor. It was written in Rust using ANSI escape sequences. It assists developers with programming by providing several tools to speed up and make programming easier and a refreshing alternative to heavily bloated and resource hungry editors such as VS Code and JetBrains. Ox is lightweight so it can be used on older computers.&lt;/p&gt; &#xA;&lt;p&gt;Bear in mind, this is a personal project and is nowhere near ready to replace your existing tools just yet.&lt;/p&gt; &#xA;&lt;p&gt;It runs in the terminal and runs on platforms like Linux and macOS but doesn&#39;t work on Windows directly (it works if you use WSL) due to a lack of a good command line. There are many text editors out there and each one of them has their flaws and I hope to have a text editor that overcomes many of the burdens and issues.&lt;/p&gt; &#xA;&lt;p&gt;Ox is not based on any other editor and has been built from the ground up without any base at all.&lt;/p&gt; &#xA;&lt;h2&gt;What features does Ox have and why should I use it?&lt;/h2&gt; &#xA;&lt;p&gt;Ox aims to be an editor that takes features from some of the most popular editors out there, gaining the best of all worlds.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Vim&lt;/strong&gt; &lt;a href=&#34;http://vim.org&#34;&gt;http://vim.org&lt;/a&gt;: Vim provides a plugin system for adding features to it as it is very minimal and only provides basic text editing functionality by default. It is quite extensive and has its own programming language for configuring and writing plugins for it. It has a steep learning curve due to being a ‚Äúmodal‚Äù text editor, having special modes for editing text. Ox is easier to use than Vim because it doesn‚Äôt have modes where the keyboard is repurposed, however it takes the idea of being a keyboard-only editor and being able to act just like an IDE after some configuration.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Nano&lt;/strong&gt; &lt;a href=&#34;https://www.nano-editor.org/&#34;&gt;https://www.nano-editor.org/&lt;/a&gt;: Nano is an editor that is very simple to grasp due to its intuitive key bindings such as &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;S&lt;/kbd&gt; to save and &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;?&lt;/kbd&gt; for the help menu etc. Ox took the idea for the key bindings from this editor, they are simple to remember, &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;F&lt;/kbd&gt; for ‚ÄúFind‚Äù, &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Q&lt;/kbd&gt; for ‚ÄúQuit‚Äù, meaning that Ox doesn‚Äôt have as steep a learning curve.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Micro&lt;/strong&gt; &lt;a href=&#34;https://micro-editor.github.io/&#34;&gt;https://micro-editor.github.io/&lt;/a&gt;: Micro has a plugin system that is programmed with a language called Lua however I can‚Äôt seem to find any up to date plugins for it and it lacks features such as a file tree. It is micro that inspired me to add mouse functionality and other features.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Emacs&lt;/strong&gt; &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;https://www.gnu.org/software/emacs/&lt;/a&gt;: Emacs is still actively used today due to its freedom to modify and change the source code. Ox took the idea for the customization and extensibility of Emacs and made a configuration system where you can change the colours and appearance of the editor.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Xi&lt;/strong&gt; &lt;a href=&#34;https://xi-editor.io/&#34;&gt;https://xi-editor.io/&lt;/a&gt;: Xi is also written in Rust but is purely a backend at the moment, I decided to make Ox both a frontend and a backend because Xi has many frontends, but most of them are broken and it lacks a lot of features.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Kiro&lt;/strong&gt; &lt;a href=&#34;https://github.com/rhysd/kiro-editor&#34;&gt;https://github.com/rhysd/kiro-editor&lt;/a&gt;: Kiro is an amazing text editor written in Rust and adds features such as Unicode support, a nicer colour scheme and small things like resizing and it is a very inspiring editor. Ox took the ideas for the improvements from Kiro, however implemented them differently. Kiro‚Äôs source code also seems to be quite advanced in some areas, so I decided to keep Ox as simple as I could.&lt;/p&gt; &#xA;&lt;h3&gt;Built With&lt;/h3&gt; &#xA;&lt;p&gt;Ox is super minimal and aims to use as few dependencies as possible, allowing for rapid compile time and low risk of breakage.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rust-lang.org&#34;&gt;Rust language&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/crossterm-rs/crossterm&#34;&gt;Crossterm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://unicode-rs.github.io/&#34;&gt;Unicode-rs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://clap.rs/&#34;&gt;Clap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/regex/1.3.9/regex/&#34;&gt;Regex&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/ron/0.6.2/ron/&#34;&gt;Ron&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/serde/1.0.116/serde/&#34;&gt;Serde&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/netvl/shellexpand&#34;&gt;Shellexpand&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- GETTING STARTED --&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;You can currently only build Ox from source. While this may sound daunting to many people, it really isn&#39;t that hard and takes 1 minute worst case scenario!&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;Because Ox is written in Rust, you must have a modern and working version of &lt;code&gt;rustc&lt;/code&gt; and &lt;code&gt;cargo&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On Arch Linux, you can run this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo pacman -S rustup&#xA;rustup toolchain install stable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are not using Arch, you can easily set it up on other distros by running the distro-neutral command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh&#xA;/usr/bin/rustup toolchain install stable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You must have &lt;code&gt;curl&lt;/code&gt; installed in order to run this command.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;h4&gt;Icons&lt;/h4&gt; &#xA;&lt;p&gt;Ox uses NerdFonts to display icons. You can install nerdfonts from &lt;a href=&#34;https://nerdfonts.com&#34;&gt;https://nerdfonts.com&lt;/a&gt; If you use Arch Linux, you can install it by installing the package &lt;code&gt;ttf-nerd-fonts-symbols-mono&lt;/code&gt;. There is a potential that you will need to add it to your terminal emulator.&lt;/p&gt; &#xA;&lt;h4&gt;Manual&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo install --git https://github.com/curlpipe/ox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Arch Linux&lt;/h4&gt; &#xA;&lt;p&gt;Install &lt;code&gt;ox-bin&lt;/code&gt; or &lt;code&gt;ox-git&lt;/code&gt; from the Arch User Repository.&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s all there is to it!&lt;/p&gt; &#xA;&lt;h4&gt;Fedora/CentOS&lt;/h4&gt; &#xA;&lt;p&gt;Install &lt;code&gt;ox&lt;/code&gt; from the &lt;a href=&#34;https://copr.fedorainfracloud.org/coprs/atim/ox/&#34;&gt;COPR Repository&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo dnf copr enable atim/ox -y&#xA;sudo dnf install ox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Homebrew&lt;/h4&gt; &#xA;&lt;p&gt;Install &lt;code&gt;ox&lt;/code&gt; from Homebrew core tap.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install ox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;MacPorts&lt;/h4&gt; &#xA;&lt;p&gt;On macOS, you can install &lt;code&gt;ox&lt;/code&gt; via &lt;a href=&#34;https://www.macports.org&#34;&gt;MacPorts&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo port selfupdate&#xA;sudo port install ox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- USAGE EXAMPLES --&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h4&gt;Opening files in Ox&lt;/h4&gt; &#xA;&lt;p&gt;At the moment, you can open ox by using the command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will open up an empty document.&lt;/p&gt; &#xA;&lt;p&gt;If you wish to open a file straight from the command line, you can run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ox /path/to/file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To open and edit a file.&lt;/p&gt; &#xA;&lt;p&gt;You can also open a file from within Ox by using the &lt;kbd&gt;Ctrl + O&lt;/kbd&gt; Key binding&lt;/p&gt; &#xA;&lt;p&gt;If at any time, you wish to create a new file, you can use &lt;kbd&gt;Ctrl + N&lt;/kbd&gt; to do so.&lt;/p&gt; &#xA;&lt;p&gt;You can find more command line options for Ox by typing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ox --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Moving the cursor around&lt;/h4&gt; &#xA;&lt;p&gt;You can use the arrow keys to move the cursor around&lt;/p&gt; &#xA;&lt;p&gt;You can also use:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;kbd&gt;PageUp&lt;/kbd&gt; - Go to the top of the document&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;PageDown&lt;/kbd&gt; - Go to the bottom of the document&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;Home&lt;/kbd&gt; - Go to the start of the current line&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;End&lt;/kbd&gt; - Go to the end of the current line&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Editing the file&lt;/h4&gt; &#xA;&lt;p&gt;You can use the keys &lt;kbd&gt;Backspace&lt;/kbd&gt; and &lt;kbd&gt;Return&lt;/kbd&gt; / &lt;kbd&gt;Enter&lt;/kbd&gt; as well as all the characters on your keyboard to edit files!&lt;/p&gt; &#xA;&lt;p&gt;Ox is controlled via your keyboard shortcuts. Here are the default shortcuts that you can use:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Keybinding&lt;/th&gt; &#xA;   &lt;th&gt;What it does&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Ctrl + Q&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Exits the current tab or the editor if only one tab open.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Ctrl + S&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Saves the open file to the disk.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Alt + S&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Prompts you for a file name and saves it to disk as that file name.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Ctrl + W&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Saves all the currently open files to the disk.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Ctrl + N&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Creates a new tab with a blank document.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Ctrl + O&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Prompts you for a file and opens that file in a new tab.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Ctrl + F&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Searches the document for a search query. Allows pressing of &lt;kbd&gt;‚Üë&lt;/kbd&gt; and &lt;kbd&gt;‚Üê&lt;/kbd&gt; to move the cursor to the previous occurance fof the query and &lt;kbd&gt;‚Üì&lt;/kbd&gt; and &lt;kbd&gt;‚Üí&lt;/kbd&gt; to move to the next occurance of the query. Press &lt;kbd&gt;Return&lt;/kbd&gt; to cancel the search at the current cursor position or &lt;kbd&gt;Esc&lt;/kbd&gt; to cancel the search and return to the initial location of the cursor. Note: this allows you to use regular expressions.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Ctrl + Z&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Undoes your last action. The changes are committed to the undo stack every time you press the space bar, create / destroy a new line and when there is no activity after a certain period of time which can be used to capture points where you pause for thought or grab a coffee etc...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Ctrl + Y&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Redoes your last action. The changes are committed to the undo stack every time you press the space bar, create / destroy a new line and when there is no activity after a certain period of time which can be used to capture points where you pause for thought or grab a coffee etc...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Ctrl + R&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Allows replacing of occurances in the document. Uses the same keybindings as the search feature: &lt;kbd&gt;‚Üë&lt;/kbd&gt; and &lt;kbd&gt;‚Üê&lt;/kbd&gt; to move the cursor to the previous occurance fof the query and &lt;kbd&gt;‚Üì&lt;/kbd&gt; and &lt;kbd&gt;‚Üí&lt;/kbd&gt; to move to the next occurance of the query. You can also press &lt;kbd&gt;Return&lt;/kbd&gt;, &lt;kbd&gt;y&lt;/kbd&gt; or &lt;kbd&gt;Space&lt;/kbd&gt; to carry out the replace action. To exit replace mode once you&#39;re finished, you can press &lt;kbd&gt;Esc&lt;/kbd&gt; to cancel and return back to your initial cursor position. Note: this allows you to use regular expressions.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Ctrl + A&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Carries out a batch replace option. It will prompt you for a target to replace and what you want to replace it with and will then replace every occurance in the document. Note: this allows you to use regular expressions.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Ctrl + Left&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Navigates to the previous tab.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Ctrl + Right&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Navigates to the next tab.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Alt + A&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Focuses the command line.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Configuring Ox&lt;/h4&gt; &#xA;&lt;p&gt;Ox features a configuration system that allows modification and personalization of the editor.&lt;/p&gt; &#xA;&lt;p&gt;By default, Ox will look for a file here: &lt;code&gt;$XDG_CONFIG_HOME/ox/ox.ron&lt;/code&gt; or &lt;code&gt;~/.config/ox/ox.ron&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Ox&#39;s configuration language is &lt;a href=&#34;https://github.com/ron-rs/ron&#34;&gt;RON&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There is a default config in the &#39;config&#39; folder. You will have to either download it and place it in the default config directory or create your own using the example ones as a reference. If you don&#39;t have a config file, don&#39;t worry :), Ox will just ignore it if you don&#39;t have one.&lt;/p&gt; &#xA;&lt;p&gt;If you wish to specify the configuration file path, you can do so using the &#39;--config&#39; option (or &#39;-c&#39; if you prefer). For Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ox --config /path/to/my_config.ron file_to_edit.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;You can see the &lt;code&gt;tasks.todo.md&lt;/code&gt; file to see my full plans for the future of the editor!&lt;/p&gt; &#xA;&lt;p&gt;Here is the current summary&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Initial Research (0.1.0, 0.1.1) [741 lines]&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Basic editing functions (0.2.0)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Line numbers (0.2.0)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Searching (0.2.0) [1040 lines]&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Undo and Redo (0.2.1) [1282 lines]&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Input bug (0.2.2) [1278 lines]&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Good command line interface (0.2.3)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Config files (0.2.3)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Replacing text (0.2.3) [1549 lines]&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Syntax highlighting (0.2.4) [1894 lines]&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Tabs for multitasking (0.2.5) [2050 lines]&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Macros (0.2.6) [3414 lines]&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Tweaks (0.2.7) [3241 lines]&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Mouse support (0.2.8)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Auto indentation (0.3.0)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Prettifier / Automatic code formatter (0.3.0)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Built In linter (0.3.0)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Auto brackets (0.3.1)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Auto complete (0.3.2)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; File tree (0.3.4)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Start page (0.3.5)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Distributed under the GNU GPLv2 License. See &lt;code&gt;LICENSE&lt;/code&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;You can contact me on Discord at &lt;code&gt;curlpipe#1496&lt;/code&gt;. I&#39;ll be happy to answer any questions you may have!&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/curlpipe&#34;&gt;Curlpipe (Luke), for actually building Ox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/spikecodes&#34;&gt;Spike, for the logo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The community, for the ideas and suggestions&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>