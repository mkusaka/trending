<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-07T01:38:32Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>infinyon/fluvio</title>
    <updated>2023-10-07T01:38:32Z</updated>
    <id>tag:github.com,2023-10-07:/infinyon/fluvio</id>
    <link href="https://github.com/infinyon/fluvio" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Kafka + Flink in Rust + WASM. Cloud Native, Edge Ready, Stateful, Composable unified data streaming platform powered by Rust and Web Assembly.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Fluvio&lt;/h1&gt; &#xA; &lt;a href=&#34;https://fluvio.io&#34; target=&#34;_blank&#34;&gt; &lt;strong&gt;The programmable data streaming platform&lt;/strong&gt; &lt;/a&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/infinyon/fluvio/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/infinyon/fluvio/workflows/CI/badge.svg?branch=staging&#34; alt=&#34;CI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/infinyon/fluvio/actions/workflows/cd_dev.yaml&#34;&gt;&lt;img src=&#34;https://github.com/infinyon/fluvio/workflows/CD_Dev/badge.svg?sanitize=true&#34; alt=&#34;CD Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/fluvio&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/fluvio?style=flat&#34; alt=&#34;fluvio Crates.io version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/fluvio&#34;&gt;&lt;img src=&#34;https://docs.rs/fluvio/badge.svg?sanitize=true&#34; alt=&#34;Fluvio Rust documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://deps.rs/repo/github/infinyon/fluvio&#34;&gt;&lt;img src=&#34;https://deps.rs/repo/github/infinyon/fluvio/status.svg?sanitize=true&#34; alt=&#34;Fluvio dependency status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discordapp.com/invite/bBG2dTz&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/695712741381636168.svg?logo=discord&amp;amp;style=flat&#34; alt=&#34;Fluvio Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://fluvio.io&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/infinyon/fluvio/master/.github/assets/fluvio-overview.svg?sanitize=true&#34; alt=&#34;A visual of a data pipeline with filter, map, and other streaming operations&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Fluvio is a high-performance distributed data streaming platform that&#39;s written in Rust, built to make it easy to run real-time applications.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.fluvio.io/download/&#34;&gt;Download&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/fluvio&#34;&gt;Rust API docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://infinyon.github.io/fluvio-client-node/&#34;&gt;Node API docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.fluvio.io/cli/&#34;&gt;Fluvio CLI docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.fluvio.io/docs/architecture/overview/&#34;&gt;Fluvio Architecture&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like to contribute to the project, please read our &lt;a href=&#34;https://raw.githubusercontent.com/infinyon/fluvio/master/CONTRIBUTING.md&#34;&gt;Contributing guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/infinyon/fluvio/master/LICENSE&#34;&gt;Apache license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>KiwiTalk/KiwiTalk</title>
    <updated>2023-10-07T01:38:32Z</updated>
    <id>tag:github.com,2023-10-07:/KiwiTalk/KiwiTalk</id>
    <link href="https://github.com/KiwiTalk/KiwiTalk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An UNOFFICIAL cross-platform KakaoTalk client written in TypeScript &amp; Rust (SolidJS, tauri)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;em&gt;KiwiTalk&lt;/em&gt; &lt;a href=&#34;https://www.codefactor.io/repository/github/kiwitalk/kiwitalk&#34;&gt;&lt;img src=&#34;https://www.codefactor.io/repository/github/kiwitalk/kiwitalk/badge?s=c3981bac3a87fe9d0f0c5fdb854efd203b389649&#34; alt=&#34;CodeFactor&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://deepscan.io/dashboard#view=project&amp;amp;tid=13288&amp;amp;pid=16289&amp;amp;bid=346077&#34;&gt;&lt;img src=&#34;https://deepscan.io/api/teams/13288/projects/16289/branches/346077/badge/grade.svg?sanitize=true&#34; alt=&#34;DeepScan grade&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/vVs8WVY3y6&#34;&gt; &lt;img src=&#34;https://discord.com/api/guilds/1024212069349855232/widget.png&#34; alt=&#34;discord-shield&#34;&gt; &lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KiwiTalk/KiwiTalk/dev/img/banner.gif&#34; alt=&#34;banner&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;카카오톡 재구현 프로젝트 (SolidJS &amp;amp; Tauri &amp;amp; Rust)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;주의사항&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;KiwiTalk은 카카오톡이 제공되지 않는 기기 및 OS (예: Ubuntu, Arch Linux)를 위해 연구 목적으로 만들어졌습니다.&#xA;이 소스코드는 Kakao Corp.이 만들거나 인가하지 않았으며, 언제든지 이용이 제한될 수 있습니다.&#xA;즉, KiwiTalk을 통해 이루어지는 모든 활동에 대한 모든 책임은 전적으로 사용자에게 있습니다.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;개발&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/KiwiTalk/KiwiTalk/dev/img/big-picture.svg&#34;&gt;프로젝트 간략 구조도&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;프로젝트 기여를 생각하고 계시다면 &lt;a href=&#34;https://raw.githubusercontent.com/KiwiTalk/KiwiTalk/dev/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;를 우선 읽어 주세요.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/vVs8WVY3y6&#34;&gt;Discord&lt;/a&gt;: 공식 디스코드 서버&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.figma.com/file/JYO6jyz0Kji2KiPCW5cH5o/KiwiTalk-UI-Mockup-2?node-id=0%3A1&#34;&gt;KiwiTalk UI Mockup&lt;/a&gt;: 프론트엔드 디자인 목업&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;프로젝트 구조에 대한 더 자세한 문서는 &lt;a href=&#34;https://raw.githubusercontent.com/KiwiTalk/KiwiTalk/dev/ARCHITECTURE.md&#34;&gt;ARCHITECTURE.md&lt;/a&gt;에서 확인 하실 수 있습니다.&lt;/p&gt; &#xA;&lt;h2&gt;실행 (개발 환경)&lt;/h2&gt; &#xA;&lt;h3&gt;사전 요구 사항&lt;/h3&gt; &#xA;&lt;p&gt;개발 환경에서 프로젝트를 실행하기 위해 다음 요구 사항을 충족시켜야 합니다.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;본 프로젝트가 Tauri를 사용하기 때문에 &lt;a href=&#34;https://tauri.app/ko/v1/guides/getting-started/prerequisites/&#34;&gt;Tauri 개발을 위한 사전 요구 사항&lt;/a&gt;을 충족시켜야 합니다. 해당 글에서 지시하는 대로, Tauri 개발 환경을 구축시켜주시기 바랍니다.&lt;/li&gt; &#xA; &lt;li&gt;이 프로젝트는 프론트엔드 패키지 관리에 pnpm을 사용하고 있습니다. &lt;a href=&#34;https://pnpm.io/installation&#34;&gt;설치 안내서&lt;/a&gt;를 따라, pnpm 설치를 완료시켜주시기 바랍니다.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;의존성 설치&lt;/h3&gt; &#xA;&lt;p&gt;아래 명령어를 실행해 npm 의존성을 설치합니다.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pnpm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;KiwiTalk 실행&lt;/h3&gt; &#xA;&lt;p&gt;아래 명령어를 실행해 KiwiTalk을 실행합니다. GUI 창을 띄워야 하므로, 적절한 GUI 설정이 존재하는지 확인하시기 바랍니다. 예를 들어, Linux용 Windows 하위시스템(WSL)을 사용하시는 경우, &lt;a href=&#34;https://learn.microsoft.com/ko-kr/windows/wsl/tutorials/gui-apps&#34;&gt;Microsoft 공식 문서&lt;/a&gt;를 참조해 설정하시기 바랍니다.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pnpm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Storybook 실행&lt;/h3&gt; &#xA;&lt;p&gt;본 프로젝트는 디자인 시스템 구축을 위해 Storybook을 사용하고 있습니다. Storybook을 실행하려면 아래 명령어를 실행하시기 바랍니다.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pnpm run storybook&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>sebosp/s2protocol-rs</title>
    <updated>2023-10-07T01:38:32Z</updated>
    <id>tag:github.com,2023-10-07:/sebosp/s2protocol-rs</id>
    <link href="https://github.com/sebosp/s2protocol-rs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Starcraft 2 Protocol Replay Reader&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://crates.io/crates/s2protocol&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/s2protocol.svg?sanitize=true&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sebosp/s2protocol-rs/actions?query=workflow%3A%22Rust%22&#34;&gt;&lt;img src=&#34;https://github.com/sebosp/s2protocol-rs/workflows/Rust/badge.svg?sanitize=true&#34; alt=&#34;Workflow Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;s2protocol-rs&lt;/h1&gt; &#xA;&lt;p&gt;A nom parser for the Starcraft 2 Protocol Replay format. Provides Iterators to transist a minimal state machine through the game loops Keeping track of unit groups, upgrades, targets, etc.&lt;/p&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;The goal is to learn how to parse binary files format with &lt;code&gt;nom&lt;/code&gt; and to learn how the Starcraft 2 Replay file is so incredibly small for the amount of information it packs.&lt;/p&gt; &#xA;&lt;p&gt;From the available data, analytics, visualizations and generative art can be created, for example by using&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rerun-io/rerun&#34;&gt;rerun&lt;/a&gt; : See the repo &lt;a href=&#34;https://github.com/sebosp/swarmy&#34;&gt;swarmy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nical/lyon&#34;&gt;lyon&lt;/a&gt; (PoC in progress in cooper)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yewstack/yew&#34;&gt;yew&lt;/a&gt; &lt;a href=&#34;https://github.com/sebosp/cooper&#34;&gt;cooper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emilk/egui&#34;&gt;eframe/egui&lt;/a&gt;: See repo &lt;a href=&#34;https://github.com/sebosp/eframe-sc2&#34;&gt;eframes-c2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bevyengine/bevy&#34;&gt;bevyengine/bevy&lt;/a&gt; can be used to see: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;An Enhanced Replay Minimap&lt;/li&gt; &#xA;   &lt;li&gt;Additional statistics.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Consuming events&lt;/h2&gt; &#xA;&lt;h3&gt;Transition Iterators&lt;/h3&gt; &#xA;&lt;p&gt;These are different ways to consume the events:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;SC2EventIterator&lt;/code&gt; collects both TrackerEvents and GameEvents. Events are provided as they appear, be them Tracker or Game&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TrackerEventIterator&lt;/code&gt; allows consuming only Tracker Events&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GameEventIterator&lt;/code&gt; allows consuming only the Game Events&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Event changes transist a minimal state machine that updates:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;names&lt;/li&gt; &#xA; &lt;li&gt;positions&lt;/li&gt; &#xA; &lt;li&gt;Attack events&lt;/li&gt; &#xA; &lt;li&gt;etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The iterators returns a tuple &lt;code&gt;(SC2EventType, UnitChangeHint)&lt;/code&gt; The first item contains the event itself as it was deserialized from the SC2Replay. The second item hints the consumers of the iterator about the changes performed to the state machine due to this event. For example, units may have been deleted, added, changed position, etc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;let source: PathBuf = PathBuf::new();&#xA;let res = s2protocol::state::SC2EventIterator::new(&amp;amp;source)?;&#xA;for (event, change_hint) in res.into_iter() {&#xA;    println!(&#34;{},&#34;, serde_json::to_string(&amp;amp;event)?);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Interacting with polars&lt;/h2&gt; &#xA;&lt;h3&gt;Generating the IPC Arrow datasets&lt;/h3&gt; &#xA;&lt;p&gt;In the directory ipcs/ one .ipc file will be created per implemented data type. The &lt;code&gt;--source&lt;/code&gt; is the directory that contains the replay directory (Or a single file). Files are processed using parallel operations. For 3600 files (500 MBs) it takes 30 seconds to transform/split them. YMMV&lt;/p&gt; &#xA;&lt;p&gt;This is behind a feature flag &lt;code&gt;arrow&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir ipcs/&#xA;$ cargo run --features arrow -r -- --source &#34;/mnt/windows/Users/sebos/Documents/StarCraft II/Accounts/51504154/2-S2-1-8459957/Replays/Multiplayer/&#34; --output ipcs/ write-arrow-ipc all&#xA;2023-10-04T18:53:36.030202Z  INFO s2protocol::arrow: Processing Arrow write request&#xA;2023-10-04T18:53:36.441089Z  INFO s2protocol::arrow: Found 3600 files&#xA;2023-10-04T18:53:36.441646Z  INFO s2protocol::arrow: Processing InitData IPC write request&#xA;2023-10-04T18:53:38.515349Z  INFO s2protocol::arrow: Loaded 3600 records&#xA;2023-10-04T18:53:38.575090Z  INFO s2protocol::arrow: Processing Details IPC write request&#xA;2023-10-04T18:53:38.700572Z  INFO s2protocol::arrow: Loaded 3600 records&#xA;2023-10-04T18:53:38.706659Z  INFO s2protocol::arrow: Processing TrackerEvents IPC write request: Stats&#xA;2023-10-04T18:53:44.295524Z  INFO s2protocol::arrow: Loaded 1722783 records&#xA;2023-10-04T18:53:44.515362Z  INFO s2protocol::arrow: Processing TrackerEvents IPC write request: Upgrades&#xA;2023-10-04T18:53:49.963043Z  INFO s2protocol::arrow: Loaded 292898 records&#xA;2023-10-04T18:53:50.036165Z  INFO s2protocol::arrow: Processing TrackerEvents IPC write request: UnitBorn&#xA;2023-10-04T18:53:57.561082Z  INFO s2protocol::arrow: Loaded 22754591 records&#xA;2023-10-04T18:54:00.502298Z  INFO s2protocol::arrow: Processing TrackerEvents IPC write request: UnitDied&#xA;2023-10-04T18:54:07.387545Z  INFO s2protocol::arrow: Loaded 16118808 records&#xA;Total time: 33.654286961s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Jupyter Notebooks&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ virtualenv new venv&#xA;$ source ./venv/bin/activate&#xA;$ pip install -r requirements.txt&#xA;$ jupyter lab&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then open your browser and locate the Notebbooks, for example:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sebosp/s2protocol-rs/main/jupyter_notebooks/Basic-UnitBorn-Queries.ipynb&#34;&gt;Basic UnitBorn Queries&lt;/a&gt; &lt;img src=&#34;https://github.com/sebosp/s2protocol-rs/assets/873436/2307780a-bc62-4cd4-9daf-a3e622bdb5b7&#34; alt=&#34;All units born&#34;&gt; &lt;img src=&#34;https://github.com/sebosp/s2protocol-rs/assets/873436/cba9da20-a034-47f3-9016-bfd6db21247b&#34; alt=&#34;Most effective units across all games&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;polars-cli&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo install polars-cli&#xA;$ # List the max number of minerals that were lost in per map when the army was killed.&#xA;❯ echo &#34;SELECT ext_fs_replay_file_name, MAX(minerals_lost_army) FROM read_ipc(&#39;/home/seb/git/s2protocol-rs/ipcs/stats.ipc&#39;) GROUP BY ext_fs_replay_file_name ORDER BY minerals_lost_army DESC;&#34;|polars&#xA;┌───────────────────────────────────┬────────────────────┐&#xA;│ ext_fs_replay_file_name           ┆ minerals_lost_army │&#xA;│ ---                               ┆ ---                │&#xA;│ str                               ┆ i32                │&#xA;╞═══════════════════════════════════╪════════════════════╡&#xA;│ Heavy Artillery LE (349).SC2Repl… ┆ 71362              │&#xA;│ Arctic Dream LE (398).SC2Replay   ┆ 59375              │&#xA;│ Nightscape LE (52).SC2Replay      ┆ 54846              │&#xA;│ …                                 ┆ …                  │&#xA;│ Emerald City LE (223).SC2Replay   ┆ 43450              │&#xA;│ Rhoskallian LE (101).SC2Replay    ┆ 41614              │&#xA;│ Fields of Death (345).SC2Replay   ┆ 41529              │&#xA;│ Rhoskallian LE (346).SC2Replay    ┆ 41425              │&#xA;└───────────────────────────────────┴────────────────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Replay Tracker, Game Events and Chat Message Events for protocol75689&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Replay Tracker, Game Events and Chat Message Events for protocol84643&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Replay Tracker, Game Events and Chat Message Events for protocol87702&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Replay Tracker, Game Events and Chat Message Events for protocol88500&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Replay Tracker, Game Events and Chat Message Events for protocol89634&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Replay Tracker, Game Events and Chat Message Events for protocol89720&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Replay Tracker, Game Events and Chat Message Events for protocol90136&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Replay Tracker, Game Events and Chat Message Events for protocol90779&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Replay Tracker, Game Events and Chat Message Events for protocol90870&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Parsing unit movement is done.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Decoding the tag/recycle done to match Game Events.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Game Events are parsed (tho some that seem irrelevant are skipped).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Read the version and from the version call the correct module so that we can support multiple modules.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support for MPQ embedded file: &lt;code&gt;replay.initData&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add the remaining Tracker/Game event types.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support for MPQ embedded file: &lt;code&gt;replay.gamemetadata.json&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support for MPQ embedded file: &lt;code&gt;replay.attributes.events&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Current issues&lt;/h2&gt; &#xA;&lt;p&gt;In the arrow file generation, sha256 digest is used to detect duplication/etc. This inflates the size of the rows. Even tho it&#39;s slightly less than long directory names. Perhaps using short rev-parse for sha256 may be better, find something like 7-characters unique combinations And use that instead of the long sha256 form.&lt;/p&gt; &#xA;&lt;h2&gt;version compatibility.&lt;/h2&gt; &#xA;&lt;p&gt;After a bit of testing, it seems most of the types are compatible between versions, so only when they differ would they make part of the protocol version. Since I started this exercise on protocol87702, all types would be relative to it. That is, most modules would re-use protocol87702 as much as possible. This explains why old-er versions such as 75689 would still reference 87702 as much as possible.&lt;/p&gt; &#xA;&lt;p&gt;The generator above thus would show example code &lt;code&gt;S2ProtoResult&lt;/code&gt; created in favour of unwrapping/panic&#39;ing.&lt;/p&gt; &#xA;&lt;h2&gt;Generating protocol-specific code:&lt;/h2&gt; &#xA;&lt;p&gt;The rust code for the protocols versions available were generated using: This would now be compared with ./src/versions/protocol99999.template file and from there we can analyze what has changed. Notably, the number of bits used for the Chat Message is still miscalculated to 3 so it needs to be dismissed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir src/versions/protocol89720/&#xA;RUST_LOG_SPAN_EVENTS=full RUST_LOG=debug cargo watch -i src/versions/protocol89720/mod.rs -x &#39;run -- --source ../s2protocol/json/protocol89720.json generate --output src/versions/protocol89720/mod.rs&#39;&#xA;# Add the new module to src/versions/mod.rs&#xA;# Run rust format on the new src/versions/protocol87702/mod.rs file&#xA;# cargo check, cargo build, etc&#xA;# Additionally some code to transform from Protocol-Specific to Protocol-Agnostic was added, TODO: Add to generator.rs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;JSON Sources&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Blizzard/s2protocol&#34;&gt;Blizzard/s2protocol repo&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>