<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-19T01:47:06Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bytecodealliance/rustix</title>
    <updated>2024-01-19T01:47:06Z</updated>
    <id>tag:github.com,2024-01-19:/bytecodealliance/rustix</id>
    <link href="https://github.com/bytecodealliance/rustix" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Safe Rust bindings to POSIX-ish APIs&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;&lt;code&gt;rustix&lt;/code&gt;&lt;/h1&gt; &#xA; &lt;p&gt; &lt;strong&gt;Safe Rust bindings to POSIX/Unix/Linux/Winsock syscalls&lt;/strong&gt; &lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;A &lt;a href=&#34;https://bytecodealliance.org/&#34;&gt;Bytecode Alliance&lt;/a&gt; project&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt; &lt;a href=&#34;https://github.com/bytecodealliance/rustix/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/bytecodealliance/rustix/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Github Actions CI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bytecodealliance.zulipchat.com/#narrow/stream/206238-general&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/zulip-join_chat-brightgreen.svg?sanitize=true&#34; alt=&#34;zulip chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/rustix&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/rustix.svg?sanitize=true&#34; alt=&#34;crates.io page&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/rustix&#34;&gt;&lt;img src=&#34;https://docs.rs/rustix/badge.svg?sanitize=true&#34; alt=&#34;docs.rs docs&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;code&gt;rustix&lt;/code&gt; provides efficient memory-safe and &lt;a href=&#34;https://github.com/rust-lang/rfcs/raw/master/text/3128-io-safety.md&#34;&gt;I/O-safe&lt;/a&gt; wrappers to POSIX-like, Unix-like, Linux, and Winsock syscall-like APIs, with configurable backends. It uses Rust references, slices, and return values instead of raw pointers, and &lt;a href=&#34;https://doc.rust-lang.org/stable/std/os/fd/index.html#structs&#34;&gt;I/O safety types&lt;/a&gt; instead of raw file descriptors, providing memory safety, &lt;a href=&#34;https://github.com/rust-lang/rfcs/raw/master/text/3128-io-safety.md&#34;&gt;I/O safety&lt;/a&gt;, and &lt;a href=&#34;https://github.com/rust-lang/rust/issues/95228&#34;&gt;provenance&lt;/a&gt;. It uses &lt;code&gt;Result&lt;/code&gt;s for reporting errors, &lt;a href=&#34;https://crates.io/crates/bitflags&#34;&gt;&lt;code&gt;bitflags&lt;/code&gt;&lt;/a&gt; instead of bare integer flags, an &lt;a href=&#34;https://docs.rs/rustix/*/rustix/path/trait.Arg.html&#34;&gt;&lt;code&gt;Arg&lt;/code&gt;&lt;/a&gt; trait with optimizations to efficiently accept any Rust string type, and several other efficient conveniences.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rustix&lt;/code&gt; is low-level and, and while the &lt;code&gt;net&lt;/code&gt; API supports &lt;a href=&#34;https://learn.microsoft.com/en-us/windows/win32/winsock/windows-sockets-start-page-2&#34;&gt;Windows Sockets 2&lt;/a&gt; (Winsock), the rest of the APIs do not support Windows; for higher-level and more portable APIs built on this functionality, see the &lt;a href=&#34;https://crates.io/crates/cap-std&#34;&gt;&lt;code&gt;cap-std&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://crates.io/crates/memfd&#34;&gt;&lt;code&gt;memfd&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://crates.io/crates/timerfd&#34;&gt;&lt;code&gt;timerfd&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://crates.io/crates/io-streams&#34;&gt;&lt;code&gt;io-streams&lt;/code&gt;&lt;/a&gt; crates, for example.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rustix&lt;/code&gt; currently has two backends available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;linux_raw, which uses raw Linux system calls and vDSO calls, and is supported on Linux on x86-64, x86, aarch64, riscv64gc, powerpc64le, arm (v5 onwards), mipsel, and mips64el, with stable, nightly, and 1.63 Rust.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;By being implemented entirely in Rust, avoiding &lt;code&gt;libc&lt;/code&gt;, &lt;code&gt;errno&lt;/code&gt;, and pthread cancellation, and employing some specialized optimizations, most functions compile down to very efficient code, which can often be fully inlined into user code.&lt;/li&gt; &#xA;   &lt;li&gt;Most functions in &lt;code&gt;linux_raw&lt;/code&gt; preserve memory, I/O safety, and pointer provenance all the way down to the syscalls.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;libc, which uses the &lt;a href=&#34;https://crates.io/crates/libc&#34;&gt;&lt;code&gt;libc&lt;/code&gt;&lt;/a&gt; crate which provides bindings to native &lt;code&gt;libc&lt;/code&gt; libraries on Unix-family platforms, and &lt;a href=&#34;https://crates.io/crates/windows-sys&#34;&gt;&lt;code&gt;windows-sys&lt;/code&gt;&lt;/a&gt; for Winsock on Windows, and is portable to many OS&#39;s.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The linux_raw backend is enabled by default on platforms which support it. To enable the libc backend instead, either enable the &#34;use-libc&#34; cargo feature, or set the &lt;code&gt;RUSTFLAGS&lt;/code&gt; environment variable to &lt;code&gt;--cfg=rustix_use_libc&lt;/code&gt; when building.&lt;/p&gt; &#xA;&lt;h2&gt;Cargo features&lt;/h2&gt; &#xA;&lt;p&gt;The modules &lt;a href=&#34;https://docs.rs/rustix/*/rustix/io/index.html&#34;&gt;&lt;code&gt;rustix::io&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://docs.rs/rustix/*/rustix/fd/index.html&#34;&gt;&lt;code&gt;rustix::fd&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://docs.rs/rustix/*/rustix/ffi/index.html&#34;&gt;&lt;code&gt;rustix::ffi&lt;/code&gt;&lt;/a&gt; are enabled by default. The rest of the API is conditional with cargo feature flags:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;event&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.rs/rustix/*/rustix/event/index.html&#34;&gt;&lt;code&gt;rustix::event&lt;/code&gt;&lt;/a&gt;—Polling and event operations.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;fs&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.rs/rustix/*/rustix/fs/index.html&#34;&gt;&lt;code&gt;rustix::fs&lt;/code&gt;&lt;/a&gt;—Filesystem operations.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;io_uring&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.rs/rustix/*/rustix/io_uring/index.html&#34;&gt;&lt;code&gt;rustix::io_uring&lt;/code&gt;&lt;/a&gt;—Linux io_uring.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;mm&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.rs/rustix/*/rustix/mm/index.html&#34;&gt;&lt;code&gt;rustix::mm&lt;/code&gt;&lt;/a&gt;—Memory map operations.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;mount&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.rs/rustix/*/rustix/mount/index.html&#34;&gt;&lt;code&gt;rustix::mount&lt;/code&gt;&lt;/a&gt;—Linux mount API.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;net&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.rs/rustix/*/rustix/net/index.html&#34;&gt;&lt;code&gt;rustix::net&lt;/code&gt;&lt;/a&gt;—Network-related operations.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;param&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.rs/rustix/*/rustix/param/index.html&#34;&gt;&lt;code&gt;rustix::param&lt;/code&gt;&lt;/a&gt;—Process parameters.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;pipe&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.rs/rustix/*/rustix/pipe/index.html&#34;&gt;&lt;code&gt;rustix::pipe&lt;/code&gt;&lt;/a&gt;—Pipe operations.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;process&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.rs/rustix/*/rustix/process/index.html&#34;&gt;&lt;code&gt;rustix::process&lt;/code&gt;&lt;/a&gt;—Process-associated operations.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;procfs&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.rs/rustix/*/rustix/procfs/index.html&#34;&gt;&lt;code&gt;rustix::procfs&lt;/code&gt;&lt;/a&gt;—Utilities for reading &lt;code&gt;/proc&lt;/code&gt; on Linux.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;pty&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.rs/rustix/*/rustix/pty/index.html&#34;&gt;&lt;code&gt;rustix::pty&lt;/code&gt;&lt;/a&gt;—Pseudoterminal operations.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;rand&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.rs/rustix/*/rustix/rand/index.html&#34;&gt;&lt;code&gt;rustix::rand&lt;/code&gt;&lt;/a&gt;—Random-related operations.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;shm&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.rs/rustix/*/rustix/shm/index.html&#34;&gt;&lt;code&gt;rustix::shm&lt;/code&gt;&lt;/a&gt;—POSIX shared memory.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;stdio&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.rs/rustix/*/rustix/stdio/index.html&#34;&gt;&lt;code&gt;rustix::stdio&lt;/code&gt;&lt;/a&gt;—Stdio-related operations.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;system&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.rs/rustix/*/rustix/system/index.html&#34;&gt;&lt;code&gt;rustix::system&lt;/code&gt;&lt;/a&gt;—System-related operations.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;termios&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.rs/rustix/*/rustix/termios/index.html&#34;&gt;&lt;code&gt;rustix::termios&lt;/code&gt;&lt;/a&gt;—Terminal I/O stream operations.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;thread&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.rs/rustix/*/rustix/thread/index.html&#34;&gt;&lt;code&gt;rustix::thread&lt;/code&gt;&lt;/a&gt;—Thread-associated operations.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;time&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.rs/rustix/*/rustix/time/index.html&#34;&gt;&lt;code&gt;rustix::time&lt;/code&gt;&lt;/a&gt;—Time-related operations.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;use-libc&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enable the libc backend.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;64-bit Large File Support (LFS) and Year 2038 (y2038) support&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;rustix&lt;/code&gt; automatically uses 64-bit APIs when available, and avoids exposing 32-bit APIs that would have the year-2038 problem or fail to support large files. For instance, &lt;code&gt;rustix::fstatvfs&lt;/code&gt; calls &lt;code&gt;fstatvfs64&lt;/code&gt;, and returns a struct that&#39;s 64-bit even on 32-bit platforms.&lt;/p&gt; &#xA;&lt;h2&gt;Similar crates&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;rustix&lt;/code&gt; is similar to &lt;a href=&#34;https://crates.io/crates/nix&#34;&gt;&lt;code&gt;nix&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://crates.io/crates/simple_libc&#34;&gt;&lt;code&gt;simple_libc&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://crates.io/crates/unix&#34;&gt;&lt;code&gt;unix&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://crates.io/crates/nc&#34;&gt;&lt;code&gt;nc&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://crates.io/crates/uapi&#34;&gt;&lt;code&gt;uapi&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://lib.rs/crates/rusl&#34;&gt;&lt;code&gt;rusl&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;rustix&lt;/code&gt; is architected for &lt;a href=&#34;https://github.com/rust-lang/rfcs/raw/master/text/3128-io-safety.md&#34;&gt;I/O safety&lt;/a&gt; with most APIs using &lt;a href=&#34;https://doc.rust-lang.org/stable/std/os/fd/struct.OwnedFd.html&#34;&gt;&lt;code&gt;OwnedFd&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://doc.rust-lang.org/stable/std/os/fd/trait.AsFd.html&#34;&gt;&lt;code&gt;AsFd&lt;/code&gt;&lt;/a&gt; to manipulate file descriptors rather than &lt;code&gt;File&lt;/code&gt; or even &lt;code&gt;c_int&lt;/code&gt;, and supporting multiple backends so that it can use direct syscalls while still being usable on all platforms &lt;code&gt;libc&lt;/code&gt; supports. Like &lt;code&gt;nix&lt;/code&gt;, &lt;code&gt;rustix&lt;/code&gt; has an optimized and flexible filename argument mechanism that allows users to use a variety of string types, including non-UTF-8 string types.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitlab.redox-os.org/redox-os/relibc&#34;&gt;&lt;code&gt;relibc&lt;/code&gt;&lt;/a&gt; is a similar project which aims to be a full &#34;libc&#34;, including C-compatible interfaces and higher-level C/POSIX standard-library functionality; &lt;code&gt;rustix&lt;/code&gt; just aims to provide safe and idiomatic Rust interfaces to low-level syscalls. &lt;code&gt;relibc&lt;/code&gt; also doesn&#39;t tend to support features not supported on Redox, such as &lt;code&gt;*at&lt;/code&gt; functions like &lt;code&gt;openat&lt;/code&gt;, which are important features for &lt;code&gt;rustix&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rustix&lt;/code&gt; has its own code for making direct syscalls, similar to the &lt;a href=&#34;https://crates.io/crates/syscall&#34;&gt;&lt;code&gt;syscall&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://crates.io/crates/sc&#34;&gt;&lt;code&gt;sc&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://crates.io/crates/scall&#34;&gt;&lt;code&gt;scall&lt;/code&gt;&lt;/a&gt; crates, using the Rust &lt;code&gt;asm!&lt;/code&gt; macro. &lt;code&gt;rustix&lt;/code&gt; can also use Linux&#39;s vDSO mechanism to optimize Linux &lt;code&gt;clock_gettime&lt;/code&gt; on all architectures, and all Linux system calls on x86. And &lt;code&gt;rustix&lt;/code&gt;&#39;s syscalls report errors using an optimized &lt;code&gt;Errno&lt;/code&gt; type.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rustix&lt;/code&gt;&#39;s &lt;code&gt;*at&lt;/code&gt; functions are similar to the &lt;a href=&#34;https://crates.io/crates/openat&#34;&gt;&lt;code&gt;openat&lt;/code&gt;&lt;/a&gt; crate, but &lt;code&gt;rustix&lt;/code&gt; provides them as free functions rather than associated functions of a &lt;code&gt;Dir&lt;/code&gt; type. &lt;code&gt;rustix&lt;/code&gt;&#39;s &lt;code&gt;CWD&lt;/code&gt; constant exposes the special &lt;code&gt;AT_FDCWD&lt;/code&gt; value in a safe way, so users don&#39;t need to open &lt;code&gt;.&lt;/code&gt; to get a current-directory handle.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rustix&lt;/code&gt;&#39;s &lt;code&gt;openat2&lt;/code&gt; function is similar to the &lt;a href=&#34;https://crates.io/crates/openat2&#34;&gt;&lt;code&gt;openat2&lt;/code&gt;&lt;/a&gt; crate, but uses I/O safety types rather than &lt;code&gt;RawFd&lt;/code&gt;. &lt;code&gt;rustix&lt;/code&gt; does not provide dynamic feature detection, so users must handle the &lt;a href=&#34;https://docs.rs/rustix/*/rustix/io/struct.Errno.html#associatedconstant.NOSYS&#34;&gt;&lt;code&gt;NOSYS&lt;/code&gt;&lt;/a&gt; error themselves.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rustix&lt;/code&gt;&#39;s &lt;code&gt;termios&lt;/code&gt; module is similar to the &lt;a href=&#34;https://crates.io/crates/termios&#34;&gt;&lt;code&gt;termios&lt;/code&gt;&lt;/a&gt; crate, but uses I/O safety types rather than &lt;code&gt;RawFd&lt;/code&gt;, and the flags parameters to functions such as &lt;code&gt;tcsetattr&lt;/code&gt; are &lt;code&gt;enum&lt;/code&gt;s rather than bare integers. And, rustix calls its &lt;code&gt;tcgetattr&lt;/code&gt; function &lt;code&gt;tcgetattr&lt;/code&gt;, rather than &lt;code&gt;Termios::from_fd&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Minimum Supported Rust Version (MSRV)&lt;/h2&gt; &#xA;&lt;p&gt;This crate currently works on the version of &lt;a href=&#34;https://packages.debian.org/stable/rust/rustc&#34;&gt;Rust on Debian stable&lt;/a&gt;, which is currently &lt;a href=&#34;https://blog.rust-lang.org/2022/08/11/Rust-1.63.0.html&#34;&gt;Rust 1.63&lt;/a&gt;. This policy may change in the future, in minor version releases, so users using a fixed version of Rust should pin to a specific version of this crate.&lt;/p&gt; &#xA;&lt;h2&gt;Minimum Linux Version&lt;/h2&gt; &#xA;&lt;p&gt;On Linux platforms, rustix requires at least Linux 3.2. This is at most the oldest Linux version supported by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://doc.rust-lang.org/nightly/rustc/platform-support.html&#34;&gt;any current Rust target&lt;/a&gt;, or&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.kernel.org/releases.html&#34;&gt;kernel.org&lt;/a&gt; at the time of rustix&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/rustix/main/#minimum-supported-rust-version-msrv&#34;&gt;MSRV&lt;/a&gt; release. The specifics of this policy may change in the future, but we intend it to always reflect “very old” Linux versions.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>