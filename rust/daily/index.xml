<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-03-04T01:34:45Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ethangreen-dev/lovely-injector</title>
    <updated>2025-03-04T01:34:45Z</updated>
    <id>tag:github.com,2025-03-04:/ethangreen-dev/lovely-injector</id>
    <link href="https://github.com/ethangreen-dev/lovely-injector" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A runtime lua injector for games built with LÖVE&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lovely is a runtime lua injector for LÖVE 2d&lt;/h1&gt; &#xA;&lt;p&gt;Lovely is a lua injector which embeds code into a &lt;a href=&#34;https://love2d.org/&#34;&gt;LÖVE 2d&lt;/a&gt; game at runtime. Unlike executable patchers, mods can be installed, updated, and removed &lt;em&gt;over and over again&lt;/em&gt; without requiring a partial or total game reinstallation. This is accomplished through in-process lua API detouring and an easy to use (and distribute) patch system.&lt;/p&gt; &#xA;&lt;h2&gt;Manual Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Windows + Proton / Wine&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the &lt;a href=&#34;https://github.com/ethangreen-dev/lovely-injector/releases&#34;&gt;latest release&lt;/a&gt; for Windows. This will be &lt;code&gt;lovely-x86_64-pc-windows-msvc.zip&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Open the .zip archive, copy &lt;code&gt;version.dll&lt;/code&gt; into the game directory. You can navigate to the game&#39;s directory by right-clicking the game in Steam, hovering &#34;Manage&#34;, and selecting &#34;Browse local files&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Put one or more mods into the mod directory (NOT the same as the game directory). If you are modding Balatro, his should be&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;%AppData%/Balatro/Mods&lt;/code&gt; on Windows&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://steamcommunity.com/sharedfiles/filedetails/?id=3178949415&#34;&gt;&lt;code&gt;~/.steam/steam/steamapps/compatdata/2379780/pfx/drive_c/users/steamuser/AppData/Roaming/Balatro&lt;/code&gt;&lt;/a&gt; on Steam Deck (&lt;code&gt;~/&lt;/code&gt; will be called &lt;em&gt;Home&lt;/em&gt; if you are moving files in the GUI file manager)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;ins&gt;Only Steam Deck / Proton / Wine&lt;/ins&gt;&lt;/strong&gt; Set your game&#39;s launch options in Steam to &lt;code&gt;WINEDLLOVERRIDES=&#34;version=n,b&#34; %command%&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run the game through Steam.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Mac&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the &lt;a href=&#34;https://github.com/ethangreen-dev/lovely-injector/releases&#34;&gt;latest release&lt;/a&gt; for Mac. If you have an M-series CPU (M1, M2, etc.) then this will be &lt;code&gt;lovely-aarch64-apple-darwin.tar.gz&lt;/code&gt;. If you have an Intel CPU then it will be &lt;code&gt;lovely-x86_64-apple-darwin.tar.gz&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open the .zip archive, copy &lt;code&gt;liblovely.dylib&lt;/code&gt; and &lt;code&gt;run_lovely_macos.sh&lt;/code&gt; into the game directory. You can navigate to the game&#39;s directory by right-clicking the game in Steam, hovering &#34;Manage&#34;, and selecting &#34;Browse local files&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Put one or more mods into the Mac mod directory (NOT the same as the game directory). This should be &lt;code&gt;/Users/$USER/Library/Application Support/Balatro/Mods&lt;/code&gt; where &lt;code&gt;$USER&lt;/code&gt; is your username (if you are modding Balatro).&lt;br&gt; If you can&#39;t find this folder, try pressing &lt;code&gt;Shift-Command-.&lt;/code&gt; (period) to show hidden files in Finder.&lt;/li&gt; &#xA; &lt;li&gt;Run the game by either dragging and dropping &lt;code&gt;run_lovely_macos.sh&lt;/code&gt; onto &lt;code&gt;Terminal.app&lt;/code&gt; in Applications &amp;gt; Utilities and then pressing enter, or by executing &lt;code&gt;sh run_lovely_macos.sh&lt;/code&gt; in the terminal within the game directory.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Note: You cannot run your game through Steam on Mac due to a bug within the Steam client. You must run it with the &lt;code&gt;run_lovely_macos.sh&lt;/code&gt; script.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: Mods with Lovely patch files (&lt;code&gt;lovely.toml&lt;/code&gt; or in &lt;code&gt;lovely/*.toml&lt;/code&gt;) &lt;strong&gt;must&lt;/strong&gt; be installed into their own folder within the mod directory. No exceptions!&lt;/p&gt; &#xA;&lt;h2&gt;Patches&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Note that the patch format is unstable and prone to change until Lovely is out of early development.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Patch files&lt;/em&gt; define where and how code injection occurs within the game process. A good (complex) example of this can be found in the Steamodded repo &lt;a href=&#34;https://github.com/Steamopollys/Steamodded/tree/main/lovely&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[manifest]&#xA;version = &#34;1.0.0&#34;&#xA;priority = 0&#xA;&#xA;# Define a var substitution rule. This searches for lines that contain {{lovely:var_name}}&#xA;# (var_name from this example, it can really be anything) and replaces each match with the&#xA;# provided value.&#xA;# This example would transform print(&#39;{{lovely:var_name}}&#39;) to print(&#39;Hello world!&#39;).&#xA;#&#xA;# USEFUL: For when you want to reduce the complexity of repetitive injections, eg. embedding&#xA;# release version numbers in multiple locations.&#xA;[vars]&#xA;var_name = &#34;Hello world!&#34;&#xA;&#xA;# Inject one or more lines of code before, after, or at (replacing) a line which matches&#xA;# the provided pattern.&#xA;#&#xA;# USEFUL: For when you need to add / modify a small amount of code to setup initialization&#xA;# routines, etc.&#xA;[[patches]]&#xA;[patches.pattern]&#xA;target = &#34;game.lua&#34;&#xA;pattern = &#34;self.SPEEDFACTOR = 1&#34;&#xA;position = &#34;after&#34;&#xA;payload = &#39;&#39;&#39;&#xA;initSteamodded()&#xA;print(&#39;{{lovely:var_name}}&#39;)&#xA;&#39;&#39;&#39;&#xA;match_indent = true&#xA;times = 1&#xA;&#xA;# Inject one or more lines of code before, after, at, or interwoven into one or more&#xA;# Regex capture groups.&#xA;# - I recommend you to use a Regex playground like https://regexr.com to build&#xA;#   your patterns.&#xA;# - Regex is NOT EFFICIENT. Please use the pattern patch unless absolutely necessary.&#xA;# - This patch has capture group support.&#xA;# - This patch does NOT trim whitespace from each line. Take that into account when&#xA;#   designing your pattern.&#xA;#&#xA;# USEFUL: For when the pattern patch is not expressive enough to describe how the&#xA;# payload should be injected.&#xA;[patches.regex]&#xA;target = &#34;tag.lua&#34;&#xA;pattern = &#34;(?&amp;lt;indent&amp;gt;[\t ]*)if (?&amp;lt;cond&amp;gt;_context.type == &#39;eval&#39; then)&#34;&#xA;position = &#39;at&#39;&#xA;line_prepend = &#39;$indent&#39;&#xA;payload = &#39;&#39;&#39;&#xA;local obj = SMODS.Tags[self.key]&#xA;local res&#xA;if obj and obj.apply and type(obj.apply) == &#39;function&#39; then&#xA;    res = obj.apply(self, _context)&#xA;end&#xA;if res then&#xA;    return res&#xA;elseif $cond&#xA;&#39;&#39;&#39;&#xA;times = 1&#xA;&#xA;# Append or prepend the contents of one or more files onto the target.&#xA;#&#xA;# USEFUL: For when you *only* care about getting your code into the game, nothing else.&#xA;# This does NOT inject it as a new module.&#xA;[[patches]]&#xA;[patches.copy]&#xA;target = &#34;main.lua&#34;&#xA;position = &#34;append&#34;&#xA;sources = [&#xA;    &#34;core/core.lua&#34;,&#xA;    &#34;core/deck.lua&#34;,&#xA;    &#34;core/joker.lua&#34;,&#xA;    &#34;core/sprite.lua&#34;,&#xA;    &#34;debug/debug.lua&#34;,&#xA;    &#34;loader/loader.lua&#34;,&#xA;]&#xA;&#xA;# Inject a new module into the game *before* a target file it loaded.&#xA;# USEFUL: For when you want to silo your code into a separate require-able module OR inject a &#34;global&#34; dependency before game / mod code begins execution.&#xA;[[patches]]&#xA;[patches.module]&#xA;source = &#34;nativefs.lua&#34;&#xA;before = &#34;main.lua&#34;&#xA;name = &#34;nativefs&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;TL;DR - Patch variants&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &lt;code&gt;pattern&lt;/code&gt; patches to surgically embed code at specific locations within the target. Supports &lt;code&gt;*&lt;/code&gt; (matches 0 or more occurrences of any character) and &lt;code&gt;?&lt;/code&gt; (matches exactly one occurrence of any character) wildcards.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;regex&lt;/code&gt; patches &lt;em&gt;only&lt;/em&gt; when the pattern patch does not fulfill your needs. This is basically the pattern patch but with a backing regex query engine, capture groups and all.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;copy&lt;/code&gt; patches when you need to copy a large amount of position-independent code into the target.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;module&lt;/code&gt; patches to inject a lua module into the game&#39;s runtime. Note that this currently only supports single file modules, but this should be changing soon.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Patch files&lt;/h3&gt; &#xA;&lt;p&gt;Patch files are loaded from mod directories inside of the mod folder (&lt;code&gt;MOD_DIR&lt;/code&gt;). Lovely will load any patch files present within &lt;code&gt;MOD_DIR/ModName/lovely/&lt;/code&gt; or load a single patch from &lt;code&gt;MOD_DIR/ModName/lovely.toml&lt;/code&gt;. If multiple patches are loaded they will be injected into the game in the order in which they are found.&lt;/p&gt; &#xA;&lt;p&gt;Paths defined within the patch are rooted by the mod&#39;s directory. For example, &lt;code&gt;core/deck.lua&lt;/code&gt; resolves to &lt;code&gt;MOD_DIR/ModName/core/deck.lua&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Patch targets&lt;/h3&gt; &#xA;&lt;p&gt;Each patch definition has a single patch target. These targets are the relative paths of source files when dumped from the game with a tool like 7zip. For example, one can target a top-level file like &lt;code&gt;main.lua&lt;/code&gt;, or one in a subdirectory like &lt;code&gt;engine/event.lua&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Patch debugging&lt;/h3&gt; &#xA;&lt;p&gt;Lovely dumps patched lua source files to &lt;code&gt;MOD_DIR/lovely/dump&lt;/code&gt;. Logs are likewise written to &lt;code&gt;MOD_DIR/lovely/log&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Not yet implemented&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;manifest.version&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>