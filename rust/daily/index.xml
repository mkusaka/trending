<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-05T01:42:13Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jdx/mise</title>
    <updated>2024-01-05T01:42:13Z</updated>
    <id>tag:github.com,2024-01-05:/jdx/mise</id>
    <link href="https://github.com/jdx/mise" rel="alternate"></link>
    <summary type="html">&lt;p&gt;dev tools, env vars, task runner&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;&lt;a href=&#34;https://mise.jdx.dev&#34;&gt;mise-en-place&lt;/a&gt;&lt;/h1&gt; &#xA; &lt;!-- &lt;a href=&#34;https://mise.jdx.dev&#34;&gt;&lt;picture&gt; --&gt; &#xA; &lt;!--   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; width=&#34;617&#34; srcset=&#34;./docs/logo-dark@2x.png&#34;&gt; --&gt; &#xA; &lt;!--   &lt;img alt=&#34;mise logo&#34; width=&#34;617&#34; src=&#34;./docs/logo-light@2x.png&#34;&gt; --&gt; &#xA; &lt;!-- &lt;/picture&gt;&lt;/a&gt; --&gt; &#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://crates.io/crates/mise&#34;&gt;&lt;img alt=&#34;Crates.io&#34; src=&#34;https://img.shields.io/crates/v/mise?style=for-the-badge&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/jdx/mise/raw/main/LICENSE&#34;&gt;&lt;img alt=&#34;GitHub&#34; src=&#34;https://img.shields.io/github/license/jdx/mise?color=%2320A920&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/jdx/mise/actions/workflows/test.yml&#34;&gt;&lt;img alt=&#34;GitHub Workflow Status&#34; src=&#34;https://img.shields.io/github/actions/workflow/status/jdx/mise/test.yml?color=%2320A920&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &#xA; &lt;!-- &lt;a href=&#34;https://codecov.io/gh/jdx/mise&#34;&gt;&lt;img alt=&#34;Codecov&#34; src=&#34;https://img.shields.io/codecov/c/github/jdx/mise?color=%2320A920&amp;style=for-the-badge&#34;&gt;&lt;/a&gt; --&gt; &#xA; &lt;a href=&#34;https://discord.gg/mABnUDvP57&#34;&gt;&lt;img alt=&#34;Discord&#34; src=&#34;https://img.shields.io/discord/1066429325269794907?color=%23738ADB&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &#xA; &lt;p&gt;&lt;em&gt;The front-end to your dev env. (&lt;a href=&#34;https://mise.jdx.dev/rtx.html&#34;&gt;formerly called &#34;rtx&#34;&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;What is it?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Like &lt;a href=&#34;https://asdf-vm.com&#34;&gt;asdf&lt;/a&gt; (or &lt;a href=&#34;https://github.com/nvm-sh/nvm&#34;&gt;nvm&lt;/a&gt; or &lt;a href=&#34;https://github.com/pyenv/pyenv&#34;&gt;pyenv&lt;/a&gt; but for any language) it manages dev tools like node, python, cmake, terraform, and &lt;a href=&#34;https://mise.jdx.dev/plugins.html&#34;&gt;hundreds more&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Like &lt;a href=&#34;https://github.com/direnv/direnv&#34;&gt;direnv&lt;/a&gt; it manages &lt;a href=&#34;https://mise.jdx.dev/environments.html&#34;&gt;environment variables&lt;/a&gt; for different project directories.&lt;/li&gt; &#xA; &lt;li&gt;Like &lt;a href=&#34;https://www.gnu.org/software/make/manual/make.html&#34;&gt;make&lt;/a&gt; it manages &lt;a href=&#34;https://mise.jdx.dev/tasks/&#34;&gt;tasks&lt;/a&gt; used to build and test projects.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;30 Second Demo&lt;/h2&gt; &#xA;&lt;p&gt;The following shows using mise to install different versions of &lt;a href=&#34;https://nodejs.org&#34;&gt;node&lt;/a&gt;. Note that calling &lt;code&gt;which node&lt;/code&gt; gives us a real path to node, not a shim.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/mise/main/docs/demo.gif&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdx/mise/main/docs/demo.gif&#34; alt=&#34;demo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Install mise (other methods &lt;a href=&#34;https://mise.jdx.dev/getting-started.html&#34;&gt;here&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;$ curl https://mise.jdx.dev/install.sh | sh&#xA;$ ~/.local/bin/mise --version&#xA;mise 2024.1.6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hook mise into your shell (pick the right one for your shell):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;# note this assumes mise is located at ~/.local/bin/mise&#xA;# which is what install.sh does by default&#xA;echo &#39;eval &#34;$(~/.local/bin/mise activate bash)&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;echo &#39;eval &#34;$(~/.local/bin/mise activate zsh)&#34;&#39; &amp;gt;&amp;gt; ~/.zshrc&#xA;echo &#39;~/.local/bin/mise activate fish | source&#39; &amp;gt;&amp;gt; ~/.config/fish/config.fish&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install a runtime and set it as the global default:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;$ mise use --global node@20&#xA;$ node -v&#xA;v20.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Full Documentation&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://mise.jdx.dev&#34;&gt;mise.jdx.dev&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>feschber/lan-mouse</title>
    <updated>2024-01-05T01:42:13Z</updated>
    <id>tag:github.com,2024-01-05:/feschber/lan-mouse</id>
    <link href="https://github.com/feschber/lan-mouse" rel="alternate"></link>
    <summary type="html">&lt;p&gt;mouse &amp; keyboard sharing via LAN&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lan Mouse&lt;/h1&gt; &#xA;&lt;p&gt;Lan Mouse is a mouse and keyboard sharing software similar to universal-control on Apple devices. It allows for using multiple pcs with a single set of mouse and keyboard. This is also known as a Software KVM switch.&lt;/p&gt; &#xA;&lt;p&gt;The primary target is Wayland on Linux but Windows and MacOS and Linux on Xorg have partial support as well (see below for more details).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Now with a gtk frontend&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;picture&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://github.com/feschber/lan-mouse/assets/40996949/016a06a9-76db-4951-9dcc-127d012c59df&#34;&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://github.com/feschber/lan-mouse/assets/40996949/d6318340-f811-4e16-9d6e-d1b79883c709&#34;&gt; &#xA; &lt;img alt=&#34;Screenshot of Lan-Mouse&#34; srcset=&#34;https://github.com/feschber/lan-mouse/assets/40996949/016a06a9-76db-4951-9dcc-127d012c59df&#34;&gt; &#xA;&lt;/picture&gt; &#xA;&lt;p&gt;Goal of this project is to be an open-source replacement for proprietary tools like &lt;a href=&#34;https://symless.com/synergy&#34;&gt;Synergy 2/3&lt;/a&gt;, &lt;a href=&#34;https://www.sharemouse.com/de/&#34;&gt;Share Mouse&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Focus lies on performance and a clean, manageable implementation that can easily be expanded to support additional backends like e.g. Android, iOS, ... .&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;blazingly fast™&lt;/strong&gt;&lt;/em&gt; because it&#39;s written in rust.&lt;/p&gt; &#xA;&lt;p&gt;For an alternative (with slightly different goals) you may check out &lt;a href=&#34;https://github.com/input-leap&#34;&gt;Input Leap&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] Since this tool has gained a bit of popularity over the past couple of days:&lt;/p&gt; &#xA; &lt;p&gt;All network traffic is currently &lt;strong&gt;unencrypted&lt;/strong&gt; and sent in &lt;strong&gt;plaintext&lt;/strong&gt;.&lt;/p&gt; &#xA; &lt;p&gt;A malicious actor with access to the network could read input data or send input events with spoofed IPs to take control over a device.&lt;/p&gt; &#xA; &lt;p&gt;Therefore you should only use this tool in your local network with trusted devices for now and I take no responsibility for any leakage of data!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;OS Support&lt;/h2&gt; &#xA;&lt;p&gt;The following table shows support for input emulation (to emulate events received from other clients) and input capture (to send events &lt;em&gt;to&lt;/em&gt; other clients) on different operating systems:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Backend&lt;/th&gt; &#xA;   &lt;th&gt;input emulation&lt;/th&gt; &#xA;   &lt;th&gt;input capture&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Wayland (wlroots)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Wayland (KDE)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Wayland (Gnome)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;WIP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;X11&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;WIP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;WIP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MacOS&lt;/td&gt; &#xA;   &lt;td&gt;( &lt;span&gt;✔&lt;/span&gt; )&lt;/td&gt; &#xA;   &lt;td&gt;WIP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Keycode translation is not yet implemented so on MacOS only mouse emulation works as of right now.&lt;/p&gt; &#xA;&lt;h2&gt;Build and Run&lt;/h2&gt; &#xA;&lt;h3&gt;Install Dependencies&lt;/h3&gt; &#xA;&lt;h4&gt;Macos&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install libadwaita&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Ubuntu and derivatives&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt install libadwaita-1-dev libgtk-4-dev libx11-dev libxtst-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Arch and derivatives&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo pacman -S libadwaita gtk libx11 libxtst&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Fedora and derivatives&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo dnf install libadwaita-devel libXtst-devel libX11-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;p&gt;Follow the instructions at &lt;a href=&#34;https://gtk-rs.org/gtk4-rs/stable/latest/book/installation_windows.html&#34;&gt;gtk-rs.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;TLDR:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Build gtk from source&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The following commands should be run in an admin power shell instance:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# install chocolatey&#xA;Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString(&#39;https://community.chocolatey.org/install.ps1&#39;))&#xA;&#xA;# install python 3.11 (Version is important, as 3.12 does not work currently)&#xA;choco install python --version=3.11.0&#xA;&#xA;# install git&#xA;choco install git&#xA;&#xA;# install msys2&#xA;choco install msys2&#xA;&#xA;# install Visual Studio 2022&#xA;choco install visualstudio2022-workload-vctools&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The following commands should be run in a regular power shell instance:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# install gvsbuild with python&#xA;python -m pip install --user pipx&#xA;python -m pipx ensurepath&#xA;pipx install gvsbuild&#xA;&#xA;# build gtk + libadwaita&#xA;gvsbuild build gtk4 libadwaita librsvg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure to add the directory &lt;code&gt;C:\gtk-build\gtk\x64\release\bin&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/feschber/lan-mouse/main/(https://learn.microsoft.com/en-us/previous-versions/office/developer/sharepoint-2010/ee537574(v=office.14))&#34;&gt;to the &lt;code&gt;PATH&lt;/code&gt; environment variable&lt;/a&gt;. Otherwise the project will fail to build.&lt;/p&gt; &#xA;&lt;p&gt;To avoid building GTK from source, it is possible to disable the gtk frontend (see conditional compilation below).&lt;/p&gt; &#xA;&lt;h3&gt;Build and run&lt;/h3&gt; &#xA;&lt;p&gt;Build in release mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo run --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Conditional Compilation&lt;/h3&gt; &#xA;&lt;p&gt;Currently only x11, wayland, windows and MacOS are supported backends. Depending on the toolchain used, support for other platforms is omitted automatically (it does not make sense to build a Windows &lt;code&gt;.exe&lt;/code&gt; with support for x11 and wayland backends).&lt;/p&gt; &#xA;&lt;p&gt;However one might still want to omit support for e.g. wayland, x11 or libei on a Linux system.&lt;/p&gt; &#xA;&lt;p&gt;This is possible through &lt;a href=&#34;https://doc.rust-lang.org/cargo/reference/features.html&#34;&gt;cargo features&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;E.g. if only wayland support is needed, the following command produces an executable with just support for wayland:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo build --no-default-features --features wayland&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a detailed list of available features, checkout the &lt;a href=&#34;https://raw.githubusercontent.com/feschber/lan-mouse/main/Cargo.toml&#34;&gt;Cargo.toml&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Gtk Frontend&lt;/h3&gt; &#xA;&lt;p&gt;By default the gtk frontend will open when running &lt;code&gt;lan-mouse&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To add a new connection, simply click the &lt;code&gt;Add&lt;/code&gt; button on &lt;em&gt;both&lt;/em&gt; devices, enter the corresponding hostname and activate it.&lt;/p&gt; &#xA;&lt;p&gt;If the mouse can not be moved onto a device, make sure you have port &lt;code&gt;4242&lt;/code&gt; (or the one selected) opened up in your firewall.&lt;/p&gt; &#xA;&lt;h3&gt;Command Line Interface&lt;/h3&gt; &#xA;&lt;p&gt;The cli interface can be enabled using &lt;code&gt;--frontend cli&lt;/code&gt; as commandline arguments. Type &lt;code&gt;help&lt;/code&gt; to list the available commands.&lt;/p&gt; &#xA;&lt;p&gt;E.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cargo run --release -- --frontend cli&#xA;(...)&#xA;&amp;gt; connect &amp;lt;host&amp;gt; left|right|top|bottom&#xA;(...)&#xA;&amp;gt; list&#xA;(...)&#xA;&amp;gt; activate 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Daemon&lt;/h3&gt; &#xA;&lt;p&gt;Lan Mouse can be launched in daemon mode to keep it running in the background. To do so, add &lt;code&gt;--daemon&lt;/code&gt; to the commandline args:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cargo run --release -- --daemon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;To automatically load clients on startup, the file &lt;code&gt;$XDG_CONFIG_HOME/lan-mouse/config.toml&lt;/code&gt; is parsed. &lt;code&gt;$XDG_CONFIG_HOME&lt;/code&gt; defaults to &lt;code&gt;~/.config/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To create this file you can copy the following example config:&lt;/p&gt; &#xA;&lt;h3&gt;Example config&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# example configuration&#xA;&#xA;# optional port (defaults to 4242)&#xA;port = 4242&#xA;# # optional frontend -&amp;gt; defaults to gtk if available&#xA;# # possible values are &#34;cli&#34; and &#34;gtk&#34; &#xA;# frontend = &#34;gtk&#34;&#xA;&#xA;# define a client on the right side with host name &#34;iridium&#34;&#xA;[right]&#xA;# hostname&#xA;host_name = &#34;iridium&#34;&#xA;# optional list of (known) ip addresses&#xA;ips = [&#34;192.168.178.156&#34;]&#xA;&#xA;# define a client on the left side with IP address 192.168.178.189&#xA;[left]&#xA;# The hostname is optional: When no hostname is specified,&#xA;# at least one ip address needs to be specified.&#xA;host_name = &#34;thorium&#34;&#xA;# ips for ethernet and wifi&#xA;ips = [&#34;192.168.178.189&#34;, &#34;192.168.178.172&#34;]&#xA;# optional port&#xA;port = 4242&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where &lt;code&gt;left&lt;/code&gt; can be either &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, &lt;code&gt;top&lt;/code&gt; or &lt;code&gt;bottom&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Graphical frontend (gtk + libadwaita)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; respect xdg-config-home for config file location.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; IP Address switching&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Liveness tracking Automatically ungrab mouse when client unreachable&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Liveness tracking: Automatically release keys, when server offline&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Libei Input Capture&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; X11 Input Capture&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Windows Input Capture&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; MacOS Input Capture&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; MaxOS KeyCode Translation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Latency measurement and visualization&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Bandwidth usage measurement and visualization&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Clipboard support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;em&gt;Encryption&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Protocol&lt;/h2&gt; &#xA;&lt;p&gt;Currently &lt;em&gt;all&lt;/em&gt; mouse and keyboard events are sent via &lt;strong&gt;UDP&lt;/strong&gt; for performance reasons. Each event is sent as one single datagram, currently without any acknowledgement to guarantee 0% packet loss. This means, any packet that is lost results in a discarded mouse / key event, which is ignored for now.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;UDP&lt;/strong&gt; also has the additional benefit that no reconnection logic is required. Any client can just go offline and it will simply start working again as soon as it comes back online.&lt;/p&gt; &#xA;&lt;p&gt;Additionally a tcp server is hosted for data that needs to be sent reliably (e.g. the keymap from the server or clipboard contents in the future) can be requested via a tcp connection.&lt;/p&gt; &#xA;&lt;h2&gt;Bandwidth considerations&lt;/h2&gt; &#xA;&lt;p&gt;The most bandwidth is taken up by mouse events. A typical office mouse has a polling rate of 125Hz while gaming mice typically have a much higher polling rate of 1000Hz. A mouse Event consists of 21 Bytes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;1 Byte for the event type enum,&lt;/li&gt; &#xA; &lt;li&gt;4 Bytes (u32) for the timestamp,&lt;/li&gt; &#xA; &lt;li&gt;8 Bytes (f64) for dx,&lt;/li&gt; &#xA; &lt;li&gt;8 Bytes (f64) for dy.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally the IP header with 20 Bytes and the udp header with 8 Bytes take up another 28 Byte. So in total there is 49 * 1000 Bytes/s for a 1000Hz gaming mouse. This makes for a bandwidth requirement of 392 kbit/s in total &lt;em&gt;even&lt;/em&gt; for a high end gaming mouse. So bandwidth is a non-issue.&lt;/p&gt; &#xA;&lt;p&gt;Larger data chunks, like the keymap are offered by the server via tcp listening on the same port. This way we dont need to implement any congestion control and leave this up to tcp. In the future this can be used for e.g. clipboard contents as well.&lt;/p&gt; &#xA;&lt;h2&gt;Packets per Second&lt;/h2&gt; &#xA;&lt;p&gt;While on LAN the performance is great, some WIFI cards seem to struggle with the amount of packets per second, particularly on high-end gaming mice with 1000Hz+ polling rates.&lt;/p&gt; &#xA;&lt;p&gt;The plan is to implement a way of accumulating packets and sending them as one single key event to reduce the packet rate (basically reducing the polling rate artificially).&lt;/p&gt; &#xA;&lt;p&gt;The way movement data is currently sent is also quite wasteful since even a 16bit integer is likely enough to represent even the fastest possible mouse movement. A different encoding that is more efficient for smaller values like &lt;a href=&#34;https://protobuf.dev/programming-guides/encoding/&#34;&gt;Protocol Buffers&lt;/a&gt; would be a better choice for the future and could also help for WIFI connections.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;Sending key and mouse event data over the local network might not be the biggest security concern but in any public network or business environment it&#39;s &lt;em&gt;QUITE&lt;/em&gt; a problem to basically broadcast your keystrokes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;There should be an encryption layer below the application to enable a secure link.&lt;/li&gt; &#xA; &lt;li&gt;The encryption keys could be generated by the graphical frontend.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Wayland support&lt;/h2&gt; &#xA;&lt;h3&gt;Input Emulation (for receiving events)&lt;/h3&gt; &#xA;&lt;p&gt;On wayland input-emulation is in an early/unstable state as of writing this.&lt;/p&gt; &#xA;&lt;p&gt;For this reason a suitable backend is chosen based on the active desktop environment / compositor.&lt;/p&gt; &#xA;&lt;p&gt;Different compositors have different ways of enabling input emulation:&lt;/p&gt; &#xA;&lt;h4&gt;Wlroots&lt;/h4&gt; &#xA;&lt;p&gt;Most wlroots-based compositors like Hyprland and Sway support the following unstable wayland protocols for keyboard and mouse emulation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wayland.app/protocols/virtual-keyboard-unstable-v1&#34;&gt;virtual-keyboard-unstable-v1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wayland.app/protocols/wlr-virtual-pointer-unstable-v1&#34;&gt;wlr-virtual-pointer-unstable-v1&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;KDE&lt;/h4&gt; &#xA;&lt;p&gt;KDE also has a protocol for input emulation (&lt;a href=&#34;https://wayland.app/protocols/kde-fake-input&#34;&gt;kde-fake-input&lt;/a&gt;), it is however not exposed to third party applications.&lt;/p&gt; &#xA;&lt;p&gt;The recommended way to emulate input on KDE is the &lt;a href=&#34;https://flatpak.github.io/xdg-desktop-portal/#gdbus-org.freedesktop.portal.RemoteDesktop&#34;&gt;freedesktop remote-desktop-portal&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Gnome&lt;/h4&gt; &#xA;&lt;p&gt;Gnome uses &lt;a href=&#34;https://gitlab.freedesktop.org/libinput/libei&#34;&gt;libei&lt;/a&gt; for input emulation and capture, which has the goal to become the general approach for emulating and capturing Input on Wayland.&lt;/p&gt; &#xA;&lt;h3&gt;Input capture&lt;/h3&gt; &#xA;&lt;p&gt;To capture mouse and keyboard input, a few things are necessary:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Displaying an immovable surface at screen edges&lt;/li&gt; &#xA; &lt;li&gt;Locking the mouse in place&lt;/li&gt; &#xA; &lt;li&gt;(optionally but highly recommended) reading unaccelerated mouse input&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Required Protocols (Event Emitting)&lt;/th&gt; &#xA;   &lt;th&gt;Sway&lt;/th&gt; &#xA;   &lt;th&gt;Kwin&lt;/th&gt; &#xA;   &lt;th&gt;Gnome&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pointer-constraints-unstable-v1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;relative-pointer-unstable-v1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;keyboard-shortcuts-inhibit-unstable-v1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;wlr-layer-shell-unstable-v1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/feschber/lan-mouse/main/wlr-virtual-pointer-unstable-v1&#34;&gt;zwlr_virtual_pointer_manager_v1&lt;/a&gt; is required to display surfaces on screen edges and used to display the immovable window on both wlroots based compositors and KDE.&lt;/p&gt; &#xA;&lt;p&gt;Gnome unfortunately does not support this protocol and &lt;a href=&#34;https://gitlab.gnome.org/GNOME/gnome-shell/-/issues/1141&#34;&gt;likely won&#39;t ever support it&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;In order for layershell surfaces to be able to lock the pointer using the pointer_constraints protocol &lt;a href=&#34;https://github.com/swaywm/sway/pull/7178&#34;&gt;this patch&lt;/a&gt; needs to be applied to sway.&lt;/del&gt; (this works natively on sway versions &amp;gt;= 1.8)&lt;/p&gt;</summary>
  </entry>
</feed>