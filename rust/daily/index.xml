<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-01T01:43:46Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>WolverinDEV/Valthrun</title>
    <updated>2023-10-01T01:43:46Z</updated>
    <id>tag:github.com,2023-10-01:/WolverinDEV/Valthrun</id>
    <link href="https://github.com/WolverinDEV/Valthrun" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Valthrun an open source external CS2 read only kernel gameplay enhancer.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/WolverinDEV/Valthrun/master/logo.svg?sanitize=true&#34; alt=&#34;Valthrun CS2 Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;right&#34;&gt; &lt;a href=&#34;https://discord.gg/ecKbpAPW5T&#34;&gt; &lt;img src=&#34;https://discordapp.com/api/guilds/1135362291311849693/widget.png?style=shield&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Valthrun an open source external Counter-Strike 2 read only kernel gameplay enhancer.&lt;br&gt; That&#39;s a lot of descriptive words, but what does each of them mean?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Valthrun&lt;/code&gt; The name of this project&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Open Source&lt;/code&gt; This application is open source and for everbody to study&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;external&lt;/code&gt; We do not inject any ddls into the target process&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Counter-Strike 2&lt;/code&gt; The game we&#39;re enhancing&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;read only&lt;/code&gt; We do not write to the CS2 process in any way, therefore being impossible to detect by scanning the process memory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kernel&lt;/code&gt; We do not use any user level WinAPIs in order to get information from the CS2 process&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This project is mainly a fun example for exploring the Windows Kernel with &lt;a href=&#34;https://www.rust-lang.org&#34;&gt;Rust&lt;/a&gt; and exploring the world of game enhancements :)&lt;/p&gt; &#xA;&lt;h1&gt;WARNING&lt;/h1&gt; &#xA;&lt;p&gt;Valthrun is currently &lt;strong&gt;not&lt;/strong&gt; a pnp (plug &#39;n play) application.&lt;br&gt; Please read &lt;a href=&#34;https://raw.githubusercontent.com/WolverinDEV/Valthrun/master/#how-to-use&#34;&gt;How to use&lt;/a&gt; carefully and try troubleshooting issues on your own.&lt;br&gt; The goal is to reach maximum stelth to avoid anti cheat detection.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;p&gt;Valthrun provides a variety of external tools to enchant your gameplay experience.&lt;br&gt; As of now, Valthrun only reads memory and never writes anything. This implies some limitations as which features could be provided.&lt;br&gt; An example would be a skin changer which is not be possible without actively modifying the CS2 game state (e.g. writing into it&#39;s memory).&lt;/p&gt; &#xA;&lt;p&gt;Regardless of this limitation, Valthrun supports the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Player ESP Two modes are supported: &lt;code&gt;Skeleton&lt;/code&gt; and &lt;code&gt;Boxes&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Configurable colors to distinguish between enemy and team players&lt;/li&gt; &#xA;   &lt;li&gt;ESP includes player health&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Bomb Info &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Time until the bomb detonation&lt;/li&gt; &#xA;   &lt;li&gt;Defuser info such as how long until the defuse has succeeded&lt;/li&gt; &#xA;   &lt;li&gt;Bomb site where the bomb is located&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Trigger Bot&lt;/li&gt; &#xA; &lt;li&gt;Stream proof by default&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To access Valthruns settings overlay press &lt;code&gt;PAUSE&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Planned Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Aim Bot&lt;/li&gt; &#xA; &lt;li&gt;Spectator info &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;List of player currently watching you / the observer target&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Player competitive ranks / wins&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;Valthrun does not need to be installed.&lt;br&gt; In order to run Valthrun you only need the kernel driver (&lt;code&gt;valthrun-driver.sys&lt;/code&gt;) and the controller (&lt;code&gt;controller.exe&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Both can be accquired by downloading the precompiled release from GitHub.&lt;br&gt; Click &lt;a href=&#34;https://github.com/WolverinDEV/Valthrun/releases&#34;&gt;here&lt;/a&gt; to view all releases.&lt;/p&gt; &#xA;&lt;p&gt;Once downloaded read &lt;a href=&#34;https://raw.githubusercontent.com/WolverinDEV/Valthrun/master/#how-to-use&#34;&gt;How to use&lt;/a&gt; to get started!&lt;/p&gt; &#xA;&lt;h1&gt;How to use&lt;/h1&gt; &#xA;&lt;p&gt;The following steps need to be done for starting/activating the overlay.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Load the kernel driver&lt;br&gt; The overlay requires the kernel driver for all memory reads and writes. Therefore we need to load the driver before we can start the overlay. It&#39;s not strictly required to load the driver before starting CS2 but logically it makes sense to start with the driver.&lt;/p&gt; &lt;p&gt;There are two common options to load the kernel driver:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;Manually map the driver using a vulnerable driver The Valthrun kernel driver fully supports manual driver mapping using a any vulnerable driver. In order to detect the manual mapping the second driver entry argument (the registry patch) must be a null ptr.&lt;br&gt; The kernel driver will automatically allocate a new driver for io communication.&lt;/p&gt; &lt;p&gt;In order to manually map the Valthrun driver you can use tools like&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/TheCruZ/kdmapper&#34;&gt;kdmapper&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/hfiref0x/KDU&#34;&gt;KDU&lt;/a&gt; (does not always work...)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Setting Windows into test-signing mode&lt;br&gt; TODO: Explain how to set Windows into test signing Helpfull guide: &lt;a href=&#34;https://github.com/dretax/GarHal_CSGO#starting-driver&#34;&gt;https://github.com/dretax/GarHal_CSGO#starting-driver&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start Counter-Strike 2&lt;br&gt; After loading the driver you can start Counter-Strike 2 as usual.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start Overlay&lt;br&gt; With an open instance of Counter-Strike 2 you can start the overlay.&lt;br&gt; Attention: You &lt;em&gt;must&lt;/em&gt; start the overlay as administrator!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To explore all command line options of the controller, start the controller from the terminal and pass &lt;code&gt;-h&lt;/code&gt; to display the command line interface:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ps1&#34;&gt;.\controller.exe -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you want extra/verbose output, start the overlay from the terminal and previously set the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable.&lt;br&gt; Example for executing the overlay with trace output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ps1&#34;&gt;$env:RUST_LOG=&#34;trace&#34;&#xA;.\controller.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Troubleshooting&lt;/h1&gt; &#xA;&lt;p&gt;If you are having issues mapping the kernel driver or starting the controller, please take a look &lt;a href=&#34;https://github.com/WolverinDEV/Valthrun/tree/master/doc/troubleshooting&#34;&gt;here&lt;/a&gt;:&lt;br&gt; &lt;a href=&#34;https://github.com/WolverinDEV/Valthrun/tree/master/doc/troubleshooting&#34;&gt;https://github.com/WolverinDEV/Valthrun/tree/master/doc/troubleshooting&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The issue you encounter is most likely covered. If you still have any questions or need assistens, feel free to checkout the official Valthrun Discord server (&lt;a href=&#34;https://discord.gg/ecKbpAPW5T&#34;&gt;click to join&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h1&gt;VAC&lt;/h1&gt; &#xA;&lt;p&gt;The same considerations as mentioned in &lt;a href=&#34;https://github.com/dretax/GarHal_CSGO#starting-driver&#34;&gt;this link&lt;/a&gt; have been taken into account.&lt;br&gt; With these precautions and some minor improvements, such as omitting the valthrun identifier and using xor-ing for strings, the driver/overlay should avoid VAC detection. However, I must clarify that I haven&#39;t extensively studied VAC, so my conclusion is speculative. Personally, I have been using a C based driver/overlay like this with CSGO for several years without ever getting VAC banned. But be aware of overwatch!&lt;br&gt; Unfortunately, since I&#39;m not part of the closed CS2 beta,&lt;br&gt; I haven&#39;t had the opportunity to test the overlay with VAC live,&lt;br&gt; but I assume it should work similarly well.&lt;/p&gt; &#xA;&lt;h1&gt;Supported Windows Versions&lt;/h1&gt; &#xA;&lt;p&gt;All recent Windows versions should be supported as all functions / struct offsets are resolved dynamically.&lt;br&gt; The latest Win 10 and Win 11 versions (22H2) have been tested. User feedback suggests, Windows versions back &#39;till 20H2 are working. If you encounter an issue, please submit an issue containing your Windows version and detailing the error you encounter.&lt;/p&gt; &#xA;&lt;h1&gt;Screenshots&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/WolverinDEV/Valthrun/master/img/showcase_01.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/WolverinDEV/Valthrun/master/img/showcase_02.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Help&lt;/h1&gt; &#xA;&lt;p&gt;You can find help on the official Valthrun Discord server:&lt;br&gt; &lt;a href=&#34;https://discord.gg/ecKbpAPW5T&#34;&gt;&lt;img src=&#34;https://discordapp.com/api/guilds/1135362291311849693/widget.png?style=shield&#34; alt=&#34;Discord Shield&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>flashbots/hindsight</title>
    <updated>2023-10-01T01:43:46Z</updated>
    <id>tag:github.com,2023-10-01:/flashbots/hindsight</id>
    <link href="https://github.com/flashbots/hindsight" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Retroactively estimate Uniswap-ish MEV on Flashbots MEV-Share by simulating backrun-arbitrages.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hindsight&lt;/h1&gt; &#xA;&lt;!-- show ./header-img.png --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/flashbots/hindsight/main/header-img.png&#34; alt=&#34;hindsight visual algorithm&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Hindsight is an arbitrage simulator written in Rust which estimates the historical value of (Uniswap) MEV from Flashbots MEV-Share events.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;The simulation core uses &lt;a href=&#34;https://github.com/bluealloy/revm&#34;&gt;revm&lt;/a&gt; to simulate arbs locally by first getting state diffs from an Ethereum archive node that supports the &lt;code&gt;trace_callMany&lt;/code&gt; API (see &lt;a href=&#34;https://raw.githubusercontent.com/flashbots/hindsight/main/#requirements&#34;&gt;requirements&lt;/a&gt; for node recommendations).&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Just a warning: ⚠️ running Hindsight on a hosted node may require a high rate limit, which can be expensive.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The arbitrage strategy implemented here is a relatively simple two-step arb: after simulating the user&#39;s trade, we simulate swapping WETH for tokens on the exchange with the best rate (with the user&#39;s trade accounted for) and then simulate selling them on whichever other supported exchange gives us the best rate. Currently, Uniswap V2/V3 and SushiSwap are supported. More exchanges may be added to improve odds of profitability.&lt;/p&gt; &#xA;&lt;p&gt;Simulated arbitrage attempts are saved in a MongoDB database by default, for dead-simple storage that allows us to change our data format as needed with no overhead. Postgres is also supported, but does not currently save all the same fields that Mongo does.&lt;/p&gt; &#xA;&lt;h2&gt;⚠️ limitations ⚠️&lt;/h2&gt; &#xA;&lt;p&gt;Hindsight is still in development, and is not stable. If you find a bug, please &lt;a href=&#34;https://github.com/zeroXbrock/hindsight/issues&#34;&gt;open an issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This project is an experiment. The profits estimated by this system are by no means definitive; they more accurately represent a &lt;strong&gt;lower bound&lt;/strong&gt; for the total addressable MEV on MEV-Share. With more complex strategies and more exchanges supported, total profits which could be realized on MEV-Share should far exceed those which are estimated by this system.&lt;/p&gt; &#xA;&lt;p&gt;This system implements a decidedly simple strategy to estimate a baseline amount of MEV exposed by a few well-known exchanges in the context of MEV-Share. It does not account for many factors that would affect the profitability of an arb, such as gas prices or placement in the block. This system also ignores multiple-hop arbitrage paths, which would improve profits considerably. It also ignores Balancer and Curve trades, which are supported by MEV-Share.&lt;/p&gt; &#xA;&lt;p&gt;The system currently only supports Uniswap V2/V3 and SushiSwap. More exchanges may be added in the future, which should improve profitability.&lt;/p&gt; &#xA;&lt;p&gt;The system currently only supports WETH as the input token, so that the arbitrage is always WETH -&amp;gt; TOKEN -&amp;gt; WETH.&lt;/p&gt; &#xA;&lt;p&gt;The system (the &lt;code&gt;scan&lt;/code&gt; command specifically) is set up to retry indefinitely when the main loop crashes. This is because every once in a while, the system encounters a critical error, usually related to a bad API response. This is not ideal, but a retry usually fixes it. However, this means that your instance might spam your node with requests if it encounters an unrecoverable error. If you&#39;re running on a hosted node, this could waste your rate limit. Make sure to check on it while it&#39;s running. 👁️&lt;/p&gt; &#xA;&lt;h2&gt;setup&lt;/h2&gt; &#xA;&lt;p&gt;Make sure to clone the repo with &lt;code&gt;--recurse-submodules&lt;/code&gt;. At least for now, we depend on a specific commit of rusty-sando, for its very-useful ForkDB.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --recurse-submodules https://github.com/flashbots/hindsight&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or if you already cloned without recursing submodules:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# in hindsight/&#xA;git submodule update --init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;🚧 DB implementation incomplete 🚧&lt;/h3&gt; &#xA;&lt;p&gt;The system defaults to using mongo as the database to store arb simulation results. Postgres can be used (add &lt;code&gt;--help&lt;/code&gt; to any command for details) but currently it only stores &lt;code&gt;tx_hash&lt;/code&gt;, &lt;code&gt;event_block&lt;/code&gt;, &lt;code&gt;event_timestamp&lt;/code&gt;, and &lt;code&gt;profit&lt;/code&gt;, whereas mongo stores all event and arbitrage trade data. Postgres functionality may be improved later on.&lt;/p&gt; &#xA;&lt;h3&gt;requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;ethereum archive node supporting &lt;a href=&#34;https://openethereum.github.io/JSONRPC-trace-module#trace_callmany&#34;&gt;&lt;code&gt;trace_callMany&lt;/code&gt;&lt;/a&gt; API (Reth or Erigon or Infura)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ledgerwatch/erigon&#34;&gt;Erigon&lt;/a&gt; and &lt;a href=&#34;https://github.com/paradigmxyz/reth&#34;&gt;Reth&lt;/a&gt; are good self-hosted options.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.infura.io/solutions/archive-access&#34;&gt;Infura&lt;/a&gt; and &lt;a href=&#34;https://www.quicknode.com/core-api&#34;&gt;QuickNode&lt;/a&gt; offer hosted solutions (make sure you get an &#34;archive node&#34; plan if prompted for it).&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;The default environment (specified in &lt;a href=&#34;https://raw.githubusercontent.com/flashbots/hindsight/main/.env.example&#34;&gt;&lt;code&gt;.env.example&lt;/code&gt;&lt;/a&gt;) assumes that you have an Ethereum node accessible on &lt;code&gt;ws://localhost:8545&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;To build and run locally&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Either/Or:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.rust-lang.org/learn/get-started&#34;&gt;rust&lt;/a&gt; (tested with rustc 1.70.0)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.docker.com/get-started/&#34;&gt;docker&lt;/a&gt; (tested with v24.0.3)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;populate environment variables&lt;/h3&gt; &#xA;&lt;p&gt;If you want to set your environment variables in a file, copy the template file &lt;code&gt;.env.example&lt;/code&gt; to &lt;code&gt;.env&lt;/code&gt; and update as needed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cp .env.example .env&#xA;# modify in your preferred editor&#xA;vim .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The values present in &lt;code&gt;.env.example&lt;/code&gt; will work if you run hindsight locally, but if you&#39;re using docker, you&#39;ll have to change the values to reflect the host in the context of the container.&lt;/p&gt; &#xA;&lt;p&gt;With the DB and Ethereum RPC accessible on the host machine:&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Docker .env config:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;RPC_URL_WS=ws://host.docker.internal:8545&#xA;MONGO_URL=mongodb://root:example@host.docker.internal:27017&#xA;POSTGRES_URL=postgres://postgres:adminPassword@host.docker.internal:5432&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some docker installations on linux don&#39;t support &lt;code&gt;host.docker.internal&lt;/code&gt;; you may try this instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;RPC_URL_WS=ws://172.17.0.1:8545&#xA;MONGO_URL=mongodb://root:example@172.17.0.1:27017&#xA;POSTGRES_URL=postgres://postgres:adminPassword@172.17.0.1:5432&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;.env vs environment variables&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;.env&lt;/code&gt; is optional. If you prefer, you can set environment variables directly in your shell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export RPC_URL_WS=ws://127.0.0.1:8545&#xA;export MONGO_URL=mongodb://root:example@localhost:27017&#xA;export POSTGRES_URL=postgres://postgres:adminPassword@localhost:5432&#xA;cargo run -- scan&#xA;&#xA;# alternatively, to pass the variables directly to hindsight rather than setting them in the shell&#xA;RPC_URL_WS=ws://127.0.0.1:8545 \&#xA;MONGO_URL=mongodb://root:example@localhost:27017 \&#xA;POSTGRES_URL=postgres://postgres:adminPassword@localhost:5432 \&#xA;cargo run -- scan&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;system dependencies&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Debian/Ubuntu&#xA;sudo apt install build-essential libssl-dev pkg-config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;TLS for AWS DocumentDB (optional; only used for cloud DBs)&lt;/h3&gt; &#xA;&lt;p&gt;Get the CA file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./get-ca.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Enable TLS for the db by modifying your &lt;code&gt;.env&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;uncomment and set &lt;code&gt;TLS_CA_FILE_MONGO&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;add &lt;code&gt;?tls=true&lt;/code&gt; to your existing &lt;code&gt;MONGO_URL&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;.env&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;TLS_CA_FILE_MONGO=global-bundle.pem&#xA;MONGO_URL=mongodb://root:example@localhost:27017/?tls=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;run DB locally w/ docker&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you like, you can browse the database in your web browser here: &lt;a href=&#34;http://localhost:8081&#34;&gt;http://localhost:8081/&lt;/a&gt;. Note that there won&#39;t be any interesting data in it until you run the &lt;a href=&#34;https://raw.githubusercontent.com/flashbots/hindsight/main/#scan&#34;&gt;&lt;code&gt;scan&lt;/code&gt;&lt;/a&gt; command.&lt;/p&gt; &#xA;&lt;h3&gt;build and run&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Locally:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# compile it&#xA;cargo build&#xA;&#xA;# run with cargo&#xA;cargo run -- --help&#xA;&#xA;# or run the binary directly&#xA;./target/debug/hindsight --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;With Docker:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker build -t hindsight .&#xA;docker run -it -e RPC_URL_WS=ws://host.docker.internal:8545 -e MONGO_URL=mongodb://host.docker.internal:27017 hindsight --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;ℹ&lt;/span&gt; From this point on, I&#39;ll use &lt;code&gt;hindsight&lt;/code&gt; to refer to whichever method you choose to run the program. So &lt;code&gt;hindsight scan --help&lt;/code&gt; would translate to &lt;code&gt;cargo run -- scan --help&lt;/code&gt; or &lt;code&gt;docker run -it hindsight --help&lt;/code&gt; or &lt;code&gt;./target/debug/hindsight --help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;(optional) test&lt;/h3&gt; &#xA;&lt;p&gt;All the tests are integration tests, so you&#39;ll have to have your environment (DB &amp;amp; ETH provider) set up to run them successfully.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export RPC_URL_WS=ws://127.0.0.1:8545&#xA;export MONGO_URL=mongodb://localhost:27017&#xA;cargo test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;scan&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;scan&lt;/code&gt; command is the heart of Hindsight. It scans events from the MEV-Share Event History API, then fetches the full transactions of those events from the blockchain to use in simulations. The system then forks the blockchain at the block in which each transaction landed, and runs an &lt;a href=&#34;https://raw.githubusercontent.com/flashbots/hindsight/main/src/sim/core.rs#L28&#34;&gt;arbitrarily&lt;/a&gt;-&lt;a href=&#34;https://research.ijcaonline.org/volume65/number14/pxc3886165.pdf&#34;&gt;juiced quadratic search&lt;/a&gt; to find the optimal amount of WETH to execute a backrun-arbitrage. The results are then saved to the database.&lt;/p&gt; &#xA;&lt;p&gt;To scan the last week&#39;s events for arbs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;hindsight scan -t $(echo &#34;$(date +%s) - (86400 * 7)&#34; | bc)&#xA;&#xA;# or if you don&#39;t have `bc` and can accept these ugly parenthesis&#xA;hindsight scan -t $(echo $(($(date +%s) - ((86400 * 7)))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The timestamp arguments accept unix-style integer timestamps, represented in seconds.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;export&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;export&lt;/code&gt; command is a simple way to filter and export results from the database into a JSON file.&lt;/p&gt; &#xA;&lt;p&gt;To export arbs for events from the last week:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;hindsight export -t $(echo &#34;$(date +%s) - (86400 * 7)&#34; | bc)&#xA;&#xA;# or&#xA;hindsight export -t $(echo $(($(date +%s) - ((86400 * 7)))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To filter out unprofitable results:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# only export arbs that returned a profit of at least 0.0001 WETH&#xA;hindsight export -p 0.0001&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;exporting with docker&lt;/h3&gt; &#xA;&lt;p&gt;Hindsight exports all files into a directory &lt;code&gt;./arbData&lt;/code&gt;, relative to wherever the program is executed. To get these files out of the docker container and on to your host machine, you&#39;ll need to map the volume to a local directory.&lt;/p&gt; &#xA;&lt;p&gt;In the directory where you want to put the files (we make an &lt;code&gt;arbData&lt;/code&gt; directory but you don&#39;t have to):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir -p arbData&#xA;docker run -it -v $(pwd)/arbData:/app/arbData -e RPC_URL_WS=ws://host.docker.internal:8545 -e MONGO_URL=mongodb://host.docker.internal:27017 hindsight export -p 0.0001&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;common errors&lt;/h2&gt; &#xA;&lt;h3&gt;error: &#34;too many open files&#34;&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;scan&lt;/code&gt; command can spawn a lot of threads. You may need to increase the open file limit on your system to ensure reliable operation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# check current open file limit&#xA;ulimit -Sn&#xA;&#xA;# raise the limit if needed&#xA;ulimit -n 4000&#xA;&#xA;# be careful, this can cause system-wide issues if you set it too high&#xA;ulimit -n 9001&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can run the &lt;code&gt;scan&lt;/code&gt; command with less parallel operations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# only process two txs at a time&#xA;hindsight scan -n 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Error: Kind: Server selection timeout: No available servers&lt;/h3&gt; &#xA;&lt;p&gt;... &lt;code&gt;Topology: { Type: Unknown, Servers: [ { Address: host.docker.internal:27017, Type: Unknown, Error: Kind: I/O error: failed to lookup address information: Name or service not known, labels: {} } ] }, labels: {}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This means that your system doesn&#39;t support the &lt;code&gt;host.docker.internal&lt;/code&gt; mapping. Try replacing &lt;code&gt;host.docker.internal&lt;/code&gt; with &lt;code&gt;172.17.0.1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Error: IO error: Connection refused (os error 111)&lt;/h3&gt; &#xA;&lt;p&gt;This means that either your ETH node or your DB is not properly connected.&lt;/p&gt; &#xA;&lt;p&gt;Make sure your DB is running with &lt;code&gt;docker ps&lt;/code&gt; (you should see &lt;code&gt;mongo&lt;/code&gt; and &lt;code&gt;mongo-express&lt;/code&gt; running). If they&#39;re not running, try this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker compose down&#xA;docker compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your DB is running, make sure your node is running and accessible from your host. A &lt;a href=&#34;https://ethereum.org/en/developers/docs/apis/json-rpc/#net_version&#34;&gt;simple JSON-RPC request with curl&lt;/a&gt; is the simplest way to test this.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -X POST --data &#39;{&#34;jsonrpc&#34;:&#34;2.0&#34;,&#34;method&#34;:&#34;net_version&#34;,&#34;params&#34;:[],&#34;id&#34;:42}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If that doesn&#39;t work, try double-checking your URLs. Refer back to the &lt;a href=&#34;https://raw.githubusercontent.com/flashbots/hindsight/main/#populate-environment-variables&#34;&gt;environment instructions&lt;/a&gt; if you&#39;re lost.&lt;/p&gt; &#xA;&lt;h2&gt;acknowledgements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mouseless-eth/rusty-sando&#34;&gt;rusty-sando&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flashbots/mev-inspect-rs&#34;&gt;mev-inspect-rs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flashbots/mev-inspect-py&#34;&gt;mev-inspect-py&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;future improvements&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/flashbots/hindsight/issues&#34;&gt;issues&lt;/a&gt; for the most up-to-date status, or to propose an improvement!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; support all the fields in postgres, then make postgres the default&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; replace &lt;a href=&#34;https://raw.githubusercontent.com/flashbots/hindsight/main/src/sim/core.rs#L22-L23&#34;&gt;ForkDB dependency&lt;/a&gt; (possibly with &lt;a href=&#34;https://github.com/primitivefinance/arbiter&#34;&gt;Arbiter&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; add more protocols (currently only support UniV2, UniV3, and Sushiswap)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; maybe: add more complex strategies &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;multi-hop arbs&lt;/li&gt; &#xA;   &lt;li&gt;multi-tx backruns (using mempool txs)&lt;/li&gt; &#xA;   &lt;li&gt;stat arb&lt;/li&gt; &#xA;   &lt;li&gt;so many more...&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>VivekPanyam/carton</title>
    <updated>2023-10-01T01:43:46Z</updated>
    <id>tag:github.com,2023-10-01:/VivekPanyam/carton</id>
    <link href="https://github.com/VivekPanyam/carton" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Run any ML model from any programming language.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Carton&lt;/h1&gt; &#xA;&lt;p&gt;Carton is a library that lets you run any machine learning (ML) model from any programming language*.&lt;/p&gt; &#xA;&lt;p&gt;It wraps existing models and provides a uniform interface for your application to use regardless of the framework the underlying model was implemented in.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://carton.run&#34;&gt;https://carton.run&lt;/a&gt; for an overview of how it works and how to get started.&lt;/p&gt; &#xA;&lt;h1&gt;Getting started&lt;/h1&gt; &#xA;&lt;p&gt;See the quickstart guide at &lt;a href=&#34;https://carton.run/quickstart&#34;&gt;https://carton.run/quickstart&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Model Registry&lt;/h1&gt; &#xA;&lt;p&gt;We have a model registry containing several popular open-source models.&lt;/p&gt; &#xA;&lt;p&gt;Explore the registry at &lt;a href=&#34;https://carton.pub&#34;&gt;https://carton.pub&lt;/a&gt; and check out the &lt;a href=&#34;https://carton.run/quickstart&#34;&gt;quickstart guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Docs&lt;/h1&gt; &#xA;&lt;p&gt;See the documentation at &lt;a href=&#34;https://carton.run/docs&#34;&gt;https://carton.run/docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Getting involved&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VivekPanyam/carton/main/ARCHITECTURE.md&#34;&gt;Architecture Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VivekPanyam/carton/main/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/VivekPanyam/carton/issues&#34;&gt;GitHub Issues&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>