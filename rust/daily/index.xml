<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-06T01:38:25Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>michidk/vscli</title>
    <updated>2023-10-06T01:38:25Z</updated>
    <id>tag:github.com,2023-10-06:/michidk/vscli</id>
    <link href="https://github.com/michidk/vscli" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A CLI tool to launch vscode projects, which supports devcontainers.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;vscli&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://choosealicense.com/licenses/mit/&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/l/vscli&#34; alt=&#34;MIT License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/michidk/vscli/actions&#34;&gt;&lt;img src=&#34;https://github.com/michidk/vscli/workflows/Continuous%20Integration/badge.svg?sanitize=true&#34; alt=&#34;Continuous integration&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/vscli&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/vscli&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/michidk/homebrew-tools/raw/main/Formula/vscli.rb&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/homebrew-available-blue?style=flat&#34; alt=&#34;Homebrew&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://community.chocolatey.org/packages/vscli&#34;&gt;&lt;img src=&#34;https://img.shields.io/chocolatey/v/vscli?include_prereleases&#34; alt=&#34;Chocolatey&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A CLI tool to launch vscode projects, which supports &lt;a href=&#34;https://containers.dev/&#34;&gt;devcontainer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/michidk/vscli/main/.github/images/recent.png&#34; alt=&#34;Screenshot showing the recent UI feature.&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A shorthand for launching vscode projects (to be used like the &lt;code&gt;code&lt;/code&gt; command but with devcontainer support)&lt;/li&gt; &#xA; &lt;li&gt;Detects whether a project is a &lt;a href=&#34;https://containers.dev/&#34;&gt;devcontainer&lt;/a&gt; project, and launches the devcontainer instead&lt;/li&gt; &#xA; &lt;li&gt;Supports the &lt;a href=&#34;https://code.visualstudio.com/insiders/&#34;&gt;insiders&lt;/a&gt; version of vscode&lt;/li&gt; &#xA; &lt;li&gt;Tracks your projects and allows you to open them using a CLI-based UI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/vscli/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/vertical-allrepos/vscli.svg?sanitize=true&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://doc.rust-lang.org/cargo/&#34;&gt;Cargo&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://crates.io/crates/vscli&#34;&gt;vscli using cargo&lt;/a&gt; on Windows or Linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo install vscli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://github.com/michidk/homebrew-tools/raw/main/Formula/vscli.rb&#34;&gt;vscli using homebrew&lt;/a&gt; on Linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install michidk/tools/vscli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://chocolatey.org/&#34;&gt;Chocolatey&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://community.chocolatey.org/packages/vscli&#34;&gt;vscli using Chocolatey&lt;/a&gt; on Windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;choco install vscli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Additional steps&lt;/h3&gt; &#xA;&lt;p&gt;You can set a shorthand alias for &lt;code&gt;vscli&lt;/code&gt; in your shell&#39;s configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;alias vs=&#34;vscli --verbosity error&#34;&#xA;alias vsr=&#34;vscli recent&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Commandline&lt;/h3&gt; &#xA;&lt;p&gt;After installation, the &lt;code&gt;vscli&lt;/code&gt; command will be available:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: vscli [OPTIONS] [PATH] [ARGS]... [COMMAND]&#xA;&#xA;Commands:&#xA;  recent  Opens an interactive list of recently used workspaces&#xA;  help    Print this message or the help of the given subcommand(s)&#xA;&#xA;Arguments:&#xA;  [PATH]&#xA;          The path of the vscode project to open [default: .]&#xA;&#xA;  [ARGS]...&#xA;          Additional arguments to pass to vscode&#xA;&#xA;Options:&#xA;  -b, --behavior &amp;lt;BEHAVIOR&amp;gt;&#xA;          Launch behavior [default: detect]&#xA;&#xA;          Possible values:&#xA;          - detect:          Use devcontainer if it was detected&#xA;          - force-container: Force open with devcontainer, even if no config was found&#xA;          - force-classic:   Ignore devcontainer&#xA;&#xA;  -i, --insiders&#xA;          Whether to launch the insider&#39;s version of vscode&#xA;&#xA;  -d, --dry-run&#xA;          Whether to launch in dry-run mode (not actually open vscode)&#xA;&#xA;  -v, --verbosity &amp;lt;VERBOSITY&amp;gt;&#xA;          The verbosity of the output [default: info]&#xA;&#xA;  -h, --help&#xA;          Print help (see a summary with &#39;-h&#39;)&#xA;&#xA;  -V, --version&#xA;          Print version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;h4&gt;Launching a project&lt;/h4&gt; &#xA;&lt;p&gt;You can launch a project using the default behavior:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;vscli                               # open vscode in the current directory&#xA;vscli .                             # open vscode in the current directory&#xA;vscli /path/to/project              # open vscode in the specified directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default behavior tries to detect whether the project is a &lt;a href=&#34;https://containers.dev/&#34;&gt;devcontainer&lt;/a&gt; project. If it is, it will launch the devcontainer instead - if not it will launch vscode normally.&lt;/p&gt; &#xA;&lt;p&gt;You can change the launch behavior using the &lt;code&gt;--behavior&lt;/code&gt; flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;vscli --behavior force-container . # force open vscode devcontainer (even if vscli did not detect a devcontainer)&#xA;vscli --behavior force-classic .   # force open vscode without a devcontainer (even if vscli did detect a devcontainer)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can launch the insiders version of vscode using the &lt;code&gt;--insiders&lt;/code&gt; flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;vscli --insiders .                  # open vscode insiders in the current directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additional arguments can be passed to the &lt;code&gt;code&lt;/code&gt; executable, by specifying them after &lt;code&gt;--&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;vscli . -- --disable-gpu            # open vscode in the current directory without GPU hardware acceleration&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read more about the &lt;code&gt;code&lt;/code&gt; flags, by executing &lt;code&gt;code --help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;CLI UI&lt;/h4&gt; &#xA;&lt;p&gt;You can open a CLI-based user interface to display a list of recently opened projects using the &lt;code&gt;recent&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;vscli recent                        # open the CLI-based UI to select a recently opened project to open&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the arrow keys to navigate the list, and press &lt;code&gt;enter&lt;/code&gt; or &lt;code&gt;o&lt;/code&gt; to open the selected project. Use &lt;code&gt;q&lt;/code&gt; to quit the UI. You can delete entries by highlighting them and pressing &lt;code&gt;x&lt;/code&gt; or the &lt;code&gt;delete&lt;/code&gt; key.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>blaze-init/blaze</title>
    <updated>2023-10-06T01:38:25Z</updated>
    <id>tag:github.com,2023-10-06:/blaze-init/blaze</id>
    <link href="https://github.com/blaze-init/blaze" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Blazing-fast query execution engine speaks Apache Spark language and has Arrow-DataFusion at its core.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;BLAZE&lt;/h1&gt; &#xA;&lt;p&gt;The Blaze accelerator for Apache Spark leverages native vectorized execution to accelerate query processing. It combines the power of the &lt;a href=&#34;https://arrow.apache.org/datafusion/&#34;&gt;Apache Arrow-DataFusion&lt;/a&gt; library and the scale of the Spark distributed computing framework.&lt;/p&gt; &#xA;&lt;p&gt;Blaze takes a fully optimized physical plan from Spark, mapping it into DataFusion&#39;s execution plan, and performs native plan computation in Spark executors.&lt;/p&gt; &#xA;&lt;p&gt;Blaze is composed of the following high-level components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Spark Extension&lt;/strong&gt;: hooks the whole accelerator into Spark execution lifetime.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Spark Shims&lt;/strong&gt;: specialized codes for different versions of spark.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Native Engine&lt;/strong&gt;: implements the native engine in rust, including: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;ExecutionPlan protobuf specification&lt;/li&gt; &#xA;   &lt;li&gt;JNI gateway&lt;/li&gt; &#xA;   &lt;li&gt;Customized operators, expressions, functions&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Based on the inherent well-defined extensibility of DataFusion, Blaze can be easily extended to support:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Various object stores.&lt;/li&gt; &#xA; &lt;li&gt;Operators.&lt;/li&gt; &#xA; &lt;li&gt;Simple and Aggregate functions.&lt;/li&gt; &#xA; &lt;li&gt;File formats.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We encourage you to &lt;a href=&#34;https://github.com/apache/arrow-datafusion&#34;&gt;extend DataFusion&lt;/a&gt; capability directly and add the supports in Blaze with simple modifications in plan-serde and extension translation.&lt;/p&gt; &#xA;&lt;h2&gt;Build from source&lt;/h2&gt; &#xA;&lt;p&gt;To build Blaze, please follow the steps below:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Rust&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The native execution lib is written in Rust. So you&#39;re required to install Rust (nightly) first for compilation. We recommend you to use &lt;a href=&#34;https://rustup.rs/&#34;&gt;rustup&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Install JDK+Maven&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Blaze has been well tested on jdk8 and maven3.5, should work fine with higher versions.&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Check out the source code.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone git@github.com:blaze-init/blaze.git&#xA;cd blaze&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Build the project.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;em&gt;Specify shims package of which spark version that you would like to run on.&lt;/em&gt; &lt;em&gt;You could either build Blaze in dev mode for debugging or in release mode to unlock the full potential of Blaze.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;SHIM=spark333 # or spark303&#xA;MODE=release # or dev&#xA;mvn package -P&#34;${SHIM}&#34; -P&#34;${MODE}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After the build is finished, a fat Jar package that contains all the dependencies will be generated in the &lt;code&gt;target&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;Build with docker&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;You can use the following command to build a centos-7 compatible release:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;SHIM=spark333 MODE=release ./release-docker.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run Spark Job with Blaze Accelerator&lt;/h2&gt; &#xA;&lt;p&gt;This section describes how to submit and configure a Spark Job with Blaze support.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;move blaze jar package to spark client classpath (normally &lt;code&gt;spark-xx.xx.xx/jars/&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;add the follow confs to spark configuration in &lt;code&gt;spark-xx.xx.xx/conf/spark-default.conf&lt;/code&gt;:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;spark.sql.extensions org.apache.spark.sql.blaze.BlazeSparkSessionExtension&#xA;spark.shuffle.manager org.apache.spark.sql.execution.blaze.shuffle.BlazeShuffleManager&#xA;&#xA;# other blaze confs defined in spark-extension/src/main/java/org/apache/spark/sql/blaze/BlazeConf.java&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;submit a query with spark-sql, or other tools like spark-thriftserver:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;spark-sql -f tpcds/q01.sql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://raw.githubusercontent.com/blaze-init/blaze/master/benchmark-results/20230925.md&#34;&gt;Benchmark Results&lt;/a&gt; with the latest date for the performance comparison with vanilla Spark on TPC-DS 1TB dataset. The benchmark result shows that Blaze saved ~40% query time and ~45% cluster resources in average. ~5x performance achieved for the best case (q06). Stay tuned and join us for more upcoming thrilling numbers.&lt;/p&gt; &#xA;&lt;p&gt;Query time: &lt;img src=&#34;https://raw.githubusercontent.com/blaze-init/blaze/master/benchmark-results/blaze-query-time-comparison-20230925.png&#34; alt=&#34;20230925-query-time&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Cluster resources: &lt;img src=&#34;https://raw.githubusercontent.com/blaze-init/blaze/master/benchmark-results/blaze-executor-time-comparison-20230925.png&#34; alt=&#34;20230925-resources&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;We also encourage you to benchmark Blaze and share the results with us. 🤗&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;re using &lt;a href=&#34;https://github.com/blaze-init/blaze/discussions&#34;&gt;Discussions&lt;/a&gt; to connect with other members of our community. We hope that you:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ask questions you&#39;re wondering about.&lt;/li&gt; &#xA; &lt;li&gt;Share ideas.&lt;/li&gt; &#xA; &lt;li&gt;Engage with other community members.&lt;/li&gt; &#xA; &lt;li&gt;Welcome others and are open-minded. Remember that this is a community we build together 💪 .&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Blaze is licensed under the Apache 2.0 License. A copy of the license &lt;a href=&#34;https://raw.githubusercontent.com/blaze-init/blaze/master/LICENSE.txt&#34;&gt;can be found here.&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>