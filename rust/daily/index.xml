<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-11-21T01:37:16Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>trynova/nova</title>
    <updated>2024-11-21T01:37:16Z</updated>
    <id>tag:github.com,2024-11-21:/trynova/nova</id>
    <link href="https://github.com/trynova/nova" rel="alternate"></link>
    <summary type="html">&lt;p&gt;JS engine lolz&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nova - Your favorite javascript and wasm engine&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;span&gt;⚠&lt;/span&gt; This project is a Work In Progress, and is very far from being suitable for use &lt;span&gt;⚠&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Nova is a &lt;a href=&#34;https://tc39.es/ecma262&#34;&gt;JavaScript&lt;/a&gt; and &lt;a href=&#34;https://webassembly.org&#34;&gt;WebAssembly&lt;/a&gt; engine written in Rust.&lt;/p&gt; &#xA;&lt;p&gt;The engine is exposed as a library with an API for implementation in Rust projects which themselves must serve as a runtime for JavaScript code. The execution model is currently greatly inspired by &lt;a href=&#34;https://codeberg.org/kiesel-js/kiesel&#34;&gt;Kiesel&lt;/a&gt; and &lt;a href=&#34;https://github.com/SerenityOS/serenity&#34;&gt;SerenityOS&#39;s LibJS&lt;/a&gt;. See the code for more details.&lt;/p&gt; &#xA;&lt;p&gt;The core of our team is on our &lt;a href=&#34;https://discord.gg/bwY4TRB8J7&#34;&gt;Discord server&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Talks&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=WKGo1k47eYQ&#34;&gt;Nova Engine - Building a DOD JS Engine in Rust @ Finland Rust-lang meetup 1/2024&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Slides: &lt;a href=&#34;https://docs.google.com/presentation/d/1PRinuW2Zbw9c-FGArON3YHiCUP22qIeTpYvDRNbP5vc/edit?usp=drive_link&#34;&gt;Google Drive&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Presented at the Finland Rust-lang group&#39;s January meetup, 2024. Focus on how JavaScript engines work in general, and what sort of design choices Nova makes in this context.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=5olgPdqKZ84&#34;&gt;Nova JavaScript Engine - Exploring a Data-Oriented Engine Design @ Web Engines Hackfest 2024&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Slides: &lt;a href=&#34;https://docs.google.com/presentation/d/1YlHr67ZYCyMp_6uMMvCWOJNOUhleUtxOPlC0Gz8Bg7o/edit?usp=drive_link&#34;&gt;Google Drive&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Presented at the Web Engines Hackfest, 2024. Focus on the details of why a data-oriented engine design is interesting, what sort of benefits it gives and what sort of costs it has. Explores the engine at a slightly deeper level.&lt;/p&gt; &#xA;&lt;p&gt;The talk was revisited at the TC39 June meeting, 2024. No video is available, but the slightly modified slides are.&lt;/p&gt; &#xA;&lt;p&gt;TC39 slides: &lt;a href=&#34;https://docs.google.com/presentation/d/1Pv6Yn2sUWFIvlLwX9ViCjuyflsVdpEPQBbVlLJnFubM/edit?usp=drive_link&#34;&gt;Google Drive&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trynova/nova/main/ARCHITECTURE.md&#34;&gt;Architecture&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The architecture of the engine follows the ECMAScript specification in spirit, but uses data-oriented design for the actual implementation. Records that are present in the specification are likely present in the Nova engine as well and they&#39;re likely found in an &#34;equivalent&#34; file / folder path as the specification defines them in.&lt;/p&gt; &#xA;&lt;p&gt;Where the engine differs from the specification is that most ECMAScript types and specification Record types are defined &#34;twice&#34;: They have one &#34;heap data&#34; definition, and another &#34;index&#34; definition. The heap data definition generally corresponds to the specification&#39;s definition, in some degree at least. The index definition is either a wrapper around &lt;code&gt;u32&lt;/code&gt; or a &lt;code&gt;NonZeroU32&lt;/code&gt;. Most spec defined methods are defined on the index definitions (this avoids issues with borrowing).&lt;/p&gt; &#xA;&lt;p&gt;The only case when direct &#34;Record type A contains Record type B&#34; ownership is used is when there can be only one referrer to the Record type B.&lt;/p&gt; &#xA;&lt;h3&gt;Heap structure - Data-oriented design&lt;/h3&gt; &#xA;&lt;p&gt;Reading the above, you might be wondering why the double-definitions and all that. The ultimate reason is two-fold:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;It is an interesting design.&lt;/li&gt; &#xA; &lt;li&gt;It helps the computer make frequently used things fast while allowing the infrequently used things to become slow.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Data-oriented design is all the rage on the Internet because of its cache-friendliness. This engine is one more attempt at seeing what sort of real-world benefits one might gain with this sort of architecture.&lt;/p&gt; &#xA;&lt;p&gt;If you find yourself interested in where the idea spawns from and why, take a look at &lt;a href=&#34;https://raw.githubusercontent.com/trynova/nova/main/nova_vm/src/heap/README.md&#34;&gt;the Heap README.md&lt;/a&gt;. It gives a more thorough walkthrough of the Heap structure and what the idea there is.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trynova/nova/main/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;So you wish to contribute, eh? You&#39;re very welcome to do so! Please take a look at &lt;a href=&#34;https://raw.githubusercontent.com/trynova/nova/main/CONTRIBUTING.md&#34;&gt;the CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>