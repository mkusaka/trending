<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-08-20T01:36:31Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bahdotsh/wrkflw</title>
    <updated>2025-08-20T01:36:31Z</updated>
    <id>tag:github.com,2025-08-20:/bahdotsh/wrkflw</id>
    <link href="https://github.com/bahdotsh/wrkflw" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Validate and Run GitHub Actions locally.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WRKFLW&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crates.io/crates/wrkflw&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/wrkflw&#34; alt=&#34;Crates.io&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/rust-1.67%2B-orange&#34; alt=&#34;Rust Version&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/bahdotsh/wrkflw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/l/wrkflw&#34; alt=&#34;License&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/bahdotsh/wrkflw/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/bahdotsh/wrkflw/build.yml?branch=main&#34; alt=&#34;Build Status&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/wrkflw&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/d/wrkflw&#34; alt=&#34;Downloads&#34; /&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;WRKFLW is a powerful command-line tool for validating and executing GitHub Actions workflows locally, without requiring a full GitHub environment. It helps developers test their workflows directly on their machines before pushing changes to GitHub.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bahdotsh/wrkflw/main/demo.gif&#34; alt=&#34;WRKFLW Demo&#34; /&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;TUI Interface&lt;/strong&gt;: A full-featured terminal user interface for managing and monitoring workflow executions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Validate Workflow Files&lt;/strong&gt;: Check for syntax errors and common mistakes in GitHub Actions workflow files with proper exit codes for CI/CD integration&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Execute Workflows Locally&lt;/strong&gt;: Run workflows directly on your machine using Docker or Podman containers&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multiple Container Runtimes&lt;/strong&gt;: Support for Docker, Podman, and emulation mode for maximum flexibility&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Job Dependency Resolution&lt;/strong&gt;: Automatically determines the correct execution order based on job dependencies&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Container Integration&lt;/strong&gt;: Execute workflow steps in isolated containers with proper environment setup&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;GitHub Context&lt;/strong&gt;: Provides GitHub-like environment variables and workflow commands&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Rootless Execution&lt;/strong&gt;: Podman support enables running containers without root privileges&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Action Support&lt;/strong&gt;: Supports various GitHub Actions types: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Docker container actions&lt;/li&gt; &#xA;   &lt;li&gt;JavaScript actions&lt;/li&gt; &#xA;   &lt;li&gt;Composite actions&lt;/li&gt; &#xA;   &lt;li&gt;Local actions&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Special Action Handling&lt;/strong&gt;: Native handling for commonly used actions like &lt;code&gt;actions/checkout&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reusable Workflows (Caller Jobs)&lt;/strong&gt;: Execute jobs that call reusable workflows via &lt;code&gt;jobs.&amp;lt;id&amp;gt;.uses&lt;/code&gt; (local path or &lt;code&gt;owner/repo/path@ref&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Output Capturing&lt;/strong&gt;: View logs, step outputs, and execution details&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Parallel Job Execution&lt;/strong&gt;: Runs independent jobs in parallel for faster workflow execution&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Trigger Workflows Remotely&lt;/strong&gt;: Manually trigger workflow runs on GitHub or GitLab&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;h3&gt;Container Runtime (Optional)&lt;/h3&gt; &#xA;&lt;p&gt;WRKFLW supports multiple container runtimes for isolated execution:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Docker&lt;/strong&gt;: The default container runtime. Install from &lt;a href=&#34;https://docker.com&#34;&gt;docker.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Podman&lt;/strong&gt;: A rootless container runtime. Perfect for environments where Docker isn&#39;t available or permitted. Install from &lt;a href=&#34;https://podman.io&#34;&gt;podman.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Emulation&lt;/strong&gt;: No container runtime required. Executes commands directly on the host system&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Podman Support&lt;/h3&gt; &#xA;&lt;p&gt;Podman is particularly useful in environments where:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docker installation is not permitted by your organization&lt;/li&gt; &#xA; &lt;li&gt;Root privileges are not available for Docker daemon&lt;/li&gt; &#xA; &lt;li&gt;You prefer rootless container execution&lt;/li&gt; &#xA; &lt;li&gt;Enhanced security through daemonless architecture is desired&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To use Podman:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install Podman (varies by OS)&#xA;# On macOS with Homebrew:&#xA;brew install podman&#xA;&#xA;# On Ubuntu/Debian:&#xA;sudo apt-get install podman&#xA;&#xA;# Initialize Podman machine (macOS/Windows)&#xA;podman machine init&#xA;podman machine start&#xA;&#xA;# Use with wrkflw&#xA;wrkflw run --runtime podman .github/workflows/ci.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The recommended way to install &lt;code&gt;wrkflw&lt;/code&gt; is using Rust&#39;s package manager, Cargo:&lt;/p&gt; &#xA;&lt;h3&gt;Using Cargo Install (Recommended)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo install wrkflw&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;From Source&lt;/h3&gt; &#xA;&lt;p&gt;Clone the repository and build using Cargo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/bahdotsh/wrkflw.git&#xA;cd wrkflw&#xA;cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The compiled binary will be available at &lt;code&gt;target/release/wrkflw&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The simplest way to use WRKFLW is to navigate to your project&#39;s root directory and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wrkflw&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will automatically detect and load all workflows from &lt;code&gt;.github/workflows&lt;/code&gt; directory into the TUI interface.&lt;/p&gt; &#xA;&lt;p&gt;WRKFLW also provides three main command modes:&lt;/p&gt; &#xA;&lt;h3&gt;Validating Workflow Files&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Validate all workflow files in the default location (.github/workflows)&#xA;wrkflw validate&#xA;&#xA;# Validate a specific workflow file&#xA;wrkflw validate path/to/workflow.yml&#xA;&#xA;# Validate workflows in a specific directory&#xA;wrkflw validate path/to/workflows&#xA;&#xA;# Validate multiple files and/or directories (GitHub and GitLab are auto-detected)&#xA;wrkflw validate path/to/flow-1.yml path/to/flow-2.yml path/to/workflows&#xA;&#xA;# Force GitLab parsing for all provided paths&#xA;wrkflw validate --gitlab .gitlab-ci.yml other.gitlab-ci.yml&#xA;&#xA;# Validate with verbose output&#xA;wrkflw validate --verbose path/to/workflow.yml&#xA;&#xA;# Validate GitLab CI pipelines&#xA;wrkflw validate .gitlab-ci.yml --gitlab&#xA;&#xA;# Disable exit codes for custom error handling (default: enabled)&#xA;wrkflw validate --no-exit-code path/to/workflow.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Exit Codes for CI/CD Integration&lt;/h4&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;wrkflw validate&lt;/code&gt; sets the exit code to &lt;code&gt;1&lt;/code&gt; when validation fails, making it perfect for CI/CD pipelines and scripts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# In CI/CD scripts - validation failure will cause the script to exit&#xA;if ! wrkflw validate; then&#xA;    echo &#34;❌ Workflow validation failed!&#34;&#xA;    exit 1&#xA;fi&#xA;echo &#34;✅ All workflows are valid!&#34;&#xA;&#xA;# For custom error handling, disable exit codes&#xA;wrkflw validate --no-exit-code&#xA;if [ $? -eq 0 ]; then&#xA;    echo &#34;Validation completed (check output for details)&#34;&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Exit Code Behavior:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;0&lt;/code&gt;: All validations passed successfully&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;1&lt;/code&gt;: One or more validation failures detected&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;2&lt;/code&gt;: Command usage error (invalid arguments, file not found, etc.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Running Workflows in CLI Mode&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Run a workflow with Docker (default)&#xA;wrkflw run .github/workflows/ci.yml&#xA;&#xA;# Run a workflow with Podman instead of Docker&#xA;wrkflw run --runtime podman .github/workflows/ci.yml&#xA;&#xA;# Run a workflow in emulation mode (without containers)&#xA;wrkflw run --runtime emulation .github/workflows/ci.yml&#xA;&#xA;# Run with verbose output&#xA;wrkflw run --verbose .github/workflows/ci.yml&#xA;&#xA;# Preserve failed containers for debugging&#xA;wrkflw run --preserve-containers-on-failure .github/workflows/ci.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using the TUI Interface&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Open TUI with workflows from the default directory&#xA;wrkflw tui&#xA;&#xA;# Open TUI with a specific directory of workflows&#xA;wrkflw tui path/to/workflows&#xA;&#xA;# Open TUI with a specific workflow pre-selected&#xA;wrkflw tui path/to/workflow.yml&#xA;&#xA;# Open TUI with Podman runtime&#xA;wrkflw tui --runtime podman&#xA;&#xA;# Open TUI in emulation mode&#xA;wrkflw tui --runtime emulation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Triggering Workflows Remotely&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Trigger a workflow remotely on GitHub&#xA;wrkflw trigger workflow-name --branch main --input key1=value1 --input key2=value2&#xA;&#xA;# Trigger a pipeline remotely on GitLab&#xA;wrkflw trigger-gitlab --branch main --variable key1=value1 --variable key2=value2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;TUI Controls&lt;/h2&gt; &#xA;&lt;p&gt;The terminal user interface provides an interactive way to manage workflows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tab / 1-4&lt;/strong&gt;: Switch between tabs (Workflows, Execution, Logs, Help)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Up/Down or j/k&lt;/strong&gt;: Navigate lists&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Space&lt;/strong&gt;: Toggle workflow selection&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Enter&lt;/strong&gt;: Run selected workflow / View job details&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;r&lt;/strong&gt;: Run all selected workflows&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;a&lt;/strong&gt;: Select all workflows&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;n&lt;/strong&gt;: Deselect all workflows&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt;: Cycle through runtime modes (Docker → Podman → Emulation)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;v&lt;/strong&gt;: Toggle between Execution and Validation mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Esc&lt;/strong&gt;: Back / Exit detailed view&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;q&lt;/strong&gt;: Quit application&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Validating a Workflow&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ wrkflw validate .github/workflows/rust.yml&#xA;Validating GitHub workflow file: .github/workflows/rust.yml... Validating 1 workflow file(s)...&#xA;✅ Valid: .github/workflows/rust.yml&#xA;&#xA;Summary: 1 valid, 0 invalid&#xA;&#xA;$ echo $?&#xA;0&#xA;&#xA;# Example with validation failure&#xA;$ wrkflw validate .github/workflows/invalid.yml&#xA;Validating GitHub workflow file: .github/workflows/invalid.yml... Validating 1 workflow file(s)...&#xA;❌ Invalid: .github/workflows/invalid.yml&#xA;   1. Job &#39;test&#39; is missing &#39;runs-on&#39; field&#xA;   2. Job &#39;test&#39; is missing &#39;steps&#39; section&#xA;&#xA;Summary: 0 valid, 1 invalid&#xA;&#xA;$ echo $?&#xA;1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running a Workflow&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ wrkflw run .github/workflows/rust.yml&#xA;&#xA;Executing workflow: .github/workflows/rust.yml&#xA;============================================================&#xA;Runtime: Docker&#xA;------------------------------------------------------------&#xA;&#xA;✅ Job succeeded: build&#xA;&#xA;------------------------------------------------------------&#xA;  ✅ Checkout code&#xA;  ✅ Set up Rust&#xA;  ✅ Build&#xA;  ✅ Run tests&#xA;&#xA;✅ Workflow completed successfully!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Quick TUI Startup&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Navigate to project root and run wrkflw&#xA;$ cd my-project&#xA;$ wrkflw&#xA;&#xA;# This will automatically load .github/workflows files into the TUI&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;System Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Rust 1.67 or later&lt;/li&gt; &#xA; &lt;li&gt;Container Runtime (optional, for container-based execution): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Docker&lt;/strong&gt;: Traditional container runtime&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Podman&lt;/strong&gt;: Rootless alternative to Docker&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;None&lt;/strong&gt;: Emulation mode runs workflows using local system tools&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How It Works&lt;/h2&gt; &#xA;&lt;p&gt;WRKFLW parses your GitHub Actions workflow files and executes each job and step in the correct order. For container modes (Docker/Podman), it creates containers that closely match GitHub&#39;s runner environments. The workflow execution process:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Parsing&lt;/strong&gt;: Reads and validates the workflow YAML structure&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dependency Resolution&lt;/strong&gt;: Creates an execution plan based on job dependencies&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Environment Setup&lt;/strong&gt;: Prepares GitHub-like environment variables and context&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Execution&lt;/strong&gt;: Runs each job and step either in containers (Docker/Podman) or through local emulation&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Monitoring&lt;/strong&gt;: Tracks progress and captures outputs in the TUI or command line&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Advanced Features&lt;/h2&gt; &#xA;&lt;h3&gt;GitHub Environment Files Support&lt;/h3&gt; &#xA;&lt;p&gt;WRKFLW supports GitHub&#39;s environment files and special commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;GITHUB_OUTPUT&lt;/code&gt;: For storing step outputs (&lt;code&gt;echo &#34;result=value&#34; &amp;gt;&amp;gt; $GITHUB_OUTPUT&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GITHUB_ENV&lt;/code&gt;: For setting environment variables (&lt;code&gt;echo &#34;VAR=value&#34; &amp;gt;&amp;gt; $GITHUB_ENV&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GITHUB_PATH&lt;/code&gt;: For modifying the PATH (&lt;code&gt;echo &#34;/path/to/dir&#34; &amp;gt;&amp;gt; $GITHUB_PATH&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GITHUB_STEP_SUMMARY&lt;/code&gt;: For creating step summaries (&lt;code&gt;echo &#34;# Summary&#34; &amp;gt;&amp;gt; $GITHUB_STEP_SUMMARY&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Composite Actions&lt;/h3&gt; &#xA;&lt;p&gt;WRKFLW supports composite actions, which are actions made up of multiple steps. This includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Local composite actions referenced with &lt;code&gt;./path/to/action&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Remote composite actions from GitHub repositories&lt;/li&gt; &#xA; &lt;li&gt;Nested composite actions (composite actions that use other actions)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Container Cleanup&lt;/h3&gt; &#xA;&lt;p&gt;WRKFLW automatically cleans up any containers created during workflow execution (Docker/Podman), even if the process is interrupted with Ctrl+C.&lt;/p&gt; &#xA;&lt;p&gt;For debugging failed workflows, you can preserve containers that fail by using the &lt;code&gt;--preserve-containers-on-failure&lt;/code&gt; flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Preserve failed containers for debugging&#xA;wrkflw run --preserve-containers-on-failure .github/workflows/build.yml&#xA;&#xA;# Also available in TUI mode&#xA;wrkflw tui --preserve-containers-on-failure&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When a container fails with this flag enabled, WRKFLW will:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Keep the failed container running instead of removing it&lt;/li&gt; &#xA; &lt;li&gt;Log the container ID and provide inspection instructions&lt;/li&gt; &#xA; &lt;li&gt;Show a message like: &lt;code&gt;Preserving container abc123 for debugging (exit code: 1). Use &#39;docker exec -it abc123 bash&#39; to inspect.&lt;/code&gt; (Docker)&lt;/li&gt; &#xA; &lt;li&gt;Or: &lt;code&gt;Preserving container abc123 for debugging (exit code: 1). Use &#39;podman exec -it abc123 bash&#39; to inspect.&lt;/code&gt; (Podman)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This allows you to inspect the exact state of the container when the failure occurred, examine files, check environment variables, and debug issues more effectively.&lt;/p&gt; &#xA;&lt;h3&gt;Podman-Specific Features&lt;/h3&gt; &#xA;&lt;p&gt;When using Podman as the container runtime, you get additional benefits:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Rootless Operation:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Run workflows without root privileges&#xA;wrkflw run --runtime podman .github/workflows/ci.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Enhanced Security:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Daemonless architecture reduces attack surface&lt;/li&gt; &#xA; &lt;li&gt;User namespaces provide additional isolation&lt;/li&gt; &#xA; &lt;li&gt;No privileged daemon required&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Container Inspection:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# List preserved containers&#xA;podman ps -a --filter &#34;name=wrkflw-&#34;&#xA;&#xA;# Inspect a preserved container&#39;s filesystem (without executing)&#xA;podman mount &amp;lt;container-id&amp;gt;&#xA;&#xA;# Or run a new container with the same volumes&#xA;podman run --rm -it --volumes-from &amp;lt;failed-container&amp;gt; ubuntu:20.04 bash&#xA;&#xA;# Clean up all wrkflw containers&#xA;podman ps -a --filter &#34;name=wrkflw-&#34; --format &#34;{{.Names}}&#34; | xargs podman rm -f&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Compatibility:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Drop-in replacement for Docker workflows&lt;/li&gt; &#xA; &lt;li&gt;Same CLI options and behavior&lt;/li&gt; &#xA; &lt;li&gt;Identical container execution environment&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;h3&gt;Supported Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;✅ Basic workflow syntax and validation (all YAML syntax checks, required fields, and structure) with proper exit codes for CI/CD integration&lt;/li&gt; &#xA; &lt;li&gt;✅ Job dependency resolution and parallel execution (all jobs with correct &#39;needs&#39; relationships are executed in the right order, and independent jobs run in parallel)&lt;/li&gt; &#xA; &lt;li&gt;✅ Matrix builds (supported for reasonable matrix sizes; very large matrices may be slow or resource-intensive)&lt;/li&gt; &#xA; &lt;li&gt;✅ Environment variables and GitHub context (all standard GitHub Actions environment variables and context objects are emulated)&lt;/li&gt; &#xA; &lt;li&gt;✅ Container actions (all actions that use containers are supported in Docker and Podman modes)&lt;/li&gt; &#xA; &lt;li&gt;✅ JavaScript actions (all actions that use JavaScript are supported)&lt;/li&gt; &#xA; &lt;li&gt;✅ Composite actions (all composite actions, including nested and local composite actions, are supported)&lt;/li&gt; &#xA; &lt;li&gt;✅ Local actions (actions referenced with local paths are supported)&lt;/li&gt; &#xA; &lt;li&gt;✅ Special handling for common actions (e.g., &lt;code&gt;actions/checkout&lt;/code&gt; is natively supported)&lt;/li&gt; &#xA; &lt;li&gt;✅ Reusable workflows (caller): Jobs that use &lt;code&gt;jobs.&amp;lt;id&amp;gt;.uses&lt;/code&gt; to call local or remote workflows are executed; inputs and secrets are propagated to the called workflow&lt;/li&gt; &#xA; &lt;li&gt;✅ Workflow triggering via &lt;code&gt;workflow_dispatch&lt;/code&gt; (manual triggering of workflows is supported)&lt;/li&gt; &#xA; &lt;li&gt;✅ GitLab pipeline triggering (manual triggering of GitLab pipelines is supported)&lt;/li&gt; &#xA; &lt;li&gt;✅ Environment files (&lt;code&gt;GITHUB_OUTPUT&lt;/code&gt;, &lt;code&gt;GITHUB_ENV&lt;/code&gt;, &lt;code&gt;GITHUB_PATH&lt;/code&gt;, &lt;code&gt;GITHUB_STEP_SUMMARY&lt;/code&gt; are fully supported)&lt;/li&gt; &#xA; &lt;li&gt;✅ TUI interface for workflow management and monitoring&lt;/li&gt; &#xA; &lt;li&gt;✅ CLI interface for validation, execution, and remote triggering&lt;/li&gt; &#xA; &lt;li&gt;✅ Output capturing (logs, step outputs, and execution details are available in both TUI and CLI)&lt;/li&gt; &#xA; &lt;li&gt;✅ Container cleanup (all containers created by wrkflw are automatically cleaned up, even on interruption)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Limited or Unsupported Features (Explicit List)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;❌ GitHub secrets and permissions: Only basic environment variables are supported. GitHub&#39;s encrypted secrets and fine-grained permissions are NOT available.&lt;/li&gt; &#xA; &lt;li&gt;❌ GitHub Actions cache: Caching functionality (e.g., &lt;code&gt;actions/cache&lt;/code&gt;) is NOT supported in emulation mode and only partially supported in Docker and Podman modes (no persistent cache between runs).&lt;/li&gt; &#xA; &lt;li&gt;❌ GitHub API integrations: Only basic workflow triggering is supported. Features like workflow status reporting, artifact upload/download, and API-based job control are NOT available.&lt;/li&gt; &#xA; &lt;li&gt;❌ GitHub-specific environment variables: Some advanced or dynamic environment variables (e.g., those set by GitHub runners or by the GitHub API) are emulated with static or best-effort values, but not all are fully functional.&lt;/li&gt; &#xA; &lt;li&gt;❌ Large/complex matrix builds: Very large matrices (hundreds or thousands of job combinations) may not be practical due to performance and resource limits.&lt;/li&gt; &#xA; &lt;li&gt;❌ Network-isolated actions: Actions that require strict network isolation or custom network configuration may not work out-of-the-box and may require manual container runtime configuration.&lt;/li&gt; &#xA; &lt;li&gt;❌ Some event triggers: Only &lt;code&gt;workflow_dispatch&lt;/code&gt; (manual trigger) is fully supported. Other triggers (e.g., &lt;code&gt;push&lt;/code&gt;, &lt;code&gt;pull_request&lt;/code&gt;, &lt;code&gt;schedule&lt;/code&gt;, &lt;code&gt;release&lt;/code&gt;, etc.) are NOT supported.&lt;/li&gt; &#xA; &lt;li&gt;❌ GitHub runner-specific features: Features that depend on the exact GitHub-hosted runner environment (e.g., pre-installed tools, runner labels, or hardware) are NOT guaranteed to match. Only a best-effort emulation is provided.&lt;/li&gt; &#xA; &lt;li&gt;❌ Windows and macOS runners: Only Linux-based runners are fully supported. Windows and macOS jobs are NOT supported.&lt;/li&gt; &#xA; &lt;li&gt;❌ Service containers: Service containers (e.g., databases defined in &lt;code&gt;services:&lt;/code&gt;) are only supported in Docker and Podman modes. In emulation mode, they are NOT supported.&lt;/li&gt; &#xA; &lt;li&gt;❌ Artifacts: Uploading and downloading artifacts between jobs/steps is NOT supported.&lt;/li&gt; &#xA; &lt;li&gt;❌ Job/step timeouts: Custom timeouts for jobs and steps are NOT enforced.&lt;/li&gt; &#xA; &lt;li&gt;❌ Job/step concurrency and cancellation: Features like &lt;code&gt;concurrency&lt;/code&gt; and job cancellation are NOT supported.&lt;/li&gt; &#xA; &lt;li&gt;❌ Expressions and advanced YAML features: Most common expressions are supported, but some advanced or edge-case expressions may not be fully implemented.&lt;/li&gt; &#xA; &lt;li&gt;⚠️ Reusable workflows (limits): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Outputs from called workflows are not propagated back to the caller (&lt;code&gt;needs.&amp;lt;id&amp;gt;.outputs.*&lt;/code&gt; not supported)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;secrets: inherit&lt;/code&gt; is not special-cased; provide a mapping to pass secrets&lt;/li&gt; &#xA;   &lt;li&gt;Remote calls clone public repos via HTTPS; private repos require preconfigured access (not yet implemented)&lt;/li&gt; &#xA;   &lt;li&gt;Deeply nested reusable calls work but lack cycle detection beyond regular job dependency checks&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reusable Workflows&lt;/h2&gt; &#xA;&lt;p&gt;WRKFLW supports executing reusable workflow caller jobs.&lt;/p&gt; &#xA;&lt;h3&gt;Syntax&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;jobs:&#xA;  call-local:&#xA;    uses: ./.github/workflows/shared.yml&#xA;&#xA;  call-remote:&#xA;    uses: my-org/my-repo/.github/workflows/shared.yml@v1&#xA;    with:&#xA;      foo: bar&#xA;    secrets:&#xA;      token: ${{ secrets.MY_TOKEN }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Behavior&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Local references are resolved relative to the current working directory.&lt;/li&gt; &#xA; &lt;li&gt;Remote references are shallow-cloned at the specified &lt;code&gt;@ref&lt;/code&gt; into a temporary directory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;with:&lt;/code&gt; entries are exposed to the called workflow as environment variables &lt;code&gt;INPUT_&amp;lt;KEY&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;secrets:&lt;/code&gt; mapping entries are exposed as environment variables &lt;code&gt;SECRET_&amp;lt;KEY&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The called workflow executes according to its own &lt;code&gt;jobs&lt;/code&gt;/&lt;code&gt;needs&lt;/code&gt;; a summary of its job results is reported as a single result for the caller job.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Current limitations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Outputs from called workflows are not surfaced back to the caller.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;secrets: inherit&lt;/code&gt; is not supported; specify an explicit mapping.&lt;/li&gt; &#xA; &lt;li&gt;Private repositories for remote &lt;code&gt;uses:&lt;/code&gt; are not yet supported.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Runtime Mode Differences&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Docker Mode&lt;/strong&gt;: Provides the closest match to GitHub&#39;s environment, including support for Docker container actions, service containers, and Linux-based jobs. Some advanced container configurations may still require manual setup.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Podman Mode&lt;/strong&gt;: Similar to Docker mode but uses Podman for container execution. Offers rootless container support and enhanced security. Fully compatible with Docker-based workflows.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;🔒 Secure Emulation Mode&lt;/strong&gt;: Runs workflows on the local system with comprehensive sandboxing for security. &lt;strong&gt;Recommended for local development&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Command validation and filtering (blocks dangerous commands like &lt;code&gt;rm -rf /&lt;/code&gt;, &lt;code&gt;sudo&lt;/code&gt;, etc.)&lt;/li&gt; &#xA;   &lt;li&gt;Resource limits (CPU, memory, execution time)&lt;/li&gt; &#xA;   &lt;li&gt;Filesystem access controls&lt;/li&gt; &#xA;   &lt;li&gt;Process monitoring and limits&lt;/li&gt; &#xA;   &lt;li&gt;Safe for running untrusted workflows locally&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;⚠️ Emulation Mode (Legacy)&lt;/strong&gt;: Runs workflows using local system tools without sandboxing. &lt;strong&gt;Not recommended - use Secure Emulation instead&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Only supports local and JavaScript actions (no Docker container actions)&lt;/li&gt; &#xA;   &lt;li&gt;No support for service containers&lt;/li&gt; &#xA;   &lt;li&gt;No caching support&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;No security protections - can execute harmful commands&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Some actions may require adaptation to work locally&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Best Practices&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use Secure Emulation mode for local development&lt;/strong&gt; - provides safety without container overhead&lt;/li&gt; &#xA; &lt;li&gt;Test workflows in multiple runtime modes to ensure compatibility&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use Docker/Podman mode for production&lt;/strong&gt; - provides maximum isolation and reproducibility&lt;/li&gt; &#xA; &lt;li&gt;Keep matrix builds reasonably sized for better performance&lt;/li&gt; &#xA; &lt;li&gt;Use environment variables instead of GitHub secrets when possible&lt;/li&gt; &#xA; &lt;li&gt;Consider using local actions for complex custom functionality&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Review security warnings&lt;/strong&gt; - pay attention to blocked commands in secure emulation mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Start with secure mode&lt;/strong&gt; - only fall back to legacy emulation if necessary&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;The following roadmap outlines our planned approach to implementing currently unsupported or partially supported features in WRKFLW. Progress and priorities may change based on user feedback and community contributions.&lt;/p&gt; &#xA;&lt;h3&gt;1. Secrets and Permissions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Goal:&lt;/strong&gt; Support encrypted secrets and fine-grained permissions similar to GitHub Actions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Plan:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Implement secure secret storage and injection for workflow steps.&lt;/li&gt; &#xA;   &lt;li&gt;Add support for reading secrets from environment variables, files, or secret managers.&lt;/li&gt; &#xA;   &lt;li&gt;Investigate permission scoping for jobs and steps.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2. GitHub Actions Cache&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Goal:&lt;/strong&gt; Enable persistent caching between workflow runs, especially for dependencies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Plan:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Implement a local cache directory for Docker mode.&lt;/li&gt; &#xA;   &lt;li&gt;Add support for &lt;code&gt;actions/cache&lt;/code&gt; in both Docker and emulation modes.&lt;/li&gt; &#xA;   &lt;li&gt;Investigate cross-run cache persistence.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;3. GitHub API Integrations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Goal:&lt;/strong&gt; Support artifact upload/download, workflow/job status reporting, and other API-based features.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Plan:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Add artifact upload/download endpoints.&lt;/li&gt; &#xA;   &lt;li&gt;Implement status reporting to GitHub via the API.&lt;/li&gt; &#xA;   &lt;li&gt;Add support for job/step annotations and logs upload.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;4. Advanced Environment Variables&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Goal:&lt;/strong&gt; Emulate all dynamic GitHub-provided environment variables.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Plan:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Audit missing variables and add dynamic computation where possible.&lt;/li&gt; &#xA;   &lt;li&gt;Provide a compatibility table in the documentation.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;5. Large/Complex Matrix Builds&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Goal:&lt;/strong&gt; Improve performance and resource management for large matrices.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Plan:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Optimize matrix expansion and job scheduling.&lt;/li&gt; &#xA;   &lt;li&gt;Add resource limits and warnings for very large matrices.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;6. Network-Isolated Actions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Goal:&lt;/strong&gt; Support custom network configurations and strict isolation for actions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Plan:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Add advanced container network configuration options for Docker and Podman.&lt;/li&gt; &#xA;   &lt;li&gt;Document best practices for network isolation.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;7. Event Triggers&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Goal:&lt;/strong&gt; Support additional triggers (&lt;code&gt;push&lt;/code&gt;, &lt;code&gt;pull_request&lt;/code&gt;, &lt;code&gt;schedule&lt;/code&gt;, etc.).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Plan:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Implement event simulation for common triggers.&lt;/li&gt; &#xA;   &lt;li&gt;Allow users to specify event payloads for local runs.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;8. Windows and macOS Runners&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Goal:&lt;/strong&gt; Add support for non-Linux runners.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Plan:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Investigate cross-platform containerization and emulation.&lt;/li&gt; &#xA;   &lt;li&gt;Add documentation for platform-specific limitations.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;9. Service Containers in Emulation Mode&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Goal:&lt;/strong&gt; Support service containers (e.g., databases) in emulation mode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Plan:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Implement local service startup and teardown scripts.&lt;/li&gt; &#xA;   &lt;li&gt;Provide configuration for common services.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;10. Artifacts, Timeouts, Concurrency, and Expressions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Goal:&lt;/strong&gt; Support artifact handling, job/step timeouts, concurrency, and advanced YAML expressions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Plan:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Add artifact storage and retrieval.&lt;/li&gt; &#xA;   &lt;li&gt;Enforce timeouts and concurrency limits.&lt;/li&gt; &#xA;   &lt;li&gt;Expand expression parser for advanced use cases.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr /&gt; &#xA;&lt;p&gt;&lt;strong&gt;Want to help?&lt;/strong&gt; Contributions are welcome! See &lt;a href=&#34;https://raw.githubusercontent.com/bahdotsh/wrkflw/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for how to get started.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the MIT License - see the LICENSE file for details.&lt;/p&gt; &#xA;&lt;h2&gt;Remote Workflow Triggering&lt;/h2&gt; &#xA;&lt;p&gt;WRKFLW allows you to manually trigger workflow runs on GitHub through both the command-line interface (CLI) and the terminal user interface (TUI).&lt;/p&gt; &#xA;&lt;h3&gt;Requirements:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;You need a GitHub token with workflow permissions. Set it in the &lt;code&gt;GITHUB_TOKEN&lt;/code&gt; environment variable:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export GITHUB_TOKEN=ghp_your_token_here&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The workflow must have the &lt;code&gt;workflow_dispatch&lt;/code&gt; trigger defined in your workflow YAML:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;on:&#xA;  workflow_dispatch:&#xA;    inputs:&#xA;      name:&#xA;        description: &#39;Person to greet&#39;&#xA;        default: &#39;World&#39;&#xA;        required: true&#xA;      debug:&#xA;        description: &#39;Enable debug mode&#39;&#xA;        required: false&#xA;        type: boolean&#xA;        default: false&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Triggering from CLI:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Trigger a workflow using the default branch&#xA;wrkflw trigger workflow-name&#xA;&#xA;# Trigger a workflow on a specific branch&#xA;wrkflw trigger workflow-name --branch feature-branch&#xA;&#xA;# Trigger with input parameters&#xA;wrkflw trigger workflow-name --branch main --input name=Alice --input debug=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After triggering, WRKFLW will provide feedback including the URL to view the triggered workflow on GitHub.&lt;/p&gt; &#xA;&lt;h3&gt;Triggering from TUI:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Launch the TUI interface:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wrkflw tui&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate to the &#34;Workflows&#34; tab (use &lt;code&gt;Tab&lt;/code&gt; key or press &lt;code&gt;1&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use the arrow keys (&lt;code&gt;↑&lt;/code&gt;/&lt;code&gt;↓&lt;/code&gt;) or &lt;code&gt;j&lt;/code&gt;/&lt;code&gt;k&lt;/code&gt; to select the desired workflow.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Press &lt;code&gt;t&lt;/code&gt; to trigger the selected workflow.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If the workflow is successfully triggered, you&#39;ll see a notification in the UI.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can monitor the triggered workflow&#39;s execution on GitHub using the provided URL.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Verifying Triggered Workflows:&lt;/h3&gt; &#xA;&lt;p&gt;To verify that your workflow was triggered:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Visit your GitHub repository in a web browser.&lt;/li&gt; &#xA; &lt;li&gt;Navigate to the &#34;Actions&#34; tab.&lt;/li&gt; &#xA; &lt;li&gt;Look for your workflow in the list of workflow runs.&lt;/li&gt; &#xA; &lt;li&gt;Click on it to view the details of the run.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>