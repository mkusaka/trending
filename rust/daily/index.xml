<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-07T01:33:36Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>lovasoa/SQLpage</title>
    <updated>2024-08-07T01:33:36Z</updated>
    <id>tag:github.com,2024-08-07:/lovasoa/SQLpage</id>
    <link href="https://github.com/lovasoa/SQLpage" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SQL-only webapp builder, empowering data analysts to build websites and applications quickly&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; SQLpage &lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lovasoa/SQLpage/main/docs/sqlpage.mp4&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lovasoa/SQLpage/main/docs/sqlpage.gif&#34; alt=&#34;A short video explaining the concept of sqlpage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sql.ophir.dev&#34;&gt;SQLpage&lt;/a&gt; is an &lt;strong&gt;SQL&lt;/strong&gt;-only webapp builder. It is meant for data scientists, analysts, and business intelligence teams to build powerful data-centric applications quickly, without worrying about any of the traditional web programming languages and concepts.&lt;/p&gt; &#xA;&lt;p&gt;With SQLPage, you write simple &lt;code&gt;.sql&lt;/code&gt; files containing queries to your database to select, group, update, insert, and delete your data, and you get good-looking clean webpages displaying your data as text, lists, grids, plots, and forms.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;Code&lt;/td&gt;&#xA;   &lt;td&gt;Result&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT &#xA;    &#39;list&#39; as component,&#xA;    &#39;Popular websites&#39; as title;&#xA;SELECT &#xA;    name as title,&#xA;    url as link,&#xA;    CASE type&#xA;      WHEN 1 THEN &#39;blue&#39;&#xA;      ELSE &#39;red&#39;&#xA;    END as color,&#xA;    description, icon, active&#xA;FROM website;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt;&#xA;   &lt;td&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lovasoa/SQLpage/main/docs/demo-list.png&#34; alt=&#34;SQLPage list component&#34;&gt;&lt;/p&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT&#xA;  &#39;chart&#39; as component,&#xA;  &#39;Quarterly Revenue&#39; as title,&#xA;  &#39;area&#39; as type;&#xA;&#xA;SELECT&#xA;    quarter AS x,&#xA;    SUM(revenue) AS y&#xA;FROM finances&#xA;GROUP BY quarter&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt;&#xA;   &lt;td&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lovasoa/SQLpage/main/docs/demo-graph.png&#34; alt=&#34;SQLPage list component&#34;&gt;&lt;/p&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT&#xA;    &#39;form&#39; as component,&#xA;    &#39;User&#39; as title,&#xA;    &#39;Create new user&#39; as validate;&#xA;&#xA;SELECT&#xA;    name, type, placeholder,&#xA;    required, description&#xA;FROM user_form;&#xA;&#xA;INSERT INTO user&#xA;SELECT $first_name, $last_name, $birth_date&#xA;WHERE $first_name IS NOT NULL;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt;&#xA;   &lt;td&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lovasoa/SQLpage/main/docs/demo-form.png&#34; alt=&#34;SQLPage list component&#34;&gt;&lt;/p&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select &#39;tab&#39; as component, true as center;&#xA;select &#39;Show all cards&#39; as title, &#39;?&#39; as link,&#xA;  $tab is null as active;&#xA;select&#xA;  format(&#39;Show %s cards&#39;, color) as title,&#xA;  format(&#39;?tab=%s&#39;, color) as link,&#xA;  $tab=color as active&#xA;from tab_example_cards&#xA;group by color; &#xA;&#xA;&#xA;select &#39;card&#39; as component;&#xA;select&#xA;  title, description, color&#xA;  image_url as top_image, link&#xA;from tab_example_cards&#xA;where $tab is null or $tab = color;&#xA;&#xA;select&#xA;  &#39;text&#39; as component,&#xA;  sqlpage.read_file_as_text(&#39;footer.md&#39;) as contents_md&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt;&#xA;   &lt;td&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lovasoa/SQLpage/main/docs/cards.png&#34; alt=&#34;card component sql example&#34;&gt;&lt;/p&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Supported databases&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sqlite.org/index.html&#34;&gt;SQLite&lt;/a&gt;, including the ability to &lt;a href=&#34;https://raw.githubusercontent.com/lovasoa/SQLpage/main/configuration.md&#34;&gt;load extensions&lt;/a&gt; such as &lt;em&gt;Spatialite&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt;, and other compatible databases such as &lt;em&gt;YugabyteDB&lt;/em&gt;, &lt;em&gt;CockroachDB&lt;/em&gt; and &lt;em&gt;Aurora&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mysql.com/&#34;&gt;MySQL&lt;/a&gt;, and other compatible databases such as &lt;em&gt;MariaDB&lt;/em&gt; and &lt;em&gt;TiDB&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.microsoft.com/en-us/sql-server&#34;&gt;Microsoft SQL Server&lt;/a&gt;, and all compatible databases and providers such as &lt;em&gt;Azure SQL&lt;/em&gt; and &lt;em&gt;Amazon RDS&lt;/em&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lovasoa/SQLpage/main/docs/architecture-detailed.png&#34; alt=&#34;architecture diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;SQLPage is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Web_server&#34;&gt;web server&lt;/a&gt; written in &lt;a href=&#34;https://en.wikipedia.org/wiki/Rust_(programming_language)&#34;&gt;rust&lt;/a&gt; and distributed as a single executable file. When it receives a request to a URL ending in &lt;code&gt;.sql&lt;/code&gt;, it finds the corresponding SQL file, runs it on the database, passing it information from the web request as SQL statement parameters. When the database starts returning rows for the query, SQLPage maps each piece of information in the row to a parameter in one of its pre-defined components&#39; templates, and streams the result back to the user&#39;s browser.&lt;/p&gt; &#xA;&lt;h2&gt;Get started&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sql.ophir.dev/get_started.sql&#34;&gt;Read the official &lt;em&gt;get started&lt;/em&gt; guide on SQLPage&#39;s website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using executables&lt;/h3&gt; &#xA;&lt;p&gt;The easiest way to get started is to download the latest release from the &lt;a href=&#34;https://github.com/lovasoa/SQLpage/releases&#34;&gt;releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download the binary that corresponds to your operating system (linux, macos, or windows).&lt;/li&gt; &#xA; &lt;li&gt;Uncompress it: &lt;code&gt;tar -xzf sqlpage-*.tgz&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run it: &lt;code&gt;./sqlpage.bin&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;With docker&lt;/h3&gt; &#xA;&lt;p&gt;To run on a server, you can use &lt;a href=&#34;https://hub.docker.com/r/lovasoa/sqlpage&#34;&gt;the docker image&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/get-docker/&#34;&gt;Install docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;In a terminal, run the following command: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;docker run -it --name sqlpage -p 8080:8080 --volume &#34;$(pwd):/var/www&#34; --rm lovasoa/sqlpage&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;(&lt;code&gt;&#34;$(pwd):/var/www&#34;&lt;/code&gt; allows sqlpage to run sql files from your current working directory)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Create a file called index.sql with the contents from &lt;a href=&#34;https://raw.githubusercontent.com/lovasoa/SQLpage/main/index.sql&#34;&gt;this example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;a href=&#34;https://localhost:8080&#34;&gt;https://localhost:8080&lt;/a&gt; in your browser&lt;/li&gt; &#xA; &lt;li&gt;Optionally, you can also mount a directory containing sqlpage&#39;s configuration file, custom components, and migrations (see &lt;a href=&#34;https://raw.githubusercontent.com/lovasoa/SQLpage/main/configuration.md&#34;&gt;configuration.md&lt;/a&gt;) to &lt;code&gt;/etc/sqlpage&lt;/code&gt; in the container. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;For instance, you can use: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;docker run -it --name sqlpage -p 8080:8080 --volume &#34;$(pwd)/source:/var/www&#34; --volume &#34;$(pwd)/configuration:/etc/sqlpage:ro&#34; --rm lovasoa/sqlpage&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;And place your website in a folder named &lt;code&gt;source&lt;/code&gt; and your &lt;code&gt;sqlpage.json&lt;/code&gt; in a folder named &lt;code&gt;configuration&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;If you want to build your own docker image, taking the raw sqlpage image as a base is not recommended, since it is extremely stripped down and probably won&#39;t contain the dependencies you need. Instead, you can take debian as a base and simply copy the sqlpage binary from the official image to your own image: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM debian:stable-slim&#xA;COPY --from=lovasoa/sqlpage:main /usr/local/bin/sqlpage /usr/local/bin/sqlpage&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We provide compiled binaries only for the x86_64 architecture, but provide docker images for other architectures, including arm64 and armv7. If you want to run SQLPage on a Raspberry Pi or a cheaper ARM cloud instance, using the docker image is the easiest way to do it.&lt;/p&gt; &#xA;&lt;h3&gt;On Mac OS, with homebrew&lt;/h3&gt; &#xA;&lt;p&gt;An alternative for Mac OS users is to use &lt;a href=&#34;https://formulae.brew.sh/formula/sqlpage&#34;&gt;SQLPage&#39;s homebrew package&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://brew.sh/&#34;&gt;Install homebrew&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;In a terminal, run the following commands: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;brew install sqlpage&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lovasoa/SQLpage/main/examples/todo%20application/&#34;&gt;TODO list&lt;/a&gt;: a simple todo list application, illustrating how to create a basic CRUD application with SQLPage.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lovasoa/SQLpage/main/examples/plots%20tables%20and%20forms/&#34;&gt;Plots, Tables, forms, and interactivity&lt;/a&gt;: a short well-commented demo showing how to use plots, tables, forms, and interactivity to filter data based on an URL parameter.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lovasoa/SQLpage/main/examples/splitwise&#34;&gt;Tiny splitwise clone&lt;/a&gt;: a shared expense tracker app&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lovasoa/SQLpage/main/examples/corporate-conundrum/&#34;&gt;Corporate Conundrum&lt;/a&gt;: a board game implemented in SQL&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lovasoa/SQLpage/main/examples/master-detail-forms/&#34;&gt;Master-Detail Forms&lt;/a&gt;: shows how to implement a simple set of forms to insert data into database tables that have a one-to-many relationship.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lovasoa/SQLpage/main/examples/official-site/&#34;&gt;SQLPage&#39;s own official website and documentation&lt;/a&gt;: The SQL source code for the project&#39;s official site, &lt;a href=&#34;https://sql.ophir.dev&#34;&gt;https://sql.ophir.dev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lovasoa/SQLpage/main/examples/image%20gallery%20with%20user%20uploads/&#34;&gt;Image gallery&lt;/a&gt;: An image gallery where users can log in and upload images. Illustrates the implementation of a user authentication system using session cookies, and the handling of file uploads.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lovasoa/SQLpage/main/examples/user-authentication/&#34;&gt;User Management&lt;/a&gt;: An authentication demo with user registration, log in, log out, and confidential pages. Uses PostgreSQL.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lovasoa/SQLpage/main/examples/using%20react%20and%20other%20custom%20scripts%20and%20styles/&#34;&gt;Making a JSON API and integrating React components in the frontend&lt;/a&gt;: Shows how to integrate a react component in a SQLPage website, and how to easily build a REST API with SQLPage.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lovasoa/SQLpage/main/examples/image%20gallery%20with%20user%20uploads&#34;&gt;Handling file uploads&lt;/a&gt;: An image gallery where authenticated users can publish new images via an upload form.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lovasoa/SQLpage/main/examples/official-site/examples/handle_csv_upload.sql&#34;&gt;Bulk data import from CSV files&lt;/a&gt; : A simple form letting users import CSV files to fill a database table.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mnesarco/sqlpage_auth_example&#34;&gt;Advanced authentication example using PostgreSQL stored procedures&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DSMejantel/Ecole_inclusive&#34;&gt;Complex web application in SQLite with user management, file uploads, plots, maps, tables, menus, ...&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lovasoa/SQLpage/main/examples/single%20sign%20on&#34;&gt;Single sign-on&lt;/a&gt;: An example of how to implement OAuth and OpenID Connect (OIDC) authentication in SQLPage. The demo also includes a CAS (Central Authentication Service) client.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lovasoa/SQLpage/main/examples/light-dark-toggle/&#34;&gt;Dark theme&lt;/a&gt; : demonstrates how to let the user toggle between a light theme and a dark theme, and store the user&#39;s preference.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can try all the examples online without installing anything on your computer using &lt;a href=&#34;https://replit.com/@pimaj62145/SQLPage&#34;&gt;SQLPage&#39;s online demo on replit&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;SQLPage can be configured through either a configuration file placed in &lt;code&gt;sqlpage/sqlpage.json&lt;/code&gt; or environment variables such as &lt;code&gt;DATABASE_URL&lt;/code&gt; or &lt;code&gt;LISTEN_ON&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more information, read &lt;a href=&#34;https://raw.githubusercontent.com/lovasoa/SQLpage/main/configuration.md&#34;&gt;&lt;code&gt;configuration.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, custom components can be created by placing &lt;a href=&#34;https://handlebarsjs.com/guide/&#34;&gt;&lt;code&gt;.handlebars&lt;/code&gt;&lt;/a&gt; files in &lt;code&gt;sqlpage/templates&lt;/code&gt;. &lt;a href=&#34;https://raw.githubusercontent.com/lovasoa/SQLpage/main/sqlpage/templates/card.handlebars&#34;&gt;Example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;HTTPS&lt;/h3&gt; &#xA;&lt;p&gt;SQLPage supports HTTP/2 and HTTPS natively and transparently. Just set &lt;code&gt;SQLPAGE_HTTPS_DOMAIN=example.com&lt;/code&gt;, and SQLPage will automatically request a trusted certificate and start encrypting all your user&#39;s traffic with it. No tedious manual configuration for you, and no annoying &#34;Connection is Not Secure&#34; messages for your users !&lt;/p&gt; &#xA;&lt;h2&gt;Serverless&lt;/h2&gt; &#xA;&lt;p&gt;You can run SQLpage &lt;a href=&#34;https://en.wikipedia.org/wiki/Serverless_computing&#34;&gt;serverless&lt;/a&gt; by compiling it to an &lt;a href=&#34;https://aws.amazon.com/lambda/&#34;&gt;AWS Lambda function&lt;/a&gt;. An easy way to do so is using the provided docker image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; docker build -t sqlpage-lambda-builder . -f lambda.Dockerfile --target builder&#xA; docker run sqlpage-lambda-builder cat deploy.zip &amp;gt; sqlpage-aws-lambda.zip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then just add your own SQL files to &lt;code&gt;sqlpage-aws-lambda.zip&lt;/code&gt;, and &lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-package.html#gettingstarted-package-zip&#34;&gt;upload it to AWS Lambda&lt;/a&gt;, selecting &lt;em&gt;Custom runtime on Amazon Linux 2&lt;/em&gt; as a runtime.&lt;/p&gt; &#xA;&lt;h3&gt;Hosting sql files directly inside the database&lt;/h3&gt; &#xA;&lt;p&gt;When running serverless, you can include the SQL files directly in the image that you are deploying. But if you want to be able to update your sql files on the fly without creating a new image, you can store the files directly inside the database, in a table that has the following structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE TABLE sqlpage_files(&#xA;  path VARCHAR(255) NOT NULL PRIMARY KEY,&#xA;  contents BLOB,&#xA;  last_modified TIMESTAMP DEFAULT CURRENT_TIMESTAMP&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure to update &lt;code&gt;last_modified&lt;/code&gt; every time you update the contents of a file (or do it inside a TRIGGER). SQLPage will re-parse a file from the database only when it has been modified.&lt;/p&gt; &#xA;&lt;h2&gt;Technologies and libraries used&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://actix.rs/&#34;&gt;actix web&lt;/a&gt; handles HTTP requests at an incredible speed,&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://preview.tabler.io&#34;&gt;tabler&lt;/a&gt; handles the styling for professional-looking clean components,&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tabler-icons.io&#34;&gt;tabler icons&lt;/a&gt; is a large set of icons you can select directly from your SQL,&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://handlebarsjs.com/guide/&#34;&gt;handlebars&lt;/a&gt; render HTML pages from readable templates for each component.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Frequently asked questions&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Why would I want to write SQL instead of a real programming language? SQL is not even &lt;a href=&#34;https://en.wikipedia.org/wiki/Turing_completeness&#34;&gt;Turing-complete&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You are probably worrying about the wrong thing. If you can express your application in a purely declarative manner, you should propably do it, even if you are using a traditional programming language. It will be much more concise, readable, easy to reason about and to debug than any imperative code you could write.&lt;/li&gt; &#xA; &lt;li&gt;SQL is much more simple than traditional programming languages. It is often readable even by non-programmers, and yet it is very powerful.&lt;/li&gt; &#xA; &lt;li&gt;If you really want to make your website more complicated than it needs to be, please note that &lt;a href=&#34;https://stackoverflow.com/questions/900055/is-sql-or-even-tsql-turing-complete/7580013#7580013&#34;&gt;SQL is actually Turing-complete&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Even if it wasn&#39;t (if it didn&#39;t have recursive queries), a sequence of SQL statement executions driven by an user, like SQLPage allows you to do, would still be Turing-complete. You could build a sql website representing a Turing machine where the user would have to click &#34;next&#34; repeatedly to compute the next state of the machine.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Just Because You Can Doesn’t Mean You Should...&lt;/p&gt; &#xA; &lt;p&gt;— &lt;a href=&#34;https://www.reddit.com/r/rust/comments/14qjskz/comment/jr506nx&#34;&gt;someone being mean on reddit&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Life&#39;s too short to always play it safe. Where&#39;s the fun in &lt;em&gt;should&lt;/em&gt;? I think SQLPage has some real value to offer, despite its unconventional approach ! SQLPage isn&#39;t intended to replace traditional web development frameworks or discourage their usage. Instead, it caters to a specific group of people who want to leverage their SQL skills to rapidly build web applications, without spending months learning all of the technologies involved in traditional web development, and then weeks using them to build a simple CRUD application.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Is this the same as Microsoft Access?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The goal is the same: make it easy to create simple data-centric applications. But the tools are very different:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SQLPage is a web server, not a desktop application.&lt;/li&gt; &#xA; &lt;li&gt;SQLPage is not a database, it &lt;em&gt;connects&lt;/em&gt; to real battle-tested databases. Microsoft Access tries to be a database, and it&#39;s &lt;a href=&#34;https://www.quora.com/Is-the-Access-database-reliable-and-secure&#34;&gt;not very good at it&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Microsoft Access is an expensive proprietary software, SQLPage is &lt;a href=&#34;https://raw.githubusercontent.com/lovasoa/SQLpage/main/LICENSE.txt&#34;&gt;open-source&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Microsoft Access &lt;a href=&#34;https://medium.com/young-coder/microsoft-access-the-zombie-database-software-that-wont-die-5b09e389c166&#34;&gt;is a zombie that will stab you in the back&lt;/a&gt;, SQLPage won&#39;t.&lt;/li&gt; &#xA; &lt;li&gt;SQLPage will not tortue you with &lt;a href=&#34;https://en.wikipedia.org/wiki/Visual_Basic_for_Applications&#34;&gt;Visual Basic for Applications&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Is the name a reference to Microsoft Frontpage ?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Frontpage was a visual static website building software popular in the late 90s. I had never heard of it before someone asked me this question.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;I like CSS, I want to design websites, not write SQL.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Are you human ? &lt;a href=&#34;https://uxdesign.cc/why-do-most-developers-hate-css-63c92bce36ed&#34;&gt;Human beings hate CSS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The take of SQLPage is that you should not spend time designing the border radius of your buttons until you have a working prototype. We provide a set of components that look decent out of the box, so that you can focus on your data model instead.&lt;/p&gt; &#xA;&lt;p&gt;However, if you really want to write your own HTML and CSS, you can do it by creating your own components. Just create a &lt;a href=&#34;https://handlebarsjs.com/guide/&#34;&gt;&lt;code&gt;.handlebars&lt;/code&gt;&lt;/a&gt; file in &lt;code&gt;sqlpage/templates&lt;/code&gt; and write your HTML and CSS in it. (&lt;a href=&#34;https://raw.githubusercontent.com/lovasoa/SQLpage/main/sqlpage/templates/alert.handlebars&#34;&gt;example&lt;/a&gt;)&lt;/p&gt;</summary>
  </entry>
</feed>