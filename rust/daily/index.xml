<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-25T03:06:45Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ThePrimeagen/htmx-lsp</title>
    <updated>2023-08-25T03:06:45Z</updated>
    <id>tag:github.com,2023-08-25:/ThePrimeagen/htmx-lsp</id>
    <link href="https://github.com/ThePrimeagen/htmx-lsp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;its so over&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;HTMX LSP&lt;/h1&gt; &#xA;&lt;p&gt;Right now this is very much so a work in progress.&lt;/p&gt; &#xA;&lt;h1&gt;GREAT NEWS!&lt;/h1&gt; &#xA;&lt;p&gt;We have reached a point where i could use help! If you want to fill in documentation or help with autocompletes please make an issue / make a pr!&lt;/p&gt; &#xA;&lt;h1&gt;BIG TODOS LEFT&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;all the autocomplete based on the hx-* attributes&lt;/li&gt; &#xA; &lt;li&gt;distribute binary&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Integration&lt;/h1&gt; &#xA;&lt;p&gt;There is no vim or vscode specific integration, but!!! i do have an example of launching servers and listening to them for neovim in &lt;a href=&#34;https://github.com/ThePrimeagen/lsp-debug-tools.nvim&#34;&gt;lsp-debug-tools&lt;/a&gt; repo&lt;/p&gt; &#xA;&lt;h1&gt;Help&lt;/h1&gt; &#xA;&lt;p&gt;Creating the required clients to be used in vscode would be super cool. If i could avoid touching vscode that would be awesome&lt;/p&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;Simple build&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Watching&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo install cargo-watch&#xA;cargo watch -x build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;General&lt;/h3&gt; &#xA;&lt;p&gt;As of right now the general goal is just to provide completion for any &lt;code&gt;-&lt;/code&gt; character received without even looking at the context.&lt;/p&gt; &#xA;&lt;p&gt;After that, would be to perform some code actions that make sense and allow for amazing utility around htmx.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;htmx-lsp -f /path/to/file --level OFF | TRACE | DEBUG | INFO | WARN | ERROR&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;NeoVim&lt;/h3&gt; &#xA;&lt;p&gt;As of now, &lt;a href=&#34;https://github.com/ThePrimeagen/lsp-debug-tools.nvim&#34;&gt;lsp-debug-tools&lt;/a&gt; is the only debugging tool designed for in editor experience.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>risc0/zeth</title>
    <updated>2023-08-25T03:06:45Z</updated>
    <id>tag:github.com,2023-08-25:/risc0/zeth</id>
    <link href="https://github.com/risc0/zeth" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A &#34;Type 0&#34; zkEVM. Prove validity of Ethereum blocks using RISC Zero&#39;s zkVM&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;zeth&lt;/h1&gt; &#xA;&lt;p&gt;Zeth is an open-source ZK block prover for Ethereum built on the RISC Zero zkVM.&lt;/p&gt; &#xA;&lt;p&gt;Zeth makes it possible to &lt;em&gt;prove&lt;/em&gt; that a given Ethereum block is valid (i.e., is the result of applying the given list of transactions to the parent block) &lt;em&gt;without&lt;/em&gt; relying on the validator or sync committees. This is because Zeth does &lt;em&gt;all&lt;/em&gt; the work needed to construct a new block &lt;em&gt;from within the zkVM&lt;/em&gt;, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Verifying transaction signatures.&lt;/li&gt; &#xA; &lt;li&gt;Verifying account &amp;amp; storage state against the parent block’s state root.&lt;/li&gt; &#xA; &lt;li&gt;Applying transactions.&lt;/li&gt; &#xA; &lt;li&gt;Paying the block reward.&lt;/li&gt; &#xA; &lt;li&gt;Updating the state root.&lt;/li&gt; &#xA; &lt;li&gt;Etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After constructing the new block, Zeth calculates and outputs the block hash. By running this process within the zkVM, we obtain a ZK proof that the new block is valid.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;Zeth is experimental and may still contain bugs.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install the &lt;code&gt;cargo risczero&lt;/code&gt; tool and the &lt;code&gt;risc0&lt;/code&gt; toolchain:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cargo install cargo-risczero&#xA;$ cargo risczero install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone the repository and build with &lt;code&gt;cargo&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running&lt;/h3&gt; &#xA;&lt;p&gt;Zeth currently has several modes of execution:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: zeth [OPTIONS] --block-no=&amp;lt;BLOCK_NO&amp;gt;&#xA;&#xA;Options:&#xA;  -r, --rpc-url=&amp;lt;RPC_URL&amp;gt;&#xA;          URL of the chain RPC node&#xA;  -c, --cache[=&amp;lt;CACHE&amp;gt;]&#xA;          Use a local directory as a cache for RPC calls.&#xA;          Accepts an optional custom directory.&#xA;          [default: host/testdata]&#xA;  -n, --network=&amp;lt;NETWORK&amp;gt;&#xA;          Network name [default: ethereum]&#xA;  -b, --block-no=&amp;lt;BLOCK_NO&amp;gt;&#xA;          Block number to validate&#xA;  -l, --local-exec[=&amp;lt;LOCAL_EXEC&amp;gt;]&#xA;          Runs the verification inside the zkvm executor locally.&#xA;          Accepts an optional custom maximum segment cycle count&#xA;          specified as a power of 2.&#xA;          [default: 20 (i.e. ~1M cycles)]&#xA;  -s, --submit-to-bonsai&#xA;          Whether to submit the proving workload to Bonsai&#xA;  -v, --verify-bonsai-receipt-uuid=&amp;lt;VERIFY_BONSAI_RECEIPT_UUID&amp;gt;&#xA;          Bonsai Session UUID to use for receipt verification&#xA;  -h, --help&#xA;          Print help&#xA;  -V, --version&#xA;          Print version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Zeth primarily requires an Ethereum RPC provider. Two complementary types of providers are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;RPC provider. This fetches data from a Web2 RPC provider, such as &lt;a href=&#34;https://www.alchemy.com/&#34;&gt;Alchemy&lt;/a&gt;. Specified using the &lt;code&gt;--rpc-url=&amp;lt;RPC_URL&amp;gt;&lt;/code&gt; parameter.&lt;/li&gt; &#xA; &lt;li&gt;Cached RPC provider. This fetches RPC data from a local file when possible, and falls back to a Web2 RPC provider when necessary. It amends the local file with results from the Web2 provider so that subsequent runs don&#39;t require additional Web2 RPC calls. Specified using the &lt;code&gt;--cache[=CACHE_DIRECTORY]&lt;/code&gt; parameter.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Quick test mode&lt;/strong&gt;. This is the default. When run in this mode, Zeth does all the work needed to construct an Ethereum block and verifies the correctness of the result using the RPC provider. No proofs are generated.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ RUST_LOG=info ./target/release/zeth \&#xA;    --rpc-url=&#34;https://eth-mainnet.g.alchemy.com/v2/YOUR_API_KEY&#34; \&#xA;    --cache \&#xA;    --block-no=16424130&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Local executor mode&lt;/strong&gt;. To run in this mode, add the parameter &lt;code&gt;--local-exec[=SEGMENT_LIMIT]&lt;/code&gt;. When run in this mode, Zeth does all the work needed to construct an Ethereum block from within the zkVM&#39;s non-proving emulator. Correctness of the result is checked using the RPC provider. This is useful for measuring the size of the computation (number of execution segments and cycles). No proofs are generated.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ RUST_LOG=info ./target/release/zeth \&#xA;    --rpc-url=&#34;https://eth-mainnet.g.alchemy.com/v2/YOUR_API_KEY&#34; \&#xA;    --cache \&#xA;    --block-no=16424130 \&#xA;    --local-exec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bonsai proving mode&lt;/strong&gt;. &lt;em&gt;This mode generates a ZK proof.&lt;/em&gt; To run in this mode, add the parameter &lt;code&gt;--submit-to-bonsai&lt;/code&gt;. When run in this mode, Zeth submits a proving task to the &lt;a href=&#34;https://www.bonsai.xyz/&#34;&gt;Bonsai proving service&lt;/a&gt;, which then constructs an Ethereum block entirely from within the zkVM. This mode checks the correctness of the result using the RPC provider. It also outputs the Bonsai session UUID, and polls Bonsai until the proof is complete.&lt;/p&gt; &#xA;&lt;p&gt;To use this feature, first set the &lt;code&gt;BONSAI_API_URL&lt;/code&gt; and &lt;code&gt;BONSAI_API_KEY&lt;/code&gt; environment variables, then follow the instructions below for submitting jobs to Bonsai and verifying the proofs.&lt;/p&gt; &#xA;&lt;p&gt;Need a Bonsai API key? &lt;a href=&#34;https://bonsai.xyz/apply&#34;&gt;Sign up today&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ RUST_LOG=info ./target/release/zeth \&#xA;    --rpc-url=&#34;https://eth-mainnet.g.alchemy.com/v2/YOUR_API_KEY&#34; \&#xA;    --cache \&#xA;    --block-no=16424130 \&#xA;    --submit-to-bonsai&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bonsai verify mode&lt;/strong&gt;. &lt;em&gt;This mode verifies the ZK proof.&lt;/em&gt; To run in this mode, add the parameter &lt;code&gt;--verify-bonsai-receipt-uuid=BONSAI_SESSION_UUID&lt;/code&gt;, where &lt;code&gt;BONSAI_SESSION_UUID&lt;/code&gt; is the session UUID returned by the &lt;code&gt;--submit-to-bonsai&lt;/code&gt; mode. This mode checks the correctness of the result using the RPC provider.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ RUST_LOG=info ./target/release/zeth \&#xA;    --rpc-url=&#34;https://eth-mainnet.g.alchemy.com/v2/YOUR_API_KEY&#34; \&#xA;    --cache \&#xA;    --block-no=16424130 \&#xA;    --verify-bonsai-receipt-uuid=BONSAI_SESSION_UUID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Additional resources&lt;/h2&gt; &#xA;&lt;p&gt;Check out these resources and say hi on our Discord:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.risczero.com/&#34;&gt;RISC Zero developer’s portal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.risczero.com/zkvm/quickstart&#34;&gt;zkVM quick-start guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.risczero.com/bonsai/quickstart&#34;&gt;Bonsai quick-start guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/risczero&#34;&gt;RISC Zero on Discord&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>jqnatividad/qsv</title>
    <updated>2023-08-25T03:06:45Z</updated>
    <id>tag:github.com,2023-08-25:/jqnatividad/qsv</id>
    <link href="https://github.com/jqnatividad/qsv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CSVs sliced, diced &amp; analyzed.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;qsv: Blazing-fast CSV data-wrangling toolkit&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jqnatividad/qsv/actions/workflows/rust.yml&#34;&gt;&lt;img src=&#34;https://github.com/jqnatividad/qsv/actions/workflows/rust.yml/badge.svg?sanitize=true&#34; alt=&#34;Linux build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jqnatividad/qsv/actions/workflows/rust-windows.yml&#34;&gt;&lt;img src=&#34;https://github.com/jqnatividad/qsv/actions/workflows/rust-windows.yml/badge.svg?sanitize=true&#34; alt=&#34;Windows build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jqnatividad/qsv/actions/workflows/rust-macos.yml&#34;&gt;&lt;img src=&#34;https://github.com/jqnatividad/qsv/actions/workflows/rust-macos.yml/badge.svg?sanitize=true&#34; alt=&#34;macOS build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jqnatividad/qsv/actions/workflows/security-audit.yml&#34;&gt;&lt;img src=&#34;https://github.com/jqnatividad/qsv/actions/workflows/security-audit.yml/badge.svg?sanitize=true&#34; alt=&#34;Security audit&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jqnatividad/qsv/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/jqnatividad/qsv/total?logo=github&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/MShawon/github-clone-count-badge&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/json?color=success&amp;amp;label=clones&amp;amp;query=count&amp;amp;url=https://gist.githubusercontent.com/jqnatividad/13f60ad0b54856a55f60b8e653079349/raw/clone.json&amp;amp;logo=github&#34; alt=&#34;Clones&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jqnatividad/qsv/discussions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/discussions/jqnatividad/qsv&#34; alt=&#34;Discussions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://formulae.brew.sh/formula/qsv&#34;&gt;&lt;img src=&#34;https://img.shields.io/homebrew/v/qsv?logo=homebrew&#34; alt=&#34;HomeBrew&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/qsv&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/qsv.svg?logo=crates.io&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/qsv&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/d/qsv?color=orange&amp;amp;label=crates.io%20downloads&#34; alt=&#34;Crates.io downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/#minimum-supported-rust-version&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Rust-1.71.1-red?logo=rust&#34; alt=&#34;Minimum supported Rust version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th align=&#34;left&#34;&gt;&amp;nbsp;&lt;/th&gt; &#xA;    &lt;th align=&#34;left&#34;&gt;Table of Contents&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/docs/images/qsv-logo.png&#34; alt=&#34;qsv logo&#34;&gt;&lt;br&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=p9lf76xOA5k&#34;&gt;&lt;em&gt;Hi-ho &#34;Quicksilver&#34; away!&lt;/em&gt;&lt;/a&gt;&lt;br&gt;&lt;sub&gt;&lt;sup&gt;&lt;a href=&#34;https://github.com/jqnatividad/qsv/discussions/295&#34;&gt;logo details&lt;/a&gt;&lt;/sup&gt;&lt;/sub&gt;&lt;br&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;qsv (pronounced &#34;Quicksilver&#34;) is a&lt;br&gt;command line program for indexing, slicing,&lt;br&gt;analyzing, filtering, enriching, validating &amp;amp;&lt;br&gt;joining CSV files.&lt;br&gt;Commands are simple, fast &amp;amp; composable.&lt;br&gt;&lt;br&gt;* &lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/#available-commands&#34;&gt;Available Commands&lt;/a&gt;&lt;br&gt;* &lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/#installation-options&#34;&gt;Installation Options&lt;/a&gt;&lt;br&gt; * &lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/docs/whirlwind_tour.md#a-whirlwind-tour&#34;&gt;Whirlwind Tour&lt;/a&gt; / &lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/contrib/notebooks/&#34;&gt;Notebooks&lt;/a&gt;&lt;br&gt;* &lt;a href=&#34;https://github.com/jqnatividad/qsv/wiki/Cookbook#cookbook&#34;&gt;Cookbook&lt;/a&gt;&lt;br&gt;* &lt;a href=&#34;https://github.com/jqnatividad/qsv/discussions/categories/faq&#34;&gt;FAQ&lt;/a&gt;&lt;br&gt;* &lt;a href=&#34;https://github.com/jqnatividad/qsv/raw/master/CHANGELOG.md#changelog&#34;&gt;Changelog&lt;/a&gt;&lt;br&gt;* &lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/docs/PERFORMANCE.md#performance-tuning&#34;&gt;Performance Tuning&lt;/a&gt;&lt;br&gt;* &lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/docs/BENCHMARKS.md&#34;&gt;Benchmarks&lt;/a&gt;&lt;br&gt;* &lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/docs/ENVIRONMENT_VARIABLES.md&#34;&gt;Environment Variables&lt;/a&gt;&lt;br&gt;* &lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/#feature-flags&#34;&gt;Feature Flags&lt;/a&gt;&lt;br&gt;* &lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/#testing&#34;&gt;Testing&lt;/a&gt;&lt;br&gt;* &lt;a href=&#34;https://docs.google.com/presentation/d/e/2PACX-1vQ12ndZL--gkz0HLQRaxqsNOwzddkv1iUKB3sq661yA77OPlAsmHJHpjaqt9s9QEf73VqMfb0cv4jHU/pub?start=false&amp;amp;loop=false&amp;amp;delayms=3000&#34;&gt;NYC School of Data 2022 slides&lt;/a&gt;&lt;br&gt;* &lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/#sponsor&#34;&gt;Sponsor&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/div&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ℹ️ &lt;strong&gt;NOTE:&lt;/strong&gt; Quicksilver (qsv) is a fork of the popular &lt;a href=&#34;https://github.com/BurntSushi/xsv&#34;&gt;xsv&lt;/a&gt; utility, merging several pending PRs &lt;a href=&#34;https://github.com/BurntSushi/xsv/issues/267&#34;&gt;since xsv 0.13.0&#39;s May 2018 release&lt;/a&gt;. On top of xsv&#39;s 20 commands, it adds numerous new features; 37 additional commands; 6 &lt;code&gt;apply&lt;/code&gt; subcommands &amp;amp; 35 operations; 5 &lt;code&gt;to&lt;/code&gt; subcommands; 3 &lt;code&gt;cat&lt;/code&gt; subcommands; 3 &lt;code&gt;geocode&lt;/code&gt; subcommands &amp;amp; 3 operations; and 4 &lt;code&gt;snappy&lt;/code&gt; subcommands. See &lt;a href=&#34;https://github.com/jqnatividad/qsv/discussions/categories/faq&#34;&gt;FAQ&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Available commands&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/apply.rs#L2&#34;&gt;apply&lt;/a&gt;&lt;br&gt;✨🚀🧠🤖&lt;/td&gt; &#xA;   &lt;td&gt;Apply series of string, date, math, currency &amp;amp; geocoding transformations to a CSV column. It also has some basic &lt;a href=&#34;https://en.wikipedia.org/wiki/Natural_language_processing&#34;&gt;NLP&lt;/a&gt; functions (&lt;a href=&#34;https://crates.io/crates/strsim&#34;&gt;similarity&lt;/a&gt;, &lt;a href=&#34;https://crates.io/crates/vader_sentiment&#34;&gt;sentiment analysis&lt;/a&gt;, &lt;a href=&#34;https://docs.rs/censor/latest/censor/&#34;&gt;profanity&lt;/a&gt;, &lt;a href=&#34;https://github.com/ticki/eudex#eudex-a-blazingly-fast-phonetic-reductionhashing-algorithm&#34;&gt;eudex&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://crates.io/crates/whatlang&#34;&gt;language detection&lt;/a&gt;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;applydp_deeplink&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/applydp.rs#L2&#34;&gt;applydp&lt;/a&gt;&lt;br&gt;🚀 &lt;img src=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/docs/images/ckan.png&#34; alt=&#34;CKAN&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;applydp is a slimmed-down version of &lt;code&gt;apply&lt;/code&gt; with only &lt;a href=&#34;https://github.com/dathere/datapusher-plus&#34;&gt;Datapusher+&lt;/a&gt; relevant subcommands/operations (&lt;code&gt;qsvdp&lt;/code&gt; binary variant only).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/behead.rs#L2&#34;&gt;behead&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Drop headers from a CSV.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/cat.rs#L2&#34;&gt;cat&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Concatenate CSV files by row or by column.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/count.rs#L2&#34;&gt;count&lt;/a&gt;&lt;br&gt;📇🏎️&lt;/td&gt; &#xA;   &lt;td&gt;Count the rows in a CSV file. (15.82 seconds for 15gb, 27m row NYC 311 dataset without an index. Instantaneous with an index.)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/dedup.rs#L2&#34;&gt;dedup&lt;/a&gt;&lt;br&gt;🤯🚀&lt;/td&gt; &#xA;   &lt;td&gt;Remove duplicate rows (See also &lt;code&gt;extdedup&lt;/code&gt;, &lt;code&gt;extsort&lt;/code&gt;, &lt;code&gt;sort&lt;/code&gt; &amp;amp; &lt;code&gt;sortcheck&lt;/code&gt; commands).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/describegpt.rs#L2&#34;&gt;describegpt&lt;/a&gt;&lt;br&gt;🌐🤖&lt;/td&gt; &#xA;   &lt;td&gt;Infer extended metadata about a CSV using a GPT model from &lt;a href=&#34;https://platform.openai.com/docs/introduction&#34;&gt;OpenAI&#39;s API&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/diff.rs#L2&#34;&gt;diff&lt;/a&gt;&lt;br&gt;🚀&lt;/td&gt; &#xA;   &lt;td&gt;Find the difference between two CSVs with ludicrous speed!&lt;br&gt;e.g. &lt;em&gt;compare two CSVs with 1M rows x 9 columns in under 600ms!&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/enumerate.rs#L2&#34;&gt;enum&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Add a new column enumerating rows by adding a column of incremental or uuid identifiers. Can also be used to copy a column or fill a new column with a constant value.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/excel.rs#L2&#34;&gt;excel&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Exports a specified Excel/ODS sheet to a CSV file.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/exclude.rs#L2&#34;&gt;exclude&lt;/a&gt;&lt;br&gt;📇&lt;/td&gt; &#xA;   &lt;td&gt;Removes a set of CSV data from another set based on the specified columns.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/explode.rs#L2&#34;&gt;explode&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Explode rows into multiple ones by splitting a column value based on the given separator.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/extdedup.rs#L2&#34;&gt;extdedup&lt;/a&gt;&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Remove duplicate rows from an arbitrarily large CSV/text file using a memory-mapped, &lt;a href=&#34;https://crates.io/crates/odht&#34;&gt;on-disk hash table&lt;/a&gt;. Unlike the &lt;code&gt;dedup&lt;/code&gt; command, this command does not load the entire file into memory nor does it sort the deduped file.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/extsort.rs#L2&#34;&gt;extsort&lt;/a&gt;&lt;br&gt;🚀&lt;/td&gt; &#xA;   &lt;td&gt;Sort an arbitrarily large CSV/text file using a multithreaded &lt;a href=&#34;https://en.wikipedia.org/wiki/External_sorting&#34;&gt;external merge sort&lt;/a&gt; algorithm.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/fetch.rs#L3&#34;&gt;fetch&lt;/a&gt;&lt;br&gt;✨🧠🌐&lt;/td&gt; &#xA;   &lt;td&gt;Fetches data from web services for every row using &lt;strong&gt;HTTP Get&lt;/strong&gt;. Comes with &lt;a href=&#34;https://http2-explained.haxx.se/en/part1&#34;&gt;HTTP/2&lt;/a&gt; &lt;a href=&#34;https://medium.com/coderscorner/http-2-flow-control-77e54f7fd518&#34;&gt;adaptive flow control&lt;/a&gt;, &lt;a href=&#34;https://github.com/yamafaktory/jql#%EF%B8%8F-usage&#34;&gt;jql&lt;/a&gt; JSON query language support, dynamic throttling (&lt;a href=&#34;https://www.ietf.org/archive/id/draft-ietf-httpapi-ratelimit-headers-06.html&#34;&gt;RateLimit&lt;/a&gt;) &amp;amp; caching with optional &lt;a href=&#34;https://redis.io/&#34;&gt;Redis&lt;/a&gt; support for persistent caching.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/fetchpost.rs#L3&#34;&gt;fetchpost&lt;/a&gt;&lt;br&gt;✨🧠🌐&lt;/td&gt; &#xA;   &lt;td&gt;Similar to &lt;code&gt;fetch&lt;/code&gt;, but uses &lt;strong&gt;HTTP Post&lt;/strong&gt;. (&lt;a href=&#34;https://www.geeksforgeeks.org/difference-between-http-get-and-post-methods/&#34;&gt;HTTP GET vs POST methods&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/fill.rs#L2&#34;&gt;fill&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Fill empty values.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/fixlengths.rs#L2&#34;&gt;fixlengths&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Force a CSV to have same-length records by either padding or truncating them.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/flatten.rs#L2&#34;&gt;flatten&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A flattened view of CSV records. Useful for viewing one record at a time.&lt;br&gt;e.g. &lt;code&gt;qsv slice -i 5 data.csv | qsv flatten&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/fmt.rs#L2&#34;&gt;fmt&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Reformat a CSV with different delimiters, record terminators or quoting rules. (Supports ASCII delimited data.)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/foreach.rs#L3&#34;&gt;foreach&lt;/a&gt;&lt;br&gt;✨&lt;/td&gt; &#xA;   &lt;td&gt;Loop over a CSV to execute shell commands. (not available on Windows)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/frequency.rs#L2&#34;&gt;frequency&lt;/a&gt;&lt;br&gt;📇😣🏎️&lt;/td&gt; &#xA;   &lt;td&gt;Build &lt;a href=&#34;https://statisticsbyjim.com/basics/frequency-table/&#34;&gt;frequency tables&lt;/a&gt; of each column. Uses multithreading to go faster if an index is present.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/geocode.rs#L2&#34;&gt;geocode&lt;/a&gt;&lt;br&gt;✨🧠🌐&lt;/td&gt; &#xA;   &lt;td&gt;Geocodes a location against the Geonames cities database.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/generate.rs#L2&#34;&gt;generate&lt;/a&gt;&lt;br&gt;✨&lt;/td&gt; &#xA;   &lt;td&gt;Generate test data by profiling a CSV using &lt;a href=&#34;https://crates.io/crates/test-data-generation&#34;&gt;Markov decision process&lt;/a&gt; machine learning.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/headers.rs#L2&#34;&gt;headers&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Show the headers of a CSV. Or show the intersection of all headers between many CSV files.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/index.rs#L2&#34;&gt;index&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Create an index (📇) for a CSV. This is very quick (even the 15gb, 28m row NYC 311 dataset takes all of 15 seconds to index) &amp;amp; provides constant time indexing/random access into the CSV. With an index, &lt;code&gt;count&lt;/code&gt;, &lt;code&gt;sample&lt;/code&gt; &amp;amp; &lt;code&gt;slice&lt;/code&gt; work instantaneously; random access mode is enabled in &lt;code&gt;luau&lt;/code&gt;; and multithreading (🏎️) is enabled for the &lt;code&gt;frequency&lt;/code&gt;, &lt;code&gt;split&lt;/code&gt;, &lt;code&gt;stats&lt;/code&gt;, &lt;code&gt;schema&lt;/code&gt; &amp;amp; &lt;code&gt;tojsonl&lt;/code&gt; commands.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/input.rs#L2&#34;&gt;input&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Read CSV data with special quoting, trimming, line-skipping &amp;amp; UTF-8 transcoding rules. Typically used to &#34;normalize&#34; a CSV for further processing with other qsv commands.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/join.rs#L2&#34;&gt;join&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Inner, outer, right, cross, anti &amp;amp; semi joins. Automatically creates a simple, in-memory hash index to make it fast.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/joinp.rs#L2&#34;&gt;joinp&lt;/a&gt;&lt;br&gt;✨🚀🐻‍❄️&lt;/td&gt; &#xA;   &lt;td&gt;Inner, outer, cross, anti, semi &amp;amp; asof joins using the &lt;a href=&#34;https://www.pola.rs&#34;&gt;Pola.rs&lt;/a&gt; engine. Unlike the &lt;code&gt;join&lt;/code&gt; command, &lt;code&gt;joinp&lt;/code&gt; can process files larger than RAM, is multi-threaded, has join key validation, pre-join filtering, supports &lt;a href=&#34;https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/api/polars.DataFrame.join_asof.html&#34;&gt;asof joins&lt;/a&gt; &amp;amp; its output doesn&#39;t have duplicate columns. However, &lt;code&gt;joinp&lt;/code&gt; doesn&#39;t have an --ignore-case option &amp;amp; it doesn&#39;t support right outer joins.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/jsonl.rs#L2&#34;&gt;jsonl&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Convert newline-delimited JSON (&lt;a href=&#34;https://jsonlines.org/&#34;&gt;JSONL&lt;/a&gt;/&lt;a href=&#34;http://ndjson.org/&#34;&gt;NDJSON&lt;/a&gt;) to CSV. See &lt;code&gt;tojsonl&lt;/code&gt; command to convert CSV to JSONL.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;luau_deeplink&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/luau.rs#L2&#34;&gt;luau&lt;/a&gt; 👑&lt;br&gt;✨📇🌐 &lt;img src=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/docs/images/ckan.png&#34; alt=&#34;CKAN&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Create multiple new computed columns, filter rows, compute aggregations and build complex data pipelines by executing a &lt;a href=&#34;https://luau-lang.org&#34;&gt;Luau&lt;/a&gt; &lt;a href=&#34;https://github.com/Roblox/luau/releases/tag/0.591&#34;&gt;0.591&lt;/a&gt; expression/script for every row of a CSV file (&lt;a href=&#34;https://github.com/jqnatividad/qsv/raw/bb72c4ef369d192d85d8b7cc6e972c1b7df77635/tests/test_luau.rs#L254-L298&#34;&gt;sequential mode&lt;/a&gt;), or using &lt;a href=&#34;https://www.webopedia.com/definitions/random-access/&#34;&gt;random access&lt;/a&gt; with an index (&lt;a href=&#34;https://github.com/jqnatividad/qsv/raw/bb72c4ef369d192d85d8b7cc6e972c1b7df77635/tests/test_luau.rs#L367-L415&#34;&gt;random access mode&lt;/a&gt;).&lt;br&gt;Can process a single Luau expression or &lt;a href=&#34;https://github.com/dathere/qsv-lookup-tables#example&#34;&gt;full-fledged data-wrangling scripts using lookup tables&lt;/a&gt; with discrete BEGIN, MAIN and END sections.&lt;br&gt; It is not just another qsv command, it is qsv&#39;s &lt;a href=&#34;https://en.wikipedia.org/wiki/Domain-specific_language&#34;&gt;Domain-specific Language&lt;/a&gt; (DSL) with &lt;a href=&#34;https://github.com/jqnatividad/qsv/raw/113eee17b97882dc368b2e65fec52b86df09f78b/src/cmd/luau.rs#L1356-L2290&#34;&gt;numerous qsv-specific helper functions&lt;/a&gt; to build production data pipelines.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/partition.rs#L2&#34;&gt;partition&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Partition a CSV based on a column value.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/pseudo.rs#L2&#34;&gt;pseudo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Pseudonymization&#34;&gt;Pseudonymise&lt;/a&gt; the value of the given column by replacing them with an incremental identifier.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/python.rs#L2&#34;&gt;py&lt;/a&gt;&lt;br&gt;✨&lt;/td&gt; &#xA;   &lt;td&gt;Create a new computed column or filter rows by evaluating a python expression on every row of a CSV file. Python&#39;s &lt;a href=&#34;https://www.freecodecamp.org/news/python-f-strings-tutorial-how-to-use-f-strings-for-string-formatting/&#34;&gt;f-strings&lt;/a&gt; is particularly useful for extended formatting, &lt;a href=&#34;https://github.com/jqnatividad/qsv/raw/4cd00dca88addf0d287247fa27d40563b6d46985/src/cmd/python.rs#L23-L31&#34;&gt;with the ability to evaluate Python expressions as well&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/rename.rs#L2&#34;&gt;rename&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Rename the columns of a CSV efficiently.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/replace.rs#L2&#34;&gt;replace&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Replace CSV data using a regex. Applies the regex to each field individually.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/reverse.rs#L2&#34;&gt;reverse&lt;/a&gt;&lt;br&gt;🤯&lt;/td&gt; &#xA;   &lt;td&gt;Reverse order of rows in a CSV. Unlike the &lt;code&gt;sort --reverse&lt;/code&gt; command, it preserves the order of rows with the same key.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;safenames_deeplink&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/safenames.rs#L2&#34;&gt;safenames&lt;/a&gt;&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/docs/images/ckan.png&#34; alt=&#34;CKAN&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Modify headers of a CSV to only have &lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/safenames.rs#L5-L14&#34;&gt;&#34;safe&#34; names&lt;/a&gt; - guaranteed &#34;database-ready&#34;/&#34;CKAN-ready&#34; names.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/sample.rs#L2&#34;&gt;sample&lt;/a&gt;&lt;br&gt;📇🌐🏎️&lt;/td&gt; &#xA;   &lt;td&gt;Randomly draw rows (with optional seed) from a CSV using &lt;a href=&#34;https://en.wikipedia.org/wiki/Reservoir_sampling&#34;&gt;reservoir sampling&lt;/a&gt;, using memory proportional to the sample size. If an index is present, using random indexing with constant memory.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/schema.rs#L2&#34;&gt;schema&lt;/a&gt;&lt;br&gt;📇😣🏎️&lt;/td&gt; &#xA;   &lt;td&gt;Infer schema from CSV data, replete with data type &amp;amp; domain/range validation &amp;amp; output in &lt;a href=&#34;https://json-schema.org/&#34;&gt;JSON Schema&lt;/a&gt; format. Uses multithreading to go faster if an index is present. See &lt;code&gt;validate&lt;/code&gt; command to use the generated JSON Schema to validate if similar CSVs comply with the schema.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/search.rs#L2&#34;&gt;search&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Run a regex over a CSV. Applies the regex to each field individually &amp;amp; shows only matching rows.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/searchset.rs#L2&#34;&gt;searchset&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;Run multiple regexes over a CSV in a single pass.&lt;/em&gt; Applies the regexes to each field individually &amp;amp; shows only matching rows.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/select.rs#L2&#34;&gt;select&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Select, re-order, duplicate or drop columns.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/slice.rs#L2&#34;&gt;slice&lt;/a&gt;&lt;br&gt;📇🏎️&lt;/td&gt; &#xA;   &lt;td&gt;Slice rows from any part of a CSV. When an index is present, this only has to parse the rows in the slice (instead of all rows leading up to the start of the slice).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;snappy_deeplink&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/snappy.rs#L2&#34;&gt;snappy&lt;/a&gt;&lt;br&gt;🚀🌐&lt;/td&gt; &#xA;   &lt;td&gt;Does streaming compression/decompression of the input using Google&#39;s &lt;a href=&#34;https://github.com/google/snappy/raw/main/docs/README.md&#34;&gt;Snappy&lt;/a&gt; framing format (&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/#snappy-compressiondecompression&#34;&gt;more info&lt;/a&gt;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/sniff.rs#L2&#34;&gt;sniff&lt;/a&gt;&lt;br&gt;🌐 &lt;img src=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/docs/images/ckan.png&#34; alt=&#34;CKAN&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Quickly sniff &amp;amp; infer CSV metadata (delimiter, header row, preamble rows, quote character, flexible, is_utf8, average record length, number of records, content length &amp;amp; estimated number of records if sniffing a CSV on a URL, number of fields, field names &amp;amp; data types). It is also a general mime type detector.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/sort.rs#L2&#34;&gt;sort&lt;/a&gt;&lt;br&gt;🚀🤯&lt;/td&gt; &#xA;   &lt;td&gt;Sorts CSV data in alphabetical (with case-insensitive option), numerical, reverse, unique or random (with optional seed) order (See also &lt;code&gt;extsort&lt;/code&gt; &amp;amp; &lt;code&gt;sortcheck&lt;/code&gt; commands).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/sortcheck.rs#L2&#34;&gt;sortcheck&lt;/a&gt;&lt;br&gt;📇&lt;/td&gt; &#xA;   &lt;td&gt;Check if a CSV is sorted. With the --json options, also retrieve record count, sort breaks &amp;amp; duplicate count.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/split.rs#L2&#34;&gt;split&lt;/a&gt;&lt;br&gt;📇🏎️&lt;/td&gt; &#xA;   &lt;td&gt;Split one CSV file into many CSV files of N chunks. Uses multithreading to go faster if an index is present.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/sqlp.rs#L2&#34;&gt;sqlp&lt;/a&gt;&lt;br&gt;✨🚀🐻‍❄️&lt;/td&gt; &#xA;   &lt;td&gt;Run blazing-fast Polars SQL queries against several CSVs - converting queries to &lt;a href=&#34;https://pola-rs.github.io/polars-book/user-guide/sql/intro/&#34;&gt;fast LazyFrame expressions&lt;/a&gt;, processing larger than memory CSV files.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/stats.rs#L2&#34;&gt;stats&lt;/a&gt;&lt;br&gt;📇🤯🏎️&lt;/td&gt; &#xA;   &lt;td&gt;Compute &lt;a href=&#34;https://en.wikipedia.org/wiki/Summary_statistics&#34;&gt;summary statistics&lt;/a&gt; (sum, min/max/range, min/max length, mean, stddev, variance, nullcount, sparsity, quartiles, IQR, lower/upper fences, skewness, median, mode/s, antimode/s &amp;amp; cardinality) &amp;amp; make GUARANTEED data type inferences (Null, String, Float, Integer, Date, DateTime, Boolean) for each column in a CSV.&lt;br&gt;Uses multithreading to go faster if an index is present (with an index, can compile &#34;streaming&#34; stats on NYC&#39;s 311 data (15gb, 28m rows) in less than 20 seconds).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/table.rs#L2&#34;&gt;table&lt;/a&gt;&lt;br&gt;🤯&lt;/td&gt; &#xA;   &lt;td&gt;Show aligned output of a CSV using &lt;a href=&#34;https://github.com/BurntSushi/tabwriter&#34;&gt;elastic tabstops&lt;/a&gt;. To interactively view CSV files, qsv pairs well with &lt;a href=&#34;https://github.com/YS-L/csvlens#csvlens&#34;&gt;csvlens&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/to.rs#L2&#34;&gt;to&lt;/a&gt;&lt;br&gt;✨🚀&lt;/td&gt; &#xA;   &lt;td&gt;Convert CSV files to &lt;a href=&#34;https://www.postgresql.org&#34;&gt;PostgreSQL&lt;/a&gt;, &lt;a href=&#34;https://www.sqlite.org/index.html&#34;&gt;SQLite&lt;/a&gt;, XLSX, &lt;a href=&#34;https://parquet.apache.org&#34;&gt;Parquet&lt;/a&gt; and &lt;a href=&#34;https://datahub.io/docs/data-packages/tabular&#34;&gt;Data Package&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/tojsonl.rs#L3&#34;&gt;tojsonl&lt;/a&gt;&lt;br&gt;📇😣🏎️&lt;/td&gt; &#xA;   &lt;td&gt;Smartly converts CSV to a newline-delimited JSON (&lt;a href=&#34;https://jsonlines.org/&#34;&gt;JSONL&lt;/a&gt;/&lt;a href=&#34;http://ndjson.org/&#34;&gt;NDJSON&lt;/a&gt;). By scanning the CSV first, it &#34;smartly&#34; infers the appropriate JSON data type for each column. See &lt;code&gt;jsonl&lt;/code&gt; command to convert JSONL to CSV. Uses multithreading to go faster if an index is present.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/transpose.rs#L2&#34;&gt;transpose&lt;/a&gt;&lt;br&gt;🤯&lt;/td&gt; &#xA;   &lt;td&gt;Transpose rows/columns of a CSV.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/validate.rs#L2&#34;&gt;validate&lt;/a&gt;&lt;br&gt;📇🚀🌐&lt;/td&gt; &#xA;   &lt;td&gt;Validate CSV data blazingly-fast using &lt;a href=&#34;https://json-schema.org/draft/2020-12/json-schema-validation.html&#34;&gt;JSON Schema Validation&lt;/a&gt; &amp;amp; put invalid records into a separate file with an accompanying detailed validation error report file (e.g. &lt;em&gt;up to 350,000 rows/second&lt;/em&gt; using &lt;a href=&#34;https://github.com/jqnatividad/qsv/raw/master/resources/test/311_Service_Requests_from_2010_to_Present-2022-03-04.csv.schema.json&#34;&gt;NYC&#39;s 311 schema&lt;/a&gt; generated by the &lt;code&gt;schema&lt;/code&gt; command).&lt;br&gt;If no JSON schema file is provided, validates if a CSV conforms to the &lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/#rfc-4180-csv-standard&#34;&gt;RFC 4180 standard&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;div style=&#34;text-align: right&#34;&gt;&#xA; &lt;sub&gt;&lt;sup&gt;Performance metrics compiled on an M2 Pro 12-core Mac Mini with 32gb RAM&lt;/sup&gt;&lt;/sub&gt;&#xA;&lt;/div&gt; &#xA;&lt;p&gt;✨: enabled by a &lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/#feature-flags&#34;&gt;feature flag&lt;/a&gt;.&lt;br&gt; 📇: uses an index when available.&lt;br&gt; 🤯: loads entire CSV into memory, though &lt;code&gt;dedup&lt;/code&gt;, &lt;code&gt;stats&lt;/code&gt; &amp;amp; &lt;code&gt;transpose&lt;/code&gt; have &#34;streaming&#34; modes as well.&lt;br&gt; 😣: uses additional memory proportional to the cardinality of the columns in the CSV.&lt;br&gt; 🧠: expensive operations are memoized (cached) with available inter-session Redis caching for fetch commands.&lt;br&gt; 🐻‍❄️: command powered by &lt;a href=&#34;https://pola.rs&#34;&gt;Pola.rs&lt;/a&gt; engine.&lt;br&gt; 🤖: command uses Natural Language Processing &amp;amp; General AI techniques.&lt;br&gt; 🏎️: multithreaded and/or faster when an index (📇) is available.&lt;br&gt; 🚀: multithreaded even without an index.&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/docs/images/ckan.png&#34; alt=&#34;CKAN&#34;&gt; : has &lt;a href=&#34;https://ckan.org&#34;&gt;CKAN&lt;/a&gt;-aware integration options.&lt;br&gt; 🌐: has web-aware options.&lt;/p&gt; &#xA;&lt;h2&gt;Installation Options&lt;/h2&gt; &#xA;&lt;h3&gt;Option 1: Download Prebuilt Binaries&lt;/h3&gt; &#xA;&lt;p&gt;Full-featured prebuilt &lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/#variants&#34;&gt;binary variants&lt;/a&gt; of the latest qsv version for Linux, macOS &amp;amp; Windows are available &lt;a href=&#34;https://github.com/jqnatividad/qsv/releases/latest&#34;&gt;for download&lt;/a&gt;, including binaries compiled with &lt;a href=&#34;https://stackoverflow.com/questions/70745970/rust-nightly-vs-beta-version&#34;&gt;Rust Nightly&lt;/a&gt; (&lt;a href=&#34;https://github.com/jqnatividad/qsv/raw/master/docs/PERFORMANCE.md#nightly-release-builds&#34;&gt;more info&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;These prebuilt binaries are also built with CPU optimizations enabled for x86_64 (e.g. &lt;a href=&#34;https://en.wikipedia.org/wiki/SSE4#SSE4.2&#34;&gt;SSE4.2&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Advanced_Vector_Extensions#Advanced_Vector_Extensions_2&#34;&gt;AVX2&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Advanced_Vector_Extensions#Advanced_Vector_Extensions_512&#34;&gt;AVX512&lt;/a&gt;, etc. on Intel and AMD processors) and Apple Silicon processors (&lt;a href=&#34;https://eclecticlight.co/2021/08/06/accelerating-the-m1-mac-an-introduction-to-simd/&#34;&gt;ARM64 SIMD NEON&lt;/a&gt;) for even more performance gains.&lt;/p&gt; &#xA;&lt;p&gt;For Windows, an MSI Installer wrapping the x86_64-pc-windows-msvc build is also available for download.&lt;/p&gt; &#xA;&lt;h3&gt;Option 2: Homebrew&lt;/h3&gt; &#xA;&lt;p&gt;For &lt;a href=&#34;https://formulae.brew.sh/formula/qsv&#34;&gt;macOS and Linux (64-bit)&lt;/a&gt;, you can quickly install qsv with &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;. However, only the &lt;code&gt;apply&lt;/code&gt; and &lt;code&gt;luau&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/#feature-flags&#34;&gt;features&lt;/a&gt; are enabled.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install qsv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Option 3: Install with Rust&lt;/h3&gt; &#xA;&lt;p&gt;If you have &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;Rust installed&lt;/a&gt;, you can also install from source using Rust&#39;s cargo command[^1]:&lt;/p&gt; &#xA;&lt;p&gt;[^1]: Of course, you&#39;ll also need a linker &amp;amp; a C compiler. Linux users should generally install GCC or Clang, according to their distribution’s documentation. For example, if you use Ubuntu, you can install the &lt;code&gt;build-essential&lt;/code&gt; package. On macOS, you can get a C compiler by running &lt;code&gt;$ xcode-select --install&lt;/code&gt;. For Windows, this means installing &lt;a href=&#34;https://visualstudio.microsoft.com/downloads/&#34;&gt;Visual Studio 2022&lt;/a&gt;. When prompted for workloads, include &#34;Desktop Development with C++&#34;, the Windows 10 or 11 SDK &amp;amp; the English language pack, along with any other language packs your require.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo install qsv --locked --features all_features&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The binary will be installed in &lt;code&gt;~/.cargo/bin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To install different &lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/#variants&#34;&gt;variants&lt;/a&gt; and enable optional features, use cargo &lt;code&gt;--features&lt;/code&gt; (see &lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/#feature-flags&#34;&gt;Feature Flags&lt;/a&gt; for more info):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# to install qsv with all features enabled&#xA;cargo install qsv --locked --bin qsv --features feature_capable,apply,generate,luau,fetch,foreach,python,to,self_update,polars&#xA;# or shorthand&#xA;cargo install qsv --locked --bin qsv -F all_features&#xA;&#xA;# or enable only the apply and polars features&#xA;cargo install qsv --locked --bin qsv -F feature_capable,apply,polars&#xA;&#xA;# or to install qsvlite&#xA;cargo install qsv --locked --bin qsvlite -F lite&#xA;&#xA;# or to install qsvdp&#xA;cargo install qsv --locked --bin qsvdp -F datapusher_plus,luau&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Option 4: Compile from Source&lt;/h3&gt; &#xA;&lt;p&gt;Compiling from source also works similarly[^1]:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/jqnatividad/qsv.git&#xA;cd qsv&#xA;cargo build --release --locked --bin qsv --features all_features&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The compiled binary will end up in &lt;code&gt;./target/release/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To compile different &lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/#variants&#34;&gt;variants&lt;/a&gt; and enable optional &lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/#feature-flags&#34;&gt;features&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# to compile qsv with all features enabled&#xA;cargo build --release --locked --bin qsv --features feature_capable,apply,generate,luau,fetch,foreach,python,to,self_update,polars&#xA;# shorthand&#xA;cargo build --release --locked --bin qsv -F all_features&#xA;&#xA;# or build qsv with only the fetch and foreach features enabled&#xA;cargo build --release --locked --bin qsv -F feature_capable,fetch,foreach&#xA;&#xA;# for qsvlite&#xA;cargo build --release --locked --bin qsvlite -F lite&#xA;&#xA;# for qsvdp&#xA;cargo build --release --locked --bin qsvdp -F datapusher_plus,luau&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE: To build with Rust nightly, see &lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/docs/PERFORMANCE.md#nightly-release-builds&#34;&gt;Nightly Release Builds&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Variants&lt;/h3&gt; &#xA;&lt;p&gt;There are three binary variants of qsv:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;qsv&lt;/code&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/#feature-flags&#34;&gt;feature&lt;/a&gt;-capable(✨), with the &lt;a href=&#34;https://github.com/jqnatividad/qsv/releases/latest&#34;&gt;prebuilt binaries&lt;/a&gt; enabling all applicable features except Python [^2]&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;qsvlite&lt;/code&gt; - all features disabled (~13% of the size of &lt;code&gt;qsv&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;qsvdp&lt;/code&gt; - optimized for use with &lt;a href=&#34;https://github.com/dathere/datapusher-plus&#34;&gt;DataPusher+&lt;/a&gt; with only DataPusher+ relevant commands; an embedded &lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/#luau_deeplink&#34;&gt;&lt;code&gt;luau&lt;/code&gt;&lt;/a&gt; interpreter; &lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/#applydp_deeplink&#34;&gt;&lt;code&gt;applydp&lt;/code&gt;&lt;/a&gt;, a slimmed-down version of the &lt;code&gt;apply&lt;/code&gt; feature; the &lt;code&gt;--progressbar&lt;/code&gt; option disabled; and the self-update only checking for new releases, requiring an explicit &lt;code&gt;--update&lt;/code&gt; (~12% of the the size of &lt;code&gt;qsv&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[^2]: The &lt;code&gt;foreach&lt;/code&gt; feature is not available on Windows. The &lt;code&gt;python&lt;/code&gt; feature is not enabled on the prebuilt binaries. Compile qsv with Python development environment installed if you want to enable the &lt;code&gt;python&lt;/code&gt; feature (Python 3.7 &amp;amp; above supported). The &lt;code&gt;luau&lt;/code&gt; feature is enabled by default on the prebuilt binaries if the platform supports it.&lt;/p&gt; &#xA;&lt;h2&gt;Regular Expression Syntax&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;--select&lt;/code&gt; option and several commands (&lt;code&gt;apply&lt;/code&gt;, &lt;code&gt;applydp&lt;/code&gt;, &lt;code&gt;replace&lt;/code&gt;, &lt;code&gt;schema&lt;/code&gt;, &lt;code&gt;search&lt;/code&gt;, &lt;code&gt;searchset&lt;/code&gt;, &lt;code&gt;select&lt;/code&gt; &amp;amp; &lt;code&gt;sqlp&lt;/code&gt;) allow the user to specify regular expressions. We use the &lt;a href=&#34;https://docs.rs/regex&#34;&gt;&lt;code&gt;regex&lt;/code&gt;&lt;/a&gt; crate to parse, compile and execute these expressions. [^3]&lt;/p&gt; &#xA;&lt;p&gt;[^3]: This is the same regex engine used by &lt;a href=&#34;https://github.com/BurntSushi/ripgrep#ripgrep-rg&#34;&gt;&lt;code&gt;ripgrep&lt;/code&gt;&lt;/a&gt; - the &lt;a href=&#34;https://blog.burntsushi.net/ripgrep/&#34;&gt;blazingly fast grep replacement&lt;/a&gt; that powers Visual Studio&#39;s &lt;a href=&#34;https://lab.cccb.org/en/arthur-c-clarke-any-sufficiently-advanced-technology-is-indistinguishable-from-magic/&#34;&gt;magical&lt;/a&gt; &lt;a href=&#34;https://github.com/microsoft/vscode-ripgrep&#34;&gt;&#34;Find in Files&#34;&lt;/a&gt; feature.&lt;/p&gt; &#xA;&lt;p&gt;Its syntax can be found &lt;a href=&#34;https://docs.rs/regex/latest/regex/#syntax&#34;&gt;here&lt;/a&gt; and &lt;em&gt;&#34;is similar to other regex engines, but it lacks several features that are not known how to implement efficiently. This includes, but is not limited to, look-around and backreferences. In exchange, all regex searches in this crate have worst case O(m * n) time complexity, where m is proportional to the size of the regex and n is proportional to the size of the string being searched.&#34;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to test your regular expressions, &lt;a href=&#34;https://regex101.com&#34;&gt;regex101&lt;/a&gt; supports the syntax used by the &lt;code&gt;regex&lt;/code&gt; crate. Just select the &#34;Rust&#34; flavor.&lt;/p&gt; &#xA;&lt;h2&gt;File formats&lt;/h2&gt; &#xA;&lt;p&gt;qsv recognizes UTF-8/ASCII encoded, CSV (&lt;code&gt;.csv&lt;/code&gt;) &amp;amp; TSV files (&lt;code&gt;.tsv&lt;/code&gt; &amp;amp; &lt;code&gt;.tab&lt;/code&gt;). CSV files are assumed to have &#34;,&#34; (comma) as a delimiter, and TSV files, &#34;\t&#34; (tab) as a delimiter. The delimiter is a single ascii character that can be set either by the &lt;code&gt;--delimiter&lt;/code&gt; command-line option or with the &lt;code&gt;QSV_DEFAULT_DELIMITER&lt;/code&gt; environment variable or automatically detected when &lt;code&gt;QSV_SNIFF_DELIMITER&lt;/code&gt; is set.&lt;/p&gt; &#xA;&lt;p&gt;When using the &lt;code&gt;--output&lt;/code&gt; option, qsv will UTF-8 encode the file &amp;amp; automatically change the delimiter used in the generated file based on the file extension - i.e. comma for &lt;code&gt;.csv&lt;/code&gt;, tab for &lt;code&gt;.tsv&lt;/code&gt; &amp;amp; &lt;code&gt;.tab&lt;/code&gt; files.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://jsonlines.org/&#34;&gt;JSONL&lt;/a&gt;/&lt;a href=&#34;http://ndjson.org/&#34;&gt;NDJSON&lt;/a&gt; files are also recognized &amp;amp; converted to/from CSV with the &lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/jsonl.rs#L11&#34;&gt;&lt;code&gt;jsonl&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/tojsonl.rs#L12&#34;&gt;&lt;code&gt;tojsonl&lt;/code&gt;&lt;/a&gt; commands respectively.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;fetch&lt;/code&gt; &amp;amp; &lt;code&gt;fetchpost&lt;/code&gt; commands also produces JSONL files when its invoked without the &lt;code&gt;--new-column&lt;/code&gt; option &amp;amp; TSV files with the &lt;code&gt;--report&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;excel&lt;/code&gt;, &lt;code&gt;safenames&lt;/code&gt;, &lt;code&gt;sniff&lt;/code&gt;, &lt;code&gt;sortcheck&lt;/code&gt; &amp;amp; &lt;code&gt;validate&lt;/code&gt; commands produce JSON files with their JSON options following the &lt;a href=&#34;https://jsonapi.org/format/&#34;&gt;JSON API 1.1 specification&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;schema&lt;/code&gt; command produces a &lt;a href=&#34;https://json-schema.org/draft/2020-12/json-schema-validation.html&#34;&gt;JSON Schema Validation (Draft 7)&lt;/a&gt; file with the &#34;.schema.json&#34; file extension, which can be used with the &lt;code&gt;validate&lt;/code&gt; command to validate other CSV files with a similar schema.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;excel&lt;/code&gt; command recognizes Excel &amp;amp; Open Document Spreadsheet(ODS) files (&lt;code&gt;.xls&lt;/code&gt;, &lt;code&gt;.xlsx&lt;/code&gt;, &lt;code&gt;.xlsm&lt;/code&gt;, &lt;code&gt;.xlsb&lt;/code&gt; &amp;amp; &lt;code&gt;.ods&lt;/code&gt; files).&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;to&lt;/code&gt; command converts CSVs to &lt;code&gt;.xlsx&lt;/code&gt;, &lt;a href=&#34;https://parquet.apache.org&#34;&gt;Parquet&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://datahub.io/docs/data-packages/tabular&#34;&gt;Data Package&lt;/a&gt; files, and populates &lt;a href=&#34;https://www.postgresql.org&#34;&gt;PostgreSQL&lt;/a&gt; and &lt;a href=&#34;https://www.sqlite.org/index.html&#34;&gt;SQLite&lt;/a&gt; databases.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;sqlp&lt;/code&gt; command produces query results in CSV, JSON, Parquet &amp;amp; &lt;a href=&#34;https://arrow.apache.org/docs/format/Columnar.html#ipc-file-format&#34;&gt;Arrow IPC&lt;/a&gt; formats. Polars SQL also supports reading external files directly with its &lt;code&gt;read_ndjson&lt;/code&gt;, &lt;code&gt;read_csv&lt;/code&gt;, &lt;code&gt;read_parquet&lt;/code&gt; &amp;amp; &lt;code&gt;read_ipc&lt;/code&gt; &lt;a href=&#34;https://github.com/pola-rs/polars/raw/c7fa66a1340418789ec66bdedad6654281afa0ab/polars/polars-sql/src/table_functions.rs#L9-L36&#34;&gt;table functions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Snappy Compression/Decompression&lt;/h3&gt; &#xA;&lt;p&gt;qsv supports &lt;em&gt;automatic compression/decompression&lt;/em&gt; using the &lt;a href=&#34;https://github.com/google/snappy/raw/main/framing_format.txt&#34;&gt;Snappy frame format&lt;/a&gt;. Snappy was chosen instead of more popular compression formats like gzip because it was designed for &lt;a href=&#34;https://github.com/google/snappy/tree/main/docs#readme&#34;&gt;high-performance streaming compression &amp;amp; decompression&lt;/a&gt; (up to 2.58 gb/sec compression, 0.89 gb/sec decompression).&lt;/p&gt; &#xA;&lt;p&gt;For all commands except the &lt;code&gt;index&lt;/code&gt;, &lt;code&gt;extdedup&lt;/code&gt; &amp;amp; &lt;code&gt;extsort&lt;/code&gt; commands, if the input file has an &#34;.sz&#34; extension, qsv will &lt;em&gt;automatically&lt;/em&gt; do streaming decompression as it reads it. Further, if the input file has an extended CSV/TSV &#34;.sz&#34; extension (e.g nyc311.csv.sz/nyc311.tsv.sz/nyc311.tab.sz), qsv will also use the file extension to determine the delimiter to use.&lt;/p&gt; &#xA;&lt;p&gt;Similarly, if the &lt;code&gt;--output&lt;/code&gt; file has an &#34;.sz&#34; extension, qsv will &lt;em&gt;automatically&lt;/em&gt; do streaming compression as it writes it. If the output file has an extended CSV/TSV &#34;.sz&#34; extension, qsv will also use the file extension to determine the delimiter to use.&lt;/p&gt; &#xA;&lt;p&gt;Note however that compressed files cannot be indexed, so index-accelerated commands (&lt;code&gt;frequency&lt;/code&gt;, &lt;code&gt;schema&lt;/code&gt;, &lt;code&gt;split&lt;/code&gt;, &lt;code&gt;stats&lt;/code&gt;, &lt;code&gt;tojsonl&lt;/code&gt;) will not be multi-threaded. Random access is also disabled without an index, so &lt;code&gt;slice&lt;/code&gt; will not be instantaneous and &lt;code&gt;luau&lt;/code&gt;&#39;s random-access mode will not be available.&lt;/p&gt; &#xA;&lt;p&gt;There is also a dedicated &lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/snappy.rs#L2&#34;&gt;&lt;code&gt;snappy&lt;/code&gt;&lt;/a&gt; command with four subcommands for direct snappy file operations — a multithreaded &lt;code&gt;compress&lt;/code&gt; subcommand (4-5x faster than the built-in, single-threaded auto-compression); a &lt;code&gt;decompress&lt;/code&gt; subcommand with detailed compression metadata; a &lt;code&gt;check&lt;/code&gt; subcommand to quickly inspect if a file has a Snappy header; and a &lt;code&gt;validate&lt;/code&gt; subcommand to confirm if a Snappy file is valid.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;snappy&lt;/code&gt; command can be used to compress/decompress ANY file, not just CSV/TSV files.&lt;/p&gt; &#xA;&lt;p&gt;Using the &lt;code&gt;snappy&lt;/code&gt; command, we can compress NYC&#39;s 311 data (15gb, 28m rows) to 4.95 gb in &lt;em&gt;5.77 seconds&lt;/em&gt; with the multithreaded &lt;code&gt;compress&lt;/code&gt; subcommand - &lt;em&gt;2.58 gb/sec&lt;/em&gt; with a 0.33 (3.01:1) compression ratio. With &lt;code&gt;snappy decompress&lt;/code&gt;, we can roundtrip decompress the same file in &lt;em&gt;16.71 seconds&lt;/em&gt; - &lt;em&gt;0.89 gb/sec&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Compare that to &lt;a href=&#34;https://infozip.sourceforge.net/Zip.html&#34;&gt;zip 3.0&lt;/a&gt;, which compressed the same file to 2.9 gb in &lt;em&gt;248.3 seconds on the same machine - 43x slower at 0.06 gb/sec&lt;/em&gt; with a 0.19 (5.17:1) compression ratio - for just an additional 14% (2.45 gb) of saved space. zip also took 4.3x longer to roundtrip decompress the same file in &lt;em&gt;72 seconds&lt;/em&gt; - &lt;em&gt;0.20 gb/sec&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;RFC 4180 CSV Standard&lt;/h2&gt; &#xA;&lt;p&gt;qsv follows the &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc4180&#34;&gt;RFC 4180&lt;/a&gt; CSV standard. However, in real life, CSV formats vary significantly &amp;amp; qsv is actually not strictly compliant with the specification so it can process &#34;real-world&#34; CSV files. qsv leverages the awesome &lt;a href=&#34;https://docs.rs/csv/latest/csv/&#34;&gt;Rust CSV&lt;/a&gt; crate to read/write CSV files.&lt;/p&gt; &#xA;&lt;p&gt;Click &lt;a href=&#34;https://docs.rs/csv-core/latest/csv_core/struct.Reader.html#rfc-4180&#34;&gt;here&lt;/a&gt; to find out more about how qsv conforms to the standard using this crate.&lt;/p&gt; &#xA;&lt;p&gt;When dealing with &#34;atypical&#34; CSV files, you can use the &lt;code&gt;input&lt;/code&gt; command to normalize them to be RFC 4180-compliant.&lt;/p&gt; &#xA;&lt;h2&gt;UTF-8 Encoding&lt;/h2&gt; &#xA;&lt;p&gt;qsv requires UTF-8 encoded input (of which ASCII is a subset).&lt;/p&gt; &#xA;&lt;p&gt;Should you need to re-encode CSV/TSV files, you can use the &lt;code&gt;input&lt;/code&gt; command to &#34;lossy save&#34; to UTF-8 - replacing invalid UTF-8 sequences with &lt;code&gt;�&lt;/code&gt; (&lt;a href=&#34;https://doc.rust-lang.org/std/char/constant.REPLACEMENT_CHARACTER.html&#34;&gt;U+FFFD REPLACEMENT CHARACTER&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, if you want to truly transcode to UTF-8, there are several utilities like &lt;a href=&#34;https://en.wikipedia.org/wiki/Iconv&#34;&gt;&lt;code&gt;iconv&lt;/code&gt;&lt;/a&gt; that you can use to do so on &lt;a href=&#34;https://stackoverflow.com/questions/805418/how-can-i-find-encoding-of-a-file-via-a-script-on-linux&#34;&gt;Linux/macOS&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://superuser.com/questions/1163753/converting-text-file-to-utf-8-on-windows-command-prompt&#34;&gt;Windows&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Windows Usage Note&lt;/h3&gt; &#xA;&lt;p&gt;Unlike other modern operating systems, Microsoft Windows&#39; &lt;a href=&#34;https://stackoverflow.com/questions/66072117/why-does-windows-use-utf-16le&#34;&gt;default encoding is UTF16-LE&lt;/a&gt;. This will cause problems when redirecting qsv&#39;s output to a CSV file &amp;amp; trying to open it with Excel (which ignores the comma delimiter, with everything in the first column if the file is UTF16-LE encoded):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# the following command will produce a UTF16-LE encoded CSV file on Windows&#xA;qsv stats wcp.csv &amp;gt; wcpstats.csv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which is weird, since you would think &lt;a href=&#34;https://answers.microsoft.com/en-us/msoffice/forum/all/opening-csv-file-with-utf16-encoding-in-excel-2010/ed522cb9-e88d-4b82-b88e-a2d4bd99f874?auth=1&#34;&gt;Microsoft&#39;s own Excel would properly recognize UTF16-LE encoded CSV files&lt;/a&gt;. Regardless, to create a properly UTF-8 encoded file on Windows, use the &lt;code&gt;--output&lt;/code&gt; option instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# so instead of redirecting stdout to a file&#xA;qsv stats wcp.csv &amp;gt; wcpstats.csv&#xA;&#xA;# do this instead&#xA;qsv stats wcp.csv --output wcpstats.csv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Interpreters&lt;/h2&gt; &#xA;&lt;p&gt;For complex data-wrangling tasks, you can use Luau and Python scripts.&lt;/p&gt; &#xA;&lt;h3&gt;Luau&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://luau-lang.org&#34;&gt;Luau&lt;/a&gt; is a fast, small, safe, gradually typed, statically linked, embeddable scripting language derived from &lt;a href=&#34;https://www.lua.org/about.html&#34;&gt;Lua&lt;/a&gt;. It lies at the &lt;a href=&#34;https://luau-lang.org/2022/11/04/luau-origins-and-evolution.html&#34;&gt;heart of Roblox technology&lt;/a&gt; - powering all it&#39;s user generated content, with &lt;a href=&#34;https://en.wikipedia.org/wiki/Roblox&#34;&gt;Roblox&lt;/a&gt;&#39;s own internal code having more than 2 millions lines of Luau.&lt;/p&gt; &#xA;&lt;p&gt;It has &lt;a href=&#34;https://luau-lang.org/sandbox&#34;&gt;sandboxing&lt;/a&gt;, &lt;a href=&#34;https://luau-lang.org/typecheck&#34;&gt;type-checking&lt;/a&gt;, &lt;a href=&#34;https://luau-lang.org/syntax&#34;&gt;additional operators&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://luau-lang.org/performance&#34;&gt;increased performance&lt;/a&gt; while &lt;a href=&#34;https://luau-lang.org/compatibility&#34;&gt;maintaining compatibility with Lua&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://benchmarksgame-team.pages.debian.net/benchmarksgame/fastest/lua-python3.html&#34;&gt;Lua is faster than Python&lt;/a&gt; &amp;amp; Luau is even faster still - more so, as qsv precompiles Luau into bytecode. In addition, &lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/luau.rs#L2&#34;&gt;&lt;code&gt;luau&lt;/code&gt;&lt;/a&gt; is embedded into qsv, has debug logging, can do aggregations with its &lt;code&gt;--begin&lt;/code&gt; &amp;amp; &lt;code&gt;--end&lt;/code&gt; options &amp;amp; has no external dependencies unlike the &lt;code&gt;py&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;It also allows mapping of multiple new computed columns, supports random access with indexed CSV files, and has &lt;a href=&#34;https://github.com/jqnatividad/qsv/raw/c0c2d5ab3e4ea9cc0e861c6ad41652677ffc4f20/src/cmd/luau.rs#L1250-L1931&#34;&gt;several helper functions&lt;/a&gt; to help ease the development of &lt;a href=&#34;https://github.com/jqnatividad/qsv/raw/4e521b177ea3a6a06c83222458bb1349a67606f4/tests/test_luau.rs#L524-L571&#34;&gt;full-fledged data-wrangling scripts&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As date manipulation is often needed, we&#39;re also preloading the &lt;a href=&#34;https://tieske.github.io/date/&#34;&gt;LuaDate&lt;/a&gt; module.&lt;/p&gt; &#xA;&lt;p&gt;Finally, as &lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/#luau_deeplink&#34;&gt;qsv&#39;s DSL&lt;/a&gt; (👑), &lt;code&gt;luau&lt;/code&gt; will gain even more features over time compared to the &lt;code&gt;python&lt;/code&gt; feature.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Roblox/luau/releases/tag/0.591&#34;&gt;Luau 0.591&lt;/a&gt; is currently embedded - qsv&#39;s policy is to use the latest stable Luau version at the time of each qsv release.&lt;/p&gt; &#xA;&lt;h3&gt;Python&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;python&lt;/code&gt; feature is NOT enabled by default on the prebuilt binaries as its dynamically linked to python libraries at runtime, which presents distribution issues, as various operating systems have differing Python versions.&lt;/p&gt; &#xA;&lt;p&gt;If you wish to enable the &lt;code&gt;python&lt;/code&gt; feature - you&#39;ll just have to install/compile from source, making sure you have the development libraries for the desired Python version (Python 3.7 and above are supported) installed when doing so (e.g. on Debian/Ubuntu - &lt;code&gt;apt-get install python-dev&lt;/code&gt;; on CentOS/RedHat/Amazon Linux - &lt;code&gt;yum install python-devel&lt;/code&gt;; on Windows and macOS - use the &lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;Python installer&lt;/a&gt; for the desired version).&lt;/p&gt; &#xA;&lt;p&gt;If you plan to distribute your manually built &lt;code&gt;qsv&lt;/code&gt; with the &lt;code&gt;python&lt;/code&gt; feature, &lt;code&gt;qsv&lt;/code&gt; will look for the specific version of Python shared libraries (libpython* on Linux/macOS, python*.dll on Windows) against which it was compiled starting with the current directory &amp;amp; abort with an error if not found, detailing the Python library it was looking for.&lt;/p&gt; &#xA;&lt;p&gt;Note that this will happen on qsv startup, even if you&#39;re NOT running the &lt;code&gt;py&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;When building from source - &lt;a href=&#34;https://pyo3.rs&#34;&gt;PyO3&lt;/a&gt; - the underlying crate that enables the &lt;code&gt;python&lt;/code&gt; feature, uses a build script to determine the Python version &amp;amp; set the correct linker arguments. By default it uses the python3 executable. You can override this by setting &lt;code&gt;PYO3_PYTHON&lt;/code&gt; (e.g., &lt;code&gt;PYO3_PYTHON=python3.7&lt;/code&gt;), before installing/compiling qsv. See the &lt;a href=&#34;https://pyo3.rs/v0.17.1/building_and_distribution.html&#34;&gt;PyO3 User Guide&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;Consider using the &lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/src/cmd/luau.rs#L2&#34;&gt;&lt;code&gt;luau&lt;/code&gt;&lt;/a&gt; command instead of the &lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/(/src/cmd/python.rs#L2)&#34;&gt;&lt;code&gt;py&lt;/code&gt;&lt;/a&gt; command if the operation you&#39;re trying to do can be done with &lt;code&gt;luau&lt;/code&gt; - as &lt;code&gt;luau&lt;/code&gt; is statically linked, has no external dependencies, much faster than &lt;code&gt;py&lt;/code&gt;, can do aggregations, supports random access, has a bevy of qsv helper functions, and allows mapping of multiple new columns.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;py&lt;/code&gt; command cannot do aggregations because &lt;a href=&#34;https://pyo3.rs/v0.17.2/memory.html#gil-bound-memory&#34;&gt;PyO3&#39;s GIL-bound memory&lt;/a&gt; limitations will quickly consume a lot of memory (see &lt;a href=&#34;https://github.com/jqnatividad/qsv/issues/449#issuecomment-1226095316&#34;&gt;issue 449&lt;/a&gt; for details). To prevent this, the &lt;code&gt;py&lt;/code&gt; command processes CSVs in batches (default: 30,000 records), with a GIL pool for each batch, so no globals are available across batches.&lt;/p&gt; &#xA;&lt;h2&gt;Memory Management&lt;/h2&gt; &#xA;&lt;p&gt;qsv supports three memory allocators - mimalloc (default), jemalloc and the standard allocator.&lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/docs/PERFORMANCE.md#memory-allocator&#34;&gt;Memory Allocator&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;p&gt;It also has Out-of-Memory prevention, with two modes - NORMAL (default) &amp;amp; CONSERVATIVE.&lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/docs/PERFORMANCE.md#out-of-memory-oom-prevention&#34;&gt;Out-of-Memory Prevention&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h2&gt;Environment Variables &amp;amp; dotenv file support&lt;/h2&gt; &#xA;&lt;p&gt;qsv supports an extensive list of environment variables and supports &lt;code&gt;.env&lt;/code&gt; files to set them.&lt;/p&gt; &#xA;&lt;p&gt;For details, see &lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/docs/ENVIRONMENT_VARIABLES.md&#34;&gt;Environment Variables&lt;/a&gt; and the &lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/dotenv.template.yaml&#34;&gt;&lt;code&gt;dotenv.template.yaml&lt;/code&gt;&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Feature Flags&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;qsv&lt;/code&gt; has several features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;mimalloc&lt;/code&gt; (default) - use the mimalloc allocator (see &lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/docs/PERFORMANCE.md#memory-allocator&#34;&gt;Memory Allocator&lt;/a&gt; for more info).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;jemallocator&lt;/code&gt; - use the jemalloc allocator (see &lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/docs/PERFORMANCE.md#memory-allocator&#34;&gt;Memory Allocator&lt;/a&gt; for more info).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;apply&lt;/code&gt; - enable &lt;code&gt;apply&lt;/code&gt; command. This swiss-army knife of CSV transformations is very powerful, but it has a lot of dependencies that increases both compile time and binary size.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;fetch&lt;/code&gt; - enables the &lt;code&gt;fetch&lt;/code&gt; &amp;amp; &lt;code&gt;fetchpost&lt;/code&gt; commands.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;foreach&lt;/code&gt; - enable &lt;code&gt;foreach&lt;/code&gt; command (not valid for Windows).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;geocode&lt;/code&gt; - enable &lt;code&gt;geocode&lt;/code&gt; command. This command uses an updateable copy of the Geonames Cities database which is ~2.5MB in size.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;generate&lt;/code&gt; - enable &lt;code&gt;generate&lt;/code&gt; command.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;luau&lt;/code&gt; - enable &lt;code&gt;luau&lt;/code&gt; command. Embeds a &lt;a href=&#34;https://luau-lang.org&#34;&gt;Luau&lt;/a&gt; interpreter into qsv. &lt;a href=&#34;https://luau-lang.org/2022/11/04/luau-origins-and-evolution.html&#34;&gt;Luau has type-checking, sandboxing, additional language operators, increased performance &amp;amp; other improvements&lt;/a&gt; over Lua.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;polars&lt;/code&gt; - enables all &lt;a href=&#34;https://pola.rs&#34;&gt;Polars&lt;/a&gt;-powered commands (currently, &lt;code&gt;joinp&lt;/code&gt; and &lt;code&gt;sqlp&lt;/code&gt;). Note that Polars is a very powerful library, but it has a lot of dependencies that drastically increases both compile time and binary size.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;python&lt;/code&gt; - enable &lt;code&gt;py&lt;/code&gt; command. Note that qsv will look for the shared library for the Python version (Python 3.7 &amp;amp; above supported) it was compiled against &amp;amp; will abort on startup if the library is not found, even if you&#39;re NOT using the &lt;code&gt;py&lt;/code&gt; command. Check &lt;a href=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/#python&#34;&gt;Python&lt;/a&gt; section for more info.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;to&lt;/code&gt; - enables the &lt;code&gt;to&lt;/code&gt; command. Note that enabling this feature will also noticeably increase both compile time and binary size.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;self_update&lt;/code&gt; - enable self-update engine, checking GitHub for the latest release. Note that if you manually built qsv, &lt;code&gt;self-update&lt;/code&gt; will only check for new releases. It will NOT offer the choice to update itself to the prebuilt binaries published on GitHub. You need not worry that your manually built qsv will be overwritten by a self-update.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;feature_capable&lt;/code&gt; - enable to build &lt;code&gt;qsv&lt;/code&gt; binary variant which is feature-capable.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;all_features&lt;/code&gt; - enable to build &lt;code&gt;qsv&lt;/code&gt; binary variant with all features enabled (apply,fetch,foreach,generate,luau,polars,python,to,self_update).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;lite&lt;/code&gt; - enable to build &lt;code&gt;qsvlite&lt;/code&gt; binary variant with all features disabled.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;datapusher_plus&lt;/code&gt; - enable to build &lt;code&gt;qsvdp&lt;/code&gt; binary variant - the &lt;a href=&#34;https://github.com/dathere/datapusher-plus&#34;&gt;DataPusher+&lt;/a&gt; optimized qsv binary.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;nightly&lt;/code&gt; - enable to turn on nightly/unstable features in the &lt;code&gt;rand&lt;/code&gt;, &lt;code&gt;regex&lt;/code&gt;, &lt;code&gt;hashbrown&lt;/code&gt; &amp;amp; &lt;code&gt;pyo3&lt;/code&gt; crates when building with Rust nightly/unstable.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ℹ️ &lt;strong&gt;NOTE:&lt;/strong&gt; &lt;code&gt;qsvlite&lt;/code&gt;, as the name implies, always has &lt;strong&gt;non-default features disabled&lt;/strong&gt;. &lt;code&gt;qsv&lt;/code&gt; can be built with any combination of the above features using the cargo &lt;code&gt;--features&lt;/code&gt; &amp;amp; &lt;code&gt;--no-default-features&lt;/code&gt; flags. The prebuilt &lt;code&gt;qsv&lt;/code&gt; binaries has &lt;strong&gt;all applicable features valid for the target platform&lt;/strong&gt;[^2].&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Minimum Supported Rust Version&lt;/h2&gt; &#xA;&lt;p&gt;qsv&#39;s MSRV policy is to require the latest &lt;a href=&#34;https://github.com/rust-lang/rust/raw/master/RELEASES.md&#34;&gt;Rust version&lt;/a&gt; that is &lt;a href=&#34;https://formulae.brew.sh/formula/rust#default&#34;&gt;supported by Homebrew&lt;/a&gt;, currently &lt;a href=&#34;https://formulae.brew.sh/formula/rust&#34;&gt;&lt;img src=&#34;https://img.shields.io/homebrew/v/rust?logo=homebrew&#34; alt=&#34;HomeBrew&#34;&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Tab Completion&lt;/h2&gt; &#xA;&lt;p&gt;qsv&#39;s command-line options are quite extensive. Thankfully, since it uses &lt;a href=&#34;http://docopt.org/&#34;&gt;docopt&lt;/a&gt; for CLI processing, we can take advantage of &lt;a href=&#34;https://github.com/docopt/docopt.rs#tab-completion-support&#34;&gt;docopt.rs&#39; tab completion support&lt;/a&gt; to make it easier to use qsv at the command-line (currently, only bash shell is supported):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# install docopt-wordlist&#xA;cargo install docopt&#xA;&#xA;# IMPORTANT: run these commands from the root directory of your qsv git repository&#xA;# to setup bash qsv tab completion&#xA;echo &#34;DOCOPT_WORDLIST_BIN=\&#34;$(which docopt-wordlist)&#34;\&#34; &amp;gt;&amp;gt; $HOME/.bash_completion&#xA;echo &#34;source \&#34;$(pwd)/scripts/docopt-wordlist.bash\&#34;&#34; &amp;gt;&amp;gt; $HOME/.bash_completion&#xA;echo &#34;complete -F _docopt_wordlist_commands qsv&#34; &amp;gt;&amp;gt; $HOME/.bash_completion&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;qsv has ~1,170 tests in the &lt;a href=&#34;https://github.com/jqnatividad/qsv/tree/master/tests&#34;&gt;tests&lt;/a&gt; directory. Each command has its own test suite in a separate file with the convention &lt;code&gt;test_&amp;lt;COMMAND&amp;gt;.rs&lt;/code&gt;. Apart from preventing regressions, the tests also serve as good illustrative examples, and are often linked from the usage text of each corresponding command.&lt;/p&gt; &#xA;&lt;p&gt;To test each binary variant:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# to test qsv&#xA;cargo test --features all_features&#xA;&#xA;# to test qsvlite&#xA;cargo test --features lite&#xA;&#xA;# to test qsvdp&#xA;cargo test --features datapusher_plus,luau&#xA;&#xA;# to test a specific command&#xA;# here we test only stats and use the&#xA;# t alias for test and the -F shortcut for --features&#xA;cargo t stats -F all_features&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Dual-licensed under MIT or the &lt;a href=&#34;https://unlicense.org&#34;&gt;UNLICENSE&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsor&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;qsv was made possible by&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://datHere.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jqnatividad/qsv/master/docs/images/datHere-logo-withtagline.png&#34; alt=&#34;datHere Logo&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;Standards-based, best-of-breed, open source solutions&lt;br&gt;to make your &lt;strong&gt;Data Useful, Usable &amp;amp; Used.&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Naming Collision&lt;/h2&gt; &#xA;&lt;p&gt;This project is unrelated to &lt;a href=&#34;https://www.intel.com/content/www/us/en/architecture-and-technology/quick-sync-video/quick-sync-video-general.html&#34;&gt;Intel&#39;s Quick Sync Video&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>