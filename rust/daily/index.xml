<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-11T01:39:15Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>paradedb/paradedb</title>
    <updated>2023-10-11T01:39:15Z</updated>
    <id>tag:github.com,2023-10-11:/paradedb/paradedb</id>
    <link href="https://github.com/paradedb/paradedb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PostgreSQL for Search&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/paradedb/paradedb/dev/docs/logo/readme.svg?sanitize=true&#34; alt=&#34;ParadeDB&#34; width=&#34;368px&#34;&gt; &lt;br&gt; &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt;PostgreSQL for Search&lt;/b&gt; &lt;br&gt; &lt;/p&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; &lt;a href=&#34;https://paradedb.com&#34;&gt;Website&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://docs.paradedb.com&#34;&gt;Documentation&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://paradedb.com/blog&#34;&gt;Blog&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://join.slack.com/t/paradedbcommunity/shared_invite/zt-217mordsh-ielS6BiZf7VW3rqKBFgAlQ&#34;&gt;Community&lt;/a&gt; &lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/paradedb/paradedb/actions/workflows/publish-paradedb-to-dockerhub.yml&#34;&gt;&lt;img src=&#34;https://github.com/paradedb/paradedb/actions/workflows/publish-paradedb-to-dockerhub.yml/badge.svg?sanitize=true&#34; alt=&#34;Publishing&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/paradedb/paradedb/actions/workflows/benchmark-paradedb.yml&#34;&gt;&lt;img src=&#34;https://github.com/paradedb/paradedb/actions/workflows/benchmark-paradedb.yml/badge.svg?sanitize=true&#34; alt=&#34;Benchmarking&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://paradedb.com&#34;&gt;ParadeDB&lt;/a&gt; is an ElasticSearch alternative built on PostgreSQL, engineered for lightning-fast full text, similarity, and hybrid search.&lt;/p&gt; &#xA;&lt;p&gt;It offers the most comprehensive, Postgres-native search features of any Postgres database, so you don&#39;t need to glue cumbersome services like a search engine or vector database on top.&lt;/p&gt; &#xA;&lt;h2&gt;Key Benefits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;‚ö° &lt;strong&gt;Speed&lt;/strong&gt;: ParadeDB is built in Rust on top of PostgreSQL and Tantivy, a Rust-based implementation of Apache Lucene. See our benchmarks &lt;a href=&#34;https://raw.githubusercontent.com/paradedb/paradedb/benchmarks/README.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;üåø &lt;strong&gt;Simplicity&lt;/strong&gt;: Consolidate your database and search engine into a single system, so you don&#39;t need to worry about keeping separate services in sync.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;üêò &lt;strong&gt;SQL First&lt;/strong&gt;: Write search queries in SQL with ACID transactions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;üöÄ &lt;strong&gt;Scalability&lt;/strong&gt;: Scale to millions of rows with support for distributed search, high availability, backups, and point-in-time-recovery.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;ParadeDB is still under active development and should be used in production with caution. We&#39;re aiming to be fully stable by the end of October 2023.&lt;/p&gt; &#xA;&lt;p&gt;We are currently in Private Beta. Star &amp;amp; watch this repo to get notified of major updates.&lt;/p&gt; &#xA;&lt;h3&gt;Roadmap&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Search &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Full-text search with BM25 with &lt;a href=&#34;https://github.com/paradedb/paradedb/tree/dev/pg_bm25#overview&#34;&gt;pg_bm25&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Similarity search with &lt;a href=&#34;https://github.com/pgvector/pgvector#pgvector&#34;&gt;pgvector&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Hybrid search with &lt;a href=&#34;https://github.com/paradedb/paradedb/tree/dev/pg_search#overview&#34;&gt;pg_search&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Real-time search&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Faceted search&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Distributed search&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Generative search&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Multimodal search&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Self-hosting &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Docker image &amp;amp; &lt;a href=&#34;https://docs.paradedb.com/deploy/aws&#34;&gt;deployment instructions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Kubernetes Helm chart &amp;amp; &lt;a href=&#34;https://docs.paradedb.com/deploy/helm&#34;&gt;deployment instructions&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Cloud Database &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Managed cloud&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Self-serve cloud&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Public Cloud (AWS, GCP, Azure) Marketplace Images&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; High availability&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Web-based SQL Editor&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;ParadeDB Cloud&lt;/h3&gt; &#xA;&lt;p&gt;Coming soon! Sign up for the &lt;a href=&#34;https://paradedb.typeform.com/to/jHkLmIzx&#34;&gt;ParadeDB Cloud waitlist&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Self-Hosted&lt;/h3&gt; &#xA;&lt;p&gt;To install ParadeDB locally or on-premise, simply pull and run the latest Docker image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run \&#xA;  -e POSTGRES_USER=&amp;lt;user&amp;gt; \&#xA;  -e POSTGRES_PASSWORD=&amp;lt;password&amp;gt; \&#xA;  -e POSTGRES_DB=&amp;lt;dbname&amp;gt; \&#xA;  -p 5432:5432 \&#xA;  -d \&#xA;  paradedb/paradedb:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, this will start the ParadeDB database at &lt;code&gt;http://localhost:5432&lt;/code&gt;. Use &lt;code&gt;psql&lt;/code&gt; to connect:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;psql -h &amp;lt;hostname&amp;gt; -U &amp;lt;user&amp;gt; -d &amp;lt;dbname&amp;gt; -p 5432 -W&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install the ParadeDB extension(s) manually within an existing self-hosted Postgres, see the extension(s)&#39; README. We strongly recommend using the ParadeDB Docker image, which is optimized for running search in Postgres.&lt;/p&gt; &#xA;&lt;p&gt;If you are self-hosting Postgres and are interested in ParadeDB, please &lt;a href=&#34;mailto:hello@paradedb.com&#34;&gt;contact the ParadeDB team&lt;/a&gt; and we&#39;ll be happy to help!&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;To get started using ParadeDB, please follow the &lt;a href=&#34;https://docs.paradedb.com/quickstart&#34;&gt;quickstart guide&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can find the complete documentation for ParadeDB at &lt;a href=&#34;https://docs.paradedb.com&#34;&gt;docs.paradedb.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re missing a feature or have found a bug, please open a &lt;a href=&#34;https://github.com/paradedb/paradedb/issues/new/choose&#34;&gt;GitHub Issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To get community support, you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Post a question in the &lt;a href=&#34;https://join.slack.com/t/paradedbcommunity/shared_invite/zt-217mordsh-ielS6BiZf7VW3rqKBFgAlQ&#34;&gt;ParadeDB Slack Community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ask for help on our &lt;a href=&#34;https://github.com/paradedb/paradedb/discussions&#34;&gt;GitHub Discussions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you need commercial support, please &lt;a href=&#34;mailto:sales@paradedb.com&#34;&gt;contact the ParadeDB team&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome community contributions, big or small, and are here to guide you along the way. To get started contributing, check our &lt;a href=&#34;https://github.com/paradedb/paradedb/labels/good%20first%20issue&#34;&gt;first timer issues&lt;/a&gt; or message us in the &lt;a href=&#34;https://join.slack.com/t/paradedbcommunity/shared_invite/zt-217mordsh-ielS6BiZf7VW3rqKBFgAlQ&#34;&gt;ParadeDB Community Slack&lt;/a&gt;. Once you contribute, ping us in Slack and we&#39;ll send you some ParadeDB swag!&lt;/p&gt; &#xA;&lt;p&gt;For more information on how to contribute, please see our &lt;a href=&#34;https://raw.githubusercontent.com/paradedb/paradedb/dev/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This project is released with a &lt;a href=&#34;https://github.com/paradedb/paradedb/raw/stable/CODE_OF_CONDUCT.md&#34;&gt;Contributor Code of Conduct&lt;/a&gt;. By participating in this project, you agree to follow its terms.&lt;/p&gt; &#xA;&lt;p&gt;Thank you for helping us make ParadeDB better for everyone &lt;span&gt;‚ù§Ô∏è&lt;/span&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;ParadeDB is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/paradedb/paradedb/dev/LICENSE&#34;&gt;GNU Affero General Public License v3.0&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>huachaohuang/sigma</title>
    <updated>2023-10-11T01:39:15Z</updated>
    <id>tag:github.com,2023-10-11:/huachaohuang/sigma</id>
    <link href="https://github.com/huachaohuang/sigma" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Sigma programming language&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Sigma Programming Language&lt;/h1&gt; &#xA;&lt;p&gt;This is an experimental project to build a modern SQL alternative called Sigma.&lt;/p&gt; &#xA;&lt;p&gt;Sigma tries to combine the power of relational calculus and common programming languages.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will run an interactive shell like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Sigma 0.0.1&#xA;&amp;gt;&amp;gt;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then input some expressions and see what happens!&lt;/p&gt; &#xA;&lt;p&gt;There is a built-in json module. You can load some json file and process it with Sigma:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import json&#xA;&amp;gt;&amp;gt;&amp;gt; list = json.load(&#34;path/to/file.json&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Statements&lt;/h2&gt; &#xA;&lt;p&gt;Syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Expression [&#39;;&#39;] |&#xA;&#39;import&#39; Name [&#39;;&#39;] |&#xA;CreateClass |&#xA;DeleteClass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create class statement&lt;/h3&gt; &#xA;&lt;p&gt;Syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#39;create&#39; &#39;class&#39; Name &#39;{&#39;&#xA;    (Name &#39;:&#39; TypeName &#39;,&#39;)*&#xA;    [&#39;id&#39; Name (&#39;,&#39; Name)*]&#xA;&#39;}&#39;&#xA;&#xA;TypeName = &#39;bool&#39; | &#39;i64&#39; | &#39;f64&#39; | &#39;text&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;create class User { name: text, score: i64, id name }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You must specify the id fields for a class. The type of id fields can only be &lt;code&gt;i64&lt;/code&gt; or &lt;code&gt;text&lt;/code&gt; for now. In this example, the &#34;name&#34; field will be used as the id of the class. By default, if the id is not specified, a field name &#34;id&#34; will be used as the id. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;create class User { id: text, score: i64 }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case the &#34;id&#34; field will be used as the id of the class.&lt;/p&gt; &#xA;&lt;p&gt;After a class is created, the name of the class will represent a set of instances of that class. Then you can manipulate the class set like other collections:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; create class User { name: text, score: i64, id name }&#xA;&amp;gt;&amp;gt;&amp;gt; into User insert { name: &#34;a&#34;, score: 1 }, { name: &#34;b&#34;, score: 2 }&#xA;2&#xA;&amp;gt;&amp;gt;&amp;gt; from u in User select u.score&#xA;[2, 1]&#xA;&amp;gt;&amp;gt;&amp;gt; from u in User update u.score *= 2&#xA;2&#xA;&amp;gt;&amp;gt;&amp;gt; User&#xA;{&#xA;{name: &#34;a&#34;, score: 2}&#xA;{name: &#34;b&#34;, score: 4}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Delete class statement&lt;/h3&gt; &#xA;&lt;p&gt;Syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#39;delete&#39; &#39;class&#39; Name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Expressions&lt;/h2&gt; &#xA;&lt;p&gt;Sigma is a strongly-typed scripting language. There is no implicit type conversions. For example, you can not add an integer with a boolean or a floating-point number.&lt;/p&gt; &#xA;&lt;h3&gt;Literal expressions&lt;/h3&gt; &#xA;&lt;h4&gt;Null&lt;/h4&gt; &#xA;&lt;p&gt;TODO&lt;/p&gt; &#xA;&lt;h4&gt;Boolean&lt;/h4&gt; &#xA;&lt;p&gt;A boolean expression consists of one of the keywords &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Numeric&lt;/h4&gt; &#xA;&lt;h5&gt;Integer numbers&lt;/h5&gt; &#xA;&lt;p&gt;An integer literal should match the regular expression &lt;code&gt;[0-9]+&lt;/code&gt;. For now, integer literal will be evaluated to 64bit signed integers at runtime.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; 123&#xA;123&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Floating-point numbers&lt;/h5&gt; &#xA;&lt;p&gt;A floatint-point literal should match the regular expression &lt;code&gt;[0-9]+\.[0-9]+([eE][+-]?[0-9]+)?&lt;/code&gt;. For now, floating-point literals will be evaluated to 64bit double-precision floating-point numbers at runtime.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; 1.2&#xA;1.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Arbitrary-precision numbers&lt;/h5&gt; &#xA;&lt;p&gt;TODO&lt;/p&gt; &#xA;&lt;h4&gt;Text strings&lt;/h4&gt; &#xA;&lt;p&gt;A string literal should match the regular expression &lt;code&gt;&#34;([^&#34;\\]|\\.)*&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; &#34;abc&#34;&#xA;&#34;abc&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; &#34;ab\&#34;cd\n&#34;&#xA;&#34;ab\&#34;cd\n&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Operator expressions&lt;/h3&gt; &#xA;&lt;h4&gt;Binary operators&lt;/h4&gt; &#xA;&lt;p&gt;Syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Expression &#39;+&#39; Expression |&#xA;Expression &#39;-&#39; Expression |&#xA;Expression &#39;*&#39; Expression |&#xA;Expression &#39;/&#39; Expression |&#xA;Expression &#39;%&#39; Expression |&#xA;Expression &#39;|&#39; Expression |&#xA;Expression &#39;^&#39; Expression |&#xA;Expression &#39;&amp;amp;&#39; Expression |&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; 1 + 2&#xA;3&#xA;&amp;gt;&amp;gt;&amp;gt; true | false&#xA;true&#xA;&amp;gt;&amp;gt;&amp;gt; true &amp;amp; false&#xA;false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Negation operators&lt;/h4&gt; &#xA;&lt;p&gt;Syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#39;!&#39; Expression |&#xA;&#39;-&#39; Expression&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; !true&#xA;false&#xA;&amp;gt;&amp;gt;&amp;gt; -1234&#xA;-1234&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Comparison operators&lt;/h4&gt; &#xA;&lt;p&gt;Syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Expression &#39;==&#39; Expression |&#xA;Expression &#39;!=&#39; Expression |&#xA;Expression &#39;&amp;lt;&#39; Expression |&#xA;Expression &#39;&amp;lt;=&#39; Expression |&#xA;Expression &#39;&amp;gt;&#39; Expression |&#xA;Expression &#39;&amp;gt;=&#39; Expression |&#xA;Expression &#39;in&#39; Expression |&#xA;Expression &#39;not&#39; &#39;in&#39; Expression&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; 1 == 1&#xA;true&#xA;&amp;gt;&amp;gt;&amp;gt; 1 != 1&#xA;false&#xA;&amp;gt;&amp;gt;&amp;gt; 1 in [1, 2]&#xA;true&#xA;&amp;gt;&amp;gt;&amp;gt; 1 not in [1, 2]&#xA;false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;List and index expressions&lt;/h3&gt; &#xA;&lt;h4&gt;List&lt;/h4&gt; &#xA;&lt;p&gt;List is a ordered sequence of objects.&lt;/p&gt; &#xA;&lt;p&gt;Syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#39;[&#39; (Expression &#39;,&#39;)* Expression? &#39;]&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; []&#xA;[]&#xA;&amp;gt;&amp;gt;&amp;gt; [1, 2 + 3]&#xA;[1, 5]&#xA;&amp;gt;&amp;gt;&amp;gt; [1, 2, 3,]&#xA;[1, 2, 3]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Index&lt;/h4&gt; &#xA;&lt;p&gt;Syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Expression &#39;[&#39; Expression &#39;]&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; [1, 2, 3][0]&#xA;1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Hash and field expressions&lt;/h3&gt; &#xA;&lt;h4&gt;Hash&lt;/h4&gt; &#xA;&lt;p&gt;Hash is a set of unordered name/value pairs. Hash field name can be an identifier or a string.&lt;/p&gt; &#xA;&lt;p&gt;Syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#39;{&#39; (Name &#39;:&#39; Expression &#39;,&#39;)* (Name &#39;:&#39; Expression)? &#39;}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; {}&#xA;{}&#xA;&amp;gt;&amp;gt;&amp;gt; {a: 1 + 1, b: &#34;2&#34;}&#xA;{a: 2, b: &#34;2&#34;}&#xA;&amp;gt;&amp;gt;&amp;gt; {foo: &#34;foo&#34;, &#34;foo bar&#34;: &#34;foo bar&#34;}&#xA;{foo: &#34;foo&#34;, foo bar: &#34;foo bar&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Field&lt;/h4&gt; &#xA;&lt;p&gt;Syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Expression &#39;.&#39; Name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; x = {foo: &#34;bar&#34;, &#34;foo bar&#34;: &#34;foo bar&#34;}&#xA;&amp;gt;&amp;gt;&amp;gt; x.foo&#xA;&#34;bar&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; x.&#34;foo bar&#34;&#xA;&#34;foo bar&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Assignment&lt;/h3&gt; &#xA;&lt;p&gt;Syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Expression &#39;=&#39; Expression&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; a = [1, 2]&#xA;&amp;gt;&amp;gt;&amp;gt; a[0] = 2&#xA;&amp;gt;&amp;gt;&amp;gt; a&#xA;[2, 2]&#xA;&amp;gt;&amp;gt;&amp;gt; b = {x: 1, y: 1}&#xA;&amp;gt;&amp;gt;&amp;gt; b.x = 2&#xA;&amp;gt;&amp;gt;&amp;gt; b&#xA;{x: 2, y: 1}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Collection expressions&lt;/h3&gt; &#xA;&lt;p&gt;There is two kinds of collection for now: list and class.&lt;/p&gt; &#xA;&lt;h4&gt;Insert&lt;/h4&gt; &#xA;&lt;p&gt;Syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#39;into&#39; Expression &#39;insert&#39; (Expression &#39;,&#39;)* Expression &#39;,&#39;?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; list = [1, 2]&#xA;&amp;gt;&amp;gt;&amp;gt; into list insert 3, 4&#xA;2&#xA;&amp;gt;&amp;gt;&amp;gt; list&#xA;&amp;gt;&amp;gt;&amp;gt; [1, 2, 3, 4]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Update&lt;/h4&gt; &#xA;&lt;p&gt;Syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#39;from&#39; Name &#39;in&#39; Expression [&#39;where&#39; Expression] &#39;update&#39; Expression&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; list = [1, 2, 3]&#xA;&amp;gt;&amp;gt;&amp;gt; from x in list update x *= 2&#xA;3&#xA;&amp;gt;&amp;gt;&amp;gt; list&#xA;[2, 4, 6]&#xA;&amp;gt;&amp;gt;&amp;gt; from x in list where x == 4 update x += 1&#xA;1&#xA;&amp;gt;&amp;gt;&amp;gt; list&#xA;[2, 5, 6]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Delete&lt;/h4&gt; &#xA;&lt;p&gt;Syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#39;from&#39; Name &#39;in&#39; Expression [&#39;where&#39; Expression] &#39;delete&#39; Name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; list = [{a: 1, b: 2}, {a: 3, b: 4}]&#xA;&amp;gt;&amp;gt;&amp;gt; from x in list delete x&#xA;2&#xA;&amp;gt;&amp;gt;&amp;gt; list&#xA;[]&#xA;&amp;gt;&amp;gt;&amp;gt; list = [{a: 1, b: 2}, {a: 3, b: 4}]&#xA;&amp;gt;&amp;gt;&amp;gt; from x in list where x.a &amp;lt; 2 delete x&#xA;1&#xA;&amp;gt;&amp;gt;&amp;gt; list&#xA;[{a: 3, b: 4}]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Select&lt;/h4&gt; &#xA;&lt;p&gt;Syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#39;from&#39; Name &#39;in&#39; Expression&#xA;[&#39;join&#39; Name &#39;in&#39; Expression [&#39;on&#39; Expression]]&#xA;[&#39;where&#39; Expression]&#xA;[&#39;limit&#39; Expression]&#xA;[&#39;select&#39; Expression]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; list = from x in [1, 2, 3, 4] select { a: x, b: x * 2 }&#xA;[{a: 1, b: 2}, {a: 2, b: 4}, {a: 3, b: 6}, {a: 4, b: 8}]&#xA;&amp;gt;&amp;gt;&amp;gt; from x in list where x.a &amp;lt; 4&#xA;[{a: 1, b: 2}, {a: 2, b: 4}, {a: 3, b: 6}]&#xA;&amp;gt;&amp;gt;&amp;gt; from x in list where x.a &amp;lt; 4 limit 1&#xA;[{a: 1, b: 2}]&#xA;&amp;gt;&amp;gt;&amp;gt; from x in list where x.a &amp;lt; 4 limit 1..&#xA;[{a: 2, b: 4}, {a: 3, b: 6}]&#xA;&amp;gt;&amp;gt;&amp;gt; from x in list where x.a &amp;lt; 4 limit 1..2&#xA;[{a: 2, b: 4}]&#xA;&amp;gt;&amp;gt;&amp;gt; from x in list select x.a&#xA;[1, 2, 3, 4]&#xA;&amp;gt;&amp;gt;&amp;gt; from x in list where x.a &amp;lt; 4 limit 2 select { a: x.a, c: x.a + x.b }&#xA;[{a: 1, c: 3}, {a: 2, c: 6}]&#xA;&amp;gt;&amp;gt;&amp;gt; list2 = from x in [3, 4, 5, 6] select { a: x, c: x * 3 }&#xA;[{a: 3, c: 9}, {a: 4, c: 12}, {a: 5, c: 15}, {a: 6, c: 18}]&#xA;&amp;gt;&amp;gt;&amp;gt; from x1 in list join x2 in list2 on x1.a == x2.a&#xA;[{x1: {a: 3, b: 6}, x2: {a: 3, c: 9}}, {x1: {a: 4, b: 8}, x2: {a: 4, c: 12}}]&#xA;&amp;gt;&amp;gt;&amp;gt; from x1 in list join x2 in list2 on x1.a == x2.a where x1.a % 2 == 0 select { a: x1.a, b: x1.b, c: x2.c }&#xA;[{a: 4, b: 8, c: 12}]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Nested expressions are also possible:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; ids = [1, 2, 3, 4]&#xA;[1, 2, 3, 4]&#xA;&amp;gt;&amp;gt;&amp;gt; list = from x in ids select { a: x, b: ids }&#xA;[{a: 1, b: [1, 2, 3, 4]}, {a: 2, b: [1, 2, 3, 4]}, {a: 3, b: [1, 2, 3, 4]}, {a: 4, b: [1, 2, 3, 4]}]&#xA;&amp;gt;&amp;gt;&amp;gt; from x in list where x.a % 2 == 0 select { a: x.a, b: from i in x.b where i % 2 == 0 }&#xA;[{a: 2, b: [2, 4]}, {a: 4, b: [2, 4]}]&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>pgcentralfoundation/pgrx</title>
    <updated>2023-10-11T01:39:15Z</updated>
    <id>tag:github.com,2023-10-11:/pgcentralfoundation/pgrx</id>
    <link href="https://github.com/pgcentralfoundation/pgrx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build Postgres Extensions with Rust!&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pgcentralfoundation/pgrx/develop/art/pgrx-logo-color-transparent-475x518.png&#34; alt=&#34;Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;code&gt;pgrx&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Build Postgres Extensions with Rust!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/pgcentralfoundation/pgrx/workflows/cargo%20test%20--all/badge.svg?sanitize=true&#34; alt=&#34;cargo test --all&#34;&gt; &lt;a href=&#34;https://crates.io/crates/pgrx&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/pgrx.svg?sanitize=true&#34; alt=&#34;crates.io badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/pgrx&#34;&gt;&lt;img src=&#34;https://docs.rs/pgrx/badge.svg?sanitize=true&#34; alt=&#34;docs.rs badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/pgrx_rs&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/pgrx_rs.svg?style=flat&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/hPb93Y9&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/710918545906597938.svg?sanitize=true&#34; alt=&#34;Discord Chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pgrx&lt;/code&gt; is a framework for developing PostgreSQL extensions in Rust and strives to be as idiomatic and safe as possible.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pgrx&lt;/code&gt; supports Postgres v11-v15.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Feel free to join our &lt;a href=&#34;https://discord.gg/PMrpdJsqcJ&#34;&gt;Discord Server&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;A fully managed development environment with &lt;a href=&#34;https://raw.githubusercontent.com/pgcentralfoundation/pgrx/develop/cargo-pgrx/README.md&#34;&gt;&lt;code&gt;cargo-pgrx&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;cargo pgrx new&lt;/code&gt;: Create new extensions quickly&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cargo pgrx init&lt;/code&gt;: Install new (or register existing) PostgreSQL installs&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cargo pgrx run&lt;/code&gt;: Run your extension and interactively test it in &lt;code&gt;psql&lt;/code&gt; (or &lt;code&gt;pgcli&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cargo pgrx test&lt;/code&gt;: Unit-test your extension across multiple PostgreSQL versions&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cargo pgrx package&lt;/code&gt;: Create installation packages for your extension&lt;/li&gt; &#xA;   &lt;li&gt;More in the &lt;a href=&#34;https://raw.githubusercontent.com/pgcentralfoundation/pgrx/develop/cargo-pgrx/README.md&#34;&gt;&lt;code&gt;README.md&lt;/code&gt;&lt;/a&gt;!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Target Multiple Postgres Versions&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Support Postgres v11-v15 from the same codebase&lt;/li&gt; &#xA;   &lt;li&gt;Use Rust feature gating to use version-specific APIs&lt;/li&gt; &#xA;   &lt;li&gt;Seamlessly test against all versions&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Automatic Schema Generation&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Implement extensions entirely in Rust&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pgcentralfoundation/pgrx/develop/#mapping-of-postgres-types-to-rust&#34;&gt;Automatic mapping for many Rust types into PostgreSQL&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;SQL schemas generated automatically (or manually via &lt;code&gt;cargo pgrx schema&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Include custom SQL with &lt;code&gt;extension_sql!&lt;/code&gt; &amp;amp; &lt;code&gt;extension_sql_file!&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Safety First&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Translates Rust &lt;code&gt;panic!&lt;/code&gt;s into Postgres &lt;code&gt;ERROR&lt;/code&gt;s that abort the transaction, not the process&lt;/li&gt; &#xA;   &lt;li&gt;Memory Management follows Rust&#39;s drop semantics, even in the face of &lt;code&gt;panic!&lt;/code&gt; and &lt;code&gt;elog(ERROR)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;#[pg_guard]&lt;/code&gt; procedural macro to ensure the above&lt;/li&gt; &#xA;   &lt;li&gt;Postgres &lt;code&gt;Datum&lt;/code&gt;s are &lt;code&gt;Option&amp;lt;T&amp;gt; where T: FromDatum&lt;/code&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;NULL&lt;/code&gt; Datums are safely represented as &lt;code&gt;Option::&amp;lt;T&amp;gt;::None&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;First-class UDF support&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Annotate functions with &lt;code&gt;#[pg_extern]&lt;/code&gt; to expose them to Postgres&lt;/li&gt; &#xA;   &lt;li&gt;Return &lt;code&gt;pgrx::iter::SetOfIterator&amp;lt;&#39;a, T&amp;gt;&lt;/code&gt; for &lt;code&gt;RETURNS SETOF&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Return &lt;code&gt;pgrx::iter::TableIterator&amp;lt;&#39;a, T&amp;gt;&lt;/code&gt; for &lt;code&gt;RETURNS TABLE (...)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Create trigger functions with &lt;code&gt;#[pg_trigger]&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Easy Custom Types&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;#[derive(PostgresType)]&lt;/code&gt; to use a Rust struct as a Postgres type &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;By default, represented as a CBOR-encoded object in-memory/on-disk, and JSON as human-readable&lt;/li&gt; &#xA;     &lt;li&gt;Provide custom in-memory/on-disk/human-readable representations&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;#[derive(PostgresEnum)]&lt;/code&gt; to use a Rust enum as a Postgres enum&lt;/li&gt; &#xA;   &lt;li&gt;Composite types supported with the &lt;code&gt;pgrx::composite_type!(&#34;Sample&#34;)&lt;/code&gt; macro&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Server Programming Interface (SPI)&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Safe access into SPI&lt;/li&gt; &#xA;   &lt;li&gt;Transparently return owned Datums from an SPI context&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Advanced Features&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Safe access to Postgres&#39; &lt;code&gt;MemoryContext&lt;/code&gt; system via &lt;code&gt;pgrx::PgMemoryContexts&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Executor/planner/transaction/subtransaction hooks&lt;/li&gt; &#xA;   &lt;li&gt;Safely use Postgres-provided pointers with &lt;code&gt;pgrx::PgBox&amp;lt;T&amp;gt;&lt;/code&gt; (akin to &lt;code&gt;alloc::boxed::Box&amp;lt;T&amp;gt;&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;#[pg_guard]&lt;/code&gt; proc-macro for guarding &lt;code&gt;extern &#34;C&#34;&lt;/code&gt; Rust functions that need to be passed into Postgres&lt;/li&gt; &#xA;   &lt;li&gt;Access Postgres&#39; logging system through &lt;code&gt;eprintln!&lt;/code&gt;-like macros&lt;/li&gt; &#xA;   &lt;li&gt;Direct &lt;code&gt;unsafe&lt;/code&gt; access to large parts of Postgres internals via the &lt;code&gt;pgrx::pg_sys&lt;/code&gt; module&lt;/li&gt; &#xA;   &lt;li&gt;New features added regularly!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;System Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A Rust toolchain: &lt;code&gt;rustc&lt;/code&gt;, &lt;code&gt;cargo&lt;/code&gt;, and &lt;code&gt;rustfmt&lt;/code&gt;. The recommended way to get these is from &lt;a href=&#34;https://rustup.rs&#34;&gt;https://rustup.rs&lt;/a&gt; ‚Ä†&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libclang&lt;/code&gt; 5.0 or greater (required by bindgen) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Ubuntu: &lt;code&gt;apt install libclang-dev&lt;/code&gt; or &lt;code&gt;apt install clang&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;RHEL: &lt;code&gt;yum install clang&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tar&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bzip2&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;GCC 7 or newer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.postgresql.org/wiki/Compile_and_Install_from_source_code&#34;&gt;PostgreSQL&#39;s build dependencies&lt;/a&gt; ‚Ä°&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;‚Ä† PGRX has no MSRV policy, thus may require the latest stable version of Rust, available via Rustup&lt;/p&gt; &#xA;&lt;p&gt;‚Ä° A local PostgreSQL server installation is not required. &lt;code&gt;cargo pgrx&lt;/code&gt; can download and compile PostgreSQL versions on its own.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to: GCC 7 on CentOS 7&lt;/summary&gt; &#xA; &lt;p&gt;In order to use GCC 7, install &lt;a href=&#34;https://wiki.centos.org/AdditionalResources/Repositories/SCL&#34;&gt;&lt;code&gt;scl&lt;/code&gt;&lt;/a&gt; and enter the GCC 7 development environment:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yum install centos-release-scl&#xA;yum install devtoolset-7&#xA;scl enable devtoolset-7 bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;First install the &lt;code&gt;cargo-pgrx&lt;/code&gt; sub-command and initialize the development environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo install --locked cargo-pgrx&#xA;cargo pgrx init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;init&lt;/code&gt; command downloads currently supported PostgreSQL versions, compiles them to &lt;code&gt;~/.pgrx/&lt;/code&gt;, and runs &lt;code&gt;initdb&lt;/code&gt;. It&#39;s also possible to use an existing (user-writable) PostgreSQL install, or install a subset of versions, see the &lt;a href=&#34;https://raw.githubusercontent.com/pgcentralfoundation/pgrx/develop/cargo-pgrx/README.md#first-time-initialization&#34;&gt;&lt;code&gt;README.md&lt;/code&gt; of &lt;code&gt;cargo-pgrx&lt;/code&gt; for details&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo pgrx new my_extension&#xA;cd my_extension&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a new directory for the extension crate.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ tree &#xA;.&#xA;‚îú‚îÄ‚îÄ Cargo.toml&#xA;‚îú‚îÄ‚îÄ my_extension.control&#xA;‚îú‚îÄ‚îÄ sql&#xA;‚îî‚îÄ‚îÄ src&#xA;    ‚îî‚îÄ‚îÄ lib.rs&#xA;&#xA;2 directories, 3 files&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The new extension includes an example, so you can go ahead and run it right away.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo pgrx run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This compiles the extension to a shared library, copies it to the specified Postgres installation, starts that Postgres instance and connects you to a database named the same as the extension.&lt;/p&gt; &#xA;&lt;p&gt;Once &lt;code&gt;cargo-pgrx&lt;/code&gt; drops us into &lt;code&gt;psql&lt;/code&gt; we can &lt;a href=&#34;https://www.postgresql.org/docs/13/sql-createextension.html&#34;&gt;load the extension&lt;/a&gt; and do a SELECT on the example function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;my_extension=# CREATE EXTENSION my_extension;&#xA;CREATE EXTENSION&#xA;&#xA;my_extension=# SELECT hello_my_extension();&#xA; hello_my_extension&#xA;---------------------&#xA; Hello, my_extension&#xA;(1 row)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more details on how to manage pgrx extensions see &lt;a href=&#34;https://raw.githubusercontent.com/pgcentralfoundation/pgrx/develop/cargo-pgrx/README.md&#34;&gt;Managing pgrx extensions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Upgrading&lt;/h2&gt; &#xA;&lt;p&gt;You can upgrade your current &lt;code&gt;cargo-pgrx&lt;/code&gt; installation by passing the &lt;code&gt;--force&lt;/code&gt; flag to &lt;code&gt;cargo install&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo install --force --locked cargo-pgrx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As new Postgres versions are supported by &lt;code&gt;pgrx&lt;/code&gt;, you can re-run the &lt;code&gt;pgrx init&lt;/code&gt; process to download and compile them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo pgrx init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mapping of Postgres types to Rust&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Postgres Type&lt;/th&gt; &#xA;   &lt;th&gt;Rust Type (as &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;bytea&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Vec&amp;lt;u8&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;amp;[u8]&lt;/code&gt; (zero-copy)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;text&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt; or &lt;code&gt;&amp;amp;str&lt;/code&gt; (zero-copy)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;varchar&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt; or &lt;code&gt;&amp;amp;str&lt;/code&gt; (zero-copy) or &lt;code&gt;char&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;char&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;i8&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;smallint&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;i16&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;i32&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;bigint&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;i64&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;oid&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;u32&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;real&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;f32&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;double precision&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;f64&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;json&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pgrx::Json(serde_json::Value)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;jsonb&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pgrx::JsonB(serde_json::Value)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;date&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pgrx::Date&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;time&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pgrx::Time&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;timestamp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pgrx::Timestamp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;time with time zone&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pgrx::TimeWithTimeZone&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;timestamp with time zone&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pgrx::TimestampWithTimeZone&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;anyarray&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pgrx::AnyArray&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;anyelement&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pgrx::AnyElement&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;box&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pgrx::pg_sys::BOX&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;point&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pgrx::pg_sys::Point&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;tid&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pgrx::pg_sys::ItemPointerData&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cstring&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;amp;core::ffi::CStr&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;inet&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pgrx::Inet(String)&lt;/code&gt; -- TODO: needs better support&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;numeric&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pgrx::Numeric&amp;lt;P, S&amp;gt; or pgrx::AnyNumeric&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;void&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ARRAY[]::&amp;lt;type&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Vec&amp;lt;Option&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;pgrx::Array&amp;lt;T&amp;gt;&lt;/code&gt; (zero-copy)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;int4range&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pgrx::Range&amp;lt;i32&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;int8range&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pgrx::Range&amp;lt;i64&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;numrange&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pgrx::Range&amp;lt;Numeric&amp;lt;P, S&amp;gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;pgrx::Range&amp;lt;AnyRange&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;daterange&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pgrx::Range&amp;lt;pgrx::Date&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;tsrange&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pgrx::Range&amp;lt;pgrx::Timestamp&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;tstzrange&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pgrx::Range&amp;lt;pgrx::TimestampWithTimeZone&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Option::None&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;internal&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pgrx::PgBox&amp;lt;T&amp;gt;&lt;/code&gt; where &lt;code&gt;T&lt;/code&gt; is any Rust/Postgres struct&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;uuid&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pgrx::Uuid([u8; 16])&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;There are also &lt;code&gt;IntoDatum&lt;/code&gt; and &lt;code&gt;FromDatum&lt;/code&gt; traits for implementing additional type conversions, along with &lt;code&gt;#[derive(PostgresType)]&lt;/code&gt; and &lt;code&gt;#[derive(PostgresEnum)]&lt;/code&gt; for automatic conversion of custom types.&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;varchar&lt;/code&gt; are converted to &lt;code&gt;&amp;amp;str&lt;/code&gt; or &lt;code&gt;String&lt;/code&gt;, so PGRX assumes any Postgres database you use it with has UTF-8-compatible encoding. Currently, PGRX will panic if it detects this is incorrect, to inform you, the programmer, that you were wrong. However, it is best to not rely on this behavior, as UTF-8 validation can be a performance hazard. This problem was previously assumed to simply not happen, and PGRX may decide to change the details of how it does UTF-8 validation checks in the future in order to mitigate performance hazards.&lt;/p&gt; &#xA;&lt;p&gt;The default Postgres server encoding is &lt;code&gt;SQL_ASCII&lt;/code&gt;, and it guarantees neither ASCII nor UTF-8 (as Postgres will then accept but ignore non-ASCII bytes). For best results, always use PGRX with UTF-8, and set database encodings explicitly upon database creation.&lt;/p&gt; &#xA;&lt;h2&gt;Digging Deeper&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pgcentralfoundation/pgrx/develop/cargo-pgrx/&#34;&gt;cargo-pgrx sub-command&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pgcentralfoundation/pgrx/develop/pgrx-examples/custom_types/&#34;&gt;Custom Types&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pgcentralfoundation/pgrx/develop/pgrx-examples/operators/&#34;&gt;Postgres Operator Functions and Operator Classes/Families&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pgcentralfoundation/pgrx/develop/pgrx-examples/shmem/&#34;&gt;Shared Memory Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pgcentralfoundation/pgrx/develop/pgrx-examples/&#34;&gt;various examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Caveats &amp;amp; Known Issues&lt;/h2&gt; &#xA;&lt;p&gt;There&#39;s probably more than are listed here, but a primary things of note are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Threading is not really supported. Postgres is strictly single-threaded. As such, if you do venture into using threads, those threads &lt;strong&gt;MUST NOT&lt;/strong&gt; call &lt;em&gt;any&lt;/em&gt; internal Postgres function, or otherwise use any Postgres-provided pointer. There&#39;s also a potential problem with Postgres&#39; use of &lt;code&gt;sigprocmask&lt;/code&gt;. This was being discussed on the -hackers list, even with a patch provided, but the conversation seems to have stalled (&lt;a href=&#34;https://www.postgresql.org/message-id/flat/5EF20168.2040508%40anastigmatix.net#4533edb74194d30adfa04a6a2ce635ba&#34;&gt;https://www.postgresql.org/message-id/flat/5EF20168.2040508%40anastigmatix.net#4533edb74194d30adfa04a6a2ce635ba&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;How to correctly interact with Postgres in an &lt;code&gt;async&lt;/code&gt; context remains unexplored.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pgrx&lt;/code&gt; wraps a lot of &lt;code&gt;unsafe&lt;/code&gt; code, some of which has poorly-defined safety conditions. It may be easy to induce illogical and undesirable behaviors even from safe code with &lt;code&gt;pgrx&lt;/code&gt;, and some of these wrappers may be fundamentally unsound. Please report any issues that may arise.&lt;/li&gt; &#xA; &lt;li&gt;Not all of Postgres&#39; internals are included or even wrapped. This isn&#39;t due to it not being possible, it&#39;s simply due to it being an incredibly large task. If you identify internal Postgres APIs you need, open an issue and we&#39;ll get them exposed, at least through the &lt;code&gt;pgrx::pg_sys&lt;/code&gt; module.&lt;/li&gt; &#xA; &lt;li&gt;Windows is not supported. It could be, but will require a bit of work with &lt;code&gt;cargo-pgrx&lt;/code&gt; and figuring out how to compile &lt;code&gt;pgrx&lt;/code&gt;&#39;s &#34;cshim&#34; static library.&lt;/li&gt; &#xA; &lt;li&gt;Sessions started before &lt;code&gt;ALTER EXTENSION my_extension UPDATE;&lt;/code&gt; will continue to see the old version of &lt;code&gt;my_extension&lt;/code&gt;. New sessions will see the updated version of the extension.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pgrx&lt;/code&gt; is used by many &#34;in production&#34;, but it is not &#34;1.0.0&#34; or above, despite that being recommended by SemVer for production-quality software. This is because there are many unresolved soundness and ergonomics questions that will likely require breaking changes to resolve, in some cases requiring cutting-edge Rust features to be able to expose sound interfaces. While a 1.0.0 release is intended at some point, it seems prudent to wait until it seems like a 2.0.0 release would not be needed the next week and the remaining questions can be deferred.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;p&gt;There&#39;s a few things on our immediate TODO list&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatic extension schema upgrade scripts&lt;/li&gt; &#xA; &lt;li&gt;Improved unit testing framework&lt;/li&gt; &#xA; &lt;li&gt;Better/Safer API for Datum management&lt;/li&gt; &#xA; &lt;li&gt;Improved generated bindings organization&lt;/li&gt; &#xA; &lt;li&gt;Safely wrap more Postgres internal APIs&lt;/li&gt; &#xA; &lt;li&gt;More examples -- especially around memory management and the various derive macros &lt;code&gt;#[derive(PostgresType/Enum)]&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Feature Flags&lt;/h2&gt; &#xA;&lt;p&gt;PGRX has optional feature flags for Rust code that do not involve configuring the version of Postgres used, but rather extend additional support for other kinds of Rust code. These are not included by default.&lt;/p&gt; &#xA;&lt;h3&gt;&#34;unsafe-postgres&#34;: Allow compilation for Postgres forks that have a different ABI&lt;/h3&gt; &#xA;&lt;p&gt;As of Postgres v15, forks are allowed to specify they use a different ABI than canonical Postgres. Since pgrx makes countless assumptions about Postgres&#39; internal ABI it is not possible for it to guarantee that a compiled pgrx extension will probably execute within such a Postgres fork. You, dear compiler runner, can make this guarantee for yourself by specifying the &lt;code&gt;unsafe-postgres&lt;/code&gt; feature flag. Otherwise, a pgrx extension will fail to compile with an error similar to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;error[E0080]: evaluation of constant value failed&#xA;   --&amp;gt; pgrx/src/lib.rs:151:5&#xA;    |&#xA;151 | /     assert!(&#xA;152 | |         same_slice(pg_sys::FMGR_ABI_EXTRA, b&#34;xPostgreSQL\0&#34;),&#xA;153 | |         &#34;Unsupported Postgres ABI. Perhaps you need `--features unsafe-postgres`?&#34;,&#xA;154 | |     );&#xA;    | |_____^ the evaluated program panicked at &#39;Unsupported Postgres ABI. Perhaps you need `--features unsafe-postgres`?&#39;, pgrx/src/lib.rs:151:5&#xA;    |&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We are most definitely open to contributions of any kind. Bug Reports, Feature Requests, Documentation, and even &lt;a href=&#34;https://github.com/sponsors/eeeebbbbrrrr&#34;&gt;sponsorships&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to contribute code via a Pull Request, please make it against our &lt;code&gt;develop&lt;/code&gt; branch. The &lt;code&gt;master&lt;/code&gt; branch is no longer used.&lt;/p&gt; &#xA;&lt;p&gt;Providing wrappers for Postgres&#39; internals is not a straightforward task, and completely wrapping it is going to take quite a bit of time. &lt;code&gt;pgrx&lt;/code&gt; is generally ready for use now, and it will continue to be developed as time goes on. Your feedback about what you&#39;d like to be able to do with &lt;code&gt;pgrx&lt;/code&gt; is greatly appreciated.&lt;/p&gt; &#xA;&lt;h2&gt;Hacking&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re hacking on &lt;code&gt;pgrx&lt;/code&gt; and want to ensure your test will run correctly, you need to have the current implementation of &lt;code&gt;cargo-pgrx&lt;/code&gt; (from the revision you&#39;re working on) in your &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;An easy way would be to install &lt;a href=&#34;https://github.com/MaulingMonkey/cargo-local-install&#34;&gt;cargo-local-install&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cargo install cargo-local-install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then run &lt;code&gt;cargo local-install&lt;/code&gt; to install &lt;code&gt;cargo-pgrx&lt;/code&gt; as specified in top-level&#39;s Cargo.toml.&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t forget to prepend &lt;code&gt;/path/to/pgrx/bin&lt;/code&gt; to your &lt;code&gt;PATH&lt;/code&gt;!&lt;/p&gt; &#xA;&lt;p&gt;This approach can also be used in extensions to ensure a matching version of &lt;code&gt;cargo-pgrx&lt;/code&gt; is used.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Portions Copyright 2019-2021 ZomboDB, LLC.  &#xA;Portions Copyright 2021-2023 Technology Concepts &amp;amp; Design, Inc.&#xA;Portions Copyright 2023 PgCentral Foundation, Inc.&#xA;&#xA;All rights reserved.&#xA;Use of this source code is governed by the MIT license that can be found in the LICENSE file.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>