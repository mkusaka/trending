<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-15T01:44:22Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>henrikpersson/potatis</title>
    <updated>2023-03-15T01:44:22Z</updated>
    <id>tag:github.com,2023-03-15:/henrikpersson/potatis</id>
    <link href="https://github.com/henrikpersson/potatis" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🥔 MOS-6502 and NES emulator in Rust (SDL/WebAssembly/Android/Embedded/Cloud)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🥔 Potatis&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img width=&#34;400&#34; alt=&#34;smb&#34; src=&#34;https://raw.githubusercontent.com/henrikpersson/potatis/master/screenshots/smb.png&#34;&gt;&lt;img width=&#34;400&#34; alt=&#34;smb3&#34; src=&#34;https://raw.githubusercontent.com/henrikpersson/potatis/master/screenshots/smb3.png&#34;&gt; &lt;img width=&#34;400&#34; alt=&#34;bb&#34; src=&#34;https://raw.githubusercontent.com/henrikpersson/potatis/master/screenshots/bb.png&#34;&gt;&lt;img width=&#34;400&#34; alt=&#34;dr&#34; src=&#34;https://raw.githubusercontent.com/henrikpersson/potatis/master/screenshots/dr.png&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/mos6502&lt;/code&gt; - Generic CPU emulator. Passes all tests, including illegal ops. (No BCD mode).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/nes&lt;/code&gt; - A very incomplete NES emulator.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/nes-sdl&lt;/code&gt; - Native target using SDL.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/nes-wasm&lt;/code&gt; - Browser target using WASM.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/nes-cloud&lt;/code&gt; - NES-as-a-service. Clientless cloud gaming with netcat and terminal rendering.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/nes-embedded&lt;/code&gt; - Embedded target for RP-2040 (Raspberry Pi Pico).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/nes-android&lt;/code&gt; - Android target using JNI.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;/mos6502&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;let load_base = 0x2000;&#xA;let mem = Memory::load(&amp;amp;program[..], load_base);&#xA;let cpu = Cpu::new(mem);&#xA;let mut machine = Mos6502::new(cpu);&#xA;&#xA;loop {&#xA;  machine.tick()&#xA;  println!(&#34;{}&#34;, machine); // Prints nestest-like output&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Debugging&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;let mut debugger = machine.debugger();&#xA;debugger.verbose(true); // Trace, dumps disassembled instructions to stdout&#xA;debugger.add_breakpoint(Breakpoint::Address(0x0666));&#xA;debugger.add_breakpoint(Breakpoint::Opcode(&#34;RTI&#34;));&#xA;debugger.watch_memory_range(0x6004..=0x6104, |mem| {&#xA;  // Invoked when memory in range changes&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;/nes&lt;/h2&gt; &#xA;&lt;p&gt;Supported mappers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NROM (mapper 0)&lt;/li&gt; &#xA; &lt;li&gt;MMC1 (mapper 1)&lt;/li&gt; &#xA; &lt;li&gt;UxROM (mapper 2)&lt;/li&gt; &#xA; &lt;li&gt;CNROM (mapper 3)&lt;/li&gt; &#xA; &lt;li&gt;MMC3 (mapper 4)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;impl nes::HostPlatform for MyHost {&#xA;  fn render(&amp;amp;mut self, frame: &amp;amp;RenderFrame) {&#xA;    // frame.pixels() == 256 * 240 * 3 RGB array&#xA;  }&#xA;&#xA;  fn poll_events(&amp;amp;mut self, joypad: &amp;amp;mut Joypad) {&#xA;    // pump events and forward to joypad&#xA;  }&#xA;}&#xA;&#xA;&#xA;let cart = Cartridge::blow_dust(&#34;path/to/rom.nes&#34;)?;&#xA;let mut nes = Nes::insert(cart, MyHost::new());&#xA;&#xA;loop {&#xA;  nes.tick();&#xA;  println!(&#34;{:?}&#34;, nes); // Complete nestest formatted output&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;/nes-sdl&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;cargo run --release path/to/rom.nes&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cargo run -- --help&lt;/code&gt; for options&lt;/p&gt; &#xA;&lt;h2&gt;/nes-wasm&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;cd nes-wasm&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;wasm-pack build --release --target web&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run dev&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Try it here: &lt;a href=&#34;https://henrikpersson.github.io/nes/index.html&#34;&gt;https://henrikpersson.github.io/nes/index.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;/nes-cloud&lt;/h2&gt; &#xA;&lt;p&gt;Cloud gaming is the &lt;a href=&#34;http://stadia.google.com&#34;&gt;next big thing&lt;/a&gt;. Obviously, Potatis needs to support it as well. No client needed, only a terminal and netcat.&lt;/p&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;stty -icanon &amp;amp;&amp;amp; nc play-nes.org 4444&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;code&gt;stty -icanon&lt;/code&gt; disables input buffering for your terminal, sending input directly to netcat. You can also connect without it but then you&#39;d have to press &lt;kbd&gt;ENTER&lt;/kbd&gt; after each key press.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Bring your own ROM&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;stty -icanon &amp;amp;&amp;amp; cat zelda.nes - | nc play-nes.org 4444&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rendering&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Sixel&#34;&gt;Sixel&lt;/a&gt; (port 6666) is recommended if your terminal supports it. iTerm2 does.&lt;/li&gt; &#xA; &lt;li&gt;Unicode color (port 5555) works by using the unicode character ▀ &#34;Upper half block&#34;, &lt;code&gt;U+2580&lt;/code&gt; to draw the screen. Since the lower part of the character is transparent, &lt;a href=&#34;https://en.wikipedia.org/wiki/ANSI_escape_code#3-bit_and_4-bit&#34;&gt;ANSI color codes&lt;/a&gt; can be used to simultaneously draw two horizontal lines by setting the block&#39;s foreground and background color. Unfortunately the resulting frame is still too large to fit in a normal terminal window, so when using this mode &lt;strong&gt;you have to decrease your terminal&#39;s font size a lot&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;ASCII (port 7777). No color, no unicode, just ASCII by calculating luminance for each RGB pixel. Same here, &lt;strong&gt;you have to decrease your terminal&#39;s font size a lot&lt;/strong&gt; to see the whole picture.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;/nes-embedded&lt;/h2&gt; &#xA;&lt;p&gt;It also runs on a RP-Pico with only 264kB available RAM! Without any optimizations it started out at ~0.5 FPS. But after some overclocking, and offloading the display rendering to the second CPU core, it now runs at a steady 5 FPS.&lt;/p&gt; &#xA;&lt;p&gt;Total heap usage, single-core: 135kB &lt;br&gt; Total heap usage, multi-core: 243kB (2x frame buffers)&lt;/p&gt; &#xA;&lt;img width=&#34;600&#34; alt=&#34;smb&#34; src=&#34;https://raw.githubusercontent.com/henrikpersson/potatis/master/screenshots/pico.jpg&#34;&gt; &#xA;&lt;p&gt;&lt;em&gt;The second Pico on the picture is wired up as a SWD debugger/flasher. The display is a &lt;a href=&#34;https://www.adafruit.com/product/4311&#34;&gt;ST7789 by Adafruit&lt;/a&gt;&lt;/em&gt;. &lt;br&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd nes-embedded&#xA;ROM=/path/to/rom.nes cargo run --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t have a debug-probe setup, change the runner in &lt;code&gt;.cargo/config&lt;/code&gt; to use a normal &lt;code&gt;elf2uf2&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;/nes-android&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download Android NDK and &lt;code&gt;rustup target add [target]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Configure your target(s) in &lt;code&gt;~/.cargo/config&lt;/code&gt; with the linker(s) provided by the Android NDK&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;[target.aarch64-linux-android]&#xA;linker = &#34;$NDK_PATH/toolchains/llvm/prebuilt/darwin-x86_64/bin/aarch64-linux-android33-clang&#34;&#xA;&#xA;[target.armv7-linux-androideabi]&#xA;linker = &#34;$NDK_PATH/toolchains/llvm/prebuilt/darwin-x86_64/bin/armv7a-linux-androideabi30-clang&#34;&#xA;&#xA;[target.x86_64-linux-android]&#xA;linker = &#34;$NDK_PATH/toolchains/llvm/prebuilt/darwin-x86_64/bin/x86_64-linux-android30-clang&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;&lt;code&gt;cd nes-android &amp;amp;&amp;amp; ./install.sh release&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: install.sh only targets arm64-v8a (aarch64-linux-android).&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Test&lt;/h1&gt; &#xA;&lt;p&gt;Run all unit and integration tests (for all crates):&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cargo test&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;TODO&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;More mappers&lt;/li&gt; &#xA; &lt;li&gt;APU&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Key mappings&lt;/h1&gt; &#xA;&lt;p&gt;Up, left, down, right: &lt;kbd&gt;WASD&lt;/kbd&gt; B: &lt;kbd&gt;K&lt;/kbd&gt; A: &lt;kbd&gt;L&lt;/kbd&gt; Select: &lt;kbd&gt;SPACE&lt;/kbd&gt; Start: &lt;kbd&gt;ENTER&lt;/kbd&gt; Reset: &lt;kbd&gt;R&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Thanks&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;nesdev.org&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.masswerk.at/6502/6502_instruction_set.html&#34;&gt;https://www.masswerk.at/6502/6502_instruction_set.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/amb5l/6502_65C02_functional_tests&#34;&gt;https://github.com/amb5l/6502_65C02_functional_tests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.baltissen.org/newhtm/ttl6502.htm&#34;&gt;http://www.baltissen.org/newhtm/ttl6502.htm&lt;/a&gt; (TTL6502.bin test)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nesdev.com/neshdr20.txt&#34;&gt;https://www.nesdev.com/neshdr20.txt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/christopherpow/nes-test-roms&#34;&gt;https://github.com/christopherpow/nes-test-roms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://nesdev.org/loopyppu.zip&#34;&gt;http://nesdev.org/loopyppu.zip&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=-THeUXqR3zY&#34;&gt;https://www.youtube.com/watch?v=-THeUXqR3zY&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://archive.nes.science/nesdev-forums/f2/t664.xhtml&#34;&gt;https://archive.nes.science/nesdev-forums/f2/t664.xhtml&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>farm-fe/farm</title>
    <updated>2023-03-15T01:44:22Z</updated>
    <id>tag:github.com,2023-03-15:/farm-fe/farm</id>
    <link href="https://github.com/farm-fe/farm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Super fast web build tool written in Rust&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/farm-fe/farm/main/assets/banner.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://npmjs.com/package/@farmfe/core&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@farmfe/core.svg?sanitize=true&#34; alt=&#34;npm package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://nodejs.org/en/about/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/node/v/@farmfe/core.svg?sanitize=true&#34; alt=&#34;node compatibility&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/farm-fe/farm/actions/workflows/rust-test.yaml&#34;&gt;&lt;img src=&#34;https://github.com/farm-fe/farm/actions/workflows/rust-test.yaml/badge.svg?sanitize=true&#34; alt=&#34;build status&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Farm is a super fast, light-weight web building tool written in Rust. Benchmark against other tools(Using Turbopack&#39;s benchmark, 1000 React components) as below:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/farm-fe/farm/main/assets/benchmark.png&#34; alt=&#34;xx&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Test Repo：&lt;a href=&#34;https://github.com/farm-fe/performance-compare&#34;&gt;https://github.com/farm-fe/performance-compare&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;Test Machine（Linux Mint 21.1 Cinnamon， 11th Gen Intel© Core™ i5-11400 @ 2.60GHz × 6， 15.5 GiB）&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;⚡ &lt;strong&gt;Super Fast&lt;/strong&gt;: Written in Rust, start a react / vue(incoming) project in milliseconds, perform a HMR update within 10ms for situations.&lt;/li&gt; &#xA; &lt;li&gt;🧰 &lt;strong&gt;Fully Pluggable&lt;/strong&gt;: Everything inside Farm is powered by plugins, achieve anything you want by creating a plugin. Support both Rust and Js plugins.&lt;/li&gt; &#xA; &lt;li&gt;⚙️ &lt;strong&gt;Powerful&lt;/strong&gt;: Compiling JS/TS/JSX/TSX, css, html and static assets out of box.&lt;/li&gt; &#xA; &lt;li&gt;⏱️ &lt;strong&gt;Lazy Compilation&lt;/strong&gt;: Dynamic imported resources are compiled only when they are requested.&lt;/li&gt; &#xA; &lt;li&gt;📦 &lt;strong&gt;Partial Bundling&lt;/strong&gt;: Bundle your project into a few reasonable bundles, speed up the resources loading without losing the caching granularity.&lt;/li&gt; &#xA; &lt;li&gt;🔒 &lt;strong&gt;Consistency&lt;/strong&gt;: What you see in development will be exactly the same as what you get in production.&lt;/li&gt; &#xA; &lt;li&gt;🌳 &lt;strong&gt;Compatibility&lt;/strong&gt;: Support both legacy(es5) and modern browsers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;See &lt;a href=&#34;https://github.com/farm-fe/rfcs/raw/main/rfcs/001-core-architecture/rfc.md#motivation&#34;&gt;RFC-001&lt;/a&gt; for design motivation and principle.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;This project is still under development and not production ready. Contributions are welcome&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;This project is built on the SWC Project, using swc for html/css/js/tsx/ts/jsx parsing, transforming, optimizing and codegen.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Create a new Farm project&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npx @farmfe/cli@latest create&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start the project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd farm-react &amp;amp;&amp;amp; npm i &amp;amp;&amp;amp; npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Refer to &lt;a href=&#34;https://farm-fe.github.io&#34;&gt;Documentation&lt;/a&gt; to learn more about Farm.&lt;/p&gt; &#xA;&lt;h2&gt;RoadMap&lt;/h2&gt; &#xA;&lt;p&gt;Farm has implemented all basic features for a web building tool. But we still have many works to mark Farm production ready.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Resolving, loading, transforming and resource generating for web assets(html, css, js/jsx/ts/tsx, static asset and so on).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Lazy Compilation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Dev Server and HMR(support react fast fresh)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Partial Bundling&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Both Rust and Js Plugin System&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Source Map&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Resources Minimize&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Tree Shake&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Css modules&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Official Plugins Like Sass&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Persistent Cache&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See milestones: &lt;a href=&#34;https://github.com/farm-fe/farm/milestones&#34;&gt;https://github.com/farm-fe/farm/milestones&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Looking forward to more contributions. Our goal is to provide a high quality and performant web build tool for the community.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Farm is divided into two parts: the &lt;code&gt;js side&lt;/code&gt; and the &lt;code&gt;rust side&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;the js side&lt;/strong&gt;: see code in &lt;code&gt;packages&lt;/code&gt; dir, contains core(dev server, file watcher and compiler wrapper), cli， runtime and runtime plugins(module system, hmr)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;the rust side&lt;/strong&gt;: see code in &lt;code&gt;crates&lt;/code&gt; dir, contains core(compilation context, plugin drivers...), compiler(compile process, HMR update...) and plugins.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Steps to develop Farm:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Rust Toolchain(If you are new to Rust, search &lt;code&gt;Rustup Book&lt;/code&gt;) and node 16 or above.&lt;/li&gt; &#xA; &lt;li&gt;Install dependencies with &lt;code&gt;pnpm i&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Build the compiler binary: &lt;code&gt;cd packages/core &amp;amp;&amp;amp; npm run build:rs&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build packages(open a new terminal): &lt;code&gt;cd packages/cli &amp;amp;&amp;amp; npm start&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Work with examples(open a new terminal): &lt;code&gt;cd examples/react &amp;amp;&amp;amp; npm start&lt;/code&gt;, report an issue if the example do not start normally.&lt;/li&gt; &#xA; &lt;li&gt;If you changed Rust code, run &lt;code&gt;npm run build:rs&lt;/code&gt; under &lt;code&gt;packages/core&lt;/code&gt; again to get the newest binary.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;brightwu（吴明亮）, worked at Bytedance and Tencent, technology enthusiast.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>retrage/gpt-macro</title>
    <updated>2023-03-15T01:44:22Z</updated>
    <id>tag:github.com,2023-03-15:/retrage/gpt-macro</id>
    <link href="https://github.com/retrage/gpt-macro" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ChatGPT powered Rust proc macro that generates code at compile-time.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gpt-macro&lt;/h1&gt; &#xA;&lt;p&gt;ChatGPT powered Rust proc macro that generates code at compile-time.&lt;/p&gt; &#xA;&lt;h2&gt;Implemented Macros&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;auto_impl!{}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;#[auto_test(...)]&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Get ChatGPT API key and set it to your environment variable &lt;code&gt;OPENAI_API_KEY&lt;/code&gt; before run.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;auto_impl!{}&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;auto_impl! {&#xA;    $STR_LIT&#xA;    $TOKEN_STREAM&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where &lt;code&gt;$STR_LIT&lt;/code&gt; is a prompt string literal, and &lt;code&gt;$TOKEN_STREAM&lt;/code&gt; is target code.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use gpt_macro::auto_impl;&#xA;&#xA;auto_impl! {&#xA;    &#34;Return fizz if the number is divisible by 3, buzz if the number is divisible by 5, and fizzbuzz if the number is divisible by both 3 and 5.&#34;&#xA;    fn fizzbuzz(n: u32) -&amp;gt; String {&#xA;    }&#xA;&#xA;    #[test]&#xA;    fn test_fizzbuzz() {&#xA;        assert_eq!(fizzbuzz(3), &#34;fizz&#34;);&#xA;        assert_eq!(fizzbuzz(5), &#34;buzz&#34;);&#xA;        assert_eq!(fizzbuzz(15), &#34;fizzbuzz&#34;);&#xA;        assert_eq!(fizzbuzz(1), &#34;1&#34;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you can see, the &lt;code&gt;fizzbuzz()&lt;/code&gt; implementation is incomplete, so the build fails without &lt;code&gt;auto_impl!{}&lt;/code&gt;. The macro parses given prompt and target code, and asks ChatGPT to fill the code when expanding the macro. It replaces the target with code extracted from ChatGPT response. Then Rust compiler continues compiling the code.&lt;/p&gt; &#xA;&lt;p&gt;Response Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn fizzbuzz(n: u32) -&amp;gt; String {&#xA;    if n % 3 == 0 &amp;amp;&amp;amp; n % 5 == 0 {&#xA;        return String::from(&#34;fizzbuzz&#34;);&#xA;    } else if n % 3 == 0 {&#xA;        return String::from(&#34;fizz&#34;);&#xA;    } else if n % 5 == 0 {&#xA;        return String::from(&#34;buzz&#34;);&#xA;    } else {&#xA;        return n.to_string();&#xA;    }&#xA;}&#xA;&#xA;#[test]&#xA;fn test_fizzbuzz() {&#xA;    assert_eq!(fizzbuzz(3), &#34;fizz&#34;);&#xA;    assert_eq!(fizzbuzz(5), &#34;buzz&#34;);&#xA;    assert_eq!(fizzbuzz(15), &#34;fizzbuzz&#34;);&#xA;    assert_eq!(fizzbuzz(1), &#34;1&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;#[auto_test]&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;See this example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use gpt_macro::auto_test;&#xA;&#xA;#[auto_test(test_valid, test_div_by_zero)]&#xA;fn div_u32(a: u32, b: u32) -&amp;gt; u32 {&#xA;    if b == 0 {&#xA;        panic!(&#34;attempt to divide by zero&#34;);&#xA;    }&#xA;    a / b&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Models&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ChatGPT: &lt;code&gt;gpt-3.5-turbo&lt;/code&gt; (default)&lt;/li&gt; &#xA; &lt;li&gt;Text Completion: &lt;code&gt;text-davinci-003&lt;/code&gt; (Specify &lt;code&gt;davinci&lt;/code&gt; feature to enable it)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;gpt-macro is released under the MIT license.&lt;/p&gt;</summary>
  </entry>
</feed>