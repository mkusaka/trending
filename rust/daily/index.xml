<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-09T01:44:35Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rdi-berkeley/zkp-course-lecture3-code</title>
    <updated>2023-02-09T01:44:35Z</updated>
    <id>tag:github.com,2023-02-09:/rdi-berkeley/zkp-course-lecture3-code</id>
    <link href="https://github.com/rdi-berkeley/zkp-course-lecture3-code" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>solidiquis/erdtree</title>
    <updated>2023-02-09T01:44:35Z</updated>
    <id>tag:github.com,2023-02-09:/solidiquis/erdtree</id>
    <link href="https://github.com/solidiquis/erdtree" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A multi-threaded file-tree visualizer and disk usage analyzer.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;erdtree (et)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/solidiquis/erdtree/actions&#34;&gt;&lt;img src=&#34;https://github.com/solidiquis/erdtree/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/erdtree&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/erdtree.svg?sanitize=true&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A modern, vibrant (but not overly), and multi-threaded file-tree visualizer and disk usage analyzer that respects hidden files and &lt;code&gt;.gitignore&lt;/code&gt; rules - basically if &lt;code&gt;tree&lt;/code&gt; and &lt;code&gt;du&lt;/code&gt; had a baby.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/solidiquis/erdtree/raw/master/assets/erdtree_demo.gif?raw=true&#34; alt=&#34;failed to load gif&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/solidiquis/erdtree/master/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/solidiquis/erdtree/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/solidiquis/erdtree/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/solidiquis/erdtree/master/#disambiguations&#34;&gt;Disambiguations&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/solidiquis/erdtree/master/#disk-size&#34;&gt;Disk Size&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/solidiquis/erdtree/master/#files-without-read-permissions&#34;&gt;File Without Read Permissions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/solidiquis/erdtree/master/#file-coloring&#34;&gt;File Coloring&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/solidiquis/erdtree/master/#tree-command&#34;&gt;tree command&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/solidiquis/erdtree/master/#advantages-over-exa---tree&#34;&gt;Advantages over exa --tree&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/solidiquis/erdtree/master/#rules-for-contributing-and-feature-requests&#34;&gt;Rules for Contributing and Feature Requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/solidiquis/erdtree/master/#special-thanks&#34;&gt;Special Thanks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/solidiquis/erdtree/master/#questions-you-might-have&#34;&gt;Questions you might have&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;erdtree&lt;/strong&gt; is a modern alternative to the ancient &lt;a href=&#34;https://en.wikipedia.org/wiki/Tree_(command)&#34;&gt;tree&lt;/a&gt; command in that it:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;offers a minimal and user-friendly CLI&lt;/li&gt; &#xA; &lt;li&gt;respects hidden files and &lt;code&gt;.gitignore&lt;/code&gt; rules by default&lt;/li&gt; &#xA; &lt;li&gt;displays file sizes in human-readable format by default&lt;/li&gt; &#xA; &lt;li&gt;traverses directories in a parallel manner (4 threads by default)&lt;/li&gt; &#xA; &lt;li&gt;displays files using ANSI colors by default&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ et -h&#xA;erdtree (et) is a multi-threaded filetree visualizer and disk usage analyzer.&#xA;&#xA;Usage: et [OPTIONS] [DIR]&#xA;&#xA;Arguments:&#xA;  [DIR]  Root directory to traverse; defaults to current working directory&#xA;&#xA;Options:&#xA;  -i, --ignore-git-ignore      Ignore .gitignore; disabled by default&#xA;  -l, --level &amp;lt;NUM&amp;gt;            Maximum depth to display&#xA;  -t, --threads &amp;lt;THREADS&amp;gt;      Number of threads to use [default: 4]&#xA;  -s, --sort &amp;lt;SORT&amp;gt;            Sort-order to display directory content [default: none] [possible values: name, size, none]&#xA;  -H, --hidden                 Show hidden files; disabled by default&#xA;  -g, --glob &amp;lt;GLOB&amp;gt;            Include or exclude files using glob patterns&#xA;      --iglob &amp;lt;IGLOB&amp;gt;          Include or exclude files using glob patterns; case insensitive&#xA;      --glob-case-insensitive  Process all glob patterns case insensitively&#xA;  -h, --help                   Print help (see more with &#39;--help&#39;)&#xA;  -V, --version                Print version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Cargo&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure you have &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;Rust and its toolchain&lt;/a&gt; installed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$ cargo install --tag v1.0 --git https://github.com/solidiquis/erdtree&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The executable should then be located in &lt;code&gt;$HOME/.cargo/bin/&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Releases&lt;/h3&gt; &#xA;&lt;p&gt;Binaries for common architectures can be downloaded from latest releases.&lt;/p&gt; &#xA;&lt;p&gt;Other means of installation to come.&lt;/p&gt; &#xA;&lt;h2&gt;Disambiguations&lt;/h2&gt; &#xA;&lt;h3&gt;Disk Size&lt;/h3&gt; &#xA;&lt;p&gt;As recommended in &lt;a href=&#34;https://en.wikipedia.org/wiki/ISO/IEC_80000#cite_note-80000-13:2008-14&#34;&gt;IEC 80000-13&lt;/a&gt;, this command will report sizes using SI units rather than binary units. As such you can expect &lt;code&gt;1KB = 1000B&lt;/code&gt; and not &lt;code&gt;1KiB = 1024B&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Additionally:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A directory will have a size equal to the sum of the sizes of all of its entries. The size of the directory itself is negligble and isn&#39;t taken into account.&lt;/li&gt; &#xA; &lt;li&gt;Files other than directories and regular files (symbolic links, named pipes, sockets, etc.) appear but their memory sizes are not reported.&lt;/li&gt; &#xA; &lt;li&gt;Symbolic links to directories appear but are not traversed; their sizes are also not reported&lt;/li&gt; &#xA; &lt;li&gt;Hidden files, files excluded by &lt;code&gt;.gitignore&lt;/code&gt;, and files excluded via globbing will be ommitted from the total memory size of their parent directories.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Files Without Read Permissions&lt;/h3&gt; &#xA;&lt;p&gt;Files that don&#39;t have read persmissions will appear but won&#39;t have their disk sizes reported. If they are directories they will not be traversed. Additionally, their size will not be included in their parent directory&#39;s total.&lt;/p&gt; &#xA;&lt;h3&gt;File Coloring&lt;/h3&gt; &#xA;&lt;p&gt;Files are printed in ANSI colors specified according to the &lt;code&gt;LS_COLORS&lt;/code&gt; environment variable on GNU/Linux systems. In its absence &lt;a href=&#34;https://docs.rs/lscolors/latest/src/lscolors/lib.rs.html#221&#34;&gt;a default value&lt;/a&gt; is used.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note for MacOS&lt;/strong&gt;: MacOS uses the &lt;code&gt;LSCOLORS&lt;/code&gt; environment variable to determine file colors for the &lt;code&gt;ls&lt;/code&gt; command which is formatted very differently from &lt;code&gt;LS_COLORS&lt;/code&gt;. MacOS systems will fall back on the aforementioned default value unless the user defines their own &lt;code&gt;LS_COLORS&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;tree&lt;/code&gt; command&lt;/h3&gt; &#xA;&lt;p&gt;This is not a rewrite of the &lt;code&gt;tree&lt;/code&gt; command thus it should not be considered a 1-to-1 port. The basic idea is the same: Display the file-tree of the specified directory. There are, however, key fundamental differences under the hood with regard to how file sizes are computed, traversal method, hidden files and &lt;code&gt;.gitignore&lt;/code&gt; rules, and printing.&lt;/p&gt; &#xA;&lt;h3&gt;Advantages over &lt;code&gt;exa --tree&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ogham/exa&#34;&gt;Exa&lt;/a&gt; is a powerful modern equivalent of the &lt;code&gt;ls&lt;/code&gt; command which gives the option to print a tree-view of a specified directory, however the primary differences between &lt;code&gt;exa --tree&lt;/code&gt; and &lt;code&gt;et&lt;/code&gt; are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;exa --tree --git-ignore&lt;/code&gt; doesn&#39;t respect &lt;code&gt;.gitignore&lt;/code&gt; rules on a per directory basis whereas &lt;code&gt;et&lt;/code&gt; does. With &lt;code&gt;exa&lt;/code&gt; the root&#39;s &lt;code&gt;.gitignore&lt;/code&gt; is considered, but if child directories have their own &lt;code&gt;.gitignore&lt;/code&gt; they are disregarded and all of their contents will be printed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;et&lt;/code&gt; displays the total size of a directory as the sum of all of its file sizes whereas &lt;code&gt;exa&lt;/code&gt; &lt;a href=&#34;https://github.com/ogham/exa/issues/91&#34;&gt;does not support this&lt;/a&gt;. This makes sorting directories in the tree-view by size dubious and unclear. Below are screenshots comparing equivalent usages of &lt;code&gt;et&lt;/code&gt; and &lt;code&gt;exa&lt;/code&gt;, using long option names for clarity.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;exa&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/solidiquis/erdtree/raw/master/assets/exa.png?raw=true&#34; alt=&#34;failed to load png&#34;&gt; &lt;/p&gt; &#xA;&lt;h4&gt;erdtree&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/solidiquis/erdtree/raw/master/assets/et.png?raw=true&#34; alt=&#34;failed to load png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Rules for Contributing and Feature Requests&lt;/h2&gt; &#xA;&lt;p&gt;Happy to accept contributions but please keep the following in mind:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you&#39;re doing some minor refactoring and/or code cleanup feel free to just submit a PR.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;d like to add a feature and/or make fundamental changes to &lt;code&gt;et&lt;/code&gt;&#39;s &lt;a href=&#34;https://github.com/solidiquis/erdtree/raw/e7f37d416d6d61b1d62e2200935b4813aaeab461/src/fs/erdtree/tree/mod.rs#L63&#34;&gt;traverse&lt;/a&gt; algorithm please open up an issue and get my approval first.&lt;/li&gt; &#xA; &lt;li&gt;Feature adds require tests.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Feature requests in the form of issues in general are welcome.&lt;/p&gt; &#xA;&lt;h2&gt;Special thanks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;to Reddit user &lt;code&gt;/u/johnm&lt;/code&gt; for suggesting that different SI prefixes be colored differently for better visual feedback.&lt;/li&gt; &#xA; &lt;li&gt;to Reddit user &lt;code&gt;/u/lucca_huguet&lt;/code&gt; for suggesting that the compiled &lt;code&gt;erdtree&lt;/code&gt; binary be shorted to &lt;code&gt;et&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;to all contributors :]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Questions you might have&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Q: Why did you make this? It&#39;s totally unnecessary.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;A: Ennui.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Q: Why is it called erdtree?&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;A: It&#39;s a reference to Elden Ring.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Q: Is it any good?&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;A: Yes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Q: Is it blazingly fast?&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;A: Should be. I wrote it in Rust.&lt;/p&gt; &#xA;&lt;img src=&#34;https://i.redd.it/t7ns9qtb5gh81.jpg&#34;&gt;</summary>
  </entry>
  <entry>
    <title>PoignardAzur/masonry-rs</title>
    <updated>2023-02-09T01:44:35Z</updated>
    <id>tag:github.com,2023-02-09:/PoignardAzur/masonry-rs</id>
    <link href="https://github.com/PoignardAzur/masonry-rs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rust UI design toolkit.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Masonry&lt;/h2&gt; &#xA;&lt;p&gt;Masonry is a framework that aims to provide the foundation for Rust GUI libraries.&lt;/p&gt; &#xA;&lt;p&gt;Masonry gives you a platform to create windows (using &lt;a href=&#34;https://github.com/linebender/glazier&#34;&gt;Glazier&lt;/a&gt; as a backend) each with a tree of widgets. It also gives you tools to inspect that widget tree at runtime, write unit tests on it, and generally have an easier time debugging and maintaining your app.&lt;/p&gt; &#xA;&lt;p&gt;The framework is not opinionated about what your user-facing abstraction will be: you can implement immediate-mode GUI, the Elm architecture, functional reactive GUI, etc, on top of Masonry.&lt;/p&gt; &#xA;&lt;p&gt;This project was originally a fork of &lt;a href=&#34;https://github.com/linebender/druid&#34;&gt;Druid&lt;/a&gt; that emerged from discussions I had with Raph Levien and Colin Rofls about what it would look like to turn Druid into a foundational library.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo add masonry&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;On Linux, Masonry requires gtk+3; see &lt;a href=&#34;https://www.gtk.org/docs/installations/linux/&#34;&gt;GTK installation page&lt;/a&gt;. (On ubuntu-based distro, running &lt;code&gt;sudo apt-get install libgtk-3-dev&lt;/code&gt; from the terminal will do the job.)&lt;/p&gt; &#xA;&lt;h3&gt;OpenBSD&lt;/h3&gt; &#xA;&lt;p&gt;On OpenBSD, Masonry requires gtk+3; install from packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pkg_add gtk+3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;The todo-list example looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use masonry::widget::{prelude::*, TextBox};&#xA;use masonry::widget::{Button, Flex, Label, Portal, WidgetMut};&#xA;use masonry::Action;&#xA;use masonry::{AppDelegate, AppLauncher, DelegateCtx, WindowDescription, WindowId};&#xA;&#xA;const VERTICAL_WIDGET_SPACING: f64 = 20.0;&#xA;&#xA;struct Delegate {&#xA;    next_task: String,&#xA;}&#xA;&#xA;impl AppDelegate for Delegate {&#xA;    fn on_action(&#xA;        &amp;amp;mut self,&#xA;        ctx: &amp;amp;mut DelegateCtx,&#xA;        _window_id: WindowId,&#xA;        _widget_id: WidgetId,&#xA;        action: Action,&#xA;        _env: &amp;amp;Env,&#xA;    ) {&#xA;        match action {&#xA;            Action::ButtonPressed =&amp;gt; {&#xA;                let mut root: WidgetMut&amp;lt;Portal&amp;lt;Flex&amp;gt;&amp;gt; = ctx.get_root();&#xA;                let mut flex = root.child_mut();&#xA;                flex.add_child(Label::new(self.next_task.clone()));&#xA;            }&#xA;            Action::TextChanged(new_text) =&amp;gt; {&#xA;                self.next_task = new_text.clone();&#xA;            }&#xA;            _ =&amp;gt; {}&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;fn main() {&#xA;    // The main button with some space below, all inside a scrollable area.&#xA;    let root_widget = Portal::new(&#xA;        Flex::column()&#xA;            .with_child(&#xA;                Flex::row()&#xA;                    .with_child(TextBox::new(&#34;&#34;))&#xA;                    .with_child(Button::new(&#34;Add task&#34;)),&#xA;            )&#xA;            .with_spacer(VERTICAL_WIDGET_SPACING),&#xA;    );&#xA;&#xA;    let main_window = WindowDescription::new(root_widget)&#xA;        .title(&#34;To-do list&#34;)&#xA;        .window_size((400.0, 400.0));&#xA;&#xA;    AppLauncher::with_window(main_window)&#xA;        .with_delegate(Delegate {&#xA;            next_task: String::new(),&#xA;        })&#xA;        .log_to_console()&#xA;        .launch()&#xA;        .expect(&#34;Failed to launch application&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you can see, compared to crates like Druid or Iced, Masonry takes a fairly low-level approach to GUI: there is no complex reconciliation logic or dataflow going on behind the scenes; if you want to add a widget to the flex container, you call &lt;code&gt;flex.add_child(your_widget)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This simplicity makes Masonry somewhat painful if you want to use it to actually build GUI applications. The hope is that, by being low-level and straightforward, developers can easily build GUI frameworks on top of it.&lt;/p&gt; &#xA;&lt;p&gt;(Well, in theory. The first stress-test will be porting &lt;a href=&#34;https://github.com/PoignardAzur/panoramix&#34;&gt;Panoramix&lt;/a&gt;, a React-style GUI in Rust, to Masonry.)&lt;/p&gt; &#xA;&lt;h2&gt;Unit tests&lt;/h2&gt; &#xA;&lt;p&gt;Masonry is designed to make unit tests easy to write, as if the test function were a mouse-and-keyboard user. Tests look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;#[test]&#xA;fn some_test_with_a_button() {&#xA;    let [button_id] = widget_ids();&#xA;    let widget = Button::new(&#34;Hello&#34;).with_id(button_id);&#xA;&#xA;    let mut harness = TestHarness::create(widget);&#xA;&#xA;    // Make a snapshot test of the visual contents of the window&#xA;    assert_render_snapshot!(harness, &#34;hello&#34;);&#xA;&#xA;    harness.edit_root_widget(|mut button, _| {&#xA;        let mut button = button.downcast::&amp;lt;Button&amp;gt;().unwrap();&#xA;        button.set_text(&#34;World&#34;);&#xA;    });&#xA;&#xA;    // Make new snapshot test now that the window has changed&#xA;    assert_render_snapshot!(harness, &#34;world&#34;);&#xA;&#xA;    // References to widget automatically implement Debug, and&#xA;    // will print their part of the widget hierarchy.&#xA;    println!(&#34;Window contents: {:?}&#34;, harness.root_widget());&#xA;&#xA;    // You can also use insta to snapshot-test the widget hierarchy&#xA;    assert_debug_snapshot!(harness.root_widget());&#xA;&#xA;    // Clicking on a button will produce a &#34;ButtonPressed&#34; action.&#xA;    harness.mouse_click_on(button_id);&#xA;    assert_eq!(&#xA;        harness.pop_action(),&#xA;        Some((Action::ButtonPressed, button_id))&#xA;    );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Issues and PRs are welcome. See &lt;a href=&#34;https://github.com/PoignardAzur/masonry-rs/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22&#34;&gt;&lt;code&gt;help-wanted&lt;/code&gt; issues&lt;/a&gt; if you don&#39;t know where to begin.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;The immediate next steps are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Remove Env type and Data trait (#8)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Re-add Dialog feature (#25)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Switch to using Vello and Glazier (#24)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Refactor TextLayout (#23)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Rework Widget trait (#26)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Port &lt;a href=&#34;https://github.com/PoignardAzur/panoramix&#34;&gt;Panoramix&lt;/a&gt; to Masonry&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Port &lt;a href=&#34;https://github.com/linebender/xilem&#34;&gt;Xilem&lt;/a&gt; to Masonry&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/PoignardAzur/masonry-rs/main/ROADMAP.md&#34;&gt;ROADMAP.md&lt;/a&gt; and &lt;a href=&#34;https://github.com/PoignardAzur/masonry-rs/issues&#34;&gt;the issues page&lt;/a&gt; for more.&lt;/p&gt;</summary>
  </entry>
</feed>