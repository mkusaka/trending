<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-06T01:37:55Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mistricky/codesnap.nvim</title>
    <updated>2024-04-06T01:37:55Z</updated>
    <id>tag:github.com,2024-04-06:/mistricky/codesnap.nvim</id>
    <link href="https://github.com/mistricky/codesnap.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üì∏ Snapshot plugin with rich features that can make pretty code snapshots for Neovim&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/mistricky/codesnap.nvim/assets/22574136/9fc40afc-cff8-4e18-a04f-e931d32a1fb7&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Neovim-57A143?logo=neovim&amp;amp;logoColor=fff&amp;amp;style=for-the-badge&#34; alt=&#34;Neovim&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Made%20With%20Lua-2C2D72?logo=lua&amp;amp;logoColor=fff&amp;amp;style=for-the-badge&#34; alt=&#34;made with lua&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/mistricky/codesnap.nvim/release.yml?style=for-the-badge&amp;amp;label=release&#34; alt=&#34;release action status&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/mistricky/codesnap.nvim/lint.yml?style=for-the-badge&amp;amp;label=Lint&#34; alt=&#34;release action status&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;CodeSnap.nvim&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;üì∏ Snapshot plugin with rich features that can make pretty code snapshots for Neovim&lt;/p&gt; &#xA;&lt;h2&gt;üö£Migration&lt;/h2&gt; &#xA;&lt;p&gt;If you have installed v0.x before, this chapter will show you what break changes version v1.x introduced.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;CodeSnapPreviewOn&lt;/code&gt; command is not supported, if you prefer live-preview, you can pin &lt;code&gt;CodeSnap.nvim&lt;/code&gt; version to &lt;code&gt;v0.0.11&lt;/code&gt; to continue using this command.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;opacity&lt;/code&gt; and &lt;code&gt;preview_title&lt;/code&gt; config has been removed from v1.0.0&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;editor_font_family&lt;/code&gt; was renamed to &lt;code&gt;code_font_family&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;v1.x has a different architecture and better performance than v0.x, and v1.x can generate screenshots directly without an open browser. We recommend you upgrade to v1.x for a better experience.&lt;/p&gt; &#xA;&lt;h2&gt;‚ú®Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ü§© Beautiful code snap template&lt;/li&gt; &#xA; &lt;li&gt;üòé Custom watermark and window style&lt;/li&gt; &#xA; &lt;li&gt;üíª Beautiful Mac-style title bar&lt;/li&gt; &#xA; &lt;li&gt;ü§ñ Generate snapshots using only a single command&lt;/li&gt; &#xA; &lt;li&gt;üçû Breadcrumbs for display file path&lt;/li&gt; &#xA; &lt;li&gt;üåä More beautiful background theme&lt;/li&gt; &#xA; &lt;li&gt;üî¢ [WIP] Column number&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Prerequirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim 9.0+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;We recommend using &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;Lazy.nvim&lt;/a&gt; to install CodeSnap.nvim, but you can still use another plugin manager you prefer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Lazy.nvim&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{ &#34;mistricky/codesnap.nvim&#34;, build = &#34;make&#34; },&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Packer&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#39;mistricky/codesnap.nvim&#39;, run = &#39;make&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Vim-Plug&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;Plug &#39;mistricky/codesnap.nvim&#39;, { &#39;do&#39;: &#39;make&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s worth mentioning that the screenshot feature is implemented by a module called &lt;code&gt;generator&lt;/code&gt; written in Rust, when &lt;code&gt;make&lt;/code&gt; the project, the CodeSnap.nvim will mount a precompiled cross-compile &lt;code&gt;generator&lt;/code&gt; shared file into the plugin that depends on what OS you are using.&lt;/p&gt; &#xA;&lt;p&gt;We precompiled the following targets:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;x86_64-unknown-linux-gnu&lt;/li&gt; &#xA; &lt;li&gt;x86_64-apple-darwin&lt;/li&gt; &#xA; &lt;li&gt;aarch64-apple-darwin&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If your platform is in the above list, you can just run &lt;code&gt;make&lt;/code&gt; after the plugin is installed like the above examples do, CodeSnap.nvim will automatically mount the shared file into the plugin. This means you don&#39;t need any Rust utils to compile manually from source.&lt;/p&gt; &#xA;&lt;h3&gt;Compile from source&lt;/h3&gt; &#xA;&lt;p&gt;You need to install Rust development environment before compiling from source, you can refer &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;Install Rust&lt;/a&gt; for more detail.&lt;/p&gt; &#xA;&lt;p&gt;Please keep in mind, cross-compile to these platforms only helps a portion of users to have out-of-box experience, if your platform is not in the above targets list, you still need to compile from source using &lt;code&gt;make build_generator&lt;/code&gt;, for instance using Lazy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{ &#34;mistricky/codesnap.nvim&#34;, build = &#34;make build_generator&#34; },&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We always recommend you to compile CodeSnap.nvim from &lt;code&gt;source&lt;/code&gt; instead of using the precompiled shared file, because the correctness and consistency of compiling from source are always higher than cross-compiling.&lt;/p&gt; &#xA;&lt;h3&gt;Compile on ARM&lt;/h3&gt; &#xA;&lt;p&gt;If you try to compile CodeSnap.nvim on ARM architecture, you may need to install additional dependencies to compile it, thanks @matteocavestri mentioned in &lt;a href=&#34;https://github.com/mistricky/codesnap.nvim/issues/53#issuecomment-2032088162&#34;&gt;https://github.com/mistricky/codesnap.nvim/issues/53#issuecomment-2032088162&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export CC=gcc&#xA;sudo dnf install libuv libuv-devel # On RHEL based systems&#xA;sudo apt-get install libtool libuv1-dev # On Debian based systems&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;CodeSnap.nvim&lt;/code&gt; provides the following two ways to take snapshots of currently selected code&lt;/p&gt; &#xA;&lt;h3&gt;Copy into the clipboard&lt;/h3&gt; &#xA;&lt;p&gt;To take a beautiful snapshot use CodeSnap.nvim, you can just use &lt;code&gt;CodeSnap&lt;/code&gt; command to generate a snapshot of the current selected code, then the &lt;code&gt;CodeSnap.nvim&lt;/code&gt; will write the snapshot into the clipboard, and you can paste it anywhere you want.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mistricky/codesnap.nvim/assets/22574136/99be72db-57d7-4839-91d0-2a9dfb1901ac&#34;&gt;https://github.com/mistricky/codesnap.nvim/assets/22574136/99be72db-57d7-4839-91d0-2a9dfb1901ac&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Copy into clipboard on Linux Wayland&lt;/h4&gt; &#xA;&lt;p&gt;Copy screenshots directly into the clipboard is cool, however, it doesn&#39;t work well on wl-clipboard, because the wl-clipboard can&#39;t paste the content which come from exited processes. As Hyprland document say:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;When we copy something on Wayland (using wl-clipboard) and close the application we copied from, the copied data disappears from the clipboard and we cannot paste it anymore. So to fix this problem we can use a program called as wl-clip-persist which will preserve the data in the clipboard after the application is closed.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you using CodeSnap.nvim on wl-clipboard, you can refer &lt;a href=&#34;https://github.com/Linus789/wl-clip-persist&#34;&gt;wl-clip-persist&lt;/a&gt;, it reads all the clipboard data into memory and then overwrites the clipboard with the data from our memory to persist copied data.&lt;/p&gt; &#xA;&lt;h3&gt;Save the snapshot&lt;/h3&gt; &#xA;&lt;p&gt;Of course, you can use &lt;code&gt;CodeSnapSave&lt;/code&gt; command to save the snapshot to path where you defined it in &lt;code&gt;config.save_path&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;codesnap&#34;).setup({&#xA;  -- The save_path must be ends with .png, unless when you specified a directory path,&#xA;  -- CodeSnap will append an auto-generated filename to the specified directory path&#xA;  -- For example:&#xA;  -- save_path = &#34;~/Pictures&#34;&#xA;  -- parsed: &#34;~/Pictures/CodeSnap_y-m-d_at_h&lt;span&gt;‚ìÇ&lt;/span&gt;s.png&#34;&#xA;  -- save_path = &#34;~/Pictures/foo.png&#34;&#xA;  -- parsed: &#34;~/Pictures/foo.png&#34;&#xA;  save_path = ...&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mistricky/codesnap.nvim/assets/22574136/69b27e77-3dce-4bc3-8516-89ce636fe02d&#34;&gt;https://github.com/mistricky/codesnap.nvim/assets/22574136/69b27e77-3dce-4bc3-8516-89ce636fe02d&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Specify language extension&lt;/h3&gt; &#xA;&lt;p&gt;In some scenarios, CodeSnap.nvim cannot auto-detect what language syntax should used to highlight code, for example, shell script can have no extension, they specify interpreters using shebang.&lt;/p&gt; &#xA;&lt;p&gt;CodeSnap.nvim won&#39;t read the whole content of the file, thus cannot detect what language syntax is this, in this case, you can specify extension explicitly, for instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CodeSnapSave sh&#xA;CodeSnap sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Breadcrumbs&lt;/h2&gt; &#xA;&lt;p&gt;Breadcrumbs are something to display the current snapshot file path, you can open it through config &lt;code&gt;has_breadcrumbs&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;codesnap&#34;).setup({&#xA;  -- ...&#xA;  has_breadcrumbs = true&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The breadcrumbs look like: &lt;img src=&#34;https://github.com/mistricky/codesnap.nvim/assets/22574136/23274faa-36a9-4d41-88a5-e48c44b4d5bf&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Custom path separator&lt;/h3&gt; &#xA;&lt;p&gt;The CodeSnap.nvim uses &lt;code&gt;/&lt;/code&gt; as the separator of the file path by default, of course, you can specify any symbol you prefer as the custom separator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;codesnap&#34;).setup({&#xA;  -- ...&#xA;  has_breadcrumbs = true&#xA;  breadcrumbs_separator = &#34;üëâ&#34;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/mistricky/codesnap.nvim/assets/22574136/84b80d0f-1467-4bdf-9cbd-aede868f93aa&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Custom background&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;CodeSnap.nvim&lt;/code&gt; comes with many beautiful backgrounds preset, you can set any background you like by setting &lt;code&gt;bg_theme&lt;/code&gt; to its name, just like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;codesnap&#34;).setup({&#xA;  -- The &#34;default&#34; background is one you see at the beginning of the README&#xA;  bg_theme = &#34;default&#34;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;bamboo&lt;/th&gt; &#xA;   &lt;th&gt;sea&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://github.com/mistricky/codesnap.nvim/assets/22574136/ce3a387b-61a5-42ba-8f71-1b4949f5e148&#34; width=&#34;650&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://github.com/mistricky/codesnap.nvim/assets/22574136/122790b6-6365-402c-806a-dfc78dabbc06&#34; width=&#34;650&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;peach&lt;/th&gt; &#xA;   &lt;th&gt;grape&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://github.com/mistricky/codesnap.nvim/assets/22574136/c0ec9dc1-cd8b-463e-9f2d-ab2e1e3a9831&#34; width=&#34;650&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://github.com/mistricky/codesnap.nvim/assets/22574136/b573786b-70ed-4006-89c7-20bed115c9cc&#34; width=&#34;650&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;dusk&lt;/th&gt; &#xA;   &lt;th&gt;summer&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://github.com/mistricky/codesnap.nvim/assets/22574136/e3bb5222-542d-4c32-b78b-8cf4695feec9&#34; width=&#34;650&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://github.com/mistricky/codesnap.nvim/assets/22574136/98ced31a-091b-4ed8-9bd6-bb5b502a7db2&#34; width=&#34;650&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Solid color background&lt;/h3&gt; &#xA;&lt;p&gt;If you prefer solid color background, you can set &lt;code&gt;bg_color&lt;/code&gt; to your preferred color. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;codesnap&#34;).setup({&#xA;  -- ...&#xA;  bg_color = &#34;#535c68&#34;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/mistricky/codesnap.nvim/assets/22574136/a600c2e4-4c60-4ec0-b2fc-3b41481048dc&#34; alt=&#34;CodeSnap&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Watermark&lt;/h2&gt; &#xA;&lt;p&gt;Watermark is something that makes screenshots more personalized, but if you don&#39;t like watermark just set it as an empty string to hide it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;codesnap&#34;).setup({&#xA;  -- ...&#xA;  watermark = &#34;&#34;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;CodeSnap # Take a snapshot of the currently selected code and copy the snapshot into the clipboard&#xA;&#xA;CodeSnapSave # Save the snapshot of the currently selected code and save it on the disk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Define your custom config using &lt;code&gt;setup&lt;/code&gt; function&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;codesnap&#34;).setup({...})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is a default config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    mac_window_bar = true,&#xA;    title = &#34;CodeSnap.nvim&#34;,&#xA;    code_font_family = &#34;CaskaydiaCove Nerd Font&#34;,&#xA;    watermark_font_family = &#34;Pacifico&#34;,&#xA;    watermark = &#34;CodeSnap.nvim&#34;,&#xA;    bg_theme = &#34;default&#34;,&#xA;    breadcrumbs_separator = &#34;/&#34;,&#xA;    has_breadcrumbs = false,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;CodeSnap.nvim is a project that will be maintained for the long term, and we always accepts new contributors, please feel free to submit PR &amp;amp; issues.&lt;/p&gt; &#xA;&lt;p&gt;The commit message convention of this project is following &lt;a href=&#34;https://github.com/wizardoc/commitlint-wizardoc&#34;&gt;commitlint-wizardoc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>HardhatChad/ore-cli</title>
    <updated>2024-04-06T01:37:55Z</updated>
    <id>tag:github.com,2024-04-06:/HardhatChad/ore-cli</id>
    <link href="https://github.com/HardhatChad/ore-cli" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ore CLI&lt;/h1&gt; &#xA;&lt;p&gt;A command line interface for the Ore program.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;To build the Ore CLI, you will need to have the Rust programming language installed. You can install Rust by following the instructions on the &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;Rust website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Once you have Rust installed, you can build the Ore CLI by running the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>