<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-15T09:03:05Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>vmfunc/cargo-buttplug</title>
    <updated>2024-05-15T09:03:05Z</updated>
    <id>tag:github.com,2024-05-15:/vmfunc/cargo-buttplug</id>
    <link href="https://github.com/vmfunc/cargo-buttplug" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ensuring positive reinforcement during long, tiring code sessions~&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;cargo-buttplug&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/crates/v/cargo-buttplug&#34; alt=&#34;Crates.io Version&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;ensuring positive reinforcement during long, tiring code sessions~&lt;/p&gt; &#xA;&lt;h2&gt;Preview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/vmfunc/cargo-buttplug/assets/59031302/78939b9c-ad3c-4226-9ffd-6982c5a19ab8&#34;&gt;https://github.com/vmfunc/cargo-buttplug/assets/59031302/78939b9c-ad3c-4226-9ffd-6982c5a19ab8&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You will need a local buttplug.io server set up. The defaults for cargo-buttplug are websocket addresses from &lt;a href=&#34;https://intiface.com/central/&#34;&gt;Intiface Central&lt;/a&gt;. We recommend setting this up.&lt;/p&gt; &#xA;&lt;p&gt;To install cargo-buttplug, just run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;  cargo install cargo-buttplug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Simply add buttplug after each cargo command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    cargo buttplug build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Written by &lt;a href=&#34;https://github.com/vmfunc&#34;&gt;vmfunc&lt;/a&gt; and &lt;a href=&#34;https://github.com/kennethnym&#34;&gt;kenneth&lt;/a&gt; because it was a boring saturday&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>fossable/goldboot</title>
    <updated>2024-05-15T09:03:05Z</updated>
    <id>tag:github.com,2024-05-15:/fossable/goldboot</id>
    <link href="https://github.com/fossable/goldboot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Immutable infrastructure for the desktop!&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/goldboot/goldboot/master/.github/images/logo-bg-256.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/license/goldboot/goldboot&#34; alt=&#34;License&#34;&gt; &lt;img src=&#34;https://github.com/goldboot/goldboot/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;build&#34;&gt; &lt;a href=&#34;https://discord.gg/Vzr7gT5dsd&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/981695209492606986&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/repo-size/fossable/goldboot&#34; alt=&#34;GitHub repo size&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/goldboot/goldboot?style=social&#34; alt=&#34;Stars&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;People usually don&#39;t reinstall their OS from scratch very often. When they do, chaos ensues the moment they reach that pristine desktop or terminal. Settings get changed, applications are installed, bloatware is removed, files are downloaded here and there. The system is generally altered from its original state into a new &#34;customized&#34; state by a manual flurry of mouse clicks and key presses.&lt;/p&gt; &#xA;&lt;p&gt;This standard approach is like &lt;em&gt;mutable infrastructure&lt;/em&gt;, meaning you mutate the state of your system repeatedly until it eventually suits your needs. And when something goes awry, you have to make the necessary changes to get it back in line.&lt;/p&gt; &#xA;&lt;p&gt;For most people, mutable infrastructure works out fine until something major breaks or they have to migrate to a new computer altogether. In these cases, they probably end up starting over from scratch and reapply their changes again (and probably slightly differently this time).&lt;/p&gt; &#xA;&lt;p&gt;Sophisticated computer elites probably practice &lt;em&gt;immutable infrastructure&lt;/em&gt;. Meaning that, every time they boot their system, its state begins almost identically to the time before. Any changes that are made during the course of runtime vanish on reboot. This approach has some real benefits, but requires quite a bit of effort from the user.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;goldboot&lt;/code&gt; is a tool that builds machine images for real hardware that can help you achieve something close to immutable infrastructure without creating a lot of extra work for yourself.&lt;/p&gt; &#xA;&lt;p&gt;In the &lt;code&gt;goldboot&lt;/code&gt; approach, you create a declarative configuration file for each machine that you want to deploy. Using this configuration, &lt;code&gt;goldboot&lt;/code&gt; builds an image either on your local machine or on a CI platform like Github Actions. The resulting image can be deployed to real hardware via a USB drive or through PXE boot.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning: this tool is totally unfinshed and should be used for testing only! Proceed at your own risk!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/goldboot/goldboot/master/.github/images/overview.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;goldboot&lt;/code&gt; is approximately what you would get if &lt;a href=&#34;https://www.docker.com&#34;&gt;&lt;code&gt;docker&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://www.packer.io&#34;&gt;&lt;code&gt;packer&lt;/code&gt;&lt;/a&gt; were mixed together. Instead of building containers or virtual machines, &lt;code&gt;goldboot&lt;/code&gt; builds images for real hardware.&lt;/p&gt; &#xA;&lt;p&gt;These machine images (also known as &lt;em&gt;golden images&lt;/em&gt;) contain your operating system(s), applications, software patches, and configuration all rolled into one easily deployable package.&lt;/p&gt; &#xA;&lt;p&gt;Like Docker images, your &lt;code&gt;goldboot&lt;/code&gt; images can be stored in a registry and pulled onto real hardware.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Docker&lt;/summary&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/fossable/goldboot&#34; alt=&#34;Docker Pulls&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/image-size/fossable/goldboot&#34; alt=&#34;Docker Image Size&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/stars/fossable/goldboot&#34; alt=&#34;Docker Stars&#34;&gt;&lt;/p&gt; &#xA; &lt;h4&gt;Install from DockerHub&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;alias goldboot=&#34;docker run --rm -v .:/root fossable/goldboot&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Crates.io&lt;/summary&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/crates/d/goldboot&#34; alt=&#34;Crates.io Total Downloads&#34;&gt;&lt;/p&gt; &#xA; &lt;h4&gt;Install from crates.io&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo install goldboot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Arch Linux&lt;/summary&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/aur/votes/goldboot&#34; alt=&#34;AUR Votes&#34;&gt; &lt;img src=&#34;https://img.shields.io/aur/version/goldboot&#34; alt=&#34;AUR Version&#34;&gt; &lt;img src=&#34;https://img.shields.io/aur/last-modified/goldboot&#34; alt=&#34;AUR Last Modified&#34;&gt;&lt;/p&gt; &#xA; &lt;h4&gt;Install from the AUR&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;  cd /tmp&#xA;  curl https://aur.archlinux.org/cgit/aur.git/snapshot/goldboot.tar.gz | tar xf -&#xA;  makepkg -si&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Github Releases&lt;/summary&gt; &#xA; &lt;h4&gt;Install manually from Github releases&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -o /usr/bin/goldboot https://github.com/fossable/goldboot/releases/download/v0.0.3/goldboot_&amp;lt;platform&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h5&gt;Dependencies&lt;/h5&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;apt-get install -y libudev1 libgtk-4-1 libglib2.0-0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Github Actions&lt;/summary&gt; &#xA; &lt;h4&gt;Running on Github actions&lt;/h4&gt; &#xA; &lt;p&gt;Building golden images with CI is common practice, so there&#39;s also a &lt;a href=&#34;https://github.com/fossable/goldboot-action&#34;&gt;Github action&lt;/a&gt; to make it easy:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;steps:&#xA;  - name: Checkout&#xA;    uses: actions/checkout@v4&#xA;&#xA;  - name: Build goldboot image&#xA;    uses: fossable/goldboot-action@main&#xA;    with:&#xA;      config-path: goldboot.json&#xA;      output-path: image.gb&#xA;&#xA;  - name: Save image artifact&#xA;    uses: actions/upload-artifact@v3&#xA;    with:&#xA;      name: my_image.gb&#xA;      path: image.gb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/fossable/goldboot-examples&#34;&gt;goldboot-examples&lt;/a&gt; repo contains example configurations of all supported OS types and system architectures. They are built on a weekly schedule against the latest version of &lt;code&gt;goldboot&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Linux&lt;/th&gt; &#xA;   &lt;th&gt;Windows&lt;/th&gt; &#xA;   &lt;th&gt;macos&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fossable/goldboot/master/goldboot/src/foundry/molds/alpine/icon.png&#34; alt=&#34;Alpine&#34;&gt; &lt;img src=&#34;https://github.com/fossable/goldboot-examples/workflows/Alpine/badge.svg?sanitize=true&#34; alt=&#34;x86_64&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fossable/goldboot/master/goldboot/src/foundry/molds/windows_10/icon.png&#34; alt=&#34;Windows 10&#34;&gt; &lt;img src=&#34;https://github.com/fossable/goldboot-examples/workflows/Windows10/badge.svg?sanitize=true&#34; alt=&#34;x86_64&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fossable/goldboot/master/goldboot/src/foundry/molds/arch_linux/mac_os.png&#34; alt=&#34;macOS&#34;&gt; &lt;img src=&#34;https://github.com/fossable/goldboot-examples/workflows/Macos/badge.svg?sanitize=true&#34; alt=&#34;x86_64&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fossable/goldboot/master/goldboot/src/foundry/molds/arch_linux/icon.png&#34; alt=&#34;Arch Linux&#34;&gt; &lt;img src=&#34;https://github.com/fossable/goldboot-examples/workflows/ArchLinux/badge.svg?sanitize=true&#34; alt=&#34;x86_64&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fossable/goldboot/master/goldboot/src/foundry/molds/debian/icon.png&#34; alt=&#34;Debian&#34;&gt; &lt;img src=&#34;https://github.com/fossable/goldboot-examples/workflows/Debian/badge.svg?sanitize=true&#34; alt=&#34;x86_64&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fossable/goldboot/master/goldboot/src/foundry/molds/pop_os/icon.png&#34; alt=&#34;Pop!_OS&#34;&gt; &lt;img src=&#34;https://github.com/fossable/goldboot-examples/workflows/Pop!_OS/badge.svg?sanitize=true&#34; alt=&#34;x86_64&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fossable/goldboot/master/goldboot/src/foundry/molds/steam_deck/icon.png&#34; alt=&#34;Steam Deck&#34;&gt; &lt;img src=&#34;https://github.com/fossable/goldboot-examples/workflows/SteamDeck/badge.svg?sanitize=true&#34; alt=&#34;x86_64&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fossable/goldboot/master/goldboot/src/foundry/molds/steam_os/icon.png&#34; alt=&#34;Steam OS&#34;&gt; &lt;img src=&#34;https://github.com/fossable/goldboot-examples/workflows/SteamOs/badge.svg?sanitize=true&#34; alt=&#34;x86_64&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Example walkthrough&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s build a basic Arch Linux &lt;img src=&#34;https://raw.githubusercontent.com/fossable/goldboot/master/goldboot/src/foundry/molds/arch_linux/icon.png&#34; alt=&#34;ArchLinux&#34;&gt; image to prove we&#39;re &lt;em&gt;real&lt;/em&gt; Linux users.&lt;/p&gt; &#xA;&lt;p&gt;First, create a directory to hold our configuration (which can later be tracked in version control):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir Test &amp;amp;&amp;amp; cd Test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Initialize the directory and choose &lt;code&gt;ArchLinux&lt;/code&gt; to start with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;goldboot init \&#xA;  --name Test \&#xA;  --mold ArchLinux \&#xA;  --size 10G \&#xA;  --format json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create &lt;code&gt;goldboot.json&lt;/code&gt; which contains configuration options that can be tweaked to suit your needs. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;alloy&#34;: [&#xA;    {&#xA;      &#34;mold&#34;: {&#xA;        &#34;ArchLinux&#34;: {&#xA;          &#34;hostname&#34;: &#34;YeahIUseArch&#34;,&#xA;          &#34;root_password&#34;: {&#xA;            &#34;plaintext&#34;: &#34;123456&#34;&#xA;          }&#xA;        }&#xA;      },&#xA;      &#34;source&#34;: {&#xA;        &#34;Iso&#34;: {&#xA;          &#34;url&#34;: &#34;https://mirrors.edge.kernel.org/archlinux/iso/2024.01.01/archlinux-2024.01.01-x86_64.iso&#34;,&#xA;          &#34;checksum&#34;: &#34;sha256:12addd7d4154df1caf5f258b80ad72e7a724d33e75e6c2e6adc1475298d47155&#34;&#xA;        }&#xA;      }&#xA;    }&#xA;  ],&#xA;  &#34;arch&#34;: &#34;Amd64&#34;,&#xA;  &#34;name&#34;: &#34;Test&#34;,&#xA;  &#34;size&#34;: &#34;10G&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are many ways to customize the image, but for now just build it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;goldboot build .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the build succeeds, the image will be saved to the system&#39;s library directory. To deploy it to a physical disk, you can include the image on a new bootable USB drive:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# THIS WILL OVERWRITE /dev/sdX!&#xA;goldboot liveusb --output /dev/sdX --include Test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the USB is created, you can use it to boot into the goldboot live environment and select an image to deploy:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/goldboot/goldboot/master/.github/images/select_image.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Once the image has been deployed, remove the bootable USB drive and reboot the machine.&lt;/p&gt;</summary>
  </entry>
</feed>