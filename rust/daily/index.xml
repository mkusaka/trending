<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-14T01:37:01Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>haimgel/display-switch</title>
    <updated>2024-02-14T01:37:01Z</updated>
    <id>tag:github.com,2024-02-14:/haimgel/display-switch</id>
    <link href="https://github.com/haimgel/display-switch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Turn a $30 USB switch into a full-featured multi-monitor KVM switch&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/haimgel/display-switch/actions&#34;&gt;&lt;img src=&#34;https://github.com/haimgel/display-switch/workflows/build/badge.svg?branch=main&#34; alt=&#34;build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/haimgel/display-switch/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/haimgel/display-switch&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Turn a $30 USB switch into a full-featured KVM&lt;/h1&gt; &#xA;&lt;p&gt;This utility watches for USB device connect/disconnect events and switches monitor inputs via DDC/CI. This turns a simple USB switch into a full-fledged KVM solution: press one button on your USB switch and all your monitors connect to a different input.&lt;/p&gt; &#xA;&lt;p&gt;It is supposed to be installed on all computers that could be connected to these monitors, since the app only switches monitors &#34;one way&#34; and relies on itself running on the other computers to switch it &#34;the other way&#34; as needed.&lt;/p&gt; &#xA;&lt;h2&gt;Platforms supported&lt;/h2&gt; &#xA;&lt;p&gt;The app should function on MacOS (Intel Macs only), Windows, and Linux.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Display Switch is currently &lt;strong&gt;not&lt;/strong&gt; working on M1 Macs: M1 series SoC support in &lt;code&gt;ddc-macos-rs&lt;/code&gt; is planned but is not &lt;a href=&#34;https://github.com/haimgel/ddc-macos-rs/issues/2&#34;&gt;implemented yet&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The configuration is pretty similar on all platforms:&lt;/p&gt; &#xA;&lt;p&gt;On MacOS: the configuration file is expected in &lt;code&gt;~/Library/Preferences/display-switch.ini&lt;/code&gt; On Windows: the configuration file is expected in &lt;code&gt;%APPDATA%\display-switch\display-switch.ini&lt;/code&gt; On Linux: the configuration file is expected in &lt;code&gt;$XDG_CONFIG_HOME/display-switch/display-switch.ini&lt;/code&gt; or &lt;code&gt;~/.config/display-switch/display-switch.ini&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Configuration file settings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;  usb_device = &#34;1050:0407&#34;&#xA;  on_usb_connect = &#34;Hdmi1&#34;&#xA;  on_usb_disconnect = &#34;Hdmi2&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;usb_device&lt;/code&gt; is which USB device to watch (vendor id / device id in hex), and &lt;code&gt;on_usb_connect&lt;/code&gt; is which monitor input to switch to, when this device is connected. Supported values are &lt;code&gt;Hdmi1&lt;/code&gt;, &lt;code&gt;Hdmi2&lt;/code&gt;, &lt;code&gt;DisplayPort1&lt;/code&gt;, &lt;code&gt;DisplayPort2&lt;/code&gt;, &lt;code&gt;Dvi1&lt;/code&gt;, &lt;code&gt;Dvi2&lt;/code&gt;, &lt;code&gt;Vga1&lt;/code&gt;. If your monitor has an USB-C port, it&#39;s usually reported as &lt;code&gt;DisplayPort2&lt;/code&gt;. Input can also be specified as a &#34;raw&#34; decimal or hexadecimal value: &lt;code&gt;on_usb_connect = 0x10&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The optional &lt;code&gt;on_usb_disconnect&lt;/code&gt; settings allows to switch in the other direction when the USB device is disconnected. Note that the preferred way is to have this app installed on both computers. Switching &#34;away&#34; is problematic: if the other computer has put the monitors to sleep, they will switch immediately back to the original input.&lt;/p&gt; &#xA;&lt;h3&gt;Different inputs on different monitors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;display-switch&lt;/code&gt; supports per-monitor configuration: add one or more monitor-specific configuration sections to set monitor-specific inputs. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;on_usb_connect = &#34;DisplayPort2&#34;&#xA;on_usb_disconnect = &#34;Hdmi1&#34;&#xA;&#xA;[monitor1]&#xA;monitor_id = &#34;len&#34;&#xA;on_usb_connect = &#34;DisplayPort1&#34;&#xA;&#xA;[monitor2]&#xA;monitor_id = &#34;dell&#34;&#xA;on_usb_connect = &#34;hdmi2&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;monitor_id&lt;/code&gt; specifies a case-insensitive substring to match against the monitor ID. For example, &#39;len&#39; would match &lt;code&gt;LEN P27u-10 S/N 1144206897&lt;/code&gt; monitor ID. If more than one section has a match, a first one will be used. &lt;code&gt;on_usb_connect&lt;/code&gt; and &lt;code&gt;on_usb_disconnect&lt;/code&gt;, if defined, take precedence over global defaults.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Tips for Windows&lt;/em&gt;: monitors can be renamed in the Registry at &lt;code&gt;\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Enum\DISPLAY\{MODEL_ID}\{CONNECTION_ID}&lt;/code&gt;. Edit the &lt;code&gt;DeviceDesc&lt;/code&gt; value and change the name after the last semicolon. This is especially helpful in case they are all just &#34;Generic PnP Monitor&#34;.&lt;/p&gt; &#xA;&lt;h3&gt;Running external commands&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;display-switch&lt;/code&gt; supports running external commands upon connection or disconnection of USB devices. This configuration can be global (runs every time a configured USB device is connected or disconnected) or per-monitor (runs only when a given monitor is being switched):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;usb_device = &#34;1050:0407&#34;&#xA;on_usb_connect = &#34;Hdmi1&#34;&#xA;on_usb_disconnect = &#34;DisplayPort2&#34;&#xA;on_usb_connect_execute = &#34;echo connected&#34;&#xA;on_usb_disconnect_execute = &#34;echo disconnected&#34;&#xA;&#xA;[monitor1]&#xA;monitor_id=&#34;foobar&#34;&#xA;on_usb_connect_execute = &#34;echo usb connected, monitor &#39;foobar&#39; being switched&#34;&#xA;on_usb_disconnect_execute = &#34;&#39;c:\\program files\\my app.exe&#39; --parameter&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notes:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;External applications are executed as the same user that started &lt;code&gt;display-switch&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;This program supports splitting supplied configuration into application name and parameters, but no other shell features are supported.&lt;/li&gt; &#xA; &lt;li&gt;If the application path contains spaces, surround the full file path with single quotes.&lt;/li&gt; &#xA; &lt;li&gt;On Windows, escape the backslashes (replace \ with \, see the example above).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;USB Device IDs&lt;/h3&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;p&gt;To locate the ID of your USB device ID on Windows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open Device Manager&lt;/li&gt; &#xA; &lt;li&gt;Locate the USB device, view the properties&lt;/li&gt; &#xA; &lt;li&gt;Switch to the &lt;em&gt;Details&lt;/em&gt; tab and select &lt;em&gt;Hardware IDs&lt;/em&gt; in the Property dropdown&lt;/li&gt; &#xA; &lt;li&gt;You should see a value similar to &lt;code&gt;HID\VID_046D&amp;amp;PID_C52B&amp;amp;MI_00&lt;/code&gt; (the exact values will differ) - the USB device ID is a combination of the &lt;em&gt;Vendor ID&lt;/em&gt; and the &lt;em&gt;Product ID&lt;/em&gt; - for example, in this case it would be &lt;code&gt;046D:C52B&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;MacOS&lt;/h4&gt; &#xA;&lt;p&gt;To locate the ID of your USB device ID on MacOS, open a terminal and run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install lsusb&#xA;&#xA;$ lsusb &amp;gt; a&#xA;&amp;lt;switch the usb dock here&amp;gt;&#xA;$ lsusb &amp;gt; b&#xA;$ opendiff a b&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the command output, the highlighted lines show you which USB IDs are most relevant.&lt;/p&gt; &#xA;&lt;h4&gt;Linux&lt;/h4&gt; &#xA;&lt;p&gt;Requires additional packages, install via: &lt;code&gt;sudo apt install libxi-dev xorg-dev&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To locate the ID of your USB device on Linux, first install &lt;code&gt;lsusb&lt;/code&gt;, which your Linux distro should have a package for. (On Debian, Ubuntu and RedHat, the package name is &lt;code&gt;usbutils&lt;/code&gt;.) Then, in a terminal, run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ lsusb &amp;gt; a&#xA;&amp;lt;switch the usb dock here&amp;gt;&#xA;$ lsusb &amp;gt; b&#xA;$ diff -u a b&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The diff output will show which USB IDs are most relevant.&lt;/p&gt; &#xA;&lt;h2&gt;Logging&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On MacOS: the log file is written to &lt;code&gt;/Users/USERNAME/Library/Logs/display-switch/display-switch.log&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;On Windows: the log file is written to &lt;code&gt;%LOCALAPPDATA%\display-switch\display-switch.log&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;On Linux: The log file is written to &lt;code&gt;$XDG_DATA_HOME/display-switch/display-switch.log&lt;/code&gt; or &lt;code&gt;~/.local/share/display-switch/display-switch.log&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building from source&lt;/h2&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;Install Rust&lt;/a&gt;, then do &lt;code&gt;cargo build --release&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;MacOS&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/xcode/&#34;&gt;Install Xcode&lt;/a&gt;, &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;install Rust&lt;/a&gt;, then do &lt;code&gt;cargo build --release&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;Install Rust&lt;/a&gt;, then do &lt;code&gt;cargo build --release&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Running on startup&lt;/h2&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Copy &lt;code&gt;display_switch.exe&lt;/code&gt; from &lt;code&gt;target\release&lt;/code&gt; (where it was built in the previous step) to &lt;code&gt;%APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;MacOS&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  # Get your INI file in order! (see above)&#xA;  cp target/release/display_switch /usr/local/bin/&#xA;  cp dev.haim.display-switch.daemon.plist ~/Library/LaunchAgents/&#xA;  launchctl load ~/Library/LaunchAgents/dev.haim.display-switch.daemon.plist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;Copy built executable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  cp target/release/display_switch /usr/local/bin/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Enable read/write access to i2c devices for users in &lt;code&gt;i2c&lt;/code&gt; group. Run as root :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;groupadd i2c&#xA;echo &#39;KERNEL==&#34;i2c-[0-9]*&#34;, GROUP=&#34;i2c&#34;&#39; &amp;gt;&amp;gt; /etc/udev/rules.d/10-local_i2c_group.rules&#xA;udevadm control --reload-rules &amp;amp;&amp;amp; udevadm trigger&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then add your user to the i2c group :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo usermod -aG i2c $(whoami)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a systemd unit file in your user directory (&lt;code&gt;/home/$USER/.config/systemd/user/display-switch.service&lt;/code&gt;) with contents&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[Unit]&#xA;Description=Display switch via USB switch&#xA;&#xA;[Service]&#xA;ExecStart=/usr/local/bin/display_switch&#xA;Type=simple&#xA;StandardOutput=journal&#xA;Restart=always&#xA;&#xA;[Install]&#xA;WantedBy=default.target&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create the config file at &lt;code&gt;/home/$USER/.config/display-switch/display-switch.ini&lt;/code&gt;. Then enable the service with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;systemctl --user daemon-reload&#xA;systemctl --user enable display-switch.service&#xA;systemctl --user start display-switch.service&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>