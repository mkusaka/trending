<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-03T01:37:22Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>DataDog/lading</title>
    <updated>2024-02-03T01:37:22Z</updated>
    <id>tag:github.com,2024-02-03:/DataDog/lading</id>
    <link href="https://github.com/DataDog/lading" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A suite of data generation and load testing tools&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;lading&lt;/code&gt; - A tool for measuring the performance of long-running programs.&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;code&gt;lading&lt;/code&gt; project is a tool for measuring the performance behavior of long-running programs -- daemons, often -- using synthetic, repeatable load generation across a variety of protocols. The ambition is to be a worry-free component of a larger performance testing strategy for complex programs. The &lt;a href=&#34;https://raw.githubusercontent.com/DataDog/lading/main/github.com/vectordotdev/vector&#34;&gt;Vector&lt;/a&gt; project uses lading in their &#39;soak&#39; tests.&lt;/p&gt; &#xA;&lt;h2&gt;Development Setup&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;lading&lt;/code&gt; requires the protobuf compiler to build. See &lt;a href=&#34;https://grpc.io/docs/protoc-installation/&#34;&gt;installation instructions&lt;/a&gt; from the protobuf docs.&lt;/p&gt; &#xA;&lt;p&gt;For criterion benchmarks, you can run them via &lt;code&gt;cargo bench&lt;/code&gt;. &lt;a href=&#34;https://github.com/bheisler/cargo-criterion&#34;&gt;&lt;code&gt;cargo-criterion&lt;/code&gt;&lt;/a&gt; is a more advanced cargo extension that provides historical (ie baseline) tracking functionality.&lt;/p&gt; &#xA;&lt;h2&gt;Operating Model&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;lading&lt;/code&gt; operates on three conceptual components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;generators,&lt;/li&gt; &#xA; &lt;li&gt;target and&lt;/li&gt; &#xA; &lt;li&gt;blackholes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A &#34;generator&#34; in &lt;code&gt;lading&lt;/code&gt; is responsible for creating load and &#34;pushing&#34; it into the target. The &#34;target&#34; in is the program that &lt;code&gt;lading&lt;/code&gt; runs as a sub-process, collecting resource consumption data about the target from the operating system but also self-telemetry regarding generation. The &#34;blackhole&#34; exists for targets to push load into, when necessary, allowing for a target to be run and examined by &lt;code&gt;lading&lt;/code&gt; without including external programs or APIs into the setup.&lt;/p&gt; &#xA;&lt;p&gt;As much as possible &lt;code&gt;lading&lt;/code&gt; pre-computes any generator and blackhole payloads, intending to minimize runtime overhead compared to the target program. Users must provide a seed to &lt;code&gt;lading&lt;/code&gt; -- see below -- ensuring that payloads are generated in a repeatable manner across &lt;code&gt;lading&lt;/code&gt; runs. While pre-computation does mean that &lt;code&gt;lading&lt;/code&gt; is capable of outpacing many targets with minimal runtime interference it does also mean higher memory use compared to other load generation tools.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The configuration of &lt;code&gt;lading&lt;/code&gt; is split between a configuration file in YAML format and command-line options. Generators and blackholes are configured in the config file, targets on the command line. This is, at first glance, awkward but does allow for &lt;code&gt;lading&lt;/code&gt; to be used in dynamic environments like CI without foreknowledge of the target.&lt;/p&gt; &#xA;&lt;p&gt;That &#34;push&#34; can be as direct as network IO into the target or as indirect as doing file operations for a target who&#39;s tracing with BPF.&lt;/p&gt; &#xA;&lt;p&gt;Consider the following &lt;code&gt;lading.yaml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;generator:&#xA;  - http:&#xA;      seed: [2, 3, 5, 7, 11, 13, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137]&#xA;      target_uri: &#34;http://localhost:8282/&#34;&#xA;      bytes_per_second: &#34;100 Mb&#34;&#xA;      parallel_connections: 10&#xA;      method:&#xA;        post:&#xA;          variant: &#34;fluent&#34;&#xA;          maximum_prebuild_cache_size_bytes: &#34;256 Mb&#34;&#xA;      headers: {}&#xA;&#xA;blackhole:&#xA;  - http:&#xA;      binding_addr: &#34;0.0.0.0:8080&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this setup &lt;code&gt;lading&lt;/code&gt; is configured to run one generator and one blackhole. In general, at least one generator is required and zero or more blackholes are. The generator here, named &#34;http&#34;, uses a fixed seed to repeatably produce &lt;a href=&#34;https://github.com/fluent/fluentd/wiki/Forward-Protocol-Specification-v1&#34;&gt;fluent&#39;s forward protocol&lt;/a&gt; instances at 100 Mb per second into the target, with a pre-built size of 256 Mb. That is, &lt;code&gt;lading&lt;/code&gt; will &lt;em&gt;attempt&lt;/em&gt; to push at a fixed throughput, although the target might not be able to cope with that load and &lt;code&gt;lading&lt;/code&gt; will consume 256 Mb of RAM to accommodate pre-build payloads. The blackhole in this configuration responds with an empty body 200 OK.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;lading&lt;/code&gt; supports two types of targets, binary launch mode and PID watch mode. In binary launch mode, &lt;code&gt;lading&lt;/code&gt; acts like a wrapper around the target. To use this mode, one specifies where on disk the configuration is, the path to the target and its arguments. &lt;code&gt;--target-stderr-path&lt;/code&gt; and &lt;code&gt;--target-stdout-path&lt;/code&gt; allow the target&#39;s stdout, stderr to be forwarded into files. At runtime &lt;code&gt;lading&lt;/code&gt; will output diagnostic information on its stdout about the current state of the target.&lt;/p&gt; &#xA;&lt;p&gt;In PID watch mode, &lt;code&gt;lading&lt;/code&gt; monitors a process that is already running on the system. &lt;code&gt;lading&lt;/code&gt; does not handle any target orchestration in this mode. The target should be launched before running &lt;code&gt;lading&lt;/code&gt; and terminated once &lt;code&gt;lading&lt;/code&gt; exits.&lt;/p&gt; &#xA;&lt;p&gt;The data &lt;code&gt;lading&lt;/code&gt; captures at runtime can be pulled by polling &lt;code&gt;lading&lt;/code&gt;&#39;s prometheus endpoint -- configurable with &lt;code&gt;--prometheus-addr&lt;/code&gt; -- or can be written to disk by lading by specifying &lt;code&gt;--capture-path&lt;/code&gt;. The captured data, when written to disk, is newline delimited json payloads.&lt;/p&gt; &#xA;&lt;p&gt;Logs about lading&#39;s operation can be controlled using the standard &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable. eg &lt;code&gt;RUST_LOG=debug ./lading&lt;/code&gt; will emit logs at &lt;code&gt;debug&lt;/code&gt; and above (ie, &lt;code&gt;info&lt;/code&gt;, &lt;code&gt;warn&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;How to get a build (besides building from source)&lt;/h2&gt; &#xA;&lt;h3&gt;Binary Releases&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/DataDog/lading/releases&#34;&gt;https://github.com/DataDog/lading/releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;For arm (replace platform if needed):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build -f arm64.Dockerfile . --tag [TAG NAME] --platform linux/arm64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For x86_64:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build -f amd64.Dockerfile . --tag [TAG NAME] --platform linux/amd64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/DataDog/lading/main/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/DataDog/lading/main/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>