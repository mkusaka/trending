<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-19T01:46:15Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rusqlite/rusqlite</title>
    <updated>2023-03-19T01:46:15Z</updated>
    <id>tag:github.com,2023-03-19:/rusqlite/rusqlite</id>
    <link href="https://github.com/rusqlite/rusqlite" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ergonomic bindings to SQLite for Rust&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rusqlite&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crates.io/crates/rusqlite&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/rusqlite.svg?sanitize=true&#34; alt=&#34;Latest Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/rusqlite&#34;&gt;&lt;img src=&#34;https://docs.rs/rusqlite/badge.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rusqlite/rusqlite/actions&#34;&gt;&lt;img src=&#34;https://github.com/rusqlite/rusqlite/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status (GitHub)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/rusqlite/rusqlite&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/github/rusqlite/rusqlite?branch=master&amp;amp;svg=true&#34; alt=&#34;Build Status (AppVeyor)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/rusqlite/rusqlite&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/rusqlite/rusqlite/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Code Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://deps.rs/repo/github/rusqlite/rusqlite&#34;&gt;&lt;img src=&#34;https://deps.rs/repo/github/rusqlite/rusqlite/status.svg?sanitize=true&#34; alt=&#34;Dependency Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/nFYfGPB8g4&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/927966344266256434.svg?logo=discord&#34; alt=&#34;Discord Chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Rusqlite is an ergonomic wrapper for using SQLite from Rust.&lt;/p&gt; &#xA;&lt;p&gt;Historically, the API was based on the one from &lt;a href=&#34;https://github.com/sfackler/rust-postgres&#34;&gt;&lt;code&gt;rust-postgres&lt;/code&gt;&lt;/a&gt;. However, the two have diverged in many ways, and no compatibility between the two is intended.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;In your Cargo.toml:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[dependencies]&#xA;# `bundled` causes us to automatically compile and link in an up to date&#xA;# version of SQLite for you. This avoids many common build issues, and&#xA;# avoids depending on the version of SQLite on the users system (or your&#xA;# system), which may be old or missing. It&#39;s the right choice for most&#xA;# programs that control their own SQLite databases.&#xA;#&#xA;# That said, it&#39;s not ideal for all scenarios and in particular, generic&#xA;# libraries built around `rusqlite` should probably not enable it, which&#xA;# is why it is not a default feature -- it could become hard to disable.&#xA;rusqlite = { version = &#34;0.28.0&#34;, features = [&#34;bundled&#34;] }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Simple example usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use rusqlite::{Connection, Result};&#xA;&#xA;#[derive(Debug)]&#xA;struct Person {&#xA;    id: i32,&#xA;    name: String,&#xA;    data: Option&amp;lt;Vec&amp;lt;u8&amp;gt;&amp;gt;,&#xA;}&#xA;&#xA;fn main() -&amp;gt; Result&amp;lt;()&amp;gt; {&#xA;    let conn = Connection::open_in_memory()?;&#xA;&#xA;    conn.execute(&#xA;        &#34;CREATE TABLE person (&#xA;            id    INTEGER PRIMARY KEY,&#xA;            name  TEXT NOT NULL,&#xA;            data  BLOB&#xA;        )&#34;,&#xA;        (), // empty list of parameters.&#xA;    )?;&#xA;    let me = Person {&#xA;        id: 0,&#xA;        name: &#34;Steven&#34;.to_string(),&#xA;        data: None,&#xA;    };&#xA;    conn.execute(&#xA;        &#34;INSERT INTO person (name, data) VALUES (?1, ?2)&#34;,&#xA;        (&amp;amp;me.name, &amp;amp;me.data),&#xA;    )?;&#xA;&#xA;    let mut stmt = conn.prepare(&#34;SELECT id, name, data FROM person&#34;)?;&#xA;    let person_iter = stmt.query_map([], |row| {&#xA;        Ok(Person {&#xA;            id: row.get(0)?,&#xA;            name: row.get(1)?,&#xA;            data: row.get(2)?,&#xA;        })&#xA;    })?;&#xA;&#xA;    for person in person_iter {&#xA;        println!(&#34;Found person {:?}&#34;, person.unwrap());&#xA;    }&#xA;    Ok(())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Supported SQLite Versions&lt;/h3&gt; &#xA;&lt;p&gt;The base &lt;code&gt;rusqlite&lt;/code&gt; package supports SQLite version 3.14.0 or newer. If you need support for older versions, please file an issue. Some cargo features require a newer SQLite version; see details below.&lt;/p&gt; &#xA;&lt;h3&gt;Optional Features&lt;/h3&gt; &#xA;&lt;p&gt;Rusqlite provides several features that are behind &lt;a href=&#34;https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section&#34;&gt;Cargo features&lt;/a&gt;. They are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/rusqlite/~0/rusqlite/struct.LoadExtensionGuard.html&#34;&gt;&lt;code&gt;load_extension&lt;/code&gt;&lt;/a&gt; allows loading dynamic library-based SQLite extensions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/rusqlite/~0/rusqlite/backup/index.html&#34;&gt;&lt;code&gt;backup&lt;/code&gt;&lt;/a&gt; allows use of SQLite&#39;s online backup API. Note: This feature requires SQLite 3.6.11 or later.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/rusqlite/~0/rusqlite/functions/index.html&#34;&gt;&lt;code&gt;functions&lt;/code&gt;&lt;/a&gt; allows you to load Rust closures into SQLite connections for use in queries. Note: This feature requires SQLite 3.7.3 or later.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;window&lt;/code&gt; for &lt;a href=&#34;https://www.sqlite.org/windowfunctions.html&#34;&gt;window function&lt;/a&gt; support (&lt;code&gt;fun(...) OVER ...&lt;/code&gt;). (Implies &lt;code&gt;functions&lt;/code&gt;.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/rusqlite/~0/rusqlite/trace/index.html&#34;&gt;&lt;code&gt;trace&lt;/code&gt;&lt;/a&gt; allows hooks into SQLite&#39;s tracing and profiling APIs. Note: This feature requires SQLite 3.6.23 or later.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/rusqlite/~0/rusqlite/blob/index.html&#34;&gt;&lt;code&gt;blob&lt;/code&gt;&lt;/a&gt; gives &lt;code&gt;std::io::{Read, Write, Seek}&lt;/code&gt; access to SQL BLOBs. Note: This feature requires SQLite 3.7.4 or later.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/rusqlite/~0/rusqlite/struct.Connection.html#method.limit&#34;&gt;&lt;code&gt;limits&lt;/code&gt;&lt;/a&gt; allows you to set and retrieve SQLite&#39;s per connection limits.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;chrono&lt;/code&gt; implements &lt;a href=&#34;https://docs.rs/rusqlite/~0/rusqlite/types/trait.FromSql.html&#34;&gt;&lt;code&gt;FromSql&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://docs.rs/rusqlite/~0/rusqlite/types/trait.ToSql.html&#34;&gt;&lt;code&gt;ToSql&lt;/code&gt;&lt;/a&gt; for various types from the &lt;a href=&#34;https://crates.io/crates/chrono&#34;&gt;&lt;code&gt;chrono&lt;/code&gt; crate&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;serde_json&lt;/code&gt; implements &lt;a href=&#34;https://docs.rs/rusqlite/~0/rusqlite/types/trait.FromSql.html&#34;&gt;&lt;code&gt;FromSql&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://docs.rs/rusqlite/~0/rusqlite/types/trait.ToSql.html&#34;&gt;&lt;code&gt;ToSql&lt;/code&gt;&lt;/a&gt; for the &lt;code&gt;Value&lt;/code&gt; type from the &lt;a href=&#34;https://crates.io/crates/serde_json&#34;&gt;&lt;code&gt;serde_json&lt;/code&gt; crate&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;time&lt;/code&gt; implements &lt;a href=&#34;https://docs.rs/rusqlite/~0/rusqlite/types/trait.FromSql.html&#34;&gt;&lt;code&gt;FromSql&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://docs.rs/rusqlite/~0/rusqlite/types/trait.ToSql.html&#34;&gt;&lt;code&gt;ToSql&lt;/code&gt;&lt;/a&gt; for the &lt;code&gt;time::OffsetDateTime&lt;/code&gt; type from the &lt;a href=&#34;https://crates.io/crates/time&#34;&gt;&lt;code&gt;time&lt;/code&gt; crate&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;url&lt;/code&gt; implements &lt;a href=&#34;https://docs.rs/rusqlite/~0/rusqlite/types/trait.FromSql.html&#34;&gt;&lt;code&gt;FromSql&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://docs.rs/rusqlite/~0/rusqlite/types/trait.ToSql.html&#34;&gt;&lt;code&gt;ToSql&lt;/code&gt;&lt;/a&gt; for the &lt;code&gt;Url&lt;/code&gt; type from the &lt;a href=&#34;https://crates.io/crates/url&#34;&gt;&lt;code&gt;url&lt;/code&gt; crate&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bundled&lt;/code&gt; uses a bundled version of SQLite. This is a good option for cases where linking to SQLite is complicated, such as Windows.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sqlcipher&lt;/code&gt; looks for the SQLCipher library to link against instead of SQLite. This feature overrides &lt;code&gt;bundled&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bundled-sqlcipher&lt;/code&gt; uses a bundled version of SQLCipher. This searches for and links against a system-installed crypto library to provide the crypto implementation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bundled-sqlcipher-vendored-openssl&lt;/code&gt; allows using bundled-sqlcipher with a vendored version of OpenSSL (via the &lt;code&gt;openssl-sys&lt;/code&gt; crate) as the crypto provider. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;As the name implies this depends on the &lt;code&gt;bundled-sqlcipher&lt;/code&gt; feature, and automatically turns it on.&lt;/li&gt; &#xA;   &lt;li&gt;If turned on, this uses the &lt;a href=&#34;https://crates.io/crates/openssl-sys&#34;&gt;&lt;code&gt;openssl-sys&lt;/code&gt;&lt;/a&gt; crate, with the &lt;code&gt;vendored&lt;/code&gt; feature enabled in order to build and bundle the OpenSSL crypto library.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hooks&lt;/code&gt; for &lt;a href=&#34;http://sqlite.org/c3ref/commit_hook.html&#34;&gt;Commit, Rollback&lt;/a&gt; and &lt;a href=&#34;http://sqlite.org/c3ref/update_hook.html&#34;&gt;Data Change&lt;/a&gt; notification callbacks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;unlock_notify&lt;/code&gt; for &lt;a href=&#34;https://sqlite.org/unlock_notify.html&#34;&gt;Unlock&lt;/a&gt; notification.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vtab&lt;/code&gt; for &lt;a href=&#34;https://sqlite.org/vtab.html&#34;&gt;virtual table&lt;/a&gt; support (allows you to write virtual table implementations in Rust). Currently, only read-only virtual tables are supported.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;series&lt;/code&gt; exposes &lt;a href=&#34;https://www.sqlite.org/series.html&#34;&gt;&lt;code&gt;generate_series(...)&lt;/code&gt;&lt;/a&gt; Table-Valued Function. (Implies &lt;code&gt;vtab&lt;/code&gt;.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sqlite.org/csv.html&#34;&gt;&lt;code&gt;csvtab&lt;/code&gt;&lt;/a&gt;, CSV virtual table written in Rust. (Implies &lt;code&gt;vtab&lt;/code&gt;.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sqlite.org/carray.html&#34;&gt;&lt;code&gt;array&lt;/code&gt;&lt;/a&gt;, The &lt;code&gt;rarray()&lt;/code&gt; Table-Valued Function. (Implies &lt;code&gt;vtab&lt;/code&gt;.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;i128_blob&lt;/code&gt; allows storing values of type &lt;code&gt;i128&lt;/code&gt; type in SQLite databases. Internally, the data is stored as a 16 byte big-endian blob, with the most significant bit flipped, which allows ordering and comparison between different blobs storing i128s to work as expected.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;uuid&lt;/code&gt; allows storing and retrieving &lt;code&gt;Uuid&lt;/code&gt; values from the &lt;a href=&#34;https://docs.rs/uuid/&#34;&gt;&lt;code&gt;uuid&lt;/code&gt;&lt;/a&gt; crate using blobs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sqlite.org/sessionintro.html&#34;&gt;&lt;code&gt;session&lt;/code&gt;&lt;/a&gt;, Session module extension. Requires &lt;code&gt;buildtime_bindgen&lt;/code&gt; feature. (Implies &lt;code&gt;hooks&lt;/code&gt;.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;extra_check&lt;/code&gt; fail when a query passed to execute is readonly or has a column count &amp;gt; 0.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;column_decltype&lt;/code&gt; provides &lt;code&gt;columns()&lt;/code&gt; method for Statements and Rows; omit if linking to a version of SQLite/SQLCipher compiled with &lt;code&gt;-DSQLITE_OMIT_DECLTYPE&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;collation&lt;/code&gt; exposes &lt;a href=&#34;https://sqlite.org/c3ref/create_collation.html&#34;&gt;&lt;code&gt;sqlite3_create_collation_v2&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;winsqlite3&lt;/code&gt; allows linking against the SQLite present in newer versions of Windows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Notes on building rusqlite and libsqlite3-sys&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;libsqlite3-sys&lt;/code&gt; is a separate crate from &lt;code&gt;rusqlite&lt;/code&gt; that provides the Rust declarations for SQLite&#39;s C API. By default, &lt;code&gt;libsqlite3-sys&lt;/code&gt; attempts to find a SQLite library that already exists on your system using pkg-config, or a &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;Vcpkg&lt;/a&gt; installation for MSVC ABI builds.&lt;/p&gt; &#xA;&lt;p&gt;You can adjust this behavior in a number of ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you use the &lt;code&gt;bundled&lt;/code&gt;, &lt;code&gt;bundled-sqlcipher&lt;/code&gt;, or &lt;code&gt;bundled-sqlcipher-vendored-openssl&lt;/code&gt; features, &lt;code&gt;libsqlite3-sys&lt;/code&gt; will use the &lt;a href=&#34;https://crates.io/crates/cc&#34;&gt;cc&lt;/a&gt; crate to compile SQLite or SQLCipher from source and link against that. This source is embedded in the &lt;code&gt;libsqlite3-sys&lt;/code&gt; crate and is currently SQLite 3.39.0 (as of &lt;code&gt;rusqlite&lt;/code&gt; 0.28.0 / &lt;code&gt;libsqlite3-sys&lt;/code&gt; 0.25.0). This is probably the simplest solution to any build problems. You can enable this by adding the following in your &lt;code&gt;Cargo.toml&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[dependencies.rusqlite]&#xA;version = &#34;0.28.0&#34;&#xA;features = [&#34;bundled&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When using any of the &lt;code&gt;bundled&lt;/code&gt; features, the build script will honor &lt;code&gt;SQLITE_MAX_VARIABLE_NUMBER&lt;/code&gt; and &lt;code&gt;SQLITE_MAX_EXPR_DEPTH&lt;/code&gt; variables. It will also honor a &lt;code&gt;LIBSQLITE3_FLAGS&lt;/code&gt; variable, which can have a format like &lt;code&gt;&#34;-USQLITE_ALPHA -DSQLITE_BETA SQLITE_GAMMA ...&#34;&lt;/code&gt;. That would disable the &lt;code&gt;SQLITE_ALPHA&lt;/code&gt; flag, and set the &lt;code&gt;SQLITE_BETA&lt;/code&gt; and &lt;code&gt;SQLITE_GAMMA&lt;/code&gt; flags. (The initial &lt;code&gt;-D&lt;/code&gt; can be omitted, as on the last one.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When using &lt;code&gt;bundled-sqlcipher&lt;/code&gt; (and not also using &lt;code&gt;bundled-sqlcipher-vendored-openssl&lt;/code&gt;), &lt;code&gt;libsqlite3-sys&lt;/code&gt; will need to link against crypto libraries on the system. If the build script can find a &lt;code&gt;libcrypto&lt;/code&gt; from OpenSSL or LibreSSL (it will consult &lt;code&gt;OPENSSL_LIB_DIR&lt;/code&gt;/&lt;code&gt;OPENSSL_INCLUDE_DIR&lt;/code&gt; and &lt;code&gt;OPENSSL_DIR&lt;/code&gt; environment variables), it will use that. If building on and for Macs, and none of those variables are set, it will use the system&#39;s SecurityFramework instead.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When linking against a SQLite (or SQLCipher) library already on the system (so &lt;em&gt;not&lt;/em&gt; using any of the &lt;code&gt;bundled&lt;/code&gt; features), you can set the &lt;code&gt;SQLITE3_LIB_DIR&lt;/code&gt; (or &lt;code&gt;SQLCIPHER_LIB_DIR&lt;/code&gt;) environment variable to point to a directory containing the library. You can also set the &lt;code&gt;SQLITE3_INCLUDE_DIR&lt;/code&gt; (or &lt;code&gt;SQLCIPHER_INCLUDE_DIR&lt;/code&gt;) variable to point to the directory containing &lt;code&gt;sqlite3.h&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Installing the sqlite3 development packages will usually be all that is required, but the build helpers for &lt;a href=&#34;https://github.com/alexcrichton/pkg-config-rs&#34;&gt;pkg-config&lt;/a&gt; and &lt;a href=&#34;https://github.com/mcgoo/vcpkg-rs&#34;&gt;vcpkg&lt;/a&gt; have some additional configuration options. The default when using vcpkg is to dynamically link, which must be enabled by setting &lt;code&gt;VCPKGRS_DYNAMIC=1&lt;/code&gt; environment variable before build. &lt;code&gt;vcpkg install sqlite3:x64-windows&lt;/code&gt; will install the required library.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When linking against a SQLite (or SQLCipher) library already on the system, you can set the &lt;code&gt;SQLITE3_STATIC&lt;/code&gt; (or &lt;code&gt;SQLCIPHER_STATIC&lt;/code&gt;) environment variable to 1 to request that the library be statically instead of dynamically linked.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Binding generation&lt;/h3&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://crates.io/crates/bindgen&#34;&gt;bindgen&lt;/a&gt; to generate the Rust declarations from SQLite&#39;s C header file. &lt;code&gt;bindgen&lt;/code&gt; &lt;a href=&#34;https://github.com/servo/rust-bindgen#library-usage-with-buildrs&#34;&gt;recommends&lt;/a&gt; running this as part of the build process of libraries that used this. We tried this briefly (&lt;code&gt;rusqlite&lt;/code&gt; 0.10.0, specifically), but it had some annoyances:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The build time for &lt;code&gt;libsqlite3-sys&lt;/code&gt; (and therefore &lt;code&gt;rusqlite&lt;/code&gt;) increased dramatically.&lt;/li&gt; &#xA; &lt;li&gt;Running &lt;code&gt;bindgen&lt;/code&gt; requires a relatively-recent version of Clang, which many systems do not have installed by default.&lt;/li&gt; &#xA; &lt;li&gt;Running &lt;code&gt;bindgen&lt;/code&gt; also requires the SQLite header file to be present.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As of &lt;code&gt;rusqlite&lt;/code&gt; 0.10.1, we avoid running &lt;code&gt;bindgen&lt;/code&gt; at build-time by shipping pregenerated bindings for several versions of SQLite. When compiling &lt;code&gt;rusqlite&lt;/code&gt;, we use your selected Cargo features to pick the bindings for the minimum SQLite version that supports your chosen features. If you are using &lt;code&gt;libsqlite3-sys&lt;/code&gt; directly, you can use the same features to choose which pregenerated bindings are chosen:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;min_sqlite_version_3_14_0&lt;/code&gt; - SQLite 3.14.0 bindings (this is the default)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you use any of the &lt;code&gt;bundled&lt;/code&gt; features, you will get pregenerated bindings for the bundled version of SQLite/SQLCipher. If you need other specific pregenerated binding versions, please file an issue. If you want to run &lt;code&gt;bindgen&lt;/code&gt; at buildtime to produce your own bindings, use the &lt;code&gt;buildtime_bindgen&lt;/code&gt; Cargo feature.&lt;/p&gt; &#xA;&lt;p&gt;If you enable the &lt;code&gt;modern_sqlite&lt;/code&gt; feature, we&#39;ll use the bindings we would have included with the bundled build. You generally should have &lt;code&gt;buildtime_bindgen&lt;/code&gt; enabled if you turn this on, as otherwise you&#39;ll need to keep the version of SQLite you link with in sync with what rusqlite would have bundled, (usually the most recent release of SQLite). Failing to do this will cause a runtime error.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Rusqlite has many features, and many of them impact the build configuration in incompatible ways. This is unfortunate, and makes testing changes hard.&lt;/p&gt; &#xA;&lt;p&gt;To help here: you generally should ensure that you run tests/lint for &lt;code&gt;--features bundled&lt;/code&gt;, and &lt;code&gt;--features &#34;bundled-full session buildtime_bindgen&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If running bindgen is problematic for you, &lt;code&gt;--features bundled-full&lt;/code&gt; enables bundled and all features which don&#39;t require binding generation, and can be used instead.&lt;/p&gt; &#xA;&lt;h3&gt;Checklist&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;cargo fmt&lt;/code&gt; to ensure your Rust code is correctly formatted.&lt;/li&gt; &#xA; &lt;li&gt;Ensure &lt;code&gt;cargo clippy --workspace --features bundled&lt;/code&gt; passes without warnings.&lt;/li&gt; &#xA; &lt;li&gt;Ensure &lt;code&gt;cargo clippy --workspace --features &#34;bundled-full session buildtime_bindgen&#34;&lt;/code&gt; passes without warnings.&lt;/li&gt; &#xA; &lt;li&gt;Ensure &lt;code&gt;cargo test --workspace --features bundled&lt;/code&gt; reports no failures.&lt;/li&gt; &#xA; &lt;li&gt;Ensure &lt;code&gt;cargo test --workspace --features &#34;bundled-full session buildtime_bindgen&#34;&lt;/code&gt; reports no failures.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;Rusqlite is the product of hard work by a number of people. A list is available here: &lt;a href=&#34;https://github.com/rusqlite/rusqlite/graphs/contributors&#34;&gt;https://github.com/rusqlite/rusqlite/graphs/contributors&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to join the &lt;a href=&#34;https://discord.gg/nFYfGPB8g4&#34;&gt;Rusqlite Discord Server&lt;/a&gt; to discuss or get help with &lt;code&gt;rusqlite&lt;/code&gt; or &lt;code&gt;libsqlite3-sys&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Rusqlite and libsqlite3-sys are available under the MIT license. See the LICENSE file for more info.&lt;/p&gt; &#xA;&lt;h3&gt;Licenses of Bundled Software&lt;/h3&gt; &#xA;&lt;p&gt;Depending on the set of enabled cargo &lt;code&gt;features&lt;/code&gt;, rusqlite and libsqlite3-sys will also bundle other libraries, which have their own licensing terms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If &lt;code&gt;--features=bundled-sqlcipher&lt;/code&gt; is enabled, the vendored source of &lt;a href=&#34;https://github.com/sqlcipher/sqlcipher&#34;&gt;SQLcipher&lt;/a&gt; will be compiled and statically linked in. SQLcipher is distributed under a BSD-style license, as described &lt;a href=&#34;https://raw.githubusercontent.com/rusqlite/rusqlite/master/libsqlite3-sys/sqlcipher/LICENSE&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If &lt;code&gt;--features=bundled&lt;/code&gt; is enabled, the vendored source of SQLite will be compiled and linked in. SQLite is in the public domain, as described &lt;a href=&#34;https://www.sqlite.org/copyright.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Both of these are quite permissive, have no bearing on the license of the code in &lt;code&gt;rusqlite&lt;/code&gt; or &lt;code&gt;libsqlite3-sys&lt;/code&gt; themselves, and can be entirely ignored if you do not use the feature in question.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>robbert-vdh/nih-plug</title>
    <updated>2023-03-19T01:46:15Z</updated>
    <id>tag:github.com,2023-03-19:/robbert-vdh/nih-plug</id>
    <link href="https://github.com/robbert-vdh/nih-plug" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rust VST3 and CLAP plugin framework and plugins - because everything is better when you do it yourself&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NIH-plug&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/robbert-vdh/nih-plug/actions/workflows/build.yml?query=branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/robbert-vdh/nih-plug/actions/workflows/build.yml/badge.svg?branch=master&#34; alt=&#34;Automated builds&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/robbert-vdh/nih-plug/actions/workflows/test.yml?query=branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/robbert-vdh/nih-plug/actions/workflows/test.yml/badge.svg?branch=master&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://nih-plug.robbertvanderhelm.nl/&#34;&gt;&lt;img src=&#34;https://github.com/robbert-vdh/nih-plug/actions/workflows/docs.yml/badge.svg?branch=master&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;NIH-plug is an API-agnostic audio plugin framework written in Rust, as well as a small collection of plugins. The idea is to have a stateful yet simple plugin API that gets rid of as much unnecessary ceremony wherever possible, while also keeping the amount of magic to minimum and making it easy to experiment with different approaches to things. See the &lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/#current-features&#34;&gt;current features&lt;/a&gt; section for more information on the project&#39;s current status.&lt;/p&gt; &#xA;&lt;p&gt;Come join us on the &lt;a href=&#34;https://discord.gg/ykxU3rt4Cb&#34;&gt;Rust Audio Discord&lt;/a&gt;, check out the &lt;a href=&#34;https://nih-plug.robbertvanderhelm.nl/&#34;&gt;documentation&lt;/a&gt;, or use the &lt;a href=&#34;https://github.com/robbert-vdh/nih-plug-template&#34;&gt;cookiecutter template&lt;/a&gt; to quickly get started with NIH-plug.&lt;/p&gt; &#xA;&lt;h3&gt;Table of contents&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/#plugins&#34;&gt;Plugins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/#framework&#34;&gt;Framework&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/#current-features&#34;&gt;Current features&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/#building&#34;&gt;Building&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/#plugin-formats&#34;&gt;Plugin formats&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/#example-plugins&#34;&gt;Example plugins&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/#licensing&#34;&gt;Licensing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Plugins&lt;/h2&gt; &#xA;&lt;p&gt;Check each plugin&#39;s readme file for more details on what the plugin actually does. You can download the development binaries for Linux, Windows and macOS from the &lt;a href=&#34;https://github.com/robbert-vdh/nih-plug/actions/workflows/build.yml?query=branch%3Amaster&#34;&gt;automated builds&lt;/a&gt; page. Or if you&#39;re not signed in on GitHub, then you can also find the latest nightly build &lt;a href=&#34;https://nightly.link/robbert-vdh/nih-plug/workflows/build/master&#34;&gt;here&lt;/a&gt;. You may need to &lt;a href=&#34;https://disable-gatekeeper.github.io/&#34;&gt;disable Gatekeeper&lt;/a&gt; on macOS to be able to use the plugins.&lt;/p&gt; &#xA;&lt;p&gt;Scroll down for more information on the underlying plugin framework.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/buffr_glitch&#34;&gt;&lt;strong&gt;Buffr Glitch&lt;/strong&gt;&lt;/a&gt; is the plugin for you if you enjoy the sound of a CD player skipping This plugin is essentially a MIDI triggered buffer repeat plugin. When you play a note, the plugin will sample the period corresponding to that note&#39;s frequency and use that as a single waveform cycle. This can end up sounding like an in-tune glitch when used sparingly, or like a weird synthesizer when used less subtly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/crisp&#34;&gt;&lt;strong&gt;Crisp&lt;/strong&gt;&lt;/a&gt; adds a bright crispy top end to any low bass sound. Inspired by Polarity&#39;s &lt;a href=&#34;https://youtu.be/MKfFn4L1zeg&#34;&gt;Fake Distortion&lt;/a&gt; video.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/crossover&#34;&gt;&lt;strong&gt;Crossover&lt;/strong&gt;&lt;/a&gt; is as boring as it sounds. It cleanly splits the signal into two to five bands using a variety of algorithms. Those bands are then sent to auxiliary outputs so they can be accessed and processed individually. Meant as an alternative to Bitwig&#39;s Multiband FX devices but with cleaner crossovers and a linear-phase option.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/diopser&#34;&gt;&lt;strong&gt;Diopser&lt;/strong&gt;&lt;/a&gt; is a totally original phase rotation plugin. Useful for oomphing up kickdrums and basses, transforming synths into their evil phase-y cousin, and making everything sound like a cheap Sci-Fi laser beam.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/loudness_war_winner&#34;&gt;&lt;strong&gt;Loudness War Winner&lt;/strong&gt;&lt;/a&gt; does what it says on the tin. Have you ever wanted to show off your dominance by winning the loudness war? Neither have I. Dissatisfaction guaranteed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/puberty_simulator&#34;&gt;&lt;strong&gt;Puberty Simulator&lt;/strong&gt;&lt;/a&gt; is that patent pending One Weird Plugin that simulates the male voice change during puberty! If it was not already obvious from that sentence, this plugin is a joke, but it might actually be useful (or at least interesting) in some situations. This plugin pitches the signal down an octave, but it also has the side effect of causing things to sound like a cracking voice or to make them sound slightly out of tune.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/safety_limiter&#34;&gt;&lt;strong&gt;Safety Limiter&lt;/strong&gt;&lt;/a&gt; is a simple tool to prevent ear damage. As soon as there is a peak above 0 dBFS or the specified threshold, the plugin will cut over to playing SOS in Morse code, gradually fading out again when the input returns back to safe levels. Made for personal use during plugin development and intense sound design sessions, but maybe you&#39;ll find it useful too!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/spectral_compressor&#34;&gt;&lt;strong&gt;Spectral Compressor&lt;/strong&gt;&lt;/a&gt; can squash anything into pink noise, apply simultaneous upwards and downwards compressor to dynamically match the sidechain signal&#39;s spectrum and morph one sound into another, and lots more. Have you ever wondered what a 16384 band OTT would sound like? Neither have I.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Framework&lt;/h2&gt; &#xA;&lt;h3&gt;Current features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports both VST3 and &lt;a href=&#34;https://github.com/free-audio/clap&#34;&gt;CLAP&lt;/a&gt; by simply adding the corresponding &lt;code&gt;nih_export_&amp;lt;api&amp;gt;!(Foo)&lt;/code&gt; macro to your plugin&#39;s library.&lt;/li&gt; &#xA; &lt;li&gt;Standalone binaries can be made by calling &lt;code&gt;nih_export_standalone(Foo)&lt;/code&gt; from your &lt;code&gt;main()&lt;/code&gt; function. Standalones come with a CLI for configuration and full JACK audio, MIDI, and transport support.&lt;/li&gt; &#xA; &lt;li&gt;Rich declarative parameter system without any boilerplate. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Define parameters for your plugin by adding &lt;code&gt;FloatParam&lt;/code&gt;, &lt;code&gt;IntParam&lt;/code&gt;, &lt;code&gt;BoolParam&lt;/code&gt;, and &lt;code&gt;EnumParam&amp;lt;T&amp;gt;&lt;/code&gt; fields to your parameter struct, assign stable IDs to them with the &lt;code&gt;#[id = &#34;foobar&#34;]&lt;/code&gt;, and a &lt;code&gt;#[derive(Params)]&lt;/code&gt; does all of the boring work for you.&lt;/li&gt; &#xA;   &lt;li&gt;Parameters can have complex value distributions and the parameter objects come with built-in smoothers and callbacks.&lt;/li&gt; &#xA;   &lt;li&gt;Use simple enums deriving the &lt;code&gt;Enum&lt;/code&gt; trait with the &lt;code&gt;EnumParam&amp;lt;T&amp;gt;&lt;/code&gt; parameter type for parameters that allow the user to choose between multiple discrete options. That way you can use regular Rust pattern matching when working with these values without having to do any conversions yourself.&lt;/li&gt; &#xA;   &lt;li&gt;Store additional non-parameter state for your plugin by adding any field that can be serialized with &lt;a href=&#34;https://serde.rs/&#34;&gt;Serde&lt;/a&gt; to your plugin&#39;s &lt;code&gt;Params&lt;/code&gt; object and annotating them with &lt;code&gt;#[persist = &#34;key&#34;]&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Optional support for state migrations, for handling breaking changes in plugin parameters.&lt;/li&gt; &#xA;   &lt;li&gt;Group your parameters into logical groups by nesting &lt;code&gt;Params&lt;/code&gt; objects using the &lt;code&gt;#[nested(group = &#34;...&#34;)]&lt;/code&gt;attribute.&lt;/li&gt; &#xA;   &lt;li&gt;The &lt;code&gt;#[nested]&lt;/code&gt; attribute also enables you to use multiple copies of the same parameter, either as regular object fields or through arrays.&lt;/li&gt; &#xA;   &lt;li&gt;When needed, you can also provide your own implementation for the &lt;code&gt;Params&lt;/code&gt; trait to enable compile time generated parameters and other bespoke functionality.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Stateful. Behaves mostly like JUCE, just without all of the boilerplate.&lt;/li&gt; &#xA; &lt;li&gt;Comes with a simple yet powerful way to asynchronously run background tasks from a plugin that&#39;s both type-safe and realtime-safe.&lt;/li&gt; &#xA; &lt;li&gt;Does not make any assumptions on how you want to process audio, but does come with utilities and adapters to help with common access patterns. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Efficiently iterate over an audio buffer either per-sample per-channel, per-block per-channel, or even per-block per-sample-per-channel with the option to manually index the buffer or get access to a channel slice at any time.&lt;/li&gt; &#xA;   &lt;li&gt;Easily leverage per-channel SIMD using the SIMD adapters on the buffer and block iterators.&lt;/li&gt; &#xA;   &lt;li&gt;Comes with bring-your-own-FFT adapters for common (inverse) short-time Fourier Transform operations. More to come.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Optional sample accurate automation support for VST3 and CLAP that can be enabled by setting the &lt;code&gt;Plugin::SAMPLE_ACCURATE_AUTOMATION&lt;/code&gt; constant to &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Support for CLAP&#39;s polyphonic modulation on a per-parameter basis.&lt;/li&gt; &#xA; &lt;li&gt;Optional support for compressing the human readable JSON state files using &lt;a href=&#34;https://en.wikipedia.org/wiki/Zstd&#34;&gt;Zstandard&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Comes with adapters for popular Rust GUI frameworks as well as some basic widgets for them that integrate with NIH-plug&#39;s parameter system. Currently there&#39;s support for &lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/nih_plug_egui&#34;&gt;egui&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/nih_plug_iced&#34;&gt;iced&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/nih_plug_vizia&#34;&gt;VIZIA&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A simple and safe API for state saving and restoring from the editor is provided by the framework if you want to do your own internal preset management.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Full support for receiving and outputting both modern polyphonic note expression events as well as MIDI CCs, channel pressure, and pitch bend for CLAP and VST3. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;MIDI SysEx is also supported. Plugins can define their own structs or sum types to wrap around those messages so they don&#39;t need to interact with raw byte buffers in the process function.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Support for flexible dynamic buffer configurations, including variable numbers of input and output ports.&lt;/li&gt; &#xA; &lt;li&gt;A plugin bundler accessible through the &lt;code&gt;cargo xtask bundle &amp;lt;package&amp;gt; &amp;lt;build_arguments&amp;gt;&lt;/code&gt; command that automatically detects which plugin targets your plugin exposes and creates the correct plugin bundles for your target operating system and architecture, with cross-compilation support. The cargo subcommand can easily be added to &lt;a href=&#34;https://github.com/robbert-vdh/nih-plug/tree/master/nih_plug_xtask&#34;&gt;your own project&lt;/a&gt; as an alias or &lt;a href=&#34;https://github.com/robbert-vdh/nih-plug/tree/master/cargo_nih_plug&#34;&gt;globally&lt;/a&gt; as a regular cargo subcommand.&lt;/li&gt; &#xA; &lt;li&gt;Tested on Linux and Windows, with limited testing on macOS. Windows support has mostly been tested through Wine with &lt;a href=&#34;https://github.com/robbert-vdh/yabridge&#34;&gt;yabridge&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/src/plugin.rs&#34;&gt;&lt;code&gt;Plugin&lt;/code&gt;&lt;/a&gt; trait&#39;s documentation for an incomplete list of the functionality that has currently not yet been implemented.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;p&gt;NIH-plug works with the latest stable Rust compiler.&lt;/p&gt; &#xA;&lt;p&gt;After installing &lt;a href=&#34;https://rustup.rs/&#34;&gt;Rust&lt;/a&gt;, you can compile any of the plugins in the &lt;code&gt;plugins&lt;/code&gt; directory in the following way, replacing &lt;code&gt;gain&lt;/code&gt; with the name of the plugin:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cargo xtask bundle gain --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Plugin formats&lt;/h3&gt; &#xA;&lt;p&gt;NIH-plug can currently export VST3 and &lt;a href=&#34;https://github.com/free-audio/clap&#34;&gt;CLAP&lt;/a&gt; plugins. Exporting a specific plugin format for a plugin is as simple as calling the &lt;code&gt;nih_export_&amp;lt;format&amp;gt;!(Foo);&lt;/code&gt; macro. The &lt;code&gt;cargo xtask bundle&lt;/code&gt; command will detect which plugin formats your plugin supports and create the appropriate bundles accordingly, even when cross compiling.&lt;/p&gt; &#xA;&lt;h3&gt;Example plugins&lt;/h3&gt; &#xA;&lt;p&gt;The best way to get an idea for what the API looks like is to look at the examples.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/examples/gain&#34;&gt;&lt;strong&gt;gain&lt;/strong&gt;&lt;/a&gt; is a simple smoothed gain plugin that shows off a couple other parts of the API, like support for storing arbitrary serializable state.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;gain-gui&lt;/strong&gt; is the same plugin as gain, but with a GUI to control the parameter and a digital peak meter. Comes in three exciting flavors: &lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/examples/gain_gui_egui&#34;&gt;egui&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/examples/gain_gui_iced&#34;&gt;iced&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/examples/gain_gui_vizia&#34;&gt;VIZIA&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/examples/midi_inverter&#34;&gt;&lt;strong&gt;midi_inverter&lt;/strong&gt;&lt;/a&gt; takes note/MIDI events and flips around the note, channel, expression, pressure, and CC values. This example demonstrates how to receive and output those events.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/examples/poly_mod_synth&#34;&gt;&lt;strong&gt;poly_mod_synth&lt;/strong&gt;&lt;/a&gt; is a simple polyphonic synthesizer with support for polyphonic modulation in supported CLAP hosts. This demonstrates how polyphonic modulation can be used in NIH-plug.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/examples/sine&#34;&gt;&lt;strong&gt;sine&lt;/strong&gt;&lt;/a&gt; is a simple test tone generator plugin with frequency smoothing that can also make use of MIDI input instead of generating a static signal based on the plugin&#39;s parameters.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/examples/stft&#34;&gt;&lt;strong&gt;stft&lt;/strong&gt;&lt;/a&gt; shows off some of NIH-plug&#39;s other optional higher level helper features, such as an adapter to process audio with a short-term Fourier transform using the overlap-add method, all using the compositional &lt;code&gt;Buffer&lt;/code&gt; interfaces.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/examples/sysex&#34;&gt;&lt;strong&gt;sysex&lt;/strong&gt;&lt;/a&gt; is a simple example of how to send and receive SysEx messages by defining custom message types.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;The framework, its libraries, and the example plugins in &lt;code&gt;plugins/examples/&lt;/code&gt; are all licensed under the &lt;a href=&#34;https://www.isc.org/licenses/&#34;&gt;ISC license&lt;/a&gt;. However, the &lt;a href=&#34;https://github.com/RustAudio/vst3-sys&#34;&gt;VST3 bindings&lt;/a&gt; used by &lt;code&gt;nih_export_vst3!()&lt;/code&gt; are licensed under the GPLv3 license. This means that unless you replace these bindings with your own bindings made from scratch, any VST3 plugins built with NIH-plug need to be able to comply with the terms of the GPLv3 license.&lt;/p&gt; &#xA;&lt;p&gt;The other plugins in the &lt;code&gt;plugins/&lt;/code&gt; directory may be licensed under the GPLv3 license. Check the plugin&#39;s &lt;code&gt;Cargo.toml&lt;/code&gt; file for more information.&lt;/p&gt;</summary>
  </entry>
</feed>