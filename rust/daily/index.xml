<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-25T01:43:07Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>fasterthanlime/mevi</title>
    <updated>2023-03-25T01:43:07Z</updated>
    <id>tag:github.com,2023-03-25:/fasterthanlime/mevi</id>
    <link href="https://github.com/fasterthanlime/mevi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A memory visualizer in Rust (ptrace + userfaultfd)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mevi&lt;/h1&gt; &#xA;&lt;p&gt;A memory visualizer for Linux 5.7+&lt;/p&gt; &#xA;&lt;p&gt;Made for this video: &lt;a href=&#34;https://www.youtube.com/watch?v=DpnXaNkM9_M&#34;&gt;https://www.youtube.com/watch?v=DpnXaNkM9_M&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisite&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;vm.unprivileged_userfaultfd&lt;/code&gt; sysctl needs to be switched to 1:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sudo sysctl -w vm.unprivileged_userfaultfd=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Doing this effectively &#34;softens&#34; your system to some attacks, so only do this in a VM or if you&#39;re reckless, but also, it seems less awful than running mevi + tracees as root. (No, giving the &lt;code&gt;mevi&lt;/code&gt; binary CAP_PTRACE isn&#39;t enough).&lt;/p&gt; &#xA;&lt;p&gt;You can &lt;em&gt;technically&lt;/em&gt; run a bunch of apps with only user faults, but some fairly basic stuff like &lt;code&gt;cat /hosts&lt;/code&gt; will fail with EFAULT without it, so, I&#39;m not making it easy to go that route - if you &lt;em&gt;really&lt;/em&gt; know what you&#39;re doing you can figure out where to pass the &#34;user faults only&#34; flag.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Install the &lt;code&gt;mevi&lt;/code&gt; executable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ just install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(Or, without &lt;a href=&#34;https://github.com/casey/just&#34;&gt;just&lt;/a&gt;, look into the &lt;code&gt;Justfile&lt;/code&gt; for the cargo invocation)&lt;/p&gt; &#xA;&lt;p&gt;To build &amp;amp; serve the frontend, you&#39;ll need to install support for the wasm target via rustup:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ rustup target add wasm32-unknown-unknown&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And to have &lt;a href=&#34;https://trunkrs.dev/&#34;&gt;trunk&lt;/a&gt; installed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ just serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open the frontend in your browser: &lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;From another terminal, start the program you want to trace via mevi:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ mevi PROGRAM ARGS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The frontend should connect to &lt;code&gt;http://localhost:5001/stream&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re running this on a remote server, you&#39;ll need to forward both ports, with SSH for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ssh -L 5001:localhost:5001 -L 8080:localhost:8080 your-remote-host&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is primarily distributed under the terms of both the MIT license and the Apache License (Version 2.0).&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/fasterthanlime/mevi/main/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/fasterthanlime/mevi/main/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ / Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;I get &lt;code&gt;EPERM&lt;/code&gt; at some point&lt;/h3&gt; &#xA;&lt;p&gt;Did you skip past that &lt;code&gt;sysctl&lt;/code&gt; note above?&lt;/p&gt; &#xA;&lt;h3&gt;The RSS numbers don&#39;t match up with htop/btop/procmaps etc.&lt;/h3&gt; &#xA;&lt;p&gt;mevi only tracks private+anonymous memory mappings. The discrepancy probably comes from mapped files, and to a lesser extent, shared memory.&lt;/p&gt; &#xA;&lt;h3&gt;I have a tiny program and everything goes by way too fast.&lt;/h3&gt; &#xA;&lt;p&gt;Try sleeping in your loops! Computers go fast noawadays and mevi &lt;em&gt;tries&lt;/em&gt; not to slow your program down.&lt;/p&gt; &#xA;&lt;h3&gt;I have a multi-threaded program and it&#39;s all wrong&lt;/h3&gt; &#xA;&lt;p&gt;Yeah, sorry about that. userfaultfd events don&#39;t have all the info we need, and ptrace observes events out-of-order, so the view of multi-threaded programs gets out-of-sync with the kernel.&lt;/p&gt; &#xA;&lt;h3&gt;Can I run this on a big program?&lt;/h3&gt; &#xA;&lt;p&gt;Sure, Firefox works, with a non-snap version, and with sandbox disabled, like so (THIS IS DANGEROUS, THE SANDBOX IS THERE FOR A REASON).&lt;/p&gt; &#xA;&lt;p&gt;First let&#39;s make sure you don&#39;t have firefox running in the background:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ pkill firefox&#xA;# you can do it several times, until `pidof firefox` returns nothing&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ RUST_LOG=error RUST_BACKTRACE=1 MOZ_DISABLE_CONTENT_SANDBOX=1 MOZ_DISABLE_GMP_SANDBOX=1 MOZ_DISABLE_RDD_SANDBOX=1 MOZ_DISABLE_SOCKET_PROCESS_SANDBOX=1 mevi /usr/lib/firefox/firefox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Does this show backtraces?&lt;/h3&gt; &#xA;&lt;p&gt;No, but you can do that in your fork.&lt;/p&gt; &#xA;&lt;h3&gt;Does this allow travelling back in time?&lt;/h3&gt; &#xA;&lt;p&gt;No, but you can do that in your fork.&lt;/p&gt; &#xA;&lt;h3&gt;Does this have yet another, secret third feature?&lt;/h3&gt; &#xA;&lt;p&gt;Clearly not, but again, you can do that in your fork. This is a research project, I will not be maintaining it beyond &#34;have it run in its current form&#34;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to spin this out into its own product, more power to you, but I&#39;ll have already moved on.&lt;/p&gt; &#xA;&lt;h3&gt;Why isn&#39;t this published on crates.io?&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s not a library and it&#39;s not usable without the frontend anyway. One day stable cargo will let us build wasm artifacts and ship them with the resulting binary, but that day is not today.&lt;/p&gt; &#xA;&lt;h3&gt;Why isn&#39;t this using eBPF?&lt;/h3&gt; &#xA;&lt;p&gt;I wanted to see how far I could take ptrace + userfaultfd. I&#39;m interested in exploring eBPF later.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>napi-rs/napi-rs</title>
    <updated>2023-03-25T01:43:07Z</updated>
    <id>tag:github.com,2023-03-25:/napi-rs/napi-rs</id>
    <link href="https://github.com/napi-rs/napi-rs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A framework for building compiled Node.js add-ons in Rust via Node-API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;napi-rs&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This project was initialized from &lt;a href=&#34;https://github.com/atom/xray&#34;&gt;xray&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;A framework for building compiled &lt;code&gt;Node.js&lt;/code&gt; add-ons in &lt;code&gt;Rust&lt;/code&gt; via Node-API. Website: &lt;a href=&#34;https://napi.rs&#34;&gt;https://napi.rs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt; &lt;a href=&#34;https://discord.gg/SpWzYHsKHs&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/874290842444111882.svg?logo=discord&amp;amp;style=flat-square&#34; alt=&#34;chat&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://docs.rs/crate/napi&#34;&gt;&lt;img src=&#34;https://docs.rs/napi/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/napi&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/napi.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@napi-rs/cli&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@napi-rs/cli.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stakes.social/0x2C9F5c3ebC01A45D34198229E60eE186eCDc5C5E&#34;&gt;&lt;img src=&#34;https://badge.devprotocol.xyz/0x2C9F5c3ebC01A45D34198229E60eE186eCDc5C5E/descriptive&#34; alt=&#34;Stake to support us&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Platform Support&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/napi-rs/napi-rs/workflows/Lint/badge.svg?sanitize=true&#34; alt=&#34;Lint&#34;&gt; &lt;img src=&#34;https://github.com/napi-rs/napi-rs/workflows/Linux%20musl/badge.svg?sanitize=true&#34; alt=&#34;Linux musl&#34;&gt; &lt;img src=&#34;https://github.com/napi-rs/napi-rs/workflows/macOS/Windows/Linux%20x64/badge.svg?sanitize=true&#34; alt=&#34;macOS/Windows/Linux x64&#34;&gt; &lt;img src=&#34;https://github.com/napi-rs/napi-rs/workflows/Linux-aarch64/badge.svg?sanitize=true&#34; alt=&#34;Linux-aarch64&#34;&gt; &lt;img src=&#34;https://github.com/napi-rs/napi-rs/workflows/Linux-armv7/badge.svg?sanitize=true&#34; alt=&#34;Linux-armv7&#34;&gt; &lt;img src=&#34;https://github.com/napi-rs/napi-rs/workflows/macOS-Android/badge.svg?sanitize=true&#34; alt=&#34;macOS-Android&#34;&gt; &lt;a href=&#34;https://github.com/napi-rs/napi-rs/actions/workflows/android-armv7.yml&#34;&gt;&lt;img src=&#34;https://github.com/napi-rs/napi-rs/actions/workflows/android-armv7.yml/badge.svg?sanitize=true&#34; alt=&#34;Android-armv7&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/napi-rs/napi-rs/workflows/Windows%20i686/badge.svg?sanitize=true&#34; alt=&#34;Windows i686&#34;&gt; &lt;a href=&#34;https://github.com/napi-rs/napi-rs/actions/workflows/windows-arm.yml&#34;&gt;&lt;img src=&#34;https://github.com/napi-rs/napi-rs/actions/workflows/windows-arm.yml/badge.svg?sanitize=true&#34; alt=&#34;Windows arm64&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cirrus-ci.com/github/napi-rs/napi-rs?branch=main&#34;&gt;&lt;img src=&#34;https://api.cirrus-ci.com/github/napi-rs/napi-rs.svg?sanitize=true&#34; alt=&#34;FreeBSD&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;MSRV&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Rust&lt;/strong&gt; &lt;code&gt;1.57.0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;node12&lt;/th&gt; &#xA;   &lt;th&gt;node14&lt;/th&gt; &#xA;   &lt;th&gt;node16&lt;/th&gt; &#xA;   &lt;th&gt;node18&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows x64&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows x86&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows arm64&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macOS x64&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macOS aarch64&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux x64 gnu&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux x64 musl&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux aarch64 gnu&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux aarch64 musl&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux arm gnueabihf&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux aarch64 android&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux armv7 android&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FreeBSD x64&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;This library depends on Node-API and requires &lt;code&gt;Node@10.0.0&lt;/code&gt; or later.&lt;/p&gt; &#xA;&lt;p&gt;We already have some packages written by &lt;code&gt;napi-rs&lt;/code&gt;: &lt;a href=&#34;https://github.com/napi-rs/node-rs&#34;&gt;node-rs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;One nice feature is that this crate allows you to build add-ons purely with the &lt;code&gt;Rust/JavaScript&lt;/code&gt; toolchain and without involving &lt;code&gt;node-gyp&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Taste&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You can start from &lt;a href=&#34;https://github.com/napi-rs/package-template&#34;&gt;package-template&lt;/a&gt; to play with &lt;code&gt;napi-rs&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Define JavaScript functions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;/// import the preludes&#xA;use napi::bindgen_prelude::*;&#xA;use napi_derive::napi;&#xA;&#xA;/// module registration is done by the runtime, no need to explicitly do it now.&#xA;#[napi]&#xA;fn fibonacci(n: u32) -&amp;gt; u32 {&#xA;  match n {&#xA;    1 | 2 =&amp;gt; 1,&#xA;    _ =&amp;gt; fibonacci(n - 1) + fibonacci(n - 2),&#xA;  }&#xA;}&#xA;&#xA;/// use `Fn`, `FnMut` or `FnOnce` traits to defined JavaScript callbacks&#xA;/// the return type of callbacks can only be `Result`.&#xA;#[napi]&#xA;fn get_cwd&amp;lt;T: Fn(String) -&amp;gt; Result&amp;lt;()&amp;gt;&amp;gt;(callback: T) {&#xA;  callback(env::current_dir().unwrap().to_string_lossy().to_string()).unwrap();&#xA;}&#xA;&#xA;/// or, define the callback signature in where clause&#xA;#[napi]&#xA;fn test_callback&amp;lt;T&amp;gt;(callback: T)&#xA;where T: Fn(String) -&amp;gt; Result&amp;lt;()&amp;gt;&#xA;{}&#xA;&#xA;/// async fn, require `async` feature enabled.&#xA;/// [dependencies]&#xA;/// napi = {version=&#34;2&#34;, features=[&#34;async&#34;]}&#xA;#[napi]&#xA;async fn read_file_async(path: String) -&amp;gt; Result&amp;lt;Buffer&amp;gt; {&#xA;  tokio::fs::read(path)&#xA;    .map(|r| match r {&#xA;      Ok(content) =&amp;gt; Ok(content.into()),&#xA;      Err(e) =&amp;gt; Err(Error::new(&#xA;        Status::GenericFailure,&#xA;        format!(&#34;failed to read file, {}&#34;, e),&#xA;      )),&#xA;    })&#xA;    .await&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;more examples at &lt;a href=&#34;https://raw.githubusercontent.com/napi-rs/napi-rs/main/examples/napi&#34;&gt;examples&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;This repository is a &lt;code&gt;Cargo&lt;/code&gt; crate. Any napi-based add-on should contain &lt;code&gt;Cargo.toml&lt;/code&gt; to make it a Cargo crate.&lt;/p&gt; &#xA;&lt;p&gt;In your &lt;code&gt;Cargo.toml&lt;/code&gt; you need to set the &lt;code&gt;crate-type&lt;/code&gt; to &lt;code&gt;&#34;cdylib&#34;&lt;/code&gt; so that cargo builds a C-style shared library that can be dynamically loaded by the Node executable. You&#39;ll also need to add this crate as a dependency.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[package]&#xA;name = &#34;awesome&#34;&#xA;&#xA;[lib]&#xA;crate-type = [&#34;cdylib&#34;]&#xA;&#xA;[dependencies]&#xA;napi = &#34;2&#34;&#xA;napi-derive = &#34;2&#34;&#xA;&#xA;[build-dependencies]&#xA;napi-build = &#34;1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And create &lt;code&gt;build.rs&lt;/code&gt; in your own project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;// build.rs&#xA;extern crate napi_build;&#xA;&#xA;fn main() {&#xA;  napi_build::setup();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So far, the &lt;code&gt;napi&lt;/code&gt; build script has only been tested on &lt;code&gt;macOS&lt;/code&gt; &lt;code&gt;Linux&lt;/code&gt; &lt;code&gt;Windows x64 MSVC&lt;/code&gt; and &lt;code&gt;FreeBSD&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Install the &lt;code&gt;@napi-rs/cli&lt;/code&gt; to help you build your &lt;code&gt;Rust&lt;/code&gt; codes and copy &lt;code&gt;Dynamic lib&lt;/code&gt; file to &lt;code&gt;.node&lt;/code&gt; file in case you can &lt;code&gt;require&lt;/code&gt; it in your program.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{&#xA;  &#34;package&#34;: &#34;awesome-package&#34;,&#xA;  &#34;devDependencies&#34;: {&#xA;    &#34;@napi-rs/cli&#34;: &#34;^1.0.0&#34;&#xA;  },&#xA;  &#34;napi&#34;: {&#xA;    &#34;name&#34;: &#34;jarvis&#34; // &amp;lt;----------- Config the name of native addon, or the napi command will use the name of `Cargo.toml` for the binary file name.&#xA;  },&#xA;  &#34;scripts&#34;: {&#xA;    &#34;build&#34;: &#34;napi build --release&#34;,&#xA;    &#34;build:debug&#34;: &#34;napi build&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can require your native binding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;require(&#39;./jarvis.node&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;module_name&lt;/code&gt; would be your &lt;code&gt;package&lt;/code&gt; name in your &lt;code&gt;Cargo.toml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;xxx =&amp;gt; ./xxx.node&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;xxx-yyy =&amp;gt; ./xxx_yyy.node&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also copy &lt;code&gt;Dynamic lib&lt;/code&gt; file to an appointed location:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;napi build [--release] ./dll&#xA;napi build [--release] ./artifacts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are &lt;a href=&#34;https://raw.githubusercontent.com/napi-rs/napi-rs/main/cli&#34;&gt;documents&lt;/a&gt; which contains more details about the &lt;code&gt;@napi-rs/cli&lt;/code&gt; usage.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;Because libraries that depend on this crate must be loaded into a Node executable in order to resolve symbols, all tests are written in JavaScript in the &lt;code&gt;test_module&lt;/code&gt; subdirectory.&lt;/p&gt; &#xA;&lt;p&gt;To run tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yarn build:test&#xA;yarn test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Related projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.neon-bindings.com&#34;&gt;neon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/infinyon/node-bindgen&#34;&gt;node-bindgen&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features table&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Rust Type&lt;/th&gt; &#xA;   &lt;th&gt;Node Type&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://nodejs.org/api/n-api.html#n_api_node_api_version_matrix&#34;&gt;NAPI Version&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Minimal Node version&lt;/th&gt; &#xA;   &lt;th&gt;Enable by &lt;code&gt;napi&lt;/code&gt; feature&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;u32&lt;/td&gt; &#xA;   &lt;td&gt;Number&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;v8.0.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;i32/i64&lt;/td&gt; &#xA;   &lt;td&gt;Number&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;v8.0.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;f64&lt;/td&gt; &#xA;   &lt;td&gt;Number&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;v8.0.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;td&gt;Boolean&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;v8.0.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String/&amp;amp;&#39;a str&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;v8.0.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Latin1String&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;v8.0.0&lt;/td&gt; &#xA;   &lt;td&gt;latin1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;UTF16String&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;v8.0.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Object&lt;/td&gt; &#xA;   &lt;td&gt;Object&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;v8.0.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;serde_json::Map&lt;/td&gt; &#xA;   &lt;td&gt;Object&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;v8.0.0&lt;/td&gt; &#xA;   &lt;td&gt;serde-json&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;serde_json::Value&lt;/td&gt; &#xA;   &lt;td&gt;any&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;v8.0.0&lt;/td&gt; &#xA;   &lt;td&gt;serde-json&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Array&lt;/td&gt; &#xA;   &lt;td&gt;Array&#xA;    &lt;any&gt;&lt;/any&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;v8.0.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vec&#xA;    &lt;t&gt;&lt;/t&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Array&#xA;    &lt;t&gt;&lt;/t&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;v8.0.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Buffer&lt;/td&gt; &#xA;   &lt;td&gt;Buffer&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;v8.0.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;External&#xA;    &lt;t&gt;&lt;/t&gt;&lt;/td&gt; &#xA;   &lt;td&gt;External&#xA;    &lt;t&gt;&lt;/t&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;v8.0.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Null&lt;/td&gt; &#xA;   &lt;td&gt;null&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;v8.0.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Undefined/()&lt;/td&gt; &#xA;   &lt;td&gt;undefined&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;v8.0.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Result&amp;lt;()&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;Error&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;v8.0.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;T: Fn(...) -&amp;gt; Result&#xA;    &lt;t&gt;&lt;/t&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Function&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;v8.0.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Async/Future&lt;/td&gt; &#xA;   &lt;td&gt;Promise&#xA;    &lt;t&gt;&lt;/t&gt;&lt;/td&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;v10.6.0&lt;/td&gt; &#xA;   &lt;td&gt;async&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AsyncTask&lt;/td&gt; &#xA;   &lt;td&gt;Promise&#xA;    &lt;t&gt;&lt;/t&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;v8.5.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JsGlobal&lt;/td&gt; &#xA;   &lt;td&gt;global&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;v8.0.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JsSymbol&lt;/td&gt; &#xA;   &lt;td&gt;Symbol&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;v8.0.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Int8Array/Uint8Array ...&lt;/td&gt; &#xA;   &lt;td&gt;TypedArray&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;v8.0.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JsFunction&lt;/td&gt; &#xA;   &lt;td&gt;threadsafe function&lt;/td&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;v10.6.0&lt;/td&gt; &#xA;   &lt;td&gt;napi4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BigInt&lt;/td&gt; &#xA;   &lt;td&gt;BigInt&lt;/td&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;v10.7.0&lt;/td&gt; &#xA;   &lt;td&gt;napi6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>nvarner/typst-lsp</title>
    <updated>2023-03-25T01:43:07Z</updated>
    <id>tag:github.com,2023-03-25:/nvarner/typst-lsp</id>
    <link href="https://github.com/nvarner/typst-lsp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A brand-new language server for Typst, plus a VS Code extension&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;typst-lsp&lt;/h1&gt; &#xA;&lt;p&gt;A brand-new language server for Typst. It is still in development and not ready for regular use.&lt;/p&gt; &#xA;&lt;p&gt;Currently, it has an LSP component and a corresponding VS Code(ium) extension.&lt;/p&gt; &#xA;&lt;h2&gt;Current features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Syntax highlighting&lt;/li&gt; &#xA; &lt;li&gt;Compiles Typst into a PDF as you type&lt;/li&gt; &#xA; &lt;li&gt;Compile errors appear in the Output pane&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Near future goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Improved preview&lt;/li&gt; &#xA; &lt;li&gt;Completion&lt;/li&gt; &#xA; &lt;li&gt;Improved development experience&lt;/li&gt; &#xA; &lt;li&gt;Package extension for users&lt;/li&gt; &#xA; &lt;li&gt;Create extensions for more editors&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development guide&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;Install:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt; for the LSP itself&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org/en&#34;&gt;node&lt;/a&gt; for the VS Code extension; it may be easiest to install via &lt;a href=&#34;https://github.com/nvm-sh/nvm&#34;&gt;nvm&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;First time setup&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repository locally&lt;/li&gt; &#xA; &lt;li&gt;Open it in VS Code; it&#39;s needed to run the extension&lt;/li&gt; &#xA; &lt;li&gt;In the &lt;code&gt;addons/vscode&lt;/code&gt; subdirectory: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Run &lt;code&gt;npm install&lt;/code&gt; to install extension dependencies&lt;/li&gt; &#xA;   &lt;li&gt;Run &lt;code&gt;npm run compile&lt;/code&gt; to build the extension&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run through the development cycle once to initialize and test everything&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Development cycle&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make any changes&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;cargo install --path .&lt;/code&gt;; at present, the VS Code extension just invokes the &lt;code&gt;typst-lsp&lt;/code&gt; command to start the LSP, and this command will compile and replace that binary with the latest version &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If modifying the extension, keep &lt;code&gt;npm run watch&lt;/code&gt; running, or &lt;code&gt;npm run compile&lt;/code&gt; after changes&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Press &lt;code&gt;ctrl+F5&lt;/code&gt; to launch the &#34;Extension Development Host&#34;; if it&#39;s already running, invoke &#34;Developer: Reload Window&#34; from the command palette in the Extension Development Host&lt;/li&gt; &#xA; &lt;li&gt;Within the Extension Development Host, the extension will be active and ready for testing&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>