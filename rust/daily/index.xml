<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-06T01:39:44Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>YiNNx/cmd-wrapped</title>
    <updated>2024-01-06T01:39:44Z</updated>
    <id>tag:github.com,2024-01-06:/YiNNx/cmd-wrapped</id>
    <link href="https://github.com/YiNNx/cmd-wrapped" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Find out what your 2023 looks like in commandline!&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;right&#34;&gt; English / &lt;a href=&#34;https://raw.githubusercontent.com/YiNNx/cmd-wrapped/master/README-CN.md&#34;&gt;简体中文&lt;/a&gt; &lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;cmd-wrapped&lt;/h1&gt; &#xA; &lt;p&gt;Find out what the past year looks like in commandline!&lt;br&gt;&lt;/p&gt;&#xA; &lt;p&gt;&lt;/p&gt; &#xA; &lt;div&gt; &#xA;  &lt;img alt=&#34;Stars&#34; src=&#34;https://img.shields.io/github/stars/YiNNx/cmd-wrapped?style=flat-square&amp;amp;color=87e3dd&amp;amp;labelColor=444B5A&#34;&gt; &amp;nbsp; &#xA;  &lt;img alt=&#34;Release&#34; src=&#34;https://img.shields.io/github/v/release/YiNNx/cmd-wrapped?style=flat-square&amp;amp;color=87e3dd&amp;amp;labelColor=444B5A&#34;&gt; &#xA; &lt;/div&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/YiNNx/cmd-wrapped/master/assets/image-20240105171950987.png&#34; width=&#34;80%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Analyze the command-line activity distribution for months, weekdays and hours, as well as frequently used commands over the past year.&lt;/li&gt; &#xA; &lt;li&gt;Github-style command distribution graph&lt;/li&gt; &#xA; &lt;li&gt;Supports both Zsh and Bash, and you can also specify other years with argumemt.&lt;/li&gt; &#xA; &lt;li&gt;A cute Ferris on the cover &lt;img style=&#34;width:25px;vertical-align: bottom;&#34; src=&#34;https://raw.githubusercontent.com/YiNNx/cmd-wrapped/master/assets/ferris_hello.gif&#34;&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to Use&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Build from source (recommended, but requires &lt;code&gt;cargo&lt;/code&gt; installed):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone git@github.com:YiNNx/cmd-wrapped.git&#xA;cd cmd-wrapped&#xA;# for the past year&#xA;cargo run&#xA;# or for any specific year&#xA;cargo run -- 2022&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Download from &lt;a href=&#34;https://github.com/YiNNx/cmd-wrapped/releases/latest&#34;&gt;Release&lt;/a&gt;, unzip and run the binary file in the terminal:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# for the past year&#xA;./cmd-wrapped&#xA;# or for any specific year&#xA;./cmd-wrapped 2022&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;In some cases, cmd-wrapped may fail to output correct data (such as &lt;a href=&#34;https://github.com/YiNNx/cmd-wrapped/issues/3&#34;&gt;all outputs being 0&lt;/a&gt;). This is because it relies on Zsh / Bash tracking the timestamp for each command, which requires configuring specific options extraly:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;For Zsh - &lt;a href=&#34;https://zsh.sourceforge.io/Doc/Release/Options.html#History&#34;&gt;EXTENDED_HISTORY&lt;/a&gt; (oh-my-zsh has it enabled by default)&lt;/li&gt; &#xA;  &lt;li&gt;For Bash - &lt;a href=&#34;https://www.gnu.org/software/bash/manual/bash.html#index-HISTTIMEFORMAT&#34;&gt;HISTTIMEFORMAT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Commands executed before configuring the option won&#39;t be recorded with a timestamp and this will affect cmd-wrapped’s stats. If you find all your stats showing as 0, consider configuring the option now to view the cmd-wrapped stats next year :P&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Credits &amp;amp; License&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Special thanks to &lt;a href=&#34;https://github.com/jyi2ya&#34;&gt;@jyi2ya&lt;/a&gt; for the cooool idea!&lt;/li&gt; &#xA; &lt;li&gt;License: &lt;a href=&#34;https://github.com/YiNNx/cmd-wrapped/raw/master/License&#34;&gt;MIT&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>llenotre/maestro</title>
    <updated>2024-01-06T01:39:44Z</updated>
    <id>tag:github.com,2024-01-06:/llenotre/maestro</id>
    <link href="https://github.com/llenotre/maestro" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Unix-like kernel written in Rust&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://raw.githubusercontent.com/llenotre/maestro-lnf/master/logo-light.svg&#34;&gt; &#xA;  &lt;img src=&#34;https://raw.githubusercontent.com/llenotre/maestro-lnf/master/logo.svg?sanitize=true&#34; alt=&#34;logo&#34; width=&#34;50%&#34;&gt; &#xA; &lt;/picture&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/llenotre/maestro/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?style=for-the-badge&amp;amp;logo=book&#34; alt=&#34;MIT license&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/dynamic/toml?url=https%3A%2F%2Fraw.githubusercontent.com%2Fllenotre%2Fmaestro%2Fmaster%2FCargo.toml&amp;amp;query=%24.package.version&amp;amp;style=for-the-badge&amp;amp;label=version&#34; alt=&#34;Version&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/dynamic/toml?url=https%3A%2F%2Fraw.githubusercontent.com%2Fllenotre%2Fmaestro%2Fmaster%2Frust-toolchain.toml&amp;amp;query=%24.toolchain.channel&amp;amp;style=for-the-badge&amp;amp;logo=rust&amp;amp;label=rust%20toolchain&amp;amp;color=%23444&#34; alt=&#34;Rust toolchain&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/llenotre/maestro/check.yml?style=for-the-badge&amp;amp;logo=github&#34; alt=&#34;Continuous integration&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/llenotre/maestro?style=for-the-badge&amp;amp;color=yellow&#34; alt=&#34;Stars&#34;&gt; &lt;a href=&#34;https://discord.gg/4JMBN3YPAk&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/971452040821760080?style=for-the-badge&amp;amp;logo=discord&amp;amp;color=%235865f2&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;About&lt;/h1&gt; &#xA;&lt;p&gt;Maestro is a lightweight Unix-like kernel written in Rust.&lt;/p&gt; &#xA;&lt;p&gt;The goal is to provide a lightweight operating system able to use the safety features of the Rust language to be reliable.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This project is still in early stage development, thus it is highly unstable and misses a lot of features. &lt;strong&gt;Do not use it in production!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To stay updated with the project, follow the &lt;a href=&#34;https://blog.lenot.re&#34;&gt;blog&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://blog.lenot.re/assets/article/neofetch.png&#34; alt=&#34;neofetch&#34; width=&#34;100%&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dylanaraps/neofetch&#34;&gt;Neofetch&lt;/a&gt; and bash running on the OS.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;p&gt;The following features are currently implemented (non-exhaustive):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Terminal with &lt;a href=&#34;https://en.wikipedia.org/wiki/VGA_text_mode&#34;&gt;VGA text mode&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/PS/2_port&#34;&gt;PS/2&lt;/a&gt; keyboard (with forward compatibility with USB handled by the motherboard&#39;s firmware) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Partial support of &lt;a href=&#34;https://en.wikipedia.org/wiki/ANSI_escape_code&#34;&gt;ANSI escape codes&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Memory allocation/virtual memory &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Buddy_memory_allocation&#34;&gt;Buddy allocator&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Internal memory allocator, with similarities with &lt;strong&gt;dlmalloc&lt;/strong&gt;&#39;s implementation, working on top of the buddy allocator&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Processes and &lt;a href=&#34;https://en.wikipedia.org/wiki/Scheduling_(computing)&#34;&gt;scheduler&lt;/a&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/Round-robin_scheduling&#34;&gt;round-robin&lt;/a&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;POSIX signals&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Peripheral_Component_Interconnect&#34;&gt;PCI&lt;/a&gt; devices enumeration&lt;/li&gt; &#xA; &lt;li&gt;Files: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Mountpoints&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Parallel_ATA&#34;&gt;IDE/PATA&lt;/a&gt; driver&lt;/li&gt; &#xA;   &lt;li&gt;Filesystem (&lt;a href=&#34;https://en.wikipedia.org/wiki/Extended_file_system&#34;&gt;ext2&lt;/a&gt; only for now)&lt;/li&gt; &#xA;   &lt;li&gt;Disk partitions (&lt;a href=&#34;https://en.wikipedia.org/wiki/Master_boot_record&#34;&gt;MBR&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/GUID_Partition_Table&#34;&gt;GPT&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Virtual filesystems (&lt;code&gt;/tmp&lt;/code&gt; and &lt;code&gt;/proc&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;initramfs&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Time/Clock (&lt;a href=&#34;https://en.wikipedia.org/wiki/Real-time_clock&#34;&gt;RTC&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Linux system calls (roughly 30% are currently implemented)&lt;/li&gt; &#xA; &lt;li&gt;Kernel modules&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Executable_and_Linkable_Format&#34;&gt;ELF&lt;/a&gt; programs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Quickstart&lt;/h1&gt; &#xA;&lt;p&gt;This repository is not a full operating system in itself but only the kernel.&lt;/p&gt; &#xA;&lt;p&gt;You can either:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use the &lt;a href=&#34;https://github.com/llenotre/maestro-install&#34;&gt;installer&lt;/a&gt; to build a full operating system from an ISO file&lt;/li&gt; &#xA; &lt;li&gt;Build the OS by hand. For this, you can check the kernel&#39;s book&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The OS can then be run by a virtual machine such a &lt;strong&gt;QEMU&lt;/strong&gt; or &lt;strong&gt;VirtualBox&lt;/strong&gt;, or on a physical machine.&lt;/p&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;The configuration allows to easily specify which features have to be enabled in the kernel. This configuration is &lt;em&gt;required&lt;/em&gt; to compile the kernel.&lt;/p&gt; &#xA;&lt;p&gt;A default configuration is available in the file &lt;code&gt;default.config.toml&lt;/code&gt;. To use it, simply type the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cp default.config.toml config.toml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After configuration, the kernel can be built using the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo build               # Debug mode&#xA;cargo build --release     # Release mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default architecture is &lt;code&gt;x86&lt;/code&gt;. To specify another architecture, add the following parameter to the build command: &lt;code&gt;--target arch/&amp;lt;arch&amp;gt;/&amp;lt;arch&amp;gt;.json&lt;/code&gt;, where &lt;code&gt;&amp;lt;arch&amp;gt;&lt;/code&gt; is the selected architecture.&lt;/p&gt; &#xA;&lt;p&gt;The list of available architectures can be retrieved by typing the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ls -1 arch/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run&lt;/h2&gt; &#xA;&lt;h3&gt;With QEMU&lt;/h3&gt; &#xA;&lt;p&gt;QEMU is the preferred virtual machine to test the kernel.&lt;/p&gt; &#xA;&lt;p&gt;To install QEMU, type the following command:&lt;/p&gt; &#xA;&lt;p&gt;Ubuntu/Debian:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;apt install qemu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Arch Linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pacman -S qemu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A fully built operating system is required to run the system. This system must be present on a raw disk in the file &lt;code&gt;qemu_disk&lt;/code&gt; at the root of the repository. The option &lt;code&gt;-drive file=qemu_disk,format=raw&lt;/code&gt; is used on QEMU to reference the disk.&lt;/p&gt; &#xA;&lt;p&gt;The kernel can be run using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo run               # Debug mode&#xA;cargo run --release     # Release mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Run unit tests&lt;/h4&gt; &#xA;&lt;p&gt;The following command runs unit tests in QEMU:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo test --lib&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;h3&gt;The book&lt;/h3&gt; &#xA;&lt;p&gt;The kernel&#39;s book contains general information on how to use the kernel.&lt;/p&gt; &#xA;&lt;p&gt;The book can be built using &lt;em&gt;mdbook&lt;/em&gt;, with the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mdbook build doc/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, it can be accessed at &lt;code&gt;doc/book/index.html&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;References&lt;/h3&gt; &#xA;&lt;p&gt;The references contain the documentation for functions, structures, etc...&lt;/p&gt; &#xA;&lt;p&gt;It can be built using the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo doc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, it can be accessed at &lt;code&gt;target/&amp;lt;arch&amp;gt;/doc/kernel/index.html&lt;/code&gt;, where &lt;code&gt;&amp;lt;arch&amp;gt;&lt;/code&gt; is the architecture the kernel has been compiled for.&lt;/p&gt;</summary>
  </entry>
</feed>