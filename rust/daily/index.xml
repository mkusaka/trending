<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-01T01:34:37Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>obhq/jailbreak-11</title>
    <updated>2024-05-01T01:34:37Z</updated>
    <id>tag:github.com,2024-05-01:/obhq/jailbreak-11</id>
    <link href="https://github.com/obhq/jailbreak-11" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Experimental PS4 jailbreak for 11.00 and lower&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Jailbreak for 11.00&lt;/h1&gt; &#xA;&lt;p&gt;This is an experimental jailbreak for PS4 11.00 or lower using TheFloW disclosed &lt;a href=&#34;https://hackerone.com/reports/2177925&#34;&gt;exploit&lt;/a&gt;. &lt;strong&gt;This jailbreak is under development and does not working yet and may not working at all&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;TheFloW already &lt;a href=&#34;https://github.com/TheOfficialFloW/PPPwn&#34;&gt;released&lt;/a&gt; a working version by himself so this repository will be a playground for us to learn how thing work.&lt;/p&gt; &#xA;&lt;h2&gt;System requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Computer with one Ethernet port available&lt;/li&gt; &#xA; &lt;li&gt;Ethernet cable&lt;/li&gt; &#xA; &lt;li&gt;Linux &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A VM running Linux may not work&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;You need to connect the PS4 and the computer with an Ethernet cable &lt;strong&gt;without&lt;/strong&gt; any Ethernet switch in the middle.&lt;/p&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;p&gt;Run the following command on the computer that connected with the PS4 to find the index of connected port:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ip link&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will output something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000&#xA;    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00&#xA;2: enp3s0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc fq_codel state UP mode DEFAULT group default qlen 1000&#xA;    link/ether ??:??:??:??:??:?? brd ff:ff:ff:ff:ff:ff&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;My computer has only one Ethernet so &lt;code&gt;2&lt;/code&gt; is an obvious index for me. Once figure out run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo ./jailbreak-11 INDEX&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace &lt;code&gt;INDEX&lt;/code&gt; with the Ethernet index then open the PS4 and go to &lt;code&gt;Settings &amp;gt; Network &amp;gt; Set Up Internet Connection &amp;gt; Use a LAN Cable &amp;gt; Custom &amp;gt; PPPoE&lt;/code&gt;. Enter a random &lt;code&gt;PPPoE User ID&lt;/code&gt; and &lt;code&gt;PPPoE Password&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>say4n/jf</title>
    <updated>2024-05-01T01:34:37Z</updated>
    <id>tag:github.com,2024-05-01:/say4n/jf</id>
    <link href="https://github.com/say4n/jf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;flatten them json&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;$ jf&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;flatten them json&lt;/p&gt; &#xA;&lt;h2&gt;usage&lt;/h2&gt; &#xA;&lt;p&gt;grab the latest &lt;code&gt;$ jf&lt;/code&gt; from the &lt;a href=&#34;https://github.com/say4n/jf/releases/&#34;&gt;releases tab&lt;/a&gt; for your platform&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ jf -f foo.json&#xA;{&#34;foo.bar.0&#34;:&#34;baz&#34;}&#xA;&#xA;$ jf --filename foo.json&#xA;{&#34;foo.bar.0&#34;:&#34;baz&#34;}&#xA;&#xA;$ echo &#39;{&#34;foo&#34;: {&#34;bar&#34;: [&#34;baz&#34;]}}&#39; | jf&#xA;{&#34;foo.bar.0&#34;:&#34;baz&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;options&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;  -f, --filename &amp;lt;path_to_file.json&amp;gt;&#xA;  -s, --separator &amp;lt;SEPARATOR&amp;gt;         [default: .]&#xA;  -p, --pretty&#xA;  -h, --help                          Print help&#xA;  -V, --version                       Print version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;intent&lt;/h2&gt; &#xA;&lt;p&gt;handling nested json data is messy, &lt;code&gt;$ jf&lt;/code&gt; comes to the rescue.&lt;/p&gt; &#xA;&lt;p&gt;it can turn highly nested json blobs like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;this&#34;: {&#xA;        &#34;is&#34;: {&#xA;            &#34;nested&#34;: {&#xA;                &#34;quite&#34;: {&#xA;                    &#34;deep&#34;: [&#34;but&#34;, &#34;that&#34;, &#34;is&#34;, &#34;fine&#34;]&#xA;                }&#xA;            }&#xA;        }&#xA;    },&#xA;    &#34;some&#34; : [&#xA;        {&#xA;            &#34;other&#34;: [&#34;stuff&#34;]&#xA;        }&#xA;    ],&#xA;    &#34;even&#34;: {&#xA;        &#34;more&#34;: &#34;data&#34;,&#xA;        &#34;boolean&#34;: true,&#xA;        &#34;number&#34;: 2&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;into&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;even.boolean&#34;: true,&#xA;  &#34;even.more&#34;: &#34;data&#34;,&#xA;  &#34;even.number&#34;: 2,&#xA;  &#34;some.0.other.0&#34;: &#34;stuff&#34;,&#xA;  &#34;this.is.nested.quite.deep.0&#34;: &#34;but&#34;,&#xA;  &#34;this.is.nested.quite.deep.1&#34;: &#34;that&#34;,&#xA;  &#34;this.is.nested.quite.deep.2&#34;: &#34;is&#34;,&#xA;  &#34;this.is.nested.quite.deep.3&#34;: &#34;fine&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>