<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-14T01:35:28Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>timescale/pgvectorscale</title>
    <updated>2024-06-14T01:35:28Z</updated>
    <id>tag:github.com,2024-06-14:/timescale/pgvectorscale</id>
    <link href="https://github.com/timescale/pgvectorscale" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A complement to pgvector for high performance, cost efficient vector search on large workloads.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;pgvectorscale&lt;/h1&gt; &#xA; &lt;h3&gt;pgvectorscale builds on pgvector with higher performance embedding search and cost-efficient storage for AI applications. &lt;/h3&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://discord.gg/QedVDxRb&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Join_us_on_Discord-black?style=for-the-badge&amp;amp;logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://tsdb.co/gh-pgvector-signup&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Try_Timescale_for_free-black?style=for-the-badge&amp;amp;logo=timescale&amp;amp;logoColor=white&#34; alt=&#34;Try Timescale for free&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;pgvectorscale complements &lt;a href=&#34;https://github.com/pgvector/pgvector/raw/master/README.md&#34;&gt;pgvector&lt;/a&gt;, the open-source vector data extension for PostgreSQL, and introduces the following key innovations for pgvector data:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A new index type called StreamingDiskANN, inspired by the &lt;a href=&#34;https://github.com/microsoft/DiskANN&#34;&gt;DiskANN&lt;/a&gt; algorithm, based on research from Microsoft.&lt;/li&gt; &#xA; &lt;li&gt;Statistical Binary Quantization: developed by Timescale researchers, This compression method improves on standard Binary Quantization.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On benchmark dataset of 50 million Cohere embeddings (768 dimensions each), PostgreSQL with pgvector and pgvectorscale achieves &lt;strong&gt;28x lower p95 latency&lt;/strong&gt; and &lt;strong&gt;16x higher query throughput&lt;/strong&gt; compared to Pinecone&#39;s storage optimized (s1) index for approximate nearest neighbor queries at 99% recall, all at 75% less cost when self-hosted on AWS EC2.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://assets.timescale.com/docs/images/benchmark-comparison-pgvectorscale-pinecone.png&#34; alt=&#34;Benchmarks&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;PostgreSQL with pgvector and pgvectorscale extensions outperformed Pinecone’s storage optimized (s1) and performance-optimized (p2) pod-based index types.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;To learn more about the performance impact of pgvectorscale, and details about benchmark methodology and results, see the &lt;a href=&#34;http://www.timescale.com/blog/pgvector-vs-pinecone&#34;&gt;pgvector vs Pinecone comparison blog post&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In contrast to pgvector, which is written in C, pgvectorscale is developed in &lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt; using the &lt;a href=&#34;https://github.com/pgcentralfoundation/pgrx&#34;&gt;PGRX framework&lt;/a&gt;, offering the PostgreSQL community a new avenue for contributing to vector support.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Application developers or DBAs&lt;/strong&gt; can use pgvectorscale with their PostgreSQL databases.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgvectorscale/main/#installation&#34;&gt;Install pgvectorscale&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgvectorscale/main/#get-started-with-pgvectorscale&#34;&gt;Get started using pgvectorscale&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you &lt;strong&gt;want to contribute&lt;/strong&gt; to this extension, see how to &lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgvectorscale/main/DEVELOPMENT.md&#34;&gt;build pgvectorscale from source in a developer environment&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For production vector workloads, get &lt;strong&gt;private beta access to vector-optimized databases&lt;/strong&gt; with pgvector and pgvectorscale on Timescale. &lt;a href=&#34;https://timescale.typeform.com/to/H7lQ10eQ&#34;&gt;Sign up here for priority access&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The fastest ways to run PostgreSQL with pgvectorscale are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgvectorscale/main/#using-a-pre-built-docker-container&#34;&gt;Using a pre-built Docker container&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgvectorscale/main/#installing-from-source&#34;&gt;Installing from source&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgvectorscale/main/#enable-pgai-in-a-timescale-cloud-service&#34;&gt;Enable pgvectorscale in a Timescale Cloud service&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using a pre-built Docker container&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.timescale.com/self-hosted/latest/install/installation-docker/&#34;&gt;Run the TimescaleDB Docker image&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Connect to your database:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;psql -d &#34;postgres://&amp;lt;username&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;/&amp;lt;database-name&amp;gt;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create the pgvectorscale extension:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE EXTENSION IF NOT EXISTS vectorscale CASCADE;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;CASCADE&lt;/code&gt; automatically installs &lt;code&gt;pgvector&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Installing from source&lt;/h3&gt; &#xA;&lt;p&gt;You can install pgvectorscale from source and install it in an existing PostgreSQL server&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Compile and install the extension&lt;/p&gt; &lt;pre&gt;&lt;code&gt;# install prerequisites&#xA;## rust&#xA;curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh&#xA;## pgrx&#xA;cargo install --locked cargo-pgrx&#xA;cargo pgrx init --pg16 pg_config&#xA;&#xA;#download, build and install pgvectorscale&#xA;cd /tmp&#xA;git clone --branch &amp;lt;version&amp;gt; https://github.com/timescale/pgvectorscale&#xA;cd pgvectorscale/pgvectorscale&#xA;cargo pgrx install --release&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can also take a look at our &lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgvectorscale/main/DEVELOPMENT.md&#34;&gt;documentation for extension developers&lt;/a&gt; for more complete instructions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Connect to your database:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;psql -d &#34;postgres://&amp;lt;username&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;/&amp;lt;database-name&amp;gt;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create the pgvectorscale extension:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE EXTENSION IF NOT EXISTS vectorscale CASCADE;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;CASCADE&lt;/code&gt; automatically installs &lt;code&gt;pgvector&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Enable pgvectorscale in a Timescale Cloud service&lt;/h3&gt; &#xA;&lt;p&gt;Note: the instructions below are for Timescale&#39;s standard compute instance. For production vector workloads, we’re offering &lt;strong&gt;private beta access to vector-optimized databases&lt;/strong&gt; with pgvector and pgvectorscale on Timescale. &lt;a href=&#34;https://timescale.typeform.com/to/H7lQ10eQ&#34;&gt;Sign up here for priority access&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To enable pgvectorscale:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a new &lt;a href=&#34;https://console.cloud.timescale.com/signup?utm_campaign=vectorlaunch&#34;&gt;Timescale Service&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you want to use an existing service, pgvectorscale is added as an available extension on the first maintenance window after the pgvectorscale release date.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Connect to your Timescale service:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;psql -d &#34;postgres://&amp;lt;username&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;/&amp;lt;database-name&amp;gt;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create the pgvectorscale extension:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-postgresql&#34;&gt;CREATE EXTENSION IF NOT EXISTS vectorscale CASCADE;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;CASCADE&lt;/code&gt; automatically installs &lt;code&gt;pgvector&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Get started with pgvectorscale&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a table with an embedding column. For example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-postgresql&#34;&gt;CREATE TABLE IF NOT EXISTS document_embedding  (&#xA;    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,&#xA;    metadata JSONB,&#xA;    contents TEXT,&#xA;    embedding VECTOR(1536)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Populate the table.&lt;/p&gt; &lt;p&gt;For more information, see the &lt;a href=&#34;https://github.com/pgvector/pgvector/raw/master/README.md#storing&#34;&gt;pgvector instructions&lt;/a&gt; and &lt;a href=&#34;https://github.com/pgvector/pgvector/raw/master/README.md#languages&#34;&gt;list of clients&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a StreamingDiskANN index on the embedding column:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-postgresql&#34;&gt;CREATE INDEX document_embedding_idx ON document_embedding&#xA;USING diskann (embedding);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Find the 10 closest embeddings using the index.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-postgresql&#34;&gt;SELECT *&#xA;FROM document_embedding&#xA;ORDER BY embedding &amp;lt;=&amp;gt; $1&#xA;LIMIT 10&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note: pgvectorscale currently support cosine distance (&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;) queries. If you would like additional distance types, &lt;a href=&#34;https://github.com/timescale/pgvectorscale/issues&#34;&gt;create an issue&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Tuning&lt;/h2&gt; &#xA;&lt;p&gt;The StreamingDiskANN index comes with &lt;strong&gt;smart defaults&lt;/strong&gt; but also the ability to customize it&#39;s behavior. There are two types of parameters: index build-time parameters that are specified when an index is created and query-time parameters that can be tuned when querying an index.&lt;/p&gt; &#xA;&lt;p&gt;We suggest setting the index build-time paramers for major changes to index operations while query-time parameters can be used to tune the accuracy/performance tradeoff for individual queries.&lt;/p&gt; &#xA;&lt;p&gt;We expect most people to tune the query-time parameters (if any) and leave the index build time parameters set to default.&lt;/p&gt; &#xA;&lt;h3&gt;StreamingDiskANN index build-time parameters&lt;/h3&gt; &#xA;&lt;p&gt;These parameters can be set when an index is created.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Parameter name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Default value&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;storage_layout&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;memory_optimized&lt;/code&gt; which uses SBQ to compress vector data or &lt;code&gt;plain&lt;/code&gt; which stores data uncompressed&lt;/td&gt; &#xA;   &lt;td&gt;memory_optimized&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;num_neighbors&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Sets the maximum number of neighbors per node. Higher values increase accuracy but make the graph traversal slower.&lt;/td&gt; &#xA;   &lt;td&gt;50&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;search_list_size&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;This is the S parameter used in the greedy search algorithm used during construction. Higher values improve graph quality at the cost of slower index builds.&lt;/td&gt; &#xA;   &lt;td&gt;100&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;max_alpha&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Is the alpha parameter in the algorithm. Higher values improve graph quality at the cost of slower index builds.&lt;/td&gt; &#xA;   &lt;td&gt;1.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;num_dimensions&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The number of dimensions to index. By default, all dimensions are indexed. But you can also index less dimensions to make use of &lt;a href=&#34;https://huggingface.co/blog/matryoshka&#34;&gt;Matryoshka embeddings&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0 (all dimensions)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;num_bits_per_dimension&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Number of bits used to encode each dimension when using SBQ&lt;/td&gt; &#xA;   &lt;td&gt;2 for less than 900 dimensions, 1 otherwise&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;An example of how to set the &lt;code&gt;num_neighbors&lt;/code&gt; parameter is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE INDEX document_embedding_idx ON document_embedding&#xA;USING diskann (embedding) WITH(num_neighbors=50);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;StreamingDiskANN query-time parameters&lt;/h4&gt; &#xA;&lt;p&gt;You can also set two parameters to control the accuracy vs. query speed trade-off at query time. We suggest adjusting &lt;code&gt;diskann.query_rescore&lt;/code&gt; to fine-tune accuracy.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Parameter name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Default value&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;diskann.query_search_list_size&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The number of additional candidates considered during the graph search.&lt;/td&gt; &#xA;   &lt;td&gt;100&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;diskann.query_rescore&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The number of elements rescored (0 to disable rescoring)&lt;/td&gt; &#xA;   &lt;td&gt;50&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;You can set the value by using &lt;code&gt;SET&lt;/code&gt; before executing a query. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SET diskann.query_rescore = 400;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note the &lt;a href=&#34;https://www.postgresql.org/docs/current/sql-set.html&#34;&gt;SET command&lt;/a&gt; applies to the entire session (database connection) from the point of execution. You can use a transaction-local variant using &lt;code&gt;LOCAL&lt;/code&gt; which will be reset after the end of the transaction:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;BEGIN;&#xA;SET LOCAL diskann.query_search_list_size= 10;&#xA;SELECT * FROM document_embedding ORDER BY embedding &amp;lt;=&amp;gt; $1 LIMIT 10&#xA;COMMIT;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get involved&lt;/h2&gt; &#xA;&lt;p&gt;pgvectorscale is still at an early stage. Now is a great time to help shape the direction of this project; we are currently deciding priorities. Have a look at the list of features we&#39;re thinking of working on. Feel free to comment, expand the list, or hop on the Discussions forum.&lt;/p&gt; &#xA;&lt;h2&gt;About Timescale&lt;/h2&gt; &#xA;&lt;p&gt;Timescale is a PostgreSQL cloud company. To learn more visit the &lt;a href=&#34;https://www.timescale.com&#34;&gt;timescale.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://console.cloud.timescale.com/signup?utm_campaign=vectorlaunch&#34;&gt;Timescale Cloud&lt;/a&gt; is a high-performance, developer focused, cloud platform that provides PostgreSQL services for the most demanding AI, time-series, analytics, and event workloads. Timescale Cloud is ideal for production applications and provides high availability, streaming backups, upgrades over time, roles and permissions, and great security.&lt;/p&gt;</summary>
  </entry>
</feed>