<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-19T01:32:30Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>systeminit/si</title>
    <updated>2023-08-19T01:32:30Z</updated>
    <id>tag:github.com,2023-08-19:/systeminit/si</id>
    <link href="https://github.com/systeminit/si" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The System Initiative software&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;System Initiative&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.com/invite/system-init&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/discord-gray?style=for-the-badge&amp;amp;logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Discord Server&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://buildkite.com/system-initiative&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dashboard-gray?style=for-the-badge&amp;amp;logo=buildkite&amp;amp;logoColor=white&#34; alt=&#34;Build dashboard&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://buildkite.com/system-initiative/si-merge-main&#34;&gt;&lt;img src=&#34;https://img.shields.io/buildkite/ecdbcb0ae243a74976f62a95826ec1fce62707e6fe07e4b973?style=for-the-badge&amp;amp;logo=buildkite&amp;amp;label=build&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://buildkite.com/system-initiative/si-nightly&#34;&gt;&lt;img src=&#34;https://img.shields.io/buildkite/311961055d5366e6b7d0bfb95cc01a513a103e8b39c8a42d33?style=for-the-badge&amp;amp;logo=buildkite&amp;amp;label=nightly&#34; alt=&#34;Nightly status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a monolithic repository containing the System Initiative software.&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;System Initiative is a collaborative power tool designed to remove the papercuts from DevOps work. To learn more, read our &lt;a href=&#34;https://www.systeminit.com/blog-second-wave-devops&#34;&gt;&#34;Second Wave DevOps&#34; blog post&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to get System Initiative (SI) up and running, navigate to the installation page on &lt;a href=&#34;https://systeminit.com&#34;&gt;our website&lt;/a&gt; to get started. If you would like to develop locally, follow the &lt;a href=&#34;https://raw.githubusercontent.com/systeminit/si/main/#local-development-setup&#34;&gt;Local Development Setup&lt;/a&gt; instructions below.&lt;/p&gt; &#xA;&lt;h2&gt;Local Development Setup&lt;/h2&gt; &#xA;&lt;p&gt;Running the System Initiative software locally can be done in a variety of ways, but this abbreviated section will focus on a single method for getting your environment ready to run the stack. For more information and options on running SI locally, see the &lt;a href=&#34;https://raw.githubusercontent.com/systeminit/si/main/docs/DEVELOPMENT_ENVIRONMENT.md&#34;&gt;development environment documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;(1) Choose a Supported Platform&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s start by choosing an officially supported platform.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Architecture&lt;/th&gt; &#xA;   &lt;th&gt;Operating System&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;x86_64 (amd64)&lt;/td&gt; &#xA;   &lt;td&gt;macOS, Linux, &lt;a href=&#34;https://learn.microsoft.com/en-us/windows/wsl/&#34;&gt;WSL2&lt;/a&gt; (Windows 10/11)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;aarch64 (arm64)&lt;/td&gt; &#xA;   &lt;td&gt;macOS, Linux, &lt;a href=&#34;https://learn.microsoft.com/en-us/windows/wsl/&#34;&gt;WSL2&lt;/a&gt; (Windows 10/11)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Platform Notes:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On Apple Silicon systems (i.e. macOS aarch64 (arm64)), Rosetta 2 must be installed (install it with &lt;code&gt;softwareupdate --install-rosetta&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nixos.org/&#34;&gt;NixOS&lt;/a&gt; and Linux with MUSL instead of GNU (e.g. &lt;a href=&#34;https://www.alpinelinux.org/&#34;&gt;Alpine Linux&lt;/a&gt;) will not likely work at this time&lt;/li&gt; &#xA; &lt;li&gt;Systemd may need to be enabled on WSL2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;(2) Install Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;Install dependencies on your chosen platform.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;1)&lt;/strong&gt; &lt;a href=&#34;https://github.com/DeterminateSystems/nix-installer&#34;&gt;&lt;code&gt;nix&lt;/code&gt; with flakes enabled&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2)&lt;/strong&gt; &lt;code&gt;docker&lt;/code&gt; from &lt;a href=&#34;https://www.docker.com/products/docker-desktop/&#34;&gt;Docker Desktop&lt;/a&gt; or &lt;a href=&#34;https://docs.docker.com/engine/&#34;&gt;Docker Engine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;3a)&lt;/strong&gt; &lt;a href=&#34;https://direnv.net&#34;&gt;&lt;code&gt;direnv&lt;/code&gt;&lt;/a&gt; version &lt;code&gt;&amp;gt;= 2.30&lt;/code&gt; installed&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;3b)&lt;/strong&gt; &lt;a href=&#34;https://direnv.net/docs/hook.html&#34;&gt;&lt;code&gt;direnv&lt;/code&gt; hooked into your shell&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For &lt;code&gt;nix&lt;/code&gt;, we highly recommend using the &lt;a href=&#34;https://github.com/DeterminateSystems/nix-installer&#34;&gt;Determinate Nix Installer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;code&gt;docker&lt;/code&gt;, the Docker Desktop version corresponding to your native architecture should be used. WSL2 users should be able to use either Docker Desktop for WSL2 or Docker Engine inside the WSL2 VM.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;code&gt;direnv&lt;/code&gt;, you can install it with &lt;a href=&#34;https://direnv.net/docs/installation.html&#34;&gt;your package manager of choice&lt;/a&gt;. However, if you&#39;re unsure which installation method to use or your package manager does not provide a compatible version, you can use &lt;code&gt;nix&lt;/code&gt; itself (e.g. &lt;code&gt;nix profile install nixpkgs#direnv&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;We recommend using &lt;a href=&#34;https://direnv.net/docs/hook.html&#34;&gt;the upstream docs for hooking &lt;code&gt;direnv&lt;/code&gt; into your shell&lt;/a&gt;, but here is an example on how to do it on a system where &lt;code&gt;zsh&lt;/code&gt; is the default shell. In this example, the following is added to the end of &lt;code&gt;~/.zshrc&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;if [ $(command -v direnv) ]; then&#xA;   eval &#34;$(direnv hook zsh)&#34;&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;(3) Enter the Repository Directory&lt;/h3&gt; &#xA;&lt;p&gt;All commands need to be run from the &lt;code&gt;nix&lt;/code&gt; environment. Since &lt;code&gt;direnv&lt;/code&gt; is installed &lt;em&gt;and&lt;/em&gt; hooked into your shell, you can &lt;code&gt;cd&lt;/code&gt; into the repository and &lt;code&gt;nix&lt;/code&gt; will boostrap the environment for you using the flake.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Please note: you may notice a large download of dependencies when entering the repository for the first time.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;(4) Configure Providers&lt;/h3&gt; &#xA;&lt;p&gt;Configuring providers is optional for using the System Initiative software, but may be required depending on the types of assets used.&lt;/p&gt; &#xA;&lt;p&gt;If you are using AWS assets, authentication with the &lt;code&gt;aws&lt;/code&gt; CLI is required to deploy and manage your infrastructure.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;aws configure&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Docker Hub authentication is not strictly needed if you only access public docker images, but to avoid being rate-limited when qualifying images, we recommend authenticating with the &lt;code&gt;docker&lt;/code&gt; CLI.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker login&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;(5) Running the Stack&lt;/h3&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://github.com/facebook/buck2&#34;&gt;&lt;strong&gt;buck2&lt;/strong&gt;&lt;/a&gt; to run the stack, run and build individual services and libraries, perform lints and tests, etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Before continuing, you should stop any locally running services to avoid conflicting ports with the stack. Some of the services that will run include, but are not limited to the following: PostgreSQL, NATS, Jaeger and OpenTelemetry.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Check if you are ready to run the stack before continuing.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buck2 run dev:healthcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may notice some checks related to resource limits. On macOS and in WSL2 in particular, we recommend significantly increasing the file descriptor limit for &lt;code&gt;buck2&lt;/code&gt; to work as intended (e.g. &lt;code&gt;ulimit -n 10240&lt;/code&gt;). &lt;em&gt;Please note: the new file descriptor limit may not persist to future sessions.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Once ready, we can build relevant services and run the entire stack locally.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Please note: if you have used SI before, the following command will delete all contents of the database. Reach out to us &lt;a href=&#34;https://discord.com/invite/system-init&#34;&gt;on Discord&lt;/a&gt; if you have any questions.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buck2 run dev:up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once Tilt starts, you can check on the status of all services by accessing the UI through the given port on your local host (e.g. &lt;a href=&#34;http://localhost:10350/&#34;&gt;http://localhost:10350/&lt;/a&gt;). Every service should eventually have a green checkmark next to them, which ensures that they are in &#34;ready&#34; states.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Please note: database migrations may take some time to complete.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you would like to learn more on what&#39;s running, check out the &lt;a href=&#34;https://raw.githubusercontent.com/systeminit/si/main/docs/ARCHITECTURE.md&#34;&gt;Architecture&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h3&gt;(6) Troubleshooting in Tilt&lt;/h3&gt; &#xA;&lt;p&gt;If some services failed to start, you can restart them on the Tilt dashboard.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A backend service fails (e.g. &lt;code&gt;sdf&lt;/code&gt;): restart them in the following order: &lt;code&gt;veritech&lt;/code&gt;, &lt;code&gt;council&lt;/code&gt;, &lt;code&gt;pinga&lt;/code&gt;, &lt;code&gt;sdf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;A frontend service fails (e.g. &lt;code&gt;web&lt;/code&gt;): restart the service individually&lt;/li&gt; &#xA; &lt;li&gt;A dependent service fails (e.g. PostgreSQL): tear down the stack and restart&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;(7) Tearing Down the Stack&lt;/h3&gt; &#xA;&lt;p&gt;The following command will stop all running services and containers. It will also remove the containers and, consequentially, the data held in them.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buck2 run dev:down&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, if you wish to keep your data for later use, you can stop the containers without removing them.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buck2 run dev:stop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Where Do I Learn More?&lt;/h2&gt; &#xA;&lt;p&gt;For more information on how to use and develop the System Initiative software, talk to us on &lt;a href=&#34;https://discord.com/invite/system-init&#34;&gt;our Discord&lt;/a&gt; and see the &lt;a href=&#34;https://raw.githubusercontent.com/systeminit/si/main/docs&#34;&gt;docs&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;How Can I Contribute?&lt;/h2&gt; &#xA;&lt;p&gt;To start, we recommend reading the &lt;a href=&#34;https://raw.githubusercontent.com/systeminit/si/main/#open-source&#34;&gt;Open Source&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/systeminit/si/main/#contributing&#34;&gt;Contributing&lt;/a&gt; sources below. They provide information on licensing, contributor rights, and more.&lt;/p&gt; &#xA;&lt;p&gt;Afterwards, navigate to the &lt;a href=&#34;https://raw.githubusercontent.com/systeminit/si/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; to get started.&lt;/p&gt; &#xA;&lt;h2&gt;Open Source&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains the System Initiative software, covered under the &lt;a href=&#34;https://raw.githubusercontent.com/systeminit/si/main/LICENSE&#34;&gt;Apache License 2.0&lt;/a&gt;, except where noted (any System Initiative logos or trademarks are not covered under the Apache License, and should be explicitly noted by a LICENSE file.)&lt;/p&gt; &#xA;&lt;p&gt;System Initiative is a product produced from this open source software, exclusively by System Initiative, Inc. It is distributed under our commercial terms.&lt;/p&gt; &#xA;&lt;p&gt;Others are allowed to make their own distribution of the software, but they cannot use any of the System Initiative trademarks, cloud services, etc.&lt;/p&gt; &#xA;&lt;p&gt;We explicitly grant permission for you to make a build that includes our trademarks while developing the System Initiative software itself. You may not publish or share the build, and you may not use that build to run System Initiative software for any other purpose.&lt;/p&gt; &#xA;&lt;p&gt;You can &lt;a href=&#34;https://systeminit.com/open-source&#34;&gt;learn more about the System Initiative software and Open Source in our FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;The System Initiative software is Open Source under the &lt;a href=&#34;https://raw.githubusercontent.com/systeminit/si/main/LICENSE&#34;&gt;Apache License 2.0&lt;/a&gt;, and is the &lt;a href=&#34;https://raw.githubusercontent.com/systeminit/si/main/NOTICE&#34;&gt;copyright of its contributors&lt;/a&gt;. If you would like to contribute to the software, you must:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Read the &lt;a href=&#34;https://raw.githubusercontent.com/systeminit/si/main/CONTRIBUTORS.md&#34;&gt;Contributors&lt;/a&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;Agree to the terms by having a commit in your pull request &#34;signing&#34; the file by adding your name and GitHub handle on a new line at the bottom of the file.&lt;/li&gt; &#xA; &lt;li&gt;Make sure your commits Author metadata matches the name and handle you added to the file.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This ensures that users, distributors, and other contributors can rely on all the software related to System Initiative being contributed under the terms of the &lt;a href=&#34;https://raw.githubusercontent.com/systeminit/si/main/LICENSE&#34;&gt;License&lt;/a&gt;. No contributions will be accepted without following this process.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>denoland/monch</title>
    <updated>2023-08-19T01:32:30Z</updated>
    <id>tag:github.com,2023-08-19:/denoland/monch</id>
    <link href="https://github.com/denoland/monch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Inspired by nom, but specifically for strings.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;monch&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crates.io/crates/monch&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/monch.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/denoland/monch/main/monch.apng&#34; alt=&#34;Deno dinosaur eating leaves.&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Inspired by &lt;a href=&#34;https://crates.io/crates/nom&#34;&gt;nom&lt;/a&gt;, but specifically for strings and with some additional combinators we use in Deno.&lt;/p&gt; &#xA;&lt;p&gt;See an example of use in &lt;a href=&#34;https://github.com/denoland/deno_task_shell&#34;&gt;deno_task_shell&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>google/OpenSK</title>
    <updated>2023-08-19T01:32:30Z</updated>
    <id>tag:github.com,2023-08-19:/google/OpenSK</id>
    <link href="https://github.com/google/OpenSK" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenSK is an open-source implementation for security keys written in Rust that supports both FIDO U2F and FIDO2 standards.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img alt=&#34;OpenSK logo&#34; src=&#34;https://raw.githubusercontent.com/google/OpenSK/stable/docs/img/OpenSK.svg?sanitize=true&#34; width=&#34;200px&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/google/OpenSK/workflows/markdownlint/badge.svg?branch=stable&#34; alt=&#34;markdownlint&#34;&gt; &lt;img src=&#34;https://github.com/google/OpenSK/workflows/pylint/badge.svg?branch=stable&#34; alt=&#34;pylint&#34;&gt; &lt;img src=&#34;https://github.com/google/OpenSK/workflows/Cargo%20check/badge.svg?branch=stable&#34; alt=&#34;Cargo check&#34;&gt; &lt;img src=&#34;https://github.com/google/OpenSK/workflows/Cargo%20format/badge.svg?branch=stable&#34; alt=&#34;Cargo format&#34;&gt; &lt;a href=&#34;https://coveralls.io/github/google/OpenSK?branch=stable&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/google/OpenSK/badge.svg?branch=stable&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;OpenSK&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains a Rust implementation of a &lt;a href=&#34;https://fidoalliance.org/fido2/&#34;&gt;FIDO2&lt;/a&gt; authenticator. We developed OpenSK as a &lt;a href=&#34;https://tockos.org&#34;&gt;Tock OS&lt;/a&gt; application.&lt;/p&gt; &#xA;&lt;p&gt;We intend to bring a full open source experience to security keys, from application to operating system. You can even 3D print your own open source enclosure! You can see OpenSK in action in this &lt;a href=&#34;https://www.youtube.com/watch?v=klEozvpw0xg&#34;&gt;video on YouTube&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h3&gt;FIDO2&lt;/h3&gt; &#xA;&lt;p&gt;The stable branch implements the &lt;a href=&#34;https://fidoalliance.org/specs/fido-v2.0-ps-20190130/fido-client-to-authenticator-protocol-v2.0-ps-20190130.html&#34;&gt;CTAP2.0 specification&lt;/a&gt; and is FIDO certified. OpenSK supports U2F, and non-discoverable credentials created with either protocol are compatible with the other.&lt;/p&gt; &#xA;&lt;p&gt;If you want to use features of the newer FIDO 2.1, you can try our &lt;a href=&#34;https://github.com/google/OpenSK/tree/develop&#34;&gt;develop branch&lt;/a&gt;. This version is NOT certified and less thoroughly tested though. If you plan to add features to OpenSK, you should switch to develop.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;span&gt;⚠&lt;/span&gt; Disclaimer&lt;/h3&gt; &#xA;&lt;p&gt;This project is &lt;strong&gt;proof-of-concept and a research platform&lt;/strong&gt;. It is &lt;strong&gt;NOT&lt;/strong&gt; meant for a daily usage. The cryptography implementations are not resistent against side-channel attacks.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;re still in the process of integrating the &lt;a href=&#34;https://developer.arm.com/ip-products/security-ip/cryptocell-300-family&#34;&gt;ARM® CryptoCell-310&lt;/a&gt; embedded in the &lt;a href=&#34;https://infocenter.nordicsemi.com/index.jsp?topic=%2Fps_nrf52840%2Fcryptocell.html&#34;&gt;Nordic nRF52840 chip&lt;/a&gt; to enable hardware-accelerated cryptography. Our placeholder implementations of required cryptography algorithms (ECDSA, ECC secp256r1, HMAC-SHA256 and AES256) in Rust are research-quality code. They haven&#39;t been reviewed and don&#39;t provide constant-time guarantees.&lt;/p&gt; &#xA;&lt;h2&gt;Hardware&lt;/h2&gt; &#xA;&lt;p&gt;You will need one the following supported boards:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nordicsemi.com/Software-and-Tools/Development-Kits/nRF52840-DK&#34;&gt;Nordic nRF52840-DK&lt;/a&gt; development kit. This board is more convenient for development and debug scenarios as the JTAG probe is already on the board.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nordicsemi.com/Software-and-tools/Development-Kits/nRF52840-Dongle&#34;&gt;Nordic nRF52840 Dongle&lt;/a&gt; to have a more practical form factor.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.makerdiary.com/nrf52840-mdk/&#34;&gt;Makerdiary nRF52840-MDK USB dongle&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://feitiantech.github.io/OpenSK_USB/&#34;&gt;Feitian OpenSK dongle&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install OpenSK,&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;follow the &lt;a href=&#34;https://raw.githubusercontent.com/google/OpenSK/stable/docs/install.md&#34;&gt;general setup steps&lt;/a&gt;,&lt;/li&gt; &#xA; &lt;li&gt;then continue with the instructions for your specific hardware: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/OpenSK/stable/docs/boards/nrf52840dk.md&#34;&gt;Nordic nRF52840-DK&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/OpenSK/stable/docs/boards/nrf52840_dongle.md&#34;&gt;Nordic nRF52840 Dongle&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/OpenSK/stable/docs/boards/nrf52840_mdk.md&#34;&gt;Makerdiary nRF52840-MDK USB dongle&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/OpenSK/stable/docs/boards/nrf52840_feitian.md&#34;&gt;Feitian OpenSK dongle&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To test whether the installation was successful, visit a &lt;a href=&#34;https://webauthn.io/&#34;&gt;demo website&lt;/a&gt; and try to register and login. Please check our &lt;a href=&#34;https://raw.githubusercontent.com/google/OpenSK/stable/docs/debugging.md&#34;&gt;Troubleshooting and Debugging&lt;/a&gt; section if you have problems with the installation process or during development. To find out what else you can do with your OpenSK, see &lt;a href=&#34;https://raw.githubusercontent.com/google/OpenSK/stable/docs/customization.md&#34;&gt;Customization&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Research&lt;/h2&gt; &#xA;&lt;p&gt;We implemented post-quantum cryptography on OpenSK. The code is released under the &lt;a href=&#34;https://github.com/google/OpenSK/releases/tag/hybrid-pqc&#34;&gt;hybrid-pqc tag&lt;/a&gt;. Our &lt;a href=&#34;https://research.google/pubs/pub51659/&#34;&gt;paper&lt;/a&gt; was published in the ACNS Secure Cryptographic Implementation workshop 2023.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/google/OpenSK/stable/docs/contributing.md&#34;&gt;Contributing.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Reporting a Vulnerability&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/google/OpenSK/stable/SECURITY.md&#34;&gt;SECURITY.md&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>