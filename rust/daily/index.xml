<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-17T01:34:30Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>lostb1t/replex</title>
    <updated>2024-07-17T01:34:30Z</updated>
    <id>tag:github.com,2024-07-17:/lostb1t/replex</id>
    <link href="https://github.com/lostb1t/replex" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Remix your Plex hubs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Replex&lt;/h1&gt; &#xA;&lt;p&gt;Remix your plex hubs&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lostb1t/replex/main/examplewithhero.png&#34; alt=&#34;plot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Merge hubs (recommended rows) from different libraries into a &lt;a href=&#34;https://raw.githubusercontent.com/lostb1t/replex/main/interleave.png&#34;&gt;single hub&lt;/a&gt; (interleave). Aka have movies and shows in a single row.&lt;/li&gt; &#xA; &lt;li&gt;Choose between styles, &lt;a href=&#34;https://raw.githubusercontent.com/lostb1t/replex/main/shelf.png&#34;&gt;shelf&lt;/a&gt; (default) or &lt;a href=&#34;https://raw.githubusercontent.com/lostb1t/replex/main/hero.png&#34;&gt;hero&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Remove watched items from hubs.&lt;/li&gt; &#xA; &lt;li&gt;Auto load artwork for hero styles.&lt;/li&gt; &#xA; &lt;li&gt;Filter hubs by its restrictions (per user hub)&lt;/li&gt; &#xA; &lt;li&gt;Disable user state: remove watched badges from hub items.&lt;/li&gt; &#xA; &lt;li&gt;Disable leaf count: remove episode count from artwork.&lt;/li&gt; &#xA; &lt;li&gt;Force maximum quality.&lt;/li&gt; &#xA; &lt;li&gt;Auto select version based on resolution of the client.&lt;/li&gt; &#xA; &lt;li&gt;Fallback to different version if selected version is video transcoding.&lt;/li&gt; &#xA; &lt;li&gt;Works on every client not only plex web!&lt;/li&gt; &#xA; &lt;li&gt;Plays nice with PMM (and without).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How does it work&lt;/h2&gt; &#xA;&lt;p&gt;Replex is an proxy that transforms the communication between the plex media server and plex clients. This allows replex to change some dials that otherwise wouldnt be possible.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Docker compose example including plex:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;version: &#34;3&#34;&#xA;services:&#xA;  plex:&#xA;    image: lscr.io/linuxserver/plex:latest&#xA;    container_name: plex&#xA;    environment:&#xA;      - PUID=1000&#xA;      - PGID=1000&#xA;      - TZ=Etc/UTC&#xA;      - VERSION=docker&#xA;      # claim from https://plex.tv/claim &#xA;      - PLEX_CLAIM=&#xA;    ports:&#xA;      - 32400:32400&#xA;     volumes:&#xA;       - /path/to/library:/config&#xA;       - /path/to/tvseries:/tv&#xA;       - /path/to/movies:/movies&#xA;    restart: unless-stopped&#xA;  replex:&#xA;    image: ghcr.io/lostb1t/replex:latest&#xA;    container_name: replex&#xA;    environment:&#xA;      REPLEX_HOST: http://plex:32400&#xA;      REPLEX_TOKEN: ***** # server admin plex token: https://support.plex.tv/articles/204059436-finding-an-authentication-token-x-plex-token/&#xA;    ports:&#xA;      - 3001:80&#xA;    restart: unless-stopped&#xA;    depends_on:&#xA;      - plex&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add your proxy url to plex &#34;Custom server access URLs&#34; (ex &lt;a href=&#34;http://0.0.0.0:3001&#34;&gt;http://0.0.0.0:3001&lt;/a&gt;) Then access your proxy url &lt;a href=&#34;http://0.0.0.0:3001&#34;&gt;http://0.0.0.0:3001&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note: DO NOT run the plex container in host mode. It will cause plex to connect to the local ip instead of the custom url for local clients and bypass replex.&lt;/p&gt; &#xA;&lt;p&gt;Note: Plex clients are a bit broken with custom urls and unsecured connections. Most wont work if the custom server url is not secure. So for testing the direct web client is fine but after that you want to setup SSL. See the &#34;Remote access&#34; section for more info.&lt;/p&gt; &#xA;&lt;h2&gt;Settings&lt;/h2&gt; &#xA;&lt;p&gt;Settings are set via &lt;a href=&#34;https://kinsta.com/knowledgebase/what-is-an-environment-variable/&#34;&gt;environment variables&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Setting&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;REPLEX_HOST&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Url of your plex instance. ex: &lt;a href=&#34;http://0.0.0.0:32400&#34;&gt;http://0.0.0.0:32400&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;REPLEX_TOKEN&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;server admin plex token, needed for hero images. To find your token see: &lt;a href=&#34;https://support.plex.tv/articles/204059436-finding-an-authentication&#34;&gt;https://support.plex.tv/articles/204059436-finding-an-authentication&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;REPLEX_INTERLEAVE&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;Interleave home hubs. Collection hubs with the same name from different libraries are interleaved (combined) into one.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;REPLEX_EXCLUDE_WATCHED&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;If set to true, hide watched items for hubs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;REPLEX_HUB_RESTRICTIONS&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;Apply collections restrictions to their hub&#39;s. Plex does not apply restrictions to hubs, so you cannot have different collection hubs for users. this fixes that.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;REPLEX_DISABLE_CONTINUE_WATCHING&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;Disable/remove the continue watching row&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;REPLEX_DISABLE_USER_STATE&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;Remove watched badges from hub items. * does not work on all clients&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;REPLEX_DISABLE_LEAF_COUNT&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;Remove episode count label from show artwork.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;REPLEX_HERO_ROWS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Comma seperated list of hubidentifiers to make builtin hubs hero style. For custom collections see &lt;a href=&#34;https://raw.githubusercontent.com/lostb1t/replex/main/#-hub-style&#34;&gt;Hhb style&lt;/a&gt;. Options are: &lt;br&gt;home.movies.recent&lt;br&gt;movies.recent &lt;br&gt;movie.recentlyadded&lt;br&gt;movie.topunwatched&lt;br&gt;movie.recentlyviewed&lt;br&gt;hub.movie.recentlyreleased&lt;br&gt;movie.recentlyreleased&lt;br&gt;home.television.recent&lt;br&gt;tv.recentlyadded&lt;br&gt;tv.toprated&lt;br&gt;tv.inprogress&lt;br&gt;tv.recentlyaired&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;REPLEX_FORCE_MAXIMUM_QUALITY&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;This will force clients to use the maximum quality. Meaning that if a client requests anything other then the maximum quality this will be ignored and the maximum quality (direct play/stream when server allows for original) is used instead. This doesn&#39;t prevent transcoding. It only sets the bitrate to original quality. So if a client needs a different codec, container or audio it should still transcode.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;REPLEX_FORCE_DIRECT_PLAY_FOR&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;Force direct play for the given resolutions. Options are &#34;4k&#34;, &#34;1080&#34; and &#34;720&#34;. This wil result in an error message if the client does not support directplay. Not recommended&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;REPLEX_VIDEO_TRANSCODE_FALLBACK_FOR&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If the selected media triggers a video transcode. Fallback to another version of the media. Only triggers on video transcoding. Remuxing is still allowed. &lt;br&gt;Options are &#34;4k&#34; and &#34;1080&#34;. &lt;br&gt; &lt;br&gt; Example if REPLEX_VIDEO_TRANSCODE_FALLBACK_FOR is set to &#34;4k&#34; then 4k transcodes will fallback to another version if avaiable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;REPLEX_AUTO_SELECT_VERSION&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;If you have multiple versions of a media item then this setting will choose the one thats closest to the client resolution. So a 1080p TV will get the 1080P version while 4k gets the 4k version. A user can still override this by selecting a different version from the client.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;REPLEX_DISABLE_RELATED&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;See: &lt;a href=&#34;https://github.com/lostb1t/replex/issues/26&#34;&gt;https://github.com/lostb1t/replex/issues/26&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;REPLEX_REDIRECT_STREAMS&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;Redirect streams to another endpoint.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;REPLEX_REDIRECT_STREAMS_HOST&lt;/td&gt; &#xA;   &lt;td&gt;REPLEX_HOST&lt;/td&gt; &#xA;   &lt;td&gt;Alternative streams endpoint&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;REPLEX_CACHE_TTL&lt;/td&gt; &#xA;   &lt;td&gt;1800&lt;/td&gt; &#xA;   &lt;td&gt;Time to live for general caches in seconds. Set to 0 to disable (higly recommended to keep enabled besides testing purposes).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Interleaved rows&lt;/h2&gt; &#xA;&lt;p&gt;Collections hubs with the same name from different libraries will be merged into one on the home screen. So an collection hub named &#34;Trending&#34; in the Movie library will be merged with an collection named &#34;Trending&#34; from a shows library on home.&lt;/p&gt; &#xA;&lt;p&gt;Note, this does not work on builtin hubs. As i personally dont see then need of mixing those. You can recreate the builtin rows with smart collections if you wish to have that functionality, or with PMM ofcourse.&lt;/p&gt; &#xA;&lt;h2&gt;Hub style&lt;/h2&gt; &#xA;&lt;p&gt;For custom collections you can change the hub style to hero by setting the label &#34;REPLEXHERO&#34; on an collection.&lt;/p&gt; &#xA;&lt;p&gt;For built in rows you can use the hubidentifier in the &lt;code&gt;REPLEX_HERO_ROWS&lt;/code&gt;. See the setting for available know options.&lt;/p&gt; &#xA;&lt;p&gt;Note: hero style elements uses coverart from plex. Banner or background is not used. Note: Hero elements are not supported for continue watching by plex. You can replicate this functionality by creating a smart collection which filters on in progress and settinf REPLEX_DISABLE_CONTINUE_WATCHING&lt;/p&gt; &#xA;&lt;h2&gt;Exclude watched items&lt;/h2&gt; &#xA;&lt;p&gt;If you want to hide watched items from your hubs, you can set &lt;code&gt;REPLEX_EXCLUDE_WATCHED&lt;/code&gt; to true. Alternatively, you can add the label &#34;REPLEX_EXCLUDE_WATCHED&#34; to a collection to exclude watched items from that collection only.&lt;/p&gt; &#xA;&lt;h2&gt;Remote access (force clients to use the proxy)&lt;/h2&gt; &#xA;&lt;p&gt;Because this app sits before Plex the builtin remote access (and auto SSL) will not work and needs to be disabled.&lt;/p&gt; &#xA;&lt;p&gt;For testing purposes you can access through the browser at http://[replexip]:[replexport] (ex: &lt;a href=&#34;http://localhost:3001&#34;&gt;http://localhost:3001&lt;/a&gt;) But if you want other clients to connect to replex you need to setup a reverse proxy with a domain and preferable ssl.&lt;/p&gt; &#xA;&lt;p&gt;A few easy to setup reverse proxys are: &lt;a href=&#34;https://caddyserver.com&#34;&gt;https://caddyserver.com&lt;/a&gt; or &lt;a href=&#34;https://nginxproxymanager.com&#34;&gt;https://nginxproxymanager.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Once you have your domain hooked up to replex add your replex url to &#39;Custom server access URLs&#39; field under network. and lastly disable remote access under remote access.&lt;/p&gt; &#xA;&lt;p&gt;Clear you clients caches to force plex reloading the custom server url&lt;/p&gt; &#xA;&lt;p&gt;Note: SSL is highly suggested, some clients default to not allowing insecure connections. And some clients dont even support insecure connections (app.plex.tv)&lt;/p&gt; &#xA;&lt;h2&gt;Reverse proxy&lt;/h2&gt; &#xA;&lt;p&gt;There should be no need for this but if you have a reverse proxy running and dont want to proxy streaming through plex then you can route the following paths and it subpaths directly to plex.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;/video/:/transcode/universal/session&lt;/li&gt; &#xA; &lt;li&gt;/library/parts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Redirect streams&lt;/h2&gt; &#xA;&lt;p&gt;If you have for example an appbox it might not be ideal to stream media through replex. As that will take a lot of network resources. You can redirect streams by enabling &lt;code&gt;REPLEX_REDIRECT_STREAMS&lt;/code&gt; and optionally set &lt;code&gt;REPLEX_REDIRECT_STREAMS_HOST&lt;/code&gt; if it needs to be different from REPLEX_HOST&lt;/p&gt; &#xA;&lt;p&gt;Note: Plex doesnt handle redirects wel, and will not remeber it. So every chuck of a stream will first hit replex and then gets redirected to actuall download that chuck from the redirect url. So a bit wastefull&lt;/p&gt; &#xA;&lt;h2&gt;Known limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;hero hubs on Android devices dont load more content. so hero hubs have a maximum of 100 items on Android.&lt;/li&gt; &#xA; &lt;li&gt;On android mobile hero elements in libraries are slightly cutoff. This is plex limitation.&lt;/li&gt; &#xA; &lt;li&gt;when exclude_watched is true a maximum item limit per library is opposed of 250 items. So if you have a mixed row of 2 libraries the max results of that row will be 500 items.&lt;/li&gt; &#xA; &lt;li&gt;disable_user_state: For movies this works in the webapp. Shows work accross clients&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Help it doesnt work!&lt;/h2&gt; &#xA;&lt;h3&gt;Replex works on on app.plex.tv but not on my clients&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;disable GDM in plex and make sure plex is not directly acccesible. you can use this url to check what servers plex communicates to your clients: &lt;a href=&#34;https://clients.plex.tv/api/v2/resources?includeIPv6=1&amp;amp;includeRelay=1&amp;amp;X-Plex-Language=en-NL&amp;amp;X-Plex-Token=YOURTOKEN&amp;amp;X-Plex-Client-Identifier=1234&#34;&gt;https://clients.plex.tv/api/v2/resources?includeIPv6=1&amp;amp;includeRelay=1&amp;amp;X-Plex-Language=en-NL&amp;amp;X-Plex-Token=YOURTOKEN&amp;amp;X-Plex-Client-Identifier=1234&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Try to clear the cache on the client. Old plex domains might linger.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>teloxide/teloxide</title>
    <updated>2024-07-17T01:34:30Z</updated>
    <id>tag:github.com,2024-07-17:/teloxide/teloxide</id>
    <link href="https://github.com/teloxide/teloxide" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🤖 An elegant Telegram bots framework for Rust&lt;/p&gt;&lt;hr&gt;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teloxide/teloxide/master/MIGRATION_GUIDE.md#011---012&#34;&gt;v0.11 -&amp;gt; v0.12 migration guide &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/teloxide/teloxide/master/media/teloxide-logo.png&#34; width=&#34;250&#34;&gt; &#xA; &lt;h1&gt;&lt;code&gt;teloxide&lt;/code&gt;&lt;/h1&gt; &#xA; &lt;a href=&#34;https://docs.rs/teloxide/&#34;&gt; &lt;img src=&#34;https://docs.rs/teloxide/badge.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/teloxide/teloxide/actions&#34;&gt; &lt;img src=&#34;https://github.com/teloxide/teloxide/workflows/Continuous%20integration/badge.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://crates.io/crates/teloxide&#34;&gt; &lt;img src=&#34;https://img.shields.io/crates/v/teloxide.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://core.telegram.org/bots/api&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/API%20coverage-Up%20to%206.8%20(inclusively)-green.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://t.me/teloxide&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/support-t.me%2Fteloxide-blueviolet&#34;&gt; &lt;/a&gt; &#xA; &lt;p&gt;A full-featured framework that empowers you to easily build &lt;a href=&#34;https://telegram.org/blog/bot-revolution&#34;&gt;Telegram bots&lt;/a&gt; using &lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt;. It handles all the difficult stuff so you can focus only on your business logic.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Highlights&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Declarative design.&lt;/strong&gt; &lt;code&gt;teloxide&lt;/code&gt; is based upon &lt;a href=&#34;https://github.com/teloxide/dptree&#34;&gt;&lt;code&gt;dptree&lt;/code&gt;&lt;/a&gt;, a functional &lt;a href=&#34;https://en.wikipedia.org/wiki/Chain-of-responsibility_pattern&#34;&gt;chain of responsibility&lt;/a&gt; pattern that allows you to express pipelines of message processing in a highly declarative and extensible style.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Feature-rich.&lt;/strong&gt; You can use both long polling and webhooks, configure an underlying HTTPS client, set a custom URL of a Telegram API server, do graceful shutdown, and much more.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Simple dialogues.&lt;/strong&gt; Our dialogues subsystem is simple and easy-to-use, and, furthermore, is agnostic of how/where dialogues are stored. For example, you can just replace a one line to achieve &lt;a href=&#34;https://en.wikipedia.org/wiki/Persistence_(computer_science)&#34;&gt;persistence&lt;/a&gt;. Out-of-the-box storages include &lt;a href=&#34;https://redis.io/&#34;&gt;Redis&lt;/a&gt; and &lt;a href=&#34;https://www.sqlite.org&#34;&gt;Sqlite&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Strongly typed commands.&lt;/strong&gt; Define bot commands as an &lt;code&gt;enum&lt;/code&gt; and teloxide will parse them automatically — just like JSON structures in &lt;a href=&#34;https://github.com/serde-rs/json&#34;&gt;&lt;code&gt;serde-json&lt;/code&gt;&lt;/a&gt; and command-line arguments in &lt;a href=&#34;https://github.com/TeXitoi/structopt&#34;&gt;&lt;code&gt;structopt&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setting up your environment&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rustup.rs/&#34;&gt;Download Rust&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Create a new bot using &lt;a href=&#34;https://t.me/botfather&#34;&gt;@Botfather&lt;/a&gt; to get a token in the format &lt;code&gt;123456789:blablabla&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Initialise the &lt;code&gt;TELOXIDE_TOKEN&lt;/code&gt; environmental variable to your token:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Unix-like&#xA;$ export TELOXIDE_TOKEN=&amp;lt;Your token here&amp;gt;&#xA;&#xA;# Windows command line&#xA;$ set TELOXIDE_TOKEN=&amp;lt;Your token here&amp;gt;&#xA;&#xA;# Windows PowerShell&#xA;$ $env:TELOXIDE_TOKEN=&amp;lt;Your token here&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Make sure that your Rust compiler is up to date (&lt;code&gt;teloxide&lt;/code&gt; currently requires rustc at least version 1.70):&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# If you&#39;re using stable&#xA;$ rustup update stable&#xA;$ rustup override set stable&#xA;&#xA;# If you&#39;re using nightly&#xA;$ rustup update nightly&#xA;$ rustup override set nightly&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Run &lt;code&gt;cargo new my_bot&lt;/code&gt;, enter the directory and put these lines into your &lt;code&gt;Cargo.toml&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[dependencies]&#xA;teloxide = { version = &#34;0.12&#34;, features = [&#34;macros&#34;] }&#xA;log = &#34;0.4&#34;&#xA;pretty_env_logger = &#34;0.4&#34;&#xA;tokio = { version =  &#34;1.8&#34;, features = [&#34;rt-multi-thread&#34;, &#34;macros&#34;] }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API overview&lt;/h2&gt; &#xA;&lt;h3&gt;The dices bot&lt;/h3&gt; &#xA;&lt;p&gt;This bot replies with a dice to each received message:&lt;/p&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/teloxide/teloxide/master/crates/teloxide/examples/throw_dice.rs&#34;&gt;&lt;code&gt;examples/throw_dice.rs&lt;/code&gt;&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,no_run&#34;&gt;use teloxide::prelude::*;&#xA;&#xA;#[tokio::main]&#xA;async fn main() {&#xA;    pretty_env_logger::init();&#xA;    log::info!(&#34;Starting throw dice bot...&#34;);&#xA;&#xA;    let bot = Bot::from_env();&#xA;&#xA;    teloxide::repl(bot, |bot: Bot, msg: Message| async move {&#xA;        bot.send_dice(msg.chat.id).await?;&#xA;        Ok(())&#xA;    })&#xA;    .await;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/teloxide/teloxide/master/media/throw-dice.gif&#34; width=&#34;420&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;p&gt;Commands are strongly typed and defined declaratively, similar to how we define CLI using &lt;a href=&#34;https://docs.rs/structopt/0.3.9/structopt/&#34;&gt;structopt&lt;/a&gt; and JSON structures in &lt;a href=&#34;https://github.com/serde-rs/json&#34;&gt;serde-json&lt;/a&gt;. The following bot accepts these commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/username &amp;lt;your username&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/usernameandage &amp;lt;your username&amp;gt; &amp;lt;your age&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/help&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/teloxide/teloxide/master/crates/teloxide/examples/command.rs&#34;&gt;&lt;code&gt;examples/command.rs&lt;/code&gt;&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,no_run&#34;&gt;use teloxide::{prelude::*, utils::command::BotCommands};&#xA;&#xA;#[tokio::main]&#xA;async fn main() {&#xA;    pretty_env_logger::init();&#xA;    log::info!(&#34;Starting command bot...&#34;);&#xA;&#xA;    let bot = Bot::from_env();&#xA;&#xA;    Command::repl(bot, answer).await;&#xA;}&#xA;&#xA;#[derive(BotCommands, Clone)]&#xA;#[command(rename_rule = &#34;lowercase&#34;, description = &#34;These commands are supported:&#34;)]&#xA;enum Command {&#xA;    #[command(description = &#34;display this text.&#34;)]&#xA;    Help,&#xA;    #[command(description = &#34;handle a username.&#34;)]&#xA;    Username(String),&#xA;    #[command(description = &#34;handle a username and an age.&#34;, parse_with = &#34;split&#34;)]&#xA;    UsernameAndAge { username: String, age: u8 },&#xA;}&#xA;&#xA;async fn answer(bot: Bot, msg: Message, cmd: Command) -&amp;gt; ResponseResult&amp;lt;()&amp;gt; {&#xA;    match cmd {&#xA;        Command::Help =&amp;gt; bot.send_message(msg.chat.id, Command::descriptions().to_string()).await?,&#xA;        Command::Username(username) =&amp;gt; {&#xA;            bot.send_message(msg.chat.id, format!(&#34;Your username is @{username}.&#34;)).await?&#xA;        }&#xA;        Command::UsernameAndAge { username, age } =&amp;gt; {&#xA;            bot.send_message(msg.chat.id, format!(&#34;Your username is @{username} and age is {age}.&#34;))&#xA;                .await?&#xA;        }&#xA;    };&#xA;&#xA;    Ok(())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/teloxide/teloxide/master/media/command.gif&#34; width=&#34;420&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Dialogues management&lt;/h3&gt; &#xA;&lt;p&gt;A dialogue is typically described by an enumeration where each variant is one possible state of the dialogue. There are also &lt;em&gt;state handler functions&lt;/em&gt;, which may turn a dialogue from one state to another, thereby forming an &lt;a href=&#34;https://en.wikipedia.org/wiki/Finite-state_machine&#34;&gt;FSM&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Below is a bot that asks you three questions and then sends the answers back to you:&lt;/p&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/teloxide/teloxide/master/crates/teloxide/examples/dialogue.rs&#34;&gt;&lt;code&gt;examples/dialogue.rs&lt;/code&gt;&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,ignore&#34;&gt;use teloxide::{dispatching::dialogue::InMemStorage, prelude::*};&#xA;&#xA;type MyDialogue = Dialogue&amp;lt;State, InMemStorage&amp;lt;State&amp;gt;&amp;gt;;&#xA;type HandlerResult = Result&amp;lt;(), Box&amp;lt;dyn std::error::Error + Send + Sync&amp;gt;&amp;gt;;&#xA;&#xA;#[derive(Clone, Default)]&#xA;pub enum State {&#xA;    #[default]&#xA;    Start,&#xA;    ReceiveFullName,&#xA;    ReceiveAge {&#xA;        full_name: String,&#xA;    },&#xA;    ReceiveLocation {&#xA;        full_name: String,&#xA;        age: u8,&#xA;    },&#xA;}&#xA;&#xA;#[tokio::main]&#xA;async fn main() {&#xA;    pretty_env_logger::init();&#xA;    log::info!(&#34;Starting dialogue bot...&#34;);&#xA;&#xA;    let bot = Bot::from_env();&#xA;&#xA;    Dispatcher::builder(&#xA;        bot,&#xA;        Update::filter_message()&#xA;            .enter_dialogue::&amp;lt;Message, InMemStorage&amp;lt;State&amp;gt;, State&amp;gt;()&#xA;            .branch(dptree::case![State::Start].endpoint(start))&#xA;            .branch(dptree::case![State::ReceiveFullName].endpoint(receive_full_name))&#xA;            .branch(dptree::case![State::ReceiveAge { full_name }].endpoint(receive_age))&#xA;            .branch(&#xA;                dptree::case![State::ReceiveLocation { full_name, age }].endpoint(receive_location),&#xA;            ),&#xA;    )&#xA;    .dependencies(dptree::deps![InMemStorage::&amp;lt;State&amp;gt;::new()])&#xA;    .enable_ctrlc_handler()&#xA;    .build()&#xA;    .dispatch()&#xA;    .await;&#xA;}&#xA;&#xA;async fn start(bot: Bot, dialogue: MyDialogue, msg: Message) -&amp;gt; HandlerResult {&#xA;    bot.send_message(msg.chat.id, &#34;Let&#39;s start! What&#39;s your full name?&#34;).await?;&#xA;    dialogue.update(State::ReceiveFullName).await?;&#xA;    Ok(())&#xA;}&#xA;&#xA;async fn receive_full_name(bot: Bot, dialogue: MyDialogue, msg: Message) -&amp;gt; HandlerResult {&#xA;    match msg.text() {&#xA;        Some(text) =&amp;gt; {&#xA;            bot.send_message(msg.chat.id, &#34;How old are you?&#34;).await?;&#xA;            dialogue.update(State::ReceiveAge { full_name: text.into() }).await?;&#xA;        }&#xA;        None =&amp;gt; {&#xA;            bot.send_message(msg.chat.id, &#34;Send me plain text.&#34;).await?;&#xA;        }&#xA;    }&#xA;&#xA;    Ok(())&#xA;}&#xA;&#xA;async fn receive_age(&#xA;    bot: Bot,&#xA;    dialogue: MyDialogue,&#xA;    full_name: String, // Available from `State::ReceiveAge`.&#xA;    msg: Message,&#xA;) -&amp;gt; HandlerResult {&#xA;    match msg.text().map(|text| text.parse::&amp;lt;u8&amp;gt;()) {&#xA;        Some(Ok(age)) =&amp;gt; {&#xA;            bot.send_message(msg.chat.id, &#34;What&#39;s your location?&#34;).await?;&#xA;            dialogue.update(State::ReceiveLocation { full_name, age }).await?;&#xA;        }&#xA;        _ =&amp;gt; {&#xA;            bot.send_message(msg.chat.id, &#34;Send me a number.&#34;).await?;&#xA;        }&#xA;    }&#xA;&#xA;    Ok(())&#xA;}&#xA;&#xA;async fn receive_location(&#xA;    bot: Bot,&#xA;    dialogue: MyDialogue,&#xA;    (full_name, age): (String, u8), // Available from `State::ReceiveLocation`.&#xA;    msg: Message,&#xA;) -&amp;gt; HandlerResult {&#xA;    match msg.text() {&#xA;        Some(location) =&amp;gt; {&#xA;            let report = format!(&#34;Full name: {full_name}\nAge: {age}\nLocation: {location}&#34;);&#xA;            bot.send_message(msg.chat.id, report).await?;&#xA;            dialogue.exit().await?;&#xA;        }&#xA;        None =&amp;gt; {&#xA;            bot.send_message(msg.chat.id, &#34;Send me plain text.&#34;).await?;&#xA;        }&#xA;    }&#xA;&#xA;    Ok(())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/teloxide/teloxide/master/media/dialogue.gif&#34; width=&#34;420&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teloxide/teloxide/master/crates/teloxide/examples/&#34;&gt;More examples &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Tutorials&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://trkohler.com/posts/i-migrated-my-family-finance-bot-from-python-to-rust-because-i-am-tired-of-exceptions/&#34;&gt;&lt;em&gt;&#34;Migrating my family finance bot from Python to Rust (teloxide) because I am tired of exceptions (part 1)&#34;&lt;/em&gt;&lt;/a&gt; by Troy Köhler.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://trkohler.com/posts/migrating-my-family-finance-bot-from-python-to-rust-teloxide-part-2/&#34;&gt;&lt;em&gt;&#34;Migrating my family finance bot from Python to Rust (teloxide) [part 2]&#34;&lt;/em&gt;&lt;/a&gt; by Troy Köhler.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: Where I can ask questions?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/teloxide/teloxide/issues&#34;&gt;Issues&lt;/a&gt; is a good place for well-formed questions about the library design, enhancements, and bug reports.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/teloxide/teloxide/discussions&#34;&gt;GitHub Discussions&lt;/a&gt; is a place where you can ask us for help in a less formal manner.&lt;/li&gt; &#xA; &lt;li&gt;If you need quick help in real-time, you should ask a question in &lt;a href=&#34;https://t.me/teloxide&#34;&gt;our official Telegram group&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: Do you support the Telegram API for clients?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A: No, only the bots API.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: Can I use webhooks?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A: You can! &lt;code&gt;teloxide&lt;/code&gt; has a built-in support for webhooks in &lt;code&gt;dispatching::update_listeners::webhooks&lt;/code&gt; module. See how it&#39;s used in &lt;a href=&#34;https://raw.githubusercontent.com/teloxide/teloxide/master/crates/teloxide/examples/ngrok_ping_pong.rs&#34;&gt;&lt;code&gt;examples/ngrok_ping_pong_bot&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/teloxide/teloxide/master/crates/teloxide/examples/heroku_ping_pong.rs&#34;&gt;&lt;code&gt;examples/heroku_ping_pong_bot&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: Can I handle both callback queries and messages within a single dialogue?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A: Yes, see &lt;a href=&#34;https://raw.githubusercontent.com/teloxide/teloxide/master/crates/teloxide/examples/purchase.rs&#34;&gt;&lt;code&gt;examples/purchase.rs&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community bots&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to propose your own bot to our collection!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raine/tgreddit&#34;&gt;&lt;code&gt;raine/tgreddit&lt;/code&gt;&lt;/a&gt; — A bot that sends the top posts of your favorite subreddits to Telegram.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/magnickolas/remindee-bot&#34;&gt;&lt;code&gt;magnickolas/remindee-bot&lt;/code&gt;&lt;/a&gt; — Telegram bot for managing reminders.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/WaffleLapkin/crate_upd_bot&#34;&gt;&lt;code&gt;WaffleLapkin/crate_upd_bot&lt;/code&gt;&lt;/a&gt; — A bot that notifies about crate updates.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mattrighetti/group-activity-bot-rs&#34;&gt;&lt;code&gt;mattrighetti/GroupActivityBot&lt;/code&gt;&lt;/a&gt; — Telegram bot that keeps track of user activity in groups.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.com/alenpaul2001/aursearchbot&#34;&gt;&lt;code&gt;alenpaul2001/AurSearchBot&lt;/code&gt;&lt;/a&gt; — Telegram bot for searching in Arch User Repository (AUR).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ArtHome12/vzmuinebot&#34;&gt;&lt;code&gt;ArtHome12/vzmuinebot&lt;/code&gt;&lt;/a&gt; — Telegram bot for food menu navigate.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.com/studiedlist/eddie-bot&#34;&gt;&lt;code&gt;studiedlist/EddieBot&lt;/code&gt;&lt;/a&gt; — Chatting bot with several entertainment features.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.com/modos189/tg_blackbox_bot&#34;&gt;&lt;code&gt;modos189/tg_blackbox_bot&lt;/code&gt;&lt;/a&gt; — Anonymous feedback for your Telegram project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0xNima/spacecraft&#34;&gt;&lt;code&gt;0xNima/spacecraft&lt;/code&gt;&lt;/a&gt; — Yet another telegram bot to downloading Twitter spaces.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0xNima/Twideo&#34;&gt;&lt;code&gt;0xNima/Twideo&lt;/code&gt;&lt;/a&gt; — Simple Telegram Bot for downloading videos from Twitter via their links.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mattrighetti/libgen-bot-rs&#34;&gt;&lt;code&gt;mattrighetti/libgen-bot-rs&lt;/code&gt;&lt;/a&gt; — Telegram bot to interface with libgen.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zamazan4ik/npaperbot-telegram&#34;&gt;&lt;code&gt;zamazan4ik/npaperbot-telegram&lt;/code&gt;&lt;/a&gt; — Telegram bot for searching via C++ proposals.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/studentenherz/dlebot&#34;&gt;&lt;code&gt;studentenherz/dlebot&lt;/code&gt;&lt;/a&gt; — A bot to query definitions of words from the Spanish Language Dictionary.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fr0staman/fr0staman_bot&#34;&gt;&lt;code&gt;fr0staman/fr0staman_bot&lt;/code&gt;&lt;/a&gt; — Feature rich Telegram game-like bot with pigs 🐽.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/franciscofigueira/transferBot&#34;&gt;&lt;code&gt;franciscofigueira/transferBot&lt;/code&gt;&lt;/a&gt; — Telegram bot that notifies of crypto token transfers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Show bots using `teloxide` older than v0.6.0&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/mxseev/logram&#34;&gt;&lt;code&gt;mxseev/logram&lt;/code&gt;&lt;/a&gt; — Utility that takes logs from anywhere and sends them to Telegram.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/alexkonovalov/PedigreeBot&#34;&gt;&lt;code&gt;alexkonovalov/PedigreeBot&lt;/code&gt;&lt;/a&gt; — A Telegram bot for building family trees.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/Hermitter/tepe&#34;&gt;&lt;code&gt;Hermitter/tepe&lt;/code&gt;&lt;/a&gt; — A CLI to command a bot to send messages and files over Telegram.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/myblackbeard/basketball-betting-bot&#34;&gt;&lt;code&gt;myblackbeard/basketball-betting-bot&lt;/code&gt;&lt;/a&gt; — The bot lets you bet on NBA games against your buddies.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/dracarys18/grpmr-rs&#34;&gt;&lt;code&gt;dracarys18/grpmr-rs&lt;/code&gt;&lt;/a&gt; — Modular Telegram Group Manager Bot written in Rust.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/ArtHome12/cognito_bot&#34;&gt;&lt;code&gt;ArtHome12/cognito_bot&lt;/code&gt;&lt;/a&gt; — The bot is designed to anonymize messages to a group.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://codeberg.org/crapstones-bots/hsctt&#34;&gt;&lt;code&gt;crapstone/hsctt&lt;/code&gt;&lt;/a&gt; — A bot that converts HTTP status codes into text.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/teloxide/teloxide/network/dependents&#34;&gt;1600+ other public repositories using &lt;code&gt;teloxide&lt;/code&gt; &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/teloxide/teloxide/master/CONTRIBUTING.md&#34;&gt;&lt;code&gt;CONRIBUTING.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>