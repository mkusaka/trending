<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-29T01:49:20Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>phodal/aigc</title>
    <updated>2023-06-29T01:49:20Z</updated>
    <id>tag:github.com,2023-06-29:/phodal/aigc</id>
    <link href="https://github.com/phodal/aigc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;《构筑大语言模型应用：应用开发与架构设计》一本关于 LLM 在真实世界应用的开源电子书，介绍了大语言模型的基础知识和应用，以及如何构建自己的模型。其中包括Prompt的编写、开发和管理，探索最好的大语言模型能带来什么，以及LLM应用开发的模式和架构设计。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;构筑大语言模型应用：应用开发与架构设计&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;aka. Unlocking the Potential of Large Language Models: Real-World Use Cases&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;2023 年的上半年里，我（@phodal）和 Thoughtworks 的同事们（如：@&lt;a href=&#34;https://github.com/tianweiliu&#34;&gt;tianweiliu&lt;/a&gt;、@&lt;a href=&#34;https://github.com/teobler&#34;&gt;teobler&lt;/a&gt;、@&lt;a href=&#34;https://github.com/mutoe&#34;&gt;mutoe&lt;/a&gt; 等）、 开源社区的同伴们（如： 卷王@&lt;a href=&#34;https://github.com/CGQAQ&#34;&gt;CGQAQ&lt;/a&gt;、@&lt;a href=&#34;https://github.com/genffy&#34;&gt;genffy&lt;/a&gt;、 @&lt;a href=&#34;https://github.com/liruifengv&#34;&gt;liruifengv&lt;/a&gt; 等) 一起，创建了一系列的流行的或者不流行的开源项目。它们涉及了：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;LLM 能力的充分运用 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Prompt 编写：Prompt 学习与编写模式&lt;/li&gt; &#xA;   &lt;li&gt;Prompt 管理：Prompt 即代码&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;LLM 下的软件开发工序及应用架构设计 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;新的交互设计：Chat模式&lt;/li&gt; &#xA;   &lt;li&gt;大模型友好的工序：基于 AI 2.0 （ChatGPT + Copilot）如何去设计软件开发流程&lt;/li&gt; &#xA;   &lt;li&gt;LLM 应用架构的设计与落地：Unit Mesh&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;面向特定场景的 LLM 应用 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;基于开源模型构建自己的模型：特定场景的模型微调 + LLMOps&lt;/li&gt; &#xA;   &lt;li&gt;上下文工程（prompt 工程）：LLM 应用的核心&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;围绕于上述的一系列内容，我们也在思考软件开发能给我们带来了什么。所以，我重新整理了过去半年的一些思考、文章，重新编写了这本开源电子书，希望能够帮助到大家。&lt;/p&gt; &#xA;&lt;p&gt;关注我的微信公众号（搜索 phodal-weixin），获得更多及时的更新：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/phodal/aigc/master/src/images/qrcode.jpg&#34; alt=&#34;微信公众号&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;我们发起的相关开源项目如下（包括但是不限于）：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;名称&lt;/th&gt; &#xA;   &lt;th&gt;描述&lt;/th&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;Stars&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/prompt-engineering/understand-prompt&#34;&gt;理解 Prompt&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;基于编程、绘画、写作的 AI 探索与总结。&lt;/td&gt; &#xA;   &lt;td&gt;文档&lt;/td&gt; &#xA;   &lt;td&gt;3k&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/prompt-engineering/prompt-patterns&#34;&gt;Prompt 编写模式&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;如何将思维框架赋予机器，以设计模式的形式来思考 prompt。&lt;/td&gt; &#xA;   &lt;td&gt;文档&lt;/td&gt; &#xA;   &lt;td&gt;2.1 k&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/prompt-engineering/click-prompt&#34;&gt;ClickPrompt&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;用于一键轻松查看、分享和执行您的 Prompt。&lt;/td&gt; &#xA;   &lt;td&gt;应用&lt;/td&gt; &#xA;   &lt;td&gt;1.6k&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/prompt-engineering/chat-visual-novel&#34;&gt;ChatVisualNovel&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;基于ChatGPT的定制化视觉小说引擎&lt;/td&gt; &#xA;   &lt;td&gt;应用&lt;/td&gt; &#xA;   &lt;td&gt;77&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/prompt-engineering/chat-flow&#34;&gt;ChatFlow&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;打造个性化 ChatGPT 流程，构建自动化之路。&lt;/td&gt; &#xA;   &lt;td&gt;框架&lt;/td&gt; &#xA;   &lt;td&gt;570&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/unit-mesh/unit-mesh&#34;&gt;Unit Mesh&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;基于 AI 为核心的软件 2.0 思想的软件架构。&lt;/td&gt; &#xA;   &lt;td&gt;架构&lt;/td&gt; &#xA;   &lt;td&gt;121&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/unit-mesh/unit-minions&#34;&gt;Unit Minions&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;AI 研发提效研究：自己动手训练 LoRA&lt;/td&gt; &#xA;   &lt;td&gt;微调教程、指南、数据集&lt;/td&gt; &#xA;   &lt;td&gt;712&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/unit-mesh/unit-runtime&#34;&gt;Unit Runtime&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;一个 ChatGPT 等 AI 代码的运行环境，可一键启动并实时交互，帮助您快速构建和测试 AI 代码。&lt;/td&gt; &#xA;   &lt;td&gt;基础设施&lt;/td&gt; &#xA;   &lt;td&gt;89&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/unit-mesh/devti&#34;&gt;DevTi&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;基于 LLM 的微调来提供全面智能化解决方案，助力开发人员高效完成开发任务，以实现自动化用户任务拆解、用户故事生成、自动化代码生成、自动化测试生成等等。&lt;/td&gt; &#xA;   &lt;td&gt;微调代码&lt;/td&gt; &#xA;   &lt;td&gt;102&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/unit-mesh/auto-dev&#34;&gt;AutoDev&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;一款 Intellij IDEA 的 LLM/AI 辅助编程插件。AutoDev 能够与您的需求管理系统（例如 Jira、Trello、Github Issue 等）直接对接。&lt;/td&gt; &#xA;   &lt;td&gt;IDEA 插件&lt;/td&gt; &#xA;   &lt;td&gt;207&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/archguard/co-mate&#34;&gt;ArchGuard Co-mate&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;基于人工智能技术的架构副驾驶、设计和治理工具&lt;/td&gt; &#xA;   &lt;td&gt;架构协同应用&lt;/td&gt; &#xA;   &lt;td&gt;25&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;我们在 QCon 上的演讲：&lt;a href=&#34;https://qcon.infoq.cn/2023/guangzhou/presentation/5319&#34;&gt;演讲：探索软件开发新工序：LLM 赋能研发效能提升&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;LLM（如 ChatGPT + GitHub Copilot）作为一种创新的工具组合，为我们带来了全新的机遇。它能够帮助业务人员和开发者在需求、架构、编码、测试等环节提高效率和质量，实现从设计到验证的端到端流程。在本次分享中，我将向大家介绍 LLM 在研发效能方面的应用场景和实践案例，展示它是如何在各个环节中发挥作用的。同时，我们还将分享如何构建私有化的 LLM 工程化方式，使其更好地适应组织的需求。欢迎对 LLM + 研发效能感兴趣的朋友们参加本次分享，与我们一起探讨研发效能的未来。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;我们在 Bilibili 上的大语言模型微调相关的视频：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;LLaMA 系列在线视频： 《&lt;a href=&#34;https://www.bilibili.com/video/BV1Rh411u74H/&#34;&gt;代码辅助生成&lt;/a&gt;》 、《&lt;a href=&#34;https://www.bilibili.com/video/BV1jg4y1G7Xc/&#34;&gt;测试代码生成&lt;/a&gt;》 、《&lt;a href=&#34;https://www.bilibili.com/video/BV1Us4y1N7rd/&#34;&gt;详细需求生成&lt;/a&gt;》 、《&lt;a href=&#34;https://www.bilibili.com/video/BV1uv4y1H7bg/&#34;&gt;文本转 SQL&lt;/a&gt;》&lt;/li&gt; &#xA; &lt;li&gt;ChatGLM 系列在线视频： 《&lt;a href=&#34;https://www.bilibili.com/video/BV1fv4y1n7Y3/&#34;&gt;LoRA 大比拼：ChatGLM vs LLaMA，谁更会写需求文档？&lt;/a&gt;》&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;欢迎大家一起来参与我们的开源项目，一起来探索 LLM + 软件开发的未来。&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>misprit7/computerraria</title>
    <updated>2023-06-29T01:49:20Z</updated>
    <id>tag:github.com,2023-06-29:/misprit7/computerraria</id>
    <link href="https://github.com/misprit7/computerraria" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fully compliant RISC-V computer made inside the game Terraria&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &#xA; &lt;picture&gt;&#xA;  &lt;img src=&#34;https://raw.githubusercontent.com/misprit7/computerraria/main/doc/img/logo.png&#34; height=&#34;400&#34;&gt;&#xA; &lt;/picture&gt; &lt;br&gt; Computerraria &lt;/h1&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt; A fully compliant RISC-V computer inside Terraria &lt;/h2&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt; Video explanation: https://youtu.be/zXPiqk0-zDY &lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/misprit7/computerraria/actions/workflows/in-game-tests.yml&#34;&gt; &lt;img src=&#34;https://github.com/misprit7/computerraria/actions/workflows/in-game-tests.yml/badge.svg/&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/misprit7/computerraria/actions/workflows/rust-tests.yml&#34;&gt; &lt;img src=&#34;https://github.com/misprit7/computerraria/actions/workflows/rust-tests.yml/badge.svg/&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;Pitch&lt;/h1&gt; &#xA;&lt;p&gt;There are two fundamentally competing forces when it comes to computer speed. The first, and most famous, is Moore&#39;s law, where physical transistor densities scale exponentially. The second is the inevitable growth of software bloat that runs on top of increasingly modern processors. There&#39;s a kind of equilibrium between these two competing beasts, ensuring that a user always manages to get at least a split second of mindfulness while staring at a frozen screen whenever attempting to open the latest app.&lt;/p&gt; &#xA;&lt;p&gt;This project is an attempt to score a decisive rout in this ongoing battle in favor of the &lt;em&gt;programmer&lt;/em&gt;. By emulating a complete rv32i instruction set inside the wiring system of &lt;a href=&#34;https://www.terraria.org/&#34;&gt;Terraria&lt;/a&gt;, we push back speeds to the early 70s era, tossing the ball firmly back into the court of silicon engineer without losing any software functionality.&lt;/p&gt; &#xA;&lt;h1&gt;Overview&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://easyzoom.com/image/412333&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/misprit7/computerraria/main/doc/img/poster-small.png&#34;&gt; Click to see navigable image &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Despite what the pitch may lead one to believe the goal of this project is to maximize the compliance and processing ability of the in game cpu. This is only possible with the help of an accelerator mod, which maintains full compatibility with the vanilla wiring system but reimplements it in a much more efficient manner:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/misprit7/WireHead&#34;&gt;WireHead&lt;/a&gt; - A wiring accelerator and headless control mod&lt;/p&gt; &#xA;&lt;p&gt;With this installed, the current specs of the computer are as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clock speed: ~5kHz&lt;/li&gt; &#xA; &lt;li&gt;Ram: 96kb&lt;/li&gt; &#xA; &lt;li&gt;Instruction set: rv32i&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As an example of what it can do, here is Pong, running purely on the in-game cpu (see &lt;a href=&#34;https://raw.githubusercontent.com/misprit7/computerraria/main/app/pong/src/main.rs&#34;&gt;app/pong/src/main.rs&lt;/a&gt; for implementation):&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/33139843/229342342-de4708e1-7467-4f99-834b-3d0fb28d0858.mp4&#34;&gt;https://user-images.githubusercontent.com/33139843/229342342-de4708e1-7467-4f99-834b-3d0fb28d0858.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Setup&lt;/h1&gt; &#xA;&lt;p&gt;Note that currently only Linux is fully supported, and only parts of this have been tested on Windows. However I&#39;ve left some steps for anyone who wants to try getting Windows working, in theory using wsl it should be fairly straightforward and things should be identical.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;For a comprehensive list of everything that is needed to run all aspects of this project, see the &lt;a href=&#34;https://raw.githubusercontent.com/misprit7/computerraria/main/docker/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt;. However, to develop and run applications for the computer all you really need is a working Cargo/rustc installation, install it &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;here&lt;/a&gt; or through your package manager.&lt;/p&gt; &#xA;&lt;h2&gt;Setup Process&lt;/h2&gt; &#xA;&lt;p&gt;Navigate to where you want to keep this project and clone it. Copy computer.wld to your tModLoader world path. Depending on your platform, this is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Windows: Documents\My Games\Terraria\ModLoader\Worlds&#xA;Linux: ~/.local/share/Terraria/tModLoader/Worlds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Linux you can automate copying back and forth like this with the &lt;code&gt;copy-world.sh&lt;/code&gt; script with either the &lt;code&gt;--to&lt;/code&gt; (copy to world folder) or &lt;code&gt;--from&lt;/code&gt; (copy from world folder) flags.&lt;/p&gt; &#xA;&lt;p&gt;Next, navigate to the mod sources folder and clone &lt;a href=&#34;https://github.com/misprit7/WireHead&#34;&gt;WireHead&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#Windows&#xA;cd &#34;%userprofile%\Documents\My Games\Terraria\ModLoader\ModSources&#34; &amp;amp;&amp;amp; git clone https://github.com/misprit7/WireHead.git&#xA;&#xA;#Linux&#xA;cd &#34;~/.local/share/Terraria/tModLoader/ModSources&#34; &amp;amp;&amp;amp; git clone https://github.com/misprit7/WireHead.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Prepare the binary you wish to run. For example for pong compile the rust app and copy the binary to a more convenient path:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd &amp;lt;path to computerraria&amp;gt;/app/pong&#xA;cargo rb&#xA;./copy-bin.sh /tmp/pong.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start &lt;a href=&#34;https://store.steampowered.com/app/1281930/tModLoader/&#34;&gt;tModLoader&lt;/a&gt;, and from the main menu go to Workshop-&amp;gt;Develop and click on the Build button next to WireHead. For convenience I&#39;d also recommend installing Cheat Sheet and HERO&#39;s Mod from the Download Mods section of the workshop if you haven&#39;t already. Then open the new world you copied earlier in game. In game type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/bin write /tmp/pong.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Currently the NPCs that run the CPU clock are too far away to spawn immediately, this is a bug and should be fixed soon. As a workaround, go through the blue teleporter shown below, fly upwards a bit, come back down and go back through the same teleporter.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/misprit7/computerraria/main/doc/img/control-panel.png&#34; alt=&#34;Control Panel&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;After this workaround is done, press the first two of the three levers on the far right to start the program. Go through the orange teleporter to arrive at the screen area. Pong should be running and is controllable by the controller beneath the screen (use HERO&#39;s Mod&#39;s camera lock to see the screen and controls at the same time).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/misprit7/computerraria/main/doc/img/pong-still.png&#34; alt=&#34;Pong&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Docker&lt;/h2&gt; &#xA;&lt;p&gt;For advanced CI/headless usage you can use the docker image:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/misprit7/computerraria&#34;&gt;Docker Image&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you already have docker installed this can be pulled with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull misprit7/computerraria&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then start the container with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it misprit7/computerraria&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This image already has all tooling installed so you should be able to build everything.&lt;/p&gt; &#xA;&lt;h1&gt;File Structure&lt;/h1&gt; &#xA;&lt;p&gt;The major relevant parts of the project are as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.&#xA;├── app/&#xA;│   ├── tdriver/&#xA;│&amp;nbsp;&amp;nbsp; └── template/&#xA;├── computer.wld&#xA;├── doc/&#xA;├── docker/&#xA;├── test/&#xA;└── tinterface/&#xA;    ├── bin/&#xA;    └── tinterface/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;app/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Higher level applications to be run on the computer, not including compliance tests. Currently all in rust but could also easily be in C.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;app/tdriver/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Driver API for interacting cpu from rust, mostly extremely low level startup code and graphics drivers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;app/template/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Template for new rust projects that implements minimal tdriver&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;computer.wld&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The actual world file. This is technically a binary file, but given the context of the project it acts much more like source code given that it is edited manually and compresses extremely well. This generally isn&#39;t edited in place, it&#39;s copied back and forth to the user installation with &lt;a href=&#34;https://raw.githubusercontent.com/misprit7/computerraria/main/copy_world.sh&#34;&gt;copy-world.sh&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;doc/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Documentation/notes for the project&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;docker/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Files required to build docker image for CI.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;test/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;All automated tests written for the CPU. These are mostly handled through &lt;a href=&#34;https://github.com/riscv-software-src/riscof&#34;&gt;riscof&lt;/a&gt;. This consists of both the computerraria plugin as well as a reference plugin (&lt;a href=&#34;https://raw.githubusercontent.com/misprit7/computerraria/main/test/sail_cSim/&#34;&gt;sail_cSim&lt;/a&gt;) to compare the results to.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;tinterface/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Interfaces programmatically with running Terraria instance. This consists of both a python module as well as a command line wrapper to upload binaries, start execution and manipulate other fine grain controls without needing a GUI.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mycelial/mycelite</title>
    <updated>2023-06-29T01:49:20Z</updated>
    <id>tag:github.com,2023-06-29:/mycelial/mycelite</id>
    <link href="https://github.com/mycelial/mycelite" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mycelite is a SQLite extension that allows you to synchronize changes from one instance of SQLite to another.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/mycelial/mycelite/actions/workflows/tests.yml/badge.svg?sanitize=true&#34; alt=&#34;tests&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Mycelite&lt;/h1&gt; &#xA;&lt;h2&gt;What is Mycelite?&lt;/h2&gt; &#xA;&lt;p&gt;Mycelite is a SQLite extension that allows you to synchronize changes from one instance of SQLite to another. Currently, it only supports one-way synchronization, but eventually, it will support two-way synchronization.&lt;/p&gt; &#xA;&lt;p&gt;Why would you want to synchronize multiple SQLite databases? Read on to learn.&lt;/p&gt; &#xA;&lt;h3&gt;A new type of application&lt;/h3&gt; &#xA;&lt;p&gt;There is a new type of application called local-first, which combines many of the best features from both local and client/server applications.&lt;/p&gt; &#xA;&lt;h3&gt;What does local-first offer?&lt;/h3&gt; &#xA;&lt;p&gt;With local-first applications, you get the speed and responsiveness of a local application, but at the same time, you get many of the desirable features from client/server systems.&lt;/p&gt; &#xA;&lt;h3&gt;What do local-first applications look like?&lt;/h3&gt; &#xA;&lt;p&gt;A good example of a local-first application is &lt;a href=&#34;https://github.com/actualbudget/actual&#34;&gt;Actual Budget&lt;/a&gt;, an open-source personal finance application.&lt;/p&gt; &#xA;&lt;p&gt;What makes Actual Budget different from its competitors?&lt;/p&gt; &#xA;&lt;p&gt;First of all, it&#39;s very fast because all the application data is on the local device - in a SQLite database - but what&#39;s most interesting about this app is that it works on multiple devices. In other words, it has apps for iOS, Android, Windows, Mac and the Web and it allows you to make concurrent changes on multiple devices and synchronize those changes to all your devices.&lt;/p&gt; &#xA;&lt;h3&gt;Why aren&#39;t more developers creating local-first applications?&lt;/h3&gt; &#xA;&lt;p&gt;Actual Budget is a good example of a local-first application, but it wasn&#39;t very easy to build. The authors had to write a bunch of synchronization-related code, that implements and uses &lt;a href=&#34;https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type&#34;&gt;CRDTs&lt;/a&gt;, and this start-from-scratch approach just isn&#39;t practical for most situations. Building local-first applications today is too difficult, but we&#39;re going to change that.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://mycelial.com/docs/get-started/quick-start&#34;&gt;Documentation&lt;/a&gt;&lt;/h2&gt;</summary>
  </entry>
</feed>