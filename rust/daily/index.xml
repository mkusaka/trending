<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-12T01:35:58Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>penberg/limbo</title>
    <updated>2024-05-12T01:35:58Z</updated>
    <id>tag:github.com,2024-05-12:/penberg/limbo</id>
    <link href="https://github.com/penberg/limbo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Limbo is a work-in-progress, in-process OLTP database management system, compatible with SQLite.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/penberg/limbo/main/limbo.png&#34; alt=&#34;Limbo&#34; width=&#34;150&#34;&gt; &#xA; &lt;h1&gt;Limbo&lt;/h1&gt; &#xA; &lt;p&gt; &lt;a href=&#34;https://github.com/penberg/limbo/actions&#34;&gt; &lt;img src=&#34;https://github.com/penberg/limbo/actions/workflows/rust.yml/badge.svg?sanitize=true&#34; alt=&#34;Build badge&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Limbo is a work-in-progress, in-process OLTP database management system, compatible with SQLite.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In-process OLTP database engine library&lt;/li&gt; &#xA; &lt;li&gt;Asynchronous I/O support with &lt;code&gt;io_uring&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;SQLite compatibility &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;SQL dialect support (&lt;a href=&#34;https://raw.githubusercontent.com/penberg/limbo/main/docs/sqlite-compat.md&#34;&gt;&lt;em&gt;wip&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;File format support (&lt;em&gt;read-only&lt;/em&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;SQLite C API (&lt;em&gt;wip&lt;/em&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;JavaScript/WebAssembly bindings (&lt;em&gt;wip&lt;/em&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Limbo is currently read-only. You can either use the &lt;code&gt;sqlite3&lt;/code&gt; program to create a database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ sqlite3 database.db&#xA;SQLite version 3.42.0 2023-05-16 12:36:15&#xA;Enter &#34;.help&#34; for usage hints.&#xA;sqlite&amp;gt; CREATE TABLE users (id INT PRIMARY KEY, username TEXT);&#xA;sqlite&amp;gt; INSERT INTO users VALUES (1, &#39;alice&#39;);&#xA;sqlite&amp;gt; INSERT INTO users VALUES (2, &#39;bob&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or use the testing script to generate one for you:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;./testing/gen-database.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then start the Limbo shell with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cargo run database.db&#xA;Welcome to Limbo SQL shell!&#xA;&amp;gt; SELECT * FROM users LIMIT 1;&#xA;|1|Cody|Miller|mhurst@example.org|525.595.7319x21268|33667 Shaw Extension Suite 104|West Robert|VA|45161|`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Developing&lt;/h2&gt; &#xA;&lt;p&gt;Run tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;cargo test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Test coverage report:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo tarpaulin -o html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run benchmarks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;cargo bench&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run benchmarks and generate flamegraphs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;echo -1 | sudo tee /proc/sys/kernel/perf_event_paranoid&#xA;cargo bench --bench benchmark -- --profile-time=5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Publications&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pekka Enberg, Sasu Tarkoma, Jon Crowcroft Ashwin Rao (2024). Serverless Runtime / Database Co-Design With Asynchronous I/O. In &lt;em&gt;EdgeSys ‘24&lt;/em&gt;. &lt;a href=&#34;https://penberg.org/papers/penberg-edgesys24.pdf&#34;&gt;[PDF]&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Pekka Enberg, Sasu Tarkoma, and Ashwin Rao (2023). Towards Database and Serverless Runtime Co-Design. In &lt;em&gt;CoNEXT-SW ’23&lt;/em&gt;. [&lt;a href=&#34;https://penberg.org/papers/penberg-conext-sw-23.pdf&#34;&gt;PDF&lt;/a&gt;] [&lt;a href=&#34;https://penberg.org/papers/penberg-conext-sw-23-slides.pdf&#34;&gt;Slides&lt;/a&gt;]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://github.com/penberg/limbo/raw/main/LICENSE.md&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Contribution&lt;/h3&gt; &#xA;&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in Limbo by you, shall be licensed as MIT, without any additional terms or conditions.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tembo-io/pgmq</title>
    <updated>2024-05-12T01:35:58Z</updated>
    <id>tag:github.com,2024-05-12:/tembo-io/pgmq</id>
    <link href="https://github.com/tembo-io/pgmq" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A lightweight message queue. Like AWS SQS and RSMQ but on Postgres.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Postgres Message Queue (PGMQ)&lt;/h1&gt; &#xA;&lt;p&gt;A lightweight message queue. Like &lt;a href=&#34;https://aws.amazon.com/sqs/&#34;&gt;AWS SQS&lt;/a&gt; and &lt;a href=&#34;https://github.com/smrchy/rsmq&#34;&gt;RSMQ&lt;/a&gt; but on Postgres.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cloud.tembo.io/sign-up&#34;&gt;&lt;img src=&#34;https://tembo.io/tryFreeButton.svg?sanitize=true&#34; alt=&#34;Tembo Cloud Try Free&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://join.slack.com/t/tembocommunity/shared_invite/zt-293gc1k0k-3K8z~eKW1SEIfrqEI~5_yw&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%40tembo-community?logo=slack&amp;amp;label=slack&#34; alt=&#34;Static Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ossrank.com/p/3809&#34;&gt;&lt;img src=&#34;https://shields.io/endpoint?url=https://ossrank.com/shield/3809&#34; alt=&#34;OSSRank&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pgxn.org/dist/pgmq/&#34;&gt;&lt;img src=&#34;https://badge.fury.io/pg/pgmq.svg?sanitize=true&#34; alt=&#34;PGXN version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Documentation&lt;/strong&gt;: &lt;a href=&#34;https://tembo-io.github.io/pgmq/&#34;&gt;https://tembo-io.github.io/pgmq/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Source&lt;/strong&gt;: &lt;a href=&#34;https://github.com/tembo-io/pgmq&#34;&gt;https://github.com/tembo-io/pgmq&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lightweight - No background worker or external dependencies, just Postgres functions packaged in an extension&lt;/li&gt; &#xA; &lt;li&gt;Guaranteed &#34;exactly once&#34; delivery of messages to a consumer within a visibility timeout&lt;/li&gt; &#xA; &lt;li&gt;API parity with &lt;a href=&#34;https://aws.amazon.com/sqs/&#34;&gt;AWS SQS&lt;/a&gt; and &lt;a href=&#34;https://github.com/smrchy/rsmq&#34;&gt;RSMQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Messages stay in the queue until explicitly removed&lt;/li&gt; &#xA; &lt;li&gt;Messages can be archived, instead of deleted, for long-term retention and replayability&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Postgres 12-16.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tembo-io/pgmq/main/#postgres-message-queue-pgmq&#34;&gt;Postgres Message Queue (PGMQ)&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tembo-io/pgmq/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tembo-io/pgmq/main/#support&#34;&gt;Support&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tembo-io/pgmq/main/#table-of-contents&#34;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tembo-io/pgmq/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tembo-io/pgmq/main/#client-libraries&#34;&gt;Client Libraries&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tembo-io/pgmq/main/#sql-examples&#34;&gt;SQL Examples&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tembo-io/pgmq/main/#creating-a-queue&#34;&gt;Creating a queue&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tembo-io/pgmq/main/#send-two-messages&#34;&gt;Send two messages&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tembo-io/pgmq/main/#read-messages&#34;&gt;Read messages&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tembo-io/pgmq/main/#pop-a-message&#34;&gt;Pop a message&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tembo-io/pgmq/main/#archive-a-message&#34;&gt;Archive a message&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tembo-io/pgmq/main/#delete-a-message&#34;&gt;Delete a message&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tembo-io/pgmq/main/#drop-a-queue&#34;&gt;Drop a queue&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tembo-io/pgmq/main/#configuration&#34;&gt;Configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tembo-io/pgmq/main/#partitioned-queues&#34;&gt;Partitioned Queues&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tembo-io/pgmq/main/#visibility-timeout-vt&#34;&gt;Visibility Timeout (vt)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tembo-io/pgmq/main/#-contributors&#34;&gt;✨ Contributors&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The fastest way to get started is by running the Tembo docker image, where PGMQ comes pre-installed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d --name postgres -e POSTGRES_PASSWORD=postgres -p 5432:5432 quay.io/tembo/pgmq-pg:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;d like to build from source, you can follow the instructions in &lt;a href=&#34;https://raw.githubusercontent.com/tembo-io/pgmq/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Updating&lt;/h3&gt; &#xA;&lt;p&gt;To update PGMQ versions, follow the instructions in &lt;a href=&#34;https://raw.githubusercontent.com/tembo-io/pgmq/main/UPDATING.md&#34;&gt;UPDATING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Client Libraries&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tembo-io/pgmq/tree/main/pgmq-rs&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tembo-io/pgmq/tree/main/tembo-pgmq-python&#34;&gt;Python&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Community&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/craigpastro/pgmq-go&#34;&gt;Go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/v0idpwn/pgmq-elixir&#34;&gt;Elixir&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/v0idpwn/off_broadway_pgmq&#34;&gt;Elixir + Broadway&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/adamalexandru4/pgmq-spring&#34;&gt;Java (Spring Boot)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Muhammad-Magdi/pgmq-js&#34;&gt;Javascript (NodeJs)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/brianpursley/Npgmq&#34;&gt;.NET&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;SQL Examples&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Connect to Postgres&#xA;psql postgres://postgres:postgres@0.0.0.0:5432/postgres&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- create the extension in the &#34;pgmq&#34; schema&#xA;CREATE EXTENSION pgmq;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Creating a queue&lt;/h3&gt; &#xA;&lt;p&gt;Every queue is its own table in the &lt;code&gt;pgmq&lt;/code&gt; schema. The table name is the queue name prefixed with &lt;code&gt;q_&lt;/code&gt;. For example, &lt;code&gt;pgmq.q_my_queue&lt;/code&gt; is the table for the queue &lt;code&gt;my_queue&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- creates the queue&#xA;SELECT pgmq.create(&#39;my_queue&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt; create&#xA;-------------&#xA;&#xA;(1 row)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Send two messages&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- messages are sent as JSON&#xA;SELECT * from pgmq.send(&#39;my_queue&#39;, &#39;{&#34;foo&#34;: &#34;bar1&#34;}&#39;);&#xA;SELECT * from pgmq.send(&#39;my_queue&#39;, &#39;{&#34;foo&#34;: &#34;bar2&#34;}&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The message id is returned from the send function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt; send&#xA;-----------&#xA;         1&#xA;(1 row)&#xA;&#xA; send&#xA;-----------&#xA;         2&#xA;(1 row)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Read messages&lt;/h3&gt; &#xA;&lt;p&gt;Read &lt;code&gt;2&lt;/code&gt; message from the queue. Make them invisible for &lt;code&gt;30&lt;/code&gt; seconds. If the messages are not deleted or archived within 30 seconds, they will become visible again and can be read by another consumer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM pgmq.read(&#39;my_queue&#39;, 30, 2);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt; msg_id | read_ct |          enqueued_at          |              vt               |     message&#xA;--------+---------+-------------------------------+-------------------------------+-----------------&#xA;      1 |       1 | 2023-08-16 08:37:54.567283-05 | 2023-08-16 08:38:29.989841-05 | {&#34;foo&#34;: &#34;bar1&#34;}&#xA;      2 |       1 | 2023-08-16 08:37:54.572933-05 | 2023-08-16 08:38:29.989841-05 | {&#34;foo&#34;: &#34;bar2&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the queue is empty, or if all messages are currently invisible, no rows will be returned.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT pgmq.read(&#39;my_queue&#39;, 30, 1);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt; msg_id | read_ct | enqueued_at | vt | message&#xA;--------+---------+-------------+----+---------&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pop a message&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- Read a message and immediately delete it from the queue. Returns `None` if the queue is empty.&#xA;SELECT pgmq.pop(&#39;my_queue&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt; msg_id | read_ct |          enqueued_at          |              vt               |     message&#xA;--------+---------+-------------------------------+-------------------------------+-----------------&#xA;      1 |       1 | 2023-08-16 08:37:54.567283-05 | 2023-08-16 08:38:29.989841-05 | {&#34;foo&#34;: &#34;bar1&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Archive a message&lt;/h3&gt; &#xA;&lt;p&gt;Archiving a message removes it from the queue and inserts it to the archive table.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- Archive message with msg_id=2.&#xA;SELECT pgmq.archive(&#39;my_queue&#39;, 2);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt; archive&#xA;--------------&#xA; t&#xA;(1 row)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- Archive tables have the prefix `a_`:&#xA;SELECT * FROM pgmq.a_my_queue;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt; msg_id | read_ct |         enqueued_at          |          archived_at          |              vt               |     message&#xA;--------+---------+------------------------------+-------------------------------+-------------------------------+-----------------&#xA;      2 |       1 | 2023-04-25 00:55:40.68417-05 | 2023-04-25 00:56:35.937594-05 | 2023-04-25 00:56:20.532012-05 | {&#34;foo&#34;: &#34;bar2&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Delete a message&lt;/h3&gt; &#xA;&lt;p&gt;Send another message, so that we can delete it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT pgmq.send(&#39;my_queue&#39;, &#39;{&#34;foo&#34;: &#34;bar3&#34;}&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt; send&#xA;-----------&#xA;        3&#xA;(1 row)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Delete the message with id &lt;code&gt;3&lt;/code&gt; from the queue named &lt;code&gt;my_queue&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT pgmq.delete(&#39;my_queue&#39;, 3);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt; delete&#xA;-------------&#xA; t&#xA;(1 row)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Drop a queue&lt;/h3&gt; &#xA;&lt;p&gt;Delete the queue &lt;code&gt;my_queue&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT pgmq.drop_queue(&#39;my_queue&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt; drop_queue&#xA;-----------------&#xA; t&#xA;(1 row)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Configuration&lt;/h1&gt; &#xA;&lt;h2&gt;Partitioned Queues&lt;/h2&gt; &#xA;&lt;p&gt;You will need to install &lt;a href=&#34;https://github.com/pgpartman/pg_partman/&#34;&gt;pg_partman&lt;/a&gt; if you want to use &lt;code&gt;pgmq&lt;/code&gt; partitioned queues.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pgmq&lt;/code&gt; queue tables can be created as a partitioned table by using &lt;code&gt;pgmq.create_partitioned()&lt;/code&gt;. &lt;a href=&#34;https://github.com/pgpartman/pg_partman/&#34;&gt;pg_partman&lt;/a&gt; handles all maintenance of queue tables. This includes creating new partitions and dropping old partitions.&lt;/p&gt; &#xA;&lt;p&gt;Partitions behavior is configured at the time queues are created, via &lt;code&gt;pgmq.create_partitioned()&lt;/code&gt;. This function has three parameters:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;queue_name: text&lt;/code&gt;: The name of the queue. Queues are Postgres tables prepended with &lt;code&gt;q_&lt;/code&gt;. For example, &lt;code&gt;q_my_queue&lt;/code&gt;. The archive is instead prefixed by &lt;code&gt;a_&lt;/code&gt;, for example &lt;code&gt;a_my_queue&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;partition_interval: text&lt;/code&gt; - The interval at which partitions are created. This can be either any valid Postgres &lt;code&gt;Duration&lt;/code&gt; supported by pg_partman, or an integer value. When it is a duration, queues are partitioned by the time at which messages are sent to the table (&lt;code&gt;enqueued_at&lt;/code&gt;). A value of &lt;code&gt;&#39;daily&#39;&lt;/code&gt; would create a new partition each day. When it is an integer value, queues are partitioned by the &lt;code&gt;msg_id&lt;/code&gt;. A value of &lt;code&gt;&#39;100&#39;&lt;/code&gt; will create a new partition every 100 messages. The value must agree with &lt;code&gt;retention_interval&lt;/code&gt; (time based or numeric). The default value is &lt;code&gt;daily&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;retention_interval: text&lt;/code&gt; - The interval for retaining partitions. This can be either any valid Postgres &lt;code&gt;Duration&lt;/code&gt; supported by pg_partman, or an integer value. When it is a duration, partitions containing data greater than the duration will be dropped. When it is an integer value, any messages that have a &lt;code&gt;msg_id&lt;/code&gt; less than &lt;code&gt;max(msg_id) - retention_interval&lt;/code&gt; will be dropped. For example, if the max &lt;code&gt;msg_id&lt;/code&gt; is 100 and the &lt;code&gt;retention_interval&lt;/code&gt; is 60, any partitions with &lt;code&gt;msg_id&lt;/code&gt; values less than 40 will be dropped. The value must agree with &lt;code&gt;partition_interval&lt;/code&gt; (time based or numeric). The default is &lt;code&gt;&#39;5 days&#39;&lt;/code&gt;. Note: &lt;code&gt;retention_interval&lt;/code&gt; does not apply to messages that have been deleted via &lt;code&gt;pgmq.delete()&lt;/code&gt; or archived with &lt;code&gt;pgmq.archive()&lt;/code&gt;. &lt;code&gt;pgmq.delete()&lt;/code&gt; removes messages forever and &lt;code&gt;pgmq.archive()&lt;/code&gt; moves messages to the corresponding archive table forever (for example, &lt;code&gt;a_my_queue&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;In order for automatic partition maintenance to take place, several settings must be added to the &lt;code&gt;postgresql.conf&lt;/code&gt; file, which is typically located in the postgres &lt;code&gt;DATADIR&lt;/code&gt;. &lt;code&gt;pg_partman_bgw.interval&lt;/code&gt; in &lt;code&gt;postgresql.conf&lt;/code&gt;. Below are the default configuration values set in Tembo docker images.&lt;/p&gt; &#xA;&lt;p&gt;Add the following to &lt;code&gt;postgresql.conf&lt;/code&gt;. Note, changing &lt;code&gt;shared_preload_libraries&lt;/code&gt; requires a restart of Postgres.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pg_partman_bgw.interval&lt;/code&gt; sets the interval at which &lt;code&gt;pg_partman&lt;/code&gt; conducts maintenance. This creates new partitions and dropping of partitions falling out of the &lt;code&gt;retention_interval&lt;/code&gt;. By default, &lt;code&gt;pg_partman&lt;/code&gt; will keep 4 partitions &#34;ahead&#34; of the currently active partition.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;shared_preload_libraries = &#39;pg_partman_bgw&#39; # requires restart of Postgres&#xA;pg_partman_bgw.interval = 60&#xA;pg_partman_bgw.role = &#39;postgres&#39;&#xA;pg_partman_bgw.dbname = &#39;postgres&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Visibility Timeout (vt)&lt;/h2&gt; &#xA;&lt;p&gt;pgmq guarantees exactly once delivery of a message within a visibility timeout. The visibility timeout is the amount of time a message is invisible to other consumers after it has been read by a consumer. If the message is NOT deleted or archived within the visibility timeout, it will become visible again and can be read by another consumer. The visibility timeout is set when a message is read from the queue, via &lt;code&gt;pgmq.read()&lt;/code&gt;. It is recommended to set a &lt;code&gt;vt&lt;/code&gt; value that is greater than the expected time it takes to process a message. After the application successfully processes the message, it should call &lt;code&gt;pgmq.delete()&lt;/code&gt; to completely remove the message from the queue or &lt;code&gt;pgmq.archive()&lt;/code&gt; to move it to the archive table for the queue.&lt;/p&gt; &#xA;&lt;h2&gt;✨ Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Thanks goes to these incredible people:&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/tembo-io/pgmq/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=tembo-io/pgmq&#34;&gt; &lt;/a&gt;</summary>
  </entry>
</feed>