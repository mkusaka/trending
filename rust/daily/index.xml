<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-05T01:42:48Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ddddddeon/a</title>
    <updated>2023-03-05T01:42:48Z</updated>
    <id>tag:github.com,2023-03-05:/ddddddeon/a</id>
    <link href="https://github.com/ddddddeon/a" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CLI tool to generate code from GPT3&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;a&lt;/h1&gt; &#xA;&lt;p&gt;CLI tool to generate code from GPT3 that pretty-prints the output by language, and copies to your clipboard&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6937171/221947920-9cf8ed65-9ead-490b-a3c3-e606012ee8ce.gif&#34; alt=&#34;tty&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install a-gpt&#xA;export OPENAI_API_KEY=sk-WEz... # from https://platform.openai.com/account/api-keys&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For local development:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make release&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the &lt;code&gt;clipboard&lt;/code&gt; feature is enabled and you are running Ubuntu/Debian, you may need to install the following packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install xorg-dev libxcb-composite0-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;You will need an OpenAI API key, and to set the environment variable &lt;code&gt;OPENAI_API_KEY&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Invoke the &lt;code&gt;a&lt;/code&gt; command followed by a prompt. If the first word in the prompt is a programming language or file-format the pretty-printer recognizes, it will syntax highlight the output.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;a python script that fetches a url&#xA;a rust program that showcases its various features&#xA;a yaml manifest describing a kubernetes deployment&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If installed with the &lt;code&gt;clipboard&lt;/code&gt; feature (enabled by default), the output will be copied to the clipboard.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>64bit/async-openai</title>
    <updated>2023-03-05T01:42:48Z</updated>
    <id>tag:github.com,2023-03-05:/64bit/async-openai</id>
    <link href="https://github.com/64bit/async-openai" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Async Rust library for OpenAI&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://docs.rs/async-openai&#34;&gt; &lt;img width=&#34;50px&#34; src=&#34;https://raw.githubusercontent.com/64bit/async-openai/assets/create-image-b64-json/img-1.png&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; async-openai &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Async Rust library for OpenAI &lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://crates.io/crates/async-openai&#34;&gt; &lt;img src=&#34;https://img.shields.io/crates/v/async-openai.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://docs.rs/async-openai&#34;&gt; &lt;img src=&#34;https://docs.rs/async-openai/badge.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;sub&gt;Logo created by this &lt;a href=&#34;https://github.com/64bit/async-openai/tree/main/examples/create-image-b64-json&#34;&gt;repo itself&lt;/a&gt;&lt;/sub&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;async-openai&lt;/code&gt; is an unofficial Rust library for OpenAI REST API.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It&#39;s based on &lt;a href=&#34;https://github.com/openai/openai-openapi&#34;&gt;OpenAI OpenAPI spec&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Current features: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Audio&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Chat (including SSE streaming)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Completions (including SSE streaming)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Edits&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Embeddings&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Files&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Fine-Tuning (including SSE streaming)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Images&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Microsoft Azure Endpoints / AD Authentication (see &lt;a href=&#34;https://github.com/64bit/async-openai/issues/32&#34;&gt;issue&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Models&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Moderations&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Non-streaming requests are retried with exponential backoff when &lt;a href=&#34;https://platform.openai.com/docs/guides/rate-limits&#34;&gt;rate limited&lt;/a&gt; by the API server.&lt;/li&gt; &#xA; &lt;li&gt;Ergonomic Rust library with builder pattern for all request objects.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Being a young project there could be rough edges.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The library reads &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;API key&lt;/a&gt; from the environment variable &lt;code&gt;OPENAI_API_KEY&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# On macOS/Linux&#xA;export OPENAI_API_KEY=&#39;sk-...&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# On Windows Powershell&#xA;$Env:OPENAI_API_KEY=&#39;sk-...&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visit &lt;a href=&#34;https://github.com/64bit/async-openai/tree/main/examples&#34;&gt;examples&lt;/a&gt; directory on how to use &lt;code&gt;async-openai&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Visit &lt;a href=&#34;https://docs.rs/async-openai&#34;&gt;docs.rs/async-openai&lt;/a&gt; for docs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Image Generation Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use async_openai::{&#xA;    types::{CreateImageRequestArgs, ImageSize, ResponseFormat},&#xA;    Client,&#xA;};&#xA;use std::error::Error;&#xA;&#xA;#[tokio::main]&#xA;async fn main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn Error&amp;gt;&amp;gt; {&#xA;    // create client, reads OPENAI_API_KEY environment variable for API key.&#xA;    let client = Client::new();&#xA;&#xA;    let request = CreateImageRequestArgs::default()&#xA;        .prompt(&#34;cats on sofa and carpet in living room&#34;)&#xA;        .n(2)&#xA;        .response_format(ResponseFormat::Url)&#xA;        .size(ImageSize::S256x256)&#xA;        .user(&#34;async-openai&#34;)&#xA;        .build()?;&#xA;&#xA;    let response = client.images().create(request).await?;&#xA;&#xA;    // Download and save images to ./data directory.&#xA;    // Each url is downloaded and saved in dedicated Tokio task.&#xA;    // Directory is created if it doesn&#39;t exist.&#xA;    let paths = response.save(&#34;./data&#34;).await?;&#xA;&#xA;    paths&#xA;        .iter()&#xA;        .for_each(|path| println!(&#34;Image file path: {}&#34;, path.display()));&#xA;&#xA;    Ok(())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img width=&#34;315&#34; src=&#34;https://raw.githubusercontent.com/64bit/async-openai/assets/create-image/img-1.png&#34;&gt; &#xA; &lt;img width=&#34;315&#34; src=&#34;https://raw.githubusercontent.com/64bit/async-openai/assets/create-image/img-2.png&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;sub&gt;Scaled up for README, actual size 256x256&lt;/sub&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Thank you for your time to contribute and improve the project, I&#39;d be happy to have you!&lt;/p&gt; &#xA;&lt;p&gt;A good starting point would be an &lt;a href=&#34;https://github.com/64bit/async-openai/issues&#34;&gt;open issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under &lt;a href=&#34;https://github.com/64bit/async-openai/raw/main/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>stalwartlabs/smtp-server</title>
    <updated>2023-03-05T01:42:48Z</updated>
    <id>tag:github.com,2023-03-05:/stalwartlabs/smtp-server</id>
    <link href="https://github.com/stalwartlabs/smtp-server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Stalwart SMTP Server&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Stalwart SMTP Server&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/stalwartlabs/smtp-server/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/stalwartlabs/smtp-server/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/stalwartlabs/smtp-server/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/stalwartlabs/smtp-server/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.gnu.org/licenses/agpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-AGPL_v3-blue.svg?sanitize=true&#34; alt=&#34;License: AGPL v3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/jtgtCNj66U&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/923615863037390889?label=Chat&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/stalwartlabs&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/stalwartlabs?style=flat&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Stalwart SMTP&lt;/strong&gt; is a modern SMTP server developed in Rust with a focus on security, speed, and extensive configurability. It features built-in DMARC, DKIM, SPF and ARC support for message authentication, strong transport security through DANE, MTA-STS and SMTP TLS reporting, and offers great flexibility and customization thanks to its dynamic configuration rules and native support for Sieve scripts.&lt;/p&gt; &#xA;&lt;p&gt;Key features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sender and Message Authentication: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Domain-based Message Authentication, Reporting, and Conformance (&lt;strong&gt;DMARC&lt;/strong&gt;) verification and failure/aggregate reporting.&lt;/li&gt; &#xA;   &lt;li&gt;DomainKeys Identified Mail (&lt;strong&gt;DKIM&lt;/strong&gt;) verification, signing and failure reporting.&lt;/li&gt; &#xA;   &lt;li&gt;Sender Policy Framework (&lt;strong&gt;SPF&lt;/strong&gt;) policy evaluation and failure reporting.&lt;/li&gt; &#xA;   &lt;li&gt;Authenticated Received Chain (&lt;strong&gt;ARC&lt;/strong&gt;) verification and sealing.&lt;/li&gt; &#xA;   &lt;li&gt;Reverse IP (&lt;strong&gt;iprev&lt;/strong&gt;) validation.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Strong Transport Security: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;DNS-Based Authentication of Named Entities (&lt;strong&gt;DANE&lt;/strong&gt;) Transport Layer Security.&lt;/li&gt; &#xA;   &lt;li&gt;SMTP MTA Strict Transport Security (&lt;strong&gt;MTA-STS&lt;/strong&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;SMTP TLS Reporting (&lt;strong&gt;TLSRPT&lt;/strong&gt;) delivery and analysis.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Inbound Filtering and Throttling: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Sieve scripting language with support for all &lt;a href=&#34;https://www.iana.org/assignments/sieve-extensions/sieve-extensions.xhtml&#34;&gt;registered extensions&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Filtering, modification and removal of MIME parts or headers.&lt;/li&gt; &#xA;   &lt;li&gt;DNS block lists (&lt;strong&gt;DNSBL&lt;/strong&gt;) &amp;amp; Greylisting.&lt;/li&gt; &#xA;   &lt;li&gt;Inbound concurrency &amp;amp; rate limiting.&lt;/li&gt; &#xA;   &lt;li&gt;Integration with external content filtering systems such as SpamAssassin and ClamAV.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Flexible Queues: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Unlimited virtual queues with custom routing rules.&lt;/li&gt; &#xA;   &lt;li&gt;Delayed delivery with &lt;code&gt;FUTURERELEASE&lt;/code&gt; and &lt;code&gt;DELIVERBY&lt;/code&gt; extensions support.&lt;/li&gt; &#xA;   &lt;li&gt;Priority delivery with &lt;code&gt;MT-PRIORITY&lt;/code&gt; extension support.&lt;/li&gt; &#xA;   &lt;li&gt;Outbound throttling &amp;amp; Disk quotas.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Logging and Reporting: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Detailed logging of SMTP transactions and events, including delivery attempts, errors, and policy violations.&lt;/li&gt; &#xA;   &lt;li&gt;Integration with &lt;strong&gt;OpenTelemetry&lt;/strong&gt; to enable monitoring, tracing, and performance analysis of SMTP server operations.&lt;/li&gt; &#xA;   &lt;li&gt;Automatic analysis of incoming DMARC/TLS aggregate reports, DMARC/DKIM/SPF authentication failure reports as well as abuse reports.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;And more: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;SASL authentication.&lt;/li&gt; &#xA;   &lt;li&gt;PostgreSQL, MySQL, MSSQL and SQLite support.&lt;/li&gt; &#xA;   &lt;li&gt;Granular configuration rules.&lt;/li&gt; &#xA;   &lt;li&gt;REST API for management.&lt;/li&gt; &#xA;   &lt;li&gt;Memory safe (thanks to Rust).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Get Started&lt;/h2&gt; &#xA;&lt;p&gt;Install Stalwart SMTP on your server by following the instructions for your platform:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stalw.art/smtp/get-started/linux/&#34;&gt;Linux / MacOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stalw.art/smtp/get-started/windows/&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stalw.art/smtp/get-started/docker/&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You may also &lt;a href=&#34;https://stalw.art/smtp/development/compile/&#34;&gt;compile Stalwart SMTP from the source&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;If you are having problems running Stalwart SMTP, you found a bug or just have a question, do not hesitate to reach us on &lt;a href=&#34;https://github.com/stalwartlabs/smtp-server/discussions&#34;&gt;Github Discussions&lt;/a&gt;, &lt;a href=&#34;https://www.reddit.com/r/stalwartlabs&#34;&gt;Reddit&lt;/a&gt; or &lt;a href=&#34;https://discord.gg/9dXkHzCk&#34;&gt;Discord&lt;/a&gt;. Additionally you may become a sponsor to obtain priority support from Stalwart Labs Ltd.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Table of Contents&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Get Started &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stalw.art/smtp/get-started/linux/&#34;&gt;Linux / MacOS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stalw.art/smtp/get-started/windows/&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stalw.art/smtp/get-started/docker/&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Configuration &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stalw.art/smtp/settings/overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stalw.art/smtp/settings/rules&#34;&gt;Configuration Rules&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stalw.art/smtp/settings/general&#34;&gt;General settings&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stalw.art/smtp/settings/remote&#34;&gt;Remote hosts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stalw.art/smtp/settings/database&#34;&gt;Databases&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stalw.art/smtp/settings/list&#34;&gt;Local Lists&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stalw.art/smtp/settings/tracing&#34;&gt;Tracing &amp;amp; Logging&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Inbound settings &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stalw.art/smtp/inbound/listeners&#34;&gt;Listeners&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stalw.art/smtp/inbound/session&#34;&gt;Sessions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stalw.art/smtp/inbound/ehlo&#34;&gt;EHLO Stage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stalw.art/smtp/inbound/mail&#34;&gt;MAIL Stage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stalw.art/smtp/inbound/rcpt&#34;&gt;RCPT Stage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stalw.art/smtp/inbound/data&#34;&gt;DATA Stage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stalw.art/smtp/inbound/auth&#34;&gt;AUTH Stage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stalw.art/smtp/inbound/dnsbl&#34;&gt;DNSBLs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stalw.art/smtp/inbound/sieve&#34;&gt;Sieve Scripting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stalw.art/smtp/inbound/throttle&#34;&gt;Throttling&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Outbound settings &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stalw.art/smtp/outbound/queue&#34;&gt;Queues&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stalw.art/smtp/outbound/transport&#34;&gt;Transport &amp;amp; Routing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stalw.art/smtp/outbound/tls&#34;&gt;TLS Security&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stalw.art/smtp/outbound/throttle&#34;&gt;Throttling&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stalw.art/smtp/outbound/quota&#34;&gt;Quotas&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stalw.art/smtp/outbound/dns&#34;&gt;DNS&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Email Authentication &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stalw.art/smtp/auth/dkim&#34;&gt;DKIM&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stalw.art/smtp/auth/spf&#34;&gt;SPF&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stalw.art/smtp/auth/arc&#34;&gt;ARC&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stalw.art/smtp/auth/dmarc&#34;&gt;DMARC&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stalw.art/smtp/auth/iprev&#34;&gt;Reverse IP&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stalw.art/smtp/auth/analysis&#34;&gt;Report Analysis&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Management &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stalw.art/smtp/management/api&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stalw.art/smtp/management/cli&#34;&gt;CLI&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stalw.art/smtp/management/queue&#34;&gt;Queue&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stalw.art/smtp/management/reports&#34;&gt;Reports&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Development &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stalw.art/smtp/development/compile/&#34;&gt;Compiling&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stalw.art/smtp/development/test/&#34;&gt;Tests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stalw.art/smtp/development/rfc/&#34;&gt;RFCs conformed&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;The following major features and enhancements are planned for Stalwart SMTP:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Embedded Antispam and Antivirus&lt;/li&gt; &#xA; &lt;li&gt;WASM filters&lt;/li&gt; &#xA; &lt;li&gt;Distributed mode&lt;/li&gt; &#xA; &lt;li&gt;Web-based administration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Testing &amp;amp; Fuzzing&lt;/h2&gt; &#xA;&lt;p&gt;The base tests perform protocol compliance tests as well as basic functionality testing on different functions across the Stalwart SMTP code base. To run the base test suite execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the fuzz tests please refer to the Stalwart libraries that handle parsing for the SMTP server: &lt;a href=&#34;https://github.com/stalwartlabs/smtp-proto&#34;&gt;smtp-proto&lt;/a&gt;, &lt;a href=&#34;https://github.com/stalwartlabs/mail-parser&#34;&gt;mail-parser&lt;/a&gt;, &lt;a href=&#34;https://github.com/stalwartlabs/mail-auth&#34;&gt;mail-auth&lt;/a&gt; and &lt;a href=&#34;https://github.com/stalwartlabs/sieve&#34;&gt;sieve-rs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Funding&lt;/h2&gt; &#xA;&lt;p&gt;Part of the development of this project was funded through the &lt;a href=&#34;https://nlnet.nl/entrust&#34;&gt;NGI0 Entrust Fund&lt;/a&gt;, a fund established by &lt;a href=&#34;https://nlnet.nl/&#34;&gt;NLnet&lt;/a&gt; with financial support from the European Commission&#39;s &lt;a href=&#34;https://ngi.eu/&#34;&gt;Next Generation Internet&lt;/a&gt; programme, under the aegis of DG Communications Networks, Content and Technology under grant agreement No 101069594.&lt;/p&gt; &#xA;&lt;p&gt;If you find the project useful you can help by &lt;a href=&#34;https://github.com/sponsors/stalwartlabs&#34;&gt;becoming a sponsor&lt;/a&gt;. Thank you!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under the terms of the &lt;a href=&#34;https://www.gnu.org/licenses/agpl-3.0.en.html&#34;&gt;GNU Affero General Public License&lt;/a&gt; as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. See &lt;a href=&#34;https://raw.githubusercontent.com/stalwartlabs/smtp-server/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;You can be released from the requirements of the AGPLv3 license by purchasing a commercial license. Please contact &lt;a href=&#34;mailto:licensing@stalw.art&#34;&gt;licensing@stalw.art&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (C) 2020-2023, Stalwart Labs Ltd.&lt;/p&gt;</summary>
  </entry>
</feed>