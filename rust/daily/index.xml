<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-08T01:42:09Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>robertknight/ocrs</title>
    <updated>2024-01-08T01:42:09Z</updated>
    <id>tag:github.com,2024-01-08:/robertknight/ocrs</id>
    <link href="https://github.com/robertknight/ocrs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modern OCR engine (extracts text from images), written in Rust&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ocrs&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;ocrs&lt;/strong&gt; is a Rust library and CLI tool for extracting text from images, also known as OCR (Optical Character Recognition).&lt;/p&gt; &#xA;&lt;p&gt;The goal is to create a modern OCR engine that:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Works well on a wide variety of images (scanned documents, photos containing text, screenshots etc.) with zero or much less preprocessing effort compared to earlier engines like &lt;a href=&#34;https://github.com/tesseract-ocr/tesseract&#34;&gt;Tesseract&lt;/a&gt;. This is achieved by using machine learning more extensively in the pipeline.&lt;/li&gt; &#xA; &lt;li&gt;Is easy to compile and run across a variety of platforms, including WebAssembly&lt;/li&gt; &#xA; &lt;li&gt;Is trained on open and liberally licensed datasets&lt;/li&gt; &#xA; &lt;li&gt;Has a codebase that is easy to understand and modify&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Under the hood, the library uses neural network models trained in &lt;a href=&#34;https://pytorch.org&#34;&gt;PyTorch&lt;/a&gt;, which are then exported to &lt;a href=&#34;https://onnx.ai&#34;&gt;ONNX&lt;/a&gt; and executed using the &lt;a href=&#34;https://github.com/robertknight/rten&#34;&gt;RTen&lt;/a&gt; engine. See the &lt;a href=&#34;https://raw.githubusercontent.com/robertknight/ocrs/main/#models-and-datasets&#34;&gt;models&lt;/a&gt; section for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;ocrs is currently in an early preview. Expect more errors than commercial OCR engines.&lt;/p&gt; &#xA;&lt;h2&gt;CLI installation&lt;/h2&gt; &#xA;&lt;p&gt;To install the CLI tool, you will first need Rust and Cargo installed. Then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cargo install ocrs-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;CLI usage:&lt;/h2&gt; &#xA;&lt;p&gt;To extract text from an image, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ocrs image.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When the tool is run for the first time, it will download the required models automatically and store them in &lt;code&gt;~/.cache/ocrs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Additional examples&lt;/h3&gt; &#xA;&lt;p&gt;Extract text from an image and write to &lt;code&gt;content.txt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ocrs image.png -o content.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Extract text and layout information from the image in JSON format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ocrs image.png --json -o content.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Annotate an image to show the location of detected words and lines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ocrs image.png --png -o annotated.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Models and datasets&lt;/h2&gt; &#xA;&lt;p&gt;ocrs uses neural network models written in PyTorch. See the &lt;a href=&#34;https://github.com/robertknight/ocrs-models&#34;&gt;ocrs-models&lt;/a&gt; repository for more details about the models and datasets, as well as tools for training custom models. These models are also available in ONNX format for use with other machine learning runtimes.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;To build and run the ocrs library and CLI tool locally you will need a recent stable Rust version installed. Then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/robertknight/ocrs.git&#xA;cd ocrs&#xA;cargo run -p ocrs-cli -r -- image.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Library installation&lt;/h3&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/robertknight/ocrs/main/ocrs/&#34;&gt;ocrs crate README&lt;/a&gt; for details on how to use ocrs as a Rust library.&lt;/p&gt;</summary>
  </entry>
</feed>