<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-16T01:45:40Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>greyblake/nutype</title>
    <updated>2023-02-16T01:45:40Z</updated>
    <id>tag:github.com,2023-02-16:/greyblake/nutype</id>
    <link href="https://github.com/greyblake/nutype" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rust newtype with guarantees&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img width=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/greyblake/nutype/master/art/rust_nutype.png&#34; alt=&#34;Rust Nutype Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;The newtype with guarantees.&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/greyblake/nutype/actions/workflows/ci.yml&#34; rel=&#34;nofollow&#34;&gt;&lt;img src=&#34;https://github.com/greyblake/nutype/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Nutype Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/nutype&#34; rel=&#34;nofollow&#34;&gt;&lt;img src=&#34;https://docs.rs/nutype/badge.svg?sanitize=true&#34; alt=&#34;Nutype Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/greyblake/nutype/discussions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/discussions/greyblake/nutype&#34;&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2&gt;Philosophy&lt;/h2&gt; &#xA;&lt;p&gt;Nutype embraces the simple idea: &lt;strong&gt;the type system can be leveraged to track the fact that something was done, so there is no need to do it again&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If a piece of data was once sanitized and validated we can rely on the types instead of sanitizing and validating again and again when we&#39;re in doubt.&lt;/p&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use nutype::nutype;&#xA;&#xA;#[nutype(&#xA;    sanitize(trim, lowercase)&#xA;    validate(not_empty, max_len = 20)&#xA;)]&#xA;pub struct Username(String);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we can create usernames:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;assert_eq!(&#xA;    Username::new(&#34;   FooBar  &#34;).unwrap().into_inner(),&#xA;    &#34;foobar&#34;&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But we cannot create invalid ones:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;assert_eq!(&#xA;    Username::new(&#34;   &#34;),&#xA;    Err(UsernameError::Empty),&#xA;);&#xA;&#xA;assert_eq!(&#xA;    Username::new(&#34;TheUserNameIsVeryVeryLong&#34;),&#xA;    Err(UsernameError::TooLong),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note, that we also got &lt;code&gt;UsernameError&lt;/code&gt; enum generated implicitly.&lt;/p&gt; &#xA;&lt;p&gt;Ok, but let&#39;s try to obtain an instance of &lt;code&gt;Username&lt;/code&gt; that violates the validation rules:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;let username = Username(&#34;&#34;.to_string())&#xA;&#xA;// error[E0423]: cannot initialize a tuple struct which contains private fields&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;let mut username = Username::new(&#34;foo&#34;).unwrap();&#xA;username.0 = &#34;&#34;.to_string();&#xA;&#xA;// error[E0616]: field `0` of struct `Username` is private&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Haha. It&#39;s does not seem to be easy!&lt;/p&gt; &#xA;&lt;h2&gt;A few more examples&lt;/h2&gt; &#xA;&lt;p&gt;Here are some other examples of what you can do with &lt;code&gt;nutype&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can skip &lt;code&gt;sanitize&lt;/code&gt; and use a custom validator &lt;code&gt;with&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;#[nutype(validate(with = |n| n % 2 == 1))]&#xA;struct OddNumber(i64);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can skip validation, if you need sanitization only:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;#[nutype(sanitize(trim, lowercase))]&#xA;struct Username(String);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In that case &lt;code&gt;Username::new(String)&lt;/code&gt; simply returns &lt;code&gt;Username&lt;/code&gt;, not &lt;code&gt;Result&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can derive traits. A lot of traits! For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;#[nutype]&#xA;#[derive(*)]&#xA;struct Username(String);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The code above derives the following traits for &lt;code&gt;Username&lt;/code&gt;: &lt;code&gt;Debug&lt;/code&gt;, &lt;code&gt;Clone&lt;/code&gt;, &lt;code&gt;PartialEq&lt;/code&gt;, &lt;code&gt;Eq&lt;/code&gt;, &lt;code&gt;PartialOrd&lt;/code&gt;, &lt;code&gt;Ord&lt;/code&gt;, &lt;code&gt;FromStr&lt;/code&gt;, &lt;code&gt;AsRef&lt;/code&gt;, &lt;code&gt;Hash&lt;/code&gt;. &lt;code&gt;*&lt;/code&gt; is just a syntax sugar for &#34;derive whatever makes sense to derive by default&#34;, which is very subjective and opinionated. It&#39;s rather an experimental feature that was born from the fact that &lt;code&gt;#[nutype]&lt;/code&gt; has to mess with &lt;code&gt;#[derive]&lt;/code&gt; anyway because users are not supposed to be able to derive traits like &lt;code&gt;DerefMut&lt;/code&gt; or &lt;code&gt;BorrowMut&lt;/code&gt;. That would allow mutating the inner (protected) value which undermines the entire idea of nutype.&lt;/p&gt; &#xA;&lt;h2&gt;Inner types&lt;/h2&gt; &#xA;&lt;p&gt;Available sanitizers, validators, and derivable traits are determined by the inner type, which falls into the following categories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;String&lt;/li&gt; &#xA; &lt;li&gt;Integer (&lt;code&gt;u8&lt;/code&gt;, &lt;code&gt;u16&lt;/code&gt;,&lt;code&gt;u32&lt;/code&gt;, &lt;code&gt;u64&lt;/code&gt;, &lt;code&gt;u128&lt;/code&gt;, &lt;code&gt;i8&lt;/code&gt;, &lt;code&gt;i16&lt;/code&gt;, &lt;code&gt;i32&lt;/code&gt;, &lt;code&gt;i64&lt;/code&gt;, &lt;code&gt;i128&lt;/code&gt;, &lt;code&gt;usize&lt;/code&gt;, &lt;code&gt;isize&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Float (&lt;code&gt;f32&lt;/code&gt;, &lt;code&gt;f64&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;String&lt;/h2&gt; &#xA;&lt;p&gt;At the moment the string inner type supports only &lt;code&gt;String&lt;/code&gt; (owned) type.&lt;/p&gt; &#xA;&lt;h3&gt;String sanitizers&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Sanitizer&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;trim&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Removes leading and trailing whitespaces&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;trim&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lowercase&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Converts the string to lowercase&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lowercase&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;uppercase&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Converts the string to uppercase&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;uppercase&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;with&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Custom sanitizer. A function or closure that receives &lt;code&gt;String&lt;/code&gt; and returns &lt;code&gt;String&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;with = |mut s: String| { s.truncate(5); s }&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;String validators&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Validator&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Error variant&lt;/th&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;max_len&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Max length of the string&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;TooLong&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;max_len = 255&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;min_len&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Min length of the string&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;TooShort&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;min_len = 5&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;not_empty&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Rejects an empty string&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Empty&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;not_empty&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;with&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Custom validator. A function or closure that receives &lt;code&gt;&amp;amp;str&lt;/code&gt; and returns &lt;code&gt;bool&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Invalid&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;with = |s: &amp;amp;str| s.contains(&#39;@&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;String derivable traits&lt;/h3&gt; &#xA;&lt;p&gt;The following traits can be derived for a string-based type: &lt;code&gt;Debug&lt;/code&gt;, &lt;code&gt;Clone&lt;/code&gt;, &lt;code&gt;PartialEq&lt;/code&gt;, &lt;code&gt;Eq&lt;/code&gt;, &lt;code&gt;PartialOrd&lt;/code&gt;, &lt;code&gt;Ord&lt;/code&gt;, &lt;code&gt;FromStr&lt;/code&gt;, &lt;code&gt;AsRef&lt;/code&gt;, &lt;code&gt;From&lt;/code&gt;, &lt;code&gt;TryFrom&lt;/code&gt;, &lt;code&gt;Into&lt;/code&gt;, &lt;code&gt;Hash&lt;/code&gt;, &lt;code&gt;Borrow&lt;/code&gt;, &lt;code&gt;Display&lt;/code&gt;, &lt;code&gt;Serialize&lt;/code&gt;, &lt;code&gt;Deserialize&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Integer&lt;/h2&gt; &#xA;&lt;p&gt;The integer inner types are: &lt;code&gt;u8&lt;/code&gt;, &lt;code&gt;u16&lt;/code&gt;,&lt;code&gt;u32&lt;/code&gt;, &lt;code&gt;u64&lt;/code&gt;, &lt;code&gt;u128&lt;/code&gt;, &lt;code&gt;i8&lt;/code&gt;, &lt;code&gt;i16&lt;/code&gt;, &lt;code&gt;i32&lt;/code&gt;, &lt;code&gt;i64&lt;/code&gt;, &lt;code&gt;i128&lt;/code&gt;, &lt;code&gt;usize&lt;/code&gt;, &lt;code&gt;isize&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Integer sanitizers&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Sanitizer&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;with&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Custom sanitizer.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;with = |raw| raw.clamp(0, 100)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Integer validators&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Validator&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Error variant&lt;/th&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;max&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Maximum valid value&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;TooBig&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;max = 99&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;min&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Minimum valid value&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;TooSmall&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;min = 18&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;with&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Custom validator&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Invalid&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;with = |num| num % 2 == 0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Integer derivable traits&lt;/h3&gt; &#xA;&lt;p&gt;The following traits can be derived for an integer-based type: &lt;code&gt;Debug&lt;/code&gt;, &lt;code&gt;Clone&lt;/code&gt;, &lt;code&gt;Copy&lt;/code&gt;, &lt;code&gt;PartialEq&lt;/code&gt;, &lt;code&gt;Eq&lt;/code&gt;, &lt;code&gt;PartialOrd&lt;/code&gt;, &lt;code&gt;Ord&lt;/code&gt;, &lt;code&gt;FromStr&lt;/code&gt;, &lt;code&gt;AsRef&lt;/code&gt;, &lt;code&gt;Into&lt;/code&gt;, &lt;code&gt;From&lt;/code&gt;, &lt;code&gt;TryFrom&lt;/code&gt;, &lt;code&gt;Hash&lt;/code&gt;, &lt;code&gt;Borrow&lt;/code&gt;, &lt;code&gt;Display&lt;/code&gt;, &lt;code&gt;Serialize&lt;/code&gt;, &lt;code&gt;Deserialize&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Float&lt;/h2&gt; &#xA;&lt;p&gt;The float inner types are: &lt;code&gt;f32&lt;/code&gt;, &lt;code&gt;f64&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Float sanitizers&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Sanitizer&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;with&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Custom sanitizer.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;with = |val| val.clamp(0.0, 100.0)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Float validators&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Validator&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Error variant&lt;/th&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;max&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Maximum valid value&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;TooBig&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;max = 100.0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;min&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Minimum valid value&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;TooSmall&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;min = 0.0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;with&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Custom validator&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Invalid&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;with = |val| val != 50.0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Float derivable traits&lt;/h3&gt; &#xA;&lt;p&gt;The following traits can be derived for a float-based type: &lt;code&gt;Debug&lt;/code&gt;, &lt;code&gt;Clone&lt;/code&gt;, &lt;code&gt;Copy&lt;/code&gt;, &lt;code&gt;PartialEq&lt;/code&gt;, &lt;code&gt;PartialOrd&lt;/code&gt;, &lt;code&gt;FromStr&lt;/code&gt;, &lt;code&gt;AsRef&lt;/code&gt;, &lt;code&gt;Into&lt;/code&gt;, &lt;code&gt;From&lt;/code&gt;, &lt;code&gt;TryFrom&lt;/code&gt;, &lt;code&gt;Hash&lt;/code&gt;, &lt;code&gt;Borrow&lt;/code&gt;, &lt;code&gt;Display&lt;/code&gt;, &lt;code&gt;Serialize&lt;/code&gt;, &lt;code&gt;Deserialize&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Custom sanitizers&lt;/h2&gt; &#xA;&lt;p&gt;You can set custom sanitizers using the &lt;code&gt;with&lt;/code&gt; option. A custom sanitizer is a function or closure that receives a value of an inner type with ownership and returns a sanitized value.&lt;/p&gt; &#xA;&lt;p&gt;For example, this one&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;#[nutype(sanitize(with = new_to_old))]&#xA;pub struct CityName(String);&#xA;&#xA;fn new_to_old(s: String) -&amp;gt; String {&#xA;    s.replace(&#34;New&#34;, &#34;Old&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;is equal to the following one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;#[nutype(sanitize(with = |s| s.replace(&#34;New&#34;, &#34;Old&#34;) ))]&#xA;pub struct CityName(String);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And works the same way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;let city = CityName::new(&#34;New York&#34;);&#xA;assert_eq!(city.into_inner(), &#34;Old York&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom validators&lt;/h2&gt; &#xA;&lt;p&gt;In similar fashion it&#39;s possible to define custom validators, but a validation function receives a reference and returns &lt;code&gt;bool&lt;/code&gt;. Think of it as a predicate.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;#[nutype(validate(with = is_valid_name))]&#xA;pub struct Name(String);&#xA;&#xA;fn is_valid_name(name: &amp;amp;str) -&amp;gt; bool {&#xA;    // A fancy way to verify if the first character is uppercase&#xA;    name.chars().next().map(char::is_uppercase).unwrap_or(false)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Feature flags&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;serde1&lt;/code&gt; - integrations with &lt;a href=&#34;https://crates.io/crates/serde&#34;&gt;&lt;code&gt;serde&lt;/code&gt;&lt;/a&gt; crate. Allows to derive &lt;code&gt;Serialize&lt;/code&gt; and &lt;code&gt;Deserialize&lt;/code&gt; traits.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;When nutype is a good fit for you?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you enjoy &lt;a href=&#34;https://doc.rust-lang.org/book/ch19-04-advanced-types.html#using-the-newtype-pattern-for-type-safety-and-abstraction&#34;&gt;newtype&lt;/a&gt; pattern and you like the idea of leveraging the Rust type system to enforce the correctness of the business logic.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;re a DDD fan, nutype is a great helper to make your domain models even more expressive.&lt;/li&gt; &#xA; &lt;li&gt;You want to prototype quickly without sacrificing quality.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;When nutype is not that good?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You care too much about compiler time (nutype relies on heavy usage of proc macros).&lt;/li&gt; &#xA; &lt;li&gt;You think metaprogramming is too much implicit magic.&lt;/li&gt; &#xA; &lt;li&gt;IDEs may not be very helpful at giving you hints about proc macros.&lt;/li&gt; &#xA; &lt;li&gt;Design of nutype may enforce you to run unnecessary validation (e.g. on loading data from DB), which may have a negative impact if you aim for extreme performance.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How it works?&lt;/h2&gt; &#xA;&lt;p&gt;The following snippet&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;#[nutype(&#xA;    sanitize(trim, lowercase)&#xA;    validate(not_empty, max_len = 20)&#xA;)]&#xA;pub struct Username(String);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;eventually is transformed into something similar to this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;// Everything is wrapped into the module,&#xA;// so the internal tuple value of Username is private and cannot be directly manipulated.&#xA;mod __nutype_private_Username__ {&#xA;    pub struct Username(String);&#xA;&#xA;    pub enum UsernameError {&#xA;        // Occurs when a string is empty&#xA;        Empty,&#xA;&#xA;        // Occurs when a string is longer than 255 chars.&#xA;        TooLong,&#xA;    }&#xA;&#xA;    impl Username {&#xA;        // The only legit way to construct Username.&#xA;        // All other constructors (From, FromStr, Deserialize, etc.)&#xA;        // are built on top of this one.&#xA;        pub fn new(raw_username: impl Into&amp;lt;String&amp;gt;) -&amp;gt; Result&amp;lt;Username, UsernameError&amp;gt; {&#xA;            // Sanitize&#xA;            let sanitized_username = raw_username.into().trim().lowercase();&#xA;&#xA;            // Validate&#xA;            if sanitized_username.empty() {&#xA;                Err(UsernameError::Empty)&#xA;            } else if (sanitized_username.len() &amp;gt; 40 {&#xA;                Err(UsernameError::TooLong)&#xA;            } else {&#xA;                Ok(Username(sanitized_username))&#xA;            }&#xA;        }&#xA;&#xA;        // Convert back to the inner type.&#xA;        pub fn into_inner(self) -&amp;gt; String {&#xA;            self.0&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;pub use __nutype_private_Username__::{Username, UsernameError};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you can see, &lt;code&gt;#[nutype]&lt;/code&gt; macro gets sanitization and validation rules and turns them into Rust code.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;Username::new()&lt;/code&gt; constructor performs sanitization and validation and in case of success returns an instance of &lt;code&gt;Username&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;Username::into_inner(self)&lt;/code&gt; allows converting &lt;code&gt;Username&lt;/code&gt; back into the inner type (&lt;code&gt;String&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;And of course, the variants of &lt;code&gt;UsernameError&lt;/code&gt; are derived from the validation rules.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;But the whole point of the &lt;code&gt;nutype&lt;/code&gt; crate is that there is no legit way to obtain an instance of &lt;code&gt;Username&lt;/code&gt; that violates the sanitization or validation rules.&lt;/strong&gt; The author put a lot of effort into this. If you find a way to obtain the instance of a newtype bypassing the validation rules, please open an issue.&lt;/p&gt; &#xA;&lt;h2&gt;A note about #[derive(...)]&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ve got to know that the &lt;code&gt;#[nutype]&lt;/code&gt; macro intercepts &lt;code&gt;#[derive(...)]&lt;/code&gt; macro. It&#39;s done on purpose to ensure that anything like &lt;code&gt;DerefMut&lt;/code&gt; or &lt;code&gt;BorrowMut&lt;/code&gt;, that can lead to a violation of the validation rules is excluded. The library takes a conservative approach and it has its downside: deriving traits that are not known to the library is not possible.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; refactor the parser logic&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; friendlier error messages: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;did you mean ...?&lt;/code&gt; hints&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; intercept and explain why &lt;code&gt;DerefMut&lt;/code&gt; and co cannot be derived&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; for floats: add &lt;code&gt;finite&lt;/code&gt; validator and allow to derive &lt;code&gt;Eq&lt;/code&gt; and &lt;code&gt;Ord&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; integration with &lt;a href=&#34;https://github.com/diesel-rs/diesel&#34;&gt;diesel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; integration with &lt;a href=&#34;https://github.com/launchbadge/sqlx&#34;&gt;sqlx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; integration with &lt;a href=&#34;https://github.com/greyblake/envconfig-rs&#34;&gt;envconfig&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; integration with &lt;a href=&#34;https://github.com/rust-fuzz/arbitrary&#34;&gt;arbitrary&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; support &lt;code&gt;regex&lt;/code&gt; to validate string types&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support Ukrainian military forces 🇺🇦&lt;/h2&gt; &#xA;&lt;p&gt;Today I live in Berlin, I have the luxury to live a physically safe life. But I am Ukrainian. The first 25 years of my life I spent in &lt;a href=&#34;https://en.wikipedia.org/wiki/Kharkiv&#34;&gt;Kharkiv&lt;/a&gt;, the second-largest city in Ukraine, 60km away from the border with russia. Today about &lt;a href=&#34;https://www.youtube.com/watch?v=ihoufBFSZds&#34;&gt;a third of my home city is destroyed&lt;/a&gt; by russians. My parents, my relatives and my friends had to survive the artillery and air attack, living for over a month in basements.&lt;/p&gt; &#xA;&lt;p&gt;Some of them have managed to evacuate to EU. Some others are trying to live &#34;normal lifes&#34; in Kharkiv, doing there daily duties. And some are at the front line right now, risking their lives every second to protect the rest.&lt;/p&gt; &#xA;&lt;p&gt;I encourage you to donate to &lt;a href=&#34;https://prytulafoundation.org/en&#34;&gt;Charity foundation of Serhiy Prytula&lt;/a&gt;. Just pick the project you like and donate. This is one of the best-known foundations, you can watch a &lt;a href=&#34;https://www.youtube.com/watch?v=VlmWqoeub1Q&#34;&gt;little documentary&lt;/a&gt; about it. Your contribution to the Ukrainian military force is a contribution to my calmness, so I can spend more time developing the project.&lt;/p&gt; &#xA;&lt;p&gt;Thank you.&lt;/p&gt; &#xA;&lt;h2&gt;Similar projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/teenjuna/prae&#34;&gt;prae&lt;/a&gt; - A very imilar crate that aims to solve the same problems but with slightly different approach.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Kestrer/bounded-integer&#34;&gt;bounded-integer&lt;/a&gt; - Bounded integers for Rust.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/refinement/latest/refinement/&#34;&gt;refinement&lt;/a&gt; - Convenient creation of type-safe refinement types (based on generics).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/slowtec/semval&#34;&gt;semval&lt;/a&gt; - Semantic validation for Rust.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Keats/validator&#34;&gt;validator&lt;/a&gt; - Simple validation for Rust structs (powered by macros).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT © &lt;a href=&#34;https://www.greyblake.com&#34;&gt;Sergey Potapov&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>messense/aliyundrive-fuse</title>
    <updated>2023-02-16T01:45:40Z</updated>
    <id>tag:github.com,2023-02-16:/messense/aliyundrive-fuse</id>
    <link href="https://github.com/messense/aliyundrive-fuse" rel="alternate"></link>
    <summary type="html">&lt;p&gt;阿里云盘 FUSE 磁盘挂载&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;aliyundrive-fuse&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/messense/aliyundrive-fuse/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/messense/aliyundrive-fuse/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/aliyundrive-fuse&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/aliyundrive-fuse.svg?sanitize=true&#34; alt=&#34;PyPI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/messense/aliyundrive-fuse/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/messense/aliyundrive-fuse.svg?maxAge=2592000&#34; alt=&#34;Docker Image&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://snapcraft.io/aliyundrive-fuse&#34;&gt;&lt;img src=&#34;https://snapcraft.io/aliyundrive-fuse/badge.svg?sanitize=true&#34; alt=&#34;aliyundrive-fuse&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/aliyundrive-fuse&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/aliyundrive-fuse.svg?sanitize=true&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;🚀 Help me to become a full-time open-source developer by &lt;a href=&#34;https://github.com/sponsors/messense&#34;&gt;sponsoring me on GitHub&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;阿里云盘 FUSE 磁盘挂载，主要用于配合 &lt;a href=&#34;https://emby.media&#34;&gt;Emby&lt;/a&gt; 或者 &lt;a href=&#34;https://jellyfin.org&#34;&gt;Jellyfin&lt;/a&gt; 观看阿里云盘内容，功能特性：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;目前只读，不支持写入&lt;/li&gt; &#xA; &lt;li&gt;支持 Linux 和 macOS，暂不支持 Windows&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/messense/aliyundrive-webdav&#34;&gt;aliyundrive-webdav&lt;/a&gt; 项目已经实现了通过 WebDAV 访问阿里云盘内容，但由于 Emby 和 Jellyfin 都不支持直接访问 WebDAV 资源， 需要配合 &lt;a href=&#34;https://rclone.org&#34;&gt;rclone&lt;/a&gt; 之类的软件将 WebDAV 挂载为本地磁盘，而本项目则直接通过 FUSE 实现将阿里云盘挂载为本地磁盘，省去使用 rclone 再做一层中转。&lt;/p&gt; &#xA;&lt;h2&gt;安装&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;macOS 需要先安装 &lt;a href=&#34;https://osxfuse.github.io/&#34;&gt;macfuse&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Linux 需要先安装 fuse &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Debian 系如 Ubuntu: &lt;code&gt;apt-get install -y fuse3&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;RedHat 系如 CentOS: &lt;code&gt;yum install -y fuse3&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;可以从 &lt;a href=&#34;https://github.com/messense/aliyundrive-fuse/releases&#34;&gt;GitHub Releases&lt;/a&gt; 页面下载预先构建的二进制包， 也可以使用 pip 从 PyPI 下载:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install aliyundrive-fuse&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果系统支持 &lt;a href=&#34;https://snapcraft.io&#34;&gt;Snapcraft&lt;/a&gt; 比如 Ubuntu、Debian 等，也可以使用 snap 安装：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo snap install aliyundrive-fuse&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;OpenWrt 路由器&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/messense/aliyundrive-fuse/releases&#34;&gt;GitHub Releases&lt;/a&gt; 中有预编译的 ipk 文件， 目前提供了 aarch64/arm/x86_64/i686 等架构的版本，可以下载后使用 opkg 安装，以 nanopi r4s 为例：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://github.com/messense/aliyundrive-fuse/releases/download/v0.1.14/aliyundrive-fuse_0.1.14-1_aarch64_generic.ipk&#xA;wget https://github.com/messense/aliyundrive-fuse/releases/download/v0.1.14/luci-app-aliyundrive-fuse_0.1.14_all.ipk&#xA;wget https://github.com/messense/aliyundrive-fuse/releases/download/v0.1.14/luci-i18n-aliyundrive-fuse-zh-cn_0.1.14-1_all.ipk&#xA;opkg install aliyundrive-fuse_0.1.14-1_aarch64_generic.ipk&#xA;opkg install luci-app-aliyundrive-fuse_0.1.14_all.ipk&#xA;opkg install luci-i18n-aliyundrive-fuse-zh-cn_0.1.14-1_all.ipk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;其它 CPU 架构的路由器可在 &lt;a href=&#34;https://github.com/messense/aliyundrive-fuse/releases&#34;&gt;GitHub Releases&lt;/a&gt; 页面中查找对应的架构的主程序 ipk 文件下载安装。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Tips: 不清楚 CPU 架构类型可通过运行 &lt;code&gt;opkg print-architecture&lt;/code&gt; 命令查询。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;命令行用法&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;USAGE:&#xA;    aliyundrive-fuse [OPTIONS] --refresh-token &amp;lt;REFRESH_TOKEN&amp;gt; &amp;lt;PATH&amp;gt;&#xA;&#xA;ARGS:&#xA;    &amp;lt;PATH&amp;gt;    Mount point&#xA;&#xA;OPTIONS:&#xA;        --allow-other                            Allow other users to access the drive&#xA;        --domain-id &amp;lt;DOMAIN_ID&amp;gt;                  Aliyun PDS domain id&#xA;    -h, --help                                   Print help information&#xA;    -r, --refresh-token &amp;lt;REFRESH_TOKEN&amp;gt;          Aliyun drive refresh token [env: REFRESH_TOKEN=]&#xA;    -S, --read-buffer-size &amp;lt;READ_BUFFER_SIZE&amp;gt;    Read/download buffer size in bytes, defaults to 10MB [default: 10485760]&#xA;    -V, --version                                Print version information&#xA;    -w, --workdir &amp;lt;WORKDIR&amp;gt;                      Working directory, refresh_token will be stored in there if specified&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;比如将磁盘挂载到 &lt;code&gt;/mnt/aliyundrive&lt;/code&gt; 目录：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p /mnt/aliyundrive /var/run/aliyundrive-fuse&#xA;aliyundrive-fuse -r your-refresh-token -w /var/run/aliyundrive-fuse /mnt/aliyundrive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Emby/Jellyfin&lt;/h2&gt; &#xA;&lt;p&gt;如果是直接运行在系统上的 Emby/Jellyfin，则可以直接在其控制台添加媒体库的时候选择阿里云盘对应的挂载路径中的文件夹即可； 如果是 Docker 运行的 Emby/Jellyfin，则需要将阿里云盘挂载路径也挂载到 Docker 容器中，假设阿里云盘挂载路径为 &lt;code&gt;/mnt/aliyundrive&lt;/code&gt;， 以 Jellyfin 为例（假设 Jellyfin 工作路径为 &lt;code&gt;/root/jellyfin&lt;/code&gt;）将云盘挂载到容器 &lt;code&gt;/media&lt;/code&gt; 路径：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d --name jellyfin \&#xA;  -v /root/jellyfin/config:/config \&#xA;  -v /root/jellyfin/cache:/cache \&#xA;  -v /mnt/aliyundrive:/media \&#xA;  -p 8096:8096 \&#xA;  --device=/dev/dri/renderD128 \&#xA;  --device /dev/dri/card0:/dev/dri/card0 \&#xA;  --restart unless-stopped \&#xA;  jellyfin/jellyfin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This work is released under the MIT license. A copy of the license is provided in the &lt;a href=&#34;https://raw.githubusercontent.com/messense/aliyundrive-fuse/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>AlexAltea/milli-py</title>
    <updated>2023-02-16T01:45:40Z</updated>
    <id>tag:github.com,2023-02-16:/AlexAltea/milli-py</id>
    <link href="https://github.com/AlexAltea/milli-py" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Python bindings for Milli, the embeddable Rust-based search engine powering Meilisearch&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;milli-py&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/AlexAltea/milli-py/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/AlexAltea/milli-py/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;ci-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.python.org/pypi/milli&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/milli.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Python bindings for &lt;a href=&#34;https://github.com/meilisearch/meilisearch/tree/main/milli&#34;&gt;Milli&lt;/a&gt;, the embeddable Rust-based search engine powering &lt;a href=&#34;https://www.meilisearch.com/&#34;&gt;Meilisearch&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Due to limitations around Rust lifecycles, methods available via &lt;code&gt;IndexDocuments&lt;/code&gt; and &lt;code&gt;Search&lt;/code&gt; have been integrated directly into the &lt;code&gt;Index&lt;/code&gt; class. This sacrifices/simplifies functionality available in the original &lt;em&gt;milli&lt;/em&gt; package.&lt;/p&gt; &#xA;&lt;p&gt;Install the package via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pip install milli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Basic usage of the &lt;em&gt;milli-py&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import milli&#xA;&#xA;index = milli.Index(&#34;path/to/index&#34;)&#xA;index.add_documents([   &#xA;    { &#34;id&#34;: 0, &#34;title&#34;: &#34;Hello world&#34;, &#34;content&#34;: &#34;This is a sample&#34; },&#xA;    { &#34;id&#34;: 1, &#34;title&#34;: &#34;Hello moon&#34;, &#34;content&#34;: &#34;This is another sample&#34; },&#xA;    { &#34;id&#34;: 2, &#34;title&#34;: &#34;Hello sun&#34;, &#34;content&#34;: &#34;This is yet another sample&#34; },&#xA;])&#xA;results = index.search(&#34;wrold&#34;)&#xA;document = index.get_document(results[0])&#xA;assert(document[&#39;title&#39;] == &#34;Hello world&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Full documentation for &lt;em&gt;milli-py&lt;/em&gt; is available at &lt;a href=&#34;https://raw.githubusercontent.com/AlexAltea/milli-py/master/docs/index.md&#34;&gt;&lt;code&gt;docs/index.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;View it online at &lt;a href=&#34;https://github.com/AlexAltea/milli-py/raw/master/docs/index.md&#34;&gt;https://github.com/AlexAltea/milli-py/blob/master/docs/index.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Real-world examples of &lt;em&gt;milli-py&lt;/em&gt; in action:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AlexAltea/curator/raw/master/curator/databases/omdb.py#L9&#34;&gt;Curator&lt;/a&gt;: Searching 140k movies (~10 MB csv, ~140 MB index) in around 36ms to obtain metadata from OMDB and auto-rename/tag movie collections.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Do you have other interesting examples? Let me know!&lt;/p&gt;</summary>
  </entry>
</feed>