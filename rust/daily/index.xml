<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-02T01:43:32Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kaleidawave/ezno</title>
    <updated>2023-03-02T01:43:32Z</updated>
    <id>tag:github.com,2023-03-02:/kaleidawave/ezno</id>
    <link href="https://github.com/kaleidawave/ezno" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A JavaScript compiler and TypeScript checker written in Rust with a focus on static analysis and runtime performance&lt;/p&gt;&lt;hr&gt;&lt;p&gt;A JavaScript compiler and TypeScript checker written in Rust with a focus on static analysis and runtime performance.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://projects.kaleidawave.workers.dev/project/ezno/badge&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project is a workspace consisting of a few crates:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Crate&lt;/th&gt; &#xA;   &lt;th&gt;Lines Of Code &#xA;    &lt;div style=&#34;min-width: 150px&#34;&gt;&#xA;     &lt;div&gt;&lt;/div&gt;&#xA;    &lt;/div&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;parser&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://projects.kaleidawave.workers.dev/project/ezno-parser/badge&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Contains AST definitions, logic for parsing and serializing, and visiting&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- | checker | ![](https://projects.kaleidawave.workers.dev/project/ezno-parser/badge) | Contains logic for validating types in AST, generating in memory type representation, a 7 phase visiting step for extensions and low level interpolation and graphing of code | &#xA;| ezno-web-framework | ![](https://projects.kaleidawave.workers.dev/project/framework/badge) | Visitors and code generation for JSX and reactive expression transformations. | --&gt; &#xA;&lt;p&gt;Read some more detailed posts&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kaleidawave.github.io/posts/introducing-ezno/&#34;&gt;Introducing Ezno&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kaleidawave.github.io/posts/ezno-23/&#34;&gt;Ezno &#39;23&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Experimental&lt;/h2&gt; &#xA;&lt;p&gt;This is an experimental compiler. If you are looking for a stable compiler, Ezno is not the right choice &lt;strong&gt;at the moment&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Type checking&lt;/h2&gt; &#xA;&lt;p&gt;Ezno is a type checker based on TypeScript type annotations.&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Declare interfaces and other type definitions&lt;/li&gt; &#xA; &lt;li&gt;Usage checking: property access, function parameters etc&lt;/li&gt; &#xA; &lt;li&gt;Effects that track mutations across functions&lt;/li&gt; &#xA; &lt;li&gt;Parameter constraint inference&lt;/li&gt; &#xA; &lt;li&gt;Powerful dependent type system&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Differences to checking TSC&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;any&lt;/code&gt; type has no properties on it&lt;/li&gt; &#xA; &lt;li&gt;Type annotations on variables are the &lt;em&gt;reassignment constraint&lt;/em&gt;, not it&#39;s current value. Current value is inferred and is mutable&lt;/li&gt; &#xA; &lt;li&gt;...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;ultimately the differences shouldn&#39;t break existing code and in any case pick up more errors than TSC&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Help contribute&lt;/h2&gt; &#xA;&lt;p&gt;Check out issues. Comment on discussions.&lt;/p&gt;</summary>
  </entry>
</feed>