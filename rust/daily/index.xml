<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-18T01:38:57Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>intel/tsffs</title>
    <updated>2023-09-18T01:38:57Z</updated>
    <id>tag:github.com,2023-09-18:/intel/tsffs</id>
    <link href="https://github.com/intel/tsffs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A snapshotting, coverage-guided fuzzer for software (UEFI, Kernel, firmware, BIOS) built on SIMICS&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/intel/tsffs/main/docs/images/logo.png&#34; alt=&#34;TSFFS Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;TSFFS: Target Software Fuzzer For SIMICS&lt;/h1&gt; &#xA;&lt;p&gt;TSFFS is a snapshotting, coverage-guided fuzzer built on the &lt;a href=&#34;https://www.intel.com/content/www/us/en/developer/articles/tool/simics-simulator.html&#34;&gt;SIMICS&lt;/a&gt; full system simulator. TSFFS makes it easy to fuzz and traige crashes on traditionally challenging targets including UEFI applications, bootloaders, BIOS, kernel modules, and device firmware. TSSFS can even fuzz user-space applications on Linux and Windows. See the &lt;a href=&#34;https://raw.githubusercontent.com/intel/tsffs/main/docs/Requirements.md&#34;&gt;requirements&lt;/a&gt; to find out if TSSFS can fuzz your code.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/intel/tsffs/main/#tsffs-target-software-fuzzer-for-simics&#34;&gt;TSFFS: Target Software Fuzzer For SIMICS&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/intel/tsffs/main/#uefi-fuzzing-demo&#34;&gt;UEFI Fuzzing Demo&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/intel/tsffs/main/#capabilities&#34;&gt;Capabilities&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/intel/tsffs/main/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/intel/tsffs/main/#use-cases&#34;&gt;Use Cases&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/intel/tsffs/main/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/intel/tsffs/main/#running-a-simple-sample-target&#34;&gt;Running a Simple Sample Target&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/intel/tsffs/main/#running-an-edk2-sample-target&#34;&gt;Running an EDK2 Sample Target&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/intel/tsffs/main/#contact&#34;&gt;Contact&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/intel/tsffs/main/#help-wanted--roadmap&#34;&gt;Help Wanted / Roadmap&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/intel/tsffs/main/#why-tsffs&#34;&gt;Why TSFFS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/intel/tsffs/main/#authors&#34;&gt;Authors&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;UEFI Fuzzing Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/intel/tsffs/assets/30083762/60882856-b2a6-4956-9bde-cd133fa5cc15&#34;&gt;https://github.com/intel/tsffs/assets/30083762/60882856-b2a6-4956-9bde-cd133fa5cc15&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Capabilities&lt;/h2&gt; &#xA;&lt;p&gt;This fuzzer is built using &lt;a href=&#34;https://github.com/AFLplusplus/LibAFL&#34;&gt;LibAFL&lt;/a&gt; and SIMICS and takes advantage of several of the state of the art capabilities of both.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Edge coverage guided&lt;/li&gt; &#xA; &lt;li&gt;Snapshotting (fully deterministic)&lt;/li&gt; &#xA; &lt;li&gt;Parallel fuzzing (across cores, machines soon)&lt;/li&gt; &#xA; &lt;li&gt;Easy to add to existing SIMICS projects&lt;/li&gt; &#xA; &lt;li&gt;Triage mode to reproduce and debug crashes&lt;/li&gt; &#xA; &lt;li&gt;Modern fuzzing methodologies: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Redqueen/I2S taint-based mutation&lt;/li&gt; &#xA;   &lt;li&gt;MOpt &amp;amp; Auto-token mutations&lt;/li&gt; &#xA;   &lt;li&gt;More coming soon!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation for this project lives in the &lt;a href=&#34;https://raw.githubusercontent.com/intel/tsffs/main/docs/README.md&#34;&gt;docs&lt;/a&gt; directory of this repository.&lt;/p&gt; &#xA;&lt;h2&gt;Use Cases&lt;/h2&gt; &#xA;&lt;p&gt;TSFFS is focused on several primary use cases:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;UEFI and BIOS code, particulary based on &lt;a href=&#34;https://github.com/tianocore/edk2&#34;&gt;EDKII&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Pre- and early-silicon firmware and device drivers&lt;/li&gt; &#xA; &lt;li&gt;Hardware-dependent kernel and firmware code&lt;/li&gt; &#xA; &lt;li&gt;Fuzzing for complex error conditions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Detailed instructions for setting up and building this project can be found in &lt;a href=&#34;https://raw.githubusercontent.com/intel/tsffs/main/docs/Setup.md&#34;&gt;Setup.md&lt;/a&gt;. You should follow the documentation there to set up the fuzzer before trying to run the sample targets.&lt;/p&gt; &#xA;&lt;h2&gt;Running a Simple Sample Target&lt;/h2&gt; &#xA;&lt;p&gt;We provide a sample target that represents the simplest possible use of the fuzzer. Once you have set up the fuzzer by following the directions &lt;a href=&#34;https://raw.githubusercontent.com/intel/tsffs/main/#setup&#34;&gt;above&lt;/a&gt;, you can run it with (from the root of this repo):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo run --release --features=6.0.169 -- \&#xA;    --corpus /tmp/corpus --solutions solution --log-level INFO --cores 1  \&#xA;    --file examples/harnessing-uefi/rsrc/target.efi:%simics%/target.efi \&#xA;    --file examples/harnessing-uefi/rsrc/fuzz.simics:%simics%/fuzz.simics \&#xA;    --file examples/harnessing-uefi/rsrc/minimal_boot_disk.craff:%simics%/minimal_boot_disk.craff \&#xA;    --package 2096:6.0.70 \&#xA;    --command &#39;COMMAND:run-script &#34;%simics%/fuzz.simics&#34;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to see the visualizer above, you can enable the SIMICS GUI during fuzzing by adding &lt;code&gt;-g/--enable-simics-gui&lt;/code&gt; and if you want a fancy TUI output, add the &lt;code&gt;-t&lt;/code&gt; flag!&lt;/p&gt; &#xA;&lt;h2&gt;Running an EDK2 Sample Target&lt;/h2&gt; &#xA;&lt;p&gt;There are two provided sample targets, &lt;code&gt;hello-world&lt;/code&gt; and &lt;code&gt;x509-parse&lt;/code&gt;. You can run them in the basic configuration with the commands below, respectively.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo run --release --features=6.0.169 -- \&#xA;  -c /tmp/hello-world-corpus/ -o /tmp/hello-world-solution/ -l ERROR -t -C 1 \&#xA;  -P 2096:6.0.70 \&#xA;  -f examples/hello-world/rsrc/HelloWorld.efi:%simics%/targets/hello-world/HelloWorld.efi \&#xA;  -f examples/hello-world/rsrc/app.py:%simics%/scripts/app.py \&#xA;  -f examples/hello-world/rsrc/app.yml:%simics%/scripts/app.yml \&#xA;  -f examples/hello-world/rsrc/minimal_boot_disk.craff:%simics%/targets/hello-world/minimal_boot_disk.craff \&#xA;  -f examples/hello-world/rsrc/run_uefi_app.nsh:%simics%/targets/hello-world/run_uefi_app.nsh \&#xA;  -f examples/hello-world/rsrc/run-uefi-app.simics:%simics%/targets/hello-world/run-uefi-app.simics \&#xA;  -x CONFIG:%simics%/scripts/app.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo run --release --features=6.0.169 -- \&#xA;  -c /tmp/x509-parse-corpus/ -o /tmp/x509-parse-solution/ -l ERROR -t -C 1 \&#xA;  -P 2096:6.0.70 \&#xA;  -f examples/x509-parse/rsrc/X509Parse.efi:%simics%/targets/x509-parse/X509Parse.efi \&#xA;  -f examples/x509-parse/rsrc/app.py:%simics%/scripts/app.py \&#xA;  -f examples/x509-parse/rsrc/app.yml:%simics%/scripts/app.yml \&#xA;  -f examples/x509-parse/rsrc/minimal_boot_disk.craff:%simics%/targets/x509-parse/minimal_boot_disk.craff \&#xA;  -f examples/x509-parse/rsrc/run_uefi_app.nsh:%simics%/targets/x509-parse/run_uefi_app.nsh \&#xA;  -f examples/x509-parse/rsrc/run-uefi-app.simics:%simics%/targets/x509-parse/run-uefi-app.simics \&#xA;  -x CONFIG:%simics%/scripts/app.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;If you discover a non-security issue or problem, please file an &lt;a href=&#34;https://github.com/intel/tsffs/issues&#34;&gt;issue&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;The best place to ask questions about and get help using TSFFS is in the &lt;a href=&#34;https://discord.gg/gCraWct&#34;&gt;Awesome Fuzzing&lt;/a&gt; Discord server. If you prefer, you can email the &lt;a href=&#34;https://raw.githubusercontent.com/intel/tsffs/main/#authors&#34;&gt;authors&lt;/a&gt;. Questions we receive are periodically added from both Discord and email to the &lt;a href=&#34;https://raw.githubusercontent.com/intel/tsffs/main/docs/FAQ.md&#34;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please do not create issues or ask publicly about possible security issues you discover in TSFFS. Instead, see our &lt;a href=&#34;https://raw.githubusercontent.com/intel/tsffs/main/SECURITY.md&#34;&gt;Security Policy&lt;/a&gt; and follow the linked guidelines.&lt;/p&gt; &#xA;&lt;h2&gt;Help Wanted / Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/intel/tsffs/issues?q=is%3Aopen+is%3Aissue+label%3Afeature&#34;&gt;issues&lt;/a&gt; for a roadmap of planned features and enhancements. Help is welcome for any features listed here. If someone is assigned an issue you&#39;d like to work on, please ping them to avoid duplicating effort!&lt;/p&gt; &#xA;&lt;h2&gt;Why TSFFS&lt;/h2&gt; &#xA;&lt;p&gt;There are several tools capable of fuzzing firmware and UEFI code. Notably, the &lt;a href=&#34;https://github.com/tianocore/edk2-staging/tree/HBFA&#34;&gt;HBFA&lt;/a&gt; project and the &lt;a href=&#34;https://github.com/IntelLabs/kAFL&#34;&gt;kAFL&lt;/a&gt; project enable system software fuzzing with various tradeoffs.&lt;/p&gt; &#xA;&lt;p&gt;HBFA is very fast, and enables fuzzing with sanitizers in Linux userspace. However, it requires stubs for any hardware interactions as well as the ability to compile code with instrumentation. For teams with resources to create a working HBFA configuration, it should be used alongside TSFFS to enable additional error condition detection.&lt;/p&gt; &#xA;&lt;p&gt;kAFL is also extremely fast, and is hypervisor based which allows deterministic snapshotting of systems under test. This also makes it ideal for very complex systems and system-of-systems fuzzing, where interactions between components or the use of real hardware is necessary. kAFL suffers from a similar limitation as HBFA in that it requires working device stubs or simulation to be implemented in QEMU, and additionally requires a patched kernel to run the required KVM modifications.&lt;/p&gt; &#xA;&lt;p&gt;Both of these tools should be used where possible to take advantage of their unique capabilities, but TSFFS aims to reduce the barrier to fuzzing low-level systems software. It is slower (though not unacceptably so) than HBFA or kAFL, and is not (yet) capable of leveraging sanitizers. In exchange, using it is as simple as adding a few lines of code to a SIMICS script and ten or less lines of code to your firmware source code. In addition, because it is based on SIMICS, the tool of choice of firmware developers, the models and configurations for the code under test can be used as they are, and developers can continue to use familiar tools to reduce the lift of enabling fuzzing.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;p&gt;Brandon Marken Ph.D. &lt;a href=&#34;mailto:brandon.marken@intel.com&#34;&gt;brandon.marken@intel.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Robert Geunzel Ph.D. &lt;a href=&#34;mailto:robert.geunzel@intel.com&#34;&gt;robert.geunzel@intel.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Rowan Hart &lt;a href=&#34;mailto:rowan.hart@intel.com&#34;&gt;rowan.hart@intel.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>