<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-25T01:40:49Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sigma0-xyz/zkbitcoin</title>
    <updated>2024-01-25T01:40:49Z</updated>
    <id>tag:github.com,2024-01-25:/sigma0-xyz/zkbitcoin</id>
    <link href="https://github.com/sigma0-xyz/zkbitcoin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;zkBitcoin: zero-knowledge proofs on Bitcoin!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;zkBitcoin&lt;/h1&gt; &#xA;&lt;p&gt;Use &lt;strong&gt;zero-knowledge applications (zkapps)&lt;/strong&gt; on Bitcoin! (&lt;strong&gt;Currently only on testnet.&lt;/strong&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/sigma0-xyz/zkbitcoin/assets/1316043/5fe31a43-1775-4ebb-b6ac-510651e8b08a&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;How does it work&lt;/strong&gt;? Write your zkapp in &lt;a href=&#34;https://github.com/iden3/circom&#34;&gt;circom&lt;/a&gt; and deploy it on Bitcoin by sending a transaction to our multi-party wallet run by a committee of nodes.&lt;/p&gt; &#xA;&lt;p&gt;To use a zkapp, provide a correct proof of execution using &lt;a href=&#34;https://github.com/iden3/snarkjs&#34;&gt;snarkjs&lt;/a&gt; to our multi-party wallet which will trigger a threshold signature, eventually allowing funds to move out of the zkapp.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sigma0-xyz/zkbitcoin/main/whitepaper.pdf&#34;&gt;Check the whitepaper here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Jump straight to &lt;a href=&#34;https://raw.githubusercontent.com/sigma0-xyz/zkbitcoin/main/#usage&#34;&gt;usage&lt;/a&gt; if you want to see some examples, but make sure to read this section otherwise things won&#39;t work!&lt;/p&gt; &#xA;&lt;h3&gt;Circom/snarkjs&lt;/h3&gt; &#xA;&lt;p&gt;We build on top of the well-known &lt;a href=&#34;https://github.com/iden3/circom&#34;&gt;circom&lt;/a&gt;/&lt;a href=&#34;https://github.com/iden3/snarkjs&#34;&gt;snarkjs&lt;/a&gt; stack.&lt;/p&gt; &#xA;&lt;h3&gt;Bitcoin wallet&lt;/h3&gt; &#xA;&lt;p&gt;On top that, you&#39;ll need your own Bitcoin node/wallet. This application will perform queries to your node/wallet in order to fund your zkapp transactions.&lt;/p&gt; &#xA;&lt;p&gt;All the following commands expects the following environment variables to be set so that it can communicate with your node/wallet:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export RPC_WALLET=&#34;walletname&#34;&#xA;export RPC_ADDRESS=&#34;http://127.0.01:18331&#34;&#xA;export RPC_AUTH=&#34;username:password&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;zkbtc: the zkBitcoin CLI&lt;/h3&gt; &#xA;&lt;p&gt;To install &lt;code&gt;zkbtc&lt;/code&gt;, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cargo install --git https://github.com/sigma0-xyz/zkbitcoin.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;There are two types of zkapps: &lt;a href=&#34;https://raw.githubusercontent.com/sigma0-xyz/zkbitcoin/main/#stateless-zkapps&#34;&gt;stateless&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/sigma0-xyz/zkbitcoin/main/#stateful-zkapps&#34;&gt;stateful&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Stateless zkapps&lt;/h3&gt; &#xA;&lt;p&gt;A stateless zkapp is single-use, and the bitcoin it locks can be redeemed by anyone who can provide a proof of correct execution. An example of a stateless zkapp is in &lt;a href=&#34;https://raw.githubusercontent.com/sigma0-xyz/zkbitcoin/main/examples/circuit/stateless.circom&#34;&gt;&lt;code&gt;examples/circuit/stateless.circom&lt;/code&gt;&lt;/a&gt; (which releases funds to anyone who can find the preimage of a hash function). A stateless zkapp must always contains one public input that authenticates the transaction that spends it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-circom&#34;&gt;// circom code&#xA;template Main() {&#xA;    signal input truncated_txid;&#xA;    // TRUNCATED...&#xA;}&#xA;component main{public [truncated_txid]} = Main();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The zkapp doesn&#39;t have to do anything with the &lt;code&gt;truncated_txid&lt;/code&gt; field (although it can if it wants to).&lt;/p&gt; &#xA;&lt;p&gt;You can deploy a stateless zkapp with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ zkbtc deploy-zkapp --circom-circuit-path examples/circuit/stateless.circom --satoshi-amount 1000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will lock 1,000 satoshis in the zkapp and return the transaction ID of the transaction that deployed the zkapp. A stateless zkapp can be referenced by that transaction ID.&lt;/p&gt; &#xA;&lt;p&gt;Bob can then unlock the funds from the stateless zkapp with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ zkbtc use-zkapp --txid &#34;e793bdd8dfdd9912d971790a5f385ad3f1215dce97e25dbefe5449faba632836&#34; --circom-circuit-path examples/circuit/stateless.circom --proof-inputs &#39;{&#34;preimage&#34;:[&#34;1&#34;]}&#39; --recipient-address &#34;tb1q6nkpv2j9lxrm6h3w4skrny3thswgdcca8cx9k6&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Stateful zkapps&lt;/h3&gt; &#xA;&lt;p&gt;A stateful zkapp is a zkapp that has a state, and which state can be updated without consuming the zkapp.&lt;/p&gt; &#xA;&lt;p&gt;An example of a stateful zkapp is in &lt;a href=&#34;https://raw.githubusercontent.com/sigma0-xyz/zkbitcoin/main/examples/circuit/stateful.circom&#34;&gt;&lt;code&gt;examples/circuit/stateful.circom&lt;/code&gt;&lt;/a&gt;. A stateful zkapp must always contains a number of additional public inputs, allowing an execution to authenticate the zkapp state transition, as well as the amounts being withdrawn and deposited:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-circom&#34;&gt;// circom code&#xA;template Main() {&#xA;    signal output new_state;&#xA;    signal input prev_state;&#xA;    signal input truncated_txid; // this should not affect output&#xA;    signal input amount_out;&#xA;    signal input amount_in;&#xA;    // TRUNCATED...&#xA;}&#xA;component main{public [prev_state, truncated_txid, amount_out, amount_in]} = Main();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can deploy a stateful zkapp with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ zkbtc deploy-zkapp --circom-circuit-path examples/circuit/stateful.circom --initial-state &#34;1&#34; --satoshi-amount 1000     &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use a stateful zkapps with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ zkbtc use-zkapp --circom-circuit-path examples/circuit/stateful.circom --proof-inputs &#39;{&#34;amount_in&#34;:[&#34;1000&#34;], &#34;amount_out&#34;:[&#34;1000&#34;]}&#39; --recipient-address &#34;tb1q6vjawwska63qxf77rrm5uwqev0ma8as8d0mkrt&#34; --txid &#34;76763d6130ee460ede2739e0f38ea4d61cc940b00af5eab83e5afb0fcc837b91&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;specifying the following inputs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;amount_out&lt;/code&gt;: amount being withdrawn&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;amount_in&lt;/code&gt;: amount being deposited&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Other inputs will be automatically filled in (for example, it will use the zkapp&#39;s state as &lt;code&gt;prev_state&lt;/code&gt; input).&lt;/p&gt; &#xA;&lt;h2&gt;Get information about a zkapp&lt;/h2&gt; &#xA;&lt;p&gt;You can retrieve information about a specific zkapp by running the following command with the zkapp&#39;s transaction id:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ zkbtc get-zkapp 7f08eeb5a4cba9bed161ba54bb28db4fc6ce51273e48d40969d5d89fdab61770&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;List all deployed zkapps&lt;/h2&gt; &#xA;&lt;p&gt;You can list all currently-deployed zkapps in the following way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ zkbtc list-zkapps&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tell me more&lt;/h2&gt; &#xA;&lt;p&gt;You can read more about zkBitcoin in &lt;a href=&#34;https://raw.githubusercontent.com/sigma0-xyz/zkbitcoin/main/whitepaper.pdf&#34;&gt;our whitepaper&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/sigma0-xyz/zkbitcoin/main/docs/&#34;&gt;our documentation&lt;/a&gt;, and about advanced usage in &lt;a href=&#34;https://raw.githubusercontent.com/sigma0-xyz/zkbitcoin/main/DEVELOPER.md&#34;&gt;our developer documentation&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>trumank/uesave-rs</title>
    <updated>2024-01-25T01:40:49Z</updated>
    <id>tag:github.com,2024-01-25:/trumank/uesave-rs</id>
    <link href="https://github.com/trumank/uesave-rs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rust library to read and write Unreal Engine save files&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;uesave&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.rs/uesave&#34;&gt;&lt;img src=&#34;https://img.shields.io/docsrs/uesave&#34; alt=&#34;docs.rs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/uesave&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/uesave&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A library for reading and writing Unreal Engine save files (commonly referred to as GVAS).&lt;/p&gt; &#xA;&lt;p&gt;It has been tested on an extensive set of object structures and can fully read and write Deep Rock Galactic save files (and likely a lot more).&lt;/p&gt; &#xA;&lt;p&gt;There is a small binary utility to quickly convert saves to and from a plain text JSON format which can be used for manual save editing.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cargo install --git https://github.com/trumank/uesave-rs.git&#xA;$ uesave --help&#xA;Usage: uesave &amp;lt;COMMAND&amp;gt;&#xA;&#xA;Commands:&#xA;  to-json    Convert binary save to plain text JSON&#xA;  from-json  Convert JSON back to binary save&#xA;  edit       Launch $EDITOR to edit a save file as JSON in place&#xA;  help       Print this message or the help of the given subcommand(s)&#xA;&#xA;Options:&#xA;  -h, --help     Print help information&#xA;  -V, --version  Print version information&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1144160/210157064-234da188-ad20-416f-9ea5-7d2956168a20.svg?sanitize=true&#34; alt=&#34;edit&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Alternative projects&lt;/h2&gt; &#xA;&lt;p&gt;in no particular order:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rob0rt/drg-save-parser&#34;&gt;https://github.com/rob0rt/drg-save-parser&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ch1pset/UESaveTool&#34;&gt;https://github.com/ch1pset/UESaveTool&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/13xforever/gvas-converter&#34;&gt;https://github.com/13xforever/gvas-converter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RagingLightning/gvas-converter&#34;&gt;https://github.com/RagingLightning/gvas-converter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SparkyTD/UnrealEngine.Gvas&#34;&gt;https://github.com/SparkyTD/UnrealEngine.Gvas&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/localcc/gvas&#34;&gt;https://github.com/localcc/gvas&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oberien/gvas-rs&#34;&gt;https://github.com/oberien/gvas-rs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/scottanderson/railroad.studio&#34;&gt;https://github.com/scottanderson/railroad.studio&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CrystalFerrai/UeSaveGame&#34;&gt;https://github.com/CrystalFerrai/UeSaveGame&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/agc93/unsave&#34;&gt;https://github.com/agc93/unsave&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>jasonjmcghee/plock</title>
    <updated>2024-01-25T01:40:49Z</updated>
    <id>tag:github.com,2024-01-25:/jasonjmcghee/plock</id>
    <link href="https://github.com/jasonjmcghee/plock" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Use an LLM from anywhere you can type (uses Ollama by default, but can be used with anything that can write to stdout)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Plock&lt;/h1&gt; &#xA;&lt;p&gt;Use an LLM (or anything else that can stream to stdout) directly from literally anywhere you can type. Outputs in real time.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/jasonjmcghee/plock/assets/1522149/737cb647-69aa-426c-884d-bbe29bac0637&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Write a prompt, select it, and (by default) hit &lt;code&gt;Cmd+Shift+.&lt;/code&gt;. It will replace your prompt with the output in a streaming fashion.&lt;/p&gt; &#xA;&lt;p&gt;Also! You can first put something on your clipboard (as in copy some text) before writing / selecting your prompt, and it (by default) &lt;code&gt;Cmd+Shift+/&lt;/code&gt; and it will use the copied text as context to answer your prompt.&lt;/p&gt; &#xA;&lt;p&gt;For Linux, use &lt;code&gt;Ctrl&lt;/code&gt; instead of &lt;code&gt;Cmd&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;100% Local&lt;/strong&gt; by default. (If you want to use an API or something, you can call any shell script you want specified in &lt;code&gt;settings.json&lt;/code&gt; - just set &lt;code&gt;ollama.enabled&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; in &lt;code&gt;settings.json&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;I show an example &lt;code&gt;settings.json&lt;/code&gt; in &lt;a href=&#34;https://raw.githubusercontent.com/jasonjmcghee/plock/main/#settings&#34;&gt;Settings&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: Something not work properly? I won&#39;t know! Please log an issue or take a crack at fixing it yourself and submitting a PR! Have feature ideas? Log an issue!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Demo using Ollama&lt;/h2&gt; &#xA;&lt;a href=&#34;https://www.loom.com/share/fed267e695d145c88e6bff7e631da8e0&#34;&gt; &lt;img style=&#34;max-width:300px;&#34; src=&#34;https://cdn.loom.com/sessions/thumbnails/fed267e695d145c88e6bff7e631da8e0-with-play.gif&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;(in the video I mention &lt;a href=&#34;https://github.com/jasonjmcghee/rem&#34;&gt;rem&lt;/a&gt;, another project I&#39;m working on)&lt;/p&gt; &#xA;&lt;h2&gt;Demo using GPT-3.5 and GPT-4&lt;/h2&gt; &#xA;&lt;a href=&#34;https://www.loom.com/share/756220f3f5e249d5b4d5b759e9f9add3&#34;&gt; &lt;img style=&#34;max-width:300px;&#34; src=&#34;https://cdn.loom.com/sessions/thumbnails/756220f3f5e249d5b4d5b759e9f9add3-with-play.gif&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;If you are going to use this with remote APIs, consider environment variables for your API keys... make sure they exist wherever you launch, or directly embed them (just don&#39;t push that code anywhere)&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://github.com/jmorganca/ollama&#34;&gt;ollama&lt;/a&gt; and make sure to run &lt;code&gt;ollama pull openhermes2.5-mistral&lt;/code&gt; or swap it out in settings for something else.&lt;/p&gt; &#xA;&lt;p&gt;Launch &#34;plock&#34;&lt;/p&gt; &#xA;&lt;p&gt;Shortcuts:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Ctrl / Cmd + Shift + .&lt;/code&gt;: Replace the selected text with the output of the model.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Ctrl / Cmd + Shift + /&lt;/code&gt;: Feed whatever is on your clipboard as &#34;context&#34; and the replace the selected text with the output of the model.&lt;/p&gt; &#xA;&lt;p&gt;(these two are customizable in &lt;code&gt;settings.json&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Escape&lt;/code&gt;: Stop any streaming output&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Mac&lt;/strong&gt; will request access to keyboard accessibility.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt; (untested), may require X11 libs for clipboard stuff and key simulation using enigo. &lt;a href=&#34;https://github.com/enigo-rs/enigo/tree/main#runtime-dependencies&#34;&gt;Helpful instructions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Also &lt;a href=&#34;https://tauri.app/v1/guides/features/system-tray/#linux-setup&#34;&gt;system tray icons require some extras&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt; (untested), you&#39;ll need to swap out Ollama for something else, as it doesn&#39;t support windows yet.&lt;/p&gt; &#xA;&lt;h2&gt;[Settings]&lt;/h2&gt; &#xA;&lt;p&gt;There is a &lt;code&gt;settings.json&lt;/code&gt; file which you can edit to change shortcuts, the model, prompts, whether to use shell scripts and what they are, and other settings.&lt;/p&gt; &#xA;&lt;p&gt;After updating, click the tray icon and select &#34;Load Settings&#34; or restart it.&lt;/p&gt; &#xA;&lt;p&gt;On mac, It&#39;s at &lt;code&gt;~/Library/Application Support/today.jason.plock/settings.json&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On linux, I think it&#39;s &lt;code&gt;~/$XDG_DATA_HOME/today.jason.plock/settings.json&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Windows, I think it&#39;s &lt;code&gt;~\AppData\Local\today.jason.plock\settings.json&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Correct me if any of these are wrong.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Show Example&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;environment&#34;: {},&#xA;  &#34;ollama&#34;: {&#xA;    &#34;enabled&#34;: true,&#xA;    &#34;ollama_model&#34;: &#34;openhermes2.5-mistral&#34;&#xA;  },&#xA;  &#34;custom_commands&#34;: {&#xA;    &#34;index&#34;: 0,&#xA;    &#34;custom_commands&#34;: [&#xA;      {&#xA;        &#34;name&#34;: &#34;gpt&#34;,&#xA;        &#34;command&#34;: [&#xA;          &#34;bash&#34;,&#xA;          &#34;/Users/jason/workspace/plock/scripts/gpt.sh&#34;&#xA;        ]&#xA;      }&#xA;    ]&#xA;  },&#xA;  &#34;custom_prompts&#34;: {&#xA;    &#34;basic_index&#34;: 0,&#xA;    &#34;with_context_index&#34;: 1,&#xA;    &#34;custom_prompts&#34;: [&#xA;      {&#xA;        &#34;name&#34;: &#34;default basic&#34;,&#xA;        &#34;prompt&#34;: &#34;Say hello, then {}&#34;&#xA;      },&#xA;      {&#xA;        &#34;name&#34;: &#34;default with context&#34;,&#xA;        &#34;prompt&#34;: &#34;I will ask you to do something. Below is some extra context to help do what I ask. --------- {} --------- Given the above context, please, {}. DO NOT OUTPUT ANYTHING ELSE.&#34;&#xA;      }&#xA;    ]&#xA;  },&#xA;  &#34;shortcuts&#34;: {&#xA;    &#34;basic&#34;: &#34;Command+Shift+.&#34;,&#xA;    &#34;with_context&#34;: &#34;Command+Shift+/&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Building Plock&lt;/h2&gt; &#xA;&lt;p&gt;If you don&#39;t have apple silicon or don&#39;t want to blindly trust binaries (you shouldn&#39;t), here&#39;s how you can build it yourself!&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Node.js (v14 or later)&lt;/li&gt; &#xA; &lt;li&gt;Rust (v1.41 or later)&lt;/li&gt; &#xA; &lt;li&gt;Bun (latest version)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation Steps&lt;/h2&gt; &#xA;&lt;h3&gt;Node.js&lt;/h3&gt; &#xA;&lt;p&gt;Download from: &lt;a href=&#34;https://nodejs.org/&#34;&gt;https://nodejs.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Rust&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh&#xA;source $HOME/.cargo/env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;del&gt;Bun&lt;/del&gt; NPM&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Whattt?? Why?&lt;/em&gt; - well, windows doesn&#39;t support &lt;code&gt;bun&lt;/code&gt; in github actions afaict. So, I&#39;m using npm instead.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nodejs.org/en/download/package-manager&#34;&gt;How to Install Node&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Project Setup&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone &amp;lt;repo_url&amp;gt;&#xA;cd path/to/project&#xA;npm install&#xA;npm run tauri dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run tauri build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Another demo&lt;/h2&gt; &#xA;&lt;p&gt;Another demo where I use the perplexity shell script to generate an answer super fast. Not affiliated, was just replying to a thread lol&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jasonjmcghee/plock/assets/1522149/6166af73-545f-4a8e-ad46-ea8aacd84969&#34;&gt;https://github.com/jasonjmcghee/plock/assets/1522149/6166af73-545f-4a8e-ad46-ea8aacd84969&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Secrets&lt;/h2&gt; &#xA;&lt;p&gt;Curious folks might be wondering what &lt;code&gt;ocr&lt;/code&gt; feature is. I took a crack at taking a screenshot, running OCR, and using that for context, instead of copying text manually. Long story short, rusty-tesseract &lt;em&gt;really&lt;/em&gt; dissapointed me, which is awkward b/c it&#39;s core to &lt;a href=&#34;https://github.com/jasonjmcghee/xrem&#34;&gt;xrem&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If someone wants to figure this out... this could be really cool, especially with multi-modal models.&lt;/p&gt;</summary>
  </entry>
</feed>