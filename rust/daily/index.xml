<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-29T01:36:16Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>gimli-rs/object</title>
    <updated>2024-06-29T01:36:16Z</updated>
    <id>tag:github.com,2024-06-29:/gimli-rs/object</id>
    <link href="https://github.com/gimli-rs/object" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A unified interface for reading and writing object file formats&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;object&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;code&gt;object&lt;/code&gt; crate provides a unified interface to working with object files across platforms. It supports reading relocatable object files and executable files, and writing COFF/ELF/Mach-O/XCOFF relocatable object files and ELF/PE executable files.&lt;/p&gt; &#xA;&lt;p&gt;For reading files, it provides multiple levels of support:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;raw struct definitions suitable for zero copy access&lt;/li&gt; &#xA; &lt;li&gt;low level APIs for accessing the raw structs (&lt;a href=&#34;https://raw.githubusercontent.com/gimli-rs/object/master/crates/examples/src/readobj/&#34;&gt;example&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;a higher level unified API for accessing common features of object files, such as sections and symbols (&lt;a href=&#34;https://raw.githubusercontent.com/gimli-rs/object/master/crates/examples/src/objdump.rs&#34;&gt;example&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Supported file formats for reading: ELF, Mach-O, Windows PE/COFF, Wasm, XCOFF, and Unix archive.&lt;/p&gt; &#xA;&lt;p&gt;For writing files, it provides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;low level writers for ELF, PE, and COFF&lt;/li&gt; &#xA; &lt;li&gt;higher level builder for ELF (&lt;a href=&#34;https://raw.githubusercontent.com/gimli-rs/object/master/crates/rewrite/src&#34;&gt;example&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;a unified API for writing relocatable object files (ELF, Mach-O, COFF, XCOFF) (&lt;a href=&#34;https://raw.githubusercontent.com/gimli-rs/object/master/crates/examples/src/bin/simple_write.rs&#34;&gt;example&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example for unified read API&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use object::{Object, ObjectSection};&#xA;use std::error::Error;&#xA;use std::fs;&#xA;&#xA;/// Reads a file and displays the name of each section.&#xA;fn main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn Error&amp;gt;&amp;gt; {&#xA;    let binary_data = fs::read(&#34;path/to/binary&#34;)?;&#xA;    let file = object::File::parse(&amp;amp;*binary_data)?;&#xA;    for section in file.sections() {&#xA;        println!(&#34;{}&#34;, section.name()?);&#xA;    }&#xA;    Ok(())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/gimli-rs/object/master/crates/examples&#34;&gt;&lt;code&gt;crates/examples&lt;/code&gt;&lt;/a&gt; for more examples.&lt;/p&gt; &#xA;&lt;h2&gt;Minimum Supported Rust Version (MSRV)&lt;/h2&gt; &#xA;&lt;p&gt;Changes to MSRV are considered breaking changes. We are conservative about changing the MSRV, but sometimes are required to due to dependencies. The MSRV is 1.65.0.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under either of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apache License, Version 2.0 (&lt;a href=&#34;https://raw.githubusercontent.com/gimli-rs/object/master/LICENSE-APACHE&#34;&gt;&lt;code&gt;LICENSE-APACHE&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;https://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;MIT license (&lt;a href=&#34;https://raw.githubusercontent.com/gimli-rs/object/master/LICENSE-MIT&#34;&gt;&lt;code&gt;LICENSE-MIT&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;https://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;at your option.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.&lt;/p&gt;</summary>
  </entry>
</feed>