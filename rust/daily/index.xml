<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-09T01:36:01Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>aripiprazole/rinha-de-compiler</title>
    <updated>2023-09-09T01:36:01Z</updated>
    <id>tag:github.com,2023-09-09:/aripiprazole/rinha-de-compiler</id>
    <link href="https://github.com/aripiprazole/rinha-de-compiler" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ü•ñ | Rinha de compiladores (ou interpretadores kkkk&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aripiprazole/rinha-de-compiler/main/img/banner.png&#34; alt=&#34;banner&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/Discord-7289DA?style=for-the-badge&amp;amp;logo=discord&amp;amp;logoColor=white&#34; alt=&#34;https://img.shields.io/badge/Discord-7289DA?style=for-the-badge&amp;amp;logo=discord&amp;amp;logoColor=white&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;Introdu√ß√£o&lt;/h1&gt; &#xA;&lt;p&gt;O ideal da rinha √© fazer um interpretador ou compilador que rode em uma maquina com 2 n√∫cleos e 2G de RAM.&lt;/p&gt; &#xA;&lt;p&gt;O seu interpretador ou compilador deve trabalhar com algo chamado &#34;√°rvore sint√°tica abstrata&#34; que est√° armazenada no formato JSON. Essa √°rvore sint√°tica abstrata ser√° gerada por n√≥s usando uma ferramenta espec√≠fica dispon√≠vel neste reposit√≥rio.&lt;/p&gt; &#xA;&lt;p&gt;Sua responsabilidade na tarefa √© receber esse JSON que cont√©m a √°rvore abstrata e, em seguida, interpretar ou compilar o programa de acordo com as informa√ß√µes fornecidas na √°rvore abstrata.&lt;/p&gt; &#xA;&lt;p&gt;Simplificando:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;N√≥s te damos um JSON com uma √°rvore dentro&lt;/li&gt; &#xA; &lt;li&gt;Voce roda o JSON&lt;/li&gt; &#xA; &lt;li&gt;Voce fica feliz que apareceu o resultado.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Para executar&lt;/h2&gt; &#xA;&lt;p&gt;Depois ser√° adicionado como executar&lt;/p&gt; &#xA;&lt;h2&gt;Como testar&lt;/h2&gt; &#xA;&lt;p&gt;Para testar voc√™ pode usar o arquivo &lt;code&gt;files/fib.rinha&lt;/code&gt; e gerar com o programa que disponibilizamos aqui para um JSON ou voc√™ pode usar diretamente o JSON que est√° em &lt;code&gt;files/fib.json&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Durante a rinha n√≥s iremos adicionar outros testes :)&lt;/p&gt; &#xA;&lt;h2&gt;Requisitos&lt;/h2&gt; &#xA;&lt;p&gt;Voc√™ tem que fazer um PR, alterando o arquivo &lt;a href=&#34;https://raw.githubusercontent.com/aripiprazole/rinha-de-compiler/main/PARTICIPANTS.md&#34;&gt;PARTICIPANTS.md&lt;/a&gt;, com uma nova linha e seu reposit√≥rio. Talvez isso seja mudado depois (fique atento).&lt;/p&gt; &#xA;&lt;p&gt;Seu reposit√≥rio ter√° que ter uma imagem no root do reposit√≥rio, e buildaremos a imagem no rankeamento.&lt;/p&gt; &#xA;&lt;h2&gt;Especifica√ß√£o&lt;/h2&gt; &#xA;&lt;p&gt;A linguagem ter√° que rodar com base em algum arquivo, que √© o JSON da AST da rinha especificado &lt;a href=&#34;https://github.com/aripiprazole/rinha-de-compiler/raw/main/SPECS.md&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;O arquivo ter√° que ser lido de &lt;code&gt;/var/rinha/source.rinha.json&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Poder√° tamb√©m ser lido de &lt;code&gt;/var/rinha/source.rinha&lt;/code&gt;, se voc√™ quiser ler a AST na m√£o.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;A linguagem √© uma linguagem de programa√ß√£o din√¢mica, como JavaScript, Ruby, etc.&lt;/p&gt; &#xA;&lt;p&gt;O projeto da rinha de compilador, tem um &#34;interpretador&#34; do json, que retorna um AST, e o c√≥digo ter√° que ser testado de diferentes formas, como outros algor√≠timos al√©m de Fibonacci.&lt;/p&gt; &#xA;&lt;h2&gt;Exemplo&lt;/h2&gt; &#xA;&lt;p&gt;Exemplo com fibonacci&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;let fib = fn (n) =&amp;gt; {&#xA;  if (n &amp;lt; 2) {&#xA;    n&#xA;  } else {&#xA;    fib(n - 1) + fib(n - 2)&#xA;  }&#xA;};&#xA;&#xA;print(&#34;fib: &#34; + fib(10))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Competi√ß√£o&lt;/h1&gt; &#xA;&lt;p&gt;O prazo para mandar os PRs, √© at√© o dia 23/09, depois disso ser√£o negados o projeto.&lt;/p&gt; &#xA;&lt;p&gt;Ser√° liberado para ajustes at√© o dia 25/09, voc√™ poder√° arrumar sua implementa√ß√£o, depois da publica√ß√£o dos testes.&lt;/p&gt; &#xA;&lt;h2&gt;Recursos&lt;/h2&gt; &#xA;&lt;p&gt;Alguns recursos √∫teis para aprender como fazer seu pr√≥prio interpretador ou compilador s√£o:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=t77ThZNCJGY&#34;&gt;https://www.youtube.com/watch?v=t77ThZNCJGY&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=LCslqgM48D4&#34;&gt;https://www.youtube.com/watch?v=LCslqgM48D4&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ruslanspivak.com/lsbasi-part1/&#34;&gt;https://ruslanspivak.com/lsbasi-part1/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLjcmNukBom6--0we1zrpoUE2GuRD-Me6W&#34;&gt;https://www.youtube.com/playlist?list=PLjcmNukBom6--0we1zrpoUE2GuRD-Me6W&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.plai.org/&#34;&gt;https://www.plai.org/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Fique ligado que alguns v√≠deos e posts √∫teis chegar√£o em breve.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>eza-community/eza</title>
    <updated>2023-09-09T01:36:01Z</updated>
    <id>tag:github.com,2023-09-09:/eza-community/eza</id>
    <link href="https://github.com/eza-community/eza" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modern, maintained replacement for ls&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;eza&lt;/h1&gt; &#xA; &lt;p&gt;eza is a modern, maintained replacement for ls, built on &lt;a href=&#34;https://github.com/ogham/exa&#34;&gt;exa&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;README Sections:&lt;/strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/eza-community/eza/main/#options&#34;&gt;Options&lt;/a&gt; ‚Äî &lt;a href=&#34;https://raw.githubusercontent.com/eza-community/eza/main/#installation&#34;&gt;Installation&lt;/a&gt; ‚Äî &lt;a href=&#34;https://raw.githubusercontent.com/eza-community/eza/main/#development&#34;&gt;Development&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://nixos.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Built_With-Nix-5277C3.svg?logo=nixos&amp;amp;labelColor=73C3D5&#34; alt=&#34;Built with Nix&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/eza-community/eza/main/CODE_OF_CONDUCT.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Contributor%20Covenant-2.1-4baaaa.svg?sanitize=true&#34; alt=&#34;Contributor Covenant&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://matrix.to/#/#eza:gitter.im&#34;&gt;&lt;img alt=&#34;Gitter&#34; src=&#34;https://img.shields.io/gitter/room/eza-community/eza?logo=element&amp;amp;link=https%3A%2F%2Fapp.gitter.im%2F%23%2Froom%2F%23eza%3Agitter.im&amp;amp;link=Gitter%20matrix%20room%20for%20Eza&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/eza-community/eza/actions/workflows/unit-tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/eza-community/eza/actions/workflows/unit-tests.yml/badge.svg?sanitize=true&#34; alt=&#34;Unit tests&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/crates/v/eza?link=https%3A%2F%2Fcrates.io%2Fcrates%2Feza&#34; alt=&#34;Crates.io&#34;&gt; &lt;img src=&#34;https://img.shields.io/crates/l/eza?link=https%3A%2F%2Fgithub.com%2Feza-community%2Feza%2Fblob%2Fmain%2FLICENCE&#34; alt=&#34;Crates.io&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/eza-community/eza/main/screenshots.png&#34; alt=&#34;Screenshots of eza&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;eza&lt;/strong&gt; is a modern, maintained replacement for the venerable file-listing command-line program &lt;code&gt;ls&lt;/code&gt; that ships with Unix and Linux operating systems, giving it more features and better defaults. It uses colours to distinguish file types and metadata. It knows about symlinks, extended attributes, and Git. And it‚Äôs &lt;strong&gt;small&lt;/strong&gt;, &lt;strong&gt;fast&lt;/strong&gt;, and just &lt;strong&gt;one single binary&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By deliberately making some decisions differently, eza attempts to be a more featureful, more user-friendly version of &lt;code&gt;ls&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;eza&lt;/strong&gt; features not in exa (non-exhaustive):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixes &lt;a href=&#34;https://github.com/eza-community/eza/issues/66#issuecomment-1656758327&#34;&gt;‚ÄúThe Grid Bug‚Äù&lt;/a&gt; introduced in exa 2021.&lt;/li&gt; &#xA; &lt;li&gt;Hyperlink support.&lt;/li&gt; &#xA; &lt;li&gt;Selinux context output.&lt;/li&gt; &#xA; &lt;li&gt;Git repo status output.&lt;/li&gt; &#xA; &lt;li&gt;Human readable relative dates.&lt;/li&gt; &#xA; &lt;li&gt;Several security fixes.&lt;/li&gt; &#xA; &lt;li&gt;Many smaller bug fixes/changes!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;a id=&#34;try-it&#34;&gt; &lt;h1&gt;Try it!&lt;/h1&gt; &lt;/a&gt; &#xA;&lt;h3&gt;Nix ‚ùÑÔ∏è&lt;/h3&gt; &#xA;&lt;p&gt;If you already have Nix setup with flake support, you can try out eza with the &lt;code&gt;nix run&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nix run github:eza-community/eza&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Nix will build eza and run it.&lt;/p&gt; &#xA;&lt;p&gt;If you want to pass arguments this way, use e.g. &lt;code&gt;nix run github:eza-community/eza -- -ol&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;a id=&#34;installation&#34;&gt; &lt;h1&gt;Installation&lt;/h1&gt; &lt;/a&gt; &#xA;&lt;p&gt;eza is available for Windows, macOS and Linux.&lt;/p&gt; &#xA;&lt;h3&gt;Cargo (crates.io)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/crates/v/eza?link=https%3A%2F%2Fcrates.io%2Fcrates%2Feza&#34; alt=&#34;Crates.io&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you already have a Rust environment set up, you can use the &lt;code&gt;cargo install&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install eza&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Cargo will build the &lt;code&gt;eza&lt;/code&gt; binary and place it in &lt;code&gt;$HOME/.local/share/cargo/bin/eza&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Cargo (git)&lt;/h3&gt; &#xA;&lt;p&gt;If you already have a Rust environment set up, you can use the &lt;code&gt;cargo install&lt;/code&gt; command in your local clone of the repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/eza-community/eza.git&#xA;cd eza&#xA;cargo install --path .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Cargo will build the &lt;code&gt;eza&lt;/code&gt; binary and place it in &lt;code&gt;$HOME/.cargo&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Arch Linux&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/eza/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/arch/eza.svg?sanitize=true&#34; alt=&#34;Arch Linux package&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Eza is available in the &lt;a href=&#34;https://archlinux.org/packages/extra/x86_64/eza/&#34;&gt;[extra]&lt;/a&gt; repository of Arch Linux.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pacman -S eza&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Debian and Ubuntu&lt;/h3&gt; &#xA;&lt;p&gt;Eza is available from &lt;a href=&#34;http://deb.gierens.de&#34;&gt;deb.gierens.de&lt;/a&gt;. The GPG public key is in this repo under &lt;a href=&#34;https://raw.githubusercontent.com/eza-community/eza/main/deb.asc&#34;&gt;deb.asc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To install eza from this repo use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget -qO- https://raw.githubusercontent.com/eza-community/eza/main/deb.asc | sudo tee /etc/apt/trusted.gpg.d/gierens.asc&#xA;echo &#34;deb http://deb.gierens.de stable main&#34; | sudo tee /etc/apt/sources.list.d/gierens.list&#xA;sudo apt update&#xA;sudo apt install -y eza&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Nix (Linux, MacOS)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/eza/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/nix_unstable/eza.svg?sanitize=true&#34; alt=&#34;nixpkgs unstable package&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Eza is available from &lt;a href=&#34;https://github.com/NixOS/nixpkgs&#34;&gt;Nixpkgs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;code&gt;nix profile&lt;/code&gt; users:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;nix profile install nixpkgs#eza&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For &lt;code&gt;nix-env&lt;/code&gt; users:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;nix-env -i eza&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Brew (MacOS)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/eza/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/homebrew/eza.svg?sanitize=true&#34; alt=&#34;Homebrew package&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Eza is available from &lt;a href=&#34;https://formulae.brew.sh/formula/eza#default&#34;&gt;Homebrew&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To install eza, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install eza&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Click sections to expand.&lt;/p&gt; &#xA;&lt;a id=&#34;options&#34;&gt; &lt;/a&gt;&#xA;&lt;details&gt;&#xA; &lt;a id=&#34;options&#34;&gt; &lt;summary&gt; Command-line options &lt;/summary&gt; &lt;h1&gt;Command-line options&lt;/h1&gt; &lt;/a&gt; &#xA; &lt;p&gt;eza‚Äôs options are almost, but not quite, entirely unlike &lt;code&gt;ls&lt;/code&gt;‚Äôs.&lt;/p&gt; &#xA; &lt;h3&gt;Display options&lt;/h3&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-1&lt;/strong&gt;, &lt;strong&gt;--oneline&lt;/strong&gt;: display one entry per line&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-G&lt;/strong&gt;, &lt;strong&gt;--grid&lt;/strong&gt;: display entries as a grid (default)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-l&lt;/strong&gt;, &lt;strong&gt;--long&lt;/strong&gt;: display extended details and attributes&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-R&lt;/strong&gt;, &lt;strong&gt;--recurse&lt;/strong&gt;: recurse into directories&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-T&lt;/strong&gt;, &lt;strong&gt;--tree&lt;/strong&gt;: recurse into directories as a tree&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-x&lt;/strong&gt;, &lt;strong&gt;--across&lt;/strong&gt;: sort the grid across, rather than downwards&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-F&lt;/strong&gt;, &lt;strong&gt;--classify&lt;/strong&gt;: display type indicator by file names&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;--colo[u]r&lt;/strong&gt;: when to use terminal colours&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;--colo[u]r-scale&lt;/strong&gt;: highlight levels of file sizes distinctly&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;--icons&lt;/strong&gt;: display icons&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;--no-icons&lt;/strong&gt;: don&#39;t display icons (always overrides --icons)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;--hyperlink&lt;/strong&gt;: display entries as hyperlinks&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-w&lt;/strong&gt;, &lt;strong&gt;--width=(columns)&lt;/strong&gt;: set screen width in columns&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h3&gt;Filtering options&lt;/h3&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-a&lt;/strong&gt;, &lt;strong&gt;--all&lt;/strong&gt;: show hidden and &#39;dot&#39; files&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-d&lt;/strong&gt;, &lt;strong&gt;--list-dirs&lt;/strong&gt;: list directories like regular files&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-L&lt;/strong&gt;, &lt;strong&gt;--level=(depth)&lt;/strong&gt;: limit the depth of recursion&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-r&lt;/strong&gt;, &lt;strong&gt;--reverse&lt;/strong&gt;: reverse the sort order&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-s&lt;/strong&gt;, &lt;strong&gt;--sort=(field)&lt;/strong&gt;: which field to sort by&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;--group-directories-first&lt;/strong&gt;: list directories before other files&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-D&lt;/strong&gt;, &lt;strong&gt;--only-dirs&lt;/strong&gt;: list only directories&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;--git-ignore&lt;/strong&gt;: ignore files mentioned in &lt;code&gt;.gitignore&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-I&lt;/strong&gt;, &lt;strong&gt;--ignore-glob=(globs)&lt;/strong&gt;: glob patterns (pipe-separated) of files to ignore&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Pass the &lt;code&gt;--all&lt;/code&gt; option twice to also show the &lt;code&gt;.&lt;/code&gt; and &lt;code&gt;..&lt;/code&gt; directories.&lt;/p&gt; &#xA; &lt;h3&gt;Long view options&lt;/h3&gt; &#xA; &lt;p&gt;These options are available when running with &lt;code&gt;--long&lt;/code&gt; (&lt;code&gt;-l&lt;/code&gt;):&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-b&lt;/strong&gt;, &lt;strong&gt;--binary&lt;/strong&gt;: list file sizes with binary prefixes&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-B&lt;/strong&gt;, &lt;strong&gt;--bytes&lt;/strong&gt;: list file sizes in bytes, without any prefixes&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-g&lt;/strong&gt;, &lt;strong&gt;--group&lt;/strong&gt;: list each file‚Äôs group&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-h&lt;/strong&gt;, &lt;strong&gt;--header&lt;/strong&gt;: add a header row to each column&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-H&lt;/strong&gt;, &lt;strong&gt;--links&lt;/strong&gt;: list each file‚Äôs number of hard links&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-i&lt;/strong&gt;, &lt;strong&gt;--inode&lt;/strong&gt;: list each file‚Äôs inode number&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-m&lt;/strong&gt;, &lt;strong&gt;--modified&lt;/strong&gt;: use the modified timestamp field&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-S&lt;/strong&gt;, &lt;strong&gt;--blocksize&lt;/strong&gt;: show size of allocated file system blocks&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-t&lt;/strong&gt;, &lt;strong&gt;--time=(field)&lt;/strong&gt;: which timestamp field to use&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-u&lt;/strong&gt;, &lt;strong&gt;--accessed&lt;/strong&gt;: use the accessed timestamp field&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-U&lt;/strong&gt;, &lt;strong&gt;--created&lt;/strong&gt;: use the created timestamp field&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-X&lt;/strong&gt;, &lt;strong&gt;--dereference&lt;/strong&gt;: dereference symlinks for file information&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-Z&lt;/strong&gt;, &lt;strong&gt;--context&lt;/strong&gt;: list each file‚Äôs security context&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-@&lt;/strong&gt;, &lt;strong&gt;--extended&lt;/strong&gt;: list each file‚Äôs extended attributes and sizes&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;--changed&lt;/strong&gt;: use the changed timestamp field&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;--git&lt;/strong&gt;: list each file‚Äôs Git status, if tracked or ignored&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;--no-git&lt;/strong&gt;: suppress Git status (always overrides &lt;code&gt;--git&lt;/code&gt;, &lt;code&gt;--git-repos&lt;/code&gt;, &lt;code&gt;--git-repos-no-status&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;--time-style&lt;/strong&gt;: how to format timestamps&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;--no-permissions&lt;/strong&gt;: suppress the permissions field&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-o&lt;/strong&gt;, &lt;strong&gt;--octal-permissions&lt;/strong&gt;: list each file&#39;s permission in octal format&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;--no-filesize&lt;/strong&gt;: suppress the filesize field&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;--no-user&lt;/strong&gt;: suppress the user field&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;--no-time&lt;/strong&gt;: suppress the time field&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Some of the options accept parameters:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Valid &lt;strong&gt;--color&lt;/strong&gt; options are &lt;strong&gt;always&lt;/strong&gt;, &lt;strong&gt;automatic&lt;/strong&gt;, and &lt;strong&gt;never&lt;/strong&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Valid sort fields are &lt;strong&gt;accessed&lt;/strong&gt;, &lt;strong&gt;changed&lt;/strong&gt;, &lt;strong&gt;created&lt;/strong&gt;, &lt;strong&gt;extension&lt;/strong&gt;, &lt;strong&gt;Extension&lt;/strong&gt;, &lt;strong&gt;inode&lt;/strong&gt;, &lt;strong&gt;modified&lt;/strong&gt;, &lt;strong&gt;name&lt;/strong&gt;, &lt;strong&gt;Name&lt;/strong&gt;, &lt;strong&gt;size&lt;/strong&gt;, &lt;strong&gt;type&lt;/strong&gt;, and &lt;strong&gt;none&lt;/strong&gt;. Fields starting with a capital letter sort uppercase before lowercase. The modified field has the aliases &lt;strong&gt;date&lt;/strong&gt;, &lt;strong&gt;time&lt;/strong&gt;, and &lt;strong&gt;newest&lt;/strong&gt;, while its reverse has the aliases &lt;strong&gt;age&lt;/strong&gt; and &lt;strong&gt;oldest&lt;/strong&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Valid time fields are &lt;strong&gt;modified&lt;/strong&gt;, &lt;strong&gt;changed&lt;/strong&gt;, &lt;strong&gt;accessed&lt;/strong&gt;, and &lt;strong&gt;created&lt;/strong&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Valid time styles are &lt;strong&gt;default&lt;/strong&gt;, &lt;strong&gt;iso&lt;/strong&gt;, &lt;strong&gt;long-iso&lt;/strong&gt;, &lt;strong&gt;full-iso&lt;/strong&gt;, and &lt;strong&gt;relative&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;a id=&#34;development&#34;&gt; &lt;/a&gt;&#xA;&lt;details&gt;&#xA; &lt;a id=&#34;development&#34;&gt; &lt;summary&gt; Development &lt;/summary&gt; &lt;h1&gt;Development &lt;a href=&#34;https://blog.rust-lang.org/2022/08/11/Rust-1.63.0.html&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/rustc-1.63.0+-lightgray.svg?sanitize=true&#34; alt=&#34;Rust 1.63.0+&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/eza-community/eza/raw/master/LICENCE&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/licence-MIT-green&#34; alt=&#34;MIT Licence&#34;&gt; &lt;/a&gt; &lt;/h1&gt;&lt;/a&gt; &#xA; &lt;p&gt;eza is written in &lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt;. You will need rustc version 1.56.1 or higher. The recommended way to install Rust for development is from the &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;official download page&lt;/a&gt;, using rustup.&lt;/p&gt; &#xA; &lt;p&gt;Once Rust is installed, you can compile eza with Cargo:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;cargo build&#xA;cargo test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;The &lt;a href=&#34;https://github.com/casey/just&#34;&gt;just&lt;/a&gt; command runner can be used to run some helpful development commands, in a manner similar to &lt;code&gt;make&lt;/code&gt;. Run &lt;code&gt;just --list&lt;/code&gt; to get an overview of what‚Äôs available.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;If you are compiling a copy for yourself, be sure to run &lt;code&gt;cargo build --release&lt;/code&gt; or &lt;code&gt;just build-release&lt;/code&gt; to benefit from release-mode optimisations. Copy the resulting binary, which will be in the &lt;code&gt;target/release&lt;/code&gt; directory, into a folder in your &lt;code&gt;$PATH&lt;/code&gt;. &lt;code&gt;/usr/local/bin&lt;/code&gt; is usually a good choice.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;To compile and install the manual pages, you will need &lt;a href=&#34;https://pandoc.org/&#34;&gt;pandoc&lt;/a&gt;. The &lt;code&gt;just man&lt;/code&gt; command will compile the Markdown into manual pages, which it will place in the &lt;code&gt;target/man&lt;/code&gt; directory. To use them, copy them into a directory that &lt;code&gt;man&lt;/code&gt; will read. &lt;code&gt;/usr/local/share/man&lt;/code&gt; is usually a good choice.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;eza depends on &lt;a href=&#34;https://github.com/rust-lang/git2-rs&#34;&gt;libgit2&lt;/a&gt; for certain features. If you‚Äôre unable to compile libgit2, you can opt out of Git support by running &lt;code&gt;cargo build --no-default-features&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;If you intend to compile for musl, you will need to use the flag &lt;code&gt;vendored-openssl&lt;/code&gt; if you want to get the Git feature working. The full command is &lt;code&gt;cargo build --release --target=x86_64-unknown-linux-musl --features vendored-openssl,git&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h3&gt;Developing on Nix (experimental) ‚ùÑÔ∏è&lt;/h3&gt; &#xA; &lt;p&gt;If you have a working Nix installation with flake support, you can use nix to manage your dev environment.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;nix develop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The Nix Flake has a few features:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Run &lt;code&gt;nix flake check&lt;/code&gt; to run &lt;code&gt;treefmt&lt;/code&gt; on the repo.&lt;/li&gt; &#xA;  &lt;li&gt;Run &lt;code&gt;nix build&lt;/code&gt; and manually test &lt;code&gt;./results/bin/eza -- &amp;lt;arguments&amp;gt;&lt;/code&gt; for easy debugging.&lt;/li&gt; &#xA;  &lt;li&gt;Run &lt;code&gt;nix build .#test&lt;/code&gt; to run &lt;code&gt;cargo test&lt;/code&gt; via the flake.&lt;/li&gt; &#xA;  &lt;li&gt;Run &lt;code&gt;nix build .#clippy&lt;/code&gt; to lint with clippy (still work in progress).&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h3&gt;Testing with Vagrant&lt;/h3&gt; &#xA; &lt;p&gt;eza uses &lt;a href=&#34;https://www.vagrantup.com/&#34;&gt;Vagrant&lt;/a&gt; to configure virtual machines for testing.&lt;/p&gt; &#xA; &lt;p&gt;Programs such as eza that are basically interfaces to the system are &lt;a href=&#34;https://eev.ee/blog/2016/08/22/testing-for-people-who-hate-testing/#troublesome-cases&#34;&gt;notoriously difficult to test&lt;/a&gt;. Although the internal components have unit tests, it‚Äôs impossible to do a complete end-to-end test without mandating the current user‚Äôs name, the time zone, the locale, and directory structure to test. (And yes, these tests are worth doing. I have missed an edge case on many an occasion.)&lt;/p&gt; &#xA; &lt;p&gt;The initial attempt to solve the problem was just to create a directory of ‚Äúawkward‚Äù test cases, run eza on it, and make sure it produced the correct output. But even this output would change if, say, the user‚Äôs locale formats dates in a different way. These can be mocked inside the code, but at the cost of making that code more complicated to read and understand.&lt;/p&gt; &#xA; &lt;p&gt;An alternative solution is to fake &lt;em&gt;everything&lt;/em&gt;: create a virtual machine with a known state and run the tests on &lt;em&gt;that&lt;/em&gt;. This is what Vagrant does. Although it takes a while to download and set up, it gives everyone the same development environment to test for any obvious regressions.&lt;/p&gt; &#xA; &lt;p&gt;First, initialise the VM:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;host$ vagrant up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The first command downloads the virtual machine image, and then runs our provisioning script, which installs Rust and eza‚Äôs build-time dependencies, configures the environment, and generates some awkward files and folders to use as test cases. Once this is done, you can SSH in, and build and test:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;host$ vagrant ssh&#xA;vm$ cd /vagrant&#xA;vm$ cargo build&#xA;vm$ ./xtests/run&#xA;All the tests passed!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Of course, the drawback of having a standard development environment is that you stop noticing bugs that occur outside of it. For this reason, Vagrant isn‚Äôt a &lt;em&gt;necessary&lt;/em&gt; development step ‚Äî it‚Äôs there if you‚Äôd like to use it, but eza still gets used and tested on other platforms. It can still be built and compiled on any target triple that it supports, VM or no VM, with &lt;code&gt;cargo build&lt;/code&gt; and &lt;code&gt;cargo test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
</feed>