<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-15T01:42:18Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ast-grep/ast-grep</title>
    <updated>2023-05-15T01:42:18Z</updated>
    <id>tag:github.com,2023-05-15:/ast-grep/ast-grep</id>
    <link href="https://github.com/ast-grep/ast-grep" rel="alternate"></link>
    <summary type="html">&lt;p&gt;⚡A fast and polyglot tool for code searching, linting, rewriting at large scale. Written in Rust&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://ast-grep.github.io/logo.svg?sanitize=true&#34; alt=&#34;ast-grep&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/ast-grep/ast-grep/actions/workflows/coverage.yaml/badge.svg?sanitize=true&#34; alt=&#34;coverage badge&#34;&gt; &lt;img src=&#34;https://codecov.io/gh/ast-grep/ast-grep/branch/main/graph/badge.svg?token=37VX8H2EWV&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/ast-grep/ast-grep?style=social&#34; alt=&#34;Badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/ast-grep/ast-grep?style=social&#34; alt=&#34;Badge&#34;&gt; &lt;img alt=&#34;GitHub Sponsors&#34; src=&#34;https://img.shields.io/github/sponsors/HerringtonDarkholme?style=social&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;ast-grep(sg)&lt;/h2&gt; &#xA;&lt;p&gt;ast-grep(sg) is a lightning fast and user friendly tool for code searching, linting, rewriting at large scale.&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;ast-grep is a AST-based tool to search code by pattern code. Think it as your old-friend &lt;code&gt;grep&lt;/code&gt; but it matches AST nodes instead of text. You can write patterns as if you are writing ordinary code. It will match all code that has the same syntactical structure. You can use &lt;code&gt;$&lt;/code&gt; sign + upper case letters as wildcard, e.g. &lt;code&gt;$MATCH&lt;/code&gt;, to match any single AST node. Think it as REGEX dot &lt;code&gt;.&lt;/code&gt;, except it is not textual.&lt;/p&gt; &#xA;&lt;p&gt;Try the &lt;a href=&#34;https://ast-grep.github.io/playground.html&#34;&gt;online playground&lt;/a&gt; for a taste!&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2883231/183275066-8d9c342f-46cb-4fa5-aa4e-b98aac011869.gif&#34; alt=&#34;output&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install it from &lt;a href=&#34;https://docs.npmjs.com/downloading-and-installing-node-js-and-npm&#34;&gt;npm&lt;/a&gt; or &lt;a href=&#34;https://doc.rust-lang.org/cargo/getting-started/installation.html&#34;&gt;cargo&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# install via pnpm&#xA;npm install --global @ast-grep/cli&#xA;&#xA;# install via cargo&#xA;cargo install ast-grep&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can build ast-grep from source. You need install rustup, clone the repository and then&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo install --path ./crates/cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://brew.sh/&#34;&gt;brew&lt;/a&gt; formula is also available for ast-grep.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew tap ast-grep/tap&#xA;brew install ast-grep/tap/ast-grep&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Command line usage example&lt;/h2&gt; &#xA;&lt;p&gt;ast-grep has following form.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sg --pattern &#39;var code = $PATTERN&#39; --rewrite &#39;let code = new $PATTERN&#39; --lang ts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/Hchan_mgn/status/1547061516993699841?s=20&amp;amp;t=ldDoj4U2nq-FRKQkU5GWXA&#34;&gt;Rewrite code in null coalescing operator&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sg -p &#39;$A &amp;amp;&amp;amp; $A()&#39; -l ts -r &#39;$A?.()&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/Hchan_mgn/status/1561802312846278657&#34;&gt;Rewrite&lt;/a&gt; &lt;a href=&#34;https://github.com/ecyrbe/zodios#migrate-to-v8&#34;&gt;Zodios&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sg -p &#39;new Zodios($URL,  $CONF as const,)&#39; -l ts -r &#39;new Zodios($URL, $CONF)&#39; -i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/Hchan_mgn/status/1560108625460355073&#34;&gt;Implement eslint rule using YAML.&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sponsor&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/HerringtonDarkholme/sponsors/main/sponsorkit/sponsors.svg?sanitize=true&#34; alt=&#34;Sponsors&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you find ast-grep interesting and useful for your work, please &lt;a href=&#34;https://github.com/sponsors/HerringtonDarkholme&#34;&gt;buy me a coffee&lt;/a&gt; so I can spend more time on the project!&lt;/p&gt; &#xA;&lt;h2&gt;Feature Highlight&lt;/h2&gt; &#xA;&lt;p&gt;ast-grep&#39;s core is an algorithm to search and replace code based on abstract syntax tree produced by tree-sitter. It can help you to do lightweight static analysis and massive scale code manipulation in an intuitive way.&lt;/p&gt; &#xA;&lt;p&gt;Key highlights:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;An intuitive pattern to find and replace AST. ast-grep&#39;s pattern looks like ordinary code you would write every day. (You can call the pattern is isomorphic to code).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;jQuery like API for AST traversal and manipulation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;YAML configuration to write new linting rules or code modification.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Written in compiled language, with tree-sitter based parsing and utilizing multiple cores.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Beautiful command line interface :)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;ast-grep&#39;s vision is to democratize abstract syntax tree magic and to liberate one from cumbersome AST programming!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you are an open source library author, ast-grep can help your library users adopt breaking changes more easily.&lt;/li&gt; &#xA; &lt;li&gt;if you are a tech lead in your team, ast-grep can help you enforce code best practice tailored to your business need.&lt;/li&gt; &#xA; &lt;li&gt;If you are a security researcher, ast-grep can help you write rules much faster.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;CLI Screenshot&lt;/h2&gt; &#xA;&lt;h3&gt;Search&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Screenshot&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Search&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sg -p &#39;Some($A)&#39; -l rs&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/ast-grep/ast-grep/assets/2883231/002db3a2-8a79-4838-ad5c-563634183c3f&#34; alt=&#34;image&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rewrite&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sg -p &#39;$F &amp;amp;&amp;amp; $F($$$ARGS)&#39; -r &#39;$F?.($$$ARGS)&#39; -l ts&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/ast-grep/ast-grep/assets/2883231/ad9394d8-3aea-4b96-8d54-6e01f06174d2&#34; alt=&#34;image&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Report&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sg scan&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2883231/187094977-fd544d4b-64de-4bba-8bea-8c0de047b352.png&#34; alt=&#34;image&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>loichyan/nerdfix</title>
    <updated>2023-05-15T01:42:18Z</updated>
    <id>tag:github.com,2023-05-15:/loichyan/nerdfix</id>
    <link href="https://github.com/loichyan/nerdfix" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🔣 nerdfix helps you to find/fix obsolete Nerd Font icons in your project.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🔣 nerdfix&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/loichyan/nerdfix&#34; alt=&#34;GitHub release&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/loichyan/nerdfix/release.yaml&#34; alt=&#34;GitHub Workflow Status&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;nerdfix&lt;/code&gt; helps you to find/fix obsolete &lt;a href=&#34;https://github.com/ryanoasis/nerd-fonts&#34;&gt;Nerd Font&lt;/a&gt; icons in your project.&lt;/p&gt; &#xA;&lt;h2&gt;💭 Why&lt;/h2&gt; &#xA;&lt;p&gt;Nerd Fonts is used in many projects for a beautiful UI. It provides more than 10,000 icons, but some codepoints conflict with other fonts (especially CJK fonts). To ensure that the icons remain in the private use area, Nerd Fonts has changed the codepoints of some icons in recent releases, for example, &lt;code&gt;nf-mdi-*&lt;/code&gt; icons (including over 2,000 icons) are deprecated since &lt;a href=&#34;https://github.com/ryanoasis/nerd-fonts/releases/tag/v2.3.3&#34;&gt;v2.3.3&lt;/a&gt; and will be removed in v3.&lt;/p&gt; &#xA;&lt;p&gt;These icons are marked as obsolete in &lt;a href=&#34;https://www.nerdfonts.com/cheat-sheet&#34;&gt;the official cheat sheet&lt;/a&gt; and it&#39;s recommended to replace them with the new ones. However, you may find it boring to check all the used icons one by one, so &lt;code&gt;nerdfix&lt;/code&gt; was written to index the cheat sheet and find obsolete icons in your project.&lt;/p&gt; &#xA;&lt;h2&gt;⚙️ Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can download the pre-built binaries from &lt;a href=&#34;https://github.com/loichyan/nerdfix/releases/latest&#34;&gt;the release page&lt;/a&gt; or manually build this project manually from source.&lt;/p&gt; &#xA;&lt;p&gt;In addition, the binaries come with a recently updated cheat sheet and you can overwrite it with the latest one using &lt;code&gt;nerdfix -i /path/to/your/file&lt;/code&gt; (follow &lt;a href=&#34;https://github.com/ryanoasis/nerd-fonts/raw/gh-pages/_posts/2017-01-04-icon-cheat-sheet.md&#34;&gt;this link&lt;/a&gt; to get the latest file).&lt;/p&gt; &#xA;&lt;h3&gt;Install from source&lt;/h3&gt; &#xA;&lt;p&gt;You can build and install from the source code with &lt;code&gt;cargo&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo install --git https://github.com/loichyan/nerdfix.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with &lt;code&gt;nix&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nix run github:loichyan/nerdfix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;📋 Note&lt;/h2&gt; &#xA;&lt;p&gt;Please make sure you&#39;re using Nerd Fonts after v2.3.3, otherwise the replaced new icons may not be displayed correctly. If you are a plugin author, it&#39;s also recommended to notify this in updates.&lt;/p&gt; &#xA;&lt;h2&gt;🔍 Usage&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;check&lt;/code&gt; command checks input files and reports obsolete icons with some suggestions (sorted by similarity) that you could replace them with.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nerdfix check test/test-data.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You get the output as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;warning: Found obsolete icon U+F752&#xA;  ┌─ tests/test-data.txt:1:27&#xA;  │&#xA;1 │ nf-mdi-folder_multiple = &#34;&#34;&#xA;  │                           ^ Icon &#39;nf-mdi-folder_multiple&#39; is marked as obsolete&#xA;  │&#xA;  = You could replace it with:&#xA;        1. 󰉓 U+F0253 nf-md-folder_multiple&#xA;        2. 󱏓 U+F13D3 nf-md-folder_star_multiple&#xA;        ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Interactive patching&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;fix&lt;/code&gt; command reports the same information as &lt;code&gt;check&lt;/code&gt; and displays a prompt asking the user to input a new icon to replace the obsolete one.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;warning: Found obsolete icon U+F719&#xA;  ┌─ tests/test-data.txt:4:29&#xA;  │&#xA;4 │ nf-mdi-file_document_box = &#34;&#34;&#xA;  │                             ^ Icon &#39;nf-mdi-file_document_box&#39; is marked as obsolete&#xA;  │&#xA;  = You could replace it with:&#xA;        1. 󰈙 U+F0219 nf-md-file_document&#xA;        2. 󰷈 U+F0DC8 nf-md-file_document_edit&#xA;        ...&#xA;&amp;gt; Input an icon: 1&#xA;# Your input: 󰈙&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The prompt accepts several types of input:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Suggestion number&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Codepoint&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;U+F0219&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Icon name&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nf-md-file_document&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Icon character&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;󰈙&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Fuzzy autocompletion/search&lt;/h3&gt; &#xA;&lt;p&gt;The prompt also provides fuzzy matching suggestions when you type the icon name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;&amp;gt; Input an icon: documentmultiple&#xA;  󱔗 nf-md-file_document_multiple&#xA;  󱔘 nf-md-file_document_multiple_outline&#xA;  󰡟 nf-md-comment_multiple&#xA;  ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the &lt;code&gt;search&lt;/code&gt; command to call the prompt directly for a fuzzy search.&lt;/p&gt; &#xA;&lt;h3&gt;Autofix&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;nerdfix&lt;/code&gt; provides some features to automatically patch obsolete icons:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The last user input is picked if an icon appears twice.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;fix --replace FROM,TO&lt;/code&gt; to replace the prefix of an icon name with another, e.g. &lt;code&gt;nf-mdi-tab&lt;/code&gt; is replaced with &lt;code&gt;nf-md-tab&lt;/code&gt; when &lt;code&gt;--replace nf-mdi-,nf-md-&lt;/code&gt; is specified.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Structured output&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;check --format json&lt;/code&gt; to get structured output for further use. &lt;code&gt;nerdfix&lt;/code&gt; prints diagnostics with the following fields line by line:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Field&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;severity&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Severity of a diagnostic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;path&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Source file of a diagnostic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;type&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Diagnostic type, currently only &lt;code&gt;obsolete&lt;/code&gt; is supported&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;span&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Byte index span of an obsolete icon&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Icon name&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;codepoint&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Icon codepoint&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;💬 FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;How can I find all files that contain obsolete icons?&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nerdfix check --format=json -r /path/to/root 2&amp;gt;/dev/null |&#xA;  jq -s -r &#39;[.[].path] | sort | unique | .[]&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How can I save patched content to a file other than the input? (&lt;a href=&#34;https://github.com/loichyan/nerdfix/pull/7&#34;&gt;#7&lt;/a&gt;)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nerdfix fix /path/to/input:/path/to/output&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How can I recursively traverse all directories? (&lt;a href=&#34;https://github.com/loichyan/nerdfix/issues/5&#34;&gt;#5&lt;/a&gt;)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nerdfix fix --recursive /path/to/root&#xA;# Or use fd/find&#xA;nerdfix fix $(fd -t f . /path/to/root)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How can I skip interactive prompts? (&lt;a href=&#34;https://github.com/loichyan/nerdfix/issues/3&#34;&gt;#3&lt;/a&gt;)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nerdfix fix --write --select-first /path/to/file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;⚖️ License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under either of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apache License, Version 2.0 (&lt;a href=&#34;https://raw.githubusercontent.com/loichyan/nerdfix/main/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;MIT license (&lt;a href=&#34;https://raw.githubusercontent.com/loichyan/nerdfix/main/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;at your option.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>TeamFlos/phira</title>
    <updated>2023-05-15T01:42:18Z</updated>
    <id>tag:github.com,2023-05-15:/TeamFlos/phira</id>
    <link href="https://github.com/TeamFlos/phira" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Phira&lt;/h1&gt; &#xA;&lt;p&gt;👉 &lt;a href=&#34;https://testflight.apple.com/join/3GJawgKP&#34;&gt;Testflight&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;👉 &lt;a href=&#34;https://prprblog.kevin2106.top/&#34;&gt;ResPack&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>