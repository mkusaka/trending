<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-17T01:36:42Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>XAMPPRocky/octocrab</title>
    <updated>2024-06-17T01:36:42Z</updated>
    <id>tag:github.com,2024-06-17:/XAMPPRocky/octocrab</id>
    <link href="https://github.com/XAMPPRocky/octocrab" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modern, extensible GitHub API Client for Rust.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Octocrab: A modern, extensible GitHub API client.&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/XAMPPRocky/octocrab/actions?query=workflow%3ARust&#34;&gt;&lt;img src=&#34;https://github.com/XAMPPRocky/octocrab/workflows/Rust/badge.svg?sanitize=true&#34; alt=&#34;Rust&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/octocrab&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/d/octocrab.svg?sanitize=true&#34; alt=&#34;crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/XAMPPRocky/octocrab/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/XAMPPRocky/octocrab/help%20wanted?color=green&#34; alt=&#34;Help Wanted&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/XAMPPRocky/octocrab&#34;&gt;&lt;img src=&#34;https://tokei.rs/b1/github/XAMPPRocky/octocrab?category=code&#34; alt=&#34;Lines Of Code&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/octocrab/&#34;&gt;&lt;img src=&#34;https://docs.rs/octocrab/badge.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/octocrab/&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/octocrab?logo=rust&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Octocrab is a third party GitHub API client, allowing you to easily build your own GitHub integrations or bots in Rust. &lt;code&gt;Octocrab&lt;/code&gt; comes with two primary sets of APIs for communicating with GitHub, a high level strongly typed semantic API, and a lower level HTTP API for extending behaviour.&lt;/p&gt; &#xA;&lt;h2&gt;Adding Octocrab&lt;/h2&gt; &#xA;&lt;p&gt;Run this command in your terminal to add the latest version of &lt;code&gt;Octocrab&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo add octocrab&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Semantic API&lt;/h2&gt; &#xA;&lt;p&gt;The semantic API provides strong typing around GitHub&#39;s API, a set of &lt;a href=&#34;https://docs.rs/octocrab/latest/octocrab/models/index.html&#34;&gt;&lt;code&gt;models&lt;/code&gt;&lt;/a&gt; that maps to GitHub&#39;s types, and &lt;a href=&#34;https://docs.rs/octocrab/latest/octocrab/auth/index.html&#34;&gt;&lt;code&gt;auth&lt;/code&gt;&lt;/a&gt; functions that are useful for GitHub apps. Currently, the following modules are available as of version &lt;code&gt;0.17&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/octocrab/latest/octocrab/actions/struct.ActionsHandler.html&#34;&gt;&lt;code&gt;actions&lt;/code&gt;&lt;/a&gt; GitHub Actions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/octocrab/latest/octocrab/apps/index.html&#34;&gt;&lt;code&gt;apps&lt;/code&gt;&lt;/a&gt; GitHub Apps.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/octocrab/latest/octocrab/current/struct.CurrentAuthHandler.html&#34;&gt;&lt;code&gt;current&lt;/code&gt;&lt;/a&gt; Information about the current user.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/octocrab/latest/octocrab/gitignore/struct.GitignoreHandler.html&#34;&gt;&lt;code&gt;gitignore&lt;/code&gt;&lt;/a&gt; Gitignore templates.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/octocrab/latest/octocrab/struct.Octocrab.html#graphql-api&#34;&gt;&lt;code&gt;graphql&lt;/code&gt;&lt;/a&gt; GraphQL.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/octocrab/latest/octocrab/issues/struct.IssueHandler.html&#34;&gt;&lt;code&gt;issues&lt;/code&gt;&lt;/a&gt; Issues and related items, e.g. comments, labels, etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/octocrab/latest/octocrab/licenses/struct.LicenseHandler.html&#34;&gt;&lt;code&gt;licenses&lt;/code&gt;&lt;/a&gt; License Metadata.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/octocrab/latest/octocrab/markdown/struct.MarkdownHandler.html&#34;&gt;&lt;code&gt;markdown&lt;/code&gt;&lt;/a&gt; Rendering Markdown with GitHub.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/octocrab/latest/octocrab/orgs/struct.OrgHandler.html&#34;&gt;&lt;code&gt;orgs&lt;/code&gt;&lt;/a&gt; GitHub Organisations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/octocrab/latest/octocrab/pulls/struct.PullRequestHandler.html&#34;&gt;&lt;code&gt;pulls&lt;/code&gt;&lt;/a&gt; Pull Requests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/octocrab/latest/octocrab/repos/struct.ReleasesHandler.html&#34;&gt;&lt;code&gt;releases&lt;/code&gt;&lt;/a&gt; Releases.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/octocrab/latest/octocrab/repos/struct.RepoHandler.html&#34;&gt;&lt;code&gt;repos&lt;/code&gt;&lt;/a&gt; Repositories.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/octocrab/latest/octocrab/search/struct.SearchHandler.html&#34;&gt;&lt;code&gt;search&lt;/code&gt;&lt;/a&gt; GitHub&#39;s search API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/octocrab/latest/octocrab/teams/struct.TeamHandler.html&#34;&gt;&lt;code&gt;teams&lt;/code&gt;&lt;/a&gt; Teams.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/octocrab/latest/octocrab/gists/struct.GistsHandler.html&#34;&gt;&lt;code&gt;gists&lt;/code&gt;&lt;/a&gt; GitHub&#39;s gists API&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/octocrab/latest/octocrab/gists/struct.UsersHandler.html&#34;&gt;&lt;code&gt;users&lt;/code&gt;&lt;/a&gt; Users.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Getting a Pull Request&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;// Get pull request #5 from `XAMPPRocky/octocrab`.&#xA;let issue = octocrab::instance().pulls(&#34;XAMPPRocky&#34;, &#34;octocrab&#34;).get(5).await?;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All methods with multiple optional parameters are built as &lt;code&gt;Builder&lt;/code&gt; structs, allowing you to easily specify parameters.&lt;/p&gt; &#xA;&lt;h4&gt;Listing issues&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;let octocrab = octocrab::instance();&#xA;// Returns the first page of all issues.&#xA;let mut page = octocrab&#xA;    .issues(&#34;XAMPPRocky&#34;, &#34;octocrab&#34;)&#xA;    .list()&#xA;    // Optional Parameters&#xA;    .creator(&#34;XAMPPRocky&#34;)&#xA;    .state(params::State::All)&#xA;    .per_page(50)&#xA;    .send()&#xA;    .await?;&#xA;&#xA;// Go through every page of issues. Warning: There&#39;s no rate limiting so&#xA;// be careful.&#xA;loop {&#xA;    for issue in &amp;amp;page {&#xA;        println!(&#34;{}&#34;, issue.title);&#xA;    }&#xA;    page = match octocrab&#xA;        .get_page::&amp;lt;models::issues::Issue&amp;gt;(&amp;amp;page.next)&#xA;        .await?&#xA;    {&#xA;        Some(next_page) =&amp;gt; next_page,&#xA;        None =&amp;gt; break,&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;HTTP API&lt;/h2&gt; &#xA;&lt;p&gt;The typed API currently doesn&#39;t cover all of GitHub&#39;s API at this time, and even if it did GitHub is in active development and this library will likely always be somewhat behind GitHub at some points in time. However that shouldn&#39;t mean that in order to use those features, you have to fork or replace &lt;code&gt;octocrab&lt;/code&gt; with your own solution.&lt;/p&gt; &#xA;&lt;p&gt;Instead &lt;code&gt;octocrab&lt;/code&gt; exposes a suite of HTTP methods allowing you to easily extend &lt;code&gt;Octocrab&lt;/code&gt;&#39;s existing behaviour. Using these HTTP methods allows you to keep using the same authentication and configuration, while having control over the request and response. There is a method for each HTTP method, &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;post&lt;/code&gt;, &lt;code&gt;patch&lt;/code&gt;, &lt;code&gt;put&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;, all of which accept a relative route and a optional body.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;let user: octocrab::models::User = octocrab::instance()&#xA;    .get(&#34;/user&#34;, None::&amp;lt;&amp;amp;()&amp;gt;)&#xA;    .await?;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each of the HTTP methods expects a body, formats the URL with the base URL, and errors if GitHub doesn&#39;t return a successful status, but this isn&#39;t always desired when working with GitHub&#39;s API, sometimes you need to check the response status or headers. As such there are companion methods &lt;code&gt;_get&lt;/code&gt;, &lt;code&gt;_post&lt;/code&gt;, etc. that perform no additional pre or post-processing to the request.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;let octocrab = octocrab::instance();&#xA;let response = octocrab&#xA;    ._get(&#34;https://api.github.com/organizations&#34;)&#xA;    .await?;&#xA;&#xA;// You can also use `Uri::builder().authority(&#34;&amp;lt;my custom base&amp;gt;&#34;).path_and_query(&#34;&amp;lt;my custom path&amp;gt;&#34;)` if you want to customize the base uri and path.&#xA;let response =  octocrab&#xA;    ._get(Uri::builder().path_and_query(&#34;/organizations&#34;).build().expect(&#34;valid uri&#34;))&#xA;    .await?;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use the those HTTP methods to easily create your own extensions to &lt;code&gt;Octocrab&lt;/code&gt;&#39;s typed API. (Requires &lt;code&gt;async_trait&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use octocrab::{Octocrab, Page, Result, models};&#xA;&#xA;#[async_trait::async_trait]&#xA;trait OrganisationExt {&#xA;  async fn list_every_organisation(&amp;amp;self) -&amp;gt; Result&amp;lt;Page&amp;lt;models::Organization&amp;gt;&amp;gt;;&#xA;}&#xA;&#xA;#[async_trait::async_trait]&#xA;impl OrganisationExt for Octocrab {&#xA;  async fn list_every_organisation(&amp;amp;self) -&amp;gt; Result&amp;lt;Page&amp;lt;models::Organization&amp;gt;&amp;gt; {&#xA;    self.get(&#34;/organizations&#34;, None::&amp;lt;&amp;amp;()&amp;gt;).await&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also easily access new properties that aren&#39;t available in the current models using &lt;code&gt;serde&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;#[derive(Deserialize)]&#xA;struct RepositoryWithVisibility {&#xA;    #[serde(flatten)]&#xA;    inner: octocrab::models::Repository,&#xA;    visibility: String,&#xA;}&#xA;&#xA;let my_repo = octocrab::instance()&#xA;    .get::&amp;lt;RepositoryWithVisibility&amp;gt;(&#34;https://api.github.com/repos/XAMPPRocky/octocrab&#34;, None::&amp;lt;&amp;amp;()&amp;gt;)&#xA;    .await?;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Static API&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Octocrab&lt;/code&gt; also provides a statically reference counted version of its API, allowing you to easily plug it into existing systems without worrying about having to integrate and pass around the client.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;// Initialises the static instance with your configuration and returns an&#xA;// instance of the client.&#xA;octocrab::initialise(octocrab::Octocrab::builder());&#xA;// Gets a instance of `Octocrab` from the static API. If you call this&#xA;// without first calling `octocrab::initialise` a default client will be&#xA;// initialised and returned instead.&#xA;let octocrab = octocrab::instance();&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>