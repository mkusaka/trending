<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-22T01:43:59Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>TheWaWaR/simple-http-server</title>
    <updated>2023-07-22T01:43:59Z</updated>
    <id>tag:github.com,2023-07-22:/TheWaWaR/simple-http-server</id>
    <link href="https://github.com/TheWaWaR/simple-http-server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple http server in Rust (Windows/Mac/Linux)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;How it looks like?&lt;/h1&gt; &#xA;&lt;h3&gt;Screenshot&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/TheWaWaR/simple-http-server/master/screenshot.png&#34; width=&#34;80%&#34; height=&#34;80%&#34;&gt; &#xA;&lt;h3&gt;Command Line Arguments&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Simple HTTP(s) Server 0.6.3&#xA;&#xA;USAGE:&#xA;    simple-http-server [FLAGS] [OPTIONS] [--] [root]&#xA;&#xA;FLAGS:&#xA;        --coep       Add &#34;Cross-Origin-Embedder-Policy&#34; HTTP header and set it to &#34;require-corp&#34;&#xA;        --coop       Add &#34;Cross-Origin-Opener-Policy&#34; HTTP header and set it to &#34;same-origin&#34;&#xA;        --cors       Enable CORS via the &#34;Access-Control-Allow-Origin&#34; header&#xA;    -h, --help       Prints help information&#xA;    -i, --index      Enable automatic render index page [index.html, index.htm]&#xA;        --nocache    Disable http cache&#xA;        --norange    Disable header::Range support (partial request)&#xA;        --nosort     Disable directory entries sort (by: name, modified, size)&#xA;    -s, --silent     Disable all outputs&#xA;    -u, --upload     Enable upload files (multiple select) (CSRF token required)&#xA;    -V, --version    Prints version information&#xA;&#xA;OPTIONS:&#xA;    -a, --auth &amp;lt;auth&amp;gt;                              HTTP Basic Auth (username:password)&#xA;        --cert &amp;lt;cert&amp;gt;                              TLS/SSL certificate (pkcs#12 format)&#xA;        --certpass &amp;lt;certpass&amp;gt;                      TLS/SSL certificate password&#xA;    -c, --compress &amp;lt;compress&amp;gt;...&#xA;            Enable file compression: gzip/deflate&#xA;                Example: -c=js,d.ts&#xA;                Note: disabled on partial request!&#xA;        --ip &amp;lt;ip&amp;gt;                                  IP address to bind [default: 0.0.0.0]&#xA;    -p, --port &amp;lt;port&amp;gt;                              Port number [default: 8000]&#xA;        --redirect &amp;lt;redirect&amp;gt;                      takes a URL to redirect to using HTTP 301 Moved Permanently&#xA;    -t, --threads &amp;lt;threads&amp;gt;                        How many worker threads [default: 3]&#xA;        --try-file &amp;lt;PATH&amp;gt;&#xA;            serve this file (server root relative) in place of missing files (useful for single page apps) [aliases:&#xA;            try-file-404]&#xA;    -l, --upload-size-limit &amp;lt;upload_size_limit&amp;gt;    Upload file size limit [bytes] [default: 8000000]&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h3&gt;Download binary&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/TheWaWaR/simple-http-server/releases&#34;&gt;Goto Download&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;windows-64bit&lt;/li&gt; &#xA; &lt;li&gt;osx-64bit&lt;/li&gt; &#xA; &lt;li&gt;linux-64bit&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Install by cargo&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install Rust&#xA;curl https://sh.rustup.rs -sSf | sh&#xA;&#xA;# Install simple-http-server&#xA;cargo install simple-http-server&#xA;rehash&#xA;simple-http-server -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Windows support (with colored log)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Specify listen address (ip, port)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Specify running threads&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Specify root directory&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Pretty log&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Nginx like directory view (directory entries, link, filesize, modfiled date)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Breadcrumb navigation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; (default enabled) Guess mime type&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; (default enabled) HTTP cache control &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Sending Last-Modified / ETag&lt;/li&gt; &#xA;   &lt;li&gt;Replying 304 to If-Modified-Since&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; (default enabled) Partial request &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Accept-Ranges: bytes([ByteRangeSpec; length=1])&lt;/li&gt; &#xA;   &lt;li&gt;[Range, If-Range, If-Match] =&amp;gt; [Content-Range, 206, 416]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; (default disabled) Automatic render index page [index.html, index.htm]&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; (default disabled) Upload file &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A CSRF token is generated when upload is enabled and must be sent as a parameter when uploading a file&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; (default disabled) HTTP Basic Authentication (by username:password)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Sort by: filename, filesize, modifled&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; HTTPS support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Content-Encoding: gzip/deflate&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Added CORS headers support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Silent mode&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>iggy-rs/iggy</title>
    <updated>2023-07-22T01:43:59Z</updated>
    <id>tag:github.com,2023-07-22:/iggy-rs/iggy</id>
    <link href="https://github.com/iggy-rs/iggy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Iggy is the persistent message streaming platform written in Rust, supporting QUIC, TCP and HTTP transport protocols, capable of processing millions of messages per second.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Iggy&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://iggy.rs&#34;&gt;Website&lt;/a&gt; | &lt;a href=&#34;https://docs.iggy.rs/introduction/getting-started/&#34;&gt;Getting started&lt;/a&gt; | &lt;a href=&#34;https://docs.iggy.rs&#34;&gt;Documentation&lt;/a&gt; | &lt;a href=&#34;https://crates.io/crates/iggy&#34;&gt;Crates&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iggy-rs/iggy/master/assets/iggy.png&#34; alt=&#34;iggy&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Iggy&lt;/strong&gt; is the persistent message streaming platform written in Rust, supporting &lt;a href=&#34;https://www.chromium.org/quic/&#34;&gt;QUIC&lt;/a&gt;, TCP (custom binary specification) and HTTP (regular REST API) transport protocols. Currently, running as a single server, it allows creating streams, topics, partitions and segments, and send/receive messages to/from them. The &lt;strong&gt;messages are stored on disk as an append-only log&lt;/strong&gt;, and are persisted between restarts.&lt;/p&gt; &#xA;&lt;p&gt;The goal of the project is to make a distributed streaming platform (running as a cluster), which will be able to scale horizontally and handle &lt;strong&gt;millions of messages per second&lt;/strong&gt; (actually, &lt;strong&gt;it&#39;s already very fast&lt;/strong&gt;, see the benchmarks below).&lt;/p&gt; &#xA;&lt;p&gt;It is a pet project of mine to learn more about distributed systems and Rust. The name is an abbreviation for the Italian Greyhound - small yet extremely fast dogs, the best in their class. Just like mine lovely &lt;a href=&#34;https://www.instagram.com/fabio.and.cookie/&#34;&gt;Fabio &amp;amp; Cookie&lt;/a&gt; ❤️&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Highly performant&lt;/strong&gt;, persistent append-only log for the message streaming&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Very high throughput&lt;/strong&gt; for both writes and reads&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Low latency and predictable resource usage&lt;/strong&gt; thanks to the Rust compiled language (no GC)&lt;/li&gt; &#xA; &lt;li&gt;Support for multiple streams, topics and partitions&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;strong&gt;multiple transport protocols&lt;/strong&gt; (QUIC, TCP, HTTP)&lt;/li&gt; &#xA; &lt;li&gt;Fully operational RESTful API which can be optionally enabled&lt;/li&gt; &#xA; &lt;li&gt;Available client SDK in Rust (more languages to come)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Works directly with the binary data&lt;/strong&gt; (lack of enforced schema and serialization/deserialization)&lt;/li&gt; &#xA; &lt;li&gt;Configurable server features (e.g. caching, segment size, data flush interval, transport protocols etc.)&lt;/li&gt; &#xA; &lt;li&gt;Possibility of storing the &lt;strong&gt;consumer offsets&lt;/strong&gt; on the server&lt;/li&gt; &#xA; &lt;li&gt;Multiple ways of polling the messages: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;By offset (using the indexes)&lt;/li&gt; &#xA;   &lt;li&gt;By timestamp (using the time indexes)&lt;/li&gt; &#xA;   &lt;li&gt;First/Last N messages&lt;/li&gt; &#xA;   &lt;li&gt;Next N messages for the specific consumer&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Possibility of &lt;strong&gt;auto committing the offset&lt;/strong&gt; (e.g. to achieve &lt;em&gt;at-most-once&lt;/em&gt; delivery)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Consumer groups&lt;/strong&gt; allowing message ordering and horizontal scaling across the consumers&lt;/li&gt; &#xA; &lt;li&gt;Additional features such as &lt;strong&gt;server side message deduplication&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Built-in benchmarking app to test the performance&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Single binary deployment&lt;/strong&gt; (no external dependencies)&lt;/li&gt; &#xA; &lt;li&gt;Running as a single node (no cluster support yet)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Supported languages SDK&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/iggy&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iggy-rs/iggy-dotnet-client&#34;&gt;C#&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Web UI&lt;/h3&gt; &#xA;&lt;p&gt;There&#39;s an ongoing effort to build the administrative web UI for the server, which will allow to manage the streams, topics, partitions, messages and so on. Check the &lt;a href=&#34;https://github.com/iggy-rs/iggy-web-ui&#34;&gt;Web UI repository&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;You can find the &lt;code&gt;Dockerfile&lt;/code&gt; and &lt;code&gt;docker-compose&lt;/code&gt; in the root of the repository. To build and start the server, run: &lt;code&gt;docker compose up&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, you can run the &lt;code&gt;client&lt;/code&gt; which is available in the running container, by executing: &lt;code&gt;docker exec -it iggy-server /client&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Quick start&lt;/h3&gt; &#xA;&lt;p&gt;Build the project (the longer compilation time is due to &lt;a href=&#34;https://doc.rust-lang.org/rustc/linker-plugin-lto.html&#34;&gt;LTO&lt;/a&gt; enabled in release &lt;a href=&#34;https://github.com/spetz/iggy/raw/master/Cargo.toml#L2&#34;&gt;profile&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cargo build -r&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run the tests:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cargo test&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Start the server:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cargo r --bin server -r&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Start the client (transports: &lt;code&gt;quic&lt;/code&gt;, &lt;code&gt;tcp&lt;/code&gt;, &lt;code&gt;http&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cargo r --bin client -r --transport tcp&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Create a stream named &lt;code&gt;dev&lt;/code&gt; with ID 1:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;stream.create|1|dev&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;List available streams:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;stream.list&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Get stream details (ID 1):&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;stream.get|1&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Create a topic named &lt;code&gt;dummy&lt;/code&gt; with ID 1 and 2 partitions (IDs 1 and 2) for stream &lt;code&gt;dev&lt;/code&gt; (ID 1):&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;topic.create|1|1|2|dummy&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;List available topics for stream &lt;code&gt;dev&lt;/code&gt; (ID 1):&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;topic.list|1&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Get topic details (ID 1) for stream &lt;code&gt;dev&lt;/code&gt; (ID 1):&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;topic.get|1|1&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Send a message &#39;hello world&#39; (ID 1) to the stream &lt;code&gt;dev&lt;/code&gt; (ID 1) to topic &lt;code&gt;dummy&lt;/code&gt; (ID 1) and partition 1:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;message.send|1|1|p|1|1|hello world&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Send another message &#39;lorem ipsum&#39; (ID 2) to the same stream, topic and partition:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;message.send|1|1|p|1|2|lorem ipsum&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Poll messages by a regular consumer &lt;code&gt;c&lt;/code&gt; (&lt;code&gt;g&lt;/code&gt; for consumer group) with ID 0 from the stream &lt;code&gt;dev&lt;/code&gt; (ID 1) for topic &lt;code&gt;dummy&lt;/code&gt; (ID 1) and partition with ID 1, starting with offset (&lt;code&gt;o&lt;/code&gt;) 0, messages count 2, without auto commit (&lt;code&gt;n&lt;/code&gt;) (storing consumer offset on server) and using string format &lt;code&gt;s&lt;/code&gt; to render messages payload:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;message.poll|c|0|1|1|1|o|0|2|n|s&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Finally, restart the server to see it is able to load the persisted data.&lt;/p&gt; &#xA;&lt;p&gt;The HTTP API endpoints can be found in &lt;a href=&#34;https://github.com/spetz/iggy/raw/master/server/server.http&#34;&gt;server.http&lt;/a&gt; file, which can be used with &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=humao.rest-client&#34;&gt;REST Client&lt;/a&gt; extension for VS Code.&lt;/p&gt; &#xA;&lt;p&gt;To see the detailed logs from the client/server, run it with &lt;code&gt;RUST_LOG=trace&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;See the images below&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Files structure&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iggy-rs/iggy/master/assets/files_structure.png&#34; alt=&#34;files structure&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Server start&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iggy-rs/iggy/master/assets/server_start.png&#34; alt=&#34;server start&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Client start&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iggy-rs/iggy/master/assets/client_start.png&#34; alt=&#34;client start&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Server restart&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iggy-rs/iggy/master/assets/server_restart.png&#34; alt=&#34;server restart&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Samples&lt;/h3&gt; &#xA;&lt;p&gt;You can find the sample consumer &amp;amp; producer applications under &lt;code&gt;samples&lt;/code&gt; directory. The purpose of these apps is to showcase the usage of the client SDK. To find out more about building the applications, please refer to the &lt;a href=&#34;https://docs.iggy.rs/introduction/getting-started&#34;&gt;getting started&lt;/a&gt; guide.&lt;/p&gt; &#xA;&lt;p&gt;To run the sample, first start the server with &lt;code&gt;cargo r --bin server&lt;/code&gt; and then run the producer and consumer apps with &lt;code&gt;cargo r --bin advanced-producer-sample&lt;/code&gt; and &lt;code&gt;cargo r --bin advanced-consumer-sample&lt;/code&gt; respectively.&lt;/p&gt; &#xA;&lt;p&gt;You might start multiple producers and consumers at the same time to see how the messages are being handled across multiple clients. Check the &lt;a href=&#34;https://github.com/spetz/iggy/raw/master/samples/src/shared/args.rs&#34;&gt;Args&lt;/a&gt; struct to see the available options, such as the transport protocol, stream, topic, partition, consumer ID, message size etc.&lt;/p&gt; &#xA;&lt;p&gt;By default, the consumer will poll the messages using the &lt;code&gt;next&lt;/code&gt; available offset with auto commit enabled, to store its offset on the server. With this approach, you can easily achieve at-most-once delivery.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iggy-rs/iggy/master/assets/sample.png&#34; alt=&#34;sample&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Benchmarks&lt;/h3&gt; &#xA;&lt;p&gt;To benchmark the project, first start the server and then run the benchmarking app:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cargo r --bin bench -r -- --tcp --test-send-messages --streams 10 --producers 10 --parallel-producer-streams --messages-per-batch 1000 --message-batches 1000 --message-size 1000&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cargo r --bin bench -r -- --tcp --test-poll-messages --streams 10 --consumers 10 --parallel-consumer-streams --messages-per-batch 1000 --message-batches 1000&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Depending on the hardware, settings in &lt;code&gt;server.json&lt;/code&gt;, transport protocol (&lt;code&gt;quic&lt;/code&gt;, &lt;code&gt;tcp&lt;/code&gt; or &lt;code&gt;http&lt;/code&gt;) and payload size (&lt;code&gt;messages-per-batch * message-size&lt;/code&gt;) you might expect &lt;strong&gt;over 4000 MB/s (e.g. 4M of 1 KB msg/sec) throughput for writes and 6000 MB/s for reads&lt;/strong&gt;. The current results have been achieved on Apple M1 Max with 64 GB RAM.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Write benchmark&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iggy-rs/iggy/master/assets/write_benchmark.png&#34; alt=&#34;write benchmark&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Read benchmark&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iggy-rs/iggy/master/assets/read_benchmark.png&#34; alt=&#34;read benchmark&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;TODO&lt;/h3&gt; &#xA;&lt;h4&gt;Project&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Setup workspace for different projects&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Create granular components with their own behavior and logic&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Define custom conventions such as error types, statuses etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Make use of logging and observability crates&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Create the benchmarking app to test client/server performance&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Implement unit tests&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Implement integration tests&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Implement end-to-end tests&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Implement sample producer &amp;amp; consumer applications to showcase the real usage&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Make use of &lt;code&gt;async trait&lt;/code&gt; (instead of the crate) once available in stable Rust&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Server&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Create a basic UDP server&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Make use of QUIC protocol&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Extend QUIC configuration with custom certificates&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Create a basic HTTP server&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Make use of HTTP protocol&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Create a basic TCP server&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Make use of TCP protocol&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Use async runtime from tokio&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Define the custom binary protocol for communication&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Allow multiple clients to connect to the server&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Provide configuration via terminal arguments&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Provide configuration via custom configuration file&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Implement the graceful shutdown&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Client&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Create a basic UDP client&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Make use of QUIC protocol&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Extend QUIC configuration with custom certificates&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Create a basic HTTP client&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Make use of HTTP protocol&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Create a basic TCP client&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Make use of TCP protocol&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Provide configuration via terminal arguments&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Provide configuration via custom configuration file&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Communicate with the server using established binary protocol&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Allow to send commands to the server via simple CLI&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Parse input from the CLI &amp;amp; handle the received response&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Keep the history of the commands in the CLI&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Create a simple terminal UI for the client&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;SDK&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Implement the QUIC SDK for the client&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Implement the HTTP SDK for the client&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Implement the TCP SDK for the client&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Make use of the SDK in client project&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Implement another SDK in C# for dotnet clients&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Streaming&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Implement basic structures such as &lt;code&gt;stream&lt;/code&gt;, &lt;code&gt;topic&lt;/code&gt;, &lt;code&gt;partition&lt;/code&gt;, &lt;code&gt;segment&lt;/code&gt; etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Encapsulate the logic of reading and writing to the stream&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Persist the stream structure to the disk &amp;amp; load it on startup&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Implement &lt;code&gt;Streams&lt;/code&gt; consisting of multiple &lt;code&gt;Topics&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Implement &lt;code&gt;Topic&lt;/code&gt; consisting of multiple &lt;code&gt;Partitions&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Implement &lt;code&gt;Partition&lt;/code&gt; consisting of multiple &lt;code&gt;Segments&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Store &lt;code&gt;Stream → Topic → Partition → Segment&lt;/code&gt; structures on the disk in the separate directories&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Store messages on disk as append-only log using binary format&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Store messages indexes and time indexes on disk for fast access&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Automatically create new partition segments when the current one is full&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Allow clients to create/read/delete topics&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Allow clients to send messages to the specific stream, topic and partition&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Allow clients to poll messages by offsets from the specific partition&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Allow clients to poll messages by timestamps from the specific partition&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Make use of ring buffer to cache in-memory the latest messages to allow fast access to them&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Index messages by their offset to allow fast access to the specific messages&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Index messages by their timestamp to allow fast access to the specific messages&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Allow parallel reading/writing from/to the distinct partitions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Allow storing client offset for the specific partition&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Implement efficient message writing on disk&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Implement efficient message reading from disk&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Implement zero-copy message reading from disk → sending to network buffer&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Implement message deduplication&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Implement consumer groups for message ordering &amp;amp; horizontal scaling&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Delete old messages bases on retention policy&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Distribution&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Implement consensus protocol for the cluster&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Implement leader election for the cluster&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Implement cluster membership protocol&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Implement cluster discovery protocol&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Implement cluster configuration protocol&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Implement cluster state replication protocol&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Implement cluster state synchronization protocol&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Implement partition replication protocol on different servers&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Allow clients to connect to the cluster&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;API&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Implement REST API for the server using Axum&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Expose all the routes to achieve the same functionality as with the QUIC and TCP&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Generate OpenAPI specification for the REST API&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;UI&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Build a simple UI for the server using chosen framework**&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ratatui-org/ratatui</title>
    <updated>2023-07-22T01:43:59Z</updated>
    <id>tag:github.com,2023-07-22:/ratatui-org/ratatui</id>
    <link href="https://github.com/ratatui-org/ratatui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rust library to build rich terminal user interfaces (TUIs) and dashboards&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ratatui&lt;/h1&gt; &#xA;&lt;img align=&#34;left&#34; src=&#34;https://avatars.githubusercontent.com/u/125200832?s=128&amp;amp;v=4&#34;&gt; &#xA;&lt;p&gt;&lt;code&gt;ratatui&lt;/code&gt; is a &lt;a href=&#34;https://www.rust-lang.org&#34;&gt;Rust&lt;/a&gt; library to build rich terminal user interfaces and dashboards. It is a community fork of the original &lt;a href=&#34;https://github.com/fdehau/tui-rs&#34;&gt;tui-rs&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crates.io/crates/ratatui&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/ratatui?logo=rust&amp;amp;style=flat-square&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ratatui-org/ratatui/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/l/ratatui?style=flat-square&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tui-rs-revival/ratatui/actions?query=workflow%3ACI+&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/tui-rs-revival/ratatui/ci.yml?style=flat-square&amp;amp;logo=github&#34; alt=&#34;GitHub CI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/crate/ratatui/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docsrs/ratatui?logo=rust&amp;amp;style=flat-square&#34; alt=&#34;Docs.rs&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://deps.rs/repo/github/tui-rs-revival/ratatui&#34;&gt;&lt;img src=&#34;https://deps.rs/repo/github/tui-rs-revival/ratatui/status.svg?style=flat-square&#34; alt=&#34;Dependency Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/tui-rs-revival/ratatui&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/tui-rs-revival/ratatui?logo=codecov&amp;amp;style=flat-square&amp;amp;token=BAQ8SOKEST&#34; alt=&#34;Codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/pMCEU9hNEj&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1070692720437383208?label=discord&amp;amp;logo=discord&amp;amp;style=flat-square&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- See RELEASE.md for instructions on creating the demo gif ---&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/tui-rs-revival/ratatui/assets/24392180/93ab0e38-93e0-4ae0-a31b-91ae6c393185&#34; alt=&#34;Demo of Ratatui&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Table of Contents&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ratatui-org/ratatui/main/#ratatui&#34;&gt;Ratatui&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ratatui-org/ratatui/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ratatui-org/ratatui/main/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ratatui-org/ratatui/main/#quickstart&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ratatui-org/ratatui/main/#status-of-this-fork&#34;&gt;Status of this fork&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ratatui-org/ratatui/main/#rust-version-requirements&#34;&gt;Rust version requirements&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ratatui-org/ratatui/main/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ratatui-org/ratatui/main/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ratatui-org/ratatui/main/#widgets&#34;&gt;Widgets&lt;/a&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ratatui-org/ratatui/main/#built-in&#34;&gt;Built in&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ratatui-org/ratatui/main/#third-party-libraries-bootstrapping-templates-and-widgets&#34;&gt;Third-party libraries, bootstrapping templates and widgets&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ratatui-org/ratatui/main/#apps&#34;&gt;Apps&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ratatui-org/ratatui/main/#alternatives&#34;&gt;Alternatives&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ratatui-org/ratatui/main/#contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ratatui-org/ratatui/main/#acknowledgments&#34;&gt;Acknowledgments&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ratatui-org/ratatui/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cargo add ratatui --features all-widgets&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or modify your &lt;code&gt;Cargo.toml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[dependencies]&#xA;ratatui = { version = &#34;0.22.0&#34;, features = [&#34;all-widgets&#34;]}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ratatui is mostly backwards compatible with &lt;code&gt;tui-rs&lt;/code&gt;. To migrate an existing project, it may be easier to rename the ratatui dependency to &lt;code&gt;tui&lt;/code&gt; rather than updating every usage of the crate. E.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[dependencies]&#xA;tui = { package = &#34;ratatui&#34;, version = &#34;0.22.0&#34;, features = [&#34;all-widgets&#34;]}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;ratatui&lt;/code&gt; is a terminal UI library that supports multiple backends:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/crossterm-rs/crossterm&#34;&gt;crossterm&lt;/a&gt; [default]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ticki/termion&#34;&gt;termion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wez/wezterm/tree/master/termwiz&#34;&gt;termwiz&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The library is based on the principle of immediate rendering with intermediate buffers. This means that at each new frame you should build all widgets that are supposed to be part of the UI. While providing a great flexibility for rich and interactive UI, this may introduce overhead for highly dynamic content. So, the implementation try to minimize the number of ansi escapes sequences generated to draw the updated UI. In practice, given the speed of &lt;code&gt;Rust&lt;/code&gt; the overhead rather comes from the terminal emulator than the library itself.&lt;/p&gt; &#xA;&lt;p&gt;Moreover, the library does not provide any input handling nor any event system and you may rely on the previously cited libraries to achieve such features.&lt;/p&gt; &#xA;&lt;p&gt;We keep a &lt;a href=&#34;https://raw.githubusercontent.com/ratatui-org/ratatui/main/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt; generated by &lt;a href=&#34;https://github.com/orhun/git-cliff&#34;&gt;git-cliff&lt;/a&gt; utilizing &lt;a href=&#34;https://www.conventionalcommits.org/&#34;&gt;Conventional Commits&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;The following example demonstrates the minimal amount of code necessary to setup a terminal and render &#34;Hello World!&#34;. The full code for this example which contains a little more detail is in &lt;a href=&#34;https://raw.githubusercontent.com/ratatui-org/ratatui/main/examples/hello_world.rs&#34;&gt;hello_world.rs&lt;/a&gt;. For more guidance on how to create Ratatui apps, see the &lt;a href=&#34;https://docs.rs/ratatui&#34;&gt;Docs&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/ratatui-org/ratatui/main/#examples&#34;&gt;Examples&lt;/a&gt;. There is also a starter template available at &lt;a href=&#34;https://github.com/tui-rs-revival/rust-tui-template&#34;&gt;rust-tui-template&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn Error&amp;gt;&amp;gt; {&#xA;    let mut terminal = setup_terminal()?;&#xA;    run(&amp;amp;mut terminal)?;&#xA;    restore_terminal(&amp;amp;mut terminal)?;&#xA;    Ok(())&#xA;}&#xA;&#xA;fn setup_terminal() -&amp;gt; Result&amp;lt;Terminal&amp;lt;CrosstermBackend&amp;lt;Stdout&amp;gt;&amp;gt;, Box&amp;lt;dyn Error&amp;gt;&amp;gt; {&#xA;    let mut stdout = io::stdout();&#xA;    enable_raw_mode()?;&#xA;    execute!(stdout, EnterAlternateScreen)?;&#xA;    Ok(Terminal::new(CrosstermBackend::new(stdout))?)&#xA;}&#xA;&#xA;fn restore_terminal(&#xA;    terminal: &amp;amp;mut Terminal&amp;lt;CrosstermBackend&amp;lt;Stdout&amp;gt;&amp;gt;,&#xA;) -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn Error&amp;gt;&amp;gt; {&#xA;    disable_raw_mode()?;&#xA;    execute!(terminal.backend_mut(), LeaveAlternateScreen,)?;&#xA;    Ok(terminal.show_cursor()?)&#xA;}&#xA;&#xA;fn run(terminal: &amp;amp;mut Terminal&amp;lt;CrosstermBackend&amp;lt;Stdout&amp;gt;&amp;gt;) -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn Error&amp;gt;&amp;gt; {&#xA;    Ok(loop {&#xA;        terminal.draw(|frame| {&#xA;            let greeting = Paragraph::new(&#34;Hello World!&#34;);&#xA;            frame.render_widget(greeting, frame.size());&#xA;        })?;&#xA;        if event::poll(Duration::from_millis(250))? {&#xA;            if let Event::Key(key) = event::read()? {&#xA;                if KeyCode::Char(&#39;q&#39;) == key.code {&#xA;                    break;&#xA;                }&#xA;            }&#xA;        }&#xA;    })&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Status of this fork&lt;/h2&gt; &#xA;&lt;p&gt;In response to the original maintainer &lt;a href=&#34;https://github.com/fdehau&#34;&gt;&lt;strong&gt;Florian Dehau&lt;/strong&gt;&lt;/a&gt;&#39;s issue regarding the &lt;a href=&#34;https://github.com/fdehau/tui-rs/issues/654&#34;&gt;future of &lt;code&gt;tui-rs&lt;/code&gt;&lt;/a&gt;, several members of the community forked the project and created this crate. We look forward to continuing the work started by Florian 🚀&lt;/p&gt; &#xA;&lt;p&gt;In order to organize ourselves, we currently use a &lt;a href=&#34;https://discord.gg/pMCEU9hNEj&#34;&gt;Discord server&lt;/a&gt;, feel free to join and come chat! There are also plans to implement a &lt;a href=&#34;https://matrix.org/&#34;&gt;Matrix&lt;/a&gt; bridge in the near future. &lt;strong&gt;Discord is not a MUST to contribute&lt;/strong&gt;. We follow a pretty standard github centered open source workflow keeping the most important conversations on GitHub, open an issue or PR and it will be addressed. 😄&lt;/p&gt; &#xA;&lt;p&gt;Please make sure you read the updated &lt;a href=&#34;https://raw.githubusercontent.com/ratatui-org/ratatui/main/CONTRIBUTING.md&#34;&gt;contributing&lt;/a&gt; guidelines, especially if you are interested in working on a PR or issue opened in the previous repository.&lt;/p&gt; &#xA;&lt;h2&gt;Rust version requirements&lt;/h2&gt; &#xA;&lt;p&gt;Since version 0.21.0, The Minimum Supported Rust Version (MSRV) of &lt;code&gt;ratatui&lt;/code&gt; is 1.65.0.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The documentation can be found on &lt;a href=&#34;https://docs.rs/ratatui&#34;&gt;docs.rs.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;The demo shown in the gif above is available on all available backends.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# crossterm&#xA;cargo run --example demo&#xA;# termion&#xA;cargo run --example demo --no-default-features --features=termion&#xA;# termwiz&#xA;cargo run --example demo --no-default-features --features=termwiz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The UI code for this is in &lt;a href=&#34;https://raw.githubusercontent.com/ratatui-org/ratatui/main/examples/demo/ui.rs&#34;&gt;examples/demo/ui.rs&lt;/a&gt; while the application state is in &lt;a href=&#34;https://raw.githubusercontent.com/ratatui-org/ratatui/main/examples/demo/app.rs&#34;&gt;examples/demo/app.rs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If the user interface contains glyphs that are not displayed correctly by your terminal, you may want to run the demo without those symbols:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cargo run --example demo --release -- --tick-rate 200 --enhanced-graphics false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More examples are available in the &lt;a href=&#34;https://raw.githubusercontent.com/ratatui-org/ratatui/main/examples/&#34;&gt;examples&lt;/a&gt; folder.&lt;/p&gt; &#xA;&lt;h2&gt;Widgets&lt;/h2&gt; &#xA;&lt;h3&gt;Built in&lt;/h3&gt; &#xA;&lt;p&gt;The library comes with the following &lt;a href=&#34;https://docs.rs/ratatui/latest/ratatui/widgets/index.html&#34;&gt;widgets&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/ratatui/latest/ratatui/widgets/canvas/struct.Canvas.html&#34;&gt;Canvas&lt;/a&gt; which allows rendering &lt;a href=&#34;https://docs.rs/ratatui/latest/ratatui/widgets/canvas/index.html&#34;&gt;points, lines, shapes and a world map&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/ratatui/latest/ratatui/widgets/struct.BarChart.html&#34;&gt;BarChart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/ratatui/latest/ratatui/widgets/struct.Block.html&#34;&gt;Block&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/ratatui/latest/ratatui/widgets/calendar/index.html&#34;&gt;Calendar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/ratatui/latest/ratatui/widgets/struct.Chart.html&#34;&gt;Chart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/ratatui/latest/ratatui/widgets/struct.Gauge.html&#34;&gt;Gauge&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/ratatui/latest/ratatui/widgets/struct.List.html&#34;&gt;List&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/ratatui/latest/ratatui/widgets/struct.Paragraph.html&#34;&gt;Paragraph&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/ratatui/latest/ratatui/widgets/struct.Sparkline.html&#34;&gt;Sparkline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/ratatui/latest/ratatui/widgets/struct.Table.html&#34;&gt;Table&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/ratatui/latest/ratatui/widgets/struct.Tabs.html&#34;&gt;Tabs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each widget has an associated example which can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/ratatui-org/ratatui/main/examples/&#34;&gt;examples&lt;/a&gt; folder. Run each examples with cargo (e.g. to run the gauge example &lt;code&gt;cargo run --example gauge&lt;/code&gt;), and quit by pressing &lt;code&gt;q&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also run all examples by running &lt;code&gt;cargo make run-examples&lt;/code&gt; (requires &lt;code&gt;cargo-make&lt;/code&gt; that can be installed with &lt;code&gt;cargo install cargo-make&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Third-party libraries, bootstrapping templates and widgets&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/uttarayan21/ansi-to-tui&#34;&gt;ansi-to-tui&lt;/a&gt; — Convert ansi colored text to &lt;code&gt;tui::text::Text&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/uttarayan21/color-to-tui&#34;&gt;color-to-tui&lt;/a&gt; — Parse hex colors to &lt;code&gt;tui::style::Color&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tui-rs-revival/rust-tui-template&#34;&gt;rust-tui-template&lt;/a&gt; — A template for bootstrapping a Rust TUI application with Tui-rs &amp;amp; crossterm&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pmsanford/simple-tui-rs&#34;&gt;simple-tui-rs&lt;/a&gt; — A simple example tui-rs app&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jkelleyrtp/tui-builder&#34;&gt;tui-builder&lt;/a&gt; — Batteries-included MVC framework for Tui-rs + Crossterm apps&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kegesch/tui-clap-rs&#34;&gt;tui-clap&lt;/a&gt; — Use clap-rs together with Tui-rs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kegesch/tui-log-rs&#34;&gt;tui-log&lt;/a&gt; — Example of how to use logging with Tui-rs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gin66/tui-logger&#34;&gt;tui-logger&lt;/a&gt; — Logger and Widget for Tui-rs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/veeso/tui-realm&#34;&gt;tui-realm&lt;/a&gt; — Tui-rs framework to build stateful applications with a React/Elm inspired approach&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/veeso/tui-realm-treeview&#34;&gt;tui-realm-treeview&lt;/a&gt; — Treeview component for Tui-realm&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/EdJoPaTo/tui-rs-tree-widget&#34;&gt;tui-rs-tree-widgets&lt;/a&gt;: Widget for tree data structures.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/markatk/tui-windows-rs&#34;&gt;tui-windows&lt;/a&gt; — Tui-rs abstraction to handle multiple windows and their rendering&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rhysd/tui-textarea&#34;&gt;tui-textarea&lt;/a&gt;: Simple yet powerful multi-line text editor widget supporting several key shortcuts, undo/redo, text search, etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sayanarijit/tui-input&#34;&gt;tui-input&lt;/a&gt;: TUI input library supporting multiple backends and tui-rs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/a-kenji/tui-term&#34;&gt;tui-term&lt;/a&gt;: A pseudoterminal widget library that enables the rendering of terminal applications as ratatui widgets.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Apps&lt;/h2&gt; &#xA;&lt;p&gt;Check out the list of more than 50 &lt;a href=&#34;https://github.com/tui-rs-revival/ratatui/wiki/Apps-using-Ratatui&#34;&gt;Apps using &lt;code&gt;Ratatui&lt;/code&gt;&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;p&gt;You might want to checkout &lt;a href=&#34;https://github.com/gyscos/Cursive&#34;&gt;Cursive&lt;/a&gt; for an alternative solution to build text user interfaces in Rust.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tui-rs-revival/ratatui/graphs/contributors&#34;&gt;&lt;img src=&#34;https://contrib.rocks/image?repo=tui-rs-revival/ratatui&#34; alt=&#34;GitHub Contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;Special thanks to &lt;a href=&#34;https://github.com/nawok&#34;&gt;&lt;strong&gt;Pavel Fomchenkov&lt;/strong&gt;&lt;/a&gt; for his work in designing &lt;strong&gt;an awesome logo&lt;/strong&gt; for the ratatui project and tui-rs-revival organization.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ratatui-org/ratatui/main/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>