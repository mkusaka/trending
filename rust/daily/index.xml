<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-16T01:35:21Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>huggingface/text-embeddings-inference</title>
    <updated>2023-10-16T01:35:21Z</updated>
    <id>tag:github.com,2023-10-16:/huggingface/text-embeddings-inference</id>
    <link href="https://github.com/huggingface/text-embeddings-inference" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A blazing fast inference solution for text embeddings models&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Text Embeddings Inference&lt;/h1&gt; &#xA; &lt;a href=&#34;https://github.com/huggingface/text-embeddings-inference&#34;&gt; &lt;img alt=&#34;GitHub Repo stars&#34; src=&#34;https://img.shields.io/github/stars/huggingface/text-embeddings-inference?style=social&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://huggingface.github.io/text-embeddings-inference&#34;&gt; &lt;img alt=&#34;Swagger API documentation&#34; src=&#34;https://img.shields.io/badge/API-Swagger-informational&#34;&gt; &lt;/a&gt; &#xA; &lt;p&gt;A blazing fast inference solution for text embeddings models.&lt;/p&gt; &#xA; &lt;p&gt;Benchmark for &lt;a href=&#34;https://huggingface.co/BAAI/bge-base-en-v1.5&#34;&gt;BAAI/bge-base-en-v1.5&lt;/a&gt; on a Nvidia A10 with a sequence length of 512 tokens:&lt;/p&gt; &#xA; &lt;p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/huggingface/text-embeddings-inference/main/assets/bs1-lat.png&#34; width=&#34;400&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/huggingface/text-embeddings-inference/main/assets/bs1-tp.png&#34; width=&#34;400&#34;&gt; &lt;/p&gt; &#xA; &lt;p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/huggingface/text-embeddings-inference/main/assets/bs32-lat.png&#34; width=&#34;400&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/huggingface/text-embeddings-inference/main/assets/bs32-tp.png&#34; width=&#34;400&#34;&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huggingface/text-embeddings-inference/main/#get-started&#34;&gt;Get Started&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huggingface/text-embeddings-inference/main/#supported-models&#34;&gt;Supported Models&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huggingface/text-embeddings-inference/main/#docker&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huggingface/text-embeddings-inference/main/#docker-images&#34;&gt;Docker Images&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huggingface/text-embeddings-inference/main/#api-documentation&#34;&gt;API Documentation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huggingface/text-embeddings-inference/main/#using-a-private-or-gated-model&#34;&gt;Using a private or gated model&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huggingface/text-embeddings-inference/main/#distributed-tracing&#34;&gt;Distributed Tracing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huggingface/text-embeddings-inference/main/#local-install&#34;&gt;Local Install&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;No compilation step&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Dynamic shapes&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Small docker images and fast boot times. Get ready for true serverless!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Token based dynamic batching&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Optimized transformers code for inference using &lt;a href=&#34;https://github.com/HazyResearch/flash-attention&#34;&gt;Flash Attention&lt;/a&gt;, &lt;a href=&#34;https://github.com/huggingface/candle&#34;&gt;Candle&lt;/a&gt; and &lt;a href=&#34;https://docs.nvidia.com/cuda/cublas/#using-the-cublaslt-api&#34;&gt;cuBLASLt&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/huggingface/safetensors&#34;&gt;Safetensors&lt;/a&gt; weight loading&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Production ready (distributed tracing with Open Telemetry, Prometheus metrics)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Get Started&lt;/h2&gt; &#xA;&lt;h3&gt;Supported Models&lt;/h3&gt; &#xA;&lt;p&gt;You can use any BERT or XLM-RoBERTa model with absolute positions in &lt;code&gt;text-embeddings-inference&lt;/code&gt;. If the model does not have &lt;code&gt;safetensors&lt;/code&gt; weights you can convert it using &lt;a href=&#34;https://huggingface.co/spaces/safetensors/convert&#34;&gt;this space&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Support for other model types will be added in the future.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Examples of supported models:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;MTEB Rank&lt;/th&gt; &#xA;   &lt;th&gt;Model Type&lt;/th&gt; &#xA;   &lt;th&gt;Model ID&lt;/th&gt; &#xA;   &lt;th&gt;Specific Revision&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;Bert&lt;/td&gt; &#xA;   &lt;td&gt;BAAI/bge-large-en-v1.5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/BAAI/bge-large-en-v1.5/discussions/5&#34;&gt;refs/pr/5&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;BAAI/bge-base-en-v1.5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/BAAI/bge-base-en-v1.5/discussions/1&#34;&gt;refs/pr/1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;llmrails/ember-v1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;thenlper/gte-large&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;thenlper/gte-base&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;intfloat/e5-large-v2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;7&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;BAAI/bge-small-en-v1.5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/BAAI/bge-small-en-v1.5/discussions/3&#34;&gt;refs/pr/3&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;intfloat/e5-base-v2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;11&lt;/td&gt; &#xA;   &lt;td&gt;XLM-RoBERTa&lt;/td&gt; &#xA;   &lt;td&gt;intfloat/multilingual-e5-large&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;You can explore the list of best performing text embeddings models &lt;a href=&#34;https://huggingface.co/spaces/mteb/leaderboard&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;model=BAAI/bge-large-en-v1.5&#xA;revision=refs/pr/5&#xA;volume=$PWD/data # share a volume with the Docker container to avoid downloading weights every run&#xA;&#xA;docker run --gpus all -p 8080:80 -v $volume:/data --pull always ghcr.io/huggingface/text-embeddings-inference:latest --model-id $model --revision $revision&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then you can make requests like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl 127.0.0.1:8080/embed \&#xA;    -X POST \&#xA;    -d &#39;{&#34;inputs&#34;:&#34;What is Deep Learning?&#34;}&#39; \&#xA;    -H &#39;Content-Type: application/json&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; To use GPUs, you need to install the &lt;a href=&#34;https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html&#34;&gt;NVIDIA Container Toolkit&lt;/a&gt;. We also recommend using NVIDIA drivers with CUDA version 12 or higher.&lt;/p&gt; &#xA;&lt;p&gt;To see all options to serve your models:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;text-embeddings-router --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: text-embeddings-router [OPTIONS]&#xA;&#xA;Options:&#xA;      --model-id &amp;lt;MODEL_ID&amp;gt;&#xA;          The name of the model to load. Can be a MODEL_ID as listed on &amp;lt;https://hf.co/models&amp;gt; like `thenlper/gte-base`. Or it can be a local directory containing the necessary files as saved by `save_pretrained(...)` methods of transformers&#xA;&#xA;          [env: MODEL_ID=]&#xA;          [default: thenlper/gte-base]&#xA;&#xA;      --revision &amp;lt;REVISION&amp;gt;&#xA;          The actual revision of the model if you&#39;re referring to a model on the hub. You can use a specific commit id or a branch like `refs/pr/2`&#xA;&#xA;          [env: REVISION=]&#xA;&#xA;      --tokenization-workers &amp;lt;TOKENIZATION_WORKERS&amp;gt;&#xA;          Optionally control the number of tokenizer workers used for payload tokenization, validation and truncation. Default to the number of CPU cores on the machine&#xA;&#xA;          [env: TOKENIZATION_WORKERS=]&#xA;&#xA;      --dtype &amp;lt;DTYPE&amp;gt;&#xA;          The dtype to be forced upon the model&#xA;&#xA;          [env: DTYPE=]&#xA;          [default: float16]&#xA;          [possible values: float16, float32]&#xA;&#xA;      --max-concurrent-requests &amp;lt;MAX_CONCURRENT_REQUESTS&amp;gt;&#xA;          The maximum amount of concurrent requests for this particular deployment. Having a low limit will refuse clients requests instead of having them wait for too long and is usually good to handle backpressure correctly&#xA;&#xA;          [env: MAX_CONCURRENT_REQUESTS=]&#xA;          [default: 512]&#xA;&#xA;      --max-batch-tokens &amp;lt;MAX_BATCH_TOKENS&amp;gt;&#xA;          **IMPORTANT** This is one critical control to allow maximum usage of the available hardware.&#xA;&#xA;          This represents the total amount of potential tokens within a batch.&#xA;&#xA;          For `max_batch_tokens=1000`, you could fit `10` queries of `total_tokens=100` or a single query of `1000` tokens.&#xA;&#xA;          Overall this number should be the largest possible until the model is compute bound. Since the actual memory overhead depends on the model implementation, text-embeddings-inference cannot infer this number automatically.&#xA;&#xA;          [env: MAX_BATCH_TOKENS=]&#xA;          [default: 16384]&#xA;&#xA;      --max-batch-requests &amp;lt;MAX_BATCH_REQUESTS&amp;gt;&#xA;          Optionally control the maximum number of individual requests in a batch&#xA;&#xA;          [env: MAX_BATCH_REQUESTS=]&#xA;&#xA;      --max-client-batch-size &amp;lt;MAX_CLIENT_BATCH_SIZE&amp;gt;&#xA;          Control the maximum number of inputs that a client can send in a single request&#xA;&#xA;          [env: MAX_CLIENT_BATCH_SIZE=]&#xA;          [default: 32]&#xA;&#xA;      --hf-api-token &amp;lt;HF_API_TOKEN&amp;gt;&#xA;          Your HuggingFace hub token&#xA;&#xA;          [env: HF_API_TOKEN=]&#xA;&#xA;      --hostname &amp;lt;HOSTNAME&amp;gt;&#xA;          The IP address to listen on&#xA;&#xA;          [env: HOSTNAME=]&#xA;          [default: 0.0.0.0]&#xA;&#xA;  -p, --port &amp;lt;PORT&amp;gt;&#xA;          The port to listen on&#xA;&#xA;          [env: PORT=]&#xA;          [default: 3000]&#xA;&#xA;      --uds-path &amp;lt;UDS_PATH&amp;gt;&#xA;          The name of the unix socket some text-embeddings-inference backends will use as they communicate internally with gRPC&#xA;&#xA;          [env: UDS_PATH=]&#xA;          [default: /tmp/text-embeddings-inference-server]&#xA;&#xA;      --huggingface-hub-cache &amp;lt;HUGGINGFACE_HUB_CACHE&amp;gt;&#xA;          The location of the huggingface hub cache. Used to override the location if you want to provide a mounted disk for instance&#xA;&#xA;          [env: HUGGINGFACE_HUB_CACHE=/data]&#xA;&#xA;      --json-output&#xA;          Outputs the logs in JSON format (useful for telemetry)&#xA;&#xA;          [env: JSON_OUTPUT=]&#xA;&#xA;      --otlp-endpoint &amp;lt;OTLP_ENDPOINT&amp;gt;&#xA;          [env: OTLP_ENDPOINT=]&#xA;&#xA;      --cors-allow-origin &amp;lt;CORS_ALLOW_ORIGIN&amp;gt;&#xA;          [env: CORS_ALLOW_ORIGIN=]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker Images&lt;/h3&gt; &#xA;&lt;p&gt;Text Embeddings Inference ships with multiple Docker images that you can use to target a specific backend:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Architecture&lt;/th&gt; &#xA;   &lt;th&gt;Image&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CPU&lt;/td&gt; &#xA;   &lt;td&gt;ghcr.io/huggingface/text-embeddings-inference:cpu-latest&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Turing&lt;/td&gt; &#xA;   &lt;td&gt;ghcr.io/huggingface/text-embeddings-inference:turing-latest&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ampere 80&lt;/td&gt; &#xA;   &lt;td&gt;ghcr.io/huggingface/text-embeddings-inference:latest&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ampere 86&lt;/td&gt; &#xA;   &lt;td&gt;ghcr.io/huggingface/text-embeddings-inference:86-latest&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hopper&lt;/td&gt; &#xA;   &lt;td&gt;ghcr.io/huggingface/text-embeddings-inference:hopper-latest&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;API documentation&lt;/h3&gt; &#xA;&lt;p&gt;You can consult the OpenAPI documentation of the &lt;code&gt;text-embeddings-inference&lt;/code&gt; REST API using the &lt;code&gt;/docs&lt;/code&gt; route. The Swagger UI is also available at: &lt;a href=&#34;https://huggingface.github.io/text-embeddings-inference&#34;&gt;https://huggingface.github.io/text-embeddings-inference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using a private or gated model&lt;/h3&gt; &#xA;&lt;p&gt;You have the option to utilize the &lt;code&gt;HUGGING_FACE_HUB_TOKEN&lt;/code&gt; environment variable for configuring the token employed by &lt;code&gt;text-embeddings-inference&lt;/code&gt;. This allows you to gain access to protected resources.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://huggingface.co/settings/tokens&#34;&gt;https://huggingface.co/settings/tokens&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Copy your cli READ token&lt;/li&gt; &#xA; &lt;li&gt;Export &lt;code&gt;HUGGING_FACE_HUB_TOKEN=&amp;lt;your cli READ token&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;or with Docker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;model=&amp;lt;your private model&amp;gt;&#xA;volume=$PWD/data # share a volume with the Docker container to avoid downloading weights every run&#xA;token=&amp;lt;your cli READ token&amp;gt;&#xA;&#xA;docker run --gpus all -e HUGGING_FACE_HUB_TOKEN=$token -p 8080:80 -v $volume:/data --pull always ghcr.io/huggingface/text-embeddings-inference:latest --model-id $model&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Distributed Tracing&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;text-embeddings-inference&lt;/code&gt; is instrumented with distributed tracing using OpenTelemetry. You can use this feature by setting the address to an OTLP collector with the &lt;code&gt;--otlp-endpoint&lt;/code&gt; argument.&lt;/p&gt; &#xA;&lt;h3&gt;Local install&lt;/h3&gt; &#xA;&lt;h4&gt;CPU&lt;/h4&gt; &#xA;&lt;p&gt;You can also opt to install &lt;code&gt;text-embeddings-inference&lt;/code&gt; locally.&lt;/p&gt; &#xA;&lt;p&gt;First &lt;a href=&#34;https://rustup.rs/&#34;&gt;install Rust&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cargo install --path router -F candle --no-default-features&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now launch Text Embeddings Inference on CPU with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;model=BAAI/bge-large-en-v1.5&#xA;revision=refs/pr/5&#xA;&#xA;text-embeddings-router --model-id $model --revision $revision --port 8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; on some machines, you may also need the OpenSSL libraries and gcc. On Linux machines, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt-get install libssl-dev gcc -y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Cuda&lt;/h4&gt; &#xA;&lt;p&gt;Make sure you have Cuda and the nvidia drivers installed. We recommend using NVIDIA drivers with CUDA version 12 or higher. You also need to add the nvidia binaries to your path:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export PATH=$PATH:/usr/local/cuda/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# This can take a while as we need to compile a lot of cuda kernels&#xA;cargo install --path router -F candle-cuda --no-default-features&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now launch Text Embeddings Inference on GPU with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;model=BAAI/bge-large-en-v1.5&#xA;revision=refs/pr/5&#xA;&#xA;text-embeddings-router --model-id $model --revision $revision --port 8080&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>