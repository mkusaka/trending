<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-01T01:45:02Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>xou816/spot</title>
    <updated>2023-03-01T01:45:02Z</updated>
    <id>tag:github.com,2023-03-01:/xou816/spot</id>
    <link href="https://github.com/xou816/spot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Native Spotify client for the GNOME desktop&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Spot &lt;a href=&#34;https://github.com/xou816/spot/actions/workflows/spot-snapshots.yml&#34;&gt;&lt;img src=&#34;https://github.com/xou816/spot/actions/workflows/spot-snapshots.yml/badge.svg?branch=master&#34; alt=&#34;spot-snapshots&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Gtk/Rust native Spotify client for the GNOME desktop. &lt;strong&gt;Only works with premium accounts!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Based on &lt;a href=&#34;https://github.com/librespot-org/librespot/&#34;&gt;librespot&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xou816/spot/development/data/appstream/2.png&#34; alt=&#34;Spot screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://flathub.org/apps/details/dev.alextren.Spot&#34;&gt;&lt;img width=&#34;130&#34; alt=&#34;Download on Flathub&#34; src=&#34;https://flathub.org/assets/badges/flathub-badge-en.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage notes&lt;/h2&gt; &#xA;&lt;h3&gt;Credentials&lt;/h3&gt; &#xA;&lt;p&gt;It is recommended to install a libsecret compliant keyring application, such as &lt;a href=&#34;https://wiki.gnome.org/action/show/Projects/GnomeKeyring&#34;&gt;GNOME Keyring&lt;/a&gt; (aka seahorse). This will allow saving your password securely between launches.&lt;/p&gt; &#xA;&lt;p&gt;In GNOME, things should work out of the box. It might be a bit trickier to get it working in other DEs: see this &lt;a href=&#34;https://wiki.archlinux.org/index.php/GNOME/Keyring&#34;&gt;ArchWiki entry&lt;/a&gt; for detailed explanations on how to automatically start the daemon with your session.&lt;/p&gt; &#xA;&lt;p&gt;Bear special attention to the fact that to enable automatic login, you might have to use the same password for your user account and for the keyring, and that the keyring might need to be &lt;a href=&#34;https://wiki.archlinux.org/index.php/GNOME/Keyring#Passwords_are_not_remembered&#34;&gt;set as default&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/xou816/spot/issues/92#issuecomment-801852593&#34;&gt;this comment&lt;/a&gt; for more details!&lt;/p&gt; &#xA;&lt;h3&gt;Login in with Facebook&lt;/h3&gt; &#xA;&lt;p&gt;...is not supported. However, you can update your account in order to be able to log in with a username and password &lt;a href=&#34;https://github.com/xou816/spot/issues/373&#34;&gt;as explained in this issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Settings&lt;/h3&gt; &#xA;&lt;p&gt;Spot can also be configured via &lt;code&gt;gsettings&lt;/code&gt; if you want to change the audio backend, the song bitrate, etc.&lt;/p&gt; &#xA;&lt;h3&gt;Seek bar warping&lt;/h3&gt; &#xA;&lt;p&gt;It is possible to click on the seek bar to navigate to that position in a song. If you are having issues with this not working you may have &lt;a href=&#34;https://docs.gtk.org/gtk3/property.Settings.gtk-primary-button-warps-slider.html&#34;&gt;gtk-primary-button-warps-slider&lt;/a&gt; set to false. In order to fix this issue set the value to true in your gtk configuration.&lt;/p&gt; &#xA;&lt;h3&gt;Scrobbling&lt;/h3&gt; &#xA;&lt;p&gt;Scrobbling is not supported directly by Spot. However, you can use a tool such a &lt;a href=&#34;https://github.com/InputUsername/rescrobbled&#34;&gt;rescrobbled&lt;/a&gt; (&lt;a href=&#34;https://github.com/xou816/spot/issues/85&#34;&gt;see #85&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Lyrics&lt;/h3&gt; &#xA;&lt;p&gt;Similarly, Spot does not display lyrics for songs, but you can use &lt;a href=&#34;https://github.com/osdlyrics/osdlyrics&#34;&gt;osdlyrics&lt;/a&gt; (&lt;a href=&#34;https://github.com/xou816/spot/issues/226&#34;&gt;see #226&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Gtk theme&lt;/h3&gt; &#xA;&lt;p&gt;Spot uses the dark theme variant by default; this can be changed in the settings.&lt;/p&gt; &#xA;&lt;p&gt;If you are using the flatpak version, don&#39;t forget to install your theme with flatpak as well. See &lt;a href=&#34;https://github.com/xou816/spot/issues/209#issuecomment-860180537&#34;&gt;this comment&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;Similarly, snap also requires that you install the corresponding snap for your theme. See &lt;a href=&#34;https://github.com/xou816/spot/issues/338#issuecomment-975543476&#34;&gt;this comment&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Only works with premium accounts!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;playback control (play/pause, prev/next, seeking, shuffle, repeat (none, all, song))&lt;/li&gt; &#xA; &lt;li&gt;selection mode: easily browse and select mutliple tracks to queue them&lt;/li&gt; &#xA; &lt;li&gt;browse your saved albums and playlists&lt;/li&gt; &#xA; &lt;li&gt;search albums and artists&lt;/li&gt; &#xA; &lt;li&gt;view an artist&#39;s releases&lt;/li&gt; &#xA; &lt;li&gt;view users&#39; playlists&lt;/li&gt; &#xA; &lt;li&gt;view album info&lt;/li&gt; &#xA; &lt;li&gt;credentials management with Secret Service&lt;/li&gt; &#xA; &lt;li&gt;MPRIS integration&lt;/li&gt; &#xA; &lt;li&gt;playlist management (creation and edition)&lt;/li&gt; &#xA; &lt;li&gt;liked tracks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Planned&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GNOME search provider?&lt;/li&gt; &#xA; &lt;li&gt;improved search? (track results)&lt;/li&gt; &#xA; &lt;li&gt;recommendations?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! If you wish, add yourself to the &lt;code&gt;AUTHORS&lt;/code&gt; files when submitting your contribution.&lt;/p&gt; &#xA;&lt;p&gt;For any large feature/change, &lt;strong&gt;please&lt;/strong&gt; open an issue first to discuss implementation and design decisions.&lt;/p&gt; &#xA;&lt;h3&gt;Translating&lt;/h3&gt; &#xA;&lt;p&gt;Translations are managed using &lt;code&gt;gettext&lt;/code&gt; and are available in the &lt;code&gt;po/&lt;/code&gt; subdirectory.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please use &lt;a href=&#34;https://poeditor.com/join/project?hash=xfVrpQfRBM&#34;&gt;POEditor&lt;/a&gt; to submit translations.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you feel like it, you are welcome to open a PR to be added to the &lt;code&gt;TRANSLATORS&lt;/code&gt; file!&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;h3&gt;With GNOME Builder and flatpak&lt;/h3&gt; &#xA;&lt;p&gt;Pre-requisite: install the &lt;code&gt;org.freedesktop.Sdk.Extension.rust-stable&lt;/code&gt; SDK extension with flatpak. Builder might do this for you automatically, but it will install an older version; make sure the version installed matches the version of the Freedesktop SDK GNOME uses.&lt;/p&gt; &#xA;&lt;p&gt;Open the project in GNOME Builder and make the &lt;code&gt;dev.alextren.Spot.development.json&lt;/code&gt; configuration active. Then build :)&lt;/p&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;p&gt;Requires Rust (stable), &lt;strong&gt;GTK4&lt;/strong&gt;, and a couple other things. Also requires &lt;strong&gt;libadwaita&lt;/strong&gt; and &lt;strong&gt;blueprint-compiler&lt;/strong&gt;: they are not packaged on all distros at the moment, you might have to build them yourself!&lt;/p&gt; &#xA;&lt;p&gt;With meson:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;meson target -Dbuildtype=debug -Doffline=false --prefix=&#34;$HOME/.local&#34;&#xA;ninja install -C target&#xA;# to run test/linter/etc&#xA;meson test -C target  --verbose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will install a &lt;code&gt;.desktop&lt;/code&gt; file among other things, and the spot executable will be put in &lt;code&gt;.local/bin&lt;/code&gt; (you might want to add it to your path).&lt;/p&gt; &#xA;&lt;p&gt;To build an optimized release build, use &lt;code&gt;-Dbuildtype=release&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;h3&gt;Regenerating potfiles&lt;/h3&gt; &#xA;&lt;p&gt;When adding new &lt;code&gt;msgids&lt;/code&gt;, don&#39;t forget to regenerate/update the potfiles.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ninja spot-pot -C target&#xA;ninja spot-update-po -C target&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pulling updated strings from POEditor&lt;/h3&gt; &#xA;&lt;p&gt;We are now using POEditor and the wonderful &lt;a href=&#34;https://github.com/mick88/poeditor-sync&#34;&gt;&lt;code&gt;poeditor-sync&lt;/code&gt;&lt;/a&gt; tool.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;poeditor pull&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Regenerating sources for flatpak&lt;/h3&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/flatpak/flatpak-builder-tools/tree/master/cargo&#34;&gt;flatpak-cargo-generator.py&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ninja cargo-sources.json -C target&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Debugging&lt;/h3&gt; &#xA;&lt;p&gt;Set the &lt;code&gt;RUST_LOG&lt;/code&gt; env variable to the appropriate level.&lt;/p&gt; &#xA;&lt;p&gt;Debug builds (flatpak) are available from the master branch on Github (see the &lt;code&gt;spot-snaphots&lt;/code&gt; action).&lt;/p&gt; &#xA;&lt;p&gt;Spot caches images and HTTP responses in &lt;code&gt;~/.cache/spot&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Spot uses &lt;a href=&#34;https://github.com/sagebind/isahc&#34;&gt;isahc&lt;/a&gt;, which uses libcurl, therefore you can set the &lt;code&gt;https_proxy&lt;/code&gt; env variable to help with debugging. In debug mode, Spot skips SSL certificate verification.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>noib3/crop</title>
    <updated>2023-03-01T01:45:02Z</updated>
    <id>tag:github.com,2023-03-01:/noib3/crop</id>
    <link href="https://github.com/noib3/crop" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🌾 A utf-8 text rope&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🌾 crop&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crates.io/crates/crop&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/crop.svg?sanitize=true&#34; alt=&#34;Latest version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/noib3/crop/actions&#34;&gt;&lt;img src=&#34;https://github.com/noib3/crop/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/crop&#34;&gt;&lt;img src=&#34;https://docs.rs/crop/badge.svg?sanitize=true&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;crop is an implementation of a UTF-8 text rope, a data structure designed to be used in applications that need to handle frequent edits to arbitrarily large buffers, such as text editors.&lt;/p&gt; &#xA;&lt;p&gt;crop&#39;s &lt;code&gt;Rope&lt;/code&gt; is backed by a &lt;a href=&#34;https://en.wikipedia.org/wiki/B-tree&#34;&gt;B-tree&lt;/a&gt;, ensuring that the time complexity of inserting, deleting or replacing a piece of text is always logarithmic in the size of the &lt;code&gt;Rope&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;crop places an extreme focus on performance: check out &lt;a href=&#34;https://github.com/noib3/crop/raw/master/BENCHMARKS.md&#34;&gt;the benchmarks&lt;/a&gt; to see how it stacks up against similar projects.&lt;/p&gt; &#xA;&lt;h2&gt;Built with parallelism in mind&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Rope&lt;/code&gt;s use thread-safe reference counting to share data between threads. Cloning a &lt;code&gt;Rope&lt;/code&gt; takes up only 16 extra bytes of memory, and its copy-on-write semantics allow the actual text contents to be duplicated only when different clones diverge due to user edits.&lt;/p&gt; &#xA;&lt;p&gt;This allows to send snapshots of a &lt;code&gt;Rope&lt;/code&gt; to background threads to perform any IO or CPU-intensive computations, while the main thread is kept responsive and always ready for the next batch of edits.&lt;/p&gt; &#xA;&lt;h2&gt;Example usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;// A `Rope` can be created either directly from a string or incrementally&#xA;// using the `RopeBuilder`.&#xA;&#xA;let mut builder = RopeBuilder::new();&#xA;&#xA;builder&#xA;    .append(&#34;I am a 🦀\n&#34;)&#xA;    .append(&#34;Who walks the shore\n&#34;)&#xA;    .append(&#34;And pinches toes all day.\n&#34;)&#xA;    .append(&#34;\n&#34;)&#xA;    .append(&#34;If I were you\n&#34;)&#xA;    .append(&#34;I&#39;d wear some 👟\n&#34;)&#xA;    .append(&#34;And not get in my way.\n&#34;);&#xA;&#xA;let mut rope = builder.build();&#xA;&#xA;// `Rope`s can be sliced to obtain `RopeSlice`s.&#xA;//&#xA;// A `RopeSlice` is to a `Rope` as a `&amp;amp;str` is to a `String`: the former in&#xA;// each pair are borrowed references of the latter.&#xA;&#xA;// A `Rope` can be sliced using either byte offsets:&#xA;&#xA;let byte_slice: RopeSlice = rope.byte_slice(..32);&#xA;&#xA;assert_eq!(byte_slice, &#34;I am a 🦀\nWho walks the shore\n&#34;);&#xA;&#xA;// or line offsets:&#xA;&#xA;let line_slice: RopeSlice = rope.line_slice(..2);&#xA;&#xA;assert_eq!(line_slice, byte_slice);&#xA;&#xA;// We can also get a `RopeSlice` by asking the `Rope` for a specific line&#xA;// index:&#xA;&#xA;assert_eq!(rope.line(5), &#34;I&#39;d wear some 👟&#34;);&#xA;&#xA;// We can modify that line by getting its start/end byte offsets:&#xA;&#xA;let start: usize = rope.byte_of_line(5);&#xA;&#xA;let end: usize = rope.byte_of_line(6);&#xA;&#xA;// and replacing that byte range with some other text:&#xA;&#xA;rope.replace(start..end, &#34;I&#39;d rock some 👠\n&#34;);&#xA;&#xA;assert_eq!(rope.line(5), &#34;I&#39;d rock some 👠&#34;);&#xA;&#xA;// `Rope`s use `Arc`s to share data between threads, so cloning them is&#xA;// extremely cheap.&#xA;&#xA;let snapshot = rope.clone();&#xA;&#xA;// This allows to save a `Rope` to disk in a background thread while&#xA;// keeping the main thread responsive.&#xA;&#xA;thread::spawn(move || {&#xA;    let mut file =&#xA;        BufWriter::new(File::create(&#34;my_little_poem.txt&#34;).unwrap());&#xA;&#xA;    // The text content is stored in the leaves of the B-tree, where each&#xA;    // chunk can store up to 1KB of data.&#xA;    //&#xA;    // We can iterate over the leaves using the `Chunks` iterator which&#xA;    // yields the chunks of the `Rope` as string slices.&#xA;&#xA;    for chunk in snapshot.chunks() {&#xA;        file.write_all(chunk.as_bytes()).unwrap();&#xA;    }&#xA;})&#xA;.join()&#xA;.unwrap();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://docs.rs/crop&#34;&gt;the docs&lt;/a&gt; for a more in-depth overview of the crate.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;A significant portion of crop&#39;s public API was inspired by the excellent &lt;a href=&#34;https://github.com/cessen/ropey&#34;&gt;Ropey&lt;/a&gt; crate (from which I also borrowed some test vectors).&lt;/p&gt; &#xA;&lt;p&gt;Unlike crop, Ropey uses code points (&lt;code&gt;char&lt;/code&gt;s in Rust-speak) as its primary indexing metric. If you&#39;d prefer to work with &lt;code&gt;char&lt;/code&gt; offsets rather than byte offsets Ropey might be a great alternative.&lt;/p&gt;</summary>
  </entry>
</feed>