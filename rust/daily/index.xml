<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-23T01:38:10Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Speykious/cve-rs</title>
    <updated>2024-02-23T01:38:10Z</updated>
    <id>tag:github.com,2024-02-23:/Speykious/cve-rs</id>
    <link href="https://github.com/Speykious/cve-rs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Blazingly ðŸ”¥ fast ðŸš€ memory vulnerabilities, written in 100% safe Rust. ðŸ¦€&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Speykious/cve-rs/main/assets/cve-rs-logo.png&#34;&gt;&lt;/h1&gt; &#xA;&lt;h6 align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/Speykious/cve-rs/actions/workflows/ci.yaml&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/serde-rs/serde/ci.yml?branch=master&#34; align=&#34;top&#34;&gt; &lt;/a&gt; &lt;/h6&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA;  Blazingly ðŸ”¥ fast ðŸš€ memory vulnerabilities, written in 100% safe Rust. ðŸ¦€ &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;cve-rs&lt;/strong&gt; allows you to introduce common memory vulnerabilities (such as buffer overflows and segfaults) into your Rust program in a memory safe manner.&lt;/p&gt; &#xA;&lt;p&gt;Rust is an amazing language. You can program a lot of useful things while ensuring that your program will stay safe. Unfortunately, safe Rust is quite limiting. For example, you cannot introduce code that could corrupt the program&#39;s memory. Now, with &lt;strong&gt;cve-rs&lt;/strong&gt;, you can corrupt your program&#39;s memory without corrupting your program&#39;s memory.&lt;/p&gt; &#xA;&lt;p&gt;We are very committed to making sure &lt;strong&gt;cve-rs&lt;/strong&gt; is memory-safe. We know that unsafe code can have unintended consequences, such as memory unsafety that causes programs to be insecure or unstable.&lt;/p&gt; &#xA;&lt;p&gt;That is why &lt;strong&gt;cve-rs&lt;/strong&gt; uses &lt;code&gt;#![deny(unsafe_code)]&lt;/code&gt; in the entire codebase. There is not a single block of &lt;code&gt;unsafe&lt;/code&gt; code* in this project.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;* There is, unfortunately, one exception: In our tests, we compare the results of our safe &lt;code&gt;transmute&lt;/code&gt; function against the regular &lt;code&gt;std::mem::transmute&lt;/code&gt; function. Perhaps somewhat shortsightedly, the standard library implementation is unsafe. Regardless, this is only in our tests - the core library has no unsafe code.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;cve-rs&lt;/strong&gt; implements the following bugs in safe Rust:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use after free&lt;/li&gt; &#xA; &lt;li&gt;Buffer overflow&lt;/li&gt; &#xA; &lt;li&gt;Segmentation fault&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;cve-rs&lt;/strong&gt; also contains safe reimplementations of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;std::mem::transmute&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;std::ptr::null()&lt;/code&gt;/&lt;code&gt;null_mut()&lt;/code&gt; but for references&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here is an example of usage with the &lt;code&gt;segfault&lt;/code&gt; subcommand:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Speykious/cve-rs/main/assets/segfault-demo.png&#34; alt=&#34;segfault demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;cve-rs&lt;/strong&gt; can be used directly with Cargo.&lt;/p&gt; &#xA;&lt;p&gt;To use it as a library:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo add cve-rs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or to run our example binary:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo install cve-rs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;WASM support&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;cve-rs&lt;/strong&gt; supports WASM through the WASI API.&lt;/p&gt; &#xA;&lt;p&gt;You can compile it and run it using &lt;a href=&#34;https://wasmer.io/&#34;&gt;Wasmer&lt;/a&gt; with the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo build --target wasm32-wasi&#xA;wasmer run target/wasm32-wasi/debug/cve-rs.wasm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Special thanks to &lt;a href=&#34;https://github.com/Bright-Shard&#34;&gt;@Bright-Shard&lt;/a&gt; and &lt;a href=&#34;https://github.com/Creative0708&#34;&gt;@Creative0708&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Can I use cve-rs in production?&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/Speykious/cve-rs/main/LICENSE&#34;&gt;GLWTSPL&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/Speykious/cve-rs/main/LICENSE&#34;&gt;GLWTSPL&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/me-shaon/GLWTPL/raw/master/good-luck.gif&#34; alt=&#34;Good Luck&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>9yokuro/wrm</title>
    <updated>2024-02-23T01:38:10Z</updated>
    <id>tag:github.com,2024-02-23:/9yokuro/wrm</id>
    <link href="https://github.com/9yokuro/wrm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Remove files or directories.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Wrm - Remove files or directories&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/p1486/sdmw/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;workflow_build&#34;&gt; &lt;img src=&#34;https://img.shields.io/crates/v/wrm&#34; alt=&#34;Crates.io Version&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Run the following Cargo command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install wrm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To move files to trash(&lt;code&gt;$HOME/.config/wrm/trash&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;wrm remove foo bar ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To delete files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;wrm delete foo bar ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To restore files in trash to where they came from:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;wrm restore ~/.config/wrm/trash/foo ~/.config/wrm/trash/bar ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To list all files and directories in trash:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;wrm list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To delete all files and directories in trash permanently:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;wrm empty&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Options&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;-n, --noninteractive  Do not prompt whether to change destinations&#xA;-q, --quiet           Do not print log messages&#xA;-h, --help            Print help&#xA;-V, --version         Print version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under either of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apache License, Version 2.0 (&lt;a href=&#34;https://raw.githubusercontent.com/9yokuro/wrm/main/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;MIT license (&lt;a href=&#34;https://raw.githubusercontent.com/9yokuro/wrm/main/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;at your option.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.&lt;/p&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add auto empty&lt;/li&gt; &#xA; &lt;li&gt;Multiplatform support&lt;/li&gt; &#xA; &lt;li&gt;Change from subcommands to options&lt;/li&gt; &#xA; &lt;li&gt;Rename delete to destroy&lt;/li&gt; &#xA; &lt;li&gt;Follow the Freedesktop.org Specifications&lt;/li&gt; &#xA; &lt;li&gt;etc&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>