<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-28T01:45:20Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tsoding/seroost</title>
    <updated>2023-02-28T01:45:20Z</updated>
    <id>tag:github.com,2023-02-28:/tsoding/seroost</id>
    <link href="https://github.com/tsoding/seroost" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Local Search Engine&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Local Search Engine in Rust&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;THIS SOFTWARE IS UNFINISHED!!! Don&#39;t have any high expectations.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cargo run index ./folder/&#xA;$ cargo run serve ./index.json&#xA;$ iexplore.exe http://localhost:6969/&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>janhohenheim/foxtrot</title>
    <updated>2023-02-28T01:45:20Z</updated>
    <id>tag:github.com,2023-02-28:/janhohenheim/foxtrot</id>
    <link href="https://github.com/janhohenheim/foxtrot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The all-in-one Bevy 3D game template.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Foxtrot&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://janhohenheim.github.io/foxtrot/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/live%20demo-v0.1.10-blue&#34; alt=&#34;Live Demo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The all-in-one Bevy 3D game template.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/NKBVjKZewDfttXSx56/giphy.gif&#34; alt=&#34;Foxtrot in action&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;I created Foxtrot because I wanted to have a quick starting point for jams, prototypes and projects supporting features that I want to use in my games. Since the target audience is me, the code is not super well documented, but it should be good enough for others to find inspiration, copy parts they like or troubleshoot their own implementations :)&lt;/p&gt; &#xA;&lt;h2&gt;What does this template give you?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A 3D character controller&lt;/li&gt; &#xA; &lt;li&gt;Physics via &lt;code&gt;bevy_rapier&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Audio via &lt;code&gt;bevy_kira_audio&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Pathfinding via &lt;code&gt;oxidized_navigation&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bevy_editor_pls&lt;/code&gt; in the &lt;code&gt;dev&lt;/code&gt; feature, bound to &#39;Q&#39;&lt;/li&gt; &#xA; &lt;li&gt;Custom editor for the game state found in the windows for &lt;code&gt;bevy_editor_pls&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Saving / loading levels&lt;/li&gt; &#xA; &lt;li&gt;Saving / loading the game state&lt;/li&gt; &#xA; &lt;li&gt;Animations&lt;/li&gt; &#xA; &lt;li&gt;A custom dialog system&lt;/li&gt; &#xA; &lt;li&gt;Shaders&lt;/li&gt; &#xA; &lt;li&gt;GLTF imports, including colliders and navmeshes&lt;/li&gt; &#xA; &lt;li&gt;dynamic builds in the &lt;code&gt;native-dev&lt;/code&gt; feature&lt;/li&gt; &#xA; &lt;li&gt;Grass blades using &lt;code&gt;warblersneeds&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Running the game&lt;/h3&gt; &#xA;&lt;p&gt;Native:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;WASM:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;trunk serve --no-default-features --features wasm_dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Building in general requires setting up LLD or ZLD as described in the &lt;a href=&#34;https://bevyengine.org/learn/book/getting-started/setup/#enable-fast-compiles-optional&#34;&gt;Bevy book&lt;/a&gt;. Don&#39;t worry, it&#39;s super easy:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Ubuntu&lt;/strong&gt;: &lt;code&gt;sudo apt-get install lld&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Arch&lt;/strong&gt;: &lt;code&gt;sudo pacman -S lld&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;: Ensure you have the latest &lt;a href=&#34;https://github.com/rust-embedded/cargo-binutils&#34;&gt;cargo-binutils&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo install -f cargo-binutils&#xA;rustup component add llvm-tools-preview&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;MacOS&lt;/strong&gt;: Modern LLD does not yet support MacOS, but we can use zld instead: &lt;code&gt;brew install michaeleisel/zld/zld&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Building WASM requires &lt;code&gt;trunk&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo install --locked trunk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Updating assets&lt;/h3&gt; &#xA;&lt;p&gt;You should keep the &lt;code&gt;credits&lt;/code&gt; directory up to date. The release workflow automatically includes the directory in every build.&lt;/p&gt; &#xA;&lt;h3&gt;Updating the icons&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Replace &lt;code&gt;build/windows/icon.ico&lt;/code&gt; (used for windows executable and as favicon for the web-builds)&lt;/li&gt; &#xA; &lt;li&gt;Replace &lt;code&gt;build/macos/icon_1024x1024.png&lt;/code&gt; with a &lt;code&gt;1024&lt;/code&gt; times &lt;code&gt;1024&lt;/code&gt; pixel png icon and run &lt;code&gt;create_icns.sh&lt;/code&gt; (make sure to run the script inside the &lt;code&gt;macos&lt;/code&gt; directory) - &lt;em&gt;Warning: sadly this seems to require a mac...&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>maximecb/uvm</title>
    <updated>2023-02-28T01:45:20Z</updated>
    <id>tag:github.com,2023-02-28:/maximecb/uvm</id>
    <link href="https://github.com/maximecb/uvm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;UVM Virtual Machine&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;UVM&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE: this project is very much a work in progress and not ready for prime time at this point. You&#39;re likely to run into bugs and missing features, but I am looking for collaborators who share the vision.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A minimalistic virtual machine designed to run self-contained applications. UVM is intended as a platform to distribute programs that will not break and to combat code rot. It also aims to be conceptually simple, easy to understand, fun to work with and approachable to newcomers. There is a short 4-minute &lt;a href=&#34;https://www.youtube.com/watch?v=q9-o45B_qsA&#34;&gt;overview of UVM&lt;/a&gt; on YouTube if you&#39;d like to see a quick survey.&lt;/p&gt; &#xA;&lt;p&gt;Contents:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/maximecb/uvm/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/maximecb/uvm/main/#build-instructions&#34;&gt;Build Instructions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/maximecb/uvm/main/#codebase-organization&#34;&gt;Codebase Organization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/maximecb/uvm/main/doc/vision.md&#34;&gt;Vision and Motivation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/maximecb/uvm/main/doc/design.md&#34;&gt;Design and Architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/maximecb/uvm/main/doc/syscalls.md&#34;&gt;Subsystems and System Calls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/maximecb/uvm/main/doc/planning.md&#34;&gt;Planning and Evolution&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Current features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Stack-based bytecode interpreter&lt;/li&gt; &#xA; &lt;li&gt;Variable-length instructions for compactness&lt;/li&gt; &#xA; &lt;li&gt;Untyped design for simplicity&lt;/li&gt; &#xA; &lt;li&gt;Little-endian byte ordering (like x86, ARM &amp;amp; RISC-V)&lt;/li&gt; &#xA; &lt;li&gt;32-bit and 64-bit integer ops, 32-bit floating-point support&lt;/li&gt; &#xA; &lt;li&gt;Separate flat, linear address spaces for code and data&lt;/li&gt; &#xA; &lt;li&gt;Built-in, easy to use assembler with a simple syntax&lt;/li&gt; &#xA; &lt;li&gt;Easy to use frame buffer to draw RGB graphics with no boilerplate&lt;/li&gt; &#xA; &lt;li&gt;Event-driven event execution model compatible with async operations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Planned future features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easy to use audio output API&lt;/li&gt; &#xA; &lt;li&gt;Async file and network I/O with callbacks &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Synchronous I/O possible as well&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Fast JIT compiler based on dynamic binary translation and basic block versioning &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Expected performance ~80% of native speed (maybe more?)&lt;/li&gt; &#xA;   &lt;li&gt;Near-instant warmup&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Permission system to safely sandbox apps without granting access to entire computer&lt;/li&gt; &#xA; &lt;li&gt;Ability to compile without SDL and without graphics/audio for headless server-side use&lt;/li&gt; &#xA; &lt;li&gt;Ability to encode metadata such as author name and app icon into app image files&lt;/li&gt; &#xA; &lt;li&gt;Ability to suspend running programs and save them to a new app image file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build Instructions&lt;/h2&gt; &#xA;&lt;p&gt;Dependencies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;Rust toolchain&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://wiki.libsdl.org/SDL2/Installation&#34;&gt;SDL2 libraries&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installing Rust and SDL2 on macOS&lt;/h3&gt; &#xA;&lt;p&gt;Install the SDL2 package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install sdl2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add this to your &lt;code&gt;~/.zprofile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export LIBRARY_PATH=&#34;$LIBRARY_PATH:$(brew --prefix)/lib&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install the Rust toolchain:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installing Rust and SDL2 on Debian/Ubuntu&lt;/h3&gt; &#xA;&lt;p&gt;Install the SDL2 package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt-get install libsdl2-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install the Rust toolchain:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installing Rust and SDL2 on Windows&lt;/h3&gt; &#xA;&lt;p&gt;Follow the Windows-specific instructions to &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;install the Rust toolchain&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Get &lt;code&gt;SDL2.dll&lt;/code&gt; from one of &lt;a href=&#34;https://github.com/libsdl-org/SDL/releases&#34;&gt;SDL2 Releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Copy &lt;code&gt;SDL2.dll&lt;/code&gt; (unzip) to the &lt;code&gt;vm/&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h3&gt;Compiling the Project&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd vm&#xA;cargo build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run an asm file with UVM:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo run examples/fizzbuzz.asm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is also a toy C compiler in the &lt;code&gt;ncc&lt;/code&gt; directory, along with some example C programs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd ncc&#xA;./build_and_run.sh examples/snake.c&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running the Test Suite&lt;/h3&gt; &#xA;&lt;p&gt;Run &lt;code&gt;cargo test&lt;/code&gt; from the &lt;code&gt;vm&lt;/code&gt;, and &lt;code&gt;ncc&lt;/code&gt; directories.&lt;/p&gt; &#xA;&lt;h2&gt;Codebase Organization&lt;/h2&gt; &#xA;&lt;p&gt;The repository is organized into a 3 different subprojects, each of which is a Rust codebase which can be compiled with &lt;code&gt;cargo&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/vm&lt;/code&gt; : The implementation of the UVM virtual machine itself &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;/vm/examples/*&lt;/code&gt;: Example assembly programs that can be run by UVM&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/ncc&lt;/code&gt;: An implementation of a toy C compiler that outputs UVM assembly &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/maximecb/uvm/main/ncc/README.md&#34;&gt;&lt;code&gt;/ncc/README.md&lt;/code&gt;&lt;/a&gt;: documentation for the NCC compiler.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/maximecb/uvm/main/ncc/examples&#34;&gt;&lt;code&gt;/ncc/examples/*&lt;/code&gt;&lt;/a&gt;: Example C source files that can be compiled by NCC&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/api&lt;/code&gt;: A system to document and automatically export bindings for UVM system calls and constants. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;/api/syscalls.json&lt;/code&gt;: Declarative list of system calls exposed by UVM.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;ncc&lt;/code&gt; compiler is, at the time of this writing, incomplete in that it lacks some C features and the error messages need improvement. This compiler was implemented to serve as an example of how to write a compiler that targets UVM, and to write some library code to be used by other programs. Over time, the &lt;code&gt;ncc&lt;/code&gt; compiler will be improved. Despite its limitations, it is still usable to write small programs. Contributions to it are welcome.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;api&lt;/code&gt; directory contains JSON files that represent a declarative list of system calls, constants and the permission system that UVM exposes to programs running on it. This is helpful for documentation purposes, or if you want to build a compiler that targets UVM. The directory also contains code that automatically generates &lt;a href=&#34;https://raw.githubusercontent.com/maximecb/uvm/main/doc/syscalls.md&#34;&gt;markdown documentation&lt;/a&gt;, Rust constants and &lt;a href=&#34;https://raw.githubusercontent.com/maximecb/uvm/main/ncc/include/uvm/syscalls.h&#34;&gt;C definitions&lt;/a&gt; for system calls.&lt;/p&gt; &#xA;&lt;h2&gt;Open Source License&lt;/h2&gt; &#xA;&lt;p&gt;The code for UVM, NCC and associated tools is shared under the &lt;a href=&#34;https://github.com/maximecb/uvm/raw/main/LICENSE&#34;&gt;Apache-2.0 license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The examples under the &lt;code&gt;vm/examples&lt;/code&gt; and &lt;code&gt;ncc/examples&lt;/code&gt; directories are shared under the &lt;a href=&#34;https://creativecommons.org/publicdomain/zero/1.0/&#34;&gt;Creative Commons CC0&lt;/a&gt; license.&lt;/p&gt;</summary>
  </entry>
</feed>