<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-13T01:48:42Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>memN0ps/bootkit-rs</title>
    <updated>2023-06-13T01:48:42Z</updated>
    <id>tag:github.com,2023-06-13:/memN0ps/bootkit-rs</id>
    <link href="https://github.com/memN0ps/bootkit-rs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rusty Bootkit - Windows UEFI Bootkit in Rust (Codename: RedLotus)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Windows UEFI Bootkit in Rust (Codename: RedLotus)&lt;/h1&gt; &#xA;&lt;p&gt;Windows UEFI bootkit in Rust for manually mapping a &lt;a href=&#34;https://github.com/memN0ps/rootkit-rs&#34;&gt;Windows kernel rootkit&lt;/a&gt; or &lt;a href=&#34;https://github.com/memN0ps/hypervisor-rs&#34;&gt;Windows blue-pill hypervisor&lt;/a&gt; using a UEFI runtime driver (&lt;code&gt;EFI_RUNTIME_DRIVER&lt;/code&gt;) similar to &lt;a href=&#34;https://github.com/btbd/umap/&#34;&gt;umap by @btbd&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This project is inspired by the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Umap: &lt;a href=&#34;https://github.com/btbd/umap/&#34;&gt;https://github.com/btbd/umap/&lt;/a&gt; (This project has been ported from C to Rust)&lt;/li&gt; &#xA; &lt;li&gt;Bootlicker: &lt;a href=&#34;https://github.com/realoriginal/bootlicker&#34;&gt;https://github.com/realoriginal/bootlicker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;BlackLotus: &lt;a href=&#34;https://www.welivesecurity.com/2023/03/01/blacklotus-uefi-bootkit-myth-confirmed/&#34;&gt;https://www.welivesecurity.com/2023/03/01/blacklotus-uefi-bootkit-myth-confirmed/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ESPecter: &lt;a href=&#34;https://www.welivesecurity.com/2021/10/05/uefi-threats-moving-esp-introducing-especter-bootkit/&#34;&gt;https://www.welivesecurity.com/2021/10/05/uefi-threats-moving-esp-introducing-especter-bootkit/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;UEFI-Bootkit: &lt;a href=&#34;https://github.com/ajkhoury/UEFI-Bootkit/&#34;&gt;https://github.com/ajkhoury/UEFI-Bootkit/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;EfiGuard: &lt;a href=&#34;https://github.com/Mattiwatti/EfiGuard&#34;&gt;https://github.com/Mattiwatti/EfiGuard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Bootkitting Windows Sandbox: &lt;a href=&#34;https://secret.club/2022/08/29/bootkitting-windows-sandbox.html&#34;&gt;https://secret.club/2022/08/29/bootkitting-windows-sandbox.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rootkits and Bootkits: &lt;a href=&#34;https://nostarch.com/rootkits&#34;&gt;https://nostarch.com/rootkits&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Manually Maps a Windows kernel driver before &lt;code&gt;ntoskrnl.exe&lt;/code&gt; is loaded (Driver Signature Enforcement (DSE) is not disabled and Windows Defender&#39;s drivers are not patched)&lt;/li&gt; &#xA; &lt;li&gt;TODO: refactor/neaten code and implement better error handling and make stable&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;A bootkit can run code before the operating system and potentially inject malicious code into the kernel or load a malicious kernel driver by infecting the boot process and taking over the system&#39;s firmware or bootloader, effectively disabling or bypassing security protections. This tool can be used for game hacking and is a side project for those interested in fun, learning, malware research, and spreading security awareness. It also demonstrates that Rust can handle both low-level and high-level tasks. It&#39;s important to recognize the potential of Rust and not underestimate its power.&lt;/p&gt; &#xA;&lt;p&gt;The image below shows how Legacy and UEFI boot works.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/memN0ps/bootkit-rs/master/images/Legacy-and-UEFI-Boot.png&#34; alt=&#34;Legacy-and-UEFI-Boot&#34;&gt; &lt;strong&gt;Figure 1. Comparison of the Legacy Boot flow (left) and UEFI boot flow (right) on Windows (Vista and newer) systems (Full Credits: &lt;a href=&#34;https://www.welivesecurity.com/2021/10/05/uefi-threats-moving-esp-introducing-especter-bootkit/&#34;&gt;WeLiveSecurity&lt;/a&gt;)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This diagram illustrates the structure and flow of the RedLotus.efi UEFI bootkit (RedLotus.sys is the Windows kernel driver)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;&#xA;    R[&#34;RedLotus.efi bootkit runtime driver (EFI_RUNTIME_DRIVER)&#34;] --&amp;gt;|Hooks| A[&#34;ImgArchStartBootApplication (bootmgfw.efi)&#34;];&#xA;    A[&#34;ImgArchStartBootApplication (bootmgfw.efi)&#34;] --&amp;gt;|Hooks| B[&#34;BlImgAllocateImageBuffer (winload.efi)&#34;];&#xA;    B --&amp;gt;|Allocates Buffer| G[RedLotus.sys];&#xA;    A --&amp;gt;|Hooks| C[&#34;OslFwpKernelSetupPhase1 (winload.efi)&#34;];&#xA;    C --&amp;gt;|Calls| D[Manual Mapper];&#xA;    D --&amp;gt;|Maps | G[RedLotus.sys]&#xA;    C --&amp;gt;|Hooks| E[Disk.sys];&#xA;    E --&amp;gt;|Calls| G[RedLotus.sys];&#xA;    G --&amp;gt;|Restores| E;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;Install Rust&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;To start using Rust, &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;download the installer&lt;/a&gt;, then run the program and follow the onscreen instructions. You may need to install the &lt;a href=&#34;https://visualstudio.microsoft.com/visual-cpp-build-tools/&#34;&gt;Visual Studio C++ Build tools&lt;/a&gt; when prompted to do so.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://rust-lang.github.io/rustup/concepts/channels.html&#34;&gt;Install and change to Rust nightly&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;rustup toolchain install nightly&#xA;rustup default nightly&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/sagiegurari/cargo-make&#34;&gt;Install cargo-make&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install cargo-make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/windows-hardware/drivers/download-the-wdk&#34;&gt;Install WDK/SDK&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Step 1: Install Visual Studio 2022&lt;/li&gt; &#xA; &lt;li&gt;Step 2: Install Windows 11, version 22H2 SDK&lt;/li&gt; &#xA; &lt;li&gt;Step 3: Install Windows 11, version 22H2 WDK&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;Change directory to &lt;code&gt;.\driver\&lt;/code&gt; and build driver&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo make sign&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Change directory to &lt;code&gt;.\bootkit\&lt;/code&gt; and build bootkit&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo build --target x86_64-unknown-uefi --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;A UEFI Bootkit works under one or more of the following conditions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Secure Boot is disabled on the machine, so no vulnerabilities are required to exploit it (&lt;strong&gt;supported by this project&lt;/strong&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Exploiting a known flaw in the UEFI firmware to disable Secure Boot in the case of an out-of-date firmware version or a product no longer supported, including the Bring Your Own Vulnerable Binary (BYOVB) technique to bring copies of vulnerable binaries to the machines to exploit a vulnerability or vulnerabilities and bypass Secure Boot on up-to-date UEFI systems (1-day/one-day).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Exploiting an unspecified flaw in the UEFI firmware to disable Secure Boot (0-day/zero-day vulnerability).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Usage 1: Infect Windows Boot Manager &lt;code&gt;bootmgfw.efi&lt;/code&gt; on Disk (Unsupported)&lt;/h3&gt; &#xA;&lt;p&gt;Typically UEFI Bootkits infect the Windows Boot Manager &lt;code&gt;bootmgfw.efi&lt;/code&gt; located in EFI partition &lt;code&gt;\EFI\Microsoft\Boot\bootmgfw.efi&lt;/code&gt; (&lt;code&gt;C:\Windows\Boot\EFI\bootmgfw.efi&lt;/code&gt;. Modification of the bootloader includes adding a new section called &lt;code&gt;.efi&lt;/code&gt; to the Windows Boot Manager &lt;code&gt;bootmgfw.efi&lt;/code&gt;, and changing the executable&#39;s entry point address so program flow jumps to the beginning of the added section as shown below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Convert bootkit to position-independent code (PIC) or shellcode&lt;/li&gt; &#xA; &lt;li&gt;Find &lt;code&gt;bootmgfw.efi&lt;/code&gt; (Windows Boot Manager) located in EFI partition &lt;code&gt;\EFI\Microsoft\Boot\bootmgfw.efi&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;.efi&lt;/code&gt; section to &lt;code&gt;bootmgfw.efi&lt;/code&gt; (Windows Boot Manager)&lt;/li&gt; &#xA; &lt;li&gt;Inject or copy bootkit shellcode to the &lt;code&gt;.efi&lt;/code&gt; section in &lt;code&gt;bootmgfw.efi&lt;/code&gt; (Windows Boot Manager)&lt;/li&gt; &#xA; &lt;li&gt;Change entry point of the &lt;code&gt;bootmgfw.efi&lt;/code&gt; (Windows Boot Manager) to newly added &lt;code&gt;.efi&lt;/code&gt; section bootkit shellcode&lt;/li&gt; &#xA; &lt;li&gt;Reboot&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Usage 2: Execute UEFI Bootkit via UEFI Shell (Supported)&lt;/h3&gt; &#xA;&lt;p&gt;Download &lt;a href=&#34;https://github.com/tianocore/edk2/releases&#34;&gt;EDK2 efi shell&lt;/a&gt; or &lt;a href=&#34;https://github.com/pbatard/UEFI-Shell/releases&#34;&gt;UEFI-Shell&lt;/a&gt; and follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Extract downloaded efi shell and rename file &lt;code&gt;Shell.efi&lt;/code&gt; (should be in folder &lt;code&gt;UefiShell/X64&lt;/code&gt;) to &lt;code&gt;bootx64.efi&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Format USB drive to FAT32&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create following folder structure:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;USB:.&#xA; │   redlotus.efi&#xA; │&#xA; └───EFI&#xA;      └───Boot&#xA;              bootx64.efi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Boot from the USB drive&lt;/p&gt; &lt;p&gt;4.1. The following is required for VMware Workstation:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;VMware Workstation: &lt;code&gt;VM -&amp;gt; Settings -&amp;gt; Hardware -&amp;gt; Add -&amp;gt; Hard Disk -&amp;gt; Next -&amp;gt; SCSI or NVMe (Recommended) -&amp;gt; Next -&amp;gt; Use a physical disk (for advanced users) -&amp;gt; Next -&amp;gt; Device: PhysicalDrive1 and Usage: Use entire disk -&amp;gt; Next -&amp;gt; Finish.&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Start VM by clicking &lt;code&gt;Power On to Firmware&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Select Internal Shell (Unsupported option) or EFI Vmware Virtual SCSI Hard Drive (1.0)&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A UEFI shell should start, change directory to the same location as the Windows Boot Manager (e.g. &lt;code&gt;FS0&lt;/code&gt;). &lt;strong&gt;Note that the file system could be different for your machine&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;FS0:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Copy the bootkit to the same location as the Windows Boot Manager (e.g. &lt;code&gt;FS0&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;cp fs2:redlotus.efi fs0:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;Load the the bootkit&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;load redlotus.efi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;8&#34;&gt; &#xA; &lt;li&gt;Windows should boot automatically.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Tested PoC&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Microsoft Windows 10 Home 10.0.19045 N/A Build 19045&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/memN0ps/bootkit-rs/master/images/poc_win10.png&#34; alt=&#34;poc_win10.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Microsoft Windows 11 Home 10.0.22621 N/A Build 22621&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/memN0ps/bootkit-rs/master/images/poc_win11.png&#34; alt=&#34;poc_win11.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note: You may have to change the signature of the hooked &lt;code&gt;bootmgfw.efi&lt;/code&gt; and &lt;code&gt;winload.efi&lt;/code&gt; functions depending on your Windows build and version.&lt;/p&gt; &#xA;&lt;h2&gt;Credits / References / Thanks / Motivation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;BTBD: &lt;a href=&#34;https://github.com/btbd/umap/&#34;&gt;https://github.com/btbd/umap/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Austin Hudson: &lt;a href=&#34;https://github.com/realoriginal/bootlicker&#34;&gt;https://github.com/realoriginal/bootlicker&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Thanks for all the help: inlineHookz (smoke/snow/never_unsealed): &lt;a href=&#34;https://twitter.com/never_unsealed&#34;&gt;https://twitter.com/never_unsealed&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Rust Community Discord: &lt;a href=&#34;https://discord.com/invite/rust-lang&#34;&gt;https://discord.com/invite/rust-lang&lt;/a&gt; (#windows-dev channel PeterRabbit, MaulingMonkey etc..)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Aidan Khoury: &lt;a href=&#34;https://github.com/ajkhoury/UEFI-Bootkit/&#34;&gt;https://github.com/ajkhoury/UEFI-Bootkit/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Matthijs Lavrijsen: &lt;a href=&#34;https://github.com/Mattiwatti/EfiGuard&#34;&gt;https://github.com/Mattiwatti/EfiGuard&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Welivesecurity: &lt;a href=&#34;https://www.welivesecurity.com/2021/10/05/uefi-threats-moving-esp-introducing-especter-bootkit/&#34;&gt;https://www.welivesecurity.com/2021/10/05/uefi-threats-moving-esp-introducing-especter-bootkit/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Welivesecurity: &lt;a href=&#34;https://www.welivesecurity.com/2023/03/01/blacklotus-uefi-bootkit-myth-confirmed/&#34;&gt;https://www.welivesecurity.com/2023/03/01/blacklotus-uefi-bootkit-myth-confirmed/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;MrExodia: &lt;a href=&#34;https://secret.club/2022/08/29/bootkitting-windows-sandbox.html&#34;&gt;https://secret.club/2022/08/29/bootkitting-windows-sandbox.html&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Samuel Tulach: &lt;a href=&#34;https://github.com/SamuelTulach/rainbow&#34;&gt;https://github.com/SamuelTulach/rainbow&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;UnknownCheats: &lt;a href=&#34;https://www.unknowncheats.me/forum/anti-cheat-bypass/452202-rainbow-efi-bootkit-hwid-spoofer-smbios-disk-nic.html&#34;&gt;https://www.unknowncheats.me/forum/anti-cheat-bypass/452202-rainbow-efi-bootkit-hwid-spoofer-smbios-disk-nic.html&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ekknod: &lt;a href=&#34;https://github.com/ekknod/sumap/&#34;&gt;https://github.com/ekknod/sumap/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Cr4sh: &lt;a href=&#34;https://github.com/Cr4sh/s6_pcie_microblaze/tree/master/python/payloads/DmaBackdoorBoot&#34;&gt;https://github.com/Cr4sh/s6_pcie_microblaze/tree/master/python/payloads/DmaBackdoorBoot&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Alex Matrosov: Rootkits and Bootkits: &lt;a href=&#34;https://nostarch.com/rootkits&#34;&gt;https://nostarch.com/rootkits&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/matrosov&#34;&gt;Alex Matrosov&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Binarly: &lt;a href=&#34;https://www.binarly.io/posts/The_Untold_Story_of_the_BlackLotus_UEFI_Bootkit/index.html&#34;&gt;https://www.binarly.io/posts/The_Untold_Story_of_the_BlackLotus_UEFI_Bootkit/index.html&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;rust-osdev: &lt;a href=&#34;https://github.com/rust-osdev/uefi-rs&#34;&gt;https://github.com/rust-osdev/uefi-rs&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;rust-osdev: &lt;a href=&#34;https://github.com/rust-osdev/bootloader&#34;&gt;https://github.com/rust-osdev/bootloader&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;rust-osdev: &lt;a href=&#34;https://crates.io/crates/uefi&#34;&gt;https://crates.io/crates/uefi&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;rust-osdev: &lt;a href=&#34;https://docs.rs/uefi/latest/&#34;&gt;https://docs.rs/uefi/latest/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;rust-osdev: &lt;a href=&#34;https://rust-osdev.github.io/uefi-rs/HEAD/&#34;&gt;https://rust-osdev.github.io/uefi-rs/HEAD/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/bcd-system-store-settings-for-uefi?view=windows-11&#34;&gt;https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/bcd-system-store-settings-for-uefi?view=windows-11&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://developer.microsoft.com/en-us/windows/downloads/virtual-machines/&#34;&gt;https://developer.microsoft.com/en-us/windows/downloads/virtual-machines/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/LongSoft/UEFITool&#34;&gt;https://github.com/LongSoft/UEFITool&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/tianocore/edk2&#34;&gt;https://github.com/tianocore/edk2&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/pbatard/UEFI-Shell&#34;&gt;https://github.com/pbatard/UEFI-Shell&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://securelist.com/cosmicstrand-uefi-firmware-rootkit/106973/&#34;&gt;https://securelist.com/cosmicstrand-uefi-firmware-rootkit/106973/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://wikileaks.org/ciav7p1/cms/page_36896783.html&#34;&gt;https://wikileaks.org/ciav7p1/cms/page_36896783.html&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/nix-community/lanzaboote/&#34;&gt;https://github.com/nix-community/lanzaboote/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/lyricalsoul/genie/&#34;&gt;https://github.com/lyricalsoul/genie/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/pfnsec/uefi-bin-enum/&#34;&gt;https://github.com/pfnsec/uefi-bin-enum/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/coreos/picker&#34;&gt;https://github.com/coreos/picker&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/mikroskeem/apple-set-os/&#34;&gt;https://github.com/mikroskeem/apple-set-os/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Justfr33z/trampoline/&#34;&gt;https://github.com/Justfr33z/trampoline/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/kweatherman/sigmakerex&#34;&gt;https://github.com/kweatherman/sigmakerex&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://guidedhacking.com/threads/external-internal-pattern-scanning-guide.14112/&#34;&gt;https://guidedhacking.com/threads/external-internal-pattern-scanning-guide.14112/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://guidedhacking.com/resources/guided-hacking-x64-cheat-engine-sigmaker-plugin-ce-7-2.319/&#34;&gt;https://guidedhacking.com/resources/guided-hacking-x64-cheat-engine-sigmaker-plugin-ce-7-2.319/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/frk1/hazedumper-rs/&#34;&gt;https://github.com/frk1/hazedumper-rs/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Jakobzs/patternscanner/&#34;&gt;https://github.com/Jakobzs/patternscanner/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/pseuxide/toy-arms/&#34;&gt;https://github.com/pseuxide/toy-arms/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://uefi.org/specs/UEFI/2.10/index.html&#34;&gt;https://uefi.org/specs/UEFI/2.10/index.html&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/x1tan/rust-uefi-runtime-driver/&#34;&gt;https://github.com/x1tan/rust-uefi-runtime-driver/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/tandasat/MiniVisorPkg/raw/master/Docs/Building_and_Debugging.md&#34;&gt;https://github.com/tandasat/MiniVisorPkg/blob/master/Docs/Building_and_Debugging.md&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://xitan.me/posts/rust-uefi-runtime-driver/&#34;&gt;https://xitan.me/posts/rust-uefi-runtime-driver/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/tandasat/MiniVisorPkg/raw/master/Docs/Testing_UEFI_on_Hyper-V.md&#34;&gt;https://github.com/tandasat/MiniVisorPkg/blob/master/Docs/Testing_UEFI_on_Hyper-V.md&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.intel.com/content/www/us/en/download/674520/intel-uefi-development-kit-intel-udk-debugger-tool-windows.html&#34;&gt;https://www.intel.com/content/www/us/en/download/674520/intel-uefi-development-kit-intel-udk-debugger-tool-windows.html&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://doxygen.reactos.org/&#34;&gt;https://doxygen.reactos.org/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.vergiliusproject.com/&#34;&gt;https://www.vergiliusproject.com/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;thanks &lt;a href=&#34;https://twitter.com/jonasLyk&#34;&gt;jonaslyk&lt;/a&gt; for providing the correct function signature for &lt;code&gt;BlImgAllocateImageBuffer&lt;/code&gt; :)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Voultapher/sort-research-rs</title>
    <updated>2023-06-13T01:48:42Z</updated>
    <id>tag:github.com,2023-06-13:/Voultapher/sort-research-rs</id>
    <link href="https://github.com/Voultapher/sort-research-rs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Test and benchmark suite for sort algorithms in Rust&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;sort-research-rs&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Is a sort implementation correct?&lt;/li&gt; &#xA; &lt;li&gt;Is a sort implementation fast?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This repository contains:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An exhaustive test suite, including properties not commonly checked or upheld&lt;/li&gt; &#xA; &lt;li&gt;An extensive benchmark suite, abstracting over types, patterns and sizes&lt;/li&gt; &#xA; &lt;li&gt;A fuzzing harness&lt;/li&gt; &#xA; &lt;li&gt;Novel sort implementation &lt;a href=&#34;https://raw.githubusercontent.com/Voultapher/sort-research-rs/main/src/unstable/rust_ipnsort.rs&#34;&gt;ipnsort&lt;/a&gt; (Instruction-Parallel-Network)&lt;/li&gt; &#xA; &lt;li&gt;Vendored sort implementations (Rust, C++, C), eg. cpp_pdqsort, rust_std_stable&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Most tests and benchmarks can be applied to non Rust implementations. This works by implementing the 5 benchmark types as #[repr(C)] and having a defined C API that can be implemented, wrapping the C/C++ sorts.&lt;/p&gt; &#xA;&lt;p&gt;Most functionality is by default disabled via cargo features, see the Cargo.toml. Some functionality can be enabled or switched by setting environment variables. See for example benches/bench.rs.&lt;/p&gt; &#xA;&lt;h3&gt;Installing&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://doc.rust-lang.org/cargo/guide/&#34;&gt;See cargo docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note, you&#39;ll need a nightly rust toolchain.&lt;/p&gt; &#xA;&lt;h2&gt;Running the tests&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo test&#xA;&#xA;cargo miri test&#xA;&#xA;# Might require disabling criterion dependency.&#xA;RUSTFLAGS=-Zsanitizer=address cargo t --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running the benchmarks&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo bench&#xA;&#xA;cargo bench &amp;lt;sort_name&amp;gt;-&amp;lt;prediction_state&amp;gt;-&amp;lt;type&amp;gt;-&amp;lt;pattern&amp;gt;-&amp;lt;size&amp;gt;&#xA;&#xA;# Eg:&#xA;cargo bench rust_std_stable-hot-u64-random-10000&#xA;cargo bench hot-u64-random-10000&#xA;cargo bench random&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also set a custom regex to filter the benchmarks you want to run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CUSTOM_BENCH_REGEX=&#34;std.*i32-random-8$&#34; cargo bench&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to collect a set of results that can then later be used to create graphs, you can use the &lt;code&gt;run_benchmarks.py&lt;/code&gt; utility script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Will write results to my_test_zen3.json&#xA;CUSTOM_BENCH_REGEX=&#34;_stable.*random-&#34; python util/run_benchmarks.py my_test_zen3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Fuzzing&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll need to install cargo fuzz and cargo afl respectively. See &lt;a href=&#34;https://rust-fuzz.github.io/book/introduction.html&#34;&gt;https://rust-fuzz.github.io/book/introduction.html&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Fuzzing with libfuzzer&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd fuzz&#xA;cargo fuzz run libfuzzer_main&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fuzzing with afl&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd fuzz-afl&#xA;RUSTFLAGS=-Zsanitizer=address cargo afl build --release &amp;amp;&amp;amp; cargo afl fuzz -i in -o out -D target/release/afl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Adjust &lt;code&gt;fuzz/fuzz_targets/libfuzzer_main.rs&lt;/code&gt; and &lt;code&gt;fuzz/fuzz_targets/libfuzzer_main.rs&lt;/code&gt; respectively to change the fuzz target. Default &lt;code&gt;rust_ipn_stable&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please respect the &lt;a href=&#34;https://raw.githubusercontent.com/Voultapher/sort-research-rs/main/CODE_OF_CONDUCT.md&#34;&gt;CODE_OF_CONDUCT.md&lt;/a&gt; when contributing.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Lukas Bergdoll&lt;/strong&gt; - &lt;a href=&#34;https://github.com/Voultapher&#34;&gt;Voultapher&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See also the list of &lt;a href=&#34;https://github.com/Voultapher/sort-research-rs/contributors&#34;&gt;contributors&lt;/a&gt; who participated in this project.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the Apache License, Version 2.0 - see the &lt;a href=&#34;https://raw.githubusercontent.com/Voultapher/sort-research-rs/main/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt; file for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>AmrDeveloper/GQL</title>
    <updated>2023-06-13T01:48:42Z</updated>
    <id>tag:github.com,2023-06-13:/AmrDeveloper/GQL</id>
    <link href="https://github.com/AmrDeveloper/GQL" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Git Query Language (GQL)&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;GQL - Git Query Language&lt;/h1&gt;&#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/AmrDeveloper/GQL/master/media/gql_logo.svg?sanitize=true&#34; width=&#34;20%&#34; height=&#34;20%&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; GQL is a query language with a syntax very similar to SQL with a tiny engine to perform queries on .git files instance of database files, the engine executes the query on the fly without the need to create database files or convert .git files into any other format. &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/AmrDeveloper/GQL/master/media/gql_demo.gif&#34; alt=&#34;animated&#34; width=&#34;100%&#34;&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Samples&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select * from commits&#xA;select name, email from commits&#xA;select name, email from commits order by name&#xA;select name, email from commits where name contains &#34;gmail&#34; order by name&#xA;select * from commits where name.lower = &#34;amrdeveloper&#34;&#xA;&#xA;select * from branches&#xA;select * from branches where ishead = &#34;true&#34;&#xA;select * from branches where name ends_with &#34;master&#34;&#xA;select * from branches where name contains &#34;origin&#34;&#xA;&#xA;select * from tags&#xA;select * from tags offset 1 limit 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build and run&lt;/h3&gt; &#xA;&lt;p&gt;To build and run GQL you need to have rust installed on your system and then use run command with folder that contains .git files&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo run &amp;lt;repository_path&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Documentation:&lt;/h2&gt; &#xA;&lt;h3&gt;Select from&lt;/h3&gt; &#xA;&lt;p&gt;Select keyword used to select all of some fields from specific table&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Tables and Fields&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;commits { name, email, title, message, time }&lt;/li&gt; &#xA; &lt;li&gt;branches { name, ishead, isremote }&lt;/li&gt; &#xA; &lt;li&gt;tags { name }&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;String Comparisons&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;=&lt;/code&gt; used to check if field equal to expected value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;!&lt;/code&gt; used to check if field not equal to expected value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; used to check if field greater than expected value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt; used to check if field greater than or equals expected value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;&lt;/code&gt; used to check if field less than expected value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt; used to check if field less than or equals expected value.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;String checks&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;contains&lt;/code&gt; used to check that field contains value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;starts_with&lt;/code&gt; used to check that field starts with value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ends_with&lt;/code&gt; used to check that field ends with value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;matches&lt;/code&gt; used to check that field matches regex format.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Logical Expressions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;|&lt;/code&gt; or &lt;code&gt;or&lt;/code&gt;: used to calculate or between two booleans,&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;amp;&lt;/code&gt; or &lt;code&gt;and&lt;/code&gt;: used to calculate and between two booleans,&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;^&lt;/code&gt; or &lt;code&gt;xor&lt;/code&gt;: used to calculate xor between two booleans,&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Unary Expressions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;!&lt;/code&gt;: used as prefix for expression to perform bang expression&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Group Expressions&lt;/h2&gt; &#xA;&lt;p&gt;Group expression is an expresion inside &lt;code&gt;(&lt;/code&gt; and &lt;code&gt;)&lt;/code&gt; used to give high precedence for expression.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Sorting&lt;/h2&gt; &#xA;&lt;p&gt;To sort the result you need to use &lt;code&gt;order by&lt;/code&gt; keyword followed by field name.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Limit&lt;/h3&gt; &#xA;&lt;p&gt;limit statement take n as integer to limit the result number.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Offset&lt;/h3&gt; &#xA;&lt;p&gt;offset statement take n as integer to ignore the first n result.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Transformations&lt;/h3&gt; &#xA;&lt;p&gt;Transformations are functions with 0 arguments used to apply transformation on values&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;lower&lt;/code&gt; convert the value to be lower case.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;upper&lt;/code&gt; convert the value to be upper case.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;trim&lt;/code&gt; remote leading and trailing whitespace.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;length&lt;/code&gt; return the length as a string.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;MIT License&#xA;&#xA;Copyright (c) 2023 Amr Hesham&#xA;&#xA;Permission is hereby granted, free of charge, to any person obtaining a copy&#xA;of this software and associated documentation files (the &#34;Software&#34;), to deal&#xA;in the Software without restriction, including without limitation the rights&#xA;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&#xA;copies of the Software, and to permit persons to whom the Software is&#xA;furnished to do so, subject to the following conditions:&#xA;&#xA;The above copyright notice and this permission notice shall be included in all&#xA;copies or substantial portions of the Software.&#xA;&#xA;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#xA;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#xA;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#xA;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&#xA;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&#xA;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE&#xA;SOFTWARE.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>