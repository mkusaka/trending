<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-09-23T01:36:22Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>model-checking/kani</title>
    <updated>2024-09-23T01:36:22Z</updated>
    <id>tag:github.com,2024-09-23:/model-checking/kani</id>
    <link href="https://github.com/model-checking/kani" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Kani Rust Verifier&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/model-checking/kani/main/kani-logo.png&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://github.com/model-checking/kani/actions/workflows/kani.yml&#34;&gt;&lt;img src=&#34;https://github.com/model-checking/kani/actions/workflows/kani.yml/badge.svg?sanitize=true&#34; alt=&#34;Kani regression&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/model-checking/kani/actions/workflows/cbmc-latest.yml&#34;&gt;&lt;img src=&#34;https://github.com/model-checking/kani/actions/workflows/cbmc-latest.yml/badge.svg?sanitize=true&#34; alt=&#34;Nightly: CBMC Latest&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Kani Rust Verifier is a bit-precise model checker for Rust.&lt;/p&gt; &#xA;&lt;p&gt;Kani is particularly useful for verifying unsafe code blocks in Rust, where the &#34;&lt;a href=&#34;https://doc.rust-lang.org/stable/book/ch19-01-unsafe-rust.html#unsafe-superpowers&#34;&gt;unsafe superpowers&lt;/a&gt;&#34; are unchecked by the compiler.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Kani verifies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Memory safety (e.g., null pointer dereferences)&lt;/li&gt; &#xA; &lt;li&gt;User-specified assertions (i.e., &lt;code&gt;assert!(...)&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;The absence of panics (e.g., &lt;code&gt;unwrap()&lt;/code&gt; on &lt;code&gt;None&lt;/code&gt; values)&lt;/li&gt; &#xA; &lt;li&gt;The absence of some types of unexpected behavior (e.g., arithmetic overflows)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install the latest version of Kani (&lt;a href=&#34;https://model-checking.github.io/kani/install-guide.html&#34;&gt;Rust 1.58+; Linux or Mac&lt;/a&gt;), run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo install --locked kani-verifier&#xA;cargo kani setup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://model-checking.github.io/kani/install-guide.html&#34;&gt;the installation guide&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;How to use Kani&lt;/h2&gt; &#xA;&lt;p&gt;Similar to testing, you write a harness, but with Kani you can check all possible values using &lt;code&gt;kani::any()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use my_crate::{function_under_test, meets_specification, precondition};&#xA;&#xA;#[kani::proof]&#xA;fn check_my_property() {&#xA;   // Create a nondeterministic input&#xA;   let input = kani::any();&#xA;&#xA;   // Constrain it according to the function&#39;s precondition&#xA;   kani::assume(precondition(input));&#xA;&#xA;   // Call the function under verification&#xA;   let output = function_under_test(input);&#xA;&#xA;   // Check that it meets the specification&#xA;   assert!(meets_specification(input, output));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Kani will then try to prove that all valid inputs produce acceptable outputs, without panicking or executing unexpected behavior. Otherwise Kani will generate a trace that points to the failure. We recommend following &lt;a href=&#34;https://model-checking.github.io/kani/kani-tutorial.html&#34;&gt;the tutorial&lt;/a&gt; to learn more about how to use Kani.&lt;/p&gt; &#xA;&lt;h2&gt;GitHub Action&lt;/h2&gt; &#xA;&lt;p&gt;Use Kani in your CI with &lt;code&gt;model-checking/kani-github-action@VERSION&lt;/code&gt;. See the &lt;a href=&#34;https://model-checking.github.io/kani/install-github-ci.html&#34;&gt;GitHub Action section in the Kani book&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/model-checking/kani/security/policy&#34;&gt;SECURITY&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you are interested in contributing to Kani, please take a look at &lt;a href=&#34;https://model-checking.github.io/kani/dev-documentation.html&#34;&gt;the developer documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;h3&gt;Kani&lt;/h3&gt; &#xA;&lt;p&gt;Kani is distributed under the terms of both the MIT license and the Apache License (Version 2.0).&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/model-checking/kani/main/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/model-checking/kani/main/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h3&gt;Rust&lt;/h3&gt; &#xA;&lt;p&gt;Kani contains code from the Rust project. Rust is primarily distributed under the terms of both the MIT license and the Apache License (Version 2.0), with portions covered by various BSD-like licenses.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/rust-lang/rust&#34;&gt;the Rust repository&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
</feed>