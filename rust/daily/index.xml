<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-04T01:41:24Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ChristopherBiscardi/advent-of-code</title>
    <updated>2023-12-04T01:41:24Z</updated>
    <id>tag:github.com,2023-12-04:/ChristopherBiscardi/advent-of-code</id>
    <link href="https://github.com/ChristopherBiscardi/advent-of-code" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Advent of Code&lt;/h1&gt; &#xA;&lt;p&gt;Solutions for the &lt;a href=&#34;http://adventofcode.com/&#34;&gt;Advent of Code&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Answers are organized by year&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tracel-ai/burn</title>
    <updated>2023-12-04T01:41:24Z</updated>
    <id>tag:github.com,2023-12-04:/tracel-ai/burn</id>
    <link href="https://github.com/tracel-ai/burn" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Burn is a new comprehensive dynamic Deep Learning Framework built using Rust with extreme flexibility, compute efficiency and portability as its primary goals.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/tracel-ai/burn/main/assets/logo-burn-neutral.webp&#34; width=&#34;350px&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://discord.gg/uPEBbYYDB6&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1038839012602941528.svg?color=7289da&amp;amp;&amp;amp;logo=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/burn&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/burn.svg?sanitize=true&#34; alt=&#34;Current Crates.io Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://burn.dev/docs/burn&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-latest-blue&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tracel-ai/burn/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/tracel-ai/burn/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Test Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/tracel-ai/burn&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/tracel-ai/burn/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;CodeCov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://releases.rs/docs/1.71.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Rust-1.71.0+-blue&#34; alt=&#34;Rust Version&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://shields.io/badge/license-MIT%2FApache--2.0-blue&#34; alt=&#34;license&#34;&gt;&lt;/p&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;&lt;strong&gt;Burn is a new comprehensive dynamic Deep Learning Framework built using Rust &lt;br&gt; with extreme flexibility, compute efficiency and portability as its primary goals.&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;br&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;left&#34;&gt; &#xA; &lt;h2&gt;Performance&lt;/h2&gt; &#xA; &lt;div align=&#34;left&#34;&gt; &#xA;  &lt;img align=&#34;right&#34; src=&#34;https://raw.githubusercontent.com/tracel-ai/burn/main/assets/ember-blazingly-fast.png&#34; height=&#34;96px&#34;&gt; &#xA;  &lt;p&gt;Because we believe the goal of a deep learning framework is to convert computation into useful intelligence, we have made performance a core pillar of Burn. We strive to achieve top efficiency by leveraging multiple optimization techniques described below.&lt;/p&gt; &#xA;  &lt;p&gt;&lt;strong&gt;Click on each section for more details&lt;/strong&gt; üëá&lt;/p&gt; &#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt; Automatic kernel fusion üí• &lt;/summary&gt; &#xA;  &lt;br&gt; &#xA;  &lt;p&gt;Using Burn means having your models optimized on any backend. When possible, we provide a way to automatically and dynamically create custom kernels that minimize data relocation between different memory spaces, extremely useful when moving memory is the bottleneck.&lt;/p&gt; &#xA;  &lt;p&gt;As an example, you could write your own GELU activation function with the high level tensor api (see Rust code snippet below).&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn gelu_custom&amp;lt;B: Backend, const D: usize&amp;gt;(x: Tensor&amp;lt;B, D&amp;gt;) -&amp;gt; Tensor&amp;lt;B, D&amp;gt; {&#xA;    let x = x.clone() * ((x / SQRT_2).erf() + 1);&#xA;    x / 2&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;Then, at runtime, a custom low-level kernel will be automatically created for your specific implementation and will rival a handcrafted GPU implementation. The kernel consists of about 60 lines of WGSL &lt;a href=&#34;https://raw.githubusercontent.com/tracel-ai/burn/main/%22https://www.w3.org/TR/WGSL/https://www.w3.org/TR/WGSL/%22&#34;&gt;WebGPU Shading Language&lt;/a&gt;, an extremely verbose lower level shader language you probably don&#39;t want to program your deep learning models in!&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;As of now, our fusion strategy is only implemented for our own WGPU backend and supports only a subset of operations. We plan to add more operations very soon and extend this technique to other future in-house backends.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA; &lt;/details&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt; Asynchronous execution ‚ù§Ô∏è‚Äçüî• &lt;/summary&gt; &#xA;  &lt;br&gt; &#xA;  &lt;p&gt;For &lt;a href=&#34;https://raw.githubusercontent.com/tracel-ai/burn/main/#backends&#34;&gt;backends developed from scratch by the Burn team&lt;/a&gt;, an asynchronous execution style is used, which allows to perform various optimizations, such as the previously mentioned automatic kernel fusion.&lt;/p&gt; &#xA;  &lt;p&gt;Asynchronous execution also ensures that the normal execution of the framework does not block the model computations, which implies that the framework overhead won&#39;t impact the speed of execution significantly. Conversely, the intense computations in the model do not interfere with the responsiveness of the framework. For more information about our asynchronous backends, see &lt;a href=&#34;https://burn.dev/blog/creating-high-performance-asynchronous-backends-with-burn-compute&#34;&gt;this blog post&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;/details&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt; Thread-safe building blocks ü¶û &lt;/summary&gt; &#xA;  &lt;br&gt; &#xA;  &lt;p&gt;Burn emphasizes thread safety by leveraging the &lt;a href=&#34;https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html&#34;&gt;ownership system of Rust&lt;/a&gt;. With Burn, each module is the owner of its weights. It is therefore possible to send a module to another thread for computing the gradients, then send the gradients to the main thread that can aggregate them, and &lt;em&gt;voil√†&lt;/em&gt;, you get multi-device training.&lt;/p&gt; &#xA;  &lt;p&gt;This is a very different approach from what PyTorch does, where backpropagation actually mutates the &lt;em&gt;grad&lt;/em&gt; attribute of each tensor parameter. This is not a thread-safe operation and therefore requires lower level synchronization primitives, see &lt;a href=&#34;https://pytorch.org/docs/stable/distributed.html&#34;&gt;distributed training&lt;/a&gt; for reference. Note that this is still very fast, but not compatible across different backends and quite hard to implement.&lt;/p&gt; &#xA; &lt;/details&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt; Intelligent memory management ü¶Ä &lt;/summary&gt; &#xA;  &lt;br&gt; &#xA;  &lt;p&gt;One of the main roles of a deep learning framework is to reduce the amount of memory necessary to run models. The naive way of handling memory is that each tensor has its own memory space, which is allocated when the tensor is created then deallocated as the tensor gets out of scope. However, allocating and deallocating data is very costly, so a memory pool is often required to achieve good throughput. Burn offers an infrastructure that allows for easily creating and selecting memory management strategies for backends. For more details on memory management in Burn, see &lt;a href=&#34;https://burn.dev/blog/creating-high-performance-asynchronous-backends-with-burn-compute&#34;&gt;this blog post&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;p&gt;Another very important memory optimization of Burn is that we keep track of when a tensor can be mutated in-place just by using the ownership system well. Even though it is a rather small memory optimization on its own, it adds up considerably when training or running inference with larger models and contributes to reduce the memory usage even more. For more information, see &lt;a href=&#34;https://burn.dev/blog/burn-rusty-approach-to-tensor-handling&#34;&gt;this blog post about tensor handling&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;/details&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt; Automatic kernel selection üéØ &lt;/summary&gt; &#xA;  &lt;br&gt; &#xA;  &lt;p&gt;A good deep learning framework should ensure that models run smoothly on all hardware. However, not all hardware share the same behavior in terms of execution speed. For instance, a matrix multiplication kernel can be launched with many different parameters, which are highly sensitive to the size of the matrices and the hardware. Using the wrong configuration could reduce the speed of execution by a large factor (10 times or even more in extreme cases), so choosing the right kernels becomes a priority.&lt;/p&gt; &#xA;  &lt;p&gt;With our home-made backends, we run benchmarks automatically and choose the best configuration for the current hardware and matrix sizes with a reasonable caching strategy.&lt;/p&gt; &#xA;  &lt;p&gt;This adds a small overhead by increasing the warmup execution time, but stabilizes quickly after a few forward and backward passes, saving lots of time in the long run. Note that this feature isn&#39;t mandatory, and can be disabled when cold starts are a priority over optimized throughput.&lt;/p&gt; &#xA; &lt;/details&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt; Hardware specific features üî• &lt;/summary&gt; &#xA;  &lt;br&gt; &#xA;  &lt;p&gt;It is no secret that deep learning is mosly relying on matrix multiplication as its core operation, since this is how fully-connected neural networks are modeled.&lt;/p&gt; &#xA;  &lt;p&gt;More and more, hardware manufacturers optimize their chips specifically for matrix mutiliplication workloads. For instance, Nvidia has its &lt;em&gt;Tensor Cores&lt;/em&gt; and today most cellphones have AI specialized chips. As of this moment, we support Tensor Cores with our LibTorch and Candle backends, but not other accelerators yet. We hope &lt;a href=&#34;https://github.com/gpuweb/gpuweb/issues/4195&#34;&gt;this issue&lt;/a&gt; gets resolved at some point to bring support to our WGPU backend.&lt;/p&gt; &#xA; &lt;/details&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt; Custom Backend Extension üéí &lt;/summary&gt; &#xA;  &lt;br&gt; &#xA;  &lt;p&gt;Burn aims to be the most flexible deep learning framework. While it&#39;s crucial to maintain compatibility with a wide variety of backends, Burn also provides the ability to extend the functionalities of a backend implementation to suit your personal modeling requirements.&lt;/p&gt; &#xA;  &lt;p&gt;This versatility is advantageous in numerous ways, such as supporting custom operations like flash attention or manually writing your own kernel for a specific backend to enhance performance. See &lt;a href=&#34;https://burn.dev/book/advanced/backend-extension/index.html&#34;&gt;this section&lt;/a&gt; in the Burn Book üî• for more details.&lt;/p&gt; &#xA; &lt;/details&gt; &#xA; &lt;br&gt; &#xA; &lt;h2&gt;Training &amp;amp; Inference&lt;/h2&gt; &#xA; &lt;div align=&#34;left&#34;&gt; &#xA;  &lt;img align=&#34;right&#34; src=&#34;https://raw.githubusercontent.com/tracel-ai/burn/main/assets/ember-wall.png&#34; height=&#34;96px&#34;&gt; &#xA;  &lt;p&gt;The whole deep learning workflow is made easy with Burn, as you can monitor your training progress with an ergonomic dashboard, and run inference everywhere from embedded devices to large GPU clusters.&lt;/p&gt; &#xA;  &lt;p&gt;Burn was built from the ground up with training and inference in mind. It&#39;s also worth noting how Burn, in comparison to frameworks like PyTorch, simplifies the transition from training to deployment, eliminating the need for code changes.&lt;/p&gt; &#xA; &lt;/div&gt; &#xA; &lt;div align=&#34;center&#34;&gt; &#xA;  &lt;br&gt; &#xA;  &lt;a href=&#34;https://www.youtube.com/watch?v=N9RM5CQbNQc&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/tracel-ai/burn/main/assets/burn-train-tui.png&#34; alt=&#34;Burn Train TUI&#34; width=&#34;75%&#34;&gt; &lt;/a&gt; &#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;strong&gt;Click on the following sections to expand üëá&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt; Training Dashboard üìà &lt;/summary&gt; &#xA;  &lt;br&gt; &#xA;  &lt;p&gt;As you can see in the previous video (click on the picture!), a new terminal UI dashboard based on the &lt;a href=&#34;https://github.com/ratatui-org/ratatui&#34;&gt;Ratatui&lt;/a&gt; crate allows users to follow their training with ease without having to connect to any external application.&lt;/p&gt; &#xA;  &lt;p&gt;You can visualize your training and validation metrics updating in real-time and analyze the lifelong progression or recent history of any registered metrics using only the arrow keys. Break from the training loop without crashing, allowing potential checkpoints to be fully written or important pieces of code to complete without interruption üõ°&lt;/p&gt; &#xA; &lt;/details&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt; ONNX Support üç¨ &lt;/summary&gt; &#xA;  &lt;br&gt; &#xA;  &lt;p&gt;ONNX (Open Neural Network Exchange) is an open-standard format that exports both the architecture and the weights of a deep learning model.&lt;/p&gt; &#xA;  &lt;p&gt;Burn supports the importation of models that follow the ONNX standard so you can easily port a model you have written in another framework like TensorFlow or PyTorch to Burn to benefit from all the advantages our framework offers.&lt;/p&gt; &#xA;  &lt;p&gt;Our ONNX support is further described in &lt;a href=&#34;https://burn.dev/book/import/onnx-model.html&#34;&gt;this section of the Burn Book üî•&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This crate is in active development and currently supports a &lt;a href=&#34;https://raw.githubusercontent.com/tracel-ai/burn/main/burn-import/SUPPORTED-ONNX-OPS.md&#34;&gt;limited set of ONNX operators&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA; &lt;/details&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt; Inference in the Browser üåê &lt;/summary&gt; &#xA;  &lt;br&gt; &#xA;  &lt;p&gt;Several of our backends can compile to Web Assembly: Candle and NdArray for CPU, and WGPU for GPU. This means that you can run inference directly within a browser. We provide several examples of this:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tracel-ai/burn/main/examples/mnist-inference-web&#34;&gt;MNIST&lt;/a&gt; where you can draw digits and a small convnet tries to find which one it is! 2Ô∏è‚É£ 7Ô∏è‚É£ üò∞&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tracel-ai/burn/main/examples/image-classification-web&#34;&gt;Image Classification&lt;/a&gt; where you can upload images and classify them! üåÑ&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA; &lt;/details&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt; Embedded: &lt;i&gt;no_std&lt;/i&gt; support ‚öôÔ∏è &lt;/summary&gt; &#xA;  &lt;br&gt; &#xA;  &lt;p&gt;Burn&#39;s core components support &lt;a href=&#34;https://docs.rust-embedded.org/book/intro/no-std.html&#34;&gt;no_std&lt;/a&gt;. This means it can run in bare metal environment such as embedded devices without an operating system.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;As of now, only the NdArray backend can be used in a &lt;em&gt;no_std&lt;/em&gt; environment.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA; &lt;/details&gt; &#xA; &lt;br&gt; &#xA; &lt;h2&gt;Backends&lt;/h2&gt; &#xA; &lt;div align=&#34;left&#34;&gt; &#xA;  &lt;img align=&#34;right&#34; src=&#34;https://raw.githubusercontent.com/tracel-ai/burn/main/assets/backend-chip.png&#34; height=&#34;96px&#34;&gt; Burn strives to be as fast as possible on as many hardwares as possible, with robust implementations. We believe this flexibility is crucial for modern needs where you may train your models in the cloud, then deploy on customer hardwares, which vary from user to user. &#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;Compared to other frameworks, Burn has a very different approach to supporting many backends. By design, most code is generic over the Backend trait, which allows us to build Burn with swappable backends. This makes composing backend possible, augmenting them with additional functionalities such as autodifferentiation and automatic kernel fusion.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;We already have many backends implemented, all listed below üëá&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt; WGPU (WebGPU): Cross-Platform GPU Backend üåê &lt;/summary&gt; &#xA;  &lt;br&gt; &#xA;  &lt;p&gt;&lt;strong&gt;The go-to backend for running on any GPU.&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;p&gt;Based on the most popular and well-supported Rust graphics library, &lt;a href=&#34;https://wgpu.rs&#34;&gt;WGPU&lt;/a&gt;, this backend automatically targets Vulkan, OpenGL, Metal, Direct X11/12, and WebGPU, by using the WebGPU shading language &lt;a href=&#34;https://www.w3.org/TR/WGSL/https://www.w3.org/TR/WGSL/&#34;&gt;WGSL&lt;/a&gt;. It can also be compiled to Web Assembly to run in the browser while leveraging the GPU, see &lt;a href=&#34;https://antimora.github.io/image-classification/&#34;&gt;this demo&lt;/a&gt;. For more information on the benefits of this backend, see &lt;a href=&#34;https://burn.dev/blog/cross-platform-gpu-backend&#34;&gt;this blog&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;p&gt;The WGPU backend is our first &#34;in-house backend&#34;, which means we have complete control over its implementation details. It is fully optimized with the &lt;a href=&#34;https://raw.githubusercontent.com/tracel-ai/burn/main/#performance&#34;&gt;performance characteristics mentioned earlier&lt;/a&gt;, as it serves as our research playgound for a variety of optimizations.&lt;/p&gt; &#xA;  &lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/tracel-ai/burn/main/burn-wgpu/README.md&#34;&gt;WGPU Backend README&lt;/a&gt; for more details.&lt;/p&gt; &#xA; &lt;/details&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt; Candle: Backend using the Candle bindings üïØ &lt;/summary&gt; &#xA;  &lt;br&gt; &#xA;  &lt;p&gt;Based on &lt;a href=&#34;https://github.com/huggingface/candle&#34;&gt;Candle by Hugging Face&lt;/a&gt;, a minimalist ML framework for Rust with a focus on performance and ease of use, this backend can run on CPU with support for Web Assembly or on Nvidia GPUs using CUDA.&lt;/p&gt; &#xA;  &lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/tracel-ai/burn/main/burn-candle/README.md&#34;&gt;Candle Backend README&lt;/a&gt; for more details.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;em&gt;Disclaimer:&lt;/em&gt; This backend is not fully completed yet, but can work in some contexts like inference.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA; &lt;/details&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt; LibTorch: Backend using the LibTorch bindings üéÜ &lt;/summary&gt; &#xA;  &lt;br&gt; &#xA;  &lt;p&gt;PyTorch doesn&#39;t need an introduction in the realm of deep learning. This backend leverages &lt;a href=&#34;https://github.com/LaurentMazare/tch-rs&#34;&gt;PyTorch Rust bindings&lt;/a&gt;, enabling you to use LibTorch C++ kernels on CPU, CUDA and Metal.&lt;/p&gt; &#xA;  &lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/tracel-ai/burn/main/burn-tch/README.md&#34;&gt;LibTorch Backend README&lt;/a&gt; for more details.&lt;/p&gt; &#xA; &lt;/details&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt; NdArray: Backend using the NdArray primitive as data structure ü¶ê &lt;/summary&gt; &#xA;  &lt;br&gt; &#xA;  &lt;p&gt;This CPU backend is admittedly not our fastest backend, but offers extreme portability.&lt;/p&gt; &#xA;  &lt;p&gt;It is our only backend supporting &lt;em&gt;no_std&lt;/em&gt;.&lt;/p&gt; &#xA;  &lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/tracel-ai/burn/main/burn-ndarray/README.md&#34;&gt;NdArray Backend README&lt;/a&gt; for more details.&lt;/p&gt; &#xA; &lt;/details&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt; Autodiff: Backend decorator that brings backpropagation to any backend üîÑ &lt;/summary&gt; &#xA;  &lt;br&gt; &#xA;  &lt;p&gt;Contrary to the aforementioned backends, Autodiff is actually a backend &lt;em&gt;decorator&lt;/em&gt;. This means that it cannot exist by itself; it must encapsulate another backend.&lt;/p&gt; &#xA;  &lt;p&gt;The simple act of wrapping a base backend with Autodiff transparently equips it with autodifferentiation support, making it possible to call backward on your model.&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use burn::backend::{Autodiff, Wgpu};&#xA;use burn::tensor::{Distribution, Tensor};&#xA;&#xA;fn main() {&#xA;    type Backend = Autodiff&amp;lt;Wgpu&amp;gt;;&#xA;&#xA;    let x: Tensor&amp;lt;Backend, 2&amp;gt; = Tensor::random([32, 32], Distribution::Default);&#xA;    let y: Tensor&amp;lt;Backend, 2&amp;gt; = Tensor::random([32, 32], Distribution::Default).require_grad();&#xA;&#xA;    let tmp = x.clone() + y.clone();&#xA;    let tmp = tmp.matmul(x);&#xA;    let tmp = tmp.exp();&#xA;&#xA;    let grads = tmp.backward();&#xA;    let y_grad = y.grad(&amp;amp;grads).unwrap();&#xA;    println!(&#34;{y_grad}&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;Of note, it is impossible to make the mistake of calling backward on a model that runs on a backend that does not support autodiff (for inference), as this method is only offered by an Autodiff backend.&lt;/p&gt; &#xA;  &lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/tracel-ai/burn/main/burn-autodiff/README.md&#34;&gt;Autodiff Backend README&lt;/a&gt; for more details.&lt;/p&gt; &#xA; &lt;/details&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt; Fusion: Backend decorator that brings kernel fusion to backends that support it üí• &lt;/summary&gt; &#xA;  &lt;br&gt; &#xA;  &lt;p&gt;This backend decorator enhances a backend with kernel fusion, provided that the inner backend supports it. Note that you can compose this backend with other backend decorators such as Autodiff. For now, only the WGPU backend has support for fused kernels.&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use burn::backend::{Autodiff, Fusion, Wgpu};&#xA;use burn::tensor::{Distribution, Tensor};&#xA;&#xA;fn main() {&#xA;    type Backend = Autodiff&amp;lt;Fusion&amp;lt;Wgpu&amp;gt;&amp;gt;;&#xA;&#xA;    let x: Tensor&amp;lt;Backend, 2&amp;gt; = Tensor::random([32, 32], Distribution::Default);&#xA;    let y: Tensor&amp;lt;Backend, 2&amp;gt; = Tensor::random([32, 32], Distribution::Default).require_grad();&#xA;&#xA;    let tmp = x.clone() + y.clone();&#xA;    let tmp = tmp.matmul(x);&#xA;    let tmp = tmp.exp();&#xA;&#xA;    let grads = tmp.backward();&#xA;    let y_grad = y.grad(&amp;amp;grads).unwrap();&#xA;    println!(&#34;{y_grad}&#34;);&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;Of note, we plan to implement automatic gradient checkpointing based on compute bound and memory bound operations, which will work gracefully with the fusion backend to make your code run even faster during training, see &lt;a href=&#34;https://github.com/tracel-ai/burn/issues/936&#34;&gt;this issue&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/tracel-ai/burn/main/burn-fusion/README.md&#34;&gt;Fusion Backend README&lt;/a&gt; for more details.&lt;/p&gt; &#xA; &lt;/details&gt; &#xA; &lt;br&gt; &#xA; &lt;h2&gt;Getting Started&lt;/h2&gt; &#xA; &lt;div align=&#34;left&#34;&gt; &#xA;  &lt;img align=&#34;right&#34; src=&#34;https://raw.githubusercontent.com/tracel-ai/burn/main/assets/ember-walking.png&#34; height=&#34;96px&#34;&gt; &#xA;  &lt;p&gt;Just heard of Burn? You are at the right place! Just continue reading this section and we hope you can get on board really quickly.&lt;/p&gt; &#xA; &lt;/div&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt; The Burn Book üî• &lt;/summary&gt; &#xA;  &lt;br&gt; &#xA;  &lt;p&gt;To begin working effectively with Burn, it is crucial to understand its key components and philosophy. This is why we highly recommend new users to read the first sections of &lt;a href=&#34;https://burn.dev/book/&#34;&gt;The Burn Book üî•&lt;/a&gt;. It provides detailed examples and explanations covering every facet of the framework, including building blocks like tensors, modules, and optimizers, all the way to advanced usage, like coding your own GPU kernels.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;The project is constantly evolving, and we try as much as possible to keep the book up to date with new additions. However, we might miss some details sometimes, so if you see something weird, let us know! We also gladly accept Pull Requests üòÑ&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA; &lt;/details&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt; Examples üôè &lt;/summary&gt; &#xA;  &lt;br&gt; &#xA;  &lt;p&gt;Let&#39;s start with a code snippet that shows how intuitive the framework is to use! In the following, we declare a neural network module with some parameters along with its forward pass.&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use burn::nn;&#xA;use burn::module::Module;&#xA;use burn::tensor::backend::Backend;&#xA;&#xA;#[derive(Module, Debug)]&#xA;pub struct PositionWiseFeedForward&amp;lt;B: Backend&amp;gt; {&#xA;    linear_inner: nn::Linear&amp;lt;B&amp;gt;,&#xA;    linear_outer: nn::Linear&amp;lt;B&amp;gt;,&#xA;    dropout: nn::Dropout,&#xA;    gelu: nn::GELU,&#xA;}&#xA;&#xA;impl&amp;lt;B: Backend&amp;gt; PositionWiseFeedForward&amp;lt;B&amp;gt; {&#xA;    pub fn forward&amp;lt;const D: usize&amp;gt;(&amp;amp;self, input: Tensor&amp;lt;B, D&amp;gt;) -&amp;gt; Tensor&amp;lt;B, D&amp;gt; {&#xA;        let x = self.linear_inner.forward(input);&#xA;        let x = self.gelu.forward(x);&#xA;        let x = self.dropout.forward(x);&#xA;&#xA;        self.linear_outer.forward(x)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;We have a somewhat large amount of &lt;a href=&#34;https://raw.githubusercontent.com/tracel-ai/burn/main/examples&#34;&gt;examples&lt;/a&gt; in the repository that shows how to use the framework in different scenarios. For more practical insights, you can clone the repository and run any of them directly on your computer!&lt;/p&gt; &#xA; &lt;/details&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt; Pre-trained Models ü§ñ &lt;/summary&gt; &#xA;  &lt;br&gt; &#xA;  &lt;p&gt;We keep an updated and curated list of models and examples built with Burn, see the &lt;a href=&#34;https://github.com/tracel-ai/models&#34;&gt;tracel-ai/models repository&lt;/a&gt; for more details.&lt;/p&gt; &#xA;  &lt;p&gt;Don&#39;t see the model you want? Don&#39;t hesitate to open an issue, and we may prioritize it. Built a model using Burn and want to share it? You can also open a Pull Request and add your model under the community section!&lt;/p&gt; &#xA; &lt;/details&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt; Why use Rust for Deep Learning? ü¶Ä &lt;/summary&gt; &#xA;  &lt;br&gt; &#xA;  &lt;p&gt;Deep Learning is a special form of software where you need very high level abstractions as well as extremely fast execution time. Rust is the perfect candidate for that use case since it provides zero-cost abstractions to easily create neural network modules, and fine-grained control over memory to optimize every detail.&lt;/p&gt; &#xA;  &lt;p&gt;It&#39;s important that a framework be easy to use at a high level so that its users can concentrate on innovating in the AI field. However, since running models relies so heavily on computations, performance can&#39;t be neglected.&lt;/p&gt; &#xA;  &lt;p&gt;To this day, the mainstream solution to this problem has been to offer APIs in Python, but rely on bindings to low-level languages such as C/C++. This reduces portability, increases complexity and creates frictions between researchers and engineers. We feel like Rust&#39;s approach to abstractions makes it versatile enough to tackle this two languages dichotomy.&lt;/p&gt; &#xA;  &lt;p&gt;Rust also comes with the Cargo package manager, which makes it incredibly easy to build, test, and deploy from any environment, which is usually a pain in Python.&lt;/p&gt; &#xA;  &lt;p&gt;Although Rust has the reputation of being a difficult language at first, we strongly believe it leads to more reliable, bug-free solutions built faster (after some practice üòÖ)!&lt;/p&gt; &#xA; &lt;/details&gt; &#xA; &lt;br&gt; &#xA; &lt;h2&gt;Community&lt;/h2&gt; &#xA; &lt;div align=&#34;left&#34;&gt; &#xA;  &lt;img align=&#34;right&#34; src=&#34;https://raw.githubusercontent.com/tracel-ai/burn/main/assets/ember-community.png&#34; height=&#34;96px&#34;&gt; &#xA;  &lt;p&gt;If you are excited about the project, don&#39;t hesitate to join our &lt;a href=&#34;https://discord.gg/uPEBbYYDB6&#34;&gt;Discord&lt;/a&gt;! We try to be as welcoming as possible to everybody from any background. You can ask your questions and share what you built with the community!&lt;/p&gt; &#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;strong&gt;Contributing&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Before contributing, please take a moment to review our &lt;a href=&#34;https://github.com/tracel-ai/burn/tree/main/CODE-OF-CONDUCT.md&#34;&gt;code of conduct&lt;/a&gt;. It&#39;s also highly recommended to read our &lt;a href=&#34;https://github.com/tracel-ai/burn/tree/main/ARCHITECTURE.md&#34;&gt;architecture document&lt;/a&gt;, which explains some of our architectural decisions. Refer to out &lt;a href=&#34;https://raw.githubusercontent.com/tracel-ai/burn/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; for more details.&lt;/p&gt; &#xA; &lt;h2&gt;Status&lt;/h2&gt; &#xA; &lt;p&gt;Burn is currently in active development, and there will be breaking changes. While any resulting issues are likely to be easy to fix, there are no guarantees at this stage.&lt;/p&gt; &#xA; &lt;h2&gt;License&lt;/h2&gt; &#xA; &lt;p&gt;Burn is distributed under the terms of both the MIT license and the Apache License (Version 2.0). See &lt;a href=&#34;https://raw.githubusercontent.com/tracel-ai/burn/main/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/tracel-ai/burn/main/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; for details. Opening a pull request is assumed to signal agreement with these licensing terms.&lt;/p&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>gobanos/cargo-aoc</title>
    <updated>2023-12-04T01:41:24Z</updated>
    <id>tag:github.com,2023-12-04:/gobanos/cargo-aoc</id>
    <link href="https://github.com/gobanos/cargo-aoc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cargo Advent of Code Helper&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;cargo-aoc&lt;/code&gt; is a simple CLI tool that aims to be a helper for the &lt;a href=&#34;https://adventofcode.com&#34;&gt;Advent of Code&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Implement your solution. Let us handle the rest.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Input downloading&lt;/li&gt; &#xA; &lt;li&gt;Running your solution&lt;/li&gt; &#xA; &lt;li&gt;Automatic benchmarking of your solution using &lt;a href=&#34;https://github.com/japaric/criterion.rs&#34;&gt;Criterion&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Getting started&lt;/h1&gt; &#xA;&lt;h2&gt;Install &lt;code&gt;cargo aoc&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;cargo-aoc&lt;/code&gt; is hosted as a binary on crates.io. Boot a terminal and install the program using &lt;code&gt;cargo install cargo-aoc&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Setting up the CLI&lt;/h2&gt; &#xA;&lt;p&gt;You will need to find your session token for the AoC in order for cargo-aoc to work. Thankfully, finding your token is easy since it is stored in your Browser&#39;s cookies. Open up the devtools of your browser, and then :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Firefox: &#34;Storage&#34; tab, Cookies, and copy the &#34;Value&#34; field of the &lt;code&gt;session&lt;/code&gt; cookie.&lt;/li&gt; &#xA; &lt;li&gt;Google Chrome / Chromium: &#34;Application&#34; tab, Cookies, and copy the &#34;Value&#34; field of the &lt;code&gt;session&lt;/code&gt; cookie.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once you have it, simply run : &lt;code&gt;cargo aoc credentials {token}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You&#39;re now ready to start coding !&lt;/p&gt; &#xA;&lt;p&gt;NOTE: If for some reason your token has changed, dont forget to change it back.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cargo aoc credentials&lt;/code&gt; will show the currently stored user token&lt;/p&gt; &#xA;&lt;h2&gt;Setting up the project&lt;/h2&gt; &#xA;&lt;p&gt;In order for &lt;code&gt;cargo-aoc&lt;/code&gt; to work properly, you have to set the project up correctly.&lt;/p&gt; &#xA;&lt;p&gt;If you get lost during the process, you can take &lt;a href=&#34;https://github.com/gobanos/advent-of-code-2015&#34;&gt;this example repository of AoC 2015&lt;/a&gt; as a template.&lt;/p&gt; &#xA;&lt;p&gt;First, you must add a dependency on &lt;code&gt;aoc-runner&lt;/code&gt; and &lt;code&gt;aoc-runner-derive&lt;/code&gt; in your &lt;code&gt;Cargo.toml&lt;/code&gt;. At the end of the &lt;code&gt;src/lib.rs&lt;/code&gt;, you will have to use the macro &lt;code&gt;aoc_lib!{ year = XXXX }&lt;/code&gt;, where XXXX is the year of the AoC puzzles being solved.&lt;/p&gt; &#xA;&lt;p&gt;When implementing a solution for a day, you have to provide functions and tag them accordingly. A function is either a &lt;strong&gt;solver&lt;/strong&gt; or a &lt;strong&gt;generator&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Those two types of functions are being executed and benchmarked seperately. Lets have a closer look :&lt;/p&gt; &#xA;&lt;h3&gt;Generator functions&lt;/h3&gt; &#xA;&lt;p&gt;Generators allows you to provide a custom type to the solver functions. Sometimes in AoC, you have to parse an input and extract a logical structure out of it, before you can actually solve the problem.&lt;/p&gt; &#xA;&lt;p&gt;Generator functions are tagged &lt;code&gt;#[aoc_generator(dayX)]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Because examples are worth a thousand words, lets take a look at &lt;a href=&#34;https://adventofcode.com/2015/day/2&#34;&gt;Year 2015, Day 2&lt;/a&gt; :&lt;/p&gt; &#xA;&lt;p&gt;From the puzzle&#39;s description, we know that &lt;code&gt;[we] have a list of the dimensions (length l, width w, and height h) of each present&lt;/code&gt;, each present on one line, represented like so: &lt;code&gt;{L}x{W}x{H}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We might want to first parse the input and extract logical &lt;code&gt;Gift&lt;/code&gt; structs out of it, like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pub struct Gift {&#xA;    l: u32,&#xA;    w: u32,&#xA;    h: u32&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In @Gobanos&#39; reference implementation, we can see that he instead chose to settle for a custom type : &lt;code&gt;type Gift = (u32, u32, u32);&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Thus, writing a generator for &lt;code&gt;Gift&lt;/code&gt;s is fairly simple:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#[aoc_generator(day2)]&#xA;pub fn input_generator(input: &amp;amp;str) -&amp;gt; Vec&amp;lt;Gift&amp;gt; {&#xA;    input&#xA;        .lines()&#xA;        .map(|l| {&#xA;            let mut gift = l.trim().split(&#39;x&#39;).map(|d| d.parse().unwrap());&#xA;            (&#xA;                gift.next().unwrap(),&#xA;                gift.next().unwrap(),&#xA;                gift.next().unwrap(),&#xA;            )&#xA;        }).collect()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you can see, generators take a &lt;code&gt;&amp;amp;str&lt;/code&gt; (or a &lt;code&gt;&amp;amp;[u8]&lt;/code&gt;) type as an input, and outputs any type that you want, so you can then use it in &lt;code&gt;solver&lt;/code&gt; functions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.rs/aoc-runner-derive/latest/aoc_runner_derive/attr.aoc_generator.html&#34;&gt;link to doc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Solver functions&lt;/h3&gt; &#xA;&lt;p&gt;Solver functions are typically your algorithms, they take any input type provided by a generator, and return any type that you want to use, provided that it implements the &lt;code&gt;Display&lt;/code&gt; trait.&lt;/p&gt; &#xA;&lt;p&gt;Solver functions are tagged &lt;code&gt;#[aoc(day2, part1)]&lt;/code&gt;. Optionally, you can have multiple implementation for the same part of a day. You must then use a name to tag them correctly, for example : &lt;code&gt;#[aoc(day2, part1, for_loop)]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Following with the previous example, implementing a solver for the part one could be done like this :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#[aoc(day2, part1)]&#xA;pub fn solve_part1(input: &amp;amp;[Gift]) -&amp;gt; u32 {&#xA;    input&#xA;        .iter()&#xA;        .map(|&amp;amp;(l, w, h)| {&#xA;            let (s1, s2) = smallest_side((l, w, h));&#xA;            2 * l * w + 2 * w * h + 2 * h * l + s1 * s2&#xA;        })&#xA;        .sum()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice how we&#39;re taking the &lt;code&gt;Gift&lt;/code&gt;s generated previously, and using Rust&#39;s iterators to solve the problem efficiently, all the while keeping the code maintainable.&lt;/p&gt; &#xA;&lt;p&gt;The output of this particular solver is an &lt;code&gt;u32&lt;/code&gt;, which of course implements &lt;code&gt;Display&lt;/code&gt;. When running your solution using &lt;code&gt;cargo aoc&lt;/code&gt;, said result will then get printed in the console, along with other informations about execution time.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.rs/aoc-runner-derive/latest/aoc_runner_derive/attr.aoc.html&#34;&gt;link to doc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Downloading your input manually&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;cargo aoc input&lt;/code&gt; will download an input and store it in &lt;code&gt;input/{year}/day_{day}.txt&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please note that by default, we&#39;re taking today&#39;s date as the argument. Of course, you can change this using : &lt;code&gt;cargo aoc input -d {day} -y {year}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Running your solution&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;cargo aoc&lt;/code&gt; will run the latest implemented day, downloading your input beforehand. It will show you the result, and a short summary of how well it did perform.&lt;/p&gt; &#xA;&lt;p&gt;Example output on my Chromebook, running &lt;a href=&#34;https://github.com/gobanos/advent-of-code-2015&#34;&gt;@Gobanos&#39; AOC2015&lt;/a&gt; :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[olivier@olivier-pc advent-of-code-2015]$ cargo aoc&#xA;    Finished dev [unoptimized + debuginfo] target(s) in 0.12s&#xA;   Compiling aoc-autobuild v0.1.0 (/home/olivier/Workspace/Rust/advent-of-code-2015/target/aoc/aoc-autobuild)&#xA;    Finished release [optimized] target(s) in 0.87s&#xA;     Running `target/release/aoc-autobuild`&#xA;AOC 2015&#xA;Day 5 - Part 1 : 238&#xA;        generator: 18.122¬µs,&#xA;        runner: 420.958¬µs&#xA;&#xA;Day 5 - Part 2 : 69&#xA;        generator: 5.499¬µs,&#xA;        runner: 1.142373ms&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to run an older puzzle, or only a specific part, specify those using &lt;code&gt;cargo aoc -d {day} -p {part}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Benchmarking your solution&lt;/h1&gt; &#xA;&lt;p&gt;Benchmarking is powered by &lt;a href=&#34;https://github.com/japaric/criterion.rs&#34;&gt;Criterion&lt;/a&gt;. Use &lt;code&gt;cargo aoc bench&lt;/code&gt; to launch the benchmarks, just like you would use &lt;code&gt;cargo aoc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Benchmarks for each days are then generated in &lt;code&gt;target/aoc/aoc-autobench/target/criterion&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can open the benchmark automatically in your Browser afterwards, using &lt;code&gt;cargo aoc bench -o&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Soon(tm), you will also be able to use our (free) online platform, to compare your results with those of the community.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Happy Advent of Code !&lt;/p&gt;</summary>
  </entry>
</feed>