<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-11T01:45:15Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>zackradisic/rust-vs-zig</title>
    <updated>2023-03-11T01:45:15Z</updated>
    <id>tag:github.com,2023-03-11:/zackradisic/rust-vs-zig</id>
    <link href="https://github.com/zackradisic/rust-vs-zig" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rust vs. Zig&lt;/h1&gt; &#xA;&lt;p&gt;This is an experiment to evaluate Rust vs. Zig by writing a bytecode interpreter with GC in both languages and comparing them.&lt;/p&gt; &#xA;&lt;p&gt;The interpreter implementation is from the &lt;a href=&#34;https://craftinginterpreters.com&#34;&gt;Crafting Interpreters&lt;/a&gt; book.&lt;/p&gt; &#xA;&lt;p&gt;I wrote a comprehensive summary of this experiment &lt;a href=&#34;https://zackoverflow.dev/writing/unsafe-rust-vs-zig&#34;&gt;on my personal blog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Rust implementation&lt;/h2&gt; &#xA;&lt;p&gt;This is in the &lt;a href=&#34;https://raw.githubusercontent.com/zackradisic/rust-vs-zig/master/loxide/&#34;&gt;loxide&lt;/a&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;To build it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# in the root project directory&#xA;make rust&#xA;&#xA;# inside the rust folder&#xA;cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo test&#xA;&#xA;# Run with miri to check for undefined behaviour&#xA;cargo miri test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Zig implementation&lt;/h2&gt; &#xA;&lt;p&gt;This is in the &lt;a href=&#34;https://raw.githubusercontent.com/zackradisic/rust-vs-zig/master/zlox/&#34;&gt;zlox&lt;/a&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;To build it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# in the root project directory&#xA;make zig&#xA;&#xA;# inside the zlox folder&#xA;# run `zig build help` for options&#xA;zig build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;zig build test&#xA;zig-out/bin/zlox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/zackradisic/rust-vs-zig/master/benchmarks/&#34;&gt;benchmarks&lt;/a&gt; folder contains the code (&#34;*.lox&#34; files) the two interpreters run and the results of the benchmarks. The results are run using hyperfine.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>datafuselabs/opendal</title>
    <updated>2023-03-11T01:45:15Z</updated>
    <id>tag:github.com,2023-03-11:/datafuselabs/opendal</id>
    <link href="https://github.com/datafuselabs/opendal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenDAL: Access data freely, painlessly, and efficiently&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenDAL â€ƒ &lt;a href=&#34;https://github.com/datafuselabs/opendal/actions?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/datafuselabs/opendal/ci.yml?branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/opendal&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/opendal.svg?sanitize=true&#34; alt=&#34;Latest Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/opendal&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/d/opendal.svg?sanitize=true&#34; alt=&#34;Crate Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/XQy8yGR2dg&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1081052318650339399&#34; alt=&#34;chat&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Open&lt;/strong&gt; &lt;strong&gt;D&lt;/strong&gt;ata &lt;strong&gt;A&lt;/strong&gt;ccess &lt;strong&gt;L&lt;/strong&gt;ayer: Access data freely, painlessly, and efficiently&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Documentation: &lt;a href=&#34;https://docs.rs/opendal/&#34;&gt;stable&lt;/a&gt; | &lt;a href=&#34;https://opendal.databend.rs/opendal/&#34;&gt;main&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/opendal/latest/opendal/docs/changelog/index.html&#34;&gt;Release notes&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/5351546/222356748-14276998-501b-4d2a-9b09-b8cff3018204.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Services&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/opendal/latest/opendal/services/struct.Azblob.html&#34;&gt;azblob&lt;/a&gt;: &lt;a href=&#34;https://azure.microsoft.com/en-us/services/storage/blobs/&#34;&gt;Azure Storage Blob&lt;/a&gt; services.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/opendal/latest/opendal/services/struct.Azdfs.html&#34;&gt;azdfs&lt;/a&gt;: &lt;a href=&#34;https://azure.microsoft.com/en-us/products/storage/data-lake-storage/&#34;&gt;Azure Data Lake Storage Gen2&lt;/a&gt; services. (As known as &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-abfs-driver&#34;&gt;abfs&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/opendal/latest/opendal/services/struct.Dashmap.html&#34;&gt;dashmap&lt;/a&gt;: &lt;a href=&#34;https://github.com/xacrimon/dashmap&#34;&gt;dashmap&lt;/a&gt; backend support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/opendal/latest/opendal/services/struct.Fs.html&#34;&gt;fs&lt;/a&gt;: POSIX alike file system.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/opendal/latest/opendal/services/struct.Ftp.html&#34;&gt;ftp&lt;/a&gt;: FTP and FTPS support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/opendal/latest/opendal/services/struct.Gcs.html&#34;&gt;gcs&lt;/a&gt;: &lt;a href=&#34;https://cloud.google.com/storage&#34;&gt;Google Cloud Storage&lt;/a&gt; Service.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/opendal/latest/opendal/services/struct.Ghac.html&#34;&gt;ghac&lt;/a&gt;: &lt;a href=&#34;https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows&#34;&gt;Github Action Cache&lt;/a&gt; Service.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/opendal/latest/opendal/services/struct.Hdfs.html&#34;&gt;hdfs&lt;/a&gt;: &lt;a href=&#34;https://hadoop.apache.org/docs/r3.3.4/hadoop-project-dist/hadoop-hdfs/HdfsDesign.html&#34;&gt;Hadoop Distributed File System&lt;/a&gt;(HDFS).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/opendal/latest/opendal/services/struct.Http.html&#34;&gt;http&lt;/a&gt;: HTTP read-only services.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/opendal/latest/opendal/services/struct.Ipfs.html&#34;&gt;ipfs&lt;/a&gt;: &lt;a href=&#34;https://ipfs.tech/&#34;&gt;InterPlanetary File System&lt;/a&gt; HTTP Gateway support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/opendal/latest/opendal/services/struct.Ipmfs.html&#34;&gt;ipmfs&lt;/a&gt;: &lt;a href=&#34;https://ipfs.tech/&#34;&gt;InterPlanetary File System&lt;/a&gt; MFS API support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/opendal/latest/opendal/services/struct.Memcached.html&#34;&gt;memcached&lt;/a&gt;: &lt;a href=&#34;https://memcached.org/&#34;&gt;Memcached&lt;/a&gt; service support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/opendal/latest/opendal/services/struct.Memory.html&#34;&gt;memory&lt;/a&gt;: In memory backend.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/opendal/latest/opendal/services/struct.Moka.html&#34;&gt;moka&lt;/a&gt;: &lt;a href=&#34;https://github.com/moka-rs/moka&#34;&gt;moka&lt;/a&gt; backend support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/opendal/latest/opendal/services/struct.Obs.html&#34;&gt;obs&lt;/a&gt;: &lt;a href=&#34;https://www.huaweicloud.com/intl/en-us/product/obs.html&#34;&gt;Huawei Cloud Object Storage&lt;/a&gt; Service (OBS).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/opendal/latest/opendal/services/struct.Oss.html&#34;&gt;oss&lt;/a&gt;: &lt;a href=&#34;https://www.aliyun.com/product/oss&#34;&gt;Aliyun Object Storage Service&lt;/a&gt; (OSS).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/opendal/latest/opendal/services/struct.Redis.html&#34;&gt;redis&lt;/a&gt;: &lt;a href=&#34;https://redis.io/&#34;&gt;Redis&lt;/a&gt; services support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/opendal/latest/opendal/services/struct.Rocksdb.html&#34;&gt;rocksdb&lt;/a&gt;: &lt;a href=&#34;http://rocksdb.org/&#34;&gt;RocksDB&lt;/a&gt; services support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/opendal/latest/opendal/services/struct.S3.html&#34;&gt;s3&lt;/a&gt;: &lt;a href=&#34;https://aws.amazon.com/s3/&#34;&gt;AWS S3&lt;/a&gt; alike services.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/opendal/latest/opendal/services/sled/struct.Sled.html&#34;&gt;sled&lt;/a&gt;: &lt;a href=&#34;https://crates.io/crates/sled&#34;&gt;sled&lt;/a&gt; services support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/opendal/latest/opendal/services/struct.Webdav.html&#34;&gt;webdav&lt;/a&gt;: &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc4918&#34;&gt;WebDAV&lt;/a&gt; Service Support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/opendal/latest/opendal/services/struct.Webhdfs.html&#34;&gt;webhdfs&lt;/a&gt;: &lt;a href=&#34;https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-hdfs/WebHDFS.html&#34;&gt;WebHDFS&lt;/a&gt; Service Support.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Access data &lt;strong&gt;freely&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Access different storage services in the same way&lt;/li&gt; &#xA; &lt;li&gt;Behavior tests for all services&lt;/li&gt; &#xA; &lt;li&gt;Cross language/project bindings (working on) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/datafuselabs/opendal/main/bindings/python/&#34;&gt;Python&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/datafuselabs/opendal/main/bindings/nodejs/&#34;&gt;Node.js&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/datafuselabs/opendal/main/bindings/object_store/&#34;&gt;object_store&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Access data &lt;strong&gt;painlessly&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;100%&lt;/strong&gt; documents covered&lt;/li&gt; &#xA; &lt;li&gt;Powerful &lt;a href=&#34;https://docs.rs/opendal/latest/opendal/layers/index.html&#34;&gt;&lt;code&gt;Layers&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Automatic &lt;a href=&#34;https://docs.rs/opendal/latest/opendal/layers/struct.RetryLayer.html&#34;&gt;retry&lt;/a&gt; support&lt;/li&gt; &#xA; &lt;li&gt;Full observability: &lt;a href=&#34;https://docs.rs/opendal/latest/opendal/layers/struct.LoggingLayer.html&#34;&gt;logging&lt;/a&gt;, &lt;a href=&#34;https://docs.rs/opendal/latest/opendal/layers/struct.TracingLayer.html&#34;&gt;tracing&lt;/a&gt;, &lt;a href=&#34;https://docs.rs/opendal/latest/opendal/layers/struct.MetricsLayer.html&#34;&gt;metrics&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/opendal/latest/opendal/layers/struct.ChaosLayer.html&#34;&gt;Native chaos testing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Access data &lt;strong&gt;efficiently&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Zero cost: Maps to API calls directly&lt;/li&gt; &#xA; &lt;li&gt;Best effort: Automatically selects best read/seek/next based on services&lt;/li&gt; &#xA; &lt;li&gt;Avoid extra calls: Reuses metadata when possible&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use opendal::Result;&#xA;use opendal::layers::LoggingLayer;&#xA;use opendal::services;&#xA;use opendal::Operator;&#xA;&#xA;#[tokio::main]&#xA;async fn main() -&amp;gt; Result&amp;lt;()&amp;gt; {&#xA;    // Pick a builder and configure it.&#xA;    let mut builder = services::S3::default();&#xA;    builder.bucket(&#34;test&#34;);&#xA;&#xA;    // Init an operator&#xA;    let op = Operator::create(builder)?&#xA;        // Init with logging layer enabled.&#xA;        .layer(LoggingLayer::default())&#xA;        .finish();&#xA;&#xA;    // Write data&#xA;    op.write(&#34;hello.txt&#34;, &#34;Hello, World!&#34;).await?;&#xA;&#xA;    // Read data&#xA;    let bs = op.read(&#34;hello.txt&#34;).await?;&#xA;&#xA;    // Fetch metadata&#xA;    let meta = op.stat(&#34;hello.txt&#34;).await?;&#xA;    let mode = meta.mode();&#xA;    let length = meta.content_length();&#xA;&#xA;    // Delete&#xA;    op.delete(&#34;hello.txt&#34;).await?;&#xA;&#xA;    Ok(())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More examples could be found at &lt;a href=&#34;https://opendal.databend.rs&#34;&gt;Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/datafuselabs/databend/&#34;&gt;Databend&lt;/a&gt;: A modern Elasticity and Performance cloud data warehouse.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GreptimeTeam/greptimedb&#34;&gt;GreptimeDB&lt;/a&gt;: An open-source, cloud-native, distributed time-series database.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepeth/mars&#34;&gt;deepeth/mars&lt;/a&gt;: The powerful analysis platform to explore and visualize data from blockchain.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mozilla/sccache/&#34;&gt;mozilla/sccache&lt;/a&gt;: sccache is ccache with cloud storage&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/risingwavelabs/risingwave&#34;&gt;risingwave&lt;/a&gt;: A Distributed SQL Database for Stream Processing&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vectordotdev/vector&#34;&gt;Vector&lt;/a&gt;: A high-performance observability data pipeline.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://raw.githubusercontent.com/datafuselabs/opendal/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; guide for more details on getting started with contributing to this project.&lt;/p&gt; &#xA;&lt;h2&gt;Getting help&lt;/h2&gt; &#xA;&lt;p&gt;Submit &lt;a href=&#34;https://github.com/datafuselabs/opendal/issues/new/choose&#34;&gt;issues&lt;/a&gt; for bug report or asking questions in &lt;a href=&#34;https://github.com/datafuselabs/opendal/discussions/new?category=q-a&#34;&gt;discussion&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Talk to develops at &lt;a href=&#34;https://discord.gg/XQy8yGR2dg&#34;&gt;discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;License&lt;/h4&gt; &#xA;&lt;sup&gt; Licensed under &lt;a href=&#34;https://raw.githubusercontent.com/datafuselabs/opendal/main/LICENSE&#34;&gt;Apache License, Version 2.0&lt;/a&gt;. &lt;/sup&gt;</summary>
  </entry>
  <entry>
    <title>ricosjp/truck</title>
    <updated>2023-03-11T01:45:15Z</updated>
    <id>tag:github.com,2023-03-11:/ricosjp/truck</id>
    <link href="https://github.com/ricosjp/truck" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Truck is a Rust CAD Kernel.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;truck - Truck is a rust CAD kernel&lt;/h1&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Truck is an open-source shape processing kernel by Rust.&lt;br&gt; The broad concept consists of the following three elements.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Trendy Tools&lt;/li&gt; &#xA; &lt;li&gt;Traditional Arts&lt;/li&gt; &#xA; &lt;li&gt;Theseus&#39; ship&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Trendy Tools&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We are targeting the next generation of market share using developmental tools: Rust and WebGPU.&lt;/li&gt; &#xA; &lt;li&gt;Advanced optimizations using Rust and WebGPU maximize the performance of each crate.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Traditional Arts&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We will break away from the legacy by re-implementing the B-rep with NURBS in the above trendy tools.&lt;/li&gt; &#xA; &lt;li&gt;Safe implementation using Rust to eliminate core dumped for CPU-derived processes.&lt;/li&gt; &#xA; &lt;li&gt;Cargo&#39;s extensive maintenance features ensure thorough continuous integration.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Theseus&#39; ship&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We are modularizing into smaller crates that can be replaced, like &lt;a href=&#34;https://en.wikipedia.org/wiki/Ship_of_Theseus&#34;&gt;the Ship of Theseus&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Based on the many lessons learned in the past, we have given up on overall optimization as a single application, and design as a collection of individual optimized crates.&lt;/li&gt; &#xA; &lt;li&gt;Since unexpected expansions are bound to occur, we deal with uncontrolled expansions in the form of small modules.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Apache License 2.0&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;How to Run Examples&lt;/h3&gt; &#xA;&lt;p&gt;All examples are located under the examples directory in each crates.&lt;br&gt; These examples use the default syntax for running examples, as found in the &lt;a href=&#34;https://doc.rust-lang.org/cargo/reference/cargo-targets.html#examples&#34;&gt;Cargo&lt;/a&gt; documentation.&lt;/p&gt; &#xA;&lt;p&gt;At first, let&#39;s run the following example!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git submodule update --init&#xA;cargo run --example rotate-objects&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;crates&lt;/h2&gt; &#xA;&lt;h3&gt;truck-base &lt;a href=&#34;https://crates.io/crates/truck-base&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/truck-base.svg?sanitize=true&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/truck-base&#34;&gt;&lt;img src=&#34;https://docs.rs/truck-base/badge.svg?sanitize=true&#34; alt=&#34;Docs.rs&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;basic structs and traits: importing cgmath, curve and surface traits, tolerance, etc...&lt;/p&gt; &#xA;&lt;h3&gt;truck-geotrait &lt;a href=&#34;https://crates.io/crates/truck-geotrait&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/truck-geotrait.svg?sanitize=true&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/truck-geotrait&#34;&gt;&lt;img src=&#34;https://docs.rs/truck-geotrait/badge.svg?sanitize=true&#34; alt=&#34;Docs.rs&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Defines geometric traits: &lt;code&gt;ParametricCurve&lt;/code&gt;, &lt;code&gt;ParametricSurface&lt;/code&gt;, and so on.&lt;/p&gt; &#xA;&lt;h3&gt;truck-geometry &lt;a href=&#34;https://crates.io/crates/truck-geometry&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/truck-geometry.svg?sanitize=true&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/truck-geometry&#34;&gt;&lt;img src=&#34;https://docs.rs/truck-geometry/badge.svg?sanitize=true&#34; alt=&#34;Docs.rs&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;geometrical structs: knot vector, B-spline and NURBS&lt;/p&gt; &#xA;&lt;h3&gt;truck-topology &lt;a href=&#34;https://crates.io/crates/truck-topology&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/truck-topology.svg?sanitize=true&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/truck-topology&#34;&gt;&lt;img src=&#34;https://docs.rs/truck-topology/badge.svg?sanitize=true&#34; alt=&#34;Docs.rs&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;topological structs: vertex, edge, wire, face, shell, and solid&lt;/p&gt; &#xA;&lt;h3&gt;truck-polymesh &lt;a href=&#34;https://crates.io/crates/truck-polymesh&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/truck-polymesh.svg?sanitize=true&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/truck-polymesh&#34;&gt;&lt;img src=&#34;https://docs.rs/truck-polymesh/badge.svg?sanitize=true&#34; alt=&#34;Docs.rs&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;defines polygon data structure and some algorithms handling mesh, including meshing the shapes&lt;/p&gt; &#xA;&lt;h3&gt;truck-meshalgo &lt;a href=&#34;https://crates.io/crates/truck-meshalgo&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/truck-meshalgo.svg?sanitize=true&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/truck-meshalgo&#34;&gt;&lt;img src=&#34;https://docs.rs/truck-meshalgo/badge.svg?sanitize=true&#34; alt=&#34;Docs.rs&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Mesh algorighms, include tessellations of the shape.&lt;/p&gt; &#xA;&lt;h3&gt;truck-modeling &lt;a href=&#34;https://crates.io/crates/truck-modeling&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/truck-modeling.svg?sanitize=true&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/truck-modeling&#34;&gt;&lt;img src=&#34;https://docs.rs/truck-modeling/badge.svg?sanitize=true&#34; alt=&#34;Docs.rs&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;integrated modeling algorithms by geometry and topology&lt;/p&gt; &#xA;&lt;h3&gt;truck-shapeops &lt;a href=&#34;https://crates.io/crates/truck-shapeops&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/truck-shapeops.svg?sanitize=true&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/truck-shapeops&#34;&gt;&lt;img src=&#34;https://docs.rs/truck-shapeops/badge.svg?sanitize=true&#34; alt=&#34;Docs.rs&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Provides boolean operations to Solid&lt;/p&gt; &#xA;&lt;h3&gt;truck-platform &lt;a href=&#34;https://crates.io/crates/truck-platform&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/truck-platform.svg?sanitize=true&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/truck-platform&#34;&gt;&lt;img src=&#34;https://docs.rs/truck-platform/badge.svg?sanitize=true&#34; alt=&#34;Docs.rs&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;graphic utility library based on wgpu&lt;/p&gt; &#xA;&lt;h3&gt;truck-rendimpl &lt;a href=&#34;https://crates.io/crates/truck-rendimpl&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/truck-rendimpl.svg?sanitize=true&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/truck-rendimpl&#34;&gt;&lt;img src=&#34;https://docs.rs/truck-rendimpl/badge.svg?sanitize=true&#34; alt=&#34;Docs.rs&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;visualization of shape and polygon mesh based on platform&lt;/p&gt; &#xA;&lt;h3&gt;truck-js&lt;/h3&gt; &#xA;&lt;p&gt;Javascript wrapper of truck.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ricosjp/truck/master/dependencies.svg?sanitize=true&#34; alt=&#34;dependencies&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Tutorials&lt;/h2&gt; &#xA;&lt;p&gt;There are some learning resources for using truck v0.1.x series.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ricos.gitlab.io/truck-tutorial/v0.1/&#34;&gt;truck-tutorial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ricos.gitlab.io/truck-tutorial-ja/v0.1/&#34;&gt;truck-tutorial-ja&lt;/a&gt; (Japanese version)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ricosjp/truck-tutorial-code/tree/v0.1&#34;&gt;truck-tutorial-code&lt;/a&gt; (pre-created sample code)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>