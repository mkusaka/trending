<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-28T01:32:38Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>wintermute-cell/ngrrram</title>
    <updated>2024-05-28T01:32:38Z</updated>
    <id>tag:github.com,2024-05-28:/wintermute-cell/ngrrram</id>
    <link href="https://github.com/wintermute-cell/ngrrram" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A TUI tool to help you type faster and learn new layouts. Includes a free cat.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ngrrram&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;ngrrram&lt;/code&gt; is a CLI tool to practice typing ngrams (&lt;code&gt;n&lt;/code&gt; adjacent symbols in particular order) to improve your typing speed and/or learn new keyboard layouts effectively.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wintermute-cell/ngrrram/master/.github/showcase.gif&#34; alt=&#34;a showcase of the ngrrram ui&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Certain letter combination occur a lot more often than others, thus practicing these in particular makes sense. This type of practice is often recommended for example by &lt;a href=&#34;https://www.youtube.com/watch?v=sI-a64EVPPU&#34;&gt;Ben Vallack&lt;/a&gt; and Josh Kaufman, who &lt;a href=&#34;https://first20hours.com&#34;&gt;learned Colemak in just 20 hours&lt;/a&gt; making strong use of ngrams.&lt;/p&gt; &#xA;&lt;p&gt;There already exists a good tool for this type of practice called &lt;a href=&#34;https://github.com/ranelpadon/ngram-type&#34;&gt;ngram-type&lt;/a&gt;. This tool is &lt;em&gt;heavily&lt;/em&gt; inspired by &lt;code&gt;ngram-type&lt;/code&gt; and I want to thank Ranel Padon for creating it.&lt;/p&gt; &#xA;&lt;p&gt;However, ngram-type does not support emulating different keyboard layouts, which I found important so I would not have to switch my whole system to a layout I was still learning.&lt;/p&gt; &#xA;&lt;p&gt;Also, some people might prefer local/offline CLI based solutions over web based ones.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Releases&lt;/h3&gt; &#xA;&lt;p&gt;Precompiled &lt;a href=&#34;https://github.com/wintermute-cell/ngrrram/releases&#34;&gt;releases&lt;/a&gt; for linux, windows and macos are available.&lt;/p&gt; &#xA;&lt;h3&gt;From Source&lt;/h3&gt; &#xA;&lt;p&gt;Make sure you have the rust tooling installed, then simply run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The executable will then be located at &lt;code&gt;./target/release/ngrrram&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Looking for help packaging!&lt;/h3&gt; &#xA;&lt;p&gt;For now &lt;code&gt;ngrrram&lt;/code&gt; is not available in any package repo. If you&#39;d like to help by packaging for your platform, I&#39;d gladly accept!&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;ngrrram&lt;/code&gt; is not very complex. It offers a few customization options as command flags, but starts with the recommended defaults if unconfigured.&lt;/p&gt; &#xA;&lt;p&gt;Options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--n &amp;lt;2|3|4|w|FILENAME&amp;gt;       use bigrams(2) trigrams(3) tetragrams(4) or words(w), or specify your own comma separated wordlist as a file.&#xA;--top &amp;lt;1-200&amp;gt;                use the top X ngrams ordered by usage.&#xA;--combi &amp;lt;1-200&amp;gt;              how many different ngrams to use in a single lesson.&#xA;--rep &amp;lt;number&amp;gt;               how often to repeat *each* different ngram in a lesson.&#xA;--wpm &amp;lt;number&amp;gt;               the wpm threshold at which the lesson is considered a success.&#xA;--acc &amp;lt;0-100&amp;gt;                the accuracy in percent at which the lesson is considered a success.&#xA;--emu_in &amp;lt;layout&amp;gt;            see section (## Layout Emulation).&#xA;--emu_out &amp;lt;layout&amp;gt;           see section (## Layout Emulation).&#xA;--nokb                       pass this flag to disable the keyboard layout display.&#xA;--cat                        the most important flag. don&#39;t practice alone.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you start &lt;code&gt;ngrrram&lt;/code&gt; without parameters, it uses these recommended defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ngrrram --n 2 --top 50 --combi 2 --rep 3 --wpm 40 --acc 100&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Layout Emulation&lt;/h2&gt; &#xA;&lt;p&gt;To emulate a different keyboard layout in &lt;code&gt;ngrrram&lt;/code&gt;, you must pass the flags &lt;code&gt;--emu_in&lt;/code&gt; and &lt;code&gt;--emu_out&lt;/code&gt;, the first one describing your current layout, and the second one being the one you want to emulate.&lt;/p&gt; &#xA;&lt;p&gt;Available layouts are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;qwerty&lt;/code&gt; (Qwerty)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;qwertz&lt;/code&gt; (Qwertz)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;azerty&lt;/code&gt; (Azerty)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dvorak&lt;/code&gt; (Dvorak)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;colemak&lt;/code&gt; (Colemak)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;colemakdh&lt;/code&gt; (ColemakDH)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Having to provide an input layout is sub-optimal. I&#39;m not sure how to get layout independant scancodes in rust; Could not get &lt;code&gt;device_query&lt;/code&gt; to work. If you know a solution, please tell me.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Random Notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The WPM timer for each lesson only starts once you type the first letter of that lesson; no need to stress.&lt;/li&gt; &#xA; &lt;li&gt;Every 5 non-space characters are considered a &#34;word&#34; for the WPM calculation. Otherwise WPM would unnaturally skyrocket with smaller ngrams.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Slowerzs/PPLSystem</title>
    <updated>2024-05-28T01:32:38Z</updated>
    <id>tag:github.com,2024-05-28:/Slowerzs/PPLSystem</id>
    <link href="https://github.com/Slowerzs/PPLSystem" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PPLSystem&lt;/h1&gt; &#xA;&lt;p&gt;This is a proof of concept implementation of the technique described in &lt;a href=&#34;https://blog.slowerzs.net/posts/pplsystem&#34;&gt;this blog post&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It creates a livedump of the machine through &lt;code&gt;NtDebugSystemControl&lt;/code&gt; to extract the COM secret and context, to then inject inside this process.&lt;/p&gt; &#xA;&lt;p&gt;The livedump might slow down or freeze the machine for a couple of seconds.&lt;/p&gt; &#xA;&lt;p&gt;The tool can be built using: &lt;code&gt;cargo build --release&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;pplsystem.exe --dll &amp;lt;path to the unsigned DLL to load&amp;gt; --dump &amp;lt;Full path where the dump file will be written&amp;gt; --pid &amp;lt;PID of the process to inject&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Slowerzs/PPLSystem/main/images/pplsystem_inject.png&#34; alt=&#34;Image of the exploitation&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This proof of concept implements the mapping of an unsigned DLL inside a &lt;em&gt;PPL&lt;/em&gt; process, however, no new thread is created.&lt;/p&gt; &#xA;&lt;p&gt;For some reason, in a virtual machine, I&#39;ve found that &lt;code&gt;services.exe&lt;/code&gt; does not always initialize COM. In such cases, injection does not work. It works on other &lt;em&gt;PPL&lt;/em&gt; process who do initalize COM.&lt;/p&gt; &#xA;&lt;p&gt;I haven&#39;t faced this issue on a physical machine.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;James Forshaw for the article &lt;a href=&#34;https://googleprojectzero.blogspot.com/2018/11/injecting-code-into-windows-protected.html&#34;&gt;original article&lt;/a&gt; on using COM remoting to inject into other processes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://x.com/0vercl0k&#34;&gt;Axel Souchet&lt;/a&gt; for his implementation of &lt;a href=&#34;https://github.com/0vercl0k/kdmp-parser/tree/master&#34;&gt;kdmp-parser&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://x.com/modexpblog&#34;&gt;modexp&lt;/a&gt; for the implemenation of &lt;a href=&#34;https://github.com/mdsecactivebreach/com_inject/&#34;&gt;com_inject&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>