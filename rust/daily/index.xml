<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-19T01:35:05Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Canop/bacon</title>
    <updated>2025-01-19T01:35:05Z</updated>
    <id>tag:github.com,2025-01-19:/Canop/bacon</id>
    <link href="https://github.com/Canop/bacon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;background code checker&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Canop/bacon/main/img/logo-text.png?raw=true&#34; alt=&#34;bacon&#34; title=&#34;bacon&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crates.io/crates/bacon&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/bacon.svg?sanitize=true&#34; alt=&#34;Latest Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dystroy.org/bacon&#34;&gt;&lt;img src=&#34;https://dystroy.org/dystroy-doc-pink-shield.svg?sanitize=true&#34; alt=&#34;site&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://miaou.dystroy.org/4683?bacon&#34;&gt;&lt;img src=&#34;https://dystroy.org/chat-shield.svg?sanitize=true&#34; alt=&#34;Chat on Miaou&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.gnu.org/licenses/agpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-AGPL_v3-blue.svg?sanitize=true&#34; alt=&#34;License: AGPL v3&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;bacon&lt;/strong&gt; is a background code checker.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s designed for minimal interaction so that you can just let it run, alongside your editor, and be notified of warnings, errors, or test failures in your Rust code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Canop/bacon/main/doc/screenshot.png&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;strong&gt;&lt;a href=&#34;https://dystroy.org/bacon&#34;&gt;bacon website&lt;/a&gt;&lt;/strong&gt; is a complete guide.&lt;/p&gt; &#xA;&lt;p&gt;Below is only a short overview.&lt;/p&gt; &#xA;&lt;h2&gt;install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install --locked bacon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run this command too if you want to update bacon. Configuration has always been retro-compatible so you won&#39;t lose anything.&lt;/p&gt; &#xA;&lt;h2&gt;check the current project&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;bacon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s how you&#39;ll usually launch bacon, because other jobs like &lt;code&gt;test&lt;/code&gt;, &lt;code&gt;clippy&lt;/code&gt;, &lt;code&gt;doc&lt;/code&gt;, your own ones, are just a key away: You&#39;ll hit &lt;kbd&gt;c&lt;/kbd&gt; to see Clippy warnings, &lt;kbd&gt;t&lt;/kbd&gt; for the tests, &lt;kbd&gt;d&lt;/kbd&gt; to open the documentation, etc.&lt;/p&gt; &#xA;&lt;h2&gt;check another project&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;bacon --path ../broot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bacon ../broot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;check all targets (tests, examples, benches, etc)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;bacon --job check-all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When there&#39;s no ambiguity, you may omit the &lt;code&gt;--job&lt;/code&gt; part:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bacon check-all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;run clippy instead of cargo check&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;bacon clippy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will run against all targets like &lt;code&gt;check-all&lt;/code&gt; does.&lt;/p&gt; &#xA;&lt;h2&gt;run tests&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;bacon test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or &lt;code&gt;bacon nextest&lt;/code&gt; if you&#39;re a nextest user.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Canop/bacon/main/doc/test.png&#34; alt=&#34;bacon test&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;When there&#39;s a failure, hit &lt;kbd&gt;f&lt;/kbd&gt; to restrict the job to the failing test. Hit &lt;kbd&gt;esc&lt;/kbd&gt; to get back to all tests.&lt;/p&gt; &#xA;&lt;h2&gt;define your own jobs&lt;/h2&gt; &#xA;&lt;p&gt;First create a &lt;code&gt;bacon.toml&lt;/code&gt; file by running&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bacon --init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This file already contains some standard jobs. Add your own, for example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[jobs.check-win]&#xA;command = [&#34;cargo&#34;, &#34;check&#34;, &#34;--target&#34;, &#34;x86_64-pc-windows-gnu&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[jobs.check-examples]&#xA;command = [&#34;cargo&#34;, &#34;check&#34;, &#34;--examples&#34;]&#xA;watch = [&#34;examples&#34;] # src is implicitly included&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bacon check-win&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bacon check-examples&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;bacon.toml&lt;/code&gt; file may evolve with the features and settings of your project and should be added to source control.&lt;/p&gt; &#xA;&lt;h2&gt;Licences&lt;/h2&gt; &#xA;&lt;p&gt;Bacon is licenced under &lt;a href=&#34;https://www.gnu.org/licenses/agpl-3.0.en.html&#34;&gt;AGPL-3.0&lt;/a&gt;. You&#39;re free to use it to compile the Rust projects of your choice, even commercial.&lt;/p&gt; &#xA;&lt;p&gt;The logo is designed by &lt;a href=&#34;https://petervaro.com&#34;&gt;Peter Varo&lt;/a&gt; and licensed under a &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0&#34;&gt;Creative Commons Attribution-ShareAlike 4.0 International License&lt;/a&gt;. &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0&#34;&gt;&lt;img src=&#34;https://i.creativecommons.org/l/by-sa/4.0/80x15.png&#34; alt=&#34;license&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>commonwarexyz/monorepo</title>
    <updated>2025-01-19T01:35:05Z</updated>
    <id>tag:github.com,2025-01-19:/commonwarexyz/monorepo</id>
    <link href="https://github.com/commonwarexyz/monorepo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Commonware Library Primitives and Examples&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;commonware&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/commonwarexyz/monorepo/main/LICENSE-MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/commonwarexyz/monorepo/main/LICENSE-APACHE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;License: Apache 2.0&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/commonwarexyz/monorepo/discussions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/discussions/commonwarexyz/monorepo?label=Discussions&amp;amp;color=purple&#34; alt=&#34;Discussions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/commonwarexyz/monorepo&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/commonwarexyz/monorepo/graph/badge.svg?token=847TBNH49H&#34; alt=&#34;Coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Primitives&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Primitives are designed for deployment in adversarial environments. If you find an exploit, please refer to our &lt;a href=&#34;https://raw.githubusercontent.com/commonwarexyz/monorepo/main/SECURITY.md&#34;&gt;security policy&lt;/a&gt; before disclosing it publicly (an exploit may equip a malicious party to attack users of a primitive).&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/commonwarexyz/monorepo/main/consensus/README.md&#34;&gt;consensus&lt;/a&gt;: Order opaque messages in a Byzantine environment.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/commonwarexyz/monorepo/main/cryptography/README.md&#34;&gt;cryptography&lt;/a&gt;: Generate keys, sign arbitrary messages, and deterministically verify signatures.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/commonwarexyz/monorepo/main/p2p/README.md&#34;&gt;p2p&lt;/a&gt;: Communicate with authenticated peers over encrypted connections.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/commonwarexyz/monorepo/main/runtime/README.md&#34;&gt;runtime&lt;/a&gt;: Execute asynchronous tasks with a configurable scheduler.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/commonwarexyz/monorepo/main/storage/README.md&#34;&gt;storage&lt;/a&gt;: Persist and retrieve data from an abstract store.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/commonwarexyz/monorepo/main/stream/README.md&#34;&gt;stream&lt;/a&gt;: Exchange messages over arbitrary transport.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Examples may include insecure code (i.e. deriving keypairs from an integer arguments) to make them easier to run. Examples are not intended to be used directly in production.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/commonwarexyz/monorepo/main/examples/bridge/README.md&#34;&gt;bridge&lt;/a&gt;: Send succinct consensus certificates between two networks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/commonwarexyz/monorepo/main/examples/chat/README.md&#34;&gt;chat&lt;/a&gt;: Send encrypted messages to a group of friends.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/commonwarexyz/monorepo/main/examples/log/README.md&#34;&gt;log&lt;/a&gt;: Commit to a secret log and agree to its hash.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/commonwarexyz/monorepo/main/examples/vrf/README.md&#34;&gt;vrf&lt;/a&gt;: Generate bias-resistant randomness with untrusted contributors.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Miscellaneous&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Sometimes, we opt to maintain software that is neither a primitive nor an example to make it easier to interact with the Commonware Library. Unless otherwise indicated, code in this section is intended to be used in production. Please refer to our &lt;a href=&#34;https://raw.githubusercontent.com/commonwarexyz/monorepo/main/SECURITY.md&#34;&gt;security policy&lt;/a&gt; before disclosing an exploit publicly.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/commonwarexyz/monorepo/main/docs&#34;&gt;docs&lt;/a&gt;: Access information about Commonware at &lt;a href=&#34;https://commonware.xyz&#34;&gt;https://commonware.xyz&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/commonwarexyz/monorepo/main/macros/README.md&#34;&gt;macros&lt;/a&gt;: Augment the development of primitives with procedural macros.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/commonwarexyz/monorepo/main/utils/README.md&#34;&gt;utils&lt;/a&gt;: Leverage common functionality across multiple primitives.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;This repository is dual-licensed under both the &lt;a href=&#34;https://raw.githubusercontent.com/commonwarexyz/monorepo/main/LICENSE-APACHE&#34;&gt;Apache 2.0&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/commonwarexyz/monorepo/main/LICENSE-MIT&#34;&gt;MIT&lt;/a&gt; licenses. You may choose either license when employing this code.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We encourage external contributors to submit issues and pull requests to the Commonware Library. To learn more, please refer to our &lt;a href=&#34;https://raw.githubusercontent.com/commonwarexyz/monorepo/main/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;All work is coordinated via the &lt;a href=&#34;https://github.com/orgs/commonwarexyz/projects/2&#34;&gt;tracker&lt;/a&gt;. If something in &lt;a href=&#34;https://github.com/orgs/commonwarexyz/projects/2/views/3&#34;&gt;the backlog&lt;/a&gt; looks particularly useful, leave a comment so we can prioritize it!&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;If you have any questions about using the Commonware Library, we encourage you to post in &lt;a href=&#34;https://github.com/commonwarexyz/monorepo/discussions&#34;&gt;GitHub Discussions&lt;/a&gt;. We&#39;re happy to help!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>chrivers/bifrost</title>
    <updated>2025-01-19T01:35:05Z</updated>
    <id>tag:github.com,2025-01-19:/chrivers/bifrost</id>
    <link href="https://github.com/chrivers/bifrost" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Hue Bridge Emulator&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chrivers/bifrost/master/doc/logo-title-640x160.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Bifrost Bridge&lt;/h1&gt; &#xA;&lt;p&gt;Bifrost enables you to emulate a Philips Hue Bridge to control lights, groups and scenes from &lt;a href=&#34;https://www.zigbee2mqtt.io/&#34;&gt;Zigbee2Mqtt&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are already familiar with &lt;a href=&#34;https://github.com/diyhue/diyHue&#34;&gt;DiyHue&lt;/a&gt;, you might like to read the &lt;a href=&#34;https://raw.githubusercontent.com/chrivers/bifrost/master/doc/comparison-with-diyhue.md&#34;&gt;comparison with DiyHue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Questions, feedback, comments? Join us on discord&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/YvBKjHBJpA&#34;&gt;&lt;img src=&#34;https://discordapp.com/api/guilds/1276604041727578144/widget.png?style=banner2&#34; alt=&#34;Join Valhalla on Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation guide&lt;/h2&gt; &#xA;&lt;p&gt;There are currently three ways you can install Bifrost:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chrivers/bifrost/master/#manual&#34;&gt;Install manually&lt;/a&gt; from source (recommended)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chrivers/bifrost/master/#docker&#34;&gt;Install it via Docker&lt;/a&gt; for container-based deployment.&lt;/li&gt; &#xA; &lt;li&gt;Install as Home Assistant Add-on. Please see the &lt;a href=&#34;https://github.com/chrivers/bifrost-hassio&#34;&gt;bifrost-hassio&lt;/a&gt; project for more information.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;To install Bifrost from source, you will need the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The rust language toolchain (&lt;a href=&#34;https://rustup.rs/&#34;&gt;https://rustup.rs/&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;At least one zigbee2mqtt server to connect to&lt;/li&gt; &#xA; &lt;li&gt;The MAC address of the network interface you want to run the server on&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;When you have these things available, install bifrost:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install --git https://github.com/chrivers/bifrost.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After Cargo has finished downloading, compiling, and installing Bifrost, you should have the &#34;bifrost&#34; command available to you.&lt;/p&gt; &#xA;&lt;p&gt;The last step is to create a configuration for bifrost, &lt;code&gt;config.yaml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a minimal example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bridge:&#xA;  name: Bifrost&#xA;  mac: 00:11:22:33:44:55&#xA;  ipaddress: 10.12.0.20&#xA;  netmask: 255.255.255.0&#xA;  gateway: 10.12.0.1&#xA;  timezone: Europe/Copenhagen&#xA;&#xA;z2m:&#xA;  server1:&#xA;    url: ws://10.0.0.100:8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please adjust this as needed. Particularly, make &lt;strong&gt;sure&lt;/strong&gt; the &#34;mac:&#34; field matches a mac address on the network interface you want to serve requests from.&lt;/p&gt; &#xA;&lt;p&gt;Make sure to read the &lt;a href=&#34;https://raw.githubusercontent.com/chrivers/bifrost/master/doc/config-reference.md&#34;&gt;configuration reference&lt;/a&gt; to learn how to adjust the configuration file.&lt;/p&gt; &#xA;&lt;p&gt;This mac address if used to generate a self-signed certificate, so the Hue App will recognize this as a &#34;real&#34; Hue Bridge. If the mac address is incorrect, this will not work. &lt;a href=&#34;https://raw.githubusercontent.com/chrivers/bifrost/master/doc/how-to-find-mac-linux.md&#34;&gt;How to find your mac address&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Now you can start Bifrost. Simple start the &#34;bifrost&#34; command from the same directory where you put the &lt;code&gt;config.yaml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bifrost&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At this point, the server should start: (log timestamps omitted for clarity)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  ===================================================================&#xA;   ███████████   ███     ██████                              █████&#xA;  ░░███░░░░░███ ░░░     ███░░███                            ░░███&#xA;   ░███    ░███ ████   ░███ ░░░  ████████   ██████   █████  ███████&#xA;   ░██████████ ░░███  ███████   ░░███░░███ ███░░███ ███░░  ░░░███░&#xA;   ░███░░░░░███ ░███ ░░░███░     ░███ ░░░ ░███ ░███░░█████   ░███&#xA;   ░███    ░███ ░███   ░███      ░███     ░███ ░███ ░░░░███  ░███ ███&#xA;   ███████████  █████  █████     █████    ░░██████  ██████   ░░█████&#xA;  ░░░░░░░░░░░  ░░░░░  ░░░░░     ░░░░░      ░░░░░░  ░░░░░░     ░░░░░&#xA;  ===================================================================&#xA;&#xA;  DEBUG bifrost &amp;gt; Configuration loaded successfully&#xA;  DEBUG bifrost::server::certificate &amp;gt; Found existing certificate for bridge id [001122fffe334455]&#xA;  DEBUG bifrost::state               &amp;gt; Existing state file found, loading..&#xA;  INFO  bifrost::mdns                &amp;gt; Registered service bifrost-001122334455._hue._tcp.local.&#xA;  INFO  bifrost                      &amp;gt; Serving mac [00:11:22:33:44:55]&#xA;  DEBUG bifrost::state               &amp;gt; Loading certificate from [cert.pem]&#xA;  INFO  bifrost::server              &amp;gt; http listening on 10.12.0.20:80&#xA;  INFO  bifrost::server              &amp;gt; https listening on 10.12.0.20:443&#xA;  INFO  bifrost::z2m                 &amp;gt; [server1] Connecting to ws://10.0.0.100:8080&#xA;  DEBUG tungstenite:&lt;span&gt;🤝&lt;/span&gt;:client &amp;gt; Client handshake done.&#xA;  DEBUG tungstenite:&lt;span&gt;🤝&lt;/span&gt;:client &amp;gt; Client handshake done.&#xA;  DEBUG bifrost::z2m                   &amp;gt; [server1] Ignoring unsupported device Coordinator&#xA;  INFO  bifrost::z2m                   &amp;gt; [server1] Adding light IeeeAddress(000000fffe111111): [office_1] (TRADFRI bulb GU10 CWS 345lm)&#xA;  INFO  bifrost::z2m                   &amp;gt; [server1] Adding light IeeeAddress(222222fffe333333): [office_2] (TRADFRI bulb GU10 CWS 345lm)&#xA;  INFO  bifrost::z2m                   &amp;gt; [server1] Adding light IeeeAddress(444444fffe555555): [office_3] (TRADFRI bulb GU10 CWS 345lm)&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The log output shows Bifrost talking with zigbee2mqtt, and finding some lights to control (office_{1,2,3}).&lt;/p&gt; &#xA;&lt;p&gt;At this point, you&#39;re running a Bifrost bridge.&lt;/p&gt; &#xA;&lt;p&gt;The Philips Hue app should be able to find it on your network!&lt;/p&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] Docker support was &lt;a href=&#34;https://github.com/chrivers/bifrost/pull/2&#34;&gt;merged recently&lt;/a&gt;. If you encounter any bugs, or have suggestions, feel free to leave your feedback &lt;a href=&#34;https://raw.githubusercontent.com/chrivers/bifrost/master/#problems-questions-feedback&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To install Bifrost with Docker, you will need the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;At least one zigbee2mqtt server to connect to&lt;/li&gt; &#xA; &lt;li&gt;The MAC address of the network interface you want to run the server on&lt;/li&gt; &#xA; &lt;li&gt;A running &lt;a href=&#34;https://docs.docker.com/engine/install/&#34;&gt;Docker&lt;/a&gt; instance with &lt;a href=&#34;https://docs.docker.com/compose/install/&#34;&gt;Docker-Compose&lt;/a&gt; installed&lt;/li&gt; &#xA; &lt;li&gt;Have &lt;code&gt;git&lt;/code&gt; installed to clone this repository&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;When you have these things available, you can install Bifrost by running these commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/chrivers/bifrost&#xA;cd bifrost&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then rename or copy our &lt;code&gt;config.example.yaml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cp config.example.yaml config.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And edit it with your favorite editor to your liking (see &lt;a href=&#34;https://raw.githubusercontent.com/chrivers/bifrost/master/doc/config-reference.md&#34;&gt;configuration reference&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;If you want to put your configuration file or the certificates Bifrost creates somewhere else, you also need to adjust the mount paths in the &lt;code&gt;docker-compose.yaml&lt;/code&gt;. Otherwise, just leave the default values.&lt;/p&gt; &#xA;&lt;p&gt;Now you are ready to run the app with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will build and then start the app on your Docker instance.&lt;/p&gt; &#xA;&lt;p&gt;To view the logs, use a tool like &lt;a href=&#34;https://www.portainer.io/&#34;&gt;Portainer&lt;/a&gt; or run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker logs bifrost&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Configuration&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/chrivers/bifrost/master/doc/config-reference.md&#34;&gt;configuration reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Problems? Questions? Feedback?&lt;/h1&gt; &#xA;&lt;p&gt;Please note: Bifrost is a very young project. Some things are incomplete, and/or broken when they shouldn&#39;t be.&lt;/p&gt; &#xA;&lt;p&gt;Consider joining us on discord:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/YvBKjHBJpA&#34;&gt;&lt;img src=&#34;https://discordapp.com/api/guilds/1276604041727578144/widget.png?style=banner2&#34; alt=&#34;Join Valhalla on Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have any problems, questions or suggestions, feel free to &lt;a href=&#34;https://github.com/chrivers/bifrost/issues&#34;&gt;create an issue&lt;/a&gt; on this project.&lt;/p&gt; &#xA;&lt;p&gt;Also, pull requests are always welcome!&lt;/p&gt;</summary>
  </entry>
</feed>