<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-11T01:44:48Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>shadyfennec/stupidalloc</title>
    <updated>2023-07-11T01:44:48Z</updated>
    <id>tag:github.com,2023-07-11:/shadyfennec/stupidalloc</id>
    <link href="https://github.com/shadyfennec/stupidalloc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A stupid Rust memory allocator&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Stupid alloc - what if memory allocation was annoying&lt;/h1&gt; &#xA;&lt;p&gt;Mostly a weird exercise in how much you can make a memory allocator suck.&lt;/p&gt; &#xA;&lt;p&gt;This allocator will create and open files to use as the allocation&#39;s data, through a memory map. If you enable the &lt;code&gt;interactive&lt;/code&gt; feature, it will even prompt you for a file name every time the program allocates something! Cool!&lt;/p&gt; &#xA;&lt;h2&gt;How to use it&lt;/h2&gt; &#xA;&lt;p&gt;don&#39;t&lt;/p&gt; &#xA;&lt;h2&gt;No but really how does one use this&lt;/h2&gt; &#xA;&lt;p&gt;Using &lt;code&gt;cargo add&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cargo add stupidalloc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Manually specifying the dependency in &lt;code&gt;Cargo.toml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[dependencies]&#xA;stupidalloc = { version = &#34;0.1.0&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;The &lt;code&gt;interactive&lt;/code&gt; feature&lt;/h3&gt; &#xA;&lt;p&gt;The crate comes with a feature, &lt;code&gt;interactive&lt;/code&gt;, that will open confirmation and file picker dialog windows instead of silently opening and allocating memory. Enable it at your own risk, as sometimes dialogs are unavailable. This crate uses &lt;a href=&#34;https://crates.io/crates/native-dialog&#34;&gt;&lt;code&gt;native-dialog&lt;/code&gt;&lt;/a&gt; for this feature.&lt;/p&gt; &#xA;&lt;h2&gt;Using the allocator&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can use it as the global allocator of your program, but it may lead to wonkiness and weird stuff like prompting for allocations before &lt;code&gt;main()&lt;/code&gt; is executed!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use stupidalloc::StupidAlloc;&#xA;&#xA;#[global_allocator]&#xA;static GLOBAL: StupidAlloc = StupidAlloc;&#xA;&#xA;fn main() {&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;By using the &lt;a href=&#34;https://doc.rust-lang.org/beta/unstable-book/library-features/allocator-api.html&#34;&gt;&lt;code&gt;allocator_api&lt;/code&gt;&lt;/a&gt; nightly feature, you can selectively allocate single objects with this allocator:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;// Requires nightly&#xA;#![feature(allocator_api)]&#xA;&#xA;use stupidalloc::StupidAlloc;&#xA;&#xA;fn main() {&#xA;    let normal_box = Box::new(1);&#xA;&#xA;    let stupid_box = Box::new_in(1, StupidAlloc);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A cool usage is to stop the execution of your program (through your favourite &lt;code&gt;stdin&lt;/code&gt; read) and then go look at the allocation files with a hex editor (might I recommend &lt;a href=&#34;https://github.com/sharkdp/hexyl&#34;&gt;Hexyl&lt;/a&gt;?)&lt;/p&gt; &#xA;&lt;p&gt;To help you with that, the allocator exposes a few helper functions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;StupidAlloc.state()&lt;/code&gt; returns a &lt;code&gt;HashMap&lt;/code&gt; where the key is the address of the memory map (and so the address of the allocated object), and the value is a &lt;code&gt;PathBuf&lt;/code&gt; to the associated file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;StupidAlloc&lt;/code&gt; implements &lt;code&gt;fmt::Display&lt;/code&gt;, so running &lt;code&gt;println!(&#34;{StupidAlloc}&#34;)&lt;/code&gt; will print a lovely summary of all the allocations currently being tracked.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;StupidAlloc.file_of(x)&lt;/code&gt; will return the file associated to the linked object, if it exists. Obviously this only works with stuff allocated with the stupid allocator. An example of use:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;// Still requires nightly&#xA;#![feature(allocator_api)]&#xA;&#xA;use stupidalloc::StupidAlloc;&#xA;&#xA;fn main() {&#xA;    let stupid_box = Box::new_in(1, StupidAlloc);&#xA;&#xA;    // Since it&#39;s a Box&amp;lt;i32&amp;gt;, we need to pass &amp;amp;i32 to the function to get the &#xA;    // address of where the integer is.&#xA;    let file = StupidAlloc.file_of(&amp;amp;*stupid_box).unwrap();&#xA;&#xA;    // Go nuts with it!&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another cool usage is to be able to see how stuff is laid out in memory, without having to use memory viewers or complicated GDB syntax!&lt;/p&gt; &#xA;&lt;p&gt;For example, ever wanted to see how a &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; is organised in memory?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use stupidalloc::StupidAlloc;&#xA;&#xA;#[global_allocator]&#xA;static GLOBAL: StupidAlloc = StupidAlloc;&#xA;&#xA;fn main() {&#xA;    let boxed_vec = Box::new(vec![1, 2, 3]);&#xA;&#xA;    println!(&#34;{}&#34;, StupidAlloc.file_of(&amp;amp;*boxed_vec).unwrap().display());&#xA;&#xA;    // Somehow pause execution&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This program will print the path of the allocation file for the &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; struct (and not the allocation for the data of the &lt;code&gt;Vec&lt;/code&gt;, because then we&#39;d only see the numbers 1, 2, 3!). Open it in a hex viewer, and you can try and guess what each field is, and try to corroborate it with the &lt;a href=&#34;https://doc.rust-lang.org/stable/std/vec/struct.Vec.html&#34;&gt;struct&#39;s definition&lt;/a&gt;. If your system allows you to (I know Windows can be a bit restrictive), try and modify the length and/or capacity fields and see what happens afterwards!&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;I do not claim that this library is perfect and free of any fault. Here there be typos and mistakes and examples that I didn&#39;t test and don&#39;t work. Send an issue if something&#39;s wrong!&lt;/li&gt; &#xA; &lt;li&gt;If you don&#39;t have file picker / file dialog capabilities (minimal i3 installation, TTY-only, ...), &lt;code&gt;interactivity&lt;/code&gt; won&#39;t work.&lt;/li&gt; &#xA; &lt;li&gt;I only tested this on Windows and Linux. If it doesn&#39;t work on MacOS or any other OS, sorry. If it doesn&#39;t work for you on Windows or Linux: weird! Hit me up.&lt;/li&gt; &#xA; &lt;li&gt;If you mess with the memory files in any way you&#39;ll mess up with your program memory, but seeing as this is topologically the same as messing with &lt;code&gt;/proc/mem&lt;/code&gt; I consider this a cool feature.&lt;/li&gt; &#xA; &lt;li&gt;I&#39;m probably going to work on this &lt;em&gt;a little bit more&lt;/em&gt; to add some quality-of-life features, but that&#39;s it. It&#39;s a shitpost, not a serious library.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;(old) Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/shadyfennec/stupidalloc/assets/68575248/f2490dc1-8412-4450-9359-7387f79682ea&#34;&gt;https://github.com/shadyfennec/stupidalloc/assets/68575248/f2490dc1-8412-4450-9359-7387f79682ea&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>utilForever/game-developer-roadmap</title>
    <updated>2023-07-11T01:44:48Z</updated>
    <id>tag:github.com,2023-07-11:/utilForever/game-developer-roadmap</id>
    <link href="https://github.com/utilForever/game-developer-roadmap" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Roadmap to becoming a game developer in 2022&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;&lt;strong&gt;ðŸŽ® Game Developer Roadmap ðŸŽ®&lt;/strong&gt;&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Roadmap to becoming a game developer in 2022, inspired by &lt;a href=&#34;https://github.com/kamranahmedse/developer-roadmap&#34;&gt;developer-roadmap&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Below you find a set of charts demonstrating the paths that you can take and the technologies that you would want to adopt in order to become a frontend, backend or a devops. I made these charts for an old professor of mine who wanted something to share with his college students to give them a perspective; sharing them here to help the community.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Check out my &lt;a href=&#34;https://github.com/utilForever&#34;&gt;Github&lt;/a&gt; and say &#34;hi&#34; on &lt;a href=&#34;https://twitter.com/utilForever&#34;&gt;Twitter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;&lt;strong&gt;Purpose of these Roadmaps&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The purpose of these roadmaps is to give you an idea about the landscape and to guide you if you are confused about what to learn next and not to encourage you to pick what is hip and trendy. You should grow some understanding of why one tool would be better suited for some cases than the other and remember hip and trendy never means best suited for the job.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;&lt;strong&gt;Note to Beginners&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;These roadmaps cover everything that is there to learn for the paths listed below. Don&#39;t feel overwhelmed, you don&#39;t need to learn it all in the beginning if you are just getting started.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;&lt;strong&gt;Acknowledgement&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/lynheo&#34;&gt;Lyn Heo&lt;/a&gt; for providing the content of server roadmap and &lt;a href=&#34;https://github.com/beomjungil&#34;&gt;Beomjun Gil&lt;/a&gt; for providing awesome social media preview.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;If you think that these can be improved in any way, please do suggest.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you want to see it as a dark theme, click &lt;a href=&#34;https://raw.githubusercontent.com/utilForever/game-developer-roadmap/main/README%20-%20Dark%20Theme.md&#34;&gt;this&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/utilForever/game-developer-roadmap/main/img/intro.png&#34; alt=&#34;Game Developr Roadmap Introduction&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Client Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/utilForever/game-developer-roadmap/main/img/client.png&#34; alt=&#34;Client Roadmap&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Server Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/utilForever/game-developer-roadmap/main/img/server.png&#34; alt=&#34;Server Roadmap&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ðŸš¦ Wrap Up&lt;/h2&gt; &#xA;&lt;p&gt;If you think any of the roadmaps can be improved, please do open a PR with any updates and submit any issues. Also, I will continue to improve this, so you might want to watch/star this repository to revisit.&lt;/p&gt; &#xA;&lt;h2&gt;ðŸ™Œ Contribution&lt;/h2&gt; &#xA;&lt;p&gt;The roadmaps are built using &lt;a href=&#34;https://balsamiq.com/products/mockups/&#34;&gt;Balsamiq&lt;/a&gt;. Project file can be found at &lt;code&gt;/project-files&lt;/code&gt; directory. To modify any of the roadmaps, open Balsamiq, click &lt;strong&gt;Project &amp;gt; Import &amp;gt; Mockup JSON&lt;/strong&gt;, it will open the roadmap for you, update it, upload and update the images in readme and create a PR.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open pull request with improvements&lt;/li&gt; &#xA; &lt;li&gt;Discuss ideas in issues&lt;/li&gt; &#xA; &lt;li&gt;Spread the word&lt;/li&gt; &#xA; &lt;li&gt;Reach out to me directly at &lt;a href=&#34;mailto:utilforever@gmail.com&#34;&gt;utilforever@gmail.com&lt;/a&gt; or &lt;a href=&#34;https://twitter.com/utilForever&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url/https/twitter.com/utilForever.svg?style=social&amp;amp;label=Follow%20%40utilForever&#34; alt=&#34;Twitter URL&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;img align=&#34;right&#34; src=&#34;http://opensource.org/trademarks/opensource/OSI-Approved-License-100x137.png&#34;&gt; &#xA;&lt;p&gt;The class is licensed under the &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;Copyright Â© 2017-2022 &lt;a href=&#34;http://www.github.com/utilForever&#34;&gt;Chris Ohk&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
</feed>