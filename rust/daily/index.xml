<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-17T01:32:34Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Sh1Yo/x8</title>
    <updated>2024-05-17T01:32:34Z</updated>
    <id>tag:github.com,2024-05-17:/Sh1Yo/x8</id>
    <link href="https://github.com/Sh1Yo/x8" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Hidden parameters discovery suite&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://twitter.com/sh1yo_&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/sh1yo_.svg?logo=twitter&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/Sh1Yo/x8&#34; alt=&#34;stars&#34;&gt; &lt;a href=&#34;https://github.com/sh1yo/x8/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/sh1yo/x8?color=%20%237fb3d5%20&#34; alt=&#34;issues&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sh1yo/x8/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/sh1yo/x8.svg?style=flat-square&#34; alt=&#34;Latest Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/x8&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/x8.svg?sanitize=true&#34; alt=&#34;crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/x8&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/d/x8?logo=rust&#34; alt=&#34;crates_downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sh1yo/x8/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/sh1yo/x8/total?label=downloads&amp;amp;logo=github&#34; alt=&#34;github_downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- ![lang](https://img.shields.io/github/languages/top/sh1yo/x8) --&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;x8&lt;/h1&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;Hidden parameters discovery suite written in Rust.&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/54232788/212553519-f4cdfb1c-f5f2-4238-a6a8-e9393b98b529.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The tool aids in identifying hidden parameters that could potentially be vulnerable or reveal interesting functionality that may be missed by other testers. Its high accuracy is achieved through line-by-line comparison of pages, comparison of response codes, and reflections.&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;The documentation that explains every feature can be accessed at &lt;a href=&#34;https://sh1yo.art/x8docs/&#34;&gt;https://sh1yo.art/x8docs/&lt;/a&gt;. The source of the documentation is located at &lt;a href=&#34;https://raw.githubusercontent.com/Sh1Yo/x8/main/docs.md&#34;&gt;/docs.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Tree&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sh1Yo/x8/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sh1Yo/x8/main/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sh1Yo/x8/main/#test-site&#34;&gt;Test site&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sh1Yo/x8/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sh1Yo/x8/main/#wordlists&#34;&gt;Wordlists&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sh1Yo/x8/main/#burp-suite-integration&#34;&gt;Burp Suite integration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sh1Yo/x8/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fast.&lt;/li&gt; &#xA; &lt;li&gt;Offers flexible request configuration through the use of templates and injection points.&lt;/li&gt; &#xA; &lt;li&gt;Highly scalable, capable of checking thousands of URLs per run.&lt;/li&gt; &#xA; &lt;li&gt;Provides higher accuracy compared to similar tools, especially in difficult cases.&lt;/li&gt; &#xA; &lt;li&gt;Capable of discovering parameters with non-random values, such as admin=true.&lt;/li&gt; &#xA; &lt;li&gt;Highly configurable with a wide range of customizable options.&lt;/li&gt; &#xA; &lt;li&gt;Achieves almost raw requests through external library modification.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Examples&lt;/h1&gt; &#xA;&lt;h4&gt;Check parameters in query&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;x8 -u &#34;https://example.com/&#34; -w &amp;lt;wordlist&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With default parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;x8 -u &#34;https://example.com/?something=1&#34; -w &amp;lt;wordlist&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;/?something=1&lt;/code&gt; equals to &lt;code&gt;/?something=1&amp;amp;%s&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Send parameters via body&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;x8 -u &#34;https://example.com/&#34; -X POST -w &amp;lt;wordlist&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with a custom body:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;x8 -u &#34;https://example.com/&#34; -X POST -b &#39;{&#34;x&#34;:{%s}}&#39; -w &amp;lt;wordlist&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;%s&lt;/code&gt; will be replaced with different parameters like &lt;code&gt;{&#34;x&#34;:{&#34;a&#34;:&#34;b3a1a&#34;, &#34;b&#34;:&#34;ce03a&#34;, ...}}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Check multiple urls in paralell&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;x8 -u &#34;https://example.com/&#34; &#34;https://4rt.one/&#34; -W0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Custom template&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;x8 -u &#34;https://example.com/&#34; --param-template &#34;user[%k]=%v&#34; -w &amp;lt;wordlist&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now every request would look like &lt;code&gt;/?user[a]=hg2s4&amp;amp;user[b]=a34fa&amp;amp;...&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Percent encoding&lt;/h4&gt; &#xA;&lt;p&gt;Sometimes parameters should be encoded. It is also possible:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;x8 -u &#34;https://example.com/?path=..%2faction.php%3f%s%23&#34; --encode -w &amp;lt;wordlist&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-http&#34;&gt;GET /?path=..%2faction.php%3fWTDa8%3Da7UOS%26rTIDA%3DexMFp...%23 HTTP/1.1&#xA;Host: example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Search for headers&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;x8 -u &#34;https://example.com&#34; --headers -w &amp;lt;wordlist&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Search for header values&lt;/h4&gt; &#xA;&lt;p&gt;You can also target single headers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;x8 -u &#34;https://example.com&#34; --headers -H &#34;Cookie: %s&#34; -w &amp;lt;wordlist&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Test site&lt;/h1&gt; &#xA;&lt;p&gt;You can check the tool and compare it with other tools on the following urls:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;https://4rt.one/level1&lt;/code&gt; (GET)&lt;/p&gt; &#xA;&lt;!-- `https://4rt.one/level2` (POST JSON) --&gt; &#xA;&lt;p&gt;&lt;code&gt;https://4rt.one/level3&lt;/code&gt; (GET)&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;USAGE:&#xA;    x8 [FLAGS] [OPTIONS]&#xA;&#xA;FLAGS:&#xA;        --append                       Append to the output file instead of overwriting it.&#xA;    -B                                 Equal to -x http://localhost:8080&#xA;        --check-binary                 Check the body of responses with binary content types&#xA;        --disable-additional-checks    Private&#xA;        --disable-colors&#xA;        --disable-custom-parameters    Do not automatically check parameters like admin=true&#xA;        --disable-progress-bar&#xA;        --disable-trustdns             Can solve some dns related problems&#xA;        --encode                       Encodes query or body before making a request, i.e &amp;amp; -&amp;gt; %26, = -&amp;gt; %3D&#xA;                                       List of chars to encode: &#34;, `, , &amp;lt;, &amp;gt;, &amp;amp;, #, ;, /, =, %&#xA;    -L, --follow-redirects             Follow redirections&#xA;        --force                        Force searching for parameters on pages &amp;gt; 25MB. Remove an error in case there&#39;s 1&#xA;                                       worker with --one-worker-per-host option.&#xA;    -h, --help                         Prints help information&#xA;        --headers                      Switch to header discovery mode.&#xA;                                       NOTE Content-Length and Host headers are automatically removed from the list&#xA;        --invert                       By default, parameters are sent within the body only in case PUT or POST methods&#xA;                                       are used.&#xA;                                       It&#39;s possible to overwrite this behavior by specifying the option&#xA;        --mimic-browser                Add default headers that browsers usually set.&#xA;        --one-worker-per-host          Multiple urls with the same host will be checked one after another,&#xA;                                       while urls with different hosts - are in parallel.&#xA;                                       Doesn&#39;t increase the number of workers&#xA;        --reflected-only               Disable page comparison and search for reflected parameters only.&#xA;        --remove-empty                 Skip writing to file outputs of url:method pairs without found parameters&#xA;        --replay-once                  If a replay proxy is specified, send all found parameters within one request.&#xA;        --strict                       Only report parameters that have changed the different parts of a page&#xA;        --test                         Prints request and response&#xA;    -V, --version                      Prints version information&#xA;        --verify                       Verify found parameters.&#xA;&#xA;OPTIONS:&#xA;    -b, --body &amp;lt;body&amp;gt;                                       Example: --body &#39;{&#34;x&#34;:{%s}}&#39;&#xA;                                                            Available variables: {{random}}&#xA;    -c &amp;lt;concurrency&amp;gt;                                        The number of concurrent requests per url [default: 1]&#xA;        --custom-parameters &amp;lt;custom-parameters&amp;gt;&#xA;            Check these parameters with non-random values like true/false yes/no&#xA;            (default is &#34;admin bot captcha debug disable encryption env show sso test waf&#34;)&#xA;        --custom-values &amp;lt;custom-values&amp;gt;&#xA;            Values for custom parameters (default is &#34;1 0 false off null true yes no&#34;)&#xA;&#xA;    -t, --data-type &amp;lt;data-type&amp;gt;&#xA;            Available: urlencode, json&#xA;            Can be detected automatically if --body is specified (default is &#34;urlencode&#34;)&#xA;    -d, --delay &amp;lt;Delay between requests in milliseconds&amp;gt;     [default: 0]&#xA;    -H &amp;lt;headers&amp;gt;                                            Example: -H &#39;one:one&#39; &#39;two:two&#39;&#xA;        --http &amp;lt;http&amp;gt;                                       HTTP version. Supported versions: --http 1.1, --http 2&#xA;    -j, --joiner &amp;lt;joiner&amp;gt;&#xA;            How to join parameter templates. Example: --joiner &#39;&amp;amp;&#39;&#xA;            Default: urlencoded - &#39;&amp;amp;&#39;, json - &#39;, &#39;, header values - &#39;; &#39;&#xA;        --learn-requests &amp;lt;learn-requests-count&amp;gt;             Set the custom number of learn requests. [default: 9]&#xA;    -m, --max &amp;lt;max&amp;gt;&#xA;            Change the maximum number of parameters per request.&#xA;            (default is &amp;lt;= 256 for query, 64 for headers and 512 for body)&#xA;    -X, --method &amp;lt;methods&amp;gt;                                  Multiple values are supported: -X GET POST&#xA;    -o, --output &amp;lt;file&amp;gt;&#xA;    -O, --output-format &amp;lt;output-format&amp;gt;                     standart, json, url, request [default: standart]&#xA;    -P, --param-template &amp;lt;parameter-template&amp;gt;&#xA;            %k - key, %v - value. Example: --param-template &#39;user[%k]=%v&#39;&#xA;            Default: urlencoded - &amp;lt;%k=%v&amp;gt;, json - &amp;lt;&#34;%k&#34;:%v&amp;gt;, headers - &amp;lt;%k=%v&amp;gt;&#xA;    -p, --port &amp;lt;port&amp;gt;                                       Port to use with request file&#xA;        --progress-bar-len &amp;lt;progress-bar-len&amp;gt;                [default: 26]&#xA;        --proto &amp;lt;proto&amp;gt;                                     Protocol to use with request file (default is &#34;https&#34;)&#xA;    -x, --proxy &amp;lt;proxy&amp;gt;&#xA;        --recursion-depth &amp;lt;recursion-depth&amp;gt;&#xA;            Check the same list of parameters with the found parameters until there are no new parameters to be found.&#xA;            Conflicts with --verify for now.&#xA;        --replay-proxy &amp;lt;replay-proxy&amp;gt;&#xA;            Request target with every found parameter via the replay proxy at the end.&#xA;&#xA;    -r, --request &amp;lt;request&amp;gt;                                 The file with the raw http request&#xA;        --save-responses &amp;lt;save-responses&amp;gt;&#xA;            Save request and response to a directory when a parameter is found&#xA;&#xA;        --split-by &amp;lt;split-by&amp;gt;&#xA;            Split the request into lines by the provided sequence. By default splits by \r, \n and \r\n&#xA;&#xA;        --timeout &amp;lt;timeout&amp;gt;                                 HTTP request timeout in seconds. [default: 15]&#xA;    -u, --url &amp;lt;url&amp;gt;&#xA;            You can add a custom injection point with %s.&#xA;            Multiple urls and filenames are supported:&#xA;            -u filename.txt&#xA;            -u https://url1 http://url2&#xA;    -v, --verbose &amp;lt;verbose&amp;gt;                                 Verbose level 0/1/2 [default: 1]&#xA;    -w, --wordlist &amp;lt;wordlist&amp;gt;&#xA;            The file with parameters (leave empty to read from stdin) [default: ]&#xA;&#xA;    -W, --workers &amp;lt;workers&amp;gt;&#xA;            The number of concurrent url checks.&#xA;            Use -W0 to run everything in parallel [default: 1]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Wordlists&lt;/h1&gt; &#xA;&lt;p&gt;Parameters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/the-xentropy/samlists&#34;&gt;samlists&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/s0md3v/Arjun/tree/master/arjun/db&#34;&gt;arjun&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Headers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/danielmiessler/SecLists/tree/master/Discovery/Web-Content/BurpSuite-ParamMiner&#34;&gt;Param Miner&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Burp Suite integration&lt;/h1&gt; &#xA;&lt;p&gt;The burpsuite integration is done via the &lt;a href=&#34;https://portswigger.net/bappstore/f089f1ad056545489139cb9f32900f8e&#34;&gt;send to&lt;/a&gt; extension.&lt;/p&gt; &#xA;&lt;h3&gt;Setting up&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Launch Burp Suite and navigate to the &#39;Extender&#39; tab.&lt;/li&gt; &#xA; &lt;li&gt;Locate and install the &#39;Custom Send To&#39; extension from the BApp Store.&lt;/li&gt; &#xA; &lt;li&gt;Open the &#39;Send to&#39; tab and click on the &#39;Add&#39; button to configure the extension.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Give a name to the entry and insert the following line into the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/path/to/x8 --progress-bar-len 20 -c 3 -r %R -w /path/to/wordlist --proto %T --port %P&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also add your frequently used arguments like &lt;code&gt;--output-format&lt;/code&gt;,&lt;code&gt;--replay-proxy&lt;/code&gt;, &lt;code&gt;--recursion-depth&lt;/code&gt;, ..&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; if the progress bar doesn&#39;t work properly --- try to reducing the value of &lt;code&gt;--progress-bar-len&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Switch from Run in background to Run in terminal.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/54232788/201471567-2a388157-e2f1-4d68-aebe-5ecc3c1090ee.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you encounter issues with font rendering in the terminal, you can adjust the &lt;code&gt;xterm&lt;/code&gt; options in &lt;strong&gt;Send to Miscellaneous Options&lt;/strong&gt;. Simply replace the existing content with &lt;code&gt;xterm -rv -fa &#39;Monospace&#39; -fs 10 -hold -e %C&lt;/code&gt;, or substitute &lt;code&gt;xterm&lt;/code&gt; with your preferred terminal emulator.&lt;/p&gt; &#xA;&lt;p&gt;Now you can go to the proxy/repeater tab and send the request to the tool:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/54232788/201518132-87fd0c40-5877-4f46-a036-590967759b3f.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In the next dialog, you can modify the command and execute it in a new terminal window.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/54232788/201518230-3d7959c4-3530-497d-9aca-b20de80321cb.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;After executing the command, a new terminal window will appear, displaying the running tool.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/54232788/224473570-cabbd4ee-8c15-4a09-bc2a-c660c534a429.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Starting with v4.0.0, installing via &lt;code&gt;cargo install&lt;/code&gt; uses the &lt;code&gt;crate&lt;/code&gt; branch instead of &lt;code&gt;main&lt;/code&gt;. This branch includes the original &lt;code&gt;reqwest&lt;/code&gt; library that performs HTTP normalizations and prevents sending invalid requests. If you want to use the modified reqwest version without these limitations, I recommend installing via the &lt;code&gt;Releases&lt;/code&gt; page or building the sources.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Docker&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;installation &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/Sh1Yo/x8&#xA;cd x8&#xA;docker build -t x8 .&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Sh1Yo/x8/pull/29&#34;&gt;usage&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Linux&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;from releases&lt;/li&gt; &#xA;   &lt;li&gt;from blackarch repositories (repositories should be installed) &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# pacman -Sy x8&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;from source code (rust should be installed) &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/sh1yo/x8&#xA;cd x8&#xA;cargo build --release&#xA;# move the binary to $PATH so you can use it without specifying the full path&#xA;cp ./target/release/x8 /usr/local/bin &#xA;# if it says that /usr/local/bin doesn&#39;t exists you can try&#xA;# sudo cp ./target/release/x8 /usr/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;via cargo install &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo install x8&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Mac&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;from source code (rust should be installed) &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/sh1yo/x8&#xA;cd x8&#xA;cargo build --release&#xA;# move the binary to $PATH so you can use it without specifying the full path&#xA;cp ./target/release/x8 /usr/local/bin &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;via cargo install &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo install x8&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Windows&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;from releases&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>