<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-26T01:37:55Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>thewh1teagle/vibe</title>
    <updated>2024-01-26T01:37:55Z</updated>
    <id>tag:github.com,2024-01-26:/thewh1teagle/vibe</id>
    <link href="https://github.com/thewh1teagle/vibe" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Transcribe on your own!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Vibe&lt;/h1&gt; &#xA;&lt;img src=&#34;https://github.com/thewh1teagle/vibe/assets/61390950/5992e90b-f602-4155-bfe2-ccec3ae4268a&#34; width=&#34;80&#34;&gt; &#xA;&lt;p&gt;Transcribe audio in every language&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/thewh1teagle/vibe/assets/61390950/ece19b81-26c6-4c13-81de-33175bb898d9&#34; width=&#34;600&#34;&gt; &#xA;&lt;h1&gt;Downloads ‚¨áÔ∏è&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;MacOS&lt;/code&gt;: install &lt;code&gt;.dmg&lt;/code&gt; file from &lt;a href=&#34;https://github.com/thewh1teagle/vibe/releases&#34;&gt;releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Windows&lt;/code&gt;: install &lt;code&gt;.exe&lt;/code&gt; file from &lt;a href=&#34;https://github.com/thewh1teagle/vibe/releases&#34;&gt;releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Linux&lt;/code&gt;: install either &lt;code&gt;.deb&lt;/code&gt; (recommend) or use &lt;code&gt;appImage&lt;/code&gt; from &lt;a href=&#34;https://github.com/thewh1teagle/vibe/releases&#34;&gt;releases&lt;/a&gt; and follow&lt;/p&gt; &#xA;&lt;h1&gt;Supported platforms üñ•Ô∏è&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;MacOS&lt;/code&gt; &lt;code&gt;Windows&lt;/code&gt; &lt;code&gt;Linux&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Features üåü&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Transcribe almost every language&lt;/li&gt; &#xA; &lt;li&gt;Works offline, no data sent out&lt;/li&gt; &#xA; &lt;li&gt;Easy to use&lt;/li&gt; &#xA; &lt;li&gt;Model parametrs for advanced users&lt;/li&gt; &#xA; &lt;li&gt;Optimized for &lt;code&gt;CPU&lt;/code&gt; (&lt;code&gt;Windows&lt;/code&gt; / &lt;code&gt;Linux&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Optmized for &lt;code&gt;GPU&lt;/code&gt; (&lt;code&gt;MacOS&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Support &lt;code&gt;SRT&lt;/code&gt;, &lt;code&gt;VTT&lt;/code&gt; formats&lt;/li&gt; &#xA; &lt;li&gt;Transcribe audio / video&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Install notes&lt;/h1&gt; &#xA;&lt;h2&gt;System requirements&lt;/h2&gt; &#xA;&lt;p&gt;Windows: Version &lt;code&gt;8&lt;/code&gt; greater.&lt;/p&gt; &#xA;&lt;p&gt;Hardware: No special requirement. resource usage can be customized through advanced settings in main window.&lt;/p&gt; &#xA;&lt;p&gt;Currenly, &lt;code&gt;MacOS&lt;/code&gt; computers get the best performance since there&#39;s GPU optimizations.&lt;/p&gt; &#xA;&lt;h2&gt;Ubuntu&lt;/h2&gt; &#xA;&lt;p&gt;Please install the following packages&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo apt-get install ffmpeg libgcc-s1 libc6 zlib1g libselinux1 libpcre3 libbz2-1.0 liblzma5 libcap2 libexpat1 libgpg-error0 libdbus-1-3 libcom-err2 libc6 libncursesw6 libtinfo6 libpulse0 libc6 libkeyutils1 libc6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And for install the &lt;code&gt;deb&lt;/code&gt; file -&amp;gt; download it and execute&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;dpkg -i ./vibe*.deb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Currenly, listening for the audio file isn&#39;t supported on &lt;code&gt;Linux&lt;/code&gt; And using the &lt;code&gt;appImage&lt;/code&gt; isn&#39;t recommended.&lt;/p&gt; &#xA;&lt;h2&gt;Offline installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Stop the program&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Download it from &lt;a href=&#34;https://huggingface.co/ggerganov/whisper.cpp/resolve/main/ggml-medium.bin?download=true&#34;&gt;ggml-medium.bin&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Place it in the folder &lt;code&gt;C:\Users\User\AppData\Local\github.com.thewh1teagle.vibe&lt;/code&gt; With the exact name &lt;code&gt;ggml-medium.bin&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start the program&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;And if the antivirus still block the model file, you can always exclude it from the antivirus.&lt;/p&gt; &#xA;&lt;h1&gt;Contribute ü§ù&lt;/h1&gt; &#xA;&lt;p&gt;PRs are welcomed! In addition, you&#39;re welcome to add translations.&lt;/p&gt; &#xA;&lt;h1&gt;Community&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/2VWf5jB5&#34;&gt;Discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Roadmap üõ£Ô∏è&lt;/h1&gt; &#xA;&lt;p&gt;You can see the roadmap in &lt;a href=&#34;https://github.com/users/thewh1teagle/projects/5/views/1&#34;&gt;Vibe-Roadmap&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Add translation üåê&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Copy &lt;code&gt;en.json&lt;/code&gt; from &lt;code&gt;locales&lt;/code&gt; folder&lt;/li&gt; &#xA; &lt;li&gt;Create new file eg &lt;code&gt;ru.json&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Change every value to the new language and keep the keys as is&lt;/li&gt; &#xA; &lt;li&gt;create PR / issue in github&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Build üõ†Ô∏è&lt;/h1&gt; &#xA;&lt;p&gt;see &lt;a href=&#34;https://raw.githubusercontent.com/thewh1teagle/vibe/main/BUILDING.md&#34;&gt;BUILDING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;I want to know more!&lt;/h1&gt; &#xA;&lt;p&gt;Medium &lt;a href=&#34;https://medium.com/@thewh1teagle/creating-vibe-multilingual-audio-transcription-872ab6d9dbb0&#34;&gt;post&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>eatonphil/raft-rs</title>
    <updated>2024-01-26T01:37:55Z</updated>
    <id>tag:github.com,2024-01-26:/eatonphil/raft-rs</id>
    <link href="https://github.com/eatonphil/raft-rs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Another minimal Raft implementation in Rust.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;raft-rs&lt;/h1&gt; &#xA;&lt;p&gt;Not my first time implementing Raft. I wrote about &lt;a href=&#34;https://notes.eatonphil.com/2023-05-25-raft.html&#34;&gt;another implementation&lt;/a&gt; in Go I did. But you don&#39;t learn a concept well until you&#39;ve implemented it a few times. And I wanted some practice with Rust.&lt;/p&gt; &#xA;&lt;p&gt;Goals:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;No dependencies beyond the standard library.&lt;/li&gt; &#xA; &lt;li&gt;Leader election.&lt;/li&gt; &#xA; &lt;li&gt;Log replication.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Non-goals (for now):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Production use.&lt;/li&gt; &#xA; &lt;li&gt;Snapshots and log truncation.&lt;/li&gt; &#xA; &lt;li&gt;Cluster membership changes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cargo test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The Raft Paper: &lt;a href=&#34;https://raft.github.io/raft.pdf&#34;&gt;In Search of an Understandable Consensus Algorithm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Diego Ongaro&#39;s Thesis: &lt;a href=&#34;https://web.stanford.edu/~ouster/cgi-bin/papers/OngaroPhD.pdf&#34;&gt;Consensus: Bridging Theory and Practice&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Diego Ongaro&#39;s TLA+ spec: &lt;a href=&#34;https://github.com/ongardie/raft.tla&#34;&gt;TLA+ specification for the Raft consensus algorithm&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>spieglt/FlyingCarpet</title>
    <updated>2024-01-26T01:37:55Z</updated>
    <id>tag:github.com,2024-01-26:/spieglt/FlyingCarpet</id>
    <link href="https://github.com/spieglt/FlyingCarpet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;File transfer between Android, iOS, Linux, macOS, and Windows over ad hoc WiFi. No network infrastructure required, just two devices with WiFi chips in close range.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Version 8 adds the option to send folders from Android and iOS&lt;/h2&gt; &#xA;&lt;p&gt;Android version is available &lt;a href=&#34;https://play.google.com/store/apps/details?id=dev.spiegl.flyingcarpet&#34;&gt;here&lt;/a&gt;, or if you prefer to sideload, &lt;code&gt;android_FlyingCarpet.apk&lt;/code&gt; is available on the &lt;a href=&#34;https://github.com/spieglt/FlyingCarpet/releases&#34;&gt;releases&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;p&gt;iOS version &lt;a href=&#34;https://apps.apple.com/us/app/flying-carpet-file-transfer/id1637377410&#34;&gt;here&lt;/a&gt; or search the App Store for &#34;Flying Carpet File Transfer&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Linux, macOS, and Windows versions are available on the &lt;a href=&#34;https://github.com/spieglt/FlyingCarpet/releases&#34;&gt;releases&lt;/a&gt; page. Installers and standalone executable versions available.&lt;/p&gt; &#xA;&lt;h1&gt;Flying Carpet&lt;/h1&gt; &#xA;&lt;p&gt;Send and receive files between Android, iOS, Linux, macOS, and Windows over ad hoc WiFi. No shared network or cell connection required, just two devices with WiFi chips in close range.&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t have a flash drive? Don&#39;t have access to a wireless network? Need to move a file larger than 2GB between different filesystems but don&#39;t want to set up a network share? Try it out!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/-RKiSmo-Bns&#34;&gt;Demo video&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/spieglt/FlyingCarpet/main/screenshots/android.png&#34; height=&#34;500&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/spieglt/FlyingCarpet/main/screenshots/ios.png&#34; height=&#34;500&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/spieglt/FlyingCarpet/main/screenshots/linux.png&#34; height=&#34;500&#34;&gt; &lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/spieglt/FlyingCarpet/main/screenshots/mac.png&#34; height=&#34;500&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/spieglt/FlyingCarpet/main/screenshots/windows.png&#34; height=&#34;500&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Use:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Linux:&lt;/strong&gt; Download the &lt;code&gt;.AppImage&lt;/code&gt; file from the &lt;a href=&#34;https://github.com/spieglt/FlyingCarpet/releases&#34;&gt;releases&lt;/a&gt; page for a standalone version, or if you&#39;re on a Debian-based distribution, download the &lt;code&gt;.deb&lt;/code&gt; file and install it with &lt;code&gt;apk&lt;/code&gt; or &lt;code&gt;dpkg&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;macOS:&lt;/strong&gt; Download the &lt;code&gt;.dmg&lt;/code&gt; disk image file from the &lt;a href=&#34;https://github.com/spieglt/FlyingCarpet/releases&#34;&gt;releases&lt;/a&gt; page. Double-click to mount it and drag the &lt;code&gt;.app&lt;/code&gt; bundle inside to your Applications folder. Or if you use Homebrew, run &lt;code&gt;brew install flying-carpet&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Windows:&lt;/strong&gt; Download the &lt;code&gt;.msi&lt;/code&gt; installer from the &lt;a href=&#34;https://github.com/spieglt/FlyingCarpet/releases&#34;&gt;releases&lt;/a&gt; page, or &lt;code&gt;FlyingCarpet.exe&lt;/code&gt; for a standalone version.&lt;/p&gt; &#xA;&lt;h2&gt;Compilation Instructions:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;Rust&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;cargo install tauri-cli&lt;/code&gt; to install Tauri.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Mac only: Install XCode. Open &lt;code&gt;FlyingCarpetMac/FlyingCarpetMac/FlyingCarpetMac.xcodeproj&lt;/code&gt; and build it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For Linux, install dependencies. Ubuntu 20 example:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install libsoup2.4* libjavascriptcoregtk* libgdk-pixbuf2.0* librust-pango-sys-dev libgdk3.0* librust-atk-dev librust-atk-sys-dev librust-gdk* libwebkit2gtk* librsvg2-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;cargo tauri dev&lt;/code&gt; to run a development version or &lt;code&gt;cargo tauri build&lt;/code&gt; to create release artifacts.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Restrictions:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Apple devices can only transfer to/from Android, Linux, and Windows as they can no longer programmatically run hotspots. Use AirDrop instead for Apple-to-Apple transfers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Disables your wireless internet connection while in use. (Does not apply to Windows or Android when hosting the hotspot.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;macOS sometimes switches back to a wireless network with internet connectivity during particularly long transfers. I haven&#39;t been able to replicate this reliably and am not sure if a fix is possible. Please file an issue if you experience this.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The Android version does not work on Xiaomi, MIUI, or HarmonyOS devices, and possibly other Android-like OSes. I don&#39;t own these devices and so can&#39;t test, but it seems like this is due to lack of support for the &lt;a href=&#34;https://developer.android.com/develop/connectivity/wifi/localonlyhotspot&#34;&gt;LocalOnlyHotspot&lt;/a&gt; API. Flying Carpet requires at least Android 11/API level 30.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Planned Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add Flying Carpet shortcut to iOS Share menu.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Questions That Could Be Asked at Some Point:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Wasn&#39;t this a Go repo?&lt;/strong&gt; Yes, carcinization has come for the gopher. There were several issues I didn&#39;t know how to solve in the Go/Qt paradigm, especially with Windows: not being able to make a single-file executable, needing to Run as Administrator, and having to write the WiFi Direct DLL to a temp folder and link to it at runtime because Go doesn&#39;t work with MSVC. Plus it was fun to use &lt;code&gt;tokio&lt;/code&gt;/&lt;code&gt;async&lt;/code&gt; and &lt;code&gt;windows-rs&lt;/code&gt;, with which the Windows networking portions are written. The GUI framework is now Tauri which gives a native experience on all platforms with a very small footprint. The Android version is written in Kotlin and the iOS version in Swift. Neither mobile codebase is in this repository.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;You&#39;re using SHA-256 to derive the key from a password. Isn&#39;t that bad? Shouldn&#39;t you be using a Password-Based Key Derivation Function like Scrypt or Argon2?&lt;/strong&gt; I was doing this before, but it wasn&#39;t strictly necessary because these keys are only used during the file transfer. For an attacker to intercept the data in transit, they&#39;d need to be on the hotspot network, which is protected by WPA2, so they&#39;d need to shoulder-surf the password or QR code. The change was made because I couldn&#39;t find a good Scrypt or Argon2 implementation on all platforms.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Why are you using AES-GCM at all if there&#39;s already WPA2 then?&lt;/strong&gt; When I started working on this project in 2017, I was trying to allow for IBSS WiFi networks on macOS that didn&#39;t use authentication. I was using the wrong encryption (and incorrectly) then, and later I added AES-GCM because it&#39;s the only good and official-ish AEAD implementation I could find in all of Go, Swift, Kotlin, and now Rust. If any cryptographers read this and find that I&#39;m still being dumb, please let me know.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Questions for Hypothetical Users:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Did anyone use the CLI version? Is there need for one now? With the original Go version, I wrote the CLI first and then learned how to make a GUI. For this version, with Tauri requiring Tokio, the async stuff is pretty deeply hooked in, so it didn&#39;t make sense to do the CLI first. It may be relatively straightforward to make a CLI version, but I might not do so unless people will use it. Please let me know: &lt;a href=&#34;mailto:theron@spiegl.dev&#34;&gt;theron@spiegl.dev&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;ve used Flying Carpet, please send feedback to &lt;a href=&#34;mailto:theron@spiegl.dev&#34;&gt;theron@spiegl.dev&lt;/a&gt;. Thanks for your interest! Please also check out &lt;a href=&#34;https://github.com/spieglt/cloaker&#34;&gt;https://github.com/spieglt/cloaker&lt;/a&gt;, &lt;a href=&#34;https://cloaker.mobi&#34;&gt;https://cloaker.mobi&lt;/a&gt;, and &lt;a href=&#34;https://github.com/spieglt/whatfiles&#34;&gt;https://github.com/spieglt/whatfiles&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>