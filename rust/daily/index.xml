<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-26T01:35:44Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>0xlane/wechat-dump-rs</title>
    <updated>2023-10-26T01:35:44Z</updated>
    <id>tag:github.com,2023-10-26:/0xlane/wechat-dump-rs</id>
    <link href="https://github.com/0xlane/wechat-dump-rs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;该工具用于导出正在运行中的微信进程的 key 并自动解密所有微信数据库文件以及导出 key 后数据库文件离线解密。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;wechat-dump-rs&lt;/h1&gt; &#xA;&lt;p&gt;该工具用于导出正在运行中的微信进程的 key 并自动解密所有微信数据库文件以及导出 key 后数据库文件离线解密。&lt;/p&gt; &#xA;&lt;h2&gt;工具用法&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wechat-dump-rs (1.0.3) - REinject&#xA;A wechat db dump tool&#xA;Options:&#xA;  -p, --pid &amp;lt;PID&amp;gt;        pid of wechat&#xA;  -k, --key &amp;lt;KEY&amp;gt;        key for offline decryption of db file&#xA;  -f, --file &amp;lt;PATH&amp;gt;      special a db file path&#xA;  -d, --data-dir &amp;lt;PATH&amp;gt;  special wechat data dir path (pid is required)&#xA;  -o, --output &amp;lt;PATH&amp;gt;    decrypted database output path&#xA;  -h, --help             Print help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果不带任何参数，程序只输出所有微信进程的 key、微信号、登录设备、数据目录、版本等信息：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;=======================================&#xA;ProcessId: 12768&#xA;WechatVersion: 3.9.7.25&#xA;AccountName: nihao123&#xA;PhoneType: iphone&#xA;DataDir: C:\Users\test\Documents\WeChat Files\wxid_uy9q2sudtiqv22&#xA;key: b16aa99b8e8323f6bb0ebf2ef83ff88f2e47d86d913345933a7168d55aa7e362&#xA;=======================================&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;使用参数 &lt;code&gt;-a&lt;/code&gt; 可以直接导出所有数据库文件。&lt;/p&gt; &#xA;&lt;h2&gt;原理&lt;/h2&gt; &#xA;&lt;p&gt;一般情况下，key 要在运行的微信进程内存中拿到，内存偏移在每个版本都不一样，大部分工具是对每个版本维护一套偏移，但是当出现新版本的时候都要重新找偏移，方法见后面有简单记录。&lt;/p&gt; &#xA;&lt;p&gt;其实，除了这个方法外，还有一个更通用的方法就是内存暴力搜索找到能用于解密的密钥位置，当然如果对进程全部内存扫一遍肯定不行，所以项目里用下面这种方式缩小密钥内存范围加快扫描速度：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;微信登录设备类型基本只有 iphone、android，在内存中先搜到设备类型所在内存，key 就在它的前面，向前搜就行&lt;/li&gt; &#xA; &lt;li&gt;key 的内存地址和登录设备类型据我观察是 16 字节对齐的，所以每次向前 16 字节&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;还有其它一些小细节，直接看一下代码吧。&lt;/p&gt; &#xA;&lt;h2&gt;已测试版本列表&lt;/h2&gt; &#xA;&lt;p&gt;其它未测试版本不代表不能用，这个列表只是我本地有过的环境。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;3.9.6.33&lt;/li&gt; &#xA; &lt;li&gt;3.9.7.25&lt;/li&gt; &#xA; &lt;li&gt;3.9.7.29&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;如何手动寻找偏移&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;注意：我找的偏移不是其他人找的直接的内存偏移，而是微信的一个数据结构相对偏移，这个有什么用呢，我刚开始打算通过 yara 扫 &lt;code&gt;WeChatWin.dll&lt;/code&gt; 二进制文件确定一个相对偏移，然后根据内存中找到的设备类型地址就能直接推算出其它数据的内存地址，通不通用的关键就在于 yara 了，我没写出通用的，所以才改成了上面的思路。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;使用 CheatEngine 在内存中搜索找到 key 或微信号的内存地址，必须是在 &lt;code&gt;WeChatWin.dll&lt;/code&gt; 内存范围内，然后使用 x64dbg 动态调试，在 key 地址下硬件内存访问断点，之后登录微信后可中断到一个地方，然后一直向上回溯可以找到偏移。&lt;/p&gt; &#xA;&lt;p&gt;以微信号为例，在 CE 中搜索，我这里使用第二个地址，因为它和 key 的位置比较近：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/0xlane/wechat-dump-rs/main/images/1.png&#34; alt=&#34;1.png&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/0xlane/wechat-dump-rs/main/images/2.png&#34; alt=&#34;2.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;在 x64dbg 中跳过去&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/0xlane/wechat-dump-rs/main/images/3.png&#34; alt=&#34;3.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;加个硬件访问断点&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/0xlane/wechat-dump-rs/main/images/4.png&#34; alt=&#34;4.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;然后会自动断下或者需要重启后重新登录断下，&lt;code&gt;r12&lt;/code&gt; 寄存器当前地址就是微信号所在地址：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/0xlane/wechat-dump-rs/main/images/5.png&#34; alt=&#34;5.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;在这个指令这里右键复制文件偏移，在 ida 中打开 &lt;code&gt;wechatwin.dll&lt;/code&gt; 跳转过去：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/0xlane/wechat-dump-rs/main/images/6.png&#34; alt=&#34;6.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;之后，到 ida 可以很明显看到 &lt;code&gt;r12&lt;/code&gt; 的地址来自于 &lt;code&gt;sub_1808D2FA0：&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/0xlane/wechat-dump-rs/main/images/7.png&#34; alt=&#34;7.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;在 &lt;code&gt;sub_1808D2FA0&lt;/code&gt; 的最后可以拿到一个地址 &lt;code&gt;183B28120&lt;/code&gt; ：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/0xlane/wechat-dump-rs/main/images/8.png&#34; alt=&#34;8.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;183B28120&lt;/code&gt; + &lt;code&gt;720&lt;/code&gt; - &lt;code&gt;180000000&lt;/code&gt; = &lt;code&gt;3B28840&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/0xlane/wechat-dump-rs/main/images/9.png&#34; alt=&#34;9.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;在 x64dbg 中就可以根据这个文件偏移明确找到微信号的位置，和最初 CE 里搜到的地址一致：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/0xlane/wechat-dump-rs/main/images/10.png&#34; alt=&#34;10.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;通过同样的方式，分别找到 nickname、phone、key 的相对偏移。&lt;/p&gt; &#xA;&lt;p&gt;nickename：&lt;code&gt;183B28120&lt;/code&gt; + &lt;code&gt;1E8&lt;/code&gt; - &lt;code&gt;180000000&lt;/code&gt; = &lt;code&gt;3B28308&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/0xlane/wechat-dump-rs/main/images/11.png&#34; alt=&#34;11.png&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>