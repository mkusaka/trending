<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-02T01:35:36Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kixelated/moq-rs</title>
    <updated>2023-11-02T01:35:36Z</updated>
    <id>tag:github.com,2023-11-02:/kixelated/moq-rs</id>
    <link href="https://github.com/kixelated/moq-rs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rust library for Media over QUIC&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img height=&#34;128px&#34; src=&#34;https://github.com/kixelated/moq-rs/raw/main/.github/logo.svg?sanitize=true&#34; alt=&#34;Media over QUIC&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Media over QUIC (MoQ) is a live media delivery protocol utilizing QUIC streams. See &lt;a href=&#34;https://quic.video&#34;&gt;quic.video&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;This repository contains a few crates:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;moq-relay&lt;/strong&gt;: A relay server, accepting content from publishers and fanning it out to subscribers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;moq-pub&lt;/strong&gt;: A publish client, accepting media from stdin (ex. via ffmpeg) and sending it to a remote server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;moq-transport&lt;/strong&gt;: An async implementation of the underlying MoQ protocol.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;moq-api&lt;/strong&gt;: A HTTP API server that stores the origin for each broadcast, backed by redis.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There&#39;s currently no way to view media with this repo; you&#39;ll need to use &lt;a href=&#34;https://github.com/kixelated/moq-js&#34;&gt;moq-js&lt;/a&gt; for that.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Use the &lt;a href=&#34;https://raw.githubusercontent.com/kixelated/moq-rs/main/dev/README.md&#34;&gt;dev helper scripts&lt;/a&gt; for local development.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;moq-relay&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;moq-relay&lt;/strong&gt; is a server that forwards subscriptions from publishers to subscribers, caching and deduplicating along the way. It&#39;s designed to be run in a datacenter, relaying media across multiple hops to deduplicate and improve QoS. The relays register themselves via the &lt;a href=&#34;https://raw.githubusercontent.com/kixelated/moq-rs/main/moq-api&#34;&gt;moq-api&lt;/a&gt; endpoints, which is used to discover other relays and share broadcasts.&lt;/p&gt; &#xA;&lt;p&gt;Notable arguments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--listen &amp;lt;ADDR&amp;gt;&lt;/code&gt; Listen on this address, default: &lt;code&gt;[::]:4443&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--tls-cert &amp;lt;CERT&amp;gt;&lt;/code&gt; Use the certificate file at this path&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--tls-key &amp;lt;KEY&amp;gt;&lt;/code&gt; Use the private key at this path&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--dev&lt;/code&gt; Listen via HTTPS as well, serving the &lt;code&gt;/fingerprint&lt;/code&gt; of the self-signed certificate. (dev only)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This listens for WebTransport connections on &lt;code&gt;UDP https://localhost:4443&lt;/code&gt; by default. You need a client to connect to that address, to both publish and consume media.&lt;/p&gt; &#xA;&lt;h3&gt;moq-pub&lt;/h3&gt; &#xA;&lt;p&gt;This is a client that publishes a fMP4 stream from stdin over MoQ. This can be combined with ffmpeg (and other tools) to produce a live stream.&lt;/p&gt; &#xA;&lt;p&gt;Notable arguments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;URL&amp;gt;&lt;/code&gt; connect to the given address, which must start with &lt;code&gt;https://&lt;/code&gt; for WebTransport.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: We&#39;re very particular about the fMP4 ingested. See &lt;a href=&#34;https://raw.githubusercontent.com/kixelated/moq-rs/main/dev/pub&#34;&gt;this script&lt;/a&gt; for the required ffmpeg flags.&lt;/p&gt; &#xA;&lt;h3&gt;moq-transport&lt;/h3&gt; &#xA;&lt;p&gt;A media-agnostic library used by &lt;a href=&#34;https://raw.githubusercontent.com/kixelated/moq-rs/main/moq-relay&#34;&gt;moq-relay&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/kixelated/moq-rs/main/moq-pub&#34;&gt;moq-pub&lt;/a&gt; to serve the underlying subscriptions. It has caching/deduplication built-in, so your application is oblivious to the number of connections under the hood.&lt;/p&gt; &#xA;&lt;p&gt;See the published &lt;a href=&#34;https://crates.io/crates/moq-transport&#34;&gt;crate&lt;/a&gt; and &lt;a href=&#34;https://docs.rs/moq-transport/latest/moq_transport/&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;moq-api&lt;/h3&gt; &#xA;&lt;p&gt;This is a API server that exposes a REST API. It&#39;s used by relays to inserts themselves as origins when publishing, and to find the origin when subscribing. It&#39;s basically just a thin wrapper around redis that is only needed to run multiple relays in a (simple) cluster.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under either:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apache License, Version 2.0, (&lt;a href=&#34;https://raw.githubusercontent.com/kixelated/moq-rs/main/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;MIT license (&lt;a href=&#34;https://raw.githubusercontent.com/kixelated/moq-rs/main/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>