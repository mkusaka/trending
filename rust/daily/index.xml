<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-08-09T01:37:38Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>enigo-rs/enigo</title>
    <updated>2025-08-09T01:37:38Z</updated>
    <id>tag:github.com,2025-08-09:/enigo-rs/enigo</id>
    <link href="https://github.com/enigo-rs/enigo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cross platform input simulation in Rust&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/enigo-rs/enigo/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/enigo-rs/enigo/build.yml?branch=main&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/enigo&#34;&gt;&lt;img src=&#34;https://docs.rs/enigo/badge.svg?sanitize=true&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://deps.rs/repo/github/enigo-rs/enigo&#34;&gt;&lt;img src=&#34;https://deps.rs/repo/github/enigo-rs/enigo/status.svg?sanitize=true&#34; alt=&#34;Dependency status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/rust--version-1.85+-brightgreen.svg?sanitize=true&#34; alt=&#34;Rust version&#34;&gt; &lt;a href=&#34;https://crates.io/crates/enigo&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/enigo.svg?sanitize=true&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;enigo&lt;/h1&gt; &#xA;&lt;p&gt;Cross platform input simulation in Rust!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Serialize/Deserialize&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Linux (X11) mouse&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Linux (X11) text&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Linux (Wayland) mouse (Experimental)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Linux (Wayland) text (Experimental)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Linux (libei) mouse (Experimental)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Linux (libei) text (Experimental)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; MacOS mouse&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; MacOS text&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Windows mouse&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Windows text&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Enigo also works on *BSDs if they use X11 or Wayland. I don&#39;t have a machine to test it and there are no Github Action runners for it, so the BSD support is not explicitly listed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Rust&#34;&gt;let mut enigo = Enigo::new(&amp;amp;Settings::default()).unwrap();&#xA;&#xA;enigo.move_mouse(500, 200, Abs).unwrap();&#xA;enigo.button(Button::Left, Click).unwrap();&#xA;enigo.text(&#34;Hello World! here is a lot of text  ❤️&#34;).unwrap();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more, look at the (&lt;a href=&#34;https://raw.githubusercontent.com/enigo-rs/enigo/main/examples&#34;&gt;examples&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;By default, enigo currently works on Windows, macOS and Linux (X11). If you want to be able to serialize and deserialize commands for enigo (&lt;a href=&#34;https://raw.githubusercontent.com/enigo-rs/enigo/main/examples/serde.rs&#34;&gt;example&lt;/a&gt;), you need to activate the &lt;code&gt;serde&lt;/code&gt; feature.&lt;/p&gt; &#xA;&lt;p&gt;There are multiple ways how to simulate input on Linux and not all systems support everything. Enigo can also use wayland protocols and libei to simulate input but there are currently some bugs with it. That is why they are hidden behind feature flags.&lt;/p&gt; &#xA;&lt;h2&gt;Runtime dependencies&lt;/h2&gt; &#xA;&lt;p&gt;Linux users may have to install &lt;code&gt;libxdo-dev&lt;/code&gt; if they are using the &lt;code&gt;xdo&lt;/code&gt; feature. For example, on Debian-based distros:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;apt install libxdo-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Arch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;pacman -S xdotool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Fedora:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;dnf install libX11-devel libxdo-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Gentoo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;emerge -a xdotool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Permissions&lt;/h2&gt; &#xA;&lt;p&gt;Some platforms have security measures in place to prevent programs from entering keys or controlling the mouse. Have a look at the &lt;a href=&#34;https://raw.githubusercontent.com/enigo-rs/enigo/main/Permissions.md&#34;&gt;permissions&lt;/a&gt; documentation to see what you need to do to allow it.&lt;/p&gt; &#xA;&lt;h2&gt;Migrating from a previous version&lt;/h2&gt; &#xA;&lt;p&gt;Please have a look at our &lt;a href=&#34;https://raw.githubusercontent.com/enigo-rs/enigo/main/CHANGES.md&#34;&gt;changelog&lt;/a&gt; to find out what you have to do, if you used a previous version.&lt;/p&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;p&gt;If you encounter an issue and want to debug it, turn on log messages as described &lt;a href=&#34;https://raw.githubusercontent.com/enigo-rs/enigo/main/DEBUGGING.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Testing this crate&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Warning&lt;/em&gt;: The tests will move the mouse, enter text, press keys and open some applications. Read the test cases before you run them so you know what to expect. It&#39;s best to close everything so that the tests don&#39;t mess with your system. Some of them run for a long time because they are intended to be run in the CI. Make sure to run the tests sequentially, otherwise they will fail because other mouse movements or entered keys are detected. You can do so by running&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;cargo test --all-features -- --test-threads=1&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>numaproj/numaflow</title>
    <updated>2025-08-09T01:37:38Z</updated>
    <id>tag:github.com,2025-08-09:/numaproj/numaflow</id>
    <link href="https://github.com/numaproj/numaflow" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Kubernetes-native platform to run massively parallel data/streaming jobs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Numaflow&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://goreportcard.com/report/github.com/numaproj/numaflow&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/numaproj/numaflow&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://join.slack.com/t/numaproj/shared_invite/zt-19svuv47m-YKHhsQ~~KK9mBv1E7pNzfg&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/slack-numaproj-brightgreen.svg?logo=slack&#34; alt=&#34;slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://godoc.org/github.com/numaproj/numaflow/pkg/apis&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/numaproj/numaflow?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/numaproj/numaflow/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/numaproj/numaflow/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/numaproj/numaflow?label=numaflow&#34; alt=&#34;Release Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/6078&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/6078/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Welcome to Numaflow! A Kubernetes-native, serverless platform for running scalable and reliable event-driven applications. Numaflow decouples event sources and sinks from the processing logic, allowing each component to independently auto-scale based on demand. With out-of-the-box sources and sinks, and built-in observability, developers can focus on their processing logic without worrying about event consumption, writing boilerplate code, or operational complexities. Each step of the pipeline can be written in any programming language, offering unparalleled flexibility in using the best programming language for each step and ease of using the languages you are most familiar with.&lt;/p&gt; &#xA;&lt;p&gt;Numaflow, created by the Intuit Argo team to address community needs for continuous event processing, leverages their expertise to deliver a scalable and robust, serverless platform for event-driven applications.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/numaproj/numaflow/main/docs/assets/simple-pipeline.png&#34; alt=&#34;Numaflow Pipeline&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Use Cases&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Event driven applications: Process events as they happen, e.g., updating inventory and sending customer notifications in e-commerce.&lt;/li&gt; &#xA; &lt;li&gt;Real time analytics: Analyze data instantly, e.g., social media analytics, observability data processing.&lt;/li&gt; &#xA; &lt;li&gt;Inference on streaming data: Perform real-time predictions, e.g., anomaly detection.&lt;/li&gt; &#xA; &lt;li&gt;Workflows running in a streaming manner.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Kubernetes-native: If you know Kubernetes, you already know how to use Numaflow.&lt;/li&gt; &#xA; &lt;li&gt;Serverless: Focus on your code and let the system scale up and down based on demand.&lt;/li&gt; &#xA; &lt;li&gt;Language agnostic: Use your favorite programming language.&lt;/li&gt; &#xA; &lt;li&gt;Exactly-Once semantics: No input element is duplicated or lost even as pods are rescheduled or restarted.&lt;/li&gt; &#xA; &lt;li&gt;Auto-scaling with back-pressure: Each vertex automatically scales from zero to whatever is needed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Data Integrity Guarantees&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Minimally provide at-least-once semantics&lt;/li&gt; &#xA; &lt;li&gt;Provide exactly-once semantics for unbounded and near real-time data sources&lt;/li&gt; &#xA; &lt;li&gt;Preserving order is not required&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make Rust code the primary for data-plane (1.6)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/TOqKOYX0nrE&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/TOqKOYX0nrE/0.jpg&#34; alt=&#34;Numaflow Demo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/numaproj/numaflow/main/docs/quick-start.md&#34;&gt;QUICK_START&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/numaproj/numaflow/main/examples&#34;&gt;EXAMPLES&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/numaproj/numaflow/main/docs/development/development.md&#34;&gt;DEVELOPMENT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/numaproj/numaproj/raw/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>