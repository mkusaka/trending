<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-18T01:38:51Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>astral-sh/uv</title>
    <updated>2024-02-18T01:38:51Z</updated>
    <id>tag:github.com,2024-02-18:/astral-sh/uv</id>
    <link href="https://github.com/astral-sh/uv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An extremely fast Python package installer and resolver, written in Rust.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;uv&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/astral-sh/uv&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/uv/main/assets/badge/v0.json&#34; alt=&#34;uv&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.python.org/pypi/uv&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/uv.svg?sanitize=true&#34; alt=&#34;image&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.python.org/pypi/uv&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/l/uv.svg?sanitize=true&#34; alt=&#34;image&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.python.org/pypi/uv&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/pyversions/uv.svg?sanitize=true&#34; alt=&#34;image&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/astral-sh/uv/actions&#34;&gt;&lt;img src=&#34;https://github.com/astral-sh/uv/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Actions status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/astral-sh&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Discord-%235865F2.svg?logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An extremely fast Python package installer and resolver, written in Rust. Designed as a drop-in replacement for &lt;code&gt;pip&lt;/code&gt; and &lt;code&gt;pip-compile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;uv is backed by &lt;a href=&#34;https://astral.sh&#34;&gt;Astral&lt;/a&gt;, the creators of &lt;a href=&#34;https://github.com/astral-sh/ruff&#34;&gt;Ruff&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Highlights&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‚öñÔ∏è Drop-in replacement for common &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;pip-tools&lt;/code&gt;, and &lt;code&gt;virtualenv&lt;/code&gt; commands.&lt;/li&gt; &#xA; &lt;li&gt;‚ö°Ô∏è &lt;a href=&#34;https://github.com/astral-sh/uv/raw/main/BENCHMARKS.md&#34;&gt;10-100x faster&lt;/a&gt; than &lt;code&gt;pip&lt;/code&gt; and &lt;code&gt;pip-tools&lt;/code&gt; (&lt;code&gt;pip-compile&lt;/code&gt; and &lt;code&gt;pip-sync&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;üíæ Disk-space efficient, with a global cache for dependency deduplication.&lt;/li&gt; &#xA; &lt;li&gt;üêç Installable via &lt;code&gt;curl&lt;/code&gt;, &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;pipx&lt;/code&gt;, etc. uv is a static binary that can be installed without Rust or Python.&lt;/li&gt; &#xA; &lt;li&gt;üß™ Tested at-scale against the top 10,000 PyPI packages.&lt;/li&gt; &#xA; &lt;li&gt;üñ•Ô∏è Support for macOS, Linux, and Windows.&lt;/li&gt; &#xA; &lt;li&gt;üß∞ Advanced features such as &lt;a href=&#34;https://raw.githubusercontent.com/astral-sh/uv/main/#dependency-overrides&#34;&gt;dependency version overrides&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/astral-sh/uv/main/#resolution-strategy&#34;&gt;alternative resolution strategies&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;‚ÅâÔ∏è Best-in-class error messages with a conflict-tracking resolver.&lt;/li&gt; &#xA; &lt;li&gt;ü§ù Support for a wide range of advanced &lt;code&gt;pip&lt;/code&gt; features, including editable installs, Git dependencies, direct URL dependencies, local dependencies, constraints, source distributions, HTML and JSON indexes, and more.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Install uv with our standalone installers, or from &lt;a href=&#34;https://pypi.org/project/uv/&#34;&gt;PyPI&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# On macOS and Linux.&#xA;curl -LsSf https://astral.sh/uv/install.sh | sh&#xA;&#xA;# On Windows.&#xA;irm https://astral.sh/uv/install.ps1 | iex&#xA;&#xA;# With pip.&#xA;pip install uv&#xA;&#xA;# With pipx.&#xA;pipx install uv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To create a virtual environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;uv venv  # Create a virtual environment at .venv.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To activate the virtual environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# On macOS and Linux.&#xA;source .venv/bin/activate&#xA;&#xA;# On Windows.&#xA;.\.venv\Scripts\activate.ps1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install a package into the virtual environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;uv pip install flask                # Install Flask.&#xA;uv pip install -r requirements.txt  # Install from a requirements.txt file.&#xA;uv pip install -e .                 # Install the current project in editable mode.&#xA;uv pip install &#34;package @ .&#34;        # Install the current project from disk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To generate a set of locked dependencies from an input file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;uv pip compile pyproject.toml -o requirements.txt   # Read a pyproject.toml file.&#xA;uv pip compile requirements.in -o requirements.txt  # Read a requirements.in file.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To sync a set of locked dependencies with the virtual environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;uv pip sync requirements.txt  # Install from a requirements.txt file.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;uv&#39;s &lt;code&gt;pip-install&lt;/code&gt; and &lt;code&gt;pip-compile&lt;/code&gt; commands support many of the same command-line arguments as existing tools, including &lt;code&gt;-r requirements.txt&lt;/code&gt;, &lt;code&gt;-c constraints.txt&lt;/code&gt;, &lt;code&gt;-e .&lt;/code&gt; (for editable installs), &lt;code&gt;--index-url&lt;/code&gt;, and more.&lt;/p&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;p&gt;uv does not support the entire &lt;code&gt;pip&lt;/code&gt; feature set. Namely, uv does not (and does not plan to) support the following &lt;code&gt;pip&lt;/code&gt; features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;.egg&lt;/code&gt; dependencies&lt;/li&gt; &#xA; &lt;li&gt;Editable installs for Git and direct URL dependencies (editable installs &lt;em&gt;are&lt;/em&gt; supported for local dependencies)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On the other hand, uv plans to (but does not currently) support:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/astral-sh/uv/issues/474&#34;&gt;Hash-checking mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/astral-sh/uv/issues/313&#34;&gt;URL requirements without package names&lt;/a&gt; (e.g., &lt;code&gt;https://...&lt;/code&gt; instead of &lt;code&gt;package @ https://...&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Like &lt;code&gt;pip-compile&lt;/code&gt;, uv generates a platform-specific &lt;code&gt;requirements.txt&lt;/code&gt; file (unlike, e.g., &lt;code&gt;poetry&lt;/code&gt; and &lt;code&gt;pdm&lt;/code&gt;, which generate platform-agnostic &lt;code&gt;poetry.lock&lt;/code&gt; and &lt;code&gt;pdm.lock&lt;/code&gt; files). As such, uv&#39;s &lt;code&gt;requirements.txt&lt;/code&gt; files may not be portable across platforms and Python versions.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;uv is an extremely fast Python package resolver and installer, designed as a drop-in replacement for &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;pip-tools&lt;/code&gt; (&lt;code&gt;pip-compile&lt;/code&gt; and &lt;code&gt;pip-sync&lt;/code&gt;), and &lt;code&gt;virtualenv&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;uv represents an intermediary goal in our pursuit of a &lt;a href=&#34;https://blog.rust-lang.org/2016/05/05/cargo-pillars.html#pillars-of-cargo&#34;&gt;&#34;Cargo for Python&#34;&lt;/a&gt;: a comprehensive project and package manager that is extremely fast, reliable, and easy to use.&lt;/p&gt; &#xA;&lt;p&gt;Think: a single binary that bootstraps your Python installation and gives you everything you need to be productive with Python, bundling not only &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;pip-tools&lt;/code&gt;, and &lt;code&gt;virtualenv&lt;/code&gt;, but also &lt;code&gt;pipx&lt;/code&gt;, &lt;code&gt;tox&lt;/code&gt;, &lt;code&gt;poetry&lt;/code&gt;, &lt;code&gt;pyenv&lt;/code&gt;, &lt;code&gt;ruff&lt;/code&gt;, and more.&lt;/p&gt; &#xA;&lt;p&gt;Our goal is to evolve uv into such a tool.&lt;/p&gt; &#xA;&lt;p&gt;In the meantime, though, the narrower &lt;code&gt;pip-tools&lt;/code&gt; scope allows us to solve the low-level problems involved in building such a tool (like package installation) while shipping something immediately useful with a minimal barrier to adoption.&lt;/p&gt; &#xA;&lt;h2&gt;Advanced Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Python discovery&lt;/h3&gt; &#xA;&lt;p&gt;uv itself does not depend on Python, but it does need to locate a Python environment to (1) install dependencies into the environment and (2) build source distributions.&lt;/p&gt; &#xA;&lt;p&gt;When running &lt;code&gt;pip sync&lt;/code&gt; or &lt;code&gt;pip install&lt;/code&gt;, uv will search for a virtual environment in the following order:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An activated virtual environment based on the &lt;code&gt;VIRTUAL_ENV&lt;/code&gt; environment variable.&lt;/li&gt; &#xA; &lt;li&gt;An activated Conda environment based on the &lt;code&gt;CONDA_PREFIX&lt;/code&gt; environment variable.&lt;/li&gt; &#xA; &lt;li&gt;A virtual environment at &lt;code&gt;.venv&lt;/code&gt; in the current directory, or in the nearest parent directory.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If no virtual environment is found, uv will prompt the user to create one in the current directory via &lt;code&gt;uv venv&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When running &lt;code&gt;pip compile&lt;/code&gt;, uv does not &lt;em&gt;require&lt;/em&gt; a virtual environment and will search for a Python interpreter in the following order:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An activated virtual environment based on the &lt;code&gt;VIRTUAL_ENV&lt;/code&gt; environment variable.&lt;/li&gt; &#xA; &lt;li&gt;An activated Conda environment based on the &lt;code&gt;CONDA_PREFIX&lt;/code&gt; environment variable.&lt;/li&gt; &#xA; &lt;li&gt;A virtual environment at &lt;code&gt;.venv&lt;/code&gt; in the current directory, or in the nearest parent directory.&lt;/li&gt; &#xA; &lt;li&gt;The Python interpreter available as &lt;code&gt;python3&lt;/code&gt; on macOS and Linux, or &lt;code&gt;python.exe&lt;/code&gt; on Windows.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If a &lt;code&gt;--python-version&lt;/code&gt; is provided to &lt;code&gt;pip compile&lt;/code&gt; (e.g., &lt;code&gt;--python-version=3.7&lt;/code&gt;), uv will search for a Python interpreter matching that version in the following order:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An activated virtual environment based on the &lt;code&gt;VIRTUAL_ENV&lt;/code&gt; environment variable.&lt;/li&gt; &#xA; &lt;li&gt;An activated Conda environment based on the &lt;code&gt;CONDA_PREFIX&lt;/code&gt; environment variable.&lt;/li&gt; &#xA; &lt;li&gt;A virtual environment at &lt;code&gt;.venv&lt;/code&gt; in the current directory, or in the nearest parent directory.&lt;/li&gt; &#xA; &lt;li&gt;The Python interpreter available as, e.g., &lt;code&gt;python3.7&lt;/code&gt; on macOS and Linux. On Windows, uv will use the same mechanism as &lt;code&gt;py --list-paths&lt;/code&gt; to discover all available Python interpreters, and will select the first interpreter matching the requested version.&lt;/li&gt; &#xA; &lt;li&gt;The Python interpreter available as &lt;code&gt;python3&lt;/code&gt; on macOS and Linux, or &lt;code&gt;python.exe&lt;/code&gt; on Windows.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since uv has no dependency on Python, it can even install into virtual environments other than its own. For example, setting &lt;code&gt;VIRTUAL_ENV=/path/to/venv&lt;/code&gt; will cause uv to install into &lt;code&gt;/path/to/venv&lt;/code&gt;, no matter where uv is installed.&lt;/p&gt; &#xA;&lt;h3&gt;Dependency caching&lt;/h3&gt; &#xA;&lt;p&gt;uv uses aggressive caching to avoid re-downloading (and re-building dependencies) that have already been accessed in prior runs.&lt;/p&gt; &#xA;&lt;p&gt;The specifics of uv&#39;s caching semantics vary based on the nature of the dependency:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;For registry dependencies&lt;/strong&gt; (like those downloaded from PyPI), uv respects HTTP caching headers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;For direct URL dependencies&lt;/strong&gt;, uv respects HTTP caching headers, and also caches based on the URL itself.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;For Git dependencies&lt;/strong&gt;, uv caches based on the fully-resolved Git commit hash. As such, &lt;code&gt;uv pip compile&lt;/code&gt; will pin Git dependencies to a specific commit hash when writing the resolved dependency set.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;For local dependencies&lt;/strong&gt;, uv caches based on the last-modified time of the &lt;code&gt;setup.py&lt;/code&gt; or &lt;code&gt;pyproject.toml&lt;/code&gt; file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;re running into caching issues, uv includes a few escape hatches:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To force uv to revalidate cached data for all dependencies, run &lt;code&gt;uv pip install --refresh ...&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To force uv to revalidate cached data for a specific dependency, run, e.g., &lt;code&gt;uv pip install --refresh-package flask ...&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To force uv to ignore existing installed versions, run &lt;code&gt;uv pip install --reinstall ...&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To clear the global cache entirely, run &lt;code&gt;uv clean&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Resolution strategy&lt;/h3&gt; &#xA;&lt;p&gt;By default, uv follows the standard Python dependency resolution strategy of preferring the latest compatible version of each package. For example, &lt;code&gt;uv pip install flask&amp;gt;=2.0.0&lt;/code&gt; will install the latest version of Flask (at time of writing: &lt;code&gt;3.0.0&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;However, uv&#39;s resolution strategy can be configured to prefer the &lt;em&gt;lowest&lt;/em&gt; compatible version of each package (&lt;code&gt;--resolution=lowest&lt;/code&gt;), or even the lowest compatible version of any &lt;em&gt;direct&lt;/em&gt; dependencies (&lt;code&gt;--resolution=lowest-direct&lt;/code&gt;), both of which can be useful for library authors looking to test their packages against the oldest supported versions of their dependencies.&lt;/p&gt; &#xA;&lt;p&gt;For example, given the following &lt;code&gt;requirements.in&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;flask&amp;gt;=2.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running &lt;code&gt;uv pip compile requirements.in&lt;/code&gt; would produce the following &lt;code&gt;requirements.txt&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;# This file was autogenerated by uv v0.0.1 via the following command:&#xA;#    uv pip compile requirements.in&#xA;blinker==1.7.0&#xA;    # via flask&#xA;click==8.1.7&#xA;    # via flask&#xA;flask==3.0.0&#xA;itsdangerous==2.1.2&#xA;    # via flask&#xA;jinja2==3.1.2&#xA;    # via flask&#xA;markupsafe==2.1.3&#xA;    # via&#xA;    #   jinja2&#xA;    #   werkzeug&#xA;werkzeug==3.0.1&#xA;    # via flask&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, &lt;code&gt;uv pip compile --resolution=lowest requirements.in&lt;/code&gt; would instead produce:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;# This file was autogenerated by uv v0.0.1 via the following command:&#xA;#    uv pip compile requirements.in --resolution=lowest&#xA;click==7.1.2&#xA;    # via flask&#xA;flask==2.0.0&#xA;itsdangerous==2.0.0&#xA;    # via flask&#xA;jinja2==3.0.0&#xA;    # via flask&#xA;markupsafe==2.0.0&#xA;    # via jinja2&#xA;werkzeug==2.0.0&#xA;    # via flask&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pre-release handling&lt;/h3&gt; &#xA;&lt;p&gt;By default, uv will accept pre-release versions during dependency resolution in two cases:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If the package is a direct dependency, and its version markers include a pre-release specifier (e.g., &lt;code&gt;flask&amp;gt;=2.0.0rc1&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;If &lt;em&gt;all&lt;/em&gt; published versions of a package are pre-releases.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If dependency resolution fails due to a transitive pre-release, uv will prompt the user to re-run with &lt;code&gt;--prerelease=allow&lt;/code&gt;, to allow pre-releases for all dependencies.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can add the transitive dependency to your &lt;code&gt;requirements.in&lt;/code&gt; file with pre-release specifier (e.g., &lt;code&gt;flask&amp;gt;=2.0.0rc1&lt;/code&gt;) to opt in to pre-release support for that specific dependency.&lt;/p&gt; &#xA;&lt;p&gt;Pre-releases are &lt;a href=&#34;https://pubgrub-rs-guide.netlify.app/limitations/prerelease_versions&#34;&gt;notoriously difficult&lt;/a&gt; to model, and are a frequent source of bugs in other packaging tools. uv&#39;s pre-release handling is &lt;em&gt;intentionally&lt;/em&gt; limited and &lt;em&gt;intentionally&lt;/em&gt; requires user intervention to opt in to pre-releases to ensure correctness, though pre-release handling will be revisited in future releases.&lt;/p&gt; &#xA;&lt;h3&gt;Dependency overrides&lt;/h3&gt; &#xA;&lt;p&gt;Historically, &lt;code&gt;pip&lt;/code&gt; has supported &#34;constraints&#34; (&lt;code&gt;-c constraints.txt&lt;/code&gt;), which allows users to narrow the set of acceptable versions for a given package.&lt;/p&gt; &#xA;&lt;p&gt;uv supports constraints, but also takes this concept further by allowing users to &lt;em&gt;override&lt;/em&gt; the acceptable versions of a package across the dependency tree via overrides (&lt;code&gt;-o overrides.txt&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;In short, overrides allow the user to lie to the resolver by overriding the declared dependencies of a package. Overrides are a useful last resort for cases in which the user knows that a dependency is compatible with a newer version of a package than the package declares, but the package has not yet been updated to declare that compatibility.&lt;/p&gt; &#xA;&lt;p&gt;For example, if a transitive dependency declares &lt;code&gt;pydantic&amp;gt;=1.0,&amp;lt;2.0&lt;/code&gt;, but the user knows that the package is compatible with &lt;code&gt;pydantic&amp;gt;=2.0&lt;/code&gt;, the user can override the declared dependency with &lt;code&gt;pydantic&amp;gt;=2.0,&amp;lt;3&lt;/code&gt; to allow the resolver to continue.&lt;/p&gt; &#xA;&lt;p&gt;While constraints are purely &lt;em&gt;additive&lt;/em&gt;, and thus cannot &lt;em&gt;expand&lt;/em&gt; the set of acceptable versions for a package, overrides &lt;em&gt;can&lt;/em&gt; expand the set of acceptable versions for a package, providing an escape hatch for erroneous upper version bounds.&lt;/p&gt; &#xA;&lt;h3&gt;Multi-version resolution&lt;/h3&gt; &#xA;&lt;p&gt;uv&#39;s &lt;code&gt;pip-compile&lt;/code&gt; command produces a resolution that&#39;s known to be compatible with the current platform and Python version. Unlike Poetry, PDM, and other package managers, uv does not yet produce a machine-agnostic lockfile.&lt;/p&gt; &#xA;&lt;p&gt;However, uv &lt;em&gt;does&lt;/em&gt; support resolving for alternate Python versions via the &lt;code&gt;--python-version&lt;/code&gt; command line argument. For example, if you&#39;re running uv on Python 3.9, but want to resolve for Python 3.8, you can run &lt;code&gt;uv pip compile --python-version=3.8 requirements.in&lt;/code&gt; to produce a Python 3.8-compatible resolution.&lt;/p&gt; &#xA;&lt;h2&gt;Platform support&lt;/h2&gt; &#xA;&lt;p&gt;uv has Tier 1 support for the following platforms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;macOS (Apple Silicon)&lt;/li&gt; &#xA; &lt;li&gt;macOS (x86_64)&lt;/li&gt; &#xA; &lt;li&gt;Linux (x86_64)&lt;/li&gt; &#xA; &lt;li&gt;Windows (x86_64)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;uv is continuously built, tested, and developed against its Tier 1 platforms. Inspired by the Rust project, Tier 1 can be thought of as &lt;a href=&#34;https://doc.rust-lang.org/beta/rustc/platform-support.html&#34;&gt;&#34;guaranteed to work&#34;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;uv has Tier 2 support (&lt;a href=&#34;https://doc.rust-lang.org/beta/rustc/platform-support.html&#34;&gt;&#34;guaranteed to build&#34;&lt;/a&gt;) for the following platforms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux (PPC64)&lt;/li&gt; &#xA; &lt;li&gt;Linux (PPC64LE)&lt;/li&gt; &#xA; &lt;li&gt;Linux (aarch64)&lt;/li&gt; &#xA; &lt;li&gt;Linux (armv7)&lt;/li&gt; &#xA; &lt;li&gt;Linux (i686)&lt;/li&gt; &#xA; &lt;li&gt;Linux (s390x)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;uv ships pre-built wheels to &lt;a href=&#34;https://pypi.org/project/uv/&#34;&gt;PyPI&lt;/a&gt; for its Tier 1 and Tier 2 platforms. However, while Tier 2 platforms are continuously built, they are not continuously tested or developed against, and so stability may vary in practice.&lt;/p&gt; &#xA;&lt;p&gt;Beyond the Tier 1 and Tier 2 platforms, uv is known to build on i686 Windows, and known &lt;em&gt;not&lt;/em&gt; to build on aarch64 Windows, but does not consider either platform to be supported at this time.&lt;/p&gt; &#xA;&lt;p&gt;uv supports and is tested against Python 3.8, 3.9, 3.10, 3.11, and 3.12.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;uv&#39;s dependency resolver uses &lt;a href=&#34;https://github.com/pubgrub-rs/pubgrub&#34;&gt;PubGrub&lt;/a&gt; under the hood. We&#39;re grateful to the PubGrub maintainers, especially &lt;a href=&#34;https://github.com/Eh2406&#34;&gt;Jacob Finkelman&lt;/a&gt;, for their support.&lt;/p&gt; &#xA;&lt;p&gt;uv&#39;s Git implementation is based on &lt;a href=&#34;https://github.com/rust-lang/cargo&#34;&gt;Cargo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Some of uv&#39;s optimizations are inspired by the great work we&#39;ve seen in &lt;a href=&#34;https://pnpm.io/&#34;&gt;pnpm&lt;/a&gt;, &lt;a href=&#34;https://github.com/orogene/orogene&#34;&gt;Orogene&lt;/a&gt;, and &lt;a href=&#34;https://github.com/oven-sh/bun&#34;&gt;Bun&lt;/a&gt;. We&#39;ve also learned a lot from Nathaniel J. Smith&#39;s &lt;a href=&#34;https://github.com/njsmith/posy&#34;&gt;Posy&lt;/a&gt; and adapted its &lt;a href=&#34;https://github.com/njsmith/posy/tree/main/src/trampolines/windows-trampolines/posy-trampoline&#34;&gt;trampoline&lt;/a&gt; for Windows support.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;uv is licensed under either of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apache License, Version 2.0, (&lt;a href=&#34;https://raw.githubusercontent.com/astral-sh/uv/main/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;https://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;MIT license (&lt;a href=&#34;https://raw.githubusercontent.com/astral-sh/uv/main/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;https://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;at your option.&lt;/p&gt; &#xA;&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in uv by you, as defined in the Apache-2.0 license, shall be dually licensed as above, without any additional terms or conditions.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a target=&#34;_blank&#34; href=&#34;https://astral.sh&#34; style=&#34;background:none&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/astral-sh/uv/main/assets/svg/Astral.svg?sanitize=true&#34; alt=&#34;Made by Astral&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
</feed>