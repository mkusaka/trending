<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-18T01:38:46Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>alexpasmantier/television</title>
    <updated>2024-12-18T01:38:46Z</updated>
    <id>tag:github.com,2024-12-18:/alexpasmantier/television</id>
    <link href="https://github.com/alexpasmantier/television" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The revolution will (not) be televised&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;üì∫ television&lt;/h1&gt; &#xA; &lt;p&gt;&lt;strong&gt;A blazingly fast general purpose fuzzy finder TUI.&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/docsrs/television-channels&#34; alt=&#34;docs.rs&#34;&gt; &lt;a href=&#34;https://crates.io/crates/television&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/television.svg?sanitize=true&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/check-runs/alexpasmantier/television/main&#34; alt=&#34;GitHub branch check runs&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/alexpasmantier/television&#34; alt=&#34;GitHub License&#34;&gt; &lt;img src=&#34;https://img.shields.io/crates/d/television&#34; alt=&#34;Crates.io Total Downloads&#34;&gt;&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/cffc3556-c9f3-4704-8303-8bddf661d139&#34; alt=&#34;television.png&#34;&gt;&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;em&gt;The revolution will (not) be televised.&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Television&lt;/code&gt; is a blazingly fast general purpose fuzzy finder TUI.&lt;/p&gt; &#xA;&lt;p&gt;It is inspired by the neovim &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope&lt;/a&gt; plugin and is designed to be fast, efficient, simple to use and easily extensible. It is built on top of &lt;a href=&#34;https://github.com/tokio-rs/tokio&#34;&gt;tokio&lt;/a&gt;, &lt;a href=&#34;https://github.com/ratatui/ratatui&#34;&gt;ratatui&lt;/a&gt; and the &lt;em&gt;nucleo&lt;/em&gt; matcher used by the &lt;a href=&#34;https://github.com/helix-editor/helix&#34;&gt;helix&lt;/a&gt; editor.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Homebrew&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install television&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Arch Linux &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pacman -S television&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Debian-based (Debian, Ubuntu, Pop!_OS, Linux Mint, etc.) &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -LO https://github.com/alexpasmantier/television/releases/download/0.7.0/television_0.7.0-1_amd64.deb&#xA;sudo dpkg -i television_0.7.0-1_amd64.deb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Conda-forge (cross-platform) &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pixi global install television&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Binary &lt;/summary&gt; &#xA; &lt;p&gt;From the &lt;a href=&#34;https://github.com/alexpasmantier/television/releases/latest&#34;&gt;latest release&lt;/a&gt; page:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Download the latest release asset for your platform (e.g. &lt;code&gt;tv-vX.X.X-linux-x86_64.tar.gz&lt;/code&gt; if you&#39;re on a linux x86 machine)&lt;/li&gt; &#xA;  &lt;li&gt;Unpack and copy to the relevant location on your system (e.g. &lt;code&gt;/usr/local/bin&lt;/code&gt; on macos and linux for a global installation)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Cargo &lt;/summary&gt; &#xA; &lt;p&gt;Setup the latest stable Rust toolchain via rustup:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh&#xA;rustup update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Install &lt;code&gt;television&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo install --locked television&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tv [channel] #[default: files] [possible values: env, files, gitrepos, text, alias]&#xA;&#xA;# e.g. to search through files&#xA;tv files&#xA;&#xA;# e.g. to search through environment variables&#xA;tv env&#xA;&#xA;# piping into tv (e.g. logs)&#xA;my_program | tv&#xA;&#xA;# piping into tv with a custom preview command&#xA;fd -t f . | tv --preview &#39;bat -n --color=always {0}&#39;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;television&lt;/code&gt; will launch with the &lt;code&gt;files&lt;/code&gt; channel on.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img width=&#34;2213&#34; alt=&#34;Screenshot 2024-11-10 at 15 04 20&#34; src=&#34;https://github.com/user-attachments/assets/a0fd70a9-ea26-452a-b235-cbce8aeed67f&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;em&gt;&lt;code&gt;tv&lt;/code&gt;&#39;s &lt;code&gt;files&lt;/code&gt; channel running on the &lt;em&gt;curl&lt;/em&gt; codebase&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;üì∫ Built-in Channels&lt;/h2&gt; &#xA;&lt;p&gt;The following built-in channels are currently available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;files&lt;/code&gt;: search through files in a directory tree.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;text&lt;/code&gt;: search through textual content in a directory tree.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gitrepos&lt;/code&gt;: search through git repositories anywhere on the file system.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;env&lt;/code&gt;: search through environment variables and their values.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;alias&lt;/code&gt;: search through shell aliases and their values.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stdin&lt;/code&gt;: search through lines of text from stdin.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üçø Cable channels&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Tired of broadcast television? Want to watch your favorite shows on demand? &lt;code&gt;television&lt;/code&gt; has you covered with cable channels. Cable channels are channels that are not built-in to &lt;code&gt;television&lt;/code&gt; but are instead provided by the community.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can find a list of cable channels ideas &lt;a href=&#34;https://github.com/alexpasmantier/television/wiki/Cable-channels&#34;&gt;on the wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Installing cable channels&lt;/h3&gt; &#xA;&lt;p&gt;Installing cable channels is as simple as creating provider files in your configuration folder.&lt;/p&gt; &#xA;&lt;p&gt;A provider file is a &lt;code&gt;*channels.toml&lt;/code&gt; file that contains cable channel prototypes defined as follows:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;my-custom-channels.toml&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[cable_channel]]&#xA;name = &#34;git-log&#34;&#xA;source_command = &#39;git log --oneline --date=short --pretty=&#34;format:%h %s %an %cd&#34; &#34;$@&#34;&#39;&#xA;preview_command = &#39;git show -p --stat --pretty=fuller --color=always {0}&#39;&#xA;&#xA;[[cable_channel]]&#xA;name = &#34;my-dotfiles&#34;&#xA;source_command = &#39;fd -t f . $HOME/.config&#39;&#xA;preview_command = &#39;bat -n --color=always {0}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would add two new cable channels to &lt;code&gt;television&lt;/code&gt; available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;using the remote control mode&lt;/li&gt; &#xA; &lt;li&gt;through the cli (e.g. &lt;code&gt;tv git-log&lt;/code&gt;, &lt;code&gt;tv my-dotfiles&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alexpasmantier/television/main/assets/cable_channels.png&#34; alt=&#34;cable channels&#34; title=&#34;Cable channels&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Deciding which part of the source command output to pass to the previewer:&lt;/summary&gt; &#xA; &lt;p&gt;By default, each line of the source command can be passed to the previewer using &lt;code&gt;{}&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;If you wish to pass only a part of the output to the previewer, you may do so by specifying the &lt;code&gt;preview_delimiter&lt;/code&gt; to use as a separator and refering to the desired part using the corresponding index.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[cable_channel]]&#xA;name = &#34;Disney channel&#34;&#xA;source_command = &#39;echo &#34;one&lt;span&gt;2‚É£&lt;/span&gt;three:four&#34; &amp;amp;&amp;amp; echo &#34;five:six&lt;span&gt;7‚É£&lt;/span&gt;eight&#34;&#39;&#xA;preview_command = &#39;echo {2}&#39;&#xA;preview_delimiter = &#39;:&#39;&#xA;# which will pass &#34;three&#34; and &#34;seven&#34; to the preview command&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Keybindings&lt;/h2&gt; &#xA;&lt;p&gt;Default keybindings are as follows:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Key&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;‚Üë&lt;/kbd&gt; / &lt;kbd&gt;‚Üì&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Navigate through the list of entries&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;u&lt;/kbd&gt; / &lt;kbd&gt;d&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Scroll the preview pane up / down&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;Enter&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Select the current entry&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;y&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Copy the selected entry to the clipboard&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;r&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggle remote control mode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;s&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggle send to channel mode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;g&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggle the help panel&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;Esc&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Quit the application&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;These keybindings are all configurable (see &lt;a href=&#34;https://raw.githubusercontent.com/alexpasmantier/television/main/#configuration&#34;&gt;Configuration&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Default (may be overriden) locations where &lt;code&gt;television&lt;/code&gt; expect the configuration files to be located for each platform:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Value&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;$HOME/.config/television/config.toml&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macOS&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;$HOME/.config/television/config.toml&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;{FOLDERID_LocalAppData}\television\config&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Or, if you&#39;d rather use the XDG Base Directory Specification, tv will look for the configuration file in &lt;code&gt;$XDG_CONFIG_HOME/television/config.toml&lt;/code&gt; if the env variable is set.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default configuration: &lt;a href=&#34;https://raw.githubusercontent.com/alexpasmantier/television/main/.config/config.toml&#34;&gt;config.toml&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Themes&lt;/h2&gt; &#xA;&lt;p&gt;Builtin themes are available in the &lt;a href=&#34;https://raw.githubusercontent.com/alexpasmantier/television/main/themes&#34;&gt;themes&lt;/a&gt; directory. Feel free to contribute your own.&lt;/p&gt; &#xA;&lt;p&gt;A few examples:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alexpasmantier/television/main/assets/catppuccin.png&#34; alt=&#34;catppuccin&#34; title=&#34;catppuccin&#34;&gt; catppuccin&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alexpasmantier/television/main/assets/gruvbox.png&#34; alt=&#34;gruvbox&#34; title=&#34;gruvbox&#34;&gt; gruvbox-dark&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alexpasmantier/television/main/assets/solarized-dark.png&#34; alt=&#34;solarized-dark&#34; title=&#34;gruvbox-light&#34;&gt; &lt;strong&gt;solarized-dark&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alexpasmantier/television/main/assets/nord.png&#34; alt=&#34;nord&#34; title=&#34;nord&#34;&gt; &lt;strong&gt;nord&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;You may use your own custom themes by adding files to the &lt;code&gt;themes&lt;/code&gt; directory in your configuration folder and then referring to them by file name through the configuration file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;config_location/&#xA;‚îú‚îÄ‚îÄ themes/&#xA;‚îÇ   ‚îî‚îÄ‚îÄ my_theme.toml&#xA;‚îî‚îÄ‚îÄ config.toml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Matcher behavior&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;television&lt;/code&gt; uses a fuzzy matching algorithm to filter the list of entries. The algorithm that is used depends on the input pattern that you provide.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Matcher&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Pattern&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Fuzzy&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;foo&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Substring&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;&#39;foo&lt;/code&gt; / &lt;code&gt;!foo&lt;/code&gt; to negate&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Prefix&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;^foo&lt;/code&gt; / &lt;code&gt;!^foo&lt;/code&gt; to negate&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Suffix&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;foo$&lt;/code&gt; / &lt;code&gt;!foo$&lt;/code&gt; to negate&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Exact&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;^foo$&lt;/code&gt; / &lt;code&gt;!^foo$&lt;/code&gt; to negate&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For more information on the matcher behavior, see the &lt;a href=&#34;https://docs.rs/nucleo-matcher/latest/nucleo_matcher/pattern/enum.AtomKind.html&#34;&gt;nucleo-matcher&lt;/a&gt; documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Design (high-level)&lt;/h2&gt; &#xA;&lt;h4&gt;Channels&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Television&lt;/strong&gt;&#39;s design is primarily based on the concept of &lt;strong&gt;Channels&lt;/strong&gt;. Channels are just structs that implement the &lt;code&gt;OnAir&lt;/code&gt; trait.&lt;/p&gt; &#xA;&lt;p&gt;As such, channels can virtually be anything that can respond to a user query and return a result under the form of a list of entries. This means channels can be anything from conventional data sources you might want to search through (like files, git repositories, remote filesystems, environment variables etc.) to more exotic implementations that might inclue a REPL, a calculator, a web browser, search through your spotify library, your email, etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Television&lt;/strong&gt; provides a set of built-in &lt;strong&gt;Channels&lt;/strong&gt; that can be used out of the box (see &lt;a href=&#34;https://raw.githubusercontent.com/alexpasmantier/television/main/#built-in-channels&#34;&gt;Built-in Channels&lt;/a&gt;). The list of available channels will grow over time as new channels are implemented to satisfy different use cases.&lt;/p&gt; &#xA;&lt;h4&gt;Transitions&lt;/h4&gt; &#xA;&lt;p&gt;When it makes sense, &lt;strong&gt;Television&lt;/strong&gt; allows for transitions between different channels. For example, you might want to start searching through git repositories, then refine your search to a specific set of files in that shortlist of repositories and then finally search through the textual content of those files.&lt;/p&gt; &#xA;&lt;p&gt;This can easily be achieved using transitions.&lt;/p&gt; &#xA;&lt;h4&gt;Previewers&lt;/h4&gt; &#xA;&lt;p&gt;Entries returned by different channels can be previewed in a separate pane. This is useful when you want to see the contents of a file, the value of an environment variable, etc. Because entries returned by different channels may represent different types of data, &lt;strong&gt;Television&lt;/strong&gt; allows for channels to declare the type of previewer that should be used. Television comes with a set of built-in previewers that can be used out of the box and will grow over time.&lt;/p&gt; &#xA;&lt;h2&gt;Terminal Emulators Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;Here is a list of terminal emulators that have currently been tested with &lt;code&gt;television&lt;/code&gt; and their compatibility status.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Terminal Emulator&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Tested Platforms&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Compatibility&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Alacritty&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;macOS, Linux&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Kitty&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;macOS, Linux&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;iTerm2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;macOS&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Wezterm&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;macOS, Linux, Windows&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macOS Terminal&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;macOS&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;functional but coloring issues&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Konsole&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Linux&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Terminator&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Linux&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Xterm&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Linux&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Cmder&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úñÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Foot&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Linux&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rio&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;macOS, Linux, Windows&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Warp&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;macOS&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hyper&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;macOS&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Contributions, issues and pull requests are welcome.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/alexpasmantier/television/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; and &lt;a href=&#34;https://github.com/alexpasmantier/television/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22&#34;&gt;good first issues&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
</feed>