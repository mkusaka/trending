<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-07T01:39:31Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>citybound/citybound</title>
    <updated>2024-01-07T01:39:31Z</updated>
    <id>tag:github.com,2024-01-07:/citybound/citybound</id>
    <link href="https://github.com/citybound/citybound" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A work-in-progress, open-source, multi-player city simulation game.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/citybound/citybound/master/cb.png&#34; alt=&#34;Citybound&#34; width=&#34;192&#34;&gt; &#xA;&lt;p&gt;Citybound is a city building game with a focus on realism, collaborative planning and simulation of microscopic details. It is independently developed, open source and funded through Patreon.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cityboundsim.com&#34;&gt;Homepage&lt;/a&gt; (with screenshots and videos)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://aeplay.org/citybound-livebuilds&#34;&gt;Latest Downloadable Game Builds&lt;/a&gt; (for Windows, Mac and Linux)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.notion.so/aeplay/Citybound-Living-Design-Doc-3b42707cbca54d079d301d9190ac85bb&#34;&gt;Living Design Doc&lt;/a&gt; (includes detailed notes, plans, inspirations and references)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/citybound/citybound/master/LICENSE.txt&#34;&gt;LICENSE&lt;/a&gt; (AGPL)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/citybound/citybound/master/CONTRIBUTING.md&#34;&gt;Contributing &amp;amp; Development&lt;/a&gt; (includes instructions for the custom build process)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>availproject/avail</title>
    <updated>2024-01-07T01:39:31Z</updated>
    <id>tag:github.com,2024-01-07:/availproject/avail</id>
    <link href="https://github.com/availproject/avail" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;Center&#34;&gt; &#xA; &lt;h1&gt;Avail Node&lt;/h1&gt; &#xA; &lt;h3&gt;Official Client for the Avail blockchain&lt;/h3&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/availproject/avail/actions/workflows/default.yml&#34;&gt;&lt;img src=&#34;https://github.com/availproject/avail/actions/workflows/default.yml/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/availproject/avail/main/.github/img/terminal.jpg&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Running Avail Node&lt;/h2&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;To manually run the Avail Node, you&#39;ll need to have the following dependencies installed:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://www.rust-lang.org/learn/get-started&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://docs.substrate.io/install/&#34;&gt;Substrate dependencies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;After ensuring you have the dependencies installed, you can run the Avail Node using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p output&#xA;cargo run --locked --release -- --chain goldberg -d ./output&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command compiles and runs the Avail Node connected to the Goldberg Network.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;2023-11-17 11:31:35 Avail Node    &#xA;2023-11-17 11:31:35 ✌️  version 1.8.2-3fe1bd1a835    &#xA;2023-11-17 11:31:35 ❤️  by Anonymous, 2017-2023    &#xA;2023-11-17 11:31:35 📋 Chain specification: Avail Goldberg Testnet    &#xA;2023-11-17 11:31:35 🏷  Node name: exotic-shame-9524    &#xA;2023-11-17 11:31:35 👤 Role: FULL    &#xA;2023-11-17 11:31:35 💾 Database: RocksDb at /tmp/substrate6VCSz0/chains/avail_goldberg_testnet/db/full    &#xA;2023-11-17 11:31:36 🔨 Initializing Genesis block/state (state: 0x6bc7…ec83, header-hash: 0x6f09…a7ae)    &#xA;2023-11-17 11:31:36 👴 Loading GRANDPA authority set from genesis on what appears to be first startup.    &#xA;2023-11-17 11:31:36 👶 Creating empty BABE epoch changes on what appears to be first startup.    &#xA;2023-11-17 11:31:36 🏷  Local node identity is: 12D3KooWGhdJUhZTtqByZKpojSdT26eadVtnvQ6fdrJU8mjeTuiq    &#xA;2023-11-17 11:31:36 Prometheus metrics extended with avail metrics    &#xA;2023-11-17 11:31:36 💻 Operating system: linux    &#xA;2023-11-17 11:31:36 💻 CPU architecture: x86_64    &#xA;2023-11-17 11:31:36 💻 Target environment: gnu    &#xA;2023-11-17 11:31:36 💻 CPU: 13th Gen Intel(R) Core(TM) i7-13700K    &#xA;2023-11-17 11:31:36 💻 CPU cores: 16    &#xA;2023-11-17 11:31:36 💻 Memory: 31863MB    &#xA;2023-11-17 11:31:36 💻 Kernel: 6.5.10-200.fc38.x86_64    &#xA;2023-11-17 11:31:36 💻 Linux distribution: Fedora Linux 38 (Workstation Edition)    &#xA;2023-11-17 11:31:36 💻 Virtual machine: no    &#xA;2023-11-17 11:31:36 📦 Highest known block at #0    &#xA;2023-11-17 11:31:36 〽️ Prometheus exporter started at 127.0.0.1:9615    &#xA;2023-11-17 11:31:36 Running JSON-RPC server: addr=127.0.0.1:9944, allowed origins=[&#34;http://localhost:*&#34;, &#34;http://127.0.0.1:*&#34;, &#34;https://localhost:*&#34;, &#34;https://127.0.0.1:*&#34;, &#34;https://polkadot.js.org&#34;]    &#xA;2023-11-17 11:31:36 🏁 CPU score: 1.65 GiBs    &#xA;2023-11-17 11:31:36 🏁 Memory score: 22.56 GiBs    &#xA;2023-11-17 11:31:36 🏁 Disk score (seq. writes): 7.25 GiBs    &#xA;2023-11-17 11:31:36 🏁 Disk score (rand. writes): 2.81 GiBs    &#xA;2023-11-17 11:31:37 🔍 Discovered new external address for our node: /ip4/176.61.156.176/tcp/30333/ws/p2p/12D3KooWGhdJUhZTtqByZKpojSdT26eadVtnvQ6fdrJU8mjeTuiq    &#xA;2023-11-17 11:31:41 ⚙️  Syncing, target=#41833 (8 peers), best: #2690 (0x13c8…42fa), finalized #2560 (0x1282…a791), ⬇ 2.9MiB/s ⬆ 38.4kiB/s    &#xA;2023-11-17 11:31:46 ⚙️  Syncing 62.8 bps, target=#41833 (8 peers), best: #3004 (0xa183…81a0), finalized #2560 (0x1282…a791), ⬇ 106.9kiB/s ⬆ 2.1kiB/s  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Running Dev Chain&lt;/h4&gt; &#xA;&lt;p&gt;A development chain is typically used for testing and development purposes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo run --locked --release -- --dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;To run the Avail Node using Docker, follow these steps:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Build the Docker image for the Avail Node:&#xA;docker build -t availnode -f ./dockerfiles/avail-node.Dockerfile .&#xA;&#xA;# Create an output directory. Here the node&#39;s data will be stored.&#xA;mkdir output&#xA;&#xA;# Run the Avail Node container:&#xA;docker run --rm -p 30333:30333 -p 9944:9944 -v ./output:/output availnode&#xA;# For SELinux&#xA;docker run --rm -p 30333:30333 -p 9944:9944 -v ./output:/output:z availnode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Running Dev Chain&lt;/h4&gt; &#xA;&lt;p&gt;There are instructions for running a development chain using Docker. A development chain is typically used for testing and development purposes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Build the Docker image for the Avail Node:&#xA;docker build -t availnode -f ./dockerfiles/avail-node.Dockerfile .&#xA;&#xA;# Create an output directory. Here the node&#39;s data will be stored.&#xA;mkdir output&#xA;&#xA;# Run the Avail Node container:&#xA;docker run --rm -p 30333:30333 -p 9944:9944 -v ./output:/output availnode --dev --rpc-methods=unsafe --unsafe-rpc-external --rpc-cors=all&#xA;# For SELinux&#xA;docker run --rm -p 30333:30333 -p 9944:9944 -v ./output:/output:z availnode --dev --rpc-methods=unsafe --unsafe-rpc-external --rpc-cors=all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Podman&lt;/h3&gt; &#xA;&lt;p&gt;To run the Avail Node using Docker, follow these steps:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Build the Docker image for the Avail Node:&#xA;podman build -t availnode -f ./dockerfiles/avail-node.Dockerfile .&#xA;&#xA;# Create an output directory. Here the node&#39;s data will be stored.&#xA;mkdir output&#xA;&#xA;# Run the Avail Node container:&#xA;podman run --rm -p 30333:30333 -p 9944:9944 -v ./output:/output availnode&#xA;# For SELinux&#xA;podman run --rm -p 30333:30333 -p 9944:9944 -v ./output:/output:z availnode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Running Dev Chain&lt;/h4&gt; &#xA;&lt;p&gt;There are instructions for running a development chain using Podman. A development chain is typically used for testing and development purposes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Build the Docker image for the Avail Node:&#xA;podman build -t availnode -f ./dockerfiles/avail-node.Dockerfile .&#xA;&#xA;# Create an output directory. Here the node&#39;s data will be stored.&#xA;mkdir output&#xA;&#xA;# Run the Avail Node container:&#xA;podman run --rm -p 30333:30333 -p 9944:9944 -v ./output:/output availnode --dev --rpc-methods=unsafe --unsafe-rpc-external --rpc-cors=all&#xA;# For SELinux&#xA;podman run --rm -p 30333:30333 -p 9944:9944 -v ./output:/output:z availnode --dev --rpc-methods=unsafe --unsafe-rpc-external --rpc-cors=all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run Benchmarks&lt;/h2&gt; &#xA;&lt;h3&gt;Kate RPC&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo build --release --features kate-rpc-metrics&#xA;deno run -A ./examples/deno/benchmarks/query_proof.ts &amp;amp;&amp;amp; deno run -A ./examples/deno/benchmarks/query_data_proof.ts &amp;amp;&amp;amp; deno run -A ./examples/deno/benchmarks/query_rows.ts &amp;amp;&amp;amp; deno run -A ./examples/deno/benchmarks/query_block_length.ts &amp;amp;&amp;amp; deno run -A ./examples/deno/benchmarks/query_app_data.ts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Header Builder&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Option 1: for time measurement &#xA;cargo bench --bench header_kate_commitment_cri&#xA;# Option 2: for time measurement &#xA;cargo bench --bench header_kate_commitment_divan&#xA;# Option 1: for instructions, cache and main memory hits&#xA;cargo bench --bench header_kate_commitment_iai_callgrind&#xA;# Option 2: for instructions, cache and main memory hits&#xA;cargo bench --bench header_kate_commitment_iai&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Additional Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For additional documentation check our &lt;a href=&#34;https://github.com/availproject/avail/wiki&#34;&gt;wiki page&lt;/a&gt;. There you can learn how to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run Avail Node together with Avail Light Clients&lt;/li&gt; &#xA; &lt;li&gt;Build Avail Node for different Linux flavours&lt;/li&gt; &#xA; &lt;li&gt;Find out what node synchronization options are available&lt;/li&gt; &#xA; &lt;li&gt;Running Avail Benchmarks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Interract with the chain&lt;/h2&gt; &#xA;&lt;p&gt;You can find on this repository many example on how to interract with any avail chain.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In the avail-js folder, you will find our wrapper for polkadot js including multiple helpers. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The example folder contains some examples using node-js and an example web app to setup the extension.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;In the avail-subxt folder, you will find our fork of subxt with some example on usage.&lt;/li&gt; &#xA; &lt;li&gt;In the examples folders you will find examples for: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Deno examples&lt;/li&gt; &#xA;   &lt;li&gt;Go examples&lt;/li&gt; &#xA;   &lt;li&gt;Validitum example implementation&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>