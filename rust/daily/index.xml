<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-03T01:34:09Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>face-hh/webx</title>
    <updated>2024-06-03T01:34:09Z</updated>
    <id>tag:github.com,2024-06-03:/face-hh/webx</id>
    <link href="https://github.com/face-hh/webx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An alternative for the World Wide Web - browse websites such as buss://yippie.rizz made in HTML, CSS and Lua. Custom web browser, custom HTML rendering engine, custom search engine, and more.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bussin Web X&lt;/h1&gt; &#xA;&lt;p&gt;An alternative to the World Wide Web (&lt;code&gt;http(s)://&lt;/code&gt;), with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;its own &lt;strong&gt;custom browser&lt;/strong&gt; written in Rust with &lt;a href=&#34;https://gtk.org/&#34;&gt;GTK&lt;/a&gt;,&lt;/li&gt; &#xA; &lt;li&gt;custom HTML, CSS and &lt;em&gt;&lt;strong&gt;Lua&lt;/strong&gt;&lt;/em&gt; engine (yup, &lt;strong&gt;no javascript! ðŸŽ‰&lt;/strong&gt;),&lt;/li&gt; &#xA; &lt;li&gt;custom &lt;strong&gt;DNS&lt;/strong&gt; allowing Top-Level domains such as &lt;code&gt;rizz&lt;/code&gt;, &lt;code&gt;sigma&lt;/code&gt;, &lt;code&gt;lol&lt;/code&gt;, &lt;code&gt;dev&lt;/code&gt;, etc,&lt;/li&gt; &#xA; &lt;li&gt;and &lt;strong&gt;search engine&lt;/strong&gt; at &lt;code&gt;buss://dingle.it&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/face-hh/webx/master/.github_assets/image.png&#34; alt=&#34;Preview of buss://register.it, the frontend for registering domains&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;File structure&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/napture&lt;/code&gt; - The source code for the &lt;strong&gt;browser&lt;/strong&gt; Bussin Napture, used to view buss:// sites.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/dns&lt;/code&gt; - The source code for the &lt;strong&gt;DNS&lt;/strong&gt; (Domain Name System), used for the API at &lt;code&gt;https://api.buss.lol&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/dingle&lt;/code&gt; - The source code for the official &lt;strong&gt;search engine&lt;/strong&gt; (API) of Web X. For the frontend, check &lt;a href=&#34;https://github.com/face-hh/dingle-frontend&#34;&gt;dingle frontend repo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/face-hh/webx-registrar&#34;&gt;registrar&lt;/a&gt; - The source code for &lt;code&gt;buss://register.it&lt;/code&gt;, frontend for &lt;code&gt;https://api.buss.lol&lt;/code&gt; made for Bussin Web X. This can also serve as an example for how buss:// sites are made.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Download and Install&lt;/h1&gt; &#xA;&lt;h2&gt;Arch Linux&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;yay -S napture&lt;/code&gt;, it&#39;s available on AUR.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Nix[OS]&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Flakes&lt;/strong&gt;: The repository provides a flake which exposes an overlay providing the webx package, so you could just add the input in your flake.nix file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;{&#xA;    inputs = {&#xA;        webx.url = &#34;github:face-hh/webx&#34;;&#xA;    };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then add it to your overlays and install it&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;{ inputs, ... }: {&#xA;    nixpkgs.overlays = [&#xA;        inputs.webx.overlays.x86_64-linux.default&#xA;    ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For now, only tested on x86_64-linux, but may work on others aswell, just change the arch&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Add it to either home.packages (home manager) or environment.systemPackages (global packages).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;home.packages = with pkgs; [&#xA;    webx&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you could just launch it using &lt;code&gt;webx&lt;/code&gt; in your terminal.&lt;/p&gt; &#xA;&lt;h2&gt;Linux&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For now, you have to download &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;Rust&lt;/a&gt;. Then, you just need to open &lt;code&gt;install-linux&lt;/code&gt; as an executable (if you can&#39;t execute it, first do &lt;code&gt;sudo chmod +x ./install-linux&lt;/code&gt;, then you should be able to install).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;macOS&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For now, you have to download &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;Rust&lt;/a&gt; and &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;. Then, you just need to open &lt;code&gt;install-macos&lt;/code&gt; as an executable (if you can&#39;t execute it, first do &lt;code&gt;chmod +x ./install-macos&lt;/code&gt;, then you should be able to install).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Windows&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install the executable from the release tab. It&#39;s a self-extractor with WinRAR because it has a lot of DLLs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Download and Compile&lt;/h1&gt; &#xA;&lt;h2&gt;Linux&lt;/h2&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;Rust&lt;/a&gt; if you haven&#39;t already. It should work by default, but if you&#39;re getting errors such as &#34;missing PC files&#34;, you should Google it. Most likely you just have to install a library&lt;/p&gt; &#xA;&lt;h2&gt;Windows&lt;/h2&gt; &#xA;&lt;p&gt;Welcome to Gaming OS ðŸ™‚&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Download GNU target: &lt;code&gt;rustup toolchain install stable-gnu &amp;amp;&amp;amp; rustup default stable-gnu&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Download &lt;a href=&#34;https://www.msys2.org/&#34;&gt;MSYS32&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open MSYS32 MINGW32&lt;/li&gt; &#xA; &lt;li&gt;Run: &lt;code&gt;pacman -Syu&lt;/code&gt; just in case.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pacman -S mingw-w64-x86_64-toolchain base-devel mingw-w64-x86_64-gtk4 mingw-w64-x86_64-gettext mingw-w64-x86_64-libxml2 mingw-w64-x86_64-librsvg mingw-w64-x86_64-pkgconf mingw-w64-x86_64-gcc mingw-w64-x86_64-libadwaita mingw-w64-x86_64-lua&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Go to &lt;code&gt;Settings&lt;/code&gt; -&amp;gt; &lt;code&gt;Search&lt;/code&gt; and open &lt;code&gt;Advanced system settings&lt;/code&gt; -&amp;gt; Click on &lt;code&gt;Environment variables&lt;/code&gt; (or just search &#34;path&#34;)&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;code&gt;Path&lt;/code&gt; -&amp;gt; Click on &lt;code&gt;Edit&lt;/code&gt; -&amp;gt; Add the following three entries: &lt;code&gt;C:\msys64\mingw64\include&lt;/code&gt;, &lt;code&gt;C:\msys64\mingw64\bin&lt;/code&gt;, and &lt;code&gt;C:\msys64\mingw64\lib&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Open a terminal in the folder with &lt;code&gt;napture/&lt;/code&gt;, run &lt;code&gt;cargo run&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;MacOS (Apple Silicon)&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install PKG_CONFIG_PATH and ensure it&#39;s set in your path&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install pkg-config&#xA;which pkg-config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;3.1. Should return something like &lt;code&gt;/opt/homebrew/bin/pkg-config&lt;/code&gt;. If it doesn&#39;t, add it to your path.&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Install GTK and Necessary Libraries&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install glib&#xA;brew install gobject-introspection&#xA;brew install graphene&#xA;brew install gdk-pixbuf&#xA;brew install pango&#xA;brew install gtk+4&#xA;brew install libadwaita&#xA;brew install lua@5.4&#xA;&#xA;brew --prefix glib&#xA;brew --prefix gobject-introspection&#xA;brew --prefix graphene&#xA;brew --prefix gdk-pixbuf&#xA;brew --prefix pango&#xA;brew --prefix gtk4&#xA;brew --prefix libadwaita&#xA;brew --prefix lua@5.4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;4.1 Validate if the libraries are installed adequately and set in PKG_CONFIG_PATH, command below should return the path to the libraries without any errors.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pkg-config --libs --cflags glib-2.0&#xA;pkg-config --libs --cflags gobject-2.0&#xA;pkg-config --libs --cflags graphene-gobject-1.0&#xA;pkg-config --libs --cflags gdk-pixbuf-2.0&#xA;pkg-config --libs --cflags pango&#xA;pkg-config --libs --cflags gtk4&#xA;pkg-config --libs --cflags libadwaita-1&#xA;pkg-config --libs --cflags lua-5.4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Run &lt;code&gt;cargo run&lt;/code&gt; in the &lt;code&gt;napture/&lt;/code&gt; directory.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd napture&#xA;&#xA;cargo build&#xA;# or&#xA;cargo run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Register website&lt;/h1&gt; &#xA;&lt;p&gt;Please follow &lt;a href=&#34;https://facedev.gitbook.io/bussin-web-x-how-to-make-a-website/&#34;&gt;How to code a Buss site&lt;/a&gt; for a better visual guide.&lt;/p&gt; &#xA;&lt;p&gt;So you wish to publish a website to Web X? Great! Let&#39;s go through the rules:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If your website contains Not Safe For Work material of any kind, it will be removed.&lt;/li&gt; &#xA; &lt;li&gt;If your website contains frequent racial slurs, references made in bad faith to tragic events, racism towards other races, or anything of that kind, it will be removed.&lt;/li&gt; &#xA; &lt;li&gt;If your website is dedicated to the publication of private information, it will be removed.&lt;/li&gt; &#xA; &lt;li&gt;If your website is actively engaged in leaking information about incoming traffic (i.e., posting the IPs of users), it will be removed.&lt;/li&gt; &#xA; &lt;li&gt;If your website displays content that violates law or regulations, including but not limited to, piracy, hacking, or illegal activities such as drug usage, will result in a removal.&lt;/li&gt; &#xA; &lt;li&gt;If your website contains or distributes malware, viruses, or any other harmful software, it will be removed.&lt;/li&gt; &#xA; &lt;li&gt;If your website is dedicated to harassment, bullying, or targeted attacks against individuals or groups, it will be removed.&lt;/li&gt; &#xA; &lt;li&gt;If your website infringes upon intellectual property rights of others, it will be removed.&lt;/li&gt; &#xA; &lt;li&gt;If your website is involved in fradulent activities, scams, or deceptive practices, it will be removed.&lt;/li&gt; &#xA; &lt;li&gt;If your website contains content that encourages harmful behavior, including self-harm, suicide, substance abuse, or dangerous challanges, it will be removed.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;By publishing content to this platform (&#34;Bussin Napture&#34;/&#34;Bussin Web X&#34;), you agree to comply with all rules and regulations set forth by the administrators. The administrators reserve the right to interpret and enforce these rules at their discretion. To report websites that are not following the listed rules, please contact &lt;code&gt;FaceDev&lt;/code&gt; on either &lt;a href=&#34;https://twitter.com/facedevstuff&#34;&gt;Twitter&lt;/a&gt; or &lt;a href=&#34;https://discord.gg/cNwWvdWj42&#34;&gt;Discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Now, to register a website, navigate to &lt;code&gt;buss://register.it&lt;/code&gt; &lt;strong&gt;through Bussin Napture&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You will see this interface. &lt;img src=&#34;https://raw.githubusercontent.com/face-hh/webx/master/.github_assets/image.png&#34; alt=&#34;Preview of buss://register.it, the frontend for registering domains&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;What you need is the &lt;strong&gt;Publish&lt;/strong&gt; section.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;for the domain name, choose whatever you want. (example: &lt;code&gt;duckduckgo&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;for the TLD, choose one displayed above the &lt;code&gt;Result will appear...&lt;/code&gt; label. (example: &lt;code&gt;rizz&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;for the IP, you can either use: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;an IP that serves &lt;code&gt;/index.html&lt;/code&gt; on port 80&lt;/li&gt; &#xA;   &lt;li&gt;a GitHub repository that has &lt;code&gt;index.html&lt;/code&gt;, &lt;strong&gt;outside any folder&lt;/strong&gt;. (example: &lt;a href=&#34;https://github.com/face-hh/webx-registrar&#34;&gt;registrar&lt;/a&gt;), &lt;em&gt;&lt;strong&gt;with the &lt;code&gt;main&lt;/code&gt; default branch&lt;/strong&gt;&lt;/em&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Don&#39;t worry! The IP doesn&#39;t have to be valid, and you can save the domain for later!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: After creating the domain, you&#39;ll be shown a &lt;strong&gt;secret key&lt;/strong&gt;. Please make sure to save it as you will need it to Update/Delete your domain.&lt;/p&gt; &#xA;&lt;h1&gt;Run website locally&lt;/h1&gt; &#xA;&lt;p&gt;Bussin Napture fetches &lt;code&gt;index.html&lt;/code&gt; at whatever path you give it. For example, if you enter &lt;code&gt;http://localhost:3000&lt;/code&gt;, Napture will fetch &lt;code&gt;http://localhost:3000/index.html&lt;/code&gt;. From the index.html, if you have further &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; imports, they will be fetched at &lt;code&gt;http://localhost:3000/file.(css|lua)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;To locally test a website, you can use something like &lt;a href=&#34;https://www.python.org/&#34;&gt;Python&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m http.server 3000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;CLI support with &lt;code&gt;./napture file:///home/path/to/folder&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Enter &lt;code&gt;file:///home/path/to/folder&lt;/code&gt; in the search bar.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;HTML guide&lt;/h1&gt; &#xA;&lt;p&gt;The supported tags are: &lt;code&gt;head&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;link&lt;/code&gt;, &lt;code&gt;meta&lt;/code&gt;, &lt;code&gt;script&lt;/code&gt;, &lt;code&gt;h1&lt;/code&gt;-&lt;code&gt;h6&lt;/code&gt;, &lt;code&gt;div&lt;/code&gt;, &lt;code&gt;p&lt;/code&gt;, &lt;code&gt;ul&lt;/code&gt;, &lt;code&gt;ol&lt;/code&gt;, &lt;code&gt;li&lt;/code&gt;, &lt;code&gt;div&lt;/code&gt;, &lt;code&gt;button&lt;/code&gt;, &lt;code&gt;hr&lt;/code&gt;, &lt;code&gt;img&lt;/code&gt;, &lt;code&gt;input&lt;/code&gt;, &lt;code&gt;textarea&lt;/code&gt;, &lt;code&gt;button&lt;/code&gt;, &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;option&lt;/code&gt;. Keep in mind their syntax may be different if you&#39;re already familiar with HTML5 (i.e. &lt;code&gt;link&lt;/code&gt; is used for the tab icon). Please check &lt;a href=&#34;https://github.com/face-hh/webx-registrar&#34;&gt;registrar&lt;/a&gt; or &lt;code&gt;/napture/test/index.html&lt;/code&gt; for examples.&lt;/p&gt; &#xA;&lt;h1&gt;CSS guide&lt;/h1&gt; &#xA;&lt;p&gt;The supported properties are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;border-color&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;border-width&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;border-style&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;border-radius&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;padding&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;direction&lt;/code&gt; (row | column)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;align-items&lt;/code&gt;: (fill | start | center | end)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gap&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;color&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;font-size&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;font-height&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;font-family&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;font-weight&lt;/code&gt; (ultralight | light | normal | bold | ultrabold | heavy)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;underline&lt;/code&gt; (none | single | double | low | error)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;underline-color&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;overline&lt;/code&gt; (none | single)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;overline-color&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;strikethrough&lt;/code&gt; (false | true)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;strikethrough-color&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;margin-left&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;margin-right&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;margin-top&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;margin-bottom&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;width&lt;/code&gt; (only on &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; &amp;amp; &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;height&lt;/code&gt; (only on &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; &amp;amp; &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Properties whose value type wasn&#39;t specified are either measured in &lt;code&gt;px&lt;/code&gt;, or are colors (&lt;code&gt;#fff&lt;/code&gt;, &lt;code&gt;red&lt;/code&gt;, etc.)&lt;/p&gt; &#xA;&lt;h1&gt;Lua guide&lt;/h1&gt; &#xA;&lt;p&gt;For those coming from the traditional web...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;- 1. const test = document.querySelector(&#34;.classExample&#34;);&#xA;- 2. test.textContent = &#34;abc&#34;;&#xA;- 3. test.href = &#34;https://ok.test&#34;&#xA;- 4. console.log(test.href)&#xA;- 5. test.addEventListener(&#34;click&#34;, () =&amp;gt; {})&#xA;- 6. test.addEventListener(&#34;submit&#34;, () =&amp;gt; {})&#xA;+ 1. local test = get(&#34;classExample&#34;)&#xA;+ 2. test.set_content(&#34;abc&#34;);&#xA;+ 3. test.set_href(&#34;buss://register.it&#34;)&#xA;+ 4. print(test.get_href())&#xA;+ 5. test.on_click(function())&#xA;+ 6. test.on_submit(function())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;I believe you&#39;d get a better understand if you explored the &lt;a href=&#34;https://github.com/face-hh/webx-registrar&#34;&gt;registrar&lt;/a&gt; repository&#39;s &lt;code&gt;script.lua&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: Bussin Napture doesn&#39;t support &lt;code&gt;buss://&lt;/code&gt; redirects yet. They will be added in the official release.&lt;/p&gt; &#xA;&lt;p&gt;Made by FaceDev with pure utter hatred and undesire :D&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Xudong-Huang/may</title>
    <updated>2024-06-03T01:34:09Z</updated>
    <id>tag:github.com,2024-06-03:/Xudong-Huang/may</id>
    <link href="https://github.com/Xudong-Huang/may" rel="alternate"></link>
    <summary type="html">&lt;p&gt;rust stackful coroutine library&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;May&lt;/h1&gt; &#xA; &lt;a href=&#34;https://github.com/Xudong-Huang/may/actions?query=workflow%3ACI+branch%3Amaster&#34;&gt; &lt;img src=&#34;https://github.com/Xudong-Huang/may/workflows/CI/badge.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://crates.io/crates/may&#34;&gt; &lt;img src=&#34;https://img.shields.io/crates/v/may.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://docs.rs/may&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/doc-may-green.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA; &lt;p&gt;May is a high-performance library for programming stackful coroutines with which you can easily develop and maintain massive concurrent programs. It can be thought as the Rust version of the popular &lt;a href=&#34;https://tour.golang.org/concurrency/1&#34;&gt;Goroutine&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Xudong-Huang/may/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Xudong-Huang/may/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Xudong-Huang/may/master/#more-examples&#34;&gt;More examples&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Xudong-Huang/may/master/#the-cpu-heavy-load-examples&#34;&gt;The CPU heavy load examples&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Xudong-Huang/may/master/#the-io-heavy-bound-examples&#34;&gt;The I/O heavy bound examples&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Xudong-Huang/may/master/#performance&#34;&gt;Performance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Xudong-Huang/may/master/#caveat&#34;&gt;Caveat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Xudong-Huang/may/master/#how-to-tune-a-stack-size&#34;&gt;How to tune a stack size&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Xudong-Huang/may/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The stackful coroutine implementation is based on &lt;a href=&#34;https://github.com/Xudong-Huang/generator-rs&#34;&gt;generator&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;Support schedule on a configurable number of threads for multi-core systems;&lt;/li&gt; &#xA; &lt;li&gt;Support coroutine version of a local storage (&lt;a href=&#34;https://raw.githubusercontent.com/Xudong-Huang/may/master/docs/CLS_instead_of_TLS.md&#34;&gt;CLS&lt;/a&gt;);&lt;/li&gt; &#xA; &lt;li&gt;Support efficient asynchronous network I/O;&lt;/li&gt; &#xA; &lt;li&gt;Support efficient timer management;&lt;/li&gt; &#xA; &lt;li&gt;Support standard synchronization primitives, a semaphore, an MPMC channel, etc;&lt;/li&gt; &#xA; &lt;li&gt;Support cancellation of coroutines;&lt;/li&gt; &#xA; &lt;li&gt;Support graceful panic handling that will not affect other coroutines;&lt;/li&gt; &#xA; &lt;li&gt;Support scoped coroutine creation;&lt;/li&gt; &#xA; &lt;li&gt;Support general selection for all the coroutine API;&lt;/li&gt; &#xA; &lt;li&gt;All the coroutine API are compatible with the standard library semantics;&lt;/li&gt; &#xA; &lt;li&gt;All the coroutine API can be safely called in multi-threaded context;&lt;/li&gt; &#xA; &lt;li&gt;Both stable, beta, and nightly channels are supported;&lt;/li&gt; &#xA; &lt;li&gt;x86_64 GNU/Linux, x86_64 Windows, x86_64 macOS, AArch64 GNU/Linux, and AArch64 macOS are supported.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;A naive echo server implemented with May:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;#[macro_use]&#xA;extern crate may;&#xA;&#xA;use may::net::TcpListener;&#xA;use std::io::{Read, Write};&#xA;&#xA;fn main() {&#xA;    let listener = TcpListener::bind(&#34;127.0.0.1:8000&#34;).unwrap();&#xA;    while let Ok((mut stream, _)) = listener.accept() {&#xA;        go!(move || {&#xA;            let mut buf = vec![0; 1024 * 16]; // alloc in heap!&#xA;            while let Ok(n) = stream.read(&amp;amp;mut buf) {&#xA;                if n == 0 {&#xA;                    break;&#xA;                }&#xA;                stream.write_all(&amp;amp;buf[0..n]).unwrap();&#xA;            }&#xA;        });&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;More examples&lt;/h2&gt; &#xA;&lt;h3&gt;The CPU heavy load examples&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Xudong-Huang/quick_sort&#34;&gt;The &#34;Quick Sort&#34; algorithm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Xudong-Huang/prime&#34;&gt;A prime number generator&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;The I/O heavy bound examples&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Xudong-Huang/may/master/examples/echo.rs&#34;&gt;An echo server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Xudong-Huang/may/master/examples/echo_client.rs&#34;&gt;An echo client&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Xudong-Huang/may/master/examples/http.rs&#34;&gt;A simple HTTP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Xudong-Huang/may/master/examples/https.rs&#34;&gt;A simple HTTPS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Xudong-Huang/may/master/examples/websocket.rs&#34;&gt;WebSockets&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;You can refer to &lt;a href=&#34;https://tfb-status.techempower.com/&#34;&gt;https://tfb-status.techempower.com/&lt;/a&gt; to get the latest &lt;a href=&#34;https://github.com/Xudong-Huang/may_minihttp&#34;&gt;may_minihttp&lt;/a&gt; comparisons with other most popular frameworks.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Caveat&lt;/h2&gt; &#xA;&lt;p&gt;There is a detailed &lt;a href=&#34;https://raw.githubusercontent.com/Xudong-Huang/may/master/docs/may_caveat.md&#34;&gt;document&lt;/a&gt; that describes May&#39;s main restrictions. In general, there are four things you should follow when writing programs that use coroutines:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Don&#39;t call thread-blocking API (It will hurt the performance);&lt;/li&gt; &#xA; &lt;li&gt;Carefully use Thread Local Storage (access TLS in coroutine might trigger undefined behavior).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;It&#39;s considered &lt;strong&gt;unsafe&lt;/strong&gt; with the following pattern:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;set_tls();&#xA;// Or another coroutine API that would cause scheduling:&#xA;coroutine::yield_now(); &#xA;use_tls();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;but it&#39;s &lt;strong&gt;safe&lt;/strong&gt; if your code is not sensitive about the previous state of TLS. Or there is no coroutines scheduling between &lt;strong&gt;set&lt;/strong&gt; TLS and &lt;strong&gt;use&lt;/strong&gt; TLS.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Don&#39;t run CPU bound tasks for long time, but it&#39;s ok if you don&#39;t care about fairness;&lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t exceed the coroutine stack. There is a guard page for each coroutine stack. When stack overflow occurs, it will trigger segment fault error.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The first three rules are common when using cooperative asynchronous libraries in Rust. Even using a futures-based system also have these limitations. So what you should really focus on is a coroutine stack size, make sure it&#39;s big enough for your applications.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;How to tune a stack size&lt;/h2&gt; &#xA;&lt;p&gt;If you want to tune your coroutine stack size, please check out &lt;a href=&#34;https://raw.githubusercontent.com/Xudong-Huang/may/master/docs/tune_stack_size.md&#34;&gt;this document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;May is licensed under either of the following, at your option:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The Apache License v2.0.0 (&lt;a href=&#34;https://raw.githubusercontent.com/Xudong-Huang/may/master/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;);&lt;/li&gt; &#xA; &lt;li&gt;The MIT License (&lt;a href=&#34;https://raw.githubusercontent.com/Xudong-Huang/may/master/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;http://opensource.org/licenses/MIT&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- refs --&gt;</summary>
  </entry>
  <entry>
    <title>apache/datafusion-ballista</title>
    <updated>2024-06-03T01:34:09Z</updated>
    <id>tag:github.com,2024-06-03:/apache/datafusion-ballista</id>
    <link href="https://github.com/apache/datafusion-ballista" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Apache Arrow Ballista Distributed Query Engine&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ballista: Distributed SQL Query Engine, built on Apache Arrow&lt;/h1&gt; &#xA;&lt;p&gt;Ballista is a distributed SQL query engine powered by the Rust implementation of &lt;a href=&#34;https://arrow.apache.org/&#34;&gt;Apache Arrow&lt;/a&gt; and &lt;a href=&#34;https://github.com/apache/arrow-datafusion&#34;&gt;Apache Arrow DataFusion&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are looking for documentation for a released version of Ballista, please refer to the &lt;a href=&#34;https://arrow.apache.org/ballista/&#34;&gt;Ballista User Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Ballista implements a similar design to Apache Spark (particularly Spark SQL), but there are some key differences:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The choice of Rust as the main execution language avoids the overhead of GC pauses and results in deterministic processing times.&lt;/li&gt; &#xA; &lt;li&gt;Ballista is designed from the ground up to use columnar data, enabling a number of efficiencies such as vectorized processing (SIMD) and efficient compression. Although Spark does have some columnar support, it is still largely row-based today.&lt;/li&gt; &#xA; &lt;li&gt;The combination of Rust and Arrow provides excellent memory efficiency and memory usage can be 5x - 10x lower than Apache Spark in some cases, which means that more processing can fit on a single node, reducing the overhead of distributed compute.&lt;/li&gt; &#xA; &lt;li&gt;The use of Apache Arrow as the memory model and network protocol means that data can be exchanged efficiently between executors using the &lt;a href=&#34;https://arrow.apache.org/blog/2019/10/13/introducing-arrow-flight/&#34;&gt;Flight Protocol&lt;/a&gt;, and between clients and schedulers/executors using the &lt;a href=&#34;https://arrow.apache.org/blog/2022/02/16/introducing-arrow-flight-sql/&#34;&gt;Flight SQL Protocol&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;A Ballista cluster consists of one or more scheduler processes and one or more executor processes. These processes can be run as native binaries and are also available as Docker Images, which can be easily deployed with &lt;a href=&#34;https://arrow.apache.org/ballista/user-guide/deployment/docker-compose.html&#34;&gt;Docker Compose&lt;/a&gt; or &lt;a href=&#34;https://arrow.apache.org/ballista/user-guide/deployment/kubernetes.html&#34;&gt;Kubernetes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The following diagram shows the interaction between clients and the scheduler for submitting jobs, and the interaction between the executor(s) and the scheduler for fetching tasks and reporting task status.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apache/datafusion-ballista/main/docs/source/contributors-guide/ballista.drawio.png&#34; alt=&#34;Ballista Cluster Diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/apache/datafusion-ballista/main/docs/source/contributors-guide/architecture.md&#34;&gt;architecture guide&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports HDFS as well as cloud object stores. S3 is supported today and GCS and Azure support is planned.&lt;/li&gt; &#xA; &lt;li&gt;DataFrame and SQL APIs available from Python and Rust.&lt;/li&gt; &#xA; &lt;li&gt;Clients can connect to a Ballista cluster using &lt;a href=&#34;https://arrow.apache.org/blog/2022/02/16/introducing-arrow-flight-sql/&#34;&gt;Flight SQL&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;JDBC support via Arrow Flight SQL JDBC Driver&lt;/li&gt; &#xA; &lt;li&gt;Scheduler web interface and REST UI for monitoring query progress and viewing query plans and metrics.&lt;/li&gt; &#xA; &lt;li&gt;Support for Docker, Docker Compose, and Kubernetes deployment, as well as manual deployment on bare metal.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;We run some simple benchmarks comparing Ballista with Apache Spark to track progress with performance optimizations. These are benchmarks derived from TPC-H and not official TPC-H benchmarks. These results are from running individual queries at scale factor 10 (10 GB) on a single node with a single executor and 24 concurrent tasks.&lt;/p&gt; &#xA;&lt;p&gt;The tracking issue for improving these results is &lt;a href=&#34;https://github.com/apache/arrow-ballista/issues/339&#34;&gt;#339&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apache/datafusion-ballista/main/docs/sqlbench-h-perf-0.12.png&#34; alt=&#34;benchmarks&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;p&gt;The easiest way to get started is to run one of the standalone or distributed &lt;a href=&#34;https://raw.githubusercontent.com/apache/datafusion-ballista/main/examples/README.md&#34;&gt;examples&lt;/a&gt;. After that, refer to the &lt;a href=&#34;https://raw.githubusercontent.com/apache/datafusion-ballista/main/ballista/client/README.md&#34;&gt;Getting Started Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Project Status&lt;/h2&gt; &#xA;&lt;p&gt;Ballista supports a wide range of SQL, including CTEs, Joins, and Subqueries and can execute complex queries at scale.&lt;/p&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://arrow.apache.org/datafusion/user-guide/sql/index.html&#34;&gt;DataFusion SQL Reference&lt;/a&gt; for more information on supported SQL.&lt;/p&gt; &#xA;&lt;p&gt;Ballista is maturing quickly and is now working towards being production ready. See the &lt;a href=&#34;https://raw.githubusercontent.com/apache/datafusion-ballista/main/ROADMAP.md&#34;&gt;roadmap&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution Guide&lt;/h2&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://raw.githubusercontent.com/apache/datafusion-ballista/main/CONTRIBUTING.md&#34;&gt;Contribution Guide&lt;/a&gt; for information about contributing to Ballista.&lt;/p&gt;</summary>
  </entry>
</feed>