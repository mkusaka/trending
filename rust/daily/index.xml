<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-18T01:40:42Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rust-itertools/itertools</title>
    <updated>2023-11-18T01:40:42Z</updated>
    <id>tag:github.com,2023-11-18:/rust-itertools/itertools</id>
    <link href="https://github.com/rust-itertools/itertools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Extra iterator adaptors, iterator methods, free functions, and macros.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Itertools&lt;/h1&gt; &#xA;&lt;p&gt;Extra iterator adaptors, functions and macros.&lt;/p&gt; &#xA;&lt;p&gt;Please read the &lt;a href=&#34;https://docs.rs/itertools/&#34;&gt;API documentation here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rust-itertools/itertools/actions&#34;&gt;&lt;img src=&#34;https://github.com/rust-itertools/itertools/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;build_status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/itertools&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/itertools.svg?sanitize=true&#34; alt=&#34;crates.io&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;How to use with Cargo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[dependencies]&#xA;itertools = &#34;0.12.0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;How to use in your crate:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use itertools::Itertools;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to contribute&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fix a bug or implement a new thing&lt;/li&gt; &#xA; &lt;li&gt;Include tests for your new feature, preferably a QuickCheck test&lt;/li&gt; &#xA; &lt;li&gt;Make a Pull Request&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For new features, please first consider filing a PR to &lt;a href=&#34;https://github.com/rust-lang/rust&#34;&gt;rust-lang/rust&lt;/a&gt;, adding your new feature to the &lt;code&gt;Iterator&lt;/code&gt; trait of the standard library, if you believe it is reasonable. If it isn&#39;t accepted there, proposing it for inclusion in &lt;code&gt;itertools&lt;/code&gt; is a good idea. The reason for doing is this is so that we avoid future breakage as with &lt;code&gt;.flatten()&lt;/code&gt;. However, if your feature involves heap allocation, such as storing elements in a &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;, then it can&#39;t be accepted into &lt;code&gt;libcore&lt;/code&gt;, and you should propose it for &lt;code&gt;itertools&lt;/code&gt; directly instead.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Dual-licensed to be compatible with the Rust project.&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0 &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;https://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt; or the MIT license &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;https://opensource.org/licenses/MIT&lt;/a&gt;, at your option. This file may not be copied, modified, or distributed except according to those terms.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>denoland/denokv</title>
    <updated>2023-11-18T01:40:42Z</updated>
    <id>tag:github.com,2023-11-18:/denoland/denokv</id>
    <link href="https://github.com/denoland/denokv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A self-hosted backend for Deno KV&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;denokv&lt;/h1&gt; &#xA;&lt;p&gt;A self-hosted backend for &lt;a href=&#34;https://deno.com/kv&#34;&gt;Deno KV&lt;/a&gt;, the JavaScript first key-value database:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Seamlessly integrated JavaScript APIs&lt;/li&gt; &#xA; &lt;li&gt;ACID transactions&lt;/li&gt; &#xA; &lt;li&gt;Multiple consistency levels for optimal performance for every usecase&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/denoland/denokv/main/.github/diagram-dark.png#gh-dark-mode-only&#34; alt=&#34;Diagram showing how a denokv setup looks&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/denoland/denokv/main/.github/diagram-light.png#gh-light-mode-only&#34; alt=&#34;Diagram showing how a denokv setup looks&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Deno KV can be used with the built-in single instance database in the CLI, useful for testing and development, with a hosted and &lt;a href=&#34;https://deno.com/blog/building-deno-kv&#34;&gt;scalable backend&lt;/a&gt; on &lt;a href=&#34;https://deno.com/deploy&#34;&gt;Deno Deploy&lt;/a&gt;, or with this self-hostable Deno KV backend.&lt;/p&gt; &#xA;&lt;p&gt;To run &lt;code&gt;denokv&lt;/code&gt;, just run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run -it --init -p 4512:4512 -v ./data:/data ghcr.io/denoland/denokv --sqlite-path /data/denokv.sqlite serve --access-token &amp;lt;random-token&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run your Deno program and specify the access token in the &lt;code&gt;DENO_KV_ACCESS_TOKEN&lt;/code&gt; environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const kv = await Deno.openKv(&#34;http://localhost:4512&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The self-hosted &lt;code&gt;denokv&lt;/code&gt; backend is built on the same robust SQLite backend as the built-in single instance database in the CLI. It is designed to be run on a VPS or Kubernetes cluster statefully, with Deno processes connecting via the network using &lt;a href=&#34;https://docs.deno.com/kv/manual/on_deploy#connect-to-managed-databases-from-outside-of-deno-deploy&#34;&gt;KV Connect&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The standalone &lt;code&gt;denokv&lt;/code&gt; binary is designed to handle thousands of concurrent requests, from hundreds of different Deno processes. It is built on top of the robust SQLite database, and uses non-blocking IO to ensure excellent performance even in the face of hundreds of concurrent connections.&lt;/p&gt; &#xA;&lt;p&gt;Just like the Deno CLI, &lt;code&gt;denokv&lt;/code&gt; is MIT licensed, free and open source.&lt;/p&gt; &#xA;&lt;p&gt;Read more in &lt;a href=&#34;https://deno.com/blog/kv-is-open-source-with-continuous-backup&#34;&gt;the announcement of self-hosted Deno KV&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;When should I use this?&lt;/h2&gt; &#xA;&lt;p&gt;If you need more than a single Deno process to access the same KV database, and you are ok with running a server, keeping &lt;code&gt;denokv&lt;/code&gt; updated, handling backups, and performing regular maintenance, then this is for you.&lt;/p&gt; &#xA;&lt;p&gt;You can use a hosted KV database on Deno Deploy if you don&#39;t want to self-host and manage a &lt;code&gt;denokv&lt;/code&gt; server.&lt;/p&gt; &#xA;&lt;p&gt;If you are just need a backend for local development or testing, you can use the Deno KV backend built into the Deno CLI. You can open a temporary in memory KV database with &lt;code&gt;Deno.openKv(&#34;:memory:&#34;)&lt;/code&gt; or a persistent database by specifying a path like &lt;code&gt;Deno.openKv(&#34;./my-database.sqlite&#34;)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to run&lt;/h2&gt; &#xA;&lt;h3&gt;Docker on a VPS&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Ensure that you are running on a service that supports persistent storage, and does not perform auto-scaling beyond a single instance. This means you can not run &lt;code&gt;denokv&lt;/code&gt; on Google Cloud Run or AWS Lambda.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Install Docker on your VPS and create a directory for the database to store data in.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mkdir -p /data&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run the &lt;code&gt;denokv&lt;/code&gt; Docker image, mounting the &lt;code&gt;/data&lt;/code&gt; directory as a volume and specifying a random access token.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run -it --init -p 4512:4512 -v ./data:/data ghcr.io/denoland/denokv --sqlite-path /data/denokv.sqlite serve --access-token &amp;lt;random-token&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now access the database from your Deno programs by specifying the access token in the &lt;code&gt;DENO_KV_ACCESS_TOKEN&lt;/code&gt; environment variable, and the host and port of your VPS in the URL passed to &lt;code&gt;Deno.openKv&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You should additionally add a HTTPS terminating proxy or loadbalancer in front of &lt;code&gt;denokv&lt;/code&gt; to ensure that all communication happens over TLS. Not using TLS can pose a significant security risk. The HTTP protocol used by Deno KV is compatible with any HTTP proxy, such as &lt;code&gt;caddy&lt;/code&gt;, &lt;code&gt;nginx&lt;/code&gt;, or a loadbalancer.&lt;/p&gt; &#xA;&lt;h3&gt;Fly.io&lt;/h3&gt; &#xA;&lt;p&gt;You can easily host &lt;code&gt;denokv&lt;/code&gt; on &lt;a href=&#34;https://fly.io&#34;&gt;https://fly.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: Fly.io is a paid service. You will need to add a credit card to your account to use it.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Sign up to Fly.io and &lt;a href=&#34;https://fly.io/docs/hands-on/install-flyctl/&#34;&gt;install the &lt;code&gt;flyctl&lt;/code&gt; CLI&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Sign into the CLI with &lt;code&gt;flyctl auth login&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Create a new app with &lt;code&gt;flyctl apps create&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;fly.toml&lt;/code&gt; file with the following contents. Make sure to replace the &lt;code&gt;&amp;lt;your-app-name&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;region&amp;gt;&lt;/code&gt; placeholders with your app name and the region you want to deploy to.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;app = &#34;&amp;lt;your-app-name&amp;gt;&#34;&#xA;primary_region = &#34;&amp;lt;region&amp;gt;&#34;&#xA;&#xA;[build]&#xA;  image = &#34;ghcr.io/denoland/denokv:latest&#34;&#xA;&#xA;[http_service]&#xA;  internal_port = 4512&#xA;  force_https = true&#xA;  auto_stop_machines = true&#xA;  auto_start_machines = true&#xA;  min_machines_running = 0&#xA;&#xA;[env]&#xA;  DENO_KV_SQLITE_PATH=&#34;/data/denokv.sqlite3&#34;&#xA;  # access token is set via `flyctl secrets set`&#xA;&#xA;[mounts]&#xA;  destination = &#34;/data&#34;&#xA;  source = &#34;denokv_data&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;flyctl volumes create denokv_data&lt;/code&gt; to create a volume to store the database in.&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;flyctl secrets set DENO_KV_ACCESS_TOKEN=&amp;lt;random-token&amp;gt;&lt;/code&gt; to set the access token. Make sure to replace &lt;code&gt;&amp;lt;random-token&amp;gt;&lt;/code&gt; with a random string. Keep this token secret, and don&#39;t share it with anyone. You will need this token to connect to your database from Deno.&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;flyctl deploy&lt;/code&gt; to deploy your app.&lt;/p&gt; &#xA;&lt;p&gt;You can now access the database from your Deno programs by specifying the access token in the &lt;code&gt;DENO_KV_ACCESS_TOKEN&lt;/code&gt; environment variable, and the URL provided by &lt;code&gt;flyctl deploy&lt;/code&gt; in the URL passed to &lt;code&gt;Deno.openKv&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Be aware that with this configuration, your database can scale to 0 instances when not in use. This means that the first request to your database after a period of inactivity will be slow, as the database needs to be started. You can avoid this by setting &lt;code&gt;min_machines_running&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt;, and setting &lt;code&gt;auto_stop_machines = false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Install binary&lt;/h3&gt; &#xA;&lt;p&gt;You can download a prebuilt binary from the &lt;a href=&#34;https://github.com/denoland/denokv/releases/tag/0.1.0&#34;&gt;releases page&lt;/a&gt; and place it in your &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also compile from source by running &lt;code&gt;cargo install denokv --locked&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to connect&lt;/h2&gt; &#xA;&lt;h3&gt;Deno&lt;/h3&gt; &#xA;&lt;p&gt;To connect to a &lt;code&gt;denokv&lt;/code&gt; server from Deno, use the &lt;code&gt;Deno.openKv&lt;/code&gt; API:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const kv = await Deno.openKv(&#34;http://localhost:4512&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure to specify your access token in the &lt;code&gt;DENO_KV_ACCESS_TOKEN&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;!-- TBD: ### Node.js --&gt; &#xA;&lt;h2&gt;Advanced setup&lt;/h2&gt; &#xA;&lt;h3&gt;Running as a replica of a hosted KV database&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;denokv&lt;/code&gt; has a mode for running as a replica of a KV database hosted on Deno Deploy through the S3 backup feature.&lt;/p&gt; &#xA;&lt;p&gt;To run as a replica:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run -it --init -p 4512:4512 -v ./data:/data \&#xA;  -e AWS_ACCESS_KEY_ID=&#34;&amp;lt;aws-access-key-id&amp;gt;&#34; \&#xA;  -e AWS_SECRET_ACCESS_KEY=&#34;&amp;lt;aws-secret-access-key&amp;gt;&#34; \&#xA;  -e AWS_REGION=&#34;&amp;lt;aws-region&amp;gt;&#34; \&#xA;  ghcr.io/denoland/denokv --sqlite-path /data/denokv.sqlite serve \&#xA;  --access-token &amp;lt;random-token&amp;gt; --sync-from-s3 --s3-bucket your-bucket --s3-prefix some-prefix/6aea9765-2b1e-41c7-8904-0bdcd70b21d3/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To sync the local database from S3, without updating the snapshot:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;denokv --sqlite-path /data/denokv.sqlite pitr sync --s3-bucket your-bucket --s3-prefix some-prefix/6aea9765-2b1e-41c7-8904-0bdcd70b21d3/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To list recoverable points:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;denokv --sqlite-path /data/denokv.sqlite pitr list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To checkout the snapshot at a specific recoverable point:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;denokv --sqlite-path /data/denokv.sqlite pitr checkout 0100000002c0f4c10000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Continuous backup using LiteFS&lt;/h3&gt; &#xA;&lt;p&gt;TODO&lt;/p&gt; &#xA;&lt;h2&gt;Other things in this repo&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains two crates:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;denokv_proto&lt;/code&gt; (&lt;code&gt;/proto&lt;/code&gt;): Shared interfaces backing KV, like definitions of &lt;code&gt;Key&lt;/code&gt;, &lt;code&gt;Database&lt;/code&gt;, and &lt;code&gt;Value&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;denokv_sqlite&lt;/code&gt; (&lt;code&gt;/sqlite&lt;/code&gt;): An implementation of &lt;code&gt;Database&lt;/code&gt; backed by SQLite.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;denokv_remote&lt;/code&gt; (&lt;code&gt;/remote&lt;/code&gt;): An implementation of &lt;code&gt;Database&lt;/code&gt; backed by a remote KV database, acessible via the KV Connect protocol.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These crates are used by the &lt;code&gt;deno_kv&lt;/code&gt; crate in the Deno repository to provide a JavaScript API for interacting with Deno KV.&lt;/p&gt; &#xA;&lt;p&gt;The Deno KV Connect protocol used for communication between Deno and a remote KV database is defined in &lt;a href=&#34;https://raw.githubusercontent.com/denoland/denokv/main/proto/kv-connect.md&#34;&gt;&lt;code&gt;/proto/kv-connect.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>JuliaLang/juliaup</title>
    <updated>2023-11-18T01:40:42Z</updated>
    <id>tag:github.com,2023-11-18:/JuliaLang/juliaup</id>
    <link href="https://github.com/JuliaLang/juliaup" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Julia installer and version multiplexer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Juliaup - Julia version manager&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains a cross-platform installer for the Julia programming language.&lt;/p&gt; &#xA;&lt;p&gt;The installer also bundles a full Julia version manager called &lt;code&gt;juliaup&lt;/code&gt;. One can use &lt;code&gt;juliaup&lt;/code&gt; to install specific Julia versions, it alerts users when new Julia versions are released and provides a convenient Julia release channel abstraction.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;This installer is considered production ready.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;On all platforms it is recommended that you first uninstall any previous Julia versions and undo any modifications you might have made to put &lt;code&gt;julia&lt;/code&gt; on the &lt;code&gt;PATH&lt;/code&gt; before you install Julia with the installer in this repository.&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;On Windows Julia and Juliaup can be installed directly from the Windows store &lt;a href=&#34;https://www.microsoft.com/store/apps/9NJNWW8PVKMN&#34;&gt;here&lt;/a&gt;. One can also install exactly the same version by executing&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;winget install julia -s msstore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;on a command line.&lt;/p&gt; &#xA;&lt;p&gt;If the Windows Store is blocked on a system, we have an alternative &lt;a href=&#34;https://learn.microsoft.com/en-us/windows/msix/app-installer/app-installer-file-overview&#34;&gt;MSIX App Installer&lt;/a&gt; based setup. Note that this is currently experimental, please report back successes and failures &lt;a href=&#34;https://github.com/JuliaLang/juliaup/issues/343&#34;&gt;here&lt;/a&gt;. To use the App Installer version, download &lt;a href=&#34;https://install.julialang.org/Julia.appinstaller&#34;&gt;this&lt;/a&gt; file and open it by double clicking on it.&lt;/p&gt; &#xA;&lt;h3&gt;Mac and Linux&lt;/h3&gt; &#xA;&lt;p&gt;Juliaup can be installed on Linux or Mac by executing&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -fsSL https://install.julialang.org | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;in a shell.&lt;/p&gt; &#xA;&lt;h4&gt;Command line arguments&lt;/h4&gt; &#xA;&lt;p&gt;One can pass various command line arguments to the Julia installer. The syntax for installer arguments is&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -fsSL https://install.julialang.org | sh -s -- &amp;lt;ARGS&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here &lt;code&gt;&amp;lt;ARGS&amp;gt;&lt;/code&gt; should be replaced with one or more of the following arguments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--yes&lt;/code&gt; (or &lt;code&gt;-y&lt;/code&gt;): Run the installer in a non-interactive mode. All configuration values use their default.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--default-channel &amp;lt;NAME&amp;gt;&lt;/code&gt;: Configure the default channel. For example &lt;code&gt;--default-channel lts&lt;/code&gt; would install the &lt;code&gt;lts&lt;/code&gt; channel and configure it as the default.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Software Repositories&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important note:&lt;/strong&gt; As of now, we strongly recommend to install Juliaup via the Windows Store or &lt;code&gt;curl&lt;/code&gt; command above rather than through OS-specific software repositories (see below) as the Juliaup variants provided by the latter currently have some drawbacks (that we hope to lift in the future).&lt;/p&gt; &#xA;&lt;h5&gt;&lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install juliaup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;&lt;a href=&#34;https://aur.archlinux.org/packages/juliaup/&#34;&gt;Arch Linux - AUR&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;p&gt;On Arch Linux, Juliaup is available &lt;a href=&#34;https://aur.archlinux.org/packages/juliaup/&#34;&gt;in the Arch User Repository (AUR)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;a href=&#34;https://get.opensuse.org/tumbleweed/&#34;&gt;openSUSE Tumbleweed&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;p&gt;On openSUSE Tumbleweed, Juliaup is available. To install, run with root privileges:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;zypper install juliaup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;&lt;a href=&#34;https://getsol.us&#34;&gt;Solus&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;p&gt;On Solus, Juliaup is available. To install, run with root privileges:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;eopkg install juliaup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;&lt;a href=&#34;https://crates.io/crates/juliaup/&#34;&gt;cargo&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;p&gt;To install via Rust&#39;s cargo, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo install juliaup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using Juliaup&lt;/h2&gt; &#xA;&lt;p&gt;Once you have installed Juliaup, &lt;code&gt;julia&lt;/code&gt; is on the &lt;code&gt;PATH&lt;/code&gt;, and on Windows there is a start menu shortcut and it will show up as a profile in Windows Terminal. Any of those will start Julia. The VS Code extension will also automatically find this Julia installation.&lt;/p&gt; &#xA;&lt;p&gt;Here are some of the things you can do with &lt;code&gt;juliaup&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;juliaup list&lt;/code&gt; lists all the available channels.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;juliaup update&lt;/code&gt; installs the latest available Julia version for all your channels.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;juliaup update release&lt;/code&gt; updates the &lt;code&gt;release&lt;/code&gt; channel to the latest version.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;juliaup status&lt;/code&gt; shows you which Julia versions you have installed and which one is configured as the default.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;juliaup add 1.5.1&lt;/code&gt; adds Julia 1.5.1 to your system (it can then be launched via the command &lt;code&gt;julia +1.5.1&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;juliaup default 1.5.3&lt;/code&gt; configures the &lt;code&gt;julia&lt;/code&gt; command to start Julia 1.5.3.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;juliaup default 1.6&lt;/code&gt; configures the &lt;code&gt;julia&lt;/code&gt; command to start the latest 1.6.x version of Julia you have installed on your system (and inform you if there is a newer version in 1.6.x available).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;juliaup default release&lt;/code&gt; configures the &lt;code&gt;julia&lt;/code&gt; command to start the latest stable version of Julia (this is also the default value).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;juliaup remove 1.5.3&lt;/code&gt; deletes Julia 1.5.3 from your system.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;juliaup add 1.6.1~x86&lt;/code&gt; installs the 32 bit version of Julia 1.6.1 on your system.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;juliaup default 1.6~x86&lt;/code&gt; configures the &lt;code&gt;julia&lt;/code&gt; command to start the latest 1.6.x 32 bit version of Julia you have installed on your system.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;juliaup link dev ~/juliasrc/julia&lt;/code&gt; configures the &lt;code&gt;dev&lt;/code&gt; channel to use a binary that you provide that is located at &lt;code&gt;~/juliasrc/julia&lt;/code&gt;. You can then use &lt;code&gt;dev&lt;/code&gt; as if it was a system provided channel, i.e. make it the default or use it with the &lt;code&gt;+&lt;/code&gt; version selector. You can use other names than &lt;code&gt;dev&lt;/code&gt; and link as many versions into &lt;code&gt;juliaup&lt;/code&gt; as you want.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;juliaup self update&lt;/code&gt; installs the latest version, which is necessary if new releases reach the beta channel, etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;juliaup self uninstall&lt;/code&gt; uninstalls Juliaup. Note that on some platforms this command is not available, in those situations one should use platform specific methods to uninstall Juliaup.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;juliaup override status&lt;/code&gt; shows all configured directory overrides.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;juliaup override set lts&lt;/code&gt; sets a directory override for the current working directory to the &lt;code&gt;lts&lt;/code&gt; channel.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;juliaup override unset&lt;/code&gt; removes a directory override for the current working directory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;juliaup override set --path foo/bar lts&lt;/code&gt; sets a directory override for the path &lt;code&gt;foo/bar&lt;/code&gt; to the &lt;code&gt;lts&lt;/code&gt; channel.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;juliaup override unset --path foo/bar&lt;/code&gt; removes a directory override for the path &lt;code&gt;foo/bar&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;juliaup override unset --nonexistent&lt;/code&gt; removes all directory overrides for paths that no longer exist.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;juliaup&lt;/code&gt; shows you what other commands are available.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The available system provided channels are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;release&lt;/code&gt;: always points to the latest stable version.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lts&lt;/code&gt;: always points to the latest long term supported version.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;beta&lt;/code&gt;: always points to the latest beta version if one exists. If a newer release candidate exists, it will point to that, and if there is neither a beta or rc candidate available it will point to the same version as the &lt;code&gt;release&lt;/code&gt; channel.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rc&lt;/code&gt;: same as &lt;code&gt;beta&lt;/code&gt;, but only starts with release candidate versions.&lt;/li&gt; &#xA; &lt;li&gt;specific versions, e.g. &lt;code&gt;1.5.4&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;minor version channels, e.g. &lt;code&gt;1.5&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;major version channels, e.g. &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All of these channels can be combined with the &lt;code&gt;~x86&lt;/code&gt;, &lt;code&gt;~x64&lt;/code&gt; or &lt;code&gt;~aarch64&lt;/code&gt; suffix to download a specific platform version.&lt;/p&gt; &#xA;&lt;h2&gt;Using installed Julia versions&lt;/h2&gt; &#xA;&lt;p&gt;To launch the default Julia version simply run &lt;code&gt;julia&lt;/code&gt; in your terminal.&lt;/p&gt; &#xA;&lt;p&gt;To launch a specific Julia version, say in channel &lt;code&gt;release&lt;/code&gt;, run &lt;code&gt;julia +release&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Overrides&lt;/h2&gt; &#xA;&lt;p&gt;The Julia launcher &lt;code&gt;julia&lt;/code&gt; automatically determines which specific version of Julia to launch. There are several ways to control and override which Juliaup channel should be used:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;A command line Julia version specifier, such as &lt;code&gt;julia +release&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;JULIAUP_CHANNEL&lt;/code&gt; environment variable.&lt;/li&gt; &#xA; &lt;li&gt;A directory override, set with the &lt;code&gt;juliaup override set&lt;/code&gt; command.&lt;/li&gt; &#xA; &lt;li&gt;The default Juliaup channel.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The channel is used in the order listed above, using the first available option.&lt;/p&gt; &#xA;&lt;h2&gt;Path used by Juliaup&lt;/h2&gt; &#xA;&lt;p&gt;Juliaup will by default use the Julia depot at &lt;code&gt;~/.julia&lt;/code&gt; to store Julia versions and configuration files. This can be changed by setting the &lt;code&gt;JULIAUP_DEPOT_PATH&lt;/code&gt; environment variable. Caution: Previous versions of Juliaup used the content of the environment variable &lt;code&gt;JULIA_DEPOT_PATH&lt;/code&gt; to locate Juliaup files, the current version changed this behavior and no longer depends on &lt;code&gt;JULIA_DEPOT_PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Juliaup server&lt;/h2&gt; &#xA;&lt;p&gt;Juliaup by default downloads julia binary tarballs from the official server &#34;&lt;a href=&#34;https://julialang-s3.julialang.org&#34;&gt;https://julialang-s3.julialang.org&lt;/a&gt;&#34;. If requested, the environment variable &lt;code&gt;JULIAUP_SERVER&lt;/code&gt; can be used to tell Juliaup to use a third-party mirror server.&lt;/p&gt; &#xA;&lt;h2&gt;Development guides&lt;/h2&gt; &#xA;&lt;p&gt;For juliaup developers, information on how to build juliaup locally, update julia versions, and release updates can be found in the wiki &lt;a href=&#34;https://github.com/JuliaLang/juliaup/wiki&#34;&gt;https://github.com/JuliaLang/juliaup/wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To use unstable preview versions of juliaup (e.g. to gt a patch before it makes it into the latest release), use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -fsSL https://install.julialang.org/releasepreview | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;More information&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=rFlbjWC6zYA&#34;&gt;This JuliaCon 2021 talk&lt;/a&gt; is a short introduction to Juliaup. Note that the video was recorded before the Linux and Mac versions were finished, but all the information about &lt;code&gt;juliaup&lt;/code&gt; itself applies equally on Linux and Mac.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=14zfdbzq5BM&#34;&gt;This JuliaCon 2022 talk&lt;/a&gt; provides some background on the design of Juliaup.&lt;/p&gt;</summary>
  </entry>
</feed>