<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-13T01:42:00Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>alloy-rs/alloy</title>
    <updated>2024-01-13T01:42:00Z</updated>
    <id>tag:github.com,2024-01-13:/alloy-rs/alloy</id>
    <link href="https://github.com/alloy-rs/alloy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Transports, Middleware, and Networks for the Alloy project&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Alloy&lt;/h1&gt; &#xA;&lt;p&gt;Alloy connects applications to blockchains.&lt;/p&gt; &#xA;&lt;p&gt;Alloy is a rewrite of &lt;a href=&#34;https://github.com/gakonst/ethers-rs&#34;&gt;&lt;code&gt;ethers-rs&lt;/code&gt;&lt;/a&gt; from the ground up, with exciting new features, high performance, and excellent docs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/gakonst/ethers-rs&#34;&gt;&lt;code&gt;ethers-rs&lt;/code&gt;&lt;/a&gt; will continue to be maintained until we have achieved feature-parity in Alloy. No action is currently needed from devs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://t.me/ethers_rs&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?color=neon&amp;amp;style=for-the-badge&amp;amp;url=https%3A%2F%2Ftg.sumanjay.workers.dev%2Fethers_rs&#34; alt=&#34;Telegram chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains the following crates:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alloy-rs/alloy/main/crates/json-rpc&#34;&gt;&lt;code&gt;alloy-json-rpc&lt;/code&gt;&lt;/a&gt; - Core data types for JSON-RPC 2.0 clients.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alloy-rs/alloy/main/crates/transport&#34;&gt;&lt;code&gt;alloy-transport&lt;/code&gt;&lt;/a&gt; - Transport implementations for JSON-RPC 2.0 clients.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alloy-rs/alloy/main/crates/networks&#34;&gt;&lt;code&gt;alloy-networks&lt;/code&gt;&lt;/a&gt; - Network abstraction for RPC types. Allows capturing different RPC param and response types on a per-network basis.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alloy-rs/alloy/main/crates/providers&#34;&gt;&lt;code&gt;alloy-providers&lt;/code&gt;&lt;/a&gt; - A client trait for interacting with Ethereum-like RPC endpoints. Abstract over &lt;code&gt;alloy_networks::Network&lt;/code&gt;, which allows capturing different RPC types on a per-network basis.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Rust Versions&lt;/h2&gt; &#xA;&lt;!--&#xA;When updating this, also update:&#xA;- .clippy.toml&#xA;- Cargo.toml&#xA;- .github/workflows/ci.yml&#xA;--&gt; &#xA;&lt;p&gt;Alloy will keep a rolling MSRV (minimum supported rust version) policy of &lt;strong&gt;at least&lt;/strong&gt; 6 months. When increasing the MSRV, the new Rust version must have been released at least six months ago. The current MSRV is 1.68.&lt;/p&gt; &#xA;&lt;p&gt;Note that the MSRV is not increased automatically, and only as part of a minor release.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Thanks for your help improving the project! We are so happy to have you! We have &lt;a href=&#34;https://raw.githubusercontent.com/alloy-rs/alloy/main/CONTRIBUTING.md&#34;&gt;a contributing guide&lt;/a&gt; to help you get involved in the Alloy project.&lt;/p&gt; &#xA;&lt;p&gt;Pull requests will not be merged unless CI passes, so please ensure that your contribution follows the linting rules and passes clippy.&lt;/p&gt; &#xA;&lt;h2&gt;Note on &lt;code&gt;no_std&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Because these crates are primarily json-rpc focused, we do not intend to support &lt;code&gt;no_std&lt;/code&gt; for them at this time.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;None of these crates would have been possible without the great work done in:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ethers-io/ethers.js/&#34;&gt;&lt;code&gt;ethers.js&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tomusdrw/rust-web3/&#34;&gt;&lt;code&gt;rust-web3&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/recmo/uint&#34;&gt;&lt;code&gt;ruint&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rust-ethereum/ethabi&#34;&gt;&lt;code&gt;ethabi&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gnosis/ethcontract-rs/&#34;&gt;&lt;code&gt;ethcontract-rs&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/althea-net/guac_rs/&#34;&gt;&lt;code&gt;guac_rs&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;License&lt;/h4&gt; &#xA;&lt;sup&gt; Licensed under either of &lt;a href=&#34;https://raw.githubusercontent.com/alloy-rs/alloy/main/LICENSE-APACHE&#34;&gt;Apache License, Version 2.0&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/alloy-rs/alloy/main/LICENSE-MIT&#34;&gt;MIT license&lt;/a&gt; at your option. &lt;/sup&gt; &#xA;&lt;br&gt; &#xA;&lt;sub&gt; Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in these crates by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. &lt;/sub&gt;</summary>
  </entry>
  <entry>
    <title>paradigmxyz/evm-inspectors</title>
    <updated>2024-01-13T01:42:00Z</updated>
    <id>tag:github.com,2024-01-13:/paradigmxyz/evm-inspectors</id>
    <link href="https://github.com/paradigmxyz/evm-inspectors" rel="alternate"></link>
    <summary type="html">&lt;p&gt;EVM Execution Hooks.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;evm-inspectors&lt;/h1&gt; &#xA;&lt;p&gt;Common &lt;a href=&#34;https://github.com/bluealloy/revm/&#34;&gt;&lt;code&gt;revm&lt;/code&gt;&lt;/a&gt; inspector implementations.&lt;/p&gt; &#xA;&lt;p&gt;Originally part of &lt;a href=&#34;https://github.com/paradigmxyz/reth/&#34;&gt;&lt;code&gt;reth&lt;/code&gt;&lt;/a&gt; as the &lt;a href=&#34;https://github.com/paradigmxyz/reth/tree/3fdb24ebd328e9d22d1e6849a3a869e3c4e83485/crates/revm/revm-inspectors/&#34;&gt;&lt;code&gt;reth-revm-inspectors&lt;/code&gt;&lt;/a&gt; crate.&lt;/p&gt; &#xA;&lt;h4&gt;License&lt;/h4&gt; &#xA;&lt;sup&gt; Licensed under either of &lt;a href=&#34;https://raw.githubusercontent.com/paradigmxyz/evm-inspectors/main/LICENSE-APACHE&#34;&gt;Apache License, Version 2.0&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/paradigmxyz/evm-inspectors/main/LICENSE-MIT&#34;&gt;MIT license&lt;/a&gt; at your option. &lt;/sup&gt; &#xA;&lt;br&gt; &#xA;&lt;sub&gt; Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in these crates by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. &lt;/sub&gt;</summary>
  </entry>
  <entry>
    <title>rust-embedded/embedded-hal</title>
    <updated>2024-01-13T01:42:00Z</updated>
    <id>tag:github.com,2024-01-13:/rust-embedded/embedded-hal</id>
    <link href="https://github.com/rust-embedded/embedded-hal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Hardware Abstraction Layer (HAL) for embedded systems&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;embedded-hal&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A Hardware Abstraction Layer (HAL) for embedded systems&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This project is developed and maintained by the &lt;a href=&#34;https://github.com/rust-embedded/wg#the-hal-team&#34;&gt;HAL team&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] ðŸ“£ &lt;code&gt;embedded-hal&lt;/code&gt; v1.0 is now released! Check out the &lt;a href=&#34;https://blog.rust-embedded.org/embedded-hal-v1/&#34;&gt;announcement blog post&lt;/a&gt;, the &lt;a href=&#34;https://docs.rs/embedded-hal&#34;&gt;API documentation&lt;/a&gt; and the &lt;a href=&#34;https://raw.githubusercontent.com/rust-embedded/embedded-hal/master/docs/migrating-from-0.2-to-1.0.md&#34;&gt;migration guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Scope&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;embedded-hal&lt;/code&gt; serves as a foundation for building an ecosystem of platform-agnostic drivers. (driver meaning library crates that let a target platform interface an external device like a digital sensor or a wireless transceiver).&lt;/p&gt; &#xA;&lt;p&gt;The advantage of this system is that by writing the driver as a generic library on top of &lt;code&gt;embedded-hal&lt;/code&gt; driver authors can support any number of target platforms (e.g. Cortex-M microcontrollers, AVR microcontrollers, embedded Linux, etc.).&lt;/p&gt; &#xA;&lt;p&gt;The advantage for application developers is that by adopting &lt;code&gt;embedded-hal&lt;/code&gt; they can unlock all these drivers for their platform.&lt;/p&gt; &#xA;&lt;p&gt;For functionality that goes beyond what is provided by &lt;code&gt;embedded-hal&lt;/code&gt;, users are encouraged to use the target platform directly. Abstractions of common functionality can be proposed to be included into &lt;code&gt;embedded-hal&lt;/code&gt; as described &lt;a href=&#34;https://raw.githubusercontent.com/rust-embedded/embedded-hal/master/docs/how-to-add-a-new-trait.md&#34;&gt;in this guide&lt;/a&gt;, though.&lt;/p&gt; &#xA;&lt;p&gt;See more about the design goals in &lt;a href=&#34;https://docs.rs/embedded-hal/latest/embedded_hal/#design-goals&#34;&gt;this documentation section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Crates&lt;/h2&gt; &#xA;&lt;p&gt;The main &lt;code&gt;embedded-hal&lt;/code&gt; project is not tied to a specific execution model like blocking or non-blocking.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Crate&lt;/th&gt; &#xA;   &lt;th&gt;crates.io&lt;/th&gt; &#xA;   &lt;th&gt;Docs&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-embedded/embedded-hal/master/embedded-hal&#34;&gt;embedded-hal&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://crates.io/crates/embedded-hal&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/embedded-hal.svg?sanitize=true&#34; alt=&#34;crates.io&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.rs/embedded-hal&#34;&gt;&lt;img src=&#34;https://docs.rs/embedded-hal/badge.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Core traits, blocking version&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-embedded/embedded-hal/master/embedded-hal-async&#34;&gt;embedded-hal-async&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://crates.io/crates/embedded-hal-async&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/embedded-hal-async.svg?sanitize=true&#34; alt=&#34;crates.io&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.rs/embedded-hal-async&#34;&gt;&lt;img src=&#34;https://docs.rs/embedded-hal-async/badge.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Core traits, async version&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-embedded/embedded-hal/master/embedded-hal-nb&#34;&gt;embedded-hal-nb&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://crates.io/crates/embedded-hal-nb&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/embedded-hal-nb.svg?sanitize=true&#34; alt=&#34;crates.io&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.rs/embedded-hal-nb&#34;&gt;&lt;img src=&#34;https://docs.rs/embedded-hal-nb/badge.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Core traits, polling version using the &lt;code&gt;nb&lt;/code&gt; crate&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-embedded/embedded-hal/master/embedded-hal-bus&#34;&gt;embedded-hal-bus&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://crates.io/crates/embedded-hal-bus&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/embedded-hal-bus.svg?sanitize=true&#34; alt=&#34;crates.io&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.rs/embedded-hal-bus&#34;&gt;&lt;img src=&#34;https://docs.rs/embedded-hal-bus/badge.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Utilities for sharing SPI and I2C buses&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-embedded/embedded-hal/master/embedded-can&#34;&gt;embedded-can&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://crates.io/crates/embedded-can&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/embedded-can.svg?sanitize=true&#34; alt=&#34;crates.io&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.rs/embedded-can&#34;&gt;&lt;img src=&#34;https://docs.rs/embedded-can/badge.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Controller Area Network (CAN) traits&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-embedded/embedded-hal/master/embedded-io&#34;&gt;embedded-io&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://crates.io/crates/embedded-io&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/embedded-io.svg?sanitize=true&#34; alt=&#34;crates.io&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.rs/embedded-io&#34;&gt;&lt;img src=&#34;https://docs.rs/embedded-io/badge.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;I/O traits (read, write, seek, etc.), blocking and nonblocking version.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-embedded/embedded-hal/master/embedded-io-async&#34;&gt;embedded-io-async&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://crates.io/crates/embedded-io-async&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/embedded-io-async.svg?sanitize=true&#34; alt=&#34;crates.io&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.rs/embedded-io-async&#34;&gt;&lt;img src=&#34;https://docs.rs/embedded-io-async/badge.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;I/O traits, async version&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-embedded/embedded-hal/master/embedded-io-adapters&#34;&gt;embedded-io-adapters&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://crates.io/crates/embedded-io-adapters&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/embedded-io-adapters.svg?sanitize=true&#34; alt=&#34;crates.io&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.rs/embedded-io-adapters&#34;&gt;&lt;img src=&#34;https://docs.rs/embedded-io-adapters/badge.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Adapters between the &lt;a href=&#34;https://crates.io/crates/embedded-io&#34;&gt;&lt;code&gt;embedded-io&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://crates.io/crates/embedded-io-async&#34;&gt;&lt;code&gt;embedded-io-async&lt;/code&gt;&lt;/a&gt; traits and other IO traits (&lt;code&gt;std&lt;/code&gt;, &lt;code&gt;tokio&lt;/code&gt;, &lt;code&gt;futures&lt;/code&gt;...)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Documents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-embedded/embedded-hal/master/docs/migrating-from-0.2-to-1.0.md&#34;&gt;Migrating from v0.2 to v1.0&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-embedded/embedded-hal/master/docs/how-to-add-a-new-trait.md&#34;&gt;How-to: add a new trait&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-embedded/embedded-hal/master/docs/msrv.md&#34;&gt;MSRV&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Implementations and drivers&lt;/h2&gt; &#xA;&lt;p&gt;For a non-exhaustive list of &lt;code&gt;embedded-hal&lt;/code&gt; implementations and driver crates check the &lt;a href=&#34;https://github.com/rust-embedded/awesome-embedded-rust#driver-crates&#34;&gt;awesome-embedded-rust&lt;/a&gt; list.&lt;/p&gt; &#xA;&lt;p&gt;You may be able to find even more HAL implementation crates and driver crates by searching for the &lt;a href=&#34;https://crates.io/keywords/embedded-hal-impl&#34;&gt;&lt;code&gt;embedded-hal-impl&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://crates.io/keywords/embedded-hal-driver&#34;&gt;&lt;code&gt;embedded-hal-driver&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://crates.io/keywords/embedded-hal&#34;&gt;&lt;code&gt;embedded-hal&lt;/code&gt;&lt;/a&gt; keywords on crates.io.&lt;/p&gt; &#xA;&lt;h2&gt;Minimum Supported Rust Version (MSRV)&lt;/h2&gt; &#xA;&lt;p&gt;This crate is guaranteed to compile on stable Rust 1.60 and up. It &lt;em&gt;might&lt;/em&gt; compile with older versions but that may change in any new patch release.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/rust-embedded/embedded-hal/master/docs/msrv.md&#34;&gt;here&lt;/a&gt; for details on how the MSRV may be upgraded.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under either of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apache License, Version 2.0 (&lt;a href=&#34;https://raw.githubusercontent.com/rust-embedded/embedded-hal/master/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;MIT license (&lt;a href=&#34;https://raw.githubusercontent.com/rust-embedded/embedded-hal/master/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;at your option.&lt;/p&gt; &#xA;&lt;h3&gt;Contribution&lt;/h3&gt; &#xA;&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Contribution to this repository is organized under the terms of the &lt;a href=&#34;https://raw.githubusercontent.com/rust-embedded/embedded-hal/master/CODE_OF_CONDUCT.md&#34;&gt;Rust Code of Conduct&lt;/a&gt;, the maintainers of this repository, the &lt;a href=&#34;https://github.com/rust-embedded/wg#the-hal-team&#34;&gt;HAL team&lt;/a&gt;, promise to intervene to uphold that code of conduct.&lt;/p&gt;</summary>
  </entry>
</feed>