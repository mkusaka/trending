<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-04T01:37:56Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rcore-os/rCore-Tutorial-v3</title>
    <updated>2024-01-04T01:37:56Z</updated>
    <id>tag:github.com,2024-01-04:/rcore-os/rCore-Tutorial-v3</id>
    <link href="https://github.com/rcore-os/rCore-Tutorial-v3" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Let&#39;s write an OS which can run on RISC-V in Rust from scratch!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;rCore-Tutorial-v3&lt;/h1&gt; &#xA;&lt;p&gt;rCore-Tutorial version 3.6. See the &lt;a href=&#34;https://rcore-os.github.io/rCore-Tutorial-Book-v3/&#34;&gt;Documentation in Chinese&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;rCore-Tutorial API Docs. See the &lt;a href=&#34;https://raw.githubusercontent.com/rcore-os/rCore-Tutorial-v3/main/#OS-API-DOCS&#34;&gt;API Docs of Ten OSes &lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t know Rust Language and try to learn it, please visit &lt;a href=&#34;https://github.com/rcore-os/rCore/wiki/study-resource-of-system-programming-in-RUST&#34;&gt;Rust Learning Resources&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Official QQ group number:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Group 1: 735045051(FULL)&lt;/li&gt; &#xA; &lt;li&gt;Group 2: 635245268&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;news&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;23/06/2022: Version 3.6.0 is on the way! Now we directly update the code on chX branches, please periodically check if there are any updates.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;This project aims to show how to write an &lt;strong&gt;Unix-like OS&lt;/strong&gt; running on &lt;strong&gt;RISC-V&lt;/strong&gt; platforms &lt;strong&gt;from scratch&lt;/strong&gt; in &lt;strong&gt;&lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt;&lt;/strong&gt; for &lt;strong&gt;beginners&lt;/strong&gt; without any background knowledge about &lt;strong&gt;computer architectures, assembly languages or operating systems&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Platform supported: &lt;code&gt;qemu-system-riscv64&lt;/code&gt; simulator or dev boards based on &lt;a href=&#34;https://canaan.io/product/kendryteai&#34;&gt;Kendryte K210 SoC&lt;/a&gt; such as &lt;a href=&#34;https://www.seeedstudio.com/Sipeed-MAIX-Dock-p-4815.html&#34;&gt;Maix Dock&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;OS &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;concurrency of multiple processes each of which contains mutiple native threads&lt;/li&gt; &#xA;   &lt;li&gt;preemptive scheduling(Round-Robin algorithm)&lt;/li&gt; &#xA;   &lt;li&gt;dynamic memory management in kernel&lt;/li&gt; &#xA;   &lt;li&gt;virtual memory&lt;/li&gt; &#xA;   &lt;li&gt;a simple file system with a block cache&lt;/li&gt; &#xA;   &lt;li&gt;an interactive shell in the userspace&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;only 4K+ LoC&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rcore-os.github.io/rCore-Tutorial-Book-v3/&#34;&gt;A detailed documentation in Chinese&lt;/a&gt; in spite of the lack of comments in the code(English version is not available at present)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;h3&gt;Install Rust&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;official guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Install some tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ rustup target add riscv64gc-unknown-none-elf&#xA;$ cargo install cargo-binutils --vers =0.3.3&#xA;$ rustup component add llvm-tools-preview&#xA;$ rustup component add rust-src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install Qemu&lt;/h3&gt; &#xA;&lt;p&gt;Here we manually compile and install Qemu 7.0.0. For example, on Ubuntu 18.04:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# install dependency packages&#xA;$ sudo apt install autoconf automake autotools-dev curl libmpc-dev libmpfr-dev libgmp-dev \&#xA;              gawk build-essential bison flex texinfo gperf libtool patchutils bc \&#xA;              zlib1g-dev libexpat-dev pkg-config  libglib2.0-dev libpixman-1-dev git tmux python3 python3-pip ninja-build&#xA;# download Qemu source code&#xA;$ wget https://download.qemu.org/qemu-7.0.0.tar.xz&#xA;# extract to qemu-7.0.0/&#xA;$ tar xvJf qemu-7.0.0.tar.xz&#xA;$ cd qemu-7.0.0&#xA;# build&#xA;$ ./configure --target-list=riscv64-softmmu,riscv64-linux-user&#xA;$ make -j$(nproc)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, add following contents to &lt;code&gt;~/.bashrc&lt;/code&gt;(please adjust these paths according to your environment):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export PATH=$PATH:/path/to/qemu-7.0.0/build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, update the current shell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ source ~/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we can check the version of Qemu:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ qemu-system-riscv64 --version&#xA;QEMU emulator version 7.0.0&#xA;Copyright (c) 2003-2020 Fabrice Bellard and the QEMU Project developers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install RISC-V GNU Embedded Toolchain(including GDB)&lt;/h3&gt; &#xA;&lt;p&gt;Download the compressed file according to your platform From &lt;a href=&#34;https://www.sifive.com/software&#34;&gt;Sifive website&lt;/a&gt;(Ctrl+F &#39;toolchain&#39;).&lt;/p&gt; &#xA;&lt;p&gt;Extract it and append the location of the &#39;bin&#39; directory under its root directory to &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, we can check the version of GDB:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ riscv64-unknown-elf-gdb --version&#xA;GNU gdb (SiFive GDB-Metal 10.1.0-2020.12.7) 10.1&#xA;Copyright (C) 2020 Free Software Foundation, Inc.&#xA;License GPLv3+: GNU GPL version 3 or later &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;&#xA;This is free software: you are free to change and redistribute it.&#xA;There is NO WARRANTY, to the extent permitted by law.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install serial tools(Optional, if you want to run on K210)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pip3 install pyserial&#xA;$ sudo apt install python3-serial&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run our project&lt;/h2&gt; &#xA;&lt;h3&gt;Qemu&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone https://github.com/rcore-os/rCore-Tutorial-v3.git&#xA;$ cd rCore-Tutorial-v3/os&#xA;$ make run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After outputing some debug messages, the kernel lists all the applications available and enter the user shell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/**** APPS ****&#xA;mpsc_sem&#xA;usertests&#xA;pipetest&#xA;forktest2&#xA;cat&#xA;initproc&#xA;race_adder_loop&#xA;threads_arg&#xA;race_adder_mutex_spin&#xA;race_adder_mutex_blocking&#xA;forktree&#xA;user_shell&#xA;huge_write&#xA;race_adder&#xA;race_adder_atomic&#xA;threads&#xA;stack_overflow&#xA;filetest_simple&#xA;forktest_simple&#xA;cmdline_args&#xA;run_pipe_test&#xA;forktest&#xA;matrix&#xA;exit&#xA;fantastic_text&#xA;sleep_simple&#xA;yield&#xA;hello_world&#xA;pipe_large_test&#xA;sleep&#xA;phil_din_mutex&#xA;**************/&#xA;Rust user shell&#xA;&amp;gt;&amp;gt; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can run any application except for &lt;code&gt;initproc&lt;/code&gt; and &lt;code&gt;user_shell&lt;/code&gt; itself. To run an application, just input its filename and hit enter. &lt;code&gt;usertests&lt;/code&gt; can run a bunch of applications, thus it is recommended.&lt;/p&gt; &#xA;&lt;p&gt;Type &lt;code&gt;Ctrl+a&lt;/code&gt; then &lt;code&gt;x&lt;/code&gt; to exit Qemu.&lt;/p&gt; &#xA;&lt;h3&gt;K210&lt;/h3&gt; &#xA;&lt;p&gt;Before chapter 6, you do not need a SD card:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone https://github.com/rcore-os/rCore-Tutorial-v3.git&#xA;$ cd rCore-Tutorial-v3/os&#xA;$ make run BOARD=k210&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From chapter 6, before running the kernel, we should insert a SD card into PC and manually write the filesystem image to it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd rCore-Tutorial-v3/os&#xA;$ make sdcard&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default it will overwrite the device &lt;code&gt;/dev/sdb&lt;/code&gt; which is the SD card, but you can provide another location. For example, &lt;code&gt;make sdcard SDCARD=/dev/sdc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After that, remove the SD card from PC and insert it to the slot of K210. Connect the K210 to PC and then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone https://github.com/rcore-os/rCore-Tutorial-v3.git&#xA;$ cd rCore-Tutorial-v3/os&#xA;$ make run BOARD=k210&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Type &lt;code&gt;Ctrl+]&lt;/code&gt; to disconnect from K210.&lt;/p&gt; &#xA;&lt;h2&gt;Show runtime debug info of OS kernel version&lt;/h2&gt; &#xA;&lt;p&gt;The branch of ch9-log contains a lot of debug info. You could try to run rcore tutorial for understand the internal behavior of os kernel.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone https://github.com/rcore-os/rCore-Tutorial-v3.git&#xA;$ cd rCore-Tutorial-v3/os&#xA;$ git checkout ch9-log&#xA;$ make run&#xA;......&#xA;[rustsbi] RustSBI version 0.2.0-alpha.10, adapting to RISC-V SBI v0.3&#xA;.______       __    __      _______.___________.  _______..______   __&#xA;|   _  \     |  |  |  |    /       |           | /       ||   _  \ |  |&#xA;|  |_)  |    |  |  |  |   |   (----`---|  |----`|   (----`|  |_)  ||  |&#xA;|      /     |  |  |  |    \   \       |  |      \   \    |   _  &amp;lt; |  |&#xA;|  |\  \----.|  `--&#39;  |.----)   |      |  |  .----)   |   |  |_)  ||  |&#xA;| _| `._____| \______/ |_______/       |__|  |_______/    |______/ |__|&#xA;&#xA;[rustsbi] Implementation: RustSBI-QEMU Version 0.0.2&#xA;[rustsbi-dtb] Hart count: cluster0 with 1 cores&#xA;[rustsbi] misa: RV64ACDFIMSU&#xA;[rustsbi] mideleg: ssoft, stimer, sext (0x222)&#xA;[rustsbi] medeleg: ima, ia, bkpt, la, sa, uecall, ipage, lpage, spage (0xb1ab)&#xA;[rustsbi] pmp0: 0x10000000 ..= 0x10001fff (rw-)&#xA;[rustsbi] pmp1: 0x2000000 ..= 0x200ffff (rw-)&#xA;[rustsbi] pmp2: 0xc000000 ..= 0xc3fffff (rw-)&#xA;[rustsbi] pmp3: 0x80000000 ..= 0x8fffffff (rwx)&#xA;[rustsbi] enter supervisor 0x80200000&#xA;[KERN] rust_main() begin&#xA;[KERN] clear_bss() begin&#xA;[KERN] clear_bss() end&#xA;[KERN] mm::init() begin&#xA;[KERN] mm::init_heap() begin&#xA;[KERN] mm::init_heap() end&#xA;[KERN] mm::init_frame_allocator() begin&#xA;[KERN] mm::frame_allocator::lazy_static!FRAME_ALLOCATOR begin&#xA;......&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Rustdoc&lt;/h2&gt; &#xA;&lt;p&gt;Currently it can only help you view the code since only a tiny part of the code has been documented.&lt;/p&gt; &#xA;&lt;p&gt;You can open a doc html of &lt;code&gt;os&lt;/code&gt; using &lt;code&gt;cargo doc --no-deps --open&lt;/code&gt; under &lt;code&gt;os&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;OS-API-DOCS&lt;/h3&gt; &#xA;&lt;p&gt;The API Docs for Ten OS&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learningos.github.io/rCore-Tutorial-v3/ch1/os/index.html&#34;&gt;Lib-OS API doc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learningos.github.io/rCore-Tutorial-v3/ch2/os/index.html&#34;&gt;Batch-OS API doc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learningos.github.io/rCore-Tutorial-v3/ch3-coop/os/index.html&#34;&gt;MultiProg-OS API doc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learningos.github.io/rCore-Tutorial-v3/ch3/os/index.html&#34;&gt;TimeSharing-OS API doc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learningos.github.io/rCore-Tutorial-v3/ch4/os/index.html&#34;&gt;AddrSpace-OS API doc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learningos.github.io/rCore-Tutorial-v3/ch5/os/index.html&#34;&gt;Process-OS API doc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learningos.github.io/rCore-Tutorial-v3/ch6/os/index.html&#34;&gt;FileSystem-OS API doc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learningos.github.io/rCore-Tutorial-v3/ch7/os/index.html&#34;&gt;IPC-OS API doc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learningos.github.io/rCore-Tutorial-v3/ch8/os/index.html&#34;&gt;SyncMutex-OS API doc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learningos.github.io/rCore-Tutorial-v3/ch9/os/index.html&#34;&gt;IODevice-OS API doc&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Working in progress&lt;/h2&gt; &#xA;&lt;p&gt;Our first release 3.6.0 (chapter 1-9) has been published, and we are still working on it.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;chapter 9: need more descripts about different I/O devices&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here are the updates since 3.5.0:&lt;/p&gt; &#xA;&lt;h3&gt;Completed&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; automatically clean up and rebuild before running our project on a different platform&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; fix &lt;code&gt;power&lt;/code&gt; series application in early chapters, now you can find modulus in the output&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; use &lt;code&gt;UPSafeCell&lt;/code&gt; instead of &lt;code&gt;RefCell&lt;/code&gt; or &lt;code&gt;spin::Mutex&lt;/code&gt; in order to access static data structures and adjust its API so that it cannot be borrowed twice at a time(mention &lt;code&gt;&amp;amp; .exclusive_access().task[0]&lt;/code&gt; in &lt;code&gt;run_first_task&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; move &lt;code&gt;TaskContext&lt;/code&gt; into &lt;code&gt;TaskControlBlock&lt;/code&gt; instead of restoring it in place on kernel stack(since ch3), eliminating annoying &lt;code&gt;task_cx_ptr2&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; replace &lt;code&gt;llvm_asm!&lt;/code&gt; with &lt;code&gt;asm!&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; expand the fs image size generated by &lt;code&gt;rcore-fs-fuse&lt;/code&gt; to 128MiB&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; add a new test named &lt;code&gt;huge_write&lt;/code&gt; which evaluates the fs performance(qemu~500KiB/s k210~50KiB/s)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; flush all block cache to disk after a fs transaction which involves write operation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; replace &lt;code&gt;spin::Mutex&lt;/code&gt; with &lt;code&gt;UPSafeCell&lt;/code&gt; before SMP chapter&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; add codes for a new chapter about synchronization &amp;amp; mutual exclusion(uniprocessor only)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; bug fix: we should call &lt;code&gt;find_pte&lt;/code&gt; rather than &lt;code&gt;find_pte_create&lt;/code&gt; in &lt;code&gt;PageTable::unmap&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; clarify: &#34;check validity of level-3 pte in &lt;code&gt;find_pte&lt;/code&gt; instead of checking it outside this function&#34; should not be a bug&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; code of chapter 8: synchronization on a uniprocessor&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; switch the code of chapter 6 and chapter 7&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; support signal mechanism in chapter 7/8(only works for apps with a single thread)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add boards/ directory and support rustdoc, for example you can use &lt;code&gt;cargo doc --no-deps --open&lt;/code&gt; to view the documentation of a crate&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; code of chapter 9: device drivers based on interrupts, including UART, block, keyboard, mouse, gpu devices&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; add CI autotest and doc in github&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Todo(High priority)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; review documentation, current progress: 8/9&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; use old fs image optionally, do not always rebuild the image&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; shell functionality improvement(to be continued...)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; give every non-zero process exit code an unique and clear error type&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; effective error handling of mm module&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; add more os functions for understanding os conecpts and principles&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Todo(Low priority)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; rewrite practice doc and remove some inproper questions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; provide smooth debug experience at a Rust source code level&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; format the code using official tools&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Crates&lt;/h3&gt; &#xA;&lt;p&gt;We will add them later.&lt;/p&gt;</summary>
  </entry>
</feed>