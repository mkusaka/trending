<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-03T01:40:22Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>OffchainLabs/stylus-sdk-rs</title>
    <updated>2023-09-03T01:40:22Z</updated>
    <id>tag:github.com,2023-09-03:/OffchainLabs/stylus-sdk-rs</id>
    <link href="https://github.com/OffchainLabs/stylus-sdk-rs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://arbitrum.io/&#34;&gt; &lt;img src=&#34;https://arbitrum.io/assets/stylus/stylus_with_paint_bg.png&#34; alt=&#34;Logo&#34; width=&#34;100%&#34;&gt; &lt;/a&gt; &lt;/p&gt;&#xA;&lt;h3 align=&#34;center&#34;&gt;The Stylus SDK&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://developer.arbitrum.io/&#34;&gt;&lt;strong&gt;Rust contracts on Arbitrum »&lt;/strong&gt;&lt;/a&gt; &lt;br&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;The Stylus SDK enables smart contract developers to write programs for &lt;strong&gt;Arbitrum chains&lt;/strong&gt; written in the &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;Rust&lt;/a&gt; programming language. Stylus programs are compiled to &lt;a href=&#34;https://webassembly.org/&#34;&gt;WebAssembly&lt;/a&gt; and can then be deployed on-chain to execute alongside Solidity smart contracts. Stylus programs are not only orders of magnitude cheaper and faster but also enable what was thought to be previously impossible for WebAssembly: &lt;strong&gt;EVM-interoperability&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For information about deploying Rust smart contracts, see the &lt;a href=&#34;https://raw.githubusercontent.com/OffchainLabs/stylus-sdk-rs/stylus/CargoStylus&#34;&gt;Cargo Stylus CLI Tool&lt;/a&gt;. For more information about Stylus, see &lt;a href=&#34;https://docs.arbitrum.io/stylus/stylus-gentle-introduction&#34;&gt;Stylus: A Gentle Introduction&lt;/a&gt;. For a simpler intro to Stylus Rust development, see the &lt;a href=&#34;https://docs.arbitrum.io/stylus/stylus-quickstart&#34;&gt;Quick Start guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Comprehensive documentation on the Rust SDK can be found &lt;a href=&#34;https://docs.arbitrum.io/stylus/rust-sdk-guide&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Feature highlights&lt;/h2&gt; &#xA;&lt;p&gt;The SDK makes it easy to develop Ethereum ABI-equivalent Stylus contracts in Rust. It provides a full suite of types and shortcuts that abstract away the details of Ethereum&#39;s storage layout, making it easy to &lt;em&gt;just write Rust&lt;/em&gt;. For an in depth exploration of the features, please see comprehensive &lt;a href=&#34;https://docs.arbitrum.io/stylus/reference/rust-sdk-guide&#34;&gt;Feature Overview&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Some of the features available in the SDK include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Generic&lt;/strong&gt;, storage-backed Rust types for programming &lt;strong&gt;Ethereum-equivalent&lt;/strong&gt; smart contracts&lt;/li&gt; &#xA; &lt;li&gt;Simple macros for writing Solidity structs and &lt;strong&gt;entrypoints&lt;/strong&gt; that get converted to SDK-types internally&lt;/li&gt; &#xA; &lt;li&gt;Powerful &lt;strong&gt;primitive types&lt;/strong&gt; backed by the feature-rich &lt;a href=&#34;https://github.com/alloy-rs/core&#34;&gt;alloy-rs/crate&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Rust programs implemented with the Stylus SDK can &lt;strong&gt;call and be called&lt;/strong&gt; by Solidity smart contracts through Ethereum ABIs and also share the same storage layout.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use stylus_sdk::{alloy_primitives::U256, prelude::*};&#xA;&#xA;// Generate Solidity-equivalent, Rust structs backed by storage.&#xA;sol_storage! {&#xA;  #[entrypoint]&#xA;  pub struct Counter {&#xA;    uint256 number;&#xA;  }&#xA;}&#xA;&#xA;#[external]&#xA;impl Counter {&#xA;  // Gets the number value from storage.&#xA;  pub fn number(&amp;amp;self) -&amp;gt; Result&amp;lt;U256, Vec&amp;lt;u8&amp;gt;&amp;gt; {&#xA;    Ok(self.number.get())&#xA;  }&#xA;  // Sets a number in storage to a user-specified value.&#xA;  pub fn set_number(&amp;amp;mut self, new_number: U256) -&amp;gt; Result&amp;lt;(), Vec&amp;lt;u8&amp;gt;&amp;gt; {&#xA;    self.number.set(new_number);&#xA;    Ok(())&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, the Stylus SDK supports &lt;code&gt;#[no_std]&lt;/code&gt; for contracts that wish to opt out of the standard library. In fact, the entire SDK is available from &lt;code&gt;#[no_std]&lt;/code&gt;, so no special feature flag is required. This can be helpful for reducing binary size, and may be preferable in pure-compute use cases like cryptography.&lt;/p&gt; &#xA;&lt;p&gt;Most users will want to use the standard library, which is available since the Stylus VM supports &lt;code&gt;rustc&lt;/code&gt;&#39;s &lt;code&gt;wasm32-unknown-unknown&lt;/code&gt; target triple. In the future we may add &lt;code&gt;wasm32-wasi&lt;/code&gt; too, along with floating point and SIMD, which the Stylus VM does not yet support.&lt;/p&gt; &#xA;&lt;h2&gt;Don&#39;t know Rust?&lt;/h2&gt; &#xA;&lt;p&gt;The Stylus VM supports more than just Rust. In fact, any programming language that compiles down to WebAssembly could in principle be deployed to Stylus-enabled chains. The table below includes the official ports of the SDK, with more coming soon.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Repo&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Use cases&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;License&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/OffchainLabs/stylus-sdk-rs&#34;&gt;Rust SDK&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Everything!&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Apache 2.0 or MIT&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/OffchainLabs/stylus-sdk-c&#34;&gt;C/C++ SDK&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Cryptography and algorithms&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Apache 2.0 or MIT&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/OffchainLabs/stylus-sdk-bf&#34;&gt;Bf SDK&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Educational&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Apache 2.0 or MIT&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/OffchainLabs/cargo-stylus&#34;&gt;Cargo Stylus&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Deploying Stylus programs&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Apache 2.0 or MIT&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Want to write your own? &lt;a href=&#34;https://discord.com/invite/5KE54JwyTs&#34;&gt;Join us in the &lt;code&gt;#stylus&lt;/code&gt; channel on discord&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Developing Stylus Programs&lt;/h2&gt; &#xA;&lt;p&gt;The Stylus SDK is just one of the building blocks in creating and deploying WebAssembly programs to Arbitrum chains. To create a new Stylus project from a hello-world example and deploy it onchain, check out some of our tools below:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Repo&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Use cases&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;License&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/OffchainLabs/stylus-hello-world&#34;&gt;Stylus Hello World&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Rust Stylus starter template&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Apache 2.0 or MIT&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/OffchainLabs/cargo-stylus&#34;&gt;Cargo Stylus CLI&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Deploying Stylus programs&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Apache 2.0 or MIT&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;© 2022-2023 Offchain Labs, Inc.&lt;/p&gt; &#xA;&lt;p&gt;This project is licensed under either of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License, Version 2.0&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/OffchainLabs/stylus-sdk-rs/stylus/licenses/Apache-2.0&#34;&gt;licenses/Apache-2.0&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT license&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/OffchainLabs/stylus-sdk-rs/stylus/licenses/MIT&#34;&gt;licenses/MIT&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;at your option.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://spdx.dev&#34;&gt;SPDX&lt;/a&gt; license identifier for this project is &lt;code&gt;MIT OR Apache-2.0&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>