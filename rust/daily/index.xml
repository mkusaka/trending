<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-29T01:34:02Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>DataDog/libdatadog</title>
    <updated>2024-08-29T01:34:02Z</updated>
    <id>tag:github.com,2024-08-29:/DataDog/libdatadog</id>
    <link href="https://github.com/DataDog/libdatadog" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Datadog shared rust-based library. For now only used in other products (e.g. Ruby or PHP libraries).&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;libdatadog&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;libdatadog&lt;/code&gt; provides a shared library containing common code used in the implementation of Datadog&#39;s libraries, including &lt;a href=&#34;https://docs.datadoghq.com/tracing/profiler/&#34;&gt;Continuous Profilers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;(In a past life, &lt;code&gt;libdatadog&lt;/code&gt; was known as &lt;a href=&#34;https://github.com/DataDog/libddprof&#34;&gt;&lt;code&gt;libddprof&lt;/code&gt;&lt;/a&gt; but it was renamed when we decided to increase its scope).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If you&#39;re building a new Datadog library/profiler or want to contribute to Datadog&#39;s existing tools, you&#39;ve come to the right place! Otherwise, this is possibly not the droid you were looking for.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/DataDog/libdatadog/main/CONTRIBUTING.md&#34;&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;p&gt;Build &lt;code&gt;libdatadog&lt;/code&gt; as usual with &lt;code&gt;cargo build&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To package a release with the generated ffi header and CMake module, use the &lt;code&gt;build-profiling-ffi.sh&lt;/code&gt; / &lt;code&gt;build-telemetry-ffi.sh&lt;/code&gt; helper scripts. Here&#39;s an example of using on of these scripts, placing the output inside &lt;code&gt;/opt/libdatadog&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash build-profiling-ffi.sh /opt/libdatadog&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Build Dependencies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Rust 1.71 or newer with cargo&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cbindgen&lt;/code&gt; 0.26&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmake&lt;/code&gt; and &lt;code&gt;protoc&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Running tests&lt;/h3&gt; &#xA;&lt;p&gt;This project uses &lt;a href=&#34;https://nexte.st/&#34;&gt;cargo-nextest&lt;/a&gt; to run tests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo nextest run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Installing cargo-nextest&lt;/h4&gt; &#xA;&lt;p&gt;The simplest way to install &lt;a href=&#34;https://nexte.st/&#34;&gt;cargo-nextest&lt;/a&gt; is to use &lt;code&gt;cargo install&lt;/code&gt; like this.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo install --locked &#39;cargo-nextest@0.9.67&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Skipping tracing integration tests&lt;/h4&gt; &#xA;&lt;p&gt;Tracing integration tests require docker to be installed and running. If you don&#39;t have docker installed or you want to skip these tests, you can run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo nextest run -E &#39;!test(tracing_integration_tests::)&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that the locked version is to make sure that it can be built using rust &lt;code&gt;1.71.1&lt;/code&gt;, and if you are using a newer rust version, then it&#39;s enough to limit the version to &lt;code&gt;0.9.*&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>