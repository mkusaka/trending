<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-26T01:42:57Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bgkillas/kalc</title>
    <updated>2023-07-26T01:42:57Z</updated>
    <id>tag:github.com,2023-07-26:/bgkillas/kalc</id>
    <link href="https://github.com/bgkillas/kalc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;a complex numbers, 2d/3d graphing, arbitrary precision, vector, cli calculator with real-time output&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;kalc&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crates.io/crates/kalc&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/kalc.svg?sanitize=true&#34; alt=&#34;crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://aur.archlinux.org/packages/kalc/&#34;&gt;&lt;img src=&#34;https://img.shields.io/aur/version/kalc.svg?sanitize=true&#34; alt=&#34;AUR&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/bgkillas/kalc/assets/55570525/d6b6775e-0080-409a-be0b-9aa4e3fae871&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;requires gnuplot for graphing, a modern terminal like windows terminal on windows&lt;/p&gt; &#xA;&lt;p&gt;history file is stored in &lt;code&gt;~/.config/kalc.history&lt;/code&gt; or &lt;code&gt;C:\\Users\\%USERNAME%\\AppData\\Roaming\\kalc.history&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;config file is stored in &lt;code&gt;~/.config/kalc.config&lt;/code&gt; or &lt;code&gt;C:\\Users\\%USERNAME%\\AppData\\Roaming\\kalc.config&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;you can set permanent variables and functions in the file &lt;code&gt;~/.config/kalc.vars&lt;/code&gt; or &lt;code&gt;C:\\Users\\%USERNAME%\\AppData\\Roaming\\kalc.vars&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;parsing tries to comply with wolfram alpha&lt;/p&gt; &#xA;&lt;p&gt;defaults listed in kalc.config&lt;/p&gt; &#xA;&lt;h1&gt;issues&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;might fix: 0&#39;s and infinities of trig functions dont show up as 0 or infinity. i cant conceive of a nice way to fix this&lt;/li&gt; &#xA; &lt;li&gt;might fix: matrix to a fractional power is unsupported like {{2,3},{6,7}}^1.5. i have no formal learning in matrixes i might try once i learn more&lt;/li&gt; &#xA; &lt;li&gt;wont fix: sin^-4!(2) fails to parse&lt;/li&gt; &#xA; &lt;li&gt;wont fix: sin^(-4+2)(2) will not parse as sin(2)^(-4+2)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;build instructions&lt;/h1&gt; &#xA;&lt;p&gt;rust&amp;gt;=1.70.0 diffutils gcc m4 make&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/bgkillas/kalc&#xA;cd kalc&#xA;cargo build --release&#xA;./target/release/kalc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;usage&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: kalc [FLAGS] function_1 function_2 function_3...&#xA;FLAGS: --help (this message)&#xA;--tau fractions are shown in tau instead of pi&#xA;--deg compute in degrees&#xA;--rad compute in radians&#xA;--grad compute in gradians&#xA;--2d=[num] number of points to graph in 2D&#xA;--3d=[num] number of points to graph in 3D&#xA;--xr=[min],[max] x range for graphing&#xA;--yr=[min],[max] y range for graphing&#xA;--zr=[min],[max] z range for graphing&#xA;--point [char] point style for graphing&#xA;--sci toggles scientific notation&#xA;--base=[num] sets the number base (2,8,16)&#xA;--prompt toggles the prompt&#xA;--color toggles color&#xA;--comma toggles comma seperation&#xA;--vars toggles default variables&#xA;--line toggles line graphing&#xA;--rt toggles real time printing&#xA;--polar toggles displaying polar vectors&#xA;--frac toggles fraction display&#xA;--frac_iter=[num] how many iterations to check for fractions&#xA;--prec=[num] sets the precision&#xA;--deci=[num] sets how many decimals to display, -1 for length of terminal, -2 for maximum decimal places, may need to up precision for more decimals&#xA;--def ignores config file&#xA;--multi toggles multi line display for matrixes&#xA;--tabbed toggles tabbed display for matrixes&#xA;--debug displays computation time in nanoseconds&#xA;--small_e use small e notation, like 5e2=5*10^2, instead of capital &#39;E&#39; for scientific notation. only works with a number before and number or &#39;-&#39; sign after the &#39;e&#39; otherwise assumes euler number&#xA;&#xA;- flags can be executed in runtime just without the dashes&#xA;- Type &#34;exit&#34; to exit the program&#xA;- Type &#34;clear&#34; to clear the screen&#xA;- Type &#34;history [arg]&#34; to see the history, arg indexes it if specified&#xA;- Type &#34;vars&#34; to list all variables&#xA;- Type &#34;lvars&#34; to list all variables without equating them&#xA;- Type &#34;_&#34; to use the previous answer&#xA;- Type &#34;a={expr}&#34; to define a variable&#xA;- Type &#34;f(x)=...&#34; to define a function&#xA;- Type &#34;f(x,y,z...)=...&#34; to define a multi variable function&#xA;- Type &#34;...=&#34; display parsed input, show values of stuff like xr/deci/prec etc&#xA;- Type &#34;f...=null&#34; to delete a function or variable&#xA;- Type &#34;{x,y,z...}&#34; to define a cartesian vector&#xA;- Type &#34;[radius,theta,phi]&#34; to define a polar vector (same as car{vec})&#xA;- Type &#34;{vec}#&#34; to graph a vector&#xA;- Type &#34;{mat}#&#34; to graph a matrix&#xA;- Type &#34;number#&#34; to graph a complex number&#xA;- Type &#34;{{a,b,c},{d,e,f},{g,h,i}}&#34; to define a 3x3 matrix&#xA;&#xA;Operators:&#xA;- +, -, *, /, ^, %, &amp;lt;, &amp;gt;, &amp;lt;=, &amp;gt;=, |(norm), ±(works well if only 1 is present, creates a vector with plus being first part and minus being second part)&#xA;- !x (subfact), x! (fact)&#xA;- &amp;amp;&amp;amp; (and), || (or), == (equals), != (not equals)&#xA;- &amp;gt;&amp;gt; (right shift), &amp;lt;&amp;lt; (left shift)&#xA;&#xA;Trigonometric functions:&#xA;- sin, cos, tan, asin, acos, atan, atan(x,y)&#xA;- csc, sec, cot, acsc, asec, acot&#xA;- sinh, cosh, tanh, asinh, acosh, atanh&#xA;- csch, sech, coth, acsch, asech, acoth&#xA;&#xA;Other functions:&#xA;- sqrt, cbrt, square, cube&#xA;- ln, log(base,num), root(base,exp), sum(func,var,start,end), prod(func,var,start,end) (start and end are rounded to integers)&#xA;- abs, sgn, arg&#xA;- ceil, floor, round, int, frac&#xA;- fact(real), subfact(natural)&#xA;- sinc, cis, exp&#xA;- zeta, gamma, erf, erfc, digamma, ai, binomial/bi (all real only)&#xA;- deg(to_degrees), rad(to_radians), grad(to_gradians) (all real only)&#xA;- re, im, max(x,y), min(x,y)&#xA;&#xA;Vector operations/functions:&#xA;- *,/,+,-,^&#xA;- dot({vec1},{vec2}), cross({vec1},{vec2}), proj/project({vec1},{vec2})&#xA;- angle({vec1},{vec2})&#xA;- norm, normalize&#xA;- abs, len&#xA;- part({vec},col)&#xA;- convert to polar: pol{vec} outputs (radius, theta, phi)&#xA;- convert to cartesian: car{vec} outputs (x, y, z)&#xA;- other functions are applied like sqrt{2,4}={sqrt(2),sqrt(4)}&#xA;&#xA;Matrix operations/functions:&#xA;- *,/,+,-,^&#xA;- trace/tr, determinant/det, inverse/inv&#xA;- transpose/trans, adjugate/adj, cofactor/cof, minor&#xA;- part({mat},col,row)&#xA;- abs, norm&#xA;- len, wid&#xA;- rotate(theta) produces a rotational matrix&#xA;- other functions are applied like sqrt{{2,4},{5,6}}={{sqrt(2),sqrt(4)},{sqrt(5),sqrt(6)}} &#xA;&#xA;Constants:&#xA;- c: speed of light, 299792458 m/s&#xA;- g: gravity, 9.80665 m/s^2&#xA;- G: gravitational constant, 6.67430E-11 m^3/(kg*s^2)&#xA;- h: planck&#39;s constant, 6.62607015E-34 J*s&#xA;- ec: elementary charge/electron volt, 1.602176634E-19 C/J&#xA;- me: electron mass, 9.1093837015E-31 kg&#xA;- mp: proton mass, 1.67262192369E-27 kg&#xA;- mn: neutron mass, 1.67492749804E-27 kg&#xA;- k: coulomb&#39;s constant, 8.9875517923E9 N*m^2/C^2&#xA;- Na: avogadro&#39;s number, 6.02214076E23 1/mol&#xA;- R: gas constant, 8.31446261815324 J/(mol*K)&#xA;- kB: boltzmann constant, 1.380649E-23 J/K&#xA;- phi/φ: golden ratio, 1.6180339887~&#xA;- e: euler&#39;s number, 2.7182818284~&#xA;- pi/π: pi, 3.1415926535~&#xA;- tau/τ: tau, 6.2831853071~&#xA;&#xA;Digraph:&#xA;hit escape then a letter&#xA;a=&amp;gt;α, A=&amp;gt;Α, b=&amp;gt;β, B=&amp;gt;Β, c=&amp;gt;ξ, C=&amp;gt;Ξ, d=&amp;gt;Δ, D=&amp;gt;δ,&#xA;e=&amp;gt;ε, E=&amp;gt;Ε, f=&amp;gt;φ, F=&amp;gt;Φ, g=&amp;gt;γ, G=&amp;gt;Γ, h=&amp;gt;η, H=&amp;gt;Η,&#xA;i=&amp;gt;ι, I=&amp;gt;Ι, k=&amp;gt;κ, Κ=&amp;gt;Κ, l=&amp;gt;λ, L=&amp;gt;Λ, m=&amp;gt;μ, M=&amp;gt;Μ,&#xA;n=&amp;gt;ν, Ν=&amp;gt;Ν, o=&amp;gt;ο, O=&amp;gt;Ο, p=&amp;gt;π, P=&amp;gt;Π, q=&amp;gt;θ, Q=&amp;gt;Θ,&#xA;r=&amp;gt;ρ, R=&amp;gt;Ρ, s=&amp;gt;σ, S=&amp;gt;Σ, t=&amp;gt;τ, T=&amp;gt;Τ, u=&amp;gt;υ, U=&amp;gt;Υ,&#xA;w=&amp;gt;ω, W=&amp;gt;Ω, y=&amp;gt;ψ, Y=&amp;gt;Ψ, x=&amp;gt;χ, X=&amp;gt;Χ, z=&amp;gt;ζ, Z=&amp;gt;Ζ,&#xA;= &amp;gt;±, `=&amp;gt;ⁱ&#xA;numbers/minus sign convert to superscript acting as exponents&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;example usage&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;kalc&#xA;&amp;gt; 1+1&#xA;2&#xA;&amp;gt; f(x)=sin(2x)&#xA;&amp;gt; f(x) // graphs f(x) in 2D&#xA;&amp;gt; f(pi/2) // evaluates f(x) at x=pi/2, so sin(2pi/2)=sin(pi)=0&#xA;0&#xA;&amp;gt; f(x,y)=x^2+y^2&#xA;&amp;gt; f(1,2) // evaluates f(x,y) at x=1, y=2, so 1^2+2^2=5&#xA;5&#xA;&amp;gt; f(x,y) // graphs f(x,y) in 3D&#xA;&amp;gt; a=3^3&#xA;&amp;gt; cbrt(a)&#xA;3&#xA;&amp;gt; im(exp(xi)) // graphs the imag part of exp(xi) in 2D, so sin(x)&#xA;&amp;gt; f(x,y,z,w)=x+y+z+w&#xA;&amp;gt; f(1,2,3,4) // evaluates f(x,y,z,w) at x=1, y=2, z=3, w=4, so 1+2+3+4=10&#xA;10&#xA;&amp;gt; f(x,y,2,5) // graphs f(x,y,2,5) in 3D with z=2 and w=5 so x+y+2+5&#xA;&amp;gt; f(x,y,2,5)= // displays how its parsed&#xA;((x)+(y)+(2)+(5))&#xA;&amp;gt; f(2,5,x,y) // graphs f(2,5,x,y) in 3D with x=2 and y=5 so 2+5+x+y, to graph x and y have to be the unknown variables&#xA;&amp;gt; |z| // graphs |(x+yi)| in 3D&#xA;&amp;gt; deg // enables degrees&#xA;&amp;gt; pol({5,3,2}+{1,2,3}) // prints {magnitude, theta, phi} of {5,3,2}+{1,2,3}&#xA;{9.273618495496,57.373262293469,39.805571092265}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo -ne &#39;sqrt(pi) \n pi^2&#39;|kalc&#xA;1.7724538509055159&#xA;9.869604401089358&#xA;&#xA;kalc &#39;sqrt(pi)&#39; &#39;pi^2&#39;&#xA;1.7724538509055159&#xA;9.869604401089358&#xA;&#xA;echo -ne &#39;sin(x)#cos(x)&#39;|kalc // graphs sin(x) and cos(x) in 2D&#xA;kalc &#39;sin(x)#cos(x)&#39; // graphs sin(x) and cos(x) in 2D&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;graphing&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;chars available for point style:&#xA;. - dot&#xA;+ - plus&#xA;x - cross&#xA;* - star&#xA;s - empty square&#xA;S - filled square&#xA;o - empty circle&#xA;O - filled circle&#xA;t - empty triangle&#xA;T - filled triangle&#xA;d - empty del (upside down triangle)&#xA;D - filled del (upside down triangle)&#xA;r - empty rhombus&#xA;R - filled rhombus&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>m3f157O/combine_harvester</title>
    <updated>2023-07-26T01:42:57Z</updated>
    <id>tag:github.com,2023-07-26:/m3f157O/combine_harvester</id>
    <link href="https://github.com/m3f157O/combine_harvester" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rust in-memory dumper&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;combine&lt;/h1&gt; &#xA;&lt;p&gt;Check your windows local security authority credential&#39;s safety with this awesome tool.&lt;/p&gt; &#xA;&lt;p&gt;Coupled dump decoder @ &lt;a href=&#34;https://github.com/ruggi99/combine-decoder&#34;&gt;https://github.com/ruggi99/combine-decoder&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;By readapting the safetydump rust library (many thanks to the author!!!), I have been able to EASILY bypass all the countermeasures put in place by most EDRs, except Kaspersky EDR, and TrendMicro (new detection, from a couple hours ago)&lt;/p&gt; &#xA;&lt;p&gt;dbghelp!MiniDumpWriteDump with a custom callback could be used, until a year ago, to bypass most antivirus/EDR solutions.&lt;/p&gt; &#xA;&lt;p&gt;Now, most of them EASILY recognize statically or behaviorally the system API usage pattern, for programs written in languages such as C++, Delphi and C#. (it could be possible anyway thanks to undocumented NtOpenProcessEx but that&#39;s another story)&lt;/p&gt; &#xA;&lt;p&gt;If you have a Go implementation, please give me feedback. I&#39;m on it but still have some bugs related to memory size&lt;/p&gt; &#xA;&lt;p&gt;I suspect that there is still no way to monitor the MiniDumpWriteDump callback, and all the protection against a possible credential dump via this technique is then entrusted to machine learning detections.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;GUI&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/m3f157O/combine_harvester/assets/79704302/89ad15f9-8366-45ca-a1b3-068724323e1f&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;CMD&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/m3f157O/combine_harvester/assets/79704302/f033d48e-019e-4179-9b22-ad60e1552a7e&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;DECRYPT&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/m3f157O/combine_harvester/assets/79704302/01665c76-248c-4b5e-a2ba-2b23d55b5288&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;p&gt;Done thanks to&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://loong716.top/posts/lsass/&#34;&gt;https://loong716.top/posts/lsass/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.thehacker.recipes/ad/movement/credentials/dumping/lsass&#34;&gt;https://www.thehacker.recipes/ad/movement/credentials/dumping/lsass&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://danielsauder.com/2016/02/06/memdumps-volatility-mimikatz-vms-part-1-mimikatz-lsass-exe-dump/&#34;&gt;https://danielsauder.com/2016/02/06/memdumps-volatility-mimikatz-vms-part-1-mimikatz-lsass-exe-dump/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.whiteoaksecurity.com/blog/attacks-defenses-dumping-lsass-no-mimikatz/&#34;&gt;https://www.whiteoaksecurity.com/blog/attacks-defenses-dumping-lsass-no-mimikatz/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ired.team/offensive-security/credential-access-and-credential-dumping/dumping-credentials-from-lsass.exe-process-memory&#34;&gt;https://www.ired.team/offensive-security/credential-access-and-credential-dumping/dumping-credentials-from-lsass.exe-process-memory&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Many code snippets are from&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/postrequest/safetydump&#34;&gt;https://github.com/postrequest/safetydump&lt;/a&gt; (very big help!!! thanks!!!)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/azazelm3dj3d/lsass-dump/raw/main/Dump/Dump.cpp&#34;&gt;https://github.com/azazelm3dj3d/lsass-dump/blob/main/Dump/Dump.cpp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rastamouse.me/dumping-lsass-with-duplicated-handles/&#34;&gt;https://rastamouse.me/dumping-lsass-with-duplicated-handles/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;I am not responsible for any improper usage of this tool. This is meant for research and security testing purpose.&lt;/p&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;p&gt;The only effective mitigations (that I know of) against this sub-technique are RunAsPPL and CredentialGuard, but it&#39;s not always possible to enable these options.&lt;/p&gt;</summary>
  </entry>
</feed>