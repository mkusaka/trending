<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-06-11T01:36:02Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>brave/adblock-rust</title>
    <updated>2025-06-11T01:36:02Z</updated>
    <id>tag:github.com,2025-06-11:/brave/adblock-rust</id>
    <link href="https://github.com/brave/adblock-rust" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Brave&#39;s Rust-based adblock engine&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;adblock-rust&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crates.io/crates/adblock&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/adblock.svg?sanitize=true&#34; alt=&#34;crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/adblock-rs&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/adblock-rs.svg?sanitize=true&#34; alt=&#34;npmjs.com&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/adblock&#34;&gt;&lt;img src=&#34;https://docs.rs/adblock/badge.svg?sanitize=true&#34; alt=&#34;docs.rs&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/brave/adblock-rust/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/brave/adblock-rust/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MPL--2.0-blue&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;em&gt;Putting you back in control of your browsing experience.&lt;/em&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;adblock-rust&lt;/code&gt; is the engine powering &lt;a href=&#34;https://brave.com&#34;&gt;Brave&lt;/a&gt;&#39;s native adblocker, available as a library for anyone to use. It features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Network blocking&lt;/li&gt; &#xA; &lt;li&gt;Cosmetic filtering&lt;/li&gt; &#xA; &lt;li&gt;Resource replacements&lt;/li&gt; &#xA; &lt;li&gt;Hosts syntax&lt;/li&gt; &#xA; &lt;li&gt;uBlock Origin syntax extensions&lt;/li&gt; &#xA; &lt;li&gt;iOS content-blocking syntax conversion&lt;/li&gt; &#xA; &lt;li&gt;Compiling to native code or WASM&lt;/li&gt; &#xA; &lt;li&gt;Rust bindings (&lt;a href=&#34;https://crates.io/crates/adblock&#34;&gt;crates&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;JS bindings (&lt;a href=&#34;https://npmjs.com/adblock-rs&#34;&gt;npm&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Community-maintained Python bindings (&lt;a href=&#34;https://pypi.org/project/adblock/&#34;&gt;pypi&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;High performance!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;adblock-rust&lt;/code&gt; is used in several projects, including browsers, research tools, and proxies. It may be a good fit for yours, too!&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://docs.rs/adblock&#34;&gt;docs.rs&lt;/a&gt; for detailed API documentation.&lt;/p&gt; &#xA;&lt;p&gt;Also check the &lt;a href=&#34;https://raw.githubusercontent.com/brave/adblock-rust/master/examples/example.rs&#34;&gt;Rust example&lt;/a&gt; or the &lt;a href=&#34;https://raw.githubusercontent.com/brave/adblock-rust/master/js/example.mjs&#34;&gt;NodeJS example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Optional features&lt;/h3&gt; &#xA;&lt;p&gt;The following &lt;code&gt;cargo&lt;/code&gt; &lt;a href=&#34;https://doc.rust-lang.org/cargo/reference/features.html&#34;&gt;features&lt;/a&gt; can be used to tweak &lt;code&gt;adblock-rust&lt;/code&gt; to best fit your use-case.&lt;/p&gt; &#xA;&lt;h4&gt;CSS validation during rule parsing (&lt;code&gt;css-validation&lt;/code&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;When parsing cosmetic filter rules, it&#39;s possible to include a built-in implementation of CSS validation (through the &lt;a href=&#34;https://crates.io/crates/selectors&#34;&gt;selectors&lt;/a&gt; and &lt;a href=&#34;https://crates.io/crates/cssparser&#34;&gt;cssparser&lt;/a&gt; crates) by enabling the &lt;code&gt;css-validation&lt;/code&gt; feature. This will cause &lt;code&gt;adblock-rust&lt;/code&gt; to reject cosmetic filter rules with invalid CSS syntax.&lt;/p&gt; &#xA;&lt;h4&gt;Content blocking format translation (&lt;code&gt;content-blocking&lt;/code&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;Enabling the &lt;code&gt;content-blocking&lt;/code&gt; feature gives &lt;code&gt;adblock-rust&lt;/code&gt; support for conversion of standard ABP-style rules into Apple&#39;s &lt;a href=&#34;https://developer.apple.com/documentation/safariservices/creating_a_content_blocker&#34;&gt;content-blocking format&lt;/a&gt;, which can be exported for use on iOS and macOS platforms.&lt;/p&gt; &#xA;&lt;h4&gt;External domain resolution (&lt;code&gt;embedded-domain-resolver&lt;/code&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;adblock-rust&lt;/code&gt; ships with a built-in domain resolution implementation (through the &lt;a href=&#34;https://crates.io/crates/addr&#34;&gt;addr&lt;/a&gt; crate) that will generally suffice for standalone use-cases. For more advanced use-cases, disabling the &lt;code&gt;embedded-domain-resolver&lt;/code&gt; feature will allow &lt;code&gt;adblock-rust&lt;/code&gt; to use an external domain resolution implementation instead. This is extremely useful to reduce binary bloat and improve consistency when embedding &lt;code&gt;adblock-rust&lt;/code&gt; within a browser.&lt;/p&gt; &#xA;&lt;h4&gt;Parsing resources from uBlock Origin&#39;s formats (&lt;code&gt;resource-assembler&lt;/code&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;adblock-rust&lt;/code&gt; uses uBlock Origin-compatible resources for scriptlet injection and redirect rules. The &lt;code&gt;resource-assembler&lt;/code&gt; feature allows &lt;code&gt;adblock-rust&lt;/code&gt; to parse these resources directly from the file formats used by the uBlock Origin repository.&lt;/p&gt; &#xA;&lt;h4&gt;Thread safety (&lt;code&gt;unsync-regex-caching&lt;/code&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;unsync-regex-caching&lt;/code&gt; feature enables optimizations for rule matching speed and the amount of memory used by the engine. This feature can be disabled to make the engine &lt;code&gt;Send + Sync&lt;/code&gt;, although it is recommended to only access the engine on a single thread to maintain optimal performance.&lt;/p&gt;</summary>
  </entry>
</feed>