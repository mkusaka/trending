<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-02T01:45:56Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ducaale/xh</title>
    <updated>2023-07-02T01:45:56Z</updated>
    <id>tag:github.com,2023-07-02:/ducaale/xh</id>
    <link href="https://github.com/ducaale/xh" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Friendly and fast tool for sending HTTP requests&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;xh&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crates.io/crates/xh&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/xh.svg?sanitize=true&#34; alt=&#34;Version info&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/project/xh/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/tiny-repos/xh.svg?sanitize=true&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;xh&lt;/code&gt; is a friendly and fast tool for sending HTTP requests. It reimplements as much as possible of &lt;a href=&#34;https://httpie.io/&#34;&gt;HTTPie&#39;s&lt;/a&gt; excellent design, with a focus on improved performance.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/475190&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ducaale/xh/master/assets/xh-demo.gif&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;via cURL (Linux &amp;amp; macOS)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -sfL https://raw.githubusercontent.com/ducaale/xh/master/install.sh | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;via Powershell (Windows)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;iwr -useb https://raw.githubusercontent.com/ducaale/xh/master/install.ps1 | iex&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;via a package manager&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;OS&lt;/th&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Any&lt;/td&gt; &#xA;   &lt;td&gt;Cargo*&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cargo install xh&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Any&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/innobead/huber#installing-huber&#34;&gt;Huber&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;huber install xh&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Android (&lt;a href=&#34;https://github.com/termux/termux-app&#34;&gt;Termux&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;pkg&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pkg install xh&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Android (&lt;a href=&#34;https://github.com/topjohnwu/Magisk&#34;&gt;Magisk&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Magisk**&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;magisk --install-module &amp;lt;path/to/module&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Alpine Linux&lt;/td&gt; &#xA;   &lt;td&gt;apk***&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;apk add xh&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Arch Linux&lt;/td&gt; &#xA;   &lt;td&gt;Pacman&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pacman -S xh&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Debian &amp;amp; Ubuntu&lt;/td&gt; &#xA;   &lt;td&gt;Apt****&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sudo apt install xh&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FreeBSD&lt;/td&gt; &#xA;   &lt;td&gt;FreshPorts&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pkg install xh&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux &amp;amp; macOS&lt;/td&gt; &#xA;   &lt;td&gt;Nixpkgs&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nix-env -iA nixpkgs.xh&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux &amp;amp; macOS&lt;/td&gt; &#xA;   &lt;td&gt;Homebrew&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;brew install xh&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macOS&lt;/td&gt; &#xA;   &lt;td&gt;MacPorts&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sudo port install xh&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;Scoop&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;scoop install xh&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;Chocolatey&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;choco install xh&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;* Make sure that you have Rust 1.64 or later installed&lt;/p&gt; &#xA;&lt;p&gt;** To install the module pick one of these &lt;a href=&#34;https://github.com/Magisk-Modules-Alt-Repo/xhhttp/releases&#34;&gt;releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;*** The xh package is available in Edge and will be in v3.17+. It is built with native-tls only.&lt;/p&gt; &#xA;&lt;p&gt;**** You will need to add the apt repository from &lt;a href=&#34;https://apt.cli.rs/&#34;&gt;https://apt.cli.rs/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;via pre-built binaries&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/ducaale/xh/releases&#34;&gt;release page&lt;/a&gt; contains prebuilt binaries for Linux, macOS and Windows.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;USAGE:&#xA;    xh [OPTIONS] &amp;lt;[METHOD] URL&amp;gt; [--] [REQUEST_ITEM]...&#xA;&#xA;ARGS:&#xA;    &amp;lt;[METHOD] URL&amp;gt;       The request URL, preceded by an optional HTTP method&#xA;    &amp;lt;REQUEST_ITEM&amp;gt;...    Optional key-value pairs to be included in the request&#xA;&#xA;OPTIONS:&#xA;    -j, --json                           (default) Serialize data items from the command line as a JSON object&#xA;    -f, --form                           Serialize data items from the command line as form fields&#xA;        --multipart                      Like --form, but force a multipart/form-data request even without files&#xA;        --raw &amp;lt;RAW&amp;gt;                      Pass raw request data without extra processing&#xA;        --pretty &amp;lt;STYLE&amp;gt;                 Controls output processing [possible values: all, colors, format, none]&#xA;    -s, --style &amp;lt;THEME&amp;gt;                  Output coloring style [possible values: auto, solarized, monokai, fruity]&#xA;        --response-charset &amp;lt;ENCODING&amp;gt;    Override the response encoding for terminal display purposes&#xA;        --response-mime &amp;lt;MIME_TYPE&amp;gt;      Override the response mime type for coloring and formatting for the terminal&#xA;    -p, --print &amp;lt;FORMAT&amp;gt;                 String specifying what the output should contain&#xA;    -h, --headers                        Print only the response headers. Shortcut for --print=h&#xA;    -b, --body                           Print only the response body. Shortcut for --print=b&#xA;    -m, --meta                           Print only the response metadata. Shortcut for --print=m&#xA;    -v, --verbose                        Print the whole request as well as the response&#xA;        --all                            Show any intermediary requests/responses while following redirects with --follow&#xA;    -P, --history-print &amp;lt;FORMAT&amp;gt;         The same as --print but applies only to intermediary requests/responses&#xA;    -4, --ipv4                           Resolve hostname to ipv4 addresses only&#xA;    -6, --ipv6                           Resolve hostname to ipv6 addresses only&#xA;    -q, --quiet                          Do not print to stdout or stderr&#xA;    -S, --stream                         Always stream the response body&#xA;    -o, --output &amp;lt;FILE&amp;gt;                  Save output to FILE instead of stdout&#xA;    -d, --download                       Download the body to a file instead of printing it&#xA;    -c, --continue                       Resume an interrupted download. Requires --download and --output&#xA;        --session &amp;lt;FILE&amp;gt;                 Create, or reuse and update a session&#xA;        --session-read-only &amp;lt;FILE&amp;gt;       Create or read a session without updating it form the request/response exchange&#xA;    -A, --auth-type &amp;lt;AUTH_TYPE&amp;gt;          Specify the auth mechanism [possible values: basic, bearer, digest]&#xA;    -a, --auth &amp;lt;USER[:PASS] | TOKEN&amp;gt;     Authenticate as USER with PASS (-A basic|digest) or with TOKEN (-A bearer)&#xA;        --ignore-netrc                   Do not use credentials from .netrc&#xA;        --offline                        Construct HTTP requests without sending them anywhere&#xA;        --check-status                   (default) Exit with an error status code if the server replies with an error&#xA;    -F, --follow                         Do follow redirects&#xA;        --max-redirects &amp;lt;NUM&amp;gt;            Number of redirects to follow. Only respected if --follow is used&#xA;        --timeout &amp;lt;SEC&amp;gt;                  Connection timeout of the request&#xA;        --proxy &amp;lt;PROTOCOL:URL&amp;gt;           Use a proxy for a protocol. For example: --proxy https:http://proxy.host:8080&#xA;        --verify &amp;lt;VERIFY&amp;gt;                If &#34;no&#34;, skip SSL verification. If a file path, use it as a CA bundle&#xA;        --cert &amp;lt;FILE&amp;gt;                    Use a client side certificate for SSL&#xA;        --cert-key &amp;lt;FILE&amp;gt;                A private key file to use with --cert&#xA;        --ssl &amp;lt;VERSION&amp;gt;                  Force a particular TLS version [possible values: auto, tls1, tls1.1, tls1.2, tls1.3]&#xA;        --native-tls                     Use the system TLS library instead of rustls (if enabled at compile time)&#xA;        --https                          Make HTTPS requests if not specified in the URL&#xA;        --http-version &amp;lt;VERSION&amp;gt;         HTTP version to use [possible values: 1.0, 1.1, 2]&#xA;    -I, --ignore-stdin                   Do not attempt to read stdin&#xA;        --curl                           Print a translation to a curl command&#xA;        --curl-long                      Use the long versions of curl&#39;s flags&#xA;        --help                           Print help information&#xA;    -V, --version                        Print version information&#xA;&#xA;Each option can be reset with a --no-OPTION argument.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;xh help&lt;/code&gt; for more detailed information.&lt;/p&gt; &#xA;&lt;h3&gt;Request Items&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;xh&lt;/code&gt; uses &lt;a href=&#34;https://httpie.io/docs#request-items&#34;&gt;HTTPie&#39;s request-item syntax&lt;/a&gt; to set headers, request body, query string, etc.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;=&lt;/code&gt;/&lt;code&gt;:=&lt;/code&gt; for setting the request body&#39;s JSON or form fields (&lt;code&gt;=&lt;/code&gt; for strings and &lt;code&gt;:=&lt;/code&gt; for other JSON types).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;==&lt;/code&gt; for adding query strings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@&lt;/code&gt; for including files in multipart requests e.g &lt;code&gt;picture@hello.jpg&lt;/code&gt; or &lt;code&gt;picture@hello.jpg;type=image/jpeg;filename=goodbye.jpg&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:&lt;/code&gt; for adding or removing headers e.g &lt;code&gt;connection:keep-alive&lt;/code&gt; or &lt;code&gt;connection:&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;;&lt;/code&gt; for including headers with empty values e.g &lt;code&gt;header-without-value;&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;An &lt;code&gt;@&lt;/code&gt; prefix can be used to read a value from a file. For example: &lt;code&gt;x-api-key:@api-key.txt&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The request body can also be read from standard input, or from a file using &lt;code&gt;@filename&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To construct a complex JSON object, a JSON path can be used as a key e.g &lt;code&gt;app[container][0][id]=090-5&lt;/code&gt;. For more information on this syntax, refer to &lt;a href=&#34;https://httpie.io/docs/cli/nested-json&#34;&gt;https://httpie.io/docs/cli/nested-json&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Shorthand form for URLs&lt;/h3&gt; &#xA;&lt;p&gt;Similar to HTTPie, specifying the scheme portion of the request URL is optional, and a leading colon works as shorthand for localhost. &lt;code&gt;:8000&lt;/code&gt; is equivalent to &lt;code&gt;localhost:8000&lt;/code&gt;, and &lt;code&gt;:/path&lt;/code&gt; is equivalent to &lt;code&gt;localhost/path&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;URLs can have a leading &lt;code&gt;://&lt;/code&gt; which allows quickly converting a URL into a valid xh or HTTPie command. For example &lt;code&gt;http://httpbin.org/json&lt;/code&gt; becomes &lt;code&gt;http ://httpbin.org/json&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;xh http://localhost:3000/users # resolves to http://localhost:3000/users&#xA;xh localhost:3000/users        # resolves to http://localhost:3000/users&#xA;xh :3000/users                 # resolves to http://localhost:3000/users&#xA;xh :/users                     # resolves to http://localhost:80/users&#xA;xh example.com                 # resolves to http://example.com&#xA;xh ://example.com              # resolves to http://example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Making HTTPS requests by default&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;xh&lt;/code&gt; will default to HTTPS scheme if the binary name is one of &lt;code&gt;xhs&lt;/code&gt;, &lt;code&gt;https&lt;/code&gt;, or &lt;code&gt;xhttps&lt;/code&gt;. If you have installed &lt;code&gt;xh&lt;/code&gt; via a package manager, both &lt;code&gt;xh&lt;/code&gt; and &lt;code&gt;xhs&lt;/code&gt; should be available by default. Otherwise, you need to create one like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd /path/to/xh &amp;amp;&amp;amp; ln -s ./xh ./xhs&#xA;xh httpbin.org/get  # resolves to http://httpbin.org/get&#xA;xhs httpbin.org/get # resolves to https://httpbin.org/get&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Strict compatibility mode&lt;/h3&gt; &#xA;&lt;p&gt;If &lt;code&gt;xh&lt;/code&gt; is invoked as &lt;code&gt;http&lt;/code&gt; or &lt;code&gt;https&lt;/code&gt; (by renaming the binary), or if the &lt;code&gt;XH_HTTPIE_COMPAT_MODE&lt;/code&gt; environment variable is set, it will run in HTTPie compatibility mode. The only current difference is that &lt;code&gt;--check-status&lt;/code&gt; is not enabled by default.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Send a GET request&#xA;xh httpbin.org/json&#xA;&#xA;# Send a POST request with body {&#34;name&#34;: &#34;ahmed&#34;, &#34;age&#34;: 24}&#xA;xh httpbin.org/post name=ahmed age:=24&#xA;&#xA;# Send a GET request with querystring id=5&amp;amp;sort=true&#xA;xh get httpbin.org/json id==5 sort==true&#xA;&#xA;# Send a GET request and include a header named x-api-key with value 12345&#xA;xh get httpbin.org/json x-api-key:12345&#xA;&#xA;# Send a POST request with body read from stdin.&#xA;echo &#34;[1, 2, 3]&#34; | xh post httpbin.org/post&#xA;&#xA;# Send a PUT request and pipe the result to less&#xA;xh put httpbin.org/put id:=49 age:=25 | less&#xA;&#xA;# Download and save to res.json&#xA;xh -d httpbin.org/json -o res.json&#xA;&#xA;# Make a request with a custom user agent&#xA;xh httpbin.org/get user-agent:foobar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How xh compares to HTTPie&lt;/h2&gt; &#xA;&lt;h3&gt;Advantages&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Improved startup speed.&lt;/li&gt; &#xA; &lt;li&gt;Available as a single statically linked binary that&#39;s easy to install and carry around.&lt;/li&gt; &#xA; &lt;li&gt;HTTP/2 support.&lt;/li&gt; &#xA; &lt;li&gt;Builtin translation to curl commands with the &lt;code&gt;--curl&lt;/code&gt; flag.&lt;/li&gt; &#xA; &lt;li&gt;Short, cheatsheet-style output from &lt;code&gt;--help&lt;/code&gt;. (For longer output, pass &lt;code&gt;help&lt;/code&gt;.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Disadvantages&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Not all of HTTPie&#39;s features are implemented. (&lt;a href=&#34;https://github.com/ducaale/xh/issues/4&#34;&gt;#4&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Header names are not case-sensitive.&lt;/li&gt; &#xA; &lt;li&gt;No plugin system.&lt;/li&gt; &#xA; &lt;li&gt;General immaturity. HTTPie is old and well-tested.&lt;/li&gt; &#xA; &lt;li&gt;Worse documentation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Other differences&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--check-status&lt;/code&gt; is enabled unless &lt;code&gt;xh&lt;/code&gt; is being used in &lt;a href=&#34;https://github.com/ducaale/xh#strict-compatibility-mode&#34;&gt;strict compatibility mode&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustls&lt;/code&gt; is used by default instead of the system&#39;s TLS library. (If enabled at compile time, the &lt;code&gt;--native-tls&lt;/code&gt; flag can be used.)&lt;/li&gt; &#xA; &lt;li&gt;JSON keys are not sorted.&lt;/li&gt; &#xA; &lt;li&gt;Formatted output is always UTF-8.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Similar or related Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rs/curlie&#34;&gt;curlie&lt;/a&gt; - frontend to cURL that adds the ease of use of httpie&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nojima/httpie-go&#34;&gt;httpie-go&lt;/a&gt; - httpie-like HTTP client written in Go&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dcb9/curl2httpie&#34;&gt;curl2httpie&lt;/a&gt; - convert command arguments between cURL and HTTPie&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>typst/packages</title>
    <updated>2023-07-02T01:45:56Z</updated>
    <id>tag:github.com,2023-07-02:/typst/packages</id>
    <link href="https://github.com/typst/packages" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Packages for Typst. Open for submissions now.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Typst Packages&lt;/h1&gt; &#xA;&lt;p&gt;An experimental package repository for Typst. Compiler support for packages is available on Typst&#39;s main branch, but not yet in the latest release or in the web app. Still, &lt;strong&gt;submissions are open now&lt;/strong&gt; so that the next release can ship with a collection of packages. A searchable list of packages will become available in the official documentation with the next release.&lt;/p&gt; &#xA;&lt;h2&gt;Package format&lt;/h2&gt; &#xA;&lt;p&gt;A package is a collection of Typst files and assets that can be imported as a unit. A &lt;code&gt;typst.toml&lt;/code&gt; manifest with metadata is required at the root of a package. An example manifest could look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[package]&#xA;name = &#34;example&#34;&#xA;version = &#34;0.1.0&#34;&#xA;entrypoint = &#34;lib.typ&#34;&#xA;authors = [&#34;The Typst Project Developers&#34;]&#xA;license = &#34;Unlicense&#34;&#xA;description = &#34;An example package.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Required by the compiler:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;name&lt;/code&gt;: The package&#39;s identifier in its namespace.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;version&lt;/code&gt;: The package&#39;s version as a full major-minor-patch triple. Package versioning should follow &lt;a href=&#34;https://semver.org/&#34;&gt;SemVer&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;entrypoint&lt;/code&gt;: The path to the main Typst file that is evaluated when the package is imported.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Required for submissions to this repository:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;authors&lt;/code&gt;: A list of the package&#39;s authors.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;license&lt;/code&gt;: The package&#39;s license. Must contain a valid SPDX-2 expression describing one or multiple &lt;a href=&#34;https://opensource.org/licenses/&#34;&gt;OSI-approved&lt;/a&gt; licenses.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;description&lt;/code&gt;: A short description of the package.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Optional:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;repository&lt;/code&gt;: A link to the repository where this package is developed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Packages always live in folders named as &lt;code&gt;{name}-{version}&lt;/code&gt;. The name and version in the folder name and manifest must match. Paths in a package are local to that package. Absolute paths start in the package root while relative paths are relative to the file they are used in.&lt;/p&gt; &#xA;&lt;h2&gt;Published packages&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains a collection of published packages. Due to its early and experimental nature, all packages in this repository are scoped in a &lt;code&gt;preview&lt;/code&gt; namespace. A package that is stored in &lt;code&gt;packages/preview/{name}-{version}&lt;/code&gt; in this repository will become availabe in Typst as &lt;code&gt;#import &#34;@preview/{name}:{version}&#34;&lt;/code&gt;. You must always specify the full package version.&lt;/p&gt; &#xA;&lt;h3&gt;Submission guidelines&lt;/h3&gt; &#xA;&lt;p&gt;There are a few requirements for getting a package published, which are detailed below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Naming:&lt;/strong&gt; Names should not include the word &#34;typst&#34; (as it is redundant). They should also not be merely descriptive to create level grounds for everybody (e.g. not just &lt;code&gt;slides&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Functionality:&lt;/strong&gt; Packages should conceivably be useful to other users and should expose their capabilities in a reasonable fashion.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Documentation:&lt;/strong&gt; Packages must contain a &lt;code&gt;README.md&lt;/code&gt; file documenting (at least briefly) what the package does and all definitions intended for usage by downstream users.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;License:&lt;/strong&gt; Packages must be licensed under the terms of an &lt;a href=&#34;https://opensource.org/licenses/&#34;&gt;OSI-approved&lt;/a&gt; license. In addition to specifying the license in the TOML manifest, a package must either contain a &lt;code&gt;LICENSE&lt;/code&gt; file or link to one in its &lt;code&gt;README.md&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Size:&lt;/strong&gt; Packages should not contain large files or a large number of files. This will be judged on a case-by-case basis, but if it needs more than ten files, it should be well-motivated.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Security:&lt;/strong&gt; Packages must not attempt to exploit the compiler or packaging implementation, in particular not to exfiltrate user data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Safety:&lt;/strong&gt; Names and package contents must be safe for work.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This list may be extended over time as improvements/issues to the process are discovered. Given a good reason, we reserve the right to reject any package submission.&lt;/p&gt; &#xA;&lt;p&gt;Once submitted, a package will not be changed or removed without good reason to prevent breakage for downstream consumers. By submitting a package, you agree that it is here to stay. If you discover a bug or issue, you can of course submit a new version of your package.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Please do not submit templates as packages just yet. We plan to build infrastructure around this so that they can show up in the web app&#39;s template gallery and be used to scaffold a project through the CLI. Stay tuned!&lt;/p&gt; &#xA;&lt;h3&gt;Downloads&lt;/h3&gt; &#xA;&lt;p&gt;The Typst compiler downloads packages from the &lt;code&gt;preview&lt;/code&gt; namespace on-demand. Once used, they are cached in &lt;code&gt;{cache-dir}/typst/packages/preview&lt;/code&gt; where &lt;code&gt;{cache-dir}&lt;/code&gt; is&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;$XDG_CACHE_HOME&lt;/code&gt; or &lt;code&gt;~/.cache&lt;/code&gt; on Linux&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;~/Library/Caches&lt;/code&gt; on macOS&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;%LOCALAPPDATA%&lt;/code&gt; on Windows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Importing a cached package does not result in a network access.&lt;/p&gt; &#xA;&lt;h2&gt;Local packages&lt;/h2&gt; &#xA;&lt;p&gt;Want to install a package locally on your system without publishing it or experiment with it before publishing? You can store packages in &lt;code&gt;{data-dir}/typst/packages/{namespace}/{name}-{version}&lt;/code&gt; to make them available locally on your system. Here, &lt;code&gt;{data-dir}&lt;/code&gt; is&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;$XDG_DATA_HOME&lt;/code&gt; or &lt;code&gt;~/.local/share&lt;/code&gt; on Linux&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;~/Library/Application Support&lt;/code&gt; on macOS&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;%APPDATA%&lt;/code&gt; on Windows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Packages in the data directory have precedence over ones in the cache directory. While you can create arbitrary namespaces with folders, a good namespace for system packages is &lt;code&gt;local&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Store a package in &lt;code&gt;~/.local/share/typst/packages/local/mypkg-1.0.0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Import from it with &lt;code&gt;#import &#34;@local/mypkg:1.0.0&#34;: *&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that future iterations of Typst&#39;s package management may change/break this local setup.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The infrastructure around the package repository is licensed under the terms of the Apache-2.0 license. Packages in &lt;code&gt;packages/&lt;/code&gt; are licensed under their respective license.&lt;/p&gt;</summary>
  </entry>
</feed>