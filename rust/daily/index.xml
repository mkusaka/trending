<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-27T01:36:47Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>raydium-io/raydium-amm</title>
    <updated>2025-01-27T01:36:47Z</updated>
    <id>tag:github.com,2025-01-27:/raydium-io/raydium-amm</id>
    <link href="https://github.com/raydium-io/raydium-amm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Constant product AMM integrated with the OpenBook CLOB&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;raydium-amm&lt;/h1&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Program Deployments&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Environment&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raydium-io/raydium-amm/master/program&#34;&gt;PROGRAM&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mainnet&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Devnet&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;HWy1jotHpo6UqeQxx49dpYYdQB8wj9Qk9MdxwjLvDHB8&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;The Raydium AMM is an on-chain smart contract based on the “constant product” in a permissionless and decentralized manner built on the Solana blockchain.And it also shares its liquidity according to the Fibonacci sequence in the form of limit orders on &lt;a href=&#34;https://github.com/openbook-dex/program&#34;&gt;OpenBook&lt;/a&gt;, the primary central limit order book (CLOB) of Solana&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;The audit process is &lt;a href=&#34;https://github.com/raydium-io/raydium-docs/tree/master/audit&#34;&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;The dev document is &lt;a href=&#34;https://github.com/raydium-io/raydium-docs/tree/master/dev-resources&#34;&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Environment Setup&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;Rust&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://docs.solana.com/cli/install-solana-cli-tools&#34;&gt;Solana&lt;/a&gt; and then run &lt;code&gt;solana-keygen new&lt;/code&gt; to create a keypair at the default location.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;Clone the repository and enter the source code directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/raydium-io/raydium-amm&#xA;cd raydium-amm/program&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mainnet Build&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo build-sbf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Devnet Build&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo build-sbf --features devnet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Localnet Build&lt;/h3&gt; &#xA;&lt;p&gt;You must update these pubkeys in the &#34;config_feature&#34; as yours over the localnet feature before build;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo build-sbf --features localnet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After building, the smart contract files are all located in the target directory.&lt;/p&gt; &#xA;&lt;h2&gt;Deploy&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;solana deploy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Attention, check your configuration and confirm the environment you want to deploy.&lt;/p&gt; &#xA;&lt;h2&gt;QuickStart&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;You must have an openbook market not associated to any amm pool if you want to initialize a new amm pool. And you can refer to &lt;a href=&#34;https://github.com/openbook-dex/program/raw/master/dex/crank/src/lib.rs#L349&#34;&gt;ListMarket&lt;/a&gt; to create a new market.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add dependencies in your Cargo.toml&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;[dependencies]&#xA;[features]&#xA;# default is mainnet&#xA;devnet = [&#xA;    &#34;amm-cli/devnet&#34;,&#xA;    &#34;common/devnet&#34;,&#xA;]&#xA;&#xA;[dependencies]&#xA;amm-cli = { git = &#34;https://github.com/raydium-io/raydium-library&#34; }&#xA;common = { git = &#34;https://github.com/raydium-io/raydium-library&#34; }&#xA;spl-token = { version = &#34;4.0.0&#34;, features = [&#34;no-entrypoint&#34;] }&#xA;spl-associated-token-account = { version = &#34;2.2.0&#34;, features = [&#xA;    &#34;no-entrypoint&#34;,&#xA;] }&#xA;spl-token-2022 = { version = &#34;0.9.0&#34;, features = [&#34;no-entrypoint&#34;] }&#xA;solana-client = &#34;&amp;lt;1.17.0&#34;&#xA;solana-sdk = &#34;&amp;lt;1.17.0&#34;&#xA;anyhow = &#34;1.0.53&#34;&#xA;clap = { version = &#34;4.1.8&#34;, features = [&#34;derive&#34;] }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Import dependent libraries&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;#![allow(dead_code)]&#xA;use anyhow::{Ok, Result};&#xA;use clap::Parser;&#xA;use solana_client::rpc_client::RpcClient;&#xA;use solana_sdk::{commitment_config::CommitmentConfig, signer::Signer};&#xA;use std::sync::Arc;&#xA;&#xA;use {&#xA;    amm_cli::{self, AmmCommands},&#xA;    common::{common_types, common_utils, rpc},&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Custom configuration parameters in your code.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;// default config&#xA;let mut config = common_types::CommonConfig::default();&#xA;// Replace the default configuration parameters you need&#xA;config.set_cluster(&#34;http&#34;, &#34;ws&#34;);&#xA;config.set_wallet(&#34;your wallet path&#34;);&#xA;config.set_amm_program(&#34;675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8&#34;);&#xA;config.set_openbook_program(&#34;srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX&#34;);&#xA;config.set_slippage(50);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Constructing a signed storage object.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;let payer = common_utils::read_keypair_file(&amp;amp;config.wallet())?;&#xA;let fee_payer = payer.pubkey();&#xA;let mut signing_keypairs: Vec&amp;lt;Arc&amp;lt;dyn Signer&amp;gt;&amp;gt; = Vec::new();&#xA;let payer: Arc&amp;lt;dyn Signer&amp;gt; = Arc::new(payer);&#xA;if !signing_keypairs.contains(&amp;amp;payer) {&#xA;    signing_keypairs.push(payer);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;initialize a new amm pool with an associate openbook market&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;// build initialize pool instruction&#xA;let subcmd = AmmCommands::CreatePool {&#xA;    market: Pubkey::from_str(&#34;The amm associated with openbook market&#34;).unwrap(),&#xA;    coin_mint: Pubkey::from_str(&#34;The openbook market&#39;s coin_mint&#34;).unwrap(),&#xA;    pc_mint: Pubkey::from_str(&#34;The openbook market&#39;s pc_mint&#34;).unwrap(),&#xA;    user_token_coin: Pubkey::from_str(&#34;User&#39;s token coin&#34;).unwrap(),&#xA;    user_token_pc: Pubkey::from_str(&#34;User&#39;s token pc&#34;).unwrap(),&#xA;    init_coin_amount: 100000u64,&#xA;    init_pc_amount: 100000u64,&#xA;    open_time: 0,&#xA;};&#xA;let instruction = amm_cli::process_amm_commands(subcmd, &amp;amp;config).unwrap();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;deposit assets to an amm pool&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;// build deposit instruction&#xA;let subcmd = AmmCommands::Deposit {&#xA;    pool_id: Pubkey::from_str(&#34;The specified pool of the assets deposite to&#34;).unwrap(),&#xA;    deposit_token_coin: Some(Pubkey::from_str(&#34;The specified token coin of the user deposit&#34;).unwrap()),&#xA;    deposit_token_pc: Some(Pubkey::from_str(&#34;The specified token pc of the user deposit&#34;).unwrap()),&#xA;    recipient_token_lp: Some(Pubkey::from_str(&#34;The specified lp token of the user will receive&#34;).unwrap()),&#xA;    amount_specified: 100000u64,&#xA;    another_min_limit: false,&#xA;    base_coin: false,&#xA;};&#xA;let instruction = amm_cli::process_amm_commands(subcmd, &amp;amp;config).unwrap();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Note&lt;/h3&gt; &#xA;&lt;p&gt;If the parameter of the deposit_token_coin, deposit_token_pc or recipient_token_lp is None, it will be ATA token by default.&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;withdraw assets from amm pool&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;// build withdraw instruction&#xA;let subcmd = AmmCommands::Withdraw {&#xA;    pool_id: Pubkey::from_str(&#34;The specified pool of the assets withdraw from&#34;).unwrap(),&#xA;    withdraw_token_lp: Some(Pubkey::from_str(&#34;The specified lp token of the user withdraw&#34;).unwrap()),&#xA;    recipient_token_coin: Some(Pubkey::from_str(&#34;The specified token coin of the user will receive&#34;).unwrap()),&#xA;    recipient_token_pc: Some(Pubkey::from_str(&#34;The specified token pc of the user will receive&#34;).unwrap()),&#xA;    input_lp_amount: 100000u64,&#xA;    slippage_limit: false,&#xA;};&#xA;let instruction = amm_cli::process_amm_commands(subcmd, &amp;amp;config).unwrap();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Note&lt;/h3&gt; &#xA;&lt;p&gt;If the parameter of the withdraw_token_lp, recipient_token_coin or recipient_token_pc is None, it will be ATA token by default.&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;swap&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;// build swap instruction&#xA;let subcmd = AmmCommands::Swap {&#xA;    pool_id: Pubkey::from_str(&#34; The specified pool of trading&#34;).unwrap(),&#xA;    user_input_token: Pubkey::from_str(&#34;The token of user want to swap from&#34;).unwrap(),&#xA;    user_output_token: Some(Pubkey::from_str(&#34;The token of user want to swap to&#34;).unwrap()),&#xA;    amount_specified: 100000u64,&#xA;    base_out: false,&#xA;};&#xA;let instruction = amm_cli::process_amm_commands(subcmd, &amp;amp;config).unwrap();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Note&lt;/h3&gt; &#xA;&lt;p&gt;If the parameter of the user_output_token is None, it will be ATA token by default.&lt;/p&gt; &#xA;&lt;p&gt;For more information, you can see the repo &lt;a href=&#34;https://github.com/raydium-io/raydium-library&#34;&gt;raydium-library&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>raydium-io/raydium-clmm</title>
    <updated>2025-01-27T01:36:47Z</updated>
    <id>tag:github.com,2025-01-27:/raydium-io/raydium-clmm</id>
    <link href="https://github.com/raydium-io/raydium-clmm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open-Source Concentrated Liquidity Market Maker&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Raydium-Amm-v3 is an open-sourced concentrated liquidity market maker (CLMM) program built for the Solana ecosystem.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Concentrated Liquidity Market Maker (CLMM)&lt;/strong&gt; pools allow liquidity providers to select a specific price range at which liquidity is active for trades within a pool. This is in contrast to constant product Automated Market Maker (AMM) pools, where all liquidity is spread out on a price curve from 0 to ∞. For LPs, CLMM design enables capital to be deployed with higher efficiency and earn increased yield from trading fees. For traders, CLMMs improve liquidity depth around the current price which translates to better prices and lower price impact on swaps. CLMM pools can be configured for pairs with different volatility.&lt;/p&gt; &#xA;&lt;h2&gt;Environment Setup&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;code&gt;Rust&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh&#xA;rustup default 1.79.0&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;code&gt;Solana &lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sh -c &#34;$(curl -sSfL https://release.solana.com/v1.17.0/install)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;then run &lt;code&gt;solana-keygen new&lt;/code&gt; to create a keypair at the default location.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;install &lt;code&gt;Anchor&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Installing using Anchor version manager (avm) &#xA;cargo install --git https://github.com/coral-xyz/anchor avm --locked --force&#xA;# Install anchor&#xA;avm install 0.29.0&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Clone the repository and enter the source code directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/raydium-io/raydium-amm-v3&#xA;cd raydium-amm-v3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;anchor build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After building, the smart contract files are all located in the target directory.&lt;/p&gt; &#xA;&lt;p&gt;Deploy&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;anchor deploy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Attention, check your configuration and confirm the environment you want to deploy.&lt;/p&gt; &#xA;&lt;h1&gt;CPI&lt;/h1&gt; &#xA;&lt;p&gt;An example of calling clmm can be found &lt;a href=&#34;https://github.com/raydium-io/raydium-cpi-example/tree/master/clmm-cpi&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;The source code is &lt;a href=&#34;https://github.com/raydium-io/raydium-clmm/raw/master/LICENSE&#34;&gt;licensed&lt;/a&gt; under Apache 2.0.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>davidlattimore/wild</title>
    <updated>2025-01-27T01:36:47Z</updated>
    <id>tag:github.com,2025-01-27:/davidlattimore/wild</id>
    <link href="https://github.com/davidlattimore/wild" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A very fast linker for Linux&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Wild linker&lt;/h1&gt; &#xA;&lt;p&gt;Wild is a linker with the goal of being very fast for iterative development.&lt;/p&gt; &#xA;&lt;p&gt;The plan is to eventually make it incremental, however that isn&#39;t yet implemented. It is however already pretty fast even without incremental linking.&lt;/p&gt; &#xA;&lt;p&gt;For production builds, its recommended to use a more mature linker like GNU ld or LLD.&lt;/p&gt; &#xA;&lt;p&gt;During development, if you&#39;d like faster warm build times, then you could give Wild a try. It&#39;s at the point now where it should be usable for development purposes provided you&#39;re developing on x86-64 Linux. If you hit any issues, please file a bug report.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install a pre-built binary, you can copy and paste the command from the &lt;a href=&#34;https://github.com/davidlattimore/wild/releases&#34;&gt;releases page&lt;/a&gt;. Alternatively, you can download the tarball and manually copy the &lt;code&gt;wild&lt;/code&gt; binary somewhere on your path.&lt;/p&gt; &#xA;&lt;p&gt;To build and install, you can run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo install --locked --bin wild --git https://github.com/davidlattimore/wild.git wild&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using as your default linker&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like to use Wild as your default linker for building Rust code, you can put the following in &lt;code&gt;~/.cargo/config.toml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[target.x86_64-unknown-linux-gnu]&#xA;linker = &#34;clang&#34;&#xA;rustflags = [&#34;-C&#34;, &#34;link-arg=--ld-path=wild&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Q&amp;amp;A&lt;/h2&gt; &#xA;&lt;h3&gt;Why another linker?&lt;/h3&gt; &#xA;&lt;p&gt;Mold is already very fast, however it doesn&#39;t do incremental linking and the author has stated that they don&#39;t intend to. Wild doesn&#39;t do incremental linking yet, but that is the end-goal. By writing Wild in Rust, it&#39;s hoped that the complexity of incremental linking will be achievable.&lt;/p&gt; &#xA;&lt;h3&gt;What&#39;s working?&lt;/h3&gt; &#xA;&lt;p&gt;The following platforms / architectures are currently supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;x86-64 on Linux&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following is working with the caveat that there may be bugs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Output to statically linked, non-relocatable binaries&lt;/li&gt; &#xA; &lt;li&gt;Output to statically linked, position-independent binaries (static-PIE)&lt;/li&gt; &#xA; &lt;li&gt;Output to dynamically linked binaries&lt;/li&gt; &#xA; &lt;li&gt;Output to shared objects (.so files)&lt;/li&gt; &#xA; &lt;li&gt;Rust proc-macros, when linked with Wild work&lt;/li&gt; &#xA; &lt;li&gt;Most of the top downloaded crates on crates.io have been tested with Wild and pass their tests&lt;/li&gt; &#xA; &lt;li&gt;Debug info&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;What isn&#39;t yet supported?&lt;/h3&gt; &#xA;&lt;p&gt;Lots of stuff. Here are some of the larger things that aren&#39;t yet done, roughly sorted by current priority:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Incremental linking&lt;/li&gt; &#xA; &lt;li&gt;Support for architectures other than x86-64&lt;/li&gt; &#xA; &lt;li&gt;Support for a wider range of linker flags&lt;/li&gt; &#xA; &lt;li&gt;Linker scripts&lt;/li&gt; &#xA; &lt;li&gt;Mac support&lt;/li&gt; &#xA; &lt;li&gt;Windows support&lt;/li&gt; &#xA; &lt;li&gt;LTO&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How can I verify that Wild was used to link a binary?&lt;/h3&gt; &#xA;&lt;p&gt;Install &lt;code&gt;readelf&lt;/code&gt;, then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;readelf  -p .comment my-executable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Look for a line like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Linker: Wild version 0.1.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you don&#39;t want to install readelf, you can probably get away with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;strings my-executable | grep &#39;Linker:&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Where did the name come from?&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s somewhat of a tradition for linkers to end with the letters &#34;ld&#34;. e.g. &#34;GNU ld, &#34;gold&#34;, &#34;lld&#34;, &#34;mold&#34;. Since the end-goal is for the linker to be incremental, an &#34;I&#34; is added. Let&#39;s say the &#34;W&#34; stands for &#34;Wild&#34;, since recursive acronyms are popular in open-source projects.&lt;/p&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;The goal of Wild is to eventually be very fast via incremental linking. However, we also want to be as fast as we can be for non-incremental linking and for the initial link when incremental linking is enabled.&lt;/p&gt; &#xA;&lt;p&gt;These benchmark were run on David Lattimore&#39;s laptop (2020 model System76 Lemur pro), which has 4 cores (8 threads) and 42 GB of RAM.&lt;/p&gt; &#xA;&lt;p&gt;The following times are for linking rustc-driver, which is a shared object that contains most of the code of the Rust compiler. Linking was done with with &lt;code&gt;--strip-debug&lt;/code&gt; and &lt;code&gt;--build-id=none&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Linker&lt;/th&gt; &#xA;   &lt;th&gt;Time (ms)&lt;/th&gt; &#xA;   &lt;th&gt;± Standard deviation (ms)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GNU ld (2.38)&lt;/td&gt; &#xA;   &lt;td&gt;20774&lt;/td&gt; &#xA;   &lt;td&gt;855&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gold (2.38)&lt;/td&gt; &#xA;   &lt;td&gt;6796&lt;/td&gt; &#xA;   &lt;td&gt;58&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;lld (18.1.8)&lt;/td&gt; &#xA;   &lt;td&gt;1601&lt;/td&gt; &#xA;   &lt;td&gt;24&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mold (2.34.1)&lt;/td&gt; &#xA;   &lt;td&gt;946&lt;/td&gt; &#xA;   &lt;td&gt;17&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;wild (2024-11-30)&lt;/td&gt; &#xA;   &lt;td&gt;486&lt;/td&gt; &#xA;   &lt;td&gt;19&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The following times are for linking the C compiler, clang without debug info.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Linker&lt;/th&gt; &#xA;   &lt;th&gt;Time (ms)&lt;/th&gt; &#xA;   &lt;th&gt;± Standard deviation (ms)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GNU ld (2.38)&lt;/td&gt; &#xA;   &lt;td&gt;8784&lt;/td&gt; &#xA;   &lt;td&gt;42&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gold (2.38)&lt;/td&gt; &#xA;   &lt;td&gt;2528&lt;/td&gt; &#xA;   &lt;td&gt;37&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;lld (18.1.8)&lt;/td&gt; &#xA;   &lt;td&gt;1679&lt;/td&gt; &#xA;   &lt;td&gt;23&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mold (2.34.1)&lt;/td&gt; &#xA;   &lt;td&gt;429&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;wild (2024-11-30)&lt;/td&gt; &#xA;   &lt;td&gt;244&lt;/td&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Next, let&#39;s add debug info (remove &lt;code&gt;--strip-debug&lt;/code&gt;). First rustc-driver:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Linker&lt;/th&gt; &#xA;   &lt;th&gt;Time (ms)&lt;/th&gt; &#xA;   &lt;th&gt;± Standard deviation (ms)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GNU ld (2.38)&lt;/td&gt; &#xA;   &lt;td&gt;23224&lt;/td&gt; &#xA;   &lt;td&gt;1030&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gold (2.38)&lt;/td&gt; &#xA;   &lt;td&gt;8840&lt;/td&gt; &#xA;   &lt;td&gt;879&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;lld (18.1.8)&lt;/td&gt; &#xA;   &lt;td&gt;2741&lt;/td&gt; &#xA;   &lt;td&gt;1403&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mold (2.34.1)&lt;/td&gt; &#xA;   &lt;td&gt;3514&lt;/td&gt; &#xA;   &lt;td&gt;2102&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;wild (2024-11-30)&lt;/td&gt; &#xA;   &lt;td&gt;3158&lt;/td&gt; &#xA;   &lt;td&gt;1616&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Now clang with debug info:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Linker&lt;/th&gt; &#xA;   &lt;th&gt;Time (ms)&lt;/th&gt; &#xA;   &lt;th&gt;± Standard deviation (ms)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GNU ld (2.38)&lt;/td&gt; &#xA;   &lt;td&gt;139985&lt;/td&gt; &#xA;   &lt;td&gt;9871&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gold (2.38)&lt;/td&gt; &#xA;   &lt;td&gt;92147&lt;/td&gt; &#xA;   &lt;td&gt;7287&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;lld (18.1.8)&lt;/td&gt; &#xA;   &lt;td&gt;30549&lt;/td&gt; &#xA;   &lt;td&gt;9819&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mold (2.34.1)&lt;/td&gt; &#xA;   &lt;td&gt;16933&lt;/td&gt; &#xA;   &lt;td&gt;5359&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;wild (2024-11-30)&lt;/td&gt; &#xA;   &lt;td&gt;31540&lt;/td&gt; &#xA;   &lt;td&gt;7133&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;So Wild performs pretty well without debug info, but with debug info, it&#39;s performing less well at the moment.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/davidlattimore/wild/main/BENCHMARKING.md&#34;&gt;BENCHMARKING.md&lt;/a&gt; for more details on benchmarking.&lt;/p&gt; &#xA;&lt;h2&gt;Linking Rust code&lt;/h2&gt; &#xA;&lt;p&gt;The following is a &lt;code&gt;cargo test&lt;/code&gt; command-line that can be used to build and test a crate using Wild. This has been run successfully on a few popular crates (e.g. ripgrep, serde, tokio, rand, bitflags). It assumes that the &#34;wild&#34; binary is on your path. It also depends on the Clang compiler being installed, since GCC doesn&#39;t allow using an arbitrary linker.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;RUSTFLAGS=&#34;-Clinker=clang -Clink-args=--ld-path=wild&#34; cargo test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;For more information on contributing to &lt;code&gt;wild&lt;/code&gt; see &lt;a href=&#34;https://raw.githubusercontent.com/davidlattimore/wild/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsorship&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like to &lt;a href=&#34;https://github.com/sponsors/davidlattimore&#34;&gt;sponsor this work&lt;/a&gt;, that would be very much appreciated. The more sponsorship I get the longer I can continue to work on this project full time.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under either of &lt;a href=&#34;https://raw.githubusercontent.com/davidlattimore/wild/main/LICENSE-APACHE&#34;&gt;Apache License, Version 2.0&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/davidlattimore/wild/main/LICENSE-MIT&#34;&gt;MIT license&lt;/a&gt; at your option.&lt;/p&gt; &#xA;&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in Wild by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.&lt;/p&gt;</summary>
  </entry>
</feed>