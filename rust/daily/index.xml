<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-18T01:44:28Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>steven-omaha/pacdef</title>
    <updated>2023-05-18T01:44:28Z</updated>
    <id>tag:github.com,2023-05-18:/steven-omaha/pacdef</id>
    <link href="https://github.com/steven-omaha/pacdef" rel="alternate"></link>
    <summary type="html">&lt;p&gt;multi-backend declarative package manager for Linux&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/steven-omaha/pacdef/actions/workflows/check.yml&#34;&gt;&lt;img src=&#34;https://github.com/steven-omaha/pacdef/actions/workflows/check.yml/badge.svg?sanitize=true&#34; alt=&#34;check&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;pacdef&lt;/h1&gt; &#xA;&lt;p&gt;multi-backend declarative package manager for Linux&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Arch Linux&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;pacdef&lt;/code&gt; is available in the AUR &lt;a href=&#34;https://aur.archlinux.org/packages/pacdef&#34;&gt;as stable release&lt;/a&gt; or &lt;a href=&#34;https://aur.archlinux.org/packages/pacdef-git&#34;&gt;development version&lt;/a&gt; The AUR package will also provide completions for &lt;code&gt;zsh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;other&lt;/h3&gt; &#xA;&lt;p&gt;Install it from &lt;a href=&#34;https://crates.io/crates/pacdef&#34;&gt;crates.io&lt;/a&gt; using this command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo install [-F &amp;lt;backend&amp;gt;[,...]] pacdef&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See below (&#34;&lt;a href=&#34;https://raw.githubusercontent.com/steven-omaha/pacdef/main/#supported-backends&#34;&gt;supported backends&lt;/a&gt;&#34;) for the feature flags you will need for your distribution.&lt;/p&gt; &#xA;&lt;p&gt;To get zsh completion to work you must copy the &lt;code&gt;_completion.zsh&lt;/code&gt; file to the right folder manually and rename it to &lt;code&gt;_pacdef&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Use-case&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;pacdef&lt;/code&gt; allows the user to have consistent packages among multiple Linux machines and different backends by managing packages in group files. The idea is that (1) any package in the group files (&#34;managed packages&#34;) will be installed explicitly, and (2) explicitly installed packages &lt;em&gt;not&lt;/em&gt; found in any of the group files (&#34;unmanaged packages&#34;) will be removed. The group files are maintained outside of &lt;code&gt;pacdef&lt;/code&gt; by any VCS, like git.&lt;/p&gt; &#xA;&lt;p&gt;If you work with multiple Linux machines and have asked yourself &#34;&lt;em&gt;Why do I have the program that I use every day on my other machine not installed here?&lt;/em&gt;&#34;, then &lt;code&gt;pacdef&lt;/code&gt; is the tool for you.&lt;/p&gt; &#xA;&lt;h3&gt;Of groups, sections, and packages&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;pacdef&lt;/code&gt; manages multiple package groups (group files) that, e.g., may be tied to a specific use-case. Each group has one or more section(s) which correspond to a specific backend, like your system&#39;s package manager (&lt;code&gt;pacman&lt;/code&gt;, &lt;code&gt;apt&lt;/code&gt;, ...), or your programming languages package manger (&lt;code&gt;cargo&lt;/code&gt;, &lt;code&gt;pip&lt;/code&gt;, ...). Each section contains one or more packages that can be installed respective package manager.&lt;/p&gt; &#xA;&lt;p&gt;This image illustrates the relationship.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;       1   n       1   n         1   n      &#xA;pacdef ----&amp;gt; group ----&amp;gt; section ----&amp;gt; package &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s assume you have the following group files.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;base&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[arch]&#xA;paru&#xA;zsh&#xA;&#xA;[rust]&#xA;pacdef&#xA;topgrade&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;development&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[arch]&#xA;rustup&#xA;rust-analyzer&#xA;&#xA;[rust]&#xA;cargo-tree&#xA;flamegraph&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Pacdef will make sure you have the following packages installed for each package manager:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Arch (&lt;code&gt;pacman&lt;/code&gt;, AUR helpers): paru, zsh, rustup, rust-analyzer&lt;/li&gt; &#xA; &lt;li&gt;Rust (&lt;code&gt;cargo&lt;/code&gt;): pacdef, topgrade, cargo-tree, flamegraph&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that the name of the section corresponds to the ecosystem it relates to, rather than the package manager it uses.&lt;/p&gt; &#xA;&lt;h2&gt;Supported backends&lt;/h2&gt; &#xA;&lt;p&gt;At the moment, supported backends are the following. Pull requests for additional backends are welcome!&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Application&lt;/th&gt; &#xA;   &lt;th&gt;Package Manager&lt;/th&gt; &#xA;   &lt;th&gt;Section&lt;/th&gt; &#xA;   &lt;th&gt;feature flag&lt;/th&gt; &#xA;   &lt;th&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Arch Linux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pacman&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[arch]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;arch&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;includes pacman-wrapping AUR helpers (configurable)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Debian&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;apt&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[debian]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;debian&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;minimum supported apt-version unknown (&lt;a href=&#34;https://gitlab.com/volian/rust-apt/-/issues/20&#34;&gt;upstream issue&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Flatpak&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;flatpak&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[flatpak]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;built-in&lt;/td&gt; &#xA;   &lt;td&gt;can manage either system-wide or per-user installation (configurable)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pip&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[python]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;built-in&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rust&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cargo&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[rust]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;built-in&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Backends that have a &lt;code&gt;feature flag&lt;/code&gt; require setting the respective flag for the build process. The appropriate system libraries and their header files must be present on the machine and be detectable by &lt;code&gt;pkg-config&lt;/code&gt;. For backends that state &#34;built-in&#34;, they are always supported during compile time. Any backend can be disabled during runtime (see below, &#34;&lt;a href=&#34;https://raw.githubusercontent.com/steven-omaha/pacdef/main/#configuration&#34;&gt;Configuration&lt;/a&gt;&#34;).&lt;/p&gt; &#xA;&lt;p&gt;For example, to build &lt;code&gt;pacdef&lt;/code&gt; with support for Debian Linux, you can run one of the two commands.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(recommended) &lt;code&gt;cargo install -F debian pacdef&lt;/code&gt;, this downloads and builds it from &lt;a href=&#34;https://crates.io&#34;&gt;https://crates.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;in a clone of this repository, &lt;code&gt;cargo install --path . -F debian&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;This tree shows my pacdef repository (not the &lt;code&gt;pacdef&lt;/code&gt; config dir).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.&#xA;├── generic&#xA;│   ├── audio&#xA;│   ├── base&#xA;│   ├── desktop&#xA;│   ├── private&#xA;│   ├── rust&#xA;│   ├── wayland&#xA;│   ├── wireless&#xA;│   ├── work&#xA;│   └── xorg&#xA;├── hosts&#xA;│   ├── hostname_a&#xA;│   ├── hostname_b&#xA;│   └── hostname_c&#xA;└── pacdef.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;base&lt;/code&gt; group holds all packages I need unconditionally, and includes things like zfs, &lt;a href=&#34;https://github.com/Morganamilo/paru&#34;&gt;paru&lt;/a&gt; and &lt;a href=&#34;https://github.com/neovim/neovim&#34;&gt;neovim&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;In &lt;code&gt;xorg&lt;/code&gt; and &lt;code&gt;wayland&lt;/code&gt; I have stored the respective graphic servers and DEs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;wireless&lt;/code&gt; contains tools like &lt;code&gt;iwd&lt;/code&gt; and &lt;code&gt;bluez-utils&lt;/code&gt; for machines with wireless interfaces.&lt;/li&gt; &#xA; &lt;li&gt;Under &lt;code&gt;hosts&lt;/code&gt; I have one file for each machine I use. The filenames match the corresponding hostname. The packages are specific to one machine only, like device drivers, or any programs I use exclusively on that machine.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Usage on different machines:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;home server: &lt;code&gt;base private hostname_a&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;private PC: &lt;code&gt;audio base desktop private rust wayland hostname_b&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;work PC: &lt;code&gt;base desktop rust work xorg hostname_c&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Subcommand&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;group import [&amp;lt;group&amp;gt;...]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;import one or more groups, which creates managed packages&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;group list&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;list names of all groups&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;group new [-e] [&amp;lt;group&amp;gt;...]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;create new groups, use &lt;code&gt;-e&lt;/code&gt; to edit them immediately after creation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;group remove [&amp;lt;group&amp;gt;...]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;remove a previously imported group&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;group show [&amp;lt;group&amp;gt;...]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;show contents of a group&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;package clean [--noconfirm]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;remove all unmanaged packages&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;package review&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for each unmanaged package interactively decide what to do&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;package search &amp;lt;regex&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;search for managed packages that match the search string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;package sync [--noconfirm]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;install managed packages&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;package unmanaged&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;show all unmanaged packages&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;version&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;show version information, supported backends&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Aliases&lt;/h3&gt; &#xA;&lt;p&gt;Most subcommands have aliases. For example, instead of &lt;code&gt;pacdef package sync&lt;/code&gt; you can write &lt;code&gt;pacdef p sy&lt;/code&gt;, and &lt;code&gt;pacdef group show&lt;/code&gt; would become &lt;code&gt;pacdef g s&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;--help&lt;/code&gt; or the zsh completion to find the right aliases.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;On first execution, it will create a basic config file under &lt;code&gt;$XDG_CONFIG_HOME/pacdef/pacdef.yaml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;aur_helper: paru  # AUR helper to use on Arch Linux (paru, yay, ...)&#xA;aur_rm_args: null  # additional args to pass to AUR helper when removing packages (optional)&#xA;warn_not_symlinks: true  # warn if a group file is not a symlink&#xA;&#xA;disabled_backends: []  # backends that pacdef should not manage, e.g. [&#34;python&#34;], this can reduce runtime if the package manager is notoriously slow (like pip)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Group file syntax&lt;/h2&gt; &#xA;&lt;p&gt;Group files loosely follow the syntax for &lt;code&gt;ini&lt;/code&gt;-files.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Sections begin by their name in brackets.&lt;/li&gt; &#xA; &lt;li&gt;One package per line.&lt;/li&gt; &#xA; &lt;li&gt;Anything after a &lt;code&gt;#&lt;/code&gt; is ignored.&lt;/li&gt; &#xA; &lt;li&gt;Empty lines are ignored.&lt;/li&gt; &#xA; &lt;li&gt;If a package exists in multiple repositories, the repo can be specified as prefix followed by a forward slash. The package manager must understand this notation.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[arch]&#xA;alacritty&#xA;firefox  # this comment is ignored&#xA;libreoffice-fresh&#xA;mycustomrepo/zsh-theme-powerlevel10k&#xA;&#xA;[rust]&#xA;cargo-update&#xA;topgrade&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Misc.&lt;/h2&gt; &#xA;&lt;h3&gt;Naming&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;pacdef&lt;/code&gt; combines the words &#34;package&#34; and &#34;define&#34;.&lt;/p&gt; &#xA;&lt;h3&gt;minimum supported rust version (MSRV)&lt;/h3&gt; &#xA;&lt;p&gt;MSRV is 1.65.0. Development is conducted against the latest stable version.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nymtech/nym</title>
    <updated>2023-05-18T01:44:28Z</updated>
    <id>tag:github.com,2023-05-18:/nymtech/nym</id>
    <link href="https://github.com/nymtech/nym" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Nym provides strong network-level privacy against sophisticated end-to-end attackers, and anonymous transactions using blinded, re-randomizable, decentralized credentials.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;The Nym Privacy Platform&lt;/h2&gt; &#xA;&lt;p&gt;The platform is composed of multiple Rust crates. Top-level executable binary crates include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;nym-mixnode - shuffles &lt;a href=&#34;https://github.com/nymtech/sphinx&#34;&gt;Sphinx&lt;/a&gt; packets together to provide privacy against network-level attackers.&lt;/li&gt; &#xA; &lt;li&gt;nym-client - an executable which you can build into your own applications. Use it for interacting with Nym nodes.&lt;/li&gt; &#xA; &lt;li&gt;nym-socks5-client - a Socks5 proxy you can run on your machine and use with existing applications.&lt;/li&gt; &#xA; &lt;li&gt;nym-gateway - acts sort of like a mailbox for mixnet messages, which removes the need for direct delivery to potentially offline or firewalled devices.&lt;/li&gt; &#xA; &lt;li&gt;nym-network-monitor - sends packets through the full system to check that they are working as expected, and stores node uptime histories as the basis of a rewards system (&#34;mixmining&#34; or &#34;proof-of-mixing&#34;).&lt;/li&gt; &#xA; &lt;li&gt;nym-explorer - a (projected) block explorer and (existing) mixnet viewer.&lt;/li&gt; &#xA; &lt;li&gt;nym-wallet - a desktop wallet implemented using the &lt;a href=&#34;https://tauri.studio/en/docs/about/intro&#34;&gt;Tauri&lt;/a&gt; framework.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?style=for-the-badge&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/nymtech/nym/actions?query=branch%3Adevelop&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/nymtech/nym/build.yml?branch=develop&amp;amp;style=for-the-badge&amp;amp;logo=github-actions&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;p&gt;Platform build instructions are available on &lt;a href=&#34;https://nymtech.net/docs/binaries/building-nym.html&#34;&gt;our docs site&lt;/a&gt;. Wallet build instructions are also available on &lt;a href=&#34;https://nymtech.net/docs/stable/nym-apps/wallet#for-developers&#34;&gt;our docs site&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Developing&lt;/h3&gt; &#xA;&lt;p&gt;There&#39;s a &lt;code&gt;.env.sample-dev&lt;/code&gt; file provided which you can rename to &lt;code&gt;.env&lt;/code&gt; if you want convenient logging, backtrace, or other environment variables pre-set. The &lt;code&gt;.env&lt;/code&gt; file is ignored so you don&#39;t need to worry about checking it in.&lt;/p&gt; &#xA;&lt;p&gt;For Typescript components, please see &lt;a href=&#34;https://raw.githubusercontent.com/nymtech/nym/develop/ts-packages&#34;&gt;ts-packages&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Developer chat&lt;/h3&gt; &#xA;&lt;p&gt;You can chat to us in &lt;a href=&#34;https://keybase.io&#34;&gt;Keybase&lt;/a&gt;. Download their chat app, then click &lt;strong&gt;Teams -&amp;gt; Join a team&lt;/strong&gt;. Type &lt;strong&gt;nymtech.friends&lt;/strong&gt; into the team name and hit &lt;strong&gt;continue&lt;/strong&gt;. For general chat, hang out in the &lt;strong&gt;#general&lt;/strong&gt; channel. Our development takes places in the &lt;strong&gt;#dev&lt;/strong&gt; channel. Node operators should be in the &lt;strong&gt;#node-operators&lt;/strong&gt; channel.&lt;/p&gt; &#xA;&lt;h3&gt;Rewards&lt;/h3&gt; &#xA;&lt;p&gt;Node, node operator and delegator rewards are determined according to the principles laid out in the section 6 of &lt;a href=&#34;https://nymtech.net/nym-whitepaper.pdf&#34;&gt;Nym Whitepaper&lt;/a&gt;. Below is a TLDR of the variables and formulas involved in calculating the epoch rewards. Initial reward pool is set to 250 million Nym, making the circulating supply 750 million Nym.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Symbol&lt;/th&gt; &#xA;   &lt;th&gt;Definition&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://render.githubusercontent.com/render/math?math=R#gh-light-mode-only&#34;&gt;&lt;img src=&#34;https://render.githubusercontent.com/render/math?math=\color{white}R#gh-dark-mode-only&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;global share of rewards available, starts at 2% of the reward pool.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://render.githubusercontent.com/render/math?math=R_{i}#gh-light-mode-only&#34;&gt;&lt;img src=&#34;https://render.githubusercontent.com/render/math?math=\color{white}R_{i}#gh-dark-mode-only&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;node reward for mixnode &lt;code&gt;i&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://render.githubusercontent.com/render/math?math=\sigma_{i}#gh-light-mode-only&#34;&gt;&lt;img src=&#34;https://render.githubusercontent.com/render/math?math=\color{white}\sigma_{i}#gh-dark-mode-only&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ratio of total node stake (node bond + all delegations) to the token circulating supply.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://render.githubusercontent.com/render/math?math=\lambda_{i}#gh-light-mode-only&#34;&gt;&lt;img src=&#34;https://render.githubusercontent.com/render/math?math=\color{white}\lambda_{i}#gh-dark-mode-only&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ratio of stake operator has pledged to their node to the token circulating supply.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://render.githubusercontent.com/render/math?math=\omega_{i}#gh-light-mode-only&#34;&gt;&lt;img src=&#34;https://render.githubusercontent.com/render/math?math=\color{white}\omega_{i}#gh-dark-mode-only&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;fraction of total effort undertaken by node &lt;code&gt;i&lt;/code&gt;, set to &lt;code&gt;1/k&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://render.githubusercontent.com/render/math?math=k#gh-light-mode-only&#34;&gt;&lt;img src=&#34;https://render.githubusercontent.com/render/math?math=\color{white}k#gh-dark-mode-only&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;number of nodes stakeholders are incentivised to create, set by the validators, a matter of governance. Currently determined by the &lt;code&gt;reward set&lt;/code&gt; size, and set to 720 in testnet Sandbox.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://render.githubusercontent.com/render/math?math=\alpha#gh-light-mode-only&#34;&gt;&lt;img src=&#34;https://render.githubusercontent.com/render/math?math=\color{white}\alpha#gh-dark-mode-only&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Sybil attack resistance parameter - the higher this parameter is set the stronger the reduction in competitivness gets for a Sybil attacker.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://render.githubusercontent.com/render/math?math=PM_{i}#gh-light-mode-only&#34;&gt;&lt;img src=&#34;https://render.githubusercontent.com/render/math?math=\color{white}PM_{i}#gh-dark-mode-only&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;declared profit margin of operator &lt;code&gt;i&lt;/code&gt;, defaults to 10% in.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://render.githubusercontent.com/render/math?math=PF_{i}#gh-light-mode-only&#34;&gt;&lt;img src=&#34;https://render.githubusercontent.com/render/math?math=\color{white}PF_{i}#gh-dark-mode-only&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;uptime of node &lt;code&gt;i&lt;/code&gt;, scaled to 0 - 1, for the rewarding epoch&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://render.githubusercontent.com/render/math?math=PP_{i}#gh-light-mode-only&#34;&gt;&lt;img src=&#34;https://render.githubusercontent.com/render/math?math=\color{white}PP_{i}#gh-dark-mode-only&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;cost of operating node &lt;code&gt;i&lt;/code&gt; for the duration of the rewarding epoch, set to 40 NYMT.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Node reward for node &lt;code&gt;i&lt;/code&gt; is determined as:&lt;/p&gt; &#xA;&lt;img src=&#34;https://render.githubusercontent.com/render/math?math=R_{i}=PF_{i} \cdot R \cdot (\sigma^&#39;_{i} \cdot \omega_{i} \cdot k %2b \alpha \cdot \lambda^&#39;_{i} \cdot \sigma^&#39;_{i} \cdot k)/(1 %2b \alpha)#gh-light-mode-only&#34;&gt; &#xA;&lt;img src=&#34;https://render.githubusercontent.com/render/math?math=\color{white}R_{i}=PF_{i} \cdot R \cdot (\sigma^&#39;_{i} \cdot \omega_{i} \cdot k %2b \alpha \cdot \lambda^&#39;_{i} \cdot \sigma^&#39;_{i} \cdot k)/(1 %2b \alpha)#gh-dark-mode-only&#34;&gt; where: &#xA;&lt;img src=&#34;https://render.githubusercontent.com/render/math?math=\sigma^&#39;_{i} = min\{\sigma_{i}, 1/k\}#gh-light-mode-only&#34;&gt; &#xA;&lt;img src=&#34;https://render.githubusercontent.com/render/math?math=\color{white}\sigma^&#39;_{i} = min\{\sigma_{i}, 1/k\}#gh-dark-mode-only&#34;&gt; &#xA;&lt;p&gt;and&lt;/p&gt; &#xA;&lt;img src=&#34;https://render.githubusercontent.com/render/math?math=\lambda^&#39;_{i} = min\{\lambda_{i}, 1/k\}#gh-light-mode-only&#34;&gt; &#xA;&lt;img src=&#34;https://render.githubusercontent.com/render/math?math=\color{white}\lambda^&#39;_{i} = min\{\lambda_{i}, 1/k\}#gh-dark-mode-only&#34;&gt; &#xA;&lt;p&gt;Operator of node &lt;code&gt;i&lt;/code&gt; is credited with the following amount:&lt;/p&gt; &#xA;&lt;img src=&#34;https://render.githubusercontent.com/render/math?math=min\{PP_{i},R_{i})\} %2b max\{0, (PM_{i} %2b (1 - PM_{i}) \cdot \lambda_{i}/\delta_{i}) \cdot (R_{i} - PP_{i})\}#gh-light-mode-only&#34;&gt; &#xA;&lt;img src=&#34;https://render.githubusercontent.com/render/math?math=\color{white}min\{PP_{i},R_{i})\} %2b max\{0, (PM_{i} %2b (1 - PM_{i}) \cdot \lambda_{i}/\delta_{i}) \cdot (R_{i} - PP_{i})\}#gh-dark-mode-only&#34;&gt; &#xA;&lt;p&gt;Delegate with stake &lt;code&gt;s&lt;/code&gt; recieves:&lt;/p&gt; &#xA;&lt;img src=&#34;https://render.githubusercontent.com/render/math?math=max\{0, (1-PM_{i}) \cdot (s^&#39;/\sigma_{i}) \cdot (R_{i} - PP_{i})\}#gh-light-mode-only&#34;&gt; &#xA;&lt;img src=&#34;https://render.githubusercontent.com/render/math?math=\color{white}max\{0, (1-PM_{i}) \cdot (s^&#39;/\sigma_{i}) \cdot (R_{i} - PP_{i})\}#gh-dark-mode-only&#34;&gt; &#xA;&lt;p&gt;where &lt;code&gt;s&#39;&lt;/code&gt; is stake &lt;code&gt;s&lt;/code&gt; scaled over total token circulating supply.&lt;/p&gt; &#xA;&lt;h3&gt;Licensing and copyright information&lt;/h3&gt; &#xA;&lt;p&gt;This program is available as open source under the terms of the Apache 2.0 license. However, some elements are being licensed under CC0-1.0 and MIT. For accurate information, please check individual files.&lt;/p&gt;</summary>
  </entry>
</feed>