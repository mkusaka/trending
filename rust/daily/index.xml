<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-08-14T01:39:13Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>j178/prek</title>
    <updated>2025-08-14T01:39:13Z</updated>
    <id>tag:github.com,2025-08-14:/j178/prek</id>
    <link href="https://github.com/j178/prek" rel="alternate"></link>
    <summary type="html">&lt;p&gt;‚ö° Better `pre-commit`, re-engineered in Rust&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;prek&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/Development-Early_Stage-yellowgreen&#34; alt=&#34;Development Status&#34; /&gt; &lt;a href=&#34;https://github.com/j178/prek/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/j178/prek/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/j178/prek/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/j178/prek/total?&amp;amp;logo=github&#34; alt=&#34;GitHub downloads&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/3NRJUqJz86&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1403581202102878289?logo=discord&#34; alt=&#34;Discord&#34; /&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img width=&#34;250&#34; alt=&#34;prek&#34; src=&#34;https://github.com/user-attachments/assets/3a87815a-9f3c-48e7-8c1d-384b07ad3b35&#34; /&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pre-commit.com/&#34;&gt;pre-commit&lt;/a&gt; is a framework to run hooks written in many languages, and it manages the language toolchain and dependencies for running the hooks.&lt;/p&gt; &#xA;&lt;p&gt;prek is a reimagined version of pre-commit, built in Rust. It is designed to be a faster, dependency-free and drop-in alternative for it, while also providing some additional long-requested features.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] This project was previously named &lt;code&gt;prefligit&lt;/code&gt;, but it has been renamed to &lt;code&gt;prek&lt;/code&gt; to avoid typosquatting issues.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] This project is still in early stage of development, some features are still not implemented. It is not production-ready yet, but feel free to try it out and provide feedback.&lt;/p&gt; &#xA; &lt;p&gt;Current supported languages are &lt;code&gt;python&lt;/code&gt;, &lt;code&gt;node&lt;/code&gt;, &lt;code&gt;go&lt;/code&gt;, &lt;code&gt;docker&lt;/code&gt;, &lt;code&gt;docker-image&lt;/code&gt;, &lt;code&gt;pygrep&lt;/code&gt;, &lt;code&gt;system&lt;/code&gt;, &lt;code&gt;script&lt;/code&gt; and &lt;code&gt;fail&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üöÄ A single binary with no dependencies, does not require Python or any other runtime.&lt;/li&gt; &#xA; &lt;li&gt;‚ö° About &lt;a href=&#34;https://github.com/j178/prek/raw/master/BENCHMARK.md&#34;&gt;10x faster&lt;/a&gt; than &lt;code&gt;pre-commit&lt;/code&gt; and uses only a third of disk space.&lt;/li&gt; &#xA; &lt;li&gt;üîÑ Fully compatible with the original pre-commit configurations and hooks.&lt;/li&gt; &#xA; &lt;li&gt;üêç Integration with &lt;a href=&#34;https://github.com/astral-sh/uv&#34;&gt;&lt;code&gt;uv&lt;/code&gt;&lt;/a&gt; for managing Python virtual environments and dependencies.&lt;/li&gt; &#xA; &lt;li&gt;üõ†Ô∏è Improved toolchain installations for Python, Node.js, Go, Rust and Ruby, shared between hooks.&lt;/li&gt; &#xA; &lt;li&gt;üì¶ Built-in implementation of some common hooks.&lt;/li&gt; &#xA; &lt;li&gt;üèóÔ∏è (TODO) Built-in support for monorepos.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to migrate&lt;/h2&gt; &#xA;&lt;p&gt;prek is designed as a drop-in replacement:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/j178/prek/master/#installation&#34;&gt;Install prek&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Replace &lt;code&gt;pre-commit&lt;/code&gt; with &lt;code&gt;prek&lt;/code&gt; in your commands&lt;/li&gt; &#xA; &lt;li&gt;Your existing &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; works unchanged&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ prek run&#xA;trim trailing whitespace.................................................Passed&#xA;fix end of files.........................................................Passed&#xA;typos....................................................................Passed&#xA;cargo fmt................................................................Passed&#xA;cargo clippy.............................................................Passed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For configuring &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; and writing hooks, you can refer to the &lt;a href=&#34;https://pre-commit.com/&#34;&gt;pre-commit documentation&lt;/a&gt; as prek is fully compatible with it.&lt;/p&gt; &#xA;&lt;h2&gt;Why prek?&lt;/h2&gt; &#xA;&lt;h3&gt;prek is way faster&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It is about &lt;a href=&#34;https://github.com/j178/prek/raw/master/BENCHMARK.md&#34;&gt;10x faster&lt;/a&gt; than &lt;code&gt;pre-commit&lt;/code&gt; and uses only a third of disk space.&lt;/li&gt; &#xA; &lt;li&gt;It redesigned how hook environments and toolchains are managed, they are all shared between hooks, which reduces the disk space usage and speeds up the installation process.&lt;/li&gt; &#xA; &lt;li&gt;Repositories are cloned in parallel, and hooks are installed in parallel if their dependencies are disjoint.&lt;/li&gt; &#xA; &lt;li&gt;It uses &lt;a href=&#34;https://github.com/astral-sh/uv&#34;&gt;&lt;code&gt;uv&lt;/code&gt;&lt;/a&gt; for creating Python virtualenvs and installing dependencies, which is known for its speed and efficiency.&lt;/li&gt; &#xA; &lt;li&gt;It implements some common hooks in Rust, built in prek, which are faster than their Python counterparts.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;prek provides a better user experience&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;No need to install Python or any other runtime, just download a single binary.&lt;/li&gt; &#xA; &lt;li&gt;No hassle with your Python version or virtual environments, prek automatically installs the required Python version and creates a virtual environment for you.&lt;/li&gt; &#xA; &lt;li&gt;(TODO): Built-in support for workspaces (or monorepos), each subproject can have its own &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;prek run&lt;/code&gt; has some improvements over &lt;code&gt;pre-commit run&lt;/code&gt;, such as: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;prek run --directory &amp;lt;dir&amp;gt;&lt;/code&gt; runs hooks for files in the specified directory, no need to use &lt;code&gt;git ls-files -- &amp;lt;dir&amp;gt; | xargs pre-commit run --files&lt;/code&gt; anymore.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;prek run --last-commit&lt;/code&gt; runs hooks for files changed in the last commit.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;prek list&lt;/code&gt; command lists all available hooks, their ids, and descriptions, providing a better overview of the configured hooks.&lt;/li&gt; &#xA; &lt;li&gt;prek provides shell completions for &lt;code&gt;prek run &amp;lt;hook_id&amp;gt;&lt;/code&gt; command, making it easier to run specific hooks without remembering their ids.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Standalone installer&lt;/summary&gt; &#xA; &lt;p&gt;prek provides a standalone installer script to download and install the tool:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;# On Linux and macOS&#xA;curl --proto &#39;=https&#39; --tlsv1.2 -LsSf https://github.com/j178/prek/releases/download/v0.0.24/prek-installer.sh | sh&#xA;&#xA;# On Windows&#xA;powershell -ExecutionPolicy ByPass -c &#34;irm https://github.com/j178/prek/releases/download/v0.0.24/prek-installer.ps1 | iex&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;PyPI&lt;/summary&gt; &#xA; &lt;p&gt;prek is published as Python binary wheel to PyPI, you can install it using &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;uv&lt;/code&gt; (recommended), or &lt;code&gt;pipx&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pip install prek&#xA;&#xA;# or&#xA;&#xA;uv tool install prek&#xA;&#xA;# or&#xA;&#xA;pipx install prek&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Homebrew&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;brew install j178/tap/prek&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Cargo&lt;/summary&gt; &#xA; &lt;p&gt;Build from source using Cargo:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;cargo install --locked --git https://github.com/j178/prek&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;GitHub Releases&lt;/summary&gt; &#xA; &lt;p&gt;prek release artifacts can be downloaded directly from the &lt;a href=&#34;https://github.com/j178/prekprek/releases&#34;&gt;GitHub releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;If installed via the standalone installer, prek can update itself to the latest version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ prek self update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;This project is heavily inspired by the original &lt;a href=&#34;https://pre-commit.com/&#34;&gt;pre-commit&lt;/a&gt; tool, and it wouldn&#39;t be possible without the hard work of the maintainers and contributors of that project.&lt;/p&gt; &#xA;&lt;p&gt;And a special thanks to the &lt;a href=&#34;https://github.com/astral-sh&#34;&gt;Astral&lt;/a&gt; team for their remarkable projects, particularly &lt;a href=&#34;https://github.com/astral-sh/uv&#34;&gt;uv&lt;/a&gt;, from which I&#39;ve learned a lot on how to write efficient and idiomatic Rust code.&lt;/p&gt;</summary>
  </entry>
</feed>