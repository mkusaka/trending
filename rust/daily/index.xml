<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-18T01:38:05Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nautechsystems/nautilus_trader</title>
    <updated>2025-07-18T01:38:05Z</updated>
    <id>tag:github.com,2025-07-18:/nautechsystems/nautilus_trader</id>
    <link href="https://github.com/nautechsystems/nautilus_trader" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A high-performance algorithmic trading platform and event-driven backtester&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://github.com/nautechsystems/nautilus_trader/raw/develop/assets/nautilus-trader-logo.png&#34; width=&#34;500&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codecov.io/gh/nautechsystems/nautilus_trader&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/nautechsystems/nautilus_trader/branch/master/graph/badge.svg?token=DXO9QQI40H&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codspeed.io/nautechsystems/nautilus_trader&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https://codspeed.io/badge.json&#34; alt=&#34;codspeed&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/pypi/pyversions/nautilus_trader&#34; alt=&#34;pythons&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/v/nautilus_trader&#34; alt=&#34;pypi-version&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/format/nautilus_trader?color=blue&#34; alt=&#34;pypi-format&#34;&gt; &lt;a href=&#34;https://pepy.tech/project/nautilus-trader&#34;&gt;&lt;img src=&#34;https://pepy.tech/badge/nautilus-trader&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/NautilusTrader&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Discord-%235865F2.svg?logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Branch&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Version&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;master&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://packages.nautechsystems.io/simple/nautilus-trader/index.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2Fnautechsystems%2Fnautilus_trader%2Fmaster%2Fversion.json&#34; alt=&#34;version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/nautechsystems/nautilus_trader/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/nautechsystems/nautilus_trader/actions/workflows/build.yml/badge.svg?branch=nightly&#34; alt=&#34;build&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;nightly&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://packages.nautechsystems.io/simple/nautilus-trader/index.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2Fnautechsystems%2Fnautilus_trader%2Fnightly%2Fversion.json&#34; alt=&#34;version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/nautechsystems/nautilus_trader/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/nautechsystems/nautilus_trader/actions/workflows/build.yml/badge.svg?branch=nightly&#34; alt=&#34;build&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;develop&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://packages.nautechsystems.io/simple/nautilus-trader/index.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2Fnautechsystems%2Fnautilus_trader%2Fdevelop%2Fversion.json&#34; alt=&#34;version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/nautechsystems/nautilus_trader/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/nautechsystems/nautilus_trader/actions/workflows/build.yml/badge.svg?branch=develop&#34; alt=&#34;build&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Platform&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Rust&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Python&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;Linux (x86_64)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.88.0&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3.11-3.13&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;Linux (ARM64)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.88.0&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3.11-3.13&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;macOS (ARM64)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.88.0&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3.11-3.13&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;Windows (x86_64)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.88.0&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3.11-3.13*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;* Windows builds are currently pinned to CPython 3.13.2, see &lt;a href=&#34;https://github.com/nautechsystems/nautilus_trader/raw/develop/docs/getting_started/installation.md&#34;&gt;installation guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Docs&lt;/strong&gt;: &lt;a href=&#34;https://nautilustrader.io/docs/&#34;&gt;https://nautilustrader.io/docs/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Website&lt;/strong&gt;: &lt;a href=&#34;https://nautilustrader.io&#34;&gt;https://nautilustrader.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Support&lt;/strong&gt;: &lt;a href=&#34;mailto:support@nautilustrader.io&#34;&gt;support@nautilustrader.io&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;NautilusTrader is an open-source, high-performance, production-grade algorithmic trading platform, providing quantitative traders with the ability to backtest portfolios of automated trading strategies on historical data with an event-driven engine, and also deploy those same strategies live, with no code changes.&lt;/p&gt; &#xA;&lt;p&gt;The platform is &lt;em&gt;AI-first&lt;/em&gt;, designed to develop and deploy algorithmic trading strategies within a highly performant and robust Python-native environment. This helps to address the parity challenge of keeping the Python research/backtest environment consistent with the production live trading environment.&lt;/p&gt; &#xA;&lt;p&gt;NautilusTrader&#39;s design, architecture, and implementation philosophy prioritizes software correctness and safety at the highest level, with the aim of supporting Python-native, mission-critical, trading system backtesting and live deployment workloads.&lt;/p&gt; &#xA;&lt;p&gt;The platform is also universal, and asset-class-agnostic — with any REST API or WebSocket feed able to be integrated via modular adapters. It supports high-frequency trading across a wide range of asset classes and instrument types including FX, Equities, Futures, Options, Crypto and Betting, enabling seamless operations across multiple venues simultaneously.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/nautechsystems/nautilus_trader/raw/develop/assets/nautilus-trader.png&#34; alt=&#34;nautilus-trader&#34; title=&#34;nautilus-trader&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fast&lt;/strong&gt;: Core is written in Rust with asynchronous networking using &lt;a href=&#34;https://crates.io/crates/tokio&#34;&gt;tokio&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reliable&lt;/strong&gt;: Rust-powered type- and thread-safety, with optional Redis-backed state persistence.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Portable&lt;/strong&gt;: OS independent, runs on Linux, macOS, and Windows. Deploy using Docker.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Flexible&lt;/strong&gt;: Modular adapters mean any REST API or WebSocket feed can be integrated.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Advanced&lt;/strong&gt;: Time in force &lt;code&gt;IOC&lt;/code&gt;, &lt;code&gt;FOK&lt;/code&gt;, &lt;code&gt;GTC&lt;/code&gt;, &lt;code&gt;GTD&lt;/code&gt;, &lt;code&gt;DAY&lt;/code&gt;, &lt;code&gt;AT_THE_OPEN&lt;/code&gt;, &lt;code&gt;AT_THE_CLOSE&lt;/code&gt;, advanced order types and conditional triggers. Execution instructions &lt;code&gt;post-only&lt;/code&gt;, &lt;code&gt;reduce-only&lt;/code&gt;, and icebergs. Contingency orders including &lt;code&gt;OCO&lt;/code&gt;, &lt;code&gt;OUO&lt;/code&gt;, &lt;code&gt;OTO&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Customizable&lt;/strong&gt;: Add user-defined custom components, or assemble entire systems from scratch leveraging the &lt;a href=&#34;https://nautilustrader.io/docs/latest/concepts/cache&#34;&gt;cache&lt;/a&gt; and &lt;a href=&#34;https://nautilustrader.io/docs/latest/concepts/message_bus&#34;&gt;message bus&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Backtesting&lt;/strong&gt;: Run with multiple venues, instruments and strategies simultaneously using historical quote tick, trade tick, bar, order book and custom data with nanosecond resolution.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Live&lt;/strong&gt;: Use identical strategy implementations between backtesting and live deployments.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi-venue&lt;/strong&gt;: Multiple venue capabilities facilitate market-making and statistical arbitrage strategies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AI Training&lt;/strong&gt;: Backtest engine fast enough to be used to train AI trading agents (RL/ES).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/nautechsystems/nautilus_trader/raw/develop/assets/nautilus-art.png&#34; alt=&#34;Alt text&#34; title=&#34;nautilus&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;nautilus - from ancient Greek &#39;sailor&#39; and naus &#39;ship&#39;.&lt;/em&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;em&gt;The nautilus shell consists of modular chambers with a growth factor which approximates a logarithmic spiral. The idea is that this can be translated to the aesthetics of design and architecture.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Why NautilusTrader?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Highly performant event-driven Python&lt;/strong&gt;: Native binary core components.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Parity between backtesting and live trading&lt;/strong&gt;: Identical strategy code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reduced operational risk&lt;/strong&gt;: Enhanced risk management functionality, logical accuracy, and type safety.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Highly extendable&lt;/strong&gt;: Message bus, custom components and actors, custom data, custom adapters.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Traditionally, trading strategy research and backtesting might be conducted in Python using vectorized methods, with the strategy then needing to be reimplemented in a more event-driven way using C++, C#, Java or other statically typed language(s). The reasoning here is that vectorized backtesting code cannot express the granular time and event dependent complexity of real-time trading, where compiled languages have proven to be more suitable due to their inherently higher performance, and type safety.&lt;/p&gt; &#xA;&lt;p&gt;One of the key advantages of NautilusTrader here, is that this reimplementation step is now circumvented - as the critical core components of the platform have all been written entirely in &lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt; or &lt;a href=&#34;https://cython.org/&#34;&gt;Cython&lt;/a&gt;. This means we&#39;re using the right tools for the job, where systems programming languages compile performant binaries, with CPython C extension modules then able to offer a Python-native environment, suitable for professional quantitative traders and trading firms.&lt;/p&gt; &#xA;&lt;h2&gt;Why Python?&lt;/h2&gt; &#xA;&lt;p&gt;Python was originally created decades ago as a simple scripting language with a clean straightforward syntax. It has since evolved into a fully fledged general purpose object-oriented programming language. Based on the TIOBE index, Python is currently the most popular programming language in the world. Not only that, Python has become the &lt;em&gt;de facto lingua franca&lt;/em&gt; of data science, machine learning, and artificial intelligence.&lt;/p&gt; &#xA;&lt;p&gt;developer/user communities. However, Python has performance and typing limitations for large-scale, latency-sensitive systems. Cython addresses many of these issues by introducing static typing into Python&#39;s rich ecosystem of libraries and communities.&lt;/p&gt; &#xA;&lt;h2&gt;Why Rust?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt; is a multi-paradigm programming language designed for performance and safety, especially safe concurrency. Rust is &#34;blazingly fast&#34; and memory-efficient (comparable to C and C++) with no garbage collector. It can power mission-critical systems, run on embedded devices, and easily integrates with other languages.&lt;/p&gt; &#xA;&lt;p&gt;Rust’s rich type system and ownership model guarantees memory-safety and thread-safety deterministically — eliminating many classes of bugs at compile-time.&lt;/p&gt; &#xA;&lt;p&gt;The project increasingly utilizes Rust for core performance-critical components. Python bindings are implemented via Cython and &lt;a href=&#34;https://pyo3.rs&#34;&gt;PyO3&lt;/a&gt;—no Rust toolchain is required at install time.&lt;/p&gt; &#xA;&lt;p&gt;This project makes the &lt;a href=&#34;https://raphlinus.github.io/rust/2020/01/18/soundness-pledge.html&#34;&gt;Soundness Pledge&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;“The intent of this project is to be free of soundness bugs. The developers will do their best to avoid them, and welcome help in analyzing and fixing them.”&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;MSRV:&lt;/strong&gt; NautilusTrader relies heavily on improvements in the Rust language and compiler. As a result, the Minimum Supported Rust Version (MSRV) is generally equal to the latest stable release of Rust.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Integrations&lt;/h2&gt; &#xA;&lt;p&gt;NautilusTrader is modularly designed to work with &lt;em&gt;adapters&lt;/em&gt;, enabling connectivity to trading venues and data providers by translating their raw APIs into a unified interface and normalized domain model.&lt;/p&gt; &#xA;&lt;p&gt;The following integrations are currently supported; see &lt;a href=&#34;https://nautilustrader.io/docs/latest/integrations/&#34;&gt;docs/integrations/&lt;/a&gt; for details:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Name&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;ID&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Type&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Status&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Docs&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://betfair.com&#34;&gt;Betfair&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;BETFAIR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Sports Betting Exchange&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/stable-green&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/betfair.md&#34;&gt;Guide&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://binance.com&#34;&gt;Binance&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;BINANCE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Crypto Exchange (CEX)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/stable-green&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/binance.md&#34;&gt;Guide&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://binance.us&#34;&gt;Binance US&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;BINANCE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Crypto Exchange (CEX)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/stable-green&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/binance.md&#34;&gt;Guide&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.binance.com/en/futures&#34;&gt;Binance Futures&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;BINANCE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Crypto Exchange (CEX)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/stable-green&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/binance.md&#34;&gt;Guide&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.bybit.com&#34;&gt;Bybit&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;BYBIT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Crypto Exchange (CEX)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/stable-green&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/bybit.md&#34;&gt;Guide&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.coinbase.com/en/international-exchange&#34;&gt;Coinbase International&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;COINBASE_INTX&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Crypto Exchange (CEX)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/stable-green&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/coinbase_intx.md&#34;&gt;Guide&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://databento.com&#34;&gt;Databento&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;DATABENTO&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Data Provider&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/stable-green&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/databento.md&#34;&gt;Guide&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://dydx.exchange/&#34;&gt;dYdX&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;DYDX&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Crypto Exchange (DEX)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/stable-green&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/dydx.md&#34;&gt;Guide&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://hyperliquid.xyz&#34;&gt;Hyperliquid&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;HYPERLIQUID&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Crypto Exchange (DEX)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/building-orange&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/hyperliquid.md&#34;&gt;Guide&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.interactivebrokers.com&#34;&gt;Interactive Brokers&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;INTERACTIVE_BROKERS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Brokerage (multi-venue)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/stable-green&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/ib.md&#34;&gt;Guide&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://okx.com&#34;&gt;OKX&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;OKX&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Crypto Exchange (CEX)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/building-orange&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/okx.md&#34;&gt;Guide&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://polymarket.com&#34;&gt;Polymarket&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;POLYMARKET&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Prediction Market (DEX)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/stable-green&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/polymarket.md&#34;&gt;Guide&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://tardis.dev&#34;&gt;Tardis&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;TARDIS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Crypto Data Provider&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/stable-green&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/tardis.md&#34;&gt;Guide&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ID&lt;/strong&gt;: The default client ID for the integrations adapter clients.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Type&lt;/strong&gt;: The type of integration (often the venue type).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Status&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;building&lt;/code&gt;: Under construction and likely not in a usable state.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;beta&lt;/code&gt;: Completed to a minimally working state and in a beta testing phase.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stable&lt;/code&gt;: Stabilized feature set and API, the integration has been tested by both developers and users to a reasonable level (some bugs may still remain).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://nautilustrader.io/docs/latest/integrations/index.html&#34;&gt;Integrations&lt;/a&gt; documentation for further details.&lt;/p&gt; &#xA;&lt;h2&gt;Versioning and releases&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;NautilusTrader is still under active development&lt;/strong&gt;. Some features may be incomplete, and while the API is becoming more stable, breaking changes can occur between releases. We strive to document these changes in the release notes on a &lt;strong&gt;best-effort basis&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We aim to follow a &lt;strong&gt;bi-weekly release schedule&lt;/strong&gt;, though experimental or larger features may cause delays.&lt;/p&gt; &#xA;&lt;h3&gt;Branches&lt;/h3&gt; &#xA;&lt;p&gt;We aim to maintain a stable, passing build across all branches.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;master&lt;/code&gt;: Reflects the source code for the latest released version; recommended for production use.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nightly&lt;/code&gt;: Daily snapshots of the &lt;code&gt;develop&lt;/code&gt; branch for early testing; merged at &lt;strong&gt;14:00 UTC&lt;/strong&gt; or on demand.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;develop&lt;/code&gt;: Active development branch for contributors and feature work.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;Our &lt;a href=&#34;https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/ROADMAP.md&#34;&gt;roadmap&lt;/a&gt; aims to achieve a &lt;strong&gt;stable API for version 2.x&lt;/strong&gt; (likely after the Rust port). Once this milestone is reached, we plan to implement a formal deprecation process for any API changes. This approach allows us to maintain a rapid development pace for now.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Precision mode&lt;/h2&gt; &#xA;&lt;p&gt;NautilusTrader supports two precision modes for its core value types (&lt;code&gt;Price&lt;/code&gt;, &lt;code&gt;Quantity&lt;/code&gt;, &lt;code&gt;Money&lt;/code&gt;), which differ in their internal bit-width and maximum decimal precision.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;High-precision&lt;/strong&gt;: 128-bit integers with up to 16 decimals of precision, and a larger value range.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Standard-precision&lt;/strong&gt;: 64-bit integers with up to 9 decimals of precision, and a smaller value range.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;By default, the official Python wheels &lt;strong&gt;ship&lt;/strong&gt; in high-precision (128-bit) mode on Linux and macOS. On Windows, only standard-precision (64-bit) is available due to the lack of native 128-bit integer support. For the Rust crates, the default is standard-precision unless you explicitly enable the &lt;code&gt;high-precision&lt;/code&gt; feature flag.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://nautilustrader.io/docs/latest/getting_started/installation&#34;&gt;Installation Guide&lt;/a&gt; for further details.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Rust feature flag&lt;/strong&gt;: To enable high-precision mode in Rust, add the &lt;code&gt;high-precision&lt;/code&gt; feature to your Cargo.toml:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[dependencies]&#xA;nautilus_model = { version = &#34;*&#34;, features = [&#34;high-precision&#34;] }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;We recommend using the latest supported version of Python and installing &lt;a href=&#34;https://pypi.org/project/nautilus_trader/&#34;&gt;nautilus_trader&lt;/a&gt; inside a virtual environment to isolate dependencies.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;There are two supported ways to install&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Pre-built binary wheel from PyPI &lt;em&gt;or&lt;/em&gt; the Nautech Systems package index.&lt;/li&gt; &#xA; &lt;li&gt;Build from source.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP]&lt;/p&gt; &#xA; &lt;p&gt;We highly recommend installing using the &lt;a href=&#34;https://docs.astral.sh/uv&#34;&gt;uv&lt;/a&gt; package manager with a &#34;vanilla&#34; CPython.&lt;/p&gt; &#xA; &lt;p&gt;Conda and other Python distributions &lt;em&gt;may&lt;/em&gt; work but aren’t officially supported.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;From PyPI&lt;/h3&gt; &#xA;&lt;p&gt;To install the latest binary wheel (or sdist package) from PyPI using Python&#39;s pip package manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -U nautilus_trader&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;From the Nautech Systems package index&lt;/h3&gt; &#xA;&lt;p&gt;The Nautech Systems package index (&lt;code&gt;packages.nautechsystems.io&lt;/code&gt;) complies with &lt;a href=&#34;https://peps.python.org/pep-0503/&#34;&gt;PEP-503&lt;/a&gt; and hosts both stable and development binary wheels for &lt;code&gt;nautilus_trader&lt;/code&gt;. This enables users to install either the latest stable release or pre-release versions for testing.&lt;/p&gt; &#xA;&lt;h4&gt;Stable wheels&lt;/h4&gt; &#xA;&lt;p&gt;Stable wheels correspond to official releases of &lt;code&gt;nautilus_trader&lt;/code&gt; on PyPI, and use standard versioning.&lt;/p&gt; &#xA;&lt;p&gt;To install the latest stable release:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -U nautilus_trader --index-url=https://packages.nautechsystems.io/simple&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Development wheels&lt;/h4&gt; &#xA;&lt;p&gt;Development wheels are published from both the &lt;code&gt;nightly&lt;/code&gt; and &lt;code&gt;develop&lt;/code&gt; branches, allowing users to test features and fixes ahead of stable releases.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Wheels from the &lt;code&gt;develop&lt;/code&gt; branch are only built for the Linux x86_64 platform to save time and compute resources, while &lt;code&gt;nightly&lt;/code&gt; wheels support additional platforms as shown below.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Platform&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Nightly&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Develop&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;Linux (x86_64)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;Linux (ARM64)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;macOS (ARM64)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;Windows (x86_64)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;This process also helps preserve compute resources and ensures easy access to the exact binaries tested in CI pipelines, while adhering to &lt;a href=&#34;https://peps.python.org/pep-0440/&#34;&gt;PEP-440&lt;/a&gt; versioning standards:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;develop&lt;/code&gt; wheels use the version format &lt;code&gt;dev{date}+{build_number}&lt;/code&gt; (e.g., &lt;code&gt;1.208.0.dev20241212+7001&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nightly&lt;/code&gt; wheels use the version format &lt;code&gt;a{date}&lt;/code&gt; (alpha) (e.g., &lt;code&gt;1.208.0a20241212&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING]&lt;/p&gt; &#xA; &lt;p&gt;We do not recommend using development wheels in production environments, such as live trading controlling real capital.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Installation commands&lt;/h4&gt; &#xA;&lt;p&gt;By default, pip will install the latest stable release. Adding the &lt;code&gt;--pre&lt;/code&gt; flag ensures that pre-release versions, including development wheels, are considered.&lt;/p&gt; &#xA;&lt;p&gt;To install the latest available pre-release (including development wheels):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -U nautilus_trader --pre --index-url=https://packages.nautechsystems.io/simple&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install a specific development wheel (e.g., &lt;code&gt;1.208.0a20241212&lt;/code&gt; for December 12, 2024):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install nautilus_trader==1.208.0a20241212 --index-url=https://packages.nautechsystems.io/simple&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Available versions&lt;/h4&gt; &#xA;&lt;p&gt;You can view all available versions of &lt;code&gt;nautilus_trader&lt;/code&gt; on the &lt;a href=&#34;https://packages.nautechsystems.io/simple/nautilus-trader/index.html&#34;&gt;package index&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To programmatically fetch and list available versions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -s https://packages.nautechsystems.io/simple/nautilus-trader/index.html | grep -oP &#39;(?&amp;lt;=&amp;lt;a href=&#34;)[^&#34;]+(?=&#34;)&#39; | awk -F&#39;#&#39; &#39;{print $1}&#39; | sort&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Branch updates&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;develop&lt;/code&gt; branch wheels (&lt;code&gt;.dev&lt;/code&gt;): Build and publish continuously with every merged commit.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nightly&lt;/code&gt; branch wheels (&lt;code&gt;a&lt;/code&gt;): Build and publish daily when we automatically merge the &lt;code&gt;develop&lt;/code&gt; branch at &lt;strong&gt;14:00 UTC&lt;/strong&gt; (if there are changes).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Retention policies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;develop&lt;/code&gt; branch wheels (&lt;code&gt;.dev&lt;/code&gt;): We retain only the most recent wheel build.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nightly&lt;/code&gt; branch wheels (&lt;code&gt;a&lt;/code&gt;): We retain only the 10 most recent wheel builds.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;From Source&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s possible to install from source using pip if you first install the build dependencies as specified in the &lt;code&gt;pyproject.toml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://rustup.rs/&#34;&gt;rustup&lt;/a&gt; (the Rust toolchain installer):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Linux and macOS:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl https://sh.rustup.rs -sSf | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Windows:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Download and install &lt;a href=&#34;https://win.rustup.rs/x86_64&#34;&gt;&lt;code&gt;rustup-init.exe&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Install &#34;Desktop development with C++&#34; with &lt;a href=&#34;https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=BuildTools&amp;amp;rel=16&#34;&gt;Build Tools for Visual Studio 2019&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Verify (any system): from a terminal session run: &lt;code&gt;rustc --version&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable &lt;code&gt;cargo&lt;/code&gt; in the current shell:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Linux and macOS:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source $HOME/.cargo/env&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Windows:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Start a new PowerShell&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://clang.llvm.org/&#34;&gt;clang&lt;/a&gt; (a C language frontend for LLVM):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Linux:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install clang&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Windows:&lt;/p&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt; &lt;p&gt;Add Clang to your &lt;a href=&#34;https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=BuildTools&amp;amp;rel=16&#34;&gt;Build Tools for Visual Studio 2019&lt;/a&gt;:&lt;/p&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;Start | Visual Studio Installer | Modify | C++ Clang tools for Windows (12.0.0 - x64…) = checked | Modify&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Enable &lt;code&gt;clang&lt;/code&gt; in the current shell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;[System.Environment]::SetEnvironmentVariable(&#39;path&#39;, &#34;C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Tools\Llvm\x64\bin\;&#34; + $env:Path,&#34;User&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Verify (any system): from a terminal session run: &lt;code&gt;clang --version&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install uv (see the &lt;a href=&#34;https://docs.astral.sh/uv/getting-started/installation&#34;&gt;uv installation guide&lt;/a&gt; for more details):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -LsSf https://astral.sh/uv/install.sh | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the source with &lt;code&gt;git&lt;/code&gt;, and install from the project&#39;s root directory:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --branch develop --depth 1 https://github.com/nautechsystems/nautilus_trader&#xA;cd nautilus_trader&#xA;uv sync --all-extras&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;The &lt;code&gt;--depth 1&lt;/code&gt; flag fetches just the latest commit for a faster, lightweight clone.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Set environment variables for PyO3 compilation (Linux and macOS only):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Set the library path for the Python interpreter (in this case Python 3.13.4)&#xA;export LD_LIBRARY_PATH=&#34;$HOME/.local/share/uv/python/cpython-3.13.4-linux-x86_64-gnu/lib:$LD_LIBRARY_PATH&#34;&#xA;&#xA;# Set the Python executable path for PyO3&#xA;export PYO3_PYTHON=$(pwd)/.venv/bin/python&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;Adjust the Python version and architecture in the &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; to match your system. Use &lt;code&gt;uv python list&lt;/code&gt; to find the exact path for your Python installation.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://nautilustrader.io/docs/latest/getting_started/installation&#34;&gt;Installation Guide&lt;/a&gt; for other options and further details.&lt;/p&gt; &#xA;&lt;h2&gt;Redis&lt;/h2&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://redis.io&#34;&gt;Redis&lt;/a&gt; with NautilusTrader is &lt;strong&gt;optional&lt;/strong&gt; and only required if configured as the backend for a &lt;a href=&#34;https://nautilustrader.io/docs/latest/concepts/cache&#34;&gt;cache&lt;/a&gt; database or &lt;a href=&#34;https://nautilustrader.io/docs/latest/concepts/message_bus&#34;&gt;message bus&lt;/a&gt;. See the &lt;strong&gt;Redis&lt;/strong&gt; section of the &lt;a href=&#34;https://nautilustrader.io/docs/latest/getting_started/installation#redis&#34;&gt;Installation Guide&lt;/a&gt; for further details.&lt;/p&gt; &#xA;&lt;h2&gt;Makefile&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;code&gt;Makefile&lt;/code&gt; is provided to automate most installation and build tasks for development. Some of the targets include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;make install&lt;/code&gt;: Installs in &lt;code&gt;release&lt;/code&gt; build mode with all dependency groups and extras.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make install-debug&lt;/code&gt;: Same as &lt;code&gt;make install&lt;/code&gt; but with &lt;code&gt;debug&lt;/code&gt; build mode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make install-just-deps&lt;/code&gt;: Installs just the &lt;code&gt;main&lt;/code&gt;, &lt;code&gt;dev&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; dependencies (does not install package).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make build&lt;/code&gt;: Runs the build script in &lt;code&gt;release&lt;/code&gt; build mode (default).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make build-debug&lt;/code&gt;: Runs the build script in &lt;code&gt;debug&lt;/code&gt; build mode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make build-wheel&lt;/code&gt;: Runs uv build with a wheel format in &lt;code&gt;release&lt;/code&gt; mode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make build-wheel-debug&lt;/code&gt;: Runs uv build with a wheel format in &lt;code&gt;debug&lt;/code&gt; mode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make cargo-test&lt;/code&gt;: Runs all Rust crate tests using &lt;code&gt;cargo-nextest&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make clean&lt;/code&gt;: Deletes all build results, such as &lt;code&gt;.so&lt;/code&gt; or &lt;code&gt;.dll&lt;/code&gt; files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make distclean&lt;/code&gt;: &lt;strong&gt;CAUTION&lt;/strong&gt; Removes all artifacts not in the git index from the repository. This includes source files which have not been &lt;code&gt;git add&lt;/code&gt;ed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make docs&lt;/code&gt;: Builds the documentation HTML using Sphinx.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make pre-commit&lt;/code&gt;: Runs the pre-commit checks over all files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make ruff&lt;/code&gt;: Runs ruff over all files using the &lt;code&gt;pyproject.toml&lt;/code&gt; config (with autofix).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make pytest&lt;/code&gt;: Runs all tests with &lt;code&gt;pytest&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make test-performance&lt;/code&gt;: Runs performance tests with &lt;a href=&#34;https://codspeed.io&#34;&gt;codspeed&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP]&lt;/p&gt; &#xA; &lt;p&gt;Run &lt;code&gt;make help&lt;/code&gt; for documentation on all available make targets.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP]&lt;/p&gt; &#xA; &lt;p&gt;See the &lt;a href=&#34;https://github.com/nautechsystems/nautilus_trader/raw/develop/crates/infrastructure/TESTS.md&#34;&gt;crates/infrastructure/TESTS.md&lt;/a&gt; file for running the infrastructure integration tests.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Indicators and strategies can be developed in both Python and Cython. For performance and latency-sensitive applications, we recommend using Cython. Below are some examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/nautilus_trader/examples/indicators/ema_python.py&#34;&gt;indicator&lt;/a&gt; example written in Python.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/nautilus_trader/indicators/&#34;&gt;indicator&lt;/a&gt; examples written in Cython.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/nautilus_trader/examples/strategies/&#34;&gt;strategy&lt;/a&gt; examples written in Python.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/examples/backtest/&#34;&gt;backtest&lt;/a&gt; examples using a &lt;code&gt;BacktestEngine&lt;/code&gt; directly.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Docker&lt;/h2&gt; &#xA;&lt;p&gt;Docker containers are built using the base image &lt;code&gt;python:3.12-slim&lt;/code&gt; with the following variant tags:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;nautilus_trader:latest&lt;/code&gt; has the latest release version installed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nautilus_trader:nightly&lt;/code&gt; has the head of the &lt;code&gt;nightly&lt;/code&gt; branch installed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;jupyterlab:latest&lt;/code&gt; has the latest release version installed along with &lt;code&gt;jupyterlab&lt;/code&gt; and an example backtest notebook with accompanying data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;jupyterlab:nightly&lt;/code&gt; has the head of the &lt;code&gt;nightly&lt;/code&gt; branch installed along with &lt;code&gt;jupyterlab&lt;/code&gt; and an example backtest notebook with accompanying data.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can pull the container images as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull ghcr.io/nautechsystems/&amp;lt;image_variant_tag&amp;gt; --platform linux/amd64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can launch the backtest example container by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull ghcr.io/nautechsystems/jupyterlab:nightly --platform linux/amd64&#xA;docker run -p 8888:8888 ghcr.io/nautechsystems/jupyterlab:nightly&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then open your browser at the following address:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;http://127.0.0.1:8888/lab&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING]&lt;/p&gt; &#xA; &lt;p&gt;NautilusTrader currently exceeds the rate limit for Jupyter notebook logging (stdout output). Therefore, we set the &lt;code&gt;log_level&lt;/code&gt; to &lt;code&gt;ERROR&lt;/code&gt; in the examples. Lowering this level to see more logging will cause the notebook to hang during cell execution. We are investigating a fix that may involve either raising the configured rate limits for Jupyter or throttling the log flushing from Nautilus.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/jupyterlab/jupyterlab/issues/12845&#34;&gt;https://github.com/jupyterlab/jupyterlab/issues/12845&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/deshaw/jupyterlab-limit-output&#34;&gt;https://github.com/deshaw/jupyterlab-limit-output&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;We aim to provide the most pleasant developer experience possible for this hybrid codebase of Python, Cython and Rust. See the &lt;a href=&#34;https://nautilustrader.io/docs/latest/developer_guide/index.html&#34;&gt;Developer Guide&lt;/a&gt; for helpful information.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP]&lt;/p&gt; &#xA; &lt;p&gt;Run &lt;code&gt;make build-debug&lt;/code&gt; to compile after changes to Rust or Cython code for the most efficient development workflow.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Testing with Rust&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nexte.st&#34;&gt;cargo-nextest&lt;/a&gt; is the standard Rust test runner for NautilusTrader. Its key benefit is isolating each test in its own process, ensuring test reliability by avoiding interference.&lt;/p&gt; &#xA;&lt;p&gt;You can install cargo-nextest by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo install cargo-nextest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP]&lt;/p&gt; &#xA; &lt;p&gt;Run Rust tests with &lt;code&gt;make cargo-test&lt;/code&gt;, which uses &lt;strong&gt;cargo-nextest&lt;/strong&gt; with an efficient profile.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Thank you for considering contributing to NautilusTrader! We welcome any and all help to improve the project. If you have an idea for an enhancement or a bug fix, the first step is to open an &lt;a href=&#34;https://github.com/nautechsystems/nautilus_trader/issues&#34;&gt;issue&lt;/a&gt; on GitHub to discuss it with the team. This helps to ensure that your contribution will be well-aligned with the goals of the project and avoids duplication of effort.&lt;/p&gt; &#xA;&lt;p&gt;Before getting started, be sure to review the &lt;a href=&#34;https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/ROADMAP.md#open-source-scope&#34;&gt;open-source scope&lt;/a&gt; outlined in the project’s roadmap to understand what’s in and out of scope.&lt;/p&gt; &#xA;&lt;p&gt;Once you&#39;re ready to start working on your contribution, make sure to follow the guidelines outlined in the &lt;a href=&#34;https://github.com/nautechsystems/nautilus_trader/raw/develop/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file. This includes signing a Contributor License Agreement (CLA) to ensure that your contributions can be included in the project.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;Pull requests should target the &lt;code&gt;develop&lt;/code&gt; branch (the default branch). This is where new features and improvements are integrated before release.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Thank you again for your interest in NautilusTrader! We look forward to reviewing your contributions and working with you to improve the project.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Join our community of users and contributors on &lt;a href=&#34;https://discord.gg/NautilusTrader&#34;&gt;Discord&lt;/a&gt; to chat and stay up-to-date with the latest announcements and features of NautilusTrader. Whether you&#39;re a developer looking to contribute or just want to learn more about the platform, all are welcome on our Discord server.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING]&lt;/p&gt; &#xA; &lt;p&gt;NautilusTrader does not issue, promote, or endorse any cryptocurrency tokens. Any claims or communications suggesting otherwise are unauthorized and false.&lt;/p&gt; &#xA; &lt;p&gt;All official updates and communications from NautilusTrader will be shared exclusively through &lt;a href=&#34;https://nautilustrader.io&#34;&gt;https://nautilustrader.io&lt;/a&gt;, our &lt;a href=&#34;https://discord.gg/NautilusTrader&#34;&gt;Discord server&lt;/a&gt;, or our X (Twitter) account: &lt;a href=&#34;https://x.com/NautilusTrader&#34;&gt;@NautilusTrader&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;If you encounter any suspicious activity, please report it to the appropriate platform and contact us at &lt;a href=&#34;mailto:info@nautechsystems.io&#34;&gt;info@nautechsystems.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The source code for NautilusTrader is available on GitHub under the &lt;a href=&#34;https://www.gnu.org/licenses/lgpl-3.0.en.html&#34;&gt;GNU Lesser General Public License v3.0&lt;/a&gt;. Contributions to the project are welcome and require the completion of a standard &lt;a href=&#34;https://github.com/nautechsystems/nautilus_trader/raw/develop/CLA.md&#34;&gt;Contributor License Agreement (CLA)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;NautilusTrader™ is developed and maintained by Nautech Systems, a technology company specializing in the development of high-performance trading systems. For more information, visit &lt;a href=&#34;https://nautilustrader.io&#34;&gt;https://nautilustrader.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;© 2015-2025 Nautech Systems Pty Ltd. All rights reserved.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/nautechsystems/nautilus_trader/raw/develop/assets/ns-logo.png&#34; alt=&#34;nautechsystems&#34; title=&#34;nautechsystems&#34;&gt; &lt;img src=&#34;https://github.com/nautechsystems/nautilus_trader/raw/develop/assets/ferris.png&#34; width=&#34;128&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>faiface/par-lang</title>
    <updated>2025-07-18T01:38:05Z</updated>
    <id>tag:github.com,2025-07-18:/faiface/par-lang</id>
    <link href="https://github.com/faiface/par-lang" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Par (⅋) is an experimental concurrent programming language. It&#39;s an attempt to bring the expressive power of linear logic into practice.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;strong&gt;Par&lt;/strong&gt; is an &lt;em&gt;expressive, concurrent, total*&lt;/em&gt; language&lt;/h1&gt; &#xA;&lt;h2&gt;...with linear types and duality&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;💬 &lt;strong&gt;Join our &lt;a href=&#34;https://discord.gg/8KsypefW99&#34;&gt;Discord&lt;/a&gt;,&lt;/strong&gt; or use the &lt;a href=&#34;https://github.com/faiface/par-lang/discussions&#34;&gt;Discussions&lt;/a&gt; as a forum to ask questions and share ideas!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;🫶 If you&#39;d like to support my effort to bring the power of linear logic into practical programming, you can do it via &lt;a href=&#34;https://github.com/sponsors/faiface&#34;&gt;GitHub Sponsors&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;🦀 If you like this &lt;strong&gt;concurrent paradigm,&lt;/strong&gt; and want to use it &lt;strong&gt;in a real programming language,&lt;/strong&gt; check out my Rust crate with the same name: &lt;strong&gt;&lt;a href=&#34;https://github.com/faiface/par&#34;&gt;Par&lt;/a&gt;.&lt;/strong&gt; It&#39;s a full implementation of &lt;strong&gt;session types,&lt;/strong&gt; including non-deterministic handling of many clients.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🚀 Get started with the &lt;a href=&#34;https://faiface.github.io/par-lang/introduction.html&#34;&gt;documentation&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;💡 Check out the &lt;a href=&#34;https://raw.githubusercontent.com/faiface/par-lang/main/examples/&#34;&gt;examples&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h1&gt;✨ Features&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/faiface/par-lang/main/screenshots/annotated_code_example.png&#34; alt=&#34;Annotated Code Example&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🧩 Expressive&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Duality&lt;/strong&gt; gives two sides to every concept, leading to rich composability. Whichever angle you take to tackle a problem, there will likely be ways to express it. &lt;strong&gt;Par comes with these first-class, structural types:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;(Dual types are on the same line.)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://faiface.github.io/par-lang/types/pair.html&#34;&gt;&lt;strong&gt;Pairs&lt;/strong&gt;&lt;/a&gt; (easily extensible to tuples), and &lt;a href=&#34;https://faiface.github.io/par-lang/types/function.html&#34;&gt;&lt;strong&gt;functions&lt;/strong&gt;&lt;/a&gt; (naturally curried).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://faiface.github.io/par-lang/types/either.html&#34;&gt;&lt;strong&gt;Eithers&lt;/strong&gt;&lt;/a&gt; (sum types), and &lt;a href=&#34;https://faiface.github.io/par-lang/types/choice.html&#34;&gt;&lt;strong&gt;choices&lt;/strong&gt;&lt;/a&gt; (unusual, but powerful dispatchers).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://faiface.github.io/par-lang/types/recursive.html&#34;&gt;&lt;strong&gt;Recursive&lt;/strong&gt;&lt;/a&gt; (finite), and &lt;a href=&#34;https://faiface.github.io/par-lang/types/iterative.html&#34;&gt;&lt;strong&gt;iterative&lt;/strong&gt;&lt;/a&gt; (co-recursive, potentially infinite) types, with totality checking.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://faiface.github.io/par-lang/types/forall.html&#34;&gt;&lt;strong&gt;Universally,&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://faiface.github.io/par-lang/types/exists.html&#34;&gt;&lt;strong&gt;existentially&lt;/strong&gt;&lt;/a&gt; quantified generic functions and values.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://faiface.github.io/par-lang/types/unit.html&#34;&gt;&lt;strong&gt;Unit,&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://faiface.github.io/par-lang/types/continuation.html&#34;&gt;&lt;strong&gt;continuation.&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These &lt;strong&gt;orthogonal concepts&lt;/strong&gt; combine to give rise to a rich world of types and semantics.&lt;/p&gt; &#xA;&lt;h2&gt;🔗 Concurrent&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Automatically concurrent execution.&lt;/strong&gt; Everything that can run concurrently, does! Sequential execution is only enforced by data dependencies. It&#39;s as if everything was &lt;code&gt;async&lt;/code&gt;, but nothing needs &lt;code&gt;await&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Par compiles to &lt;a href=&#34;https://www.sciencedirect.com/science/article/pii/S0890540197926432/pdf&#34;&gt;interaction combinators&lt;/a&gt;, which is the basis for the famous &lt;a href=&#34;https://github.com/HigherOrderCO/HVM&#34;&gt;HVM&lt;/a&gt;, and the &lt;a href=&#34;https://github.com/HigherOrderCO/Bend&#34;&gt;Bend&lt;/a&gt; programming language.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Structured concurrency with session types.&lt;/strong&gt; Session types describe concurrent protocols, almost like finite-state machines, and make sure these are upheld in code. Par needs no special library for these. Linear types &lt;em&gt;are&lt;/em&gt; session types, at least in their full version, which embraces duality.&lt;/p&gt; &#xA;&lt;h2&gt;🛡️ Total*&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;No crashes.&lt;/strong&gt; Runtime exceptions are not supported, except for running out of memory.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;No deadlocks.&lt;/strong&gt; Structured concurrency of Par makes deadlocks impossible.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;(Almost) no infinite loops.*&lt;/strong&gt; By default, recursion using &lt;code&gt;begin&lt;/code&gt;/&lt;code&gt;loop&lt;/code&gt; is checked for well-foundedness.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Iterative (corecursive) types&lt;/strong&gt; are distinguished from &lt;strong&gt;recursive types&lt;/strong&gt;, and enable constructing potentially unbounded objects, such as infinite sequences, with no danger of infinite loops, or a need to opt-out of totality.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;*There is an escape hatch. Some algorithms, especially divide-and-conquer, are difficult or impossible to implement using easy-to-check well-founded strategies. For those, &lt;code&gt;unfounded&lt;/code&gt; turns this check off. Vast majority of code doesn&#39;t need to opt-out of totality checking, it naturally fits its requirements. Those few parts that need to opt-out are clearly marked with &lt;code&gt;unfounded&lt;/code&gt;. They are the only places that can potentially cause infinite loops.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;📚 Theoretical background&lt;/h2&gt; &#xA;&lt;p&gt;Par is fully based on &lt;a href=&#34;https://plato.stanford.edu/entries/logic-linear/&#34;&gt;linear logic&lt;/a&gt;. It&#39;s an attempt to bring its expressive power into practice, by interpreting linear logic as &lt;em&gt;session types&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In fact, the language itself is based on a little process language, called &lt;em&gt;CP&lt;/em&gt;, from a paper called &lt;a href=&#34;https://www.pure.ed.ac.uk/ws/portalfiles/portal/18383989/Wadler_2012_Propositions_as_Sessions.pdf&#34;&gt;&lt;em&gt;&#34;Propositions as Sessions&#34;&lt;/em&gt;&lt;/a&gt; by the famous Phil Wadler.&lt;/p&gt; &#xA;&lt;p&gt;While programming in Par feels just like a programming language, even if an unusual one, its programs still correspond one-to-one with linear logic proofs.&lt;/p&gt; &#xA;&lt;h1&gt;🤝 Come help us!&lt;/h1&gt; &#xA;&lt;p&gt;There&#39;s still so much to be done! If this project speaks to you, join us on &lt;a href=&#34;https://discord.gg/8KsypefW99&#34;&gt;Discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;🫶 Support the project!&lt;/h1&gt; &#xA;&lt;p&gt;Par is currently funded by motivation alone. Only your support can make it viable long-term. &lt;a href=&#34;https://github.com/sponsors/faiface&#34;&gt;Consider sponsoring.&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>