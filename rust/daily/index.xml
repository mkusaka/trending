<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-25T01:39:47Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>superfly/corrosion</title>
    <updated>2023-09-25T01:39:47Z</updated>
    <id>tag:github.com,2023-09-25:/superfly/corrosion</id>
    <link href="https://github.com/superfly/corrosion" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Gossip-based service discovery (and more) for large distributed systems.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Corrosion&lt;/h1&gt; &#xA;&lt;p&gt;Gossip-based service discovery (and more) for large distributed systems.&lt;/p&gt; &#xA;&lt;h2&gt;Why we built Corrosion&lt;/h2&gt; &#xA;&lt;p&gt;We built Corrosion specifically for service discovery across a large global network, replacing Consulâ€™s central state database with eventually consistent state distributed across our hosts.&lt;/p&gt; &#xA;&lt;p&gt;Our new tool needed to deliver the following:&lt;/p&gt; &#xA;&lt;h3&gt;Fast reads and writes&lt;/h3&gt; &#xA;&lt;p&gt;Getting state (data) from a central remote source can be incredibly expensive (at least 300ms for a round-trip to something on the other side of the world), but usually takes less than 1ms from a local source.&lt;/p&gt; &#xA;&lt;h3&gt;Fast, eventual, consistency&lt;/h3&gt; &#xA;&lt;p&gt;Many use cases can cope with eventual consistency, especially if a consistent state is attained sooner than later. Raft fell short for some use cases at Fly.io where round-trips to a centralized location are too expensive.&lt;/p&gt; &#xA;&lt;h3&gt;Flexibility&lt;/h3&gt; &#xA;&lt;p&gt;Global state for a distributed system isn&#39;t one-size-fits-all. Flexible schemas and queries are essential.&lt;/p&gt; &#xA;&lt;h2&gt;How Corrosion works&lt;/h2&gt; &#xA;&lt;p&gt;In a nutshell, Corrosion:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Maintains a SQLite database on each node&lt;/li&gt; &#xA; &lt;li&gt;Gossips local changes throughout the cluster&lt;/li&gt; &#xA; &lt;li&gt;Uses &lt;a href=&#34;https://github.com/vlcn-io/cr-sqlite&#34;&gt;CR-SQLite&lt;/a&gt; for conflict resolution with CRDTs&lt;/li&gt; &#xA; &lt;li&gt;Uses &lt;a href=&#34;https://github.com/caio/foca&#34;&gt;Foca&lt;/a&gt; to manage cluster membership using a SWIM protocol&lt;/li&gt; &#xA; &lt;li&gt;Periodically synchronizes with a subset of other cluster nodes, to ensure consistency&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A flexible API to read from and write to Corrosion&#39;s store using SQL statements&lt;/li&gt; &#xA; &lt;li&gt;File-based schemas with on-the-fly updates&lt;/li&gt; &#xA; &lt;li&gt;HTTP streaming subscriptions based on SQL queries&lt;/li&gt; &#xA; &lt;li&gt;Live population of configuration files from Corrosion state with user-defined &lt;a href=&#34;https://rhai.rs/&#34;&gt;Rhai&lt;/a&gt; templates&lt;/li&gt; &#xA; &lt;li&gt;Storage and propagation of state from locally registered Consul services, replacing the central database with Corrosion&#39;s distributed state&lt;/li&gt; &#xA; &lt;li&gt;Secure peer-to-peer communication with the &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc9000&#34;&gt;QUIC&lt;/a&gt; transport protocol (using &lt;a href=&#34;https://github.com/quinn-rs/quinn&#34;&gt;Quinn&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage overview&lt;/h2&gt; &#xA;&lt;p&gt;Run the Corrosion agent on every node/host in the cluster. Other programs running on the node use &lt;a href=&#34;https://superfly.github.io/corrosion/api/index.html&#34;&gt;Corrosion&#39;s HTTP API&lt;/a&gt; to query the local Corrosion SQLite database, add and update data, and subscribe to change notifications.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://superfly.github.io/corrosion/cli/index.html&#34;&gt;Corrosion CLI&lt;/a&gt; provides commands for administration and access to database and features.&lt;/p&gt; &#xA;&lt;h3&gt;Quick start&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://superfly.github.io/corrosion/config/&#34;&gt;Prepare the Corrosion configuration file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://superfly.github.io/corrosion/schema.html&#34;&gt;Specify the initial database schema&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://superfly.github.io/corrosion/cli/agent.html&#34;&gt;Start the Corrosion agent&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the WIP &lt;a href=&#34;https://superfly.github.io/corrosion/&#34;&gt;Corrosion documentation&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Building Corrosion&lt;/h2&gt; &#xA;&lt;p&gt;Clone &lt;a href=&#34;https://github.com/superfly/corrosion.git&#34;&gt;https://github.com/superfly/corrosion.git&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;From within the repo directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo build --release &amp;amp;&amp;amp; mv target/release/corrosion ./&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>jaytaph/gosub-browser</title>
    <updated>2023-09-25T01:39:47Z</updated>
    <id>tag:github.com,2023-09-25:/jaytaph/gosub-browser</id>
    <link href="https://github.com/jaytaph/gosub-browser" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A html5 tokenizer / parser that hopefully grow up to be a browser&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GoSub: Gateway to Optimized Searching and Unlimited Browsing&lt;/h1&gt; &#xA;&lt;p&gt;A feeble attempt on writing a browser and learning rust.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: code in the main branch is currently not stable and might not even compile.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;                       _     &#xA;                      | |    &#xA;  __ _  ___  ___ _   _| |__  &#xA; / _` |/ _ \/ __| | | | &#39;_ \ &#xA;| (_| | (_) \__ \ |_| | |_) |&#xA; \__, |\___/|___/\__,_|_.__/ &#xA;  __/ |  The Gateway to                    &#xA; |___/   Optimized Searching and &#xA;         Unlimited Browsing                    &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;This repository is part of the GoSub browser project. Currently there is only a single component/repository (this one), but the idea will be that there are many other components that as a whole make up a full-fledged browser. Each of the components can probably function as something standalone (ie: html5 parser, css parser, etc).&lt;/p&gt; &#xA;&lt;p&gt;In the future, this component (html5 parser) will receive through an API a stream of bytes and will output a stream of events. The events will be consumed by the next component and so on, until we can display something in a window/user agent. This could very well be a text-mode browser, but the idea is to have a graphical browser.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;This is a work in progress. The current status is that the parser can parse a few html5 documents, but it is far from ready. The main goal is to be able to parse correctly all the tests in the html5lib-tests repository (&lt;a href=&#34;https://github.com/html5lib/html5lib-tests&#34;&gt;https://github.com/html5lib/html5lib-tests&lt;/a&gt;). As soon as we can do this, we can try and see if we can generate a DOM tree and then we can start thinking about the next component (css parser).&lt;/p&gt; &#xA;&lt;h2&gt;How to build&lt;/h2&gt; &#xA;&lt;p&gt;This project uses cargo (&lt;a href=&#34;https://doc.rust-lang.org/cargo/&#34;&gt;https://doc.rust-lang.org/cargo/&lt;/a&gt;). To build the project, simply run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create the following binaries and libs:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;File&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gosub-engine&lt;/td&gt; &#xA;   &lt;td&gt;lib&lt;/td&gt; &#xA;   &lt;td&gt;The actual html5 parser/tokenizer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gosub-browser&lt;/td&gt; &#xA;   &lt;td&gt;bin&lt;/td&gt; &#xA;   &lt;td&gt;Dummy browser (see below)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;parser_test&lt;/td&gt; &#xA;   &lt;td&gt;bin&lt;/td&gt; &#xA;   &lt;td&gt;A test suite for the parser&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokenizer_test&lt;/td&gt; &#xA;   &lt;td&gt;bin&lt;/td&gt; &#xA;   &lt;td&gt;A test suite for the tokenizer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Gosub-engine&lt;/h3&gt; &#xA;&lt;p&gt;This is the actual html5 parser/tokenizer. It is a library that can be used by other projects. It is not a standalone project. It is used by the gosub-browser project.&lt;/p&gt; &#xA;&lt;h3&gt;Gosub-browser&lt;/h3&gt; &#xA;&lt;p&gt;This is a dummy browser. It is not a real browser, it is just a test project to see if the parser/tokenizer is working and tries to parse the given url on the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ gosub-browser https://www.google.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Parser_test&lt;/h3&gt; &#xA;&lt;p&gt;This is a test suite for the parser. It is not a standalone project. It is used by the gosub-engine project. You need to specify the directory to the html5lib-test in order to run, or it will use the default one (./html5lib-tests).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ parser_test /path/to/html5lib-tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Tokenizer_test&lt;/h3&gt; &#xA;&lt;p&gt;This is a test suite for the tokenizer. It is not a standalone project. It is used by the gosub-engine project. You need to specify the directory to the html5lib-test in order to run, or it will use the default one (./html5lib-tests).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ tokenizer_test /path/to/html5lib-tests&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/windows-drivers-rs</title>
    <updated>2023-09-25T01:39:47Z</updated>
    <id>tag:github.com,2023-09-25:/microsoft/windows-drivers-rs</id>
    <link href="https://github.com/microsoft/windows-drivers-rs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Platform that enables Windows driver development in Rust. Developed by Surface.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;windows-drivers-rs&lt;/h1&gt; &#xA;&lt;p&gt;This repo is a collection of Rust crates that enable developers to develop Windows Drivers in Rust. It is the intention to support both WDM and WDF driver development models. This repo contains the following crates:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/windows-drivers-rs/main/crates/wdk-build&#34;&gt;wdk-build&lt;/a&gt;: A library to configure a Cargo build script for binding generation and downstream linking of the WDK (Windows Developer Kit). While this crate is written to be flexible with different WDK releases and different WDF version, it is currently only tested for NI eWDK, KMDF 1.33, UMDF 2.33, and WDM Drivers. There may be missing linker options for older DDKs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/windows-drivers-rs/main/crates/wdk-sys&#34;&gt;wdk-sys&lt;/a&gt;: Direct FFI bindings to APIs available in the Windows Development Kit (WDK). This includes both autogenerated ffi bindings from &lt;code&gt;bindgen&lt;/code&gt;, and also manual re-implementations of macros that bindgen fails to generate.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/windows-drivers-rs/main/crates/wdk&#34;&gt;wdk&lt;/a&gt;: Safe idiomatic bindings to APIs available in the Windows Development Kit (WDK)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/windows-drivers-rs/main/crates/wdk-panic/&#34;&gt;wdk-panic&lt;/a&gt;: Default panic handler implementations for programs built with WDK&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/windows-drivers-rs/main/crates/wdk-alloc&#34;&gt;wdk-alloc&lt;/a&gt;: alloc support for binaries compiled with the Windows Development Kit (WDK)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/windows-drivers-rs/main/crates/wdk-macros&#34;&gt;wdk-macros&lt;/a&gt;: A collection of macros that help make it easier to interact with wdk-sys&#39;s direct bindings. This crate is re-exported via &lt;code&gt;wdk-sys&lt;/code&gt; and crates should typically never need to directly depend on &lt;code&gt;wdk-macros&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To see an example of this repo used to create drivers, see &lt;a href=&#34;https://github.com/microsoft/Windows-rust-driver-samples&#34;&gt;Windows-rust-driver-samples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note: This project is still in early stages of development and is not yet recommended for commercial use. We encourage community experimentation, suggestions and discussions! We will be using our &lt;a href=&#34;https://github.com/microsoft/windows-drivers-rs/discussions&#34;&gt;GitHub Discussions forum&lt;/a&gt; as the main form of engagement with the community!&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;supported-configs&#34;&gt;Supported Configurations&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;a name=&#34;supported-configs&#34;&gt; &lt;/a&gt;&#xA;&lt;p&gt;&lt;a name=&#34;supported-configs&#34;&gt;This project was built with support of WDM, KMDF, and UMDF drivers in mind, as well as Win32 Services. This includes support for all versions of WDF included in WDK 22H2 and newer. Currently, the crates available on &lt;/a&gt;&lt;a href=&#34;https://crates.io&#34;&gt;&lt;code&gt;crates.io&lt;/code&gt;&lt;/a&gt; only support KMDF v1.33, but bindings can be generated for everything else by cloning &lt;code&gt;windows-drivers-rs&lt;/code&gt; and modifying the config specified in &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/windows-drivers-rs/main/crates/wdk-sys/build.rs&#34;&gt;&lt;code&gt;build.rs&lt;/code&gt; of &lt;code&gt;wdk-sys&lt;/code&gt;&lt;/a&gt;. Crates.io support for other WDK configurations is planned in the near future.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Build Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Binding generation via &lt;code&gt;bindgen&lt;/code&gt; requires &lt;code&gt;libclang&lt;/code&gt;. The easiest way to acquire this is via &lt;code&gt;winget&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;winget install LLVM.LLVM&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To execute post-build tasks (ie. &lt;code&gt;inf2cat&lt;/code&gt;, &lt;code&gt;infverif&lt;/code&gt;, etc.), &lt;code&gt;cargo make&lt;/code&gt; is used&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;cargo install --locked cargo-make --no-default-features --features tls-native&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Building programs with the WDK also requires being in a valid WDK enviroment. The recommended way to do this is to &lt;a href=&#34;https://learn.microsoft.com/en-us/windows-hardware/drivers/develop/using-the-enterprise-wdk#getting-started&#34;&gt;enter an eWDK developer prompt&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Adding windows-drivers-rs to Your Driver Package&lt;/h2&gt; &#xA;&lt;p&gt;The crates in this repository are available from &lt;a href=&#34;https://crates.io&#34;&gt;&lt;code&gt;crates.io&lt;/code&gt;&lt;/a&gt;, but take into account the current limitations outlined in &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/windows-drivers-rs/main/#supported-configs&#34;&gt;Supported Configurations&lt;/a&gt;. If you need to support a different config, try cloning this repo and using &lt;a href=&#34;https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-path-dependencies&#34;&gt;path dependencies&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a new Cargo package with a lib crate:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-pwsh&#34;&gt;cargo new &amp;lt;driver_name&amp;gt; --lib --config&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add dependencies on &lt;code&gt;windows-drivers-rs&lt;/code&gt; crates:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-pwsh&#34;&gt;cd &amp;lt;driver_name&amp;gt;&#xA;cargo add --build wdk-build&#xA;cargo add wdk wdk-sys wdk-alloc wdk-panic&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set the crate type to &lt;code&gt;cdylib&lt;/code&gt; by adding the following snippet to &lt;code&gt;Cargo.toml&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[lib]&#xA;crate-type = [&#34;cdylib&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set crate panic strategy to &lt;code&gt;abort&lt;/code&gt; in &lt;code&gt;Cargo.toml&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[profile.dev]&#xA;panic = &#34;abort&#34;&#xA;lto = true # optional setting to enable Link Time Optimizations&#xA;&#xA;[profile.release]&#xA;panic = &#34;abort&#34;&#xA;lto = true # optional setting to enable Link Time Optimizations&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a &lt;code&gt;build.rs&lt;/code&gt; and add the following snippet:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn main() -&amp;gt; Result&amp;lt;(), wdk_build::ConfigError&amp;gt; {&#xA;   wdk_build::Config::from_env_auto()?.configure_binary_build();&#xA;   Ok(())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Mark your driver as &lt;code&gt;no_std&lt;/code&gt; in &lt;code&gt;lib.rs&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;#![no_std]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add a panic handler in &lt;code&gt;lib.rs&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;#[cfg(not(test))]&#xA;extern crate wdk_panic;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add a global allocator in &lt;code&gt;lib.rs&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;#[cfg(not(test))]&#xA;use wdk_alloc::WDKAllocator;&#xA;&#xA;#[cfg(not(test))]&#xA;#[global_allocator]&#xA;static GLOBAL_ALLOCATOR: WDKAllocator = WDKAllocator;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add a DriverEntry in &lt;code&gt;lib.rs&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use wdk_sys::{&#xA;   DRIVER_OBJECT,&#xA;   NTSTATUS,&#xA;   PCUNICODE_STRING,&#xA;};&#xA;&#xA;#[export_name = &#34;DriverEntry&#34;] // WDF expects a symbol with the name DriverEntry&#xA;pub unsafe extern &#34;system&#34; fn driver_entry(&#xA;   driver: &amp;amp;mut DRIVER_OBJECT,&#xA;   registry_path: PCUNICODE_STRING,&#xA;) -&amp;gt; NTSTATUS {&#xA;   0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add a &lt;code&gt;Makefile.toml&lt;/code&gt;:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;extend = &#34;.cargo-make-loadscripts/rust-driver-makefile.toml&#34;&#xA;&#xA;[env]&#xA;CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true&#xA;&#xA;[config]&#xA;load_script = &#34;&#34;&#34;&#xA;pwsh.exe -Command &#34;\&#xA;if ($env:CARGO_MAKE_CRATE_IS_WORKSPACE) { return };\&#xA;$cargoMakeURI = &#39;https://raw.githubusercontent.com/microsoft/windows-drivers-rs/main/rust-driver-makefile.toml&#39;;\&#xA;New-Item -ItemType Directory .cargo-make-loadscripts -Force;\&#xA;Invoke-RestMethod -Method GET -Uri $CargoMakeURI -OutFile $env:CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY/.cargo-make-loadscripts/rust-driver-makefile.toml\&#xA;&#34;&#xA;&#34;&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;11&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Add an inx file that matches the name of your &lt;code&gt;cdylib&lt;/code&gt; crate.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build the driver:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-pwsh&#34;&gt;cargo make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A &lt;code&gt;DriverCertificate.cer&lt;/code&gt; file will be generated, and a signed driver package will be available at &lt;code&gt;target/&amp;lt;Cargo profile&amp;gt;/package&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Trademark Notice&lt;/h2&gt; &#xA;&lt;p&gt;Trademarks This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow Microsoftâ€™s Trademark &amp;amp; Brand Guidelines. Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-partyâ€™s policies.&lt;/p&gt;</summary>
  </entry>
</feed>